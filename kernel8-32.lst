
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea00682f 	b	22124 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

00008070 <main>:
    8070:	e92d4010 	push	{r4, lr}
    8074:	e24ddd7b 	sub	sp, sp, #7872	; 0x1ec0
    8078:	e24dd020 	sub	sp, sp, #32
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb000012 	bl	80d0 <CKernel::CKernel()>
    8084:	e28d0004 	add	r0, sp, #4
    8088:	eb000062 	bl	8218 <CKernel::Initialize()>
    808c:	e2504000 	subs	r4, r0, #0
    8090:	0a000004 	beq	80a8 <main+0x38>
    8094:	e28d0004 	add	r0, sp, #4
    8098:	eb000118 	bl	8500 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	13a04000 	movne	r4, #0
    80a4:	0a000006 	beq	80c4 <main+0x54>
    80a8:	eb006811 	bl	220f4 <halt>
    80ac:	e28d0004 	add	r0, sp, #4
    80b0:	eb000236 	bl	8990 <CKernel::~CKernel()>
    80b4:	e1a00004 	mov	r0, r4
    80b8:	e28ddd7b 	add	sp, sp, #7872	; 0x1ec0
    80bc:	e28dd020 	add	sp, sp, #32
    80c0:	e8bd8010 	pop	{r4, pc}
    80c4:	eb00680d 	bl	22100 <reboot>
    80c8:	e3a04001 	mov	r4, #1
    80cc:	eafffff6 	b	80ac <main+0x3c>

000080d0 <CKernel::CKernel()>:
    80d0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    80d4:	e3a01001 	mov	r1, #1
    80d8:	e1a04000 	mov	r4, r0
    80dc:	e24dd00c 	sub	sp, sp, #12
    80e0:	e2809010 	add	r9, r0, #16
    80e4:	e284801c 	add	r8, r4, #28
    80e8:	eb006771 	bl	21eb4 <CMemorySystem::CMemorySystem(int)>
    80ec:	e1a00009 	mov	r0, r9
    80f0:	e2845d66 	add	r5, r4, #6528	; 0x1980
    80f4:	eb006300 	bl	20cfc <CActLED::CActLED()>
    80f8:	e1a00008 	mov	r0, r8
    80fc:	eb006ca9 	bl	233a8 <CKernelOptions::CKernelOptions()>
    8100:	e2840e85 	add	r0, r4, #2128	; 0x850
    8104:	e280000c 	add	r0, r0, #12
    8108:	e2855018 	add	r5, r5, #24
    810c:	eb007358 	bl	24e74 <CDeviceNameService::CDeviceNameService()>
    8110:	e1a00008 	mov	r0, r8
    8114:	eb006c6f 	bl	232d8 <CKernelOptions::GetWidth() const>
    8118:	e1a06000 	mov	r6, r0
    811c:	e1a00008 	mov	r0, r8
    8120:	e2847c1d 	add	r7, r4, #7424	; 0x1d00
    8124:	eb006c6d 	bl	232e0 <CKernelOptions::GetHeight() const>
    8128:	e1a02000 	mov	r2, r0
    812c:	e2840e86 	add	r0, r4, #2144	; 0x860
    8130:	e3a03000 	mov	r3, #0
    8134:	e1a01006 	mov	r1, r6
    8138:	e2800004 	add	r0, r0, #4
    813c:	eb006e62 	bl	23acc <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8140:	e3a02000 	mov	r2, #0
    8144:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8148:	e1a01002 	mov	r1, r2
    814c:	e2800004 	add	r0, r0, #4
    8150:	e2846d6f 	add	r6, r4, #7104	; 0x1bc0
    8154:	eb007577 	bl	25738 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>
    8158:	e2840d66 	add	r0, r4, #6528	; 0x1980
    815c:	e2800014 	add	r0, r0, #20
    8160:	e2866018 	add	r6, r6, #24
    8164:	eb007ab4 	bl	26c3c <CExceptionHandler::CExceptionHandler()>
    8168:	e1a00005 	mov	r0, r5
    816c:	eb007b8b 	bl	26fa0 <CInterruptSystem::CInterruptSystem()>
    8170:	e1a01005 	mov	r1, r5
    8174:	e1a00006 	mov	r0, r6
    8178:	e2877024 	add	r7, r7, #36	; 0x24
    817c:	eb006813 	bl	221d0 <CTimer::CTimer(CInterruptSystem*)>
    8180:	e1a00008 	mov	r0, r8
    8184:	eb006c5a 	bl	232f4 <CKernelOptions::GetLogLevel() const>
    8188:	e1a02006 	mov	r2, r6
    818c:	e1a01000 	mov	r1, r0
    8190:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8194:	eb0073e5 	bl	25130 <CLogger::CLogger(unsigned int, CTimer*)>
    8198:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    819c:	e1a02006 	mov	r2, r6
    81a0:	e1a01005 	mov	r1, r5
    81a4:	e280001c 	add	r0, r0, #28
    81a8:	eb00070d 	bl	9de4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    81ac:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    81b0:	e2800008 	add	r0, r0, #8
    81b4:	eb0060ca 	bl	204e4 <CScheduler::CScheduler()>
    81b8:	e3a03000 	mov	r3, #0
    81bc:	e58d3000 	str	r3, [sp]
    81c0:	e1a02003 	mov	r2, r3
    81c4:	e1a01003 	mov	r1, r3
    81c8:	e1a00007 	mov	r0, r7
    81cc:	eb0036f3 	bl	15da0 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*)>
    81d0:	e2840c1e 	add	r0, r4, #7680	; 0x1e00
    81d4:	e1a01007 	mov	r1, r7
    81d8:	e280003c 	add	r0, r0, #60	; 0x3c
    81dc:	eb0058f8 	bl	1e5c4 <CDNSClient::CDNSClient(CNetSubSystem*)>
    81e0:	e1a01005 	mov	r1, r5
    81e4:	e2840d79 	add	r0, r4, #7744	; 0x1e40
    81e8:	eb007e32 	bl	27ab8 <CPWMSoundDevice::CPWMSoundDevice(CInterruptSystem*)>
    81ec:	e301cc5c 	movw	ip, #7260	; 0x1c5c
    81f0:	e340c003 	movt	ip, #3
    81f4:	e1a00009 	mov	r0, r9
    81f8:	e3a03f7d 	mov	r3, #500	; 0x1f4
    81fc:	e3a020c8 	mov	r2, #200	; 0xc8
    8200:	e3a01005 	mov	r1, #5
    8204:	e58c4000 	str	r4, [ip]
    8208:	eb006303 	bl	20e1c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    820c:	e1a00004 	mov	r0, r4
    8210:	e28dd00c 	add	sp, sp, #12
    8214:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

00008218 <CKernel::Initialize()>:
    8218:	e92d4070 	push	{r4, r5, r6, lr}
    821c:	e2805e86 	add	r5, r0, #2144	; 0x860
    8220:	e2855004 	add	r5, r5, #4
    8224:	e1a04000 	mov	r4, r0
    8228:	e1a00005 	mov	r0, r5
    822c:	eb0071cd 	bl	24968 <CScreenDevice::Initialize()>
    8230:	e3500000 	cmp	r0, #0
    8234:	1a000001 	bne	8240 <CKernel::Initialize()+0x28>
    8238:	e3a00000 	mov	r0, #0
    823c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8240:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8244:	e3a01cc2 	mov	r1, #49664	; 0xc200
    8248:	e3401001 	movt	r1, #1
    824c:	e2800004 	add	r0, r0, #4
    8250:	eb007567 	bl	257f4 <CSerialDevice::Initialize(unsigned int)>
    8254:	e3500000 	cmp	r0, #0
    8258:	0afffff6 	beq	8238 <CKernel::Initialize()+0x20>
    825c:	e284001c 	add	r0, r4, #28
    8260:	eb006c20 	bl	232e8 <CKernelOptions::GetLogDevice() const>
    8264:	e1a01000 	mov	r1, r0
    8268:	e2840e85 	add	r0, r4, #2128	; 0x850
    826c:	e3a02000 	mov	r2, #0
    8270:	e280000c 	add	r0, r0, #12
    8274:	eb00735b 	bl	24fe8 <CDeviceNameService::GetDevice(char const*, int)>
    8278:	e1a01005 	mov	r1, r5
    827c:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8280:	eb0074b1 	bl	2554c <CLogger::Initialize(CDevice*)>
    8284:	e3500000 	cmp	r0, #0
    8288:	0affffea 	beq	8238 <CKernel::Initialize()+0x20>
    828c:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8290:	e2800018 	add	r0, r0, #24
    8294:	eb007b54 	bl	26fec <CInterruptSystem::Initialize()>
    8298:	e3500000 	cmp	r0, #0
    829c:	0affffe5 	beq	8238 <CKernel::Initialize()+0x20>
    82a0:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    82a4:	e2800018 	add	r0, r0, #24
    82a8:	eb006a34 	bl	22b80 <CTimer::Initialize()>
    82ac:	e3500000 	cmp	r0, #0
    82b0:	0affffe0 	beq	8238 <CKernel::Initialize()+0x20>
    82b4:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    82b8:	e280001c 	add	r0, r0, #28
    82bc:	eb000e97 	bl	bd20 <CDWHCIDevice::Initialize()>
    82c0:	e3500000 	cmp	r0, #0
    82c4:	0affffdb 	beq	8238 <CKernel::Initialize()+0x20>
    82c8:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    82cc:	e2800024 	add	r0, r0, #36	; 0x24
    82d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    82d4:	ea0036fe 	b	15ed4 <CNetSubSystem::Initialize()>

000082d8 <tfoo(unsigned int, void const*)>:
    82d8:	e92d4010 	push	{r4, lr}
    82dc:	e1a04001 	mov	r4, r1
    82e0:	e24dd008 	sub	sp, sp, #8
    82e4:	eb0073af 	bl	251a8 <CLogger::Get()>
    82e8:	e594c000 	ldr	ip, [r4]
    82ec:	e3a02003 	mov	r2, #3
    82f0:	e30a31f4 	movw	r3, #41460	; 0xa1f4
    82f4:	e3403002 	movt	r3, #2
    82f8:	e58dc000 	str	ip, [sp]
    82fc:	e30a1200 	movw	r1, #41472	; 0xa200
    8300:	e3401002 	movt	r1, #2
    8304:	eb007484 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8308:	e28dd008 	add	sp, sp, #8
    830c:	e8bd8010 	pop	{r4, pc}

00008310 <tfooinf(unsigned int, void const*)>:
    8310:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8314:	e30a51f4 	movw	r5, #41460	; 0xa1f4
    8318:	e3405002 	movt	r5, #2
    831c:	e30a4200 	movw	r4, #41472	; 0xa200
    8320:	e3404002 	movt	r4, #2
    8324:	e24dd00c 	sub	sp, sp, #12
    8328:	e1a06001 	mov	r6, r1
    832c:	eb00739d 	bl	251a8 <CLogger::Get()>
    8330:	e5961000 	ldr	r1, [r6]
    8334:	e1a03005 	mov	r3, r5
    8338:	e3a02003 	mov	r2, #3
    833c:	e58d1000 	str	r1, [sp]
    8340:	e1a01004 	mov	r1, r4
    8344:	eb007474 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8348:	eb0061f6 	bl	20b28 <CScheduler::Get()>
    834c:	e3a01005 	mov	r1, #5
    8350:	eb0061af 	bl	20a14 <CScheduler::Sleep(unsigned int)>
    8354:	eafffff4 	b	832c <tfooinf(unsigned int, void const*)+0x1c>

00008358 <my_strstr(char*, char const*, int&)>:
    8358:	e3510000 	cmp	r1, #0
    835c:	13500000 	cmpne	r0, #0
    8360:	e3a03000 	mov	r3, #0
    8364:	e5823000 	str	r3, [r2]
    8368:	0a000023 	beq	83fc <my_strstr(char*, char const*, int&)+0xa4>
    836c:	e92d4070 	push	{r4, r5, r6, lr}
    8370:	e1d0e0d0 	ldrsb	lr, [r0]
    8374:	e15e0003 	cmp	lr, r3
    8378:	0a00001b 	beq	83ec <my_strstr(char*, char const*, int&)+0x94>
    837c:	e1d160d0 	ldrsb	r6, [r1]
    8380:	e16f3f16 	clz	r3, r6
    8384:	e1a0c006 	mov	ip, r6
    8388:	e1a032a3 	lsr	r3, r3, #5
    838c:	e15e0006 	cmp	lr, r6
    8390:	13833001 	orrne	r3, r3, #1
    8394:	e3530000 	cmp	r3, #0
    8398:	01a05001 	moveq	r5, r1
    839c:	01a04000 	moveq	r4, r0
    83a0:	0a000007 	beq	83c4 <my_strstr(char*, char const*, int&)+0x6c>
    83a4:	ea00000a 	b	83d4 <my_strstr(char*, char const*, int&)+0x7c>
    83a8:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
    83ac:	e16f3f1c 	clz	r3, ip
    83b0:	e1a032a3 	lsr	r3, r3, #5
    83b4:	e15e000c 	cmp	lr, ip
    83b8:	13833001 	orrne	r3, r3, #1
    83bc:	e3530000 	cmp	r3, #0
    83c0:	1a000003 	bne	83d4 <my_strstr(char*, char const*, int&)+0x7c>
    83c4:	e1f4e0d1 	ldrsb	lr, [r4, #1]!
    83c8:	e35e0000 	cmp	lr, #0
    83cc:	1afffff5 	bne	83a8 <my_strstr(char*, char const*, int&)+0x50>
    83d0:	e1d5c0d1 	ldrsb	ip, [r5, #1]
    83d4:	e35c0000 	cmp	ip, #0
    83d8:	08bd8070 	popeq	{r4, r5, r6, pc}
    83dc:	e1d0e0d1 	ldrsb	lr, [r0, #1]
    83e0:	e2800001 	add	r0, r0, #1
    83e4:	e35e0000 	cmp	lr, #0
    83e8:	1affffe4 	bne	8380 <my_strstr(char*, char const*, int&)+0x28>
    83ec:	e3a03001 	mov	r3, #1
    83f0:	e3a00000 	mov	r0, #0
    83f4:	e5823000 	str	r3, [r2]
    83f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    83fc:	e1a00003 	mov	r0, r3
    8400:	e12fff1e 	bx	lr

00008404 <modifysong(char*, char*)>:
    8404:	e1d030d0 	ldrsb	r3, [r0]
    8408:	e3530000 	cmp	r3, #0
    840c:	0a000012 	beq	845c <modifysong(char*, char*)+0x58>
    8410:	e92d4010 	push	{r4, lr}
    8414:	e3a02000 	mov	r2, #0
    8418:	e3a04025 	mov	r4, #37	; 0x25
    841c:	e3a0e032 	mov	lr, #50	; 0x32
    8420:	e3a0c030 	mov	ip, #48	; 0x30
    8424:	e3530020 	cmp	r3, #32
    8428:	01a03001 	moveq	r3, r1
    842c:	17c13002 	strbne	r3, [r1, r2]
    8430:	12822001 	addne	r2, r2, #1
    8434:	07e34002 	strbeq	r4, [r3, r2]!
    8438:	02822003 	addeq	r2, r2, #3
    843c:	05c3e001 	strbeq	lr, [r3, #1]
    8440:	05c3c002 	strbeq	ip, [r3, #2]
    8444:	e1f030d1 	ldrsb	r3, [r0, #1]!
    8448:	e3530000 	cmp	r3, #0
    844c:	1afffff4 	bne	8424 <modifysong(char*, char*)+0x20>
    8450:	e3a03000 	mov	r3, #0
    8454:	e7c13002 	strb	r3, [r1, r2]
    8458:	e8bd8010 	pop	{r4, pc}
    845c:	e1a02003 	mov	r2, r3
    8460:	e3a03000 	mov	r3, #0
    8464:	e7c13002 	strb	r3, [r1, r2]
    8468:	e12fff1e 	bx	lr

0000846c <CKernel::modify(char*, char*)>:
    846c:	e92d4070 	push	{r4, r5, r6, lr}
    8470:	e1a06000 	mov	r6, r0
    8474:	e1a05002 	mov	r5, r2
    8478:	e24dd010 	sub	sp, sp, #16
    847c:	e1a00001 	mov	r0, r1
    8480:	e28d2008 	add	r2, sp, #8
    8484:	e30a1208 	movw	r1, #41480	; 0xa208
    8488:	e3401002 	movt	r1, #2
    848c:	ebffffb1 	bl	8358 <my_strstr(char*, char const*, int&)>
    8490:	e28d200c 	add	r2, sp, #12
    8494:	e30a1210 	movw	r1, #41488	; 0xa210
    8498:	e3401002 	movt	r1, #2
    849c:	eb006ab5 	bl	22f78 <strtok_r>
    84a0:	e59d300c 	ldr	r3, [sp, #12]
    84a4:	e30a1210 	movw	r1, #41488	; 0xa210
    84a8:	e3401002 	movt	r1, #2
    84ac:	e3a00000 	mov	r0, #0
    84b0:	e1d320d0 	ldrsb	r2, [r3]
    84b4:	e352002f 	cmp	r2, #47	; 0x2f
    84b8:	e28d200c 	add	r2, sp, #12
    84bc:	02833001 	addeq	r3, r3, #1
    84c0:	058d300c 	streq	r3, [sp, #12]
    84c4:	eb006aab 	bl	22f78 <strtok_r>
    84c8:	e3a02003 	mov	r2, #3
    84cc:	e1a04000 	mov	r4, r0
    84d0:	e58d0000 	str	r0, [sp]
    84d4:	e30a3214 	movw	r3, #41492	; 0xa214
    84d8:	e3403002 	movt	r3, #2
    84dc:	e2860b07 	add	r0, r6, #7168	; 0x1c00
    84e0:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    84e4:	e3401002 	movt	r1, #2
    84e8:	eb00740b 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    84ec:	e1a01004 	mov	r1, r4
    84f0:	e1a00005 	mov	r0, r5
    84f4:	eb006a60 	bl	22e7c <strcpy>
    84f8:	e28dd010 	add	sp, sp, #16
    84fc:	e8bd8070 	pop	{r4, r5, r6, pc}

00008500 <CKernel::Run()>:
    8500:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8504:	e2804b07 	add	r4, r0, #7168	; 0x1c00
    8508:	e1a05000 	mov	r5, r0
    850c:	e24ddd4f 	sub	sp, sp, #5056	; 0x13c0
    8510:	e1a00004 	mov	r0, r4
    8514:	e24dd024 	sub	sp, sp, #36	; 0x24
    8518:	e3a02003 	mov	r2, #3
    851c:	e30a323c 	movw	r3, #41532	; 0xa23c
    8520:	e3403002 	movt	r3, #2
    8524:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    8528:	e3401002 	movt	r1, #2
    852c:	eb0073fa 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8530:	e2850e85 	add	r0, r5, #2128	; 0x850
    8534:	e280000c 	add	r0, r0, #12
    8538:	e30a1260 	movw	r1, #41568	; 0xa260
    853c:	e3401002 	movt	r1, #2
    8540:	e3a02000 	mov	r2, #0
    8544:	eb0072a7 	bl	24fe8 <CDeviceNameService::GetDevice(char const*, int)>
    8548:	e2506000 	subs	r6, r0, #0
    854c:	0a000102 	beq	895c <CKernel::Run()+0x45c>
    8550:	e3081a50 	movw	r1, #35408	; 0x8a50
    8554:	e3401000 	movt	r1, #0
    8558:	eb00206f 	bl	1071c <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>
    855c:	e28d0efd 	add	r0, sp, #4048	; 0xfd0
    8560:	e1a01006 	mov	r1, r6
    8564:	e2800004 	add	r0, r0, #4
    8568:	e2857c1d 	add	r7, r5, #7424	; 0x1d00
    856c:	eb0005a1 	bl	9bf8 <Keyboard::Keyboard(CUSBKeyboardDevice*)>
    8570:	e2877024 	add	r7, r7, #36	; 0x24
    8574:	e28d0024 	add	r0, sp, #36	; 0x24
    8578:	eb00768d 	bl	25fb4 <CString::CString()>
    857c:	e1a00007 	mov	r0, r7
    8580:	eb0036ad 	bl	1603c <CNetSubSystem::GetConfig()>
    8584:	e2858e86 	add	r8, r5, #2144	; 0x860
    8588:	eb0054a4 	bl	1d820 <CNetConfig::GetIPAddress() const>
    858c:	e28d1024 	add	r1, sp, #36	; 0x24
    8590:	eb00561c 	bl	1de08 <CIPAddress::Format(CString*) const>
    8594:	e28d0024 	add	r0, sp, #36	; 0x24
    8598:	eb00769b 	bl	2600c <CString::operator char const*() const>
    859c:	e3a02003 	mov	r2, #3
    85a0:	e58d0000 	str	r0, [sp]
    85a4:	e30a327c 	movw	r3, #41596	; 0xa27c
    85a8:	e3403002 	movt	r3, #2
    85ac:	e1a00004 	mov	r0, r4
    85b0:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    85b4:	e3401002 	movt	r1, #2
    85b8:	eb0073d7 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    85bc:	e3010890 	movw	r0, #6288	; 0x1890
    85c0:	eb006674 	bl	21f98 <operator new(unsigned int)>
    85c4:	e2853d79 	add	r3, r5, #7744	; 0x1e40
    85c8:	e3a0c000 	mov	ip, #0
    85cc:	e1a0e003 	mov	lr, r3
    85d0:	e30a2294 	movw	r2, #41620	; 0xa294
    85d4:	e3402002 	movt	r2, #2
    85d8:	e1a0a000 	mov	sl, r0
    85dc:	e58d2000 	str	r2, [sp]
    85e0:	e58dc014 	str	ip, [sp, #20]
    85e4:	e1a0200e 	mov	r2, lr
    85e8:	e58dc010 	str	ip, [sp, #16]
    85ec:	e3a0e050 	mov	lr, #80	; 0x50
    85f0:	e58dc00c 	str	ip, [sp, #12]
    85f4:	e2888004 	add	r8, r8, #4
    85f8:	e3a0c001 	mov	ip, #1
    85fc:	e58d301c 	str	r3, [sp, #28]
    8600:	e1a01007 	mov	r1, r7
    8604:	e1a03008 	mov	r3, r8
    8608:	e98d5000 	stmib	sp, {ip, lr}
    860c:	e2856d73 	add	r6, r5, #7360	; 0x1cc0
    8610:	eb000186 	bl	8c30 <HTTPClient::HTTPClient(CNetSubSystem*, CPWMSoundDevice*, CScreenDevice*, char*, int, int, CSocket*, unsigned int, int)>
    8614:	e3a02003 	mov	r2, #3
    8618:	e1a00004 	mov	r0, r4
    861c:	e30a3298 	movw	r3, #41624	; 0xa298
    8620:	e3403002 	movt	r3, #2
    8624:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    8628:	e3401002 	movt	r1, #2
    862c:	eb0073ba 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8630:	e59a2050 	ldr	r2, [sl, #80]	; 0x50
    8634:	e30a32ac 	movw	r3, #41644	; 0xa2ac
    8638:	e3403002 	movt	r3, #2
    863c:	e58d2000 	str	r2, [sp]
    8640:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    8644:	e3401002 	movt	r1, #2
    8648:	e3a02003 	mov	r2, #3
    864c:	e1a00004 	mov	r0, r4
    8650:	e2866008 	add	r6, r6, #8
    8654:	eb0073b0 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8658:	e28d0efd 	add	r0, sp, #4048	; 0xfd0
    865c:	e2800004 	add	r0, r0, #4
    8660:	eb000590 	bl	9ca8 <Keyboard::IsEndOfLine()>
    8664:	e3500000 	cmp	r0, #0
    8668:	0afffffa 	beq	8658 <CKernel::Run()+0x158>
    866c:	e59a3050 	ldr	r3, [sl, #80]	; 0x50
    8670:	e1a00006 	mov	r0, r6
    8674:	e3530001 	cmp	r3, #1
    8678:	0a000001 	beq	8684 <CKernel::Run()+0x184>
    867c:	eb00607b 	bl	20870 <CScheduler::Yield()>
    8680:	eafffff4 	b	8658 <CKernel::Run()+0x158>
    8684:	e28d9034 	add	r9, sp, #52	; 0x34
    8688:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    868c:	e3a01000 	mov	r1, #0
    8690:	e1a00009 	mov	r0, r9
    8694:	eb0069b3 	bl	22d68 <memset>
    8698:	e59a1054 	ldr	r1, [sl, #84]	; 0x54
    869c:	e1a00009 	mov	r0, r9
    86a0:	eb0069f5 	bl	22e7c <strcpy>
    86a4:	e3a02003 	mov	r2, #3
    86a8:	e1a00004 	mov	r0, r4
    86ac:	e58d9000 	str	r9, [sp]
    86b0:	e30a32cc 	movw	r3, #41676	; 0xa2cc
    86b4:	e3403002 	movt	r3, #2
    86b8:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    86bc:	e3401002 	movt	r1, #2
    86c0:	eb007395 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    86c4:	e3010890 	movw	r0, #6288	; 0x1890
    86c8:	eb006632 	bl	21f98 <operator new(unsigned int)>
    86cc:	e1a0b000 	mov	fp, r0
    86d0:	e3a02000 	mov	r2, #0
    86d4:	e3a0105a 	mov	r1, #90	; 0x5a
    86d8:	e3a0c002 	mov	ip, #2
    86dc:	e58d2014 	str	r2, [sp, #20]
    86e0:	e1a03008 	mov	r3, r8
    86e4:	e58d2010 	str	r2, [sp, #16]
    86e8:	e58d200c 	str	r2, [sp, #12]
    86ec:	e58d1008 	str	r1, [sp, #8]
    86f0:	e1a01007 	mov	r1, r7
    86f4:	e58d9000 	str	r9, [sp]
    86f8:	e59d201c 	ldr	r2, [sp, #28]
    86fc:	e58dc004 	str	ip, [sp, #4]
    8700:	eb00014a 	bl	8c30 <HTTPClient::HTTPClient(CNetSubSystem*, CPWMSoundDevice*, CScreenDevice*, char*, int, int, CSocket*, unsigned int, int)>
    8704:	e59b3050 	ldr	r3, [fp, #80]	; 0x50
    8708:	e3530001 	cmp	r3, #1
    870c:	0a000004 	beq	8724 <CKernel::Run()+0x224>
    8710:	e1a00006 	mov	r0, r6
    8714:	eb006055 	bl	20870 <CScheduler::Yield()>
    8718:	e59b3050 	ldr	r3, [fp, #80]	; 0x50
    871c:	e3530001 	cmp	r3, #1
    8720:	1afffffa 	bne	8710 <CKernel::Run()+0x210>
    8724:	e28dae41 	add	sl, sp, #1040	; 0x410
    8728:	e28d9b02 	add	r9, sp, #2048	; 0x800
    872c:	e28aa00c 	add	sl, sl, #12
    8730:	e2899004 	add	r9, r9, #4
    8734:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8738:	e1a0000a 	mov	r0, sl
    873c:	e3a01000 	mov	r1, #0
    8740:	eb006988 	bl	22d68 <memset>
    8744:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8748:	e1a00009 	mov	r0, r9
    874c:	e3a01000 	mov	r1, #0
    8750:	eb006984 	bl	22d68 <memset>
    8754:	e59b1054 	ldr	r1, [fp, #84]	; 0x54
    8758:	e1a0000a 	mov	r0, sl
    875c:	eb0069c6 	bl	22e7c <strcpy>
    8760:	e1a01009 	mov	r1, r9
    8764:	e1a0000a 	mov	r0, sl
    8768:	ebffff25 	bl	8404 <modifysong(char*, char*)>
    876c:	e58da000 	str	sl, [sp]
    8770:	e1a00004 	mov	r0, r4
    8774:	e3a02003 	mov	r2, #3
    8778:	e30a32f4 	movw	r3, #41716	; 0xa2f4
    877c:	e3403002 	movt	r3, #2
    8780:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    8784:	e3401002 	movt	r1, #2
    8788:	eb007363 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    878c:	e3a02003 	mov	r2, #3
    8790:	e1a00004 	mov	r0, r4
    8794:	e58d9000 	str	r9, [sp]
    8798:	e30a32f4 	movw	r3, #41716	; 0xa2f4
    879c:	e3403002 	movt	r3, #2
    87a0:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    87a4:	e3401002 	movt	r1, #2
    87a8:	eb00735b 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    87ac:	e3010890 	movw	r0, #6288	; 0x1890
    87b0:	eb0065f8 	bl	21f98 <operator new(unsigned int)>
    87b4:	e3a0c000 	mov	ip, #0
    87b8:	e1a0a000 	mov	sl, r0
    87bc:	e3a0e064 	mov	lr, #100	; 0x64
    87c0:	e58dc014 	str	ip, [sp, #20]
    87c4:	e1a03008 	mov	r3, r8
    87c8:	e58dc010 	str	ip, [sp, #16]
    87cc:	e1a01007 	mov	r1, r7
    87d0:	e58dc00c 	str	ip, [sp, #12]
    87d4:	e3a0c003 	mov	ip, #3
    87d8:	e59d201c 	ldr	r2, [sp, #28]
    87dc:	e58d9000 	str	r9, [sp]
    87e0:	e58de008 	str	lr, [sp, #8]
    87e4:	e58dc004 	str	ip, [sp, #4]
    87e8:	eb000110 	bl	8c30 <HTTPClient::HTTPClient(CNetSubSystem*, CPWMSoundDevice*, CScreenDevice*, char*, int, int, CSocket*, unsigned int, int)>
    87ec:	e59a1050 	ldr	r1, [sl, #80]	; 0x50
    87f0:	e3a02003 	mov	r2, #3
    87f4:	e30a331c 	movw	r3, #41756	; 0xa31c
    87f8:	e3403002 	movt	r3, #2
    87fc:	e58d1000 	str	r1, [sp]
    8800:	e1a00004 	mov	r0, r4
    8804:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    8808:	e3401002 	movt	r1, #2
    880c:	eb007342 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8810:	ea000002 	b	8820 <CKernel::Run()+0x320>
    8814:	eb000523 	bl	9ca8 <Keyboard::IsEndOfLine()>
    8818:	e3500000 	cmp	r0, #0
    881c:	1a00004b 	bne	8950 <CKernel::Run()+0x450>
    8820:	e59a3050 	ldr	r3, [sl, #80]	; 0x50
    8824:	e28d0efd 	add	r0, sp, #4048	; 0xfd0
    8828:	e2800004 	add	r0, r0, #4
    882c:	e3530001 	cmp	r3, #1
    8830:	1afffff7 	bne	8814 <CKernel::Run()+0x314>
    8834:	e59a2054 	ldr	r2, [sl, #84]	; 0x54
    8838:	e1a00004 	mov	r0, r4
    883c:	e30a333c 	movw	r3, #41788	; 0xa33c
    8840:	e3403002 	movt	r3, #2
    8844:	e58d2000 	str	r2, [sp]
    8848:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    884c:	e3401002 	movt	r1, #2
    8850:	e3a02003 	mov	r2, #3
    8854:	e28d7ebe 	add	r7, sp, #3040	; 0xbe0
    8858:	eb00732f 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    885c:	e287700c 	add	r7, r7, #12
    8860:	e3a02003 	mov	r2, #3
    8864:	e1a00004 	mov	r0, r4
    8868:	e30a335c 	movw	r3, #41820	; 0xa35c
    886c:	e3403002 	movt	r3, #2
    8870:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    8874:	e3401002 	movt	r1, #2
    8878:	eb007327 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    887c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8880:	e3a01000 	mov	r1, #0
    8884:	e1a00007 	mov	r0, r7
    8888:	eb006936 	bl	22d68 <memset>
    888c:	e1a00005 	mov	r0, r5
    8890:	e1a02007 	mov	r2, r7
    8894:	e59a1054 	ldr	r1, [sl, #84]	; 0x54
    8898:	ebfffef3 	bl	846c <CKernel::modify(char*, char*)>
    889c:	e3a02003 	mov	r2, #3
    88a0:	e1a00004 	mov	r0, r4
    88a4:	e58d7000 	str	r7, [sp]
    88a8:	e30a3368 	movw	r3, #41832	; 0xa368
    88ac:	e3403002 	movt	r3, #2
    88b0:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    88b4:	e3401002 	movt	r1, #2
    88b8:	eb007317 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    88bc:	e3a02003 	mov	r2, #3
    88c0:	e1a00004 	mov	r0, r4
    88c4:	e30a335c 	movw	r3, #41820	; 0xa35c
    88c8:	e3403002 	movt	r3, #2
    88cc:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    88d0:	e3401002 	movt	r1, #2
    88d4:	eb007310 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    88d8:	e3a00008 	mov	r0, #8
    88dc:	eb0065ad 	bl	21f98 <operator new(unsigned int)>
    88e0:	e1a08000 	mov	r8, r0
    88e4:	eb005429 	bl	1d990 <CIPAddress::CIPAddress()>
    88e8:	e2850c1e 	add	r0, r5, #7680	; 0x1e00
    88ec:	e1a02008 	mov	r2, r8
    88f0:	e1a01007 	mov	r1, r7
    88f4:	e280003c 	add	r0, r0, #60	; 0x3c
    88f8:	eb005741 	bl	1e604 <CDNSClient::Resolve(char const*, CIPAddress*)>
    88fc:	e30015dc 	movw	r1, #1500	; 0x5dc
    8900:	e1a00006 	mov	r0, r6
    8904:	eb006059 	bl	20a70 <CScheduler::MsSleep(unsigned int)>
    8908:	e3a00010 	mov	r0, #16
    890c:	eb0065a1 	bl	21f98 <operator new(unsigned int)>
    8910:	e1a05000 	mov	r5, r0
    8914:	eb0075a6 	bl	25fb4 <CString::CString()>
    8918:	e1a01005 	mov	r1, r5
    891c:	e1a00008 	mov	r0, r8
    8920:	eb005538 	bl	1de08 <CIPAddress::Format(CString*) const>
    8924:	e1a00005 	mov	r0, r5
    8928:	eb0075b7 	bl	2600c <CString::operator char const*() const>
    892c:	e30a3390 	movw	r3, #41872	; 0xa390
    8930:	e3403002 	movt	r3, #2
    8934:	e58d0000 	str	r0, [sp]
    8938:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    893c:	e3401002 	movt	r1, #2
    8940:	e1a00004 	mov	r0, r4
    8944:	e3a02003 	mov	r2, #3
    8948:	eb0072f3 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    894c:	eafffffe 	b	894c <CKernel::Run()+0x44c>
    8950:	e1a00006 	mov	r0, r6
    8954:	eb005fc5 	bl	20870 <CScheduler::Yield()>
    8958:	eaffffb0 	b	8820 <CKernel::Run()+0x320>
    895c:	e1a00004 	mov	r0, r4
    8960:	e3a02001 	mov	r2, #1
    8964:	e30a3268 	movw	r3, #41576	; 0xa268
    8968:	e3403002 	movt	r3, #2
    896c:	e30a11ec 	movw	r1, #41452	; 0xa1ec
    8970:	e3401002 	movt	r1, #2
    8974:	eb0072e8 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8978:	e3a00001 	mov	r0, #1
    897c:	e28ddd4f 	add	sp, sp, #5056	; 0x13c0
    8980:	e28dd024 	add	sp, sp, #36	; 0x24
    8984:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008988 <CKernel::TimerHandler(unsigned int, void*, void*)>:
    8988:	e3a03605 	mov	r3, #5242880	; 0x500000
    898c:	e12fff13 	bx	r3

00008990 <CKernel::~CKernel()>:
    8990:	e3013c5c 	movw	r3, #7260	; 0x1c5c
    8994:	e3403003 	movt	r3, #3
    8998:	e92d4010 	push	{r4, lr}
    899c:	e3a02000 	mov	r2, #0
    89a0:	e1a04000 	mov	r4, r0
    89a4:	e2800d79 	add	r0, r0, #7744	; 0x1e40
    89a8:	e5832000 	str	r2, [r3]
    89ac:	eb007bb1 	bl	27878 <CPWMSoundDevice::~CPWMSoundDevice()>
    89b0:	e2840c1e 	add	r0, r4, #7680	; 0x1e00
    89b4:	e280003c 	add	r0, r0, #60	; 0x3c
    89b8:	eb005710 	bl	1e600 <CDNSClient::~CDNSClient()>
    89bc:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    89c0:	e2800024 	add	r0, r0, #36	; 0x24
    89c4:	eb00352c 	bl	15e7c <CNetSubSystem::~CNetSubSystem()>
    89c8:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    89cc:	e2800008 	add	r0, r0, #8
    89d0:	eb005f26 	bl	20670 <CScheduler::~CScheduler()>
    89d4:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    89d8:	e280001c 	add	r0, r0, #28
    89dc:	eb0004cc 	bl	9d14 <CDWHCIDevice::~CDWHCIDevice()>
    89e0:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    89e4:	eb0071e3 	bl	25178 <CLogger::~CLogger()>
    89e8:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    89ec:	e2800018 	add	r0, r0, #24
    89f0:	eb006616 	bl	22250 <CTimer::~CTimer()>
    89f4:	e2840d66 	add	r0, r4, #6528	; 0x1980
    89f8:	e2800018 	add	r0, r0, #24
    89fc:	eb007975 	bl	26fd8 <CInterruptSystem::~CInterruptSystem()>
    8a00:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8a04:	e2800014 	add	r0, r0, #20
    8a08:	eb0078af 	bl	26ccc <CExceptionHandler::~CExceptionHandler()>
    8a0c:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8a10:	e2800004 	add	r0, r0, #4
    8a14:	eb0074fd 	bl	25e10 <CSerialDevice::~CSerialDevice()>
    8a18:	e2840e86 	add	r0, r4, #2144	; 0x860
    8a1c:	e2800004 	add	r0, r0, #4
    8a20:	eb006bdc 	bl	23998 <CScreenDevice::~CScreenDevice()>
    8a24:	e2840e85 	add	r0, r4, #2128	; 0x850
    8a28:	e280000c 	add	r0, r0, #12
    8a2c:	eb007123 	bl	24ec0 <CDeviceNameService::~CDeviceNameService()>
    8a30:	e284001c 	add	r0, r4, #28
    8a34:	eb006a22 	bl	232c4 <CKernelOptions::~CKernelOptions()>
    8a38:	e2840010 	add	r0, r4, #16
    8a3c:	eb006089 	bl	20c68 <CActLED::~CActLED()>
    8a40:	e1a00004 	mov	r0, r4
    8a44:	eb0064b6 	bl	21d24 <CMemorySystem::~CMemorySystem()>
    8a48:	e1a00004 	mov	r0, r4
    8a4c:	e8bd8010 	pop	{r4, pc}

00008a50 <CKernel::KeyPressedHandler(char const*)>:
    8a50:	e92d4070 	push	{r4, r5, r6, lr}
    8a54:	e3016c5c 	movw	r6, #7260	; 0x1c5c
    8a58:	e3406003 	movt	r6, #3
    8a5c:	e1a04000 	mov	r4, r0
    8a60:	e5963000 	ldr	r3, [r6]
    8a64:	e3530000 	cmp	r3, #0
    8a68:	0a000024 	beq	8b00 <CKernel::KeyPressedHandler(char const*)+0xb0>
    8a6c:	e1a00004 	mov	r0, r4
    8a70:	eb0068dc 	bl	22de8 <strlen>
    8a74:	e1a05000 	mov	r5, r0
    8a78:	e5960000 	ldr	r0, [r6]
    8a7c:	e1a02005 	mov	r2, r5
    8a80:	e1a01004 	mov	r1, r4
    8a84:	e2800e86 	add	r0, r0, #2144	; 0x860
    8a88:	e2800004 	add	r0, r0, #4
    8a8c:	eb006f85 	bl	248a8 <CScreenDevice::Write(void const*, unsigned int)>
    8a90:	eb000465 	bl	9c2c <Keyboard::Get()>
    8a94:	e2506000 	subs	r6, r0, #0
    8a98:	0a000011 	beq	8ae4 <CKernel::KeyPressedHandler(char const*)+0x94>
    8a9c:	e1a00006 	mov	r0, r6
    8aa0:	eb000480 	bl	9ca8 <Keyboard::IsEndOfLine()>
    8aa4:	e3500000 	cmp	r0, #0
    8aa8:	1a000008 	bne	8ad0 <CKernel::KeyPressedHandler(char const*)+0x80>
    8aac:	e3550000 	cmp	r5, #0
    8ab0:	08bd8070 	popeq	{r4, r5, r6, pc}
    8ab4:	e0845005 	add	r5, r4, r5
    8ab8:	e0d410d1 	ldrsb	r1, [r4], #1
    8abc:	e1a00006 	mov	r0, r6
    8ac0:	eb00045d 	bl	9c3c <Keyboard::AppendToBuffer(char)>
    8ac4:	e1540005 	cmp	r4, r5
    8ac8:	1afffffa 	bne	8ab8 <CKernel::KeyPressedHandler(char const*)+0x68>
    8acc:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ad0:	e1a00006 	mov	r0, r6
    8ad4:	eb00046f 	bl	9c98 <Keyboard::ClearBuffer()>
    8ad8:	e3550000 	cmp	r5, #0
    8adc:	1afffff4 	bne	8ab4 <CKernel::KeyPressedHandler(char const*)+0x64>
    8ae0:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ae4:	e30a139c 	movw	r1, #41884	; 0xa39c
    8ae8:	e3401002 	movt	r1, #2
    8aec:	e30a03b8 	movw	r0, #41912	; 0xa3b8
    8af0:	e3400002 	movt	r0, #2
    8af4:	e3002152 	movw	r2, #338	; 0x152
    8af8:	eb007028 	bl	24ba0 <assertion_failed>
    8afc:	eaffffe6 	b	8a9c <CKernel::KeyPressedHandler(char const*)+0x4c>
    8b00:	e30a139c 	movw	r1, #41884	; 0xa39c
    8b04:	e3401002 	movt	r1, #2
    8b08:	e30a03a8 	movw	r0, #41896	; 0xa3a8
    8b0c:	e3400002 	movt	r0, #2
    8b10:	e300214d 	movw	r2, #333	; 0x14d
    8b14:	eb007021 	bl	24ba0 <assertion_failed>
    8b18:	eaffffd3 	b	8a6c <CKernel::KeyPressedHandler(char const*)+0x1c>

00008b1c <Thread::Run()>:
    8b1c:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    8b20:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    8b24:	e5900054 	ldr	r0, [r0, #84]	; 0x54
    8b28:	e12fff13 	bx	r3

00008b2c <Thread::~Thread()>:
    8b2c:	e59f2020 	ldr	r2, [pc, #32]	; 8b54 <Thread::~Thread()+0x28>
    8b30:	e3a03000 	mov	r3, #0
    8b34:	e92d4010 	push	{r4, lr}
    8b38:	e1a04000 	mov	r4, r0
    8b3c:	e5802000 	str	r2, [r0]
    8b40:	e5803050 	str	r3, [r0, #80]	; 0x50
    8b44:	e5803058 	str	r3, [r0, #88]	; 0x58
    8b48:	eb005de9 	bl	202f4 <CTask::~CTask()>
    8b4c:	e1a00004 	mov	r0, r4
    8b50:	e8bd8010 	pop	{r4, pc}
    8b54:	0002a3d0 	.word	0x0002a3d0

00008b58 <Thread::~Thread()>:
    8b58:	e59f202c 	ldr	r2, [pc, #44]	; 8b8c <Thread::~Thread()+0x34>
    8b5c:	e3a03000 	mov	r3, #0
    8b60:	e92d4010 	push	{r4, lr}
    8b64:	e1a04000 	mov	r4, r0
    8b68:	e5802000 	str	r2, [r0]
    8b6c:	e5803050 	str	r3, [r0, #80]	; 0x50
    8b70:	e5803058 	str	r3, [r0, #88]	; 0x58
    8b74:	eb005dde 	bl	202f4 <CTask::~CTask()>
    8b78:	e1a00004 	mov	r0, r4
    8b7c:	e3a0105c 	mov	r1, #92	; 0x5c
    8b80:	eb006508 	bl	21fa8 <operator delete(void*, unsigned int)>
    8b84:	e1a00004 	mov	r0, r4
    8b88:	e8bd8010 	pop	{r4, pc}
    8b8c:	0002a3d0 	.word	0x0002a3d0

00008b90 <Thread::Thread(void (*)(unsigned int, void const*), unsigned int, void const*)>:
    8b90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8b94:	e1a04000 	mov	r4, r0
    8b98:	e1a07001 	mov	r7, r1
    8b9c:	e3a01901 	mov	r1, #16384	; 0x4000
    8ba0:	e1a06002 	mov	r6, r2
    8ba4:	e1a05003 	mov	r5, r3
    8ba8:	eb005e21 	bl	20434 <CTask::CTask(unsigned int)>
    8bac:	e59f1014 	ldr	r1, [pc, #20]	; 8bc8 <Thread::Thread(void (*)(unsigned int, void const*), unsigned int, void const*)+0x38>
    8bb0:	e1a00004 	mov	r0, r4
    8bb4:	e5847050 	str	r7, [r4, #80]	; 0x50
    8bb8:	e5846054 	str	r6, [r4, #84]	; 0x54
    8bbc:	e5845058 	str	r5, [r4, #88]	; 0x58
    8bc0:	e5841000 	str	r1, [r4]
    8bc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8bc8:	0002a3d0 	.word	0x0002a3d0

00008bcc <HTTPClient::~HTTPClient()>:
    8bcc:	e59f2038 	ldr	r2, [pc, #56]	; 8c0c <HTTPClient::~HTTPClient()+0x40>
    8bd0:	e3a03001 	mov	r3, #1
    8bd4:	e92d4010 	push	{r4, lr}
    8bd8:	e1a04000 	mov	r4, r0
    8bdc:	e1a01003 	mov	r1, r3
    8be0:	e5802000 	str	r2, [r0]
    8be4:	e5803050 	str	r3, [r0, #80]	; 0x50
    8be8:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    8bec:	eb0064ed 	bl	21fa8 <operator delete(void*, unsigned int)>
    8bf0:	e3a03000 	mov	r3, #0
    8bf4:	e5843070 	str	r3, [r4, #112]	; 0x70
    8bf8:	e1a00004 	mov	r0, r4
    8bfc:	e5843058 	str	r3, [r4, #88]	; 0x58
    8c00:	eb005dbb 	bl	202f4 <CTask::~CTask()>
    8c04:	e1a00004 	mov	r0, r4
    8c08:	e8bd8010 	pop	{r4, pc}
    8c0c:	0002a3e4 	.word	0x0002a3e4

00008c10 <HTTPClient::~HTTPClient()>:
    8c10:	e92d4010 	push	{r4, lr}
    8c14:	e1a04000 	mov	r4, r0
    8c18:	ebffffeb 	bl	8bcc <HTTPClient::~HTTPClient()>
    8c1c:	e1a00004 	mov	r0, r4
    8c20:	e3011890 	movw	r1, #6288	; 0x1890
    8c24:	eb0064df 	bl	21fa8 <operator delete(void*, unsigned int)>
    8c28:	e1a00004 	mov	r0, r4
    8c2c:	e8bd8010 	pop	{r4, pc}

00008c30 <HTTPClient::HTTPClient(CNetSubSystem*, CPWMSoundDevice*, CScreenDevice*, char*, int, int, CSocket*, unsigned int, int)>:
    8c30:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c34:	e1a0a001 	mov	sl, r1
    8c38:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
    8c3c:	e3a01901 	mov	r1, #16384	; 0x4000
    8c40:	e1a04000 	mov	r4, r0
    8c44:	e1a0b002 	mov	fp, r2
    8c48:	e1a06003 	mov	r6, r3
    8c4c:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
    8c50:	e59d8030 	ldr	r8, [sp, #48]	; 0x30
    8c54:	e59d9034 	ldr	r9, [sp, #52]	; 0x34
    8c58:	eb005df5 	bl	20434 <CTask::CTask(unsigned int)>
    8c5c:	e3550000 	cmp	r5, #0
    8c60:	e59f2048 	ldr	r2, [pc, #72]	; 8cb0 <HTTPClient::HTTPClient(CNetSubSystem*, CPWMSoundDevice*, CScreenDevice*, char*, int, int, CSocket*, unsigned int, int)+0x80>
    8c64:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
    8c68:	e3a01000 	mov	r1, #0
    8c6c:	e584a058 	str	sl, [r4, #88]	; 0x58
    8c70:	e584905c 	str	r9, [r4, #92]	; 0x5c
    8c74:	e5846060 	str	r6, [r4, #96]	; 0x60
    8c78:	e5845064 	str	r5, [r4, #100]	; 0x64
    8c7c:	e1c486b8 	strh	r8, [r4, #104]	; 0x68
    8c80:	e584b06c 	str	fp, [r4, #108]	; 0x6c
    8c84:	e5847078 	str	r7, [r4, #120]	; 0x78
    8c88:	e584307c 	str	r3, [r4, #124]	; 0x7c
    8c8c:	e5842000 	str	r2, [r4]
    8c90:	e5841070 	str	r1, [r4, #112]	; 0x70
    8c94:	e5841050 	str	r1, [r4, #80]	; 0x50
    8c98:	0a000002 	beq	8ca8 <HTTPClient::HTTPClient(CNetSubSystem*, CPWMSoundDevice*, CScreenDevice*, char*, int, int, CSocket*, unsigned int, int)+0x78>
    8c9c:	e1a00005 	mov	r0, r5
    8ca0:	eb0064bd 	bl	21f9c <operator new[](unsigned int)>
    8ca4:	e5840070 	str	r0, [r4, #112]	; 0x70
    8ca8:	e1a00004 	mov	r0, r4
    8cac:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cb0:	0002a3e4 	.word	0x0002a3e4

00008cb4 <HTTPClient::GetLinkForPhase2()>:
    8cb4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8cb8:	e3a0a000 	mov	sl, #0
    8cbc:	e30a8428 	movw	r8, #42024	; 0xa428
    8cc0:	e3408002 	movt	r8, #2
    8cc4:	e24ddffe 	sub	sp, sp, #1016	; 0x3f8
    8cc8:	e30a5444 	movw	r5, #42052	; 0xa444
    8ccc:	e3405002 	movt	r5, #2
    8cd0:	e28d4ffe 	add	r4, sp, #1016	; 0x3f8
    8cd4:	eb007133 	bl	251a8 <CLogger::Get()>
    8cd8:	e3a02004 	mov	r2, #4
    8cdc:	e30a33fc 	movw	r3, #41980	; 0xa3fc
    8ce0:	e3403002 	movt	r3, #2
    8ce4:	e30a1414 	movw	r1, #42004	; 0xa414
    8ce8:	e3401002 	movt	r1, #2
    8cec:	eb00720a 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8cf0:	e524a3ec 	str	sl, [r4, #-1004]!	; 0xfffffc14
    8cf4:	e30a1420 	movw	r1, #42016	; 0xa420
    8cf8:	e3401002 	movt	r1, #2
    8cfc:	e1a02004 	mov	r2, r4
    8d00:	e3010c64 	movw	r0, #7268	; 0x1c64
    8d04:	e3400003 	movt	r0, #3
    8d08:	ebfffd92 	bl	8358 <my_strstr(char*, char const*, int&)>
    8d0c:	e1a0100a 	mov	r1, sl
    8d10:	e1a06000 	mov	r6, r0
    8d14:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8d18:	e28d0010 	add	r0, sp, #16
    8d1c:	e30a7414 	movw	r7, #42004	; 0xa414
    8d20:	e3407002 	movt	r7, #2
    8d24:	e59f90fc 	ldr	r9, [pc, #252]	; 8e28 <HTTPClient::GetLinkForPhase2()+0x174>
    8d28:	eb00680e 	bl	22d68 <memset>
    8d2c:	e1a00006 	mov	r0, r6
    8d30:	e1a02004 	mov	r2, r4
    8d34:	e1a01008 	mov	r1, r8
    8d38:	ebfffd86 	bl	8358 <my_strstr(char*, char const*, int&)>
    8d3c:	e1a02004 	mov	r2, r4
    8d40:	e1a01008 	mov	r1, r8
    8d44:	ebfffd83 	bl	8358 <my_strstr(char*, char const*, int&)>
    8d48:	e1a02004 	mov	r2, r4
    8d4c:	e30a143c 	movw	r1, #42044	; 0xa43c
    8d50:	e3401002 	movt	r1, #2
    8d54:	ebfffd7f 	bl	8358 <my_strstr(char*, char const*, int&)>
    8d58:	e28d2008 	add	r2, sp, #8
    8d5c:	e1a01005 	mov	r1, r5
    8d60:	eb006884 	bl	22f78 <strtok_r>
    8d64:	e28d2008 	add	r2, sp, #8
    8d68:	e1a01005 	mov	r1, r5
    8d6c:	e3a00000 	mov	r0, #0
    8d70:	eb006880 	bl	22f78 <strtok_r>
    8d74:	e1a06000 	mov	r6, r0
    8d78:	eb00710a 	bl	251a8 <CLogger::Get()>
    8d7c:	e3a02004 	mov	r2, #4
    8d80:	e58d6000 	str	r6, [sp]
    8d84:	e1a01007 	mov	r1, r7
    8d88:	e30a3448 	movw	r3, #42056	; 0xa448
    8d8c:	e3403002 	movt	r3, #2
    8d90:	eb0071e1 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8d94:	e1a01006 	mov	r1, r6
    8d98:	e2490008 	sub	r0, r9, #8
    8d9c:	eb006836 	bl	22e7c <strcpy>
    8da0:	e1a02004 	mov	r2, r4
    8da4:	e30a1458 	movw	r1, #42072	; 0xa458
    8da8:	e3401002 	movt	r1, #2
    8dac:	e59d0008 	ldr	r0, [sp, #8]
    8db0:	ebfffd68 	bl	8358 <my_strstr(char*, char const*, int&)>
    8db4:	e1a02004 	mov	r2, r4
    8db8:	e30a1474 	movw	r1, #42100	; 0xa474
    8dbc:	e3401002 	movt	r1, #2
    8dc0:	ebfffd64 	bl	8358 <my_strstr(char*, char const*, int&)>
    8dc4:	e28d2008 	add	r2, sp, #8
    8dc8:	e30a1490 	movw	r1, #42128	; 0xa490
    8dcc:	e3401002 	movt	r1, #2
    8dd0:	eb006868 	bl	22f78 <strtok_r>
    8dd4:	e28d2008 	add	r2, sp, #8
    8dd8:	e1a01005 	mov	r1, r5
    8ddc:	e3a00000 	mov	r0, #0
    8de0:	eb006864 	bl	22f78 <strtok_r>
    8de4:	e1a06000 	mov	r6, r0
    8de8:	eb0070ee 	bl	251a8 <CLogger::Get()>
    8dec:	e58d6000 	str	r6, [sp]
    8df0:	e3a02004 	mov	r2, #4
    8df4:	e1a01007 	mov	r1, r7
    8df8:	e30a3494 	movw	r3, #42132	; 0xa494
    8dfc:	e3403002 	movt	r3, #2
    8e00:	eb0071c5 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8e04:	e1a00006 	mov	r0, r6
    8e08:	e30a14b8 	movw	r1, #42168	; 0xa4b8
    8e0c:	e3401002 	movt	r1, #2
    8e10:	e59d6008 	ldr	r6, [sp, #8]
    8e14:	eb0067fd 	bl	22e10 <strcmp>
    8e18:	e3500000 	cmp	r0, #0
    8e1c:	1affffc2 	bne	8d2c <HTTPClient::GetLinkForPhase2()+0x78>
    8e20:	e28ddffe 	add	sp, sp, #1016	; 0x3f8
    8e24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8e28:	01431c6c 	.word	0x01431c6c

00008e2c <HTTPClient::GetDownloadLink()>:
    8e2c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8e30:	e24ddffe 	sub	sp, sp, #1016	; 0x3f8
    8e34:	e28d5ffe 	add	r5, sp, #1016	; 0x3f8
    8e38:	eb0070da 	bl	251a8 <CLogger::Get()>
    8e3c:	e3a02004 	mov	r2, #4
    8e40:	e30a34c0 	movw	r3, #42176	; 0xa4c0
    8e44:	e3403002 	movt	r3, #2
    8e48:	e30a1414 	movw	r1, #42004	; 0xa414
    8e4c:	e3401002 	movt	r1, #2
    8e50:	eb0071b1 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8e54:	e3a03000 	mov	r3, #0
    8e58:	e52533ec 	str	r3, [r5, #-1004]!	; 0xfffffc14
    8e5c:	e30a14d8 	movw	r1, #42200	; 0xa4d8
    8e60:	e3401002 	movt	r1, #2
    8e64:	e1a02005 	mov	r2, r5
    8e68:	e3010c64 	movw	r0, #7268	; 0x1c64
    8e6c:	e3400003 	movt	r0, #3
    8e70:	ebfffd38 	bl	8358 <my_strstr(char*, char const*, int&)>
    8e74:	e59d300c 	ldr	r3, [sp, #12]
    8e78:	e3530001 	cmp	r3, #1
    8e7c:	0a000047 	beq	8fa0 <HTTPClient::GetDownloadLink()+0x174>
    8e80:	eb0070c8 	bl	251a8 <CLogger::Get()>
    8e84:	e3a02004 	mov	r2, #4
    8e88:	e30a3544 	movw	r3, #42308	; 0xa544
    8e8c:	e3403002 	movt	r3, #2
    8e90:	e30a1414 	movw	r1, #42004	; 0xa414
    8e94:	e3401002 	movt	r1, #2
    8e98:	eb00719f 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8e9c:	e1a02005 	mov	r2, r5
    8ea0:	e30a1420 	movw	r1, #42016	; 0xa420
    8ea4:	e3401002 	movt	r1, #2
    8ea8:	e3010c64 	movw	r0, #7268	; 0x1c64
    8eac:	e3400003 	movt	r0, #3
    8eb0:	e30aa4d8 	movw	sl, #42200	; 0xa4d8
    8eb4:	e340a002 	movt	sl, #2
    8eb8:	ebfffd26 	bl	8358 <my_strstr(char*, char const*, int&)>
    8ebc:	e30a952c 	movw	r9, #42284	; 0xa52c
    8ec0:	e3409002 	movt	r9, #2
    8ec4:	e30a7444 	movw	r7, #42052	; 0xa444
    8ec8:	e3407002 	movt	r7, #2
    8ecc:	e1a04000 	mov	r4, r0
    8ed0:	e28d6008 	add	r6, sp, #8
    8ed4:	e28d8010 	add	r8, sp, #16
    8ed8:	e1a00004 	mov	r0, r4
    8edc:	e1a02005 	mov	r2, r5
    8ee0:	e1a0100a 	mov	r1, sl
    8ee4:	ebfffd1b 	bl	8358 <my_strstr(char*, char const*, int&)>
    8ee8:	e1a02005 	mov	r2, r5
    8eec:	e1a01009 	mov	r1, r9
    8ef0:	ebfffd18 	bl	8358 <my_strstr(char*, char const*, int&)>
    8ef4:	e1a02006 	mov	r2, r6
    8ef8:	e1a01007 	mov	r1, r7
    8efc:	eb00681d 	bl	22f78 <strtok_r>
    8f00:	e1a02006 	mov	r2, r6
    8f04:	e1a01007 	mov	r1, r7
    8f08:	e3a00000 	mov	r0, #0
    8f0c:	eb006819 	bl	22f78 <strtok_r>
    8f10:	e1a04000 	mov	r4, r0
    8f14:	eb0070a3 	bl	251a8 <CLogger::Get()>
    8f18:	e3a02004 	mov	r2, #4
    8f1c:	e58d4000 	str	r4, [sp]
    8f20:	e30a3534 	movw	r3, #42292	; 0xa534
    8f24:	e3403002 	movt	r3, #2
    8f28:	e30a1414 	movw	r1, #42004	; 0xa414
    8f2c:	e3401002 	movt	r1, #2
    8f30:	eb007179 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8f34:	e1a01004 	mov	r1, r4
    8f38:	e1a00008 	mov	r0, r8
    8f3c:	eb0067ce 	bl	22e7c <strcpy>
    8f40:	e1a00004 	mov	r0, r4
    8f44:	eb0067a7 	bl	22de8 <strlen>
    8f48:	e2400003 	sub	r0, r0, #3
    8f4c:	e0840000 	add	r0, r4, r0
    8f50:	e30a1540 	movw	r1, #42304	; 0xa540
    8f54:	e3401002 	movt	r1, #2
    8f58:	e59d4008 	ldr	r4, [sp, #8]
    8f5c:	eb0067ab 	bl	22e10 <strcmp>
    8f60:	e3500000 	cmp	r0, #0
    8f64:	1affffdb 	bne	8ed8 <HTTPClient::GetDownloadLink()+0xac>
    8f68:	eb00708e 	bl	251a8 <CLogger::Get()>
    8f6c:	e3a02004 	mov	r2, #4
    8f70:	e58d8000 	str	r8, [sp]
    8f74:	e30a3534 	movw	r3, #42292	; 0xa534
    8f78:	e3403002 	movt	r3, #2
    8f7c:	e30a1414 	movw	r1, #42004	; 0xa414
    8f80:	e3401002 	movt	r1, #2
    8f84:	eb007164 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8f88:	e1a01008 	mov	r1, r8
    8f8c:	e59f00f8 	ldr	r0, [pc, #248]	; 908c <HTTPClient::GetDownloadLink()+0x260>
    8f90:	eb0067b9 	bl	22e7c <strcpy>
    8f94:	e3a00000 	mov	r0, #0
    8f98:	e28ddffe 	add	sp, sp, #1016	; 0x3f8
    8f9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8fa0:	eb007080 	bl	251a8 <CLogger::Get()>
    8fa4:	e3a02004 	mov	r2, #4
    8fa8:	e30a34fc 	movw	r3, #42236	; 0xa4fc
    8fac:	e3403002 	movt	r3, #2
    8fb0:	e30a1414 	movw	r1, #42004	; 0xa414
    8fb4:	e3401002 	movt	r1, #2
    8fb8:	eb007157 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8fbc:	e1a02005 	mov	r2, r5
    8fc0:	e30a1420 	movw	r1, #42016	; 0xa420
    8fc4:	e3401002 	movt	r1, #2
    8fc8:	e3010c64 	movw	r0, #7268	; 0x1c64
    8fcc:	e3400003 	movt	r0, #3
    8fd0:	e30aa504 	movw	sl, #42244	; 0xa504
    8fd4:	e340a002 	movt	sl, #2
    8fd8:	ebfffcde 	bl	8358 <my_strstr(char*, char const*, int&)>
    8fdc:	e30a952c 	movw	r9, #42284	; 0xa52c
    8fe0:	e3409002 	movt	r9, #2
    8fe4:	e30a7444 	movw	r7, #42052	; 0xa444
    8fe8:	e3407002 	movt	r7, #2
    8fec:	e1a04000 	mov	r4, r0
    8ff0:	e28d6008 	add	r6, sp, #8
    8ff4:	e28d8010 	add	r8, sp, #16
    8ff8:	e1a00004 	mov	r0, r4
    8ffc:	e1a02005 	mov	r2, r5
    9000:	e1a0100a 	mov	r1, sl
    9004:	ebfffcd3 	bl	8358 <my_strstr(char*, char const*, int&)>
    9008:	e1a02005 	mov	r2, r5
    900c:	e1a01009 	mov	r1, r9
    9010:	ebfffcd0 	bl	8358 <my_strstr(char*, char const*, int&)>
    9014:	e1a02006 	mov	r2, r6
    9018:	e1a01007 	mov	r1, r7
    901c:	eb0067d5 	bl	22f78 <strtok_r>
    9020:	e1a02006 	mov	r2, r6
    9024:	e1a01007 	mov	r1, r7
    9028:	e3a00000 	mov	r0, #0
    902c:	eb0067d1 	bl	22f78 <strtok_r>
    9030:	e1a04000 	mov	r4, r0
    9034:	eb00705b 	bl	251a8 <CLogger::Get()>
    9038:	e3a02004 	mov	r2, #4
    903c:	e58d4000 	str	r4, [sp]
    9040:	e30a3534 	movw	r3, #42292	; 0xa534
    9044:	e3403002 	movt	r3, #2
    9048:	e30a1414 	movw	r1, #42004	; 0xa414
    904c:	e3401002 	movt	r1, #2
    9050:	eb007131 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9054:	e1a01004 	mov	r1, r4
    9058:	e1a00008 	mov	r0, r8
    905c:	eb006786 	bl	22e7c <strcpy>
    9060:	e1a00004 	mov	r0, r4
    9064:	eb00675f 	bl	22de8 <strlen>
    9068:	e2400003 	sub	r0, r0, #3
    906c:	e0840000 	add	r0, r4, r0
    9070:	e30a1540 	movw	r1, #42304	; 0xa540
    9074:	e3401002 	movt	r1, #2
    9078:	e59d4008 	ldr	r4, [sp, #8]
    907c:	eb006763 	bl	22e10 <strcmp>
    9080:	e3500000 	cmp	r0, #0
    9084:	1affffdb 	bne	8ff8 <HTTPClient::GetDownloadLink()+0x1cc>
    9088:	eaffffb6 	b	8f68 <HTTPClient::GetDownloadLink()+0x13c>
    908c:	0143204c 	.word	0x0143204c

00009090 <HTTPClient::getnewlocation()>:
    9090:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9094:	e30a154c 	movw	r1, #42316	; 0xa54c
    9098:	e3401002 	movt	r1, #2
    909c:	e24dd014 	sub	sp, sp, #20
    90a0:	e3010c64 	movw	r0, #7268	; 0x1c64
    90a4:	e3400003 	movt	r0, #3
    90a8:	e28d200c 	add	r2, sp, #12
    90ac:	ebfffca9 	bl	8358 <my_strstr(char*, char const*, int&)>
    90b0:	e30a1554 	movw	r1, #42324	; 0xa554
    90b4:	e3401002 	movt	r1, #2
    90b8:	e28d2008 	add	r2, sp, #8
    90bc:	eb0067ad 	bl	22f78 <strtok_r>
    90c0:	e59d0008 	ldr	r0, [sp, #8]
    90c4:	e1d030d0 	ldrsb	r3, [r0]
    90c8:	e3530020 	cmp	r3, #32
    90cc:	1a000004 	bne	90e4 <HTTPClient::getnewlocation()+0x54>
    90d0:	e2800001 	add	r0, r0, #1
    90d4:	e58d0008 	str	r0, [sp, #8]
    90d8:	e1d030d0 	ldrsb	r3, [r0]
    90dc:	e3530020 	cmp	r3, #32
    90e0:	0afffffa 	beq	90d0 <HTTPClient::getnewlocation()+0x40>
    90e4:	e28d200c 	add	r2, sp, #12
    90e8:	e30a1558 	movw	r1, #42328	; 0xa558
    90ec:	e3401002 	movt	r1, #2
    90f0:	ebfffc98 	bl	8358 <my_strstr(char*, char const*, int&)>
    90f4:	e3a03000 	mov	r3, #0
    90f8:	e5c03004 	strb	r3, [r0, #4]
    90fc:	eb007029 	bl	251a8 <CLogger::Get()>
    9100:	e59d2008 	ldr	r2, [sp, #8]
    9104:	e30a3560 	movw	r3, #42336	; 0xa560
    9108:	e3403002 	movt	r3, #2
    910c:	e58d2000 	str	r2, [sp]
    9110:	e30a1414 	movw	r1, #42004	; 0xa414
    9114:	e3401002 	movt	r1, #2
    9118:	e3a02004 	mov	r2, #4
    911c:	eb0070fe 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9120:	e59d1008 	ldr	r1, [sp, #8]
    9124:	e59f0008 	ldr	r0, [pc, #8]	; 9134 <HTTPClient::getnewlocation()+0xa4>
    9128:	eb006753 	bl	22e7c <strcpy>
    912c:	e28dd014 	add	sp, sp, #20
    9130:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9134:	01432434 	.word	0x01432434

00009138 <HTTPClient::ParseMethod(char*)>:
    9138:	e92d4030 	push	{r4, r5, lr}
    913c:	e2514000 	subs	r4, r1, #0
    9140:	e1a05000 	mov	r5, r0
    9144:	e24dd00c 	sub	sp, sp, #12
    9148:	0a00004b 	beq	927c <HTTPClient::ParseMethod(char*)+0x144>
    914c:	e1a00004 	mov	r0, r4
    9150:	e28d2004 	add	r2, sp, #4
    9154:	e30a1294 	movw	r1, #41620	; 0xa294
    9158:	e3401002 	movt	r1, #2
    915c:	eb006785 	bl	22f78 <strtok_r>
    9160:	e2504000 	subs	r4, r0, #0
    9164:	0a00003e 	beq	9264 <HTTPClient::ParseMethod(char*)+0x12c>
    9168:	e30a1590 	movw	r1, #42384	; 0xa590
    916c:	e3401002 	movt	r1, #2
    9170:	eb006726 	bl	22e10 <strcmp>
    9174:	e3500000 	cmp	r0, #0
    9178:	05c50074 	strbeq	r0, [r5, #116]	; 0x74
    917c:	1a00002c 	bne	9234 <HTTPClient::ParseMethod(char*)+0xfc>
    9180:	e30a1294 	movw	r1, #41620	; 0xa294
    9184:	e3401002 	movt	r1, #2
    9188:	e28d2004 	add	r2, sp, #4
    918c:	e3a00000 	mov	r0, #0
    9190:	eb006778 	bl	22f78 <strtok_r>
    9194:	e2504000 	subs	r4, r0, #0
    9198:	0a000022 	beq	9228 <HTTPClient::ParseMethod(char*)+0xf0>
    919c:	eb006711 	bl	22de8 <strlen>
    91a0:	e3500b02 	cmp	r0, #2048	; 0x800
    91a4:	8300019e 	movwhi	r0, #414	; 0x19e
    91a8:	9a000001 	bls	91b4 <HTTPClient::ParseMethod(char*)+0x7c>
    91ac:	e28dd00c 	add	sp, sp, #12
    91b0:	e8bd8030 	pop	{r4, r5, pc}
    91b4:	e1a01004 	mov	r1, r4
    91b8:	e2850080 	add	r0, r5, #128	; 0x80
    91bc:	eb00672e 	bl	22e7c <strcpy>
    91c0:	e28d2004 	add	r2, sp, #4
    91c4:	e30a1210 	movw	r1, #41488	; 0xa210
    91c8:	e3401002 	movt	r1, #2
    91cc:	e3a00000 	mov	r0, #0
    91d0:	eb006768 	bl	22f78 <strtok_r>
    91d4:	e3500000 	cmp	r0, #0
    91d8:	0a000012 	beq	9228 <HTTPClient::ParseMethod(char*)+0xf0>
    91dc:	e30a15a4 	movw	r1, #42404	; 0xa5a4
    91e0:	e3401002 	movt	r1, #2
    91e4:	eb006709 	bl	22e10 <strcmp>
    91e8:	e3500000 	cmp	r0, #0
    91ec:	1a00000d 	bne	9228 <HTTPClient::ParseMethod(char*)+0xf0>
    91f0:	e28d2004 	add	r2, sp, #4
    91f4:	e30a15b0 	movw	r1, #42416	; 0xa5b0
    91f8:	e3401002 	movt	r1, #2
    91fc:	eb00675d 	bl	22f78 <strtok_r>
    9200:	e3500000 	cmp	r0, #0
    9204:	0a000007 	beq	9228 <HTTPClient::ParseMethod(char*)+0xf0>
    9208:	e30a15ac 	movw	r1, #42412	; 0xa5ac
    920c:	e3401002 	movt	r1, #2
    9210:	eb0066fe 	bl	22e10 <strcmp>
    9214:	e30031f9 	movw	r3, #505	; 0x1f9
    9218:	e3500000 	cmp	r0, #0
    921c:	11a00003 	movne	r0, r3
    9220:	03a000c8 	moveq	r0, #200	; 0xc8
    9224:	eaffffe0 	b	91ac <HTTPClient::ParseMethod(char*)+0x74>
    9228:	e3a00e19 	mov	r0, #400	; 0x190
    922c:	e28dd00c 	add	sp, sp, #12
    9230:	e8bd8030 	pop	{r4, r5, pc}
    9234:	e30a1594 	movw	r1, #42388	; 0xa594
    9238:	e3401002 	movt	r1, #2
    923c:	e1a00004 	mov	r0, r4
    9240:	eb0066f2 	bl	22e10 <strcmp>
    9244:	e3500000 	cmp	r0, #0
    9248:	0a000008 	beq	9270 <HTTPClient::ParseMethod(char*)+0x138>
    924c:	e1a00004 	mov	r0, r4
    9250:	e30a159c 	movw	r1, #42396	; 0xa59c
    9254:	e3401002 	movt	r1, #2
    9258:	eb0066ec 	bl	22e10 <strcmp>
    925c:	e3500000 	cmp	r0, #0
    9260:	0a00000c 	beq	9298 <HTTPClient::ParseMethod(char*)+0x160>
    9264:	e30001f5 	movw	r0, #501	; 0x1f5
    9268:	e28dd00c 	add	sp, sp, #12
    926c:	e8bd8030 	pop	{r4, r5, pc}
    9270:	e3a03001 	mov	r3, #1
    9274:	e5c53074 	strb	r3, [r5, #116]	; 0x74
    9278:	eaffffc0 	b	9180 <HTTPClient::ParseMethod(char*)+0x48>
    927c:	e30a1574 	movw	r1, #42356	; 0xa574
    9280:	e3401002 	movt	r1, #2
    9284:	e30a0584 	movw	r0, #42372	; 0xa584
    9288:	e3400002 	movt	r0, #2
    928c:	e3002401 	movw	r2, #1025	; 0x401
    9290:	eb006e42 	bl	24ba0 <assertion_failed>
    9294:	eaffffac 	b	914c <HTTPClient::ParseMethod(char*)+0x14>
    9298:	e3a03002 	mov	r3, #2
    929c:	e5c53074 	strb	r3, [r5, #116]	; 0x74
    92a0:	eaffffb6 	b	9180 <HTTPClient::ParseMethod(char*)+0x48>

000092a4 <HTTPClient::ParseHeaderField(char*)>:
    92a4:	e92d4030 	push	{r4, r5, lr}
    92a8:	e2514000 	subs	r4, r1, #0
    92ac:	e1a05000 	mov	r5, r0
    92b0:	e24dd00c 	sub	sp, sp, #12
    92b4:	0a00003f 	beq	93b8 <HTTPClient::ParseHeaderField(char*)+0x114>
    92b8:	e1a00004 	mov	r0, r4
    92bc:	e28d2004 	add	r2, sp, #4
    92c0:	e30a1554 	movw	r1, #42324	; 0xa554
    92c4:	e3401002 	movt	r1, #2
    92c8:	eb00672a 	bl	22f78 <strtok_r>
    92cc:	e2504000 	subs	r4, r0, #0
    92d0:	0a00001e 	beq	9350 <HTTPClient::ParseHeaderField(char*)+0xac>
    92d4:	e30a15b4 	movw	r1, #42420	; 0xa5b4
    92d8:	e3401002 	movt	r1, #2
    92dc:	eb0066cb 	bl	22e10 <strcmp>
    92e0:	e3500000 	cmp	r0, #0
    92e4:	0a000008 	beq	930c <HTTPClient::ParseHeaderField(char*)+0x68>
    92e8:	e1a00004 	mov	r0, r4
    92ec:	e30a15e8 	movw	r1, #42472	; 0xa5e8
    92f0:	e3401002 	movt	r1, #2
    92f4:	eb0066c5 	bl	22e10 <strcmp>
    92f8:	e2504000 	subs	r4, r0, #0
    92fc:	0a000016 	beq	935c <HTTPClient::ParseHeaderField(char*)+0xb8>
    9300:	e3a000c8 	mov	r0, #200	; 0xc8
    9304:	e28dd00c 	add	sp, sp, #12
    9308:	e8bd8030 	pop	{r4, r5, pc}
    930c:	e28d2004 	add	r2, sp, #4
    9310:	e30a1294 	movw	r1, #41620	; 0xa294
    9314:	e3401002 	movt	r1, #2
    9318:	eb006716 	bl	22f78 <strtok_r>
    931c:	e3500000 	cmp	r0, #0
    9320:	0a00000a 	beq	9350 <HTTPClient::ParseHeaderField(char*)+0xac>
    9324:	e30a15c4 	movw	r1, #42436	; 0xa5c4
    9328:	e3401002 	movt	r1, #2
    932c:	eb0066b7 	bl	22e10 <strcmp>
    9330:	e3500000 	cmp	r0, #0
    9334:	1afffff1 	bne	9300 <HTTPClient::ParseHeaderField(char*)+0x5c>
    9338:	e2855a01 	add	r5, r5, #4096	; 0x1000
    933c:	e3a03001 	mov	r3, #1
    9340:	e3a000c8 	mov	r0, #200	; 0xc8
    9344:	e5853084 	str	r3, [r5, #132]	; 0x84
    9348:	e28dd00c 	add	sp, sp, #12
    934c:	e8bd8030 	pop	{r4, r5, pc}
    9350:	e3a00e19 	mov	r0, #400	; 0x190
    9354:	e28dd00c 	add	sp, sp, #12
    9358:	e8bd8030 	pop	{r4, r5, pc}
    935c:	e28d2004 	add	r2, sp, #4
    9360:	e30a1294 	movw	r1, #41620	; 0xa294
    9364:	e3401002 	movt	r1, #2
    9368:	eb006702 	bl	22f78 <strtok_r>
    936c:	e3500000 	cmp	r0, #0
    9370:	0afffff6 	beq	9350 <HTTPClient::ParseHeaderField(char*)+0xac>
    9374:	e2400001 	sub	r0, r0, #1
    9378:	e1a03004 	mov	r3, r4
    937c:	e3a0c00a 	mov	ip, #10
    9380:	ea000004 	b	9398 <HTTPClient::ParseHeaderField(char*)+0xf4>
    9384:	e3510009 	cmp	r1, #9
    9388:	e023139c 	mla	r3, ip, r3, r1
    938c:	8affffef 	bhi	9350 <HTTPClient::ParseHeaderField(char*)+0xac>
    9390:	e3530b02 	cmp	r3, #2048	; 0x800
    9394:	8a00000e 	bhi	93d4 <HTTPClient::ParseHeaderField(char*)+0x130>
    9398:	e1f020d1 	ldrsb	r2, [r0, #1]!
    939c:	e3520000 	cmp	r2, #0
    93a0:	e2421030 	sub	r1, r2, #48	; 0x30
    93a4:	1afffff6 	bne	9384 <HTTPClient::ParseHeaderField(char*)+0xe0>
    93a8:	e2855a01 	add	r5, r5, #4096	; 0x1000
    93ac:	e3a000c8 	mov	r0, #200	; 0xc8
    93b0:	e5853088 	str	r3, [r5, #136]	; 0x88
    93b4:	eaffffd2 	b	9304 <HTTPClient::ParseHeaderField(char*)+0x60>
    93b8:	e30a1574 	movw	r1, #42356	; 0xa574
    93bc:	e3401002 	movt	r1, #2
    93c0:	e30a0584 	movw	r0, #42372	; 0xa584
    93c4:	e3400002 	movt	r0, #2
    93c8:	e300243c 	movw	r2, #1084	; 0x43c
    93cc:	eb006df3 	bl	24ba0 <assertion_failed>
    93d0:	eaffffb8 	b	92b8 <HTTPClient::ParseHeaderField(char*)+0x14>
    93d4:	e300019d 	movw	r0, #413	; 0x19d
    93d8:	eaffffc9 	b	9304 <HTTPClient::ParseHeaderField(char*)+0x60>

000093dc <HTTPClient::ParseRequest()>:
    93dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    93e0:	e2808a01 	add	r8, r0, #4096	; 0x1000
    93e4:	e3a03000 	mov	r3, #0
    93e8:	e3a02003 	mov	r2, #3
    93ec:	e5c03080 	strb	r3, [r0, #128]	; 0x80
    93f0:	e5c02074 	strb	r2, [r0, #116]	; 0x74
    93f4:	e1a07000 	mov	r7, r0
    93f8:	e5c03881 	strb	r3, [r0, #2177]	; 0x881
    93fc:	e24ddd39 	sub	sp, sp, #3648	; 0xe40
    9400:	e5c03982 	strb	r3, [r0, #2434]	; 0x982
    9404:	e24dd00c 	sub	sp, sp, #12
    9408:	e5c8308c 	strb	r3, [r8, #140]	; 0x8c
    940c:	e5883084 	str	r3, [r8, #132]	; 0x84
    9410:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    9414:	e5883088 	str	r3, [r8, #136]	; 0x88
    9418:	e1500003 	cmp	r0, r3
    941c:	0a000087 	beq	9640 <HTTPClient::ParseRequest()+0x264>
    9420:	e3a06000 	mov	r6, #0
    9424:	e3a090c8 	mov	r9, #200	; 0xc8
    9428:	e1a0a006 	mov	sl, r6
    942c:	e1a05006 	mov	r5, r6
    9430:	e3a03000 	mov	r3, #0
    9434:	e3a02d19 	mov	r2, #1600	; 0x640
    9438:	e28d1004 	add	r1, sp, #4
    943c:	eb0034a6 	bl	166dc <CSocket::Receive(void*, unsigned int, int)>
    9440:	e250b000 	subs	fp, r0, #0
    9444:	da000054 	ble	959c <HTTPClient::ParseRequest()+0x1c0>
    9448:	e3a04001 	mov	r4, #1
    944c:	ea000011 	b	9498 <HTTPClient::ParseRequest()+0xbc>
    9450:	e353000d 	cmp	r3, #13
    9454:	0a00000c 	beq	948c <HTTPClient::ParseRequest()+0xb0>
    9458:	e353000a 	cmp	r3, #10
    945c:	0a000027 	beq	9500 <HTTPClient::ParseRequest()+0x124>
    9460:	e3560b02 	cmp	r6, #2048	; 0x800
    9464:	2300919d 	movwcs	r9, #413	; 0x19d
    9468:	2a000007 	bcs	948c <HTTPClient::ParseRequest()+0xb0>
    946c:	e28d1d39 	add	r1, sp, #3648	; 0xe40
    9470:	e2862001 	add	r2, r6, #1
    9474:	e2811008 	add	r1, r1, #8
    9478:	e0810006 	add	r0, r1, r6
    947c:	e0811002 	add	r1, r1, r2
    9480:	e1a06002 	mov	r6, r2
    9484:	e5403804 	strb	r3, [r0, #-2052]	; 0xfffff7fc
    9488:	e5415804 	strb	r5, [r1, #-2052]	; 0xfffff7fc
    948c:	e154000b 	cmp	r4, fp
    9490:	2a000018 	bcs	94f8 <HTTPClient::ParseRequest()+0x11c>
    9494:	e2844001 	add	r4, r4, #1
    9498:	e28d3004 	add	r3, sp, #4
    949c:	e3550000 	cmp	r5, #0
    94a0:	e0833004 	add	r3, r3, r4
    94a4:	e15330d1 	ldrsb	r3, [r3, #-1]
    94a8:	0affffe8 	beq	9450 <HTTPClient::ParseRequest()+0x74>
    94ac:	e3550001 	cmp	r5, #1
    94b0:	0a000003 	beq	94c4 <HTTPClient::ParseRequest()+0xe8>
    94b4:	e154000b 	cmp	r4, fp
    94b8:	2a000038 	bcs	95a0 <HTTPClient::ParseRequest()+0x1c4>
    94bc:	e3a05002 	mov	r5, #2
    94c0:	eafffff3 	b	9494 <HTTPClient::ParseRequest()+0xb8>
    94c4:	e2862001 	add	r2, r6, #1
    94c8:	e301108c 	movw	r1, #4236	; 0x108c
    94cc:	e0876006 	add	r6, r7, r6
    94d0:	e0870002 	add	r0, r7, r2
    94d4:	e3a0c000 	mov	ip, #0
    94d8:	e7c63001 	strb	r3, [r6, r1]
    94dc:	e1a06002 	mov	r6, r2
    94e0:	e7c0c001 	strb	ip, [r0, r1]
    94e4:	e5983088 	ldr	r3, [r8, #136]	; 0x88
    94e8:	e1520003 	cmp	r2, r3
    94ec:	2afffff0 	bcs	94b4 <HTTPClient::ParseRequest()+0xd8>
    94f0:	e154000b 	cmp	r4, fp
    94f4:	3affffe6 	bcc	9494 <HTTPClient::ParseRequest()+0xb8>
    94f8:	e597005c 	ldr	r0, [r7, #92]	; 0x5c
    94fc:	eaffffcb 	b	9430 <HTTPClient::ParseRequest()+0x54>
    9500:	e3560000 	cmp	r6, #0
    9504:	1a000007 	bne	9528 <HTTPClient::ParseRequest()+0x14c>
    9508:	e5983084 	ldr	r3, [r8, #132]	; 0x84
    950c:	e3530000 	cmp	r3, #0
    9510:	0affffe7 	beq	94b4 <HTTPClient::ParseRequest()+0xd8>
    9514:	e5983088 	ldr	r3, [r8, #136]	; 0x88
    9518:	e3530000 	cmp	r3, #0
    951c:	0affffe4 	beq	94b4 <HTTPClient::ParseRequest()+0xd8>
    9520:	e3a05001 	mov	r5, #1
    9524:	eaffffd8 	b	948c <HTTPClient::ParseRequest()+0xb0>
    9528:	e35a0000 	cmp	sl, #0
    952c:	e28a3001 	add	r3, sl, #1
    9530:	1a00000d 	bne	956c <HTTPClient::ParseRequest()+0x190>
    9534:	e35900c8 	cmp	r9, #200	; 0xc8
    9538:	11a0600a 	movne	r6, sl
    953c:	13a0a001 	movne	sl, #1
    9540:	11a05006 	movne	r5, r6
    9544:	1affffd0 	bne	948c <HTTPClient::ParseRequest()+0xb0>
    9548:	e28d1d19 	add	r1, sp, #1600	; 0x640
    954c:	e1a00007 	mov	r0, r7
    9550:	e2811004 	add	r1, r1, #4
    9554:	e1a0600a 	mov	r6, sl
    9558:	ebfffef6 	bl	9138 <HTTPClient::ParseMethod(char*)>
    955c:	e1a0500a 	mov	r5, sl
    9560:	e1a09000 	mov	r9, r0
    9564:	e3a0a001 	mov	sl, #1
    9568:	eaffffc7 	b	948c <HTTPClient::ParseRequest()+0xb0>
    956c:	e35900c8 	cmp	r9, #200	; 0xc8
    9570:	11a0a003 	movne	sl, r3
    9574:	11a06005 	movne	r6, r5
    9578:	1affffc3 	bne	948c <HTTPClient::ParseRequest()+0xb0>
    957c:	e28d1d19 	add	r1, sp, #1600	; 0x640
    9580:	e1a00007 	mov	r0, r7
    9584:	e2811004 	add	r1, r1, #4
    9588:	e1a0a003 	mov	sl, r3
    958c:	e1a06005 	mov	r6, r5
    9590:	ebffff43 	bl	92a4 <HTTPClient::ParseHeaderField(char*)>
    9594:	e1a09000 	mov	r9, r0
    9598:	eaffffbb 	b	948c <HTTPClient::ParseRequest()+0xb0>
    959c:	ba00001c 	blt	9614 <HTTPClient::ParseRequest()+0x238>
    95a0:	e35900c8 	cmp	r9, #200	; 0xc8
    95a4:	0a000003 	beq	95b8 <HTTPClient::ParseRequest()+0x1dc>
    95a8:	e1a00009 	mov	r0, r9
    95ac:	e28ddd39 	add	sp, sp, #3648	; 0xe40
    95b0:	e28dd00c 	add	sp, sp, #12
    95b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95b8:	e35a0000 	cmp	sl, #0
    95bc:	03a09f82 	moveq	r9, #520	; 0x208
    95c0:	0afffff8 	beq	95a8 <HTTPClient::ParseRequest()+0x1cc>
    95c4:	e2874080 	add	r4, r7, #128	; 0x80
    95c8:	e3a0103f 	mov	r1, #63	; 0x3f
    95cc:	e1a00004 	mov	r0, r4
    95d0:	eb006658 	bl	22f38 <strchr>
    95d4:	e2506000 	subs	r6, r0, #0
    95d8:	0a000020 	beq	9660 <HTTPClient::ParseRequest()+0x284>
    95dc:	e0465004 	sub	r5, r6, r4
    95e0:	e2870d22 	add	r0, r7, #2176	; 0x880
    95e4:	e1a02005 	mov	r2, r5
    95e8:	e0875005 	add	r5, r7, r5
    95ec:	e1a01004 	mov	r1, r4
    95f0:	e2800001 	add	r0, r0, #1
    95f4:	eb00662b 	bl	22ea8 <strncpy>
    95f8:	e2870d26 	add	r0, r7, #2432	; 0x980
    95fc:	e3a03000 	mov	r3, #0
    9600:	e2861001 	add	r1, r6, #1
    9604:	e5c53881 	strb	r3, [r5, #2177]	; 0x881
    9608:	e2800002 	add	r0, r0, #2
    960c:	eb00661a 	bl	22e7c <strcpy>
    9610:	eaffffe4 	b	95a8 <HTTPClient::ParseRequest()+0x1cc>
    9614:	eb006ee3 	bl	251a8 <CLogger::Get()>
    9618:	e3a09f82 	mov	r9, #520	; 0x208
    961c:	e3a02001 	mov	r2, #1
    9620:	e59f104c 	ldr	r1, [pc, #76]	; 9674 <HTTPClient::ParseRequest()+0x298>
    9624:	e30a3608 	movw	r3, #42504	; 0xa608
    9628:	e3403002 	movt	r3, #2
    962c:	eb006fba 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9630:	e1a00009 	mov	r0, r9
    9634:	e28ddd39 	add	sp, sp, #3648	; 0xe40
    9638:	e28dd00c 	add	sp, sp, #12
    963c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9640:	e30a1574 	movw	r1, #42356	; 0xa574
    9644:	e3401002 	movt	r1, #2
    9648:	e30a05f8 	movw	r0, #42488	; 0xa5f8
    964c:	e3400002 	movt	r0, #2
    9650:	e300238b 	movw	r2, #907	; 0x38b
    9654:	eb006d51 	bl	24ba0 <assertion_failed>
    9658:	e597005c 	ldr	r0, [r7, #92]	; 0x5c
    965c:	eaffff6f 	b	9420 <HTTPClient::ParseRequest()+0x44>
    9660:	e2870d22 	add	r0, r7, #2176	; 0x880
    9664:	e1a01004 	mov	r1, r4
    9668:	e2800001 	add	r0, r0, #1
    966c:	eb006602 	bl	22e7c <strcpy>
    9670:	eaffffcc 	b	95a8 <HTTPClient::ParseRequest()+0x1cc>
    9674:	0002a3f0 	.word	0x0002a3f0

00009678 <HTTPClient::Request(char*)>:
    9678:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    967c:	e1a04000 	mov	r4, r0
    9680:	e1a05001 	mov	r5, r1
    9684:	e24ddb01 	sub	sp, sp, #1024	; 0x400
    9688:	e24dd00c 	sub	sp, sp, #12
    968c:	eb006ec5 	bl	251a8 <CLogger::Get()>
    9690:	e3a02004 	mov	r2, #4
    9694:	e30a3618 	movw	r3, #42520	; 0xa618
    9698:	e3403002 	movt	r3, #2
    969c:	e58d5000 	str	r5, [sp]
    96a0:	e30a1414 	movw	r1, #42004	; 0xa414
    96a4:	e3401002 	movt	r1, #2
    96a8:	eb006f9b 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    96ac:	eb006ebd 	bl	251a8 <CLogger::Get()>
    96b0:	e1d426b8 	ldrh	r2, [r4, #104]	; 0x68
    96b4:	e30a3628 	movw	r3, #42536	; 0xa628
    96b8:	e3403002 	movt	r3, #2
    96bc:	e58d2000 	str	r2, [sp]
    96c0:	e30a1414 	movw	r1, #42004	; 0xa414
    96c4:	e3401002 	movt	r1, #2
    96c8:	e3a02004 	mov	r2, #4
    96cc:	eb006f92 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    96d0:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    96d4:	e3530000 	cmp	r3, #0
    96d8:	0a0000ec 	beq	9a90 <HTTPClient::Request(char*)+0x418>
    96dc:	e3a00018 	mov	r0, #24
    96e0:	eb00622c 	bl	21f98 <operator new(unsigned int)>
    96e4:	e3a02006 	mov	r2, #6
    96e8:	e5941058 	ldr	r1, [r4, #88]	; 0x58
    96ec:	e1a06000 	mov	r6, r0
    96f0:	eb0032a1 	bl	1617c <CSocket::CSocket(CNetSubSystem*, int)>
    96f4:	e584605c 	str	r6, [r4, #92]	; 0x5c
    96f8:	eb006eaa 	bl	251a8 <CLogger::Get()>
    96fc:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    9700:	e30a3650 	movw	r3, #42576	; 0xa650
    9704:	e3403002 	movt	r3, #2
    9708:	e58d2000 	str	r2, [sp]
    970c:	e30a1414 	movw	r1, #42004	; 0xa414
    9710:	e3401002 	movt	r1, #2
    9714:	e3a02004 	mov	r2, #4
    9718:	eb006f7f 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    971c:	e1d416b8 	ldrh	r1, [r4, #104]	; 0x68
    9720:	e594005c 	ldr	r0, [r4, #92]	; 0x5c
    9724:	eb003301 	bl	16330 <CSocket::Bind(unsigned short)>
    9728:	e3500000 	cmp	r0, #0
    972c:	ba0000af 	blt	99f0 <HTTPClient::Request(char*)+0x378>
    9730:	e59f1454 	ldr	r1, [pc, #1108]	; 9b8c <HTTPClient::Request(char*)+0x514>
    9734:	e28d0008 	add	r0, sp, #8
    9738:	eb005142 	bl	1dc48 <CIPAddress::CIPAddress(unsigned char const*)>
    973c:	e28d0010 	add	r0, sp, #16
    9740:	eb00721b 	bl	25fb4 <CString::CString()>
    9744:	eb006e97 	bl	251a8 <CLogger::Get()>
    9748:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    974c:	e30a3680 	movw	r3, #42624	; 0xa680
    9750:	e3403002 	movt	r3, #2
    9754:	e58d2000 	str	r2, [sp]
    9758:	e30a1414 	movw	r1, #42004	; 0xa414
    975c:	e3401002 	movt	r1, #2
    9760:	e3a02004 	mov	r2, #4
    9764:	eb006f6c 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9768:	e28d1008 	add	r1, sp, #8
    976c:	e3a02050 	mov	r2, #80	; 0x50
    9770:	e594005c 	ldr	r0, [r4, #92]	; 0x5c
    9774:	eb003305 	bl	16390 <CSocket::Connect(CIPAddress&, unsigned short)>
    9778:	e1a06000 	mov	r6, r0
    977c:	eb006e89 	bl	251a8 <CLogger::Get()>
    9780:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    9784:	e30a3694 	movw	r3, #42644	; 0xa694
    9788:	e3403002 	movt	r3, #2
    978c:	e58d2004 	str	r2, [sp, #4]
    9790:	e30a1414 	movw	r1, #42004	; 0xa414
    9794:	e3401002 	movt	r1, #2
    9798:	e3a02004 	mov	r2, #4
    979c:	e58d6000 	str	r6, [sp]
    97a0:	eb006f5d 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    97a4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    97a8:	e3a01000 	mov	r1, #0
    97ac:	e28d0020 	add	r0, sp, #32
    97b0:	eb00656c 	bl	22d68 <memset>
    97b4:	e28d1020 	add	r1, sp, #32
    97b8:	e1a00005 	mov	r0, r5
    97bc:	ebfffb10 	bl	8404 <modifysong(char*, char*)>
    97c0:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
    97c4:	e3530001 	cmp	r3, #1
    97c8:	0a0000bd 	beq	9ac4 <HTTPClient::Request(char*)+0x44c>
    97cc:	e3530002 	cmp	r3, #2
    97d0:	0a0000b5 	beq	9aac <HTTPClient::Request(char*)+0x434>
    97d4:	e3530003 	cmp	r3, #3
    97d8:	0a0000e0 	beq	9b60 <HTTPClient::Request(char*)+0x4e8>
    97dc:	e3530004 	cmp	r3, #4
    97e0:	0a00007c 	beq	99d8 <HTTPClient::Request(char*)+0x360>
    97e4:	e3530005 	cmp	r3, #5
    97e8:	0a0000e2 	beq	9b78 <HTTPClient::Request(char*)+0x500>
    97ec:	eb006e6d 	bl	251a8 <CLogger::Get()>
    97f0:	e1a05000 	mov	r5, r0
    97f4:	e28d0010 	add	r0, sp, #16
    97f8:	eb007203 	bl	2600c <CString::operator char const*() const>
    97fc:	e3a02004 	mov	r2, #4
    9800:	e58d0000 	str	r0, [sp]
    9804:	e30a383c 	movw	r3, #43068	; 0xa83c
    9808:	e3403002 	movt	r3, #2
    980c:	e1a00005 	mov	r0, r5
    9810:	e30a1414 	movw	r1, #42004	; 0xa414
    9814:	e3401002 	movt	r1, #2
    9818:	eb006f3f 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    981c:	e594505c 	ldr	r5, [r4, #92]	; 0x5c
    9820:	e28d0010 	add	r0, sp, #16
    9824:	eb0071f8 	bl	2600c <CString::operator char const*() const>
    9828:	e1a06000 	mov	r6, r0
    982c:	e28d0010 	add	r0, sp, #16
    9830:	eb00720c 	bl	26068 <CString::GetLength() const>
    9834:	e1a01006 	mov	r1, r6
    9838:	e1a02000 	mov	r2, r0
    983c:	e3a03040 	mov	r3, #64	; 0x40
    9840:	e1a00005 	mov	r0, r5
    9844:	eb003379 	bl	16630 <CSocket::Send(void const*, unsigned int, int)>
    9848:	e3500000 	cmp	r0, #0
    984c:	ba00007c 	blt	9a44 <HTTPClient::Request(char*)+0x3cc>
    9850:	e3a06000 	mov	r6, #0
    9854:	e3017c64 	movw	r7, #7268	; 0x1c64
    9858:	e3407003 	movt	r7, #3
    985c:	e30ab860 	movw	fp, #43104	; 0xa860
    9860:	e340b002 	movt	fp, #2
    9864:	e30a8414 	movw	r8, #42004	; 0xa414
    9868:	e3408002 	movt	r8, #2
    986c:	e30aa878 	movw	sl, #43128	; 0xa878
    9870:	e340a002 	movt	sl, #2
    9874:	e1a09006 	mov	r9, r6
    9878:	ea000004 	b	9890 <HTTPClient::Request(char*)+0x218>
    987c:	e3530002 	cmp	r3, #2
    9880:	0356004b 	cmpeq	r6, #75	; 0x4b
    9884:	0a0000aa 	beq	9b34 <HTTPClient::Request(char*)+0x4bc>
    9888:	e0899005 	add	r9, r9, r5
    988c:	e2866001 	add	r6, r6, #1
    9890:	e1a01007 	mov	r1, r7
    9894:	e3a03000 	mov	r3, #0
    9898:	e3a02d19 	mov	r2, #1600	; 0x640
    989c:	e594005c 	ldr	r0, [r4, #92]	; 0x5c
    98a0:	eb00338d 	bl	166dc <CSocket::Receive(void*, unsigned int, int)>
    98a4:	e2505000 	subs	r5, r0, #0
    98a8:	e0877005 	add	r7, r7, r5
    98ac:	da000014 	ble	9904 <HTTPClient::Request(char*)+0x28c>
    98b0:	eb006e3c 	bl	251a8 <CLogger::Get()>
    98b4:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    98b8:	e1a0300b 	mov	r3, fp
    98bc:	e1a01008 	mov	r1, r8
    98c0:	e58d2004 	str	r2, [sp, #4]
    98c4:	e3a02004 	mov	r2, #4
    98c8:	e58d5000 	str	r5, [sp]
    98cc:	eb006f12 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    98d0:	eb006e34 	bl	251a8 <CLogger::Get()>
    98d4:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    98d8:	e1a0300a 	mov	r3, sl
    98dc:	e58d6000 	str	r6, [sp]
    98e0:	e58d2004 	str	r2, [sp, #4]
    98e4:	e1a01008 	mov	r1, r8
    98e8:	e3a02004 	mov	r2, #4
    98ec:	eb006f0a 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    98f0:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
    98f4:	e3530001 	cmp	r3, #1
    98f8:	1affffdf 	bne	987c <HTTPClient::Request(char*)+0x204>
    98fc:	e3560046 	cmp	r6, #70	; 0x46
    9900:	1affffe0 	bne	9888 <HTTPClient::Request(char*)+0x210>
    9904:	eb006e27 	bl	251a8 <CLogger::Get()>
    9908:	e3a02004 	mov	r2, #4
    990c:	e30a3890 	movw	r3, #43152	; 0xa890
    9910:	e3403002 	movt	r3, #2
    9914:	e30a1414 	movw	r1, #42004	; 0xa414
    9918:	e3401002 	movt	r1, #2
    991c:	eb006efe 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9920:	eb006e20 	bl	251a8 <CLogger::Get()>
    9924:	e3a02004 	mov	r2, #4
    9928:	e58d5000 	str	r5, [sp]
    992c:	e30a3898 	movw	r3, #43160	; 0xa898
    9930:	e3403002 	movt	r3, #2
    9934:	e30a1414 	movw	r1, #42004	; 0xa414
    9938:	e3401002 	movt	r1, #2
    993c:	eb006ef6 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9940:	eb006e18 	bl	251a8 <CLogger::Get()>
    9944:	e3a02004 	mov	r2, #4
    9948:	e58d9000 	str	r9, [sp]
    994c:	e30a38ac 	movw	r3, #43180	; 0xa8ac
    9950:	e3403002 	movt	r3, #2
    9954:	e30a1414 	movw	r1, #42004	; 0xa414
    9958:	e3401002 	movt	r1, #2
    995c:	eb006eee 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9960:	eb006e10 	bl	251a8 <CLogger::Get()>
    9964:	e58d6000 	str	r6, [sp]
    9968:	e30a38bc 	movw	r3, #43196	; 0xa8bc
    996c:	e3403002 	movt	r3, #2
    9970:	e30a1414 	movw	r1, #42004	; 0xa414
    9974:	e3401002 	movt	r1, #2
    9978:	e3a02004 	mov	r2, #4
    997c:	eb006ee6 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9980:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
    9984:	e3530001 	cmp	r3, #1
    9988:	0a000053 	beq	9adc <HTTPClient::Request(char*)+0x464>
    998c:	e3530002 	cmp	r3, #2
    9990:	0a000069 	beq	9b3c <HTTPClient::Request(char*)+0x4c4>
    9994:	e3530003 	cmp	r3, #3
    9998:	0a000009 	beq	99c4 <HTTPClient::Request(char*)+0x34c>
    999c:	e3530004 	cmp	r3, #4
    99a0:	0a000006 	beq	99c0 <HTTPClient::Request(char*)+0x348>
    99a4:	e28d0010 	add	r0, sp, #16
    99a8:	eb00714e 	bl	25ee8 <CString::~CString()>
    99ac:	e28d0008 	add	r0, sp, #8
    99b0:	eb00500f 	bl	1d9f4 <CIPAddress::~CIPAddress()>
    99b4:	e28ddb01 	add	sp, sp, #1024	; 0x400
    99b8:	e28dd00c 	add	sp, sp, #12
    99bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99c0:	eafffffe 	b	99c0 <HTTPClient::Request(char*)+0x348>
    99c4:	e1a00004 	mov	r0, r4
    99c8:	ebfffdb0 	bl	9090 <HTTPClient::getnewlocation()>
    99cc:	e59f31bc 	ldr	r3, [pc, #444]	; 9b90 <HTTPClient::Request(char*)+0x518>
    99d0:	e5843054 	str	r3, [r4, #84]	; 0x54
    99d4:	eafffff2 	b	99a4 <HTTPClient::Request(char*)+0x32c>
    99d8:	e30a1784 	movw	r1, #42884	; 0xa784
    99dc:	e3401002 	movt	r1, #2
    99e0:	e5942078 	ldr	r2, [r4, #120]	; 0x78
    99e4:	e28d0010 	add	r0, sp, #16
    99e8:	eb007483 	bl	26bfc <CString::Format(char const*, ...)>
    99ec:	eaffff7e 	b	97ec <HTTPClient::Request(char*)+0x174>
    99f0:	eb006dec 	bl	251a8 <CLogger::Get()>
    99f4:	e1d426b8 	ldrh	r2, [r4, #104]	; 0x68
    99f8:	e30a3660 	movw	r3, #42592	; 0xa660
    99fc:	e3403002 	movt	r3, #2
    9a00:	e58d2000 	str	r2, [sp]
    9a04:	e3a02001 	mov	r2, #1
    9a08:	e59f1184 	ldr	r1, [pc, #388]	; 9b94 <HTTPClient::Request(char*)+0x51c>
    9a0c:	eb006ec2 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9a10:	e594505c 	ldr	r5, [r4, #92]	; 0x5c
    9a14:	e3550000 	cmp	r5, #0
    9a18:	0a000004 	beq	9a30 <HTTPClient::Request(char*)+0x3b8>
    9a1c:	e1a00005 	mov	r0, r5
    9a20:	eb003229 	bl	162cc <CSocket::~CSocket()>
    9a24:	e1a00005 	mov	r0, r5
    9a28:	e3a01018 	mov	r1, #24
    9a2c:	eb00615d 	bl	21fa8 <operator delete(void*, unsigned int)>
    9a30:	e3a03000 	mov	r3, #0
    9a34:	e584305c 	str	r3, [r4, #92]	; 0x5c
    9a38:	e28ddb01 	add	sp, sp, #1024	; 0x400
    9a3c:	e28dd00c 	add	sp, sp, #12
    9a40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a44:	eb006dd7 	bl	251a8 <CLogger::Get()>
    9a48:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    9a4c:	e30a3848 	movw	r3, #43080	; 0xa848
    9a50:	e3403002 	movt	r3, #2
    9a54:	e58d2000 	str	r2, [sp]
    9a58:	e3a02001 	mov	r2, #1
    9a5c:	e59f1130 	ldr	r1, [pc, #304]	; 9b94 <HTTPClient::Request(char*)+0x51c>
    9a60:	eb006ead 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9a64:	e594505c 	ldr	r5, [r4, #92]	; 0x5c
    9a68:	e3550000 	cmp	r5, #0
    9a6c:	0a000004 	beq	9a84 <HTTPClient::Request(char*)+0x40c>
    9a70:	e1a00005 	mov	r0, r5
    9a74:	eb003214 	bl	162cc <CSocket::~CSocket()>
    9a78:	e1a00005 	mov	r0, r5
    9a7c:	e3a01018 	mov	r1, #24
    9a80:	eb006148 	bl	21fa8 <operator delete(void*, unsigned int)>
    9a84:	e3a03000 	mov	r3, #0
    9a88:	e584305c 	str	r3, [r4, #92]	; 0x5c
    9a8c:	eaffffc4 	b	99a4 <HTTPClient::Request(char*)+0x32c>
    9a90:	e30a1574 	movw	r1, #42356	; 0xa574
    9a94:	e3401002 	movt	r1, #2
    9a98:	e30a0638 	movw	r0, #42552	; 0xa638
    9a9c:	e3400002 	movt	r0, #2
    9aa0:	e3a0207d 	mov	r2, #125	; 0x7d
    9aa4:	eb006c3d 	bl	24ba0 <assertion_failed>
    9aa8:	eaffff0b 	b	96dc <HTTPClient::Request(char*)+0x64>
    9aac:	e30a1700 	movw	r1, #42752	; 0xa700
    9ab0:	e3401002 	movt	r1, #2
    9ab4:	e5942078 	ldr	r2, [r4, #120]	; 0x78
    9ab8:	e28d0010 	add	r0, sp, #16
    9abc:	eb00744e 	bl	26bfc <CString::Format(char const*, ...)>
    9ac0:	eaffff49 	b	97ec <HTTPClient::Request(char*)+0x174>
    9ac4:	e28d2020 	add	r2, sp, #32
    9ac8:	e30a16ac 	movw	r1, #42668	; 0xa6ac
    9acc:	e3401002 	movt	r1, #2
    9ad0:	e28d0010 	add	r0, sp, #16
    9ad4:	eb007448 	bl	26bfc <CString::Format(char const*, ...)>
    9ad8:	eaffff43 	b	97ec <HTTPClient::Request(char*)+0x174>
    9adc:	e59f50b4 	ldr	r5, [pc, #180]	; 9b98 <HTTPClient::Request(char*)+0x520>
    9ae0:	e1a00004 	mov	r0, r4
    9ae4:	ebfffc72 	bl	8cb4 <HTTPClient::GetLinkForPhase2()>
    9ae8:	e5845054 	str	r5, [r4, #84]	; 0x54
    9aec:	eb006dad 	bl	251a8 <CLogger::Get()>
    9af0:	e30a38dc 	movw	r3, #43228	; 0xa8dc
    9af4:	e3403002 	movt	r3, #2
    9af8:	e58d5000 	str	r5, [sp]
    9afc:	e3a02004 	mov	r2, #4
    9b00:	e30a1414 	movw	r1, #42004	; 0xa414
    9b04:	e3401002 	movt	r1, #2
    9b08:	eb006e83 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9b0c:	eb006da5 	bl	251a8 <CLogger::Get()>
    9b10:	e5942054 	ldr	r2, [r4, #84]	; 0x54
    9b14:	e30a38dc 	movw	r3, #43228	; 0xa8dc
    9b18:	e3403002 	movt	r3, #2
    9b1c:	e58d2000 	str	r2, [sp]
    9b20:	e30a1414 	movw	r1, #42004	; 0xa414
    9b24:	e3401002 	movt	r1, #2
    9b28:	e3a02004 	mov	r2, #4
    9b2c:	eb006e7a 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9b30:	eaffff9b 	b	99a4 <HTTPClient::Request(char*)+0x32c>
    9b34:	e3a0604b 	mov	r6, #75	; 0x4b
    9b38:	eaffff71 	b	9904 <HTTPClient::Request(char*)+0x28c>
    9b3c:	e59f5058 	ldr	r5, [pc, #88]	; 9b9c <HTTPClient::Request(char*)+0x524>
    9b40:	e1a00004 	mov	r0, r4
    9b44:	ebfffcb8 	bl	8e2c <HTTPClient::GetDownloadLink()>
    9b48:	e5845054 	str	r5, [r4, #84]	; 0x54
    9b4c:	eb006d95 	bl	251a8 <CLogger::Get()>
    9b50:	e30a38f4 	movw	r3, #43252	; 0xa8f4
    9b54:	e3403002 	movt	r3, #2
    9b58:	e58d5000 	str	r5, [sp]
    9b5c:	eaffffe6 	b	9afc <HTTPClient::Request(char*)+0x484>
    9b60:	e30a1744 	movw	r1, #42820	; 0xa744
    9b64:	e3401002 	movt	r1, #2
    9b68:	e5942078 	ldr	r2, [r4, #120]	; 0x78
    9b6c:	e28d0010 	add	r0, sp, #16
    9b70:	eb007421 	bl	26bfc <CString::Format(char const*, ...)>
    9b74:	eaffff1c 	b	97ec <HTTPClient::Request(char*)+0x174>
    9b78:	e30a17b0 	movw	r1, #42928	; 0xa7b0
    9b7c:	e3401002 	movt	r1, #2
    9b80:	e28d0010 	add	r0, sp, #16
    9b84:	eb00741c 	bl	26bfc <CString::Format(char const*, ...)>
    9b88:	eaffff17 	b	97ec <HTTPClient::Request(char*)+0x174>
    9b8c:	0002a3f8 	.word	0x0002a3f8
    9b90:	01432434 	.word	0x01432434
    9b94:	0002a3f0 	.word	0x0002a3f0
    9b98:	01431c64 	.word	0x01431c64
    9b9c:	0143204c 	.word	0x0143204c

00009ba0 <HTTPClient::Run()>:
    9ba0:	e590307c 	ldr	r3, [r0, #124]	; 0x7c
    9ba4:	e92d4070 	push	{r4, r5, r6, lr}
    9ba8:	e1a04000 	mov	r4, r0
    9bac:	e3530001 	cmp	r3, #1
    9bb0:	0a000005 	beq	9bcc <HTTPClient::Run()+0x2c>
    9bb4:	e2433002 	sub	r3, r3, #2
    9bb8:	e3530003 	cmp	r3, #3
    9bbc:	88bd8070 	pophi	{r4, r5, r6, pc}
    9bc0:	e5901078 	ldr	r1, [r0, #120]	; 0x78
    9bc4:	e8bd4070 	pop	{r4, r5, r6, lr}
    9bc8:	eafffeaa 	b	9678 <HTTPClient::Request(char*)>
    9bcc:	eb000016 	bl	9c2c <Keyboard::Get()>
    9bd0:	e1a05000 	mov	r5, r0
    9bd4:	eb000033 	bl	9ca8 <Keyboard::IsEndOfLine()>
    9bd8:	e3500000 	cmp	r0, #0
    9bdc:	08bd8070 	popeq	{r4, r5, r6, pc}
    9be0:	e1a00005 	mov	r0, r5
    9be4:	eb000031 	bl	9cb0 <Keyboard::GetBuffer()>
    9be8:	e1a01000 	mov	r1, r0
    9bec:	e1a00004 	mov	r0, r4
    9bf0:	e8bd4070 	pop	{r4, r5, r6, lr}
    9bf4:	eafffe9f 	b	9678 <HTTPClient::Request(char*)>

00009bf8 <Keyboard::Keyboard(CUSBKeyboardDevice*)>:
    9bf8:	e302281c 	movw	r2, #10268	; 0x281c
    9bfc:	e3402143 	movt	r2, #323	; 0x143
    9c00:	e3a0c000 	mov	ip, #0
    9c04:	e5801408 	str	r1, [r0, #1032]	; 0x408
    9c08:	e580c400 	str	ip, [r0, #1024]	; 0x400
    9c0c:	e5820000 	str	r0, [r2]
    9c10:	e5c0c404 	strb	ip, [r0, #1028]	; 0x404
    9c14:	e12fff1e 	bx	lr

00009c18 <Keyboard::~Keyboard()>:
    9c18:	e302381c 	movw	r3, #10268	; 0x281c
    9c1c:	e3403143 	movt	r3, #323	; 0x143
    9c20:	e3a02000 	mov	r2, #0
    9c24:	e5832000 	str	r2, [r3]
    9c28:	e12fff1e 	bx	lr

00009c2c <Keyboard::Get()>:
    9c2c:	e302381c 	movw	r3, #10268	; 0x281c
    9c30:	e3403143 	movt	r3, #323	; 0x143
    9c34:	e5930000 	ldr	r0, [r3]
    9c38:	e12fff1e 	bx	lr

00009c3c <Keyboard::AppendToBuffer(char)>:
    9c3c:	e590c400 	ldr	ip, [r0, #1024]	; 0x400
    9c40:	e35c0b01 	cmp	ip, #1024	; 0x400
    9c44:	2a000011 	bcs	9c90 <Keyboard::AppendToBuffer(char)+0x54>
    9c48:	e351000d 	cmp	r1, #13
    9c4c:	1351000a 	cmpne	r1, #10
    9c50:	e1a02000 	mov	r2, r0
    9c54:	03a03001 	moveq	r3, #1
    9c58:	13a03000 	movne	r3, #0
    9c5c:	0a000005 	beq	9c78 <Keyboard::AppendToBuffer(char)+0x3c>
    9c60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9c64:	e28ce001 	add	lr, ip, #1
    9c68:	e1a00003 	mov	r0, r3
    9c6c:	e582e400 	str	lr, [r2, #1024]	; 0x400
    9c70:	e7c2100c 	strb	r1, [r2, ip]
    9c74:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9c78:	e3a03000 	mov	r3, #0
    9c7c:	e3a01001 	mov	r1, #1
    9c80:	e7c0300c 	strb	r3, [r0, ip]
    9c84:	e1a00003 	mov	r0, r3
    9c88:	e5c21404 	strb	r1, [r2, #1028]	; 0x404
    9c8c:	e12fff1e 	bx	lr
    9c90:	e3e00000 	mvn	r0, #0
    9c94:	e12fff1e 	bx	lr

00009c98 <Keyboard::ClearBuffer()>:
    9c98:	e3a03000 	mov	r3, #0
    9c9c:	e5803400 	str	r3, [r0, #1024]	; 0x400
    9ca0:	e5c03404 	strb	r3, [r0, #1028]	; 0x404
    9ca4:	e12fff1e 	bx	lr

00009ca8 <Keyboard::IsEndOfLine()>:
    9ca8:	e5d00404 	ldrb	r0, [r0, #1028]	; 0x404
    9cac:	e12fff1e 	bx	lr

00009cb0 <Keyboard::GetBuffer()>:
    9cb0:	e12fff1e 	bx	lr

00009cb4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    9cb4:	e92d4070 	push	{r4, r5, r6, lr}
    9cb8:	e2525000 	subs	r5, r2, #0
    9cbc:	e1a04001 	mov	r4, r1
    9cc0:	0a00000c 	beq	9cf8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x44>
    9cc4:	e354000f 	cmp	r4, #15
    9cc8:	9a000005 	bls	9ce4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x30>
    9ccc:	e30a1930 	movw	r1, #43312	; 0xa930
    9cd0:	e30a094c 	movw	r0, #43340	; 0xa94c
    9cd4:	e3401002 	movt	r1, #2
    9cd8:	e3400002 	movt	r0, #2
    9cdc:	e3a02f96 	mov	r2, #600	; 0x258
    9ce0:	eb006bae 	bl	24ba0 <assertion_failed>
    9ce4:	e2844016 	add	r4, r4, #22
    9ce8:	e3a03000 	mov	r3, #0
    9cec:	e0854104 	add	r4, r5, r4, lsl #2
    9cf0:	e5843004 	str	r3, [r4, #4]
    9cf4:	e8bd8070 	pop	{r4, r5, r6, pc}
    9cf8:	e30a1930 	movw	r1, #43312	; 0xa930
    9cfc:	e30a0940 	movw	r0, #43328	; 0xa940
    9d00:	e3401002 	movt	r1, #2
    9d04:	e3400002 	movt	r0, #2
    9d08:	e3002255 	movw	r2, #597	; 0x255
    9d0c:	eb006ba3 	bl	24ba0 <assertion_failed>
    9d10:	eaffffeb 	b	9cc4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x10>

00009d14 <CDWHCIDevice::~CDWHCIDevice()>:
    9d14:	e59f2028 	ldr	r2, [pc, #40]	; 9d44 <CDWHCIDevice::~CDWHCIDevice()+0x30>
    9d18:	e3a03000 	mov	r3, #0
    9d1c:	e92d4010 	push	{r4, lr}
    9d20:	e1a04000 	mov	r4, r0
    9d24:	e884000c 	stm	r4, {r2, r3}
    9d28:	e28000a4 	add	r0, r0, #164	; 0xa4
    9d2c:	e5843008 	str	r3, [r4, #8]
    9d30:	eb001b10 	bl	10978 <CDWHCIRootPort::~CDWHCIRootPort()>
    9d34:	e1a00004 	mov	r0, r4
    9d38:	eb00110e 	bl	e178 <CUSBHostController::~CUSBHostController()>
    9d3c:	e1a00004 	mov	r0, r4
    9d40:	e8bd8010 	pop	{r4, pc}
    9d44:	0002a914 	.word	0x0002a914

00009d48 <CDWHCIDevice::~CDWHCIDevice()>:
    9d48:	e59f2034 	ldr	r2, [pc, #52]	; 9d84 <CDWHCIDevice::~CDWHCIDevice()+0x3c>
    9d4c:	e3a03000 	mov	r3, #0
    9d50:	e92d4010 	push	{r4, lr}
    9d54:	e1a04000 	mov	r4, r0
    9d58:	e884000c 	stm	r4, {r2, r3}
    9d5c:	e28000a4 	add	r0, r0, #164	; 0xa4
    9d60:	e5843008 	str	r3, [r4, #8]
    9d64:	eb001b03 	bl	10978 <CDWHCIRootPort::~CDWHCIRootPort()>
    9d68:	e1a00004 	mov	r0, r4
    9d6c:	eb001101 	bl	e178 <CUSBHostController::~CUSBHostController()>
    9d70:	e1a00004 	mov	r0, r4
    9d74:	e3a010ac 	mov	r1, #172	; 0xac
    9d78:	eb00608a 	bl	21fa8 <operator delete(void*, unsigned int)>
    9d7c:	e1a00004 	mov	r0, r4
    9d80:	e8bd8010 	pop	{r4, pc}
    9d84:	0002a914 	.word	0x0002a914

00009d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>:
    9d88:	e92d4030 	push	{r4, r5, lr}
    9d8c:	e24dd01c 	sub	sp, sp, #28
    9d90:	e1a05000 	mov	r5, r0
    9d94:	e28d000c 	add	r0, sp, #12
    9d98:	eb0008ee 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9d9c:	f57ff05f 	dmb	sy
    9da0:	eb006d00 	bl	251a8 <CLogger::Get()>
    9da4:	e1a04000 	mov	r4, r0
    9da8:	e28d000c 	add	r0, sp, #12
    9dac:	eb0008f2 	bl	c17c <CDWHCIRegister::Read()>
    9db0:	e3a02004 	mov	r2, #4
    9db4:	e59f1024 	ldr	r1, [pc, #36]	; 9de0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]+0x58>
    9db8:	e30a396c 	movw	r3, #43372	; 0xa96c
    9dbc:	e58d5004 	str	r5, [sp, #4]
    9dc0:	e3403002 	movt	r3, #2
    9dc4:	e58d0000 	str	r0, [sp]
    9dc8:	e1a00004 	mov	r0, r4
    9dcc:	eb006dd2 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9dd0:	e28d000c 	add	r0, sp, #12
    9dd4:	eb0008e7 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    9dd8:	e28dd01c 	add	sp, sp, #28
    9ddc:	e8bd8030 	pop	{r4, r5, pc}
    9de0:	0002a924 	.word	0x0002a924

00009de4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    9de4:	e92d4070 	push	{r4, r5, r6, lr}
    9de8:	e1a04000 	mov	r4, r0
    9dec:	e1a06001 	mov	r6, r1
    9df0:	e1a05002 	mov	r5, r2
    9df4:	eb0010db 	bl	e168 <CUSBHostController::CUSBHostController()>
    9df8:	e59f00c4 	ldr	r0, [pc, #196]	; 9ec4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xe0>
    9dfc:	e3a03000 	mov	r3, #0
    9e00:	e3a0c001 	mov	ip, #1
    9e04:	e5843010 	str	r3, [r4, #16]
    9e08:	e1a01004 	mov	r1, r4
    9e0c:	e5840000 	str	r0, [r4]
    9e10:	e28400a4 	add	r0, r4, #164	; 0xa4
    9e14:	e584300c 	str	r3, [r4, #12]
    9e18:	e584309c 	str	r3, [r4, #156]	; 0x9c
    9e1c:	e58430a0 	str	r3, [r4, #160]	; 0xa0
    9e20:	e5846004 	str	r6, [r4, #4]
    9e24:	e5845008 	str	r5, [r4, #8]
    9e28:	e584c014 	str	ip, [r4, #20]
    9e2c:	e584c058 	str	ip, [r4, #88]	; 0x58
    9e30:	eb001ac0 	bl	10938 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    9e34:	e5943004 	ldr	r3, [r4, #4]
    9e38:	e3530000 	cmp	r3, #0
    9e3c:	0a000012 	beq	9e8c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xa8>
    9e40:	e5943008 	ldr	r3, [r4, #8]
    9e44:	e3530000 	cmp	r3, #0
    9e48:	0a000016 	beq	9ea8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xc4>
    9e4c:	e2843014 	add	r3, r4, #20
    9e50:	e2841054 	add	r1, r4, #84	; 0x54
    9e54:	e3a02000 	mov	r2, #0
    9e58:	e5a32004 	str	r2, [r3, #4]!
    9e5c:	e1510003 	cmp	r1, r3
    9e60:	1afffffc 	bne	9e58 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x74>
    9e64:	e3a03000 	mov	r3, #0
    9e68:	e1a01003 	mov	r1, r3
    9e6c:	e2832016 	add	r2, r3, #22
    9e70:	e2833001 	add	r3, r3, #1
    9e74:	e3530010 	cmp	r3, #16
    9e78:	e0842102 	add	r2, r4, r2, lsl #2
    9e7c:	e5821004 	str	r1, [r2, #4]
    9e80:	1afffff9 	bne	9e6c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x88>
    9e84:	e1a00004 	mov	r0, r4
    9e88:	e8bd8070 	pop	{r4, r5, r6, pc}
    9e8c:	e30a1930 	movw	r1, #43312	; 0xa930
    9e90:	e30a0978 	movw	r0, #43384	; 0xa978
    9e94:	e3401002 	movt	r1, #2
    9e98:	e3400002 	movt	r0, #2
    9e9c:	e3a02045 	mov	r2, #69	; 0x45
    9ea0:	eb006b3e 	bl	24ba0 <assertion_failed>
    9ea4:	eaffffe5 	b	9e40 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x5c>
    9ea8:	e30a1930 	movw	r1, #43312	; 0xa930
    9eac:	e30a0990 	movw	r0, #43408	; 0xa990
    9eb0:	e3401002 	movt	r1, #2
    9eb4:	e3400002 	movt	r0, #2
    9eb8:	e3a02046 	mov	r2, #70	; 0x46
    9ebc:	eb006b37 	bl	24ba0 <assertion_failed>
    9ec0:	eaffffe1 	b	9e4c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x68>
    9ec4:	0002a914 	.word	0x0002a914

00009ec8 <CDWHCIDevice::GetPortSpeed()>:
    9ec8:	e92d4010 	push	{r4, lr}
    9ecc:	e24dd010 	sub	sp, sp, #16
    9ed0:	e28d0004 	add	r0, sp, #4
    9ed4:	e3a01d11 	mov	r1, #1088	; 0x440
    9ed8:	e3431f98 	movt	r1, #16280	; 0x3f98
    9edc:	eb00089d 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9ee0:	e28d0004 	add	r0, sp, #4
    9ee4:	eb0008a4 	bl	c17c <CDWHCIRegister::Read()>
    9ee8:	e7e148d0 	ubfx	r4, r0, #17, #2
    9eec:	e3540003 	cmp	r4, #3
    9ef0:	130a390c 	movwne	r3, #43276	; 0xa90c
    9ef4:	13403002 	movtne	r3, #2
    9ef8:	10830004 	addne	r0, r3, r4
    9efc:	15d04020 	ldrbne	r4, [r0, #32]
    9f00:	e28d0004 	add	r0, sp, #4
    9f04:	eb00089b 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    9f08:	e1a00004 	mov	r0, r4
    9f0c:	e28dd010 	add	sp, sp, #16
    9f10:	e8bd8010 	pop	{r4, pc}

00009f14 <CDWHCIDevice::OvercurrentDetected()>:
    9f14:	e92d4010 	push	{r4, lr}
    9f18:	e24dd010 	sub	sp, sp, #16
    9f1c:	e28d0004 	add	r0, sp, #4
    9f20:	e3a01d11 	mov	r1, #1088	; 0x440
    9f24:	e3431f98 	movt	r1, #16280	; 0x3f98
    9f28:	eb00088a 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f2c:	e28d0004 	add	r0, sp, #4
    9f30:	eb000891 	bl	c17c <CDWHCIRegister::Read()>
    9f34:	e1a04000 	mov	r4, r0
    9f38:	e28d0004 	add	r0, sp, #4
    9f3c:	eb00088d 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    9f40:	e7e00254 	ubfx	r0, r4, #4, #1
    9f44:	e28dd010 	add	sp, sp, #16
    9f48:	e8bd8010 	pop	{r4, pc}

00009f4c <CDWHCIDevice::DisableRootPort()>:
    9f4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9f50:	e24dd014 	sub	sp, sp, #20
    9f54:	e28d0004 	add	r0, sp, #4
    9f58:	e3a01d11 	mov	r1, #1088	; 0x440
    9f5c:	e3431f98 	movt	r1, #16280	; 0x3f98
    9f60:	eb00087c 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f64:	e28d0004 	add	r0, sp, #4
    9f68:	eb000883 	bl	c17c <CDWHCIRegister::Read()>
    9f6c:	e3e01a01 	mvn	r1, #4096	; 0x1000
    9f70:	e28d0004 	add	r0, sp, #4
    9f74:	eb0008b9 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    9f78:	e28d0004 	add	r0, sp, #4
    9f7c:	eb000885 	bl	c198 <CDWHCIRegister::Write()>
    9f80:	e28d0004 	add	r0, sp, #4
    9f84:	eb00087b 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    9f88:	e28dd014 	add	sp, sp, #20
    9f8c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009f90 <CDWHCIDevice::PowerOn()>:
    9f90:	e92d4010 	push	{r4, lr}
    9f94:	e24dd028 	sub	sp, sp, #40	; 0x28
    9f98:	e28d000c 	add	r0, sp, #12
    9f9c:	eb005bb5 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
    9fa0:	e28d000c 	add	r0, sp, #12
    9fa4:	e3a03000 	mov	r3, #0
    9fa8:	e3081001 	movw	r1, #32769	; 0x8001
    9fac:	e58d3000 	str	r3, [sp]
    9fb0:	e3401002 	movt	r1, #2
    9fb4:	e3a03014 	mov	r3, #20
    9fb8:	e08d2003 	add	r2, sp, r3
    9fbc:	e3a0c003 	mov	ip, #3
    9fc0:	e58dc020 	str	ip, [sp, #32]
    9fc4:	e58dc024 	str	ip, [sp, #36]	; 0x24
    9fc8:	eb005bf2 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9fcc:	e2504000 	subs	r4, r0, #0
    9fd0:	e28d000c 	add	r0, sp, #12
    9fd4:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    9fd8:	12044003 	andne	r4, r4, #3
    9fdc:	12444001 	subne	r4, r4, #1
    9fe0:	116f4f14 	clzne	r4, r4
    9fe4:	11a042a4 	lsrne	r4, r4, #5
    9fe8:	eb005ba8 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
    9fec:	e1a00004 	mov	r0, r4
    9ff0:	e28dd028 	add	sp, sp, #40	; 0x28
    9ff4:	e8bd8010 	pop	{r4, pc}

00009ff8 <CDWHCIDevice::EnableGlobalInterrupts()>:
    9ff8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9ffc:	e24dd014 	sub	sp, sp, #20
    a000:	e28d0004 	add	r0, sp, #4
    a004:	e3a01008 	mov	r1, #8
    a008:	e3431f98 	movt	r1, #16280	; 0x3f98
    a00c:	eb000851 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a010:	e28d0004 	add	r0, sp, #4
    a014:	eb000858 	bl	c17c <CDWHCIRegister::Read()>
    a018:	e3a01001 	mov	r1, #1
    a01c:	e28d0004 	add	r0, sp, #4
    a020:	eb00089e 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a024:	e28d0004 	add	r0, sp, #4
    a028:	eb00085a 	bl	c198 <CDWHCIRegister::Write()>
    a02c:	e28d0004 	add	r0, sp, #4
    a030:	eb000850 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a034:	e28dd014 	add	sp, sp, #20
    a038:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a03c <CDWHCIDevice::EnableCommonInterrupts()>:
    a03c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a040:	e24dd014 	sub	sp, sp, #20
    a044:	e28d0004 	add	r0, sp, #4
    a048:	e3a01014 	mov	r1, #20
    a04c:	e3431f98 	movt	r1, #16280	; 0x3f98
    a050:	eb000840 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a054:	e28d0004 	add	r0, sp, #4
    a058:	eb0008d9 	bl	c3c4 <CDWHCIRegister::SetAll()>
    a05c:	e28d0004 	add	r0, sp, #4
    a060:	eb00084c 	bl	c198 <CDWHCIRegister::Write()>
    a064:	e28d0004 	add	r0, sp, #4
    a068:	eb000842 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a06c:	e28dd014 	add	sp, sp, #20
    a070:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a074 <CDWHCIDevice::EnableHostInterrupts()>:
    a074:	e92d4010 	push	{r4, lr}
    a078:	e24dd010 	sub	sp, sp, #16
    a07c:	e3a02000 	mov	r2, #0
    a080:	e1a04000 	mov	r4, r0
    a084:	e3a01018 	mov	r1, #24
    a088:	e28d0004 	add	r0, sp, #4
    a08c:	e3431f98 	movt	r1, #16280	; 0x3f98
    a090:	eb000834 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a094:	e28d0004 	add	r0, sp, #4
    a098:	eb00083e 	bl	c198 <CDWHCIRegister::Write()>
    a09c:	e1a00004 	mov	r0, r4
    a0a0:	ebffffe5 	bl	a03c <CDWHCIDevice::EnableCommonInterrupts()>
    a0a4:	e28d0004 	add	r0, sp, #4
    a0a8:	eb000833 	bl	c17c <CDWHCIRegister::Read()>
    a0ac:	e3a01402 	mov	r1, #33554432	; 0x2000000
    a0b0:	e28d0004 	add	r0, sp, #4
    a0b4:	eb000879 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a0b8:	e28d0004 	add	r0, sp, #4
    a0bc:	eb000835 	bl	c198 <CDWHCIRegister::Write()>
    a0c0:	e28d0004 	add	r0, sp, #4
    a0c4:	eb00082b 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a0c8:	e28dd010 	add	sp, sp, #16
    a0cc:	e8bd8010 	pop	{r4, pc}

0000a0d0 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    a0d0:	e92d4030 	push	{r4, r5, lr}
    a0d4:	e24dd014 	sub	sp, sp, #20
    a0d8:	e1a04000 	mov	r4, r0
    a0dc:	e1a05001 	mov	r5, r1
    a0e0:	e28d0004 	add	r0, sp, #4
    a0e4:	e3001418 	movw	r1, #1048	; 0x418
    a0e8:	e3431f98 	movt	r1, #16280	; 0x3f98
    a0ec:	eb000819 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a0f0:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    a0f4:	e3500000 	cmp	r0, #0
    a0f8:	1a00000f 	bne	a13c <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x6c>
    a0fc:	e28d0004 	add	r0, sp, #4
    a100:	eb00081d 	bl	c17c <CDWHCIRegister::Read()>
    a104:	e3a01001 	mov	r1, #1
    a108:	e1a01511 	lsl	r1, r1, r5
    a10c:	e28d0004 	add	r0, sp, #4
    a110:	eb000862 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a114:	e28d0004 	add	r0, sp, #4
    a118:	eb00081e 	bl	c198 <CDWHCIRegister::Write()>
    a11c:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a120:	e3530000 	cmp	r3, #0
    a124:	0a000000 	beq	a12c <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x5c>
    a128:	eb005fd4 	bl	22080 <LeaveCritical>
    a12c:	e28d0004 	add	r0, sp, #4
    a130:	eb000810 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a134:	e28dd014 	add	sp, sp, #20
    a138:	e8bd8030 	pop	{r4, r5, pc}
    a13c:	eb005fa1 	bl	21fc8 <EnterCritical>
    a140:	eaffffed 	b	a0fc <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x2c>

0000a144 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    a144:	e92d4030 	push	{r4, r5, lr}
    a148:	e24dd014 	sub	sp, sp, #20
    a14c:	e1a04000 	mov	r4, r0
    a150:	e1a05001 	mov	r5, r1
    a154:	e28d0004 	add	r0, sp, #4
    a158:	e3001418 	movw	r1, #1048	; 0x418
    a15c:	e3431f98 	movt	r1, #16280	; 0x3f98
    a160:	eb0007fc 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a164:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    a168:	e3500000 	cmp	r0, #0
    a16c:	1a00000f 	bne	a1b0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x6c>
    a170:	e28d0004 	add	r0, sp, #4
    a174:	eb000800 	bl	c17c <CDWHCIRegister::Read()>
    a178:	e3a01001 	mov	r1, #1
    a17c:	e1e01511 	mvn	r1, r1, lsl r5
    a180:	e28d0004 	add	r0, sp, #4
    a184:	eb000835 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    a188:	e28d0004 	add	r0, sp, #4
    a18c:	eb000801 	bl	c198 <CDWHCIRegister::Write()>
    a190:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a194:	e3530000 	cmp	r3, #0
    a198:	0a000000 	beq	a1a0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x5c>
    a19c:	eb005fb7 	bl	22080 <LeaveCritical>
    a1a0:	e28d0004 	add	r0, sp, #4
    a1a4:	eb0007f3 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a1a8:	e28dd014 	add	sp, sp, #20
    a1ac:	e8bd8030 	pop	{r4, r5, pc}
    a1b0:	eb005f84 	bl	21fc8 <EnterCritical>
    a1b4:	eaffffed 	b	a170 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x2c>

0000a1b8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    a1b8:	e92d4070 	push	{r4, r5, r6, lr}
    a1bc:	e2514000 	subs	r4, r1, #0
    a1c0:	e24dd048 	sub	sp, sp, #72	; 0x48
    a1c4:	e1a06000 	mov	r6, r0
    a1c8:	0a0000e5 	beq	a564 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ac>
    a1cc:	e1a00004 	mov	r0, r4
    a1d0:	eb000938 	bl	c6b8 <CDWHCITransferStageData::GetChannelNumber() const>
    a1d4:	e596300c 	ldr	r3, [r6, #12]
    a1d8:	e1500003 	cmp	r0, r3
    a1dc:	e1a05000 	mov	r5, r0
    a1e0:	2a0000d4 	bcs	a538 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x380>
    a1e4:	e3a01001 	mov	r1, #1
    a1e8:	e1a00004 	mov	r0, r4
    a1ec:	eb00092b 	bl	c6a0 <CDWHCITransferStageData::SetSubState(unsigned int)>
    a1f0:	e1a05285 	lsl	r5, r5, #5
    a1f4:	e3001508 	movw	r1, #1288	; 0x508
    a1f8:	e3431f98 	movt	r1, #16280	; 0x3f98
    a1fc:	e0851001 	add	r1, r5, r1
    a200:	e1a0000d 	mov	r0, sp
    a204:	eb0007d3 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a208:	e1a0000d 	mov	r0, sp
    a20c:	eb00086c 	bl	c3c4 <CDWHCIRegister::SetAll()>
    a210:	e1a0000d 	mov	r0, sp
    a214:	eb0007df 	bl	c198 <CDWHCIRegister::Write()>
    a218:	e3a01e51 	mov	r1, #1296	; 0x510
    a21c:	e3431f98 	movt	r1, #16280	; 0x3f98
    a220:	e3a02000 	mov	r2, #0
    a224:	e0851001 	add	r1, r5, r1
    a228:	e28d000c 	add	r0, sp, #12
    a22c:	eb0007cd 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a230:	e1a00004 	mov	r0, r4
    a234:	eb000a5b 	bl	cba8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a238:	e7f21050 	ubfx	r1, r0, #0, #19
    a23c:	e28d000c 	add	r0, sp, #12
    a240:	eb000816 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a244:	e1a00004 	mov	r0, r4
    a248:	eb000a58 	bl	cbb0 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    a24c:	e3a01000 	mov	r1, #0
    a250:	e3411ff8 	movt	r1, #8184	; 0x1ff8
    a254:	e0011980 	and	r1, r1, r0, lsl #19
    a258:	e28d000c 	add	r0, sp, #12
    a25c:	eb00080f 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a260:	e1a00004 	mov	r0, r4
    a264:	eb000a1b 	bl	cad8 <CDWHCITransferStageData::GetPID() const>
    a268:	e1a01e80 	lsl	r1, r0, #29
    a26c:	e28d000c 	add	r0, sp, #12
    a270:	eb00080a 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a274:	e28d000c 	add	r0, sp, #12
    a278:	eb0007c6 	bl	c198 <CDWHCIRegister::Write()>
    a27c:	e1a00004 	mov	r0, r4
    a280:	eb000a38 	bl	cb68 <CDWHCITransferStageData::GetDMAAddress() const>
    a284:	e3001514 	movw	r1, #1300	; 0x514
    a288:	e3431f98 	movt	r1, #16280	; 0x3f98
    a28c:	e0851001 	add	r1, r5, r1
    a290:	e2802103 	add	r2, r0, #-1073741824	; 0xc0000000
    a294:	e28d0018 	add	r0, sp, #24
    a298:	eb0007b2 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a29c:	e28d0018 	add	r0, sp, #24
    a2a0:	eb0007bc 	bl	c198 <CDWHCIRegister::Write()>
    a2a4:	e1a00004 	mov	r0, r4
    a2a8:	eb000a2e 	bl	cb68 <CDWHCITransferStageData::GetDMAAddress() const>
    a2ac:	e1a06000 	mov	r6, r0
    a2b0:	e1a00004 	mov	r0, r4
    a2b4:	eb000a3b 	bl	cba8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a2b8:	e1a01000 	mov	r1, r0
    a2bc:	e1a00006 	mov	r0, r6
    a2c0:	eb007a88 	bl	28ce8 <CleanAndInvalidateDataCacheRange>
    a2c4:	e3001504 	movw	r1, #1284	; 0x504
    a2c8:	e3431f98 	movt	r1, #16280	; 0x3f98
    a2cc:	e3a02000 	mov	r2, #0
    a2d0:	e0851001 	add	r1, r5, r1
    a2d4:	e28d0024 	add	r0, sp, #36	; 0x24
    a2d8:	eb0007a2 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a2dc:	e1a00004 	mov	r0, r4
    a2e0:	eb000a34 	bl	cbb8 <CDWHCITransferStageData::IsSplit() const>
    a2e4:	e3500000 	cmp	r0, #0
    a2e8:	1a00007b 	bne	a4dc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x324>
    a2ec:	e28d0024 	add	r0, sp, #36	; 0x24
    a2f0:	eb0007a8 	bl	c198 <CDWHCIRegister::Write()>
    a2f4:	e3a01c05 	mov	r1, #1280	; 0x500
    a2f8:	e3431f98 	movt	r1, #16280	; 0x3f98
    a2fc:	e28d0030 	add	r0, sp, #48	; 0x30
    a300:	e0851001 	add	r1, r5, r1
    a304:	eb000793 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a308:	e28d0030 	add	r0, sp, #48	; 0x30
    a30c:	eb00079a 	bl	c17c <CDWHCIRegister::Read()>
    a310:	e28d0030 	add	r0, sp, #48	; 0x30
    a314:	e3a01b3e 	mov	r1, #63488	; 0xf800
    a318:	e34f1fff 	movt	r1, #65535	; 0xffff
    a31c:	eb0007cf 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    a320:	e1a00004 	mov	r0, r4
    a324:	eb0009e7 	bl	cac8 <CDWHCITransferStageData::GetMaxPacketSize() const>
    a328:	e7ea1050 	ubfx	r1, r0, #0, #11
    a32c:	e28d0030 	add	r0, sp, #48	; 0x30
    a330:	eb0007da 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a334:	e28d0030 	add	r0, sp, #48	; 0x30
    a338:	e3e01603 	mvn	r1, #3145728	; 0x300000
    a33c:	eb0007c7 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    a340:	e28d0030 	add	r0, sp, #48	; 0x30
    a344:	e3a01601 	mov	r1, #1048576	; 0x100000
    a348:	eb0007d4 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a34c:	e1a00004 	mov	r0, r4
    a350:	eb000a00 	bl	cb58 <CDWHCITransferStageData::IsDirectionIn() const>
    a354:	e3500000 	cmp	r0, #0
    a358:	0a000057 	beq	a4bc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x304>
    a35c:	e3a01902 	mov	r1, #32768	; 0x8000
    a360:	e28d0030 	add	r0, sp, #48	; 0x30
    a364:	eb0007cd 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a368:	e1a00004 	mov	r0, r4
    a36c:	eb0009d7 	bl	cad0 <CDWHCITransferStageData::GetSpeed() const>
    a370:	e3500000 	cmp	r0, #0
    a374:	1a00004c 	bne	a4ac <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2f4>
    a378:	e3a01802 	mov	r1, #131072	; 0x20000
    a37c:	e28d0030 	add	r0, sp, #48	; 0x30
    a380:	eb0007c6 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a384:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    a388:	e28d0030 	add	r0, sp, #48	; 0x30
    a38c:	eb0007b3 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    a390:	e1a00004 	mov	r0, r4
    a394:	eb00098a 	bl	c9c4 <CDWHCITransferStageData::GetDeviceAddress() const>
    a398:	e1a01b00 	lsl	r1, r0, #22
    a39c:	e28d0030 	add	r0, sp, #48	; 0x30
    a3a0:	eb0007be 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a3a4:	e3e01703 	mvn	r1, #786432	; 0xc0000
    a3a8:	e28d0030 	add	r0, sp, #48	; 0x30
    a3ac:	eb0007ab 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    a3b0:	e1a00004 	mov	r0, r4
    a3b4:	eb000993 	bl	ca08 <CDWHCITransferStageData::GetEndpointType() const>
    a3b8:	e1a01900 	lsl	r1, r0, #18
    a3bc:	e28d0030 	add	r0, sp, #48	; 0x30
    a3c0:	eb0007b6 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a3c4:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    a3c8:	e28d0030 	add	r0, sp, #48	; 0x30
    a3cc:	eb0007a3 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    a3d0:	e1a00004 	mov	r0, r4
    a3d4:	eb0009aa 	bl	ca84 <CDWHCITransferStageData::GetEndpointNumber() const>
    a3d8:	e1a01580 	lsl	r1, r0, #11
    a3dc:	e28d0030 	add	r0, sp, #48	; 0x30
    a3e0:	eb0007ae 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a3e4:	e1a00004 	mov	r0, r4
    a3e8:	eb000a6f 	bl	cdac <CDWHCITransferStageData::GetFrameScheduler() const>
    a3ec:	e2506000 	subs	r6, r0, #0
    a3f0:	0a00000b 	beq	a424 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x26c>
    a3f4:	e5963000 	ldr	r3, [r6]
    a3f8:	e5933014 	ldr	r3, [r3, #20]
    a3fc:	e12fff33 	blx	r3
    a400:	e5963000 	ldr	r3, [r6]
    a404:	e1a00006 	mov	r0, r6
    a408:	e5933018 	ldr	r3, [r3, #24]
    a40c:	e12fff33 	blx	r3
    a410:	e3500000 	cmp	r0, #0
    a414:	1a00002c 	bne	a4cc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x314>
    a418:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    a41c:	e28d0030 	add	r0, sp, #48	; 0x30
    a420:	eb00078e 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    a424:	e300150c 	movw	r1, #1292	; 0x50c
    a428:	e3431f98 	movt	r1, #16280	; 0x3f98
    a42c:	e0851001 	add	r1, r5, r1
    a430:	e28d003c 	add	r0, sp, #60	; 0x3c
    a434:	eb000747 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a438:	e1a00004 	mov	r0, r4
    a43c:	eb000a26 	bl	ccdc <CDWHCITransferStageData::GetStatusMask() const>
    a440:	e1a01000 	mov	r1, r0
    a444:	e28d003c 	add	r0, sp, #60	; 0x3c
    a448:	eb00076e 	bl	c208 <CDWHCIRegister::Set(unsigned int)>
    a44c:	e28d003c 	add	r0, sp, #60	; 0x3c
    a450:	eb000750 	bl	c198 <CDWHCIRegister::Write()>
    a454:	e28d0030 	add	r0, sp, #48	; 0x30
    a458:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a45c:	eb00078f 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a460:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    a464:	e28d0030 	add	r0, sp, #48	; 0x30
    a468:	eb00077c 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    a46c:	e28d0030 	add	r0, sp, #48	; 0x30
    a470:	eb000748 	bl	c198 <CDWHCIRegister::Write()>
    a474:	e28d003c 	add	r0, sp, #60	; 0x3c
    a478:	eb00073e 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a47c:	e28d0030 	add	r0, sp, #48	; 0x30
    a480:	eb00073c 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a484:	e28d0024 	add	r0, sp, #36	; 0x24
    a488:	eb00073a 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a48c:	e28d0018 	add	r0, sp, #24
    a490:	eb000738 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a494:	e28d000c 	add	r0, sp, #12
    a498:	eb000736 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a49c:	e1a0000d 	mov	r0, sp
    a4a0:	eb000734 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a4a4:	e28dd048 	add	sp, sp, #72	; 0x48
    a4a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a4ac:	e3e01802 	mvn	r1, #131072	; 0x20000
    a4b0:	e28d0030 	add	r0, sp, #48	; 0x30
    a4b4:	eb000769 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    a4b8:	eaffffb1 	b	a384 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1cc>
    a4bc:	e3e01902 	mvn	r1, #32768	; 0x8000
    a4c0:	e28d0030 	add	r0, sp, #48	; 0x30
    a4c4:	eb000765 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    a4c8:	eaffffa6 	b	a368 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1b0>
    a4cc:	e3a01202 	mov	r1, #536870912	; 0x20000000
    a4d0:	e28d0030 	add	r0, sp, #48	; 0x30
    a4d4:	eb000771 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a4d8:	eaffffd1 	b	a424 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x26c>
    a4dc:	e1a00004 	mov	r0, r4
    a4e0:	eb0009df 	bl	cc64 <CDWHCITransferStageData::GetHubPortAddress() const>
    a4e4:	e1a01000 	mov	r1, r0
    a4e8:	e28d0024 	add	r0, sp, #36	; 0x24
    a4ec:	eb00076b 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a4f0:	e1a00004 	mov	r0, r4
    a4f4:	eb0009be 	bl	cbf4 <CDWHCITransferStageData::GetHubAddress() const>
    a4f8:	e1a01380 	lsl	r1, r0, #7
    a4fc:	e28d0024 	add	r0, sp, #36	; 0x24
    a500:	eb000766 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a504:	e1a00004 	mov	r0, r4
    a508:	eb0009f1 	bl	ccd4 <CDWHCITransferStageData::GetSplitPosition() const>
    a50c:	e1a01700 	lsl	r1, r0, #14
    a510:	e28d0024 	add	r0, sp, #36	; 0x24
    a514:	eb000761 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a518:	e1a00004 	mov	r0, r4
    a51c:	eb0009a7 	bl	cbc0 <CDWHCITransferStageData::IsSplitComplete() const>
    a520:	e3500000 	cmp	r0, #0
    a524:	1a00000a 	bne	a554 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x39c>
    a528:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a52c:	e28d0024 	add	r0, sp, #36	; 0x24
    a530:	eb00075a 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a534:	eaffff6c 	b	a2ec <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x134>
    a538:	e30a1930 	movw	r1, #43312	; 0xa930
    a53c:	e30a09b0 	movw	r0, #43440	; 0xa9b0
    a540:	e3401002 	movt	r1, #2
    a544:	e3400002 	movt	r0, #2
    a548:	e30022ab 	movw	r2, #683	; 0x2ab
    a54c:	eb006993 	bl	24ba0 <assertion_failed>
    a550:	eaffff23 	b	a1e4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2c>
    a554:	e3a01801 	mov	r1, #65536	; 0x10000
    a558:	e28d0024 	add	r0, sp, #36	; 0x24
    a55c:	eb00074f 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a560:	eafffff0 	b	a528 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x370>
    a564:	e30a1930 	movw	r1, #43312	; 0xa930
    a568:	e30a09a0 	movw	r0, #43424	; 0xa9a0
    a56c:	e3401002 	movt	r1, #2
    a570:	e3400002 	movt	r0, #2
    a574:	e30022a9 	movw	r2, #681	; 0x2a9
    a578:	eb006988 	bl	24ba0 <assertion_failed>
    a57c:	eaffff12 	b	a1cc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x14>

0000a580 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    a580:	e92d4070 	push	{r4, r5, r6, lr}
    a584:	e2515000 	subs	r5, r1, #0
    a588:	e24dd018 	sub	sp, sp, #24
    a58c:	e1a06000 	mov	r6, r0
    a590:	0a00003a 	beq	a680 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x100>
    a594:	e1a00005 	mov	r0, r5
    a598:	eb000846 	bl	c6b8 <CDWHCITransferStageData::GetChannelNumber() const>
    a59c:	e596300c 	ldr	r3, [r6, #12]
    a5a0:	e1500003 	cmp	r0, r3
    a5a4:	e1a04000 	mov	r4, r0
    a5a8:	2a00002d 	bcs	a664 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xe4>
    a5ac:	e30c1028 	movw	r1, #49192	; 0xc028
    a5b0:	e34011fc 	movt	r1, #508	; 0x1fc
    a5b4:	e0841001 	add	r1, r4, r1
    a5b8:	e1a0000d 	mov	r0, sp
    a5bc:	e1a04281 	lsl	r4, r1, #5
    a5c0:	e1a01004 	mov	r1, r4
    a5c4:	eb0006e3 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a5c8:	e1a0000d 	mov	r0, sp
    a5cc:	eb0006ea 	bl	c17c <CDWHCIRegister::Read()>
    a5d0:	e1a0000d 	mov	r0, sp
    a5d4:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a5d8:	eb00070e 	bl	c218 <CDWHCIRegister::IsSet(unsigned int) const>
    a5dc:	e3500000 	cmp	r0, #0
    a5e0:	1a000006 	bne	a600 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x80>
    a5e4:	e1a01005 	mov	r1, r5
    a5e8:	e1a00006 	mov	r0, r6
    a5ec:	ebfffef1 	bl	a1b8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    a5f0:	e1a0000d 	mov	r0, sp
    a5f4:	eb0006df 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a5f8:	e28dd018 	add	sp, sp, #24
    a5fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    a600:	e1a00005 	mov	r0, r5
    a604:	e3a01000 	mov	r1, #0
    a608:	eb000824 	bl	c6a0 <CDWHCITransferStageData::SetSubState(unsigned int)>
    a60c:	e1a0000d 	mov	r0, sp
    a610:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    a614:	eb000711 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    a618:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    a61c:	e1a0000d 	mov	r0, sp
    a620:	eb00071e 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    a624:	e1a0000d 	mov	r0, sp
    a628:	eb0006da 	bl	c198 <CDWHCIRegister::Write()>
    a62c:	e284100c 	add	r1, r4, #12
    a630:	e28d000c 	add	r0, sp, #12
    a634:	eb0006c7 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a638:	e3a01002 	mov	r1, #2
    a63c:	e28d000c 	add	r0, sp, #12
    a640:	eb0006f0 	bl	c208 <CDWHCIRegister::Set(unsigned int)>
    a644:	e28d000c 	add	r0, sp, #12
    a648:	eb0006d2 	bl	c198 <CDWHCIRegister::Write()>
    a64c:	e28d000c 	add	r0, sp, #12
    a650:	eb0006c8 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a654:	e1a0000d 	mov	r0, sp
    a658:	eb0006c6 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    a65c:	e28dd018 	add	sp, sp, #24
    a660:	e8bd8070 	pop	{r4, r5, r6, pc}
    a664:	e30a1930 	movw	r1, #43312	; 0xa930
    a668:	e30a09b0 	movw	r0, #43440	; 0xa9b0
    a66c:	e3401002 	movt	r1, #2
    a670:	e3400002 	movt	r0, #2
    a674:	e3a02e29 	mov	r2, #656	; 0x290
    a678:	eb006948 	bl	24ba0 <assertion_failed>
    a67c:	eaffffca 	b	a5ac <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x2c>
    a680:	e30a1930 	movw	r1, #43312	; 0xa930
    a684:	e30a09a0 	movw	r0, #43424	; 0xa9a0
    a688:	e3401002 	movt	r1, #2
    a68c:	e3400002 	movt	r0, #2
    a690:	e300228e 	movw	r2, #654	; 0x28e
    a694:	eb006941 	bl	24ba0 <assertion_failed>
    a698:	eaffffbd 	b	a594 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x14>

0000a69c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    a69c:	e92d4070 	push	{r4, r5, r6, lr}
    a6a0:	e2514000 	subs	r4, r1, #0
    a6a4:	e1a05000 	mov	r5, r0
    a6a8:	0a000022 	beq	a738 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    a6ac:	e1a00004 	mov	r0, r4
    a6b0:	eb0007f8 	bl	c698 <CDWHCITransferStageData::GetState() const>
    a6b4:	e3500003 	cmp	r0, #3
    a6b8:	0a000005 	beq	a6d4 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x38>
    a6bc:	e30a1930 	movw	r1, #43312	; 0xa930
    a6c0:	e30a09c8 	movw	r0, #43464	; 0xa9c8
    a6c4:	e3401002 	movt	r1, #2
    a6c8:	e3400002 	movt	r0, #2
    a6cc:	e3002425 	movw	r2, #1061	; 0x425
    a6d0:	eb006932 	bl	24ba0 <assertion_failed>
    a6d4:	e1a00004 	mov	r0, r4
    a6d8:	eb000936 	bl	cbb8 <CDWHCITransferStageData::IsSplit() const>
    a6dc:	e2501000 	subs	r1, r0, #0
    a6e0:	1a000005 	bne	a6fc <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x60>
    a6e4:	e1a00004 	mov	r0, r4
    a6e8:	eb0007e8 	bl	c690 <CDWHCITransferStageData::SetState(unsigned int)>
    a6ec:	e1a01004 	mov	r1, r4
    a6f0:	e1a00005 	mov	r0, r5
    a6f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    a6f8:	eaffffa0 	b	a580 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a6fc:	e1a00004 	mov	r0, r4
    a700:	e3a01001 	mov	r1, #1
    a704:	eb0007e1 	bl	c690 <CDWHCITransferStageData::SetState(unsigned int)>
    a708:	e3a01000 	mov	r1, #0
    a70c:	e1a00004 	mov	r0, r4
    a710:	eb0007d0 	bl	c658 <CDWHCITransferStageData::SetSplitComplete(int)>
    a714:	e1a00004 	mov	r0, r4
    a718:	eb0009a3 	bl	cdac <CDWHCITransferStageData::GetFrameScheduler() const>
    a71c:	e5903000 	ldr	r3, [r0]
    a720:	e5933008 	ldr	r3, [r3, #8]
    a724:	e12fff33 	blx	r3
    a728:	e1a01004 	mov	r1, r4
    a72c:	e1a00005 	mov	r0, r5
    a730:	e8bd4070 	pop	{r4, r5, r6, lr}
    a734:	eaffff91 	b	a580 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a738:	e30a1930 	movw	r1, #43312	; 0xa930
    a73c:	e30a09a0 	movw	r0, #43424	; 0xa9a0
    a740:	e3401002 	movt	r1, #2
    a744:	e3400002 	movt	r0, #2
    a748:	e3002424 	movw	r2, #1060	; 0x424
    a74c:	eb006913 	bl	24ba0 <assertion_failed>
    a750:	eaffffd5 	b	a6ac <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x10>

0000a754 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    a754:	e92d4070 	push	{r4, r5, r6, lr}
    a758:	e2525000 	subs	r5, r2, #0
    a75c:	e1a04001 	mov	r4, r1
    a760:	0a00000f 	beq	a7a4 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x50>
    a764:	e3540000 	cmp	r4, #0
    a768:	0a000003 	beq	a77c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x28>
    a76c:	e1a01004 	mov	r1, r4
    a770:	e1a00005 	mov	r0, r5
    a774:	e8bd4070 	pop	{r4, r5, r6, lr}
    a778:	eaffffc7 	b	a69c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a77c:	e30a1930 	movw	r1, #43312	; 0xa930
    a780:	e30a09fc 	movw	r0, #43516	; 0xa9fc
    a784:	e3401002 	movt	r1, #2
    a788:	e3400002 	movt	r0, #2
    a78c:	e300243e 	movw	r2, #1086	; 0x43e
    a790:	eb006902 	bl	24ba0 <assertion_failed>
    a794:	e1a01004 	mov	r1, r4
    a798:	e1a00005 	mov	r0, r5
    a79c:	e8bd4070 	pop	{r4, r5, r6, lr}
    a7a0:	eaffffbd 	b	a69c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a7a4:	e30a1930 	movw	r1, #43312	; 0xa930
    a7a8:	e30a0940 	movw	r0, #43328	; 0xa940
    a7ac:	e3401002 	movt	r1, #2
    a7b0:	e3400002 	movt	r0, #2
    a7b4:	e300243b 	movw	r2, #1083	; 0x43b
    a7b8:	eb0068f8 	bl	24ba0 <assertion_failed>
    a7bc:	eaffffe8 	b	a764 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x10>

0000a7c0 <CDWHCIDevice::AllocateChannel()>:
    a7c0:	e590c014 	ldr	ip, [r0, #20]
    a7c4:	e92d4010 	push	{r4, lr}
    a7c8:	e35c0000 	cmp	ip, #0
    a7cc:	e24dd008 	sub	sp, sp, #8
    a7d0:	e1a04000 	mov	r4, r0
    a7d4:	1a000014 	bne	a82c <CDWHCIDevice::AllocateChannel()+0x6c>
    a7d8:	e590100c 	ldr	r1, [r0, #12]
    a7dc:	e3510000 	cmp	r1, #0
    a7e0:	0a00000e 	beq	a820 <CDWHCIDevice::AllocateChannel()+0x60>
    a7e4:	e5903010 	ldr	r3, [r0, #16]
    a7e8:	e2130001 	ands	r0, r3, #1
    a7ec:	0a000025 	beq	a888 <CDWHCIDevice::AllocateChannel()+0xc8>
    a7f0:	e3a00000 	mov	r0, #0
    a7f4:	e3a03001 	mov	r3, #1
    a7f8:	ea000002 	b	a808 <CDWHCIDevice::AllocateChannel()+0x48>
    a7fc:	e5942010 	ldr	r2, [r4, #16]
    a800:	e1120003 	tst	r2, r3
    a804:	0a000013 	beq	a858 <CDWHCIDevice::AllocateChannel()+0x98>
    a808:	e2800001 	add	r0, r0, #1
    a80c:	e1a03083 	lsl	r3, r3, #1
    a810:	e1500001 	cmp	r0, r1
    a814:	3afffff8 	bcc	a7fc <CDWHCIDevice::AllocateChannel()+0x3c>
    a818:	e35c0000 	cmp	ip, #0
    a81c:	1a000017 	bne	a880 <CDWHCIDevice::AllocateChannel()+0xc0>
    a820:	e3a00010 	mov	r0, #16
    a824:	e28dd008 	add	sp, sp, #8
    a828:	e8bd8010 	pop	{r4, pc}
    a82c:	e1a0000c 	mov	r0, ip
    a830:	eb005de4 	bl	21fc8 <EnterCritical>
    a834:	e594100c 	ldr	r1, [r4, #12]
    a838:	e3510000 	cmp	r1, #0
    a83c:	0594c014 	ldreq	ip, [r4, #20]
    a840:	0afffff4 	beq	a818 <CDWHCIDevice::AllocateChannel()+0x58>
    a844:	e5943010 	ldr	r3, [r4, #16]
    a848:	e594c014 	ldr	ip, [r4, #20]
    a84c:	e2130001 	ands	r0, r3, #1
    a850:	1affffe6 	bne	a7f0 <CDWHCIDevice::AllocateChannel()+0x30>
    a854:	e3a03001 	mov	r3, #1
    a858:	e5942010 	ldr	r2, [r4, #16]
    a85c:	e35c0000 	cmp	ip, #0
    a860:	e1823003 	orr	r3, r2, r3
    a864:	e5843010 	str	r3, [r4, #16]
    a868:	0affffed 	beq	a824 <CDWHCIDevice::AllocateChannel()+0x64>
    a86c:	e58d0004 	str	r0, [sp, #4]
    a870:	eb005e02 	bl	22080 <LeaveCritical>
    a874:	e59d0004 	ldr	r0, [sp, #4]
    a878:	e28dd008 	add	sp, sp, #8
    a87c:	e8bd8010 	pop	{r4, pc}
    a880:	eb005dfe 	bl	22080 <LeaveCritical>
    a884:	eaffffe5 	b	a820 <CDWHCIDevice::AllocateChannel()+0x60>
    a888:	e5943010 	ldr	r3, [r4, #16]
    a88c:	e3833001 	orr	r3, r3, #1
    a890:	e5843010 	str	r3, [r4, #16]
    a894:	eaffffe2 	b	a824 <CDWHCIDevice::AllocateChannel()+0x64>

0000a898 <CDWHCIDevice::FreeChannel(unsigned int)>:
    a898:	e590300c 	ldr	r3, [r0, #12]
    a89c:	e92d4070 	push	{r4, r5, r6, lr}
    a8a0:	e1530001 	cmp	r3, r1
    a8a4:	e1a04000 	mov	r4, r0
    a8a8:	e1a06001 	mov	r6, r1
    a8ac:	9a000018 	bls	a914 <CDWHCIDevice::FreeChannel(unsigned int)+0x7c>
    a8b0:	e5940014 	ldr	r0, [r4, #20]
    a8b4:	e3a05001 	mov	r5, #1
    a8b8:	e1a05615 	lsl	r5, r5, r6
    a8bc:	e3500000 	cmp	r0, #0
    a8c0:	1a000011 	bne	a90c <CDWHCIDevice::FreeChannel(unsigned int)+0x74>
    a8c4:	e5943010 	ldr	r3, [r4, #16]
    a8c8:	e1150003 	tst	r5, r3
    a8cc:	0a000007 	beq	a8f0 <CDWHCIDevice::FreeChannel(unsigned int)+0x58>
    a8d0:	e5942014 	ldr	r2, [r4, #20]
    a8d4:	e5943010 	ldr	r3, [r4, #16]
    a8d8:	e3520000 	cmp	r2, #0
    a8dc:	e1c35005 	bic	r5, r3, r5
    a8e0:	e5845010 	str	r5, [r4, #16]
    a8e4:	08bd8070 	popeq	{r4, r5, r6, pc}
    a8e8:	e8bd4070 	pop	{r4, r5, r6, lr}
    a8ec:	ea005de3 	b	22080 <LeaveCritical>
    a8f0:	e30a1930 	movw	r1, #43312	; 0xa930
    a8f4:	e30a0a08 	movw	r0, #43528	; 0xaa08
    a8f8:	e3401002 	movt	r1, #2
    a8fc:	e3400002 	movt	r0, #2
    a900:	e3002462 	movw	r2, #1122	; 0x462
    a904:	eb0068a5 	bl	24ba0 <assertion_failed>
    a908:	eafffff0 	b	a8d0 <CDWHCIDevice::FreeChannel(unsigned int)+0x38>
    a90c:	eb005dad 	bl	21fc8 <EnterCritical>
    a910:	eaffffeb 	b	a8c4 <CDWHCIDevice::FreeChannel(unsigned int)+0x2c>
    a914:	e30a1930 	movw	r1, #43312	; 0xa930
    a918:	e30a09b0 	movw	r0, #43440	; 0xa9b0
    a91c:	e3401002 	movt	r1, #2
    a920:	e3400002 	movt	r0, #2
    a924:	e300245d 	movw	r2, #1117	; 0x45d
    a928:	eb00689c 	bl	24ba0 <assertion_failed>
    a92c:	eaffffdf 	b	a8b0 <CDWHCIDevice::FreeChannel(unsigned int)+0x18>

0000a930 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)>:
    a930:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a934:	e2517000 	subs	r7, r1, #0
    a938:	e24dd008 	sub	sp, sp, #8
    a93c:	e1a04000 	mov	r4, r0
    a940:	e1a08002 	mov	r8, r2
    a944:	e1a09003 	mov	r9, r3
    a948:	0a000048 	beq	aa70 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x140>
    a94c:	e1a00004 	mov	r0, r4
    a950:	ebffff9a 	bl	a7c0 <CDWHCIDevice::AllocateChannel()>
    a954:	e594300c 	ldr	r3, [r4, #12]
    a958:	e1500003 	cmp	r0, r3
    a95c:	e1a05000 	mov	r5, r0
    a960:	23a07000 	movcs	r7, #0
    a964:	3a000002 	bcc	a974 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x44>
    a968:	e1a00007 	mov	r0, r7
    a96c:	e28dd008 	add	sp, sp, #8
    a970:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a974:	e3a00054 	mov	r0, #84	; 0x54
    a978:	e084a105 	add	sl, r4, r5, lsl #2
    a97c:	eb005d85 	bl	21f98 <operator new(unsigned int)>
    a980:	e1a03008 	mov	r3, r8
    a984:	e58d9000 	str	r9, [sp]
    a988:	e1a02007 	mov	r2, r7
    a98c:	e1a01005 	mov	r1, r5
    a990:	e1a06000 	mov	r6, r0
    a994:	eb00075d 	bl	c710 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)>
    a998:	e59a3018 	ldr	r3, [sl, #24]
    a99c:	e3530000 	cmp	r3, #0
    a9a0:	0a000005 	beq	a9bc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x8c>
    a9a4:	e30a1930 	movw	r1, #43312	; 0xa930
    a9a8:	e30a0a38 	movw	r0, #43576	; 0xaa38
    a9ac:	e3401002 	movt	r1, #2
    a9b0:	e3400002 	movt	r0, #2
    a9b4:	e300226b 	movw	r2, #619	; 0x26b
    a9b8:	eb006878 	bl	24ba0 <assertion_failed>
    a9bc:	e1a01005 	mov	r1, r5
    a9c0:	e1a00004 	mov	r0, r4
    a9c4:	e58a6018 	str	r6, [sl, #24]
    a9c8:	ebfffdc0 	bl	a0d0 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    a9cc:	e1a00006 	mov	r0, r6
    a9d0:	eb000878 	bl	cbb8 <CDWHCITransferStageData::IsSplit() const>
    a9d4:	e2501000 	subs	r1, r0, #0
    a9d8:	e1a00006 	mov	r0, r6
    a9dc:	1a000007 	bne	aa00 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0xd0>
    a9e0:	eb00072a 	bl	c690 <CDWHCITransferStageData::SetState(unsigned int)>
    a9e4:	e1a00004 	mov	r0, r4
    a9e8:	e1a01006 	mov	r1, r6
    a9ec:	ebfffee3 	bl	a580 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a9f0:	e3a07001 	mov	r7, #1
    a9f4:	e1a00007 	mov	r0, r7
    a9f8:	e28dd008 	add	sp, sp, #8
    a9fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    aa00:	eb00072a 	bl	c6b0 <CDWHCITransferStageData::BeginSplitCycle()>
    aa04:	e2507000 	subs	r7, r0, #0
    aa08:	1a00000c 	bne	aa40 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x110>
    aa0c:	e1a01005 	mov	r1, r5
    aa10:	e1a00004 	mov	r0, r4
    aa14:	ebfffdca 	bl	a144 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    aa18:	e1a00006 	mov	r0, r6
    aa1c:	eb00068b 	bl	c450 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    aa20:	e1a00006 	mov	r0, r6
    aa24:	e3a01054 	mov	r1, #84	; 0x54
    aa28:	eb005d5e 	bl	21fa8 <operator delete(void*, unsigned int)>
    aa2c:	e58a7018 	str	r7, [sl, #24]
    aa30:	e1a01005 	mov	r1, r5
    aa34:	e1a00004 	mov	r0, r4
    aa38:	ebffff96 	bl	a898 <CDWHCIDevice::FreeChannel(unsigned int)>
    aa3c:	eaffffc9 	b	a968 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x38>
    aa40:	e1a00006 	mov	r0, r6
    aa44:	e3a01001 	mov	r1, #1
    aa48:	eb000710 	bl	c690 <CDWHCITransferStageData::SetState(unsigned int)>
    aa4c:	e3a01000 	mov	r1, #0
    aa50:	e1a00006 	mov	r0, r6
    aa54:	eb0006ff 	bl	c658 <CDWHCITransferStageData::SetSplitComplete(int)>
    aa58:	e1a00006 	mov	r0, r6
    aa5c:	eb0008d2 	bl	cdac <CDWHCITransferStageData::GetFrameScheduler() const>
    aa60:	e5903000 	ldr	r3, [r0]
    aa64:	e5933008 	ldr	r3, [r3, #8]
    aa68:	e12fff33 	blx	r3
    aa6c:	eaffffdc 	b	a9e4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0xb4>
    aa70:	e30a1930 	movw	r1, #43312	; 0xa930
    aa74:	e30a0a2c 	movw	r0, #43564	; 0xaa2c
    aa78:	e3401002 	movt	r1, #2
    aa7c:	e3400002 	movt	r0, #2
    aa80:	e300225f 	movw	r2, #607	; 0x25f
    aa84:	eb006845 	bl	24ba0 <assertion_failed>
    aa88:	eaffffaf 	b	a94c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x1c>

0000aa8c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)>:
    aa8c:	e92d4070 	push	{r4, r5, r6, lr}
    aa90:	e2514000 	subs	r4, r1, #0
    aa94:	e1a05000 	mov	r5, r0
    aa98:	0a000025 	beq	ab34 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)+0xa8>
    aa9c:	e1a00004 	mov	r0, r4
    aaa0:	eb000e58 	bl	e408 <CUSBRequest::GetEndpoint() const>
    aaa4:	eb000d47 	bl	dfc8 <CUSBEndpoint::GetType() const>
    aaa8:	e3500001 	cmp	r0, #1
    aaac:	0a00000a 	beq	aadc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)+0x50>
    aab0:	e1a00004 	mov	r0, r4
    aab4:	eb000e53 	bl	e408 <CUSBRequest::GetEndpoint() const>
    aab8:	eb000d42 	bl	dfc8 <CUSBEndpoint::GetType() const>
    aabc:	e3500002 	cmp	r0, #2
    aac0:	0a000005 	beq	aadc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)+0x50>
    aac4:	e30a1930 	movw	r1, #43312	; 0xa930
    aac8:	e30a0a54 	movw	r0, #43604	; 0xaa54
    aacc:	e3401002 	movt	r1, #2
    aad0:	e3400002 	movt	r0, #2
    aad4:	e3a020dc 	mov	r2, #220	; 0xdc
    aad8:	eb006830 	bl	24ba0 <assertion_failed>
    aadc:	e1a00004 	mov	r0, r4
    aae0:	eb000e96 	bl	e540 <CUSBRequest::GetBufLen() const>
    aae4:	e3500000 	cmp	r0, #0
    aae8:	1a000005 	bne	ab04 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)+0x78>
    aaec:	e30a1930 	movw	r1, #43312	; 0xa930
    aaf0:	e30a0ac8 	movw	r0, #43720	; 0xaac8
    aaf4:	e3401002 	movt	r1, #2
    aaf8:	e3400002 	movt	r0, #2
    aafc:	e3a020dd 	mov	r2, #221	; 0xdd
    ab00:	eb006826 	bl	24ba0 <assertion_failed>
    ab04:	e3a01000 	mov	r1, #0
    ab08:	e1a00004 	mov	r0, r4
    ab0c:	eb000e4d 	bl	e448 <CUSBRequest::SetStatus(int)>
    ab10:	e1a00004 	mov	r0, r4
    ab14:	eb000e3b 	bl	e408 <CUSBRequest::GetEndpoint() const>
    ab18:	eb000d2c 	bl	dfd0 <CUSBEndpoint::IsDirectionIn() const>
    ab1c:	e1a01004 	mov	r1, r4
    ab20:	e3a03000 	mov	r3, #0
    ab24:	e1a02000 	mov	r2, r0
    ab28:	e1a00005 	mov	r0, r5
    ab2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    ab30:	eaffff7e 	b	a930 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)>
    ab34:	e30a1930 	movw	r1, #43312	; 0xa930
    ab38:	e30a0a2c 	movw	r0, #43564	; 0xaa2c
    ab3c:	e3401002 	movt	r1, #2
    ab40:	e3400002 	movt	r0, #2
    ab44:	e3a020da 	mov	r2, #218	; 0xda
    ab48:	eb006814 	bl	24ba0 <assertion_failed>
    ab4c:	eaffffd2 	b	aa9c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)+0x10>

0000ab50 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    ab50:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ab54:	e0807101 	add	r7, r0, r1, lsl #2
    ab58:	e24dd020 	sub	sp, sp, #32
    ab5c:	e1a06001 	mov	r6, r1
    ab60:	e5974018 	ldr	r4, [r7, #24]
    ab64:	e1a05000 	mov	r5, r0
    ab68:	e3540000 	cmp	r4, #0
    ab6c:	0a0000d4 	beq	aec4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x374>
    ab70:	e1a00004 	mov	r0, r4
    ab74:	eb00087c 	bl	cd6c <CDWHCITransferStageData::GetURB() const>
    ab78:	e2508000 	subs	r8, r0, #0
    ab7c:	0a0000d7 	beq	aee0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x390>
    ab80:	e1a00004 	mov	r0, r4
    ab84:	eb0006c7 	bl	c6a8 <CDWHCITransferStageData::GetSubState() const>
    ab88:	e3500000 	cmp	r0, #0
    ab8c:	0a000061 	beq	ad18 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1c8>
    ab90:	e3500001 	cmp	r0, #1
    ab94:	0a000030 	beq	ac5c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x10c>
    ab98:	e30a1930 	movw	r1, #43312	; 0xa930
    ab9c:	e30b0138 	movw	r0, #45368	; 0xb138
    aba0:	e3401002 	movt	r1, #2
    aba4:	e3400002 	movt	r0, #2
    aba8:	e3a02fce 	mov	r2, #824	; 0x338
    abac:	eb0067fb 	bl	24ba0 <assertion_failed>
    abb0:	e1a00004 	mov	r0, r4
    abb4:	eb0006b7 	bl	c698 <CDWHCITransferStageData::GetState() const>
    abb8:	e3500001 	cmp	r0, #1
    abbc:	e1a09000 	mov	r9, r0
    abc0:	0a00007b 	beq	adb4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x264>
    abc4:	3a00006c 	bcc	ad7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x22c>
    abc8:	e3500002 	cmp	r0, #2
    abcc:	1a000056 	bne	ad2c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1dc>
    abd0:	e1a00004 	mov	r0, r4
    abd4:	eb00084b 	bl	cd08 <CDWHCITransferStageData::GetTransactionStatus() const>
    abd8:	e300378c 	movw	r3, #1932	; 0x78c
    abdc:	e1100003 	tst	r0, r3
    abe0:	e1a09000 	mov	r9, r0
    abe4:	0a000081 	beq	adf0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x2a0>
    abe8:	eb00696e 	bl	251a8 <CLogger::Get()>
    abec:	e59f1418 	ldr	r1, [pc, #1048]	; b00c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4bc>
    abf0:	e58d9000 	str	r9, [sp]
    abf4:	e30a3b58 	movw	r3, #43864	; 0xab58
    abf8:	e3a02001 	mov	r2, #1
    abfc:	e3403002 	movt	r3, #2
    ac00:	eb006a45 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ac04:	e3a01000 	mov	r1, #0
    ac08:	e1a00008 	mov	r0, r8
    ac0c:	eb000e0d 	bl	e448 <CUSBRequest::SetStatus(int)>
    ac10:	e1a01006 	mov	r1, r6
    ac14:	e1a00005 	mov	r0, r5
    ac18:	ebfffd49 	bl	a144 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ac1c:	e3540000 	cmp	r4, #0
    ac20:	0a000004 	beq	ac38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe8>
    ac24:	e1a00004 	mov	r0, r4
    ac28:	eb000608 	bl	c450 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ac2c:	e1a00004 	mov	r0, r4
    ac30:	e3a01054 	mov	r1, #84	; 0x54
    ac34:	eb005cdb 	bl	21fa8 <operator delete(void*, unsigned int)>
    ac38:	e3a03000 	mov	r3, #0
    ac3c:	e1a01006 	mov	r1, r6
    ac40:	e1a00005 	mov	r0, r5
    ac44:	e5873018 	str	r3, [r7, #24]
    ac48:	ebffff12 	bl	a898 <CDWHCIDevice::FreeChannel(unsigned int)>
    ac4c:	e1a00008 	mov	r0, r8
    ac50:	eb000e47 	bl	e574 <CUSBRequest::CallCompletionRoutine()>
    ac54:	e28dd020 	add	sp, sp, #32
    ac58:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ac5c:	e1a00004 	mov	r0, r4
    ac60:	eb0007c0 	bl	cb68 <CDWHCITransferStageData::GetDMAAddress() const>
    ac64:	e1a09000 	mov	r9, r0
    ac68:	e1a00004 	mov	r0, r4
    ac6c:	eb0007cd 	bl	cba8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    ac70:	e1a01000 	mov	r1, r0
    ac74:	e1a00009 	mov	r0, r9
    ac78:	eb00781a 	bl	28ce8 <CleanAndInvalidateDataCacheRange>
    ac7c:	e1a09286 	lsl	r9, r6, #5
    ac80:	e3a01e51 	mov	r1, #1296	; 0x510
    ac84:	e3431f98 	movt	r1, #16280	; 0x3f98
    ac88:	e0891001 	add	r1, r9, r1
    ac8c:	e28d0008 	add	r0, sp, #8
    ac90:	eb000530 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ac94:	e28d0008 	add	r0, sp, #8
    ac98:	eb000537 	bl	c17c <CDWHCIRegister::Read()>
    ac9c:	e3001508 	movw	r1, #1288	; 0x508
    aca0:	e3431f98 	movt	r1, #16280	; 0x3f98
    aca4:	e28d0014 	add	r0, sp, #20
    aca8:	e0891001 	add	r1, r9, r1
    acac:	eb000529 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    acb0:	e28d0014 	add	r0, sp, #20
    acb4:	eb000530 	bl	c17c <CDWHCIRegister::Read()>
    acb8:	e3500002 	cmp	r0, #2
    acbc:	0a00008e 	beq	aefc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3ac>
    acc0:	e1a00004 	mov	r0, r4
    acc4:	eb00067d 	bl	c6c0 <CDWHCITransferStageData::IsPeriodic() const>
    acc8:	e3500000 	cmp	r0, #0
    accc:	1a00001e 	bne	ad4c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1fc>
    acd0:	e28d0014 	add	r0, sp, #20
    acd4:	eb000528 	bl	c17c <CDWHCIRegister::Read()>
    acd8:	e1a09000 	mov	r9, r0
    acdc:	e28d0008 	add	r0, sp, #8
    ace0:	eb00053b 	bl	c1d4 <CDWHCIRegister::Get() const>
    ace4:	e1a0a000 	mov	sl, r0
    ace8:	e28d0008 	add	r0, sp, #8
    acec:	eb000538 	bl	c1d4 <CDWHCIRegister::Get() const>
    acf0:	e7e929da 	ubfx	r2, sl, #19, #10
    acf4:	e1a01009 	mov	r1, r9
    acf8:	e7f23050 	ubfx	r3, r0, #0, #19
    acfc:	e1a00004 	mov	r0, r4
    ad00:	eb0005e3 	bl	c494 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    ad04:	e28d0014 	add	r0, sp, #20
    ad08:	eb00051a 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    ad0c:	e28d0008 	add	r0, sp, #8
    ad10:	eb000518 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    ad14:	eaffffa5 	b	abb0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x60>
    ad18:	e1a01004 	mov	r1, r4
    ad1c:	e1a00005 	mov	r0, r5
    ad20:	ebfffd24 	bl	a1b8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    ad24:	e28dd020 	add	sp, sp, #32
    ad28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ad2c:	e30023de 	movw	r2, #990	; 0x3de
    ad30:	e30a1930 	movw	r1, #43312	; 0xa930
    ad34:	e30b0138 	movw	r0, #45368	; 0xb138
    ad38:	e3401002 	movt	r1, #2
    ad3c:	e3400002 	movt	r0, #2
    ad40:	eb006796 	bl	24ba0 <assertion_failed>
    ad44:	e28dd020 	add	sp, sp, #32
    ad48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ad4c:	e28d0008 	add	r0, sp, #8
    ad50:	eb00051f 	bl	c1d4 <CDWHCIRegister::Get() const>
    ad54:	e7e10ed0 	ubfx	r0, r0, #29, #2
    ad58:	e3500003 	cmp	r0, #3
    ad5c:	1affffdb 	bne	acd0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x180>
    ad60:	e30a1930 	movw	r1, #43312	; 0xa930
    ad64:	e30a0ae0 	movw	r0, #43744	; 0xaae0
    ad68:	e3401002 	movt	r1, #2
    ad6c:	e3400002 	movt	r0, #2
    ad70:	e3a02e33 	mov	r2, #816	; 0x330
    ad74:	eb006789 	bl	24ba0 <assertion_failed>
    ad78:	eaffffd4 	b	acd0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x180>
    ad7c:	e1a00004 	mov	r0, r4
    ad80:	eb0007e0 	bl	cd08 <CDWHCITransferStageData::GetTransactionStatus() const>
    ad84:	e300378c 	movw	r3, #1932	; 0x78c
    ad88:	e1100003 	tst	r0, r3
    ad8c:	e1a09000 	mov	r9, r0
    ad90:	1a00008c 	bne	afc8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x478>
    ad94:	e3100050 	tst	r0, #80	; 0x50
    ad98:	1a000072 	bne	af68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x418>
    ad9c:	e1a00004 	mov	r0, r4
    ada0:	eb00076e 	bl	cb60 <CDWHCITransferStageData::IsStatusStage() const>
    ada4:	e3500000 	cmp	r0, #0
    ada8:	0a000091 	beq	aff4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4a4>
    adac:	e3a01001 	mov	r1, #1
    adb0:	eaffff94 	b	ac08 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb8>
    adb4:	e1a00004 	mov	r0, r4
    adb8:	eb0007d2 	bl	cd08 <CDWHCITransferStageData::GetTransactionStatus() const>
    adbc:	e30037dc 	movw	r3, #2012	; 0x7dc
    adc0:	e1100003 	tst	r0, r3
    adc4:	e1a0a000 	mov	sl, r0
    adc8:	0a000030 	beq	ae90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x340>
    adcc:	eb0068f5 	bl	251a8 <CLogger::Get()>
    add0:	e59f1234 	ldr	r1, [pc, #564]	; b00c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4bc>
    add4:	e58da000 	str	sl, [sp]
    add8:	e1a02009 	mov	r2, r9
    addc:	e30a3b58 	movw	r3, #43864	; 0xab58
    ade0:	e3403002 	movt	r3, #2
    ade4:	eb0069cc 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ade8:	e3a01000 	mov	r1, #0
    adec:	eaffff85 	b	ac08 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb8>
    adf0:	e1a00004 	mov	r0, r4
    adf4:	eb0007ec 	bl	cdac <CDWHCITransferStageData::GetFrameScheduler() const>
    adf8:	e1a01009 	mov	r1, r9
    adfc:	e5903000 	ldr	r3, [r0]
    ae00:	e5933010 	ldr	r3, [r3, #16]
    ae04:	e12fff33 	blx	r3
    ae08:	e1a00004 	mov	r0, r4
    ae0c:	eb0007e6 	bl	cdac <CDWHCITransferStageData::GetFrameScheduler() const>
    ae10:	e5903000 	ldr	r3, [r0]
    ae14:	e593300c 	ldr	r3, [r3, #12]
    ae18:	e12fff33 	blx	r3
    ae1c:	e3500000 	cmp	r0, #0
    ae20:	1a000016 	bne	ae80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x330>
    ae24:	e1a00004 	mov	r0, r4
    ae28:	eb0007c6 	bl	cd48 <CDWHCITransferStageData::IsStageComplete() const>
    ae2c:	e3500000 	cmp	r0, #0
    ae30:	1a000039 	bne	af1c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3cc>
    ae34:	e1a00004 	mov	r0, r4
    ae38:	eb00061c 	bl	c6b0 <CDWHCITransferStageData::BeginSplitCycle()>
    ae3c:	e2501000 	subs	r1, r0, #0
    ae40:	0affff70 	beq	ac08 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb8>
    ae44:	e1a00004 	mov	r0, r4
    ae48:	eb00061c 	bl	c6c0 <CDWHCITransferStageData::IsPeriodic() const>
    ae4c:	e2506000 	subs	r6, r0, #0
    ae50:	1a000048 	bne	af78 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x428>
    ae54:	e3a01001 	mov	r1, #1
    ae58:	e1a00004 	mov	r0, r4
    ae5c:	eb00060b 	bl	c690 <CDWHCITransferStageData::SetState(unsigned int)>
    ae60:	e1a01006 	mov	r1, r6
    ae64:	e1a00004 	mov	r0, r4
    ae68:	eb0005fa 	bl	c658 <CDWHCITransferStageData::SetSplitComplete(int)>
    ae6c:	e1a00004 	mov	r0, r4
    ae70:	eb0007cd 	bl	cdac <CDWHCITransferStageData::GetFrameScheduler() const>
    ae74:	e5903000 	ldr	r3, [r0]
    ae78:	e5933008 	ldr	r3, [r3, #8]
    ae7c:	e12fff33 	blx	r3
    ae80:	e1a01004 	mov	r1, r4
    ae84:	e1a00005 	mov	r0, r5
    ae88:	ebfffdbc 	bl	a580 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    ae8c:	eaffffa4 	b	ad24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1d4>
    ae90:	e1a00004 	mov	r0, r4
    ae94:	eb0007c4 	bl	cdac <CDWHCITransferStageData::GetFrameScheduler() const>
    ae98:	e1a0100a 	mov	r1, sl
    ae9c:	e5903000 	ldr	r3, [r0]
    aea0:	e5933010 	ldr	r3, [r3, #16]
    aea4:	e12fff33 	blx	r3
    aea8:	e1a00004 	mov	r0, r4
    aeac:	e3a01002 	mov	r1, #2
    aeb0:	eb0005f6 	bl	c690 <CDWHCITransferStageData::SetState(unsigned int)>
    aeb4:	e1a01009 	mov	r1, r9
    aeb8:	e1a00004 	mov	r0, r4
    aebc:	eb0005e5 	bl	c658 <CDWHCITransferStageData::SetSplitComplete(int)>
    aec0:	eaffffd0 	b	ae08 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x2b8>
    aec4:	e30a1930 	movw	r1, #43312	; 0xa930
    aec8:	e30a09a0 	movw	r0, #43424	; 0xa9a0
    aecc:	e3401002 	movt	r1, #2
    aed0:	e3400002 	movt	r0, #2
    aed4:	e3002315 	movw	r2, #789	; 0x315
    aed8:	eb006730 	bl	24ba0 <assertion_failed>
    aedc:	eaffff23 	b	ab70 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x20>
    aee0:	e30a1930 	movw	r1, #43312	; 0xa930
    aee4:	e30a0a2c 	movw	r0, #43564	; 0xaa2c
    aee8:	e3401002 	movt	r1, #2
    aeec:	e3400002 	movt	r0, #2
    aef0:	e3002317 	movw	r2, #791	; 0x317
    aef4:	eb006729 	bl	24ba0 <assertion_failed>
    aef8:	eaffff20 	b	ab80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x30>
    aefc:	e1a01004 	mov	r1, r4
    af00:	e1a00005 	mov	r0, r5
    af04:	ebfffd9d 	bl	a580 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    af08:	e28d0014 	add	r0, sp, #20
    af0c:	eb000499 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    af10:	e28d0008 	add	r0, sp, #8
    af14:	eb000497 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    af18:	eaffff81 	b	ad24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1d4>
    af1c:	e1a01006 	mov	r1, r6
    af20:	e1a00005 	mov	r0, r5
    af24:	ebfffc86 	bl	a144 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    af28:	e1a00004 	mov	r0, r4
    af2c:	eb00070b 	bl	cb60 <CDWHCITransferStageData::IsStatusStage() const>
    af30:	e3500000 	cmp	r0, #0
    af34:	0a000005 	beq	af50 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x400>
    af38:	e3a01001 	mov	r1, #1
    af3c:	e1a00008 	mov	r0, r8
    af40:	eb000d40 	bl	e448 <CUSBRequest::SetStatus(int)>
    af44:	e3540000 	cmp	r4, #0
    af48:	1affff35 	bne	ac24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xd4>
    af4c:	eaffff39 	b	ac38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe8>
    af50:	e1a00004 	mov	r0, r4
    af54:	eb00077f 	bl	cd58 <CDWHCITransferStageData::GetResultLen() const>
    af58:	e1a01000 	mov	r1, r0
    af5c:	e1a00008 	mov	r0, r8
    af60:	eb000d3a 	bl	e450 <CUSBRequest::SetResultLen(unsigned int)>
    af64:	eafffff3 	b	af38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3e8>
    af68:	e1a00004 	mov	r0, r4
    af6c:	eb0005d3 	bl	c6c0 <CDWHCITransferStageData::IsPeriodic() const>
    af70:	e3500000 	cmp	r0, #0
    af74:	0affff88 	beq	ad9c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x24c>
    af78:	e3a01003 	mov	r1, #3
    af7c:	e1a00004 	mov	r0, r4
    af80:	eb0005c2 	bl	c690 <CDWHCITransferStageData::SetState(unsigned int)>
    af84:	e1a00008 	mov	r0, r8
    af88:	eb000d1e 	bl	e408 <CUSBRequest::GetEndpoint() const>
    af8c:	eb000c15 	bl	dfe8 <CUSBEndpoint::GetInterval() const>
    af90:	e3a01064 	mov	r1, #100	; 0x64
    af94:	e1a03004 	mov	r3, r4
    af98:	e304cdd3 	movw	ip, #19923	; 0x4dd3
    af9c:	e341c062 	movt	ip, #4194	; 0x1062
    afa0:	e595e008 	ldr	lr, [r5, #8]
    afa4:	e58d5000 	str	r5, [sp]
    afa8:	e30a2754 	movw	r2, #42836	; 0xa754
    afac:	e3402000 	movt	r2, #0
    afb0:	e0040091 	mul	r4, r1, r0
    afb4:	e1a0000e 	mov	r0, lr
    afb8:	e0854c94 	umull	r4, r5, r4, ip
    afbc:	e1a01325 	lsr	r1, r5, #6
    afc0:	eb005d93 	bl	22614 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    afc4:	eaffff56 	b	ad24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1d4>
    afc8:	eb006876 	bl	251a8 <CLogger::Get()>
    afcc:	e58d9000 	str	r9, [sp]
    afd0:	e3a02001 	mov	r2, #1
    afd4:	e59f1030 	ldr	r1, [pc, #48]	; b00c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4bc>
    afd8:	e30a3b58 	movw	r3, #43864	; 0xab58
    afdc:	e3403002 	movt	r3, #2
    afe0:	eb00694d 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    afe4:	e3a01000 	mov	r1, #0
    afe8:	e1a00008 	mov	r0, r8
    afec:	eb000d15 	bl	e448 <CUSBRequest::SetStatus(int)>
    aff0:	eaffff06 	b	ac10 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xc0>
    aff4:	e1a00004 	mov	r0, r4
    aff8:	eb000756 	bl	cd58 <CDWHCITransferStageData::GetResultLen() const>
    affc:	e1a01000 	mov	r1, r0
    b000:	e1a00008 	mov	r0, r8
    b004:	eb000d11 	bl	e450 <CUSBRequest::SetResultLen(unsigned int)>
    b008:	eaffff67 	b	adac <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x25c>
    b00c:	0002a924 	.word	0x0002a924

0000b010 <CDWHCIDevice::InterruptHandler()>:
    b010:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b014:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b018:	e1a07000 	mov	r7, r0
    b01c:	e3a01014 	mov	r1, #20
    b020:	e28d0004 	add	r0, sp, #4
    b024:	e3431f98 	movt	r1, #16280	; 0x3f98
    b028:	eb00044a 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b02c:	e28d0004 	add	r0, sp, #4
    b030:	eb000451 	bl	c17c <CDWHCIRegister::Read()>
    b034:	e28d0004 	add	r0, sp, #4
    b038:	eb000465 	bl	c1d4 <CDWHCIRegister::Get() const>
    b03c:	e3100402 	tst	r0, #33554432	; 0x2000000
    b040:	1a000005 	bne	b05c <CDWHCIDevice::InterruptHandler()+0x4c>
    b044:	e28d0004 	add	r0, sp, #4
    b048:	eb000452 	bl	c198 <CDWHCIRegister::Write()>
    b04c:	e28d0004 	add	r0, sp, #4
    b050:	eb000448 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    b054:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b058:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b05c:	e3001414 	movw	r1, #1044	; 0x414
    b060:	e28d0010 	add	r0, sp, #16
    b064:	e3431f98 	movt	r1, #16280	; 0x3f98
    b068:	eb00043a 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b06c:	e28d0010 	add	r0, sp, #16
    b070:	eb000441 	bl	c17c <CDWHCIRegister::Read()>
    b074:	e28d0010 	add	r0, sp, #16
    b078:	eb000446 	bl	c198 <CDWHCIRegister::Write()>
    b07c:	e597300c 	ldr	r3, [r7, #12]
    b080:	e3530000 	cmp	r3, #0
    b084:	1300650c 	movwne	r6, #1292	; 0x50c
    b088:	13a04000 	movne	r4, #0
    b08c:	13436f98 	movtne	r6, #16280	; 0x3f98
    b090:	13a05001 	movne	r5, #1
    b094:	1a000005 	bne	b0b0 <CDWHCIDevice::InterruptHandler()+0xa0>
    b098:	ea000015 	b	b0f4 <CDWHCIDevice::InterruptHandler()+0xe4>
    b09c:	e597300c 	ldr	r3, [r7, #12]
    b0a0:	e2844001 	add	r4, r4, #1
    b0a4:	e2866020 	add	r6, r6, #32
    b0a8:	e1530004 	cmp	r3, r4
    b0ac:	9a000010 	bls	b0f4 <CDWHCIDevice::InterruptHandler()+0xe4>
    b0b0:	e28d0010 	add	r0, sp, #16
    b0b4:	eb000446 	bl	c1d4 <CDWHCIRegister::Get() const>
    b0b8:	e1100005 	tst	r0, r5
    b0bc:	e1a05085 	lsl	r5, r5, #1
    b0c0:	0afffff5 	beq	b09c <CDWHCIDevice::InterruptHandler()+0x8c>
    b0c4:	e3a02000 	mov	r2, #0
    b0c8:	e1a01006 	mov	r1, r6
    b0cc:	e28d001c 	add	r0, sp, #28
    b0d0:	eb000424 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b0d4:	e28d001c 	add	r0, sp, #28
    b0d8:	eb00042e 	bl	c198 <CDWHCIRegister::Write()>
    b0dc:	e1a00007 	mov	r0, r7
    b0e0:	e1a01004 	mov	r1, r4
    b0e4:	ebfffe99 	bl	ab50 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>
    b0e8:	e28d001c 	add	r0, sp, #28
    b0ec:	eb000421 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    b0f0:	eaffffe9 	b	b09c <CDWHCIDevice::InterruptHandler()+0x8c>
    b0f4:	e28d0010 	add	r0, sp, #16
    b0f8:	eb00041e 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    b0fc:	eaffffd0 	b	b044 <CDWHCIDevice::InterruptHandler()+0x34>

0000b100 <CDWHCIDevice::InterruptStub(void*)>:
    b100:	e92d4010 	push	{r4, lr}
    b104:	e2504000 	subs	r4, r0, #0
    b108:	0a000002 	beq	b118 <CDWHCIDevice::InterruptStub(void*)+0x18>
    b10c:	e1a00004 	mov	r0, r4
    b110:	e8bd4010 	pop	{r4, lr}
    b114:	eaffffbd 	b	b010 <CDWHCIDevice::InterruptHandler()>
    b118:	e30a1930 	movw	r1, #43312	; 0xa930
    b11c:	e30a0940 	movw	r0, #43328	; 0xa940
    b120:	e3401002 	movt	r1, #2
    b124:	e3400002 	movt	r0, #2
    b128:	e300241b 	movw	r2, #1051	; 0x41b
    b12c:	eb00669b 	bl	24ba0 <assertion_failed>
    b130:	e1a00004 	mov	r0, r4
    b134:	e8bd4010 	pop	{r4, lr}
    b138:	eaffffb4 	b	b010 <CDWHCIDevice::InterruptHandler()>

0000b13c <CDWHCIDevice::AllocateWaitBlock()>:
    b13c:	e92d4070 	push	{r4, r5, r6, lr}
    b140:	e1a05000 	mov	r5, r0
    b144:	e59000a0 	ldr	r0, [r0, #160]	; 0xa0
    b148:	e3500000 	cmp	r0, #0
    b14c:	1a000014 	bne	b1a4 <CDWHCIDevice::AllocateWaitBlock()+0x68>
    b150:	e3a04000 	mov	r4, #0
    b154:	e3a03001 	mov	r3, #1
    b158:	e595209c 	ldr	r2, [r5, #156]	; 0x9c
    b15c:	e1120003 	tst	r2, r3
    b160:	0a000007 	beq	b184 <CDWHCIDevice::AllocateWaitBlock()+0x48>
    b164:	e2844001 	add	r4, r4, #1
    b168:	e1a03083 	lsl	r3, r3, #1
    b16c:	e3540010 	cmp	r4, #16
    b170:	1afffff8 	bne	b158 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    b174:	e3500000 	cmp	r0, #0
    b178:	1a000006 	bne	b198 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    b17c:	e1a00004 	mov	r0, r4
    b180:	e8bd8070 	pop	{r4, r5, r6, pc}
    b184:	e595209c 	ldr	r2, [r5, #156]	; 0x9c
    b188:	e3500000 	cmp	r0, #0
    b18c:	e1823003 	orr	r3, r2, r3
    b190:	e585309c 	str	r3, [r5, #156]	; 0x9c
    b194:	0afffff8 	beq	b17c <CDWHCIDevice::AllocateWaitBlock()+0x40>
    b198:	eb005bb8 	bl	22080 <LeaveCritical>
    b19c:	e1a00004 	mov	r0, r4
    b1a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    b1a4:	eb005b87 	bl	21fc8 <EnterCritical>
    b1a8:	e59500a0 	ldr	r0, [r5, #160]	; 0xa0
    b1ac:	eaffffe7 	b	b150 <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000b1b0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    b1b0:	e351000f 	cmp	r1, #15
    b1b4:	e92d4070 	push	{r4, r5, r6, lr}
    b1b8:	e1a06001 	mov	r6, r1
    b1bc:	e1a04000 	mov	r4, r0
    b1c0:	8a000018 	bhi	b228 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x78>
    b1c4:	e59400a0 	ldr	r0, [r4, #160]	; 0xa0
    b1c8:	e3a05001 	mov	r5, #1
    b1cc:	e1a05615 	lsl	r5, r5, r6
    b1d0:	e3500000 	cmp	r0, #0
    b1d4:	1a000011 	bne	b220 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x70>
    b1d8:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
    b1dc:	e1150003 	tst	r5, r3
    b1e0:	0a000007 	beq	b204 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x54>
    b1e4:	e59420a0 	ldr	r2, [r4, #160]	; 0xa0
    b1e8:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
    b1ec:	e3520000 	cmp	r2, #0
    b1f0:	e1c35005 	bic	r5, r3, r5
    b1f4:	e584509c 	str	r5, [r4, #156]	; 0x9c
    b1f8:	08bd8070 	popeq	{r4, r5, r6, pc}
    b1fc:	e8bd4070 	pop	{r4, r5, r6, lr}
    b200:	ea005b9e 	b	22080 <LeaveCritical>
    b204:	e30a1930 	movw	r1, #43312	; 0xa930
    b208:	e30a0b7c 	movw	r0, #43900	; 0xab7c
    b20c:	e3401002 	movt	r1, #2
    b210:	e3400002 	movt	r0, #2
    b214:	e3002487 	movw	r2, #1159	; 0x487
    b218:	eb006660 	bl	24ba0 <assertion_failed>
    b21c:	eafffff0 	b	b1e4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x34>
    b220:	eb005b68 	bl	21fc8 <EnterCritical>
    b224:	eaffffeb 	b	b1d8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x28>
    b228:	e30a1930 	movw	r1, #43312	; 0xa930
    b22c:	e30a094c 	movw	r0, #43340	; 0xa94c
    b230:	e3401002 	movt	r1, #2
    b234:	e3400002 	movt	r0, #2
    b238:	e3002482 	movw	r2, #1154	; 0x482
    b23c:	eb006657 	bl	24ba0 <assertion_failed>
    b240:	eaffffdf 	b	b1c4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x14>

0000b244 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>:
    b244:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b248:	e1a07001 	mov	r7, r1
    b24c:	e1a08002 	mov	r8, r2
    b250:	e1a09003 	mov	r9, r3
    b254:	e1a06000 	mov	r6, r0
    b258:	ebffffb7 	bl	b13c <CDWHCIDevice::AllocateWaitBlock()>
    b25c:	e350000f 	cmp	r0, #15
    b260:	8a000022 	bhi	b2f0 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0xac>
    b264:	e3570000 	cmp	r7, #0
    b268:	e1a05000 	mov	r5, r0
    b26c:	0a000028 	beq	b314 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0xd0>
    b270:	e0864105 	add	r4, r6, r5, lsl #2
    b274:	e1a03006 	mov	r3, r6
    b278:	e3091cb4 	movw	r1, #40116	; 0x9cb4
    b27c:	e1a02005 	mov	r2, r5
    b280:	e3401000 	movt	r1, #0
    b284:	e1a00007 	mov	r0, r7
    b288:	eb000cae 	bl	e548 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    b28c:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b290:	e3530000 	cmp	r3, #0
    b294:	1a000017 	bne	b2f8 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0xb4>
    b298:	e3a00001 	mov	r0, #1
    b29c:	e1a03009 	mov	r3, r9
    b2a0:	e584005c 	str	r0, [r4, #92]	; 0x5c
    b2a4:	e1a02008 	mov	r2, r8
    b2a8:	e1a01007 	mov	r1, r7
    b2ac:	e1a00006 	mov	r0, r6
    b2b0:	ebfffd9e 	bl	a930 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)>
    b2b4:	e3500000 	cmp	r0, #0
    b2b8:	0a000008 	beq	b2e0 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0x9c>
    b2bc:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b2c0:	e3530000 	cmp	r3, #0
    b2c4:	1afffffc 	bne	b2bc <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0x78>
    b2c8:	e1a00006 	mov	r0, r6
    b2cc:	e1a01005 	mov	r1, r5
    b2d0:	ebffffb6 	bl	b1b0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b2d4:	e1a00007 	mov	r0, r7
    b2d8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b2dc:	ea000c5d 	b	e458 <CUSBRequest::GetStatus() const>
    b2e0:	e584005c 	str	r0, [r4, #92]	; 0x5c
    b2e4:	e1a01005 	mov	r1, r5
    b2e8:	e1a00006 	mov	r0, r6
    b2ec:	ebffffaf 	bl	b1b0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b2f0:	e3a00000 	mov	r0, #0
    b2f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b2f8:	e30a1930 	movw	r1, #43312	; 0xa930
    b2fc:	e30a0ba4 	movw	r0, #43940	; 0xaba4
    b300:	e3401002 	movt	r1, #2
    b304:	e3400002 	movt	r0, #2
    b308:	e300223d 	movw	r2, #573	; 0x23d
    b30c:	eb006623 	bl	24ba0 <assertion_failed>
    b310:	eaffffe0 	b	b298 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0x54>
    b314:	e30a1930 	movw	r1, #43312	; 0xa930
    b318:	e30a0a2c 	movw	r0, #43564	; 0xaa2c
    b31c:	e3401002 	movt	r1, #2
    b320:	e3400002 	movt	r0, #2
    b324:	e300223a 	movw	r2, #570	; 0x23a
    b328:	eb00661c 	bl	24ba0 <assertion_failed>
    b32c:	eaffffcf 	b	b270 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0x2c>

0000b330 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)>:
    b330:	e92d4070 	push	{r4, r5, r6, lr}
    b334:	e2514000 	subs	r4, r1, #0
    b338:	e1a05000 	mov	r5, r0
    b33c:	0a000067 	beq	b4e0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x1b0>
    b340:	e3a01000 	mov	r1, #0
    b344:	e1a00004 	mov	r0, r4
    b348:	eb000c3e 	bl	e448 <CUSBRequest::SetStatus(int)>
    b34c:	e1a00004 	mov	r0, r4
    b350:	eb000c2c 	bl	e408 <CUSBRequest::GetEndpoint() const>
    b354:	eb000b1b 	bl	dfc8 <CUSBEndpoint::GetType() const>
    b358:	e3500000 	cmp	r0, #0
    b35c:	e1a00004 	mov	r0, r4
    b360:	1a000017 	bne	b3c4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x94>
    b364:	eb000c4a 	bl	e494 <CUSBRequest::GetSetupData()>
    b368:	e2506000 	subs	r6, r0, #0
    b36c:	0a00006a 	beq	b51c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x1ec>
    b370:	e1d630d0 	ldrsb	r3, [r6]
    b374:	e1a00004 	mov	r0, r4
    b378:	e3530000 	cmp	r3, #0
    b37c:	ba00003e 	blt	b47c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x14c>
    b380:	eb000c6e 	bl	e540 <CUSBRequest::GetBufLen() const>
    b384:	e2503000 	subs	r3, r0, #0
    b388:	1a00002b 	bne	b43c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x10c>
    b38c:	e1a02003 	mov	r2, r3
    b390:	e1a01004 	mov	r1, r4
    b394:	e1a00005 	mov	r0, r5
    b398:	ebffffa9 	bl	b244 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b39c:	e3500000 	cmp	r0, #0
    b3a0:	0a00002c 	beq	b458 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x128>
    b3a4:	e3a03001 	mov	r3, #1
    b3a8:	e1a01004 	mov	r1, r4
    b3ac:	e1a00005 	mov	r0, r5
    b3b0:	e1a02003 	mov	r2, r3
    b3b4:	ebffffa2 	bl	b244 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b3b8:	e2900000 	adds	r0, r0, #0
    b3bc:	13a00001 	movne	r0, #1
    b3c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    b3c4:	eb000c0f 	bl	e408 <CUSBRequest::GetEndpoint() const>
    b3c8:	eb000afe 	bl	dfc8 <CUSBEndpoint::GetType() const>
    b3cc:	e3500001 	cmp	r0, #1
    b3d0:	0a00000a 	beq	b400 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0xd0>
    b3d4:	e1a00004 	mov	r0, r4
    b3d8:	eb000c0a 	bl	e408 <CUSBRequest::GetEndpoint() const>
    b3dc:	eb000af9 	bl	dfc8 <CUSBEndpoint::GetType() const>
    b3e0:	e3500002 	cmp	r0, #2
    b3e4:	0a000005 	beq	b400 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0xd0>
    b3e8:	e30a1930 	movw	r1, #43312	; 0xa930
    b3ec:	e30a0a54 	movw	r0, #43604	; 0xaa54
    b3f0:	e3401002 	movt	r1, #2
    b3f4:	e3400002 	movt	r0, #2
    b3f8:	e3a020c8 	mov	r2, #200	; 0xc8
    b3fc:	eb0065e7 	bl	24ba0 <assertion_failed>
    b400:	e1a00004 	mov	r0, r4
    b404:	eb000c4d 	bl	e540 <CUSBRequest::GetBufLen() const>
    b408:	e3500000 	cmp	r0, #0
    b40c:	0a000013 	beq	b460 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x130>
    b410:	e1a00004 	mov	r0, r4
    b414:	eb000bfb 	bl	e408 <CUSBRequest::GetEndpoint() const>
    b418:	eb000aec 	bl	dfd0 <CUSBEndpoint::IsDirectionIn() const>
    b41c:	e1a01004 	mov	r1, r4
    b420:	e3a03000 	mov	r3, #0
    b424:	e1a02000 	mov	r2, r0
    b428:	e1a00005 	mov	r0, r5
    b42c:	ebffff84 	bl	b244 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b430:	e2900000 	adds	r0, r0, #0
    b434:	13a00001 	movne	r0, #1
    b438:	e8bd8070 	pop	{r4, r5, r6, pc}
    b43c:	e3a03000 	mov	r3, #0
    b440:	e1a01004 	mov	r1, r4
    b444:	e1a02003 	mov	r2, r3
    b448:	e1a00005 	mov	r0, r5
    b44c:	ebffff7c 	bl	b244 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b450:	e3500000 	cmp	r0, #0
    b454:	1a000028 	bne	b4fc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x1cc>
    b458:	e3a00000 	mov	r0, #0
    b45c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b460:	e30a1930 	movw	r1, #43312	; 0xa930
    b464:	e30a0ac8 	movw	r0, #43720	; 0xaac8
    b468:	e3401002 	movt	r1, #2
    b46c:	e3400002 	movt	r0, #2
    b470:	e3a020c9 	mov	r2, #201	; 0xc9
    b474:	eb0065c9 	bl	24ba0 <assertion_failed>
    b478:	eaffffe4 	b	b410 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0xe0>
    b47c:	eb000c2f 	bl	e540 <CUSBRequest::GetBufLen() const>
    b480:	e3500000 	cmp	r0, #0
    b484:	0a00002b 	beq	b538 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x208>
    b488:	e3a03000 	mov	r3, #0
    b48c:	e1a01004 	mov	r1, r4
    b490:	e1a02003 	mov	r2, r3
    b494:	e1a00005 	mov	r0, r5
    b498:	ebffff69 	bl	b244 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b49c:	e3500000 	cmp	r0, #0
    b4a0:	0affffec 	beq	b458 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x128>
    b4a4:	e3a03000 	mov	r3, #0
    b4a8:	e3a02001 	mov	r2, #1
    b4ac:	e1a01004 	mov	r1, r4
    b4b0:	e1a00005 	mov	r0, r5
    b4b4:	ebffff62 	bl	b244 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b4b8:	e3500000 	cmp	r0, #0
    b4bc:	0affffe5 	beq	b458 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x128>
    b4c0:	e1a01004 	mov	r1, r4
    b4c4:	e1a00005 	mov	r0, r5
    b4c8:	e3a03001 	mov	r3, #1
    b4cc:	e3a02000 	mov	r2, #0
    b4d0:	ebffff5b 	bl	b244 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b4d4:	e2900000 	adds	r0, r0, #0
    b4d8:	13a00001 	movne	r0, #1
    b4dc:	e8bd8070 	pop	{r4, r5, r6, pc}
    b4e0:	e30a1930 	movw	r1, #43312	; 0xa930
    b4e4:	e30a0a2c 	movw	r0, #43564	; 0xaa2c
    b4e8:	e3401002 	movt	r1, #2
    b4ec:	e3400002 	movt	r0, #2
    b4f0:	e3a0209c 	mov	r2, #156	; 0x9c
    b4f4:	eb0065a9 	bl	24ba0 <assertion_failed>
    b4f8:	eaffff90 	b	b340 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x10>
    b4fc:	e3a03000 	mov	r3, #0
    b500:	e1a01004 	mov	r1, r4
    b504:	e1a02003 	mov	r2, r3
    b508:	e1a00005 	mov	r0, r5
    b50c:	ebffff4c 	bl	b244 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b510:	e3500000 	cmp	r0, #0
    b514:	0affffcf 	beq	b458 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x128>
    b518:	eaffffa1 	b	b3a4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x74>
    b51c:	e30a1930 	movw	r1, #43312	; 0xa930
    b520:	e30a0bbc 	movw	r0, #43964	; 0xabbc
    b524:	e3401002 	movt	r1, #2
    b528:	e3400002 	movt	r0, #2
    b52c:	e3a020a3 	mov	r2, #163	; 0xa3
    b530:	eb00659a 	bl	24ba0 <assertion_failed>
    b534:	eaffff8d 	b	b370 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x40>
    b538:	e30a1930 	movw	r1, #43312	; 0xa930
    b53c:	e30a0ac8 	movw	r0, #43720	; 0xaac8
    b540:	e3401002 	movt	r1, #2
    b544:	e3400002 	movt	r0, #2
    b548:	e3a020a7 	mov	r2, #167	; 0xa7
    b54c:	eb006593 	bl	24ba0 <assertion_failed>
    b550:	eaffffcc 	b	b488 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x158>

0000b554 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>:
    b554:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b558:	e2517000 	subs	r7, r1, #0
    b55c:	e1a08000 	mov	r8, r0
    b560:	e1a06002 	mov	r6, r2
    b564:	e1a05003 	mov	r5, r3
    b568:	e59d4020 	ldr	r4, [sp, #32]
    b56c:	0a000033 	beq	b640 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0xec>
    b570:	e3560000 	cmp	r6, #0
    b574:	0a00002a 	beq	b624 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0xd0>
    b578:	e3540000 	cmp	r4, #0
    b57c:	0a000021 	beq	b608 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0xb4>
    b580:	e30aa930 	movw	sl, #43312	; 0xa930
    b584:	e30a9990 	movw	r9, #43408	; 0xa990
    b588:	e340a002 	movt	sl, #2
    b58c:	e3409002 	movt	r9, #2
    b590:	ea000003 	b	b5a4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x50>
    b594:	e3a00001 	mov	r0, #1
    b598:	eb005d97 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
    b59c:	e2544001 	subs	r4, r4, #1
    b5a0:	0a000014 	beq	b5f8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0xa4>
    b5a4:	e1a00007 	mov	r0, r7
    b5a8:	eb0002f3 	bl	c17c <CDWHCIRegister::Read()>
    b5ac:	e16f3f15 	clz	r3, r5
    b5b0:	e1a032a3 	lsr	r3, r3, #5
    b5b4:	e1160000 	tst	r6, r0
    b5b8:	1a000001 	bne	b5c4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x70>
    b5bc:	e2953000 	adds	r3, r5, #0
    b5c0:	13a03001 	movne	r3, #1
    b5c4:	e3530000 	cmp	r3, #0
    b5c8:	0a00000c 	beq	b600 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0xac>
    b5cc:	e5983008 	ldr	r3, [r8, #8]
    b5d0:	e3530000 	cmp	r3, #0
    b5d4:	1affffee 	bne	b594 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x40>
    b5d8:	e3002498 	movw	r2, #1176	; 0x498
    b5dc:	e1a0100a 	mov	r1, sl
    b5e0:	e1a00009 	mov	r0, r9
    b5e4:	eb00656d 	bl	24ba0 <assertion_failed>
    b5e8:	e3a00001 	mov	r0, #1
    b5ec:	eb005d82 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
    b5f0:	e2544001 	subs	r4, r4, #1
    b5f4:	1affffea 	bne	b5a4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x50>
    b5f8:	e1a00004 	mov	r0, r4
    b5fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b600:	e3a00001 	mov	r0, #1
    b604:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b608:	e30a1930 	movw	r1, #43312	; 0xa930
    b60c:	e30a0be4 	movw	r0, #44004	; 0xabe4
    b610:	e3401002 	movt	r1, #2
    b614:	e3400002 	movt	r0, #2
    b618:	e3002494 	movw	r2, #1172	; 0x494
    b61c:	eb00655f 	bl	24ba0 <assertion_failed>
    b620:	eaffffd6 	b	b580 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x2c>
    b624:	e30a1930 	movw	r1, #43312	; 0xa930
    b628:	e30a0bd8 	movw	r0, #43992	; 0xabd8
    b62c:	e3401002 	movt	r1, #2
    b630:	e3400002 	movt	r0, #2
    b634:	e3002493 	movw	r2, #1171	; 0x493
    b638:	eb006558 	bl	24ba0 <assertion_failed>
    b63c:	eaffffcd 	b	b578 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x24>
    b640:	e30a1930 	movw	r1, #43312	; 0xa930
    b644:	e30a0bc8 	movw	r0, #43976	; 0xabc8
    b648:	e3401002 	movt	r1, #2
    b64c:	e3400002 	movt	r0, #2
    b650:	e3002492 	movw	r2, #1170	; 0x492
    b654:	eb006551 	bl	24ba0 <assertion_failed>
    b658:	eaffffc4 	b	b570 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x1c>

0000b65c <CDWHCIDevice::EnableRootPort()>:
    b65c:	e92d4030 	push	{r4, r5, lr}
    b660:	e24dd01c 	sub	sp, sp, #28
    b664:	e1a04000 	mov	r4, r0
    b668:	e3a01d11 	mov	r1, #1088	; 0x440
    b66c:	e28d000c 	add	r0, sp, #12
    b670:	e3431f98 	movt	r1, #16280	; 0x3f98
    b674:	eb0002b7 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b678:	e3a03001 	mov	r3, #1
    b67c:	e1a00004 	mov	r0, r4
    b680:	e3a05014 	mov	r5, #20
    b684:	e28d100c 	add	r1, sp, #12
    b688:	e1a02003 	mov	r2, r3
    b68c:	e58d5000 	str	r5, [sp]
    b690:	ebffffaf 	bl	b554 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>
    b694:	e2504000 	subs	r4, r0, #0
    b698:	0a00001a 	beq	b708 <CDWHCIDevice::EnableRootPort()+0xac>
    b69c:	e3a00064 	mov	r0, #100	; 0x64
    b6a0:	e3a04001 	mov	r4, #1
    b6a4:	eb005d54 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
    b6a8:	e28d000c 	add	r0, sp, #12
    b6ac:	eb0002b2 	bl	c17c <CDWHCIRegister::Read()>
    b6b0:	e3e0102e 	mvn	r1, #46	; 0x2e
    b6b4:	e28d000c 	add	r0, sp, #12
    b6b8:	eb0002e8 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b6bc:	e3a01c01 	mov	r1, #256	; 0x100
    b6c0:	e28d000c 	add	r0, sp, #12
    b6c4:	eb0002f5 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    b6c8:	e28d000c 	add	r0, sp, #12
    b6cc:	eb0002b1 	bl	c198 <CDWHCIRegister::Write()>
    b6d0:	e3a00032 	mov	r0, #50	; 0x32
    b6d4:	eb005d48 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
    b6d8:	e28d000c 	add	r0, sp, #12
    b6dc:	eb0002a6 	bl	c17c <CDWHCIRegister::Read()>
    b6e0:	e3e0102e 	mvn	r1, #46	; 0x2e
    b6e4:	e28d000c 	add	r0, sp, #12
    b6e8:	eb0002dc 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b6ec:	e3e01c01 	mvn	r1, #256	; 0x100
    b6f0:	e28d000c 	add	r0, sp, #12
    b6f4:	eb0002d9 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b6f8:	e28d000c 	add	r0, sp, #12
    b6fc:	eb0002a5 	bl	c198 <CDWHCIRegister::Write()>
    b700:	e1a00005 	mov	r0, r5
    b704:	eb005d3c 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
    b708:	e28d000c 	add	r0, sp, #12
    b70c:	eb000299 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    b710:	e1a00004 	mov	r0, r4
    b714:	e28dd01c 	add	sp, sp, #28
    b718:	e8bd8030 	pop	{r4, r5, pc}

0000b71c <CDWHCIDevice::Reset()>:
    b71c:	e92d4030 	push	{r4, r5, lr}
    b720:	e24dd01c 	sub	sp, sp, #28
    b724:	e1a04000 	mov	r4, r0
    b728:	e3a02000 	mov	r2, #0
    b72c:	e3a01010 	mov	r1, #16
    b730:	e28d000c 	add	r0, sp, #12
    b734:	e3431f98 	movt	r1, #16280	; 0x3f98
    b738:	e3a05064 	mov	r5, #100	; 0x64
    b73c:	eb000289 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b740:	e28d100c 	add	r1, sp, #12
    b744:	e1a00004 	mov	r0, r4
    b748:	e58d5000 	str	r5, [sp]
    b74c:	e3a03001 	mov	r3, #1
    b750:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    b754:	ebffff7e 	bl	b554 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>
    b758:	e3500000 	cmp	r0, #0
    b75c:	1a000005 	bne	b778 <CDWHCIDevice::Reset()+0x5c>
    b760:	e3a04000 	mov	r4, #0
    b764:	e28d000c 	add	r0, sp, #12
    b768:	eb000282 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    b76c:	e1a00004 	mov	r0, r4
    b770:	e28dd01c 	add	sp, sp, #28
    b774:	e8bd8030 	pop	{r4, r5, pc}
    b778:	e3a01001 	mov	r1, #1
    b77c:	e28d000c 	add	r0, sp, #12
    b780:	eb0002c6 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    b784:	e28d000c 	add	r0, sp, #12
    b788:	eb000282 	bl	c198 <CDWHCIRegister::Write()>
    b78c:	e3a0200a 	mov	r2, #10
    b790:	e1a00004 	mov	r0, r4
    b794:	e58d2000 	str	r2, [sp]
    b798:	e3a03000 	mov	r3, #0
    b79c:	e3a02001 	mov	r2, #1
    b7a0:	e28d100c 	add	r1, sp, #12
    b7a4:	ebffff6a 	bl	b554 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>
    b7a8:	e3500000 	cmp	r0, #0
    b7ac:	0affffeb 	beq	b760 <CDWHCIDevice::Reset()+0x44>
    b7b0:	e1a00005 	mov	r0, r5
    b7b4:	e3a04001 	mov	r4, #1
    b7b8:	eb005d0f 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
    b7bc:	eaffffe8 	b	b764 <CDWHCIDevice::Reset()+0x48>

0000b7c0 <CDWHCIDevice::InitCore()>:
    b7c0:	e92d4030 	push	{r4, r5, lr}
    b7c4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b7c8:	e1a04000 	mov	r4, r0
    b7cc:	e3a0100c 	mov	r1, #12
    b7d0:	e28d0004 	add	r0, sp, #4
    b7d4:	e3431f98 	movt	r1, #16280	; 0x3f98
    b7d8:	eb00025e 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b7dc:	e28d0004 	add	r0, sp, #4
    b7e0:	eb000265 	bl	c17c <CDWHCIRegister::Read()>
    b7e4:	e28d0004 	add	r0, sp, #4
    b7e8:	e3e01601 	mvn	r1, #1048576	; 0x100000
    b7ec:	eb00029b 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b7f0:	e3e01501 	mvn	r1, #4194304	; 0x400000
    b7f4:	e28d0004 	add	r0, sp, #4
    b7f8:	eb000298 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b7fc:	e28d0004 	add	r0, sp, #4
    b800:	eb000264 	bl	c198 <CDWHCIRegister::Write()>
    b804:	e1a00004 	mov	r0, r4
    b808:	ebffffc3 	bl	b71c <CDWHCIDevice::Reset()>
    b80c:	e2505000 	subs	r5, r0, #0
    b810:	0a00005b 	beq	b984 <CDWHCIDevice::InitCore()+0x1c4>
    b814:	e28d0004 	add	r0, sp, #4
    b818:	eb000257 	bl	c17c <CDWHCIRegister::Read()>
    b81c:	e3e01010 	mvn	r1, #16
    b820:	e28d0004 	add	r0, sp, #4
    b824:	eb00028d 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b828:	e3e01008 	mvn	r1, #8
    b82c:	e28d0004 	add	r0, sp, #4
    b830:	eb00028a 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b834:	e28d0004 	add	r0, sp, #4
    b838:	eb000256 	bl	c198 <CDWHCIRegister::Write()>
    b83c:	e28d0010 	add	r0, sp, #16
    b840:	e3a01048 	mov	r1, #72	; 0x48
    b844:	e3431f98 	movt	r1, #16280	; 0x3f98
    b848:	eb000242 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b84c:	e28d0010 	add	r0, sp, #16
    b850:	eb000249 	bl	c17c <CDWHCIRegister::Read()>
    b854:	e28d0010 	add	r0, sp, #16
    b858:	eb00025d 	bl	c1d4 <CDWHCIRegister::Get() const>
    b85c:	e7e101d0 	ubfx	r0, r0, #3, #2
    b860:	e3500002 	cmp	r0, #2
    b864:	0a000005 	beq	b880 <CDWHCIDevice::InitCore()+0xc0>
    b868:	e30a1930 	movw	r1, #43312	; 0xa930
    b86c:	e30a0c04 	movw	r0, #44036	; 0xac04
    b870:	e3401002 	movt	r1, #2
    b874:	e3400002 	movt	r0, #2
    b878:	e300212e 	movw	r2, #302	; 0x12e
    b87c:	eb0064c7 	bl	24ba0 <assertion_failed>
    b880:	e28d0004 	add	r0, sp, #4
    b884:	eb00023c 	bl	c17c <CDWHCIRegister::Read()>
    b888:	e28d0010 	add	r0, sp, #16
    b88c:	eb000250 	bl	c1d4 <CDWHCIRegister::Get() const>
    b890:	e7e10350 	ubfx	r0, r0, #6, #2
    b894:	e3500002 	cmp	r0, #2
    b898:	0a00004e 	beq	b9d8 <CDWHCIDevice::InitCore()+0x218>
    b89c:	e3e01802 	mvn	r1, #131072	; 0x20000
    b8a0:	e28d0004 	add	r0, sp, #4
    b8a4:	eb00026d 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b8a8:	e3e01702 	mvn	r1, #524288	; 0x80000
    b8ac:	e28d0004 	add	r0, sp, #4
    b8b0:	eb00026a 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b8b4:	e28d0004 	add	r0, sp, #4
    b8b8:	eb000236 	bl	c198 <CDWHCIRegister::Write()>
    b8bc:	e594300c 	ldr	r3, [r4, #12]
    b8c0:	e3530000 	cmp	r3, #0
    b8c4:	1a00003c 	bne	b9bc <CDWHCIDevice::InitCore()+0x1fc>
    b8c8:	e28d0010 	add	r0, sp, #16
    b8cc:	eb000240 	bl	c1d4 <CDWHCIRegister::Get() const>
    b8d0:	e7e30750 	ubfx	r0, r0, #14, #4
    b8d4:	e2403003 	sub	r3, r0, #3
    b8d8:	e2800001 	add	r0, r0, #1
    b8dc:	e353000c 	cmp	r3, #12
    b8e0:	e584000c 	str	r0, [r4, #12]
    b8e4:	8a00002d 	bhi	b9a0 <CDWHCIDevice::InitCore()+0x1e0>
    b8e8:	e3a01008 	mov	r1, #8
    b8ec:	e28d001c 	add	r0, sp, #28
    b8f0:	e3431f98 	movt	r1, #16280	; 0x3f98
    b8f4:	e3a05001 	mov	r5, #1
    b8f8:	eb000216 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b8fc:	e28d001c 	add	r0, sp, #28
    b900:	eb00021d 	bl	c17c <CDWHCIRegister::Read()>
    b904:	e28d001c 	add	r0, sp, #28
    b908:	e3a01020 	mov	r1, #32
    b90c:	eb000263 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    b910:	e28d001c 	add	r0, sp, #28
    b914:	e3a01010 	mov	r1, #16
    b918:	eb000260 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    b91c:	e3e01006 	mvn	r1, #6
    b920:	e28d001c 	add	r0, sp, #28
    b924:	eb00024d 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b928:	e28d001c 	add	r0, sp, #28
    b92c:	eb000219 	bl	c198 <CDWHCIRegister::Write()>
    b930:	e28d0004 	add	r0, sp, #4
    b934:	eb000210 	bl	c17c <CDWHCIRegister::Read()>
    b938:	e3e01c02 	mvn	r1, #512	; 0x200
    b93c:	e28d0004 	add	r0, sp, #4
    b940:	eb000246 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b944:	e3e01c01 	mvn	r1, #256	; 0x100
    b948:	e28d0004 	add	r0, sp, #4
    b94c:	eb000243 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    b950:	e28d0004 	add	r0, sp, #4
    b954:	eb00020f 	bl	c198 <CDWHCIRegister::Write()>
    b958:	e1a00004 	mov	r0, r4
    b95c:	ebfff9b6 	bl	a03c <CDWHCIDevice::EnableCommonInterrupts()>
    b960:	e28d001c 	add	r0, sp, #28
    b964:	eb000203 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    b968:	e28d0010 	add	r0, sp, #16
    b96c:	eb000201 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    b970:	e28d0004 	add	r0, sp, #4
    b974:	eb0001ff 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    b978:	e1a00005 	mov	r0, r5
    b97c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b980:	e8bd8030 	pop	{r4, r5, pc}
    b984:	eb006607 	bl	251a8 <CLogger::Get()>
    b988:	e30a3bf4 	movw	r3, #44020	; 0xabf4
    b98c:	e3a02001 	mov	r2, #1
    b990:	e3403002 	movt	r3, #2
    b994:	e59f106c 	ldr	r1, [pc, #108]	; ba08 <CDWHCIDevice::InitCore()+0x248>
    b998:	eb0066df 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b99c:	eafffff3 	b	b970 <CDWHCIDevice::InitCore()+0x1b0>
    b9a0:	e30a1930 	movw	r1, #43312	; 0xa930
    b9a4:	e30a0c50 	movw	r0, #44112	; 0xac50
    b9a8:	e3401002 	movt	r1, #2
    b9ac:	e3400002 	movt	r0, #2
    b9b0:	e3a02d05 	mov	r2, #320	; 0x140
    b9b4:	eb006479 	bl	24ba0 <assertion_failed>
    b9b8:	eaffffca 	b	b8e8 <CDWHCIDevice::InitCore()+0x128>
    b9bc:	e30a1930 	movw	r1, #43312	; 0xa930
    b9c0:	e30a0c3c 	movw	r0, #44092	; 0xac3c
    b9c4:	e3401002 	movt	r1, #2
    b9c8:	e3400002 	movt	r0, #2
    b9cc:	e300213e 	movw	r2, #318	; 0x13e
    b9d0:	eb006472 	bl	24ba0 <assertion_failed>
    b9d4:	eaffffbb 	b	b8c8 <CDWHCIDevice::InitCore()+0x108>
    b9d8:	e28d0010 	add	r0, sp, #16
    b9dc:	eb0001fc 	bl	c1d4 <CDWHCIRegister::Get() const>
    b9e0:	e7e10450 	ubfx	r0, r0, #8, #2
    b9e4:	e3500001 	cmp	r0, #1
    b9e8:	1affffab 	bne	b89c <CDWHCIDevice::InitCore()+0xdc>
    b9ec:	e28d0004 	add	r0, sp, #4
    b9f0:	e3a01802 	mov	r1, #131072	; 0x20000
    b9f4:	eb000229 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    b9f8:	e3a01702 	mov	r1, #524288	; 0x80000
    b9fc:	e28d0004 	add	r0, sp, #4
    ba00:	eb000226 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    ba04:	eaffffaa 	b	b8b4 <CDWHCIDevice::InitCore()+0xf4>
    ba08:	0002a924 	.word	0x0002a924

0000ba0c <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    ba0c:	e92d4030 	push	{r4, r5, lr}
    ba10:	e24dd01c 	sub	sp, sp, #28
    ba14:	e3a02000 	mov	r2, #0
    ba18:	e1a05001 	mov	r5, r1
    ba1c:	e1a04000 	mov	r4, r0
    ba20:	e3a01010 	mov	r1, #16
    ba24:	e28d000c 	add	r0, sp, #12
    ba28:	e3431f98 	movt	r1, #16280	; 0x3f98
    ba2c:	eb0001cd 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ba30:	e28d000c 	add	r0, sp, #12
    ba34:	e3a01020 	mov	r1, #32
    ba38:	eb000218 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    ba3c:	e28d000c 	add	r0, sp, #12
    ba40:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    ba44:	eb000205 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    ba48:	e1a01305 	lsl	r1, r5, #6
    ba4c:	e28d000c 	add	r0, sp, #12
    ba50:	eb000212 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    ba54:	e28d000c 	add	r0, sp, #12
    ba58:	eb0001ce 	bl	c198 <CDWHCIRegister::Write()>
    ba5c:	e3a0200a 	mov	r2, #10
    ba60:	e1a00004 	mov	r0, r4
    ba64:	e58d2000 	str	r2, [sp]
    ba68:	e28d100c 	add	r1, sp, #12
    ba6c:	e3a03000 	mov	r3, #0
    ba70:	e3a02020 	mov	r2, #32
    ba74:	ebfffeb6 	bl	b554 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>
    ba78:	e3500000 	cmp	r0, #0
    ba7c:	1a000003 	bne	ba90 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x84>
    ba80:	e28d000c 	add	r0, sp, #12
    ba84:	eb0001bb 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    ba88:	e28dd01c 	add	sp, sp, #28
    ba8c:	e8bd8030 	pop	{r4, r5, pc}
    ba90:	e3a00001 	mov	r0, #1
    ba94:	eb005c68 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
    ba98:	e28d000c 	add	r0, sp, #12
    ba9c:	eb0001b5 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    baa0:	e28dd01c 	add	sp, sp, #28
    baa4:	e8bd8030 	pop	{r4, r5, pc}

0000baa8 <CDWHCIDevice::FlushRxFIFO()>:
    baa8:	e92d4010 	push	{r4, lr}
    baac:	e24dd018 	sub	sp, sp, #24
    bab0:	e3a02000 	mov	r2, #0
    bab4:	e1a04000 	mov	r4, r0
    bab8:	e3a01010 	mov	r1, #16
    babc:	e28d000c 	add	r0, sp, #12
    bac0:	e3431f98 	movt	r1, #16280	; 0x3f98
    bac4:	eb0001a7 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bac8:	e3a01010 	mov	r1, #16
    bacc:	e28d000c 	add	r0, sp, #12
    bad0:	eb0001f2 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    bad4:	e28d000c 	add	r0, sp, #12
    bad8:	eb0001ae 	bl	c198 <CDWHCIRegister::Write()>
    badc:	e3a0200a 	mov	r2, #10
    bae0:	e1a00004 	mov	r0, r4
    bae4:	e58d2000 	str	r2, [sp]
    bae8:	e28d100c 	add	r1, sp, #12
    baec:	e3a03000 	mov	r3, #0
    baf0:	e3a02010 	mov	r2, #16
    baf4:	ebfffe96 	bl	b554 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>
    baf8:	e3500000 	cmp	r0, #0
    bafc:	1a000003 	bne	bb10 <CDWHCIDevice::FlushRxFIFO()+0x68>
    bb00:	e28d000c 	add	r0, sp, #12
    bb04:	eb00019b 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bb08:	e28dd018 	add	sp, sp, #24
    bb0c:	e8bd8010 	pop	{r4, pc}
    bb10:	e3a00001 	mov	r0, #1
    bb14:	eb005c48 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
    bb18:	e28d000c 	add	r0, sp, #12
    bb1c:	eb000195 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bb20:	e28dd018 	add	sp, sp, #24
    bb24:	e8bd8010 	pop	{r4, pc}

0000bb28 <CDWHCIDevice::InitHost()>:
    bb28:	e92d4010 	push	{r4, lr}
    bb2c:	e24dd068 	sub	sp, sp, #104	; 0x68
    bb30:	e3a02000 	mov	r2, #0
    bb34:	e1a04000 	mov	r4, r0
    bb38:	e3a01c0e 	mov	r1, #3584	; 0xe00
    bb3c:	e28d0008 	add	r0, sp, #8
    bb40:	e3431f98 	movt	r1, #16280	; 0x3f98
    bb44:	eb000187 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bb48:	e28d0008 	add	r0, sp, #8
    bb4c:	eb000191 	bl	c198 <CDWHCIRegister::Write()>
    bb50:	e28d0014 	add	r0, sp, #20
    bb54:	e3a01b01 	mov	r1, #1024	; 0x400
    bb58:	e3431f98 	movt	r1, #16280	; 0x3f98
    bb5c:	eb00017d 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb60:	e28d0014 	add	r0, sp, #20
    bb64:	eb000184 	bl	c17c <CDWHCIRegister::Read()>
    bb68:	e28d0014 	add	r0, sp, #20
    bb6c:	e3e01003 	mvn	r1, #3
    bb70:	eb0001ba 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    bb74:	e28d0020 	add	r0, sp, #32
    bb78:	e3a01048 	mov	r1, #72	; 0x48
    bb7c:	e3431f98 	movt	r1, #16280	; 0x3f98
    bb80:	eb000174 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb84:	e28d002c 	add	r0, sp, #44	; 0x2c
    bb88:	e3a0100c 	mov	r1, #12
    bb8c:	e3431f98 	movt	r1, #16280	; 0x3f98
    bb90:	eb000170 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb94:	e28d0020 	add	r0, sp, #32
    bb98:	eb000177 	bl	c17c <CDWHCIRegister::Read()>
    bb9c:	e7e10350 	ubfx	r0, r0, #6, #2
    bba0:	e3500002 	cmp	r0, #2
    bba4:	0a000051 	beq	bcf0 <CDWHCIDevice::InitHost()+0x1c8>
    bba8:	e3a01000 	mov	r1, #0
    bbac:	e28d0014 	add	r0, sp, #20
    bbb0:	eb0001ba 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    bbb4:	e28d0014 	add	r0, sp, #20
    bbb8:	eb000176 	bl	c198 <CDWHCIRegister::Write()>
    bbbc:	e3a02b01 	mov	r2, #1024	; 0x400
    bbc0:	e28d0038 	add	r0, sp, #56	; 0x38
    bbc4:	e3a01024 	mov	r1, #36	; 0x24
    bbc8:	e3431f98 	movt	r1, #16280	; 0x3f98
    bbcc:	eb000165 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bbd0:	e28d0038 	add	r0, sp, #56	; 0x38
    bbd4:	eb00016f 	bl	c198 <CDWHCIRegister::Write()>
    bbd8:	e3a02000 	mov	r2, #0
    bbdc:	e28d0044 	add	r0, sp, #68	; 0x44
    bbe0:	e3a01028 	mov	r1, #40	; 0x28
    bbe4:	e3431f98 	movt	r1, #16280	; 0x3f98
    bbe8:	eb00015e 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bbec:	e28d0044 	add	r0, sp, #68	; 0x44
    bbf0:	e3a01b01 	mov	r1, #1024	; 0x400
    bbf4:	eb0001a9 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    bbf8:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bbfc:	e28d0044 	add	r0, sp, #68	; 0x44
    bc00:	eb0001a6 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    bc04:	e28d0044 	add	r0, sp, #68	; 0x44
    bc08:	eb000162 	bl	c198 <CDWHCIRegister::Write()>
    bc0c:	e3a02000 	mov	r2, #0
    bc10:	e28d0050 	add	r0, sp, #80	; 0x50
    bc14:	e3a01c01 	mov	r1, #256	; 0x100
    bc18:	e3431f98 	movt	r1, #16280	; 0x3f98
    bc1c:	eb000151 	bl	c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bc20:	e28d0050 	add	r0, sp, #80	; 0x50
    bc24:	e3a01b02 	mov	r1, #2048	; 0x800
    bc28:	eb00019c 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    bc2c:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bc30:	e28d0050 	add	r0, sp, #80	; 0x50
    bc34:	eb000199 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    bc38:	e28d0050 	add	r0, sp, #80	; 0x50
    bc3c:	eb000155 	bl	c198 <CDWHCIRegister::Write()>
    bc40:	e3a01010 	mov	r1, #16
    bc44:	e1a00004 	mov	r0, r4
    bc48:	ebffff6f 	bl	ba0c <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    bc4c:	e1a00004 	mov	r0, r4
    bc50:	ebffff94 	bl	baa8 <CDWHCIDevice::FlushRxFIFO()>
    bc54:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc58:	e3a01d11 	mov	r1, #1088	; 0x440
    bc5c:	e3431f98 	movt	r1, #16280	; 0x3f98
    bc60:	eb00013c 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bc64:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc68:	eb000143 	bl	c17c <CDWHCIRegister::Read()>
    bc6c:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc70:	e3e0102e 	mvn	r1, #46	; 0x2e
    bc74:	eb000179 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    bc78:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc7c:	eb000154 	bl	c1d4 <CDWHCIRegister::Get() const>
    bc80:	e3100a01 	tst	r0, #4096	; 0x1000
    bc84:	1a000004 	bne	bc9c <CDWHCIDevice::InitHost()+0x174>
    bc88:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc8c:	e3a01a01 	mov	r1, #4096	; 0x1000
    bc90:	eb000182 	bl	c2a0 <CDWHCIRegister::Or(unsigned int)>
    bc94:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc98:	eb00013e 	bl	c198 <CDWHCIRegister::Write()>
    bc9c:	e1a00004 	mov	r0, r4
    bca0:	ebfff8f3 	bl	a074 <CDWHCIDevice::EnableHostInterrupts()>
    bca4:	e28d005c 	add	r0, sp, #92	; 0x5c
    bca8:	eb000132 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bcac:	e28d0050 	add	r0, sp, #80	; 0x50
    bcb0:	eb000130 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bcb4:	e28d0044 	add	r0, sp, #68	; 0x44
    bcb8:	eb00012e 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bcbc:	e28d0038 	add	r0, sp, #56	; 0x38
    bcc0:	eb00012c 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bcc4:	e28d002c 	add	r0, sp, #44	; 0x2c
    bcc8:	eb00012a 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bccc:	e28d0020 	add	r0, sp, #32
    bcd0:	eb000128 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bcd4:	e28d0014 	add	r0, sp, #20
    bcd8:	eb000126 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bcdc:	e28d0008 	add	r0, sp, #8
    bce0:	eb000124 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bce4:	e3a00001 	mov	r0, #1
    bce8:	e28dd068 	add	sp, sp, #104	; 0x68
    bcec:	e8bd8010 	pop	{r4, pc}
    bcf0:	e28d0020 	add	r0, sp, #32
    bcf4:	eb000136 	bl	c1d4 <CDWHCIRegister::Get() const>
    bcf8:	e7e11450 	ubfx	r1, r0, #8, #2
    bcfc:	e3510001 	cmp	r1, #1
    bd00:	1affffa8 	bne	bba8 <CDWHCIDevice::InitHost()+0x80>
    bd04:	e28d002c 	add	r0, sp, #44	; 0x2c
    bd08:	e58d1004 	str	r1, [sp, #4]
    bd0c:	eb00011a 	bl	c17c <CDWHCIRegister::Read()>
    bd10:	e59d1004 	ldr	r1, [sp, #4]
    bd14:	e3100802 	tst	r0, #131072	; 0x20000
    bd18:	1affffa3 	bne	bbac <CDWHCIDevice::InitHost()+0x84>
    bd1c:	eaffffa1 	b	bba8 <CDWHCIDevice::InitHost()+0x80>

0000bd20 <CDWHCIDevice::Initialize()>:
    bd20:	e5903004 	ldr	r3, [r0, #4]
    bd24:	e92d4030 	push	{r4, r5, lr}
    bd28:	e3530000 	cmp	r3, #0
    bd2c:	e24dd024 	sub	sp, sp, #36	; 0x24
    bd30:	e1a04000 	mov	r4, r0
    bd34:	0a000055 	beq	be90 <CDWHCIDevice::Initialize()+0x170>
    bd38:	e5943008 	ldr	r3, [r4, #8]
    bd3c:	e3530000 	cmp	r3, #0
    bd40:	0a000059 	beq	beac <CDWHCIDevice::Initialize()+0x18c>
    bd44:	e3a01040 	mov	r1, #64	; 0x40
    bd48:	e28d0008 	add	r0, sp, #8
    bd4c:	e3431f98 	movt	r1, #16280	; 0x3f98
    bd50:	eb000100 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bd54:	e28d0008 	add	r0, sp, #8
    bd58:	eb000107 	bl	c17c <CDWHCIRegister::Read()>
    bd5c:	e302380a 	movw	r3, #10250	; 0x280a
    bd60:	e3443f54 	movt	r3, #20308	; 0x4f54
    bd64:	e1500003 	cmp	r0, r3
    bd68:	0a000010 	beq	bdb0 <CDWHCIDevice::Initialize()+0x90>
    bd6c:	eb00650d 	bl	251a8 <CLogger::Get()>
    bd70:	e3a05000 	mov	r5, #0
    bd74:	e1a04000 	mov	r4, r0
    bd78:	e28d0008 	add	r0, sp, #8
    bd7c:	eb000114 	bl	c1d4 <CDWHCIRegister::Get() const>
    bd80:	e30a3c88 	movw	r3, #44168	; 0xac88
    bd84:	e3a02001 	mov	r2, #1
    bd88:	e3403002 	movt	r3, #2
    bd8c:	e59f11b8 	ldr	r1, [pc, #440]	; bf4c <CDWHCIDevice::Initialize()+0x22c>
    bd90:	e58d0000 	str	r0, [sp]
    bd94:	e1a00004 	mov	r0, r4
    bd98:	eb0065df 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bd9c:	e28d0008 	add	r0, sp, #8
    bda0:	eb0000f4 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bda4:	e1a00005 	mov	r0, r5
    bda8:	e28dd024 	add	sp, sp, #36	; 0x24
    bdac:	e8bd8030 	pop	{r4, r5, pc}
    bdb0:	e1a00004 	mov	r0, r4
    bdb4:	ebfff875 	bl	9f90 <CDWHCIDevice::PowerOn()>
    bdb8:	e2505000 	subs	r5, r0, #0
    bdbc:	0a00002c 	beq	be74 <CDWHCIDevice::Initialize()+0x154>
    bdc0:	e3a01008 	mov	r1, #8
    bdc4:	e28d0014 	add	r0, sp, #20
    bdc8:	e3431f98 	movt	r1, #16280	; 0x3f98
    bdcc:	eb0000e1 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bdd0:	e28d0014 	add	r0, sp, #20
    bdd4:	eb0000e8 	bl	c17c <CDWHCIRegister::Read()>
    bdd8:	e28d0014 	add	r0, sp, #20
    bddc:	e3e01001 	mvn	r1, #1
    bde0:	eb00011e 	bl	c260 <CDWHCIRegister::And(unsigned int)>
    bde4:	e28d0014 	add	r0, sp, #20
    bde8:	eb0000ea 	bl	c198 <CDWHCIRegister::Write()>
    bdec:	e5940004 	ldr	r0, [r4, #4]
    bdf0:	e3500000 	cmp	r0, #0
    bdf4:	0a00004c 	beq	bf2c <CDWHCIDevice::Initialize()+0x20c>
    bdf8:	e1a03004 	mov	r3, r4
    bdfc:	e3a01009 	mov	r1, #9
    be00:	e30b2100 	movw	r2, #45312	; 0xb100
    be04:	e3402000 	movt	r2, #0
    be08:	eb006cef 	bl	271cc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    be0c:	e1a00004 	mov	r0, r4
    be10:	ebfffe6a 	bl	b7c0 <CDWHCIDevice::InitCore()>
    be14:	e2505000 	subs	r5, r0, #0
    be18:	0a00000e 	beq	be58 <CDWHCIDevice::Initialize()+0x138>
    be1c:	e1a00004 	mov	r0, r4
    be20:	ebfff874 	bl	9ff8 <CDWHCIDevice::EnableGlobalInterrupts()>
    be24:	e1a00004 	mov	r0, r4
    be28:	ebffff3e 	bl	bb28 <CDWHCIDevice::InitHost()>
    be2c:	e2505000 	subs	r5, r0, #0
    be30:	1a000024 	bne	bec8 <CDWHCIDevice::Initialize()+0x1a8>
    be34:	eb0064db 	bl	251a8 <CLogger::Get()>
    be38:	e30a3cc8 	movw	r3, #44232	; 0xacc8
    be3c:	e3a02001 	mov	r2, #1
    be40:	e3403002 	movt	r3, #2
    be44:	e59f1100 	ldr	r1, [pc, #256]	; bf4c <CDWHCIDevice::Initialize()+0x22c>
    be48:	eb0065b3 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    be4c:	e28d0014 	add	r0, sp, #20
    be50:	eb0000c8 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    be54:	eaffffd0 	b	bd9c <CDWHCIDevice::Initialize()+0x7c>
    be58:	eb0064d2 	bl	251a8 <CLogger::Get()>
    be5c:	e30a3cb0 	movw	r3, #44208	; 0xacb0
    be60:	e3a02001 	mov	r2, #1
    be64:	e3403002 	movt	r3, #2
    be68:	e59f10dc 	ldr	r1, [pc, #220]	; bf4c <CDWHCIDevice::Initialize()+0x22c>
    be6c:	eb0065aa 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    be70:	eafffff5 	b	be4c <CDWHCIDevice::Initialize()+0x12c>
    be74:	eb0064cb 	bl	251a8 <CLogger::Get()>
    be78:	e30a3ca0 	movw	r3, #44192	; 0xaca0
    be7c:	e3a02001 	mov	r2, #1
    be80:	e3403002 	movt	r3, #2
    be84:	e59f10c0 	ldr	r1, [pc, #192]	; bf4c <CDWHCIDevice::Initialize()+0x22c>
    be88:	eb0065a3 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    be8c:	eaffffc2 	b	bd9c <CDWHCIDevice::Initialize()+0x7c>
    be90:	e30a1930 	movw	r1, #43312	; 0xa930
    be94:	e30a0978 	movw	r0, #43384	; 0xa978
    be98:	e3401002 	movt	r1, #2
    be9c:	e3400002 	movt	r0, #2
    bea0:	e3a0205d 	mov	r2, #93	; 0x5d
    bea4:	eb00633d 	bl	24ba0 <assertion_failed>
    bea8:	eaffffa2 	b	bd38 <CDWHCIDevice::Initialize()+0x18>
    beac:	e30a1930 	movw	r1, #43312	; 0xa930
    beb0:	e30a0990 	movw	r0, #43408	; 0xa990
    beb4:	e3401002 	movt	r1, #2
    beb8:	e3400002 	movt	r0, #2
    bebc:	e3a0205e 	mov	r2, #94	; 0x5e
    bec0:	eb006336 	bl	24ba0 <assertion_failed>
    bec4:	eaffff9e 	b	bd44 <CDWHCIDevice::Initialize()+0x24>
    bec8:	e1a00004 	mov	r0, r4
    becc:	ebfffde2 	bl	b65c <CDWHCIDevice::EnableRootPort()>
    bed0:	e3500000 	cmp	r0, #0
    bed4:	0a00000c 	beq	bf0c <CDWHCIDevice::Initialize()+0x1ec>
    bed8:	e28400a4 	add	r0, r4, #164	; 0xa4
    bedc:	eb0012af 	bl	109a0 <CDWHCIRootPort::Initialize()>
    bee0:	e3500000 	cmp	r0, #0
    bee4:	13a05001 	movne	r5, #1
    bee8:	1affffd7 	bne	be4c <CDWHCIDevice::Initialize()+0x12c>
    beec:	eb0064ad 	bl	251a8 <CLogger::Get()>
    bef0:	e30a3d04 	movw	r3, #44292	; 0xad04
    bef4:	e3a02002 	mov	r2, #2
    bef8:	e3403002 	movt	r3, #2
    befc:	e59f1048 	ldr	r1, [pc, #72]	; bf4c <CDWHCIDevice::Initialize()+0x22c>
    bf00:	e3a05001 	mov	r5, #1
    bf04:	eb006584 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bf08:	eaffffcf 	b	be4c <CDWHCIDevice::Initialize()+0x12c>
    bf0c:	eb0064a5 	bl	251a8 <CLogger::Get()>
    bf10:	e30a3ce0 	movw	r3, #44256	; 0xace0
    bf14:	e3a02002 	mov	r2, #2
    bf18:	e3403002 	movt	r3, #2
    bf1c:	e59f1028 	ldr	r1, [pc, #40]	; bf4c <CDWHCIDevice::Initialize()+0x22c>
    bf20:	e3a05001 	mov	r5, #1
    bf24:	eb00657c 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bf28:	eaffffc7 	b	be4c <CDWHCIDevice::Initialize()+0x12c>
    bf2c:	e30a1930 	movw	r1, #43312	; 0xa930
    bf30:	e30a0978 	movw	r0, #43384	; 0xa978
    bf34:	e3401002 	movt	r1, #2
    bf38:	e3400002 	movt	r0, #2
    bf3c:	e3a02073 	mov	r2, #115	; 0x73
    bf40:	eb006316 	bl	24ba0 <assertion_failed>
    bf44:	e5940004 	ldr	r0, [r4, #4]
    bf48:	eaffffaa 	b	bdf8 <CDWHCIDevice::Initialize()+0xd8>
    bf4c:	0002a924 	.word	0x0002a924

0000bf50 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    bf50:	e92d4030 	push	{r4, r5, lr}
    bf54:	e24dd01c 	sub	sp, sp, #28
    bf58:	e1a05001 	mov	r5, r1
    bf5c:	e28d000c 	add	r0, sp, #12
    bf60:	e1a01002 	mov	r1, r2
    bf64:	eb00007b 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bf68:	f57ff05f 	dmb	sy
    bf6c:	eb00648d 	bl	251a8 <CLogger::Get()>
    bf70:	e1a04000 	mov	r4, r0
    bf74:	e28d000c 	add	r0, sp, #12
    bf78:	eb00007f 	bl	c17c <CDWHCIRegister::Read()>
    bf7c:	e3a02004 	mov	r2, #4
    bf80:	e59f1024 	ldr	r1, [pc, #36]	; bfac <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    bf84:	e30a396c 	movw	r3, #43372	; 0xa96c
    bf88:	e58d5004 	str	r5, [sp, #4]
    bf8c:	e3403002 	movt	r3, #2
    bf90:	e58d0000 	str	r0, [sp]
    bf94:	e1a00004 	mov	r0, r4
    bf98:	eb00655f 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bf9c:	e28d000c 	add	r0, sp, #12
    bfa0:	eb000074 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
    bfa4:	e28dd01c 	add	sp, sp, #28
    bfa8:	e8bd8030 	pop	{r4, r5, pc}
    bfac:	0002a924 	.word	0x0002a924

0000bfb0 <CDWHCIDevice::DumpStatus(unsigned int)>:
    bfb0:	e92d4070 	push	{r4, r5, r6, lr}
    bfb4:	e30a0d20 	movw	r0, #44320	; 0xad20
    bfb8:	e1a05001 	mov	r5, r1
    bfbc:	e3400002 	movt	r0, #2
    bfc0:	e3a01000 	mov	r1, #0
    bfc4:	e3431f98 	movt	r1, #16280	; 0x3f98
    bfc8:	ebfff76e 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bfcc:	e3a01008 	mov	r1, #8
    bfd0:	e30a0d2c 	movw	r0, #44332	; 0xad2c
    bfd4:	e3431f98 	movt	r1, #16280	; 0x3f98
    bfd8:	e3400002 	movt	r0, #2
    bfdc:	e30c4028 	movw	r4, #49192	; 0xc028
    bfe0:	ebfff768 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bfe4:	e3a0100c 	mov	r1, #12
    bfe8:	e30a0d34 	movw	r0, #44340	; 0xad34
    bfec:	e3431f98 	movt	r1, #16280	; 0x3f98
    bff0:	e3400002 	movt	r0, #2
    bff4:	e34041fc 	movt	r4, #508	; 0x1fc
    bff8:	ebfff762 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bffc:	e3a01010 	mov	r1, #16
    c000:	e30a0d3c 	movw	r0, #44348	; 0xad3c
    c004:	e3431f98 	movt	r1, #16280	; 0x3f98
    c008:	e3400002 	movt	r0, #2
    c00c:	e0854004 	add	r4, r5, r4
    c010:	ebfff75c 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c014:	e3a01014 	mov	r1, #20
    c018:	e30a0d44 	movw	r0, #44356	; 0xad44
    c01c:	e3431f98 	movt	r1, #16280	; 0x3f98
    c020:	e3400002 	movt	r0, #2
    c024:	e1a04284 	lsl	r4, r4, #5
    c028:	ebfff756 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c02c:	e3a01018 	mov	r1, #24
    c030:	e30a0d50 	movw	r0, #44368	; 0xad50
    c034:	e3431f98 	movt	r1, #16280	; 0x3f98
    c038:	e3400002 	movt	r0, #2
    c03c:	ebfff751 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c040:	e3a01024 	mov	r1, #36	; 0x24
    c044:	e30a0d5c 	movw	r0, #44380	; 0xad5c
    c048:	e3431f98 	movt	r1, #16280	; 0x3f98
    c04c:	e3400002 	movt	r0, #2
    c050:	ebfff74c 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c054:	e3a01028 	mov	r1, #40	; 0x28
    c058:	e30a0d68 	movw	r0, #44392	; 0xad68
    c05c:	e3431f98 	movt	r1, #16280	; 0x3f98
    c060:	e3400002 	movt	r0, #2
    c064:	ebfff747 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c068:	e3a0102c 	mov	r1, #44	; 0x2c
    c06c:	e30a0d7c 	movw	r0, #44412	; 0xad7c
    c070:	e3431f98 	movt	r1, #16280	; 0x3f98
    c074:	e3400002 	movt	r0, #2
    c078:	ebfff742 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c07c:	e3a01c01 	mov	r1, #256	; 0x100
    c080:	e30a0d8c 	movw	r0, #44428	; 0xad8c
    c084:	e3431f98 	movt	r1, #16280	; 0x3f98
    c088:	e3400002 	movt	r0, #2
    c08c:	ebfff73d 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c090:	e3a01b01 	mov	r1, #1024	; 0x400
    c094:	e30a0da4 	movw	r0, #44452	; 0xada4
    c098:	e3431f98 	movt	r1, #16280	; 0x3f98
    c09c:	e3400002 	movt	r0, #2
    c0a0:	ebfff738 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c0a4:	e3a01e41 	mov	r1, #1040	; 0x410
    c0a8:	e30a0db0 	movw	r0, #44464	; 0xadb0
    c0ac:	e3431f98 	movt	r1, #16280	; 0x3f98
    c0b0:	e3400002 	movt	r0, #2
    c0b4:	ebfff733 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c0b8:	e3001414 	movw	r1, #1044	; 0x414
    c0bc:	e30a0dc8 	movw	r0, #44488	; 0xadc8
    c0c0:	e3431f98 	movt	r1, #16280	; 0x3f98
    c0c4:	e3400002 	movt	r0, #2
    c0c8:	ebfff72e 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c0cc:	e3001418 	movw	r1, #1048	; 0x418
    c0d0:	e30a0ddc 	movw	r0, #44508	; 0xaddc
    c0d4:	e3431f98 	movt	r1, #16280	; 0x3f98
    c0d8:	e3400002 	movt	r0, #2
    c0dc:	ebfff729 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c0e0:	e3a01d11 	mov	r1, #1088	; 0x440
    c0e4:	e30a0df4 	movw	r0, #44532	; 0xadf4
    c0e8:	e3431f98 	movt	r1, #16280	; 0x3f98
    c0ec:	e3400002 	movt	r0, #2
    c0f0:	ebfff724 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c0f4:	e1a01004 	mov	r1, r4
    c0f8:	e30a0e00 	movw	r0, #44544	; 0xae00
    c0fc:	e3400002 	movt	r0, #2
    c100:	ebfff720 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c104:	e2841004 	add	r1, r4, #4
    c108:	e30a0e18 	movw	r0, #44568	; 0xae18
    c10c:	e3400002 	movt	r0, #2
    c110:	ebfff71c 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c114:	e2841008 	add	r1, r4, #8
    c118:	e30a0e30 	movw	r0, #44592	; 0xae30
    c11c:	e3400002 	movt	r0, #2
    c120:	ebfff718 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c124:	e284100c 	add	r1, r4, #12
    c128:	e30a0e44 	movw	r0, #44612	; 0xae44
    c12c:	e3400002 	movt	r0, #2
    c130:	ebfff714 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c134:	e2841010 	add	r1, r4, #16
    c138:	e30a0e5c 	movw	r0, #44636	; 0xae5c
    c13c:	e3400002 	movt	r0, #2
    c140:	ebfff710 	bl	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c144:	e2841014 	add	r1, r4, #20
    c148:	e30a0e74 	movw	r0, #44660	; 0xae74
    c14c:	e3400002 	movt	r0, #2
    c150:	e8bd4070 	pop	{r4, r5, r6, lr}
    c154:	eafff70b 	b	9d88 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>

0000c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    c158:	e3a02000 	mov	r2, #0
    c15c:	e5801004 	str	r1, [r0, #4]
    c160:	e5802000 	str	r2, [r0]
    c164:	e12fff1e 	bx	lr

0000c168 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    c168:	e3a0c001 	mov	ip, #1
    c16c:	e9800006 	stmib	r0, {r1, r2}
    c170:	e580c000 	str	ip, [r0]
    c174:	e12fff1e 	bx	lr

0000c178 <CDWHCIRegister::~CDWHCIRegister()>:
    c178:	e12fff1e 	bx	lr

0000c17c <CDWHCIRegister::Read()>:
    c17c:	e5901004 	ldr	r1, [r0, #4]
    c180:	e1a03000 	mov	r3, r0
    c184:	e3a02001 	mov	r2, #1
    c188:	e5910000 	ldr	r0, [r1]
    c18c:	e5832000 	str	r2, [r3]
    c190:	e5830008 	str	r0, [r3, #8]
    c194:	e12fff1e 	bx	lr

0000c198 <CDWHCIRegister::Write()>:
    c198:	e5903000 	ldr	r3, [r0]
    c19c:	e92d4010 	push	{r4, lr}
    c1a0:	e3530000 	cmp	r3, #0
    c1a4:	e1a04000 	mov	r4, r0
    c1a8:	1a000005 	bne	c1c4 <CDWHCIRegister::Write()+0x2c>
    c1ac:	e30a1e8c 	movw	r1, #44684	; 0xae8c
    c1b0:	e30a0ea0 	movw	r0, #44704	; 0xaea0
    c1b4:	e3401002 	movt	r1, #2
    c1b8:	e3400002 	movt	r0, #2
    c1bc:	e3a02035 	mov	r2, #53	; 0x35
    c1c0:	eb006276 	bl	24ba0 <assertion_failed>
    c1c4:	e5942008 	ldr	r2, [r4, #8]
    c1c8:	e5943004 	ldr	r3, [r4, #4]
    c1cc:	e5832000 	str	r2, [r3]
    c1d0:	e8bd8010 	pop	{r4, pc}

0000c1d4 <CDWHCIRegister::Get() const>:
    c1d4:	e5903000 	ldr	r3, [r0]
    c1d8:	e92d4010 	push	{r4, lr}
    c1dc:	e3530000 	cmp	r3, #0
    c1e0:	e1a04000 	mov	r4, r0
    c1e4:	1a000005 	bne	c200 <CDWHCIRegister::Get() const+0x2c>
    c1e8:	e30a1e8c 	movw	r1, #44684	; 0xae8c
    c1ec:	e30a0ea0 	movw	r0, #44704	; 0xaea0
    c1f0:	e3401002 	movt	r1, #2
    c1f4:	e3400002 	movt	r0, #2
    c1f8:	e3a0203b 	mov	r2, #59	; 0x3b
    c1fc:	eb006267 	bl	24ba0 <assertion_failed>
    c200:	e5940008 	ldr	r0, [r4, #8]
    c204:	e8bd8010 	pop	{r4, pc}

0000c208 <CDWHCIRegister::Set(unsigned int)>:
    c208:	e3a03001 	mov	r3, #1
    c20c:	e5801008 	str	r1, [r0, #8]
    c210:	e5803000 	str	r3, [r0]
    c214:	e12fff1e 	bx	lr

0000c218 <CDWHCIRegister::IsSet(unsigned int) const>:
    c218:	e5903000 	ldr	r3, [r0]
    c21c:	e92d4070 	push	{r4, r5, r6, lr}
    c220:	e3530000 	cmp	r3, #0
    c224:	e1a04000 	mov	r4, r0
    c228:	e1a05001 	mov	r5, r1
    c22c:	0a000004 	beq	c244 <CDWHCIRegister::IsSet(unsigned int) const+0x2c>
    c230:	e5943008 	ldr	r3, [r4, #8]
    c234:	e1150003 	tst	r5, r3
    c238:	13a00001 	movne	r0, #1
    c23c:	03a00000 	moveq	r0, #0
    c240:	e8bd8070 	pop	{r4, r5, r6, pc}
    c244:	e30a1e8c 	movw	r1, #44684	; 0xae8c
    c248:	e30a0ea0 	movw	r0, #44704	; 0xaea0
    c24c:	e3401002 	movt	r1, #2
    c250:	e3400002 	movt	r0, #2
    c254:	e3a02047 	mov	r2, #71	; 0x47
    c258:	eb006250 	bl	24ba0 <assertion_failed>
    c25c:	eafffff3 	b	c230 <CDWHCIRegister::IsSet(unsigned int) const+0x18>

0000c260 <CDWHCIRegister::And(unsigned int)>:
    c260:	e5903000 	ldr	r3, [r0]
    c264:	e92d4070 	push	{r4, r5, r6, lr}
    c268:	e3530000 	cmp	r3, #0
    c26c:	e1a04000 	mov	r4, r0
    c270:	e1a05001 	mov	r5, r1
    c274:	1a000005 	bne	c290 <CDWHCIRegister::And(unsigned int)+0x30>
    c278:	e30a1e8c 	movw	r1, #44684	; 0xae8c
    c27c:	e30a0ea0 	movw	r0, #44704	; 0xaea0
    c280:	e3401002 	movt	r1, #2
    c284:	e3400002 	movt	r0, #2
    c288:	e3a0204d 	mov	r2, #77	; 0x4d
    c28c:	eb006243 	bl	24ba0 <assertion_failed>
    c290:	e5941008 	ldr	r1, [r4, #8]
    c294:	e0011005 	and	r1, r1, r5
    c298:	e5841008 	str	r1, [r4, #8]
    c29c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c2a0 <CDWHCIRegister::Or(unsigned int)>:
    c2a0:	e5903000 	ldr	r3, [r0]
    c2a4:	e92d4070 	push	{r4, r5, r6, lr}
    c2a8:	e3530000 	cmp	r3, #0
    c2ac:	e1a04000 	mov	r4, r0
    c2b0:	e1a05001 	mov	r5, r1
    c2b4:	1a000005 	bne	c2d0 <CDWHCIRegister::Or(unsigned int)+0x30>
    c2b8:	e30a1e8c 	movw	r1, #44684	; 0xae8c
    c2bc:	e30a0ea0 	movw	r0, #44704	; 0xaea0
    c2c0:	e3401002 	movt	r1, #2
    c2c4:	e3400002 	movt	r0, #2
    c2c8:	e3a02053 	mov	r2, #83	; 0x53
    c2cc:	eb006233 	bl	24ba0 <assertion_failed>
    c2d0:	e5941008 	ldr	r1, [r4, #8]
    c2d4:	e1811005 	orr	r1, r1, r5
    c2d8:	e5841008 	str	r1, [r4, #8]
    c2dc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c2e0 <CDWHCIRegister::ClearBit(unsigned int)>:
    c2e0:	e5903000 	ldr	r3, [r0]
    c2e4:	e92d4070 	push	{r4, r5, r6, lr}
    c2e8:	e3530000 	cmp	r3, #0
    c2ec:	e1a04000 	mov	r4, r0
    c2f0:	e1a05001 	mov	r5, r1
    c2f4:	0a00000c 	beq	c32c <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    c2f8:	e355001f 	cmp	r5, #31
    c2fc:	9a000005 	bls	c318 <CDWHCIRegister::ClearBit(unsigned int)+0x38>
    c300:	e30a1e8c 	movw	r1, #44684	; 0xae8c
    c304:	e30a0eac 	movw	r0, #44716	; 0xaeac
    c308:	e3401002 	movt	r1, #2
    c30c:	e3400002 	movt	r0, #2
    c310:	e3a0205a 	mov	r2, #90	; 0x5a
    c314:	eb006221 	bl	24ba0 <assertion_failed>
    c318:	e5941008 	ldr	r1, [r4, #8]
    c31c:	e3a03001 	mov	r3, #1
    c320:	e1c11513 	bic	r1, r1, r3, lsl r5
    c324:	e5841008 	str	r1, [r4, #8]
    c328:	e8bd8070 	pop	{r4, r5, r6, pc}
    c32c:	e30a1e8c 	movw	r1, #44684	; 0xae8c
    c330:	e30a0ea0 	movw	r0, #44704	; 0xaea0
    c334:	e3401002 	movt	r1, #2
    c338:	e3400002 	movt	r0, #2
    c33c:	e3a02059 	mov	r2, #89	; 0x59
    c340:	eb006216 	bl	24ba0 <assertion_failed>
    c344:	eaffffeb 	b	c2f8 <CDWHCIRegister::ClearBit(unsigned int)+0x18>

0000c348 <CDWHCIRegister::SetBit(unsigned int)>:
    c348:	e5903000 	ldr	r3, [r0]
    c34c:	e92d4070 	push	{r4, r5, r6, lr}
    c350:	e3530000 	cmp	r3, #0
    c354:	e1a04000 	mov	r4, r0
    c358:	e1a05001 	mov	r5, r1
    c35c:	0a00000c 	beq	c394 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    c360:	e355001f 	cmp	r5, #31
    c364:	9a000005 	bls	c380 <CDWHCIRegister::SetBit(unsigned int)+0x38>
    c368:	e30a1e8c 	movw	r1, #44684	; 0xae8c
    c36c:	e30a0eac 	movw	r0, #44716	; 0xaeac
    c370:	e3401002 	movt	r1, #2
    c374:	e3400002 	movt	r0, #2
    c378:	e3a02061 	mov	r2, #97	; 0x61
    c37c:	eb006207 	bl	24ba0 <assertion_failed>
    c380:	e5941008 	ldr	r1, [r4, #8]
    c384:	e3a03001 	mov	r3, #1
    c388:	e1811513 	orr	r1, r1, r3, lsl r5
    c38c:	e5841008 	str	r1, [r4, #8]
    c390:	e8bd8070 	pop	{r4, r5, r6, pc}
    c394:	e30a1e8c 	movw	r1, #44684	; 0xae8c
    c398:	e30a0ea0 	movw	r0, #44704	; 0xaea0
    c39c:	e3401002 	movt	r1, #2
    c3a0:	e3400002 	movt	r0, #2
    c3a4:	e3a02060 	mov	r2, #96	; 0x60
    c3a8:	eb0061fc 	bl	24ba0 <assertion_failed>
    c3ac:	eaffffeb 	b	c360 <CDWHCIRegister::SetBit(unsigned int)+0x18>

0000c3b0 <CDWHCIRegister::ClearAll()>:
    c3b0:	e3a02000 	mov	r2, #0
    c3b4:	e3a03001 	mov	r3, #1
    c3b8:	e5802008 	str	r2, [r0, #8]
    c3bc:	e5803000 	str	r3, [r0]
    c3c0:	e12fff1e 	bx	lr

0000c3c4 <CDWHCIRegister::SetAll()>:
    c3c4:	e3e02000 	mvn	r2, #0
    c3c8:	e3a03001 	mov	r3, #1
    c3cc:	e5802008 	str	r2, [r0, #8]
    c3d0:	e5803000 	str	r3, [r0]
    c3d4:	e12fff1e 	bx	lr

0000c3d8 <CDWHCIRegister::Dump() const>:
    c3d8:	e5903000 	ldr	r3, [r0]
    c3dc:	e92d4010 	push	{r4, lr}
    c3e0:	e3530000 	cmp	r3, #0
    c3e4:	e24dd008 	sub	sp, sp, #8
    c3e8:	e1a04000 	mov	r4, r0
    c3ec:	1a00000b 	bne	c420 <CDWHCIRegister::Dump() const+0x48>
    c3f0:	eb00636c 	bl	251a8 <CLogger::Get()>
    c3f4:	e5942004 	ldr	r2, [r4, #4]
    c3f8:	e30a3eec 	movw	r3, #44780	; 0xaeec
    c3fc:	e30a1ee4 	movw	r1, #44772	; 0xaee4
    c400:	e7eb2052 	ubfx	r2, r2, #0, #12
    c404:	e3403002 	movt	r3, #2
    c408:	e58d2000 	str	r2, [sp]
    c40c:	e3401002 	movt	r1, #2
    c410:	e3a02004 	mov	r2, #4
    c414:	eb006440 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c418:	e28dd008 	add	sp, sp, #8
    c41c:	e8bd8010 	pop	{r4, pc}
    c420:	eb006360 	bl	251a8 <CLogger::Get()>
    c424:	e9941004 	ldmib	r4, {r2, ip}
    c428:	e30a3ec8 	movw	r3, #44744	; 0xaec8
    c42c:	e30a1ee4 	movw	r1, #44772	; 0xaee4
    c430:	e3403002 	movt	r3, #2
    c434:	e7eb2052 	ubfx	r2, r2, #0, #12
    c438:	e3401002 	movt	r1, #2
    c43c:	e88d1004 	stm	sp, {r2, ip}
    c440:	e3a02004 	mov	r2, #4
    c444:	eb006434 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c448:	e28dd008 	add	sp, sp, #8
    c44c:	e8bd8010 	pop	{r4, pc}

0000c450 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    c450:	e92d4010 	push	{r4, lr}
    c454:	e1a04000 	mov	r4, r0
    c458:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    c45c:	e3500000 	cmp	r0, #0
    c460:	0a000002 	beq	c470 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    c464:	e5903000 	ldr	r3, [r0]
    c468:	e5933004 	ldr	r3, [r3, #4]
    c46c:	e12fff33 	blx	r3
    c470:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    c474:	e3a03000 	mov	r3, #0
    c478:	e5843050 	str	r3, [r4, #80]	; 0x50
    c47c:	e1500003 	cmp	r0, r3
    c480:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c484:	0a000000 	beq	c48c <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    c488:	eb0056c5 	bl	21fa4 <operator delete[](void*)>
    c48c:	e1a00004 	mov	r0, r4
    c490:	e8bd8010 	pop	{r4, pc}

0000c494 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    c494:	e300c7dc 	movw	ip, #2012	; 0x7dc
    c498:	e111000c 	tst	r1, ip
    c49c:	e92d4070 	push	{r4, r5, r6, lr}
    c4a0:	e1a04000 	mov	r4, r0
    c4a4:	e5801044 	str	r1, [r0, #68]	; 0x44
    c4a8:	0a000006 	beq	c4c8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x34>
    c4ac:	e3110010 	tst	r1, #16
    c4b0:	08bd8070 	popeq	{r4, r5, r6, pc}
    c4b4:	e5900004 	ldr	r0, [r0, #4]
    c4b8:	eb000842 	bl	e5c8 <CUSBRequest::IsCompleteOnNAK() const>
    c4bc:	e3500000 	cmp	r0, #0
    c4c0:	1a000044 	bne	c5d8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
    c4c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c4c8:	e5901010 	ldr	r1, [r0, #16]
    c4cc:	e5905034 	ldr	r5, [r0, #52]	; 0x34
    c4d0:	e3510000 	cmp	r1, #0
    c4d4:	e5901030 	ldr	r1, [r0, #48]	; 0x30
    c4d8:	e0455002 	sub	r5, r5, r2
    c4dc:	e0413003 	sub	r3, r1, r3
    c4e0:	1a000018 	bne	c548 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb4>
    c4e4:	e5901038 	ldr	r1, [r0, #56]	; 0x38
    c4e8:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    c4ec:	e0811003 	add	r1, r1, r3
    c4f0:	e5801038 	str	r1, [r0, #56]	; 0x38
    c4f4:	e0823003 	add	r3, r2, r3
    c4f8:	e580304c 	str	r3, [r0, #76]	; 0x4c
    c4fc:	e594200c 	ldr	r2, [r4, #12]
    c500:	e1a01005 	mov	r1, r5
    c504:	e594001c 	ldr	r0, [r4, #28]
    c508:	eb0006d5 	bl	e064 <CUSBEndpoint::SkipPID(unsigned int, int)>
    c50c:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    c510:	e1550002 	cmp	r5, r2
    c514:	8a000027 	bhi	c5b8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x124>
    c518:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    c51c:	e0422005 	sub	r2, r2, r5
    c520:	e5941038 	ldr	r1, [r4, #56]	; 0x38
    c524:	e594c030 	ldr	ip, [r4, #48]	; 0x30
    c528:	e0403001 	sub	r3, r0, r1
    c52c:	e584202c 	str	r2, [r4, #44]	; 0x2c
    c530:	e153000c 	cmp	r3, ip
    c534:	28bd8070 	popcs	{r4, r5, r6, pc}
    c538:	e1500001 	cmp	r0, r1
    c53c:	3a00003b 	bcc	c630 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x19c>
    c540:	e5843030 	str	r3, [r4, #48]	; 0x30
    c544:	e8bd8070 	pop	{r4, r5, r6, pc}
    c548:	e5902014 	ldr	r2, [r0, #20]
    c54c:	e2920000 	adds	r0, r2, #0
    c550:	13a00001 	movne	r0, #1
    c554:	e3530000 	cmp	r3, #0
    c558:	13a00000 	movne	r0, #0
    c55c:	e3500000 	cmp	r0, #0
    c560:	0a000009 	beq	c58c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf8>
    c564:	e3510000 	cmp	r1, #0
    c568:	15941024 	ldrne	r1, [r4, #36]	; 0x24
    c56c:	10010591 	mulne	r1, r1, r5
    c570:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    c574:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c578:	e0822001 	add	r2, r2, r1
    c57c:	e5842038 	str	r2, [r4, #56]	; 0x38
    c580:	e0831001 	add	r1, r3, r1
    c584:	e584104c 	str	r1, [r4, #76]	; 0x4c
    c588:	eaffffdb 	b	c4fc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x68>
    c58c:	e5941038 	ldr	r1, [r4, #56]	; 0x38
    c590:	e3520000 	cmp	r2, #0
    c594:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c598:	e0811003 	add	r1, r1, r3
    c59c:	e5841038 	str	r1, [r4, #56]	; 0x38
    c5a0:	e0823003 	add	r3, r2, r3
    c5a4:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c5a8:	1affffd3 	bne	c4fc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x68>
    c5ac:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    c5b0:	e1550002 	cmp	r5, r2
    c5b4:	9affffd7 	bls	c518 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x84>
    c5b8:	e3a020c3 	mov	r2, #195	; 0xc3
    c5bc:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c5c0:	e30a0f58 	movw	r0, #44888	; 0xaf58
    c5c4:	e3401002 	movt	r1, #2
    c5c8:	e3400002 	movt	r0, #2
    c5cc:	eb006173 	bl	24ba0 <assertion_failed>
    c5d0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    c5d4:	eaffffcf 	b	c518 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x84>
    c5d8:	e594001c 	ldr	r0, [r4, #28]
    c5dc:	eb000679 	bl	dfc8 <CUSBEndpoint::GetType() const>
    c5e0:	e3500001 	cmp	r0, #1
    c5e4:	0a000005 	beq	c600 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x16c>
    c5e8:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c5ec:	e30a0f24 	movw	r0, #44836	; 0xaf24
    c5f0:	e3401002 	movt	r1, #2
    c5f4:	e3400002 	movt	r0, #2
    c5f8:	e3a020a6 	mov	r2, #166	; 0xa6
    c5fc:	eb006167 	bl	24ba0 <assertion_failed>
    c600:	e5943008 	ldr	r3, [r4, #8]
    c604:	e3530000 	cmp	r3, #0
    c608:	1a000005 	bne	c624 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x190>
    c60c:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c610:	e30a0f50 	movw	r0, #44880	; 0xaf50
    c614:	e3401002 	movt	r1, #2
    c618:	e3400002 	movt	r0, #2
    c61c:	e3a020a7 	mov	r2, #167	; 0xa7
    c620:	eb00615e 	bl	24ba0 <assertion_failed>
    c624:	e3a03000 	mov	r3, #0
    c628:	e584302c 	str	r3, [r4, #44]	; 0x2c
    c62c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c630:	e3a020c9 	mov	r2, #201	; 0xc9
    c634:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c638:	e30a0f7c 	movw	r0, #44924	; 0xaf7c
    c63c:	e3401002 	movt	r1, #2
    c640:	e3400002 	movt	r0, #2
    c644:	eb006155 	bl	24ba0 <assertion_failed>
    c648:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c64c:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    c650:	e0433002 	sub	r3, r3, r2
    c654:	eaffffb9 	b	c540 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xac>

0000c658 <CDWHCITransferStageData::SetSplitComplete(int)>:
    c658:	e5903010 	ldr	r3, [r0, #16]
    c65c:	e92d4070 	push	{r4, r5, r6, lr}
    c660:	e3530000 	cmp	r3, #0
    c664:	e1a04000 	mov	r4, r0
    c668:	e1a05001 	mov	r5, r1
    c66c:	1a000005 	bne	c688 <CDWHCITransferStageData::SetSplitComplete(int)+0x30>
    c670:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c674:	e30a0fa8 	movw	r0, #44968	; 0xafa8
    c678:	e3401002 	movt	r1, #2
    c67c:	e3400002 	movt	r0, #2
    c680:	e3a020d0 	mov	r2, #208	; 0xd0
    c684:	eb006145 	bl	24ba0 <assertion_failed>
    c688:	e5845014 	str	r5, [r4, #20]
    c68c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c690 <CDWHCITransferStageData::SetState(unsigned int)>:
    c690:	e580103c 	str	r1, [r0, #60]	; 0x3c
    c694:	e12fff1e 	bx	lr

0000c698 <CDWHCITransferStageData::GetState() const>:
    c698:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    c69c:	e12fff1e 	bx	lr

0000c6a0 <CDWHCITransferStageData::SetSubState(unsigned int)>:
    c6a0:	e5801040 	str	r1, [r0, #64]	; 0x40
    c6a4:	e12fff1e 	bx	lr

0000c6a8 <CDWHCITransferStageData::GetSubState() const>:
    c6a8:	e5900040 	ldr	r0, [r0, #64]	; 0x40
    c6ac:	e12fff1e 	bx	lr

0000c6b0 <CDWHCITransferStageData::BeginSplitCycle()>:
    c6b0:	e3a00001 	mov	r0, #1
    c6b4:	e12fff1e 	bx	lr

0000c6b8 <CDWHCITransferStageData::GetChannelNumber() const>:
    c6b8:	e5900000 	ldr	r0, [r0]
    c6bc:	e12fff1e 	bx	lr

0000c6c0 <CDWHCITransferStageData::IsPeriodic() const>:
    c6c0:	e92d4010 	push	{r4, lr}
    c6c4:	e1a04000 	mov	r4, r0
    c6c8:	e590001c 	ldr	r0, [r0, #28]
    c6cc:	e3500000 	cmp	r0, #0
    c6d0:	0a000006 	beq	c6f0 <CDWHCITransferStageData::IsPeriodic() const+0x30>
    c6d4:	eb00063b 	bl	dfc8 <CUSBEndpoint::GetType() const>
    c6d8:	e2400002 	sub	r0, r0, #2
    c6dc:	e6ef0070 	uxtb	r0, r0
    c6e0:	e3500001 	cmp	r0, #1
    c6e4:	83a00000 	movhi	r0, #0
    c6e8:	93a00001 	movls	r0, #1
    c6ec:	e8bd8010 	pop	{r4, pc}
    c6f0:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c6f4:	e30a0fbc 	movw	r0, #44988	; 0xafbc
    c6f8:	e3401002 	movt	r1, #2
    c6fc:	e3400002 	movt	r0, #2
    c700:	e3a020f5 	mov	r2, #245	; 0xf5
    c704:	eb006125 	bl	24ba0 <assertion_failed>
    c708:	e594001c 	ldr	r0, [r4, #28]
    c70c:	eafffff0 	b	c6d4 <CDWHCITransferStageData::IsPeriodic() const+0x14>

0000c710 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)>:
    c710:	e92d4070 	push	{r4, r5, r6, lr}
    c714:	e2525000 	subs	r5, r2, #0
    c718:	e59d6010 	ldr	r6, [sp, #16]
    c71c:	e3a02000 	mov	r2, #0
    c720:	e1a04000 	mov	r4, r0
    c724:	e5801000 	str	r1, [r0]
    c728:	e5805004 	str	r5, [r0, #4]
    c72c:	e5803008 	str	r3, [r0, #8]
    c730:	e580600c 	str	r6, [r0, #12]
    c734:	e5802014 	str	r2, [r0, #20]
    c738:	e5802038 	str	r2, [r0, #56]	; 0x38
    c73c:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c740:	e5802040 	str	r2, [r0, #64]	; 0x40
    c744:	e5802044 	str	r2, [r0, #68]	; 0x44
    c748:	e5802048 	str	r2, [r0, #72]	; 0x48
    c74c:	e5802050 	str	r2, [r0, #80]	; 0x50
    c750:	0a000084 	beq	c968 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x258>
    c754:	e1a00005 	mov	r0, r5
    c758:	eb00072a 	bl	e408 <CUSBRequest::GetEndpoint() const>
    c75c:	e3500000 	cmp	r0, #0
    c760:	e584001c 	str	r0, [r4, #28]
    c764:	0a000086 	beq	c984 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x274>
    c768:	eb000604 	bl	df80 <CUSBEndpoint::GetDevice() const>
    c76c:	e3500000 	cmp	r0, #0
    c770:	e5840018 	str	r0, [r4, #24]
    c774:	0a00008a 	beq	c9a4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x294>
    c778:	eb0002a1 	bl	d204 <CUSBDevice::GetSpeed() const>
    c77c:	e5c40020 	strb	r0, [r4, #32]
    c780:	e594001c 	ldr	r0, [r4, #28]
    c784:	eb000615 	bl	dfe0 <CUSBEndpoint::GetMaxPacketSize() const>
    c788:	e5840024 	str	r0, [r4, #36]	; 0x24
    c78c:	e5940018 	ldr	r0, [r4, #24]
    c790:	eb00029d 	bl	d20c <CUSBDevice::IsSplit() const>
    c794:	e3560000 	cmp	r6, #0
    c798:	e5840010 	str	r0, [r4, #16]
    c79c:	0a000042 	beq	c8ac <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x19c>
    c7a0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    c7a4:	e3530000 	cmp	r3, #0
    c7a8:	0a000005 	beq	c7c4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0xb4>
    c7ac:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c7b0:	e30a0fec 	movw	r0, #45036	; 0xafec
    c7b4:	e3401002 	movt	r1, #2
    c7b8:	e3400002 	movt	r0, #2
    c7bc:	e3a0205c 	mov	r2, #92	; 0x5c
    c7c0:	eb0060f6 	bl	24ba0 <assertion_failed>
    c7c4:	e3a00004 	mov	r0, #4
    c7c8:	eb0055f3 	bl	21f9c <operator new[](unsigned int)>
    c7cc:	e3a02000 	mov	r2, #0
    c7d0:	e3a03001 	mov	r3, #1
    c7d4:	e5842028 	str	r2, [r4, #40]	; 0x28
    c7d8:	e5842030 	str	r2, [r4, #48]	; 0x30
    c7dc:	e584302c 	str	r3, [r4, #44]	; 0x2c
    c7e0:	e5843034 	str	r3, [r4, #52]	; 0x34
    c7e4:	e5840048 	str	r0, [r4, #72]	; 0x48
    c7e8:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c7ec:	e3100003 	tst	r0, #3
    c7f0:	1a000026 	bne	c890 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x180>
    c7f4:	e5943010 	ldr	r3, [r4, #16]
    c7f8:	e3530000 	cmp	r3, #0
    c7fc:	0a00000a 	beq	c82c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x11c>
    c800:	e1a00004 	mov	r0, r4
    c804:	ebffffad 	bl	c6c0 <CDWHCITransferStageData::IsPeriodic() const>
    c808:	e3500000 	cmp	r0, #0
    c80c:	0a000018 	beq	c874 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x164>
    c810:	e3a00014 	mov	r0, #20
    c814:	eb0055df 	bl	21f98 <operator new(unsigned int)>
    c818:	e1a05000 	mov	r5, r0
    c81c:	eb000f1e 	bl	1049c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    c820:	e5845050 	str	r5, [r4, #80]	; 0x50
    c824:	e1a00004 	mov	r0, r4
    c828:	e8bd8070 	pop	{r4, r5, r6, pc}
    c82c:	e5940018 	ldr	r0, [r4, #24]
    c830:	eb000277 	bl	d214 <CUSBDevice::GetHubAddress() const>
    c834:	e3500000 	cmp	r0, #0
    c838:	1afffff9 	bne	c824 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x114>
    c83c:	e5d43020 	ldrb	r3, [r4, #32]
    c840:	e3530002 	cmp	r3, #2
    c844:	0afffff6 	beq	c824 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x114>
    c848:	e1a00004 	mov	r0, r4
    c84c:	ebffff9b 	bl	c6c0 <CDWHCITransferStageData::IsPeriodic() const>
    c850:	e1a06000 	mov	r6, r0
    c854:	e3a0000c 	mov	r0, #12
    c858:	eb0055ce 	bl	21f98 <operator new(unsigned int)>
    c85c:	e1a01006 	mov	r1, r6
    c860:	e1a05000 	mov	r5, r0
    c864:	eb001708 	bl	1248c <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(int)>
    c868:	e5845050 	str	r5, [r4, #80]	; 0x50
    c86c:	e1a00004 	mov	r0, r4
    c870:	e8bd8070 	pop	{r4, r5, r6, pc}
    c874:	e3a00010 	mov	r0, #16
    c878:	eb0055c6 	bl	21f98 <operator new(unsigned int)>
    c87c:	e1a05000 	mov	r5, r0
    c880:	eb000e56 	bl	101e0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    c884:	e5845050 	str	r5, [r4, #80]	; 0x50
    c888:	e1a00004 	mov	r0, r4
    c88c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c890:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c894:	e30b0018 	movw	r0, #45080	; 0xb018
    c898:	e3401002 	movt	r1, #2
    c89c:	e3400002 	movt	r0, #2
    c8a0:	e3a02068 	mov	r2, #104	; 0x68
    c8a4:	eb0060bd 	bl	24ba0 <assertion_failed>
    c8a8:	eaffffd1 	b	c7f4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0xe4>
    c8ac:	e1a01006 	mov	r1, r6
    c8b0:	e594001c 	ldr	r0, [r4, #28]
    c8b4:	eb0005d8 	bl	e01c <CUSBEndpoint::GetNextPID(int)>
    c8b8:	e3500000 	cmp	r0, #0
    c8bc:	e1a00005 	mov	r0, r5
    c8c0:	0a00001e 	beq	c940 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x230>
    c8c4:	eb00070a 	bl	e4f4 <CUSBRequest::GetBuffer()>
    c8c8:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c8cc:	e1a00005 	mov	r0, r5
    c8d0:	eb00071a 	bl	e540 <CUSBRequest::GetBufLen() const>
    c8d4:	e1a06000 	mov	r6, r0
    c8d8:	e5840028 	str	r0, [r4, #40]	; 0x28
    c8dc:	e5945024 	ldr	r5, [r4, #36]	; 0x24
    c8e0:	e2450001 	sub	r0, r5, #1
    c8e4:	e0800006 	add	r0, r0, r6
    c8e8:	e1a01005 	mov	r1, r5
    c8ec:	eb005500 	bl	21cf4 <__aeabi_uidiv>
    c8f0:	e5943010 	ldr	r3, [r4, #16]
    c8f4:	e3530000 	cmp	r3, #0
    c8f8:	e584002c 	str	r0, [r4, #44]	; 0x2c
    c8fc:	0a000015 	beq	c958 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x248>
    c900:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
    c904:	e1550006 	cmp	r5, r6
    c908:	e3a03001 	mov	r3, #1
    c90c:	e5843034 	str	r3, [r4, #52]	; 0x34
    c910:	21a05006 	movcs	r5, r6
    c914:	e5845030 	str	r5, [r4, #48]	; 0x30
    c918:	e3500000 	cmp	r0, #0
    c91c:	1affffb2 	bne	c7ec <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0xdc>
    c920:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c924:	e30b0000 	movw	r0, #45056	; 0xb000
    c928:	e3401002 	movt	r1, #2
    c92c:	e3400002 	movt	r0, #2
    c930:	e3a02067 	mov	r2, #103	; 0x67
    c934:	eb006099 	bl	24ba0 <assertion_failed>
    c938:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
    c93c:	eaffffaa 	b	c7ec <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0xdc>
    c940:	eb0006d3 	bl	e494 <CUSBRequest::GetSetupData()>
    c944:	e3a03008 	mov	r3, #8
    c948:	e1a06003 	mov	r6, r3
    c94c:	e5843028 	str	r3, [r4, #40]	; 0x28
    c950:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c954:	eaffffe0 	b	c8dc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x1cc>
    c958:	e5840034 	str	r0, [r4, #52]	; 0x34
    c95c:	e5846030 	str	r6, [r4, #48]	; 0x30
    c960:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
    c964:	eaffffeb 	b	c918 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x208>
    c968:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c96c:	e30a0fd0 	movw	r0, #45008	; 0xafd0
    c970:	e3401002 	movt	r1, #2
    c974:	e3400002 	movt	r0, #2
    c978:	e3a0202c 	mov	r2, #44	; 0x2c
    c97c:	eb006087 	bl	24ba0 <assertion_failed>
    c980:	eaffff73 	b	c754 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x44>
    c984:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c988:	e30a0fbc 	movw	r0, #44988	; 0xafbc
    c98c:	e3401002 	movt	r1, #2
    c990:	e3400002 	movt	r0, #2
    c994:	e3a0202f 	mov	r2, #47	; 0x2f
    c998:	eb006080 	bl	24ba0 <assertion_failed>
    c99c:	e594001c 	ldr	r0, [r4, #28]
    c9a0:	eaffff70 	b	c768 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x58>
    c9a4:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c9a8:	e30a0fdc 	movw	r0, #45020	; 0xafdc
    c9ac:	e3401002 	movt	r1, #2
    c9b0:	e3400002 	movt	r0, #2
    c9b4:	e3a02031 	mov	r2, #49	; 0x31
    c9b8:	eb006078 	bl	24ba0 <assertion_failed>
    c9bc:	e5940018 	ldr	r0, [r4, #24]
    c9c0:	eaffff6c 	b	c778 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x68>

0000c9c4 <CDWHCITransferStageData::GetDeviceAddress() const>:
    c9c4:	e5903018 	ldr	r3, [r0, #24]
    c9c8:	e3530000 	cmp	r3, #0
    c9cc:	0a000001 	beq	c9d8 <CDWHCITransferStageData::GetDeviceAddress() const+0x14>
    c9d0:	e1a00003 	mov	r0, r3
    c9d4:	ea000208 	b	d1fc <CUSBDevice::GetAddress() const>
    c9d8:	e92d4010 	push	{r4, lr}
    c9dc:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    c9e0:	e1a04000 	mov	r4, r0
    c9e4:	e3401002 	movt	r1, #2
    c9e8:	e30a0fdc 	movw	r0, #45020	; 0xafdc
    c9ec:	e3a020fe 	mov	r2, #254	; 0xfe
    c9f0:	e3400002 	movt	r0, #2
    c9f4:	eb006069 	bl	24ba0 <assertion_failed>
    c9f8:	e5943018 	ldr	r3, [r4, #24]
    c9fc:	e8bd4010 	pop	{r4, lr}
    ca00:	e1a00003 	mov	r0, r3
    ca04:	ea0001fc 	b	d1fc <CUSBDevice::GetAddress() const>

0000ca08 <CDWHCITransferStageData::GetEndpointType() const>:
    ca08:	e92d4010 	push	{r4, lr}
    ca0c:	e1a04000 	mov	r4, r0
    ca10:	e590001c 	ldr	r0, [r0, #28]
    ca14:	e3500000 	cmp	r0, #0
    ca18:	0a000011 	beq	ca64 <CDWHCITransferStageData::GetEndpointType() const+0x5c>
    ca1c:	eb000569 	bl	dfc8 <CUSBEndpoint::GetType() const>
    ca20:	e3500001 	cmp	r0, #1
    ca24:	0a00000c 	beq	ca5c <CDWHCITransferStageData::GetEndpointType() const+0x54>
    ca28:	3a000009 	bcc	ca54 <CDWHCITransferStageData::GetEndpointType() const+0x4c>
    ca2c:	e3500002 	cmp	r0, #2
    ca30:	1a000001 	bne	ca3c <CDWHCITransferStageData::GetEndpointType() const+0x34>
    ca34:	e3a00003 	mov	r0, #3
    ca38:	e8bd8010 	pop	{r4, pc}
    ca3c:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    ca40:	e30b0138 	movw	r0, #45368	; 0xb138
    ca44:	e3401002 	movt	r1, #2
    ca48:	e3400002 	movt	r0, #2
    ca4c:	e3002117 	movw	r2, #279	; 0x117
    ca50:	eb006052 	bl	24ba0 <assertion_failed>
    ca54:	e3a00000 	mov	r0, #0
    ca58:	e8bd8010 	pop	{r4, pc}
    ca5c:	e3a00002 	mov	r0, #2
    ca60:	e8bd8010 	pop	{r4, pc}
    ca64:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    ca68:	e30a0fbc 	movw	r0, #44988	; 0xafbc
    ca6c:	e3401002 	movt	r1, #2
    ca70:	e3400002 	movt	r0, #2
    ca74:	e3a02f41 	mov	r2, #260	; 0x104
    ca78:	eb006048 	bl	24ba0 <assertion_failed>
    ca7c:	e594001c 	ldr	r0, [r4, #28]
    ca80:	eaffffe5 	b	ca1c <CDWHCITransferStageData::GetEndpointType() const+0x14>

0000ca84 <CDWHCITransferStageData::GetEndpointNumber() const>:
    ca84:	e590301c 	ldr	r3, [r0, #28]
    ca88:	e3530000 	cmp	r3, #0
    ca8c:	0a000001 	beq	ca98 <CDWHCITransferStageData::GetEndpointNumber() const+0x14>
    ca90:	e1a00003 	mov	r0, r3
    ca94:	ea000549 	b	dfc0 <CUSBEndpoint::GetNumber() const>
    ca98:	e92d4010 	push	{r4, lr}
    ca9c:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    caa0:	e1a04000 	mov	r4, r0
    caa4:	e3401002 	movt	r1, #2
    caa8:	e30a0fbc 	movw	r0, #44988	; 0xafbc
    caac:	e3a02e12 	mov	r2, #288	; 0x120
    cab0:	e3400002 	movt	r0, #2
    cab4:	eb006039 	bl	24ba0 <assertion_failed>
    cab8:	e594301c 	ldr	r3, [r4, #28]
    cabc:	e8bd4010 	pop	{r4, lr}
    cac0:	e1a00003 	mov	r0, r3
    cac4:	ea00053d 	b	dfc0 <CUSBEndpoint::GetNumber() const>

0000cac8 <CDWHCITransferStageData::GetMaxPacketSize() const>:
    cac8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    cacc:	e12fff1e 	bx	lr

0000cad0 <CDWHCITransferStageData::GetSpeed() const>:
    cad0:	e5d00020 	ldrb	r0, [r0, #32]
    cad4:	e12fff1e 	bx	lr

0000cad8 <CDWHCITransferStageData::GetPID() const>:
    cad8:	e92d4010 	push	{r4, lr}
    cadc:	e1a04000 	mov	r4, r0
    cae0:	e590001c 	ldr	r0, [r0, #28]
    cae4:	e3500000 	cmp	r0, #0
    cae8:	0a000012 	beq	cb38 <CDWHCITransferStageData::GetPID() const+0x60>
    caec:	e594100c 	ldr	r1, [r4, #12]
    caf0:	eb000549 	bl	e01c <CUSBEndpoint::GetNextPID(int)>
    caf4:	e3500001 	cmp	r0, #1
    caf8:	0a00000c 	beq	cb30 <CDWHCITransferStageData::GetPID() const+0x58>
    cafc:	3a000009 	bcc	cb28 <CDWHCITransferStageData::GetPID() const+0x50>
    cb00:	e3500002 	cmp	r0, #2
    cb04:	08bd8010 	popeq	{r4, pc}
    cb08:	e3002143 	movw	r2, #323	; 0x143
    cb0c:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    cb10:	e30b0138 	movw	r0, #45368	; 0xb138
    cb14:	e3401002 	movt	r1, #2
    cb18:	e3400002 	movt	r0, #2
    cb1c:	eb00601f 	bl	24ba0 <assertion_failed>
    cb20:	e3a00000 	mov	r0, #0
    cb24:	e8bd8010 	pop	{r4, pc}
    cb28:	e3a00003 	mov	r0, #3
    cb2c:	e8bd8010 	pop	{r4, pc}
    cb30:	e3a00000 	mov	r0, #0
    cb34:	e8bd8010 	pop	{r4, pc}
    cb38:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    cb3c:	e30a0fbc 	movw	r0, #44988	; 0xafbc
    cb40:	e3401002 	movt	r1, #2
    cb44:	e3400002 	movt	r0, #2
    cb48:	e3a02e13 	mov	r2, #304	; 0x130
    cb4c:	eb006013 	bl	24ba0 <assertion_failed>
    cb50:	e594001c 	ldr	r0, [r4, #28]
    cb54:	eaffffe4 	b	caec <CDWHCITransferStageData::GetPID() const+0x14>

0000cb58 <CDWHCITransferStageData::IsDirectionIn() const>:
    cb58:	e5900008 	ldr	r0, [r0, #8]
    cb5c:	e12fff1e 	bx	lr

0000cb60 <CDWHCITransferStageData::IsStatusStage() const>:
    cb60:	e590000c 	ldr	r0, [r0, #12]
    cb64:	e12fff1e 	bx	lr

0000cb68 <CDWHCITransferStageData::GetDMAAddress() const>:
    cb68:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    cb6c:	e3530000 	cmp	r3, #0
    cb70:	0a000001 	beq	cb7c <CDWHCITransferStageData::GetDMAAddress() const+0x14>
    cb74:	e1a00003 	mov	r0, r3
    cb78:	e12fff1e 	bx	lr
    cb7c:	e92d4010 	push	{r4, lr}
    cb80:	e3002156 	movw	r2, #342	; 0x156
    cb84:	e1a04000 	mov	r4, r0
    cb88:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    cb8c:	e30b0000 	movw	r0, #45056	; 0xb000
    cb90:	e3401002 	movt	r1, #2
    cb94:	e3400002 	movt	r0, #2
    cb98:	eb006000 	bl	24ba0 <assertion_failed>
    cb9c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    cba0:	e1a00003 	mov	r0, r3
    cba4:	e8bd8010 	pop	{r4, pc}

0000cba8 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    cba8:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    cbac:	e12fff1e 	bx	lr

0000cbb0 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    cbb0:	e5900034 	ldr	r0, [r0, #52]	; 0x34
    cbb4:	e12fff1e 	bx	lr

0000cbb8 <CDWHCITransferStageData::IsSplit() const>:
    cbb8:	e5900010 	ldr	r0, [r0, #16]
    cbbc:	e12fff1e 	bx	lr

0000cbc0 <CDWHCITransferStageData::IsSplitComplete() const>:
    cbc0:	e5903010 	ldr	r3, [r0, #16]
    cbc4:	e92d4010 	push	{r4, lr}
    cbc8:	e3530000 	cmp	r3, #0
    cbcc:	e1a04000 	mov	r4, r0
    cbd0:	1a000005 	bne	cbec <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    cbd4:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    cbd8:	e30a0fa8 	movw	r0, #44968	; 0xafa8
    cbdc:	e3401002 	movt	r1, #2
    cbe0:	e3400002 	movt	r0, #2
    cbe4:	e3a02f5b 	mov	r2, #364	; 0x16c
    cbe8:	eb005fec 	bl	24ba0 <assertion_failed>
    cbec:	e5940014 	ldr	r0, [r4, #20]
    cbf0:	e8bd8010 	pop	{r4, pc}

0000cbf4 <CDWHCITransferStageData::GetHubAddress() const>:
    cbf4:	e5903010 	ldr	r3, [r0, #16]
    cbf8:	e92d4010 	push	{r4, lr}
    cbfc:	e3530000 	cmp	r3, #0
    cc00:	e1a04000 	mov	r4, r0
    cc04:	0a000004 	beq	cc1c <CDWHCITransferStageData::GetHubAddress() const+0x28>
    cc08:	e5940018 	ldr	r0, [r4, #24]
    cc0c:	e3500000 	cmp	r0, #0
    cc10:	0a00000a 	beq	cc40 <CDWHCITransferStageData::GetHubAddress() const+0x4c>
    cc14:	e8bd4010 	pop	{r4, lr}
    cc18:	ea00017d 	b	d214 <CUSBDevice::GetHubAddress() const>
    cc1c:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    cc20:	e30a0fa8 	movw	r0, #44968	; 0xafa8
    cc24:	e3401002 	movt	r1, #2
    cc28:	e3400002 	movt	r0, #2
    cc2c:	e3002173 	movw	r2, #371	; 0x173
    cc30:	eb005fda 	bl	24ba0 <assertion_failed>
    cc34:	e5940018 	ldr	r0, [r4, #24]
    cc38:	e3500000 	cmp	r0, #0
    cc3c:	1afffff4 	bne	cc14 <CDWHCITransferStageData::GetHubAddress() const+0x20>
    cc40:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    cc44:	e30a0fdc 	movw	r0, #45020	; 0xafdc
    cc48:	e3401002 	movt	r1, #2
    cc4c:	e3400002 	movt	r0, #2
    cc50:	e3002175 	movw	r2, #373	; 0x175
    cc54:	eb005fd1 	bl	24ba0 <assertion_failed>
    cc58:	e5940018 	ldr	r0, [r4, #24]
    cc5c:	e8bd4010 	pop	{r4, lr}
    cc60:	ea00016b 	b	d214 <CUSBDevice::GetHubAddress() const>

0000cc64 <CDWHCITransferStageData::GetHubPortAddress() const>:
    cc64:	e5903010 	ldr	r3, [r0, #16]
    cc68:	e92d4010 	push	{r4, lr}
    cc6c:	e3530000 	cmp	r3, #0
    cc70:	e1a04000 	mov	r4, r0
    cc74:	0a000004 	beq	cc8c <CDWHCITransferStageData::GetHubPortAddress() const+0x28>
    cc78:	e5940018 	ldr	r0, [r4, #24]
    cc7c:	e3500000 	cmp	r0, #0
    cc80:	0a00000a 	beq	ccb0 <CDWHCITransferStageData::GetHubPortAddress() const+0x4c>
    cc84:	e8bd4010 	pop	{r4, lr}
    cc88:	ea000163 	b	d21c <CUSBDevice::GetHubPortNumber() const>
    cc8c:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    cc90:	e30a0fa8 	movw	r0, #44968	; 0xafa8
    cc94:	e3401002 	movt	r1, #2
    cc98:	e3400002 	movt	r0, #2
    cc9c:	e300217b 	movw	r2, #379	; 0x17b
    cca0:	eb005fbe 	bl	24ba0 <assertion_failed>
    cca4:	e5940018 	ldr	r0, [r4, #24]
    cca8:	e3500000 	cmp	r0, #0
    ccac:	1afffff4 	bne	cc84 <CDWHCITransferStageData::GetHubPortAddress() const+0x20>
    ccb0:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    ccb4:	e30a0fdc 	movw	r0, #45020	; 0xafdc
    ccb8:	e3401002 	movt	r1, #2
    ccbc:	e3400002 	movt	r0, #2
    ccc0:	e300217d 	movw	r2, #381	; 0x17d
    ccc4:	eb005fb5 	bl	24ba0 <assertion_failed>
    ccc8:	e5940018 	ldr	r0, [r4, #24]
    cccc:	e8bd4010 	pop	{r4, lr}
    ccd0:	ea000151 	b	d21c <CUSBDevice::GetHubPortNumber() const>

0000ccd4 <CDWHCITransferStageData::GetSplitPosition() const>:
    ccd4:	e3a00003 	mov	r0, #3
    ccd8:	e12fff1e 	bx	lr

0000ccdc <CDWHCITransferStageData::GetStatusMask() const>:
    ccdc:	e5903010 	ldr	r3, [r0, #16]
    cce0:	e3530000 	cmp	r3, #0
    cce4:	0a000001 	beq	ccf0 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    cce8:	e30007ff 	movw	r0, #2047	; 0x7ff
    ccec:	e12fff1e 	bx	lr
    ccf0:	e92d4010 	push	{r4, lr}
    ccf4:	ebfffe71 	bl	c6c0 <CDWHCITransferStageData::IsPeriodic() const>
    ccf8:	e3500000 	cmp	r0, #0
    ccfc:	0300078f 	movweq	r0, #1935	; 0x78f
    cd00:	130007ff 	movwne	r0, #2047	; 0x7ff
    cd04:	e8bd8010 	pop	{r4, pc}

0000cd08 <CDWHCITransferStageData::GetTransactionStatus() const>:
    cd08:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    cd0c:	e3530000 	cmp	r3, #0
    cd10:	0a000001 	beq	cd1c <CDWHCITransferStageData::GetTransactionStatus() const+0x14>
    cd14:	e1a00003 	mov	r0, r3
    cd18:	e12fff1e 	bx	lr
    cd1c:	e92d4010 	push	{r4, lr}
    cd20:	e300219a 	movw	r2, #410	; 0x19a
    cd24:	e1a04000 	mov	r4, r0
    cd28:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    cd2c:	e30b003c 	movw	r0, #45116	; 0xb03c
    cd30:	e3401002 	movt	r1, #2
    cd34:	e3400002 	movt	r0, #2
    cd38:	eb005f98 	bl	24ba0 <assertion_failed>
    cd3c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    cd40:	e1a00003 	mov	r0, r3
    cd44:	e8bd8010 	pop	{r4, pc}

0000cd48 <CDWHCITransferStageData::IsStageComplete() const>:
    cd48:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cd4c:	e16f0f10 	clz	r0, r0
    cd50:	e1a002a0 	lsr	r0, r0, #5
    cd54:	e12fff1e 	bx	lr

0000cd58 <CDWHCITransferStageData::GetResultLen() const>:
    cd58:	e5902038 	ldr	r2, [r0, #56]	; 0x38
    cd5c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    cd60:	e1520000 	cmp	r2, r0
    cd64:	31a00002 	movcc	r0, r2
    cd68:	e12fff1e 	bx	lr

0000cd6c <CDWHCITransferStageData::GetURB() const>:
    cd6c:	e5903004 	ldr	r3, [r0, #4]
    cd70:	e3530000 	cmp	r3, #0
    cd74:	0a000001 	beq	cd80 <CDWHCITransferStageData::GetURB() const+0x14>
    cd78:	e1a00003 	mov	r0, r3
    cd7c:	e12fff1e 	bx	lr
    cd80:	e92d4010 	push	{r4, lr}
    cd84:	e30021af 	movw	r2, #431	; 0x1af
    cd88:	e1a04000 	mov	r4, r0
    cd8c:	e30a1f0c 	movw	r1, #44812	; 0xaf0c
    cd90:	e30a0fd0 	movw	r0, #45008	; 0xafd0
    cd94:	e3401002 	movt	r1, #2
    cd98:	e3400002 	movt	r0, #2
    cd9c:	eb005f7f 	bl	24ba0 <assertion_failed>
    cda0:	e5943004 	ldr	r3, [r4, #4]
    cda4:	e1a00003 	mov	r0, r3
    cda8:	e8bd8010 	pop	{r4, pc}

0000cdac <CDWHCITransferStageData::GetFrameScheduler() const>:
    cdac:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    cdb0:	e12fff1e 	bx	lr

0000cdb4 <CUSBDevice::~CUSBDevice()>:
    cdb4:	e59f30ac 	ldr	r3, [pc, #172]	; ce68 <CUSBDevice::~CUSBDevice()+0xb4>
    cdb8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cdbc:	e2806048 	add	r6, r0, #72	; 0x48
    cdc0:	e1a04000 	mov	r4, r0
    cdc4:	e1a07000 	mov	r7, r0
    cdc8:	e3a05000 	mov	r5, #0
    cdcc:	e4843020 	str	r3, [r4], #32
    cdd0:	e5943004 	ldr	r3, [r4, #4]
    cdd4:	e3530000 	cmp	r3, #0
    cdd8:	e1a00003 	mov	r0, r3
    cddc:	0a000002 	beq	cdec <CUSBDevice::~CUSBDevice()+0x38>
    cde0:	e5933000 	ldr	r3, [r3]
    cde4:	e5933004 	ldr	r3, [r3, #4]
    cde8:	e12fff33 	blx	r3
    cdec:	e5a45004 	str	r5, [r4, #4]!
    cdf0:	e1540006 	cmp	r4, r6
    cdf4:	1afffff5 	bne	cdd0 <CUSBDevice::~CUSBDevice()+0x1c>
    cdf8:	e5974020 	ldr	r4, [r7, #32]
    cdfc:	e3540000 	cmp	r4, #0
    ce00:	0a000004 	beq	ce18 <CUSBDevice::~CUSBDevice()+0x64>
    ce04:	e1a00004 	mov	r0, r4
    ce08:	eb001bca 	bl	13d38 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    ce0c:	e1a00004 	mov	r0, r4
    ce10:	e3a0101c 	mov	r1, #28
    ce14:	eb005463 	bl	21fa8 <operator delete(void*, unsigned int)>
    ce18:	e3a04000 	mov	r4, #0
    ce1c:	e3a01009 	mov	r1, #9
    ce20:	e597001c 	ldr	r0, [r7, #28]
    ce24:	e5874020 	str	r4, [r7, #32]
    ce28:	eb00545e 	bl	21fa8 <operator delete(void*, unsigned int)>
    ce2c:	e587401c 	str	r4, [r7, #28]
    ce30:	e3a01012 	mov	r1, #18
    ce34:	e5970018 	ldr	r0, [r7, #24]
    ce38:	eb00545a 	bl	21fa8 <operator delete(void*, unsigned int)>
    ce3c:	e597500c 	ldr	r5, [r7, #12]
    ce40:	e5874018 	str	r4, [r7, #24]
    ce44:	e1550004 	cmp	r5, r4
    ce48:	0a000004 	beq	ce60 <CUSBDevice::~CUSBDevice()+0xac>
    ce4c:	e1a00005 	mov	r0, r5
    ce50:	eb000449 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
    ce54:	e1a00005 	mov	r0, r5
    ce58:	e3a01018 	mov	r1, #24
    ce5c:	eb005451 	bl	21fa8 <operator delete(void*, unsigned int)>
    ce60:	e1a00007 	mov	r0, r7
    ce64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ce68:	0002b060 	.word	0x0002b060

0000ce6c <CUSBDevice::~CUSBDevice()>:
    ce6c:	e92d4010 	push	{r4, lr}
    ce70:	e1a04000 	mov	r4, r0
    ce74:	ebffffce 	bl	cdb4 <CUSBDevice::~CUSBDevice()>
    ce78:	e1a00004 	mov	r0, r4
    ce7c:	e3a0104c 	mov	r1, #76	; 0x4c
    ce80:	eb005448 	bl	21fa8 <operator delete(void*, unsigned int)>
    ce84:	e1a00004 	mov	r0, r4
    ce88:	e8bd8010 	pop	{r4, pc}

0000ce8c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)>:
    ce8c:	e92d4070 	push	{r4, r5, r6, lr}
    ce90:	e3510000 	cmp	r1, #0
    ce94:	e59fe0d8 	ldr	lr, [pc, #216]	; cf74 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0xe8>
    ce98:	e1a04000 	mov	r4, r0
    ce9c:	e5ddc010 	ldrb	ip, [sp, #16]
    cea0:	e5dd5014 	ldrb	r5, [sp, #20]
    cea4:	e5801004 	str	r1, [r0, #4]
    cea8:	e3a01000 	mov	r1, #0
    ceac:	e5c02009 	strb	r2, [r0, #9]
    ceb0:	e5803010 	str	r3, [r0, #16]
    ceb4:	e580e000 	str	lr, [r0]
    ceb8:	e5c0c014 	strb	ip, [r0, #20]
    cebc:	e5c01008 	strb	r1, [r0, #8]
    cec0:	e580100c 	str	r1, [r0, #12]
    cec4:	e5801018 	str	r1, [r0, #24]
    cec8:	e580101c 	str	r1, [r0, #28]
    cecc:	e5801020 	str	r1, [r0, #32]
    ced0:	e5c05015 	strb	r5, [r0, #21]
    ced4:	0a000016 	beq	cf34 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0xa8>
    ced8:	e3a00018 	mov	r0, #24
    cedc:	eb00542d 	bl	21f98 <operator new(unsigned int)>
    cee0:	e1a01004 	mov	r1, r4
    cee4:	e1a06000 	mov	r6, r0
    cee8:	eb000378 	bl	dcd0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    ceec:	e3550000 	cmp	r5, #0
    cef0:	e584600c 	str	r6, [r4, #12]
    cef4:	0a000007 	beq	cf18 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0x8c>
    cef8:	e2843020 	add	r3, r4, #32
    cefc:	e2841048 	add	r1, r4, #72	; 0x48
    cf00:	e3a02000 	mov	r2, #0
    cf04:	e5a32004 	str	r2, [r3, #4]!
    cf08:	e1510003 	cmp	r1, r3
    cf0c:	1afffffc 	bne	cf04 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0x78>
    cf10:	e1a00004 	mov	r0, r4
    cf14:	e8bd8070 	pop	{r4, r5, r6, pc}
    cf18:	e30b1078 	movw	r1, #45176	; 0xb078
    cf1c:	e30b00ac 	movw	r0, #45228	; 0xb0ac
    cf20:	e3401002 	movt	r1, #2
    cf24:	e3400002 	movt	r0, #2
    cf28:	e3a02037 	mov	r2, #55	; 0x37
    cf2c:	eb005f1b 	bl	24ba0 <assertion_failed>
    cf30:	eafffff0 	b	cef8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0x6c>
    cf34:	e30b1078 	movw	r1, #45176	; 0xb078
    cf38:	e30b0088 	movw	r0, #45192	; 0xb088
    cf3c:	e3401002 	movt	r1, #2
    cf40:	e3400002 	movt	r0, #2
    cf44:	e3a02031 	mov	r2, #49	; 0x31
    cf48:	eb005f14 	bl	24ba0 <assertion_failed>
    cf4c:	e594300c 	ldr	r3, [r4, #12]
    cf50:	e3530000 	cmp	r3, #0
    cf54:	0affffdf 	beq	ced8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0x4c>
    cf58:	e30b1078 	movw	r1, #45176	; 0xb078
    cf5c:	e30b0098 	movw	r0, #45208	; 0xb098
    cf60:	e3401002 	movt	r1, #2
    cf64:	e3400002 	movt	r0, #2
    cf68:	e3a02033 	mov	r2, #51	; 0x33
    cf6c:	eb005f0b 	bl	24ba0 <assertion_failed>
    cf70:	eaffffd8 	b	ced8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0x4c>
    cf74:	0002b060 	.word	0x0002b060

0000cf78 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    cf78:	e92d4070 	push	{r4, r5, r6, lr}
    cf7c:	e1a06000 	mov	r6, r0
    cf80:	e24dd008 	sub	sp, sp, #8
    cf84:	e3a00010 	mov	r0, #16
    cf88:	e1a05001 	mov	r5, r1
    cf8c:	eb005401 	bl	21f98 <operator new(unsigned int)>
    cf90:	e1a04000 	mov	r4, r0
    cf94:	eb006406 	bl	25fb4 <CString::CString()>
    cf98:	e3550000 	cmp	r5, #0
    cf9c:	0a00001e 	beq	d01c <CUSBDevice::GetName(TDeviceNameSelector) const+0xa4>
    cfa0:	e3550001 	cmp	r5, #1
    cfa4:	0a00000c 	beq	cfdc <CUSBDevice::GetName(TDeviceNameSelector) const+0x64>
    cfa8:	e30b1078 	movw	r1, #45176	; 0xb078
    cfac:	e30b0138 	movw	r0, #45368	; 0xb138
    cfb0:	e3401002 	movt	r1, #2
    cfb4:	e3400002 	movt	r0, #2
    cfb8:	e30021a1 	movw	r2, #417	; 0x1a1
    cfbc:	eb005ef7 	bl	24ba0 <assertion_failed>
    cfc0:	e30b10f0 	movw	r1, #45296	; 0xb0f0
    cfc4:	e1a00004 	mov	r0, r4
    cfc8:	e3401002 	movt	r1, #2
    cfcc:	eb006414 	bl	26024 <CString::operator=(char const*)>
    cfd0:	e1a00004 	mov	r0, r4
    cfd4:	e28dd008 	add	sp, sp, #8
    cfd8:	e8bd8070 	pop	{r4, r5, r6, pc}
    cfdc:	e5961018 	ldr	r1, [r6, #24]
    cfe0:	e3510000 	cmp	r1, #0
    cfe4:	0a000020 	beq	d06c <CUSBDevice::GetName(TDeviceNameSelector) const+0xf4>
    cfe8:	e5d12004 	ldrb	r2, [r1, #4]
    cfec:	e2423001 	sub	r3, r2, #1
    cff0:	e6ef3073 	uxtb	r3, r3
    cff4:	e35300fd 	cmp	r3, #253	; 0xfd
    cff8:	8afffff0 	bhi	cfc0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x48>
    cffc:	e5d1c006 	ldrb	ip, [r1, #6]
    d000:	e1a00004 	mov	r0, r4
    d004:	e5d13005 	ldrb	r3, [r1, #5]
    d008:	e30b10e4 	movw	r1, #45284	; 0xb0e4
    d00c:	e3401002 	movt	r1, #2
    d010:	e58dc000 	str	ip, [sp]
    d014:	eb0066f8 	bl	26bfc <CString::Format(char const*, ...)>
    d018:	eaffffec 	b	cfd0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x58>
    d01c:	e5962018 	ldr	r2, [r6, #24]
    d020:	e3520000 	cmp	r2, #0
    d024:	0a000008 	beq	d04c <CUSBDevice::GetName(TDeviceNameSelector) const+0xd4>
    d028:	e1d230ba 	ldrh	r3, [r2, #10]
    d02c:	e1a00004 	mov	r0, r4
    d030:	e1d220b8 	ldrh	r2, [r2, #8]
    d034:	e30b10d8 	movw	r1, #45272	; 0xb0d8
    d038:	e3401002 	movt	r1, #2
    d03c:	eb0066ee 	bl	26bfc <CString::Format(char const*, ...)>
    d040:	e1a00004 	mov	r0, r4
    d044:	e28dd008 	add	sp, sp, #8
    d048:	e8bd8070 	pop	{r4, r5, r6, pc}
    d04c:	e300218d 	movw	r2, #397	; 0x18d
    d050:	e30b1078 	movw	r1, #45176	; 0xb078
    d054:	e30b00c4 	movw	r0, #45252	; 0xb0c4
    d058:	e3401002 	movt	r1, #2
    d05c:	e3400002 	movt	r0, #2
    d060:	eb005ece 	bl	24ba0 <assertion_failed>
    d064:	e5962018 	ldr	r2, [r6, #24]
    d068:	eaffffee 	b	d028 <CUSBDevice::GetName(TDeviceNameSelector) const+0xb0>
    d06c:	e30b1078 	movw	r1, #45176	; 0xb078
    d070:	e30b00c4 	movw	r0, #45252	; 0xb0c4
    d074:	e3401002 	movt	r1, #2
    d078:	e3400002 	movt	r0, #2
    d07c:	e3a02f65 	mov	r2, #404	; 0x194
    d080:	eb005ec6 	bl	24ba0 <assertion_failed>
    d084:	e5961018 	ldr	r1, [r6, #24]
    d088:	eaffffd6 	b	cfe8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x70>

0000d08c <CUSBDevice::GetNames() const>:
    d08c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d090:	e1a0a000 	mov	sl, r0
    d094:	e3a00010 	mov	r0, #16
    d098:	e30b70f0 	movw	r7, #45296	; 0xb0f0
    d09c:	eb0053bd 	bl	21f98 <operator new(unsigned int)>
    d0a0:	e30b8104 	movw	r8, #45316	; 0xb104
    d0a4:	e30b9078 	movw	r9, #45176	; 0xb078
    d0a8:	e3407002 	movt	r7, #2
    d0ac:	e3408002 	movt	r8, #2
    d0b0:	e3409002 	movt	r9, #2
    d0b4:	e3a04000 	mov	r4, #0
    d0b8:	e1a06000 	mov	r6, r0
    d0bc:	eb0063bc 	bl	25fb4 <CString::CString()>
    d0c0:	e6ef1074 	uxtb	r1, r4
    d0c4:	e1a0000a 	mov	r0, sl
    d0c8:	ebffffaa 	bl	cf78 <CUSBDevice::GetName(TDeviceNameSelector) const>
    d0cc:	e2505000 	subs	r5, r0, #0
    d0d0:	0a000029 	beq	d17c <CUSBDevice::GetNames() const+0xf0>
    d0d4:	e1a01007 	mov	r1, r7
    d0d8:	eb006407 	bl	260fc <CString::Compare(char const*) const>
    d0dc:	e3500000 	cmp	r0, #0
    d0e0:	1a000010 	bne	d128 <CUSBDevice::GetNames() const+0x9c>
    d0e4:	e5953000 	ldr	r3, [r5]
    d0e8:	e1a00005 	mov	r0, r5
    d0ec:	e5933004 	ldr	r3, [r3, #4]
    d0f0:	e12fff33 	blx	r3
    d0f4:	e2844001 	add	r4, r4, #1
    d0f8:	e3540002 	cmp	r4, #2
    d0fc:	1affffef 	bne	d0c0 <CUSBDevice::GetNames() const+0x34>
    d100:	e1a00006 	mov	r0, r6
    d104:	eb0063d7 	bl	26068 <CString::GetLength() const>
    d108:	e3500000 	cmp	r0, #0
    d10c:	1a000003 	bne	d120 <CUSBDevice::GetNames() const+0x94>
    d110:	e30b10f0 	movw	r1, #45296	; 0xb0f0
    d114:	e1a00006 	mov	r0, r6
    d118:	e3401002 	movt	r1, #2
    d11c:	eb0063c0 	bl	26024 <CString::operator=(char const*)>
    d120:	e1a00006 	mov	r0, r6
    d124:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d128:	e1a00006 	mov	r0, r6
    d12c:	eb0063cd 	bl	26068 <CString::GetLength() const>
    d130:	e3500000 	cmp	r0, #0
    d134:	0a00000a 	beq	d164 <CUSBDevice::GetNames() const+0xd8>
    d138:	e1a01008 	mov	r1, r8
    d13c:	e1a00006 	mov	r0, r6
    d140:	eb0063cc 	bl	26078 <CString::Append(char const*)>
    d144:	e1a00005 	mov	r0, r5
    d148:	eb0063af 	bl	2600c <CString::operator char const*() const>
    d14c:	e1a01000 	mov	r1, r0
    d150:	e1a00006 	mov	r0, r6
    d154:	eb0063c7 	bl	26078 <CString::Append(char const*)>
    d158:	e3550000 	cmp	r5, #0
    d15c:	0affffe4 	beq	d0f4 <CUSBDevice::GetNames() const+0x68>
    d160:	eaffffdf 	b	d0e4 <CUSBDevice::GetNames() const+0x58>
    d164:	e1a00005 	mov	r0, r5
    d168:	eb0063a7 	bl	2600c <CString::operator char const*() const>
    d16c:	e1a01000 	mov	r1, r0
    d170:	e1a00006 	mov	r0, r6
    d174:	eb0063bf 	bl	26078 <CString::Append(char const*)>
    d178:	eaffffd9 	b	d0e4 <CUSBDevice::GetNames() const+0x58>
    d17c:	e30021b2 	movw	r2, #434	; 0x1b2
    d180:	e1a01009 	mov	r1, r9
    d184:	e30b00f8 	movw	r0, #45304	; 0xb0f8
    d188:	e3400002 	movt	r0, #2
    d18c:	eb005e83 	bl	24ba0 <assertion_failed>
    d190:	e1a01007 	mov	r1, r7
    d194:	e1a00005 	mov	r0, r5
    d198:	eb0063d7 	bl	260fc <CString::Compare(char const*) const>
    d19c:	e3500000 	cmp	r0, #0
    d1a0:	0affffd3 	beq	d0f4 <CUSBDevice::GetNames() const+0x68>
    d1a4:	e1a00006 	mov	r0, r6
    d1a8:	eb0063ae 	bl	26068 <CString::GetLength() const>
    d1ac:	e3500000 	cmp	r0, #0
    d1b0:	1affffe0 	bne	d138 <CUSBDevice::GetNames() const+0xac>
    d1b4:	eb006394 	bl	2600c <CString::operator char const*() const>
    d1b8:	e1a01000 	mov	r1, r0
    d1bc:	e1a00006 	mov	r0, r6
    d1c0:	eb0063ac 	bl	26078 <CString::Append(char const*)>
    d1c4:	eaffffca 	b	d0f4 <CUSBDevice::GetNames() const+0x68>

0000d1c8 <CUSBDevice::SetAddress(unsigned char)>:
    d1c8:	e351007f 	cmp	r1, #127	; 0x7f
    d1cc:	e92d4070 	push	{r4, r5, r6, lr}
    d1d0:	e1a04001 	mov	r4, r1
    d1d4:	e1a05000 	mov	r5, r0
    d1d8:	da000005 	ble	d1f4 <CUSBDevice::SetAddress(unsigned char)+0x2c>
    d1dc:	e30b1078 	movw	r1, #45176	; 0xb078
    d1e0:	e30b0108 	movw	r0, #45320	; 0xb108
    d1e4:	e3401002 	movt	r1, #2
    d1e8:	e3400002 	movt	r0, #2
    d1ec:	e30021cb 	movw	r2, #459	; 0x1cb
    d1f0:	eb005e6a 	bl	24ba0 <assertion_failed>
    d1f4:	e5c54008 	strb	r4, [r5, #8]
    d1f8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d1fc <CUSBDevice::GetAddress() const>:
    d1fc:	e5d00008 	ldrb	r0, [r0, #8]
    d200:	e12fff1e 	bx	lr

0000d204 <CUSBDevice::GetSpeed() const>:
    d204:	e5d00009 	ldrb	r0, [r0, #9]
    d208:	e12fff1e 	bx	lr

0000d20c <CUSBDevice::IsSplit() const>:
    d20c:	e5900010 	ldr	r0, [r0, #16]
    d210:	e12fff1e 	bx	lr

0000d214 <CUSBDevice::GetHubAddress() const>:
    d214:	e5d00014 	ldrb	r0, [r0, #20]
    d218:	e12fff1e 	bx	lr

0000d21c <CUSBDevice::GetHubPortNumber() const>:
    d21c:	e5d00015 	ldrb	r0, [r0, #21]
    d220:	e12fff1e 	bx	lr

0000d224 <CUSBDevice::GetEndpoint0() const>:
    d224:	e590300c 	ldr	r3, [r0, #12]
    d228:	e3530000 	cmp	r3, #0
    d22c:	0a000001 	beq	d238 <CUSBDevice::GetEndpoint0() const+0x14>
    d230:	e1a00003 	mov	r0, r3
    d234:	e12fff1e 	bx	lr
    d238:	e92d4010 	push	{r4, lr}
    d23c:	e3a02f7b 	mov	r2, #492	; 0x1ec
    d240:	e1a04000 	mov	r4, r0
    d244:	e30b1078 	movw	r1, #45176	; 0xb078
    d248:	e30b0128 	movw	r0, #45352	; 0xb128
    d24c:	e3401002 	movt	r1, #2
    d250:	e3400002 	movt	r0, #2
    d254:	eb005e51 	bl	24ba0 <assertion_failed>
    d258:	e594300c 	ldr	r3, [r4, #12]
    d25c:	e1a00003 	mov	r0, r3
    d260:	e8bd8010 	pop	{r4, pc}

0000d264 <CUSBDevice::GetHost() const>:
    d264:	e5903004 	ldr	r3, [r0, #4]
    d268:	e3530000 	cmp	r3, #0
    d26c:	0a000001 	beq	d278 <CUSBDevice::GetHost() const+0x14>
    d270:	e1a00003 	mov	r0, r3
    d274:	e12fff1e 	bx	lr
    d278:	e92d4010 	push	{r4, lr}
    d27c:	e30021f2 	movw	r2, #498	; 0x1f2
    d280:	e1a04000 	mov	r4, r0
    d284:	e30b1078 	movw	r1, #45176	; 0xb078
    d288:	e30b0088 	movw	r0, #45192	; 0xb088
    d28c:	e3401002 	movt	r1, #2
    d290:	e3400002 	movt	r0, #2
    d294:	eb005e41 	bl	24ba0 <assertion_failed>
    d298:	e5943004 	ldr	r3, [r4, #4]
    d29c:	e1a00003 	mov	r0, r3
    d2a0:	e8bd8010 	pop	{r4, pc}

0000d2a4 <CUSBDevice::GetDeviceDescriptor() const>:
    d2a4:	e5903018 	ldr	r3, [r0, #24]
    d2a8:	e3530000 	cmp	r3, #0
    d2ac:	0a000001 	beq	d2b8 <CUSBDevice::GetDeviceDescriptor() const+0x14>
    d2b0:	e1a00003 	mov	r0, r3
    d2b4:	e12fff1e 	bx	lr
    d2b8:	e92d4010 	push	{r4, lr}
    d2bc:	e3a02f7e 	mov	r2, #504	; 0x1f8
    d2c0:	e1a04000 	mov	r4, r0
    d2c4:	e30b1078 	movw	r1, #45176	; 0xb078
    d2c8:	e30b00c4 	movw	r0, #45252	; 0xb0c4
    d2cc:	e3401002 	movt	r1, #2
    d2d0:	e3400002 	movt	r0, #2
    d2d4:	eb005e31 	bl	24ba0 <assertion_failed>
    d2d8:	e5943018 	ldr	r3, [r4, #24]
    d2dc:	e1a00003 	mov	r0, r3
    d2e0:	e8bd8010 	pop	{r4, pc}

0000d2e4 <CUSBDevice::GetConfigurationDescriptor() const>:
    d2e4:	e590301c 	ldr	r3, [r0, #28]
    d2e8:	e3530000 	cmp	r3, #0
    d2ec:	0a000001 	beq	d2f8 <CUSBDevice::GetConfigurationDescriptor() const+0x14>
    d2f0:	e1a00003 	mov	r0, r3
    d2f4:	e12fff1e 	bx	lr
    d2f8:	e92d4010 	push	{r4, lr}
    d2fc:	e30021fe 	movw	r2, #510	; 0x1fe
    d300:	e1a04000 	mov	r4, r0
    d304:	e30b1078 	movw	r1, #45176	; 0xb078
    d308:	e30b013c 	movw	r0, #45372	; 0xb13c
    d30c:	e3401002 	movt	r1, #2
    d310:	e3400002 	movt	r0, #2
    d314:	eb005e21 	bl	24ba0 <assertion_failed>
    d318:	e594301c 	ldr	r3, [r4, #28]
    d31c:	e1a00003 	mov	r0, r3
    d320:	e8bd8010 	pop	{r4, pc}

0000d324 <CUSBDevice::GetDescriptor(unsigned char)>:
    d324:	e92d4070 	push	{r4, r5, r6, lr}
    d328:	e1a04000 	mov	r4, r0
    d32c:	e5900020 	ldr	r0, [r0, #32]
    d330:	e1a05001 	mov	r5, r1
    d334:	e3500000 	cmp	r0, #0
    d338:	0a000002 	beq	d348 <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    d33c:	e1a01005 	mov	r1, r5
    d340:	e8bd4070 	pop	{r4, r5, r6, lr}
    d344:	ea001a7e 	b	13d44 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d348:	e30b1078 	movw	r1, #45176	; 0xb078
    d34c:	e30b0150 	movw	r0, #45392	; 0xb150
    d350:	e3401002 	movt	r1, #2
    d354:	e3400002 	movt	r0, #2
    d358:	e3a02f81 	mov	r2, #516	; 0x204
    d35c:	eb005e0f 	bl	24ba0 <assertion_failed>
    d360:	e5940020 	ldr	r0, [r4, #32]
    d364:	e1a01005 	mov	r1, r5
    d368:	e8bd4070 	pop	{r4, r5, r6, lr}
    d36c:	ea001a74 	b	13d44 <CUSBConfigurationParser::GetDescriptor(unsigned char)>

0000d370 <CUSBDevice::ConfigurationError(char const*) const>:
    d370:	e92d4070 	push	{r4, r5, r6, lr}
    d374:	e1a04000 	mov	r4, r0
    d378:	e5900020 	ldr	r0, [r0, #32]
    d37c:	e1a05001 	mov	r5, r1
    d380:	e3500000 	cmp	r0, #0
    d384:	0a000002 	beq	d394 <CUSBDevice::ConfigurationError(char const*) const+0x24>
    d388:	e1a01005 	mov	r1, r5
    d38c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d390:	ea001aba 	b	13e80 <CUSBConfigurationParser::Error(char const*) const>
    d394:	e30b1078 	movw	r1, #45176	; 0xb078
    d398:	e30b0150 	movw	r0, #45392	; 0xb150
    d39c:	e3401002 	movt	r1, #2
    d3a0:	e3400002 	movt	r0, #2
    d3a4:	e300220a 	movw	r2, #522	; 0x20a
    d3a8:	eb005dfc 	bl	24ba0 <assertion_failed>
    d3ac:	e5940020 	ldr	r0, [r4, #32]
    d3b0:	e1a01005 	mov	r1, r5
    d3b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    d3b8:	ea001ab0 	b	13e80 <CUSBConfigurationParser::Error(char const*) const>

0000d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    d3bc:	e92d000c 	push	{r2, r3}
    d3c0:	e92d4070 	push	{r4, r5, r6, lr}
    d3c4:	e24dd020 	sub	sp, sp, #32
    d3c8:	e1a05000 	mov	r5, r0
    d3cc:	e1a06001 	mov	r6, r1
    d3d0:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    d3d4:	e3540000 	cmp	r4, #0
    d3d8:	0a00001c 	beq	d450 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x94>
    d3dc:	e28d0010 	add	r0, sp, #16
    d3e0:	eb0062f3 	bl	25fb4 <CString::CString()>
    d3e4:	e5d5c015 	ldrb	ip, [r5, #21]
    d3e8:	e5d53014 	ldrb	r3, [r5, #20]
    d3ec:	e28d0010 	add	r0, sp, #16
    d3f0:	e59f2074 	ldr	r2, [pc, #116]	; d46c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xb0>
    d3f4:	e30b1178 	movw	r1, #45432	; 0xb178
    d3f8:	e58dc000 	str	ip, [sp]
    d3fc:	e3401002 	movt	r1, #2
    d400:	eb0065fd 	bl	26bfc <CString::Format(char const*, ...)>
    d404:	e28d3034 	add	r3, sp, #52	; 0x34
    d408:	e58d300c 	str	r3, [sp, #12]
    d40c:	eb005f65 	bl	251a8 <CLogger::Get()>
    d410:	e1a05000 	mov	r5, r0
    d414:	e28d0010 	add	r0, sp, #16
    d418:	eb0062fb 	bl	2600c <CString::operator char const*() const>
    d41c:	e59d100c 	ldr	r1, [sp, #12]
    d420:	e1a03004 	mov	r3, r4
    d424:	e1a02006 	mov	r2, r6
    d428:	e58d1000 	str	r1, [sp]
    d42c:	e1a01000 	mov	r1, r0
    d430:	e1a00005 	mov	r0, r5
    d434:	eb005fb8 	bl	2531c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d438:	e28d0010 	add	r0, sp, #16
    d43c:	eb0062a9 	bl	25ee8 <CString::~CString()>
    d440:	e28dd020 	add	sp, sp, #32
    d444:	e8bd4070 	pop	{r4, r5, r6, lr}
    d448:	e28dd008 	add	sp, sp, #8
    d44c:	e12fff1e 	bx	lr
    d450:	e30b1078 	movw	r1, #45176	; 0xb078
    d454:	e30b0168 	movw	r0, #45416	; 0xb168
    d458:	e3401002 	movt	r1, #2
    d45c:	e3400002 	movt	r0, #2
    d460:	e3a02e21 	mov	r2, #528	; 0x210
    d464:	eb005dcd 	bl	24ba0 <assertion_failed>
    d468:	eaffffdb 	b	d3dc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x20>
    d46c:	0002b070 	.word	0x0002b070

0000d470 <CUSBDevice::Initialize()>:
    d470:	e5903018 	ldr	r3, [r0, #24]
    d474:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d478:	e3530000 	cmp	r3, #0
    d47c:	e24dd014 	sub	sp, sp, #20
    d480:	e1a04000 	mov	r4, r0
    d484:	0a000005 	beq	d4a0 <CUSBDevice::Initialize()+0x30>
    d488:	e30b1078 	movw	r1, #45176	; 0xb078
    d48c:	e30b0180 	movw	r0, #45440	; 0xb180
    d490:	e3401002 	movt	r1, #2
    d494:	e3400002 	movt	r0, #2
    d498:	e3a02061 	mov	r2, #97	; 0x61
    d49c:	eb005dbf 	bl	24ba0 <assertion_failed>
    d4a0:	e3a00012 	mov	r0, #18
    d4a4:	eb0052bb 	bl	21f98 <operator new(unsigned int)>
    d4a8:	e5943004 	ldr	r3, [r4, #4]
    d4ac:	e3530000 	cmp	r3, #0
    d4b0:	e5840018 	str	r0, [r4, #24]
    d4b4:	0a000086 	beq	d6d4 <CUSBDevice::Initialize()+0x264>
    d4b8:	e594100c 	ldr	r1, [r4, #12]
    d4bc:	e3510000 	cmp	r1, #0
    d4c0:	0a00008a 	beq	d6f0 <CUSBDevice::Initialize()+0x280>
    d4c4:	e5942018 	ldr	r2, [r4, #24]
    d4c8:	e3a05000 	mov	r5, #0
    d4cc:	e5940004 	ldr	r0, [r4, #4]
    d4d0:	e3a0c008 	mov	ip, #8
    d4d4:	e58d500c 	str	r5, [sp, #12]
    d4d8:	e1a03005 	mov	r3, r5
    d4dc:	e58d2000 	str	r2, [sp]
    d4e0:	e3a06080 	mov	r6, #128	; 0x80
    d4e4:	e3a02001 	mov	r2, #1
    d4e8:	e58d6008 	str	r6, [sp, #8]
    d4ec:	e58dc004 	str	ip, [sp, #4]
    d4f0:	eb000352 	bl	e240 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d4f4:	e3500008 	cmp	r0, #8
    d4f8:	1a000014 	bne	d550 <CUSBDevice::Initialize()+0xe0>
    d4fc:	e5943018 	ldr	r3, [r4, #24]
    d500:	e5d37000 	ldrb	r7, [r3]
    d504:	e3570012 	cmp	r7, #18
    d508:	1a000002 	bne	d518 <CUSBDevice::Initialize()+0xa8>
    d50c:	e5d38001 	ldrb	r8, [r3, #1]
    d510:	e3580001 	cmp	r8, #1
    d514:	0a00001a 	beq	d584 <CUSBDevice::Initialize()+0x114>
    d518:	e3a01001 	mov	r1, #1
    d51c:	e1a00004 	mov	r0, r4
    d520:	e30b21bc 	movw	r2, #45500	; 0xb1bc
    d524:	e3402002 	movt	r2, #2
    d528:	ebffffa3 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d52c:	e3a01012 	mov	r1, #18
    d530:	e5940018 	ldr	r0, [r4, #24]
    d534:	eb00529b 	bl	21fa8 <operator delete(void*, unsigned int)>
    d538:	e3a03000 	mov	r3, #0
    d53c:	e1a06003 	mov	r6, r3
    d540:	e5843018 	str	r3, [r4, #24]
    d544:	e1a00006 	mov	r0, r6
    d548:	e28dd014 	add	sp, sp, #20
    d54c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d550:	e30b2194 	movw	r2, #45460	; 0xb194
    d554:	e3402002 	movt	r2, #2
    d558:	e3a01001 	mov	r1, #1
    d55c:	e1a00004 	mov	r0, r4
    d560:	ebffff95 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d564:	e5940018 	ldr	r0, [r4, #24]
    d568:	e3a01012 	mov	r1, #18
    d56c:	e1a06005 	mov	r6, r5
    d570:	eb00528c 	bl	21fa8 <operator delete(void*, unsigned int)>
    d574:	e1a00006 	mov	r0, r6
    d578:	e5845018 	str	r5, [r4, #24]
    d57c:	e28dd014 	add	sp, sp, #20
    d580:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d584:	e5d31007 	ldrb	r1, [r3, #7]
    d588:	e594000c 	ldr	r0, [r4, #12]
    d58c:	eb000291 	bl	dfd8 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    d590:	e594c018 	ldr	ip, [r4, #24]
    d594:	e594100c 	ldr	r1, [r4, #12]
    d598:	e1a03005 	mov	r3, r5
    d59c:	e5940004 	ldr	r0, [r4, #4]
    d5a0:	e1a02008 	mov	r2, r8
    d5a4:	e58d500c 	str	r5, [sp, #12]
    d5a8:	e58d6008 	str	r6, [sp, #8]
    d5ac:	e58d7004 	str	r7, [sp, #4]
    d5b0:	e58dc000 	str	ip, [sp]
    d5b4:	eb000321 	bl	e240 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d5b8:	e3500012 	cmp	r0, #18
    d5bc:	1a000053 	bne	d710 <CUSBDevice::Initialize()+0x2a0>
    d5c0:	e3012a10 	movw	r2, #6672	; 0x1a10
    d5c4:	e3402003 	movt	r2, #3
    d5c8:	e5d27000 	ldrb	r7, [r2]
    d5cc:	e357007f 	cmp	r7, #127	; 0x7f
    d5d0:	e2873001 	add	r3, r7, #1
    d5d4:	e5c23000 	strb	r3, [r2]
    d5d8:	ca000051 	bgt	d724 <CUSBDevice::Initialize()+0x2b4>
    d5dc:	e1a02007 	mov	r2, r7
    d5e0:	e594100c 	ldr	r1, [r4, #12]
    d5e4:	e5940004 	ldr	r0, [r4, #4]
    d5e8:	eb000321 	bl	e274 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    d5ec:	e2506000 	subs	r6, r0, #0
    d5f0:	0a00005d 	beq	d76c <CUSBDevice::Initialize()+0x2fc>
    d5f4:	e594301c 	ldr	r3, [r4, #28]
    d5f8:	e5c47008 	strb	r7, [r4, #8]
    d5fc:	e3530000 	cmp	r3, #0
    d600:	0a000005 	beq	d61c <CUSBDevice::Initialize()+0x1ac>
    d604:	e30b1078 	movw	r1, #45176	; 0xb078
    d608:	e30b0224 	movw	r0, #45604	; 0xb224
    d60c:	e3401002 	movt	r1, #2
    d610:	e3400002 	movt	r0, #2
    d614:	e3a020a5 	mov	r2, #165	; 0xa5
    d618:	eb005d60 	bl	24ba0 <assertion_failed>
    d61c:	e3a00009 	mov	r0, #9
    d620:	e3a07009 	mov	r7, #9
    d624:	eb00525b 	bl	21f98 <operator new(unsigned int)>
    d628:	e5942018 	ldr	r2, [r4, #24]
    d62c:	e3001525 	movw	r1, #1317	; 0x525
    d630:	e3a05000 	mov	r5, #0
    d634:	e3a08080 	mov	r8, #128	; 0x80
    d638:	e584001c 	str	r0, [r4, #28]
    d63c:	e1a03000 	mov	r3, r0
    d640:	e1d200b8 	ldrh	r0, [r2, #8]
    d644:	e1500001 	cmp	r0, r1
    d648:	e594100c 	ldr	r1, [r4, #12]
    d64c:	e5940004 	ldr	r0, [r4, #4]
    d650:	01d260ba 	ldrheq	r6, [r2, #10]
    d654:	030a24a2 	movweq	r2, #42146	; 0xa4a2
    d658:	13a06000 	movne	r6, #0
    d65c:	e58d3000 	str	r3, [sp]
    d660:	00466002 	subeq	r6, r6, r2
    d664:	e58d500c 	str	r5, [sp, #12]
    d668:	016f6f16 	clzeq	r6, r6
    d66c:	e98d0180 	stmib	sp, {r7, r8}
    d670:	e3a02002 	mov	r2, #2
    d674:	01a062a6 	lsreq	r6, r6, #5
    d678:	e1a03006 	mov	r3, r6
    d67c:	eb0002ef 	bl	e240 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d680:	e1500007 	cmp	r0, r7
    d684:	1a00002d 	bne	d740 <CUSBDevice::Initialize()+0x2d0>
    d688:	e594001c 	ldr	r0, [r4, #28]
    d68c:	e5d07000 	ldrb	r7, [r0]
    d690:	e3570009 	cmp	r7, #9
    d694:	1a000002 	bne	d6a4 <CUSBDevice::Initialize()+0x234>
    d698:	e5d09001 	ldrb	r9, [r0, #1]
    d69c:	e3590002 	cmp	r9, #2
    d6a0:	0a000038 	beq	d788 <CUSBDevice::Initialize()+0x318>
    d6a4:	e3a01001 	mov	r1, #1
    d6a8:	e1a00004 	mov	r0, r4
    d6ac:	e30b2264 	movw	r2, #45668	; 0xb264
    d6b0:	e3402002 	movt	r2, #2
    d6b4:	ebffff40 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d6b8:	e3a01009 	mov	r1, #9
    d6bc:	e594001c 	ldr	r0, [r4, #28]
    d6c0:	eb005238 	bl	21fa8 <operator delete(void*, unsigned int)>
    d6c4:	e3a03000 	mov	r3, #0
    d6c8:	e1a06003 	mov	r6, r3
    d6cc:	e584301c 	str	r3, [r4, #28]
    d6d0:	eaffff9b 	b	d544 <CUSBDevice::Initialize()+0xd4>
    d6d4:	e30b1078 	movw	r1, #45176	; 0xb078
    d6d8:	e30b0088 	movw	r0, #45192	; 0xb088
    d6dc:	e3401002 	movt	r1, #2
    d6e0:	e3400002 	movt	r0, #2
    d6e4:	e3a02065 	mov	r2, #101	; 0x65
    d6e8:	eb005d2c 	bl	24ba0 <assertion_failed>
    d6ec:	eaffff71 	b	d4b8 <CUSBDevice::Initialize()+0x48>
    d6f0:	e30b1078 	movw	r1, #45176	; 0xb078
    d6f4:	e30b0128 	movw	r0, #45352	; 0xb128
    d6f8:	e3401002 	movt	r1, #2
    d6fc:	e3400002 	movt	r0, #2
    d700:	e3a02066 	mov	r2, #102	; 0x66
    d704:	eb005d25 	bl	24ba0 <assertion_failed>
    d708:	e594100c 	ldr	r1, [r4, #12]
    d70c:	eaffff6c 	b	d4c4 <CUSBDevice::Initialize()+0x54>
    d710:	e30b21d8 	movw	r2, #45528	; 0xb1d8
    d714:	e1a01008 	mov	r1, r8
    d718:	e1a00004 	mov	r0, r4
    d71c:	e3402002 	movt	r2, #2
    d720:	eaffff8e 	b	d560 <CUSBDevice::Initialize()+0xf0>
    d724:	e1a01008 	mov	r1, r8
    d728:	e1a00004 	mov	r0, r4
    d72c:	e30b21f8 	movw	r2, #45560	; 0xb1f8
    d730:	e3402002 	movt	r2, #2
    d734:	e1a06005 	mov	r6, r5
    d738:	ebffff1f 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d73c:	eaffff80 	b	d544 <CUSBDevice::Initialize()+0xd4>
    d740:	e30b2238 	movw	r2, #45624	; 0xb238
    d744:	e3402002 	movt	r2, #2
    d748:	e3a01001 	mov	r1, #1
    d74c:	e1a00004 	mov	r0, r4
    d750:	e1a06005 	mov	r6, r5
    d754:	ebffff18 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d758:	e1a01007 	mov	r1, r7
    d75c:	e594001c 	ldr	r0, [r4, #28]
    d760:	eb005210 	bl	21fa8 <operator delete(void*, unsigned int)>
    d764:	e584501c 	str	r5, [r4, #28]
    d768:	eaffff75 	b	d544 <CUSBDevice::Initialize()+0xd4>
    d76c:	e1a03007 	mov	r3, r7
    d770:	e1a01008 	mov	r1, r8
    d774:	e1a00004 	mov	r0, r4
    d778:	e30b220c 	movw	r2, #45580	; 0xb20c
    d77c:	e3402002 	movt	r2, #2
    d780:	ebffff0d 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d784:	eaffff6e 	b	d544 <CUSBDevice::Initialize()+0xd4>
    d788:	e1d0a0b2 	ldrh	sl, [r0, #2]
    d78c:	e35a0c02 	cmp	sl, #512	; 0x200
    d790:	caffffc3 	bgt	d6a4 <CUSBDevice::Initialize()+0x234>
    d794:	e1a01007 	mov	r1, r7
    d798:	eb005202 	bl	21fa8 <operator delete(void*, unsigned int)>
    d79c:	e1a0000a 	mov	r0, sl
    d7a0:	eb0051fd 	bl	21f9c <operator new[](unsigned int)>
    d7a4:	e594c004 	ldr	ip, [r4, #4]
    d7a8:	e594100c 	ldr	r1, [r4, #12]
    d7ac:	e1a03006 	mov	r3, r6
    d7b0:	e1a02009 	mov	r2, r9
    d7b4:	e584001c 	str	r0, [r4, #28]
    d7b8:	e58d0000 	str	r0, [sp]
    d7bc:	e1a0000c 	mov	r0, ip
    d7c0:	e58d500c 	str	r5, [sp, #12]
    d7c4:	e58d8008 	str	r8, [sp, #8]
    d7c8:	e58da004 	str	sl, [sp, #4]
    d7cc:	eb00029b 	bl	e240 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d7d0:	e15a0000 	cmp	sl, r0
    d7d4:	1a0000a3 	bne	da68 <CUSBDevice::Initialize()+0x5f8>
    d7d8:	e5943020 	ldr	r3, [r4, #32]
    d7dc:	e3530000 	cmp	r3, #0
    d7e0:	0a000005 	beq	d7fc <CUSBDevice::Initialize()+0x38c>
    d7e4:	e30b1078 	movw	r1, #45176	; 0xb078
    d7e8:	e30b02ac 	movw	r0, #45740	; 0xb2ac
    d7ec:	e3401002 	movt	r1, #2
    d7f0:	e3400002 	movt	r0, #2
    d7f4:	e3a020e3 	mov	r2, #227	; 0xe3
    d7f8:	eb005ce8 	bl	24ba0 <assertion_failed>
    d7fc:	e3a0001c 	mov	r0, #28
    d800:	eb0051e4 	bl	21f98 <operator new(unsigned int)>
    d804:	e1a0200a 	mov	r2, sl
    d808:	e594101c 	ldr	r1, [r4, #28]
    d80c:	e1a05000 	mov	r5, r0
    d810:	eb0018da 	bl	13b80 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    d814:	e5845020 	str	r5, [r4, #32]
    d818:	e1a00005 	mov	r0, r5
    d81c:	eb001946 	bl	13d3c <CUSBConfigurationParser::IsValid() const>
    d820:	e2506000 	subs	r6, r0, #0
    d824:	e1a00004 	mov	r0, r4
    d828:	0a0000a2 	beq	dab8 <CUSBDevice::Initialize()+0x648>
    d82c:	ebfffe16 	bl	d08c <CUSBDevice::GetNames() const>
    d830:	e2505000 	subs	r5, r0, #0
    d834:	0a0000c6 	beq	db54 <CUSBDevice::Initialize()+0x6e4>
    d838:	eb0061f3 	bl	2600c <CString::operator char const*() const>
    d83c:	e30b22d0 	movw	r2, #45776	; 0xb2d0
    d840:	e3a01003 	mov	r1, #3
    d844:	e3402002 	movt	r2, #2
    d848:	e1a03000 	mov	r3, r0
    d84c:	e1a00004 	mov	r0, r4
    d850:	ebfffed9 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d854:	e5953000 	ldr	r3, [r5]
    d858:	e1a00005 	mov	r0, r5
    d85c:	e5933004 	ldr	r3, [r3, #4]
    d860:	e12fff33 	blx	r3
    d864:	e3a05000 	mov	r5, #0
    d868:	e30ba34c 	movw	sl, #45900	; 0xb34c
    d86c:	e30b80f0 	movw	r8, #45296	; 0xb0f0
    d870:	e30b9338 	movw	r9, #45880	; 0xb338
    d874:	e340a002 	movt	sl, #2
    d878:	e3408002 	movt	r8, #2
    d87c:	e3409002 	movt	r9, #2
    d880:	e1a06005 	mov	r6, r5
    d884:	e3a01004 	mov	r1, #4
    d888:	e5940020 	ldr	r0, [r4, #32]
    d88c:	eb00192c 	bl	13d44 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d890:	e2507000 	subs	r7, r0, #0
    d894:	0a00007e 	beq	da94 <CUSBDevice::Initialize()+0x624>
    d898:	e5d73002 	ldrb	r3, [r7, #2]
    d89c:	e1550003 	cmp	r5, r3
    d8a0:	0a00000c 	beq	d8d8 <CUSBDevice::Initialize()+0x468>
    d8a4:	e285b001 	add	fp, r5, #1
    d8a8:	e153000b 	cmp	r3, fp
    d8ac:	0a000009 	beq	d8d8 <CUSBDevice::Initialize()+0x468>
    d8b0:	e5d73003 	ldrb	r3, [r7, #3]
    d8b4:	e30b22e0 	movw	r2, #45792	; 0xb2e0
    d8b8:	e3a01004 	mov	r1, #4
    d8bc:	e3402002 	movt	r2, #2
    d8c0:	e1a00004 	mov	r0, r4
    d8c4:	ebfffebc 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d8c8:	e5d73002 	ldrb	r3, [r7, #2]
    d8cc:	e15b0003 	cmp	fp, r3
    d8d0:	06ef507b 	uxtbeq	r5, fp
    d8d4:	eaffffea 	b	d884 <CUSBDevice::Initialize()+0x414>
    d8d8:	e5943020 	ldr	r3, [r4, #32]
    d8dc:	e3530000 	cmp	r3, #0
    d8e0:	0a000064 	beq	da78 <CUSBDevice::Initialize()+0x608>
    d8e4:	e0847106 	add	r7, r4, r6, lsl #2
    d8e8:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    d8ec:	e3530000 	cmp	r3, #0
    d8f0:	0a000044 	beq	da08 <CUSBDevice::Initialize()+0x598>
    d8f4:	e3a02f45 	mov	r2, #276	; 0x114
    d8f8:	e30b1078 	movw	r1, #45176	; 0xb078
    d8fc:	e30b0300 	movw	r0, #45824	; 0xb300
    d900:	e3401002 	movt	r1, #2
    d904:	e3400002 	movt	r0, #2
    d908:	eb005ca4 	bl	24ba0 <assertion_failed>
    d90c:	e3a00010 	mov	r0, #16
    d910:	eb0051a0 	bl	21f98 <operator new(unsigned int)>
    d914:	e5942020 	ldr	r2, [r4, #32]
    d918:	e1a01004 	mov	r1, r4
    d91c:	e1a0b000 	mov	fp, r0
    d920:	eb00113c 	bl	11e18 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    d924:	e1a0000b 	mov	r0, fp
    d928:	e587b024 	str	fp, [r7, #36]	; 0x24
    d92c:	e5903000 	ldr	r3, [r0]
    d930:	e5933014 	ldr	r3, [r3, #20]
    d934:	e12fff33 	blx	r3
    d938:	e3500000 	cmp	r0, #0
    d93c:	0a000023 	beq	d9d0 <CUSBDevice::Initialize()+0x560>
    d940:	e3560000 	cmp	r6, #0
    d944:	0a000038 	beq	da2c <CUSBDevice::Initialize()+0x5bc>
    d948:	e5970024 	ldr	r0, [r7, #36]	; 0x24
    d94c:	eb0011a8 	bl	11ff4 <CUSBFunction::GetInterfaceName() const>
    d950:	e250b000 	subs	fp, r0, #0
    d954:	0a00008d 	beq	db90 <CUSBDevice::Initialize()+0x720>
    d958:	e1a01008 	mov	r1, r8
    d95c:	eb0061e6 	bl	260fc <CString::Compare(char const*) const>
    d960:	e3500000 	cmp	r0, #0
    d964:	0a00006d 	beq	db20 <CUSBDevice::Initialize()+0x6b0>
    d968:	e1a0000b 	mov	r0, fp
    d96c:	eb0061a6 	bl	2600c <CString::operator char const*() const>
    d970:	e1a02009 	mov	r2, r9
    d974:	e3a01003 	mov	r1, #3
    d978:	e1a03000 	mov	r3, r0
    d97c:	e1a00004 	mov	r0, r4
    d980:	ebfffe8d 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d984:	e1a0100b 	mov	r1, fp
    d988:	e5970024 	ldr	r0, [r7, #36]	; 0x24
    d98c:	eb00030f 	bl	e5d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    d990:	e1a0b000 	mov	fp, r0
    d994:	e5970024 	ldr	r0, [r7, #36]	; 0x24
    d998:	e3500000 	cmp	r0, #0
    d99c:	0a000002 	beq	d9ac <CUSBDevice::Initialize()+0x53c>
    d9a0:	e5903000 	ldr	r3, [r0]
    d9a4:	e5933004 	ldr	r3, [r3, #4]
    d9a8:	e12fff33 	blx	r3
    d9ac:	e35b0000 	cmp	fp, #0
    d9b0:	0a000043 	beq	dac4 <CUSBDevice::Initialize()+0x654>
    d9b4:	e2866001 	add	r6, r6, #1
    d9b8:	e587b024 	str	fp, [r7, #36]	; 0x24
    d9bc:	e356000a 	cmp	r6, #10
    d9c0:	0a000045 	beq	dadc <CUSBDevice::Initialize()+0x66c>
    d9c4:	e2855001 	add	r5, r5, #1
    d9c8:	e6ef5075 	uxtb	r5, r5
    d9cc:	eaffffac 	b	d884 <CUSBDevice::Initialize()+0x414>
    d9d0:	e1a00004 	mov	r0, r4
    d9d4:	e30b231c 	movw	r2, #45852	; 0xb31c
    d9d8:	e3a01001 	mov	r1, #1
    d9dc:	e3402002 	movt	r2, #2
    d9e0:	ebfffe75 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d9e4:	e5970024 	ldr	r0, [r7, #36]	; 0x24
    d9e8:	e3500000 	cmp	r0, #0
    d9ec:	0a000002 	beq	d9fc <CUSBDevice::Initialize()+0x58c>
    d9f0:	e5903000 	ldr	r3, [r0]
    d9f4:	e5933004 	ldr	r3, [r3, #4]
    d9f8:	e12fff33 	blx	r3
    d9fc:	e3a03000 	mov	r3, #0
    da00:	e5873024 	str	r3, [r7, #36]	; 0x24
    da04:	eaffff9e 	b	d884 <CUSBDevice::Initialize()+0x414>
    da08:	e3a00010 	mov	r0, #16
    da0c:	eb005161 	bl	21f98 <operator new(unsigned int)>
    da10:	e5942020 	ldr	r2, [r4, #32]
    da14:	e1a01004 	mov	r1, r4
    da18:	e1a0b000 	mov	fp, r0
    da1c:	eb0010fd 	bl	11e18 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    da20:	e587b024 	str	fp, [r7, #36]	; 0x24
    da24:	e1a0000b 	mov	r0, fp
    da28:	eaffffbf 	b	d92c <CUSBDevice::Initialize()+0x4bc>
    da2c:	e1a01006 	mov	r1, r6
    da30:	e1a00004 	mov	r0, r4
    da34:	e594b024 	ldr	fp, [r4, #36]	; 0x24
    da38:	ebfffd4e 	bl	cf78 <CUSBDevice::GetName(TDeviceNameSelector) const>
    da3c:	e1a01000 	mov	r1, r0
    da40:	e1a0000b 	mov	r0, fp
    da44:	eb0002e1 	bl	e5d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    da48:	e250b000 	subs	fp, r0, #0
    da4c:	0a000029 	beq	daf8 <CUSBDevice::Initialize()+0x688>
    da50:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    da54:	e3500000 	cmp	r0, #0
    da58:	1affffd0 	bne	d9a0 <CUSBDevice::Initialize()+0x530>
    da5c:	e584b024 	str	fp, [r4, #36]	; 0x24
    da60:	e3a06001 	mov	r6, #1
    da64:	eaffffd6 	b	d9c4 <CUSBDevice::Initialize()+0x554>
    da68:	e30b2288 	movw	r2, #45704	; 0xb288
    da6c:	e3a01001 	mov	r1, #1
    da70:	e3402002 	movt	r2, #2
    da74:	eaffff34 	b	d74c <CUSBDevice::Initialize()+0x2dc>
    da78:	e30b1078 	movw	r1, #45176	; 0xb078
    da7c:	e30b0150 	movw	r0, #45392	; 0xb150
    da80:	e3401002 	movt	r1, #2
    da84:	e3400002 	movt	r0, #2
    da88:	e3002113 	movw	r2, #275	; 0x113
    da8c:	eb005c43 	bl	24ba0 <assertion_failed>
    da90:	eaffff93 	b	d8e4 <CUSBDevice::Initialize()+0x474>
    da94:	e3560000 	cmp	r6, #0
    da98:	13a06001 	movne	r6, #1
    da9c:	1afffea8 	bne	d544 <CUSBDevice::Initialize()+0xd4>
    daa0:	e1a00004 	mov	r0, r4
    daa4:	e30b2388 	movw	r2, #45960	; 0xb388
    daa8:	e3a01002 	mov	r1, #2
    daac:	e3402002 	movt	r2, #2
    dab0:	ebfffe41 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dab4:	eafffea2 	b	d544 <CUSBDevice::Initialize()+0xd4>
    dab8:	e59f1100 	ldr	r1, [pc, #256]	; dbc0 <CUSBDevice::Initialize()+0x750>
    dabc:	ebfffe2b 	bl	d370 <CUSBDevice::ConfigurationError(char const*) const>
    dac0:	eafffe9f 	b	d544 <CUSBDevice::Initialize()+0xd4>
    dac4:	e587b024 	str	fp, [r7, #36]	; 0x24
    dac8:	e1a0200a 	mov	r2, sl
    dacc:	e3a01002 	mov	r1, #2
    dad0:	e1a00004 	mov	r0, r4
    dad4:	ebfffe38 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dad8:	eaffff69 	b	d884 <CUSBDevice::Initialize()+0x414>
    dadc:	e1a00004 	mov	r0, r4
    dae0:	e30b2368 	movw	r2, #45928	; 0xb368
    dae4:	e3a01002 	mov	r1, #2
    dae8:	e3402002 	movt	r2, #2
    daec:	ebfffe32 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    daf0:	e3a06001 	mov	r6, #1
    daf4:	eafffe92 	b	d544 <CUSBDevice::Initialize()+0xd4>
    daf8:	e3a01001 	mov	r1, #1
    dafc:	e1a00004 	mov	r0, r4
    db00:	e594b024 	ldr	fp, [r4, #36]	; 0x24
    db04:	ebfffd1b 	bl	cf78 <CUSBDevice::GetName(TDeviceNameSelector) const>
    db08:	e1a01000 	mov	r1, r0
    db0c:	e1a0000b 	mov	r0, fp
    db10:	eb0002ae 	bl	e5d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    db14:	e250b000 	subs	fp, r0, #0
    db18:	0affff8a 	beq	d948 <CUSBDevice::Initialize()+0x4d8>
    db1c:	eaffffcb 	b	da50 <CUSBDevice::Initialize()+0x5e0>
    db20:	e59b3000 	ldr	r3, [fp]
    db24:	e1a0000b 	mov	r0, fp
    db28:	e5933004 	ldr	r3, [r3, #4]
    db2c:	e12fff33 	blx	r3
    db30:	e5970024 	ldr	r0, [r7, #36]	; 0x24
    db34:	e3500000 	cmp	r0, #0
    db38:	0affffe2 	beq	dac8 <CUSBDevice::Initialize()+0x658>
    db3c:	e5903000 	ldr	r3, [r0]
    db40:	e5933004 	ldr	r3, [r3, #4]
    db44:	e12fff33 	blx	r3
    db48:	e3a03000 	mov	r3, #0
    db4c:	e5873024 	str	r3, [r7, #36]	; 0x24
    db50:	eaffffdc 	b	dac8 <CUSBDevice::Initialize()+0x658>
    db54:	e3a020ef 	mov	r2, #239	; 0xef
    db58:	e30b1078 	movw	r1, #45176	; 0xb078
    db5c:	e30b02c4 	movw	r0, #45764	; 0xb2c4
    db60:	e3401002 	movt	r1, #2
    db64:	e3400002 	movt	r0, #2
    db68:	eb005c0c 	bl	24ba0 <assertion_failed>
    db6c:	e1a00005 	mov	r0, r5
    db70:	eb006125 	bl	2600c <CString::operator char const*() const>
    db74:	e30b22d0 	movw	r2, #45776	; 0xb2d0
    db78:	e3a01003 	mov	r1, #3
    db7c:	e3402002 	movt	r2, #2
    db80:	e1a03000 	mov	r3, r0
    db84:	e1a00004 	mov	r0, r4
    db88:	ebfffe0b 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    db8c:	eaffff34 	b	d864 <CUSBDevice::Initialize()+0x3f4>
    db90:	e3a02e13 	mov	r2, #304	; 0x130
    db94:	e30b1078 	movw	r1, #45176	; 0xb078
    db98:	e30b00f8 	movw	r0, #45304	; 0xb0f8
    db9c:	e3401002 	movt	r1, #2
    dba0:	e3400002 	movt	r0, #2
    dba4:	eb005bfd 	bl	24ba0 <assertion_failed>
    dba8:	e1a01008 	mov	r1, r8
    dbac:	e1a0000b 	mov	r0, fp
    dbb0:	eb006151 	bl	260fc <CString::Compare(char const*) const>
    dbb4:	e3500000 	cmp	r0, #0
    dbb8:	0affffdc 	beq	db30 <CUSBDevice::Initialize()+0x6c0>
    dbbc:	eaffff69 	b	d968 <CUSBDevice::Initialize()+0x4f8>
    dbc0:	0002b070 	.word	0x0002b070

0000dbc4 <CUSBDevice::Configure()>:
    dbc4:	e5903004 	ldr	r3, [r0, #4]
    dbc8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dbcc:	e3530000 	cmp	r3, #0
    dbd0:	e1a05000 	mov	r5, r0
    dbd4:	0a00002f 	beq	dc98 <CUSBDevice::Configure()+0xd4>
    dbd8:	e595300c 	ldr	r3, [r5, #12]
    dbdc:	e3530000 	cmp	r3, #0
    dbe0:	0a000033 	beq	dcb4 <CUSBDevice::Configure()+0xf0>
    dbe4:	e595601c 	ldr	r6, [r5, #28]
    dbe8:	e3560000 	cmp	r6, #0
    dbec:	0a00001e 	beq	dc6c <CUSBDevice::Configure()+0xa8>
    dbf0:	e5d62005 	ldrb	r2, [r6, #5]
    dbf4:	e595100c 	ldr	r1, [r5, #12]
    dbf8:	e5950004 	ldr	r0, [r5, #4]
    dbfc:	eb0001af 	bl	e2c0 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    dc00:	e2506000 	subs	r6, r0, #0
    dc04:	0a00001a 	beq	dc74 <CUSBDevice::Configure()+0xb0>
    dc08:	e3a06000 	mov	r6, #0
    dc0c:	e2854024 	add	r4, r5, #36	; 0x24
    dc10:	e285504c 	add	r5, r5, #76	; 0x4c
    dc14:	e1a07006 	mov	r7, r6
    dc18:	e5943000 	ldr	r3, [r4]
    dc1c:	e3530000 	cmp	r3, #0
    dc20:	e1a00003 	mov	r0, r3
    dc24:	0a00000d 	beq	dc60 <CUSBDevice::Configure()+0x9c>
    dc28:	e5933000 	ldr	r3, [r3]
    dc2c:	e5933018 	ldr	r3, [r3, #24]
    dc30:	e12fff33 	blx	r3
    dc34:	e3500000 	cmp	r0, #0
    dc38:	13a06001 	movne	r6, #1
    dc3c:	1a000007 	bne	dc60 <CUSBDevice::Configure()+0x9c>
    dc40:	e5943000 	ldr	r3, [r4]
    dc44:	e3530000 	cmp	r3, #0
    dc48:	e1a00003 	mov	r0, r3
    dc4c:	0a000002 	beq	dc5c <CUSBDevice::Configure()+0x98>
    dc50:	e5933000 	ldr	r3, [r3]
    dc54:	e5933004 	ldr	r3, [r3, #4]
    dc58:	e12fff33 	blx	r3
    dc5c:	e5847000 	str	r7, [r4]
    dc60:	e2844004 	add	r4, r4, #4
    dc64:	e1550004 	cmp	r5, r4
    dc68:	1affffea 	bne	dc18 <CUSBDevice::Configure()+0x54>
    dc6c:	e1a00006 	mov	r0, r6
    dc70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dc74:	e595301c 	ldr	r3, [r5, #28]
    dc78:	e1a00005 	mov	r0, r5
    dc7c:	e3a01001 	mov	r1, #1
    dc80:	e30b23ac 	movw	r2, #45996	; 0xb3ac
    dc84:	e3402002 	movt	r2, #2
    dc88:	e5d33005 	ldrb	r3, [r3, #5]
    dc8c:	ebfffdca 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dc90:	e1a00006 	mov	r0, r6
    dc94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dc98:	e30b1078 	movw	r1, #45176	; 0xb078
    dc9c:	e30b0088 	movw	r0, #45192	; 0xb088
    dca0:	e3401002 	movt	r1, #2
    dca4:	e3400002 	movt	r0, #2
    dca8:	e300215f 	movw	r2, #351	; 0x15f
    dcac:	eb005bbb 	bl	24ba0 <assertion_failed>
    dcb0:	eaffffc8 	b	dbd8 <CUSBDevice::Configure()+0x14>
    dcb4:	e30b1078 	movw	r1, #45176	; 0xb078
    dcb8:	e30b0128 	movw	r0, #45352	; 0xb128
    dcbc:	e3401002 	movt	r1, #2
    dcc0:	e3400002 	movt	r0, #2
    dcc4:	e3a02e16 	mov	r2, #352	; 0x160
    dcc8:	eb005bb4 	bl	24ba0 <assertion_failed>
    dccc:	eaffffc4 	b	dbe4 <CUSBDevice::Configure()+0x20>

0000dcd0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    dcd0:	e3510000 	cmp	r1, #0
    dcd4:	e3a03008 	mov	r3, #8
    dcd8:	e92d4010 	push	{r4, lr}
    dcdc:	e3a02001 	mov	r2, #1
    dce0:	e580300c 	str	r3, [r0, #12]
    dce4:	e1a04000 	mov	r4, r0
    dce8:	e3a03000 	mov	r3, #0
    dcec:	e5801000 	str	r1, [r0]
    dcf0:	e5802010 	str	r2, [r0, #16]
    dcf4:	e5c03004 	strb	r3, [r0, #4]
    dcf8:	e5c03005 	strb	r3, [r0, #5]
    dcfc:	e5803008 	str	r3, [r0, #8]
    dd00:	e5c03014 	strb	r3, [r0, #20]
    dd04:	0a000001 	beq	dd10 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x40>
    dd08:	e1a00004 	mov	r0, r4
    dd0c:	e8bd8010 	pop	{r4, pc}
    dd10:	e3a02020 	mov	r2, #32
    dd14:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    dd18:	e30a0fdc 	movw	r0, #45020	; 0xafdc
    dd1c:	e3401002 	movt	r1, #2
    dd20:	e3400002 	movt	r0, #2
    dd24:	eb005b9d 	bl	24ba0 <assertion_failed>
    dd28:	e1a00004 	mov	r0, r4
    dd2c:	e8bd8010 	pop	{r4, pc}

0000dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    dd30:	e3510000 	cmp	r1, #0
    dd34:	e3a03001 	mov	r3, #1
    dd38:	e92d4070 	push	{r4, r5, r6, lr}
    dd3c:	e1a04000 	mov	r4, r0
    dd40:	e1a05002 	mov	r5, r2
    dd44:	e5801000 	str	r1, [r0]
    dd48:	e5803010 	str	r3, [r0, #16]
    dd4c:	0a00005f 	beq	ded0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a0>
    dd50:	e3550000 	cmp	r5, #0
    dd54:	0a000056 	beq	deb4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x184>
    dd58:	e5d53000 	ldrb	r3, [r5]
    dd5c:	e3530006 	cmp	r3, #6
    dd60:	9a00003b 	bls	de54 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x124>
    dd64:	e5d53001 	ldrb	r3, [r5, #1]
    dd68:	e3530005 	cmp	r3, #5
    dd6c:	0a000005 	beq	dd88 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x58>
    dd70:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    dd74:	e30b0408 	movw	r0, #46088	; 0xb408
    dd78:	e3401002 	movt	r1, #2
    dd7c:	e3400002 	movt	r0, #2
    dd80:	e3a0202b 	mov	r2, #43	; 0x2b
    dd84:	eb005b85 	bl	24ba0 <assertion_failed>
    dd88:	e5d53003 	ldrb	r3, [r5, #3]
    dd8c:	e2033003 	and	r3, r3, #3
    dd90:	e3530002 	cmp	r3, #2
    dd94:	0a000022 	beq	de24 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xf4>
    dd98:	e3530003 	cmp	r3, #3
    dd9c:	1a000018 	bne	de04 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd4>
    dda0:	e3a03002 	mov	r3, #2
    dda4:	e3a06001 	mov	r6, #1
    dda8:	e5c43005 	strb	r3, [r4, #5]
    ddac:	e5c46014 	strb	r6, [r4, #20]
    ddb0:	e5d53002 	ldrb	r3, [r5, #2]
    ddb4:	e203200f 	and	r2, r3, #15
    ddb8:	e5c42004 	strb	r2, [r4, #4]
    ddbc:	e1a033a3 	lsr	r3, r3, #7
    ddc0:	e5843008 	str	r3, [r4, #8]
    ddc4:	e1d530b4 	ldrh	r3, [r5, #4]
    ddc8:	e584300c 	str	r3, [r4, #12]
    ddcc:	e5d55006 	ldrb	r5, [r5, #6]
    ddd0:	e3550000 	cmp	r5, #0
    ddd4:	0a000030 	beq	de9c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x16c>
    ddd8:	e5940000 	ldr	r0, [r4]
    dddc:	ebfffd08 	bl	d204 <CUSBDevice::GetSpeed() const>
    dde0:	e3500002 	cmp	r0, #2
    dde4:	0a000021 	beq	de70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x140>
    dde8:	e5845010 	str	r5, [r4, #16]
    ddec:	e3550013 	cmp	r5, #19
    ddf0:	8a000009 	bhi	de1c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xec>
    ddf4:	e3a03014 	mov	r3, #20
    ddf8:	e1a00004 	mov	r0, r4
    ddfc:	e5843010 	str	r3, [r4, #16]
    de00:	e8bd8070 	pop	{r4, r5, r6, pc}
    de04:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    de08:	e30b0138 	movw	r0, #45368	; 0xb138
    de0c:	e3401002 	movt	r1, #2
    de10:	e3400002 	movt	r0, #2
    de14:	e3a0203a 	mov	r2, #58	; 0x3a
    de18:	eb005b60 	bl	24ba0 <assertion_failed>
    de1c:	e1a00004 	mov	r0, r4
    de20:	e8bd8070 	pop	{r4, r5, r6, pc}
    de24:	e3a03001 	mov	r3, #1
    de28:	e5c43005 	strb	r3, [r4, #5]
    de2c:	e5c43014 	strb	r3, [r4, #20]
    de30:	e1a00004 	mov	r0, r4
    de34:	e5d53002 	ldrb	r3, [r5, #2]
    de38:	e203200f 	and	r2, r3, #15
    de3c:	e5c42004 	strb	r2, [r4, #4]
    de40:	e1a033a3 	lsr	r3, r3, #7
    de44:	e5843008 	str	r3, [r4, #8]
    de48:	e1d530b4 	ldrh	r3, [r5, #4]
    de4c:	e584300c 	str	r3, [r4, #12]
    de50:	e8bd8070 	pop	{r4, r5, r6, pc}
    de54:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    de58:	e30b03e8 	movw	r0, #46056	; 0xb3e8
    de5c:	e3401002 	movt	r1, #2
    de60:	e3400002 	movt	r0, #2
    de64:	e3a0202a 	mov	r2, #42	; 0x2a
    de68:	eb005b4c 	bl	24ba0 <assertion_failed>
    de6c:	eaffffbc 	b	dd64 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x34>
    de70:	e3550010 	cmp	r5, #16
    de74:	c3a03a01 	movgt	r3, #4096	; 0x1000
    de78:	c5843010 	strgt	r3, [r4, #16]
    de7c:	caffffe6 	bgt	de1c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xec>
    de80:	e2453001 	sub	r3, r5, #1
    de84:	e1a05316 	lsl	r5, r6, r3
    de88:	e1a051a5 	lsr	r5, r5, #3
    de8c:	e5845010 	str	r5, [r4, #16]
    de90:	e3550000 	cmp	r5, #0
    de94:	0affffd6 	beq	ddf4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc4>
    de98:	eaffffd3 	b	ddec <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xbc>
    de9c:	e5940000 	ldr	r0, [r4]
    dea0:	ebfffcd7 	bl	d204 <CUSBDevice::GetSpeed() const>
    dea4:	e3500002 	cmp	r0, #2
    dea8:	11a05006 	movne	r5, r6
    deac:	1affffcd 	bne	dde8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xb8>
    deb0:	eaffffcf 	b	ddf4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc4>
    deb4:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    deb8:	e30b03dc 	movw	r0, #46044	; 0xb3dc
    debc:	e3401002 	movt	r1, #2
    dec0:	e3400002 	movt	r0, #2
    dec4:	e3a02029 	mov	r2, #41	; 0x29
    dec8:	eb005b34 	bl	24ba0 <assertion_failed>
    decc:	eaffffa1 	b	dd58 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x28>
    ded0:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    ded4:	e30a0fdc 	movw	r0, #45020	; 0xafdc
    ded8:	e3401002 	movt	r1, #2
    dedc:	e3400002 	movt	r0, #2
    dee0:	e3a02027 	mov	r2, #39	; 0x27
    dee4:	eb005b2d 	bl	24ba0 <assertion_failed>
    dee8:	eaffff98 	b	dd50 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x20>

0000deec <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)>:
    deec:	e92d4070 	push	{r4, r5, r6, lr}
    def0:	e2515000 	subs	r5, r1, #0
    def4:	e1a04000 	mov	r4, r0
    def8:	e1a06002 	mov	r6, r2
    defc:	0a000017 	beq	df60 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x74>
    df00:	e3560000 	cmp	r6, #0
    df04:	e5846000 	str	r6, [r4]
    df08:	0a00000d 	beq	df44 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x58>
    df0c:	e5d53004 	ldrb	r3, [r5, #4]
    df10:	e1a00004 	mov	r0, r4
    df14:	e5c43004 	strb	r3, [r4, #4]
    df18:	e5d5e005 	ldrb	lr, [r5, #5]
    df1c:	e595c008 	ldr	ip, [r5, #8]
    df20:	e595100c 	ldr	r1, [r5, #12]
    df24:	e5952010 	ldr	r2, [r5, #16]
    df28:	e5d53014 	ldrb	r3, [r5, #20]
    df2c:	e5c4e005 	strb	lr, [r4, #5]
    df30:	e584c008 	str	ip, [r4, #8]
    df34:	e584100c 	str	r1, [r4, #12]
    df38:	e5842010 	str	r2, [r4, #16]
    df3c:	e5c43014 	strb	r3, [r4, #20]
    df40:	e8bd8070 	pop	{r4, r5, r6, pc}
    df44:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    df48:	e30a0fdc 	movw	r0, #45020	; 0xafdc
    df4c:	e3401002 	movt	r1, #2
    df50:	e3400002 	movt	r0, #2
    df54:	e3a0206d 	mov	r2, #109	; 0x6d
    df58:	eb005b10 	bl	24ba0 <assertion_failed>
    df5c:	eaffffea 	b	df0c <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x20>
    df60:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    df64:	e30b0438 	movw	r0, #46136	; 0xb438
    df68:	e3401002 	movt	r1, #2
    df6c:	e3400002 	movt	r0, #2
    df70:	e3a0206a 	mov	r2, #106	; 0x6a
    df74:	eb005b09 	bl	24ba0 <assertion_failed>
    df78:	eaffffe0 	b	df00 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x14>

0000df7c <CUSBEndpoint::~CUSBEndpoint()>:
    df7c:	e12fff1e 	bx	lr

0000df80 <CUSBEndpoint::GetDevice() const>:
    df80:	e5903000 	ldr	r3, [r0]
    df84:	e3530000 	cmp	r3, #0
    df88:	0a000001 	beq	df94 <CUSBEndpoint::GetDevice() const+0x14>
    df8c:	e1a00003 	mov	r0, r3
    df90:	e12fff1e 	bx	lr
    df94:	e92d4010 	push	{r4, lr}
    df98:	e3a0207e 	mov	r2, #126	; 0x7e
    df9c:	e1a04000 	mov	r4, r0
    dfa0:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    dfa4:	e30a0fdc 	movw	r0, #45020	; 0xafdc
    dfa8:	e3401002 	movt	r1, #2
    dfac:	e3400002 	movt	r0, #2
    dfb0:	eb005afa 	bl	24ba0 <assertion_failed>
    dfb4:	e5943000 	ldr	r3, [r4]
    dfb8:	e1a00003 	mov	r0, r3
    dfbc:	e8bd8010 	pop	{r4, pc}

0000dfc0 <CUSBEndpoint::GetNumber() const>:
    dfc0:	e5d00004 	ldrb	r0, [r0, #4]
    dfc4:	e12fff1e 	bx	lr

0000dfc8 <CUSBEndpoint::GetType() const>:
    dfc8:	e5d00005 	ldrb	r0, [r0, #5]
    dfcc:	e12fff1e 	bx	lr

0000dfd0 <CUSBEndpoint::IsDirectionIn() const>:
    dfd0:	e5900008 	ldr	r0, [r0, #8]
    dfd4:	e12fff1e 	bx	lr

0000dfd8 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    dfd8:	e580100c 	str	r1, [r0, #12]
    dfdc:	e12fff1e 	bx	lr

0000dfe0 <CUSBEndpoint::GetMaxPacketSize() const>:
    dfe0:	e590000c 	ldr	r0, [r0, #12]
    dfe4:	e12fff1e 	bx	lr

0000dfe8 <CUSBEndpoint::GetInterval() const>:
    dfe8:	e5d03005 	ldrb	r3, [r0, #5]
    dfec:	e92d4010 	push	{r4, lr}
    dff0:	e3530002 	cmp	r3, #2
    dff4:	e1a04000 	mov	r4, r0
    dff8:	0a000005 	beq	e014 <CUSBEndpoint::GetInterval() const+0x2c>
    dffc:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    e000:	e30b0448 	movw	r0, #46152	; 0xb448
    e004:	e3401002 	movt	r1, #2
    e008:	e3400002 	movt	r0, #2
    e00c:	e3a0209d 	mov	r2, #157	; 0x9d
    e010:	eb005ae2 	bl	24ba0 <assertion_failed>
    e014:	e5940010 	ldr	r0, [r4, #16]
    e018:	e8bd8010 	pop	{r4, pc}

0000e01c <CUSBEndpoint::GetNextPID(int)>:
    e01c:	e3510000 	cmp	r1, #0
    e020:	0a000004 	beq	e038 <CUSBEndpoint::GetNextPID(int)+0x1c>
    e024:	e5d03005 	ldrb	r3, [r0, #5]
    e028:	e3530000 	cmp	r3, #0
    e02c:	1a000003 	bne	e040 <CUSBEndpoint::GetNextPID(int)+0x24>
    e030:	e3a00002 	mov	r0, #2
    e034:	e12fff1e 	bx	lr
    e038:	e5d00014 	ldrb	r0, [r0, #20]
    e03c:	e12fff1e 	bx	lr
    e040:	e92d4010 	push	{r4, lr}
    e044:	e3a020a6 	mov	r2, #166	; 0xa6
    e048:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    e04c:	e30b0468 	movw	r0, #46184	; 0xb468
    e050:	e3401002 	movt	r1, #2
    e054:	e3400002 	movt	r0, #2
    e058:	eb005ad0 	bl	24ba0 <assertion_failed>
    e05c:	e3a00002 	mov	r0, #2
    e060:	e8bd8010 	pop	{r4, pc}

0000e064 <CUSBEndpoint::SkipPID(unsigned int, int)>:
    e064:	e5d03005 	ldrb	r3, [r0, #5]
    e068:	e92d4070 	push	{r4, r5, r6, lr}
    e06c:	e3530002 	cmp	r3, #2
    e070:	e1a04000 	mov	r4, r0
    e074:	e1a06001 	mov	r6, r1
    e078:	e1a05002 	mov	r5, r2
    e07c:	8a000011 	bhi	e0c8 <CUSBEndpoint::SkipPID(unsigned int, int)+0x64>
    e080:	e3550000 	cmp	r5, #0
    e084:	1a000009 	bne	e0b0 <CUSBEndpoint::SkipPID(unsigned int, int)+0x4c>
    e088:	e5d43014 	ldrb	r3, [r4, #20]
    e08c:	e3530001 	cmp	r3, #1
    e090:	0a000021 	beq	e11c <CUSBEndpoint::SkipPID(unsigned int, int)+0xb8>
    e094:	3a000022 	bcc	e124 <CUSBEndpoint::SkipPID(unsigned int, int)+0xc0>
    e098:	e3530002 	cmp	r3, #2
    e09c:	1a000017 	bne	e100 <CUSBEndpoint::SkipPID(unsigned int, int)+0x9c>
    e0a0:	e3160001 	tst	r6, #1
    e0a4:	13a03001 	movne	r3, #1
    e0a8:	15c43014 	strbne	r3, [r4, #20]
    e0ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0b0:	e5d43005 	ldrb	r3, [r4, #5]
    e0b4:	e3530000 	cmp	r3, #0
    e0b8:	1a000009 	bne	e0e4 <CUSBEndpoint::SkipPID(unsigned int, int)+0x80>
    e0bc:	e3a03000 	mov	r3, #0
    e0c0:	e5c43014 	strb	r3, [r4, #20]
    e0c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0c8:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    e0cc:	e30b0488 	movw	r0, #46216	; 0xb488
    e0d0:	e3401002 	movt	r1, #2
    e0d4:	e3400002 	movt	r0, #2
    e0d8:	e3a020b2 	mov	r2, #178	; 0xb2
    e0dc:	eb005aaf 	bl	24ba0 <assertion_failed>
    e0e0:	eaffffe6 	b	e080 <CUSBEndpoint::SkipPID(unsigned int, int)+0x1c>
    e0e4:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    e0e8:	e30b0468 	movw	r0, #46184	; 0xb468
    e0ec:	e3401002 	movt	r1, #2
    e0f0:	e3400002 	movt	r0, #2
    e0f4:	e3a020d1 	mov	r2, #209	; 0xd1
    e0f8:	eb005aa8 	bl	24ba0 <assertion_failed>
    e0fc:	eaffffee 	b	e0bc <CUSBEndpoint::SkipPID(unsigned int, int)+0x58>
    e100:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    e104:	e30b0138 	movw	r0, #45368	; 0xb138
    e108:	e3401002 	movt	r1, #2
    e10c:	e3400002 	movt	r0, #2
    e110:	e3a020cb 	mov	r2, #203	; 0xcb
    e114:	e8bd4070 	pop	{r4, r5, r6, lr}
    e118:	ea005aa0 	b	24ba0 <assertion_failed>
    e11c:	e3160001 	tst	r6, #1
    e120:	08bd8070 	popeq	{r4, r5, r6, pc}
    e124:	e3a03002 	mov	r3, #2
    e128:	e5c43014 	strb	r3, [r4, #20]
    e12c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e130 <CUSBEndpoint::ResetPID()>:
    e130:	e5d03005 	ldrb	r3, [r0, #5]
    e134:	e92d4010 	push	{r4, lr}
    e138:	e3530001 	cmp	r3, #1
    e13c:	e1a04000 	mov	r4, r0
    e140:	0a000005 	beq	e15c <CUSBEndpoint::ResetPID()+0x2c>
    e144:	e30b13cc 	movw	r1, #46028	; 0xb3cc
    e148:	e30b04e8 	movw	r0, #46312	; 0xb4e8
    e14c:	e3401002 	movt	r1, #2
    e150:	e3400002 	movt	r0, #2
    e154:	e3a020d9 	mov	r2, #217	; 0xd9
    e158:	eb005a90 	bl	24ba0 <assertion_failed>
    e15c:	e3a03001 	mov	r3, #1
    e160:	e5c43014 	strb	r3, [r4, #20]
    e164:	e8bd8010 	pop	{r4, pc}

0000e168 <CUSBHostController::CUSBHostController()>:
    e168:	e59f3004 	ldr	r3, [pc, #4]	; e174 <CUSBHostController::CUSBHostController()+0xc>
    e16c:	e5803000 	str	r3, [r0]
    e170:	e12fff1e 	bx	lr
    e174:	0002b50c 	.word	0x0002b50c

0000e178 <CUSBHostController::~CUSBHostController()>:
    e178:	e12fff1e 	bx	lr

0000e17c <CUSBHostController::~CUSBHostController()>:
    e17c:	e92d4010 	push	{r4, lr}
    e180:	e3a01004 	mov	r1, #4
    e184:	e1a04000 	mov	r4, r0
    e188:	eb004f86 	bl	21fa8 <operator delete(void*, unsigned int)>
    e18c:	e1a00004 	mov	r0, r4
    e190:	e8bd8010 	pop	{r4, pc}

0000e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
    e194:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e198:	e24dd034 	sub	sp, sp, #52	; 0x34
    e19c:	e1a05000 	mov	r5, r0
    e1a0:	e3a00008 	mov	r0, #8
    e1a4:	e1dd66b4 	ldrh	r6, [sp, #100]	; 0x64
    e1a8:	e1a0a002 	mov	sl, r2
    e1ac:	e1a09003 	mov	r9, r3
    e1b0:	e1dd85b8 	ldrh	r8, [sp, #88]	; 0x58
    e1b4:	e1a0b001 	mov	fp, r1
    e1b8:	e1dd75bc 	ldrh	r7, [sp, #92]	; 0x5c
    e1bc:	eb004f75 	bl	21f98 <operator new(unsigned int)>
    e1c0:	e1a0100b 	mov	r1, fp
    e1c4:	e1a03006 	mov	r3, r6
    e1c8:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
    e1cc:	e58d0000 	str	r0, [sp]
    e1d0:	e1a04000 	mov	r4, r0
    e1d4:	e5c0a000 	strb	sl, [r0]
    e1d8:	e5c09001 	strb	r9, [r0, #1]
    e1dc:	e1c080b2 	strh	r8, [r0, #2]
    e1e0:	e28d0008 	add	r0, sp, #8
    e1e4:	e1c470b4 	strh	r7, [r4, #4]
    e1e8:	e1c460b6 	strh	r6, [r4, #6]
    e1ec:	eb00005e 	bl	e36c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    e1f0:	e5953000 	ldr	r3, [r5]
    e1f4:	e1a00005 	mov	r0, r5
    e1f8:	e28d1008 	add	r1, sp, #8
    e1fc:	e5933008 	ldr	r3, [r3, #8]
    e200:	e12fff33 	blx	r3
    e204:	e3500000 	cmp	r0, #0
    e208:	0a00000a 	beq	e238 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa4>
    e20c:	e28d0008 	add	r0, sp, #8
    e210:	eb000092 	bl	e460 <CUSBRequest::GetResultLength() const>
    e214:	e1a05000 	mov	r5, r0
    e218:	e1a00004 	mov	r0, r4
    e21c:	e3a01008 	mov	r1, #8
    e220:	eb004f60 	bl	21fa8 <operator delete(void*, unsigned int)>
    e224:	e28d0008 	add	r0, sp, #8
    e228:	eb000075 	bl	e404 <CUSBRequest::~CUSBRequest()>
    e22c:	e1a00005 	mov	r0, r5
    e230:	e28dd034 	add	sp, sp, #52	; 0x34
    e234:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e238:	e3e05000 	mvn	r5, #0
    e23c:	eafffff5 	b	e218 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0x84>

0000e240 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
    e240:	e92d4030 	push	{r4, r5, lr}
    e244:	e1835402 	orr	r5, r3, r2, lsl #8
    e248:	e59d400c 	ldr	r4, [sp, #12]
    e24c:	e3a03006 	mov	r3, #6
    e250:	e1dde1b8 	ldrh	lr, [sp, #24]
    e254:	e1ddc1b0 	ldrh	ip, [sp, #16]
    e258:	e5dd2014 	ldrb	r2, [sp, #20]
    e25c:	e58d500c 	str	r5, [sp, #12]
    e260:	e58d4014 	str	r4, [sp, #20]
    e264:	e58de010 	str	lr, [sp, #16]
    e268:	e58dc018 	str	ip, [sp, #24]
    e26c:	e8bd4030 	pop	{r4, r5, lr}
    e270:	eaffffc7 	b	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

0000e274 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
    e274:	e92d4010 	push	{r4, lr}
    e278:	e24dd010 	sub	sp, sp, #16
    e27c:	e3a04000 	mov	r4, #0
    e280:	e3a03005 	mov	r3, #5
    e284:	e58d2000 	str	r2, [sp]
    e288:	e1a02004 	mov	r2, r4
    e28c:	e58d400c 	str	r4, [sp, #12]
    e290:	e58d4008 	str	r4, [sp, #8]
    e294:	e58d4004 	str	r4, [sp, #4]
    e298:	ebffffbd 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e29c:	e1500004 	cmp	r0, r4
    e2a0:	b1a00004 	movlt	r0, r4
    e2a4:	ba000003 	blt	e2b8 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
    e2a8:	eb0052a0 	bl	22d30 <CTimer::Get()>
    e2ac:	e3a00032 	mov	r0, #50	; 0x32
    e2b0:	eb005251 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
    e2b4:	e3a00001 	mov	r0, #1
    e2b8:	e28dd010 	add	sp, sp, #16
    e2bc:	e8bd8010 	pop	{r4, pc}

0000e2c0 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
    e2c0:	e92d4010 	push	{r4, lr}
    e2c4:	e24dd010 	sub	sp, sp, #16
    e2c8:	e3a04000 	mov	r4, #0
    e2cc:	e3a03009 	mov	r3, #9
    e2d0:	e58d2000 	str	r2, [sp]
    e2d4:	e1a02004 	mov	r2, r4
    e2d8:	e58d400c 	str	r4, [sp, #12]
    e2dc:	e58d4008 	str	r4, [sp, #8]
    e2e0:	e58d4004 	str	r4, [sp, #4]
    e2e4:	ebffffaa 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e2e8:	e1500004 	cmp	r0, r4
    e2ec:	b1a00004 	movlt	r0, r4
    e2f0:	ba000003 	blt	e304 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
    e2f4:	eb00528d 	bl	22d30 <CTimer::Get()>
    e2f8:	e3a00032 	mov	r0, #50	; 0x32
    e2fc:	eb00523e 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
    e300:	e3a00001 	mov	r0, #1
    e304:	e28dd010 	add	sp, sp, #16
    e308:	e8bd8010 	pop	{r4, pc}

0000e30c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>:
    e30c:	e92d4010 	push	{r4, lr}
    e310:	e24dd030 	sub	sp, sp, #48	; 0x30
    e314:	e1a04000 	mov	r4, r0
    e318:	e3a00000 	mov	r0, #0
    e31c:	e58d0000 	str	r0, [sp]
    e320:	e28d0008 	add	r0, sp, #8
    e324:	eb000010 	bl	e36c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    e328:	e5943000 	ldr	r3, [r4]
    e32c:	e1a00004 	mov	r0, r4
    e330:	e28d1008 	add	r1, sp, #8
    e334:	e5933008 	ldr	r3, [r3, #8]
    e338:	e12fff33 	blx	r3
    e33c:	e3500000 	cmp	r0, #0
    e340:	0a000007 	beq	e364 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)+0x58>
    e344:	e28d0008 	add	r0, sp, #8
    e348:	eb000044 	bl	e460 <CUSBRequest::GetResultLength() const>
    e34c:	e1a04000 	mov	r4, r0
    e350:	e28d0008 	add	r0, sp, #8
    e354:	eb00002a 	bl	e404 <CUSBRequest::~CUSBRequest()>
    e358:	e1a00004 	mov	r0, r4
    e35c:	e28dd030 	add	sp, sp, #48	; 0x30
    e360:	e8bd8010 	pop	{r4, pc}
    e364:	e3e04000 	mvn	r4, #0
    e368:	eafffff8 	b	e350 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)+0x44>

0000e36c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
    e36c:	e92d4010 	push	{r4, lr}
    e370:	e3510000 	cmp	r1, #0
    e374:	e59dc008 	ldr	ip, [sp, #8]
    e378:	e1a04000 	mov	r4, r0
    e37c:	e580300c 	str	r3, [r0, #12]
    e380:	e3a03000 	mov	r3, #0
    e384:	e5801000 	str	r1, [r0]
    e388:	e5802008 	str	r2, [r0, #8]
    e38c:	e580c004 	str	ip, [r0, #4]
    e390:	e5803010 	str	r3, [r0, #16]
    e394:	e5803014 	str	r3, [r0, #20]
    e398:	e5803018 	str	r3, [r0, #24]
    e39c:	e580301c 	str	r3, [r0, #28]
    e3a0:	e5803020 	str	r3, [r0, #32]
    e3a4:	e5803024 	str	r3, [r0, #36]	; 0x24
    e3a8:	0a00000d 	beq	e3e4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
    e3ac:	e3520000 	cmp	r2, #0
    e3b0:	0a000001 	beq	e3bc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x50>
    e3b4:	e1a00004 	mov	r0, r4
    e3b8:	e8bd8010 	pop	{r4, pc}
    e3bc:	e594300c 	ldr	r3, [r4, #12]
    e3c0:	e3530000 	cmp	r3, #0
    e3c4:	0afffffa 	beq	e3b4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
    e3c8:	e30b151c 	movw	r1, #46364	; 0xb51c
    e3cc:	e30b052c 	movw	r0, #46380	; 0xb52c
    e3d0:	e3401002 	movt	r1, #2
    e3d4:	e3400002 	movt	r0, #2
    e3d8:	e3a02024 	mov	r2, #36	; 0x24
    e3dc:	eb0059ef 	bl	24ba0 <assertion_failed>
    e3e0:	eafffff3 	b	e3b4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
    e3e4:	e3a02023 	mov	r2, #35	; 0x23
    e3e8:	e30b151c 	movw	r1, #46364	; 0xb51c
    e3ec:	e30a0fbc 	movw	r0, #44988	; 0xafbc
    e3f0:	e3401002 	movt	r1, #2
    e3f4:	e3400002 	movt	r0, #2
    e3f8:	eb0059e8 	bl	24ba0 <assertion_failed>
    e3fc:	e5942008 	ldr	r2, [r4, #8]
    e400:	eaffffe9 	b	e3ac <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x40>

0000e404 <CUSBRequest::~CUSBRequest()>:
    e404:	e12fff1e 	bx	lr

0000e408 <CUSBRequest::GetEndpoint() const>:
    e408:	e5903000 	ldr	r3, [r0]
    e40c:	e3530000 	cmp	r3, #0
    e410:	0a000001 	beq	e41c <CUSBRequest::GetEndpoint() const+0x14>
    e414:	e1a00003 	mov	r0, r3
    e418:	e12fff1e 	bx	lr
    e41c:	e92d4010 	push	{r4, lr}
    e420:	e3a02031 	mov	r2, #49	; 0x31
    e424:	e1a04000 	mov	r4, r0
    e428:	e30b151c 	movw	r1, #46364	; 0xb51c
    e42c:	e30a0fbc 	movw	r0, #44988	; 0xafbc
    e430:	e3401002 	movt	r1, #2
    e434:	e3400002 	movt	r0, #2
    e438:	eb0059d8 	bl	24ba0 <assertion_failed>
    e43c:	e5943000 	ldr	r3, [r4]
    e440:	e1a00003 	mov	r0, r3
    e444:	e8bd8010 	pop	{r4, pc}

0000e448 <CUSBRequest::SetStatus(int)>:
    e448:	e5801010 	str	r1, [r0, #16]
    e44c:	e12fff1e 	bx	lr

0000e450 <CUSBRequest::SetResultLen(unsigned int)>:
    e450:	e5801014 	str	r1, [r0, #20]
    e454:	e12fff1e 	bx	lr

0000e458 <CUSBRequest::GetStatus() const>:
    e458:	e5900010 	ldr	r0, [r0, #16]
    e45c:	e12fff1e 	bx	lr

0000e460 <CUSBRequest::GetResultLength() const>:
    e460:	e5903010 	ldr	r3, [r0, #16]
    e464:	e92d4010 	push	{r4, lr}
    e468:	e3530000 	cmp	r3, #0
    e46c:	e1a04000 	mov	r4, r0
    e470:	1a000005 	bne	e48c <CUSBRequest::GetResultLength() const+0x2c>
    e474:	e30b151c 	movw	r1, #46364	; 0xb51c
    e478:	e30b0550 	movw	r0, #46416	; 0xb550
    e47c:	e3401002 	movt	r1, #2
    e480:	e3400002 	movt	r0, #2
    e484:	e3a02046 	mov	r2, #70	; 0x46
    e488:	eb0059c4 	bl	24ba0 <assertion_failed>
    e48c:	e5940014 	ldr	r0, [r4, #20]
    e490:	e8bd8010 	pop	{r4, pc}

0000e494 <CUSBRequest::GetSetupData()>:
    e494:	e92d4010 	push	{r4, lr}
    e498:	e1a04000 	mov	r4, r0
    e49c:	e5900000 	ldr	r0, [r0]
    e4a0:	ebfffec8 	bl	dfc8 <CUSBEndpoint::GetType() const>
    e4a4:	e3500000 	cmp	r0, #0
    e4a8:	1a00000a 	bne	e4d8 <CUSBRequest::GetSetupData()+0x44>
    e4ac:	e5940004 	ldr	r0, [r4, #4]
    e4b0:	e3500000 	cmp	r0, #0
    e4b4:	18bd8010 	popne	{r4, pc}
    e4b8:	e3a0204e 	mov	r2, #78	; 0x4e
    e4bc:	e30b151c 	movw	r1, #46364	; 0xb51c
    e4c0:	e30b058c 	movw	r0, #46476	; 0xb58c
    e4c4:	e3401002 	movt	r1, #2
    e4c8:	e3400002 	movt	r0, #2
    e4cc:	eb0059b3 	bl	24ba0 <assertion_failed>
    e4d0:	e5940004 	ldr	r0, [r4, #4]
    e4d4:	e8bd8010 	pop	{r4, pc}
    e4d8:	e30b151c 	movw	r1, #46364	; 0xb51c
    e4dc:	e30b055c 	movw	r0, #46428	; 0xb55c
    e4e0:	e3401002 	movt	r1, #2
    e4e4:	e3400002 	movt	r0, #2
    e4e8:	e3a0204d 	mov	r2, #77	; 0x4d
    e4ec:	eb0059ab 	bl	24ba0 <assertion_failed>
    e4f0:	eaffffed 	b	e4ac <CUSBRequest::GetSetupData()+0x18>

0000e4f4 <CUSBRequest::GetBuffer()>:
    e4f4:	e5903008 	ldr	r3, [r0, #8]
    e4f8:	e3530000 	cmp	r3, #0
    e4fc:	0a000001 	beq	e508 <CUSBRequest::GetBuffer()+0x14>
    e500:	e1a00003 	mov	r0, r3
    e504:	e12fff1e 	bx	lr
    e508:	e590200c 	ldr	r2, [r0, #12]
    e50c:	e3520000 	cmp	r2, #0
    e510:	0afffffa 	beq	e500 <CUSBRequest::GetBuffer()+0xc>
    e514:	e92d4010 	push	{r4, lr}
    e518:	e3a02056 	mov	r2, #86	; 0x56
    e51c:	e1a04000 	mov	r4, r0
    e520:	e30b151c 	movw	r1, #46364	; 0xb51c
    e524:	e30b052c 	movw	r0, #46380	; 0xb52c
    e528:	e3401002 	movt	r1, #2
    e52c:	e3400002 	movt	r0, #2
    e530:	eb00599a 	bl	24ba0 <assertion_failed>
    e534:	e5943008 	ldr	r3, [r4, #8]
    e538:	e1a00003 	mov	r0, r3
    e53c:	e8bd8010 	pop	{r4, pc}

0000e540 <CUSBRequest::GetBufLen() const>:
    e540:	e590000c 	ldr	r0, [r0, #12]
    e544:	e12fff1e 	bx	lr

0000e548 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
    e548:	e3510000 	cmp	r1, #0
    e54c:	e5801018 	str	r1, [r0, #24]
    e550:	e580201c 	str	r2, [r0, #28]
    e554:	e5803020 	str	r3, [r0, #32]
    e558:	112fff1e 	bxne	lr
    e55c:	e30b151c 	movw	r1, #46364	; 0xb51c
    e560:	e30b05a0 	movw	r0, #46496	; 0xb5a0
    e564:	e3401002 	movt	r1, #2
    e568:	e3400002 	movt	r0, #2
    e56c:	e3a02066 	mov	r2, #102	; 0x66
    e570:	ea00598a 	b	24ba0 <assertion_failed>

0000e574 <CUSBRequest::CallCompletionRoutine()>:
    e574:	e5903018 	ldr	r3, [r0, #24]
    e578:	e92d4010 	push	{r4, lr}
    e57c:	e3530000 	cmp	r3, #0
    e580:	e1a04000 	mov	r4, r0
    e584:	0a000004 	beq	e59c <CUSBRequest::CallCompletionRoutine()+0x28>
    e588:	e5942020 	ldr	r2, [r4, #32]
    e58c:	e1a00004 	mov	r0, r4
    e590:	e594101c 	ldr	r1, [r4, #28]
    e594:	e8bd4010 	pop	{r4, lr}
    e598:	e12fff13 	bx	r3
    e59c:	e30b151c 	movw	r1, #46364	; 0xb51c
    e5a0:	e30b05a0 	movw	r0, #46496	; 0xb5a0
    e5a4:	e3401002 	movt	r1, #2
    e5a8:	e3400002 	movt	r0, #2
    e5ac:	e3a0206b 	mov	r2, #107	; 0x6b
    e5b0:	eb00597a 	bl	24ba0 <assertion_failed>
    e5b4:	e5943018 	ldr	r3, [r4, #24]
    e5b8:	eafffff2 	b	e588 <CUSBRequest::CallCompletionRoutine()+0x14>

0000e5bc <CUSBRequest::SetCompleteOnNAK()>:
    e5bc:	e3a03001 	mov	r3, #1
    e5c0:	e5803024 	str	r3, [r0, #36]	; 0x24
    e5c4:	e12fff1e 	bx	lr

0000e5c8 <CUSBRequest::IsCompleteOnNAK() const>:
    e5c8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    e5cc:	e12fff1e 	bx	lr

0000e5d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    e5d0:	e92d4070 	push	{r4, r5, r6, lr}
    e5d4:	e2506000 	subs	r6, r0, #0
    e5d8:	e1a04001 	mov	r4, r1
    e5dc:	0a000049 	beq	e708 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    e5e0:	e3540000 	cmp	r4, #0
    e5e4:	0a00004e 	beq	e724 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x154>
    e5e8:	e30b15e4 	movw	r1, #46564	; 0xb5e4
    e5ec:	e1a00004 	mov	r0, r4
    e5f0:	e3401002 	movt	r1, #2
    e5f4:	eb005ec0 	bl	260fc <CString::Compare(char const*) const>
    e5f8:	e3500000 	cmp	r0, #0
    e5fc:	1a000017 	bne	e660 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x90>
    e600:	e3a00058 	mov	r0, #88	; 0x58
    e604:	eb004e63 	bl	21f98 <operator new(unsigned int)>
    e608:	e1a01006 	mov	r1, r6
    e60c:	e1a05000 	mov	r5, r0
    e610:	eb0000d3 	bl	e964 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    e614:	e1a00005 	mov	r0, r5
    e618:	eb000ea0 	bl	120a0 <CUSBFunction::GetDevice() const>
    e61c:	e1a06000 	mov	r6, r0
    e620:	e1a00004 	mov	r0, r4
    e624:	eb005e78 	bl	2600c <CString::operator char const*() const>
    e628:	e30b268c 	movw	r2, #46732	; 0xb68c
    e62c:	e3a01003 	mov	r1, #3
    e630:	e3402002 	movt	r2, #2
    e634:	e1a03000 	mov	r3, r0
    e638:	e1a00006 	mov	r0, r6
    e63c:	ebfffb5e 	bl	d3bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e640:	e3540000 	cmp	r4, #0
    e644:	0a000003 	beq	e658 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x88>
    e648:	e5943000 	ldr	r3, [r4]
    e64c:	e1a00004 	mov	r0, r4
    e650:	e5933004 	ldr	r3, [r3, #4]
    e654:	e12fff33 	blx	r3
    e658:	e1a00005 	mov	r0, r5
    e65c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e660:	e30b15f0 	movw	r1, #46576	; 0xb5f0
    e664:	e1a00004 	mov	r0, r4
    e668:	e3401002 	movt	r1, #2
    e66c:	eb005ea2 	bl	260fc <CString::Compare(char const*) const>
    e670:	e3500000 	cmp	r0, #0
    e674:	0affffe1 	beq	e600 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x30>
    e678:	e30b165c 	movw	r1, #46684	; 0xb65c
    e67c:	e1a00004 	mov	r0, r4
    e680:	e3401002 	movt	r1, #2
    e684:	eb005e9c 	bl	260fc <CString::Compare(char const*) const>
    e688:	e3500000 	cmp	r0, #0
    e68c:	1a000005 	bne	e6a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xd8>
    e690:	e3a00030 	mov	r0, #48	; 0x30
    e694:	eb004e3f 	bl	21f98 <operator new(unsigned int)>
    e698:	e1a01006 	mov	r1, r6
    e69c:	e1a05000 	mov	r5, r0
    e6a0:	eb000364 	bl	f438 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    e6a4:	eaffffda 	b	e614 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e6a8:	e30b15fc 	movw	r1, #46588	; 0xb5fc
    e6ac:	e1a00004 	mov	r0, r4
    e6b0:	e3401002 	movt	r1, #2
    e6b4:	eb005e90 	bl	260fc <CString::Compare(char const*) const>
    e6b8:	e3500000 	cmp	r0, #0
    e6bc:	0a00000b 	beq	e6f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x120>
    e6c0:	e30b1608 	movw	r1, #46600	; 0xb608
    e6c4:	e1a00004 	mov	r0, r4
    e6c8:	e3401002 	movt	r1, #2
    e6cc:	eb005e8a 	bl	260fc <CString::Compare(char const*) const>
    e6d0:	e3500000 	cmp	r0, #0
    e6d4:	1a000019 	bne	e740 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x170>
    e6d8:	e3a00040 	mov	r0, #64	; 0x40
    e6dc:	eb004e2d 	bl	21f98 <operator new(unsigned int)>
    e6e0:	e1a01006 	mov	r1, r6
    e6e4:	e1a05000 	mov	r5, r0
    e6e8:	eb000a9b 	bl	1115c <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    e6ec:	eaffffc8 	b	e614 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e6f0:	e3a00e45 	mov	r0, #1104	; 0x450
    e6f4:	eb004e27 	bl	21f98 <operator new(unsigned int)>
    e6f8:	e1a01006 	mov	r1, r6
    e6fc:	e1a05000 	mov	r5, r0
    e700:	eb0007f2 	bl	106d0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    e704:	eaffffc2 	b	e614 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e708:	e30b15bc 	movw	r1, #46524	; 0xb5bc
    e70c:	e30b05d4 	movw	r0, #46548	; 0xb5d4
    e710:	e3401002 	movt	r1, #2
    e714:	e3400002 	movt	r0, #2
    e718:	e3a02025 	mov	r2, #37	; 0x25
    e71c:	eb00591f 	bl	24ba0 <assertion_failed>
    e720:	eaffffae 	b	e5e0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x10>
    e724:	e30b15bc 	movw	r1, #46524	; 0xb5bc
    e728:	e30b00f8 	movw	r0, #45304	; 0xb0f8
    e72c:	e3401002 	movt	r1, #2
    e730:	e3400002 	movt	r0, #2
    e734:	e3a02026 	mov	r2, #38	; 0x26
    e738:	eb005918 	bl	24ba0 <assertion_failed>
    e73c:	eaffffa9 	b	e5e8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x18>
    e740:	e30b1614 	movw	r1, #46612	; 0xb614
    e744:	e1a00004 	mov	r0, r4
    e748:	e3401002 	movt	r1, #2
    e74c:	eb005e6a 	bl	260fc <CString::Compare(char const*) const>
    e750:	e3500000 	cmp	r0, #0
    e754:	0a00000b 	beq	e788 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1b8>
    e758:	e30b1620 	movw	r1, #46624	; 0xb620
    e75c:	e1a00004 	mov	r0, r4
    e760:	e3401002 	movt	r1, #2
    e764:	eb005e64 	bl	260fc <CString::Compare(char const*) const>
    e768:	e3500000 	cmp	r0, #0
    e76c:	1a00000b 	bne	e7a0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d0>
    e770:	e3a0001c 	mov	r0, #28
    e774:	eb004e07 	bl	21f98 <operator new(unsigned int)>
    e778:	e1a01006 	mov	r1, r6
    e77c:	e1a05000 	mov	r5, r0
    e780:	eb000f96 	bl	125e0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    e784:	eaffffa2 	b	e614 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e788:	e3a000a0 	mov	r0, #160	; 0xa0
    e78c:	eb004e01 	bl	21f98 <operator new(unsigned int)>
    e790:	e1a01006 	mov	r1, r6
    e794:	e1a05000 	mov	r5, r0
    e798:	eb000ade 	bl	11318 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
    e79c:	eaffff9c 	b	e614 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e7a0:	e30b162c 	movw	r1, #46636	; 0xb62c
    e7a4:	e1a00004 	mov	r0, r4
    e7a8:	e3401002 	movt	r1, #2
    e7ac:	eb005e52 	bl	260fc <CString::Compare(char const*) const>
    e7b0:	e3500000 	cmp	r0, #0
    e7b4:	0affffed 	beq	e770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a0>
    e7b8:	e30b1668 	movw	r1, #46696	; 0xb668
    e7bc:	e1a00004 	mov	r0, r4
    e7c0:	e3401002 	movt	r1, #2
    e7c4:	eb005e4c 	bl	260fc <CString::Compare(char const*) const>
    e7c8:	e3500000 	cmp	r0, #0
    e7cc:	1a000005 	bne	e7e8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x218>
    e7d0:	e3a00028 	mov	r0, #40	; 0x28
    e7d4:	eb004def 	bl	21f98 <operator new(unsigned int)>
    e7d8:	e1a01006 	mov	r1, r6
    e7dc:	e1a05000 	mov	r5, r0
    e7e0:	eb0017fc 	bl	147d8 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    e7e4:	eaffff8a 	b	e614 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e7e8:	e30b1638 	movw	r1, #46648	; 0xb638
    e7ec:	e1a00004 	mov	r0, r4
    e7f0:	e3401002 	movt	r1, #2
    e7f4:	eb005e40 	bl	260fc <CString::Compare(char const*) const>
    e7f8:	e3500000 	cmp	r0, #0
    e7fc:	1a000005 	bne	e818 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x248>
    e800:	e3a00028 	mov	r0, #40	; 0x28
    e804:	eb004de3 	bl	21f98 <operator new(unsigned int)>
    e808:	e1a01006 	mov	r1, r6
    e80c:	e1a05000 	mov	r5, r0
    e810:	eb001036 	bl	128f0 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    e814:	eaffff7e 	b	e614 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e818:	e30b1644 	movw	r1, #46660	; 0xb644
    e81c:	e1a00004 	mov	r0, r4
    e820:	e3401002 	movt	r1, #2
    e824:	eb005e34 	bl	260fc <CString::Compare(char const*) const>
    e828:	e3500000 	cmp	r0, #0
    e82c:	0afffff3 	beq	e800 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x230>
    e830:	e30b1674 	movw	r1, #46708	; 0xb674
    e834:	e1a00004 	mov	r0, r4
    e838:	e3401002 	movt	r1, #2
    e83c:	eb005e2e 	bl	260fc <CString::Compare(char const*) const>
    e840:	e3500000 	cmp	r0, #0
    e844:	1a000005 	bne	e860 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x290>
    e848:	e3a00028 	mov	r0, #40	; 0x28
    e84c:	eb004dd1 	bl	21f98 <operator new(unsigned int)>
    e850:	e1a01006 	mov	r1, r6
    e854:	e1a05000 	mov	r5, r0
    e858:	eb0011b3 	bl	12f2c <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    e85c:	eaffff6c 	b	e614 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e860:	e30b1650 	movw	r1, #46672	; 0xb650
    e864:	e1a00004 	mov	r0, r4
    e868:	e3401002 	movt	r1, #2
    e86c:	eb005e22 	bl	260fc <CString::Compare(char const*) const>
    e870:	e3500000 	cmp	r0, #0
    e874:	0afffff3 	beq	e848 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x278>
    e878:	e30b1680 	movw	r1, #46720	; 0xb680
    e87c:	e1a00004 	mov	r0, r4
    e880:	e3401002 	movt	r1, #2
    e884:	eb005e1c 	bl	260fc <CString::Compare(char const*) const>
    e888:	e3500000 	cmp	r0, #0
    e88c:	13a05000 	movne	r5, #0
    e890:	1affff6a 	bne	e640 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x70>
    e894:	e3a00024 	mov	r0, #36	; 0x24
    e898:	eb004dbe 	bl	21f98 <operator new(unsigned int)>
    e89c:	e1a01006 	mov	r1, r6
    e8a0:	e1a05000 	mov	r5, r0
    e8a4:	eb0013da 	bl	13814 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    e8a8:	eaffff59 	b	e614 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>

0000e8ac <CUSBStandardHub::~CUSBStandardHub()>:
    e8ac:	e5902014 	ldr	r2, [r0, #20]
    e8b0:	e59f3088 	ldr	r3, [pc, #136]	; e940 <CUSBStandardHub::~CUSBStandardHub()+0x94>
    e8b4:	e3520000 	cmp	r2, #0
    e8b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e8bc:	e1a07000 	mov	r7, r0
    e8c0:	e5803000 	str	r3, [r0]
    e8c4:	0a000013 	beq	e918 <CUSBStandardHub::~CUSBStandardHub()+0x6c>
    e8c8:	e3a04000 	mov	r4, #0
    e8cc:	e2805014 	add	r5, r0, #20
    e8d0:	e2806034 	add	r6, r0, #52	; 0x34
    e8d4:	e1a08004 	mov	r8, r4
    e8d8:	e5960004 	ldr	r0, [r6, #4]
    e8dc:	e3a01004 	mov	r1, #4
    e8e0:	eb004db0 	bl	21fa8 <operator delete(void*, unsigned int)>
    e8e4:	e5953004 	ldr	r3, [r5, #4]
    e8e8:	e2844001 	add	r4, r4, #1
    e8ec:	e5a68004 	str	r8, [r6, #4]!
    e8f0:	e3530000 	cmp	r3, #0
    e8f4:	e1a00003 	mov	r0, r3
    e8f8:	0a000002 	beq	e908 <CUSBStandardHub::~CUSBStandardHub()+0x5c>
    e8fc:	e5933000 	ldr	r3, [r3]
    e900:	e5933004 	ldr	r3, [r3, #4]
    e904:	e12fff33 	blx	r3
    e908:	e5973014 	ldr	r3, [r7, #20]
    e90c:	e5a58004 	str	r8, [r5, #4]!
    e910:	e1530004 	cmp	r3, r4
    e914:	8affffef 	bhi	e8d8 <CUSBStandardHub::~CUSBStandardHub()+0x2c>
    e918:	e3a04000 	mov	r4, #0
    e91c:	e3a01009 	mov	r1, #9
    e920:	e5970010 	ldr	r0, [r7, #16]
    e924:	e5874014 	str	r4, [r7, #20]
    e928:	eb004d9e 	bl	21fa8 <operator delete(void*, unsigned int)>
    e92c:	e5874010 	str	r4, [r7, #16]
    e930:	e1a00007 	mov	r0, r7
    e934:	eb000d19 	bl	11da0 <CUSBFunction::~CUSBFunction()>
    e938:	e1a00007 	mov	r0, r7
    e93c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e940:	0002b6b0 	.word	0x0002b6b0

0000e944 <CUSBStandardHub::~CUSBStandardHub()>:
    e944:	e92d4010 	push	{r4, lr}
    e948:	e1a04000 	mov	r4, r0
    e94c:	ebffffd6 	bl	e8ac <CUSBStandardHub::~CUSBStandardHub()>
    e950:	e1a00004 	mov	r0, r4
    e954:	e3a01058 	mov	r1, #88	; 0x58
    e958:	eb004d92 	bl	21fa8 <operator delete(void*, unsigned int)>
    e95c:	e1a00004 	mov	r0, r4
    e960:	e8bd8010 	pop	{r4, pc}

0000e964 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
    e964:	e92d4010 	push	{r4, lr}
    e968:	e1a04000 	mov	r4, r0
    e96c:	eb000d5c 	bl	11ee4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
    e970:	e59fe034 	ldr	lr, [pc, #52]	; e9ac <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x48>
    e974:	e2840038 	add	r0, r4, #56	; 0x38
    e978:	e3a0c000 	mov	ip, #0
    e97c:	e2843018 	add	r3, r4, #24
    e980:	e1a01000 	mov	r1, r0
    e984:	e1a0200c 	mov	r2, ip
    e988:	e584e000 	str	lr, [r4]
    e98c:	e584c010 	str	ip, [r4, #16]
    e990:	e584c014 	str	ip, [r4, #20]
    e994:	e4832004 	str	r2, [r3], #4
    e998:	e1530000 	cmp	r3, r0
    e99c:	e4812004 	str	r2, [r1], #4
    e9a0:	1afffffb 	bne	e994 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x30>
    e9a4:	e1a00004 	mov	r0, r4
    e9a8:	e8bd8010 	pop	{r4, pc}
    e9ac:	0002b6b0 	.word	0x0002b6b0

0000e9b0 <CUSBStandardHub::EnumeratePorts()>:
    e9b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9b4:	e24dd034 	sub	sp, sp, #52	; 0x34
    e9b8:	e1a06000 	mov	r6, r0
    e9bc:	eb000dd8 	bl	12124 <CUSBFunction::GetHost() const>
    e9c0:	e250b000 	subs	fp, r0, #0
    e9c4:	0a0001b2 	beq	f094 <CUSBStandardHub::EnumeratePorts()+0x6e4>
    e9c8:	e1a00006 	mov	r0, r6
    e9cc:	eb000dc3 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
    e9d0:	e250a000 	subs	sl, r0, #0
    e9d4:	0a0001b5 	beq	f0b0 <CUSBStandardHub::EnumeratePorts()+0x700>
    e9d8:	e5963014 	ldr	r3, [r6, #20]
    e9dc:	e3530000 	cmp	r3, #0
    e9e0:	0a00001f 	beq	ea64 <CUSBStandardHub::EnumeratePorts()+0xb4>
    e9e4:	e3a03000 	mov	r3, #0
    e9e8:	e3a07008 	mov	r7, #8
    e9ec:	e1a05003 	mov	r5, r3
    e9f0:	ea000002 	b	ea00 <CUSBStandardHub::EnumeratePorts()+0x50>
    e9f4:	e5962014 	ldr	r2, [r6, #20]
    e9f8:	e1520004 	cmp	r2, r4
    e9fc:	9a000021 	bls	ea88 <CUSBStandardHub::EnumeratePorts()+0xd8>
    ea00:	e2834001 	add	r4, r3, #1
    ea04:	e58d500c 	str	r5, [sp, #12]
    ea08:	e3a03003 	mov	r3, #3
    ea0c:	e58d5008 	str	r5, [sp, #8]
    ea10:	e6ff1074 	uxth	r1, r4
    ea14:	e58d7000 	str	r7, [sp]
    ea18:	e58d1004 	str	r1, [sp, #4]
    ea1c:	e3a02023 	mov	r2, #35	; 0x23
    ea20:	e1a0100a 	mov	r1, sl
    ea24:	e1a0000b 	mov	r0, fp
    ea28:	ebfffdd9 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ea2c:	e1a03004 	mov	r3, r4
    ea30:	e3500000 	cmp	r0, #0
    ea34:	aaffffee 	bge	e9f4 <CUSBStandardHub::EnumeratePorts()+0x44>
    ea38:	eb0059da 	bl	251a8 <CLogger::Get()>
    ea3c:	e58d4000 	str	r4, [sp]
    ea40:	e30b3714 	movw	r3, #46868	; 0xb714
    ea44:	e3a02001 	mov	r2, #1
    ea48:	e3403002 	movt	r3, #2
    ea4c:	e59f16f0 	ldr	r1, [pc, #1776]	; f144 <CUSBStandardHub::EnumeratePorts()+0x794>
    ea50:	eb005ab1 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ea54:	e3a09000 	mov	r9, #0
    ea58:	e1a00009 	mov	r0, r9
    ea5c:	e28dd034 	add	sp, sp, #52	; 0x34
    ea60:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea64:	e30b16d4 	movw	r1, #46804	; 0xb6d4
    ea68:	e30b0704 	movw	r0, #46852	; 0xb704
    ea6c:	e3401002 	movt	r1, #2
    ea70:	e3400002 	movt	r0, #2
    ea74:	e3a02091 	mov	r2, #145	; 0x91
    ea78:	eb005848 	bl	24ba0 <assertion_failed>
    ea7c:	e5963014 	ldr	r3, [r6, #20]
    ea80:	e3530000 	cmp	r3, #0
    ea84:	1affffd6 	bne	e9e4 <CUSBStandardHub::EnumeratePorts()+0x34>
    ea88:	eb005223 	bl	2331c <CKernelOptions::Get()>
    ea8c:	e3500000 	cmp	r0, #0
    ea90:	0a00009b 	beq	ed04 <CUSBStandardHub::EnumeratePorts()+0x354>
    ea94:	eb00521a 	bl	23304 <CKernelOptions::GetUSBPowerDelay() const>
    ea98:	e2504000 	subs	r4, r0, #0
    ea9c:	0a000098 	beq	ed04 <CUSBStandardHub::EnumeratePorts()+0x354>
    eaa0:	eb0050a2 	bl	22d30 <CTimer::Get()>
    eaa4:	e1a00004 	mov	r0, r4
    eaa8:	eb005053 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
    eaac:	e5963014 	ldr	r3, [r6, #20]
    eab0:	e3530000 	cmp	r3, #0
    eab4:	0a0000a4 	beq	ed4c <CUSBStandardHub::EnumeratePorts()+0x39c>
    eab8:	e2863018 	add	r3, r6, #24
    eabc:	e30b26d4 	movw	r2, #46804	; 0xb6d4
    eac0:	e30b172c 	movw	r1, #46892	; 0xb72c
    eac4:	e3402002 	movt	r2, #2
    eac8:	e3401002 	movt	r1, #2
    eacc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    ead0:	e58d2014 	str	r2, [sp, #20]
    ead4:	e2865034 	add	r5, r6, #52	; 0x34
    ead8:	e58d1018 	str	r1, [sp, #24]
    eadc:	e1a09003 	mov	r9, r3
    eae0:	e3a04001 	mov	r4, #1
    eae4:	e3a08004 	mov	r8, #4
    eae8:	ea00000c 	b	eb20 <CUSBStandardHub::EnumeratePorts()+0x170>
    eaec:	eb0059ad 	bl	251a8 <CLogger::Get()>
    eaf0:	e30b3744 	movw	r3, #46916	; 0xb744
    eaf4:	e58d4000 	str	r4, [sp]
    eaf8:	e3a02001 	mov	r2, #1
    eafc:	e3403002 	movt	r3, #2
    eb00:	e59f163c 	ldr	r1, [pc, #1596]	; f144 <CUSBStandardHub::EnumeratePorts()+0x794>
    eb04:	eb005a84 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    eb08:	e5963014 	ldr	r3, [r6, #20]
    eb0c:	e2899004 	add	r9, r9, #4
    eb10:	e2842001 	add	r2, r4, #1
    eb14:	e1530004 	cmp	r3, r4
    eb18:	9a0000c0 	bls	ee20 <CUSBStandardHub::EnumeratePorts()+0x470>
    eb1c:	e1a04002 	mov	r4, r2
    eb20:	e5953004 	ldr	r3, [r5, #4]
    eb24:	e3530000 	cmp	r3, #0
    eb28:	0a000003 	beq	eb3c <CUSBStandardHub::EnumeratePorts()+0x18c>
    eb2c:	e3a020b1 	mov	r2, #177	; 0xb1
    eb30:	e59d1014 	ldr	r1, [sp, #20]
    eb34:	e59d0018 	ldr	r0, [sp, #24]
    eb38:	eb005818 	bl	24ba0 <assertion_failed>
    eb3c:	e3a00004 	mov	r0, #4
    eb40:	e6ff7074 	uxth	r7, r4
    eb44:	eb004d13 	bl	21f98 <operator new(unsigned int)>
    eb48:	e3a01000 	mov	r1, #0
    eb4c:	e1a03001 	mov	r3, r1
    eb50:	e3a020a3 	mov	r2, #163	; 0xa3
    eb54:	e5a50004 	str	r0, [r5, #4]!
    eb58:	e58d0008 	str	r0, [sp, #8]
    eb5c:	e1a0000b 	mov	r0, fp
    eb60:	e58d1000 	str	r1, [sp]
    eb64:	e1a0100a 	mov	r1, sl
    eb68:	e58d800c 	str	r8, [sp, #12]
    eb6c:	e58d7004 	str	r7, [sp, #4]
    eb70:	ebfffd87 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    eb74:	e3500004 	cmp	r0, #4
    eb78:	1affffdb 	bne	eaec <CUSBStandardHub::EnumeratePorts()+0x13c>
    eb7c:	e5953000 	ldr	r3, [r5]
    eb80:	e1d330b0 	ldrh	r3, [r3]
    eb84:	e3130c01 	tst	r3, #256	; 0x100
    eb88:	0a00005f 	beq	ed0c <CUSBStandardHub::EnumeratePorts()+0x35c>
    eb8c:	e3130001 	tst	r3, #1
    eb90:	0affffdc 	beq	eb08 <CUSBStandardHub::EnumeratePorts()+0x158>
    eb94:	e3a02000 	mov	r2, #0
    eb98:	e3a01000 	mov	r1, #0
    eb9c:	e58d200c 	str	r2, [sp, #12]
    eba0:	e3a03003 	mov	r3, #3
    eba4:	e58d1008 	str	r1, [sp, #8]
    eba8:	e3a02023 	mov	r2, #35	; 0x23
    ebac:	e58d7004 	str	r7, [sp, #4]
    ebb0:	e1a0100a 	mov	r1, sl
    ebb4:	e58d8000 	str	r8, [sp]
    ebb8:	e1a0000b 	mov	r0, fp
    ebbc:	ebfffd74 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ebc0:	e3500000 	cmp	r0, #0
    ebc4:	ba000058 	blt	ed2c <CUSBStandardHub::EnumeratePorts()+0x37c>
    ebc8:	eb005058 	bl	22d30 <CTimer::Get()>
    ebcc:	e3a00064 	mov	r0, #100	; 0x64
    ebd0:	eb005009 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
    ebd4:	e5950000 	ldr	r0, [r5]
    ebd8:	e3a03000 	mov	r3, #0
    ebdc:	e58d800c 	str	r8, [sp, #12]
    ebe0:	e58d7004 	str	r7, [sp, #4]
    ebe4:	e3a020a3 	mov	r2, #163	; 0xa3
    ebe8:	e58d0008 	str	r0, [sp, #8]
    ebec:	e1a0100a 	mov	r1, sl
    ebf0:	e58d3000 	str	r3, [sp]
    ebf4:	e1a0000b 	mov	r0, fp
    ebf8:	ebfffd65 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ebfc:	e3500004 	cmp	r0, #4
    ec00:	1a000137 	bne	f0e4 <CUSBStandardHub::EnumeratePorts()+0x734>
    ec04:	e5953000 	ldr	r3, [r5]
    ec08:	e1d330b0 	ldrh	r3, [r3]
    ec0c:	e3130002 	tst	r3, #2
    ec10:	0a0000b2 	beq	eee0 <CUSBStandardHub::EnumeratePorts()+0x530>
    ec14:	e2132008 	ands	r2, r3, #8
    ec18:	1a000133 	bne	f0ec <CUSBStandardHub::EnumeratePorts()+0x73c>
    ec1c:	e3130c02 	tst	r3, #512	; 0x200
    ec20:	158d2028 	strne	r2, [sp, #40]	; 0x28
    ec24:	1a000003 	bne	ec38 <CUSBStandardHub::EnumeratePorts()+0x288>
    ec28:	e3130b01 	tst	r3, #1024	; 0x400
    ec2c:	03a03001 	moveq	r3, #1
    ec30:	13a03002 	movne	r3, #2
    ec34:	e58d3028 	str	r3, [sp, #40]	; 0x28
    ec38:	e1a00006 	mov	r0, r6
    ec3c:	eb000d17 	bl	120a0 <CUSBFunction::GetDevice() const>
    ec40:	e2507000 	subs	r7, r0, #0
    ec44:	0a000120 	beq	f0cc <CUSBStandardHub::EnumeratePorts()+0x71c>
    ec48:	e1a00007 	mov	r0, r7
    ec4c:	ebfff96e 	bl	d20c <CUSBDevice::IsSplit() const>
    ec50:	e58d001c 	str	r0, [sp, #28]
    ec54:	e1a00007 	mov	r0, r7
    ec58:	ebfff96d 	bl	d214 <CUSBDevice::GetHubAddress() const>
    ec5c:	e58d0020 	str	r0, [sp, #32]
    ec60:	e1a00007 	mov	r0, r7
    ec64:	ebfff96c 	bl	d21c <CUSBDevice::GetHubPortNumber() const>
    ec68:	e59d301c 	ldr	r3, [sp, #28]
    ec6c:	e3530000 	cmp	r3, #0
    ec70:	e58d0024 	str	r0, [sp, #36]	; 0x24
    ec74:	0a0000a1 	beq	ef00 <CUSBStandardHub::EnumeratePorts()+0x550>
    ec78:	e5993000 	ldr	r3, [r9]
    ec7c:	e3530000 	cmp	r3, #0
    ec80:	0a000004 	beq	ec98 <CUSBStandardHub::EnumeratePorts()+0x2e8>
    ec84:	e30b07fc 	movw	r0, #47100	; 0xb7fc
    ec88:	e300210e 	movw	r2, #270	; 0x10e
    ec8c:	e3400002 	movt	r0, #2
    ec90:	e59d1014 	ldr	r1, [sp, #20]
    ec94:	eb0057c1 	bl	24ba0 <assertion_failed>
    ec98:	e3a0004c 	mov	r0, #76	; 0x4c
    ec9c:	eb004cbd 	bl	21f98 <operator new(unsigned int)>
    eca0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    eca4:	e59d2020 	ldr	r2, [sp, #32]
    eca8:	e1a0100b 	mov	r1, fp
    ecac:	e58d3004 	str	r3, [sp, #4]
    ecb0:	e58d2000 	str	r2, [sp]
    ecb4:	e59d301c 	ldr	r3, [sp, #28]
    ecb8:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    ecbc:	e1a07000 	mov	r7, r0
    ecc0:	ebfff871 	bl	ce8c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)>
    ecc4:	e1a00007 	mov	r0, r7
    ecc8:	e5897000 	str	r7, [r9]
    eccc:	e5903000 	ldr	r3, [r0]
    ecd0:	e5933008 	ldr	r3, [r3, #8]
    ecd4:	e12fff33 	blx	r3
    ecd8:	e3500000 	cmp	r0, #0
    ecdc:	1affff89 	bne	eb08 <CUSBStandardHub::EnumeratePorts()+0x158>
    ece0:	e5990000 	ldr	r0, [r9]
    ece4:	e3500000 	cmp	r0, #0
    ece8:	0a000002 	beq	ecf8 <CUSBStandardHub::EnumeratePorts()+0x348>
    ecec:	e5903000 	ldr	r3, [r0]
    ecf0:	e5933004 	ldr	r3, [r3, #4]
    ecf4:	e12fff33 	blx	r3
    ecf8:	e3a03000 	mov	r3, #0
    ecfc:	e5893000 	str	r3, [r9]
    ed00:	eaffff80 	b	eb08 <CUSBStandardHub::EnumeratePorts()+0x158>
    ed04:	e30041fe 	movw	r4, #510	; 0x1fe
    ed08:	eaffff64 	b	eaa0 <CUSBStandardHub::EnumeratePorts()+0xf0>
    ed0c:	e30b0764 	movw	r0, #46948	; 0xb764
    ed10:	e3a020bf 	mov	r2, #191	; 0xbf
    ed14:	e3400002 	movt	r0, #2
    ed18:	e59d1014 	ldr	r1, [sp, #20]
    ed1c:	eb00579f 	bl	24ba0 <assertion_failed>
    ed20:	e5953000 	ldr	r3, [r5]
    ed24:	e1d330b0 	ldrh	r3, [r3]
    ed28:	eaffff97 	b	eb8c <CUSBStandardHub::EnumeratePorts()+0x1dc>
    ed2c:	eb00591d 	bl	251a8 <CLogger::Get()>
    ed30:	e58d4000 	str	r4, [sp]
    ed34:	e30b3798 	movw	r3, #47000	; 0xb798
    ed38:	e3a02001 	mov	r2, #1
    ed3c:	e3403002 	movt	r3, #2
    ed40:	e59f13fc 	ldr	r1, [pc, #1020]	; f144 <CUSBStandardHub::EnumeratePorts()+0x794>
    ed44:	eb0059f4 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ed48:	eaffff6e 	b	eb08 <CUSBStandardHub::EnumeratePorts()+0x158>
    ed4c:	e3a00004 	mov	r0, #4
    ed50:	e3a09000 	mov	r9, #0
    ed54:	eb004c8f 	bl	21f98 <operator new(unsigned int)>
    ed58:	e3a04004 	mov	r4, #4
    ed5c:	e58d9004 	str	r9, [sp, #4]
    ed60:	e1a03009 	mov	r3, r9
    ed64:	e58d9000 	str	r9, [sp]
    ed68:	e3a020a0 	mov	r2, #160	; 0xa0
    ed6c:	e58d400c 	str	r4, [sp, #12]
    ed70:	e1a0100a 	mov	r1, sl
    ed74:	e58d0008 	str	r0, [sp, #8]
    ed78:	e1a05000 	mov	r5, r0
    ed7c:	e1a0000b 	mov	r0, fp
    ed80:	ebfffd03 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ed84:	e1500004 	cmp	r0, r4
    ed88:	e1a07000 	mov	r7, r0
    ed8c:	1a0000a6 	bne	f02c <CUSBStandardHub::EnumeratePorts()+0x67c>
    ed90:	e1d530b0 	ldrh	r3, [r5]
    ed94:	e3130002 	tst	r3, #2
    ed98:	0a00006a 	beq	ef48 <CUSBStandardHub::EnumeratePorts()+0x598>
    ed9c:	e5963014 	ldr	r3, [r6, #20]
    eda0:	e3530000 	cmp	r3, #0
    eda4:	13a04001 	movne	r4, #1
    eda8:	13a07008 	movne	r7, #8
    edac:	0a00000e 	beq	edec <CUSBStandardHub::EnumeratePorts()+0x43c>
    edb0:	e6ff1074 	uxth	r1, r4
    edb4:	e3a03001 	mov	r3, #1
    edb8:	e3a02023 	mov	r2, #35	; 0x23
    edbc:	e58d1004 	str	r1, [sp, #4]
    edc0:	e58d900c 	str	r9, [sp, #12]
    edc4:	e1a0100a 	mov	r1, sl
    edc8:	e58d9008 	str	r9, [sp, #8]
    edcc:	e1a0000b 	mov	r0, fp
    edd0:	e58d7000 	str	r7, [sp]
    edd4:	ebfffcee 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    edd8:	e5962014 	ldr	r2, [r6, #20]
    eddc:	e2843001 	add	r3, r4, #1
    ede0:	e1540002 	cmp	r4, r2
    ede4:	e1a04003 	mov	r4, r3
    ede8:	3afffff0 	bcc	edb0 <CUSBStandardHub::EnumeratePorts()+0x400>
    edec:	eb0058ed 	bl	251a8 <CLogger::Get()>
    edf0:	e3a02001 	mov	r2, #1
    edf4:	e59f1348 	ldr	r1, [pc, #840]	; f144 <CUSBStandardHub::EnumeratePorts()+0x794>
    edf8:	e30b386c 	movw	r3, #47212	; 0xb86c
    edfc:	e3403002 	movt	r3, #2
    ee00:	e3a09000 	mov	r9, #0
    ee04:	eb0059c4 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ee08:	e1a00005 	mov	r0, r5
    ee0c:	e3a01004 	mov	r1, #4
    ee10:	eb004c64 	bl	21fa8 <operator delete(void*, unsigned int)>
    ee14:	e1a00009 	mov	r0, r9
    ee18:	e28dd034 	add	sp, sp, #52	; 0x34
    ee1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee20:	e3530000 	cmp	r3, #0
    ee24:	0affffc8 	beq	ed4c <CUSBStandardHub::EnumeratePorts()+0x39c>
    ee28:	e30b8838 	movw	r8, #47160	; 0xb838
    ee2c:	e30b7814 	movw	r7, #47124	; 0xb814
    ee30:	e3408002 	movt	r8, #2
    ee34:	e3407002 	movt	r7, #2
    ee38:	e3a04001 	mov	r4, #1
    ee3c:	e59f5300 	ldr	r5, [pc, #768]	; f144 <CUSBStandardHub::EnumeratePorts()+0x794>
    ee40:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    ee44:	ea000014 	b	ee9c <CUSBStandardHub::EnumeratePorts()+0x4ec>
    ee48:	eb0058d6 	bl	251a8 <CLogger::Get()>
    ee4c:	e1a03007 	mov	r3, r7
    ee50:	e58d4000 	str	r4, [sp]
    ee54:	e3a02002 	mov	r2, #2
    ee58:	e1a01005 	mov	r1, r5
    ee5c:	eb0059ae 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ee60:	e5993000 	ldr	r3, [r9]
    ee64:	e3530000 	cmp	r3, #0
    ee68:	e1a00003 	mov	r0, r3
    ee6c:	0a000002 	beq	ee7c <CUSBStandardHub::EnumeratePorts()+0x4cc>
    ee70:	e5933000 	ldr	r3, [r3]
    ee74:	e5933004 	ldr	r3, [r3, #4]
    ee78:	e12fff33 	blx	r3
    ee7c:	e3a03000 	mov	r3, #0
    ee80:	e5893000 	str	r3, [r9]
    ee84:	e5963014 	ldr	r3, [r6, #20]
    ee88:	e2842001 	add	r2, r4, #1
    ee8c:	e1530004 	cmp	r3, r4
    ee90:	e2899004 	add	r9, r9, #4
    ee94:	e1a04002 	mov	r4, r2
    ee98:	9affffab 	bls	ed4c <CUSBStandardHub::EnumeratePorts()+0x39c>
    ee9c:	e5992000 	ldr	r2, [r9]
    eea0:	e3520000 	cmp	r2, #0
    eea4:	e1a00002 	mov	r0, r2
    eea8:	0afffff6 	beq	ee88 <CUSBStandardHub::EnumeratePorts()+0x4d8>
    eeac:	e5923000 	ldr	r3, [r2]
    eeb0:	e593300c 	ldr	r3, [r3, #12]
    eeb4:	e12fff33 	blx	r3
    eeb8:	e3500000 	cmp	r0, #0
    eebc:	0affffe1 	beq	ee48 <CUSBStandardHub::EnumeratePorts()+0x498>
    eec0:	eb0058b8 	bl	251a8 <CLogger::Get()>
    eec4:	e1a03008 	mov	r3, r8
    eec8:	e58d4000 	str	r4, [sp]
    eecc:	e3a02004 	mov	r2, #4
    eed0:	e1a01005 	mov	r1, r5
    eed4:	eb005990 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    eed8:	e5963014 	ldr	r3, [r6, #20]
    eedc:	eaffffe9 	b	ee88 <CUSBStandardHub::EnumeratePorts()+0x4d8>
    eee0:	eb0058b0 	bl	251a8 <CLogger::Get()>
    eee4:	e58d4000 	str	r4, [sp]
    eee8:	e30b37b0 	movw	r3, #47024	; 0xb7b0
    eeec:	e3a02001 	mov	r2, #1
    eef0:	e3403002 	movt	r3, #2
    eef4:	e59f1248 	ldr	r1, [pc, #584]	; f144 <CUSBStandardHub::EnumeratePorts()+0x794>
    eef8:	eb005987 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    eefc:	eaffff01 	b	eb08 <CUSBStandardHub::EnumeratePorts()+0x158>
    ef00:	e1a00007 	mov	r0, r7
    ef04:	ebfff8be 	bl	d204 <CUSBDevice::GetSpeed() const>
    ef08:	e3500002 	cmp	r0, #2
    ef0c:	1affff59 	bne	ec78 <CUSBStandardHub::EnumeratePorts()+0x2c8>
    ef10:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    ef14:	e3530002 	cmp	r3, #2
    ef18:	0affff56 	beq	ec78 <CUSBStandardHub::EnumeratePorts()+0x2c8>
    ef1c:	e1a00007 	mov	r0, r7
    ef20:	e6ef3074 	uxtb	r3, r4
    ef24:	e58d3024 	str	r3, [sp, #36]	; 0x24
    ef28:	ebfff8b3 	bl	d1fc <CUSBDevice::GetAddress() const>
    ef2c:	e5993000 	ldr	r3, [r9]
    ef30:	e3530000 	cmp	r3, #0
    ef34:	e58d0020 	str	r0, [sp, #32]
    ef38:	0a000047 	beq	f05c <CUSBStandardHub::EnumeratePorts()+0x6ac>
    ef3c:	e3a03001 	mov	r3, #1
    ef40:	e58d301c 	str	r3, [sp, #28]
    ef44:	eaffff4e 	b	ec84 <CUSBStandardHub::EnumeratePorts()+0x2d4>
    ef48:	e1a00005 	mov	r0, r5
    ef4c:	e1a01007 	mov	r1, r7
    ef50:	eb004c14 	bl	21fa8 <operator delete(void*, unsigned int)>
    ef54:	e5963014 	ldr	r3, [r6, #20]
    ef58:	e3530000 	cmp	r3, #0
    ef5c:	0a000076 	beq	f13c <CUSBStandardHub::EnumeratePorts()+0x78c>
    ef60:	e3a04001 	mov	r4, #1
    ef64:	e30b37c8 	movw	r3, #47048	; 0xb7c8
    ef68:	e58d7014 	str	r7, [sp, #20]
    ef6c:	e3403002 	movt	r3, #2
    ef70:	e1a09004 	mov	r9, r4
    ef74:	e2865038 	add	r5, r6, #56	; 0x38
    ef78:	e58d3018 	str	r3, [sp, #24]
    ef7c:	ea000005 	b	ef98 <CUSBStandardHub::EnumeratePorts()+0x5e8>
    ef80:	e5962014 	ldr	r2, [r6, #20]
    ef84:	e2843001 	add	r3, r4, #1
    ef88:	e2855004 	add	r5, r5, #4
    ef8c:	e1520004 	cmp	r2, r4
    ef90:	e1a04003 	mov	r4, r3
    ef94:	9afffeaf 	bls	ea58 <CUSBStandardHub::EnumeratePorts()+0xa8>
    ef98:	e5952000 	ldr	r2, [r5]
    ef9c:	e3a07000 	mov	r7, #0
    efa0:	e59d3014 	ldr	r3, [sp, #20]
    efa4:	e6ff8074 	uxth	r8, r4
    efa8:	e58d7000 	str	r7, [sp]
    efac:	e1a0100a 	mov	r1, sl
    efb0:	e58d2008 	str	r2, [sp, #8]
    efb4:	e1a0000b 	mov	r0, fp
    efb8:	e58d300c 	str	r3, [sp, #12]
    efbc:	e3a020a3 	mov	r2, #163	; 0xa3
    efc0:	e1a03007 	mov	r3, r7
    efc4:	e58d8004 	str	r8, [sp, #4]
    efc8:	ebfffc71 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    efcc:	e3500004 	cmp	r0, #4
    efd0:	1affffea 	bne	ef80 <CUSBStandardHub::EnumeratePorts()+0x5d0>
    efd4:	e5953000 	ldr	r3, [r5]
    efd8:	e1d330b0 	ldrh	r3, [r3]
    efdc:	e3130008 	tst	r3, #8
    efe0:	0affffe6 	beq	ef80 <CUSBStandardHub::EnumeratePorts()+0x5d0>
    efe4:	e3a03001 	mov	r3, #1
    efe8:	e3a02023 	mov	r2, #35	; 0x23
    efec:	e58d700c 	str	r7, [sp, #12]
    eff0:	e3a01008 	mov	r1, #8
    eff4:	e58d7008 	str	r7, [sp, #8]
    eff8:	e1a0000b 	mov	r0, fp
    effc:	e58d1000 	str	r1, [sp]
    f000:	e1a0100a 	mov	r1, sl
    f004:	e58d8004 	str	r8, [sp, #4]
    f008:	e1a09007 	mov	r9, r7
    f00c:	ebfffc60 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f010:	eb005864 	bl	251a8 <CLogger::Get()>
    f014:	e58d4000 	str	r4, [sp]
    f018:	e59d3018 	ldr	r3, [sp, #24]
    f01c:	e3a02001 	mov	r2, #1
    f020:	e59f111c 	ldr	r1, [pc, #284]	; f144 <CUSBStandardHub::EnumeratePorts()+0x794>
    f024:	eb00593c 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f028:	eaffffd4 	b	ef80 <CUSBStandardHub::EnumeratePorts()+0x5d0>
    f02c:	eb00585d 	bl	251a8 <CLogger::Get()>
    f030:	e3a02001 	mov	r2, #1
    f034:	e59f1108 	ldr	r1, [pc, #264]	; f144 <CUSBStandardHub::EnumeratePorts()+0x794>
    f038:	e30b3854 	movw	r3, #47188	; 0xb854
    f03c:	e3403002 	movt	r3, #2
    f040:	eb005935 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f044:	e1a00005 	mov	r0, r5
    f048:	e1a01004 	mov	r1, r4
    f04c:	eb004bd5 	bl	21fa8 <operator delete(void*, unsigned int)>
    f050:	e1a00009 	mov	r0, r9
    f054:	e28dd034 	add	sp, sp, #52	; 0x34
    f058:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f05c:	e3a0004c 	mov	r0, #76	; 0x4c
    f060:	eb004bcc 	bl	21f98 <operator new(unsigned int)>
    f064:	e6ef3074 	uxtb	r3, r4
    f068:	e58d3004 	str	r3, [sp, #4]
    f06c:	e1a0100b 	mov	r1, fp
    f070:	e59d3020 	ldr	r3, [sp, #32]
    f074:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    f078:	e58d3000 	str	r3, [sp]
    f07c:	e3a03001 	mov	r3, #1
    f080:	e1a07000 	mov	r7, r0
    f084:	ebfff780 	bl	ce8c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)>
    f088:	e5897000 	str	r7, [r9]
    f08c:	e1a00007 	mov	r0, r7
    f090:	eaffff0d 	b	eccc <CUSBStandardHub::EnumeratePorts()+0x31c>
    f094:	e30b16d4 	movw	r1, #46804	; 0xb6d4
    f098:	e30b06e8 	movw	r0, #46824	; 0xb6e8
    f09c:	e3401002 	movt	r1, #2
    f0a0:	e3400002 	movt	r0, #2
    f0a4:	e3a0208c 	mov	r2, #140	; 0x8c
    f0a8:	eb0056bc 	bl	24ba0 <assertion_failed>
    f0ac:	eafffe45 	b	e9c8 <CUSBStandardHub::EnumeratePorts()+0x18>
    f0b0:	e30b16d4 	movw	r1, #46804	; 0xb6d4
    f0b4:	e30b06f4 	movw	r0, #46836	; 0xb6f4
    f0b8:	e3401002 	movt	r1, #2
    f0bc:	e3400002 	movt	r0, #2
    f0c0:	e3a0208f 	mov	r2, #143	; 0x8f
    f0c4:	eb0056b5 	bl	24ba0 <assertion_failed>
    f0c8:	eafffe42 	b	e9d8 <CUSBStandardHub::EnumeratePorts()+0x28>
    f0cc:	e30b07ec 	movw	r0, #47084	; 0xb7ec
    f0d0:	e3a020fd 	mov	r2, #253	; 0xfd
    f0d4:	e3400002 	movt	r0, #2
    f0d8:	e59d1014 	ldr	r1, [sp, #20]
    f0dc:	eb0056af 	bl	24ba0 <assertion_failed>
    f0e0:	eafffed8 	b	ec48 <CUSBStandardHub::EnumeratePorts()+0x298>
    f0e4:	e3a09000 	mov	r9, #0
    f0e8:	eafffe5a 	b	ea58 <CUSBStandardHub::EnumeratePorts()+0xa8>
    f0ec:	e1a0100a 	mov	r1, sl
    f0f0:	e3a03000 	mov	r3, #0
    f0f4:	e1a0000b 	mov	r0, fp
    f0f8:	e58d300c 	str	r3, [sp, #12]
    f0fc:	e58d3008 	str	r3, [sp, #8]
    f100:	e3a02008 	mov	r2, #8
    f104:	e3a03001 	mov	r3, #1
    f108:	e58d2000 	str	r2, [sp]
    f10c:	e58d7004 	str	r7, [sp, #4]
    f110:	e3a02023 	mov	r2, #35	; 0x23
    f114:	ebfffc1e 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f118:	e3a09000 	mov	r9, #0
    f11c:	eb005821 	bl	251a8 <CLogger::Get()>
    f120:	e58d4000 	str	r4, [sp]
    f124:	e30b37c8 	movw	r3, #47048	; 0xb7c8
    f128:	e3a02001 	mov	r2, #1
    f12c:	e3403002 	movt	r3, #2
    f130:	e59f100c 	ldr	r1, [pc, #12]	; f144 <CUSBStandardHub::EnumeratePorts()+0x794>
    f134:	eb0058f8 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f138:	eafffe46 	b	ea58 <CUSBStandardHub::EnumeratePorts()+0xa8>
    f13c:	e3a09001 	mov	r9, #1
    f140:	eafffe44 	b	ea58 <CUSBStandardHub::EnumeratePorts()+0xa8>
    f144:	0002b6cc 	.word	0x0002b6cc

0000f148 <CUSBStandardHub::Configure()>:
    f148:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f14c:	e24dd020 	sub	sp, sp, #32
    f150:	e1a04000 	mov	r4, r0
    f154:	eb000bc1 	bl	12060 <CUSBFunction::GetNumEndpoints() const>
    f158:	e3500001 	cmp	r0, #1
    f15c:	0a000006 	beq	f17c <CUSBStandardHub::Configure()+0x34>
    f160:	e1a00004 	mov	r0, r4
    f164:	e59f11fc 	ldr	r1, [pc, #508]	; f368 <CUSBStandardHub::Configure()+0x220>
    f168:	eb000c42 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
    f16c:	e3a05000 	mov	r5, #0
    f170:	e1a00005 	mov	r0, r5
    f174:	e28dd020 	add	sp, sp, #32
    f178:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f17c:	e1a06000 	mov	r6, r0
    f180:	e3a01005 	mov	r1, #5
    f184:	e1a00004 	mov	r0, r4
    f188:	eb000c27 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
    f18c:	e3500000 	cmp	r0, #0
    f190:	0afffff2 	beq	f160 <CUSBStandardHub::Configure()+0x18>
    f194:	e1d030d2 	ldrsb	r3, [r0, #2]
    f198:	e3530000 	cmp	r3, #0
    f19c:	aaffffef 	bge	f160 <CUSBStandardHub::Configure()+0x18>
    f1a0:	e5d03003 	ldrb	r3, [r0, #3]
    f1a4:	e203303f 	and	r3, r3, #63	; 0x3f
    f1a8:	e3530003 	cmp	r3, #3
    f1ac:	1affffeb 	bne	f160 <CUSBStandardHub::Configure()+0x18>
    f1b0:	e1a00004 	mov	r0, r4
    f1b4:	eb000beb 	bl	12168 <CUSBFunction::Configure()>
    f1b8:	e2505000 	subs	r5, r0, #0
    f1bc:	0a00004d 	beq	f2f8 <CUSBStandardHub::Configure()+0x1b0>
    f1c0:	e5943010 	ldr	r3, [r4, #16]
    f1c4:	e3530000 	cmp	r3, #0
    f1c8:	0a000005 	beq	f1e4 <CUSBStandardHub::Configure()+0x9c>
    f1cc:	e30b16d4 	movw	r1, #46804	; 0xb6d4
    f1d0:	e30b08a0 	movw	r0, #47264	; 0xb8a0
    f1d4:	e3401002 	movt	r1, #2
    f1d8:	e3400002 	movt	r0, #2
    f1dc:	e3a0205a 	mov	r2, #90	; 0x5a
    f1e0:	eb00566e 	bl	24ba0 <assertion_failed>
    f1e4:	e3a00009 	mov	r0, #9
    f1e8:	e3a06000 	mov	r6, #0
    f1ec:	eb004b69 	bl	21f98 <operator new(unsigned int)>
    f1f0:	e3a07009 	mov	r7, #9
    f1f4:	e5840010 	str	r0, [r4, #16]
    f1f8:	e1a00004 	mov	r0, r4
    f1fc:	eb000bc8 	bl	12124 <CUSBFunction::GetHost() const>
    f200:	e1a05000 	mov	r5, r0
    f204:	e1a00004 	mov	r0, r4
    f208:	eb000bb4 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
    f20c:	e5942010 	ldr	r2, [r4, #16]
    f210:	e3a010a0 	mov	r1, #160	; 0xa0
    f214:	e58d600c 	str	r6, [sp, #12]
    f218:	e58d1008 	str	r1, [sp, #8]
    f21c:	e1a03006 	mov	r3, r6
    f220:	e58d2000 	str	r2, [sp]
    f224:	e3a02029 	mov	r2, #41	; 0x29
    f228:	e58d7004 	str	r7, [sp, #4]
    f22c:	e1a01000 	mov	r1, r0
    f230:	e1a00005 	mov	r0, r5
    f234:	ebfffc01 	bl	e240 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    f238:	e1500007 	cmp	r0, r7
    f23c:	e1a08000 	mov	r8, r0
    f240:	1a000020 	bne	f2c8 <CUSBStandardHub::Configure()+0x180>
    f244:	e5943010 	ldr	r3, [r4, #16]
    f248:	e5d33002 	ldrb	r3, [r3, #2]
    f24c:	e3530008 	cmp	r3, #8
    f250:	e5843014 	str	r3, [r4, #20]
    f254:	8a00002e 	bhi	f314 <CUSBStandardHub::Configure()+0x1cc>
    f258:	e28d0010 	add	r0, sp, #16
    f25c:	eb005b54 	bl	25fb4 <CString::CString()>
    f260:	e3013a14 	movw	r3, #6676	; 0x1a14
    f264:	e3403003 	movt	r3, #3
    f268:	e28d0010 	add	r0, sp, #16
    f26c:	e30b18e0 	movw	r1, #47328	; 0xb8e0
    f270:	e3401002 	movt	r1, #2
    f274:	e5932000 	ldr	r2, [r3]
    f278:	e282c001 	add	ip, r2, #1
    f27c:	e583c000 	str	ip, [r3]
    f280:	eb005e5d 	bl	26bfc <CString::Format(char const*, ...)>
    f284:	eb00579b 	bl	250f8 <CDeviceNameService::Get()>
    f288:	e1a05000 	mov	r5, r0
    f28c:	e28d0010 	add	r0, sp, #16
    f290:	eb005b5d 	bl	2600c <CString::operator char const*() const>
    f294:	e1a03006 	mov	r3, r6
    f298:	e1a02004 	mov	r2, r4
    f29c:	e1a01000 	mov	r1, r0
    f2a0:	e1a00005 	mov	r0, r5
    f2a4:	eb00571f 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    f2a8:	e1a00004 	mov	r0, r4
    f2ac:	ebfffdbf 	bl	e9b0 <CUSBStandardHub::EnumeratePorts()>
    f2b0:	e2505000 	subs	r5, r0, #0
    f2b4:	13a05001 	movne	r5, #1
    f2b8:	0a000023 	beq	f34c <CUSBStandardHub::Configure()+0x204>
    f2bc:	e28d0010 	add	r0, sp, #16
    f2c0:	eb005b08 	bl	25ee8 <CString::~CString()>
    f2c4:	eaffffa9 	b	f170 <CUSBStandardHub::Configure()+0x28>
    f2c8:	eb0057b6 	bl	251a8 <CLogger::Get()>
    f2cc:	e3a02001 	mov	r2, #1
    f2d0:	e59f1090 	ldr	r1, [pc, #144]	; f368 <CUSBStandardHub::Configure()+0x220>
    f2d4:	e30b38b0 	movw	r3, #47280	; 0xb8b0
    f2d8:	e3403002 	movt	r3, #2
    f2dc:	e1a05006 	mov	r5, r6
    f2e0:	eb00588d 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f2e4:	e1a01007 	mov	r1, r7
    f2e8:	e5940010 	ldr	r0, [r4, #16]
    f2ec:	eb004b2d 	bl	21fa8 <operator delete(void*, unsigned int)>
    f2f0:	e5846010 	str	r6, [r4, #16]
    f2f4:	eaffff9d 	b	f170 <CUSBStandardHub::Configure()+0x28>
    f2f8:	eb0057aa 	bl	251a8 <CLogger::Get()>
    f2fc:	e1a02006 	mov	r2, r6
    f300:	e30b3888 	movw	r3, #47240	; 0xb888
    f304:	e59f105c 	ldr	r1, [pc, #92]	; f368 <CUSBStandardHub::Configure()+0x220>
    f308:	e3403002 	movt	r3, #2
    f30c:	eb005882 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f310:	eaffff96 	b	f170 <CUSBStandardHub::Configure()+0x28>
    f314:	eb0057a3 	bl	251a8 <CLogger::Get()>
    f318:	e594c014 	ldr	ip, [r4, #20]
    f31c:	e3a02001 	mov	r2, #1
    f320:	e59f1040 	ldr	r1, [pc, #64]	; f368 <CUSBStandardHub::Configure()+0x220>
    f324:	e30b38cc 	movw	r3, #47308	; 0xb8cc
    f328:	e3403002 	movt	r3, #2
    f32c:	e58dc000 	str	ip, [sp]
    f330:	e1a05006 	mov	r5, r6
    f334:	eb005878 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f338:	e1a01008 	mov	r1, r8
    f33c:	e5940010 	ldr	r0, [r4, #16]
    f340:	eb004b18 	bl	21fa8 <operator delete(void*, unsigned int)>
    f344:	e5846010 	str	r6, [r4, #16]
    f348:	eaffff88 	b	f170 <CUSBStandardHub::Configure()+0x28>
    f34c:	eb005795 	bl	251a8 <CLogger::Get()>
    f350:	e30b38e8 	movw	r3, #47336	; 0xb8e8
    f354:	e3a02001 	mov	r2, #1
    f358:	e3403002 	movt	r3, #2
    f35c:	e59f1004 	ldr	r1, [pc, #4]	; f368 <CUSBStandardHub::Configure()+0x220>
    f360:	eb00586d 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f364:	eaffffd4 	b	f2bc <CUSBStandardHub::Configure()+0x174>
    f368:	0002b6cc 	.word	0x0002b6cc

0000f36c <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
    f36c:	e1c022f0 	strd	r2, [r0, #32]
    f370:	e1a01003 	mov	r1, r3
    f374:	e1a00002 	mov	r0, r2
    f378:	e12fff1e 	bx	lr

0000f37c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
    f37c:	e92d4070 	push	{r4, r5, r6, lr}
    f380:	e1a04000 	mov	r4, r0
    f384:	e5905028 	ldr	r5, [r0, #40]	; 0x28
    f388:	e59f3084 	ldr	r3, [pc, #132]	; f414 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x98>
    f38c:	e3550000 	cmp	r5, #0
    f390:	e5803000 	str	r3, [r0]
    f394:	0a000004 	beq	f3ac <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x30>
    f398:	e1a00005 	mov	r0, r5
    f39c:	eb00426f 	bl	1fd60 <CPartitionManager::~CPartitionManager()>
    f3a0:	e1a00005 	mov	r0, r5
    f3a4:	e3a01024 	mov	r1, #36	; 0x24
    f3a8:	eb004afe 	bl	21fa8 <operator delete(void*, unsigned int)>
    f3ac:	e5945014 	ldr	r5, [r4, #20]
    f3b0:	e3a03000 	mov	r3, #0
    f3b4:	e5843028 	str	r3, [r4, #40]	; 0x28
    f3b8:	e1550003 	cmp	r5, r3
    f3bc:	0a000004 	beq	f3d4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x58>
    f3c0:	e1a00005 	mov	r0, r5
    f3c4:	ebfffaec 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
    f3c8:	e1a00005 	mov	r0, r5
    f3cc:	e3a01018 	mov	r1, #24
    f3d0:	eb004af4 	bl	21fa8 <operator delete(void*, unsigned int)>
    f3d4:	e5945010 	ldr	r5, [r4, #16]
    f3d8:	e3a03000 	mov	r3, #0
    f3dc:	e5843014 	str	r3, [r4, #20]
    f3e0:	e1550003 	cmp	r5, r3
    f3e4:	0a000004 	beq	f3fc <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x80>
    f3e8:	e1a00005 	mov	r0, r5
    f3ec:	ebfffae2 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
    f3f0:	e1a00005 	mov	r0, r5
    f3f4:	e3a01018 	mov	r1, #24
    f3f8:	eb004aea 	bl	21fa8 <operator delete(void*, unsigned int)>
    f3fc:	e3a03000 	mov	r3, #0
    f400:	e1a00004 	mov	r0, r4
    f404:	e5843010 	str	r3, [r4, #16]
    f408:	eb000a64 	bl	11da0 <CUSBFunction::~CUSBFunction()>
    f40c:	e1a00004 	mov	r0, r4
    f410:	e8bd8070 	pop	{r4, r5, r6, pc}
    f414:	0002b908 	.word	0x0002b908

0000f418 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
    f418:	e92d4010 	push	{r4, lr}
    f41c:	e1a04000 	mov	r4, r0
    f420:	ebffffd5 	bl	f37c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
    f424:	e1a00004 	mov	r0, r4
    f428:	e3a01030 	mov	r1, #48	; 0x30
    f42c:	eb004add 	bl	21fa8 <operator delete(void*, unsigned int)>
    f430:	e1a00004 	mov	r0, r4
    f434:	e8bd8010 	pop	{r4, pc}

0000f438 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
    f438:	e92d4010 	push	{r4, lr}
    f43c:	e1a04000 	mov	r4, r0
    f440:	eb000aa7 	bl	11ee4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
    f444:	e59f2028 	ldr	r2, [pc, #40]	; f474 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x3c>
    f448:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    f44c:	e3a03000 	mov	r3, #0
    f450:	e1a00004 	mov	r0, r4
    f454:	e5843010 	str	r3, [r4, #16]
    f458:	e5842000 	str	r2, [r4]
    f45c:	edc40b08 	vstr	d16, [r4, #32]
    f460:	e5843014 	str	r3, [r4, #20]
    f464:	e5843018 	str	r3, [r4, #24]
    f468:	e584301c 	str	r3, [r4, #28]
    f46c:	e5843028 	str	r3, [r4, #40]	; 0x28
    f470:	e8bd8010 	pop	{r4, pc}
    f474:	0002b908 	.word	0x0002b908

0000f478 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
    f478:	e590001c 	ldr	r0, [r0, #28]
    f47c:	e12fff1e 	bx	lr

0000f480 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>:
    f480:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    f484:	e2519000 	subs	r9, r1, #0
    f488:	e24dd034 	sub	sp, sp, #52	; 0x34
    f48c:	e1a04000 	mov	r4, r0
    f490:	e1a06002 	mov	r6, r2
    f494:	e1a08003 	mov	r8, r3
    f498:	e59d5050 	ldr	r5, [sp, #80]	; 0x50
    f49c:	e59d7054 	ldr	r7, [sp, #84]	; 0x54
    f4a0:	0a000067 	beq	f644 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x1c4>
    f4a4:	e2463006 	sub	r3, r6, #6
    f4a8:	e353000a 	cmp	r3, #10
    f4ac:	8a00004f 	bhi	f5f0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x170>
    f4b0:	e2983000 	adds	r3, r8, #0
    f4b4:	13a03001 	movne	r3, #1
    f4b8:	e3550000 	cmp	r5, #0
    f4bc:	03833001 	orreq	r3, r3, #1
    f4c0:	e3530000 	cmp	r3, #0
    f4c4:	0a000050 	beq	f60c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x18c>
    f4c8:	e3a0201f 	mov	r2, #31
    f4cc:	e3a01000 	mov	r1, #0
    f4d0:	e28d0010 	add	r0, sp, #16
    f4d4:	eb004e23 	bl	22d68 <memset>
    f4d8:	e3570000 	cmp	r7, #0
    f4dc:	e5943018 	ldr	r3, [r4, #24]
    f4e0:	e1a02006 	mov	r2, r6
    f4e4:	e5ddc01e 	ldrb	ip, [sp, #30]
    f4e8:	13a00080 	movne	r0, #128	; 0x80
    f4ec:	e5dde01d 	ldrb	lr, [sp, #29]
    f4f0:	03a00000 	moveq	r0, #0
    f4f4:	e2833001 	add	r3, r3, #1
    f4f8:	e1a01009 	mov	r1, r9
    f4fc:	e5843018 	str	r3, [r4, #24]
    f500:	e7c4c016 	bfi	ip, r6, #0, #5
    f504:	e7c3e01f 	bfc	lr, #0, #4
    f508:	e58d3014 	str	r3, [sp, #20]
    f50c:	e5cde01d 	strb	lr, [sp, #29]
    f510:	e3053355 	movw	r3, #21333	; 0x5355
    f514:	e5cdc01e 	strb	ip, [sp, #30]
    f518:	e3443342 	movt	r3, #17218	; 0x4342
    f51c:	e58d5018 	str	r5, [sp, #24]
    f520:	e58d3010 	str	r3, [sp, #16]
    f524:	e5cd001c 	strb	r0, [sp, #28]
    f528:	e28d001f 	add	r0, sp, #31
    f52c:	eb004f25 	bl	231c8 <memcpy>
    f530:	e1a00004 	mov	r0, r4
    f534:	eb000afa 	bl	12124 <CUSBFunction::GetHost() const>
    f538:	e2506000 	subs	r6, r0, #0
    f53c:	0a000039 	beq	f628 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x1a8>
    f540:	e28d2010 	add	r2, sp, #16
    f544:	e3a0301f 	mov	r3, #31
    f548:	e5941014 	ldr	r1, [r4, #20]
    f54c:	e1a00006 	mov	r0, r6
    f550:	ebfffb6d 	bl	e30c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
    f554:	e3500000 	cmp	r0, #0
    f558:	ba000062 	blt	f6e8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x268>
    f55c:	e3550000 	cmp	r5, #0
    f560:	0a000009 	beq	f58c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x10c>
    f564:	e594c010 	ldr	ip, [r4, #16]
    f568:	e3570000 	cmp	r7, #0
    f56c:	e1a03005 	mov	r3, r5
    f570:	e5941014 	ldr	r1, [r4, #20]
    f574:	e1a02008 	mov	r2, r8
    f578:	e1a00006 	mov	r0, r6
    f57c:	11a0100c 	movne	r1, ip
    f580:	ebfffb61 	bl	e30c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
    f584:	e2505000 	subs	r5, r0, #0
    f588:	ba00005e 	blt	f708 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x288>
    f58c:	e1a00006 	mov	r0, r6
    f590:	e3a0300d 	mov	r3, #13
    f594:	e1a0200d 	mov	r2, sp
    f598:	e5941010 	ldr	r1, [r4, #16]
    f59c:	ebfffb5a 	bl	e30c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
    f5a0:	e350000d 	cmp	r0, #13
    f5a4:	1a00002d 	bne	f660 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x1e0>
    f5a8:	e59d2000 	ldr	r2, [sp]
    f5ac:	e3053355 	movw	r3, #21333	; 0x5355
    f5b0:	e3453342 	movt	r3, #21314	; 0x5342
    f5b4:	e1520003 	cmp	r2, r3
    f5b8:	1a000030 	bne	f680 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x200>
    f5bc:	e5943018 	ldr	r3, [r4, #24]
    f5c0:	e59d2004 	ldr	r2, [sp, #4]
    f5c4:	e1520003 	cmp	r2, r3
    f5c8:	1a000034 	bne	f6a0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x220>
    f5cc:	e5dd300c 	ldrb	r3, [sp, #12]
    f5d0:	e3530000 	cmp	r3, #0
    f5d4:	1a000039 	bne	f6c0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x240>
    f5d8:	e59d3008 	ldr	r3, [sp, #8]
    f5dc:	e3530000 	cmp	r3, #0
    f5e0:	1a000038 	bne	f6c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x248>
    f5e4:	e1a00005 	mov	r0, r5
    f5e8:	e28dd034 	add	sp, sp, #52	; 0x34
    f5ec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    f5f0:	e30b192c 	movw	r1, #47404	; 0xb92c
    f5f4:	e30b0950 	movw	r0, #47440	; 0xb950
    f5f8:	e3401002 	movt	r1, #2
    f5fc:	e3400002 	movt	r0, #2
    f600:	e3002216 	movw	r2, #534	; 0x216
    f604:	eb005565 	bl	24ba0 <assertion_failed>
    f608:	eaffffa8 	b	f4b0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x30>
    f60c:	e30b192c 	movw	r1, #47404	; 0xb92c
    f610:	e30b0974 	movw	r0, #47476	; 0xb974
    f614:	e3401002 	movt	r1, #2
    f618:	e3400002 	movt	r0, #2
    f61c:	e3002217 	movw	r2, #535	; 0x217
    f620:	eb00555e 	bl	24ba0 <assertion_failed>
    f624:	eaffffa7 	b	f4c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x48>
    f628:	e30b192c 	movw	r1, #47404	; 0xb92c
    f62c:	e30b06e8 	movw	r0, #46824	; 0xb6e8
    f630:	e3401002 	movt	r1, #2
    f634:	e3400002 	movt	r0, #2
    f638:	e3002226 	movw	r2, #550	; 0x226
    f63c:	eb005557 	bl	24ba0 <assertion_failed>
    f640:	eaffffbe 	b	f540 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0xc0>
    f644:	e30b192c 	movw	r1, #47404	; 0xb92c
    f648:	e30b0940 	movw	r0, #47424	; 0xb940
    f64c:	e3401002 	movt	r1, #2
    f650:	e3400002 	movt	r0, #2
    f654:	e3002215 	movw	r2, #533	; 0x215
    f658:	eb005550 	bl	24ba0 <assertion_failed>
    f65c:	eaffff90 	b	f4a4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x24>
    f660:	eb0056d0 	bl	251a8 <CLogger::Get()>
    f664:	e30b39c0 	movw	r3, #47552	; 0xb9c0
    f668:	e3a02001 	mov	r2, #1
    f66c:	e3403002 	movt	r3, #2
    f670:	e59f10b0 	ldr	r1, [pc, #176]	; f728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f674:	e3e05000 	mvn	r5, #0
    f678:	eb0057a7 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f67c:	eaffffd8 	b	f5e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f680:	eb0056c8 	bl	251a8 <CLogger::Get()>
    f684:	e30b39d4 	movw	r3, #47572	; 0xb9d4
    f688:	e3a02001 	mov	r2, #1
    f68c:	e3403002 	movt	r3, #2
    f690:	e59f1090 	ldr	r1, [pc, #144]	; f728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f694:	e3e05000 	mvn	r5, #0
    f698:	eb00579f 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f69c:	eaffffd0 	b	f5e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f6a0:	eb0056c0 	bl	251a8 <CLogger::Get()>
    f6a4:	e30b39ec 	movw	r3, #47596	; 0xb9ec
    f6a8:	e3a02001 	mov	r2, #1
    f6ac:	e3403002 	movt	r3, #2
    f6b0:	e59f1070 	ldr	r1, [pc, #112]	; f728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f6b4:	e3e05000 	mvn	r5, #0
    f6b8:	eb005797 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f6bc:	eaffffc8 	b	f5e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f6c0:	e3e05000 	mvn	r5, #0
    f6c4:	eaffffc6 	b	f5e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f6c8:	eb0056b6 	bl	251a8 <CLogger::Get()>
    f6cc:	e30b3a00 	movw	r3, #47616	; 0xba00
    f6d0:	e3a02001 	mov	r2, #1
    f6d4:	e3403002 	movt	r3, #2
    f6d8:	e59f1048 	ldr	r1, [pc, #72]	; f728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f6dc:	e3e05000 	mvn	r5, #0
    f6e0:	eb00578d 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f6e4:	eaffffbe 	b	f5e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f6e8:	eb0056ae 	bl	251a8 <CLogger::Get()>
    f6ec:	e30b3994 	movw	r3, #47508	; 0xb994
    f6f0:	e3a02001 	mov	r2, #1
    f6f4:	e3403002 	movt	r3, #2
    f6f8:	e59f1028 	ldr	r1, [pc, #40]	; f728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f6fc:	e3e05000 	mvn	r5, #0
    f700:	eb005785 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f704:	eaffffb6 	b	f5e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f708:	eb0056a6 	bl	251a8 <CLogger::Get()>
    f70c:	e30b39a8 	movw	r3, #47528	; 0xb9a8
    f710:	e3a02001 	mov	r2, #1
    f714:	e3403002 	movt	r3, #2
    f718:	e59f1008 	ldr	r1, [pc, #8]	; f728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f71c:	e3e05000 	mvn	r5, #0
    f720:	eb00577d 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f724:	eaffffae 	b	f5e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f728:	0002b924 	.word	0x0002b924

0000f72c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
    f72c:	e92d4370 	push	{r4, r5, r6, r8, r9, lr}
    f730:	e2516000 	subs	r6, r1, #0
    f734:	e24dd018 	sub	sp, sp, #24
    f738:	e1a05000 	mov	r5, r0
    f73c:	e1a04002 	mov	r4, r2
    f740:	0a00002e 	beq	f800 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd4>
    f744:	e1c522d0 	ldrd	r2, [r5, #32]
    f748:	e30001ff 	movw	r0, #511	; 0x1ff
    f74c:	e3a01000 	mov	r1, #0
    f750:	e30091ff 	movw	r9, #511	; 0x1ff
    f754:	e0011003 	and	r1, r1, r3
    f758:	e0000002 	and	r0, r0, r2
    f75c:	e1901001 	orrs	r1, r0, r1
    f760:	e3e08000 	mvn	r8, #0
    f764:	13a01001 	movne	r1, #1
    f768:	03a01000 	moveq	r1, #0
    f76c:	e1530009 	cmp	r3, r9
    f770:	01520008 	cmpeq	r2, r8
    f774:	83811001 	orrhi	r1, r1, #1
    f778:	e3510000 	cmp	r1, #0
    f77c:	1a00001b 	bne	f7f0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc4>
    f780:	e7e8c054 	ubfx	ip, r4, #0, #9
    f784:	e1a024a2 	lsr	r2, r2, #9
    f788:	e35c0000 	cmp	ip, #0
    f78c:	e1822b83 	orr	r2, r2, r3, lsl #23
    f790:	1a000016 	bne	f7f0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc4>
    f794:	e6bf1f32 	rev	r1, r2
    f798:	e1a00005 	mov	r0, r5
    f79c:	e58d100e 	str	r1, [sp, #14]
    f7a0:	e1a03006 	mov	r3, r6
    f7a4:	e58d4000 	str	r4, [sp]
    f7a8:	e1a0e4a4 	lsr	lr, r4, #9
    f7ac:	e3a05001 	mov	r5, #1
    f7b0:	e3a0200a 	mov	r2, #10
    f7b4:	e58d5004 	str	r5, [sp, #4]
    f7b8:	e28d100c 	add	r1, sp, #12
    f7bc:	e5cdc00d 	strb	ip, [sp, #13]
    f7c0:	e6bfefbe 	rev16	lr, lr
    f7c4:	e5cdc012 	strb	ip, [sp, #18]
    f7c8:	e5cdc015 	strb	ip, [sp, #21]
    f7cc:	e3a0c028 	mov	ip, #40	; 0x28
    f7d0:	e1cde1b3 	strh	lr, [sp, #19]
    f7d4:	e5cdc00c 	strb	ip, [sp, #12]
    f7d8:	ebffff28 	bl	f480 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    f7dc:	e1500004 	cmp	r0, r4
    f7e0:	1a00000d 	bne	f81c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf0>
    f7e4:	e1a00004 	mov	r0, r4
    f7e8:	e28dd018 	add	sp, sp, #24
    f7ec:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    f7f0:	e3e04000 	mvn	r4, #0
    f7f4:	e1a00004 	mov	r0, r4
    f7f8:	e28dd018 	add	sp, sp, #24
    f7fc:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    f800:	e30b192c 	movw	r1, #47404	; 0xb92c
    f804:	e30b0984 	movw	r0, #47492	; 0xb984
    f808:	e3401002 	movt	r1, #2
    f80c:	e3400002 	movt	r0, #2
    f810:	e30021ca 	movw	r2, #458	; 0x1ca
    f814:	eb0054e1 	bl	24ba0 <assertion_failed>
    f818:	eaffffc9 	b	f744 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x18>
    f81c:	eb005661 	bl	251a8 <CLogger::Get()>
    f820:	e1a02005 	mov	r2, r5
    f824:	e30b3a18 	movw	r3, #47640	; 0xba18
    f828:	e59f100c 	ldr	r1, [pc, #12]	; f83c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x110>
    f82c:	e3403002 	movt	r3, #2
    f830:	e3e04000 	mvn	r4, #0
    f834:	eb005738 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f838:	eaffffe9 	b	f7e4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xb8>
    f83c:	0002b924 	.word	0x0002b924

0000f840 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
    f840:	e92d4370 	push	{r4, r5, r6, r8, r9, lr}
    f844:	e2516000 	subs	r6, r1, #0
    f848:	e24dd018 	sub	sp, sp, #24
    f84c:	e1a05000 	mov	r5, r0
    f850:	e1a04002 	mov	r4, r2
    f854:	0a00002d 	beq	f910 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
    f858:	e1c522d0 	ldrd	r2, [r5, #32]
    f85c:	e30001ff 	movw	r0, #511	; 0x1ff
    f860:	e3a01000 	mov	r1, #0
    f864:	e30091ff 	movw	r9, #511	; 0x1ff
    f868:	e0011003 	and	r1, r1, r3
    f86c:	e0000002 	and	r0, r0, r2
    f870:	e1901001 	orrs	r1, r0, r1
    f874:	e3e08000 	mvn	r8, #0
    f878:	13a01001 	movne	r1, #1
    f87c:	03a01000 	moveq	r1, #0
    f880:	e1530009 	cmp	r3, r9
    f884:	01520008 	cmpeq	r2, r8
    f888:	83811001 	orrhi	r1, r1, #1
    f88c:	e3510000 	cmp	r1, #0
    f890:	1a00001b 	bne	f904 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc4>
    f894:	e7e8e054 	ubfx	lr, r4, #0, #9
    f898:	e1a084a2 	lsr	r8, r2, #9
    f89c:	e35e0000 	cmp	lr, #0
    f8a0:	e1888b83 	orr	r8, r8, r3, lsl #23
    f8a4:	1a000016 	bne	f904 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc4>
    f8a8:	e58de004 	str	lr, [sp, #4]
    f8ac:	e1a00005 	mov	r0, r5
    f8b0:	e1a03006 	mov	r3, r6
    f8b4:	e58d4000 	str	r4, [sp]
    f8b8:	e1a0c4a4 	lsr	ip, r4, #9
    f8bc:	e3a0200a 	mov	r2, #10
    f8c0:	e28d100c 	add	r1, sp, #12
    f8c4:	e6bfcfbc 	rev16	ip, ip
    f8c8:	e5cde012 	strb	lr, [sp, #18]
    f8cc:	e6bf8f38 	rev	r8, r8
    f8d0:	e5cde015 	strb	lr, [sp, #21]
    f8d4:	e3a0502a 	mov	r5, #42	; 0x2a
    f8d8:	e3a0e008 	mov	lr, #8
    f8dc:	e58d800e 	str	r8, [sp, #14]
    f8e0:	e1cdc1b3 	strh	ip, [sp, #19]
    f8e4:	e5cd500c 	strb	r5, [sp, #12]
    f8e8:	e5cde00d 	strb	lr, [sp, #13]
    f8ec:	ebfffee3 	bl	f480 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    f8f0:	e3500000 	cmp	r0, #0
    f8f4:	a1a00004 	movge	r0, r4
    f8f8:	ba00000b 	blt	f92c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xec>
    f8fc:	e28dd018 	add	sp, sp, #24
    f900:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    f904:	e3e00000 	mvn	r0, #0
    f908:	e28dd018 	add	sp, sp, #24
    f90c:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    f910:	e30b192c 	movw	r1, #47404	; 0xb92c
    f914:	e30b0984 	movw	r0, #47492	; 0xb984
    f918:	e3401002 	movt	r1, #2
    f91c:	e3400002 	movt	r0, #2
    f920:	e30021ef 	movw	r2, #495	; 0x1ef
    f924:	eb00549d 	bl	24ba0 <assertion_failed>
    f928:	eaffffca 	b	f858 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x18>
    f92c:	eb00561d 	bl	251a8 <CLogger::Get()>
    f930:	e30b3a28 	movw	r3, #47656	; 0xba28
    f934:	e3a02001 	mov	r2, #1
    f938:	e3403002 	movt	r3, #2
    f93c:	e59f1008 	ldr	r1, [pc, #8]	; f94c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x10c>
    f940:	eb0056f5 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f944:	e3e00000 	mvn	r0, #0
    f948:	eaffffeb 	b	f8fc <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xbc>
    f94c:	0002b924 	.word	0x0002b924

0000f950 <CUSBBulkOnlyMassStorageDevice::Reset()>:
    f950:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f954:	e24dd014 	sub	sp, sp, #20
    f958:	e1a05000 	mov	r5, r0
    f95c:	eb0009f0 	bl	12124 <CUSBFunction::GetHost() const>
    f960:	e2506000 	subs	r6, r0, #0
    f964:	0a000030 	beq	fa2c <CUSBBulkOnlyMassStorageDevice::Reset()+0xdc>
    f968:	e1a00005 	mov	r0, r5
    f96c:	e3a04000 	mov	r4, #0
    f970:	eb0009da 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
    f974:	e58d400c 	str	r4, [sp, #12]
    f978:	e58d4008 	str	r4, [sp, #8]
    f97c:	e3a030ff 	mov	r3, #255	; 0xff
    f980:	e58d4004 	str	r4, [sp, #4]
    f984:	e3a02021 	mov	r2, #33	; 0x21
    f988:	e58d4000 	str	r4, [sp]
    f98c:	e1a01000 	mov	r1, r0
    f990:	e1a00006 	mov	r0, r6
    f994:	ebfff9fe 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f998:	e1500004 	cmp	r0, r4
    f99c:	ba000029 	blt	fa48 <CUSBBulkOnlyMassStorageDevice::Reset()+0xf8>
    f9a0:	e1a00005 	mov	r0, r5
    f9a4:	e3a07001 	mov	r7, #1
    f9a8:	eb0009cc 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
    f9ac:	e58d400c 	str	r4, [sp, #12]
    f9b0:	e58d4008 	str	r4, [sp, #8]
    f9b4:	e1a03007 	mov	r3, r7
    f9b8:	e58d4000 	str	r4, [sp]
    f9bc:	e3a02002 	mov	r2, #2
    f9c0:	e58d7004 	str	r7, [sp, #4]
    f9c4:	e1a01000 	mov	r1, r0
    f9c8:	e1a00006 	mov	r0, r6
    f9cc:	ebfff9f0 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f9d0:	e3500000 	cmp	r0, #0
    f9d4:	ba000023 	blt	fa68 <CUSBBulkOnlyMassStorageDevice::Reset()+0x118>
    f9d8:	e1a00005 	mov	r0, r5
    f9dc:	eb0009bf 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
    f9e0:	e3a01002 	mov	r1, #2
    f9e4:	e1a02001 	mov	r2, r1
    f9e8:	e58d1004 	str	r1, [sp, #4]
    f9ec:	e58d400c 	str	r4, [sp, #12]
    f9f0:	e1a03007 	mov	r3, r7
    f9f4:	e58d4008 	str	r4, [sp, #8]
    f9f8:	e58d4000 	str	r4, [sp]
    f9fc:	e1a01000 	mov	r1, r0
    fa00:	e1a00006 	mov	r0, r6
    fa04:	ebfff9e2 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fa08:	e3500000 	cmp	r0, #0
    fa0c:	ba00001d 	blt	fa88 <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
    fa10:	e5950010 	ldr	r0, [r5, #16]
    fa14:	ebfff9c5 	bl	e130 <CUSBEndpoint::ResetPID()>
    fa18:	e5950014 	ldr	r0, [r5, #20]
    fa1c:	ebfff9c3 	bl	e130 <CUSBEndpoint::ResetPID()>
    fa20:	e1a00004 	mov	r0, r4
    fa24:	e28dd014 	add	sp, sp, #20
    fa28:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fa2c:	e30b192c 	movw	r1, #47404	; 0xb92c
    fa30:	e30b06e8 	movw	r0, #46824	; 0xb6e8
    fa34:	e3401002 	movt	r1, #2
    fa38:	e3400002 	movt	r0, #2
    fa3c:	e3002265 	movw	r2, #613	; 0x265
    fa40:	eb005456 	bl	24ba0 <assertion_failed>
    fa44:	eaffffc7 	b	f968 <CUSBBulkOnlyMassStorageDevice::Reset()+0x18>
    fa48:	eb0055d6 	bl	251a8 <CLogger::Get()>
    fa4c:	e30b3a38 	movw	r3, #47672	; 0xba38
    fa50:	e3a02004 	mov	r2, #4
    fa54:	e3403002 	movt	r3, #2
    fa58:	e59f1048 	ldr	r1, [pc, #72]	; faa8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x158>
    fa5c:	eb0056ae 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa60:	e3e00000 	mvn	r0, #0
    fa64:	eaffffee 	b	fa24 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
    fa68:	eb0055ce 	bl	251a8 <CLogger::Get()>
    fa6c:	e30b3a4c 	movw	r3, #47692	; 0xba4c
    fa70:	e3a02004 	mov	r2, #4
    fa74:	e3403002 	movt	r3, #2
    fa78:	e59f1028 	ldr	r1, [pc, #40]	; faa8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x158>
    fa7c:	eb0056a6 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa80:	e3e00000 	mvn	r0, #0
    fa84:	eaffffe6 	b	fa24 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
    fa88:	eb0055c6 	bl	251a8 <CLogger::Get()>
    fa8c:	e30b3a6c 	movw	r3, #47724	; 0xba6c
    fa90:	e3a02004 	mov	r2, #4
    fa94:	e3403002 	movt	r3, #2
    fa98:	e59f1008 	ldr	r1, [pc, #8]	; faa8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x158>
    fa9c:	eb00569e 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    faa0:	e3e00000 	mvn	r0, #0
    faa4:	eaffffde 	b	fa24 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
    faa8:	0002b924 	.word	0x0002b924

0000faac <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
    faac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fab0:	e1a06002 	mov	r6, r2
    fab4:	e1a07000 	mov	r7, r0
    fab8:	e1a08001 	mov	r8, r1
    fabc:	e1a09002 	mov	r9, r2
    fac0:	e3a05004 	mov	r5, #4
    fac4:	e1a02006 	mov	r2, r6
    fac8:	e1a01008 	mov	r1, r8
    facc:	e1a00007 	mov	r0, r7
    fad0:	ebffff15 	bl	f72c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
    fad4:	e1a04000 	mov	r4, r0
    fad8:	e1540006 	cmp	r4, r6
    fadc:	e1a00007 	mov	r0, r7
    fae0:	1a000001 	bne	faec <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x40>
    fae4:	e1a00009 	mov	r0, r9
    fae8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    faec:	ebffff97 	bl	f950 <CUSBBulkOnlyMassStorageDevice::Reset()>
    faf0:	e3500000 	cmp	r0, #0
    faf4:	1a000004 	bne	fb0c <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
    faf8:	e2555001 	subs	r5, r5, #1
    fafc:	1afffff0 	bne	fac4 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
    fb00:	e1a09004 	mov	r9, r4
    fb04:	e1a00009 	mov	r0, r9
    fb08:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fb0c:	e1a09000 	mov	r9, r0
    fb10:	eafffff3 	b	fae4 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x38>

0000fb14 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
    fb14:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fb18:	e1a06002 	mov	r6, r2
    fb1c:	e1a07000 	mov	r7, r0
    fb20:	e1a08001 	mov	r8, r1
    fb24:	e1a09002 	mov	r9, r2
    fb28:	e3a05004 	mov	r5, #4
    fb2c:	e1a02006 	mov	r2, r6
    fb30:	e1a01008 	mov	r1, r8
    fb34:	e1a00007 	mov	r0, r7
    fb38:	ebffff40 	bl	f840 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
    fb3c:	e1a04000 	mov	r4, r0
    fb40:	e1540006 	cmp	r4, r6
    fb44:	e1a00007 	mov	r0, r7
    fb48:	1a000001 	bne	fb54 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x40>
    fb4c:	e1a00009 	mov	r0, r9
    fb50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fb54:	ebffff7d 	bl	f950 <CUSBBulkOnlyMassStorageDevice::Reset()>
    fb58:	e3500000 	cmp	r0, #0
    fb5c:	1a000004 	bne	fb74 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
    fb60:	e2555001 	subs	r5, r5, #1
    fb64:	1afffff0 	bne	fb2c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
    fb68:	e1a09004 	mov	r9, r4
    fb6c:	e1a00009 	mov	r0, r9
    fb70:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fb74:	e1a09000 	mov	r9, r0
    fb78:	eafffff3 	b	fb4c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x38>

0000fb7c <CUSBBulkOnlyMassStorageDevice::Configure()>:
    fb7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fb80:	e24dd060 	sub	sp, sp, #96	; 0x60
    fb84:	e1a05000 	mov	r5, r0
    fb88:	eb000934 	bl	12060 <CUSBFunction::GetNumEndpoints() const>
    fb8c:	e3500001 	cmp	r0, #1
    fb90:	ca000004 	bgt	fba8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
    fb94:	ea0000c6 	b	feb4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x338>
    fb98:	e5d43003 	ldrb	r3, [r4, #3]
    fb9c:	e203303f 	and	r3, r3, #63	; 0x3f
    fba0:	e3530002 	cmp	r3, #2
    fba4:	0a000030 	beq	fc6c <CUSBBulkOnlyMassStorageDevice::Configure()+0xf0>
    fba8:	e3a01005 	mov	r1, #5
    fbac:	e1a00005 	mov	r0, r5
    fbb0:	eb00099d 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
    fbb4:	e2504000 	subs	r4, r0, #0
    fbb8:	1afffff6 	bne	fb98 <CUSBBulkOnlyMassStorageDevice::Configure()+0x1c>
    fbbc:	e5953010 	ldr	r3, [r5, #16]
    fbc0:	e1a00005 	mov	r0, r5
    fbc4:	e3530000 	cmp	r3, #0
    fbc8:	0a0000ba 	beq	feb8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x33c>
    fbcc:	e5953014 	ldr	r3, [r5, #20]
    fbd0:	e3530000 	cmp	r3, #0
    fbd4:	0a0000b7 	beq	feb8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x33c>
    fbd8:	eb000962 	bl	12168 <CUSBFunction::Configure()>
    fbdc:	e2506000 	subs	r6, r0, #0
    fbe0:	0a0000aa 	beq	fe90 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
    fbe4:	e3a0c024 	mov	ip, #36	; 0x24
    fbe8:	e3a06001 	mov	r6, #1
    fbec:	e58dc000 	str	ip, [sp]
    fbf0:	e28d303c 	add	r3, sp, #60	; 0x3c
    fbf4:	e58d6004 	str	r6, [sp, #4]
    fbf8:	e3a02006 	mov	r2, #6
    fbfc:	e28d100c 	add	r1, sp, #12
    fc00:	e1a00005 	mov	r0, r5
    fc04:	e5cdc010 	strb	ip, [sp, #16]
    fc08:	e3a0c012 	mov	ip, #18
    fc0c:	e5cd400d 	strb	r4, [sp, #13]
    fc10:	e5cd400e 	strb	r4, [sp, #14]
    fc14:	e5cd400f 	strb	r4, [sp, #15]
    fc18:	e5cd4011 	strb	r4, [sp, #17]
    fc1c:	e5cdc00c 	strb	ip, [sp, #12]
    fc20:	ebfffe16 	bl	f480 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    fc24:	e3500024 	cmp	r0, #36	; 0x24
    fc28:	1a0000b5 	bne	ff04 <CUSBBulkOnlyMassStorageDevice::Configure()+0x388>
    fc2c:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
    fc30:	e213301f 	ands	r3, r3, #31
    fc34:	01a04003 	moveq	r4, r3
    fc38:	03a06063 	moveq	r6, #99	; 0x63
    fc3c:	0a00002a 	beq	fcec <CUSBBulkOnlyMassStorageDevice::Configure()+0x170>
    fc40:	eb005558 	bl	251a8 <CLogger::Get()>
    fc44:	e5dd103c 	ldrb	r1, [sp, #60]	; 0x3c
    fc48:	e1a02006 	mov	r2, r6
    fc4c:	e30b3aa4 	movw	r3, #47780	; 0xbaa4
    fc50:	e201101f 	and	r1, r1, #31
    fc54:	e3403002 	movt	r3, #2
    fc58:	e58d1000 	str	r1, [sp]
    fc5c:	e1a06004 	mov	r6, r4
    fc60:	e59f139c 	ldr	r1, [pc, #924]	; 10004 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    fc64:	eb00562c 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fc68:	ea00008e 	b	fea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    fc6c:	e1d430d2 	ldrsb	r3, [r4, #2]
    fc70:	e1a00005 	mov	r0, r5
    fc74:	e3530000 	cmp	r3, #0
    fc78:	ba000094 	blt	fed0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x354>
    fc7c:	e5953014 	ldr	r3, [r5, #20]
    fc80:	e3530000 	cmp	r3, #0
    fc84:	1a00008a 	bne	feb4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x338>
    fc88:	eb000904 	bl	120a0 <CUSBFunction::GetDevice() const>
    fc8c:	e1a07000 	mov	r7, r0
    fc90:	e3a00018 	mov	r0, #24
    fc94:	eb0048bf 	bl	21f98 <operator new(unsigned int)>
    fc98:	e1a02004 	mov	r2, r4
    fc9c:	e1a01007 	mov	r1, r7
    fca0:	e1a06000 	mov	r6, r0
    fca4:	ebfff821 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
    fca8:	e5856014 	str	r6, [r5, #20]
    fcac:	eaffffbd 	b	fba8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
    fcb0:	e5ddc01d 	ldrb	ip, [sp, #29]
    fcb4:	e58d7004 	str	r7, [sp, #4]
    fcb8:	e7c0c014 	bfi	ip, r4, #0, #1
    fcbc:	e58de000 	str	lr, [sp]
    fcc0:	e7c7c094 	bfi	ip, r4, #1, #7
    fcc4:	e5cd801c 	strb	r8, [sp, #28]
    fcc8:	e1cd41be 	strh	r4, [sp, #30]
    fccc:	e5cde020 	strb	lr, [sp, #32]
    fcd0:	e5cd4021 	strb	r4, [sp, #33]	; 0x21
    fcd4:	e5cdc01d 	strb	ip, [sp, #29]
    fcd8:	ebfffde8 	bl	f480 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    fcdc:	e3500000 	cmp	r0, #0
    fce0:	ba000091 	blt	ff2c <CUSBBulkOnlyMassStorageDevice::Configure()+0x3b0>
    fce4:	e2566001 	subs	r6, r6, #1
    fce8:	0a0000a0 	beq	ff70 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3f4>
    fcec:	eb004c0f 	bl	22d30 <CTimer::Get()>
    fcf0:	e3a00064 	mov	r0, #100	; 0x64
    fcf4:	eb004bc0 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
    fcf8:	e3a03000 	mov	r3, #0
    fcfc:	e3a02006 	mov	r2, #6
    fd00:	e28d1014 	add	r1, sp, #20
    fd04:	e58d4004 	str	r4, [sp, #4]
    fd08:	e1a00005 	mov	r0, r5
    fd0c:	e58d4000 	str	r4, [sp]
    fd10:	e3a07001 	mov	r7, #1
    fd14:	e5cd4014 	strb	r4, [sp, #20]
    fd18:	e3a08003 	mov	r8, #3
    fd1c:	e5cd4015 	strb	r4, [sp, #21]
    fd20:	e5cd4016 	strb	r4, [sp, #22]
    fd24:	e5cd4017 	strb	r4, [sp, #23]
    fd28:	e5cd4018 	strb	r4, [sp, #24]
    fd2c:	e5cd4019 	strb	r4, [sp, #25]
    fd30:	ebfffdd2 	bl	f480 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    fd34:	e3a0e012 	mov	lr, #18
    fd38:	e28d3028 	add	r3, sp, #40	; 0x28
    fd3c:	e3a02006 	mov	r2, #6
    fd40:	e28d101c 	add	r1, sp, #28
    fd44:	e3500000 	cmp	r0, #0
    fd48:	e1a00005 	mov	r0, r5
    fd4c:	baffffd7 	blt	fcb0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x134>
    fd50:	e5dd001d 	ldrb	r0, [sp, #29]
    fd54:	e3a02008 	mov	r2, #8
    fd58:	e5ddc024 	ldrb	ip, [sp, #36]	; 0x24
    fd5c:	e28d3014 	add	r3, sp, #20
    fd60:	e7c00014 	bfi	r0, r4, #0, #1
    fd64:	e58d2000 	str	r2, [sp]
    fd68:	e7c70094 	bfi	r0, r4, #1, #7
    fd6c:	e28d101c 	add	r1, sp, #28
    fd70:	e5cd001d 	strb	r0, [sp, #29]
    fd74:	e3a06001 	mov	r6, #1
    fd78:	e7c0c014 	bfi	ip, r4, #0, #1
    fd7c:	e58d6004 	str	r6, [sp, #4]
    fd80:	e3a0200a 	mov	r2, #10
    fd84:	e1a00005 	mov	r0, r5
    fd88:	e7c7c094 	bfi	ip, r4, #1, #7
    fd8c:	e1cd41be 	strh	r4, [sp, #30]
    fd90:	e5cdc024 	strb	ip, [sp, #36]	; 0x24
    fd94:	e3a0c025 	mov	ip, #37	; 0x25
    fd98:	e1cd42b0 	strh	r4, [sp, #32]
    fd9c:	e1cd42b2 	strh	r4, [sp, #34]	; 0x22
    fda0:	e5cd4025 	strb	r4, [sp, #37]	; 0x25
    fda4:	e5cdc01c 	strb	ip, [sp, #28]
    fda8:	ebfffdb4 	bl	f480 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    fdac:	e3500008 	cmp	r0, #8
    fdb0:	1a000075 	bne	ff8c <CUSBBulkOnlyMassStorageDevice::Configure()+0x410>
    fdb4:	e59d4018 	ldr	r4, [sp, #24]
    fdb8:	e6bf4f34 	rev	r4, r4
    fdbc:	e3540c02 	cmp	r4, #512	; 0x200
    fdc0:	1a000061 	bne	ff4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x3d0>
    fdc4:	e59d3014 	ldr	r3, [sp, #20]
    fdc8:	e6bf3f33 	rev	r3, r3
    fdcc:	e585301c 	str	r3, [r5, #28]
    fdd0:	e3730001 	cmn	r3, #1
    fdd4:	0a000082 	beq	ffe4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x468>
    fdd8:	e2833001 	add	r3, r3, #1
    fddc:	e585301c 	str	r3, [r5, #28]
    fde0:	eb0054f0 	bl	251a8 <CLogger::Get()>
    fde4:	e595c01c 	ldr	ip, [r5, #28]
    fde8:	e3a02004 	mov	r2, #4
    fdec:	e59f1210 	ldr	r1, [pc, #528]	; 10004 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    fdf0:	e30b3b2c 	movw	r3, #47916	; 0xbb2c
    fdf4:	e3014a18 	movw	r4, #6680	; 0x1a18
    fdf8:	e3403002 	movt	r3, #2
    fdfc:	e1a0c5ac 	lsr	ip, ip, #11
    fe00:	e3404003 	movt	r4, #3
    fe04:	e58dc000 	str	ip, [sp]
    fe08:	eb0055c3 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe0c:	e28d0028 	add	r0, sp, #40	; 0x28
    fe10:	eb005867 	bl	25fb4 <CString::CString()>
    fe14:	e5942000 	ldr	r2, [r4]
    fe18:	e28d0028 	add	r0, sp, #40	; 0x28
    fe1c:	e30b1b44 	movw	r1, #47940	; 0xbb44
    fe20:	e3401002 	movt	r1, #2
    fe24:	eb005b74 	bl	26bfc <CString::Format(char const*, ...)>
    fe28:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    fe2c:	e3530000 	cmp	r3, #0
    fe30:	0a000005 	beq	fe4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d0>
    fe34:	e30b192c 	movw	r1, #47404	; 0xb92c
    fe38:	e30b0b4c 	movw	r0, #47948	; 0xbb4c
    fe3c:	e3401002 	movt	r1, #2
    fe40:	e3400002 	movt	r0, #2
    fe44:	e3a02f5f 	mov	r2, #380	; 0x17c
    fe48:	eb005354 	bl	24ba0 <assertion_failed>
    fe4c:	e28d0028 	add	r0, sp, #40	; 0x28
    fe50:	eb00586d 	bl	2600c <CString::operator char const*() const>
    fe54:	e1a07000 	mov	r7, r0
    fe58:	e3a00024 	mov	r0, #36	; 0x24
    fe5c:	eb00484d 	bl	21f98 <operator new(unsigned int)>
    fe60:	e1a02007 	mov	r2, r7
    fe64:	e1a01005 	mov	r1, r5
    fe68:	e1a06000 	mov	r6, r0
    fe6c:	eb003faf 	bl	1fd30 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
    fe70:	e5856028 	str	r6, [r5, #40]	; 0x28
    fe74:	e1a00006 	mov	r0, r6
    fe78:	eb003fcc 	bl	1fdb0 <CPartitionManager::Initialize()>
    fe7c:	e2506000 	subs	r6, r0, #0
    fe80:	1a000049 	bne	ffac <CUSBBulkOnlyMassStorageDevice::Configure()+0x430>
    fe84:	e28d0028 	add	r0, sp, #40	; 0x28
    fe88:	eb005816 	bl	25ee8 <CString::~CString()>
    fe8c:	ea000005 	b	fea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    fe90:	eb0054c4 	bl	251a8 <CLogger::Get()>
    fe94:	e30b3888 	movw	r3, #47240	; 0xb888
    fe98:	e3a02001 	mov	r2, #1
    fe9c:	e3403002 	movt	r3, #2
    fea0:	e59f115c 	ldr	r1, [pc, #348]	; 10004 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    fea4:	eb00559c 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fea8:	e1a00006 	mov	r0, r6
    feac:	e28dd060 	add	sp, sp, #96	; 0x60
    feb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    feb4:	e1a00005 	mov	r0, r5
    feb8:	e59f1144 	ldr	r1, [pc, #324]	; 10004 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    febc:	e3a06000 	mov	r6, #0
    fec0:	eb0008ec 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
    fec4:	e1a00006 	mov	r0, r6
    fec8:	e28dd060 	add	sp, sp, #96	; 0x60
    fecc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fed0:	e5953010 	ldr	r3, [r5, #16]
    fed4:	e3530000 	cmp	r3, #0
    fed8:	1afffff6 	bne	feb8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x33c>
    fedc:	eb00086f 	bl	120a0 <CUSBFunction::GetDevice() const>
    fee0:	e1a07000 	mov	r7, r0
    fee4:	e3a00018 	mov	r0, #24
    fee8:	eb00482a 	bl	21f98 <operator new(unsigned int)>
    feec:	e1a02004 	mov	r2, r4
    fef0:	e1a01007 	mov	r1, r7
    fef4:	e1a06000 	mov	r6, r0
    fef8:	ebfff78c 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
    fefc:	e5856010 	str	r6, [r5, #16]
    ff00:	eaffff28 	b	fba8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
    ff04:	eb0054a7 	bl	251a8 <CLogger::Get()>
    ff08:	e1a02006 	mov	r2, r6
    ff0c:	e59f10f0 	ldr	r1, [pc, #240]	; 10004 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    ff10:	e30b3a8c 	movw	r3, #47756	; 0xba8c
    ff14:	e3403002 	movt	r3, #2
    ff18:	e1a06004 	mov	r6, r4
    ff1c:	eb00557e 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff20:	e1a00006 	mov	r0, r6
    ff24:	e28dd060 	add	sp, sp, #96	; 0x60
    ff28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ff2c:	eb00549d 	bl	251a8 <CLogger::Get()>
    ff30:	e1a02007 	mov	r2, r7
    ff34:	e30b3ac4 	movw	r3, #47812	; 0xbac4
    ff38:	e59f10c4 	ldr	r1, [pc, #196]	; 10004 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    ff3c:	e3403002 	movt	r3, #2
    ff40:	e3a06000 	mov	r6, #0
    ff44:	eb005574 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff48:	eaffffd6 	b	fea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    ff4c:	eb005495 	bl	251a8 <CLogger::Get()>
    ff50:	e1a02006 	mov	r2, r6
    ff54:	e58d4000 	str	r4, [sp]
    ff58:	e30b3af4 	movw	r3, #47860	; 0xbaf4
    ff5c:	e59f10a0 	ldr	r1, [pc, #160]	; 10004 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    ff60:	e3403002 	movt	r3, #2
    ff64:	eb00556c 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff68:	e3a06000 	mov	r6, #0
    ff6c:	eaffffcd 	b	fea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    ff70:	eb00548c 	bl	251a8 <CLogger::Get()>
    ff74:	e1a02007 	mov	r2, r7
    ff78:	e30b3b68 	movw	r3, #47976	; 0xbb68
    ff7c:	e59f1080 	ldr	r1, [pc, #128]	; 10004 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    ff80:	e3403002 	movt	r3, #2
    ff84:	eb005564 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff88:	eaffffc6 	b	fea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    ff8c:	eb005485 	bl	251a8 <CLogger::Get()>
    ff90:	e1a02006 	mov	r2, r6
    ff94:	e30b3adc 	movw	r3, #47836	; 0xbadc
    ff98:	e59f1064 	ldr	r1, [pc, #100]	; 10004 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    ff9c:	e3403002 	movt	r3, #2
    ffa0:	e3a06000 	mov	r6, #0
    ffa4:	eb00555c 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ffa8:	eaffffbe 	b	fea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    ffac:	eb005451 	bl	250f8 <CDeviceNameService::Get()>
    ffb0:	e1a07000 	mov	r7, r0
    ffb4:	e28d0028 	add	r0, sp, #40	; 0x28
    ffb8:	eb005813 	bl	2600c <CString::operator char const*() const>
    ffbc:	e3a03001 	mov	r3, #1
    ffc0:	e1a02005 	mov	r2, r5
    ffc4:	e1a06003 	mov	r6, r3
    ffc8:	e1a01000 	mov	r1, r0
    ffcc:	e1a00007 	mov	r0, r7
    ffd0:	eb0053d4 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    ffd4:	e5943000 	ldr	r3, [r4]
    ffd8:	e0833006 	add	r3, r3, r6
    ffdc:	e5843000 	str	r3, [r4]
    ffe0:	eaffffa7 	b	fe84 <CUSBBulkOnlyMassStorageDevice::Configure()+0x308>
    ffe4:	eb00546f 	bl	251a8 <CLogger::Get()>
    ffe8:	e1a02006 	mov	r2, r6
    ffec:	e30b3b10 	movw	r3, #47888	; 0xbb10
    fff0:	e59f100c 	ldr	r1, [pc, #12]	; 10004 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    fff4:	e3403002 	movt	r3, #2
    fff8:	e3a06000 	mov	r6, #0
    fffc:	eb005546 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10000:	eaffffa8 	b	fea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
   10004:	0002b924 	.word	0x0002b924

00010008 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
   10008:	e12fff1e 	bx	lr

0001000c <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
   1000c:	e3a03000 	mov	r3, #0
   10010:	e5803008 	str	r3, [r0, #8]
   10014:	e12fff1e 	bx	lr

00010018 <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
   10018:	e12fff1e 	bx	lr

0001001c <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
   1001c:	e3a00000 	mov	r0, #0
   10020:	e12fff1e 	bx	lr

00010024 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
   10024:	e92d4010 	push	{r4, lr}
   10028:	e3a01010 	mov	r1, #16
   1002c:	e1a04000 	mov	r4, r0
   10030:	eb0047dc 	bl	21fa8 <operator delete(void*, unsigned int)>
   10034:	e1a00004 	mov	r0, r4
   10038:	e8bd8010 	pop	{r4, pc}

0001003c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
   1003c:	e5903008 	ldr	r3, [r0, #8]
   10040:	e92d4010 	push	{r4, lr}
   10044:	e2433001 	sub	r3, r3, #1
   10048:	e3530004 	cmp	r3, #4
   1004c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   10050:	ea000011 	b	1009c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x60>
   10054:	00010080 	.word	0x00010080
   10058:	00010070 	.word	0x00010070
   1005c:	00010070 	.word	0x00010070
   10060:	00010068 	.word	0x00010068
   10064:	00010068 	.word	0x00010068
   10068:	e3a00000 	mov	r0, #0
   1006c:	e8bd8010 	pop	{r4, pc}
   10070:	e3000271 	movw	r0, #625	; 0x271
   10074:	eb004af0 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
   10078:	e3a00001 	mov	r0, #1
   1007c:	e8bd8010 	pop	{r4, pc}
   10080:	e1a02000 	mov	r2, r0
   10084:	e3a01002 	mov	r1, #2
   10088:	e3a03003 	mov	r3, #3
   1008c:	e5801008 	str	r1, [r0, #8]
   10090:	e3a00001 	mov	r0, #1
   10094:	e582300c 	str	r3, [r2, #12]
   10098:	e8bd8010 	pop	{r4, pc}
   1009c:	e3a0204e 	mov	r2, #78	; 0x4e
   100a0:	e30b1ba0 	movw	r1, #48032	; 0xbba0
   100a4:	e30b0138 	movw	r0, #45368	; 0xb138
   100a8:	e3401002 	movt	r1, #2
   100ac:	e3400002 	movt	r0, #2
   100b0:	eb0052ba 	bl	24ba0 <assertion_failed>
   100b4:	e3a00000 	mov	r0, #0
   100b8:	e8bd8010 	pop	{r4, pc}

000100bc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
   100bc:	e5903008 	ldr	r3, [r0, #8]
   100c0:	e92d4010 	push	{r4, lr}
   100c4:	e3530000 	cmp	r3, #0
   100c8:	e24dd010 	sub	sp, sp, #16
   100cc:	e1a04000 	mov	r4, r0
   100d0:	0a00001b 	beq	10144 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x88>
   100d4:	e2433002 	sub	r3, r3, #2
   100d8:	e3530001 	cmp	r3, #1
   100dc:	9a000007 	bls	10100 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x44>
   100e0:	e30b1ba0 	movw	r1, #48032	; 0xbba0
   100e4:	e30b0138 	movw	r0, #45368	; 0xb138
   100e8:	e3401002 	movt	r1, #2
   100ec:	e3400002 	movt	r0, #2
   100f0:	e3a02083 	mov	r2, #131	; 0x83
   100f4:	e28dd010 	add	sp, sp, #16
   100f8:	e8bd4010 	pop	{r4, lr}
   100fc:	ea0052a7 	b	24ba0 <assertion_failed>
   10100:	e3110001 	tst	r1, #1
   10104:	13a03004 	movne	r3, #4
   10108:	15803008 	strne	r3, [r0, #8]
   1010c:	1a00000a 	bne	1013c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x80>
   10110:	e3110060 	tst	r1, #96	; 0x60
   10114:	1a000016 	bne	10174 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb8>
   10118:	e3110010 	tst	r1, #16
   1011c:	0a00001f 	beq	101a0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xe4>
   10120:	e590300c 	ldr	r3, [r0, #12]
   10124:	e3530000 	cmp	r3, #0
   10128:	e2433001 	sub	r3, r3, #1
   1012c:	e580300c 	str	r3, [r0, #12]
   10130:	0a000017 	beq	10194 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xd8>
   10134:	e3a03003 	mov	r3, #3
   10138:	e5843008 	str	r3, [r4, #8]
   1013c:	e28dd010 	add	sp, sp, #16
   10140:	e8bd8010 	pop	{r4, pc}
   10144:	e3110020 	tst	r1, #32
   10148:	1a000005 	bne	10164 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xa8>
   1014c:	e30b1ba0 	movw	r1, #48032	; 0xbba0
   10150:	e30b0bb8 	movw	r0, #48056	; 0xbbb8
   10154:	e3401002 	movt	r1, #2
   10158:	e3400002 	movt	r0, #2
   1015c:	e3a0205a 	mov	r2, #90	; 0x5a
   10160:	eb00528e 	bl	24ba0 <assertion_failed>
   10164:	e3a03001 	mov	r3, #1
   10168:	e5843008 	str	r3, [r4, #8]
   1016c:	e28dd010 	add	sp, sp, #16
   10170:	e8bd8010 	pop	{r4, pc}
   10174:	e590300c 	ldr	r3, [r0, #12]
   10178:	e3530000 	cmp	r3, #0
   1017c:	e2433001 	sub	r3, r3, #1
   10180:	e580300c 	str	r3, [r0, #12]
   10184:	1affffea 	bne	10134 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
   10188:	e3a03005 	mov	r3, #5
   1018c:	e5843008 	str	r3, [r4, #8]
   10190:	eaffffe9 	b	1013c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x80>
   10194:	e3000271 	movw	r0, #625	; 0x271
   10198:	eb004aa7 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
   1019c:	eafffff9 	b	10188 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xcc>
   101a0:	e58d100c 	str	r1, [sp, #12]
   101a4:	eb0053ff 	bl	251a8 <CLogger::Get()>
   101a8:	e59d100c 	ldr	r1, [sp, #12]
   101ac:	e3a02001 	mov	r2, #1
   101b0:	e30b3bdc 	movw	r3, #48092	; 0xbbdc
   101b4:	e3403002 	movt	r3, #2
   101b8:	e58d1000 	str	r1, [sp]
   101bc:	e30b1bf0 	movw	r1, #48112	; 0xbbf0
   101c0:	e3401002 	movt	r1, #2
   101c4:	eb0054d4 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   101c8:	e30b1ba0 	movw	r1, #48032	; 0xbba0
   101cc:	e30b0138 	movw	r0, #45368	; 0xb138
   101d0:	e3401002 	movt	r1, #2
   101d4:	e3400002 	movt	r0, #2
   101d8:	e3a0207e 	mov	r2, #126	; 0x7e
   101dc:	eaffffc4 	b	100f4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x38>

000101e0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
   101e0:	e59f3048 	ldr	r3, [pc, #72]	; 10230 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x50>
   101e4:	e92d4010 	push	{r4, lr}
   101e8:	e1a04000 	mov	r4, r0
   101ec:	e5803000 	str	r3, [r0]
   101f0:	eb004ace 	bl	22d30 <CTimer::Get()>
   101f4:	e3a03006 	mov	r3, #6
   101f8:	e5843008 	str	r3, [r4, #8]
   101fc:	e3500000 	cmp	r0, #0
   10200:	e5840004 	str	r0, [r4, #4]
   10204:	0a000001 	beq	10210 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x30>
   10208:	e1a00004 	mov	r0, r4
   1020c:	e8bd8010 	pop	{r4, pc}
   10210:	e3a0202a 	mov	r2, #42	; 0x2a
   10214:	e30b1ba0 	movw	r1, #48032	; 0xbba0
   10218:	e30a0990 	movw	r0, #43408	; 0xa990
   1021c:	e3401002 	movt	r1, #2
   10220:	e3400002 	movt	r0, #2
   10224:	eb00525d 	bl	24ba0 <assertion_failed>
   10228:	e1a00004 	mov	r0, r4
   1022c:	e8bd8010 	pop	{r4, pc}
   10230:	0002bb84 	.word	0x0002bb84

00010234 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   10234:	e12fff1e 	bx	lr

00010238 <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
   10238:	e3a02000 	mov	r2, #0
   1023c:	e3a03008 	mov	r3, #8
   10240:	e5802008 	str	r2, [r0, #8]
   10244:	e5803010 	str	r3, [r0, #16]
   10248:	e12fff1e 	bx	lr

0001024c <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
   1024c:	e5900010 	ldr	r0, [r0, #16]
   10250:	e2000001 	and	r0, r0, #1
   10254:	e12fff1e 	bx	lr

00010258 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   10258:	e92d4010 	push	{r4, lr}
   1025c:	e3a01014 	mov	r1, #20
   10260:	e1a04000 	mov	r4, r0
   10264:	eb00474f 	bl	21fa8 <operator delete(void*, unsigned int)>
   10268:	e1a00004 	mov	r0, r4
   1026c:	e8bd8010 	pop	{r4, pc}

00010270 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
   10270:	e92d4010 	push	{r4, lr}
   10274:	e24dd010 	sub	sp, sp, #16
   10278:	e1a04000 	mov	r4, r0
   1027c:	e3001408 	movw	r1, #1032	; 0x408
   10280:	e28d0004 	add	r0, sp, #4
   10284:	e3431f98 	movt	r1, #16280	; 0x3f98
   10288:	ebffefb2 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   1028c:	e5943010 	ldr	r3, [r4, #16]
   10290:	e3530008 	cmp	r3, #8
   10294:	0a000009 	beq	102c0 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x50>
   10298:	e28d0004 	add	r0, sp, #4
   1029c:	ebffefb6 	bl	c17c <CDWHCIRegister::Read()>
   102a0:	e5943010 	ldr	r3, [r4, #16]
   102a4:	e2000007 	and	r0, r0, #7
   102a8:	e1500003 	cmp	r0, r3
   102ac:	1afffff9 	bne	10298 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x28>
   102b0:	e28d0004 	add	r0, sp, #4
   102b4:	ebffefaf 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
   102b8:	e28dd010 	add	sp, sp, #16
   102bc:	e8bd8010 	pop	{r4, pc}
   102c0:	e28d0004 	add	r0, sp, #4
   102c4:	ebffefac 	bl	c17c <CDWHCIRegister::Read()>
   102c8:	e2803001 	add	r3, r0, #1
   102cc:	e2033007 	and	r3, r3, #7
   102d0:	e3530006 	cmp	r3, #6
   102d4:	03a03007 	moveq	r3, #7
   102d8:	e5843010 	str	r3, [r4, #16]
   102dc:	eaffffed 	b	10298 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x28>

000102e0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
   102e0:	e5903008 	ldr	r3, [r0, #8]
   102e4:	e1a02000 	mov	r2, r0
   102e8:	e2433001 	sub	r3, r3, #1
   102ec:	e3530004 	cmp	r3, #4
   102f0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   102f4:	ea000017 	b	10358 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x78>
   102f8:	0001032c 	.word	0x0001032c
   102fc:	00010358 	.word	0x00010358
   10300:	00010314 	.word	0x00010314
   10304:	0001030c 	.word	0x0001030c
   10308:	0001030c 	.word	0x0001030c
   1030c:	e3a00000 	mov	r0, #0
   10310:	e12fff1e 	bx	lr
   10314:	e5903010 	ldr	r3, [r0, #16]
   10318:	e3a00001 	mov	r0, #1
   1031c:	e0833000 	add	r3, r3, r0
   10320:	e2033007 	and	r3, r3, #7
   10324:	e5823010 	str	r3, [r2, #16]
   10328:	e12fff1e 	bx	lr
   1032c:	e5903010 	ldr	r3, [r0, #16]
   10330:	e3a01002 	mov	r1, #2
   10334:	e3a00001 	mov	r0, #1
   10338:	e5821008 	str	r1, [r2, #8]
   1033c:	e3530005 	cmp	r3, #5
   10340:	e0833001 	add	r3, r3, r1
   10344:	e2033007 	and	r3, r3, #7
   10348:	e5823010 	str	r3, [r2, #16]
   1034c:	13a01003 	movne	r1, #3
   10350:	e582100c 	str	r1, [r2, #12]
   10354:	e12fff1e 	bx	lr
   10358:	e92d4010 	push	{r4, lr}
   1035c:	e3a02055 	mov	r2, #85	; 0x55
   10360:	e30b1c1c 	movw	r1, #48156	; 0xbc1c
   10364:	e30b0138 	movw	r0, #45368	; 0xb138
   10368:	e3401002 	movt	r1, #2
   1036c:	e3400002 	movt	r0, #2
   10370:	eb00520a 	bl	24ba0 <assertion_failed>
   10374:	e3a00000 	mov	r0, #0
   10378:	e8bd8010 	pop	{r4, pc}

0001037c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
   1037c:	e5903008 	ldr	r3, [r0, #8]
   10380:	e92d4010 	push	{r4, lr}
   10384:	e3530000 	cmp	r3, #0
   10388:	e24dd010 	sub	sp, sp, #16
   1038c:	e1a04000 	mov	r4, r0
   10390:	0a000018 	beq	103f8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x7c>
   10394:	e2433002 	sub	r3, r3, #2
   10398:	e3530001 	cmp	r3, #1
   1039c:	9a000007 	bls	103c0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x44>
   103a0:	e30b1c1c 	movw	r1, #48156	; 0xbc1c
   103a4:	e30b0138 	movw	r0, #45368	; 0xb138
   103a8:	e3401002 	movt	r1, #2
   103ac:	e3400002 	movt	r0, #2
   103b0:	e3a02085 	mov	r2, #133	; 0x85
   103b4:	e28dd010 	add	sp, sp, #16
   103b8:	e8bd4010 	pop	{r4, lr}
   103bc:	ea0051f7 	b	24ba0 <assertion_failed>
   103c0:	e3110001 	tst	r1, #1
   103c4:	13a03004 	movne	r3, #4
   103c8:	15803008 	strne	r3, [r0, #8]
   103cc:	1a000007 	bne	103f0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x74>
   103d0:	e3110060 	tst	r1, #96	; 0x60
   103d4:	1a000013 	bne	10428 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xac>
   103d8:	e3110010 	tst	r1, #16
   103dc:	0a00001e 	beq	1045c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xe0>
   103e0:	e3000271 	movw	r0, #625	; 0x271
   103e4:	eb004a14 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
   103e8:	e3a03005 	mov	r3, #5
   103ec:	e5843008 	str	r3, [r4, #8]
   103f0:	e28dd010 	add	sp, sp, #16
   103f4:	e8bd8010 	pop	{r4, pc}
   103f8:	e3110020 	tst	r1, #32
   103fc:	1a000005 	bne	10418 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x9c>
   10400:	e30b1c1c 	movw	r1, #48156	; 0xbc1c
   10404:	e30b0bb8 	movw	r0, #48056	; 0xbbb8
   10408:	e3401002 	movt	r1, #2
   1040c:	e3400002 	movt	r0, #2
   10410:	e3a02061 	mov	r2, #97	; 0x61
   10414:	eb0051e1 	bl	24ba0 <assertion_failed>
   10418:	e3a03001 	mov	r3, #1
   1041c:	e5843008 	str	r3, [r4, #8]
   10420:	e28dd010 	add	sp, sp, #16
   10424:	e8bd8010 	pop	{r4, pc}
   10428:	e590300c 	ldr	r3, [r0, #12]
   1042c:	e3530000 	cmp	r3, #0
   10430:	e2433001 	sub	r3, r3, #1
   10434:	e580300c 	str	r3, [r0, #12]
   10438:	13a03003 	movne	r3, #3
   1043c:	15803008 	strne	r3, [r0, #8]
   10440:	1affffea 	bne	103f0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x74>
   10444:	e3a03005 	mov	r3, #5
   10448:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   1044c:	e5843008 	str	r3, [r4, #8]
   10450:	e28dd010 	add	sp, sp, #16
   10454:	e8bd4010 	pop	{r4, lr}
   10458:	ea0049f7 	b	22c3c <CTimer::SimpleusDelay(unsigned int)>
   1045c:	e58d100c 	str	r1, [sp, #12]
   10460:	eb005350 	bl	251a8 <CLogger::Get()>
   10464:	e59d100c 	ldr	r1, [sp, #12]
   10468:	e3a02001 	mov	r2, #1
   1046c:	e30b3bdc 	movw	r3, #48092	; 0xbbdc
   10470:	e3403002 	movt	r3, #2
   10474:	e58d1000 	str	r1, [sp]
   10478:	e30b1bf0 	movw	r1, #48112	; 0xbbf0
   1047c:	e3401002 	movt	r1, #2
   10480:	eb005425 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10484:	e30b1c1c 	movw	r1, #48156	; 0xbc1c
   10488:	e30b0138 	movw	r0, #45368	; 0xb138
   1048c:	e3401002 	movt	r1, #2
   10490:	e3400002 	movt	r0, #2
   10494:	e3a02080 	mov	r2, #128	; 0x80
   10498:	eaffffc5 	b	103b4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x38>

0001049c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
   1049c:	e59f3050 	ldr	r3, [pc, #80]	; 104f4 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x58>
   104a0:	e92d4010 	push	{r4, lr}
   104a4:	e1a04000 	mov	r4, r0
   104a8:	e5803000 	str	r3, [r0]
   104ac:	eb004a1f 	bl	22d30 <CTimer::Get()>
   104b0:	e3a02006 	mov	r2, #6
   104b4:	e3a03008 	mov	r3, #8
   104b8:	e5842008 	str	r2, [r4, #8]
   104bc:	e5843010 	str	r3, [r4, #16]
   104c0:	e3500000 	cmp	r0, #0
   104c4:	e5840004 	str	r0, [r4, #4]
   104c8:	0a000001 	beq	104d4 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x38>
   104cc:	e1a00004 	mov	r0, r4
   104d0:	e8bd8010 	pop	{r4, pc}
   104d4:	e3a0202e 	mov	r2, #46	; 0x2e
   104d8:	e30b1c1c 	movw	r1, #48156	; 0xbc1c
   104dc:	e30a0990 	movw	r0, #43408	; 0xa990
   104e0:	e3401002 	movt	r1, #2
   104e4:	e3400002 	movt	r0, #2
   104e8:	eb0051ac 	bl	24ba0 <assertion_failed>
   104ec:	e1a00004 	mov	r0, r4
   104f0:	e8bd8010 	pop	{r4, pc}
   104f4:	0002bc00 	.word	0x0002bc00

000104f8 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   104f8:	e59f3028 	ldr	r3, [pc, #40]	; 10528 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x30>
   104fc:	e3a02000 	mov	r2, #0
   10500:	e92d4010 	push	{r4, lr}
   10504:	e1a04000 	mov	r4, r0
   10508:	e5842440 	str	r2, [r4, #1088]	; 0x440
   1050c:	e2800020 	add	r0, r0, #32
   10510:	e5843000 	str	r3, [r4]
   10514:	eb001320 	bl	1519c <CKeyboardBehaviour::~CKeyboardBehaviour()>
   10518:	e1a00004 	mov	r0, r4
   1051c:	eb000197 	bl	10b80 <CUSBHIDDevice::~CUSBHIDDevice()>
   10520:	e1a00004 	mov	r0, r4
   10524:	e8bd8010 	pop	{r4, pc}
   10528:	0002bc3c 	.word	0x0002bc3c

0001052c <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   1052c:	e59f3034 	ldr	r3, [pc, #52]	; 10568 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x3c>
   10530:	e3a02000 	mov	r2, #0
   10534:	e92d4010 	push	{r4, lr}
   10538:	e1a04000 	mov	r4, r0
   1053c:	e5842440 	str	r2, [r4, #1088]	; 0x440
   10540:	e2800020 	add	r0, r0, #32
   10544:	e5843000 	str	r3, [r4]
   10548:	eb001313 	bl	1519c <CKeyboardBehaviour::~CKeyboardBehaviour()>
   1054c:	e1a00004 	mov	r0, r4
   10550:	eb00018a 	bl	10b80 <CUSBHIDDevice::~CUSBHIDDevice()>
   10554:	e1a00004 	mov	r0, r4
   10558:	e3a01e45 	mov	r1, #1104	; 0x450
   1055c:	eb004691 	bl	21fa8 <operator delete(void*, unsigned int)>
   10560:	e1a00004 	mov	r0, r4
   10564:	e8bd8010 	pop	{r4, pc}
   10568:	0002bc3c 	.word	0x0002bc3c

0001056c <CUSBKeyboardDevice::ReportHandler(unsigned char const*)>:
   1056c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10570:	e2516000 	subs	r6, r1, #0
   10574:	e24dd004 	sub	sp, sp, #4
   10578:	0a000052 	beq	106c8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x15c>
   1057c:	e5903440 	ldr	r3, [r0, #1088]	; 0x440
   10580:	e3530000 	cmp	r3, #0
   10584:	0a000004 	beq	1059c <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x30>
   10588:	e2861002 	add	r1, r6, #2
   1058c:	e5d60000 	ldrb	r0, [r6]
   10590:	e28dd004 	add	sp, sp, #4
   10594:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10598:	e12fff13 	bx	r3
   1059c:	e1a07000 	mov	r7, r0
   105a0:	e2808020 	add	r8, r0, #32
   105a4:	e1a04003 	mov	r4, r3
   105a8:	e3a05080 	mov	r5, #128	; 0x80
   105ac:	e3a09001 	mov	r9, #1
   105b0:	ea000006 	b	105d0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x64>
   105b4:	e1120003 	tst	r2, r3
   105b8:	1a00003e 	bne	106b8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x14c>
   105bc:	e2844001 	add	r4, r4, #1
   105c0:	e2855001 	add	r5, r5, #1
   105c4:	e3540008 	cmp	r4, #8
   105c8:	e6ef5075 	uxtb	r5, r5
   105cc:	0a00000a 	beq	105fc <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x90>
   105d0:	e5d62000 	ldrb	r2, [r6]
   105d4:	e1a03419 	lsl	r3, r9, r4
   105d8:	e1120003 	tst	r2, r3
   105dc:	e5d72444 	ldrb	r2, [r7, #1092]	; 0x444
   105e0:	0afffff3 	beq	105b4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x48>
   105e4:	e1120003 	tst	r2, r3
   105e8:	1afffff3 	bne	105bc <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x50>
   105ec:	e1a01005 	mov	r1, r5
   105f0:	e1a00008 	mov	r0, r8
   105f4:	eb001356 	bl	15354 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   105f8:	eaffffef 	b	105bc <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x50>
   105fc:	e2874d11 	add	r4, r7, #1088	; 0x440
   10600:	e2868002 	add	r8, r6, #2
   10604:	e286b008 	add	fp, r6, #8
   10608:	e2879020 	add	r9, r7, #32
   1060c:	e1a05004 	mov	r5, r4
   10610:	e2844006 	add	r4, r4, #6
   10614:	e285500c 	add	r5, r5, #12
   10618:	e1a0a004 	mov	sl, r4
   1061c:	e4da1001 	ldrb	r1, [sl], #1
   10620:	e3510000 	cmp	r1, #0
   10624:	0a000007 	beq	10648 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xdc>
   10628:	e1a03008 	mov	r3, r8
   1062c:	e4d32001 	ldrb	r2, [r3], #1
   10630:	e1520001 	cmp	r2, r1
   10634:	0a000003 	beq	10648 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xdc>
   10638:	e153000b 	cmp	r3, fp
   1063c:	1afffffa 	bne	1062c <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xc0>
   10640:	e1a00009 	mov	r0, r9
   10644:	eb001353 	bl	15398 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   10648:	e15a0005 	cmp	sl, r5
   1064c:	1afffff2 	bne	1061c <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xb0>
   10650:	e2869001 	add	r9, r6, #1
   10654:	e286a007 	add	sl, r6, #7
   10658:	e2878020 	add	r8, r7, #32
   1065c:	ea000001 	b	10668 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xfc>
   10660:	e159000a 	cmp	r9, sl
   10664:	0a00000c 	beq	1069c <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x130>
   10668:	e5f91001 	ldrb	r1, [r9, #1]!
   1066c:	e3510000 	cmp	r1, #0
   10670:	11a03004 	movne	r3, r4
   10674:	0afffff9 	beq	10660 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xf4>
   10678:	e4d32001 	ldrb	r2, [r3], #1
   1067c:	e1520001 	cmp	r2, r1
   10680:	0afffff6 	beq	10660 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xf4>
   10684:	e1530005 	cmp	r3, r5
   10688:	1afffffa 	bne	10678 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x10c>
   1068c:	e1a00008 	mov	r0, r8
   10690:	eb00132f 	bl	15354 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   10694:	e159000a 	cmp	r9, sl
   10698:	1afffff2 	bne	10668 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xfc>
   1069c:	e2870d11 	add	r0, r7, #1088	; 0x440
   106a0:	e1a01006 	mov	r1, r6
   106a4:	e2800004 	add	r0, r0, #4
   106a8:	e3a02008 	mov	r2, #8
   106ac:	e28dd004 	add	sp, sp, #4
   106b0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106b4:	ea004ac3 	b	231c8 <memcpy>
   106b8:	e1a01005 	mov	r1, r5
   106bc:	e1a00008 	mov	r0, r8
   106c0:	eb001334 	bl	15398 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   106c4:	eaffffbc 	b	105bc <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x50>
   106c8:	e28dd004 	add	sp, sp, #4
   106cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000106d0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   106d0:	e92d4010 	push	{r4, lr}
   106d4:	e3a02008 	mov	r2, #8
   106d8:	e1a04000 	mov	r4, r0
   106dc:	eb000114 	bl	10b34 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   106e0:	e59f3030 	ldr	r3, [pc, #48]	; 10718 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x48>
   106e4:	e1a00004 	mov	r0, r4
   106e8:	e4803020 	str	r3, [r0], #32
   106ec:	eb00129d 	bl	15168 <CKeyboardBehaviour::CKeyboardBehaviour()>
   106f0:	e2840d11 	add	r0, r4, #1088	; 0x440
   106f4:	e3a01000 	mov	r1, #0
   106f8:	e3e03000 	mvn	r3, #0
   106fc:	e5841440 	str	r1, [r4, #1088]	; 0x440
   10700:	e3a02008 	mov	r2, #8
   10704:	e5c4344c 	strb	r3, [r4, #1100]	; 0x44c
   10708:	e2800004 	add	r0, r0, #4
   1070c:	eb004995 	bl	22d68 <memset>
   10710:	e1a00004 	mov	r0, r4
   10714:	e8bd8010 	pop	{r4, pc}
   10718:	0002bc3c 	.word	0x0002bc3c

0001071c <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   1071c:	e2800020 	add	r0, r0, #32
   10720:	ea0012a7 	b	151c4 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

00010724 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   10724:	e2800020 	add	r0, r0, #32
   10728:	ea0012b3 	b	151fc <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

0001072c <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   1072c:	e2800020 	add	r0, r0, #32
   10730:	ea0012bf 	b	15234 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

00010734 <CUSBKeyboardDevice::GetLEDStatus() const>:
   10734:	e92d4010 	push	{r4, lr}
   10738:	e2800020 	add	r0, r0, #32
   1073c:	eb0012ca 	bl	1526c <CKeyboardBehaviour::GetLEDStatus() const>
   10740:	e2003001 	and	r3, r0, #1
   10744:	e3100002 	tst	r0, #2
   10748:	13833002 	orrne	r3, r3, #2
   1074c:	e3100004 	tst	r0, #4
   10750:	13833004 	orrne	r3, r3, #4
   10754:	e1a00003 	mov	r0, r3
   10758:	e8bd8010 	pop	{r4, pc}

0001075c <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
   1075c:	e92d4070 	push	{r4, r5, r6, lr}
   10760:	e2515000 	subs	r5, r1, #0
   10764:	e1a04000 	mov	r4, r0
   10768:	0a000001 	beq	10774 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x18>
   1076c:	e5845440 	str	r5, [r4, #1088]	; 0x440
   10770:	e8bd8070 	pop	{r4, r5, r6, pc}
   10774:	e30b1c64 	movw	r1, #48228	; 0xbc64
   10778:	e30b0c74 	movw	r0, #48244	; 0xbc74
   1077c:	e3401002 	movt	r1, #2
   10780:	e3400002 	movt	r0, #2
   10784:	e3a02075 	mov	r2, #117	; 0x75
   10788:	eb005104 	bl	24ba0 <assertion_failed>
   1078c:	e5845440 	str	r5, [r4, #1088]	; 0x440
   10790:	e8bd8070 	pop	{r4, r5, r6, pc}

00010794 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   10794:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10798:	e24dd01c 	sub	sp, sp, #28
   1079c:	e28d4018 	add	r4, sp, #24
   107a0:	e1a05000 	mov	r5, r0
   107a4:	e5641004 	strb	r1, [r4, #-4]!
   107a8:	eb00065d 	bl	12124 <CUSBFunction::GetHost() const>
   107ac:	e1a06000 	mov	r6, r0
   107b0:	e1a00005 	mov	r0, r5
   107b4:	eb000649 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
   107b8:	e1a07000 	mov	r7, r0
   107bc:	e1a00005 	mov	r0, r5
   107c0:	eb0006c9 	bl	122ec <CUSBFunction::GetInterfaceNumber() const>
   107c4:	e58d4008 	str	r4, [sp, #8]
   107c8:	e1a01007 	mov	r1, r7
   107cc:	e3a02001 	mov	r2, #1
   107d0:	e3a03c02 	mov	r3, #512	; 0x200
   107d4:	e58d200c 	str	r2, [sp, #12]
   107d8:	e58d3000 	str	r3, [sp]
   107dc:	e3a02021 	mov	r2, #33	; 0x21
   107e0:	e3a03009 	mov	r3, #9
   107e4:	e6ffc070 	uxth	ip, r0
   107e8:	e1a00006 	mov	r0, r6
   107ec:	e58dc004 	str	ip, [sp, #4]
   107f0:	ebfff667 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   107f4:	e1e00000 	mvn	r0, r0
   107f8:	e1a00fa0 	lsr	r0, r0, #31
   107fc:	e28dd01c 	add	sp, sp, #28
   10800:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00010804 <CUSBKeyboardDevice::UpdateLEDs()>:
   10804:	e5902440 	ldr	r2, [r0, #1088]	; 0x440
   10808:	e3520000 	cmp	r2, #0
   1080c:	112fff1e 	bxne	lr
   10810:	e92d4010 	push	{r4, lr}
   10814:	e1a04000 	mov	r4, r0
   10818:	ebffffc5 	bl	10734 <CUSBKeyboardDevice::GetLEDStatus() const>
   1081c:	e5d4344c 	ldrb	r3, [r4, #1100]	; 0x44c
   10820:	e1530000 	cmp	r3, r0
   10824:	08bd8010 	popeq	{r4, pc}
   10828:	e5c4044c 	strb	r0, [r4, #1100]	; 0x44c
   1082c:	e1a01000 	mov	r1, r0
   10830:	e1a00004 	mov	r0, r4
   10834:	ebffffd6 	bl	10794 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   10838:	e3500000 	cmp	r0, #0
   1083c:	18bd8010 	popne	{r4, pc}
   10840:	eb005258 	bl	251a8 <CLogger::Get()>
   10844:	e30b3c90 	movw	r3, #48272	; 0xbc90
   10848:	e3a02001 	mov	r2, #1
   1084c:	e3403002 	movt	r3, #2
   10850:	e59f1004 	ldr	r1, [pc, #4]	; 1085c <CUSBKeyboardDevice::UpdateLEDs()+0x58>
   10854:	e8bd4010 	pop	{r4, lr}
   10858:	ea00532f 	b	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1085c:	0002bc5c 	.word	0x0002bc5c

00010860 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   10860:	e0802002 	add	r2, r0, r2
   10864:	ea000002 	b	10874 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
   10868:	e4d03001 	ldrb	r3, [r0], #1
   1086c:	e1530001 	cmp	r3, r1
   10870:	0a000003 	beq	10884 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
   10874:	e1500002 	cmp	r0, r2
   10878:	1afffffa 	bne	10868 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
   1087c:	e3a00000 	mov	r0, #0
   10880:	e12fff1e 	bx	lr
   10884:	e3a00001 	mov	r0, #1
   10888:	e12fff1e 	bx	lr

0001088c <CUSBKeyboardDevice::Configure()>:
   1088c:	e92d4070 	push	{r4, r5, r6, lr}
   10890:	e3a01000 	mov	r1, #0
   10894:	e24dd010 	sub	sp, sp, #16
   10898:	e1a05000 	mov	r5, r0
   1089c:	eb000124 	bl	10d34 <CUSBHIDDevice::Configure(unsigned int)>
   108a0:	e2504000 	subs	r4, r0, #0
   108a4:	0a000019 	beq	10910 <CUSBKeyboardDevice::Configure()+0x84>
   108a8:	e1a0000d 	mov	r0, sp
   108ac:	e3a04001 	mov	r4, #1
   108b0:	eb0055bf 	bl	25fb4 <CString::CString()>
   108b4:	e3013a1c 	movw	r3, #6684	; 0x1a1c
   108b8:	e3403003 	movt	r3, #3
   108bc:	e1a0000d 	mov	r0, sp
   108c0:	e30b1cc4 	movw	r1, #48324	; 0xbcc4
   108c4:	e3401002 	movt	r1, #2
   108c8:	e5932000 	ldr	r2, [r3]
   108cc:	e082c004 	add	ip, r2, r4
   108d0:	e583c000 	str	ip, [r3]
   108d4:	eb0058c8 	bl	26bfc <CString::Format(char const*, ...)>
   108d8:	eb005206 	bl	250f8 <CDeviceNameService::Get()>
   108dc:	e1a06000 	mov	r6, r0
   108e0:	e1a0000d 	mov	r0, sp
   108e4:	eb0055c8 	bl	2600c <CString::operator char const*() const>
   108e8:	e1a02005 	mov	r2, r5
   108ec:	e3a03000 	mov	r3, #0
   108f0:	e1a01000 	mov	r1, r0
   108f4:	e1a00006 	mov	r0, r6
   108f8:	eb00518a 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   108fc:	e1a0000d 	mov	r0, sp
   10900:	eb005578 	bl	25ee8 <CString::~CString()>
   10904:	e1a00004 	mov	r0, r4
   10908:	e28dd010 	add	sp, sp, #16
   1090c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10910:	eb005224 	bl	251a8 <CLogger::Get()>
   10914:	e3a02001 	mov	r2, #1
   10918:	e59f1014 	ldr	r1, [pc, #20]	; 10934 <CUSBKeyboardDevice::Configure()+0xa8>
   1091c:	e30b3ca8 	movw	r3, #48296	; 0xbca8
   10920:	e3403002 	movt	r3, #2
   10924:	eb0052fc 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10928:	e1a00004 	mov	r0, r4
   1092c:	e28dd010 	add	sp, sp, #16
   10930:	e8bd8070 	pop	{r4, r5, r6, pc}
   10934:	0002bc5c 	.word	0x0002bc5c

00010938 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
   10938:	e3510000 	cmp	r1, #0
   1093c:	e3a03000 	mov	r3, #0
   10940:	e92d4010 	push	{r4, lr}
   10944:	e1a04000 	mov	r4, r0
   10948:	e880000a 	stm	r0, {r1, r3}
   1094c:	0a000001 	beq	10958 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x20>
   10950:	e1a00004 	mov	r0, r4
   10954:	e8bd8010 	pop	{r4, pc}
   10958:	e3a0201f 	mov	r2, #31
   1095c:	e30b1cd4 	movw	r1, #48340	; 0xbcd4
   10960:	e30b0088 	movw	r0, #45192	; 0xb088
   10964:	e3401002 	movt	r1, #2
   10968:	e3400002 	movt	r0, #2
   1096c:	eb00508b 	bl	24ba0 <assertion_failed>
   10970:	e1a00004 	mov	r0, r4
   10974:	e8bd8010 	pop	{r4, pc}

00010978 <CDWHCIRootPort::~CDWHCIRootPort()>:
   10978:	e92d4010 	push	{r4, lr}
   1097c:	e1a04000 	mov	r4, r0
   10980:	e5900004 	ldr	r0, [r0, #4]
   10984:	e3500000 	cmp	r0, #0
   10988:	0a000002 	beq	10998 <CDWHCIRootPort::~CDWHCIRootPort()+0x20>
   1098c:	e5903000 	ldr	r3, [r0]
   10990:	e5933004 	ldr	r3, [r3, #4]
   10994:	e12fff33 	blx	r3
   10998:	e1a00004 	mov	r0, r4
   1099c:	e8bd8010 	pop	{r4, pc}

000109a0 <CDWHCIRootPort::Initialize()>:
   109a0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   109a4:	e1a04000 	mov	r4, r0
   109a8:	e5900000 	ldr	r0, [r0]
   109ac:	e24dd00c 	sub	sp, sp, #12
   109b0:	e3500000 	cmp	r0, #0
   109b4:	0a000056 	beq	10b14 <CDWHCIRootPort::Initialize()+0x174>
   109b8:	ebffe542 	bl	9ec8 <CDWHCIDevice::GetPortSpeed()>
   109bc:	e3500003 	cmp	r0, #3
   109c0:	e1a06000 	mov	r6, r0
   109c4:	0a000049 	beq	10af0 <CDWHCIRootPort::Initialize()+0x150>
   109c8:	e5943004 	ldr	r3, [r4, #4]
   109cc:	e3530000 	cmp	r3, #0
   109d0:	0a000005 	beq	109ec <CDWHCIRootPort::Initialize()+0x4c>
   109d4:	e30b1cd4 	movw	r1, #48340	; 0xbcd4
   109d8:	e30b0d04 	movw	r0, #48388	; 0xbd04
   109dc:	e3401002 	movt	r1, #2
   109e0:	e3400002 	movt	r0, #2
   109e4:	e3a02036 	mov	r2, #54	; 0x36
   109e8:	eb00506c 	bl	24ba0 <assertion_failed>
   109ec:	e3a0004c 	mov	r0, #76	; 0x4c
   109f0:	e3a05001 	mov	r5, #1
   109f4:	eb004567 	bl	21f98 <operator new(unsigned int)>
   109f8:	e5941000 	ldr	r1, [r4]
   109fc:	e3a03000 	mov	r3, #0
   10a00:	e1a02006 	mov	r2, r6
   10a04:	e88d0028 	stm	sp, {r3, r5}
   10a08:	e1a07000 	mov	r7, r0
   10a0c:	ebfff11e 	bl	ce8c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)>
   10a10:	e5847004 	str	r7, [r4, #4]
   10a14:	e1a00007 	mov	r0, r7
   10a18:	ebfff294 	bl	d470 <CUSBDevice::Initialize()>
   10a1c:	e3500000 	cmp	r0, #0
   10a20:	e5940004 	ldr	r0, [r4, #4]
   10a24:	1a000008 	bne	10a4c <CDWHCIRootPort::Initialize()+0xac>
   10a28:	e3500000 	cmp	r0, #0
   10a2c:	0a000002 	beq	10a3c <CDWHCIRootPort::Initialize()+0x9c>
   10a30:	e5903000 	ldr	r3, [r0]
   10a34:	e5933004 	ldr	r3, [r3, #4]
   10a38:	e12fff33 	blx	r3
   10a3c:	e3a00000 	mov	r0, #0
   10a40:	e5840004 	str	r0, [r4, #4]
   10a44:	e28dd00c 	add	sp, sp, #12
   10a48:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10a4c:	e5903000 	ldr	r3, [r0]
   10a50:	e593300c 	ldr	r3, [r3, #12]
   10a54:	e12fff33 	blx	r3
   10a58:	e3500000 	cmp	r0, #0
   10a5c:	0a000018 	beq	10ac4 <CDWHCIRootPort::Initialize()+0x124>
   10a60:	eb0051d0 	bl	251a8 <CLogger::Get()>
   10a64:	e3a02004 	mov	r2, #4
   10a68:	e30b3d2c 	movw	r3, #48428	; 0xbd2c
   10a6c:	e30b1ccc 	movw	r1, #48332	; 0xbccc
   10a70:	e3403002 	movt	r3, #2
   10a74:	e3401002 	movt	r1, #2
   10a78:	eb0052a7 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10a7c:	e5940000 	ldr	r0, [r4]
   10a80:	ebffe523 	bl	9f14 <CDWHCIDevice::OvercurrentDetected()>
   10a84:	e3500000 	cmp	r0, #0
   10a88:	01a00005 	moveq	r0, r5
   10a8c:	0affffec 	beq	10a44 <CDWHCIRootPort::Initialize()+0xa4>
   10a90:	eb0051c4 	bl	251a8 <CLogger::Get()>
   10a94:	e1a02005 	mov	r2, r5
   10a98:	e30b3d40 	movw	r3, #48448	; 0xbd40
   10a9c:	e30b1ccc 	movw	r1, #48332	; 0xbccc
   10aa0:	e3403002 	movt	r3, #2
   10aa4:	e3401002 	movt	r1, #2
   10aa8:	eb00529b 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10aac:	e5940000 	ldr	r0, [r4]
   10ab0:	ebffe525 	bl	9f4c <CDWHCIDevice::DisableRootPort()>
   10ab4:	e5940004 	ldr	r0, [r4, #4]
   10ab8:	e3500000 	cmp	r0, #0
   10abc:	1affffdb 	bne	10a30 <CDWHCIRootPort::Initialize()+0x90>
   10ac0:	eaffffdd 	b	10a3c <CDWHCIRootPort::Initialize()+0x9c>
   10ac4:	eb0051b7 	bl	251a8 <CLogger::Get()>
   10ac8:	e30b3d14 	movw	r3, #48404	; 0xbd14
   10acc:	e30b1ccc 	movw	r1, #48332	; 0xbccc
   10ad0:	e3403002 	movt	r3, #2
   10ad4:	e3401002 	movt	r1, #2
   10ad8:	e3a02002 	mov	r2, #2
   10adc:	eb00528e 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10ae0:	e5940004 	ldr	r0, [r4, #4]
   10ae4:	e3500000 	cmp	r0, #0
   10ae8:	1affffd0 	bne	10a30 <CDWHCIRootPort::Initialize()+0x90>
   10aec:	eaffffd2 	b	10a3c <CDWHCIRootPort::Initialize()+0x9c>
   10af0:	eb0051ac 	bl	251a8 <CLogger::Get()>
   10af4:	e30b3ce8 	movw	r3, #48360	; 0xbce8
   10af8:	e30b1ccc 	movw	r1, #48332	; 0xbccc
   10afc:	e3403002 	movt	r3, #2
   10b00:	e3401002 	movt	r1, #2
   10b04:	e3a02001 	mov	r2, #1
   10b08:	eb005283 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10b0c:	e3a00000 	mov	r0, #0
   10b10:	eaffffcb 	b	10a44 <CDWHCIRootPort::Initialize()+0xa4>
   10b14:	e30b1cd4 	movw	r1, #48340	; 0xbcd4
   10b18:	e30b0088 	movw	r0, #45192	; 0xb088
   10b1c:	e3401002 	movt	r1, #2
   10b20:	e3400002 	movt	r0, #2
   10b24:	e3a0202c 	mov	r2, #44	; 0x2c
   10b28:	eb00501c 	bl	24ba0 <assertion_failed>
   10b2c:	e5940000 	ldr	r0, [r4]
   10b30:	eaffffa0 	b	109b8 <CDWHCIRootPort::Initialize()+0x18>

00010b34 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   10b34:	e92d4070 	push	{r4, r5, r6, lr}
   10b38:	e1a04000 	mov	r4, r0
   10b3c:	e1a05002 	mov	r5, r2
   10b40:	eb0004e7 	bl	11ee4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   10b44:	e59f2030 	ldr	r2, [pc, #48]	; 10b7c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x48>
   10b48:	e3550000 	cmp	r5, #0
   10b4c:	e3a03000 	mov	r3, #0
   10b50:	e5845010 	str	r5, [r4, #16]
   10b54:	e5843014 	str	r3, [r4, #20]
   10b58:	e5842000 	str	r2, [r4]
   10b5c:	e5843018 	str	r3, [r4, #24]
   10b60:	e584301c 	str	r3, [r4, #28]
   10b64:	0a000002 	beq	10b74 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x40>
   10b68:	e1a00005 	mov	r0, r5
   10b6c:	eb00450a 	bl	21f9c <operator new[](unsigned int)>
   10b70:	e584001c 	str	r0, [r4, #28]
   10b74:	e1a00004 	mov	r0, r4
   10b78:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b7c:	0002bd60 	.word	0x0002bd60

00010b80 <CUSBHIDDevice::~CUSBHIDDevice()>:
   10b80:	e92d4070 	push	{r4, r5, r6, lr}
   10b84:	e1a04000 	mov	r4, r0
   10b88:	e590001c 	ldr	r0, [r0, #28]
   10b8c:	e59f304c 	ldr	r3, [pc, #76]	; 10be0 <CUSBHIDDevice::~CUSBHIDDevice()+0x60>
   10b90:	e3500000 	cmp	r0, #0
   10b94:	e5843000 	str	r3, [r4]
   10b98:	0a000000 	beq	10ba0 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   10b9c:	eb004500 	bl	21fa4 <operator delete[](void*)>
   10ba0:	e5945014 	ldr	r5, [r4, #20]
   10ba4:	e3a03000 	mov	r3, #0
   10ba8:	e584301c 	str	r3, [r4, #28]
   10bac:	e1550003 	cmp	r5, r3
   10bb0:	0a000004 	beq	10bc8 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   10bb4:	e1a00005 	mov	r0, r5
   10bb8:	ebfff4ef 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
   10bbc:	e1a00005 	mov	r0, r5
   10bc0:	e3a01018 	mov	r1, #24
   10bc4:	eb0044f7 	bl	21fa8 <operator delete(void*, unsigned int)>
   10bc8:	e3a03000 	mov	r3, #0
   10bcc:	e1a00004 	mov	r0, r4
   10bd0:	e5843014 	str	r3, [r4, #20]
   10bd4:	eb000471 	bl	11da0 <CUSBFunction::~CUSBFunction()>
   10bd8:	e1a00004 	mov	r0, r4
   10bdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   10be0:	0002bd60 	.word	0x0002bd60

00010be4 <CUSBHIDDevice::~CUSBHIDDevice()>:
   10be4:	e92d4010 	push	{r4, lr}
   10be8:	e1a04000 	mov	r4, r0
   10bec:	ebffffe3 	bl	10b80 <CUSBHIDDevice::~CUSBHIDDevice()>
   10bf0:	e1a00004 	mov	r0, r4
   10bf4:	e3a01020 	mov	r1, #32
   10bf8:	eb0044ea 	bl	21fa8 <operator delete(void*, unsigned int)>
   10bfc:	e1a00004 	mov	r0, r4
   10c00:	e8bd8010 	pop	{r4, pc}

00010c04 <CUSBHIDDevice::StartRequest()>:
   10c04:	e5903014 	ldr	r3, [r0, #20]
   10c08:	e92d4070 	push	{r4, r5, r6, lr}
   10c0c:	e3530000 	cmp	r3, #0
   10c10:	e24dd008 	sub	sp, sp, #8
   10c14:	e1a04000 	mov	r4, r0
   10c18:	0a00003e 	beq	10d18 <CUSBHIDDevice::StartRequest()+0x114>
   10c1c:	e594301c 	ldr	r3, [r4, #28]
   10c20:	e3530000 	cmp	r3, #0
   10c24:	0a000034 	beq	10cfc <CUSBHIDDevice::StartRequest()+0xf8>
   10c28:	e5943018 	ldr	r3, [r4, #24]
   10c2c:	e3530000 	cmp	r3, #0
   10c30:	0a000005 	beq	10c4c <CUSBHIDDevice::StartRequest()+0x48>
   10c34:	e30b1d88 	movw	r1, #48520	; 0xbd88
   10c38:	e30b0dcc 	movw	r0, #48588	; 0xbdcc
   10c3c:	e3401002 	movt	r1, #2
   10c40:	e3400002 	movt	r0, #2
   10c44:	e3a02077 	mov	r2, #119	; 0x77
   10c48:	eb004fd4 	bl	24ba0 <assertion_failed>
   10c4c:	e5945010 	ldr	r5, [r4, #16]
   10c50:	e3550000 	cmp	r5, #0
   10c54:	0a000017 	beq	10cb8 <CUSBHIDDevice::StartRequest()+0xb4>
   10c58:	e3a00028 	mov	r0, #40	; 0x28
   10c5c:	eb0044cd 	bl	21f98 <operator new(unsigned int)>
   10c60:	e5943010 	ldr	r3, [r4, #16]
   10c64:	e3a0c000 	mov	ip, #0
   10c68:	e594201c 	ldr	r2, [r4, #28]
   10c6c:	e5941014 	ldr	r1, [r4, #20]
   10c70:	e58dc000 	str	ip, [sp]
   10c74:	e1a05000 	mov	r5, r0
   10c78:	ebfff5bb 	bl	e36c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   10c7c:	e1a00005 	mov	r0, r5
   10c80:	e5845018 	str	r5, [r4, #24]
   10c84:	e1a03004 	mov	r3, r4
   10c88:	e3a02000 	mov	r2, #0
   10c8c:	e3011044 	movw	r1, #4164	; 0x1044
   10c90:	e3401001 	movt	r1, #1
   10c94:	ebfff62b 	bl	e548 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   10c98:	e1a00004 	mov	r0, r4
   10c9c:	eb000520 	bl	12124 <CUSBFunction::GetHost() const>
   10ca0:	e5941018 	ldr	r1, [r4, #24]
   10ca4:	e5903000 	ldr	r3, [r0]
   10ca8:	e593300c 	ldr	r3, [r3, #12]
   10cac:	e28dd008 	add	sp, sp, #8
   10cb0:	e8bd4070 	pop	{r4, r5, r6, lr}
   10cb4:	e12fff13 	bx	r3
   10cb8:	e3a02078 	mov	r2, #120	; 0x78
   10cbc:	e30b1d88 	movw	r1, #48520	; 0xbd88
   10cc0:	e30b0dd8 	movw	r0, #48600	; 0xbdd8
   10cc4:	e3401002 	movt	r1, #2
   10cc8:	e3400002 	movt	r0, #2
   10ccc:	eb004fb3 	bl	24ba0 <assertion_failed>
   10cd0:	e3a00028 	mov	r0, #40	; 0x28
   10cd4:	eb0044af 	bl	21f98 <operator new(unsigned int)>
   10cd8:	e5943010 	ldr	r3, [r4, #16]
   10cdc:	e594201c 	ldr	r2, [r4, #28]
   10ce0:	e5941014 	ldr	r1, [r4, #20]
   10ce4:	e58d5000 	str	r5, [sp]
   10ce8:	e1a06000 	mov	r6, r0
   10cec:	ebfff59e 	bl	e36c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   10cf0:	e1a00006 	mov	r0, r6
   10cf4:	e5846018 	str	r6, [r4, #24]
   10cf8:	eaffffe1 	b	10c84 <CUSBHIDDevice::StartRequest()+0x80>
   10cfc:	e30b1d88 	movw	r1, #48520	; 0xbd88
   10d00:	e30b0db4 	movw	r0, #48564	; 0xbdb4
   10d04:	e3401002 	movt	r1, #2
   10d08:	e3400002 	movt	r0, #2
   10d0c:	e3a02075 	mov	r2, #117	; 0x75
   10d10:	eb004fa2 	bl	24ba0 <assertion_failed>
   10d14:	eaffffc3 	b	10c28 <CUSBHIDDevice::StartRequest()+0x24>
   10d18:	e30b1d88 	movw	r1, #48520	; 0xbd88
   10d1c:	e30b0d9c 	movw	r0, #48540	; 0xbd9c
   10d20:	e3401002 	movt	r1, #2
   10d24:	e3400002 	movt	r0, #2
   10d28:	e3a02074 	mov	r2, #116	; 0x74
   10d2c:	eb004f9b 	bl	24ba0 <assertion_failed>
   10d30:	eaffffb9 	b	10c1c <CUSBHIDDevice::StartRequest()+0x18>

00010d34 <CUSBHIDDevice::Configure(unsigned int)>:
   10d34:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10d38:	e24dd010 	sub	sp, sp, #16
   10d3c:	e1a07001 	mov	r7, r1
   10d40:	e1a05000 	mov	r5, r0
   10d44:	eb0004c5 	bl	12060 <CUSBFunction::GetNumEndpoints() const>
   10d48:	e3500000 	cmp	r0, #0
   10d4c:	0a000031 	beq	10e18 <CUSBHIDDevice::Configure(unsigned int)+0xe4>
   10d50:	e3a01005 	mov	r1, #5
   10d54:	e1a00005 	mov	r0, r5
   10d58:	eb000533 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
   10d5c:	e2504000 	subs	r4, r0, #0
   10d60:	0a00002c 	beq	10e18 <CUSBHIDDevice::Configure(unsigned int)+0xe4>
   10d64:	e1d430d2 	ldrsb	r3, [r4, #2]
   10d68:	e3530000 	cmp	r3, #0
   10d6c:	aafffff7 	bge	10d50 <CUSBHIDDevice::Configure(unsigned int)+0x1c>
   10d70:	e5d43003 	ldrb	r3, [r4, #3]
   10d74:	e203303f 	and	r3, r3, #63	; 0x3f
   10d78:	e3530003 	cmp	r3, #3
   10d7c:	1afffff3 	bne	10d50 <CUSBHIDDevice::Configure(unsigned int)+0x1c>
   10d80:	e5953014 	ldr	r3, [r5, #20]
   10d84:	e3530000 	cmp	r3, #0
   10d88:	0a000005 	beq	10da4 <CUSBHIDDevice::Configure(unsigned int)+0x70>
   10d8c:	e30b1d88 	movw	r1, #48520	; 0xbd88
   10d90:	e30b0dec 	movw	r0, #48620	; 0xbdec
   10d94:	e3401002 	movt	r1, #2
   10d98:	e3400002 	movt	r0, #2
   10d9c:	e3a0204d 	mov	r2, #77	; 0x4d
   10da0:	eb004f7e 	bl	24ba0 <assertion_failed>
   10da4:	e1a00005 	mov	r0, r5
   10da8:	eb0004bc 	bl	120a0 <CUSBFunction::GetDevice() const>
   10dac:	e1a08000 	mov	r8, r0
   10db0:	e3a00018 	mov	r0, #24
   10db4:	eb004477 	bl	21f98 <operator new(unsigned int)>
   10db8:	e1a02004 	mov	r2, r4
   10dbc:	e1a01008 	mov	r1, r8
   10dc0:	e1a06000 	mov	r6, r0
   10dc4:	ebfff3d9 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   10dc8:	e5856014 	str	r6, [r5, #20]
   10dcc:	e1a00005 	mov	r0, r5
   10dd0:	eb0004e4 	bl	12168 <CUSBFunction::Configure()>
   10dd4:	e3500000 	cmp	r0, #0
   10dd8:	0a000027 	beq	10e7c <CUSBHIDDevice::Configure(unsigned int)+0x148>
   10ddc:	e1a00005 	mov	r0, r5
   10de0:	eb000551 	bl	1232c <CUSBFunction::GetInterfaceSubClass() const>
   10de4:	e3500001 	cmp	r0, #1
   10de8:	e1a04000 	mov	r4, r0
   10dec:	0a000032 	beq	10ebc <CUSBHIDDevice::Configure(unsigned int)+0x188>
   10df0:	e5953010 	ldr	r3, [r5, #16]
   10df4:	e3530000 	cmp	r3, #0
   10df8:	0a00000c 	beq	10e30 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   10dfc:	e595301c 	ldr	r3, [r5, #28]
   10e00:	e3530000 	cmp	r3, #0
   10e04:	0a000048 	beq	10f2c <CUSBHIDDevice::Configure(unsigned int)+0x1f8>
   10e08:	e1a00005 	mov	r0, r5
   10e0c:	e28dd010 	add	sp, sp, #16
   10e10:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   10e14:	eaffff7a 	b	10c04 <CUSBHIDDevice::StartRequest()>
   10e18:	e1a00005 	mov	r0, r5
   10e1c:	e59f1124 	ldr	r1, [pc, #292]	; 10f48 <CUSBHIDDevice::Configure(unsigned int)+0x214>
   10e20:	eb000514 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   10e24:	e3a00000 	mov	r0, #0
   10e28:	e28dd010 	add	sp, sp, #16
   10e2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10e30:	e3570000 	cmp	r7, #0
   10e34:	e5857010 	str	r7, [r5, #16]
   10e38:	0a000018 	beq	10ea0 <CUSBHIDDevice::Configure(unsigned int)+0x16c>
   10e3c:	e595301c 	ldr	r3, [r5, #28]
   10e40:	e3530000 	cmp	r3, #0
   10e44:	0a000005 	beq	10e60 <CUSBHIDDevice::Configure(unsigned int)+0x12c>
   10e48:	e30b1d88 	movw	r1, #48520	; 0xbd88
   10e4c:	e30b0e20 	movw	r0, #48672	; 0xbe20
   10e50:	e3401002 	movt	r1, #2
   10e54:	e3400002 	movt	r0, #2
   10e58:	e3a0206a 	mov	r2, #106	; 0x6a
   10e5c:	eb004f4f 	bl	24ba0 <assertion_failed>
   10e60:	e5950010 	ldr	r0, [r5, #16]
   10e64:	eb00444c 	bl	21f9c <operator new[](unsigned int)>
   10e68:	e585001c 	str	r0, [r5, #28]
   10e6c:	e1a00005 	mov	r0, r5
   10e70:	e28dd010 	add	sp, sp, #16
   10e74:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   10e78:	eaffff61 	b	10c04 <CUSBHIDDevice::StartRequest()>
   10e7c:	eb0050c9 	bl	251a8 <CLogger::Get()>
   10e80:	e3a02001 	mov	r2, #1
   10e84:	e59f10bc 	ldr	r1, [pc, #188]	; 10f48 <CUSBHIDDevice::Configure(unsigned int)+0x214>
   10e88:	e30b3888 	movw	r3, #47240	; 0xb888
   10e8c:	e3403002 	movt	r3, #2
   10e90:	eb0051a1 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10e94:	e3a00000 	mov	r0, #0
   10e98:	e28dd010 	add	sp, sp, #16
   10e9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10ea0:	e30b1d88 	movw	r1, #48520	; 0xbd88
   10ea4:	e30b0dd8 	movw	r0, #48600	; 0xbdd8
   10ea8:	e3401002 	movt	r1, #2
   10eac:	e3400002 	movt	r0, #2
   10eb0:	e3a02068 	mov	r2, #104	; 0x68
   10eb4:	eb004f39 	bl	24ba0 <assertion_failed>
   10eb8:	eaffffdf 	b	10e3c <CUSBHIDDevice::Configure(unsigned int)+0x108>
   10ebc:	e1a00005 	mov	r0, r5
   10ec0:	eb000497 	bl	12124 <CUSBFunction::GetHost() const>
   10ec4:	e1a06000 	mov	r6, r0
   10ec8:	e1a00005 	mov	r0, r5
   10ecc:	eb000483 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
   10ed0:	e1a08000 	mov	r8, r0
   10ed4:	e1a00005 	mov	r0, r5
   10ed8:	eb000503 	bl	122ec <CUSBFunction::GetInterfaceNumber() const>
   10edc:	e3a02000 	mov	r2, #0
   10ee0:	e1a01008 	mov	r1, r8
   10ee4:	e58d200c 	str	r2, [sp, #12]
   10ee8:	e58d2008 	str	r2, [sp, #8]
   10eec:	e3a0300b 	mov	r3, #11
   10ef0:	e58d2000 	str	r2, [sp]
   10ef4:	e3a02021 	mov	r2, #33	; 0x21
   10ef8:	e6ffc070 	uxth	ip, r0
   10efc:	e1a00006 	mov	r0, r6
   10f00:	e58dc004 	str	ip, [sp, #4]
   10f04:	ebfff4a2 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10f08:	e3500000 	cmp	r0, #0
   10f0c:	aaffffb7 	bge	10df0 <CUSBHIDDevice::Configure(unsigned int)+0xbc>
   10f10:	eb0050a4 	bl	251a8 <CLogger::Get()>
   10f14:	e1a02004 	mov	r2, r4
   10f18:	e30b3e04 	movw	r3, #48644	; 0xbe04
   10f1c:	e59f1024 	ldr	r1, [pc, #36]	; 10f48 <CUSBHIDDevice::Configure(unsigned int)+0x214>
   10f20:	e3403002 	movt	r3, #2
   10f24:	eb00517c 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10f28:	eaffffbd 	b	10e24 <CUSBHIDDevice::Configure(unsigned int)+0xf0>
   10f2c:	e30b1d88 	movw	r1, #48520	; 0xbd88
   10f30:	e30b0db4 	movw	r0, #48564	; 0xbdb4
   10f34:	e3401002 	movt	r1, #2
   10f38:	e3400002 	movt	r0, #2
   10f3c:	e3a0206d 	mov	r2, #109	; 0x6d
   10f40:	eb004f16 	bl	24ba0 <assertion_failed>
   10f44:	eaffffaf 	b	10e08 <CUSBHIDDevice::Configure(unsigned int)+0xd4>
   10f48:	0002bd80 	.word	0x0002bd80

00010f4c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   10f4c:	e92d4070 	push	{r4, r5, r6, lr}
   10f50:	e2515000 	subs	r5, r1, #0
   10f54:	e1a04000 	mov	r4, r0
   10f58:	0a000031 	beq	11024 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   10f5c:	e5943018 	ldr	r3, [r4, #24]
   10f60:	e1550003 	cmp	r5, r3
   10f64:	0a000005 	beq	10f80 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x34>
   10f68:	e30b1d88 	movw	r1, #48520	; 0xbd88
   10f6c:	e30b0e38 	movw	r0, #48696	; 0xbe38
   10f70:	e3401002 	movt	r1, #2
   10f74:	e3400002 	movt	r0, #2
   10f78:	e3a02083 	mov	r2, #131	; 0x83
   10f7c:	eb004f07 	bl	24ba0 <assertion_failed>
   10f80:	e1a00005 	mov	r0, r5
   10f84:	ebfff533 	bl	e458 <CUSBRequest::GetStatus() const>
   10f88:	e3500000 	cmp	r0, #0
   10f8c:	1a000019 	bne	10ff8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xac>
   10f90:	e5943000 	ldr	r3, [r4]
   10f94:	e3a01000 	mov	r1, #0
   10f98:	e1a00004 	mov	r0, r4
   10f9c:	e593301c 	ldr	r3, [r3, #28]
   10fa0:	e12fff33 	blx	r3
   10fa4:	e5945018 	ldr	r5, [r4, #24]
   10fa8:	e3550000 	cmp	r5, #0
   10fac:	0a000004 	beq	10fc4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x78>
   10fb0:	e1a00005 	mov	r0, r5
   10fb4:	ebfff512 	bl	e404 <CUSBRequest::~CUSBRequest()>
   10fb8:	e1a00005 	mov	r0, r5
   10fbc:	e3a01028 	mov	r1, #40	; 0x28
   10fc0:	eb0043f8 	bl	21fa8 <operator delete(void*, unsigned int)>
   10fc4:	e3a03000 	mov	r3, #0
   10fc8:	e1a00004 	mov	r0, r4
   10fcc:	e5843018 	str	r3, [r4, #24]
   10fd0:	ebffff0b 	bl	10c04 <CUSBHIDDevice::StartRequest()>
   10fd4:	e3500000 	cmp	r0, #0
   10fd8:	18bd8070 	popne	{r4, r5, r6, pc}
   10fdc:	eb005071 	bl	251a8 <CLogger::Get()>
   10fe0:	e30b3e48 	movw	r3, #48712	; 0xbe48
   10fe4:	e3a02001 	mov	r2, #1
   10fe8:	e3403002 	movt	r3, #2
   10fec:	e59f104c 	ldr	r1, [pc, #76]	; 11040 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   10ff0:	e8bd4070 	pop	{r4, r5, r6, lr}
   10ff4:	ea005148 	b	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10ff8:	e1a00005 	mov	r0, r5
   10ffc:	ebfff517 	bl	e460 <CUSBRequest::GetResultLength() const>
   11000:	e5943010 	ldr	r3, [r4, #16]
   11004:	e1500003 	cmp	r0, r3
   11008:	1affffe0 	bne	10f90 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x44>
   1100c:	e5943000 	ldr	r3, [r4]
   11010:	e1a00004 	mov	r0, r4
   11014:	e594101c 	ldr	r1, [r4, #28]
   11018:	e593301c 	ldr	r3, [r3, #28]
   1101c:	e12fff33 	blx	r3
   11020:	eaffffdf 	b	10fa4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x58>
   11024:	e30b1d88 	movw	r1, #48520	; 0xbd88
   11028:	e30a0a2c 	movw	r0, #43564	; 0xaa2c
   1102c:	e3401002 	movt	r1, #2
   11030:	e3400002 	movt	r0, #2
   11034:	e3a02082 	mov	r2, #130	; 0x82
   11038:	eb004ed8 	bl	24ba0 <assertion_failed>
   1103c:	eaffffc6 	b	10f5c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x10>
   11040:	0002bd80 	.word	0x0002bd80

00011044 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   11044:	e92d4070 	push	{r4, r5, r6, lr}
   11048:	e2524000 	subs	r4, r2, #0
   1104c:	e1a05000 	mov	r5, r0
   11050:	0a000003 	beq	11064 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   11054:	e1a01005 	mov	r1, r5
   11058:	e1a00004 	mov	r0, r4
   1105c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11060:	eaffffb9 	b	10f4c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   11064:	e30b1d88 	movw	r1, #48520	; 0xbd88
   11068:	e30a0940 	movw	r0, #43328	; 0xa940
   1106c:	e3401002 	movt	r1, #2
   11070:	e3400002 	movt	r0, #2
   11074:	e3a0209b 	mov	r2, #155	; 0x9b
   11078:	eb004ec8 	bl	24ba0 <assertion_failed>
   1107c:	e1a01005 	mov	r1, r5
   11080:	e1a00004 	mov	r0, r4
   11084:	e8bd4070 	pop	{r4, r5, r6, lr}
   11088:	eaffffaf 	b	10f4c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>

0001108c <CUSBMouseDevice::~CUSBMouseDevice()>:
   1108c:	e59f3028 	ldr	r3, [pc, #40]	; 110bc <CUSBMouseDevice::~CUSBMouseDevice()+0x30>
   11090:	e3a02000 	mov	r2, #0
   11094:	e92d4010 	push	{r4, lr}
   11098:	e1a04000 	mov	r4, r0
   1109c:	e584203c 	str	r2, [r4, #60]	; 0x3c
   110a0:	e2800020 	add	r0, r0, #32
   110a4:	e5843000 	str	r3, [r4]
   110a8:	eb001205 	bl	158c4 <CMouseBehaviour::~CMouseBehaviour()>
   110ac:	e1a00004 	mov	r0, r4
   110b0:	ebfffeb2 	bl	10b80 <CUSBHIDDevice::~CUSBHIDDevice()>
   110b4:	e1a00004 	mov	r0, r4
   110b8:	e8bd8010 	pop	{r4, pc}
   110bc:	0002be68 	.word	0x0002be68

000110c0 <CUSBMouseDevice::~CUSBMouseDevice()>:
   110c0:	e59f3034 	ldr	r3, [pc, #52]	; 110fc <CUSBMouseDevice::~CUSBMouseDevice()+0x3c>
   110c4:	e3a02000 	mov	r2, #0
   110c8:	e92d4010 	push	{r4, lr}
   110cc:	e1a04000 	mov	r4, r0
   110d0:	e584203c 	str	r2, [r4, #60]	; 0x3c
   110d4:	e2800020 	add	r0, r0, #32
   110d8:	e5843000 	str	r3, [r4]
   110dc:	eb0011f8 	bl	158c4 <CMouseBehaviour::~CMouseBehaviour()>
   110e0:	e1a00004 	mov	r0, r4
   110e4:	ebfffea5 	bl	10b80 <CUSBHIDDevice::~CUSBHIDDevice()>
   110e8:	e1a00004 	mov	r0, r4
   110ec:	e3a01040 	mov	r1, #64	; 0x40
   110f0:	eb0043ac 	bl	21fa8 <operator delete(void*, unsigned int)>
   110f4:	e1a00004 	mov	r0, r4
   110f8:	e8bd8010 	pop	{r4, pc}
   110fc:	0002be68 	.word	0x0002be68

00011100 <CUSBMouseDevice::ReportHandler(unsigned char const*)>:
   11100:	e92d4070 	push	{r4, r5, r6, lr}
   11104:	e2514000 	subs	r4, r1, #0
   11108:	08bd8070 	popeq	{r4, r5, r6, pc}
   1110c:	e5d43000 	ldrb	r3, [r4]
   11110:	e1a05000 	mov	r5, r0
   11114:	e1d420d1 	ldrsb	r2, [r4, #1]
   11118:	e2800020 	add	r0, r0, #32
   1111c:	e2036001 	and	r6, r3, #1
   11120:	e3130002 	tst	r3, #2
   11124:	13866002 	orrne	r6, r6, #2
   11128:	e3130004 	tst	r3, #4
   1112c:	13866004 	orrne	r6, r6, #4
   11130:	e1d430d2 	ldrsb	r3, [r4, #2]
   11134:	e1a01006 	mov	r1, r6
   11138:	eb0012b8 	bl	15c20 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   1113c:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   11140:	e3530000 	cmp	r3, #0
   11144:	08bd8070 	popeq	{r4, r5, r6, pc}
   11148:	e1a00006 	mov	r0, r6
   1114c:	e1d420d2 	ldrsb	r2, [r4, #2]
   11150:	e1d410d1 	ldrsb	r1, [r4, #1]
   11154:	e8bd4070 	pop	{r4, r5, r6, lr}
   11158:	e12fff13 	bx	r3

0001115c <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   1115c:	e92d4010 	push	{r4, lr}
   11160:	e3a02003 	mov	r2, #3
   11164:	e1a04000 	mov	r4, r0
   11168:	ebfffe71 	bl	10b34 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   1116c:	e59f3018 	ldr	r3, [pc, #24]	; 1118c <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x30>
   11170:	e1a00004 	mov	r0, r4
   11174:	e4803020 	str	r3, [r0], #32
   11178:	eb0011c8 	bl	158a0 <CMouseBehaviour::CMouseBehaviour()>
   1117c:	e3a03000 	mov	r3, #0
   11180:	e1a00004 	mov	r0, r4
   11184:	e584303c 	str	r3, [r4, #60]	; 0x3c
   11188:	e8bd8010 	pop	{r4, pc}
   1118c:	0002be68 	.word	0x0002be68

00011190 <CUSBMouseDevice::Setup(unsigned int, unsigned int)>:
   11190:	e2800020 	add	r0, r0, #32
   11194:	ea0011cb 	b	158c8 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

00011198 <CUSBMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   11198:	e2800020 	add	r0, r0, #32
   1119c:	ea001220 	b	15a24 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

000111a0 <CUSBMouseDevice::SetCursor(unsigned int, unsigned int)>:
   111a0:	e2800020 	add	r0, r0, #32
   111a4:	ea001252 	b	15af4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

000111a8 <CUSBMouseDevice::ShowCursor(int)>:
   111a8:	e2800020 	add	r0, r0, #32
   111ac:	ea00127c 	b	15ba4 <CMouseBehaviour::ShowCursor(int)>

000111b0 <CUSBMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   111b0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   111b4:	e92d4070 	push	{r4, r5, r6, lr}
   111b8:	e3530000 	cmp	r3, #0
   111bc:	e1a04000 	mov	r4, r0
   111c0:	e1a05001 	mov	r5, r1
   111c4:	0a000005 	beq	111e0 <CUSBMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x30>
   111c8:	e30b1e90 	movw	r1, #48784	; 0xbe90
   111cc:	e30b0ea0 	movw	r0, #48800	; 0xbea0
   111d0:	e3401002 	movt	r1, #2
   111d4:	e3400002 	movt	r0, #2
   111d8:	e3a02051 	mov	r2, #81	; 0x51
   111dc:	eb004e6f 	bl	24ba0 <assertion_failed>
   111e0:	e3550000 	cmp	r5, #0
   111e4:	e584503c 	str	r5, [r4, #60]	; 0x3c
   111e8:	18bd8070 	popne	{r4, r5, r6, pc}
   111ec:	e30b1e90 	movw	r1, #48784	; 0xbe90
   111f0:	e30b0eb8 	movw	r0, #48824	; 0xbeb8
   111f4:	e3401002 	movt	r1, #2
   111f8:	e3400002 	movt	r0, #2
   111fc:	e3a02053 	mov	r2, #83	; 0x53
   11200:	e8bd4070 	pop	{r4, r5, r6, lr}
   11204:	ea004e65 	b	24ba0 <assertion_failed>

00011208 <CUSBMouseDevice::Configure()>:
   11208:	e92d4070 	push	{r4, r5, r6, lr}
   1120c:	e3a01000 	mov	r1, #0
   11210:	e24dd010 	sub	sp, sp, #16
   11214:	e1a05000 	mov	r5, r0
   11218:	ebfffec5 	bl	10d34 <CUSBHIDDevice::Configure(unsigned int)>
   1121c:	e2504000 	subs	r4, r0, #0
   11220:	0a000019 	beq	1128c <CUSBMouseDevice::Configure()+0x84>
   11224:	e1a0000d 	mov	r0, sp
   11228:	e3a04001 	mov	r4, #1
   1122c:	eb005360 	bl	25fb4 <CString::CString()>
   11230:	e3013a20 	movw	r3, #6688	; 0x1a20
   11234:	e3403003 	movt	r3, #3
   11238:	e1a0000d 	mov	r0, sp
   1123c:	e30b1ed0 	movw	r1, #48848	; 0xbed0
   11240:	e3401002 	movt	r1, #2
   11244:	e5932000 	ldr	r2, [r3]
   11248:	e082c004 	add	ip, r2, r4
   1124c:	e583c000 	str	ip, [r3]
   11250:	eb005669 	bl	26bfc <CString::Format(char const*, ...)>
   11254:	eb004fa7 	bl	250f8 <CDeviceNameService::Get()>
   11258:	e1a06000 	mov	r6, r0
   1125c:	e1a0000d 	mov	r0, sp
   11260:	eb005369 	bl	2600c <CString::operator char const*() const>
   11264:	e1a02005 	mov	r2, r5
   11268:	e3a03000 	mov	r3, #0
   1126c:	e1a01000 	mov	r1, r0
   11270:	e1a00006 	mov	r0, r6
   11274:	eb004f2b 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   11278:	e1a0000d 	mov	r0, sp
   1127c:	eb005319 	bl	25ee8 <CString::~CString()>
   11280:	e1a00004 	mov	r0, r4
   11284:	e28dd010 	add	sp, sp, #16
   11288:	e8bd8070 	pop	{r4, r5, r6, pc}
   1128c:	eb004fc5 	bl	251a8 <CLogger::Get()>
   11290:	e3a02001 	mov	r2, #1
   11294:	e59f1014 	ldr	r1, [pc, #20]	; 112b0 <CUSBMouseDevice::Configure()+0xa8>
   11298:	e30b3ca8 	movw	r3, #48296	; 0xbca8
   1129c:	e3403002 	movt	r3, #2
   112a0:	eb00509d 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   112a4:	e1a00004 	mov	r0, r4
   112a8:	e28dd010 	add	sp, sp, #16
   112ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   112b0:	0002be88 	.word	0x0002be88

000112b4 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   112b4:	e92d4010 	push	{r4, lr}
   112b8:	e1a04000 	mov	r4, r0
   112bc:	e5900094 	ldr	r0, [r0, #148]	; 0x94
   112c0:	e3a02000 	mov	r2, #0
   112c4:	e59f3028 	ldr	r3, [pc, #40]	; 112f4 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   112c8:	e1500002 	cmp	r0, r2
   112cc:	e5842090 	str	r2, [r4, #144]	; 0x90
   112d0:	e5843000 	str	r3, [r4]
   112d4:	0a000000 	beq	112dc <CUSBGamePadDevice::~CUSBGamePadDevice()+0x28>
   112d8:	eb004331 	bl	21fa4 <operator delete[](void*)>
   112dc:	e3a03000 	mov	r3, #0
   112e0:	e1a00004 	mov	r0, r4
   112e4:	e5843094 	str	r3, [r4, #148]	; 0x94
   112e8:	ebfffe24 	bl	10b80 <CUSBHIDDevice::~CUSBHIDDevice()>
   112ec:	e1a00004 	mov	r0, r4
   112f0:	e8bd8010 	pop	{r4, pc}
   112f4:	0002bee4 	.word	0x0002bee4

000112f8 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   112f8:	e92d4010 	push	{r4, lr}
   112fc:	e1a04000 	mov	r4, r0
   11300:	ebffffeb 	bl	112b4 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11304:	e1a00004 	mov	r0, r4
   11308:	e3a010a0 	mov	r1, #160	; 0xa0
   1130c:	eb004325 	bl	21fa8 <operator delete(void*, unsigned int)>
   11310:	e1a00004 	mov	r0, r4
   11314:	e8bd8010 	pop	{r4, pc}

00011318 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   11318:	e92d4010 	push	{r4, lr}
   1131c:	e3a02000 	mov	r2, #0
   11320:	e1a04000 	mov	r4, r0
   11324:	ebfffe02 	bl	10b34 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   11328:	e59fc068 	ldr	ip, [pc, #104]	; 11398 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x80>
   1132c:	e3a00000 	mov	r0, #0
   11330:	e2841048 	add	r1, r4, #72	; 0x48
   11334:	e1a03004 	mov	r3, r4
   11338:	e1a02000 	mov	r2, r0
   1133c:	e5840090 	str	r0, [r4, #144]	; 0x90
   11340:	e584c000 	str	ip, [r4]
   11344:	e5840094 	str	r0, [r4, #148]	; 0x94
   11348:	e1c409b8 	strh	r0, [r4, #152]	; 0x98
   1134c:	e1c409ba 	strh	r0, [r4, #154]	; 0x9a
   11350:	e5840020 	str	r0, [r4, #32]
   11354:	e5832024 	str	r2, [r3, #36]	; 0x24
   11358:	e283300c 	add	r3, r3, #12
   1135c:	e583201c 	str	r2, [r3, #28]
   11360:	e5832020 	str	r2, [r3, #32]
   11364:	e1530001 	cmp	r3, r1
   11368:	1afffff9 	bne	11354 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x3c>
   1136c:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11370:	e1a00004 	mov	r0, r4
   11374:	e5842070 	str	r2, [r4, #112]	; 0x70
   11378:	e5842074 	str	r2, [r4, #116]	; 0x74
   1137c:	e5842078 	str	r2, [r4, #120]	; 0x78
   11380:	e584207c 	str	r2, [r4, #124]	; 0x7c
   11384:	e5842080 	str	r2, [r4, #128]	; 0x80
   11388:	e5842084 	str	r2, [r4, #132]	; 0x84
   1138c:	e5842088 	str	r2, [r4, #136]	; 0x88
   11390:	e584208c 	str	r2, [r4, #140]	; 0x8c
   11394:	e8bd8010 	pop	{r4, pc}
   11398:	0002bee4 	.word	0x0002bee4

0001139c <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   1139c:	e5903090 	ldr	r3, [r0, #144]	; 0x90
   113a0:	e92d4070 	push	{r4, r5, r6, lr}
   113a4:	e3530000 	cmp	r3, #0
   113a8:	e1a04000 	mov	r4, r0
   113ac:	e1a05001 	mov	r5, r1
   113b0:	0a000005 	beq	113cc <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x30>
   113b4:	e30b1f14 	movw	r1, #48916	; 0xbf14
   113b8:	e30b0ea0 	movw	r0, #48800	; 0xbea0
   113bc:	e3401002 	movt	r1, #2
   113c0:	e3400002 	movt	r0, #2
   113c4:	e3a020c8 	mov	r2, #200	; 0xc8
   113c8:	eb004df4 	bl	24ba0 <assertion_failed>
   113cc:	e3550000 	cmp	r5, #0
   113d0:	e5845090 	str	r5, [r4, #144]	; 0x90
   113d4:	18bd8070 	popne	{r4, r5, r6, pc}
   113d8:	e30b1f14 	movw	r1, #48916	; 0xbf14
   113dc:	e30b0eb8 	movw	r0, #48824	; 0xbeb8
   113e0:	e3401002 	movt	r1, #2
   113e4:	e3400002 	movt	r0, #2
   113e8:	e3a020ca 	mov	r2, #202	; 0xca
   113ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   113f0:	ea004dea 	b	24ba0 <assertion_failed>

000113f4 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   113f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113f8:	e0814002 	add	r4, r1, r2
   113fc:	e2846007 	add	r6, r4, #7
   11400:	e1a0e1a1 	lsr	lr, r1, #3
   11404:	e24dd00c 	sub	sp, sp, #12
   11408:	e1a061a6 	lsr	r6, r6, #3
   1140c:	e15e0006 	cmp	lr, r6
   11410:	2a000036 	bcs	114f0 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xfc>
   11414:	e2011007 	and	r1, r1, #7
   11418:	e3a07001 	mov	r7, #1
   1141c:	e082c001 	add	ip, r2, r1
   11420:	e1a03117 	lsl	r3, r7, r1
   11424:	e1a07c17 	lsl	r7, r7, ip
   11428:	e2444001 	sub	r4, r4, #1
   1142c:	e6ef3073 	uxtb	r3, r3
   11430:	e080c00e 	add	ip, r0, lr
   11434:	e6ef7077 	uxtb	r7, r7
   11438:	e263a000 	rsb	sl, r3, #0
   1143c:	e2470001 	sub	r0, r7, #1
   11440:	e0477003 	sub	r7, r7, r3
   11444:	e3a05000 	mov	r5, #0
   11448:	e1a041a4 	lsr	r4, r4, #3
   1144c:	e6ef3070 	uxtb	r3, r0
   11450:	e6efa07a 	uxtb	sl, sl
   11454:	e58d3004 	str	r3, [sp, #4]
   11458:	e6ef7077 	uxtb	r7, r7
   1145c:	e261b008 	rsb	fp, r1, #8
   11460:	e1a00005 	mov	r0, r5
   11464:	e1a0300e 	mov	r3, lr
   11468:	ea00000e 	b	114a8 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   1146c:	e15e0003 	cmp	lr, r3
   11470:	0a000017 	beq	114d4 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe0>
   11474:	e1530004 	cmp	r3, r4
   11478:	12855008 	addne	r5, r5, #8
   1147c:	05dc8000 	ldrbeq	r8, [ip]
   11480:	10428005 	subne	r8, r2, r5
   11484:	059d9004 	ldreq	r9, [sp, #4]
   11488:	15dc9000 	ldrbne	r9, [ip]
   1148c:	00088009 	andeq	r8, r8, r9
   11490:	01800008 	orreq	r0, r0, r8
   11494:	11800819 	orrne	r0, r0, r9, lsl r8
   11498:	e2833001 	add	r3, r3, #1
   1149c:	e28cc001 	add	ip, ip, #1
   114a0:	e1530006 	cmp	r3, r6
   114a4:	0a000008 	beq	114cc <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
   114a8:	e15e0004 	cmp	lr, r4
   114ac:	1affffee 	bne	1146c <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   114b0:	e5dc0000 	ldrb	r0, [ip]
   114b4:	e2833001 	add	r3, r3, #1
   114b8:	e1530006 	cmp	r3, r6
   114bc:	e28cc001 	add	ip, ip, #1
   114c0:	e0000007 	and	r0, r0, r7
   114c4:	e1a00150 	asr	r0, r0, r1
   114c8:	1afffff6 	bne	114a8 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   114cc:	e28dd00c 	add	sp, sp, #12
   114d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114d4:	e5dc0000 	ldrb	r0, [ip]
   114d8:	e085500b 	add	r5, r5, fp
   114dc:	e0428005 	sub	r8, r2, r5
   114e0:	e000000a 	and	r0, r0, sl
   114e4:	e1a00150 	asr	r0, r0, r1
   114e8:	e1a00810 	lsl	r0, r0, r8
   114ec:	eaffffe9 	b	11498 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   114f0:	e3a00000 	mov	r0, #0
   114f4:	eafffff4 	b	114cc <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>

000114f8 <CUSBGamePadDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   114f8:	e92d4010 	push	{r4, lr}
   114fc:	e1a04002 	mov	r4, r2
   11500:	ebffffbb 	bl	113f4 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11504:	e2423001 	sub	r3, r2, #1
   11508:	e3a02001 	mov	r2, #1
   1150c:	e0103312 	ands	r3, r0, r2, lsl r3
   11510:	11a02412 	lslne	r2, r2, r4
   11514:	12622000 	rsbne	r2, r2, #0
   11518:	11800002 	orrne	r0, r0, r2
   1151c:	e8bd8010 	pop	{r4, pc}

00011520 <CUSBGamePadDevice::DecodeReport(unsigned char const*)>:
   11520:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11524:	e24dd034 	sub	sp, sp, #52	; 0x34
   11528:	e5905094 	ldr	r5, [r0, #148]	; 0x94
   1152c:	e1a0b001 	mov	fp, r1
   11530:	e58d0010 	str	r0, [sp, #16]
   11534:	e3550000 	cmp	r5, #0
   11538:	0a000107 	beq	1195c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x43c>
   1153c:	e59d3010 	ldr	r3, [sp, #16]
   11540:	e3a09000 	mov	r9, #0
   11544:	e1a06009 	mov	r6, r9
   11548:	e1a0a009 	mov	sl, r9
   1154c:	e30372eb 	movw	r7, #13035	; 0x32eb
   11550:	e58d901c 	str	r9, [sp, #28]
   11554:	e1d349b8 	ldrh	r4, [r3, #152]	; 0x98
   11558:	e34f78a4 	movt	r7, #63652	; 0xf8a4
   1155c:	e58d9018 	str	r9, [sp, #24]
   11560:	e58d700c 	str	r7, [sp, #12]
   11564:	e58d7014 	str	r7, [sp, #20]
   11568:	e58d7008 	str	r7, [sp, #8]
   1156c:	e58d9000 	str	r9, [sp]
   11570:	e58d9004 	str	r9, [sp, #4]
   11574:	e3540000 	cmp	r4, #0
   11578:	0a000027 	beq	1161c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0xfc>
   1157c:	e1d530d0 	ldrsb	r3, [r5]
   11580:	e2038003 	and	r8, r3, #3
   11584:	e3580001 	cmp	r8, #1
   11588:	0a000044 	beq	116a0 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x180>
   1158c:	e3580002 	cmp	r8, #2
   11590:	0a000047 	beq	116b4 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x194>
   11594:	e3580000 	cmp	r8, #0
   11598:	02444001 	subeq	r4, r4, #1
   1159c:	02855001 	addeq	r5, r5, #1
   115a0:	06ff4074 	uxtheq	r4, r4
   115a4:	0a00000a 	beq	115d4 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0xb4>
   115a8:	e1d580d3 	ldrsb	r8, [r5, #3]
   115ac:	e2444005 	sub	r4, r4, #5
   115b0:	e1d500d2 	ldrsb	r0, [r5, #2]
   115b4:	e2855005 	add	r5, r5, #5
   115b8:	e15510d4 	ldrsb	r1, [r5, #-4]
   115bc:	e6ff4074 	uxth	r4, r4
   115c0:	e15520d1 	ldrsb	r2, [r5, #-1]
   115c4:	e1a08808 	lsl	r8, r8, #16
   115c8:	e1888400 	orr	r8, r8, r0, lsl #8
   115cc:	e1888001 	orr	r8, r8, r1
   115d0:	e1888c02 	orr	r8, r8, r2, lsl #24
   115d4:	e20330fc 	and	r3, r3, #252	; 0xfc
   115d8:	e3530084 	cmp	r3, #132	; 0x84
   115dc:	0a000023 	beq	11670 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x150>
   115e0:	e3530034 	cmp	r3, #52	; 0x34
   115e4:	0a000039 	beq	116d0 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1b0>
   115e8:	ca000015 	bgt	11644 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x124>
   115ec:	e3530008 	cmp	r3, #8
   115f0:	0a000038 	beq	116d8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1b8>
   115f4:	da000047 	ble	11718 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f8>
   115f8:	e3530014 	cmp	r3, #20
   115fc:	058d8014 	streq	r8, [sp, #20]
   11600:	0affffdb 	beq	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11604:	e3530024 	cmp	r3, #36	; 0x24
   11608:	e59d2008 	ldr	r2, [sp, #8]
   1160c:	01a02008 	moveq	r2, r8
   11610:	e3540000 	cmp	r4, #0
   11614:	e58d2008 	str	r2, [sp, #8]
   11618:	1affffd7 	bne	1157c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x5c>
   1161c:	e59d2010 	ldr	r2, [sp, #16]
   11620:	e28a3007 	add	r3, sl, #7
   11624:	e59d1018 	ldr	r1, [sp, #24]
   11628:	e1a031a3 	lsr	r3, r3, #3
   1162c:	e1c239ba 	strh	r3, [r2, #154]	; 0x9a
   11630:	e5821020 	str	r1, [r2, #32]
   11634:	e59d101c 	ldr	r1, [sp, #28]
   11638:	e582106c 	str	r1, [r2, #108]	; 0x6c
   1163c:	e28dd034 	add	sp, sp, #52	; 0x34
   11640:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11644:	e3530074 	cmp	r3, #116	; 0x74
   11648:	058d8004 	streq	r8, [sp, #4]
   1164c:	0affffc8 	beq	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11650:	da000037 	ble	11734 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x214>
   11654:	e3530080 	cmp	r3, #128	; 0x80
   11658:	0a000026 	beq	116f8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1d8>
   1165c:	e59d2000 	ldr	r2, [sp]
   11660:	e3530094 	cmp	r3, #148	; 0x94
   11664:	01a02008 	moveq	r2, r8
   11668:	e58d2000 	str	r2, [sp]
   1166c:	eaffffc0 	b	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11670:	e3560000 	cmp	r6, #0
   11674:	1affffe8 	bne	1161c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0xfc>
   11678:	e1a01006 	mov	r1, r6
   1167c:	e3a02008 	mov	r2, #8
   11680:	e1a0000b 	mov	r0, fp
   11684:	ebffff5a 	bl	113f4 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11688:	e3500000 	cmp	r0, #0
   1168c:	11500008 	cmpne	r0, r8
   11690:	1affffe9 	bne	1163c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x11c>
   11694:	e1a06008 	mov	r6, r8
   11698:	e3a0a008 	mov	sl, #8
   1169c:	eaffffb4 	b	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   116a0:	e2444002 	sub	r4, r4, #2
   116a4:	e1d580d1 	ldrsb	r8, [r5, #1]
   116a8:	e2855002 	add	r5, r5, #2
   116ac:	e6ff4074 	uxth	r4, r4
   116b0:	eaffffc7 	b	115d4 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0xb4>
   116b4:	e1d520d2 	ldrsb	r2, [r5, #2]
   116b8:	e2444003 	sub	r4, r4, #3
   116bc:	e5d58001 	ldrb	r8, [r5, #1]
   116c0:	e2855003 	add	r5, r5, #3
   116c4:	e6ff4074 	uxth	r4, r4
   116c8:	e1888402 	orr	r8, r8, r2, lsl #8
   116cc:	eaffffc0 	b	115d4 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0xb4>
   116d0:	e58d800c 	str	r8, [sp, #12]
   116d4:	eaffffa6 	b	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   116d8:	e3580036 	cmp	r8, #54	; 0x36
   116dc:	ca000017 	bgt	11740 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x220>
   116e0:	e3580030 	cmp	r8, #48	; 0x30
   116e4:	aa00002d 	bge	117a0 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x280>
   116e8:	e2488004 	sub	r8, r8, #4
   116ec:	e3580001 	cmp	r8, #1
   116f0:	93a09001 	movls	r9, #1
   116f4:	eaffff9e 	b	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   116f8:	e2088003 	and	r8, r8, #3
   116fc:	e3580002 	cmp	r8, #2
   11700:	0a000013 	beq	11754 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x234>
   11704:	e59d3000 	ldr	r3, [sp]
   11708:	e59d2004 	ldr	r2, [sp, #4]
   1170c:	e0080293 	mul	r8, r3, r2
   11710:	e08aa008 	add	sl, sl, r8
   11714:	eaffff96 	b	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11718:	e3530004 	cmp	r3, #4
   1171c:	1affff94 	bne	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11720:	e3580009 	cmp	r8, #9
   11724:	1affff92 	bne	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11728:	e3590001 	cmp	r9, #1
   1172c:	03a09002 	moveq	r9, #2
   11730:	eaffff8f 	b	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11734:	e3530044 	cmp	r3, #68	; 0x44
   11738:	01a07008 	moveq	r7, r8
   1173c:	eaffff8c 	b	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11740:	e3580039 	cmp	r8, #57	; 0x39
   11744:	1affff8a 	bne	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11748:	e3590001 	cmp	r9, #1
   1174c:	03a09004 	moveq	r9, #4
   11750:	eaffff87 	b	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11754:	e3590003 	cmp	r9, #3
   11758:	0a000013 	beq	117ac <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x28c>
   1175c:	e3590004 	cmp	r9, #4
   11760:	0a000053 	beq	118b4 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x394>
   11764:	e59d3000 	ldr	r3, [sp]
   11768:	e3590002 	cmp	r9, #2
   1176c:	e59d2004 	ldr	r2, [sp, #4]
   11770:	e0080293 	mul	r8, r3, r2
   11774:	1affffe5 	bne	11710 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f0>
   11778:	e59d2010 	ldr	r2, [sp, #16]
   1177c:	e1a0100a 	mov	r1, sl
   11780:	e1a0000b 	mov	r0, fp
   11784:	e3a09001 	mov	r9, #1
   11788:	e5823088 	str	r3, [r2, #136]	; 0x88
   1178c:	e1a02008 	mov	r2, r8
   11790:	ebffff17 	bl	113f4 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11794:	e59d2010 	ldr	r2, [sp, #16]
   11798:	e582008c 	str	r0, [r2, #140]	; 0x8c
   1179c:	eaffffdb 	b	11710 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f0>
   117a0:	e3590001 	cmp	r9, #1
   117a4:	03a09003 	moveq	r9, #3
   117a8:	eaffff71 	b	11574 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   117ac:	e59d3000 	ldr	r3, [sp]
   117b0:	e3530000 	cmp	r3, #0
   117b4:	0a000071 	beq	11980 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x460>
   117b8:	e59d0018 	ldr	r0, [sp, #24]
   117bc:	e3a0200c 	mov	r2, #12
   117c0:	e59d1010 	ldr	r1, [sp, #16]
   117c4:	e303c2eb 	movw	ip, #13035	; 0x32eb
   117c8:	e34fc8a4 	movt	ip, #63652	; 0xf8a4
   117cc:	e58da018 	str	sl, [sp, #24]
   117d0:	e58d7020 	str	r7, [sp, #32]
   117d4:	e3a09000 	mov	r9, #0
   117d8:	e0281092 	mla	r8, r2, r0, r1
   117dc:	e59d2014 	ldr	r2, [sp, #20]
   117e0:	e59d100c 	ldr	r1, [sp, #12]
   117e4:	e152000c 	cmp	r2, ip
   117e8:	e58d6024 	str	r6, [sp, #36]	; 0x24
   117ec:	e1a03002 	mov	r3, r2
   117f0:	e58d5028 	str	r5, [sp, #40]	; 0x28
   117f4:	01a03001 	moveq	r3, r1
   117f8:	e59d1008 	ldr	r1, [sp, #8]
   117fc:	e1a02003 	mov	r2, r3
   11800:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   11804:	e151000c 	cmp	r1, ip
   11808:	e1a06000 	mov	r6, r0
   1180c:	e1a03001 	mov	r3, r1
   11810:	e59d4004 	ldr	r4, [sp, #4]
   11814:	01a03007 	moveq	r3, r7
   11818:	e1a07002 	mov	r7, r2
   1181c:	e1a01003 	mov	r1, r3
   11820:	e1a0300a 	mov	r3, sl
   11824:	e1a05003 	mov	r5, r3
   11828:	e1a0a001 	mov	sl, r1
   1182c:	ea00000d 	b	11868 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x348>
   11830:	ebfffeef 	bl	113f4 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11834:	e2899001 	add	r9, r9, #1
   11838:	e59d3000 	ldr	r3, [sp]
   1183c:	e3590005 	cmp	r9, #5
   11840:	e5880024 	str	r0, [r8, #36]	; 0x24
   11844:	e2866001 	add	r6, r6, #1
   11848:	e288800c 	add	r8, r8, #12
   1184c:	93a02000 	movls	r2, #0
   11850:	83a02001 	movhi	r2, #1
   11854:	e1530009 	cmp	r3, r9
   11858:	93822001 	orrls	r2, r2, #1
   1185c:	e0855004 	add	r5, r5, r4
   11860:	e3520000 	cmp	r2, #0
   11864:	1a000008 	bne	1188c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x36c>
   11868:	e3570000 	cmp	r7, #0
   1186c:	e1a01005 	mov	r1, r5
   11870:	e1a02004 	mov	r2, r4
   11874:	e1a0000b 	mov	r0, fp
   11878:	e5887028 	str	r7, [r8, #40]	; 0x28
   1187c:	e588a02c 	str	sl, [r8, #44]	; 0x2c
   11880:	aaffffea 	bge	11830 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x310>
   11884:	ebffff1b 	bl	114f8 <CUSBGamePadDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   11888:	eaffffe9 	b	11834 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x314>
   1188c:	e59d2004 	ldr	r2, [sp, #4]
   11890:	e3a09001 	mov	r9, #1
   11894:	e59da018 	ldr	sl, [sp, #24]
   11898:	e59d7020 	ldr	r7, [sp, #32]
   1189c:	e58d6018 	str	r6, [sp, #24]
   118a0:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   118a4:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   118a8:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   118ac:	e0080293 	mul	r8, r3, r2
   118b0:	eaffff96 	b	11710 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f0>
   118b4:	e59d2000 	ldr	r2, [sp]
   118b8:	e3520000 	cmp	r2, #0
   118bc:	0a00002f 	beq	11980 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x460>
   118c0:	e59d101c 	ldr	r1, [sp, #28]
   118c4:	e1a0900a 	mov	r9, sl
   118c8:	e59d0010 	ldr	r0, [sp, #16]
   118cc:	e3a08000 	mov	r8, #0
   118d0:	e58d701c 	str	r7, [sp, #28]
   118d4:	e0803101 	add	r3, r0, r1, lsl #2
   118d8:	e59d7004 	ldr	r7, [sp, #4]
   118dc:	e283306c 	add	r3, r3, #108	; 0x6c
   118e0:	e58da020 	str	sl, [sp, #32]
   118e4:	e58d5024 	str	r5, [sp, #36]	; 0x24
   118e8:	e1a0a001 	mov	sl, r1
   118ec:	e58d4028 	str	r4, [sp, #40]	; 0x28
   118f0:	e1a05003 	mov	r5, r3
   118f4:	e1a04002 	mov	r4, r2
   118f8:	e1a02007 	mov	r2, r7
   118fc:	e1a01009 	mov	r1, r9
   11900:	e1a0000b 	mov	r0, fp
   11904:	e2888001 	add	r8, r8, #1
   11908:	ebfffeb9 	bl	113f4 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   1190c:	e3580005 	cmp	r8, #5
   11910:	e28aa001 	add	sl, sl, #1
   11914:	e0899007 	add	r9, r9, r7
   11918:	93a02000 	movls	r2, #0
   1191c:	83a02001 	movhi	r2, #1
   11920:	e1540008 	cmp	r4, r8
   11924:	93822001 	orrls	r2, r2, #1
   11928:	e5a50004 	str	r0, [r5, #4]!
   1192c:	e3520000 	cmp	r2, #0
   11930:	0afffff0 	beq	118f8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x3d8>
   11934:	e59d3000 	ldr	r3, [sp]
   11938:	e3a09001 	mov	r9, #1
   1193c:	e59d2004 	ldr	r2, [sp, #4]
   11940:	e59d701c 	ldr	r7, [sp, #28]
   11944:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   11948:	e58da01c 	str	sl, [sp, #28]
   1194c:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   11950:	e59da020 	ldr	sl, [sp, #32]
   11954:	e0080293 	mul	r8, r3, r2
   11958:	eaffff6c 	b	11710 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f0>
   1195c:	e30b1f14 	movw	r1, #48916	; 0xbf14
   11960:	e30b0f24 	movw	r0, #48932	; 0xbf24
   11964:	e3401002 	movt	r1, #2
   11968:	e3400002 	movt	r0, #2
   1196c:	e3a020ec 	mov	r2, #236	; 0xec
   11970:	eb004c8a 	bl	24ba0 <assertion_failed>
   11974:	e59d3010 	ldr	r3, [sp, #16]
   11978:	e5935094 	ldr	r5, [r3, #148]	; 0x94
   1197c:	eafffeee 	b	1153c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1c>
   11980:	e3a08000 	mov	r8, #0
   11984:	e3a09001 	mov	r9, #1
   11988:	eaffff60 	b	11710 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f0>

0001198c <CUSBGamePadDevice::GetReport()>:
   1198c:	e92d4870 	push	{r4, r5, r6, fp, lr}
   11990:	e28db010 	add	fp, sp, #16
   11994:	e24dd014 	sub	sp, sp, #20
   11998:	e1d039ba 	ldrh	r3, [r0, #154]	; 0x9a
   1199c:	e1a04000 	mov	r4, r0
   119a0:	e2432001 	sub	r2, r3, #1
   119a4:	e352003e 	cmp	r2, #62	; 0x3e
   119a8:	8a00001f 	bhi	11a2c <CUSBGamePadDevice::GetReport()+0xa0>
   119ac:	e2833007 	add	r3, r3, #7
   119b0:	e1a00004 	mov	r0, r4
   119b4:	e3c33007 	bic	r3, r3, #7
   119b8:	e04dd003 	sub	sp, sp, r3
   119bc:	eb0001d8 	bl	12124 <CUSBFunction::GetHost() const>
   119c0:	e1a06000 	mov	r6, r0
   119c4:	e1a00004 	mov	r0, r4
   119c8:	eb0001c4 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
   119cc:	e1a05000 	mov	r5, r0
   119d0:	e1a00004 	mov	r0, r4
   119d4:	eb000244 	bl	122ec <CUSBFunction::GetInterfaceNumber() const>
   119d8:	e1d439ba 	ldrh	r3, [r4, #154]	; 0x9a
   119dc:	e1a01005 	mov	r1, r5
   119e0:	e3a02c01 	mov	r2, #256	; 0x100
   119e4:	e28d5010 	add	r5, sp, #16
   119e8:	e58d2000 	str	r2, [sp]
   119ec:	e58d300c 	str	r3, [sp, #12]
   119f0:	e3a020a1 	mov	r2, #161	; 0xa1
   119f4:	e3a03001 	mov	r3, #1
   119f8:	e58d5008 	str	r5, [sp, #8]
   119fc:	e6ffc070 	uxth	ip, r0
   11a00:	e1a00006 	mov	r0, r6
   11a04:	e58dc004 	str	ip, [sp, #4]
   11a08:	ebfff1e1 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11a0c:	e3500000 	cmp	r0, #0
   11a10:	da00000d 	ble	11a4c <CUSBGamePadDevice::GetReport()+0xc0>
   11a14:	e1a00004 	mov	r0, r4
   11a18:	e1a01005 	mov	r1, r5
   11a1c:	ebfffebf 	bl	11520 <CUSBGamePadDevice::DecodeReport(unsigned char const*)>
   11a20:	e2840020 	add	r0, r4, #32
   11a24:	e24bd010 	sub	sp, fp, #16
   11a28:	e8bd8870 	pop	{r4, r5, r6, fp, pc}
   11a2c:	e30b1f14 	movw	r1, #48916	; 0xbf14
   11a30:	e30b0f40 	movw	r0, #48960	; 0xbf40
   11a34:	e3401002 	movt	r1, #2
   11a38:	e3400002 	movt	r0, #2
   11a3c:	e3a020b6 	mov	r2, #182	; 0xb6
   11a40:	eb004c56 	bl	24ba0 <assertion_failed>
   11a44:	e1d439ba 	ldrh	r3, [r4, #154]	; 0x9a
   11a48:	eaffffd7 	b	119ac <CUSBGamePadDevice::GetReport()+0x20>
   11a4c:	e3a00000 	mov	r0, #0
   11a50:	eafffff3 	b	11a24 <CUSBGamePadDevice::GetReport()+0x98>

00011a54 <CUSBGamePadDevice::ReportHandler(unsigned char const*)>:
   11a54:	e3510000 	cmp	r1, #0
   11a58:	012fff1e 	bxeq	lr
   11a5c:	e5903090 	ldr	r3, [r0, #144]	; 0x90
   11a60:	e92d4010 	push	{r4, lr}
   11a64:	e3530000 	cmp	r3, #0
   11a68:	e1a04000 	mov	r4, r0
   11a6c:	08bd8010 	popeq	{r4, pc}
   11a70:	ebfffeaa 	bl	11520 <CUSBGamePadDevice::DecodeReport(unsigned char const*)>
   11a74:	e594009c 	ldr	r0, [r4, #156]	; 0x9c
   11a78:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   11a7c:	e2841020 	add	r1, r4, #32
   11a80:	e2400001 	sub	r0, r0, #1
   11a84:	e8bd4010 	pop	{r4, lr}
   11a88:	e12fff13 	bx	r3

00011a8c <CUSBGamePadDevice::PS3Configure()>:
   11a8c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11a90:	e24dd014 	sub	sp, sp, #20
   11a94:	e1a05000 	mov	r5, r0
   11a98:	eb0001a1 	bl	12124 <CUSBFunction::GetHost() const>
   11a9c:	e3014a24 	movw	r4, #6692	; 0x1a24
   11aa0:	e3404003 	movt	r4, #3
   11aa4:	e1a06000 	mov	r6, r0
   11aa8:	e1a00005 	mov	r0, r5
   11aac:	eb00018b 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
   11ab0:	e1a07000 	mov	r7, r0
   11ab4:	e1a00005 	mov	r0, r5
   11ab8:	eb00020b 	bl	122ec <CUSBFunction::GetInterfaceNumber() const>
   11abc:	e1a01007 	mov	r1, r7
   11ac0:	e58d4008 	str	r4, [sp, #8]
   11ac4:	e3a03004 	mov	r3, #4
   11ac8:	e3a02ffd 	mov	r2, #1012	; 0x3f4
   11acc:	e58d300c 	str	r3, [sp, #12]
   11ad0:	e58d2000 	str	r2, [sp]
   11ad4:	e3a03009 	mov	r3, #9
   11ad8:	e3a02021 	mov	r2, #33	; 0x21
   11adc:	e2844004 	add	r4, r4, #4
   11ae0:	e6ffc070 	uxth	ip, r0
   11ae4:	e1a00006 	mov	r0, r6
   11ae8:	e58dc004 	str	ip, [sp, #4]
   11aec:	ebfff1a8 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11af0:	e595209c 	ldr	r2, [r5, #156]	; 0x9c
   11af4:	e30b3edc 	movw	r3, #48860	; 0xbedc
   11af8:	e3403002 	movt	r3, #2
   11afc:	e0833002 	add	r3, r3, r2
   11b00:	e1a00005 	mov	r0, r5
   11b04:	e5d33028 	ldrb	r3, [r3, #40]	; 0x28
   11b08:	e1a03083 	lsl	r3, r3, #1
   11b0c:	e5c43009 	strb	r3, [r4, #9]
   11b10:	eb000183 	bl	12124 <CUSBFunction::GetHost() const>
   11b14:	e1a06000 	mov	r6, r0
   11b18:	e1a00005 	mov	r0, r5
   11b1c:	eb00016f 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
   11b20:	e1a07000 	mov	r7, r0
   11b24:	e1a00005 	mov	r0, r5
   11b28:	eb0001ef 	bl	122ec <CUSBFunction::GetInterfaceNumber() const>
   11b2c:	e1a01007 	mov	r1, r7
   11b30:	e58d4008 	str	r4, [sp, #8]
   11b34:	e3a03030 	mov	r3, #48	; 0x30
   11b38:	e3002201 	movw	r2, #513	; 0x201
   11b3c:	e58d300c 	str	r3, [sp, #12]
   11b40:	e58d2000 	str	r2, [sp]
   11b44:	e3a03009 	mov	r3, #9
   11b48:	e3a02021 	mov	r2, #33	; 0x21
   11b4c:	e6ffc070 	uxth	ip, r0
   11b50:	e1a00006 	mov	r0, r6
   11b54:	e58dc004 	str	ip, [sp, #4]
   11b58:	ebfff18d 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11b5c:	e28dd014 	add	sp, sp, #20
   11b60:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00011b64 <CUSBGamePadDevice::Configure()>:
   11b64:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11b68:	e3a01021 	mov	r1, #33	; 0x21
   11b6c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   11b70:	e1a04000 	mov	r4, r0
   11b74:	eb0001ac 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
   11b78:	e2505000 	subs	r5, r0, #0
   11b7c:	0a000002 	beq	11b8c <CUSBGamePadDevice::Configure()+0x28>
   11b80:	e1d530b7 	ldrh	r3, [r5, #7]
   11b84:	e2530000 	subs	r0, r3, #0
   11b88:	1a000006 	bne	11ba8 <CUSBGamePadDevice::Configure()+0x44>
   11b8c:	e1a00004 	mov	r0, r4
   11b90:	e59f11fc 	ldr	r1, [pc, #508]	; 11d94 <CUSBGamePadDevice::Configure()+0x230>
   11b94:	eb0001b7 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   11b98:	e3a05000 	mov	r5, #0
   11b9c:	e1a00005 	mov	r0, r5
   11ba0:	e28dd02c 	add	sp, sp, #44	; 0x2c
   11ba4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11ba8:	e1c439b8 	strh	r3, [r4, #152]	; 0x98
   11bac:	eb0040fa 	bl	21f9c <operator new[](unsigned int)>
   11bb0:	e5840094 	str	r0, [r4, #148]	; 0x94
   11bb4:	e1a00004 	mov	r0, r4
   11bb8:	eb000159 	bl	12124 <CUSBFunction::GetHost() const>
   11bbc:	e1a06000 	mov	r6, r0
   11bc0:	e1a00004 	mov	r0, r4
   11bc4:	eb000145 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
   11bc8:	e5d59006 	ldrb	r9, [r5, #6]
   11bcc:	e5947094 	ldr	r7, [r4, #148]	; 0x94
   11bd0:	e1d459b8 	ldrh	r5, [r4, #152]	; 0x98
   11bd4:	e1a08000 	mov	r8, r0
   11bd8:	e1a00004 	mov	r0, r4
   11bdc:	eb0001c2 	bl	122ec <CUSBFunction::GetInterfaceNumber() const>
   11be0:	e3a0c081 	mov	ip, #129	; 0x81
   11be4:	e3a03000 	mov	r3, #0
   11be8:	e58dc008 	str	ip, [sp, #8]
   11bec:	e1a02009 	mov	r2, r9
   11bf0:	e1a01008 	mov	r1, r8
   11bf4:	e58d7000 	str	r7, [sp]
   11bf8:	e58d5004 	str	r5, [sp, #4]
   11bfc:	e6ffc070 	uxth	ip, r0
   11c00:	e1a00006 	mov	r0, r6
   11c04:	e58dc00c 	str	ip, [sp, #12]
   11c08:	ebfff18c 	bl	e240 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   11c0c:	e1d439b8 	ldrh	r3, [r4, #152]	; 0x98
   11c10:	e1500003 	cmp	r0, r3
   11c14:	0a000009 	beq	11c40 <CUSBGamePadDevice::Configure()+0xdc>
   11c18:	eb004d62 	bl	251a8 <CLogger::Get()>
   11c1c:	e3a02001 	mov	r2, #1
   11c20:	e59f116c 	ldr	r1, [pc, #364]	; 11d94 <CUSBGamePadDevice::Configure()+0x230>
   11c24:	e30b3f6c 	movw	r3, #49004	; 0xbf6c
   11c28:	e3403002 	movt	r3, #2
   11c2c:	e3a05000 	mov	r5, #0
   11c30:	eb004e39 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c34:	e1a00005 	mov	r0, r5
   11c38:	e28dd02c 	add	sp, sp, #44	; 0x2c
   11c3c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11c40:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   11c44:	e28d1010 	add	r1, sp, #16
   11c48:	e1a00004 	mov	r0, r4
   11c4c:	edcd0b04 	vstr	d16, [sp, #16]
   11c50:	ebfffe32 	bl	11520 <CUSBGamePadDevice::DecodeReport(unsigned char const*)>
   11c54:	e5943020 	ldr	r3, [r4, #32]
   11c58:	e3530000 	cmp	r3, #0
   11c5c:	1a000002 	bne	11c6c <CUSBGamePadDevice::Configure()+0x108>
   11c60:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
   11c64:	e3530000 	cmp	r3, #0
   11c68:	0a000029 	beq	11d14 <CUSBGamePadDevice::Configure()+0x1b0>
   11c6c:	e1d419ba 	ldrh	r1, [r4, #154]	; 0x9a
   11c70:	e3510000 	cmp	r1, #0
   11c74:	0a000031 	beq	11d40 <CUSBGamePadDevice::Configure()+0x1dc>
   11c78:	e1a00004 	mov	r0, r4
   11c7c:	ebfffc2c 	bl	10d34 <CUSBHIDDevice::Configure(unsigned int)>
   11c80:	e2505000 	subs	r5, r0, #0
   11c84:	0a000026 	beq	11d24 <CUSBGamePadDevice::Configure()+0x1c0>
   11c88:	e1a00004 	mov	r0, r4
   11c8c:	eb000103 	bl	120a0 <CUSBFunction::GetDevice() const>
   11c90:	ebffed83 	bl	d2a4 <CUSBDevice::GetDeviceDescriptor() const>
   11c94:	e2505000 	subs	r5, r0, #0
   11c98:	0a000036 	beq	11d78 <CUSBGamePadDevice::Configure()+0x214>
   11c9c:	e1d520b8 	ldrh	r2, [r5, #8]
   11ca0:	e300354c 	movw	r3, #1356	; 0x54c
   11ca4:	e1520003 	cmp	r2, r3
   11ca8:	0a00002c 	beq	11d60 <CUSBGamePadDevice::Configure()+0x1fc>
   11cac:	e3013a24 	movw	r3, #6692	; 0x1a24
   11cb0:	e3403003 	movt	r3, #3
   11cb4:	e28d0018 	add	r0, sp, #24
   11cb8:	e3a05001 	mov	r5, #1
   11cbc:	e5932034 	ldr	r2, [r3, #52]	; 0x34
   11cc0:	e0821005 	add	r1, r2, r5
   11cc4:	e5831034 	str	r1, [r3, #52]	; 0x34
   11cc8:	e584209c 	str	r2, [r4, #156]	; 0x9c
   11ccc:	eb0050b8 	bl	25fb4 <CString::CString()>
   11cd0:	e594209c 	ldr	r2, [r4, #156]	; 0x9c
   11cd4:	e28d0018 	add	r0, sp, #24
   11cd8:	e30b1fb8 	movw	r1, #49080	; 0xbfb8
   11cdc:	e3401002 	movt	r1, #2
   11ce0:	eb0053c5 	bl	26bfc <CString::Format(char const*, ...)>
   11ce4:	eb004d03 	bl	250f8 <CDeviceNameService::Get()>
   11ce8:	e1a06000 	mov	r6, r0
   11cec:	e28d0018 	add	r0, sp, #24
   11cf0:	eb0050c5 	bl	2600c <CString::operator char const*() const>
   11cf4:	e1a02004 	mov	r2, r4
   11cf8:	e3a03000 	mov	r3, #0
   11cfc:	e1a01000 	mov	r1, r0
   11d00:	e1a00006 	mov	r0, r6
   11d04:	eb004c87 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   11d08:	e28d0018 	add	r0, sp, #24
   11d0c:	eb005075 	bl	25ee8 <CString::~CString()>
   11d10:	eaffffa1 	b	11b9c <CUSBGamePadDevice::Configure()+0x38>
   11d14:	e5945088 	ldr	r5, [r4, #136]	; 0x88
   11d18:	e3550000 	cmp	r5, #0
   11d1c:	1affffd2 	bne	11c6c <CUSBGamePadDevice::Configure()+0x108>
   11d20:	eaffff9d 	b	11b9c <CUSBGamePadDevice::Configure()+0x38>
   11d24:	eb004d1f 	bl	251a8 <CLogger::Get()>
   11d28:	e30b3ca8 	movw	r3, #48296	; 0xbca8
   11d2c:	e3a02001 	mov	r2, #1
   11d30:	e3403002 	movt	r3, #2
   11d34:	e59f1058 	ldr	r1, [pc, #88]	; 11d94 <CUSBGamePadDevice::Configure()+0x230>
   11d38:	eb004df7 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11d3c:	eaffff96 	b	11b9c <CUSBGamePadDevice::Configure()+0x38>
   11d40:	e30b1f14 	movw	r1, #48916	; 0xbf14
   11d44:	e30b0f90 	movw	r0, #49040	; 0xbf90
   11d48:	e3401002 	movt	r1, #2
   11d4c:	e3400002 	movt	r0, #2
   11d50:	e3a0209b 	mov	r2, #155	; 0x9b
   11d54:	eb004b91 	bl	24ba0 <assertion_failed>
   11d58:	e1d419ba 	ldrh	r1, [r4, #154]	; 0x9a
   11d5c:	eaffffc5 	b	11c78 <CUSBGamePadDevice::Configure()+0x114>
   11d60:	e1d530ba 	ldrh	r3, [r5, #10]
   11d64:	e3530f9a 	cmp	r3, #616	; 0x268
   11d68:	1affffcf 	bne	11cac <CUSBGamePadDevice::Configure()+0x148>
   11d6c:	e1a00004 	mov	r0, r4
   11d70:	ebffff45 	bl	11a8c <CUSBGamePadDevice::PS3Configure()>
   11d74:	eaffffcc 	b	11cac <CUSBGamePadDevice::Configure()+0x148>
   11d78:	e30b1f14 	movw	r1, #48916	; 0xbf14
   11d7c:	e30b0fa4 	movw	r0, #49060	; 0xbfa4
   11d80:	e3401002 	movt	r1, #2
   11d84:	e3400002 	movt	r0, #2
   11d88:	e3a020a4 	mov	r2, #164	; 0xa4
   11d8c:	eb004b83 	bl	24ba0 <assertion_failed>
   11d90:	eaffffc1 	b	11c9c <CUSBGamePadDevice::Configure()+0x138>
   11d94:	0002bf0c 	.word	0x0002bf0c

00011d98 <CUSBFunction::Initialize()>:
   11d98:	e3a00001 	mov	r0, #1
   11d9c:	e12fff1e 	bx	lr

00011da0 <CUSBFunction::~CUSBFunction()>:
   11da0:	e92d4070 	push	{r4, r5, r6, lr}
   11da4:	e3a02000 	mov	r2, #0
   11da8:	e5905008 	ldr	r5, [r0, #8]
   11dac:	e1a04000 	mov	r4, r0
   11db0:	e59f303c 	ldr	r3, [pc, #60]	; 11df4 <CUSBFunction::~CUSBFunction()+0x54>
   11db4:	e1550002 	cmp	r5, r2
   11db8:	e580200c 	str	r2, [r0, #12]
   11dbc:	e5803000 	str	r3, [r0]
   11dc0:	0a000004 	beq	11dd8 <CUSBFunction::~CUSBFunction()+0x38>
   11dc4:	e1a00005 	mov	r0, r5
   11dc8:	eb0007da 	bl	13d38 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   11dcc:	e1a00005 	mov	r0, r5
   11dd0:	e3a0101c 	mov	r1, #28
   11dd4:	eb004073 	bl	21fa8 <operator delete(void*, unsigned int)>
   11dd8:	e3a03000 	mov	r3, #0
   11ddc:	e1a00004 	mov	r0, r4
   11de0:	e5843008 	str	r3, [r4, #8]
   11de4:	e5843004 	str	r3, [r4, #4]
   11de8:	eb00450d 	bl	23224 <CDevice::~CDevice()>
   11dec:	e1a00004 	mov	r0, r4
   11df0:	e8bd8070 	pop	{r4, r5, r6, pc}
   11df4:	0002bfc8 	.word	0x0002bfc8

00011df8 <CUSBFunction::~CUSBFunction()>:
   11df8:	e92d4010 	push	{r4, lr}
   11dfc:	e1a04000 	mov	r4, r0
   11e00:	ebffffe6 	bl	11da0 <CUSBFunction::~CUSBFunction()>
   11e04:	e1a00004 	mov	r0, r4
   11e08:	e3a01010 	mov	r1, #16
   11e0c:	eb004065 	bl	21fa8 <operator delete(void*, unsigned int)>
   11e10:	e1a00004 	mov	r0, r4
   11e14:	e8bd8010 	pop	{r4, pc}

00011e18 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   11e18:	e92d4070 	push	{r4, r5, r6, lr}
   11e1c:	e1a04000 	mov	r4, r0
   11e20:	e1a05001 	mov	r5, r1
   11e24:	e1a06002 	mov	r6, r2
   11e28:	eb004509 	bl	23254 <CDevice::CDevice()>
   11e2c:	e59f20ac 	ldr	r2, [pc, #172]	; 11ee0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xc8>
   11e30:	e3550000 	cmp	r5, #0
   11e34:	e3a03000 	mov	r3, #0
   11e38:	e5845004 	str	r5, [r4, #4]
   11e3c:	e5843008 	str	r3, [r4, #8]
   11e40:	e5842000 	str	r2, [r4]
   11e44:	e584300c 	str	r3, [r4, #12]
   11e48:	0a000016 	beq	11ea8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x90>
   11e4c:	e3560000 	cmp	r6, #0
   11e50:	0a00001b 	beq	11ec4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
   11e54:	e3a0001c 	mov	r0, #28
   11e58:	eb00404e 	bl	21f98 <operator new(unsigned int)>
   11e5c:	e1a01006 	mov	r1, r6
   11e60:	e1a05000 	mov	r5, r0
   11e64:	eb00079b 	bl	13cd8 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   11e68:	e5845008 	str	r5, [r4, #8]
   11e6c:	e1a00005 	mov	r0, r5
   11e70:	eb0007eb 	bl	13e24 <CUSBConfigurationParser::GetCurrentDescriptor()>
   11e74:	e3500000 	cmp	r0, #0
   11e78:	e584000c 	str	r0, [r4, #12]
   11e7c:	0a000001 	beq	11e88 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x70>
   11e80:	e1a00004 	mov	r0, r4
   11e84:	e8bd8070 	pop	{r4, r5, r6, pc}
   11e88:	e3a02029 	mov	r2, #41	; 0x29
   11e8c:	e30b1fec 	movw	r1, #49132	; 0xbfec
   11e90:	e30c0010 	movw	r0, #49168	; 0xc010
   11e94:	e3401002 	movt	r1, #2
   11e98:	e3400002 	movt	r0, #2
   11e9c:	eb004b3f 	bl	24ba0 <assertion_failed>
   11ea0:	e1a00004 	mov	r0, r4
   11ea4:	e8bd8070 	pop	{r4, r5, r6, pc}
   11ea8:	e30b1fec 	movw	r1, #49132	; 0xbfec
   11eac:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   11eb0:	e3401002 	movt	r1, #2
   11eb4:	e3400002 	movt	r0, #2
   11eb8:	e3a02022 	mov	r2, #34	; 0x22
   11ebc:	eb004b37 	bl	24ba0 <assertion_failed>
   11ec0:	eaffffe1 	b	11e4c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x34>
   11ec4:	e30b1fec 	movw	r1, #49132	; 0xbfec
   11ec8:	e30b0ffc 	movw	r0, #49148	; 0xbffc
   11ecc:	e3401002 	movt	r1, #2
   11ed0:	e3400002 	movt	r0, #2
   11ed4:	e3a02024 	mov	r2, #36	; 0x24
   11ed8:	eb004b30 	bl	24ba0 <assertion_failed>
   11edc:	eaffffdc 	b	11e54 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x3c>
   11ee0:	0002bfc8 	.word	0x0002bfc8

00011ee4 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   11ee4:	e92d4070 	push	{r4, r5, r6, lr}
   11ee8:	e1a04000 	mov	r4, r0
   11eec:	e1a05001 	mov	r5, r1
   11ef0:	eb0044d7 	bl	23254 <CDevice::CDevice()>
   11ef4:	e59f20f4 	ldr	r2, [pc, #244]	; 11ff0 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x10c>
   11ef8:	e3550000 	cmp	r5, #0
   11efc:	e3a03000 	mov	r3, #0
   11f00:	e5843008 	str	r3, [r4, #8]
   11f04:	e584300c 	str	r3, [r4, #12]
   11f08:	e884000c 	stm	r4, {r2, r3}
   11f0c:	0a00001b 	beq	11f80 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
   11f10:	e5953004 	ldr	r3, [r5, #4]
   11f14:	e3530000 	cmp	r3, #0
   11f18:	e5843004 	str	r3, [r4, #4]
   11f1c:	0a00001e 	beq	11f9c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xb8>
   11f20:	e5953008 	ldr	r3, [r5, #8]
   11f24:	e3530000 	cmp	r3, #0
   11f28:	0a000022 	beq	11fb8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xd4>
   11f2c:	e3a0001c 	mov	r0, #28
   11f30:	eb004018 	bl	21f98 <operator new(unsigned int)>
   11f34:	e5951008 	ldr	r1, [r5, #8]
   11f38:	e1a06000 	mov	r6, r0
   11f3c:	eb000765 	bl	13cd8 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   11f40:	e1a00006 	mov	r0, r6
   11f44:	e5846008 	str	r6, [r4, #8]
   11f48:	eb0007b5 	bl	13e24 <CUSBConfigurationParser::GetCurrentDescriptor()>
   11f4c:	e3500000 	cmp	r0, #0
   11f50:	e584000c 	str	r0, [r4, #12]
   11f54:	0a000001 	beq	11f60 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
   11f58:	e1a00004 	mov	r0, r4
   11f5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f60:	e3a0203a 	mov	r2, #58	; 0x3a
   11f64:	e30b1fec 	movw	r1, #49132	; 0xbfec
   11f68:	e30c0010 	movw	r0, #49168	; 0xc010
   11f6c:	e3401002 	movt	r1, #2
   11f70:	e3400002 	movt	r0, #2
   11f74:	eb004b09 	bl	24ba0 <assertion_failed>
   11f78:	e1a00004 	mov	r0, r4
   11f7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f80:	e30b1fec 	movw	r1, #49132	; 0xbfec
   11f84:	e30c0028 	movw	r0, #49192	; 0xc028
   11f88:	e3401002 	movt	r1, #2
   11f8c:	e3400002 	movt	r0, #2
   11f90:	e3a02031 	mov	r2, #49	; 0x31
   11f94:	eb004b01 	bl	24ba0 <assertion_failed>
   11f98:	eaffffdc 	b	11f10 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x2c>
   11f9c:	e30b1fec 	movw	r1, #49132	; 0xbfec
   11fa0:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   11fa4:	e3401002 	movt	r1, #2
   11fa8:	e3400002 	movt	r0, #2
   11fac:	e3a02033 	mov	r2, #51	; 0x33
   11fb0:	eb004afa 	bl	24ba0 <assertion_failed>
   11fb4:	eaffffd9 	b	11f20 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x3c>
   11fb8:	e3a02035 	mov	r2, #53	; 0x35
   11fbc:	e30b1fec 	movw	r1, #49132	; 0xbfec
   11fc0:	e30c0038 	movw	r0, #49208	; 0xc038
   11fc4:	e3401002 	movt	r1, #2
   11fc8:	e3400002 	movt	r0, #2
   11fcc:	eb004af3 	bl	24ba0 <assertion_failed>
   11fd0:	e3a0001c 	mov	r0, #28
   11fd4:	eb003fef 	bl	21f98 <operator new(unsigned int)>
   11fd8:	e5951008 	ldr	r1, [r5, #8]
   11fdc:	e1a06000 	mov	r6, r0
   11fe0:	eb00073c 	bl	13cd8 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   11fe4:	e1a00006 	mov	r0, r6
   11fe8:	e5846008 	str	r6, [r4, #8]
   11fec:	eaffffd5 	b	11f48 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x64>
   11ff0:	0002bfc8 	.word	0x0002bfc8

00011ff4 <CUSBFunction::GetInterfaceName() const>:
   11ff4:	e92d4030 	push	{r4, r5, lr}
   11ff8:	e1a05000 	mov	r5, r0
   11ffc:	e24dd00c 	sub	sp, sp, #12
   12000:	e3a00010 	mov	r0, #16
   12004:	eb003fe3 	bl	21f98 <operator new(unsigned int)>
   12008:	e30b10f0 	movw	r1, #45296	; 0xb0f0
   1200c:	e3401002 	movt	r1, #2
   12010:	e1a04000 	mov	r4, r0
   12014:	eb004fec 	bl	25fcc <CString::CString(char const*)>
   12018:	e595100c 	ldr	r1, [r5, #12]
   1201c:	e3510000 	cmp	r1, #0
   12020:	0a00000b 	beq	12054 <CUSBFunction::GetInterfaceName() const+0x60>
   12024:	e5d12005 	ldrb	r2, [r1, #5]
   12028:	e2423001 	sub	r3, r2, #1
   1202c:	e6ef3073 	uxtb	r3, r3
   12030:	e35300fd 	cmp	r3, #253	; 0xfd
   12034:	8a000006 	bhi	12054 <CUSBFunction::GetInterfaceName() const+0x60>
   12038:	e5d1c007 	ldrb	ip, [r1, #7]
   1203c:	e1a00004 	mov	r0, r4
   12040:	e5d13006 	ldrb	r3, [r1, #6]
   12044:	e30c1058 	movw	r1, #49240	; 0xc058
   12048:	e3401002 	movt	r1, #2
   1204c:	e58dc000 	str	ip, [sp]
   12050:	eb0052e9 	bl	26bfc <CString::Format(char const*, ...)>
   12054:	e1a00004 	mov	r0, r4
   12058:	e28dd00c 	add	sp, sp, #12
   1205c:	e8bd8030 	pop	{r4, r5, pc}

00012060 <CUSBFunction::GetNumEndpoints() const>:
   12060:	e590300c 	ldr	r3, [r0, #12]
   12064:	e3530000 	cmp	r3, #0
   12068:	0a000001 	beq	12074 <CUSBFunction::GetNumEndpoints() const+0x14>
   1206c:	e5d30004 	ldrb	r0, [r3, #4]
   12070:	e12fff1e 	bx	lr
   12074:	e92d4010 	push	{r4, lr}
   12078:	e3a02073 	mov	r2, #115	; 0x73
   1207c:	e1a04000 	mov	r4, r0
   12080:	e30b1fec 	movw	r1, #49132	; 0xbfec
   12084:	e30c0010 	movw	r0, #49168	; 0xc010
   12088:	e3401002 	movt	r1, #2
   1208c:	e3400002 	movt	r0, #2
   12090:	eb004ac2 	bl	24ba0 <assertion_failed>
   12094:	e594300c 	ldr	r3, [r4, #12]
   12098:	e5d30004 	ldrb	r0, [r3, #4]
   1209c:	e8bd8010 	pop	{r4, pc}

000120a0 <CUSBFunction::GetDevice() const>:
   120a0:	e5903004 	ldr	r3, [r0, #4]
   120a4:	e3530000 	cmp	r3, #0
   120a8:	0a000001 	beq	120b4 <CUSBFunction::GetDevice() const+0x14>
   120ac:	e1a00003 	mov	r0, r3
   120b0:	e12fff1e 	bx	lr
   120b4:	e92d4010 	push	{r4, lr}
   120b8:	e3a02079 	mov	r2, #121	; 0x79
   120bc:	e1a04000 	mov	r4, r0
   120c0:	e30b1fec 	movw	r1, #49132	; 0xbfec
   120c4:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   120c8:	e3401002 	movt	r1, #2
   120cc:	e3400002 	movt	r0, #2
   120d0:	eb004ab2 	bl	24ba0 <assertion_failed>
   120d4:	e5943004 	ldr	r3, [r4, #4]
   120d8:	e1a00003 	mov	r0, r3
   120dc:	e8bd8010 	pop	{r4, pc}

000120e0 <CUSBFunction::GetEndpoint0() const>:
   120e0:	e5903004 	ldr	r3, [r0, #4]
   120e4:	e3530000 	cmp	r3, #0
   120e8:	0a000001 	beq	120f4 <CUSBFunction::GetEndpoint0() const+0x14>
   120ec:	e1a00003 	mov	r0, r3
   120f0:	eaffec4b 	b	d224 <CUSBDevice::GetEndpoint0() const>
   120f4:	e92d4010 	push	{r4, lr}
   120f8:	e30b1fec 	movw	r1, #49132	; 0xbfec
   120fc:	e1a04000 	mov	r4, r0
   12100:	e3401002 	movt	r1, #2
   12104:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   12108:	e3a0207f 	mov	r2, #127	; 0x7f
   1210c:	e3400002 	movt	r0, #2
   12110:	eb004aa2 	bl	24ba0 <assertion_failed>
   12114:	e5943004 	ldr	r3, [r4, #4]
   12118:	e8bd4010 	pop	{r4, lr}
   1211c:	e1a00003 	mov	r0, r3
   12120:	eaffec3f 	b	d224 <CUSBDevice::GetEndpoint0() const>

00012124 <CUSBFunction::GetHost() const>:
   12124:	e5903004 	ldr	r3, [r0, #4]
   12128:	e3530000 	cmp	r3, #0
   1212c:	0a000001 	beq	12138 <CUSBFunction::GetHost() const+0x14>
   12130:	e1a00003 	mov	r0, r3
   12134:	eaffec4a 	b	d264 <CUSBDevice::GetHost() const>
   12138:	e92d4010 	push	{r4, lr}
   1213c:	e30b1fec 	movw	r1, #49132	; 0xbfec
   12140:	e1a04000 	mov	r4, r0
   12144:	e3401002 	movt	r1, #2
   12148:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   1214c:	e3a02085 	mov	r2, #133	; 0x85
   12150:	e3400002 	movt	r0, #2
   12154:	eb004a91 	bl	24ba0 <assertion_failed>
   12158:	e5943004 	ldr	r3, [r4, #4]
   1215c:	e8bd4010 	pop	{r4, lr}
   12160:	e1a00003 	mov	r0, r3
   12164:	eaffec3e 	b	d264 <CUSBDevice::GetHost() const>

00012168 <CUSBFunction::Configure()>:
   12168:	e590300c 	ldr	r3, [r0, #12]
   1216c:	e92d4070 	push	{r4, r5, r6, lr}
   12170:	e3530000 	cmp	r3, #0
   12174:	e24dd010 	sub	sp, sp, #16
   12178:	e1a05000 	mov	r5, r0
   1217c:	0a000021 	beq	12208 <CUSBFunction::Configure()+0xa0>
   12180:	e5d33003 	ldrb	r3, [r3, #3]
   12184:	e3530000 	cmp	r3, #0
   12188:	1a000002 	bne	12198 <CUSBFunction::Configure()+0x30>
   1218c:	e3a00001 	mov	r0, #1
   12190:	e28dd010 	add	sp, sp, #16
   12194:	e8bd8070 	pop	{r4, r5, r6, pc}
   12198:	e1a00005 	mov	r0, r5
   1219c:	e3a04000 	mov	r4, #0
   121a0:	ebffffdf 	bl	12124 <CUSBFunction::GetHost() const>
   121a4:	e1a06000 	mov	r6, r0
   121a8:	e1a00005 	mov	r0, r5
   121ac:	ebffffcb 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
   121b0:	e595100c 	ldr	r1, [r5, #12]
   121b4:	e58d400c 	str	r4, [sp, #12]
   121b8:	e3a0300b 	mov	r3, #11
   121bc:	e58d4008 	str	r4, [sp, #8]
   121c0:	e3a02001 	mov	r2, #1
   121c4:	e5d1c002 	ldrb	ip, [r1, #2]
   121c8:	e58dc004 	str	ip, [sp, #4]
   121cc:	e5d11003 	ldrb	r1, [r1, #3]
   121d0:	e58d1000 	str	r1, [sp]
   121d4:	e1a01000 	mov	r1, r0
   121d8:	e1a00006 	mov	r0, r6
   121dc:	ebffefec 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   121e0:	e1500004 	cmp	r0, r4
   121e4:	aaffffe8 	bge	1218c <CUSBFunction::Configure()+0x24>
   121e8:	eb004bee 	bl	251a8 <CLogger::Get()>
   121ec:	e30b3888 	movw	r3, #47240	; 0xb888
   121f0:	e3a02001 	mov	r2, #1
   121f4:	e3403002 	movt	r3, #2
   121f8:	e59f1028 	ldr	r1, [pc, #40]	; 12228 <CUSBFunction::Configure()+0xc0>
   121fc:	eb004cc6 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12200:	e1a00004 	mov	r0, r4
   12204:	eaffffe1 	b	12190 <CUSBFunction::Configure()+0x28>
   12208:	e30b1fec 	movw	r1, #49132	; 0xbfec
   1220c:	e30c0010 	movw	r0, #49168	; 0xc010
   12210:	e3401002 	movt	r1, #2
   12214:	e3400002 	movt	r0, #2
   12218:	e3a0204e 	mov	r2, #78	; 0x4e
   1221c:	eb004a5f 	bl	24ba0 <assertion_failed>
   12220:	e595300c 	ldr	r3, [r5, #12]
   12224:	eaffffd5 	b	12180 <CUSBFunction::Configure()+0x18>
   12228:	0002bfe4 	.word	0x0002bfe4

0001222c <CUSBFunction::GetDescriptor(unsigned char)>:
   1222c:	e92d4070 	push	{r4, r5, r6, lr}
   12230:	e1a04000 	mov	r4, r0
   12234:	e5900008 	ldr	r0, [r0, #8]
   12238:	e1a05001 	mov	r5, r1
   1223c:	e3500000 	cmp	r0, #0
   12240:	0a000002 	beq	12250 <CUSBFunction::GetDescriptor(unsigned char)+0x24>
   12244:	e1a01005 	mov	r1, r5
   12248:	e8bd4070 	pop	{r4, r5, r6, lr}
   1224c:	ea0006bc 	b	13d44 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   12250:	e30b1fec 	movw	r1, #49132	; 0xbfec
   12254:	e30b0150 	movw	r0, #45392	; 0xb150
   12258:	e3401002 	movt	r1, #2
   1225c:	e3400002 	movt	r0, #2
   12260:	e3a0208b 	mov	r2, #139	; 0x8b
   12264:	eb004a4d 	bl	24ba0 <assertion_failed>
   12268:	e5940008 	ldr	r0, [r4, #8]
   1226c:	e1a01005 	mov	r1, r5
   12270:	e8bd4070 	pop	{r4, r5, r6, lr}
   12274:	ea0006b2 	b	13d44 <CUSBConfigurationParser::GetDescriptor(unsigned char)>

00012278 <CUSBFunction::ConfigurationError(char const*) const>:
   12278:	e5903008 	ldr	r3, [r0, #8]
   1227c:	e92d4070 	push	{r4, r5, r6, lr}
   12280:	e3530000 	cmp	r3, #0
   12284:	e1a04000 	mov	r4, r0
   12288:	e1a05001 	mov	r5, r1
   1228c:	0a00000f 	beq	122d0 <CUSBFunction::ConfigurationError(char const*) const+0x58>
   12290:	e3550000 	cmp	r5, #0
   12294:	0a000003 	beq	122a8 <CUSBFunction::ConfigurationError(char const*) const+0x30>
   12298:	e1a01005 	mov	r1, r5
   1229c:	e5940008 	ldr	r0, [r4, #8]
   122a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   122a4:	ea0006f5 	b	13e80 <CUSBConfigurationParser::Error(char const*) const>
   122a8:	e30b1fec 	movw	r1, #49132	; 0xbfec
   122ac:	e30c0064 	movw	r0, #49252	; 0xc064
   122b0:	e3401002 	movt	r1, #2
   122b4:	e3400002 	movt	r0, #2
   122b8:	e3a02092 	mov	r2, #146	; 0x92
   122bc:	eb004a37 	bl	24ba0 <assertion_failed>
   122c0:	e1a01005 	mov	r1, r5
   122c4:	e5940008 	ldr	r0, [r4, #8]
   122c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   122cc:	ea0006eb 	b	13e80 <CUSBConfigurationParser::Error(char const*) const>
   122d0:	e30b1fec 	movw	r1, #49132	; 0xbfec
   122d4:	e30b0150 	movw	r0, #45392	; 0xb150
   122d8:	e3401002 	movt	r1, #2
   122dc:	e3400002 	movt	r0, #2
   122e0:	e3a02091 	mov	r2, #145	; 0x91
   122e4:	eb004a2d 	bl	24ba0 <assertion_failed>
   122e8:	eaffffe8 	b	12290 <CUSBFunction::ConfigurationError(char const*) const+0x18>

000122ec <CUSBFunction::GetInterfaceNumber() const>:
   122ec:	e590300c 	ldr	r3, [r0, #12]
   122f0:	e3530000 	cmp	r3, #0
   122f4:	0a000001 	beq	12300 <CUSBFunction::GetInterfaceNumber() const+0x14>
   122f8:	e5d30002 	ldrb	r0, [r3, #2]
   122fc:	e12fff1e 	bx	lr
   12300:	e92d4010 	push	{r4, lr}
   12304:	e3a02098 	mov	r2, #152	; 0x98
   12308:	e1a04000 	mov	r4, r0
   1230c:	e30b1fec 	movw	r1, #49132	; 0xbfec
   12310:	e30c0010 	movw	r0, #49168	; 0xc010
   12314:	e3401002 	movt	r1, #2
   12318:	e3400002 	movt	r0, #2
   1231c:	eb004a1f 	bl	24ba0 <assertion_failed>
   12320:	e594300c 	ldr	r3, [r4, #12]
   12324:	e5d30002 	ldrb	r0, [r3, #2]
   12328:	e8bd8010 	pop	{r4, pc}

0001232c <CUSBFunction::GetInterfaceSubClass() const>:
   1232c:	e590300c 	ldr	r3, [r0, #12]
   12330:	e3530000 	cmp	r3, #0
   12334:	0a000001 	beq	12340 <CUSBFunction::GetInterfaceSubClass() const+0x14>
   12338:	e5d30006 	ldrb	r0, [r3, #6]
   1233c:	e12fff1e 	bx	lr
   12340:	e92d4010 	push	{r4, lr}
   12344:	e3a0209e 	mov	r2, #158	; 0x9e
   12348:	e1a04000 	mov	r4, r0
   1234c:	e30b1fec 	movw	r1, #49132	; 0xbfec
   12350:	e30c0010 	movw	r0, #49168	; 0xc010
   12354:	e3401002 	movt	r1, #2
   12358:	e3400002 	movt	r0, #2
   1235c:	eb004a0f 	bl	24ba0 <assertion_failed>
   12360:	e594300c 	ldr	r3, [r4, #12]
   12364:	e5d30006 	ldrb	r0, [r3, #6]
   12368:	e8bd8010 	pop	{r4, pc}

0001236c <CUSBFunction::GetInterfaceProtocol() const>:
   1236c:	e590300c 	ldr	r3, [r0, #12]
   12370:	e3530000 	cmp	r3, #0
   12374:	0a000001 	beq	12380 <CUSBFunction::GetInterfaceProtocol() const+0x14>
   12378:	e5d30007 	ldrb	r0, [r3, #7]
   1237c:	e12fff1e 	bx	lr
   12380:	e92d4010 	push	{r4, lr}
   12384:	e3a020a4 	mov	r2, #164	; 0xa4
   12388:	e1a04000 	mov	r4, r0
   1238c:	e30b1fec 	movw	r1, #49132	; 0xbfec
   12390:	e30c0010 	movw	r0, #49168	; 0xc010
   12394:	e3401002 	movt	r1, #2
   12398:	e3400002 	movt	r0, #2
   1239c:	eb0049ff 	bl	24ba0 <assertion_failed>
   123a0:	e594300c 	ldr	r3, [r4, #12]
   123a4:	e5d30007 	ldrb	r0, [r3, #7]
   123a8:	e8bd8010 	pop	{r4, pc}

000123ac <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   123ac:	e12fff1e 	bx	lr

000123b0 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
   123b0:	e5900008 	ldr	r0, [r0, #8]
   123b4:	e2000001 	and	r0, r0, #1
   123b8:	e12fff1e 	bx	lr

000123bc <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   123bc:	e92d4010 	push	{r4, lr}
   123c0:	e3a0100c 	mov	r1, #12
   123c4:	e1a04000 	mov	r4, r0
   123c8:	eb003ef6 	bl	21fa8 <operator delete(void*, unsigned int)>
   123cc:	e1a00004 	mov	r0, r4
   123d0:	e8bd8010 	pop	{r4, pc}

000123d4 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
   123d4:	e30c1098 	movw	r1, #49304	; 0xc098
   123d8:	e30b0138 	movw	r0, #45368	; 0xb138
   123dc:	e3401002 	movt	r1, #2
   123e0:	e3400002 	movt	r0, #2
   123e4:	e3a02026 	mov	r2, #38	; 0x26
   123e8:	ea0049ec 	b	24ba0 <assertion_failed>

000123ec <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
   123ec:	e92d4010 	push	{r4, lr}
   123f0:	e3a0202b 	mov	r2, #43	; 0x2b
   123f4:	e30c1098 	movw	r1, #49304	; 0xc098
   123f8:	e30b0138 	movw	r0, #45368	; 0xb138
   123fc:	e3401002 	movt	r1, #2
   12400:	e3400002 	movt	r0, #2
   12404:	eb0049e5 	bl	24ba0 <assertion_failed>
   12408:	e3a00000 	mov	r0, #0
   1240c:	e8bd8010 	pop	{r4, pc}

00012410 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
   12410:	e30c1098 	movw	r1, #49304	; 0xc098
   12414:	e30b0138 	movw	r0, #45368	; 0xb138
   12418:	e3401002 	movt	r1, #2
   1241c:	e3400002 	movt	r0, #2
   12420:	e3a02031 	mov	r2, #49	; 0x31
   12424:	ea0049dd 	b	24ba0 <assertion_failed>

00012428 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
   12428:	e92d4010 	push	{r4, lr}
   1242c:	e24dd010 	sub	sp, sp, #16
   12430:	e1a04000 	mov	r4, r0
   12434:	e3001408 	movw	r1, #1032	; 0x408
   12438:	e28d0004 	add	r0, sp, #4
   1243c:	e3431f98 	movt	r1, #16280	; 0x3f98
   12440:	ebffe744 	bl	c158 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   12444:	e28d0004 	add	r0, sp, #4
   12448:	ebffe74b 	bl	c17c <CDWHCIRegister::Read()>
   1244c:	e5943004 	ldr	r3, [r4, #4]
   12450:	e3530000 	cmp	r3, #0
   12454:	e2800001 	add	r0, r0, #1
   12458:	e7ed0050 	ubfx	r0, r0, #0, #14
   1245c:	e5840008 	str	r0, [r4, #8]
   12460:	1a000005 	bne	1247c <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x54>
   12464:	e28d0004 	add	r0, sp, #4
   12468:	ebffe743 	bl	c17c <CDWHCIRegister::Read()>
   1246c:	e5943008 	ldr	r3, [r4, #8]
   12470:	e7ed0050 	ubfx	r0, r0, #0, #14
   12474:	e1500003 	cmp	r0, r3
   12478:	1afffff9 	bne	12464 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
   1247c:	e28d0004 	add	r0, sp, #4
   12480:	ebffe73c 	bl	c178 <CDWHCIRegister::~CDWHCIRegister()>
   12484:	e28dd010 	add	sp, sp, #16
   12488:	e8bd8010 	pop	{r4, pc}

0001248c <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(int)>:
   1248c:	e59f2010 	ldr	r2, [pc, #16]	; 124a4 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(int)+0x18>
   12490:	e5801004 	str	r1, [r0, #4]
   12494:	e3a01901 	mov	r1, #16384	; 0x4000
   12498:	e5801008 	str	r1, [r0, #8]
   1249c:	e5802000 	str	r2, [r0]
   124a0:	e12fff1e 	bx	lr
   124a4:	0002c07c 	.word	0x0002c07c

000124a8 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   124a8:	e92d4070 	push	{r4, r5, r6, lr}
   124ac:	e1a04000 	mov	r4, r0
   124b0:	e5905018 	ldr	r5, [r0, #24]
   124b4:	e59f305c 	ldr	r3, [pc, #92]	; 12518 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   124b8:	e3550000 	cmp	r5, #0
   124bc:	e5803000 	str	r3, [r0]
   124c0:	0a000004 	beq	124d8 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   124c4:	e1a00005 	mov	r0, r5
   124c8:	ebffeeab 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
   124cc:	e1a00005 	mov	r0, r5
   124d0:	e3a01018 	mov	r1, #24
   124d4:	eb003eb3 	bl	21fa8 <operator delete(void*, unsigned int)>
   124d8:	e5945014 	ldr	r5, [r4, #20]
   124dc:	e3a03000 	mov	r3, #0
   124e0:	e5843018 	str	r3, [r4, #24]
   124e4:	e1550003 	cmp	r5, r3
   124e8:	0a000004 	beq	12500 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   124ec:	e1a00005 	mov	r0, r5
   124f0:	ebffeea1 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
   124f4:	e1a00005 	mov	r0, r5
   124f8:	e3a01018 	mov	r1, #24
   124fc:	eb003ea9 	bl	21fa8 <operator delete(void*, unsigned int)>
   12500:	e3a03000 	mov	r3, #0
   12504:	e1a00004 	mov	r0, r4
   12508:	e5843014 	str	r3, [r4, #20]
   1250c:	ebfffe23 	bl	11da0 <CUSBFunction::~CUSBFunction()>
   12510:	e1a00004 	mov	r0, r4
   12514:	e8bd8070 	pop	{r4, r5, r6, pc}
   12518:	0002c0bc 	.word	0x0002c0bc

0001251c <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   1251c:	e92d4010 	push	{r4, lr}
   12520:	e1a04000 	mov	r4, r0
   12524:	ebffffdf 	bl	124a8 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   12528:	e1a00004 	mov	r0, r4
   1252c:	e3a0101c 	mov	r1, #28
   12530:	eb003e9c 	bl	21fa8 <operator delete(void*, unsigned int)>
   12534:	e1a00004 	mov	r0, r4
   12538:	e8bd8010 	pop	{r4, pc}

0001253c <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   1253c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12540:	e2517000 	subs	r7, r1, #0
   12544:	e1a05000 	mov	r5, r0
   12548:	e1a04002 	mov	r4, r2
   1254c:	0a000015 	beq	125a8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x6c>
   12550:	e3540000 	cmp	r4, #0
   12554:	0a00000c 	beq	1258c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x50>
   12558:	e1a00005 	mov	r0, r5
   1255c:	ebfffef0 	bl	12124 <CUSBFunction::GetHost() const>
   12560:	e2506000 	subs	r6, r0, #0
   12564:	0a000016 	beq	125c4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   12568:	e1a02007 	mov	r2, r7
   1256c:	e5951018 	ldr	r1, [r5, #24]
   12570:	e1a00006 	mov	r0, r6
   12574:	e1a03004 	mov	r3, r4
   12578:	ebffef63 	bl	e30c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
   1257c:	e3500000 	cmp	r0, #0
   12580:	a1a00004 	movge	r0, r4
   12584:	b3e00000 	mvnlt	r0, #0
   12588:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1258c:	e30c10e0 	movw	r1, #49376	; 0xc0e0
   12590:	e30c00f0 	movw	r0, #49392	; 0xc0f0
   12594:	e3401002 	movt	r1, #2
   12598:	e3400002 	movt	r0, #2
   1259c:	e3a0207f 	mov	r2, #127	; 0x7f
   125a0:	eb00497e 	bl	24ba0 <assertion_failed>
   125a4:	eaffffeb 	b	12558 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x1c>
   125a8:	e30c10e0 	movw	r1, #49376	; 0xc0e0
   125ac:	e30b0984 	movw	r0, #47492	; 0xb984
   125b0:	e3401002 	movt	r1, #2
   125b4:	e3400002 	movt	r0, #2
   125b8:	e3a0207e 	mov	r2, #126	; 0x7e
   125bc:	eb004977 	bl	24ba0 <assertion_failed>
   125c0:	eaffffe2 	b	12550 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x14>
   125c4:	e30c10e0 	movw	r1, #49376	; 0xc0e0
   125c8:	e30b06e8 	movw	r0, #46824	; 0xb6e8
   125cc:	e3401002 	movt	r1, #2
   125d0:	e3400002 	movt	r0, #2
   125d4:	e3a02082 	mov	r2, #130	; 0x82
   125d8:	eb004970 	bl	24ba0 <assertion_failed>
   125dc:	eaffffe1 	b	12568 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x2c>

000125e0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   125e0:	e92d4010 	push	{r4, lr}
   125e4:	e1a04000 	mov	r4, r0
   125e8:	ebfffe3d 	bl	11ee4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   125ec:	e59f2018 	ldr	r2, [pc, #24]	; 1260c <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   125f0:	e3a03000 	mov	r3, #0
   125f4:	e1a00004 	mov	r0, r4
   125f8:	e5c43010 	strb	r3, [r4, #16]
   125fc:	e5843014 	str	r3, [r4, #20]
   12600:	e5842000 	str	r2, [r4]
   12604:	e5843018 	str	r3, [r4, #24]
   12608:	e8bd8010 	pop	{r4, pc}
   1260c:	0002c0bc 	.word	0x0002c0bc

00012610 <CUSBPrinterDevice::Configure()>:
   12610:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12614:	e24dd01c 	sub	sp, sp, #28
   12618:	e1a05000 	mov	r5, r0
   1261c:	ebffff52 	bl	1236c <CUSBFunction::GetInterfaceProtocol() const>
   12620:	e2403001 	sub	r3, r0, #1
   12624:	e5c50010 	strb	r0, [r5, #16]
   12628:	e3530001 	cmp	r3, #1
   1262c:	9a00000b 	bls	12660 <CUSBPrinterDevice::Configure()+0x50>
   12630:	eb004adc 	bl	251a8 <CLogger::Get()>
   12634:	e5d5c010 	ldrb	ip, [r5, #16]
   12638:	e30c30fc 	movw	r3, #49404	; 0xc0fc
   1263c:	e3a02001 	mov	r2, #1
   12640:	e3403002 	movt	r3, #2
   12644:	e59f11c4 	ldr	r1, [pc, #452]	; 12810 <CUSBPrinterDevice::Configure()+0x200>
   12648:	e58dc000 	str	ip, [sp]
   1264c:	e3a04000 	mov	r4, #0
   12650:	eb004bb1 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12654:	e1a00004 	mov	r0, r4
   12658:	e28dd01c 	add	sp, sp, #28
   1265c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12660:	e1a00005 	mov	r0, r5
   12664:	ebfffe7d 	bl	12060 <CUSBFunction::GetNumEndpoints() const>
   12668:	e5d53010 	ldrb	r3, [r5, #16]
   1266c:	e3530001 	cmp	r3, #1
   12670:	03a03001 	moveq	r3, #1
   12674:	13a03002 	movne	r3, #2
   12678:	e1530000 	cmp	r3, r0
   1267c:	da000004 	ble	12694 <CUSBPrinterDevice::Configure()+0x84>
   12680:	ea000056 	b	127e0 <CUSBPrinterDevice::Configure()+0x1d0>
   12684:	e5d43003 	ldrb	r3, [r4, #3]
   12688:	e203303f 	and	r3, r3, #63	; 0x3f
   1268c:	e3530002 	cmp	r3, #2
   12690:	0a00002b 	beq	12744 <CUSBPrinterDevice::Configure()+0x134>
   12694:	e3a01005 	mov	r1, #5
   12698:	e1a00005 	mov	r0, r5
   1269c:	ebfffee2 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
   126a0:	e2504000 	subs	r4, r0, #0
   126a4:	1afffff6 	bne	12684 <CUSBPrinterDevice::Configure()+0x74>
   126a8:	e5954018 	ldr	r4, [r5, #24]
   126ac:	e3540000 	cmp	r4, #0
   126b0:	0a00004f 	beq	127f4 <CUSBPrinterDevice::Configure()+0x1e4>
   126b4:	e5d53010 	ldrb	r3, [r5, #16]
   126b8:	e1a00005 	mov	r0, r5
   126bc:	e3530001 	cmp	r3, #1
   126c0:	0a000002 	beq	126d0 <CUSBPrinterDevice::Configure()+0xc0>
   126c4:	e5954014 	ldr	r4, [r5, #20]
   126c8:	e3540000 	cmp	r4, #0
   126cc:	0a00004c 	beq	12804 <CUSBPrinterDevice::Configure()+0x1f4>
   126d0:	ebfffea4 	bl	12168 <CUSBFunction::Configure()>
   126d4:	e2504000 	subs	r4, r0, #0
   126d8:	0a00002a 	beq	12788 <CUSBPrinterDevice::Configure()+0x178>
   126dc:	e28d0008 	add	r0, sp, #8
   126e0:	e3a04001 	mov	r4, #1
   126e4:	eb004e32 	bl	25fb4 <CString::CString()>
   126e8:	e3013a5c 	movw	r3, #6748	; 0x1a5c
   126ec:	e3403003 	movt	r3, #3
   126f0:	e28d0008 	add	r0, sp, #8
   126f4:	e30c111c 	movw	r1, #49436	; 0xc11c
   126f8:	e3401002 	movt	r1, #2
   126fc:	e5932000 	ldr	r2, [r3]
   12700:	e082c004 	add	ip, r2, r4
   12704:	e583c000 	str	ip, [r3]
   12708:	eb00513b 	bl	26bfc <CString::Format(char const*, ...)>
   1270c:	eb004a79 	bl	250f8 <CDeviceNameService::Get()>
   12710:	e1a06000 	mov	r6, r0
   12714:	e28d0008 	add	r0, sp, #8
   12718:	eb004e3b 	bl	2600c <CString::operator char const*() const>
   1271c:	e1a02005 	mov	r2, r5
   12720:	e3a03000 	mov	r3, #0
   12724:	e1a01000 	mov	r1, r0
   12728:	e1a00006 	mov	r0, r6
   1272c:	eb0049fd 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   12730:	e28d0008 	add	r0, sp, #8
   12734:	eb004deb 	bl	25ee8 <CString::~CString()>
   12738:	e1a00004 	mov	r0, r4
   1273c:	e28dd01c 	add	sp, sp, #28
   12740:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12744:	e1d430d2 	ldrsb	r3, [r4, #2]
   12748:	e1a00005 	mov	r0, r5
   1274c:	e3530000 	cmp	r3, #0
   12750:	ba000015 	blt	127ac <CUSBPrinterDevice::Configure()+0x19c>
   12754:	e5953018 	ldr	r3, [r5, #24]
   12758:	e3530000 	cmp	r3, #0
   1275c:	1a00001f 	bne	127e0 <CUSBPrinterDevice::Configure()+0x1d0>
   12760:	ebfffe4e 	bl	120a0 <CUSBFunction::GetDevice() const>
   12764:	e1a07000 	mov	r7, r0
   12768:	e3a00018 	mov	r0, #24
   1276c:	eb003e09 	bl	21f98 <operator new(unsigned int)>
   12770:	e1a02004 	mov	r2, r4
   12774:	e1a01007 	mov	r1, r7
   12778:	e1a06000 	mov	r6, r0
   1277c:	ebffed6b 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12780:	e5856018 	str	r6, [r5, #24]
   12784:	eaffffc2 	b	12694 <CUSBPrinterDevice::Configure()+0x84>
   12788:	eb004a86 	bl	251a8 <CLogger::Get()>
   1278c:	e3a02001 	mov	r2, #1
   12790:	e59f1078 	ldr	r1, [pc, #120]	; 12810 <CUSBPrinterDevice::Configure()+0x200>
   12794:	e30b3888 	movw	r3, #47240	; 0xb888
   12798:	e3403002 	movt	r3, #2
   1279c:	eb004b5e 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   127a0:	e1a00004 	mov	r0, r4
   127a4:	e28dd01c 	add	sp, sp, #28
   127a8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   127ac:	e5953014 	ldr	r3, [r5, #20]
   127b0:	e3530000 	cmp	r3, #0
   127b4:	1a00000a 	bne	127e4 <CUSBPrinterDevice::Configure()+0x1d4>
   127b8:	ebfffe38 	bl	120a0 <CUSBFunction::GetDevice() const>
   127bc:	e1a07000 	mov	r7, r0
   127c0:	e3a00018 	mov	r0, #24
   127c4:	eb003df3 	bl	21f98 <operator new(unsigned int)>
   127c8:	e1a02004 	mov	r2, r4
   127cc:	e1a01007 	mov	r1, r7
   127d0:	e1a06000 	mov	r6, r0
   127d4:	ebffed55 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   127d8:	e5856014 	str	r6, [r5, #20]
   127dc:	eaffffac 	b	12694 <CUSBPrinterDevice::Configure()+0x84>
   127e0:	e1a00005 	mov	r0, r5
   127e4:	e59f1024 	ldr	r1, [pc, #36]	; 12810 <CUSBPrinterDevice::Configure()+0x200>
   127e8:	e3a04000 	mov	r4, #0
   127ec:	ebfffea1 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   127f0:	eaffff97 	b	12654 <CUSBPrinterDevice::Configure()+0x44>
   127f4:	e1a00005 	mov	r0, r5
   127f8:	e59f1010 	ldr	r1, [pc, #16]	; 12810 <CUSBPrinterDevice::Configure()+0x200>
   127fc:	ebfffe9d 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   12800:	eaffff93 	b	12654 <CUSBPrinterDevice::Configure()+0x44>
   12804:	e59f1004 	ldr	r1, [pc, #4]	; 12810 <CUSBPrinterDevice::Configure()+0x200>
   12808:	ebfffe9a 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   1280c:	eaffff90 	b	12654 <CUSBPrinterDevice::Configure()+0x44>
   12810:	0002c0d8 	.word	0x0002c0d8

00012814 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   12814:	e92d4070 	push	{r4, r5, r6, lr}
   12818:	e1a04000 	mov	r4, r0
   1281c:	e5900020 	ldr	r0, [r0, #32]
   12820:	e3a02000 	mov	r2, #0
   12824:	e59f30a0 	ldr	r3, [pc, #160]	; 128cc <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   12828:	e1500002 	cmp	r0, r2
   1282c:	e5842024 	str	r2, [r4, #36]	; 0x24
   12830:	e5843000 	str	r3, [r4]
   12834:	0a000000 	beq	1283c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   12838:	eb003dd9 	bl	21fa4 <operator delete[](void*)>
   1283c:	e5945018 	ldr	r5, [r4, #24]
   12840:	e3a03000 	mov	r3, #0
   12844:	e5843020 	str	r3, [r4, #32]
   12848:	e1550003 	cmp	r5, r3
   1284c:	0a000004 	beq	12864 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   12850:	e1a00005 	mov	r0, r5
   12854:	ebffedc8 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
   12858:	e1a00005 	mov	r0, r5
   1285c:	e3a01018 	mov	r1, #24
   12860:	eb003dd0 	bl	21fa8 <operator delete(void*, unsigned int)>
   12864:	e5945014 	ldr	r5, [r4, #20]
   12868:	e3a03000 	mov	r3, #0
   1286c:	e5843018 	str	r3, [r4, #24]
   12870:	e1550003 	cmp	r5, r3
   12874:	0a000004 	beq	1288c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   12878:	e1a00005 	mov	r0, r5
   1287c:	ebffedbe 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
   12880:	e1a00005 	mov	r0, r5
   12884:	e3a01018 	mov	r1, #24
   12888:	eb003dc6 	bl	21fa8 <operator delete(void*, unsigned int)>
   1288c:	e5945010 	ldr	r5, [r4, #16]
   12890:	e3a03000 	mov	r3, #0
   12894:	e5843014 	str	r3, [r4, #20]
   12898:	e1550003 	cmp	r5, r3
   1289c:	0a000004 	beq	128b4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   128a0:	e1a00005 	mov	r0, r5
   128a4:	ebffedb4 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
   128a8:	e1a00005 	mov	r0, r5
   128ac:	e3a01018 	mov	r1, #24
   128b0:	eb003dbc 	bl	21fa8 <operator delete(void*, unsigned int)>
   128b4:	e3a03000 	mov	r3, #0
   128b8:	e1a00004 	mov	r0, r4
   128bc:	e5843010 	str	r3, [r4, #16]
   128c0:	ebfffd36 	bl	11da0 <CUSBFunction::~CUSBFunction()>
   128c4:	e1a00004 	mov	r0, r4
   128c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   128cc:	0002c12c 	.word	0x0002c12c

000128d0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   128d0:	e92d4010 	push	{r4, lr}
   128d4:	e1a04000 	mov	r4, r0
   128d8:	ebffffcd 	bl	12814 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   128dc:	e1a00004 	mov	r0, r4
   128e0:	e3a01028 	mov	r1, #40	; 0x28
   128e4:	eb003daf 	bl	21fa8 <operator delete(void*, unsigned int)>
   128e8:	e1a00004 	mov	r0, r4
   128ec:	e8bd8010 	pop	{r4, pc}

000128f0 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   128f0:	e92d4010 	push	{r4, lr}
   128f4:	e1a04000 	mov	r4, r0
   128f8:	ebfffd79 	bl	11ee4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   128fc:	e59f2024 	ldr	r2, [pc, #36]	; 12928 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   12900:	e3a03000 	mov	r3, #0
   12904:	e1a00004 	mov	r0, r4
   12908:	e5843010 	str	r3, [r4, #16]
   1290c:	e5843014 	str	r3, [r4, #20]
   12910:	e5842000 	str	r2, [r4]
   12914:	e5843018 	str	r3, [r4, #24]
   12918:	e584301c 	str	r3, [r4, #28]
   1291c:	e5843020 	str	r3, [r4, #32]
   12920:	e5843024 	str	r3, [r4, #36]	; 0x24
   12924:	e8bd8010 	pop	{r4, pc}
   12928:	0002c12c 	.word	0x0002c12c

0001292c <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   1292c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12930:	e24dd014 	sub	sp, sp, #20
   12934:	e1a06001 	mov	r6, r1
   12938:	e1a04002 	mov	r4, r2
   1293c:	e1a07000 	mov	r7, r0
   12940:	ebfffdf7 	bl	12124 <CUSBFunction::GetHost() const>
   12944:	e6ff4074 	uxth	r4, r4
   12948:	e1a05000 	mov	r5, r0
   1294c:	e1a00007 	mov	r0, r7
   12950:	ebfffde2 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
   12954:	e3a0c000 	mov	ip, #0
   12958:	e58d6008 	str	r6, [sp, #8]
   1295c:	e1a0300c 	mov	r3, ip
   12960:	e58dc004 	str	ip, [sp, #4]
   12964:	e3a02020 	mov	r2, #32
   12968:	e58d400c 	str	r4, [sp, #12]
   1296c:	e58dc000 	str	ip, [sp]
   12970:	e1a01000 	mov	r1, r0
   12974:	e1a00005 	mov	r0, r5
   12978:	ebffee05 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1297c:	e1e00000 	mvn	r0, r0
   12980:	e1a00fa0 	lsr	r0, r0, #31
   12984:	e28dd014 	add	sp, sp, #20
   12988:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001298c <CUSBBluetoothDevice::StartRequest()>:
   1298c:	e5903010 	ldr	r3, [r0, #16]
   12990:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12994:	e3530000 	cmp	r3, #0
   12998:	e24dd00c 	sub	sp, sp, #12
   1299c:	e1a04000 	mov	r4, r0
   129a0:	0a00003b 	beq	12a94 <CUSBBluetoothDevice::StartRequest()+0x108>
   129a4:	e5943020 	ldr	r3, [r4, #32]
   129a8:	e3530000 	cmp	r3, #0
   129ac:	0a000031 	beq	12a78 <CUSBBluetoothDevice::StartRequest()+0xec>
   129b0:	e594601c 	ldr	r6, [r4, #28]
   129b4:	e3560000 	cmp	r6, #0
   129b8:	0a000020 	beq	12a40 <CUSBBluetoothDevice::StartRequest()+0xb4>
   129bc:	e3a020a6 	mov	r2, #166	; 0xa6
   129c0:	e30c1150 	movw	r1, #49488	; 0xc150
   129c4:	e30b0dcc 	movw	r0, #48588	; 0xbdcc
   129c8:	e3401002 	movt	r1, #2
   129cc:	e3400002 	movt	r0, #2
   129d0:	eb004872 	bl	24ba0 <assertion_failed>
   129d4:	e5940010 	ldr	r0, [r4, #16]
   129d8:	ebffed80 	bl	dfe0 <CUSBEndpoint::GetMaxPacketSize() const>
   129dc:	e1a06000 	mov	r6, r0
   129e0:	e3a00028 	mov	r0, #40	; 0x28
   129e4:	eb003d6b 	bl	21f98 <operator new(unsigned int)>
   129e8:	e5942020 	ldr	r2, [r4, #32]
   129ec:	e5941010 	ldr	r1, [r4, #16]
   129f0:	e3a0c000 	mov	ip, #0
   129f4:	e1a03006 	mov	r3, r6
   129f8:	e58dc000 	str	ip, [sp]
   129fc:	e1a05000 	mov	r5, r0
   12a00:	ebffee59 	bl	e36c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12a04:	e1a00005 	mov	r0, r5
   12a08:	e584501c 	str	r5, [r4, #28]
   12a0c:	e1a03004 	mov	r3, r4
   12a10:	e3a02000 	mov	r2, #0
   12a14:	e3021c34 	movw	r1, #11316	; 0x2c34
   12a18:	e3401001 	movt	r1, #1
   12a1c:	ebffeec9 	bl	e548 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   12a20:	e1a00004 	mov	r0, r4
   12a24:	ebfffdbe 	bl	12124 <CUSBFunction::GetHost() const>
   12a28:	e594101c 	ldr	r1, [r4, #28]
   12a2c:	e5903000 	ldr	r3, [r0]
   12a30:	e593300c 	ldr	r3, [r3, #12]
   12a34:	e28dd00c 	add	sp, sp, #12
   12a38:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   12a3c:	e12fff13 	bx	r3
   12a40:	e5940010 	ldr	r0, [r4, #16]
   12a44:	ebffed65 	bl	dfe0 <CUSBEndpoint::GetMaxPacketSize() const>
   12a48:	e1a07000 	mov	r7, r0
   12a4c:	e3a00028 	mov	r0, #40	; 0x28
   12a50:	eb003d50 	bl	21f98 <operator new(unsigned int)>
   12a54:	e5942020 	ldr	r2, [r4, #32]
   12a58:	e5941010 	ldr	r1, [r4, #16]
   12a5c:	e1a03007 	mov	r3, r7
   12a60:	e58d6000 	str	r6, [sp]
   12a64:	e1a05000 	mov	r5, r0
   12a68:	ebffee3f 	bl	e36c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12a6c:	e584501c 	str	r5, [r4, #28]
   12a70:	e1a00005 	mov	r0, r5
   12a74:	eaffffe4 	b	12a0c <CUSBBluetoothDevice::StartRequest()+0x80>
   12a78:	e30c1150 	movw	r1, #49488	; 0xc150
   12a7c:	e30c0180 	movw	r0, #49536	; 0xc180
   12a80:	e3401002 	movt	r1, #2
   12a84:	e3400002 	movt	r0, #2
   12a88:	e3a020a4 	mov	r2, #164	; 0xa4
   12a8c:	eb004843 	bl	24ba0 <assertion_failed>
   12a90:	eaffffc6 	b	129b0 <CUSBBluetoothDevice::StartRequest()+0x24>
   12a94:	e30c1150 	movw	r1, #49488	; 0xc150
   12a98:	e30c0164 	movw	r0, #49508	; 0xc164
   12a9c:	e3401002 	movt	r1, #2
   12aa0:	e3400002 	movt	r0, #2
   12aa4:	e3a020a3 	mov	r2, #163	; 0xa3
   12aa8:	eb00483c 	bl	24ba0 <assertion_failed>
   12aac:	eaffffbc 	b	129a4 <CUSBBluetoothDevice::StartRequest()+0x18>

00012ab0 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   12ab0:	e3510000 	cmp	r1, #0
   12ab4:	e92d4010 	push	{r4, lr}
   12ab8:	e1a04000 	mov	r4, r0
   12abc:	e5801024 	str	r1, [r0, #36]	; 0x24
   12ac0:	0a000002 	beq	12ad0 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x20>
   12ac4:	e1a00004 	mov	r0, r4
   12ac8:	e8bd4010 	pop	{r4, lr}
   12acc:	eaffffae 	b	1298c <CUSBBluetoothDevice::StartRequest()>
   12ad0:	e30c1150 	movw	r1, #49488	; 0xc150
   12ad4:	e30c0194 	movw	r0, #49556	; 0xc194
   12ad8:	e3401002 	movt	r1, #2
   12adc:	e3400002 	movt	r0, #2
   12ae0:	e3a0209c 	mov	r2, #156	; 0x9c
   12ae4:	eb00482d 	bl	24ba0 <assertion_failed>
   12ae8:	e1a00004 	mov	r0, r4
   12aec:	e8bd4010 	pop	{r4, lr}
   12af0:	eaffffa5 	b	1298c <CUSBBluetoothDevice::StartRequest()>

00012af4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   12af4:	e92d4070 	push	{r4, r5, r6, lr}
   12af8:	e2515000 	subs	r5, r1, #0
   12afc:	e1a04000 	mov	r4, r0
   12b00:	0a00003b 	beq	12bf4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x100>
   12b04:	e594301c 	ldr	r3, [r4, #28]
   12b08:	e1550003 	cmp	r5, r3
   12b0c:	0a000005 	beq	12b28 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x34>
   12b10:	e30c1150 	movw	r1, #49488	; 0xc150
   12b14:	e30b0e38 	movw	r0, #48696	; 0xbe38
   12b18:	e3401002 	movt	r1, #2
   12b1c:	e3400002 	movt	r0, #2
   12b20:	e3a020b3 	mov	r2, #179	; 0xb3
   12b24:	eb00481d 	bl	24ba0 <assertion_failed>
   12b28:	e5943020 	ldr	r3, [r4, #32]
   12b2c:	e3530000 	cmp	r3, #0
   12b30:	0a000028 	beq	12bd8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   12b34:	e1a00005 	mov	r0, r5
   12b38:	ebffee46 	bl	e458 <CUSBRequest::GetStatus() const>
   12b3c:	e3500000 	cmp	r0, #0
   12b40:	0a00001d 	beq	12bbc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xc8>
   12b44:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   12b48:	e3560000 	cmp	r6, #0
   12b4c:	0a00002f 	beq	12c10 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   12b50:	e1a00005 	mov	r0, r5
   12b54:	e5945020 	ldr	r5, [r4, #32]
   12b58:	ebffee40 	bl	e460 <CUSBRequest::GetResultLength() const>
   12b5c:	e1a01000 	mov	r1, r0
   12b60:	e1a00005 	mov	r0, r5
   12b64:	e12fff36 	blx	r6
   12b68:	e594501c 	ldr	r5, [r4, #28]
   12b6c:	e3550000 	cmp	r5, #0
   12b70:	0a000004 	beq	12b88 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x94>
   12b74:	e1a00005 	mov	r0, r5
   12b78:	ebffee21 	bl	e404 <CUSBRequest::~CUSBRequest()>
   12b7c:	e1a00005 	mov	r0, r5
   12b80:	e3a01028 	mov	r1, #40	; 0x28
   12b84:	eb003d07 	bl	21fa8 <operator delete(void*, unsigned int)>
   12b88:	e3a03000 	mov	r3, #0
   12b8c:	e1a00004 	mov	r0, r4
   12b90:	e584301c 	str	r3, [r4, #28]
   12b94:	ebffff7c 	bl	1298c <CUSBBluetoothDevice::StartRequest()>
   12b98:	e3500000 	cmp	r0, #0
   12b9c:	18bd8070 	popne	{r4, r5, r6, pc}
   12ba0:	eb004980 	bl	251a8 <CLogger::Get()>
   12ba4:	e30b3e48 	movw	r3, #48712	; 0xbe48
   12ba8:	e3a02001 	mov	r2, #1
   12bac:	e3403002 	movt	r3, #2
   12bb0:	e59f1078 	ldr	r1, [pc, #120]	; 12c30 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x13c>
   12bb4:	e8bd4070 	pop	{r4, r5, r6, lr}
   12bb8:	ea004a57 	b	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12bbc:	eb004979 	bl	251a8 <CLogger::Get()>
   12bc0:	e30c31ac 	movw	r3, #49580	; 0xc1ac
   12bc4:	e3a02002 	mov	r2, #2
   12bc8:	e3403002 	movt	r3, #2
   12bcc:	e59f105c 	ldr	r1, [pc, #92]	; 12c30 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x13c>
   12bd0:	eb004a51 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12bd4:	eaffffe3 	b	12b68 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x74>
   12bd8:	e30c1150 	movw	r1, #49488	; 0xc150
   12bdc:	e30c0180 	movw	r0, #49536	; 0xc180
   12be0:	e3401002 	movt	r1, #2
   12be4:	e3400002 	movt	r0, #2
   12be8:	e3a020b4 	mov	r2, #180	; 0xb4
   12bec:	eb0047eb 	bl	24ba0 <assertion_failed>
   12bf0:	eaffffcf 	b	12b34 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x40>
   12bf4:	e30c1150 	movw	r1, #49488	; 0xc150
   12bf8:	e30a0a2c 	movw	r0, #43564	; 0xaa2c
   12bfc:	e3401002 	movt	r1, #2
   12c00:	e3400002 	movt	r0, #2
   12c04:	e3a020b2 	mov	r2, #178	; 0xb2
   12c08:	eb0047e4 	bl	24ba0 <assertion_failed>
   12c0c:	eaffffbc 	b	12b04 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10>
   12c10:	e30c1150 	movw	r1, #49488	; 0xc150
   12c14:	e30c0194 	movw	r0, #49556	; 0xc194
   12c18:	e3401002 	movt	r1, #2
   12c1c:	e3400002 	movt	r0, #2
   12c20:	e3a020b8 	mov	r2, #184	; 0xb8
   12c24:	eb0047dd 	bl	24ba0 <assertion_failed>
   12c28:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   12c2c:	eaffffc7 	b	12b50 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   12c30:	0002c148 	.word	0x0002c148

00012c34 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   12c34:	e92d4070 	push	{r4, r5, r6, lr}
   12c38:	e2524000 	subs	r4, r2, #0
   12c3c:	e1a05000 	mov	r5, r0
   12c40:	0a000003 	beq	12c54 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   12c44:	e1a01005 	mov	r1, r5
   12c48:	e1a00004 	mov	r0, r4
   12c4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12c50:	eaffffa7 	b	12af4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   12c54:	e30c1150 	movw	r1, #49488	; 0xc150
   12c58:	e30a0940 	movw	r0, #43328	; 0xa940
   12c5c:	e3401002 	movt	r1, #2
   12c60:	e3400002 	movt	r0, #2
   12c64:	e3a020cc 	mov	r2, #204	; 0xcc
   12c68:	eb0047cc 	bl	24ba0 <assertion_failed>
   12c6c:	e1a01005 	mov	r1, r5
   12c70:	e1a00004 	mov	r0, r4
   12c74:	e8bd4070 	pop	{r4, r5, r6, lr}
   12c78:	eaffff9d 	b	12af4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>

00012c7c <CUSBBluetoothDevice::Configure()>:
   12c7c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12c80:	e24dd014 	sub	sp, sp, #20
   12c84:	e1a04000 	mov	r4, r0
   12c88:	ebfffd97 	bl	122ec <CUSBFunction::GetInterfaceNumber() const>
   12c8c:	e2506000 	subs	r6, r0, #0
   12c90:	1a000040 	bne	12d98 <CUSBBluetoothDevice::Configure()+0x11c>
   12c94:	e1a00004 	mov	r0, r4
   12c98:	ebfffcf0 	bl	12060 <CUSBFunction::GetNumEndpoints() const>
   12c9c:	e3500003 	cmp	r0, #3
   12ca0:	1a000036 	bne	12d80 <CUSBBluetoothDevice::Configure()+0x104>
   12ca4:	e3a01005 	mov	r1, #5
   12ca8:	e1a00004 	mov	r0, r4
   12cac:	ebfffd5e 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
   12cb0:	e2505000 	subs	r5, r0, #0
   12cb4:	0a000041 	beq	12dc0 <CUSBBluetoothDevice::Configure()+0x144>
   12cb8:	e5d52003 	ldrb	r2, [r5, #3]
   12cbc:	e202203f 	and	r2, r2, #63	; 0x3f
   12cc0:	e3520002 	cmp	r2, #2
   12cc4:	0a00000f 	beq	12d08 <CUSBBluetoothDevice::Configure()+0x8c>
   12cc8:	e3520003 	cmp	r2, #3
   12ccc:	1afffff4 	bne	12ca4 <CUSBBluetoothDevice::Configure()+0x28>
   12cd0:	e5943010 	ldr	r3, [r4, #16]
   12cd4:	e1a00004 	mov	r0, r4
   12cd8:	e3530000 	cmp	r3, #0
   12cdc:	1a000063 	bne	12e70 <CUSBBluetoothDevice::Configure()+0x1f4>
   12ce0:	ebfffcee 	bl	120a0 <CUSBFunction::GetDevice() const>
   12ce4:	e1a07000 	mov	r7, r0
   12ce8:	e3a00018 	mov	r0, #24
   12cec:	eb003ca9 	bl	21f98 <operator new(unsigned int)>
   12cf0:	e1a02005 	mov	r2, r5
   12cf4:	e1a01007 	mov	r1, r7
   12cf8:	e1a06000 	mov	r6, r0
   12cfc:	ebffec0b 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12d00:	e5846010 	str	r6, [r4, #16]
   12d04:	eaffffe6 	b	12ca4 <CUSBBluetoothDevice::Configure()+0x28>
   12d08:	e1d530d2 	ldrsb	r3, [r5, #2]
   12d0c:	e1a00004 	mov	r0, r4
   12d10:	e3530000 	cmp	r3, #0
   12d14:	ba00000c 	blt	12d4c <CUSBBluetoothDevice::Configure()+0xd0>
   12d18:	e5943018 	ldr	r3, [r4, #24]
   12d1c:	e3530000 	cmp	r3, #0
   12d20:	1a000051 	bne	12e6c <CUSBBluetoothDevice::Configure()+0x1f0>
   12d24:	ebfffcdd 	bl	120a0 <CUSBFunction::GetDevice() const>
   12d28:	e1a07000 	mov	r7, r0
   12d2c:	e3a00018 	mov	r0, #24
   12d30:	eb003c98 	bl	21f98 <operator new(unsigned int)>
   12d34:	e1a02005 	mov	r2, r5
   12d38:	e1a01007 	mov	r1, r7
   12d3c:	e1a06000 	mov	r6, r0
   12d40:	ebffebfa 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12d44:	e5846018 	str	r6, [r4, #24]
   12d48:	eaffffd5 	b	12ca4 <CUSBBluetoothDevice::Configure()+0x28>
   12d4c:	e5943014 	ldr	r3, [r4, #20]
   12d50:	e3530000 	cmp	r3, #0
   12d54:	1a000045 	bne	12e70 <CUSBBluetoothDevice::Configure()+0x1f4>
   12d58:	ebfffcd0 	bl	120a0 <CUSBFunction::GetDevice() const>
   12d5c:	e1a07000 	mov	r7, r0
   12d60:	e3a00018 	mov	r0, #24
   12d64:	eb003c8b 	bl	21f98 <operator new(unsigned int)>
   12d68:	e1a02005 	mov	r2, r5
   12d6c:	e1a01007 	mov	r1, r7
   12d70:	e1a06000 	mov	r6, r0
   12d74:	ebffebed 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12d78:	e5846014 	str	r6, [r4, #20]
   12d7c:	eaffffc8 	b	12ca4 <CUSBBluetoothDevice::Configure()+0x28>
   12d80:	e1a00004 	mov	r0, r4
   12d84:	e59f1118 	ldr	r1, [pc, #280]	; 12ea4 <CUSBBluetoothDevice::Configure()+0x228>
   12d88:	ebfffd3a 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   12d8c:	e1a00006 	mov	r0, r6
   12d90:	e28dd014 	add	sp, sp, #20
   12d94:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12d98:	eb004902 	bl	251a8 <CLogger::Get()>
   12d9c:	e3a02002 	mov	r2, #2
   12da0:	e59f10fc 	ldr	r1, [pc, #252]	; 12ea4 <CUSBBluetoothDevice::Configure()+0x228>
   12da4:	e30c31bc 	movw	r3, #49596	; 0xc1bc
   12da8:	e3403002 	movt	r3, #2
   12dac:	e3a06000 	mov	r6, #0
   12db0:	eb0049d9 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12db4:	e1a00006 	mov	r0, r6
   12db8:	e28dd014 	add	sp, sp, #20
   12dbc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12dc0:	e5943014 	ldr	r3, [r4, #20]
   12dc4:	e3530000 	cmp	r3, #0
   12dc8:	0a000027 	beq	12e6c <CUSBBluetoothDevice::Configure()+0x1f0>
   12dcc:	e5943018 	ldr	r3, [r4, #24]
   12dd0:	e3530000 	cmp	r3, #0
   12dd4:	0a000024 	beq	12e6c <CUSBBluetoothDevice::Configure()+0x1f0>
   12dd8:	e5943010 	ldr	r3, [r4, #16]
   12ddc:	e3530000 	cmp	r3, #0
   12de0:	0a000021 	beq	12e6c <CUSBBluetoothDevice::Configure()+0x1f0>
   12de4:	e1a00004 	mov	r0, r4
   12de8:	ebfffcde 	bl	12168 <CUSBFunction::Configure()>
   12dec:	e2506000 	subs	r6, r0, #0
   12df0:	0a000024 	beq	12e88 <CUSBBluetoothDevice::Configure()+0x20c>
   12df4:	e5940010 	ldr	r0, [r4, #16]
   12df8:	e3a06001 	mov	r6, #1
   12dfc:	ebffec77 	bl	dfe0 <CUSBEndpoint::GetMaxPacketSize() const>
   12e00:	eb003c65 	bl	21f9c <operator new[](unsigned int)>
   12e04:	e5840020 	str	r0, [r4, #32]
   12e08:	e1a0000d 	mov	r0, sp
   12e0c:	eb004c68 	bl	25fb4 <CString::CString()>
   12e10:	e3013a60 	movw	r3, #6752	; 0x1a60
   12e14:	e3403003 	movt	r3, #3
   12e18:	e1a0000d 	mov	r0, sp
   12e1c:	e30c11e0 	movw	r1, #49632	; 0xc1e0
   12e20:	e3401002 	movt	r1, #2
   12e24:	e5932000 	ldr	r2, [r3]
   12e28:	e082c006 	add	ip, r2, r6
   12e2c:	e583c000 	str	ip, [r3]
   12e30:	eb004f71 	bl	26bfc <CString::Format(char const*, ...)>
   12e34:	eb0048af 	bl	250f8 <CDeviceNameService::Get()>
   12e38:	e1a07000 	mov	r7, r0
   12e3c:	e1a0000d 	mov	r0, sp
   12e40:	eb004c71 	bl	2600c <CString::operator char const*() const>
   12e44:	e1a03005 	mov	r3, r5
   12e48:	e1a02004 	mov	r2, r4
   12e4c:	e1a01000 	mov	r1, r0
   12e50:	e1a00007 	mov	r0, r7
   12e54:	eb004833 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   12e58:	e1a0000d 	mov	r0, sp
   12e5c:	eb004c21 	bl	25ee8 <CString::~CString()>
   12e60:	e1a00006 	mov	r0, r6
   12e64:	e28dd014 	add	sp, sp, #20
   12e68:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12e6c:	e1a00004 	mov	r0, r4
   12e70:	e59f102c 	ldr	r1, [pc, #44]	; 12ea4 <CUSBBluetoothDevice::Configure()+0x228>
   12e74:	e3a06000 	mov	r6, #0
   12e78:	ebfffcfe 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   12e7c:	e1a00006 	mov	r0, r6
   12e80:	e28dd014 	add	sp, sp, #20
   12e84:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12e88:	eb0048c6 	bl	251a8 <CLogger::Get()>
   12e8c:	e30b3888 	movw	r3, #47240	; 0xb888
   12e90:	e3a02001 	mov	r2, #1
   12e94:	e3403002 	movt	r3, #2
   12e98:	e59f1004 	ldr	r1, [pc, #4]	; 12ea4 <CUSBBluetoothDevice::Configure()+0x228>
   12e9c:	eb00499e 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12ea0:	eaffffb9 	b	12d8c <CUSBBluetoothDevice::Configure()+0x110>
   12ea4:	0002c148 	.word	0x0002c148

00012ea8 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   12ea8:	e92d4070 	push	{r4, r5, r6, lr}
   12eac:	e1a04000 	mov	r4, r0
   12eb0:	e5900020 	ldr	r0, [r0, #32]
   12eb4:	e59f304c 	ldr	r3, [pc, #76]	; 12f08 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   12eb8:	e3500000 	cmp	r0, #0
   12ebc:	e5843000 	str	r3, [r4]
   12ec0:	0a000002 	beq	12ed0 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   12ec4:	eb003c36 	bl	21fa4 <operator delete[](void*)>
   12ec8:	e3a03000 	mov	r3, #0
   12ecc:	e5843020 	str	r3, [r4, #32]
   12ed0:	e5945010 	ldr	r5, [r4, #16]
   12ed4:	e3550000 	cmp	r5, #0
   12ed8:	0a000006 	beq	12ef8 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   12edc:	e1a00005 	mov	r0, r5
   12ee0:	ebffec25 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
   12ee4:	e1a00005 	mov	r0, r5
   12ee8:	e3a01018 	mov	r1, #24
   12eec:	eb003c2d 	bl	21fa8 <operator delete(void*, unsigned int)>
   12ef0:	e3a03000 	mov	r3, #0
   12ef4:	e5843010 	str	r3, [r4, #16]
   12ef8:	e1a00004 	mov	r0, r4
   12efc:	ebfffba7 	bl	11da0 <CUSBFunction::~CUSBFunction()>
   12f00:	e1a00004 	mov	r0, r4
   12f04:	e8bd8070 	pop	{r4, r5, r6, pc}
   12f08:	0002c1f0 	.word	0x0002c1f0

00012f0c <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   12f0c:	e92d4010 	push	{r4, lr}
   12f10:	e1a04000 	mov	r4, r0
   12f14:	ebffffe3 	bl	12ea8 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   12f18:	e1a00004 	mov	r0, r4
   12f1c:	e3a01028 	mov	r1, #40	; 0x28
   12f20:	eb003c20 	bl	21fa8 <operator delete(void*, unsigned int)>
   12f24:	e1a00004 	mov	r0, r4
   12f28:	e8bd8010 	pop	{r4, pc}

00012f2c <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   12f2c:	e92d4010 	push	{r4, lr}
   12f30:	e1a04000 	mov	r4, r0
   12f34:	ebfffbea 	bl	11ee4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   12f38:	e59f2020 	ldr	r2, [pc, #32]	; 12f60 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   12f3c:	e3a03000 	mov	r3, #0
   12f40:	e1a00004 	mov	r0, r4
   12f44:	e5843010 	str	r3, [r4, #16]
   12f48:	e5843014 	str	r3, [r4, #20]
   12f4c:	e5842000 	str	r2, [r4]
   12f50:	e5843018 	str	r3, [r4, #24]
   12f54:	e5843020 	str	r3, [r4, #32]
   12f58:	e5843024 	str	r3, [r4, #36]	; 0x24
   12f5c:	e8bd8010 	pop	{r4, pc}
   12f60:	0002c1f0 	.word	0x0002c1f0

00012f64 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   12f64:	e5903014 	ldr	r3, [r0, #20]
   12f68:	e92d4070 	push	{r4, r5, r6, lr}
   12f6c:	e3530000 	cmp	r3, #0
   12f70:	e1a04000 	mov	r4, r0
   12f74:	e1a05001 	mov	r5, r1
   12f78:	0a000005 	beq	12f94 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x30>
   12f7c:	e30c1254 	movw	r1, #49748	; 0xc254
   12f80:	e30c0260 	movw	r0, #49760	; 0xc260
   12f84:	e3401002 	movt	r1, #2
   12f88:	e3400002 	movt	r0, #2
   12f8c:	e3a0209a 	mov	r2, #154	; 0x9a
   12f90:	eb004702 	bl	24ba0 <assertion_failed>
   12f94:	e3550000 	cmp	r5, #0
   12f98:	e5845014 	str	r5, [r4, #20]
   12f9c:	18bd8070 	popne	{r4, r5, r6, pc}
   12fa0:	e30c1254 	movw	r1, #49748	; 0xc254
   12fa4:	e30c0278 	movw	r0, #49784	; 0xc278
   12fa8:	e3401002 	movt	r1, #2
   12fac:	e3400002 	movt	r0, #2
   12fb0:	e3a0209c 	mov	r2, #156	; 0x9c
   12fb4:	e8bd4070 	pop	{r4, r5, r6, lr}
   12fb8:	ea0046f8 	b	24ba0 <assertion_failed>

00012fbc <CUSBMIDIDevice::StartRequest()>:
   12fbc:	e5903010 	ldr	r3, [r0, #16]
   12fc0:	e92d4070 	push	{r4, r5, r6, lr}
   12fc4:	e3530000 	cmp	r3, #0
   12fc8:	e24dd008 	sub	sp, sp, #8
   12fcc:	e1a04000 	mov	r4, r0
   12fd0:	0a000039 	beq	130bc <CUSBMIDIDevice::StartRequest()+0x100>
   12fd4:	e5943020 	ldr	r3, [r4, #32]
   12fd8:	e3530000 	cmp	r3, #0
   12fdc:	0a00003d 	beq	130d8 <CUSBMIDIDevice::StartRequest()+0x11c>
   12fe0:	e5943018 	ldr	r3, [r4, #24]
   12fe4:	e3530000 	cmp	r3, #0
   12fe8:	0a000005 	beq	13004 <CUSBMIDIDevice::StartRequest()+0x48>
   12fec:	e30c1254 	movw	r1, #49748	; 0xc254
   12ff0:	e30b0dcc 	movw	r0, #48588	; 0xbdcc
   12ff4:	e3401002 	movt	r1, #2
   12ff8:	e3400002 	movt	r0, #2
   12ffc:	e3a020a4 	mov	r2, #164	; 0xa4
   13000:	eb0046e6 	bl	24ba0 <assertion_failed>
   13004:	e1d451bc 	ldrh	r5, [r4, #28]
   13008:	e3550000 	cmp	r5, #0
   1300c:	0a000019 	beq	13078 <CUSBMIDIDevice::StartRequest()+0xbc>
   13010:	e3a00028 	mov	r0, #40	; 0x28
   13014:	eb003bdf 	bl	21f98 <operator new(unsigned int)>
   13018:	e1d431bc 	ldrh	r3, [r4, #28]
   1301c:	e3a0c000 	mov	ip, #0
   13020:	e5942020 	ldr	r2, [r4, #32]
   13024:	e5941010 	ldr	r1, [r4, #16]
   13028:	e58dc000 	str	ip, [sp]
   1302c:	e1a05000 	mov	r5, r0
   13030:	ebffeccd 	bl	e36c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13034:	e1a00005 	mov	r0, r5
   13038:	e5845018 	str	r5, [r4, #24]
   1303c:	e1a03004 	mov	r3, r4
   13040:	e3a02000 	mov	r2, #0
   13044:	e30312d0 	movw	r1, #13008	; 0x32d0
   13048:	e3401001 	movt	r1, #1
   1304c:	ebffed3d 	bl	e548 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   13050:	e5940018 	ldr	r0, [r4, #24]
   13054:	ebffed58 	bl	e5bc <CUSBRequest::SetCompleteOnNAK()>
   13058:	e1a00004 	mov	r0, r4
   1305c:	ebfffc30 	bl	12124 <CUSBFunction::GetHost() const>
   13060:	e5941018 	ldr	r1, [r4, #24]
   13064:	e5903000 	ldr	r3, [r0]
   13068:	e593300c 	ldr	r3, [r3, #12]
   1306c:	e28dd008 	add	sp, sp, #8
   13070:	e8bd4070 	pop	{r4, r5, r6, lr}
   13074:	e12fff13 	bx	r3
   13078:	e3a020a5 	mov	r2, #165	; 0xa5
   1307c:	e30c1254 	movw	r1, #49748	; 0xc254
   13080:	e30c02bc 	movw	r0, #49852	; 0xc2bc
   13084:	e3401002 	movt	r1, #2
   13088:	e3400002 	movt	r0, #2
   1308c:	eb0046c3 	bl	24ba0 <assertion_failed>
   13090:	e3a00028 	mov	r0, #40	; 0x28
   13094:	eb003bbf 	bl	21f98 <operator new(unsigned int)>
   13098:	e1d431bc 	ldrh	r3, [r4, #28]
   1309c:	e5942020 	ldr	r2, [r4, #32]
   130a0:	e5941010 	ldr	r1, [r4, #16]
   130a4:	e58d5000 	str	r5, [sp]
   130a8:	e1a06000 	mov	r6, r0
   130ac:	ebffecae 	bl	e36c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   130b0:	e1a00006 	mov	r0, r6
   130b4:	e5846018 	str	r6, [r4, #24]
   130b8:	eaffffdf 	b	1303c <CUSBMIDIDevice::StartRequest()+0x80>
   130bc:	e30c1254 	movw	r1, #49748	; 0xc254
   130c0:	e30c0290 	movw	r0, #49808	; 0xc290
   130c4:	e3401002 	movt	r1, #2
   130c8:	e3400002 	movt	r0, #2
   130cc:	e3a020a1 	mov	r2, #161	; 0xa1
   130d0:	eb0046b2 	bl	24ba0 <assertion_failed>
   130d4:	eaffffbe 	b	12fd4 <CUSBMIDIDevice::StartRequest()+0x18>
   130d8:	e30c1254 	movw	r1, #49748	; 0xc254
   130dc:	e30c02a4 	movw	r0, #49828	; 0xc2a4
   130e0:	e3401002 	movt	r1, #2
   130e4:	e3400002 	movt	r0, #2
   130e8:	e3a020a2 	mov	r2, #162	; 0xa2
   130ec:	eb0046ab 	bl	24ba0 <assertion_failed>
   130f0:	eaffffba 	b	12fe0 <CUSBMIDIDevice::StartRequest()+0x24>

000130f4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   130f4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   130f8:	e2514000 	subs	r4, r1, #0
   130fc:	e24dd00c 	sub	sp, sp, #12
   13100:	e1a05000 	mov	r5, r0
   13104:	0a000062 	beq	13294 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a0>
   13108:	e5953018 	ldr	r3, [r5, #24]
   1310c:	e1540003 	cmp	r4, r3
   13110:	0a000005 	beq	1312c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x38>
   13114:	e30c1254 	movw	r1, #49748	; 0xc254
   13118:	e30b0e38 	movw	r0, #48696	; 0xbe38
   1311c:	e3401002 	movt	r1, #2
   13120:	e3400002 	movt	r0, #2
   13124:	e3a020b2 	mov	r2, #178	; 0xb2
   13128:	eb00469c 	bl	24ba0 <assertion_failed>
   1312c:	e1a00004 	mov	r0, r4
   13130:	ebffecc8 	bl	e458 <CUSBRequest::GetStatus() const>
   13134:	e3500000 	cmp	r0, #0
   13138:	1a000023 	bne	131cc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   1313c:	e5954018 	ldr	r4, [r5, #24]
   13140:	e3540000 	cmp	r4, #0
   13144:	13a08000 	movne	r8, #0
   13148:	0a000008 	beq	13170 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   1314c:	e1a00004 	mov	r0, r4
   13150:	ebffecab 	bl	e404 <CUSBRequest::~CUSBRequest()>
   13154:	e1a00004 	mov	r0, r4
   13158:	e3a01028 	mov	r1, #40	; 0x28
   1315c:	eb003b91 	bl	21fa8 <operator delete(void*, unsigned int)>
   13160:	e3580000 	cmp	r8, #0
   13164:	e3a03000 	mov	r3, #0
   13168:	e5853018 	str	r3, [r5, #24]
   1316c:	1a000044 	bne	13284 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x190>
   13170:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   13174:	e3530000 	cmp	r3, #0
   13178:	1a00003a 	bne	13268 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   1317c:	eb003eeb 	bl	22d30 <CTimer::Get()>
   13180:	e58d5000 	str	r5, [sp]
   13184:	e3032358 	movw	r2, #13144	; 0x3358
   13188:	e3a03000 	mov	r3, #0
   1318c:	e3402001 	movt	r2, #1
   13190:	e3a01001 	mov	r1, #1
   13194:	eb003d1e 	bl	22614 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   13198:	e3500000 	cmp	r0, #0
   1319c:	e5850024 	str	r0, [r5, #36]	; 0x24
   131a0:	0a000001 	beq	131ac <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xb8>
   131a4:	e28dd00c 	add	sp, sp, #12
   131a8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   131ac:	e30c1254 	movw	r1, #49748	; 0xc254
   131b0:	e30c02e0 	movw	r0, #49888	; 0xc2e0
   131b4:	e3401002 	movt	r1, #2
   131b8:	e3400002 	movt	r0, #2
   131bc:	e3a020da 	mov	r2, #218	; 0xda
   131c0:	e28dd00c 	add	sp, sp, #12
   131c4:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   131c8:	ea004674 	b	24ba0 <assertion_failed>
   131cc:	e1a00004 	mov	r0, r4
   131d0:	ebffeca2 	bl	e460 <CUSBRequest::GetResultLength() const>
   131d4:	e3100003 	tst	r0, #3
   131d8:	1affffd7 	bne	1313c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x48>
   131dc:	e5956020 	ldr	r6, [r5, #32]
   131e0:	e3560000 	cmp	r6, #0
   131e4:	0a000031 	beq	132b0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1bc>
   131e8:	e1a00004 	mov	r0, r4
   131ec:	ebffec9b 	bl	e460 <CUSBRequest::GetResultLength() const>
   131f0:	e5954020 	ldr	r4, [r5, #32]
   131f4:	e0866000 	add	r6, r6, r0
   131f8:	e1560004 	cmp	r6, r4
   131fc:	9affffce 	bls	1313c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x48>
   13200:	e30c71e8 	movw	r7, #49640	; 0xc1e8
   13204:	e2844001 	add	r4, r4, #1
   13208:	e3407002 	movt	r7, #2
   1320c:	e3a08000 	mov	r8, #0
   13210:	e5540001 	ldrb	r0, [r4, #-1]
   13214:	e3500000 	cmp	r0, #0
   13218:	0a00000a 	beq	13248 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x154>
   1321c:	e5959014 	ldr	r9, [r5, #20]
   13220:	e200300f 	and	r3, r0, #15
   13224:	e3a08001 	mov	r8, #1
   13228:	e1a01004 	mov	r1, r4
   1322c:	e3590000 	cmp	r9, #0
   13230:	e1a00220 	lsr	r0, r0, #4
   13234:	e0873103 	add	r3, r7, r3, lsl #2
   13238:	03a08001 	moveq	r8, #1
   1323c:	0a000001 	beq	13248 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x154>
   13240:	e5932024 	ldr	r2, [r3, #36]	; 0x24
   13244:	e12fff39 	blx	r9
   13248:	e2843003 	add	r3, r4, #3
   1324c:	e2844004 	add	r4, r4, #4
   13250:	e1560003 	cmp	r6, r3
   13254:	8affffed 	bhi	13210 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   13258:	e5954018 	ldr	r4, [r5, #24]
   1325c:	e3540000 	cmp	r4, #0
   13260:	1affffb9 	bne	1314c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   13264:	eaffffbd 	b	13160 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x6c>
   13268:	e30c1254 	movw	r1, #49748	; 0xc254
   1326c:	e30c02d0 	movw	r0, #49872	; 0xc2d0
   13270:	e3401002 	movt	r1, #2
   13274:	e3400002 	movt	r0, #2
   13278:	e3a020d8 	mov	r2, #216	; 0xd8
   1327c:	eb004647 	bl	24ba0 <assertion_failed>
   13280:	eaffffbd 	b	1317c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x88>
   13284:	e1a00005 	mov	r0, r5
   13288:	e28dd00c 	add	sp, sp, #12
   1328c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   13290:	eaffff49 	b	12fbc <CUSBMIDIDevice::StartRequest()>
   13294:	e30c1254 	movw	r1, #49748	; 0xc254
   13298:	e30a0a2c 	movw	r0, #43564	; 0xaa2c
   1329c:	e3401002 	movt	r1, #2
   132a0:	e3400002 	movt	r0, #2
   132a4:	e3a020b1 	mov	r2, #177	; 0xb1
   132a8:	eb00463c 	bl	24ba0 <assertion_failed>
   132ac:	eaffff95 	b	13108 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x14>
   132b0:	e30c1254 	movw	r1, #49748	; 0xc254
   132b4:	e30c02a4 	movw	r0, #49828	; 0xc2a4
   132b8:	e3401002 	movt	r1, #2
   132bc:	e3400002 	movt	r0, #2
   132c0:	e3a020b9 	mov	r2, #185	; 0xb9
   132c4:	eb004635 	bl	24ba0 <assertion_failed>
   132c8:	e5956020 	ldr	r6, [r5, #32]
   132cc:	eaffffc5 	b	131e8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xf4>

000132d0 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   132d0:	e92d4070 	push	{r4, r5, r6, lr}
   132d4:	e2524000 	subs	r4, r2, #0
   132d8:	e1a05000 	mov	r5, r0
   132dc:	0a000003 	beq	132f0 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   132e0:	e1a01005 	mov	r1, r5
   132e4:	e1a00004 	mov	r0, r4
   132e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   132ec:	eaffff80 	b	130f4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   132f0:	e30c1254 	movw	r1, #49748	; 0xc254
   132f4:	e30a0940 	movw	r0, #43328	; 0xa940
   132f8:	e3401002 	movt	r1, #2
   132fc:	e3400002 	movt	r0, #2
   13300:	e3a020e1 	mov	r2, #225	; 0xe1
   13304:	eb004625 	bl	24ba0 <assertion_failed>
   13308:	e1a01005 	mov	r1, r5
   1330c:	e1a00004 	mov	r0, r4
   13310:	e8bd4070 	pop	{r4, r5, r6, lr}
   13314:	eaffff76 	b	130f4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>

00013318 <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   13318:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1331c:	e92d4010 	push	{r4, lr}
   13320:	e1530001 	cmp	r3, r1
   13324:	e1a04000 	mov	r4, r0
   13328:	0a000005 	beq	13344 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x2c>
   1332c:	e30c1254 	movw	r1, #49748	; 0xc254
   13330:	e30c02f0 	movw	r0, #49904	; 0xc2f0
   13334:	e3401002 	movt	r1, #2
   13338:	e3400002 	movt	r0, #2
   1333c:	e3a020e8 	mov	r2, #232	; 0xe8
   13340:	eb004616 	bl	24ba0 <assertion_failed>
   13344:	e3a03000 	mov	r3, #0
   13348:	e1a00004 	mov	r0, r4
   1334c:	e5843024 	str	r3, [r4, #36]	; 0x24
   13350:	e8bd4010 	pop	{r4, lr}
   13354:	eaffff18 	b	12fbc <CUSBMIDIDevice::StartRequest()>

00013358 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   13358:	e92d4070 	push	{r4, r5, r6, lr}
   1335c:	e2524000 	subs	r4, r2, #0
   13360:	e1a05000 	mov	r5, r0
   13364:	0a000003 	beq	13378 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x20>
   13368:	e1a01005 	mov	r1, r5
   1336c:	e1a00004 	mov	r0, r4
   13370:	e8bd4070 	pop	{r4, r5, r6, lr}
   13374:	eaffffe7 	b	13318 <CUSBMIDIDevice::TimerHandler(unsigned int)>
   13378:	e30c1254 	movw	r1, #49748	; 0xc254
   1337c:	e30a0940 	movw	r0, #43328	; 0xa940
   13380:	e3401002 	movt	r1, #2
   13384:	e3400002 	movt	r0, #2
   13388:	e3a020f1 	mov	r2, #241	; 0xf1
   1338c:	eb004603 	bl	24ba0 <assertion_failed>
   13390:	e1a01005 	mov	r1, r5
   13394:	e1a00004 	mov	r0, r4
   13398:	e8bd4070 	pop	{r4, r5, r6, lr}
   1339c:	eaffffdd 	b	13318 <CUSBMIDIDevice::TimerHandler(unsigned int)>

000133a0 <CUSBMIDIDevice::Configure()>:
   133a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   133a4:	e24dd010 	sub	sp, sp, #16
   133a8:	e1a05000 	mov	r5, r0
   133ac:	ebfffb2b 	bl	12060 <CUSBFunction::GetNumEndpoints() const>
   133b0:	e2506000 	subs	r6, r0, #0
   133b4:	e1a00005 	mov	r0, r5
   133b8:	0a000070 	beq	13580 <CUSBMIDIDevice::Configure()+0x1e0>
   133bc:	ebfffb37 	bl	120a0 <CUSBFunction::GetDevice() const>
   133c0:	ebffe7b7 	bl	d2a4 <CUSBDevice::GetDeviceDescriptor() const>
   133c4:	e2504000 	subs	r4, r0, #0
   133c8:	0a000074 	beq	135a0 <CUSBMIDIDevice::Configure()+0x200>
   133cc:	e1d420b8 	ldrh	r2, [r4, #8]
   133d0:	e3003582 	movw	r3, #1410	; 0x582
   133d4:	e30c7254 	movw	r7, #49748	; 0xc254
   133d8:	e30c6304 	movw	r6, #49924	; 0xc304
   133dc:	e1520003 	cmp	r2, r3
   133e0:	e3407002 	movt	r7, #2
   133e4:	e3406002 	movt	r6, #2
   133e8:	01d480ba 	ldrheq	r8, [r4, #10]
   133ec:	0300312a 	movweq	r3, #298	; 0x12a
   133f0:	13a08000 	movne	r8, #0
   133f4:	00488003 	subeq	r8, r8, r3
   133f8:	016f8f18 	clzeq	r8, r8
   133fc:	01a082a8 	lsreq	r8, r8, #5
   13400:	e3a01005 	mov	r1, #5
   13404:	e1a00005 	mov	r0, r5
   13408:	ebfffb87 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
   1340c:	e2504000 	subs	r4, r0, #0
   13410:	0a000024 	beq	134a8 <CUSBMIDIDevice::Configure()+0x108>
   13414:	e1d430d2 	ldrsb	r3, [r4, #2]
   13418:	e3530000 	cmp	r3, #0
   1341c:	aafffff7 	bge	13400 <CUSBMIDIDevice::Configure()+0x60>
   13420:	e5d43003 	ldrb	r3, [r4, #3]
   13424:	e203303f 	and	r3, r3, #63	; 0x3f
   13428:	e3530002 	cmp	r3, #2
   1342c:	1afffff3 	bne	13400 <CUSBMIDIDevice::Configure()+0x60>
   13430:	e3580000 	cmp	r8, #0
   13434:	0a000047 	beq	13558 <CUSBMIDIDevice::Configure()+0x1b8>
   13438:	e5953010 	ldr	r3, [r5, #16]
   1343c:	e3530000 	cmp	r3, #0
   13440:	1a00005d 	bne	135bc <CUSBMIDIDevice::Configure()+0x21c>
   13444:	e1a00005 	mov	r0, r5
   13448:	ebfffb14 	bl	120a0 <CUSBFunction::GetDevice() const>
   1344c:	e1a0a000 	mov	sl, r0
   13450:	e3a00018 	mov	r0, #24
   13454:	eb003acf 	bl	21f98 <operator new(unsigned int)>
   13458:	e1a02004 	mov	r2, r4
   1345c:	e1a0100a 	mov	r1, sl
   13460:	e1a09000 	mov	r9, r0
   13464:	ebffea31 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13468:	e5859010 	str	r9, [r5, #16]
   1346c:	e5953020 	ldr	r3, [r5, #32]
   13470:	e1d400b4 	ldrh	r0, [r4, #4]
   13474:	e3530000 	cmp	r3, #0
   13478:	e3c00003 	bic	r0, r0, #3
   1347c:	e6ff0070 	uxth	r0, r0
   13480:	e1c501bc 	strh	r0, [r5, #28]
   13484:	0a000042 	beq	13594 <CUSBMIDIDevice::Configure()+0x1f4>
   13488:	e3a0207e 	mov	r2, #126	; 0x7e
   1348c:	e1a01007 	mov	r1, r7
   13490:	e1a00006 	mov	r0, r6
   13494:	eb0045c1 	bl	24ba0 <assertion_failed>
   13498:	e1d501bc 	ldrh	r0, [r5, #28]
   1349c:	eb003abe 	bl	21f9c <operator new[](unsigned int)>
   134a0:	e5850020 	str	r0, [r5, #32]
   134a4:	eaffffd5 	b	13400 <CUSBMIDIDevice::Configure()+0x60>
   134a8:	e5956010 	ldr	r6, [r5, #16]
   134ac:	e1a00005 	mov	r0, r5
   134b0:	e3560000 	cmp	r6, #0
   134b4:	0a000031 	beq	13580 <CUSBMIDIDevice::Configure()+0x1e0>
   134b8:	ebfffb2a 	bl	12168 <CUSBFunction::Configure()>
   134bc:	e2506000 	subs	r6, r0, #0
   134c0:	0a00001b 	beq	13534 <CUSBMIDIDevice::Configure()+0x194>
   134c4:	e1a0000d 	mov	r0, sp
   134c8:	eb004ab9 	bl	25fb4 <CString::CString()>
   134cc:	e3013a64 	movw	r3, #6756	; 0x1a64
   134d0:	e3403003 	movt	r3, #3
   134d4:	e1a0000d 	mov	r0, sp
   134d8:	e30c131c 	movw	r1, #49948	; 0xc31c
   134dc:	e3401002 	movt	r1, #2
   134e0:	e5932000 	ldr	r2, [r3]
   134e4:	e282c001 	add	ip, r2, #1
   134e8:	e583c000 	str	ip, [r3]
   134ec:	eb004dc2 	bl	26bfc <CString::Format(char const*, ...)>
   134f0:	eb004700 	bl	250f8 <CDeviceNameService::Get()>
   134f4:	e1a06000 	mov	r6, r0
   134f8:	e1a0000d 	mov	r0, sp
   134fc:	eb004ac2 	bl	2600c <CString::operator char const*() const>
   13500:	e1a03004 	mov	r3, r4
   13504:	e1a02005 	mov	r2, r5
   13508:	e1a01000 	mov	r1, r0
   1350c:	e1a00006 	mov	r0, r6
   13510:	eb004684 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   13514:	e1a00005 	mov	r0, r5
   13518:	ebfffea7 	bl	12fbc <CUSBMIDIDevice::StartRequest()>
   1351c:	e1a06000 	mov	r6, r0
   13520:	e1a0000d 	mov	r0, sp
   13524:	eb004a6f 	bl	25ee8 <CString::~CString()>
   13528:	e1a00006 	mov	r0, r6
   1352c:	e28dd010 	add	sp, sp, #16
   13530:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13534:	eb00471b 	bl	251a8 <CLogger::Get()>
   13538:	e3a02001 	mov	r2, #1
   1353c:	e59f108c 	ldr	r1, [pc, #140]	; 135d0 <CUSBMIDIDevice::Configure()+0x230>
   13540:	e30b3888 	movw	r3, #47240	; 0xb888
   13544:	e3403002 	movt	r3, #2
   13548:	eb0047f3 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1354c:	e1a00006 	mov	r0, r6
   13550:	e28dd010 	add	sp, sp, #16
   13554:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13558:	e3a01025 	mov	r1, #37	; 0x25
   1355c:	e1a00005 	mov	r0, r5
   13560:	ebfffb31 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
   13564:	e3500000 	cmp	r0, #0
   13568:	0affffa4 	beq	13400 <CUSBMIDIDevice::Configure()+0x60>
   1356c:	e5d43000 	ldrb	r3, [r4]
   13570:	e0843003 	add	r3, r4, r3
   13574:	e1500003 	cmp	r0, r3
   13578:	1affffa0 	bne	13400 <CUSBMIDIDevice::Configure()+0x60>
   1357c:	eaffffad 	b	13438 <CUSBMIDIDevice::Configure()+0x98>
   13580:	e59f1048 	ldr	r1, [pc, #72]	; 135d0 <CUSBMIDIDevice::Configure()+0x230>
   13584:	ebfffb3b 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   13588:	e1a00006 	mov	r0, r6
   1358c:	e28dd010 	add	sp, sp, #16
   13590:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13594:	eb003a80 	bl	21f9c <operator new[](unsigned int)>
   13598:	e5850020 	str	r0, [r5, #32]
   1359c:	eaffff97 	b	13400 <CUSBMIDIDevice::Configure()+0x60>
   135a0:	e30c1254 	movw	r1, #49748	; 0xc254
   135a4:	e30b0fa4 	movw	r0, #49060	; 0xbfa4
   135a8:	e3401002 	movt	r1, #2
   135ac:	e3400002 	movt	r0, #2
   135b0:	e3a02052 	mov	r2, #82	; 0x52
   135b4:	eb004579 	bl	24ba0 <assertion_failed>
   135b8:	eaffff83 	b	133cc <CUSBMIDIDevice::Configure()+0x2c>
   135bc:	e1a00005 	mov	r0, r5
   135c0:	e59f1008 	ldr	r1, [pc, #8]	; 135d0 <CUSBMIDIDevice::Configure()+0x230>
   135c4:	ebfffb2b 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   135c8:	e3a06000 	mov	r6, #0
   135cc:	eaffffd5 	b	13528 <CUSBMIDIDevice::Configure()+0x188>
   135d0:	0002c24c 	.word	0x0002c24c

000135d4 <CUSBCDCEthernetDevice::GetMACAddress() const>:
   135d4:	e2800018 	add	r0, r0, #24
   135d8:	e12fff1e 	bx	lr

000135dc <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   135dc:	e92d4070 	push	{r4, r5, r6, lr}
   135e0:	e1a04000 	mov	r4, r0
   135e4:	e5905014 	ldr	r5, [r0, #20]
   135e8:	e59f3064 	ldr	r3, [pc, #100]	; 13654 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x78>
   135ec:	e3550000 	cmp	r5, #0
   135f0:	e5803000 	str	r3, [r0]
   135f4:	0a000004 	beq	1360c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x30>
   135f8:	e1a00005 	mov	r0, r5
   135fc:	ebffea5e 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
   13600:	e1a00005 	mov	r0, r5
   13604:	e3a01018 	mov	r1, #24
   13608:	eb003a66 	bl	21fa8 <operator delete(void*, unsigned int)>
   1360c:	e5945010 	ldr	r5, [r4, #16]
   13610:	e3a03000 	mov	r3, #0
   13614:	e5843014 	str	r3, [r4, #20]
   13618:	e1550003 	cmp	r5, r3
   1361c:	0a000004 	beq	13634 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x58>
   13620:	e1a00005 	mov	r0, r5
   13624:	ebffea54 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
   13628:	e1a00005 	mov	r0, r5
   1362c:	e3a01018 	mov	r1, #24
   13630:	eb003a5c 	bl	21fa8 <operator delete(void*, unsigned int)>
   13634:	e3a03000 	mov	r3, #0
   13638:	e2840018 	add	r0, r4, #24
   1363c:	e5843010 	str	r3, [r4, #16]
   13640:	eb0005e1 	bl	14dcc <CMACAddress::~CMACAddress()>
   13644:	e1a00004 	mov	r0, r4
   13648:	eb000698 	bl	150b0 <CNetDevice::~CNetDevice()>
   1364c:	e1a00004 	mov	r0, r4
   13650:	e8bd8070 	pop	{r4, r5, r6, pc}
   13654:	0002c32c 	.word	0x0002c32c

00013658 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   13658:	e92d4010 	push	{r4, lr}
   1365c:	e1a04000 	mov	r4, r0
   13660:	ebffffdd 	bl	135dc <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   13664:	e1a00004 	mov	r0, r4
   13668:	e3a01024 	mov	r1, #36	; 0x24
   1366c:	eb003a4d 	bl	21fa8 <operator delete(void*, unsigned int)>
   13670:	e1a00004 	mov	r0, r4
   13674:	e8bd8010 	pop	{r4, pc}

00013678 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   13678:	e5903014 	ldr	r3, [r0, #20]
   1367c:	e92d4070 	push	{r4, r5, r6, lr}
   13680:	e3530000 	cmp	r3, #0
   13684:	e1a04000 	mov	r4, r0
   13688:	e1a05001 	mov	r5, r1
   1368c:	e1a06002 	mov	r6, r2
   13690:	0a000019 	beq	136fc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x84>
   13694:	e3550000 	cmp	r5, #0
   13698:	0a000010 	beq	136e0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x68>
   1369c:	e3560d19 	cmp	r6, #1600	; 0x640
   136a0:	9a000005 	bls	136bc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x44>
   136a4:	e30c135c 	movw	r1, #50012	; 0xc35c
   136a8:	e30c0388 	movw	r0, #50056	; 0xc388
   136ac:	e3401002 	movt	r1, #2
   136b0:	e3400002 	movt	r0, #2
   136b4:	e3a020ac 	mov	r2, #172	; 0xac
   136b8:	eb004538 	bl	24ba0 <assertion_failed>
   136bc:	e1a00004 	mov	r0, r4
   136c0:	ebfffa97 	bl	12124 <CUSBFunction::GetHost() const>
   136c4:	e1a03006 	mov	r3, r6
   136c8:	e1a02005 	mov	r2, r5
   136cc:	e5941014 	ldr	r1, [r4, #20]
   136d0:	ebffeb0d 	bl	e30c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
   136d4:	e1e00000 	mvn	r0, r0
   136d8:	e1a00fa0 	lsr	r0, r0, #31
   136dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   136e0:	e30c135c 	movw	r1, #50012	; 0xc35c
   136e4:	e30b0984 	movw	r0, #47492	; 0xb984
   136e8:	e3401002 	movt	r1, #2
   136ec:	e3400002 	movt	r0, #2
   136f0:	e3a020ab 	mov	r2, #171	; 0xab
   136f4:	eb004529 	bl	24ba0 <assertion_failed>
   136f8:	eaffffe7 	b	1369c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x24>
   136fc:	e30c135c 	movw	r1, #50012	; 0xc35c
   13700:	e30c0370 	movw	r0, #50032	; 0xc370
   13704:	e3401002 	movt	r1, #2
   13708:	e3400002 	movt	r0, #2
   1370c:	e3a020aa 	mov	r2, #170	; 0xaa
   13710:	eb004522 	bl	24ba0 <assertion_failed>
   13714:	eaffffde 	b	13694 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x1c>

00013718 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   13718:	e5903010 	ldr	r3, [r0, #16]
   1371c:	e92d4070 	push	{r4, r5, r6, lr}
   13720:	e3530000 	cmp	r3, #0
   13724:	e24dd030 	sub	sp, sp, #48	; 0x30
   13728:	e1a04000 	mov	r4, r0
   1372c:	e1a05001 	mov	r5, r1
   13730:	e1a06002 	mov	r6, r2
   13734:	0a000028 	beq	137dc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc4>
   13738:	e3550000 	cmp	r5, #0
   1373c:	0a00001f 	beq	137c0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa8>
   13740:	e5941010 	ldr	r1, [r4, #16]
   13744:	e1a02005 	mov	r2, r5
   13748:	e3a03000 	mov	r3, #0
   1374c:	e28d0008 	add	r0, sp, #8
   13750:	e58d3000 	str	r3, [sp]
   13754:	e3a03d19 	mov	r3, #1600	; 0x640
   13758:	ebffeb03 	bl	e36c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1375c:	e28d0008 	add	r0, sp, #8
   13760:	ebffeb95 	bl	e5bc <CUSBRequest::SetCompleteOnNAK()>
   13764:	e1a00004 	mov	r0, r4
   13768:	ebfffa6d 	bl	12124 <CUSBFunction::GetHost() const>
   1376c:	e28d1008 	add	r1, sp, #8
   13770:	e5903000 	ldr	r3, [r0]
   13774:	e5933008 	ldr	r3, [r3, #8]
   13778:	e12fff33 	blx	r3
   1377c:	e3500000 	cmp	r0, #0
   13780:	1a000005 	bne	1379c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x84>
   13784:	e3a04000 	mov	r4, #0
   13788:	e28d0008 	add	r0, sp, #8
   1378c:	ebffeb1c 	bl	e404 <CUSBRequest::~CUSBRequest()>
   13790:	e1a00004 	mov	r0, r4
   13794:	e28dd030 	add	sp, sp, #48	; 0x30
   13798:	e8bd8070 	pop	{r4, r5, r6, pc}
   1379c:	e28d0008 	add	r0, sp, #8
   137a0:	ebffeb2e 	bl	e460 <CUSBRequest::GetResultLength() const>
   137a4:	e2505000 	subs	r5, r0, #0
   137a8:	0afffff5 	beq	13784 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   137ac:	e3560000 	cmp	r6, #0
   137b0:	0a000010 	beq	137f8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe0>
   137b4:	e3a04001 	mov	r4, #1
   137b8:	e5865000 	str	r5, [r6]
   137bc:	eafffff1 	b	13788 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   137c0:	e30c135c 	movw	r1, #50012	; 0xc35c
   137c4:	e30b0984 	movw	r0, #47492	; 0xb984
   137c8:	e3401002 	movt	r1, #2
   137cc:	e3400002 	movt	r0, #2
   137d0:	e3a020b3 	mov	r2, #179	; 0xb3
   137d4:	eb0044f1 	bl	24ba0 <assertion_failed>
   137d8:	eaffffd8 	b	13740 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   137dc:	e30c135c 	movw	r1, #50012	; 0xc35c
   137e0:	e30c03a8 	movw	r0, #50088	; 0xc3a8
   137e4:	e3401002 	movt	r1, #2
   137e8:	e3400002 	movt	r0, #2
   137ec:	e3a020b2 	mov	r2, #178	; 0xb2
   137f0:	eb0044ea 	bl	24ba0 <assertion_failed>
   137f4:	eaffffcf 	b	13738 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x20>
   137f8:	e30c135c 	movw	r1, #50012	; 0xc35c
   137fc:	e30c03c0 	movw	r0, #50112	; 0xc3c0
   13800:	e3401002 	movt	r1, #2
   13804:	e3400002 	movt	r0, #2
   13808:	e3a020c3 	mov	r2, #195	; 0xc3
   1380c:	eb0044e3 	bl	24ba0 <assertion_failed>
   13810:	eaffffe7 	b	137b4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x9c>

00013814 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   13814:	e92d4010 	push	{r4, lr}
   13818:	e1a04000 	mov	r4, r0
   1381c:	eb00061b 	bl	15090 <CNetDevice::CNetDevice(CUSBFunction*)>
   13820:	e59f201c 	ldr	r2, [pc, #28]	; 13844 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x30>
   13824:	e3a03000 	mov	r3, #0
   13828:	e2840018 	add	r0, r4, #24
   1382c:	e5843010 	str	r3, [r4, #16]
   13830:	e5843014 	str	r3, [r4, #20]
   13834:	e5842000 	str	r2, [r4]
   13838:	eb000560 	bl	14dc0 <CMACAddress::CMACAddress()>
   1383c:	e1a00004 	mov	r0, r4
   13840:	e8bd8010 	pop	{r4, pc}
   13844:	0002c32c 	.word	0x0002c32c

00013848 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   13848:	e92d4030 	push	{r4, r5, lr}
   1384c:	e24dd01c 	sub	sp, sp, #28
   13850:	e1a05001 	mov	r5, r1
   13854:	e1a04000 	mov	r4, r0
   13858:	ebfffa10 	bl	120a0 <CUSBFunction::GetDevice() const>
   1385c:	e1a01000 	mov	r1, r0
   13860:	e28d000c 	add	r0, sp, #12
   13864:	eb0001a0 	bl	13eec <CUSBString::CUSBString(CUSBDevice*)>
   13868:	e3550000 	cmp	r5, #0
   1386c:	1a000005 	bne	13888 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   13870:	e3a04000 	mov	r4, #0
   13874:	e28d000c 	add	r0, sp, #12
   13878:	eb0001f0 	bl	14040 <CUSBString::~CUSBString()>
   1387c:	e1a00004 	mov	r0, r4
   13880:	e28dd01c 	add	sp, sp, #28
   13884:	e8bd8030 	pop	{r4, r5, pc}
   13888:	e28d000c 	add	r0, sp, #12
   1388c:	eb0002a6 	bl	1432c <CUSBString::GetLanguageID()>
   13890:	e1a01005 	mov	r1, r5
   13894:	e1a02000 	mov	r2, r0
   13898:	e28d000c 	add	r0, sp, #12
   1389c:	eb0001f7 	bl	14080 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   138a0:	e3500000 	cmp	r0, #0
   138a4:	0afffff1 	beq	13870 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   138a8:	e28d000c 	add	r0, sp, #12
   138ac:	eb00029c 	bl	14324 <CUSBString::Get() const>
   138b0:	e2505000 	subs	r5, r0, #0
   138b4:	0a00001c 	beq	1392c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe4>
   138b8:	e2851002 	add	r1, r5, #2
   138bc:	e285c00e 	add	ip, r5, #14
   138c0:	e28d0004 	add	r0, sp, #4
   138c4:	e15130d2 	ldrsb	r3, [r1, #-2]
   138c8:	e2432007 	sub	r2, r3, #7
   138cc:	e3530039 	cmp	r3, #57	; 0x39
   138d0:	c6af3072 	sxtbgt	r3, r2
   138d4:	e2433030 	sub	r3, r3, #48	; 0x30
   138d8:	e6ef2073 	uxtb	r2, r3
   138dc:	e352000f 	cmp	r2, #15
   138e0:	8affffe2 	bhi	13870 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   138e4:	e15130d1 	ldrsb	r3, [r1, #-1]
   138e8:	e2811002 	add	r1, r1, #2
   138ec:	e243e007 	sub	lr, r3, #7
   138f0:	e3530039 	cmp	r3, #57	; 0x39
   138f4:	c6af307e 	sxtbgt	r3, lr
   138f8:	e2433030 	sub	r3, r3, #48	; 0x30
   138fc:	e6ef3073 	uxtb	r3, r3
   13900:	e353000f 	cmp	r3, #15
   13904:	e1833202 	orr	r3, r3, r2, lsl #4
   13908:	8affffd8 	bhi	13870 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1390c:	e15c0001 	cmp	ip, r1
   13910:	e4c03001 	strb	r3, [r0], #1
   13914:	1affffea 	bne	138c4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   13918:	e2840018 	add	r0, r4, #24
   1391c:	e28d1004 	add	r1, sp, #4
   13920:	eb000551 	bl	14e6c <CMACAddress::Set(unsigned char const*)>
   13924:	e3a04001 	mov	r4, #1
   13928:	eaffffd1 	b	13874 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   1392c:	e30c135c 	movw	r1, #50012	; 0xc35c
   13930:	e30c03d4 	movw	r0, #50132	; 0xc3d4
   13934:	e3401002 	movt	r1, #2
   13938:	e3400002 	movt	r0, #2
   1393c:	e3a020d3 	mov	r2, #211	; 0xd3
   13940:	eb004496 	bl	24ba0 <assertion_failed>
   13944:	eaffffdb 	b	138b8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x70>

00013948 <CUSBCDCEthernetDevice::Configure()>:
   13948:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1394c:	e1a05000 	mov	r5, r0
   13950:	e24dd01c 	sub	sp, sp, #28
   13954:	ea000002 	b	13964 <CUSBCDCEthernetDevice::Configure()+0x1c>
   13958:	e5d43002 	ldrb	r3, [r4, #2]
   1395c:	e353000f 	cmp	r3, #15
   13960:	0a000013 	beq	139b4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   13964:	e3a01024 	mov	r1, #36	; 0x24
   13968:	e1a00005 	mov	r0, r5
   1396c:	ebfffa2e 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
   13970:	e2504000 	subs	r4, r0, #0
   13974:	1afffff7 	bne	13958 <CUSBCDCEthernetDevice::Configure()+0x10>
   13978:	e1a00005 	mov	r0, r5
   1397c:	e59f11f8 	ldr	r1, [pc, #504]	; 13b7c <CUSBCDCEthernetDevice::Configure()+0x234>
   13980:	ebfffa3c 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   13984:	e1a00004 	mov	r0, r4
   13988:	e28dd01c 	add	sp, sp, #28
   1398c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13990:	e5d32006 	ldrb	r2, [r3, #6]
   13994:	e3520000 	cmp	r2, #0
   13998:	1a000005 	bne	139b4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   1399c:	e5d32007 	ldrb	r2, [r3, #7]
   139a0:	e3520000 	cmp	r2, #0
   139a4:	1a000002 	bne	139b4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   139a8:	e5d33004 	ldrb	r3, [r3, #4]
   139ac:	e3530001 	cmp	r3, #1
   139b0:	ca000008 	bgt	139d8 <CUSBCDCEthernetDevice::Configure()+0x90>
   139b4:	e3a01004 	mov	r1, #4
   139b8:	e1a00005 	mov	r0, r5
   139bc:	ebfffa1a 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
   139c0:	e2503000 	subs	r3, r0, #0
   139c4:	0a000034 	beq	13a9c <CUSBCDCEthernetDevice::Configure()+0x154>
   139c8:	e5d32005 	ldrb	r2, [r3, #5]
   139cc:	e352000a 	cmp	r2, #10
   139d0:	1afffff7 	bne	139b4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   139d4:	eaffffed 	b	13990 <CUSBCDCEthernetDevice::Configure()+0x48>
   139d8:	e5d41003 	ldrb	r1, [r4, #3]
   139dc:	e1a00005 	mov	r0, r5
   139e0:	ebffff98 	bl	13848 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   139e4:	e2504000 	subs	r4, r0, #0
   139e8:	0a000043 	beq	13afc <CUSBCDCEthernetDevice::Configure()+0x1b4>
   139ec:	e28d0008 	add	r0, sp, #8
   139f0:	eb00496f 	bl	25fb4 <CString::CString()>
   139f4:	e28d1008 	add	r1, sp, #8
   139f8:	e2850018 	add	r0, r5, #24
   139fc:	eb00057c 	bl	14ff4 <CMACAddress::Format(CString*) const>
   13a00:	eb0045e8 	bl	251a8 <CLogger::Get()>
   13a04:	e1a04000 	mov	r4, r0
   13a08:	e28d0008 	add	r0, sp, #8
   13a0c:	eb00497e 	bl	2600c <CString::operator char const*() const>
   13a10:	e30c33fc 	movw	r3, #50172	; 0xc3fc
   13a14:	e3a02004 	mov	r2, #4
   13a18:	e3403002 	movt	r3, #2
   13a1c:	e59f1158 	ldr	r1, [pc, #344]	; 13b7c <CUSBCDCEthernetDevice::Configure()+0x234>
   13a20:	e58d0000 	str	r0, [sp]
   13a24:	e1a00004 	mov	r0, r4
   13a28:	eb0046bb 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13a2c:	ea000003 	b	13a40 <CUSBCDCEthernetDevice::Configure()+0xf8>
   13a30:	e5d43003 	ldrb	r3, [r4, #3]
   13a34:	e203303f 	and	r3, r3, #63	; 0x3f
   13a38:	e3530002 	cmp	r3, #2
   13a3c:	0a00001d 	beq	13ab8 <CUSBCDCEthernetDevice::Configure()+0x170>
   13a40:	e3a01005 	mov	r1, #5
   13a44:	e1a00005 	mov	r0, r5
   13a48:	ebfff9f7 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
   13a4c:	e2504000 	subs	r4, r0, #0
   13a50:	1afffff6 	bne	13a30 <CUSBCDCEthernetDevice::Configure()+0xe8>
   13a54:	e5953010 	ldr	r3, [r5, #16]
   13a58:	e1a00005 	mov	r0, r5
   13a5c:	e3530000 	cmp	r3, #0
   13a60:	0a000034 	beq	13b38 <CUSBCDCEthernetDevice::Configure()+0x1f0>
   13a64:	e5953014 	ldr	r3, [r5, #20]
   13a68:	e3530000 	cmp	r3, #0
   13a6c:	0a000031 	beq	13b38 <CUSBCDCEthernetDevice::Configure()+0x1f0>
   13a70:	ebfff9bc 	bl	12168 <CUSBFunction::Configure()>
   13a74:	e2504000 	subs	r4, r0, #0
   13a78:	0a000026 	beq	13b18 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   13a7c:	e1a00005 	mov	r0, r5
   13a80:	e3a04001 	mov	r4, #1
   13a84:	eb00059c 	bl	150fc <CNetDevice::AddNetDevice()>
   13a88:	e28d0008 	add	r0, sp, #8
   13a8c:	eb004915 	bl	25ee8 <CString::~CString()>
   13a90:	e1a00004 	mov	r0, r4
   13a94:	e28dd01c 	add	sp, sp, #28
   13a98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13a9c:	e1a00005 	mov	r0, r5
   13aa0:	e59f10d4 	ldr	r1, [pc, #212]	; 13b7c <CUSBCDCEthernetDevice::Configure()+0x234>
   13aa4:	e1a04003 	mov	r4, r3
   13aa8:	ebfff9f2 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   13aac:	e1a00004 	mov	r0, r4
   13ab0:	e28dd01c 	add	sp, sp, #28
   13ab4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13ab8:	e1d430d2 	ldrsb	r3, [r4, #2]
   13abc:	e1a00005 	mov	r0, r5
   13ac0:	e3530000 	cmp	r3, #0
   13ac4:	ba00001f 	blt	13b48 <CUSBCDCEthernetDevice::Configure()+0x200>
   13ac8:	e5953014 	ldr	r3, [r5, #20]
   13acc:	e3530000 	cmp	r3, #0
   13ad0:	1a000017 	bne	13b34 <CUSBCDCEthernetDevice::Configure()+0x1ec>
   13ad4:	ebfff971 	bl	120a0 <CUSBFunction::GetDevice() const>
   13ad8:	e1a07000 	mov	r7, r0
   13adc:	e3a00018 	mov	r0, #24
   13ae0:	eb00392c 	bl	21f98 <operator new(unsigned int)>
   13ae4:	e1a02004 	mov	r2, r4
   13ae8:	e1a01007 	mov	r1, r7
   13aec:	e1a06000 	mov	r6, r0
   13af0:	ebffe88e 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13af4:	e5856014 	str	r6, [r5, #20]
   13af8:	eaffffd0 	b	13a40 <CUSBCDCEthernetDevice::Configure()+0xf8>
   13afc:	eb0045a9 	bl	251a8 <CLogger::Get()>
   13b00:	e30c33e4 	movw	r3, #50148	; 0xc3e4
   13b04:	e3a02001 	mov	r2, #1
   13b08:	e3403002 	movt	r3, #2
   13b0c:	e59f1068 	ldr	r1, [pc, #104]	; 13b7c <CUSBCDCEthernetDevice::Configure()+0x234>
   13b10:	eb004681 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13b14:	eaffff9a 	b	13984 <CUSBCDCEthernetDevice::Configure()+0x3c>
   13b18:	eb0045a2 	bl	251a8 <CLogger::Get()>
   13b1c:	e30b3888 	movw	r3, #47240	; 0xb888
   13b20:	e3a02001 	mov	r2, #1
   13b24:	e3403002 	movt	r3, #2
   13b28:	e59f104c 	ldr	r1, [pc, #76]	; 13b7c <CUSBCDCEthernetDevice::Configure()+0x234>
   13b2c:	eb00467a 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13b30:	eaffffd4 	b	13a88 <CUSBCDCEthernetDevice::Configure()+0x140>
   13b34:	e1a00005 	mov	r0, r5
   13b38:	e59f103c 	ldr	r1, [pc, #60]	; 13b7c <CUSBCDCEthernetDevice::Configure()+0x234>
   13b3c:	e3a04000 	mov	r4, #0
   13b40:	ebfff9cc 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   13b44:	eaffffcf 	b	13a88 <CUSBCDCEthernetDevice::Configure()+0x140>
   13b48:	e5953010 	ldr	r3, [r5, #16]
   13b4c:	e3530000 	cmp	r3, #0
   13b50:	1afffff8 	bne	13b38 <CUSBCDCEthernetDevice::Configure()+0x1f0>
   13b54:	ebfff951 	bl	120a0 <CUSBFunction::GetDevice() const>
   13b58:	e1a07000 	mov	r7, r0
   13b5c:	e3a00018 	mov	r0, #24
   13b60:	eb00390c 	bl	21f98 <operator new(unsigned int)>
   13b64:	e1a02004 	mov	r2, r4
   13b68:	e1a01007 	mov	r1, r7
   13b6c:	e1a06000 	mov	r6, r0
   13b70:	ebffe86e 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13b74:	e5856010 	str	r6, [r5, #16]
   13b78:	eaffffb0 	b	13a40 <CUSBCDCEthernetDevice::Configure()+0xf8>
   13b7c:	0002c354 	.word	0x0002c354

00013b80 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   13b80:	e3510000 	cmp	r1, #0
   13b84:	e3a03000 	mov	r3, #0
   13b88:	e92d4070 	push	{r4, r5, r6, lr}
   13b8c:	e1a05002 	mov	r5, r2
   13b90:	e5803008 	str	r3, [r0, #8]
   13b94:	e0812002 	add	r2, r1, r2
   13b98:	e5803014 	str	r3, [r0, #20]
   13b9c:	e1a04000 	mov	r4, r0
   13ba0:	e5801000 	str	r1, [r0]
   13ba4:	11a03005 	movne	r3, r5
   13ba8:	e5805004 	str	r5, [r0, #4]
   13bac:	e5801010 	str	r1, [r0, #16]
   13bb0:	e5801018 	str	r1, [r0, #24]
   13bb4:	e580200c 	str	r2, [r0, #12]
   13bb8:	0a000039 	beq	13ca4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x124>
   13bbc:	e2433004 	sub	r3, r3, #4
   13bc0:	e3530f7f 	cmp	r3, #508	; 0x1fc
   13bc4:	8a000003 	bhi	13bd8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x58>
   13bc8:	e5943000 	ldr	r3, [r4]
   13bcc:	e5d32000 	ldrb	r2, [r3]
   13bd0:	e3520009 	cmp	r2, #9
   13bd4:	0a000001 	beq	13be0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x60>
   13bd8:	e1a00004 	mov	r0, r4
   13bdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   13be0:	e5d32001 	ldrb	r2, [r3, #1]
   13be4:	e3520002 	cmp	r2, #2
   13be8:	1afffffa 	bne	13bd8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x58>
   13bec:	e1d3c0b2 	ldrh	ip, [r3, #2]
   13bf0:	e155000c 	cmp	r5, ip
   13bf4:	3afffff7 	bcc	13bd8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x58>
   13bf8:	e3a05000 	mov	r5, #0
   13bfc:	8083c00c 	addhi	ip, r3, ip
   13c00:	9594c00c 	ldrls	ip, [r4, #12]
   13c04:	e1a0e005 	mov	lr, r5
   13c08:	8584c00c 	strhi	ip, [r4, #12]
   13c0c:	ea000005 	b	13c28 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xa8>
   13c10:	e3520005 	cmp	r2, #5
   13c14:	0a00001c 	beq	13c8c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x10c>
   13c18:	e3520002 	cmp	r2, #2
   13c1c:	0a000016 	beq	13c7c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xfc>
   13c20:	e1a03001 	mov	r3, r1
   13c24:	e1a0e002 	mov	lr, r2
   13c28:	e2832002 	add	r2, r3, #2
   13c2c:	e15c0002 	cmp	ip, r2
   13c30:	9a000023 	bls	13cc4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x144>
   13c34:	e5d30000 	ldrb	r0, [r3]
   13c38:	e5d32001 	ldrb	r2, [r3, #1]
   13c3c:	e0831000 	add	r1, r3, r0
   13c40:	e151000c 	cmp	r1, ip
   13c44:	8a00000a 	bhi	13c74 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf4>
   13c48:	e3520004 	cmp	r2, #4
   13c4c:	1affffef 	bne	13c10 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x90>
   13c50:	e35e0000 	cmp	lr, #0
   13c54:	0a000006 	beq	13c74 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf4>
   13c58:	e5d35005 	ldrb	r5, [r3, #5]
   13c5c:	e3a0e009 	mov	lr, #9
   13c60:	e2455001 	sub	r5, r5, #1
   13c64:	e16f5f15 	clz	r5, r5
   13c68:	e1a052a5 	lsr	r5, r5, #5
   13c6c:	e150000e 	cmp	r0, lr
   13c70:	0affffea 	beq	13c20 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xa0>
   13c74:	e5843018 	str	r3, [r4, #24]
   13c78:	eaffffd6 	b	13bd8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x58>
   13c7c:	e35e0000 	cmp	lr, #0
   13c80:	1afffffb 	bne	13c74 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf4>
   13c84:	e3a0e009 	mov	lr, #9
   13c88:	eafffff7 	b	13c6c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xec>
   13c8c:	e31e00fd 	tst	lr, #253	; 0xfd
   13c90:	0afffff7 	beq	13c74 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf4>
   13c94:	e3550000 	cmp	r5, #0
   13c98:	03a0e007 	moveq	lr, #7
   13c9c:	13a0e009 	movne	lr, #9
   13ca0:	eafffff1 	b	13c6c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xec>
   13ca4:	e30c1410 	movw	r1, #50192	; 0xc410
   13ca8:	e30c0424 	movw	r0, #50212	; 0xc424
   13cac:	e3401002 	movt	r1, #2
   13cb0:	e3400002 	movt	r0, #2
   13cb4:	e3a02024 	mov	r2, #36	; 0x24
   13cb8:	eb0043b8 	bl	24ba0 <assertion_failed>
   13cbc:	e5943004 	ldr	r3, [r4, #4]
   13cc0:	eaffffbd 	b	13bbc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x3c>
   13cc4:	e153000c 	cmp	r3, ip
   13cc8:	1affffe9 	bne	13c74 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf4>
   13ccc:	e3a03001 	mov	r3, #1
   13cd0:	e5843008 	str	r3, [r4, #8]
   13cd4:	eaffffbf 	b	13bd8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x58>

00013cd8 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   13cd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13cdc:	e2515000 	subs	r5, r1, #0
   13ce0:	e1a04000 	mov	r4, r0
   13ce4:	0a00000c 	beq	13d1c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x44>
   13ce8:	e2851010 	add	r1, r5, #16
   13cec:	e5957000 	ldr	r7, [r5]
   13cf0:	e9954040 	ldmib	r5, {r6, lr}
   13cf4:	e1a00004 	mov	r0, r4
   13cf8:	e891000e 	ldm	r1, {r1, r2, r3}
   13cfc:	e595c00c 	ldr	ip, [r5, #12]
   13d00:	e5847000 	str	r7, [r4]
   13d04:	e9844040 	stmib	r4, {r6, lr}
   13d08:	e584c00c 	str	ip, [r4, #12]
   13d0c:	e5841010 	str	r1, [r4, #16]
   13d10:	e5842014 	str	r2, [r4, #20]
   13d14:	e5843018 	str	r3, [r4, #24]
   13d18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13d1c:	e30c1410 	movw	r1, #50192	; 0xc410
   13d20:	e30c0434 	movw	r0, #50228	; 0xc434
   13d24:	e3401002 	movt	r1, #2
   13d28:	e3400002 	movt	r0, #2
   13d2c:	e3a02082 	mov	r2, #130	; 0x82
   13d30:	eb00439a 	bl	24ba0 <assertion_failed>
   13d34:	eaffffeb 	b	13ce8 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x10>

00013d38 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   13d38:	e12fff1e 	bx	lr

00013d3c <CUSBConfigurationParser::IsValid() const>:
   13d3c:	e5900008 	ldr	r0, [r0, #8]
   13d40:	e12fff1e 	bx	lr

00013d44 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   13d44:	e5903008 	ldr	r3, [r0, #8]
   13d48:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d4c:	e3530000 	cmp	r3, #0
   13d50:	e1a06000 	mov	r6, r0
   13d54:	e1a07001 	mov	r7, r1
   13d58:	0a00002a 	beq	13e08 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xc4>
   13d5c:	e5963010 	ldr	r3, [r6, #16]
   13d60:	e596200c 	ldr	r2, [r6, #12]
   13d64:	e1530002 	cmp	r3, r2
   13d68:	2a00001d 	bcs	13de4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa0>
   13d6c:	e247a005 	sub	sl, r7, #5
   13d70:	e30c9410 	movw	r9, #50192	; 0xc410
   13d74:	e16faf1a 	clz	sl, sl
   13d78:	e30c8444 	movw	r8, #50244	; 0xc444
   13d7c:	e3409002 	movt	r9, #2
   13d80:	e3408002 	movt	r8, #2
   13d84:	e1a0a2aa 	lsr	sl, sl, #5
   13d88:	ea00000b 	b	13dbc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>
   13d8c:	e3550004 	cmp	r5, #4
   13d90:	13a02000 	movne	r2, #0
   13d94:	020a2001 	andeq	r2, sl, #1
   13d98:	e1a03004 	mov	r3, r4
   13d9c:	e3520000 	cmp	r2, #0
   13da0:	1a00000f 	bne	13de4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa0>
   13da4:	e1550007 	cmp	r5, r7
   13da8:	0a000010 	beq	13df0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xac>
   13dac:	e596200c 	ldr	r2, [r6, #12]
   13db0:	e5864010 	str	r4, [r6, #16]
   13db4:	e1520004 	cmp	r2, r4
   13db8:	9a000009 	bls	13de4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa0>
   13dbc:	e5d34000 	ldrb	r4, [r3]
   13dc0:	e5d35001 	ldrb	r5, [r3, #1]
   13dc4:	e0834004 	add	r4, r3, r4
   13dc8:	e1540002 	cmp	r4, r2
   13dcc:	9affffee 	bls	13d8c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x48>
   13dd0:	e3a020a9 	mov	r2, #169	; 0xa9
   13dd4:	e1a01009 	mov	r1, r9
   13dd8:	e1a00008 	mov	r0, r8
   13ddc:	eb00436f 	bl	24ba0 <assertion_failed>
   13de0:	eaffffe9 	b	13d8c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x48>
   13de4:	e3a00000 	mov	r0, #0
   13de8:	e5860014 	str	r0, [r6, #20]
   13dec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13df0:	e5960010 	ldr	r0, [r6, #16]
   13df4:	e5864010 	str	r4, [r6, #16]
   13df8:	e3500000 	cmp	r0, #0
   13dfc:	e5860014 	str	r0, [r6, #20]
   13e00:	15860018 	strne	r0, [r6, #24]
   13e04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e08:	e30c1410 	movw	r1, #50192	; 0xc410
   13e0c:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   13e10:	e3401002 	movt	r1, #2
   13e14:	e3400002 	movt	r0, #2
   13e18:	e3a0209f 	mov	r2, #159	; 0x9f
   13e1c:	eb00435f 	bl	24ba0 <assertion_failed>
   13e20:	eaffffcd 	b	13d5c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x18>

00013e24 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   13e24:	e5903008 	ldr	r3, [r0, #8]
   13e28:	e92d4010 	push	{r4, lr}
   13e2c:	e3530000 	cmp	r3, #0
   13e30:	e1a04000 	mov	r4, r0
   13e34:	0a00000a 	beq	13e64 <CUSBConfigurationParser::GetCurrentDescriptor()+0x40>
   13e38:	e5940014 	ldr	r0, [r4, #20]
   13e3c:	e3500000 	cmp	r0, #0
   13e40:	18bd8010 	popne	{r4, pc}
   13e44:	e3a020c8 	mov	r2, #200	; 0xc8
   13e48:	e30c1410 	movw	r1, #50192	; 0xc410
   13e4c:	e30c0460 	movw	r0, #50272	; 0xc460
   13e50:	e3401002 	movt	r1, #2
   13e54:	e3400002 	movt	r0, #2
   13e58:	eb004350 	bl	24ba0 <assertion_failed>
   13e5c:	e5940014 	ldr	r0, [r4, #20]
   13e60:	e8bd8010 	pop	{r4, pc}
   13e64:	e30c1410 	movw	r1, #50192	; 0xc410
   13e68:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   13e6c:	e3401002 	movt	r1, #2
   13e70:	e3400002 	movt	r0, #2
   13e74:	e3a020c7 	mov	r2, #199	; 0xc7
   13e78:	eb004348 	bl	24ba0 <assertion_failed>
   13e7c:	eaffffed 	b	13e38 <CUSBConfigurationParser::GetCurrentDescriptor()+0x14>

00013e80 <CUSBConfigurationParser::Error(char const*) const>:
   13e80:	e92d4030 	push	{r4, r5, lr}
   13e84:	e2515000 	subs	r5, r1, #0
   13e88:	e24dd00c 	sub	sp, sp, #12
   13e8c:	e1a04000 	mov	r4, r0
   13e90:	0a00000e 	beq	13ed0 <CUSBConfigurationParser::Error(char const*) const+0x50>
   13e94:	eb0044c3 	bl	251a8 <CLogger::Get()>
   13e98:	e5941000 	ldr	r1, [r4]
   13e9c:	e594c018 	ldr	ip, [r4, #24]
   13ea0:	e3a02001 	mov	r2, #1
   13ea4:	e30c347c 	movw	r3, #50300	; 0xc47c
   13ea8:	e3403002 	movt	r3, #2
   13eac:	e04cc001 	sub	ip, ip, r1
   13eb0:	e1a01005 	mov	r1, r5
   13eb4:	e58dc000 	str	ip, [sp]
   13eb8:	eb004597 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13ebc:	e1a02005 	mov	r2, r5
   13ec0:	e8940003 	ldm	r4, {r0, r1}
   13ec4:	e28dd00c 	add	sp, sp, #12
   13ec8:	e8bd4030 	pop	{r4, r5, lr}
   13ecc:	ea004381 	b	24cd8 <debug_hexdump(void const*, unsigned int, char const*)>
   13ed0:	e30c1410 	movw	r1, #50192	; 0xc410
   13ed4:	e30c0064 	movw	r0, #49252	; 0xc064
   13ed8:	e3401002 	movt	r1, #2
   13edc:	e3400002 	movt	r0, #2
   13ee0:	e3a020cf 	mov	r2, #207	; 0xcf
   13ee4:	eb00432d 	bl	24ba0 <assertion_failed>
   13ee8:	eaffffe9 	b	13e94 <CUSBConfigurationParser::Error(char const*) const+0x14>

00013eec <CUSBString::CUSBString(CUSBDevice*)>:
   13eec:	e92d4070 	push	{r4, r5, r6, lr}
   13ef0:	e1a04000 	mov	r4, r0
   13ef4:	e3a03000 	mov	r3, #0
   13ef8:	e5801000 	str	r1, [r0]
   13efc:	e5843004 	str	r3, [r4, #4]
   13f00:	e3a00010 	mov	r0, #16
   13f04:	eb003823 	bl	21f98 <operator new(unsigned int)>
   13f08:	e1a05000 	mov	r5, r0
   13f0c:	eb004828 	bl	25fb4 <CString::CString()>
   13f10:	e5943000 	ldr	r3, [r4]
   13f14:	e5845008 	str	r5, [r4, #8]
   13f18:	e3530000 	cmp	r3, #0
   13f1c:	0a000001 	beq	13f28 <CUSBString::CUSBString(CUSBDevice*)+0x3c>
   13f20:	e1a00004 	mov	r0, r4
   13f24:	e8bd8070 	pop	{r4, r5, r6, pc}
   13f28:	e30c14ac 	movw	r1, #50348	; 0xc4ac
   13f2c:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   13f30:	e3401002 	movt	r1, #2
   13f34:	e3400002 	movt	r0, #2
   13f38:	e3a02023 	mov	r2, #35	; 0x23
   13f3c:	eb004317 	bl	24ba0 <assertion_failed>
   13f40:	e5943008 	ldr	r3, [r4, #8]
   13f44:	e3530000 	cmp	r3, #0
   13f48:	1afffff4 	bne	13f20 <CUSBString::CUSBString(CUSBDevice*)+0x34>
   13f4c:	e3a02024 	mov	r2, #36	; 0x24
   13f50:	e30c14ac 	movw	r1, #50348	; 0xc4ac
   13f54:	e30c04bc 	movw	r0, #50364	; 0xc4bc
   13f58:	e3401002 	movt	r1, #2
   13f5c:	e3400002 	movt	r0, #2
   13f60:	eb00430e 	bl	24ba0 <assertion_failed>
   13f64:	e1a00004 	mov	r0, r4
   13f68:	e8bd8070 	pop	{r4, r5, r6, pc}

00013f6c <CUSBString::CUSBString(CUSBString*)>:
   13f6c:	e92d4070 	push	{r4, r5, r6, lr}
   13f70:	e1a04000 	mov	r4, r0
   13f74:	e3a03000 	mov	r3, #0
   13f78:	e3a00010 	mov	r0, #16
   13f7c:	e5843004 	str	r3, [r4, #4]
   13f80:	e1a05001 	mov	r5, r1
   13f84:	eb003803 	bl	21f98 <operator new(unsigned int)>
   13f88:	e1a06000 	mov	r6, r0
   13f8c:	eb004808 	bl	25fb4 <CString::CString()>
   13f90:	e3550000 	cmp	r5, #0
   13f94:	e5846008 	str	r6, [r4, #8]
   13f98:	0a00001a 	beq	14008 <CUSBString::CUSBString(CUSBString*)+0x9c>
   13f9c:	e895000c 	ldm	r5, {r2, r3}
   13fa0:	e3530000 	cmp	r3, #0
   13fa4:	e5842000 	str	r2, [r4]
   13fa8:	0a000005 	beq	13fc4 <CUSBString::CUSBString(CUSBString*)+0x58>
   13fac:	e5d30000 	ldrb	r0, [r3]
   13fb0:	eb0037f9 	bl	21f9c <operator new[](unsigned int)>
   13fb4:	e5840004 	str	r0, [r4, #4]
   13fb8:	e5951004 	ldr	r1, [r5, #4]
   13fbc:	e5d12000 	ldrb	r2, [r1]
   13fc0:	eb003c80 	bl	231c8 <memcpy>
   13fc4:	e5943008 	ldr	r3, [r4, #8]
   13fc8:	e3530000 	cmp	r3, #0
   13fcc:	0a000014 	beq	14024 <CUSBString::CUSBString(CUSBString*)+0xb8>
   13fd0:	e5953008 	ldr	r3, [r5, #8]
   13fd4:	e3530000 	cmp	r3, #0
   13fd8:	0a000002 	beq	13fe8 <CUSBString::CUSBString(CUSBString*)+0x7c>
   13fdc:	e5843008 	str	r3, [r4, #8]
   13fe0:	e1a00004 	mov	r0, r4
   13fe4:	e8bd8070 	pop	{r4, r5, r6, pc}
   13fe8:	e30c14ac 	movw	r1, #50348	; 0xc4ac
   13fec:	e30c04cc 	movw	r0, #50380	; 0xc4cc
   13ff0:	e3401002 	movt	r1, #2
   13ff4:	e3400002 	movt	r0, #2
   13ff8:	e3a02036 	mov	r2, #54	; 0x36
   13ffc:	eb0042e7 	bl	24ba0 <assertion_failed>
   14000:	e5953008 	ldr	r3, [r5, #8]
   14004:	eafffff4 	b	13fdc <CUSBString::CUSBString(CUSBString*)+0x70>
   14008:	e30c14ac 	movw	r1, #50348	; 0xc4ac
   1400c:	e30b05d4 	movw	r0, #46548	; 0xb5d4
   14010:	e3401002 	movt	r1, #2
   14014:	e3400002 	movt	r0, #2
   14018:	e3a0202b 	mov	r2, #43	; 0x2b
   1401c:	eb0042df 	bl	24ba0 <assertion_failed>
   14020:	eaffffdd 	b	13f9c <CUSBString::CUSBString(CUSBString*)+0x30>
   14024:	e30c14ac 	movw	r1, #50348	; 0xc4ac
   14028:	e30c04bc 	movw	r0, #50364	; 0xc4bc
   1402c:	e3401002 	movt	r1, #2
   14030:	e3400002 	movt	r0, #2
   14034:	e3a02035 	mov	r2, #53	; 0x35
   14038:	eb0042d8 	bl	24ba0 <assertion_failed>
   1403c:	eaffffe3 	b	13fd0 <CUSBString::CUSBString(CUSBString*)+0x64>

00014040 <CUSBString::~CUSBString()>:
   14040:	e92d4010 	push	{r4, lr}
   14044:	e1a04000 	mov	r4, r0
   14048:	e5900008 	ldr	r0, [r0, #8]
   1404c:	e3500000 	cmp	r0, #0
   14050:	0a000002 	beq	14060 <CUSBString::~CUSBString()+0x20>
   14054:	e5903000 	ldr	r3, [r0]
   14058:	e5933004 	ldr	r3, [r3, #4]
   1405c:	e12fff33 	blx	r3
   14060:	e5940004 	ldr	r0, [r4, #4]
   14064:	e3a03000 	mov	r3, #0
   14068:	e5843008 	str	r3, [r4, #8]
   1406c:	e1500003 	cmp	r0, r3
   14070:	0a000000 	beq	14078 <CUSBString::~CUSBString()+0x38>
   14074:	eb0037ca 	bl	21fa4 <operator delete[](void*)>
   14078:	e1a00004 	mov	r0, r4
   1407c:	e8bd8010 	pop	{r4, pc}

00014080 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   14080:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14084:	e2516000 	subs	r6, r1, #0
   14088:	e28db020 	add	fp, sp, #32
   1408c:	e1a04000 	mov	r4, r0
   14090:	e24dd01c 	sub	sp, sp, #28
   14094:	e1a07002 	mov	r7, r2
   14098:	0a000053 	beq	141ec <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x16c>
   1409c:	e5940004 	ldr	r0, [r4, #4]
   140a0:	e3500000 	cmp	r0, #0
   140a4:	0a000000 	beq	140ac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   140a8:	eb0037bd 	bl	21fa4 <operator delete[](void*)>
   140ac:	e3a00004 	mov	r0, #4
   140b0:	eb0037b9 	bl	21f9c <operator new[](unsigned int)>
   140b4:	e5840004 	str	r0, [r4, #4]
   140b8:	e5940000 	ldr	r0, [r4]
   140bc:	e3500000 	cmp	r0, #0
   140c0:	0a000050 	beq	14208 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x188>
   140c4:	ebffe466 	bl	d264 <CUSBDevice::GetHost() const>
   140c8:	e3a08080 	mov	r8, #128	; 0x80
   140cc:	e1a05000 	mov	r5, r0
   140d0:	e5940000 	ldr	r0, [r4]
   140d4:	ebffe452 	bl	d224 <CUSBDevice::GetEndpoint0() const>
   140d8:	e5942004 	ldr	r2, [r4, #4]
   140dc:	e3a01004 	mov	r1, #4
   140e0:	e58d700c 	str	r7, [sp, #12]
   140e4:	e58d1004 	str	r1, [sp, #4]
   140e8:	e1a03006 	mov	r3, r6
   140ec:	e58d2000 	str	r2, [sp]
   140f0:	e3a02003 	mov	r2, #3
   140f4:	e58d8008 	str	r8, [sp, #8]
   140f8:	e1a01000 	mov	r1, r0
   140fc:	e1a00005 	mov	r0, r5
   14100:	ebffe84e 	bl	e240 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   14104:	e3500000 	cmp	r0, #0
   14108:	ba000009 	blt	14134 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   1410c:	e5940004 	ldr	r0, [r4, #4]
   14110:	e5d05000 	ldrb	r5, [r0]
   14114:	e3550001 	cmp	r5, #1
   14118:	e1a03005 	mov	r3, r5
   1411c:	da000004 	ble	14134 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   14120:	e2159001 	ands	r9, r5, #1
   14124:	1a000002 	bne	14134 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   14128:	e5d02001 	ldrb	r2, [r0, #1]
   1412c:	e3520003 	cmp	r2, #3
   14130:	0a000002 	beq	14140 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xc0>
   14134:	e3a00000 	mov	r0, #0
   14138:	e24bd020 	sub	sp, fp, #32
   1413c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14140:	e3550004 	cmp	r5, #4
   14144:	ca000037 	bgt	14228 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1a8>
   14148:	e3550002 	cmp	r5, #2
   1414c:	0a00006a 	beq	142fc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x27c>
   14150:	e2435002 	sub	r5, r3, #2
   14154:	e0855fa5 	add	r5, r5, r5, lsr #31
   14158:	e1a060c5 	asr	r6, r5, #1
   1415c:	e356007e 	cmp	r6, #126	; 0x7e
   14160:	8a000059 	bhi	142cc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x24c>
   14164:	e2863008 	add	r3, r6, #8
   14168:	e3560000 	cmp	r6, #0
   1416c:	e3c33007 	bic	r3, r3, #7
   14170:	e04dd003 	sub	sp, sp, r3
   14174:	e28d7010 	add	r7, sp, #16
   14178:	0a00000a 	beq	141a8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x128>
   1417c:	e247c001 	sub	ip, r7, #1
   14180:	e3a02000 	mov	r2, #0
   14184:	e0803082 	add	r3, r0, r2, lsl #1
   14188:	e2822001 	add	r2, r2, #1
   1418c:	e1d330b2 	ldrh	r3, [r3, #2]
   14190:	e243e020 	sub	lr, r3, #32
   14194:	e35e005e 	cmp	lr, #94	; 0x5e
   14198:	83a0305f 	movhi	r3, #95	; 0x5f
   1419c:	e1560002 	cmp	r6, r2
   141a0:	e5ec3001 	strb	r3, [ip, #1]!
   141a4:	1afffff6 	bne	14184 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x104>
   141a8:	e5940008 	ldr	r0, [r4, #8]
   141ac:	e3a03000 	mov	r3, #0
   141b0:	e7c730c5 	strb	r3, [r7, r5, asr #1]
   141b4:	e1500003 	cmp	r0, r3
   141b8:	0a000002 	beq	141c8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x148>
   141bc:	e5903000 	ldr	r3, [r0]
   141c0:	e5933004 	ldr	r3, [r3, #4]
   141c4:	e12fff33 	blx	r3
   141c8:	e3a00010 	mov	r0, #16
   141cc:	eb003771 	bl	21f98 <operator new(unsigned int)>
   141d0:	e1a01007 	mov	r1, r7
   141d4:	e1a05000 	mov	r5, r0
   141d8:	eb00477b 	bl	25fcc <CString::CString(char const*)>
   141dc:	e3a00001 	mov	r0, #1
   141e0:	e5845008 	str	r5, [r4, #8]
   141e4:	e24bd020 	sub	sp, fp, #32
   141e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141ec:	e30c14ac 	movw	r1, #50348	; 0xc4ac
   141f0:	e30c04e4 	movw	r0, #50404	; 0xc4e4
   141f4:	e3401002 	movt	r1, #2
   141f8:	e3400002 	movt	r0, #2
   141fc:	e3a02047 	mov	r2, #71	; 0x47
   14200:	eb004266 	bl	24ba0 <assertion_failed>
   14204:	eaffffa4 	b	1409c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1c>
   14208:	e30c14ac 	movw	r1, #50348	; 0xc4ac
   1420c:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   14210:	e3401002 	movt	r1, #2
   14214:	e3400002 	movt	r0, #2
   14218:	e3a0204d 	mov	r2, #77	; 0x4d
   1421c:	eb00425f 	bl	24ba0 <assertion_failed>
   14220:	e5940000 	ldr	r0, [r4]
   14224:	eaffffa6 	b	140c4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x44>
   14228:	e3a01002 	mov	r1, #2
   1422c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   14230:	eb00375c 	bl	21fa8 <operator delete(void*, unsigned int)>
   14234:	e1a00005 	mov	r0, r5
   14238:	eb003757 	bl	21f9c <operator new[](unsigned int)>
   1423c:	e5840004 	str	r0, [r4, #4]
   14240:	e5940000 	ldr	r0, [r4]
   14244:	ebffe406 	bl	d264 <CUSBDevice::GetHost() const>
   14248:	e1a0a000 	mov	sl, r0
   1424c:	e5940000 	ldr	r0, [r4]
   14250:	ebffe3f3 	bl	d224 <CUSBDevice::GetEndpoint0() const>
   14254:	e5941004 	ldr	r1, [r4, #4]
   14258:	e1a03006 	mov	r3, r6
   1425c:	e58d700c 	str	r7, [sp, #12]
   14260:	e58d8008 	str	r8, [sp, #8]
   14264:	e88d0022 	stm	sp, {r1, r5}
   14268:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   1426c:	e1a01000 	mov	r1, r0
   14270:	e1a0000a 	mov	r0, sl
   14274:	ebffe7f1 	bl	e240 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   14278:	e1550000 	cmp	r5, r0
   1427c:	1affffac 	bne	14134 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   14280:	e5940004 	ldr	r0, [r4, #4]
   14284:	e5d03000 	ldrb	r3, [r0]
   14288:	e1530005 	cmp	r3, r5
   1428c:	1affffa8 	bne	14134 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   14290:	e5d03001 	ldrb	r3, [r0, #1]
   14294:	e3530003 	cmp	r3, #3
   14298:	1affffa5 	bne	14134 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   1429c:	e3590000 	cmp	r9, #0
   142a0:	01a03005 	moveq	r3, r5
   142a4:	0affffa9 	beq	14150 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd0>
   142a8:	e30c14ac 	movw	r1, #50348	; 0xc4ac
   142ac:	e30c050c 	movw	r0, #50444	; 0xc50c
   142b0:	e3401002 	movt	r1, #2
   142b4:	e3400002 	movt	r0, #2
   142b8:	e3a02076 	mov	r2, #118	; 0x76
   142bc:	eb004237 	bl	24ba0 <assertion_failed>
   142c0:	e5940004 	ldr	r0, [r4, #4]
   142c4:	e5d03000 	ldrb	r3, [r0]
   142c8:	eaffffa0 	b	14150 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd0>
   142cc:	e30c14ac 	movw	r1, #50348	; 0xc4ac
   142d0:	e30c0530 	movw	r0, #50480	; 0xc530
   142d4:	e3401002 	movt	r1, #2
   142d8:	e3400002 	movt	r0, #2
   142dc:	e3a02079 	mov	r2, #121	; 0x79
   142e0:	eb00422e 	bl	24ba0 <assertion_failed>
   142e4:	e2863008 	add	r3, r6, #8
   142e8:	e3c33007 	bic	r3, r3, #7
   142ec:	e5940004 	ldr	r0, [r4, #4]
   142f0:	e04dd003 	sub	sp, sp, r3
   142f4:	e28d7010 	add	r7, sp, #16
   142f8:	eaffff9f 	b	1417c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xfc>
   142fc:	e30c14ac 	movw	r1, #50348	; 0xc4ac
   14300:	e30c04f0 	movw	r0, #50416	; 0xc4f0
   14304:	e3401002 	movt	r1, #2
   14308:	e3400002 	movt	r0, #2
   1430c:	e3a02075 	mov	r2, #117	; 0x75
   14310:	eb004222 	bl	24ba0 <assertion_failed>
   14314:	e5940004 	ldr	r0, [r4, #4]
   14318:	e5d05000 	ldrb	r5, [r0]
   1431c:	e2059001 	and	r9, r5, #1
   14320:	eaffffdd 	b	1429c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x21c>

00014324 <CUSBString::Get() const>:
   14324:	e5900008 	ldr	r0, [r0, #8]
   14328:	ea004737 	b	2600c <CString::operator char const*() const>

0001432c <CUSBString::GetLanguageID()>:
   1432c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14330:	e1a05000 	mov	r5, r0
   14334:	e24dd010 	sub	sp, sp, #16
   14338:	e3a00004 	mov	r0, #4
   1433c:	eb003716 	bl	21f9c <operator new[](unsigned int)>
   14340:	e1a04000 	mov	r4, r0
   14344:	e5950000 	ldr	r0, [r5]
   14348:	e3500000 	cmp	r0, #0
   1434c:	0a000033 	beq	14420 <CUSBString::GetLanguageID()+0xf4>
   14350:	ebffe3c3 	bl	d264 <CUSBDevice::GetHost() const>
   14354:	e3a07080 	mov	r7, #128	; 0x80
   14358:	e1a06000 	mov	r6, r0
   1435c:	e5950000 	ldr	r0, [r5]
   14360:	ebffe3af 	bl	d224 <CUSBDevice::GetEndpoint0() const>
   14364:	e3a02000 	mov	r2, #0
   14368:	e1a03002 	mov	r3, r2
   1436c:	e58d200c 	str	r2, [sp, #12]
   14370:	e3a01004 	mov	r1, #4
   14374:	e58d4000 	str	r4, [sp]
   14378:	e58d1004 	str	r1, [sp, #4]
   1437c:	e3a02003 	mov	r2, #3
   14380:	e58d7008 	str	r7, [sp, #8]
   14384:	e1a01000 	mov	r1, r0
   14388:	e1a00006 	mov	r0, r6
   1438c:	ebffe7ab 	bl	e240 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   14390:	e3500000 	cmp	r0, #0
   14394:	ba000002 	blt	143a4 <CUSBString::GetLanguageID()+0x78>
   14398:	e5d46000 	ldrb	r6, [r4]
   1439c:	e3560003 	cmp	r6, #3
   143a0:	ca000005 	bgt	143bc <CUSBString::GetLanguageID()+0x90>
   143a4:	e1a00004 	mov	r0, r4
   143a8:	e3005409 	movw	r5, #1033	; 0x409
   143ac:	eb0036fc 	bl	21fa4 <operator delete[](void*)>
   143b0:	e1a00005 	mov	r0, r5
   143b4:	e28dd010 	add	sp, sp, #16
   143b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143bc:	e2168001 	ands	r8, r6, #1
   143c0:	1afffff7 	bne	143a4 <CUSBString::GetLanguageID()+0x78>
   143c4:	e5d49001 	ldrb	r9, [r4, #1]
   143c8:	e3590003 	cmp	r9, #3
   143cc:	1afffff4 	bne	143a4 <CUSBString::GetLanguageID()+0x78>
   143d0:	e3560004 	cmp	r6, #4
   143d4:	1a000019 	bne	14440 <CUSBString::GetLanguageID()+0x114>
   143d8:	e1d450b2 	ldrh	r5, [r4, #2]
   143dc:	e2466002 	sub	r6, r6, #2
   143e0:	e3001409 	movw	r1, #1033	; 0x409
   143e4:	e1550001 	cmp	r5, r1
   143e8:	e1a060c6 	asr	r6, r6, #1
   143ec:	0affffec 	beq	143a4 <CUSBString::GetLanguageID()+0x78>
   143f0:	e3a03000 	mov	r3, #0
   143f4:	ea000002 	b	14404 <CUSBString::GetLanguageID()+0xd8>
   143f8:	e1d220b2 	ldrh	r2, [r2, #2]
   143fc:	e1520001 	cmp	r2, r1
   14400:	0affffe7 	beq	143a4 <CUSBString::GetLanguageID()+0x78>
   14404:	e2833001 	add	r3, r3, #1
   14408:	e1560003 	cmp	r6, r3
   1440c:	e0842083 	add	r2, r4, r3, lsl #1
   14410:	1afffff8 	bne	143f8 <CUSBString::GetLanguageID()+0xcc>
   14414:	e1a00004 	mov	r0, r4
   14418:	eb0036e1 	bl	21fa4 <operator delete[](void*)>
   1441c:	eaffffe3 	b	143b0 <CUSBString::GetLanguageID()+0x84>
   14420:	e30c14ac 	movw	r1, #50348	; 0xc4ac
   14424:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   14428:	e3401002 	movt	r1, #2
   1442c:	e3400002 	movt	r0, #2
   14430:	e3a0209a 	mov	r2, #154	; 0x9a
   14434:	eb0041d9 	bl	24ba0 <assertion_failed>
   14438:	e5950000 	ldr	r0, [r5]
   1443c:	eaffffc3 	b	14350 <CUSBString::GetLanguageID()+0x24>
   14440:	e1a00004 	mov	r0, r4
   14444:	eb0036d6 	bl	21fa4 <operator delete[](void*)>
   14448:	e1a00006 	mov	r0, r6
   1444c:	eb0036d2 	bl	21f9c <operator new[](unsigned int)>
   14450:	e1a04000 	mov	r4, r0
   14454:	e5950000 	ldr	r0, [r5]
   14458:	ebffe381 	bl	d264 <CUSBDevice::GetHost() const>
   1445c:	e1a0a000 	mov	sl, r0
   14460:	e5950000 	ldr	r0, [r5]
   14464:	ebffe36e 	bl	d224 <CUSBDevice::GetEndpoint0() const>
   14468:	e58d4000 	str	r4, [sp]
   1446c:	e58d800c 	str	r8, [sp, #12]
   14470:	e1a03008 	mov	r3, r8
   14474:	e58d7008 	str	r7, [sp, #8]
   14478:	e1a02009 	mov	r2, r9
   1447c:	e58d6004 	str	r6, [sp, #4]
   14480:	e1a01000 	mov	r1, r0
   14484:	e1a0000a 	mov	r0, sl
   14488:	ebffe76c 	bl	e240 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1448c:	e1560000 	cmp	r6, r0
   14490:	1affffc3 	bne	143a4 <CUSBString::GetLanguageID()+0x78>
   14494:	e5d43000 	ldrb	r3, [r4]
   14498:	e1530006 	cmp	r3, r6
   1449c:	1affffc0 	bne	143a4 <CUSBString::GetLanguageID()+0x78>
   144a0:	e5d43001 	ldrb	r3, [r4, #1]
   144a4:	e3530003 	cmp	r3, #3
   144a8:	1affffbd 	bne	143a4 <CUSBString::GetLanguageID()+0x78>
   144ac:	eaffffc9 	b	143d8 <CUSBString::GetLanguageID()+0xac>

000144b0 <CSMSC951xDevice::GetMACAddress() const>:
   144b0:	e2800018 	add	r0, r0, #24
   144b4:	e12fff1e 	bx	lr

000144b8 <CSMSC951xDevice::~CSMSC951xDevice()>:
   144b8:	e59f3084 	ldr	r3, [pc, #132]	; 14544 <CSMSC951xDevice::~CSMSC951xDevice()+0x8c>
   144bc:	e3a01001 	mov	r1, #1
   144c0:	e92d4070 	push	{r4, r5, r6, lr}
   144c4:	e1a04000 	mov	r4, r0
   144c8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   144cc:	e5843000 	str	r3, [r4]
   144d0:	eb0036b4 	bl	21fa8 <operator delete(void*, unsigned int)>
   144d4:	e5945014 	ldr	r5, [r4, #20]
   144d8:	e3a03000 	mov	r3, #0
   144dc:	e5843024 	str	r3, [r4, #36]	; 0x24
   144e0:	e1550003 	cmp	r5, r3
   144e4:	0a000004 	beq	144fc <CSMSC951xDevice::~CSMSC951xDevice()+0x44>
   144e8:	e1a00005 	mov	r0, r5
   144ec:	ebffe6a2 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
   144f0:	e1a00005 	mov	r0, r5
   144f4:	e3a01018 	mov	r1, #24
   144f8:	eb0036aa 	bl	21fa8 <operator delete(void*, unsigned int)>
   144fc:	e5945010 	ldr	r5, [r4, #16]
   14500:	e3a03000 	mov	r3, #0
   14504:	e5843014 	str	r3, [r4, #20]
   14508:	e1550003 	cmp	r5, r3
   1450c:	0a000004 	beq	14524 <CSMSC951xDevice::~CSMSC951xDevice()+0x6c>
   14510:	e1a00005 	mov	r0, r5
   14514:	ebffe698 	bl	df7c <CUSBEndpoint::~CUSBEndpoint()>
   14518:	e1a00005 	mov	r0, r5
   1451c:	e3a01018 	mov	r1, #24
   14520:	eb0036a0 	bl	21fa8 <operator delete(void*, unsigned int)>
   14524:	e3a03000 	mov	r3, #0
   14528:	e2840018 	add	r0, r4, #24
   1452c:	e5843010 	str	r3, [r4, #16]
   14530:	eb000225 	bl	14dcc <CMACAddress::~CMACAddress()>
   14534:	e1a00004 	mov	r0, r4
   14538:	eb0002dc 	bl	150b0 <CNetDevice::~CNetDevice()>
   1453c:	e1a00004 	mov	r0, r4
   14540:	e8bd8070 	pop	{r4, r5, r6, pc}
   14544:	0002c550 	.word	0x0002c550

00014548 <CSMSC951xDevice::~CSMSC951xDevice()>:
   14548:	e92d4010 	push	{r4, lr}
   1454c:	e1a04000 	mov	r4, r0
   14550:	ebffffd8 	bl	144b8 <CSMSC951xDevice::~CSMSC951xDevice()>
   14554:	e1a00004 	mov	r0, r4
   14558:	e3a01028 	mov	r1, #40	; 0x28
   1455c:	eb003691 	bl	21fa8 <operator delete(void*, unsigned int)>
   14560:	e1a00004 	mov	r0, r4
   14564:	e8bd8010 	pop	{r4, pc}

00014568 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   14568:	e5903010 	ldr	r3, [r0, #16]
   1456c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14570:	e3530000 	cmp	r3, #0
   14574:	e24dd034 	sub	sp, sp, #52	; 0x34
   14578:	e1a04000 	mov	r4, r0
   1457c:	e1a06001 	mov	r6, r1
   14580:	e1a07002 	mov	r7, r2
   14584:	0a000036 	beq	14664 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xfc>
   14588:	e3560000 	cmp	r6, #0
   1458c:	0a00003b 	beq	14680 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x118>
   14590:	e5941010 	ldr	r1, [r4, #16]
   14594:	e3a03d19 	mov	r3, #1600	; 0x640
   14598:	e1a02006 	mov	r2, r6
   1459c:	e3a05000 	mov	r5, #0
   145a0:	e28d0008 	add	r0, sp, #8
   145a4:	e58d5000 	str	r5, [sp]
   145a8:	ebffe76f 	bl	e36c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   145ac:	e1a00004 	mov	r0, r4
   145b0:	ebfff6db 	bl	12124 <CUSBFunction::GetHost() const>
   145b4:	e28d1008 	add	r1, sp, #8
   145b8:	e5903000 	ldr	r3, [r0]
   145bc:	e5933008 	ldr	r3, [r3, #8]
   145c0:	e12fff33 	blx	r3
   145c4:	e1500005 	cmp	r0, r5
   145c8:	1a000005 	bne	145e4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x7c>
   145cc:	e3a05000 	mov	r5, #0
   145d0:	e28d0008 	add	r0, sp, #8
   145d4:	ebffe78a 	bl	e404 <CUSBRequest::~CUSBRequest()>
   145d8:	e1a00005 	mov	r0, r5
   145dc:	e28dd034 	add	sp, sp, #52	; 0x34
   145e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   145e4:	e28d0008 	add	r0, sp, #8
   145e8:	ebffe79c 	bl	e460 <CUSBRequest::GetResultLength() const>
   145ec:	e3500003 	cmp	r0, #3
   145f0:	9afffff5 	bls	145cc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x64>
   145f4:	e5964000 	ldr	r4, [r6]
   145f8:	e30930de 	movw	r3, #37086	; 0x90de
   145fc:	e3443000 	movt	r3, #16384	; 0x4000
   14600:	e0033004 	and	r3, r3, r4
   14604:	e3530000 	cmp	r3, #0
   14608:	1a00002b 	bne	146bc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x154>
   1460c:	e7ed4854 	ubfx	r4, r4, #16, #14
   14610:	e2400004 	sub	r0, r0, #4
   14614:	e1540000 	cmp	r4, r0
   14618:	0a000005 	beq	14634 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xcc>
   1461c:	e30c1584 	movw	r1, #50564	; 0xc584
   14620:	e30c05ac 	movw	r0, #50604	; 0xc5ac
   14624:	e3401002 	movt	r1, #2
   14628:	e3400002 	movt	r0, #2
   1462c:	e3a02e13 	mov	r2, #304	; 0x130
   14630:	eb00415a 	bl	24ba0 <assertion_failed>
   14634:	e3540004 	cmp	r4, #4
   14638:	9a000017 	bls	1469c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x134>
   1463c:	e2444004 	sub	r4, r4, #4
   14640:	e2861004 	add	r1, r6, #4
   14644:	e1a00006 	mov	r0, r6
   14648:	e1a02004 	mov	r2, r4
   1464c:	eb003add 	bl	231c8 <memcpy>
   14650:	e3570000 	cmp	r7, #0
   14654:	0a000020 	beq	146dc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   14658:	e3a05001 	mov	r5, #1
   1465c:	e5874000 	str	r4, [r7]
   14660:	eaffffda 	b	145d0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   14664:	e30c1584 	movw	r1, #50564	; 0xc584
   14668:	e30c03a8 	movw	r0, #50088	; 0xc3a8
   1466c:	e3401002 	movt	r1, #2
   14670:	e3400002 	movt	r0, #2
   14674:	e3a02f46 	mov	r2, #280	; 0x118
   14678:	eb004148 	bl	24ba0 <assertion_failed>
   1467c:	eaffffc1 	b	14588 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x20>
   14680:	e30c1584 	movw	r1, #50564	; 0xc584
   14684:	e30b0984 	movw	r0, #47492	; 0xb984
   14688:	e3401002 	movt	r1, #2
   1468c:	e3400002 	movt	r0, #2
   14690:	e3002119 	movw	r2, #281	; 0x119
   14694:	eb004141 	bl	24ba0 <assertion_failed>
   14698:	eaffffbc 	b	14590 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   1469c:	e30c1584 	movw	r1, #50564	; 0xc584
   146a0:	e30c05cc 	movw	r0, #50636	; 0xc5cc
   146a4:	e3401002 	movt	r1, #2
   146a8:	e3400002 	movt	r0, #2
   146ac:	e3002131 	movw	r2, #305	; 0x131
   146b0:	e3a05000 	mov	r5, #0
   146b4:	eb004139 	bl	24ba0 <assertion_failed>
   146b8:	eaffffc4 	b	145d0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   146bc:	eb0042b9 	bl	251a8 <CLogger::Get()>
   146c0:	e58d4000 	str	r4, [sp]
   146c4:	e30c3594 	movw	r3, #50580	; 0xc594
   146c8:	e3a02002 	mov	r2, #2
   146cc:	e3403002 	movt	r3, #2
   146d0:	e59f1020 	ldr	r1, [pc, #32]	; 146f8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x190>
   146d4:	eb004390 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   146d8:	eaffffbc 	b	145d0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   146dc:	e30c1584 	movw	r1, #50564	; 0xc584
   146e0:	e30c03c0 	movw	r0, #50112	; 0xc3c0
   146e4:	e3401002 	movt	r1, #2
   146e8:	e3400002 	movt	r0, #2
   146ec:	e3a02f4f 	mov	r2, #316	; 0x13c
   146f0:	eb00412a 	bl	24ba0 <assertion_failed>
   146f4:	eaffffd7 	b	14658 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   146f8:	0002c578 	.word	0x0002c578

000146fc <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   146fc:	e3003637 	movw	r3, #1591	; 0x637
   14700:	e1520003 	cmp	r2, r3
   14704:	8a00001c 	bhi	1477c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x80>
   14708:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1470c:	e92d4070 	push	{r4, r5, r6, lr}
   14710:	e3530000 	cmp	r3, #0
   14714:	e1a06001 	mov	r6, r1
   14718:	e1a04000 	mov	r4, r0
   1471c:	e1a05002 	mov	r5, r2
   14720:	0a000025 	beq	147bc <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xc0>
   14724:	e3560000 	cmp	r6, #0
   14728:	0a00001c 	beq	147a0 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa4>
   1472c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   14730:	e1a01006 	mov	r1, r6
   14734:	e1a02005 	mov	r2, r5
   14738:	e2800008 	add	r0, r0, #8
   1473c:	eb003aa1 	bl	231c8 <memcpy>
   14740:	e5941014 	ldr	r1, [r4, #20]
   14744:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14748:	e3852a03 	orr	r2, r5, #12288	; 0x3000
   1474c:	e3510000 	cmp	r1, #0
   14750:	e8830024 	stm	r3, {r2, r5}
   14754:	0a00000a 	beq	14784 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x88>
   14758:	e1a00004 	mov	r0, r4
   1475c:	ebfff670 	bl	12124 <CUSBFunction::GetHost() const>
   14760:	e2853008 	add	r3, r5, #8
   14764:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   14768:	e5941014 	ldr	r1, [r4, #20]
   1476c:	ebffe6e6 	bl	e30c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
   14770:	e1e00000 	mvn	r0, r0
   14774:	e1a00fa0 	lsr	r0, r0, #31
   14778:	e8bd8070 	pop	{r4, r5, r6, pc}
   1477c:	e3a00000 	mov	r0, #0
   14780:	e12fff1e 	bx	lr
   14784:	e30c1584 	movw	r1, #50564	; 0xc584
   14788:	e30c0370 	movw	r0, #50032	; 0xc370
   1478c:	e3401002 	movt	r1, #2
   14790:	e3400002 	movt	r0, #2
   14794:	e3002112 	movw	r2, #274	; 0x112
   14798:	eb004100 	bl	24ba0 <assertion_failed>
   1479c:	eaffffed 	b	14758 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x5c>
   147a0:	e30c1584 	movw	r1, #50564	; 0xc584
   147a4:	e30b0984 	movw	r0, #47492	; 0xb984
   147a8:	e3401002 	movt	r1, #2
   147ac:	e3400002 	movt	r0, #2
   147b0:	e3a02f43 	mov	r2, #268	; 0x10c
   147b4:	eb0040f9 	bl	24ba0 <assertion_failed>
   147b8:	eaffffdb 	b	1472c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x30>
   147bc:	e30c1584 	movw	r1, #50564	; 0xc584
   147c0:	e30c05e0 	movw	r0, #50656	; 0xc5e0
   147c4:	e3401002 	movt	r1, #2
   147c8:	e3400002 	movt	r0, #2
   147cc:	e300210b 	movw	r2, #267	; 0x10b
   147d0:	eb0040f2 	bl	24ba0 <assertion_failed>
   147d4:	eaffffd2 	b	14724 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x28>

000147d8 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   147d8:	e92d4070 	push	{r4, r5, r6, lr}
   147dc:	e1a04000 	mov	r4, r0
   147e0:	eb00022a 	bl	15090 <CNetDevice::CNetDevice(CUSBFunction*)>
   147e4:	e59f302c 	ldr	r3, [pc, #44]	; 14818 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x40>
   147e8:	e3a05000 	mov	r5, #0
   147ec:	e2840018 	add	r0, r4, #24
   147f0:	e5845010 	str	r5, [r4, #16]
   147f4:	e5845014 	str	r5, [r4, #20]
   147f8:	e5843000 	str	r3, [r4]
   147fc:	eb00016f 	bl	14dc0 <CMACAddress::CMACAddress()>
   14800:	e5845024 	str	r5, [r4, #36]	; 0x24
   14804:	e3a00d19 	mov	r0, #1600	; 0x640
   14808:	eb0035e3 	bl	21f9c <operator new[](unsigned int)>
   1480c:	e5840024 	str	r0, [r4, #36]	; 0x24
   14810:	e1a00004 	mov	r0, r4
   14814:	e8bd8070 	pop	{r4, r5, r6, pc}
   14818:	0002c550 	.word	0x0002c550

0001481c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   1481c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14820:	e24dd01c 	sub	sp, sp, #28
   14824:	e28d5018 	add	r5, sp, #24
   14828:	e1a04001 	mov	r4, r1
   1482c:	e1a07000 	mov	r7, r0
   14830:	e6ff4074 	uxth	r4, r4
   14834:	e5252004 	str	r2, [r5, #-4]!
   14838:	ebfff639 	bl	12124 <CUSBFunction::GetHost() const>
   1483c:	e1a06000 	mov	r6, r0
   14840:	e1a00007 	mov	r0, r7
   14844:	ebfff625 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
   14848:	e58d5008 	str	r5, [sp, #8]
   1484c:	e3a03004 	mov	r3, #4
   14850:	e58d4004 	str	r4, [sp, #4]
   14854:	e58d300c 	str	r3, [sp, #12]
   14858:	e3a02000 	mov	r2, #0
   1485c:	e3a030a0 	mov	r3, #160	; 0xa0
   14860:	e58d2000 	str	r2, [sp]
   14864:	e3a02040 	mov	r2, #64	; 0x40
   14868:	e1a01000 	mov	r1, r0
   1486c:	e1a00006 	mov	r0, r6
   14870:	ebffe647 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14874:	e1e00000 	mvn	r0, r0
   14878:	e1a00fa0 	lsr	r0, r0, #31
   1487c:	e28dd01c 	add	sp, sp, #28
   14880:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00014884 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   14884:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14888:	e24dd014 	sub	sp, sp, #20
   1488c:	e1a06002 	mov	r6, r2
   14890:	e1a04001 	mov	r4, r1
   14894:	e1a07000 	mov	r7, r0
   14898:	ebfff621 	bl	12124 <CUSBFunction::GetHost() const>
   1489c:	e6ff4074 	uxth	r4, r4
   148a0:	e1a05000 	mov	r5, r0
   148a4:	e1a00007 	mov	r0, r7
   148a8:	ebfff60c 	bl	120e0 <CUSBFunction::GetEndpoint0() const>
   148ac:	e58d6008 	str	r6, [sp, #8]
   148b0:	e3a03004 	mov	r3, #4
   148b4:	e58d4004 	str	r4, [sp, #4]
   148b8:	e58d300c 	str	r3, [sp, #12]
   148bc:	e3a02000 	mov	r2, #0
   148c0:	e3a030a1 	mov	r3, #161	; 0xa1
   148c4:	e58d2000 	str	r2, [sp]
   148c8:	e3a020c0 	mov	r2, #192	; 0xc0
   148cc:	e1a01000 	mov	r1, r0
   148d0:	e1a00005 	mov	r0, r5
   148d4:	ebffe62e 	bl	e194 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   148d8:	e2400004 	sub	r0, r0, #4
   148dc:	e16f0f10 	clz	r0, r0
   148e0:	e1a002a0 	lsr	r0, r0, #5
   148e4:	e28dd014 	add	sp, sp, #20
   148e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   148ec:	e92d4030 	push	{r4, r5, lr}
   148f0:	e1a04002 	mov	r4, r2
   148f4:	e24dd014 	sub	sp, sp, #20
   148f8:	e1a05001 	mov	r5, r1
   148fc:	e28d200c 	add	r2, sp, #12
   14900:	e1a01004 	mov	r1, r4
   14904:	ebffffde 	bl	14884 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   14908:	e3500000 	cmp	r0, #0
   1490c:	0a00000a 	beq	1493c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x50>
   14910:	eb004224 	bl	251a8 <CLogger::Get()>
   14914:	e59d100c 	ldr	r1, [sp, #12]
   14918:	e58d5004 	str	r5, [sp, #4]
   1491c:	e3a02004 	mov	r2, #4
   14920:	e30c3610 	movw	r3, #50704	; 0xc610
   14924:	e3403002 	movt	r3, #2
   14928:	e58d1000 	str	r1, [sp]
   1492c:	e59f102c 	ldr	r1, [pc, #44]	; 14960 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x74>
   14930:	eb0042f9 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14934:	e28dd014 	add	sp, sp, #20
   14938:	e8bd8030 	pop	{r4, r5, pc}
   1493c:	eb004219 	bl	251a8 <CLogger::Get()>
   14940:	e58d4000 	str	r4, [sp]
   14944:	e3a02001 	mov	r2, #1
   14948:	e59f1010 	ldr	r1, [pc, #16]	; 14960 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x74>
   1494c:	e30c35f4 	movw	r3, #50676	; 0xc5f4
   14950:	e3403002 	movt	r3, #2
   14954:	eb0042f0 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14958:	e28dd014 	add	sp, sp, #20
   1495c:	e8bd8030 	pop	{r4, r5, pc}
   14960:	0002c578 	.word	0x0002c578

00014964 <CSMSC951xDevice::DumpRegs()>:
   14964:	e92d4010 	push	{r4, lr}
   14968:	e3a02000 	mov	r2, #0
   1496c:	e1a04000 	mov	r4, r0
   14970:	e30c1618 	movw	r1, #50712	; 0xc618
   14974:	e3401002 	movt	r1, #2
   14978:	ebffffdb 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1497c:	e1a00004 	mov	r0, r4
   14980:	e3a02008 	mov	r2, #8
   14984:	e30c1620 	movw	r1, #50720	; 0xc620
   14988:	e3401002 	movt	r1, #2
   1498c:	ebffffd6 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14990:	e1a00004 	mov	r0, r4
   14994:	e3a0200c 	mov	r2, #12
   14998:	e30c1628 	movw	r1, #50728	; 0xc628
   1499c:	e3401002 	movt	r1, #2
   149a0:	ebffffd1 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   149a4:	e1a00004 	mov	r0, r4
   149a8:	e3a02010 	mov	r2, #16
   149ac:	e30c1630 	movw	r1, #50736	; 0xc630
   149b0:	e3401002 	movt	r1, #2
   149b4:	ebffffcc 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   149b8:	e1a00004 	mov	r0, r4
   149bc:	e3a02014 	mov	r2, #20
   149c0:	e30c1638 	movw	r1, #50744	; 0xc638
   149c4:	e3401002 	movt	r1, #2
   149c8:	ebffffc7 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   149cc:	e1a00004 	mov	r0, r4
   149d0:	e3a02018 	mov	r2, #24
   149d4:	e30c1640 	movw	r1, #50752	; 0xc640
   149d8:	e3401002 	movt	r1, #2
   149dc:	ebffffc2 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   149e0:	e1a00004 	mov	r0, r4
   149e4:	e3a02020 	mov	r2, #32
   149e8:	e30c164c 	movw	r1, #50764	; 0xc64c
   149ec:	e3401002 	movt	r1, #2
   149f0:	ebffffbd 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   149f4:	e1a00004 	mov	r0, r4
   149f8:	e3a02024 	mov	r2, #36	; 0x24
   149fc:	e30c1654 	movw	r1, #50772	; 0xc654
   14a00:	e3401002 	movt	r1, #2
   14a04:	ebffffb8 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a08:	e1a00004 	mov	r0, r4
   14a0c:	e3a02028 	mov	r2, #40	; 0x28
   14a10:	e30c1658 	movw	r1, #50776	; 0xc658
   14a14:	e3401002 	movt	r1, #2
   14a18:	ebffffb3 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a1c:	e1a00004 	mov	r0, r4
   14a20:	e3a0202c 	mov	r2, #44	; 0x2c
   14a24:	e30c1664 	movw	r1, #50788	; 0xc664
   14a28:	e3401002 	movt	r1, #2
   14a2c:	ebffffae 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a30:	e1a00004 	mov	r0, r4
   14a34:	e3a02038 	mov	r2, #56	; 0x38
   14a38:	e30c166c 	movw	r1, #50796	; 0xc66c
   14a3c:	e3401002 	movt	r1, #2
   14a40:	ebffffa9 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a44:	e1a00004 	mov	r0, r4
   14a48:	e3a02068 	mov	r2, #104	; 0x68
   14a4c:	e30c1678 	movw	r1, #50808	; 0xc678
   14a50:	e3401002 	movt	r1, #2
   14a54:	ebffffa4 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a58:	e1a00004 	mov	r0, r4
   14a5c:	e3a0206c 	mov	r2, #108	; 0x6c
   14a60:	e30c1684 	movw	r1, #50820	; 0xc684
   14a64:	e3401002 	movt	r1, #2
   14a68:	ebffff9f 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a6c:	e1a00004 	mov	r0, r4
   14a70:	e3a02c01 	mov	r2, #256	; 0x100
   14a74:	e30c1690 	movw	r1, #50832	; 0xc690
   14a78:	e3401002 	movt	r1, #2
   14a7c:	ebffff9a 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a80:	e1a00004 	mov	r0, r4
   14a84:	e3a02f41 	mov	r2, #260	; 0x104
   14a88:	e30c1698 	movw	r1, #50840	; 0xc698
   14a8c:	e3401002 	movt	r1, #2
   14a90:	ebffff95 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a94:	e1a00004 	mov	r0, r4
   14a98:	e3a02f42 	mov	r2, #264	; 0x108
   14a9c:	e30c16a0 	movw	r1, #50848	; 0xc6a0
   14aa0:	e3401002 	movt	r1, #2
   14aa4:	ebffff90 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14aa8:	e1a00004 	mov	r0, r4
   14aac:	e3a02f43 	mov	r2, #268	; 0x10c
   14ab0:	e30c16a8 	movw	r1, #50856	; 0xc6a8
   14ab4:	e3401002 	movt	r1, #2
   14ab8:	ebffff8b 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14abc:	e1a00004 	mov	r0, r4
   14ac0:	e3a02e11 	mov	r2, #272	; 0x110
   14ac4:	e30c16b0 	movw	r1, #50864	; 0xc6b0
   14ac8:	e3401002 	movt	r1, #2
   14acc:	ebffff86 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14ad0:	e1a00004 	mov	r0, r4
   14ad4:	e3a02f47 	mov	r2, #284	; 0x11c
   14ad8:	e30c16b8 	movw	r1, #50872	; 0xc6b8
   14adc:	e3401002 	movt	r1, #2
   14ae0:	ebffff81 	bl	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14ae4:	e1a00004 	mov	r0, r4
   14ae8:	e30c16c0 	movw	r1, #50880	; 0xc6c0
   14aec:	e3a02f4b 	mov	r2, #300	; 0x12c
   14af0:	e3401002 	movt	r1, #2
   14af4:	e8bd4010 	pop	{r4, lr}
   14af8:	eaffff7b 	b	148ec <CSMSC951xDevice::DumpReg(char const*, unsigned int)>

00014afc <CSMSC951xDevice::Configure()>:
   14afc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14b00:	e24dd040 	sub	sp, sp, #64	; 0x40
   14b04:	e1a05000 	mov	r5, r0
   14b08:	e28d0014 	add	r0, sp, #20
   14b0c:	eb0030d9 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   14b10:	e3a06000 	mov	r6, #0
   14b14:	e28d0014 	add	r0, sp, #20
   14b18:	e58d6000 	str	r6, [sp]
   14b1c:	e3a01003 	mov	r1, #3
   14b20:	e3a03014 	mov	r3, #20
   14b24:	e3401001 	movt	r1, #1
   14b28:	e28d202c 	add	r2, sp, #44	; 0x2c
   14b2c:	eb003119 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   14b30:	e2504000 	subs	r4, r0, #0
   14b34:	0a00003c 	beq	14c2c <CSMSC951xDevice::Configure()+0x130>
   14b38:	e2857018 	add	r7, r5, #24
   14b3c:	e28d1038 	add	r1, sp, #56	; 0x38
   14b40:	e1a00007 	mov	r0, r7
   14b44:	eb0000c8 	bl	14e6c <CMACAddress::Set(unsigned char const*)>
   14b48:	e28d001c 	add	r0, sp, #28
   14b4c:	eb004518 	bl	25fb4 <CString::CString()>
   14b50:	e28d101c 	add	r1, sp, #28
   14b54:	e1a00007 	mov	r0, r7
   14b58:	eb000125 	bl	14ff4 <CMACAddress::Format(CString*) const>
   14b5c:	eb004191 	bl	251a8 <CLogger::Get()>
   14b60:	e1a04000 	mov	r4, r0
   14b64:	e28d001c 	add	r0, sp, #28
   14b68:	eb004527 	bl	2600c <CString::operator char const*() const>
   14b6c:	e3a02004 	mov	r2, #4
   14b70:	e59f1244 	ldr	r1, [pc, #580]	; 14dbc <CSMSC951xDevice::Configure()+0x2c0>
   14b74:	e30c33fc 	movw	r3, #50172	; 0xc3fc
   14b78:	e3403002 	movt	r3, #2
   14b7c:	e58d0000 	str	r0, [sp]
   14b80:	e1a00004 	mov	r0, r4
   14b84:	eb004264 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14b88:	e1a00005 	mov	r0, r5
   14b8c:	ebfff533 	bl	12060 <CUSBFunction::GetNumEndpoints() const>
   14b90:	e3500003 	cmp	r0, #3
   14b94:	0a00000e 	beq	14bd4 <CSMSC951xDevice::Configure()+0xd8>
   14b98:	e1a00005 	mov	r0, r5
   14b9c:	e59f1218 	ldr	r1, [pc, #536]	; 14dbc <CSMSC951xDevice::Configure()+0x2c0>
   14ba0:	e1a04006 	mov	r4, r6
   14ba4:	ebfff5b3 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   14ba8:	e28d001c 	add	r0, sp, #28
   14bac:	eb0044cd 	bl	25ee8 <CString::~CString()>
   14bb0:	e28d0014 	add	r0, sp, #20
   14bb4:	eb0030b5 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   14bb8:	e1a00004 	mov	r0, r4
   14bbc:	e28dd040 	add	sp, sp, #64	; 0x40
   14bc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14bc4:	e5d43003 	ldrb	r3, [r4, #3]
   14bc8:	e203303f 	and	r3, r3, #63	; 0x3f
   14bcc:	e3530002 	cmp	r3, #2
   14bd0:	0a00001c 	beq	14c48 <CSMSC951xDevice::Configure()+0x14c>
   14bd4:	e3a01005 	mov	r1, #5
   14bd8:	e1a00005 	mov	r0, r5
   14bdc:	ebfff592 	bl	1222c <CUSBFunction::GetDescriptor(unsigned char)>
   14be0:	e2504000 	subs	r4, r0, #0
   14be4:	1afffff6 	bne	14bc4 <CSMSC951xDevice::Configure()+0xc8>
   14be8:	e5953010 	ldr	r3, [r5, #16]
   14bec:	e1a00005 	mov	r0, r5
   14bf0:	e3530000 	cmp	r3, #0
   14bf4:	0a000025 	beq	14c90 <CSMSC951xDevice::Configure()+0x194>
   14bf8:	e5953014 	ldr	r3, [r5, #20]
   14bfc:	e3530000 	cmp	r3, #0
   14c00:	0a000022 	beq	14c90 <CSMSC951xDevice::Configure()+0x194>
   14c04:	ebfff557 	bl	12168 <CUSBFunction::Configure()>
   14c08:	e2504000 	subs	r4, r0, #0
   14c0c:	1a000023 	bne	14ca0 <CSMSC951xDevice::Configure()+0x1a4>
   14c10:	eb004164 	bl	251a8 <CLogger::Get()>
   14c14:	e30b3888 	movw	r3, #47240	; 0xb888
   14c18:	e3a02001 	mov	r2, #1
   14c1c:	e3403002 	movt	r3, #2
   14c20:	e59f1194 	ldr	r1, [pc, #404]	; 14dbc <CSMSC951xDevice::Configure()+0x2c0>
   14c24:	eb00423c 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14c28:	eaffffde 	b	14ba8 <CSMSC951xDevice::Configure()+0xac>
   14c2c:	eb00415d 	bl	251a8 <CLogger::Get()>
   14c30:	e30c33e4 	movw	r3, #50148	; 0xc3e4
   14c34:	e3a02001 	mov	r2, #1
   14c38:	e3403002 	movt	r3, #2
   14c3c:	e59f1178 	ldr	r1, [pc, #376]	; 14dbc <CSMSC951xDevice::Configure()+0x2c0>
   14c40:	eb004235 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14c44:	eaffffd9 	b	14bb0 <CSMSC951xDevice::Configure()+0xb4>
   14c48:	e1d430d2 	ldrsb	r3, [r4, #2]
   14c4c:	e1a00005 	mov	r0, r5
   14c50:	e3530000 	cmp	r3, #0
   14c54:	ba000025 	blt	14cf0 <CSMSC951xDevice::Configure()+0x1f4>
   14c58:	e5953014 	ldr	r3, [r5, #20]
   14c5c:	e3530000 	cmp	r3, #0
   14c60:	1a000009 	bne	14c8c <CSMSC951xDevice::Configure()+0x190>
   14c64:	ebfff50d 	bl	120a0 <CUSBFunction::GetDevice() const>
   14c68:	e1a08000 	mov	r8, r0
   14c6c:	e3a00018 	mov	r0, #24
   14c70:	eb0034c8 	bl	21f98 <operator new(unsigned int)>
   14c74:	e1a02004 	mov	r2, r4
   14c78:	e1a01008 	mov	r1, r8
   14c7c:	e1a06000 	mov	r6, r0
   14c80:	ebffe42a 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14c84:	e5856014 	str	r6, [r5, #20]
   14c88:	eaffffd1 	b	14bd4 <CSMSC951xDevice::Configure()+0xd8>
   14c8c:	e1a00005 	mov	r0, r5
   14c90:	e59f1124 	ldr	r1, [pc, #292]	; 14dbc <CSMSC951xDevice::Configure()+0x2c0>
   14c94:	e3a04000 	mov	r4, #0
   14c98:	ebfff576 	bl	12278 <CUSBFunction::ConfigurationError(char const*) const>
   14c9c:	eaffffc1 	b	14ba8 <CSMSC951xDevice::Configure()+0xac>
   14ca0:	e1a00007 	mov	r0, r7
   14ca4:	e28d100c 	add	r1, sp, #12
   14ca8:	eb00009c 	bl	14f20 <CMACAddress::CopyTo(unsigned char*) const>
   14cac:	e5dd2011 	ldrb	r2, [sp, #17]
   14cb0:	e5dd3010 	ldrb	r3, [sp, #16]
   14cb4:	e3a01f41 	mov	r1, #260	; 0x104
   14cb8:	e1a00005 	mov	r0, r5
   14cbc:	e59d400c 	ldr	r4, [sp, #12]
   14cc0:	e1832402 	orr	r2, r3, r2, lsl #8
   14cc4:	ebfffed4 	bl	1481c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   14cc8:	e3500000 	cmp	r0, #0
   14ccc:	1a000014 	bne	14d24 <CSMSC951xDevice::Configure()+0x228>
   14cd0:	eb004134 	bl	251a8 <CLogger::Get()>
   14cd4:	e30c36c8 	movw	r3, #50888	; 0xc6c8
   14cd8:	e3a02001 	mov	r2, #1
   14cdc:	e3403002 	movt	r3, #2
   14ce0:	e59f10d4 	ldr	r1, [pc, #212]	; 14dbc <CSMSC951xDevice::Configure()+0x2c0>
   14ce4:	e3a04000 	mov	r4, #0
   14ce8:	eb00420b 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14cec:	eaffffad 	b	14ba8 <CSMSC951xDevice::Configure()+0xac>
   14cf0:	e5953010 	ldr	r3, [r5, #16]
   14cf4:	e3530000 	cmp	r3, #0
   14cf8:	1affffe4 	bne	14c90 <CSMSC951xDevice::Configure()+0x194>
   14cfc:	ebfff4e7 	bl	120a0 <CUSBFunction::GetDevice() const>
   14d00:	e1a08000 	mov	r8, r0
   14d04:	e3a00018 	mov	r0, #24
   14d08:	eb0034a2 	bl	21f98 <operator new(unsigned int)>
   14d0c:	e1a02004 	mov	r2, r4
   14d10:	e1a01008 	mov	r1, r8
   14d14:	e1a06000 	mov	r6, r0
   14d18:	ebffe404 	bl	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14d1c:	e5856010 	str	r6, [r5, #16]
   14d20:	eaffffab 	b	14bd4 <CSMSC951xDevice::Configure()+0xd8>
   14d24:	e1a02004 	mov	r2, r4
   14d28:	e3a01f42 	mov	r1, #264	; 0x108
   14d2c:	e1a00005 	mov	r0, r5
   14d30:	ebfffeb9 	bl	1481c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   14d34:	e3500000 	cmp	r0, #0
   14d38:	0affffe4 	beq	14cd0 <CSMSC951xDevice::Configure()+0x1d4>
   14d3c:	e3a02000 	mov	r2, #0
   14d40:	e3a01024 	mov	r1, #36	; 0x24
   14d44:	e3402111 	movt	r2, #273	; 0x111
   14d48:	e1a00005 	mov	r0, r5
   14d4c:	ebfffeb2 	bl	1481c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   14d50:	e3500000 	cmp	r0, #0
   14d54:	1a000007 	bne	14d78 <CSMSC951xDevice::Configure()+0x27c>
   14d58:	eb004112 	bl	251a8 <CLogger::Get()>
   14d5c:	e30c36e0 	movw	r3, #50912	; 0xc6e0
   14d60:	e3a02001 	mov	r2, #1
   14d64:	e3403002 	movt	r3, #2
   14d68:	e59f104c 	ldr	r1, [pc, #76]	; 14dbc <CSMSC951xDevice::Configure()+0x2c0>
   14d6c:	e3a04000 	mov	r4, #0
   14d70:	eb0041e9 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14d74:	eaffff8b 	b	14ba8 <CSMSC951xDevice::Configure()+0xac>
   14d78:	e3a0200c 	mov	r2, #12
   14d7c:	e3a01c01 	mov	r1, #256	; 0x100
   14d80:	e3402080 	movt	r2, #128	; 0x80
   14d84:	e1a00005 	mov	r0, r5
   14d88:	ebfffea3 	bl	1481c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   14d8c:	e3500000 	cmp	r0, #0
   14d90:	0afffff0 	beq	14d58 <CSMSC951xDevice::Configure()+0x25c>
   14d94:	e3a02004 	mov	r2, #4
   14d98:	e3a01010 	mov	r1, #16
   14d9c:	e1a00005 	mov	r0, r5
   14da0:	ebfffe9d 	bl	1481c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   14da4:	e3500000 	cmp	r0, #0
   14da8:	0affffea 	beq	14d58 <CSMSC951xDevice::Configure()+0x25c>
   14dac:	e1a00005 	mov	r0, r5
   14db0:	e3a04001 	mov	r4, #1
   14db4:	eb0000d0 	bl	150fc <CNetDevice::AddNetDevice()>
   14db8:	eaffff7a 	b	14ba8 <CSMSC951xDevice::Configure()+0xac>
   14dbc:	0002c578 	.word	0x0002c578

00014dc0 <CMACAddress::CMACAddress()>:
   14dc0:	e3a02000 	mov	r2, #0
   14dc4:	e5802000 	str	r2, [r0]
   14dc8:	e12fff1e 	bx	lr

00014dcc <CMACAddress::~CMACAddress()>:
   14dcc:	e12fff1e 	bx	lr

00014dd0 <CMACAddress::operator==(CMACAddress const&) const>:
   14dd0:	e5903000 	ldr	r3, [r0]
   14dd4:	e92d4070 	push	{r4, r5, r6, lr}
   14dd8:	e3530000 	cmp	r3, #0
   14ddc:	e1a04000 	mov	r4, r0
   14de0:	e1a05001 	mov	r5, r1
   14de4:	0a00000a 	beq	14e14 <CMACAddress::operator==(CMACAddress const&) const+0x44>
   14de8:	e5953000 	ldr	r3, [r5]
   14dec:	e2844004 	add	r4, r4, #4
   14df0:	e3530000 	cmp	r3, #0
   14df4:	0a000010 	beq	14e3c <CMACAddress::operator==(CMACAddress const&) const+0x6c>
   14df8:	e2851004 	add	r1, r5, #4
   14dfc:	e1a00004 	mov	r0, r4
   14e00:	e3a02006 	mov	r2, #6
   14e04:	eb0037e0 	bl	22d8c <memcmp>
   14e08:	e16f0f10 	clz	r0, r0
   14e0c:	e1a002a0 	lsr	r0, r0, #5
   14e10:	e8bd8070 	pop	{r4, r5, r6, pc}
   14e14:	e30c16f4 	movw	r1, #50932	; 0xc6f4
   14e18:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   14e1c:	e3401002 	movt	r1, #2
   14e20:	e3400002 	movt	r0, #2
   14e24:	e3a02029 	mov	r2, #41	; 0x29
   14e28:	e2844004 	add	r4, r4, #4
   14e2c:	eb003f5b 	bl	24ba0 <assertion_failed>
   14e30:	e5953000 	ldr	r3, [r5]
   14e34:	e3530000 	cmp	r3, #0
   14e38:	1affffee 	bne	14df8 <CMACAddress::operator==(CMACAddress const&) const+0x28>
   14e3c:	e30c16f4 	movw	r1, #50932	; 0xc6f4
   14e40:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   14e44:	e3401002 	movt	r1, #2
   14e48:	e3400002 	movt	r0, #2
   14e4c:	e3a02041 	mov	r2, #65	; 0x41
   14e50:	eb003f52 	bl	24ba0 <assertion_failed>
   14e54:	eaffffe7 	b	14df8 <CMACAddress::operator==(CMACAddress const&) const+0x28>

00014e58 <CMACAddress::operator!=(CMACAddress const&) const>:
   14e58:	e92d4010 	push	{r4, lr}
   14e5c:	ebffffdb 	bl	14dd0 <CMACAddress::operator==(CMACAddress const&) const>
   14e60:	e16f0f10 	clz	r0, r0
   14e64:	e1a002a0 	lsr	r0, r0, #5
   14e68:	e8bd8010 	pop	{r4, pc}

00014e6c <CMACAddress::Set(unsigned char const*)>:
   14e6c:	e92d4070 	push	{r4, r5, r6, lr}
   14e70:	e2515000 	subs	r5, r1, #0
   14e74:	e1a04000 	mov	r4, r0
   14e78:	0a000006 	beq	14e98 <CMACAddress::Set(unsigned char const*)+0x2c>
   14e7c:	e1a01005 	mov	r1, r5
   14e80:	e3a02006 	mov	r2, #6
   14e84:	e2840004 	add	r0, r4, #4
   14e88:	eb0038ce 	bl	231c8 <memcpy>
   14e8c:	e3a03001 	mov	r3, #1
   14e90:	e5843000 	str	r3, [r4]
   14e94:	e8bd8070 	pop	{r4, r5, r6, pc}
   14e98:	e30c16f4 	movw	r1, #50932	; 0xc6f4
   14e9c:	e30c0704 	movw	r0, #50948	; 0xc704
   14ea0:	e3401002 	movt	r1, #2
   14ea4:	e3400002 	movt	r0, #2
   14ea8:	e3a02034 	mov	r2, #52	; 0x34
   14eac:	eb003f3b 	bl	24ba0 <assertion_failed>
   14eb0:	eafffff1 	b	14e7c <CMACAddress::Set(unsigned char const*)+0x10>

00014eb4 <CMACAddress::CMACAddress(unsigned char const*)>:
   14eb4:	e92d4010 	push	{r4, lr}
   14eb8:	e1a04000 	mov	r4, r0
   14ebc:	ebffffea 	bl	14e6c <CMACAddress::Set(unsigned char const*)>
   14ec0:	e1a00004 	mov	r0, r4
   14ec4:	e8bd8010 	pop	{r4, pc}

00014ec8 <CMACAddress::SetBroadcast()>:
   14ec8:	e92d4010 	push	{r4, lr}
   14ecc:	e3a02006 	mov	r2, #6
   14ed0:	e1a04000 	mov	r4, r0
   14ed4:	e3a010ff 	mov	r1, #255	; 0xff
   14ed8:	e2800004 	add	r0, r0, #4
   14edc:	eb0037a1 	bl	22d68 <memset>
   14ee0:	e3a03001 	mov	r3, #1
   14ee4:	e5843000 	str	r3, [r4]
   14ee8:	e8bd8010 	pop	{r4, pc}

00014eec <CMACAddress::Get() const>:
   14eec:	e5903000 	ldr	r3, [r0]
   14ef0:	e92d4010 	push	{r4, lr}
   14ef4:	e3530000 	cmp	r3, #0
   14ef8:	e1a04000 	mov	r4, r0
   14efc:	1a000005 	bne	14f18 <CMACAddress::Get() const+0x2c>
   14f00:	e30c16f4 	movw	r1, #50932	; 0xc6f4
   14f04:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   14f08:	e3401002 	movt	r1, #2
   14f0c:	e3400002 	movt	r0, #2
   14f10:	e3a02041 	mov	r2, #65	; 0x41
   14f14:	eb003f21 	bl	24ba0 <assertion_failed>
   14f18:	e2840004 	add	r0, r4, #4
   14f1c:	e8bd8010 	pop	{r4, pc}

00014f20 <CMACAddress::CopyTo(unsigned char*) const>:
   14f20:	e5903000 	ldr	r3, [r0]
   14f24:	e92d4070 	push	{r4, r5, r6, lr}
   14f28:	e3530000 	cmp	r3, #0
   14f2c:	e1a05000 	mov	r5, r0
   14f30:	e1a04001 	mov	r4, r1
   14f34:	0a000006 	beq	14f54 <CMACAddress::CopyTo(unsigned char*) const+0x34>
   14f38:	e3540000 	cmp	r4, #0
   14f3c:	0a00000c 	beq	14f74 <CMACAddress::CopyTo(unsigned char*) const+0x54>
   14f40:	e2851004 	add	r1, r5, #4
   14f44:	e1a00004 	mov	r0, r4
   14f48:	e3a02006 	mov	r2, #6
   14f4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   14f50:	ea00389c 	b	231c8 <memcpy>
   14f54:	e30c16f4 	movw	r1, #50932	; 0xc6f4
   14f58:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   14f5c:	e3401002 	movt	r1, #2
   14f60:	e3400002 	movt	r0, #2
   14f64:	e3a02047 	mov	r2, #71	; 0x47
   14f68:	eb003f0c 	bl	24ba0 <assertion_failed>
   14f6c:	e3540000 	cmp	r4, #0
   14f70:	1afffff2 	bne	14f40 <CMACAddress::CopyTo(unsigned char*) const+0x20>
   14f74:	e30c16f4 	movw	r1, #50932	; 0xc6f4
   14f78:	e30b0984 	movw	r0, #47492	; 0xb984
   14f7c:	e3401002 	movt	r1, #2
   14f80:	e3400002 	movt	r0, #2
   14f84:	e3a02048 	mov	r2, #72	; 0x48
   14f88:	eb003f04 	bl	24ba0 <assertion_failed>
   14f8c:	eaffffeb 	b	14f40 <CMACAddress::CopyTo(unsigned char*) const+0x20>

00014f90 <CMACAddress::IsBroadcast() const>:
   14f90:	e5903000 	ldr	r3, [r0]
   14f94:	e92d4010 	push	{r4, lr}
   14f98:	e3530000 	cmp	r3, #0
   14f9c:	e1a04000 	mov	r4, r0
   14fa0:	0a000008 	beq	14fc8 <CMACAddress::IsBroadcast() const+0x38>
   14fa4:	e2843004 	add	r3, r4, #4
   14fa8:	e284000a 	add	r0, r4, #10
   14fac:	e4d32001 	ldrb	r2, [r3], #1
   14fb0:	e35200ff 	cmp	r2, #255	; 0xff
   14fb4:	1a00000a 	bne	14fe4 <CMACAddress::IsBroadcast() const+0x54>
   14fb8:	e1530000 	cmp	r3, r0
   14fbc:	1afffffa 	bne	14fac <CMACAddress::IsBroadcast() const+0x1c>
   14fc0:	e3a00001 	mov	r0, #1
   14fc4:	e8bd8010 	pop	{r4, pc}
   14fc8:	e30c16f4 	movw	r1, #50932	; 0xc6f4
   14fcc:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   14fd0:	e3401002 	movt	r1, #2
   14fd4:	e3400002 	movt	r0, #2
   14fd8:	e3a0204e 	mov	r2, #78	; 0x4e
   14fdc:	eb003eef 	bl	24ba0 <assertion_failed>
   14fe0:	eaffffef 	b	14fa4 <CMACAddress::IsBroadcast() const+0x14>
   14fe4:	e3a00000 	mov	r0, #0
   14fe8:	e8bd8010 	pop	{r4, pc}

00014fec <CMACAddress::GetSize() const>:
   14fec:	e3a00006 	mov	r0, #6
   14ff0:	e12fff1e 	bx	lr

00014ff4 <CMACAddress::Format(CString*) const>:
   14ff4:	e5903000 	ldr	r3, [r0]
   14ff8:	e92d4070 	push	{r4, r5, r6, lr}
   14ffc:	e3530000 	cmp	r3, #0
   15000:	e24dd010 	sub	sp, sp, #16
   15004:	e1a04000 	mov	r4, r0
   15008:	e1a05001 	mov	r5, r1
   1500c:	0a000010 	beq	15054 <CMACAddress::Format(CString*) const+0x60>
   15010:	e3550000 	cmp	r5, #0
   15014:	0a000016 	beq	15074 <CMACAddress::Format(CString*) const+0x80>
   15018:	e5d46009 	ldrb	r6, [r4, #9]
   1501c:	e1a00005 	mov	r0, r5
   15020:	e5d4e007 	ldrb	lr, [r4, #7]
   15024:	e30c1724 	movw	r1, #50980	; 0xc724
   15028:	e5d45008 	ldrb	r5, [r4, #8]
   1502c:	e3401002 	movt	r1, #2
   15030:	e5d4c006 	ldrb	ip, [r4, #6]
   15034:	e5d43005 	ldrb	r3, [r4, #5]
   15038:	e5d42004 	ldrb	r2, [r4, #4]
   1503c:	e58d600c 	str	r6, [sp, #12]
   15040:	e58d5008 	str	r5, [sp, #8]
   15044:	e88d5000 	stm	sp, {ip, lr}
   15048:	eb0046eb 	bl	26bfc <CString::Format(char const*, ...)>
   1504c:	e28dd010 	add	sp, sp, #16
   15050:	e8bd8070 	pop	{r4, r5, r6, pc}
   15054:	e30c16f4 	movw	r1, #50932	; 0xc6f4
   15058:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1505c:	e3401002 	movt	r1, #2
   15060:	e3400002 	movt	r0, #2
   15064:	e3a02062 	mov	r2, #98	; 0x62
   15068:	eb003ecc 	bl	24ba0 <assertion_failed>
   1506c:	e3550000 	cmp	r5, #0
   15070:	1affffe8 	bne	15018 <CMACAddress::Format(CString*) const+0x24>
   15074:	e30c16f4 	movw	r1, #50932	; 0xc6f4
   15078:	e30c0714 	movw	r0, #50964	; 0xc714
   1507c:	e3401002 	movt	r1, #2
   15080:	e3400002 	movt	r0, #2
   15084:	e3a02063 	mov	r2, #99	; 0x63
   15088:	eb003ec4 	bl	24ba0 <assertion_failed>
   1508c:	eaffffe1 	b	15018 <CMACAddress::Format(CString*) const+0x24>

00015090 <CNetDevice::CNetDevice(CUSBFunction*)>:
   15090:	e92d4010 	push	{r4, lr}
   15094:	e1a04000 	mov	r4, r0
   15098:	ebfff391 	bl	11ee4 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1509c:	e59f3008 	ldr	r3, [pc, #8]	; 150ac <CNetDevice::CNetDevice(CUSBFunction*)+0x1c>
   150a0:	e1a00004 	mov	r0, r4
   150a4:	e5843000 	str	r3, [r4]
   150a8:	e8bd8010 	pop	{r4, pc}
   150ac:	0002c74c 	.word	0x0002c74c

000150b0 <CNetDevice::~CNetDevice()>:
   150b0:	e59f3014 	ldr	r3, [pc, #20]	; 150cc <CNetDevice::~CNetDevice()+0x1c>
   150b4:	e92d4010 	push	{r4, lr}
   150b8:	e1a04000 	mov	r4, r0
   150bc:	e5803000 	str	r3, [r0]
   150c0:	ebfff336 	bl	11da0 <CUSBFunction::~CUSBFunction()>
   150c4:	e1a00004 	mov	r0, r4
   150c8:	e8bd8010 	pop	{r4, pc}
   150cc:	0002c74c 	.word	0x0002c74c

000150d0 <CNetDevice::~CNetDevice()>:
   150d0:	e59f3020 	ldr	r3, [pc, #32]	; 150f8 <CNetDevice::~CNetDevice()+0x28>
   150d4:	e92d4010 	push	{r4, lr}
   150d8:	e1a04000 	mov	r4, r0
   150dc:	e5803000 	str	r3, [r0]
   150e0:	ebfff32e 	bl	11da0 <CUSBFunction::~CUSBFunction()>
   150e4:	e1a00004 	mov	r0, r4
   150e8:	e3a01010 	mov	r1, #16
   150ec:	eb0033ad 	bl	21fa8 <operator delete(void*, unsigned int)>
   150f0:	e1a00004 	mov	r0, r4
   150f4:	e8bd8010 	pop	{r4, pc}
   150f8:	0002c74c 	.word	0x0002c74c

000150fc <CNetDevice::AddNetDevice()>:
   150fc:	e92d4030 	push	{r4, r5, lr}
   15100:	e24dd014 	sub	sp, sp, #20
   15104:	e1a05000 	mov	r5, r0
   15108:	e1a0000d 	mov	r0, sp
   1510c:	eb0043a8 	bl	25fb4 <CString::CString()>
   15110:	e3023820 	movw	r3, #10272	; 0x2820
   15114:	e3403143 	movt	r3, #323	; 0x143
   15118:	e1a0000d 	mov	r0, sp
   1511c:	e30c1774 	movw	r1, #51060	; 0xc774
   15120:	e3401002 	movt	r1, #2
   15124:	e5932000 	ldr	r2, [r3]
   15128:	e282c001 	add	ip, r2, #1
   1512c:	e583c000 	str	ip, [r3]
   15130:	eb0046b1 	bl	26bfc <CString::Format(char const*, ...)>
   15134:	eb003fef 	bl	250f8 <CDeviceNameService::Get()>
   15138:	e1a04000 	mov	r4, r0
   1513c:	e1a0000d 	mov	r0, sp
   15140:	eb0043b1 	bl	2600c <CString::operator char const*() const>
   15144:	e1a02005 	mov	r2, r5
   15148:	e3a03000 	mov	r3, #0
   1514c:	e1a01000 	mov	r1, r0
   15150:	e1a00004 	mov	r0, r4
   15154:	eb003f73 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   15158:	e1a0000d 	mov	r0, sp
   1515c:	eb004361 	bl	25ee8 <CString::~CString()>
   15160:	e28dd014 	add	sp, sp, #20
   15164:	e8bd8030 	pop	{r4, r5, pc}

00015168 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   15168:	e92d4010 	push	{r4, lr}
   1516c:	e1a04000 	mov	r4, r0
   15170:	e3a03000 	mov	r3, #0
   15174:	e2800014 	add	r0, r0, #20
   15178:	e5843000 	str	r3, [r4]
   1517c:	e5843004 	str	r3, [r4, #4]
   15180:	e5843008 	str	r3, [r4, #8]
   15184:	e5c4300c 	strb	r3, [r4, #12]
   15188:	e5c4300d 	strb	r3, [r4, #13]
   1518c:	e5843010 	str	r3, [r4, #16]
   15190:	eb000199 	bl	157fc <CKeyMap::CKeyMap()>
   15194:	e1a00004 	mov	r0, r4
   15198:	e8bd8010 	pop	{r4, pc}

0001519c <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   1519c:	e92d4010 	push	{r4, lr}
   151a0:	e1a04000 	mov	r4, r0
   151a4:	e3a03000 	mov	r3, #0
   151a8:	e2800014 	add	r0, r0, #20
   151ac:	e5843000 	str	r3, [r4]
   151b0:	e5843004 	str	r3, [r4, #4]
   151b4:	e5843008 	str	r3, [r4, #8]
   151b8:	eb0000c7 	bl	154dc <CKeyMap::~CKeyMap()>
   151bc:	e1a00004 	mov	r0, r4
   151c0:	e8bd8010 	pop	{r4, pc}

000151c4 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   151c4:	e92d4070 	push	{r4, r5, r6, lr}
   151c8:	e2515000 	subs	r5, r1, #0
   151cc:	e1a04000 	mov	r4, r0
   151d0:	0a000001 	beq	151dc <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x18>
   151d4:	e5845000 	str	r5, [r4]
   151d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   151dc:	e30c177c 	movw	r1, #51068	; 0xc77c
   151e0:	e30c0794 	movw	r0, #51092	; 0xc794
   151e4:	e3401002 	movt	r1, #2
   151e8:	e3400002 	movt	r0, #2
   151ec:	e3a02030 	mov	r2, #48	; 0x30
   151f0:	eb003e6a 	bl	24ba0 <assertion_failed>
   151f4:	e5845000 	str	r5, [r4]
   151f8:	e8bd8070 	pop	{r4, r5, r6, pc}

000151fc <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   151fc:	e92d4070 	push	{r4, r5, r6, lr}
   15200:	e2515000 	subs	r5, r1, #0
   15204:	e1a04000 	mov	r4, r0
   15208:	0a000001 	beq	15214 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x18>
   1520c:	e5845004 	str	r5, [r4, #4]
   15210:	e8bd8070 	pop	{r4, r5, r6, pc}
   15214:	e30c177c 	movw	r1, #51068	; 0xc77c
   15218:	e30c07ac 	movw	r0, #51116	; 0xc7ac
   1521c:	e3401002 	movt	r1, #2
   15220:	e3400002 	movt	r0, #2
   15224:	e3a02036 	mov	r2, #54	; 0x36
   15228:	eb003e5c 	bl	24ba0 <assertion_failed>
   1522c:	e5845004 	str	r5, [r4, #4]
   15230:	e8bd8070 	pop	{r4, r5, r6, pc}

00015234 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   15234:	e92d4070 	push	{r4, r5, r6, lr}
   15238:	e2515000 	subs	r5, r1, #0
   1523c:	e1a04000 	mov	r4, r0
   15240:	0a000001 	beq	1524c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x18>
   15244:	e5845008 	str	r5, [r4, #8]
   15248:	e8bd8070 	pop	{r4, r5, r6, pc}
   1524c:	e30c177c 	movw	r1, #51068	; 0xc77c
   15250:	e30c07c8 	movw	r0, #51144	; 0xc7c8
   15254:	e3401002 	movt	r1, #2
   15258:	e3400002 	movt	r0, #2
   1525c:	e3a0203c 	mov	r2, #60	; 0x3c
   15260:	eb003e4e 	bl	24ba0 <assertion_failed>
   15264:	e5845008 	str	r5, [r4, #8]
   15268:	e8bd8070 	pop	{r4, r5, r6, pc}

0001526c <CKeyboardBehaviour::GetLEDStatus() const>:
   1526c:	e2800014 	add	r0, r0, #20
   15270:	ea000131 	b	1573c <CKeyMap::GetLEDStatus() const>

00015274 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   15274:	e92d4070 	push	{r4, r5, r6, lr}
   15278:	e2805014 	add	r5, r0, #20
   1527c:	e5d0600c 	ldrb	r6, [r0, #12]
   15280:	e24dd008 	sub	sp, sp, #8
   15284:	e1a04000 	mov	r4, r0
   15288:	e1a00005 	mov	r0, r5
   1528c:	e1a02006 	mov	r2, r6
   15290:	eb0000b4 	bl	15568 <CKeyMap::Translate(unsigned char, unsigned char)>
   15294:	e2403e13 	sub	r3, r0, #304	; 0x130
   15298:	e2433003 	sub	r3, r3, #3
   1529c:	e353000f 	cmp	r3, #15
   152a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   152a4:	ea00001d 	b	15320 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   152a8:	00015300 	.word	0x00015300
   152ac:	00015300 	.word	0x00015300
   152b0:	00015300 	.word	0x00015300
   152b4:	000152e8 	.word	0x000152e8
   152b8:	000152e8 	.word	0x000152e8
   152bc:	000152e8 	.word	0x000152e8
   152c0:	000152e8 	.word	0x000152e8
   152c4:	000152e8 	.word	0x000152e8
   152c8:	000152e8 	.word	0x000152e8
   152cc:	000152e8 	.word	0x000152e8
   152d0:	000152e8 	.word	0x000152e8
   152d4:	000152e8 	.word	0x000152e8
   152d8:	000152e8 	.word	0x000152e8
   152dc:	000152e8 	.word	0x000152e8
   152e0:	000152e8 	.word	0x000152e8
   152e4:	00015308 	.word	0x00015308
   152e8:	e5943004 	ldr	r3, [r4, #4]
   152ec:	e3530000 	cmp	r3, #0
   152f0:	0a000002 	beq	15300 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   152f4:	e2400f4d 	sub	r0, r0, #308	; 0x134
   152f8:	e2400002 	sub	r0, r0, #2
   152fc:	e12fff33 	blx	r3
   15300:	e28dd008 	add	sp, sp, #8
   15304:	e8bd8070 	pop	{r4, r5, r6, pc}
   15308:	e5943008 	ldr	r3, [r4, #8]
   1530c:	e3530000 	cmp	r3, #0
   15310:	0afffffa 	beq	15300 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   15314:	e12fff33 	blx	r3
   15318:	e28dd008 	add	sp, sp, #8
   1531c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15320:	e1a01000 	mov	r1, r0
   15324:	e1a02006 	mov	r2, r6
   15328:	e1a00005 	mov	r0, r5
   1532c:	e28d3004 	add	r3, sp, #4
   15330:	eb0000d2 	bl	15680 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   15334:	e3500000 	cmp	r0, #0
   15338:	0afffff0 	beq	15300 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   1533c:	e5943000 	ldr	r3, [r4]
   15340:	e3530000 	cmp	r3, #0
   15344:	0affffed 	beq	15300 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   15348:	e12fff33 	blx	r3
   1534c:	e28dd008 	add	sp, sp, #8
   15350:	e8bd8070 	pop	{r4, r5, r6, pc}

00015354 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   15354:	e241c080 	sub	ip, r1, #128	; 0x80
   15358:	e1a03000 	mov	r3, r0
   1535c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15360:	e6efe07c 	uxtb	lr, ip
   15364:	e35e0007 	cmp	lr, #7
   15368:	8a000004 	bhi	15380 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x2c>
   1536c:	e5d0200c 	ldrb	r2, [r0, #12]
   15370:	e3a01001 	mov	r1, #1
   15374:	e182cc11 	orr	ip, r2, r1, lsl ip
   15378:	e5c0c00c 	strb	ip, [r0, #12]
   1537c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   15380:	e5d0c00d 	ldrb	ip, [r0, #13]
   15384:	e15c0001 	cmp	ip, r1
   15388:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   1538c:	e5c3100d 	strb	r1, [r3, #13]
   15390:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   15394:	eaffffb6 	b	15274 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

00015398 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   15398:	e2413080 	sub	r3, r1, #128	; 0x80
   1539c:	e6ef2073 	uxtb	r2, r3
   153a0:	e3520007 	cmp	r2, #7
   153a4:	8a000004 	bhi	153bc <CKeyboardBehaviour::KeyReleased(unsigned char)+0x24>
   153a8:	e5d0200c 	ldrb	r2, [r0, #12]
   153ac:	e3a01001 	mov	r1, #1
   153b0:	e1c23311 	bic	r3, r2, r1, lsl r3
   153b4:	e5c0300c 	strb	r3, [r0, #12]
   153b8:	e12fff1e 	bx	lr
   153bc:	e5d0300d 	ldrb	r3, [r0, #13]
   153c0:	e1530001 	cmp	r3, r1
   153c4:	112fff1e 	bxne	lr
   153c8:	e5903010 	ldr	r3, [r0, #16]
   153cc:	e92d4010 	push	{r4, lr}
   153d0:	e3530000 	cmp	r3, #0
   153d4:	e1a04000 	mov	r4, r0
   153d8:	1a000002 	bne	153e8 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   153dc:	e3a03000 	mov	r3, #0
   153e0:	e5c4300d 	strb	r3, [r4, #13]
   153e4:	e8bd8010 	pop	{r4, pc}
   153e8:	eb003650 	bl	22d30 <CTimer::Get()>
   153ec:	e5941010 	ldr	r1, [r4, #16]
   153f0:	eb0034df 	bl	22774 <CTimer::CancelKernelTimer(unsigned int)>
   153f4:	e3a03000 	mov	r3, #0
   153f8:	e5843010 	str	r3, [r4, #16]
   153fc:	eafffff6 	b	153dc <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

00015400 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   15400:	e5903010 	ldr	r3, [r0, #16]
   15404:	e92d4010 	push	{r4, lr}
   15408:	e1530001 	cmp	r3, r1
   1540c:	e24dd008 	sub	sp, sp, #8
   15410:	e1a04000 	mov	r4, r0
   15414:	0a000005 	beq	15430 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x30>
   15418:	e30c177c 	movw	r1, #51068	; 0xc77c
   1541c:	e30c07e0 	movw	r0, #51168	; 0xc7e0
   15420:	e3401002 	movt	r1, #2
   15424:	e3400002 	movt	r0, #2
   15428:	e3a020b1 	mov	r2, #177	; 0xb1
   1542c:	eb003ddb 	bl	24ba0 <assertion_failed>
   15430:	e5d4100d 	ldrb	r1, [r4, #13]
   15434:	e3510000 	cmp	r1, #0
   15438:	1a000001 	bne	15444 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x44>
   1543c:	e28dd008 	add	sp, sp, #8
   15440:	e8bd8010 	pop	{r4, pc}
   15444:	e1a00004 	mov	r0, r4
   15448:	ebffff89 	bl	15274 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   1544c:	eb003637 	bl	22d30 <CTimer::Get()>
   15450:	e58d4000 	str	r4, [sp]
   15454:	e3052494 	movw	r2, #21652	; 0x5494
   15458:	e3a03000 	mov	r3, #0
   1545c:	e3402001 	movt	r2, #1
   15460:	e3a01008 	mov	r1, #8
   15464:	eb00346a 	bl	22614 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   15468:	e3500000 	cmp	r0, #0
   1546c:	e5840010 	str	r0, [r4, #16]
   15470:	1afffff1 	bne	1543c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x3c>
   15474:	e30c177c 	movw	r1, #51068	; 0xc77c
   15478:	e30c02e0 	movw	r0, #49888	; 0xc2e0
   1547c:	e3401002 	movt	r1, #2
   15480:	e3400002 	movt	r0, #2
   15484:	e3a020b8 	mov	r2, #184	; 0xb8
   15488:	e28dd008 	add	sp, sp, #8
   1548c:	e8bd4010 	pop	{r4, lr}
   15490:	ea003dc2 	b	24ba0 <assertion_failed>

00015494 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   15494:	e92d4070 	push	{r4, r5, r6, lr}
   15498:	e2524000 	subs	r4, r2, #0
   1549c:	e1a05000 	mov	r5, r0
   154a0:	0a000003 	beq	154b4 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x20>
   154a4:	e1a01005 	mov	r1, r5
   154a8:	e1a00004 	mov	r0, r4
   154ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   154b0:	eaffffd2 	b	15400 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   154b4:	e30c177c 	movw	r1, #51068	; 0xc77c
   154b8:	e30a0940 	movw	r0, #43328	; 0xa940
   154bc:	e3401002 	movt	r1, #2
   154c0:	e3400002 	movt	r0, #2
   154c4:	e3a020bf 	mov	r2, #191	; 0xbf
   154c8:	eb003db4 	bl	24ba0 <assertion_failed>
   154cc:	e1a01005 	mov	r1, r5
   154d0:	e1a00004 	mov	r0, r4
   154d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   154d8:	eaffffc8 	b	15400 <CKeyboardBehaviour::TimerHandler(unsigned int)>

000154dc <CKeyMap::~CKeyMap()>:
   154dc:	e12fff1e 	bx	lr

000154e0 <CKeyMap::ClearTable(unsigned char)>:
   154e0:	e3510003 	cmp	r1, #3
   154e4:	ca000009 	bgt	15510 <CKeyMap::ClearTable(unsigned char)+0x30>
   154e8:	e1a03081 	lsl	r3, r1, #1
   154ec:	e3a01000 	mov	r1, #0
   154f0:	e2832b01 	add	r2, r3, #1024	; 0x400
   154f4:	e0803003 	add	r3, r0, r3
   154f8:	e0802002 	add	r2, r0, r2
   154fc:	e0c310b8 	strh	r1, [r3], #8
   15500:	e1530002 	cmp	r3, r2
   15504:	1afffffc 	bne	154fc <CKeyMap::ClearTable(unsigned char)+0x1c>
   15508:	e3a00001 	mov	r0, #1
   1550c:	e12fff1e 	bx	lr
   15510:	e3a00000 	mov	r0, #0
   15514:	e12fff1e 	bx	lr

00015518 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   15518:	e16fcf12 	clz	ip, r2
   1551c:	e1a0c2ac 	lsr	ip, ip, #5
   15520:	e3510003 	cmp	r1, #3
   15524:	c38cc001 	orrgt	ip, ip, #1
   15528:	e35c0000 	cmp	ip, #0
   1552c:	1a00000a 	bne	1555c <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   15530:	e352007f 	cmp	r2, #127	; 0x7f
   15534:	ca000009 	bgt	15560 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   15538:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1553c:	e300e132 	movw	lr, #306	; 0x132
   15540:	e153000e 	cmp	r3, lr
   15544:	d0811102 	addle	r1, r1, r2, lsl #2
   15548:	d3a0c001 	movle	ip, #1
   1554c:	d1a01c11 	lslle	r1, r1, ip
   15550:	d18030b1 	strhle	r3, [r0, r1]
   15554:	e1a0000c 	mov	r0, ip
   15558:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1555c:	e3a0c000 	mov	ip, #0
   15560:	e1a0000c 	mov	r0, ip
   15564:	e12fff1e 	bx	lr

00015568 <CKeyMap::Translate(unsigned char, unsigned char)>:
   15568:	e6af3071 	sxtb	r3, r1
   1556c:	e3530000 	cmp	r3, #0
   15570:	da000025 	ble	1560c <CKeyMap::Translate(unsigned char, unsigned char)+0xa4>
   15574:	e1a03181 	lsl	r3, r1, #3
   15578:	e19030b3 	ldrh	r3, [r0, r3]
   1557c:	e3530f42 	cmp	r3, #264	; 0x108
   15580:	0a000024 	beq	15618 <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>
   15584:	e243cf43 	sub	ip, r3, #268	; 0x10c
   15588:	e24cc003 	sub	ip, ip, #3
   1558c:	e35c000b 	cmp	ip, #11
   15590:	8a000003 	bhi	155a4 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   15594:	e3120004 	tst	r2, #4
   15598:	12833027 	addne	r3, r3, #39	; 0x27
   1559c:	16ff3073 	uxthne	r3, r3
   155a0:	1a00001a 	bne	15610 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   155a4:	e312008c 	tst	r2, #140	; 0x8c
   155a8:	1a000017 	bne	1560c <CKeyMap::Translate(unsigned char, unsigned char)+0xa4>
   155ac:	e2413053 	sub	r3, r1, #83	; 0x53
   155b0:	e3530010 	cmp	r3, #16
   155b4:	9a00001d 	bls	15630 <CKeyMap::Translate(unsigned char, unsigned char)+0xc8>
   155b8:	e3120040 	tst	r2, #64	; 0x40
   155bc:	0a00002b 	beq	15670 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   155c0:	e3120022 	tst	r2, #34	; 0x22
   155c4:	13a03003 	movne	r3, #3
   155c8:	03a03002 	moveq	r3, #2
   155cc:	e0831101 	add	r1, r3, r1, lsl #2
   155d0:	e300211e 	movw	r2, #286	; 0x11e
   155d4:	e1a01081 	lsl	r1, r1, #1
   155d8:	e19030b1 	ldrh	r3, [r0, r1]
   155dc:	e1530002 	cmp	r3, r2
   155e0:	0a00001c 	beq	15658 <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   155e4:	e3530e12 	cmp	r3, #288	; 0x120
   155e8:	0a000014 	beq	15640 <CKeyMap::Translate(unsigned char, unsigned char)+0xd8>
   155ec:	e3530f47 	cmp	r3, #284	; 0x11c
   155f0:	1a000006 	bne	15610 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   155f4:	e5902400 	ldr	r2, [r0, #1024]	; 0x400
   155f8:	e3003133 	movw	r3, #307	; 0x133
   155fc:	e16f2f12 	clz	r2, r2
   15600:	e1a022a2 	lsr	r2, r2, #5
   15604:	e5802400 	str	r2, [r0, #1024]	; 0x400
   15608:	ea000000 	b	15610 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   1560c:	e3a03000 	mov	r3, #0
   15610:	e1a00003 	mov	r0, r3
   15614:	e12fff1e 	bx	lr
   15618:	e3120011 	tst	r2, #17
   1561c:	0affffe0 	beq	155a4 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   15620:	e3120004 	tst	r2, #4
   15624:	13003142 	movwne	r3, #322	; 0x142
   15628:	1afffff8 	bne	15610 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   1562c:	eaffffdc 	b	155a4 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   15630:	e5903404 	ldr	r3, [r0, #1028]	; 0x404
   15634:	e2933000 	adds	r3, r3, #0
   15638:	13a03001 	movne	r3, #1
   1563c:	eaffffe2 	b	155cc <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   15640:	e5902404 	ldr	r2, [r0, #1028]	; 0x404
   15644:	e3a03f4d 	mov	r3, #308	; 0x134
   15648:	e16f2f12 	clz	r2, r2
   1564c:	e1a022a2 	lsr	r2, r2, #5
   15650:	e5802404 	str	r2, [r0, #1028]	; 0x404
   15654:	eaffffed 	b	15610 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   15658:	e5902408 	ldr	r2, [r0, #1032]	; 0x408
   1565c:	e3003135 	movw	r3, #309	; 0x135
   15660:	e16f2f12 	clz	r2, r2
   15664:	e1a022a2 	lsr	r2, r2, #5
   15668:	e5802408 	str	r2, [r0, #1032]	; 0x408
   1566c:	eaffffe7 	b	15610 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   15670:	e3120022 	tst	r2, #34	; 0x22
   15674:	13a03001 	movne	r3, #1
   15678:	03a03000 	moveq	r3, #0
   1567c:	eaffffd2 	b	155cc <CKeyMap::Translate(unsigned char, unsigned char)+0x64>

00015680 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   15680:	e241c021 	sub	ip, r1, #33	; 0x21
   15684:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15688:	e6ffc07c 	uxth	ip, ip
   1568c:	e300e111 	movw	lr, #273	; 0x111
   15690:	e15c000e 	cmp	ip, lr
   15694:	8a000026 	bhi	15734 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb4>
   15698:	e241cc01 	sub	ip, r1, #256	; 0x100
   1569c:	e6ffe07c 	uxth	lr, ip
   156a0:	e35e0032 	cmp	lr, #50	; 0x32
   156a4:	9a00001e 	bls	15724 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   156a8:	e3120011 	tst	r2, #17
   156ac:	e6af2071 	sxtb	r2, r1
   156b0:	0a000009 	beq	156dc <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   156b4:	e6ef1071 	uxtb	r1, r1
   156b8:	e2412061 	sub	r2, r1, #97	; 0x61
   156bc:	e3520019 	cmp	r2, #25
   156c0:	8a00001b 	bhi	15734 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb4>
   156c4:	e2411060 	sub	r1, r1, #96	; 0x60
   156c8:	e3a02000 	mov	r2, #0
   156cc:	e5c31000 	strb	r1, [r3]
   156d0:	e1a00003 	mov	r0, r3
   156d4:	e5c32001 	strb	r2, [r3, #1]
   156d8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   156dc:	e5900400 	ldr	r0, [r0, #1024]	; 0x400
   156e0:	e3500000 	cmp	r0, #0
   156e4:	0a000009 	beq	15710 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   156e8:	e6ef1071 	uxtb	r1, r1
   156ec:	e2410041 	sub	r0, r1, #65	; 0x41
   156f0:	e3500019 	cmp	r0, #25
   156f4:	92811020 	addls	r1, r1, #32
   156f8:	96af2071 	sxtbls	r2, r1
   156fc:	9a000003 	bls	15710 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   15700:	e2410061 	sub	r0, r1, #97	; 0x61
   15704:	e3500019 	cmp	r0, #25
   15708:	92411020 	subls	r1, r1, #32
   1570c:	96af2071 	sxtbls	r2, r1
   15710:	e5c32000 	strb	r2, [r3]
   15714:	e1a00003 	mov	r0, r3
   15718:	e3a02000 	mov	r2, #0
   1571c:	e5c32001 	strb	r2, [r3, #1]
   15720:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   15724:	e3013a68 	movw	r3, #6760	; 0x1a68
   15728:	e3403003 	movt	r3, #3
   1572c:	e793010c 	ldr	r0, [r3, ip, lsl #2]
   15730:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   15734:	e3a00000 	mov	r0, #0
   15738:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001573c <CKeyMap::GetLEDStatus() const>:
   1573c:	e5903400 	ldr	r3, [r0, #1024]	; 0x400
   15740:	e5902404 	ldr	r2, [r0, #1028]	; 0x404
   15744:	e3530000 	cmp	r3, #0
   15748:	13a03002 	movne	r3, #2
   1574c:	03a03000 	moveq	r3, #0
   15750:	e3520000 	cmp	r2, #0
   15754:	e5902408 	ldr	r2, [r0, #1032]	; 0x408
   15758:	13833001 	orrne	r3, r3, #1
   1575c:	e3520000 	cmp	r2, #0
   15760:	13833004 	orrne	r3, r3, #4
   15764:	e1a00003 	mov	r0, r3
   15768:	e12fff1e 	bx	lr

0001576c <CKeyMap::LookupDefaultMap(char const*)>:
   1576c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15770:	e3014a68 	movw	r4, #6760	; 0x1a68
   15774:	e3404003 	movt	r4, #3
   15778:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   1577c:	e3530000 	cmp	r3, #0
   15780:	0a000017 	beq	157e4 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   15784:	e30d8ff4 	movw	r8, #57332	; 0xdff4
   15788:	e30e7000 	movw	r7, #57344	; 0xe000
   1578c:	e1a05000 	mov	r5, r0
   15790:	e28440cc 	add	r4, r4, #204	; 0xcc
   15794:	e3408002 	movt	r8, #2
   15798:	e3407002 	movt	r7, #2
   1579c:	e3a06000 	mov	r6, #0
   157a0:	ea000008 	b	157c8 <CKeyMap::LookupDefaultMap(char const*)+0x5c>
   157a4:	e1a01005 	mov	r1, r5
   157a8:	e4940004 	ldr	r0, [r4], #4
   157ac:	eb003597 	bl	22e10 <strcmp>
   157b0:	e3500000 	cmp	r0, #0
   157b4:	0a00000c 	beq	157ec <CKeyMap::LookupDefaultMap(char const*)+0x80>
   157b8:	e5943000 	ldr	r3, [r4]
   157bc:	e2866001 	add	r6, r6, #1
   157c0:	e3530000 	cmp	r3, #0
   157c4:	0a000006 	beq	157e4 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   157c8:	e3550000 	cmp	r5, #0
   157cc:	1afffff4 	bne	157a4 <CKeyMap::LookupDefaultMap(char const*)+0x38>
   157d0:	e300213f 	movw	r2, #319	; 0x13f
   157d4:	e1a01008 	mov	r1, r8
   157d8:	e1a00007 	mov	r0, r7
   157dc:	eb003cef 	bl	24ba0 <assertion_failed>
   157e0:	eaffffef 	b	157a4 <CKeyMap::LookupDefaultMap(char const*)+0x38>
   157e4:	e3a00000 	mov	r0, #0
   157e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   157ec:	e30c07f4 	movw	r0, #51188	; 0xc7f4
   157f0:	e3400002 	movt	r0, #2
   157f4:	e0800506 	add	r0, r0, r6, lsl #10
   157f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000157fc <CKeyMap::CKeyMap()>:
   157fc:	e92d4070 	push	{r4, r5, r6, lr}
   15800:	e3a03000 	mov	r3, #0
   15804:	e3a02001 	mov	r2, #1
   15808:	e5803400 	str	r3, [r0, #1024]	; 0x400
   1580c:	e5802404 	str	r2, [r0, #1028]	; 0x404
   15810:	e1a04000 	mov	r4, r0
   15814:	e5803408 	str	r3, [r0, #1032]	; 0x408
   15818:	eb0036bf 	bl	2331c <CKernelOptions::Get()>
   1581c:	eb0036b6 	bl	232fc <CKernelOptions::GetKeyMap() const>
   15820:	e2505000 	subs	r5, r0, #0
   15824:	0a000016 	beq	15884 <CKeyMap::CKeyMap()+0x88>
   15828:	e1a00005 	mov	r0, r5
   1582c:	ebffffce 	bl	1576c <CKeyMap::LookupDefaultMap(char const*)>
   15830:	e2501000 	subs	r1, r0, #0
   15834:	0a000004 	beq	1584c <CKeyMap::CKeyMap()+0x50>
   15838:	e3a02b01 	mov	r2, #1024	; 0x400
   1583c:	e1a00004 	mov	r0, r4
   15840:	eb003660 	bl	231c8 <memcpy>
   15844:	e1a00004 	mov	r0, r4
   15848:	e8bd8070 	pop	{r4, r5, r6, pc}
   1584c:	e30e0010 	movw	r0, #57360	; 0xe010
   15850:	e3400002 	movt	r0, #2
   15854:	ebffffc4 	bl	1576c <CKeyMap::LookupDefaultMap(char const*)>
   15858:	e2501000 	subs	r1, r0, #0
   1585c:	1afffff5 	bne	15838 <CKeyMap::CKeyMap()+0x3c>
   15860:	e30d1ff4 	movw	r1, #57332	; 0xdff4
   15864:	e30e0014 	movw	r0, #57364	; 0xe014
   15868:	e3401002 	movt	r1, #2
   1586c:	e3400002 	movt	r0, #2
   15870:	e3a02080 	mov	r2, #128	; 0x80
   15874:	eb003cc9 	bl	24ba0 <assertion_failed>
   15878:	e30c17f4 	movw	r1, #51188	; 0xc7f4
   1587c:	e3401002 	movt	r1, #2
   15880:	eaffffec 	b	15838 <CKeyMap::CKeyMap()+0x3c>
   15884:	e30d1ff4 	movw	r1, #57332	; 0xdff4
   15888:	e30e0000 	movw	r0, #57344	; 0xe000
   1588c:	e3401002 	movt	r1, #2
   15890:	e3400002 	movt	r0, #2
   15894:	e3a0207a 	mov	r2, #122	; 0x7a
   15898:	eb003cc0 	bl	24ba0 <assertion_failed>
   1589c:	eaffffe1 	b	15828 <CKeyMap::CKeyMap()+0x2c>

000158a0 <CMouseBehaviour::CMouseBehaviour()>:
   158a0:	e3a02000 	mov	r2, #0
   158a4:	e5802000 	str	r2, [r0]
   158a8:	e5802004 	str	r2, [r0, #4]
   158ac:	e5802008 	str	r2, [r0, #8]
   158b0:	e580200c 	str	r2, [r0, #12]
   158b4:	e5802010 	str	r2, [r0, #16]
   158b8:	e5802014 	str	r2, [r0, #20]
   158bc:	e5802018 	str	r2, [r0, #24]
   158c0:	e12fff1e 	bx	lr

000158c4 <CMouseBehaviour::~CMouseBehaviour()>:
   158c4:	e12fff1e 	bx	lr

000158c8 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   158c8:	e5903000 	ldr	r3, [r0]
   158cc:	e92d4070 	push	{r4, r5, r6, lr}
   158d0:	e3530000 	cmp	r3, #0
   158d4:	e24dd038 	sub	sp, sp, #56	; 0x38
   158d8:	e1a04000 	mov	r4, r0
   158dc:	e1a06001 	mov	r6, r1
   158e0:	e1a05002 	mov	r5, r2
   158e4:	1a00002a 	bne	15994 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xcc>
   158e8:	e3560000 	cmp	r6, #0
   158ec:	e5846000 	str	r6, [r4]
   158f0:	0a000030 	beq	159b8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf0>
   158f4:	e5943004 	ldr	r3, [r4, #4]
   158f8:	e3530000 	cmp	r3, #0
   158fc:	1a000036 	bne	159dc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x114>
   15900:	e3550000 	cmp	r5, #0
   15904:	e5845004 	str	r5, [r4, #4]
   15908:	0a00003c 	beq	15a00 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x138>
   1590c:	e5943000 	ldr	r3, [r4]
   15910:	e2855001 	add	r5, r5, #1
   15914:	e28d000c 	add	r0, sp, #12
   15918:	e2833001 	add	r3, r3, #1
   1591c:	e1a050a5 	lsr	r5, r5, #1
   15920:	e584500c 	str	r5, [r4, #12]
   15924:	e1a030a3 	lsr	r3, r3, #1
   15928:	e5843008 	str	r3, [r4, #8]
   1592c:	eb002d51 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   15930:	e59fc0e8 	ldr	ip, [pc, #232]	; 15a20 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x158>
   15934:	e3a03024 	mov	r3, #36	; 0x24
   15938:	e3081010 	movw	r1, #32784	; 0x8010
   1593c:	e28d000c 	add	r0, sp, #12
   15940:	e3a02018 	mov	r2, #24
   15944:	e58d2000 	str	r2, [sp]
   15948:	e28d2014 	add	r2, sp, #20
   1594c:	e3a0e010 	mov	lr, #16
   15950:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   15954:	e58de020 	str	lr, [sp, #32]
   15958:	e3a0c000 	mov	ip, #0
   1595c:	e58de024 	str	lr, [sp, #36]	; 0x24
   15960:	e58dc028 	str	ip, [sp, #40]	; 0x28
   15964:	e58dc030 	str	ip, [sp, #48]	; 0x30
   15968:	e58dc034 	str	ip, [sp, #52]	; 0x34
   1596c:	eb002d89 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15970:	e2504000 	subs	r4, r0, #0
   15974:	e28d000c 	add	r0, sp, #12
   15978:	159d4020 	ldrne	r4, [sp, #32]
   1597c:	116f4f14 	clzne	r4, r4
   15980:	11a042a4 	lsrne	r4, r4, #5
   15984:	eb002d41 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   15988:	e1a00004 	mov	r0, r4
   1598c:	e28dd038 	add	sp, sp, #56	; 0x38
   15990:	e8bd8070 	pop	{r4, r5, r6, pc}
   15994:	e30e14e8 	movw	r1, #58600	; 0xe4e8
   15998:	e30e04fc 	movw	r0, #58620	; 0xe4fc
   1599c:	e3401002 	movt	r1, #2
   159a0:	e3400002 	movt	r0, #2
   159a4:	e3a0204b 	mov	r2, #75	; 0x4b
   159a8:	eb003c7c 	bl	24ba0 <assertion_failed>
   159ac:	e3560000 	cmp	r6, #0
   159b0:	e5846000 	str	r6, [r4]
   159b4:	1affffce 	bne	158f4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x2c>
   159b8:	e30e14e8 	movw	r1, #58600	; 0xe4e8
   159bc:	e30e0510 	movw	r0, #58640	; 0xe510
   159c0:	e3401002 	movt	r1, #2
   159c4:	e3400002 	movt	r0, #2
   159c8:	e3a0204d 	mov	r2, #77	; 0x4d
   159cc:	eb003c73 	bl	24ba0 <assertion_failed>
   159d0:	e5943004 	ldr	r3, [r4, #4]
   159d4:	e3530000 	cmp	r3, #0
   159d8:	0affffc8 	beq	15900 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x38>
   159dc:	e30e14e8 	movw	r1, #58600	; 0xe4e8
   159e0:	e30e0524 	movw	r0, #58660	; 0xe524
   159e4:	e3401002 	movt	r1, #2
   159e8:	e3400002 	movt	r0, #2
   159ec:	e3a0204f 	mov	r2, #79	; 0x4f
   159f0:	eb003c6a 	bl	24ba0 <assertion_failed>
   159f4:	e3550000 	cmp	r5, #0
   159f8:	e5845004 	str	r5, [r4, #4]
   159fc:	1affffc2 	bne	1590c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>
   15a00:	e30e14e8 	movw	r1, #58600	; 0xe4e8
   15a04:	e30e053c 	movw	r0, #58684	; 0xe53c
   15a08:	e3401002 	movt	r1, #2
   15a0c:	e3400002 	movt	r0, #2
   15a10:	e3a02051 	mov	r2, #81	; 0x51
   15a14:	eb003c61 	bl	24ba0 <assertion_failed>
   15a18:	e5945004 	ldr	r5, [r4, #4]
   15a1c:	eaffffba 	b	1590c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>
   15a20:	c002e0e8 	.word	0xc002e0e8

00015a24 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   15a24:	e5903018 	ldr	r3, [r0, #24]
   15a28:	e92d4070 	push	{r4, r5, r6, lr}
   15a2c:	e3530000 	cmp	r3, #0
   15a30:	e1a04000 	mov	r4, r0
   15a34:	e1a05001 	mov	r5, r1
   15a38:	0a000005 	beq	15a54 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x30>
   15a3c:	e30e14e8 	movw	r1, #58600	; 0xe4e8
   15a40:	e30e0550 	movw	r0, #58704	; 0xe550
   15a44:	e3401002 	movt	r1, #2
   15a48:	e3400002 	movt	r0, #2
   15a4c:	e3a0206d 	mov	r2, #109	; 0x6d
   15a50:	eb003c52 	bl	24ba0 <assertion_failed>
   15a54:	e3550000 	cmp	r5, #0
   15a58:	e5845018 	str	r5, [r4, #24]
   15a5c:	18bd8070 	popne	{r4, r5, r6, pc}
   15a60:	e30e14e8 	movw	r1, #58600	; 0xe4e8
   15a64:	e30c0194 	movw	r0, #49556	; 0xc194
   15a68:	e3401002 	movt	r1, #2
   15a6c:	e3400002 	movt	r0, #2
   15a70:	e3a0206f 	mov	r2, #111	; 0x6f
   15a74:	e8bd4070 	pop	{r4, r5, r6, lr}
   15a78:	ea003c48 	b	24ba0 <assertion_failed>

00015a7c <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, int)>:
   15a7c:	e92d4070 	push	{r4, r5, r6, lr}
   15a80:	e24dd030 	sub	sp, sp, #48	; 0x30
   15a84:	e1a06000 	mov	r6, r0
   15a88:	e28d000c 	add	r0, sp, #12
   15a8c:	e1a05001 	mov	r5, r1
   15a90:	e1a04002 	mov	r4, r2
   15a94:	eb002cf7 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   15a98:	e2944000 	adds	r4, r4, #0
   15a9c:	e3a0301c 	mov	r3, #28
   15aa0:	e3081011 	movw	r1, #32785	; 0x8011
   15aa4:	e28d000c 	add	r0, sp, #12
   15aa8:	e3a02010 	mov	r2, #16
   15aac:	e58d2000 	str	r2, [sp]
   15ab0:	e28d2014 	add	r2, sp, #20
   15ab4:	e3a0c001 	mov	ip, #1
   15ab8:	13a04001 	movne	r4, #1
   15abc:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   15ac0:	e58d4020 	str	r4, [sp, #32]
   15ac4:	e58d6024 	str	r6, [sp, #36]	; 0x24
   15ac8:	e58d5028 	str	r5, [sp, #40]	; 0x28
   15acc:	eb002d31 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15ad0:	e2504000 	subs	r4, r0, #0
   15ad4:	e28d000c 	add	r0, sp, #12
   15ad8:	159d4020 	ldrne	r4, [sp, #32]
   15adc:	116f4f14 	clzne	r4, r4
   15ae0:	11a042a4 	lsrne	r4, r4, #5
   15ae4:	eb002ce9 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   15ae8:	e1a00004 	mov	r0, r4
   15aec:	e28dd030 	add	sp, sp, #48	; 0x30
   15af0:	e8bd8070 	pop	{r4, r5, r6, pc}

00015af4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   15af4:	e5903000 	ldr	r3, [r0]
   15af8:	e92d4070 	push	{r4, r5, r6, lr}
   15afc:	e3530000 	cmp	r3, #0
   15b00:	e1a04000 	mov	r4, r0
   15b04:	e1a05001 	mov	r5, r1
   15b08:	e1a06002 	mov	r6, r2
   15b0c:	0a000018 	beq	15b74 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x80>
   15b10:	e5943004 	ldr	r3, [r4, #4]
   15b14:	e3530000 	cmp	r3, #0
   15b18:	0a00000e 	beq	15b58 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   15b1c:	e5943000 	ldr	r3, [r4]
   15b20:	e1530005 	cmp	r3, r5
   15b24:	9a000009 	bls	15b50 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   15b28:	e5943004 	ldr	r3, [r4, #4]
   15b2c:	e1530006 	cmp	r3, r6
   15b30:	9a000006 	bls	15b50 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   15b34:	e5943010 	ldr	r3, [r4, #16]
   15b38:	e5845008 	str	r5, [r4, #8]
   15b3c:	e3530000 	cmp	r3, #0
   15b40:	e584600c 	str	r6, [r4, #12]
   15b44:	1a000011 	bne	15b90 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x9c>
   15b48:	e3a00001 	mov	r0, #1
   15b4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15b50:	e3a00000 	mov	r0, #0
   15b54:	e8bd8070 	pop	{r4, r5, r6, pc}
   15b58:	e30e14e8 	movw	r1, #58600	; 0xe4e8
   15b5c:	e30e053c 	movw	r0, #58684	; 0xe53c
   15b60:	e3401002 	movt	r1, #2
   15b64:	e3400002 	movt	r0, #2
   15b68:	e3a02075 	mov	r2, #117	; 0x75
   15b6c:	eb003c0b 	bl	24ba0 <assertion_failed>
   15b70:	eaffffe9 	b	15b1c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x28>
   15b74:	e30e14e8 	movw	r1, #58600	; 0xe4e8
   15b78:	e30e0510 	movw	r0, #58640	; 0xe510
   15b7c:	e3401002 	movt	r1, #2
   15b80:	e3400002 	movt	r0, #2
   15b84:	e3a02074 	mov	r2, #116	; 0x74
   15b88:	eb003c04 	bl	24ba0 <assertion_failed>
   15b8c:	eaffffdf 	b	15b10 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x1c>
   15b90:	e1a01006 	mov	r1, r6
   15b94:	e1a00005 	mov	r0, r5
   15b98:	e3a02001 	mov	r2, #1
   15b9c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15ba0:	eaffffb5 	b	15a7c <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, int)>

00015ba4 <CMouseBehaviour::ShowCursor(int)>:
   15ba4:	e5902008 	ldr	r2, [r0, #8]
   15ba8:	e5903000 	ldr	r3, [r0]
   15bac:	e92d4070 	push	{r4, r5, r6, lr}
   15bb0:	e1520003 	cmp	r2, r3
   15bb4:	e5905010 	ldr	r5, [r0, #16]
   15bb8:	e1a04000 	mov	r4, r0
   15bbc:	e5801010 	str	r1, [r0, #16]
   15bc0:	2a00000f 	bcs	15c04 <CMouseBehaviour::ShowCursor(int)+0x60>
   15bc4:	e594100c 	ldr	r1, [r4, #12]
   15bc8:	e5943004 	ldr	r3, [r4, #4]
   15bcc:	e1510003 	cmp	r1, r3
   15bd0:	3a000006 	bcc	15bf0 <CMouseBehaviour::ShowCursor(int)+0x4c>
   15bd4:	e30e14e8 	movw	r1, #58600	; 0xe4e8
   15bd8:	e30e0584 	movw	r0, #58756	; 0xe584
   15bdc:	e3401002 	movt	r1, #2
   15be0:	e3400002 	movt	r0, #2
   15be4:	e3a0208d 	mov	r2, #141	; 0x8d
   15be8:	eb003bec 	bl	24ba0 <assertion_failed>
   15bec:	e594100c 	ldr	r1, [r4, #12]
   15bf0:	e5942010 	ldr	r2, [r4, #16]
   15bf4:	e5940008 	ldr	r0, [r4, #8]
   15bf8:	ebffff9f 	bl	15a7c <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, int)>
   15bfc:	e1a00005 	mov	r0, r5
   15c00:	e8bd8070 	pop	{r4, r5, r6, pc}
   15c04:	e30e14e8 	movw	r1, #58600	; 0xe4e8
   15c08:	e30e0568 	movw	r0, #58728	; 0xe568
   15c0c:	e3401002 	movt	r1, #2
   15c10:	e3400002 	movt	r0, #2
   15c14:	e3a0208c 	mov	r2, #140	; 0x8c
   15c18:	eb003be0 	bl	24ba0 <assertion_failed>
   15c1c:	eaffffe8 	b	15bc4 <CMouseBehaviour::ShowCursor(int)+0x20>

00015c20 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   15c20:	e590c000 	ldr	ip, [r0]
   15c24:	e35c0000 	cmp	ip, #0
   15c28:	012fff1e 	bxeq	lr
   15c2c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c30:	e590e004 	ldr	lr, [r0, #4]
   15c34:	e35e0000 	cmp	lr, #0
   15c38:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c3c:	e3a08012 	mov	r8, #18
   15c40:	e3069667 	movw	r9, #26215	; 0x6667
   15c44:	e0020298 	mul	r2, r8, r2
   15c48:	e3469666 	movt	r9, #26214	; 0x6666
   15c4c:	e0080398 	mul	r8, r8, r3
   15c50:	e5907008 	ldr	r7, [r0, #8]
   15c54:	e590600c 	ldr	r6, [r0, #12]
   15c58:	e1a05001 	mov	r5, r1
   15c5c:	e1a04000 	mov	r4, r0
   15c60:	e0c10992 	smull	r0, r1, r2, r9
   15c64:	e1a00fc2 	asr	r0, r2, #31
   15c68:	e0c32998 	smull	r2, r3, r8, r9
   15c6c:	e1a08fc8 	asr	r8, r8, #31
   15c70:	e0600141 	rsb	r0, r0, r1, asr #2
   15c74:	e0800007 	add	r0, r0, r7
   15c78:	e15c0000 	cmp	ip, r0
   15c7c:	e0683143 	rsb	r3, r8, r3, asr #2
   15c80:	e0863003 	add	r3, r6, r3
   15c84:	9a00002d 	bls	15d40 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x120>
   15c88:	e15e0003 	cmp	lr, r3
   15c8c:	e5840008 	str	r0, [r4, #8]
   15c90:	e584300c 	str	r3, [r4, #12]
   15c94:	8a00003c 	bhi	15d8c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x16c>
   15c98:	e1570000 	cmp	r7, r0
   15c9c:	e584600c 	str	r6, [r4, #12]
   15ca0:	0a00000a 	beq	15cd0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xb0>
   15ca4:	e5943010 	ldr	r3, [r4, #16]
   15ca8:	e3530000 	cmp	r3, #0
   15cac:	1a00002c 	bne	15d64 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x144>
   15cb0:	e5946018 	ldr	r6, [r4, #24]
   15cb4:	e3560000 	cmp	r6, #0
   15cb8:	0a000027 	beq	15d5c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   15cbc:	e594300c 	ldr	r3, [r4, #12]
   15cc0:	e1a01005 	mov	r1, r5
   15cc4:	e5942008 	ldr	r2, [r4, #8]
   15cc8:	e3a00000 	mov	r0, #0
   15ccc:	e12fff36 	blx	r6
   15cd0:	e5943014 	ldr	r3, [r4, #20]
   15cd4:	e1550003 	cmp	r5, r3
   15cd8:	0a00001f 	beq	15d5c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   15cdc:	e5942018 	ldr	r2, [r4, #24]
   15ce0:	e3520000 	cmp	r2, #0
   15ce4:	0a00001c 	beq	15d5c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   15ce8:	e3a07001 	mov	r7, #1
   15cec:	e3a06000 	mov	r6, #0
   15cf0:	e1a01617 	lsl	r1, r7, r6
   15cf4:	e1110003 	tst	r1, r3
   15cf8:	0a000008 	beq	15d20 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x100>
   15cfc:	e1150001 	tst	r5, r1
   15d00:	0a00001b 	beq	15d74 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x154>
   15d04:	e2866001 	add	r6, r6, #1
   15d08:	e3560003 	cmp	r6, #3
   15d0c:	0a000012 	beq	15d5c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   15d10:	e5943014 	ldr	r3, [r4, #20]
   15d14:	e1a01617 	lsl	r1, r7, r6
   15d18:	e1110003 	tst	r1, r3
   15d1c:	1afffff6 	bne	15cfc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xdc>
   15d20:	e1150001 	tst	r5, r1
   15d24:	0afffff6 	beq	15d04 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe4>
   15d28:	e5948018 	ldr	r8, [r4, #24]
   15d2c:	e3a00001 	mov	r0, #1
   15d30:	e594300c 	ldr	r3, [r4, #12]
   15d34:	e5942008 	ldr	r2, [r4, #8]
   15d38:	e12fff38 	blx	r8
   15d3c:	eafffff0 	b	15d04 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe4>
   15d40:	e15e0003 	cmp	lr, r3
   15d44:	e584300c 	str	r3, [r4, #12]
   15d48:	9a000012 	bls	15d98 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x178>
   15d4c:	e1560003 	cmp	r6, r3
   15d50:	11a00007 	movne	r0, r7
   15d54:	1affffd2 	bne	15ca4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   15d58:	eaffffdc 	b	15cd0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xb0>
   15d5c:	e5845014 	str	r5, [r4, #20]
   15d60:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d64:	e3a02001 	mov	r2, #1
   15d68:	e594100c 	ldr	r1, [r4, #12]
   15d6c:	ebffff42 	bl	15a7c <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, int)>
   15d70:	eaffffce 	b	15cb0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x90>
   15d74:	e5948018 	ldr	r8, [r4, #24]
   15d78:	e3a00002 	mov	r0, #2
   15d7c:	e594300c 	ldr	r3, [r4, #12]
   15d80:	e5942008 	ldr	r2, [r4, #8]
   15d84:	e12fff38 	blx	r8
   15d88:	eaffffdd 	b	15d04 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe4>
   15d8c:	e1570000 	cmp	r7, r0
   15d90:	1affffc3 	bne	15ca4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   15d94:	eaffffec 	b	15d4c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x12c>
   15d98:	e584600c 	str	r6, [r4, #12]
   15d9c:	eaffffcb 	b	15cd0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xb0>

00015da0 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*)>:
   15da0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15da4:	e280702c 	add	r7, r0, #44	; 0x2c
   15da8:	e1a04000 	mov	r4, r0
   15dac:	e2806050 	add	r6, r0, #80	; 0x50
   15db0:	e1a09003 	mov	r9, r3
   15db4:	e1a08001 	mov	r8, r1
   15db8:	e1a0a002 	mov	sl, r2
   15dbc:	e2845078 	add	r5, r4, #120	; 0x78
   15dc0:	eb001ec5 	bl	1d8dc <CNetConfig::CNetConfig()>
   15dc4:	e1a01004 	mov	r1, r4
   15dc8:	e1a00007 	mov	r0, r7
   15dcc:	eb000b19 	bl	18a38 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*)>
   15dd0:	e1a02007 	mov	r2, r7
   15dd4:	e1a01004 	mov	r1, r4
   15dd8:	e1a00006 	mov	r0, r6
   15ddc:	eb0009a7 	bl	18480 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   15de0:	e1a02006 	mov	r2, r6
   15de4:	e1a01004 	mov	r1, r4
   15de8:	e1a00005 	mov	r0, r5
   15dec:	eb00072b 	bl	17aa0 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   15df0:	e1a02005 	mov	r2, r5
   15df4:	e1a01004 	mov	r1, r4
   15df8:	e28400bc 	add	r0, r4, #188	; 0xbc
   15dfc:	eb000328 	bl	16aa4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   15e00:	e16f1f18 	clz	r1, r8
   15e04:	e3a03000 	mov	r3, #0
   15e08:	e1a00004 	mov	r0, r4
   15e0c:	e1a012a1 	lsr	r1, r1, #5
   15e10:	e5843114 	str	r3, [r4, #276]	; 0x114
   15e14:	e5841110 	str	r1, [r4, #272]	; 0x110
   15e18:	eb001e76 	bl	1d7f8 <CNetConfig::SetDHCP(int)>
   15e1c:	e5943110 	ldr	r3, [r4, #272]	; 0x110
   15e20:	e3530000 	cmp	r3, #0
   15e24:	0a000001 	beq	15e30 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*)+0x90>
   15e28:	e1a00004 	mov	r0, r4
   15e2c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e30:	e1a01008 	mov	r1, r8
   15e34:	e1a00004 	mov	r0, r4
   15e38:	eb001ec6 	bl	1d958 <CNetConfig::SetIPAddress(unsigned char const*)>
   15e3c:	e1a0100a 	mov	r1, sl
   15e40:	e1a00004 	mov	r0, r4
   15e44:	eb001eca 	bl	1d974 <CNetConfig::SetNetMask(unsigned char const*)>
   15e48:	e3590000 	cmp	r9, #0
   15e4c:	0a000002 	beq	15e5c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*)+0xbc>
   15e50:	e1a01009 	mov	r1, r9
   15e54:	e1a00004 	mov	r0, r4
   15e58:	eb001e6c 	bl	1d810 <CNetConfig::SetDefaultGateway(unsigned char const*)>
   15e5c:	e59d3020 	ldr	r3, [sp, #32]
   15e60:	e3530000 	cmp	r3, #0
   15e64:	0affffef 	beq	15e28 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*)+0x88>
   15e68:	e1a00004 	mov	r0, r4
   15e6c:	e1a01003 	mov	r1, r3
   15e70:	eb001e68 	bl	1d818 <CNetConfig::SetDNSServer(unsigned char const*)>
   15e74:	e1a00004 	mov	r0, r4
   15e78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00015e7c <CNetSubSystem::~CNetSubSystem()>:
   15e7c:	e92d4010 	push	{r4, lr}
   15e80:	e1a04000 	mov	r4, r0
   15e84:	e5900114 	ldr	r0, [r0, #276]	; 0x114
   15e88:	e3500000 	cmp	r0, #0
   15e8c:	0a000002 	beq	15e9c <CNetSubSystem::~CNetSubSystem()+0x20>
   15e90:	e5903000 	ldr	r3, [r0]
   15e94:	e5933004 	ldr	r3, [r3, #4]
   15e98:	e12fff33 	blx	r3
   15e9c:	e3a03000 	mov	r3, #0
   15ea0:	e28400bc 	add	r0, r4, #188	; 0xbc
   15ea4:	e5843114 	str	r3, [r4, #276]	; 0x114
   15ea8:	eb00060a 	bl	176d8 <CTransportLayer::~CTransportLayer()>
   15eac:	e2840078 	add	r0, r4, #120	; 0x78
   15eb0:	eb00071f 	bl	17b34 <CNetworkLayer::~CNetworkLayer()>
   15eb4:	e2840050 	add	r0, r4, #80	; 0x50
   15eb8:	eb000991 	bl	18504 <CLinkLayer::~CLinkLayer()>
   15ebc:	e284002c 	add	r0, r4, #44	; 0x2c
   15ec0:	eb000ae8 	bl	18a68 <CNetDeviceLayer::~CNetDeviceLayer()>
   15ec4:	e1a00004 	mov	r0, r4
   15ec8:	eb001e3c 	bl	1d7c0 <CNetConfig::~CNetConfig()>
   15ecc:	e1a00004 	mov	r0, r4
   15ed0:	e8bd8010 	pop	{r4, pc}

00015ed4 <CNetSubSystem::Initialize()>:
   15ed4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15ed8:	e1a04000 	mov	r4, r0
   15edc:	eb001e4f 	bl	1d820 <CNetConfig::GetIPAddress() const>
   15ee0:	eb001fa7 	bl	1dd84 <CIPAddress::IsNull() const>
   15ee4:	e1a01000 	mov	r1, r0
   15ee8:	e5840110 	str	r0, [r4, #272]	; 0x110
   15eec:	e1a00004 	mov	r0, r4
   15ef0:	eb001e40 	bl	1d7f8 <CNetConfig::SetDHCP(int)>
   15ef4:	eb00338d 	bl	22d30 <CTimer::Get()>
   15ef8:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   15efc:	eb00333e 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
   15f00:	e284002c 	add	r0, r4, #44	; 0x2c
   15f04:	eb000ae7 	bl	18aa8 <CNetDeviceLayer::Initialize()>
   15f08:	e3500000 	cmp	r0, #0
   15f0c:	1a000001 	bne	15f18 <CNetSubSystem::Initialize()+0x44>
   15f10:	e3a00000 	mov	r0, #0
   15f14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15f18:	e2840050 	add	r0, r4, #80	; 0x50
   15f1c:	eb000990 	bl	18564 <CLinkLayer::Initialize()>
   15f20:	e3500000 	cmp	r0, #0
   15f24:	0afffff9 	beq	15f10 <CNetSubSystem::Initialize()+0x3c>
   15f28:	e2840078 	add	r0, r4, #120	; 0x78
   15f2c:	eb00071d 	bl	17ba8 <CNetworkLayer::Initialize()>
   15f30:	e3500000 	cmp	r0, #0
   15f34:	0afffff5 	beq	15f10 <CNetSubSystem::Initialize()+0x3c>
   15f38:	e28400bc 	add	r0, r4, #188	; 0xbc
   15f3c:	eb000303 	bl	16b50 <CTransportLayer::Initialize()>
   15f40:	e3500000 	cmp	r0, #0
   15f44:	0afffff1 	beq	15f10 <CNetSubSystem::Initialize()+0x3c>
   15f48:	e3a00054 	mov	r0, #84	; 0x54
   15f4c:	eb003011 	bl	21f98 <operator new(unsigned int)>
   15f50:	e1a01004 	mov	r1, r4
   15f54:	eb00007d 	bl	16150 <CNetTask::CNetTask(CNetSubSystem*)>
   15f58:	e5943110 	ldr	r3, [r4, #272]	; 0x110
   15f5c:	e3530000 	cmp	r3, #0
   15f60:	0a000022 	beq	15ff0 <CNetSubSystem::Initialize()+0x11c>
   15f64:	e5943114 	ldr	r3, [r4, #276]	; 0x114
   15f68:	e3530000 	cmp	r3, #0
   15f6c:	0a000005 	beq	15f88 <CNetSubSystem::Initialize()+0xb4>
   15f70:	e30e15a0 	movw	r1, #58784	; 0xe5a0
   15f74:	e30e05b4 	movw	r0, #58804	; 0xe5b4
   15f78:	e3401002 	movt	r1, #2
   15f7c:	e3400002 	movt	r0, #2
   15f80:	e3a0205c 	mov	r2, #92	; 0x5c
   15f84:	eb003b05 	bl	24ba0 <assertion_failed>
   15f88:	e3a000bc 	mov	r0, #188	; 0xbc
   15f8c:	eb003001 	bl	21f98 <operator new(unsigned int)>
   15f90:	e1a01004 	mov	r1, r4
   15f94:	e1a05000 	mov	r5, r0
   15f98:	eb0022d9 	bl	1eb04 <CDHCPClient::CDHCPClient(CNetSubSystem*)>
   15f9c:	e5943110 	ldr	r3, [r4, #272]	; 0x110
   15fa0:	e5845114 	str	r5, [r4, #276]	; 0x114
   15fa4:	e3530000 	cmp	r3, #0
   15fa8:	0a000010 	beq	15ff0 <CNetSubSystem::Initialize()+0x11c>
   15fac:	e30e75a0 	movw	r7, #58784	; 0xe5a0
   15fb0:	e30e65c8 	movw	r6, #58824	; 0xe5c8
   15fb4:	e3407002 	movt	r7, #2
   15fb8:	e3406002 	movt	r6, #2
   15fbc:	e1a00005 	mov	r0, r5
   15fc0:	ea000005 	b	15fdc <CNetSubSystem::Initialize()+0x108>
   15fc4:	eb002ad7 	bl	20b28 <CScheduler::Get()>
   15fc8:	eb002a28 	bl	20870 <CScheduler::Yield()>
   15fcc:	e5943110 	ldr	r3, [r4, #272]	; 0x110
   15fd0:	e3530000 	cmp	r3, #0
   15fd4:	0a000005 	beq	15ff0 <CNetSubSystem::Initialize()+0x11c>
   15fd8:	e5940114 	ldr	r0, [r4, #276]	; 0x114
   15fdc:	e3500000 	cmp	r0, #0
   15fe0:	0a000004 	beq	15ff8 <CNetSubSystem::Initialize()+0x124>
   15fe4:	eb0022ef 	bl	1eba8 <CDHCPClient::IsBound() const>
   15fe8:	e3500000 	cmp	r0, #0
   15fec:	0afffff4 	beq	15fc4 <CNetSubSystem::Initialize()+0xf0>
   15ff0:	e3a00001 	mov	r0, #1
   15ff4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15ff8:	e1a00006 	mov	r0, r6
   15ffc:	e3a0208a 	mov	r2, #138	; 0x8a
   16000:	e1a01007 	mov	r1, r7
   16004:	eb003ae5 	bl	24ba0 <assertion_failed>
   16008:	e5940114 	ldr	r0, [r4, #276]	; 0x114
   1600c:	eafffff4 	b	15fe4 <CNetSubSystem::Initialize()+0x110>

00016010 <CNetSubSystem::Process()>:
   16010:	e92d4010 	push	{r4, lr}
   16014:	e1a04000 	mov	r4, r0
   16018:	e280002c 	add	r0, r0, #44	; 0x2c
   1601c:	eb000acc 	bl	18b54 <CNetDeviceLayer::Process()>
   16020:	e2840050 	add	r0, r4, #80	; 0x50
   16024:	eb00096f 	bl	185e8 <CLinkLayer::Process()>
   16028:	e2840078 	add	r0, r4, #120	; 0x78
   1602c:	eb000708 	bl	17c54 <CNetworkLayer::Process()>
   16030:	e28400bc 	add	r0, r4, #188	; 0xbc
   16034:	e8bd4010 	pop	{r4, lr}
   16038:	ea0005cc 	b	17770 <CTransportLayer::Process()>

0001603c <CNetSubSystem::GetConfig()>:
   1603c:	e12fff1e 	bx	lr

00016040 <CNetSubSystem::GetNetDeviceLayer()>:
   16040:	e280002c 	add	r0, r0, #44	; 0x2c
   16044:	e12fff1e 	bx	lr

00016048 <CNetSubSystem::GetTransportLayer()>:
   16048:	e28000bc 	add	r0, r0, #188	; 0xbc
   1604c:	e12fff1e 	bx	lr

00016050 <CNetSubSystem::IsRunning() const>:
   16050:	e5903110 	ldr	r3, [r0, #272]	; 0x110
   16054:	e3530000 	cmp	r3, #0
   16058:	0a000004 	beq	16070 <CNetSubSystem::IsRunning() const+0x20>
   1605c:	e5903114 	ldr	r3, [r0, #276]	; 0x114
   16060:	e3530000 	cmp	r3, #0
   16064:	0a000003 	beq	16078 <CNetSubSystem::IsRunning() const+0x28>
   16068:	e1a00003 	mov	r0, r3
   1606c:	ea0022cd 	b	1eba8 <CDHCPClient::IsBound() const>
   16070:	e3a00001 	mov	r0, #1
   16074:	e12fff1e 	bx	lr
   16078:	e92d4010 	push	{r4, lr}
   1607c:	e30e15a0 	movw	r1, #58784	; 0xe5a0
   16080:	e1a04000 	mov	r4, r0
   16084:	e3401002 	movt	r1, #2
   16088:	e30e05c8 	movw	r0, #58824	; 0xe5c8
   1608c:	e3a0208a 	mov	r2, #138	; 0x8a
   16090:	e3400002 	movt	r0, #2
   16094:	eb003ac1 	bl	24ba0 <assertion_failed>
   16098:	e5943114 	ldr	r3, [r4, #276]	; 0x114
   1609c:	e8bd4010 	pop	{r4, lr}
   160a0:	e1a00003 	mov	r0, r3
   160a4:	ea0022bf 	b	1eba8 <CDHCPClient::IsBound() const>

000160a8 <CNetTask::~CNetTask()>:
   160a8:	e59f301c 	ldr	r3, [pc, #28]	; 160cc <CNetTask::~CNetTask()+0x24>
   160ac:	e3a02000 	mov	r2, #0
   160b0:	e92d4010 	push	{r4, lr}
   160b4:	e1a04000 	mov	r4, r0
   160b8:	e5802050 	str	r2, [r0, #80]	; 0x50
   160bc:	e5803000 	str	r3, [r0]
   160c0:	eb00288b 	bl	202f4 <CTask::~CTask()>
   160c4:	e1a00004 	mov	r0, r4
   160c8:	e8bd8010 	pop	{r4, pc}
   160cc:	0002e5e4 	.word	0x0002e5e4

000160d0 <CNetTask::~CNetTask()>:
   160d0:	e59f3028 	ldr	r3, [pc, #40]	; 16100 <CNetTask::~CNetTask()+0x30>
   160d4:	e3a02000 	mov	r2, #0
   160d8:	e92d4010 	push	{r4, lr}
   160dc:	e1a04000 	mov	r4, r0
   160e0:	e5802050 	str	r2, [r0, #80]	; 0x50
   160e4:	e5803000 	str	r3, [r0]
   160e8:	eb002881 	bl	202f4 <CTask::~CTask()>
   160ec:	e1a00004 	mov	r0, r4
   160f0:	e3a01054 	mov	r1, #84	; 0x54
   160f4:	eb002fab 	bl	21fa8 <operator delete(void*, unsigned int)>
   160f8:	e1a00004 	mov	r0, r4
   160fc:	e8bd8010 	pop	{r4, pc}
   16100:	0002e5e4 	.word	0x0002e5e4

00016104 <CNetTask::Run()>:
   16104:	e92d4010 	push	{r4, lr}
   16108:	e30e65f0 	movw	r6, #58864	; 0xe5f0
   1610c:	e30a5638 	movw	r5, #42552	; 0xa638
   16110:	e3406002 	movt	r6, #2
   16114:	e3405002 	movt	r5, #2
   16118:	e1a04000 	mov	r4, r0
   1611c:	ea000002 	b	1612c <CNetTask::Run()+0x28>
   16120:	ebffffba 	bl	16010 <CNetSubSystem::Process()>
   16124:	eb002a7f 	bl	20b28 <CScheduler::Get()>
   16128:	eb0029d0 	bl	20870 <CScheduler::Yield()>
   1612c:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   16130:	e3500000 	cmp	r0, #0
   16134:	1afffff9 	bne	16120 <CNetTask::Run()+0x1c>
   16138:	e1a00005 	mov	r0, r5
   1613c:	e3a02026 	mov	r2, #38	; 0x26
   16140:	e1a01006 	mov	r1, r6
   16144:	eb003a95 	bl	24ba0 <assertion_failed>
   16148:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   1614c:	eafffff3 	b	16120 <CNetTask::Run()+0x1c>

00016150 <CNetTask::CNetTask(CNetSubSystem*)>:
   16150:	e92d4070 	push	{r4, r5, r6, lr}
   16154:	e1a05001 	mov	r5, r1
   16158:	e3a01901 	mov	r1, #16384	; 0x4000
   1615c:	e1a04000 	mov	r4, r0
   16160:	eb0028b3 	bl	20434 <CTask::CTask(unsigned int)>
   16164:	e59f300c 	ldr	r3, [pc, #12]	; 16178 <CNetTask::CNetTask(CNetSubSystem*)+0x28>
   16168:	e1a00004 	mov	r0, r4
   1616c:	e5845050 	str	r5, [r4, #80]	; 0x50
   16170:	e5843000 	str	r3, [r4]
   16174:	e8bd8070 	pop	{r4, r5, r6, pc}
   16178:	0002e5e4 	.word	0x0002e5e4

0001617c <CSocket::CSocket(CNetSubSystem*, int)>:
   1617c:	e92d4070 	push	{r4, r5, r6, lr}
   16180:	e1a04000 	mov	r4, r0
   16184:	e1a00001 	mov	r0, r1
   16188:	e1a05001 	mov	r5, r1
   1618c:	e1a06002 	mov	r6, r2
   16190:	ebffffa9 	bl	1603c <CNetSubSystem::GetConfig()>
   16194:	e5840000 	str	r0, [r4]
   16198:	e1a00005 	mov	r0, r5
   1619c:	ebffffa9 	bl	16048 <CNetSubSystem::GetTransportLayer()>
   161a0:	e594c000 	ldr	ip, [r4]
   161a4:	e3a03000 	mov	r3, #0
   161a8:	e3e01000 	mvn	r1, #0
   161ac:	e15c0003 	cmp	ip, r3
   161b0:	e5846008 	str	r6, [r4, #8]
   161b4:	e5841010 	str	r1, [r4, #16]
   161b8:	e1c430bc 	strh	r3, [r4, #12]
   161bc:	e5843014 	str	r3, [r4, #20]
   161c0:	e5840004 	str	r0, [r4, #4]
   161c4:	0a000011 	beq	16210 <CSocket::CSocket(CNetSubSystem*, int)+0x94>
   161c8:	e3500000 	cmp	r0, #0
   161cc:	0a000004 	beq	161e4 <CSocket::CSocket(CNetSubSystem*, int)+0x68>
   161d0:	e3a00d19 	mov	r0, #1600	; 0x640
   161d4:	eb002f70 	bl	21f9c <operator new[](unsigned int)>
   161d8:	e5840014 	str	r0, [r4, #20]
   161dc:	e1a00004 	mov	r0, r4
   161e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   161e4:	e3a02026 	mov	r2, #38	; 0x26
   161e8:	e30e1604 	movw	r1, #58884	; 0xe604
   161ec:	e30e0624 	movw	r0, #58916	; 0xe624
   161f0:	e3401002 	movt	r1, #2
   161f4:	e3400002 	movt	r0, #2
   161f8:	eb003a68 	bl	24ba0 <assertion_failed>
   161fc:	e3a00d19 	mov	r0, #1600	; 0x640
   16200:	eb002f65 	bl	21f9c <operator new[](unsigned int)>
   16204:	e5840014 	str	r0, [r4, #20]
   16208:	e1a00004 	mov	r0, r4
   1620c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16210:	e30e1604 	movw	r1, #58884	; 0xe604
   16214:	e30e0610 	movw	r0, #58896	; 0xe610
   16218:	e3401002 	movt	r1, #2
   1621c:	e3400002 	movt	r0, #2
   16220:	e3a02025 	mov	r2, #37	; 0x25
   16224:	eb003a5d 	bl	24ba0 <assertion_failed>
   16228:	e5940004 	ldr	r0, [r4, #4]
   1622c:	eaffffe5 	b	161c8 <CSocket::CSocket(CNetSubSystem*, int)+0x4c>

00016230 <CSocket::CSocket(CSocket&)>:
   16230:	e5912000 	ldr	r2, [r1]
   16234:	e92d4010 	push	{r4, lr}
   16238:	e1a04000 	mov	r4, r0
   1623c:	e9914008 	ldmib	r1, {r3, lr}
   16240:	e3a00000 	mov	r0, #0
   16244:	e1d1c0bc 	ldrh	ip, [r1, #12]
   16248:	e1520000 	cmp	r2, r0
   1624c:	e5911010 	ldr	r1, [r1, #16]
   16250:	e884400c 	stm	r4, {r2, r3, lr}
   16254:	e1c4c0bc 	strh	ip, [r4, #12]
   16258:	e5841010 	str	r1, [r4, #16]
   1625c:	e5840014 	str	r0, [r4, #20]
   16260:	0a000011 	beq	162ac <CSocket::CSocket(CSocket&)+0x7c>
   16264:	e3530000 	cmp	r3, #0
   16268:	0a000004 	beq	16280 <CSocket::CSocket(CSocket&)+0x50>
   1626c:	e3a00d19 	mov	r0, #1600	; 0x640
   16270:	eb002f49 	bl	21f9c <operator new[](unsigned int)>
   16274:	e5840014 	str	r0, [r4, #20]
   16278:	e1a00004 	mov	r0, r4
   1627c:	e8bd8010 	pop	{r4, pc}
   16280:	e3a02035 	mov	r2, #53	; 0x35
   16284:	e30e1604 	movw	r1, #58884	; 0xe604
   16288:	e30e0624 	movw	r0, #58916	; 0xe624
   1628c:	e3401002 	movt	r1, #2
   16290:	e3400002 	movt	r0, #2
   16294:	eb003a41 	bl	24ba0 <assertion_failed>
   16298:	e3a00d19 	mov	r0, #1600	; 0x640
   1629c:	eb002f3e 	bl	21f9c <operator new[](unsigned int)>
   162a0:	e5840014 	str	r0, [r4, #20]
   162a4:	e1a00004 	mov	r0, r4
   162a8:	e8bd8010 	pop	{r4, pc}
   162ac:	e30e1604 	movw	r1, #58884	; 0xe604
   162b0:	e30e0610 	movw	r0, #58896	; 0xe610
   162b4:	e3401002 	movt	r1, #2
   162b8:	e3400002 	movt	r0, #2
   162bc:	e3a02034 	mov	r2, #52	; 0x34
   162c0:	eb003a36 	bl	24ba0 <assertion_failed>
   162c4:	e5943004 	ldr	r3, [r4, #4]
   162c8:	eaffffe5 	b	16264 <CSocket::CSocket(CSocket&)+0x34>

000162cc <CSocket::~CSocket()>:
   162cc:	e5901010 	ldr	r1, [r0, #16]
   162d0:	e92d4010 	push	{r4, lr}
   162d4:	e3510000 	cmp	r1, #0
   162d8:	e1a04000 	mov	r4, r0
   162dc:	ba000005 	blt	162f8 <CSocket::~CSocket()+0x2c>
   162e0:	e5900004 	ldr	r0, [r0, #4]
   162e4:	e3500000 	cmp	r0, #0
   162e8:	0a000007 	beq	1630c <CSocket::~CSocket()+0x40>
   162ec:	eb0003c3 	bl	17200 <CTransportLayer::Disconnect(int)>
   162f0:	e3e03000 	mvn	r3, #0
   162f4:	e5843010 	str	r3, [r4, #16]
   162f8:	e5940014 	ldr	r0, [r4, #20]
   162fc:	e3a01001 	mov	r1, #1
   16300:	eb002f28 	bl	21fa8 <operator delete(void*, unsigned int)>
   16304:	e1a00004 	mov	r0, r4
   16308:	e8bd8010 	pop	{r4, pc}
   1630c:	e30e1604 	movw	r1, #58884	; 0xe604
   16310:	e30e0624 	movw	r0, #58916	; 0xe624
   16314:	e3401002 	movt	r1, #2
   16318:	e3400002 	movt	r0, #2
   1631c:	e3a0203f 	mov	r2, #63	; 0x3f
   16320:	eb003a1e 	bl	24ba0 <assertion_failed>
   16324:	e5940004 	ldr	r0, [r4, #4]
   16328:	e5941010 	ldr	r1, [r4, #16]
   1632c:	eaffffee 	b	162ec <CSocket::~CSocket()+0x20>

00016330 <CSocket::Bind(unsigned short)>:
   16330:	e251c000 	subs	ip, r1, #0
   16334:	0a00000b 	beq	16368 <CSocket::Bind(unsigned short)+0x38>
   16338:	e1d030bc 	ldrh	r3, [r0, #12]
   1633c:	e3530000 	cmp	r3, #0
   16340:	1a000008 	bne	16368 <CSocket::Bind(unsigned short)+0x38>
   16344:	e5902010 	ldr	r2, [r0, #16]
   16348:	e3520000 	cmp	r2, #0
   1634c:	aa000005 	bge	16368 <CSocket::Bind(unsigned short)+0x38>
   16350:	e5902008 	ldr	r2, [r0, #8]
   16354:	e1c0c0bc 	strh	ip, [r0, #12]
   16358:	e3520011 	cmp	r2, #17
   1635c:	0a000003 	beq	16370 <CSocket::Bind(unsigned short)+0x40>
   16360:	e1a00003 	mov	r0, r3
   16364:	e12fff1e 	bx	lr
   16368:	e3e00000 	mvn	r0, #0
   1636c:	e12fff1e 	bx	lr
   16370:	e92d4010 	push	{r4, lr}
   16374:	e1a04000 	mov	r4, r0
   16378:	e5900004 	ldr	r0, [r0, #4]
   1637c:	eb000203 	bl	16b90 <CTransportLayer::Bind(unsigned short, int)>
   16380:	e1a03000 	mov	r3, r0
   16384:	e0000fc0 	and	r0, r0, r0, asr #31
   16388:	e5843010 	str	r3, [r4, #16]
   1638c:	e8bd8010 	pop	{r4, pc}

00016390 <CSocket::Connect(CIPAddress&, unsigned short)>:
   16390:	e92d4070 	push	{r4, r5, r6, lr}
   16394:	e2525000 	subs	r5, r2, #0
   16398:	e24dd008 	sub	sp, sp, #8
   1639c:	0a000024 	beq	16434 <CSocket::Connect(CIPAddress&, unsigned short)+0xa4>
   163a0:	e5903004 	ldr	r3, [r0, #4]
   163a4:	e1a06001 	mov	r6, r1
   163a8:	e1a04000 	mov	r4, r0
   163ac:	e3530000 	cmp	r3, #0
   163b0:	0a000027 	beq	16454 <CSocket::Connect(CIPAddress&, unsigned short)+0xc4>
   163b4:	e5941010 	ldr	r1, [r4, #16]
   163b8:	e3510000 	cmp	r1, #0
   163bc:	ba000006 	blt	163dc <CSocket::Connect(CIPAddress&, unsigned short)+0x4c>
   163c0:	e5943008 	ldr	r3, [r4, #8]
   163c4:	e3530011 	cmp	r3, #17
   163c8:	1a000019 	bne	16434 <CSocket::Connect(CIPAddress&, unsigned short)+0xa4>
   163cc:	e5940004 	ldr	r0, [r4, #4]
   163d0:	eb00038a 	bl	17200 <CTransportLayer::Disconnect(int)>
   163d4:	e3e03000 	mvn	r3, #0
   163d8:	e5843010 	str	r3, [r4, #16]
   163dc:	e5940000 	ldr	r0, [r4]
   163e0:	e3500000 	cmp	r0, #0
   163e4:	0a000021 	beq	16470 <CSocket::Connect(CIPAddress&, unsigned short)+0xe0>
   163e8:	eb001d0c 	bl	1d820 <CNetConfig::GetIPAddress() const>
   163ec:	eb001e64 	bl	1dd84 <CIPAddress::IsNull() const>
   163f0:	e3500000 	cmp	r0, #0
   163f4:	1a00000b 	bne	16428 <CSocket::Connect(CIPAddress&, unsigned short)+0x98>
   163f8:	e594c008 	ldr	ip, [r4, #8]
   163fc:	e1a02005 	mov	r2, r5
   16400:	e1d430bc 	ldrh	r3, [r4, #12]
   16404:	e1a01006 	mov	r1, r6
   16408:	e5940004 	ldr	r0, [r4, #4]
   1640c:	e58dc000 	str	ip, [sp]
   16410:	eb00023e 	bl	16d10 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   16414:	e1a03000 	mov	r3, r0
   16418:	e0000fc0 	and	r0, r0, r0, asr #31
   1641c:	e5843010 	str	r3, [r4, #16]
   16420:	e28dd008 	add	sp, sp, #8
   16424:	e8bd8070 	pop	{r4, r5, r6, pc}
   16428:	e5943008 	ldr	r3, [r4, #8]
   1642c:	e3530011 	cmp	r3, #17
   16430:	0a000002 	beq	16440 <CSocket::Connect(CIPAddress&, unsigned short)+0xb0>
   16434:	e3e00000 	mvn	r0, #0
   16438:	e28dd008 	add	sp, sp, #8
   1643c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16440:	e1a00006 	mov	r0, r6
   16444:	eb001e5d 	bl	1ddc0 <CIPAddress::IsBroadcast() const>
   16448:	e3500000 	cmp	r0, #0
   1644c:	0afffff8 	beq	16434 <CSocket::Connect(CIPAddress&, unsigned short)+0xa4>
   16450:	eaffffe8 	b	163f8 <CSocket::Connect(CIPAddress&, unsigned short)+0x68>
   16454:	e30e1604 	movw	r1, #58884	; 0xe604
   16458:	e30e0624 	movw	r0, #58916	; 0xe624
   1645c:	e3401002 	movt	r1, #2
   16460:	e3400002 	movt	r0, #2
   16464:	e3a02071 	mov	r2, #113	; 0x71
   16468:	eb0039cc 	bl	24ba0 <assertion_failed>
   1646c:	eaffffd0 	b	163b4 <CSocket::Connect(CIPAddress&, unsigned short)+0x24>
   16470:	e30e1604 	movw	r1, #58884	; 0xe604
   16474:	e30e0610 	movw	r0, #58896	; 0xe610
   16478:	e3401002 	movt	r1, #2
   1647c:	e3400002 	movt	r0, #2
   16480:	e3a0207e 	mov	r2, #126	; 0x7e
   16484:	eb0039c5 	bl	24ba0 <assertion_failed>
   16488:	e5940000 	ldr	r0, [r4]
   1648c:	eaffffd5 	b	163e8 <CSocket::Connect(CIPAddress&, unsigned short)+0x58>

00016490 <CSocket::Listen()>:
   16490:	e5902008 	ldr	r2, [r0, #8]
   16494:	e3520006 	cmp	r2, #6
   16498:	1a00000f 	bne	164dc <CSocket::Listen()+0x4c>
   1649c:	e1d010bc 	ldrh	r1, [r0, #12]
   164a0:	e3510000 	cmp	r1, #0
   164a4:	0a00000c 	beq	164dc <CSocket::Listen()+0x4c>
   164a8:	e5903010 	ldr	r3, [r0, #16]
   164ac:	e3530000 	cmp	r3, #0
   164b0:	aa000009 	bge	164dc <CSocket::Listen()+0x4c>
   164b4:	e92d4010 	push	{r4, lr}
   164b8:	e1a04000 	mov	r4, r0
   164bc:	e5900004 	ldr	r0, [r0, #4]
   164c0:	e3500000 	cmp	r0, #0
   164c4:	0a000006 	beq	164e4 <CSocket::Listen()+0x54>
   164c8:	eb0002b8 	bl	16fb0 <CTransportLayer::Listen(unsigned short, int)>
   164cc:	e1a03000 	mov	r3, r0
   164d0:	e0000fc0 	and	r0, r0, r0, asr #31
   164d4:	e5843010 	str	r3, [r4, #16]
   164d8:	e8bd8010 	pop	{r4, pc}
   164dc:	e3e00000 	mvn	r0, #0
   164e0:	e12fff1e 	bx	lr
   164e4:	e3a02098 	mov	r2, #152	; 0x98
   164e8:	e30e1604 	movw	r1, #58884	; 0xe604
   164ec:	e30e0624 	movw	r0, #58916	; 0xe624
   164f0:	e3401002 	movt	r1, #2
   164f4:	e3400002 	movt	r0, #2
   164f8:	eb0039a8 	bl	24ba0 <assertion_failed>
   164fc:	e5940004 	ldr	r0, [r4, #4]
   16500:	e1d410bc 	ldrh	r1, [r4, #12]
   16504:	e5942008 	ldr	r2, [r4, #8]
   16508:	eaffffee 	b	164c8 <CSocket::Listen()+0x38>

0001650c <CSocket::Accept(CIPAddress*, unsigned short*)>:
   1650c:	e5903010 	ldr	r3, [r0, #16]
   16510:	e92d4070 	push	{r4, r5, r6, lr}
   16514:	e3530000 	cmp	r3, #0
   16518:	ba00002b 	blt	165cc <CSocket::Accept(CIPAddress*, unsigned short*)+0xc0>
   1651c:	e1d030bc 	ldrh	r3, [r0, #12]
   16520:	e3530000 	cmp	r3, #0
   16524:	0a000028 	beq	165cc <CSocket::Accept(CIPAddress*, unsigned short*)+0xc0>
   16528:	e3510000 	cmp	r1, #0
   1652c:	e1a06002 	mov	r6, r2
   16530:	e1a05001 	mov	r5, r1
   16534:	e1a04000 	mov	r4, r0
   16538:	0a00002e 	beq	165f8 <CSocket::Accept(CIPAddress*, unsigned short*)+0xec>
   1653c:	e3560000 	cmp	r6, #0
   16540:	0a000033 	beq	16614 <CSocket::Accept(CIPAddress*, unsigned short*)+0x108>
   16544:	e5940004 	ldr	r0, [r4, #4]
   16548:	e3500000 	cmp	r0, #0
   1654c:	0a000021 	beq	165d8 <CSocket::Accept(CIPAddress*, unsigned short*)+0xcc>
   16550:	e1a01005 	mov	r1, r5
   16554:	e1a02006 	mov	r2, r6
   16558:	e5943010 	ldr	r3, [r4, #16]
   1655c:	eb0002f1 	bl	17128 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   16560:	e3500000 	cmp	r0, #0
   16564:	b3a05000 	movlt	r5, #0
   16568:	aa000008 	bge	16590 <CSocket::Accept(CIPAddress*, unsigned short*)+0x84>
   1656c:	e5942008 	ldr	r2, [r4, #8]
   16570:	e1d410bc 	ldrh	r1, [r4, #12]
   16574:	e5940004 	ldr	r0, [r4, #4]
   16578:	eb00028c 	bl	16fb0 <CTransportLayer::Listen(unsigned short, int)>
   1657c:	e3500000 	cmp	r0, #0
   16580:	e5840010 	str	r0, [r4, #16]
   16584:	ba000007 	blt	165a8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x9c>
   16588:	e1a00005 	mov	r0, r5
   1658c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16590:	e3a00018 	mov	r0, #24
   16594:	eb002e7f 	bl	21f98 <operator new(unsigned int)>
   16598:	e1a01004 	mov	r1, r4
   1659c:	e1a05000 	mov	r5, r0
   165a0:	ebffff22 	bl	16230 <CSocket::CSocket(CSocket&)>
   165a4:	eafffff0 	b	1656c <CSocket::Accept(CIPAddress*, unsigned short*)+0x60>
   165a8:	eb003afe 	bl	251a8 <CLogger::Get()>
   165ac:	e3a02000 	mov	r2, #0
   165b0:	e30e3660 	movw	r3, #58976	; 0xe660
   165b4:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   165b8:	e3403002 	movt	r3, #2
   165bc:	e3401002 	movt	r1, #2
   165c0:	eb003bd5 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   165c4:	e1a00005 	mov	r0, r5
   165c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   165cc:	e3a05000 	mov	r5, #0
   165d0:	e1a00005 	mov	r0, r5
   165d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   165d8:	e30e1604 	movw	r1, #58884	; 0xe604
   165dc:	e30e0624 	movw	r0, #58916	; 0xe624
   165e0:	e3401002 	movt	r1, #2
   165e4:	e3400002 	movt	r0, #2
   165e8:	e3a020aa 	mov	r2, #170	; 0xaa
   165ec:	eb00396b 	bl	24ba0 <assertion_failed>
   165f0:	e5940004 	ldr	r0, [r4, #4]
   165f4:	eaffffd5 	b	16550 <CSocket::Accept(CIPAddress*, unsigned short*)+0x44>
   165f8:	e30e1604 	movw	r1, #58884	; 0xe604
   165fc:	e30e063c 	movw	r0, #58940	; 0xe63c
   16600:	e3401002 	movt	r1, #2
   16604:	e3400002 	movt	r0, #2
   16608:	e3a020a8 	mov	r2, #168	; 0xa8
   1660c:	eb003963 	bl	24ba0 <assertion_failed>
   16610:	eaffffc9 	b	1653c <CSocket::Accept(CIPAddress*, unsigned short*)+0x30>
   16614:	e30e1604 	movw	r1, #58884	; 0xe604
   16618:	e30e064c 	movw	r0, #58956	; 0xe64c
   1661c:	e3401002 	movt	r1, #2
   16620:	e3400002 	movt	r0, #2
   16624:	e3a020a9 	mov	r2, #169	; 0xa9
   16628:	eb00395c 	bl	24ba0 <assertion_failed>
   1662c:	eaffffc4 	b	16544 <CSocket::Accept(CIPAddress*, unsigned short*)+0x38>

00016630 <CSocket::Send(void const*, unsigned int, int)>:
   16630:	e92d4070 	push	{r4, r5, r6, lr}
   16634:	e16fcf12 	clz	ip, r2
   16638:	e590e010 	ldr	lr, [r0, #16]
   1663c:	e24dd010 	sub	sp, sp, #16
   16640:	e1a0c2ac 	lsr	ip, ip, #5
   16644:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   16648:	1a000021 	bne	166d4 <CSocket::Send(void const*, unsigned int, int)+0xa4>
   1664c:	e1a06002 	mov	r6, r2
   16650:	e5902004 	ldr	r2, [r0, #4]
   16654:	e1a05001 	mov	r5, r1
   16658:	e1a04000 	mov	r4, r0
   1665c:	e3520000 	cmp	r2, #0
   16660:	0a000009 	beq	1668c <CSocket::Send(void const*, unsigned int, int)+0x5c>
   16664:	e3550000 	cmp	r5, #0
   16668:	0a000010 	beq	166b0 <CSocket::Send(void const*, unsigned int, int)+0x80>
   1666c:	e594c010 	ldr	ip, [r4, #16]
   16670:	e1a02006 	mov	r2, r6
   16674:	e5940004 	ldr	r0, [r4, #4]
   16678:	e1a01005 	mov	r1, r5
   1667c:	e58dc000 	str	ip, [sp]
   16680:	eb0002fe 	bl	17280 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   16684:	e28dd010 	add	sp, sp, #16
   16688:	e8bd8070 	pop	{r4, r5, r6, pc}
   1668c:	e30e1604 	movw	r1, #58884	; 0xe604
   16690:	e30e0624 	movw	r0, #58916	; 0xe624
   16694:	e3401002 	movt	r1, #2
   16698:	e3400002 	movt	r0, #2
   1669c:	e3a020c7 	mov	r2, #199	; 0xc7
   166a0:	e58d300c 	str	r3, [sp, #12]
   166a4:	eb00393d 	bl	24ba0 <assertion_failed>
   166a8:	e59d300c 	ldr	r3, [sp, #12]
   166ac:	eaffffec 	b	16664 <CSocket::Send(void const*, unsigned int, int)+0x34>
   166b0:	e30e1604 	movw	r1, #58884	; 0xe604
   166b4:	e30b0984 	movw	r0, #47492	; 0xb984
   166b8:	e3401002 	movt	r1, #2
   166bc:	e3400002 	movt	r0, #2
   166c0:	e3a020c8 	mov	r2, #200	; 0xc8
   166c4:	e58d300c 	str	r3, [sp, #12]
   166c8:	eb003934 	bl	24ba0 <assertion_failed>
   166cc:	e59d300c 	ldr	r3, [sp, #12]
   166d0:	eaffffe5 	b	1666c <CSocket::Send(void const*, unsigned int, int)+0x3c>
   166d4:	e3e00000 	mvn	r0, #0
   166d8:	eaffffe9 	b	16684 <CSocket::Send(void const*, unsigned int, int)+0x54>

000166dc <CSocket::Receive(void*, unsigned int, int)>:
   166dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   166e0:	e16fcf12 	clz	ip, r2
   166e4:	e590e010 	ldr	lr, [r0, #16]
   166e8:	e1a0c2ac 	lsr	ip, ip, #5
   166ec:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   166f0:	1a000033 	bne	167c4 <CSocket::Receive(void*, unsigned int, int)+0xe8>
   166f4:	e1a05003 	mov	r5, r3
   166f8:	e5903004 	ldr	r3, [r0, #4]
   166fc:	e1a06002 	mov	r6, r2
   16700:	e1a07001 	mov	r7, r1
   16704:	e3530000 	cmp	r3, #0
   16708:	e1a04000 	mov	r4, r0
   1670c:	0a000016 	beq	1676c <CSocket::Receive(void*, unsigned int, int)+0x90>
   16710:	e5941014 	ldr	r1, [r4, #20]
   16714:	e3510000 	cmp	r1, #0
   16718:	0a00001a 	beq	16788 <CSocket::Receive(void*, unsigned int, int)+0xac>
   1671c:	e1a02005 	mov	r2, r5
   16720:	e5943010 	ldr	r3, [r4, #16]
   16724:	e5940004 	ldr	r0, [r4, #4]
   16728:	eb00030e 	bl	17368 <CTransportLayer::Receive(void*, int, int)>
   1672c:	e2505000 	subs	r5, r0, #0
   16730:	ba00000b 	blt	16764 <CSocket::Receive(void*, unsigned int, int)+0x88>
   16734:	e1560005 	cmp	r6, r5
   16738:	31a02006 	movcc	r2, r6
   1673c:	21a02005 	movcs	r2, r5
   16740:	21a06005 	movcs	r6, r5
   16744:	31a06002 	movcc	r6, r2
   16748:	e3570000 	cmp	r7, #0
   1674c:	e1a05002 	mov	r5, r2
   16750:	0a000014 	beq	167a8 <CSocket::Receive(void*, unsigned int, int)+0xcc>
   16754:	e1a02006 	mov	r2, r6
   16758:	e5941014 	ldr	r1, [r4, #20]
   1675c:	e1a00007 	mov	r0, r7
   16760:	eb003298 	bl	231c8 <memcpy>
   16764:	e1a00005 	mov	r0, r5
   16768:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1676c:	e30e1604 	movw	r1, #58884	; 0xe604
   16770:	e30e0624 	movw	r0, #58916	; 0xe624
   16774:	e3401002 	movt	r1, #2
   16778:	e3400002 	movt	r0, #2
   1677c:	e3a020d8 	mov	r2, #216	; 0xd8
   16780:	eb003906 	bl	24ba0 <assertion_failed>
   16784:	eaffffe1 	b	16710 <CSocket::Receive(void*, unsigned int, int)+0x34>
   16788:	e30e1604 	movw	r1, #58884	; 0xe604
   1678c:	e30c0424 	movw	r0, #50212	; 0xc424
   16790:	e3401002 	movt	r1, #2
   16794:	e3400002 	movt	r0, #2
   16798:	e3a020d9 	mov	r2, #217	; 0xd9
   1679c:	eb0038ff 	bl	24ba0 <assertion_failed>
   167a0:	e5941014 	ldr	r1, [r4, #20]
   167a4:	eaffffdc 	b	1671c <CSocket::Receive(void*, unsigned int, int)+0x40>
   167a8:	e30e1604 	movw	r1, #58884	; 0xe604
   167ac:	e30b0984 	movw	r0, #47492	; 0xb984
   167b0:	e3401002 	movt	r1, #2
   167b4:	e3400002 	movt	r0, #2
   167b8:	e3a020e5 	mov	r2, #229	; 0xe5
   167bc:	eb0038f7 	bl	24ba0 <assertion_failed>
   167c0:	eaffffe3 	b	16754 <CSocket::Receive(void*, unsigned int, int)+0x78>
   167c4:	e3e05000 	mvn	r5, #0
   167c8:	eaffffe5 	b	16764 <CSocket::Receive(void*, unsigned int, int)+0x88>

000167cc <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   167cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   167d0:	e16fcf12 	clz	ip, r2
   167d4:	e590e010 	ldr	lr, [r0, #16]
   167d8:	e24dd010 	sub	sp, sp, #16
   167dc:	e1a0c2ac 	lsr	ip, ip, #5
   167e0:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   167e4:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   167e8:	1a000020 	bne	16870 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xa4>
   167ec:	e1a04000 	mov	r4, r0
   167f0:	e5900000 	ldr	r0, [r0]
   167f4:	e1a06002 	mov	r6, r2
   167f8:	e1a07003 	mov	r7, r3
   167fc:	e3500000 	cmp	r0, #0
   16800:	e1a05001 	mov	r5, r1
   16804:	0a00001b 	beq	16878 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xac>
   16808:	eb001c04 	bl	1d820 <CNetConfig::GetIPAddress() const>
   1680c:	eb001d5c 	bl	1dd84 <CIPAddress::IsNull() const>
   16810:	e16fcf18 	clz	ip, r8
   16814:	e1a0c2ac 	lsr	ip, ip, #5
   16818:	e3500000 	cmp	r0, #0
   1681c:	01a0000c 	moveq	r0, ip
   16820:	138c0001 	orrne	r0, ip, #1
   16824:	e3500000 	cmp	r0, #0
   16828:	1a000010 	bne	16870 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xa4>
   1682c:	e5943004 	ldr	r3, [r4, #4]
   16830:	e3530000 	cmp	r3, #0
   16834:	0a000017 	beq	16898 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xcc>
   16838:	e3550000 	cmp	r5, #0
   1683c:	0a00001c 	beq	168b4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe8>
   16840:	e594c010 	ldr	ip, [r4, #16]
   16844:	e1a03007 	mov	r3, r7
   16848:	e59de028 	ldr	lr, [sp, #40]	; 0x28
   1684c:	e1a02006 	mov	r2, r6
   16850:	e5940004 	ldr	r0, [r4, #4]
   16854:	e1a01005 	mov	r1, r5
   16858:	e58d8004 	str	r8, [sp, #4]
   1685c:	e58de000 	str	lr, [sp]
   16860:	e58dc008 	str	ip, [sp, #8]
   16864:	eb0002ec 	bl	1741c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   16868:	e28dd010 	add	sp, sp, #16
   1686c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16870:	e3e00000 	mvn	r0, #0
   16874:	eafffffb 	b	16868 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x9c>
   16878:	e30e1604 	movw	r1, #58884	; 0xe604
   1687c:	e30e0610 	movw	r0, #58896	; 0xe610
   16880:	e3401002 	movt	r1, #2
   16884:	e3400002 	movt	r0, #2
   16888:	e3a020f8 	mov	r2, #248	; 0xf8
   1688c:	eb0038c3 	bl	24ba0 <assertion_failed>
   16890:	e5940000 	ldr	r0, [r4]
   16894:	eaffffdb 	b	16808 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x3c>
   16898:	e30e1604 	movw	r1, #58884	; 0xe604
   1689c:	e30e0624 	movw	r0, #58916	; 0xe624
   168a0:	e3401002 	movt	r1, #2
   168a4:	e3400002 	movt	r0, #2
   168a8:	e3002103 	movw	r2, #259	; 0x103
   168ac:	eb0038bb 	bl	24ba0 <assertion_failed>
   168b0:	eaffffe0 	b	16838 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x6c>
   168b4:	e30e1604 	movw	r1, #58884	; 0xe604
   168b8:	e30b0984 	movw	r0, #47492	; 0xb984
   168bc:	e3401002 	movt	r1, #2
   168c0:	e3400002 	movt	r0, #2
   168c4:	e3a02f41 	mov	r2, #260	; 0x104
   168c8:	eb0038b4 	bl	24ba0 <assertion_failed>
   168cc:	eaffffdb 	b	16840 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>

000168d0 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   168d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   168d4:	e16fcf12 	clz	ip, r2
   168d8:	e590e010 	ldr	lr, [r0, #16]
   168dc:	e24dd00c 	sub	sp, sp, #12
   168e0:	e1a0c2ac 	lsr	ip, ip, #5
   168e4:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   168e8:	1a000038 	bne	169d0 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x100>
   168ec:	e1a05003 	mov	r5, r3
   168f0:	e5903004 	ldr	r3, [r0, #4]
   168f4:	e1a06002 	mov	r6, r2
   168f8:	e1a07001 	mov	r7, r1
   168fc:	e3530000 	cmp	r3, #0
   16900:	e1a04000 	mov	r4, r0
   16904:	0a00001b 	beq	16978 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xa8>
   16908:	e5941014 	ldr	r1, [r4, #20]
   1690c:	e3510000 	cmp	r1, #0
   16910:	0a00001f 	beq	16994 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc4>
   16914:	e594c010 	ldr	ip, [r4, #16]
   16918:	e1a02005 	mov	r2, r5
   1691c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   16920:	e5940004 	ldr	r0, [r4, #4]
   16924:	e58dc004 	str	ip, [sp, #4]
   16928:	e58d3000 	str	r3, [sp]
   1692c:	e59d3020 	ldr	r3, [sp, #32]
   16930:	eb0002f7 	bl	17514 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   16934:	e2505000 	subs	r5, r0, #0
   16938:	ba00000b 	blt	1696c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x9c>
   1693c:	e1560005 	cmp	r6, r5
   16940:	31a02006 	movcc	r2, r6
   16944:	21a02005 	movcs	r2, r5
   16948:	21a06005 	movcs	r6, r5
   1694c:	31a06002 	movcc	r6, r2
   16950:	e3570000 	cmp	r7, #0
   16954:	e1a05002 	mov	r5, r2
   16958:	0a000015 	beq	169b4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xe4>
   1695c:	e1a02006 	mov	r2, r6
   16960:	e5941014 	ldr	r1, [r4, #20]
   16964:	e1a00007 	mov	r0, r7
   16968:	eb003216 	bl	231c8 <memcpy>
   1696c:	e1a00005 	mov	r0, r5
   16970:	e28dd00c 	add	sp, sp, #12
   16974:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16978:	e30e1604 	movw	r1, #58884	; 0xe604
   1697c:	e30e0624 	movw	r0, #58916	; 0xe624
   16980:	e3401002 	movt	r1, #2
   16984:	e3400002 	movt	r0, #2
   16988:	e3002115 	movw	r2, #277	; 0x115
   1698c:	eb003883 	bl	24ba0 <assertion_failed>
   16990:	eaffffdc 	b	16908 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x38>
   16994:	e30e1604 	movw	r1, #58884	; 0xe604
   16998:	e30c0424 	movw	r0, #50212	; 0xc424
   1699c:	e3401002 	movt	r1, #2
   169a0:	e3400002 	movt	r0, #2
   169a4:	e3002116 	movw	r2, #278	; 0x116
   169a8:	eb00387c 	bl	24ba0 <assertion_failed>
   169ac:	e5941014 	ldr	r1, [r4, #20]
   169b0:	eaffffd7 	b	16914 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x44>
   169b4:	e30e1604 	movw	r1, #58884	; 0xe604
   169b8:	e30b0984 	movw	r0, #47492	; 0xb984
   169bc:	e3401002 	movt	r1, #2
   169c0:	e3400002 	movt	r0, #2
   169c4:	e3002123 	movw	r2, #291	; 0x123
   169c8:	eb003874 	bl	24ba0 <assertion_failed>
   169cc:	eaffffe2 	b	1695c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x8c>
   169d0:	e3e05000 	mvn	r5, #0
   169d4:	eaffffe4 	b	1696c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x9c>

000169d8 <CSocket::SetOptionBroadcast(int)>:
   169d8:	e5902010 	ldr	r2, [r0, #16]
   169dc:	e3520000 	cmp	r2, #0
   169e0:	ba000016 	blt	16a40 <CSocket::SetOptionBroadcast(int)+0x68>
   169e4:	e5903008 	ldr	r3, [r0, #8]
   169e8:	e3530011 	cmp	r3, #17
   169ec:	0a000001 	beq	169f8 <CSocket::SetOptionBroadcast(int)+0x20>
   169f0:	e3a00000 	mov	r0, #0
   169f4:	e12fff1e 	bx	lr
   169f8:	e92d4070 	push	{r4, r5, r6, lr}
   169fc:	e1a04000 	mov	r4, r0
   16a00:	e5900004 	ldr	r0, [r0, #4]
   16a04:	e1a05001 	mov	r5, r1
   16a08:	e3500000 	cmp	r0, #0
   16a0c:	0a000002 	beq	16a1c <CSocket::SetOptionBroadcast(int)+0x44>
   16a10:	e1a01005 	mov	r1, r5
   16a14:	e8bd4070 	pop	{r4, r5, r6, lr}
   16a18:	ea0002f0 	b	175e0 <CTransportLayer::SetOptionBroadcast(int, int)>
   16a1c:	e3002135 	movw	r2, #309	; 0x135
   16a20:	e30e1604 	movw	r1, #58884	; 0xe604
   16a24:	e30e0624 	movw	r0, #58916	; 0xe624
   16a28:	e3401002 	movt	r1, #2
   16a2c:	e3400002 	movt	r0, #2
   16a30:	eb00385a 	bl	24ba0 <assertion_failed>
   16a34:	e5940004 	ldr	r0, [r4, #4]
   16a38:	e5942010 	ldr	r2, [r4, #16]
   16a3c:	eafffff3 	b	16a10 <CSocket::SetOptionBroadcast(int)+0x38>
   16a40:	e3e00000 	mvn	r0, #0
   16a44:	e12fff1e 	bx	lr

00016a48 <CSocket::GetForeignIP() const>:
   16a48:	e5901010 	ldr	r1, [r0, #16]
   16a4c:	e3510000 	cmp	r1, #0
   16a50:	ba000011 	blt	16a9c <CSocket::GetForeignIP() const+0x54>
   16a54:	e5903004 	ldr	r3, [r0, #4]
   16a58:	e3530000 	cmp	r3, #0
   16a5c:	0a000001 	beq	16a68 <CSocket::GetForeignIP() const+0x20>
   16a60:	e1a00003 	mov	r0, r3
   16a64:	ea0002ff 	b	17668 <CTransportLayer::GetForeignIP(int) const>
   16a68:	e92d4010 	push	{r4, lr}
   16a6c:	e30e1604 	movw	r1, #58884	; 0xe604
   16a70:	e1a04000 	mov	r4, r0
   16a74:	e3401002 	movt	r1, #2
   16a78:	e30e0624 	movw	r0, #58916	; 0xe624
   16a7c:	e3a02d05 	mov	r2, #320	; 0x140
   16a80:	e3400002 	movt	r0, #2
   16a84:	eb003845 	bl	24ba0 <assertion_failed>
   16a88:	e5943004 	ldr	r3, [r4, #4]
   16a8c:	e5941010 	ldr	r1, [r4, #16]
   16a90:	e8bd4010 	pop	{r4, lr}
   16a94:	e1a00003 	mov	r0, r3
   16a98:	ea0002f2 	b	17668 <CTransportLayer::GetForeignIP(int) const>
   16a9c:	e3a00000 	mov	r0, #0
   16aa0:	e12fff1e 	bx	lr

00016aa4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   16aa4:	e92d4070 	push	{r4, r5, r6, lr}
   16aa8:	e1a04000 	mov	r4, r0
   16aac:	e1a06002 	mov	r6, r2
   16ab0:	e3a02064 	mov	r2, #100	; 0x64
   16ab4:	e5806004 	str	r6, [r0, #4]
   16ab8:	e1a05001 	mov	r5, r1
   16abc:	e5841000 	str	r1, [r4]
   16ac0:	e2800008 	add	r0, r0, #8
   16ac4:	e1a01002 	mov	r1, r2
   16ac8:	eb004894 	bl	28d20 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   16acc:	e3a03000 	mov	r3, #0
   16ad0:	e1a02006 	mov	r2, r6
   16ad4:	e584301c 	str	r3, [r4, #28]
   16ad8:	e5843020 	str	r3, [r4, #32]
   16adc:	e1a01005 	mov	r1, r5
   16ae0:	e30eca60 	movw	ip, #60000	; 0xea60
   16ae4:	e2840024 	add	r0, r4, #36	; 0x24
   16ae8:	e34fcfff 	movt	ip, #65535	; 0xffff
   16aec:	e1c4c1b8 	strh	ip, [r4, #24]
   16af0:	eb001a6b 	bl	1d4a4 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   16af4:	e5943000 	ldr	r3, [r4]
   16af8:	e3530000 	cmp	r3, #0
   16afc:	0a00000c 	beq	16b34 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x90>
   16b00:	e5943004 	ldr	r3, [r4, #4]
   16b04:	e3530000 	cmp	r3, #0
   16b08:	0a000001 	beq	16b14 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x70>
   16b0c:	e1a00004 	mov	r0, r4
   16b10:	e8bd8070 	pop	{r4, r5, r6, pc}
   16b14:	e3a02027 	mov	r2, #39	; 0x27
   16b18:	e30e168c 	movw	r1, #59020	; 0xe68c
   16b1c:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   16b20:	e3401002 	movt	r1, #2
   16b24:	e3400002 	movt	r0, #2
   16b28:	eb00381c 	bl	24ba0 <assertion_failed>
   16b2c:	e1a00004 	mov	r0, r4
   16b30:	e8bd8070 	pop	{r4, r5, r6, pc}
   16b34:	e30e168c 	movw	r1, #59020	; 0xe68c
   16b38:	e30e0610 	movw	r0, #58896	; 0xe610
   16b3c:	e3401002 	movt	r1, #2
   16b40:	e3400002 	movt	r0, #2
   16b44:	e3a02026 	mov	r2, #38	; 0x26
   16b48:	eb003814 	bl	24ba0 <assertion_failed>
   16b4c:	eaffffeb 	b	16b00 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x5c>

00016b50 <CTransportLayer::Initialize()>:
   16b50:	e5903020 	ldr	r3, [r0, #32]
   16b54:	e92d4010 	push	{r4, lr}
   16b58:	e3530000 	cmp	r3, #0
   16b5c:	e1a04000 	mov	r4, r0
   16b60:	0a000005 	beq	16b7c <CTransportLayer::Initialize()+0x2c>
   16b64:	e30e168c 	movw	r1, #59020	; 0xe68c
   16b68:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   16b6c:	e3401002 	movt	r1, #2
   16b70:	e3400002 	movt	r0, #2
   16b74:	e3a0203c 	mov	r2, #60	; 0x3c
   16b78:	eb003808 	bl	24ba0 <assertion_failed>
   16b7c:	e3a00d19 	mov	r0, #1600	; 0x640
   16b80:	eb002d05 	bl	21f9c <operator new[](unsigned int)>
   16b84:	e5840020 	str	r0, [r4, #32]
   16b88:	e3a00001 	mov	r0, #1
   16b8c:	e8bd8010 	pop	{r4, pc}

00016b90 <CTransportLayer::Bind(unsigned short, int)>:
   16b90:	e3520011 	cmp	r2, #17
   16b94:	1a000046 	bne	16cb4 <CTransportLayer::Bind(unsigned short, int)+0x124>
   16b98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16b9c:	e1a06000 	mov	r6, r0
   16ba0:	e590001c 	ldr	r0, [r0, #28]
   16ba4:	e1a07001 	mov	r7, r1
   16ba8:	e3500000 	cmp	r0, #0
   16bac:	1a000038 	bne	16c94 <CTransportLayer::Bind(unsigned short, int)+0x104>
   16bb0:	e2865008 	add	r5, r6, #8
   16bb4:	e3a04000 	mov	r4, #0
   16bb8:	ea000004 	b	16bd0 <CTransportLayer::Bind(unsigned short, int)+0x40>
   16bbc:	eb00488a 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16bc0:	e5903000 	ldr	r3, [r0]
   16bc4:	e3530000 	cmp	r3, #0
   16bc8:	0a000006 	beq	16be8 <CTransportLayer::Bind(unsigned short, int)+0x58>
   16bcc:	e2844001 	add	r4, r4, #1
   16bd0:	e1a00005 	mov	r0, r5
   16bd4:	eb004882 	bl	28de4 <CPtrArray::GetCount() const>
   16bd8:	e1a01004 	mov	r1, r4
   16bdc:	e1540000 	cmp	r4, r0
   16be0:	e1a00005 	mov	r0, r5
   16be4:	3afffff4 	bcc	16bbc <CTransportLayer::Bind(unsigned short, int)+0x2c>
   16be8:	e1a00005 	mov	r0, r5
   16bec:	eb00487c 	bl	28de4 <CPtrArray::GetCount() const>
   16bf0:	e1540000 	cmp	r4, r0
   16bf4:	2a000021 	bcs	16c80 <CTransportLayer::Bind(unsigned short, int)+0xf0>
   16bf8:	e3570000 	cmp	r7, #0
   16bfc:	0a00001a 	beq	16c6c <CTransportLayer::Bind(unsigned short, int)+0xdc>
   16c00:	e5963000 	ldr	r3, [r6]
   16c04:	e3530000 	cmp	r3, #0
   16c08:	0a00002b 	beq	16cbc <CTransportLayer::Bind(unsigned short, int)+0x12c>
   16c0c:	e5963004 	ldr	r3, [r6, #4]
   16c10:	e3530000 	cmp	r3, #0
   16c14:	0a00002f 	beq	16cd8 <CTransportLayer::Bind(unsigned short, int)+0x148>
   16c18:	e3a00050 	mov	r0, #80	; 0x50
   16c1c:	eb002cdd 	bl	21f98 <operator new(unsigned int)>
   16c20:	e1a03007 	mov	r3, r7
   16c24:	e8960006 	ldm	r6, {r1, r2}
   16c28:	e1a08000 	mov	r8, r0
   16c2c:	eb000fc9 	bl	1ab58 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   16c30:	e1a01004 	mov	r1, r4
   16c34:	e1a00005 	mov	r0, r5
   16c38:	eb00486b 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16c3c:	e1a01004 	mov	r1, r4
   16c40:	e5808000 	str	r8, [r0]
   16c44:	e1a00005 	mov	r0, r5
   16c48:	eb004867 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16c4c:	e5903000 	ldr	r3, [r0]
   16c50:	e3530000 	cmp	r3, #0
   16c54:	0a000026 	beq	16cf4 <CTransportLayer::Bind(unsigned short, int)+0x164>
   16c58:	e596301c 	ldr	r3, [r6, #28]
   16c5c:	e3530000 	cmp	r3, #0
   16c60:	1a00000d 	bne	16c9c <CTransportLayer::Bind(unsigned short, int)+0x10c>
   16c64:	e1a00004 	mov	r0, r4
   16c68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16c6c:	e596301c 	ldr	r3, [r6, #28]
   16c70:	e3530000 	cmp	r3, #0
   16c74:	1a00000b 	bne	16ca8 <CTransportLayer::Bind(unsigned short, int)+0x118>
   16c78:	e3e00000 	mvn	r0, #0
   16c7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16c80:	e3a01000 	mov	r1, #0
   16c84:	e1a00005 	mov	r0, r5
   16c88:	eb0048ab 	bl	28f3c <CPtrArray::Append(void*)>
   16c8c:	e1a04000 	mov	r4, r0
   16c90:	eaffffd8 	b	16bf8 <CTransportLayer::Bind(unsigned short, int)+0x68>
   16c94:	eb002ccb 	bl	21fc8 <EnterCritical>
   16c98:	eaffffc4 	b	16bb0 <CTransportLayer::Bind(unsigned short, int)+0x20>
   16c9c:	eb002cf7 	bl	22080 <LeaveCritical>
   16ca0:	e1a00004 	mov	r0, r4
   16ca4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16ca8:	eb002cf4 	bl	22080 <LeaveCritical>
   16cac:	e3e00000 	mvn	r0, #0
   16cb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16cb4:	e3e00000 	mvn	r0, #0
   16cb8:	e12fff1e 	bx	lr
   16cbc:	e30e168c 	movw	r1, #59020	; 0xe68c
   16cc0:	e30e0610 	movw	r0, #58896	; 0xe610
   16cc4:	e3401002 	movt	r1, #2
   16cc8:	e3400002 	movt	r0, #2
   16ccc:	e3a020bc 	mov	r2, #188	; 0xbc
   16cd0:	eb0037b2 	bl	24ba0 <assertion_failed>
   16cd4:	eaffffcc 	b	16c0c <CTransportLayer::Bind(unsigned short, int)+0x7c>
   16cd8:	e30e168c 	movw	r1, #59020	; 0xe68c
   16cdc:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   16ce0:	e3401002 	movt	r1, #2
   16ce4:	e3400002 	movt	r0, #2
   16ce8:	e3a020bd 	mov	r2, #189	; 0xbd
   16cec:	eb0037ab 	bl	24ba0 <assertion_failed>
   16cf0:	eaffffc8 	b	16c18 <CTransportLayer::Bind(unsigned short, int)+0x88>
   16cf4:	e30e168c 	movw	r1, #59020	; 0xe68c
   16cf8:	e30e06c8 	movw	r0, #59080	; 0xe6c8
   16cfc:	e3401002 	movt	r1, #2
   16d00:	e3400002 	movt	r0, #2
   16d04:	e3a020bf 	mov	r2, #191	; 0xbf
   16d08:	eb0037a4 	bl	24ba0 <assertion_failed>
   16d0c:	eaffffd1 	b	16c58 <CTransportLayer::Bind(unsigned short, int)+0xc8>

00016d10 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   16d10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d14:	e1a08000 	mov	r8, r0
   16d18:	e590001c 	ldr	r0, [r0, #28]
   16d1c:	e24dd014 	sub	sp, sp, #20
   16d20:	e1a06003 	mov	r6, r3
   16d24:	e3500000 	cmp	r0, #0
   16d28:	e58d1008 	str	r1, [sp, #8]
   16d2c:	e58d200c 	str	r2, [sp, #12]
   16d30:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   16d34:	1a00007d 	bne	16f30 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x220>
   16d38:	e2885008 	add	r5, r8, #8
   16d3c:	e3a07000 	mov	r7, #0
   16d40:	ea000004 	b	16d58 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x48>
   16d44:	eb004828 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16d48:	e5903000 	ldr	r3, [r0]
   16d4c:	e3530000 	cmp	r3, #0
   16d50:	0a000006 	beq	16d70 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   16d54:	e2877001 	add	r7, r7, #1
   16d58:	e1a00005 	mov	r0, r5
   16d5c:	eb004820 	bl	28de4 <CPtrArray::GetCount() const>
   16d60:	e1a01007 	mov	r1, r7
   16d64:	e1570000 	cmp	r7, r0
   16d68:	e1a00005 	mov	r0, r5
   16d6c:	3afffff4 	bcc	16d44 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   16d70:	e1a00005 	mov	r0, r5
   16d74:	eb00481a 	bl	28de4 <CPtrArray::GetCount() const>
   16d78:	e1570000 	cmp	r7, r0
   16d7c:	2a00006d 	bcs	16f38 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x228>
   16d80:	e3560000 	cmp	r6, #0
   16d84:	1a000027 	bne	16e28 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x118>
   16d88:	e30eba60 	movw	fp, #60000	; 0xea60
   16d8c:	e34fbfff 	movt	fp, #65535	; 0xffff
   16d90:	e30eae47 	movw	sl, #60999	; 0xee47
   16d94:	e1d861b8 	ldrh	r6, [r8, #24]
   16d98:	e3a04000 	mov	r4, #0
   16d9c:	e2863001 	add	r3, r6, #1
   16da0:	e6ff3073 	uxth	r3, r3
   16da4:	e153000a 	cmp	r3, sl
   16da8:	91c831b8 	strhls	r3, [r8, #24]
   16dac:	81c8b1b8 	strhhi	fp, [r8, #24]
   16db0:	ea000000 	b	16db8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa8>
   16db4:	e2844001 	add	r4, r4, #1
   16db8:	e1a00005 	mov	r0, r5
   16dbc:	eb004808 	bl	28de4 <CPtrArray::GetCount() const>
   16dc0:	e1a01004 	mov	r1, r4
   16dc4:	e1540000 	cmp	r4, r0
   16dc8:	e1a00005 	mov	r0, r5
   16dcc:	2a000011 	bcs	16e18 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x108>
   16dd0:	eb004805 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16dd4:	e1a01004 	mov	r1, r4
   16dd8:	e5903000 	ldr	r3, [r0]
   16ddc:	e1a00005 	mov	r0, r5
   16de0:	e3530000 	cmp	r3, #0
   16de4:	0afffff2 	beq	16db4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   16de8:	eb0047ff 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16dec:	e5900000 	ldr	r0, [r0]
   16df0:	eb000ccd 	bl	1a12c <CNetConnection::GetOwnPort() const>
   16df4:	e1560000 	cmp	r6, r0
   16df8:	1affffed 	bne	16db4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   16dfc:	e1a01004 	mov	r1, r4
   16e00:	e1a00005 	mov	r0, r5
   16e04:	eb0047f8 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16e08:	e5900000 	ldr	r0, [r0]
   16e0c:	eb000cd6 	bl	1a16c <CNetConnection::GetProtocol() const>
   16e10:	e1500009 	cmp	r0, r9
   16e14:	1affffe6 	bne	16db4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   16e18:	e1a00005 	mov	r0, r5
   16e1c:	eb0047f0 	bl	28de4 <CPtrArray::GetCount() const>
   16e20:	e1540000 	cmp	r4, r0
   16e24:	3affffda 	bcc	16d94 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x84>
   16e28:	e5983000 	ldr	r3, [r8]
   16e2c:	e3530000 	cmp	r3, #0
   16e30:	0a000049 	beq	16f5c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x24c>
   16e34:	e5983004 	ldr	r3, [r8, #4]
   16e38:	e3530000 	cmp	r3, #0
   16e3c:	0a00004d 	beq	16f78 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x268>
   16e40:	e3590006 	cmp	r9, #6
   16e44:	0a00002a 	beq	16ef4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1e4>
   16e48:	e3590011 	cmp	r9, #17
   16e4c:	1a000022 	bne	16edc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1cc>
   16e50:	e3a00050 	mov	r0, #80	; 0x50
   16e54:	eb002c4f 	bl	21f98 <operator new(unsigned int)>
   16e58:	e59dc00c 	ldr	ip, [sp, #12]
   16e5c:	e5982004 	ldr	r2, [r8, #4]
   16e60:	e5981000 	ldr	r1, [r8]
   16e64:	e59d3008 	ldr	r3, [sp, #8]
   16e68:	e58dc000 	str	ip, [sp]
   16e6c:	e58d6004 	str	r6, [sp, #4]
   16e70:	e1a04000 	mov	r4, r0
   16e74:	eb000f1c 	bl	1aaec <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   16e78:	e1a01007 	mov	r1, r7
   16e7c:	e1a00005 	mov	r0, r5
   16e80:	eb0047d9 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16e84:	e5804000 	str	r4, [r0]
   16e88:	e1a01007 	mov	r1, r7
   16e8c:	e1a00005 	mov	r0, r5
   16e90:	eb0047d5 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16e94:	e5903000 	ldr	r3, [r0]
   16e98:	e3530000 	cmp	r3, #0
   16e9c:	0a00003c 	beq	16f94 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x284>
   16ea0:	e1a01007 	mov	r1, r7
   16ea4:	e1a00005 	mov	r0, r5
   16ea8:	eb0047cf 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16eac:	e5900000 	ldr	r0, [r0]
   16eb0:	e5903000 	ldr	r3, [r0]
   16eb4:	e5933008 	ldr	r3, [r3, #8]
   16eb8:	e12fff33 	blx	r3
   16ebc:	e3500000 	cmp	r0, #0
   16ec0:	ba000005 	blt	16edc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1cc>
   16ec4:	e598301c 	ldr	r3, [r8, #28]
   16ec8:	e3530000 	cmp	r3, #0
   16ecc:	1a000020 	bne	16f54 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x244>
   16ed0:	e1a00007 	mov	r0, r7
   16ed4:	e28dd014 	add	sp, sp, #20
   16ed8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16edc:	e598301c 	ldr	r3, [r8, #28]
   16ee0:	e3530000 	cmp	r3, #0
   16ee4:	1a000018 	bne	16f4c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x23c>
   16ee8:	e3e00000 	mvn	r0, #0
   16eec:	e28dd014 	add	sp, sp, #20
   16ef0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ef4:	e3a000f4 	mov	r0, #244	; 0xf4
   16ef8:	eb002c26 	bl	21f98 <operator new(unsigned int)>
   16efc:	e59dc00c 	ldr	ip, [sp, #12]
   16f00:	e5982004 	ldr	r2, [r8, #4]
   16f04:	e5981000 	ldr	r1, [r8]
   16f08:	e59d3008 	ldr	r3, [sp, #8]
   16f0c:	e58dc000 	str	ip, [sp]
   16f10:	e58d6004 	str	r6, [sp, #4]
   16f14:	e1a04000 	mov	r4, r0
   16f18:	eb0011bd 	bl	1b614 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   16f1c:	e1a01007 	mov	r1, r7
   16f20:	e1a00005 	mov	r0, r5
   16f24:	eb0047b0 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16f28:	e5804000 	str	r4, [r0]
   16f2c:	eaffffd5 	b	16e88 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x178>
   16f30:	eb002c24 	bl	21fc8 <EnterCritical>
   16f34:	eaffff7f 	b	16d38 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   16f38:	e3a01000 	mov	r1, #0
   16f3c:	e1a00005 	mov	r0, r5
   16f40:	eb0047fd 	bl	28f3c <CPtrArray::Append(void*)>
   16f44:	e1a07000 	mov	r7, r0
   16f48:	eaffff8c 	b	16d80 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   16f4c:	eb002c4b 	bl	22080 <LeaveCritical>
   16f50:	eaffffe4 	b	16ee8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d8>
   16f54:	eb002c49 	bl	22080 <LeaveCritical>
   16f58:	eaffffdc 	b	16ed0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1c0>
   16f5c:	e30e168c 	movw	r1, #59020	; 0xe68c
   16f60:	e30e0610 	movw	r0, #58896	; 0xe610
   16f64:	e3401002 	movt	r1, #2
   16f68:	e3400002 	movt	r0, #2
   16f6c:	e3a020f0 	mov	r2, #240	; 0xf0
   16f70:	eb00370a 	bl	24ba0 <assertion_failed>
   16f74:	eaffffae 	b	16e34 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x124>
   16f78:	e30e168c 	movw	r1, #59020	; 0xe68c
   16f7c:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   16f80:	e3401002 	movt	r1, #2
   16f84:	e3400002 	movt	r0, #2
   16f88:	e3a020f1 	mov	r2, #241	; 0xf1
   16f8c:	eb003703 	bl	24ba0 <assertion_failed>
   16f90:	eaffffaa 	b	16e40 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x130>
   16f94:	e30e168c 	movw	r1, #59020	; 0xe68c
   16f98:	e30e06c8 	movw	r0, #59080	; 0xe6c8
   16f9c:	e3401002 	movt	r1, #2
   16fa0:	e3400002 	movt	r0, #2
   16fa4:	e3a02c01 	mov	r2, #256	; 0x100
   16fa8:	eb0036fc 	bl	24ba0 <assertion_failed>
   16fac:	eaffffbb 	b	16ea0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x190>

00016fb0 <CTransportLayer::Listen(unsigned short, int)>:
   16fb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16fb4:	e1a06000 	mov	r6, r0
   16fb8:	e590001c 	ldr	r0, [r0, #28]
   16fbc:	e1a07001 	mov	r7, r1
   16fc0:	e1a08002 	mov	r8, r2
   16fc4:	e3500000 	cmp	r0, #0
   16fc8:	1a00001f 	bne	1704c <CTransportLayer::Listen(unsigned short, int)+0x9c>
   16fcc:	e2865008 	add	r5, r6, #8
   16fd0:	e3a04000 	mov	r4, #0
   16fd4:	ea000004 	b	16fec <CTransportLayer::Listen(unsigned short, int)+0x3c>
   16fd8:	eb004783 	bl	28dec <CPtrArray::operator[](unsigned int)>
   16fdc:	e5903000 	ldr	r3, [r0]
   16fe0:	e3530000 	cmp	r3, #0
   16fe4:	0a000006 	beq	17004 <CTransportLayer::Listen(unsigned short, int)+0x54>
   16fe8:	e2844001 	add	r4, r4, #1
   16fec:	e1a00005 	mov	r0, r5
   16ff0:	eb00477b 	bl	28de4 <CPtrArray::GetCount() const>
   16ff4:	e1a01004 	mov	r1, r4
   16ff8:	e1540000 	cmp	r4, r0
   16ffc:	e1a00005 	mov	r0, r5
   17000:	3afffff4 	bcc	16fd8 <CTransportLayer::Listen(unsigned short, int)+0x28>
   17004:	e1a00005 	mov	r0, r5
   17008:	eb004775 	bl	28de4 <CPtrArray::GetCount() const>
   1700c:	e1540000 	cmp	r4, r0
   17010:	2a000008 	bcs	17038 <CTransportLayer::Listen(unsigned short, int)+0x88>
   17014:	e3570000 	cmp	r7, #0
   17018:	0a000001 	beq	17024 <CTransportLayer::Listen(unsigned short, int)+0x74>
   1701c:	e3580006 	cmp	r8, #6
   17020:	0a00000e 	beq	17060 <CTransportLayer::Listen(unsigned short, int)+0xb0>
   17024:	e596301c 	ldr	r3, [r6, #28]
   17028:	e3530000 	cmp	r3, #0
   1702c:	1a000008 	bne	17054 <CTransportLayer::Listen(unsigned short, int)+0xa4>
   17030:	e3e00000 	mvn	r0, #0
   17034:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17038:	e3a01000 	mov	r1, #0
   1703c:	e1a00005 	mov	r0, r5
   17040:	eb0047bd 	bl	28f3c <CPtrArray::Append(void*)>
   17044:	e1a04000 	mov	r4, r0
   17048:	eafffff1 	b	17014 <CTransportLayer::Listen(unsigned short, int)+0x64>
   1704c:	eb002bdd 	bl	21fc8 <EnterCritical>
   17050:	eaffffdd 	b	16fcc <CTransportLayer::Listen(unsigned short, int)+0x1c>
   17054:	eb002c09 	bl	22080 <LeaveCritical>
   17058:	e3e00000 	mvn	r0, #0
   1705c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17060:	e5963000 	ldr	r3, [r6]
   17064:	e3530000 	cmp	r3, #0
   17068:	0a000027 	beq	1710c <CTransportLayer::Listen(unsigned short, int)+0x15c>
   1706c:	e5963004 	ldr	r3, [r6, #4]
   17070:	e3530000 	cmp	r3, #0
   17074:	0a00001d 	beq	170f0 <CTransportLayer::Listen(unsigned short, int)+0x140>
   17078:	e3a000f4 	mov	r0, #244	; 0xf4
   1707c:	eb002bc5 	bl	21f98 <operator new(unsigned int)>
   17080:	e1a03007 	mov	r3, r7
   17084:	e8960006 	ldm	r6, {r1, r2}
   17088:	e1a08000 	mov	r8, r0
   1708c:	eb000f8e 	bl	1aecc <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   17090:	e1a01004 	mov	r1, r4
   17094:	e1a00005 	mov	r0, r5
   17098:	eb004753 	bl	28dec <CPtrArray::operator[](unsigned int)>
   1709c:	e1a01004 	mov	r1, r4
   170a0:	e5808000 	str	r8, [r0]
   170a4:	e1a00005 	mov	r0, r5
   170a8:	eb00474f 	bl	28dec <CPtrArray::operator[](unsigned int)>
   170ac:	e5903000 	ldr	r3, [r0]
   170b0:	e3530000 	cmp	r3, #0
   170b4:	0a000006 	beq	170d4 <CTransportLayer::Listen(unsigned short, int)+0x124>
   170b8:	e596301c 	ldr	r3, [r6, #28]
   170bc:	e3530000 	cmp	r3, #0
   170c0:	1a000001 	bne	170cc <CTransportLayer::Listen(unsigned short, int)+0x11c>
   170c4:	e1a00004 	mov	r0, r4
   170c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   170cc:	eb002beb 	bl	22080 <LeaveCritical>
   170d0:	eafffffb 	b	170c4 <CTransportLayer::Listen(unsigned short, int)+0x114>
   170d4:	e30e168c 	movw	r1, #59020	; 0xe68c
   170d8:	e30e06c8 	movw	r0, #59080	; 0xe6c8
   170dc:	e3401002 	movt	r1, #2
   170e0:	e3400002 	movt	r0, #2
   170e4:	e3002132 	movw	r2, #306	; 0x132
   170e8:	eb0036ac 	bl	24ba0 <assertion_failed>
   170ec:	eafffff1 	b	170b8 <CTransportLayer::Listen(unsigned short, int)+0x108>
   170f0:	e30e168c 	movw	r1, #59020	; 0xe68c
   170f4:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   170f8:	e3401002 	movt	r1, #2
   170fc:	e3400002 	movt	r0, #2
   17100:	e3a02e13 	mov	r2, #304	; 0x130
   17104:	eb0036a5 	bl	24ba0 <assertion_failed>
   17108:	eaffffda 	b	17078 <CTransportLayer::Listen(unsigned short, int)+0xc8>
   1710c:	e30e168c 	movw	r1, #59020	; 0xe68c
   17110:	e30e0610 	movw	r0, #58896	; 0xe610
   17114:	e3401002 	movt	r1, #2
   17118:	e3400002 	movt	r0, #2
   1711c:	e300212f 	movw	r2, #303	; 0x12f
   17120:	eb00369e 	bl	24ba0 <assertion_failed>
   17124:	eaffffd0 	b	1706c <CTransportLayer::Listen(unsigned short, int)+0xbc>

00017128 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   17128:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1712c:	e2535000 	subs	r5, r3, #0
   17130:	e1a04000 	mov	r4, r0
   17134:	e1a06001 	mov	r6, r1
   17138:	e1a07002 	mov	r7, r2
   1713c:	ba00001a 	blt	171ac <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x84>
   17140:	e2844008 	add	r4, r4, #8
   17144:	e1a00004 	mov	r0, r4
   17148:	eb004725 	bl	28de4 <CPtrArray::GetCount() const>
   1714c:	e1550000 	cmp	r5, r0
   17150:	ba000001 	blt	1715c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x34>
   17154:	e3e00000 	mvn	r0, #0
   17158:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1715c:	e1a01005 	mov	r1, r5
   17160:	e1a00004 	mov	r0, r4
   17164:	eb004720 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17168:	e5903000 	ldr	r3, [r0]
   1716c:	e3530000 	cmp	r3, #0
   17170:	0afffff7 	beq	17154 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x2c>
   17174:	e3560000 	cmp	r6, #0
   17178:	0a000019 	beq	171e4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xbc>
   1717c:	e3570000 	cmp	r7, #0
   17180:	0a000010 	beq	171c8 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xa0>
   17184:	e1a01005 	mov	r1, r5
   17188:	e1a00004 	mov	r0, r4
   1718c:	eb004716 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17190:	e1a02007 	mov	r2, r7
   17194:	e1a01006 	mov	r1, r6
   17198:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1719c:	e5900000 	ldr	r0, [r0]
   171a0:	e5903000 	ldr	r3, [r0]
   171a4:	e593300c 	ldr	r3, [r3, #12]
   171a8:	e12fff13 	bx	r3
   171ac:	e30e168c 	movw	r1, #59020	; 0xe68c
   171b0:	e30e06e0 	movw	r0, #59104	; 0xe6e0
   171b4:	e3401002 	movt	r1, #2
   171b8:	e3400002 	movt	r0, #2
   171bc:	e300213b 	movw	r2, #315	; 0x13b
   171c0:	eb003676 	bl	24ba0 <assertion_failed>
   171c4:	eaffffdd 	b	17140 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x18>
   171c8:	e30e168c 	movw	r1, #59020	; 0xe68c
   171cc:	e30e064c 	movw	r0, #58956	; 0xe64c
   171d0:	e3401002 	movt	r1, #2
   171d4:	e3400002 	movt	r0, #2
   171d8:	e3002143 	movw	r2, #323	; 0x143
   171dc:	eb00366f 	bl	24ba0 <assertion_failed>
   171e0:	eaffffe7 	b	17184 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x5c>
   171e4:	e30e168c 	movw	r1, #59020	; 0xe68c
   171e8:	e30e063c 	movw	r0, #58940	; 0xe63c
   171ec:	e3401002 	movt	r1, #2
   171f0:	e3400002 	movt	r0, #2
   171f4:	e3002142 	movw	r2, #322	; 0x142
   171f8:	eb003668 	bl	24ba0 <assertion_failed>
   171fc:	eaffffde 	b	1717c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x54>

00017200 <CTransportLayer::Disconnect(int)>:
   17200:	e92d4070 	push	{r4, r5, r6, lr}
   17204:	e2515000 	subs	r5, r1, #0
   17208:	e1a04000 	mov	r4, r0
   1720c:	ba000014 	blt	17264 <CTransportLayer::Disconnect(int)+0x64>
   17210:	e2844008 	add	r4, r4, #8
   17214:	e1a00004 	mov	r0, r4
   17218:	eb0046f1 	bl	28de4 <CPtrArray::GetCount() const>
   1721c:	e1550000 	cmp	r5, r0
   17220:	ba000001 	blt	1722c <CTransportLayer::Disconnect(int)+0x2c>
   17224:	e3e00000 	mvn	r0, #0
   17228:	e8bd8070 	pop	{r4, r5, r6, pc}
   1722c:	e1a01005 	mov	r1, r5
   17230:	e1a00004 	mov	r0, r4
   17234:	eb0046ec 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17238:	e5903000 	ldr	r3, [r0]
   1723c:	e3530000 	cmp	r3, #0
   17240:	0afffff7 	beq	17224 <CTransportLayer::Disconnect(int)+0x24>
   17244:	e1a01005 	mov	r1, r5
   17248:	e1a00004 	mov	r0, r4
   1724c:	eb0046e6 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17250:	e8bd4070 	pop	{r4, r5, r6, lr}
   17254:	e5900000 	ldr	r0, [r0]
   17258:	e5903000 	ldr	r3, [r0]
   1725c:	e5933010 	ldr	r3, [r3, #16]
   17260:	e12fff13 	bx	r3
   17264:	e30e168c 	movw	r1, #59020	; 0xe68c
   17268:	e30e06e0 	movw	r0, #59104	; 0xe6e0
   1726c:	e3401002 	movt	r1, #2
   17270:	e3400002 	movt	r0, #2
   17274:	e3002149 	movw	r2, #329	; 0x149
   17278:	eb003648 	bl	24ba0 <assertion_failed>
   1727c:	eaffffe3 	b	17210 <CTransportLayer::Disconnect(int)+0x10>

00017280 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   17280:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17284:	e1a04000 	mov	r4, r0
   17288:	e59d5018 	ldr	r5, [sp, #24]
   1728c:	e1a06001 	mov	r6, r1
   17290:	e1a07002 	mov	r7, r2
   17294:	e1a08003 	mov	r8, r3
   17298:	e3550000 	cmp	r5, #0
   1729c:	ba000023 	blt	17330 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xb0>
   172a0:	e2844008 	add	r4, r4, #8
   172a4:	e1a00004 	mov	r0, r4
   172a8:	eb0046cd 	bl	28de4 <CPtrArray::GetCount() const>
   172ac:	e1550000 	cmp	r5, r0
   172b0:	ba000001 	blt	172bc <CTransportLayer::Send(void const*, unsigned int, int, int)+0x3c>
   172b4:	e3e00000 	mvn	r0, #0
   172b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   172bc:	e1a01005 	mov	r1, r5
   172c0:	e1a00004 	mov	r0, r4
   172c4:	eb0046c8 	bl	28dec <CPtrArray::operator[](unsigned int)>
   172c8:	e5903000 	ldr	r3, [r0]
   172cc:	e3530000 	cmp	r3, #0
   172d0:	0afffff7 	beq	172b4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x34>
   172d4:	e3560000 	cmp	r6, #0
   172d8:	0a00001b 	beq	1734c <CTransportLayer::Send(void const*, unsigned int, int, int)+0xcc>
   172dc:	e3570000 	cmp	r7, #0
   172e0:	0a00000b 	beq	17314 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x94>
   172e4:	e1a01005 	mov	r1, r5
   172e8:	e1a00004 	mov	r0, r4
   172ec:	eb0046be 	bl	28dec <CPtrArray::operator[](unsigned int)>
   172f0:	e1a03008 	mov	r3, r8
   172f4:	e1a02007 	mov	r2, r7
   172f8:	e1a01006 	mov	r1, r6
   172fc:	e5900000 	ldr	r0, [r0]
   17300:	e590c000 	ldr	ip, [r0]
   17304:	e59ce014 	ldr	lr, [ip, #20]
   17308:	e1a0c00e 	mov	ip, lr
   1730c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   17310:	e12fff1c 	bx	ip
   17314:	e30e168c 	movw	r1, #59020	; 0xe68c
   17318:	e30e0700 	movw	r0, #59136	; 0xe700
   1731c:	e3401002 	movt	r1, #2
   17320:	e3400002 	movt	r0, #2
   17324:	e300215d 	movw	r2, #349	; 0x15d
   17328:	eb00361c 	bl	24ba0 <assertion_failed>
   1732c:	eaffffec 	b	172e4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x64>
   17330:	e30e168c 	movw	r1, #59020	; 0xe68c
   17334:	e30e06e0 	movw	r0, #59104	; 0xe6e0
   17338:	e3401002 	movt	r1, #2
   1733c:	e3400002 	movt	r0, #2
   17340:	e3002155 	movw	r2, #341	; 0x155
   17344:	eb003615 	bl	24ba0 <assertion_failed>
   17348:	eaffffd4 	b	172a0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x20>
   1734c:	e30e168c 	movw	r1, #59020	; 0xe68c
   17350:	e30e06f4 	movw	r0, #59124	; 0xe6f4
   17354:	e3401002 	movt	r1, #2
   17358:	e3400002 	movt	r0, #2
   1735c:	e3a02f57 	mov	r2, #348	; 0x15c
   17360:	eb00360e 	bl	24ba0 <assertion_failed>
   17364:	eaffffdc 	b	172dc <CTransportLayer::Send(void const*, unsigned int, int, int)+0x5c>

00017368 <CTransportLayer::Receive(void*, int, int)>:
   17368:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1736c:	e2535000 	subs	r5, r3, #0
   17370:	e1a04000 	mov	r4, r0
   17374:	e1a06001 	mov	r6, r1
   17378:	e1a07002 	mov	r7, r2
   1737c:	ba000018 	blt	173e4 <CTransportLayer::Receive(void*, int, int)+0x7c>
   17380:	e2844008 	add	r4, r4, #8
   17384:	e1a00004 	mov	r0, r4
   17388:	eb004695 	bl	28de4 <CPtrArray::GetCount() const>
   1738c:	e1550000 	cmp	r5, r0
   17390:	ba000001 	blt	1739c <CTransportLayer::Receive(void*, int, int)+0x34>
   17394:	e3e00000 	mvn	r0, #0
   17398:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1739c:	e1a01005 	mov	r1, r5
   173a0:	e1a00004 	mov	r0, r4
   173a4:	eb004690 	bl	28dec <CPtrArray::operator[](unsigned int)>
   173a8:	e5903000 	ldr	r3, [r0]
   173ac:	e3530000 	cmp	r3, #0
   173b0:	0afffff7 	beq	17394 <CTransportLayer::Receive(void*, int, int)+0x2c>
   173b4:	e3560000 	cmp	r6, #0
   173b8:	0a000010 	beq	17400 <CTransportLayer::Receive(void*, int, int)+0x98>
   173bc:	e1a01005 	mov	r1, r5
   173c0:	e1a00004 	mov	r0, r4
   173c4:	eb004688 	bl	28dec <CPtrArray::operator[](unsigned int)>
   173c8:	e1a02007 	mov	r2, r7
   173cc:	e1a01006 	mov	r1, r6
   173d0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   173d4:	e5900000 	ldr	r0, [r0]
   173d8:	e5903000 	ldr	r3, [r0]
   173dc:	e5933018 	ldr	r3, [r3, #24]
   173e0:	e12fff13 	bx	r3
   173e4:	e30e168c 	movw	r1, #59020	; 0xe68c
   173e8:	e30e06e0 	movw	r0, #59104	; 0xe6e0
   173ec:	e3401002 	movt	r1, #2
   173f0:	e3400002 	movt	r0, #2
   173f4:	e3002163 	movw	r2, #355	; 0x163
   173f8:	eb0035e8 	bl	24ba0 <assertion_failed>
   173fc:	eaffffdf 	b	17380 <CTransportLayer::Receive(void*, int, int)+0x18>
   17400:	e30e168c 	movw	r1, #59020	; 0xe68c
   17404:	e30b0984 	movw	r0, #47492	; 0xb984
   17408:	e3401002 	movt	r1, #2
   1740c:	e3400002 	movt	r0, #2
   17410:	e300216a 	movw	r2, #362	; 0x16a
   17414:	eb0035e1 	bl	24ba0 <assertion_failed>
   17418:	eaffffe7 	b	173bc <CTransportLayer::Receive(void*, int, int)+0x54>

0001741c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   1741c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17420:	e1a04000 	mov	r4, r0
   17424:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   17428:	e1a06001 	mov	r6, r1
   1742c:	e1a07002 	mov	r7, r2
   17430:	e1a0a003 	mov	sl, r3
   17434:	e3550000 	cmp	r5, #0
   17438:	e59d8020 	ldr	r8, [sp, #32]
   1743c:	e1dd92b4 	ldrh	r9, [sp, #36]	; 0x24
   17440:	ba000025 	blt	174dc <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xc0>
   17444:	e2844008 	add	r4, r4, #8
   17448:	e1a00004 	mov	r0, r4
   1744c:	eb004664 	bl	28de4 <CPtrArray::GetCount() const>
   17450:	e1550000 	cmp	r5, r0
   17454:	ba000001 	blt	17460 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x44>
   17458:	e3e00000 	mvn	r0, #0
   1745c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17460:	e1a01005 	mov	r1, r5
   17464:	e1a00004 	mov	r0, r4
   17468:	eb00465f 	bl	28dec <CPtrArray::operator[](unsigned int)>
   1746c:	e5903000 	ldr	r3, [r0]
   17470:	e3530000 	cmp	r3, #0
   17474:	0afffff7 	beq	17458 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x3c>
   17478:	e3560000 	cmp	r6, #0
   1747c:	0a00001d 	beq	174f8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xdc>
   17480:	e3570000 	cmp	r7, #0
   17484:	0a00000d 	beq	174c0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xa4>
   17488:	e1a01005 	mov	r1, r5
   1748c:	e1a00004 	mov	r0, r4
   17490:	eb004655 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17494:	e1a0300a 	mov	r3, sl
   17498:	e1a02007 	mov	r2, r7
   1749c:	e1a01006 	mov	r1, r6
   174a0:	e5900000 	ldr	r0, [r0]
   174a4:	e590c000 	ldr	ip, [r0]
   174a8:	e58d9024 	str	r9, [sp, #36]	; 0x24
   174ac:	e58d8020 	str	r8, [sp, #32]
   174b0:	e59ce01c 	ldr	lr, [ip, #28]
   174b4:	e1a0c00e 	mov	ip, lr
   174b8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   174bc:	e12fff1c 	bx	ip
   174c0:	e30e168c 	movw	r1, #59020	; 0xe68c
   174c4:	e30e0700 	movw	r0, #59136	; 0xe700
   174c8:	e3401002 	movt	r1, #2
   174cc:	e3400002 	movt	r0, #2
   174d0:	e3002179 	movw	r2, #377	; 0x179
   174d4:	eb0035b1 	bl	24ba0 <assertion_failed>
   174d8:	eaffffea 	b	17488 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x6c>
   174dc:	e30e168c 	movw	r1, #59020	; 0xe68c
   174e0:	e30e06e0 	movw	r0, #59104	; 0xe6e0
   174e4:	e3401002 	movt	r1, #2
   174e8:	e3400002 	movt	r0, #2
   174ec:	e3002171 	movw	r2, #369	; 0x171
   174f0:	eb0035aa 	bl	24ba0 <assertion_failed>
   174f4:	eaffffd2 	b	17444 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x28>
   174f8:	e30e168c 	movw	r1, #59020	; 0xe68c
   174fc:	e30e06f4 	movw	r0, #59124	; 0xe6f4
   17500:	e3401002 	movt	r1, #2
   17504:	e3400002 	movt	r0, #2
   17508:	e3a02f5e 	mov	r2, #376	; 0x178
   1750c:	eb0035a3 	bl	24ba0 <assertion_failed>
   17510:	eaffffda 	b	17480 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x64>

00017514 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   17514:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17518:	e1a04000 	mov	r4, r0
   1751c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   17520:	e1a06001 	mov	r6, r1
   17524:	e1a07002 	mov	r7, r2
   17528:	e1a08003 	mov	r8, r3
   1752c:	e3550000 	cmp	r5, #0
   17530:	e59d9020 	ldr	r9, [sp, #32]
   17534:	ba00001b 	blt	175a8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x94>
   17538:	e2844008 	add	r4, r4, #8
   1753c:	e1a00004 	mov	r0, r4
   17540:	eb004627 	bl	28de4 <CPtrArray::GetCount() const>
   17544:	e1550000 	cmp	r5, r0
   17548:	ba000001 	blt	17554 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x40>
   1754c:	e3e00000 	mvn	r0, #0
   17550:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17554:	e1a01005 	mov	r1, r5
   17558:	e1a00004 	mov	r0, r4
   1755c:	eb004622 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17560:	e5903000 	ldr	r3, [r0]
   17564:	e3530000 	cmp	r3, #0
   17568:	0afffff7 	beq	1754c <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x38>
   1756c:	e3560000 	cmp	r6, #0
   17570:	0a000013 	beq	175c4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb0>
   17574:	e1a01005 	mov	r1, r5
   17578:	e1a00004 	mov	r0, r4
   1757c:	eb00461a 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17580:	e1a03008 	mov	r3, r8
   17584:	e1a02007 	mov	r2, r7
   17588:	e1a01006 	mov	r1, r6
   1758c:	e5900000 	ldr	r0, [r0]
   17590:	e590c000 	ldr	ip, [r0]
   17594:	e58d9020 	str	r9, [sp, #32]
   17598:	e59ce020 	ldr	lr, [ip, #32]
   1759c:	e1a0c00e 	mov	ip, lr
   175a0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   175a4:	e12fff1c 	bx	ip
   175a8:	e30e168c 	movw	r1, #59020	; 0xe68c
   175ac:	e30e06e0 	movw	r0, #59104	; 0xe6e0
   175b0:	e3401002 	movt	r1, #2
   175b4:	e3400002 	movt	r0, #2
   175b8:	e3002181 	movw	r2, #385	; 0x181
   175bc:	eb003577 	bl	24ba0 <assertion_failed>
   175c0:	eaffffdc 	b	17538 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x24>
   175c4:	e30e168c 	movw	r1, #59020	; 0xe68c
   175c8:	e30b0984 	movw	r0, #47492	; 0xb984
   175cc:	e3401002 	movt	r1, #2
   175d0:	e3400002 	movt	r0, #2
   175d4:	e3a02f62 	mov	r2, #392	; 0x188
   175d8:	eb003570 	bl	24ba0 <assertion_failed>
   175dc:	eaffffe4 	b	17574 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x60>

000175e0 <CTransportLayer::SetOptionBroadcast(int, int)>:
   175e0:	e92d4070 	push	{r4, r5, r6, lr}
   175e4:	e2525000 	subs	r5, r2, #0
   175e8:	e1a04000 	mov	r4, r0
   175ec:	e1a06001 	mov	r6, r1
   175f0:	ba000015 	blt	1764c <CTransportLayer::SetOptionBroadcast(int, int)+0x6c>
   175f4:	e2844008 	add	r4, r4, #8
   175f8:	e1a00004 	mov	r0, r4
   175fc:	eb0045f8 	bl	28de4 <CPtrArray::GetCount() const>
   17600:	e1550000 	cmp	r5, r0
   17604:	ba000001 	blt	17610 <CTransportLayer::SetOptionBroadcast(int, int)+0x30>
   17608:	e3e00000 	mvn	r0, #0
   1760c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17610:	e1a01005 	mov	r1, r5
   17614:	e1a00004 	mov	r0, r4
   17618:	eb0045f3 	bl	28dec <CPtrArray::operator[](unsigned int)>
   1761c:	e5903000 	ldr	r3, [r0]
   17620:	e3530000 	cmp	r3, #0
   17624:	0afffff7 	beq	17608 <CTransportLayer::SetOptionBroadcast(int, int)+0x28>
   17628:	e1a01005 	mov	r1, r5
   1762c:	e1a00004 	mov	r0, r4
   17630:	eb0045ed 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17634:	e1a01006 	mov	r1, r6
   17638:	e8bd4070 	pop	{r4, r5, r6, lr}
   1763c:	e5900000 	ldr	r0, [r0]
   17640:	e5903000 	ldr	r3, [r0]
   17644:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   17648:	e12fff13 	bx	r3
   1764c:	e30e168c 	movw	r1, #59020	; 0xe68c
   17650:	e30e06e0 	movw	r0, #59104	; 0xe6e0
   17654:	e3401002 	movt	r1, #2
   17658:	e3400002 	movt	r0, #2
   1765c:	e300218f 	movw	r2, #399	; 0x18f
   17660:	eb00354e 	bl	24ba0 <assertion_failed>
   17664:	eaffffe2 	b	175f4 <CTransportLayer::SetOptionBroadcast(int, int)+0x14>

00017668 <CTransportLayer::GetForeignIP(int) const>:
   17668:	e92d4070 	push	{r4, r5, r6, lr}
   1766c:	e2515000 	subs	r5, r1, #0
   17670:	e1a04000 	mov	r4, r0
   17674:	ba000010 	blt	176bc <CTransportLayer::GetForeignIP(int) const+0x54>
   17678:	e2844008 	add	r4, r4, #8
   1767c:	e1a00004 	mov	r0, r4
   17680:	eb0045d7 	bl	28de4 <CPtrArray::GetCount() const>
   17684:	e1550000 	cmp	r5, r0
   17688:	ba000001 	blt	17694 <CTransportLayer::GetForeignIP(int) const+0x2c>
   1768c:	e3a00000 	mov	r0, #0
   17690:	e8bd8070 	pop	{r4, r5, r6, pc}
   17694:	e1a01005 	mov	r1, r5
   17698:	e1a00004 	mov	r0, r4
   1769c:	eb0045fc 	bl	28e94 <CPtrArray::operator[](unsigned int) const>
   176a0:	e3500000 	cmp	r0, #0
   176a4:	0afffff8 	beq	1768c <CTransportLayer::GetForeignIP(int) const+0x24>
   176a8:	e1a01005 	mov	r1, r5
   176ac:	e1a00004 	mov	r0, r4
   176b0:	eb0045f7 	bl	28e94 <CPtrArray::operator[](unsigned int) const>
   176b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   176b8:	ea000a99 	b	1a124 <CNetConnection::GetForeignIP() const>
   176bc:	e30e168c 	movw	r1, #59020	; 0xe68c
   176c0:	e30e06e0 	movw	r0, #59104	; 0xe6e0
   176c4:	e3401002 	movt	r1, #2
   176c8:	e3400002 	movt	r0, #2
   176cc:	e300219b 	movw	r2, #411	; 0x19b
   176d0:	eb003532 	bl	24ba0 <assertion_failed>
   176d4:	eaffffe7 	b	17678 <CTransportLayer::GetForeignIP(int) const+0x10>

000176d8 <CTransportLayer::~CTransportLayer()>:
   176d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   176dc:	e30e768c 	movw	r7, #59020	; 0xe68c
   176e0:	e30e670c 	movw	r6, #59148	; 0xe70c
   176e4:	e2805008 	add	r5, r0, #8
   176e8:	e3407002 	movt	r7, #2
   176ec:	e3406002 	movt	r6, #2
   176f0:	e1a08000 	mov	r8, r0
   176f4:	e3a04000 	mov	r4, #0
   176f8:	e1a00005 	mov	r0, r5
   176fc:	eb0045b8 	bl	28de4 <CPtrArray::GetCount() const>
   17700:	e1a01004 	mov	r1, r4
   17704:	e1540000 	cmp	r4, r0
   17708:	e1a00005 	mov	r0, r5
   1770c:	e2844001 	add	r4, r4, #1
   17710:	2a000008 	bcs	17738 <CTransportLayer::~CTransportLayer()+0x60>
   17714:	eb0045b4 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17718:	e3a0202f 	mov	r2, #47	; 0x2f
   1771c:	e1a01007 	mov	r1, r7
   17720:	e5903000 	ldr	r3, [r0]
   17724:	e1a00006 	mov	r0, r6
   17728:	e3530000 	cmp	r3, #0
   1772c:	0afffff1 	beq	176f8 <CTransportLayer::~CTransportLayer()+0x20>
   17730:	eb00351a 	bl	24ba0 <assertion_failed>
   17734:	eaffffef 	b	176f8 <CTransportLayer::~CTransportLayer()+0x20>
   17738:	e5980020 	ldr	r0, [r8, #32]
   1773c:	e3500000 	cmp	r0, #0
   17740:	0a000000 	beq	17748 <CTransportLayer::~CTransportLayer()+0x70>
   17744:	eb002a16 	bl	21fa4 <operator delete[](void*)>
   17748:	e1a00008 	mov	r0, r8
   1774c:	e3a03000 	mov	r3, #0
   17750:	e5883020 	str	r3, [r8, #32]
   17754:	e5883004 	str	r3, [r8, #4]
   17758:	e4803024 	str	r3, [r0], #36	; 0x24
   1775c:	eb00173a 	bl	1d44c <CTCPRejector::~CTCPRejector()>
   17760:	e1a00005 	mov	r0, r5
   17764:	eb004593 	bl	28db8 <CPtrArray::~CPtrArray()>
   17768:	e1a00008 	mov	r0, r8
   1776c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00017770 <CTransportLayer::Process()>:
   17770:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17774:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   17778:	e28d6030 	add	r6, sp, #48	; 0x30
   1777c:	e1a07000 	mov	r7, r0
   17780:	e28d0028 	add	r0, sp, #40	; 0x28
   17784:	eb001881 	bl	1d990 <CIPAddress::CIPAddress()>
   17788:	e1a00006 	mov	r0, r6
   1778c:	eb00187f 	bl	1d990 <CIPAddress::CIPAddress()>
   17790:	e5973004 	ldr	r3, [r7, #4]
   17794:	e3530000 	cmp	r3, #0
   17798:	0a0000b9 	beq	17a84 <CTransportLayer::Process()+0x314>
   1779c:	e5971020 	ldr	r1, [r7, #32]
   177a0:	e3510000 	cmp	r1, #0
   177a4:	0a0000ae 	beq	17a64 <CTransportLayer::Process()+0x2f4>
   177a8:	e2874008 	add	r4, r7, #8
   177ac:	e28d8024 	add	r8, sp, #36	; 0x24
   177b0:	e2879024 	add	r9, r7, #36	; 0x24
   177b4:	e5970004 	ldr	r0, [r7, #4]
   177b8:	e28d3028 	add	r3, sp, #40	; 0x28
   177bc:	e58d8004 	str	r8, [sp, #4]
   177c0:	e28d2020 	add	r2, sp, #32
   177c4:	e58d6000 	str	r6, [sp]
   177c8:	eb00025c 	bl	18140 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   177cc:	e3500000 	cmp	r0, #0
   177d0:	0a000020 	beq	17858 <CTransportLayer::Process()+0xe8>
   177d4:	e3a05000 	mov	r5, #0
   177d8:	ea000012 	b	17828 <CTransportLayer::Process()+0xb8>
   177dc:	eb004582 	bl	28dec <CPtrArray::operator[](unsigned int)>
   177e0:	e1a01005 	mov	r1, r5
   177e4:	e5903000 	ldr	r3, [r0]
   177e8:	e1a00004 	mov	r0, r4
   177ec:	e3530000 	cmp	r3, #0
   177f0:	0a00000b 	beq	17824 <CTransportLayer::Process()+0xb4>
   177f4:	eb00457c 	bl	28dec <CPtrArray::operator[](unsigned int)>
   177f8:	e59de024 	ldr	lr, [sp, #36]	; 0x24
   177fc:	e5971020 	ldr	r1, [r7, #32]
   17800:	e28d3028 	add	r3, sp, #40	; 0x28
   17804:	e59d2020 	ldr	r2, [sp, #32]
   17808:	e5900000 	ldr	r0, [r0]
   1780c:	e590c000 	ldr	ip, [r0]
   17810:	e88d4040 	stm	sp, {r6, lr}
   17814:	e59ca030 	ldr	sl, [ip, #48]	; 0x30
   17818:	e12fff3a 	blx	sl
   1781c:	e3500000 	cmp	r0, #0
   17820:	1a000006 	bne	17840 <CTransportLayer::Process()+0xd0>
   17824:	e2855001 	add	r5, r5, #1
   17828:	e1a00004 	mov	r0, r4
   1782c:	eb00456c 	bl	28de4 <CPtrArray::GetCount() const>
   17830:	e1a01005 	mov	r1, r5
   17834:	e1550000 	cmp	r5, r0
   17838:	e1a00004 	mov	r0, r4
   1783c:	3affffe6 	bcc	177dc <CTransportLayer::Process()+0x6c>
   17840:	e1a00004 	mov	r0, r4
   17844:	eb004566 	bl	28de4 <CPtrArray::GetCount() const>
   17848:	e1550000 	cmp	r5, r0
   1784c:	2a00006b 	bcs	17a00 <CTransportLayer::Process()+0x290>
   17850:	e5971020 	ldr	r1, [r7, #32]
   17854:	eaffffd6 	b	177b4 <CTransportLayer::Process()+0x44>
   17858:	e28da01e 	add	sl, sp, #30
   1785c:	e28d301c 	add	r3, sp, #28
   17860:	e58d3014 	str	r3, [sp, #20]
   17864:	e59dc014 	ldr	ip, [sp, #20]
   17868:	e1a03006 	mov	r3, r6
   1786c:	e5970004 	ldr	r0, [r7, #4]
   17870:	e28d2028 	add	r2, sp, #40	; 0x28
   17874:	e58d8008 	str	r8, [sp, #8]
   17878:	e28d101b 	add	r1, sp, #27
   1787c:	e58da004 	str	sl, [sp, #4]
   17880:	e58dc000 	str	ip, [sp]
   17884:	eb000280 	bl	1828c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   17888:	e3500000 	cmp	r0, #0
   1788c:	0a00001e 	beq	1790c <CTransportLayer::Process()+0x19c>
   17890:	e3a05000 	mov	r5, #0
   17894:	e1a00004 	mov	r0, r4
   17898:	eb004551 	bl	28de4 <CPtrArray::GetCount() const>
   1789c:	e1a01005 	mov	r1, r5
   178a0:	e1550000 	cmp	r5, r0
   178a4:	e1a00004 	mov	r0, r4
   178a8:	2affffed 	bcs	17864 <CTransportLayer::Process()+0xf4>
   178ac:	eb00454e 	bl	28dec <CPtrArray::operator[](unsigned int)>
   178b0:	e1a01005 	mov	r1, r5
   178b4:	e2855001 	add	r5, r5, #1
   178b8:	e5903000 	ldr	r3, [r0]
   178bc:	e1a00004 	mov	r0, r4
   178c0:	e3530000 	cmp	r3, #0
   178c4:	0afffff2 	beq	17894 <CTransportLayer::Process()+0x124>
   178c8:	eb004547 	bl	28dec <CPtrArray::operator[](unsigned int)>
   178cc:	e1ddb1be 	ldrh	fp, [sp, #30]
   178d0:	e1dde1bc 	ldrh	lr, [sp, #28]
   178d4:	e1a03006 	mov	r3, r6
   178d8:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
   178dc:	e28d2028 	add	r2, sp, #40	; 0x28
   178e0:	e5dd101b 	ldrb	r1, [sp, #27]
   178e4:	e5900000 	ldr	r0, [r0]
   178e8:	e590c000 	ldr	ip, [r0]
   178ec:	e58d9008 	str	r9, [sp, #8]
   178f0:	e58db004 	str	fp, [sp, #4]
   178f4:	e58de000 	str	lr, [sp]
   178f8:	e59cb034 	ldr	fp, [ip, #52]	; 0x34
   178fc:	e12fff3b 	blx	fp
   17900:	e3500000 	cmp	r0, #0
   17904:	0affffe2 	beq	17894 <CTransportLayer::Process()+0x124>
   17908:	eaffffd5 	b	17864 <CTransportLayer::Process()+0xf4>
   1790c:	e1a05000 	mov	r5, r0
   17910:	e1a08000 	mov	r8, r0
   17914:	ea000005 	b	17930 <CTransportLayer::Process()+0x1c0>
   17918:	eb004533 	bl	28dec <CPtrArray::operator[](unsigned int)>
   1791c:	e5900000 	ldr	r0, [r0]
   17920:	e5903000 	ldr	r3, [r0]
   17924:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   17928:	e12fff33 	blx	r3
   1792c:	e2855001 	add	r5, r5, #1
   17930:	e1a00004 	mov	r0, r4
   17934:	eb00452a 	bl	28de4 <CPtrArray::GetCount() const>
   17938:	e1a01005 	mov	r1, r5
   1793c:	e1550000 	cmp	r5, r0
   17940:	e1a00004 	mov	r0, r4
   17944:	2a00001d 	bcs	179c0 <CTransportLayer::Process()+0x250>
   17948:	eb004527 	bl	28dec <CPtrArray::operator[](unsigned int)>
   1794c:	e1a01005 	mov	r1, r5
   17950:	e5903000 	ldr	r3, [r0]
   17954:	e1a00004 	mov	r0, r4
   17958:	e3530000 	cmp	r3, #0
   1795c:	0afffff2 	beq	1792c <CTransportLayer::Process()+0x1bc>
   17960:	eb004521 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17964:	e5900000 	ldr	r0, [r0]
   17968:	e5903000 	ldr	r3, [r0]
   1796c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   17970:	e12fff33 	blx	r3
   17974:	e1a01005 	mov	r1, r5
   17978:	e3500000 	cmp	r0, #0
   1797c:	e1a00004 	mov	r0, r4
   17980:	0affffe4 	beq	17918 <CTransportLayer::Process()+0x1a8>
   17984:	e1a01005 	mov	r1, r5
   17988:	e1a00004 	mov	r0, r4
   1798c:	eb004516 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17990:	e5903000 	ldr	r3, [r0]
   17994:	e3530000 	cmp	r3, #0
   17998:	e1a00003 	mov	r0, r3
   1799c:	0a000002 	beq	179ac <CTransportLayer::Process()+0x23c>
   179a0:	e5933000 	ldr	r3, [r3]
   179a4:	e5933004 	ldr	r3, [r3, #4]
   179a8:	e12fff33 	blx	r3
   179ac:	e1a01005 	mov	r1, r5
   179b0:	e1a00004 	mov	r0, r4
   179b4:	eb00450c 	bl	28dec <CPtrArray::operator[](unsigned int)>
   179b8:	e5808000 	str	r8, [r0]
   179bc:	eaffffda 	b	1792c <CTransportLayer::Process()+0x1bc>
   179c0:	e597001c 	ldr	r0, [r7, #28]
   179c4:	e3500000 	cmp	r0, #0
   179c8:	1a000023 	bne	17a5c <CTransportLayer::Process()+0x2ec>
   179cc:	e1a00004 	mov	r0, r4
   179d0:	eb004503 	bl	28de4 <CPtrArray::GetCount() const>
   179d4:	e3500000 	cmp	r0, #0
   179d8:	1a000012 	bne	17a28 <CTransportLayer::Process()+0x2b8>
   179dc:	e597301c 	ldr	r3, [r7, #28]
   179e0:	e3530000 	cmp	r3, #0
   179e4:	1a00000d 	bne	17a20 <CTransportLayer::Process()+0x2b0>
   179e8:	e1a00006 	mov	r0, r6
   179ec:	eb001800 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   179f0:	e28d0028 	add	r0, sp, #40	; 0x28
   179f4:	eb0017fe 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   179f8:	e28dd03c 	add	sp, sp, #60	; 0x3c
   179fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a00:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   17a04:	e28d3028 	add	r3, sp, #40	; 0x28
   17a08:	e5971020 	ldr	r1, [r7, #32]
   17a0c:	e1a00009 	mov	r0, r9
   17a10:	e59d2020 	ldr	r2, [sp, #32]
   17a14:	e88d1040 	stm	sp, {r6, ip}
   17a18:	eb0016f9 	bl	1d604 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   17a1c:	eaffff8b 	b	17850 <CTransportLayer::Process()+0xe0>
   17a20:	eb002996 	bl	22080 <LeaveCritical>
   17a24:	eaffffef 	b	179e8 <CTransportLayer::Process()+0x278>
   17a28:	e2405001 	sub	r5, r0, #1
   17a2c:	e1a01005 	mov	r1, r5
   17a30:	e1a00004 	mov	r0, r4
   17a34:	eb0044ec 	bl	28dec <CPtrArray::operator[](unsigned int)>
   17a38:	e5903000 	ldr	r3, [r0]
   17a3c:	e3530000 	cmp	r3, #0
   17a40:	1affffe5 	bne	179dc <CTransportLayer::Process()+0x26c>
   17a44:	e2455001 	sub	r5, r5, #1
   17a48:	e1a00004 	mov	r0, r4
   17a4c:	eb00458a 	bl	2907c <CPtrArray::RemoveLast()>
   17a50:	e3750001 	cmn	r5, #1
   17a54:	0affffe0 	beq	179dc <CTransportLayer::Process()+0x26c>
   17a58:	eafffff3 	b	17a2c <CTransportLayer::Process()+0x2bc>
   17a5c:	eb002959 	bl	21fc8 <EnterCritical>
   17a60:	eaffffd9 	b	179cc <CTransportLayer::Process()+0x25c>
   17a64:	e30e168c 	movw	r1, #59020	; 0xe68c
   17a68:	e30c0424 	movw	r0, #50212	; 0xc424
   17a6c:	e3401002 	movt	r1, #2
   17a70:	e3400002 	movt	r0, #2
   17a74:	e3a0204a 	mov	r2, #74	; 0x4a
   17a78:	eb003448 	bl	24ba0 <assertion_failed>
   17a7c:	e5971020 	ldr	r1, [r7, #32]
   17a80:	eaffff48 	b	177a8 <CTransportLayer::Process()+0x38>
   17a84:	e30e168c 	movw	r1, #59020	; 0xe68c
   17a88:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   17a8c:	e3401002 	movt	r1, #2
   17a90:	e3400002 	movt	r0, #2
   17a94:	e3a02049 	mov	r2, #73	; 0x49
   17a98:	eb003440 	bl	24ba0 <assertion_failed>
   17a9c:	eaffff3e 	b	1779c <CTransportLayer::Process()+0x2c>

00017aa0 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   17aa0:	e92d4070 	push	{r4, r5, r6, lr}
   17aa4:	e1a04000 	mov	r4, r0
   17aa8:	e5801000 	str	r1, [r0]
   17aac:	e3a05000 	mov	r5, #0
   17ab0:	e280000c 	add	r0, r0, #12
   17ab4:	e9840024 	stmib	r4, {r2, r5}
   17ab8:	eb00191f 	bl	1df3c <CNetQueue::CNetQueue()>
   17abc:	e2840018 	add	r0, r4, #24
   17ac0:	eb00191d 	bl	1df3c <CNetQueue::CNetQueue()>
   17ac4:	e2840024 	add	r0, r4, #36	; 0x24
   17ac8:	eb00191b 	bl	1df3c <CNetQueue::CNetQueue()>
   17acc:	e2840030 	add	r0, r4, #48	; 0x30
   17ad0:	eb000882 	bl	19ce0 <CRouteCache::CRouteCache()>
   17ad4:	e5943000 	ldr	r3, [r4]
   17ad8:	e5845040 	str	r5, [r4, #64]	; 0x40
   17adc:	e1530005 	cmp	r3, r5
   17ae0:	0a00000c 	beq	17b18 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x78>
   17ae4:	e5943004 	ldr	r3, [r4, #4]
   17ae8:	e3530000 	cmp	r3, #0
   17aec:	0a000001 	beq	17af8 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x58>
   17af0:	e1a00004 	mov	r0, r4
   17af4:	e8bd8070 	pop	{r4, r5, r6, pc}
   17af8:	e3a02021 	mov	r2, #33	; 0x21
   17afc:	e30e1724 	movw	r1, #59172	; 0xe724
   17b00:	e30e0738 	movw	r0, #59192	; 0xe738
   17b04:	e3401002 	movt	r1, #2
   17b08:	e3400002 	movt	r0, #2
   17b0c:	eb003423 	bl	24ba0 <assertion_failed>
   17b10:	e1a00004 	mov	r0, r4
   17b14:	e8bd8070 	pop	{r4, r5, r6, pc}
   17b18:	e30e1724 	movw	r1, #59172	; 0xe724
   17b1c:	e30e0610 	movw	r0, #58896	; 0xe610
   17b20:	e3401002 	movt	r1, #2
   17b24:	e3400002 	movt	r0, #2
   17b28:	e3a02020 	mov	r2, #32
   17b2c:	eb00341b 	bl	24ba0 <assertion_failed>
   17b30:	eaffffeb 	b	17ae4 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x44>

00017b34 <CNetworkLayer::~CNetworkLayer()>:
   17b34:	e92d4070 	push	{r4, r5, r6, lr}
   17b38:	e3a01001 	mov	r1, #1
   17b3c:	e1a04000 	mov	r4, r0
   17b40:	e5900040 	ldr	r0, [r0, #64]	; 0x40
   17b44:	eb002917 	bl	21fa8 <operator delete(void*, unsigned int)>
   17b48:	e5945008 	ldr	r5, [r4, #8]
   17b4c:	e3a03000 	mov	r3, #0
   17b50:	e5843040 	str	r3, [r4, #64]	; 0x40
   17b54:	e1550003 	cmp	r5, r3
   17b58:	0a000004 	beq	17b70 <CNetworkLayer::~CNetworkLayer()+0x3c>
   17b5c:	e1a00005 	mov	r0, r5
   17b60:	eb00070d 	bl	1979c <CICMPHandler::~CICMPHandler()>
   17b64:	e1a00005 	mov	r0, r5
   17b68:	e3a01014 	mov	r1, #20
   17b6c:	eb00290d 	bl	21fa8 <operator delete(void*, unsigned int)>
   17b70:	e1a00004 	mov	r0, r4
   17b74:	e3a03000 	mov	r3, #0
   17b78:	e5843008 	str	r3, [r4, #8]
   17b7c:	e5843004 	str	r3, [r4, #4]
   17b80:	e4803030 	str	r3, [r0], #48	; 0x30
   17b84:	eb00086e 	bl	19d44 <CRouteCache::~CRouteCache()>
   17b88:	e2840024 	add	r0, r4, #36	; 0x24
   17b8c:	eb00192e 	bl	1e04c <CNetQueue::~CNetQueue()>
   17b90:	e2840018 	add	r0, r4, #24
   17b94:	eb00192c 	bl	1e04c <CNetQueue::~CNetQueue()>
   17b98:	e284000c 	add	r0, r4, #12
   17b9c:	eb00192a 	bl	1e04c <CNetQueue::~CNetQueue()>
   17ba0:	e1a00004 	mov	r0, r4
   17ba4:	e8bd8070 	pop	{r4, r5, r6, pc}

00017ba8 <CNetworkLayer::Initialize()>:
   17ba8:	e5903008 	ldr	r3, [r0, #8]
   17bac:	e92d4030 	push	{r4, r5, lr}
   17bb0:	e3530000 	cmp	r3, #0
   17bb4:	e24dd00c 	sub	sp, sp, #12
   17bb8:	e1a04000 	mov	r4, r0
   17bbc:	0a000005 	beq	17bd8 <CNetworkLayer::Initialize()+0x30>
   17bc0:	e30e1724 	movw	r1, #59172	; 0xe724
   17bc4:	e30e074c 	movw	r0, #59212	; 0xe74c
   17bc8:	e3401002 	movt	r1, #2
   17bcc:	e3400002 	movt	r0, #2
   17bd0:	e3a02032 	mov	r2, #50	; 0x32
   17bd4:	eb0033f1 	bl	24ba0 <assertion_failed>
   17bd8:	e3a00014 	mov	r0, #20
   17bdc:	eb0028ed 	bl	21f98 <operator new(unsigned int)>
   17be0:	e1a0c004 	mov	ip, r4
   17be4:	e49c1024 	ldr	r1, [ip], #36	; 0x24
   17be8:	e2843018 	add	r3, r4, #24
   17bec:	e1a02004 	mov	r2, r4
   17bf0:	e58dc000 	str	ip, [sp]
   17bf4:	e1a05000 	mov	r5, r0
   17bf8:	eb0006ae 	bl	196b8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   17bfc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   17c00:	e5845008 	str	r5, [r4, #8]
   17c04:	e3530000 	cmp	r3, #0
   17c08:	0a00000b 	beq	17c3c <CNetworkLayer::Initialize()+0x94>
   17c0c:	e3a02036 	mov	r2, #54	; 0x36
   17c10:	e30e1724 	movw	r1, #59172	; 0xe724
   17c14:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   17c18:	e3401002 	movt	r1, #2
   17c1c:	e3400002 	movt	r0, #2
   17c20:	eb0033de 	bl	24ba0 <assertion_failed>
   17c24:	e3a00d19 	mov	r0, #1600	; 0x640
   17c28:	eb0028db 	bl	21f9c <operator new[](unsigned int)>
   17c2c:	e5840040 	str	r0, [r4, #64]	; 0x40
   17c30:	e3a00001 	mov	r0, #1
   17c34:	e28dd00c 	add	sp, sp, #12
   17c38:	e8bd8030 	pop	{r4, r5, pc}
   17c3c:	e3a00d19 	mov	r0, #1600	; 0x640
   17c40:	eb0028d5 	bl	21f9c <operator new[](unsigned int)>
   17c44:	e5840040 	str	r0, [r4, #64]	; 0x40
   17c48:	e3a00001 	mov	r0, #1
   17c4c:	e28dd00c 	add	sp, sp, #12
   17c50:	e8bd8030 	pop	{r4, r5, pc}

00017c54 <CNetworkLayer::Process()>:
   17c54:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   17c58:	e1a05000 	mov	r5, r0
   17c5c:	e5900000 	ldr	r0, [r0]
   17c60:	e24dd014 	sub	sp, sp, #20
   17c64:	e3500000 	cmp	r0, #0
   17c68:	0a000083 	beq	17e7c <CNetworkLayer::Process()+0x228>
   17c6c:	eb0016eb 	bl	1d820 <CNetConfig::GetIPAddress() const>
   17c70:	e2506000 	subs	r6, r0, #0
   17c74:	0a000072 	beq	17e44 <CNetworkLayer::Process()+0x1f0>
   17c78:	e5953040 	ldr	r3, [r5, #64]	; 0x40
   17c7c:	e3530000 	cmp	r3, #0
   17c80:	0a000076 	beq	17e60 <CNetworkLayer::Process()+0x20c>
   17c84:	e5950004 	ldr	r0, [r5, #4]
   17c88:	e3500000 	cmp	r0, #0
   17c8c:	0a000064 	beq	17e24 <CNetworkLayer::Process()+0x1d0>
   17c90:	e5951040 	ldr	r1, [r5, #64]	; 0x40
   17c94:	ea000007 	b	17cb8 <CNetworkLayer::Process()+0x64>
   17c98:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   17c9c:	e5d42000 	ldrb	r2, [r4]
   17ca0:	e202200f 	and	r2, r2, #15
   17ca4:	e2421005 	sub	r1, r2, #5
   17ca8:	e3510001 	cmp	r1, #1
   17cac:	9a00000a 	bls	17cdc <CNetworkLayer::Process()+0x88>
   17cb0:	e1a01004 	mov	r1, r4
   17cb4:	e5950004 	ldr	r0, [r5, #4]
   17cb8:	e28d2004 	add	r2, sp, #4
   17cbc:	eb000340 	bl	189c4 <CLinkLayer::Receive(void*, unsigned int*)>
   17cc0:	e3500000 	cmp	r0, #0
   17cc4:	0a000046 	beq	17de4 <CNetworkLayer::Process()+0x190>
   17cc8:	e59d3004 	ldr	r3, [sp, #4]
   17ccc:	e3530014 	cmp	r3, #20
   17cd0:	8afffff0 	bhi	17c98 <CNetworkLayer::Process()+0x44>
   17cd4:	e5951040 	ldr	r1, [r5, #64]	; 0x40
   17cd8:	eafffff5 	b	17cb4 <CNetworkLayer::Process()+0x60>
   17cdc:	e1a07102 	lsl	r7, r2, #2
   17ce0:	e1530007 	cmp	r3, r7
   17ce4:	9afffff1 	bls	17cb0 <CNetworkLayer::Process()+0x5c>
   17ce8:	e1a01007 	mov	r1, r7
   17cec:	e1a00004 	mov	r0, r4
   17cf0:	eb001a06 	bl	1e510 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   17cf4:	e3500000 	cmp	r0, #0
   17cf8:	1afffff5 	bne	17cd4 <CNetworkLayer::Process()+0x80>
   17cfc:	e5d43000 	ldrb	r3, [r4]
   17d00:	e1a03243 	asr	r3, r3, #4
   17d04:	e3530004 	cmp	r3, #4
   17d08:	1afffff1 	bne	17cd4 <CNetworkLayer::Process()+0x80>
   17d0c:	e2848010 	add	r8, r4, #16
   17d10:	e28d0008 	add	r0, sp, #8
   17d14:	e1a01008 	mov	r1, r8
   17d18:	eb0017ca 	bl	1dc48 <CIPAddress::CIPAddress(unsigned char const*)>
   17d1c:	e1a00006 	mov	r0, r6
   17d20:	eb001817 	bl	1dd84 <CIPAddress::IsNull() const>
   17d24:	e3500000 	cmp	r0, #0
   17d28:	1a00005b 	bne	17e9c <CNetworkLayer::Process()+0x248>
   17d2c:	e28d1008 	add	r1, sp, #8
   17d30:	e1a00006 	mov	r0, r6
   17d34:	eb00174b 	bl	1da68 <CIPAddress::operator!=(CIPAddress const&) const>
   17d38:	e3500000 	cmp	r0, #0
   17d3c:	1a00005b 	bne	17eb0 <CNetworkLayer::Process()+0x25c>
   17d40:	e1d430b6 	ldrh	r3, [r4, #6]
   17d44:	e3130020 	tst	r3, #32
   17d48:	1a000021 	bne	17dd4 <CNetworkLayer::Process()+0x180>
   17d4c:	e6bf3fb3 	rev16	r3, r3
   17d50:	e2033c1f 	and	r3, r3, #7936	; 0x1f00
   17d54:	e3530000 	cmp	r3, #0
   17d58:	1a00001d 	bne	17dd4 <CNetworkLayer::Process()+0x180>
   17d5c:	e1d430b2 	ldrh	r3, [r4, #2]
   17d60:	e59d2004 	ldr	r2, [sp, #4]
   17d64:	e6bf3fb3 	rev16	r3, r3
   17d68:	e6ff3073 	uxth	r3, r3
   17d6c:	e1530002 	cmp	r3, r2
   17d70:	8a000017 	bhi	17dd4 <CNetworkLayer::Process()+0x180>
   17d74:	e3a00009 	mov	r0, #9
   17d78:	e58d3004 	str	r3, [sp, #4]
   17d7c:	eb002885 	bl	21f98 <operator new(unsigned int)>
   17d80:	e5d43009 	ldrb	r3, [r4, #9]
   17d84:	e3a02004 	mov	r2, #4
   17d88:	e284100c 	add	r1, r4, #12
   17d8c:	e1a09000 	mov	r9, r0
   17d90:	e4c03001 	strb	r3, [r0], #1
   17d94:	eb002d0b 	bl	231c8 <memcpy>
   17d98:	e1a01008 	mov	r1, r8
   17d9c:	e3a02004 	mov	r2, #4
   17da0:	e2890005 	add	r0, r9, #5
   17da4:	eb002d07 	bl	231c8 <memcpy>
   17da8:	e5d43009 	ldrb	r3, [r4, #9]
   17dac:	e59d2004 	ldr	r2, [sp, #4]
   17db0:	e5951040 	ldr	r1, [r5, #64]	; 0x40
   17db4:	e3530001 	cmp	r3, #1
   17db8:	e0422007 	sub	r2, r2, r7
   17dbc:	e1a03009 	mov	r3, r9
   17dc0:	02850018 	addeq	r0, r5, #24
   17dc4:	1285000c 	addne	r0, r5, #12
   17dc8:	e0811007 	add	r1, r1, r7
   17dcc:	e58d2004 	str	r2, [sp, #4]
   17dd0:	eb0018a2 	bl	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   17dd4:	e28d0008 	add	r0, sp, #8
   17dd8:	eb001705 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   17ddc:	e5951040 	ldr	r1, [r5, #64]	; 0x40
   17de0:	eaffffb3 	b	17cb4 <CNetworkLayer::Process()+0x60>
   17de4:	e5950008 	ldr	r0, [r5, #8]
   17de8:	e3500000 	cmp	r0, #0
   17dec:	0a000002 	beq	17dfc <CNetworkLayer::Process()+0x1a8>
   17df0:	eb0006b4 	bl	198c8 <CICMPHandler::Process()>
   17df4:	e28dd014 	add	sp, sp, #20
   17df8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17dfc:	e3a02092 	mov	r2, #146	; 0x92
   17e00:	e30e1724 	movw	r1, #59172	; 0xe724
   17e04:	e30e0774 	movw	r0, #59252	; 0xe774
   17e08:	e3401002 	movt	r1, #2
   17e0c:	e3400002 	movt	r0, #2
   17e10:	eb003362 	bl	24ba0 <assertion_failed>
   17e14:	e5950008 	ldr	r0, [r5, #8]
   17e18:	eb0006aa 	bl	198c8 <CICMPHandler::Process()>
   17e1c:	e28dd014 	add	sp, sp, #20
   17e20:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17e24:	e30e1724 	movw	r1, #59172	; 0xe724
   17e28:	e30e0738 	movw	r0, #59192	; 0xe738
   17e2c:	e3401002 	movt	r1, #2
   17e30:	e3400002 	movt	r0, #2
   17e34:	e3a02045 	mov	r2, #69	; 0x45
   17e38:	eb003358 	bl	24ba0 <assertion_failed>
   17e3c:	e5950004 	ldr	r0, [r5, #4]
   17e40:	eaffff92 	b	17c90 <CNetworkLayer::Process()+0x3c>
   17e44:	e30e1724 	movw	r1, #59172	; 0xe724
   17e48:	e30e0760 	movw	r0, #59232	; 0xe760
   17e4c:	e3401002 	movt	r1, #2
   17e50:	e3400002 	movt	r0, #2
   17e54:	e3a02041 	mov	r2, #65	; 0x41
   17e58:	eb003350 	bl	24ba0 <assertion_failed>
   17e5c:	eaffff85 	b	17c78 <CNetworkLayer::Process()+0x24>
   17e60:	e30e1724 	movw	r1, #59172	; 0xe724
   17e64:	e30c0424 	movw	r0, #50212	; 0xc424
   17e68:	e3401002 	movt	r1, #2
   17e6c:	e3400002 	movt	r0, #2
   17e70:	e3a02044 	mov	r2, #68	; 0x44
   17e74:	eb003349 	bl	24ba0 <assertion_failed>
   17e78:	eaffff81 	b	17c84 <CNetworkLayer::Process()+0x30>
   17e7c:	e30e1724 	movw	r1, #59172	; 0xe724
   17e80:	e30e0610 	movw	r0, #58896	; 0xe610
   17e84:	e3401002 	movt	r1, #2
   17e88:	e3400002 	movt	r0, #2
   17e8c:	e3a0203f 	mov	r2, #63	; 0x3f
   17e90:	eb003342 	bl	24ba0 <assertion_failed>
   17e94:	e5950000 	ldr	r0, [r5]
   17e98:	eaffff73 	b	17c6c <CNetworkLayer::Process()+0x18>
   17e9c:	e28d0008 	add	r0, sp, #8
   17ea0:	eb0017c6 	bl	1ddc0 <CIPAddress::IsBroadcast() const>
   17ea4:	e3500000 	cmp	r0, #0
   17ea8:	0affffc9 	beq	17dd4 <CNetworkLayer::Process()+0x180>
   17eac:	eaffffa3 	b	17d40 <CNetworkLayer::Process()+0xec>
   17eb0:	e28d0008 	add	r0, sp, #8
   17eb4:	eb0017c1 	bl	1ddc0 <CIPAddress::IsBroadcast() const>
   17eb8:	e3500000 	cmp	r0, #0
   17ebc:	1affff9f 	bne	17d40 <CNetworkLayer::Process()+0xec>
   17ec0:	e5950000 	ldr	r0, [r5]
   17ec4:	eb00165f 	bl	1d848 <CNetConfig::GetBroadcastAddress() const>
   17ec8:	e28d1008 	add	r1, sp, #8
   17ecc:	eb0016e5 	bl	1da68 <CIPAddress::operator!=(CIPAddress const&) const>
   17ed0:	e3500000 	cmp	r0, #0
   17ed4:	1affffbe 	bne	17dd4 <CNetworkLayer::Process()+0x180>
   17ed8:	eaffff98 	b	17d40 <CNetworkLayer::Process()+0xec>

00017edc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   17edc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ee0:	e243e001 	sub	lr, r3, #1
   17ee4:	e300c62b 	movw	ip, #1579	; 0x62b
   17ee8:	e15e000c 	cmp	lr, ip
   17eec:	e24dd00c 	sub	sp, sp, #12
   17ef0:	83a07000 	movhi	r7, #0
   17ef4:	9a000002 	bls	17f04 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x28>
   17ef8:	e1a00007 	mov	r0, r7
   17efc:	e28dd00c 	add	sp, sp, #12
   17f00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f04:	e283a014 	add	sl, r3, #20
   17f08:	e1a09000 	mov	r9, r0
   17f0c:	e1a08002 	mov	r8, r2
   17f10:	e1a05003 	mov	r5, r3
   17f14:	e1a0000a 	mov	r0, sl
   17f18:	e1a06001 	mov	r6, r1
   17f1c:	eb00281e 	bl	21f9c <operator new[](unsigned int)>
   17f20:	e5dd2030 	ldrb	r2, [sp, #48]	; 0x30
   17f24:	e3a03045 	mov	r3, #69	; 0x45
   17f28:	e1a04000 	mov	r4, r0
   17f2c:	e5990000 	ldr	r0, [r9]
   17f30:	e5c43000 	strb	r3, [r4]
   17f34:	e6bf3fba 	rev16	r3, sl
   17f38:	e3500000 	cmp	r0, #0
   17f3c:	e1c430b2 	strh	r3, [r4, #2]
   17f40:	e5c42009 	strb	r2, [r4, #9]
   17f44:	e3a03000 	mov	r3, #0
   17f48:	e5c43001 	strb	r3, [r4, #1]
   17f4c:	e5c43004 	strb	r3, [r4, #4]
   17f50:	e5c43005 	strb	r3, [r4, #5]
   17f54:	e5c43007 	strb	r3, [r4, #7]
   17f58:	e3a03040 	mov	r3, #64	; 0x40
   17f5c:	e5c43006 	strb	r3, [r4, #6]
   17f60:	e5c43008 	strb	r3, [r4, #8]
   17f64:	0a000046 	beq	18084 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1a8>
   17f68:	eb00162c 	bl	1d820 <CNetConfig::GetIPAddress() const>
   17f6c:	e250b000 	subs	fp, r0, #0
   17f70:	0a00004b 	beq	180a4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c8>
   17f74:	e1a0000b 	mov	r0, fp
   17f78:	eb001781 	bl	1dd84 <CIPAddress::IsNull() const>
   17f7c:	e3500000 	cmp	r0, #0
   17f80:	1a00002b 	bne	18034 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x158>
   17f84:	e284100c 	add	r1, r4, #12
   17f88:	e1a0000b 	mov	r0, fp
   17f8c:	eb001760 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   17f90:	e2841010 	add	r1, r4, #16
   17f94:	e1a00006 	mov	r0, r6
   17f98:	eb00175d 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   17f9c:	e3a01014 	mov	r1, #20
   17fa0:	e1a00004 	mov	r0, r4
   17fa4:	e3a03000 	mov	r3, #0
   17fa8:	e5c4300a 	strb	r3, [r4, #10]
   17fac:	e5c4300b 	strb	r3, [r4, #11]
   17fb0:	eb001956 	bl	1e510 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   17fb4:	e3580000 	cmp	r8, #0
   17fb8:	e1c400ba 	strh	r0, [r4, #10]
   17fbc:	0a00003f 	beq	180c0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1e4>
   17fc0:	e1a02005 	mov	r2, r5
   17fc4:	e1a01008 	mov	r1, r8
   17fc8:	e2840014 	add	r0, r4, #20
   17fcc:	eb002c7d 	bl	231c8 <memcpy>
   17fd0:	e1a0000d 	mov	r0, sp
   17fd4:	eb00166d 	bl	1d990 <CIPAddress::CIPAddress()>
   17fd8:	e5990000 	ldr	r0, [r9]
   17fdc:	eb001613 	bl	1d830 <CNetConfig::GetNetMask() const>
   17fe0:	e1a01006 	mov	r1, r6
   17fe4:	e1a02000 	mov	r2, r0
   17fe8:	e1a0000b 	mov	r0, fp
   17fec:	eb00179e 	bl	1de6c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   17ff0:	e2507000 	subs	r7, r0, #0
   17ff4:	0a000017 	beq	18058 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x17c>
   17ff8:	e5990004 	ldr	r0, [r9, #4]
   17ffc:	e3500000 	cmp	r0, #0
   18000:	0a00003e 	beq	18100 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x224>
   18004:	e1a0300a 	mov	r3, sl
   18008:	e1a01006 	mov	r1, r6
   1800c:	e1a02004 	mov	r2, r4
   18010:	eb0001f8 	bl	187f8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   18014:	e1a07000 	mov	r7, r0
   18018:	e1a00004 	mov	r0, r4
   1801c:	eb0027e0 	bl	21fa4 <operator delete[](void*)>
   18020:	e1a0000d 	mov	r0, sp
   18024:	eb001672 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   18028:	e1a00007 	mov	r0, r7
   1802c:	e28dd00c 	add	sp, sp, #12
   18030:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18034:	e1a00006 	mov	r0, r6
   18038:	eb001760 	bl	1ddc0 <CIPAddress::IsBroadcast() const>
   1803c:	e2507000 	subs	r7, r0, #0
   18040:	1affffcf 	bne	17f84 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0xa8>
   18044:	e1a00004 	mov	r0, r4
   18048:	eb0027d5 	bl	21fa4 <operator delete[](void*)>
   1804c:	e1a00007 	mov	r0, r7
   18050:	e28dd00c 	add	sp, sp, #12
   18054:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18058:	e1a00006 	mov	r0, r6
   1805c:	eb00171f 	bl	1dce0 <CIPAddress::Get() const>
   18060:	e1a01000 	mov	r1, r0
   18064:	e2890030 	add	r0, r9, #48	; 0x30
   18068:	eb00077f 	bl	19e6c <CRouteCache::GetRoute(unsigned char const*) const>
   1806c:	e2501000 	subs	r1, r0, #0
   18070:	0a000019 	beq	180dc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x200>
   18074:	e1a0000d 	mov	r0, sp
   18078:	e1a0600d 	mov	r6, sp
   1807c:	eb0016df 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   18080:	eaffffdc 	b	17ff8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x11c>
   18084:	e30e1724 	movw	r1, #59172	; 0xe724
   18088:	e30e0610 	movw	r0, #58896	; 0xe610
   1808c:	e3401002 	movt	r1, #2
   18090:	e3400002 	movt	r0, #2
   18094:	e3a020ab 	mov	r2, #171	; 0xab
   18098:	eb0032c0 	bl	24ba0 <assertion_failed>
   1809c:	e5990000 	ldr	r0, [r9]
   180a0:	eaffffb0 	b	17f68 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x8c>
   180a4:	e30e1724 	movw	r1, #59172	; 0xe724
   180a8:	e30e0760 	movw	r0, #59232	; 0xe760
   180ac:	e3401002 	movt	r1, #2
   180b0:	e3400002 	movt	r0, #2
   180b4:	e3a020ad 	mov	r2, #173	; 0xad
   180b8:	eb0032b8 	bl	24ba0 <assertion_failed>
   180bc:	eaffffac 	b	17f74 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x98>
   180c0:	e30e1724 	movw	r1, #59172	; 0xe724
   180c4:	e30e0788 	movw	r0, #59272	; 0xe788
   180c8:	e3401002 	movt	r1, #2
   180cc:	e3400002 	movt	r0, #2
   180d0:	e3a020bf 	mov	r2, #191	; 0xbf
   180d4:	eb0032b1 	bl	24ba0 <assertion_failed>
   180d8:	eaffffb8 	b	17fc0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0xe4>
   180dc:	e5990000 	ldr	r0, [r9]
   180e0:	eb0015d4 	bl	1d838 <CNetConfig::GetDefaultGateway() const>
   180e4:	e1a06000 	mov	r6, r0
   180e8:	eb001725 	bl	1dd84 <CIPAddress::IsNull() const>
   180ec:	e3500000 	cmp	r0, #0
   180f0:	1affffc8 	bne	18018 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x13c>
   180f4:	e5993004 	ldr	r3, [r9, #4]
   180f8:	e3530000 	cmp	r3, #0
   180fc:	1a000005 	bne	18118 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x23c>
   18100:	e30e1724 	movw	r1, #59172	; 0xe724
   18104:	e30e0738 	movw	r0, #59192	; 0xe738
   18108:	e3401002 	movt	r1, #2
   1810c:	e3400002 	movt	r0, #2
   18110:	e3a020db 	mov	r2, #219	; 0xdb
   18114:	eb0032a1 	bl	24ba0 <assertion_failed>
   18118:	e3560000 	cmp	r6, #0
   1811c:	1a000005 	bne	18138 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x25c>
   18120:	e30e1724 	movw	r1, #59172	; 0xe724
   18124:	e30e0798 	movw	r0, #59288	; 0xe798
   18128:	e3401002 	movt	r1, #2
   1812c:	e3400002 	movt	r0, #2
   18130:	e3a020dc 	mov	r2, #220	; 0xdc
   18134:	eb003299 	bl	24ba0 <assertion_failed>
   18138:	e5990004 	ldr	r0, [r9, #4]
   1813c:	eaffffb0 	b	18004 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x128>

00018140 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   18140:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18144:	e2518000 	subs	r8, r1, #0
   18148:	e24dd008 	sub	sp, sp, #8
   1814c:	e1a07000 	mov	r7, r0
   18150:	e1a04002 	mov	r4, r2
   18154:	e1a05003 	mov	r5, r3
   18158:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   1815c:	0a000020 	beq	181e4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa4>
   18160:	e3540000 	cmp	r4, #0
   18164:	0a000025 	beq	18200 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xc0>
   18168:	e1a01008 	mov	r1, r8
   1816c:	e287000c 	add	r0, r7, #12
   18170:	e28d2004 	add	r2, sp, #4
   18174:	eb00180a 	bl	1e1a4 <CNetQueue::Dequeue(void*, void**)>
   18178:	e3500000 	cmp	r0, #0
   1817c:	e5840000 	str	r0, [r4]
   18180:	0a000015 	beq	181dc <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x9c>
   18184:	e59d4004 	ldr	r4, [sp, #4]
   18188:	e3540000 	cmp	r4, #0
   1818c:	0a000029 	beq	18238 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xf8>
   18190:	e3560000 	cmp	r6, #0
   18194:	0a000020 	beq	1821c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xdc>
   18198:	e5d43000 	ldrb	r3, [r4]
   1819c:	e3550000 	cmp	r5, #0
   181a0:	e5863000 	str	r3, [r6]
   181a4:	0a00002a 	beq	18254 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x114>
   181a8:	e1a00005 	mov	r0, r5
   181ac:	e2841001 	add	r1, r4, #1
   181b0:	eb001692 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   181b4:	e59d3020 	ldr	r3, [sp, #32]
   181b8:	e3530000 	cmp	r3, #0
   181bc:	0a00002b 	beq	18270 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x130>
   181c0:	e2841005 	add	r1, r4, #5
   181c4:	e59d0020 	ldr	r0, [sp, #32]
   181c8:	eb00168c 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   181cc:	e1a00004 	mov	r0, r4
   181d0:	e3a01009 	mov	r1, #9
   181d4:	eb002773 	bl	21fa8 <operator delete(void*, unsigned int)>
   181d8:	e3a00001 	mov	r0, #1
   181dc:	e28dd008 	add	sp, sp, #8
   181e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   181e4:	e30e1724 	movw	r1, #59172	; 0xe724
   181e8:	e30b0984 	movw	r0, #47492	; 0xb984
   181ec:	e3401002 	movt	r1, #2
   181f0:	e3400002 	movt	r0, #2
   181f4:	e3a020e9 	mov	r2, #233	; 0xe9
   181f8:	eb003268 	bl	24ba0 <assertion_failed>
   181fc:	eaffffd7 	b	18160 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x20>
   18200:	e30e1724 	movw	r1, #59172	; 0xe724
   18204:	e30c03c0 	movw	r0, #50112	; 0xc3c0
   18208:	e3401002 	movt	r1, #2
   1820c:	e3400002 	movt	r0, #2
   18210:	e3a020ea 	mov	r2, #234	; 0xea
   18214:	eb003261 	bl	24ba0 <assertion_failed>
   18218:	eaffffd2 	b	18168 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x28>
   1821c:	e30e1724 	movw	r1, #59172	; 0xe724
   18220:	e30e07a8 	movw	r0, #59304	; 0xe7a8
   18224:	e3401002 	movt	r1, #2
   18228:	e3400002 	movt	r0, #2
   1822c:	e3a020f4 	mov	r2, #244	; 0xf4
   18230:	eb00325a 	bl	24ba0 <assertion_failed>
   18234:	eaffffd7 	b	18198 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x58>
   18238:	e30e1724 	movw	r1, #59172	; 0xe724
   1823c:	e30e06f4 	movw	r0, #59124	; 0xe6f4
   18240:	e3401002 	movt	r1, #2
   18244:	e3400002 	movt	r0, #2
   18248:	e3a020f2 	mov	r2, #242	; 0xf2
   1824c:	eb003253 	bl	24ba0 <assertion_failed>
   18250:	eaffffce 	b	18190 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x50>
   18254:	e30e1724 	movw	r1, #59172	; 0xe724
   18258:	e30e07b8 	movw	r0, #59320	; 0xe7b8
   1825c:	e3401002 	movt	r1, #2
   18260:	e3400002 	movt	r0, #2
   18264:	e3a020f7 	mov	r2, #247	; 0xf7
   18268:	eb00324c 	bl	24ba0 <assertion_failed>
   1826c:	eaffffcd 	b	181a8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x68>
   18270:	e30e1724 	movw	r1, #59172	; 0xe724
   18274:	e30e07c8 	movw	r0, #59336	; 0xe7c8
   18278:	e3401002 	movt	r1, #2
   1827c:	e3400002 	movt	r0, #2
   18280:	e3a020fa 	mov	r2, #250	; 0xfa
   18284:	eb003245 	bl	24ba0 <assertion_failed>
   18288:	eaffffcc 	b	181c0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x80>

0001828c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   1828c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   18290:	e24dd014 	sub	sp, sp, #20
   18294:	e1a09001 	mov	r9, r1
   18298:	e1a07002 	mov	r7, r2
   1829c:	e2800024 	add	r0, r0, #36	; 0x24
   182a0:	e3a02000 	mov	r2, #0
   182a4:	e1a0100d 	mov	r1, sp
   182a8:	e1a06003 	mov	r6, r3
   182ac:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   182b0:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
   182b4:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
   182b8:	eb0017b9 	bl	1e1a4 <CNetQueue::Dequeue(void*, void**)>
   182bc:	e3500000 	cmp	r0, #0
   182c0:	0a000022 	beq	18350 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xc4>
   182c4:	e350000e 	cmp	r0, #14
   182c8:	0a000005 	beq	182e4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x58>
   182cc:	e30e1724 	movw	r1, #59172	; 0xe724
   182d0:	e30e07d8 	movw	r0, #59352	; 0xe7d8
   182d4:	e3401002 	movt	r1, #2
   182d8:	e3400002 	movt	r0, #2
   182dc:	e300210e 	movw	r2, #270	; 0x10e
   182e0:	eb00322e 	bl	24ba0 <assertion_failed>
   182e4:	e3590000 	cmp	r9, #0
   182e8:	0a00003d 	beq	183e4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x158>
   182ec:	e5dd3000 	ldrb	r3, [sp]
   182f0:	e3580000 	cmp	r8, #0
   182f4:	e5c93000 	strb	r3, [r9]
   182f8:	0a000032 	beq	183c8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x13c>
   182fc:	e5dd3001 	ldrb	r3, [sp, #1]
   18300:	e3570000 	cmp	r7, #0
   18304:	e5883000 	str	r3, [r8]
   18308:	0a000027 	beq	183ac <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x120>
   1830c:	e1a00007 	mov	r0, r7
   18310:	e28d1002 	add	r1, sp, #2
   18314:	eb001639 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   18318:	e3560000 	cmp	r6, #0
   1831c:	0a00001b 	beq	18390 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x104>
   18320:	e1a00006 	mov	r0, r6
   18324:	e28d1006 	add	r1, sp, #6
   18328:	eb001634 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   1832c:	e3550000 	cmp	r5, #0
   18330:	0a00000f 	beq	18374 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xe8>
   18334:	e1dd30ba 	ldrh	r3, [sp, #10]
   18338:	e3540000 	cmp	r4, #0
   1833c:	e1c530b0 	strh	r3, [r5]
   18340:	0a000004 	beq	18358 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xcc>
   18344:	e1dd30bc 	ldrh	r3, [sp, #12]
   18348:	e3a00001 	mov	r0, #1
   1834c:	e1c430b0 	strh	r3, [r4]
   18350:	e28dd014 	add	sp, sp, #20
   18354:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18358:	e30e1724 	movw	r1, #59172	; 0xe724
   1835c:	e30e0814 	movw	r0, #59412	; 0xe814
   18360:	e3401002 	movt	r1, #2
   18364:	e3400002 	movt	r0, #2
   18368:	e300211f 	movw	r2, #287	; 0x11f
   1836c:	eb00320b 	bl	24ba0 <assertion_failed>
   18370:	eafffff3 	b	18344 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb8>
   18374:	e30e1724 	movw	r1, #59172	; 0xe724
   18378:	e30e0804 	movw	r0, #59396	; 0xe804
   1837c:	e3401002 	movt	r1, #2
   18380:	e3400002 	movt	r0, #2
   18384:	e3a02f47 	mov	r2, #284	; 0x11c
   18388:	eb003204 	bl	24ba0 <assertion_failed>
   1838c:	eaffffe8 	b	18334 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xa8>
   18390:	e30e1724 	movw	r1, #59172	; 0xe724
   18394:	e30e07c8 	movw	r0, #59336	; 0xe7c8
   18398:	e3401002 	movt	r1, #2
   1839c:	e3400002 	movt	r0, #2
   183a0:	e3002119 	movw	r2, #281	; 0x119
   183a4:	eb0031fd 	bl	24ba0 <assertion_failed>
   183a8:	eaffffdc 	b	18320 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x94>
   183ac:	e30e1724 	movw	r1, #59172	; 0xe724
   183b0:	e30e07b8 	movw	r0, #59320	; 0xe7b8
   183b4:	e3401002 	movt	r1, #2
   183b8:	e3400002 	movt	r0, #2
   183bc:	e3002116 	movw	r2, #278	; 0x116
   183c0:	eb0031f6 	bl	24ba0 <assertion_failed>
   183c4:	eaffffd0 	b	1830c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x80>
   183c8:	e30e1724 	movw	r1, #59172	; 0xe724
   183cc:	e30e07a8 	movw	r0, #59304	; 0xe7a8
   183d0:	e3401002 	movt	r1, #2
   183d4:	e3400002 	movt	r0, #2
   183d8:	e3002113 	movw	r2, #275	; 0x113
   183dc:	eb0031ef 	bl	24ba0 <assertion_failed>
   183e0:	eaffffc5 	b	182fc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x70>
   183e4:	e30e1724 	movw	r1, #59172	; 0xe724
   183e8:	e30e07f8 	movw	r0, #59384	; 0xe7f8
   183ec:	e3401002 	movt	r1, #2
   183f0:	e3400002 	movt	r0, #2
   183f4:	e3a02e11 	mov	r2, #272	; 0x110
   183f8:	eb0031e8 	bl	24ba0 <assertion_failed>
   183fc:	eaffffba 	b	182ec <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x60>

00018400 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   18400:	e2800030 	add	r0, r0, #48	; 0x30
   18404:	ea000655 	b	19d60 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

00018408 <CNetworkLayer::GetGateway(unsigned char const*) const>:
   18408:	e92d4010 	push	{r4, lr}
   1840c:	e1a04000 	mov	r4, r0
   18410:	e2800030 	add	r0, r0, #48	; 0x30
   18414:	eb000694 	bl	19e6c <CRouteCache::GetRoute(unsigned char const*) const>
   18418:	e3500000 	cmp	r0, #0
   1841c:	18bd8010 	popne	{r4, pc}
   18420:	e5940000 	ldr	r0, [r4]
   18424:	e3500000 	cmp	r0, #0
   18428:	0a000005 	beq	18444 <CNetworkLayer::GetGateway(unsigned char const*) const+0x3c>
   1842c:	eb001501 	bl	1d838 <CNetConfig::GetDefaultGateway() const>
   18430:	e2504000 	subs	r4, r0, #0
   18434:	0a00000a 	beq	18464 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   18438:	e1a00004 	mov	r0, r4
   1843c:	e8bd4010 	pop	{r4, lr}
   18440:	ea001626 	b	1dce0 <CIPAddress::Get() const>
   18444:	e30e1724 	movw	r1, #59172	; 0xe724
   18448:	e30e0610 	movw	r0, #58896	; 0xe610
   1844c:	e3401002 	movt	r1, #2
   18450:	e3400002 	movt	r0, #2
   18454:	e3002132 	movw	r2, #306	; 0x132
   18458:	eb0031d0 	bl	24ba0 <assertion_failed>
   1845c:	e5940000 	ldr	r0, [r4]
   18460:	eafffff1 	b	1842c <CNetworkLayer::GetGateway(unsigned char const*) const+0x24>
   18464:	e30e1724 	movw	r1, #59172	; 0xe724
   18468:	e30e0828 	movw	r0, #59432	; 0xe828
   1846c:	e3401002 	movt	r1, #2
   18470:	e3400002 	movt	r0, #2
   18474:	e3a02f4d 	mov	r2, #308	; 0x134
   18478:	eb0031c8 	bl	24ba0 <assertion_failed>
   1847c:	eaffffed 	b	18438 <CNetworkLayer::GetGateway(unsigned char const*) const+0x30>

00018480 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   18480:	e92d4070 	push	{r4, r5, r6, lr}
   18484:	e1a04000 	mov	r4, r0
   18488:	e5801000 	str	r1, [r0]
   1848c:	e3a05000 	mov	r5, #0
   18490:	e280000c 	add	r0, r0, #12
   18494:	e9840024 	stmib	r4, {r2, r5}
   18498:	eb0016a7 	bl	1df3c <CNetQueue::CNetQueue()>
   1849c:	e2840018 	add	r0, r4, #24
   184a0:	eb0016a5 	bl	1df3c <CNetQueue::CNetQueue()>
   184a4:	e5943000 	ldr	r3, [r4]
   184a8:	e5845024 	str	r5, [r4, #36]	; 0x24
   184ac:	e1530005 	cmp	r3, r5
   184b0:	0a00000c 	beq	184e8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x68>
   184b4:	e5943004 	ldr	r3, [r4, #4]
   184b8:	e3530000 	cmp	r3, #0
   184bc:	0a000001 	beq	184c8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x48>
   184c0:	e1a00004 	mov	r0, r4
   184c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   184c8:	e3a0201f 	mov	r2, #31
   184cc:	e30e1840 	movw	r1, #59456	; 0xe840
   184d0:	e30e0850 	movw	r0, #59472	; 0xe850
   184d4:	e3401002 	movt	r1, #2
   184d8:	e3400002 	movt	r0, #2
   184dc:	eb0031af 	bl	24ba0 <assertion_failed>
   184e0:	e1a00004 	mov	r0, r4
   184e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   184e8:	e30e1840 	movw	r1, #59456	; 0xe840
   184ec:	e30e0610 	movw	r0, #58896	; 0xe610
   184f0:	e3401002 	movt	r1, #2
   184f4:	e3400002 	movt	r0, #2
   184f8:	e3a0201e 	mov	r2, #30
   184fc:	eb0031a7 	bl	24ba0 <assertion_failed>
   18500:	eaffffeb 	b	184b4 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x34>

00018504 <CLinkLayer::~CLinkLayer()>:
   18504:	e92d4070 	push	{r4, r5, r6, lr}
   18508:	e1a04000 	mov	r4, r0
   1850c:	e5905008 	ldr	r5, [r0, #8]
   18510:	e3550000 	cmp	r5, #0
   18514:	0a000004 	beq	1852c <CLinkLayer::~CLinkLayer()+0x28>
   18518:	e1a00005 	mov	r0, r5
   1851c:	eb000269 	bl	18ec8 <CARPHandler::~CARPHandler()>
   18520:	e1a00005 	mov	r0, r5
   18524:	e3a01f69 	mov	r1, #420	; 0x1a4
   18528:	eb00269e 	bl	21fa8 <operator delete(void*, unsigned int)>
   1852c:	e3a05000 	mov	r5, #0
   18530:	e3a01001 	mov	r1, #1
   18534:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   18538:	e5845008 	str	r5, [r4, #8]
   1853c:	eb002699 	bl	21fa8 <operator delete(void*, unsigned int)>
   18540:	e1a00004 	mov	r0, r4
   18544:	e5845024 	str	r5, [r4, #36]	; 0x24
   18548:	e5845004 	str	r5, [r4, #4]
   1854c:	e4805018 	str	r5, [r0], #24
   18550:	eb0016bd 	bl	1e04c <CNetQueue::~CNetQueue()>
   18554:	e284000c 	add	r0, r4, #12
   18558:	eb0016bb 	bl	1e04c <CNetQueue::~CNetQueue()>
   1855c:	e1a00004 	mov	r0, r4
   18560:	e8bd8070 	pop	{r4, r5, r6, pc}

00018564 <CLinkLayer::Initialize()>:
   18564:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18568:	e92d4070 	push	{r4, r5, r6, lr}
   1856c:	e3530000 	cmp	r3, #0
   18570:	e1a04000 	mov	r4, r0
   18574:	0a000005 	beq	18590 <CLinkLayer::Initialize()+0x2c>
   18578:	e30e1840 	movw	r1, #59456	; 0xe840
   1857c:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   18580:	e3401002 	movt	r1, #2
   18584:	e3400002 	movt	r0, #2
   18588:	e3a02030 	mov	r2, #48	; 0x30
   1858c:	eb003183 	bl	24ba0 <assertion_failed>
   18590:	e3a00d19 	mov	r0, #1600	; 0x640
   18594:	eb002680 	bl	21f9c <operator new[](unsigned int)>
   18598:	e5943000 	ldr	r3, [r4]
   1859c:	e3530000 	cmp	r3, #0
   185a0:	e5840024 	str	r0, [r4, #36]	; 0x24
   185a4:	0a000008 	beq	185cc <CLinkLayer::Initialize()+0x68>
   185a8:	e3a00f69 	mov	r0, #420	; 0x1a4
   185ac:	eb002679 	bl	21f98 <operator new(unsigned int)>
   185b0:	e284300c 	add	r3, r4, #12
   185b4:	e8940006 	ldm	r4, {r1, r2}
   185b8:	e1a05000 	mov	r5, r0
   185bc:	eb00020e 	bl	18dfc <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)>
   185c0:	e5845008 	str	r5, [r4, #8]
   185c4:	e3a00001 	mov	r0, #1
   185c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   185cc:	e30e1840 	movw	r1, #59456	; 0xe840
   185d0:	e30e0610 	movw	r0, #58896	; 0xe610
   185d4:	e3401002 	movt	r1, #2
   185d8:	e3400002 	movt	r0, #2
   185dc:	e3a02034 	mov	r2, #52	; 0x34
   185e0:	eb00316e 	bl	24ba0 <assertion_failed>
   185e4:	eaffffef 	b	185a8 <CLinkLayer::Initialize()+0x44>

000185e8 <CLinkLayer::Process()>:
   185e8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   185ec:	e1a04000 	mov	r4, r0
   185f0:	e5900004 	ldr	r0, [r0, #4]
   185f4:	e24dd014 	sub	sp, sp, #20
   185f8:	e3500000 	cmp	r0, #0
   185fc:	0a00005f 	beq	18780 <CLinkLayer::Process()+0x198>
   18600:	eb00019f 	bl	18c84 <CNetDeviceLayer::GetMACAddress() const>
   18604:	e2507000 	subs	r7, r0, #0
   18608:	0a000064 	beq	187a0 <CLinkLayer::Process()+0x1b8>
   1860c:	e5943004 	ldr	r3, [r4, #4]
   18610:	e3530000 	cmp	r3, #0
   18614:	0a000068 	beq	187bc <CLinkLayer::Process()+0x1d4>
   18618:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   1861c:	e3510000 	cmp	r1, #0
   18620:	0a00006c 	beq	187d8 <CLinkLayer::Process()+0x1f0>
   18624:	e30e5840 	movw	r5, #59456	; 0xe840
   18628:	e30c6388 	movw	r6, #50056	; 0xc388
   1862c:	e30e8700 	movw	r8, #59136	; 0xe700
   18630:	e3405002 	movt	r5, #2
   18634:	e3406002 	movt	r6, #2
   18638:	e3408002 	movt	r8, #2
   1863c:	ea000002 	b	1864c <CLinkLayer::Process()+0x64>
   18640:	e353000e 	cmp	r3, #14
   18644:	8a00000f 	bhi	18688 <CLinkLayer::Process()+0xa0>
   18648:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   1864c:	e1a0200d 	mov	r2, sp
   18650:	e5940004 	ldr	r0, [r4, #4]
   18654:	eb0001a2 	bl	18ce4 <CNetDeviceLayer::Receive(void*, unsigned int*)>
   18658:	e3500000 	cmp	r0, #0
   1865c:	0a000026 	beq	186fc <CLinkLayer::Process()+0x114>
   18660:	e59d3000 	ldr	r3, [sp]
   18664:	e3530d19 	cmp	r3, #1600	; 0x640
   18668:	9afffff4 	bls	18640 <CLinkLayer::Process()+0x58>
   1866c:	e3a02046 	mov	r2, #70	; 0x46
   18670:	e1a01005 	mov	r1, r5
   18674:	e1a00006 	mov	r0, r6
   18678:	eb003148 	bl	24ba0 <assertion_failed>
   1867c:	e59d3000 	ldr	r3, [sp]
   18680:	e353000e 	cmp	r3, #14
   18684:	9affffef 	bls	18648 <CLinkLayer::Process()+0x60>
   18688:	e5949024 	ldr	r9, [r4, #36]	; 0x24
   1868c:	e28d0004 	add	r0, sp, #4
   18690:	e1a01009 	mov	r1, r9
   18694:	ebfff206 	bl	14eb4 <CMACAddress::CMACAddress(unsigned char const*)>
   18698:	e1a01007 	mov	r1, r7
   1869c:	e28d0004 	add	r0, sp, #4
   186a0:	ebfff1ec 	bl	14e58 <CMACAddress::operator!=(CMACAddress const&) const>
   186a4:	e3500000 	cmp	r0, #0
   186a8:	1a000019 	bne	18714 <CLinkLayer::Process()+0x12c>
   186ac:	e59d3000 	ldr	r3, [sp]
   186b0:	e243300e 	sub	r3, r3, #14
   186b4:	e58d3000 	str	r3, [sp]
   186b8:	e3530000 	cmp	r3, #0
   186bc:	0a000020 	beq	18744 <CLinkLayer::Process()+0x15c>
   186c0:	e1d930bc 	ldrh	r3, [r9, #12]
   186c4:	e3530008 	cmp	r3, #8
   186c8:	0a000016 	beq	18728 <CLinkLayer::Process()+0x140>
   186cc:	e3002608 	movw	r2, #1544	; 0x608
   186d0:	e1530002 	cmp	r3, r2
   186d4:	1a000005 	bne	186f0 <CLinkLayer::Process()+0x108>
   186d8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   186dc:	e3a03000 	mov	r3, #0
   186e0:	e59d2000 	ldr	r2, [sp]
   186e4:	e284000c 	add	r0, r4, #12
   186e8:	e281100e 	add	r1, r1, #14
   186ec:	eb00165b 	bl	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   186f0:	e28d0004 	add	r0, sp, #4
   186f4:	ebfff1b4 	bl	14dcc <CMACAddress::~CMACAddress()>
   186f8:	eaffffd2 	b	18648 <CLinkLayer::Process()+0x60>
   186fc:	e5940008 	ldr	r0, [r4, #8]
   18700:	e3500000 	cmp	r0, #0
   18704:	0a000013 	beq	18758 <CLinkLayer::Process()+0x170>
   18708:	eb0002ae 	bl	191c8 <CARPHandler::Process()>
   1870c:	e28dd014 	add	sp, sp, #20
   18710:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18714:	e28d0004 	add	r0, sp, #4
   18718:	ebfff21c 	bl	14f90 <CMACAddress::IsBroadcast() const>
   1871c:	e3500000 	cmp	r0, #0
   18720:	0afffff2 	beq	186f0 <CLinkLayer::Process()+0x108>
   18724:	eaffffe0 	b	186ac <CLinkLayer::Process()+0xc4>
   18728:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   1872c:	e3a03000 	mov	r3, #0
   18730:	e59d2000 	ldr	r2, [sp]
   18734:	e2840018 	add	r0, r4, #24
   18738:	e281100e 	add	r1, r1, #14
   1873c:	eb001647 	bl	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   18740:	eaffffea 	b	186f0 <CLinkLayer::Process()+0x108>
   18744:	e3a02055 	mov	r2, #85	; 0x55
   18748:	e1a01005 	mov	r1, r5
   1874c:	e1a00008 	mov	r0, r8
   18750:	eb003112 	bl	24ba0 <assertion_failed>
   18754:	eaffffd9 	b	186c0 <CLinkLayer::Process()+0xd8>
   18758:	e3a02063 	mov	r2, #99	; 0x63
   1875c:	e30e1840 	movw	r1, #59456	; 0xe840
   18760:	e30e0878 	movw	r0, #59512	; 0xe878
   18764:	e3401002 	movt	r1, #2
   18768:	e3400002 	movt	r0, #2
   1876c:	eb00310b 	bl	24ba0 <assertion_failed>
   18770:	e5940008 	ldr	r0, [r4, #8]
   18774:	eb000293 	bl	191c8 <CARPHandler::Process()>
   18778:	e28dd014 	add	sp, sp, #20
   1877c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18780:	e30e1840 	movw	r1, #59456	; 0xe840
   18784:	e30e0850 	movw	r0, #59472	; 0xe850
   18788:	e3401002 	movt	r1, #2
   1878c:	e3400002 	movt	r0, #2
   18790:	e3a0203d 	mov	r2, #61	; 0x3d
   18794:	eb003101 	bl	24ba0 <assertion_failed>
   18798:	e5940004 	ldr	r0, [r4, #4]
   1879c:	eaffff97 	b	18600 <CLinkLayer::Process()+0x18>
   187a0:	e30e1840 	movw	r1, #59456	; 0xe840
   187a4:	e30e0864 	movw	r0, #59492	; 0xe864
   187a8:	e3401002 	movt	r1, #2
   187ac:	e3400002 	movt	r0, #2
   187b0:	e3a0203f 	mov	r2, #63	; 0x3f
   187b4:	eb0030f9 	bl	24ba0 <assertion_failed>
   187b8:	eaffff93 	b	1860c <CLinkLayer::Process()+0x24>
   187bc:	e30e1840 	movw	r1, #59456	; 0xe840
   187c0:	e30e0850 	movw	r0, #59472	; 0xe850
   187c4:	e3401002 	movt	r1, #2
   187c8:	e3400002 	movt	r0, #2
   187cc:	e3a02041 	mov	r2, #65	; 0x41
   187d0:	eb0030f2 	bl	24ba0 <assertion_failed>
   187d4:	eaffff8f 	b	18618 <CLinkLayer::Process()+0x30>
   187d8:	e30e1840 	movw	r1, #59456	; 0xe840
   187dc:	e30c0424 	movw	r0, #50212	; 0xc424
   187e0:	e3401002 	movt	r1, #2
   187e4:	e3400002 	movt	r0, #2
   187e8:	e3a02042 	mov	r2, #66	; 0x42
   187ec:	eb0030eb 	bl	24ba0 <assertion_failed>
   187f0:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   187f4:	eaffff8a 	b	18624 <CLinkLayer::Process()+0x3c>

000187f8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   187f8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   187fc:	e1a05001 	mov	r5, r1
   18800:	e5901008 	ldr	r1, [r0, #8]
   18804:	e24dd014 	sub	sp, sp, #20
   18808:	e1a04000 	mov	r4, r0
   1880c:	e1a07002 	mov	r7, r2
   18810:	e3510000 	cmp	r1, #0
   18814:	e1a06003 	mov	r6, r3
   18818:	0a000045 	beq	18934 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x13c>
   1881c:	e28d0004 	add	r0, sp, #4
   18820:	ebfff166 	bl	14dc0 <CMACAddress::CMACAddress()>
   18824:	e5943000 	ldr	r3, [r4]
   18828:	e3530000 	cmp	r3, #0
   1882c:	0a000047 	beq	18950 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x158>
   18830:	e1a00005 	mov	r0, r5
   18834:	eb001561 	bl	1ddc0 <CIPAddress::IsBroadcast() const>
   18838:	e3500000 	cmp	r0, #0
   1883c:	0a00002d 	beq	188f8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x100>
   18840:	e28d0004 	add	r0, sp, #4
   18844:	ebfff19f 	bl	14ec8 <CMACAddress::SetBroadcast()>
   18848:	e2462001 	sub	r2, r6, #1
   1884c:	e3003631 	movw	r3, #1585	; 0x631
   18850:	e1520003 	cmp	r2, r3
   18854:	83a06000 	movhi	r6, #0
   18858:	9a000004 	bls	18870 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x78>
   1885c:	e28d0004 	add	r0, sp, #4
   18860:	ebfff159 	bl	14dcc <CMACAddress::~CMACAddress()>
   18864:	e1a00006 	mov	r0, r6
   18868:	e28dd014 	add	sp, sp, #20
   1886c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18870:	e286800e 	add	r8, r6, #14
   18874:	e1a00008 	mov	r0, r8
   18878:	eb0025c7 	bl	21f9c <operator new[](unsigned int)>
   1887c:	e1a01000 	mov	r1, r0
   18880:	e1a05000 	mov	r5, r0
   18884:	e28d0004 	add	r0, sp, #4
   18888:	ebfff1a4 	bl	14f20 <CMACAddress::CopyTo(unsigned char*) const>
   1888c:	e5940004 	ldr	r0, [r4, #4]
   18890:	e3500000 	cmp	r0, #0
   18894:	0a00003b 	beq	18988 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   18898:	eb0000f9 	bl	18c84 <CNetDeviceLayer::GetMACAddress() const>
   1889c:	e2509000 	subs	r9, r0, #0
   188a0:	0a000040 	beq	189a8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1b0>
   188a4:	e1a00009 	mov	r0, r9
   188a8:	e2851006 	add	r1, r5, #6
   188ac:	ebfff19b 	bl	14f20 <CMACAddress::CopyTo(unsigned char*) const>
   188b0:	e3570000 	cmp	r7, #0
   188b4:	e3a02000 	mov	r2, #0
   188b8:	e3a03008 	mov	r3, #8
   188bc:	e5c5200d 	strb	r2, [r5, #13]
   188c0:	e5c5300c 	strb	r3, [r5, #12]
   188c4:	0a000028 	beq	1896c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x174>
   188c8:	e1a02006 	mov	r2, r6
   188cc:	e1a01007 	mov	r1, r7
   188d0:	e285000e 	add	r0, r5, #14
   188d4:	e3a06001 	mov	r6, #1
   188d8:	eb002a3a 	bl	231c8 <memcpy>
   188dc:	e5940004 	ldr	r0, [r4, #4]
   188e0:	e1a02008 	mov	r2, r8
   188e4:	e1a01005 	mov	r1, r5
   188e8:	eb0000fa 	bl	18cd8 <CNetDeviceLayer::Send(void const*, unsigned int)>
   188ec:	e1a00005 	mov	r0, r5
   188f0:	eb0025ab 	bl	21fa4 <operator delete[](void*)>
   188f4:	eaffffd8 	b	1885c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x64>
   188f8:	e5940000 	ldr	r0, [r4]
   188fc:	eb0013d1 	bl	1d848 <CNetConfig::GetBroadcastAddress() const>
   18900:	e1a01000 	mov	r1, r0
   18904:	e1a00005 	mov	r0, r5
   18908:	eb00143a 	bl	1d9f8 <CIPAddress::operator==(CIPAddress const&) const>
   1890c:	e3500000 	cmp	r0, #0
   18910:	1affffca 	bne	18840 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x48>
   18914:	e1a01005 	mov	r1, r5
   18918:	e28d2004 	add	r2, sp, #4
   1891c:	e5940008 	ldr	r0, [r4, #8]
   18920:	eb0002c5 	bl	1943c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)>
   18924:	e3500000 	cmp	r0, #0
   18928:	1affffc6 	bne	18848 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x50>
   1892c:	e3a06001 	mov	r6, #1
   18930:	eaffffc9 	b	1885c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x64>
   18934:	e30e1840 	movw	r1, #59456	; 0xe840
   18938:	e30e0878 	movw	r0, #59512	; 0xe878
   1893c:	e3401002 	movt	r1, #2
   18940:	e3400002 	movt	r0, #2
   18944:	e3a02069 	mov	r2, #105	; 0x69
   18948:	eb003094 	bl	24ba0 <assertion_failed>
   1894c:	eaffffb2 	b	1881c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x24>
   18950:	e30e1840 	movw	r1, #59456	; 0xe840
   18954:	e30e0610 	movw	r0, #58896	; 0xe610
   18958:	e3401002 	movt	r1, #2
   1895c:	e3400002 	movt	r0, #2
   18960:	e3a0206c 	mov	r2, #108	; 0x6c
   18964:	eb00308d 	bl	24ba0 <assertion_failed>
   18968:	eaffffb0 	b	18830 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x38>
   1896c:	e30e1840 	movw	r1, #59456	; 0xe840
   18970:	e30e088c 	movw	r0, #59532	; 0xe88c
   18974:	e3401002 	movt	r1, #2
   18978:	e3400002 	movt	r0, #2
   1897c:	e3a0208b 	mov	r2, #139	; 0x8b
   18980:	eb003086 	bl	24ba0 <assertion_failed>
   18984:	eaffffcf 	b	188c8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xd0>
   18988:	e30e1840 	movw	r1, #59456	; 0xe840
   1898c:	e30e0850 	movw	r0, #59472	; 0xe850
   18990:	e3401002 	movt	r1, #2
   18994:	e3400002 	movt	r0, #2
   18998:	e3a02084 	mov	r2, #132	; 0x84
   1899c:	eb00307f 	bl	24ba0 <assertion_failed>
   189a0:	e5940004 	ldr	r0, [r4, #4]
   189a4:	eaffffbb 	b	18898 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xa0>
   189a8:	e30e1840 	movw	r1, #59456	; 0xe840
   189ac:	e30e0864 	movw	r0, #59492	; 0xe864
   189b0:	e3401002 	movt	r1, #2
   189b4:	e3400002 	movt	r0, #2
   189b8:	e3a02086 	mov	r2, #134	; 0x86
   189bc:	eb003077 	bl	24ba0 <assertion_failed>
   189c0:	eaffffb7 	b	188a4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xac>

000189c4 <CLinkLayer::Receive(void*, unsigned int*)>:
   189c4:	e92d4070 	push	{r4, r5, r6, lr}
   189c8:	e2516000 	subs	r6, r1, #0
   189cc:	e1a05000 	mov	r5, r0
   189d0:	e1a04002 	mov	r4, r2
   189d4:	0a000009 	beq	18a00 <CLinkLayer::Receive(void*, unsigned int*)+0x3c>
   189d8:	e3540000 	cmp	r4, #0
   189dc:	0a00000e 	beq	18a1c <CLinkLayer::Receive(void*, unsigned int*)+0x58>
   189e0:	e1a01006 	mov	r1, r6
   189e4:	e2850018 	add	r0, r5, #24
   189e8:	e3a02000 	mov	r2, #0
   189ec:	eb0015ec 	bl	1e1a4 <CNetQueue::Dequeue(void*, void**)>
   189f0:	e5840000 	str	r0, [r4]
   189f4:	e2900000 	adds	r0, r0, #0
   189f8:	13a00001 	movne	r0, #1
   189fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   18a00:	e30e1840 	movw	r1, #59456	; 0xe840
   18a04:	e30b0984 	movw	r0, #47492	; 0xb984
   18a08:	e3401002 	movt	r1, #2
   18a0c:	e3400002 	movt	r0, #2
   18a10:	e3a02099 	mov	r2, #153	; 0x99
   18a14:	eb003061 	bl	24ba0 <assertion_failed>
   18a18:	eaffffee 	b	189d8 <CLinkLayer::Receive(void*, unsigned int*)+0x14>
   18a1c:	e30e1840 	movw	r1, #59456	; 0xe840
   18a20:	e30c03c0 	movw	r0, #50112	; 0xc3c0
   18a24:	e3401002 	movt	r1, #2
   18a28:	e3400002 	movt	r0, #2
   18a2c:	e3a0209a 	mov	r2, #154	; 0x9a
   18a30:	eb00305a 	bl	24ba0 <assertion_failed>
   18a34:	eaffffe9 	b	189e0 <CLinkLayer::Receive(void*, unsigned int*)+0x1c>

00018a38 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*)>:
   18a38:	e92d4070 	push	{r4, r5, r6, lr}
   18a3c:	e1a04000 	mov	r4, r0
   18a40:	e5801000 	str	r1, [r0]
   18a44:	e3a05000 	mov	r5, #0
   18a48:	e2800008 	add	r0, r0, #8
   18a4c:	e5845004 	str	r5, [r4, #4]
   18a50:	eb001539 	bl	1df3c <CNetQueue::CNetQueue()>
   18a54:	e2840014 	add	r0, r4, #20
   18a58:	eb001537 	bl	1df3c <CNetQueue::CNetQueue()>
   18a5c:	e5845020 	str	r5, [r4, #32]
   18a60:	e1a00004 	mov	r0, r4
   18a64:	e8bd8070 	pop	{r4, r5, r6, pc}

00018a68 <CNetDeviceLayer::~CNetDeviceLayer()>:
   18a68:	e92d4010 	push	{r4, lr}
   18a6c:	e1a04000 	mov	r4, r0
   18a70:	e5900020 	ldr	r0, [r0, #32]
   18a74:	e3500000 	cmp	r0, #0
   18a78:	0a000000 	beq	18a80 <CNetDeviceLayer::~CNetDeviceLayer()+0x18>
   18a7c:	eb002548 	bl	21fa4 <operator delete[](void*)>
   18a80:	e1a00004 	mov	r0, r4
   18a84:	e3a03000 	mov	r3, #0
   18a88:	e5843020 	str	r3, [r4, #32]
   18a8c:	e5843004 	str	r3, [r4, #4]
   18a90:	e4803014 	str	r3, [r0], #20
   18a94:	eb00156c 	bl	1e04c <CNetQueue::~CNetQueue()>
   18a98:	e2840008 	add	r0, r4, #8
   18a9c:	eb00156a 	bl	1e04c <CNetQueue::~CNetQueue()>
   18aa0:	e1a00004 	mov	r0, r4
   18aa4:	e8bd8010 	pop	{r4, pc}

00018aa8 <CNetDeviceLayer::Initialize()>:
   18aa8:	e5903004 	ldr	r3, [r0, #4]
   18aac:	e92d4070 	push	{r4, r5, r6, lr}
   18ab0:	e3530000 	cmp	r3, #0
   18ab4:	e1a05000 	mov	r5, r0
   18ab8:	0a000005 	beq	18ad4 <CNetDeviceLayer::Initialize()+0x2c>
   18abc:	e30e18a4 	movw	r1, #59556	; 0xe8a4
   18ac0:	e30b0d04 	movw	r0, #48388	; 0xbd04
   18ac4:	e3401002 	movt	r1, #2
   18ac8:	e3400002 	movt	r0, #2
   18acc:	e3a0202d 	mov	r2, #45	; 0x2d
   18ad0:	eb003032 	bl	24ba0 <assertion_failed>
   18ad4:	eb003187 	bl	250f8 <CDeviceNameService::Get()>
   18ad8:	e30e18b4 	movw	r1, #59572	; 0xe8b4
   18adc:	e3a02000 	mov	r2, #0
   18ae0:	e3401002 	movt	r1, #2
   18ae4:	eb00313f 	bl	24fe8 <CDeviceNameService::GetDevice(char const*, int)>
   18ae8:	e3500000 	cmp	r0, #0
   18aec:	e1a04000 	mov	r4, r0
   18af0:	e5850004 	str	r0, [r5, #4]
   18af4:	0a00000e 	beq	18b34 <CNetDeviceLayer::Initialize()+0x8c>
   18af8:	e5953020 	ldr	r3, [r5, #32]
   18afc:	e3530000 	cmp	r3, #0
   18b00:	0a000005 	beq	18b1c <CNetDeviceLayer::Initialize()+0x74>
   18b04:	e30e18a4 	movw	r1, #59556	; 0xe8a4
   18b08:	e30e06b8 	movw	r0, #59064	; 0xe6b8
   18b0c:	e3401002 	movt	r1, #2
   18b10:	e3400002 	movt	r0, #2
   18b14:	e3a02036 	mov	r2, #54	; 0x36
   18b18:	eb003020 	bl	24ba0 <assertion_failed>
   18b1c:	e3a00d19 	mov	r0, #1600	; 0x640
   18b20:	e3a04001 	mov	r4, #1
   18b24:	eb00251c 	bl	21f9c <operator new[](unsigned int)>
   18b28:	e5850020 	str	r0, [r5, #32]
   18b2c:	e1a00004 	mov	r0, r4
   18b30:	e8bd8070 	pop	{r4, r5, r6, pc}
   18b34:	eb00319b 	bl	251a8 <CLogger::Get()>
   18b38:	e30e38bc 	movw	r3, #59580	; 0xe8bc
   18b3c:	e30e189c 	movw	r1, #59548	; 0xe89c
   18b40:	e3403002 	movt	r3, #2
   18b44:	e3401002 	movt	r1, #2
   18b48:	e3a02001 	mov	r2, #1
   18b4c:	eb003272 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18b50:	eafffff5 	b	18b2c <CNetDeviceLayer::Initialize()+0x84>

00018b54 <CNetDeviceLayer::Process()>:
   18b54:	e5903004 	ldr	r3, [r0, #4]
   18b58:	e92d4070 	push	{r4, r5, r6, lr}
   18b5c:	e3530000 	cmp	r3, #0
   18b60:	e24dd008 	sub	sp, sp, #8
   18b64:	e1a04000 	mov	r4, r0
   18b68:	0a00003e 	beq	18c68 <CNetDeviceLayer::Process()+0x114>
   18b6c:	e5941020 	ldr	r1, [r4, #32]
   18b70:	e3510000 	cmp	r1, #0
   18b74:	0a000033 	beq	18c48 <CNetDeviceLayer::Process()+0xf4>
   18b78:	e2845008 	add	r5, r4, #8
   18b7c:	ea000007 	b	18ba0 <CNetDeviceLayer::Process()+0x4c>
   18b80:	e5940004 	ldr	r0, [r4, #4]
   18b84:	e5941020 	ldr	r1, [r4, #32]
   18b88:	e5903000 	ldr	r3, [r0]
   18b8c:	e5933020 	ldr	r3, [r3, #32]
   18b90:	e12fff33 	blx	r3
   18b94:	e3500000 	cmp	r0, #0
   18b98:	0a000022 	beq	18c28 <CNetDeviceLayer::Process()+0xd4>
   18b9c:	e5941020 	ldr	r1, [r4, #32]
   18ba0:	e3a02000 	mov	r2, #0
   18ba4:	e1a00005 	mov	r0, r5
   18ba8:	eb00157d 	bl	1e1a4 <CNetQueue::Dequeue(void*, void**)>
   18bac:	e2502000 	subs	r2, r0, #0
   18bb0:	e58d0004 	str	r0, [sp, #4]
   18bb4:	1afffff1 	bne	18b80 <CNetDeviceLayer::Process()+0x2c>
   18bb8:	e30e68a4 	movw	r6, #59556	; 0xe8a4
   18bbc:	e30e5700 	movw	r5, #59136	; 0xe700
   18bc0:	e3406002 	movt	r6, #2
   18bc4:	e3405002 	movt	r5, #2
   18bc8:	ea000003 	b	18bdc <CNetDeviceLayer::Process()+0x88>
   18bcc:	e3a03000 	mov	r3, #0
   18bd0:	e5941020 	ldr	r1, [r4, #32]
   18bd4:	e2840014 	add	r0, r4, #20
   18bd8:	eb001520 	bl	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   18bdc:	e5940004 	ldr	r0, [r4, #4]
   18be0:	e28d2004 	add	r2, sp, #4
   18be4:	e5941020 	ldr	r1, [r4, #32]
   18be8:	e5903000 	ldr	r3, [r0]
   18bec:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   18bf0:	e12fff33 	blx	r3
   18bf4:	e3500000 	cmp	r0, #0
   18bf8:	0a000008 	beq	18c20 <CNetDeviceLayer::Process()+0xcc>
   18bfc:	e59d2004 	ldr	r2, [sp, #4]
   18c00:	e3520000 	cmp	r2, #0
   18c04:	1afffff0 	bne	18bcc <CNetDeviceLayer::Process()+0x78>
   18c08:	e3a0204f 	mov	r2, #79	; 0x4f
   18c0c:	e1a01006 	mov	r1, r6
   18c10:	e1a00005 	mov	r0, r5
   18c14:	eb002fe1 	bl	24ba0 <assertion_failed>
   18c18:	e59d2004 	ldr	r2, [sp, #4]
   18c1c:	eaffffea 	b	18bcc <CNetDeviceLayer::Process()+0x78>
   18c20:	e28dd008 	add	sp, sp, #8
   18c24:	e8bd8070 	pop	{r4, r5, r6, pc}
   18c28:	eb00315e 	bl	251a8 <CLogger::Get()>
   18c2c:	e30e38d8 	movw	r3, #59608	; 0xe8d8
   18c30:	e30e189c 	movw	r1, #59548	; 0xe89c
   18c34:	e3403002 	movt	r3, #2
   18c38:	e3401002 	movt	r1, #2
   18c3c:	e3a02002 	mov	r2, #2
   18c40:	eb003235 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18c44:	eaffffdb 	b	18bb8 <CNetDeviceLayer::Process()+0x64>
   18c48:	e30e18a4 	movw	r1, #59556	; 0xe8a4
   18c4c:	e30c0424 	movw	r0, #50212	; 0xc424
   18c50:	e3401002 	movt	r1, #2
   18c54:	e3400002 	movt	r0, #2
   18c58:	e3a02040 	mov	r2, #64	; 0x40
   18c5c:	eb002fcf 	bl	24ba0 <assertion_failed>
   18c60:	e5941020 	ldr	r1, [r4, #32]
   18c64:	eaffffc3 	b	18b78 <CNetDeviceLayer::Process()+0x24>
   18c68:	e30e18a4 	movw	r1, #59556	; 0xe8a4
   18c6c:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   18c70:	e3401002 	movt	r1, #2
   18c74:	e3400002 	movt	r0, #2
   18c78:	e3a0203f 	mov	r2, #63	; 0x3f
   18c7c:	eb002fc7 	bl	24ba0 <assertion_failed>
   18c80:	eaffffb9 	b	18b6c <CNetDeviceLayer::Process()+0x18>

00018c84 <CNetDeviceLayer::GetMACAddress() const>:
   18c84:	e5903004 	ldr	r3, [r0, #4]
   18c88:	e3530000 	cmp	r3, #0
   18c8c:	0a000003 	beq	18ca0 <CNetDeviceLayer::GetMACAddress() const+0x1c>
   18c90:	e5932000 	ldr	r2, [r3]
   18c94:	e1a00003 	mov	r0, r3
   18c98:	e592301c 	ldr	r3, [r2, #28]
   18c9c:	e12fff13 	bx	r3
   18ca0:	e92d4010 	push	{r4, lr}
   18ca4:	e3a02056 	mov	r2, #86	; 0x56
   18ca8:	e1a04000 	mov	r4, r0
   18cac:	e30e18a4 	movw	r1, #59556	; 0xe8a4
   18cb0:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   18cb4:	e3401002 	movt	r1, #2
   18cb8:	e3400002 	movt	r0, #2
   18cbc:	eb002fb7 	bl	24ba0 <assertion_failed>
   18cc0:	e5943004 	ldr	r3, [r4, #4]
   18cc4:	e8bd4010 	pop	{r4, lr}
   18cc8:	e5932000 	ldr	r2, [r3]
   18ccc:	e1a00003 	mov	r0, r3
   18cd0:	e592301c 	ldr	r3, [r2, #28]
   18cd4:	e12fff13 	bx	r3

00018cd8 <CNetDeviceLayer::Send(void const*, unsigned int)>:
   18cd8:	e2800008 	add	r0, r0, #8
   18cdc:	e3a03000 	mov	r3, #0
   18ce0:	ea0014de 	b	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>

00018ce4 <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   18ce4:	e92d4070 	push	{r4, r5, r6, lr}
   18ce8:	e2800014 	add	r0, r0, #20
   18cec:	e1a05002 	mov	r5, r2
   18cf0:	e3a02000 	mov	r2, #0
   18cf4:	eb00152a 	bl	1e1a4 <CNetQueue::Dequeue(void*, void**)>
   18cf8:	e2504000 	subs	r4, r0, #0
   18cfc:	0a000004 	beq	18d14 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   18d00:	e3550000 	cmp	r5, #0
   18d04:	0a000004 	beq	18d1c <CNetDeviceLayer::Receive(void*, unsigned int*)+0x38>
   18d08:	e5854000 	str	r4, [r5]
   18d0c:	e3a00001 	mov	r0, #1
   18d10:	e8bd8070 	pop	{r4, r5, r6, pc}
   18d14:	e1a00004 	mov	r0, r4
   18d18:	e8bd8070 	pop	{r4, r5, r6, pc}
   18d1c:	e30e18a4 	movw	r1, #59556	; 0xe8a4
   18d20:	e30c03c0 	movw	r0, #50112	; 0xc3c0
   18d24:	e3401002 	movt	r1, #2
   18d28:	e3400002 	movt	r0, #2
   18d2c:	e3a02067 	mov	r2, #103	; 0x67
   18d30:	eb002f9a 	bl	24ba0 <assertion_failed>
   18d34:	eafffff3 	b	18d08 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x24>

00018d38 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   18d38:	e92d4070 	push	{r4, r5, r6, lr}
   18d3c:	e2524000 	subs	r4, r2, #0
   18d40:	e1a05001 	mov	r5, r1
   18d44:	0a000025 	beq	18de0 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa8>
   18d48:	e3550013 	cmp	r5, #19
   18d4c:	8a000008 	bhi	18d74 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x3c>
   18d50:	e594019c 	ldr	r0, [r4, #412]	; 0x19c
   18d54:	e3500000 	cmp	r0, #0
   18d58:	1a00000e 	bne	18d98 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x60>
   18d5c:	e3a03014 	mov	r3, #20
   18d60:	e0234395 	mla	r3, r5, r3, r4
   18d64:	e5d3300c 	ldrb	r3, [r3, #12]
   18d68:	e3530001 	cmp	r3, #1
   18d6c:	0a000014 	beq	18dc4 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x8c>
   18d70:	e8bd8070 	pop	{r4, r5, r6, pc}
   18d74:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   18d78:	e30e08f8 	movw	r0, #59640	; 0xe8f8
   18d7c:	e3401002 	movt	r1, #2
   18d80:	e3400002 	movt	r0, #2
   18d84:	e3a02e15 	mov	r2, #336	; 0x150
   18d88:	eb002f84 	bl	24ba0 <assertion_failed>
   18d8c:	e594019c 	ldr	r0, [r4, #412]	; 0x19c
   18d90:	e3500000 	cmp	r0, #0
   18d94:	0afffff0 	beq	18d5c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x24>
   18d98:	eb00248a 	bl	21fc8 <EnterCritical>
   18d9c:	e3a03014 	mov	r3, #20
   18da0:	e0234395 	mla	r3, r5, r3, r4
   18da4:	e594019c 	ldr	r0, [r4, #412]	; 0x19c
   18da8:	e5d3300c 	ldrb	r3, [r3, #12]
   18dac:	e3530001 	cmp	r3, #1
   18db0:	0a000003 	beq	18dc4 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x8c>
   18db4:	e3500000 	cmp	r0, #0
   18db8:	08bd8070 	popeq	{r4, r5, r6, pc}
   18dbc:	e8bd4070 	pop	{r4, r5, r6, lr}
   18dc0:	ea0024ae 	b	22080 <LeaveCritical>
   18dc4:	e3a03014 	mov	r3, #20
   18dc8:	e3500000 	cmp	r0, #0
   18dcc:	e0244395 	mla	r4, r5, r3, r4
   18dd0:	e3a02000 	mov	r2, #0
   18dd4:	e5c4200c 	strb	r2, [r4, #12]
   18dd8:	1afffff7 	bne	18dbc <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x84>
   18ddc:	e8bd8070 	pop	{r4, r5, r6, pc}
   18de0:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   18de4:	e30a0940 	movw	r0, #43328	; 0xa940
   18de8:	e3401002 	movt	r1, #2
   18dec:	e3400002 	movt	r0, #2
   18df0:	e300214d 	movw	r2, #333	; 0x14d
   18df4:	eb002f69 	bl	24ba0 <assertion_failed>
   18df8:	eaffffd2 	b	18d48 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x10>

00018dfc <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)>:
   18dfc:	e3510000 	cmp	r1, #0
   18e00:	e92d4010 	push	{r4, lr}
   18e04:	e1a04000 	mov	r4, r0
   18e08:	e5801000 	str	r1, [r0]
   18e0c:	e3a01001 	mov	r1, #1
   18e10:	e5803008 	str	r3, [r0, #8]
   18e14:	e3a03000 	mov	r3, #0
   18e18:	e5802004 	str	r2, [r0, #4]
   18e1c:	e580119c 	str	r1, [r0, #412]	; 0x19c
   18e20:	e58031a0 	str	r3, [r0, #416]	; 0x1a0
   18e24:	0a000011 	beq	18e70 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x74>
   18e28:	e3520000 	cmp	r2, #0
   18e2c:	0a000017 	beq	18e90 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x94>
   18e30:	e5943008 	ldr	r3, [r4, #8]
   18e34:	e3530000 	cmp	r3, #0
   18e38:	0a00001b 	beq	18eac <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0xb0>
   18e3c:	e3a03000 	mov	r3, #0
   18e40:	e3a00014 	mov	r0, #20
   18e44:	e1a01003 	mov	r1, r3
   18e48:	e0224390 	mla	r2, r0, r3, r4
   18e4c:	e2833001 	add	r3, r3, #1
   18e50:	e3530014 	cmp	r3, #20
   18e54:	e5c2100c 	strb	r1, [r2, #12]
   18e58:	1afffffa 	bne	18e48 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x4c>
   18e5c:	e3a00d19 	mov	r0, #1600	; 0x640
   18e60:	eb00244d 	bl	21f9c <operator new[](unsigned int)>
   18e64:	e58401a0 	str	r0, [r4, #416]	; 0x1a0
   18e68:	e1a00004 	mov	r0, r4
   18e6c:	e8bd8010 	pop	{r4, pc}
   18e70:	e3a0203e 	mov	r2, #62	; 0x3e
   18e74:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   18e78:	e30e0610 	movw	r0, #58896	; 0xe610
   18e7c:	e3401002 	movt	r1, #2
   18e80:	e3400002 	movt	r0, #2
   18e84:	eb002f45 	bl	24ba0 <assertion_failed>
   18e88:	e5942004 	ldr	r2, [r4, #4]
   18e8c:	eaffffe5 	b	18e28 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x2c>
   18e90:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   18e94:	e30e0850 	movw	r0, #59472	; 0xe850
   18e98:	e3401002 	movt	r1, #2
   18e9c:	e3400002 	movt	r0, #2
   18ea0:	e3a0203f 	mov	r2, #63	; 0x3f
   18ea4:	eb002f3d 	bl	24ba0 <assertion_failed>
   18ea8:	eaffffe0 	b	18e30 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x34>
   18eac:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   18eb0:	e30e0914 	movw	r0, #59668	; 0xe914
   18eb4:	e3401002 	movt	r1, #2
   18eb8:	e3400002 	movt	r0, #2
   18ebc:	e3a02040 	mov	r2, #64	; 0x40
   18ec0:	eb002f36 	bl	24ba0 <assertion_failed>
   18ec4:	eaffffdc 	b	18e3c <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x40>

00018ec8 <CARPHandler::~CARPHandler()>:
   18ec8:	e92d4010 	push	{r4, lr}
   18ecc:	e1a04000 	mov	r4, r0
   18ed0:	e59001a0 	ldr	r0, [r0, #416]	; 0x1a0
   18ed4:	e3500000 	cmp	r0, #0
   18ed8:	0a000000 	beq	18ee0 <CARPHandler::~CARPHandler()+0x18>
   18edc:	eb002430 	bl	21fa4 <operator delete[](void*)>
   18ee0:	e1a00004 	mov	r0, r4
   18ee4:	e8bd8010 	pop	{r4, pc}

00018ee8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   18ee8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eec:	e1a07000 	mov	r7, r0
   18ef0:	e590019c 	ldr	r0, [r0, #412]	; 0x19c
   18ef4:	e1a0a001 	mov	sl, r1
   18ef8:	e1a09002 	mov	r9, r2
   18efc:	e3500000 	cmp	r0, #0
   18f00:	1a000020 	bne	18f88 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xa0>
   18f04:	e3a06000 	mov	r6, #0
   18f08:	e3a08014 	mov	r8, #20
   18f0c:	e1a04006 	mov	r4, r6
   18f10:	ea000002 	b	18f20 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x38>
   18f14:	e3540014 	cmp	r4, #20
   18f18:	e2866014 	add	r6, r6, #20
   18f1c:	0a000014 	beq	18f74 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x8c>
   18f20:	e0257498 	mla	r5, r8, r4, r7
   18f24:	e2844001 	add	r4, r4, #1
   18f28:	e285b00c 	add	fp, r5, #12
   18f2c:	e5d5300c 	ldrb	r3, [r5, #12]
   18f30:	e3530001 	cmp	r3, #1
   18f34:	1afffff6 	bne	18f14 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x2c>
   18f38:	e286100d 	add	r1, r6, #13
   18f3c:	e1a0000a 	mov	r0, sl
   18f40:	e0871001 	add	r1, r7, r1
   18f44:	eb0012e2 	bl	1dad4 <CIPAddress::operator==(unsigned char const*) const>
   18f48:	e3500000 	cmp	r0, #0
   18f4c:	0afffff0 	beq	18f14 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x2c>
   18f50:	eb002776 	bl	22d30 <CTimer::Get()>
   18f54:	e5951018 	ldr	r1, [r5, #24]
   18f58:	eb002605 	bl	22774 <CTimer::CancelKernelTimer(unsigned int)>
   18f5c:	e2861011 	add	r1, r6, #17
   18f60:	e0871001 	add	r1, r7, r1
   18f64:	e1a00009 	mov	r0, r9
   18f68:	ebffefec 	bl	14f20 <CMACAddress::CopyTo(unsigned char*) const>
   18f6c:	e3a03002 	mov	r3, #2
   18f70:	e5c5300c 	strb	r3, [r5, #12]
   18f74:	e597319c 	ldr	r3, [r7, #412]	; 0x19c
   18f78:	e3530000 	cmp	r3, #0
   18f7c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f80:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f84:	ea00243d 	b	22080 <LeaveCritical>
   18f88:	eb00240e 	bl	21fc8 <EnterCritical>
   18f8c:	eaffffdc 	b	18f04 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x1c>

00018f90 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   18f90:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f94:	e1a07000 	mov	r7, r0
   18f98:	e590019c 	ldr	r0, [r0, #412]	; 0x19c
   18f9c:	e1a08001 	mov	r8, r1
   18fa0:	e1a09002 	mov	r9, r2
   18fa4:	e3500000 	cmp	r0, #0
   18fa8:	1a00001e 	bne	19028 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x98>
   18fac:	e3a06014 	mov	r6, #20
   18fb0:	e287500d 	add	r5, r7, #13
   18fb4:	e1a0a006 	mov	sl, r6
   18fb8:	e3a04000 	mov	r4, #0
   18fbc:	ea000005 	b	18fd8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x48>
   18fc0:	e3560014 	cmp	r6, #20
   18fc4:	01a06004 	moveq	r6, r4
   18fc8:	e2844001 	add	r4, r4, #1
   18fcc:	e2855014 	add	r5, r5, #20
   18fd0:	e3540014 	cmp	r4, #20
   18fd4:	0a00000d 	beq	19010 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x80>
   18fd8:	e023749a 	mla	r3, sl, r4, r7
   18fdc:	e5d3300c 	ldrb	r3, [r3, #12]
   18fe0:	e3530000 	cmp	r3, #0
   18fe4:	0afffff5 	beq	18fc0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x30>
   18fe8:	e1a01005 	mov	r1, r5
   18fec:	e1a00008 	mov	r0, r8
   18ff0:	eb0012b7 	bl	1dad4 <CIPAddress::operator==(unsigned char const*) const>
   18ff4:	e3500000 	cmp	r0, #0
   18ff8:	0afffff2 	beq	18fc8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x38>
   18ffc:	e597319c 	ldr	r3, [r7, #412]	; 0x19c
   19000:	e3530000 	cmp	r3, #0
   19004:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19008:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1900c:	ea00241b 	b	22080 <LeaveCritical>
   19010:	e3560014 	cmp	r6, #20
   19014:	1a000005 	bne	19030 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xa0>
   19018:	e597319c 	ldr	r3, [r7, #412]	; 0x19c
   1901c:	e3530000 	cmp	r3, #0
   19020:	1afffff8 	bne	19008 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x78>
   19024:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19028:	eb0023e6 	bl	21fc8 <EnterCritical>
   1902c:	eaffffde 	b	18fac <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x1c>
   19030:	e0040694 	mul	r4, r4, r6
   19034:	e1a00008 	mov	r0, r8
   19038:	e284100d 	add	r1, r4, #13
   1903c:	e0871001 	add	r1, r7, r1
   19040:	eb001333 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   19044:	e2841011 	add	r1, r4, #17
   19048:	e0871001 	add	r1, r7, r1
   1904c:	e1a00009 	mov	r0, r9
   19050:	ebffefb2 	bl	14f20 <CMACAddress::CopyTo(unsigned char*) const>
   19054:	e0874004 	add	r4, r7, r4
   19058:	eb002734 	bl	22d30 <CTimer::Get()>
   1905c:	eb0024e3 	bl	223f0 <CTimer::GetTicks() const>
   19060:	e3a03002 	mov	r3, #2
   19064:	e5c4300c 	strb	r3, [r4, #12]
   19068:	e584001c 	str	r0, [r4, #28]
   1906c:	eaffffe9 	b	19018 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x88>

00019070 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)>:
   19070:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   19074:	e1a04000 	mov	r4, r0
   19078:	e5900000 	ldr	r0, [r0]
   1907c:	e24dd034 	sub	sp, sp, #52	; 0x34
   19080:	e1a09001 	mov	r9, r1
   19084:	e1a07002 	mov	r7, r2
   19088:	e3500000 	cmp	r0, #0
   1908c:	e1a05003 	mov	r5, r3
   19090:	0a00002e 	beq	19150 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0xe0>
   19094:	eb0011e1 	bl	1d820 <CNetConfig::GetIPAddress() const>
   19098:	e2508000 	subs	r8, r0, #0
   1909c:	0a000033 	beq	19170 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x100>
   190a0:	e5940004 	ldr	r0, [r4, #4]
   190a4:	e3500000 	cmp	r0, #0
   190a8:	0a000037 	beq	1918c <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x11c>
   190ac:	ebfffef4 	bl	18c84 <CNetDeviceLayer::GetMACAddress() const>
   190b0:	e2506000 	subs	r6, r0, #0
   190b4:	0a00003c 	beq	191ac <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x13c>
   190b8:	e1a00005 	mov	r0, r5
   190bc:	e28d1004 	add	r1, sp, #4
   190c0:	ebffef96 	bl	14f20 <CMACAddress::CopyTo(unsigned char*) const>
   190c4:	e28d100a 	add	r1, sp, #10
   190c8:	e1a00006 	mov	r0, r6
   190cc:	ebffef93 	bl	14f20 <CMACAddress::CopyTo(unsigned char*) const>
   190d0:	e3590000 	cmp	r9, #0
   190d4:	e1a00006 	mov	r0, r6
   190d8:	e28d101a 	add	r1, sp, #26
   190dc:	03a02c02 	moveq	r2, #512	; 0x200
   190e0:	13a02c01 	movne	r2, #256	; 0x100
   190e4:	e3003608 	movw	r3, #1544	; 0x608
   190e8:	e1cd31b0 	strh	r3, [sp, #16]
   190ec:	e3a03008 	mov	r3, #8
   190f0:	e1cd31b4 	strh	r3, [sp, #20]
   190f4:	e3a03004 	mov	r3, #4
   190f8:	e5cd3017 	strb	r3, [sp, #23]
   190fc:	e1cd21b8 	strh	r2, [sp, #24]
   19100:	e3a02c01 	mov	r2, #256	; 0x100
   19104:	e1cd21b2 	strh	r2, [sp, #18]
   19108:	e3a02006 	mov	r2, #6
   1910c:	e5cd2016 	strb	r2, [sp, #22]
   19110:	ebffef82 	bl	14f20 <CMACAddress::CopyTo(unsigned char*) const>
   19114:	e1a00008 	mov	r0, r8
   19118:	e28d1020 	add	r1, sp, #32
   1911c:	eb0012fc 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   19120:	e1a00005 	mov	r0, r5
   19124:	e28d1024 	add	r1, sp, #36	; 0x24
   19128:	ebffef7c 	bl	14f20 <CMACAddress::CopyTo(unsigned char*) const>
   1912c:	e1a00007 	mov	r0, r7
   19130:	e28d102a 	add	r1, sp, #42	; 0x2a
   19134:	eb0012f6 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   19138:	e28d1004 	add	r1, sp, #4
   1913c:	e5940004 	ldr	r0, [r4, #4]
   19140:	e3a0202a 	mov	r2, #42	; 0x2a
   19144:	ebfffee3 	bl	18cd8 <CNetDeviceLayer::Send(void const*, unsigned int)>
   19148:	e28dd034 	add	sp, sp, #52	; 0x34
   1914c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   19150:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   19154:	e30e0610 	movw	r0, #58896	; 0xe610
   19158:	e3401002 	movt	r1, #2
   1915c:	e3400002 	movt	r0, #2
   19160:	e300212e 	movw	r2, #302	; 0x12e
   19164:	eb002e8d 	bl	24ba0 <assertion_failed>
   19168:	e5940000 	ldr	r0, [r4]
   1916c:	eaffffc8 	b	19094 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x24>
   19170:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   19174:	e30e0760 	movw	r0, #59232	; 0xe760
   19178:	e3401002 	movt	r1, #2
   1917c:	e3400002 	movt	r0, #2
   19180:	e3a02e13 	mov	r2, #304	; 0x130
   19184:	eb002e85 	bl	24ba0 <assertion_failed>
   19188:	eaffffc4 	b	190a0 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x30>
   1918c:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   19190:	e30e0850 	movw	r0, #59472	; 0xe850
   19194:	e3401002 	movt	r1, #2
   19198:	e3400002 	movt	r0, #2
   1919c:	e3002132 	movw	r2, #306	; 0x132
   191a0:	eb002e7e 	bl	24ba0 <assertion_failed>
   191a4:	e5940004 	ldr	r0, [r4, #4]
   191a8:	eaffffbf 	b	190ac <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x3c>
   191ac:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   191b0:	e30e0864 	movw	r0, #59492	; 0xe864
   191b4:	e3401002 	movt	r1, #2
   191b8:	e3400002 	movt	r0, #2
   191bc:	e3a02f4d 	mov	r2, #308	; 0x134
   191c0:	eb002e76 	bl	24ba0 <assertion_failed>
   191c4:	eaffffbb 	b	190b8 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x48>

000191c8 <CARPHandler::Process()>:
   191c8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   191cc:	e1a04000 	mov	r4, r0
   191d0:	e5900000 	ldr	r0, [r0]
   191d4:	e24dd01c 	sub	sp, sp, #28
   191d8:	e3500000 	cmp	r0, #0
   191dc:	0a00006e 	beq	1939c <CARPHandler::Process()+0x1d4>
   191e0:	eb00118e 	bl	1d820 <CNetConfig::GetIPAddress() const>
   191e4:	e2506000 	subs	r6, r0, #0
   191e8:	0a000073 	beq	193bc <CARPHandler::Process()+0x1f4>
   191ec:	e59451a0 	ldr	r5, [r4, #416]	; 0x1a0
   191f0:	e3550000 	cmp	r5, #0
   191f4:	0a000077 	beq	193d8 <CARPHandler::Process()+0x210>
   191f8:	e5940008 	ldr	r0, [r4, #8]
   191fc:	e3500000 	cmp	r0, #0
   19200:	0a00007b 	beq	193f4 <CARPHandler::Process()+0x22c>
   19204:	e2858018 	add	r8, r5, #24
   19208:	e2857008 	add	r7, r5, #8
   1920c:	ea000000 	b	19214 <CARPHandler::Process()+0x4c>
   19210:	e5940008 	ldr	r0, [r4, #8]
   19214:	e3a02000 	mov	r2, #0
   19218:	e1a01005 	mov	r1, r5
   1921c:	eb0013e0 	bl	1e1a4 <CNetQueue::Dequeue(void*, void**)>
   19220:	e3500000 	cmp	r0, #0
   19224:	0a00002a 	beq	192d4 <CARPHandler::Process()+0x10c>
   19228:	e350001b 	cmp	r0, #27
   1922c:	9afffff7 	bls	19210 <CARPHandler::Process()+0x48>
   19230:	e1d530b0 	ldrh	r3, [r5]
   19234:	e3530c01 	cmp	r3, #256	; 0x100
   19238:	1afffff4 	bne	19210 <CARPHandler::Process()+0x48>
   1923c:	e1d530b2 	ldrh	r3, [r5, #2]
   19240:	e3530008 	cmp	r3, #8
   19244:	1afffff1 	bne	19210 <CARPHandler::Process()+0x48>
   19248:	e5d53004 	ldrb	r3, [r5, #4]
   1924c:	e3530006 	cmp	r3, #6
   19250:	1affffee 	bne	19210 <CARPHandler::Process()+0x48>
   19254:	e5d53005 	ldrb	r3, [r5, #5]
   19258:	e3530004 	cmp	r3, #4
   1925c:	1affffeb 	bne	19210 <CARPHandler::Process()+0x48>
   19260:	e1a00006 	mov	r0, r6
   19264:	eb0012c6 	bl	1dd84 <CIPAddress::IsNull() const>
   19268:	e3500000 	cmp	r0, #0
   1926c:	1affffe7 	bne	19210 <CARPHandler::Process()+0x48>
   19270:	e1a01008 	mov	r1, r8
   19274:	e1a00006 	mov	r0, r6
   19278:	eb001232 	bl	1db48 <CIPAddress::operator!=(unsigned char const*) const>
   1927c:	e2509000 	subs	r9, r0, #0
   19280:	1affffe2 	bne	19210 <CARPHandler::Process()+0x48>
   19284:	e1a01007 	mov	r1, r7
   19288:	e28d000c 	add	r0, sp, #12
   1928c:	ebffef08 	bl	14eb4 <CMACAddress::CMACAddress(unsigned char const*)>
   19290:	e28d0004 	add	r0, sp, #4
   19294:	e285100e 	add	r1, r5, #14
   19298:	eb00126a 	bl	1dc48 <CIPAddress::CIPAddress(unsigned char const*)>
   1929c:	e1d530b6 	ldrh	r3, [r5, #6]
   192a0:	e3530c01 	cmp	r3, #256	; 0x100
   192a4:	0a00005a 	beq	19414 <CARPHandler::Process()+0x24c>
   192a8:	e3530c02 	cmp	r3, #512	; 0x200
   192ac:	1a000003 	bne	192c0 <CARPHandler::Process()+0xf8>
   192b0:	e28d200c 	add	r2, sp, #12
   192b4:	e28d1004 	add	r1, sp, #4
   192b8:	e1a00004 	mov	r0, r4
   192bc:	ebffff09 	bl	18ee8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   192c0:	e28d0004 	add	r0, sp, #4
   192c4:	eb0011ca 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   192c8:	e28d000c 	add	r0, sp, #12
   192cc:	ebffeebe 	bl	14dcc <CMACAddress::~CMACAddress()>
   192d0:	eaffffce 	b	19210 <CARPHandler::Process()+0x48>
   192d4:	eb002695 	bl	22d30 <CTimer::Get()>
   192d8:	eb002444 	bl	223f0 <CTimer::GetTicks() const>
   192dc:	e3082889 	movw	r2, #34953	; 0x8889
   192e0:	e3482888 	movt	r2, #34952	; 0x8888
   192e4:	e1a06000 	mov	r6, r0
   192e8:	e308051f 	movw	r0, #34079	; 0x851f
   192ec:	e34501eb 	movt	r0, #20971	; 0x51eb
   192f0:	e0810096 	umull	r0, r1, r6, r0
   192f4:	e3a0003c 	mov	r0, #60	; 0x3c
   192f8:	e1a012a1 	lsr	r1, r1, #5
   192fc:	e0832291 	umull	r2, r3, r1, r2
   19300:	e1a032a3 	lsr	r3, r3, #5
   19304:	e0631390 	mls	r3, r0, r3, r1
   19308:	e3530000 	cmp	r3, #0
   1930c:	1a00001a 	bne	1937c <CARPHandler::Process()+0x1b4>
   19310:	e594019c 	ldr	r0, [r4, #412]	; 0x19c
   19314:	e3500000 	cmp	r0, #0
   19318:	1a00001c 	bne	19390 <CARPHandler::Process()+0x1c8>
   1931c:	e3a03000 	mov	r3, #0
   19320:	e1a01004 	mov	r1, r4
   19324:	e1a05003 	mov	r5, r3
   19328:	e3a0e014 	mov	lr, #20
   1932c:	e30e7a60 	movw	r7, #60000	; 0xea60
   19330:	ea000003 	b	19344 <CARPHandler::Process()+0x17c>
   19334:	e2833001 	add	r3, r3, #1
   19338:	e2811014 	add	r1, r1, #20
   1933c:	e3530014 	cmp	r3, #20
   19340:	0a00000b 	beq	19374 <CARPHandler::Process()+0x1ac>
   19344:	e022439e 	mla	r2, lr, r3, r4
   19348:	e5d2c00c 	ldrb	ip, [r2, #12]
   1934c:	e35c0002 	cmp	ip, #2
   19350:	1afffff7 	bne	19334 <CARPHandler::Process()+0x16c>
   19354:	e591c01c 	ldr	ip, [r1, #28]
   19358:	e2833001 	add	r3, r3, #1
   1935c:	e2811014 	add	r1, r1, #20
   19360:	e087c00c 	add	ip, r7, ip
   19364:	e156000c 	cmp	r6, ip
   19368:	85c2500c 	strbhi	r5, [r2, #12]
   1936c:	e3530014 	cmp	r3, #20
   19370:	1afffff3 	bne	19344 <CARPHandler::Process()+0x17c>
   19374:	e3500000 	cmp	r0, #0
   19378:	1a000001 	bne	19384 <CARPHandler::Process()+0x1bc>
   1937c:	e28dd01c 	add	sp, sp, #28
   19380:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   19384:	eb00233d 	bl	22080 <LeaveCritical>
   19388:	e28dd01c 	add	sp, sp, #28
   1938c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   19390:	eb00230c 	bl	21fc8 <EnterCritical>
   19394:	e594019c 	ldr	r0, [r4, #412]	; 0x19c
   19398:	eaffffdf 	b	1931c <CARPHandler::Process()+0x154>
   1939c:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   193a0:	e30e0610 	movw	r0, #58896	; 0xe610
   193a4:	e3401002 	movt	r1, #2
   193a8:	e3400002 	movt	r0, #2
   193ac:	e3a02057 	mov	r2, #87	; 0x57
   193b0:	eb002dfa 	bl	24ba0 <assertion_failed>
   193b4:	e5940000 	ldr	r0, [r4]
   193b8:	eaffff88 	b	191e0 <CARPHandler::Process()+0x18>
   193bc:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   193c0:	e30e0760 	movw	r0, #59232	; 0xe760
   193c4:	e3401002 	movt	r1, #2
   193c8:	e3400002 	movt	r0, #2
   193cc:	e3a02059 	mov	r2, #89	; 0x59
   193d0:	eb002df2 	bl	24ba0 <assertion_failed>
   193d4:	eaffff84 	b	191ec <CARPHandler::Process()+0x24>
   193d8:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   193dc:	e30e0788 	movw	r0, #59272	; 0xe788
   193e0:	e3401002 	movt	r1, #2
   193e4:	e3400002 	movt	r0, #2
   193e8:	e3a0205c 	mov	r2, #92	; 0x5c
   193ec:	eb002deb 	bl	24ba0 <assertion_failed>
   193f0:	eaffff80 	b	191f8 <CARPHandler::Process()+0x30>
   193f4:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   193f8:	e30e0914 	movw	r0, #59668	; 0xe914
   193fc:	e3401002 	movt	r1, #2
   19400:	e3400002 	movt	r0, #2
   19404:	e3a0205f 	mov	r2, #95	; 0x5f
   19408:	eb002de4 	bl	24ba0 <assertion_failed>
   1940c:	e5940008 	ldr	r0, [r4, #8]
   19410:	eaffff7b 	b	19204 <CARPHandler::Process()+0x3c>
   19414:	e1a01009 	mov	r1, r9
   19418:	e28d2004 	add	r2, sp, #4
   1941c:	e1a00004 	mov	r0, r4
   19420:	e28d300c 	add	r3, sp, #12
   19424:	ebffff11 	bl	19070 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)>
   19428:	e28d200c 	add	r2, sp, #12
   1942c:	e28d1004 	add	r1, sp, #4
   19430:	e1a00004 	mov	r0, r4
   19434:	ebfffed5 	bl	18f90 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   19438:	eaffffa0 	b	192c0 <CARPHandler::Process()+0xf8>

0001943c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)>:
   1943c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19440:	e1a06000 	mov	r6, r0
   19444:	e590019c 	ldr	r0, [r0, #412]	; 0x19c
   19448:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   1944c:	e1a09001 	mov	r9, r1
   19450:	e3500000 	cmp	r0, #0
   19454:	e58d2014 	str	r2, [sp, #20]
   19458:	1a000067 	bne	195fc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1c0>
   1945c:	e3e0a000 	mvn	sl, #0
   19460:	e3a08014 	mov	r8, #20
   19464:	e30e38e8 	movw	r3, #59624	; 0xe8e8
   19468:	e30b2138 	movw	r2, #45368	; 0xb138
   1946c:	e3403002 	movt	r3, #2
   19470:	e3402002 	movt	r2, #2
   19474:	e58d300c 	str	r3, [sp, #12]
   19478:	e286500d 	add	r5, r6, #13
   1947c:	e58d2010 	str	r2, [sp, #16]
   19480:	e1a0b00a 	mov	fp, sl
   19484:	e1a07008 	mov	r7, r8
   19488:	e3a04000 	mov	r4, #0
   1948c:	ea000013 	b	194e0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0xa4>
   19490:	3a000056 	bcc	195f0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1b4>
   19494:	e35c0002 	cmp	ip, #2
   19498:	e0452006 	sub	r2, r5, r6
   1949c:	e1a01005 	mov	r1, r5
   194a0:	e1a00009 	mov	r0, r9
   194a4:	e242200d 	sub	r2, r2, #13
   194a8:	1a000021 	bne	19534 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0xf8>
   194ac:	e595c00f 	ldr	ip, [r5, #15]
   194b0:	e58d2008 	str	r2, [sp, #8]
   194b4:	e15c000a 	cmp	ip, sl
   194b8:	31a0a00c 	movcc	sl, ip
   194bc:	31a0b004 	movcc	fp, r4
   194c0:	eb001183 	bl	1dad4 <CIPAddress::operator==(unsigned char const*) const>
   194c4:	e59d2008 	ldr	r2, [sp, #8]
   194c8:	e3500000 	cmp	r0, #0
   194cc:	1a00005d 	bne	19648 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x20c>
   194d0:	e2844001 	add	r4, r4, #1
   194d4:	e2855014 	add	r5, r5, #20
   194d8:	e3540014 	cmp	r4, #20
   194dc:	0a00001c 	beq	19554 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x118>
   194e0:	e0226497 	mla	r2, r7, r4, r6
   194e4:	e5d2c00c 	ldrb	ip, [r2, #12]
   194e8:	e6efc07c 	uxtb	ip, ip
   194ec:	e35c0001 	cmp	ip, #1
   194f0:	1affffe6 	bne	19490 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x54>
   194f4:	e1a01005 	mov	r1, r5
   194f8:	e1a00009 	mov	r0, r9
   194fc:	e58d2008 	str	r2, [sp, #8]
   19500:	eb001173 	bl	1dad4 <CIPAddress::operator==(unsigned char const*) const>
   19504:	e3500000 	cmp	r0, #0
   19508:	0afffff0 	beq	194d0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x94>
   1950c:	eb002607 	bl	22d30 <CTimer::Get()>
   19510:	eb0023b6 	bl	223f0 <CTimer::GetTicks() const>
   19514:	e596219c 	ldr	r2, [r6, #412]	; 0x19c
   19518:	e59d3008 	ldr	r3, [sp, #8]
   1951c:	e3520000 	cmp	r2, #0
   19520:	e583001c 	str	r0, [r3, #28]
   19524:	0a00002e 	beq	195e4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1a8>
   19528:	eb0022d4 	bl	22080 <LeaveCritical>
   1952c:	e3a00000 	mov	r0, #0
   19530:	ea00002c 	b	195e8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1ac>
   19534:	e3a020ce 	mov	r2, #206	; 0xce
   19538:	e59d100c 	ldr	r1, [sp, #12]
   1953c:	e59d0010 	ldr	r0, [sp, #16]
   19540:	e2844001 	add	r4, r4, #1
   19544:	eb002d95 	bl	24ba0 <assertion_failed>
   19548:	e3540014 	cmp	r4, #20
   1954c:	e2855014 	add	r5, r5, #20
   19550:	1affffe2 	bne	194e0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0xa4>
   19554:	e3580014 	cmp	r8, #20
   19558:	0a00002b 	beq	1960c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1d0>
   1955c:	e3a01014 	mov	r1, #20
   19560:	e3a03001 	mov	r3, #1
   19564:	e0010891 	mul	r1, r1, r8
   19568:	e1a00009 	mov	r0, r9
   1956c:	e0864001 	add	r4, r6, r1
   19570:	e281100d 	add	r1, r1, #13
   19574:	e0861001 	add	r1, r6, r1
   19578:	e5c4300c 	strb	r3, [r4, #12]
   1957c:	eb0011e4 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   19580:	eb0025ea 	bl	22d30 <CTimer::Get()>
   19584:	eb002399 	bl	223f0 <CTimer::GetTicks() const>
   19588:	e584001c 	str	r0, [r4, #28]
   1958c:	eb0025e7 	bl	22d30 <CTimer::Get()>
   19590:	e1a03008 	mov	r3, r8
   19594:	e58d6000 	str	r6, [sp]
   19598:	e3082d38 	movw	r2, #36152	; 0x8d38
   1959c:	e3a01032 	mov	r1, #50	; 0x32
   195a0:	e3402001 	movt	r2, #1
   195a4:	eb00241a 	bl	22614 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   195a8:	e596319c 	ldr	r3, [r6, #412]	; 0x19c
   195ac:	e3530000 	cmp	r3, #0
   195b0:	e5840018 	str	r0, [r4, #24]
   195b4:	1a000012 	bne	19604 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1c8>
   195b8:	e28d001c 	add	r0, sp, #28
   195bc:	ebffedff 	bl	14dc0 <CMACAddress::CMACAddress()>
   195c0:	e28d001c 	add	r0, sp, #28
   195c4:	ebffee3f 	bl	14ec8 <CMACAddress::SetBroadcast()>
   195c8:	e1a00006 	mov	r0, r6
   195cc:	e28d301c 	add	r3, sp, #28
   195d0:	e1a02009 	mov	r2, r9
   195d4:	e3a01001 	mov	r1, #1
   195d8:	ebfffea4 	bl	19070 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)>
   195dc:	e28d001c 	add	r0, sp, #28
   195e0:	ebffedf9 	bl	14dcc <CMACAddress::~CMACAddress()>
   195e4:	e3a00000 	mov	r0, #0
   195e8:	e28dd02c 	add	sp, sp, #44	; 0x2c
   195ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195f0:	e3580014 	cmp	r8, #20
   195f4:	01a08004 	moveq	r8, r4
   195f8:	eaffffb4 	b	194d0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x94>
   195fc:	eb002271 	bl	21fc8 <EnterCritical>
   19600:	eaffff95 	b	1945c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x20>
   19604:	eb00229d 	bl	22080 <LeaveCritical>
   19608:	eaffffea 	b	195b8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x17c>
   1960c:	e35b0013 	cmp	fp, #19
   19610:	8a000005 	bhi	1962c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1f0>
   19614:	e3a03014 	mov	r3, #20
   19618:	e1a0800b 	mov	r8, fp
   1961c:	e02b6b93 	mla	fp, r3, fp, r6
   19620:	e3a03000 	mov	r3, #0
   19624:	e5cb300c 	strb	r3, [fp, #12]
   19628:	eaffffcb 	b	1955c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x120>
   1962c:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   19630:	e30e0938 	movw	r0, #59704	; 0xe938
   19634:	e3401002 	movt	r1, #2
   19638:	e3400002 	movt	r0, #2
   1963c:	e3a020d6 	mov	r2, #214	; 0xd6
   19640:	eb002d56 	bl	24ba0 <assertion_failed>
   19644:	eafffff2 	b	19614 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1d8>
   19648:	e1a03002 	mov	r3, r2
   1964c:	e59d2014 	ldr	r2, [sp, #20]
   19650:	e3520000 	cmp	r2, #0
   19654:	0a00000f 	beq	19698 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x25c>
   19658:	e2833011 	add	r3, r3, #17
   1965c:	e59d0014 	ldr	r0, [sp, #20]
   19660:	e0861003 	add	r1, r6, r3
   19664:	ebffee00 	bl	14e6c <CMACAddress::Set(unsigned char const*)>
   19668:	eb0025b0 	bl	22d30 <CTimer::Get()>
   1966c:	eb00235f 	bl	223f0 <CTimer::GetTicks() const>
   19670:	e3a03014 	mov	r3, #20
   19674:	e0246493 	mla	r4, r3, r4, r6
   19678:	e596319c 	ldr	r3, [r6, #412]	; 0x19c
   1967c:	e3530000 	cmp	r3, #0
   19680:	e584001c 	str	r0, [r4, #28]
   19684:	03a00001 	moveq	r0, #1
   19688:	0affffd6 	beq	195e8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1ac>
   1968c:	eb00227b 	bl	22080 <LeaveCritical>
   19690:	e3a00001 	mov	r0, #1
   19694:	eaffffd3 	b	195e8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1ac>
   19698:	e30e18e8 	movw	r1, #59624	; 0xe8e8
   1969c:	e30e0924 	movw	r0, #59684	; 0xe924
   196a0:	e3401002 	movt	r1, #2
   196a4:	e3400002 	movt	r0, #2
   196a8:	e3a020c3 	mov	r2, #195	; 0xc3
   196ac:	eb002d3b 	bl	24ba0 <assertion_failed>
   196b0:	e59d3008 	ldr	r3, [sp, #8]
   196b4:	eaffffe7 	b	19658 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x21c>

000196b8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   196b8:	e92d4010 	push	{r4, lr}
   196bc:	e3510000 	cmp	r1, #0
   196c0:	e59dc008 	ldr	ip, [sp, #8]
   196c4:	e1a04000 	mov	r4, r0
   196c8:	e5803008 	str	r3, [r0, #8]
   196cc:	e3a03000 	mov	r3, #0
   196d0:	e5801000 	str	r1, [r0]
   196d4:	e5802004 	str	r2, [r0, #4]
   196d8:	e580c00c 	str	ip, [r0, #12]
   196dc:	e5803010 	str	r3, [r0, #16]
   196e0:	0a000017 	beq	19744 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x8c>
   196e4:	e3520000 	cmp	r2, #0
   196e8:	0a00001d 	beq	19764 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0xac>
   196ec:	e5943008 	ldr	r3, [r4, #8]
   196f0:	e3530000 	cmp	r3, #0
   196f4:	0a000021 	beq	19780 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0xc8>
   196f8:	e594300c 	ldr	r3, [r4, #12]
   196fc:	e3530000 	cmp	r3, #0
   19700:	0a000004 	beq	19718 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x60>
   19704:	e3a00d19 	mov	r0, #1600	; 0x640
   19708:	eb002223 	bl	21f9c <operator new[](unsigned int)>
   1970c:	e5840010 	str	r0, [r4, #16]
   19710:	e1a00004 	mov	r0, r4
   19714:	e8bd8010 	pop	{r4, pc}
   19718:	e3a0205e 	mov	r2, #94	; 0x5e
   1971c:	e30e1960 	movw	r1, #59744	; 0xe960
   19720:	e30e0970 	movw	r0, #59760	; 0xe970
   19724:	e3401002 	movt	r1, #2
   19728:	e3400002 	movt	r0, #2
   1972c:	eb002d1b 	bl	24ba0 <assertion_failed>
   19730:	e3a00d19 	mov	r0, #1600	; 0x640
   19734:	eb002218 	bl	21f9c <operator new[](unsigned int)>
   19738:	e5840010 	str	r0, [r4, #16]
   1973c:	e1a00004 	mov	r0, r4
   19740:	e8bd8010 	pop	{r4, pc}
   19744:	e3a0205b 	mov	r2, #91	; 0x5b
   19748:	e30e1960 	movw	r1, #59744	; 0xe960
   1974c:	e30e0610 	movw	r0, #58896	; 0xe610
   19750:	e3401002 	movt	r1, #2
   19754:	e3400002 	movt	r0, #2
   19758:	eb002d10 	bl	24ba0 <assertion_failed>
   1975c:	e5942004 	ldr	r2, [r4, #4]
   19760:	eaffffdf 	b	196e4 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x2c>
   19764:	e30e1960 	movw	r1, #59744	; 0xe960
   19768:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   1976c:	e3401002 	movt	r1, #2
   19770:	e3400002 	movt	r0, #2
   19774:	e3a0205c 	mov	r2, #92	; 0x5c
   19778:	eb002d08 	bl	24ba0 <assertion_failed>
   1977c:	eaffffda 	b	196ec <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x34>
   19780:	e30e1960 	movw	r1, #59744	; 0xe960
   19784:	e30e0914 	movw	r0, #59668	; 0xe914
   19788:	e3401002 	movt	r1, #2
   1978c:	e3400002 	movt	r0, #2
   19790:	e3a0205d 	mov	r2, #93	; 0x5d
   19794:	eb002d01 	bl	24ba0 <assertion_failed>
   19798:	eaffffd6 	b	196f8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x40>

0001979c <CICMPHandler::~CICMPHandler()>:
   1979c:	e92d4010 	push	{r4, lr}
   197a0:	e1a04000 	mov	r4, r0
   197a4:	e5900010 	ldr	r0, [r0, #16]
   197a8:	e3500000 	cmp	r0, #0
   197ac:	0a000000 	beq	197b4 <CICMPHandler::~CICMPHandler()+0x18>
   197b0:	eb0021fb 	bl	21fa4 <operator delete[](void*)>
   197b4:	e1a00004 	mov	r0, r4
   197b8:	e8bd8010 	pop	{r4, pc}

000197bc <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   197bc:	e3510002 	cmp	r1, #2
   197c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   197c4:	e1a07001 	mov	r7, r1
   197c8:	e24dd014 	sub	sp, sp, #20
   197cc:	e1a06000 	mov	r6, r0
   197d0:	e1a04002 	mov	r4, r2
   197d4:	e1a05003 	mov	r5, r3
   197d8:	ca00001d 	bgt	19854 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x98>
   197dc:	e3540000 	cmp	r4, #0
   197e0:	e5cd7000 	strb	r7, [sp]
   197e4:	0a000029 	beq	19890 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xd4>
   197e8:	e5d43009 	ldrb	r3, [r4, #9]
   197ec:	e3a02004 	mov	r2, #4
   197f0:	e2841010 	add	r1, r4, #16
   197f4:	e28d0002 	add	r0, sp, #2
   197f8:	e5cd3001 	strb	r3, [sp, #1]
   197fc:	eb002671 	bl	231c8 <memcpy>
   19800:	e284100c 	add	r1, r4, #12
   19804:	e3a02004 	mov	r2, #4
   19808:	e28d0006 	add	r0, sp, #6
   1980c:	eb00266d 	bl	231c8 <memcpy>
   19810:	e3550000 	cmp	r5, #0
   19814:	0a000024 	beq	198ac <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf0>
   19818:	e596000c 	ldr	r0, [r6, #12]
   1981c:	e1d520b2 	ldrh	r2, [r5, #2]
   19820:	e1d530b0 	ldrh	r3, [r5]
   19824:	e3500000 	cmp	r0, #0
   19828:	e6bf2fb2 	rev16	r2, r2
   1982c:	e1cd20ba 	strh	r2, [sp, #10]
   19830:	e6bf3fb3 	rev16	r3, r3
   19834:	e1cd30bc 	strh	r3, [sp, #12]
   19838:	0a00000c 	beq	19870 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xb4>
   1983c:	e3a03000 	mov	r3, #0
   19840:	e3a0200e 	mov	r2, #14
   19844:	e1a0100d 	mov	r1, sp
   19848:	eb001204 	bl	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1984c:	e28dd014 	add	sp, sp, #20
   19850:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   19854:	e30e1960 	movw	r1, #59744	; 0xe960
   19858:	e30e098c 	movw	r0, #59788	; 0xe98c
   1985c:	e3401002 	movt	r1, #2
   19860:	e3400002 	movt	r0, #2
   19864:	e3a020f1 	mov	r2, #241	; 0xf1
   19868:	eb002ccc 	bl	24ba0 <assertion_failed>
   1986c:	eaffffda 	b	197dc <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x20>
   19870:	e30e1960 	movw	r1, #59744	; 0xe960
   19874:	e30e0970 	movw	r0, #59760	; 0xe970
   19878:	e3401002 	movt	r1, #2
   1987c:	e3400002 	movt	r0, #2
   19880:	e3a020ff 	mov	r2, #255	; 0xff
   19884:	eb002cc5 	bl	24ba0 <assertion_failed>
   19888:	e596000c 	ldr	r0, [r6, #12]
   1988c:	eaffffea 	b	1983c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x80>
   19890:	e30e1960 	movw	r1, #59744	; 0xe960
   19894:	e30e09ac 	movw	r0, #59820	; 0xe9ac
   19898:	e3401002 	movt	r1, #2
   1989c:	e3400002 	movt	r0, #2
   198a0:	e3a020f6 	mov	r2, #246	; 0xf6
   198a4:	eb002cbd 	bl	24ba0 <assertion_failed>
   198a8:	eaffffce 	b	197e8 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x2c>
   198ac:	e30e1960 	movw	r1, #59744	; 0xe960
   198b0:	e30e09bc 	movw	r0, #59836	; 0xe9bc
   198b4:	e3401002 	movt	r1, #2
   198b8:	e3400002 	movt	r0, #2
   198bc:	e3a020fb 	mov	r2, #251	; 0xfb
   198c0:	eb002cb6 	bl	24ba0 <assertion_failed>
   198c4:	eaffffd3 	b	19818 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x5c>

000198c8 <CICMPHandler::Process()>:
   198c8:	e5903008 	ldr	r3, [r0, #8]
   198cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198d0:	e3530000 	cmp	r3, #0
   198d4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   198d8:	e1a05000 	mov	r5, r0
   198dc:	0a000088 	beq	19b04 <CICMPHandler::Process()+0x23c>
   198e0:	e5951010 	ldr	r1, [r5, #16]
   198e4:	e3510000 	cmp	r1, #0
   198e8:	0a00008c 	beq	19b20 <CICMPHandler::Process()+0x258>
   198ec:	e30e7960 	movw	r7, #59744	; 0xe960
   198f0:	e30e96f4 	movw	r9, #59124	; 0xe6f4
   198f4:	e30e89d4 	movw	r8, #59860	; 0xe9d4
   198f8:	e3407002 	movt	r7, #2
   198fc:	e3409002 	movt	r9, #2
   19900:	e3408002 	movt	r8, #2
   19904:	ea000004 	b	1991c <CICMPHandler::Process()+0x54>
   19908:	e28d0018 	add	r0, sp, #24
   1990c:	eb001038 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   19910:	e28d0010 	add	r0, sp, #16
   19914:	eb001036 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   19918:	e5951010 	ldr	r1, [r5, #16]
   1991c:	e28d200c 	add	r2, sp, #12
   19920:	e5950008 	ldr	r0, [r5, #8]
   19924:	eb00121e 	bl	1e1a4 <CNetQueue::Dequeue(void*, void**)>
   19928:	e2506000 	subs	r6, r0, #0
   1992c:	0a000051 	beq	19a78 <CICMPHandler::Process()+0x1b0>
   19930:	e59d400c 	ldr	r4, [sp, #12]
   19934:	e3540000 	cmp	r4, #0
   19938:	0a000056 	beq	19a98 <CICMPHandler::Process()+0x1d0>
   1993c:	e5d43000 	ldrb	r3, [r4]
   19940:	e3530001 	cmp	r3, #1
   19944:	0a000003 	beq	19958 <CICMPHandler::Process()+0x90>
   19948:	e3a02079 	mov	r2, #121	; 0x79
   1994c:	e1a01007 	mov	r1, r7
   19950:	e1a00008 	mov	r0, r8
   19954:	eb002c91 	bl	24ba0 <assertion_failed>
   19958:	e2841001 	add	r1, r4, #1
   1995c:	e28d0010 	add	r0, sp, #16
   19960:	eb0010b8 	bl	1dc48 <CIPAddress::CIPAddress(unsigned char const*)>
   19964:	e2841005 	add	r1, r4, #5
   19968:	e28d0018 	add	r0, sp, #24
   1996c:	eb0010b5 	bl	1dc48 <CIPAddress::CIPAddress(unsigned char const*)>
   19970:	e1a00004 	mov	r0, r4
   19974:	e3a01009 	mov	r1, #9
   19978:	eb00218a 	bl	21fa8 <operator delete(void*, unsigned int)>
   1997c:	e5953000 	ldr	r3, [r5]
   19980:	e3530000 	cmp	r3, #0
   19984:	0a00003d 	beq	19a80 <CICMPHandler::Process()+0x1b8>
   19988:	e28d0018 	add	r0, sp, #24
   1998c:	eb00110b 	bl	1ddc0 <CIPAddress::IsBroadcast() const>
   19990:	e3500000 	cmp	r0, #0
   19994:	1affffdb 	bne	19908 <CICMPHandler::Process()+0x40>
   19998:	e5950000 	ldr	r0, [r5]
   1999c:	eb000fa9 	bl	1d848 <CNetConfig::GetBroadcastAddress() const>
   199a0:	e1a01000 	mov	r1, r0
   199a4:	e28d0018 	add	r0, sp, #24
   199a8:	eb001012 	bl	1d9f8 <CIPAddress::operator==(CIPAddress const&) const>
   199ac:	e3500000 	cmp	r0, #0
   199b0:	1affffd4 	bne	19908 <CICMPHandler::Process()+0x40>
   199b4:	e3560007 	cmp	r6, #7
   199b8:	9affffd2 	bls	19908 <CICMPHandler::Process()+0x40>
   199bc:	e5954010 	ldr	r4, [r5, #16]
   199c0:	e1a01006 	mov	r1, r6
   199c4:	e1a00004 	mov	r0, r4
   199c8:	eb0012d0 	bl	1e510 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   199cc:	e3500000 	cmp	r0, #0
   199d0:	1affffcc 	bne	19908 <CICMPHandler::Process()+0x40>
   199d4:	e5d43000 	ldrb	r3, [r4]
   199d8:	e3530008 	cmp	r3, #8
   199dc:	0a000032 	beq	19aac <CICMPHandler::Process()+0x1e4>
   199e0:	e356001c 	cmp	r6, #28
   199e4:	9affffc7 	bls	19908 <CICMPHandler::Process()+0x40>
   199e8:	e595a010 	ldr	sl, [r5, #16]
   199ec:	e5da3008 	ldrb	r3, [sl, #8]
   199f0:	e203b00f 	and	fp, r3, #15
   199f4:	e24b2005 	sub	r2, fp, #5
   199f8:	e3520001 	cmp	r2, #1
   199fc:	8affffc1 	bhi	19908 <CICMPHandler::Process()+0x40>
   19a00:	e1a03243 	asr	r3, r3, #4
   19a04:	e3530004 	cmp	r3, #4
   19a08:	1affffbe 	bne	19908 <CICMPHandler::Process()+0x40>
   19a0c:	e5950000 	ldr	r0, [r5]
   19a10:	eb000f82 	bl	1d820 <CNetConfig::GetIPAddress() const>
   19a14:	e28a1014 	add	r1, sl, #20
   19a18:	eb00104a 	bl	1db48 <CIPAddress::operator!=(unsigned char const*) const>
   19a1c:	e3500000 	cmp	r0, #0
   19a20:	1affffb8 	bne	19908 <CICMPHandler::Process()+0x40>
   19a24:	e1a0b10b 	lsl	fp, fp, #2
   19a28:	e28b3010 	add	r3, fp, #16
   19a2c:	e1560003 	cmp	r6, r3
   19a30:	3affffb4 	bcc	19908 <CICMPHandler::Process()+0x40>
   19a34:	e5d43000 	ldrb	r3, [r4]
   19a38:	e28a6008 	add	r6, sl, #8
   19a3c:	e086b00b 	add	fp, r6, fp
   19a40:	e2433003 	sub	r3, r3, #3
   19a44:	e3530009 	cmp	r3, #9
   19a48:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   19a4c:	eaffffad 	b	19908 <CICMPHandler::Process()+0x40>
   19a50:	00019c08 	.word	0x00019c08
   19a54:	00019908 	.word	0x00019908
   19a58:	00019bb8 	.word	0x00019bb8
   19a5c:	00019908 	.word	0x00019908
   19a60:	00019908 	.word	0x00019908
   19a64:	00019908 	.word	0x00019908
   19a68:	00019908 	.word	0x00019908
   19a6c:	00019908 	.word	0x00019908
   19a70:	00019b7c 	.word	0x00019b7c
   19a74:	00019b40 	.word	0x00019b40
   19a78:	e28dd02c 	add	sp, sp, #44	; 0x2c
   19a7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a80:	e30e0610 	movw	r0, #58896	; 0xe610
   19a84:	e3a02081 	mov	r2, #129	; 0x81
   19a88:	e3400002 	movt	r0, #2
   19a8c:	e1a01007 	mov	r1, r7
   19a90:	eb002c42 	bl	24ba0 <assertion_failed>
   19a94:	eaffffbb 	b	19988 <CICMPHandler::Process()+0xc0>
   19a98:	e3a02078 	mov	r2, #120	; 0x78
   19a9c:	e1a01007 	mov	r1, r7
   19aa0:	e1a00009 	mov	r0, r9
   19aa4:	eb002c3d 	bl	24ba0 <assertion_failed>
   19aa8:	eaffffa3 	b	1993c <CICMPHandler::Process()+0x74>
   19aac:	e5d43001 	ldrb	r3, [r4, #1]
   19ab0:	e3530000 	cmp	r3, #0
   19ab4:	1affff93 	bne	19908 <CICMPHandler::Process()+0x40>
   19ab8:	e5c43000 	strb	r3, [r4]
   19abc:	e1a01006 	mov	r1, r6
   19ac0:	e5c43001 	strb	r3, [r4, #1]
   19ac4:	e5c43002 	strb	r3, [r4, #2]
   19ac8:	e5c43003 	strb	r3, [r4, #3]
   19acc:	e5950010 	ldr	r0, [r5, #16]
   19ad0:	eb00128e 	bl	1e510 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   19ad4:	e5951004 	ldr	r1, [r5, #4]
   19ad8:	e3510000 	cmp	r1, #0
   19adc:	e1c400b2 	strh	r0, [r4, #2]
   19ae0:	0a000057 	beq	19c44 <CICMPHandler::Process()+0x37c>
   19ae4:	e5952010 	ldr	r2, [r5, #16]
   19ae8:	e1a03006 	mov	r3, r6
   19aec:	e1a00001 	mov	r0, r1
   19af0:	e3a01001 	mov	r1, #1
   19af4:	e58d1000 	str	r1, [sp]
   19af8:	e28d1010 	add	r1, sp, #16
   19afc:	ebfff8f6 	bl	17edc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   19b00:	eaffff80 	b	19908 <CICMPHandler::Process()+0x40>
   19b04:	e30e1960 	movw	r1, #59744	; 0xe960
   19b08:	e30e0914 	movw	r0, #59668	; 0xe914
   19b0c:	e3401002 	movt	r1, #2
   19b10:	e3400002 	movt	r0, #2
   19b14:	e3a02073 	mov	r2, #115	; 0x73
   19b18:	eb002c20 	bl	24ba0 <assertion_failed>
   19b1c:	eaffff6f 	b	198e0 <CICMPHandler::Process()+0x18>
   19b20:	e30e1960 	movw	r1, #59744	; 0xe960
   19b24:	e30c0424 	movw	r0, #50212	; 0xc424
   19b28:	e3401002 	movt	r1, #2
   19b2c:	e3400002 	movt	r0, #2
   19b30:	e3a02074 	mov	r2, #116	; 0x74
   19b34:	eb002c19 	bl	24ba0 <assertion_failed>
   19b38:	e5951010 	ldr	r1, [r5, #16]
   19b3c:	eaffff6a 	b	198ec <CICMPHandler::Process()+0x24>
   19b40:	eb002d98 	bl	251a8 <CLogger::Get()>
   19b44:	e5d42001 	ldrb	r2, [r4, #1]
   19b48:	e30e3a2c 	movw	r3, #59948	; 0xea2c
   19b4c:	e30e1958 	movw	r1, #59736	; 0xe958
   19b50:	e3403002 	movt	r3, #2
   19b54:	e3401002 	movt	r1, #2
   19b58:	e58d2000 	str	r2, [sp]
   19b5c:	e3a02002 	mov	r2, #2
   19b60:	eb002e6d 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19b64:	e1a0300b 	mov	r3, fp
   19b68:	e1a02006 	mov	r2, r6
   19b6c:	e3a01002 	mov	r1, #2
   19b70:	e1a00005 	mov	r0, r5
   19b74:	ebffff10 	bl	197bc <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   19b78:	eaffff62 	b	19908 <CICMPHandler::Process()+0x40>
   19b7c:	eb002d89 	bl	251a8 <CLogger::Get()>
   19b80:	e5d42001 	ldrb	r2, [r4, #1]
   19b84:	e30e3a18 	movw	r3, #59928	; 0xea18
   19b88:	e30e1958 	movw	r1, #59736	; 0xe958
   19b8c:	e3403002 	movt	r3, #2
   19b90:	e3401002 	movt	r1, #2
   19b94:	e58d2000 	str	r2, [sp]
   19b98:	e3a02002 	mov	r2, #2
   19b9c:	eb002e5e 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19ba0:	e1a0300b 	mov	r3, fp
   19ba4:	e1a02006 	mov	r2, r6
   19ba8:	e3a01001 	mov	r1, #1
   19bac:	e1a00005 	mov	r0, r5
   19bb0:	ebffff01 	bl	197bc <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   19bb4:	eaffff53 	b	19908 <CICMPHandler::Process()+0x40>
   19bb8:	e2841004 	add	r1, r4, #4
   19bbc:	e28d0020 	add	r0, sp, #32
   19bc0:	eb001020 	bl	1dc48 <CIPAddress::CIPAddress(unsigned char const*)>
   19bc4:	e5953004 	ldr	r3, [r5, #4]
   19bc8:	e3530000 	cmp	r3, #0
   19bcc:	0a00003d 	beq	19cc8 <CICMPHandler::Process()+0x400>
   19bd0:	e5950000 	ldr	r0, [r5]
   19bd4:	eb000f11 	bl	1d820 <CNetConfig::GetIPAddress() const>
   19bd8:	e1a06000 	mov	r6, r0
   19bdc:	e5950000 	ldr	r0, [r5]
   19be0:	eb000f12 	bl	1d830 <CNetConfig::GetNetMask() const>
   19be4:	e1a01006 	mov	r1, r6
   19be8:	e1a02000 	mov	r2, r0
   19bec:	e28d0020 	add	r0, sp, #32
   19bf0:	eb00109d 	bl	1de6c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   19bf4:	e3500000 	cmp	r0, #0
   19bf8:	1a000018 	bne	19c60 <CICMPHandler::Process()+0x398>
   19bfc:	e28d0020 	add	r0, sp, #32
   19c00:	eb000f7b 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   19c04:	eaffff3f 	b	19908 <CICMPHandler::Process()+0x40>
   19c08:	eb002d66 	bl	251a8 <CLogger::Get()>
   19c0c:	e5d42001 	ldrb	r2, [r4, #1]
   19c10:	e30e39f8 	movw	r3, #59896	; 0xe9f8
   19c14:	e30e1958 	movw	r1, #59736	; 0xe958
   19c18:	e3403002 	movt	r3, #2
   19c1c:	e3401002 	movt	r1, #2
   19c20:	e58d2000 	str	r2, [sp]
   19c24:	e3a02004 	mov	r2, #4
   19c28:	eb002e3b 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19c2c:	e1a0300b 	mov	r3, fp
   19c30:	e1a02006 	mov	r2, r6
   19c34:	e3a01000 	mov	r1, #0
   19c38:	e1a00005 	mov	r0, r5
   19c3c:	ebfffede 	bl	197bc <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   19c40:	eaffff30 	b	19908 <CICMPHandler::Process()+0x40>
   19c44:	e1a01007 	mov	r1, r7
   19c48:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   19c4c:	e3a0209e 	mov	r2, #158	; 0x9e
   19c50:	e3400002 	movt	r0, #2
   19c54:	eb002bd1 	bl	24ba0 <assertion_failed>
   19c58:	e5951004 	ldr	r1, [r5, #4]
   19c5c:	eaffffa0 	b	19ae4 <CICMPHandler::Process()+0x21c>
   19c60:	e28aa018 	add	sl, sl, #24
   19c64:	e5950004 	ldr	r0, [r5, #4]
   19c68:	e1a0100a 	mov	r1, sl
   19c6c:	ebfff9e5 	bl	18408 <CNetworkLayer::GetGateway(unsigned char const*) const>
   19c70:	e1a01000 	mov	r1, r0
   19c74:	e28d0010 	add	r0, sp, #16
   19c78:	eb000fb2 	bl	1db48 <CIPAddress::operator!=(unsigned char const*) const>
   19c7c:	e3500000 	cmp	r0, #0
   19c80:	1affffdd 	bne	19bfc <CICMPHandler::Process()+0x334>
   19c84:	eb002d47 	bl	251a8 <CLogger::Get()>
   19c88:	e5d42001 	ldrb	r2, [r4, #1]
   19c8c:	e30e3a44 	movw	r3, #59972	; 0xea44
   19c90:	e30e1958 	movw	r1, #59736	; 0xe958
   19c94:	e3403002 	movt	r3, #2
   19c98:	e3401002 	movt	r1, #2
   19c9c:	e58d2000 	str	r2, [sp]
   19ca0:	e3a02004 	mov	r2, #4
   19ca4:	eb002e1c 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19ca8:	e28d0020 	add	r0, sp, #32
   19cac:	e5954004 	ldr	r4, [r5, #4]
   19cb0:	eb00100a 	bl	1dce0 <CIPAddress::Get() const>
   19cb4:	e1a0100a 	mov	r1, sl
   19cb8:	e1a02000 	mov	r2, r0
   19cbc:	e1a00004 	mov	r0, r4
   19cc0:	ebfff9ce 	bl	18400 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   19cc4:	eaffffcc 	b	19bfc <CICMPHandler::Process()+0x334>
   19cc8:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   19ccc:	e3a020cd 	mov	r2, #205	; 0xcd
   19cd0:	e3400002 	movt	r0, #2
   19cd4:	e1a01007 	mov	r1, r7
   19cd8:	eb002bb0 	bl	24ba0 <assertion_failed>
   19cdc:	eaffffbb 	b	19bd0 <CICMPHandler::Process()+0x308>

00019ce0 <CRouteCache::CRouteCache()>:
   19ce0:	e3a02064 	mov	r2, #100	; 0x64
   19ce4:	e92d4010 	push	{r4, lr}
   19ce8:	e1a01002 	mov	r1, r2
   19cec:	e1a04000 	mov	r4, r0
   19cf0:	eb003c0a 	bl	28d20 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   19cf4:	e1a00004 	mov	r0, r4
   19cf8:	e8bd8010 	pop	{r4, pc}

00019cfc <CRouteCache::Flush()>:
   19cfc:	e92d4070 	push	{r4, r5, r6, lr}
   19d00:	e1a05000 	mov	r5, r0
   19d04:	eb003c36 	bl	28de4 <CPtrArray::GetCount() const>
   19d08:	e3500000 	cmp	r0, #0
   19d0c:	08bd8070 	popeq	{r4, r5, r6, pc}
   19d10:	e2404001 	sub	r4, r0, #1
   19d14:	e1a01004 	mov	r1, r4
   19d18:	e1a00005 	mov	r0, r5
   19d1c:	eb003c32 	bl	28dec <CPtrArray::operator[](unsigned int)>
   19d20:	e3a01008 	mov	r1, #8
   19d24:	e2444001 	sub	r4, r4, #1
   19d28:	e5900000 	ldr	r0, [r0]
   19d2c:	eb00209d 	bl	21fa8 <operator delete(void*, unsigned int)>
   19d30:	e1a00005 	mov	r0, r5
   19d34:	eb003cd0 	bl	2907c <CPtrArray::RemoveLast()>
   19d38:	e3740001 	cmn	r4, #1
   19d3c:	1afffff4 	bne	19d14 <CRouteCache::Flush()+0x18>
   19d40:	e8bd8070 	pop	{r4, r5, r6, pc}

00019d44 <CRouteCache::~CRouteCache()>:
   19d44:	e92d4010 	push	{r4, lr}
   19d48:	e1a04000 	mov	r4, r0
   19d4c:	ebffffea 	bl	19cfc <CRouteCache::Flush()>
   19d50:	e1a00004 	mov	r0, r4
   19d54:	eb003c17 	bl	28db8 <CPtrArray::~CPtrArray()>
   19d58:	e1a00004 	mov	r0, r4
   19d5c:	e8bd8010 	pop	{r4, pc}

00019d60 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   19d60:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d64:	e2517000 	subs	r7, r1, #0
   19d68:	e1a06000 	mov	r6, r0
   19d6c:	e1a0b002 	mov	fp, r2
   19d70:	0a000036 	beq	19e50 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xf0>
   19d74:	e35b0000 	cmp	fp, #0
   19d78:	0a00002d 	beq	19e34 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   19d7c:	e1a00006 	mov	r0, r6
   19d80:	eb003c17 	bl	28de4 <CPtrArray::GetCount() const>
   19d84:	e2508000 	subs	r8, r0, #0
   19d88:	0a00001b 	beq	19dfc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x9c>
   19d8c:	e30eaa54 	movw	sl, #59988	; 0xea54
   19d90:	e30e9a84 	movw	r9, #60036	; 0xea84
   19d94:	e340a002 	movt	sl, #2
   19d98:	e3409002 	movt	r9, #2
   19d9c:	e3a04000 	mov	r4, #0
   19da0:	ea000007 	b	19dc4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x64>
   19da4:	e3a02004 	mov	r2, #4
   19da8:	e1a01007 	mov	r1, r7
   19dac:	e1a00005 	mov	r0, r5
   19db0:	eb0023f5 	bl	22d8c <memcmp>
   19db4:	e3500000 	cmp	r0, #0
   19db8:	0a00000d 	beq	19df4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x94>
   19dbc:	e1580004 	cmp	r8, r4
   19dc0:	0a00000d 	beq	19dfc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x9c>
   19dc4:	e1a01004 	mov	r1, r4
   19dc8:	e1a00006 	mov	r0, r6
   19dcc:	eb003c06 	bl	28dec <CPtrArray::operator[](unsigned int)>
   19dd0:	e2844001 	add	r4, r4, #1
   19dd4:	e5905000 	ldr	r5, [r0]
   19dd8:	e3550000 	cmp	r5, #0
   19ddc:	1afffff0 	bne	19da4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x44>
   19de0:	e3a0203e 	mov	r2, #62	; 0x3e
   19de4:	e1a0100a 	mov	r1, sl
   19de8:	e1a00009 	mov	r0, r9
   19dec:	eb002b6b 	bl	24ba0 <assertion_failed>
   19df0:	eaffffeb 	b	19da4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x44>
   19df4:	e3550000 	cmp	r5, #0
   19df8:	1a000008 	bne	19e20 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xc0>
   19dfc:	e3a00008 	mov	r0, #8
   19e00:	eb002064 	bl	21f98 <operator new(unsigned int)>
   19e04:	e1a01007 	mov	r1, r7
   19e08:	e3a02004 	mov	r2, #4
   19e0c:	e1a05000 	mov	r5, r0
   19e10:	eb0024ec 	bl	231c8 <memcpy>
   19e14:	e1a01005 	mov	r1, r5
   19e18:	e1a00006 	mov	r0, r6
   19e1c:	eb003c46 	bl	28f3c <CPtrArray::Append(void*)>
   19e20:	e1a0100b 	mov	r1, fp
   19e24:	e2850004 	add	r0, r5, #4
   19e28:	e3a02004 	mov	r2, #4
   19e2c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e30:	ea0024e4 	b	231c8 <memcpy>
   19e34:	e30e1a54 	movw	r1, #59988	; 0xea54
   19e38:	e30e0a74 	movw	r0, #60020	; 0xea74
   19e3c:	e3401002 	movt	r1, #2
   19e40:	e3400002 	movt	r0, #2
   19e44:	e3a02036 	mov	r2, #54	; 0x36
   19e48:	eb002b54 	bl	24ba0 <assertion_failed>
   19e4c:	eaffffca 	b	19d7c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x1c>
   19e50:	e30e1a54 	movw	r1, #59988	; 0xea54
   19e54:	e30e0a64 	movw	r0, #60004	; 0xea64
   19e58:	e3401002 	movt	r1, #2
   19e5c:	e3400002 	movt	r0, #2
   19e60:	e3a02035 	mov	r2, #53	; 0x35
   19e64:	eb002b4d 	bl	24ba0 <assertion_failed>
   19e68:	eaffffc1 	b	19d74 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x14>

00019e6c <CRouteCache::GetRoute(unsigned char const*) const>:
   19e6c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e70:	e2517000 	subs	r7, r1, #0
   19e74:	e1a06000 	mov	r6, r0
   19e78:	0a000022 	beq	19f08 <CRouteCache::GetRoute(unsigned char const*) const+0x9c>
   19e7c:	e1a00006 	mov	r0, r6
   19e80:	eb003bd7 	bl	28de4 <CPtrArray::GetCount() const>
   19e84:	e2508000 	subs	r8, r0, #0
   19e88:	0a000018 	beq	19ef0 <CRouteCache::GetRoute(unsigned char const*) const+0x84>
   19e8c:	e30eaa54 	movw	sl, #59988	; 0xea54
   19e90:	e30e9a84 	movw	r9, #60036	; 0xea84
   19e94:	e340a002 	movt	sl, #2
   19e98:	e3409002 	movt	r9, #2
   19e9c:	e3a04000 	mov	r4, #0
   19ea0:	ea000007 	b	19ec4 <CRouteCache::GetRoute(unsigned char const*) const+0x58>
   19ea4:	e3a02004 	mov	r2, #4
   19ea8:	e1a01007 	mov	r1, r7
   19eac:	e1a00005 	mov	r0, r5
   19eb0:	eb0023b5 	bl	22d8c <memcmp>
   19eb4:	e3500000 	cmp	r0, #0
   19eb8:	0a00000e 	beq	19ef8 <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   19ebc:	e1580004 	cmp	r8, r4
   19ec0:	0a00000a 	beq	19ef0 <CRouteCache::GetRoute(unsigned char const*) const+0x84>
   19ec4:	e1a01004 	mov	r1, r4
   19ec8:	e1a00006 	mov	r0, r6
   19ecc:	eb003bf0 	bl	28e94 <CPtrArray::operator[](unsigned int) const>
   19ed0:	e2844001 	add	r4, r4, #1
   19ed4:	e2505000 	subs	r5, r0, #0
   19ed8:	1afffff1 	bne	19ea4 <CRouteCache::GetRoute(unsigned char const*) const+0x38>
   19edc:	e3a0205d 	mov	r2, #93	; 0x5d
   19ee0:	e1a0100a 	mov	r1, sl
   19ee4:	e1a00009 	mov	r0, r9
   19ee8:	eb002b2c 	bl	24ba0 <assertion_failed>
   19eec:	eaffffec 	b	19ea4 <CRouteCache::GetRoute(unsigned char const*) const+0x38>
   19ef0:	e3a00000 	mov	r0, #0
   19ef4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ef8:	e2955004 	adds	r5, r5, #4
   19efc:	0a000008 	beq	19f24 <CRouteCache::GetRoute(unsigned char const*) const+0xb8>
   19f00:	e1a00005 	mov	r0, r5
   19f04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f08:	e30e1a54 	movw	r1, #59988	; 0xea54
   19f0c:	e30e0a64 	movw	r0, #60004	; 0xea64
   19f10:	e3401002 	movt	r1, #2
   19f14:	e3400002 	movt	r0, #2
   19f18:	e3a02057 	mov	r2, #87	; 0x57
   19f1c:	eb002b1f 	bl	24ba0 <assertion_failed>
   19f20:	eaffffd5 	b	19e7c <CRouteCache::GetRoute(unsigned char const*) const+0x10>
   19f24:	e3a02061 	mov	r2, #97	; 0x61
   19f28:	e30e1a54 	movw	r1, #59988	; 0xea54
   19f2c:	e30e0a90 	movw	r0, #60048	; 0xea90
   19f30:	e3401002 	movt	r1, #2
   19f34:	e3400002 	movt	r0, #2
   19f38:	eb002b18 	bl	24ba0 <assertion_failed>
   19f3c:	e1a00005 	mov	r0, r5
   19f40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00019f44 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   19f44:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f48:	e1a04000 	mov	r4, r0
   19f4c:	e59fc0ac 	ldr	ip, [pc, #172]	; 1a000 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xbc>
   19f50:	e1a07001 	mov	r7, r1
   19f54:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   19f58:	e1a01003 	mov	r1, r3
   19f5c:	e1dd92b0 	ldrh	r9, [sp, #32]
   19f60:	e280000c 	add	r0, r0, #12
   19f64:	e1dd82b4 	ldrh	r8, [sp, #36]	; 0x24
   19f68:	e1a05003 	mov	r5, r3
   19f6c:	e5002004 	str	r2, [r0, #-4]
   19f70:	e584c000 	str	ip, [r4]
   19f74:	e5847004 	str	r7, [r4, #4]
   19f78:	eb000e8b 	bl	1d9ac <CIPAddress::CIPAddress(CIPAddress const&)>
   19f7c:	e1c491b4 	strh	r9, [r4, #20]
   19f80:	e1c481b6 	strh	r8, [r4, #22]
   19f84:	e1a00007 	mov	r0, r7
   19f88:	e5846018 	str	r6, [r4, #24]
   19f8c:	eb000e23 	bl	1d820 <CNetConfig::GetIPAddress() const>
   19f90:	e1a03006 	mov	r3, r6
   19f94:	e1a02005 	mov	r2, r5
   19f98:	e1a01000 	mov	r1, r0
   19f9c:	e284001c 	add	r0, r4, #28
   19fa0:	eb0010d9 	bl	1e30c <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   19fa4:	e5943004 	ldr	r3, [r4, #4]
   19fa8:	e3530000 	cmp	r3, #0
   19fac:	0a00000c 	beq	19fe4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19fb0:	e5943008 	ldr	r3, [r4, #8]
   19fb4:	e3530000 	cmp	r3, #0
   19fb8:	0a000001 	beq	19fc4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x80>
   19fbc:	e1a00004 	mov	r0, r4
   19fc0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19fc4:	e3a02026 	mov	r2, #38	; 0x26
   19fc8:	e30e1ae8 	movw	r1, #60136	; 0xeae8
   19fcc:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   19fd0:	e3401002 	movt	r1, #2
   19fd4:	e3400002 	movt	r0, #2
   19fd8:	eb002af0 	bl	24ba0 <assertion_failed>
   19fdc:	e1a00004 	mov	r0, r4
   19fe0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19fe4:	e30e1ae8 	movw	r1, #60136	; 0xeae8
   19fe8:	e30e0610 	movw	r0, #58896	; 0xe610
   19fec:	e3401002 	movt	r1, #2
   19ff0:	e3400002 	movt	r0, #2
   19ff4:	e3a02025 	mov	r2, #37	; 0x25
   19ff8:	eb002ae8 	bl	24ba0 <assertion_failed>
   19ffc:	eaffffeb 	b	19fb0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   1a000:	0002eab0 	.word	0x0002eab0

0001a004 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   1a004:	e59fc0a0 	ldr	ip, [pc, #160]	; 1a0ac <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0xa8>
   1a008:	e92d4070 	push	{r4, r5, r6, lr}
   1a00c:	e1a04000 	mov	r4, r0
   1a010:	e5802008 	str	r2, [r0, #8]
   1a014:	e1a05001 	mov	r5, r1
   1a018:	e5841004 	str	r1, [r4, #4]
   1a01c:	e280000c 	add	r0, r0, #12
   1a020:	e584c000 	str	ip, [r4]
   1a024:	e1a06003 	mov	r6, r3
   1a028:	eb000e58 	bl	1d990 <CIPAddress::CIPAddress()>
   1a02c:	e3a03000 	mov	r3, #0
   1a030:	e1c461b6 	strh	r6, [r4, #22]
   1a034:	e1a00005 	mov	r0, r5
   1a038:	e1c431b4 	strh	r3, [r4, #20]
   1a03c:	eb000df7 	bl	1d820 <CNetConfig::GetIPAddress() const>
   1a040:	e59d2010 	ldr	r2, [sp, #16]
   1a044:	e1a01000 	mov	r1, r0
   1a048:	e284001c 	add	r0, r4, #28
   1a04c:	eb0010a2 	bl	1e2dc <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   1a050:	e5943004 	ldr	r3, [r4, #4]
   1a054:	e3530000 	cmp	r3, #0
   1a058:	0a00000c 	beq	1a090 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1a05c:	e5943008 	ldr	r3, [r4, #8]
   1a060:	e3530000 	cmp	r3, #0
   1a064:	0a000001 	beq	1a070 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x6c>
   1a068:	e1a00004 	mov	r0, r4
   1a06c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a070:	e3a02034 	mov	r2, #52	; 0x34
   1a074:	e30e1ae8 	movw	r1, #60136	; 0xeae8
   1a078:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   1a07c:	e3401002 	movt	r1, #2
   1a080:	e3400002 	movt	r0, #2
   1a084:	eb002ac5 	bl	24ba0 <assertion_failed>
   1a088:	e1a00004 	mov	r0, r4
   1a08c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a090:	e30e1ae8 	movw	r1, #60136	; 0xeae8
   1a094:	e30e0610 	movw	r0, #58896	; 0xe610
   1a098:	e3401002 	movt	r1, #2
   1a09c:	e3400002 	movt	r0, #2
   1a0a0:	e3a02033 	mov	r2, #51	; 0x33
   1a0a4:	eb002abd 	bl	24ba0 <assertion_failed>
   1a0a8:	eaffffeb 	b	1a05c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x58>
   1a0ac:	0002eab0 	.word	0x0002eab0

0001a0b0 <CNetConnection::~CNetConnection()>:
   1a0b0:	e59f2028 	ldr	r2, [pc, #40]	; 1a0e0 <CNetConnection::~CNetConnection()+0x30>
   1a0b4:	e3a03000 	mov	r3, #0
   1a0b8:	e92d4010 	push	{r4, lr}
   1a0bc:	e1a04000 	mov	r4, r0
   1a0c0:	e5843008 	str	r3, [r4, #8]
   1a0c4:	e280001c 	add	r0, r0, #28
   1a0c8:	e884000c 	stm	r4, {r2, r3}
   1a0cc:	eb00109f 	bl	1e350 <CChecksumCalculator::~CChecksumCalculator()>
   1a0d0:	e284000c 	add	r0, r4, #12
   1a0d4:	eb000e46 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   1a0d8:	e1a00004 	mov	r0, r4
   1a0dc:	e8bd8010 	pop	{r4, pc}
   1a0e0:	0002eab0 	.word	0x0002eab0

0001a0e4 <CNetConnection::~CNetConnection()>:
   1a0e4:	e59f2034 	ldr	r2, [pc, #52]	; 1a120 <CNetConnection::~CNetConnection()+0x3c>
   1a0e8:	e3a03000 	mov	r3, #0
   1a0ec:	e92d4010 	push	{r4, lr}
   1a0f0:	e1a04000 	mov	r4, r0
   1a0f4:	e5843008 	str	r3, [r4, #8]
   1a0f8:	e280001c 	add	r0, r0, #28
   1a0fc:	e884000c 	stm	r4, {r2, r3}
   1a100:	eb001092 	bl	1e350 <CChecksumCalculator::~CChecksumCalculator()>
   1a104:	e284000c 	add	r0, r4, #12
   1a108:	eb000e39 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   1a10c:	e1a00004 	mov	r0, r4
   1a110:	e3a0102c 	mov	r1, #44	; 0x2c
   1a114:	eb001fa3 	bl	21fa8 <operator delete(void*, unsigned int)>
   1a118:	e1a00004 	mov	r0, r4
   1a11c:	e8bd8010 	pop	{r4, pc}
   1a120:	0002eab0 	.word	0x0002eab0

0001a124 <CNetConnection::GetForeignIP() const>:
   1a124:	e280000c 	add	r0, r0, #12
   1a128:	ea000eec 	b	1dce0 <CIPAddress::Get() const>

0001a12c <CNetConnection::GetOwnPort() const>:
   1a12c:	e1d031b6 	ldrh	r3, [r0, #22]
   1a130:	e3530000 	cmp	r3, #0
   1a134:	0a000001 	beq	1a140 <CNetConnection::GetOwnPort() const+0x14>
   1a138:	e1a00003 	mov	r0, r3
   1a13c:	e12fff1e 	bx	lr
   1a140:	e92d4010 	push	{r4, lr}
   1a144:	e3a02044 	mov	r2, #68	; 0x44
   1a148:	e1a04000 	mov	r4, r0
   1a14c:	e30e1ae8 	movw	r1, #60136	; 0xeae8
   1a150:	e30e0afc 	movw	r0, #60156	; 0xeafc
   1a154:	e3401002 	movt	r1, #2
   1a158:	e3400002 	movt	r0, #2
   1a15c:	eb002a8f 	bl	24ba0 <assertion_failed>
   1a160:	e1d431b6 	ldrh	r3, [r4, #22]
   1a164:	e1a00003 	mov	r0, r3
   1a168:	e8bd8010 	pop	{r4, pc}

0001a16c <CNetConnection::GetProtocol() const>:
   1a16c:	e5900018 	ldr	r0, [r0, #24]
   1a170:	e12fff1e 	bx	lr

0001a174 <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   1a174:	e3e00000 	mvn	r0, #0
   1a178:	e12fff1e 	bx	lr

0001a17c <CUDPConnection::Close()>:
   1a17c:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1a180:	e3530000 	cmp	r3, #0
   1a184:	13a03000 	movne	r3, #0
   1a188:	1580302c 	strne	r3, [r0, #44]	; 0x2c
   1a18c:	11a00003 	movne	r0, r3
   1a190:	03e00000 	mvneq	r0, #0
   1a194:	e12fff1e 	bx	lr

0001a198 <CUDPConnection::SetOptionBroadcast(int)>:
   1a198:	e5801048 	str	r1, [r0, #72]	; 0x48
   1a19c:	e3a00000 	mov	r0, #0
   1a1a0:	e12fff1e 	bx	lr

0001a1a4 <CUDPConnection::IsTerminated() const>:
   1a1a4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a1a8:	e16f0f10 	clz	r0, r0
   1a1ac:	e1a002a0 	lsr	r0, r0, #5
   1a1b0:	e12fff1e 	bx	lr

0001a1b4 <CUDPConnection::Process()>:
   1a1b4:	e12fff1e 	bx	lr

0001a1b8 <CUDPConnection::~CUDPConnection()>:
   1a1b8:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   1a1bc:	e59f3048 	ldr	r3, [pc, #72]	; 1a20c <CUDPConnection::~CUDPConnection()+0x54>
   1a1c0:	e3520000 	cmp	r2, #0
   1a1c4:	e92d4010 	push	{r4, lr}
   1a1c8:	e1a04000 	mov	r4, r0
   1a1cc:	e5803000 	str	r3, [r0]
   1a1d0:	0a000005 	beq	1a1ec <CUDPConnection::~CUDPConnection()+0x34>
   1a1d4:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1a1d8:	e30e0b60 	movw	r0, #60256	; 0xeb60
   1a1dc:	e3401002 	movt	r1, #2
   1a1e0:	e3400002 	movt	r0, #2
   1a1e4:	e3a02044 	mov	r2, #68	; 0x44
   1a1e8:	eb002a6c 	bl	24ba0 <assertion_failed>
   1a1ec:	e2840040 	add	r0, r4, #64	; 0x40
   1a1f0:	eb001a61 	bl	20b7c <CSynchronizationEvent::~CSynchronizationEvent()>
   1a1f4:	e2840034 	add	r0, r4, #52	; 0x34
   1a1f8:	eb000f93 	bl	1e04c <CNetQueue::~CNetQueue()>
   1a1fc:	e1a00004 	mov	r0, r4
   1a200:	ebffffaa 	bl	1a0b0 <CNetConnection::~CNetConnection()>
   1a204:	e1a00004 	mov	r0, r4
   1a208:	e8bd8010 	pop	{r4, pc}
   1a20c:	0002eb14 	.word	0x0002eb14

0001a210 <CUDPConnection::~CUDPConnection()>:
   1a210:	e92d4010 	push	{r4, lr}
   1a214:	e1a04000 	mov	r4, r0
   1a218:	ebffffe6 	bl	1a1b8 <CUDPConnection::~CUDPConnection()>
   1a21c:	e1a00004 	mov	r0, r4
   1a220:	e3a01050 	mov	r1, #80	; 0x50
   1a224:	eb001f5f 	bl	21fa8 <operator delete(void*, unsigned int)>
   1a228:	e1a00004 	mov	r0, r4
   1a22c:	e8bd8010 	pop	{r4, pc}

0001a230 <CUDPConnection::Send(void const*, unsigned int, int)>:
   1a230:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1a234:	e24dd00c 	sub	sp, sp, #12
   1a238:	e590704c 	ldr	r7, [r0, #76]	; 0x4c
   1a23c:	e3570000 	cmp	r7, #0
   1a240:	b3a03000 	movlt	r3, #0
   1a244:	b580304c 	strlt	r3, [r0, #76]	; 0x4c
   1a248:	ba000044 	blt	1a360 <CUDPConnection::Send(void const*, unsigned int, int)+0x130>
   1a24c:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   1a250:	e35c0000 	cmp	ip, #0
   1a254:	0a000048 	beq	1a37c <CUDPConnection::Send(void const*, unsigned int, int)+0x14c>
   1a258:	e3d33040 	bics	r3, r3, #64	; 0x40
   1a25c:	1a000046 	bne	1a37c <CUDPConnection::Send(void const*, unsigned int, int)+0x14c>
   1a260:	e242c001 	sub	ip, r2, #1
   1a264:	e3003637 	movw	r3, #1591	; 0x637
   1a268:	e15c0003 	cmp	ip, r3
   1a26c:	e2828008 	add	r8, r2, #8
   1a270:	8a000041 	bhi	1a37c <CUDPConnection::Send(void const*, unsigned int, int)+0x14c>
   1a274:	e5903004 	ldr	r3, [r0, #4]
   1a278:	e1a07002 	mov	r7, r2
   1a27c:	e1a05001 	mov	r5, r1
   1a280:	e1a04000 	mov	r4, r0
   1a284:	e3530000 	cmp	r3, #0
   1a288:	0a000051 	beq	1a3d4 <CUDPConnection::Send(void const*, unsigned int, int)+0x1a4>
   1a28c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   1a290:	e284900c 	add	r9, r4, #12
   1a294:	e3530000 	cmp	r3, #0
   1a298:	0a000033 	beq	1a36c <CUDPConnection::Send(void const*, unsigned int, int)+0x13c>
   1a29c:	e1a00008 	mov	r0, r8
   1a2a0:	eb001f3d 	bl	21f9c <operator new[](unsigned int)>
   1a2a4:	e1d421b6 	ldrh	r2, [r4, #22]
   1a2a8:	e1d431b4 	ldrh	r3, [r4, #20]
   1a2ac:	e3550000 	cmp	r5, #0
   1a2b0:	e6bf2fb2 	rev16	r2, r2
   1a2b4:	e6bf3fb3 	rev16	r3, r3
   1a2b8:	e1a06000 	mov	r6, r0
   1a2bc:	e1c030b2 	strh	r3, [r0, #2]
   1a2c0:	e1c020b0 	strh	r2, [r0]
   1a2c4:	e6bf3fb8 	rev16	r3, r8
   1a2c8:	e1c030b4 	strh	r3, [r0, #4]
   1a2cc:	e3a03000 	mov	r3, #0
   1a2d0:	e5c03006 	strb	r3, [r0, #6]
   1a2d4:	e5c03007 	strb	r3, [r0, #7]
   1a2d8:	0a000044 	beq	1a3f0 <CUDPConnection::Send(void const*, unsigned int, int)+0x1c0>
   1a2dc:	e1a02007 	mov	r2, r7
   1a2e0:	e1a01005 	mov	r1, r5
   1a2e4:	e2860008 	add	r0, r6, #8
   1a2e8:	e284501c 	add	r5, r4, #28
   1a2ec:	eb0023b5 	bl	231c8 <memcpy>
   1a2f0:	e5940004 	ldr	r0, [r4, #4]
   1a2f4:	eb000d49 	bl	1d820 <CNetConfig::GetIPAddress() const>
   1a2f8:	e1a01000 	mov	r1, r0
   1a2fc:	e1a00005 	mov	r0, r5
   1a300:	eb001013 	bl	1e354 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1a304:	e1a01009 	mov	r1, r9
   1a308:	e1a00005 	mov	r0, r5
   1a30c:	eb001014 	bl	1e364 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1a310:	e1a02008 	mov	r2, r8
   1a314:	e1a01006 	mov	r1, r6
   1a318:	e1a00005 	mov	r0, r5
   1a31c:	eb001045 	bl	1e438 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1a320:	e5942008 	ldr	r2, [r4, #8]
   1a324:	e3520000 	cmp	r2, #0
   1a328:	11a03008 	movne	r3, r8
   1a32c:	11a01009 	movne	r1, r9
   1a330:	e1c600b6 	strh	r0, [r6, #6]
   1a334:	11a00002 	movne	r0, r2
   1a338:	0a000013 	beq	1a38c <CUDPConnection::Send(void const*, unsigned int, int)+0x15c>
   1a33c:	e3a0c011 	mov	ip, #17
   1a340:	e1a02006 	mov	r2, r6
   1a344:	e58dc000 	str	ip, [sp]
   1a348:	ebfff6e3 	bl	17edc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1a34c:	e1a04000 	mov	r4, r0
   1a350:	e1a00006 	mov	r0, r6
   1a354:	eb001f12 	bl	21fa4 <operator delete[](void*)>
   1a358:	e3540000 	cmp	r4, #0
   1a35c:	0a000006 	beq	1a37c <CUDPConnection::Send(void const*, unsigned int, int)+0x14c>
   1a360:	e1a00007 	mov	r0, r7
   1a364:	e28dd00c 	add	sp, sp, #12
   1a368:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a36c:	e1a00009 	mov	r0, r9
   1a370:	eb000e92 	bl	1ddc0 <CIPAddress::IsBroadcast() const>
   1a374:	e3500000 	cmp	r0, #0
   1a378:	0a00000d 	beq	1a3b4 <CUDPConnection::Send(void const*, unsigned int, int)+0x184>
   1a37c:	e3e07000 	mvn	r7, #0
   1a380:	e1a00007 	mov	r0, r7
   1a384:	e28dd00c 	add	sp, sp, #12
   1a388:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a38c:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1a390:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   1a394:	e3401002 	movt	r1, #2
   1a398:	e3400002 	movt	r0, #2
   1a39c:	e3a02094 	mov	r2, #148	; 0x94
   1a3a0:	eb0029fe 	bl	24ba0 <assertion_failed>
   1a3a4:	e5940008 	ldr	r0, [r4, #8]
   1a3a8:	e1a03008 	mov	r3, r8
   1a3ac:	e1a01009 	mov	r1, r9
   1a3b0:	eaffffe1 	b	1a33c <CUDPConnection::Send(void const*, unsigned int, int)+0x10c>
   1a3b4:	e5940004 	ldr	r0, [r4, #4]
   1a3b8:	eb000d22 	bl	1d848 <CNetConfig::GetBroadcastAddress() const>
   1a3bc:	e1a01000 	mov	r1, r0
   1a3c0:	e1a00009 	mov	r0, r9
   1a3c4:	eb000d8b 	bl	1d9f8 <CIPAddress::operator==(CIPAddress const&) const>
   1a3c8:	e3500000 	cmp	r0, #0
   1a3cc:	1affffea 	bne	1a37c <CUDPConnection::Send(void const*, unsigned int, int)+0x14c>
   1a3d0:	eaffffb1 	b	1a29c <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   1a3d4:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1a3d8:	e30e0610 	movw	r0, #58896	; 0xe610
   1a3dc:	e3401002 	movt	r1, #2
   1a3e0:	e3400002 	movt	r0, #2
   1a3e4:	e3a0207b 	mov	r2, #123	; 0x7b
   1a3e8:	eb0029ec 	bl	24ba0 <assertion_failed>
   1a3ec:	eaffffa6 	b	1a28c <CUDPConnection::Send(void const*, unsigned int, int)+0x5c>
   1a3f0:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1a3f4:	e30e06f4 	movw	r0, #59124	; 0xe6f4
   1a3f8:	e3401002 	movt	r1, #2
   1a3fc:	e3400002 	movt	r0, #2
   1a400:	e3a0208c 	mov	r2, #140	; 0x8c
   1a404:	eb0029e5 	bl	24ba0 <assertion_failed>
   1a408:	eaffffb3 	b	1a2dc <CUDPConnection::Send(void const*, unsigned int, int)+0xac>

0001a40c <CUDPConnection::Receive(void*, int)>:
   1a40c:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1a410:	e3530000 	cmp	r3, #0
   1a414:	ba00002e 	blt	1a4d4 <CUDPConnection::Receive(void*, int)+0xc8>
   1a418:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a41c:	e30eab4c 	movw	sl, #60236	; 0xeb4c
   1a420:	e30b9984 	movw	r9, #47492	; 0xb984
   1a424:	e24dd00c 	sub	sp, sp, #12
   1a428:	e340a002 	movt	sl, #2
   1a42c:	e3409002 	movt	r9, #2
   1a430:	e2807034 	add	r7, r0, #52	; 0x34
   1a434:	e1a08002 	mov	r8, r2
   1a438:	e1a05001 	mov	r5, r1
   1a43c:	e1a06000 	mov	r6, r0
   1a440:	e3550000 	cmp	r5, #0
   1a444:	e2864040 	add	r4, r6, #64	; 0x40
   1a448:	0a00001c 	beq	1a4c0 <CUDPConnection::Receive(void*, int)+0xb4>
   1a44c:	e28d2004 	add	r2, sp, #4
   1a450:	e1a01005 	mov	r1, r5
   1a454:	e1a00007 	mov	r0, r7
   1a458:	eb000f51 	bl	1e1a4 <CNetQueue::Dequeue(void*, void**)>
   1a45c:	e250b000 	subs	fp, r0, #0
   1a460:	e1a00004 	mov	r0, r4
   1a464:	1a00000b 	bne	1a498 <CUDPConnection::Receive(void*, int)+0x8c>
   1a468:	e3580040 	cmp	r8, #64	; 0x40
   1a46c:	0a00001c 	beq	1a4e4 <CUDPConnection::Receive(void*, int)+0xd8>
   1a470:	eb0019d0 	bl	20bb8 <CSynchronizationEvent::Clear()>
   1a474:	e1a00004 	mov	r0, r4
   1a478:	eb0019df 	bl	20bfc <CSynchronizationEvent::Wait()>
   1a47c:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
   1a480:	e3530000 	cmp	r3, #0
   1a484:	aaffffed 	bge	1a440 <CUDPConnection::Receive(void*, int)+0x34>
   1a488:	e1a00003 	mov	r0, r3
   1a48c:	e586b04c 	str	fp, [r6, #76]	; 0x4c
   1a490:	e28dd00c 	add	sp, sp, #12
   1a494:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a498:	e59d4004 	ldr	r4, [sp, #4]
   1a49c:	e3540000 	cmp	r4, #0
   1a4a0:	0a000013 	beq	1a4f4 <CUDPConnection::Receive(void*, int)+0xe8>
   1a4a4:	e1a00004 	mov	r0, r4
   1a4a8:	e3a01006 	mov	r1, #6
   1a4ac:	eb001ebd 	bl	21fa8 <operator delete(void*, unsigned int)>
   1a4b0:	e1a0300b 	mov	r3, fp
   1a4b4:	e1a00003 	mov	r0, r3
   1a4b8:	e28dd00c 	add	sp, sp, #12
   1a4bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4c0:	e3a020ab 	mov	r2, #171	; 0xab
   1a4c4:	e1a0100a 	mov	r1, sl
   1a4c8:	e1a00009 	mov	r0, r9
   1a4cc:	eb0029b3 	bl	24ba0 <assertion_failed>
   1a4d0:	eaffffdd 	b	1a44c <CUDPConnection::Receive(void*, int)+0x40>
   1a4d4:	e3a02000 	mov	r2, #0
   1a4d8:	e580204c 	str	r2, [r0, #76]	; 0x4c
   1a4dc:	e1a00003 	mov	r0, r3
   1a4e0:	e12fff1e 	bx	lr
   1a4e4:	e1a0300b 	mov	r3, fp
   1a4e8:	e1a00003 	mov	r0, r3
   1a4ec:	e28dd00c 	add	sp, sp, #12
   1a4f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4f4:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1a4f8:	e30e06f4 	movw	r0, #59124	; 0xe6f4
   1a4fc:	e3401002 	movt	r1, #2
   1a500:	e3400002 	movt	r0, #2
   1a504:	e3a020c3 	mov	r2, #195	; 0xc3
   1a508:	eb0029a4 	bl	24ba0 <assertion_failed>
   1a50c:	eaffffe4 	b	1a4a4 <CUDPConnection::Receive(void*, int)+0x98>

0001a510 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1a510:	e590c04c 	ldr	ip, [r0, #76]	; 0x4c
   1a514:	e35c0000 	cmp	ip, #0
   1a518:	ba000034 	blt	1a5f0 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xe0>
   1a51c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a520:	e30eab4c 	movw	sl, #60236	; 0xeb4c
   1a524:	e24dd014 	sub	sp, sp, #20
   1a528:	e30b9984 	movw	r9, #47492	; 0xb984
   1a52c:	e340a002 	movt	sl, #2
   1a530:	e3409002 	movt	r9, #2
   1a534:	e2807034 	add	r7, r0, #52	; 0x34
   1a538:	e1a08002 	mov	r8, r2
   1a53c:	e1a05001 	mov	r5, r1
   1a540:	e1a06000 	mov	r6, r0
   1a544:	e58d3004 	str	r3, [sp, #4]
   1a548:	e3550000 	cmp	r5, #0
   1a54c:	e2864040 	add	r4, r6, #64	; 0x40
   1a550:	0a000021 	beq	1a5dc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xcc>
   1a554:	e28d200c 	add	r2, sp, #12
   1a558:	e1a01005 	mov	r1, r5
   1a55c:	e1a00007 	mov	r0, r7
   1a560:	eb000f0f 	bl	1e1a4 <CNetQueue::Dequeue(void*, void**)>
   1a564:	e250b000 	subs	fp, r0, #0
   1a568:	e1a00004 	mov	r0, r4
   1a56c:	1a00000b 	bne	1a5a0 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x90>
   1a570:	e3580040 	cmp	r8, #64	; 0x40
   1a574:	0a000028 	beq	1a61c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x10c>
   1a578:	eb00198e 	bl	20bb8 <CSynchronizationEvent::Clear()>
   1a57c:	e1a00004 	mov	r0, r4
   1a580:	eb00199d 	bl	20bfc <CSynchronizationEvent::Wait()>
   1a584:	e596c04c 	ldr	ip, [r6, #76]	; 0x4c
   1a588:	e35c0000 	cmp	ip, #0
   1a58c:	aaffffed 	bge	1a548 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x38>
   1a590:	e1a0000c 	mov	r0, ip
   1a594:	e586b04c 	str	fp, [r6, #76]	; 0x4c
   1a598:	e28dd014 	add	sp, sp, #20
   1a59c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5a0:	e59d400c 	ldr	r4, [sp, #12]
   1a5a4:	e3540000 	cmp	r4, #0
   1a5a8:	0a00001f 	beq	1a62c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x11c>
   1a5ac:	e59d3004 	ldr	r3, [sp, #4]
   1a5b0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1a5b4:	e3530000 	cmp	r3, #0
   1a5b8:	13520000 	cmpne	r2, #0
   1a5bc:	1a00000f 	bne	1a600 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf0>
   1a5c0:	e1a00004 	mov	r0, r4
   1a5c4:	e3a01006 	mov	r1, #6
   1a5c8:	eb001e76 	bl	21fa8 <operator delete(void*, unsigned int)>
   1a5cc:	e1a0c00b 	mov	ip, fp
   1a5d0:	e1a0000c 	mov	r0, ip
   1a5d4:	e28dd014 	add	sp, sp, #20
   1a5d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5dc:	e3a02f46 	mov	r2, #280	; 0x118
   1a5e0:	e1a0100a 	mov	r1, sl
   1a5e4:	e1a00009 	mov	r0, r9
   1a5e8:	eb00296c 	bl	24ba0 <assertion_failed>
   1a5ec:	eaffffd8 	b	1a554 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x44>
   1a5f0:	e3a03000 	mov	r3, #0
   1a5f4:	e580304c 	str	r3, [r0, #76]	; 0x4c
   1a5f8:	e1a0000c 	mov	r0, ip
   1a5fc:	e12fff1e 	bx	lr
   1a600:	e1a00003 	mov	r0, r3
   1a604:	e1a01004 	mov	r1, r4
   1a608:	eb000d7c 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   1a60c:	e1d420b4 	ldrh	r2, [r4, #4]
   1a610:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1a614:	e1c320b0 	strh	r2, [r3]
   1a618:	eaffffe8 	b	1a5c0 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xb0>
   1a61c:	e1a0c00b 	mov	ip, fp
   1a620:	e1a0000c 	mov	r0, ip
   1a624:	e28dd014 	add	sp, sp, #20
   1a628:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a62c:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1a630:	e30e06f4 	movw	r0, #59124	; 0xe6f4
   1a634:	e3401002 	movt	r1, #2
   1a638:	e3400002 	movt	r0, #2
   1a63c:	e3a02e13 	mov	r2, #304	; 0x130
   1a640:	eb002956 	bl	24ba0 <assertion_failed>
   1a644:	eaffffd8 	b	1a5ac <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x9c>

0001a648 <CUDPConnection::Connect()>:
   1a648:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1a64c:	e3530000 	cmp	r3, #0
   1a650:	0a000001 	beq	1a65c <CUDPConnection::Connect()+0x14>
   1a654:	e3a00000 	mov	r0, #0
   1a658:	e12fff1e 	bx	lr
   1a65c:	e92d4010 	push	{r4, lr}
   1a660:	e3a02049 	mov	r2, #73	; 0x49
   1a664:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1a668:	e30e0b6c 	movw	r0, #60268	; 0xeb6c
   1a66c:	e3401002 	movt	r1, #2
   1a670:	e3400002 	movt	r0, #2
   1a674:	eb002949 	bl	24ba0 <assertion_failed>
   1a678:	e3a00000 	mov	r0, #0
   1a67c:	e8bd8010 	pop	{r4, pc}

0001a680 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1a680:	e590c04c 	ldr	ip, [r0, #76]	; 0x4c
   1a684:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a688:	e35c0000 	cmp	ip, #0
   1a68c:	e24dd008 	sub	sp, sp, #8
   1a690:	e1a04000 	mov	r4, r0
   1a694:	b3a03000 	movlt	r3, #0
   1a698:	b580304c 	strlt	r3, [r0, #76]	; 0x4c
   1a69c:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
   1a6a0:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   1a6a4:	ba000043 	blt	1a7b8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x138>
   1a6a8:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   1a6ac:	e35c0000 	cmp	ip, #0
   1a6b0:	1a000055 	bne	1a80c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x18c>
   1a6b4:	e1a0e003 	mov	lr, r3
   1a6b8:	e3de3040 	bics	r3, lr, #64	; 0x40
   1a6bc:	1a000044 	bne	1a7d4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x154>
   1a6c0:	e1a06002 	mov	r6, r2
   1a6c4:	e2422001 	sub	r2, r2, #1
   1a6c8:	e3003637 	movw	r3, #1591	; 0x637
   1a6cc:	e1520003 	cmp	r2, r3
   1a6d0:	e286a008 	add	sl, r6, #8
   1a6d4:	8a00003e 	bhi	1a7d4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x154>
   1a6d8:	e5903004 	ldr	r3, [r0, #4]
   1a6dc:	e1a07001 	mov	r7, r1
   1a6e0:	e3530000 	cmp	r3, #0
   1a6e4:	0a000056 	beq	1a844 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1c4>
   1a6e8:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   1a6ec:	e3530000 	cmp	r3, #0
   1a6f0:	0a000033 	beq	1a7c4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x144>
   1a6f4:	e1a0000a 	mov	r0, sl
   1a6f8:	e6bf8fb8 	rev16	r8, r8
   1a6fc:	eb001e26 	bl	21f9c <operator new[](unsigned int)>
   1a700:	e1d431b6 	ldrh	r3, [r4, #22]
   1a704:	e3570000 	cmp	r7, #0
   1a708:	e6bf3fb3 	rev16	r3, r3
   1a70c:	e1a05000 	mov	r5, r0
   1a710:	e1c030b0 	strh	r3, [r0]
   1a714:	e1c080b2 	strh	r8, [r0, #2]
   1a718:	e6bf3fba 	rev16	r3, sl
   1a71c:	e1c030b4 	strh	r3, [r0, #4]
   1a720:	e3a03000 	mov	r3, #0
   1a724:	e5c03006 	strb	r3, [r0, #6]
   1a728:	e5c03007 	strb	r3, [r0, #7]
   1a72c:	0a00004b 	beq	1a860 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1e0>
   1a730:	e1a02006 	mov	r2, r6
   1a734:	e1a01007 	mov	r1, r7
   1a738:	e2850008 	add	r0, r5, #8
   1a73c:	e284701c 	add	r7, r4, #28
   1a740:	eb0022a0 	bl	231c8 <memcpy>
   1a744:	e5940004 	ldr	r0, [r4, #4]
   1a748:	eb000c34 	bl	1d820 <CNetConfig::GetIPAddress() const>
   1a74c:	e1a01000 	mov	r1, r0
   1a750:	e1a00007 	mov	r0, r7
   1a754:	eb000efe 	bl	1e354 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1a758:	e1a01009 	mov	r1, r9
   1a75c:	e1a00007 	mov	r0, r7
   1a760:	eb000eff 	bl	1e364 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1a764:	e1a0200a 	mov	r2, sl
   1a768:	e1a01005 	mov	r1, r5
   1a76c:	e1a00007 	mov	r0, r7
   1a770:	eb000f30 	bl	1e438 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1a774:	e5942008 	ldr	r2, [r4, #8]
   1a778:	e3520000 	cmp	r2, #0
   1a77c:	11a0300a 	movne	r3, sl
   1a780:	11a01009 	movne	r1, r9
   1a784:	e1c500b6 	strh	r0, [r5, #6]
   1a788:	11a00002 	movne	r0, r2
   1a78c:	0a000014 	beq	1a7e4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x164>
   1a790:	e3a0c011 	mov	ip, #17
   1a794:	e1a02005 	mov	r2, r5
   1a798:	e58dc000 	str	ip, [sp]
   1a79c:	ebfff5ce 	bl	17edc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1a7a0:	e1a04000 	mov	r4, r0
   1a7a4:	e1a00005 	mov	r0, r5
   1a7a8:	eb001dfd 	bl	21fa4 <operator delete[](void*)>
   1a7ac:	e3540000 	cmp	r4, #0
   1a7b0:	0a000007 	beq	1a7d4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x154>
   1a7b4:	e1a0c006 	mov	ip, r6
   1a7b8:	e1a0000c 	mov	r0, ip
   1a7bc:	e28dd008 	add	sp, sp, #8
   1a7c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7c4:	e1a00009 	mov	r0, r9
   1a7c8:	eb000d7c 	bl	1ddc0 <CIPAddress::IsBroadcast() const>
   1a7cc:	e3500000 	cmp	r0, #0
   1a7d0:	0a000013 	beq	1a824 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1a4>
   1a7d4:	e3e0c000 	mvn	ip, #0
   1a7d8:	e1a0000c 	mov	r0, ip
   1a7dc:	e28dd008 	add	sp, sp, #8
   1a7e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7e4:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1a7e8:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   1a7ec:	e3401002 	movt	r1, #2
   1a7f0:	e3400002 	movt	r0, #2
   1a7f4:	e3002101 	movw	r2, #257	; 0x101
   1a7f8:	eb0028e8 	bl	24ba0 <assertion_failed>
   1a7fc:	e5940008 	ldr	r0, [r4, #8]
   1a800:	e1a0300a 	mov	r3, sl
   1a804:	e1a01009 	mov	r1, r9
   1a808:	eaffffe0 	b	1a790 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x110>
   1a80c:	e590c000 	ldr	ip, [r0]
   1a810:	e59ce014 	ldr	lr, [ip, #20]
   1a814:	e1a0c00e 	mov	ip, lr
   1a818:	e28dd008 	add	sp, sp, #8
   1a81c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a820:	e12fff1c 	bx	ip
   1a824:	e5940004 	ldr	r0, [r4, #4]
   1a828:	eb000c06 	bl	1d848 <CNetConfig::GetBroadcastAddress() const>
   1a82c:	e1a01000 	mov	r1, r0
   1a830:	e1a00009 	mov	r0, r9
   1a834:	eb000c6f 	bl	1d9f8 <CIPAddress::operator==(CIPAddress const&) const>
   1a838:	e3500000 	cmp	r0, #0
   1a83c:	1affffe4 	bne	1a7d4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x154>
   1a840:	eaffffab 	b	1a6f4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   1a844:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1a848:	e30e0610 	movw	r0, #58896	; 0xe610
   1a84c:	e3401002 	movt	r1, #2
   1a850:	e3400002 	movt	r0, #2
   1a854:	e3a020e8 	mov	r2, #232	; 0xe8
   1a858:	eb0028d0 	bl	24ba0 <assertion_failed>
   1a85c:	eaffffa1 	b	1a6e8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x68>
   1a860:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1a864:	e30e06f4 	movw	r0, #59124	; 0xe6f4
   1a868:	e3401002 	movt	r1, #2
   1a86c:	e3400002 	movt	r0, #2
   1a870:	e3a020f9 	mov	r2, #249	; 0xf9
   1a874:	eb0028c9 	bl	24ba0 <assertion_failed>
   1a878:	eaffffac 	b	1a730 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb0>

0001a87c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1a87c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a880:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1a884:	e35c0011 	cmp	ip, #17
   1a888:	0a000001 	beq	1a894 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1a88c:	e3a00000 	mov	r0, #0
   1a890:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a894:	e3520008 	cmp	r2, #8
   1a898:	9a00004e 	bls	1a9d8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x15c>
   1a89c:	e1d1c0b2 	ldrh	ip, [r1, #2]
   1a8a0:	e1d0e1b6 	ldrh	lr, [r0, #22]
   1a8a4:	e6bfcfbc 	rev16	ip, ip
   1a8a8:	e6ffc07c 	uxth	ip, ip
   1a8ac:	e15e000c 	cmp	lr, ip
   1a8b0:	1afffff5 	bne	1a88c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1a8b4:	e1a06003 	mov	r6, r3
   1a8b8:	e5903004 	ldr	r3, [r0, #4]
   1a8bc:	e1a05002 	mov	r5, r2
   1a8c0:	e1a04001 	mov	r4, r1
   1a8c4:	e3530000 	cmp	r3, #0
   1a8c8:	e1a07000 	mov	r7, r0
   1a8cc:	0a00004f 	beq	1aa10 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x194>
   1a8d0:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   1a8d4:	e1d480b0 	ldrh	r8, [r4]
   1a8d8:	e3530000 	cmp	r3, #0
   1a8dc:	e6bf8fb8 	rev16	r8, r8
   1a8e0:	e6ff3078 	uxth	r3, r8
   1a8e4:	0a000013 	beq	1a938 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   1a8e8:	e1d721b4 	ldrh	r2, [r7, #20]
   1a8ec:	e1520003 	cmp	r2, r3
   1a8f0:	1affffe5 	bne	1a88c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1a8f4:	e287900c 	add	r9, r7, #12
   1a8f8:	e1a01006 	mov	r1, r6
   1a8fc:	e1a00009 	mov	r0, r9
   1a900:	eb000c58 	bl	1da68 <CIPAddress::operator!=(CIPAddress const&) const>
   1a904:	e3500000 	cmp	r0, #0
   1a908:	0a00000a 	beq	1a938 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   1a90c:	e1a00009 	mov	r0, r9
   1a910:	eb000d2a 	bl	1ddc0 <CIPAddress::IsBroadcast() const>
   1a914:	e3500000 	cmp	r0, #0
   1a918:	1a000006 	bne	1a938 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   1a91c:	e5970004 	ldr	r0, [r7, #4]
   1a920:	eb000bc8 	bl	1d848 <CNetConfig::GetBroadcastAddress() const>
   1a924:	e1a01000 	mov	r1, r0
   1a928:	e1a00009 	mov	r0, r9
   1a92c:	eb000c4d 	bl	1da68 <CIPAddress::operator!=(CIPAddress const&) const>
   1a930:	e3500000 	cmp	r0, #0
   1a934:	1affffd4 	bne	1a88c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1a938:	e1d430b4 	ldrh	r3, [r4, #4]
   1a93c:	e6bf3fb3 	rev16	r3, r3
   1a940:	e6ff3073 	uxth	r3, r3
   1a944:	e1550003 	cmp	r5, r3
   1a948:	3a000022 	bcc	1a9d8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x15c>
   1a94c:	e1d430b6 	ldrh	r3, [r4, #6]
   1a950:	e3530000 	cmp	r3, #0
   1a954:	1a000012 	bne	1a9a4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x128>
   1a958:	e5973048 	ldr	r3, [r7, #72]	; 0x48
   1a95c:	e3530000 	cmp	r3, #0
   1a960:	0a00001e 	beq	1a9e0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   1a964:	e3a00006 	mov	r0, #6
   1a968:	eb001d8a 	bl	21f98 <operator new(unsigned int)>
   1a96c:	e1a09000 	mov	r9, r0
   1a970:	e1a01000 	mov	r1, r0
   1a974:	e1a00006 	mov	r0, r6
   1a978:	eb000ce5 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   1a97c:	e2870034 	add	r0, r7, #52	; 0x34
   1a980:	e1a03009 	mov	r3, r9
   1a984:	e2452008 	sub	r2, r5, #8
   1a988:	e2841008 	add	r1, r4, #8
   1a98c:	e1c980b4 	strh	r8, [r9, #4]
   1a990:	eb000db2 	bl	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1a994:	e2870040 	add	r0, r7, #64	; 0x40
   1a998:	eb001889 	bl	20bc4 <CSynchronizationEvent::Set()>
   1a99c:	e3a00001 	mov	r0, #1
   1a9a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a9a4:	e287901c 	add	r9, r7, #28
   1a9a8:	e1a01006 	mov	r1, r6
   1a9ac:	e1a00009 	mov	r0, r9
   1a9b0:	eb000e67 	bl	1e354 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1a9b4:	e59d1020 	ldr	r1, [sp, #32]
   1a9b8:	e1a00009 	mov	r0, r9
   1a9bc:	eb000e68 	bl	1e364 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1a9c0:	e1a02005 	mov	r2, r5
   1a9c4:	e1a01004 	mov	r1, r4
   1a9c8:	e1a00009 	mov	r0, r9
   1a9cc:	eb000e99 	bl	1e438 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1a9d0:	e3500000 	cmp	r0, #0
   1a9d4:	0affffdf 	beq	1a958 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdc>
   1a9d8:	e3e00000 	mvn	r0, #0
   1a9dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a9e0:	e59d0020 	ldr	r0, [sp, #32]
   1a9e4:	eb000cf5 	bl	1ddc0 <CIPAddress::IsBroadcast() const>
   1a9e8:	e3500000 	cmp	r0, #0
   1a9ec:	1affffea 	bne	1a99c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x120>
   1a9f0:	e5970004 	ldr	r0, [r7, #4]
   1a9f4:	eb000b93 	bl	1d848 <CNetConfig::GetBroadcastAddress() const>
   1a9f8:	e1a01000 	mov	r1, r0
   1a9fc:	e59d0020 	ldr	r0, [sp, #32]
   1aa00:	eb000bfc 	bl	1d9f8 <CIPAddress::operator==(CIPAddress const&) const>
   1aa04:	e3500000 	cmp	r0, #0
   1aa08:	1affffe3 	bne	1a99c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x120>
   1aa0c:	eaffffd4 	b	1a964 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xe8>
   1aa10:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1aa14:	e30e0610 	movw	r0, #58896	; 0xe610
   1aa18:	e3401002 	movt	r1, #2
   1aa1c:	e3400002 	movt	r0, #2
   1aa20:	e3002161 	movw	r2, #353	; 0x161
   1aa24:	eb00285d 	bl	24ba0 <assertion_failed>
   1aa28:	eaffffa8 	b	1a8d0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>

0001aa2c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1aa2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1aa30:	e59dc020 	ldr	ip, [sp, #32]
   1aa34:	e1dd71b8 	ldrh	r7, [sp, #24]
   1aa38:	e35c0011 	cmp	ip, #17
   1aa3c:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1aa40:	0a000001 	beq	1aa4c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1aa44:	e3a00000 	mov	r0, #0
   1aa48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1aa4c:	e1d011b6 	ldrh	r1, [r0, #22]
   1aa50:	e151000c 	cmp	r1, ip
   1aa54:	1afffffa 	bne	1aa44 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1aa58:	e1a04000 	mov	r4, r0
   1aa5c:	e5900004 	ldr	r0, [r0, #4]
   1aa60:	e1a05003 	mov	r5, r3
   1aa64:	e1a06002 	mov	r6, r2
   1aa68:	e3500000 	cmp	r0, #0
   1aa6c:	0a000016 	beq	1aacc <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1aa70:	eb000b6a 	bl	1d820 <CNetConfig::GetIPAddress() const>
   1aa74:	e1a01000 	mov	r1, r0
   1aa78:	e1a00005 	mov	r0, r5
   1aa7c:	eb000bf9 	bl	1da68 <CIPAddress::operator!=(CIPAddress const&) const>
   1aa80:	e3500000 	cmp	r0, #0
   1aa84:	1affffee 	bne	1aa44 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1aa88:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   1aa8c:	e3530000 	cmp	r3, #0
   1aa90:	0a000007 	beq	1aab4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   1aa94:	e1d431b4 	ldrh	r3, [r4, #20]
   1aa98:	e1530007 	cmp	r3, r7
   1aa9c:	1affffe8 	bne	1aa44 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1aaa0:	e1a01006 	mov	r1, r6
   1aaa4:	e284000c 	add	r0, r4, #12
   1aaa8:	eb000bee 	bl	1da68 <CIPAddress::operator!=(CIPAddress const&) const>
   1aaac:	e3500000 	cmp	r0, #0
   1aab0:	1affffe3 	bne	1aa44 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1aab4:	e3e03000 	mvn	r3, #0
   1aab8:	e2840040 	add	r0, r4, #64	; 0x40
   1aabc:	e584304c 	str	r3, [r4, #76]	; 0x4c
   1aac0:	eb00183f 	bl	20bc4 <CSynchronizationEvent::Set()>
   1aac4:	e3a00001 	mov	r0, #1
   1aac8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1aacc:	e30e1b4c 	movw	r1, #60236	; 0xeb4c
   1aad0:	e30e0610 	movw	r0, #58896	; 0xe610
   1aad4:	e3401002 	movt	r1, #2
   1aad8:	e3400002 	movt	r0, #2
   1aadc:	e30021aa 	movw	r2, #426	; 0x1aa
   1aae0:	eb00282e 	bl	24ba0 <assertion_failed>
   1aae4:	e5940004 	ldr	r0, [r4, #4]
   1aae8:	eaffffe0 	b	1aa70 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x44>

0001aaec <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1aaec:	e92d4030 	push	{r4, r5, lr}
   1aaf0:	e24dd014 	sub	sp, sp, #20
   1aaf4:	e3a05011 	mov	r5, #17
   1aaf8:	e1a04000 	mov	r4, r0
   1aafc:	e1dde2b0 	ldrh	lr, [sp, #32]
   1ab00:	e1ddc2b4 	ldrh	ip, [sp, #36]	; 0x24
   1ab04:	e58d5008 	str	r5, [sp, #8]
   1ab08:	e58de000 	str	lr, [sp]
   1ab0c:	e58dc004 	str	ip, [sp, #4]
   1ab10:	ebfffd0b 	bl	19f44 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1ab14:	e59f2038 	ldr	r2, [pc, #56]	; 1ab54 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x68>
   1ab18:	e3a03001 	mov	r3, #1
   1ab1c:	e2840034 	add	r0, r4, #52	; 0x34
   1ab20:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1ab24:	e5843030 	str	r3, [r4, #48]	; 0x30
   1ab28:	e5842000 	str	r2, [r4]
   1ab2c:	eb000d02 	bl	1df3c <CNetQueue::CNetQueue()>
   1ab30:	e2840040 	add	r0, r4, #64	; 0x40
   1ab34:	e3a01000 	mov	r1, #0
   1ab38:	eb00180b 	bl	20b6c <CSynchronizationEvent::CSynchronizationEvent(int)>
   1ab3c:	e3a03000 	mov	r3, #0
   1ab40:	e1a00004 	mov	r0, r4
   1ab44:	e5843048 	str	r3, [r4, #72]	; 0x48
   1ab48:	e584304c 	str	r3, [r4, #76]	; 0x4c
   1ab4c:	e28dd014 	add	sp, sp, #20
   1ab50:	e8bd8030 	pop	{r4, r5, pc}
   1ab54:	0002eb14 	.word	0x0002eb14

0001ab58 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1ab58:	e92d4030 	push	{r4, r5, lr}
   1ab5c:	e24dd00c 	sub	sp, sp, #12
   1ab60:	e3a0c011 	mov	ip, #17
   1ab64:	e1a04000 	mov	r4, r0
   1ab68:	e58dc000 	str	ip, [sp]
   1ab6c:	e3a05000 	mov	r5, #0
   1ab70:	ebfffd23 	bl	1a004 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1ab74:	e59f3034 	ldr	r3, [pc, #52]	; 1abb0 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x58>
   1ab78:	e3a02001 	mov	r2, #1
   1ab7c:	e5845030 	str	r5, [r4, #48]	; 0x30
   1ab80:	e584202c 	str	r2, [r4, #44]	; 0x2c
   1ab84:	e2840034 	add	r0, r4, #52	; 0x34
   1ab88:	e5843000 	str	r3, [r4]
   1ab8c:	eb000cea 	bl	1df3c <CNetQueue::CNetQueue()>
   1ab90:	e1a01005 	mov	r1, r5
   1ab94:	e2840040 	add	r0, r4, #64	; 0x40
   1ab98:	eb0017f3 	bl	20b6c <CSynchronizationEvent::CSynchronizationEvent(int)>
   1ab9c:	e1a00004 	mov	r0, r4
   1aba0:	e5845048 	str	r5, [r4, #72]	; 0x48
   1aba4:	e584504c 	str	r5, [r4, #76]	; 0x4c
   1aba8:	e28dd00c 	add	sp, sp, #12
   1abac:	e8bd8030 	pop	{r4, r5, pc}
   1abb0:	0002eb14 	.word	0x0002eb14

0001abb4 <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1abb4:	e590c000 	ldr	ip, [r0]
   1abb8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1abbc:	e59ce014 	ldr	lr, [ip, #20]
   1abc0:	e1a0c00e 	mov	ip, lr
   1abc4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1abc8:	e12fff1c 	bx	ip

0001abcc <CTCPConnection::SetOptionBroadcast(int)>:
   1abcc:	e3a00000 	mov	r0, #0
   1abd0:	e12fff1e 	bx	lr

0001abd4 <CTCPConnection::IsTerminated() const>:
   1abd4:	e5d00030 	ldrb	r0, [r0, #48]	; 0x30
   1abd8:	e16f0f10 	clz	r0, r0
   1abdc:	e1a002a0 	lsr	r0, r0, #5
   1abe0:	e12fff1e 	bx	lr

0001abe4 <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1abe4:	e92d4070 	push	{r4, r5, r6, lr}
   1abe8:	e1a05003 	mov	r5, r3
   1abec:	e5903000 	ldr	r3, [r0]
   1abf0:	e1a06000 	mov	r6, r0
   1abf4:	e59d4010 	ldr	r4, [sp, #16]
   1abf8:	e5933018 	ldr	r3, [r3, #24]
   1abfc:	e12fff33 	blx	r3
   1ac00:	e3500000 	cmp	r0, #0
   1ac04:	d8bd8070 	pople	{r4, r5, r6, pc}
   1ac08:	e3550000 	cmp	r5, #0
   1ac0c:	13540000 	cmpne	r4, #0
   1ac10:	13a00001 	movne	r0, #1
   1ac14:	03a00000 	moveq	r0, #0
   1ac18:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ac1c:	e1a00005 	mov	r0, r5
   1ac20:	e286100c 	add	r1, r6, #12
   1ac24:	eb000c0c 	bl	1dc5c <CIPAddress::Set(CIPAddress const&)>
   1ac28:	e1d631b4 	ldrh	r3, [r6, #20]
   1ac2c:	e3a00000 	mov	r0, #0
   1ac30:	e1c430b0 	strh	r3, [r4]
   1ac34:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ac38 <CTCPConnection::Send(void const*, unsigned int, int)>:
   1ac38:	e3d3c040 	bics	ip, r3, #64	; 0x40
   1ac3c:	1a000041 	bne	1ad48 <CTCPConnection::Send(void const*, unsigned int, int)+0x110>
   1ac40:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ac44:	e1a04001 	mov	r4, r1
   1ac48:	e5901034 	ldr	r1, [r0, #52]	; 0x34
   1ac4c:	e3510000 	cmp	r1, #0
   1ac50:	ba00002e 	blt	1ad10 <CTCPConnection::Send(void const*, unsigned int, int)+0xd8>
   1ac54:	e5d01030 	ldrb	r1, [r0, #48]	; 0x30
   1ac58:	e6ef1071 	uxtb	r1, r1
   1ac5c:	e351000a 	cmp	r1, #10
   1ac60:	9a00001a 	bls	1acd0 <CTCPConnection::Send(void const*, unsigned int, int)+0x98>
   1ac64:	e3540000 	cmp	r4, #0
   1ac68:	e1a07002 	mov	r7, r2
   1ac6c:	e1a09000 	mov	r9, r0
   1ac70:	e1a08003 	mov	r8, r3
   1ac74:	0a00002c 	beq	1ad2c <CTCPConnection::Send(void const*, unsigned int, int)+0xf4>
   1ac78:	e3570d19 	cmp	r7, #1600	; 0x640
   1ac7c:	9a000025 	bls	1ad18 <CTCPConnection::Send(void const*, unsigned int, int)+0xe0>
   1ac80:	e2896038 	add	r6, r9, #56	; 0x38
   1ac84:	e1a05007 	mov	r5, r7
   1ac88:	e3a02d19 	mov	r2, #1600	; 0x640
   1ac8c:	e1a01004 	mov	r1, r4
   1ac90:	e2455d19 	sub	r5, r5, #1600	; 0x640
   1ac94:	e3a03000 	mov	r3, #0
   1ac98:	e1a00006 	mov	r0, r6
   1ac9c:	e0844002 	add	r4, r4, r2
   1aca0:	eb000cee 	bl	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1aca4:	e3550d19 	cmp	r5, #1600	; 0x640
   1aca8:	8afffff6 	bhi	1ac88 <CTCPConnection::Send(void const*, unsigned int, int)+0x50>
   1acac:	e1a02005 	mov	r2, r5
   1acb0:	e1a01004 	mov	r1, r4
   1acb4:	e1a00006 	mov	r0, r6
   1acb8:	e3a03000 	mov	r3, #0
   1acbc:	eb000ce7 	bl	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1acc0:	e3180040 	tst	r8, #64	; 0x40
   1acc4:	0a000007 	beq	1ace8 <CTCPConnection::Send(void const*, unsigned int, int)+0xb0>
   1acc8:	e1a00007 	mov	r0, r7
   1accc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1acd0:	e3a0e001 	mov	lr, #1
   1acd4:	e300c763 	movw	ip, #1891	; 0x763
   1acd8:	e01c111e 	ands	r1, ip, lr, lsl r1
   1acdc:	0affffe0 	beq	1ac64 <CTCPConnection::Send(void const*, unsigned int, int)+0x2c>
   1ace0:	e3e00000 	mvn	r0, #0
   1ace4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ace8:	e2894084 	add	r4, r9, #132	; 0x84
   1acec:	e1a00004 	mov	r0, r4
   1acf0:	eb0017b0 	bl	20bb8 <CSynchronizationEvent::Clear()>
   1acf4:	e1a00004 	mov	r0, r4
   1acf8:	eb0017bf 	bl	20bfc <CSynchronizationEvent::Wait()>
   1acfc:	e5993034 	ldr	r3, [r9, #52]	; 0x34
   1ad00:	e3530000 	cmp	r3, #0
   1ad04:	aaffffef 	bge	1acc8 <CTCPConnection::Send(void const*, unsigned int, int)+0x90>
   1ad08:	e5990034 	ldr	r0, [r9, #52]	; 0x34
   1ad0c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad10:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   1ad14:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad18:	e3570000 	cmp	r7, #0
   1ad1c:	0affffe7 	beq	1acc0 <CTCPConnection::Send(void const*, unsigned int, int)+0x88>
   1ad20:	e2896038 	add	r6, r9, #56	; 0x38
   1ad24:	e1a05007 	mov	r5, r7
   1ad28:	eaffffdf 	b	1acac <CTCPConnection::Send(void const*, unsigned int, int)+0x74>
   1ad2c:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1ad30:	e30e06f4 	movw	r0, #59124	; 0xe6f4
   1ad34:	e3401002 	movt	r1, #2
   1ad38:	e3400002 	movt	r0, #2
   1ad3c:	e3002182 	movw	r2, #386	; 0x182
   1ad40:	eb002796 	bl	24ba0 <assertion_failed>
   1ad44:	eaffffcb 	b	1ac78 <CTCPConnection::Send(void const*, unsigned int, int)+0x40>
   1ad48:	e3e00000 	mvn	r0, #0
   1ad4c:	e12fff1e 	bx	lr

0001ad50 <CTCPConnection::Receive(void*, int)>:
   1ad50:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad54:	e3d2b040 	bics	fp, r2, #64	; 0x40
   1ad58:	1a000029 	bne	1ae04 <CTCPConnection::Receive(void*, int)+0xb4>
   1ad5c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1ad60:	e3530000 	cmp	r3, #0
   1ad64:	b590b034 	ldrlt	fp, [r0, #52]	; 0x34
   1ad68:	ba000020 	blt	1adf0 <CTCPConnection::Receive(void*, int)+0xa0>
   1ad6c:	e1a07001 	mov	r7, r1
   1ad70:	e1a04000 	mov	r4, r0
   1ad74:	e1a06002 	mov	r6, r2
   1ad78:	e2808044 	add	r8, r0, #68	; 0x44
   1ad7c:	e3a09001 	mov	r9, #1
   1ad80:	e300a763 	movw	sl, #1891	; 0x763
   1ad84:	ea000010 	b	1adcc <CTCPConnection::Receive(void*, int)+0x7c>
   1ad88:	e5d43030 	ldrb	r3, [r4, #48]	; 0x30
   1ad8c:	e6ef3073 	uxtb	r3, r3
   1ad90:	e353000a 	cmp	r3, #10
   1ad94:	e1a02319 	lsl	r2, r9, r3
   1ad98:	8a000003 	bhi	1adac <CTCPConnection::Receive(void*, int)+0x5c>
   1ad9c:	e112000a 	tst	r2, sl
   1ada0:	1a000017 	bne	1ae04 <CTCPConnection::Receive(void*, int)+0xb4>
   1ada4:	e3120080 	tst	r2, #128	; 0x80
   1ada8:	1a000010 	bne	1adf0 <CTCPConnection::Receive(void*, int)+0xa0>
   1adac:	e3160040 	tst	r6, #64	; 0x40
   1adb0:	1a00000e 	bne	1adf0 <CTCPConnection::Receive(void*, int)+0xa0>
   1adb4:	eb00177f 	bl	20bb8 <CSynchronizationEvent::Clear()>
   1adb8:	e1a00005 	mov	r0, r5
   1adbc:	eb00178e 	bl	20bfc <CSynchronizationEvent::Wait()>
   1adc0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1adc4:	e3530000 	cmp	r3, #0
   1adc8:	ba00000a 	blt	1adf8 <CTCPConnection::Receive(void*, int)+0xa8>
   1adcc:	e3a02000 	mov	r2, #0
   1add0:	e1a01007 	mov	r1, r7
   1add4:	e1a00008 	mov	r0, r8
   1add8:	e2845084 	add	r5, r4, #132	; 0x84
   1addc:	eb000cf0 	bl	1e1a4 <CNetQueue::Dequeue(void*, void**)>
   1ade0:	e2503000 	subs	r3, r0, #0
   1ade4:	e1a00005 	mov	r0, r5
   1ade8:	0affffe6 	beq	1ad88 <CTCPConnection::Receive(void*, int)+0x38>
   1adec:	e1a0b003 	mov	fp, r3
   1adf0:	e1a0000b 	mov	r0, fp
   1adf4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adf8:	e594b034 	ldr	fp, [r4, #52]	; 0x34
   1adfc:	e1a0000b 	mov	r0, fp
   1ae00:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae04:	e3e0b000 	mvn	fp, #0
   1ae08:	e1a0000b 	mov	r0, fp
   1ae0c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ae10 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1ae10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ae14:	e59dc020 	ldr	ip, [sp, #32]
   1ae18:	e1dd61b8 	ldrh	r6, [sp, #24]
   1ae1c:	e35c0006 	cmp	ip, #6
   1ae20:	e1dd71bc 	ldrh	r7, [sp, #28]
   1ae24:	0a000001 	beq	1ae30 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1ae28:	e3a00000 	mov	r0, #0
   1ae2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ae30:	e5d01030 	ldrb	r1, [r0, #48]	; 0x30
   1ae34:	e3510001 	cmp	r1, #1
   1ae38:	dafffffa 	ble	1ae28 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ae3c:	e1a01002 	mov	r1, r2
   1ae40:	e1a04000 	mov	r4, r0
   1ae44:	e280000c 	add	r0, r0, #12
   1ae48:	e1a05003 	mov	r5, r3
   1ae4c:	eb000b05 	bl	1da68 <CIPAddress::operator!=(CIPAddress const&) const>
   1ae50:	e3500000 	cmp	r0, #0
   1ae54:	1afffff3 	bne	1ae28 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ae58:	e1d431b4 	ldrh	r3, [r4, #20]
   1ae5c:	e1530006 	cmp	r3, r6
   1ae60:	1afffff0 	bne	1ae28 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ae64:	e5940004 	ldr	r0, [r4, #4]
   1ae68:	e3500000 	cmp	r0, #0
   1ae6c:	0a00000e 	beq	1aeac <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x9c>
   1ae70:	eb000a6a 	bl	1d820 <CNetConfig::GetIPAddress() const>
   1ae74:	e1a01000 	mov	r1, r0
   1ae78:	e1a00005 	mov	r0, r5
   1ae7c:	eb000af9 	bl	1da68 <CIPAddress::operator!=(CIPAddress const&) const>
   1ae80:	e3500000 	cmp	r0, #0
   1ae84:	1affffe7 	bne	1ae28 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ae88:	e1d431b6 	ldrh	r3, [r4, #22]
   1ae8c:	e1530007 	cmp	r3, r7
   1ae90:	1affffe4 	bne	1ae28 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ae94:	e3e03000 	mvn	r3, #0
   1ae98:	e2840084 	add	r0, r4, #132	; 0x84
   1ae9c:	e5843034 	str	r3, [r4, #52]	; 0x34
   1aea0:	eb001747 	bl	20bc4 <CSynchronizationEvent::Set()>
   1aea4:	e3a00001 	mov	r0, #1
   1aea8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1aeac:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1aeb0:	e30e0610 	movw	r0, #58896	; 0xe610
   1aeb4:	e3401002 	movt	r1, #2
   1aeb8:	e3400002 	movt	r0, #2
   1aebc:	e3002522 	movw	r2, #1314	; 0x522
   1aec0:	eb002736 	bl	24ba0 <assertion_failed>
   1aec4:	e5940004 	ldr	r0, [r4, #4]
   1aec8:	eaffffe8 	b	1ae70 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x60>

0001aecc <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1aecc:	e92d4070 	push	{r4, r5, r6, lr}
   1aed0:	e24dd008 	sub	sp, sp, #8
   1aed4:	e3a0c006 	mov	ip, #6
   1aed8:	e1a04000 	mov	r4, r0
   1aedc:	e58dc000 	str	ip, [sp]
   1aee0:	e3a05000 	mov	r5, #0
   1aee4:	ebfffc46 	bl	1a004 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1aee8:	e59f30b0 	ldr	r3, [pc, #176]	; 1afa0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xd4>
   1aeec:	e3a06001 	mov	r6, #1
   1aef0:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1aef4:	e5c46030 	strb	r6, [r4, #48]	; 0x30
   1aef8:	e2840038 	add	r0, r4, #56	; 0x38
   1aefc:	e5843000 	str	r3, [r4]
   1af00:	e5845034 	str	r5, [r4, #52]	; 0x34
   1af04:	eb000c0c 	bl	1df3c <CNetQueue::CNetQueue()>
   1af08:	e2840044 	add	r0, r4, #68	; 0x44
   1af0c:	eb000c0a 	bl	1df3c <CNetQueue::CNetQueue()>
   1af10:	e2840050 	add	r0, r4, #80	; 0x50
   1af14:	e3a01801 	mov	r1, #65536	; 0x10000
   1af18:	eb000767 	bl	1ccbc <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1af1c:	e5845064 	str	r5, [r4, #100]	; 0x64
   1af20:	e1a01005 	mov	r1, r5
   1af24:	e5845068 	str	r5, [r4, #104]	; 0x68
   1af28:	e2840084 	add	r0, r4, #132	; 0x84
   1af2c:	e584506c 	str	r5, [r4, #108]	; 0x6c
   1af30:	e5845074 	str	r5, [r4, #116]	; 0x74
   1af34:	e5845078 	str	r5, [r4, #120]	; 0x78
   1af38:	eb00170b 	bl	20b6c <CSynchronizationEvent::CSynchronizationEvent(int)>
   1af3c:	eb001f7b 	bl	22d30 <CTimer::Get()>
   1af40:	e3033908 	movw	r3, #14600	; 0x3908
   1af44:	e3a02f86 	mov	r2, #536	; 0x218
   1af48:	e58430a8 	str	r3, [r4, #168]	; 0xa8
   1af4c:	e1c42cb8 	strh	r2, [r4, #200]	; 0xc8
   1af50:	e58430c0 	str	r3, [r4, #192]	; 0xc0
   1af54:	e584609c 	str	r6, [r4, #156]	; 0x9c
   1af58:	e1c45abc 	strh	r5, [r4, #172]	; 0xac
   1af5c:	e58450bc 	str	r5, [r4, #188]	; 0xbc
   1af60:	e58450c4 	str	r5, [r4, #196]	; 0xc4
   1af64:	e584008c 	str	r0, [r4, #140]	; 0x8c
   1af68:	e28400cc 	add	r0, r4, #204	; 0xcc
   1af6c:	eb000873 	bl	1d140 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1af70:	e3a00d19 	mov	r0, #1600	; 0x640
   1af74:	eb001c08 	bl	21f9c <operator new[](unsigned int)>
   1af78:	e584007c 	str	r0, [r4, #124]	; 0x7c
   1af7c:	e3a00d19 	mov	r0, #1600	; 0x640
   1af80:	eb001c05 	bl	21f9c <operator new[](unsigned int)>
   1af84:	e5845090 	str	r5, [r4, #144]	; 0x90
   1af88:	e5845094 	str	r5, [r4, #148]	; 0x94
   1af8c:	e5845098 	str	r5, [r4, #152]	; 0x98
   1af90:	e5840080 	str	r0, [r4, #128]	; 0x80
   1af94:	e1a00004 	mov	r0, r4
   1af98:	e28dd008 	add	sp, sp, #8
   1af9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1afa0:	0002eb7c 	.word	0x0002eb7c

0001afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   1afa4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afa8:	e24dd014 	sub	sp, sp, #20
   1afac:	e201bc02 	and	fp, r1, #512	; 0x200
   1afb0:	e1a07001 	mov	r7, r1
   1afb4:	e35b0000 	cmp	fp, #0
   1afb8:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
   1afbc:	e58d3008 	str	r3, [sp, #8]
   1afc0:	e1a05000 	mov	r5, r0
   1afc4:	13a01060 	movne	r1, #96	; 0x60
   1afc8:	03a01050 	moveq	r1, #80	; 0x50
   1afcc:	13a08018 	movne	r8, #24
   1afd0:	03a08014 	moveq	r8, #20
   1afd4:	e096a008 	adds	sl, r6, r8
   1afd8:	e58d1004 	str	r1, [sp, #4]
   1afdc:	e1a09002 	mov	r9, r2
   1afe0:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1afe4:	2a00005b 	bcs	1b158 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x1b4>
   1afe8:	e595407c 	ldr	r4, [r5, #124]	; 0x7c
   1afec:	e3540000 	cmp	r4, #0
   1aff0:	0a000044 	beq	1b108 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1aff4:	e1d521b4 	ldrh	r2, [r5, #20]
   1aff8:	e2170a01 	ands	r0, r7, #4096	; 0x1000
   1affc:	e1d511b6 	ldrh	r1, [r5, #22]
   1b000:	e6bf9f39 	rev	r9, r9
   1b004:	e6bf2fb2 	rev16	r2, r2
   1b008:	e1c420b2 	strh	r2, [r4, #2]
   1b00c:	159d2008 	ldrne	r2, [sp, #8]
   1b010:	e6bf1fb1 	rev16	r1, r1
   1b014:	e59dc004 	ldr	ip, [sp, #4]
   1b018:	16bf0f32 	revne	r0, r2
   1b01c:	e1c410b0 	strh	r1, [r4]
   1b020:	e1d52abc 	ldrh	r2, [r5, #172]	; 0xac
   1b024:	e35b0000 	cmp	fp, #0
   1b028:	e59510c0 	ldr	r1, [r5, #192]	; 0xc0
   1b02c:	e18c7007 	orr	r7, ip, r7
   1b030:	e6bf2fb2 	rev16	r2, r2
   1b034:	e5849004 	str	r9, [r4, #4]
   1b038:	e6bf1fb1 	rev16	r1, r1
   1b03c:	e5840008 	str	r0, [r4, #8]
   1b040:	e1c470bc 	strh	r7, [r4, #12]
   1b044:	e1c410be 	strh	r1, [r4, #14]
   1b048:	e1c421b2 	strh	r2, [r4, #18]
   1b04c:	0a000007 	beq	1b070 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xcc>
   1b050:	e3a02002 	mov	r2, #2
   1b054:	e5c42014 	strb	r2, [r4, #20]
   1b058:	e3a02004 	mov	r2, #4
   1b05c:	e5c42015 	strb	r2, [r4, #21]
   1b060:	e3a02005 	mov	r2, #5
   1b064:	e5c42016 	strb	r2, [r4, #22]
   1b068:	e3e0204b 	mvn	r2, #75	; 0x4b
   1b06c:	e5c42017 	strb	r2, [r4, #23]
   1b070:	e3560000 	cmp	r6, #0
   1b074:	01a01004 	moveq	r1, r4
   1b078:	0a000007 	beq	1b09c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xf8>
   1b07c:	e3530000 	cmp	r3, #0
   1b080:	11a00004 	movne	r0, r4
   1b084:	0a000029 	beq	1b130 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x18c>
   1b088:	e1a01003 	mov	r1, r3
   1b08c:	e1a02006 	mov	r2, r6
   1b090:	e0800008 	add	r0, r0, r8
   1b094:	eb00204b 	bl	231c8 <memcpy>
   1b098:	e595107c 	ldr	r1, [r5, #124]	; 0x7c
   1b09c:	e3a03000 	mov	r3, #0
   1b0a0:	e1a0200a 	mov	r2, sl
   1b0a4:	e5c43010 	strb	r3, [r4, #16]
   1b0a8:	e285001c 	add	r0, r5, #28
   1b0ac:	e5c43011 	strb	r3, [r4, #17]
   1b0b0:	eb000ce0 	bl	1e438 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1b0b4:	e5951008 	ldr	r1, [r5, #8]
   1b0b8:	e3510000 	cmp	r1, #0
   1b0bc:	e1c401b0 	strh	r0, [r4, #16]
   1b0c0:	0a000008 	beq	1b0e8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x144>
   1b0c4:	e595207c 	ldr	r2, [r5, #124]	; 0x7c
   1b0c8:	e1a00001 	mov	r0, r1
   1b0cc:	e3a0c006 	mov	ip, #6
   1b0d0:	e1a0300a 	mov	r3, sl
   1b0d4:	e285100c 	add	r1, r5, #12
   1b0d8:	e58dc038 	str	ip, [sp, #56]	; 0x38
   1b0dc:	e28dd014 	add	sp, sp, #20
   1b0e0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0e4:	eafff37c 	b	17edc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1b0e8:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b0ec:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   1b0f0:	e3401002 	movt	r1, #2
   1b0f4:	e3400002 	movt	r0, #2
   1b0f8:	e300256c 	movw	r2, #1388	; 0x56c
   1b0fc:	eb0026a7 	bl	24ba0 <assertion_failed>
   1b100:	e5951008 	ldr	r1, [r5, #8]
   1b104:	eaffffee 	b	1b0c4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x120>
   1b108:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b10c:	e30c05e0 	movw	r0, #50656	; 0xc5e0
   1b110:	e3401002 	movt	r1, #2
   1b114:	e3400002 	movt	r0, #2
   1b118:	e300253f 	movw	r2, #1343	; 0x53f
   1b11c:	e58d300c 	str	r3, [sp, #12]
   1b120:	eb00269e 	bl	24ba0 <assertion_failed>
   1b124:	e595407c 	ldr	r4, [r5, #124]	; 0x7c
   1b128:	e59d300c 	ldr	r3, [sp, #12]
   1b12c:	eaffffb0 	b	1aff4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x50>
   1b130:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b134:	e30e06f4 	movw	r0, #59124	; 0xe6f4
   1b138:	e3401002 	movt	r1, #2
   1b13c:	e3400002 	movt	r0, #2
   1b140:	e3002556 	movw	r2, #1366	; 0x556
   1b144:	e58d3004 	str	r3, [sp, #4]
   1b148:	eb002694 	bl	24ba0 <assertion_failed>
   1b14c:	e595007c 	ldr	r0, [r5, #124]	; 0x7c
   1b150:	e59d3004 	ldr	r3, [sp, #4]
   1b154:	eaffffcb 	b	1b088 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xe4>
   1b158:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b15c:	e30e0bf8 	movw	r0, #60408	; 0xebf8
   1b160:	e3401002 	movt	r1, #2
   1b164:	e3400002 	movt	r0, #2
   1b168:	e300253c 	movw	r2, #1340	; 0x53c
   1b16c:	e58d300c 	str	r3, [sp, #12]
   1b170:	eb00268a 	bl	24ba0 <assertion_failed>
   1b174:	e59d300c 	ldr	r3, [sp, #12]
   1b178:	eaffff9a 	b	1afe8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x44>

0001b17c <CTCPConnection::ScanOptions(TTCPHeader*)>:
   1b17c:	e92d4070 	push	{r4, r5, r6, lr}
   1b180:	e2514000 	subs	r4, r1, #0
   1b184:	e1a05000 	mov	r5, r0
   1b188:	0a000021 	beq	1b214 <CTCPConnection::ScanOptions(TTCPHeader*)+0x98>
   1b18c:	e1d420bc 	ldrh	r2, [r4, #12]
   1b190:	e2843014 	add	r3, r4, #20
   1b194:	e300c5c8 	movw	ip, #1480	; 0x5c8
   1b198:	e7e32252 	ubfx	r2, r2, #4, #4
   1b19c:	e0842102 	add	r2, r4, r2, lsl #2
   1b1a0:	e2831002 	add	r1, r3, #2
   1b1a4:	e1520001 	cmp	r2, r1
   1b1a8:	38bd8070 	popcc	{r4, r5, r6, pc}
   1b1ac:	e5d31000 	ldrb	r1, [r3]
   1b1b0:	e3510001 	cmp	r1, #1
   1b1b4:	0a000007 	beq	1b1d8 <CTCPConnection::ScanOptions(TTCPHeader*)+0x5c>
   1b1b8:	38bd8070 	popcc	{r4, r5, r6, pc}
   1b1bc:	e3510002 	cmp	r1, #2
   1b1c0:	e5d31001 	ldrb	r1, [r3, #1]
   1b1c4:	1a000001 	bne	1b1d0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x54>
   1b1c8:	e3510004 	cmp	r1, #4
   1b1cc:	0a000003 	beq	1b1e0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x64>
   1b1d0:	e0833001 	add	r3, r3, r1
   1b1d4:	eafffff1 	b	1b1a0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x24>
   1b1d8:	e2833001 	add	r3, r3, #1
   1b1dc:	eaffffef 	b	1b1a0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x24>
   1b1e0:	e2830004 	add	r0, r3, #4
   1b1e4:	e1520000 	cmp	r2, r0
   1b1e8:	3afffff8 	bcc	1b1d0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x54>
   1b1ec:	e5d3e002 	ldrb	lr, [r3, #2]
   1b1f0:	e5d30003 	ldrb	r0, [r3, #3]
   1b1f4:	e180040e 	orr	r0, r0, lr, lsl #8
   1b1f8:	e2800014 	add	r0, r0, #20
   1b1fc:	e150000c 	cmp	r0, ip
   1b200:	21a0000c 	movcs	r0, ip
   1b204:	e2400014 	sub	r0, r0, #20
   1b208:	e3500009 	cmp	r0, #9
   1b20c:	81c50cb8 	strhhi	r0, [r5, #200]	; 0xc8
   1b210:	eaffffee 	b	1b1d0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x54>
   1b214:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b218:	e30e0c18 	movw	r0, #60440	; 0xec18
   1b21c:	e3401002 	movt	r1, #2
   1b220:	e3400002 	movt	r0, #2
   1b224:	e3002572 	movw	r2, #1394	; 0x572
   1b228:	eb00265c 	bl	24ba0 <assertion_failed>
   1b22c:	eaffffd6 	b	1b18c <CTCPConnection::ScanOptions(TTCPHeader*)+0x10>

0001b230 <CTCPConnection::CalculateISN()>:
   1b230:	e92d4070 	push	{r4, r5, r6, lr}
   1b234:	e1a05000 	mov	r5, r0
   1b238:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
   1b23c:	e3500000 	cmp	r0, #0
   1b240:	0a00000d 	beq	1b27c <CTCPConnection::CalculateISN()+0x4c>
   1b244:	eb001c6d 	bl	22400 <CTimer::GetTime() const>
   1b248:	e1a04000 	mov	r4, r0
   1b24c:	e595008c 	ldr	r0, [r5, #140]	; 0x8c
   1b250:	eb001c66 	bl	223f0 <CTimer::GetTicks() const>
   1b254:	e308251f 	movw	r2, #34079	; 0x851f
   1b258:	e34521eb 	movt	r2, #20971	; 0x51eb
   1b25c:	e3a01064 	mov	r1, #100	; 0x64
   1b260:	e3a0c015 	mov	ip, #21
   1b264:	e0832290 	umull	r2, r3, r0, r2
   1b268:	e1a032a3 	lsr	r3, r3, #5
   1b26c:	e0630391 	mls	r3, r1, r3, r0
   1b270:	e0243491 	mla	r4, r1, r4, r3
   1b274:	e000049c 	mul	r0, ip, r4
   1b278:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b27c:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b280:	e30a0990 	movw	r0, #43408	; 0xa990
   1b284:	e3401002 	movt	r1, #2
   1b288:	e3400002 	movt	r0, #2
   1b28c:	e300259b 	movw	r2, #1435	; 0x59b
   1b290:	eb002642 	bl	24ba0 <assertion_failed>
   1b294:	e595008c 	ldr	r0, [r5, #140]	; 0x8c
   1b298:	eaffffe9 	b	1b244 <CTCPConnection::CalculateISN()+0x14>

0001b29c <CTCPConnection::StopTimer(unsigned int)>:
   1b29c:	e3510002 	cmp	r1, #2
   1b2a0:	e92d4070 	push	{r4, r5, r6, lr}
   1b2a4:	e1a04001 	mov	r4, r1
   1b2a8:	e1a05000 	mov	r5, r0
   1b2ac:	8a00000a 	bhi	1b2dc <CTCPConnection::StopTimer(unsigned int)+0x40>
   1b2b0:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1b2b4:	e3530000 	cmp	r3, #0
   1b2b8:	0a00001b 	beq	1b32c <CTCPConnection::StopTimer(unsigned int)+0x90>
   1b2bc:	e595009c 	ldr	r0, [r5, #156]	; 0x9c
   1b2c0:	e2844024 	add	r4, r4, #36	; 0x24
   1b2c4:	e3500000 	cmp	r0, #0
   1b2c8:	1a00000a 	bne	1b2f8 <CTCPConnection::StopTimer(unsigned int)+0x5c>
   1b2cc:	e7951104 	ldr	r1, [r5, r4, lsl #2]
   1b2d0:	e3510000 	cmp	r1, #0
   1b2d4:	1a00000b 	bne	1b308 <CTCPConnection::StopTimer(unsigned int)+0x6c>
   1b2d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b2dc:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b2e0:	e30e0c28 	movw	r0, #60456	; 0xec28
   1b2e4:	e3401002 	movt	r1, #2
   1b2e8:	e3400002 	movt	r0, #2
   1b2ec:	e30025ae 	movw	r2, #1454	; 0x5ae
   1b2f0:	eb00262a 	bl	24ba0 <assertion_failed>
   1b2f4:	eaffffed 	b	1b2b0 <CTCPConnection::StopTimer(unsigned int)+0x14>
   1b2f8:	eb001b32 	bl	21fc8 <EnterCritical>
   1b2fc:	e7951104 	ldr	r1, [r5, r4, lsl #2]
   1b300:	e3510000 	cmp	r1, #0
   1b304:	0a000003 	beq	1b318 <CTCPConnection::StopTimer(unsigned int)+0x7c>
   1b308:	e595008c 	ldr	r0, [r5, #140]	; 0x8c
   1b30c:	eb001d18 	bl	22774 <CTimer::CancelKernelTimer(unsigned int)>
   1b310:	e3a03000 	mov	r3, #0
   1b314:	e7853104 	str	r3, [r5, r4, lsl #2]
   1b318:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   1b31c:	e3530000 	cmp	r3, #0
   1b320:	08bd8070 	popeq	{r4, r5, r6, pc}
   1b324:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b328:	ea001b54 	b	22080 <LeaveCritical>
   1b32c:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b330:	e30a0990 	movw	r0, #43408	; 0xa990
   1b334:	e3401002 	movt	r1, #2
   1b338:	e3400002 	movt	r0, #2
   1b33c:	e30025af 	movw	r2, #1455	; 0x5af
   1b340:	eb002616 	bl	24ba0 <assertion_failed>
   1b344:	eaffffdc 	b	1b2bc <CTCPConnection::StopTimer(unsigned int)+0x20>

0001b348 <CTCPConnection::~CTCPConnection()>:
   1b348:	e5d02030 	ldrb	r2, [r0, #48]	; 0x30
   1b34c:	e59f30ac 	ldr	r3, [pc, #172]	; 1b400 <CTCPConnection::~CTCPConnection()+0xb8>
   1b350:	e3520000 	cmp	r2, #0
   1b354:	e92d4070 	push	{r4, r5, r6, lr}
   1b358:	e1a04000 	mov	r4, r0
   1b35c:	e5803000 	str	r3, [r0]
   1b360:	1a00001f 	bne	1b3e4 <CTCPConnection::~CTCPConnection()+0x9c>
   1b364:	e1a00004 	mov	r0, r4
   1b368:	e3a01000 	mov	r1, #0
   1b36c:	ebffffca 	bl	1b29c <CTCPConnection::StopTimer(unsigned int)>
   1b370:	e1a00004 	mov	r0, r4
   1b374:	e3a01001 	mov	r1, #1
   1b378:	e3a05000 	mov	r5, #0
   1b37c:	ebffffc6 	bl	1b29c <CTCPConnection::StopTimer(unsigned int)>
   1b380:	e1a00004 	mov	r0, r4
   1b384:	e3a01002 	mov	r1, #2
   1b388:	ebffffc3 	bl	1b29c <CTCPConnection::StopTimer(unsigned int)>
   1b38c:	e5940080 	ldr	r0, [r4, #128]	; 0x80
   1b390:	e3a01001 	mov	r1, #1
   1b394:	eb001b03 	bl	21fa8 <operator delete(void*, unsigned int)>
   1b398:	e3a01001 	mov	r1, #1
   1b39c:	e594007c 	ldr	r0, [r4, #124]	; 0x7c
   1b3a0:	e5845080 	str	r5, [r4, #128]	; 0x80
   1b3a4:	eb001aff 	bl	21fa8 <operator delete(void*, unsigned int)>
   1b3a8:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1b3ac:	e28400cc 	add	r0, r4, #204	; 0xcc
   1b3b0:	eb00077b 	bl	1d1a4 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   1b3b4:	e2840084 	add	r0, r4, #132	; 0x84
   1b3b8:	eb0015ef 	bl	20b7c <CSynchronizationEvent::~CSynchronizationEvent()>
   1b3bc:	e2840050 	add	r0, r4, #80	; 0x50
   1b3c0:	eb000653 	bl	1cd14 <CRetransmissionQueue::~CRetransmissionQueue()>
   1b3c4:	e2840044 	add	r0, r4, #68	; 0x44
   1b3c8:	eb000b1f 	bl	1e04c <CNetQueue::~CNetQueue()>
   1b3cc:	e2840038 	add	r0, r4, #56	; 0x38
   1b3d0:	eb000b1d 	bl	1e04c <CNetQueue::~CNetQueue()>
   1b3d4:	e1a00004 	mov	r0, r4
   1b3d8:	ebfffb34 	bl	1a0b0 <CNetConnection::~CNetConnection()>
   1b3dc:	e1a00004 	mov	r0, r4
   1b3e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b3e4:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b3e8:	e30e0c44 	movw	r0, #60484	; 0xec44
   1b3ec:	e3401002 	movt	r1, #2
   1b3f0:	e3400002 	movt	r0, #2
   1b3f4:	e3a020d4 	mov	r2, #212	; 0xd4
   1b3f8:	eb0025e8 	bl	24ba0 <assertion_failed>
   1b3fc:	eaffffd8 	b	1b364 <CTCPConnection::~CTCPConnection()+0x1c>
   1b400:	0002eb7c 	.word	0x0002eb7c

0001b404 <CTCPConnection::~CTCPConnection()>:
   1b404:	e92d4010 	push	{r4, lr}
   1b408:	e1a04000 	mov	r4, r0
   1b40c:	ebffffcd 	bl	1b348 <CTCPConnection::~CTCPConnection()>
   1b410:	e1a00004 	mov	r0, r4
   1b414:	e3a010f4 	mov	r1, #244	; 0xf4
   1b418:	eb001ae2 	bl	21fa8 <operator delete(void*, unsigned int)>
   1b41c:	e1a00004 	mov	r0, r4
   1b420:	e8bd8010 	pop	{r4, pc}

0001b424 <CTCPConnection::Close()>:
   1b424:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1b428:	e3530000 	cmp	r3, #0
   1b42c:	ba000036 	blt	1b50c <CTCPConnection::Close()+0xe8>
   1b430:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1b434:	e92d4010 	push	{r4, lr}
   1b438:	e1a04000 	mov	r4, r0
   1b43c:	e353000a 	cmp	r3, #10
   1b440:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1b444:	ea000013 	b	1b498 <CTCPConnection::Close()+0x74>
   1b448:	0001b4b4 	.word	0x0001b4b4
   1b44c:	0001b4bc 	.word	0x0001b4bc
   1b450:	0001b4bc 	.word	0x0001b4bc
   1b454:	0001b4dc 	.word	0x0001b4dc
   1b458:	0001b4dc 	.word	0x0001b4dc
   1b45c:	0001b498 	.word	0x0001b498
   1b460:	0001b498 	.word	0x0001b498
   1b464:	0001b474 	.word	0x0001b474
   1b468:	0001b4b4 	.word	0x0001b4b4
   1b46c:	0001b4b4 	.word	0x0001b4b4
   1b470:	0001b4b4 	.word	0x0001b4b4
   1b474:	e590306c 	ldr	r3, [r0, #108]	; 0x6c
   1b478:	e3530000 	cmp	r3, #0
   1b47c:	1a00002b 	bne	1b530 <CTCPConnection::Close()+0x10c>
   1b480:	e3a03005 	mov	r3, #5
   1b484:	e3a02009 	mov	r2, #9
   1b488:	e5843074 	str	r3, [r4, #116]	; 0x74
   1b48c:	e3a03001 	mov	r3, #1
   1b490:	e5c42070 	strb	r2, [r4, #112]	; 0x70
   1b494:	e584306c 	str	r3, [r4, #108]	; 0x6c
   1b498:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1b49c:	e3530000 	cmp	r3, #0
   1b4a0:	ba000001 	blt	1b4ac <CTCPConnection::Close()+0x88>
   1b4a4:	e3a00000 	mov	r0, #0
   1b4a8:	e8bd8010 	pop	{r4, pc}
   1b4ac:	e5940034 	ldr	r0, [r4, #52]	; 0x34
   1b4b0:	e8bd8010 	pop	{r4, pc}
   1b4b4:	e3e00000 	mvn	r0, #0
   1b4b8:	e8bd8010 	pop	{r4, pc}
   1b4bc:	e3a01001 	mov	r1, #1
   1b4c0:	ebffff75 	bl	1b29c <CTCPConnection::StopTimer(unsigned int)>
   1b4c4:	e3a03000 	mov	r3, #0
   1b4c8:	e5c43030 	strb	r3, [r4, #48]	; 0x30
   1b4cc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1b4d0:	e3530000 	cmp	r3, #0
   1b4d4:	aafffff2 	bge	1b4a4 <CTCPConnection::Close()+0x80>
   1b4d8:	eafffff3 	b	1b4ac <CTCPConnection::Close()+0x88>
   1b4dc:	e590306c 	ldr	r3, [r0, #108]	; 0x6c
   1b4e0:	e3530000 	cmp	r3, #0
   1b4e4:	1a00000a 	bne	1b514 <CTCPConnection::Close()+0xf0>
   1b4e8:	e3a03005 	mov	r3, #5
   1b4ec:	e3a02001 	mov	r2, #1
   1b4f0:	e5843074 	str	r3, [r4, #116]	; 0x74
   1b4f4:	e5c43070 	strb	r3, [r4, #112]	; 0x70
   1b4f8:	e584206c 	str	r2, [r4, #108]	; 0x6c
   1b4fc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1b500:	e3530000 	cmp	r3, #0
   1b504:	aaffffe6 	bge	1b4a4 <CTCPConnection::Close()+0x80>
   1b508:	eaffffe7 	b	1b4ac <CTCPConnection::Close()+0x88>
   1b50c:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   1b510:	e12fff1e 	bx	lr
   1b514:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b518:	e30e0c60 	movw	r0, #60512	; 0xec60
   1b51c:	e3401002 	movt	r1, #2
   1b520:	e3400002 	movt	r0, #2
   1b524:	e3002142 	movw	r2, #322	; 0x142
   1b528:	eb00259c 	bl	24ba0 <assertion_failed>
   1b52c:	eaffffed 	b	1b4e8 <CTCPConnection::Close()+0xc4>
   1b530:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b534:	e30e0c60 	movw	r0, #60512	; 0xec60
   1b538:	e3401002 	movt	r1, #2
   1b53c:	e3400002 	movt	r0, #2
   1b540:	e300214d 	movw	r2, #333	; 0x14d
   1b544:	eb002595 	bl	24ba0 <assertion_failed>
   1b548:	eaffffcc 	b	1b480 <CTCPConnection::Close()+0x5c>

0001b54c <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   1b54c:	e3510002 	cmp	r1, #2
   1b550:	e92d4070 	push	{r4, r5, r6, lr}
   1b554:	e1a04001 	mov	r4, r1
   1b558:	e24dd008 	sub	sp, sp, #8
   1b55c:	e1a05000 	mov	r5, r0
   1b560:	e1a06002 	mov	r6, r2
   1b564:	8a000012 	bhi	1b5b4 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x68>
   1b568:	e3560000 	cmp	r6, #0
   1b56c:	0a000018 	beq	1b5d4 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x88>
   1b570:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1b574:	e3530000 	cmp	r3, #0
   1b578:	0a00001e 	beq	1b5f8 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xac>
   1b57c:	e1a01004 	mov	r1, r4
   1b580:	e1a00005 	mov	r0, r5
   1b584:	ebffff44 	bl	1b29c <CTCPConnection::StopTimer(unsigned int)>
   1b588:	e595008c 	ldr	r0, [r5, #140]	; 0x8c
   1b58c:	e1a03004 	mov	r3, r4
   1b590:	e58d5000 	str	r5, [sp]
   1b594:	e1a01006 	mov	r1, r6
   1b598:	e30c2c60 	movw	r2, #52320	; 0xcc60
   1b59c:	e3402001 	movt	r2, #1
   1b5a0:	e2844024 	add	r4, r4, #36	; 0x24
   1b5a4:	eb001c1a 	bl	22614 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1b5a8:	e7850104 	str	r0, [r5, r4, lsl #2]
   1b5ac:	e28dd008 	add	sp, sp, #8
   1b5b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b5b4:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b5b8:	e30e0c28 	movw	r0, #60456	; 0xec28
   1b5bc:	e3401002 	movt	r1, #2
   1b5c0:	e3400002 	movt	r0, #2
   1b5c4:	e30025a3 	movw	r2, #1443	; 0x5a3
   1b5c8:	eb002574 	bl	24ba0 <assertion_failed>
   1b5cc:	e3560000 	cmp	r6, #0
   1b5d0:	1affffe6 	bne	1b570 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x24>
   1b5d4:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b5d8:	e30e0c70 	movw	r0, #60528	; 0xec70
   1b5dc:	e3401002 	movt	r1, #2
   1b5e0:	e3400002 	movt	r0, #2
   1b5e4:	e30025a4 	movw	r2, #1444	; 0x5a4
   1b5e8:	eb00256c 	bl	24ba0 <assertion_failed>
   1b5ec:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1b5f0:	e3530000 	cmp	r3, #0
   1b5f4:	1affffe0 	bne	1b57c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x30>
   1b5f8:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1b5fc:	e30a0990 	movw	r0, #43408	; 0xa990
   1b600:	e3401002 	movt	r1, #2
   1b604:	e3400002 	movt	r0, #2
   1b608:	e30025a5 	movw	r2, #1445	; 0x5a5
   1b60c:	eb002563 	bl	24ba0 <assertion_failed>
   1b610:	eaffffd9 	b	1b57c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x30>

0001b614 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1b614:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b618:	e24dd014 	sub	sp, sp, #20
   1b61c:	e3a05006 	mov	r5, #6
   1b620:	e1a04000 	mov	r4, r0
   1b624:	e1dde2b8 	ldrh	lr, [sp, #40]	; 0x28
   1b628:	e28070cc 	add	r7, r0, #204	; 0xcc
   1b62c:	e1ddc2bc 	ldrh	ip, [sp, #44]	; 0x2c
   1b630:	e3a06001 	mov	r6, #1
   1b634:	e58d5008 	str	r5, [sp, #8]
   1b638:	e3a05000 	mov	r5, #0
   1b63c:	e58de000 	str	lr, [sp]
   1b640:	e58dc004 	str	ip, [sp, #4]
   1b644:	ebfffa3e 	bl	19f44 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1b648:	e59f312c 	ldr	r3, [pc, #300]	; 1b77c <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x168>
   1b64c:	e5c45030 	strb	r5, [r4, #48]	; 0x30
   1b650:	e2840038 	add	r0, r4, #56	; 0x38
   1b654:	e5845034 	str	r5, [r4, #52]	; 0x34
   1b658:	e5843000 	str	r3, [r4]
   1b65c:	e584602c 	str	r6, [r4, #44]	; 0x2c
   1b660:	eb000a35 	bl	1df3c <CNetQueue::CNetQueue()>
   1b664:	e2840044 	add	r0, r4, #68	; 0x44
   1b668:	eb000a33 	bl	1df3c <CNetQueue::CNetQueue()>
   1b66c:	e3a01801 	mov	r1, #65536	; 0x10000
   1b670:	e2840050 	add	r0, r4, #80	; 0x50
   1b674:	eb000590 	bl	1ccbc <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1b678:	e1a01005 	mov	r1, r5
   1b67c:	e5845064 	str	r5, [r4, #100]	; 0x64
   1b680:	e2840084 	add	r0, r4, #132	; 0x84
   1b684:	e5845068 	str	r5, [r4, #104]	; 0x68
   1b688:	e584506c 	str	r5, [r4, #108]	; 0x6c
   1b68c:	e5845074 	str	r5, [r4, #116]	; 0x74
   1b690:	e5845078 	str	r5, [r4, #120]	; 0x78
   1b694:	eb001534 	bl	20b6c <CSynchronizationEvent::CSynchronizationEvent(int)>
   1b698:	eb001da4 	bl	22d30 <CTimer::Get()>
   1b69c:	e3033908 	movw	r3, #14600	; 0x3908
   1b6a0:	e3a02f86 	mov	r2, #536	; 0x218
   1b6a4:	e58430a8 	str	r3, [r4, #168]	; 0xa8
   1b6a8:	e1c42cb8 	strh	r2, [r4, #200]	; 0xc8
   1b6ac:	e58430c0 	str	r3, [r4, #192]	; 0xc0
   1b6b0:	e584609c 	str	r6, [r4, #156]	; 0x9c
   1b6b4:	e1c45abc 	strh	r5, [r4, #172]	; 0xac
   1b6b8:	e58450bc 	str	r5, [r4, #188]	; 0xbc
   1b6bc:	e58450c4 	str	r5, [r4, #196]	; 0xc4
   1b6c0:	e584008c 	str	r0, [r4, #140]	; 0x8c
   1b6c4:	e1a00007 	mov	r0, r7
   1b6c8:	eb00069c 	bl	1d140 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1b6cc:	e3a00d19 	mov	r0, #1600	; 0x640
   1b6d0:	eb001a31 	bl	21f9c <operator new[](unsigned int)>
   1b6d4:	e584007c 	str	r0, [r4, #124]	; 0x7c
   1b6d8:	e3a00d19 	mov	r0, #1600	; 0x640
   1b6dc:	eb001a2e 	bl	21f9c <operator new[](unsigned int)>
   1b6e0:	e5845090 	str	r5, [r4, #144]	; 0x90
   1b6e4:	e5845094 	str	r5, [r4, #148]	; 0x94
   1b6e8:	e5845098 	str	r5, [r4, #152]	; 0x98
   1b6ec:	e5840080 	str	r0, [r4, #128]	; 0x80
   1b6f0:	e1a00004 	mov	r0, r4
   1b6f4:	ebfffecd 	bl	1b230 <CTCPConnection::CalculateISN()>
   1b6f8:	e1a01000 	mov	r1, r0
   1b6fc:	e58400b8 	str	r0, [r4, #184]	; 0xb8
   1b700:	e1a00007 	mov	r0, r7
   1b704:	eb0006a9 	bl	1d1b0 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1b708:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1b70c:	e1a03005 	mov	r3, r5
   1b710:	e58d5004 	str	r5, [sp, #4]
   1b714:	e58d5000 	str	r5, [sp]
   1b718:	e0821006 	add	r1, r2, r6
   1b71c:	e58420a0 	str	r2, [r4, #160]	; 0xa0
   1b720:	e1a00004 	mov	r0, r4
   1b724:	e58410a4 	str	r1, [r4, #164]	; 0xa4
   1b728:	e3a01c02 	mov	r1, #512	; 0x200
   1b72c:	ebfffe1c 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1b730:	e1500005 	cmp	r0, r5
   1b734:	0a00000d 	beq	1b770 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x15c>
   1b738:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
   1b73c:	e1a02006 	mov	r2, r6
   1b740:	e1a00007 	mov	r0, r7
   1b744:	eb0006b6 	bl	1d224 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1b748:	e3a02002 	mov	r2, #2
   1b74c:	e3a03005 	mov	r3, #5
   1b750:	e5c42030 	strb	r2, [r4, #48]	; 0x30
   1b754:	e1a00007 	mov	r0, r7
   1b758:	e5843074 	str	r3, [r4, #116]	; 0x74
   1b75c:	eb000691 	bl	1d1a8 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1b760:	e1a01006 	mov	r1, r6
   1b764:	e1a02000 	mov	r2, r0
   1b768:	e1a00004 	mov	r0, r4
   1b76c:	ebffff76 	bl	1b54c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1b770:	e1a00004 	mov	r0, r4
   1b774:	e28dd014 	add	sp, sp, #20
   1b778:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b77c:	0002eb7c 	.word	0x0002eb7c

0001b780 <CTCPConnection::Process()>:
   1b780:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1b784:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1b788:	e3530000 	cmp	r3, #0
   1b78c:	e24dd00c 	sub	sp, sp, #12
   1b790:	e1a04000 	mov	r4, r0
   1b794:	1a000080 	bne	1b99c <CTCPConnection::Process()+0x21c>
   1b798:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1b79c:	e6ef3073 	uxtb	r3, r3
   1b7a0:	e353000a 	cmp	r3, #10
   1b7a4:	9a000015 	bls	1b800 <CTCPConnection::Process()+0x80>
   1b7a8:	e2846050 	add	r6, r4, #80	; 0x50
   1b7ac:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   1b7b0:	e3530000 	cmp	r3, #0
   1b7b4:	0a0000ac 	beq	1ba6c <CTCPConnection::Process()+0x2ec>
   1b7b8:	e2845038 	add	r5, r4, #56	; 0x38
   1b7bc:	e1a00006 	mov	r0, r6
   1b7c0:	eb000560 	bl	1cd48 <CRetransmissionQueue::GetFreeSpace() const>
   1b7c4:	e3500d19 	cmp	r0, #1600	; 0x640
   1b7c8:	2a00005e 	bcs	1b948 <CTCPConnection::Process()+0x1c8>
   1b7cc:	e5943064 	ldr	r3, [r4, #100]	; 0x64
   1b7d0:	e3530000 	cmp	r3, #0
   1b7d4:	1a00009d 	bne	1ba50 <CTCPConnection::Process()+0x2d0>
   1b7d8:	e30e8be4 	movw	r8, #60388	; 0xebe4
   1b7dc:	e30c7388 	movw	r7, #50056	; 0xc388
   1b7e0:	e3408002 	movt	r8, #2
   1b7e4:	e3407002 	movt	r7, #2
   1b7e8:	e1a00006 	mov	r0, r6
   1b7ec:	eb0005bd 	bl	1cee8 <CRetransmissionQueue::GetBytesAvailable() const>
   1b7f0:	e3500000 	cmp	r0, #0
   1b7f4:	1a000027 	bne	1b898 <CTCPConnection::Process()+0x118>
   1b7f8:	e28dd00c 	add	sp, sp, #12
   1b7fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b800:	e3a07001 	mov	r7, #1
   1b804:	e3002443 	movw	r2, #1091	; 0x443
   1b808:	e1a03317 	lsl	r3, r7, r3
   1b80c:	e0135002 	ands	r5, r3, r2
   1b810:	1afffff8 	bne	1b7f8 <CTCPConnection::Process()+0x78>
   1b814:	e213ce3b 	ands	ip, r3, #944	; 0x3b0
   1b818:	1a000067 	bne	1b9bc <CTCPConnection::Process()+0x23c>
   1b81c:	e313000c 	tst	r3, #12
   1b820:	0affffe0 	beq	1b7a8 <CTCPConnection::Process()+0x28>
   1b824:	e5903068 	ldr	r3, [r0, #104]	; 0x68
   1b828:	e3530000 	cmp	r3, #0
   1b82c:	0afffff1 	beq	1b7f8 <CTCPConnection::Process()+0x78>
   1b830:	e580c068 	str	ip, [r0, #104]	; 0x68
   1b834:	e28450cc 	add	r5, r4, #204	; 0xcc
   1b838:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1b83c:	e3530002 	cmp	r3, #2
   1b840:	059020b8 	ldreq	r2, [r0, #184]	; 0xb8
   1b844:	03a01c02 	moveq	r1, #512	; 0x200
   1b848:	159020b8 	ldrne	r2, [r0, #184]	; 0xb8
   1b84c:	13a01c12 	movne	r1, #4608	; 0x1200
   1b850:	159030bc 	ldrne	r3, [r0, #188]	; 0xbc
   1b854:	01a0300c 	moveq	r3, ip
   1b858:	058dc004 	streq	ip, [sp, #4]
   1b85c:	158dc004 	strne	ip, [sp, #4]
   1b860:	e58dc000 	str	ip, [sp]
   1b864:	ebfffdce 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1b868:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
   1b86c:	e3a02001 	mov	r2, #1
   1b870:	e1a00005 	mov	r0, r5
   1b874:	eb00066a 	bl	1d224 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1b878:	e1a00005 	mov	r0, r5
   1b87c:	eb000649 	bl	1d1a8 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1b880:	e3a01001 	mov	r1, #1
   1b884:	e1a02000 	mov	r2, r0
   1b888:	e1a00004 	mov	r0, r4
   1b88c:	e28dd00c 	add	sp, sp, #12
   1b890:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   1b894:	eaffff2c 	b	1b54c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1b898:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
   1b89c:	e59450a8 	ldr	r5, [r4, #168]	; 0xa8
   1b8a0:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1b8a4:	e0835005 	add	r5, r3, r5
   1b8a8:	e0553002 	subs	r3, r5, r2
   1b8ac:	0affffd1 	beq	1b7f8 <CTCPConnection::Process()+0x78>
   1b8b0:	e1d45cb8 	ldrh	r5, [r4, #200]	; 0xc8
   1b8b4:	e1550003 	cmp	r5, r3
   1b8b8:	21a05003 	movcs	r5, r3
   1b8bc:	e1550000 	cmp	r5, r0
   1b8c0:	21a05000 	movcs	r5, r0
   1b8c4:	e3550d19 	cmp	r5, #1600	; 0x640
   1b8c8:	8a00002e 	bhi	1b988 <CTCPConnection::Process()+0x208>
   1b8cc:	e1a02005 	mov	r2, r5
   1b8d0:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   1b8d4:	e1a00006 	mov	r0, r6
   1b8d8:	eb0005ad 	bl	1cf94 <CRetransmissionQueue::Read(void*, unsigned int)>
   1b8dc:	e1a00006 	mov	r0, r6
   1b8e0:	eb000512 	bl	1cd30 <CRetransmissionQueue::IsEmpty() const>
   1b8e4:	e3500000 	cmp	r0, #0
   1b8e8:	1a000020 	bne	1b970 <CTCPConnection::Process()+0x1f0>
   1b8ec:	e3a01a01 	mov	r1, #4096	; 0x1000
   1b8f0:	e594c080 	ldr	ip, [r4, #128]	; 0x80
   1b8f4:	e28490cc 	add	r9, r4, #204	; 0xcc
   1b8f8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1b8fc:	e1a00004 	mov	r0, r4
   1b900:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1b904:	e58dc000 	str	ip, [sp]
   1b908:	e58d5004 	str	r5, [sp, #4]
   1b90c:	ebfffda4 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1b910:	e1a02005 	mov	r2, r5
   1b914:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1b918:	e1a00009 	mov	r0, r9
   1b91c:	eb000640 	bl	1d224 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1b920:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
   1b924:	e1a00009 	mov	r0, r9
   1b928:	e0835005 	add	r5, r3, r5
   1b92c:	e58450a4 	str	r5, [r4, #164]	; 0xa4
   1b930:	eb00061c 	bl	1d1a8 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1b934:	e3a01001 	mov	r1, #1
   1b938:	e1a02000 	mov	r2, r0
   1b93c:	e1a00004 	mov	r0, r4
   1b940:	ebffff01 	bl	1b54c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1b944:	eaffffa7 	b	1b7e8 <CTCPConnection::Process()+0x68>
   1b948:	e3a02000 	mov	r2, #0
   1b94c:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   1b950:	e1a00005 	mov	r0, r5
   1b954:	eb000a12 	bl	1e1a4 <CNetQueue::Dequeue(void*, void**)>
   1b958:	e2502000 	subs	r2, r0, #0
   1b95c:	e1a00006 	mov	r0, r6
   1b960:	0affff99 	beq	1b7cc <CTCPConnection::Process()+0x4c>
   1b964:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   1b968:	eb000523 	bl	1cdfc <CRetransmissionQueue::Write(void const*, unsigned int)>
   1b96c:	eaffff92 	b	1b7bc <CTCPConnection::Process()+0x3c>
   1b970:	e2840038 	add	r0, r4, #56	; 0x38
   1b974:	eb000975 	bl	1df50 <CNetQueue::IsEmpty() const>
   1b978:	e3a01b06 	mov	r1, #6144	; 0x1800
   1b97c:	e3500000 	cmp	r0, #0
   1b980:	0affffd9 	beq	1b8ec <CTCPConnection::Process()+0x16c>
   1b984:	eaffffd9 	b	1b8f0 <CTCPConnection::Process()+0x170>
   1b988:	e3002251 	movw	r2, #593	; 0x251
   1b98c:	e1a01008 	mov	r1, r8
   1b990:	e1a00007 	mov	r0, r7
   1b994:	eb002481 	bl	24ba0 <assertion_failed>
   1b998:	eaffffcb 	b	1b8cc <CTCPConnection::Process()+0x14c>
   1b99c:	e3e02000 	mvn	r2, #0
   1b9a0:	e3a03000 	mov	r3, #0
   1b9a4:	e5802034 	str	r2, [r0, #52]	; 0x34
   1b9a8:	e2800084 	add	r0, r0, #132	; 0x84
   1b9ac:	e5c43030 	strb	r3, [r4, #48]	; 0x30
   1b9b0:	e28dd00c 	add	sp, sp, #12
   1b9b4:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   1b9b8:	ea001481 	b	20bc4 <CSynchronizationEvent::Set()>
   1b9bc:	e2806050 	add	r6, r0, #80	; 0x50
   1b9c0:	e1a00006 	mov	r0, r6
   1b9c4:	eb0004d9 	bl	1cd30 <CRetransmissionQueue::IsEmpty() const>
   1b9c8:	e3500000 	cmp	r0, #0
   1b9cc:	0affff76 	beq	1b7ac <CTCPConnection::Process()+0x2c>
   1b9d0:	e2840038 	add	r0, r4, #56	; 0x38
   1b9d4:	eb00095d 	bl	1df50 <CNetQueue::IsEmpty() const>
   1b9d8:	e3500000 	cmp	r0, #0
   1b9dc:	0affff72 	beq	1b7ac <CTCPConnection::Process()+0x2c>
   1b9e0:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
   1b9e4:	e3530000 	cmp	r3, #0
   1b9e8:	0affff6f 	beq	1b7ac <CTCPConnection::Process()+0x2c>
   1b9ec:	e28480cc 	add	r8, r4, #204	; 0xcc
   1b9f0:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1b9f4:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1b9f8:	e3a01c11 	mov	r1, #4352	; 0x1100
   1b9fc:	e58d5004 	str	r5, [sp, #4]
   1ba00:	e1a00004 	mov	r0, r4
   1ba04:	e58d5000 	str	r5, [sp]
   1ba08:	ebfffd65 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ba0c:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1ba10:	e1a00008 	mov	r0, r8
   1ba14:	e1a02007 	mov	r2, r7
   1ba18:	eb000601 	bl	1d224 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ba1c:	e5d42070 	ldrb	r2, [r4, #112]	; 0x70
   1ba20:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
   1ba24:	e1a00008 	mov	r0, r8
   1ba28:	e5c42030 	strb	r2, [r4, #48]	; 0x30
   1ba2c:	e2833001 	add	r3, r3, #1
   1ba30:	e584506c 	str	r5, [r4, #108]	; 0x6c
   1ba34:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   1ba38:	eb0005da 	bl	1d1a8 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ba3c:	e1a01007 	mov	r1, r7
   1ba40:	e1a02000 	mov	r2, r0
   1ba44:	e1a00004 	mov	r0, r4
   1ba48:	ebfffebf 	bl	1b54c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ba4c:	eaffff56 	b	1b7ac <CTCPConnection::Process()+0x2c>
   1ba50:	e3a03000 	mov	r3, #0
   1ba54:	e1a00006 	mov	r0, r6
   1ba58:	e5843064 	str	r3, [r4, #100]	; 0x64
   1ba5c:	eb0005af 	bl	1d120 <CRetransmissionQueue::Reset()>
   1ba60:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
   1ba64:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   1ba68:	eaffff5a 	b	1b7d8 <CTCPConnection::Process()+0x58>
   1ba6c:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1ba70:	e30e0c78 	movw	r0, #60536	; 0xec78
   1ba74:	e3401002 	movt	r1, #2
   1ba78:	e3400002 	movt	r0, #2
   1ba7c:	e300222f 	movw	r2, #559	; 0x22f
   1ba80:	eb002446 	bl	24ba0 <assertion_failed>
   1ba84:	eaffff4b 	b	1b7b8 <CTCPConnection::Process()+0x38>

0001ba88 <CTCPConnection::DumpStatus()>:
   1ba88:	e92d4070 	push	{r4, r5, r6, lr}
   1ba8c:	e1a04000 	mov	r4, r0
   1ba90:	e24dd020 	sub	sp, sp, #32
   1ba94:	eb0025c3 	bl	251a8 <CLogger::Get()>
   1ba98:	e5d4c030 	ldrb	ip, [r4, #48]	; 0x30
   1ba9c:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
   1baa0:	e30e3c8c 	movw	r3, #60556	; 0xec8c
   1baa4:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1baa8:	e3403002 	movt	r3, #2
   1baac:	e1d461b4 	ldrh	r6, [r4, #20]
   1bab0:	e59450c0 	ldr	r5, [r4, #192]	; 0xc0
   1bab4:	e0422001 	sub	r2, r2, r1
   1bab8:	e594e0a8 	ldr	lr, [r4, #168]	; 0xa8
   1babc:	e58d2008 	str	r2, [sp, #8]
   1bac0:	e3a02004 	mov	r2, #4
   1bac4:	e58dc000 	str	ip, [sp]
   1bac8:	e594c0a0 	ldr	ip, [r4, #160]	; 0xa0
   1bacc:	e58d6018 	str	r6, [sp, #24]
   1bad0:	e04cc001 	sub	ip, ip, r1
   1bad4:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
   1bad8:	e59440c4 	ldr	r4, [r4, #196]	; 0xc4
   1badc:	e58dc004 	str	ip, [sp, #4]
   1bae0:	e0411004 	sub	r1, r1, r4
   1bae4:	e58d5014 	str	r5, [sp, #20]
   1bae8:	e58d1010 	str	r1, [sp, #16]
   1baec:	e58de00c 	str	lr, [sp, #12]
   1baf0:	e59f1008 	ldr	r1, [pc, #8]	; 1bb00 <CTCPConnection::DumpStatus()+0x78>
   1baf4:	eb002688 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1baf8:	e28dd020 	add	sp, sp, #32
   1bafc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bb00:	0002ebb4 	.word	0x0002ebb4

0001bb04 <CTCPConnection::NewState(TTCPState, unsigned int)>:
   1bb04:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1bb08:	e92d4070 	push	{r4, r5, r6, lr}
   1bb0c:	e353000a 	cmp	r3, #10
   1bb10:	e24dd010 	sub	sp, sp, #16
   1bb14:	e1a05000 	mov	r5, r0
   1bb18:	e1a04001 	mov	r4, r1
   1bb1c:	e1a06002 	mov	r6, r2
   1bb20:	8a00001a 	bhi	1bb90 <CTCPConnection::NewState(TTCPState, unsigned int)+0x8c>
   1bb24:	e354000a 	cmp	r4, #10
   1bb28:	9a000005 	bls	1bb44 <CTCPConnection::NewState(TTCPState, unsigned int)+0x40>
   1bb2c:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1bb30:	e30e0cf8 	movw	r0, #60664	; 0xecf8
   1bb34:	e3401002 	movt	r1, #2
   1bb38:	e3400002 	movt	r0, #2
   1bb3c:	e300262d 	movw	r2, #1581	; 0x62d
   1bb40:	eb002416 	bl	24ba0 <assertion_failed>
   1bb44:	eb002597 	bl	251a8 <CLogger::Get()>
   1bb48:	e5d52030 	ldrb	r2, [r5, #48]	; 0x30
   1bb4c:	e30e1b74 	movw	r1, #60276	; 0xeb74
   1bb50:	e3401002 	movt	r1, #2
   1bb54:	e0813104 	add	r3, r1, r4, lsl #2
   1bb58:	e58d6008 	str	r6, [sp, #8]
   1bb5c:	e0812102 	add	r2, r1, r2, lsl #2
   1bb60:	e2811040 	add	r1, r1, #64	; 0x40
   1bb64:	e593e044 	ldr	lr, [r3, #68]	; 0x44
   1bb68:	e30e3d28 	movw	r3, #60712	; 0xed28
   1bb6c:	e592c044 	ldr	ip, [r2, #68]	; 0x44
   1bb70:	e3403002 	movt	r3, #2
   1bb74:	e3a02004 	mov	r2, #4
   1bb78:	e88d5000 	stm	sp, {ip, lr}
   1bb7c:	eb002666 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bb80:	e1a00004 	mov	r0, r4
   1bb84:	e5c54030 	strb	r4, [r5, #48]	; 0x30
   1bb88:	e28dd010 	add	sp, sp, #16
   1bb8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bb90:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1bb94:	e30e0cc4 	movw	r0, #60612	; 0xecc4
   1bb98:	e3401002 	movt	r1, #2
   1bb9c:	e3400002 	movt	r0, #2
   1bba0:	e300262c 	movw	r2, #1580	; 0x62c
   1bba4:	eb0023fd 	bl	24ba0 <assertion_failed>
   1bba8:	eaffffdd 	b	1bb24 <CTCPConnection::NewState(TTCPState, unsigned int)+0x20>

0001bbac <CTCPConnection::UnexpectedState(unsigned int)>:
   1bbac:	e92d4030 	push	{r4, r5, lr}
   1bbb0:	e1a05000 	mov	r5, r0
   1bbb4:	e24dd00c 	sub	sp, sp, #12
   1bbb8:	e1a04001 	mov	r4, r1
   1bbbc:	ebffffb1 	bl	1ba88 <CTCPConnection::DumpStatus()>
   1bbc0:	eb002578 	bl	251a8 <CLogger::Get()>
   1bbc4:	e5d5c030 	ldrb	ip, [r5, #48]	; 0x30
   1bbc8:	e3a02000 	mov	r2, #0
   1bbcc:	e58d4004 	str	r4, [sp, #4]
   1bbd0:	e59f1014 	ldr	r1, [pc, #20]	; 1bbec <CTCPConnection::UnexpectedState(unsigned int)+0x40>
   1bbd4:	e30e3d44 	movw	r3, #60740	; 0xed44
   1bbd8:	e58dc000 	str	ip, [sp]
   1bbdc:	e3403002 	movt	r3, #2
   1bbe0:	eb00264d 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bbe4:	e28dd00c 	add	sp, sp, #12
   1bbe8:	e8bd8030 	pop	{r4, r5, pc}
   1bbec:	0002ebb4 	.word	0x0002ebb4

0001bbf0 <CTCPConnection::Connect()>:
   1bbf0:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   1bbf4:	e92d4070 	push	{r4, r5, r6, lr}
   1bbf8:	e3520000 	cmp	r2, #0
   1bbfc:	e1a04000 	mov	r4, r0
   1bc00:	ba00000c 	blt	1bc38 <CTCPConnection::Connect()+0x48>
   1bc04:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1bc08:	e6ef3073 	uxtb	r3, r3
   1bc0c:	e353000a 	cmp	r3, #10
   1bc10:	8a000008 	bhi	1bc38 <CTCPConnection::Connect()+0x48>
   1bc14:	e3a02001 	mov	r2, #1
   1bc18:	e30017e2 	movw	r1, #2018	; 0x7e2
   1bc1c:	e1a02312 	lsl	r2, r2, r3
   1bc20:	e1120001 	tst	r2, r1
   1bc24:	1a00000e 	bne	1bc64 <CTCPConnection::Connect()+0x74>
   1bc28:	e3530000 	cmp	r3, #0
   1bc2c:	0a00000a 	beq	1bc5c <CTCPConnection::Connect()+0x6c>
   1bc30:	e312000c 	tst	r2, #12
   1bc34:	1a000001 	bne	1bc40 <CTCPConnection::Connect()+0x50>
   1bc38:	e5940034 	ldr	r0, [r4, #52]	; 0x34
   1bc3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bc40:	e2805084 	add	r5, r0, #132	; 0x84
   1bc44:	e1a00005 	mov	r0, r5
   1bc48:	eb0013da 	bl	20bb8 <CSynchronizationEvent::Clear()>
   1bc4c:	e1a00005 	mov	r0, r5
   1bc50:	eb0013e9 	bl	20bfc <CSynchronizationEvent::Wait()>
   1bc54:	e5940034 	ldr	r0, [r4, #52]	; 0x34
   1bc58:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bc5c:	e3e00000 	mvn	r0, #0
   1bc60:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bc64:	e3a010fb 	mov	r1, #251	; 0xfb
   1bc68:	ebffffcf 	bl	1bbac <CTCPConnection::UnexpectedState(unsigned int)>
   1bc6c:	e3e00000 	mvn	r0, #0
   1bc70:	e8bd8070 	pop	{r4, r5, r6, pc}

0001bc74 <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   1bc74:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1bc78:	e3530000 	cmp	r3, #0
   1bc7c:	ba000028 	blt	1bd24 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb0>
   1bc80:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1bc84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bc88:	e1a05002 	mov	r5, r2
   1bc8c:	e1a06001 	mov	r6, r1
   1bc90:	e1a04000 	mov	r4, r0
   1bc94:	e353000a 	cmp	r3, #10
   1bc98:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1bc9c:	ea000015 	b	1bcf8 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x84>
   1bca0:	0001bccc 	.word	0x0001bccc
   1bca4:	0001bce4 	.word	0x0001bce4
   1bca8:	0001bcd4 	.word	0x0001bcd4
   1bcac:	0001bcf8 	.word	0x0001bcf8
   1bcb0:	0001bcf8 	.word	0x0001bcf8
   1bcb4:	0001bccc 	.word	0x0001bccc
   1bcb8:	0001bccc 	.word	0x0001bccc
   1bcbc:	0001bccc 	.word	0x0001bccc
   1bcc0:	0001bccc 	.word	0x0001bccc
   1bcc4:	0001bccc 	.word	0x0001bccc
   1bcc8:	0001bccc 	.word	0x0001bccc
   1bccc:	e3e00000 	mvn	r0, #0
   1bcd0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bcd4:	e300110f 	movw	r1, #271	; 0x10f
   1bcd8:	ebffffb3 	bl	1bbac <CTCPConnection::UnexpectedState(unsigned int)>
   1bcdc:	e3e00000 	mvn	r0, #0
   1bce0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bce4:	e2807084 	add	r7, r0, #132	; 0x84
   1bce8:	e1a00007 	mov	r0, r7
   1bcec:	eb0013b1 	bl	20bb8 <CSynchronizationEvent::Clear()>
   1bcf0:	e1a00007 	mov	r0, r7
   1bcf4:	eb0013c0 	bl	20bfc <CSynchronizationEvent::Wait()>
   1bcf8:	e3560000 	cmp	r6, #0
   1bcfc:	0a000011 	beq	1bd48 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xd4>
   1bd00:	e1a00006 	mov	r0, r6
   1bd04:	e284100c 	add	r1, r4, #12
   1bd08:	eb0007d3 	bl	1dc5c <CIPAddress::Set(CIPAddress const&)>
   1bd0c:	e3550000 	cmp	r5, #0
   1bd10:	0a000005 	beq	1bd2c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb8>
   1bd14:	e1d431b4 	ldrh	r3, [r4, #20]
   1bd18:	e5940034 	ldr	r0, [r4, #52]	; 0x34
   1bd1c:	e1c530b0 	strh	r3, [r5]
   1bd20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bd24:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   1bd28:	e12fff1e 	bx	lr
   1bd2c:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1bd30:	e30e064c 	movw	r0, #58956	; 0xe64c
   1bd34:	e3401002 	movt	r1, #2
   1bd38:	e3400002 	movt	r0, #2
   1bd3c:	e3a02f4a 	mov	r2, #296	; 0x128
   1bd40:	eb002396 	bl	24ba0 <assertion_failed>
   1bd44:	eafffff2 	b	1bd14 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xa0>
   1bd48:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1bd4c:	e30e063c 	movw	r0, #58940	; 0xe63c
   1bd50:	e3401002 	movt	r1, #2
   1bd54:	e3400002 	movt	r0, #2
   1bd58:	e3002125 	movw	r2, #293	; 0x125
   1bd5c:	eb00238f 	bl	24ba0 <assertion_failed>
   1bd60:	eaffffe6 	b	1bd00 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x8c>

0001bd64 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1bd64:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd68:	e24dd024 	sub	sp, sp, #36	; 0x24
   1bd6c:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1bd70:	e35c0006 	cmp	ip, #6
   1bd74:	0a000002 	beq	1bd84 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x20>
   1bd78:	e3a00000 	mov	r0, #0
   1bd7c:	e28dd024 	add	sp, sp, #36	; 0x24
   1bd80:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd84:	e3520013 	cmp	r2, #19
   1bd88:	9a0000d1 	bls	1c0d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x370>
   1bd8c:	e3510000 	cmp	r1, #0
   1bd90:	e1a07003 	mov	r7, r3
   1bd94:	e1a06002 	mov	r6, r2
   1bd98:	e1a04001 	mov	r4, r1
   1bd9c:	e1a05000 	mov	r5, r0
   1bda0:	0a0000c4 	beq	1c0b8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x354>
   1bda4:	e1d430b2 	ldrh	r3, [r4, #2]
   1bda8:	e1d521b6 	ldrh	r2, [r5, #22]
   1bdac:	e6bf3fb3 	rev16	r3, r3
   1bdb0:	e6ff3073 	uxth	r3, r3
   1bdb4:	e1520003 	cmp	r2, r3
   1bdb8:	1affffee 	bne	1bd78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1bdbc:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1bdc0:	e3530001 	cmp	r3, #1
   1bdc4:	0a000038 	beq	1beac <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x148>
   1bdc8:	e1a01007 	mov	r1, r7
   1bdcc:	e285000c 	add	r0, r5, #12
   1bdd0:	eb000724 	bl	1da68 <CIPAddress::operator!=(CIPAddress const&) const>
   1bdd4:	e3500000 	cmp	r0, #0
   1bdd8:	1affffe6 	bne	1bd78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1bddc:	e1d430b0 	ldrh	r3, [r4]
   1bde0:	e1d521b4 	ldrh	r2, [r5, #20]
   1bde4:	e6bf3fb3 	rev16	r3, r3
   1bde8:	e6ff3073 	uxth	r3, r3
   1bdec:	e1520003 	cmp	r2, r3
   1bdf0:	0285a01c 	addeq	sl, r5, #28
   1bdf4:	1affffdf 	bne	1bd78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1bdf8:	e1a02006 	mov	r2, r6
   1bdfc:	e1a01004 	mov	r1, r4
   1be00:	e1a0000a 	mov	r0, sl
   1be04:	eb00098b 	bl	1e438 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1be08:	e3500000 	cmp	r0, #0
   1be0c:	1affffd9 	bne	1bd78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1be10:	e1d480bc 	ldrh	r8, [r4, #12]
   1be14:	e1a00005 	mov	r0, r5
   1be18:	e5942004 	ldr	r2, [r4, #4]
   1be1c:	e7e33258 	ubfx	r3, r8, #4, #4
   1be20:	e2181c02 	ands	r1, r8, #512	; 0x200
   1be24:	e6bf2f32 	rev	r2, r2
   1be28:	e58d1014 	str	r1, [sp, #20]
   1be2c:	e1a03103 	lsl	r3, r3, #2
   1be30:	e5949008 	ldr	r9, [r4, #8]
   1be34:	e0466003 	sub	r6, r6, r3
   1be38:	e58d3018 	str	r3, [sp, #24]
   1be3c:	e58d200c 	str	r2, [sp, #12]
   1be40:	1286b001 	addne	fp, r6, #1
   1be44:	01a0b006 	moveq	fp, r6
   1be48:	e2183c01 	ands	r3, r8, #256	; 0x100
   1be4c:	e58d301c 	str	r3, [sp, #28]
   1be50:	e1a01004 	mov	r1, r4
   1be54:	e1d430be 	ldrh	r3, [r4, #14]
   1be58:	128bb001 	addne	fp, fp, #1
   1be5c:	e6bf9f39 	rev	r9, r9
   1be60:	e6bf3fb3 	rev16	r3, r3
   1be64:	e6ff3073 	uxth	r3, r3
   1be68:	e58d3010 	str	r3, [sp, #16]
   1be6c:	ebfffcc2 	bl	1b17c <CTCPConnection::ScanOptions(TTCPHeader*)>
   1be70:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1be74:	e353000a 	cmp	r3, #10
   1be78:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1be7c:	ea000034 	b	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1be80:	0001c05c 	.word	0x0001c05c
   1be84:	0001bf5c 	.word	0x0001bf5c
   1be88:	0001bf28 	.word	0x0001bf28
   1be8c:	0001becc 	.word	0x0001becc
   1be90:	0001becc 	.word	0x0001becc
   1be94:	0001becc 	.word	0x0001becc
   1be98:	0001becc 	.word	0x0001becc
   1be9c:	0001becc 	.word	0x0001becc
   1bea0:	0001becc 	.word	0x0001becc
   1bea4:	0001becc 	.word	0x0001becc
   1bea8:	0001becc 	.word	0x0001becc
   1beac:	e1d430bc 	ldrh	r3, [r4, #12]
   1beb0:	e3130c02 	tst	r3, #512	; 0x200
   1beb4:	0affffaf 	beq	1bd78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1beb8:	e285a01c 	add	sl, r5, #28
   1bebc:	e1a01007 	mov	r1, r7
   1bec0:	e1a0000a 	mov	r0, sl
   1bec4:	eb000926 	bl	1e364 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1bec8:	eaffffca 	b	1bdf8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x94>
   1becc:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
   1bed0:	e3530000 	cmp	r3, #0
   1bed4:	0a000080 	beq	1c0dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x378>
   1bed8:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   1bedc:	e35b0000 	cmp	fp, #0
   1bee0:	e59d100c 	ldr	r1, [sp, #12]
   1bee4:	e0421001 	sub	r1, r2, r1
   1bee8:	1a00010f 	bne	1c32c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5c8>
   1beec:	e3510000 	cmp	r1, #0
   1bef0:	da0001ed 	ble	1c6ac <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x948>
   1bef4:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1bef8:	e3530003 	cmp	r3, #3
   1befc:	0a00007c 	beq	1c0f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x390>
   1bf00:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1bf04:	e3a0c000 	mov	ip, #0
   1bf08:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1bf0c:	e1a00005 	mov	r0, r5
   1bf10:	e3a01a01 	mov	r1, #4096	; 0x1000
   1bf14:	e58dc004 	str	ip, [sp, #4]
   1bf18:	e58dc000 	str	ip, [sp]
   1bf1c:	ebfffc20 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1bf20:	e3a00001 	mov	r0, #1
   1bf24:	eaffff94 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1bf28:	e3180a01 	tst	r8, #4096	; 0x1000
   1bf2c:	0a0000a7 	beq	1c1d0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x46c>
   1bf30:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1bf34:	e0433009 	sub	r3, r3, r9
   1bf38:	e3530000 	cmp	r3, #0
   1bf3c:	ba0001b5 	blt	1c618 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8b4>
   1bf40:	e2188b01 	ands	r8, r8, #1024	; 0x400
   1bf44:	058d8004 	streq	r8, [sp, #4]
   1bf48:	058d8000 	streq	r8, [sp]
   1bf4c:	01a03008 	moveq	r3, r8
   1bf50:	0a000099 	beq	1c1bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x458>
   1bf54:	e3a00001 	mov	r0, #1
   1bf58:	eaffff87 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1bf5c:	e2183b01 	ands	r3, r8, #1024	; 0x400
   1bf60:	1afffffb 	bne	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1bf64:	e3180a01 	tst	r8, #4096	; 0x1000
   1bf68:	1a000086 	bne	1c188 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x424>
   1bf6c:	e59d3014 	ldr	r3, [sp, #20]
   1bf70:	e3530000 	cmp	r3, #0
   1bf74:	0afffff6 	beq	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1bf78:	e59d300c 	ldr	r3, [sp, #12]
   1bf7c:	e35b0000 	cmp	fp, #0
   1bf80:	e59d2010 	ldr	r2, [sp, #16]
   1bf84:	e58590b4 	str	r9, [r5, #180]	; 0xb4
   1bf88:	e58530c4 	str	r3, [r5, #196]	; 0xc4
   1bf8c:	e58520a8 	str	r2, [r5, #168]	; 0xa8
   1bf90:	e1a02003 	mov	r2, r3
   1bf94:	e2833001 	add	r3, r3, #1
   1bf98:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1bf9c:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1bfa0:	0a0001b4 	beq	1c678 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x914>
   1bfa4:	e3560000 	cmp	r6, #0
   1bfa8:	0a000005 	beq	1bfc4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x260>
   1bfac:	e59d3018 	ldr	r3, [sp, #24]
   1bfb0:	e1a02006 	mov	r2, r6
   1bfb4:	e2850044 	add	r0, r5, #68	; 0x44
   1bfb8:	e0841003 	add	r1, r4, r3
   1bfbc:	e3a03000 	mov	r3, #0
   1bfc0:	eb000826 	bl	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1bfc4:	e1a00005 	mov	r0, r5
   1bfc8:	e28560cc 	add	r6, r5, #204	; 0xcc
   1bfcc:	ebfffc97 	bl	1b230 <CTCPConnection::CalculateISN()>
   1bfd0:	e1a01000 	mov	r1, r0
   1bfd4:	e58500b8 	str	r0, [r5, #184]	; 0xb8
   1bfd8:	e1a00006 	mov	r0, r6
   1bfdc:	eb000473 	bl	1d1b0 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1bfe0:	e1a01007 	mov	r1, r7
   1bfe4:	e285000c 	add	r0, r5, #12
   1bfe8:	eb00071b 	bl	1dc5c <CIPAddress::Set(CIPAddress const&)>
   1bfec:	e1d430b0 	ldrh	r3, [r4]
   1bff0:	e1a01007 	mov	r1, r7
   1bff4:	e1a0000a 	mov	r0, sl
   1bff8:	e6bf3fb3 	rev16	r3, r3
   1bffc:	e1c531b4 	strh	r3, [r5, #20]
   1c000:	eb0008d7 	bl	1e364 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1c004:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c008:	e59520b8 	ldr	r2, [r5, #184]	; 0xb8
   1c00c:	e3a00000 	mov	r0, #0
   1c010:	e3a01c12 	mov	r1, #4608	; 0x1200
   1c014:	e58d0004 	str	r0, [sp, #4]
   1c018:	e58d0000 	str	r0, [sp]
   1c01c:	e1a00005 	mov	r0, r5
   1c020:	ebfffbdf 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c024:	e1a00006 	mov	r0, r6
   1c028:	e3a02001 	mov	r2, #1
   1c02c:	e59510b8 	ldr	r1, [r5, #184]	; 0xb8
   1c030:	eb00047b 	bl	1d224 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1c034:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1c038:	e3a01003 	mov	r1, #3
   1c03c:	e2850084 	add	r0, r5, #132	; 0x84
   1c040:	e2832001 	add	r2, r3, #1
   1c044:	e5c51030 	strb	r1, [r5, #48]	; 0x30
   1c048:	e58530a0 	str	r3, [r5, #160]	; 0xa0
   1c04c:	e58520a4 	str	r2, [r5, #164]	; 0xa4
   1c050:	eb0012db 	bl	20bc4 <CSynchronizationEvent::Set()>
   1c054:	e3a00001 	mov	r0, #1
   1c058:	eaffff47 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c05c:	e2186b01 	ands	r6, r8, #1024	; 0x400
   1c060:	1affffbb 	bne	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c064:	e2188a01 	ands	r8, r8, #4096	; 0x1000
   1c068:	e1a01007 	mov	r1, r7
   1c06c:	e285000c 	add	r0, r5, #12
   1c070:	1a0000a2 	bne	1c300 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x59c>
   1c074:	eb0006f8 	bl	1dc5c <CIPAddress::Set(CIPAddress const&)>
   1c078:	e1d430b0 	ldrh	r3, [r4]
   1c07c:	e1a01007 	mov	r1, r7
   1c080:	e1a0000a 	mov	r0, sl
   1c084:	e6bf3fb3 	rev16	r3, r3
   1c088:	e1c531b4 	strh	r3, [r5, #20]
   1c08c:	eb0008b4 	bl	1e364 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1c090:	e59d300c 	ldr	r3, [sp, #12]
   1c094:	e58d8004 	str	r8, [sp, #4]
   1c098:	e1a02008 	mov	r2, r8
   1c09c:	e58d8000 	str	r8, [sp]
   1c0a0:	e083300b 	add	r3, r3, fp
   1c0a4:	e1a00005 	mov	r0, r5
   1c0a8:	e3a01b05 	mov	r1, #5120	; 0x1400
   1c0ac:	ebfffbbc 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c0b0:	e3a00001 	mov	r0, #1
   1c0b4:	eaffff30 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c0b8:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1c0bc:	e30e0788 	movw	r0, #59272	; 0xe788
   1c0c0:	e3401002 	movt	r1, #2
   1c0c4:	e3400002 	movt	r0, #2
   1c0c8:	e3002272 	movw	r2, #626	; 0x272
   1c0cc:	eb0022b3 	bl	24ba0 <assertion_failed>
   1c0d0:	eaffff33 	b	1bda4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x40>
   1c0d4:	e3e00000 	mvn	r0, #0
   1c0d8:	eaffff27 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c0dc:	e35b0000 	cmp	fp, #0
   1c0e0:	1affff83 	bne	1bef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1c0e4:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c0e8:	e59d200c 	ldr	r2, [sp, #12]
   1c0ec:	e1520003 	cmp	r2, r3
   1c0f0:	1affff7f 	bne	1bef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1c0f4:	e3180b01 	tst	r8, #1024	; 0x400
   1c0f8:	0a000066 	beq	1c298 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x534>
   1c0fc:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c100:	e2433003 	sub	r3, r3, #3
   1c104:	e3530007 	cmp	r3, #7
   1c108:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c10c:	ea000154 	b	1c664 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x900>
   1c110:	0001c168 	.word	0x0001c168
   1c114:	0001c130 	.word	0x0001c130
   1c118:	0001c130 	.word	0x0001c130
   1c11c:	0001c130 	.word	0x0001c130
   1c120:	0001c130 	.word	0x0001c130
   1c124:	0001c150 	.word	0x0001c150
   1c128:	0001c150 	.word	0x0001c150
   1c12c:	0001c150 	.word	0x0001c150
   1c130:	e3e03000 	mvn	r3, #0
   1c134:	e2850050 	add	r0, r5, #80	; 0x50
   1c138:	e5853034 	str	r3, [r5, #52]	; 0x34
   1c13c:	eb0003fa 	bl	1d12c <CRetransmissionQueue::Flush()>
   1c140:	e2850038 	add	r0, r5, #56	; 0x38
   1c144:	eb000785 	bl	1df60 <CNetQueue::Flush()>
   1c148:	e2850044 	add	r0, r5, #68	; 0x44
   1c14c:	eb000783 	bl	1df60 <CNetQueue::Flush()>
   1c150:	e3a03000 	mov	r3, #0
   1c154:	e2850084 	add	r0, r5, #132	; 0x84
   1c158:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c15c:	eb001298 	bl	20bc4 <CSynchronizationEvent::Set()>
   1c160:	e3a00001 	mov	r0, #1
   1c164:	eaffff04 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c168:	e2850050 	add	r0, r5, #80	; 0x50
   1c16c:	eb0003ee 	bl	1d12c <CRetransmissionQueue::Flush()>
   1c170:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
   1c174:	e3530000 	cmp	r3, #0
   1c178:	1a000180 	bne	1c780 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa1c>
   1c17c:	e3a00001 	mov	r0, #1
   1c180:	e5c50030 	strb	r0, [r5, #48]	; 0x30
   1c184:	eafffefc 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c188:	e1a01007 	mov	r1, r7
   1c18c:	e285000c 	add	r0, r5, #12
   1c190:	e58d300c 	str	r3, [sp, #12]
   1c194:	eb0006b0 	bl	1dc5c <CIPAddress::Set(CIPAddress const&)>
   1c198:	e1d420b0 	ldrh	r2, [r4]
   1c19c:	e1a01007 	mov	r1, r7
   1c1a0:	e1a0000a 	mov	r0, sl
   1c1a4:	e6bf2fb2 	rev16	r2, r2
   1c1a8:	e1c521b4 	strh	r2, [r5, #20]
   1c1ac:	eb00086c 	bl	1e364 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1c1b0:	e59d300c 	ldr	r3, [sp, #12]
   1c1b4:	e58d3004 	str	r3, [sp, #4]
   1c1b8:	e58d3000 	str	r3, [sp]
   1c1bc:	e1a02009 	mov	r2, r9
   1c1c0:	e1a00005 	mov	r0, r5
   1c1c4:	e3a01b01 	mov	r1, #1024	; 0x400
   1c1c8:	ebfffb75 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c1cc:	eaffff60 	b	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c1d0:	e3180b01 	tst	r8, #1024	; 0x400
   1c1d4:	1affff5e 	bne	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c1d8:	e2183c02 	ands	r3, r8, #512	; 0x200
   1c1dc:	e3530000 	cmp	r3, #0
   1c1e0:	0affff5b 	beq	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c1e4:	e59d300c 	ldr	r3, [sp, #12]
   1c1e8:	e58530c4 	str	r3, [r5, #196]	; 0xc4
   1c1ec:	e2833001 	add	r3, r3, #1
   1c1f0:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1c1f4:	e59520b8 	ldr	r2, [r5, #184]	; 0xb8
   1c1f8:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1c1fc:	e0423003 	sub	r3, r2, r3
   1c200:	e3530000 	cmp	r3, #0
   1c204:	ba00013d 	blt	1c700 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x99c>
   1c208:	e28580cc 	add	r8, r5, #204	; 0xcc
   1c20c:	e3a07000 	mov	r7, #0
   1c210:	e3a03003 	mov	r3, #3
   1c214:	e3a01c12 	mov	r1, #4608	; 0x1200
   1c218:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c21c:	e1a00005 	mov	r0, r5
   1c220:	e5857068 	str	r7, [r5, #104]	; 0x68
   1c224:	e58d7004 	str	r7, [sp, #4]
   1c228:	e58d7000 	str	r7, [sp]
   1c22c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c230:	ebfffb5b 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c234:	e3a02001 	mov	r2, #1
   1c238:	e59510b8 	ldr	r1, [r5, #184]	; 0xb8
   1c23c:	e1a00008 	mov	r0, r8
   1c240:	eb0003f7 	bl	1d224 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1c244:	e3a03005 	mov	r3, #5
   1c248:	e1a00008 	mov	r0, r8
   1c24c:	e5853074 	str	r3, [r5, #116]	; 0x74
   1c250:	eb0003d4 	bl	1d1a8 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1c254:	e3a01001 	mov	r1, #1
   1c258:	e1a02000 	mov	r2, r0
   1c25c:	e1a00005 	mov	r0, r5
   1c260:	ebfffcb9 	bl	1b54c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1c264:	e59d301c 	ldr	r3, [sp, #28]
   1c268:	e1530007 	cmp	r3, r7
   1c26c:	1a000118 	bne	1c6d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x970>
   1c270:	e1560007 	cmp	r6, r7
   1c274:	0affff36 	beq	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c278:	e59d3018 	ldr	r3, [sp, #24]
   1c27c:	e2850044 	add	r0, r5, #68	; 0x44
   1c280:	e1a02006 	mov	r2, r6
   1c284:	e0841003 	add	r1, r4, r3
   1c288:	e3a03000 	mov	r3, #0
   1c28c:	eb000773 	bl	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c290:	e3a00001 	mov	r0, #1
   1c294:	eafffeb8 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c298:	e2183c02 	ands	r3, r8, #512	; 0x200
   1c29c:	e3530000 	cmp	r3, #0
   1c2a0:	0a00002e 	beq	1c360 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5fc>
   1c2a4:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c2a8:	e3530003 	cmp	r3, #3
   1c2ac:	0a000104 	beq	1c6c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x960>
   1c2b0:	e3a04000 	mov	r4, #0
   1c2b4:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c2b8:	e3a01b01 	mov	r1, #1024	; 0x400
   1c2bc:	e1a03004 	mov	r3, r4
   1c2c0:	e58d4004 	str	r4, [sp, #4]
   1c2c4:	e1a00005 	mov	r0, r5
   1c2c8:	e58d4000 	str	r4, [sp]
   1c2cc:	ebfffb34 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c2d0:	e3e03000 	mvn	r3, #0
   1c2d4:	e2850050 	add	r0, r5, #80	; 0x50
   1c2d8:	e5853034 	str	r3, [r5, #52]	; 0x34
   1c2dc:	eb000392 	bl	1d12c <CRetransmissionQueue::Flush()>
   1c2e0:	e2850038 	add	r0, r5, #56	; 0x38
   1c2e4:	eb00071d 	bl	1df60 <CNetQueue::Flush()>
   1c2e8:	e2850044 	add	r0, r5, #68	; 0x44
   1c2ec:	eb00071b 	bl	1df60 <CNetQueue::Flush()>
   1c2f0:	e5c54030 	strb	r4, [r5, #48]	; 0x30
   1c2f4:	e2850084 	add	r0, r5, #132	; 0x84
   1c2f8:	eb001231 	bl	20bc4 <CSynchronizationEvent::Set()>
   1c2fc:	eaffff14 	b	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c300:	eb000655 	bl	1dc5c <CIPAddress::Set(CIPAddress const&)>
   1c304:	e1d430b0 	ldrh	r3, [r4]
   1c308:	e1a01007 	mov	r1, r7
   1c30c:	e1a0000a 	mov	r0, sl
   1c310:	e6bf3fb3 	rev16	r3, r3
   1c314:	e1c531b4 	strh	r3, [r5, #20]
   1c318:	eb000811 	bl	1e364 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1c31c:	e58d6004 	str	r6, [sp, #4]
   1c320:	e58d6000 	str	r6, [sp]
   1c324:	e1a03006 	mov	r3, r6
   1c328:	eaffffa3 	b	1c1bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x458>
   1c32c:	e3510000 	cmp	r1, #0
   1c330:	da0000d7 	ble	1c694 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x930>
   1c334:	e59d100c 	ldr	r1, [sp, #12]
   1c338:	e081000b 	add	r0, r1, fp
   1c33c:	e2821001 	add	r1, r2, #1
   1c340:	e0411000 	sub	r1, r1, r0
   1c344:	e3510000 	cmp	r1, #0
   1c348:	cafffee9 	bgt	1bef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1c34c:	e0833002 	add	r3, r3, r2
   1c350:	e1e03003 	mvn	r3, r3
   1c354:	e1730000 	cmn	r3, r0
   1c358:	5afffee5 	bpl	1bef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1c35c:	eaffff64 	b	1c0f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x390>
   1c360:	e3180a01 	tst	r8, #4096	; 0x1000
   1c364:	0afffefa 	beq	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c368:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c36c:	e2433003 	sub	r3, r3, #3
   1c370:	e3530007 	cmp	r3, #7
   1c374:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c378:	ea0000fc 	b	1c770 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa0c>
   1c37c:	0001c4fc 	.word	0x0001c4fc
   1c380:	0001c530 	.word	0x0001c530
   1c384:	0001c530 	.word	0x0001c530
   1c388:	0001c530 	.word	0x0001c530
   1c38c:	0001c530 	.word	0x0001c530
   1c390:	0001c530 	.word	0x0001c530
   1c394:	0001c4d4 	.word	0x0001c4d4
   1c398:	0001c39c 	.word	0x0001c39c
   1c39c:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c3a0:	e1590003 	cmp	r9, r3
   1c3a4:	0a00013a 	beq	1c894 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb30>
   1c3a8:	e35b0000 	cmp	fp, #0
   1c3ac:	0afffee8 	beq	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c3b0:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c3b4:	e2433004 	sub	r3, r3, #4
   1c3b8:	e3530006 	cmp	r3, #6
   1c3bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c3c0:	ea0000f6 	b	1c7a0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa3c>
   1c3c4:	0001c3e0 	.word	0x0001c3e0
   1c3c8:	0001c3e0 	.word	0x0001c3e0
   1c3cc:	0001c3e0 	.word	0x0001c3e0
   1c3d0:	0001c448 	.word	0x0001c448
   1c3d4:	0001c448 	.word	0x0001c448
   1c3d8:	0001c448 	.word	0x0001c448
   1c3dc:	0001c448 	.word	0x0001c448
   1c3e0:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c3e4:	e59d200c 	ldr	r2, [sp, #12]
   1c3e8:	e1520003 	cmp	r2, r3
   1c3ec:	1a0000ef 	bne	1c7b0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa4c>
   1c3f0:	e3560000 	cmp	r6, #0
   1c3f4:	0a000013 	beq	1c448 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6e4>
   1c3f8:	e59d3018 	ldr	r3, [sp, #24]
   1c3fc:	e1a02006 	mov	r2, r6
   1c400:	e2850044 	add	r0, r5, #68	; 0x44
   1c404:	e0841003 	add	r1, r4, r3
   1c408:	e3a03000 	mov	r3, #0
   1c40c:	eb000713 	bl	1e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c410:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c414:	e3a00000 	mov	r0, #0
   1c418:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c41c:	e0863003 	add	r3, r6, r3
   1c420:	e58d0004 	str	r0, [sp, #4]
   1c424:	e3a01a01 	mov	r1, #4096	; 0x1000
   1c428:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1c42c:	e58d0000 	str	r0, [sp]
   1c430:	e1a00005 	mov	r0, r5
   1c434:	ebfffada 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c438:	e3180b02 	tst	r8, #2048	; 0x800
   1c43c:	0a000001 	beq	1c448 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6e4>
   1c440:	e2850084 	add	r0, r5, #132	; 0x84
   1c444:	eb0011de 	bl	20bc4 <CSynchronizationEvent::Set()>
   1c448:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c44c:	e3530000 	cmp	r3, #0
   1c450:	0afffebf 	beq	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c454:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c458:	e3530001 	cmp	r3, #1
   1c45c:	0afffebc 	beq	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c460:	e5d52030 	ldrb	r2, [r5, #48]	; 0x30
   1c464:	e59d301c 	ldr	r3, [sp, #28]
   1c468:	e3530000 	cmp	r3, #0
   1c46c:	13520002 	cmpne	r2, #2
   1c470:	03a02001 	moveq	r2, #1
   1c474:	13a02000 	movne	r2, #0
   1c478:	0afffeb5 	beq	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c47c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c480:	e3a01a01 	mov	r1, #4096	; 0x1000
   1c484:	e58d2004 	str	r2, [sp, #4]
   1c488:	e1a00005 	mov	r0, r5
   1c48c:	e2833001 	add	r3, r3, #1
   1c490:	e58d2000 	str	r2, [sp]
   1c494:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1c498:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c49c:	ebfffac0 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c4a0:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c4a4:	e2433003 	sub	r3, r3, #3
   1c4a8:	e3530007 	cmp	r3, #7
   1c4ac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c4b0:	ea000148 	b	1c9d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc74>
   1c4b4:	0001c9c0 	.word	0x0001c9c0
   1c4b8:	0001c9c0 	.word	0x0001c9c0
   1c4bc:	0001c998 	.word	0x0001c998
   1c4c0:	0001c960 	.word	0x0001c960
   1c4c4:	0001bf54 	.word	0x0001bf54
   1c4c8:	0001bf54 	.word	0x0001bf54
   1c4cc:	0001bf54 	.word	0x0001bf54
   1c4d0:	0001c94c 	.word	0x0001c94c
   1c4d4:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c4d8:	e1590003 	cmp	r9, r3
   1c4dc:	1affffb1 	bne	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c4e0:	e3a03000 	mov	r3, #0
   1c4e4:	e2850084 	add	r0, r5, #132	; 0x84
   1c4e8:	e585306c 	str	r3, [r5, #108]	; 0x6c
   1c4ec:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c4f0:	eb0011b3 	bl	20bc4 <CSynchronizationEvent::Set()>
   1c4f4:	e3a00001 	mov	r0, #1
   1c4f8:	eafffe1f 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c4fc:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1c500:	e0433009 	sub	r3, r3, r9
   1c504:	e3530000 	cmp	r3, #0
   1c508:	da0000b0 	ble	1c7d0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa6c>
   1c50c:	e3a01000 	mov	r1, #0
   1c510:	e1a02009 	mov	r2, r9
   1c514:	e58d1004 	str	r1, [sp, #4]
   1c518:	e1a03001 	mov	r3, r1
   1c51c:	e58d1000 	str	r1, [sp]
   1c520:	e1a00005 	mov	r0, r5
   1c524:	e3a01b01 	mov	r1, #1024	; 0x400
   1c528:	ebfffa9d 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c52c:	eaffff9d 	b	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c530:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1c534:	e0532009 	subs	r2, r3, r9
   1c538:	4a0000cd 	bmi	1c874 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb10>
   1c53c:	e0493003 	sub	r3, r9, r3
   1c540:	e3530000 	cmp	r3, #0
   1c544:	c59520a4 	ldrgt	r2, [r5, #164]	; 0xa4
   1c548:	da0000b2 	ble	1c818 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xab4>
   1c54c:	e0423009 	sub	r3, r2, r9
   1c550:	e3530000 	cmp	r3, #0
   1c554:	ba000128 	blt	1c9fc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc98>
   1c558:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c55c:	e2433004 	sub	r3, r3, #4
   1c560:	e3530004 	cmp	r3, #4
   1c564:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c568:	ea00011f 	b	1c9ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc88>
   1c56c:	0001c3a8 	.word	0x0001c3a8
   1c570:	0001c5c8 	.word	0x0001c5c8
   1c574:	0001c5fc 	.word	0x0001c5fc
   1c578:	0001c3a8 	.word	0x0001c3a8
   1c57c:	0001c580 	.word	0x0001c580
   1c580:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c584:	e1590003 	cmp	r9, r3
   1c588:	1affff86 	bne	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c58c:	e1a01009 	mov	r1, r9
   1c590:	e28500cc 	add	r0, r5, #204	; 0xcc
   1c594:	eb000387 	bl	1d3b8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1c598:	e3a03000 	mov	r3, #0
   1c59c:	e1a00005 	mov	r0, r5
   1c5a0:	e585306c 	str	r3, [r5, #108]	; 0x6c
   1c5a4:	e3a01001 	mov	r1, #1
   1c5a8:	ebfffb3b 	bl	1b29c <CTCPConnection::StopTimer(unsigned int)>
   1c5ac:	e3a0300a 	mov	r3, #10
   1c5b0:	e3012770 	movw	r2, #6000	; 0x1770
   1c5b4:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c5b8:	e3a01002 	mov	r1, #2
   1c5bc:	e1a00005 	mov	r0, r5
   1c5c0:	ebfffbe1 	bl	1b54c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1c5c4:	eaffff77 	b	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c5c8:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c5cc:	e1590003 	cmp	r9, r3
   1c5d0:	1affff74 	bne	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c5d4:	e1a01009 	mov	r1, r9
   1c5d8:	e28500cc 	add	r0, r5, #204	; 0xcc
   1c5dc:	eb000375 	bl	1d3b8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1c5e0:	e3a03000 	mov	r3, #0
   1c5e4:	e3a01001 	mov	r1, #1
   1c5e8:	e585306c 	str	r3, [r5, #108]	; 0x6c
   1c5ec:	e1a00005 	mov	r0, r5
   1c5f0:	ebfffb29 	bl	1b29c <CTCPConnection::StopTimer(unsigned int)>
   1c5f4:	e3a03006 	mov	r3, #6
   1c5f8:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c5fc:	e2850050 	add	r0, r5, #80	; 0x50
   1c600:	eb0001ca 	bl	1cd30 <CRetransmissionQueue::IsEmpty() const>
   1c604:	e3500000 	cmp	r0, #0
   1c608:	0affff66 	beq	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c60c:	e2850084 	add	r0, r5, #132	; 0x84
   1c610:	eb00116b 	bl	20bc4 <CSynchronizationEvent::Set()>
   1c614:	eaffff63 	b	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c618:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c61c:	e0493003 	sub	r3, r9, r3
   1c620:	e3530000 	cmp	r3, #0
   1c624:	cafffe45 	bgt	1bf40 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1dc>
   1c628:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1c62c:	e0433009 	sub	r3, r3, r9
   1c630:	e3530000 	cmp	r3, #0
   1c634:	cafffe46 	bgt	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c638:	e3180b01 	tst	r8, #1024	; 0x400
   1c63c:	0a0000f7 	beq	1ca20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcbc>
   1c640:	e3a03000 	mov	r3, #0
   1c644:	e3e02000 	mvn	r2, #0
   1c648:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c64c:	e2850084 	add	r0, r5, #132	; 0x84
   1c650:	e5853068 	str	r3, [r5, #104]	; 0x68
   1c654:	e5852034 	str	r2, [r5, #52]	; 0x34
   1c658:	eb001159 	bl	20bc4 <CSynchronizationEvent::Set()>
   1c65c:	e3a00001 	mov	r0, #1
   1c660:	eafffdc5 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c664:	e1a00005 	mov	r0, r5
   1c668:	e3a01ff3 	mov	r1, #972	; 0x3cc
   1c66c:	ebfffd4e 	bl	1bbac <CTCPConnection::UnexpectedState(unsigned int)>
   1c670:	e3a00001 	mov	r0, #1
   1c674:	eafffdc0 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c678:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1c67c:	e30e0d64 	movw	r0, #60772	; 0xed64
   1c680:	e3401002 	movt	r1, #2
   1c684:	e3400002 	movt	r0, #2
   1c688:	e3a02fbb 	mov	r2, #748	; 0x2ec
   1c68c:	eb002143 	bl	24ba0 <assertion_failed>
   1c690:	eafffe43 	b	1bfa4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x240>
   1c694:	e59d000c 	ldr	r0, [sp, #12]
   1c698:	e0831002 	add	r1, r3, r2
   1c69c:	e0401001 	sub	r1, r0, r1
   1c6a0:	e3510000 	cmp	r1, #0
   1c6a4:	aaffff22 	bge	1c334 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5d0>
   1c6a8:	eafffe91 	b	1c0f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x390>
   1c6ac:	e0833002 	add	r3, r3, r2
   1c6b0:	e59d200c 	ldr	r2, [sp, #12]
   1c6b4:	e0423003 	sub	r3, r2, r3
   1c6b8:	e3530000 	cmp	r3, #0
   1c6bc:	aafffe0c 	bge	1bef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1c6c0:	eafffe8b 	b	1c0f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x390>
   1c6c4:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
   1c6c8:	e3530000 	cmp	r3, #0
   1c6cc:	0afffeaa 	beq	1c17c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x418>
   1c6d0:	eafffef6 	b	1c2b0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54c>
   1c6d4:	e58d7004 	str	r7, [sp, #4]
   1c6d8:	e1a03007 	mov	r3, r7
   1c6dc:	e58d7000 	str	r7, [sp]
   1c6e0:	e3a01b01 	mov	r1, #1024	; 0x400
   1c6e4:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c6e8:	e1a00005 	mov	r0, r5
   1c6ec:	ebfffa2c 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c6f0:	e3560000 	cmp	r6, #0
   1c6f4:	e5c57030 	strb	r7, [r5, #48]	; 0x30
   1c6f8:	0afffe15 	beq	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c6fc:	eafffedd 	b	1c278 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x514>
   1c700:	e3a07000 	mov	r7, #0
   1c704:	e3a03004 	mov	r3, #4
   1c708:	e3a01001 	mov	r1, #1
   1c70c:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c710:	e1a00005 	mov	r0, r5
   1c714:	e5857068 	str	r7, [r5, #104]	; 0x68
   1c718:	ebfffadf 	bl	1b29c <CTCPConnection::StopTimer(unsigned int)>
   1c71c:	e3a03005 	mov	r3, #5
   1c720:	e2850084 	add	r0, r5, #132	; 0x84
   1c724:	e5853074 	str	r3, [r5, #116]	; 0x74
   1c728:	eb001125 	bl	20bc4 <CSynchronizationEvent::Set()>
   1c72c:	e59d3010 	ldr	r3, [sp, #16]
   1c730:	e58d7004 	str	r7, [sp, #4]
   1c734:	e3a01a01 	mov	r1, #4096	; 0x1000
   1c738:	e58d7000 	str	r7, [sp]
   1c73c:	e1a00005 	mov	r0, r5
   1c740:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1c744:	e59d300c 	ldr	r3, [sp, #12]
   1c748:	e58590b4 	str	r9, [r5, #180]	; 0xb4
   1c74c:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c750:	e58530b0 	str	r3, [r5, #176]	; 0xb0
   1c754:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c758:	ebfffa11 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c75c:	e2183c01 	ands	r3, r8, #256	; 0x100
   1c760:	e1560007 	cmp	r6, r7
   1c764:	01530007 	cmpeq	r3, r7
   1c768:	1affff0e 	bne	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c76c:	eafffdf8 	b	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c770:	e3001493 	movw	r1, #1171	; 0x493
   1c774:	e1a00005 	mov	r0, r5
   1c778:	ebfffd0b 	bl	1bbac <CTCPConnection::UnexpectedState(unsigned int)>
   1c77c:	eaffff09 	b	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c780:	e3e02000 	mvn	r2, #0
   1c784:	e3a03000 	mov	r3, #0
   1c788:	e5852034 	str	r2, [r5, #52]	; 0x34
   1c78c:	e2850084 	add	r0, r5, #132	; 0x84
   1c790:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c794:	eb00110a 	bl	20bc4 <CSynchronizationEvent::Set()>
   1c798:	e3a00001 	mov	r0, #1
   1c79c:	eafffd76 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c7a0:	e30014c5 	movw	r1, #1221	; 0x4c5
   1c7a4:	e1a00005 	mov	r0, r5
   1c7a8:	ebfffcff 	bl	1bbac <CTCPConnection::UnexpectedState(unsigned int)>
   1c7ac:	eaffff25 	b	1c448 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6e4>
   1c7b0:	e3a0c000 	mov	ip, #0
   1c7b4:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c7b8:	e3a01a01 	mov	r1, #4096	; 0x1000
   1c7bc:	e58dc004 	str	ip, [sp, #4]
   1c7c0:	e1a00005 	mov	r0, r5
   1c7c4:	e58dc000 	str	ip, [sp]
   1c7c8:	ebfff9f5 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c7cc:	eaffff1d 	b	1c448 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6e4>
   1c7d0:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c7d4:	e0493003 	sub	r3, r9, r3
   1c7d8:	e3530000 	cmp	r3, #0
   1c7dc:	caffff4a 	bgt	1c50c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7a8>
   1c7e0:	e59d3010 	ldr	r3, [sp, #16]
   1c7e4:	e1a01009 	mov	r1, r9
   1c7e8:	e28500cc 	add	r0, r5, #204	; 0xcc
   1c7ec:	e58590b4 	str	r9, [r5, #180]	; 0xb4
   1c7f0:	e58590a0 	str	r9, [r5, #160]	; 0xa0
   1c7f4:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1c7f8:	e59d300c 	ldr	r3, [sp, #12]
   1c7fc:	e58530b0 	str	r3, [r5, #176]	; 0xb0
   1c800:	eb0002ec 	bl	1d3b8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1c804:	e3a02004 	mov	r2, #4
   1c808:	e3a03005 	mov	r3, #5
   1c80c:	e5c52030 	strb	r2, [r5, #48]	; 0x30
   1c810:	e5853074 	str	r3, [r5, #116]	; 0x74
   1c814:	eafffee3 	b	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c818:	e3520000 	cmp	r2, #0
   1c81c:	1affff4d 	bne	1c558 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c820:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c824:	e0493003 	sub	r3, r9, r3
   1c828:	e3530000 	cmp	r3, #0
   1c82c:	caffff49 	bgt	1c558 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c830:	e59530b0 	ldr	r3, [r5, #176]	; 0xb0
   1c834:	e59d100c 	ldr	r1, [sp, #12]
   1c838:	e0432001 	sub	r2, r3, r1
   1c83c:	e3520000 	cmp	r2, #0
   1c840:	ba000005 	blt	1c85c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xaf8>
   1c844:	e1510003 	cmp	r1, r3
   1c848:	1affff42 	bne	1c558 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c84c:	e59530b4 	ldr	r3, [r5, #180]	; 0xb4
   1c850:	e0433009 	sub	r3, r3, r9
   1c854:	e3530000 	cmp	r3, #0
   1c858:	caffff3e 	bgt	1c558 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c85c:	e59d3010 	ldr	r3, [sp, #16]
   1c860:	e58590b4 	str	r9, [r5, #180]	; 0xb4
   1c864:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1c868:	e59d300c 	ldr	r3, [sp, #12]
   1c86c:	e58530b0 	str	r3, [r5, #176]	; 0xb0
   1c870:	eaffff38 	b	1c558 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c874:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c878:	e0491002 	sub	r1, r9, r2
   1c87c:	e3510000 	cmp	r1, #0
   1c880:	da000011 	ble	1c8cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb68>
   1c884:	e0493003 	sub	r3, r9, r3
   1c888:	e3530000 	cmp	r3, #0
   1c88c:	caffff2e 	bgt	1c54c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7e8>
   1c890:	eaffff30 	b	1c558 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c894:	e3a00000 	mov	r0, #0
   1c898:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c89c:	e585006c 	str	r0, [r5, #108]	; 0x6c
   1c8a0:	e1a02009 	mov	r2, r9
   1c8a4:	e58d0004 	str	r0, [sp, #4]
   1c8a8:	e3a01a01 	mov	r1, #4096	; 0x1000
   1c8ac:	e58d0000 	str	r0, [sp]
   1c8b0:	e1a00005 	mov	r0, r5
   1c8b4:	ebfff9ba 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c8b8:	e3012770 	movw	r2, #6000	; 0x1770
   1c8bc:	e3a01002 	mov	r1, #2
   1c8c0:	e1a00005 	mov	r0, r5
   1c8c4:	ebfffb20 	bl	1b54c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1c8c8:	eafffeb6 	b	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c8cc:	e1a01009 	mov	r1, r9
   1c8d0:	e28500cc 	add	r0, r5, #204	; 0xcc
   1c8d4:	eb0002b7 	bl	1d3b8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1c8d8:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c8dc:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   1c8e0:	e1590003 	cmp	r9, r3
   1c8e4:	e58590a0 	str	r9, [r5, #160]	; 0xa0
   1c8e8:	e0497007 	sub	r7, r9, r7
   1c8ec:	1a000006 	bne	1c90c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xba8>
   1c8f0:	e1a00005 	mov	r0, r5
   1c8f4:	e3a01001 	mov	r1, #1
   1c8f8:	ebfffa67 	bl	1b29c <CTCPConnection::StopTimer(unsigned int)>
   1c8fc:	e3a03005 	mov	r3, #5
   1c900:	e2850084 	add	r0, r5, #132	; 0x84
   1c904:	e5853074 	str	r3, [r5, #116]	; 0x74
   1c908:	eb0010ad 	bl	20bc4 <CSynchronizationEvent::Set()>
   1c90c:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c910:	e3530005 	cmp	r3, #5
   1c914:	0a000054 	beq	1ca6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd08>
   1c918:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c91c:	e3530008 	cmp	r3, #8
   1c920:	0a000051 	beq	1ca6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd08>
   1c924:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c928:	e3530004 	cmp	r3, #4
   1c92c:	03570001 	cmpeq	r7, #1
   1c930:	0affffbe 	beq	1c830 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xacc>
   1c934:	e3570000 	cmp	r7, #0
   1c938:	0affffbc 	beq	1c830 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xacc>
   1c93c:	e1a01007 	mov	r1, r7
   1c940:	e2850050 	add	r0, r5, #80	; 0x50
   1c944:	eb0001cd 	bl	1d080 <CRetransmissionQueue::Advance(unsigned int)>
   1c948:	eaffffb8 	b	1c830 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xacc>
   1c94c:	e1a00005 	mov	r0, r5
   1c950:	e3012770 	movw	r2, #6000	; 0x1770
   1c954:	e3a01002 	mov	r1, #2
   1c958:	ebfffafb 	bl	1b54c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1c95c:	eafffd7c 	b	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c960:	e3a01001 	mov	r1, #1
   1c964:	e1a00005 	mov	r0, r5
   1c968:	ebfffa4b 	bl	1b29c <CTCPConnection::StopTimer(unsigned int)>
   1c96c:	e3a01000 	mov	r1, #0
   1c970:	e1a00005 	mov	r0, r5
   1c974:	ebfffa48 	bl	1b29c <CTCPConnection::StopTimer(unsigned int)>
   1c978:	e3a0300a 	mov	r3, #10
   1c97c:	e1a00005 	mov	r0, r5
   1c980:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c984:	e3012770 	movw	r2, #6000	; 0x1770
   1c988:	e3a01002 	mov	r1, #2
   1c98c:	ebfffaee 	bl	1b54c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1c990:	e3a00001 	mov	r0, #1
   1c994:	eafffcf8 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c998:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c99c:	e1590003 	cmp	r9, r3
   1c9a0:	03a04000 	moveq	r4, #0
   1c9a4:	03a01001 	moveq	r1, #1
   1c9a8:	0585406c 	streq	r4, [r5, #108]	; 0x6c
   1c9ac:	0affffec 	beq	1c964 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc00>
   1c9b0:	e3a03008 	mov	r3, #8
   1c9b4:	e3a00001 	mov	r0, #1
   1c9b8:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c9bc:	eafffcee 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c9c0:	e3a03007 	mov	r3, #7
   1c9c4:	e2850084 	add	r0, r5, #132	; 0x84
   1c9c8:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c9cc:	eb00107c 	bl	20bc4 <CSynchronizationEvent::Set()>
   1c9d0:	e3a00001 	mov	r0, #1
   1c9d4:	eafffce8 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c9d8:	e1a00005 	mov	r0, r5
   1c9dc:	e3001502 	movw	r1, #1282	; 0x502
   1c9e0:	ebfffc71 	bl	1bbac <CTCPConnection::UnexpectedState(unsigned int)>
   1c9e4:	e3a00001 	mov	r0, #1
   1c9e8:	eafffce3 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c9ec:	e300147a 	movw	r1, #1146	; 0x47a
   1c9f0:	e1a00005 	mov	r0, r5
   1c9f4:	ebfffc6c 	bl	1bbac <CTCPConnection::UnexpectedState(unsigned int)>
   1c9f8:	eafffe6a 	b	1c3a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c9fc:	e3a0c000 	mov	ip, #0
   1ca00:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1ca04:	e1a00005 	mov	r0, r5
   1ca08:	e58dc004 	str	ip, [sp, #4]
   1ca0c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1ca10:	e58dc000 	str	ip, [sp]
   1ca14:	ebfff962 	bl	1afa4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ca18:	e3a00001 	mov	r0, #1
   1ca1c:	eafffcd6 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ca20:	e2183c02 	ands	r3, r8, #512	; 0x200
   1ca24:	e3530000 	cmp	r3, #0
   1ca28:	0afffd49 	beq	1bf54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1ca2c:	e59d300c 	ldr	r3, [sp, #12]
   1ca30:	e1a01009 	mov	r1, r9
   1ca34:	e28500cc 	add	r0, r5, #204	; 0xcc
   1ca38:	e58530c4 	str	r3, [r5, #196]	; 0xc4
   1ca3c:	e2833001 	add	r3, r3, #1
   1ca40:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1ca44:	eb00025b 	bl	1d3b8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1ca48:	e59510a0 	ldr	r1, [r5, #160]	; 0xa0
   1ca4c:	e0491001 	sub	r1, r9, r1
   1ca50:	e3510001 	cmp	r1, #1
   1ca54:	9a000002 	bls	1ca64 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd00>
   1ca58:	e2411001 	sub	r1, r1, #1
   1ca5c:	e2850050 	add	r0, r5, #80	; 0x50
   1ca60:	eb000186 	bl	1d080 <CRetransmissionQueue::Advance(unsigned int)>
   1ca64:	e58590a0 	str	r9, [r5, #160]	; 0xa0
   1ca68:	eafffde1 	b	1c1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x490>
   1ca6c:	e3a03000 	mov	r3, #0
   1ca70:	e2477001 	sub	r7, r7, #1
   1ca74:	e585306c 	str	r3, [r5, #108]	; 0x6c
   1ca78:	eaffffa9 	b	1c924 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc0>

0001ca7c <CTCPConnection::TimerHandler(unsigned int)>:
   1ca7c:	e3510002 	cmp	r1, #2
   1ca80:	e92d4070 	push	{r4, r5, r6, lr}
   1ca84:	e1a05001 	mov	r5, r1
   1ca88:	e1a04000 	mov	r4, r0
   1ca8c:	8a00001a 	bhi	1cafc <CTCPConnection::TimerHandler(unsigned int)+0x80>
   1ca90:	e594009c 	ldr	r0, [r4, #156]	; 0x9c
   1ca94:	e3500000 	cmp	r0, #0
   1ca98:	1a00000d 	bne	1cad4 <CTCPConnection::TimerHandler(unsigned int)+0x58>
   1ca9c:	e2853024 	add	r3, r5, #36	; 0x24
   1caa0:	e7942103 	ldr	r2, [r4, r3, lsl #2]
   1caa4:	e3520000 	cmp	r2, #0
   1caa8:	17840103 	strne	r0, [r4, r3, lsl #2]
   1caac:	0a000007 	beq	1cad0 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   1cab0:	e3550003 	cmp	r5, #3
   1cab4:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
   1cab8:	ea000003 	b	1cacc <CTCPConnection::TimerHandler(unsigned int)+0x50>
   1cabc:	0001cb24 	.word	0x0001cb24
   1cac0:	0001cb40 	.word	0x0001cb40
   1cac4:	0001cb18 	.word	0x0001cb18
   1cac8:	0001cb24 	.word	0x0001cb24
   1cacc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cad0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cad4:	eb00153b 	bl	21fc8 <EnterCritical>
   1cad8:	e2853024 	add	r3, r5, #36	; 0x24
   1cadc:	e7942103 	ldr	r2, [r4, r3, lsl #2]
   1cae0:	e3520000 	cmp	r2, #0
   1cae4:	1a00002b 	bne	1cb98 <CTCPConnection::TimerHandler(unsigned int)+0x11c>
   1cae8:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
   1caec:	e3530000 	cmp	r3, #0
   1caf0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1caf4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1caf8:	ea001560 	b	22080 <LeaveCritical>
   1cafc:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1cb00:	e30e0c28 	movw	r0, #60456	; 0xec28
   1cb04:	e3401002 	movt	r1, #2
   1cb08:	e3400002 	movt	r0, #2
   1cb0c:	e30025be 	movw	r2, #1470	; 0x5be
   1cb10:	eb002022 	bl	24ba0 <assertion_failed>
   1cb14:	eaffffdd 	b	1ca90 <CTCPConnection::TimerHandler(unsigned int)+0x14>
   1cb18:	e3a03000 	mov	r3, #0
   1cb1c:	e5c43030 	strb	r3, [r4, #48]	; 0x30
   1cb20:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cb24:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1cb28:	e30b0138 	movw	r0, #45368	; 0xb138
   1cb2c:	e3401002 	movt	r1, #2
   1cb30:	e3400002 	movt	r0, #2
   1cb34:	e30025fc 	movw	r2, #1532	; 0x5fc
   1cb38:	e8bd4070 	pop	{r4, r5, r6, lr}
   1cb3c:	ea002017 	b	24ba0 <assertion_failed>
   1cb40:	e28400cc 	add	r0, r4, #204	; 0xcc
   1cb44:	eb0001de 	bl	1d2c4 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   1cb48:	e5943074 	ldr	r3, [r4, #116]	; 0x74
   1cb4c:	e3530000 	cmp	r3, #0
   1cb50:	e2433001 	sub	r3, r3, #1
   1cb54:	e5843074 	str	r3, [r4, #116]	; 0x74
   1cb58:	0a00003d 	beq	1cc54 <CTCPConnection::TimerHandler(unsigned int)+0x1d8>
   1cb5c:	e5d43030 	ldrb	r3, [r4, #48]	; 0x30
   1cb60:	e353000a 	cmp	r3, #10
   1cb64:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1cb68:	eaffffd7 	b	1cacc <CTCPConnection::TimerHandler(unsigned int)+0x50>
   1cb6c:	0001cc44 	.word	0x0001cc44
   1cb70:	0001cc44 	.word	0x0001cc44
   1cb74:	0001cc14 	.word	0x0001cc14
   1cb78:	0001cc14 	.word	0x0001cc14
   1cb7c:	0001cbe4 	.word	0x0001cbe4
   1cb80:	0001cbb4 	.word	0x0001cbb4
   1cb84:	0001cc44 	.word	0x0001cc44
   1cb88:	0001cbe4 	.word	0x0001cbe4
   1cb8c:	0001cbb4 	.word	0x0001cbb4
   1cb90:	0001cbb4 	.word	0x0001cbb4
   1cb94:	0001cc44 	.word	0x0001cc44
   1cb98:	e594209c 	ldr	r2, [r4, #156]	; 0x9c
   1cb9c:	e3a01000 	mov	r1, #0
   1cba0:	e7841103 	str	r1, [r4, r3, lsl #2]
   1cba4:	e1520001 	cmp	r2, r1
   1cba8:	0affffc0 	beq	1cab0 <CTCPConnection::TimerHandler(unsigned int)+0x34>
   1cbac:	eb001533 	bl	22080 <LeaveCritical>
   1cbb0:	eaffffbe 	b	1cab0 <CTCPConnection::TimerHandler(unsigned int)+0x34>
   1cbb4:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
   1cbb8:	e3530000 	cmp	r3, #0
   1cbbc:	0a000005 	beq	1cbd8 <CTCPConnection::TimerHandler(unsigned int)+0x15c>
   1cbc0:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1cbc4:	e30e0c60 	movw	r0, #60512	; 0xec60
   1cbc8:	e3401002 	movt	r1, #2
   1cbcc:	e3400002 	movt	r0, #2
   1cbd0:	e3a02e5f 	mov	r2, #1520	; 0x5f0
   1cbd4:	eb001ff1 	bl	24ba0 <assertion_failed>
   1cbd8:	e3a03001 	mov	r3, #1
   1cbdc:	e584306c 	str	r3, [r4, #108]	; 0x6c
   1cbe0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cbe4:	e5943064 	ldr	r3, [r4, #100]	; 0x64
   1cbe8:	e3530000 	cmp	r3, #0
   1cbec:	0a000005 	beq	1cc08 <CTCPConnection::TimerHandler(unsigned int)+0x18c>
   1cbf0:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1cbf4:	e30e0d80 	movw	r0, #60800	; 0xed80
   1cbf8:	e3401002 	movt	r1, #2
   1cbfc:	e3400002 	movt	r0, #2
   1cc00:	e30025e9 	movw	r2, #1513	; 0x5e9
   1cc04:	eb001fe5 	bl	24ba0 <assertion_failed>
   1cc08:	e3a03001 	mov	r3, #1
   1cc0c:	e5843064 	str	r3, [r4, #100]	; 0x64
   1cc10:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cc14:	e5943068 	ldr	r3, [r4, #104]	; 0x68
   1cc18:	e3530000 	cmp	r3, #0
   1cc1c:	0a000005 	beq	1cc38 <CTCPConnection::TimerHandler(unsigned int)+0x1bc>
   1cc20:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1cc24:	e30e0d74 	movw	r0, #60788	; 0xed74
   1cc28:	e3401002 	movt	r1, #2
   1cc2c:	e3400002 	movt	r0, #2
   1cc30:	e30025e3 	movw	r2, #1507	; 0x5e3
   1cc34:	eb001fd9 	bl	24ba0 <assertion_failed>
   1cc38:	e3a03001 	mov	r3, #1
   1cc3c:	e5843068 	str	r3, [r4, #104]	; 0x68
   1cc40:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cc44:	e1a00004 	mov	r0, r4
   1cc48:	e30015de 	movw	r1, #1502	; 0x5de
   1cc4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1cc50:	eafffbd5 	b	1bbac <CTCPConnection::UnexpectedState(unsigned int)>
   1cc54:	e3a03001 	mov	r3, #1
   1cc58:	e5843078 	str	r3, [r4, #120]	; 0x78
   1cc5c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001cc60 <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   1cc60:	e92d4070 	push	{r4, r5, r6, lr}
   1cc64:	e2525000 	subs	r5, r2, #0
   1cc68:	e1a04001 	mov	r4, r1
   1cc6c:	0a00000b 	beq	1cca0 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   1cc70:	e3540002 	cmp	r4, #2
   1cc74:	9a000005 	bls	1cc90 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x30>
   1cc78:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1cc7c:	e30e0c28 	movw	r0, #60456	; 0xec28
   1cc80:	e3401002 	movt	r1, #2
   1cc84:	e3400002 	movt	r0, #2
   1cc88:	e3002607 	movw	r2, #1543	; 0x607
   1cc8c:	eb001fc3 	bl	24ba0 <assertion_failed>
   1cc90:	e1a01004 	mov	r1, r4
   1cc94:	e1a00005 	mov	r0, r5
   1cc98:	e8bd4070 	pop	{r4, r5, r6, lr}
   1cc9c:	eaffff76 	b	1ca7c <CTCPConnection::TimerHandler(unsigned int)>
   1cca0:	e30e1be4 	movw	r1, #60388	; 0xebe4
   1cca4:	e30a0940 	movw	r0, #43328	; 0xa940
   1cca8:	e3401002 	movt	r1, #2
   1ccac:	e3400002 	movt	r0, #2
   1ccb0:	e3002604 	movw	r2, #1540	; 0x604
   1ccb4:	eb001fb9 	bl	24ba0 <assertion_failed>
   1ccb8:	eaffffec 	b	1cc70 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x10>

0001ccbc <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   1ccbc:	e3510001 	cmp	r1, #1
   1ccc0:	e3a03000 	mov	r3, #0
   1ccc4:	e92d4010 	push	{r4, lr}
   1ccc8:	e1a04000 	mov	r4, r0
   1cccc:	e880000a 	stm	r0, {r1, r3}
   1ccd0:	e5803008 	str	r3, [r0, #8]
   1ccd4:	e580300c 	str	r3, [r0, #12]
   1ccd8:	e5803010 	str	r3, [r0, #16]
   1ccdc:	9a000004 	bls	1ccf4 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x38>
   1cce0:	e1a00001 	mov	r0, r1
   1cce4:	eb0014ac 	bl	21f9c <operator new[](unsigned int)>
   1cce8:	e5840004 	str	r0, [r4, #4]
   1ccec:	e1a00004 	mov	r0, r4
   1ccf0:	e8bd8010 	pop	{r4, pc}
   1ccf4:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1ccf8:	e30e0e24 	movw	r0, #60964	; 0xee24
   1ccfc:	e3401002 	movt	r1, #2
   1cd00:	e3400002 	movt	r0, #2
   1cd04:	e3a0201e 	mov	r2, #30
   1cd08:	eb001fa4 	bl	24ba0 <assertion_failed>
   1cd0c:	e5941000 	ldr	r1, [r4]
   1cd10:	eafffff2 	b	1cce0 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x24>

0001cd14 <CRetransmissionQueue::~CRetransmissionQueue()>:
   1cd14:	e92d4010 	push	{r4, lr}
   1cd18:	e3a01001 	mov	r1, #1
   1cd1c:	e1a04000 	mov	r4, r0
   1cd20:	e5900004 	ldr	r0, [r0, #4]
   1cd24:	eb00149f 	bl	21fa8 <operator delete(void*, unsigned int)>
   1cd28:	e1a00004 	mov	r0, r4
   1cd2c:	e8bd8010 	pop	{r4, pc}

0001cd30 <CRetransmissionQueue::IsEmpty() const>:
   1cd30:	e590200c 	ldr	r2, [r0, #12]
   1cd34:	e5900008 	ldr	r0, [r0, #8]
   1cd38:	e0420000 	sub	r0, r2, r0
   1cd3c:	e16f0f10 	clz	r0, r0
   1cd40:	e1a002a0 	lsr	r0, r0, #5
   1cd44:	e12fff1e 	bx	lr

0001cd48 <CRetransmissionQueue::GetFreeSpace() const>:
   1cd48:	e5903000 	ldr	r3, [r0]
   1cd4c:	e92d4010 	push	{r4, lr}
   1cd50:	e3530001 	cmp	r3, #1
   1cd54:	e1a04000 	mov	r4, r0
   1cd58:	9a00001f 	bls	1cddc <CRetransmissionQueue::GetFreeSpace() const+0x94>
   1cd5c:	e5942008 	ldr	r2, [r4, #8]
   1cd60:	e1520003 	cmp	r2, r3
   1cd64:	2a00000a 	bcs	1cd94 <CRetransmissionQueue::GetFreeSpace() const+0x4c>
   1cd68:	e594000c 	ldr	r0, [r4, #12]
   1cd6c:	e1500003 	cmp	r0, r3
   1cd70:	2a000011 	bcs	1cdbc <CRetransmissionQueue::GetFreeSpace() const+0x74>
   1cd74:	e5943008 	ldr	r3, [r4, #8]
   1cd78:	e1530000 	cmp	r3, r0
   1cd7c:	25942000 	ldrcs	r2, [r4]
   1cd80:	31e03003 	mvncc	r3, r3
   1cd84:	22422001 	subcs	r2, r2, #1
   1cd88:	20423003 	subcs	r3, r2, r3
   1cd8c:	e0830000 	add	r0, r3, r0
   1cd90:	e8bd8010 	pop	{r4, pc}
   1cd94:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1cd98:	e30e0e30 	movw	r0, #60976	; 0xee30
   1cd9c:	e3401002 	movt	r1, #2
   1cda0:	e3400002 	movt	r0, #2
   1cda4:	e3a02034 	mov	r2, #52	; 0x34
   1cda8:	eb001f7c 	bl	24ba0 <assertion_failed>
   1cdac:	e5943000 	ldr	r3, [r4]
   1cdb0:	e594000c 	ldr	r0, [r4, #12]
   1cdb4:	e1500003 	cmp	r0, r3
   1cdb8:	3affffed 	bcc	1cd74 <CRetransmissionQueue::GetFreeSpace() const+0x2c>
   1cdbc:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1cdc0:	e30e0e44 	movw	r0, #60996	; 0xee44
   1cdc4:	e3401002 	movt	r1, #2
   1cdc8:	e3400002 	movt	r0, #2
   1cdcc:	e3a02035 	mov	r2, #53	; 0x35
   1cdd0:	eb001f72 	bl	24ba0 <assertion_failed>
   1cdd4:	e594000c 	ldr	r0, [r4, #12]
   1cdd8:	eaffffe5 	b	1cd74 <CRetransmissionQueue::GetFreeSpace() const+0x2c>
   1cddc:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1cde0:	e30e0e24 	movw	r0, #60964	; 0xee24
   1cde4:	e3401002 	movt	r1, #2
   1cde8:	e3400002 	movt	r0, #2
   1cdec:	e3a02033 	mov	r2, #51	; 0x33
   1cdf0:	eb001f6a 	bl	24ba0 <assertion_failed>
   1cdf4:	e5943000 	ldr	r3, [r4]
   1cdf8:	eaffffd7 	b	1cd5c <CRetransmissionQueue::GetFreeSpace() const+0x14>

0001cdfc <CRetransmissionQueue::Write(void const*, unsigned int)>:
   1cdfc:	e92d4070 	push	{r4, r5, r6, lr}
   1ce00:	e2526000 	subs	r6, r2, #0
   1ce04:	e1a05001 	mov	r5, r1
   1ce08:	e1a04000 	mov	r4, r0
   1ce0c:	0a00001e 	beq	1ce8c <CRetransmissionQueue::Write(void const*, unsigned int)+0x90>
   1ce10:	ebffffcc 	bl	1cd48 <CRetransmissionQueue::GetFreeSpace() const>
   1ce14:	e1560000 	cmp	r6, r0
   1ce18:	8a000014 	bhi	1ce70 <CRetransmissionQueue::Write(void const*, unsigned int)+0x74>
   1ce1c:	e3550000 	cmp	r5, #0
   1ce20:	0a000029 	beq	1cecc <CRetransmissionQueue::Write(void const*, unsigned int)+0xd0>
   1ce24:	e5943004 	ldr	r3, [r4, #4]
   1ce28:	e3530000 	cmp	r3, #0
   1ce2c:	0a00001f 	beq	1ceb0 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb4>
   1ce30:	e3560000 	cmp	r6, #0
   1ce34:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ce38:	e5941008 	ldr	r1, [r4, #8]
   1ce3c:	e0856006 	add	r6, r5, r6
   1ce40:	e2812001 	add	r2, r1, #1
   1ce44:	e5943004 	ldr	r3, [r4, #4]
   1ce48:	e5842008 	str	r2, [r4, #8]
   1ce4c:	e4d52001 	ldrb	r2, [r5], #1
   1ce50:	e7c32001 	strb	r2, [r3, r1]
   1ce54:	e5940008 	ldr	r0, [r4, #8]
   1ce58:	e5941000 	ldr	r1, [r4]
   1ce5c:	eb0013a8 	bl	21d04 <__aeabi_uidivmod>
   1ce60:	e1550006 	cmp	r5, r6
   1ce64:	e5841008 	str	r1, [r4, #8]
   1ce68:	1afffff4 	bne	1ce40 <CRetransmissionQueue::Write(void const*, unsigned int)+0x44>
   1ce6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ce70:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1ce74:	e30e0e58 	movw	r0, #61016	; 0xee58
   1ce78:	e3401002 	movt	r1, #2
   1ce7c:	e3400002 	movt	r0, #2
   1ce80:	e3a02042 	mov	r2, #66	; 0x42
   1ce84:	eb001f45 	bl	24ba0 <assertion_failed>
   1ce88:	eaffffe3 	b	1ce1c <CRetransmissionQueue::Write(void const*, unsigned int)+0x20>
   1ce8c:	e3a02041 	mov	r2, #65	; 0x41
   1ce90:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1ce94:	e30e0700 	movw	r0, #59136	; 0xe700
   1ce98:	e3401002 	movt	r1, #2
   1ce9c:	e3400002 	movt	r0, #2
   1cea0:	eb001f3e 	bl	24ba0 <assertion_failed>
   1cea4:	e1a00004 	mov	r0, r4
   1cea8:	ebffffa6 	bl	1cd48 <CRetransmissionQueue::GetFreeSpace() const>
   1ceac:	eaffffda 	b	1ce1c <CRetransmissionQueue::Write(void const*, unsigned int)+0x20>
   1ceb0:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1ceb4:	e30c0424 	movw	r0, #50212	; 0xc424
   1ceb8:	e3401002 	movt	r1, #2
   1cebc:	e3400002 	movt	r0, #2
   1cec0:	e3a02046 	mov	r2, #70	; 0x46
   1cec4:	eb001f35 	bl	24ba0 <assertion_failed>
   1cec8:	eaffffd8 	b	1ce30 <CRetransmissionQueue::Write(void const*, unsigned int)+0x34>
   1cecc:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1ced0:	e30e0e74 	movw	r0, #61044	; 0xee74
   1ced4:	e3401002 	movt	r1, #2
   1ced8:	e3400002 	movt	r0, #2
   1cedc:	e3a02045 	mov	r2, #69	; 0x45
   1cee0:	eb001f2e 	bl	24ba0 <assertion_failed>
   1cee4:	eaffffce 	b	1ce24 <CRetransmissionQueue::Write(void const*, unsigned int)+0x28>

0001cee8 <CRetransmissionQueue::GetBytesAvailable() const>:
   1cee8:	e5903000 	ldr	r3, [r0]
   1ceec:	e92d4010 	push	{r4, lr}
   1cef0:	e3530001 	cmp	r3, #1
   1cef4:	e1a04000 	mov	r4, r0
   1cef8:	9a00001d 	bls	1cf74 <CRetransmissionQueue::GetBytesAvailable() const+0x8c>
   1cefc:	e5942008 	ldr	r2, [r4, #8]
   1cf00:	e1520003 	cmp	r2, r3
   1cf04:	2a000008 	bcs	1cf2c <CRetransmissionQueue::GetBytesAvailable() const+0x44>
   1cf08:	e5940010 	ldr	r0, [r4, #16]
   1cf0c:	e1500003 	cmp	r0, r3
   1cf10:	2a00000f 	bcs	1cf54 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   1cf14:	e5943008 	ldr	r3, [r4, #8]
   1cf18:	e1530000 	cmp	r3, r0
   1cf1c:	35942000 	ldrcc	r2, [r4]
   1cf20:	30833002 	addcc	r3, r3, r2
   1cf24:	e0430000 	sub	r0, r3, r0
   1cf28:	e8bd8010 	pop	{r4, pc}
   1cf2c:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1cf30:	e30e0e30 	movw	r0, #60976	; 0xee30
   1cf34:	e3401002 	movt	r1, #2
   1cf38:	e3400002 	movt	r0, #2
   1cf3c:	e3a02052 	mov	r2, #82	; 0x52
   1cf40:	eb001f16 	bl	24ba0 <assertion_failed>
   1cf44:	e5943000 	ldr	r3, [r4]
   1cf48:	e5940010 	ldr	r0, [r4, #16]
   1cf4c:	e1500003 	cmp	r0, r3
   1cf50:	3affffef 	bcc	1cf14 <CRetransmissionQueue::GetBytesAvailable() const+0x2c>
   1cf54:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1cf58:	e30e0e7c 	movw	r0, #61052	; 0xee7c
   1cf5c:	e3401002 	movt	r1, #2
   1cf60:	e3400002 	movt	r0, #2
   1cf64:	e3a02053 	mov	r2, #83	; 0x53
   1cf68:	eb001f0c 	bl	24ba0 <assertion_failed>
   1cf6c:	e5940010 	ldr	r0, [r4, #16]
   1cf70:	eaffffe7 	b	1cf14 <CRetransmissionQueue::GetBytesAvailable() const+0x2c>
   1cf74:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1cf78:	e30e0e24 	movw	r0, #60964	; 0xee24
   1cf7c:	e3401002 	movt	r1, #2
   1cf80:	e3400002 	movt	r0, #2
   1cf84:	e3a02051 	mov	r2, #81	; 0x51
   1cf88:	eb001f04 	bl	24ba0 <assertion_failed>
   1cf8c:	e5943000 	ldr	r3, [r4]
   1cf90:	eaffffd9 	b	1cefc <CRetransmissionQueue::GetBytesAvailable() const+0x14>

0001cf94 <CRetransmissionQueue::Read(void*, unsigned int)>:
   1cf94:	e92d4070 	push	{r4, r5, r6, lr}
   1cf98:	e2526000 	subs	r6, r2, #0
   1cf9c:	e1a05001 	mov	r5, r1
   1cfa0:	e1a04000 	mov	r4, r0
   1cfa4:	0a00001e 	beq	1d024 <CRetransmissionQueue::Read(void*, unsigned int)+0x90>
   1cfa8:	ebffffce 	bl	1cee8 <CRetransmissionQueue::GetBytesAvailable() const>
   1cfac:	e1560000 	cmp	r6, r0
   1cfb0:	8a000014 	bhi	1d008 <CRetransmissionQueue::Read(void*, unsigned int)+0x74>
   1cfb4:	e3550000 	cmp	r5, #0
   1cfb8:	0a000029 	beq	1d064 <CRetransmissionQueue::Read(void*, unsigned int)+0xd0>
   1cfbc:	e5943004 	ldr	r3, [r4, #4]
   1cfc0:	e3530000 	cmp	r3, #0
   1cfc4:	0a00001f 	beq	1d048 <CRetransmissionQueue::Read(void*, unsigned int)+0xb4>
   1cfc8:	e3560000 	cmp	r6, #0
   1cfcc:	08bd8070 	popeq	{r4, r5, r6, pc}
   1cfd0:	e5941010 	ldr	r1, [r4, #16]
   1cfd4:	e0856006 	add	r6, r5, r6
   1cfd8:	e5943004 	ldr	r3, [r4, #4]
   1cfdc:	e2812001 	add	r2, r1, #1
   1cfe0:	e5842010 	str	r2, [r4, #16]
   1cfe4:	e7d33001 	ldrb	r3, [r3, r1]
   1cfe8:	e4c53001 	strb	r3, [r5], #1
   1cfec:	e5940010 	ldr	r0, [r4, #16]
   1cff0:	e5941000 	ldr	r1, [r4]
   1cff4:	eb001342 	bl	21d04 <__aeabi_uidivmod>
   1cff8:	e1550006 	cmp	r5, r6
   1cffc:	e5841010 	str	r1, [r4, #16]
   1d000:	1afffff4 	bne	1cfd8 <CRetransmissionQueue::Read(void*, unsigned int)+0x44>
   1d004:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d008:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1d00c:	e30e0e94 	movw	r0, #61076	; 0xee94
   1d010:	e3401002 	movt	r1, #2
   1d014:	e3400002 	movt	r0, #2
   1d018:	e3a02060 	mov	r2, #96	; 0x60
   1d01c:	eb001edf 	bl	24ba0 <assertion_failed>
   1d020:	eaffffe3 	b	1cfb4 <CRetransmissionQueue::Read(void*, unsigned int)+0x20>
   1d024:	e3a0205f 	mov	r2, #95	; 0x5f
   1d028:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1d02c:	e30e0700 	movw	r0, #59136	; 0xe700
   1d030:	e3401002 	movt	r1, #2
   1d034:	e3400002 	movt	r0, #2
   1d038:	eb001ed8 	bl	24ba0 <assertion_failed>
   1d03c:	e1a00004 	mov	r0, r4
   1d040:	ebffffa8 	bl	1cee8 <CRetransmissionQueue::GetBytesAvailable() const>
   1d044:	eaffffda 	b	1cfb4 <CRetransmissionQueue::Read(void*, unsigned int)+0x20>
   1d048:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1d04c:	e30c0424 	movw	r0, #50212	; 0xc424
   1d050:	e3401002 	movt	r1, #2
   1d054:	e3400002 	movt	r0, #2
   1d058:	e3a02064 	mov	r2, #100	; 0x64
   1d05c:	eb001ecf 	bl	24ba0 <assertion_failed>
   1d060:	eaffffd8 	b	1cfc8 <CRetransmissionQueue::Read(void*, unsigned int)+0x34>
   1d064:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1d068:	e30e0e74 	movw	r0, #61044	; 0xee74
   1d06c:	e3401002 	movt	r1, #2
   1d070:	e3400002 	movt	r0, #2
   1d074:	e3a02063 	mov	r2, #99	; 0x63
   1d078:	eb001ec8 	bl	24ba0 <assertion_failed>
   1d07c:	eaffffce 	b	1cfbc <CRetransmissionQueue::Read(void*, unsigned int)+0x28>

0001d080 <CRetransmissionQueue::Advance(unsigned int)>:
   1d080:	e92d4070 	push	{r4, r5, r6, lr}
   1d084:	e1a05001 	mov	r5, r1
   1d088:	e5901000 	ldr	r1, [r0]
   1d08c:	e1a04000 	mov	r4, r0
   1d090:	e3510001 	cmp	r1, #1
   1d094:	9a000019 	bls	1d100 <CRetransmissionQueue::Advance(unsigned int)+0x80>
   1d098:	e594300c 	ldr	r3, [r4, #12]
   1d09c:	e1530001 	cmp	r3, r1
   1d0a0:	2a00000e 	bcs	1d0e0 <CRetransmissionQueue::Advance(unsigned int)+0x60>
   1d0a4:	e5943010 	ldr	r3, [r4, #16]
   1d0a8:	e1530001 	cmp	r3, r1
   1d0ac:	3a000006 	bcc	1d0cc <CRetransmissionQueue::Advance(unsigned int)+0x4c>
   1d0b0:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1d0b4:	e30e0e7c 	movw	r0, #61052	; 0xee7c
   1d0b8:	e3401002 	movt	r1, #2
   1d0bc:	e3400002 	movt	r0, #2
   1d0c0:	e3a02071 	mov	r2, #113	; 0x71
   1d0c4:	eb001eb5 	bl	24ba0 <assertion_failed>
   1d0c8:	e5941000 	ldr	r1, [r4]
   1d0cc:	e594000c 	ldr	r0, [r4, #12]
   1d0d0:	e0850000 	add	r0, r5, r0
   1d0d4:	eb00130a 	bl	21d04 <__aeabi_uidivmod>
   1d0d8:	e584100c 	str	r1, [r4, #12]
   1d0dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d0e0:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1d0e4:	e30e0e44 	movw	r0, #60996	; 0xee44
   1d0e8:	e3401002 	movt	r1, #2
   1d0ec:	e3400002 	movt	r0, #2
   1d0f0:	e3a02070 	mov	r2, #112	; 0x70
   1d0f4:	eb001ea9 	bl	24ba0 <assertion_failed>
   1d0f8:	e5941000 	ldr	r1, [r4]
   1d0fc:	eaffffe8 	b	1d0a4 <CRetransmissionQueue::Advance(unsigned int)+0x24>
   1d100:	e30e1e0c 	movw	r1, #60940	; 0xee0c
   1d104:	e30e0e24 	movw	r0, #60964	; 0xee24
   1d108:	e3401002 	movt	r1, #2
   1d10c:	e3400002 	movt	r0, #2
   1d110:	e3a0206f 	mov	r2, #111	; 0x6f
   1d114:	eb001ea1 	bl	24ba0 <assertion_failed>
   1d118:	e5941000 	ldr	r1, [r4]
   1d11c:	eaffffdd 	b	1d098 <CRetransmissionQueue::Advance(unsigned int)+0x18>

0001d120 <CRetransmissionQueue::Reset()>:
   1d120:	e590300c 	ldr	r3, [r0, #12]
   1d124:	e5803010 	str	r3, [r0, #16]
   1d128:	e12fff1e 	bx	lr

0001d12c <CRetransmissionQueue::Flush()>:
   1d12c:	e3a03000 	mov	r3, #0
   1d130:	e5803008 	str	r3, [r0, #8]
   1d134:	e580300c 	str	r3, [r0, #12]
   1d138:	e5803010 	str	r3, [r0, #16]
   1d13c:	e12fff1e 	bx	lr

0001d140 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   1d140:	e92d4010 	push	{r4, lr}
   1d144:	e1a04000 	mov	r4, r0
   1d148:	eb0016f8 	bl	22d30 <CTimer::Get()>
   1d14c:	e3a03000 	mov	r3, #0
   1d150:	e3a02f4b 	mov	r2, #300	; 0x12c
   1d154:	e5843004 	str	r3, [r4, #4]
   1d158:	e5842008 	str	r2, [r4, #8]
   1d15c:	e3a02001 	mov	r2, #1
   1d160:	e5843018 	str	r3, [r4, #24]
   1d164:	e5843020 	str	r3, [r4, #32]
   1d168:	e584200c 	str	r2, [r4, #12]
   1d16c:	e5842024 	str	r2, [r4, #36]	; 0x24
   1d170:	e3500000 	cmp	r0, #0
   1d174:	e5840000 	str	r0, [r4]
   1d178:	0a000001 	beq	1d184 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x44>
   1d17c:	e1a00004 	mov	r0, r4
   1d180:	e8bd8010 	pop	{r4, pc}
   1d184:	e3a02033 	mov	r2, #51	; 0x33
   1d188:	e30e1eb4 	movw	r1, #61108	; 0xeeb4
   1d18c:	e30a0990 	movw	r0, #43408	; 0xa990
   1d190:	e3401002 	movt	r1, #2
   1d194:	e3400002 	movt	r0, #2
   1d198:	eb001e80 	bl	24ba0 <assertion_failed>
   1d19c:	e1a00004 	mov	r0, r4
   1d1a0:	e8bd8010 	pop	{r4, pc}

0001d1a4 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   1d1a4:	e12fff1e 	bx	lr

0001d1a8 <CRetransmissionTimeoutCalculator::GetRTO() const>:
   1d1a8:	e5900008 	ldr	r0, [r0, #8]
   1d1ac:	e12fff1e 	bx	lr

0001d1b0 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   1d1b0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d1b4:	e3530000 	cmp	r3, #0
   1d1b8:	1a000007 	bne	1d1dc <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x2c>
   1d1bc:	e5801004 	str	r1, [r0, #4]
   1d1c0:	e3a02001 	mov	r2, #1
   1d1c4:	e3a01f4b 	mov	r1, #300	; 0x12c
   1d1c8:	e5803018 	str	r3, [r0, #24]
   1d1cc:	e5803020 	str	r3, [r0, #32]
   1d1d0:	e5801008 	str	r1, [r0, #8]
   1d1d4:	e580200c 	str	r2, [r0, #12]
   1d1d8:	e12fff1e 	bx	lr
   1d1dc:	e92d4070 	push	{r4, r5, r6, lr}
   1d1e0:	e1a04000 	mov	r4, r0
   1d1e4:	e1a00003 	mov	r0, r3
   1d1e8:	e1a05001 	mov	r5, r1
   1d1ec:	eb001375 	bl	21fc8 <EnterCritical>
   1d1f0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1d1f4:	e3a03f4b 	mov	r3, #300	; 0x12c
   1d1f8:	e5845004 	str	r5, [r4, #4]
   1d1fc:	e3520000 	cmp	r2, #0
   1d200:	e5843008 	str	r3, [r4, #8]
   1d204:	e3a02001 	mov	r2, #1
   1d208:	e3a03000 	mov	r3, #0
   1d20c:	e584200c 	str	r2, [r4, #12]
   1d210:	e5843018 	str	r3, [r4, #24]
   1d214:	e5843020 	str	r3, [r4, #32]
   1d218:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d21c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d220:	ea001396 	b	22080 <LeaveCritical>

0001d224 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   1d224:	e92d4010 	push	{r4, lr}
   1d228:	e1a04000 	mov	r4, r0
   1d22c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1d230:	e3500000 	cmp	r0, #0
   1d234:	1a000012 	bne	1d284 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x60>
   1d238:	e5943018 	ldr	r3, [r4, #24]
   1d23c:	e3530000 	cmp	r3, #0
   1d240:	1a00000e 	bne	1d280 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   1d244:	e5943020 	ldr	r3, [r4, #32]
   1d248:	e3530000 	cmp	r3, #0
   1d24c:	1a000006 	bne	1d26c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1d250:	e5940000 	ldr	r0, [r4]
   1d254:	e3a03001 	mov	r3, #1
   1d258:	e5843018 	str	r3, [r4, #24]
   1d25c:	e3500000 	cmp	r0, #0
   1d260:	0a00000f 	beq	1d2a4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x80>
   1d264:	eb001461 	bl	223f0 <CTimer::GetTicks() const>
   1d268:	e584001c 	str	r0, [r4, #28]
   1d26c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d270:	e3530000 	cmp	r3, #0
   1d274:	08bd8010 	popeq	{r4, pc}
   1d278:	e8bd4010 	pop	{r4, lr}
   1d27c:	ea00137f 	b	22080 <LeaveCritical>
   1d280:	e8bd8010 	pop	{r4, pc}
   1d284:	eb00134f 	bl	21fc8 <EnterCritical>
   1d288:	e5943018 	ldr	r3, [r4, #24]
   1d28c:	e3530000 	cmp	r3, #0
   1d290:	1afffff5 	bne	1d26c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1d294:	e5943020 	ldr	r3, [r4, #32]
   1d298:	e3530000 	cmp	r3, #0
   1d29c:	1afffff2 	bne	1d26c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1d2a0:	eaffffea 	b	1d250 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   1d2a4:	e30e1eb4 	movw	r1, #61108	; 0xeeb4
   1d2a8:	e30a0990 	movw	r0, #43408	; 0xa990
   1d2ac:	e3401002 	movt	r1, #2
   1d2b0:	e3400002 	movt	r0, #2
   1d2b4:	e3a0205f 	mov	r2, #95	; 0x5f
   1d2b8:	eb001e38 	bl	24ba0 <assertion_failed>
   1d2bc:	e5940000 	ldr	r0, [r4]
   1d2c0:	eaffffe7 	b	1d264 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x40>

0001d2c4 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   1d2c4:	e92d4010 	push	{r4, lr}
   1d2c8:	e1a04000 	mov	r4, r0
   1d2cc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1d2d0:	e3500000 	cmp	r0, #0
   1d2d4:	1a000011 	bne	1d320 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x5c>
   1d2d8:	e5943008 	ldr	r3, [r4, #8]
   1d2dc:	e3021ee0 	movw	r1, #12000	; 0x2ee0
   1d2e0:	e5942020 	ldr	r2, [r4, #32]
   1d2e4:	e1a03083 	lsl	r3, r3, #1
   1d2e8:	e2822001 	add	r2, r2, #1
   1d2ec:	e1530001 	cmp	r3, r1
   1d2f0:	e5842020 	str	r2, [r4, #32]
   1d2f4:	21a03001 	movcs	r3, r1
   1d2f8:	e3520002 	cmp	r2, #2
   1d2fc:	e5843008 	str	r3, [r4, #8]
   1d300:	83a03001 	movhi	r3, #1
   1d304:	8584300c 	strhi	r3, [r4, #12]
   1d308:	e3500000 	cmp	r0, #0
   1d30c:	e3a03000 	mov	r3, #0
   1d310:	e5843018 	str	r3, [r4, #24]
   1d314:	08bd8010 	popeq	{r4, pc}
   1d318:	e8bd4010 	pop	{r4, lr}
   1d31c:	ea001357 	b	22080 <LeaveCritical>
   1d320:	eb001328 	bl	21fc8 <EnterCritical>
   1d324:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   1d328:	eaffffea 	b	1d2d8 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x14>

0001d32c <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   1d32c:	e590300c 	ldr	r3, [r0, #12]
   1d330:	e3530000 	cmp	r3, #0
   1d334:	0a00000e 	beq	1d374 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x48>
   1d338:	e3a02000 	mov	r2, #0
   1d33c:	e1a030a1 	lsr	r3, r1, #1
   1d340:	e5801010 	str	r1, [r0, #16]
   1d344:	e580200c 	str	r2, [r0, #12]
   1d348:	e5803014 	str	r3, [r0, #20]
   1d34c:	e1b03103 	lsls	r3, r3, #2
   1d350:	03a03001 	moveq	r3, #1
   1d354:	e0833001 	add	r3, r3, r1
   1d358:	e3530063 	cmp	r3, #99	; 0x63
   1d35c:	9a000012 	bls	1d3ac <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x80>
   1d360:	e3021ee0 	movw	r1, #12000	; 0x2ee0
   1d364:	e1530001 	cmp	r3, r1
   1d368:	21a03001 	movcs	r3, r1
   1d36c:	e5803008 	str	r3, [r0, #8]
   1d370:	e12fff1e 	bx	lr
   1d374:	e5903010 	ldr	r3, [r0, #16]
   1d378:	e5902014 	ldr	r2, [r0, #20]
   1d37c:	e043c001 	sub	ip, r3, r1
   1d380:	e35c0000 	cmp	ip, #0
   1d384:	e0633183 	rsb	r3, r3, r3, lsl #3
   1d388:	b26cc000 	rsblt	ip, ip, #0
   1d38c:	e0822082 	add	r2, r2, r2, lsl #1
   1d390:	e0833001 	add	r3, r3, r1
   1d394:	e082200c 	add	r2, r2, ip
   1d398:	e1a011a3 	lsr	r1, r3, #3
   1d39c:	e1a03122 	lsr	r3, r2, #2
   1d3a0:	e5801010 	str	r1, [r0, #16]
   1d3a4:	e5803014 	str	r3, [r0, #20]
   1d3a8:	eaffffe7 	b	1d34c <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x20>
   1d3ac:	e3a03064 	mov	r3, #100	; 0x64
   1d3b0:	e5803008 	str	r3, [r0, #8]
   1d3b4:	e12fff1e 	bx	lr

0001d3b8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   1d3b8:	e92d4010 	push	{r4, lr}
   1d3bc:	e1a04000 	mov	r4, r0
   1d3c0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1d3c4:	e3500000 	cmp	r0, #0
   1d3c8:	1a000015 	bne	1d424 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x6c>
   1d3cc:	e5943018 	ldr	r3, [r4, #24]
   1d3d0:	e3530000 	cmp	r3, #0
   1d3d4:	0a00000a 	beq	1d404 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   1d3d8:	e5943020 	ldr	r3, [r4, #32]
   1d3dc:	e3530000 	cmp	r3, #0
   1d3e0:	1a000007 	bne	1d404 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   1d3e4:	e5940000 	ldr	r0, [r4]
   1d3e8:	e3500000 	cmp	r0, #0
   1d3ec:	0a00000e 	beq	1d42c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x74>
   1d3f0:	eb0013fe 	bl	223f0 <CTimer::GetTicks() const>
   1d3f4:	e594101c 	ldr	r1, [r4, #28]
   1d3f8:	e0401001 	sub	r1, r0, r1
   1d3fc:	e1a00004 	mov	r0, r4
   1d400:	ebffffc9 	bl	1d32c <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   1d404:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1d408:	e3a03000 	mov	r3, #0
   1d40c:	e5843018 	str	r3, [r4, #24]
   1d410:	e1520003 	cmp	r2, r3
   1d414:	e5843020 	str	r3, [r4, #32]
   1d418:	08bd8010 	popeq	{r4, pc}
   1d41c:	e8bd4010 	pop	{r4, lr}
   1d420:	ea001316 	b	22080 <LeaveCritical>
   1d424:	eb0012e7 	bl	21fc8 <EnterCritical>
   1d428:	eaffffe7 	b	1d3cc <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   1d42c:	e30e1eb4 	movw	r1, #61108	; 0xeeb4
   1d430:	e30a0990 	movw	r0, #43408	; 0xa990
   1d434:	e3401002 	movt	r1, #2
   1d438:	e3400002 	movt	r0, #2
   1d43c:	e3a02074 	mov	r2, #116	; 0x74
   1d440:	eb001dd6 	bl	24ba0 <assertion_failed>
   1d444:	e5940000 	ldr	r0, [r4]
   1d448:	eaffffe8 	b	1d3f0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x38>

0001d44c <CTCPRejector::~CTCPRejector()>:
   1d44c:	e59f302c 	ldr	r3, [pc, #44]	; 1d480 <CTCPRejector::~CTCPRejector()+0x34>
   1d450:	e3a01001 	mov	r1, #1
   1d454:	e92d4010 	push	{r4, lr}
   1d458:	e1a04000 	mov	r4, r0
   1d45c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d460:	e5843000 	str	r3, [r4]
   1d464:	eb0012cf 	bl	21fa8 <operator delete(void*, unsigned int)>
   1d468:	e3a03000 	mov	r3, #0
   1d46c:	e1a00004 	mov	r0, r4
   1d470:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1d474:	ebfff30d 	bl	1a0b0 <CNetConnection::~CNetConnection()>
   1d478:	e1a00004 	mov	r0, r4
   1d47c:	e8bd8010 	pop	{r4, pc}
   1d480:	0002eed4 	.word	0x0002eed4

0001d484 <CTCPRejector::~CTCPRejector()>:
   1d484:	e92d4010 	push	{r4, lr}
   1d488:	e1a04000 	mov	r4, r0
   1d48c:	ebffffee 	bl	1d44c <CTCPRejector::~CTCPRejector()>
   1d490:	e1a00004 	mov	r0, r4
   1d494:	e3a01030 	mov	r1, #48	; 0x30
   1d498:	eb0012c2 	bl	21fa8 <operator delete(void*, unsigned int)>
   1d49c:	e1a00004 	mov	r0, r4
   1d4a0:	e8bd8010 	pop	{r4, pc}

0001d4a4 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   1d4a4:	e92d4010 	push	{r4, lr}
   1d4a8:	e24dd008 	sub	sp, sp, #8
   1d4ac:	e3a0c006 	mov	ip, #6
   1d4b0:	e3a03000 	mov	r3, #0
   1d4b4:	e58dc000 	str	ip, [sp]
   1d4b8:	e1a04000 	mov	r4, r0
   1d4bc:	ebfff2d0 	bl	1a004 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1d4c0:	e59f3018 	ldr	r3, [pc, #24]	; 1d4e0 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x3c>
   1d4c4:	e3a00d19 	mov	r0, #1600	; 0x640
   1d4c8:	e5843000 	str	r3, [r4]
   1d4cc:	eb0012b2 	bl	21f9c <operator new[](unsigned int)>
   1d4d0:	e584002c 	str	r0, [r4, #44]	; 0x2c
   1d4d4:	e1a00004 	mov	r0, r4
   1d4d8:	e28dd008 	add	sp, sp, #8
   1d4dc:	e8bd8010 	pop	{r4, pc}
   1d4e0:	0002eed4 	.word	0x0002eed4

0001d4e4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   1d4e4:	e3110c02 	tst	r1, #512	; 0x200
   1d4e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d4ec:	e1a06001 	mov	r6, r1
   1d4f0:	e24dd008 	sub	sp, sp, #8
   1d4f4:	e1a05000 	mov	r5, r0
   1d4f8:	e1a07002 	mov	r7, r2
   1d4fc:	e1a08003 	mov	r8, r3
   1d500:	1a000028 	bne	1d5a8 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc4>
   1d504:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
   1d508:	e3540000 	cmp	r4, #0
   1d50c:	0a000034 	beq	1d5e4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0x100>
   1d510:	e1d511b6 	ldrh	r1, [r5, #22]
   1d514:	e2163a01 	ands	r3, r6, #4096	; 0x1000
   1d518:	e1d521b4 	ldrh	r2, [r5, #20]
   1d51c:	16bf8f38 	revne	r8, r8
   1d520:	01a08003 	moveq	r8, r3
   1d524:	e6bf1fb1 	rev16	r1, r1
   1d528:	e3a03000 	mov	r3, #0
   1d52c:	e1c410b0 	strh	r1, [r4]
   1d530:	e6bf2fb2 	rev16	r2, r2
   1d534:	e5c4300e 	strb	r3, [r4, #14]
   1d538:	e1c420b2 	strh	r2, [r4, #2]
   1d53c:	e6bf7f37 	rev	r7, r7
   1d540:	e5c4300f 	strb	r3, [r4, #15]
   1d544:	e3866050 	orr	r6, r6, #80	; 0x50
   1d548:	e5c43012 	strb	r3, [r4, #18]
   1d54c:	e3a02014 	mov	r2, #20
   1d550:	e5c43013 	strb	r3, [r4, #19]
   1d554:	e1a01004 	mov	r1, r4
   1d558:	e5c43010 	strb	r3, [r4, #16]
   1d55c:	e285001c 	add	r0, r5, #28
   1d560:	e5c43011 	strb	r3, [r4, #17]
   1d564:	e5847004 	str	r7, [r4, #4]
   1d568:	e5848008 	str	r8, [r4, #8]
   1d56c:	e1c460bc 	strh	r6, [r4, #12]
   1d570:	eb0003b0 	bl	1e438 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d574:	e5953008 	ldr	r3, [r5, #8]
   1d578:	e3530000 	cmp	r3, #0
   1d57c:	e1c401b0 	strh	r0, [r4, #16]
   1d580:	0a00000f 	beq	1d5c4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xe0>
   1d584:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   1d588:	e3a0c006 	mov	ip, #6
   1d58c:	e1a00003 	mov	r0, r3
   1d590:	e285100c 	add	r1, r5, #12
   1d594:	e3a03014 	mov	r3, #20
   1d598:	e58dc000 	str	ip, [sp]
   1d59c:	ebffea4e 	bl	17edc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d5a0:	e28dd008 	add	sp, sp, #8
   1d5a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d5a8:	e30e1f0c 	movw	r1, #61196	; 0xef0c
   1d5ac:	e30e0f1c 	movw	r0, #61212	; 0xef1c
   1d5b0:	e3401002 	movt	r1, #2
   1d5b4:	e3400002 	movt	r0, #2
   1d5b8:	e3a020a5 	mov	r2, #165	; 0xa5
   1d5bc:	eb001d77 	bl	24ba0 <assertion_failed>
   1d5c0:	eaffffcf 	b	1d504 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0x20>
   1d5c4:	e30e1f0c 	movw	r1, #61196	; 0xef0c
   1d5c8:	e30e06a0 	movw	r0, #59040	; 0xe6a0
   1d5cc:	e3401002 	movt	r1, #2
   1d5d0:	e3400002 	movt	r0, #2
   1d5d4:	e3a020cb 	mov	r2, #203	; 0xcb
   1d5d8:	eb001d70 	bl	24ba0 <assertion_failed>
   1d5dc:	e5953008 	ldr	r3, [r5, #8]
   1d5e0:	eaffffe7 	b	1d584 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xa0>
   1d5e4:	e30e1f0c 	movw	r1, #61196	; 0xef0c
   1d5e8:	e30c05e0 	movw	r0, #50656	; 0xc5e0
   1d5ec:	e3401002 	movt	r1, #2
   1d5f0:	e3400002 	movt	r0, #2
   1d5f4:	e3a020ae 	mov	r2, #174	; 0xae
   1d5f8:	eb001d68 	bl	24ba0 <assertion_failed>
   1d5fc:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
   1d600:	eaffffc2 	b	1d510 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0x2c>

0001d604 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1d604:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d608:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1d60c:	e35c0006 	cmp	ip, #6
   1d610:	0a000001 	beq	1d61c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1d614:	e3a00000 	mov	r0, #0
   1d618:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d61c:	e3520013 	cmp	r2, #19
   1d620:	9a000040 	bls	1d728 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x124>
   1d624:	e3510000 	cmp	r1, #0
   1d628:	e1a06003 	mov	r6, r3
   1d62c:	e1a07002 	mov	r7, r2
   1d630:	e1a05001 	mov	r5, r1
   1d634:	e1a04000 	mov	r4, r0
   1d638:	0a00003c 	beq	1d730 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x12c>
   1d63c:	e1d500b2 	ldrh	r0, [r5, #2]
   1d640:	e6bf0fb0 	rev16	r0, r0
   1d644:	e1c401b6 	strh	r0, [r4, #22]
   1d648:	e6ff0070 	uxth	r0, r0
   1d64c:	e3500000 	cmp	r0, #0
   1d650:	0a000034 	beq	1d728 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x124>
   1d654:	e5940004 	ldr	r0, [r4, #4]
   1d658:	e3500000 	cmp	r0, #0
   1d65c:	0a00003a 	beq	1d74c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x148>
   1d660:	eb00006e 	bl	1d820 <CNetConfig::GetIPAddress() const>
   1d664:	eb0001c6 	bl	1dd84 <CIPAddress::IsNull() const>
   1d668:	e3500000 	cmp	r0, #0
   1d66c:	1affffe8 	bne	1d614 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1d670:	e5940004 	ldr	r0, [r4, #4]
   1d674:	e284801c 	add	r8, r4, #28
   1d678:	eb000068 	bl	1d820 <CNetConfig::GetIPAddress() const>
   1d67c:	e1a01000 	mov	r1, r0
   1d680:	e1a00008 	mov	r0, r8
   1d684:	eb000332 	bl	1e354 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d688:	e1a01006 	mov	r1, r6
   1d68c:	e1a00008 	mov	r0, r8
   1d690:	eb000333 	bl	1e364 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d694:	e1a02007 	mov	r2, r7
   1d698:	e1a01005 	mov	r1, r5
   1d69c:	e1a00008 	mov	r0, r8
   1d6a0:	eb000364 	bl	1e438 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d6a4:	e3500000 	cmp	r0, #0
   1d6a8:	1affffd9 	bne	1d614 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1d6ac:	e1d580bc 	ldrh	r8, [r5, #12]
   1d6b0:	e1a01006 	mov	r1, r6
   1d6b4:	e284000c 	add	r0, r4, #12
   1d6b8:	e5959004 	ldr	r9, [r5, #4]
   1d6bc:	e7e32258 	ubfx	r2, r8, #4, #4
   1d6c0:	e3180c02 	tst	r8, #512	; 0x200
   1d6c4:	e595a008 	ldr	sl, [r5, #8]
   1d6c8:	e6bf9f39 	rev	r9, r9
   1d6cc:	e0477102 	sub	r7, r7, r2, lsl #2
   1d6d0:	12877001 	addne	r7, r7, #1
   1d6d4:	e3180c01 	tst	r8, #256	; 0x100
   1d6d8:	12877001 	addne	r7, r7, #1
   1d6dc:	eb00015e 	bl	1dc5c <CIPAddress::Set(CIPAddress const&)>
   1d6e0:	e1d520b0 	ldrh	r2, [r5]
   1d6e4:	e2183b01 	ands	r3, r8, #1024	; 0x400
   1d6e8:	e6bfaf3a 	rev	sl, sl
   1d6ec:	e6bf2fb2 	rev16	r2, r2
   1d6f0:	e1c421b4 	strh	r2, [r4, #20]
   1d6f4:	1a000009 	bne	1d720 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x11c>
   1d6f8:	e2182a01 	ands	r2, r8, #4096	; 0x1000
   1d6fc:	00893007 	addeq	r3, r9, r7
   1d700:	01a00004 	moveq	r0, r4
   1d704:	03a01b05 	moveq	r1, #5120	; 0x1400
   1d708:	11a0200a 	movne	r2, sl
   1d70c:	11a00004 	movne	r0, r4
   1d710:	13a01b01 	movne	r1, #1024	; 0x400
   1d714:	ebffff72 	bl	1d4e4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   1d718:	e3a00001 	mov	r0, #1
   1d71c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d720:	e3a00001 	mov	r0, #1
   1d724:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d728:	e3e00000 	mvn	r0, #0
   1d72c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d730:	e30e1f0c 	movw	r1, #61196	; 0xef0c
   1d734:	e30e0788 	movw	r0, #59272	; 0xe788
   1d738:	e3401002 	movt	r1, #2
   1d73c:	e3400002 	movt	r0, #2
   1d740:	e3a02056 	mov	r2, #86	; 0x56
   1d744:	eb001d15 	bl	24ba0 <assertion_failed>
   1d748:	eaffffbb 	b	1d63c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x38>
   1d74c:	e30e1f0c 	movw	r1, #61196	; 0xef0c
   1d750:	e30e0610 	movw	r0, #58896	; 0xe610
   1d754:	e3401002 	movt	r1, #2
   1d758:	e3400002 	movt	r0, #2
   1d75c:	e3a0205f 	mov	r2, #95	; 0x5f
   1d760:	eb001d0e 	bl	24ba0 <assertion_failed>
   1d764:	e5940004 	ldr	r0, [r4, #4]
   1d768:	eaffffbc 	b	1d660 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5c>

0001d76c <CTCPRejector::Connect()>:
   1d76c:	e3e00000 	mvn	r0, #0
   1d770:	e12fff1e 	bx	lr

0001d774 <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   1d774:	e3e00000 	mvn	r0, #0
   1d778:	e12fff1e 	bx	lr

0001d77c <CTCPRejector::Close()>:
   1d77c:	e3e00000 	mvn	r0, #0
   1d780:	e12fff1e 	bx	lr

0001d784 <CTCPRejector::Send(void const*, unsigned int, int)>:
   1d784:	e3e00000 	mvn	r0, #0
   1d788:	e12fff1e 	bx	lr

0001d78c <CTCPRejector::Receive(void*, int)>:
   1d78c:	e3e00000 	mvn	r0, #0
   1d790:	e12fff1e 	bx	lr

0001d794 <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1d794:	e3e00000 	mvn	r0, #0
   1d798:	e12fff1e 	bx	lr

0001d79c <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1d79c:	e3e00000 	mvn	r0, #0
   1d7a0:	e12fff1e 	bx	lr

0001d7a4 <CTCPRejector::SetOptionBroadcast(int)>:
   1d7a4:	e3e00000 	mvn	r0, #0
   1d7a8:	e12fff1e 	bx	lr

0001d7ac <CTCPRejector::IsTerminated() const>:
   1d7ac:	e3a00000 	mov	r0, #0
   1d7b0:	e12fff1e 	bx	lr

0001d7b4 <CTCPRejector::Process()>:
   1d7b4:	e12fff1e 	bx	lr

0001d7b8 <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1d7b8:	e3a00000 	mov	r0, #0
   1d7bc:	e12fff1e 	bx	lr

0001d7c0 <CNetConfig::~CNetConfig()>:
   1d7c0:	e92d4010 	push	{r4, lr}
   1d7c4:	e1a04000 	mov	r4, r0
   1d7c8:	e2800024 	add	r0, r0, #36	; 0x24
   1d7cc:	eb000088 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   1d7d0:	e284001c 	add	r0, r4, #28
   1d7d4:	eb000086 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   1d7d8:	e2840014 	add	r0, r4, #20
   1d7dc:	eb000084 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   1d7e0:	e284000c 	add	r0, r4, #12
   1d7e4:	eb000082 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   1d7e8:	e2840004 	add	r0, r4, #4
   1d7ec:	eb000080 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   1d7f0:	e1a00004 	mov	r0, r4
   1d7f4:	e8bd8010 	pop	{r4, pc}

0001d7f8 <CNetConfig::SetDHCP(int)>:
   1d7f8:	e5801000 	str	r1, [r0]
   1d7fc:	e12fff1e 	bx	lr

0001d800 <CNetConfig::SetDefaultGateway(unsigned int)>:
   1d800:	e2800014 	add	r0, r0, #20
   1d804:	ea0000f9 	b	1dbf0 <CIPAddress::Set(unsigned int)>

0001d808 <CNetConfig::SetDNSServer(unsigned int)>:
   1d808:	e280001c 	add	r0, r0, #28
   1d80c:	ea0000f7 	b	1dbf0 <CIPAddress::Set(unsigned int)>

0001d810 <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   1d810:	e2800014 	add	r0, r0, #20
   1d814:	ea0000f9 	b	1dc00 <CIPAddress::Set(unsigned char const*)>

0001d818 <CNetConfig::SetDNSServer(unsigned char const*)>:
   1d818:	e280001c 	add	r0, r0, #28
   1d81c:	ea0000f7 	b	1dc00 <CIPAddress::Set(unsigned char const*)>

0001d820 <CNetConfig::GetIPAddress() const>:
   1d820:	e2800004 	add	r0, r0, #4
   1d824:	e12fff1e 	bx	lr

0001d828 <CNetConfig::IsDHCPUsed() const>:
   1d828:	e5900000 	ldr	r0, [r0]
   1d82c:	e12fff1e 	bx	lr

0001d830 <CNetConfig::GetNetMask() const>:
   1d830:	e280000c 	add	r0, r0, #12
   1d834:	ea000129 	b	1dce0 <CIPAddress::Get() const>

0001d838 <CNetConfig::GetDefaultGateway() const>:
   1d838:	e2800014 	add	r0, r0, #20
   1d83c:	e12fff1e 	bx	lr

0001d840 <CNetConfig::GetDNSServer() const>:
   1d840:	e280001c 	add	r0, r0, #28
   1d844:	e12fff1e 	bx	lr

0001d848 <CNetConfig::GetBroadcastAddress() const>:
   1d848:	e2800024 	add	r0, r0, #36	; 0x24
   1d84c:	e12fff1e 	bx	lr

0001d850 <CNetConfig::UpdateBroadcastAddress()>:
   1d850:	e92d4010 	push	{r4, lr}
   1d854:	e24dd008 	sub	sp, sp, #8
   1d858:	e1a04000 	mov	r4, r0
   1d85c:	e2800004 	add	r0, r0, #4
   1d860:	e1a0100d 	mov	r1, sp
   1d864:	eb00012a 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   1d868:	e284000c 	add	r0, r4, #12
   1d86c:	e28d1004 	add	r1, sp, #4
   1d870:	eb000127 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   1d874:	e89d000a 	ldm	sp, {r1, r3}
   1d878:	e2840024 	add	r0, r4, #36	; 0x24
   1d87c:	e1e03003 	mvn	r3, r3
   1d880:	e1831001 	orr	r1, r3, r1
   1d884:	eb0000d9 	bl	1dbf0 <CIPAddress::Set(unsigned int)>
   1d888:	e28dd008 	add	sp, sp, #8
   1d88c:	e8bd8010 	pop	{r4, pc}

0001d890 <CNetConfig::Reset()>:
   1d890:	e92d4070 	push	{r4, r5, r6, lr}
   1d894:	e30e4f38 	movw	r4, #61240	; 0xef38
   1d898:	e3404002 	movt	r4, #2
   1d89c:	e1a05000 	mov	r5, r0
   1d8a0:	e2800004 	add	r0, r0, #4
   1d8a4:	e1a01004 	mov	r1, r4
   1d8a8:	eb0000d4 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   1d8ac:	e1a01004 	mov	r1, r4
   1d8b0:	e285000c 	add	r0, r5, #12
   1d8b4:	eb0000d1 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   1d8b8:	e1a01004 	mov	r1, r4
   1d8bc:	e2850014 	add	r0, r5, #20
   1d8c0:	eb0000ce 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   1d8c4:	e285001c 	add	r0, r5, #28
   1d8c8:	e1a01004 	mov	r1, r4
   1d8cc:	eb0000cb 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   1d8d0:	e1a00005 	mov	r0, r5
   1d8d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d8d8:	eaffffdc 	b	1d850 <CNetConfig::UpdateBroadcastAddress()>

0001d8dc <CNetConfig::CNetConfig()>:
   1d8dc:	e92d4010 	push	{r4, lr}
   1d8e0:	e3a03001 	mov	r3, #1
   1d8e4:	e1a04000 	mov	r4, r0
   1d8e8:	e4803004 	str	r3, [r0], #4
   1d8ec:	eb000027 	bl	1d990 <CIPAddress::CIPAddress()>
   1d8f0:	e284000c 	add	r0, r4, #12
   1d8f4:	eb000025 	bl	1d990 <CIPAddress::CIPAddress()>
   1d8f8:	e2840014 	add	r0, r4, #20
   1d8fc:	eb000023 	bl	1d990 <CIPAddress::CIPAddress()>
   1d900:	e284001c 	add	r0, r4, #28
   1d904:	eb000021 	bl	1d990 <CIPAddress::CIPAddress()>
   1d908:	e2840024 	add	r0, r4, #36	; 0x24
   1d90c:	eb00001f 	bl	1d990 <CIPAddress::CIPAddress()>
   1d910:	e1a00004 	mov	r0, r4
   1d914:	ebffffdd 	bl	1d890 <CNetConfig::Reset()>
   1d918:	e1a00004 	mov	r0, r4
   1d91c:	e8bd8010 	pop	{r4, pc}

0001d920 <CNetConfig::SetIPAddress(unsigned int)>:
   1d920:	e92d4010 	push	{r4, lr}
   1d924:	e1a04000 	mov	r4, r0
   1d928:	e2800004 	add	r0, r0, #4
   1d92c:	eb0000af 	bl	1dbf0 <CIPAddress::Set(unsigned int)>
   1d930:	e1a00004 	mov	r0, r4
   1d934:	e8bd4010 	pop	{r4, lr}
   1d938:	eaffffc4 	b	1d850 <CNetConfig::UpdateBroadcastAddress()>

0001d93c <CNetConfig::SetNetMask(unsigned int)>:
   1d93c:	e92d4010 	push	{r4, lr}
   1d940:	e1a04000 	mov	r4, r0
   1d944:	e280000c 	add	r0, r0, #12
   1d948:	eb0000a8 	bl	1dbf0 <CIPAddress::Set(unsigned int)>
   1d94c:	e1a00004 	mov	r0, r4
   1d950:	e8bd4010 	pop	{r4, lr}
   1d954:	eaffffbd 	b	1d850 <CNetConfig::UpdateBroadcastAddress()>

0001d958 <CNetConfig::SetIPAddress(unsigned char const*)>:
   1d958:	e92d4010 	push	{r4, lr}
   1d95c:	e1a04000 	mov	r4, r0
   1d960:	e2800004 	add	r0, r0, #4
   1d964:	eb0000a5 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   1d968:	e1a00004 	mov	r0, r4
   1d96c:	e8bd4010 	pop	{r4, lr}
   1d970:	eaffffb6 	b	1d850 <CNetConfig::UpdateBroadcastAddress()>

0001d974 <CNetConfig::SetNetMask(unsigned char const*)>:
   1d974:	e92d4010 	push	{r4, lr}
   1d978:	e1a04000 	mov	r4, r0
   1d97c:	e280000c 	add	r0, r0, #12
   1d980:	eb00009e 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   1d984:	e1a00004 	mov	r0, r4
   1d988:	e8bd4010 	pop	{r4, lr}
   1d98c:	eaffffaf 	b	1d850 <CNetConfig::UpdateBroadcastAddress()>

0001d990 <CIPAddress::CIPAddress()>:
   1d990:	e3a02000 	mov	r2, #0
   1d994:	e5802000 	str	r2, [r0]
   1d998:	e12fff1e 	bx	lr

0001d99c <CIPAddress::CIPAddress(unsigned int)>:
   1d99c:	e3a02001 	mov	r2, #1
   1d9a0:	e5801004 	str	r1, [r0, #4]
   1d9a4:	e5802000 	str	r2, [r0]
   1d9a8:	e12fff1e 	bx	lr

0001d9ac <CIPAddress::CIPAddress(CIPAddress const&)>:
   1d9ac:	e5913000 	ldr	r3, [r1]
   1d9b0:	e92d4070 	push	{r4, r5, r6, lr}
   1d9b4:	e1a05001 	mov	r5, r1
   1d9b8:	e3530000 	cmp	r3, #0
   1d9bc:	e1a04000 	mov	r4, r0
   1d9c0:	1a000005 	bne	1d9dc <CIPAddress::CIPAddress(CIPAddress const&)+0x30>
   1d9c4:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1d9c8:	e3401002 	movt	r1, #2
   1d9cc:	e30e0f4c 	movw	r0, #61260	; 0xef4c
   1d9d0:	e3400002 	movt	r0, #2
   1d9d4:	e3a0202e 	mov	r2, #46	; 0x2e
   1d9d8:	eb001c70 	bl	24ba0 <assertion_failed>
   1d9dc:	e5953004 	ldr	r3, [r5, #4]
   1d9e0:	e3a02001 	mov	r2, #1
   1d9e4:	e5842000 	str	r2, [r4]
   1d9e8:	e1a00004 	mov	r0, r4
   1d9ec:	e5843004 	str	r3, [r4, #4]
   1d9f0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d9f4 <CIPAddress::~CIPAddress()>:
   1d9f4:	e12fff1e 	bx	lr

0001d9f8 <CIPAddress::operator==(CIPAddress const&) const>:
   1d9f8:	e5903000 	ldr	r3, [r0]
   1d9fc:	e92d4070 	push	{r4, r5, r6, lr}
   1da00:	e1a05000 	mov	r5, r0
   1da04:	e3530000 	cmp	r3, #0
   1da08:	e1a04001 	mov	r4, r1
   1da0c:	0a00000e 	beq	1da4c <CIPAddress::operator==(CIPAddress const&) const+0x54>
   1da10:	e5943000 	ldr	r3, [r4]
   1da14:	e3530000 	cmp	r3, #0
   1da18:	1a000005 	bne	1da34 <CIPAddress::operator==(CIPAddress const&) const+0x3c>
   1da1c:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1da20:	e3401002 	movt	r1, #2
   1da24:	e30e0f60 	movw	r0, #61280	; 0xef60
   1da28:	e3400002 	movt	r0, #2
   1da2c:	e3a0203f 	mov	r2, #63	; 0x3f
   1da30:	eb001c5a 	bl	24ba0 <assertion_failed>
   1da34:	e5950004 	ldr	r0, [r5, #4]
   1da38:	e5943004 	ldr	r3, [r4, #4]
   1da3c:	e0400003 	sub	r0, r0, r3
   1da40:	e16f0f10 	clz	r0, r0
   1da44:	e1a002a0 	lsr	r0, r0, #5
   1da48:	e8bd8070 	pop	{r4, r5, r6, pc}
   1da4c:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1da50:	e3401002 	movt	r1, #2
   1da54:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1da58:	e3400002 	movt	r0, #2
   1da5c:	e3a0203e 	mov	r2, #62	; 0x3e
   1da60:	eb001c4e 	bl	24ba0 <assertion_failed>
   1da64:	eaffffe9 	b	1da10 <CIPAddress::operator==(CIPAddress const&) const+0x18>

0001da68 <CIPAddress::operator!=(CIPAddress const&) const>:
   1da68:	e5903000 	ldr	r3, [r0]
   1da6c:	e92d4070 	push	{r4, r5, r6, lr}
   1da70:	e1a05000 	mov	r5, r0
   1da74:	e3530000 	cmp	r3, #0
   1da78:	e1a04001 	mov	r4, r1
   1da7c:	0a00000d 	beq	1dab8 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   1da80:	e5943000 	ldr	r3, [r4]
   1da84:	e3530000 	cmp	r3, #0
   1da88:	1a000005 	bne	1daa4 <CIPAddress::operator!=(CIPAddress const&) const+0x3c>
   1da8c:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1da90:	e3401002 	movt	r1, #2
   1da94:	e30e0f60 	movw	r0, #61280	; 0xef60
   1da98:	e3400002 	movt	r0, #2
   1da9c:	e3a02046 	mov	r2, #70	; 0x46
   1daa0:	eb001c3e 	bl	24ba0 <assertion_failed>
   1daa4:	e5950004 	ldr	r0, [r5, #4]
   1daa8:	e5943004 	ldr	r3, [r4, #4]
   1daac:	e0500003 	subs	r0, r0, r3
   1dab0:	13a00001 	movne	r0, #1
   1dab4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dab8:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1dabc:	e3401002 	movt	r1, #2
   1dac0:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1dac4:	e3400002 	movt	r0, #2
   1dac8:	e3a02045 	mov	r2, #69	; 0x45
   1dacc:	eb001c33 	bl	24ba0 <assertion_failed>
   1dad0:	eaffffea 	b	1da80 <CIPAddress::operator!=(CIPAddress const&) const+0x18>

0001dad4 <CIPAddress::operator==(unsigned char const*) const>:
   1dad4:	e5903000 	ldr	r3, [r0]
   1dad8:	e92d4070 	push	{r4, r5, r6, lr}
   1dadc:	e1a04000 	mov	r4, r0
   1dae0:	e3530000 	cmp	r3, #0
   1dae4:	e1a05001 	mov	r5, r1
   1dae8:	0a000008 	beq	1db10 <CIPAddress::operator==(unsigned char const*) const+0x3c>
   1daec:	e3550000 	cmp	r5, #0
   1daf0:	0a00000d 	beq	1db2c <CIPAddress::operator==(unsigned char const*) const+0x58>
   1daf4:	e1a01005 	mov	r1, r5
   1daf8:	e2840004 	add	r0, r4, #4
   1dafc:	e3a02004 	mov	r2, #4
   1db00:	eb0014a1 	bl	22d8c <memcmp>
   1db04:	e16f0f10 	clz	r0, r0
   1db08:	e1a002a0 	lsr	r0, r0, #5
   1db0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1db10:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1db14:	e3401002 	movt	r1, #2
   1db18:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1db1c:	e3400002 	movt	r0, #2
   1db20:	e3a0204c 	mov	r2, #76	; 0x4c
   1db24:	eb001c1d 	bl	24ba0 <assertion_failed>
   1db28:	eaffffef 	b	1daec <CIPAddress::operator==(unsigned char const*) const+0x18>
   1db2c:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1db30:	e3401002 	movt	r1, #2
   1db34:	e30e0f74 	movw	r0, #61300	; 0xef74
   1db38:	e3400002 	movt	r0, #2
   1db3c:	e3a0204d 	mov	r2, #77	; 0x4d
   1db40:	eb001c16 	bl	24ba0 <assertion_failed>
   1db44:	eaffffea 	b	1daf4 <CIPAddress::operator==(unsigned char const*) const+0x20>

0001db48 <CIPAddress::operator!=(unsigned char const*) const>:
   1db48:	e92d4010 	push	{r4, lr}
   1db4c:	ebffffe0 	bl	1dad4 <CIPAddress::operator==(unsigned char const*) const>
   1db50:	e16f0f10 	clz	r0, r0
   1db54:	e1a002a0 	lsr	r0, r0, #5
   1db58:	e8bd8010 	pop	{r4, pc}

0001db5c <CIPAddress::operator==(unsigned int) const>:
   1db5c:	e5903000 	ldr	r3, [r0]
   1db60:	e92d4070 	push	{r4, r5, r6, lr}
   1db64:	e1a04000 	mov	r4, r0
   1db68:	e3530000 	cmp	r3, #0
   1db6c:	e1a05001 	mov	r5, r1
   1db70:	1a000005 	bne	1db8c <CIPAddress::operator==(unsigned int) const+0x30>
   1db74:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1db78:	e3401002 	movt	r1, #2
   1db7c:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1db80:	e3400002 	movt	r0, #2
   1db84:	e3a02058 	mov	r2, #88	; 0x58
   1db88:	eb001c04 	bl	24ba0 <assertion_failed>
   1db8c:	e5940004 	ldr	r0, [r4, #4]
   1db90:	e0400005 	sub	r0, r0, r5
   1db94:	e16f0f10 	clz	r0, r0
   1db98:	e1a002a0 	lsr	r0, r0, #5
   1db9c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dba0 <CIPAddress::operator!=(unsigned int) const>:
   1dba0:	e5903000 	ldr	r3, [r0]
   1dba4:	e92d4070 	push	{r4, r5, r6, lr}
   1dba8:	e1a04000 	mov	r4, r0
   1dbac:	e3530000 	cmp	r3, #0
   1dbb0:	e1a05001 	mov	r5, r1
   1dbb4:	1a000005 	bne	1dbd0 <CIPAddress::operator!=(unsigned int) const+0x30>
   1dbb8:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1dbbc:	e3401002 	movt	r1, #2
   1dbc0:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1dbc4:	e3400002 	movt	r0, #2
   1dbc8:	e3a0205e 	mov	r2, #94	; 0x5e
   1dbcc:	eb001bf3 	bl	24ba0 <assertion_failed>
   1dbd0:	e5940004 	ldr	r0, [r4, #4]
   1dbd4:	e0500005 	subs	r0, r0, r5
   1dbd8:	13a00001 	movne	r0, #1
   1dbdc:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dbe0 <CIPAddress::operator=(unsigned int)>:
   1dbe0:	e3a02001 	mov	r2, #1
   1dbe4:	e5801004 	str	r1, [r0, #4]
   1dbe8:	e5802000 	str	r2, [r0]
   1dbec:	e12fff1e 	bx	lr

0001dbf0 <CIPAddress::Set(unsigned int)>:
   1dbf0:	e3a03001 	mov	r3, #1
   1dbf4:	e5801004 	str	r1, [r0, #4]
   1dbf8:	e5803000 	str	r3, [r0]
   1dbfc:	e12fff1e 	bx	lr

0001dc00 <CIPAddress::Set(unsigned char const*)>:
   1dc00:	e92d4070 	push	{r4, r5, r6, lr}
   1dc04:	e2515000 	subs	r5, r1, #0
   1dc08:	e1a04000 	mov	r4, r0
   1dc0c:	0a000006 	beq	1dc2c <CIPAddress::Set(unsigned char const*)+0x2c>
   1dc10:	e3a02004 	mov	r2, #4
   1dc14:	e1a01005 	mov	r1, r5
   1dc18:	e0840002 	add	r0, r4, r2
   1dc1c:	eb001569 	bl	231c8 <memcpy>
   1dc20:	e3a03001 	mov	r3, #1
   1dc24:	e5843000 	str	r3, [r4]
   1dc28:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dc2c:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1dc30:	e3401002 	movt	r1, #2
   1dc34:	e30c0704 	movw	r0, #50948	; 0xc704
   1dc38:	e3400002 	movt	r0, #2
   1dc3c:	e3a02075 	mov	r2, #117	; 0x75
   1dc40:	eb001bd6 	bl	24ba0 <assertion_failed>
   1dc44:	eafffff1 	b	1dc10 <CIPAddress::Set(unsigned char const*)+0x10>

0001dc48 <CIPAddress::CIPAddress(unsigned char const*)>:
   1dc48:	e92d4010 	push	{r4, lr}
   1dc4c:	e1a04000 	mov	r4, r0
   1dc50:	ebffffea 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   1dc54:	e1a00004 	mov	r0, r4
   1dc58:	e8bd8010 	pop	{r4, pc}

0001dc5c <CIPAddress::Set(CIPAddress const&)>:
   1dc5c:	e5913000 	ldr	r3, [r1]
   1dc60:	e92d4070 	push	{r4, r5, r6, lr}
   1dc64:	e1a05001 	mov	r5, r1
   1dc68:	e3530000 	cmp	r3, #0
   1dc6c:	e1a04000 	mov	r4, r0
   1dc70:	1a000005 	bne	1dc8c <CIPAddress::Set(CIPAddress const&)+0x30>
   1dc74:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1dc78:	e3401002 	movt	r1, #2
   1dc7c:	e30e0f4c 	movw	r0, #61260	; 0xef4c
   1dc80:	e3400002 	movt	r0, #2
   1dc84:	e3a0207e 	mov	r2, #126	; 0x7e
   1dc88:	eb001bc4 	bl	24ba0 <assertion_failed>
   1dc8c:	e5953004 	ldr	r3, [r5, #4]
   1dc90:	e3a02001 	mov	r2, #1
   1dc94:	e884000c 	stm	r4, {r2, r3}
   1dc98:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dc9c <CIPAddress::SetBroadcast()>:
   1dc9c:	e3e03000 	mvn	r3, #0
   1dca0:	e3a02001 	mov	r2, #1
   1dca4:	e880000c 	stm	r0, {r2, r3}
   1dca8:	e12fff1e 	bx	lr

0001dcac <CIPAddress::operator unsigned int() const>:
   1dcac:	e5903000 	ldr	r3, [r0]
   1dcb0:	e92d4010 	push	{r4, lr}
   1dcb4:	e1a04000 	mov	r4, r0
   1dcb8:	e3530000 	cmp	r3, #0
   1dcbc:	1a000005 	bne	1dcd8 <CIPAddress::operator unsigned int() const+0x2c>
   1dcc0:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1dcc4:	e3401002 	movt	r1, #2
   1dcc8:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1dccc:	e3400002 	movt	r0, #2
   1dcd0:	e3a0208f 	mov	r2, #143	; 0x8f
   1dcd4:	eb001bb1 	bl	24ba0 <assertion_failed>
   1dcd8:	e5940004 	ldr	r0, [r4, #4]
   1dcdc:	e8bd8010 	pop	{r4, pc}

0001dce0 <CIPAddress::Get() const>:
   1dce0:	e5903000 	ldr	r3, [r0]
   1dce4:	e92d4010 	push	{r4, lr}
   1dce8:	e1a04000 	mov	r4, r0
   1dcec:	e3530000 	cmp	r3, #0
   1dcf0:	1a000005 	bne	1dd0c <CIPAddress::Get() const+0x2c>
   1dcf4:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1dcf8:	e3401002 	movt	r1, #2
   1dcfc:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1dd00:	e3400002 	movt	r0, #2
   1dd04:	e3a02095 	mov	r2, #149	; 0x95
   1dd08:	eb001ba4 	bl	24ba0 <assertion_failed>
   1dd0c:	e2840004 	add	r0, r4, #4
   1dd10:	e8bd8010 	pop	{r4, pc}

0001dd14 <CIPAddress::CopyTo(unsigned char*) const>:
   1dd14:	e5903000 	ldr	r3, [r0]
   1dd18:	e92d4070 	push	{r4, r5, r6, lr}
   1dd1c:	e1a05000 	mov	r5, r0
   1dd20:	e3530000 	cmp	r3, #0
   1dd24:	e1a04001 	mov	r4, r1
   1dd28:	0a000006 	beq	1dd48 <CIPAddress::CopyTo(unsigned char*) const+0x34>
   1dd2c:	e3540000 	cmp	r4, #0
   1dd30:	0a00000c 	beq	1dd68 <CIPAddress::CopyTo(unsigned char*) const+0x54>
   1dd34:	e2851004 	add	r1, r5, #4
   1dd38:	e1a00004 	mov	r0, r4
   1dd3c:	e3a02004 	mov	r2, #4
   1dd40:	e8bd4070 	pop	{r4, r5, r6, lr}
   1dd44:	ea00151f 	b	231c8 <memcpy>
   1dd48:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1dd4c:	e3401002 	movt	r1, #2
   1dd50:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1dd54:	e3400002 	movt	r0, #2
   1dd58:	e3a0209b 	mov	r2, #155	; 0x9b
   1dd5c:	eb001b8f 	bl	24ba0 <assertion_failed>
   1dd60:	e3540000 	cmp	r4, #0
   1dd64:	1afffff2 	bne	1dd34 <CIPAddress::CopyTo(unsigned char*) const+0x20>
   1dd68:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1dd6c:	e3401002 	movt	r1, #2
   1dd70:	e30b0984 	movw	r0, #47492	; 0xb984
   1dd74:	e3400002 	movt	r0, #2
   1dd78:	e3a0209c 	mov	r2, #156	; 0x9c
   1dd7c:	eb001b87 	bl	24ba0 <assertion_failed>
   1dd80:	eaffffeb 	b	1dd34 <CIPAddress::CopyTo(unsigned char*) const+0x20>

0001dd84 <CIPAddress::IsNull() const>:
   1dd84:	e5903000 	ldr	r3, [r0]
   1dd88:	e92d4010 	push	{r4, lr}
   1dd8c:	e1a04000 	mov	r4, r0
   1dd90:	e3530000 	cmp	r3, #0
   1dd94:	1a000005 	bne	1ddb0 <CIPAddress::IsNull() const+0x2c>
   1dd98:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1dd9c:	e3401002 	movt	r1, #2
   1dda0:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1dda4:	e3400002 	movt	r0, #2
   1dda8:	e3a020a2 	mov	r2, #162	; 0xa2
   1ddac:	eb001b7b 	bl	24ba0 <assertion_failed>
   1ddb0:	e5940004 	ldr	r0, [r4, #4]
   1ddb4:	e16f0f10 	clz	r0, r0
   1ddb8:	e1a002a0 	lsr	r0, r0, #5
   1ddbc:	e8bd8010 	pop	{r4, pc}

0001ddc0 <CIPAddress::IsBroadcast() const>:
   1ddc0:	e5903000 	ldr	r3, [r0]
   1ddc4:	e92d4010 	push	{r4, lr}
   1ddc8:	e1a04000 	mov	r4, r0
   1ddcc:	e3530000 	cmp	r3, #0
   1ddd0:	1a000005 	bne	1ddec <CIPAddress::IsBroadcast() const+0x2c>
   1ddd4:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1ddd8:	e3401002 	movt	r1, #2
   1dddc:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1dde0:	e3400002 	movt	r0, #2
   1dde4:	e3a020a8 	mov	r2, #168	; 0xa8
   1dde8:	eb001b6c 	bl	24ba0 <assertion_failed>
   1ddec:	e5940004 	ldr	r0, [r4, #4]
   1ddf0:	e3700001 	cmn	r0, #1
   1ddf4:	13a00000 	movne	r0, #0
   1ddf8:	03a00001 	moveq	r0, #1
   1ddfc:	e8bd8010 	pop	{r4, pc}

0001de00 <CIPAddress::GetSize() const>:
   1de00:	e3a00004 	mov	r0, #4
   1de04:	e12fff1e 	bx	lr

0001de08 <CIPAddress::Format(CString*) const>:
   1de08:	e92d4030 	push	{r4, r5, lr}
   1de0c:	e2514000 	subs	r4, r1, #0
   1de10:	e1a05000 	mov	r5, r0
   1de14:	e24dd00c 	sub	sp, sp, #12
   1de18:	0a00000c 	beq	1de50 <CIPAddress::Format(CString*) const+0x48>
   1de1c:	e5952004 	ldr	r2, [r5, #4]
   1de20:	e1a00004 	mov	r0, r4
   1de24:	e30e1f84 	movw	r1, #61316	; 0xef84
   1de28:	e3401002 	movt	r1, #2
   1de2c:	e7e7e852 	ubfx	lr, r2, #16, #8
   1de30:	e7e73452 	ubfx	r3, r2, #8, #8
   1de34:	e1a0cc22 	lsr	ip, r2, #24
   1de38:	e58de000 	str	lr, [sp]
   1de3c:	e58dc004 	str	ip, [sp, #4]
   1de40:	e6ef2072 	uxtb	r2, r2
   1de44:	eb00236c 	bl	26bfc <CString::Format(char const*, ...)>
   1de48:	e28dd00c 	add	sp, sp, #12
   1de4c:	e8bd8030 	pop	{r4, r5, pc}
   1de50:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1de54:	e3401002 	movt	r1, #2
   1de58:	e30c0714 	movw	r0, #50964	; 0xc714
   1de5c:	e3400002 	movt	r0, #2
   1de60:	e3a020b4 	mov	r2, #180	; 0xb4
   1de64:	eb001b4d 	bl	24ba0 <assertion_failed>
   1de68:	eaffffeb 	b	1de1c <CIPAddress::Format(CString*) const+0x14>

0001de6c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   1de6c:	e5913000 	ldr	r3, [r1]
   1de70:	e92d4070 	push	{r4, r5, r6, lr}
   1de74:	e1a04001 	mov	r4, r1
   1de78:	e3530000 	cmp	r3, #0
   1de7c:	e24dd008 	sub	sp, sp, #8
   1de80:	e1a05000 	mov	r5, r0
   1de84:	e1a06002 	mov	r6, r2
   1de88:	0a000016 	beq	1dee8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x7c>
   1de8c:	e5943004 	ldr	r3, [r4, #4]
   1de90:	e3730001 	cmn	r3, #1
   1de94:	03a00001 	moveq	r0, #1
   1de98:	0a000010 	beq	1dee0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x74>
   1de9c:	e3560000 	cmp	r6, #0
   1dea0:	0a00001e 	beq	1df20 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xb4>
   1dea4:	e3a02004 	mov	r2, #4
   1dea8:	e1a01006 	mov	r1, r6
   1deac:	e08d0002 	add	r0, sp, r2
   1deb0:	eb0014c4 	bl	231c8 <memcpy>
   1deb4:	e5953000 	ldr	r3, [r5]
   1deb8:	e3530000 	cmp	r3, #0
   1debc:	0a000010 	beq	1df04 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x98>
   1dec0:	e59d3004 	ldr	r3, [sp, #4]
   1dec4:	e5950004 	ldr	r0, [r5, #4]
   1dec8:	e5942004 	ldr	r2, [r4, #4]
   1decc:	e0000003 	and	r0, r0, r3
   1ded0:	e0033002 	and	r3, r3, r2
   1ded4:	e0400003 	sub	r0, r0, r3
   1ded8:	e16f0f10 	clz	r0, r0
   1dedc:	e1a002a0 	lsr	r0, r0, #5
   1dee0:	e28dd008 	add	sp, sp, #8
   1dee4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dee8:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1deec:	e3401002 	movt	r1, #2
   1def0:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1def4:	e3400002 	movt	r0, #2
   1def8:	e3a020a8 	mov	r2, #168	; 0xa8
   1defc:	eb001b27 	bl	24ba0 <assertion_failed>
   1df00:	eaffffe1 	b	1de8c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x20>
   1df04:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1df08:	e3401002 	movt	r1, #2
   1df0c:	e30a0ea0 	movw	r0, #44704	; 0xaea0
   1df10:	e3400002 	movt	r0, #2
   1df14:	e3a020c5 	mov	r2, #197	; 0xc5
   1df18:	eb001b20 	bl	24ba0 <assertion_failed>
   1df1c:	eaffffe7 	b	1dec0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x54>
   1df20:	e30e1f3c 	movw	r1, #61244	; 0xef3c
   1df24:	e3401002 	movt	r1, #2
   1df28:	e30e0f90 	movw	r0, #61328	; 0xef90
   1df2c:	e3400002 	movt	r0, #2
   1df30:	e3a020c1 	mov	r2, #193	; 0xc1
   1df34:	eb001b19 	bl	24ba0 <assertion_failed>
   1df38:	eaffffd9 	b	1dea4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x38>

0001df3c <CNetQueue::CNetQueue()>:
   1df3c:	e3a02000 	mov	r2, #0
   1df40:	e5802000 	str	r2, [r0]
   1df44:	e5802004 	str	r2, [r0, #4]
   1df48:	e5802008 	str	r2, [r0, #8]
   1df4c:	e12fff1e 	bx	lr

0001df50 <CNetQueue::IsEmpty() const>:
   1df50:	e5900000 	ldr	r0, [r0]
   1df54:	e16f0f10 	clz	r0, r0
   1df58:	e1a002a0 	lsr	r0, r0, #5
   1df5c:	e12fff1e 	bx	lr

0001df60 <CNetQueue::Flush()>:
   1df60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1df64:	e5904000 	ldr	r4, [r0]
   1df68:	e3540000 	cmp	r4, #0
   1df6c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1df70:	e30e6fa0 	movw	r6, #61344	; 0xefa0
   1df74:	e30e8a84 	movw	r8, #60036	; 0xea84
   1df78:	e30e7fb0 	movw	r7, #61360	; 0xefb0
   1df7c:	e1a05000 	mov	r5, r0
   1df80:	e3406002 	movt	r6, #2
   1df84:	e3408002 	movt	r8, #2
   1df88:	e3407002 	movt	r7, #2
   1df8c:	ea000010 	b	1dfd4 <CNetQueue::Flush()+0x74>
   1df90:	e3540000 	cmp	r4, #0
   1df94:	0a000015 	beq	1dff0 <CNetQueue::Flush()+0x90>
   1df98:	e5943004 	ldr	r3, [r4, #4]
   1df9c:	e3530000 	cmp	r3, #0
   1dfa0:	e5853000 	str	r3, [r5]
   1dfa4:	0a000019 	beq	1e010 <CNetQueue::Flush()+0xb0>
   1dfa8:	e3a02000 	mov	r2, #0
   1dfac:	e5832000 	str	r2, [r3]
   1dfb0:	e5953008 	ldr	r3, [r5, #8]
   1dfb4:	e3530000 	cmp	r3, #0
   1dfb8:	1a000020 	bne	1e040 <CNetQueue::Flush()+0xe0>
   1dfbc:	e1a00004 	mov	r0, r4
   1dfc0:	e3a01e65 	mov	r1, #1616	; 0x650
   1dfc4:	eb000ff7 	bl	21fa8 <operator delete(void*, unsigned int)>
   1dfc8:	e5954000 	ldr	r4, [r5]
   1dfcc:	e3540000 	cmp	r4, #0
   1dfd0:	0a00001c 	beq	1e048 <CNetQueue::Flush()+0xe8>
   1dfd4:	e5950008 	ldr	r0, [r5, #8]
   1dfd8:	e3500000 	cmp	r0, #0
   1dfdc:	0affffeb 	beq	1df90 <CNetQueue::Flush()+0x30>
   1dfe0:	eb000ff8 	bl	21fc8 <EnterCritical>
   1dfe4:	e5954000 	ldr	r4, [r5]
   1dfe8:	e3540000 	cmp	r4, #0
   1dfec:	1affffe9 	bne	1df98 <CNetQueue::Flush()+0x38>
   1dff0:	e3a0203a 	mov	r2, #58	; 0x3a
   1dff4:	e1a01006 	mov	r1, r6
   1dff8:	e1a00008 	mov	r0, r8
   1dffc:	eb001ae7 	bl	24ba0 <assertion_failed>
   1e000:	e5943004 	ldr	r3, [r4, #4]
   1e004:	e3530000 	cmp	r3, #0
   1e008:	e5853000 	str	r3, [r5]
   1e00c:	1affffe5 	bne	1dfa8 <CNetQueue::Flush()+0x48>
   1e010:	e5953004 	ldr	r3, [r5, #4]
   1e014:	e1540003 	cmp	r4, r3
   1e018:	0a000003 	beq	1e02c <CNetQueue::Flush()+0xcc>
   1e01c:	e3a02043 	mov	r2, #67	; 0x43
   1e020:	e1a01006 	mov	r1, r6
   1e024:	e1a00007 	mov	r0, r7
   1e028:	eb001adc 	bl	24ba0 <assertion_failed>
   1e02c:	e3a03000 	mov	r3, #0
   1e030:	e5853004 	str	r3, [r5, #4]
   1e034:	e5953008 	ldr	r3, [r5, #8]
   1e038:	e3530000 	cmp	r3, #0
   1e03c:	0affffde 	beq	1dfbc <CNetQueue::Flush()+0x5c>
   1e040:	eb00100e 	bl	22080 <LeaveCritical>
   1e044:	eaffffdc 	b	1dfbc <CNetQueue::Flush()+0x5c>
   1e048:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001e04c <CNetQueue::~CNetQueue()>:
   1e04c:	e92d4010 	push	{r4, lr}
   1e050:	e1a04000 	mov	r4, r0
   1e054:	ebffffc1 	bl	1df60 <CNetQueue::Flush()>
   1e058:	e1a00004 	mov	r0, r4
   1e05c:	e8bd8010 	pop	{r4, pc}

0001e060 <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   1e060:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e064:	e1a05000 	mov	r5, r0
   1e068:	e3a00e65 	mov	r0, #1616	; 0x650
   1e06c:	e1a06002 	mov	r6, r2
   1e070:	e1a07001 	mov	r7, r1
   1e074:	e1a08003 	mov	r8, r3
   1e078:	eb000fc6 	bl	21f98 <operator new(unsigned int)>
   1e07c:	e3560000 	cmp	r6, #0
   1e080:	e1a04000 	mov	r4, r0
   1e084:	0a00002e 	beq	1e144 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe4>
   1e088:	e3560d19 	cmp	r6, #1600	; 0x640
   1e08c:	8a000025 	bhi	1e128 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xc8>
   1e090:	e3570000 	cmp	r7, #0
   1e094:	e5846008 	str	r6, [r4, #8]
   1e098:	0a000032 	beq	1e168 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x108>
   1e09c:	e1a02006 	mov	r2, r6
   1e0a0:	e1a01007 	mov	r1, r7
   1e0a4:	e284000c 	add	r0, r4, #12
   1e0a8:	eb001446 	bl	231c8 <memcpy>
   1e0ac:	e5950008 	ldr	r0, [r5, #8]
   1e0b0:	e584864c 	str	r8, [r4, #1612]	; 0x64c
   1e0b4:	e3500000 	cmp	r0, #0
   1e0b8:	1a000028 	bne	1e160 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   1e0bc:	e5951000 	ldr	r1, [r5]
   1e0c0:	e3a02000 	mov	r2, #0
   1e0c4:	e5953004 	ldr	r3, [r5, #4]
   1e0c8:	e1510002 	cmp	r1, r2
   1e0cc:	e5842004 	str	r2, [r4, #4]
   1e0d0:	05854000 	streq	r4, [r5]
   1e0d4:	e5843000 	str	r3, [r4]
   1e0d8:	0a00000c 	beq	1e110 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb0>
   1e0dc:	e3530000 	cmp	r3, #0
   1e0e0:	0a000027 	beq	1e184 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x124>
   1e0e4:	e5932004 	ldr	r2, [r3, #4]
   1e0e8:	e3520000 	cmp	r2, #0
   1e0ec:	0a000006 	beq	1e10c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xac>
   1e0f0:	e30e1fa0 	movw	r1, #61344	; 0xefa0
   1e0f4:	e30e0fd4 	movw	r0, #61396	; 0xefd4
   1e0f8:	e3401002 	movt	r1, #2
   1e0fc:	e3400002 	movt	r0, #2
   1e100:	e3a02067 	mov	r2, #103	; 0x67
   1e104:	eb001aa5 	bl	24ba0 <assertion_failed>
   1e108:	e5953004 	ldr	r3, [r5, #4]
   1e10c:	e5834004 	str	r4, [r3, #4]
   1e110:	e5953008 	ldr	r3, [r5, #8]
   1e114:	e5854004 	str	r4, [r5, #4]
   1e118:	e3530000 	cmp	r3, #0
   1e11c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1e120:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1e124:	ea000fd5 	b	22080 <LeaveCritical>
   1e128:	e30e1fa0 	movw	r1, #61344	; 0xefa0
   1e12c:	e30c0388 	movw	r0, #50056	; 0xc388
   1e130:	e3401002 	movt	r1, #2
   1e134:	e3400002 	movt	r0, #2
   1e138:	e3a02053 	mov	r2, #83	; 0x53
   1e13c:	eb001a97 	bl	24ba0 <assertion_failed>
   1e140:	eaffffd2 	b	1e090 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x30>
   1e144:	e30e1fa0 	movw	r1, #61344	; 0xefa0
   1e148:	e30e0700 	movw	r0, #59136	; 0xe700
   1e14c:	e3401002 	movt	r1, #2
   1e150:	e3400002 	movt	r0, #2
   1e154:	e3a02052 	mov	r2, #82	; 0x52
   1e158:	eb001a90 	bl	24ba0 <assertion_failed>
   1e15c:	eaffffcb 	b	1e090 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x30>
   1e160:	eb000f98 	bl	21fc8 <EnterCritical>
   1e164:	eaffffd4 	b	1e0bc <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   1e168:	e30e1fa0 	movw	r1, #61344	; 0xefa0
   1e16c:	e30b0984 	movw	r0, #47492	; 0xb984
   1e170:	e3401002 	movt	r1, #2
   1e174:	e3400002 	movt	r0, #2
   1e178:	e3a02056 	mov	r2, #86	; 0x56
   1e17c:	eb001a87 	bl	24ba0 <assertion_failed>
   1e180:	eaffffc5 	b	1e09c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x3c>
   1e184:	e30e1fa0 	movw	r1, #61344	; 0xefa0
   1e188:	e30e0fc4 	movw	r0, #61380	; 0xefc4
   1e18c:	e3401002 	movt	r1, #2
   1e190:	e3400002 	movt	r0, #2
   1e194:	e3a02066 	mov	r2, #102	; 0x66
   1e198:	eb001a80 	bl	24ba0 <assertion_failed>
   1e19c:	e5953004 	ldr	r3, [r5, #4]
   1e1a0:	eaffffcf 	b	1e0e4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x84>

0001e1a4 <CNetQueue::Dequeue(void*, void**)>:
   1e1a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e1a8:	e5904000 	ldr	r4, [r0]
   1e1ac:	e3540000 	cmp	r4, #0
   1e1b0:	0a000046 	beq	1e2d0 <CNetQueue::Dequeue(void*, void**)+0x12c>
   1e1b4:	e1a05000 	mov	r5, r0
   1e1b8:	e5900008 	ldr	r0, [r0, #8]
   1e1bc:	e1a06002 	mov	r6, r2
   1e1c0:	e1a07001 	mov	r7, r1
   1e1c4:	e3500000 	cmp	r0, #0
   1e1c8:	1a000029 	bne	1e274 <CNetQueue::Dequeue(void*, void**)+0xd0>
   1e1cc:	e5943004 	ldr	r3, [r4, #4]
   1e1d0:	e3530000 	cmp	r3, #0
   1e1d4:	e5853000 	str	r3, [r5]
   1e1d8:	0a000030 	beq	1e2a0 <CNetQueue::Dequeue(void*, void**)+0xfc>
   1e1dc:	e3a02000 	mov	r2, #0
   1e1e0:	e5832000 	str	r2, [r3]
   1e1e4:	e5953008 	ldr	r3, [r5, #8]
   1e1e8:	e3530000 	cmp	r3, #0
   1e1ec:	1a00001e 	bne	1e26c <CNetQueue::Dequeue(void*, void**)+0xc8>
   1e1f0:	e5945008 	ldr	r5, [r4, #8]
   1e1f4:	e3550000 	cmp	r5, #0
   1e1f8:	0a000014 	beq	1e250 <CNetQueue::Dequeue(void*, void**)+0xac>
   1e1fc:	e3550d19 	cmp	r5, #1600	; 0x640
   1e200:	8a00000b 	bhi	1e234 <CNetQueue::Dequeue(void*, void**)+0x90>
   1e204:	e1a02005 	mov	r2, r5
   1e208:	e284100c 	add	r1, r4, #12
   1e20c:	e1a00007 	mov	r0, r7
   1e210:	eb0013ec 	bl	231c8 <memcpy>
   1e214:	e3560000 	cmp	r6, #0
   1e218:	e1a00004 	mov	r0, r4
   1e21c:	e3a01e65 	mov	r1, #1616	; 0x650
   1e220:	1594364c 	ldrne	r3, [r4, #1612]	; 0x64c
   1e224:	15863000 	strne	r3, [r6]
   1e228:	eb000f5e 	bl	21fa8 <operator delete(void*, unsigned int)>
   1e22c:	e1a00005 	mov	r0, r5
   1e230:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e234:	e30e1fa0 	movw	r1, #61344	; 0xefa0
   1e238:	e30e0ff4 	movw	r0, #61428	; 0xeff4
   1e23c:	e3401002 	movt	r1, #2
   1e240:	e3400002 	movt	r0, #2
   1e244:	e3a02089 	mov	r2, #137	; 0x89
   1e248:	eb001a54 	bl	24ba0 <assertion_failed>
   1e24c:	eaffffec 	b	1e204 <CNetQueue::Dequeue(void*, void**)+0x60>
   1e250:	e30e1fa0 	movw	r1, #61344	; 0xefa0
   1e254:	e30e0fe8 	movw	r0, #61416	; 0xefe8
   1e258:	e3401002 	movt	r1, #2
   1e25c:	e3400002 	movt	r0, #2
   1e260:	e3a02088 	mov	r2, #136	; 0x88
   1e264:	eb001a4d 	bl	24ba0 <assertion_failed>
   1e268:	eaffffe5 	b	1e204 <CNetQueue::Dequeue(void*, void**)+0x60>
   1e26c:	eb000f83 	bl	22080 <LeaveCritical>
   1e270:	eaffffde 	b	1e1f0 <CNetQueue::Dequeue(void*, void**)+0x4c>
   1e274:	eb000f53 	bl	21fc8 <EnterCritical>
   1e278:	e5954000 	ldr	r4, [r5]
   1e27c:	e3540000 	cmp	r4, #0
   1e280:	1affffd1 	bne	1e1cc <CNetQueue::Dequeue(void*, void**)+0x28>
   1e284:	e30e1fa0 	movw	r1, #61344	; 0xefa0
   1e288:	e30e0a84 	movw	r0, #60036	; 0xea84
   1e28c:	e3401002 	movt	r1, #2
   1e290:	e3400002 	movt	r0, #2
   1e294:	e3a02078 	mov	r2, #120	; 0x78
   1e298:	eb001a40 	bl	24ba0 <assertion_failed>
   1e29c:	eaffffca 	b	1e1cc <CNetQueue::Dequeue(void*, void**)+0x28>
   1e2a0:	e5953004 	ldr	r3, [r5, #4]
   1e2a4:	e1530004 	cmp	r3, r4
   1e2a8:	0a000005 	beq	1e2c4 <CNetQueue::Dequeue(void*, void**)+0x120>
   1e2ac:	e30e1fa0 	movw	r1, #61344	; 0xefa0
   1e2b0:	e30e0fb0 	movw	r0, #61360	; 0xefb0
   1e2b4:	e3401002 	movt	r1, #2
   1e2b8:	e3400002 	movt	r0, #2
   1e2bc:	e3a02081 	mov	r2, #129	; 0x81
   1e2c0:	eb001a36 	bl	24ba0 <assertion_failed>
   1e2c4:	e3a03000 	mov	r3, #0
   1e2c8:	e5853004 	str	r3, [r5, #4]
   1e2cc:	eaffffc4 	b	1e1e4 <CNetQueue::Dequeue(void*, void**)+0x40>
   1e2d0:	e1a05004 	mov	r5, r4
   1e2d4:	e1a00005 	mov	r0, r5
   1e2d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001e2dc <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   1e2dc:	e92d4070 	push	{r4, r5, r6, lr}
   1e2e0:	e1a04000 	mov	r4, r0
   1e2e4:	e3a05000 	mov	r5, #0
   1e2e8:	e1a00001 	mov	r0, r1
   1e2ec:	e584500c 	str	r5, [r4, #12]
   1e2f0:	e1a01004 	mov	r1, r4
   1e2f4:	e1a06002 	mov	r6, r2
   1e2f8:	ebfffe85 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   1e2fc:	e5c45008 	strb	r5, [r4, #8]
   1e300:	e1a00004 	mov	r0, r4
   1e304:	e5c46009 	strb	r6, [r4, #9]
   1e308:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e30c <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   1e30c:	e92d4070 	push	{r4, r5, r6, lr}
   1e310:	e1a04000 	mov	r4, r0
   1e314:	e1a06002 	mov	r6, r2
   1e318:	e1a00001 	mov	r0, r1
   1e31c:	e3a02001 	mov	r2, #1
   1e320:	e1a01004 	mov	r1, r4
   1e324:	e584200c 	str	r2, [r4, #12]
   1e328:	e1a05003 	mov	r5, r3
   1e32c:	ebfffe78 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   1e330:	e1a00006 	mov	r0, r6
   1e334:	e2841004 	add	r1, r4, #4
   1e338:	ebfffe75 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   1e33c:	e3a03000 	mov	r3, #0
   1e340:	e5c45009 	strb	r5, [r4, #9]
   1e344:	e1a00004 	mov	r0, r4
   1e348:	e5c43008 	strb	r3, [r4, #8]
   1e34c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e350 <CChecksumCalculator::~CChecksumCalculator()>:
   1e350:	e12fff1e 	bx	lr

0001e354 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   1e354:	e1a03001 	mov	r3, r1
   1e358:	e1a01000 	mov	r1, r0
   1e35c:	e1a00003 	mov	r0, r3
   1e360:	eafffe6b 	b	1dd14 <CIPAddress::CopyTo(unsigned char*) const>

0001e364 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   1e364:	e92d4010 	push	{r4, lr}
   1e368:	e1a04000 	mov	r4, r0
   1e36c:	e1a00001 	mov	r0, r1
   1e370:	e2841004 	add	r1, r4, #4
   1e374:	ebfffe66 	bl	1dd14 <CIPAddress::CopyTo(unsigned char*) const>
   1e378:	e3a03001 	mov	r3, #1
   1e37c:	e584300c 	str	r3, [r4, #12]
   1e380:	e8bd8010 	pop	{r4, pc}

0001e384 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   1e384:	e92d4070 	push	{r4, r5, r6, lr}
   1e388:	e2505000 	subs	r5, r0, #0
   1e38c:	e1a06001 	mov	r6, r1
   1e390:	e1a04002 	mov	r4, r2
   1e394:	0a00001e 	beq	1e414 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x90>
   1e398:	e3560000 	cmp	r6, #0
   1e39c:	0a000012 	beq	1e3ec <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x68>
   1e3a0:	e3560001 	cmp	r6, #1
   1e3a4:	9a000021 	bls	1e430 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0xac>
   1e3a8:	e2460002 	sub	r0, r6, #2
   1e3ac:	e1a03005 	mov	r3, r5
   1e3b0:	e3c01001 	bic	r1, r0, #1
   1e3b4:	e2811002 	add	r1, r1, #2
   1e3b8:	e0851001 	add	r1, r5, r1
   1e3bc:	e0d320b2 	ldrh	r2, [r3], #2
   1e3c0:	e1530001 	cmp	r3, r1
   1e3c4:	e0844002 	add	r4, r4, r2
   1e3c8:	1afffffb 	bne	1e3bc <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x38>
   1e3cc:	e3c00001 	bic	r0, r0, #1
   1e3d0:	e3160001 	tst	r6, #1
   1e3d4:	e2800002 	add	r0, r0, #2
   1e3d8:	e0850000 	add	r0, r5, r0
   1e3dc:	0a00000a 	beq	1e40c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x88>
   1e3e0:	e5d00000 	ldrb	r0, [r0]
   1e3e4:	e0800004 	add	r0, r0, r4
   1e3e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e3ec:	e3a02055 	mov	r2, #85	; 0x55
   1e3f0:	e30f1014 	movw	r1, #61460	; 0xf014
   1e3f4:	e30e0700 	movw	r0, #59136	; 0xe700
   1e3f8:	e3401002 	movt	r1, #2
   1e3fc:	e3400002 	movt	r0, #2
   1e400:	eb0019e6 	bl	24ba0 <assertion_failed>
   1e404:	e1a00004 	mov	r0, r4
   1e408:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e40c:	e1a00004 	mov	r0, r4
   1e410:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e414:	e30f1014 	movw	r1, #61460	; 0xf014
   1e418:	e30f002c 	movw	r0, #61484	; 0xf02c
   1e41c:	e3401002 	movt	r1, #2
   1e420:	e3400002 	movt	r0, #2
   1e424:	e3a02054 	mov	r2, #84	; 0x54
   1e428:	eb0019dc 	bl	24ba0 <assertion_failed>
   1e42c:	eaffffd9 	b	1e398 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x14>
   1e430:	e1a00005 	mov	r0, r5
   1e434:	eaffffe9 	b	1e3e0 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x5c>

0001e438 <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   1e438:	e590300c 	ldr	r3, [r0, #12]
   1e43c:	e92d4070 	push	{r4, r5, r6, lr}
   1e440:	e3530000 	cmp	r3, #0
   1e444:	e1a05000 	mov	r5, r0
   1e448:	e1a06001 	mov	r6, r1
   1e44c:	e1a04002 	mov	r4, r2
   1e450:	0a000019 	beq	1e4bc <CChecksumCalculator::Calculate(void const*, unsigned int)+0x84>
   1e454:	e6bf3fb4 	rev16	r3, r4
   1e458:	e1a00005 	mov	r0, r5
   1e45c:	e1c530ba 	strh	r3, [r5, #10]
   1e460:	e3a02000 	mov	r2, #0
   1e464:	e3a0100c 	mov	r1, #12
   1e468:	ebffffc5 	bl	1e384 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   1e46c:	e3560000 	cmp	r6, #0
   1e470:	e1a05000 	mov	r5, r0
   1e474:	0a00001e 	beq	1e4f4 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xbc>
   1e478:	e3540000 	cmp	r4, #0
   1e47c:	0a000015 	beq	1e4d8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa0>
   1e480:	e1a02005 	mov	r2, r5
   1e484:	e1a01004 	mov	r1, r4
   1e488:	e1a00006 	mov	r0, r6
   1e48c:	ebffffbc 	bl	1e384 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   1e490:	e1a03820 	lsr	r3, r0, #16
   1e494:	e3530000 	cmp	r3, #0
   1e498:	e6ff3073 	uxth	r3, r3
   1e49c:	0a000003 	beq	1e4b0 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x78>
   1e4a0:	e6f30070 	uxtah	r0, r3, r0
   1e4a4:	e3a03001 	mov	r3, #1
   1e4a8:	e1b02820 	lsrs	r2, r0, #16
   1e4ac:	1afffffb 	bne	1e4a0 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x68>
   1e4b0:	e1e00000 	mvn	r0, r0
   1e4b4:	e6ff0070 	uxth	r0, r0
   1e4b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e4bc:	e30f1014 	movw	r1, #61460	; 0xf014
   1e4c0:	e30f003c 	movw	r0, #61500	; 0xf03c
   1e4c4:	e3401002 	movt	r1, #2
   1e4c8:	e3400002 	movt	r0, #2
   1e4cc:	e3a0203c 	mov	r2, #60	; 0x3c
   1e4d0:	eb0019b2 	bl	24ba0 <assertion_failed>
   1e4d4:	eaffffde 	b	1e454 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x1c>
   1e4d8:	e30f1014 	movw	r1, #61460	; 0xf014
   1e4dc:	e30e0700 	movw	r0, #59136	; 0xe700
   1e4e0:	e3401002 	movt	r1, #2
   1e4e4:	e3400002 	movt	r0, #2
   1e4e8:	e3a02042 	mov	r2, #66	; 0x42
   1e4ec:	eb0019ab 	bl	24ba0 <assertion_failed>
   1e4f0:	eaffffe2 	b	1e480 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x48>
   1e4f4:	e30f1014 	movw	r1, #61460	; 0xf014
   1e4f8:	e30b0984 	movw	r0, #47492	; 0xb984
   1e4fc:	e3401002 	movt	r1, #2
   1e500:	e3400002 	movt	r0, #2
   1e504:	e3a02041 	mov	r2, #65	; 0x41
   1e508:	eb0019a4 	bl	24ba0 <assertion_failed>
   1e50c:	eaffffd9 	b	1e478 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x40>

0001e510 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   1e510:	e92d4070 	push	{r4, r5, r6, lr}
   1e514:	e2505000 	subs	r5, r0, #0
   1e518:	e1a04001 	mov	r4, r1
   1e51c:	0a000017 	beq	1e580 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x70>
   1e520:	e3540000 	cmp	r4, #0
   1e524:	0a00000e 	beq	1e564 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x54>
   1e528:	e1a01004 	mov	r1, r4
   1e52c:	e1a00005 	mov	r0, r5
   1e530:	e3a02000 	mov	r2, #0
   1e534:	ebffff92 	bl	1e384 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   1e538:	e1a03820 	lsr	r3, r0, #16
   1e53c:	e3530000 	cmp	r3, #0
   1e540:	e6ff3073 	uxth	r3, r3
   1e544:	0a000003 	beq	1e558 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x48>
   1e548:	e6f30070 	uxtah	r0, r3, r0
   1e54c:	e3a03001 	mov	r3, #1
   1e550:	e1b02820 	lsrs	r2, r0, #16
   1e554:	1afffffb 	bne	1e548 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x38>
   1e558:	e1e00000 	mvn	r0, r0
   1e55c:	e6ff0070 	uxth	r0, r0
   1e560:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e564:	e30f1014 	movw	r1, #61460	; 0xf014
   1e568:	e30e0700 	movw	r0, #59136	; 0xe700
   1e56c:	e3401002 	movt	r1, #2
   1e570:	e3400002 	movt	r0, #2
   1e574:	e3a0204b 	mov	r2, #75	; 0x4b
   1e578:	eb001988 	bl	24ba0 <assertion_failed>
   1e57c:	eaffffe9 	b	1e528 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x18>
   1e580:	e30f1014 	movw	r1, #61460	; 0xf014
   1e584:	e30b0984 	movw	r0, #47492	; 0xb984
   1e588:	e3401002 	movt	r1, #2
   1e58c:	e3400002 	movt	r0, #2
   1e590:	e3a0204a 	mov	r2, #74	; 0x4a
   1e594:	eb001981 	bl	24ba0 <assertion_failed>
   1e598:	eaffffe0 	b	1e520 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x10>

0001e59c <CChecksumCalculator::FoldResult(unsigned int)>:
   1e59c:	e1a03820 	lsr	r3, r0, #16
   1e5a0:	e3530000 	cmp	r3, #0
   1e5a4:	e6ff3073 	uxth	r3, r3
   1e5a8:	0a000003 	beq	1e5bc <CChecksumCalculator::FoldResult(unsigned int)+0x20>
   1e5ac:	e6f30070 	uxtah	r0, r3, r0
   1e5b0:	e3a03001 	mov	r3, #1
   1e5b4:	e1b02820 	lsrs	r2, r0, #16
   1e5b8:	1afffffb 	bne	1e5ac <CChecksumCalculator::FoldResult(unsigned int)+0x10>
   1e5bc:	e6ff0070 	uxth	r0, r0
   1e5c0:	e12fff1e 	bx	lr

0001e5c4 <CDNSClient::CDNSClient(CNetSubSystem*)>:
   1e5c4:	e3510000 	cmp	r1, #0
   1e5c8:	e92d4010 	push	{r4, lr}
   1e5cc:	e1a04000 	mov	r4, r0
   1e5d0:	e5801000 	str	r1, [r0]
   1e5d4:	0a000001 	beq	1e5e0 <CDNSClient::CDNSClient(CNetSubSystem*)+0x1c>
   1e5d8:	e1a00004 	mov	r0, r4
   1e5dc:	e8bd8010 	pop	{r4, pc}
   1e5e0:	e3a02057 	mov	r2, #87	; 0x57
   1e5e4:	e30f1050 	movw	r1, #61520	; 0xf050
   1e5e8:	e3401002 	movt	r1, #2
   1e5ec:	e30a0638 	movw	r0, #42552	; 0xa638
   1e5f0:	e3400002 	movt	r0, #2
   1e5f4:	eb001969 	bl	24ba0 <assertion_failed>
   1e5f8:	e1a00004 	mov	r0, r4
   1e5fc:	e8bd8010 	pop	{r4, pc}

0001e600 <CDNSClient::~CDNSClient()>:
   1e600:	e12fff1e 	bx	lr

0001e604 <CDNSClient::Resolve(char const*, CIPAddress*)>:
   1e604:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e608:	e2515000 	subs	r5, r1, #0
   1e60c:	e1a06000 	mov	r6, r0
   1e610:	e24ddd15 	sub	sp, sp, #1344	; 0x540
   1e614:	e1a07002 	mov	r7, r2
   1e618:	e24dd00c 	sub	sp, sp, #12
   1e61c:	0a00002c 	beq	1e6d4 <CDNSClient::Resolve(char const*, CIPAddress*)+0xd0>
   1e620:	eb001ae0 	bl	251a8 <CLogger::Get()>
   1e624:	e30f3070 	movw	r3, #61552	; 0xf070
   1e628:	e3403002 	movt	r3, #2
   1e62c:	e30f1080 	movw	r1, #61568	; 0xf080
   1e630:	e3401002 	movt	r1, #2
   1e634:	e3a02004 	mov	r2, #4
   1e638:	eb001bb7 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e63c:	e5d53000 	ldrb	r3, [r5]
   1e640:	e2433031 	sub	r3, r3, #49	; 0x31
   1e644:	e3530008 	cmp	r3, #8
   1e648:	93a04000 	movls	r4, #0
   1e64c:	9a00000f 	bls	1e690 <CDNSClient::Resolve(char const*, CIPAddress*)+0x8c>
   1e650:	e5960000 	ldr	r0, [r6]
   1e654:	e3500000 	cmp	r0, #0
   1e658:	0a00009c 	beq	1e8d0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2cc>
   1e65c:	ebffde76 	bl	1603c <CNetSubSystem::GetConfig()>
   1e660:	ebfffc76 	bl	1d840 <CNetConfig::GetDNSServer() const>
   1e664:	ebfffd9d 	bl	1dce0 <CIPAddress::Get() const>
   1e668:	e1a01000 	mov	r1, r0
   1e66c:	e28d0018 	add	r0, sp, #24
   1e670:	ebfffd74 	bl	1dc48 <CIPAddress::CIPAddress(unsigned char const*)>
   1e674:	e28d0018 	add	r0, sp, #24
   1e678:	ebfffdc1 	bl	1dd84 <CIPAddress::IsNull() const>
   1e67c:	e2504000 	subs	r4, r0, #0
   1e680:	13a04000 	movne	r4, #0
   1e684:	0a000005 	beq	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x9c>
   1e688:	e28d0018 	add	r0, sp, #24
   1e68c:	ebfffcd8 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   1e690:	e1a00004 	mov	r0, r4
   1e694:	e28ddd15 	add	sp, sp, #1344	; 0x540
   1e698:	e28dd00c 	add	sp, sp, #12
   1e69c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6a0:	e5961000 	ldr	r1, [r6]
   1e6a4:	e3a02011 	mov	r2, #17
   1e6a8:	e28d0030 	add	r0, sp, #48	; 0x30
   1e6ac:	ebffdeb2 	bl	1617c <CSocket::CSocket(CNetSubSystem*, int)>
   1e6b0:	e28d0030 	add	r0, sp, #48	; 0x30
   1e6b4:	e3a02035 	mov	r2, #53	; 0x35
   1e6b8:	e28d1018 	add	r1, sp, #24
   1e6bc:	ebffdf33 	bl	16390 <CSocket::Connect(CIPAddress&, unsigned short)>
   1e6c0:	e3500000 	cmp	r0, #0
   1e6c4:	0a000009 	beq	1e6f0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xec>
   1e6c8:	e28d0030 	add	r0, sp, #48	; 0x30
   1e6cc:	ebffdefe 	bl	162cc <CSocket::~CSocket()>
   1e6d0:	eaffffec 	b	1e688 <CDNSClient::Resolve(char const*, CIPAddress*)+0x84>
   1e6d4:	e30f1050 	movw	r1, #61520	; 0xf050
   1e6d8:	e3401002 	movt	r1, #2
   1e6dc:	e30f0060 	movw	r0, #61536	; 0xf060
   1e6e0:	e3400002 	movt	r0, #2
   1e6e4:	e3a02061 	mov	r2, #97	; 0x61
   1e6e8:	eb00192c 	bl	24ba0 <assertion_failed>
   1e6ec:	eaffffcb 	b	1e620 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c>
   1e6f0:	e28d6f52 	add	r6, sp, #328	; 0x148
   1e6f4:	e3a02c02 	mov	r2, #512	; 0x200
   1e6f8:	e1a01004 	mov	r1, r4
   1e6fc:	e1a00006 	mov	r0, r6
   1e700:	eb001198 	bl	22d68 <memset>
   1e704:	e301cb50 	movw	ip, #6992	; 0x1b50
   1e708:	e340c003 	movt	ip, #3
   1e70c:	e3a0ec01 	mov	lr, #256	; 0x100
   1e710:	e3a02001 	mov	r2, #1
   1e714:	e1c6e0b4 	strh	lr, [r6, #4]
   1e718:	e1a01005 	mov	r1, r5
   1e71c:	e1dc30b0 	ldrh	r3, [ip]
   1e720:	e28d0048 	add	r0, sp, #72	; 0x48
   1e724:	e1c620b2 	strh	r2, [r6, #2]
   1e728:	e3a020ff 	mov	r2, #255	; 0xff
   1e72c:	e283e001 	add	lr, r3, #1
   1e730:	e6bf3fb3 	rev16	r3, r3
   1e734:	e1c630b0 	strh	r3, [r6]
   1e738:	e6ff3073 	uxth	r3, r3
   1e73c:	e1cce0b0 	strh	lr, [ip]
   1e740:	e58d3004 	str	r3, [sp, #4]
   1e744:	eb0011d7 	bl	22ea8 <strncpy>
   1e748:	e28d0048 	add	r0, sp, #72	; 0x48
   1e74c:	e28d2010 	add	r2, sp, #16
   1e750:	e30f10e0 	movw	r1, #61664	; 0xf0e0
   1e754:	e3401002 	movt	r1, #2
   1e758:	e5cd4147 	strb	r4, [sp, #327]	; 0x147
   1e75c:	eb001205 	bl	22f78 <strtok_r>
   1e760:	e250b000 	subs	fp, r0, #0
   1e764:	01a0a006 	moveq	sl, r6
   1e768:	028d5f55 	addeq	r5, sp, #340	; 0x154
   1e76c:	0a000019 	beq	1e7d8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1d4>
   1e770:	e30f80e0 	movw	r8, #61664	; 0xf0e0
   1e774:	e3408002 	movt	r8, #2
   1e778:	e28d5f55 	add	r5, sp, #340	; 0x154
   1e77c:	e1a0000b 	mov	r0, fp
   1e780:	e2859001 	add	r9, r5, #1
   1e784:	eb001197 	bl	22de8 <strlen>
   1e788:	e1a02000 	mov	r2, r0
   1e78c:	e35200ff 	cmp	r2, #255	; 0xff
   1e790:	e0453006 	sub	r3, r5, r6
   1e794:	e1a0100b 	mov	r1, fp
   1e798:	e1a00009 	mov	r0, r9
   1e79c:	e2633c02 	rsb	r3, r3, #512	; 0x200
   1e7a0:	e282c002 	add	ip, r2, #2
   1e7a4:	e1a0a006 	mov	sl, r6
   1e7a8:	8affffc6 	bhi	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e7ac:	e15c0003 	cmp	ip, r3
   1e7b0:	aaffffc4 	bge	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e7b4:	e5c52000 	strb	r2, [r5]
   1e7b8:	e0895002 	add	r5, r9, r2
   1e7bc:	eb0011ae 	bl	22e7c <strcpy>
   1e7c0:	e28d2010 	add	r2, sp, #16
   1e7c4:	e1a01008 	mov	r1, r8
   1e7c8:	e3a00000 	mov	r0, #0
   1e7cc:	eb0011e9 	bl	22f78 <strtok_r>
   1e7d0:	e250b000 	subs	fp, r0, #0
   1e7d4:	1affffe8 	bne	1e77c <CDNSClient::Resolve(char const*, CIPAddress*)+0x178>
   1e7d8:	e2850001 	add	r0, r5, #1
   1e7dc:	e28d1014 	add	r1, sp, #20
   1e7e0:	e040300a 	sub	r3, r0, sl
   1e7e4:	e3a02c01 	mov	r2, #256	; 0x100
   1e7e8:	e2633c02 	rsb	r3, r3, #512	; 0x200
   1e7ec:	e1cd21b4 	strh	r2, [sp, #20]
   1e7f0:	e3530003 	cmp	r3, #3
   1e7f4:	e3a03000 	mov	r3, #0
   1e7f8:	e1c120b2 	strh	r2, [r1, #2]
   1e7fc:	e5c53000 	strb	r3, [r5]
   1e800:	daffffb0 	ble	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e804:	e3a02004 	mov	r2, #4
   1e808:	e2855005 	add	r5, r5, #5
   1e80c:	eb00126d 	bl	231c8 <memcpy>
   1e810:	e045300a 	sub	r3, r5, sl
   1e814:	e3530c02 	cmp	r3, #512	; 0x200
   1e818:	e1a0a003 	mov	sl, r3
   1e81c:	ca00007e 	bgt	1ea1c <CDNSClient::Resolve(char const*, CIPAddress*)+0x418>
   1e820:	e30fb0ac 	movw	fp, #61612	; 0xf0ac
   1e824:	e340b002 	movt	fp, #2
   1e828:	e30f9080 	movw	r9, #61568	; 0xf080
   1e82c:	e3409002 	movt	r9, #2
   1e830:	e30f50c8 	movw	r5, #61640	; 0xf0c8
   1e834:	e3405002 	movt	r5, #2
   1e838:	e58d700c 	str	r7, [sp, #12]
   1e83c:	e3a08003 	mov	r8, #3
   1e840:	e1a0700a 	mov	r7, sl
   1e844:	e3a03000 	mov	r3, #0
   1e848:	e1a02007 	mov	r2, r7
   1e84c:	e1a01006 	mov	r1, r6
   1e850:	e28d0030 	add	r0, sp, #48	; 0x30
   1e854:	ebffdf75 	bl	16630 <CSocket::Send(void const*, unsigned int, int)>
   1e858:	e1570000 	cmp	r7, r0
   1e85c:	1affff99 	bne	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e860:	eb001a50 	bl	251a8 <CLogger::Get()>
   1e864:	e1a0300b 	mov	r3, fp
   1e868:	e3a02004 	mov	r2, #4
   1e86c:	e1a01009 	mov	r1, r9
   1e870:	eb001b29 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e874:	e28dafd2 	add	sl, sp, #840	; 0x348
   1e878:	eb0008aa 	bl	20b28 <CScheduler::Get()>
   1e87c:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   1e880:	eb00087a 	bl	20a70 <CScheduler::MsSleep(unsigned int)>
   1e884:	eb001a47 	bl	251a8 <CLogger::Get()>
   1e888:	e1a03005 	mov	r3, r5
   1e88c:	e3a02004 	mov	r2, #4
   1e890:	e1a01009 	mov	r1, r9
   1e894:	eb001b20 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e898:	e1a0100a 	mov	r1, sl
   1e89c:	e3a03040 	mov	r3, #64	; 0x40
   1e8a0:	e3a02c02 	mov	r2, #512	; 0x200
   1e8a4:	e28d0030 	add	r0, sp, #48	; 0x30
   1e8a8:	ebffdf8b 	bl	166dc <CSocket::Receive(void*, unsigned int, int)>
   1e8ac:	e3500c02 	cmp	r0, #512	; 0x200
   1e8b0:	aa00000e 	bge	1e8f0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2ec>
   1e8b4:	e3500000 	cmp	r0, #0
   1e8b8:	baffff82 	blt	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e8bc:	e3500019 	cmp	r0, #25
   1e8c0:	ca00005c 	bgt	1ea38 <CDNSClient::Resolve(char const*, CIPAddress*)+0x434>
   1e8c4:	e2588001 	subs	r8, r8, #1
   1e8c8:	0affff7e 	beq	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e8cc:	eaffffdc 	b	1e844 <CDNSClient::Resolve(char const*, CIPAddress*)+0x240>
   1e8d0:	e30f1050 	movw	r1, #61520	; 0xf050
   1e8d4:	e3401002 	movt	r1, #2
   1e8d8:	e30a0638 	movw	r0, #42552	; 0xa638
   1e8dc:	e3400002 	movt	r0, #2
   1e8e0:	e3a02068 	mov	r2, #104	; 0x68
   1e8e4:	eb0018ad 	bl	24ba0 <assertion_failed>
   1e8e8:	e5960000 	ldr	r0, [r6]
   1e8ec:	eaffff5a 	b	1e65c <CDNSClient::Resolve(char const*, CIPAddress*)+0x58>
   1e8f0:	e58d0008 	str	r0, [sp, #8]
   1e8f4:	e30f1050 	movw	r1, #61520	; 0xf050
   1e8f8:	e3401002 	movt	r1, #2
   1e8fc:	e30f00e4 	movw	r0, #61668	; 0xf0e4
   1e900:	e3400002 	movt	r0, #2
   1e904:	e3a020b8 	mov	r2, #184	; 0xb8
   1e908:	e59d700c 	ldr	r7, [sp, #12]
   1e90c:	eb0018a3 	bl	24ba0 <assertion_failed>
   1e910:	e59d3008 	ldr	r3, [sp, #8]
   1e914:	e1da20b0 	ldrh	r2, [sl]
   1e918:	e59d1004 	ldr	r1, [sp, #4]
   1e91c:	e1520001 	cmp	r2, r1
   1e920:	1affff68 	bne	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e924:	e1da10b2 	ldrh	r1, [sl, #2]
   1e928:	e3002ffa 	movw	r2, #4090	; 0xffa
   1e92c:	e0022001 	and	r2, r2, r1
   1e930:	e3520080 	cmp	r2, #128	; 0x80
   1e934:	1affff63 	bne	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e938:	e1da20b4 	ldrh	r2, [sl, #4]
   1e93c:	e3520c01 	cmp	r2, #256	; 0x100
   1e940:	1affff60 	bne	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e944:	e1da20b6 	ldrh	r2, [sl, #6]
   1e948:	e3520000 	cmp	r2, #0
   1e94c:	0affff5d 	beq	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e950:	e28d2fd5 	add	r2, sp, #852	; 0x354
   1e954:	ea000003 	b	1e968 <CDNSClient::Resolve(char const*, CIPAddress*)+0x364>
   1e958:	e0822000 	add	r2, r2, r0
   1e95c:	e042100a 	sub	r1, r2, sl
   1e960:	e1530001 	cmp	r3, r1
   1e964:	daffff57 	ble	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e968:	e5d21000 	ldrb	r1, [r2]
   1e96c:	e3510000 	cmp	r1, #0
   1e970:	e2810001 	add	r0, r1, #1
   1e974:	1afffff7 	bne	1e958 <CDNSClient::Resolve(char const*, CIPAddress*)+0x354>
   1e978:	e2822005 	add	r2, r2, #5
   1e97c:	e042100a 	sub	r1, r2, sl
   1e980:	e1530001 	cmp	r3, r1
   1e984:	daffff4f 	ble	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e988:	e243800e 	sub	r8, r3, #14
   1e98c:	e28d6020 	add	r6, sp, #32
   1e990:	e1a09003 	mov	r9, r3
   1e994:	e5d21000 	ldrb	r1, [r2]
   1e998:	e2823001 	add	r3, r2, #1
   1e99c:	e20110c0 	and	r1, r1, #192	; 0xc0
   1e9a0:	e35100c0 	cmp	r1, #192	; 0xc0
   1e9a4:	02825002 	addeq	r5, r2, #2
   1e9a8:	0a000008 	beq	1e9d0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3cc>
   1e9ac:	e043200a 	sub	r2, r3, sl
   1e9b0:	e1590002 	cmp	r9, r2
   1e9b4:	daffff43 	ble	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e9b8:	e5d32000 	ldrb	r2, [r3]
   1e9bc:	e2835001 	add	r5, r3, #1
   1e9c0:	e3520000 	cmp	r2, #0
   1e9c4:	e0853002 	add	r3, r5, r2
   1e9c8:	e043200a 	sub	r2, r3, sl
   1e9cc:	1afffff7 	bne	1e9b0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3ac>
   1e9d0:	e045300a 	sub	r3, r5, sl
   1e9d4:	e1530008 	cmp	r3, r8
   1e9d8:	caffff3a 	bgt	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e9dc:	e3a0200e 	mov	r2, #14
   1e9e0:	e1a01005 	mov	r1, r5
   1e9e4:	e1a00006 	mov	r0, r6
   1e9e8:	eb0011f6 	bl	231c8 <memcpy>
   1e9ec:	e1d630b0 	ldrh	r3, [r6]
   1e9f0:	e3530c01 	cmp	r3, #256	; 0x100
   1e9f4:	0a000012 	beq	1ea44 <CDNSClient::Resolve(char const*, CIPAddress*)+0x440>
   1e9f8:	e1d620b8 	ldrh	r2, [r6, #8]
   1e9fc:	e6bf2fb2 	rev16	r2, r2
   1ea00:	e6ff2072 	uxth	r2, r2
   1ea04:	e282200a 	add	r2, r2, #10
   1ea08:	e0852002 	add	r2, r5, r2
   1ea0c:	e042300a 	sub	r3, r2, sl
   1ea10:	e1590003 	cmp	r9, r3
   1ea14:	caffffde 	bgt	1e994 <CDNSClient::Resolve(char const*, CIPAddress*)+0x390>
   1ea18:	eaffff2a 	b	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1ea1c:	e30f1050 	movw	r1, #61520	; 0xf050
   1ea20:	e3401002 	movt	r1, #2
   1ea24:	e30f008c 	movw	r0, #61580	; 0xf08c
   1ea28:	e3400002 	movt	r0, #2
   1ea2c:	e3a020a7 	mov	r2, #167	; 0xa7
   1ea30:	eb00185a 	bl	24ba0 <assertion_failed>
   1ea34:	eaffff79 	b	1e820 <CDNSClient::Resolve(char const*, CIPAddress*)+0x21c>
   1ea38:	e1a03000 	mov	r3, r0
   1ea3c:	e59d700c 	ldr	r7, [sp, #12]
   1ea40:	eaffffb3 	b	1e914 <CDNSClient::Resolve(char const*, CIPAddress*)+0x310>
   1ea44:	e1d630b2 	ldrh	r3, [r6, #2]
   1ea48:	e3530c01 	cmp	r3, #256	; 0x100
   1ea4c:	1affffe9 	bne	1e9f8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f4>
   1ea50:	e1d630b8 	ldrh	r3, [r6, #8]
   1ea54:	e3530b01 	cmp	r3, #1024	; 0x400
   1ea58:	1affffe6 	bne	1e9f8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f4>
   1ea5c:	e3570000 	cmp	r7, #0
   1ea60:	1a000005 	bne	1ea7c <CDNSClient::Resolve(char const*, CIPAddress*)+0x478>
   1ea64:	e30f1050 	movw	r1, #61520	; 0xf050
   1ea68:	e3401002 	movt	r1, #2
   1ea6c:	e30f0108 	movw	r0, #61704	; 0xf108
   1ea70:	e3400002 	movt	r0, #2
   1ea74:	e300210f 	movw	r2, #271	; 0x10f
   1ea78:	eb001848 	bl	24ba0 <assertion_failed>
   1ea7c:	e28d102a 	add	r1, sp, #42	; 0x2a
   1ea80:	e1a00007 	mov	r0, r7
   1ea84:	e3a04001 	mov	r4, #1
   1ea88:	ebfffc5c 	bl	1dc00 <CIPAddress::Set(unsigned char const*)>
   1ea8c:	eaffff0d 	b	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>

0001ea90 <CDHCPClient::~CDHCPClient()>:
   1ea90:	e59f3028 	ldr	r3, [pc, #40]	; 1eac0 <CDHCPClient::~CDHCPClient()+0x30>
   1ea94:	e3a02000 	mov	r2, #0
   1ea98:	e92d4010 	push	{r4, lr}
   1ea9c:	e1a04000 	mov	r4, r0
   1eaa0:	e5842050 	str	r2, [r4, #80]	; 0x50
   1eaa4:	e2800058 	add	r0, r0, #88	; 0x58
   1eaa8:	e5843000 	str	r3, [r4]
   1eaac:	ebffde06 	bl	162cc <CSocket::~CSocket()>
   1eab0:	e1a00004 	mov	r0, r4
   1eab4:	eb00060e 	bl	202f4 <CTask::~CTask()>
   1eab8:	e1a00004 	mov	r0, r4
   1eabc:	e8bd8010 	pop	{r4, pc}
   1eac0:	0002f120 	.word	0x0002f120

0001eac4 <CDHCPClient::~CDHCPClient()>:
   1eac4:	e59f3034 	ldr	r3, [pc, #52]	; 1eb00 <CDHCPClient::~CDHCPClient()+0x3c>
   1eac8:	e3a02000 	mov	r2, #0
   1eacc:	e92d4010 	push	{r4, lr}
   1ead0:	e1a04000 	mov	r4, r0
   1ead4:	e5842050 	str	r2, [r4, #80]	; 0x50
   1ead8:	e2800058 	add	r0, r0, #88	; 0x58
   1eadc:	e5843000 	str	r3, [r4]
   1eae0:	ebffddf9 	bl	162cc <CSocket::~CSocket()>
   1eae4:	e1a00004 	mov	r0, r4
   1eae8:	eb000601 	bl	202f4 <CTask::~CTask()>
   1eaec:	e1a00004 	mov	r0, r4
   1eaf0:	e3a010bc 	mov	r1, #188	; 0xbc
   1eaf4:	eb000d2b 	bl	21fa8 <operator delete(void*, unsigned int)>
   1eaf8:	e1a00004 	mov	r0, r4
   1eafc:	e8bd8010 	pop	{r4, pc}
   1eb00:	0002f120 	.word	0x0002f120

0001eb04 <CDHCPClient::CDHCPClient(CNetSubSystem*)>:
   1eb04:	e92d4070 	push	{r4, r5, r6, lr}
   1eb08:	e1a05001 	mov	r5, r1
   1eb0c:	e3a01901 	mov	r1, #16384	; 0x4000
   1eb10:	e1a04000 	mov	r4, r0
   1eb14:	eb000646 	bl	20434 <CTask::CTask(unsigned int)>
   1eb18:	e59f3084 	ldr	r3, [pc, #132]	; 1eba4 <CDHCPClient::CDHCPClient(CNetSubSystem*)+0xa0>
   1eb1c:	e1a00005 	mov	r0, r5
   1eb20:	e5845050 	str	r5, [r4, #80]	; 0x50
   1eb24:	e5843000 	str	r3, [r4]
   1eb28:	ebffdd43 	bl	1603c <CNetSubSystem::GetConfig()>
   1eb2c:	e3a02011 	mov	r2, #17
   1eb30:	e1a01005 	mov	r1, r5
   1eb34:	e5840054 	str	r0, [r4, #84]	; 0x54
   1eb38:	e2840058 	add	r0, r4, #88	; 0x58
   1eb3c:	ebffdd8e 	bl	1617c <CSocket::CSocket(CNetSubSystem*, int)>
   1eb40:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   1eb44:	e3a02000 	mov	r2, #0
   1eb48:	e5842070 	str	r2, [r4, #112]	; 0x70
   1eb4c:	e1530002 	cmp	r3, r2
   1eb50:	0a00000c 	beq	1eb88 <CDHCPClient::CDHCPClient(CNetSubSystem*)+0x84>
   1eb54:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   1eb58:	e3530000 	cmp	r3, #0
   1eb5c:	0a000001 	beq	1eb68 <CDHCPClient::CDHCPClient(CNetSubSystem*)+0x64>
   1eb60:	e1a00004 	mov	r0, r4
   1eb64:	e8bd8070 	pop	{r4, r5, r6, pc}
   1eb68:	e3a02072 	mov	r2, #114	; 0x72
   1eb6c:	e30f115c 	movw	r1, #61788	; 0xf15c
   1eb70:	e30e0610 	movw	r0, #58896	; 0xe610
   1eb74:	e3401002 	movt	r1, #2
   1eb78:	e3400002 	movt	r0, #2
   1eb7c:	eb001807 	bl	24ba0 <assertion_failed>
   1eb80:	e1a00004 	mov	r0, r4
   1eb84:	e8bd8070 	pop	{r4, r5, r6, pc}
   1eb88:	e30f115c 	movw	r1, #61788	; 0xf15c
   1eb8c:	e30a0638 	movw	r0, #42552	; 0xa638
   1eb90:	e3401002 	movt	r1, #2
   1eb94:	e3400002 	movt	r0, #2
   1eb98:	e3a02071 	mov	r2, #113	; 0x71
   1eb9c:	eb0017ff 	bl	24ba0 <assertion_failed>
   1eba0:	eaffffeb 	b	1eb54 <CDHCPClient::CDHCPClient(CNetSubSystem*)+0x50>
   1eba4:	0002f120 	.word	0x0002f120

0001eba8 <CDHCPClient::IsBound() const>:
   1eba8:	e5900070 	ldr	r0, [r0, #112]	; 0x70
   1ebac:	e12fff1e 	bx	lr

0001ebb0 <CDHCPClient::HaltNetwork()>:
   1ebb0:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   1ebb4:	e3a02000 	mov	r2, #0
   1ebb8:	e5802070 	str	r2, [r0, #112]	; 0x70
   1ebbc:	e1530002 	cmp	r3, r2
   1ebc0:	0a000001 	beq	1ebcc <CDHCPClient::HaltNetwork()+0x1c>
   1ebc4:	e1a00003 	mov	r0, r3
   1ebc8:	eafffb30 	b	1d890 <CNetConfig::Reset()>
   1ebcc:	e92d4010 	push	{r4, lr}
   1ebd0:	e30f115c 	movw	r1, #61788	; 0xf15c
   1ebd4:	e1a04000 	mov	r4, r0
   1ebd8:	e3401002 	movt	r1, #2
   1ebdc:	e30e0610 	movw	r0, #58896	; 0xe610
   1ebe0:	e30021aa 	movw	r2, #426	; 0x1aa
   1ebe4:	e3400002 	movt	r0, #2
   1ebe8:	eb0017ec 	bl	24ba0 <assertion_failed>
   1ebec:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   1ebf0:	e8bd4010 	pop	{r4, lr}
   1ebf4:	e1a00003 	mov	r0, r3
   1ebf8:	eafffb24 	b	1d890 <CNetConfig::Reset()>

0001ebfc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   1ebfc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ec00:	e24ddf8b 	sub	sp, sp, #556	; 0x22c
   1ec04:	e1a04000 	mov	r4, r0
   1ec08:	e1a05001 	mov	r5, r1
   1ec0c:	e1a06002 	mov	r6, r2
   1ec10:	e3a01000 	mov	r1, #0
   1ec14:	e3a02f89 	mov	r2, #548	; 0x224
   1ec18:	e28d0004 	add	r0, sp, #4
   1ec1c:	eb001051 	bl	22d68 <memset>
   1ec20:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   1ec24:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   1ec28:	e3082263 	movw	r2, #33379	; 0x8263
   1ec2c:	e3530000 	cmp	r3, #0
   1ec30:	e5941094 	ldr	r1, [r4, #148]	; 0x94
   1ec34:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   1ec38:	e3462353 	movt	r2, #25427	; 0x6353
   1ec3c:	03a0c000 	moveq	ip, #0
   1ec40:	13a0c080 	movne	ip, #128	; 0x80
   1ec44:	e3500000 	cmp	r0, #0
   1ec48:	e58d1010 	str	r1, [sp, #16]
   1ec4c:	e58d3008 	str	r3, [sp, #8]
   1ec50:	e3a01006 	mov	r1, #6
   1ec54:	e3a03001 	mov	r3, #1
   1ec58:	e58d20f0 	str	r2, [sp, #240]	; 0xf0
   1ec5c:	e5cd3004 	strb	r3, [sp, #4]
   1ec60:	e5cd3005 	strb	r3, [sp, #5]
   1ec64:	e5cd1006 	strb	r1, [sp, #6]
   1ec68:	e1cdc0be 	strh	ip, [sp, #14]
   1ec6c:	0a000025 	beq	1ed08 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x10c>
   1ec70:	ebffdcf2 	bl	16040 <CNetSubSystem::GetNetDeviceLayer()>
   1ec74:	ebffe802 	bl	18c84 <CNetDeviceLayer::GetMACAddress() const>
   1ec78:	e2507000 	subs	r7, r0, #0
   1ec7c:	0a000029 	beq	1ed28 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x12c>
   1ec80:	e1a00007 	mov	r0, r7
   1ec84:	e28d1020 	add	r1, sp, #32
   1ec88:	ebffd8a4 	bl	14f20 <CMACAddress::CopyTo(unsigned char*) const>
   1ec8c:	e3550000 	cmp	r5, #0
   1ec90:	0a000015 	beq	1ecec <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xf0>
   1ec94:	e3560f4d 	cmp	r6, #308	; 0x134
   1ec98:	9a000005 	bls	1ecb4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xb8>
   1ec9c:	e30f115c 	movw	r1, #61788	; 0xf15c
   1eca0:	e30f017c 	movw	r0, #61820	; 0xf17c
   1eca4:	e3401002 	movt	r1, #2
   1eca8:	e3400002 	movt	r0, #2
   1ecac:	e300223d 	movw	r2, #573	; 0x23d
   1ecb0:	eb0017ba 	bl	24ba0 <assertion_failed>
   1ecb4:	e1a02006 	mov	r2, r6
   1ecb8:	e1a01005 	mov	r1, r5
   1ecbc:	e28d00f4 	add	r0, sp, #244	; 0xf4
   1ecc0:	eb001140 	bl	231c8 <memcpy>
   1ecc4:	e28d1004 	add	r1, sp, #4
   1ecc8:	e2840058 	add	r0, r4, #88	; 0x58
   1eccc:	e3a03000 	mov	r3, #0
   1ecd0:	e3a02f89 	mov	r2, #548	; 0x224
   1ecd4:	ebffde55 	bl	16630 <CSocket::Send(void const*, unsigned int, int)>
   1ecd8:	e2400f89 	sub	r0, r0, #548	; 0x224
   1ecdc:	e16f0f10 	clz	r0, r0
   1ece0:	e1a002a0 	lsr	r0, r0, #5
   1ece4:	e28ddf8b 	add	sp, sp, #556	; 0x22c
   1ece8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ecec:	e30f115c 	movw	r1, #61788	; 0xf15c
   1ecf0:	e30f016c 	movw	r0, #61804	; 0xf16c
   1ecf4:	e3401002 	movt	r1, #2
   1ecf8:	e3400002 	movt	r0, #2
   1ecfc:	e3a02f8f 	mov	r2, #572	; 0x23c
   1ed00:	eb0017a6 	bl	24ba0 <assertion_failed>
   1ed04:	eaffffe2 	b	1ec94 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x98>
   1ed08:	e30f115c 	movw	r1, #61788	; 0xf15c
   1ed0c:	e30a0638 	movw	r0, #42552	; 0xa638
   1ed10:	e3401002 	movt	r1, #2
   1ed14:	e3400002 	movt	r0, #2
   1ed18:	e3002237 	movw	r2, #567	; 0x237
   1ed1c:	eb00179f 	bl	24ba0 <assertion_failed>
   1ed20:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   1ed24:	eaffffd1 	b	1ec70 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x74>
   1ed28:	e30f115c 	movw	r1, #61788	; 0xf15c
   1ed2c:	e30e0924 	movw	r0, #59684	; 0xe924
   1ed30:	e3401002 	movt	r1, #2
   1ed34:	e3400002 	movt	r0, #2
   1ed38:	e3002239 	movw	r2, #569	; 0x239
   1ed3c:	eb001797 	bl	24ba0 <assertion_failed>
   1ed40:	eaffffce 	b	1ec80 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x84>

0001ed44 <CDHCPClient::SendDiscover()>:
   1ed44:	e3a01000 	mov	r1, #0
   1ed48:	e3a0200c 	mov	r2, #12
   1ed4c:	e5801094 	str	r1, [r0, #148]	; 0x94
   1ed50:	e59f1000 	ldr	r1, [pc]	; 1ed58 <CDHCPClient::SendDiscover()+0x14>
   1ed54:	eaffffa8 	b	1ebfc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   1ed58:	0002f12c 	.word	0x0002f12c

0001ed5c <CDHCPClient::CheckConfig()>:
   1ed5c:	e5903098 	ldr	r3, [r0, #152]	; 0x98
   1ed60:	e92d4030 	push	{r4, r5, lr}
   1ed64:	e3530000 	cmp	r3, #0
   1ed68:	e24dd014 	sub	sp, sp, #20
   1ed6c:	e1a04000 	mov	r4, r0
   1ed70:	0a00002f 	beq	1ee34 <CDHCPClient::CheckConfig()+0xd8>
   1ed74:	e590209c 	ldr	r2, [r0, #156]	; 0x9c
   1ed78:	e3520000 	cmp	r2, #0
   1ed7c:	0a00002c 	beq	1ee34 <CDHCPClient::CheckConfig()+0xd8>
   1ed80:	e59010a0 	ldr	r1, [r0, #160]	; 0xa0
   1ed84:	e3510000 	cmp	r1, #0
   1ed88:	0a000029 	beq	1ee34 <CDHCPClient::CheckConfig()+0xd8>
   1ed8c:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
   1ed90:	e3500000 	cmp	r0, #0
   1ed94:	0a000026 	beq	1ee34 <CDHCPClient::CheckConfig()+0xd8>
   1ed98:	e0233001 	eor	r3, r3, r1
   1ed9c:	e1130002 	tst	r3, r2
   1eda0:	1a000037 	bne	1ee84 <CDHCPClient::CheckConfig()+0x128>
   1eda4:	e59450a8 	ldr	r5, [r4, #168]	; 0xa8
   1eda8:	e3550000 	cmp	r5, #0
   1edac:	0a00003b 	beq	1eea0 <CDHCPClient::CheckConfig()+0x144>
   1edb0:	e59420b4 	ldr	r2, [r4, #180]	; 0xb4
   1edb4:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   1edb8:	e3520000 	cmp	r2, #0
   1edbc:	1a00002b 	bne	1ee70 <CDHCPClient::CheckConfig()+0x114>
   1edc0:	e3530000 	cmp	r3, #0
   1edc4:	01a020a5 	lsreq	r2, r5, #1
   1edc8:	004531a5 	subeq	r3, r5, r5, lsr #3
   1edcc:	10652083 	rsbne	r2, r5, r3, lsl #1
   1edd0:	058420b4 	streq	r2, [r4, #180]	; 0xb4
   1edd4:	058430b8 	streq	r3, [r4, #184]	; 0xb8
   1edd8:	158420b4 	strne	r2, [r4, #180]	; 0xb4
   1eddc:	e1550003 	cmp	r5, r3
   1ede0:	23a00000 	movcs	r0, #0
   1ede4:	33a00001 	movcc	r0, #1
   1ede8:	e1520003 	cmp	r2, r3
   1edec:	83800001 	orrhi	r0, r0, #1
   1edf0:	e3500000 	cmp	r0, #0
   1edf4:	03a00001 	moveq	r0, #1
   1edf8:	0a00001a 	beq	1ee68 <CDHCPClient::CheckConfig()+0x10c>
   1edfc:	eb0018e9 	bl	251a8 <CLogger::Get()>
   1ee00:	e59420a8 	ldr	r2, [r4, #168]	; 0xa8
   1ee04:	e594c0b8 	ldr	ip, [r4, #184]	; 0xb8
   1ee08:	e30f3218 	movw	r3, #61976	; 0xf218
   1ee0c:	e59410b4 	ldr	r1, [r4, #180]	; 0xb4
   1ee10:	e3403002 	movt	r3, #2
   1ee14:	e58d2008 	str	r2, [sp, #8]
   1ee18:	e3a02002 	mov	r2, #2
   1ee1c:	e88d1002 	stm	sp, {r1, ip}
   1ee20:	e59f1098 	ldr	r1, [pc, #152]	; 1eec0 <CDHCPClient::CheckConfig()+0x164>
   1ee24:	eb0019bc 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ee28:	e3a00000 	mov	r0, #0
   1ee2c:	e28dd014 	add	sp, sp, #20
   1ee30:	e8bd8030 	pop	{r4, r5, pc}
   1ee34:	eb0018db 	bl	251a8 <CLogger::Get()>
   1ee38:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   1ee3c:	e59450a4 	ldr	r5, [r4, #164]	; 0xa4
   1ee40:	e30f31a4 	movw	r3, #61860	; 0xf1a4
   1ee44:	e594e0a0 	ldr	lr, [r4, #160]	; 0xa0
   1ee48:	e3403002 	movt	r3, #2
   1ee4c:	e594c09c 	ldr	ip, [r4, #156]	; 0x9c
   1ee50:	e3a02002 	mov	r2, #2
   1ee54:	e58d500c 	str	r5, [sp, #12]
   1ee58:	e88d5002 	stm	sp, {r1, ip, lr}
   1ee5c:	e59f105c 	ldr	r1, [pc, #92]	; 1eec0 <CDHCPClient::CheckConfig()+0x164>
   1ee60:	eb0019ad 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ee64:	e3a00000 	mov	r0, #0
   1ee68:	e28dd014 	add	sp, sp, #20
   1ee6c:	e8bd8030 	pop	{r4, r5, pc}
   1ee70:	e3530000 	cmp	r3, #0
   1ee74:	00453002 	subeq	r3, r5, r2
   1ee78:	008230a3 	addeq	r3, r2, r3, lsr #1
   1ee7c:	058430b8 	streq	r3, [r4, #184]	; 0xb8
   1ee80:	eaffffd5 	b	1eddc <CDHCPClient::CheckConfig()+0x80>
   1ee84:	eb0018c7 	bl	251a8 <CLogger::Get()>
   1ee88:	e30f31d4 	movw	r3, #61908	; 0xf1d4
   1ee8c:	e594209c 	ldr	r2, [r4, #156]	; 0x9c
   1ee90:	e3403002 	movt	r3, #2
   1ee94:	e594c0a0 	ldr	ip, [r4, #160]	; 0xa0
   1ee98:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   1ee9c:	eaffffdc 	b	1ee14 <CDHCPClient::CheckConfig()+0xb8>
   1eea0:	eb0018c0 	bl	251a8 <CLogger::Get()>
   1eea4:	e30f3200 	movw	r3, #61952	; 0xf200
   1eea8:	e3a02002 	mov	r2, #2
   1eeac:	e3403002 	movt	r3, #2
   1eeb0:	e59f1008 	ldr	r1, [pc, #8]	; 1eec0 <CDHCPClient::CheckConfig()+0x164>
   1eeb4:	eb001998 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1eeb8:	e1a00005 	mov	r0, r5
   1eebc:	eaffffe9 	b	1ee68 <CDHCPClient::CheckConfig()+0x10c>
   1eec0:	0002f138 	.word	0x0002f138

0001eec4 <CDHCPClient::GetUnaligned(void const*)>:
   1eec4:	e92d4010 	push	{r4, lr}
   1eec8:	e2504000 	subs	r4, r0, #0
   1eecc:	0a000001 	beq	1eed8 <CDHCPClient::GetUnaligned(void const*)+0x14>
   1eed0:	e5940000 	ldr	r0, [r4]
   1eed4:	e8bd8010 	pop	{r4, pc}
   1eed8:	e300233f 	movw	r2, #831	; 0x33f
   1eedc:	e30f115c 	movw	r1, #61788	; 0xf15c
   1eee0:	e30f0238 	movw	r0, #62008	; 0xf238
   1eee4:	e3401002 	movt	r1, #2
   1eee8:	e3400002 	movt	r0, #2
   1eeec:	eb00172b 	bl	24ba0 <assertion_failed>
   1eef0:	e5940000 	ldr	r0, [r4]
   1eef4:	e8bd8010 	pop	{r4, pc}

0001eef8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   1eef8:	e92d4070 	push	{r4, r5, r6, lr}
   1eefc:	e2514000 	subs	r4, r1, #0
   1ef00:	e1a06000 	mov	r6, r0
   1ef04:	e1a05002 	mov	r5, r2
   1ef08:	0a000080 	beq	1f110 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x218>
   1ef0c:	e0845005 	add	r5, r4, r5
   1ef10:	e2840002 	add	r0, r4, #2
   1ef14:	e1550000 	cmp	r5, r0
   1ef18:	38bd8070 	popcc	{r4, r5, r6, pc}
   1ef1c:	e5d43000 	ldrb	r3, [r4]
   1ef20:	e3530034 	cmp	r3, #52	; 0x34
   1ef24:	0a000036 	beq	1f004 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x10c>
   1ef28:	8a00000d 	bhi	1ef64 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x6c>
   1ef2c:	e3530003 	cmp	r3, #3
   1ef30:	0a000045 	beq	1f04c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x154>
   1ef34:	8a00001b 	bhi	1efa8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xb0>
   1ef38:	e3530000 	cmp	r3, #0
   1ef3c:	02844001 	addeq	r4, r4, #1
   1ef40:	0afffff2 	beq	1ef10 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   1ef44:	e3530001 	cmp	r3, #1
   1ef48:	1a000029 	bne	1eff4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xfc>
   1ef4c:	e5d43001 	ldrb	r3, [r4, #1]
   1ef50:	e3530004 	cmp	r3, #4
   1ef54:	0a000066 	beq	1f0f4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1fc>
   1ef58:	e2833002 	add	r3, r3, #2
   1ef5c:	e0844003 	add	r4, r4, r3
   1ef60:	eaffffea 	b	1ef10 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   1ef64:	e353003a 	cmp	r3, #58	; 0x3a
   1ef68:	0a00004c 	beq	1f0a0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1a8>
   1ef6c:	8a00001c 	bhi	1efe4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xec>
   1ef70:	e3530035 	cmp	r3, #53	; 0x35
   1ef74:	0a000041 	beq	1f080 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x188>
   1ef78:	e3530036 	cmp	r3, #54	; 0x36
   1ef7c:	1a00001c 	bne	1eff4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xfc>
   1ef80:	e5d43001 	ldrb	r3, [r4, #1]
   1ef84:	e3530004 	cmp	r3, #4
   1ef88:	1afffff2 	bne	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1ef8c:	e2842006 	add	r2, r4, #6
   1ef90:	e1550002 	cmp	r5, r2
   1ef94:	3affffef 	bcc	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1ef98:	ebffffc9 	bl	1eec4 <CDHCPClient::GetUnaligned(void const*)>
   1ef9c:	e58600b0 	str	r0, [r6, #176]	; 0xb0
   1efa0:	e5d43001 	ldrb	r3, [r4, #1]
   1efa4:	eaffffeb 	b	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1efa8:	e3530006 	cmp	r3, #6
   1efac:	0a000046 	beq	1f0cc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1d4>
   1efb0:	e3530033 	cmp	r3, #51	; 0x33
   1efb4:	1a00000e 	bne	1eff4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xfc>
   1efb8:	e5d43001 	ldrb	r3, [r4, #1]
   1efbc:	e3530004 	cmp	r3, #4
   1efc0:	1affffe4 	bne	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1efc4:	e2842006 	add	r2, r4, #6
   1efc8:	e1550002 	cmp	r5, r2
   1efcc:	3affffe1 	bcc	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1efd0:	ebffffbb 	bl	1eec4 <CDHCPClient::GetUnaligned(void const*)>
   1efd4:	e6bf0f30 	rev	r0, r0
   1efd8:	e58600a8 	str	r0, [r6, #168]	; 0xa8
   1efdc:	e5d43001 	ldrb	r3, [r4, #1]
   1efe0:	eaffffdc 	b	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1efe4:	e353003b 	cmp	r3, #59	; 0x3b
   1efe8:	0a00000d 	beq	1f024 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   1efec:	e35300ff 	cmp	r3, #255	; 0xff
   1eff0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1eff4:	e5d43001 	ldrb	r3, [r4, #1]
   1eff8:	e2833002 	add	r3, r3, #2
   1effc:	e0844003 	add	r4, r4, r3
   1f000:	eaffffc2 	b	1ef10 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   1f004:	e5d43001 	ldrb	r3, [r4, #1]
   1f008:	e3530001 	cmp	r3, #1
   1f00c:	1affffd1 	bne	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f010:	e2842003 	add	r2, r4, #3
   1f014:	e1550002 	cmp	r5, r2
   1f018:	25d42002 	ldrbcs	r2, [r4, #2]
   1f01c:	25c620ac 	strbcs	r2, [r6, #172]	; 0xac
   1f020:	eaffffcc 	b	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f024:	e5d43001 	ldrb	r3, [r4, #1]
   1f028:	e3530004 	cmp	r3, #4
   1f02c:	1affffc9 	bne	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f030:	e2842006 	add	r2, r4, #6
   1f034:	e1550002 	cmp	r5, r2
   1f038:	3affffc6 	bcc	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f03c:	ebffffa0 	bl	1eec4 <CDHCPClient::GetUnaligned(void const*)>
   1f040:	e6bf0f30 	rev	r0, r0
   1f044:	e58600b8 	str	r0, [r6, #184]	; 0xb8
   1f048:	eaffffe9 	b	1eff4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xfc>
   1f04c:	e5d43001 	ldrb	r3, [r4, #1]
   1f050:	e3530003 	cmp	r3, #3
   1f054:	daffffbf 	ble	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f058:	e2842006 	add	r2, r4, #6
   1f05c:	e1550002 	cmp	r5, r2
   1f060:	3affffbc 	bcc	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f064:	e59620a0 	ldr	r2, [r6, #160]	; 0xa0
   1f068:	e3520000 	cmp	r2, #0
   1f06c:	1affffb9 	bne	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f070:	ebffff93 	bl	1eec4 <CDHCPClient::GetUnaligned(void const*)>
   1f074:	e58600a0 	str	r0, [r6, #160]	; 0xa0
   1f078:	e5d43001 	ldrb	r3, [r4, #1]
   1f07c:	eaffffb5 	b	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f080:	e5d43001 	ldrb	r3, [r4, #1]
   1f084:	e3530001 	cmp	r3, #1
   1f088:	1affffb2 	bne	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f08c:	e2842003 	add	r2, r4, #3
   1f090:	e1550002 	cmp	r5, r2
   1f094:	25d42002 	ldrbcs	r2, [r4, #2]
   1f098:	25c620ad 	strbcs	r2, [r6, #173]	; 0xad
   1f09c:	eaffffad 	b	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0a0:	e5d43001 	ldrb	r3, [r4, #1]
   1f0a4:	e3530004 	cmp	r3, #4
   1f0a8:	1affffaa 	bne	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0ac:	e2842006 	add	r2, r4, #6
   1f0b0:	e1550002 	cmp	r5, r2
   1f0b4:	3affffa7 	bcc	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0b8:	ebffff81 	bl	1eec4 <CDHCPClient::GetUnaligned(void const*)>
   1f0bc:	e6bf0f30 	rev	r0, r0
   1f0c0:	e58600b4 	str	r0, [r6, #180]	; 0xb4
   1f0c4:	e5d43001 	ldrb	r3, [r4, #1]
   1f0c8:	eaffffa2 	b	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0cc:	e5d43001 	ldrb	r3, [r4, #1]
   1f0d0:	e3530003 	cmp	r3, #3
   1f0d4:	daffff9f 	ble	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0d8:	e2842006 	add	r2, r4, #6
   1f0dc:	e1550002 	cmp	r5, r2
   1f0e0:	3affff9c 	bcc	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0e4:	ebffff76 	bl	1eec4 <CDHCPClient::GetUnaligned(void const*)>
   1f0e8:	e58600a4 	str	r0, [r6, #164]	; 0xa4
   1f0ec:	e5d43001 	ldrb	r3, [r4, #1]
   1f0f0:	eaffff98 	b	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0f4:	e2842006 	add	r2, r4, #6
   1f0f8:	e1550002 	cmp	r5, r2
   1f0fc:	3affff95 	bcc	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f100:	ebffff6f 	bl	1eec4 <CDHCPClient::GetUnaligned(void const*)>
   1f104:	e586009c 	str	r0, [r6, #156]	; 0x9c
   1f108:	e5d43001 	ldrb	r3, [r4, #1]
   1f10c:	eaffff91 	b	1ef58 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f110:	e30f115c 	movw	r1, #61788	; 0xf15c
   1f114:	e30f016c 	movw	r0, #61804	; 0xf16c
   1f118:	e3401002 	movt	r1, #2
   1f11c:	e3400002 	movt	r0, #2
   1f120:	e3a02fa3 	mov	r2, #652	; 0x28c
   1f124:	eb00169d 	bl	24ba0 <assertion_failed>
   1f128:	eaffff77 	b	1ef0c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14>

0001f12c <CDHCPClient::ReceiveMessage()>:
   1f12c:	e92d4070 	push	{r4, r5, r6, lr}
   1f130:	e24dde23 	sub	sp, sp, #560	; 0x230
   1f134:	e1a04000 	mov	r4, r0
   1f138:	e3a03040 	mov	r3, #64	; 0x40
   1f13c:	e2800058 	add	r0, r0, #88	; 0x58
   1f140:	e3a02f89 	mov	r2, #548	; 0x224
   1f144:	e28d100c 	add	r1, sp, #12
   1f148:	ebffdd63 	bl	166dc <CSocket::Receive(void*, unsigned int, int)>
   1f14c:	e35000ef 	cmp	r0, #239	; 0xef
   1f150:	da000002 	ble	1f160 <CDHCPClient::ReceiveMessage()+0x34>
   1f154:	e5dd300c 	ldrb	r3, [sp, #12]
   1f158:	e3530002 	cmp	r3, #2
   1f15c:	0a000003 	beq	1f170 <CDHCPClient::ReceiveMessage()+0x44>
   1f160:	e3a05000 	mov	r5, #0
   1f164:	e1a00005 	mov	r0, r5
   1f168:	e28dde23 	add	sp, sp, #560	; 0x230
   1f16c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f170:	e5dd300d 	ldrb	r3, [sp, #13]
   1f174:	e3530001 	cmp	r3, #1
   1f178:	1afffff8 	bne	1f160 <CDHCPClient::ReceiveMessage()+0x34>
   1f17c:	e5dd300e 	ldrb	r3, [sp, #14]
   1f180:	e3530006 	cmp	r3, #6
   1f184:	1afffff5 	bne	1f160 <CDHCPClient::ReceiveMessage()+0x34>
   1f188:	e59d2010 	ldr	r2, [sp, #16]
   1f18c:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   1f190:	e1520003 	cmp	r2, r3
   1f194:	1afffff1 	bne	1f160 <CDHCPClient::ReceiveMessage()+0x34>
   1f198:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   1f19c:	e3083263 	movw	r3, #33379	; 0x8263
   1f1a0:	e3463353 	movt	r3, #25427	; 0x6353
   1f1a4:	e1520003 	cmp	r2, r3
   1f1a8:	1affffec 	bne	1f160 <CDHCPClient::ReceiveMessage()+0x34>
   1f1ac:	e1a05000 	mov	r5, r0
   1f1b0:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   1f1b4:	e3500000 	cmp	r0, #0
   1f1b8:	0a000032 	beq	1f288 <CDHCPClient::ReceiveMessage()+0x15c>
   1f1bc:	ebffdb9f 	bl	16040 <CNetSubSystem::GetNetDeviceLayer()>
   1f1c0:	ebffe6af 	bl	18c84 <CNetDeviceLayer::GetMACAddress() const>
   1f1c4:	e2506000 	subs	r6, r0, #0
   1f1c8:	0a000027 	beq	1f26c <CDHCPClient::ReceiveMessage()+0x140>
   1f1cc:	e28d1028 	add	r1, sp, #40	; 0x28
   1f1d0:	e1a0000d 	mov	r0, sp
   1f1d4:	ebffd736 	bl	14eb4 <CMACAddress::CMACAddress(unsigned char const*)>
   1f1d8:	e1a01006 	mov	r1, r6
   1f1dc:	e1a0000d 	mov	r0, sp
   1f1e0:	ebffd71c 	bl	14e58 <CMACAddress::operator!=(CMACAddress const&) const>
   1f1e4:	e2503000 	subs	r3, r0, #0
   1f1e8:	13a05000 	movne	r5, #0
   1f1ec:	0a000002 	beq	1f1fc <CDHCPClient::ReceiveMessage()+0xd0>
   1f1f0:	e1a0000d 	mov	r0, sp
   1f1f4:	ebffd6f4 	bl	14dcc <CMACAddress::~CMACAddress()>
   1f1f8:	eaffffd9 	b	1f164 <CDHCPClient::ReceiveMessage()+0x38>
   1f1fc:	e59dc01c 	ldr	ip, [sp, #28]
   1f200:	e24520f0 	sub	r2, r5, #240	; 0xf0
   1f204:	e584309c 	str	r3, [r4, #156]	; 0x9c
   1f208:	e28d10fc 	add	r1, sp, #252	; 0xfc
   1f20c:	e58430a0 	str	r3, [r4, #160]	; 0xa0
   1f210:	e1a00004 	mov	r0, r4
   1f214:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   1f218:	e58430a8 	str	r3, [r4, #168]	; 0xa8
   1f21c:	e5c430ac 	strb	r3, [r4, #172]	; 0xac
   1f220:	e5c430ad 	strb	r3, [r4, #173]	; 0xad
   1f224:	e58430b0 	str	r3, [r4, #176]	; 0xb0
   1f228:	e58430b4 	str	r3, [r4, #180]	; 0xb4
   1f22c:	e58430b8 	str	r3, [r4, #184]	; 0xb8
   1f230:	e584c098 	str	ip, [r4, #152]	; 0x98
   1f234:	ebffff2f 	bl	1eef8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   1f238:	e5d450ac 	ldrb	r5, [r4, #172]	; 0xac
   1f23c:	e3550002 	cmp	r5, #2
   1f240:	0a000022 	beq	1f2d0 <CDHCPClient::ReceiveMessage()+0x1a4>
   1f244:	e3550003 	cmp	r5, #3
   1f248:	0a000016 	beq	1f2a8 <CDHCPClient::ReceiveMessage()+0x17c>
   1f24c:	e3550001 	cmp	r5, #1
   1f250:	13a05001 	movne	r5, #1
   1f254:	1affffe5 	bne	1f1f0 <CDHCPClient::ReceiveMessage()+0xc4>
   1f258:	e1a00004 	mov	r0, r4
   1f25c:	e3a02080 	mov	r2, #128	; 0x80
   1f260:	e28d1078 	add	r1, sp, #120	; 0x78
   1f264:	ebffff23 	bl	1eef8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   1f268:	eaffffe0 	b	1f1f0 <CDHCPClient::ReceiveMessage()+0xc4>
   1f26c:	e30f115c 	movw	r1, #61788	; 0xf15c
   1f270:	e30e0864 	movw	r0, #59492	; 0xe864
   1f274:	e3401002 	movt	r1, #2
   1f278:	e3400002 	movt	r0, #2
   1f27c:	e3a02f97 	mov	r2, #604	; 0x25c
   1f280:	eb001646 	bl	24ba0 <assertion_failed>
   1f284:	eaffffd0 	b	1f1cc <CDHCPClient::ReceiveMessage()+0xa0>
   1f288:	e30f115c 	movw	r1, #61788	; 0xf15c
   1f28c:	e30a0638 	movw	r0, #42552	; 0xa638
   1f290:	e3401002 	movt	r1, #2
   1f294:	e3400002 	movt	r0, #2
   1f298:	e300225a 	movw	r2, #602	; 0x25a
   1f29c:	eb00163f 	bl	24ba0 <assertion_failed>
   1f2a0:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   1f2a4:	eaffffc4 	b	1f1bc <CDHCPClient::ReceiveMessage()+0x90>
   1f2a8:	e28d1078 	add	r1, sp, #120	; 0x78
   1f2ac:	e1a00004 	mov	r0, r4
   1f2b0:	e3a02080 	mov	r2, #128	; 0x80
   1f2b4:	e3a05001 	mov	r5, #1
   1f2b8:	ebffff0e 	bl	1eef8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   1f2bc:	e1a00004 	mov	r0, r4
   1f2c0:	e3a02040 	mov	r2, #64	; 0x40
   1f2c4:	e28d1038 	add	r1, sp, #56	; 0x38
   1f2c8:	ebffff0a 	bl	1eef8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   1f2cc:	eaffffc7 	b	1f1f0 <CDHCPClient::ReceiveMessage()+0xc4>
   1f2d0:	e1a00004 	mov	r0, r4
   1f2d4:	e3a02040 	mov	r2, #64	; 0x40
   1f2d8:	e28d1038 	add	r1, sp, #56	; 0x38
   1f2dc:	e3a05001 	mov	r5, #1
   1f2e0:	ebffff04 	bl	1eef8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   1f2e4:	eaffffc1 	b	1f1f0 <CDHCPClient::ReceiveMessage()+0xc4>

0001f2e8 <CDHCPClient::GetXID() const>:
   1f2e8:	e92d4010 	push	{r4, lr}
   1f2ec:	e1a04000 	mov	r4, r0
   1f2f0:	e5900050 	ldr	r0, [r0, #80]	; 0x50
   1f2f4:	e3500000 	cmp	r0, #0
   1f2f8:	0a000012 	beq	1f348 <CDHCPClient::GetXID() const+0x60>
   1f2fc:	ebffdb4f 	bl	16040 <CNetSubSystem::GetNetDeviceLayer()>
   1f300:	ebffe65f 	bl	18c84 <CNetDeviceLayer::GetMACAddress() const>
   1f304:	ebffd6f8 	bl	14eec <CMACAddress::Get() const>
   1f308:	e2504000 	subs	r4, r0, #0
   1f30c:	0a000006 	beq	1f32c <CDHCPClient::GetXID() const+0x44>
   1f310:	eb000e86 	bl	22d30 <CTimer::Get()>
   1f314:	e2840002 	add	r0, r4, #2
   1f318:	ebfffee9 	bl	1eec4 <CDHCPClient::GetUnaligned(void const*)>
   1f31c:	e1a04000 	mov	r4, r0
   1f320:	eb000c2e 	bl	223e0 <CTimer::GetClockTicks()>
   1f324:	e0840000 	add	r0, r4, r0
   1f328:	e8bd8010 	pop	{r4, pc}
   1f32c:	e30f115c 	movw	r1, #61788	; 0xf15c
   1f330:	e30e0924 	movw	r0, #59684	; 0xe924
   1f334:	e3401002 	movt	r1, #2
   1f338:	e3400002 	movt	r0, #2
   1f33c:	e3002337 	movw	r2, #823	; 0x337
   1f340:	eb001616 	bl	24ba0 <assertion_failed>
   1f344:	eafffff1 	b	1f310 <CDHCPClient::GetXID() const+0x28>
   1f348:	e30f115c 	movw	r1, #61788	; 0xf15c
   1f34c:	e30a0638 	movw	r0, #42552	; 0xa638
   1f350:	e3401002 	movt	r1, #2
   1f354:	e3400002 	movt	r0, #2
   1f358:	e3002335 	movw	r2, #821	; 0x335
   1f35c:	eb00160f 	bl	24ba0 <assertion_failed>
   1f360:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   1f364:	eaffffe4 	b	1f2fc <CDHCPClient::GetXID() const+0x14>

0001f368 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   1f368:	e92d4070 	push	{r4, r5, r6, lr}
   1f36c:	e2505000 	subs	r5, r0, #0
   1f370:	e1a04001 	mov	r4, r1
   1f374:	0a000007 	beq	1f398 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x30>
   1f378:	e1a02424 	lsr	r2, r4, #8
   1f37c:	e1a03824 	lsr	r3, r4, #16
   1f380:	e5c54000 	strb	r4, [r5]
   1f384:	e1a04c24 	lsr	r4, r4, #24
   1f388:	e5c52001 	strb	r2, [r5, #1]
   1f38c:	e5c53002 	strb	r3, [r5, #2]
   1f390:	e5c54003 	strb	r4, [r5, #3]
   1f394:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f398:	e30f115c 	movw	r1, #61788	; 0xf15c
   1f39c:	e30f0238 	movw	r0, #62008	; 0xf238
   1f3a0:	e3401002 	movt	r1, #2
   1f3a4:	e3400002 	movt	r0, #2
   1f3a8:	e3a02fd3 	mov	r2, #844	; 0x34c
   1f3ac:	eb0015fb 	bl	24ba0 <assertion_failed>
   1f3b0:	eafffff0 	b	1f378 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x10>

0001f3b4 <CDHCPClient::SendRequest(unsigned int)>:
   1f3b4:	e3510000 	cmp	r1, #0
   1f3b8:	e5801094 	str	r1, [r0, #148]	; 0x94
   1f3bc:	0a000002 	beq	1f3cc <CDHCPClient::SendRequest(unsigned int)+0x18>
   1f3c0:	e3a0200c 	mov	r2, #12
   1f3c4:	e59f1038 	ldr	r1, [pc, #56]	; 1f404 <CDHCPClient::SendRequest(unsigned int)+0x50>
   1f3c8:	eafffe0b 	b	1ebfc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   1f3cc:	e92d4010 	push	{r4, lr}
   1f3d0:	e1a04000 	mov	r4, r0
   1f3d4:	e590107c 	ldr	r1, [r0, #124]	; 0x7c
   1f3d8:	e59f0028 	ldr	r0, [pc, #40]	; 1f408 <CDHCPClient::SendRequest(unsigned int)+0x54>
   1f3dc:	ebffffe1 	bl	1f368 <CDHCPClient::SetUnaligned(void*, unsigned int)>
   1f3e0:	e5941078 	ldr	r1, [r4, #120]	; 0x78
   1f3e4:	e59f0020 	ldr	r0, [pc, #32]	; 1f40c <CDHCPClient::SendRequest(unsigned int)+0x58>
   1f3e8:	ebffffde 	bl	1f368 <CDHCPClient::SetUnaligned(void*, unsigned int)>
   1f3ec:	e1a00004 	mov	r0, r4
   1f3f0:	e3011b54 	movw	r1, #6996	; 0x1b54
   1f3f4:	e3a02018 	mov	r2, #24
   1f3f8:	e3401003 	movt	r1, #3
   1f3fc:	e8bd4010 	pop	{r4, lr}
   1f400:	eafffdfd 	b	1ebfc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   1f404:	0002f140 	.word	0x0002f140
   1f408:	00031b59 	.word	0x00031b59
   1f40c:	00031b5f 	.word	0x00031b5f

0001f410 <CDHCPClient::SendAndReceive(int, unsigned int)>:
   1f410:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f414:	e30f927c 	movw	r9, #62076	; 0xf27c
   1f418:	e59f817c 	ldr	r8, [pc, #380]	; 1f59c <CDHCPClient::SendAndReceive(int, unsigned int)+0x18c>
   1f41c:	e24dd014 	sub	sp, sp, #20
   1f420:	e3409002 	movt	r9, #2
   1f424:	e1a04000 	mov	r4, r0
   1f428:	e288a010 	add	sl, r8, #16
   1f42c:	e248b014 	sub	fp, r8, #20
   1f430:	e1a07001 	mov	r7, r1
   1f434:	e58d200c 	str	r2, [sp, #12]
   1f438:	e3570000 	cmp	r7, #0
   1f43c:	0a00003f 	beq	1f540 <CDHCPClient::SendAndReceive(int, unsigned int)+0x130>
   1f440:	e59d100c 	ldr	r1, [sp, #12]
   1f444:	e1a00004 	mov	r0, r4
   1f448:	ebffffd9 	bl	1f3b4 <CDHCPClient::SendRequest(unsigned int)>
   1f44c:	e16f0f10 	clz	r0, r0
   1f450:	e1a002a0 	lsr	r0, r0, #5
   1f454:	e3500000 	cmp	r0, #0
   1f458:	1a000040 	bne	1f560 <CDHCPClient::SendAndReceive(int, unsigned int)+0x150>
   1f45c:	eb000e33 	bl	22d30 <CTimer::Get()>
   1f460:	eb000be2 	bl	223f0 <CTimer::GetTicks() const>
   1f464:	e4985004 	ldr	r5, [r8], #4
   1f468:	e1a06000 	mov	r6, r0
   1f46c:	ea000004 	b	1f484 <CDHCPClient::SendAndReceive(int, unsigned int)+0x74>
   1f470:	e2433005 	sub	r3, r3, #5
   1f474:	e3530001 	cmp	r3, #1
   1f478:	9a000016 	bls	1f4d8 <CDHCPClient::SendAndReceive(int, unsigned int)+0xc8>
   1f47c:	eb0005a9 	bl	20b28 <CScheduler::Get()>
   1f480:	eb0004fa 	bl	20870 <CScheduler::Yield()>
   1f484:	eb000e29 	bl	22d30 <CTimer::Get()>
   1f488:	eb000bd8 	bl	223f0 <CTimer::GetTicks() const>
   1f48c:	e0403006 	sub	r3, r0, r6
   1f490:	e1a00004 	mov	r0, r4
   1f494:	e1550003 	cmp	r5, r3
   1f498:	9a000011 	bls	1f4e4 <CDHCPClient::SendAndReceive(int, unsigned int)+0xd4>
   1f49c:	ebffff22 	bl	1f12c <CDHCPClient::ReceiveMessage()>
   1f4a0:	e3500000 	cmp	r0, #0
   1f4a4:	0afffff4 	beq	1f47c <CDHCPClient::SendAndReceive(int, unsigned int)+0x6c>
   1f4a8:	e3570000 	cmp	r7, #0
   1f4ac:	e5d430ad 	ldrb	r3, [r4, #173]	; 0xad
   1f4b0:	1affffee 	bne	1f470 <CDHCPClient::SendAndReceive(int, unsigned int)+0x60>
   1f4b4:	e3530002 	cmp	r3, #2
   1f4b8:	1affffef 	bne	1f47c <CDHCPClient::SendAndReceive(int, unsigned int)+0x6c>
   1f4bc:	e1a00004 	mov	r0, r4
   1f4c0:	ebfffe25 	bl	1ed5c <CDHCPClient::CheckConfig()>
   1f4c4:	e3500000 	cmp	r0, #0
   1f4c8:	0affffeb 	beq	1f47c <CDHCPClient::SendAndReceive(int, unsigned int)+0x6c>
   1f4cc:	e59430b0 	ldr	r3, [r4, #176]	; 0xb0
   1f4d0:	e3530000 	cmp	r3, #0
   1f4d4:	0affffe8 	beq	1f47c <CDHCPClient::SendAndReceive(int, unsigned int)+0x6c>
   1f4d8:	e3a00001 	mov	r0, #1
   1f4dc:	e28dd014 	add	sp, sp, #20
   1f4e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4e4:	eb00172f 	bl	251a8 <CLogger::Get()>
   1f4e8:	e1a03009 	mov	r3, r9
   1f4ec:	e3a02002 	mov	r2, #2
   1f4f0:	e1a0100b 	mov	r1, fp
   1f4f4:	eb001808 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f4f8:	e15a0008 	cmp	sl, r8
   1f4fc:	1affffcd 	bne	1f438 <CDHCPClient::SendAndReceive(int, unsigned int)+0x28>
   1f500:	eb001728 	bl	251a8 <CLogger::Get()>
   1f504:	e3570000 	cmp	r7, #0
   1f508:	e30f1258 	movw	r1, #62040	; 0xf258
   1f50c:	e3401002 	movt	r1, #2
   1f510:	e30f2264 	movw	r2, #62052	; 0xf264
   1f514:	e30f32a0 	movw	r3, #62112	; 0xf2a0
   1f518:	e3402002 	movt	r2, #2
   1f51c:	e3403002 	movt	r3, #2
   1f520:	11a02001 	movne	r2, r1
   1f524:	e59f1074 	ldr	r1, [pc, #116]	; 1f5a0 <CDHCPClient::SendAndReceive(int, unsigned int)+0x190>
   1f528:	e58d2000 	str	r2, [sp]
   1f52c:	e3a02002 	mov	r2, #2
   1f530:	eb0017f9 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f534:	e3a00000 	mov	r0, #0
   1f538:	e28dd014 	add	sp, sp, #20
   1f53c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f540:	e5847094 	str	r7, [r4, #148]	; 0x94
   1f544:	e3a0200c 	mov	r2, #12
   1f548:	e59f1054 	ldr	r1, [pc, #84]	; 1f5a4 <CDHCPClient::SendAndReceive(int, unsigned int)+0x194>
   1f54c:	e1a00004 	mov	r0, r4
   1f550:	ebfffda9 	bl	1ebfc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   1f554:	e16f0f10 	clz	r0, r0
   1f558:	e1a002a0 	lsr	r0, r0, #5
   1f55c:	eaffffbc 	b	1f454 <CDHCPClient::SendAndReceive(int, unsigned int)+0x44>
   1f560:	eb001710 	bl	251a8 <CLogger::Get()>
   1f564:	e3570000 	cmp	r7, #0
   1f568:	e30f1244 	movw	r1, #62020	; 0xf244
   1f56c:	e3401002 	movt	r1, #2
   1f570:	e30f224c 	movw	r2, #62028	; 0xf24c
   1f574:	e30f326c 	movw	r3, #62060	; 0xf26c
   1f578:	e3402002 	movt	r2, #2
   1f57c:	e3403002 	movt	r3, #2
   1f580:	11a02001 	movne	r2, r1
   1f584:	e59f1014 	ldr	r1, [pc, #20]	; 1f5a0 <CDHCPClient::SendAndReceive(int, unsigned int)+0x190>
   1f588:	e58d2000 	str	r2, [sp]
   1f58c:	e3a02001 	mov	r2, #1
   1f590:	eb0017e1 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f594:	e3a00000 	mov	r0, #0
   1f598:	eaffffe6 	b	1f538 <CDHCPClient::SendAndReceive(int, unsigned int)+0x128>
   1f59c:	0002f14c 	.word	0x0002f14c
   1f5a0:	0002f138 	.word	0x0002f138
   1f5a4:	0002f12c 	.word	0x0002f12c

0001f5a8 <CDHCPClient::RenewOrRebind(int, unsigned int)>:
   1f5a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f5ac:	e24dd010 	sub	sp, sp, #16
   1f5b0:	e1a05002 	mov	r5, r2
   1f5b4:	e1a04000 	mov	r4, r0
   1f5b8:	e1a06001 	mov	r6, r1
   1f5bc:	eb000ddb 	bl	22d30 <CTimer::Get()>
   1f5c0:	eb000b8c 	bl	223f8 <CTimer::GetUptime() const>
   1f5c4:	e5943074 	ldr	r3, [r4, #116]	; 0x74
   1f5c8:	e0400003 	sub	r0, r0, r3
   1f5cc:	e1500005 	cmp	r0, r5
   1f5d0:	23a05002 	movcs	r5, #2
   1f5d4:	3a000002 	bcc	1f5e4 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x3c>
   1f5d8:	e1a00005 	mov	r0, r5
   1f5dc:	e28dd010 	add	sp, sp, #16
   1f5e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f5e4:	eb0016ef 	bl	251a8 <CLogger::Get()>
   1f5e8:	e3560000 	cmp	r6, #0
   1f5ec:	0a00003e 	beq	1f6ec <CDHCPClient::RenewOrRebind(int, unsigned int)+0x144>
   1f5f0:	e28d8008 	add	r8, sp, #8
   1f5f4:	e59f12ec 	ldr	r1, [pc, #748]	; 1f8e8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f5f8:	e3a02004 	mov	r2, #4
   1f5fc:	e30f72b4 	movw	r7, #62132	; 0xf2b4
   1f600:	e30f3354 	movw	r3, #62292	; 0xf354
   1f604:	e3407002 	movt	r7, #2
   1f608:	e3403002 	movt	r3, #2
   1f60c:	e58d7000 	str	r7, [sp]
   1f610:	eb0017c1 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f614:	e1a00008 	mov	r0, r8
   1f618:	ebfff8dc 	bl	1d990 <CIPAddress::CIPAddress()>
   1f61c:	e3a03000 	mov	r3, #0
   1f620:	e1a00008 	mov	r0, r8
   1f624:	e594107c 	ldr	r1, [r4, #124]	; 0x7c
   1f628:	e584308c 	str	r3, [r4, #140]	; 0x8c
   1f62c:	ebfff96f 	bl	1dbf0 <CIPAddress::Set(unsigned int)>
   1f630:	e2846058 	add	r6, r4, #88	; 0x58
   1f634:	e3a02043 	mov	r2, #67	; 0x43
   1f638:	e1a01008 	mov	r1, r8
   1f63c:	e1a00006 	mov	r0, r6
   1f640:	ebffdb52 	bl	16390 <CSocket::Connect(CIPAddress&, unsigned short)>
   1f644:	e3500000 	cmp	r0, #0
   1f648:	ba000037 	blt	1f72c <CDHCPClient::RenewOrRebind(int, unsigned int)+0x184>
   1f64c:	e1a00006 	mov	r0, r6
   1f650:	e594108c 	ldr	r1, [r4, #140]	; 0x8c
   1f654:	ebffdcdf 	bl	169d8 <CSocket::SetOptionBroadcast(int)>
   1f658:	e3500000 	cmp	r0, #0
   1f65c:	0a000015 	beq	1f6b8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x110>
   1f660:	ea000043 	b	1f774 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x1cc>
   1f664:	ebffff1f 	bl	1f2e8 <CDHCPClient::GetXID() const>
   1f668:	e5942078 	ldr	r2, [r4, #120]	; 0x78
   1f66c:	e3a01001 	mov	r1, #1
   1f670:	e5840090 	str	r0, [r4, #144]	; 0x90
   1f674:	e1a00004 	mov	r0, r4
   1f678:	ebffff64 	bl	1f410 <CDHCPClient::SendAndReceive(int, unsigned int)>
   1f67c:	e3500000 	cmp	r0, #0
   1f680:	1a000043 	bne	1f794 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x1ec>
   1f684:	eb000da9 	bl	22d30 <CTimer::Get()>
   1f688:	eb000b5a 	bl	223f8 <CTimer::GetUptime() const>
   1f68c:	e5943074 	ldr	r3, [r4, #116]	; 0x74
   1f690:	e0400003 	sub	r0, r0, r3
   1f694:	e0456000 	sub	r6, r5, r0
   1f698:	e1550000 	cmp	r5, r0
   1f69c:	e1a060a6 	lsr	r6, r6, #1
   1f6a0:	9a00000b 	bls	1f6d4 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x12c>
   1f6a4:	eb00051f 	bl	20b28 <CScheduler::Get()>
   1f6a8:	e356003c 	cmp	r6, #60	; 0x3c
   1f6ac:	21a01006 	movcs	r1, r6
   1f6b0:	33a0103c 	movcc	r1, #60	; 0x3c
   1f6b4:	eb0004d6 	bl	20a14 <CScheduler::Sleep(unsigned int)>
   1f6b8:	eb000d9c 	bl	22d30 <CTimer::Get()>
   1f6bc:	eb000b4d 	bl	223f8 <CTimer::GetUptime() const>
   1f6c0:	e5943074 	ldr	r3, [r4, #116]	; 0x74
   1f6c4:	e0403003 	sub	r3, r0, r3
   1f6c8:	e1a00004 	mov	r0, r4
   1f6cc:	e1550003 	cmp	r5, r3
   1f6d0:	8affffe3 	bhi	1f664 <CDHCPClient::RenewOrRebind(int, unsigned int)+0xbc>
   1f6d4:	e3a05002 	mov	r5, #2
   1f6d8:	e1a00008 	mov	r0, r8
   1f6dc:	ebfff8c4 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   1f6e0:	e1a00005 	mov	r0, r5
   1f6e4:	e28dd010 	add	sp, sp, #16
   1f6e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f6ec:	e28d8008 	add	r8, sp, #8
   1f6f0:	e3a02004 	mov	r2, #4
   1f6f4:	e59f11ec 	ldr	r1, [pc, #492]	; 1f8e8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f6f8:	e30f72c0 	movw	r7, #62144	; 0xf2c0
   1f6fc:	e30f3354 	movw	r3, #62292	; 0xf354
   1f700:	e3407002 	movt	r7, #2
   1f704:	e3403002 	movt	r3, #2
   1f708:	e58d7000 	str	r7, [sp]
   1f70c:	eb001782 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f710:	e1a00008 	mov	r0, r8
   1f714:	ebfff89d 	bl	1d990 <CIPAddress::CIPAddress()>
   1f718:	e3a03001 	mov	r3, #1
   1f71c:	e1a00008 	mov	r0, r8
   1f720:	e584308c 	str	r3, [r4, #140]	; 0x8c
   1f724:	ebfff95c 	bl	1dc9c <CIPAddress::SetBroadcast()>
   1f728:	eaffffc0 	b	1f630 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x88>
   1f72c:	eb00169d 	bl	251a8 <CLogger::Get()>
   1f730:	e594108c 	ldr	r1, [r4, #140]	; 0x8c
   1f734:	e30f22cc 	movw	r2, #62156	; 0xf2cc
   1f738:	e3402002 	movt	r2, #2
   1f73c:	e3510000 	cmp	r1, #0
   1f740:	e30f32d4 	movw	r3, #62164	; 0xf2d4
   1f744:	e59f119c 	ldr	r1, [pc, #412]	; 1f8e8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f748:	e3403002 	movt	r3, #2
   1f74c:	11a03002 	movne	r3, r2
   1f750:	e3a02043 	mov	r2, #67	; 0x43
   1f754:	e58d3000 	str	r3, [sp]
   1f758:	e30f32d8 	movw	r3, #62168	; 0xf2d8
   1f75c:	e58d2004 	str	r2, [sp, #4]
   1f760:	e3403002 	movt	r3, #2
   1f764:	e3a02001 	mov	r2, #1
   1f768:	e3a05001 	mov	r5, #1
   1f76c:	eb00176a 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f770:	eaffffd8 	b	1f6d8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f774:	eb00168b 	bl	251a8 <CLogger::Get()>
   1f778:	e3a02001 	mov	r2, #1
   1f77c:	e30f32fc 	movw	r3, #62204	; 0xf2fc
   1f780:	e59f1160 	ldr	r1, [pc, #352]	; 1f8e8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f784:	e3403002 	movt	r3, #2
   1f788:	e1a05002 	mov	r5, r2
   1f78c:	eb001762 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f790:	eaffffd0 	b	1f6d8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f794:	e5d430ad 	ldrb	r3, [r4, #173]	; 0xad
   1f798:	e3530006 	cmp	r3, #6
   1f79c:	0a00001f 	beq	1f820 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x278>
   1f7a0:	e1a00004 	mov	r0, r4
   1f7a4:	ebfffd6c 	bl	1ed5c <CDHCPClient::CheckConfig()>
   1f7a8:	e3500000 	cmp	r0, #0
   1f7ac:	03a05004 	moveq	r5, #4
   1f7b0:	0affffc8 	beq	1f6d8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f7b4:	e59430b0 	ldr	r3, [r4, #176]	; 0xb0
   1f7b8:	e3530000 	cmp	r3, #0
   1f7bc:	e584307c 	str	r3, [r4, #124]	; 0x7c
   1f7c0:	0a00001e 	beq	1f840 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x298>
   1f7c4:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1f7c8:	e3500000 	cmp	r0, #0
   1f7cc:	0a00003d 	beq	1f8c8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x320>
   1f7d0:	ebfff812 	bl	1d820 <CNetConfig::GetIPAddress() const>
   1f7d4:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   1f7d8:	ebfff8f0 	bl	1dba0 <CIPAddress::operator!=(unsigned int) const>
   1f7dc:	e3500000 	cmp	r0, #0
   1f7e0:	1a00001e 	bne	1f860 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x2b8>
   1f7e4:	e59410a8 	ldr	r1, [r4, #168]	; 0xa8
   1f7e8:	e3a05000 	mov	r5, #0
   1f7ec:	e59420b4 	ldr	r2, [r4, #180]	; 0xb4
   1f7f0:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   1f7f4:	e5841080 	str	r1, [r4, #128]	; 0x80
   1f7f8:	e5842084 	str	r2, [r4, #132]	; 0x84
   1f7fc:	e5843088 	str	r3, [r4, #136]	; 0x88
   1f800:	eb001668 	bl	251a8 <CLogger::Get()>
   1f804:	e58d7000 	str	r7, [sp]
   1f808:	e30f3384 	movw	r3, #62340	; 0xf384
   1f80c:	e3a02004 	mov	r2, #4
   1f810:	e3403002 	movt	r3, #2
   1f814:	e59f10cc 	ldr	r1, [pc, #204]	; 1f8e8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f818:	eb00173f 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f81c:	eaffffad 	b	1f6d8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f820:	eb001660 	bl	251a8 <CLogger::Get()>
   1f824:	e30f3318 	movw	r3, #62232	; 0xf318
   1f828:	e3a02002 	mov	r2, #2
   1f82c:	e3403002 	movt	r3, #2
   1f830:	e59f10b0 	ldr	r1, [pc, #176]	; 1f8e8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f834:	e3a05003 	mov	r5, #3
   1f838:	eb001737 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f83c:	eaffffa5 	b	1f6d8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f840:	eb001658 	bl	251a8 <CLogger::Get()>
   1f844:	e30f3334 	movw	r3, #62260	; 0xf334
   1f848:	e3a02002 	mov	r2, #2
   1f84c:	e3403002 	movt	r3, #2
   1f850:	e59f1090 	ldr	r1, [pc, #144]	; 1f8e8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f854:	e3a05004 	mov	r5, #4
   1f858:	eb00172f 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f85c:	eaffff9d 	b	1f6d8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f860:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1f864:	ebfff7f1 	bl	1d830 <CNetConfig::GetNetMask() const>
   1f868:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
   1f86c:	e5902000 	ldr	r2, [r0]
   1f870:	e1520003 	cmp	r2, r3
   1f874:	0affffda 	beq	1f7e4 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x23c>
   1f878:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1f87c:	ebfff7ed 	bl	1d838 <CNetConfig::GetDefaultGateway() const>
   1f880:	e59410a0 	ldr	r1, [r4, #160]	; 0xa0
   1f884:	ebfff8c5 	bl	1dba0 <CIPAddress::operator!=(unsigned int) const>
   1f888:	e3500000 	cmp	r0, #0
   1f88c:	0affffd4 	beq	1f7e4 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x23c>
   1f890:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1f894:	ebfff7e9 	bl	1d840 <CNetConfig::GetDNSServer() const>
   1f898:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1f89c:	ebfff8bf 	bl	1dba0 <CIPAddress::operator!=(unsigned int) const>
   1f8a0:	e3500000 	cmp	r0, #0
   1f8a4:	0affffce 	beq	1f7e4 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x23c>
   1f8a8:	eb00163e 	bl	251a8 <CLogger::Get()>
   1f8ac:	e30f3360 	movw	r3, #62304	; 0xf360
   1f8b0:	e3a02002 	mov	r2, #2
   1f8b4:	e3403002 	movt	r3, #2
   1f8b8:	e59f1028 	ldr	r1, [pc, #40]	; 1f8e8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f8bc:	e3a05005 	mov	r5, #5
   1f8c0:	eb001715 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f8c4:	eaffff83 	b	1f6d8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f8c8:	e30f115c 	movw	r1, #61788	; 0xf15c
   1f8cc:	e30e0610 	movw	r0, #58896	; 0xe610
   1f8d0:	e3401002 	movt	r1, #2
   1f8d4:	e3400002 	movt	r0, #2
   1f8d8:	e3002191 	movw	r2, #401	; 0x191
   1f8dc:	eb0014af 	bl	24ba0 <assertion_failed>
   1f8e0:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1f8e4:	eaffffb9 	b	1f7d0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x228>
   1f8e8:	0002f138 	.word	0x0002f138

0001f8ec <CDHCPClient::SelectAndRequest()>:
   1f8ec:	e92d4070 	push	{r4, r5, r6, lr}
   1f8f0:	e24dd028 	sub	sp, sp, #40	; 0x28
   1f8f4:	e2806058 	add	r6, r0, #88	; 0x58
   1f8f8:	e1a04000 	mov	r4, r0
   1f8fc:	e3a05001 	mov	r5, #1
   1f900:	e580508c 	str	r5, [r0, #140]	; 0x8c
   1f904:	e28d0008 	add	r0, sp, #8
   1f908:	ebfff820 	bl	1d990 <CIPAddress::CIPAddress()>
   1f90c:	e28d0008 	add	r0, sp, #8
   1f910:	ebfff8e1 	bl	1dc9c <CIPAddress::SetBroadcast()>
   1f914:	e1a00006 	mov	r0, r6
   1f918:	e28d1008 	add	r1, sp, #8
   1f91c:	e3a02043 	mov	r2, #67	; 0x43
   1f920:	ebffda9a 	bl	16390 <CSocket::Connect(CIPAddress&, unsigned short)>
   1f924:	e3500000 	cmp	r0, #0
   1f928:	ba00001a 	blt	1f998 <CDHCPClient::SelectAndRequest()+0xac>
   1f92c:	e1a00006 	mov	r0, r6
   1f930:	e1a01005 	mov	r1, r5
   1f934:	ebffdc27 	bl	169d8 <CSocket::SetOptionBroadcast(int)>
   1f938:	e2506000 	subs	r6, r0, #0
   1f93c:	1a00000e 	bne	1f97c <CDHCPClient::SelectAndRequest()+0x90>
   1f940:	e1a00004 	mov	r0, r4
   1f944:	ebfffe67 	bl	1f2e8 <CDHCPClient::GetXID() const>
   1f948:	e1a02006 	mov	r2, r6
   1f94c:	e1a01006 	mov	r1, r6
   1f950:	e5840090 	str	r0, [r4, #144]	; 0x90
   1f954:	e1a00004 	mov	r0, r4
   1f958:	ebfffeac 	bl	1f410 <CDHCPClient::SendAndReceive(int, unsigned int)>
   1f95c:	e3500000 	cmp	r0, #0
   1f960:	1a000015 	bne	1f9bc <CDHCPClient::SelectAndRequest()+0xd0>
   1f964:	e3a05002 	mov	r5, #2
   1f968:	e28d0008 	add	r0, sp, #8
   1f96c:	ebfff820 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   1f970:	e1a00005 	mov	r0, r5
   1f974:	e28dd028 	add	sp, sp, #40	; 0x28
   1f978:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f97c:	eb001609 	bl	251a8 <CLogger::Get()>
   1f980:	e30f32fc 	movw	r3, #62204	; 0xf2fc
   1f984:	e1a02005 	mov	r2, r5
   1f988:	e3403002 	movt	r3, #2
   1f98c:	e59f121c 	ldr	r1, [pc, #540]	; 1fbb0 <CDHCPClient::SelectAndRequest()+0x2c4>
   1f990:	eb0016e1 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f994:	eafffff3 	b	1f968 <CDHCPClient::SelectAndRequest()+0x7c>
   1f998:	eb001602 	bl	251a8 <CLogger::Get()>
   1f99c:	e3a02043 	mov	r2, #67	; 0x43
   1f9a0:	e30f3394 	movw	r3, #62356	; 0xf394
   1f9a4:	e58d2000 	str	r2, [sp]
   1f9a8:	e3403002 	movt	r3, #2
   1f9ac:	e1a02005 	mov	r2, r5
   1f9b0:	e59f11f8 	ldr	r1, [pc, #504]	; 1fbb0 <CDHCPClient::SelectAndRequest()+0x2c4>
   1f9b4:	eb0016d8 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f9b8:	eaffffea 	b	1f968 <CDHCPClient::SelectAndRequest()+0x7c>
   1f9bc:	e5943098 	ldr	r3, [r4, #152]	; 0x98
   1f9c0:	e3530000 	cmp	r3, #0
   1f9c4:	e5843078 	str	r3, [r4, #120]	; 0x78
   1f9c8:	0a00002c 	beq	1fa80 <CDHCPClient::SelectAndRequest()+0x194>
   1f9cc:	e59430b0 	ldr	r3, [r4, #176]	; 0xb0
   1f9d0:	e3530000 	cmp	r3, #0
   1f9d4:	e584307c 	str	r3, [r4, #124]	; 0x7c
   1f9d8:	0a000021 	beq	1fa64 <CDHCPClient::SelectAndRequest()+0x178>
   1f9dc:	e3a02000 	mov	r2, #0
   1f9e0:	e3a01001 	mov	r1, #1
   1f9e4:	e1a00004 	mov	r0, r4
   1f9e8:	ebfffe88 	bl	1f410 <CDHCPClient::SendAndReceive(int, unsigned int)>
   1f9ec:	e3500000 	cmp	r0, #0
   1f9f0:	0affffdb 	beq	1f964 <CDHCPClient::SelectAndRequest()+0x78>
   1f9f4:	e5d430ad 	ldrb	r3, [r4, #173]	; 0xad
   1f9f8:	e3530006 	cmp	r3, #6
   1f9fc:	0a000010 	beq	1fa44 <CDHCPClient::SelectAndRequest()+0x158>
   1fa00:	e1a00004 	mov	r0, r4
   1fa04:	ebfffcd4 	bl	1ed5c <CDHCPClient::CheckConfig()>
   1fa08:	e3500000 	cmp	r0, #0
   1fa0c:	03a05004 	moveq	r5, #4
   1fa10:	0affffd4 	beq	1f968 <CDHCPClient::SelectAndRequest()+0x7c>
   1fa14:	e5942078 	ldr	r2, [r4, #120]	; 0x78
   1fa18:	e5943098 	ldr	r3, [r4, #152]	; 0x98
   1fa1c:	e1520003 	cmp	r2, r3
   1fa20:	0a00001d 	beq	1fa9c <CDHCPClient::SelectAndRequest()+0x1b0>
   1fa24:	eb0015df 	bl	251a8 <CLogger::Get()>
   1fa28:	e30f33ec 	movw	r3, #62444	; 0xf3ec
   1fa2c:	e3a02002 	mov	r2, #2
   1fa30:	e3403002 	movt	r3, #2
   1fa34:	e59f1174 	ldr	r1, [pc, #372]	; 1fbb0 <CDHCPClient::SelectAndRequest()+0x2c4>
   1fa38:	e3a05005 	mov	r5, #5
   1fa3c:	eb0016b6 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fa40:	eaffffc8 	b	1f968 <CDHCPClient::SelectAndRequest()+0x7c>
   1fa44:	eb0015d7 	bl	251a8 <CLogger::Get()>
   1fa48:	e30f3318 	movw	r3, #62232	; 0xf318
   1fa4c:	e3a02002 	mov	r2, #2
   1fa50:	e3403002 	movt	r3, #2
   1fa54:	e59f1154 	ldr	r1, [pc, #340]	; 1fbb0 <CDHCPClient::SelectAndRequest()+0x2c4>
   1fa58:	e3a05003 	mov	r5, #3
   1fa5c:	eb0016ae 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fa60:	eaffffc0 	b	1f968 <CDHCPClient::SelectAndRequest()+0x7c>
   1fa64:	e30f115c 	movw	r1, #61788	; 0xf15c
   1fa68:	e30f03d0 	movw	r0, #62416	; 0xf3d0
   1fa6c:	e3401002 	movt	r1, #2
   1fa70:	e3400002 	movt	r0, #2
   1fa74:	e3a020f8 	mov	r2, #248	; 0xf8
   1fa78:	eb001448 	bl	24ba0 <assertion_failed>
   1fa7c:	eaffffd6 	b	1f9dc <CDHCPClient::SelectAndRequest()+0xf0>
   1fa80:	e30f115c 	movw	r1, #61788	; 0xf15c
   1fa84:	e30f03b8 	movw	r0, #62392	; 0xf3b8
   1fa88:	e3401002 	movt	r1, #2
   1fa8c:	e3400002 	movt	r0, #2
   1fa90:	e3a020f5 	mov	r2, #245	; 0xf5
   1fa94:	eb001441 	bl	24ba0 <assertion_failed>
   1fa98:	eaffffcb 	b	1f9cc <CDHCPClient::SelectAndRequest()+0xe0>
   1fa9c:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
   1faa0:	e59430b0 	ldr	r3, [r4, #176]	; 0xb0
   1faa4:	e1520003 	cmp	r2, r3
   1faa8:	0a000007 	beq	1facc <CDHCPClient::SelectAndRequest()+0x1e0>
   1faac:	eb0015bd 	bl	251a8 <CLogger::Get()>
   1fab0:	e30f3404 	movw	r3, #62468	; 0xf404
   1fab4:	e3a02002 	mov	r2, #2
   1fab8:	e3403002 	movt	r3, #2
   1fabc:	e59f10ec 	ldr	r1, [pc, #236]	; 1fbb0 <CDHCPClient::SelectAndRequest()+0x2c4>
   1fac0:	e3a05005 	mov	r5, #5
   1fac4:	eb001694 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fac8:	eaffffa6 	b	1f968 <CDHCPClient::SelectAndRequest()+0x7c>
   1facc:	e28d0010 	add	r0, sp, #16
   1fad0:	ebfff7ae 	bl	1d990 <CIPAddress::CIPAddress()>
   1fad4:	e5941078 	ldr	r1, [r4, #120]	; 0x78
   1fad8:	e28d0010 	add	r0, sp, #16
   1fadc:	ebfff843 	bl	1dbf0 <CIPAddress::Set(unsigned int)>
   1fae0:	e28d0018 	add	r0, sp, #24
   1fae4:	eb001932 	bl	25fb4 <CString::CString()>
   1fae8:	e28d1018 	add	r1, sp, #24
   1faec:	e28d0010 	add	r0, sp, #16
   1faf0:	ebfff8c4 	bl	1de08 <CIPAddress::Format(CString*) const>
   1faf4:	eb0015ab 	bl	251a8 <CLogger::Get()>
   1faf8:	e1a05000 	mov	r5, r0
   1fafc:	e28d0018 	add	r0, sp, #24
   1fb00:	eb001941 	bl	2600c <CString::operator char const*() const>
   1fb04:	e30f3424 	movw	r3, #62500	; 0xf424
   1fb08:	e3a02003 	mov	r2, #3
   1fb0c:	e3403002 	movt	r3, #2
   1fb10:	e59f1098 	ldr	r1, [pc, #152]	; 1fbb0 <CDHCPClient::SelectAndRequest()+0x2c4>
   1fb14:	e58d0000 	str	r0, [sp]
   1fb18:	e1a00005 	mov	r0, r5
   1fb1c:	eb00167e 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fb20:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   1fb24:	e3530000 	cmp	r3, #0
   1fb28:	0a000019 	beq	1fb94 <CDHCPClient::SelectAndRequest()+0x2a8>
   1fb2c:	e5941078 	ldr	r1, [r4, #120]	; 0x78
   1fb30:	e3a05000 	mov	r5, #0
   1fb34:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1fb38:	ebfff778 	bl	1d920 <CNetConfig::SetIPAddress(unsigned int)>
   1fb3c:	e594109c 	ldr	r1, [r4, #156]	; 0x9c
   1fb40:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1fb44:	ebfff77c 	bl	1d93c <CNetConfig::SetNetMask(unsigned int)>
   1fb48:	e59410a0 	ldr	r1, [r4, #160]	; 0xa0
   1fb4c:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1fb50:	ebfff72a 	bl	1d800 <CNetConfig::SetDefaultGateway(unsigned int)>
   1fb54:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1fb58:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1fb5c:	ebfff729 	bl	1d808 <CNetConfig::SetDNSServer(unsigned int)>
   1fb60:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1fb64:	e59410b4 	ldr	r1, [r4, #180]	; 0xb4
   1fb68:	e28d0018 	add	r0, sp, #24
   1fb6c:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1fb70:	e5843080 	str	r3, [r4, #128]	; 0x80
   1fb74:	e3a03001 	mov	r3, #1
   1fb78:	e5841084 	str	r1, [r4, #132]	; 0x84
   1fb7c:	e5842088 	str	r2, [r4, #136]	; 0x88
   1fb80:	e5843070 	str	r3, [r4, #112]	; 0x70
   1fb84:	eb0018d7 	bl	25ee8 <CString::~CString()>
   1fb88:	e28d0010 	add	r0, sp, #16
   1fb8c:	ebfff798 	bl	1d9f4 <CIPAddress::~CIPAddress()>
   1fb90:	eaffff74 	b	1f968 <CDHCPClient::SelectAndRequest()+0x7c>
   1fb94:	e30f115c 	movw	r1, #61788	; 0xf15c
   1fb98:	e30e0610 	movw	r0, #58896	; 0xe610
   1fb9c:	e3401002 	movt	r1, #2
   1fba0:	e3400002 	movt	r0, #2
   1fba4:	e3002122 	movw	r2, #290	; 0x122
   1fba8:	eb0013fc 	bl	24ba0 <assertion_failed>
   1fbac:	eaffffde 	b	1fb2c <CDHCPClient::SelectAndRequest()+0x240>
   1fbb0:	0002f138 	.word	0x0002f138

0001fbb4 <CDHCPClient::Run()>:
   1fbb4:	e92d4030 	push	{r4, r5, lr}
   1fbb8:	e2804058 	add	r4, r0, #88	; 0x58
   1fbbc:	e24ddf8d 	sub	sp, sp, #564	; 0x234
   1fbc0:	e1a05000 	mov	r5, r0
   1fbc4:	e3a01044 	mov	r1, #68	; 0x44
   1fbc8:	e1a00004 	mov	r0, r4
   1fbcc:	ebffd9d7 	bl	16330 <CSocket::Bind(unsigned short)>
   1fbd0:	e3500000 	cmp	r0, #0
   1fbd4:	ba00004a 	blt	1fd04 <CDHCPClient::Run()+0x150>
   1fbd8:	e1a00005 	mov	r0, r5
   1fbdc:	ebffff42 	bl	1f8ec <CDHCPClient::SelectAndRequest()>
   1fbe0:	e3500001 	cmp	r0, #1
   1fbe4:	0a000009 	beq	1fc10 <CDHCPClient::Run()+0x5c>
   1fbe8:	3a00000a 	bcc	1fc18 <CDHCPClient::Run()+0x64>
   1fbec:	e3500005 	cmp	r0, #5
   1fbf0:	8a000008 	bhi	1fc18 <CDHCPClient::Run()+0x64>
   1fbf4:	eb0003cb 	bl	20b28 <CScheduler::Get()>
   1fbf8:	e3a0103c 	mov	r1, #60	; 0x3c
   1fbfc:	eb000384 	bl	20a14 <CScheduler::Sleep(unsigned int)>
   1fc00:	e1a00005 	mov	r0, r5
   1fc04:	ebffff38 	bl	1f8ec <CDHCPClient::SelectAndRequest()>
   1fc08:	e3500001 	cmp	r0, #1
   1fc0c:	1afffff5 	bne	1fbe8 <CDHCPClient::Run()+0x34>
   1fc10:	e28ddf8d 	add	sp, sp, #564	; 0x234
   1fc14:	e8bd8030 	pop	{r4, r5, pc}
   1fc18:	eb000c44 	bl	22d30 <CTimer::Get()>
   1fc1c:	eb0009f5 	bl	223f8 <CTimer::GetUptime() const>
   1fc20:	e5850074 	str	r0, [r5, #116]	; 0x74
   1fc24:	eb000c41 	bl	22d30 <CTimer::Get()>
   1fc28:	eb0009f2 	bl	223f8 <CTimer::GetUptime() const>
   1fc2c:	e5953074 	ldr	r3, [r5, #116]	; 0x74
   1fc30:	e5952084 	ldr	r2, [r5, #132]	; 0x84
   1fc34:	e0400003 	sub	r0, r0, r3
   1fc38:	e1500002 	cmp	r0, r2
   1fc3c:	3a000002 	bcc	1fc4c <CDHCPClient::Run()+0x98>
   1fc40:	ea00000c 	b	1fc78 <CDHCPClient::Run()+0xc4>
   1fc44:	eb0003b7 	bl	20b28 <CScheduler::Get()>
   1fc48:	eb000308 	bl	20870 <CScheduler::Yield()>
   1fc4c:	e3a03040 	mov	r3, #64	; 0x40
   1fc50:	e3a02f89 	mov	r2, #548	; 0x224
   1fc54:	e28d100c 	add	r1, sp, #12
   1fc58:	e1a00004 	mov	r0, r4
   1fc5c:	ebffda9e 	bl	166dc <CSocket::Receive(void*, unsigned int, int)>
   1fc60:	e3500000 	cmp	r0, #0
   1fc64:	cafffff6 	bgt	1fc44 <CDHCPClient::Run()+0x90>
   1fc68:	eb0003ae 	bl	20b28 <CScheduler::Get()>
   1fc6c:	e3a0100a 	mov	r1, #10
   1fc70:	eb000367 	bl	20a14 <CScheduler::Sleep(unsigned int)>
   1fc74:	eaffffea 	b	1fc24 <CDHCPClient::Run()+0x70>
   1fc78:	e5952088 	ldr	r2, [r5, #136]	; 0x88
   1fc7c:	e3a01001 	mov	r1, #1
   1fc80:	e1a00005 	mov	r0, r5
   1fc84:	ebfffe47 	bl	1f5a8 <CDHCPClient::RenewOrRebind(int, unsigned int)>
   1fc88:	e3500005 	cmp	r0, #5
   1fc8c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   1fc90:	ea00000e 	b	1fcd0 <CDHCPClient::Run()+0x11c>
   1fc94:	0001fc18 	.word	0x0001fc18
   1fc98:	0001fc10 	.word	0x0001fc10
   1fc9c:	0001fcd0 	.word	0x0001fcd0
   1fca0:	0001fcc4 	.word	0x0001fcc4
   1fca4:	0001fcc4 	.word	0x0001fcc4
   1fca8:	0001fcc4 	.word	0x0001fcc4
   1fcac:	eb00153d 	bl	251a8 <CLogger::Get()>
   1fcb0:	e30f3450 	movw	r3, #62544	; 0xf450
   1fcb4:	e3a02001 	mov	r2, #1
   1fcb8:	e3403002 	movt	r3, #2
   1fcbc:	e59f1068 	ldr	r1, [pc, #104]	; 1fd2c <CDHCPClient::Run()+0x178>
   1fcc0:	eb001615 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fcc4:	e1a00005 	mov	r0, r5
   1fcc8:	ebfffbb8 	bl	1ebb0 <CDHCPClient::HaltNetwork()>
   1fccc:	eaffffc1 	b	1fbd8 <CDHCPClient::Run()+0x24>
   1fcd0:	e5952080 	ldr	r2, [r5, #128]	; 0x80
   1fcd4:	e3a01000 	mov	r1, #0
   1fcd8:	e1a00005 	mov	r0, r5
   1fcdc:	ebfffe31 	bl	1f5a8 <CDHCPClient::RenewOrRebind(int, unsigned int)>
   1fce0:	e3500005 	cmp	r0, #5
   1fce4:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   1fce8:	eaffffef 	b	1fcac <CDHCPClient::Run()+0xf8>
   1fcec:	0001fc18 	.word	0x0001fc18
   1fcf0:	0001fc10 	.word	0x0001fc10
   1fcf4:	0001fcac 	.word	0x0001fcac
   1fcf8:	0001fcc4 	.word	0x0001fcc4
   1fcfc:	0001fcc4 	.word	0x0001fcc4
   1fd00:	0001fcc4 	.word	0x0001fcc4
   1fd04:	eb001527 	bl	251a8 <CLogger::Get()>
   1fd08:	e3a02044 	mov	r2, #68	; 0x44
   1fd0c:	e59f1018 	ldr	r1, [pc, #24]	; 1fd2c <CDHCPClient::Run()+0x178>
   1fd10:	e30f3438 	movw	r3, #62520	; 0xf438
   1fd14:	e58d2000 	str	r2, [sp]
   1fd18:	e3403002 	movt	r3, #2
   1fd1c:	e3a02001 	mov	r2, #1
   1fd20:	eb0015fd 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fd24:	e28ddf8d 	add	sp, sp, #564	; 0x234
   1fd28:	e8bd8030 	pop	{r4, r5, pc}
   1fd2c:	0002f138 	.word	0x0002f138

0001fd30 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   1fd30:	e92d4010 	push	{r4, lr}
   1fd34:	e1a04000 	mov	r4, r0
   1fd38:	e4801004 	str	r1, [r0], #4
   1fd3c:	e1a01002 	mov	r1, r2
   1fd40:	eb0018a1 	bl	25fcc <CString::CString(char const*)>
   1fd44:	e3a03000 	mov	r3, #0
   1fd48:	e1a00004 	mov	r0, r4
   1fd4c:	e5843014 	str	r3, [r4, #20]
   1fd50:	e5843018 	str	r3, [r4, #24]
   1fd54:	e584301c 	str	r3, [r4, #28]
   1fd58:	e5843020 	str	r3, [r4, #32]
   1fd5c:	e8bd8010 	pop	{r4, pc}

0001fd60 <CPartitionManager::~CPartitionManager()>:
   1fd60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1fd64:	e2804014 	add	r4, r0, #20
   1fd68:	e2807024 	add	r7, r0, #36	; 0x24
   1fd6c:	e1a06000 	mov	r6, r0
   1fd70:	e3a05000 	mov	r5, #0
   1fd74:	e5943000 	ldr	r3, [r4]
   1fd78:	e3530000 	cmp	r3, #0
   1fd7c:	e1a00003 	mov	r0, r3
   1fd80:	0a000002 	beq	1fd90 <CPartitionManager::~CPartitionManager()+0x30>
   1fd84:	e5933000 	ldr	r3, [r3]
   1fd88:	e5933004 	ldr	r3, [r3, #4]
   1fd8c:	e12fff33 	blx	r3
   1fd90:	e4845004 	str	r5, [r4], #4
   1fd94:	e1540007 	cmp	r4, r7
   1fd98:	1afffff5 	bne	1fd74 <CPartitionManager::~CPartitionManager()+0x14>
   1fd9c:	e1a00006 	mov	r0, r6
   1fda0:	e4805004 	str	r5, [r0], #4
   1fda4:	eb00184f 	bl	25ee8 <CString::~CString()>
   1fda8:	e1a00006 	mov	r0, r6
   1fdac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001fdb0 <CPartitionManager::Initialize()>:
   1fdb0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fdb4:	e1a07000 	mov	r7, r0
   1fdb8:	e5900000 	ldr	r0, [r0]
   1fdbc:	e3a03000 	mov	r3, #0
   1fdc0:	e24ddf89 	sub	sp, sp, #548	; 0x224
   1fdc4:	e3a02000 	mov	r2, #0
   1fdc8:	e5901000 	ldr	r1, [r0]
   1fdcc:	e5911010 	ldr	r1, [r1, #16]
   1fdd0:	e12fff31 	blx	r1
   1fdd4:	e1903001 	orrs	r3, r0, r1
   1fdd8:	0a000009 	beq	1fe04 <CPartitionManager::Initialize()+0x54>
   1fddc:	eb0014f1 	bl	251a8 <CLogger::Get()>
   1fde0:	e30f34d8 	movw	r3, #62680	; 0xf4d8
   1fde4:	e30f1460 	movw	r1, #62560	; 0xf460
   1fde8:	e3403002 	movt	r3, #2
   1fdec:	e3401002 	movt	r1, #2
   1fdf0:	e3a02001 	mov	r2, #1
   1fdf4:	eb0015c8 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fdf8:	e3a00000 	mov	r0, #0
   1fdfc:	e28ddf89 	add	sp, sp, #548	; 0x224
   1fe00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe04:	e5970000 	ldr	r0, [r7]
   1fe08:	e3a02c02 	mov	r2, #512	; 0x200
   1fe0c:	e28d1020 	add	r1, sp, #32
   1fe10:	e5903000 	ldr	r3, [r0]
   1fe14:	e5933008 	ldr	r3, [r3, #8]
   1fe18:	e12fff33 	blx	r3
   1fe1c:	e3500c02 	cmp	r0, #512	; 0x200
   1fe20:	1affffed 	bne	1fddc <CPartitionManager::Initialize()+0x2c>
   1fe24:	e28d3f87 	add	r3, sp, #540	; 0x21c
   1fe28:	e2833002 	add	r3, r3, #2
   1fe2c:	e1d320b0 	ldrh	r2, [r3]
   1fe30:	e30a3a55 	movw	r3, #43605	; 0xaa55
   1fe34:	e1520003 	cmp	r2, r3
   1fe38:	1a00005c 	bne	1ffb0 <CPartitionManager::Initialize()+0x200>
   1fe3c:	e3a04000 	mov	r4, #0
   1fe40:	e30fa4ac 	movw	sl, #62636	; 0xf4ac
   1fe44:	e30f947c 	movw	r9, #62588	; 0xf47c
   1fe48:	e340a002 	movt	sl, #2
   1fe4c:	e3409002 	movt	r9, #2
   1fe50:	e2876014 	add	r6, r7, #20
   1fe54:	e28d5020 	add	r5, sp, #32
   1fe58:	e1a0b004 	mov	fp, r4
   1fe5c:	e30f8494 	movw	r8, #62612	; 0xf494
   1fe60:	e3408002 	movt	r8, #2
   1fe64:	e58d8004 	str	r8, [sp, #4]
   1fe68:	e5d511c2 	ldrb	r1, [r5, #450]	; 0x1c2
   1fe6c:	e3083021 	movw	r3, #32801	; 0x8021
   1fe70:	e3a02000 	mov	r2, #0
   1fe74:	e2855010 	add	r5, r5, #16
   1fe78:	e351000f 	cmp	r1, #15
   1fe7c:	e1e03133 	mvn	r3, r3, lsr r1
   1fe80:	e2033001 	and	r3, r3, #1
   1fe84:	92232001 	eorls	r2, r3, #1
   1fe88:	e284301c 	add	r3, r4, #28
   1fe8c:	e35100ef 	cmp	r1, #239	; 0xef
   1fe90:	03822001 	orreq	r2, r2, #1
   1fe94:	e2844001 	add	r4, r4, #1
   1fe98:	e3520000 	cmp	r2, #0
   1fe9c:	e28d2e22 	add	r2, sp, #544	; 0x220
   1fea0:	e0822203 	add	r2, r2, r3, lsl #4
   1fea4:	1a000031 	bne	1ff70 <CPartitionManager::Initialize()+0x1c0>
   1fea8:	e51211fa 	ldr	r1, [r2, #-506]	; 0xfffffe06
   1feac:	e3510000 	cmp	r1, #0
   1feb0:	0a00002e 	beq	1ff70 <CPartitionManager::Initialize()+0x1c0>
   1feb4:	e51221f6 	ldr	r2, [r2, #-502]	; 0xfffffe0a
   1feb8:	e1a08007 	mov	r8, r7
   1febc:	e3520000 	cmp	r2, #0
   1fec0:	0a00002a 	beq	1ff70 <CPartitionManager::Initialize()+0x1c0>
   1fec4:	e596c000 	ldr	ip, [r6]
   1fec8:	e28bb001 	add	fp, fp, #1
   1fecc:	e3a02070 	mov	r2, #112	; 0x70
   1fed0:	e1a01009 	mov	r1, r9
   1fed4:	e35c0000 	cmp	ip, #0
   1fed8:	e59d0004 	ldr	r0, [sp, #4]
   1fedc:	0a000002 	beq	1feec <CPartitionManager::Initialize()+0x13c>
   1fee0:	e58d3008 	str	r3, [sp, #8]
   1fee4:	eb00132d 	bl	24ba0 <assertion_failed>
   1fee8:	e59d3008 	ldr	r3, [sp, #8]
   1feec:	e3a00020 	mov	r0, #32
   1fef0:	e58d300c 	str	r3, [sp, #12]
   1fef4:	eb000827 	bl	21f98 <operator new(unsigned int)>
   1fef8:	e59d300c 	ldr	r3, [sp, #12]
   1fefc:	e28d2e22 	add	r2, sp, #544	; 0x220
   1ff00:	e4981004 	ldr	r1, [r8], #4
   1ff04:	e0822203 	add	r2, r2, r3, lsl #4
   1ff08:	e58d0008 	str	r0, [sp, #8]
   1ff0c:	e51231f6 	ldr	r3, [r2, #-502]	; 0xfffffe0a
   1ff10:	e51221fa 	ldr	r2, [r2, #-506]	; 0xfffffe06
   1ff14:	eb0000d4 	bl	2026c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   1ff18:	e59d3008 	ldr	r3, [sp, #8]
   1ff1c:	e28d0010 	add	r0, sp, #16
   1ff20:	e5863000 	str	r3, [r6]
   1ff24:	eb001822 	bl	25fb4 <CString::CString()>
   1ff28:	e1a00008 	mov	r0, r8
   1ff2c:	eb001836 	bl	2600c <CString::operator char const*() const>
   1ff30:	e1a0300b 	mov	r3, fp
   1ff34:	e1a0100a 	mov	r1, sl
   1ff38:	e1a02000 	mov	r2, r0
   1ff3c:	e28d0010 	add	r0, sp, #16
   1ff40:	eb001b2d 	bl	26bfc <CString::Format(char const*, ...)>
   1ff44:	eb00146b 	bl	250f8 <CDeviceNameService::Get()>
   1ff48:	e1a08000 	mov	r8, r0
   1ff4c:	e28d0010 	add	r0, sp, #16
   1ff50:	eb00182d 	bl	2600c <CString::operator char const*() const>
   1ff54:	e3a03001 	mov	r3, #1
   1ff58:	e5962000 	ldr	r2, [r6]
   1ff5c:	e1a01000 	mov	r1, r0
   1ff60:	e1a00008 	mov	r0, r8
   1ff64:	eb0013ef 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   1ff68:	e28d0010 	add	r0, sp, #16
   1ff6c:	eb0017dd 	bl	25ee8 <CString::~CString()>
   1ff70:	e3540004 	cmp	r4, #4
   1ff74:	e2866004 	add	r6, r6, #4
   1ff78:	1affffba 	bne	1fe68 <CPartitionManager::Initialize()+0xb8>
   1ff7c:	e35b0000 	cmp	fp, #0
   1ff80:	13a00001 	movne	r0, #1
   1ff84:	1affff9c 	bne	1fdfc <CPartitionManager::Initialize()+0x4c>
   1ff88:	eb001486 	bl	251a8 <CLogger::Get()>
   1ff8c:	e3a02002 	mov	r2, #2
   1ff90:	e30f34b4 	movw	r3, #62644	; 0xf4b4
   1ff94:	e30f1460 	movw	r1, #62560	; 0xf460
   1ff98:	e3403002 	movt	r3, #2
   1ff9c:	e3401002 	movt	r1, #2
   1ffa0:	eb00155d 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ffa4:	e3a00001 	mov	r0, #1
   1ffa8:	e28ddf89 	add	sp, sp, #548	; 0x224
   1ffac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffb0:	eb00147c 	bl	251a8 <CLogger::Get()>
   1ffb4:	e3a02002 	mov	r2, #2
   1ffb8:	e30f3468 	movw	r3, #62568	; 0xf468
   1ffbc:	e30f1460 	movw	r1, #62560	; 0xf460
   1ffc0:	e3403002 	movt	r3, #2
   1ffc4:	e3401002 	movt	r1, #2
   1ffc8:	eb001553 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ffcc:	e3a00001 	mov	r0, #1
   1ffd0:	e28ddf89 	add	sp, sp, #548	; 0x224
   1ffd4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ffd8 <CPartition::Read(void*, unsigned int)>:
   1ffd8:	e5903018 	ldr	r3, [r0, #24]
   1ffdc:	e3530000 	cmp	r3, #0
   1ffe0:	1a000026 	bne	20080 <CPartition::Read(void*, unsigned int)+0xa8>
   1ffe4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ffe8:	e30041ff 	movw	r4, #511	; 0x1ff
   1ffec:	e1c061d0 	ldrd	r6, [r0, #16]
   1fff0:	e0944002 	adds	r4, r4, r2
   1fff4:	e3a05000 	mov	r5, #0
   1fff8:	e2a55000 	adc	r5, r5, #0
   1fffc:	e0944006 	adds	r4, r4, r6
   20000:	e590300c 	ldr	r3, [r0, #12]
   20004:	e0a55007 	adc	r5, r5, r7
   20008:	e3a07000 	mov	r7, #0
   2000c:	e1a044a4 	lsr	r4, r4, #9
   20010:	e1844b85 	orr	r4, r4, r5, lsl #23
   20014:	e1a054a5 	lsr	r5, r5, #9
   20018:	e1550007 	cmp	r5, r7
   2001c:	e1a06003 	mov	r6, r3
   20020:	01540003 	cmpeq	r4, r3
   20024:	8a00000b 	bhi	20058 <CPartition::Read(void*, unsigned int)+0x80>
   20028:	e1a04000 	mov	r4, r0
   2002c:	e5900004 	ldr	r0, [r0, #4]
   20030:	e1a05002 	mov	r5, r2
   20034:	e1a06001 	mov	r6, r1
   20038:	e3500000 	cmp	r0, #0
   2003c:	0a000007 	beq	20060 <CPartition::Read(void*, unsigned int)+0x88>
   20040:	e5903000 	ldr	r3, [r0]
   20044:	e1a02005 	mov	r2, r5
   20048:	e1a01006 	mov	r1, r6
   2004c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   20050:	e5933008 	ldr	r3, [r3, #8]
   20054:	e12fff13 	bx	r3
   20058:	e3e00000 	mvn	r0, #0
   2005c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20060:	e30f1504 	movw	r1, #62724	; 0xf504
   20064:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   20068:	e3401002 	movt	r1, #2
   2006c:	e3400002 	movt	r0, #2
   20070:	e3a02035 	mov	r2, #53	; 0x35
   20074:	eb0012c9 	bl	24ba0 <assertion_failed>
   20078:	e5940004 	ldr	r0, [r4, #4]
   2007c:	eaffffef 	b	20040 <CPartition::Read(void*, unsigned int)+0x68>
   20080:	e3e00000 	mvn	r0, #0
   20084:	e12fff1e 	bx	lr

00020088 <CPartition::Write(void const*, unsigned int)>:
   20088:	e5903018 	ldr	r3, [r0, #24]
   2008c:	e3530000 	cmp	r3, #0
   20090:	1a000026 	bne	20130 <CPartition::Write(void const*, unsigned int)+0xa8>
   20094:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20098:	e30041ff 	movw	r4, #511	; 0x1ff
   2009c:	e1c061d0 	ldrd	r6, [r0, #16]
   200a0:	e0944002 	adds	r4, r4, r2
   200a4:	e3a05000 	mov	r5, #0
   200a8:	e2a55000 	adc	r5, r5, #0
   200ac:	e0944006 	adds	r4, r4, r6
   200b0:	e590300c 	ldr	r3, [r0, #12]
   200b4:	e0a55007 	adc	r5, r5, r7
   200b8:	e3a07000 	mov	r7, #0
   200bc:	e1a044a4 	lsr	r4, r4, #9
   200c0:	e1844b85 	orr	r4, r4, r5, lsl #23
   200c4:	e1a054a5 	lsr	r5, r5, #9
   200c8:	e1550007 	cmp	r5, r7
   200cc:	e1a06003 	mov	r6, r3
   200d0:	01540003 	cmpeq	r4, r3
   200d4:	8a00000b 	bhi	20108 <CPartition::Write(void const*, unsigned int)+0x80>
   200d8:	e1a04000 	mov	r4, r0
   200dc:	e5900004 	ldr	r0, [r0, #4]
   200e0:	e1a05002 	mov	r5, r2
   200e4:	e1a06001 	mov	r6, r1
   200e8:	e3500000 	cmp	r0, #0
   200ec:	0a000007 	beq	20110 <CPartition::Write(void const*, unsigned int)+0x88>
   200f0:	e5903000 	ldr	r3, [r0]
   200f4:	e1a02005 	mov	r2, r5
   200f8:	e1a01006 	mov	r1, r6
   200fc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   20100:	e593300c 	ldr	r3, [r3, #12]
   20104:	e12fff13 	bx	r3
   20108:	e3e00000 	mvn	r0, #0
   2010c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20110:	e30f1504 	movw	r1, #62724	; 0xf504
   20114:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   20118:	e3401002 	movt	r1, #2
   2011c:	e3400002 	movt	r0, #2
   20120:	e3a02047 	mov	r2, #71	; 0x47
   20124:	eb00129d 	bl	24ba0 <assertion_failed>
   20128:	e5940004 	ldr	r0, [r4, #4]
   2012c:	eaffffef 	b	200f0 <CPartition::Write(void const*, unsigned int)+0x68>
   20130:	e3e00000 	mvn	r0, #0
   20134:	e12fff1e 	bx	lr

00020138 <CPartition::~CPartition()>:
   20138:	e59f301c 	ldr	r3, [pc, #28]	; 2015c <CPartition::~CPartition()+0x24>
   2013c:	e3a02000 	mov	r2, #0
   20140:	e92d4010 	push	{r4, lr}
   20144:	e1a04000 	mov	r4, r0
   20148:	e5802004 	str	r2, [r0, #4]
   2014c:	e5803000 	str	r3, [r0]
   20150:	eb000c33 	bl	23224 <CDevice::~CDevice()>
   20154:	e1a00004 	mov	r0, r4
   20158:	e8bd8010 	pop	{r4, pc}
   2015c:	0002f4f0 	.word	0x0002f4f0

00020160 <CPartition::~CPartition()>:
   20160:	e59f3028 	ldr	r3, [pc, #40]	; 20190 <CPartition::~CPartition()+0x30>
   20164:	e3a02000 	mov	r2, #0
   20168:	e92d4010 	push	{r4, lr}
   2016c:	e1a04000 	mov	r4, r0
   20170:	e5802004 	str	r2, [r0, #4]
   20174:	e5803000 	str	r3, [r0]
   20178:	eb000c29 	bl	23224 <CDevice::~CDevice()>
   2017c:	e1a00004 	mov	r0, r4
   20180:	e3a01020 	mov	r1, #32
   20184:	eb000787 	bl	21fa8 <operator delete(void*, unsigned int)>
   20188:	e1a00004 	mov	r0, r4
   2018c:	e8bd8010 	pop	{r4, pc}
   20190:	0002f4f0 	.word	0x0002f4f0

00020194 <CPartition::Seek(unsigned long long)>:
   20194:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20198:	e30041ff 	movw	r4, #511	; 0x1ff
   2019c:	e3a05000 	mov	r5, #0
   201a0:	e0044002 	and	r4, r4, r2
   201a4:	e0055003 	and	r5, r5, r3
   201a8:	e1941005 	orrs	r1, r4, r5
   201ac:	e3a01001 	mov	r1, #1
   201b0:	e5801018 	str	r1, [r0, #24]
   201b4:	0a000002 	beq	201c4 <CPartition::Seek(unsigned long long)+0x30>
   201b8:	e3e00000 	mvn	r0, #0
   201bc:	e1a01000 	mov	r1, r0
   201c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   201c4:	e590400c 	ldr	r4, [r0, #12]
   201c8:	e1a064a2 	lsr	r6, r2, #9
   201cc:	e1a074a3 	lsr	r7, r3, #9
   201d0:	e1866b83 	orr	r6, r6, r3, lsl #23
   201d4:	e3a05000 	mov	r5, #0
   201d8:	e1570005 	cmp	r7, r5
   201dc:	01560004 	cmpeq	r6, r4
   201e0:	2afffff4 	bcs	201b8 <CPartition::Seek(unsigned long long)+0x24>
   201e4:	e1a07003 	mov	r7, r3
   201e8:	e1a04000 	mov	r4, r0
   201ec:	e9900009 	ldmib	r0, {r0, r3}
   201f0:	e1a06002 	mov	r6, r2
   201f4:	ee803b90 	vdup.32	d16, r3
   201f8:	f3e000b0 	vshr.u64	d16, d16, #32
   201fc:	f2c915b0 	vshl.s64	d17, d16, #9
   20200:	ec598b31 	vmov	r8, r9, d17
   20204:	e0988002 	adds	r8, r8, r2
   20208:	e0a99007 	adc	r9, r9, r7
   2020c:	e3500000 	cmp	r0, #0
   20210:	0a00000d 	beq	2024c <CPartition::Seek(unsigned long long)+0xb8>
   20214:	e5901000 	ldr	r1, [r0]
   20218:	e1a02008 	mov	r2, r8
   2021c:	e1a03009 	mov	r3, r9
   20220:	e5911010 	ldr	r1, [r1, #16]
   20224:	e12fff31 	blx	r1
   20228:	e1590001 	cmp	r9, r1
   2022c:	01580000 	cmpeq	r8, r0
   20230:	1affffe0 	bne	201b8 <CPartition::Seek(unsigned long long)+0x24>
   20234:	e3a03000 	mov	r3, #0
   20238:	e1a00006 	mov	r0, r6
   2023c:	e1a01007 	mov	r1, r7
   20240:	e1c461f0 	strd	r6, [r4, #16]
   20244:	e5843018 	str	r3, [r4, #24]
   20248:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2024c:	e30f1504 	movw	r1, #62724	; 0xf504
   20250:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   20254:	e3401002 	movt	r1, #2
   20258:	e3400002 	movt	r0, #2
   2025c:	e3a02059 	mov	r2, #89	; 0x59
   20260:	eb00124e 	bl	24ba0 <assertion_failed>
   20264:	e5940004 	ldr	r0, [r4, #4]
   20268:	eaffffe9 	b	20214 <CPartition::Seek(unsigned long long)+0x80>

0002026c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   2026c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20270:	e1a04000 	mov	r4, r0
   20274:	e1a05001 	mov	r5, r1
   20278:	e1a07002 	mov	r7, r2
   2027c:	e1a06003 	mov	r6, r3
   20280:	eb000bf3 	bl	23254 <CDevice::CDevice()>
   20284:	e59f104c 	ldr	r1, [pc, #76]	; 202d8 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x6c>
   20288:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   2028c:	e3550000 	cmp	r5, #0
   20290:	e3a02001 	mov	r2, #1
   20294:	e5847008 	str	r7, [r4, #8]
   20298:	e5845004 	str	r5, [r4, #4]
   2029c:	e584600c 	str	r6, [r4, #12]
   202a0:	e5841000 	str	r1, [r4]
   202a4:	edc40b04 	vstr	d16, [r4, #16]
   202a8:	e5842018 	str	r2, [r4, #24]
   202ac:	0a000001 	beq	202b8 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   202b0:	e1a00004 	mov	r0, r4
   202b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   202b8:	e3a0201f 	mov	r2, #31
   202bc:	e30f1504 	movw	r1, #62724	; 0xf504
   202c0:	e30a0fdc 	movw	r0, #45020	; 0xafdc
   202c4:	e3401002 	movt	r1, #2
   202c8:	e3400002 	movt	r0, #2
   202cc:	eb001233 	bl	24ba0 <assertion_failed>
   202d0:	e1a00004 	mov	r0, r4
   202d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   202d8:	0002f4f0 	.word	0x0002f4f0

000202dc <CTask::Run()>:
   202dc:	e30f1528 	movw	r1, #62760	; 0xf528
   202e0:	e3401002 	movt	r1, #2
   202e4:	e30b0138 	movw	r0, #45368	; 0xb138
   202e8:	e3400002 	movt	r0, #2
   202ec:	e3a02036 	mov	r2, #54	; 0x36
   202f0:	ea00122a 	b	24ba0 <assertion_failed>

000202f4 <CTask::~CTask()>:
   202f4:	e5d03004 	ldrb	r3, [r0, #4]
   202f8:	e59f2048 	ldr	r2, [pc, #72]	; 20348 <CTask::~CTask()+0x54>
   202fc:	e92d4010 	push	{r4, lr}
   20300:	e3530003 	cmp	r3, #3
   20304:	e1a04000 	mov	r4, r0
   20308:	e5802000 	str	r2, [r0]
   2030c:	0a000005 	beq	20328 <CTask::~CTask()+0x34>
   20310:	e30f1528 	movw	r1, #62760	; 0xf528
   20314:	e3401002 	movt	r1, #2
   20318:	e30f0534 	movw	r0, #62772	; 0xf534
   2031c:	e3400002 	movt	r0, #2
   20320:	e3a0202d 	mov	r2, #45	; 0x2d
   20324:	eb00121d 	bl	24ba0 <assertion_failed>
   20328:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
   2032c:	e3a03004 	mov	r3, #4
   20330:	e5c43004 	strb	r3, [r4, #4]
   20334:	e3500000 	cmp	r0, #0
   20338:	0a000000 	beq	20340 <CTask::~CTask()+0x4c>
   2033c:	eb000718 	bl	21fa4 <operator delete[](void*)>
   20340:	e1a00004 	mov	r0, r4
   20344:	e8bd8010 	pop	{r4, pc}
   20348:	0002f51c 	.word	0x0002f51c

0002034c <CTask::~CTask()>:
   2034c:	e92d4010 	push	{r4, lr}
   20350:	e1a04000 	mov	r4, r0
   20354:	ebffffe6 	bl	202f4 <CTask::~CTask()>
   20358:	e1a00004 	mov	r0, r4
   2035c:	e3a01050 	mov	r1, #80	; 0x50
   20360:	eb000710 	bl	21fa8 <operator delete(void*, unsigned int)>
   20364:	e1a00004 	mov	r0, r4
   20368:	e8bd8010 	pop	{r4, pc}

0002036c <CTask::TaskEntry(void*)>:
   2036c:	e92d4010 	push	{r4, lr}
   20370:	e2504000 	subs	r4, r0, #0
   20374:	0a00000e 	beq	203b4 <CTask::TaskEntry(void*)+0x48>
   20378:	e5943000 	ldr	r3, [r4]
   2037c:	e1a00004 	mov	r0, r4
   20380:	e5933008 	ldr	r3, [r3, #8]
   20384:	e12fff33 	blx	r3
   20388:	e3a03003 	mov	r3, #3
   2038c:	e5c43004 	strb	r3, [r4, #4]
   20390:	eb0001e4 	bl	20b28 <CScheduler::Get()>
   20394:	eb000135 	bl	20870 <CScheduler::Yield()>
   20398:	e30f1528 	movw	r1, #62760	; 0xf528
   2039c:	e3401002 	movt	r1, #2
   203a0:	e30b0138 	movw	r0, #45368	; 0xb138
   203a4:	e3400002 	movt	r0, #2
   203a8:	e3a0204f 	mov	r2, #79	; 0x4f
   203ac:	e8bd4010 	pop	{r4, lr}
   203b0:	ea0011fa 	b	24ba0 <assertion_failed>
   203b4:	e30f1528 	movw	r1, #62760	; 0xf528
   203b8:	e3401002 	movt	r1, #2
   203bc:	e30a0940 	movw	r0, #43328	; 0xa940
   203c0:	e3400002 	movt	r0, #2
   203c4:	e3a02048 	mov	r2, #72	; 0x48
   203c8:	eb0011f4 	bl	24ba0 <assertion_failed>
   203cc:	eaffffe9 	b	20378 <CTask::TaskEntry(void*)+0xc>

000203d0 <CTask::InitializeRegs()>:
   203d0:	e92d4010 	push	{r4, lr}
   203d4:	e1a04000 	mov	r4, r0
   203d8:	e3a0203c 	mov	r2, #60	; 0x3c
   203dc:	e280000c 	add	r0, r0, #12
   203e0:	e3a01000 	mov	r1, #0
   203e4:	eb000a5f 	bl	22d68 <memset>
   203e8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   203ec:	e584400c 	str	r4, [r4, #12]
   203f0:	e3530000 	cmp	r3, #0
   203f4:	0a000006 	beq	20414 <CTask::InitializeRegs()+0x44>
   203f8:	e5941048 	ldr	r1, [r4, #72]	; 0x48
   203fc:	e300236c 	movw	r2, #876	; 0x36c
   20400:	e3402002 	movt	r2, #2
   20404:	e5842044 	str	r2, [r4, #68]	; 0x44
   20408:	e0833001 	add	r3, r3, r1
   2040c:	e5843040 	str	r3, [r4, #64]	; 0x40
   20410:	e8bd8010 	pop	{r4, pc}
   20414:	e30f1528 	movw	r1, #62760	; 0xf528
   20418:	e3401002 	movt	r1, #2
   2041c:	e30f0554 	movw	r0, #62804	; 0xf554
   20420:	e3400002 	movt	r0, #2
   20424:	e3a0203f 	mov	r2, #63	; 0x3f
   20428:	eb0011dc 	bl	24ba0 <assertion_failed>
   2042c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   20430:	eafffff0 	b	203f8 <CTask::InitializeRegs()+0x28>

00020434 <CTask::CTask(unsigned int)>:
   20434:	e59f20a4 	ldr	r2, [pc, #164]	; 204e0 <CTask::CTask(unsigned int)+0xac>
   20438:	e3a03000 	mov	r3, #0
   2043c:	e92d4010 	push	{r4, lr}
   20440:	e3510000 	cmp	r1, #0
   20444:	e1a04000 	mov	r4, r0
   20448:	e5801048 	str	r1, [r0, #72]	; 0x48
   2044c:	e5802000 	str	r2, [r0]
   20450:	e5c03004 	strb	r3, [r0, #4]
   20454:	e580304c 	str	r3, [r0, #76]	; 0x4c
   20458:	0a000008 	beq	20480 <CTask::CTask(unsigned int)+0x4c>
   2045c:	e3510b01 	cmp	r1, #1024	; 0x400
   20460:	3a00000b 	bcc	20494 <CTask::CTask(unsigned int)+0x60>
   20464:	e3110003 	tst	r1, #3
   20468:	1a000012 	bne	204b8 <CTask::CTask(unsigned int)+0x84>
   2046c:	e1a00001 	mov	r0, r1
   20470:	eb0006c9 	bl	21f9c <operator new[](unsigned int)>
   20474:	e584004c 	str	r0, [r4, #76]	; 0x4c
   20478:	e1a00004 	mov	r0, r4
   2047c:	ebffffd3 	bl	203d0 <CTask::InitializeRegs()>
   20480:	eb0001a8 	bl	20b28 <CScheduler::Get()>
   20484:	e1a01004 	mov	r1, r4
   20488:	eb00002f 	bl	2054c <CScheduler::AddTask(CTask*)>
   2048c:	e1a00004 	mov	r0, r4
   20490:	e8bd8010 	pop	{r4, pc}
   20494:	e30f1528 	movw	r1, #62760	; 0xf528
   20498:	e3401002 	movt	r1, #2
   2049c:	e30f0564 	movw	r0, #62820	; 0xf564
   204a0:	e3400002 	movt	r0, #2
   204a4:	e3a02020 	mov	r2, #32
   204a8:	eb0011bc 	bl	24ba0 <assertion_failed>
   204ac:	e5941048 	ldr	r1, [r4, #72]	; 0x48
   204b0:	e3110003 	tst	r1, #3
   204b4:	0affffec 	beq	2046c <CTask::CTask(unsigned int)+0x38>
   204b8:	e3a02021 	mov	r2, #33	; 0x21
   204bc:	e30f1528 	movw	r1, #62760	; 0xf528
   204c0:	e3401002 	movt	r1, #2
   204c4:	e30f057c 	movw	r0, #62844	; 0xf57c
   204c8:	e3400002 	movt	r0, #2
   204cc:	eb0011b3 	bl	24ba0 <assertion_failed>
   204d0:	e5940048 	ldr	r0, [r4, #72]	; 0x48
   204d4:	eb0006b0 	bl	21f9c <operator new[](unsigned int)>
   204d8:	e584004c 	str	r0, [r4, #76]	; 0x4c
   204dc:	eaffffe5 	b	20478 <CTask::CTask(unsigned int)+0x44>
   204e0:	0002f51c 	.word	0x0002f51c

000204e4 <CScheduler::CScheduler()>:
   204e4:	e92d4070 	push	{r4, r5, r6, lr}
   204e8:	e3025824 	movw	r5, #10276	; 0x2824
   204ec:	e3405143 	movt	r5, #323	; 0x143
   204f0:	e3a03000 	mov	r3, #0
   204f4:	e1a04000 	mov	r4, r0
   204f8:	e5803050 	str	r3, [r0, #80]	; 0x50
   204fc:	e5952000 	ldr	r2, [r5]
   20500:	e5803054 	str	r3, [r0, #84]	; 0x54
   20504:	e1520003 	cmp	r2, r3
   20508:	e5803058 	str	r3, [r0, #88]	; 0x58
   2050c:	0a000005 	beq	20528 <CScheduler::CScheduler()+0x44>
   20510:	e30f159c 	movw	r1, #62876	; 0xf59c
   20514:	e3401002 	movt	r1, #2
   20518:	e30f05ac 	movw	r0, #62892	; 0xf5ac
   2051c:	e3400002 	movt	r0, #2
   20520:	e3a02022 	mov	r2, #34	; 0x22
   20524:	eb00119d 	bl	24ba0 <assertion_failed>
   20528:	e3a00050 	mov	r0, #80	; 0x50
   2052c:	e5854000 	str	r4, [r5]
   20530:	eb000698 	bl	21f98 <operator new(unsigned int)>
   20534:	e3a01000 	mov	r1, #0
   20538:	e1a05000 	mov	r5, r0
   2053c:	ebffffbc 	bl	20434 <CTask::CTask(unsigned int)>
   20540:	e5845054 	str	r5, [r4, #84]	; 0x54
   20544:	e1a00004 	mov	r0, r4
   20548:	e8bd8070 	pop	{r4, r5, r6, pc}

0002054c <CScheduler::AddTask(CTask*)>:
   2054c:	e92d4070 	push	{r4, r5, r6, lr}
   20550:	e1a04000 	mov	r4, r0
   20554:	e2515000 	subs	r5, r1, #0
   20558:	0a00001d 	beq	205d4 <CScheduler::AddTask(CTask*)+0x88>
   2055c:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   20560:	e3500000 	cmp	r0, #0
   20564:	0a000021 	beq	205f0 <CScheduler::AddTask(CTask*)+0xa4>
   20568:	e5943000 	ldr	r3, [r4]
   2056c:	e3530000 	cmp	r3, #0
   20570:	11a02004 	movne	r2, r4
   20574:	13a03000 	movne	r3, #0
   20578:	1a000003 	bne	2058c <CScheduler::AddTask(CTask*)+0x40>
   2057c:	ea000009 	b	205a8 <CScheduler::AddTask(CTask*)+0x5c>
   20580:	e5b21004 	ldr	r1, [r2, #4]!
   20584:	e3510000 	cmp	r1, #0
   20588:	0a000006 	beq	205a8 <CScheduler::AddTask(CTask*)+0x5c>
   2058c:	e2833001 	add	r3, r3, #1
   20590:	e1530000 	cmp	r3, r0
   20594:	1afffff9 	bne	20580 <CScheduler::AddTask(CTask*)+0x34>
   20598:	e3530014 	cmp	r3, #20
   2059c:	0a000003 	beq	205b0 <CScheduler::AddTask(CTask*)+0x64>
   205a0:	e2832001 	add	r2, r3, #1
   205a4:	e5842050 	str	r2, [r4, #80]	; 0x50
   205a8:	e7845103 	str	r5, [r4, r3, lsl #2]
   205ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   205b0:	eb0012fc 	bl	251a8 <CLogger::Get()>
   205b4:	e30f35c8 	movw	r3, #62920	; 0xf5c8
   205b8:	e3403002 	movt	r3, #2
   205bc:	e30f1594 	movw	r1, #62868	; 0xf594
   205c0:	e3401002 	movt	r1, #2
   205c4:	e3a02000 	mov	r2, #0
   205c8:	eb0013d3 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   205cc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   205d0:	eafffff2 	b	205a0 <CScheduler::AddTask(CTask*)+0x54>
   205d4:	e30f159c 	movw	r1, #62876	; 0xf59c
   205d8:	e3401002 	movt	r1, #2
   205dc:	e30f05bc 	movw	r0, #62908	; 0xf5bc
   205e0:	e3400002 	movt	r0, #2
   205e4:	e3a02075 	mov	r2, #117	; 0x75
   205e8:	eb00116c 	bl	24ba0 <assertion_failed>
   205ec:	eaffffda 	b	2055c <CScheduler::AddTask(CTask*)+0x10>
   205f0:	e1a03000 	mov	r3, r0
   205f4:	eaffffe9 	b	205a0 <CScheduler::AddTask(CTask*)+0x54>

000205f8 <CScheduler::RemoveTask(CTask*)>:
   205f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   205fc:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   20600:	e35e0000 	cmp	lr, #0
   20604:	0a00000b 	beq	20638 <CScheduler::RemoveTask(CTask*)+0x40>
   20608:	e5903000 	ldr	r3, [r0]
   2060c:	e1510003 	cmp	r1, r3
   20610:	11a02000 	movne	r2, r0
   20614:	13a03000 	movne	r3, #0
   20618:	1a000003 	bne	2062c <CScheduler::RemoveTask(CTask*)+0x34>
   2061c:	ea00000c 	b	20654 <CScheduler::RemoveTask(CTask*)+0x5c>
   20620:	e5b2c004 	ldr	ip, [r2, #4]!
   20624:	e15c0001 	cmp	ip, r1
   20628:	0a00000a 	beq	20658 <CScheduler::RemoveTask(CTask*)+0x60>
   2062c:	e2833001 	add	r3, r3, #1
   20630:	e153000e 	cmp	r3, lr
   20634:	1afffff9 	bne	20620 <CScheduler::RemoveTask(CTask*)+0x28>
   20638:	e30f159c 	movw	r1, #62876	; 0xf59c
   2063c:	e3401002 	movt	r1, #2
   20640:	e30b0138 	movw	r0, #45368	; 0xb138
   20644:	e3400002 	movt	r0, #2
   20648:	e3a0209b 	mov	r2, #155	; 0x9b
   2064c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   20650:	ea001152 	b	24ba0 <assertion_failed>
   20654:	e3a03000 	mov	r3, #0
   20658:	e24ee001 	sub	lr, lr, #1
   2065c:	e3a02000 	mov	r2, #0
   20660:	e15e0003 	cmp	lr, r3
   20664:	e7802103 	str	r2, [r0, r3, lsl #2]
   20668:	05803050 	streq	r3, [r0, #80]	; 0x50
   2066c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00020670 <CScheduler::~CScheduler()>:
   20670:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   20674:	e92d4010 	push	{r4, lr}
   20678:	e1a04000 	mov	r4, r0
   2067c:	e3530001 	cmp	r3, #1
   20680:	0a000005 	beq	2069c <CScheduler::~CScheduler()+0x2c>
   20684:	e30f159c 	movw	r1, #62876	; 0xf59c
   20688:	e3401002 	movt	r1, #2
   2068c:	e30f05e8 	movw	r0, #62952	; 0xf5e8
   20690:	e3400002 	movt	r0, #2
   20694:	e3a0202b 	mov	r2, #43	; 0x2b
   20698:	eb001140 	bl	24ba0 <assertion_failed>
   2069c:	e5941054 	ldr	r1, [r4, #84]	; 0x54
   206a0:	e5943000 	ldr	r3, [r4]
   206a4:	e1530001 	cmp	r3, r1
   206a8:	0a000006 	beq	206c8 <CScheduler::~CScheduler()+0x58>
   206ac:	e30f159c 	movw	r1, #62876	; 0xf59c
   206b0:	e3401002 	movt	r1, #2
   206b4:	e30f05f8 	movw	r0, #62968	; 0xf5f8
   206b8:	e3400002 	movt	r0, #2
   206bc:	e3a0202c 	mov	r2, #44	; 0x2c
   206c0:	eb001136 	bl	24ba0 <assertion_failed>
   206c4:	e5941054 	ldr	r1, [r4, #84]	; 0x54
   206c8:	e1a00004 	mov	r0, r4
   206cc:	ebffffc9 	bl	205f8 <CScheduler::RemoveTask(CTask*)>
   206d0:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   206d4:	e3500000 	cmp	r0, #0
   206d8:	0a000002 	beq	206e8 <CScheduler::~CScheduler()+0x78>
   206dc:	e5903000 	ldr	r3, [r0]
   206e0:	e5933004 	ldr	r3, [r3, #4]
   206e4:	e12fff33 	blx	r3
   206e8:	e3023824 	movw	r3, #10276	; 0x2824
   206ec:	e3403143 	movt	r3, #323	; 0x143
   206f0:	e3a02000 	mov	r2, #0
   206f4:	e1a00004 	mov	r0, r4
   206f8:	e5832000 	str	r2, [r3]
   206fc:	e8bd8010 	pop	{r4, pc}

00020700 <CScheduler::WakeTask(CTask**)>:
   20700:	e92d4070 	push	{r4, r5, r6, lr}
   20704:	e2515000 	subs	r5, r1, #0
   20708:	0a000010 	beq	20750 <CScheduler::WakeTask(CTask**)+0x50>
   2070c:	e5954000 	ldr	r4, [r5]
   20710:	e3a03000 	mov	r3, #0
   20714:	e5853000 	str	r3, [r5]
   20718:	e1540003 	cmp	r4, r3
   2071c:	0a000012 	beq	2076c <CScheduler::WakeTask(CTask**)+0x6c>
   20720:	e5d43004 	ldrb	r3, [r4, #4]
   20724:	e3530001 	cmp	r3, #1
   20728:	0a000005 	beq	20744 <CScheduler::WakeTask(CTask**)+0x44>
   2072c:	e30f159c 	movw	r1, #62876	; 0xf59c
   20730:	e3401002 	movt	r1, #2
   20734:	e30f0620 	movw	r0, #63008	; 0xf620
   20738:	e3400002 	movt	r0, #2
   2073c:	e3a020b9 	mov	r2, #185	; 0xb9
   20740:	eb001116 	bl	24ba0 <assertion_failed>
   20744:	e3a03000 	mov	r3, #0
   20748:	e5c43004 	strb	r3, [r4, #4]
   2074c:	e8bd8070 	pop	{r4, r5, r6, pc}
   20750:	e30f159c 	movw	r1, #62876	; 0xf59c
   20754:	e3401002 	movt	r1, #2
   20758:	e30f0614 	movw	r0, #62996	; 0xf614
   2075c:	e3400002 	movt	r0, #2
   20760:	e3a020ac 	mov	r2, #172	; 0xac
   20764:	eb00110d 	bl	24ba0 <assertion_failed>
   20768:	eaffffe7 	b	2070c <CScheduler::WakeTask(CTask**)+0xc>
   2076c:	e30f159c 	movw	r1, #62876	; 0xf59c
   20770:	e3401002 	movt	r1, #2
   20774:	e30f05bc 	movw	r0, #62908	; 0xf5bc
   20778:	e3400002 	movt	r0, #2
   2077c:	e3a020b8 	mov	r2, #184	; 0xb8
   20780:	eb001106 	bl	24ba0 <assertion_failed>
   20784:	eaffffe5 	b	20720 <CScheduler::WakeTask(CTask**)+0x20>

00020788 <CScheduler::GetNextTask()>:
   20788:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2078c:	e1a07000 	mov	r7, r0
   20790:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   20794:	e3540014 	cmp	r4, #20
   20798:	23a04000 	movcs	r4, #0
   2079c:	eb000963 	bl	22d30 <CTimer::Get()>
   207a0:	eb00070e 	bl	223e0 <CTimer::GetClockTicks()>
   207a4:	e5973050 	ldr	r3, [r7, #80]	; 0x50
   207a8:	e3530000 	cmp	r3, #0
   207ac:	0a00001b 	beq	20820 <CScheduler::GetNextTask()+0x98>
   207b0:	e30f959c 	movw	r9, #62876	; 0xf59c
   207b4:	e3409002 	movt	r9, #2
   207b8:	e30b8138 	movw	r8, #45368	; 0xb138
   207bc:	e3408002 	movt	r8, #2
   207c0:	e1a0a000 	mov	sl, r0
   207c4:	e3a06001 	mov	r6, #1
   207c8:	e2844001 	add	r4, r4, #1
   207cc:	e2866001 	add	r6, r6, #1
   207d0:	e1540003 	cmp	r4, r3
   207d4:	23a04000 	movcs	r4, #0
   207d8:	e7975104 	ldr	r5, [r7, r4, lsl #2]
   207dc:	e3550000 	cmp	r5, #0
   207e0:	0a00000c 	beq	20818 <CScheduler::GetNextTask()+0x90>
   207e4:	e5d52004 	ldrb	r2, [r5, #4]
   207e8:	e3520003 	cmp	r2, #3
   207ec:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   207f0:	ea000003 	b	20804 <CScheduler::GetNextTask()+0x7c>
   207f4:	00020824 	.word	0x00020824
   207f8:	00020818 	.word	0x00020818
   207fc:	00020854 	.word	0x00020854
   20800:	0002082c 	.word	0x0002082c
   20804:	e3a020e8 	mov	r2, #232	; 0xe8
   20808:	e1a01009 	mov	r1, r9
   2080c:	e1a00008 	mov	r0, r8
   20810:	eb0010e2 	bl	24ba0 <assertion_failed>
   20814:	e5973050 	ldr	r3, [r7, #80]	; 0x50
   20818:	e1530006 	cmp	r3, r6
   2081c:	2affffe9 	bcs	207c8 <CScheduler::GetNextTask()+0x40>
   20820:	e3a04014 	mov	r4, #20
   20824:	e1a00004 	mov	r0, r4
   20828:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2082c:	e1a00007 	mov	r0, r7
   20830:	e1a01005 	mov	r1, r5
   20834:	ebffff6f 	bl	205f8 <CScheduler::RemoveTask(CTask*)>
   20838:	e5953000 	ldr	r3, [r5]
   2083c:	e1a00005 	mov	r0, r5
   20840:	e3a04014 	mov	r4, #20
   20844:	e5933004 	ldr	r3, [r3, #4]
   20848:	e12fff33 	blx	r3
   2084c:	e1a00004 	mov	r0, r4
   20850:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20854:	e5952008 	ldr	r2, [r5, #8]
   20858:	e042200a 	sub	r2, r2, sl
   2085c:	e3520000 	cmp	r2, #0
   20860:	caffffec 	bgt	20818 <CScheduler::GetNextTask()+0x90>
   20864:	e3a03000 	mov	r3, #0
   20868:	e5c53004 	strb	r3, [r5, #4]
   2086c:	eaffffec 	b	20824 <CScheduler::GetNextTask()+0x9c>

00020870 <CScheduler::Yield()>:
   20870:	e92d4070 	push	{r4, r5, r6, lr}
   20874:	e30f659c 	movw	r6, #62876	; 0xf59c
   20878:	e3406002 	movt	r6, #2
   2087c:	e30f5648 	movw	r5, #63048	; 0xf648
   20880:	e3405002 	movt	r5, #2
   20884:	e1a04000 	mov	r4, r0
   20888:	ea000002 	b	20898 <CScheduler::Yield()+0x28>
   2088c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   20890:	e3530000 	cmp	r3, #0
   20894:	0a000016 	beq	208f4 <CScheduler::Yield()+0x84>
   20898:	e1a00004 	mov	r0, r4
   2089c:	ebffffb9 	bl	20788 <CScheduler::GetNextTask()>
   208a0:	e3500014 	cmp	r0, #20
   208a4:	e5840058 	str	r0, [r4, #88]	; 0x58
   208a8:	0afffff7 	beq	2088c <CScheduler::Yield()+0x1c>
   208ac:	e3500013 	cmp	r0, #19
   208b0:	8a000014 	bhi	20908 <CScheduler::Yield()+0x98>
   208b4:	e7945100 	ldr	r5, [r4, r0, lsl #2]
   208b8:	e3550000 	cmp	r5, #0
   208bc:	0a000019 	beq	20928 <CScheduler::Yield()+0xb8>
   208c0:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   208c4:	e1550000 	cmp	r5, r0
   208c8:	08bd8070 	popeq	{r4, r5, r6, pc}
   208cc:	e5845054 	str	r5, [r4, #84]	; 0x54
   208d0:	e285500c 	add	r5, r5, #12
   208d4:	e290400c 	adds	r4, r0, #12
   208d8:	0a000019 	beq	20944 <CScheduler::Yield()+0xd4>
   208dc:	e3550000 	cmp	r5, #0
   208e0:	0a00001e 	beq	20960 <CScheduler::Yield()+0xf0>
   208e4:	e1a01005 	mov	r1, r5
   208e8:	e1a00004 	mov	r0, r4
   208ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   208f0:	ea00009a 	b	20b60 <TaskSwitch>
   208f4:	e3a02038 	mov	r2, #56	; 0x38
   208f8:	e1a01006 	mov	r1, r6
   208fc:	e1a00005 	mov	r0, r5
   20900:	eb0010a6 	bl	24ba0 <assertion_failed>
   20904:	eaffffe3 	b	20898 <CScheduler::Yield()+0x28>
   20908:	e30f159c 	movw	r1, #62876	; 0xf59c
   2090c:	e3401002 	movt	r1, #2
   20910:	e30f0658 	movw	r0, #63064	; 0xf658
   20914:	e3400002 	movt	r0, #2
   20918:	e3a0203b 	mov	r2, #59	; 0x3b
   2091c:	eb00109f 	bl	24ba0 <assertion_failed>
   20920:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   20924:	eaffffe2 	b	208b4 <CScheduler::Yield()+0x44>
   20928:	e30f159c 	movw	r1, #62876	; 0xf59c
   2092c:	e3401002 	movt	r1, #2
   20930:	e30f0670 	movw	r0, #63088	; 0xf670
   20934:	e3400002 	movt	r0, #2
   20938:	e3a0203d 	mov	r2, #61	; 0x3d
   2093c:	eb001097 	bl	24ba0 <assertion_failed>
   20940:	eaffffde 	b	208c0 <CScheduler::Yield()+0x50>
   20944:	e30f159c 	movw	r1, #62876	; 0xf59c
   20948:	e3401002 	movt	r1, #2
   2094c:	e30f067c 	movw	r0, #63100	; 0xf67c
   20950:	e3400002 	movt	r0, #2
   20954:	e3a02047 	mov	r2, #71	; 0x47
   20958:	eb001090 	bl	24ba0 <assertion_failed>
   2095c:	eaffffde 	b	208dc <CScheduler::Yield()+0x6c>
   20960:	e30f159c 	movw	r1, #62876	; 0xf59c
   20964:	e3401002 	movt	r1, #2
   20968:	e30f068c 	movw	r0, #63116	; 0xf68c
   2096c:	e3400002 	movt	r0, #2
   20970:	e3a02048 	mov	r2, #72	; 0x48
   20974:	eb001089 	bl	24ba0 <assertion_failed>
   20978:	eaffffd9 	b	208e4 <CScheduler::Yield()+0x74>

0002097c <CScheduler::usSleep(unsigned int) [clone .part.2]>:
   2097c:	e92d4070 	push	{r4, r5, r6, lr}
   20980:	e1a05000 	mov	r5, r0
   20984:	e1a06001 	mov	r6, r1
   20988:	eb0008e8 	bl	22d30 <CTimer::Get()>
   2098c:	eb000693 	bl	223e0 <CTimer::GetClockTicks()>
   20990:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   20994:	e1a04000 	mov	r4, r0
   20998:	e3530000 	cmp	r3, #0
   2099c:	0a000011 	beq	209e8 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x6c>
   209a0:	e5d32004 	ldrb	r2, [r3, #4]
   209a4:	e3520000 	cmp	r2, #0
   209a8:	1a000006 	bne	209c8 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x4c>
   209ac:	e0844006 	add	r4, r4, r6
   209b0:	e1a00005 	mov	r0, r5
   209b4:	e5834008 	str	r4, [r3, #8]
   209b8:	e3a02002 	mov	r2, #2
   209bc:	e8bd4070 	pop	{r4, r5, r6, lr}
   209c0:	e5c32004 	strb	r2, [r3, #4]
   209c4:	eaffffa9 	b	20870 <CScheduler::Yield()>
   209c8:	e30f159c 	movw	r1, #62876	; 0xf59c
   209cc:	e3401002 	movt	r1, #2
   209d0:	e30f06ac 	movw	r0, #63148	; 0xf6ac
   209d4:	e3400002 	movt	r0, #2
   209d8:	e3a0206b 	mov	r2, #107	; 0x6b
   209dc:	eb00106f 	bl	24ba0 <assertion_failed>
   209e0:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   209e4:	eafffff0 	b	209ac <CScheduler::usSleep(unsigned int) [clone .part.2]+0x30>
   209e8:	e30f159c 	movw	r1, #62876	; 0xf59c
   209ec:	e3401002 	movt	r1, #2
   209f0:	e30f069c 	movw	r0, #63132	; 0xf69c
   209f4:	e3400002 	movt	r0, #2
   209f8:	e3a0206a 	mov	r2, #106	; 0x6a
   209fc:	eb001067 	bl	24ba0 <assertion_failed>
   20a00:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   20a04:	eaffffe5 	b	209a0 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x24>

00020a08 <CScheduler::usSleep(unsigned int)>:
   20a08:	e3510000 	cmp	r1, #0
   20a0c:	012fff1e 	bxeq	lr
   20a10:	eaffffd9 	b	2097c <CScheduler::usSleep(unsigned int) [clone .part.2]>

00020a14 <CScheduler::Sleep(unsigned int)>:
   20a14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20a18:	e3005708 	movw	r5, #1800	; 0x708
   20a1c:	e1a04001 	mov	r4, r1
   20a20:	e1a07000 	mov	r7, r0
   20a24:	e1510005 	cmp	r1, r5
   20a28:	9a000008 	bls	20a50 <CScheduler::Sleep(unsigned int)+0x3c>
   20a2c:	e3a06cd2 	mov	r6, #53760	; 0xd200
   20a30:	e3466b49 	movt	r6, #27465	; 0x6b49
   20a34:	e2444c07 	sub	r4, r4, #1792	; 0x700
   20a38:	e1a01006 	mov	r1, r6
   20a3c:	e2444008 	sub	r4, r4, #8
   20a40:	e1a00007 	mov	r0, r7
   20a44:	ebffffcc 	bl	2097c <CScheduler::usSleep(unsigned int) [clone .part.2]>
   20a48:	e1540005 	cmp	r4, r5
   20a4c:	8afffff8 	bhi	20a34 <CScheduler::Sleep(unsigned int)+0x20>
   20a50:	e3041240 	movw	r1, #16960	; 0x4240
   20a54:	e340100f 	movt	r1, #15
   20a58:	e0010491 	mul	r1, r1, r4
   20a5c:	e3510000 	cmp	r1, #0
   20a60:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20a64:	e1a00007 	mov	r0, r7
   20a68:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   20a6c:	eaffffc2 	b	2097c <CScheduler::usSleep(unsigned int) [clone .part.2]>

00020a70 <CScheduler::MsSleep(unsigned int)>:
   20a70:	e3510000 	cmp	r1, #0
   20a74:	012fff1e 	bxeq	lr
   20a78:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   20a7c:	e0010193 	mul	r1, r3, r1
   20a80:	e3510000 	cmp	r1, #0
   20a84:	012fff1e 	bxeq	lr
   20a88:	eaffffbb 	b	2097c <CScheduler::usSleep(unsigned int) [clone .part.2]>

00020a8c <CScheduler::BlockTask(CTask**)>:
   20a8c:	e92d4070 	push	{r4, r5, r6, lr}
   20a90:	e1a04000 	mov	r4, r0
   20a94:	e2515000 	subs	r5, r1, #0
   20a98:	0a00001b 	beq	20b0c <CScheduler::BlockTask(CTask**)+0x80>
   20a9c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   20aa0:	e5853000 	str	r3, [r5]
   20aa4:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   20aa8:	e3530000 	cmp	r3, #0
   20aac:	0a00000e 	beq	20aec <CScheduler::BlockTask(CTask**)+0x60>
   20ab0:	e5d32004 	ldrb	r2, [r3, #4]
   20ab4:	e3520000 	cmp	r2, #0
   20ab8:	0a000006 	beq	20ad8 <CScheduler::BlockTask(CTask**)+0x4c>
   20abc:	e30f159c 	movw	r1, #62876	; 0xf59c
   20ac0:	e3401002 	movt	r1, #2
   20ac4:	e30f06ac 	movw	r0, #63148	; 0xf6ac
   20ac8:	e3400002 	movt	r0, #2
   20acc:	e3a020a4 	mov	r2, #164	; 0xa4
   20ad0:	eb001032 	bl	24ba0 <assertion_failed>
   20ad4:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   20ad8:	e1a00004 	mov	r0, r4
   20adc:	e3a02001 	mov	r2, #1
   20ae0:	e8bd4070 	pop	{r4, r5, r6, lr}
   20ae4:	e5c32004 	strb	r2, [r3, #4]
   20ae8:	eaffff60 	b	20870 <CScheduler::Yield()>
   20aec:	e30f159c 	movw	r1, #62876	; 0xf59c
   20af0:	e3401002 	movt	r1, #2
   20af4:	e30f069c 	movw	r0, #63132	; 0xf69c
   20af8:	e3400002 	movt	r0, #2
   20afc:	e3a020a3 	mov	r2, #163	; 0xa3
   20b00:	eb001026 	bl	24ba0 <assertion_failed>
   20b04:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   20b08:	eaffffe8 	b	20ab0 <CScheduler::BlockTask(CTask**)+0x24>
   20b0c:	e30f159c 	movw	r1, #62876	; 0xf59c
   20b10:	e3401002 	movt	r1, #2
   20b14:	e30f0614 	movw	r0, #62996	; 0xf614
   20b18:	e3400002 	movt	r0, #2
   20b1c:	e3a020a0 	mov	r2, #160	; 0xa0
   20b20:	eb00101e 	bl	24ba0 <assertion_failed>
   20b24:	eaffffdc 	b	20a9c <CScheduler::BlockTask(CTask**)+0x10>

00020b28 <CScheduler::Get()>:
   20b28:	e92d4010 	push	{r4, lr}
   20b2c:	e3024824 	movw	r4, #10276	; 0x2824
   20b30:	e3404143 	movt	r4, #323	; 0x143
   20b34:	e5940000 	ldr	r0, [r4]
   20b38:	e3500000 	cmp	r0, #0
   20b3c:	18bd8010 	popne	{r4, pc}
   20b40:	e3a020f2 	mov	r2, #242	; 0xf2
   20b44:	e30f159c 	movw	r1, #62876	; 0xf59c
   20b48:	e3401002 	movt	r1, #2
   20b4c:	e30a03a8 	movw	r0, #41896	; 0xa3a8
   20b50:	e3400002 	movt	r0, #2
   20b54:	eb001011 	bl	24ba0 <assertion_failed>
   20b58:	e5940000 	ldr	r0, [r4]
   20b5c:	e8bd8010 	pop	{r4, pc}

00020b60 <TaskSwitch>:
   20b60:	e8807fff 	stm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   20b64:	e8917fff 	ldm	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   20b68:	e12fff1e 	bx	lr

00020b6c <CSynchronizationEvent::CSynchronizationEvent(int)>:
   20b6c:	e3a02000 	mov	r2, #0
   20b70:	e5801000 	str	r1, [r0]
   20b74:	e5802004 	str	r2, [r0, #4]
   20b78:	e12fff1e 	bx	lr

00020b7c <CSynchronizationEvent::~CSynchronizationEvent()>:
   20b7c:	e5903004 	ldr	r3, [r0, #4]
   20b80:	e92d4010 	push	{r4, lr}
   20b84:	e1a04000 	mov	r4, r0
   20b88:	e3530000 	cmp	r3, #0
   20b8c:	0a000005 	beq	20ba8 <CSynchronizationEvent::~CSynchronizationEvent()+0x2c>
   20b90:	e30f16d8 	movw	r1, #63192	; 0xf6d8
   20b94:	e3401002 	movt	r1, #2
   20b98:	e30f06f4 	movw	r0, #63220	; 0xf6f4
   20b9c:	e3400002 	movt	r0, #2
   20ba0:	e3a02020 	mov	r2, #32
   20ba4:	eb000ffd 	bl	24ba0 <assertion_failed>
   20ba8:	e1a00004 	mov	r0, r4
   20bac:	e8bd8010 	pop	{r4, pc}

00020bb0 <CSynchronizationEvent::GetState()>:
   20bb0:	e5900000 	ldr	r0, [r0]
   20bb4:	e12fff1e 	bx	lr

00020bb8 <CSynchronizationEvent::Clear()>:
   20bb8:	e3a03000 	mov	r3, #0
   20bbc:	e5803000 	str	r3, [r0]
   20bc0:	e12fff1e 	bx	lr

00020bc4 <CSynchronizationEvent::Set()>:
   20bc4:	e5903000 	ldr	r3, [r0]
   20bc8:	e3530000 	cmp	r3, #0
   20bcc:	112fff1e 	bxne	lr
   20bd0:	e5903004 	ldr	r3, [r0, #4]
   20bd4:	e3a02001 	mov	r2, #1
   20bd8:	e5802000 	str	r2, [r0]
   20bdc:	e3530000 	cmp	r3, #0
   20be0:	012fff1e 	bxeq	lr
   20be4:	e92d4010 	push	{r4, lr}
   20be8:	e1a04000 	mov	r4, r0
   20bec:	ebffffcd 	bl	20b28 <CScheduler::Get()>
   20bf0:	e2841004 	add	r1, r4, #4
   20bf4:	e8bd4010 	pop	{r4, lr}
   20bf8:	eafffec0 	b	20700 <CScheduler::WakeTask(CTask**)>

00020bfc <CSynchronizationEvent::Wait()>:
   20bfc:	e5903000 	ldr	r3, [r0]
   20c00:	e3530000 	cmp	r3, #0
   20c04:	112fff1e 	bxne	lr
   20c08:	e5903004 	ldr	r3, [r0, #4]
   20c0c:	e92d4010 	push	{r4, lr}
   20c10:	e1a04000 	mov	r4, r0
   20c14:	e3530000 	cmp	r3, #0
   20c18:	0a000005 	beq	20c34 <CSynchronizationEvent::Wait()+0x38>
   20c1c:	e30f16d8 	movw	r1, #63192	; 0xf6d8
   20c20:	e3401002 	movt	r1, #2
   20c24:	e30f06f4 	movw	r0, #63220	; 0xf6f4
   20c28:	e3400002 	movt	r0, #2
   20c2c:	e3a0203e 	mov	r2, #62	; 0x3e
   20c30:	eb000fda 	bl	24ba0 <assertion_failed>
   20c34:	ebffffbb 	bl	20b28 <CScheduler::Get()>
   20c38:	e2841004 	add	r1, r4, #4
   20c3c:	ebffff92 	bl	20a8c <CScheduler::BlockTask(CTask**)>
   20c40:	e5943000 	ldr	r3, [r4]
   20c44:	e3530000 	cmp	r3, #0
   20c48:	18bd8010 	popne	{r4, pc}
   20c4c:	e30f16d8 	movw	r1, #63192	; 0xf6d8
   20c50:	e3401002 	movt	r1, #2
   20c54:	e30f0708 	movw	r0, #63240	; 0xf708
   20c58:	e3400002 	movt	r0, #2
   20c5c:	e3a02041 	mov	r2, #65	; 0x41
   20c60:	e8bd4010 	pop	{r4, lr}
   20c64:	ea000fcd 	b	24ba0 <assertion_failed>

00020c68 <CActLED::~CActLED()>:
   20c68:	e3023828 	movw	r3, #10280	; 0x2828
   20c6c:	e3403143 	movt	r3, #323	; 0x143
   20c70:	e3a02000 	mov	r2, #0
   20c74:	e5832000 	str	r2, [r3]
   20c78:	e12fff1e 	bx	lr

00020c7c <CActLED::On()>:
   20c7c:	e5903000 	ldr	r3, [r0]
   20c80:	e3530000 	cmp	r3, #0
   20c84:	0a000004 	beq	20c9c <CActLED::On()+0x20>
   20c88:	e5901008 	ldr	r1, [r0, #8]
   20c8c:	e1a00003 	mov	r0, r3
   20c90:	e2911000 	adds	r1, r1, #0
   20c94:	13a01001 	movne	r1, #1
   20c98:	ea0000f1 	b	21064 <CGPIOPin::Write(unsigned int)>
   20c9c:	e5903004 	ldr	r3, [r0, #4]
   20ca0:	e3530000 	cmp	r3, #0
   20ca4:	012fff1e 	bxeq	lr
   20ca8:	e5901008 	ldr	r1, [r0, #8]
   20cac:	e1a00003 	mov	r0, r3
   20cb0:	e2911000 	adds	r1, r1, #0
   20cb4:	13a01001 	movne	r1, #1
   20cb8:	ea001e87 	b	286dc <CVirtualGPIOPin::Write(unsigned int)>

00020cbc <CActLED::Off()>:
   20cbc:	e5903000 	ldr	r3, [r0]
   20cc0:	e3530000 	cmp	r3, #0
   20cc4:	0a000004 	beq	20cdc <CActLED::Off()+0x20>
   20cc8:	e5901008 	ldr	r1, [r0, #8]
   20ccc:	e1a00003 	mov	r0, r3
   20cd0:	e16f1f11 	clz	r1, r1
   20cd4:	e1a012a1 	lsr	r1, r1, #5
   20cd8:	ea0000e1 	b	21064 <CGPIOPin::Write(unsigned int)>
   20cdc:	e5903004 	ldr	r3, [r0, #4]
   20ce0:	e3530000 	cmp	r3, #0
   20ce4:	012fff1e 	bxeq	lr
   20ce8:	e5901008 	ldr	r1, [r0, #8]
   20cec:	e1a00003 	mov	r0, r3
   20cf0:	e16f1f11 	clz	r1, r1
   20cf4:	e1a012a1 	lsr	r1, r1, #5
   20cf8:	ea001e77 	b	286dc <CVirtualGPIOPin::Write(unsigned int)>

00020cfc <CActLED::CActLED()>:
   20cfc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   20d00:	e1a04000 	mov	r4, r0
   20d04:	e3023828 	movw	r3, #10280	; 0x2828
   20d08:	e3403143 	movt	r3, #323	; 0x143
   20d0c:	e24dd024 	sub	sp, sp, #36	; 0x24
   20d10:	e3a05000 	mov	r5, #0
   20d14:	e5805000 	str	r5, [r0]
   20d18:	e28d0008 	add	r0, sp, #8
   20d1c:	e5845004 	str	r5, [r4, #4]
   20d20:	e5834000 	str	r4, [r3]
   20d24:	eb000053 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   20d28:	e3a03010 	mov	r3, #16
   20d2c:	e58d5000 	str	r5, [sp]
   20d30:	e28d0008 	add	r0, sp, #8
   20d34:	e3a01002 	mov	r1, #2
   20d38:	e3401001 	movt	r1, #1
   20d3c:	e08d2003 	add	r2, sp, r3
   20d40:	eb000094 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   20d44:	e1500005 	cmp	r0, r5
   20d48:	0a000011 	beq	20d94 <CActLED::CActLED()+0x98>
   20d4c:	e59d301c 	ldr	r3, [sp, #28]
   20d50:	e3130502 	tst	r3, #8388608	; 0x800000
   20d54:	1a000013 	bne	20da8 <CActLED::CActLED()+0xac>
   20d58:	e6ff3073 	uxth	r3, r3
   20d5c:	e353000f 	cmp	r3, #15
   20d60:	83a06001 	movhi	r6, #1
   20d64:	9a000021 	bls	20df0 <CActLED::CActLED()+0xf4>
   20d68:	e3a00028 	mov	r0, #40	; 0x28
   20d6c:	eb000489 	bl	21f98 <operator new(unsigned int)>
   20d70:	e3a03000 	mov	r3, #0
   20d74:	e1a05000 	mov	r5, r0
   20d78:	e3a02001 	mov	r2, #1
   20d7c:	e3a0102f 	mov	r1, #47	; 0x2f
   20d80:	eb00034d 	bl	21abc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   20d84:	e5845000 	str	r5, [r4]
   20d88:	e5846008 	str	r6, [r4, #8]
   20d8c:	e1a00004 	mov	r0, r4
   20d90:	ebffffc9 	bl	20cbc <CActLED::Off()>
   20d94:	e28d0008 	add	r0, sp, #8
   20d98:	eb00003c 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   20d9c:	e1a00004 	mov	r0, r4
   20da0:	e28dd024 	add	sp, sp, #36	; 0x24
   20da4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   20da8:	e7e73253 	ubfx	r3, r3, #4, #8
   20dac:	e3530001 	cmp	r3, #1
   20db0:	9a00000e 	bls	20df0 <CActLED::CActLED()+0xf4>
   20db4:	e353000c 	cmp	r3, #12
   20db8:	13530009 	cmpne	r3, #9
   20dbc:	03a06001 	moveq	r6, #1
   20dc0:	13a06000 	movne	r6, #0
   20dc4:	e3530008 	cmp	r3, #8
   20dc8:	12266001 	eorne	r6, r6, #1
   20dcc:	1affffe5 	bne	20d68 <CActLED::CActLED()+0x6c>
   20dd0:	e3a00010 	mov	r0, #16
   20dd4:	e2266001 	eor	r6, r6, #1
   20dd8:	eb00046e 	bl	21f98 <operator new(unsigned int)>
   20ddc:	e1a01005 	mov	r1, r5
   20de0:	e1a07000 	mov	r7, r0
   20de4:	eb001e00 	bl	285ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
   20de8:	e5847004 	str	r7, [r4, #4]
   20dec:	eaffffe5 	b	20d88 <CActLED::CActLED()+0x8c>
   20df0:	e3a00028 	mov	r0, #40	; 0x28
   20df4:	eb000467 	bl	21f98 <operator new(unsigned int)>
   20df8:	e3a03000 	mov	r3, #0
   20dfc:	e3a02001 	mov	r2, #1
   20e00:	e3a01010 	mov	r1, #16
   20e04:	e1a05000 	mov	r5, r0
   20e08:	eb00032b 	bl	21abc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   20e0c:	e3a03000 	mov	r3, #0
   20e10:	e5845000 	str	r5, [r4]
   20e14:	e5843008 	str	r3, [r4, #8]
   20e18:	eaffffdb 	b	20d8c <CActLED::CActLED()+0x90>

00020e1c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   20e1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20e20:	e2516000 	subs	r6, r1, #0
   20e24:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20e28:	e1a08003 	mov	r8, r3
   20e2c:	e1a07002 	mov	r7, r2
   20e30:	e1a05000 	mov	r5, r0
   20e34:	e3a04001 	mov	r4, #1
   20e38:	e1a00005 	mov	r0, r5
   20e3c:	e2844001 	add	r4, r4, #1
   20e40:	ebffff8d 	bl	20c7c <CActLED::On()>
   20e44:	e1a00007 	mov	r0, r7
   20e48:	eb00076b 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
   20e4c:	e1a00005 	mov	r0, r5
   20e50:	ebffff99 	bl	20cbc <CActLED::Off()>
   20e54:	e1a00008 	mov	r0, r8
   20e58:	eb000767 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
   20e5c:	e1560004 	cmp	r6, r4
   20e60:	2afffff4 	bcs	20e38 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   20e64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00020e68 <CActLED::Get()>:
   20e68:	e3023828 	movw	r3, #10280	; 0x2828
   20e6c:	e3403143 	movt	r3, #323	; 0x143
   20e70:	e5930000 	ldr	r0, [r3]
   20e74:	e12fff1e 	bx	lr

00020e78 <CBcmPropertyTags::CBcmPropertyTags()>:
   20e78:	e92d4010 	push	{r4, lr}
   20e7c:	e3a01008 	mov	r1, #8
   20e80:	e1a04000 	mov	r4, r0
   20e84:	eb0022d3 	bl	299d8 <CBcmMailBox::CBcmMailBox(unsigned int)>
   20e88:	e1a00004 	mov	r0, r4
   20e8c:	e8bd8010 	pop	{r4, pc}

00020e90 <CBcmPropertyTags::~CBcmPropertyTags()>:
   20e90:	e92d4010 	push	{r4, lr}
   20e94:	e1a04000 	mov	r4, r0
   20e98:	eb0022d1 	bl	299e4 <CBcmMailBox::~CBcmMailBox()>
   20e9c:	e1a00004 	mov	r0, r4
   20ea0:	e8bd8010 	pop	{r4, pc}

00020ea4 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   20ea4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20ea8:	e2519000 	subs	r9, r1, #0
   20eac:	e1a0a000 	mov	sl, r0
   20eb0:	e1a04002 	mov	r4, r2
   20eb4:	0a000030 	beq	20f7c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
   20eb8:	e354000f 	cmp	r4, #15
   20ebc:	9a000027 	bls	20f60 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
   20ec0:	e284800c 	add	r8, r4, #12
   20ec4:	e3180003 	tst	r8, #3
   20ec8:	1a00001d 	bne	20f44 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   20ecc:	e3a06501 	mov	r6, #4194304	; 0x400000
   20ed0:	e3a05008 	mov	r5, #8
   20ed4:	e3405040 	movt	r5, #64	; 0x40
   20ed8:	e3a07000 	mov	r7, #0
   20edc:	e1a00005 	mov	r0, r5
   20ee0:	e5868000 	str	r8, [r6]
   20ee4:	e1a02004 	mov	r2, r4
   20ee8:	e5867004 	str	r7, [r6, #4]
   20eec:	e1a01009 	mov	r1, r9
   20ef0:	eb0008b4 	bl	231c8 <memcpy>
   20ef4:	e7857004 	str	r7, [r5, r4]
   20ef8:	f57ff04f 	dsb	sy
   20efc:	e1a01007 	mov	r1, r7
   20f00:	e1a0000a 	mov	r0, sl
   20f04:	e34c1040 	movt	r1, #49216	; 0xc040
   20f08:	eb0022e5 	bl	29aa4 <CBcmMailBox::WriteRead(unsigned int)>
   20f0c:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
   20f10:	0a000001 	beq	20f1c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
   20f14:	e3a00000 	mov	r0, #0
   20f18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20f1c:	f57ff05f 	dmb	sy
   20f20:	e5963004 	ldr	r3, [r6, #4]
   20f24:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   20f28:	1afffff9 	bne	20f14 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
   20f2c:	e1a02004 	mov	r2, r4
   20f30:	e1a01005 	mov	r1, r5
   20f34:	e1a00009 	mov	r0, r9
   20f38:	eb0008a2 	bl	231c8 <memcpy>
   20f3c:	e3a00001 	mov	r0, #1
   20f40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20f44:	e30f1714 	movw	r1, #63252	; 0xf714
   20f48:	e3401002 	movt	r1, #2
   20f4c:	e30f0760 	movw	r0, #63328	; 0xf760
   20f50:	e3400002 	movt	r0, #2
   20f54:	e3a02051 	mov	r2, #81	; 0x51
   20f58:	eb000f10 	bl	24ba0 <assertion_failed>
   20f5c:	eaffffda 	b	20ecc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
   20f60:	e30f1714 	movw	r1, #63252	; 0xf714
   20f64:	e3401002 	movt	r1, #2
   20f68:	e30f0734 	movw	r0, #63284	; 0xf734
   20f6c:	e3400002 	movt	r0, #2
   20f70:	e3a0204f 	mov	r2, #79	; 0x4f
   20f74:	eb000f09 	bl	24ba0 <assertion_failed>
   20f78:	eaffffd0 	b	20ec0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
   20f7c:	e30f1714 	movw	r1, #63252	; 0xf714
   20f80:	e3401002 	movt	r1, #2
   20f84:	e30f0728 	movw	r0, #63272	; 0xf728
   20f88:	e3400002 	movt	r0, #2
   20f8c:	e3a0204e 	mov	r2, #78	; 0x4e
   20f90:	eb000f02 	bl	24ba0 <assertion_failed>
   20f94:	eaffffc7 	b	20eb8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00020f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   20f98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20f9c:	e2524000 	subs	r4, r2, #0
   20fa0:	e1a08000 	mov	r8, r0
   20fa4:	e1a07001 	mov	r7, r1
   20fa8:	e1a05003 	mov	r5, r3
   20fac:	e59d6018 	ldr	r6, [sp, #24]
   20fb0:	0a00001d 	beq	2102c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
   20fb4:	e355000f 	cmp	r5, #15
   20fb8:	9a000014 	bls	21010 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
   20fbc:	e245300c 	sub	r3, r5, #12
   20fc0:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
   20fc4:	e5846008 	str	r6, [r4, #8]
   20fc8:	e1a00008 	mov	r0, r8
   20fcc:	e5847000 	str	r7, [r4]
   20fd0:	e1a02005 	mov	r2, r5
   20fd4:	e5843004 	str	r3, [r4, #4]
   20fd8:	e1a01004 	mov	r1, r4
   20fdc:	ebffffb0 	bl	20ea4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   20fe0:	e3500000 	cmp	r0, #0
   20fe4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20fe8:	e5940008 	ldr	r0, [r4, #8]
   20fec:	e3500000 	cmp	r0, #0
   20ff0:	ba000001 	blt	20ffc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
   20ff4:	e3a00000 	mov	r0, #0
   20ff8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20ffc:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   21000:	e5840008 	str	r0, [r4, #8]
   21004:	e2900000 	adds	r0, r0, #0
   21008:	13a00001 	movne	r0, #1
   2100c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21010:	e30f1714 	movw	r1, #63252	; 0xf714
   21014:	e3401002 	movt	r1, #2
   21018:	e30f0784 	movw	r0, #63364	; 0xf784
   2101c:	e3400002 	movt	r0, #2
   21020:	e3a02032 	mov	r2, #50	; 0x32
   21024:	eb000edd 	bl	24ba0 <assertion_failed>
   21028:	eaffffe3 	b	20fbc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
   2102c:	e30f1714 	movw	r1, #63252	; 0xf714
   21030:	e3401002 	movt	r1, #2
   21034:	e30f0778 	movw	r0, #63352	; 0xf778
   21038:	e3400002 	movt	r0, #2
   2103c:	e3a02031 	mov	r2, #49	; 0x31
   21040:	eb000ed6 	bl	24ba0 <assertion_failed>
   21044:	eaffffda 	b	20fb4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

00021048 <CGPIOPin::~CGPIOPin()>:
   21048:	e12fff1e 	bx	lr

0002104c <CGPIOPin::~CGPIOPin()>:
   2104c:	e92d4010 	push	{r4, lr}
   21050:	e3a01028 	mov	r1, #40	; 0x28
   21054:	e1a04000 	mov	r4, r0
   21058:	eb0003d2 	bl	21fa8 <operator delete(void*, unsigned int)>
   2105c:	e1a00004 	mov	r0, r4
   21060:	e8bd8010 	pop	{r4, pc}

00021064 <CGPIOPin::Write(unsigned int)>:
   21064:	e5d03010 	ldrb	r3, [r0, #16]
   21068:	e92d4070 	push	{r4, r5, r6, lr}
   2106c:	e1a04000 	mov	r4, r0
   21070:	e3530003 	cmp	r3, #3
   21074:	e1a05001 	mov	r5, r1
   21078:	ca000016 	bgt	210d8 <CGPIOPin::Write(unsigned int)+0x74>
   2107c:	e3550001 	cmp	r5, #1
   21080:	9a00000c 	bls	210b8 <CGPIOPin::Write(unsigned int)+0x54>
   21084:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21088:	e3401002 	movt	r1, #2
   2108c:	e30f0804 	movw	r0, #63492	; 0xf804
   21090:	e3400002 	movt	r0, #2
   21094:	e3a02084 	mov	r2, #132	; 0x84
   21098:	eb000ec0 	bl	24ba0 <assertion_failed>
   2109c:	e3a0301c 	mov	r3, #28
   210a0:	e3433f20 	movt	r3, #16160	; 0x3f20
   210a4:	e5845014 	str	r5, [r4, #20]
   210a8:	e5942008 	ldr	r2, [r4, #8]
   210ac:	e594100c 	ldr	r1, [r4, #12]
   210b0:	e7831002 	str	r1, [r3, r2]
   210b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   210b8:	e3a02028 	mov	r2, #40	; 0x28
   210bc:	e3432f20 	movt	r2, #16160	; 0x3f20
   210c0:	e3550000 	cmp	r5, #0
   210c4:	e3a0301c 	mov	r3, #28
   210c8:	e3433f20 	movt	r3, #16160	; 0x3f20
   210cc:	01a03002 	moveq	r3, r2
   210d0:	e5845014 	str	r5, [r4, #20]
   210d4:	eafffff3 	b	210a8 <CGPIOPin::Write(unsigned int)+0x44>
   210d8:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   210dc:	e3401002 	movt	r1, #2
   210e0:	e30f07e0 	movw	r0, #63456	; 0xf7e0
   210e4:	e3400002 	movt	r0, #2
   210e8:	e3a02080 	mov	r2, #128	; 0x80
   210ec:	eb000eab 	bl	24ba0 <assertion_failed>
   210f0:	eaffffe1 	b	2107c <CGPIOPin::Write(unsigned int)+0x18>

000210f4 <CGPIOPin::Read() const>:
   210f4:	e5d03010 	ldrb	r3, [r0, #16]
   210f8:	e92d4010 	push	{r4, lr}
   210fc:	e1a04000 	mov	r4, r0
   21100:	e2432002 	sub	r2, r3, #2
   21104:	e3530000 	cmp	r3, #0
   21108:	13520001 	cmpne	r2, #1
   2110c:	9a000005 	bls	21128 <CGPIOPin::Read() const+0x34>
   21110:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21114:	e3401002 	movt	r1, #2
   21118:	e30f0824 	movw	r0, #63524	; 0xf824
   2111c:	e3400002 	movt	r0, #2
   21120:	e3a02092 	mov	r2, #146	; 0x92
   21124:	eb000e9d 	bl	24ba0 <assertion_failed>
   21128:	e5941008 	ldr	r1, [r4, #8]
   2112c:	e3a03034 	mov	r3, #52	; 0x34
   21130:	e3433f20 	movt	r3, #16160	; 0x3f20
   21134:	e594200c 	ldr	r2, [r4, #12]
   21138:	e7913003 	ldr	r3, [r1, r3]
   2113c:	e1130002 	tst	r3, r2
   21140:	13a00001 	movne	r0, #1
   21144:	03a00000 	moveq	r0, #0
   21148:	e8bd8010 	pop	{r4, pc}

0002114c <CGPIOPin::Invert()>:
   2114c:	e5d03010 	ldrb	r3, [r0, #16]
   21150:	e92d4010 	push	{r4, lr}
   21154:	e1a04000 	mov	r4, r0
   21158:	e3530001 	cmp	r3, #1
   2115c:	0a000005 	beq	21178 <CGPIOPin::Invert()+0x2c>
   21160:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21164:	e3401002 	movt	r1, #2
   21168:	e30f0880 	movw	r0, #63616	; 0xf880
   2116c:	e3400002 	movt	r0, #2
   21170:	e3a0209f 	mov	r2, #159	; 0x9f
   21174:	eb000e89 	bl	24ba0 <assertion_failed>
   21178:	e5941014 	ldr	r1, [r4, #20]
   2117c:	e1a00004 	mov	r0, r4
   21180:	e8bd4010 	pop	{r4, lr}
   21184:	e2211001 	eor	r1, r1, #1
   21188:	eaffffb5 	b	21064 <CGPIOPin::Write(unsigned int)>

0002118c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
   2118c:	e5d03010 	ldrb	r3, [r0, #16]
   21190:	e92d4070 	push	{r4, r5, r6, lr}
   21194:	e1a06002 	mov	r6, r2
   21198:	e2432002 	sub	r2, r3, #2
   2119c:	e3530000 	cmp	r3, #0
   211a0:	13520001 	cmpne	r2, #1
   211a4:	e1a04000 	mov	r4, r0
   211a8:	e1a05001 	mov	r5, r1
   211ac:	9a000005 	bls	211c8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
   211b0:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   211b4:	e3401002 	movt	r1, #2
   211b8:	e30f0824 	movw	r0, #63524	; 0xf824
   211bc:	e3400002 	movt	r0, #2
   211c0:	e3a020a8 	mov	r2, #168	; 0xa8
   211c4:	eb000e75 	bl	24ba0 <assertion_failed>
   211c8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   211cc:	e3530006 	cmp	r3, #6
   211d0:	0a000005 	beq	211ec <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
   211d4:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   211d8:	e3401002 	movt	r1, #2
   211dc:	e30f089c 	movw	r0, #63644	; 0xf89c
   211e0:	e3400002 	movt	r0, #2
   211e4:	e3a020aa 	mov	r2, #170	; 0xaa
   211e8:	eb000e6c 	bl	24ba0 <assertion_failed>
   211ec:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   211f0:	e3530006 	cmp	r3, #6
   211f4:	0a000005 	beq	21210 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
   211f8:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   211fc:	e3401002 	movt	r1, #2
   21200:	e30f08c0 	movw	r0, #63680	; 0xf8c0
   21204:	e3400002 	movt	r0, #2
   21208:	e3a020ab 	mov	r2, #171	; 0xab
   2120c:	eb000e63 	bl	24ba0 <assertion_failed>
   21210:	e3550000 	cmp	r5, #0
   21214:	0a00001a 	beq	21284 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
   21218:	e594301c 	ldr	r3, [r4, #28]
   2121c:	e3530000 	cmp	r3, #0
   21220:	0a000005 	beq	2123c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
   21224:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21228:	e3401002 	movt	r1, #2
   2122c:	e30f08e8 	movw	r0, #63720	; 0xf8e8
   21230:	e3400002 	movt	r0, #2
   21234:	e3a020ae 	mov	r2, #174	; 0xae
   21238:	eb000e58 	bl	24ba0 <assertion_failed>
   2123c:	e5940018 	ldr	r0, [r4, #24]
   21240:	e584501c 	str	r5, [r4, #28]
   21244:	e3500000 	cmp	r0, #0
   21248:	e5846020 	str	r6, [r4, #32]
   2124c:	0a000002 	beq	2125c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
   21250:	e1a01004 	mov	r1, r4
   21254:	e8bd4070 	pop	{r4, r5, r6, lr}
   21258:	ea0018ef 	b	2761c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   2125c:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21260:	e3401002 	movt	r1, #2
   21264:	e30f08f8 	movw	r0, #63736	; 0xf8f8
   21268:	e3400002 	movt	r0, #2
   2126c:	e3a020b3 	mov	r2, #179	; 0xb3
   21270:	eb000e4a 	bl	24ba0 <assertion_failed>
   21274:	e5940018 	ldr	r0, [r4, #24]
   21278:	e1a01004 	mov	r1, r4
   2127c:	e8bd4070 	pop	{r4, r5, r6, lr}
   21280:	ea0018e5 	b	2761c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   21284:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21288:	e3401002 	movt	r1, #2
   2128c:	e3000f2c 	movw	r0, #3884	; 0xf2c
   21290:	e3400003 	movt	r0, #3
   21294:	e3a020ad 	mov	r2, #173	; 0xad
   21298:	eb000e40 	bl	24ba0 <assertion_failed>
   2129c:	eaffffdd 	b	21218 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

000212a0 <CGPIOPin::DisconnectInterrupt()>:
   212a0:	e5d03010 	ldrb	r3, [r0, #16]
   212a4:	e92d4010 	push	{r4, lr}
   212a8:	e1a04000 	mov	r4, r0
   212ac:	e2432002 	sub	r2, r3, #2
   212b0:	e3530000 	cmp	r3, #0
   212b4:	13520001 	cmpne	r2, #1
   212b8:	9a000005 	bls	212d4 <CGPIOPin::DisconnectInterrupt()+0x34>
   212bc:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   212c0:	e3401002 	movt	r1, #2
   212c4:	e30f0824 	movw	r0, #63524	; 0xf824
   212c8:	e3400002 	movt	r0, #2
   212cc:	e3a020bb 	mov	r2, #187	; 0xbb
   212d0:	eb000e32 	bl	24ba0 <assertion_failed>
   212d4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   212d8:	e3530006 	cmp	r3, #6
   212dc:	0a000005 	beq	212f8 <CGPIOPin::DisconnectInterrupt()+0x58>
   212e0:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   212e4:	e3401002 	movt	r1, #2
   212e8:	e30f089c 	movw	r0, #63644	; 0xf89c
   212ec:	e3400002 	movt	r0, #2
   212f0:	e3a020bd 	mov	r2, #189	; 0xbd
   212f4:	eb000e29 	bl	24ba0 <assertion_failed>
   212f8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   212fc:	e3530006 	cmp	r3, #6
   21300:	0a000005 	beq	2131c <CGPIOPin::DisconnectInterrupt()+0x7c>
   21304:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21308:	e3401002 	movt	r1, #2
   2130c:	e30f08c0 	movw	r0, #63680	; 0xf8c0
   21310:	e3400002 	movt	r0, #2
   21314:	e3a020be 	mov	r2, #190	; 0xbe
   21318:	eb000e20 	bl	24ba0 <assertion_failed>
   2131c:	e594301c 	ldr	r3, [r4, #28]
   21320:	e3530000 	cmp	r3, #0
   21324:	0a000011 	beq	21370 <CGPIOPin::DisconnectInterrupt()+0xd0>
   21328:	e5940018 	ldr	r0, [r4, #24]
   2132c:	e3a03000 	mov	r3, #0
   21330:	e584301c 	str	r3, [r4, #28]
   21334:	e1500003 	cmp	r0, r3
   21338:	0a000002 	beq	21348 <CGPIOPin::DisconnectInterrupt()+0xa8>
   2133c:	e1a01004 	mov	r1, r4
   21340:	e8bd4010 	pop	{r4, lr}
   21344:	ea0018e0 	b	276cc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   21348:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   2134c:	e3401002 	movt	r1, #2
   21350:	e30f08f8 	movw	r0, #63736	; 0xf8f8
   21354:	e3400002 	movt	r0, #2
   21358:	e3a020c3 	mov	r2, #195	; 0xc3
   2135c:	eb000e0f 	bl	24ba0 <assertion_failed>
   21360:	e5940018 	ldr	r0, [r4, #24]
   21364:	e1a01004 	mov	r1, r4
   21368:	e8bd4010 	pop	{r4, lr}
   2136c:	ea0018d6 	b	276cc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   21370:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21374:	e3401002 	movt	r1, #2
   21378:	e30f0908 	movw	r0, #63752	; 0xf908
   2137c:	e3400002 	movt	r0, #2
   21380:	e3a020c0 	mov	r2, #192	; 0xc0
   21384:	eb000e05 	bl	24ba0 <assertion_failed>
   21388:	eaffffe6 	b	21328 <CGPIOPin::DisconnectInterrupt()+0x88>

0002138c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   2138c:	e5d03010 	ldrb	r3, [r0, #16]
   21390:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21394:	e1a04000 	mov	r4, r0
   21398:	e2432002 	sub	r2, r3, #2
   2139c:	e3530000 	cmp	r3, #0
   213a0:	13520001 	cmpne	r2, #1
   213a4:	e1a08001 	mov	r8, r1
   213a8:	9a000005 	bls	213c4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
   213ac:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   213b0:	e3401002 	movt	r1, #2
   213b4:	e30f0824 	movw	r0, #63524	; 0xf824
   213b8:	e3400002 	movt	r0, #2
   213bc:	e3a020cb 	mov	r2, #203	; 0xcb
   213c0:	eb000df6 	bl	24ba0 <assertion_failed>
   213c4:	e594301c 	ldr	r3, [r4, #28]
   213c8:	e3530000 	cmp	r3, #0
   213cc:	0a000034 	beq	214a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
   213d0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   213d4:	e3530006 	cmp	r3, #6
   213d8:	0a000005 	beq	213f4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x68>
   213dc:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   213e0:	e3401002 	movt	r1, #2
   213e4:	e30f089c 	movw	r0, #63644	; 0xf89c
   213e8:	e3400002 	movt	r0, #2
   213ec:	e3a020ce 	mov	r2, #206	; 0xce
   213f0:	eb000dea 	bl	24ba0 <assertion_failed>
   213f4:	e3580005 	cmp	r8, #5
   213f8:	ca000019 	bgt	21464 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd8>
   213fc:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   21400:	e1530008 	cmp	r3, r8
   21404:	0a00001f 	beq	21488 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xfc>
   21408:	e302682c 	movw	r6, #10284	; 0x282c
   2140c:	e3406143 	movt	r6, #323	; 0x143
   21410:	e3a0700c 	mov	r7, #12
   21414:	e5943008 	ldr	r3, [r4, #8]
   21418:	e3a0504c 	mov	r5, #76	; 0x4c
   2141c:	e3435f20 	movt	r5, #16160	; 0x3f20
   21420:	e5960000 	ldr	r0, [r6]
   21424:	e0835005 	add	r5, r3, r5
   21428:	e5c48024 	strb	r8, [r4, #36]	; 0x24
   2142c:	e0070897 	mul	r7, r7, r8
   21430:	e3500000 	cmp	r0, #0
   21434:	1a000008 	bne	2145c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd0>
   21438:	e594200c 	ldr	r2, [r4, #12]
   2143c:	e7953007 	ldr	r3, [r5, r7]
   21440:	e1833002 	orr	r3, r3, r2
   21444:	e7853007 	str	r3, [r5, r7]
   21448:	e5963000 	ldr	r3, [r6]
   2144c:	e3530000 	cmp	r3, #0
   21450:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21454:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21458:	ea000308 	b	22080 <LeaveCritical>
   2145c:	eb0002d9 	bl	21fc8 <EnterCritical>
   21460:	eafffff4 	b	21438 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
   21464:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21468:	e3401002 	movt	r1, #2
   2146c:	e30f0918 	movw	r0, #63768	; 0xf918
   21470:	e3400002 	movt	r0, #2
   21474:	e3a020cf 	mov	r2, #207	; 0xcf
   21478:	eb000dc8 	bl	24ba0 <assertion_failed>
   2147c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   21480:	e1530008 	cmp	r3, r8
   21484:	1affffdf 	bne	21408 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
   21488:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   2148c:	e3401002 	movt	r1, #2
   21490:	e30f093c 	movw	r0, #63804	; 0xf93c
   21494:	e3400002 	movt	r0, #2
   21498:	e3a020d0 	mov	r2, #208	; 0xd0
   2149c:	eb000dbf 	bl	24ba0 <assertion_failed>
   214a0:	eaffffd8 	b	21408 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
   214a4:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   214a8:	e3401002 	movt	r1, #2
   214ac:	e30f0908 	movw	r0, #63752	; 0xf908
   214b0:	e3400002 	movt	r0, #2
   214b4:	e3a020cc 	mov	r2, #204	; 0xcc
   214b8:	eb000db8 	bl	24ba0 <assertion_failed>
   214bc:	eaffffc3 	b	213d0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>

000214c0 <CGPIOPin::DisableInterrupt()>:
   214c0:	e5d03010 	ldrb	r3, [r0, #16]
   214c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   214c8:	e1a04000 	mov	r4, r0
   214cc:	e2432002 	sub	r2, r3, #2
   214d0:	e3530000 	cmp	r3, #0
   214d4:	13520001 	cmpne	r2, #1
   214d8:	9a000005 	bls	214f4 <CGPIOPin::DisableInterrupt()+0x34>
   214dc:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   214e0:	e3401002 	movt	r1, #2
   214e4:	e30f0824 	movw	r0, #63524	; 0xf824
   214e8:	e3400002 	movt	r0, #2
   214ec:	e3a020e1 	mov	r2, #225	; 0xe1
   214f0:	eb000daa 	bl	24ba0 <assertion_failed>
   214f4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   214f8:	e3530005 	cmp	r3, #5
   214fc:	ca000017 	bgt	21560 <CGPIOPin::DisableInterrupt()+0xa0>
   21500:	e302682c 	movw	r6, #10284	; 0x282c
   21504:	e3406143 	movt	r6, #323	; 0x143
   21508:	e3a0700c 	mov	r7, #12
   2150c:	e5942008 	ldr	r2, [r4, #8]
   21510:	e3a0504c 	mov	r5, #76	; 0x4c
   21514:	e3435f20 	movt	r5, #16160	; 0x3f20
   21518:	e5960000 	ldr	r0, [r6]
   2151c:	e0825005 	add	r5, r2, r5
   21520:	e0070397 	mul	r7, r7, r3
   21524:	e3500000 	cmp	r0, #0
   21528:	1a00000a 	bne	21558 <CGPIOPin::DisableInterrupt()+0x98>
   2152c:	e7953007 	ldr	r3, [r5, r7]
   21530:	e594200c 	ldr	r2, [r4, #12]
   21534:	e1c33002 	bic	r3, r3, r2
   21538:	e7853007 	str	r3, [r5, r7]
   2153c:	e5963000 	ldr	r3, [r6]
   21540:	e3530000 	cmp	r3, #0
   21544:	0a000000 	beq	2154c <CGPIOPin::DisableInterrupt()+0x8c>
   21548:	eb0002cc 	bl	22080 <LeaveCritical>
   2154c:	e3a03006 	mov	r3, #6
   21550:	e5c43024 	strb	r3, [r4, #36]	; 0x24
   21554:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21558:	eb00029a 	bl	21fc8 <EnterCritical>
   2155c:	eafffff2 	b	2152c <CGPIOPin::DisableInterrupt()+0x6c>
   21560:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21564:	e3401002 	movt	r1, #2
   21568:	e30f0958 	movw	r0, #63832	; 0xf958
   2156c:	e3400002 	movt	r0, #2
   21570:	e3a020e3 	mov	r2, #227	; 0xe3
   21574:	eb000d89 	bl	24ba0 <assertion_failed>
   21578:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   2157c:	eaffffdf 	b	21500 <CGPIOPin::DisableInterrupt()+0x40>

00021580 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   21580:	e5d03010 	ldrb	r3, [r0, #16]
   21584:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21588:	e1a04000 	mov	r4, r0
   2158c:	e2432002 	sub	r2, r3, #2
   21590:	e3530000 	cmp	r3, #0
   21594:	13520001 	cmpne	r2, #1
   21598:	e1a08001 	mov	r8, r1
   2159c:	9a000005 	bls	215b8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
   215a0:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   215a4:	e3401002 	movt	r1, #2
   215a8:	e30f0824 	movw	r0, #63524	; 0xf824
   215ac:	e3400002 	movt	r0, #2
   215b0:	e3a020f4 	mov	r2, #244	; 0xf4
   215b4:	eb000d79 	bl	24ba0 <assertion_failed>
   215b8:	e594301c 	ldr	r3, [r4, #28]
   215bc:	e3530000 	cmp	r3, #0
   215c0:	0a000034 	beq	21698 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
   215c4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   215c8:	e3530006 	cmp	r3, #6
   215cc:	0a000005 	beq	215e8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x68>
   215d0:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   215d4:	e3401002 	movt	r1, #2
   215d8:	e30f08c0 	movw	r0, #63680	; 0xf8c0
   215dc:	e3400002 	movt	r0, #2
   215e0:	e3a020f7 	mov	r2, #247	; 0xf7
   215e4:	eb000d6d 	bl	24ba0 <assertion_failed>
   215e8:	e3580005 	cmp	r8, #5
   215ec:	ca000019 	bgt	21658 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd8>
   215f0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   215f4:	e1530008 	cmp	r3, r8
   215f8:	0a00001f 	beq	2167c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
   215fc:	e302682c 	movw	r6, #10284	; 0x282c
   21600:	e3406143 	movt	r6, #323	; 0x143
   21604:	e3a0700c 	mov	r7, #12
   21608:	e5943008 	ldr	r3, [r4, #8]
   2160c:	e3a0504c 	mov	r5, #76	; 0x4c
   21610:	e3435f20 	movt	r5, #16160	; 0x3f20
   21614:	e5960000 	ldr	r0, [r6]
   21618:	e0835005 	add	r5, r3, r5
   2161c:	e5c48025 	strb	r8, [r4, #37]	; 0x25
   21620:	e0070897 	mul	r7, r7, r8
   21624:	e3500000 	cmp	r0, #0
   21628:	1a000008 	bne	21650 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd0>
   2162c:	e594200c 	ldr	r2, [r4, #12]
   21630:	e7953007 	ldr	r3, [r5, r7]
   21634:	e1833002 	orr	r3, r3, r2
   21638:	e7853007 	str	r3, [r5, r7]
   2163c:	e5963000 	ldr	r3, [r6]
   21640:	e3530000 	cmp	r3, #0
   21644:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21648:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2164c:	ea00028b 	b	22080 <LeaveCritical>
   21650:	eb00025c 	bl	21fc8 <EnterCritical>
   21654:	eafffff4 	b	2162c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
   21658:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   2165c:	e3401002 	movt	r1, #2
   21660:	e30f0918 	movw	r0, #63768	; 0xf918
   21664:	e3400002 	movt	r0, #2
   21668:	e3a020f8 	mov	r2, #248	; 0xf8
   2166c:	eb000d4b 	bl	24ba0 <assertion_failed>
   21670:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   21674:	e1530008 	cmp	r3, r8
   21678:	1affffdf 	bne	215fc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
   2167c:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21680:	e3401002 	movt	r1, #2
   21684:	e30f097c 	movw	r0, #63868	; 0xf97c
   21688:	e3400002 	movt	r0, #2
   2168c:	e3a020f9 	mov	r2, #249	; 0xf9
   21690:	eb000d42 	bl	24ba0 <assertion_failed>
   21694:	eaffffd8 	b	215fc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
   21698:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   2169c:	e3401002 	movt	r1, #2
   216a0:	e30f0908 	movw	r0, #63752	; 0xf908
   216a4:	e3400002 	movt	r0, #2
   216a8:	e3a020f5 	mov	r2, #245	; 0xf5
   216ac:	eb000d3b 	bl	24ba0 <assertion_failed>
   216b0:	eaffffc3 	b	215c4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>

000216b4 <CGPIOPin::DisableInterrupt2()>:
   216b4:	e5d03010 	ldrb	r3, [r0, #16]
   216b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   216bc:	e1a04000 	mov	r4, r0
   216c0:	e2432002 	sub	r2, r3, #2
   216c4:	e3530000 	cmp	r3, #0
   216c8:	13520001 	cmpne	r2, #1
   216cc:	9a000005 	bls	216e8 <CGPIOPin::DisableInterrupt2()+0x34>
   216d0:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   216d4:	e3401002 	movt	r1, #2
   216d8:	e30f0824 	movw	r0, #63524	; 0xf824
   216dc:	e3400002 	movt	r0, #2
   216e0:	e300210a 	movw	r2, #266	; 0x10a
   216e4:	eb000d2d 	bl	24ba0 <assertion_failed>
   216e8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   216ec:	e3530005 	cmp	r3, #5
   216f0:	ca000017 	bgt	21754 <CGPIOPin::DisableInterrupt2()+0xa0>
   216f4:	e302682c 	movw	r6, #10284	; 0x282c
   216f8:	e3406143 	movt	r6, #323	; 0x143
   216fc:	e3a0700c 	mov	r7, #12
   21700:	e5942008 	ldr	r2, [r4, #8]
   21704:	e3a0504c 	mov	r5, #76	; 0x4c
   21708:	e3435f20 	movt	r5, #16160	; 0x3f20
   2170c:	e5960000 	ldr	r0, [r6]
   21710:	e0825005 	add	r5, r2, r5
   21714:	e0070397 	mul	r7, r7, r3
   21718:	e3500000 	cmp	r0, #0
   2171c:	1a00000a 	bne	2174c <CGPIOPin::DisableInterrupt2()+0x98>
   21720:	e7953007 	ldr	r3, [r5, r7]
   21724:	e594200c 	ldr	r2, [r4, #12]
   21728:	e1c33002 	bic	r3, r3, r2
   2172c:	e7853007 	str	r3, [r5, r7]
   21730:	e5963000 	ldr	r3, [r6]
   21734:	e3530000 	cmp	r3, #0
   21738:	0a000000 	beq	21740 <CGPIOPin::DisableInterrupt2()+0x8c>
   2173c:	eb00024f 	bl	22080 <LeaveCritical>
   21740:	e3a03006 	mov	r3, #6
   21744:	e5c43025 	strb	r3, [r4, #37]	; 0x25
   21748:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2174c:	eb00021d 	bl	21fc8 <EnterCritical>
   21750:	eafffff2 	b	21720 <CGPIOPin::DisableInterrupt2()+0x6c>
   21754:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21758:	e3401002 	movt	r1, #2
   2175c:	e30f0998 	movw	r0, #63896	; 0xf998
   21760:	e3400002 	movt	r0, #2
   21764:	e3a02f43 	mov	r2, #268	; 0x10c
   21768:	eb000d0c 	bl	24ba0 <assertion_failed>
   2176c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   21770:	eaffffdf 	b	216f4 <CGPIOPin::DisableInterrupt2()+0x40>

00021774 <CGPIOPin::ReadAll()>:
   21774:	e3a03000 	mov	r3, #0
   21778:	e3433f20 	movt	r3, #16160	; 0x3f20
   2177c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   21780:	e12fff1e 	bx	lr

00021784 <CGPIOPin::SetPullUpMode(unsigned int)>:
   21784:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21788:	e302582c 	movw	r5, #10284	; 0x282c
   2178c:	e3405143 	movt	r5, #323	; 0x143
   21790:	e1a07000 	mov	r7, r0
   21794:	e3a04098 	mov	r4, #152	; 0x98
   21798:	e3434f20 	movt	r4, #16160	; 0x3f20
   2179c:	e5950000 	ldr	r0, [r5]
   217a0:	e1a08001 	mov	r8, r1
   217a4:	e5973008 	ldr	r3, [r7, #8]
   217a8:	e3500000 	cmp	r0, #0
   217ac:	e0834004 	add	r4, r3, r4
   217b0:	1a000019 	bne	2181c <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
   217b4:	e3580002 	cmp	r8, #2
   217b8:	8a000010 	bhi	21800 <CGPIOPin::SetPullUpMode(unsigned int)+0x7c>
   217bc:	e3a06000 	mov	r6, #0
   217c0:	e3436f20 	movt	r6, #16160	; 0x3f20
   217c4:	e3a00005 	mov	r0, #5
   217c8:	e5868094 	str	r8, [r6, #148]	; 0x94
   217cc:	eb00051a 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
   217d0:	e597300c 	ldr	r3, [r7, #12]
   217d4:	e3a00005 	mov	r0, #5
   217d8:	e5843000 	str	r3, [r4]
   217dc:	eb000516 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
   217e0:	e3a03000 	mov	r3, #0
   217e4:	e5863094 	str	r3, [r6, #148]	; 0x94
   217e8:	e5843000 	str	r3, [r4]
   217ec:	e5953000 	ldr	r3, [r5]
   217f0:	e3530000 	cmp	r3, #0
   217f4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   217f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   217fc:	ea00021f 	b	22080 <LeaveCritical>
   21800:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21804:	e3401002 	movt	r1, #2
   21808:	e30f09bc 	movw	r0, #63932	; 0xf9bc
   2180c:	e3400002 	movt	r0, #2
   21810:	e3002125 	movw	r2, #293	; 0x125
   21814:	eb000ce1 	bl	24ba0 <assertion_failed>
   21818:	eaffffe7 	b	217bc <CGPIOPin::SetPullUpMode(unsigned int)+0x38>
   2181c:	eb0001e9 	bl	21fc8 <EnterCritical>
   21820:	eaffffe3 	b	217b4 <CGPIOPin::SetPullUpMode(unsigned int)+0x30>

00021824 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   21824:	e5902004 	ldr	r2, [r0, #4]
   21828:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2182c:	e1a06001 	mov	r6, r1
   21830:	e3520035 	cmp	r2, #53	; 0x35
   21834:	8a000026 	bhi	218d4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   21838:	e30c3ccd 	movw	r3, #52429	; 0xcccd
   2183c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
   21840:	e3a0100a 	mov	r1, #10
   21844:	e3560005 	cmp	r6, #5
   21848:	e0843293 	umull	r3, r4, r3, r2
   2184c:	e1a041a4 	lsr	r4, r4, #3
   21850:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
   21854:	e2833702 	add	r3, r3, #524288	; 0x80000
   21858:	e0642491 	mls	r4, r1, r4, r2
   2185c:	e1a07103 	lsl	r7, r3, #2
   21860:	e0844084 	add	r4, r4, r4, lsl #1
   21864:	8a000013 	bhi	218b8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
   21868:	e302582c 	movw	r5, #10284	; 0x282c
   2186c:	e3405143 	movt	r5, #323	; 0x143
   21870:	e5950000 	ldr	r0, [r5]
   21874:	e3500000 	cmp	r0, #0
   21878:	1a00000c 	bne	218b0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   2187c:	e5973000 	ldr	r3, [r7]
   21880:	e30f27ac 	movw	r2, #63404	; 0xf7ac
   21884:	e3402002 	movt	r2, #2
   21888:	e3a01007 	mov	r1, #7
   2188c:	e7922106 	ldr	r2, [r2, r6, lsl #2]
   21890:	e1c33411 	bic	r3, r3, r1, lsl r4
   21894:	e1834412 	orr	r4, r3, r2, lsl r4
   21898:	e5874000 	str	r4, [r7]
   2189c:	e5953000 	ldr	r3, [r5]
   218a0:	e3530000 	cmp	r3, #0
   218a4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   218a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   218ac:	ea0001f3 	b	22080 <LeaveCritical>
   218b0:	eb0001c4 	bl	21fc8 <EnterCritical>
   218b4:	eafffff0 	b	2187c <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
   218b8:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   218bc:	e3401002 	movt	r1, #2
   218c0:	e30f09dc 	movw	r0, #63964	; 0xf9dc
   218c4:	e3400002 	movt	r0, #2
   218c8:	e3002136 	movw	r2, #310	; 0x136
   218cc:	eb000cb3 	bl	24ba0 <assertion_failed>
   218d0:	eaffffe4 	b	21868 <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
   218d4:	e1a04000 	mov	r4, r0
   218d8:	e3002132 	movw	r2, #306	; 0x132
   218dc:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   218e0:	e3401002 	movt	r1, #2
   218e4:	e30f09c8 	movw	r0, #63944	; 0xf9c8
   218e8:	e3400002 	movt	r0, #2
   218ec:	eb000cab 	bl	24ba0 <assertion_failed>
   218f0:	e5942004 	ldr	r2, [r4, #4]
   218f4:	eaffffcf 	b	21838 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

000218f8 <CGPIOPin::SetMode(TGPIOMode, int)>:
   218f8:	e3510009 	cmp	r1, #9
   218fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21900:	e1a04001 	mov	r4, r1
   21904:	e1a05000 	mov	r5, r0
   21908:	e1a06002 	mov	r6, r2
   2190c:	e1a07001 	mov	r7, r1
   21910:	ca000037 	bgt	219f4 <CGPIOPin::SetMode(TGPIOMode, int)+0xfc>
   21914:	e2443004 	sub	r3, r4, #4
   21918:	e5c54010 	strb	r4, [r5, #16]
   2191c:	e3530005 	cmp	r3, #5
   21920:	9a00002d 	bls	219dc <CGPIOPin::SetMode(TGPIOMode, int)+0xe4>
   21924:	e2963000 	adds	r3, r6, #0
   21928:	13a03001 	movne	r3, #1
   2192c:	e3540001 	cmp	r4, #1
   21930:	13a03000 	movne	r3, #0
   21934:	e3530000 	cmp	r3, #0
   21938:	1a00005b 	bne	21aac <CGPIOPin::SetMode(TGPIOMode, int)+0x1b4>
   2193c:	e5952004 	ldr	r2, [r5, #4]
   21940:	e3520035 	cmp	r2, #53	; 0x35
   21944:	8a00003a 	bhi	21a34 <CGPIOPin::SetMode(TGPIOMode, int)+0x13c>
   21948:	e30c3ccd 	movw	r3, #52429	; 0xcccd
   2194c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
   21950:	e302782c 	movw	r7, #10284	; 0x282c
   21954:	e3407143 	movt	r7, #323	; 0x143
   21958:	e3a0100a 	mov	r1, #10
   2195c:	e0843293 	umull	r3, r4, r3, r2
   21960:	e5970000 	ldr	r0, [r7]
   21964:	e1a041a4 	lsr	r4, r4, #3
   21968:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
   2196c:	e3500000 	cmp	r0, #0
   21970:	e2833702 	add	r3, r3, #524288	; 0x80000
   21974:	e0642491 	mls	r4, r1, r4, r2
   21978:	e1a08103 	lsl	r8, r3, #2
   2197c:	e0844084 	add	r4, r4, r4, lsl #1
   21980:	1a000033 	bne	21a54 <CGPIOPin::SetMode(TGPIOMode, int)+0x15c>
   21984:	e5d52010 	ldrb	r2, [r5, #16]
   21988:	e3a01007 	mov	r1, #7
   2198c:	e5983000 	ldr	r3, [r8]
   21990:	e2422001 	sub	r2, r2, #1
   21994:	e16f2f12 	clz	r2, r2
   21998:	e1c33411 	bic	r3, r3, r1, lsl r4
   2199c:	e1a022a2 	lsr	r2, r2, #5
   219a0:	e1834412 	orr	r4, r3, r2, lsl r4
   219a4:	e5884000 	str	r4, [r8]
   219a8:	e5973000 	ldr	r3, [r7]
   219ac:	e3530000 	cmp	r3, #0
   219b0:	1a000029 	bne	21a5c <CGPIOPin::SetMode(TGPIOMode, int)+0x164>
   219b4:	e3560000 	cmp	r6, #0
   219b8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   219bc:	e5d53010 	ldrb	r3, [r5, #16]
   219c0:	e3530003 	cmp	r3, #3
   219c4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   219c8:	ea000010 	b	21a10 <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
   219cc:	00021a9c 	.word	0x00021a9c
   219d0:	00021a8c 	.word	0x00021a8c
   219d4:	00021a7c 	.word	0x00021a7c
   219d8:	00021a6c 	.word	0x00021a6c
   219dc:	e3560000 	cmp	r6, #0
   219e0:	1a00000b 	bne	21a14 <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
   219e4:	e2471004 	sub	r1, r7, #4
   219e8:	e1a00005 	mov	r0, r5
   219ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   219f0:	eaffff8b 	b	21824 <CGPIOPin::SetAlternateFunction(unsigned int)>
   219f4:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   219f8:	e3401002 	movt	r1, #2
   219fc:	e30f09ec 	movw	r0, #63980	; 0xf9ec
   21a00:	e3400002 	movt	r0, #2
   21a04:	e3a0203d 	mov	r2, #61	; 0x3d
   21a08:	eb000c64 	bl	24ba0 <assertion_failed>
   21a0c:	eaffffc0 	b	21914 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c>
   21a10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21a14:	e1a00005 	mov	r0, r5
   21a18:	e3a01000 	mov	r1, #0
   21a1c:	ebffff58 	bl	21784 <CGPIOPin::SetPullUpMode(unsigned int)>
   21a20:	e5d57010 	ldrb	r7, [r5, #16]
   21a24:	e1a00005 	mov	r0, r5
   21a28:	e2471004 	sub	r1, r7, #4
   21a2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21a30:	eaffff7b 	b	21824 <CGPIOPin::SetAlternateFunction(unsigned int)>
   21a34:	e3a02056 	mov	r2, #86	; 0x56
   21a38:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21a3c:	e3401002 	movt	r1, #2
   21a40:	e30f09c8 	movw	r0, #63944	; 0xf9c8
   21a44:	e3400002 	movt	r0, #2
   21a48:	eb000c54 	bl	24ba0 <assertion_failed>
   21a4c:	e5952004 	ldr	r2, [r5, #4]
   21a50:	eaffffbc 	b	21948 <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
   21a54:	eb00015b 	bl	21fc8 <EnterCritical>
   21a58:	eaffffc9 	b	21984 <CGPIOPin::SetMode(TGPIOMode, int)+0x8c>
   21a5c:	eb000187 	bl	22080 <LeaveCritical>
   21a60:	e3560000 	cmp	r6, #0
   21a64:	1affffd4 	bne	219bc <CGPIOPin::SetMode(TGPIOMode, int)+0xc4>
   21a68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21a6c:	e1a00005 	mov	r0, r5
   21a70:	e3a01001 	mov	r1, #1
   21a74:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21a78:	eaffff41 	b	21784 <CGPIOPin::SetPullUpMode(unsigned int)>
   21a7c:	e1a00005 	mov	r0, r5
   21a80:	e3a01002 	mov	r1, #2
   21a84:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21a88:	eaffff3d 	b	21784 <CGPIOPin::SetPullUpMode(unsigned int)>
   21a8c:	e1a00005 	mov	r0, r5
   21a90:	e3a01000 	mov	r1, #0
   21a94:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21a98:	eafffd71 	b	21064 <CGPIOPin::Write(unsigned int)>
   21a9c:	e1a00005 	mov	r0, r5
   21aa0:	e3a01000 	mov	r1, #0
   21aa4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21aa8:	eaffff35 	b	21784 <CGPIOPin::SetPullUpMode(unsigned int)>
   21aac:	e3a01000 	mov	r1, #0
   21ab0:	e1a00005 	mov	r0, r5
   21ab4:	ebffff32 	bl	21784 <CGPIOPin::SetPullUpMode(unsigned int)>
   21ab8:	eaffff9f 	b	2193c <CGPIOPin::SetMode(TGPIOMode, int)+0x44>

00021abc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   21abc:	e92d4070 	push	{r4, r5, r6, lr}
   21ac0:	e3510035 	cmp	r1, #53	; 0x35
   21ac4:	e1a04000 	mov	r4, r0
   21ac8:	e59fe0a0 	ldr	lr, [pc, #160]	; 21b70 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xb4>
   21acc:	e1a05001 	mov	r5, r1
   21ad0:	e3a0c00a 	mov	ip, #10
   21ad4:	e3a01006 	mov	r1, #6
   21ad8:	e3a00000 	mov	r0, #0
   21adc:	e5845004 	str	r5, [r4, #4]
   21ae0:	e5843018 	str	r3, [r4, #24]
   21ae4:	e1a06002 	mov	r6, r2
   21ae8:	e584e000 	str	lr, [r4]
   21aec:	e5c4c010 	strb	ip, [r4, #16]
   21af0:	e584001c 	str	r0, [r4, #28]
   21af4:	e5c41024 	strb	r1, [r4, #36]	; 0x24
   21af8:	e5c41025 	strb	r1, [r4, #37]	; 0x25
   21afc:	8a00000c 	bhi	21b34 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x78>
   21b00:	e205c01f 	and	ip, r5, #31
   21b04:	e3a03001 	mov	r3, #1
   21b08:	e1a052a5 	lsr	r5, r5, #5
   21b0c:	e1a02003 	mov	r2, r3
   21b10:	e1a00004 	mov	r0, r4
   21b14:	e1a01006 	mov	r1, r6
   21b18:	e1a03c13 	lsl	r3, r3, ip
   21b1c:	e1a05105 	lsl	r5, r5, #2
   21b20:	e5845008 	str	r5, [r4, #8]
   21b24:	e584300c 	str	r3, [r4, #12]
   21b28:	ebffff72 	bl	218f8 <CGPIOPin::SetMode(TGPIOMode, int)>
   21b2c:	e1a00004 	mov	r0, r4
   21b30:	e8bd8070 	pop	{r4, r5, r6, pc}
   21b34:	eb001bee 	bl	28af4 <CMachineInfo::Get()>
   21b38:	e6ef1075 	uxtb	r1, r5
   21b3c:	eb001bc1 	bl	28a48 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   21b40:	e3500035 	cmp	r0, #53	; 0x35
   21b44:	e1a05000 	mov	r5, r0
   21b48:	e5840004 	str	r0, [r4, #4]
   21b4c:	9affffeb 	bls	21b00 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
   21b50:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21b54:	e3401002 	movt	r1, #2
   21b58:	e30f09c8 	movw	r0, #63944	; 0xf9c8
   21b5c:	e3400002 	movt	r0, #2
   21b60:	e3a0202b 	mov	r2, #43	; 0x2b
   21b64:	eb000c0d 	bl	24ba0 <assertion_failed>
   21b68:	e5945004 	ldr	r5, [r4, #4]
   21b6c:	eaffffe3 	b	21b00 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
   21b70:	0002f7cc 	.word	0x0002f7cc

00021b74 <CGPIOPin::InterruptHandler()>:
   21b74:	e5d03010 	ldrb	r3, [r0, #16]
   21b78:	e92d4010 	push	{r4, lr}
   21b7c:	e1a04000 	mov	r4, r0
   21b80:	e2432002 	sub	r2, r3, #2
   21b84:	e3530000 	cmp	r3, #0
   21b88:	13520001 	cmpne	r2, #1
   21b8c:	9a000005 	bls	21ba8 <CGPIOPin::InterruptHandler()+0x34>
   21b90:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21b94:	e3401002 	movt	r1, #2
   21b98:	e30f0824 	movw	r0, #63524	; 0xf824
   21b9c:	e3400002 	movt	r0, #2
   21ba0:	e3002145 	movw	r2, #325	; 0x145
   21ba4:	eb000bfd 	bl	24ba0 <assertion_failed>
   21ba8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   21bac:	e3530005 	cmp	r3, #5
   21bb0:	da000002 	ble	21bc0 <CGPIOPin::InterruptHandler()+0x4c>
   21bb4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   21bb8:	e3530005 	cmp	r3, #5
   21bbc:	ca000005 	bgt	21bd8 <CGPIOPin::InterruptHandler()+0x64>
   21bc0:	e594301c 	ldr	r3, [r4, #28]
   21bc4:	e3530000 	cmp	r3, #0
   21bc8:	0a00000b 	beq	21bfc <CGPIOPin::InterruptHandler()+0x88>
   21bcc:	e5940020 	ldr	r0, [r4, #32]
   21bd0:	e8bd4010 	pop	{r4, lr}
   21bd4:	e12fff13 	bx	r3
   21bd8:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21bdc:	e3401002 	movt	r1, #2
   21be0:	e30f0a04 	movw	r0, #64004	; 0xfa04
   21be4:	e3400002 	movt	r0, #2
   21be8:	e3002147 	movw	r2, #327	; 0x147
   21bec:	eb000beb 	bl	24ba0 <assertion_failed>
   21bf0:	e594301c 	ldr	r3, [r4, #28]
   21bf4:	e3530000 	cmp	r3, #0
   21bf8:	1afffff3 	bne	21bcc <CGPIOPin::InterruptHandler()+0x58>
   21bfc:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21c00:	e3401002 	movt	r1, #2
   21c04:	e30f0908 	movw	r0, #63752	; 0xf908
   21c08:	e3400002 	movt	r0, #2
   21c0c:	e3002149 	movw	r2, #329	; 0x149
   21c10:	eb000be2 	bl	24ba0 <assertion_failed>
   21c14:	e594301c 	ldr	r3, [r4, #28]
   21c18:	e5940020 	ldr	r0, [r4, #32]
   21c1c:	e8bd4010 	pop	{r4, lr}
   21c20:	e12fff13 	bx	r3

00021c24 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   21c24:	e3500035 	cmp	r0, #53	; 0x35
   21c28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21c2c:	e1a07000 	mov	r7, r0
   21c30:	8a000023 	bhi	21cc4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
   21c34:	e302682c 	movw	r6, #10284	; 0x282c
   21c38:	e3406143 	movt	r6, #323	; 0x143
   21c3c:	e3a04013 	mov	r4, #19
   21c40:	e3404fc8 	movt	r4, #4040	; 0xfc8
   21c44:	e207501f 	and	r5, r7, #31
   21c48:	e3a02001 	mov	r2, #1
   21c4c:	e5960000 	ldr	r0, [r6]
   21c50:	e08442a7 	add	r4, r4, r7, lsr #5
   21c54:	e3500000 	cmp	r0, #0
   21c58:	e1a04104 	lsl	r4, r4, #2
   21c5c:	e1a05512 	lsl	r5, r2, r5
   21c60:	1a000011 	bne	21cac <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   21c64:	e3a0308b 	mov	r3, #139	; 0x8b
   21c68:	e3433f20 	movt	r3, #16160	; 0x3f20
   21c6c:	e1540003 	cmp	r4, r3
   21c70:	8a00000c 	bhi	21ca8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   21c74:	e3a0108b 	mov	r1, #139	; 0x8b
   21c78:	e3431f20 	movt	r1, #16160	; 0x3f20
   21c7c:	e1e02005 	mvn	r2, r5
   21c80:	e5943000 	ldr	r3, [r4]
   21c84:	e0033002 	and	r3, r3, r2
   21c88:	e484300c 	str	r3, [r4], #12
   21c8c:	e1540001 	cmp	r4, r1
   21c90:	9afffffa 	bls	21c80 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x5c>
   21c94:	e5963000 	ldr	r3, [r6]
   21c98:	e3530000 	cmp	r3, #0
   21c9c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21ca0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21ca4:	ea0000f5 	b	22080 <LeaveCritical>
   21ca8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21cac:	eb0000c5 	bl	21fc8 <EnterCritical>
   21cb0:	e3a0308b 	mov	r3, #139	; 0x8b
   21cb4:	e3433f20 	movt	r3, #16160	; 0x3f20
   21cb8:	e1540003 	cmp	r4, r3
   21cbc:	9affffec 	bls	21c74 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
   21cc0:	eafffff3 	b	21c94 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   21cc4:	e30f17d4 	movw	r1, #63444	; 0xf7d4
   21cc8:	e3401002 	movt	r1, #2
   21ccc:	e30f0a50 	movw	r0, #64080	; 0xfa50
   21cd0:	e3400002 	movt	r0, #2
   21cd4:	e300214f 	movw	r2, #335	; 0x14f
   21cd8:	eb000bb0 	bl	24ba0 <assertion_failed>
   21cdc:	eaffffd4 	b	21c34 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

00021ce0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   21ce0:	e302382c 	movw	r3, #10284	; 0x282c
   21ce4:	e3403143 	movt	r3, #323	; 0x143
   21ce8:	e3a02001 	mov	r2, #1
   21cec:	e5832000 	str	r2, [r3]
   21cf0:	e12fff1e 	bx	lr

00021cf4 <__aeabi_uidiv>:
   21cf4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   21cf8:	e3a02000 	mov	r2, #0
   21cfc:	eb001f8f 	bl	29b40 <__Divide>
   21d00:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00021d04 <__aeabi_uidivmod>:
   21d04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   21d08:	e24dd00c 	sub	sp, sp, #12
   21d0c:	e28d2004 	add	r2, sp, #4
   21d10:	eb001f8a 	bl	29b40 <__Divide>
   21d14:	e59d1004 	ldr	r1, [sp, #4]
   21d18:	e28dd00c 	add	sp, sp, #12
   21d1c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00021d20 <__aeabi_idiv>:
   21d20:	ea001fb9 	b	29c0c <__DivideInteger>

00021d24 <CMemorySystem::~CMemorySystem()>:
   21d24:	e5903000 	ldr	r3, [r0]
   21d28:	e92d4070 	push	{r4, r5, r6, lr}
   21d2c:	e1a04000 	mov	r4, r0
   21d30:	e3530000 	cmp	r3, #0
   21d34:	0a000005 	beq	21d50 <CMemorySystem::~CMemorySystem()+0x2c>
   21d38:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   21d3c:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
   21d40:	e3c33005 	bic	r3, r3, #5
   21d44:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   21d48:	e3a03000 	mov	r3, #0
   21d4c:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   21d50:	e594500c 	ldr	r5, [r4, #12]
   21d54:	e3550000 	cmp	r5, #0
   21d58:	0a000004 	beq	21d70 <CMemorySystem::~CMemorySystem()+0x4c>
   21d5c:	e1a00005 	mov	r0, r5
   21d60:	eb000700 	bl	23968 <CPageTable::~CPageTable()>
   21d64:	e1a00005 	mov	r0, r5
   21d68:	e3a01008 	mov	r1, #8
   21d6c:	eb00008d 	bl	21fa8 <operator delete(void*, unsigned int)>
   21d70:	e5945008 	ldr	r5, [r4, #8]
   21d74:	e3a03000 	mov	r3, #0
   21d78:	e584300c 	str	r3, [r4, #12]
   21d7c:	e1550003 	cmp	r5, r3
   21d80:	0a000004 	beq	21d98 <CMemorySystem::~CMemorySystem()+0x74>
   21d84:	e1a00005 	mov	r0, r5
   21d88:	eb0006f6 	bl	23968 <CPageTable::~CPageTable()>
   21d8c:	e1a00005 	mov	r0, r5
   21d90:	e3a01008 	mov	r1, #8
   21d94:	eb000083 	bl	21fa8 <operator delete(void*, unsigned int)>
   21d98:	e1a00004 	mov	r0, r4
   21d9c:	e8bd8070 	pop	{r4, r5, r6, pc}

00021da0 <CMemorySystem::GetMemSize() const>:
   21da0:	e5900004 	ldr	r0, [r0, #4]
   21da4:	e12fff1e 	bx	lr

00021da8 <CMemorySystem::EnableMMU()>:
   21da8:	e5903000 	ldr	r3, [r0]
   21dac:	e92d4010 	push	{r4, lr}
   21db0:	e1a04000 	mov	r4, r0
   21db4:	e3530000 	cmp	r3, #0
   21db8:	0a00001f 	beq	21e3c <CMemorySystem::EnableMMU()+0x94>
   21dbc:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   21dc0:	e3833040 	orr	r3, r3, #64	; 0x40
   21dc4:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   21dc8:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   21dcc:	e3130001 	tst	r3, #1
   21dd0:	1a000020 	bne	21e58 <CMemorySystem::EnableMMU()+0xb0>
   21dd4:	e3a03002 	mov	r3, #2
   21dd8:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   21ddc:	e5940008 	ldr	r0, [r4, #8]
   21de0:	e3500000 	cmp	r0, #0
   21de4:	0a00002a 	beq	21e94 <CMemorySystem::EnableMMU()+0xec>
   21de8:	eb0006e7 	bl	2398c <CPageTable::GetBaseAddress() const>
   21dec:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   21df0:	e594000c 	ldr	r0, [r4, #12]
   21df4:	e3500000 	cmp	r0, #0
   21df8:	0a00001d 	beq	21e74 <CMemorySystem::EnableMMU()+0xcc>
   21dfc:	eb0006e2 	bl	2398c <CPageTable::GetBaseAddress() const>
   21e00:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
   21e04:	e3a03005 	mov	r3, #5
   21e08:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   21e0c:	eb001b61 	bl	28b98 <InvalidateDataCache>
   21e10:	e3a03000 	mov	r3, #0
   21e14:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   21e18:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   21e1c:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   21e20:	f57ff04f 	dsb	sy
   21e24:	f57ff06f 	isb	sy
   21e28:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   21e2c:	e3833b06 	orr	r3, r3, #6144	; 0x1800
   21e30:	e3833005 	orr	r3, r3, #5
   21e34:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   21e38:	e8bd8010 	pop	{r4, pc}
   21e3c:	e30f1a64 	movw	r1, #64100	; 0xfa64
   21e40:	e3401002 	movt	r1, #2
   21e44:	e30f0a70 	movw	r0, #64112	; 0xfa70
   21e48:	e3400002 	movt	r0, #2
   21e4c:	e3a020c0 	mov	r2, #192	; 0xc0
   21e50:	eb000b52 	bl	24ba0 <assertion_failed>
   21e54:	eaffffd8 	b	21dbc <CMemorySystem::EnableMMU()+0x14>
   21e58:	e30f1a64 	movw	r1, #64100	; 0xfa64
   21e5c:	e3401002 	movt	r1, #2
   21e60:	e30f0a80 	movw	r0, #64128	; 0xfa80
   21e64:	e3400002 	movt	r0, #2
   21e68:	e3a020cd 	mov	r2, #205	; 0xcd
   21e6c:	eb000b4b 	bl	24ba0 <assertion_failed>
   21e70:	eaffffd7 	b	21dd4 <CMemorySystem::EnableMMU()+0x2c>
   21e74:	e30f1a64 	movw	r1, #64100	; 0xfa64
   21e78:	e3401002 	movt	r1, #2
   21e7c:	e30f0ac8 	movw	r0, #64200	; 0xfac8
   21e80:	e3400002 	movt	r0, #2
   21e84:	e3a020d7 	mov	r2, #215	; 0xd7
   21e88:	eb000b44 	bl	24ba0 <assertion_failed>
   21e8c:	e594000c 	ldr	r0, [r4, #12]
   21e90:	eaffffd9 	b	21dfc <CMemorySystem::EnableMMU()+0x54>
   21e94:	e30f1a64 	movw	r1, #64100	; 0xfa64
   21e98:	e3401002 	movt	r1, #2
   21e9c:	e30f0aac 	movw	r0, #64172	; 0xfaac
   21ea0:	e3400002 	movt	r0, #2
   21ea4:	e3a020d3 	mov	r2, #211	; 0xd3
   21ea8:	eb000b3c 	bl	24ba0 <assertion_failed>
   21eac:	e5940008 	ldr	r0, [r4, #8]
   21eb0:	eaffffcc 	b	21de8 <CMemorySystem::EnableMMU()+0x40>

00021eb4 <CMemorySystem::CMemorySystem(int)>:
   21eb4:	e92d4030 	push	{r4, r5, lr}
   21eb8:	e1a04000 	mov	r4, r0
   21ebc:	e3a05000 	mov	r5, #0
   21ec0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   21ec4:	e8840022 	stm	r4, {r1, r5}
   21ec8:	e28d000c 	add	r0, sp, #12
   21ecc:	e5845008 	str	r5, [r4, #8]
   21ed0:	e584500c 	str	r5, [r4, #12]
   21ed4:	ebfffbe7 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   21ed8:	e3a03014 	mov	r3, #20
   21edc:	e58d5000 	str	r5, [sp]
   21ee0:	e28d000c 	add	r0, sp, #12
   21ee4:	e3a01005 	mov	r1, #5
   21ee8:	e3401001 	movt	r1, #1
   21eec:	e08d2003 	add	r2, sp, r3
   21ef0:	ebfffc28 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   21ef4:	e3500000 	cmp	r0, #0
   21ef8:	1a000019 	bne	21f64 <CMemorySystem::CMemorySystem(int)+0xb0>
   21efc:	e3a01303 	mov	r1, #201326592	; 0xc000000
   21f00:	e58d0020 	str	r0, [sp, #32]
   21f04:	e58d1024 	str	r1, [sp, #36]	; 0x24
   21f08:	e5841004 	str	r1, [r4, #4]
   21f0c:	eb001dac 	bl	295c4 <mem_init>
   21f10:	e5943000 	ldr	r3, [r4]
   21f14:	e3530000 	cmp	r3, #0
   21f18:	0a00000c 	beq	21f50 <CMemorySystem::CMemorySystem(int)+0x9c>
   21f1c:	e3a00008 	mov	r0, #8
   21f20:	eb00001c 	bl	21f98 <operator new(unsigned int)>
   21f24:	e5941004 	ldr	r1, [r4, #4]
   21f28:	e1a05000 	mov	r5, r0
   21f2c:	eb00063d 	bl	23828 <CPageTable::CPageTable(unsigned int)>
   21f30:	e5845008 	str	r5, [r4, #8]
   21f34:	e3a00008 	mov	r0, #8
   21f38:	eb000016 	bl	21f98 <operator new(unsigned int)>
   21f3c:	e1a05000 	mov	r5, r0
   21f40:	eb00060c 	bl	23778 <CPageTable::CPageTable()>
   21f44:	e584500c 	str	r5, [r4, #12]
   21f48:	e1a00004 	mov	r0, r4
   21f4c:	ebffff95 	bl	21da8 <CMemorySystem::EnableMMU()>
   21f50:	e28d000c 	add	r0, sp, #12
   21f54:	ebfffbcd 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   21f58:	e1a00004 	mov	r0, r4
   21f5c:	e28dd02c 	add	sp, sp, #44	; 0x2c
   21f60:	e8bd8030 	pop	{r4, r5, pc}
   21f64:	e59d0020 	ldr	r0, [sp, #32]
   21f68:	e3500000 	cmp	r0, #0
   21f6c:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
   21f70:	0affffe4 	beq	21f08 <CMemorySystem::CMemorySystem(int)+0x54>
   21f74:	e30f1a64 	movw	r1, #64100	; 0xfa64
   21f78:	e3401002 	movt	r1, #2
   21f7c:	e30f0adc 	movw	r0, #64220	; 0xfadc
   21f80:	e3400002 	movt	r0, #2
   21f84:	e3a02042 	mov	r2, #66	; 0x42
   21f88:	eb000b04 	bl	24ba0 <assertion_failed>
   21f8c:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   21f90:	e59d0020 	ldr	r0, [sp, #32]
   21f94:	eaffffdb 	b	21f08 <CMemorySystem::CMemorySystem(int)+0x54>

00021f98 <operator new(unsigned int)>:
   21f98:	ea001da2 	b	29628 <malloc>

00021f9c <operator new[](unsigned int)>:
   21f9c:	ea001da1 	b	29628 <malloc>

00021fa0 <operator delete(void*)>:
   21fa0:	ea001e02 	b	297b0 <free>

00021fa4 <operator delete[](void*)>:
   21fa4:	ea001e01 	b	297b0 <free>

00021fa8 <operator delete(void*, unsigned int)>:
   21fa8:	ea001e00 	b	297b0 <free>

00021fac <operator delete[](void*, unsigned int)>:
   21fac:	ea001dff 	b	297b0 <free>

00021fb0 <__cxa_pure_virtual>:
   21fb0:	e30f1af8 	movw	r1, #64248	; 0xfaf8
   21fb4:	e3401002 	movt	r1, #2
   21fb8:	e30b0138 	movw	r0, #45368	; 0xb138
   21fbc:	e3400002 	movt	r0, #2
   21fc0:	e3a02018 	mov	r2, #24
   21fc4:	ea000af5 	b	24ba0 <assertion_failed>

00021fc8 <EnterCritical>:
   21fc8:	e2403001 	sub	r3, r0, #1
   21fcc:	e92d4070 	push	{r4, r5, r6, lr}
   21fd0:	e3530001 	cmp	r3, #1
   21fd4:	e1a04000 	mov	r4, r0
   21fd8:	9a000005 	bls	21ff4 <EnterCritical+0x2c>
   21fdc:	e30f1b08 	movw	r1, #64264	; 0xfb08
   21fe0:	e3401002 	movt	r1, #2
   21fe4:	e30f0b18 	movw	r0, #64280	; 0xfb18
   21fe8:	e3400002 	movt	r0, #2
   21fec:	e3a0204f 	mov	r2, #79	; 0x4f
   21ff0:	eb000aea 	bl	24ba0 <assertion_failed>
   21ff4:	e10f5000 	mrs	r5, CPSR
   21ff8:	e3540002 	cmp	r4, #2
   21ffc:	0a000001 	beq	22008 <EnterCritical+0x40>
   22000:	e3150040 	tst	r5, #64	; 0x40
   22004:	1a000016 	bne	22064 <EnterCritical+0x9c>
   22008:	f10c0080 	cpsid	i
   2200c:	e3540002 	cmp	r4, #2
   22010:	0a000011 	beq	2205c <EnterCritical+0x94>
   22014:	e3024830 	movw	r4, #10288	; 0x2830
   22018:	e3404143 	movt	r4, #323	; 0x143
   2201c:	e5943000 	ldr	r3, [r4]
   22020:	e3530013 	cmp	r3, #19
   22024:	9a000005 	bls	22040 <EnterCritical+0x78>
   22028:	e30f1b08 	movw	r1, #64264	; 0xfb08
   2202c:	e3401002 	movt	r1, #2
   22030:	e30f0b80 	movw	r0, #64384	; 0xfb80
   22034:	e3400002 	movt	r0, #2
   22038:	e3a0205d 	mov	r2, #93	; 0x5d
   2203c:	eb000ad7 	bl	24ba0 <assertion_failed>
   22040:	e5943000 	ldr	r3, [r4]
   22044:	e2832001 	add	r2, r3, #1
   22048:	e0843103 	add	r3, r4, r3, lsl #2
   2204c:	e5842000 	str	r2, [r4]
   22050:	e5835004 	str	r5, [r3, #4]
   22054:	f57ff05f 	dmb	sy
   22058:	e8bd8070 	pop	{r4, r5, r6, pc}
   2205c:	f10c0040 	cpsid	f
   22060:	eaffffeb 	b	22014 <EnterCritical+0x4c>
   22064:	e30f1b08 	movw	r1, #64264	; 0xfb08
   22068:	e3401002 	movt	r1, #2
   2206c:	e30f0b50 	movw	r0, #64336	; 0xfb50
   22070:	e3400002 	movt	r0, #2
   22074:	e3a02055 	mov	r2, #85	; 0x55
   22078:	eb000ac8 	bl	24ba0 <assertion_failed>
   2207c:	eaffffe1 	b	22008 <EnterCritical+0x40>

00022080 <LeaveCritical>:
   22080:	e92d4010 	push	{r4, lr}
   22084:	f57ff05f 	dmb	sy
   22088:	e3024830 	movw	r4, #10288	; 0x2830
   2208c:	e3404143 	movt	r4, #323	; 0x143
   22090:	e5943000 	ldr	r3, [r4]
   22094:	e3530000 	cmp	r3, #0
   22098:	1a000005 	bne	220b4 <LeaveCritical+0x34>
   2209c:	e30f1b08 	movw	r1, #64264	; 0xfb08
   220a0:	e3401002 	movt	r1, #2
   220a4:	e30f0ba8 	movw	r0, #64424	; 0xfba8
   220a8:	e3400002 	movt	r0, #2
   220ac:	e3a02067 	mov	r2, #103	; 0x67
   220b0:	eb000aba 	bl	24ba0 <assertion_failed>
   220b4:	e5943000 	ldr	r3, [r4]
   220b8:	e2433001 	sub	r3, r3, #1
   220bc:	e5843000 	str	r3, [r4]
   220c0:	e0844103 	add	r4, r4, r3, lsl #2
   220c4:	e5943004 	ldr	r3, [r4, #4]
   220c8:	e121f003 	msr	CPSR_c, r3
   220cc:	e8bd8010 	pop	{r4, pc}

000220d0 <SyncDataAndInstructionCache>:
   220d0:	e92d4010 	push	{r4, lr}
   220d4:	eb001ad9 	bl	28c40 <CleanDataCache>
   220d8:	e3a03000 	mov	r3, #0
   220dc:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   220e0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   220e4:	f57ff04f 	dsb	sy
   220e8:	f57ff06f 	isb	sy
   220ec:	e8bd8010 	pop	{r4, pc}

000220f0 <__aeabi_atexit>:
   220f0:	e12fff1e 	bx	lr

000220f4 <halt>:
   220f4:	f57ff04f 	dsb	sy
   220f8:	e320f003 	wfi
   220fc:	eafffffc 	b	220f4 <halt>

00022100 <reboot>:
   22100:	e3a03000 	mov	r3, #0
   22104:	e3433f10 	movt	r3, #16144	; 0x3f10
   22108:	e3a01001 	mov	r1, #1
   2210c:	e3451a00 	movt	r1, #23040	; 0x5a00
   22110:	e3a02020 	mov	r2, #32
   22114:	e3452a00 	movt	r2, #23040	; 0x5a00
   22118:	e5831024 	str	r1, [r3, #36]	; 0x24
   2211c:	e583201c 	str	r2, [r3, #28]
   22120:	eafffffe 	b	22120 <reboot+0x20>

00022124 <sysinit>:
   22124:	e92d4030 	push	{r4, r5, lr}
   22128:	e24dd01c 	sub	sp, sp, #28
   2212c:	f1080040 	cpsie	f
   22130:	eb001a7d 	bl	28b2c <InvalidateDataCacheL1Only>
   22134:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   22138:	e3083064 	movw	r3, #32868	; 0x8064
   2213c:	e3403000 	movt	r3, #0
   22140:	e582309c 	str	r3, [r2, #156]	; 0x9c
   22144:	e58230ac 	str	r3, [r2, #172]	; 0xac
   22148:	e58230bc 	str	r3, [r2, #188]	; 0xbc
   2214c:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   22150:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   22154:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   22158:	f57ff06f 	isb	sy
   2215c:	eee82a10 	vmsr	fpexc, r2
   22160:	e3a01000 	mov	r1, #0
   22164:	eee11a10 	vmsr	fpscr, r1
   22168:	e3013c5c 	movw	r3, #7260	; 0x1c5c
   2216c:	e3403003 	movt	r3, #3
   22170:	e30228c8 	movw	r2, #10440	; 0x28c8
   22174:	e3402143 	movt	r2, #323	; 0x143
   22178:	e1530002 	cmp	r3, r2
   2217c:	2a000002 	bcs	2218c <sysinit+0x68>
   22180:	e4c31001 	strb	r1, [r3], #1
   22184:	e1530002 	cmp	r3, r2
   22188:	1afffffc 	bne	22180 <sysinit+0x5c>
   2218c:	e1a0000d 	mov	r0, sp
   22190:	e3015a10 	movw	r5, #6672	; 0x1a10
   22194:	e3405003 	movt	r5, #3
   22198:	e3014a04 	movw	r4, #6660	; 0x1a04
   2219c:	e3404003 	movt	r4, #3
   221a0:	eb001964 	bl	28738 <CMachineInfo::CMachineInfo()>
   221a4:	e1540005 	cmp	r4, r5
   221a8:	2a000003 	bcs	221bc <sysinit+0x98>
   221ac:	e4943004 	ldr	r3, [r4], #4
   221b0:	e12fff33 	blx	r3
   221b4:	e1540005 	cmp	r4, r5
   221b8:	3afffffb 	bcc	221ac <sysinit+0x88>
   221bc:	ebff97ab 	bl	8070 <main>
   221c0:	e3500001 	cmp	r0, #1
   221c4:	0a000000 	beq	221cc <sysinit+0xa8>
   221c8:	ebffffc9 	bl	220f4 <halt>
   221cc:	ebffffcb 	bl	22100 <reboot>

000221d0 <CTimer::CTimer(CInterruptSystem*)>:
   221d0:	e92d4070 	push	{r4, r5, r6, lr}
   221d4:	e1a04000 	mov	r4, r0
   221d8:	e3025888 	movw	r5, #10376	; 0x2888
   221dc:	e3405143 	movt	r5, #323	; 0x143
   221e0:	e3a03000 	mov	r3, #0
   221e4:	e3a06001 	mov	r6, #1
   221e8:	e5801000 	str	r1, [r0]
   221ec:	e2800018 	add	r0, r0, #24
   221f0:	e5843004 	str	r3, [r4, #4]
   221f4:	e5843014 	str	r3, [r4, #20]
   221f8:	e5843008 	str	r3, [r4, #8]
   221fc:	e5846010 	str	r6, [r4, #16]
   22200:	e584300c 	str	r3, [r4, #12]
   22204:	eb001bab 	bl	290b8 <CPtrList::CPtrList()>
   22208:	e5951000 	ldr	r1, [r5]
   2220c:	e300215e 	movw	r2, #350	; 0x15e
   22210:	e3053730 	movw	r3, #22320	; 0x5730
   22214:	e3403005 	movt	r3, #5
   22218:	e3510000 	cmp	r1, #0
   2221c:	e584601c 	str	r6, [r4, #28]
   22220:	e5843020 	str	r3, [r4, #32]
   22224:	e5842024 	str	r2, [r4, #36]	; 0x24
   22228:	0a000005 	beq	22244 <CTimer::CTimer(CInterruptSystem*)+0x74>
   2222c:	e30f1bf8 	movw	r1, #64504	; 0xfbf8
   22230:	e3401002 	movt	r1, #2
   22234:	e30f05ac 	movw	r0, #62892	; 0xf5ac
   22238:	e3400002 	movt	r0, #2
   2223c:	e3a0203b 	mov	r2, #59	; 0x3b
   22240:	eb000a56 	bl	24ba0 <assertion_failed>
   22244:	e5854000 	str	r4, [r5]
   22248:	e1a00004 	mov	r0, r4
   2224c:	e8bd8070 	pop	{r4, r5, r6, pc}

00022250 <CTimer::~CTimer()>:
   22250:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22254:	e1a09000 	mov	r9, r0
   22258:	e5900000 	ldr	r0, [r0]
   2225c:	e3500000 	cmp	r0, #0
   22260:	0a00002c 	beq	22318 <CTimer::~CTimer()+0xc8>
   22264:	e3a01003 	mov	r1, #3
   22268:	e30f7bf8 	movw	r7, #64504	; 0xfbf8
   2226c:	e3407002 	movt	r7, #2
   22270:	e30fac04 	movw	sl, #64516	; 0xfc04
   22274:	e340a002 	movt	sl, #2
   22278:	e3048d43 	movw	r8, #19779	; 0x4d43
   2227c:	e3448b54 	movt	r8, #19284	; 0x4b54
   22280:	e2894018 	add	r4, r9, #24
   22284:	eb001409 	bl	272b0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   22288:	ea000010 	b	222d0 <CTimer::~CTimer()+0x80>
   2228c:	eb001bb2 	bl	2915c <CPtrList::GetPtr(TPtrListElement*)>
   22290:	e2506000 	subs	r6, r0, #0
   22294:	0a00001a 	beq	22304 <CTimer::~CTimer()+0xb4>
   22298:	e5963000 	ldr	r3, [r6]
   2229c:	e30f0c10 	movw	r0, #64528	; 0xfc10
   222a0:	e3400002 	movt	r0, #2
   222a4:	e1530008 	cmp	r3, r8
   222a8:	e3a02049 	mov	r2, #73	; 0x49
   222ac:	e1a01007 	mov	r1, r7
   222b0:	0a000000 	beq	222b8 <CTimer::~CTimer()+0x68>
   222b4:	eb000a39 	bl	24ba0 <assertion_failed>
   222b8:	e1a01005 	mov	r1, r5
   222bc:	e1a00004 	mov	r0, r4
   222c0:	eb001c45 	bl	293dc <CPtrList::Remove(TPtrListElement*)>
   222c4:	e1a00006 	mov	r0, r6
   222c8:	e3a01014 	mov	r1, #20
   222cc:	ebffff35 	bl	21fa8 <operator delete(void*, unsigned int)>
   222d0:	e1a00004 	mov	r0, r4
   222d4:	eb001b87 	bl	290f8 <CPtrList::GetFirst()>
   222d8:	e2505000 	subs	r5, r0, #0
   222dc:	e1a01005 	mov	r1, r5
   222e0:	e1a00004 	mov	r0, r4
   222e4:	1affffe8 	bne	2228c <CTimer::~CTimer()+0x3c>
   222e8:	e3023888 	movw	r3, #10376	; 0x2888
   222ec:	e3403143 	movt	r3, #323	; 0x143
   222f0:	e1a00004 	mov	r0, r4
   222f4:	e5835000 	str	r5, [r3]
   222f8:	eb001b71 	bl	290c4 <CPtrList::~CPtrList()>
   222fc:	e1a00009 	mov	r0, r9
   22300:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22304:	e3a02048 	mov	r2, #72	; 0x48
   22308:	e1a01007 	mov	r1, r7
   2230c:	e1a0000a 	mov	r0, sl
   22310:	eb000a22 	bl	24ba0 <assertion_failed>
   22314:	eaffffdf 	b	22298 <CTimer::~CTimer()+0x48>
   22318:	e30f1bf8 	movw	r1, #64504	; 0xfbf8
   2231c:	e3401002 	movt	r1, #2
   22320:	e30a0978 	movw	r0, #43384	; 0xa978
   22324:	e3400002 	movt	r0, #2
   22328:	e3a02041 	mov	r2, #65	; 0x41
   2232c:	eb000a1b 	bl	24ba0 <assertion_failed>
   22330:	e5990000 	ldr	r0, [r9]
   22334:	eaffffca 	b	22264 <CTimer::~CTimer()+0x14>

00022338 <CTimer::SetTimeZone(int)>:
   22338:	e2813e59 	add	r3, r1, #1424	; 0x590
   2233c:	e3002b3e 	movw	r2, #2878	; 0xb3e
   22340:	e283300f 	add	r3, r3, #15
   22344:	e1530002 	cmp	r3, r2
   22348:	95801014 	strls	r1, [r0, #20]
   2234c:	93a00001 	movls	r0, #1
   22350:	83a00000 	movhi	r0, #0
   22354:	e12fff1e 	bx	lr

00022358 <CTimer::GetTimeZone() const>:
   22358:	e5900014 	ldr	r0, [r0, #20]
   2235c:	e12fff1e 	bx	lr

00022360 <CTimer::SetTime(unsigned int, int)>:
   22360:	e3520000 	cmp	r2, #0
   22364:	e92d4070 	push	{r4, r5, r6, lr}
   22368:	e1a04000 	mov	r4, r0
   2236c:	e1a05001 	mov	r5, r1
   22370:	1a000005 	bne	2238c <CTimer::SetTime(unsigned int, int)+0x2c>
   22374:	e5901014 	ldr	r1, [r0, #20]
   22378:	e3a0303c 	mov	r3, #60	; 0x3c
   2237c:	e0030193 	mul	r3, r3, r1
   22380:	e3530000 	cmp	r3, #0
   22384:	ba00000e 	blt	223c4 <CTimer::SetTime(unsigned int, int)+0x64>
   22388:	e0855003 	add	r5, r5, r3
   2238c:	e5940010 	ldr	r0, [r4, #16]
   22390:	e3500000 	cmp	r0, #0
   22394:	1a000002 	bne	223a4 <CTimer::SetTime(unsigned int, int)+0x44>
   22398:	e3a00001 	mov	r0, #1
   2239c:	e584500c 	str	r5, [r4, #12]
   223a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   223a4:	ebffff07 	bl	21fc8 <EnterCritical>
   223a8:	e5943010 	ldr	r3, [r4, #16]
   223ac:	e584500c 	str	r5, [r4, #12]
   223b0:	e3530000 	cmp	r3, #0
   223b4:	0a000007 	beq	223d8 <CTimer::SetTime(unsigned int, int)+0x78>
   223b8:	ebffff30 	bl	22080 <LeaveCritical>
   223bc:	e3a00001 	mov	r0, #1
   223c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   223c4:	e2631000 	rsb	r1, r3, #0
   223c8:	e1510005 	cmp	r1, r5
   223cc:	daffffed 	ble	22388 <CTimer::SetTime(unsigned int, int)+0x28>
   223d0:	e1a00002 	mov	r0, r2
   223d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   223d8:	e3a00001 	mov	r0, #1
   223dc:	e8bd8070 	pop	{r4, r5, r6, pc}

000223e0 <CTimer::GetClockTicks()>:
   223e0:	e3a03a03 	mov	r3, #12288	; 0x3000
   223e4:	e3433f00 	movt	r3, #16128	; 0x3f00
   223e8:	e5930004 	ldr	r0, [r3, #4]
   223ec:	e12fff1e 	bx	lr

000223f0 <CTimer::GetTicks() const>:
   223f0:	e5900004 	ldr	r0, [r0, #4]
   223f4:	e12fff1e 	bx	lr

000223f8 <CTimer::GetUptime() const>:
   223f8:	e5900008 	ldr	r0, [r0, #8]
   223fc:	e12fff1e 	bx	lr

00022400 <CTimer::GetTime() const>:
   22400:	e590000c 	ldr	r0, [r0, #12]
   22404:	e12fff1e 	bx	lr

00022408 <CTimer::GetUniversalTime() const>:
   22408:	e5902014 	ldr	r2, [r0, #20]
   2240c:	e3a0303c 	mov	r3, #60	; 0x3c
   22410:	e590000c 	ldr	r0, [r0, #12]
   22414:	e0030293 	mul	r3, r3, r2
   22418:	e1530000 	cmp	r3, r0
   2241c:	d0400003 	suble	r0, r0, r3
   22420:	c3a00000 	movgt	r0, #0
   22424:	e12fff1e 	bx	lr

00022428 <CTimer::GetTimeString()>:
   22428:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2242c:	e1a04000 	mov	r4, r0
   22430:	e5900010 	ldr	r0, [r0, #16]
   22434:	e24dd014 	sub	sp, sp, #20
   22438:	e3500000 	cmp	r0, #0
   2243c:	1a00006c 	bne	225f4 <CTimer::GetTimeString()+0x1cc>
   22440:	e594500c 	ldr	r5, [r4, #12]
   22444:	e5949004 	ldr	r9, [r4, #4]
   22448:	e1950009 	orrs	r0, r5, r9
   2244c:	0a000051 	beq	22598 <CTimer::GetTimeString()+0x170>
   22450:	e3086889 	movw	r6, #34953	; 0x8889
   22454:	e3486888 	movt	r6, #34952	; 0x8888
   22458:	e30b73c5 	movw	r7, #46021	; 0xb3c5
   2245c:	e34971a2 	movt	r7, #37282	; 0x91a2
   22460:	e3044507 	movw	r4, #17671	; 0x4507
   22464:	e34c422e 	movt	r4, #49710	; 0xc22e
   22468:	e0813596 	umull	r3, r1, r6, r5
   2246c:	e3a0003c 	mov	r0, #60	; 0x3c
   22470:	e0832695 	umull	r2, r3, r5, r6
   22474:	e308c51f 	movw	ip, #34079	; 0x851f
   22478:	e345c1eb 	movt	ip, #20971	; 0x51eb
   2247c:	e1a012a1 	lsr	r1, r1, #5
   22480:	e1a082a3 	lsr	r8, r3, #5
   22484:	e0873597 	umull	r3, r7, r7, r5
   22488:	e3a0a064 	mov	sl, #100	; 0x64
   2248c:	e0843594 	umull	r3, r4, r4, r5
   22490:	e3a0ee19 	mov	lr, #400	; 0x190
   22494:	e0863196 	umull	r3, r6, r6, r1
   22498:	e1a075a7 	lsr	r7, r7, #11
   2249c:	e0685890 	mls	r8, r0, r8, r5
   224a0:	e1a04824 	lsr	r4, r4, #16
   224a4:	e1a062a6 	lsr	r6, r6, #5
   224a8:	e30057b2 	movw	r5, #1970	; 0x7b2
   224ac:	e300216d 	movw	r2, #365	; 0x16d
   224b0:	e300316e 	movw	r3, #366	; 0x16e
   224b4:	e0661690 	mls	r6, r0, r6, r1
   224b8:	ea000001 	b	224c4 <CTimer::GetTimeString()+0x9c>
   224bc:	e0444000 	sub	r4, r4, r0
   224c0:	e2855001 	add	r5, r5, #1
   224c4:	e0810c95 	umull	r0, r1, r5, ip
   224c8:	e1a002a1 	lsr	r0, r1, #5
   224cc:	e1a013a1 	lsr	r1, r1, #7
   224d0:	e060509a 	mls	r0, sl, r0, r5
   224d4:	e061519e 	mls	r1, lr, r1, r5
   224d8:	e3500000 	cmp	r0, #0
   224dc:	e16f1f11 	clz	r1, r1
   224e0:	01a012a1 	lsreq	r1, r1, #5
   224e4:	0a000002 	beq	224f4 <CTimer::GetTimeString()+0xcc>
   224e8:	e3150003 	tst	r5, #3
   224ec:	03a01001 	moveq	r1, #1
   224f0:	13a01000 	movne	r1, #0
   224f4:	e3510000 	cmp	r1, #0
   224f8:	01a00002 	moveq	r0, r2
   224fc:	11a00003 	movne	r0, r3
   22500:	e1540000 	cmp	r4, r0
   22504:	2affffec 	bcs	224bc <CTimer::GetTimeString()+0x94>
   22508:	e30f0bc0 	movw	r0, #64448	; 0xfbc0
   2250c:	e3400002 	movt	r0, #2
   22510:	e3a0a000 	mov	sl, #0
   22514:	ea000001 	b	22520 <CTimer::GetTimeString()+0xf8>
   22518:	e0444003 	sub	r4, r4, r3
   2251c:	e28aa001 	add	sl, sl, #1
   22520:	e35a0001 	cmp	sl, #1
   22524:	13a02000 	movne	r2, #0
   22528:	02012001 	andeq	r2, r1, #1
   2252c:	e3a0301d 	mov	r3, #29
   22530:	e3520000 	cmp	r2, #0
   22534:	0790310a 	ldreq	r3, [r0, sl, lsl #2]
   22538:	e1540003 	cmp	r4, r3
   2253c:	2afffff5 	bcs	22518 <CTimer::GetTimeString()+0xf0>
   22540:	e308251f 	movw	r2, #34079	; 0x851f
   22544:	e34521eb 	movt	r2, #20971	; 0x51eb
   22548:	e3a01064 	mov	r1, #100	; 0x64
   2254c:	e3a00010 	mov	r0, #16
   22550:	e0832299 	umull	r2, r3, r9, r2
   22554:	e1a0b2a3 	lsr	fp, r3, #5
   22558:	e06b9b91 	mls	fp, r1, fp, r9
   2255c:	ebfffe8d 	bl	21f98 <operator new(unsigned int)>
   22560:	e1a09000 	mov	r9, r0
   22564:	eb000e92 	bl	25fb4 <CString::CString()>
   22568:	e30037b7 	movw	r3, #1975	; 0x7b7
   2256c:	e1550003 	cmp	r5, r3
   22570:	8a00000a 	bhi	225a0 <CTimer::GetTimeString()+0x178>
   22574:	e1a00009 	mov	r0, r9
   22578:	e58db004 	str	fp, [sp, #4]
   2257c:	e1a03006 	mov	r3, r6
   22580:	e58d8000 	str	r8, [sp]
   22584:	e1a02007 	mov	r2, r7
   22588:	e30f1c54 	movw	r1, #64596	; 0xfc54
   2258c:	e3401002 	movt	r1, #2
   22590:	eb001199 	bl	26bfc <CString::Format(char const*, ...)>
   22594:	e1a00009 	mov	r0, r9
   22598:	e28dd014 	add	sp, sp, #20
   2259c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225a0:	e30a0aab 	movw	r0, #43691	; 0xaaab
   225a4:	e34a0aaa 	movt	r0, #43690	; 0xaaaa
   225a8:	e3a0c018 	mov	ip, #24
   225ac:	e3012b6c 	movw	r2, #7020	; 0x1b6c
   225b0:	e3402003 	movt	r2, #3
   225b4:	e0810097 	umull	r0, r1, r7, r0
   225b8:	e58db00c 	str	fp, [sp, #12]
   225bc:	e58d8008 	str	r8, [sp, #8]
   225c0:	e2843001 	add	r3, r4, #1
   225c4:	e1a00221 	lsr	r0, r1, #4
   225c8:	e30f1c38 	movw	r1, #64568	; 0xfc38
   225cc:	e3401002 	movt	r1, #2
   225d0:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   225d4:	e067709c 	mls	r7, ip, r0, r7
   225d8:	e58d6004 	str	r6, [sp, #4]
   225dc:	e1a00009 	mov	r0, r9
   225e0:	e58d7000 	str	r7, [sp]
   225e4:	eb001184 	bl	26bfc <CString::Format(char const*, ...)>
   225e8:	e1a00009 	mov	r0, r9
   225ec:	e28dd014 	add	sp, sp, #20
   225f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225f4:	ebfffe73 	bl	21fc8 <EnterCritical>
   225f8:	e5943010 	ldr	r3, [r4, #16]
   225fc:	e594500c 	ldr	r5, [r4, #12]
   22600:	e3530000 	cmp	r3, #0
   22604:	e5949004 	ldr	r9, [r4, #4]
   22608:	0affff8e 	beq	22448 <CTimer::GetTimeString()+0x20>
   2260c:	ebfffe9b 	bl	22080 <LeaveCritical>
   22610:	eaffff8c 	b	22448 <CTimer::GetTimeString()+0x20>

00022614 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   22614:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22618:	e1a0a000 	mov	sl, r0
   2261c:	e1a04002 	mov	r4, r2
   22620:	e24dd00c 	sub	sp, sp, #12
   22624:	e3a00014 	mov	r0, #20
   22628:	e1a06001 	mov	r6, r1
   2262c:	e1a07003 	mov	r7, r3
   22630:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   22634:	ebfffe57 	bl	21f98 <operator new(unsigned int)>
   22638:	e3540000 	cmp	r4, #0
   2263c:	e59a1004 	ldr	r1, [sl, #4]
   22640:	e1a09000 	mov	r9, r0
   22644:	e0816006 	add	r6, r1, r6
   22648:	0a000042 	beq	22758 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
   2264c:	e59a001c 	ldr	r0, [sl, #28]
   22650:	e3042d43 	movw	r2, #19779	; 0x4d43
   22654:	e3442b54 	movt	r2, #19284	; 0x4b54
   22658:	e3500000 	cmp	r0, #0
   2265c:	e98900d0 	stmib	r9, {r4, r6, r7}
   22660:	e5895010 	str	r5, [r9, #16]
   22664:	e5892000 	str	r2, [r9]
   22668:	1a000038 	bne	22750 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
   2266c:	e28a5018 	add	r5, sl, #24
   22670:	e1a00005 	mov	r0, r5
   22674:	eb001a9f 	bl	290f8 <CPtrList::GetFirst()>
   22678:	e2504000 	subs	r4, r0, #0
   2267c:	0a00002e 	beq	2273c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   22680:	e30f3c68 	movw	r3, #64616	; 0xfc68
   22684:	e3403002 	movt	r3, #2
   22688:	e30f7bf8 	movw	r7, #64504	; 0xfbf8
   2268c:	e3407002 	movt	r7, #2
   22690:	e3048d43 	movw	r8, #19779	; 0x4d43
   22694:	e3448b54 	movt	r8, #19284	; 0x4b54
   22698:	e58d3004 	str	r3, [sp, #4]
   2269c:	ea000011 	b	226e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
   226a0:	e59bc000 	ldr	ip, [fp]
   226a4:	e30f0c78 	movw	r0, #64632	; 0xfc78
   226a8:	e3400002 	movt	r0, #2
   226ac:	e15c0008 	cmp	ip, r8
   226b0:	e3002116 	movw	r2, #278	; 0x116
   226b4:	e1a01007 	mov	r1, r7
   226b8:	0a000000 	beq	226c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xac>
   226bc:	eb000937 	bl	24ba0 <assertion_failed>
   226c0:	e59b3008 	ldr	r3, [fp, #8]
   226c4:	e1a01004 	mov	r1, r4
   226c8:	e1a00005 	mov	r0, r5
   226cc:	e0433006 	sub	r3, r3, r6
   226d0:	e3530000 	cmp	r3, #0
   226d4:	ca00000d 	bgt	22710 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
   226d8:	eb001a88 	bl	29100 <CPtrList::GetNext(TPtrListElement*)>
   226dc:	e3500000 	cmp	r0, #0
   226e0:	0a000015 	beq	2273c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   226e4:	e1a04000 	mov	r4, r0
   226e8:	e1a01004 	mov	r1, r4
   226ec:	e1a00005 	mov	r0, r5
   226f0:	eb001a99 	bl	2915c <CPtrList::GetPtr(TPtrListElement*)>
   226f4:	e250b000 	subs	fp, r0, #0
   226f8:	1affffe8 	bne	226a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
   226fc:	e3002115 	movw	r2, #277	; 0x115
   22700:	e1a01007 	mov	r1, r7
   22704:	e59d0004 	ldr	r0, [sp, #4]
   22708:	eb000924 	bl	24ba0 <assertion_failed>
   2270c:	eaffffe3 	b	226a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
   22710:	e1a01004 	mov	r1, r4
   22714:	e1a00005 	mov	r0, r5
   22718:	e1a02009 	mov	r2, r9
   2271c:	eb001aa5 	bl	291b8 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   22720:	e59a301c 	ldr	r3, [sl, #28]
   22724:	e3530000 	cmp	r3, #0
   22728:	0a000000 	beq	22730 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x11c>
   2272c:	ebfffe53 	bl	22080 <LeaveCritical>
   22730:	e1a00009 	mov	r0, r9
   22734:	e28dd00c 	add	sp, sp, #12
   22738:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2273c:	e1a01004 	mov	r1, r4
   22740:	e1a00005 	mov	r0, r5
   22744:	e1a02009 	mov	r2, r9
   22748:	eb001ae0 	bl	292d0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   2274c:	eafffff3 	b	22720 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   22750:	ebfffe1c 	bl	21fc8 <EnterCritical>
   22754:	eaffffc4 	b	2266c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
   22758:	e30f1bf8 	movw	r1, #64504	; 0xfbf8
   2275c:	e3401002 	movt	r1, #2
   22760:	e3000f2c 	movw	r0, #3884	; 0xf2c
   22764:	e3400003 	movt	r0, #3
   22768:	e3002105 	movw	r2, #261	; 0x105
   2276c:	eb00090b 	bl	24ba0 <assertion_failed>
   22770:	eaffffb5 	b	2264c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

00022774 <CTimer::CancelKernelTimer(unsigned int)>:
   22774:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22778:	e2514000 	subs	r4, r1, #0
   2277c:	e1a05000 	mov	r5, r0
   22780:	0a000022 	beq	22810 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   22784:	e595001c 	ldr	r0, [r5, #28]
   22788:	e3500000 	cmp	r0, #0
   2278c:	1a00001d 	bne	22808 <CTimer::CancelKernelTimer(unsigned int)+0x94>
   22790:	e2856018 	add	r6, r5, #24
   22794:	e1a01004 	mov	r1, r4
   22798:	e1a00006 	mov	r0, r6
   2279c:	eb001b6a 	bl	2954c <CPtrList::Find(void*)>
   227a0:	e2507000 	subs	r7, r0, #0
   227a4:	0a000012 	beq	227f4 <CTimer::CancelKernelTimer(unsigned int)+0x80>
   227a8:	e5942000 	ldr	r2, [r4]
   227ac:	e3043d43 	movw	r3, #19779	; 0x4d43
   227b0:	e3443b54 	movt	r3, #19284	; 0x4b54
   227b4:	e1520003 	cmp	r2, r3
   227b8:	0a000005 	beq	227d4 <CTimer::CancelKernelTimer(unsigned int)+0x60>
   227bc:	e30f1bf8 	movw	r1, #64504	; 0xfbf8
   227c0:	e3401002 	movt	r1, #2
   227c4:	e30f0c10 	movw	r0, #64528	; 0xfc10
   227c8:	e3400002 	movt	r0, #2
   227cc:	e3002139 	movw	r2, #313	; 0x139
   227d0:	eb0008f2 	bl	24ba0 <assertion_failed>
   227d4:	e1a01007 	mov	r1, r7
   227d8:	e1a00006 	mov	r0, r6
   227dc:	eb001afe 	bl	293dc <CPtrList::Remove(TPtrListElement*)>
   227e0:	e3a03000 	mov	r3, #0
   227e4:	e5843000 	str	r3, [r4]
   227e8:	e1a00004 	mov	r0, r4
   227ec:	e3a01014 	mov	r1, #20
   227f0:	ebfffdec 	bl	21fa8 <operator delete(void*, unsigned int)>
   227f4:	e595301c 	ldr	r3, [r5, #28]
   227f8:	e3530000 	cmp	r3, #0
   227fc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   22800:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   22804:	eafffe1d 	b	22080 <LeaveCritical>
   22808:	ebfffdee 	bl	21fc8 <EnterCritical>
   2280c:	eaffffdf 	b	22790 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   22810:	e30f1bf8 	movw	r1, #64504	; 0xfbf8
   22814:	e3401002 	movt	r1, #2
   22818:	e30f0c04 	movw	r0, #64516	; 0xfc04
   2281c:	e3400002 	movt	r0, #2
   22820:	e3002132 	movw	r2, #306	; 0x132
   22824:	eb0008dd 	bl	24ba0 <assertion_failed>
   22828:	eaffffd5 	b	22784 <CTimer::CancelKernelTimer(unsigned int)+0x10>

0002282c <CTimer::PollKernelTimers()>:
   2282c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22830:	e1a06000 	mov	r6, r0
   22834:	e590001c 	ldr	r0, [r0, #28]
   22838:	e3500000 	cmp	r0, #0
   2283c:	1a00004f 	bne	22980 <CTimer::PollKernelTimers()+0x154>
   22840:	e2867018 	add	r7, r6, #24
   22844:	e1a00007 	mov	r0, r7
   22848:	eb001a2a 	bl	290f8 <CPtrList::GetFirst()>
   2284c:	e2505000 	subs	r5, r0, #0
   22850:	0a000040 	beq	22958 <CTimer::PollKernelTimers()+0x12c>
   22854:	e30f9bf8 	movw	r9, #64504	; 0xfbf8
   22858:	e3409002 	movt	r9, #2
   2285c:	e30fac04 	movw	sl, #64516	; 0xfc04
   22860:	e340a002 	movt	sl, #2
   22864:	e3048d43 	movw	r8, #19779	; 0x4d43
   22868:	e3448b54 	movt	r8, #19284	; 0x4b54
   2286c:	ea000010 	b	228b4 <CTimer::PollKernelTimers()+0x88>
   22870:	e5945004 	ldr	r5, [r4, #4]
   22874:	e3550000 	cmp	r5, #0
   22878:	0a00002d 	beq	22934 <CTimer::PollKernelTimers()+0x108>
   2287c:	e5942010 	ldr	r2, [r4, #16]
   22880:	e1a00004 	mov	r0, r4
   22884:	e594100c 	ldr	r1, [r4, #12]
   22888:	e12fff35 	blx	r5
   2288c:	e3a03000 	mov	r3, #0
   22890:	e1a00004 	mov	r0, r4
   22894:	e5843000 	str	r3, [r4]
   22898:	e3a01014 	mov	r1, #20
   2289c:	ebfffdc1 	bl	21fa8 <operator delete(void*, unsigned int)>
   228a0:	e596001c 	ldr	r0, [r6, #28]
   228a4:	e3500000 	cmp	r0, #0
   228a8:	1a000027 	bne	2294c <CTimer::PollKernelTimers()+0x120>
   228ac:	e25b5000 	subs	r5, fp, #0
   228b0:	0a000028 	beq	22958 <CTimer::PollKernelTimers()+0x12c>
   228b4:	e1a01005 	mov	r1, r5
   228b8:	e1a00007 	mov	r0, r7
   228bc:	eb001a26 	bl	2915c <CPtrList::GetPtr(TPtrListElement*)>
   228c0:	e2504000 	subs	r4, r0, #0
   228c4:	0a000028 	beq	2296c <CTimer::PollKernelTimers()+0x140>
   228c8:	e5943000 	ldr	r3, [r4]
   228cc:	e1530008 	cmp	r3, r8
   228d0:	0a000004 	beq	228e8 <CTimer::PollKernelTimers()+0xbc>
   228d4:	e30f0c10 	movw	r0, #64528	; 0xfc10
   228d8:	e3400002 	movt	r0, #2
   228dc:	e300214f 	movw	r2, #335	; 0x14f
   228e0:	e1a01009 	mov	r1, r9
   228e4:	eb0008ad 	bl	24ba0 <assertion_failed>
   228e8:	e5962004 	ldr	r2, [r6, #4]
   228ec:	e5943008 	ldr	r3, [r4, #8]
   228f0:	e0433002 	sub	r3, r3, r2
   228f4:	e3530000 	cmp	r3, #0
   228f8:	ca000016 	bgt	22958 <CTimer::PollKernelTimers()+0x12c>
   228fc:	e1a01005 	mov	r1, r5
   22900:	e1a00007 	mov	r0, r7
   22904:	eb0019fd 	bl	29100 <CPtrList::GetNext(TPtrListElement*)>
   22908:	e1a01005 	mov	r1, r5
   2290c:	e1a0b000 	mov	fp, r0
   22910:	e1a00007 	mov	r0, r7
   22914:	eb001ab0 	bl	293dc <CPtrList::Remove(TPtrListElement*)>
   22918:	e596301c 	ldr	r3, [r6, #28]
   2291c:	e3530000 	cmp	r3, #0
   22920:	0affffd2 	beq	22870 <CTimer::PollKernelTimers()+0x44>
   22924:	ebfffdd5 	bl	22080 <LeaveCritical>
   22928:	e5945004 	ldr	r5, [r4, #4]
   2292c:	e3550000 	cmp	r5, #0
   22930:	1affffd1 	bne	2287c <CTimer::PollKernelTimers()+0x50>
   22934:	e3000f2c 	movw	r0, #3884	; 0xf2c
   22938:	e3400003 	movt	r0, #3
   2293c:	e300215d 	movw	r2, #349	; 0x15d
   22940:	e1a01009 	mov	r1, r9
   22944:	eb000895 	bl	24ba0 <assertion_failed>
   22948:	eaffffcb 	b	2287c <CTimer::PollKernelTimers()+0x50>
   2294c:	ebfffd9d 	bl	21fc8 <EnterCritical>
   22950:	e25b5000 	subs	r5, fp, #0
   22954:	1affffd6 	bne	228b4 <CTimer::PollKernelTimers()+0x88>
   22958:	e596301c 	ldr	r3, [r6, #28]
   2295c:	e3530000 	cmp	r3, #0
   22960:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22964:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22968:	eafffdc4 	b	22080 <LeaveCritical>
   2296c:	e300214e 	movw	r2, #334	; 0x14e
   22970:	e1a01009 	mov	r1, r9
   22974:	e1a0000a 	mov	r0, sl
   22978:	eb000888 	bl	24ba0 <assertion_failed>
   2297c:	eaffffd1 	b	228c8 <CTimer::PollKernelTimers()+0x9c>
   22980:	ebfffd90 	bl	21fc8 <EnterCritical>
   22984:	eaffffad 	b	22840 <CTimer::PollKernelTimers()+0x14>

00022988 <CTimer::InterruptHandler()>:
   22988:	e3a03a03 	mov	r3, #12288	; 0x3000
   2298c:	e3433f00 	movt	r3, #16128	; 0x3f00
   22990:	e92d4010 	push	{r4, lr}
   22994:	e1a04000 	mov	r4, r0
   22998:	e5933000 	ldr	r3, [r3]
   2299c:	e3130008 	tst	r3, #8
   229a0:	0a000036 	beq	22a80 <CTimer::InterruptHandler()+0xf8>
   229a4:	e3a03a03 	mov	r3, #12288	; 0x3000
   229a8:	e3433f00 	movt	r3, #16128	; 0x3f00
   229ac:	e3021710 	movw	r1, #10000	; 0x2710
   229b0:	e5932018 	ldr	r2, [r3, #24]
   229b4:	e0822001 	add	r2, r2, r1
   229b8:	e5832018 	str	r2, [r3, #24]
   229bc:	e5930004 	ldr	r0, [r3, #4]
   229c0:	e1520000 	cmp	r2, r0
   229c4:	35932004 	ldrcc	r2, [r3, #4]
   229c8:	30821001 	addcc	r1, r2, r1
   229cc:	e3a02008 	mov	r2, #8
   229d0:	35831018 	strcc	r1, [r3, #24]
   229d4:	e3a03a03 	mov	r3, #12288	; 0x3000
   229d8:	e3433f00 	movt	r3, #16128	; 0x3f00
   229dc:	e5832000 	str	r2, [r3]
   229e0:	e5940010 	ldr	r0, [r4, #16]
   229e4:	e3500000 	cmp	r0, #0
   229e8:	1a000016 	bne	22a48 <CTimer::InterruptHandler()+0xc0>
   229ec:	e5943004 	ldr	r3, [r4, #4]
   229f0:	e308051f 	movw	r0, #34079	; 0x851f
   229f4:	e34501eb 	movt	r0, #20971	; 0x51eb
   229f8:	e2833001 	add	r3, r3, #1
   229fc:	e3a0c064 	mov	ip, #100	; 0x64
   22a00:	e5843004 	str	r3, [r4, #4]
   22a04:	e0810093 	umull	r0, r1, r3, r0
   22a08:	e1a022a1 	lsr	r2, r1, #5
   22a0c:	e062329c 	mls	r2, ip, r2, r3
   22a10:	e3520000 	cmp	r2, #0
   22a14:	1a000008 	bne	22a3c <CTimer::InterruptHandler()+0xb4>
   22a18:	e5943008 	ldr	r3, [r4, #8]
   22a1c:	e2833001 	add	r3, r3, #1
   22a20:	e5843008 	str	r3, [r4, #8]
   22a24:	e594300c 	ldr	r3, [r4, #12]
   22a28:	e2833001 	add	r3, r3, #1
   22a2c:	e584300c 	str	r3, [r4, #12]
   22a30:	e3520000 	cmp	r2, #0
   22a34:	0a000000 	beq	22a3c <CTimer::InterruptHandler()+0xb4>
   22a38:	ebfffd90 	bl	22080 <LeaveCritical>
   22a3c:	e1a00004 	mov	r0, r4
   22a40:	e8bd4010 	pop	{r4, lr}
   22a44:	eaffff78 	b	2282c <CTimer::PollKernelTimers()>
   22a48:	ebfffd5e 	bl	21fc8 <EnterCritical>
   22a4c:	e5943004 	ldr	r3, [r4, #4]
   22a50:	e308051f 	movw	r0, #34079	; 0x851f
   22a54:	e34501eb 	movt	r0, #20971	; 0x51eb
   22a58:	e2833001 	add	r3, r3, #1
   22a5c:	e3a0c064 	mov	ip, #100	; 0x64
   22a60:	e5843004 	str	r3, [r4, #4]
   22a64:	e5942010 	ldr	r2, [r4, #16]
   22a68:	e0810093 	umull	r0, r1, r3, r0
   22a6c:	e1a012a1 	lsr	r1, r1, #5
   22a70:	e063319c 	mls	r3, ip, r1, r3
   22a74:	e3530000 	cmp	r3, #0
   22a78:	1affffec 	bne	22a30 <CTimer::InterruptHandler()+0xa8>
   22a7c:	eaffffe5 	b	22a18 <CTimer::InterruptHandler()+0x90>
   22a80:	e30f1bf8 	movw	r1, #64504	; 0xfbf8
   22a84:	e3401002 	movt	r1, #2
   22a88:	e30f0ca0 	movw	r0, #64672	; 0xfca0
   22a8c:	e3400002 	movt	r0, #2
   22a90:	e300216f 	movw	r2, #367	; 0x16f
   22a94:	eb000841 	bl	24ba0 <assertion_failed>
   22a98:	eaffffc1 	b	229a4 <CTimer::InterruptHandler()+0x1c>

00022a9c <CTimer::InterruptHandler(void*)>:
   22a9c:	e92d4010 	push	{r4, lr}
   22aa0:	e2504000 	subs	r4, r0, #0
   22aa4:	0a000002 	beq	22ab4 <CTimer::InterruptHandler(void*)+0x18>
   22aa8:	e1a00004 	mov	r0, r4
   22aac:	e8bd4010 	pop	{r4, lr}
   22ab0:	eaffffb4 	b	22988 <CTimer::InterruptHandler()>
   22ab4:	e30f1bf8 	movw	r1, #64504	; 0xfbf8
   22ab8:	e3401002 	movt	r1, #2
   22abc:	e30a0940 	movw	r0, #43328	; 0xa940
   22ac0:	e3400002 	movt	r0, #2
   22ac4:	e3002191 	movw	r2, #401	; 0x191
   22ac8:	eb000834 	bl	24ba0 <assertion_failed>
   22acc:	e1a00004 	mov	r0, r4
   22ad0:	e8bd4010 	pop	{r4, lr}
   22ad4:	eaffffab 	b	22988 <CTimer::InterruptHandler()>

00022ad8 <CTimer::TuneMsDelay()>:
   22ad8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   22adc:	e1a06000 	mov	r6, r0
   22ae0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   22ae4:	e24dd00c 	sub	sp, sp, #12
   22ae8:	e3025710 	movw	r5, #10000	; 0x2710
   22aec:	e5963020 	ldr	r3, [r6, #32]
   22af0:	e308451f 	movw	r4, #34079	; 0x851f
   22af4:	e34541eb 	movt	r4, #20971	; 0x51eb
   22af8:	e5967004 	ldr	r7, [r6, #4]
   22afc:	e0000390 	mul	r0, r0, r3
   22b00:	eb00104a 	bl	26c30 <DelayLoop>
   22b04:	e5962004 	ldr	r2, [r6, #4]
   22b08:	e5963020 	ldr	r3, [r6, #32]
   22b0c:	e3041dd3 	movw	r1, #19923	; 0x4dd3
   22b10:	e3411062 	movt	r1, #4194	; 0x1062
   22b14:	e0422007 	sub	r2, r2, r7
   22b18:	e735f215 	udiv	r5, r5, r2
   22b1c:	e0030593 	mul	r3, r3, r5
   22b20:	e0832394 	umull	r2, r3, r4, r3
   22b24:	e1a032a3 	lsr	r3, r3, #5
   22b28:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   22b2c:	e5863020 	str	r3, [r6, #32]
   22b30:	e0832291 	umull	r2, r3, r1, r2
   22b34:	e1a03323 	lsr	r3, r3, #6
   22b38:	e5863024 	str	r3, [r6, #36]	; 0x24
   22b3c:	eb000999 	bl	251a8 <CLogger::Get()>
   22b40:	e0832495 	umull	r2, r3, r5, r4
   22b44:	e3a0c064 	mov	ip, #100	; 0x64
   22b48:	e0841594 	umull	r1, r4, r4, r5
   22b4c:	e1a012a3 	lsr	r1, r3, #5
   22b50:	e3a02003 	mov	r2, #3
   22b54:	e1a042a4 	lsr	r4, r4, #5
   22b58:	e30f3cc4 	movw	r3, #64708	; 0xfcc4
   22b5c:	e3403002 	movt	r3, #2
   22b60:	e065519c 	mls	r5, ip, r1, r5
   22b64:	e58d4000 	str	r4, [sp]
   22b68:	e59f100c 	ldr	r1, [pc, #12]	; 22b7c <CTimer::TuneMsDelay()+0xa4>
   22b6c:	e58d5004 	str	r5, [sp, #4]
   22b70:	eb000a69 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22b74:	e28dd00c 	add	sp, sp, #12
   22b78:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22b7c:	0002fbf0 	.word	0x0002fbf0

00022b80 <CTimer::Initialize()>:
   22b80:	e92d4010 	push	{r4, lr}
   22b84:	e1a04000 	mov	r4, r0
   22b88:	e5900000 	ldr	r0, [r0]
   22b8c:	e3500000 	cmp	r0, #0
   22b90:	0a000011 	beq	22bdc <CTimer::Initialize()+0x5c>
   22b94:	e1a03004 	mov	r3, r4
   22b98:	e3a01003 	mov	r1, #3
   22b9c:	e3022a9c 	movw	r2, #10908	; 0x2a9c
   22ba0:	e3402002 	movt	r2, #2
   22ba4:	eb001188 	bl	271cc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   22ba8:	e3a02a03 	mov	r2, #12288	; 0x3000
   22bac:	e3432f00 	movt	r2, #16128	; 0x3f00
   22bb0:	e3a03df2 	mov	r3, #15488	; 0x3c80
   22bb4:	e34f3e36 	movt	r3, #65078	; 0xfe36
   22bb8:	e1a00004 	mov	r0, r4
   22bbc:	e5823004 	str	r3, [r2, #4]
   22bc0:	e5923004 	ldr	r3, [r2, #4]
   22bc4:	e2833c27 	add	r3, r3, #9984	; 0x2700
   22bc8:	e2833010 	add	r3, r3, #16
   22bcc:	e5823018 	str	r3, [r2, #24]
   22bd0:	ebffffc0 	bl	22ad8 <CTimer::TuneMsDelay()>
   22bd4:	e3a00001 	mov	r0, #1
   22bd8:	e8bd8010 	pop	{r4, pc}
   22bdc:	e30f1bf8 	movw	r1, #64504	; 0xfbf8
   22be0:	e3401002 	movt	r1, #2
   22be4:	e30a0978 	movw	r0, #43384	; 0xa978
   22be8:	e3400002 	movt	r0, #2
   22bec:	e3a02055 	mov	r2, #85	; 0x55
   22bf0:	eb0007ea 	bl	24ba0 <assertion_failed>
   22bf4:	e5940000 	ldr	r0, [r4]
   22bf8:	eaffffe5 	b	22b94 <CTimer::Initialize()+0x14>

00022bfc <CTimer::SimpleMsDelay(unsigned int)>:
   22bfc:	e2503000 	subs	r3, r0, #0
   22c00:	012fff1e 	bxeq	lr
   22c04:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   22c08:	e0000390 	mul	r0, r0, r3
   22c0c:	e3500000 	cmp	r0, #0
   22c10:	012fff1e 	bxeq	lr
   22c14:	e3a03a03 	mov	r3, #12288	; 0x3000
   22c18:	e3433f00 	movt	r3, #16128	; 0x3f00
   22c1c:	e2800001 	add	r0, r0, #1
   22c20:	e1a01003 	mov	r1, r3
   22c24:	e5932004 	ldr	r2, [r3, #4]
   22c28:	e5913004 	ldr	r3, [r1, #4]
   22c2c:	e0433002 	sub	r3, r3, r2
   22c30:	e1500003 	cmp	r0, r3
   22c34:	8afffffb 	bhi	22c28 <CTimer::SimpleMsDelay(unsigned int)+0x2c>
   22c38:	e12fff1e 	bx	lr

00022c3c <CTimer::SimpleusDelay(unsigned int)>:
   22c3c:	e3500000 	cmp	r0, #0
   22c40:	012fff1e 	bxeq	lr
   22c44:	e3a03a03 	mov	r3, #12288	; 0x3000
   22c48:	e3433f00 	movt	r3, #16128	; 0x3f00
   22c4c:	e2800001 	add	r0, r0, #1
   22c50:	e1a01003 	mov	r1, r3
   22c54:	e5932004 	ldr	r2, [r3, #4]
   22c58:	e5913004 	ldr	r3, [r1, #4]
   22c5c:	e0433002 	sub	r3, r3, r2
   22c60:	e1500003 	cmp	r0, r3
   22c64:	8afffffb 	bhi	22c58 <CTimer::SimpleusDelay(unsigned int)+0x1c>
   22c68:	e12fff1e 	bx	lr

00022c6c <CTimer::IsLeapYear(unsigned int)>:
   22c6c:	e308251f 	movw	r2, #34079	; 0x851f
   22c70:	e34521eb 	movt	r2, #20971	; 0x51eb
   22c74:	e3a01064 	mov	r1, #100	; 0x64
   22c78:	e083c092 	umull	ip, r3, r2, r0
   22c7c:	e1a032a3 	lsr	r3, r3, #5
   22c80:	e0630391 	mls	r3, r1, r3, r0
   22c84:	e3530000 	cmp	r3, #0
   22c88:	0a000003 	beq	22c9c <CTimer::IsLeapYear(unsigned int)+0x30>
   22c8c:	e3100003 	tst	r0, #3
   22c90:	03a00001 	moveq	r0, #1
   22c94:	13a00000 	movne	r0, #0
   22c98:	e12fff1e 	bx	lr
   22c9c:	e0832290 	umull	r2, r3, r0, r2
   22ca0:	e3a02e19 	mov	r2, #400	; 0x190
   22ca4:	e1a033a3 	lsr	r3, r3, #7
   22ca8:	e0600392 	mls	r0, r2, r3, r0
   22cac:	e16f0f10 	clz	r0, r0
   22cb0:	e1a002a0 	lsr	r0, r0, #5
   22cb4:	e12fff1e 	bx	lr

00022cb8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   22cb8:	e3500001 	cmp	r0, #1
   22cbc:	0a000003 	beq	22cd0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
   22cc0:	e30f3bc0 	movw	r3, #64448	; 0xfbc0
   22cc4:	e3403002 	movt	r3, #2
   22cc8:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   22ccc:	e12fff1e 	bx	lr
   22cd0:	e308251f 	movw	r2, #34079	; 0x851f
   22cd4:	e34521eb 	movt	r2, #20971	; 0x51eb
   22cd8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   22cdc:	e3a0e064 	mov	lr, #100	; 0x64
   22ce0:	e0832291 	umull	r2, r3, r1, r2
   22ce4:	e1a0c2a3 	lsr	ip, r3, #5
   22ce8:	e06c1c9e 	mls	ip, lr, ip, r1
   22cec:	e35c0000 	cmp	ip, #0
   22cf0:	0a000008 	beq	22d18 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
   22cf4:	e3110003 	tst	r1, #3
   22cf8:	03a01001 	moveq	r1, #1
   22cfc:	13a01000 	movne	r1, #0
   22d00:	e3510000 	cmp	r1, #0
   22d04:	13a0001d 	movne	r0, #29
   22d08:	030f3bc0 	movweq	r3, #64448	; 0xfbc0
   22d0c:	03403002 	movteq	r3, #2
   22d10:	07930100 	ldreq	r0, [r3, r0, lsl #2]
   22d14:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   22d18:	e1a033a3 	lsr	r3, r3, #7
   22d1c:	e3a02e19 	mov	r2, #400	; 0x190
   22d20:	e0611392 	mls	r1, r2, r3, r1
   22d24:	e16f1f11 	clz	r1, r1
   22d28:	e1a012a1 	lsr	r1, r1, #5
   22d2c:	eafffff3 	b	22d00 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

00022d30 <CTimer::Get()>:
   22d30:	e92d4010 	push	{r4, lr}
   22d34:	e3024888 	movw	r4, #10376	; 0x2888
   22d38:	e3404143 	movt	r4, #323	; 0x143
   22d3c:	e5940000 	ldr	r0, [r4]
   22d40:	e3500000 	cmp	r0, #0
   22d44:	18bd8010 	popne	{r4, pc}
   22d48:	e30021d6 	movw	r2, #470	; 0x1d6
   22d4c:	e30f1bf8 	movw	r1, #64504	; 0xfbf8
   22d50:	e3401002 	movt	r1, #2
   22d54:	e30a03a8 	movw	r0, #41896	; 0xa3a8
   22d58:	e3400002 	movt	r0, #2
   22d5c:	eb00078f 	bl	24ba0 <assertion_failed>
   22d60:	e5940000 	ldr	r0, [r4]
   22d64:	e8bd8010 	pop	{r4, pc}

00022d68 <memset>:
   22d68:	e3520000 	cmp	r2, #0
   22d6c:	012fff1e 	bxeq	lr
   22d70:	e6af1071 	sxtb	r1, r1
   22d74:	e0802002 	add	r2, r0, r2
   22d78:	e1a03000 	mov	r3, r0
   22d7c:	e4c31001 	strb	r1, [r3], #1
   22d80:	e1530002 	cmp	r3, r2
   22d84:	1afffffc 	bne	22d7c <memset+0x14>
   22d88:	e12fff1e 	bx	lr

00022d8c <memcmp>:
   22d8c:	e3520000 	cmp	r2, #0
   22d90:	0a00000e 	beq	22dd0 <memcmp+0x44>
   22d94:	e5d0c000 	ldrb	ip, [r0]
   22d98:	e5d13000 	ldrb	r3, [r1]
   22d9c:	e15c0003 	cmp	ip, r3
   22da0:	ca00000c 	bgt	22dd8 <memcmp+0x4c>
   22da4:	ba00000d 	blt	22de0 <memcmp+0x54>
   22da8:	e0812002 	add	r2, r1, r2
   22dac:	e2811001 	add	r1, r1, #1
   22db0:	ea000004 	b	22dc8 <memcmp+0x3c>
   22db4:	e5f0c001 	ldrb	ip, [r0, #1]!
   22db8:	e4d13001 	ldrb	r3, [r1], #1
   22dbc:	e15c0003 	cmp	ip, r3
   22dc0:	ca000004 	bgt	22dd8 <memcmp+0x4c>
   22dc4:	ba000005 	blt	22de0 <memcmp+0x54>
   22dc8:	e1510002 	cmp	r1, r2
   22dcc:	1afffff8 	bne	22db4 <memcmp+0x28>
   22dd0:	e3a00000 	mov	r0, #0
   22dd4:	e12fff1e 	bx	lr
   22dd8:	e3a00001 	mov	r0, #1
   22ddc:	e12fff1e 	bx	lr
   22de0:	e3e00000 	mvn	r0, #0
   22de4:	e12fff1e 	bx	lr

00022de8 <strlen>:
   22de8:	e1d010d0 	ldrsb	r1, [r0]
   22dec:	e2803001 	add	r3, r0, #1
   22df0:	e3510000 	cmp	r1, #0
   22df4:	0a000003 	beq	22e08 <strlen+0x20>
   22df8:	e0431000 	sub	r1, r3, r0
   22dfc:	e0d320d1 	ldrsb	r2, [r3], #1
   22e00:	e3520000 	cmp	r2, #0
   22e04:	1afffffb 	bne	22df8 <strlen+0x10>
   22e08:	e1a00001 	mov	r0, r1
   22e0c:	e12fff1e 	bx	lr

00022e10 <strcmp>:
   22e10:	e1d030d0 	ldrsb	r3, [r0]
   22e14:	e1d120d0 	ldrsb	r2, [r1]
   22e18:	e3530000 	cmp	r3, #0
   22e1c:	1a000007 	bne	22e40 <strcmp+0x30>
   22e20:	ea000008 	b	22e48 <strcmp+0x38>
   22e24:	e1530002 	cmp	r3, r2
   22e28:	ca00000b 	bgt	22e5c <strcmp+0x4c>
   22e2c:	ba00000c 	blt	22e64 <strcmp+0x54>
   22e30:	e1f030d1 	ldrsb	r3, [r0, #1]!
   22e34:	e3530000 	cmp	r3, #0
   22e38:	0a00000b 	beq	22e6c <strcmp+0x5c>
   22e3c:	e1f120d1 	ldrsb	r2, [r1, #1]!
   22e40:	e3520000 	cmp	r2, #0
   22e44:	1afffff6 	bne	22e24 <strcmp+0x14>
   22e48:	e1530002 	cmp	r3, r2
   22e4c:	ca000002 	bgt	22e5c <strcmp+0x4c>
   22e50:	b3e00000 	mvnlt	r0, #0
   22e54:	a3a00000 	movge	r0, #0
   22e58:	e12fff1e 	bx	lr
   22e5c:	e3a00001 	mov	r0, #1
   22e60:	e12fff1e 	bx	lr
   22e64:	e3e00000 	mvn	r0, #0
   22e68:	e12fff1e 	bx	lr
   22e6c:	e1d120d1 	ldrsb	r2, [r1, #1]
   22e70:	e1530002 	cmp	r3, r2
   22e74:	dafffff5 	ble	22e50 <strcmp+0x40>
   22e78:	eafffff7 	b	22e5c <strcmp+0x4c>

00022e7c <strcpy>:
   22e7c:	e1d130d0 	ldrsb	r3, [r1]
   22e80:	e1a02000 	mov	r2, r0
   22e84:	e3530000 	cmp	r3, #0
   22e88:	0a000003 	beq	22e9c <strcpy+0x20>
   22e8c:	e4c23001 	strb	r3, [r2], #1
   22e90:	e1f130d1 	ldrsb	r3, [r1, #1]!
   22e94:	e3530000 	cmp	r3, #0
   22e98:	1afffffb 	bne	22e8c <strcpy+0x10>
   22e9c:	e3a03000 	mov	r3, #0
   22ea0:	e5c23000 	strb	r3, [r2]
   22ea4:	e12fff1e 	bx	lr

00022ea8 <strncpy>:
   22ea8:	e3520000 	cmp	r2, #0
   22eac:	012fff1e 	bxeq	lr
   22eb0:	e1d1c0d0 	ldrsb	ip, [r1]
   22eb4:	e35c0000 	cmp	ip, #0
   22eb8:	0a000009 	beq	22ee4 <strncpy+0x3c>
   22ebc:	e0802002 	add	r2, r0, r2
   22ec0:	e1a03000 	mov	r3, r0
   22ec4:	ea000002 	b	22ed4 <strncpy+0x2c>
   22ec8:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   22ecc:	e35c0000 	cmp	ip, #0
   22ed0:	0a000004 	beq	22ee8 <strncpy+0x40>
   22ed4:	e4c3c001 	strb	ip, [r3], #1
   22ed8:	e1530002 	cmp	r3, r2
   22edc:	1afffff9 	bne	22ec8 <strncpy+0x20>
   22ee0:	e12fff1e 	bx	lr
   22ee4:	e1a03000 	mov	r3, r0
   22ee8:	e3a02000 	mov	r2, #0
   22eec:	e5c32000 	strb	r2, [r3]
   22ef0:	e12fff1e 	bx	lr

00022ef4 <strcat>:
   22ef4:	e1d030d0 	ldrsb	r3, [r0]
   22ef8:	e3530000 	cmp	r3, #0
   22efc:	e1a03000 	mov	r3, r0
   22f00:	0a000002 	beq	22f10 <strcat+0x1c>
   22f04:	e1f320d1 	ldrsb	r2, [r3, #1]!
   22f08:	e3520000 	cmp	r2, #0
   22f0c:	1afffffc 	bne	22f04 <strcat+0x10>
   22f10:	e1d120d0 	ldrsb	r2, [r1]
   22f14:	e3520000 	cmp	r2, #0
   22f18:	0a000003 	beq	22f2c <strcat+0x38>
   22f1c:	e4c32001 	strb	r2, [r3], #1
   22f20:	e1f120d1 	ldrsb	r2, [r1, #1]!
   22f24:	e3520000 	cmp	r2, #0
   22f28:	1afffffb 	bne	22f1c <strcat+0x28>
   22f2c:	e3a02000 	mov	r2, #0
   22f30:	e5c32000 	strb	r2, [r3]
   22f34:	e12fff1e 	bx	lr

00022f38 <strchr>:
   22f38:	e1d020d0 	ldrsb	r2, [r0]
   22f3c:	e3520000 	cmp	r2, #0
   22f40:	0a000009 	beq	22f6c <strchr+0x34>
   22f44:	e1510002 	cmp	r1, r2
   22f48:	1a000002 	bne	22f58 <strchr+0x20>
   22f4c:	ea000008 	b	22f74 <strchr+0x3c>
   22f50:	e1530001 	cmp	r3, r1
   22f54:	012fff1e 	bxeq	lr
   22f58:	e1f030d1 	ldrsb	r3, [r0, #1]!
   22f5c:	e3530000 	cmp	r3, #0
   22f60:	1afffffa 	bne	22f50 <strchr+0x18>
   22f64:	e1a00003 	mov	r0, r3
   22f68:	e12fff1e 	bx	lr
   22f6c:	e1a00002 	mov	r0, r2
   22f70:	e12fff1e 	bx	lr
   22f74:	e12fff1e 	bx	lr

00022f78 <strtok_r>:
   22f78:	e3500000 	cmp	r0, #0
   22f7c:	0a00002c 	beq	23034 <strtok_r+0xbc>
   22f80:	e92d4030 	push	{r4, r5, lr}
   22f84:	e1d0e0d0 	ldrsb	lr, [r0]
   22f88:	e35e0000 	cmp	lr, #0
   22f8c:	11d140d0 	ldrsbne	r4, [r1]
   22f90:	0a000024 	beq	23028 <strtok_r+0xb0>
   22f94:	e3540000 	cmp	r4, #0
   22f98:	0a000008 	beq	22fc0 <strtok_r+0x48>
   22f9c:	e15e0004 	cmp	lr, r4
   22fa0:	0a000019 	beq	2300c <strtok_r+0x94>
   22fa4:	e1a0c001 	mov	ip, r1
   22fa8:	ea000001 	b	22fb4 <strtok_r+0x3c>
   22fac:	e15e0003 	cmp	lr, r3
   22fb0:	0a000015 	beq	2300c <strtok_r+0x94>
   22fb4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   22fb8:	e3530000 	cmp	r3, #0
   22fbc:	1afffffa 	bne	22fac <strtok_r+0x34>
   22fc0:	e35e0000 	cmp	lr, #0
   22fc4:	0a000017 	beq	23028 <strtok_r+0xb0>
   22fc8:	e1a05000 	mov	r5, r0
   22fcc:	e3540000 	cmp	r4, #0
   22fd0:	0a000008 	beq	22ff8 <strtok_r+0x80>
   22fd4:	e15e0004 	cmp	lr, r4
   22fd8:	0a00000d 	beq	23014 <strtok_r+0x9c>
   22fdc:	e1a0c001 	mov	ip, r1
   22fe0:	ea000001 	b	22fec <strtok_r+0x74>
   22fe4:	e15e0003 	cmp	lr, r3
   22fe8:	0a000009 	beq	23014 <strtok_r+0x9c>
   22fec:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   22ff0:	e3530000 	cmp	r3, #0
   22ff4:	1afffffa 	bne	22fe4 <strtok_r+0x6c>
   22ff8:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   22ffc:	e35e0000 	cmp	lr, #0
   23000:	1afffff1 	bne	22fcc <strtok_r+0x54>
   23004:	e5825000 	str	r5, [r2]
   23008:	e8bd8030 	pop	{r4, r5, pc}
   2300c:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   23010:	eaffffdf 	b	22f94 <strtok_r+0x1c>
   23014:	e3a03000 	mov	r3, #0
   23018:	e2855001 	add	r5, r5, #1
   2301c:	e5453001 	strb	r3, [r5, #-1]
   23020:	e5825000 	str	r5, [r2]
   23024:	e8bd8030 	pop	{r4, r5, pc}
   23028:	e3a00000 	mov	r0, #0
   2302c:	e5820000 	str	r0, [r2]
   23030:	e8bd8030 	pop	{r4, r5, pc}
   23034:	e5920000 	ldr	r0, [r2]
   23038:	e3500000 	cmp	r0, #0
   2303c:	1affffcf 	bne	22f80 <strtok_r+0x8>
   23040:	e12fff1e 	bx	lr

00023044 <strtoul>:
   23044:	e3510000 	cmp	r1, #0
   23048:	e92d4070 	push	{r4, r5, r6, lr}
   2304c:	e2425002 	sub	r5, r2, #2
   23050:	e3c2e010 	bic	lr, r2, #16
   23054:	15810000 	strne	r0, [r1]
   23058:	e3520000 	cmp	r2, #0
   2305c:	13550022 	cmpne	r5, #34	; 0x22
   23060:	83a05001 	movhi	r5, #1
   23064:	93a05000 	movls	r5, #0
   23068:	8a000036 	bhi	23148 <strtoul+0x104>
   2306c:	e1d0c0d0 	ldrsb	ip, [r0]
   23070:	e1a04000 	mov	r4, r0
   23074:	e2800001 	add	r0, r0, #1
   23078:	e35c0020 	cmp	ip, #32
   2307c:	e24c3009 	sub	r3, ip, #9
   23080:	e6ef3073 	uxtb	r3, r3
   23084:	0afffff8 	beq	2306c <strtoul+0x28>
   23088:	e3530004 	cmp	r3, #4
   2308c:	9afffff6 	bls	2306c <strtoul+0x28>
   23090:	e35c002b 	cmp	ip, #43	; 0x2b
   23094:	0a00002d 	beq	23150 <strtoul+0x10c>
   23098:	e35c002d 	cmp	ip, #45	; 0x2d
   2309c:	03a06001 	moveq	r6, #1
   230a0:	13a06000 	movne	r6, #0
   230a4:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   230a8:	01a04000 	moveq	r4, r0
   230ac:	e35c0030 	cmp	ip, #48	; 0x30
   230b0:	0a00002b 	beq	23164 <strtoul+0x120>
   230b4:	e3520000 	cmp	r2, #0
   230b8:	03a0200a 	moveq	r2, #10
   230bc:	e35c002f 	cmp	ip, #47	; 0x2f
   230c0:	e1a0300c 	mov	r3, ip
   230c4:	da00001c 	ble	2313c <strtoul+0xf8>
   230c8:	e3a05001 	mov	r5, #1
   230cc:	e3a0e000 	mov	lr, #0
   230d0:	ea000007 	b	230f4 <strtoul+0xb0>
   230d4:	e150000e 	cmp	r0, lr
   230d8:	e3a05000 	mov	r5, #0
   230dc:	e1a0e000 	mov	lr, r0
   230e0:	3a000028 	bcc	23188 <strtoul+0x144>
   230e4:	e1f430d1 	ldrsb	r3, [r4, #1]!
   230e8:	e353002f 	cmp	r3, #47	; 0x2f
   230ec:	e1a0c003 	mov	ip, r3
   230f0:	da000029 	ble	2319c <strtoul+0x158>
   230f4:	e24cc061 	sub	ip, ip, #97	; 0x61
   230f8:	e35c0019 	cmp	ip, #25
   230fc:	92433020 	subls	r3, r3, #32
   23100:	e3530040 	cmp	r3, #64	; 0x40
   23104:	c2433007 	subgt	r3, r3, #7
   23108:	e2433030 	sub	r3, r3, #48	; 0x30
   2310c:	e1520003 	cmp	r2, r3
   23110:	e020329e 	mla	r0, lr, r2, r3
   23114:	caffffee 	bgt	230d4 <strtoul+0x90>
   23118:	e2255001 	eor	r5, r5, #1
   2311c:	e1a0000e 	mov	r0, lr
   23120:	e3510000 	cmp	r1, #0
   23124:	e0055006 	and	r5, r5, r6
   23128:	0a000000 	beq	23130 <strtoul+0xec>
   2312c:	e5814000 	str	r4, [r1]
   23130:	e3550000 	cmp	r5, #0
   23134:	12600000 	rsbne	r0, r0, #0
   23138:	e8bd8070 	pop	{r4, r5, r6, pc}
   2313c:	e3510000 	cmp	r1, #0
   23140:	13a00000 	movne	r0, #0
   23144:	1afffff8 	bne	2312c <strtoul+0xe8>
   23148:	e3a00000 	mov	r0, #0
   2314c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23150:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   23154:	e3a06000 	mov	r6, #0
   23158:	e1a04000 	mov	r4, r0
   2315c:	e35c0030 	cmp	ip, #48	; 0x30
   23160:	1affffd3 	bne	230b4 <strtoul+0x70>
   23164:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   23168:	e2840001 	add	r0, r4, #1
   2316c:	e3cc3020 	bic	r3, ip, #32
   23170:	e3530058 	cmp	r3, #88	; 0x58
   23174:	0a00000a 	beq	231a4 <strtoul+0x160>
   23178:	e3520000 	cmp	r2, #0
   2317c:	e1a04000 	mov	r4, r0
   23180:	03a02008 	moveq	r2, #8
   23184:	eaffffcc 	b	230bc <strtoul+0x78>
   23188:	e1510005 	cmp	r1, r5
   2318c:	0a00000a 	beq	231bc <strtoul+0x178>
   23190:	e5814000 	str	r4, [r1]
   23194:	e3e00000 	mvn	r0, #0
   23198:	e8bd8070 	pop	{r4, r5, r6, pc}
   2319c:	e3a05001 	mov	r5, #1
   231a0:	eaffffde 	b	23120 <strtoul+0xdc>
   231a4:	e35e0000 	cmp	lr, #0
   231a8:	1affffe6 	bne	23148 <strtoul+0x104>
   231ac:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   231b0:	e3a02010 	mov	r2, #16
   231b4:	e2844002 	add	r4, r4, #2
   231b8:	eaffffbf 	b	230bc <strtoul+0x78>
   231bc:	e3e00000 	mvn	r0, #0
   231c0:	e8bd8070 	pop	{r4, r5, r6, pc}

000231c4 <char2int>:
   231c4:	e12fff1e 	bx	lr

000231c8 <memcpy>:
   231c8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   231cc:	e352007f 	cmp	r2, #127	; 0x7f
   231d0:	9a00000b 	bls	23204 <memcpy+0x3c>
   231d4:	e3110003 	tst	r1, #3
   231d8:	1a000009 	bne	23204 <memcpy+0x3c>
   231dc:	e3100003 	tst	r0, #3
   231e0:	1a000007 	bne	23204 <memcpy+0x3c>
   231e4:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   231e8:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   231ec:	e2422020 	sub	r2, r2, #32
   231f0:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   231f4:	f5d1f040 	pld	[r1, #64]	; 0x40
   231f8:	e352001f 	cmp	r2, #31
   231fc:	8afffff9 	bhi	231e8 <memcpy+0x20>
   23200:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   23204:	e3520000 	cmp	r2, #0
   23208:	0a000003 	beq	2321c <memcpy+0x54>
   2320c:	e4d13001 	ldrb	r3, [r1], #1
   23210:	e2522001 	subs	r2, r2, #1
   23214:	e4c03001 	strb	r3, [r0], #1
   23218:	1afffffb 	bne	2320c <memcpy+0x44>
   2321c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   23220:	e12fff1e 	bx	lr

00023224 <CDevice::~CDevice()>:
   23224:	e12fff1e 	bx	lr

00023228 <CDevice::Read(void*, unsigned int)>:
   23228:	e3e00000 	mvn	r0, #0
   2322c:	e12fff1e 	bx	lr

00023230 <CDevice::Seek(unsigned long long)>:
   23230:	e3e00000 	mvn	r0, #0
   23234:	e3e01000 	mvn	r1, #0
   23238:	e12fff1e 	bx	lr

0002323c <CDevice::~CDevice()>:
   2323c:	e92d4010 	push	{r4, lr}
   23240:	e3a01004 	mov	r1, #4
   23244:	e1a04000 	mov	r4, r0
   23248:	ebfffb56 	bl	21fa8 <operator delete(void*, unsigned int)>
   2324c:	e1a00004 	mov	r0, r4
   23250:	e8bd8010 	pop	{r4, pc}

00023254 <CDevice::CDevice()>:
   23254:	e59f3004 	ldr	r3, [pc, #4]	; 23260 <CDevice::CDevice()+0xc>
   23258:	e5803000 	str	r3, [r0]
   2325c:	e12fff1e 	bx	lr
   23260:	0002fd14 	.word	0x0002fd14

00023264 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   23264:	e3a01000 	mov	r1, #0
   23268:	e3a0c00a 	mov	ip, #10
   2326c:	ea000009 	b	23298 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   23270:	e3530009 	cmp	r3, #9
   23274:	8a00000f 	bhi	232b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
   23278:	e3720001 	cmn	r2, #1
   2327c:	13a03000 	movne	r3, #0
   23280:	03a03001 	moveq	r3, #1
   23284:	e1510002 	cmp	r1, r2
   23288:	83833001 	orrhi	r3, r3, #1
   2328c:	e1a01002 	mov	r1, r2
   23290:	e3530000 	cmp	r3, #0
   23294:	1a000007 	bne	232b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
   23298:	e0d020d1 	ldrsb	r2, [r0], #1
   2329c:	e3520000 	cmp	r2, #0
   232a0:	e2423030 	sub	r3, r2, #48	; 0x30
   232a4:	e022319c 	mla	r2, ip, r1, r3
   232a8:	e6ef3073 	uxtb	r3, r3
   232ac:	1affffef 	bne	23270 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
   232b0:	e1a00001 	mov	r0, r1
   232b4:	e12fff1e 	bx	lr
   232b8:	e3e01000 	mvn	r1, #0
   232bc:	e1a00001 	mov	r0, r1
   232c0:	e12fff1e 	bx	lr

000232c4 <CKernelOptions::~CKernelOptions()>:
   232c4:	e302388c 	movw	r3, #10380	; 0x288c
   232c8:	e3403143 	movt	r3, #323	; 0x143
   232cc:	e3a02000 	mov	r2, #0
   232d0:	e5832000 	str	r2, [r3]
   232d4:	e12fff1e 	bx	lr

000232d8 <CKernelOptions::GetWidth() const>:
   232d8:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   232dc:	e12fff1e 	bx	lr

000232e0 <CKernelOptions::GetHeight() const>:
   232e0:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   232e4:	e12fff1e 	bx	lr

000232e8 <CKernelOptions::GetLogDevice() const>:
   232e8:	e2800e81 	add	r0, r0, #2064	; 0x810
   232ec:	e2800008 	add	r0, r0, #8
   232f0:	e12fff1e 	bx	lr

000232f4 <CKernelOptions::GetLogLevel() const>:
   232f4:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   232f8:	e12fff1e 	bx	lr

000232fc <CKernelOptions::GetKeyMap() const>:
   232fc:	e2800e83 	add	r0, r0, #2096	; 0x830
   23300:	e12fff1e 	bx	lr

00023304 <CKernelOptions::GetUSBPowerDelay() const>:
   23304:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   23308:	e12fff1e 	bx	lr

0002330c <CKernelOptions::GetCPUSpeed() const>:
   2330c:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
   23310:	e12fff1e 	bx	lr

00023314 <CKernelOptions::GetSoCMaxTemp() const>:
   23314:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
   23318:	e12fff1e 	bx	lr

0002331c <CKernelOptions::Get()>:
   2331c:	e302388c 	movw	r3, #10380	; 0x288c
   23320:	e3403143 	movt	r3, #323	; 0x143
   23324:	e5930000 	ldr	r0, [r3]
   23328:	e12fff1e 	bx	lr

0002332c <CKernelOptions::GetToken()>:
   2332c:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
   23330:	e1d320d0 	ldrsb	r2, [r3]
   23334:	e3520000 	cmp	r2, #0
   23338:	1a000005 	bne	23354 <CKernelOptions::GetToken()+0x28>
   2333c:	ea000016 	b	2339c <CKernelOptions::GetToken()+0x70>
   23340:	e2833001 	add	r3, r3, #1
   23344:	e580380c 	str	r3, [r0, #2060]	; 0x80c
   23348:	e1d320d0 	ldrsb	r2, [r3]
   2334c:	e3520000 	cmp	r2, #0
   23350:	0a000011 	beq	2339c <CKernelOptions::GetToken()+0x70>
   23354:	e3520020 	cmp	r2, #32
   23358:	0afffff8 	beq	23340 <CKernelOptions::GetToken()+0x14>
   2335c:	e1a02003 	mov	r2, r3
   23360:	ea000000 	b	23368 <CKernelOptions::GetToken()+0x3c>
   23364:	e1a02001 	mov	r2, r1
   23368:	e2821001 	add	r1, r2, #1
   2336c:	e580180c 	str	r1, [r0, #2060]	; 0x80c
   23370:	e1d2c0d1 	ldrsb	ip, [r2, #1]
   23374:	e35c0000 	cmp	ip, #0
   23378:	0a000008 	beq	233a0 <CKernelOptions::GetToken()+0x74>
   2337c:	e35c0020 	cmp	ip, #32
   23380:	1afffff7 	bne	23364 <CKernelOptions::GetToken()+0x38>
   23384:	e2822002 	add	r2, r2, #2
   23388:	e3a0c000 	mov	ip, #0
   2338c:	e580280c 	str	r2, [r0, #2060]	; 0x80c
   23390:	e1a00003 	mov	r0, r3
   23394:	e5c1c000 	strb	ip, [r1]
   23398:	e12fff1e 	bx	lr
   2339c:	e3a03000 	mov	r3, #0
   233a0:	e1a00003 	mov	r0, r3
   233a4:	e12fff1e 	bx	lr

000233a8 <CKernelOptions::CKernelOptions()>:
   233a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233ac:	e1a05000 	mov	r5, r0
   233b0:	e2807e81 	add	r7, r0, #2064	; 0x810
   233b4:	e3a04000 	mov	r4, #0
   233b8:	e3a02004 	mov	r2, #4
   233bc:	e3a0303c 	mov	r3, #60	; 0x3c
   233c0:	e2877008 	add	r7, r7, #8
   233c4:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   233c8:	e24dd01c 	sub	sp, sp, #28
   233cc:	e585383c 	str	r3, [r5, #2108]	; 0x83c
   233d0:	e1a00007 	mov	r0, r7
   233d4:	e30f1d28 	movw	r1, #64808	; 0xfd28
   233d8:	e3401002 	movt	r1, #2
   233dc:	e5854810 	str	r4, [r5, #2064]	; 0x810
   233e0:	e2859e83 	add	r9, r5, #2096	; 0x830
   233e4:	e5854814 	str	r4, [r5, #2068]	; 0x814
   233e8:	e5854834 	str	r4, [r5, #2100]	; 0x834
   233ec:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
   233f0:	ebfffea1 	bl	22e7c <strcpy>
   233f4:	e1a00009 	mov	r0, r9
   233f8:	e30e1030 	movw	r1, #57392	; 0xe030
   233fc:	e3401002 	movt	r1, #2
   23400:	ebfffe9d 	bl	22e7c <strcpy>
   23404:	e302388c 	movw	r3, #10380	; 0x288c
   23408:	e3403143 	movt	r3, #323	; 0x143
   2340c:	e28d0010 	add	r0, sp, #16
   23410:	e5835000 	str	r5, [r3]
   23414:	ebfff697 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   23418:	e58d4000 	str	r4, [sp]
   2341c:	e1a02005 	mov	r2, r5
   23420:	e28d0010 	add	r0, sp, #16
   23424:	e3a01001 	mov	r1, #1
   23428:	e3401005 	movt	r1, #5
   2342c:	e300380c 	movw	r3, #2060	; 0x80c
   23430:	ebfff6d8 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   23434:	e1500004 	cmp	r0, r4
   23438:	0a000040 	beq	23540 <CKernelOptions::CKernelOptions()+0x198>
   2343c:	e5953008 	ldr	r3, [r5, #8]
   23440:	e3530b02 	cmp	r3, #2048	; 0x800
   23444:	2a00003d 	bcs	23540 <CKernelOptions::CKernelOptions()+0x198>
   23448:	e0853003 	add	r3, r5, r3
   2344c:	e285200c 	add	r2, r5, #12
   23450:	e30f6d80 	movw	r6, #64896	; 0xfd80
   23454:	e3406002 	movt	r6, #2
   23458:	e30f8d30 	movw	r8, #64816	; 0xfd30
   2345c:	e3408002 	movt	r8, #2
   23460:	e30fad38 	movw	sl, #64824	; 0xfd38
   23464:	e340a002 	movt	sl, #2
   23468:	e5c3400c 	strb	r4, [r3, #12]
   2346c:	e585280c 	str	r2, [r5, #2060]	; 0x80c
   23470:	e1a00005 	mov	r0, r5
   23474:	ebffffac 	bl	2332c <CKernelOptions::GetToken()>
   23478:	e250b000 	subs	fp, r0, #0
   2347c:	0a00002f 	beq	23540 <CKernelOptions::CKernelOptions()+0x198>
   23480:	e1db30d0 	ldrsb	r3, [fp]
   23484:	e3530000 	cmp	r3, #0
   23488:	0a000008 	beq	234b0 <CKernelOptions::CKernelOptions()+0x108>
   2348c:	e353003d 	cmp	r3, #61	; 0x3d
   23490:	e1a0400b 	mov	r4, fp
   23494:	1a000002 	bne	234a4 <CKernelOptions::CKernelOptions()+0xfc>
   23498:	ea00002d 	b	23554 <CKernelOptions::CKernelOptions()+0x1ac>
   2349c:	e353003d 	cmp	r3, #61	; 0x3d
   234a0:	0a00002b 	beq	23554 <CKernelOptions::CKernelOptions()+0x1ac>
   234a4:	e1f430d1 	ldrsb	r3, [r4, #1]!
   234a8:	e3530000 	cmp	r3, #0
   234ac:	1afffffa 	bne	2349c <CKernelOptions::CKernelOptions()+0xf4>
   234b0:	e1a01006 	mov	r1, r6
   234b4:	e1a0000b 	mov	r0, fp
   234b8:	ebfffe54 	bl	22e10 <strcmp>
   234bc:	e3500000 	cmp	r0, #0
   234c0:	0affffea 	beq	23470 <CKernelOptions::CKernelOptions()+0xc8>
   234c4:	e1a01008 	mov	r1, r8
   234c8:	e1a0000b 	mov	r0, fp
   234cc:	ebfffe4f 	bl	22e10 <strcmp>
   234d0:	e3500000 	cmp	r0, #0
   234d4:	13a03000 	movne	r3, #0
   234d8:	0affffe4 	beq	23470 <CKernelOptions::CKernelOptions()+0xc8>
   234dc:	e1a0100a 	mov	r1, sl
   234e0:	e1a0000b 	mov	r0, fp
   234e4:	e58d300c 	str	r3, [sp, #12]
   234e8:	ebfffe48 	bl	22e10 <strcmp>
   234ec:	e2504000 	subs	r4, r0, #0
   234f0:	e59d300c 	ldr	r3, [sp, #12]
   234f4:	0a00002a 	beq	235a4 <CKernelOptions::CKernelOptions()+0x1fc>
   234f8:	e30f1d40 	movw	r1, #64832	; 0xfd40
   234fc:	e3401002 	movt	r1, #2
   23500:	e1a0000b 	mov	r0, fp
   23504:	e58d300c 	str	r3, [sp, #12]
   23508:	ebfffe40 	bl	22e10 <strcmp>
   2350c:	e3500000 	cmp	r0, #0
   23510:	e59d300c 	ldr	r3, [sp, #12]
   23514:	1a000028 	bne	235bc <CKernelOptions::CKernelOptions()+0x214>
   23518:	e3530000 	cmp	r3, #0
   2351c:	0affffd3 	beq	23470 <CKernelOptions::CKernelOptions()+0xc8>
   23520:	e1d320d0 	ldrsb	r2, [r3]
   23524:	e3520000 	cmp	r2, #0
   23528:	0affffd0 	beq	23470 <CKernelOptions::CKernelOptions()+0xc8>
   2352c:	e1a00003 	mov	r0, r3
   23530:	ebffff4b 	bl	23264 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   23534:	e3500004 	cmp	r0, #4
   23538:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
   2353c:	eaffffcb 	b	23470 <CKernelOptions::CKernelOptions()+0xc8>
   23540:	e28d0010 	add	r0, sp, #16
   23544:	ebfff651 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   23548:	e1a00005 	mov	r0, r5
   2354c:	e28dd01c 	add	sp, sp, #28
   23550:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23554:	e3a03000 	mov	r3, #0
   23558:	e1a01006 	mov	r1, r6
   2355c:	e5c43000 	strb	r3, [r4]
   23560:	e1a0000b 	mov	r0, fp
   23564:	ebfffe29 	bl	22e10 <strcmp>
   23568:	e3500000 	cmp	r0, #0
   2356c:	e2843001 	add	r3, r4, #1
   23570:	1a000058 	bne	236d8 <CKernelOptions::CKernelOptions()+0x330>
   23574:	e3530000 	cmp	r3, #0
   23578:	0affffbc 	beq	23470 <CKernelOptions::CKernelOptions()+0xc8>
   2357c:	e1d420d1 	ldrsb	r2, [r4, #1]
   23580:	e3520000 	cmp	r2, #0
   23584:	0affffb9 	beq	23470 <CKernelOptions::CKernelOptions()+0xc8>
   23588:	e1a00003 	mov	r0, r3
   2358c:	ebffff34 	bl	23264 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   23590:	e300353c 	movw	r3, #1340	; 0x53c
   23594:	e2402d0a 	sub	r2, r0, #640	; 0x280
   23598:	e1520003 	cmp	r2, r3
   2359c:	95850810 	strls	r0, [r5, #2064]	; 0x810
   235a0:	eaffffb2 	b	23470 <CKernelOptions::CKernelOptions()+0xc8>
   235a4:	e1a01003 	mov	r1, r3
   235a8:	e3a02013 	mov	r2, #19
   235ac:	e1a00007 	mov	r0, r7
   235b0:	ebfffe3c 	bl	22ea8 <strncpy>
   235b4:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
   235b8:	eaffffac 	b	23470 <CKernelOptions::CKernelOptions()+0xc8>
   235bc:	e30f1d4c 	movw	r1, #64844	; 0xfd4c
   235c0:	e3401002 	movt	r1, #2
   235c4:	e1a0000b 	mov	r0, fp
   235c8:	e58d300c 	str	r3, [sp, #12]
   235cc:	ebfffe0f 	bl	22e10 <strcmp>
   235d0:	e2504000 	subs	r4, r0, #0
   235d4:	e59d300c 	ldr	r3, [sp, #12]
   235d8:	1a000005 	bne	235f4 <CKernelOptions::CKernelOptions()+0x24c>
   235dc:	e1a01003 	mov	r1, r3
   235e0:	e3a02002 	mov	r2, #2
   235e4:	e1a00009 	mov	r0, r9
   235e8:	ebfffe2e 	bl	22ea8 <strncpy>
   235ec:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
   235f0:	eaffff9e 	b	23470 <CKernelOptions::CKernelOptions()+0xc8>
   235f4:	e30f1d54 	movw	r1, #64852	; 0xfd54
   235f8:	e3401002 	movt	r1, #2
   235fc:	e1a0000b 	mov	r0, fp
   23600:	e58d300c 	str	r3, [sp, #12]
   23604:	ebfffe01 	bl	22e10 <strcmp>
   23608:	e3500000 	cmp	r0, #0
   2360c:	e59d300c 	ldr	r3, [sp, #12]
   23610:	1a00000b 	bne	23644 <CKernelOptions::CKernelOptions()+0x29c>
   23614:	e3530000 	cmp	r3, #0
   23618:	0affff94 	beq	23470 <CKernelOptions::CKernelOptions()+0xc8>
   2361c:	e1d320d0 	ldrsb	r2, [r3]
   23620:	e3520000 	cmp	r2, #0
   23624:	0affff91 	beq	23470 <CKernelOptions::CKernelOptions()+0xc8>
   23628:	e1a00003 	mov	r0, r3
   2362c:	ebffff0c 	bl	23264 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   23630:	e3013e78 	movw	r3, #7800	; 0x1e78
   23634:	e24020c8 	sub	r2, r0, #200	; 0xc8
   23638:	e1520003 	cmp	r2, r3
   2363c:	95850834 	strls	r0, [r5, #2100]	; 0x834
   23640:	eaffff8a 	b	23470 <CKernelOptions::CKernelOptions()+0xc8>
   23644:	e30f1d64 	movw	r1, #64868	; 0xfd64
   23648:	e3401002 	movt	r1, #2
   2364c:	e1a0000b 	mov	r0, fp
   23650:	e58d300c 	str	r3, [sp, #12]
   23654:	ebfffded 	bl	22e10 <strcmp>
   23658:	e3500000 	cmp	r0, #0
   2365c:	e59d300c 	ldr	r3, [sp, #12]
   23660:	1a000007 	bne	23684 <CKernelOptions::CKernelOptions()+0x2dc>
   23664:	e1a00003 	mov	r0, r3
   23668:	e30f1d6c 	movw	r1, #64876	; 0xfd6c
   2366c:	e3401002 	movt	r1, #2
   23670:	ebfffde6 	bl	22e10 <strcmp>
   23674:	e3500000 	cmp	r0, #0
   23678:	03a03001 	moveq	r3, #1
   2367c:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
   23680:	eaffff7a 	b	23470 <CKernelOptions::CKernelOptions()+0xc8>
   23684:	e1a0000b 	mov	r0, fp
   23688:	e30f1d74 	movw	r1, #64884	; 0xfd74
   2368c:	e3401002 	movt	r1, #2
   23690:	e58d300c 	str	r3, [sp, #12]
   23694:	ebfffddd 	bl	22e10 <strcmp>
   23698:	e59d300c 	ldr	r3, [sp, #12]
   2369c:	e2902000 	adds	r2, r0, #0
   236a0:	13a02001 	movne	r2, #1
   236a4:	e3530000 	cmp	r3, #0
   236a8:	03822001 	orreq	r2, r2, #1
   236ac:	e3520000 	cmp	r2, #0
   236b0:	1affff6e 	bne	23470 <CKernelOptions::CKernelOptions()+0xc8>
   236b4:	e1d320d0 	ldrsb	r2, [r3]
   236b8:	e3520000 	cmp	r2, #0
   236bc:	0affff6b 	beq	23470 <CKernelOptions::CKernelOptions()+0xc8>
   236c0:	e1a00003 	mov	r0, r3
   236c4:	ebfffee6 	bl	23264 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   236c8:	e2403028 	sub	r3, r0, #40	; 0x28
   236cc:	e3530026 	cmp	r3, #38	; 0x26
   236d0:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
   236d4:	eaffff65 	b	23470 <CKernelOptions::CKernelOptions()+0xc8>
   236d8:	e1a01008 	mov	r1, r8
   236dc:	e1a0000b 	mov	r0, fp
   236e0:	e58d300c 	str	r3, [sp, #12]
   236e4:	ebfffdc9 	bl	22e10 <strcmp>
   236e8:	e3500000 	cmp	r0, #0
   236ec:	e59d300c 	ldr	r3, [sp, #12]
   236f0:	1affff79 	bne	234dc <CKernelOptions::CKernelOptions()+0x134>
   236f4:	e3530000 	cmp	r3, #0
   236f8:	0affff5c 	beq	23470 <CKernelOptions::CKernelOptions()+0xc8>
   236fc:	e1d420d1 	ldrsb	r2, [r4, #1]
   23700:	e3520000 	cmp	r2, #0
   23704:	0affff59 	beq	23470 <CKernelOptions::CKernelOptions()+0xc8>
   23708:	e1a00003 	mov	r0, r3
   2370c:	ebfffed4 	bl	23264 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   23710:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   23714:	e3530f96 	cmp	r3, #600	; 0x258
   23718:	95850814 	strls	r0, [r5, #2068]	; 0x814
   2371c:	eaffff53 	b	23470 <CKernelOptions::CKernelOptions()+0xc8>

00023720 <CKernelOptions::GetOptionValue(char*)>:
   23720:	e1d030d0 	ldrsb	r3, [r0]
   23724:	e3530000 	cmp	r3, #0
   23728:	1a000003 	bne	2373c <CKernelOptions::GetOptionValue(char*)+0x1c>
   2372c:	ea000007 	b	23750 <CKernelOptions::GetOptionValue(char*)+0x30>
   23730:	e1f030d1 	ldrsb	r3, [r0, #1]!
   23734:	e3530000 	cmp	r3, #0
   23738:	0a000004 	beq	23750 <CKernelOptions::GetOptionValue(char*)+0x30>
   2373c:	e353003d 	cmp	r3, #61	; 0x3d
   23740:	1afffffa 	bne	23730 <CKernelOptions::GetOptionValue(char*)+0x10>
   23744:	e3a02000 	mov	r2, #0
   23748:	e2803001 	add	r3, r0, #1
   2374c:	e5c02000 	strb	r2, [r0]
   23750:	e1a00003 	mov	r0, r3
   23754:	e12fff1e 	bx	lr

00023758 <CKernelOptions::GetDecimal(char*)>:
   23758:	e2503000 	subs	r3, r0, #0
   2375c:	0a000002 	beq	2376c <CKernelOptions::GetDecimal(char*)+0x14>
   23760:	e1d330d0 	ldrsb	r3, [r3]
   23764:	e3530000 	cmp	r3, #0
   23768:	1a000001 	bne	23774 <CKernelOptions::GetDecimal(char*)+0x1c>
   2376c:	e3e00000 	mvn	r0, #0
   23770:	e12fff1e 	bx	lr
   23774:	eafffeba 	b	23264 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

00023778 <CPageTable::CPageTable()>:
   23778:	e92d4010 	push	{r4, lr}
   2377c:	e1a04000 	mov	r4, r0
   23780:	e3a01000 	mov	r1, #0
   23784:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
   23788:	e1a0c001 	mov	ip, r1
   2378c:	e1a03002 	mov	r3, r2
   23790:	e3a0e002 	mov	lr, #2
   23794:	e3a00001 	mov	r0, #1
   23798:	e8840006 	stm	r4, {r1, r2}
   2379c:	e5d32000 	ldrb	r2, [r3]
   237a0:	e35c0b01 	cmp	ip, #1024	; 0x400
   237a4:	e5d31002 	ldrb	r1, [r3, #2]
   237a8:	e2833004 	add	r3, r3, #4
   237ac:	e7c1201e 	bfi	r2, lr, #0, #2
   237b0:	e3811001 	orr	r1, r1, #1
   237b4:	e6ef2072 	uxtb	r2, r2
   237b8:	e20110f9 	and	r1, r1, #249	; 0xf9
   237bc:	e3822004 	orr	r2, r2, #4
   237c0:	e7c3119f 	bfc	r1, #3, #1
   237c4:	e20220f7 	and	r2, r2, #247	; 0xf7
   237c8:	e5431002 	strb	r1, [r3, #-2]
   237cc:	e7c4221f 	bfc	r2, #4, #1
   237d0:	e5432004 	strb	r2, [r3, #-4]
   237d4:	e15310b2 	ldrh	r1, [r3, #-2]
   237d8:	e15320b4 	ldrh	r2, [r3, #-4]
   237dc:	e7cf121c 	bfi	r1, ip, #4, #12
   237e0:	e28cc001 	add	ip, ip, #1
   237e4:	e7c8229f 	bfc	r2, #5, #4
   237e8:	e14310b2 	strh	r1, [r3, #-2]
   237ec:	e14320b4 	strh	r2, [r3, #-4]
   237f0:	e1a02422 	lsr	r2, r2, #8
   237f4:	e20220fd 	and	r2, r2, #253	; 0xfd
   237f8:	e7c32110 	bfi	r2, r0, #2, #2
   237fc:	e202208f 	and	r2, r2, #143	; 0x8f
   23800:	e7c7239f 	bfc	r2, #7, #1
   23804:	e5432003 	strb	r2, [r3, #-3]
   23808:	25532004 	ldrbcs	r2, [r3, #-4]
   2380c:	23822010 	orrcs	r2, r2, #16
   23810:	25432004 	strbcs	r2, [r3, #-4]
   23814:	e35c0a01 	cmp	ip, #4096	; 0x1000
   23818:	1affffdf 	bne	2379c <CPageTable::CPageTable()+0x24>
   2381c:	eb001507 	bl	28c40 <CleanDataCache>
   23820:	e1a00004 	mov	r0, r4
   23824:	e8bd8010 	pop	{r4, pc}

00023828 <CPageTable::CPageTable(unsigned int)>:
   23828:	e3a03001 	mov	r3, #1
   2382c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23830:	e1a04000 	mov	r4, r0
   23834:	e5803000 	str	r3, [r0]
   23838:	e1a05001 	mov	r5, r1
   2383c:	eb00180a 	bl	2986c <palloc>
   23840:	e3500000 	cmp	r0, #0
   23844:	e5840004 	str	r0, [r4, #4]
   23848:	0a00003e 	beq	23948 <CPageTable::CPageTable(unsigned int)+0x120>
   2384c:	e7eb3050 	ubfx	r3, r0, #0, #12
   23850:	e3530000 	cmp	r3, #0
   23854:	1a000033 	bne	23928 <CPageTable::CPageTable(unsigned int)+0x100>
   23858:	e3a02000 	mov	r2, #0
   2385c:	e30ae1ec 	movw	lr, #41452	; 0xa1ec
   23860:	e340e002 	movt	lr, #2
   23864:	e1a08002 	mov	r8, r2
   23868:	e3a07002 	mov	r7, #2
   2386c:	e3a06001 	mov	r6, #1
   23870:	ea000009 	b	2389c <CPageTable::CPageTable(unsigned int)+0x74>
   23874:	e6ef3071 	uxtb	r3, r1
   23878:	e5d01000 	ldrb	r1, [r0]
   2387c:	e3833001 	orr	r3, r3, #1
   23880:	e7c31198 	bfi	r1, r8, #3, #1
   23884:	e5c03002 	strb	r3, [r0, #2]
   23888:	e5c01000 	strb	r1, [r0]
   2388c:	e2822601 	add	r2, r2, #1048576	; 0x100000
   23890:	e2800004 	add	r0, r0, #4
   23894:	e3520101 	cmp	r2, #1073741824	; 0x40000000
   23898:	0a00001f 	beq	2391c <CPageTable::CPageTable(unsigned int)+0xf4>
   2389c:	e5d03001 	ldrb	r3, [r0, #1]
   238a0:	e7e31a52 	ubfx	r1, r2, #20, #4
   238a4:	e152000e 	cmp	r2, lr
   238a8:	e387c00c 	orr	ip, r7, #12
   238ac:	e20330fc 	and	r3, r3, #252	; 0xfc
   238b0:	e1a09c22 	lsr	r9, r2, #24
   238b4:	e7c33116 	bfi	r3, r6, #2, #2
   238b8:	e1a01201 	lsl	r1, r1, #4
   238bc:	e203308f 	and	r3, r3, #143	; 0x8f
   238c0:	e5c01002 	strb	r1, [r0, #2]
   238c4:	e7c7339f 	bfc	r3, #7, #1
   238c8:	e5c0c000 	strb	ip, [r0]
   238cc:	e5c03001 	strb	r3, [r0, #1]
   238d0:	e5c09003 	strb	r9, [r0, #3]
   238d4:	3affffec 	bcc	2388c <CPageTable::CPageTable(unsigned int)+0x64>
   238d8:	e1520005 	cmp	r2, r5
   238dc:	e6ef307c 	uxtb	r3, ip
   238e0:	e3833010 	orr	r3, r3, #16
   238e4:	e5c03000 	strb	r3, [r0]
   238e8:	2affffe1 	bcs	23874 <CPageTable::CPageTable(unsigned int)+0x4c>
   238ec:	e3520501 	cmp	r2, #4194304	; 0x400000
   238f0:	1affffe5 	bne	2388c <CPageTable::CPageTable(unsigned int)+0x64>
   238f4:	e5d03000 	ldrb	r3, [r0]
   238f8:	e2800004 	add	r0, r0, #4
   238fc:	e5502002 	ldrb	r2, [r0, #-2]
   23900:	e20330fb 	and	r3, r3, #251	; 0xfb
   23904:	e3822001 	orr	r2, r2, #1
   23908:	e7c33198 	bfi	r3, r8, #3, #1
   2390c:	e5402002 	strb	r2, [r0, #-2]
   23910:	e3a02605 	mov	r2, #5242880	; 0x500000
   23914:	e5403004 	strb	r3, [r0, #-4]
   23918:	eaffffdf 	b	2389c <CPageTable::CPageTable(unsigned int)+0x74>
   2391c:	eb0014c7 	bl	28c40 <CleanDataCache>
   23920:	e1a00004 	mov	r0, r4
   23924:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23928:	e30f1d88 	movw	r1, #64904	; 0xfd88
   2392c:	e3401002 	movt	r1, #2
   23930:	e30f0da8 	movw	r0, #64936	; 0xfda8
   23934:	e3400002 	movt	r0, #2
   23938:	e3a02051 	mov	r2, #81	; 0x51
   2393c:	eb000497 	bl	24ba0 <assertion_failed>
   23940:	e5940004 	ldr	r0, [r4, #4]
   23944:	eaffffc3 	b	23858 <CPageTable::CPageTable(unsigned int)+0x30>
   23948:	e30f1d88 	movw	r1, #64904	; 0xfd88
   2394c:	e3401002 	movt	r1, #2
   23950:	e30f0d98 	movw	r0, #64920	; 0xfd98
   23954:	e3400002 	movt	r0, #2
   23958:	e3a02050 	mov	r2, #80	; 0x50
   2395c:	eb00048f 	bl	24ba0 <assertion_failed>
   23960:	e5940004 	ldr	r0, [r4, #4]
   23964:	eaffffb8 	b	2384c <CPageTable::CPageTable(unsigned int)+0x24>

00023968 <CPageTable::~CPageTable()>:
   23968:	e5903000 	ldr	r3, [r0]
   2396c:	e92d4010 	push	{r4, lr}
   23970:	e1a04000 	mov	r4, r0
   23974:	e3530000 	cmp	r3, #0
   23978:	0a000001 	beq	23984 <CPageTable::~CPageTable()+0x1c>
   2397c:	e5900004 	ldr	r0, [r0, #4]
   23980:	eb0017f3 	bl	29954 <pfree>
   23984:	e1a00004 	mov	r0, r4
   23988:	e8bd8010 	pop	{r4, pc}

0002398c <CPageTable::GetBaseAddress() const>:
   2398c:	e5900004 	ldr	r0, [r0, #4]
   23990:	e3800059 	orr	r0, r0, #89	; 0x59
   23994:	e12fff1e 	bx	lr

00023998 <CScreenDevice::~CScreenDevice()>:
   23998:	e590300c 	ldr	r3, [r0, #12]
   2399c:	e59f2068 	ldr	r2, [pc, #104]	; 23a0c <CScreenDevice::~CScreenDevice()+0x74>
   239a0:	e3530000 	cmp	r3, #0
   239a4:	e92d4070 	push	{r4, r5, r6, lr}
   239a8:	e1a04000 	mov	r4, r0
   239ac:	e5802000 	str	r2, [r0]
   239b0:	0a000003 	beq	239c4 <CScreenDevice::~CScreenDevice()+0x2c>
   239b4:	e5900018 	ldr	r0, [r0, #24]
   239b8:	e3500000 	cmp	r0, #0
   239bc:	0a000000 	beq	239c4 <CScreenDevice::~CScreenDevice()+0x2c>
   239c0:	ebfff977 	bl	21fa4 <operator delete[](void*)>
   239c4:	e5945010 	ldr	r5, [r4, #16]
   239c8:	e3a03000 	mov	r3, #0
   239cc:	e5843018 	str	r3, [r4, #24]
   239d0:	e1550003 	cmp	r5, r3
   239d4:	0a000004 	beq	239ec <CScreenDevice::~CScreenDevice()+0x54>
   239d8:	e1a00005 	mov	r0, r5
   239dc:	eb001912 	bl	29e2c <CBcmFrameBuffer::~CBcmFrameBuffer()>
   239e0:	e1a00005 	mov	r0, r5
   239e4:	e3a01024 	mov	r1, #36	; 0x24
   239e8:	ebfff96e 	bl	21fa8 <operator delete(void*, unsigned int)>
   239ec:	e3a03000 	mov	r3, #0
   239f0:	e2840014 	add	r0, r4, #20
   239f4:	e5843010 	str	r3, [r4, #16]
   239f8:	eb00048f 	bl	24c3c <CCharGenerator::~CCharGenerator()>
   239fc:	e1a00004 	mov	r0, r4
   23a00:	ebfffe07 	bl	23224 <CDevice::~CDevice()>
   23a04:	e1a00004 	mov	r0, r4
   23a08:	e8bd8070 	pop	{r4, r5, r6, pc}
   23a0c:	0002fdd0 	.word	0x0002fdd0

00023a10 <CScreenDevice::~CScreenDevice()>:
   23a10:	e92d4010 	push	{r4, lr}
   23a14:	e1a04000 	mov	r4, r0
   23a18:	ebffffde 	bl	23998 <CScreenDevice::~CScreenDevice()>
   23a1c:	e1a00004 	mov	r0, r4
   23a20:	e3a01060 	mov	r1, #96	; 0x60
   23a24:	ebfff95f 	bl	21fa8 <operator delete(void*, unsigned int)>
   23a28:	e1a00004 	mov	r0, r4
   23a2c:	e8bd8010 	pop	{r4, pc}

00023a30 <CScreenDevice::InvertCursor() [clone .part.6]>:
   23a30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23a34:	e2806014 	add	r6, r0, #20
   23a38:	e1a05000 	mov	r5, r0
   23a3c:	e1a00006 	mov	r0, r6
   23a40:	e3a08000 	mov	r8, #0
   23a44:	eb000481 	bl	24c50 <CCharGenerator::GetUnderline() const>
   23a48:	e1a07000 	mov	r7, r0
   23a4c:	e1a00006 	mov	r0, r6
   23a50:	eb00047c 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   23a54:	e1500007 	cmp	r0, r7
   23a58:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   23a5c:	e3a04000 	mov	r4, #0
   23a60:	ea000013 	b	23ab4 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
   23a64:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   23a68:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   23a6c:	e0843003 	add	r3, r4, r3
   23a70:	e1530002 	cmp	r3, r2
   23a74:	2a00000d 	bcs	23ab0 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   23a78:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   23a7c:	e5951028 	ldr	r1, [r5, #40]	; 0x28
   23a80:	e0872002 	add	r2, r7, r2
   23a84:	e1520001 	cmp	r2, r1
   23a88:	2a000008 	bcs	23ab0 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   23a8c:	e5950020 	ldr	r0, [r5, #32]
   23a90:	e5951018 	ldr	r1, [r5, #24]
   23a94:	e0233290 	mla	r3, r0, r2, r3
   23a98:	e1a03083 	lsl	r3, r3, #1
   23a9c:	e19120b3 	ldrh	r2, [r1, r3]
   23aa0:	e3520000 	cmp	r2, #0
   23aa4:	118180b3 	strhne	r8, [r1, r3]
   23aa8:	01d524b8 	ldrheq	r2, [r5, #72]	; 0x48
   23aac:	018120b3 	strheq	r2, [r1, r3]
   23ab0:	e2844001 	add	r4, r4, #1
   23ab4:	e1a00006 	mov	r0, r6
   23ab8:	eb000460 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   23abc:	e1500004 	cmp	r0, r4
   23ac0:	8affffe7 	bhi	23a64 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
   23ac4:	e2877001 	add	r7, r7, #1
   23ac8:	eaffffdf 	b	23a4c <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

00023acc <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
   23acc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23ad0:	e1a04000 	mov	r4, r0
   23ad4:	e1a07002 	mov	r7, r2
   23ad8:	e1a06003 	mov	r6, r3
   23adc:	e1a08001 	mov	r8, r1
   23ae0:	ebfffddb 	bl	23254 <CDevice::CDevice()>
   23ae4:	e59fc054 	ldr	ip, [pc, #84]	; 23b40 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x74>
   23ae8:	e3a05000 	mov	r5, #0
   23aec:	e5848004 	str	r8, [r4, #4]
   23af0:	e5847008 	str	r7, [r4, #8]
   23af4:	e2840014 	add	r0, r4, #20
   23af8:	e584600c 	str	r6, [r4, #12]
   23afc:	e584c000 	str	ip, [r4]
   23b00:	e5845010 	str	r5, [r4, #16]
   23b04:	eb000449 	bl	24c30 <CCharGenerator::CCharGenerator()>
   23b08:	e3e02020 	mvn	r2, #32
   23b0c:	e3a03001 	mov	r3, #1
   23b10:	e5845018 	str	r5, [r4, #24]
   23b14:	e5845030 	str	r5, [r4, #48]	; 0x30
   23b18:	e1a00004 	mov	r0, r4
   23b1c:	e5845034 	str	r5, [r4, #52]	; 0x34
   23b20:	e584503c 	str	r5, [r4, #60]	; 0x3c
   23b24:	e5845040 	str	r5, [r4, #64]	; 0x40
   23b28:	e584504c 	str	r5, [r4, #76]	; 0x4c
   23b2c:	e5845058 	str	r5, [r4, #88]	; 0x58
   23b30:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
   23b34:	e5843044 	str	r3, [r4, #68]	; 0x44
   23b38:	e584305c 	str	r3, [r4, #92]	; 0x5c
   23b3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23b40:	0002fdd0 	.word	0x0002fdd0

00023b44 <CScreenDevice::GetWidth() const>:
   23b44:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   23b48:	e12fff1e 	bx	lr

00023b4c <CScreenDevice::GetHeight() const>:
   23b4c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   23b50:	e12fff1e 	bx	lr

00023b54 <CScreenDevice::GetColumns() const>:
   23b54:	e1a03000 	mov	r3, r0
   23b58:	e92d4010 	push	{r4, lr}
   23b5c:	e2800014 	add	r0, r0, #20
   23b60:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   23b64:	eb000435 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   23b68:	e730f014 	udiv	r0, r4, r0
   23b6c:	e8bd8010 	pop	{r4, pc}

00023b70 <CScreenDevice::GetRows() const>:
   23b70:	e1a03000 	mov	r3, r0
   23b74:	e92d4010 	push	{r4, lr}
   23b78:	e2800014 	add	r0, r0, #20
   23b7c:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
   23b80:	eb000430 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   23b84:	e730f014 	udiv	r0, r4, r0
   23b88:	e8bd8010 	pop	{r4, pc}

00023b8c <CScreenDevice::GetStatus()>:
   23b8c:	e591c018 	ldr	ip, [r1, #24]
   23b90:	e591201c 	ldr	r2, [r1, #28]
   23b94:	e92d4070 	push	{r4, r5, r6, lr}
   23b98:	e5915030 	ldr	r5, [r1, #48]	; 0x30
   23b9c:	e5914034 	ldr	r4, [r1, #52]	; 0x34
   23ba0:	e591e038 	ldr	lr, [r1, #56]	; 0x38
   23ba4:	e580c000 	str	ip, [r0]
   23ba8:	e5802004 	str	r2, [r0, #4]
   23bac:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
   23bb0:	e5912040 	ldr	r2, [r1, #64]	; 0x40
   23bb4:	e5805008 	str	r5, [r0, #8]
   23bb8:	e5916044 	ldr	r6, [r1, #68]	; 0x44
   23bbc:	e580400c 	str	r4, [r0, #12]
   23bc0:	e1d154b8 	ldrh	r5, [r1, #72]	; 0x48
   23bc4:	e580e010 	str	lr, [r0, #16]
   23bc8:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
   23bcc:	e580c014 	str	ip, [r0, #20]
   23bd0:	e591e050 	ldr	lr, [r1, #80]	; 0x50
   23bd4:	e5802018 	str	r2, [r0, #24]
   23bd8:	e591c054 	ldr	ip, [r1, #84]	; 0x54
   23bdc:	e5912058 	ldr	r2, [r1, #88]	; 0x58
   23be0:	e580601c 	str	r6, [r0, #28]
   23be4:	e1c052b0 	strh	r5, [r0, #32]
   23be8:	e5804024 	str	r4, [r0, #36]	; 0x24
   23bec:	e580e028 	str	lr, [r0, #40]	; 0x28
   23bf0:	e580c02c 	str	ip, [r0, #44]	; 0x2c
   23bf4:	e5802030 	str	r2, [r0, #48]	; 0x30
   23bf8:	e8bd8070 	pop	{r4, r5, r6, pc}

00023bfc <CScreenDevice::SetStatus(TScreenStatus)>:
   23bfc:	e24dd010 	sub	sp, sp, #16
   23c00:	e92d4070 	push	{r4, r5, r6, lr}
   23c04:	e28dc014 	add	ip, sp, #20
   23c08:	e88c000e 	stm	ip, {r1, r2, r3}
   23c0c:	e590201c 	ldr	r2, [r0, #28]
   23c10:	e59d3018 	ldr	r3, [sp, #24]
   23c14:	e1520003 	cmp	r2, r3
   23c18:	0a000003 	beq	23c2c <CScreenDevice::SetStatus(TScreenStatus)+0x30>
   23c1c:	e3a00000 	mov	r0, #0
   23c20:	e8bd4070 	pop	{r4, r5, r6, lr}
   23c24:	e28dd010 	add	sp, sp, #16
   23c28:	e12fff1e 	bx	lr
   23c2c:	e5901020 	ldr	r1, [r0, #32]
   23c30:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   23c34:	e1510003 	cmp	r1, r3
   23c38:	1afffff7 	bne	23c1c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
   23c3c:	e1a04000 	mov	r4, r0
   23c40:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
   23c44:	e3500000 	cmp	r0, #0
   23c48:	1a000020 	bne	23cd0 <CScreenDevice::SetStatus(TScreenStatus)+0xd4>
   23c4c:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   23c50:	e3530000 	cmp	r3, #0
   23c54:	1afffff0 	bne	23c1c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
   23c58:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
   23c5c:	e3530000 	cmp	r3, #0
   23c60:	1affffed 	bne	23c1c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
   23c64:	e59d1014 	ldr	r1, [sp, #20]
   23c68:	e5940018 	ldr	r0, [r4, #24]
   23c6c:	ebfffd55 	bl	231c8 <memcpy>
   23c70:	e28d2020 	add	r2, sp, #32
   23c74:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   23c78:	e59d101c 	ldr	r1, [sp, #28]
   23c7c:	e3530000 	cmp	r3, #0
   23c80:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   23c84:	e892402c 	ldm	r2, {r2, r3, r5, lr}
   23c88:	e5841030 	str	r1, [r4, #48]	; 0x30
   23c8c:	e1dd03b4 	ldrh	r0, [sp, #52]	; 0x34
   23c90:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   23c94:	e5842034 	str	r2, [r4, #52]	; 0x34
   23c98:	e5843038 	str	r3, [r4, #56]	; 0x38
   23c9c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
   23ca0:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   23ca4:	e584503c 	str	r5, [r4, #60]	; 0x3c
   23ca8:	e584e040 	str	lr, [r4, #64]	; 0x40
   23cac:	e584c044 	str	ip, [r4, #68]	; 0x44
   23cb0:	e1c404b8 	strh	r0, [r4, #72]	; 0x48
   23cb4:	e584104c 	str	r1, [r4, #76]	; 0x4c
   23cb8:	e5842050 	str	r2, [r4, #80]	; 0x50
   23cbc:	e5843054 	str	r3, [r4, #84]	; 0x54
   23cc0:	1a00000f 	bne	23d04 <CScreenDevice::SetStatus(TScreenStatus)+0x108>
   23cc4:	f57ff05f 	dmb	sy
   23cc8:	e3a00001 	mov	r0, #1
   23ccc:	eaffffd3 	b	23c20 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
   23cd0:	ebfff8bc 	bl	21fc8 <EnterCritical>
   23cd4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   23cd8:	e3530000 	cmp	r3, #0
   23cdc:	1a000003 	bne	23cf0 <CScreenDevice::SetStatus(TScreenStatus)+0xf4>
   23ce0:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
   23ce4:	e3530000 	cmp	r3, #0
   23ce8:	0594201c 	ldreq	r2, [r4, #28]
   23cec:	0affffdc 	beq	23c64 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
   23cf0:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   23cf4:	e3530000 	cmp	r3, #0
   23cf8:	0affffc7 	beq	23c1c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
   23cfc:	ebfff8df 	bl	22080 <LeaveCritical>
   23d00:	eaffffc5 	b	23c1c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
   23d04:	ebfff8dd 	bl	22080 <LeaveCritical>
   23d08:	eaffffed 	b	23cc4 <CScreenDevice::SetStatus(TScreenStatus)+0xc8>

00023d0c <CScreenDevice::CarriageReturn()>:
   23d0c:	e3a03000 	mov	r3, #0
   23d10:	e580303c 	str	r3, [r0, #60]	; 0x3c
   23d14:	e12fff1e 	bx	lr

00023d18 <CScreenDevice::CursorHome()>:
   23d18:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   23d1c:	e3a02000 	mov	r2, #0
   23d20:	e580203c 	str	r2, [r0, #60]	; 0x3c
   23d24:	e5803040 	str	r3, [r0, #64]	; 0x40
   23d28:	e12fff1e 	bx	lr

00023d2c <CScreenDevice::CursorLeft()>:
   23d2c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   23d30:	e92d4070 	push	{r4, r5, r6, lr}
   23d34:	e1a04000 	mov	r4, r0
   23d38:	e3530000 	cmp	r3, #0
   23d3c:	1a00000f 	bne	23d80 <CScreenDevice::CursorLeft()+0x54>
   23d40:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   23d44:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   23d48:	e1520003 	cmp	r2, r3
   23d4c:	98bd8070 	popls	{r4, r5, r6, pc}
   23d50:	e5905024 	ldr	r5, [r0, #36]	; 0x24
   23d54:	e2806014 	add	r6, r0, #20
   23d58:	e1a00006 	mov	r0, r6
   23d5c:	eb0003b7 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   23d60:	e0450000 	sub	r0, r5, r0
   23d64:	e584003c 	str	r0, [r4, #60]	; 0x3c
   23d68:	e1a00006 	mov	r0, r6
   23d6c:	eb0003b5 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   23d70:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   23d74:	e0430000 	sub	r0, r3, r0
   23d78:	e5840040 	str	r0, [r4, #64]	; 0x40
   23d7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23d80:	e2800014 	add	r0, r0, #20
   23d84:	eb0003ad 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   23d88:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   23d8c:	e0430000 	sub	r0, r3, r0
   23d90:	e584003c 	str	r0, [r4, #60]	; 0x3c
   23d94:	e8bd8070 	pop	{r4, r5, r6, pc}

00023d98 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   23d98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23d9c:	e1a04002 	mov	r4, r2
   23da0:	e2444001 	sub	r4, r4, #1
   23da4:	e1a05000 	mov	r5, r0
   23da8:	e2806014 	add	r6, r0, #20
   23dac:	e1a00006 	mov	r0, r6
   23db0:	e1a07001 	mov	r7, r1
   23db4:	eb0003a1 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   23db8:	e0040490 	mul	r4, r0, r4
   23dbc:	e1a00006 	mov	r0, r6
   23dc0:	eb0003a0 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   23dc4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   23dc8:	e1540003 	cmp	r4, r3
   23dcc:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   23dd0:	e2477001 	sub	r7, r7, #1
   23dd4:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   23dd8:	e0000790 	mul	r0, r0, r7
   23ddc:	e1500003 	cmp	r0, r3
   23de0:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   23de4:	e5953038 	ldr	r3, [r5, #56]	; 0x38
   23de8:	e1500003 	cmp	r0, r3
   23dec:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
   23df0:	35850040 	strcc	r0, [r5, #64]	; 0x40
   23df4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00023df8 <CScreenDevice::CursorUp()>:
   23df8:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   23dfc:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   23e00:	e1520003 	cmp	r2, r3
   23e04:	912fff1e 	bxls	lr
   23e08:	e92d4010 	push	{r4, lr}
   23e0c:	e1a04000 	mov	r4, r0
   23e10:	e2800014 	add	r0, r0, #20
   23e14:	eb00038b 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   23e18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   23e1c:	e0430000 	sub	r0, r3, r0
   23e20:	e5840040 	str	r0, [r4, #64]	; 0x40
   23e24:	e8bd8010 	pop	{r4, pc}

00023e28 <CScreenDevice::DeleteChars(unsigned int)>:
   23e28:	e12fff1e 	bx	lr

00023e2c <CScreenDevice::DeleteLines(unsigned int)>:
   23e2c:	e12fff1e 	bx	lr

00023e30 <CScreenDevice::InsertLines(unsigned int)>:
   23e30:	e12fff1e 	bx	lr

00023e34 <CScreenDevice::InsertMode(int)>:
   23e34:	e580104c 	str	r1, [r0, #76]	; 0x4c
   23e38:	e12fff1e 	bx	lr

00023e3c <CScreenDevice::ReverseScroll()>:
   23e3c:	e12fff1e 	bx	lr

00023e40 <CScreenDevice::SetCursorMode(int)>:
   23e40:	e5801044 	str	r1, [r0, #68]	; 0x44
   23e44:	e12fff1e 	bx	lr

00023e48 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   23e48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23e4c:	e1a04001 	mov	r4, r1
   23e50:	e2444001 	sub	r4, r4, #1
   23e54:	e1a06000 	mov	r6, r0
   23e58:	e1a05002 	mov	r5, r2
   23e5c:	e2807014 	add	r7, r0, #20
   23e60:	e1a00007 	mov	r0, r7
   23e64:	eb000377 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   23e68:	e0040490 	mul	r4, r0, r4
   23e6c:	e1a00007 	mov	r0, r7
   23e70:	eb000374 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   23e74:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
   23e78:	e0000095 	mul	r0, r5, r0
   23e7c:	e3500000 	cmp	r0, #0
   23e80:	11540002 	cmpne	r4, r2
   23e84:	33a03001 	movcc	r3, #1
   23e88:	23a03000 	movcs	r3, #0
   23e8c:	e1500002 	cmp	r0, r2
   23e90:	83a03000 	movhi	r3, #0
   23e94:	92033001 	andls	r3, r3, #1
   23e98:	e1540000 	cmp	r4, r0
   23e9c:	23a03000 	movcs	r3, #0
   23ea0:	32033001 	andcc	r3, r3, #1
   23ea4:	e3530000 	cmp	r3, #0
   23ea8:	e3a03000 	mov	r3, #0
   23eac:	15864034 	strne	r4, [r6, #52]	; 0x34
   23eb0:	15860038 	strne	r0, [r6, #56]	; 0x38
   23eb4:	05964034 	ldreq	r4, [r6, #52]	; 0x34
   23eb8:	e586303c 	str	r3, [r6, #60]	; 0x3c
   23ebc:	e5864040 	str	r4, [r6, #64]	; 0x40
   23ec0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00023ec4 <CScreenDevice::SetStandoutMode(unsigned int)>:
   23ec4:	e351001b 	cmp	r1, #27
   23ec8:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   23ecc:	ea00001d 	b	23f48 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
   23ed0:	00023f58 	.word	0x00023f58
   23ed4:	00023f4c 	.word	0x00023f4c
   23ed8:	00023f40 	.word	0x00023f40
   23edc:	00023f48 	.word	0x00023f48
   23ee0:	00023f48 	.word	0x00023f48
   23ee4:	00023f48 	.word	0x00023f48
   23ee8:	00023f48 	.word	0x00023f48
   23eec:	00023f48 	.word	0x00023f48
   23ef0:	00023f48 	.word	0x00023f48
   23ef4:	00023f48 	.word	0x00023f48
   23ef8:	00023f48 	.word	0x00023f48
   23efc:	00023f48 	.word	0x00023f48
   23f00:	00023f48 	.word	0x00023f48
   23f04:	00023f48 	.word	0x00023f48
   23f08:	00023f48 	.word	0x00023f48
   23f0c:	00023f48 	.word	0x00023f48
   23f10:	00023f48 	.word	0x00023f48
   23f14:	00023f48 	.word	0x00023f48
   23f18:	00023f48 	.word	0x00023f48
   23f1c:	00023f48 	.word	0x00023f48
   23f20:	00023f48 	.word	0x00023f48
   23f24:	00023f48 	.word	0x00023f48
   23f28:	00023f48 	.word	0x00023f48
   23f2c:	00023f48 	.word	0x00023f48
   23f30:	00023f48 	.word	0x00023f48
   23f34:	00023f48 	.word	0x00023f48
   23f38:	00023f48 	.word	0x00023f48
   23f3c:	00023f58 	.word	0x00023f58
   23f40:	e3a0301f 	mov	r3, #31
   23f44:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   23f48:	e12fff1e 	bx	lr
   23f4c:	e3a03b3e 	mov	r3, #63488	; 0xf800
   23f50:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   23f54:	e12fff1e 	bx	lr
   23f58:	e3e03020 	mvn	r3, #32
   23f5c:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   23f60:	e12fff1e 	bx	lr

00023f64 <CScreenDevice::Scroll()>:
   23f64:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23f68:	e1a07000 	mov	r7, r0
   23f6c:	e2800014 	add	r0, r0, #20
   23f70:	eb000334 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   23f74:	e1a06000 	mov	r6, r0
   23f78:	e5972034 	ldr	r2, [r7, #52]	; 0x34
   23f7c:	e5975020 	ldr	r5, [r7, #32]
   23f80:	e5974038 	ldr	r4, [r7, #56]	; 0x38
   23f84:	e5971018 	ldr	r1, [r7, #24]
   23f88:	e0444002 	sub	r4, r4, r2
   23f8c:	e1a03085 	lsl	r3, r5, #1
   23f90:	e0444000 	sub	r4, r4, r0
   23f94:	e0050295 	mul	r5, r5, r2
   23f98:	e0815085 	add	r5, r1, r5, lsl #1
   23f9c:	e0040493 	mul	r4, r3, r4
   23fa0:	e3540000 	cmp	r4, #0
   23fa4:	1a000007 	bne	23fc8 <CScreenDevice::Scroll()+0x64>
   23fa8:	e0030693 	mul	r3, r3, r6
   23fac:	e1b03123 	lsrs	r3, r3, #2
   23fb0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   23fb4:	e1a00005 	mov	r0, r5
   23fb8:	e1a02103 	lsl	r2, r3, #2
   23fbc:	e3a01000 	mov	r1, #0
   23fc0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   23fc4:	eafffb67 	b	22d68 <memset>
   23fc8:	e0808002 	add	r8, r0, r2
   23fcc:	e3c4900f 	bic	r9, r4, #15
   23fd0:	e1a02009 	mov	r2, r9
   23fd4:	e1a00005 	mov	r0, r5
   23fd8:	e0281893 	mla	r8, r3, r8, r1
   23fdc:	e1a01008 	mov	r1, r8
   23fe0:	ebfffc78 	bl	231c8 <memcpy>
   23fe4:	e204200e 	and	r2, r4, #14
   23fe8:	e0850009 	add	r0, r5, r9
   23fec:	e0881009 	add	r1, r8, r9
   23ff0:	ebfffc74 	bl	231c8 <memcpy>
   23ff4:	e5972020 	ldr	r2, [r7, #32]
   23ff8:	e3c44003 	bic	r4, r4, #3
   23ffc:	e0855004 	add	r5, r5, r4
   24000:	e1a03082 	lsl	r3, r2, #1
   24004:	eaffffe7 	b	23fa8 <CScreenDevice::Scroll()+0x44>

00024008 <CScreenDevice::CursorDown()>:
   24008:	e92d4070 	push	{r4, r5, r6, lr}
   2400c:	e1a04000 	mov	r4, r0
   24010:	e2805014 	add	r5, r0, #20
   24014:	e1a00005 	mov	r0, r5
   24018:	eb00030a 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   2401c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   24020:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   24024:	e0800003 	add	r0, r0, r3
   24028:	e1500002 	cmp	r0, r2
   2402c:	e5840040 	str	r0, [r4, #64]	; 0x40
   24030:	38bd8070 	popcc	{r4, r5, r6, pc}
   24034:	e1a00004 	mov	r0, r4
   24038:	ebffffc9 	bl	23f64 <CScreenDevice::Scroll()>
   2403c:	e1a00005 	mov	r0, r5
   24040:	eb000300 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   24044:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   24048:	e0430000 	sub	r0, r3, r0
   2404c:	e5840040 	str	r0, [r4, #64]	; 0x40
   24050:	e8bd8070 	pop	{r4, r5, r6, pc}

00024054 <CScreenDevice::NewLine()>:
   24054:	e3a02000 	mov	r2, #0
   24058:	e580203c 	str	r2, [r0, #60]	; 0x3c
   2405c:	eaffffe9 	b	24008 <CScreenDevice::CursorDown()>

00024060 <CScreenDevice::CursorRight()>:
   24060:	e92d4010 	push	{r4, lr}
   24064:	e1a04000 	mov	r4, r0
   24068:	e2800014 	add	r0, r0, #20
   2406c:	eb0002f3 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   24070:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   24074:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   24078:	e0800003 	add	r0, r0, r3
   2407c:	e1500002 	cmp	r0, r2
   24080:	e584003c 	str	r0, [r4, #60]	; 0x3c
   24084:	38bd8010 	popcc	{r4, pc}
   24088:	e3a03000 	mov	r3, #0
   2408c:	e1a00004 	mov	r0, r4
   24090:	e584303c 	str	r3, [r4, #60]	; 0x3c
   24094:	e8bd4010 	pop	{r4, lr}
   24098:	eaffffda 	b	24008 <CScreenDevice::CursorDown()>

0002409c <CScreenDevice::Tabulator()>:
   2409c:	e92d4010 	push	{r4, lr}
   240a0:	e1a04000 	mov	r4, r0
   240a4:	e2800014 	add	r0, r0, #20
   240a8:	eb0002e4 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   240ac:	e1a00180 	lsl	r0, r0, #3
   240b0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   240b4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   240b8:	e0803003 	add	r3, r0, r3
   240bc:	e733f013 	udiv	r3, r3, r0
   240c0:	e0000390 	mul	r0, r0, r3
   240c4:	e1500002 	cmp	r0, r2
   240c8:	e584003c 	str	r0, [r4, #60]	; 0x3c
   240cc:	38bd8010 	popcc	{r4, pc}
   240d0:	e3a03000 	mov	r3, #0
   240d4:	e1a00004 	mov	r0, r4
   240d8:	e584303c 	str	r3, [r4, #60]	; 0x3c
   240dc:	e8bd4010 	pop	{r4, lr}
   240e0:	eaffffc8 	b	24008 <CScreenDevice::CursorDown()>

000240e4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   240e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   240e8:	e2806014 	add	r6, r0, #20
   240ec:	e1a07000 	mov	r7, r0
   240f0:	e24dd00c 	sub	sp, sp, #12
   240f4:	e3a08000 	mov	r8, #0
   240f8:	e1a00006 	mov	r0, r6
   240fc:	e1a0a001 	mov	sl, r1
   24100:	e1a09002 	mov	r9, r2
   24104:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
   24108:	e58d3004 	str	r3, [sp, #4]
   2410c:	eb0002cd 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   24110:	e1580000 	cmp	r8, r0
   24114:	2a000024 	bcs	241ac <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
   24118:	e59d3004 	ldr	r3, [sp, #4]
   2411c:	e3a04000 	mov	r4, #0
   24120:	e0883003 	add	r3, r8, r3
   24124:	e58d3000 	str	r3, [sp]
   24128:	e1a00006 	mov	r0, r6
   2412c:	e0845009 	add	r5, r4, r9
   24130:	eb0002c2 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   24134:	e1540000 	cmp	r4, r0
   24138:	e1a02004 	mov	r2, r4
   2413c:	e1a03008 	mov	r3, r8
   24140:	e1a0100a 	mov	r1, sl
   24144:	e1a00006 	mov	r0, r6
   24148:	e2844001 	add	r4, r4, #1
   2414c:	2a000011 	bcs	24198 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>
   24150:	eb0002c0 	bl	24c58 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   24154:	e5973024 	ldr	r3, [r7, #36]	; 0x24
   24158:	e3500000 	cmp	r0, #0
   2415c:	11a0200b 	movne	r2, fp
   24160:	03a02000 	moveq	r2, #0
   24164:	e1550003 	cmp	r5, r3
   24168:	2affffee 	bcs	24128 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
   2416c:	e5973028 	ldr	r3, [r7, #40]	; 0x28
   24170:	e59d1000 	ldr	r1, [sp]
   24174:	e1510003 	cmp	r1, r3
   24178:	2affffea 	bcs	24128 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
   2417c:	e5973020 	ldr	r3, [r7, #32]
   24180:	e59d0000 	ldr	r0, [sp]
   24184:	e5971018 	ldr	r1, [r7, #24]
   24188:	e0255093 	mla	r5, r3, r0, r5
   2418c:	e1a05085 	lsl	r5, r5, #1
   24190:	e18120b5 	strh	r2, [r1, r5]
   24194:	eaffffe3 	b	24128 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
   24198:	e2888001 	add	r8, r8, #1
   2419c:	e1a00006 	mov	r0, r6
   241a0:	eb0002a8 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   241a4:	e1580000 	cmp	r8, r0
   241a8:	3affffda 	bcc	24118 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
   241ac:	e28dd00c 	add	sp, sp, #12
   241b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000241b4 <CScreenDevice::DisplayChar(char)>:
   241b4:	e6ef3071 	uxtb	r3, r1
   241b8:	e353001f 	cmp	r3, #31
   241bc:	912fff1e 	bxls	lr
   241c0:	e92d4010 	push	{r4, lr}
   241c4:	e1a04000 	mov	r4, r0
   241c8:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
   241cc:	e24dd008 	sub	sp, sp, #8
   241d0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   241d4:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   241d8:	e58dc000 	str	ip, [sp]
   241dc:	ebffffc0 	bl	240e4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   241e0:	e1a00004 	mov	r0, r4
   241e4:	e28dd008 	add	sp, sp, #8
   241e8:	e8bd4010 	pop	{r4, lr}
   241ec:	eaffff9b 	b	24060 <CScreenDevice::CursorRight()>

000241f0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   241f0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241f4:	e3a08000 	mov	r8, #0
   241f8:	e1a0b000 	mov	fp, r0
   241fc:	e1a06001 	mov	r6, r1
   24200:	e1a0a002 	mov	sl, r2
   24204:	e2805014 	add	r5, r0, #20
   24208:	e1a09008 	mov	r9, r8
   2420c:	e1a00005 	mov	r0, r5
   24210:	eb00028c 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   24214:	e1580000 	cmp	r8, r0
   24218:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2421c:	e3a04000 	mov	r4, #0
   24220:	e088700a 	add	r7, r8, sl
   24224:	e1a00005 	mov	r0, r5
   24228:	eb000284 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   2422c:	e1540000 	cmp	r4, r0
   24230:	e0843006 	add	r3, r4, r6
   24234:	e2844001 	add	r4, r4, #1
   24238:	2a00000b 	bcs	2426c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
   2423c:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
   24240:	e1530002 	cmp	r3, r2
   24244:	2afffff6 	bcs	24224 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   24248:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
   2424c:	e1570002 	cmp	r7, r2
   24250:	2afffff3 	bcs	24224 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   24254:	e59b2020 	ldr	r2, [fp, #32]
   24258:	e59b1018 	ldr	r1, [fp, #24]
   2425c:	e0233792 	mla	r3, r2, r7, r3
   24260:	e1a03083 	lsl	r3, r3, #1
   24264:	e18190b3 	strh	r9, [r1, r3]
   24268:	eaffffed 	b	24224 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   2426c:	e2888001 	add	r8, r8, #1
   24270:	eaffffe5 	b	2420c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

00024274 <CScreenDevice::ClearLineEnd()>:
   24274:	e92d4070 	push	{r4, r5, r6, lr}
   24278:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   2427c:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   24280:	e1540003 	cmp	r4, r3
   24284:	28bd8070 	popcs	{r4, r5, r6, pc}
   24288:	e1a05000 	mov	r5, r0
   2428c:	e2806014 	add	r6, r0, #20
   24290:	e1a01004 	mov	r1, r4
   24294:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   24298:	e1a00005 	mov	r0, r5
   2429c:	ebffffd3 	bl	241f0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   242a0:	e1a00006 	mov	r0, r6
   242a4:	eb000265 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   242a8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   242ac:	e0844000 	add	r4, r4, r0
   242b0:	e1530004 	cmp	r3, r4
   242b4:	8afffff5 	bhi	24290 <CScreenDevice::ClearLineEnd()+0x1c>
   242b8:	e8bd8070 	pop	{r4, r5, r6, pc}

000242bc <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
   242bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   242c0:	e1a05000 	mov	r5, r0
   242c4:	e1a06001 	mov	r6, r1
   242c8:	e2807014 	add	r7, r0, #20
   242cc:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   242d0:	e1a00007 	mov	r0, r7
   242d4:	eb000259 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   242d8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   242dc:	e0264096 	mla	r6, r6, r0, r4
   242e0:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   242e4:	e1560003 	cmp	r6, r3
   242e8:	21a06003 	movcs	r6, r3
   242ec:	e1540006 	cmp	r4, r6
   242f0:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   242f4:	e1a01004 	mov	r1, r4
   242f8:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   242fc:	e1a00005 	mov	r0, r5
   24300:	ebffffba 	bl	241f0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   24304:	e1a00007 	mov	r0, r7
   24308:	eb00024c 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   2430c:	e0844000 	add	r4, r4, r0
   24310:	e1540006 	cmp	r4, r6
   24314:	3afffff6 	bcc	242f4 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
   24318:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002431c <CScreenDevice::EraseChars(unsigned int)>:
   2431c:	e3510000 	cmp	r1, #0
   24320:	012fff1e 	bxeq	lr
   24324:	eaffffe4 	b	242bc <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

00024328 <CScreenDevice::ClearDisplayEnd()>:
   24328:	e92d4070 	push	{r4, r5, r6, lr}
   2432c:	e1a05000 	mov	r5, r0
   24330:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   24334:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   24338:	e2806014 	add	r6, r0, #20
   2433c:	e1540003 	cmp	r4, r3
   24340:	2a000009 	bcs	2436c <CScreenDevice::ClearDisplayEnd()+0x44>
   24344:	e1a01004 	mov	r1, r4
   24348:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   2434c:	e1a00005 	mov	r0, r5
   24350:	ebffffa6 	bl	241f0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   24354:	e1a00006 	mov	r0, r6
   24358:	eb000238 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   2435c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   24360:	e0844000 	add	r4, r4, r0
   24364:	e1530004 	cmp	r3, r4
   24368:	8afffff5 	bhi	24344 <CScreenDevice::ClearDisplayEnd()+0x1c>
   2436c:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   24370:	e1a00006 	mov	r0, r6
   24374:	eb000233 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   24378:	e5953020 	ldr	r3, [r5, #32]
   2437c:	e0840000 	add	r0, r4, r0
   24380:	e595201c 	ldr	r2, [r5, #28]
   24384:	e5951018 	ldr	r1, [r5, #24]
   24388:	e0000093 	mul	r0, r3, r0
   2438c:	e07020a2 	rsbs	r2, r0, r2, lsr #1
   24390:	0a000004 	beq	243a8 <CScreenDevice::ClearDisplayEnd()+0x80>
   24394:	e0810080 	add	r0, r1, r0, lsl #1
   24398:	e1a02082 	lsl	r2, r2, #1
   2439c:	e3a01000 	mov	r1, #0
   243a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   243a4:	eafffa6f 	b	22d68 <memset>
   243a8:	e8bd8070 	pop	{r4, r5, r6, pc}

000243ac <CScreenDevice::Write(char)>:
   243ac:	e92d4010 	push	{r4, lr}
   243b0:	e1a04000 	mov	r4, r0
   243b4:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   243b8:	e24dd008 	sub	sp, sp, #8
   243bc:	e3530007 	cmp	r3, #7
   243c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   243c4:	ea000010 	b	2440c <CScreenDevice::Write(char)+0x60>
   243c8:	00024458 	.word	0x00024458
   243cc:	000244b8 	.word	0x000244b8
   243d0:	000244d4 	.word	0x000244d4
   243d4:	0002452c 	.word	0x0002452c
   243d8:	00024608 	.word	0x00024608
   243dc:	00024628 	.word	0x00024628
   243e0:	00024648 	.word	0x00024648
   243e4:	0002441c 	.word	0x0002441c
   243e8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   243ec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   243f0:	e1520003 	cmp	r2, r3
   243f4:	2a000004 	bcs	2440c <CScreenDevice::Write(char)+0x60>
   243f8:	e2800014 	add	r0, r0, #20
   243fc:	eb000211 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   24400:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   24404:	e0433000 	sub	r3, r3, r0
   24408:	e5843040 	str	r3, [r4, #64]	; 0x40
   2440c:	e3a03000 	mov	r3, #0
   24410:	e5843030 	str	r3, [r4, #48]	; 0x30
   24414:	e28dd008 	add	sp, sp, #8
   24418:	e8bd8010 	pop	{r4, pc}
   2441c:	e3510068 	cmp	r1, #104	; 0x68
   24420:	0a000097 	beq	24684 <CScreenDevice::Write(char)+0x2d8>
   24424:	e351006c 	cmp	r1, #108	; 0x6c
   24428:	0a000095 	beq	24684 <CScreenDevice::Write(char)+0x2d8>
   2442c:	e2411030 	sub	r1, r1, #48	; 0x30
   24430:	e6ef3071 	uxtb	r3, r1
   24434:	e3530009 	cmp	r3, #9
   24438:	8afffff3 	bhi	2440c <CScreenDevice::Write(char)+0x60>
   2443c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   24440:	e3a0200a 	mov	r2, #10
   24444:	e0211392 	mla	r1, r2, r3, r1
   24448:	e3510063 	cmp	r1, #99	; 0x63
   2444c:	e5841050 	str	r1, [r4, #80]	; 0x50
   24450:	8affffed 	bhi	2440c <CScreenDevice::Write(char)+0x60>
   24454:	eaffffee 	b	24414 <CScreenDevice::Write(char)+0x68>
   24458:	e2413008 	sub	r3, r1, #8
   2445c:	e3530013 	cmp	r3, #19
   24460:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   24464:	ea0000ec 	b	2481c <CScreenDevice::Write(char)+0x470>
   24468:	000246f0 	.word	0x000246f0
   2446c:	000246e4 	.word	0x000246e4
   24470:	000246d0 	.word	0x000246d0
   24474:	0002481c 	.word	0x0002481c
   24478:	0002481c 	.word	0x0002481c
   2447c:	000246c4 	.word	0x000246c4
   24480:	0002481c 	.word	0x0002481c
   24484:	0002481c 	.word	0x0002481c
   24488:	0002481c 	.word	0x0002481c
   2448c:	0002481c 	.word	0x0002481c
   24490:	0002481c 	.word	0x0002481c
   24494:	0002481c 	.word	0x0002481c
   24498:	0002481c 	.word	0x0002481c
   2449c:	0002481c 	.word	0x0002481c
   244a0:	0002481c 	.word	0x0002481c
   244a4:	0002481c 	.word	0x0002481c
   244a8:	0002481c 	.word	0x0002481c
   244ac:	0002481c 	.word	0x0002481c
   244b0:	0002481c 	.word	0x0002481c
   244b4:	000246b8 	.word	0x000246b8
   244b8:	e351004d 	cmp	r1, #77	; 0x4d
   244bc:	0affffd2 	beq	2440c <CScreenDevice::Write(char)+0x60>
   244c0:	e351005b 	cmp	r1, #91	; 0x5b
   244c4:	03a03002 	moveq	r3, #2
   244c8:	05803030 	streq	r3, [r0, #48]	; 0x30
   244cc:	0affffd0 	beq	24414 <CScreenDevice::Write(char)+0x68>
   244d0:	eaffffcd 	b	2440c <CScreenDevice::Write(char)+0x60>
   244d4:	e241303f 	sub	r3, r1, #63	; 0x3f
   244d8:	e3530011 	cmp	r3, #17
   244dc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   244e0:	ea0000d9 	b	2484c <CScreenDevice::Write(char)+0x4a0>
   244e4:	000247d8 	.word	0x000247d8
   244e8:	0002484c 	.word	0x0002484c
   244ec:	000243e8 	.word	0x000243e8
   244f0:	0002480c 	.word	0x0002480c
   244f4:	000247fc 	.word	0x000247fc
   244f8:	0002484c 	.word	0x0002484c
   244fc:	0002484c 	.word	0x0002484c
   24500:	0002484c 	.word	0x0002484c
   24504:	0002484c 	.word	0x0002484c
   24508:	000247e4 	.word	0x000247e4
   2450c:	0002484c 	.word	0x0002484c
   24510:	000247c8 	.word	0x000247c8
   24514:	000247b8 	.word	0x000247b8
   24518:	0002440c 	.word	0x0002440c
   2451c:	0002440c 	.word	0x0002440c
   24520:	0002484c 	.word	0x0002484c
   24524:	0002484c 	.word	0x0002484c
   24528:	0002440c 	.word	0x0002440c
   2452c:	e241303b 	sub	r3, r1, #59	; 0x3b
   24530:	e3530032 	cmp	r3, #50	; 0x32
   24534:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   24538:	eaffffbb 	b	2442c <CScreenDevice::Write(char)+0x80>
   2453c:	000247ac 	.word	0x000247ac
   24540:	0002442c 	.word	0x0002442c
   24544:	0002442c 	.word	0x0002442c
   24548:	0002442c 	.word	0x0002442c
   2454c:	0002442c 	.word	0x0002442c
   24550:	0002442c 	.word	0x0002442c
   24554:	0002442c 	.word	0x0002442c
   24558:	0002442c 	.word	0x0002442c
   2455c:	0002442c 	.word	0x0002442c
   24560:	0002442c 	.word	0x0002442c
   24564:	0002442c 	.word	0x0002442c
   24568:	0002442c 	.word	0x0002442c
   2456c:	0002442c 	.word	0x0002442c
   24570:	0002442c 	.word	0x0002442c
   24574:	0002442c 	.word	0x0002442c
   24578:	0002442c 	.word	0x0002442c
   2457c:	0002442c 	.word	0x0002442c
   24580:	0002440c 	.word	0x0002440c
   24584:	0002440c 	.word	0x0002440c
   24588:	0002442c 	.word	0x0002442c
   2458c:	0002442c 	.word	0x0002442c
   24590:	0002440c 	.word	0x0002440c
   24594:	0002442c 	.word	0x0002442c
   24598:	0002442c 	.word	0x0002442c
   2459c:	0002442c 	.word	0x0002442c
   245a0:	0002442c 	.word	0x0002442c
   245a4:	0002442c 	.word	0x0002442c
   245a8:	0002442c 	.word	0x0002442c
   245ac:	0002442c 	.word	0x0002442c
   245b0:	000246fc 	.word	0x000246fc
   245b4:	0002442c 	.word	0x0002442c
   245b8:	0002442c 	.word	0x0002442c
   245bc:	0002442c 	.word	0x0002442c
   245c0:	0002442c 	.word	0x0002442c
   245c4:	0002442c 	.word	0x0002442c
   245c8:	0002442c 	.word	0x0002442c
   245cc:	0002442c 	.word	0x0002442c
   245d0:	0002442c 	.word	0x0002442c
   245d4:	0002442c 	.word	0x0002442c
   245d8:	0002442c 	.word	0x0002442c
   245dc:	0002442c 	.word	0x0002442c
   245e0:	0002442c 	.word	0x0002442c
   245e4:	0002442c 	.word	0x0002442c
   245e8:	0002442c 	.word	0x0002442c
   245ec:	0002442c 	.word	0x0002442c
   245f0:	00024710 	.word	0x00024710
   245f4:	0002442c 	.word	0x0002442c
   245f8:	0002442c 	.word	0x0002442c
   245fc:	0002442c 	.word	0x0002442c
   24600:	00024710 	.word	0x00024710
   24604:	0002472c 	.word	0x0002472c
   24608:	e2411030 	sub	r1, r1, #48	; 0x30
   2460c:	e6ef3071 	uxtb	r3, r1
   24610:	e3530009 	cmp	r3, #9
   24614:	8affff7c 	bhi	2440c <CScreenDevice::Write(char)+0x60>
   24618:	e3a03007 	mov	r3, #7
   2461c:	e5801050 	str	r1, [r0, #80]	; 0x50
   24620:	e5803030 	str	r3, [r0, #48]	; 0x30
   24624:	eaffff7a 	b	24414 <CScreenDevice::Write(char)+0x68>
   24628:	e2411030 	sub	r1, r1, #48	; 0x30
   2462c:	e6ef3071 	uxtb	r3, r1
   24630:	e3530009 	cmp	r3, #9
   24634:	8affff74 	bhi	2440c <CScreenDevice::Write(char)+0x60>
   24638:	e3a03006 	mov	r3, #6
   2463c:	e5801054 	str	r1, [r0, #84]	; 0x54
   24640:	e5803030 	str	r3, [r0, #48]	; 0x30
   24644:	eaffff72 	b	24414 <CScreenDevice::Write(char)+0x68>
   24648:	e3510048 	cmp	r1, #72	; 0x48
   2464c:	0a00008f 	beq	24890 <CScreenDevice::Write(char)+0x4e4>
   24650:	e3510072 	cmp	r1, #114	; 0x72
   24654:	0a000011 	beq	246a0 <CScreenDevice::Write(char)+0x2f4>
   24658:	e2411030 	sub	r1, r1, #48	; 0x30
   2465c:	e6ef3071 	uxtb	r3, r1
   24660:	e3530009 	cmp	r3, #9
   24664:	8affff68 	bhi	2440c <CScreenDevice::Write(char)+0x60>
   24668:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   2466c:	e3a0200a 	mov	r2, #10
   24670:	e0211392 	mla	r1, r2, r3, r1
   24674:	e35100c7 	cmp	r1, #199	; 0xc7
   24678:	e5801054 	str	r1, [r0, #84]	; 0x54
   2467c:	8affff62 	bhi	2440c <CScreenDevice::Write(char)+0x60>
   24680:	eaffff63 	b	24414 <CScreenDevice::Write(char)+0x68>
   24684:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   24688:	e3530019 	cmp	r3, #25
   2468c:	02411068 	subeq	r1, r1, #104	; 0x68
   24690:	016f1f11 	clzeq	r1, r1
   24694:	01a012a1 	lsreq	r1, r1, #5
   24698:	05841044 	streq	r1, [r4, #68]	; 0x44
   2469c:	eaffff5a 	b	2440c <CScreenDevice::Write(char)+0x60>
   246a0:	e5902054 	ldr	r2, [r0, #84]	; 0x54
   246a4:	e5901050 	ldr	r1, [r0, #80]	; 0x50
   246a8:	ebfffde6 	bl	23e48 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   246ac:	e3a03000 	mov	r3, #0
   246b0:	e5843030 	str	r3, [r4, #48]	; 0x30
   246b4:	eaffff56 	b	24414 <CScreenDevice::Write(char)+0x68>
   246b8:	e3a03001 	mov	r3, #1
   246bc:	e5803030 	str	r3, [r0, #48]	; 0x30
   246c0:	eaffff53 	b	24414 <CScreenDevice::Write(char)+0x68>
   246c4:	e3a03000 	mov	r3, #0
   246c8:	e580303c 	str	r3, [r0, #60]	; 0x3c
   246cc:	eaffff50 	b	24414 <CScreenDevice::Write(char)+0x68>
   246d0:	e3a03000 	mov	r3, #0
   246d4:	e580303c 	str	r3, [r0, #60]	; 0x3c
   246d8:	e28dd008 	add	sp, sp, #8
   246dc:	e8bd4010 	pop	{r4, lr}
   246e0:	eafffe48 	b	24008 <CScreenDevice::CursorDown()>
   246e4:	e28dd008 	add	sp, sp, #8
   246e8:	e8bd4010 	pop	{r4, lr}
   246ec:	eafffe6a 	b	2409c <CScreenDevice::Tabulator()>
   246f0:	e28dd008 	add	sp, sp, #8
   246f4:	e8bd4010 	pop	{r4, lr}
   246f8:	eafffd8b 	b	23d2c <CScreenDevice::CursorLeft()>
   246fc:	e5901050 	ldr	r1, [r0, #80]	; 0x50
   24700:	e3510000 	cmp	r1, #0
   24704:	0affff40 	beq	2440c <CScreenDevice::Write(char)+0x60>
   24708:	ebfffeeb 	bl	242bc <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
   2470c:	eaffff3e 	b	2440c <CScreenDevice::Write(char)+0x60>
   24710:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   24714:	e3530004 	cmp	r3, #4
   24718:	02411068 	subeq	r1, r1, #104	; 0x68
   2471c:	016f1f11 	clzeq	r1, r1
   24720:	01a012a1 	lsreq	r1, r1, #5
   24724:	0580104c 	streq	r1, [r0, #76]	; 0x4c
   24728:	eaffff37 	b	2440c <CScreenDevice::Write(char)+0x60>
   2472c:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   24730:	e353001b 	cmp	r3, #27
   24734:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   24738:	eaffff33 	b	2440c <CScreenDevice::Write(char)+0x60>
   2473c:	00024884 	.word	0x00024884
   24740:	00024878 	.word	0x00024878
   24744:	0002486c 	.word	0x0002486c
   24748:	0002440c 	.word	0x0002440c
   2474c:	0002440c 	.word	0x0002440c
   24750:	0002440c 	.word	0x0002440c
   24754:	0002440c 	.word	0x0002440c
   24758:	0002440c 	.word	0x0002440c
   2475c:	0002440c 	.word	0x0002440c
   24760:	0002440c 	.word	0x0002440c
   24764:	0002440c 	.word	0x0002440c
   24768:	0002440c 	.word	0x0002440c
   2476c:	0002440c 	.word	0x0002440c
   24770:	0002440c 	.word	0x0002440c
   24774:	0002440c 	.word	0x0002440c
   24778:	0002440c 	.word	0x0002440c
   2477c:	0002440c 	.word	0x0002440c
   24780:	0002440c 	.word	0x0002440c
   24784:	0002440c 	.word	0x0002440c
   24788:	0002440c 	.word	0x0002440c
   2478c:	0002440c 	.word	0x0002440c
   24790:	0002440c 	.word	0x0002440c
   24794:	0002440c 	.word	0x0002440c
   24798:	0002440c 	.word	0x0002440c
   2479c:	0002440c 	.word	0x0002440c
   247a0:	0002440c 	.word	0x0002440c
   247a4:	0002440c 	.word	0x0002440c
   247a8:	00024884 	.word	0x00024884
   247ac:	e3a03005 	mov	r3, #5
   247b0:	e5803030 	str	r3, [r0, #48]	; 0x30
   247b4:	eaffff16 	b	24414 <CScreenDevice::Write(char)+0x68>
   247b8:	ebfffead 	bl	24274 <CScreenDevice::ClearLineEnd()>
   247bc:	e3a03000 	mov	r3, #0
   247c0:	e5843030 	str	r3, [r4, #48]	; 0x30
   247c4:	eaffff12 	b	24414 <CScreenDevice::Write(char)+0x68>
   247c8:	ebfffed6 	bl	24328 <CScreenDevice::ClearDisplayEnd()>
   247cc:	e3a03000 	mov	r3, #0
   247d0:	e5843030 	str	r3, [r4, #48]	; 0x30
   247d4:	eaffff0e 	b	24414 <CScreenDevice::Write(char)+0x68>
   247d8:	e3a03004 	mov	r3, #4
   247dc:	e5803030 	str	r3, [r0, #48]	; 0x30
   247e0:	eaffff0b 	b	24414 <CScreenDevice::Write(char)+0x68>
   247e4:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   247e8:	e3a03000 	mov	r3, #0
   247ec:	e580303c 	str	r3, [r0, #60]	; 0x3c
   247f0:	e5802040 	str	r2, [r0, #64]	; 0x40
   247f4:	e5803030 	str	r3, [r0, #48]	; 0x30
   247f8:	eaffff05 	b	24414 <CScreenDevice::Write(char)+0x68>
   247fc:	ebfffe17 	bl	24060 <CScreenDevice::CursorRight()>
   24800:	e3a03000 	mov	r3, #0
   24804:	e5843030 	str	r3, [r4, #48]	; 0x30
   24808:	eaffff01 	b	24414 <CScreenDevice::Write(char)+0x68>
   2480c:	ebfffdfd 	bl	24008 <CScreenDevice::CursorDown()>
   24810:	e3a03000 	mov	r3, #0
   24814:	e5843030 	str	r3, [r4, #48]	; 0x30
   24818:	eafffefd 	b	24414 <CScreenDevice::Write(char)+0x68>
   2481c:	e6ef3071 	uxtb	r3, r1
   24820:	e353001f 	cmp	r3, #31
   24824:	9afffefa 	bls	24414 <CScreenDevice::Write(char)+0x68>
   24828:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
   2482c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   24830:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   24834:	e58dc000 	str	ip, [sp]
   24838:	ebfffe29 	bl	240e4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   2483c:	e1a00004 	mov	r0, r4
   24840:	e28dd008 	add	sp, sp, #8
   24844:	e8bd4010 	pop	{r4, lr}
   24848:	eafffe04 	b	24060 <CScreenDevice::CursorRight()>
   2484c:	e2411030 	sub	r1, r1, #48	; 0x30
   24850:	e6ef3071 	uxtb	r3, r1
   24854:	e3530009 	cmp	r3, #9
   24858:	8afffeeb 	bhi	2440c <CScreenDevice::Write(char)+0x60>
   2485c:	e3a03003 	mov	r3, #3
   24860:	e5801050 	str	r1, [r0, #80]	; 0x50
   24864:	e5803030 	str	r3, [r0, #48]	; 0x30
   24868:	eafffee9 	b	24414 <CScreenDevice::Write(char)+0x68>
   2486c:	e3a0301f 	mov	r3, #31
   24870:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   24874:	eafffee4 	b	2440c <CScreenDevice::Write(char)+0x60>
   24878:	e3a03b3e 	mov	r3, #63488	; 0xf800
   2487c:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   24880:	eafffee1 	b	2440c <CScreenDevice::Write(char)+0x60>
   24884:	e3e03020 	mvn	r3, #32
   24888:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   2488c:	eafffede 	b	2440c <CScreenDevice::Write(char)+0x60>
   24890:	e5902054 	ldr	r2, [r0, #84]	; 0x54
   24894:	e5901050 	ldr	r1, [r0, #80]	; 0x50
   24898:	ebfffd3e 	bl	23d98 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   2489c:	e3a03000 	mov	r3, #0
   248a0:	e5843030 	str	r3, [r4, #48]	; 0x30
   248a4:	eafffeda 	b	24414 <CScreenDevice::Write(char)+0x68>

000248a8 <CScreenDevice::Write(void const*, unsigned int)>:
   248a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   248ac:	e1a05000 	mov	r5, r0
   248b0:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
   248b4:	e1a06001 	mov	r6, r1
   248b8:	e1a08002 	mov	r8, r2
   248bc:	e3500000 	cmp	r0, #0
   248c0:	1a000026 	bne	24960 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
   248c4:	e5954044 	ldr	r4, [r5, #68]	; 0x44
   248c8:	e3a03001 	mov	r3, #1
   248cc:	e5853058 	str	r3, [r5, #88]	; 0x58
   248d0:	e3540000 	cmp	r4, #0
   248d4:	1a00001a 	bne	24944 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
   248d8:	e3580000 	cmp	r8, #0
   248dc:	e2487001 	sub	r7, r8, #1
   248e0:	0a00000b 	beq	24914 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
   248e4:	e1a04006 	mov	r4, r6
   248e8:	e0d410d1 	ldrsb	r1, [r4], #1
   248ec:	e1a00005 	mov	r0, r5
   248f0:	ebfffead 	bl	243ac <CScreenDevice::Write(char)>
   248f4:	e2643001 	rsb	r3, r4, #1
   248f8:	e0833007 	add	r3, r3, r7
   248fc:	e1760003 	cmn	r6, r3
   24900:	1afffff8 	bne	248e8 <CScreenDevice::Write(void const*, unsigned int)+0x40>
   24904:	e2874001 	add	r4, r7, #1
   24908:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   2490c:	e3530000 	cmp	r3, #0
   24910:	1a000008 	bne	24938 <CScreenDevice::Write(void const*, unsigned int)+0x90>
   24914:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
   24918:	e3a02000 	mov	r2, #0
   2491c:	e5852058 	str	r2, [r5, #88]	; 0x58
   24920:	e1530002 	cmp	r3, r2
   24924:	0a000000 	beq	2492c <CScreenDevice::Write(void const*, unsigned int)+0x84>
   24928:	ebfff5d4 	bl	22080 <LeaveCritical>
   2492c:	f57ff05f 	dmb	sy
   24930:	e1a00004 	mov	r0, r4
   24934:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24938:	e1a00005 	mov	r0, r5
   2493c:	ebfffc3b 	bl	23a30 <CScreenDevice::InvertCursor() [clone .part.6]>
   24940:	eafffff3 	b	24914 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
   24944:	e1a00005 	mov	r0, r5
   24948:	e2487001 	sub	r7, r8, #1
   2494c:	ebfffc37 	bl	23a30 <CScreenDevice::InvertCursor() [clone .part.6]>
   24950:	e3580000 	cmp	r8, #0
   24954:	1affffe2 	bne	248e4 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
   24958:	e1a04008 	mov	r4, r8
   2495c:	eaffffe9 	b	24908 <CScreenDevice::Write(void const*, unsigned int)+0x60>
   24960:	ebfff598 	bl	21fc8 <EnterCritical>
   24964:	eaffffd6 	b	248c4 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

00024968 <CScreenDevice::Initialize()>:
   24968:	e92d4070 	push	{r4, r5, r6, lr}
   2496c:	e1a04000 	mov	r4, r0
   24970:	e590600c 	ldr	r6, [r0, #12]
   24974:	e24dd008 	sub	sp, sp, #8
   24978:	e3560000 	cmp	r6, #0
   2497c:	0a000028 	beq	24a24 <CScreenDevice::Initialize()+0xbc>
   24980:	e5903004 	ldr	r3, [r0, #4]
   24984:	e5900008 	ldr	r0, [r0, #8]
   24988:	e5843024 	str	r3, [r4, #36]	; 0x24
   2498c:	e5840028 	str	r0, [r4, #40]	; 0x28
   24990:	e5843020 	str	r3, [r4, #32]
   24994:	e0000390 	mul	r0, r0, r3
   24998:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
   2499c:	e1a00080 	lsl	r0, r0, #1
   249a0:	e584001c 	str	r0, [r4, #28]
   249a4:	23e00000 	mvncs	r0, #0
   249a8:	ebfff57b 	bl	21f9c <operator new[](unsigned int)>
   249ac:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   249b0:	e5840018 	str	r0, [r4, #24]
   249b4:	e2846014 	add	r6, r4, #20
   249b8:	e1a00006 	mov	r0, r6
   249bc:	eb0000a1 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   249c0:	e735f015 	udiv	r5, r5, r0
   249c4:	e1a00006 	mov	r0, r6
   249c8:	eb00009e 	bl	24c48 <CCharGenerator::GetCharHeight() const>
   249cc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   249d0:	e3a02000 	mov	r2, #0
   249d4:	e5843040 	str	r3, [r4, #64]	; 0x40
   249d8:	e0050590 	mul	r5, r0, r5
   249dc:	e584203c 	str	r2, [r4, #60]	; 0x3c
   249e0:	e1a00004 	mov	r0, r4
   249e4:	e584502c 	str	r5, [r4, #44]	; 0x2c
   249e8:	e5845038 	str	r5, [r4, #56]	; 0x38
   249ec:	ebfffe4d 	bl	24328 <CScreenDevice::ClearDisplayEnd()>
   249f0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   249f4:	e3530000 	cmp	r3, #0
   249f8:	1a000031 	bne	24ac4 <CScreenDevice::Initialize()+0x15c>
   249fc:	eb0001bd 	bl	250f8 <CDeviceNameService::Get()>
   24a00:	e30f1d28 	movw	r1, #64808	; 0xfd28
   24a04:	e3401002 	movt	r1, #2
   24a08:	e1a02004 	mov	r2, r4
   24a0c:	e3a03000 	mov	r3, #0
   24a10:	e3a06001 	mov	r6, #1
   24a14:	eb000143 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   24a18:	e1a00006 	mov	r0, r6
   24a1c:	e28dd008 	add	sp, sp, #8
   24a20:	e8bd8070 	pop	{r4, r5, r6, pc}
   24a24:	e3a00024 	mov	r0, #36	; 0x24
   24a28:	ebfff55a 	bl	21f98 <operator new(unsigned int)>
   24a2c:	e5942008 	ldr	r2, [r4, #8]
   24a30:	e5941004 	ldr	r1, [r4, #4]
   24a34:	e1a05000 	mov	r5, r0
   24a38:	e3a03010 	mov	r3, #16
   24a3c:	e58d6004 	str	r6, [sp, #4]
   24a40:	e58d6000 	str	r6, [sp]
   24a44:	eb0014aa 	bl	29cf4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   24a48:	e5845010 	str	r5, [r4, #16]
   24a4c:	e1a00005 	mov	r0, r5
   24a50:	eb001511 	bl	29e9c <CBcmFrameBuffer::Initialize()>
   24a54:	e3500000 	cmp	r0, #0
   24a58:	0affffee 	beq	24a18 <CScreenDevice::Initialize()+0xb0>
   24a5c:	e5940010 	ldr	r0, [r4, #16]
   24a60:	eb001548 	bl	29f88 <CBcmFrameBuffer::GetDepth() const>
   24a64:	e3500010 	cmp	r0, #16
   24a68:	1affffea 	bne	24a18 <CScreenDevice::Initialize()+0xb0>
   24a6c:	e5940010 	ldr	r0, [r4, #16]
   24a70:	eb001546 	bl	29f90 <CBcmFrameBuffer::GetBuffer() const>
   24a74:	e5840018 	str	r0, [r4, #24]
   24a78:	e5940010 	ldr	r0, [r4, #16]
   24a7c:	eb001545 	bl	29f98 <CBcmFrameBuffer::GetSize() const>
   24a80:	e584001c 	str	r0, [r4, #28]
   24a84:	e5940010 	ldr	r0, [r4, #16]
   24a88:	eb00153c 	bl	29f80 <CBcmFrameBuffer::GetPitch() const>
   24a8c:	e5840020 	str	r0, [r4, #32]
   24a90:	e5940010 	ldr	r0, [r4, #16]
   24a94:	eb001531 	bl	29f60 <CBcmFrameBuffer::GetWidth() const>
   24a98:	e5840024 	str	r0, [r4, #36]	; 0x24
   24a9c:	e5940010 	ldr	r0, [r4, #16]
   24aa0:	eb001530 	bl	29f68 <CBcmFrameBuffer::GetHeight() const>
   24aa4:	e5943020 	ldr	r3, [r4, #32]
   24aa8:	e1a05000 	mov	r5, r0
   24aac:	e5840028 	str	r0, [r4, #40]	; 0x28
   24ab0:	e3130003 	tst	r3, #3
   24ab4:	01a030a3 	lsreq	r3, r3, #1
   24ab8:	05843020 	streq	r3, [r4, #32]
   24abc:	0affffbc 	beq	249b4 <CScreenDevice::Initialize()+0x4c>
   24ac0:	eaffffd4 	b	24a18 <CScreenDevice::Initialize()+0xb0>
   24ac4:	e1a00004 	mov	r0, r4
   24ac8:	ebfffbd8 	bl	23a30 <CScreenDevice::InvertCursor() [clone .part.6]>
   24acc:	eaffffca 	b	249fc <CScreenDevice::Initialize()+0x94>

00024ad0 <CScreenDevice::InvertCursor()>:
   24ad0:	e5903044 	ldr	r3, [r0, #68]	; 0x44
   24ad4:	e3530000 	cmp	r3, #0
   24ad8:	012fff1e 	bxeq	lr
   24adc:	eafffbd3 	b	23a30 <CScreenDevice::InvertCursor() [clone .part.6]>

00024ae0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   24ae0:	e590c024 	ldr	ip, [r0, #36]	; 0x24
   24ae4:	e15c0001 	cmp	ip, r1
   24ae8:	912fff1e 	bxls	lr
   24aec:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   24af0:	e15c0002 	cmp	ip, r2
   24af4:	8590c020 	ldrhi	ip, [r0, #32]
   24af8:	85900018 	ldrhi	r0, [r0, #24]
   24afc:	8022129c 	mlahi	r2, ip, r2, r1
   24b00:	81a02082 	lslhi	r2, r2, #1
   24b04:	818030b2 	strhhi	r3, [r0, r2]
   24b08:	e12fff1e 	bx	lr

00024b0c <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   24b0c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   24b10:	e1530001 	cmp	r3, r1
   24b14:	9a000008 	bls	24b3c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   24b18:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   24b1c:	e1530002 	cmp	r3, r2
   24b20:	9a000005 	bls	24b3c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   24b24:	e590c020 	ldr	ip, [r0, #32]
   24b28:	e5903018 	ldr	r3, [r0, #24]
   24b2c:	e022129c 	mla	r2, ip, r2, r1
   24b30:	e1a02082 	lsl	r2, r2, #1
   24b34:	e19300b2 	ldrh	r0, [r3, r2]
   24b38:	e12fff1e 	bx	lr
   24b3c:	e3a00000 	mov	r0, #0
   24b40:	e12fff1e 	bx	lr

00024b44 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   24b44:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   24b48:	e1a05000 	mov	r5, r0
   24b4c:	e1a04001 	mov	r4, r1
   24b50:	e24dd00c 	sub	sp, sp, #12
   24b54:	e1a06002 	mov	r6, r2
   24b58:	e2800014 	add	r0, r0, #20
   24b5c:	e2044003 	and	r4, r4, #3
   24b60:	e5957024 	ldr	r7, [r5, #36]	; 0x24
   24b64:	eb000035 	bl	24c40 <CCharGenerator::GetCharWidth() const>
   24b68:	e2061003 	and	r1, r6, #3
   24b6c:	e30f3dc8 	movw	r3, #64968	; 0xfdc8
   24b70:	e3403002 	movt	r3, #2
   24b74:	e0831001 	add	r1, r3, r1
   24b78:	e0240094 	mla	r4, r4, r0, r0
   24b7c:	e3a02b3e 	mov	r2, #63488	; 0xf800
   24b80:	e3a03000 	mov	r3, #0
   24b84:	e58d2000 	str	r2, [sp]
   24b88:	e1a00005 	mov	r0, r5
   24b8c:	e1d111dc 	ldrsb	r1, [r1, #28]
   24b90:	e0472004 	sub	r2, r7, r4
   24b94:	ebfffd52 	bl	240e4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   24b98:	e28dd00c 	add	sp, sp, #12
   24b9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00024ba0 <assertion_failed>:
   24ba0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   24ba4:	e1a05000 	mov	r5, r0
   24ba8:	e1a06001 	mov	r6, r1
   24bac:	e24dd01c 	sub	sp, sp, #28
   24bb0:	e1a07002 	mov	r7, r2
   24bb4:	e1a0400d 	mov	r4, sp
   24bb8:	eb0009eb 	bl	2736c <CInterruptSystem::DisableFIQ()>
   24bbc:	f1080040 	cpsie	f
   24bc0:	e28d0008 	add	r0, sp, #8
   24bc4:	eb0004fa 	bl	25fb4 <CString::CString()>
   24bc8:	e1a03007 	mov	r3, r7
   24bcc:	e1a02006 	mov	r2, r6
   24bd0:	e28d0008 	add	r0, sp, #8
   24bd4:	e30f1dec 	movw	r1, #65004	; 0xfdec
   24bd8:	e3401002 	movt	r1, #2
   24bdc:	eb000806 	bl	26bfc <CString::Format(char const*, ...)>
   24be0:	e28d0008 	add	r0, sp, #8
   24be4:	eb000508 	bl	2600c <CString::operator char const*() const>
   24be8:	e1a01000 	mov	r1, r0
   24bec:	e1a00004 	mov	r0, r4
   24bf0:	eb00007b 	bl	24de4 <debug_stacktrace(unsigned int const*, char const*)>
   24bf4:	eb00016b 	bl	251a8 <CLogger::Get()>
   24bf8:	e1a04000 	mov	r4, r0
   24bfc:	e28d0008 	add	r0, sp, #8
   24c00:	eb000501 	bl	2600c <CString::operator char const*() const>
   24c04:	e3a02000 	mov	r2, #0
   24c08:	e1a01000 	mov	r1, r0
   24c0c:	e58d5000 	str	r5, [sp]
   24c10:	e1a00004 	mov	r0, r4
   24c14:	e30f3df4 	movw	r3, #65012	; 0xfdf4
   24c18:	e3403002 	movt	r3, #2
   24c1c:	eb00023e 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24c20:	e28d0008 	add	r0, sp, #8
   24c24:	eb0004af 	bl	25ee8 <CString::~CString()>
   24c28:	e28dd01c 	add	sp, sp, #28
   24c2c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00024c30 <CCharGenerator::CCharGenerator()>:
   24c30:	e3a03008 	mov	r3, #8
   24c34:	e5803000 	str	r3, [r0]
   24c38:	e12fff1e 	bx	lr

00024c3c <CCharGenerator::~CCharGenerator()>:
   24c3c:	e12fff1e 	bx	lr

00024c40 <CCharGenerator::GetCharWidth() const>:
   24c40:	e5900000 	ldr	r0, [r0]
   24c44:	e12fff1e 	bx	lr

00024c48 <CCharGenerator::GetCharHeight() const>:
   24c48:	e3a00013 	mov	r0, #19
   24c4c:	e12fff1e 	bx	lr

00024c50 <CCharGenerator::GetUnderline() const>:
   24c50:	e3a00010 	mov	r0, #16
   24c54:	e12fff1e 	bx	lr

00024c58 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   24c58:	e6ef1071 	uxtb	r1, r1
   24c5c:	e92d4070 	push	{r4, r5, r6, lr}
   24c60:	e2414021 	sub	r4, r1, #33	; 0x21
   24c64:	e35400de 	cmp	r4, #222	; 0xde
   24c68:	8a00000f 	bhi	24cac <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
   24c6c:	e1a06003 	mov	r6, r3
   24c70:	e5903000 	ldr	r3, [r0]
   24c74:	e1a05002 	mov	r5, r2
   24c78:	e1530002 	cmp	r3, r2
   24c7c:	9a00000c 	bls	24cb4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
   24c80:	e356000f 	cmp	r6, #15
   24c84:	8a000008 	bhi	24cac <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
   24c88:	e30f1e0c 	movw	r1, #65036	; 0xfe0c
   24c8c:	e3401002 	movt	r1, #2
   24c90:	e3a02080 	mov	r2, #128	; 0x80
   24c94:	e0811204 	add	r1, r1, r4, lsl #4
   24c98:	e7d13006 	ldrb	r3, [r1, r6]
   24c9c:	e0133552 	ands	r3, r3, r2, asr r5
   24ca0:	13a00001 	movne	r0, #1
   24ca4:	03a00000 	moveq	r0, #0
   24ca8:	e8bd8070 	pop	{r4, r5, r6, pc}
   24cac:	e3a00000 	mov	r0, #0
   24cb0:	e8bd8070 	pop	{r4, r5, r6, pc}
   24cb4:	e3001bfc 	movw	r1, #3068	; 0xbfc
   24cb8:	e3401003 	movt	r1, #3
   24cbc:	e3000c10 	movw	r0, #3088	; 0xc10
   24cc0:	e3400003 	movt	r0, #3
   24cc4:	e3a0204e 	mov	r2, #78	; 0x4e
   24cc8:	ebffffb4 	bl	24ba0 <assertion_failed>
   24ccc:	e356000f 	cmp	r6, #15
   24cd0:	9affffec 	bls	24c88 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   24cd4:	eafffff4 	b	24cac <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

00024cd8 <debug_hexdump(void const*, unsigned int, char const*)>:
   24cd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24cdc:	e3520000 	cmp	r2, #0
   24ce0:	e1a05001 	mov	r5, r1
   24ce4:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   24ce8:	e1a04000 	mov	r4, r0
   24cec:	e3007c28 	movw	r7, #3112	; 0xc28
   24cf0:	e3407003 	movt	r7, #3
   24cf4:	11a07002 	movne	r7, r2
   24cf8:	eb00012a 	bl	251a8 <CLogger::Get()>
   24cfc:	e58d4004 	str	r4, [sp, #4]
   24d00:	e1a01007 	mov	r1, r7
   24d04:	e58d5000 	str	r5, [sp]
   24d08:	e3003c30 	movw	r3, #3120	; 0xc30
   24d0c:	e3403003 	movt	r3, #3
   24d10:	e3a02004 	mov	r2, #4
   24d14:	eb000200 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24d18:	e3550000 	cmp	r5, #0
   24d1c:	0a00002a 	beq	24dcc <debug_hexdump(void const*, unsigned int, char const*)+0xf4>
   24d20:	e3008c54 	movw	r8, #3156	; 0xc54
   24d24:	e3408003 	movt	r8, #3
   24d28:	eb00011e 	bl	251a8 <CLogger::Get()>
   24d2c:	e5d4e00f 	ldrb	lr, [r4, #15]
   24d30:	e5d4b00e 	ldrb	fp, [r4, #14]
   24d34:	e6ffc074 	uxth	ip, r4
   24d38:	e5d4a00d 	ldrb	sl, [r4, #13]
   24d3c:	e1a03008 	mov	r3, r8
   24d40:	e5d4900c 	ldrb	r9, [r4, #12]
   24d44:	e3a02004 	mov	r2, #4
   24d48:	e5d4600b 	ldrb	r6, [r4, #11]
   24d4c:	e1a01007 	mov	r1, r7
   24d50:	e58de040 	str	lr, [sp, #64]	; 0x40
   24d54:	e2844010 	add	r4, r4, #16
   24d58:	e554e006 	ldrb	lr, [r4, #-6]
   24d5c:	e58db03c 	str	fp, [sp, #60]	; 0x3c
   24d60:	e554b007 	ldrb	fp, [r4, #-7]
   24d64:	e58da038 	str	sl, [sp, #56]	; 0x38
   24d68:	e554a008 	ldrb	sl, [r4, #-8]
   24d6c:	e58d9034 	str	r9, [sp, #52]	; 0x34
   24d70:	e5549009 	ldrb	r9, [r4, #-9]
   24d74:	e58d6030 	str	r6, [sp, #48]	; 0x30
   24d78:	e554600a 	ldrb	r6, [r4, #-10]
   24d7c:	e58de02c 	str	lr, [sp, #44]	; 0x2c
   24d80:	e554e00b 	ldrb	lr, [r4, #-11]
   24d84:	e58db028 	str	fp, [sp, #40]	; 0x28
   24d88:	e554b00c 	ldrb	fp, [r4, #-12]
   24d8c:	e58da024 	str	sl, [sp, #36]	; 0x24
   24d90:	e554a00d 	ldrb	sl, [r4, #-13]
   24d94:	e58d9020 	str	r9, [sp, #32]
   24d98:	e554900e 	ldrb	r9, [r4, #-14]
   24d9c:	e58d601c 	str	r6, [sp, #28]
   24da0:	e554600f 	ldrb	r6, [r4, #-15]
   24da4:	e58de018 	str	lr, [sp, #24]
   24da8:	e554e010 	ldrb	lr, [r4, #-16]
   24dac:	e58db014 	str	fp, [sp, #20]
   24db0:	e58da010 	str	sl, [sp, #16]
   24db4:	e58d900c 	str	r9, [sp, #12]
   24db8:	e58d6008 	str	r6, [sp, #8]
   24dbc:	e88d5000 	stm	sp, {ip, lr}
   24dc0:	eb0001d5 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24dc4:	e355000f 	cmp	r5, #15
   24dc8:	8a000001 	bhi	24dd4 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
   24dcc:	e28dd04c 	add	sp, sp, #76	; 0x4c
   24dd0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24dd4:	e2555010 	subs	r5, r5, #16
   24dd8:	1affffd2 	bne	24d28 <debug_hexdump(void const*, unsigned int, char const*)+0x50>
   24ddc:	e28dd04c 	add	sp, sp, #76	; 0x4c
   24de0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024de4 <debug_stacktrace(unsigned int const*, char const*)>:
   24de4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24de8:	e3510000 	cmp	r1, #0
   24dec:	e3007c28 	movw	r7, #3112	; 0xc28
   24df0:	e3407003 	movt	r7, #3
   24df4:	11a07001 	movne	r7, r1
   24df8:	e30a61ec 	movw	r6, #41452	; 0xa1ec
   24dfc:	e3406002 	movt	r6, #2
   24e00:	e3008cac 	movw	r8, #3244	; 0xcac
   24e04:	e3408003 	movt	r8, #3
   24e08:	e24dd008 	sub	sp, sp, #8
   24e0c:	e1a05000 	mov	r5, r0
   24e10:	e3a04000 	mov	r4, #0
   24e14:	ea000003 	b	24e28 <debug_stacktrace(unsigned int const*, char const*)+0x44>
   24e18:	e2844001 	add	r4, r4, #1
   24e1c:	e2855004 	add	r5, r5, #4
   24e20:	e3540040 	cmp	r4, #64	; 0x40
   24e24:	0a000010 	beq	24e6c <debug_stacktrace(unsigned int const*, char const*)+0x88>
   24e28:	e5953000 	ldr	r3, [r5]
   24e2c:	e3530902 	cmp	r3, #32768	; 0x8000
   24e30:	3afffff8 	bcc	24e18 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   24e34:	e1530006 	cmp	r3, r6
   24e38:	2afffff6 	bcs	24e18 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   24e3c:	eb0000d9 	bl	251a8 <CLogger::Get()>
   24e40:	e5952000 	ldr	r2, [r5]
   24e44:	e1a03008 	mov	r3, r8
   24e48:	e58d4000 	str	r4, [sp]
   24e4c:	e58d2004 	str	r2, [sp, #4]
   24e50:	e1a01007 	mov	r1, r7
   24e54:	e3a02004 	mov	r2, #4
   24e58:	e2844001 	add	r4, r4, #1
   24e5c:	eb0001ae 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24e60:	e3540040 	cmp	r4, #64	; 0x40
   24e64:	e2855004 	add	r5, r5, #4
   24e68:	1affffee 	bne	24e28 <debug_stacktrace(unsigned int const*, char const*)+0x44>
   24e6c:	e28dd008 	add	sp, sp, #8
   24e70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00024e74 <CDeviceNameService::CDeviceNameService()>:
   24e74:	e92d4070 	push	{r4, r5, r6, lr}
   24e78:	e3025890 	movw	r5, #10384	; 0x2890
   24e7c:	e3405143 	movt	r5, #323	; 0x143
   24e80:	e3a03000 	mov	r3, #0
   24e84:	e1a04000 	mov	r4, r0
   24e88:	e5803004 	str	r3, [r0, #4]
   24e8c:	e5952000 	ldr	r2, [r5]
   24e90:	e5803000 	str	r3, [r0]
   24e94:	e1520003 	cmp	r2, r3
   24e98:	0a000005 	beq	24eb4 <CDeviceNameService::CDeviceNameService()+0x40>
   24e9c:	e3001cc0 	movw	r1, #3264	; 0xcc0
   24ea0:	e3401003 	movt	r1, #3
   24ea4:	e3000cd8 	movw	r0, #3288	; 0xcd8
   24ea8:	e3400003 	movt	r0, #3
   24eac:	e3a0201e 	mov	r2, #30
   24eb0:	ebffff3a 	bl	24ba0 <assertion_failed>
   24eb4:	e5854000 	str	r4, [r5]
   24eb8:	e1a00004 	mov	r0, r4
   24ebc:	e8bd8070 	pop	{r4, r5, r6, pc}

00024ec0 <CDeviceNameService::~CDeviceNameService()>:
   24ec0:	e5903000 	ldr	r3, [r0]
   24ec4:	e92d4070 	push	{r4, r5, r6, lr}
   24ec8:	e1a05000 	mov	r5, r0
   24ecc:	e3530000 	cmp	r3, #0
   24ed0:	0a00000e 	beq	24f10 <CDeviceNameService::~CDeviceNameService()+0x50>
   24ed4:	e3a06000 	mov	r6, #0
   24ed8:	e5930004 	ldr	r0, [r3, #4]
   24edc:	e5934000 	ldr	r4, [r3]
   24ee0:	e3500000 	cmp	r0, #0
   24ee4:	0a000000 	beq	24eec <CDeviceNameService::~CDeviceNameService()+0x2c>
   24ee8:	ebfff42d 	bl	21fa4 <operator delete[](void*)>
   24eec:	e5953000 	ldr	r3, [r5]
   24ef0:	e3a01010 	mov	r1, #16
   24ef4:	e1a00003 	mov	r0, r3
   24ef8:	e5836004 	str	r6, [r3, #4]
   24efc:	e5836008 	str	r6, [r3, #8]
   24f00:	ebfff428 	bl	21fa8 <operator delete(void*, unsigned int)>
   24f04:	e2543000 	subs	r3, r4, #0
   24f08:	e5854000 	str	r4, [r5]
   24f0c:	1afffff1 	bne	24ed8 <CDeviceNameService::~CDeviceNameService()+0x18>
   24f10:	e3023890 	movw	r3, #10384	; 0x2890
   24f14:	e3403143 	movt	r3, #323	; 0x143
   24f18:	e3a02000 	mov	r2, #0
   24f1c:	e1a00005 	mov	r0, r5
   24f20:	e5832000 	str	r2, [r3]
   24f24:	e8bd8070 	pop	{r4, r5, r6, pc}

00024f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
   24f28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24f2c:	e1a05000 	mov	r5, r0
   24f30:	e5900004 	ldr	r0, [r0, #4]
   24f34:	e1a06001 	mov	r6, r1
   24f38:	e1a07002 	mov	r7, r2
   24f3c:	e3500000 	cmp	r0, #0
   24f40:	e1a08003 	mov	r8, r3
   24f44:	1a000017 	bne	24fa8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x80>
   24f48:	e3a00010 	mov	r0, #16
   24f4c:	ebfff411 	bl	21f98 <operator new(unsigned int)>
   24f50:	e3560000 	cmp	r6, #0
   24f54:	e1a04000 	mov	r4, r0
   24f58:	0a00001b 	beq	24fcc <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xa4>
   24f5c:	e1a00006 	mov	r0, r6
   24f60:	ebfff7a0 	bl	22de8 <strlen>
   24f64:	e2800001 	add	r0, r0, #1
   24f68:	ebfff40b 	bl	21f9c <operator new[](unsigned int)>
   24f6c:	e1a01006 	mov	r1, r6
   24f70:	e5840004 	str	r0, [r4, #4]
   24f74:	ebfff7c0 	bl	22e7c <strcpy>
   24f78:	e3570000 	cmp	r7, #0
   24f7c:	0a00000b 	beq	24fb0 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x88>
   24f80:	e5952004 	ldr	r2, [r5, #4]
   24f84:	e5953000 	ldr	r3, [r5]
   24f88:	e3520000 	cmp	r2, #0
   24f8c:	e5847008 	str	r7, [r4, #8]
   24f90:	e584800c 	str	r8, [r4, #12]
   24f94:	e5843000 	str	r3, [r4]
   24f98:	e5854000 	str	r4, [r5]
   24f9c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24fa0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24fa4:	eafff435 	b	22080 <LeaveCritical>
   24fa8:	ebfff406 	bl	21fc8 <EnterCritical>
   24fac:	eaffffe5 	b	24f48 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
   24fb0:	e3001cc0 	movw	r1, #3264	; 0xcc0
   24fb4:	e3401003 	movt	r1, #3
   24fb8:	e3000ce4 	movw	r0, #3300	; 0xce4
   24fbc:	e3400003 	movt	r0, #3
   24fc0:	e3a0203f 	mov	r2, #63	; 0x3f
   24fc4:	ebfffef5 	bl	24ba0 <assertion_failed>
   24fc8:	eaffffec 	b	24f80 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
   24fcc:	e3001cc0 	movw	r1, #3264	; 0xcc0
   24fd0:	e3401003 	movt	r1, #3
   24fd4:	e30b00f8 	movw	r0, #45304	; 0xb0f8
   24fd8:	e3400002 	movt	r0, #2
   24fdc:	e3a0203a 	mov	r2, #58	; 0x3a
   24fe0:	ebfffeee 	bl	24ba0 <assertion_failed>
   24fe4:	eaffffdc 	b	24f5c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

00024fe8 <CDeviceNameService::GetDevice(char const*, int)>:
   24fe8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24fec:	e2515000 	subs	r5, r1, #0
   24ff0:	e1a07000 	mov	r7, r0
   24ff4:	e1a06002 	mov	r6, r2
   24ff8:	0a000037 	beq	250dc <CDeviceNameService::GetDevice(char const*, int)+0xf4>
   24ffc:	e5970004 	ldr	r0, [r7, #4]
   25000:	e3500000 	cmp	r0, #0
   25004:	1a00001a 	bne	25074 <CDeviceNameService::GetDevice(char const*, int)+0x8c>
   25008:	e5974000 	ldr	r4, [r7]
   2500c:	e3540000 	cmp	r4, #0
   25010:	0a00001f 	beq	25094 <CDeviceNameService::GetDevice(char const*, int)+0xac>
   25014:	e3009cc0 	movw	r9, #3264	; 0xcc0
   25018:	e3409003 	movt	r9, #3
   2501c:	e3008cf4 	movw	r8, #3316	; 0xcf4
   25020:	e3408003 	movt	r8, #3
   25024:	ea000009 	b	25050 <CDeviceNameService::GetDevice(char const*, int)+0x68>
   25028:	e1a00005 	mov	r0, r5
   2502c:	ebfff777 	bl	22e10 <strcmp>
   25030:	e3500000 	cmp	r0, #0
   25034:	1a000002 	bne	25044 <CDeviceNameService::GetDevice(char const*, int)+0x5c>
   25038:	e594300c 	ldr	r3, [r4, #12]
   2503c:	e1530006 	cmp	r3, r6
   25040:	0a000016 	beq	250a0 <CDeviceNameService::GetDevice(char const*, int)+0xb8>
   25044:	e5944000 	ldr	r4, [r4]
   25048:	e3540000 	cmp	r4, #0
   2504c:	0a00000c 	beq	25084 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
   25050:	e5941004 	ldr	r1, [r4, #4]
   25054:	e3510000 	cmp	r1, #0
   25058:	1afffff2 	bne	25028 <CDeviceNameService::GetDevice(char const*, int)+0x40>
   2505c:	e1a01009 	mov	r1, r9
   25060:	e3a02053 	mov	r2, #83	; 0x53
   25064:	e1a00008 	mov	r0, r8
   25068:	ebfffecc 	bl	24ba0 <assertion_failed>
   2506c:	e5941004 	ldr	r1, [r4, #4]
   25070:	eaffffec 	b	25028 <CDeviceNameService::GetDevice(char const*, int)+0x40>
   25074:	ebfff3d3 	bl	21fc8 <EnterCritical>
   25078:	e5974000 	ldr	r4, [r7]
   2507c:	e3540000 	cmp	r4, #0
   25080:	1affffe3 	bne	25014 <CDeviceNameService::GetDevice(char const*, int)+0x2c>
   25084:	e5973004 	ldr	r3, [r7, #4]
   25088:	e3530000 	cmp	r3, #0
   2508c:	0a000000 	beq	25094 <CDeviceNameService::GetDevice(char const*, int)+0xac>
   25090:	ebfff3fa 	bl	22080 <LeaveCritical>
   25094:	e3a04000 	mov	r4, #0
   25098:	e1a00004 	mov	r0, r4
   2509c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   250a0:	e5973004 	ldr	r3, [r7, #4]
   250a4:	e5944008 	ldr	r4, [r4, #8]
   250a8:	e3530000 	cmp	r3, #0
   250ac:	1a000008 	bne	250d4 <CDeviceNameService::GetDevice(char const*, int)+0xec>
   250b0:	e3540000 	cmp	r4, #0
   250b4:	1afffff7 	bne	25098 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
   250b8:	e3001cc0 	movw	r1, #3264	; 0xcc0
   250bc:	e3401003 	movt	r1, #3
   250c0:	e3000d08 	movw	r0, #3336	; 0xd08
   250c4:	e3400003 	movt	r0, #3
   250c8:	e3a0205b 	mov	r2, #91	; 0x5b
   250cc:	ebfffeb3 	bl	24ba0 <assertion_failed>
   250d0:	eafffff0 	b	25098 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
   250d4:	ebfff3e9 	bl	22080 <LeaveCritical>
   250d8:	eafffff4 	b	250b0 <CDeviceNameService::GetDevice(char const*, int)+0xc8>
   250dc:	e3001cc0 	movw	r1, #3264	; 0xcc0
   250e0:	e3401003 	movt	r1, #3
   250e4:	e30b00f8 	movw	r0, #45304	; 0xb0f8
   250e8:	e3400002 	movt	r0, #2
   250ec:	e3a0204c 	mov	r2, #76	; 0x4c
   250f0:	ebfffeaa 	bl	24ba0 <assertion_failed>
   250f4:	eaffffc0 	b	24ffc <CDeviceNameService::GetDevice(char const*, int)+0x14>

000250f8 <CDeviceNameService::Get()>:
   250f8:	e92d4010 	push	{r4, lr}
   250fc:	e3024890 	movw	r4, #10384	; 0x2890
   25100:	e3404143 	movt	r4, #323	; 0x143
   25104:	e5940000 	ldr	r0, [r4]
   25108:	e3500000 	cmp	r0, #0
   2510c:	18bd8010 	popne	{r4, pc}
   25110:	e3a02069 	mov	r2, #105	; 0x69
   25114:	e3001cc0 	movw	r1, #3264	; 0xcc0
   25118:	e3401003 	movt	r1, #3
   2511c:	e3000d18 	movw	r0, #3352	; 0xd18
   25120:	e3400003 	movt	r0, #3
   25124:	ebfffe9d 	bl	24ba0 <assertion_failed>
   25128:	e5940000 	ldr	r0, [r4]
   2512c:	e8bd8010 	pop	{r4, pc}

00025130 <CLogger::CLogger(unsigned int, CTimer*)>:
   25130:	e92d4010 	push	{r4, lr}
   25134:	e1a04000 	mov	r4, r0
   25138:	e3a03000 	mov	r3, #0
   2513c:	e3a0c001 	mov	ip, #1
   25140:	e3a00901 	mov	r0, #16384	; 0x4000
   25144:	e5843008 	str	r3, [r4, #8]
   25148:	e584300c 	str	r3, [r4, #12]
   2514c:	e5843010 	str	r3, [r4, #16]
   25150:	e5843014 	str	r3, [r4, #20]
   25154:	e8840006 	stm	r4, {r1, r2}
   25158:	e584c018 	str	ip, [r4, #24]
   2515c:	ebfff38e 	bl	21f9c <operator new[](unsigned int)>
   25160:	e3023894 	movw	r3, #10388	; 0x2894
   25164:	e3403143 	movt	r3, #323	; 0x143
   25168:	e584000c 	str	r0, [r4, #12]
   2516c:	e1a00004 	mov	r0, r4
   25170:	e5834000 	str	r4, [r3]
   25174:	e8bd8010 	pop	{r4, pc}

00025178 <CLogger::~CLogger()>:
   25178:	e92d4010 	push	{r4, lr}
   2517c:	e1a04000 	mov	r4, r0
   25180:	e590000c 	ldr	r0, [r0, #12]
   25184:	e3a02000 	mov	r2, #0
   25188:	e3023894 	movw	r3, #10388	; 0x2894
   2518c:	e3403143 	movt	r3, #323	; 0x143
   25190:	e1500002 	cmp	r0, r2
   25194:	e5832000 	str	r2, [r3]
   25198:	0a000000 	beq	251a0 <CLogger::~CLogger()+0x28>
   2519c:	ebfff380 	bl	21fa4 <operator delete[](void*)>
   251a0:	e1a00004 	mov	r0, r4
   251a4:	e8bd8010 	pop	{r4, pc}

000251a8 <CLogger::Get()>:
   251a8:	e3023894 	movw	r3, #10388	; 0x2894
   251ac:	e3403143 	movt	r3, #323	; 0x143
   251b0:	e5930000 	ldr	r0, [r3]
   251b4:	e12fff1e 	bx	lr

000251b8 <CLogger::Write(char const*)>:
   251b8:	e92d4070 	push	{r4, r5, r6, lr}
   251bc:	e1a04000 	mov	r4, r0
   251c0:	e1a00001 	mov	r0, r1
   251c4:	e1a05001 	mov	r5, r1
   251c8:	ebfff706 	bl	22de8 <strlen>
   251cc:	e5943008 	ldr	r3, [r4, #8]
   251d0:	e1a02000 	mov	r2, r0
   251d4:	e1a06000 	mov	r6, r0
   251d8:	e1a01005 	mov	r1, r5
   251dc:	e1a00003 	mov	r0, r3
   251e0:	e5933000 	ldr	r3, [r3]
   251e4:	e593300c 	ldr	r3, [r3, #12]
   251e8:	e12fff33 	blx	r3
   251ec:	e5940018 	ldr	r0, [r4, #24]
   251f0:	e3500000 	cmp	r0, #0
   251f4:	1a000017 	bne	25258 <CLogger::Write(char const*)+0xa0>
   251f8:	e0850006 	add	r0, r5, r6
   251fc:	e1550000 	cmp	r5, r0
   25200:	0a00000f 	beq	25244 <CLogger::Write(char const*)+0x8c>
   25204:	e0d530d1 	ldrsb	r3, [r5], #1
   25208:	e353000d 	cmp	r3, #13
   2520c:	0afffffa 	beq	251fc <CLogger::Write(char const*)+0x44>
   25210:	e5941010 	ldr	r1, [r4, #16]
   25214:	e594c00c 	ldr	ip, [r4, #12]
   25218:	e7cc3001 	strb	r3, [ip, r1]
   2521c:	e5943010 	ldr	r3, [r4, #16]
   25220:	e5941014 	ldr	r1, [r4, #20]
   25224:	e2833001 	add	r3, r3, #1
   25228:	e7ed3053 	ubfx	r3, r3, #0, #14
   2522c:	e1530001 	cmp	r3, r1
   25230:	e5843010 	str	r3, [r4, #16]
   25234:	1afffff0 	bne	251fc <CLogger::Write(char const*)+0x44>
   25238:	e2433001 	sub	r3, r3, #1
   2523c:	e7ed3053 	ubfx	r3, r3, #0, #14
   25240:	e5843010 	str	r3, [r4, #16]
   25244:	e5943018 	ldr	r3, [r4, #24]
   25248:	e3530000 	cmp	r3, #0
   2524c:	08bd8070 	popeq	{r4, r5, r6, pc}
   25250:	e8bd4070 	pop	{r4, r5, r6, lr}
   25254:	eafff389 	b	22080 <LeaveCritical>
   25258:	ebfff35a 	bl	21fc8 <EnterCritical>
   2525c:	eaffffe5 	b	251f8 <CLogger::Write(char const*)+0x40>

00025260 <CLogger::Read(void*, unsigned int)>:
   25260:	e92d4070 	push	{r4, r5, r6, lr}
   25264:	e1a04000 	mov	r4, r0
   25268:	e5900018 	ldr	r0, [r0, #24]
   2526c:	e1a05001 	mov	r5, r1
   25270:	e1a06002 	mov	r6, r2
   25274:	e3500000 	cmp	r0, #0
   25278:	1a00001b 	bne	252ec <CLogger::Read(void*, unsigned int)+0x8c>
   2527c:	e5942010 	ldr	r2, [r4, #16]
   25280:	e5943014 	ldr	r3, [r4, #20]
   25284:	e1520003 	cmp	r2, r3
   25288:	0a000020 	beq	25310 <CLogger::Read(void*, unsigned int)+0xb0>
   2528c:	e1a01005 	mov	r1, r5
   25290:	e3a05000 	mov	r5, #0
   25294:	ea00000a 	b	252c4 <CLogger::Read(void*, unsigned int)+0x64>
   25298:	e594000c 	ldr	r0, [r4, #12]
   2529c:	e2855001 	add	r5, r5, #1
   252a0:	e19030d3 	ldrsb	r3, [r0, r3]
   252a4:	e4c13001 	strb	r3, [r1], #1
   252a8:	e5943014 	ldr	r3, [r4, #20]
   252ac:	e5940010 	ldr	r0, [r4, #16]
   252b0:	e2833001 	add	r3, r3, #1
   252b4:	e7ed3053 	ubfx	r3, r3, #0, #14
   252b8:	e1530000 	cmp	r3, r0
   252bc:	e5843014 	str	r3, [r4, #20]
   252c0:	0a000001 	beq	252cc <CLogger::Read(void*, unsigned int)+0x6c>
   252c4:	e1550006 	cmp	r5, r6
   252c8:	1afffff2 	bne	25298 <CLogger::Read(void*, unsigned int)+0x38>
   252cc:	e5943018 	ldr	r3, [r4, #24]
   252d0:	e3530000 	cmp	r3, #0
   252d4:	1a000001 	bne	252e0 <CLogger::Read(void*, unsigned int)+0x80>
   252d8:	e1a00005 	mov	r0, r5
   252dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   252e0:	ebfff366 	bl	22080 <LeaveCritical>
   252e4:	e1a00005 	mov	r0, r5
   252e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   252ec:	ebfff335 	bl	21fc8 <EnterCritical>
   252f0:	e5942010 	ldr	r2, [r4, #16]
   252f4:	e5943014 	ldr	r3, [r4, #20]
   252f8:	e1520003 	cmp	r2, r3
   252fc:	1affffe2 	bne	2528c <CLogger::Read(void*, unsigned int)+0x2c>
   25300:	e5943018 	ldr	r3, [r4, #24]
   25304:	e3530000 	cmp	r3, #0
   25308:	0a000000 	beq	25310 <CLogger::Read(void*, unsigned int)+0xb0>
   2530c:	ebfff35b 	bl	22080 <LeaveCritical>
   25310:	e3e05000 	mvn	r5, #0
   25314:	e1a00005 	mov	r0, r5
   25318:	e8bd8070 	pop	{r4, r5, r6, pc}

0002531c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   2531c:	e590c000 	ldr	ip, [r0]
   25320:	e152000c 	cmp	r2, ip
   25324:	812fff1e 	bxhi	lr
   25328:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2532c:	e1a05002 	mov	r5, r2
   25330:	e1a04000 	mov	r4, r0
   25334:	e24dd020 	sub	sp, sp, #32
   25338:	e1a07003 	mov	r7, r3
   2533c:	e1a0000d 	mov	r0, sp
   25340:	e1a06001 	mov	r6, r1
   25344:	eb00031a 	bl	25fb4 <CString::CString()>
   25348:	e3550000 	cmp	r5, #0
   2534c:	0a000049 	beq	25478 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
   25350:	e5940004 	ldr	r0, [r4, #4]
   25354:	e3500000 	cmp	r0, #0
   25358:	0a000032 	beq	25428 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
   2535c:	ebfff431 	bl	22428 <CTimer::GetTimeString()>
   25360:	e2508000 	subs	r8, r0, #0
   25364:	0a00000b 	beq	25398 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
   25368:	eb000327 	bl	2600c <CString::operator char const*() const>
   2536c:	e1a01000 	mov	r1, r0
   25370:	e1a0000d 	mov	r0, sp
   25374:	eb00033f 	bl	26078 <CString::Append(char const*)>
   25378:	e1a0000d 	mov	r0, sp
   2537c:	e30a1294 	movw	r1, #41620	; 0xa294
   25380:	e3401002 	movt	r1, #2
   25384:	eb00033b 	bl	26078 <CString::Append(char const*)>
   25388:	e5983000 	ldr	r3, [r8]
   2538c:	e1a00008 	mov	r0, r8
   25390:	e5933004 	ldr	r3, [r3, #4]
   25394:	e12fff33 	blx	r3
   25398:	e1a01006 	mov	r1, r6
   2539c:	e1a0000d 	mov	r0, sp
   253a0:	eb000334 	bl	26078 <CString::Append(char const*)>
   253a4:	e28d6010 	add	r6, sp, #16
   253a8:	e1a0000d 	mov	r0, sp
   253ac:	e3001d2c 	movw	r1, #3372	; 0xd2c
   253b0:	e3401003 	movt	r1, #3
   253b4:	eb00032f 	bl	26078 <CString::Append(char const*)>
   253b8:	e1a00006 	mov	r0, r6
   253bc:	eb0002fc 	bl	25fb4 <CString::CString()>
   253c0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   253c4:	e1a01007 	mov	r1, r7
   253c8:	e1a00006 	mov	r0, r6
   253cc:	eb00042f 	bl	26490 <CString::FormatV(char const*, std::__va_list)>
   253d0:	e1a00006 	mov	r0, r6
   253d4:	eb00030c 	bl	2600c <CString::operator char const*() const>
   253d8:	e1a01000 	mov	r1, r0
   253dc:	e1a0000d 	mov	r0, sp
   253e0:	eb000324 	bl	26078 <CString::Append(char const*)>
   253e4:	e3550000 	cmp	r5, #0
   253e8:	0a00003c 	beq	254e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
   253ec:	e1a0000d 	mov	r0, sp
   253f0:	e30a1838 	movw	r1, #43064	; 0xa838
   253f4:	e3401002 	movt	r1, #2
   253f8:	eb00031e 	bl	26078 <CString::Append(char const*)>
   253fc:	e1a0000d 	mov	r0, sp
   25400:	eb000301 	bl	2600c <CString::operator char const*() const>
   25404:	e1a01000 	mov	r1, r0
   25408:	e1a00004 	mov	r0, r4
   2540c:	ebffff69 	bl	251b8 <CLogger::Write(char const*)>
   25410:	e1a00006 	mov	r0, r6
   25414:	eb0002b3 	bl	25ee8 <CString::~CString()>
   25418:	e1a0000d 	mov	r0, sp
   2541c:	eb0002b1 	bl	25ee8 <CString::~CString()>
   25420:	e28dd020 	add	sp, sp, #32
   25424:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25428:	e1a01006 	mov	r1, r6
   2542c:	e1a0000d 	mov	r0, sp
   25430:	eb000310 	bl	26078 <CString::Append(char const*)>
   25434:	e28d6010 	add	r6, sp, #16
   25438:	e1a0000d 	mov	r0, sp
   2543c:	e3001d2c 	movw	r1, #3372	; 0xd2c
   25440:	e3401003 	movt	r1, #3
   25444:	eb00030b 	bl	26078 <CString::Append(char const*)>
   25448:	e1a00006 	mov	r0, r6
   2544c:	eb0002d8 	bl	25fb4 <CString::CString()>
   25450:	e1a01007 	mov	r1, r7
   25454:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   25458:	e1a00006 	mov	r0, r6
   2545c:	eb00040b 	bl	26490 <CString::FormatV(char const*, std::__va_list)>
   25460:	e1a00006 	mov	r0, r6
   25464:	eb0002e8 	bl	2600c <CString::operator char const*() const>
   25468:	e1a01000 	mov	r1, r0
   2546c:	e1a0000d 	mov	r0, sp
   25470:	eb000300 	bl	26078 <CString::Append(char const*)>
   25474:	eaffffdc 	b	253ec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
   25478:	e3001d24 	movw	r1, #3364	; 0xd24
   2547c:	e3401003 	movt	r1, #3
   25480:	e1a0000d 	mov	r0, sp
   25484:	eb0002e6 	bl	26024 <CString::operator=(char const*)>
   25488:	e5940004 	ldr	r0, [r4, #4]
   2548c:	e3500000 	cmp	r0, #0
   25490:	1affffb1 	bne	2535c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
   25494:	e1a01006 	mov	r1, r6
   25498:	e1a0000d 	mov	r0, sp
   2549c:	eb0002f5 	bl	26078 <CString::Append(char const*)>
   254a0:	e28d6010 	add	r6, sp, #16
   254a4:	e1a0000d 	mov	r0, sp
   254a8:	e3001d2c 	movw	r1, #3372	; 0xd2c
   254ac:	e3401003 	movt	r1, #3
   254b0:	eb0002f0 	bl	26078 <CString::Append(char const*)>
   254b4:	e1a00006 	mov	r0, r6
   254b8:	eb0002bd 	bl	25fb4 <CString::CString()>
   254bc:	e1a01007 	mov	r1, r7
   254c0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   254c4:	e1a00006 	mov	r0, r6
   254c8:	eb0003f0 	bl	26490 <CString::FormatV(char const*, std::__va_list)>
   254cc:	e1a00006 	mov	r0, r6
   254d0:	eb0002cd 	bl	2600c <CString::operator char const*() const>
   254d4:	e1a01000 	mov	r1, r0
   254d8:	e1a0000d 	mov	r0, sp
   254dc:	eb0002e5 	bl	26078 <CString::Append(char const*)>
   254e0:	e1a0000d 	mov	r0, sp
   254e4:	e3001d30 	movw	r1, #3376	; 0xd30
   254e8:	e3401003 	movt	r1, #3
   254ec:	eb0002e1 	bl	26078 <CString::Append(char const*)>
   254f0:	e1a0000d 	mov	r0, sp
   254f4:	e30a1838 	movw	r1, #43064	; 0xa838
   254f8:	e3401002 	movt	r1, #2
   254fc:	eb0002dd 	bl	26078 <CString::Append(char const*)>
   25500:	e1a0000d 	mov	r0, sp
   25504:	eb0002c0 	bl	2600c <CString::operator char const*() const>
   25508:	e1a01000 	mov	r1, r0
   2550c:	e1a00004 	mov	r0, r4
   25510:	ebffff28 	bl	251b8 <CLogger::Write(char const*)>
   25514:	ebfff2f6 	bl	220f4 <halt>
   25518:	eaffffbc 	b	25410 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0002551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   2551c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   25520:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   25524:	e24dd010 	sub	sp, sp, #16
   25528:	e28dc018 	add	ip, sp, #24
   2552c:	e59d3014 	ldr	r3, [sp, #20]
   25530:	e58dc000 	str	ip, [sp]
   25534:	e58dc00c 	str	ip, [sp, #12]
   25538:	ebffff77 	bl	2531c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   2553c:	e28dd010 	add	sp, sp, #16
   25540:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   25544:	e28dd004 	add	sp, sp, #4
   25548:	e12fff1e 	bx	lr

0002554c <CLogger::Initialize(CDevice*)>:
   2554c:	e92d4010 	push	{r4, lr}
   25550:	e1a04000 	mov	r4, r0
   25554:	e24dd008 	sub	sp, sp, #8
   25558:	e5801008 	str	r1, [r0, #8]
   2555c:	eb000d64 	bl	28af4 <CMachineInfo::Get()>
   25560:	eb000cf1 	bl	2892c <CMachineInfo::GetMachineName() const>
   25564:	e3a02003 	mov	r2, #3
   25568:	e58d0000 	str	r0, [sp]
   2556c:	e3003d38 	movw	r3, #3384	; 0xd38
   25570:	e3403003 	movt	r3, #3
   25574:	e1a00004 	mov	r0, r4
   25578:	e3001d50 	movw	r1, #3408	; 0xd50
   2557c:	e3401003 	movt	r1, #3
   25580:	ebffffe5 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   25584:	e3a00001 	mov	r0, #1
   25588:	e28dd008 	add	sp, sp, #8
   2558c:	e8bd8010 	pop	{r4, pc}

00025590 <CSerialDevice::Read(void*, unsigned int)>:
   25590:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25594:	e2515000 	subs	r5, r1, #0
   25598:	e1a04000 	mov	r4, r0
   2559c:	e1a07002 	mov	r7, r2
   255a0:	0a000055 	beq	256fc <CSerialDevice::Read(void*, unsigned int)+0x16c>
   255a4:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
   255a8:	e3530000 	cmp	r3, #0
   255ac:	0a000031 	beq	25678 <CSerialDevice::Read(void*, unsigned int)+0xe8>
   255b0:	e2846a01 	add	r6, r4, #4096	; 0x1000
   255b4:	e59600c8 	ldr	r0, [r6, #200]	; 0xc8
   255b8:	e3500000 	cmp	r0, #0
   255bc:	1a000020 	bne	25644 <CSerialDevice::Read(void*, unsigned int)+0xb4>
   255c0:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   255c4:	e3530000 	cmp	r3, #0
   255c8:	ba000021 	blt	25654 <CSerialDevice::Read(void*, unsigned int)+0xc4>
   255cc:	e3570000 	cmp	r7, #0
   255d0:	0a000016 	beq	25630 <CSerialDevice::Read(void*, unsigned int)+0xa0>
   255d4:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   255d8:	e59428b4 	ldr	r2, [r4, #2228]	; 0x8b4
   255dc:	e1520003 	cmp	r2, r3
   255e0:	0a000050 	beq	25728 <CSerialDevice::Read(void*, unsigned int)+0x198>
   255e4:	e0852007 	add	r2, r5, r7
   255e8:	e1a01005 	mov	r1, r5
   255ec:	ea000003 	b	25600 <CSerialDevice::Read(void*, unsigned int)+0x70>
   255f0:	e594c8b0 	ldr	ip, [r4, #2224]	; 0x8b0
   255f4:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   255f8:	e15c0003 	cmp	ip, r3
   255fc:	0a00000b 	beq	25630 <CSerialDevice::Read(void*, unsigned int)+0xa0>
   25600:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   25604:	e2830001 	add	r0, r3, #1
   25608:	e0843003 	add	r3, r4, r3
   2560c:	e58408b4 	str	r0, [r4, #2228]	; 0x8b4
   25610:	e5d330b0 	ldrb	r3, [r3, #176]	; 0xb0
   25614:	e4c13001 	strb	r3, [r1], #1
   25618:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   2561c:	e1510002 	cmp	r1, r2
   25620:	e0417005 	sub	r7, r1, r5
   25624:	e7ea3053 	ubfx	r3, r3, #0, #11
   25628:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   2562c:	1affffef 	bne	255f0 <CSerialDevice::Read(void*, unsigned int)+0x60>
   25630:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   25634:	e3530000 	cmp	r3, #0
   25638:	1a00000b 	bne	2566c <CSerialDevice::Read(void*, unsigned int)+0xdc>
   2563c:	e1a00007 	mov	r0, r7
   25640:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25644:	ebfff25f 	bl	21fc8 <EnterCritical>
   25648:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   2564c:	e3530000 	cmp	r3, #0
   25650:	aaffffdd 	bge	255cc <CSerialDevice::Read(void*, unsigned int)+0x3c>
   25654:	e3a03000 	mov	r3, #0
   25658:	e59478b8 	ldr	r7, [r4, #2232]	; 0x8b8
   2565c:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
   25660:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   25664:	e3530000 	cmp	r3, #0
   25668:	0afffff3 	beq	2563c <CSerialDevice::Read(void*, unsigned int)+0xac>
   2566c:	ebfff283 	bl	22080 <LeaveCritical>
   25670:	e1a00007 	mov	r0, r7
   25674:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25678:	e3570000 	cmp	r7, #0
   2567c:	0affffee 	beq	2563c <CSerialDevice::Read(void*, unsigned int)+0xac>
   25680:	e3a0ca01 	mov	ip, #4096	; 0x1000
   25684:	e343cf20 	movt	ip, #16160	; 0x3f20
   25688:	e59c2018 	ldr	r2, [ip, #24]
   2568c:	e3120010 	tst	r2, #16
   25690:	1a000026 	bne	25730 <CSerialDevice::Read(void*, unsigned int)+0x1a0>
   25694:	e59c3000 	ldr	r3, [ip]
   25698:	e3130b01 	tst	r3, #1024	; 0x400
   2569c:	1a000014 	bne	256f4 <CSerialDevice::Read(void*, unsigned int)+0x164>
   256a0:	e3130b02 	tst	r3, #2048	; 0x800
   256a4:	1a00001b 	bne	25718 <CSerialDevice::Read(void*, unsigned int)+0x188>
   256a8:	e3130c01 	tst	r3, #256	; 0x100
   256ac:	1a00001b 	bne	25720 <CSerialDevice::Read(void*, unsigned int)+0x190>
   256b0:	e0852007 	add	r2, r5, r7
   256b4:	e1a01005 	mov	r1, r5
   256b8:	ea000003 	b	256cc <CSerialDevice::Read(void*, unsigned int)+0x13c>
   256bc:	e3130b02 	tst	r3, #2048	; 0x800
   256c0:	1a000014 	bne	25718 <CSerialDevice::Read(void*, unsigned int)+0x188>
   256c4:	e3130c01 	tst	r3, #256	; 0x100
   256c8:	1a000014 	bne	25720 <CSerialDevice::Read(void*, unsigned int)+0x190>
   256cc:	e4c13001 	strb	r3, [r1], #1
   256d0:	e1520001 	cmp	r2, r1
   256d4:	e0417005 	sub	r7, r1, r5
   256d8:	0affffd7 	beq	2563c <CSerialDevice::Read(void*, unsigned int)+0xac>
   256dc:	e59c3018 	ldr	r3, [ip, #24]
   256e0:	e3130010 	tst	r3, #16
   256e4:	1affffd4 	bne	2563c <CSerialDevice::Read(void*, unsigned int)+0xac>
   256e8:	e59c3000 	ldr	r3, [ip]
   256ec:	e3130b01 	tst	r3, #1024	; 0x400
   256f0:	0afffff1 	beq	256bc <CSerialDevice::Read(void*, unsigned int)+0x12c>
   256f4:	e3e07000 	mvn	r7, #0
   256f8:	eaffffcf 	b	2563c <CSerialDevice::Read(void*, unsigned int)+0xac>
   256fc:	e3001d74 	movw	r1, #3444	; 0xd74
   25700:	e3401003 	movt	r1, #3
   25704:	e3000d80 	movw	r0, #3456	; 0xd80
   25708:	e3400003 	movt	r0, #3
   2570c:	e3a02c01 	mov	r2, #256	; 0x100
   25710:	ebfffd22 	bl	24ba0 <assertion_failed>
   25714:	eaffffa2 	b	255a4 <CSerialDevice::Read(void*, unsigned int)+0x14>
   25718:	e3e07001 	mvn	r7, #1
   2571c:	eaffffc6 	b	2563c <CSerialDevice::Read(void*, unsigned int)+0xac>
   25720:	e3e07002 	mvn	r7, #2
   25724:	eaffffc4 	b	2563c <CSerialDevice::Read(void*, unsigned int)+0xac>
   25728:	e3a07000 	mov	r7, #0
   2572c:	eaffffbf 	b	25630 <CSerialDevice::Read(void*, unsigned int)+0xa0>
   25730:	e1a07003 	mov	r7, r3
   25734:	eaffffc0 	b	2563c <CSerialDevice::Read(void*, unsigned int)+0xac>

00025738 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>:
   25738:	e92d4070 	push	{r4, r5, r6, lr}
   2573c:	e1a04000 	mov	r4, r0
   25740:	e1a05002 	mov	r5, r2
   25744:	e1a06001 	mov	r6, r1
   25748:	ebfff6c1 	bl	23254 <CDevice::CDevice()>
   2574c:	e1a00004 	mov	r0, r4
   25750:	e59fc098 	ldr	ip, [pc, #152]	; 257f0 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)+0xb8>
   25754:	e3a03000 	mov	r3, #0
   25758:	e3a01020 	mov	r1, #32
   2575c:	e1a02003 	mov	r2, r3
   25760:	e480c004 	str	ip, [r0], #4
   25764:	ebfff0d4 	bl	21abc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   25768:	e3a03000 	mov	r3, #0
   2576c:	e1a02003 	mov	r2, r3
   25770:	e284002c 	add	r0, r4, #44	; 0x2c
   25774:	e3a01021 	mov	r1, #33	; 0x21
   25778:	ebfff0cf 	bl	21abc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   2577c:	e2840054 	add	r0, r4, #84	; 0x54
   25780:	e3a03000 	mov	r3, #0
   25784:	e3a02004 	mov	r2, #4
   25788:	e3a0100e 	mov	r1, #14
   2578c:	ebfff0ca 	bl	21abc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   25790:	e284007c 	add	r0, r4, #124	; 0x7c
   25794:	e3a03000 	mov	r3, #0
   25798:	e3a02004 	mov	r2, #4
   2579c:	e3a0100f 	mov	r1, #15
   257a0:	ebfff0c5 	bl	21abc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   257a4:	e2842a01 	add	r2, r4, #4096	; 0x1000
   257a8:	e3550000 	cmp	r5, #0
   257ac:	e3a03000 	mov	r3, #0
   257b0:	e3a01001 	mov	r1, #1
   257b4:	13a0c002 	movne	ip, #2
   257b8:	03a0c001 	moveq	ip, #1
   257bc:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   257c0:	e58460a4 	str	r6, [r4, #164]	; 0xa4
   257c4:	e1a00004 	mov	r0, r4
   257c8:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   257cc:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   257d0:	e58430ac 	str	r3, [r4, #172]	; 0xac
   257d4:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
   257d8:	e58230bc 	str	r3, [r2, #188]	; 0xbc
   257dc:	e582c0c8 	str	ip, [r2, #200]	; 0xc8
   257e0:	e58210c4 	str	r1, [r2, #196]	; 0xc4
   257e4:	e58230c0 	str	r3, [r2, #192]	; 0xc0
   257e8:	e58210cc 	str	r1, [r2, #204]	; 0xcc
   257ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   257f0:	00030d60 	.word	0x00030d60

000257f4 <CSerialDevice::Initialize(unsigned int)>:
   257f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   257f8:	e1a08001 	mov	r8, r1
   257fc:	e1a05000 	mov	r5, r0
   25800:	eb000cbb 	bl	28af4 <CMachineInfo::Get()>
   25804:	e3a01002 	mov	r1, #2
   25808:	eb000c5d 	bl	28984 <CMachineInfo::GetClockRate(unsigned int) const>
   2580c:	e2507000 	subs	r7, r0, #0
   25810:	0a000060 	beq	25998 <CSerialDevice::Initialize(unsigned int)+0x1a4>
   25814:	e30037d4 	movw	r3, #2004	; 0x7d4
   25818:	e340303d 	movt	r3, #61	; 0x3d
   2581c:	e2482f4b 	sub	r2, r8, #300	; 0x12c
   25820:	e1520003 	cmp	r2, r3
   25824:	8a000054 	bhi	2597c <CSerialDevice::Initialize(unsigned int)+0x188>
   25828:	e1a04208 	lsl	r4, r8, #4
   2582c:	e30f3ffe 	movw	r3, #65534	; 0xfffe
   25830:	e736f417 	udiv	r6, r7, r4
   25834:	e2462001 	sub	r2, r6, #1
   25838:	e1520003 	cmp	r2, r3
   2583c:	8a000047 	bhi	25960 <CSerialDevice::Initialize(unsigned int)+0x16c>
   25840:	e0617694 	mls	r1, r4, r6, r7
   25844:	e1a01181 	lsl	r1, r1, #3
   25848:	e731f811 	udiv	r1, r1, r8
   2584c:	e2014001 	and	r4, r1, #1
   25850:	e08440a1 	add	r4, r4, r1, lsr #1
   25854:	e354003f 	cmp	r4, #63	; 0x3f
   25858:	8a00002b 	bhi	2590c <CSerialDevice::Initialize(unsigned int)+0x118>
   2585c:	e59500a4 	ldr	r0, [r5, #164]	; 0xa4
   25860:	e3500000 	cmp	r0, #0
   25864:	0a000031 	beq	25930 <CSerialDevice::Initialize(unsigned int)+0x13c>
   25868:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   2586c:	e3052dd4 	movw	r2, #24020	; 0x5dd4
   25870:	e3402002 	movt	r2, #2
   25874:	e3530000 	cmp	r3, #0
   25878:	e3a01039 	mov	r1, #57	; 0x39
   2587c:	e1a03005 	mov	r3, r5
   25880:	0a00001f 	beq	25904 <CSerialDevice::Initialize(unsigned int)+0x110>
   25884:	eb0005f1 	bl	27050 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   25888:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   2588c:	e3a03a01 	mov	r3, #4096	; 0x1000
   25890:	e3433f20 	movt	r3, #16160	; 0x3f20
   25894:	e3520000 	cmp	r2, #0
   25898:	e30027ff 	movw	r2, #2047	; 0x7ff
   2589c:	e3a00001 	mov	r0, #1
   258a0:	e3a01000 	mov	r1, #0
   258a4:	e58500ac 	str	r0, [r5, #172]	; 0xac
   258a8:	e5831038 	str	r1, [r3, #56]	; 0x38
   258ac:	e5832044 	str	r2, [r3, #68]	; 0x44
   258b0:	e5836024 	str	r6, [r3, #36]	; 0x24
   258b4:	e5834028 	str	r4, [r3, #40]	; 0x28
   258b8:	0a000023 	beq	2594c <CSerialDevice::Initialize(unsigned int)+0x158>
   258bc:	e3a00009 	mov	r0, #9
   258c0:	e3a01070 	mov	r1, #112	; 0x70
   258c4:	e3a02e45 	mov	r2, #1104	; 0x450
   258c8:	e5830034 	str	r0, [r3, #52]	; 0x34
   258cc:	e583102c 	str	r1, [r3, #44]	; 0x2c
   258d0:	e5832038 	str	r2, [r3, #56]	; 0x38
   258d4:	e3a03a01 	mov	r3, #4096	; 0x1000
   258d8:	e3433f20 	movt	r3, #16160	; 0x3f20
   258dc:	e3002301 	movw	r2, #769	; 0x301
   258e0:	e5832030 	str	r2, [r3, #48]	; 0x30
   258e4:	ebfffe03 	bl	250f8 <CDeviceNameService::Get()>
   258e8:	e1a02005 	mov	r2, r5
   258ec:	e3a03000 	mov	r3, #0
   258f0:	e3001e00 	movw	r1, #3584	; 0xe00
   258f4:	e3401003 	movt	r1, #3
   258f8:	ebfffd8a 	bl	24f28 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   258fc:	e3a00001 	mov	r0, #1
   25900:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25904:	eb000630 	bl	271cc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   25908:	eaffffde 	b	25888 <CSerialDevice::Initialize(unsigned int)+0x94>
   2590c:	e3001d74 	movw	r1, #3444	; 0xd74
   25910:	e3401003 	movt	r1, #3
   25914:	e3000dec 	movw	r0, #3564	; 0xdec
   25918:	e3400003 	movt	r0, #3
   2591c:	e3a02091 	mov	r2, #145	; 0x91
   25920:	ebfffc9e 	bl	24ba0 <assertion_failed>
   25924:	e59500a4 	ldr	r0, [r5, #164]	; 0xa4
   25928:	e3500000 	cmp	r0, #0
   2592c:	1affffcd 	bne	25868 <CSerialDevice::Initialize(unsigned int)+0x74>
   25930:	e3a03a01 	mov	r3, #4096	; 0x1000
   25934:	e3433f20 	movt	r3, #16160	; 0x3f20
   25938:	e30027ff 	movw	r2, #2047	; 0x7ff
   2593c:	e5830038 	str	r0, [r3, #56]	; 0x38
   25940:	e5832044 	str	r2, [r3, #68]	; 0x44
   25944:	e5836024 	str	r6, [r3, #36]	; 0x24
   25948:	e5834028 	str	r4, [r3, #40]	; 0x28
   2594c:	e3a03a01 	mov	r3, #4096	; 0x1000
   25950:	e3433f20 	movt	r3, #16160	; 0x3f20
   25954:	e3a02060 	mov	r2, #96	; 0x60
   25958:	e583202c 	str	r2, [r3, #44]	; 0x2c
   2595c:	eaffffdc 	b	258d4 <CSerialDevice::Initialize(unsigned int)+0xe0>
   25960:	e3001d74 	movw	r1, #3444	; 0xd74
   25964:	e3401003 	movt	r1, #3
   25968:	e3000dc8 	movw	r0, #3528	; 0xdc8
   2596c:	e3400003 	movt	r0, #3
   25970:	e3a0208e 	mov	r2, #142	; 0x8e
   25974:	ebfffc89 	bl	24ba0 <assertion_failed>
   25978:	eaffffb0 	b	25840 <CSerialDevice::Initialize(unsigned int)+0x4c>
   2597c:	e3001d74 	movw	r1, #3444	; 0xd74
   25980:	e3401003 	movt	r1, #3
   25984:	e3000d9c 	movw	r0, #3484	; 0xd9c
   25988:	e3400003 	movt	r0, #3
   2598c:	e3a0208b 	mov	r2, #139	; 0x8b
   25990:	ebfffc82 	bl	24ba0 <assertion_failed>
   25994:	eaffffa3 	b	25828 <CSerialDevice::Initialize(unsigned int)+0x34>
   25998:	e3001d74 	movw	r1, #3444	; 0xd74
   2599c:	e3401003 	movt	r1, #3
   259a0:	e3000d8c 	movw	r0, #3468	; 0xd8c
   259a4:	e3400003 	movt	r0, #3
   259a8:	e3a02089 	mov	r2, #137	; 0x89
   259ac:	ebfffc7b 	bl	24ba0 <assertion_failed>
   259b0:	eaffff97 	b	25814 <CSerialDevice::Initialize(unsigned int)+0x20>

000259b4 <CSerialDevice::GetOptions() const>:
   259b4:	e2800a01 	add	r0, r0, #4096	; 0x1000
   259b8:	e59000c4 	ldr	r0, [r0, #196]	; 0xc4
   259bc:	e12fff1e 	bx	lr

000259c0 <CSerialDevice::SetOptions(unsigned int)>:
   259c0:	e2800a01 	add	r0, r0, #4096	; 0x1000
   259c4:	e58010c4 	str	r1, [r0, #196]	; 0xc4
   259c8:	e12fff1e 	bx	lr

000259cc <CSerialDevice::Write(unsigned char)>:
   259cc:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   259d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   259d4:	e3530000 	cmp	r3, #0
   259d8:	03a02a01 	moveq	r2, #4096	; 0x1000
   259dc:	03432f20 	movteq	r2, #16160	; 0x3f20
   259e0:	0a000018 	beq	25a48 <CSerialDevice::Write(unsigned char)+0x7c>
   259e4:	e2805a01 	add	r5, r0, #4096	; 0x1000
   259e8:	e1a06001 	mov	r6, r1
   259ec:	e1a04000 	mov	r4, r0
   259f0:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
   259f4:	e3520000 	cmp	r2, #0
   259f8:	1a00001c 	bne	25a70 <CSerialDevice::Write(unsigned char)+0xa4>
   259fc:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   25a00:	e59510c0 	ldr	r1, [r5, #192]	; 0xc0
   25a04:	e2833001 	add	r3, r3, #1
   25a08:	e7ea3053 	ubfx	r3, r3, #0, #11
   25a0c:	e1530001 	cmp	r3, r1
   25a10:	0a000021 	beq	25a9c <CSerialDevice::Write(unsigned char)+0xd0>
   25a14:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   25a18:	e3a07001 	mov	r7, #1
   25a1c:	e0840003 	add	r0, r4, r3
   25a20:	e0833007 	add	r3, r3, r7
   25a24:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   25a28:	e5c068bc 	strb	r6, [r0, #2236]	; 0x8bc
   25a2c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   25a30:	e7ea3053 	ubfx	r3, r3, #0, #11
   25a34:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   25a38:	e3520000 	cmp	r2, #0
   25a3c:	1a000008 	bne	25a64 <CSerialDevice::Write(unsigned char)+0x98>
   25a40:	e1a00007 	mov	r0, r7
   25a44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25a48:	e5923018 	ldr	r3, [r2, #24]
   25a4c:	e3130020 	tst	r3, #32
   25a50:	1afffffc 	bne	25a48 <CSerialDevice::Write(unsigned char)+0x7c>
   25a54:	e3a07001 	mov	r7, #1
   25a58:	e5821000 	str	r1, [r2]
   25a5c:	e1a00007 	mov	r0, r7
   25a60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25a64:	ebfff185 	bl	22080 <LeaveCritical>
   25a68:	e1a00007 	mov	r0, r7
   25a6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25a70:	e1a00002 	mov	r0, r2
   25a74:	ebfff153 	bl	21fc8 <EnterCritical>
   25a78:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   25a7c:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
   25a80:	e2833001 	add	r3, r3, #1
   25a84:	e7ea3053 	ubfx	r3, r3, #0, #11
   25a88:	e1530002 	cmp	r3, r2
   25a8c:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
   25a90:	03a07000 	moveq	r7, #0
   25a94:	1affffde 	bne	25a14 <CSerialDevice::Write(unsigned char)+0x48>
   25a98:	eaffffe6 	b	25a38 <CSerialDevice::Write(unsigned char)+0x6c>
   25a9c:	e1a07002 	mov	r7, r2
   25aa0:	e1a00007 	mov	r0, r7
   25aa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00025aa8 <CSerialDevice::Write(void const*, unsigned int)>:
   25aa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25aac:	e2804a01 	add	r4, r0, #4096	; 0x1000
   25ab0:	e1a07000 	mov	r7, r0
   25ab4:	e1a05001 	mov	r5, r1
   25ab8:	e1a08002 	mov	r8, r2
   25abc:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   25ac0:	e3500000 	cmp	r0, #0
   25ac4:	1a000052 	bne	25c14 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
   25ac8:	e3550000 	cmp	r5, #0
   25acc:	0a000058 	beq	25c34 <CSerialDevice::Write(void const*, unsigned int)+0x18c>
   25ad0:	e3580000 	cmp	r8, #0
   25ad4:	0a00005d 	beq	25c50 <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
   25ad8:	e3a06000 	mov	r6, #0
   25adc:	ea000002 	b	25aec <CSerialDevice::Write(void const*, unsigned int)+0x44>
   25ae0:	e2866001 	add	r6, r6, #1
   25ae4:	e1560008 	cmp	r6, r8
   25ae8:	0a00000f 	beq	25b2c <CSerialDevice::Write(void const*, unsigned int)+0x84>
   25aec:	e5d51000 	ldrb	r1, [r5]
   25af0:	e1a00007 	mov	r0, r7
   25af4:	ebffffb4 	bl	259cc <CSerialDevice::Write(unsigned char)>
   25af8:	e3500000 	cmp	r0, #0
   25afc:	0a00000a 	beq	25b2c <CSerialDevice::Write(void const*, unsigned int)+0x84>
   25b00:	e4d53001 	ldrb	r3, [r5], #1
   25b04:	e353000a 	cmp	r3, #10
   25b08:	1afffff4 	bne	25ae0 <CSerialDevice::Write(void const*, unsigned int)+0x38>
   25b0c:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
   25b10:	e3130001 	tst	r3, #1
   25b14:	0afffff1 	beq	25ae0 <CSerialDevice::Write(void const*, unsigned int)+0x38>
   25b18:	e3a0100d 	mov	r1, #13
   25b1c:	e1a00007 	mov	r0, r7
   25b20:	ebffffa9 	bl	259cc <CSerialDevice::Write(unsigned char)>
   25b24:	e3500000 	cmp	r0, #0
   25b28:	1affffec 	bne	25ae0 <CSerialDevice::Write(void const*, unsigned int)+0x38>
   25b2c:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   25b30:	e3530000 	cmp	r3, #0
   25b34:	1a000034 	bne	25c0c <CSerialDevice::Write(void const*, unsigned int)+0x164>
   25b38:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
   25b3c:	e3530000 	cmp	r3, #0
   25b40:	0a000023 	beq	25bd4 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   25b44:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
   25b48:	e3500000 	cmp	r0, #0
   25b4c:	1a000032 	bne	25c1c <CSerialDevice::Write(void const*, unsigned int)+0x174>
   25b50:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   25b54:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   25b58:	e1520003 	cmp	r2, r3
   25b5c:	0a00001c 	beq	25bd4 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   25b60:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   25b64:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
   25b68:	e1520003 	cmp	r2, r3
   25b6c:	0a000015 	beq	25bc8 <CSerialDevice::Write(void const*, unsigned int)+0x120>
   25b70:	e3a02a01 	mov	r2, #4096	; 0x1000
   25b74:	e3432f20 	movt	r2, #16160	; 0x3f20
   25b78:	e5923018 	ldr	r3, [r2, #24]
   25b7c:	e3130020 	tst	r3, #32
   25b80:	0a000003 	beq	25b94 <CSerialDevice::Write(void const*, unsigned int)+0xec>
   25b84:	ea000017 	b	25be8 <CSerialDevice::Write(void const*, unsigned int)+0x140>
   25b88:	e5923018 	ldr	r3, [r2, #24]
   25b8c:	e3130020 	tst	r3, #32
   25b90:	1a000014 	bne	25be8 <CSerialDevice::Write(void const*, unsigned int)+0x140>
   25b94:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   25b98:	e2831001 	add	r1, r3, #1
   25b9c:	e0873003 	add	r3, r7, r3
   25ba0:	e58410c0 	str	r1, [r4, #192]	; 0xc0
   25ba4:	e5d338bc 	ldrb	r3, [r3, #2236]	; 0x8bc
   25ba8:	e5823000 	str	r3, [r2]
   25bac:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   25bb0:	e7ea3053 	ubfx	r3, r3, #0, #11
   25bb4:	e58430c0 	str	r3, [r4, #192]	; 0xc0
   25bb8:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
   25bbc:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   25bc0:	e1510003 	cmp	r1, r3
   25bc4:	1affffef 	bne	25b88 <CSerialDevice::Write(void const*, unsigned int)+0xe0>
   25bc8:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   25bcc:	e3530000 	cmp	r3, #0
   25bd0:	1a000001 	bne	25bdc <CSerialDevice::Write(void const*, unsigned int)+0x134>
   25bd4:	e1a00006 	mov	r0, r6
   25bd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25bdc:	ebfff127 	bl	22080 <LeaveCritical>
   25be0:	e1a00006 	mov	r0, r6
   25be4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25be8:	e3a03a01 	mov	r3, #4096	; 0x1000
   25bec:	e3433f20 	movt	r3, #16160	; 0x3f20
   25bf0:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   25bf4:	e3822020 	orr	r2, r2, #32
   25bf8:	e5832038 	str	r2, [r3, #56]	; 0x38
   25bfc:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   25c00:	e3530000 	cmp	r3, #0
   25c04:	0afffff2 	beq	25bd4 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   25c08:	eafffff3 	b	25bdc <CSerialDevice::Write(void const*, unsigned int)+0x134>
   25c0c:	ebfff11b 	bl	22080 <LeaveCritical>
   25c10:	eaffffc8 	b	25b38 <CSerialDevice::Write(void const*, unsigned int)+0x90>
   25c14:	ebfff0eb 	bl	21fc8 <EnterCritical>
   25c18:	eaffffaa 	b	25ac8 <CSerialDevice::Write(void const*, unsigned int)+0x20>
   25c1c:	ebfff0e9 	bl	21fc8 <EnterCritical>
   25c20:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   25c24:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   25c28:	e1520003 	cmp	r2, r3
   25c2c:	1affffcb 	bne	25b60 <CSerialDevice::Write(void const*, unsigned int)+0xb8>
   25c30:	eaffffe4 	b	25bc8 <CSerialDevice::Write(void const*, unsigned int)+0x120>
   25c34:	e3001d74 	movw	r1, #3444	; 0xd74
   25c38:	e3401003 	movt	r1, #3
   25c3c:	e3000d80 	movw	r0, #3456	; 0xd80
   25c40:	e3400003 	movt	r0, #3
   25c44:	e3a020c2 	mov	r2, #194	; 0xc2
   25c48:	ebfffbd4 	bl	24ba0 <assertion_failed>
   25c4c:	eaffff9f 	b	25ad0 <CSerialDevice::Write(void const*, unsigned int)+0x28>
   25c50:	e1a06008 	mov	r6, r8
   25c54:	eaffffb4 	b	25b2c <CSerialDevice::Write(void const*, unsigned int)+0x84>

00025c58 <CSerialDevice::InterruptHandler()>:
   25c58:	e92d4070 	push	{r4, r5, r6, lr}
   25c5c:	e2805a01 	add	r5, r0, #4096	; 0x1000
   25c60:	e1a04000 	mov	r4, r0
   25c64:	e59500c8 	ldr	r0, [r5, #200]	; 0xc8
   25c68:	e3500000 	cmp	r0, #0
   25c6c:	1a000056 	bne	25dcc <CSerialDevice::InterruptHandler()+0x174>
   25c70:	e3a03a01 	mov	r3, #4096	; 0x1000
   25c74:	e3433f20 	movt	r3, #16160	; 0x3f20
   25c78:	e1a01003 	mov	r1, r3
   25c7c:	e3e0e002 	mvn	lr, #2
   25c80:	e3e00001 	mvn	r0, #1
   25c84:	e3e0c000 	mvn	ip, #0
   25c88:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   25c8c:	e5832044 	str	r2, [r3, #68]	; 0x44
   25c90:	e5913018 	ldr	r3, [r1, #24]
   25c94:	e3130010 	tst	r3, #16
   25c98:	1a000016 	bne	25cf8 <CSerialDevice::InterruptHandler()+0xa0>
   25c9c:	e5912000 	ldr	r2, [r1]
   25ca0:	e3120b01 	tst	r2, #1024	; 0x400
   25ca4:	0a000032 	beq	25d74 <CSerialDevice::InterruptHandler()+0x11c>
   25ca8:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   25cac:	e3530000 	cmp	r3, #0
   25cb0:	0584c8b8 	streq	ip, [r4, #2232]	; 0x8b8
   25cb4:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   25cb8:	e59468b4 	ldr	r6, [r4, #2228]	; 0x8b4
   25cbc:	e2833001 	add	r3, r3, #1
   25cc0:	e7ea3053 	ubfx	r3, r3, #0, #11
   25cc4:	e1530006 	cmp	r3, r6
   25cc8:	0a00002f 	beq	25d8c <CSerialDevice::InterruptHandler()+0x134>
   25ccc:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   25cd0:	e0846003 	add	r6, r4, r3
   25cd4:	e2833001 	add	r3, r3, #1
   25cd8:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   25cdc:	e5c620b0 	strb	r2, [r6, #176]	; 0xb0
   25ce0:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   25ce4:	e7ea3053 	ubfx	r3, r3, #0, #11
   25ce8:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   25cec:	e5913018 	ldr	r3, [r1, #24]
   25cf0:	e3130010 	tst	r3, #16
   25cf4:	0affffe8 	beq	25c9c <CSerialDevice::InterruptHandler()+0x44>
   25cf8:	e5913018 	ldr	r3, [r1, #24]
   25cfc:	e3130020 	tst	r3, #32
   25d00:	1a000016 	bne	25d60 <CSerialDevice::InterruptHandler()+0x108>
   25d04:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   25d08:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
   25d0c:	e1520003 	cmp	r2, r3
   25d10:	13a02a01 	movne	r2, #4096	; 0x1000
   25d14:	13432f20 	movtne	r2, #16160	; 0x3f20
   25d18:	1a000004 	bne	25d30 <CSerialDevice::InterruptHandler()+0xd8>
   25d1c:	ea000024 	b	25db4 <CSerialDevice::InterruptHandler()+0x15c>
   25d20:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
   25d24:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
   25d28:	e1510003 	cmp	r1, r3
   25d2c:	0a000020 	beq	25db4 <CSerialDevice::InterruptHandler()+0x15c>
   25d30:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
   25d34:	e2831001 	add	r1, r3, #1
   25d38:	e0843003 	add	r3, r4, r3
   25d3c:	e58510c0 	str	r1, [r5, #192]	; 0xc0
   25d40:	e5d338bc 	ldrb	r3, [r3, #2236]	; 0x8bc
   25d44:	e5823000 	str	r3, [r2]
   25d48:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
   25d4c:	e7ea3053 	ubfx	r3, r3, #0, #11
   25d50:	e58530c0 	str	r3, [r5, #192]	; 0xc0
   25d54:	e5923018 	ldr	r3, [r2, #24]
   25d58:	e3130020 	tst	r3, #32
   25d5c:	0affffef 	beq	25d20 <CSerialDevice::InterruptHandler()+0xc8>
   25d60:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
   25d64:	e3530000 	cmp	r3, #0
   25d68:	08bd8070 	popeq	{r4, r5, r6, pc}
   25d6c:	e8bd4070 	pop	{r4, r5, r6, lr}
   25d70:	eafff0c2 	b	22080 <LeaveCritical>
   25d74:	e3120b02 	tst	r2, #2048	; 0x800
   25d78:	0a000007 	beq	25d9c <CSerialDevice::InterruptHandler()+0x144>
   25d7c:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   25d80:	e3530000 	cmp	r3, #0
   25d84:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
   25d88:	eaffffc9 	b	25cb4 <CSerialDevice::InterruptHandler()+0x5c>
   25d8c:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   25d90:	e3530000 	cmp	r3, #0
   25d94:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
   25d98:	eaffffbc 	b	25c90 <CSerialDevice::InterruptHandler()+0x38>
   25d9c:	e3120c01 	tst	r2, #256	; 0x100
   25da0:	0affffc3 	beq	25cb4 <CSerialDevice::InterruptHandler()+0x5c>
   25da4:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   25da8:	e3530000 	cmp	r3, #0
   25dac:	0584e8b8 	streq	lr, [r4, #2232]	; 0x8b8
   25db0:	eaffffbf 	b	25cb4 <CSerialDevice::InterruptHandler()+0x5c>
   25db4:	e3a03a01 	mov	r3, #4096	; 0x1000
   25db8:	e3433f20 	movt	r3, #16160	; 0x3f20
   25dbc:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   25dc0:	e3c22020 	bic	r2, r2, #32
   25dc4:	e5832038 	str	r2, [r3, #56]	; 0x38
   25dc8:	eaffffe4 	b	25d60 <CSerialDevice::InterruptHandler()+0x108>
   25dcc:	ebfff07d 	bl	21fc8 <EnterCritical>
   25dd0:	eaffffa6 	b	25c70 <CSerialDevice::InterruptHandler()+0x18>

00025dd4 <CSerialDevice::InterruptStub(void*)>:
   25dd4:	e92d4010 	push	{r4, lr}
   25dd8:	e2504000 	subs	r4, r0, #0
   25ddc:	0a000002 	beq	25dec <CSerialDevice::InterruptStub(void*)+0x18>
   25de0:	e1a00004 	mov	r0, r4
   25de4:	e8bd4010 	pop	{r4, lr}
   25de8:	eaffff9a 	b	25c58 <CSerialDevice::InterruptHandler()>
   25dec:	e3001d74 	movw	r1, #3444	; 0xd74
   25df0:	e3401003 	movt	r1, #3
   25df4:	e30a0940 	movw	r0, #43328	; 0xa940
   25df8:	e3400002 	movt	r0, #2
   25dfc:	e30021c1 	movw	r2, #449	; 0x1c1
   25e00:	ebfffb66 	bl	24ba0 <assertion_failed>
   25e04:	e1a00004 	mov	r0, r4
   25e08:	e8bd4010 	pop	{r4, lr}
   25e0c:	eaffff91 	b	25c58 <CSerialDevice::InterruptHandler()>

00025e10 <CSerialDevice::~CSerialDevice()>:
   25e10:	e3a03a01 	mov	r3, #4096	; 0x1000
   25e14:	e3433f20 	movt	r3, #16160	; 0x3f20
   25e18:	e59f10a0 	ldr	r1, [pc, #160]	; 25ec0 <CSerialDevice::~CSerialDevice()+0xb0>
   25e1c:	e3a02000 	mov	r2, #0
   25e20:	e92d4010 	push	{r4, lr}
   25e24:	e1a04000 	mov	r4, r0
   25e28:	e5801000 	str	r1, [r0]
   25e2c:	e5832038 	str	r2, [r3, #56]	; 0x38
   25e30:	e5832030 	str	r2, [r3, #48]	; 0x30
   25e34:	e59030ac 	ldr	r3, [r0, #172]	; 0xac
   25e38:	e1530002 	cmp	r3, r2
   25e3c:	0a000006 	beq	25e5c <CSerialDevice::~CSerialDevice()+0x4c>
   25e40:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
   25e44:	e1500002 	cmp	r0, r2
   25e48:	0a000014 	beq	25ea0 <CSerialDevice::~CSerialDevice()+0x90>
   25e4c:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   25e50:	e3530000 	cmp	r3, #0
   25e54:	0a00000e 	beq	25e94 <CSerialDevice::~CSerialDevice()+0x84>
   25e58:	eb0004ab 	bl	2710c <CInterruptSystem::DisconnectFIQ()>
   25e5c:	e3a03000 	mov	r3, #0
   25e60:	e284007c 	add	r0, r4, #124	; 0x7c
   25e64:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   25e68:	ebffec76 	bl	21048 <CGPIOPin::~CGPIOPin()>
   25e6c:	e2840054 	add	r0, r4, #84	; 0x54
   25e70:	ebffec74 	bl	21048 <CGPIOPin::~CGPIOPin()>
   25e74:	e284002c 	add	r0, r4, #44	; 0x2c
   25e78:	ebffec72 	bl	21048 <CGPIOPin::~CGPIOPin()>
   25e7c:	e2840004 	add	r0, r4, #4
   25e80:	ebffec70 	bl	21048 <CGPIOPin::~CGPIOPin()>
   25e84:	e1a00004 	mov	r0, r4
   25e88:	ebfff4e5 	bl	23224 <CDevice::~CDevice()>
   25e8c:	e1a00004 	mov	r0, r4
   25e90:	e8bd8010 	pop	{r4, pc}
   25e94:	e3a01039 	mov	r1, #57	; 0x39
   25e98:	eb000504 	bl	272b0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   25e9c:	eaffffee 	b	25e5c <CSerialDevice::~CSerialDevice()+0x4c>
   25ea0:	e3001d74 	movw	r1, #3444	; 0xd74
   25ea4:	e3401003 	movt	r1, #3
   25ea8:	e30a0978 	movw	r0, #43384	; 0xa978
   25eac:	e3400002 	movt	r0, #2
   25eb0:	e3a02078 	mov	r2, #120	; 0x78
   25eb4:	ebfffb39 	bl	24ba0 <assertion_failed>
   25eb8:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   25ebc:	eaffffe2 	b	25e4c <CSerialDevice::~CSerialDevice()+0x3c>
   25ec0:	00030d60 	.word	0x00030d60

00025ec4 <CSerialDevice::~CSerialDevice()>:
   25ec4:	e92d4010 	push	{r4, lr}
   25ec8:	e1a04000 	mov	r4, r0
   25ecc:	ebffffcf 	bl	25e10 <CSerialDevice::~CSerialDevice()>
   25ed0:	e1a00004 	mov	r0, r4
   25ed4:	e30110d0 	movw	r1, #4304	; 0x10d0
   25ed8:	ebfff032 	bl	21fa8 <operator delete(void*, unsigned int)>
   25edc:	e1a00004 	mov	r0, r4
   25ee0:	e8bd8010 	pop	{r4, pc}
   25ee4:	00000000 	andeq	r0, r0, r0

00025ee8 <CString::~CString()>:
   25ee8:	e92d4010 	push	{r4, lr}
   25eec:	e1a04000 	mov	r4, r0
   25ef0:	e5900004 	ldr	r0, [r0, #4]
   25ef4:	e59f3014 	ldr	r3, [pc, #20]	; 25f10 <CString::~CString()+0x28>
   25ef8:	e3500000 	cmp	r0, #0
   25efc:	e5843000 	str	r3, [r4]
   25f00:	0a000000 	beq	25f08 <CString::~CString()+0x20>
   25f04:	ebfff026 	bl	21fa4 <operator delete[](void*)>
   25f08:	e1a00004 	mov	r0, r4
   25f0c:	e8bd8010 	pop	{r4, pc}
   25f10:	00030e10 	.word	0x00030e10

00025f14 <CString::~CString()>:
   25f14:	e92d4010 	push	{r4, lr}
   25f18:	e1a04000 	mov	r4, r0
   25f1c:	e5900004 	ldr	r0, [r0, #4]
   25f20:	e59f3020 	ldr	r3, [pc, #32]	; 25f48 <CString::~CString()+0x34>
   25f24:	e3500000 	cmp	r0, #0
   25f28:	e5843000 	str	r3, [r4]
   25f2c:	0a000000 	beq	25f34 <CString::~CString()+0x20>
   25f30:	ebfff01b 	bl	21fa4 <operator delete[](void*)>
   25f34:	e1a00004 	mov	r0, r4
   25f38:	e3a01010 	mov	r1, #16
   25f3c:	ebfff019 	bl	21fa8 <operator delete(void*, unsigned int)>
   25f40:	e1a00004 	mov	r0, r4
   25f44:	e8bd8010 	pop	{r4, pc}
   25f48:	00030e10 	.word	0x00030e10

00025f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   25f4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25f50:	e990002c 	ldmib	r0, {r2, r3, r5}
   25f54:	e0455002 	sub	r5, r5, r2
   25f58:	e0851001 	add	r1, r5, r1
   25f5c:	e2812001 	add	r2, r1, #1
   25f60:	e1520003 	cmp	r2, r3
   25f64:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   25f68:	e1a04000 	mov	r4, r0
   25f6c:	e2816041 	add	r6, r1, #65	; 0x41
   25f70:	e1a00006 	mov	r0, r6
   25f74:	ebfff008 	bl	21f9c <operator new[](unsigned int)>
   25f78:	e3a02000 	mov	r2, #0
   25f7c:	e594300c 	ldr	r3, [r4, #12]
   25f80:	e1a07000 	mov	r7, r0
   25f84:	e5c32000 	strb	r2, [r3]
   25f88:	e5941004 	ldr	r1, [r4, #4]
   25f8c:	ebfff3ba 	bl	22e7c <strcpy>
   25f90:	e5940004 	ldr	r0, [r4, #4]
   25f94:	e3500000 	cmp	r0, #0
   25f98:	0a000000 	beq	25fa0 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   25f9c:	ebfff000 	bl	21fa4 <operator delete[](void*)>
   25fa0:	e0875005 	add	r5, r7, r5
   25fa4:	e5847004 	str	r7, [r4, #4]
   25fa8:	e584500c 	str	r5, [r4, #12]
   25fac:	e5846008 	str	r6, [r4, #8]
   25fb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00025fb4 <CString::CString()>:
   25fb4:	e59f100c 	ldr	r1, [pc, #12]	; 25fc8 <CString::CString()+0x14>
   25fb8:	e3a02000 	mov	r2, #0
   25fbc:	e5802008 	str	r2, [r0, #8]
   25fc0:	e8800006 	stm	r0, {r1, r2}
   25fc4:	e12fff1e 	bx	lr
   25fc8:	00030e10 	.word	0x00030e10

00025fcc <CString::CString(char const*)>:
   25fcc:	e92d4070 	push	{r4, r5, r6, lr}
   25fd0:	e1a04000 	mov	r4, r0
   25fd4:	e59f302c 	ldr	r3, [pc, #44]	; 26008 <CString::CString(char const*)+0x3c>
   25fd8:	e1a00001 	mov	r0, r1
   25fdc:	e1a05001 	mov	r5, r1
   25fe0:	e5843000 	str	r3, [r4]
   25fe4:	ebfff37f 	bl	22de8 <strlen>
   25fe8:	e2800001 	add	r0, r0, #1
   25fec:	e5840008 	str	r0, [r4, #8]
   25ff0:	ebffefe9 	bl	21f9c <operator new[](unsigned int)>
   25ff4:	e1a01005 	mov	r1, r5
   25ff8:	e5840004 	str	r0, [r4, #4]
   25ffc:	ebfff39e 	bl	22e7c <strcpy>
   26000:	e1a00004 	mov	r0, r4
   26004:	e8bd8070 	pop	{r4, r5, r6, pc}
   26008:	00030e10 	.word	0x00030e10

0002600c <CString::operator char const*() const>:
   2600c:	e5900004 	ldr	r0, [r0, #4]
   26010:	e30a3740 	movw	r3, #42816	; 0xa740
   26014:	e3403002 	movt	r3, #2
   26018:	e3500000 	cmp	r0, #0
   2601c:	01a00003 	moveq	r0, r3
   26020:	e12fff1e 	bx	lr

00026024 <CString::operator=(char const*)>:
   26024:	e92d4070 	push	{r4, r5, r6, lr}
   26028:	e1a04000 	mov	r4, r0
   2602c:	e5900004 	ldr	r0, [r0, #4]
   26030:	e1a05001 	mov	r5, r1
   26034:	e3500000 	cmp	r0, #0
   26038:	0a000000 	beq	26040 <CString::operator=(char const*)+0x1c>
   2603c:	ebffefd8 	bl	21fa4 <operator delete[](void*)>
   26040:	e1a00005 	mov	r0, r5
   26044:	ebfff367 	bl	22de8 <strlen>
   26048:	e2800001 	add	r0, r0, #1
   2604c:	e5840008 	str	r0, [r4, #8]
   26050:	ebffefd1 	bl	21f9c <operator new[](unsigned int)>
   26054:	e1a01005 	mov	r1, r5
   26058:	e5840004 	str	r0, [r4, #4]
   2605c:	ebfff386 	bl	22e7c <strcpy>
   26060:	e5940004 	ldr	r0, [r4, #4]
   26064:	e8bd8070 	pop	{r4, r5, r6, pc}

00026068 <CString::GetLength() const>:
   26068:	e5900004 	ldr	r0, [r0, #4]
   2606c:	e3500000 	cmp	r0, #0
   26070:	012fff1e 	bxeq	lr
   26074:	eafff35b 	b	22de8 <strlen>

00026078 <CString::Append(char const*)>:
   26078:	e92d4070 	push	{r4, r5, r6, lr}
   2607c:	e1a04000 	mov	r4, r0
   26080:	e5900004 	ldr	r0, [r0, #4]
   26084:	e3a03001 	mov	r3, #1
   26088:	e1a06001 	mov	r6, r1
   2608c:	e3500000 	cmp	r0, #0
   26090:	e5843008 	str	r3, [r4, #8]
   26094:	0a000003 	beq	260a8 <CString::Append(char const*)+0x30>
   26098:	ebfff352 	bl	22de8 <strlen>
   2609c:	e5943008 	ldr	r3, [r4, #8]
   260a0:	e0830000 	add	r0, r3, r0
   260a4:	e5840008 	str	r0, [r4, #8]
   260a8:	e1a00006 	mov	r0, r6
   260ac:	ebfff34d 	bl	22de8 <strlen>
   260b0:	e5943008 	ldr	r3, [r4, #8]
   260b4:	e0800003 	add	r0, r0, r3
   260b8:	e5840008 	str	r0, [r4, #8]
   260bc:	ebffefb6 	bl	21f9c <operator new[](unsigned int)>
   260c0:	e5941004 	ldr	r1, [r4, #4]
   260c4:	e1a05000 	mov	r5, r0
   260c8:	e3510000 	cmp	r1, #0
   260cc:	05c01000 	strbeq	r1, [r0]
   260d0:	0a000004 	beq	260e8 <CString::Append(char const*)+0x70>
   260d4:	ebfff368 	bl	22e7c <strcpy>
   260d8:	e5940004 	ldr	r0, [r4, #4]
   260dc:	e3500000 	cmp	r0, #0
   260e0:	0a000000 	beq	260e8 <CString::Append(char const*)+0x70>
   260e4:	ebffefae 	bl	21fa4 <operator delete[](void*)>
   260e8:	e1a01006 	mov	r1, r6
   260ec:	e1a00005 	mov	r0, r5
   260f0:	ebfff37f 	bl	22ef4 <strcat>
   260f4:	e5845004 	str	r5, [r4, #4]
   260f8:	e8bd8070 	pop	{r4, r5, r6, pc}

000260fc <CString::Compare(char const*) const>:
   260fc:	e5900004 	ldr	r0, [r0, #4]
   26100:	eafff342 	b	22e10 <strcmp>

00026104 <CString::Find(char) const>:
   26104:	e5902004 	ldr	r2, [r0, #4]
   26108:	e1d230d0 	ldrsb	r3, [r2]
   2610c:	e3530000 	cmp	r3, #0
   26110:	0a000009 	beq	2613c <CString::Find(char) const+0x38>
   26114:	e1510003 	cmp	r1, r3
   26118:	e3a00000 	mov	r0, #0
   2611c:	1a000002 	bne	2612c <CString::Find(char) const+0x28>
   26120:	ea000007 	b	26144 <CString::Find(char) const+0x40>
   26124:	e1530001 	cmp	r3, r1
   26128:	012fff1e 	bxeq	lr
   2612c:	e1f230d1 	ldrsb	r3, [r2, #1]!
   26130:	e2800001 	add	r0, r0, #1
   26134:	e3530000 	cmp	r3, #0
   26138:	1afffff9 	bne	26124 <CString::Find(char) const+0x20>
   2613c:	e3e00000 	mvn	r0, #0
   26140:	e12fff1e 	bx	lr
   26144:	e12fff1e 	bx	lr

00026148 <CString::PutChar(char, unsigned int)>:
   26148:	e92d4070 	push	{r4, r5, r6, lr}
   2614c:	e2524000 	subs	r4, r2, #0
   26150:	08bd8070 	popeq	{r4, r5, r6, pc}
   26154:	e1a06001 	mov	r6, r1
   26158:	e1a01004 	mov	r1, r4
   2615c:	e1a05000 	mov	r5, r0
   26160:	ebffff79 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26164:	e2443001 	sub	r3, r4, #1
   26168:	e595200c 	ldr	r2, [r5, #12]
   2616c:	e2433001 	sub	r3, r3, #1
   26170:	e3730001 	cmn	r3, #1
   26174:	e2820001 	add	r0, r2, #1
   26178:	e585000c 	str	r0, [r5, #12]
   2617c:	e5c26000 	strb	r6, [r2]
   26180:	1afffff8 	bne	26168 <CString::PutChar(char, unsigned int)+0x20>
   26184:	e8bd8070 	pop	{r4, r5, r6, pc}

00026188 <CString::PutString(char const*)>:
   26188:	e92d4070 	push	{r4, r5, r6, lr}
   2618c:	e1a04000 	mov	r4, r0
   26190:	e1a00001 	mov	r0, r1
   26194:	e1a05001 	mov	r5, r1
   26198:	ebfff312 	bl	22de8 <strlen>
   2619c:	e2506000 	subs	r6, r0, #0
   261a0:	0a000002 	beq	261b0 <CString::PutString(char const*)+0x28>
   261a4:	e1a01006 	mov	r1, r6
   261a8:	e1a00004 	mov	r0, r4
   261ac:	ebffff66 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   261b0:	e1a01005 	mov	r1, r5
   261b4:	e594000c 	ldr	r0, [r4, #12]
   261b8:	ebfff32f 	bl	22e7c <strcpy>
   261bc:	e594100c 	ldr	r1, [r4, #12]
   261c0:	e0811006 	add	r1, r1, r6
   261c4:	e584100c 	str	r1, [r4, #12]
   261c8:	e8bd8070 	pop	{r4, r5, r6, pc}

000261cc <CString::ReserveSpace(unsigned int)>:
   261cc:	e3510000 	cmp	r1, #0
   261d0:	012fff1e 	bxeq	lr
   261d4:	eaffff5c 	b	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>

000261d8 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
   261d8:	e1510002 	cmp	r1, r2
   261dc:	e92d4070 	push	{r4, r5, r6, lr}
   261e0:	23a0c001 	movcs	ip, #1
   261e4:	3a000018 	bcc	2624c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x74>
   261e8:	e00c0c92 	mul	ip, r2, ip
   261ec:	e734fc11 	udiv	r4, r1, ip
   261f0:	e1540002 	cmp	r4, r2
   261f4:	e1a0e004 	mov	lr, r4
   261f8:	2afffffa 	bcs	261e8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x10>
   261fc:	e3530000 	cmp	r3, #0
   26200:	e1a05000 	mov	r5, r0
   26204:	13a06037 	movne	r6, #55	; 0x37
   26208:	03a06057 	moveq	r6, #87	; 0x57
   2620c:	ea000001 	b	26218 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x40>
   26210:	e734fc11 	udiv	r4, r1, ip
   26214:	e1a0e004 	mov	lr, r4
   26218:	e061149c 	mls	r1, ip, r4, r1
   2621c:	e35e0009 	cmp	lr, #9
   26220:	e73cf21c 	udiv	ip, ip, r2
   26224:	e086300e 	add	r3, r6, lr
   26228:	e28ee030 	add	lr, lr, #48	; 0x30
   2622c:	e2855001 	add	r5, r5, #1
   26230:	e6af3073 	sxtb	r3, r3
   26234:	96af307e 	sxtbls	r3, lr
   26238:	e35c0000 	cmp	ip, #0
   2623c:	e5453001 	strb	r3, [r5, #-1]
   26240:	1afffff2 	bne	26210 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x38>
   26244:	e5c5c000 	strb	ip, [r5]
   26248:	e8bd8070 	pop	{r4, r5, r6, pc}
   2624c:	e1a0e001 	mov	lr, r1
   26250:	e3a0c001 	mov	ip, #1
   26254:	e1a04001 	mov	r4, r1
   26258:	eaffffe7 	b	261fc <CString::ntoa(char*, unsigned long, unsigned int, int)+0x24>

0002625c <CString::ftoa(char*, double, unsigned int)>:
   2625c:	eeb50bc0 	vcmpe.f64	d0, #0.0
   26260:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26264:	eddf0b87 	vldr	d16, [pc, #540]	; 26488 <CString::ftoa(char*, double, unsigned int)+0x22c>
   26268:	ed2d8b02 	vpush	{d8}
   2626c:	eeb08b40 	vmov.f64	d8, d0
   26270:	e24dd010 	sub	sp, sp, #16
   26274:	e1a05000 	mov	r5, r0
   26278:	e1a06001 	mov	r6, r1
   2627c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   26280:	4eb18b40 	vnegmi.f64	d8, d0
   26284:	43a0302d 	movmi	r3, #45	; 0x2d
   26288:	45c03000 	strbmi	r3, [r0]
   2628c:	42807001 	addmi	r7, r0, #1
   26290:	51a07000 	movpl	r7, r0
   26294:	eeb48be0 	vcmpe.f64	d8, d16
   26298:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2629c:	ca000068 	bgt	26444 <CString::ftoa(char*, double, unsigned int)+0x1e8>
   262a0:	eefc7bc8 	vcvt.u32.f64	s15, d8
   262a4:	ee174a90 	vmov	r4, s15
   262a8:	e3540009 	cmp	r4, #9
   262ac:	83a03001 	movhi	r3, #1
   262b0:	83a0100a 	movhi	r1, #10
   262b4:	9a00006a 	bls	26464 <CString::ftoa(char*, double, unsigned int)+0x208>
   262b8:	e0030391 	mul	r3, r1, r3
   262bc:	e732f314 	udiv	r2, r4, r3
   262c0:	e3520009 	cmp	r2, #9
   262c4:	8afffffb 	bhi	262b8 <CString::ftoa(char*, double, unsigned int)+0x5c>
   262c8:	e30c8ccd 	movw	r8, #52429	; 0xcccd
   262cc:	e34c8ccc 	movt	r8, #52428	; 0xcccc
   262d0:	e1a0c007 	mov	ip, r7
   262d4:	e1a01004 	mov	r1, r4
   262d8:	e73ef314 	udiv	lr, r4, r3
   262dc:	ea000001 	b	262e8 <CString::ftoa(char*, double, unsigned int)+0x8c>
   262e0:	e73ef311 	udiv	lr, r1, r3
   262e4:	e1a0200e 	mov	r2, lr
   262e8:	e3520009 	cmp	r2, #9
   262ec:	e2820057 	add	r0, r2, #87	; 0x57
   262f0:	e2822030 	add	r2, r2, #48	; 0x30
   262f4:	e0611e93 	mls	r1, r3, lr, r1
   262f8:	e6af0070 	sxtb	r0, r0
   262fc:	e28cc001 	add	ip, ip, #1
   26300:	96af0072 	sxtbls	r0, r2
   26304:	e0832398 	umull	r2, r3, r8, r3
   26308:	e1b031a3 	lsrs	r3, r3, #3
   2630c:	e54c0001 	strb	r0, [ip, #-1]
   26310:	1afffff2 	bne	262e0 <CString::ftoa(char*, double, unsigned int)+0x84>
   26314:	e3560000 	cmp	r6, #0
   26318:	e5cc3000 	strb	r3, [ip]
   2631c:	1a000003 	bne	26330 <CString::ftoa(char*, double, unsigned int)+0xd4>
   26320:	e1a00005 	mov	r0, r5
   26324:	e28dd010 	add	sp, sp, #16
   26328:	ecbd8b02 	vpop	{d8}
   2632c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26330:	e1a00007 	mov	r0, r7
   26334:	ebfff2ab 	bl	22de8 <strlen>
   26338:	e3560009 	cmp	r6, #9
   2633c:	23a06009 	movcs	r6, #9
   26340:	e3a0302e 	mov	r3, #46	; 0x2e
   26344:	e3560001 	cmp	r6, #1
   26348:	e0878000 	add	r8, r7, r0
   2634c:	e7c73000 	strb	r3, [r7, r0]
   26350:	e2887001 	add	r7, r8, #1
   26354:	0a000049 	beq	26480 <CString::ftoa(char*, double, unsigned int)+0x224>
   26358:	e3a0200a 	mov	r2, #10
   2635c:	e3a03002 	mov	r3, #2
   26360:	e1a01002 	mov	r1, r2
   26364:	e2833001 	add	r3, r3, #1
   26368:	e0020291 	mul	r2, r1, r2
   2636c:	e1530006 	cmp	r3, r6
   26370:	9afffffb 	bls	26364 <CString::ftoa(char*, double, unsigned int)+0x108>
   26374:	ee072a90 	vmov	s15, r2
   26378:	eef81b67 	vcvt.f64.u32	d17, s15
   2637c:	ee074a90 	vmov	s15, r4
   26380:	eef80b67 	vcvt.f64.u32	d16, s15
   26384:	ee388b60 	vsub.f64	d8, d8, d16
   26388:	ee288b21 	vmul.f64	d8, d8, d17
   2638c:	eefc7bc8 	vcvt.u32.f64	s15, d8
   26390:	ee17ca90 	vmov	ip, s15
   26394:	e35c0009 	cmp	ip, #9
   26398:	83a03001 	movhi	r3, #1
   2639c:	83a0000a 	movhi	r0, #10
   263a0:	9a000032 	bls	26470 <CString::ftoa(char*, double, unsigned int)+0x214>
   263a4:	e0030390 	mul	r3, r0, r3
   263a8:	e731f31c 	udiv	r1, ip, r3
   263ac:	e3510009 	cmp	r1, #9
   263b0:	e1a02001 	mov	r2, r1
   263b4:	8afffffa 	bhi	263a4 <CString::ftoa(char*, double, unsigned int)+0x148>
   263b8:	e30c4ccd 	movw	r4, #52429	; 0xcccd
   263bc:	e34c4ccc 	movt	r4, #52428	; 0xcccc
   263c0:	e28de004 	add	lr, sp, #4
   263c4:	ea000001 	b	263d0 <CString::ftoa(char*, double, unsigned int)+0x174>
   263c8:	e731f31c 	udiv	r1, ip, r3
   263cc:	e1a02001 	mov	r2, r1
   263d0:	e3520009 	cmp	r2, #9
   263d4:	e2820057 	add	r0, r2, #87	; 0x57
   263d8:	e2822030 	add	r2, r2, #48	; 0x30
   263dc:	e06cc193 	mls	ip, r3, r1, ip
   263e0:	e6af1070 	sxtb	r1, r0
   263e4:	e28ee001 	add	lr, lr, #1
   263e8:	96af1072 	sxtbls	r1, r2
   263ec:	e0832394 	umull	r2, r3, r4, r3
   263f0:	e1b031a3 	lsrs	r3, r3, #3
   263f4:	e54e1001 	strb	r1, [lr, #-1]
   263f8:	1afffff2 	bne	263c8 <CString::ftoa(char*, double, unsigned int)+0x16c>
   263fc:	e28d0004 	add	r0, sp, #4
   26400:	e5ce3000 	strb	r3, [lr]
   26404:	ebfff277 	bl	22de8 <strlen>
   26408:	e0566000 	subs	r6, r6, r0
   2640c:	0a000005 	beq	26428 <CString::ftoa(char*, double, unsigned int)+0x1cc>
   26410:	e3a02030 	mov	r2, #48	; 0x30
   26414:	e0883006 	add	r3, r8, r6
   26418:	e5e82001 	strb	r2, [r8, #1]!
   2641c:	e1580003 	cmp	r8, r3
   26420:	1afffffc 	bne	26418 <CString::ftoa(char*, double, unsigned int)+0x1bc>
   26424:	e0877006 	add	r7, r7, r6
   26428:	e28d1004 	add	r1, sp, #4
   2642c:	e1a00007 	mov	r0, r7
   26430:	ebfff291 	bl	22e7c <strcpy>
   26434:	e1a00005 	mov	r0, r5
   26438:	e28dd010 	add	sp, sp, #16
   2643c:	ecbd8b02 	vpop	{d8}
   26440:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26444:	e1a00007 	mov	r0, r7
   26448:	e3001e18 	movw	r1, #3608	; 0xe18
   2644c:	e3401003 	movt	r1, #3
   26450:	ebfff289 	bl	22e7c <strcpy>
   26454:	e1a00005 	mov	r0, r5
   26458:	e28dd010 	add	sp, sp, #16
   2645c:	ecbd8b02 	vpop	{d8}
   26460:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26464:	ee172a90 	vmov	r2, s15
   26468:	e3a03001 	mov	r3, #1
   2646c:	eaffff95 	b	262c8 <CString::ftoa(char*, double, unsigned int)+0x6c>
   26470:	ee172a90 	vmov	r2, s15
   26474:	e3a03001 	mov	r3, #1
   26478:	ee171a90 	vmov	r1, s15
   2647c:	eaffffcd 	b	263b8 <CString::ftoa(char*, double, unsigned int)+0x15c>
   26480:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
   26484:	eaffffbc 	b	2637c <CString::ftoa(char*, double, unsigned int)+0x120>
   26488:	ffe00000 	.word	0xffe00000
   2648c:	41efffff 	.word	0x41efffff

00026490 <CString::FormatV(char const*, std::__va_list)>:
   26490:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26494:	e1a06000 	mov	r6, r0
   26498:	e5900004 	ldr	r0, [r0, #4]
   2649c:	e24dd024 	sub	sp, sp, #36	; 0x24
   264a0:	e1a05001 	mov	r5, r1
   264a4:	e3500000 	cmp	r0, #0
   264a8:	e1a09002 	mov	r9, r2
   264ac:	0a000000 	beq	264b4 <CString::FormatV(char const*, std::__va_list)+0x24>
   264b0:	ebffeebb 	bl	21fa4 <operator delete[](void*)>
   264b4:	e3a00040 	mov	r0, #64	; 0x40
   264b8:	e30c3ccd 	movw	r3, #52429	; 0xcccd
   264bc:	e34c3ccc 	movt	r3, #52428	; 0xcccc
   264c0:	e5860008 	str	r0, [r6, #8]
   264c4:	e58d3004 	str	r3, [sp, #4]
   264c8:	ebffeeb3 	bl	21f9c <operator new[](unsigned int)>
   264cc:	e5860004 	str	r0, [r6, #4]
   264d0:	e586000c 	str	r0, [r6, #12]
   264d4:	e1d540d0 	ldrsb	r4, [r5]
   264d8:	e3540000 	cmp	r4, #0
   264dc:	0a00008a 	beq	2670c <CString::FormatV(char const*, std::__va_list)+0x27c>
   264e0:	e3540025 	cmp	r4, #37	; 0x25
   264e4:	13a01001 	movne	r1, #1
   264e8:	11a00006 	movne	r0, r6
   264ec:	1a000129 	bne	26998 <CString::FormatV(char const*, std::__va_list)+0x508>
   264f0:	e1d570d1 	ldrsb	r7, [r5, #1]
   264f4:	e3570025 	cmp	r7, #37	; 0x25
   264f8:	0a00013c 	beq	269f0 <CString::FormatV(char const*, std::__va_list)+0x560>
   264fc:	e357002d 	cmp	r7, #45	; 0x2d
   26500:	e3a04000 	mov	r4, #0
   26504:	12855001 	addne	r5, r5, #1
   26508:	13a08000 	movne	r8, #0
   2650c:	03a08001 	moveq	r8, #1
   26510:	01d570d2 	ldrsbeq	r7, [r5, #2]
   26514:	02855002 	addeq	r5, r5, #2
   26518:	e3570030 	cmp	r7, #48	; 0x30
   2651c:	03a03001 	moveq	r3, #1
   26520:	13a03000 	movne	r3, #0
   26524:	058d3000 	streq	r3, [sp]
   26528:	01d570d1 	ldrsbeq	r7, [r5, #1]
   2652c:	00855003 	addeq	r5, r5, r3
   26530:	158d3000 	strne	r3, [sp]
   26534:	e2473030 	sub	r3, r7, #48	; 0x30
   26538:	e6ef3073 	uxtb	r3, r3
   2653c:	e3530009 	cmp	r3, #9
   26540:	8a000007 	bhi	26564 <CString::FormatV(char const*, std::__va_list)+0xd4>
   26544:	e3a0200a 	mov	r2, #10
   26548:	e0247492 	mla	r4, r2, r4, r7
   2654c:	e1f570d1 	ldrsb	r7, [r5, #1]!
   26550:	e2473030 	sub	r3, r7, #48	; 0x30
   26554:	e2444030 	sub	r4, r4, #48	; 0x30
   26558:	e6ef3073 	uxtb	r3, r3
   2655c:	e3530009 	cmp	r3, #9
   26560:	9afffff8 	bls	26548 <CString::FormatV(char const*, std::__va_list)+0xb8>
   26564:	e357002e 	cmp	r7, #46	; 0x2e
   26568:	0a000110 	beq	269b0 <CString::FormatV(char const*, std::__va_list)+0x520>
   2656c:	e1d500d0 	ldrsb	r0, [r5]
   26570:	e3a01006 	mov	r1, #6
   26574:	e350006c 	cmp	r0, #108	; 0x6c
   26578:	03a02001 	moveq	r2, #1
   2657c:	01d500d1 	ldrsbeq	r0, [r5, #1]
   26580:	00855002 	addeq	r5, r5, r2
   26584:	e2403058 	sub	r3, r0, #88	; 0x58
   26588:	e3530020 	cmp	r3, #32
   2658c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   26590:	ea0000f5 	b	2696c <CString::FormatV(char const*, std::__va_list)+0x4dc>
   26594:	000268f4 	.word	0x000268f4
   26598:	0002696c 	.word	0x0002696c
   2659c:	0002696c 	.word	0x0002696c
   265a0:	0002696c 	.word	0x0002696c
   265a4:	0002696c 	.word	0x0002696c
   265a8:	0002696c 	.word	0x0002696c
   265ac:	0002696c 	.word	0x0002696c
   265b0:	0002696c 	.word	0x0002696c
   265b4:	0002696c 	.word	0x0002696c
   265b8:	0002696c 	.word	0x0002696c
   265bc:	0002696c 	.word	0x0002696c
   265c0:	00026888 	.word	0x00026888
   265c4:	0002678c 	.word	0x0002678c
   265c8:	0002696c 	.word	0x0002696c
   265cc:	0002671c 	.word	0x0002671c
   265d0:	0002696c 	.word	0x0002696c
   265d4:	0002696c 	.word	0x0002696c
   265d8:	0002696c 	.word	0x0002696c
   265dc:	0002696c 	.word	0x0002696c
   265e0:	0002696c 	.word	0x0002696c
   265e4:	0002696c 	.word	0x0002696c
   265e8:	0002696c 	.word	0x0002696c
   265ec:	0002696c 	.word	0x0002696c
   265f0:	00026618 	.word	0x00026618
   265f4:	0002696c 	.word	0x0002696c
   265f8:	0002696c 	.word	0x0002696c
   265fc:	0002696c 	.word	0x0002696c
   26600:	00026904 	.word	0x00026904
   26604:	0002696c 	.word	0x0002696c
   26608:	000268fc 	.word	0x000268fc
   2660c:	0002696c 	.word	0x0002696c
   26610:	0002696c 	.word	0x0002696c
   26614:	000268f4 	.word	0x000268f4
   26618:	e3a0a008 	mov	sl, #8
   2661c:	e599c000 	ldr	ip, [r9]
   26620:	e2899004 	add	r9, r9, #4
   26624:	e15c000a 	cmp	ip, sl
   26628:	23a03001 	movcs	r3, #1
   2662c:	3a00016e 	bcc	26bec <CString::FormatV(char const*, std::__va_list)+0x75c>
   26630:	e003039a 	mul	r3, sl, r3
   26634:	e731f31c 	udiv	r1, ip, r3
   26638:	e15a0001 	cmp	sl, r1
   2663c:	e1a02001 	mov	r2, r1
   26640:	9afffffa 	bls	26630 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   26644:	e3500058 	cmp	r0, #88	; 0x58
   26648:	e28d7008 	add	r7, sp, #8
   2664c:	13a0b057 	movne	fp, #87	; 0x57
   26650:	03a0b037 	moveq	fp, #55	; 0x37
   26654:	e1a0e007 	mov	lr, r7
   26658:	ea000001 	b	26664 <CString::FormatV(char const*, std::__va_list)+0x1d4>
   2665c:	e731f31c 	udiv	r1, ip, r3
   26660:	e1a02001 	mov	r2, r1
   26664:	e06cc193 	mls	ip, r3, r1, ip
   26668:	e3520009 	cmp	r2, #9
   2666c:	e733fa13 	udiv	r3, r3, sl
   26670:	e08b0002 	add	r0, fp, r2
   26674:	e2822030 	add	r2, r2, #48	; 0x30
   26678:	e28ee001 	add	lr, lr, #1
   2667c:	e6af0070 	sxtb	r0, r0
   26680:	96af0072 	sxtbls	r0, r2
   26684:	e3530000 	cmp	r3, #0
   26688:	e54e0001 	strb	r0, [lr, #-1]
   2668c:	1afffff2 	bne	2665c <CString::FormatV(char const*, std::__va_list)+0x1cc>
   26690:	e1a00007 	mov	r0, r7
   26694:	e5ce3000 	strb	r3, [lr]
   26698:	ebfff1d2 	bl	22de8 <strlen>
   2669c:	e3580000 	cmp	r8, #0
   266a0:	e1a0a000 	mov	sl, r0
   266a4:	1a0000f4 	bne	26a7c <CString::FormatV(char const*, std::__va_list)+0x5ec>
   266a8:	e1500004 	cmp	r0, r4
   266ac:	2a00000f 	bcs	266f0 <CString::FormatV(char const*, std::__va_list)+0x260>
   266b0:	e59d3000 	ldr	r3, [sp]
   266b4:	e0444000 	sub	r4, r4, r0
   266b8:	e1a01004 	mov	r1, r4
   266bc:	e1a00006 	mov	r0, r6
   266c0:	e3530000 	cmp	r3, #0
   266c4:	03a08020 	moveq	r8, #32
   266c8:	13a08030 	movne	r8, #48	; 0x30
   266cc:	ebfffe1e 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   266d0:	e2443001 	sub	r3, r4, #1
   266d4:	e596200c 	ldr	r2, [r6, #12]
   266d8:	e2433001 	sub	r3, r3, #1
   266dc:	e3730001 	cmn	r3, #1
   266e0:	e2821001 	add	r1, r2, #1
   266e4:	e586100c 	str	r1, [r6, #12]
   266e8:	e5c28000 	strb	r8, [r2]
   266ec:	1afffff8 	bne	266d4 <CString::FormatV(char const*, std::__va_list)+0x244>
   266f0:	e1a01007 	mov	r1, r7
   266f4:	e1a00006 	mov	r0, r6
   266f8:	ebfffea2 	bl	26188 <CString::PutString(char const*)>
   266fc:	e2855001 	add	r5, r5, #1
   26700:	e1d540d0 	ldrsb	r4, [r5]
   26704:	e3540000 	cmp	r4, #0
   26708:	1affff74 	bne	264e0 <CString::FormatV(char const*, std::__va_list)+0x50>
   2670c:	e596300c 	ldr	r3, [r6, #12]
   26710:	e5c34000 	strb	r4, [r3]
   26714:	e28dd024 	add	sp, sp, #36	; 0x24
   26718:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2671c:	e2893007 	add	r3, r9, #7
   26720:	e28d7008 	add	r7, sp, #8
   26724:	e3c33007 	bic	r3, r3, #7
   26728:	e1a00007 	mov	r0, r7
   2672c:	e2839008 	add	r9, r3, #8
   26730:	ed930b00 	vldr	d0, [r3]
   26734:	ebfffec8 	bl	2625c <CString::ftoa(char*, double, unsigned int)>
   26738:	e1a00007 	mov	r0, r7
   2673c:	ebfff1a9 	bl	22de8 <strlen>
   26740:	e3580000 	cmp	r8, #0
   26744:	e1a0a000 	mov	sl, r0
   26748:	1a000108 	bne	26b70 <CString::FormatV(char const*, std::__va_list)+0x6e0>
   2674c:	e1500004 	cmp	r0, r4
   26750:	2affffe6 	bcs	266f0 <CString::FormatV(char const*, std::__va_list)+0x260>
   26754:	e0444000 	sub	r4, r4, r0
   26758:	e1a00006 	mov	r0, r6
   2675c:	e1a01004 	mov	r1, r4
   26760:	ebfffdf9 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26764:	e2443001 	sub	r3, r4, #1
   26768:	e3a00020 	mov	r0, #32
   2676c:	e596200c 	ldr	r2, [r6, #12]
   26770:	e2433001 	sub	r3, r3, #1
   26774:	e3730001 	cmn	r3, #1
   26778:	e2821001 	add	r1, r2, #1
   2677c:	e586100c 	str	r1, [r6, #12]
   26780:	e5c20000 	strb	r0, [r2]
   26784:	1afffff8 	bne	2676c <CString::FormatV(char const*, std::__va_list)+0x2dc>
   26788:	eaffffd8 	b	266f0 <CString::FormatV(char const*, std::__va_list)+0x260>
   2678c:	e5990000 	ldr	r0, [r9]
   26790:	e2899004 	add	r9, r9, #4
   26794:	e3500000 	cmp	r0, #0
   26798:	b2600000 	rsblt	r0, r0, #0
   2679c:	b3a0b001 	movlt	fp, #1
   267a0:	a3a0b000 	movge	fp, #0
   267a4:	e3500009 	cmp	r0, #9
   267a8:	e1a0a00b 	mov	sl, fp
   267ac:	e1a0e000 	mov	lr, r0
   267b0:	c3a03001 	movgt	r3, #1
   267b4:	c3a0100a 	movgt	r1, #10
   267b8:	da000108 	ble	26be0 <CString::FormatV(char const*, std::__va_list)+0x750>
   267bc:	e0030391 	mul	r3, r1, r3
   267c0:	e732f310 	udiv	r2, r0, r3
   267c4:	e3520009 	cmp	r2, #9
   267c8:	8afffffb 	bhi	267bc <CString::FormatV(char const*, std::__va_list)+0x32c>
   267cc:	e28d7008 	add	r7, sp, #8
   267d0:	e58d8000 	str	r8, [sp]
   267d4:	e730f310 	udiv	r0, r0, r3
   267d8:	e1a0c007 	mov	ip, r7
   267dc:	e59d8004 	ldr	r8, [sp, #4]
   267e0:	ea000001 	b	267ec <CString::FormatV(char const*, std::__va_list)+0x35c>
   267e4:	e730f31e 	udiv	r0, lr, r3
   267e8:	e1a02000 	mov	r2, r0
   267ec:	e3520009 	cmp	r2, #9
   267f0:	e2821057 	add	r1, r2, #87	; 0x57
   267f4:	e2822030 	add	r2, r2, #48	; 0x30
   267f8:	e06ee093 	mls	lr, r3, r0, lr
   267fc:	e6af1071 	sxtb	r1, r1
   26800:	e28cc001 	add	ip, ip, #1
   26804:	96af1072 	sxtbls	r1, r2
   26808:	e0832398 	umull	r2, r3, r8, r3
   2680c:	e1b031a3 	lsrs	r3, r3, #3
   26810:	e54c1001 	strb	r1, [ip, #-1]
   26814:	1afffff2 	bne	267e4 <CString::FormatV(char const*, std::__va_list)+0x354>
   26818:	e59d8000 	ldr	r8, [sp]
   2681c:	e1a00007 	mov	r0, r7
   26820:	e5cc3000 	strb	r3, [ip]
   26824:	ebfff16f 	bl	22de8 <strlen>
   26828:	e3580000 	cmp	r8, #0
   2682c:	e080b00b 	add	fp, r0, fp
   26830:	0a000077 	beq	26a14 <CString::FormatV(char const*, std::__va_list)+0x584>
   26834:	e35a0000 	cmp	sl, #0
   26838:	1a0000df 	bne	26bbc <CString::FormatV(char const*, std::__va_list)+0x72c>
   2683c:	e1a01007 	mov	r1, r7
   26840:	e1a00006 	mov	r0, r6
   26844:	ebfffe4f 	bl	26188 <CString::PutString(char const*)>
   26848:	e15b0004 	cmp	fp, r4
   2684c:	2affffaa 	bcs	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   26850:	e044b00b 	sub	fp, r4, fp
   26854:	e1a00006 	mov	r0, r6
   26858:	e1a0100b 	mov	r1, fp
   2685c:	ebfffdba 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26860:	e24b3001 	sub	r3, fp, #1
   26864:	e3a00020 	mov	r0, #32
   26868:	e596200c 	ldr	r2, [r6, #12]
   2686c:	e2433001 	sub	r3, r3, #1
   26870:	e3730001 	cmn	r3, #1
   26874:	e2821001 	add	r1, r2, #1
   26878:	e586100c 	str	r1, [r6, #12]
   2687c:	e5c20000 	strb	r0, [r2]
   26880:	1afffff8 	bne	26868 <CString::FormatV(char const*, std::__va_list)+0x3d8>
   26884:	eaffff9c 	b	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   26888:	e3580000 	cmp	r8, #0
   2688c:	e2897004 	add	r7, r9, #4
   26890:	e1d980d0 	ldrsb	r8, [r9]
   26894:	1a00008b 	bne	26ac8 <CString::FormatV(char const*, std::__va_list)+0x638>
   26898:	e3540001 	cmp	r4, #1
   2689c:	9a00000b 	bls	268d0 <CString::FormatV(char const*, std::__va_list)+0x440>
   268a0:	e2441001 	sub	r1, r4, #1
   268a4:	e1a00006 	mov	r0, r6
   268a8:	ebfffda7 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   268ac:	e2444002 	sub	r4, r4, #2
   268b0:	e3a01020 	mov	r1, #32
   268b4:	e596300c 	ldr	r3, [r6, #12]
   268b8:	e2444001 	sub	r4, r4, #1
   268bc:	e3740001 	cmn	r4, #1
   268c0:	e2832001 	add	r2, r3, #1
   268c4:	e586200c 	str	r2, [r6, #12]
   268c8:	e5c31000 	strb	r1, [r3]
   268cc:	1afffff8 	bne	268b4 <CString::FormatV(char const*, std::__va_list)+0x424>
   268d0:	e3a01001 	mov	r1, #1
   268d4:	e1a00006 	mov	r0, r6
   268d8:	ebfffd9b 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   268dc:	e596300c 	ldr	r3, [r6, #12]
   268e0:	e1a09007 	mov	r9, r7
   268e4:	e2832001 	add	r2, r3, #1
   268e8:	e586200c 	str	r2, [r6, #12]
   268ec:	e5c38000 	strb	r8, [r3]
   268f0:	eaffff81 	b	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   268f4:	e3a0a010 	mov	sl, #16
   268f8:	eaffff47 	b	2661c <CString::FormatV(char const*, std::__va_list)+0x18c>
   268fc:	e3a0a00a 	mov	sl, #10
   26900:	eaffff45 	b	2661c <CString::FormatV(char const*, std::__va_list)+0x18c>
   26904:	e599a000 	ldr	sl, [r9]
   26908:	e2899004 	add	r9, r9, #4
   2690c:	e1a0000a 	mov	r0, sl
   26910:	ebfff134 	bl	22de8 <strlen>
   26914:	e3580000 	cmp	r8, #0
   26918:	e1a07000 	mov	r7, r0
   2691c:	1a000080 	bne	26b24 <CString::FormatV(char const*, std::__va_list)+0x694>
   26920:	e1500004 	cmp	r0, r4
   26924:	2a00000c 	bcs	2695c <CString::FormatV(char const*, std::__va_list)+0x4cc>
   26928:	e0444000 	sub	r4, r4, r0
   2692c:	e1a00006 	mov	r0, r6
   26930:	e1a01004 	mov	r1, r4
   26934:	ebfffd84 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26938:	e2443001 	sub	r3, r4, #1
   2693c:	e3a00020 	mov	r0, #32
   26940:	e596200c 	ldr	r2, [r6, #12]
   26944:	e2433001 	sub	r3, r3, #1
   26948:	e3730001 	cmn	r3, #1
   2694c:	e2821001 	add	r1, r2, #1
   26950:	e586100c 	str	r1, [r6, #12]
   26954:	e5c20000 	strb	r0, [r2]
   26958:	1afffff8 	bne	26940 <CString::FormatV(char const*, std::__va_list)+0x4b0>
   2695c:	e1a0100a 	mov	r1, sl
   26960:	e1a00006 	mov	r0, r6
   26964:	ebfffe07 	bl	26188 <CString::PutString(char const*)>
   26968:	eaffff63 	b	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   2696c:	e3a01001 	mov	r1, #1
   26970:	e1a00006 	mov	r0, r6
   26974:	ebfffd74 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26978:	e596300c 	ldr	r3, [r6, #12]
   2697c:	e3a01001 	mov	r1, #1
   26980:	e3a02025 	mov	r2, #37	; 0x25
   26984:	e0830001 	add	r0, r3, r1
   26988:	e586000c 	str	r0, [r6, #12]
   2698c:	e1a00006 	mov	r0, r6
   26990:	e5c32000 	strb	r2, [r3]
   26994:	e1d540d0 	ldrsb	r4, [r5]
   26998:	ebfffd6b 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2699c:	e596300c 	ldr	r3, [r6, #12]
   269a0:	e2832001 	add	r2, r3, #1
   269a4:	e586200c 	str	r2, [r6, #12]
   269a8:	e5c34000 	strb	r4, [r3]
   269ac:	eaffff52 	b	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   269b0:	e1d500d1 	ldrsb	r0, [r5, #1]
   269b4:	e3a01000 	mov	r1, #0
   269b8:	e2855001 	add	r5, r5, #1
   269bc:	e2403030 	sub	r3, r0, #48	; 0x30
   269c0:	e6ef3073 	uxtb	r3, r3
   269c4:	e3530009 	cmp	r3, #9
   269c8:	8afffee9 	bhi	26574 <CString::FormatV(char const*, std::__va_list)+0xe4>
   269cc:	e3a0200a 	mov	r2, #10
   269d0:	e0210192 	mla	r1, r2, r1, r0
   269d4:	e1f500d1 	ldrsb	r0, [r5, #1]!
   269d8:	e2403030 	sub	r3, r0, #48	; 0x30
   269dc:	e2411030 	sub	r1, r1, #48	; 0x30
   269e0:	e6ef3073 	uxtb	r3, r3
   269e4:	e3530009 	cmp	r3, #9
   269e8:	9afffff8 	bls	269d0 <CString::FormatV(char const*, std::__va_list)+0x540>
   269ec:	eafffee0 	b	26574 <CString::FormatV(char const*, std::__va_list)+0xe4>
   269f0:	e3a01001 	mov	r1, #1
   269f4:	e1a00006 	mov	r0, r6
   269f8:	ebfffd53 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   269fc:	e596300c 	ldr	r3, [r6, #12]
   26a00:	e2855002 	add	r5, r5, #2
   26a04:	e2832001 	add	r2, r3, #1
   26a08:	e586200c 	str	r2, [r6, #12]
   26a0c:	e5c37000 	strb	r7, [r3]
   26a10:	eafffeaf 	b	264d4 <CString::FormatV(char const*, std::__va_list)+0x44>
   26a14:	e15b0004 	cmp	fp, r4
   26a18:	2a00000c 	bcs	26a50 <CString::FormatV(char const*, std::__va_list)+0x5c0>
   26a1c:	e044b00b 	sub	fp, r4, fp
   26a20:	e1a00006 	mov	r0, r6
   26a24:	e1a0100b 	mov	r1, fp
   26a28:	ebfffd47 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26a2c:	e24b3001 	sub	r3, fp, #1
   26a30:	e3a00020 	mov	r0, #32
   26a34:	e596200c 	ldr	r2, [r6, #12]
   26a38:	e2433001 	sub	r3, r3, #1
   26a3c:	e3730001 	cmn	r3, #1
   26a40:	e2821001 	add	r1, r2, #1
   26a44:	e586100c 	str	r1, [r6, #12]
   26a48:	e5c20000 	strb	r0, [r2]
   26a4c:	1afffff8 	bne	26a34 <CString::FormatV(char const*, std::__va_list)+0x5a4>
   26a50:	e35a0000 	cmp	sl, #0
   26a54:	0affff25 	beq	266f0 <CString::FormatV(char const*, std::__va_list)+0x260>
   26a58:	e3a01001 	mov	r1, #1
   26a5c:	e1a00006 	mov	r0, r6
   26a60:	ebfffd39 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26a64:	e596300c 	ldr	r3, [r6, #12]
   26a68:	e3a0202d 	mov	r2, #45	; 0x2d
   26a6c:	e2831001 	add	r1, r3, #1
   26a70:	e586100c 	str	r1, [r6, #12]
   26a74:	e5c32000 	strb	r2, [r3]
   26a78:	eaffff1c 	b	266f0 <CString::FormatV(char const*, std::__va_list)+0x260>
   26a7c:	e1a01007 	mov	r1, r7
   26a80:	e1a00006 	mov	r0, r6
   26a84:	ebfffdbf 	bl	26188 <CString::PutString(char const*)>
   26a88:	e15a0004 	cmp	sl, r4
   26a8c:	2affff1a 	bcs	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   26a90:	e044400a 	sub	r4, r4, sl
   26a94:	e1a00006 	mov	r0, r6
   26a98:	e1a01004 	mov	r1, r4
   26a9c:	ebfffd2a 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26aa0:	e2443001 	sub	r3, r4, #1
   26aa4:	e3a00020 	mov	r0, #32
   26aa8:	e596200c 	ldr	r2, [r6, #12]
   26aac:	e2433001 	sub	r3, r3, #1
   26ab0:	e3730001 	cmn	r3, #1
   26ab4:	e2821001 	add	r1, r2, #1
   26ab8:	e586100c 	str	r1, [r6, #12]
   26abc:	e5c20000 	strb	r0, [r2]
   26ac0:	1afffff8 	bne	26aa8 <CString::FormatV(char const*, std::__va_list)+0x618>
   26ac4:	eaffff0c 	b	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   26ac8:	e3a01001 	mov	r1, #1
   26acc:	e1a00006 	mov	r0, r6
   26ad0:	ebfffd1d 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26ad4:	e596300c 	ldr	r3, [r6, #12]
   26ad8:	e3540001 	cmp	r4, #1
   26adc:	e2832001 	add	r2, r3, #1
   26ae0:	e586200c 	str	r2, [r6, #12]
   26ae4:	e5c38000 	strb	r8, [r3]
   26ae8:	9a00000b 	bls	26b1c <CString::FormatV(char const*, std::__va_list)+0x68c>
   26aec:	e2441001 	sub	r1, r4, #1
   26af0:	e1a00006 	mov	r0, r6
   26af4:	ebfffd14 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26af8:	e2444002 	sub	r4, r4, #2
   26afc:	e3a01020 	mov	r1, #32
   26b00:	e596300c 	ldr	r3, [r6, #12]
   26b04:	e2444001 	sub	r4, r4, #1
   26b08:	e3740001 	cmn	r4, #1
   26b0c:	e2832001 	add	r2, r3, #1
   26b10:	e586200c 	str	r2, [r6, #12]
   26b14:	e5c31000 	strb	r1, [r3]
   26b18:	1afffff8 	bne	26b00 <CString::FormatV(char const*, std::__va_list)+0x670>
   26b1c:	e1a09007 	mov	r9, r7
   26b20:	eafffef5 	b	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   26b24:	e1a0100a 	mov	r1, sl
   26b28:	e1a00006 	mov	r0, r6
   26b2c:	ebfffd95 	bl	26188 <CString::PutString(char const*)>
   26b30:	e1570004 	cmp	r7, r4
   26b34:	2afffef0 	bcs	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   26b38:	e0444007 	sub	r4, r4, r7
   26b3c:	e1a00006 	mov	r0, r6
   26b40:	e1a01004 	mov	r1, r4
   26b44:	ebfffd00 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26b48:	e2443001 	sub	r3, r4, #1
   26b4c:	e3a00020 	mov	r0, #32
   26b50:	e596200c 	ldr	r2, [r6, #12]
   26b54:	e2433001 	sub	r3, r3, #1
   26b58:	e3730001 	cmn	r3, #1
   26b5c:	e2821001 	add	r1, r2, #1
   26b60:	e586100c 	str	r1, [r6, #12]
   26b64:	e5c20000 	strb	r0, [r2]
   26b68:	1afffff8 	bne	26b50 <CString::FormatV(char const*, std::__va_list)+0x6c0>
   26b6c:	eafffee2 	b	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   26b70:	e1a01007 	mov	r1, r7
   26b74:	e1a00006 	mov	r0, r6
   26b78:	ebfffd82 	bl	26188 <CString::PutString(char const*)>
   26b7c:	e15a0004 	cmp	sl, r4
   26b80:	2afffedd 	bcs	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   26b84:	e044400a 	sub	r4, r4, sl
   26b88:	e1a00006 	mov	r0, r6
   26b8c:	e1a01004 	mov	r1, r4
   26b90:	ebfffced 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26b94:	e2443001 	sub	r3, r4, #1
   26b98:	e3a00020 	mov	r0, #32
   26b9c:	e596200c 	ldr	r2, [r6, #12]
   26ba0:	e2433001 	sub	r3, r3, #1
   26ba4:	e3730001 	cmn	r3, #1
   26ba8:	e2821001 	add	r1, r2, #1
   26bac:	e586100c 	str	r1, [r6, #12]
   26bb0:	e5c20000 	strb	r0, [r2]
   26bb4:	1afffff8 	bne	26b9c <CString::FormatV(char const*, std::__va_list)+0x70c>
   26bb8:	eafffecf 	b	266fc <CString::FormatV(char const*, std::__va_list)+0x26c>
   26bbc:	e3a01001 	mov	r1, #1
   26bc0:	e1a00006 	mov	r0, r6
   26bc4:	ebfffce0 	bl	25f4c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26bc8:	e596300c 	ldr	r3, [r6, #12]
   26bcc:	e3a0202d 	mov	r2, #45	; 0x2d
   26bd0:	e2831001 	add	r1, r3, #1
   26bd4:	e586100c 	str	r1, [r6, #12]
   26bd8:	e5c32000 	strb	r2, [r3]
   26bdc:	eaffff16 	b	2683c <CString::FormatV(char const*, std::__va_list)+0x3ac>
   26be0:	e1a02000 	mov	r2, r0
   26be4:	e3a03001 	mov	r3, #1
   26be8:	eafffef7 	b	267cc <CString::FormatV(char const*, std::__va_list)+0x33c>
   26bec:	e1a0200c 	mov	r2, ip
   26bf0:	e3a03001 	mov	r3, #1
   26bf4:	e1a0100c 	mov	r1, ip
   26bf8:	eafffe91 	b	26644 <CString::FormatV(char const*, std::__va_list)+0x1b4>

00026bfc <CString::Format(char const*, ...)>:
   26bfc:	e92d000e 	push	{r1, r2, r3}
   26c00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   26c04:	e24dd008 	sub	sp, sp, #8
   26c08:	e28d3010 	add	r3, sp, #16
   26c0c:	e1a02003 	mov	r2, r3
   26c10:	e59d100c 	ldr	r1, [sp, #12]
   26c14:	e58d3004 	str	r3, [sp, #4]
   26c18:	ebfffe1c 	bl	26490 <CString::FormatV(char const*, std::__va_list)>
   26c1c:	e28dd008 	add	sp, sp, #8
   26c20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   26c24:	e28dd00c 	add	sp, sp, #12
   26c28:	e12fff1e 	bx	lr
   26c2c:	00000000 	andeq	r0, r0, r0

00026c30 <DelayLoop>:
   26c30:	e2500001 	subs	r0, r0, #1
   26c34:	8afffffd 	bhi	26c30 <DelayLoop>
   26c38:	e1a0f00e 	mov	pc, lr

00026c3c <CExceptionHandler::CExceptionHandler()>:
   26c3c:	e92d4070 	push	{r4, r5, r6, lr}
   26c40:	e3025898 	movw	r5, #10392	; 0x2898
   26c44:	e3405143 	movt	r5, #323	; 0x143
   26c48:	e1a04000 	mov	r4, r0
   26c4c:	e5953000 	ldr	r3, [r5]
   26c50:	e3530000 	cmp	r3, #0
   26c54:	0a000005 	beq	26c70 <CExceptionHandler::CExceptionHandler()+0x34>
   26c58:	e3001e2c 	movw	r1, #3628	; 0xe2c
   26c5c:	e3401003 	movt	r1, #3
   26c60:	e30f05ac 	movw	r0, #62892	; 0xf5ac
   26c64:	e3400002 	movt	r0, #2
   26c68:	e3a0202e 	mov	r2, #46	; 0x2e
   26c6c:	ebfff7cb 	bl	24ba0 <assertion_failed>
   26c70:	e59f1048 	ldr	r1, [pc, #72]	; 26cc0 <CExceptionHandler::CExceptionHandler()+0x84>
   26c74:	e3a00000 	mov	r0, #0
   26c78:	e59f2044 	ldr	r2, [pc, #68]	; 26cc4 <CExceptionHandler::CExceptionHandler()+0x88>
   26c7c:	e59f3044 	ldr	r3, [pc, #68]	; 26cc8 <CExceptionHandler::CExceptionHandler()+0x8c>
   26c80:	e1a01141 	asr	r1, r1, #2
   26c84:	e5854000 	str	r4, [r5]
   26c88:	e1a02142 	asr	r2, r2, #2
   26c8c:	e2411002 	sub	r1, r1, #2
   26c90:	e1a03143 	asr	r3, r3, #2
   26c94:	e2422002 	sub	r2, r2, #2
   26c98:	e2433002 	sub	r3, r3, #2
   26c9c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   26ca0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   26ca4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   26ca8:	e5801004 	str	r1, [r0, #4]
   26cac:	e580200c 	str	r2, [r0, #12]
   26cb0:	e5803010 	str	r3, [r0, #16]
   26cb4:	ebffed05 	bl	220d0 <SyncDataAndInstructionCache>
   26cb8:	e1a00004 	mov	r0, r4
   26cbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   26cc0:	00026e90 	.word	0x00026e90
   26cc4:	00026ec8 	.word	0x00026ec8
   26cc8:	00026f04 	.word	0x00026f04

00026ccc <CExceptionHandler::~CExceptionHandler()>:
   26ccc:	e3023898 	movw	r3, #10392	; 0x2898
   26cd0:	e3403143 	movt	r3, #323	; 0x143
   26cd4:	e3a02000 	mov	r2, #0
   26cd8:	e5832000 	str	r2, [r3]
   26cdc:	e12fff1e 	bx	lr

00026ce0 <CExceptionHandler::Throw(unsigned int)>:
   26ce0:	e92d4010 	push	{r4, lr}
   26ce4:	e1a04001 	mov	r4, r1
   26ce8:	e24dd008 	sub	sp, sp, #8
   26cec:	ebfff92d 	bl	251a8 <CLogger::Get()>
   26cf0:	e3012b9c 	movw	r2, #7068	; 0x1b9c
   26cf4:	e3402003 	movt	r2, #3
   26cf8:	e3003e44 	movw	r3, #3652	; 0xe44
   26cfc:	e3403003 	movt	r3, #3
   26d00:	e3001e24 	movw	r1, #3620	; 0xe24
   26d04:	e3401003 	movt	r1, #3
   26d08:	e792c104 	ldr	ip, [r2, r4, lsl #2]
   26d0c:	e3a02000 	mov	r2, #0
   26d10:	e58dc000 	str	ip, [sp]
   26d14:	ebfffa00 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26d18:	e28dd008 	add	sp, sp, #8
   26d1c:	e8bd8010 	pop	{r4, pc}

00026d20 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   26d20:	e3510002 	cmp	r1, #2
   26d24:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   26d28:	e1a05001 	mov	r5, r1
   26d2c:	e24dd024 	sub	sp, sp, #36	; 0x24
   26d30:	e1a04002 	mov	r4, r2
   26d34:	0a000027 	beq	26dd8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb8>
   26d38:	e3510003 	cmp	r1, #3
   26d3c:	0a000022 	beq	26dcc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
   26d40:	e3a07000 	mov	r7, #0
   26d44:	e1a08007 	mov	r8, r7
   26d48:	e3540000 	cmp	r4, #0
   26d4c:	0a000024 	beq	26de4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   26d50:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   26d54:	e3001e24 	movw	r1, #3620	; 0xe24
   26d58:	e3401003 	movt	r1, #3
   26d5c:	e203301f 	and	r3, r3, #31
   26d60:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
   26d64:	e3530012 	cmp	r3, #18
   26d68:	e5949040 	ldr	r9, [r4, #64]	; 0x40
   26d6c:	08940240 	ldmeq	r4, {r6, r9}
   26d70:	e1a00006 	mov	r0, r6
   26d74:	ebfff81a 	bl	24de4 <debug_stacktrace(unsigned int const*, char const*)>
   26d78:	ebfff90a 	bl	251a8 <CLogger::Get()>
   26d7c:	e3013b9c 	movw	r3, #7068	; 0x1b9c
   26d80:	e3403003 	movt	r3, #3
   26d84:	e594e044 	ldr	lr, [r4, #68]	; 0x44
   26d88:	e3a02000 	mov	r2, #0
   26d8c:	e594c048 	ldr	ip, [r4, #72]	; 0x48
   26d90:	e3001e24 	movw	r1, #3620	; 0xe24
   26d94:	e3401003 	movt	r1, #3
   26d98:	e7934105 	ldr	r4, [r3, r5, lsl #2]
   26d9c:	e3003e60 	movw	r3, #3680	; 0xe60
   26da0:	e3403003 	movt	r3, #3
   26da4:	e58d9014 	str	r9, [sp, #20]
   26da8:	e58d6010 	str	r6, [sp, #16]
   26dac:	e58d700c 	str	r7, [sp, #12]
   26db0:	e58d8008 	str	r8, [sp, #8]
   26db4:	e58d4000 	str	r4, [sp]
   26db8:	e58de018 	str	lr, [sp, #24]
   26dbc:	e58dc004 	str	ip, [sp, #4]
   26dc0:	ebfff9d5 	bl	2551c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26dc4:	e28dd024 	add	sp, sp, #36	; 0x24
   26dc8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   26dcc:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
   26dd0:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   26dd4:	eaffffdb 	b	26d48 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   26dd8:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
   26ddc:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   26de0:	eaffffd8 	b	26d48 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   26de4:	e3001e2c 	movw	r1, #3628	; 0xe2c
   26de8:	e3401003 	movt	r1, #3
   26dec:	e3000e54 	movw	r0, #3668	; 0xe54
   26df0:	e3400003 	movt	r0, #3
   26df4:	e3a02067 	mov	r2, #103	; 0x67
   26df8:	ebfff768 	bl	24ba0 <assertion_failed>
   26dfc:	eaffffd3 	b	26d50 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>

00026e00 <CExceptionHandler::Get()>:
   26e00:	e92d4010 	push	{r4, lr}
   26e04:	e3024898 	movw	r4, #10392	; 0x2898
   26e08:	e3404143 	movt	r4, #323	; 0x143
   26e0c:	e5940000 	ldr	r0, [r4]
   26e10:	e3500000 	cmp	r0, #0
   26e14:	18bd8010 	popne	{r4, pc}
   26e18:	e3a0207e 	mov	r2, #126	; 0x7e
   26e1c:	e3001e2c 	movw	r1, #3628	; 0xe2c
   26e20:	e3401003 	movt	r1, #3
   26e24:	e30a03a8 	movw	r0, #41896	; 0xa3a8
   26e28:	e3400002 	movt	r0, #2
   26e2c:	ebfff75b 	bl	24ba0 <assertion_failed>
   26e30:	e5940000 	ldr	r0, [r4]
   26e34:	e8bd8010 	pop	{r4, pc}

00026e38 <ExceptionHandler>:
   26e38:	e92d4070 	push	{r4, r5, r6, lr}
   26e3c:	e3024898 	movw	r4, #10392	; 0x2898
   26e40:	e3404143 	movt	r4, #323	; 0x143
   26e44:	e1a05000 	mov	r5, r0
   26e48:	e1a06001 	mov	r6, r1
   26e4c:	e5940000 	ldr	r0, [r4]
   26e50:	e3500000 	cmp	r0, #0
   26e54:	0a000003 	beq	26e68 <ExceptionHandler+0x30>
   26e58:	e1a02006 	mov	r2, r6
   26e5c:	e1a01005 	mov	r1, r5
   26e60:	e8bd4070 	pop	{r4, r5, r6, lr}
   26e64:	eaffffad 	b	26d20 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   26e68:	e3a0207e 	mov	r2, #126	; 0x7e
   26e6c:	e3001e2c 	movw	r1, #3628	; 0xe2c
   26e70:	e3401003 	movt	r1, #3
   26e74:	e30a03a8 	movw	r0, #41896	; 0xa3a8
   26e78:	e3400002 	movt	r0, #2
   26e7c:	ebfff747 	bl	24ba0 <assertion_failed>
   26e80:	e5940000 	ldr	r0, [r4]
   26e84:	e1a02006 	mov	r2, r6
   26e88:	e1a01005 	mov	r1, r5
   26e8c:	e8bd4070 	pop	{r4, r5, r6, lr}
   26e90:	eaffffa2 	b	26d20 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

00026e94 <UndefinedInstructionStub>:
   26e94:	e24ee004 	sub	lr, lr, #4
   26e98:	e92d4000 	stmfd	sp!, {lr}
   26e9c:	e14fe000 	mrs	lr, SPSR
   26ea0:	e92d4000 	stmfd	sp!, {lr}
   26ea4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   26ea8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   26eac:	e1a0100d 	mov	r1, sp
   26eb0:	f1020012 	cps	#18
   26eb4:	e1a0200d 	mov	r2, sp
   26eb8:	e1a0300e 	mov	r3, lr
   26ebc:	f102001f 	cps	#31
   26ec0:	e1a0d001 	mov	sp, r1
   26ec4:	e92d000c 	push	{r2, r3}
   26ec8:	e1a0100d 	mov	r1, sp
   26ecc:	e3a00001 	mov	r0, #1
   26ed0:	eaffffd8 	b	26e38 <ExceptionHandler>

00026ed4 <PrefetchAbortStub>:
   26ed4:	e24ee004 	sub	lr, lr, #4
   26ed8:	e92d4000 	stmfd	sp!, {lr}
   26edc:	e14fe000 	mrs	lr, SPSR
   26ee0:	e92d4000 	stmfd	sp!, {lr}
   26ee4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   26ee8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   26eec:	e1a0100d 	mov	r1, sp
   26ef0:	f1020012 	cps	#18
   26ef4:	e1a0200d 	mov	r2, sp
   26ef8:	e1a0300e 	mov	r3, lr
   26efc:	f102001f 	cps	#31
   26f00:	e1a0d001 	mov	sp, r1
   26f04:	e92d000c 	push	{r2, r3}
   26f08:	e1a0100d 	mov	r1, sp
   26f0c:	e3a00002 	mov	r0, #2
   26f10:	eaffffc8 	b	26e38 <ExceptionHandler>

00026f14 <DataAbortStub>:
   26f14:	e24ee008 	sub	lr, lr, #8
   26f18:	e92d4000 	stmfd	sp!, {lr}
   26f1c:	e14fe000 	mrs	lr, SPSR
   26f20:	e92d4000 	stmfd	sp!, {lr}
   26f24:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   26f28:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   26f2c:	e1a0100d 	mov	r1, sp
   26f30:	f1020012 	cps	#18
   26f34:	e1a0200d 	mov	r2, sp
   26f38:	e1a0300e 	mov	r3, lr
   26f3c:	f102001f 	cps	#31
   26f40:	e1a0d001 	mov	sp, r1
   26f44:	e92d000c 	push	{r2, r3}
   26f48:	e1a0100d 	mov	r1, sp
   26f4c:	e3a00003 	mov	r0, #3
   26f50:	eaffffb8 	b	26e38 <ExceptionHandler>

00026f54 <IRQStub>:
   26f54:	e24ee004 	sub	lr, lr, #4
   26f58:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   26f5c:	eb00015e 	bl	274dc <InterruptHandler>
   26f60:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

00026f64 <FIQStub>:
   26f64:	e24ee004 	sub	lr, lr, #4
   26f68:	e92d400f 	push	{r0, r1, r2, r3, lr}
   26f6c:	e59f2024 	ldr	r2, [pc, #36]	; 26f98 <FIQStub+0x34>
   26f70:	e5921000 	ldr	r1, [r2]
   26f74:	e3510000 	cmp	r1, #0
   26f78:	0a000002 	beq	26f88 <FIQStub+0x24>
   26f7c:	e5920004 	ldr	r0, [r2, #4]
   26f80:	e12fff31 	blx	r1
   26f84:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
   26f88:	e59f100c 	ldr	r1, [pc, #12]	; 26f9c <FIQStub+0x38>
   26f8c:	e3a00000 	mov	r0, #0
   26f90:	e5810000 	str	r0, [r1]
   26f94:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
   26f98:	00031bac 	.word	0x00031bac
   26f9c:	3f00b20c 	.word	0x3f00b20c

00026fa0 <CInterruptSystem::CInterruptSystem()>:
   26fa0:	e2802f47 	add	r2, r0, #284	; 0x11c
   26fa4:	e1a0c000 	mov	ip, r0
   26fa8:	e2403004 	sub	r3, r0, #4
   26fac:	e3a01000 	mov	r1, #0
   26fb0:	e1a00002 	mov	r0, r2
   26fb4:	e5a31004 	str	r1, [r3, #4]!
   26fb8:	e5a21004 	str	r1, [r2, #4]!
   26fbc:	e1530000 	cmp	r3, r0
   26fc0:	1afffffb 	bne	26fb4 <CInterruptSystem::CInterruptSystem()+0x14>
   26fc4:	e302389c 	movw	r3, #10396	; 0x289c
   26fc8:	e3403143 	movt	r3, #323	; 0x143
   26fcc:	e1a0000c 	mov	r0, ip
   26fd0:	e583c000 	str	ip, [r3]
   26fd4:	e12fff1e 	bx	lr

00026fd8 <CInterruptSystem::~CInterruptSystem()>:
   26fd8:	e302389c 	movw	r3, #10396	; 0x289c
   26fdc:	e3403143 	movt	r3, #323	; 0x143
   26fe0:	e3a02000 	mov	r2, #0
   26fe4:	e5832000 	str	r2, [r3]
   26fe8:	e12fff1e 	bx	lr

00026fec <CInterruptSystem::Initialize()>:
   26fec:	e59f2054 	ldr	r2, [pc, #84]	; 27048 <CInterruptSystem::Initialize()+0x5c>
   26ff0:	e59f3054 	ldr	r3, [pc, #84]	; 2704c <CInterruptSystem::Initialize()+0x60>
   26ff4:	e92d4010 	push	{r4, lr}
   26ff8:	e3a04000 	mov	r4, #0
   26ffc:	e1a02142 	asr	r2, r2, #2
   27000:	e1a03143 	asr	r3, r3, #2
   27004:	e2422002 	sub	r2, r2, #2
   27008:	e2433002 	sub	r3, r3, #2
   2700c:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   27010:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   27014:	e5842018 	str	r2, [r4, #24]
   27018:	e584301c 	str	r3, [r4, #28]
   2701c:	ebffec2b 	bl	220d0 <SyncDataAndInstructionCache>
   27020:	e3a03a0b 	mov	r3, #45056	; 0xb000
   27024:	e3433f00 	movt	r3, #16128	; 0x3f00
   27028:	e3e02000 	mvn	r2, #0
   2702c:	e583420c 	str	r4, [r3, #524]	; 0x20c
   27030:	e583221c 	str	r2, [r3, #540]	; 0x21c
   27034:	e5832220 	str	r2, [r3, #544]	; 0x220
   27038:	e5832224 	str	r2, [r3, #548]	; 0x224
   2703c:	f1080080 	cpsie	i
   27040:	e3a00001 	mov	r0, #1
   27044:	e8bd8010 	pop	{r4, pc}
   27048:	00026f3c 	.word	0x00026f3c
   2704c:	00026f48 	.word	0x00026f48

00027050 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   27050:	e3510047 	cmp	r1, #71	; 0x47
   27054:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27058:	e1a04001 	mov	r4, r1
   2705c:	e1a06002 	mov	r6, r2
   27060:	e1a07003 	mov	r7, r3
   27064:	8a00001a 	bhi	270d4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x84>
   27068:	e3560000 	cmp	r6, #0
   2706c:	0a00001f 	beq	270f0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
   27070:	e3015bac 	movw	r5, #7084	; 0x1bac
   27074:	e3405003 	movt	r5, #3
   27078:	e5953000 	ldr	r3, [r5]
   2707c:	e3530000 	cmp	r3, #0
   27080:	0a000005 	beq	2709c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>
   27084:	e3001ee8 	movw	r1, #3816	; 0xee8
   27088:	e3401003 	movt	r1, #3
   2708c:	e3000f0c 	movw	r0, #3852	; 0xf0c
   27090:	e3400003 	movt	r0, #3
   27094:	e3a0207a 	mov	r2, #122	; 0x7a
   27098:	ebfff6c0 	bl	24ba0 <assertion_failed>
   2709c:	e3540047 	cmp	r4, #71	; 0x47
   270a0:	e88500c0 	stm	r5, {r6, r7}
   270a4:	9a000005 	bls	270c0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x70>
   270a8:	e3001ee8 	movw	r1, #3816	; 0xee8
   270ac:	e3401003 	movt	r1, #3
   270b0:	e3000ef8 	movw	r0, #3832	; 0xef8
   270b4:	e3400003 	movt	r0, #3
   270b8:	e3a020a6 	mov	r2, #166	; 0xa6
   270bc:	ebfff6b7 	bl	24ba0 <assertion_failed>
   270c0:	e3a03a0b 	mov	r3, #45056	; 0xb000
   270c4:	e3433f00 	movt	r3, #16128	; 0x3f00
   270c8:	e3844080 	orr	r4, r4, #128	; 0x80
   270cc:	e583420c 	str	r4, [r3, #524]	; 0x20c
   270d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   270d4:	e3001ee8 	movw	r1, #3816	; 0xee8
   270d8:	e3401003 	movt	r1, #3
   270dc:	e3000ef8 	movw	r0, #3832	; 0xef8
   270e0:	e3400003 	movt	r0, #3
   270e4:	e3a02078 	mov	r2, #120	; 0x78
   270e8:	ebfff6ac 	bl	24ba0 <assertion_failed>
   270ec:	eaffffdd 	b	27068 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
   270f0:	e3001ee8 	movw	r1, #3816	; 0xee8
   270f4:	e3401003 	movt	r1, #3
   270f8:	e3000f2c 	movw	r0, #3884	; 0xf2c
   270fc:	e3400003 	movt	r0, #3
   27100:	e3a02079 	mov	r2, #121	; 0x79
   27104:	ebfff6a5 	bl	24ba0 <assertion_failed>
   27108:	eaffffd8 	b	27070 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>

0002710c <CInterruptSystem::DisconnectFIQ()>:
   2710c:	e92d4010 	push	{r4, lr}
   27110:	e3014bac 	movw	r4, #7084	; 0x1bac
   27114:	e3404003 	movt	r4, #3
   27118:	e5943000 	ldr	r3, [r4]
   2711c:	e3530000 	cmp	r3, #0
   27120:	0a000006 	beq	27140 <CInterruptSystem::DisconnectFIQ()+0x34>
   27124:	e3a02a0b 	mov	r2, #45056	; 0xb000
   27128:	e3432f00 	movt	r2, #16128	; 0x3f00
   2712c:	e3a03000 	mov	r3, #0
   27130:	e582320c 	str	r3, [r2, #524]	; 0x20c
   27134:	e5843000 	str	r3, [r4]
   27138:	e5843004 	str	r3, [r4, #4]
   2713c:	e8bd8010 	pop	{r4, pc}
   27140:	e3001ee8 	movw	r1, #3816	; 0xee8
   27144:	e3401003 	movt	r1, #3
   27148:	e3000f24 	movw	r0, #3876	; 0xf24
   2714c:	e3400003 	movt	r0, #3
   27150:	e3a02084 	mov	r2, #132	; 0x84
   27154:	ebfff691 	bl	24ba0 <assertion_failed>
   27158:	eafffff1 	b	27124 <CInterruptSystem::DisconnectFIQ()+0x18>

0002715c <CInterruptSystem::EnableIRQ(unsigned int)>:
   2715c:	e3500047 	cmp	r0, #71	; 0x47
   27160:	e92d4010 	push	{r4, lr}
   27164:	e1a04000 	mov	r4, r0
   27168:	8a00000e 	bhi	271a8 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   2716c:	e350001f 	cmp	r0, #31
   27170:	930b2210 	movwls	r2, #45584	; 0xb210
   27174:	93432f00 	movtls	r2, #16128	; 0x3f00
   27178:	8a000004 	bhi	27190 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
   2717c:	e204401f 	and	r4, r4, #31
   27180:	e3a03001 	mov	r3, #1
   27184:	e1a04413 	lsl	r4, r3, r4
   27188:	e5824000 	str	r4, [r2]
   2718c:	e8bd8010 	pop	{r4, pc}
   27190:	e350003f 	cmp	r0, #63	; 0x3f
   27194:	930b2214 	movwls	r2, #45588	; 0xb214
   27198:	93432f00 	movtls	r2, #16128	; 0x3f00
   2719c:	830b2218 	movwhi	r2, #45592	; 0xb218
   271a0:	83432f00 	movthi	r2, #16128	; 0x3f00
   271a4:	eafffff4 	b	2717c <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
   271a8:	e3a02090 	mov	r2, #144	; 0x90
   271ac:	e3001ee8 	movw	r1, #3816	; 0xee8
   271b0:	e3401003 	movt	r1, #3
   271b4:	e3000f3c 	movw	r0, #3900	; 0xf3c
   271b8:	e3400003 	movt	r0, #3
   271bc:	ebfff677 	bl	24ba0 <assertion_failed>
   271c0:	e30b2218 	movw	r2, #45592	; 0xb218
   271c4:	e3432f00 	movt	r2, #16128	; 0x3f00
   271c8:	eaffffeb 	b	2717c <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

000271cc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   271cc:	e3510047 	cmp	r1, #71	; 0x47
   271d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   271d4:	e1a04001 	mov	r4, r1
   271d8:	e1a05000 	mov	r5, r0
   271dc:	e1a08002 	mov	r8, r2
   271e0:	e1a07003 	mov	r7, r3
   271e4:	8a00000e 	bhi	27224 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   271e8:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   271ec:	e0856104 	add	r6, r5, r4, lsl #2
   271f0:	e3530000 	cmp	r3, #0
   271f4:	0a000005 	beq	27210 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
   271f8:	e3001ee8 	movw	r1, #3816	; 0xee8
   271fc:	e3401003 	movt	r1, #3
   27200:	e3000f50 	movw	r0, #3920	; 0xf50
   27204:	e3400003 	movt	r0, #3
   27208:	e3a02060 	mov	r2, #96	; 0x60
   2720c:	ebfff663 	bl	24ba0 <assertion_failed>
   27210:	e7858104 	str	r8, [r5, r4, lsl #2]
   27214:	e1a00004 	mov	r0, r4
   27218:	e5867120 	str	r7, [r6, #288]	; 0x120
   2721c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   27220:	eaffffcd 	b	2715c <CInterruptSystem::EnableIRQ(unsigned int)>
   27224:	e3001ee8 	movw	r1, #3816	; 0xee8
   27228:	e3401003 	movt	r1, #3
   2722c:	e3000f3c 	movw	r0, #3900	; 0xf3c
   27230:	e3400003 	movt	r0, #3
   27234:	e3a0205f 	mov	r2, #95	; 0x5f
   27238:	ebfff658 	bl	24ba0 <assertion_failed>
   2723c:	eaffffe9 	b	271e8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

00027240 <CInterruptSystem::DisableIRQ(unsigned int)>:
   27240:	e3500047 	cmp	r0, #71	; 0x47
   27244:	e92d4010 	push	{r4, lr}
   27248:	e1a04000 	mov	r4, r0
   2724c:	8a00000e 	bhi	2728c <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   27250:	e350001f 	cmp	r0, #31
   27254:	930b221c 	movwls	r2, #45596	; 0xb21c
   27258:	93432f00 	movtls	r2, #16128	; 0x3f00
   2725c:	8a000004 	bhi	27274 <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
   27260:	e204401f 	and	r4, r4, #31
   27264:	e3a03001 	mov	r3, #1
   27268:	e1a04413 	lsl	r4, r3, r4
   2726c:	e5824000 	str	r4, [r2]
   27270:	e8bd8010 	pop	{r4, pc}
   27274:	e350003f 	cmp	r0, #63	; 0x3f
   27278:	930b2220 	movwls	r2, #45600	; 0xb220
   2727c:	93432f00 	movtls	r2, #16128	; 0x3f00
   27280:	830b2224 	movwhi	r2, #45604	; 0xb224
   27284:	83432f00 	movthi	r2, #16128	; 0x3f00
   27288:	eafffff4 	b	27260 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
   2728c:	e3a0209b 	mov	r2, #155	; 0x9b
   27290:	e3001ee8 	movw	r1, #3816	; 0xee8
   27294:	e3401003 	movt	r1, #3
   27298:	e3000f3c 	movw	r0, #3900	; 0xf3c
   2729c:	e3400003 	movt	r0, #3
   272a0:	ebfff63e 	bl	24ba0 <assertion_failed>
   272a4:	e30b2224 	movw	r2, #45604	; 0xb224
   272a8:	e3432f00 	movt	r2, #16128	; 0x3f00
   272ac:	eaffffeb 	b	27260 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

000272b0 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   272b0:	e3510047 	cmp	r1, #71	; 0x47
   272b4:	e92d4070 	push	{r4, r5, r6, lr}
   272b8:	e1a04001 	mov	r4, r1
   272bc:	e1a05000 	mov	r5, r0
   272c0:	8a000009 	bhi	272ec <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   272c4:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   272c8:	e0856104 	add	r6, r5, r4, lsl #2
   272cc:	e3530000 	cmp	r3, #0
   272d0:	0a00000f 	beq	27314 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   272d4:	e1a00004 	mov	r0, r4
   272d8:	ebffffd8 	bl	27240 <CInterruptSystem::DisableIRQ(unsigned int)>
   272dc:	e3a03000 	mov	r3, #0
   272e0:	e7853104 	str	r3, [r5, r4, lsl #2]
   272e4:	e5863120 	str	r3, [r6, #288]	; 0x120
   272e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   272ec:	e3001ee8 	movw	r1, #3816	; 0xee8
   272f0:	e3401003 	movt	r1, #3
   272f4:	e3000f3c 	movw	r0, #3900	; 0xf3c
   272f8:	e3400003 	movt	r0, #3
   272fc:	e3a0206a 	mov	r2, #106	; 0x6a
   27300:	e0856104 	add	r6, r5, r4, lsl #2
   27304:	ebfff625 	bl	24ba0 <assertion_failed>
   27308:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   2730c:	e3530000 	cmp	r3, #0
   27310:	1affffef 	bne	272d4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   27314:	e3001ee8 	movw	r1, #3816	; 0xee8
   27318:	e3401003 	movt	r1, #3
   2731c:	e3000f6c 	movw	r0, #3948	; 0xf6c
   27320:	e3400003 	movt	r0, #3
   27324:	e3a0206b 	mov	r2, #107	; 0x6b
   27328:	ebfff61c 	bl	24ba0 <assertion_failed>
   2732c:	eaffffe8 	b	272d4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

00027330 <CInterruptSystem::EnableFIQ(unsigned int)>:
   27330:	e3500047 	cmp	r0, #71	; 0x47
   27334:	e92d4010 	push	{r4, lr}
   27338:	e1a04000 	mov	r4, r0
   2733c:	9a000005 	bls	27358 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
   27340:	e3001ee8 	movw	r1, #3816	; 0xee8
   27344:	e3401003 	movt	r1, #3
   27348:	e3000ef8 	movw	r0, #3832	; 0xef8
   2734c:	e3400003 	movt	r0, #3
   27350:	e3a020a6 	mov	r2, #166	; 0xa6
   27354:	ebfff611 	bl	24ba0 <assertion_failed>
   27358:	e3a03a0b 	mov	r3, #45056	; 0xb000
   2735c:	e3433f00 	movt	r3, #16128	; 0x3f00
   27360:	e3844080 	orr	r4, r4, #128	; 0x80
   27364:	e583420c 	str	r4, [r3, #524]	; 0x20c
   27368:	e8bd8010 	pop	{r4, pc}

0002736c <CInterruptSystem::DisableFIQ()>:
   2736c:	e3a03a0b 	mov	r3, #45056	; 0xb000
   27370:	e3433f00 	movt	r3, #16128	; 0x3f00
   27374:	e3a02000 	mov	r2, #0
   27378:	e583220c 	str	r2, [r3, #524]	; 0x20c
   2737c:	e12fff1e 	bx	lr

00027380 <CInterruptSystem::Get()>:
   27380:	e92d4010 	push	{r4, lr}
   27384:	e302489c 	movw	r4, #10396	; 0x289c
   27388:	e3404143 	movt	r4, #323	; 0x143
   2738c:	e5940000 	ldr	r0, [r4]
   27390:	e3500000 	cmp	r0, #0
   27394:	18bd8010 	popne	{r4, pc}
   27398:	e3a020b8 	mov	r2, #184	; 0xb8
   2739c:	e3001ee8 	movw	r1, #3816	; 0xee8
   273a0:	e3401003 	movt	r1, #3
   273a4:	e30a03a8 	movw	r0, #41896	; 0xa3a8
   273a8:	e3400002 	movt	r0, #2
   273ac:	ebfff5fb 	bl	24ba0 <assertion_failed>
   273b0:	e5940000 	ldr	r0, [r4]
   273b4:	e8bd8010 	pop	{r4, pc}

000273b8 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   273b8:	e3510047 	cmp	r1, #71	; 0x47
   273bc:	e92d4070 	push	{r4, r5, r6, lr}
   273c0:	e1a06001 	mov	r6, r1
   273c4:	e1a05000 	mov	r5, r0
   273c8:	8a000007 	bhi	273ec <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
   273cc:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   273d0:	e0855106 	add	r5, r5, r6, lsl #2
   273d4:	e3540000 	cmp	r4, #0
   273d8:	0a00000d 	beq	27414 <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
   273dc:	e5950120 	ldr	r0, [r5, #288]	; 0x120
   273e0:	e12fff34 	blx	r4
   273e4:	e3a00001 	mov	r0, #1
   273e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   273ec:	e3001ee8 	movw	r1, #3816	; 0xee8
   273f0:	e3401003 	movt	r1, #3
   273f4:	e3000f3c 	movw	r0, #3900	; 0xf3c
   273f8:	e3400003 	movt	r0, #3
   273fc:	e3a020be 	mov	r2, #190	; 0xbe
   27400:	ebfff5e6 	bl	24ba0 <assertion_failed>
   27404:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   27408:	e0855106 	add	r5, r5, r6, lsl #2
   2740c:	e3540000 	cmp	r4, #0
   27410:	1afffff1 	bne	273dc <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
   27414:	e1a00006 	mov	r0, r6
   27418:	ebffff88 	bl	27240 <CInterruptSystem::DisableIRQ(unsigned int)>
   2741c:	e1a00004 	mov	r0, r4
   27420:	e8bd8070 	pop	{r4, r5, r6, pc}

00027424 <CInterruptSystem::InterruptHandler()>:
   27424:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27428:	e302689c 	movw	r6, #10396	; 0x289c
   2742c:	e3406143 	movt	r6, #323	; 0x143
   27430:	e24dd010 	sub	sp, sp, #16
   27434:	e5963000 	ldr	r3, [r6]
   27438:	e3530000 	cmp	r3, #0
   2743c:	0a00001f 	beq	274c0 <CInterruptSystem::InterruptHandler()+0x9c>
   27440:	e3a03a0b 	mov	r3, #45056	; 0xb000
   27444:	e3433f00 	movt	r3, #16128	; 0x3f00
   27448:	e28d8008 	add	r8, sp, #8
   2744c:	e3a07000 	mov	r7, #0
   27450:	e5934204 	ldr	r4, [r3, #516]	; 0x204
   27454:	e58d4004 	str	r4, [sp, #4]
   27458:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   2745c:	e58d2008 	str	r2, [sp, #8]
   27460:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   27464:	e6ef3073 	uxtb	r3, r3
   27468:	e58d300c 	str	r3, [sp, #12]
   2746c:	e3540000 	cmp	r4, #0
   27470:	0a00000d 	beq	274ac <CInterruptSystem::InterruptHandler()+0x88>
   27474:	e1a05007 	mov	r5, r7
   27478:	ea000002 	b	27488 <CInterruptSystem::InterruptHandler()+0x64>
   2747c:	e1b040a4 	lsrs	r4, r4, #1
   27480:	e2855001 	add	r5, r5, #1
   27484:	0a000008 	beq	274ac <CInterruptSystem::InterruptHandler()+0x88>
   27488:	e3140001 	tst	r4, #1
   2748c:	0afffffa 	beq	2747c <CInterruptSystem::InterruptHandler()+0x58>
   27490:	e1a01005 	mov	r1, r5
   27494:	e5960000 	ldr	r0, [r6]
   27498:	ebffffc6 	bl	273b8 <CInterruptSystem::CallIRQHandler(unsigned int)>
   2749c:	e3500000 	cmp	r0, #0
   274a0:	0afffff5 	beq	2747c <CInterruptSystem::InterruptHandler()+0x58>
   274a4:	e28dd010 	add	sp, sp, #16
   274a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   274ac:	e2877020 	add	r7, r7, #32
   274b0:	e3570060 	cmp	r7, #96	; 0x60
   274b4:	0afffffa 	beq	274a4 <CInterruptSystem::InterruptHandler()+0x80>
   274b8:	e4984004 	ldr	r4, [r8], #4
   274bc:	eaffffea 	b	2746c <CInterruptSystem::InterruptHandler()+0x48>
   274c0:	e3001ee8 	movw	r1, #3816	; 0xee8
   274c4:	e3401003 	movt	r1, #3
   274c8:	e30a03a8 	movw	r0, #41896	; 0xa3a8
   274cc:	e3400002 	movt	r0, #2
   274d0:	e3a020d1 	mov	r2, #209	; 0xd1
   274d4:	ebfff5b1 	bl	24ba0 <assertion_failed>
   274d8:	eaffffd8 	b	27440 <CInterruptSystem::InterruptHandler()+0x1c>

000274dc <InterruptHandler>:
   274dc:	eaffffd0 	b	27424 <CInterruptSystem::InterruptHandler()>

000274e0 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   274e0:	e1a03000 	mov	r3, r0
   274e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   274e8:	e3a0e000 	mov	lr, #0
   274ec:	e1a0c00e 	mov	ip, lr
   274f0:	e28020dc 	add	r2, r0, #220	; 0xdc
   274f4:	e5801000 	str	r1, [r0]
   274f8:	e5a3e004 	str	lr, [r3, #4]!
   274fc:	e5a3c004 	str	ip, [r3, #4]!
   27500:	e1530002 	cmp	r3, r2
   27504:	1afffffc 	bne	274fc <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   27508:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002750c <CGPIOManager::~CGPIOManager()>:
   2750c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27510:	e3006f88 	movw	r6, #3976	; 0xf88
   27514:	e3406003 	movt	r6, #3
   27518:	e3005f98 	movw	r5, #3992	; 0xf98
   2751c:	e3405003 	movt	r5, #3
   27520:	e1a08000 	mov	r8, r0
   27524:	e2804004 	add	r4, r0, #4
   27528:	e28070dc 	add	r7, r0, #220	; 0xdc
   2752c:	e5b43004 	ldr	r3, [r4, #4]!
   27530:	e3a0202c 	mov	r2, #44	; 0x2c
   27534:	e1a01006 	mov	r1, r6
   27538:	e1a00005 	mov	r0, r5
   2753c:	e3530000 	cmp	r3, #0
   27540:	0a000000 	beq	27548 <CGPIOManager::~CGPIOManager()+0x3c>
   27544:	ebfff595 	bl	24ba0 <assertion_failed>
   27548:	e1540007 	cmp	r4, r7
   2754c:	1afffff6 	bne	2752c <CGPIOManager::~CGPIOManager()+0x20>
   27550:	e5983004 	ldr	r3, [r8, #4]
   27554:	e3530000 	cmp	r3, #0
   27558:	0a000004 	beq	27570 <CGPIOManager::~CGPIOManager()+0x64>
   2755c:	e5980000 	ldr	r0, [r8]
   27560:	e3500000 	cmp	r0, #0
   27564:	0a000003 	beq	27578 <CGPIOManager::~CGPIOManager()+0x6c>
   27568:	e3a01034 	mov	r1, #52	; 0x34
   2756c:	ebffff4f 	bl	272b0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   27570:	e1a00008 	mov	r0, r8
   27574:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   27578:	e3001f88 	movw	r1, #3976	; 0xf88
   2757c:	e3401003 	movt	r1, #3
   27580:	e3000fac 	movw	r0, #4012	; 0xfac
   27584:	e3400003 	movt	r0, #3
   27588:	e3a02032 	mov	r2, #50	; 0x32
   2758c:	ebfff583 	bl	24ba0 <assertion_failed>
   27590:	e5980000 	ldr	r0, [r8]
   27594:	eafffff3 	b	27568 <CGPIOManager::~CGPIOManager()+0x5c>

00027598 <CGPIOManager::Initialize()>:
   27598:	e5903004 	ldr	r3, [r0, #4]
   2759c:	e92d4010 	push	{r4, lr}
   275a0:	e1a04000 	mov	r4, r0
   275a4:	e3530000 	cmp	r3, #0
   275a8:	1a00000a 	bne	275d8 <CGPIOManager::Initialize()+0x40>
   275ac:	e5940000 	ldr	r0, [r4]
   275b0:	e3500000 	cmp	r0, #0
   275b4:	0a000010 	beq	275fc <CGPIOManager::Initialize()+0x64>
   275b8:	e1a03004 	mov	r3, r4
   275bc:	e3a01034 	mov	r1, #52	; 0x34
   275c0:	e307283c 	movw	r2, #30780	; 0x783c
   275c4:	e3402002 	movt	r2, #2
   275c8:	ebfffeff 	bl	271cc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   275cc:	e3a00001 	mov	r0, #1
   275d0:	e5840004 	str	r0, [r4, #4]
   275d4:	e8bd8010 	pop	{r4, pc}
   275d8:	e3001f88 	movw	r1, #3976	; 0xf88
   275dc:	e3401003 	movt	r1, #3
   275e0:	e3000fc0 	movw	r0, #4032	; 0xfc0
   275e4:	e3400003 	movt	r0, #3
   275e8:	e3a0203b 	mov	r2, #59	; 0x3b
   275ec:	ebfff56b 	bl	24ba0 <assertion_failed>
   275f0:	e5940000 	ldr	r0, [r4]
   275f4:	e3500000 	cmp	r0, #0
   275f8:	1affffee 	bne	275b8 <CGPIOManager::Initialize()+0x20>
   275fc:	e3001f88 	movw	r1, #3976	; 0xf88
   27600:	e3401003 	movt	r1, #3
   27604:	e3000fac 	movw	r0, #4012	; 0xfac
   27608:	e3400003 	movt	r0, #3
   2760c:	e3a0203c 	mov	r2, #60	; 0x3c
   27610:	ebfff562 	bl	24ba0 <assertion_failed>
   27614:	e5940000 	ldr	r0, [r4]
   27618:	eaffffe6 	b	275b8 <CGPIOManager::Initialize()+0x20>

0002761c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2761c:	e5903004 	ldr	r3, [r0, #4]
   27620:	e92d4070 	push	{r4, r5, r6, lr}
   27624:	e1a04000 	mov	r4, r0
   27628:	e3530000 	cmp	r3, #0
   2762c:	e1a05001 	mov	r5, r1
   27630:	0a000010 	beq	27678 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   27634:	e3550000 	cmp	r5, #0
   27638:	0a00001c 	beq	276b0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
   2763c:	e5956004 	ldr	r6, [r5, #4]
   27640:	e3560035 	cmp	r6, #53	; 0x35
   27644:	8a000012 	bhi	27694 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
   27648:	e0844106 	add	r4, r4, r6, lsl #2
   2764c:	e5943008 	ldr	r3, [r4, #8]
   27650:	e3530000 	cmp	r3, #0
   27654:	0a000005 	beq	27670 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   27658:	e3001f88 	movw	r1, #3976	; 0xf88
   2765c:	e3401003 	movt	r1, #3
   27660:	e3000f98 	movw	r0, #3992	; 0xf98
   27664:	e3400003 	movt	r0, #3
   27668:	e3a0204b 	mov	r2, #75	; 0x4b
   2766c:	ebfff54b 	bl	24ba0 <assertion_failed>
   27670:	e5845008 	str	r5, [r4, #8]
   27674:	e8bd8070 	pop	{r4, r5, r6, pc}
   27678:	e3001f88 	movw	r1, #3976	; 0xf88
   2767c:	e3401003 	movt	r1, #3
   27680:	e3000fd4 	movw	r0, #4052	; 0xfd4
   27684:	e3400003 	movt	r0, #3
   27688:	e3a02045 	mov	r2, #69	; 0x45
   2768c:	ebfff543 	bl	24ba0 <assertion_failed>
   27690:	eaffffe7 	b	27634 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
   27694:	e3001f88 	movw	r1, #3976	; 0xf88
   27698:	e3401003 	movt	r1, #3
   2769c:	e30f0a50 	movw	r0, #64080	; 0xfa50
   276a0:	e3400002 	movt	r0, #2
   276a4:	e3a02049 	mov	r2, #73	; 0x49
   276a8:	ebfff53c 	bl	24ba0 <assertion_failed>
   276ac:	eaffffe5 	b	27648 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   276b0:	e3001f88 	movw	r1, #3976	; 0xf88
   276b4:	e3401003 	movt	r1, #3
   276b8:	e3000fe4 	movw	r0, #4068	; 0xfe4
   276bc:	e3400003 	movt	r0, #3
   276c0:	e3a02047 	mov	r2, #71	; 0x47
   276c4:	ebfff535 	bl	24ba0 <assertion_failed>
   276c8:	eaffffdb 	b	2763c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

000276cc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   276cc:	e5903004 	ldr	r3, [r0, #4]
   276d0:	e92d4070 	push	{r4, r5, r6, lr}
   276d4:	e1a04000 	mov	r4, r0
   276d8:	e3530000 	cmp	r3, #0
   276dc:	e1a05001 	mov	r5, r1
   276e0:	0a00000b 	beq	27714 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   276e4:	e3550000 	cmp	r5, #0
   276e8:	0a000021 	beq	27774 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
   276ec:	e5955004 	ldr	r5, [r5, #4]
   276f0:	e3550035 	cmp	r5, #53	; 0x35
   276f4:	8a00000d 	bhi	27730 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
   276f8:	e0844105 	add	r4, r4, r5, lsl #2
   276fc:	e5943008 	ldr	r3, [r4, #8]
   27700:	e3530000 	cmp	r3, #0
   27704:	0a000013 	beq	27758 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   27708:	e3a03000 	mov	r3, #0
   2770c:	e5843008 	str	r3, [r4, #8]
   27710:	e8bd8070 	pop	{r4, r5, r6, pc}
   27714:	e3001f88 	movw	r1, #3976	; 0xf88
   27718:	e3401003 	movt	r1, #3
   2771c:	e3000fd4 	movw	r0, #4052	; 0xfd4
   27720:	e3400003 	movt	r0, #3
   27724:	e3a02052 	mov	r2, #82	; 0x52
   27728:	ebfff51c 	bl	24ba0 <assertion_failed>
   2772c:	eaffffec 	b	276e4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
   27730:	e0844105 	add	r4, r4, r5, lsl #2
   27734:	e3001f88 	movw	r1, #3976	; 0xf88
   27738:	e3401003 	movt	r1, #3
   2773c:	e30f0a50 	movw	r0, #64080	; 0xfa50
   27740:	e3400002 	movt	r0, #2
   27744:	e3a02056 	mov	r2, #86	; 0x56
   27748:	ebfff514 	bl	24ba0 <assertion_failed>
   2774c:	e5943008 	ldr	r3, [r4, #8]
   27750:	e3530000 	cmp	r3, #0
   27754:	1affffeb 	bne	27708 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   27758:	e3001f88 	movw	r1, #3976	; 0xf88
   2775c:	e3401003 	movt	r1, #3
   27760:	e3000ff0 	movw	r0, #4080	; 0xff0
   27764:	e3400003 	movt	r0, #3
   27768:	e3a02058 	mov	r2, #88	; 0x58
   2776c:	ebfff50b 	bl	24ba0 <assertion_failed>
   27770:	eaffffe4 	b	27708 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   27774:	e3001f88 	movw	r1, #3976	; 0xf88
   27778:	e3401003 	movt	r1, #3
   2777c:	e3000fe4 	movw	r0, #4068	; 0xfe4
   27780:	e3400003 	movt	r0, #3
   27784:	e3a02054 	mov	r2, #84	; 0x54
   27788:	ebfff504 	bl	24ba0 <assertion_failed>
   2778c:	eaffffd6 	b	276ec <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

00027790 <CGPIOManager::InterruptHandler()>:
   27790:	e5903004 	ldr	r3, [r0, #4]
   27794:	e92d4070 	push	{r4, r5, r6, lr}
   27798:	e1a06000 	mov	r6, r0
   2779c:	e3530000 	cmp	r3, #0
   277a0:	0a00001b 	beq	27814 <CGPIOManager::InterruptHandler()+0x84>
   277a4:	e3a03000 	mov	r3, #0
   277a8:	e3433f20 	movt	r3, #16160	; 0x3f20
   277ac:	e1a02003 	mov	r2, r3
   277b0:	e3a04000 	mov	r4, #0
   277b4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   277b8:	ea000004 	b	277d0 <CGPIOManager::InterruptHandler()+0x40>
   277bc:	e2844001 	add	r4, r4, #1
   277c0:	e314001f 	tst	r4, #31
   277c4:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   277c8:	e3540036 	cmp	r4, #54	; 0x36
   277cc:	08bd8070 	popeq	{r4, r5, r6, pc}
   277d0:	e3130001 	tst	r3, #1
   277d4:	e1a030a3 	lsr	r3, r3, #1
   277d8:	0afffff7 	beq	277bc <CGPIOManager::InterruptHandler()+0x2c>
   277dc:	e2843002 	add	r3, r4, #2
   277e0:	e204501f 	and	r5, r4, #31
   277e4:	e3a02001 	mov	r2, #1
   277e8:	e7960103 	ldr	r0, [r6, r3, lsl #2]
   277ec:	e1a05512 	lsl	r5, r2, r5
   277f0:	e3500000 	cmp	r0, #0
   277f4:	0a00000d 	beq	27830 <CGPIOManager::InterruptHandler()+0xa0>
   277f8:	ebffe8dd 	bl	21b74 <CGPIOPin::InterruptHandler()>
   277fc:	e3a03010 	mov	r3, #16
   27800:	e3403fc8 	movt	r3, #4040	; 0xfc8
   27804:	e08332a4 	add	r3, r3, r4, lsr #5
   27808:	e1a03103 	lsl	r3, r3, #2
   2780c:	e5835000 	str	r5, [r3]
   27810:	e8bd8070 	pop	{r4, r5, r6, pc}
   27814:	e3001f88 	movw	r1, #3976	; 0xf88
   27818:	e3401003 	movt	r1, #3
   2781c:	e3000fd4 	movw	r0, #4052	; 0xfd4
   27820:	e3400003 	movt	r0, #3
   27824:	e3a0205e 	mov	r2, #94	; 0x5e
   27828:	ebfff4dc 	bl	24ba0 <assertion_failed>
   2782c:	eaffffdc 	b	277a4 <CGPIOManager::InterruptHandler()+0x14>
   27830:	e1a00004 	mov	r0, r4
   27834:	ebffe8fa 	bl	21c24 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   27838:	eaffffef 	b	277fc <CGPIOManager::InterruptHandler()+0x6c>

0002783c <CGPIOManager::InterruptStub(void*)>:
   2783c:	e92d4010 	push	{r4, lr}
   27840:	e2504000 	subs	r4, r0, #0
   27844:	0a000002 	beq	27854 <CGPIOManager::InterruptStub(void*)+0x18>
   27848:	e1a00004 	mov	r0, r4
   2784c:	e8bd4010 	pop	{r4, lr}
   27850:	eaffffce 	b	27790 <CGPIOManager::InterruptHandler()>
   27854:	e3001f88 	movw	r1, #3976	; 0xf88
   27858:	e3401003 	movt	r1, #3
   2785c:	e30a09fc 	movw	r0, #43516	; 0xa9fc
   27860:	e3400002 	movt	r0, #2
   27864:	e3a0208a 	mov	r2, #138	; 0x8a
   27868:	ebfff4cc 	bl	24ba0 <assertion_failed>
   2786c:	e1a00004 	mov	r0, r4
   27870:	e8bd4010 	pop	{r4, lr}
   27874:	eaffffc5 	b	27790 <CGPIOManager::InterruptHandler()>

00027878 <CPWMSoundDevice::~CPWMSoundDevice()>:
   27878:	e59f3014 	ldr	r3, [pc, #20]	; 27894 <CPWMSoundDevice::~CPWMSoundDevice()+0x1c>
   2787c:	e92d4010 	push	{r4, lr}
   27880:	e1a04000 	mov	r4, r0
   27884:	e5803000 	str	r3, [r0]
   27888:	eb0002d9 	bl	283f4 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>
   2788c:	e1a00004 	mov	r0, r4
   27890:	e8bd8010 	pop	{r4, pc}
   27894:	0003100c 	.word	0x0003100c

00027898 <CPWMSoundDevice::~CPWMSoundDevice()>:
   27898:	e59f3020 	ldr	r3, [pc, #32]	; 278c0 <CPWMSoundDevice::~CPWMSoundDevice()+0x28>
   2789c:	e92d4010 	push	{r4, lr}
   278a0:	e1a04000 	mov	r4, r0
   278a4:	e5803000 	str	r3, [r0]
   278a8:	eb0002d1 	bl	283f4 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>
   278ac:	e1a00004 	mov	r0, r4
   278b0:	e3a0109c 	mov	r1, #156	; 0x9c
   278b4:	ebffe9bb 	bl	21fa8 <operator delete(void*, unsigned int)>
   278b8:	e1a00004 	mov	r0, r4
   278bc:	e8bd8010 	pop	{r4, pc}
   278c0:	0003100c 	.word	0x0003100c

000278c4 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)>:
   278c4:	e92d4070 	push	{r4, r5, r6, lr}
   278c8:	e2515000 	subs	r5, r1, #0
   278cc:	e1a04000 	mov	r4, r0
   278d0:	e1a06002 	mov	r6, r2
   278d4:	0a000069 	beq	27a80 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x1bc>
   278d8:	e3560000 	cmp	r6, #0
   278dc:	0a000059 	beq	27a48 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x184>
   278e0:	e3160001 	tst	r6, #1
   278e4:	1a000050 	bne	27a2c <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x168>
   278e8:	e5940090 	ldr	r0, [r4, #144]	; 0x90
   278ec:	e3500000 	cmp	r0, #0
   278f0:	08bd8070 	popeq	{r4, r5, r6, pc}
   278f4:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   278f8:	e3530000 	cmp	r3, #0
   278fc:	0a000066 	beq	27a9c <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x1d8>
   27900:	e5943094 	ldr	r3, [r4, #148]	; 0x94
   27904:	e2433001 	sub	r3, r3, #1
   27908:	e3530001 	cmp	r3, #1
   2790c:	9a000005 	bls	27928 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x64>
   27910:	e3011018 	movw	r1, #4120	; 0x1018
   27914:	e3401003 	movt	r1, #3
   27918:	e3010068 	movw	r0, #4200	; 0x1068
   2791c:	e3400003 	movt	r0, #3
   27920:	e3a0204f 	mov	r2, #79	; 0x4f
   27924:	ebfff49d 	bl	24ba0 <assertion_failed>
   27928:	e5943098 	ldr	r3, [r4, #152]	; 0x98
   2792c:	e2433008 	sub	r3, r3, #8
   27930:	e3d33008 	bics	r3, r3, #8
   27934:	1a00004a 	bne	27a64 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x1a0>
   27938:	e1a020a6 	lsr	r2, r6, #1
   2793c:	e1a0c005 	mov	ip, r5
   27940:	e3a00000 	mov	r0, #0
   27944:	ea000014 	b	2799c <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0xd8>
   27948:	e28e6002 	add	r6, lr, #2
   2794c:	e351000b 	cmp	r1, #11
   27950:	e584608c 	str	r6, [r4, #140]	; 0x8c
   27954:	e5dee001 	ldrb	lr, [lr, #1]
   27958:	e183340e 	orr	r3, r3, lr, lsl #8
   2795c:	e2233902 	eor	r3, r3, #32768	; 0x8000
   27960:	9a000016 	bls	279c0 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0xfc>
   27964:	e241100c 	sub	r1, r1, #12
   27968:	e1a03133 	lsr	r3, r3, r1
   2796c:	e7853100 	str	r3, [r5, r0, lsl #2]
   27970:	e5941094 	ldr	r1, [r4, #148]	; 0x94
   27974:	e3510002 	cmp	r1, #2
   27978:	0a000016 	beq	279d8 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x114>
   2797c:	e58c3004 	str	r3, [ip, #4]
   27980:	e2800002 	add	r0, r0, #2
   27984:	e28cc008 	add	ip, ip, #8
   27988:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   2798c:	e2433001 	sub	r3, r3, #1
   27990:	e3530000 	cmp	r3, #0
   27994:	e5843090 	str	r3, [r4, #144]	; 0x90
   27998:	0a00001f 	beq	27a1c <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x158>
   2799c:	e1500002 	cmp	r0, r2
   279a0:	28bd8070 	popcs	{r4, r5, r6, pc}
   279a4:	e594e08c 	ldr	lr, [r4, #140]	; 0x8c
   279a8:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   279ac:	e28e3001 	add	r3, lr, #1
   279b0:	e3510008 	cmp	r1, #8
   279b4:	e584308c 	str	r3, [r4, #140]	; 0x8c
   279b8:	e5de3000 	ldrb	r3, [lr]
   279bc:	8affffe1 	bhi	27948 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x84>
   279c0:	e261100c 	rsb	r1, r1, #12
   279c4:	e1a03113 	lsl	r3, r3, r1
   279c8:	e7853100 	str	r3, [r5, r0, lsl #2]
   279cc:	e5941094 	ldr	r1, [r4, #148]	; 0x94
   279d0:	e3510002 	cmp	r1, #2
   279d4:	1affffe8 	bne	2797c <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0xb8>
   279d8:	e594e08c 	ldr	lr, [r4, #140]	; 0x8c
   279dc:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   279e0:	e28e3001 	add	r3, lr, #1
   279e4:	e3510008 	cmp	r1, #8
   279e8:	e584308c 	str	r3, [r4, #140]	; 0x8c
   279ec:	e5de3000 	ldrb	r3, [lr]
   279f0:	9a00000a 	bls	27a20 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x15c>
   279f4:	e28e6002 	add	r6, lr, #2
   279f8:	e351000b 	cmp	r1, #11
   279fc:	e584608c 	str	r6, [r4, #140]	; 0x8c
   27a00:	e5dee001 	ldrb	lr, [lr, #1]
   27a04:	e183340e 	orr	r3, r3, lr, lsl #8
   27a08:	e2233902 	eor	r3, r3, #32768	; 0x8000
   27a0c:	9a000003 	bls	27a20 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x15c>
   27a10:	e241100c 	sub	r1, r1, #12
   27a14:	e1a03133 	lsr	r3, r3, r1
   27a18:	eaffffd7 	b	2797c <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0xb8>
   27a1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   27a20:	e261100c 	rsb	r1, r1, #12
   27a24:	e1a03113 	lsl	r3, r3, r1
   27a28:	eaffffd3 	b	2797c <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0xb8>
   27a2c:	e3011018 	movw	r1, #4120	; 0x1018
   27a30:	e3401003 	movt	r1, #3
   27a34:	e301003c 	movw	r0, #4156	; 0x103c
   27a38:	e3400003 	movt	r0, #3
   27a3c:	e3a02045 	mov	r2, #69	; 0x45
   27a40:	ebfff456 	bl	24ba0 <assertion_failed>
   27a44:	eaffffa7 	b	278e8 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x24>
   27a48:	e3011018 	movw	r1, #4120	; 0x1018
   27a4c:	e3401003 	movt	r1, #3
   27a50:	e301002c 	movw	r0, #4140	; 0x102c
   27a54:	e3400003 	movt	r0, #3
   27a58:	e3a02044 	mov	r2, #68	; 0x44
   27a5c:	ebfff44f 	bl	24ba0 <assertion_failed>
   27a60:	eaffffa0 	b	278e8 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x24>
   27a64:	e3011018 	movw	r1, #4120	; 0x1018
   27a68:	e3401003 	movt	r1, #3
   27a6c:	e3010090 	movw	r0, #4240	; 0x1090
   27a70:	e3400003 	movt	r0, #3
   27a74:	e3a02050 	mov	r2, #80	; 0x50
   27a78:	ebfff448 	bl	24ba0 <assertion_failed>
   27a7c:	eaffffad 	b	27938 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x74>
   27a80:	e3011018 	movw	r1, #4120	; 0x1018
   27a84:	e3401003 	movt	r1, #3
   27a88:	e30b0984 	movw	r0, #47492	; 0xb984
   27a8c:	e3400002 	movt	r0, #2
   27a90:	e3a02043 	mov	r2, #67	; 0x43
   27a94:	ebfff441 	bl	24ba0 <assertion_failed>
   27a98:	eaffff8e 	b	278d8 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x14>
   27a9c:	e3011018 	movw	r1, #4120	; 0x1018
   27aa0:	e3401003 	movt	r1, #3
   27aa4:	e3010054 	movw	r0, #4180	; 0x1054
   27aa8:	e3400003 	movt	r0, #3
   27aac:	e3a0204e 	mov	r2, #78	; 0x4e
   27ab0:	ebfff43a 	bl	24ba0 <assertion_failed>
   27ab4:	eaffff91 	b	27900 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x3c>

00027ab8 <CPWMSoundDevice::CPWMSoundDevice(CInterruptSystem*)>:
   27ab8:	e92d4010 	push	{r4, lr}
   27abc:	e3a03b02 	mov	r3, #2048	; 0x800
   27ac0:	e1a04000 	mov	r4, r0
   27ac4:	e30a2c44 	movw	r2, #44100	; 0xac44
   27ac8:	eb0001e0 	bl	28250 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>
   27acc:	e59f2048 	ldr	r2, [pc, #72]	; 27b1c <CPWMSoundDevice::CPWMSoundDevice(CInterruptSystem*)+0x64>
   27ad0:	e3a03000 	mov	r3, #0
   27ad4:	e1a00004 	mov	r0, r4
   27ad8:	e5842000 	str	r2, [r4]
   27adc:	e584308c 	str	r3, [r4, #140]	; 0x8c
   27ae0:	eb000042 	bl	27bf0 <CPWMSoundBaseDevice::GetRange() const>
   27ae4:	e3500a01 	cmp	r0, #4096	; 0x1000
   27ae8:	3a000003 	bcc	27afc <CPWMSoundDevice::CPWMSoundDevice(CInterruptSystem*)+0x44>
   27aec:	e1a00004 	mov	r0, r4
   27af0:	eb00003e 	bl	27bf0 <CPWMSoundBaseDevice::GetRange() const>
   27af4:	e3500a02 	cmp	r0, #8192	; 0x2000
   27af8:	3a000005 	bcc	27b14 <CPWMSoundDevice::CPWMSoundDevice(CInterruptSystem*)+0x5c>
   27afc:	e3011018 	movw	r1, #4120	; 0x1018
   27b00:	e3401003 	movt	r1, #3
   27b04:	e30100c0 	movw	r0, #4288	; 0x10c0
   27b08:	e3400003 	movt	r0, #3
   27b0c:	e3a02020 	mov	r2, #32
   27b10:	ebfff422 	bl	24ba0 <assertion_failed>
   27b14:	e1a00004 	mov	r0, r4
   27b18:	e8bd8010 	pop	{r4, pc}
   27b1c:	0003100c 	.word	0x0003100c

00027b20 <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)>:
   27b20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27b24:	e1a07001 	mov	r7, r1
   27b28:	e1a08002 	mov	r8, r2
   27b2c:	e1a06003 	mov	r6, r3
   27b30:	e1a04000 	mov	r4, r0
   27b34:	e59d5018 	ldr	r5, [sp, #24]
   27b38:	eb000045 	bl	27c54 <CPWMSoundBaseDevice::IsActive() const>
   27b3c:	e3500000 	cmp	r0, #0
   27b40:	1a00001a 	bne	27bb0 <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0x90>
   27b44:	e3570000 	cmp	r7, #0
   27b48:	0a00001f 	beq	27bcc <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0xac>
   27b4c:	e2463001 	sub	r3, r6, #1
   27b50:	e3530001 	cmp	r3, #1
   27b54:	9a000005 	bls	27b70 <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0x50>
   27b58:	e3011018 	movw	r1, #4120	; 0x1018
   27b5c:	e3401003 	movt	r1, #3
   27b60:	e3010114 	movw	r0, #4372	; 0x1114
   27b64:	e3400003 	movt	r0, #3
   27b68:	e3a0202c 	mov	r2, #44	; 0x2c
   27b6c:	ebfff40b 	bl	24ba0 <assertion_failed>
   27b70:	e2453008 	sub	r3, r5, #8
   27b74:	e3d33008 	bics	r3, r3, #8
   27b78:	0a000005 	beq	27b94 <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0x74>
   27b7c:	e3011018 	movw	r1, #4120	; 0x1018
   27b80:	e3401003 	movt	r1, #3
   27b84:	e3010138 	movw	r0, #4408	; 0x1138
   27b88:	e3400003 	movt	r0, #3
   27b8c:	e3a0202d 	mov	r2, #45	; 0x2d
   27b90:	ebfff402 	bl	24ba0 <assertion_failed>
   27b94:	e584708c 	str	r7, [r4, #140]	; 0x8c
   27b98:	e1a00004 	mov	r0, r4
   27b9c:	e5848090 	str	r8, [r4, #144]	; 0x90
   27ba0:	e5846094 	str	r6, [r4, #148]	; 0x94
   27ba4:	e5845098 	str	r5, [r4, #152]	; 0x98
   27ba8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   27bac:	ea00006c 	b	27d64 <CPWMSoundBaseDevice::Start()>
   27bb0:	e3011018 	movw	r1, #4120	; 0x1018
   27bb4:	e3401003 	movt	r1, #3
   27bb8:	e30100f4 	movw	r0, #4340	; 0x10f4
   27bbc:	e3400003 	movt	r0, #3
   27bc0:	e3a02029 	mov	r2, #41	; 0x29
   27bc4:	ebfff3f5 	bl	24ba0 <assertion_failed>
   27bc8:	eaffffdd 	b	27b44 <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0x24>
   27bcc:	e3011018 	movw	r1, #4120	; 0x1018
   27bd0:	e3401003 	movt	r1, #3
   27bd4:	e3010104 	movw	r0, #4356	; 0x1104
   27bd8:	e3400003 	movt	r0, #3
   27bdc:	e3a0202b 	mov	r2, #43	; 0x2b
   27be0:	ebfff3ee 	bl	24ba0 <assertion_failed>
   27be4:	eaffffd8 	b	27b4c <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0x2c>

00027be8 <CPWMSoundDevice::PlaybackActive() const>:
   27be8:	ea000019 	b	27c54 <CPWMSoundBaseDevice::IsActive() const>

00027bec <CPWMSoundDevice::CancelPlayback()>:
   27bec:	ea000001 	b	27bf8 <CPWMSoundBaseDevice::Cancel()>

00027bf0 <CPWMSoundBaseDevice::GetRange() const>:
   27bf0:	e590000c 	ldr	r0, [r0, #12]
   27bf4:	e12fff1e 	bx	lr

00027bf8 <CPWMSoundBaseDevice::Cancel()>:
   27bf8:	e92d4010 	push	{r4, lr}
   27bfc:	e1a04000 	mov	r4, r0
   27c00:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   27c04:	e3500000 	cmp	r0, #0
   27c08:	1a000003 	bne	27c1c <CPWMSoundBaseDevice::Cancel()+0x24>
   27c0c:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   27c10:	e3530001 	cmp	r3, #1
   27c14:	0a000009 	beq	27c40 <CPWMSoundBaseDevice::Cancel()+0x48>
   27c18:	e8bd8010 	pop	{r4, pc}
   27c1c:	ebffe8e9 	bl	21fc8 <EnterCritical>
   27c20:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   27c24:	e5940088 	ldr	r0, [r4, #136]	; 0x88
   27c28:	e3530001 	cmp	r3, #1
   27c2c:	0a000003 	beq	27c40 <CPWMSoundBaseDevice::Cancel()+0x48>
   27c30:	e3500000 	cmp	r0, #0
   27c34:	08bd8010 	popeq	{r4, pc}
   27c38:	e8bd4010 	pop	{r4, lr}
   27c3c:	eaffe90f 	b	22080 <LeaveCritical>
   27c40:	e3500000 	cmp	r0, #0
   27c44:	e3a03002 	mov	r3, #2
   27c48:	e5c43068 	strb	r3, [r4, #104]	; 0x68
   27c4c:	1afffff9 	bne	27c38 <CPWMSoundBaseDevice::Cancel()+0x40>
   27c50:	e8bd8010 	pop	{r4, pc}

00027c54 <CPWMSoundBaseDevice::IsActive() const>:
   27c54:	e5d00068 	ldrb	r0, [r0, #104]	; 0x68
   27c58:	e2900000 	adds	r0, r0, #0
   27c5c:	13a00001 	movne	r0, #1
   27c60:	e12fff1e 	bx	lr

00027c64 <CPWMSoundBaseDevice::GetNextChunk()>:
   27c64:	e5903084 	ldr	r3, [r0, #132]	; 0x84
   27c68:	e92d4070 	push	{r4, r5, r6, lr}
   27c6c:	e1a04000 	mov	r4, r0
   27c70:	e0803103 	add	r3, r0, r3, lsl #2
   27c74:	e593106c 	ldr	r1, [r3, #108]	; 0x6c
   27c78:	e3510000 	cmp	r1, #0
   27c7c:	0a000024 	beq	27d14 <CPWMSoundBaseDevice::GetNextChunk()+0xb0>
   27c80:	e5943000 	ldr	r3, [r4]
   27c84:	e1a00004 	mov	r0, r4
   27c88:	e5942008 	ldr	r2, [r4, #8]
   27c8c:	e5933008 	ldr	r3, [r3, #8]
   27c90:	e12fff33 	blx	r3
   27c94:	e3500000 	cmp	r0, #0
   27c98:	08bd8070 	popeq	{r4, r5, r6, pc}
   27c9c:	e1a05100 	lsl	r5, r0, #2
   27ca0:	e3750107 	cmn	r5, #-1073741823	; 0xc0000001
   27ca4:	8a000013 	bhi	27cf8 <CPWMSoundBaseDevice::GetNextChunk()+0x94>
   27ca8:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   27cac:	e0842103 	add	r2, r4, r3, lsl #2
   27cb0:	e592207c 	ldr	r2, [r2, #124]	; 0x7c
   27cb4:	e3520000 	cmp	r2, #0
   27cb8:	0a00001f 	beq	27d3c <CPWMSoundBaseDevice::GetNextChunk()+0xd8>
   27cbc:	e0843103 	add	r3, r4, r3, lsl #2
   27cc0:	e582500c 	str	r5, [r2, #12]
   27cc4:	e1a01005 	mov	r1, r5
   27cc8:	e593006c 	ldr	r0, [r3, #108]	; 0x6c
   27ccc:	eb000405 	bl	28ce8 <CleanAndInvalidateDataCacheRange>
   27cd0:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   27cd4:	e3a01020 	mov	r1, #32
   27cd8:	e0843103 	add	r3, r4, r3, lsl #2
   27cdc:	e593007c 	ldr	r0, [r3, #124]	; 0x7c
   27ce0:	eb000400 	bl	28ce8 <CleanAndInvalidateDataCacheRange>
   27ce4:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   27ce8:	e3a00001 	mov	r0, #1
   27cec:	e0233000 	eor	r3, r3, r0
   27cf0:	e5843084 	str	r3, [r4, #132]	; 0x84
   27cf4:	e8bd8070 	pop	{r4, r5, r6, pc}
   27cf8:	e3011178 	movw	r1, #4472	; 0x1178
   27cfc:	e3401003 	movt	r1, #3
   27d00:	e30101b4 	movw	r0, #4532	; 0x11b4
   27d04:	e3400003 	movt	r0, #3
   27d08:	e300212a 	movw	r2, #298	; 0x12a
   27d0c:	ebfff3a3 	bl	24ba0 <assertion_failed>
   27d10:	eaffffe4 	b	27ca8 <CPWMSoundBaseDevice::GetNextChunk()+0x44>
   27d14:	e3011178 	movw	r1, #4472	; 0x1178
   27d18:	e3401003 	movt	r1, #3
   27d1c:	e3010190 	movw	r0, #4496	; 0x1190
   27d20:	e3400003 	movt	r0, #3
   27d24:	e3002122 	movw	r2, #290	; 0x122
   27d28:	ebfff39c 	bl	24ba0 <assertion_failed>
   27d2c:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   27d30:	e0843103 	add	r3, r4, r3, lsl #2
   27d34:	e593106c 	ldr	r1, [r3, #108]	; 0x6c
   27d38:	eaffffd0 	b	27c80 <CPWMSoundBaseDevice::GetNextChunk()+0x1c>
   27d3c:	e3a02f4b 	mov	r2, #300	; 0x12c
   27d40:	e3011178 	movw	r1, #4472	; 0x1178
   27d44:	e3401003 	movt	r1, #3
   27d48:	e30101d4 	movw	r0, #4564	; 0x11d4
   27d4c:	e3400003 	movt	r0, #3
   27d50:	ebfff392 	bl	24ba0 <assertion_failed>
   27d54:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   27d58:	e0842103 	add	r2, r4, r3, lsl #2
   27d5c:	e592207c 	ldr	r2, [r2, #124]	; 0x7c
   27d60:	eaffffd5 	b	27cbc <CPWMSoundBaseDevice::GetNextChunk()+0x58>

00027d64 <CPWMSoundBaseDevice::Start()>:
   27d64:	e5d03068 	ldrb	r3, [r0, #104]	; 0x68
   27d68:	e92d4010 	push	{r4, lr}
   27d6c:	e1a04000 	mov	r4, r0
   27d70:	e3530000 	cmp	r3, #0
   27d74:	1a00003c 	bne	27e6c <CPWMSoundBaseDevice::Start()+0x108>
   27d78:	e3a03000 	mov	r3, #0
   27d7c:	e1a00004 	mov	r0, r4
   27d80:	e5843084 	str	r3, [r4, #132]	; 0x84
   27d84:	ebffffb6 	bl	27c64 <CPWMSoundBaseDevice::GetNextChunk()>
   27d88:	e3500000 	cmp	r0, #0
   27d8c:	08bd8010 	popeq	{r4, pc}
   27d90:	e5943064 	ldr	r3, [r4, #100]	; 0x64
   27d94:	e3a02001 	mov	r2, #1
   27d98:	e5c42068 	strb	r2, [r4, #104]	; 0x68
   27d9c:	e3530000 	cmp	r3, #0
   27da0:	1a000009 	bne	27dcc <CPWMSoundBaseDevice::Start()+0x68>
   27da4:	e5940004 	ldr	r0, [r4, #4]
   27da8:	e3500000 	cmp	r0, #0
   27dac:	0a00005a 	beq	27f1c <CPWMSoundBaseDevice::Start()+0x1b8>
   27db0:	e1a03004 	mov	r3, r4
   27db4:	e3082164 	movw	r2, #33124	; 0x8164
   27db8:	e3402002 	movt	r2, #2
   27dbc:	e3a01010 	mov	r1, #16
   27dc0:	ebfffd01 	bl	271cc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   27dc4:	e3a03001 	mov	r3, #1
   27dc8:	e5843064 	str	r3, [r4, #100]	; 0x64
   27dcc:	e3a02903 	mov	r2, #49152	; 0xc000
   27dd0:	e3432f20 	movt	r2, #16160	; 0x3f20
   27dd4:	e3003707 	movw	r3, #1799	; 0x707
   27dd8:	e3483000 	movt	r3, #32768	; 0x8000
   27ddc:	e3a01a07 	mov	r1, #28672	; 0x7000
   27de0:	e3431f00 	movt	r1, #16128	; 0x3f00
   27de4:	e5823008 	str	r3, [r2, #8]
   27de8:	e5923000 	ldr	r3, [r2]
   27dec:	e3c33b01 	bic	r3, r3, #1024	; 0x400
   27df0:	e3c33004 	bic	r3, r3, #4
   27df4:	e5823000 	str	r3, [r2]
   27df8:	e5913000 	ldr	r3, [r1]
   27dfc:	e3130004 	tst	r3, #4
   27e00:	1a000027 	bne	27ea4 <CPWMSoundBaseDevice::Start()+0x140>
   27e04:	e3a03a07 	mov	r3, #28672	; 0x7000
   27e08:	e3433f00 	movt	r3, #16128	; 0x3f00
   27e0c:	e5933fe0 	ldr	r3, [r3, #4064]	; 0xfe0
   27e10:	e3130001 	tst	r3, #1
   27e14:	1a00001b 	bne	27e88 <CPWMSoundBaseDevice::Start()+0x124>
   27e18:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   27e1c:	e3530000 	cmp	r3, #0
   27e20:	0a000035 	beq	27efc <CPWMSoundBaseDevice::Start()+0x198>
   27e24:	e3a02a07 	mov	r2, #28672	; 0x7000
   27e28:	e3432f00 	movt	r2, #16128	; 0x3f00
   27e2c:	e2833103 	add	r3, r3, #-1073741824	; 0xc0000000
   27e30:	e3a01001 	mov	r1, #1
   27e34:	e34110f1 	movt	r1, #4337	; 0x10f1
   27e38:	e5823004 	str	r3, [r2, #4]
   27e3c:	e1a00004 	mov	r0, r4
   27e40:	e5821000 	str	r1, [r2]
   27e44:	ebffff86 	bl	27c64 <CPWMSoundBaseDevice::GetNextChunk()>
   27e48:	e3500000 	cmp	r0, #0
   27e4c:	18bd8010 	popne	{r4, pc}
   27e50:	e5940088 	ldr	r0, [r4, #136]	; 0x88
   27e54:	e3500000 	cmp	r0, #0
   27e58:	1a000018 	bne	27ec0 <CPWMSoundBaseDevice::Start()+0x15c>
   27e5c:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   27e60:	e3530001 	cmp	r3, #1
   27e64:	0a000019 	beq	27ed0 <CPWMSoundBaseDevice::Start()+0x16c>
   27e68:	e8bd8010 	pop	{r4, pc}
   27e6c:	e3011178 	movw	r1, #4472	; 0x1178
   27e70:	e3401003 	movt	r1, #3
   27e74:	e30101f8 	movw	r0, #4600	; 0x11f8
   27e78:	e3400003 	movt	r0, #3
   27e7c:	e3a020cb 	mov	r2, #203	; 0xcb
   27e80:	ebfff346 	bl	24ba0 <assertion_failed>
   27e84:	eaffffbb 	b	27d78 <CPWMSoundBaseDevice::Start()+0x14>
   27e88:	e3011178 	movw	r1, #4472	; 0x1178
   27e8c:	e3401003 	movt	r1, #3
   27e90:	e3010248 	movw	r0, #4680	; 0x1248
   27e94:	e3400003 	movt	r0, #3
   27e98:	e3a020f0 	mov	r2, #240	; 0xf0
   27e9c:	ebfff33f 	bl	24ba0 <assertion_failed>
   27ea0:	eaffffdc 	b	27e18 <CPWMSoundBaseDevice::Start()+0xb4>
   27ea4:	e3011178 	movw	r1, #4472	; 0x1178
   27ea8:	e3401003 	movt	r1, #3
   27eac:	e3010210 	movw	r0, #4624	; 0x1210
   27eb0:	e3400003 	movt	r0, #3
   27eb4:	e3a020ef 	mov	r2, #239	; 0xef
   27eb8:	ebfff338 	bl	24ba0 <assertion_failed>
   27ebc:	eaffffd0 	b	27e04 <CPWMSoundBaseDevice::Start()+0xa0>
   27ec0:	ebffe840 	bl	21fc8 <EnterCritical>
   27ec4:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   27ec8:	e3530001 	cmp	r3, #1
   27ecc:	1a000005 	bne	27ee8 <CPWMSoundBaseDevice::Start()+0x184>
   27ed0:	e3a03a07 	mov	r3, #28672	; 0x7000
   27ed4:	e3433f00 	movt	r3, #16128	; 0x3f00
   27ed8:	e3a01000 	mov	r1, #0
   27edc:	e3a02003 	mov	r2, #3
   27ee0:	e583101c 	str	r1, [r3, #28]
   27ee4:	e5c42068 	strb	r2, [r4, #104]	; 0x68
   27ee8:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   27eec:	e3530000 	cmp	r3, #0
   27ef0:	08bd8010 	popeq	{r4, pc}
   27ef4:	e8bd4010 	pop	{r4, lr}
   27ef8:	eaffe860 	b	22080 <LeaveCritical>
   27efc:	e3011178 	movw	r1, #4472	; 0x1178
   27f00:	e3401003 	movt	r1, #3
   27f04:	e3010280 	movw	r0, #4736	; 0x1280
   27f08:	e3400003 	movt	r0, #3
   27f0c:	e3a020f2 	mov	r2, #242	; 0xf2
   27f10:	ebfff322 	bl	24ba0 <assertion_failed>
   27f14:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   27f18:	eaffffc1 	b	27e24 <CPWMSoundBaseDevice::Start()+0xc0>
   27f1c:	e3011178 	movw	r1, #4472	; 0x1178
   27f20:	e3401003 	movt	r1, #3
   27f24:	e30a0978 	movw	r0, #43384	; 0xa978
   27f28:	e3400002 	movt	r0, #2
   27f2c:	e3a020da 	mov	r2, #218	; 0xda
   27f30:	ebfff31a 	bl	24ba0 <assertion_failed>
   27f34:	e5940004 	ldr	r0, [r4, #4]
   27f38:	eaffff9c 	b	27db0 <CPWMSoundBaseDevice::Start()+0x4c>

00027f3c <CPWMSoundBaseDevice::RunPWM()>:
   27f3c:	e3a03000 	mov	r3, #0
   27f40:	e92d4010 	push	{r4, lr}
   27f44:	e1a04000 	mov	r4, r0
   27f48:	e1a02003 	mov	r2, r3
   27f4c:	e2800060 	add	r0, r0, #96	; 0x60
   27f50:	e3a01002 	mov	r1, #2
   27f54:	eb000859 	bl	2a0c0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>
   27f58:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   27f5c:	ebffeb36 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
   27f60:	e594200c 	ldr	r2, [r4, #12]
   27f64:	e2423c01 	sub	r3, r2, #256	; 0x100
   27f68:	e3530cff 	cmp	r3, #65280	; 0xff00
   27f6c:	3a000006 	bcc	27f8c <CPWMSoundBaseDevice::RunPWM()+0x50>
   27f70:	e300213e 	movw	r2, #318	; 0x13e
   27f74:	e3011178 	movw	r1, #4472	; 0x1178
   27f78:	e3401003 	movt	r1, #3
   27f7c:	e3010298 	movw	r0, #4760	; 0x1298
   27f80:	e3400003 	movt	r0, #3
   27f84:	ebfff305 	bl	24ba0 <assertion_failed>
   27f88:	e594200c 	ldr	r2, [r4, #12]
   27f8c:	e3a03903 	mov	r3, #49152	; 0xc000
   27f90:	e3433f20 	movt	r3, #16160	; 0x3f20
   27f94:	e3021161 	movw	r1, #8545	; 0x2161
   27f98:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   27f9c:	e5832010 	str	r2, [r3, #16]
   27fa0:	e594200c 	ldr	r2, [r4, #12]
   27fa4:	e8bd4010 	pop	{r4, lr}
   27fa8:	e5832020 	str	r2, [r3, #32]
   27fac:	e5831000 	str	r1, [r3]
   27fb0:	eaffeb21 	b	22c3c <CTimer::SimpleusDelay(unsigned int)>

00027fb4 <CPWMSoundBaseDevice::StopPWM()>:
   27fb4:	e3a03903 	mov	r3, #49152	; 0xc000
   27fb8:	e3433f20 	movt	r3, #16160	; 0x3f20
   27fbc:	e3a02000 	mov	r2, #0
   27fc0:	e92d4010 	push	{r4, lr}
   27fc4:	e1a04000 	mov	r4, r0
   27fc8:	e5832008 	str	r2, [r3, #8]
   27fcc:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   27fd0:	e5832000 	str	r2, [r3]
   27fd4:	ebffeb18 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
   27fd8:	e2840060 	add	r0, r4, #96	; 0x60
   27fdc:	eb000876 	bl	2a1bc <CGPIOClock::Stop()>
   27fe0:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   27fe4:	e8bd4010 	pop	{r4, lr}
   27fe8:	eaffeb13 	b	22c3c <CTimer::SimpleusDelay(unsigned int)>

00027fec <CPWMSoundBaseDevice::InterruptHandler()>:
   27fec:	e5d03068 	ldrb	r3, [r0, #104]	; 0x68
   27ff0:	e92d4070 	push	{r4, r5, r6, lr}
   27ff4:	e1a04000 	mov	r4, r0
   27ff8:	e3530000 	cmp	r3, #0
   27ffc:	0a000048 	beq	28124 <CPWMSoundBaseDevice::InterruptHandler()+0x138>
   28000:	e3a03a07 	mov	r3, #28672	; 0x7000
   28004:	e3433f00 	movt	r3, #16128	; 0x3f00
   28008:	e5933fe0 	ldr	r3, [r3, #4064]	; 0xfe0
   2800c:	e3130001 	tst	r3, #1
   28010:	0a00003c 	beq	28108 <CPWMSoundBaseDevice::InterruptHandler()+0x11c>
   28014:	e3a03a07 	mov	r3, #28672	; 0x7000
   28018:	e3433f00 	movt	r3, #16128	; 0x3f00
   2801c:	e3a02001 	mov	r2, #1
   28020:	e5832fe0 	str	r2, [r3, #4064]	; 0xfe0
   28024:	e5935000 	ldr	r5, [r3]
   28028:	e3150004 	tst	r5, #4
   2802c:	0a00002e 	beq	280ec <CPWMSoundBaseDevice::InterruptHandler()+0x100>
   28030:	e3a03a07 	mov	r3, #28672	; 0x7000
   28034:	e3433f00 	movt	r3, #16128	; 0x3f00
   28038:	e3150c01 	tst	r5, #256	; 0x100
   2803c:	e5835000 	str	r5, [r3]
   28040:	1a000026 	bne	280e0 <CPWMSoundBaseDevice::InterruptHandler()+0xf4>
   28044:	e5940088 	ldr	r0, [r4, #136]	; 0x88
   28048:	e3500000 	cmp	r0, #0
   2804c:	1a00003b 	bne	28140 <CPWMSoundBaseDevice::InterruptHandler()+0x154>
   28050:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   28054:	e6ef3073 	uxtb	r3, r3
   28058:	e3530002 	cmp	r3, #2
   2805c:	0a000012 	beq	280ac <CPWMSoundBaseDevice::InterruptHandler()+0xc0>
   28060:	e3530003 	cmp	r3, #3
   28064:	0a00003b 	beq	28158 <CPWMSoundBaseDevice::InterruptHandler()+0x16c>
   28068:	e3530001 	cmp	r3, #1
   2806c:	0a00000a 	beq	2809c <CPWMSoundBaseDevice::InterruptHandler()+0xb0>
   28070:	e3011178 	movw	r1, #4472	; 0x1178
   28074:	e3401003 	movt	r1, #3
   28078:	e30b0138 	movw	r0, #45368	; 0xb138
   2807c:	e3400002 	movt	r0, #2
   28080:	e300218f 	movw	r2, #399	; 0x18f
   28084:	ebfff2c5 	bl	24ba0 <assertion_failed>
   28088:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   2808c:	e3530000 	cmp	r3, #0
   28090:	08bd8070 	popeq	{r4, r5, r6, pc}
   28094:	e8bd4070 	pop	{r4, r5, r6, lr}
   28098:	eaffe7f8 	b	22080 <LeaveCritical>
   2809c:	e1a00004 	mov	r0, r4
   280a0:	ebfffeef 	bl	27c64 <CPWMSoundBaseDevice::GetNextChunk()>
   280a4:	e3500000 	cmp	r0, #0
   280a8:	1afffff6 	bne	28088 <CPWMSoundBaseDevice::InterruptHandler()+0x9c>
   280ac:	e3a03a07 	mov	r3, #28672	; 0x7000
   280b0:	e3433f00 	movt	r3, #16128	; 0x3f00
   280b4:	e3a01000 	mov	r1, #0
   280b8:	e3a02903 	mov	r2, #49152	; 0xc000
   280bc:	e3432f20 	movt	r2, #16160	; 0x3f20
   280c0:	e583101c 	str	r1, [r3, #28]
   280c4:	e3a01003 	mov	r1, #3
   280c8:	e5923000 	ldr	r3, [r2]
   280cc:	e3833b01 	orr	r3, r3, #1024	; 0x400
   280d0:	e3833004 	orr	r3, r3, #4
   280d4:	e5823000 	str	r3, [r2]
   280d8:	e5c41068 	strb	r1, [r4, #104]	; 0x68
   280dc:	eaffffe9 	b	28088 <CPWMSoundBaseDevice::InterruptHandler()+0x9c>
   280e0:	e3a03004 	mov	r3, #4
   280e4:	e5c43068 	strb	r3, [r4, #104]	; 0x68
   280e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   280ec:	e3011178 	movw	r1, #4472	; 0x1178
   280f0:	e3401003 	movt	r1, #3
   280f4:	e30102f8 	movw	r0, #4856	; 0x12f8
   280f8:	e3400003 	movt	r0, #3
   280fc:	e3002166 	movw	r2, #358	; 0x166
   28100:	ebfff2a6 	bl	24ba0 <assertion_failed>
   28104:	eaffffc9 	b	28030 <CPWMSoundBaseDevice::InterruptHandler()+0x44>
   28108:	e3011178 	movw	r1, #4472	; 0x1178
   2810c:	e3401003 	movt	r1, #3
   28110:	e30102e0 	movw	r0, #4832	; 0x12e0
   28114:	e3400003 	movt	r0, #3
   28118:	e3002162 	movw	r2, #354	; 0x162
   2811c:	ebfff29f 	bl	24ba0 <assertion_failed>
   28120:	eaffffbb 	b	28014 <CPWMSoundBaseDevice::InterruptHandler()+0x28>
   28124:	e3011178 	movw	r1, #4472	; 0x1178
   28128:	e3401003 	movt	r1, #3
   2812c:	e30102c8 	movw	r0, #4808	; 0x12c8
   28130:	e3400003 	movt	r0, #3
   28134:	e300215a 	movw	r2, #346	; 0x15a
   28138:	ebfff298 	bl	24ba0 <assertion_failed>
   2813c:	eaffffaf 	b	28000 <CPWMSoundBaseDevice::InterruptHandler()+0x14>
   28140:	ebffe7a0 	bl	21fc8 <EnterCritical>
   28144:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   28148:	e6ef3073 	uxtb	r3, r3
   2814c:	e3530002 	cmp	r3, #2
   28150:	1affffc2 	bne	28060 <CPWMSoundBaseDevice::InterruptHandler()+0x74>
   28154:	eaffffd4 	b	280ac <CPWMSoundBaseDevice::InterruptHandler()+0xc0>
   28158:	e3a03000 	mov	r3, #0
   2815c:	e5c43068 	strb	r3, [r4, #104]	; 0x68
   28160:	eaffffc8 	b	28088 <CPWMSoundBaseDevice::InterruptHandler()+0x9c>

00028164 <CPWMSoundBaseDevice::InterruptStub(void*)>:
   28164:	e92d4010 	push	{r4, lr}
   28168:	e2504000 	subs	r4, r0, #0
   2816c:	0a000002 	beq	2817c <CPWMSoundBaseDevice::InterruptStub(void*)+0x18>
   28170:	e1a00004 	mov	r0, r4
   28174:	e8bd4010 	pop	{r4, lr}
   28178:	eaffff9b 	b	27fec <CPWMSoundBaseDevice::InterruptHandler()>
   2817c:	e3011178 	movw	r1, #4472	; 0x1178
   28180:	e3401003 	movt	r1, #3
   28184:	e30a0940 	movw	r0, #43328	; 0xa940
   28188:	e3400002 	movt	r0, #2
   2818c:	e3002199 	movw	r2, #409	; 0x199
   28190:	ebfff282 	bl	24ba0 <assertion_failed>
   28194:	e1a00004 	mov	r0, r4
   28198:	e8bd4010 	pop	{r4, lr}
   2819c:	eaffff92 	b	27fec <CPWMSoundBaseDevice::InterruptHandler()>

000281a0 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>:
   281a0:	e3510001 	cmp	r1, #1
   281a4:	e92d4070 	push	{r4, r5, r6, lr}
   281a8:	e1a05001 	mov	r5, r1
   281ac:	e1a04000 	mov	r4, r0
   281b0:	9a000005 	bls	281cc <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x2c>
   281b4:	e3011178 	movw	r1, #4472	; 0x1178
   281b8:	e3401003 	movt	r1, #3
   281bc:	e3010308 	movw	r0, #4872	; 0x1308
   281c0:	e3400003 	movt	r0, #3
   281c4:	e3a02e1a 	mov	r2, #416	; 0x1a0
   281c8:	ebfff274 	bl	24ba0 <assertion_failed>
   281cc:	e5940008 	ldr	r0, [r4, #8]
   281d0:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   281d4:	8a000018 	bhi	2823c <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x9c>
   281d8:	e1a00100 	lsl	r0, r0, #2
   281dc:	ebffe76e 	bl	21f9c <operator new[](unsigned int)>
   281e0:	e0843105 	add	r3, r4, r5, lsl #2
   281e4:	e583006c 	str	r0, [r3, #108]	; 0x6c
   281e8:	e0844105 	add	r4, r4, r5, lsl #2
   281ec:	e3a0003f 	mov	r0, #63	; 0x3f
   281f0:	ebffe769 	bl	21f9c <operator new[](unsigned int)>
   281f4:	e280301f 	add	r3, r0, #31
   281f8:	e3c3301f 	bic	r3, r3, #31
   281fc:	e3a02000 	mov	r2, #0
   28200:	e594106c 	ldr	r1, [r4, #108]	; 0x6c
   28204:	e300e349 	movw	lr, #841	; 0x349
   28208:	e340e005 	movt	lr, #5
   2820c:	e30cc018 	movw	ip, #49176	; 0xc018
   28210:	e347ce20 	movt	ip, #32288	; 0x7e20
   28214:	e2811103 	add	r1, r1, #-1073741824	; 0xc0000000
   28218:	e5840074 	str	r0, [r4, #116]	; 0x74
   2821c:	e584307c 	str	r3, [r4, #124]	; 0x7c
   28220:	e5831004 	str	r1, [r3, #4]
   28224:	e583e000 	str	lr, [r3]
   28228:	e583c008 	str	ip, [r3, #8]
   2822c:	e5832010 	str	r2, [r3, #16]
   28230:	e5832018 	str	r2, [r3, #24]
   28234:	e583201c 	str	r2, [r3, #28]
   28238:	e8bd8070 	pop	{r4, r5, r6, pc}
   2823c:	e3e00000 	mvn	r0, #0
   28240:	ebffe755 	bl	21f9c <operator new[](unsigned int)>
   28244:	e0843105 	add	r3, r4, r5, lsl #2
   28248:	e583006c 	str	r0, [r3, #108]	; 0x6c
   2824c:	eaffffe5 	b	281e8 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x48>

00028250 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>:
   28250:	e92d4070 	push	{r4, r5, r6, lr}
   28254:	e1a0e002 	mov	lr, r2
   28258:	e30b2280 	movw	r2, #45696	; 0xb280
   2825c:	e3402ee6 	movt	r2, #3814	; 0xee6
   28260:	e1a04000 	mov	r4, r0
   28264:	e59f5184 	ldr	r5, [pc, #388]	; 283f0 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x1a0>
   28268:	e082c0ae 	add	ip, r2, lr, lsr #1
   2826c:	e2800010 	add	r0, r0, #16
   28270:	e3a02004 	mov	r2, #4
   28274:	e5841004 	str	r1, [r4, #4]
   28278:	e3a01036 	mov	r1, #54	; 0x36
   2827c:	e73cfe1c 	udiv	ip, ip, lr
   28280:	e5843008 	str	r3, [r4, #8]
   28284:	e5845000 	str	r5, [r4]
   28288:	e3a03000 	mov	r3, #0
   2828c:	e584c00c 	str	ip, [r4, #12]
   28290:	ebffe609 	bl	21abc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   28294:	e3a03000 	mov	r3, #0
   28298:	e3a02004 	mov	r2, #4
   2829c:	e3a01037 	mov	r1, #55	; 0x37
   282a0:	e2840038 	add	r0, r4, #56	; 0x38
   282a4:	ebffe604 	bl	21abc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   282a8:	e3a02006 	mov	r2, #6
   282ac:	e1a01002 	mov	r1, r2
   282b0:	e2840060 	add	r0, r4, #96	; 0x60
   282b4:	eb00075d 	bl	2a030 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>
   282b8:	e5941004 	ldr	r1, [r4, #4]
   282bc:	e3a03000 	mov	r3, #0
   282c0:	e3a02001 	mov	r2, #1
   282c4:	e1510003 	cmp	r1, r3
   282c8:	e5842088 	str	r2, [r4, #136]	; 0x88
   282cc:	e5843064 	str	r3, [r4, #100]	; 0x64
   282d0:	e5c43068 	strb	r3, [r4, #104]	; 0x68
   282d4:	0a00003e 	beq	283d4 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x184>
   282d8:	e5943008 	ldr	r3, [r4, #8]
   282dc:	e3530000 	cmp	r3, #0
   282e0:	0a000024 	beq	28378 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x128>
   282e4:	e3130001 	tst	r3, #1
   282e8:	1a00002b 	bne	2839c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x14c>
   282ec:	e3a01000 	mov	r1, #0
   282f0:	e1a00004 	mov	r0, r4
   282f4:	ebffffa9 	bl	281a0 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>
   282f8:	e3a01001 	mov	r1, #1
   282fc:	e1a00004 	mov	r0, r4
   28300:	ebffffa6 	bl	281a0 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>
   28304:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   28308:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
   2830c:	e1a00004 	mov	r0, r4
   28310:	e283c103 	add	ip, r3, #-1073741824	; 0xc0000000
   28314:	e2821103 	add	r1, r2, #-1073741824	; 0xc0000000
   28318:	e582c014 	str	ip, [r2, #20]
   2831c:	e5831014 	str	r1, [r3, #20]
   28320:	ebffff05 	bl	27f3c <CPWMSoundBaseDevice::RunPWM()>
   28324:	e3a03a07 	mov	r3, #28672	; 0x7000
   28328:	e3433f00 	movt	r3, #16128	; 0x3f00
   2832c:	e5933020 	ldr	r3, [r3, #32]
   28330:	e3130201 	tst	r3, #268435456	; 0x10000000
   28334:	1a00001f 	bne	283b8 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x168>
   28338:	e3a05a07 	mov	r5, #28672	; 0x7000
   2833c:	e3435f00 	movt	r5, #16128	; 0x3f00
   28340:	e5953ff0 	ldr	r3, [r5, #4080]	; 0xff0
   28344:	e3833001 	orr	r3, r3, #1
   28348:	e5853ff0 	str	r3, [r5, #4080]	; 0xff0
   2834c:	ebffea77 	bl	22d30 <CTimer::Get()>
   28350:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   28354:	ebffea38 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
   28358:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   2835c:	e1a02005 	mov	r2, r5
   28360:	e5853000 	str	r3, [r5]
   28364:	e5923000 	ldr	r3, [r2]
   28368:	e3530000 	cmp	r3, #0
   2836c:	bafffffc 	blt	28364 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x114>
   28370:	e1a00004 	mov	r0, r4
   28374:	e8bd8070 	pop	{r4, r5, r6, pc}
   28378:	e3011178 	movw	r1, #4472	; 0x1178
   2837c:	e3401003 	movt	r1, #3
   28380:	e3010314 	movw	r0, #4884	; 0x1314
   28384:	e3400003 	movt	r0, #3
   28388:	e3a02089 	mov	r2, #137	; 0x89
   2838c:	ebfff203 	bl	24ba0 <assertion_failed>
   28390:	e5943008 	ldr	r3, [r4, #8]
   28394:	e3130001 	tst	r3, #1
   28398:	0affffd3 	beq	282ec <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x9c>
   2839c:	e3011178 	movw	r1, #4472	; 0x1178
   283a0:	e3401003 	movt	r1, #3
   283a4:	e3010328 	movw	r0, #4904	; 0x1328
   283a8:	e3400003 	movt	r0, #3
   283ac:	e3a0208a 	mov	r2, #138	; 0x8a
   283b0:	ebfff1fa 	bl	24ba0 <assertion_failed>
   283b4:	eaffffcc 	b	282ec <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x9c>
   283b8:	e3011178 	movw	r1, #4472	; 0x1178
   283bc:	e3401003 	movt	r1, #3
   283c0:	e3010340 	movw	r0, #4928	; 0x1340
   283c4:	e3400003 	movt	r0, #3
   283c8:	e3a02098 	mov	r2, #152	; 0x98
   283cc:	ebfff1f3 	bl	24ba0 <assertion_failed>
   283d0:	eaffffd8 	b	28338 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0xe8>
   283d4:	e3011178 	movw	r1, #4472	; 0x1178
   283d8:	e3401003 	movt	r1, #3
   283dc:	e30a0978 	movw	r0, #43384	; 0xa978
   283e0:	e3400002 	movt	r0, #2
   283e4:	e3a02088 	mov	r2, #136	; 0x88
   283e8:	ebfff1ec 	bl	24ba0 <assertion_failed>
   283ec:	eaffffb9 	b	282d8 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x88>
   283f0:	0003116c 	.word	0x0003116c

000283f4 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>:
   283f4:	e5d03068 	ldrb	r3, [r0, #104]	; 0x68
   283f8:	e59f2108 	ldr	r2, [pc, #264]	; 28508 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x114>
   283fc:	e3530000 	cmp	r3, #0
   28400:	e92d4010 	push	{r4, lr}
   28404:	e1a04000 	mov	r4, r0
   28408:	e5802000 	str	r2, [r0]
   2840c:	1a00002b 	bne	284c0 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xcc>
   28410:	e1a00004 	mov	r0, r4
   28414:	ebfffee6 	bl	27fb4 <CPWMSoundBaseDevice::StopPWM()>
   28418:	e5943004 	ldr	r3, [r4, #4]
   2841c:	e3530000 	cmp	r3, #0
   28420:	0a000031 	beq	284ec <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xf8>
   28424:	e5943064 	ldr	r3, [r4, #100]	; 0x64
   28428:	e3530000 	cmp	r3, #0
   2842c:	1a00002a 	bne	284dc <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xe8>
   28430:	e5940074 	ldr	r0, [r4, #116]	; 0x74
   28434:	e3a03000 	mov	r3, #0
   28438:	e5843004 	str	r3, [r4, #4]
   2843c:	e1500003 	cmp	r0, r3
   28440:	e584307c 	str	r3, [r4, #124]	; 0x7c
   28444:	e5843080 	str	r3, [r4, #128]	; 0x80
   28448:	0a000000 	beq	28450 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x5c>
   2844c:	ebffe6d4 	bl	21fa4 <operator delete[](void*)>
   28450:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   28454:	e3a03000 	mov	r3, #0
   28458:	e5843074 	str	r3, [r4, #116]	; 0x74
   2845c:	e1500003 	cmp	r0, r3
   28460:	0a000000 	beq	28468 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x74>
   28464:	ebffe6ce 	bl	21fa4 <operator delete[](void*)>
   28468:	e594006c 	ldr	r0, [r4, #108]	; 0x6c
   2846c:	e3a03000 	mov	r3, #0
   28470:	e5843078 	str	r3, [r4, #120]	; 0x78
   28474:	e1500003 	cmp	r0, r3
   28478:	0a000000 	beq	28480 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x8c>
   2847c:	ebffe6c8 	bl	21fa4 <operator delete[](void*)>
   28480:	e5940070 	ldr	r0, [r4, #112]	; 0x70
   28484:	e3a03000 	mov	r3, #0
   28488:	e584306c 	str	r3, [r4, #108]	; 0x6c
   2848c:	e1500003 	cmp	r0, r3
   28490:	0a000000 	beq	28498 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xa4>
   28494:	ebffe6c2 	bl	21fa4 <operator delete[](void*)>
   28498:	e3a03000 	mov	r3, #0
   2849c:	e2840060 	add	r0, r4, #96	; 0x60
   284a0:	e5843070 	str	r3, [r4, #112]	; 0x70
   284a4:	eb0006f9 	bl	2a090 <CGPIOClock::~CGPIOClock()>
   284a8:	e2840038 	add	r0, r4, #56	; 0x38
   284ac:	ebffe2e5 	bl	21048 <CGPIOPin::~CGPIOPin()>
   284b0:	e2840010 	add	r0, r4, #16
   284b4:	ebffe2e3 	bl	21048 <CGPIOPin::~CGPIOPin()>
   284b8:	e1a00004 	mov	r0, r4
   284bc:	e8bd8010 	pop	{r4, pc}
   284c0:	e3011178 	movw	r1, #4472	; 0x1178
   284c4:	e3401003 	movt	r1, #3
   284c8:	e30101f8 	movw	r0, #4600	; 0x11f8
   284cc:	e3400003 	movt	r0, #3
   284d0:	e3a020a8 	mov	r2, #168	; 0xa8
   284d4:	ebfff1b1 	bl	24ba0 <assertion_failed>
   284d8:	eaffffcc 	b	28410 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x1c>
   284dc:	e3a01010 	mov	r1, #16
   284e0:	e5940004 	ldr	r0, [r4, #4]
   284e4:	ebfffb71 	bl	272b0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   284e8:	eaffffd0 	b	28430 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x3c>
   284ec:	e3011178 	movw	r1, #4472	; 0x1178
   284f0:	e3401003 	movt	r1, #3
   284f4:	e30a0978 	movw	r0, #43384	; 0xa978
   284f8:	e3400002 	movt	r0, #2
   284fc:	e3a020ae 	mov	r2, #174	; 0xae
   28500:	ebfff1a6 	bl	24ba0 <assertion_failed>
   28504:	eaffffc6 	b	28424 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x30>
   28508:	0003116c 	.word	0x0003116c

0002850c <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>:
   2850c:	e92d4010 	push	{r4, lr}
   28510:	e1a04000 	mov	r4, r0
   28514:	ebffffb6 	bl	283f4 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>
   28518:	e1a00004 	mov	r0, r4
   2851c:	e3a0108c 	mov	r1, #140	; 0x8c
   28520:	ebffe6a0 	bl	21fa8 <operator delete(void*, unsigned int)>
   28524:	e1a00004 	mov	r0, r4
   28528:	e8bd8010 	pop	{r4, pc}

0002852c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2852c:	e12fff1e 	bx	lr

00028530 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   28530:	e92d4010 	push	{r4, lr}
   28534:	e3a01010 	mov	r1, #16
   28538:	e1a04000 	mov	r4, r0
   2853c:	ebffe699 	bl	21fa8 <operator delete(void*, unsigned int)>
   28540:	e1a00004 	mov	r0, r4
   28544:	e8bd8010 	pop	{r4, pc}

00028548 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
   28548:	e92d4070 	push	{r4, r5, r6, lr}
   2854c:	e30248a0 	movw	r4, #10400	; 0x28a0
   28550:	e3404143 	movt	r4, #323	; 0x143
   28554:	e1a05000 	mov	r5, r0
   28558:	e1a06001 	mov	r6, r1
   2855c:	e5940000 	ldr	r0, [r4]
   28560:	e3500000 	cmp	r0, #0
   28564:	1a00001a 	bne	285d4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
   28568:	e1d500bc 	ldrh	r0, [r5, #12]
   2856c:	e1d530be 	ldrh	r3, [r5, #14]
   28570:	e5856008 	str	r6, [r5, #8]
   28574:	e0402003 	sub	r2, r0, r3
   28578:	e6bf2072 	sxth	r2, r2
   2857c:	e3520000 	cmp	r2, #0
   28580:	da00000c 	ble	285b8 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
   28584:	e3560000 	cmp	r6, #0
   28588:	1a00000c 	bne	285c0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
   2858c:	e2833001 	add	r3, r3, #1
   28590:	e6ff3073 	uxth	r3, r3
   28594:	e1c530be 	strh	r3, [r5, #14]
   28598:	e5951004 	ldr	r1, [r5, #4]
   2859c:	e1833800 	orr	r3, r3, r0, lsl #16
   285a0:	e5942004 	ldr	r2, [r4, #4]
   285a4:	e7823101 	str	r3, [r2, r1, lsl #2]
   285a8:	e5943000 	ldr	r3, [r4]
   285ac:	e3530000 	cmp	r3, #0
   285b0:	1a000005 	bne	285cc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
   285b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   285b8:	e3560000 	cmp	r6, #0
   285bc:	1a000006 	bne	285dc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
   285c0:	e5943000 	ldr	r3, [r4]
   285c4:	e3530000 	cmp	r3, #0
   285c8:	08bd8070 	popeq	{r4, r5, r6, pc}
   285cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   285d0:	eaffe6aa 	b	22080 <LeaveCritical>
   285d4:	ebffe67b 	bl	21fc8 <EnterCritical>
   285d8:	eaffffe2 	b	28568 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
   285dc:	e2800001 	add	r0, r0, #1
   285e0:	e6ff0070 	uxth	r0, r0
   285e4:	e1c500bc 	strh	r0, [r5, #12]
   285e8:	eaffffea 	b	28598 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

000285ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
   285ec:	e3510001 	cmp	r1, #1
   285f0:	e92d4030 	push	{r4, r5, lr}
   285f4:	e59f20dc 	ldr	r2, [pc, #220]	; 286d8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
   285f8:	e3a03000 	mov	r3, #0
   285fc:	e24dd024 	sub	sp, sp, #36	; 0x24
   28600:	e1a04000 	mov	r4, r0
   28604:	e5801004 	str	r1, [r0, #4]
   28608:	e5802000 	str	r2, [r0]
   2860c:	e1c030bc 	strh	r3, [r0, #12]
   28610:	e1c030be 	strh	r3, [r0, #14]
   28614:	9a000002 	bls	28624 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
   28618:	e1a00004 	mov	r0, r4
   2861c:	e28dd024 	add	sp, sp, #36	; 0x24
   28620:	e8bd8030 	pop	{r4, r5, pc}
   28624:	e30258a0 	movw	r5, #10400	; 0x28a0
   28628:	e3405143 	movt	r5, #323	; 0x143
   2862c:	e5950000 	ldr	r0, [r5]
   28630:	e1500003 	cmp	r0, r3
   28634:	1a000009 	bne	28660 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
   28638:	e5953004 	ldr	r3, [r5, #4]
   2863c:	e3530000 	cmp	r3, #0
   28640:	0a00000a 	beq	28670 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
   28644:	e5953004 	ldr	r3, [r5, #4]
   28648:	e3530000 	cmp	r3, #0
   2864c:	0afffff1 	beq	28618 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   28650:	e3a01000 	mov	r1, #0
   28654:	e1a00004 	mov	r0, r4
   28658:	ebffffba 	bl	28548 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   2865c:	eaffffed 	b	28618 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   28660:	ebffe658 	bl	21fc8 <EnterCritical>
   28664:	e5953004 	ldr	r3, [r5, #4]
   28668:	e3530000 	cmp	r3, #0
   2866c:	1a00000f 	bne	286b0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
   28670:	e28d0008 	add	r0, sp, #8
   28674:	ebffe1ff 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   28678:	e3a03000 	mov	r3, #0
   2867c:	e58d3000 	str	r3, [sp]
   28680:	e3a03010 	mov	r3, #16
   28684:	e08d2003 	add	r2, sp, r3
   28688:	e28d0008 	add	r0, sp, #8
   2868c:	e3a01010 	mov	r1, #16
   28690:	e3401004 	movt	r1, #4
   28694:	ebffe23f 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   28698:	e3500000 	cmp	r0, #0
   2869c:	e28d0008 	add	r0, sp, #8
   286a0:	159d301c 	ldrne	r3, [sp, #28]
   286a4:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   286a8:	15853004 	strne	r3, [r5, #4]
   286ac:	ebffe1f7 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   286b0:	e5953000 	ldr	r3, [r5]
   286b4:	e3530000 	cmp	r3, #0
   286b8:	0a000000 	beq	286c0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
   286bc:	ebffe66f 	bl	22080 <LeaveCritical>
   286c0:	e5943004 	ldr	r3, [r4, #4]
   286c4:	e3530001 	cmp	r3, #1
   286c8:	9affffdd 	bls	28644 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
   286cc:	e1a00004 	mov	r0, r4
   286d0:	e28dd024 	add	sp, sp, #36	; 0x24
   286d4:	e8bd8030 	pop	{r4, r5, pc}
   286d8:	00031388 	.word	0x00031388

000286dc <CVirtualGPIOPin::Write(unsigned int)>:
   286dc:	e5902004 	ldr	r2, [r0, #4]
   286e0:	e1a03001 	mov	r3, r1
   286e4:	e3520001 	cmp	r2, #1
   286e8:	812fff1e 	bxhi	lr
   286ec:	e30228a0 	movw	r2, #10400	; 0x28a0
   286f0:	e3402143 	movt	r2, #323	; 0x143
   286f4:	e3510001 	cmp	r1, #1
   286f8:	93a03000 	movls	r3, #0
   286fc:	83a03001 	movhi	r3, #1
   28700:	e5922004 	ldr	r2, [r2, #4]
   28704:	e3520000 	cmp	r2, #0
   28708:	03833001 	orreq	r3, r3, #1
   2870c:	e3530000 	cmp	r3, #0
   28710:	112fff1e 	bxne	lr
   28714:	eaffff8b 	b	28548 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

00028718 <CVirtualGPIOPin::Invert()>:
   28718:	e5901008 	ldr	r1, [r0, #8]
   2871c:	e2211001 	eor	r1, r1, #1
   28720:	eaffffed 	b	286dc <CVirtualGPIOPin::Write(unsigned int)>

00028724 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   28724:	e30238a0 	movw	r3, #10400	; 0x28a0
   28728:	e3403143 	movt	r3, #323	; 0x143
   2872c:	e3a02000 	mov	r2, #0
   28730:	e5832000 	str	r2, [r3]
   28734:	e12fff1e 	bx	lr

00028738 <CMachineInfo::CMachineInfo()>:
   28738:	e30228a8 	movw	r2, #10408	; 0x28a8
   2873c:	e3402143 	movt	r2, #323	; 0x143
   28740:	e92d4030 	push	{r4, r5, lr}
   28744:	e3a03000 	mov	r3, #0
   28748:	e1a04000 	mov	r4, r0
   2874c:	e5925000 	ldr	r5, [r2]
   28750:	e3a0000c 	mov	r0, #12
   28754:	e3a01003 	mov	r1, #3
   28758:	e24dd024 	sub	sp, sp, #36	; 0x24
   2875c:	e1550003 	cmp	r5, r3
   28760:	e5c40004 	strb	r0, [r4, #4]
   28764:	e5c41010 	strb	r1, [r4, #16]
   28768:	e5843000 	str	r3, [r4]
   2876c:	e5843008 	str	r3, [r4, #8]
   28770:	e584300c 	str	r3, [r4, #12]
   28774:	e5843014 	str	r3, [r4, #20]
   28778:	0a00000e 	beq	287b8 <CMachineInfo::CMachineInfo()+0x80>
   2877c:	e595e000 	ldr	lr, [r5]
   28780:	e5d5c004 	ldrb	ip, [r5, #4]
   28784:	e5950008 	ldr	r0, [r5, #8]
   28788:	e595100c 	ldr	r1, [r5, #12]
   2878c:	e5d52010 	ldrb	r2, [r5, #16]
   28790:	e5953014 	ldr	r3, [r5, #20]
   28794:	e584e000 	str	lr, [r4]
   28798:	e5c4c004 	strb	ip, [r4, #4]
   2879c:	e5840008 	str	r0, [r4, #8]
   287a0:	e584100c 	str	r1, [r4, #12]
   287a4:	e5c42010 	strb	r2, [r4, #16]
   287a8:	e5843014 	str	r3, [r4, #20]
   287ac:	e1a00004 	mov	r0, r4
   287b0:	e28dd024 	add	sp, sp, #36	; 0x24
   287b4:	e8bd8030 	pop	{r4, r5, pc}
   287b8:	e28d0008 	add	r0, sp, #8
   287bc:	e5824000 	str	r4, [r2]
   287c0:	ebffe1ac 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   287c4:	e3a03010 	mov	r3, #16
   287c8:	e58d5000 	str	r5, [sp]
   287cc:	e28d0008 	add	r0, sp, #8
   287d0:	e3a01002 	mov	r1, #2
   287d4:	e3401001 	movt	r1, #1
   287d8:	e08d2003 	add	r2, sp, r3
   287dc:	ebffe1ed 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   287e0:	e3500000 	cmp	r0, #0
   287e4:	0a00000c 	beq	2881c <CMachineInfo::CMachineInfo()+0xe4>
   287e8:	e59d201c 	ldr	r2, [sp, #28]
   287ec:	e2123502 	ands	r3, r2, #8388608	; 0x800000
   287f0:	e5842000 	str	r2, [r4]
   287f4:	1a00000b 	bne	28828 <CMachineInfo::CMachineInfo()+0xf0>
   287f8:	e3a01002 	mov	r1, #2
   287fc:	e59f00f8 	ldr	r0, [pc, #248]	; 288fc <CMachineInfo::CMachineInfo()+0x1c4>
   28800:	ea000000 	b	28808 <CMachineInfo::CMachineInfo()+0xd0>
   28804:	e7901203 	ldr	r1, [r0, r3, lsl #4]
   28808:	e1520001 	cmp	r2, r1
   2880c:	0a000012 	beq	2885c <CMachineInfo::CMachineInfo()+0x124>
   28810:	e2833001 	add	r3, r3, #1
   28814:	e3530011 	cmp	r3, #17
   28818:	1afffff9 	bne	28804 <CMachineInfo::CMachineInfo()+0xcc>
   2881c:	e28d0008 	add	r0, sp, #8
   28820:	ebffe19a 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   28824:	eaffffe0 	b	287ac <CMachineInfo::CMachineInfo()+0x74>
   28828:	e301c390 	movw	ip, #5008	; 0x1390
   2882c:	e340c003 	movt	ip, #3
   28830:	e1a0100c 	mov	r1, ip
   28834:	e1a03005 	mov	r3, r5
   28838:	e7e70252 	ubfx	r0, r2, #4, #8
   2883c:	ea000000 	b	28844 <CMachineInfo::CMachineInfo()+0x10c>
   28840:	e5b1500c 	ldr	r5, [r1, #12]!
   28844:	e1550000 	cmp	r5, r0
   28848:	0a000011 	beq	28894 <CMachineInfo::CMachineInfo()+0x15c>
   2884c:	e2833001 	add	r3, r3, #1
   28850:	e353000a 	cmp	r3, #10
   28854:	1afffff9 	bne	28840 <CMachineInfo::CMachineInfo()+0x108>
   28858:	eaffffef 	b	2881c <CMachineInfo::CMachineInfo()+0xe4>
   2885c:	e3012390 	movw	r2, #5008	; 0x1390
   28860:	e3402003 	movt	r2, #3
   28864:	e3a01000 	mov	r1, #0
   28868:	e3a00001 	mov	r0, #1
   2886c:	e0823203 	add	r3, r2, r3, lsl #4
   28870:	e5c41010 	strb	r1, [r4, #16]
   28874:	e5840008 	str	r0, [r4, #8]
   28878:	e5d3107c 	ldrb	r1, [r3, #124]	; 0x7c
   2887c:	e5932080 	ldr	r2, [r3, #128]	; 0x80
   28880:	e5933084 	ldr	r3, [r3, #132]	; 0x84
   28884:	e5c41004 	strb	r1, [r4, #4]
   28888:	e584200c 	str	r2, [r4, #12]
   2888c:	e5843014 	str	r3, [r4, #20]
   28890:	eaffffe1 	b	2881c <CMachineInfo::CMachineInfo()+0xe4>
   28894:	e3a0000c 	mov	r0, #12
   28898:	e7e35652 	ubfx	r5, r2, #12, #4
   2889c:	e3550002 	cmp	r5, #2
   288a0:	e7e2ea52 	ubfx	lr, r2, #20, #3
   288a4:	e3a01c01 	mov	r1, #256	; 0x100
   288a8:	e5c45010 	strb	r5, [r4, #16]
   288ac:	e023c390 	mla	r3, r0, r3, ip
   288b0:	e202200f 	and	r2, r2, #15
   288b4:	e2822001 	add	r2, r2, #1
   288b8:	e5d30004 	ldrb	r0, [r3, #4]
   288bc:	e1a01e11 	lsl	r1, r1, lr
   288c0:	e5933008 	ldr	r3, [r3, #8]
   288c4:	e584200c 	str	r2, [r4, #12]
   288c8:	e5843008 	str	r3, [r4, #8]
   288cc:	83a03003 	movhi	r3, #3
   288d0:	85c43010 	strbhi	r3, [r4, #16]
   288d4:	e35e0000 	cmp	lr, #0
   288d8:	03500003 	cmpeq	r0, #3
   288dc:	e5c40004 	strb	r0, [r4, #4]
   288e0:	e5841014 	str	r1, [r4, #20]
   288e4:	1affffcc 	bne	2881c <CMachineInfo::CMachineInfo()+0xe4>
   288e8:	e3520001 	cmp	r2, #1
   288ec:	13a03002 	movne	r3, #2
   288f0:	03a03001 	moveq	r3, #1
   288f4:	e5c43004 	strb	r3, [r4, #4]
   288f8:	eaffffc7 	b	2881c <CMachineInfo::CMachineInfo()+0xe4>
   288fc:	00031408 	.word	0x00031408

00028900 <CMachineInfo::~CMachineInfo()>:
   28900:	e30238a8 	movw	r3, #10408	; 0x28a8
   28904:	e3403143 	movt	r3, #323	; 0x143
   28908:	e3a0100c 	mov	r1, #12
   2890c:	e5c01004 	strb	r1, [r0, #4]
   28910:	e5932000 	ldr	r2, [r3]
   28914:	e1500002 	cmp	r0, r2
   28918:	03a02000 	moveq	r2, #0
   2891c:	05832000 	streq	r2, [r3]
   28920:	e12fff1e 	bx	lr

00028924 <CMachineInfo::GetMachineModel() const>:
   28924:	e5d00004 	ldrb	r0, [r0, #4]
   28928:	e12fff1e 	bx	lr

0002892c <CMachineInfo::GetMachineName() const>:
   2892c:	e5d02004 	ldrb	r2, [r0, #4]
   28930:	e3013390 	movw	r3, #5008	; 0x1390
   28934:	e3403003 	movt	r3, #3
   28938:	e0833102 	add	r3, r3, r2, lsl #2
   2893c:	e5930188 	ldr	r0, [r3, #392]	; 0x188
   28940:	e12fff1e 	bx	lr

00028944 <CMachineInfo::GetModelMajor() const>:
   28944:	e5900008 	ldr	r0, [r0, #8]
   28948:	e12fff1e 	bx	lr

0002894c <CMachineInfo::GetModelRevision() const>:
   2894c:	e590000c 	ldr	r0, [r0, #12]
   28950:	e12fff1e 	bx	lr

00028954 <CMachineInfo::GetSoCType() const>:
   28954:	e5d00010 	ldrb	r0, [r0, #16]
   28958:	e12fff1e 	bx	lr

0002895c <CMachineInfo::GetRAMSize() const>:
   2895c:	e5900014 	ldr	r0, [r0, #20]
   28960:	e12fff1e 	bx	lr

00028964 <CMachineInfo::GetSoCName() const>:
   28964:	e5d02010 	ldrb	r2, [r0, #16]
   28968:	e3013390 	movw	r3, #5008	; 0x1390
   2896c:	e3403003 	movt	r3, #3
   28970:	e0833102 	add	r3, r3, r2, lsl #2
   28974:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
   28978:	e12fff1e 	bx	lr

0002897c <CMachineInfo::GetRevisionRaw() const>:
   2897c:	e5900000 	ldr	r0, [r0]
   28980:	e12fff1e 	bx	lr

00028984 <CMachineInfo::GetClockRate(unsigned int) const>:
   28984:	e92d4070 	push	{r4, r5, r6, lr}
   28988:	e1a06000 	mov	r6, r0
   2898c:	e1a05001 	mov	r5, r1
   28990:	e24dd028 	sub	sp, sp, #40	; 0x28
   28994:	e28d000c 	add	r0, sp, #12
   28998:	ebffe136 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   2899c:	e3a03004 	mov	r3, #4
   289a0:	e58d3000 	str	r3, [sp]
   289a4:	e3a03014 	mov	r3, #20
   289a8:	e28d000c 	add	r0, sp, #12
   289ac:	e3a01002 	mov	r1, #2
   289b0:	e3401003 	movt	r1, #3
   289b4:	e08d2003 	add	r2, sp, r3
   289b8:	e58d5020 	str	r5, [sp, #32]
   289bc:	ebffe175 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   289c0:	e2504000 	subs	r4, r0, #0
   289c4:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   289c8:	1a00000b 	bne	289fc <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   289cc:	e3550002 	cmp	r5, #2
   289d0:	0a00000e 	beq	28a10 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   289d4:	e3550004 	cmp	r5, #4
   289d8:	0a000012 	beq	28a28 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
   289dc:	e3550001 	cmp	r5, #1
   289e0:	0a00000d 	beq	28a1c <CMachineInfo::GetClockRate(unsigned int) const+0x98>
   289e4:	e301155c 	movw	r1, #5468	; 0x155c
   289e8:	e3401003 	movt	r1, #3
   289ec:	e30b0138 	movw	r0, #45368	; 0xb138
   289f0:	e3400002 	movt	r0, #2
   289f4:	e3a02e11 	mov	r2, #272	; 0x110
   289f8:	ebfff068 	bl	24ba0 <assertion_failed>
   289fc:	e28d000c 	add	r0, sp, #12
   28a00:	ebffe122 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   28a04:	e1a00004 	mov	r0, r4
   28a08:	e28dd028 	add	sp, sp, #40	; 0x28
   28a0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   28a10:	e3a04b1b 	mov	r4, #27648	; 0x6c00
   28a14:	e34042dc 	movt	r4, #732	; 0x2dc
   28a18:	eafffff7 	b	289fc <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   28a1c:	e3a04ce1 	mov	r4, #57600	; 0xe100
   28a20:	e34045f5 	movt	r4, #1525	; 0x5f5
   28a24:	eafffff4 	b	289fc <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   28a28:	e5962008 	ldr	r2, [r6, #8]
   28a2c:	e3a03ca3 	mov	r3, #41728	; 0xa300
   28a30:	e34131e1 	movt	r3, #4577	; 0x11e1
   28a34:	e3520002 	cmp	r2, #2
   28a38:	e30b4280 	movw	r4, #45696	; 0xb280
   28a3c:	e3404ee6 	movt	r4, #3814	; 0xee6
   28a40:	81a04003 	movhi	r4, r3
   28a44:	eaffffec 	b	289fc <CMachineInfo::GetClockRate(unsigned int) const+0x78>

00028a48 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   28a48:	e3510036 	cmp	r1, #54	; 0x36
   28a4c:	0a00000f 	beq	28a90 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
   28a50:	e3510037 	cmp	r1, #55	; 0x37
   28a54:	1a000004 	bne	28a6c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   28a58:	e5d03004 	ldrb	r3, [r0, #4]
   28a5c:	e3530003 	cmp	r3, #3
   28a60:	c3a00028 	movgt	r0, #40	; 0x28
   28a64:	d3a0002d 	movle	r0, #45	; 0x2d
   28a68:	e12fff1e 	bx	lr
   28a6c:	e92d4010 	push	{r4, lr}
   28a70:	e300213b 	movw	r2, #315	; 0x13b
   28a74:	e301155c 	movw	r1, #5468	; 0x155c
   28a78:	e3401003 	movt	r1, #3
   28a7c:	e30b0138 	movw	r0, #45368	; 0xb138
   28a80:	e3400002 	movt	r0, #2
   28a84:	ebfff045 	bl	24ba0 <assertion_failed>
   28a88:	e3a00000 	mov	r0, #0
   28a8c:	e8bd8010 	pop	{r4, pc}
   28a90:	e5d03004 	ldrb	r3, [r0, #4]
   28a94:	e3530003 	cmp	r3, #3
   28a98:	ca000001 	bgt	28aa4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
   28a9c:	e3a00028 	mov	r0, #40	; 0x28
   28aa0:	e12fff1e 	bx	lr
   28aa4:	e5903008 	ldr	r3, [r0, #8]
   28aa8:	e3530003 	cmp	r3, #3
   28aac:	33a0002d 	movcc	r0, #45	; 0x2d
   28ab0:	23a00029 	movcs	r0, #41	; 0x29
   28ab4:	e12fff1e 	bx	lr

00028ab8 <CMachineInfo::GetDevice(TDeviceId) const>:
   28ab8:	e3510000 	cmp	r1, #0
   28abc:	1a000003 	bne	28ad0 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   28ac0:	e5d00004 	ldrb	r0, [r0, #4]
   28ac4:	e2500001 	subs	r0, r0, #1
   28ac8:	13a00001 	movne	r0, #1
   28acc:	e12fff1e 	bx	lr
   28ad0:	e92d4010 	push	{r4, lr}
   28ad4:	e3a02f55 	mov	r2, #340	; 0x154
   28ad8:	e301155c 	movw	r1, #5468	; 0x155c
   28adc:	e3401003 	movt	r1, #3
   28ae0:	e30b0138 	movw	r0, #45368	; 0xb138
   28ae4:	e3400002 	movt	r0, #2
   28ae8:	ebfff02c 	bl	24ba0 <assertion_failed>
   28aec:	e3a00000 	mov	r0, #0
   28af0:	e8bd8010 	pop	{r4, pc}

00028af4 <CMachineInfo::Get()>:
   28af4:	e92d4010 	push	{r4, lr}
   28af8:	e30248a8 	movw	r4, #10408	; 0x28a8
   28afc:	e3404143 	movt	r4, #323	; 0x143
   28b00:	e5940000 	ldr	r0, [r4]
   28b04:	e3500000 	cmp	r0, #0
   28b08:	18bd8010 	popne	{r4, pc}
   28b0c:	e300215d 	movw	r2, #349	; 0x15d
   28b10:	e301155c 	movw	r1, #5468	; 0x155c
   28b14:	e3401003 	movt	r1, #3
   28b18:	e30a03a8 	movw	r0, #41896	; 0xa3a8
   28b1c:	e3400002 	movt	r0, #2
   28b20:	ebfff01e 	bl	24ba0 <assertion_failed>
   28b24:	e5940000 	ldr	r0, [r4]
   28b28:	e8bd8010 	pop	{r4, pc}

00028b2c <InvalidateDataCacheL1Only>:
   28b2c:	e92d0070 	push	{r4, r5, r6}
   28b30:	e3a00000 	mov	r0, #0
   28b34:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   28b38:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   28b3c:	e3071fff 	movw	r1, #32767	; 0x7fff
   28b40:	e00126a0 	and	r2, r1, r0, lsr #13
   28b44:	e30013ff 	movw	r1, #1023	; 0x3ff
   28b48:	e00131a0 	and	r3, r1, r0, lsr #3
   28b4c:	e2822001 	add	r2, r2, #1
   28b50:	e2000007 	and	r0, r0, #7
   28b54:	e2800004 	add	r0, r0, #4
   28b58:	e16f1f13 	clz	r1, r3
   28b5c:	e2834001 	add	r4, r3, #1
   28b60:	e2422001 	sub	r2, r2, #1
   28b64:	e1a03004 	mov	r3, r4
   28b68:	e2533001 	subs	r3, r3, #1
   28b6c:	e1a05113 	lsl	r5, r3, r1
   28b70:	e1a06012 	lsl	r6, r2, r0
   28b74:	e1855006 	orr	r5, r5, r6
   28b78:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   28b7c:	cafffff9 	bgt	28b68 <InvalidateDataCacheL1Only+0x3c>
   28b80:	e3520000 	cmp	r2, #0
   28b84:	cafffff5 	bgt	28b60 <InvalidateDataCacheL1Only+0x34>
   28b88:	f57ff04e 	dsb	st
   28b8c:	f57ff06f 	isb	sy
   28b90:	e8bd0070 	pop	{r4, r5, r6}
   28b94:	e12fff1e 	bx	lr

00028b98 <InvalidateDataCache>:
   28b98:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   28b9c:	f57ff05f 	dmb	sy
   28ba0:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   28ba4:	e1a03ba0 	lsr	r3, r0, #23
   28ba8:	e213300e 	ands	r3, r3, #14
   28bac:	0a00001d 	beq	28c28 <InvalidateDataCache+0x90>
   28bb0:	e3a0a000 	mov	sl, #0
   28bb4:	e08a20aa 	add	r2, sl, sl, lsr #1
   28bb8:	e1a01230 	lsr	r1, r0, r2
   28bbc:	e2011007 	and	r1, r1, #7
   28bc0:	e3510002 	cmp	r1, #2
   28bc4:	ba000014 	blt	28c1c <InvalidateDataCache+0x84>
   28bc8:	e10f9000 	mrs	r9, CPSR
   28bcc:	f10c0080 	cpsid	i
   28bd0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   28bd4:	f57ff06f 	isb	sy
   28bd8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   28bdc:	e121f009 	msr	CPSR_c, r9
   28be0:	e2012007 	and	r2, r1, #7
   28be4:	e2822004 	add	r2, r2, #4
   28be8:	e30043ff 	movw	r4, #1023	; 0x3ff
   28bec:	e01441a1 	ands	r4, r4, r1, lsr #3
   28bf0:	e16f5f14 	clz	r5, r4
   28bf4:	e3077fff 	movw	r7, #32767	; 0x7fff
   28bf8:	e01776a1 	ands	r7, r7, r1, lsr #13
   28bfc:	e1a09007 	mov	r9, r7
   28c00:	e18ab514 	orr	fp, sl, r4, lsl r5
   28c04:	e18bb219 	orr	fp, fp, r9, lsl r2
   28c08:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   28c0c:	e2599001 	subs	r9, r9, #1
   28c10:	aafffffa 	bge	28c00 <InvalidateDataCache+0x68>
   28c14:	e2544001 	subs	r4, r4, #1
   28c18:	aafffff7 	bge	28bfc <InvalidateDataCache+0x64>
   28c1c:	e28aa002 	add	sl, sl, #2
   28c20:	e153000a 	cmp	r3, sl
   28c24:	caffffe2 	bgt	28bb4 <InvalidateDataCache+0x1c>
   28c28:	e3a0a000 	mov	sl, #0
   28c2c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   28c30:	f57ff04e 	dsb	st
   28c34:	f57ff06f 	isb	sy
   28c38:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   28c3c:	e12fff1e 	bx	lr

00028c40 <CleanDataCache>:
   28c40:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   28c44:	f57ff05f 	dmb	sy
   28c48:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   28c4c:	e1a03ba0 	lsr	r3, r0, #23
   28c50:	e213300e 	ands	r3, r3, #14
   28c54:	0a00001d 	beq	28cd0 <CleanDataCache+0x90>
   28c58:	e3a0a000 	mov	sl, #0
   28c5c:	e08a20aa 	add	r2, sl, sl, lsr #1
   28c60:	e1a01230 	lsr	r1, r0, r2
   28c64:	e2011007 	and	r1, r1, #7
   28c68:	e3510002 	cmp	r1, #2
   28c6c:	ba000014 	blt	28cc4 <CleanDataCache+0x84>
   28c70:	e10f9000 	mrs	r9, CPSR
   28c74:	f10c0080 	cpsid	i
   28c78:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   28c7c:	f57ff06f 	isb	sy
   28c80:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   28c84:	e121f009 	msr	CPSR_c, r9
   28c88:	e2012007 	and	r2, r1, #7
   28c8c:	e2822004 	add	r2, r2, #4
   28c90:	e30043ff 	movw	r4, #1023	; 0x3ff
   28c94:	e01441a1 	ands	r4, r4, r1, lsr #3
   28c98:	e16f5f14 	clz	r5, r4
   28c9c:	e3077fff 	movw	r7, #32767	; 0x7fff
   28ca0:	e01776a1 	ands	r7, r7, r1, lsr #13
   28ca4:	e1a09007 	mov	r9, r7
   28ca8:	e18ab514 	orr	fp, sl, r4, lsl r5
   28cac:	e18bb219 	orr	fp, fp, r9, lsl r2
   28cb0:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   28cb4:	e2599001 	subs	r9, r9, #1
   28cb8:	aafffffa 	bge	28ca8 <CleanDataCache+0x68>
   28cbc:	e2544001 	subs	r4, r4, #1
   28cc0:	aafffff7 	bge	28ca4 <CleanDataCache+0x64>
   28cc4:	e28aa002 	add	sl, sl, #2
   28cc8:	e153000a 	cmp	r3, sl
   28ccc:	caffffe2 	bgt	28c5c <CleanDataCache+0x1c>
   28cd0:	e3a0a000 	mov	sl, #0
   28cd4:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   28cd8:	f57ff04e 	dsb	st
   28cdc:	f57ff06f 	isb	sy
   28ce0:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   28ce4:	e12fff1e 	bx	lr

00028ce8 <CleanAndInvalidateDataCacheRange>:
   28ce8:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   28cec:	e1a03823 	lsr	r3, r3, #16
   28cf0:	e203300f 	and	r3, r3, #15
   28cf4:	e3a02004 	mov	r2, #4
   28cf8:	e1a02312 	lsl	r2, r2, r3
   28cfc:	e0801001 	add	r1, r0, r1
   28d00:	e2423001 	sub	r3, r2, #1
   28d04:	e1c00003 	bic	r0, r0, r3
   28d08:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   28d0c:	e0800002 	add	r0, r0, r2
   28d10:	e1500001 	cmp	r0, r1
   28d14:	3afffffb 	bcc	28d08 <CleanAndInvalidateDataCacheRange+0x20>
   28d18:	f57ff04e 	dsb	st
   28d1c:	e12fff1e 	bx	lr

00028d20 <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   28d20:	e3510000 	cmp	r1, #0
   28d24:	e3a03000 	mov	r3, #0
   28d28:	e92d4010 	push	{r4, lr}
   28d2c:	e1a04000 	mov	r4, r0
   28d30:	e880000e 	stm	r0, {r1, r2, r3}
   28d34:	e580300c 	str	r3, [r0, #12]
   28d38:	0a00000e 	beq	28d78 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x58>
   28d3c:	e3520000 	cmp	r2, #0
   28d40:	0a000015 	beq	28d9c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x7c>
   28d44:	e5940000 	ldr	r0, [r4]
   28d48:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   28d4c:	8a000004 	bhi	28d64 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x44>
   28d50:	e1a00100 	lsl	r0, r0, #2
   28d54:	ebffe490 	bl	21f9c <operator new[](unsigned int)>
   28d58:	e584000c 	str	r0, [r4, #12]
   28d5c:	e1a00004 	mov	r0, r4
   28d60:	e8bd8010 	pop	{r4, pc}
   28d64:	e3e00000 	mvn	r0, #0
   28d68:	ebffe48b 	bl	21f9c <operator new[](unsigned int)>
   28d6c:	e584000c 	str	r0, [r4, #12]
   28d70:	e1a00004 	mov	r0, r4
   28d74:	e8bd8010 	pop	{r4, pc}
   28d78:	e3a0201e 	mov	r2, #30
   28d7c:	e3011678 	movw	r1, #5752	; 0x1678
   28d80:	e3401003 	movt	r1, #3
   28d84:	e3010688 	movw	r0, #5768	; 0x1688
   28d88:	e3400003 	movt	r0, #3
   28d8c:	ebffef83 	bl	24ba0 <assertion_failed>
   28d90:	e5942004 	ldr	r2, [r4, #4]
   28d94:	e3520000 	cmp	r2, #0
   28d98:	1affffe9 	bne	28d44 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x24>
   28d9c:	e3011678 	movw	r1, #5752	; 0x1678
   28da0:	e3401003 	movt	r1, #3
   28da4:	e301069c 	movw	r0, #5788	; 0x169c
   28da8:	e3400003 	movt	r0, #3
   28dac:	e3a0201f 	mov	r2, #31
   28db0:	ebffef7a 	bl	24ba0 <assertion_failed>
   28db4:	eaffffe2 	b	28d44 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x24>

00028db8 <CPtrArray::~CPtrArray()>:
   28db8:	e92d4010 	push	{r4, lr}
   28dbc:	e1a04000 	mov	r4, r0
   28dc0:	e590000c 	ldr	r0, [r0, #12]
   28dc4:	e3a03000 	mov	r3, #0
   28dc8:	e1500003 	cmp	r0, r3
   28dcc:	e5843000 	str	r3, [r4]
   28dd0:	e5843004 	str	r3, [r4, #4]
   28dd4:	0a000000 	beq	28ddc <CPtrArray::~CPtrArray()+0x24>
   28dd8:	ebffe471 	bl	21fa4 <operator delete[](void*)>
   28ddc:	e1a00004 	mov	r0, r4
   28de0:	e8bd8010 	pop	{r4, pc}

00028de4 <CPtrArray::GetCount() const>:
   28de4:	e5900008 	ldr	r0, [r0, #8]
   28de8:	e12fff1e 	bx	lr

00028dec <CPtrArray::operator[](unsigned int)>:
   28dec:	e5903008 	ldr	r3, [r0, #8]
   28df0:	e92d4070 	push	{r4, r5, r6, lr}
   28df4:	e1a04000 	mov	r4, r0
   28df8:	e1530001 	cmp	r3, r1
   28dfc:	e1a05001 	mov	r5, r1
   28e00:	9a000007 	bls	28e24 <CPtrArray::operator[](unsigned int)+0x38>
   28e04:	e5942000 	ldr	r2, [r4]
   28e08:	e1520003 	cmp	r2, r3
   28e0c:	3a00000e 	bcc	28e4c <CPtrArray::operator[](unsigned int)+0x60>
   28e10:	e594000c 	ldr	r0, [r4, #12]
   28e14:	e3500000 	cmp	r0, #0
   28e18:	0a000014 	beq	28e70 <CPtrArray::operator[](unsigned int)+0x84>
   28e1c:	e0800105 	add	r0, r0, r5, lsl #2
   28e20:	e8bd8070 	pop	{r4, r5, r6, pc}
   28e24:	e3a02035 	mov	r2, #53	; 0x35
   28e28:	e3011678 	movw	r1, #5752	; 0x1678
   28e2c:	e3401003 	movt	r1, #3
   28e30:	e30106b4 	movw	r0, #5812	; 0x16b4
   28e34:	e3400003 	movt	r0, #3
   28e38:	ebffef58 	bl	24ba0 <assertion_failed>
   28e3c:	e5943008 	ldr	r3, [r4, #8]
   28e40:	e5942000 	ldr	r2, [r4]
   28e44:	e1520003 	cmp	r2, r3
   28e48:	2afffff0 	bcs	28e10 <CPtrArray::operator[](unsigned int)+0x24>
   28e4c:	e3011678 	movw	r1, #5752	; 0x1678
   28e50:	e3401003 	movt	r1, #3
   28e54:	e30106cc 	movw	r0, #5836	; 0x16cc
   28e58:	e3400003 	movt	r0, #3
   28e5c:	e3a02036 	mov	r2, #54	; 0x36
   28e60:	ebffef4e 	bl	24ba0 <assertion_failed>
   28e64:	e594000c 	ldr	r0, [r4, #12]
   28e68:	e3500000 	cmp	r0, #0
   28e6c:	1affffea 	bne	28e1c <CPtrArray::operator[](unsigned int)+0x30>
   28e70:	e3a02037 	mov	r2, #55	; 0x37
   28e74:	e3011678 	movw	r1, #5752	; 0x1678
   28e78:	e3401003 	movt	r1, #3
   28e7c:	e30106ec 	movw	r0, #5868	; 0x16ec
   28e80:	e3400003 	movt	r0, #3
   28e84:	ebffef45 	bl	24ba0 <assertion_failed>
   28e88:	e594000c 	ldr	r0, [r4, #12]
   28e8c:	e0800105 	add	r0, r0, r5, lsl #2
   28e90:	e8bd8070 	pop	{r4, r5, r6, pc}

00028e94 <CPtrArray::operator[](unsigned int) const>:
   28e94:	e5903008 	ldr	r3, [r0, #8]
   28e98:	e92d4070 	push	{r4, r5, r6, lr}
   28e9c:	e1a04000 	mov	r4, r0
   28ea0:	e1530001 	cmp	r3, r1
   28ea4:	e1a05001 	mov	r5, r1
   28ea8:	9a000007 	bls	28ecc <CPtrArray::operator[](unsigned int) const+0x38>
   28eac:	e5942000 	ldr	r2, [r4]
   28eb0:	e1520003 	cmp	r2, r3
   28eb4:	3a00000e 	bcc	28ef4 <CPtrArray::operator[](unsigned int) const+0x60>
   28eb8:	e594300c 	ldr	r3, [r4, #12]
   28ebc:	e3530000 	cmp	r3, #0
   28ec0:	0a000014 	beq	28f18 <CPtrArray::operator[](unsigned int) const+0x84>
   28ec4:	e7930105 	ldr	r0, [r3, r5, lsl #2]
   28ec8:	e8bd8070 	pop	{r4, r5, r6, pc}
   28ecc:	e3a0203e 	mov	r2, #62	; 0x3e
   28ed0:	e3011678 	movw	r1, #5752	; 0x1678
   28ed4:	e3401003 	movt	r1, #3
   28ed8:	e30106b4 	movw	r0, #5812	; 0x16b4
   28edc:	e3400003 	movt	r0, #3
   28ee0:	ebffef2e 	bl	24ba0 <assertion_failed>
   28ee4:	e5943008 	ldr	r3, [r4, #8]
   28ee8:	e5942000 	ldr	r2, [r4]
   28eec:	e1520003 	cmp	r2, r3
   28ef0:	2afffff0 	bcs	28eb8 <CPtrArray::operator[](unsigned int) const+0x24>
   28ef4:	e3011678 	movw	r1, #5752	; 0x1678
   28ef8:	e3401003 	movt	r1, #3
   28efc:	e30106cc 	movw	r0, #5836	; 0x16cc
   28f00:	e3400003 	movt	r0, #3
   28f04:	e3a0203f 	mov	r2, #63	; 0x3f
   28f08:	ebffef24 	bl	24ba0 <assertion_failed>
   28f0c:	e594300c 	ldr	r3, [r4, #12]
   28f10:	e3530000 	cmp	r3, #0
   28f14:	1affffea 	bne	28ec4 <CPtrArray::operator[](unsigned int) const+0x30>
   28f18:	e3a02040 	mov	r2, #64	; 0x40
   28f1c:	e3011678 	movw	r1, #5752	; 0x1678
   28f20:	e3401003 	movt	r1, #3
   28f24:	e30106ec 	movw	r0, #5868	; 0x16ec
   28f28:	e3400003 	movt	r0, #3
   28f2c:	ebffef1b 	bl	24ba0 <assertion_failed>
   28f30:	e594300c 	ldr	r3, [r4, #12]
   28f34:	e7930105 	ldr	r0, [r3, r5, lsl #2]
   28f38:	e8bd8070 	pop	{r4, r5, r6, pc}

00028f3c <CPtrArray::Append(void*)>:
   28f3c:	e5903000 	ldr	r3, [r0]
   28f40:	e92d4070 	push	{r4, r5, r6, lr}
   28f44:	e1a04000 	mov	r4, r0
   28f48:	e3530000 	cmp	r3, #0
   28f4c:	e1a06001 	mov	r6, r1
   28f50:	0a00002f 	beq	29014 <CPtrArray::Append(void*)+0xd8>
   28f54:	e594300c 	ldr	r3, [r4, #12]
   28f58:	e3530000 	cmp	r3, #0
   28f5c:	0a00003f 	beq	29060 <CPtrArray::Append(void*)+0x124>
   28f60:	e5940008 	ldr	r0, [r4, #8]
   28f64:	e5943000 	ldr	r3, [r4]
   28f68:	e1500003 	cmp	r0, r3
   28f6c:	8a00001f 	bhi	28ff0 <CPtrArray::Append(void*)+0xb4>
   28f70:	e1500003 	cmp	r0, r3
   28f74:	1594500c 	ldrne	r5, [r4, #12]
   28f78:	0a000003 	beq	28f8c <CPtrArray::Append(void*)+0x50>
   28f7c:	e2803001 	add	r3, r0, #1
   28f80:	e7856100 	str	r6, [r5, r0, lsl #2]
   28f84:	e5843008 	str	r3, [r4, #8]
   28f88:	e8bd8070 	pop	{r4, r5, r6, pc}
   28f8c:	e5943004 	ldr	r3, [r4, #4]
   28f90:	e3530000 	cmp	r3, #0
   28f94:	0a000029 	beq	29040 <CPtrArray::Append(void*)+0x104>
   28f98:	e0800003 	add	r0, r0, r3
   28f9c:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   28fa0:	9a000022 	bls	29030 <CPtrArray::Append(void*)+0xf4>
   28fa4:	e3e00000 	mvn	r0, #0
   28fa8:	ebffe3fb 	bl	21f9c <operator new[](unsigned int)>
   28fac:	e1a05000 	mov	r5, r0
   28fb0:	e5942000 	ldr	r2, [r4]
   28fb4:	e1a00005 	mov	r0, r5
   28fb8:	e594100c 	ldr	r1, [r4, #12]
   28fbc:	e1a02102 	lsl	r2, r2, #2
   28fc0:	ebffe880 	bl	231c8 <memcpy>
   28fc4:	e594000c 	ldr	r0, [r4, #12]
   28fc8:	e3500000 	cmp	r0, #0
   28fcc:	0a000000 	beq	28fd4 <CPtrArray::Append(void*)+0x98>
   28fd0:	ebffe3f3 	bl	21fa4 <operator delete[](void*)>
   28fd4:	e5943000 	ldr	r3, [r4]
   28fd8:	e5942004 	ldr	r2, [r4, #4]
   28fdc:	e5940008 	ldr	r0, [r4, #8]
   28fe0:	e0833002 	add	r3, r3, r2
   28fe4:	e584500c 	str	r5, [r4, #12]
   28fe8:	e5843000 	str	r3, [r4]
   28fec:	eaffffe2 	b	28f7c <CPtrArray::Append(void*)+0x40>
   28ff0:	e3011678 	movw	r1, #5752	; 0x1678
   28ff4:	e3401003 	movt	r1, #3
   28ff8:	e30106cc 	movw	r0, #5836	; 0x16cc
   28ffc:	e3400003 	movt	r0, #3
   29000:	e3a0204a 	mov	r2, #74	; 0x4a
   29004:	ebffeee5 	bl	24ba0 <assertion_failed>
   29008:	e5940008 	ldr	r0, [r4, #8]
   2900c:	e5943000 	ldr	r3, [r4]
   29010:	eaffffd6 	b	28f70 <CPtrArray::Append(void*)+0x34>
   29014:	e3011678 	movw	r1, #5752	; 0x1678
   29018:	e3401003 	movt	r1, #3
   2901c:	e3010688 	movw	r0, #5768	; 0x1688
   29020:	e3400003 	movt	r0, #3
   29024:	e3a02047 	mov	r2, #71	; 0x47
   29028:	ebffeedc 	bl	24ba0 <assertion_failed>
   2902c:	eaffffc8 	b	28f54 <CPtrArray::Append(void*)+0x18>
   29030:	e1a00100 	lsl	r0, r0, #2
   29034:	ebffe3d8 	bl	21f9c <operator new[](unsigned int)>
   29038:	e1a05000 	mov	r5, r0
   2903c:	eaffffdb 	b	28fb0 <CPtrArray::Append(void*)+0x74>
   29040:	e3011678 	movw	r1, #5752	; 0x1678
   29044:	e3401003 	movt	r1, #3
   29048:	e301069c 	movw	r0, #5788	; 0x169c
   2904c:	e3400003 	movt	r0, #3
   29050:	e3a0204d 	mov	r2, #77	; 0x4d
   29054:	ebffeed1 	bl	24ba0 <assertion_failed>
   29058:	e8940009 	ldm	r4, {r0, r3}
   2905c:	eaffffcd 	b	28f98 <CPtrArray::Append(void*)+0x5c>
   29060:	e3011678 	movw	r1, #5752	; 0x1678
   29064:	e3401003 	movt	r1, #3
   29068:	e30106ec 	movw	r0, #5868	; 0x16ec
   2906c:	e3400003 	movt	r0, #3
   29070:	e3a02048 	mov	r2, #72	; 0x48
   29074:	ebffeec9 	bl	24ba0 <assertion_failed>
   29078:	eaffffb8 	b	28f60 <CPtrArray::Append(void*)+0x24>

0002907c <CPtrArray::RemoveLast()>:
   2907c:	e5903008 	ldr	r3, [r0, #8]
   29080:	e92d4010 	push	{r4, lr}
   29084:	e1a04000 	mov	r4, r0
   29088:	e3530000 	cmp	r3, #0
   2908c:	1a000006 	bne	290ac <CPtrArray::RemoveLast()+0x30>
   29090:	e3011678 	movw	r1, #5752	; 0x1678
   29094:	e3401003 	movt	r1, #3
   29098:	e30106fc 	movw	r0, #5884	; 0x16fc
   2909c:	e3400003 	movt	r0, #3
   290a0:	e3a02060 	mov	r2, #96	; 0x60
   290a4:	ebffeebd 	bl	24ba0 <assertion_failed>
   290a8:	e5943008 	ldr	r3, [r4, #8]
   290ac:	e2433001 	sub	r3, r3, #1
   290b0:	e5843008 	str	r3, [r4, #8]
   290b4:	e8bd8010 	pop	{r4, pc}

000290b8 <CPtrList::CPtrList()>:
   290b8:	e3a02000 	mov	r2, #0
   290bc:	e5802000 	str	r2, [r0]
   290c0:	e12fff1e 	bx	lr

000290c4 <CPtrList::~CPtrList()>:
   290c4:	e5903000 	ldr	r3, [r0]
   290c8:	e92d4010 	push	{r4, lr}
   290cc:	e1a04000 	mov	r4, r0
   290d0:	e3530000 	cmp	r3, #0
   290d4:	0a000005 	beq	290f0 <CPtrList::~CPtrList()+0x2c>
   290d8:	e3011710 	movw	r1, #5904	; 0x1710
   290dc:	e3401003 	movt	r1, #3
   290e0:	e301071c 	movw	r0, #5916	; 0x171c
   290e4:	e3400003 	movt	r0, #3
   290e8:	e3a0202a 	mov	r2, #42	; 0x2a
   290ec:	ebffeeab 	bl	24ba0 <assertion_failed>
   290f0:	e1a00004 	mov	r0, r4
   290f4:	e8bd8010 	pop	{r4, pc}

000290f8 <CPtrList::GetFirst()>:
   290f8:	e5900000 	ldr	r0, [r0]
   290fc:	e12fff1e 	bx	lr

00029100 <CPtrList::GetNext(TPtrListElement*)>:
   29100:	e92d4010 	push	{r4, lr}
   29104:	e2514000 	subs	r4, r1, #0
   29108:	0a00000c 	beq	29140 <CPtrList::GetNext(TPtrListElement*)+0x40>
   2910c:	e5942000 	ldr	r2, [r4]
   29110:	e3043d43 	movw	r3, #19779	; 0x4d43
   29114:	e345304c 	movt	r3, #20556	; 0x504c
   29118:	e1520003 	cmp	r2, r3
   2911c:	0a000005 	beq	29138 <CPtrList::GetNext(TPtrListElement*)+0x38>
   29120:	e3011710 	movw	r1, #5904	; 0x1710
   29124:	e3401003 	movt	r1, #3
   29128:	e301073c 	movw	r0, #5948	; 0x173c
   2912c:	e3400003 	movt	r0, #3
   29130:	e3a02035 	mov	r2, #53	; 0x35
   29134:	ebffee99 	bl	24ba0 <assertion_failed>
   29138:	e5940008 	ldr	r0, [r4, #8]
   2913c:	e8bd8010 	pop	{r4, pc}
   29140:	e3011710 	movw	r1, #5904	; 0x1710
   29144:	e3401003 	movt	r1, #3
   29148:	e301072c 	movw	r0, #5932	; 0x172c
   2914c:	e3400003 	movt	r0, #3
   29150:	e3a02034 	mov	r2, #52	; 0x34
   29154:	ebffee91 	bl	24ba0 <assertion_failed>
   29158:	eaffffeb 	b	2910c <CPtrList::GetNext(TPtrListElement*)+0xc>

0002915c <CPtrList::GetPtr(TPtrListElement*)>:
   2915c:	e92d4010 	push	{r4, lr}
   29160:	e2514000 	subs	r4, r1, #0
   29164:	0a00000c 	beq	2919c <CPtrList::GetPtr(TPtrListElement*)+0x40>
   29168:	e5942000 	ldr	r2, [r4]
   2916c:	e3043d43 	movw	r3, #19779	; 0x4d43
   29170:	e345304c 	movt	r3, #20556	; 0x504c
   29174:	e1520003 	cmp	r2, r3
   29178:	0a000005 	beq	29194 <CPtrList::GetPtr(TPtrListElement*)+0x38>
   2917c:	e3011710 	movw	r1, #5904	; 0x1710
   29180:	e3401003 	movt	r1, #3
   29184:	e301073c 	movw	r0, #5948	; 0x173c
   29188:	e3400003 	movt	r0, #3
   2918c:	e3a0203d 	mov	r2, #61	; 0x3d
   29190:	ebffee82 	bl	24ba0 <assertion_failed>
   29194:	e594000c 	ldr	r0, [r4, #12]
   29198:	e8bd8010 	pop	{r4, pc}
   2919c:	e3011710 	movw	r1, #5904	; 0x1710
   291a0:	e3401003 	movt	r1, #3
   291a4:	e301072c 	movw	r0, #5932	; 0x172c
   291a8:	e3400003 	movt	r0, #3
   291ac:	e3a0203c 	mov	r2, #60	; 0x3c
   291b0:	ebffee7a 	bl	24ba0 <assertion_failed>
   291b4:	eaffffeb 	b	29168 <CPtrList::GetPtr(TPtrListElement*)+0xc>

000291b8 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   291b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   291bc:	e1a06000 	mov	r6, r0
   291c0:	e3a00010 	mov	r0, #16
   291c4:	e1a07002 	mov	r7, r2
   291c8:	e1a04001 	mov	r4, r1
   291cc:	ebffe371 	bl	21f98 <operator new(unsigned int)>
   291d0:	e5962000 	ldr	r2, [r6]
   291d4:	e3043d43 	movw	r3, #19779	; 0x4d43
   291d8:	e345304c 	movt	r3, #20556	; 0x504c
   291dc:	e3520000 	cmp	r2, #0
   291e0:	e1a05000 	mov	r5, r0
   291e4:	e580700c 	str	r7, [r0, #12]
   291e8:	e5803000 	str	r3, [r0]
   291ec:	0a000029 	beq	29298 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   291f0:	e3540000 	cmp	r4, #0
   291f4:	0a00002e 	beq	292b4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   291f8:	e5942000 	ldr	r2, [r4]
   291fc:	e3043d43 	movw	r3, #19779	; 0x4d43
   29200:	e345304c 	movt	r3, #20556	; 0x504c
   29204:	e1520003 	cmp	r2, r3
   29208:	0a000005 	beq	29224 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
   2920c:	e3011710 	movw	r1, #5904	; 0x1710
   29210:	e3401003 	movt	r1, #3
   29214:	e301077c 	movw	r0, #6012	; 0x177c
   29218:	e3400003 	movt	r0, #3
   2921c:	e3a0204e 	mov	r2, #78	; 0x4e
   29220:	ebffee5e 	bl	24ba0 <assertion_failed>
   29224:	e5963000 	ldr	r3, [r6]
   29228:	e1540003 	cmp	r4, r3
   2922c:	0a000013 	beq	29280 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
   29230:	e5943004 	ldr	r3, [r4, #4]
   29234:	e5854008 	str	r4, [r5, #8]
   29238:	e3530000 	cmp	r3, #0
   2923c:	e5853004 	str	r3, [r5, #4]
   29240:	0a00000c 	beq	29278 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   29244:	e5931000 	ldr	r1, [r3]
   29248:	e3042d43 	movw	r2, #19779	; 0x4d43
   2924c:	e345204c 	movt	r2, #20556	; 0x504c
   29250:	e1510002 	cmp	r1, r2
   29254:	0a000006 	beq	29274 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
   29258:	e3011710 	movw	r1, #5904	; 0x1710
   2925c:	e3401003 	movt	r1, #3
   29260:	e30107a0 	movw	r0, #6048	; 0x17a0
   29264:	e3400003 	movt	r0, #3
   29268:	e3a02060 	mov	r2, #96	; 0x60
   2926c:	ebffee4b 	bl	24ba0 <assertion_failed>
   29270:	e5943004 	ldr	r3, [r4, #4]
   29274:	e5835008 	str	r5, [r3, #8]
   29278:	e5845004 	str	r5, [r4, #4]
   2927c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29280:	e3a03000 	mov	r3, #0
   29284:	e5845004 	str	r5, [r4, #4]
   29288:	e5854008 	str	r4, [r5, #8]
   2928c:	e5865000 	str	r5, [r6]
   29290:	e5853004 	str	r3, [r5, #4]
   29294:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29298:	e3011710 	movw	r1, #5904	; 0x1710
   2929c:	e3401003 	movt	r1, #3
   292a0:	e3010760 	movw	r0, #5984	; 0x1760
   292a4:	e3400003 	movt	r0, #3
   292a8:	e3a0204c 	mov	r2, #76	; 0x4c
   292ac:	ebffee3b 	bl	24ba0 <assertion_failed>
   292b0:	eaffffce 	b	291f0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
   292b4:	e3011710 	movw	r1, #5904	; 0x1710
   292b8:	e3401003 	movt	r1, #3
   292bc:	e3010770 	movw	r0, #6000	; 0x1770
   292c0:	e3400003 	movt	r0, #3
   292c4:	e3a0204d 	mov	r2, #77	; 0x4d
   292c8:	ebffee34 	bl	24ba0 <assertion_failed>
   292cc:	eaffffc9 	b	291f8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

000292d0 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   292d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   292d4:	e1a06000 	mov	r6, r0
   292d8:	e1a05001 	mov	r5, r1
   292dc:	e3a00010 	mov	r0, #16
   292e0:	e1a07002 	mov	r7, r2
   292e4:	ebffe32b 	bl	21f98 <operator new(unsigned int)>
   292e8:	e3550000 	cmp	r5, #0
   292ec:	e3043d43 	movw	r3, #19779	; 0x4d43
   292f0:	e345304c 	movt	r3, #20556	; 0x504c
   292f4:	e5803000 	str	r3, [r0]
   292f8:	e1a04000 	mov	r4, r0
   292fc:	e580700c 	str	r7, [r0, #12]
   29300:	e5963000 	ldr	r3, [r6]
   29304:	0a000020 	beq	2938c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   29308:	e3530000 	cmp	r3, #0
   2930c:	0a00002b 	beq	293c0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   29310:	e5952000 	ldr	r2, [r5]
   29314:	e3043d43 	movw	r3, #19779	; 0x4d43
   29318:	e345304c 	movt	r3, #20556	; 0x504c
   2931c:	e1520003 	cmp	r2, r3
   29320:	0a000005 	beq	2933c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   29324:	e3011710 	movw	r1, #5904	; 0x1710
   29328:	e3401003 	movt	r1, #3
   2932c:	e30107c8 	movw	r0, #6088	; 0x17c8
   29330:	e3400003 	movt	r0, #3
   29334:	e3a0207e 	mov	r2, #126	; 0x7e
   29338:	ebffee18 	bl	24ba0 <assertion_failed>
   2933c:	e5953008 	ldr	r3, [r5, #8]
   29340:	e5845004 	str	r5, [r4, #4]
   29344:	e3530000 	cmp	r3, #0
   29348:	e5843008 	str	r3, [r4, #8]
   2934c:	0a00000c 	beq	29384 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
   29350:	e5931000 	ldr	r1, [r3]
   29354:	e3042d43 	movw	r2, #19779	; 0x4d43
   29358:	e345204c 	movt	r2, #20556	; 0x504c
   2935c:	e1510002 	cmp	r1, r2
   29360:	0a000006 	beq	29380 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
   29364:	e3011710 	movw	r1, #5904	; 0x1710
   29368:	e3401003 	movt	r1, #3
   2936c:	e30107ec 	movw	r0, #6124	; 0x17ec
   29370:	e3400003 	movt	r0, #3
   29374:	e3a02085 	mov	r2, #133	; 0x85
   29378:	ebffee08 	bl	24ba0 <assertion_failed>
   2937c:	e5953008 	ldr	r3, [r5, #8]
   29380:	e5834004 	str	r4, [r3, #4]
   29384:	e5854008 	str	r4, [r5, #8]
   29388:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2938c:	e3530000 	cmp	r3, #0
   29390:	0a000005 	beq	293ac <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   29394:	e3011710 	movw	r1, #5904	; 0x1710
   29398:	e3401003 	movt	r1, #3
   2939c:	e301071c 	movw	r0, #5916	; 0x171c
   293a0:	e3400003 	movt	r0, #3
   293a4:	e3a02074 	mov	r2, #116	; 0x74
   293a8:	ebffedfc 	bl	24ba0 <assertion_failed>
   293ac:	e3a03000 	mov	r3, #0
   293b0:	e5864000 	str	r4, [r6]
   293b4:	e5843004 	str	r3, [r4, #4]
   293b8:	e5843008 	str	r3, [r4, #8]
   293bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   293c0:	e3011710 	movw	r1, #5904	; 0x1710
   293c4:	e3401003 	movt	r1, #3
   293c8:	e3010760 	movw	r0, #5984	; 0x1760
   293cc:	e3400003 	movt	r0, #3
   293d0:	e3a0207d 	mov	r2, #125	; 0x7d
   293d4:	ebffedf1 	bl	24ba0 <assertion_failed>
   293d8:	eaffffcc 	b	29310 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

000293dc <CPtrList::Remove(TPtrListElement*)>:
   293dc:	e92d4070 	push	{r4, r5, r6, lr}
   293e0:	e2514000 	subs	r4, r1, #0
   293e4:	e1a05000 	mov	r5, r0
   293e8:	0a000048 	beq	29510 <CPtrList::Remove(TPtrListElement*)+0x134>
   293ec:	e5942000 	ldr	r2, [r4]
   293f0:	e3043d43 	movw	r3, #19779	; 0x4d43
   293f4:	e345304c 	movt	r3, #20556	; 0x504c
   293f8:	e1520003 	cmp	r2, r3
   293fc:	0a000005 	beq	29418 <CPtrList::Remove(TPtrListElement*)+0x3c>
   29400:	e3011710 	movw	r1, #5904	; 0x1710
   29404:	e3401003 	movt	r1, #3
   29408:	e301073c 	movw	r0, #5948	; 0x173c
   2940c:	e3400003 	movt	r0, #3
   29410:	e3a02090 	mov	r2, #144	; 0x90
   29414:	ebffede1 	bl	24ba0 <assertion_failed>
   29418:	e5953000 	ldr	r3, [r5]
   2941c:	e1540003 	cmp	r4, r3
   29420:	0a000027 	beq	294c4 <CPtrList::Remove(TPtrListElement*)+0xe8>
   29424:	e5943004 	ldr	r3, [r4, #4]
   29428:	e3530000 	cmp	r3, #0
   2942c:	0a00003e 	beq	2952c <CPtrList::Remove(TPtrListElement*)+0x150>
   29430:	e5931000 	ldr	r1, [r3]
   29434:	e3042d43 	movw	r2, #19779	; 0x4d43
   29438:	e345204c 	movt	r2, #20556	; 0x504c
   2943c:	e1510002 	cmp	r1, r2
   29440:	0a000006 	beq	29460 <CPtrList::Remove(TPtrListElement*)+0x84>
   29444:	e3011710 	movw	r1, #5904	; 0x1710
   29448:	e3401003 	movt	r1, #3
   2944c:	e301085c 	movw	r0, #6236	; 0x185c
   29450:	e3400003 	movt	r0, #3
   29454:	e3a0209f 	mov	r2, #159	; 0x9f
   29458:	ebffedd0 	bl	24ba0 <assertion_failed>
   2945c:	e5943004 	ldr	r3, [r4, #4]
   29460:	e5942008 	ldr	r2, [r4, #8]
   29464:	e5832008 	str	r2, [r3, #8]
   29468:	e5942008 	ldr	r2, [r4, #8]
   2946c:	e3520000 	cmp	r2, #0
   29470:	0a00000d 	beq	294ac <CPtrList::Remove(TPtrListElement*)+0xd0>
   29474:	e5920000 	ldr	r0, [r2]
   29478:	e3041d43 	movw	r1, #19779	; 0x4d43
   2947c:	e345104c 	movt	r1, #20556	; 0x504c
   29480:	e1500001 	cmp	r0, r1
   29484:	0a000007 	beq	294a8 <CPtrList::Remove(TPtrListElement*)+0xcc>
   29488:	e3a020a4 	mov	r2, #164	; 0xa4
   2948c:	e3011710 	movw	r1, #5904	; 0x1710
   29490:	e3401003 	movt	r1, #3
   29494:	e3010818 	movw	r0, #6168	; 0x1818
   29498:	e3400003 	movt	r0, #3
   2949c:	ebffedbf 	bl	24ba0 <assertion_failed>
   294a0:	e5942008 	ldr	r2, [r4, #8]
   294a4:	e5943004 	ldr	r3, [r4, #4]
   294a8:	e5823004 	str	r3, [r2, #4]
   294ac:	e3a03000 	mov	r3, #0
   294b0:	e1a00004 	mov	r0, r4
   294b4:	e5843000 	str	r3, [r4]
   294b8:	e3a01010 	mov	r1, #16
   294bc:	e8bd4070 	pop	{r4, r5, r6, lr}
   294c0:	eaffe2b8 	b	21fa8 <operator delete(void*, unsigned int)>
   294c4:	e5943008 	ldr	r3, [r4, #8]
   294c8:	e3530000 	cmp	r3, #0
   294cc:	e5853000 	str	r3, [r5]
   294d0:	0afffff5 	beq	294ac <CPtrList::Remove(TPtrListElement*)+0xd0>
   294d4:	e5931000 	ldr	r1, [r3]
   294d8:	e3042d43 	movw	r2, #19779	; 0x4d43
   294dc:	e345204c 	movt	r2, #20556	; 0x504c
   294e0:	e1510002 	cmp	r1, r2
   294e4:	0a000006 	beq	29504 <CPtrList::Remove(TPtrListElement*)+0x128>
   294e8:	e3011710 	movw	r1, #5904	; 0x1710
   294ec:	e3401003 	movt	r1, #3
   294f0:	e3010818 	movw	r0, #6168	; 0x1818
   294f4:	e3400003 	movt	r0, #3
   294f8:	e3a02098 	mov	r2, #152	; 0x98
   294fc:	ebffeda7 	bl	24ba0 <assertion_failed>
   29500:	e5943008 	ldr	r3, [r4, #8]
   29504:	e3a02000 	mov	r2, #0
   29508:	e5832004 	str	r2, [r3, #4]
   2950c:	eaffffe6 	b	294ac <CPtrList::Remove(TPtrListElement*)+0xd0>
   29510:	e3011710 	movw	r1, #5904	; 0x1710
   29514:	e3401003 	movt	r1, #3
   29518:	e301072c 	movw	r0, #5932	; 0x172c
   2951c:	e3400003 	movt	r0, #3
   29520:	e3a0208f 	mov	r2, #143	; 0x8f
   29524:	ebffed9d 	bl	24ba0 <assertion_failed>
   29528:	eaffffaf 	b	293ec <CPtrList::Remove(TPtrListElement*)+0x10>
   2952c:	e3011710 	movw	r1, #5904	; 0x1710
   29530:	e3401003 	movt	r1, #3
   29534:	e3010844 	movw	r0, #6212	; 0x1844
   29538:	e3400003 	movt	r0, #3
   2953c:	e3a0209e 	mov	r2, #158	; 0x9e
   29540:	ebffed96 	bl	24ba0 <assertion_failed>
   29544:	e5943004 	ldr	r3, [r4, #4]
   29548:	eaffffb8 	b	29430 <CPtrList::Remove(TPtrListElement*)+0x54>

0002954c <CPtrList::Find(void*)>:
   2954c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29550:	e5904000 	ldr	r4, [r0]
   29554:	e3540000 	cmp	r4, #0
   29558:	0a000016 	beq	295b8 <CPtrList::Find(void*)+0x6c>
   2955c:	e3048d43 	movw	r8, #19779	; 0x4d43
   29560:	e345804c 	movt	r8, #20556	; 0x504c
   29564:	e3017710 	movw	r7, #5904	; 0x1710
   29568:	e3407003 	movt	r7, #3
   2956c:	e301673c 	movw	r6, #5948	; 0x173c
   29570:	e3406003 	movt	r6, #3
   29574:	e1a05001 	mov	r5, r1
   29578:	ea000002 	b	29588 <CPtrList::Find(void*)+0x3c>
   2957c:	e5944008 	ldr	r4, [r4, #8]
   29580:	e3540000 	cmp	r4, #0
   29584:	0a00000b 	beq	295b8 <CPtrList::Find(void*)+0x6c>
   29588:	e5943000 	ldr	r3, [r4]
   2958c:	e3a020b3 	mov	r2, #179	; 0xb3
   29590:	e1a01007 	mov	r1, r7
   29594:	e1a00006 	mov	r0, r6
   29598:	e1530008 	cmp	r3, r8
   2959c:	0a000000 	beq	295a4 <CPtrList::Find(void*)+0x58>
   295a0:	ebffed7e 	bl	24ba0 <assertion_failed>
   295a4:	e594300c 	ldr	r3, [r4, #12]
   295a8:	e1530005 	cmp	r3, r5
   295ac:	1afffff2 	bne	2957c <CPtrList::Find(void*)+0x30>
   295b0:	e1a00004 	mov	r0, r4
   295b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   295b8:	e3a04000 	mov	r4, #0
   295bc:	e1a00004 	mov	r0, r4
   295c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000295c4 <mem_init>:
   295c4:	e0801001 	add	r1, r0, r1
   295c8:	e30228ac 	movw	r2, #10412	; 0x28ac
   295cc:	e3402143 	movt	r2, #323	; 0x143
   295d0:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   295d4:	e3500605 	cmp	r0, #5242880	; 0x500000
   295d8:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   295dc:	33a00605 	movcc	r0, #5242880	; 0x500000
   295e0:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   295e4:	e241c501 	sub	ip, r1, #4194304	; 0x400000
   295e8:	e3c3300f 	bic	r3, r3, #15
   295ec:	e5820000 	str	r0, [r2]
   295f0:	e582100c 	str	r1, [r2, #12]
   295f4:	e582c004 	str	ip, [r2, #4]
   295f8:	e5823008 	str	r3, [r2, #8]
   295fc:	e12fff1e 	bx	lr

00029600 <mem_get_size>:
   29600:	e30238ac 	movw	r3, #10412	; 0x28ac
   29604:	e3403143 	movt	r3, #323	; 0x143
   29608:	e5930004 	ldr	r0, [r3, #4]
   2960c:	e5931000 	ldr	r1, [r3]
   29610:	e593200c 	ldr	r2, [r3, #12]
   29614:	e5933008 	ldr	r3, [r3, #8]
   29618:	e0400001 	sub	r0, r0, r1
   2961c:	e0423003 	sub	r3, r2, r3
   29620:	e0800003 	add	r0, r0, r3
   29624:	e12fff1e 	bx	lr

00029628 <malloc>:
   29628:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2962c:	e30278ac 	movw	r7, #10412	; 0x28ac
   29630:	e3407143 	movt	r7, #323	; 0x143
   29634:	e1a05000 	mov	r5, r0
   29638:	e5973000 	ldr	r3, [r7]
   2963c:	e3530000 	cmp	r3, #0
   29640:	0a000053 	beq	29794 <malloc+0x16c>
   29644:	e5970010 	ldr	r0, [r7, #16]
   29648:	e3500000 	cmp	r0, #0
   2964c:	1a00004b 	bne	29780 <malloc+0x158>
   29650:	e3014bb4 	movw	r4, #7092	; 0x1bb4
   29654:	e3404003 	movt	r4, #3
   29658:	e5943000 	ldr	r3, [r4]
   2965c:	e3530000 	cmp	r3, #0
   29660:	0a000007 	beq	29684 <malloc+0x5c>
   29664:	e1550003 	cmp	r5, r3
   29668:	8a000002 	bhi	29678 <malloc+0x50>
   2966c:	ea000011 	b	296b8 <malloc+0x90>
   29670:	e1530005 	cmp	r3, r5
   29674:	2a00000f 	bcs	296b8 <malloc+0x90>
   29678:	e5b43008 	ldr	r3, [r4, #8]!
   2967c:	e3530000 	cmp	r3, #0
   29680:	1afffffa 	bne	29670 <malloc+0x48>
   29684:	e5976000 	ldr	r6, [r7]
   29688:	e285301f 	add	r3, r5, #31
   2968c:	e3c3300f 	bic	r3, r3, #15
   29690:	e5972004 	ldr	r2, [r7, #4]
   29694:	e0863003 	add	r3, r6, r3
   29698:	e1530002 	cmp	r3, r2
   2969c:	e5873000 	str	r3, [r7]
   296a0:	9a000028 	bls	29748 <malloc+0x120>
   296a4:	e5974010 	ldr	r4, [r7, #16]
   296a8:	e3540000 	cmp	r4, #0
   296ac:	1a000035 	bne	29788 <malloc+0x160>
   296b0:	e1a00004 	mov	r0, r4
   296b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   296b8:	e5946004 	ldr	r6, [r4, #4]
   296bc:	e3560000 	cmp	r6, #0
   296c0:	01a05003 	moveq	r5, r3
   296c4:	0affffee 	beq	29684 <malloc+0x5c>
   296c8:	e5962000 	ldr	r2, [r6]
   296cc:	e3043d43 	movw	r3, #19779	; 0x4d43
   296d0:	e344324c 	movt	r3, #16972	; 0x424c
   296d4:	e1520003 	cmp	r2, r3
   296d8:	0a000005 	beq	296f4 <malloc+0xcc>
   296dc:	e3011888 	movw	r1, #6280	; 0x1888
   296e0:	e3401003 	movt	r1, #3
   296e4:	e30108a8 	movw	r0, #6312	; 0x18a8
   296e8:	e3400003 	movt	r0, #3
   296ec:	e3a02089 	mov	r2, #137	; 0x89
   296f0:	ebffed2a 	bl	24ba0 <assertion_failed>
   296f4:	e5963008 	ldr	r3, [r6, #8]
   296f8:	e5843004 	str	r3, [r4, #4]
   296fc:	e5973010 	ldr	r3, [r7, #16]
   29700:	e3530000 	cmp	r3, #0
   29704:	1a00001b 	bne	29778 <malloc+0x150>
   29708:	e2864010 	add	r4, r6, #16
   2970c:	e3a03000 	mov	r3, #0
   29710:	e314000f 	tst	r4, #15
   29714:	e5c63008 	strb	r3, [r6, #8]
   29718:	e5c63009 	strb	r3, [r6, #9]
   2971c:	e5c6300a 	strb	r3, [r6, #10]
   29720:	e5c6300b 	strb	r3, [r6, #11]
   29724:	0affffe1 	beq	296b0 <malloc+0x88>
   29728:	e3a020a1 	mov	r2, #161	; 0xa1
   2972c:	e3011888 	movw	r1, #6280	; 0x1888
   29730:	e3401003 	movt	r1, #3
   29734:	e30108cc 	movw	r0, #6348	; 0x18cc
   29738:	e3400003 	movt	r0, #3
   2973c:	ebffed17 	bl	24ba0 <assertion_failed>
   29740:	e1a00004 	mov	r0, r4
   29744:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29748:	e3a03042 	mov	r3, #66	; 0x42
   2974c:	e3a00043 	mov	r0, #67	; 0x43
   29750:	e5c63003 	strb	r3, [r6, #3]
   29754:	e3a0104d 	mov	r1, #77	; 0x4d
   29758:	e5973010 	ldr	r3, [r7, #16]
   2975c:	e3a0204c 	mov	r2, #76	; 0x4c
   29760:	e5865004 	str	r5, [r6, #4]
   29764:	e3530000 	cmp	r3, #0
   29768:	e5c60000 	strb	r0, [r6]
   2976c:	e5c61001 	strb	r1, [r6, #1]
   29770:	e5c62002 	strb	r2, [r6, #2]
   29774:	0affffe3 	beq	29708 <malloc+0xe0>
   29778:	ebffe240 	bl	22080 <LeaveCritical>
   2977c:	eaffffe1 	b	29708 <malloc+0xe0>
   29780:	ebffe210 	bl	21fc8 <EnterCritical>
   29784:	eaffffb1 	b	29650 <malloc+0x28>
   29788:	ebffe23c 	bl	22080 <LeaveCritical>
   2978c:	e3a04000 	mov	r4, #0
   29790:	eaffffc6 	b	296b0 <malloc+0x88>
   29794:	e3011888 	movw	r1, #6280	; 0x1888
   29798:	e3401003 	movt	r1, #3
   2979c:	e3010894 	movw	r0, #6292	; 0x1894
   297a0:	e3400003 	movt	r0, #3
   297a4:	e3a0206f 	mov	r2, #111	; 0x6f
   297a8:	ebffecfc 	bl	24ba0 <assertion_failed>
   297ac:	eaffffa4 	b	29644 <malloc+0x1c>

000297b0 <free>:
   297b0:	e92d4070 	push	{r4, r5, r6, lr}
   297b4:	e2505000 	subs	r5, r0, #0
   297b8:	08bd8070 	popeq	{r4, r5, r6, pc}
   297bc:	e5352010 	ldr	r2, [r5, #-16]!
   297c0:	e3043d43 	movw	r3, #19779	; 0x4d43
   297c4:	e344324c 	movt	r3, #16972	; 0x424c
   297c8:	e1520003 	cmp	r2, r3
   297cc:	0a000005 	beq	297e8 <free+0x38>
   297d0:	e3011888 	movw	r1, #6280	; 0x1888
   297d4:	e3401003 	movt	r1, #3
   297d8:	e30108a8 	movw	r0, #6312	; 0x18a8
   297dc:	e3400003 	movt	r0, #3
   297e0:	e3a020ae 	mov	r2, #174	; 0xae
   297e4:	ebffeced 	bl	24ba0 <assertion_failed>
   297e8:	e3014bb4 	movw	r4, #7092	; 0x1bb4
   297ec:	e3404003 	movt	r4, #3
   297f0:	e5943000 	ldr	r3, [r4]
   297f4:	e3530000 	cmp	r3, #0
   297f8:	08bd8070 	popeq	{r4, r5, r6, pc}
   297fc:	e5952004 	ldr	r2, [r5, #4]
   29800:	e1520003 	cmp	r2, r3
   29804:	1a000002 	bne	29814 <free+0x64>
   29808:	ea000005 	b	29824 <free+0x74>
   2980c:	e1530002 	cmp	r3, r2
   29810:	0a000003 	beq	29824 <free+0x74>
   29814:	e5b43008 	ldr	r3, [r4, #8]!
   29818:	e3530000 	cmp	r3, #0
   2981c:	1afffffa 	bne	2980c <free+0x5c>
   29820:	e8bd8070 	pop	{r4, r5, r6, pc}
   29824:	e30268ac 	movw	r6, #10412	; 0x28ac
   29828:	e3406143 	movt	r6, #323	; 0x143
   2982c:	e5960010 	ldr	r0, [r6, #16]
   29830:	e3500000 	cmp	r0, #0
   29834:	1a000003 	bne	29848 <free+0x98>
   29838:	e5943004 	ldr	r3, [r4, #4]
   2983c:	e5853008 	str	r3, [r5, #8]
   29840:	e5845004 	str	r5, [r4, #4]
   29844:	e8bd8070 	pop	{r4, r5, r6, pc}
   29848:	ebffe1de 	bl	21fc8 <EnterCritical>
   2984c:	e5962010 	ldr	r2, [r6, #16]
   29850:	e5943004 	ldr	r3, [r4, #4]
   29854:	e3520000 	cmp	r2, #0
   29858:	e5853008 	str	r3, [r5, #8]
   2985c:	e5845004 	str	r5, [r4, #4]
   29860:	08bd8070 	popeq	{r4, r5, r6, pc}
   29864:	e8bd4070 	pop	{r4, r5, r6, lr}
   29868:	eaffe204 	b	22080 <LeaveCritical>

0002986c <palloc>:
   2986c:	e92d4070 	push	{r4, r5, r6, lr}
   29870:	e30248ac 	movw	r4, #10412	; 0x28ac
   29874:	e3404143 	movt	r4, #323	; 0x143
   29878:	e5943008 	ldr	r3, [r4, #8]
   2987c:	e3530000 	cmp	r3, #0
   29880:	0a00002c 	beq	29938 <palloc+0xcc>
   29884:	e5940014 	ldr	r0, [r4, #20]
   29888:	e3500000 	cmp	r0, #0
   2988c:	1a000019 	bne	298f8 <palloc+0x8c>
   29890:	e5945018 	ldr	r5, [r4, #24]
   29894:	e3550000 	cmp	r5, #0
   29898:	0a00001a 	beq	29908 <palloc+0x9c>
   2989c:	e5952000 	ldr	r2, [r5]
   298a0:	e3043d43 	movw	r3, #19779	; 0x4d43
   298a4:	e3453047 	movt	r3, #20551	; 0x5047
   298a8:	e1520003 	cmp	r2, r3
   298ac:	0a000005 	beq	298c8 <palloc+0x5c>
   298b0:	e3011888 	movw	r1, #6280	; 0x1888
   298b4:	e3401003 	movt	r1, #3
   298b8:	e301090c 	movw	r0, #6412	; 0x190c
   298bc:	e3400003 	movt	r0, #3
   298c0:	e3a020d4 	mov	r2, #212	; 0xd4
   298c4:	ebffecb5 	bl	24ba0 <assertion_failed>
   298c8:	e5953004 	ldr	r3, [r5, #4]
   298cc:	e3a02000 	mov	r2, #0
   298d0:	e5852000 	str	r2, [r5]
   298d4:	e5843018 	str	r3, [r4, #24]
   298d8:	e5943014 	ldr	r3, [r4, #20]
   298dc:	e3530000 	cmp	r3, #0
   298e0:	1a000001 	bne	298ec <palloc+0x80>
   298e4:	e1a00005 	mov	r0, r5
   298e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   298ec:	ebffe1e3 	bl	22080 <LeaveCritical>
   298f0:	e1a00005 	mov	r0, r5
   298f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   298f8:	ebffe1b2 	bl	21fc8 <EnterCritical>
   298fc:	e5945018 	ldr	r5, [r4, #24]
   29900:	e3550000 	cmp	r5, #0
   29904:	1affffe4 	bne	2989c <palloc+0x30>
   29908:	e5945008 	ldr	r5, [r4, #8]
   2990c:	e594200c 	ldr	r2, [r4, #12]
   29910:	e2853a01 	add	r3, r5, #4096	; 0x1000
   29914:	e1530002 	cmp	r3, r2
   29918:	e5843008 	str	r3, [r4, #8]
   2991c:	9affffed 	bls	298d8 <palloc+0x6c>
   29920:	e5945014 	ldr	r5, [r4, #20]
   29924:	e3550000 	cmp	r5, #0
   29928:	0affffed 	beq	298e4 <palloc+0x78>
   2992c:	ebffe1d3 	bl	22080 <LeaveCritical>
   29930:	e3a00000 	mov	r0, #0
   29934:	e8bd8070 	pop	{r4, r5, r6, pc}
   29938:	e3011888 	movw	r1, #6280	; 0x1888
   2993c:	e3401003 	movt	r1, #3
   29940:	e30108f8 	movw	r0, #6392	; 0x18f8
   29944:	e3400003 	movt	r0, #3
   29948:	e3a020c6 	mov	r2, #198	; 0xc6
   2994c:	ebffec93 	bl	24ba0 <assertion_failed>
   29950:	eaffffcb 	b	29884 <palloc+0x18>

00029954 <pfree>:
   29954:	e92d4070 	push	{r4, r5, r6, lr}
   29958:	e2505000 	subs	r5, r0, #0
   2995c:	08bd8070 	popeq	{r4, r5, r6, pc}
   29960:	e30248ac 	movw	r4, #10412	; 0x28ac
   29964:	e3404143 	movt	r4, #323	; 0x143
   29968:	e5940014 	ldr	r0, [r4, #20]
   2996c:	e3500000 	cmp	r0, #0
   29970:	1a000006 	bne	29990 <pfree+0x3c>
   29974:	e5941018 	ldr	r1, [r4, #24]
   29978:	e3042d43 	movw	r2, #19779	; 0x4d43
   2997c:	e3452047 	movt	r2, #20551	; 0x5047
   29980:	e5852000 	str	r2, [r5]
   29984:	e5851004 	str	r1, [r5, #4]
   29988:	e5845018 	str	r5, [r4, #24]
   2998c:	e8bd8070 	pop	{r4, r5, r6, pc}
   29990:	ebffe18c 	bl	21fc8 <EnterCritical>
   29994:	e5941014 	ldr	r1, [r4, #20]
   29998:	e5942018 	ldr	r2, [r4, #24]
   2999c:	e3043d43 	movw	r3, #19779	; 0x4d43
   299a0:	e3453047 	movt	r3, #20551	; 0x5047
   299a4:	e3510000 	cmp	r1, #0
   299a8:	e5853000 	str	r3, [r5]
   299ac:	e5852004 	str	r2, [r5, #4]
   299b0:	e5845018 	str	r5, [r4, #24]
   299b4:	08bd8070 	popeq	{r4, r5, r6, pc}
   299b8:	e8bd4070 	pop	{r4, r5, r6, lr}
   299bc:	eaffe1af 	b	22080 <LeaveCritical>

000299c0 <_GLOBAL__sub_I_mem_init>:
   299c0:	e30238ac 	movw	r3, #10412	; 0x28ac
   299c4:	e3403143 	movt	r3, #323	; 0x143
   299c8:	e3a02001 	mov	r2, #1
   299cc:	e5832010 	str	r2, [r3, #16]
   299d0:	e5832014 	str	r2, [r3, #20]
   299d4:	e12fff1e 	bx	lr

000299d8 <CBcmMailBox::CBcmMailBox(unsigned int)>:
   299d8:	e3a02000 	mov	r2, #0
   299dc:	e8800006 	stm	r0, {r1, r2}
   299e0:	e12fff1e 	bx	lr

000299e4 <CBcmMailBox::~CBcmMailBox()>:
   299e4:	e12fff1e 	bx	lr

000299e8 <CBcmMailBox::Flush()>:
   299e8:	e92d4010 	push	{r4, lr}
   299ec:	e3a04a0b 	mov	r4, #45056	; 0xb000
   299f0:	e3434f00 	movt	r4, #16128	; 0x3f00
   299f4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   299f8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   299fc:	18bd8010 	popne	{r4, pc}
   29a00:	e3a00014 	mov	r0, #20
   29a04:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   29a08:	ebffe47b 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
   29a0c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   29a10:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29a14:	0afffff9 	beq	29a00 <CBcmMailBox::Flush()+0x18>
   29a18:	e8bd8010 	pop	{r4, pc}

00029a1c <CBcmMailBox::Read()>:
   29a1c:	e5901000 	ldr	r1, [r0]
   29a20:	e3a02a0b 	mov	r2, #45056	; 0xb000
   29a24:	e3432f00 	movt	r2, #16128	; 0x3f00
   29a28:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   29a2c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29a30:	1afffffc 	bne	29a28 <CBcmMailBox::Read()+0xc>
   29a34:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   29a38:	e200300f 	and	r3, r0, #15
   29a3c:	e1510003 	cmp	r1, r3
   29a40:	1afffff8 	bne	29a28 <CBcmMailBox::Read()+0xc>
   29a44:	e3c0000f 	bic	r0, r0, #15
   29a48:	e12fff1e 	bx	lr

00029a4c <CBcmMailBox::Write(unsigned int)>:
   29a4c:	e92d4070 	push	{r4, r5, r6, lr}
   29a50:	e3a02a0b 	mov	r2, #45056	; 0xb000
   29a54:	e3432f00 	movt	r2, #16128	; 0x3f00
   29a58:	e1a05000 	mov	r5, r0
   29a5c:	e1a04001 	mov	r4, r1
   29a60:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   29a64:	e3530000 	cmp	r3, #0
   29a68:	bafffffc 	blt	29a60 <CBcmMailBox::Write(unsigned int)+0x14>
   29a6c:	e314000f 	tst	r4, #15
   29a70:	0a000005 	beq	29a8c <CBcmMailBox::Write(unsigned int)+0x40>
   29a74:	e3011930 	movw	r1, #6448	; 0x1930
   29a78:	e3401003 	movt	r1, #3
   29a7c:	e3010940 	movw	r0, #6464	; 0x1940
   29a80:	e3400003 	movt	r0, #3
   29a84:	e3a0205a 	mov	r2, #90	; 0x5a
   29a88:	ebffec44 	bl	24ba0 <assertion_failed>
   29a8c:	e5952000 	ldr	r2, [r5]
   29a90:	e3a03a0b 	mov	r3, #45056	; 0xb000
   29a94:	e3433f00 	movt	r3, #16128	; 0x3f00
   29a98:	e1844002 	orr	r4, r4, r2
   29a9c:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   29aa0:	e8bd8070 	pop	{r4, r5, r6, pc}

00029aa4 <CBcmMailBox::WriteRead(unsigned int)>:
   29aa4:	e92d4070 	push	{r4, r5, r6, lr}
   29aa8:	e1a05000 	mov	r5, r0
   29aac:	e5900004 	ldr	r0, [r0, #4]
   29ab0:	e1a06001 	mov	r6, r1
   29ab4:	e3500000 	cmp	r0, #0
   29ab8:	1a00001e 	bne	29b38 <CBcmMailBox::WriteRead(unsigned int)+0x94>
   29abc:	e3a04a0b 	mov	r4, #45056	; 0xb000
   29ac0:	e3434f00 	movt	r4, #16128	; 0x3f00
   29ac4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   29ac8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29acc:	1a000005 	bne	29ae8 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   29ad0:	e3a00014 	mov	r0, #20
   29ad4:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   29ad8:	ebffe447 	bl	22bfc <CTimer::SimpleMsDelay(unsigned int)>
   29adc:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   29ae0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29ae4:	0afffff9 	beq	29ad0 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   29ae8:	e1a00005 	mov	r0, r5
   29aec:	e1a01006 	mov	r1, r6
   29af0:	ebffffd5 	bl	29a4c <CBcmMailBox::Write(unsigned int)>
   29af4:	e5950000 	ldr	r0, [r5]
   29af8:	e3a02a0b 	mov	r2, #45056	; 0xb000
   29afc:	e3432f00 	movt	r2, #16128	; 0x3f00
   29b00:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   29b04:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29b08:	1afffffc 	bne	29b00 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   29b0c:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   29b10:	e203100f 	and	r1, r3, #15
   29b14:	e1510000 	cmp	r1, r0
   29b18:	1afffff8 	bne	29b00 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   29b1c:	e5952004 	ldr	r2, [r5, #4]
   29b20:	e3c3400f 	bic	r4, r3, #15
   29b24:	e3520000 	cmp	r2, #0
   29b28:	0a000000 	beq	29b30 <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   29b2c:	ebffe153 	bl	22080 <LeaveCritical>
   29b30:	e1a00004 	mov	r0, r4
   29b34:	e8bd8070 	pop	{r4, r5, r6, pc}
   29b38:	ebffe122 	bl	21fc8 <EnterCritical>
   29b3c:	eaffffde 	b	29abc <CBcmMailBox::WriteRead(unsigned int)+0x18>

00029b40 <__Divide>:
   29b40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29b44:	e2514000 	subs	r4, r1, #0
   29b48:	e1a06000 	mov	r6, r0
   29b4c:	e1a07002 	mov	r7, r2
   29b50:	0a000021 	beq	29bdc <__Divide+0x9c>
   29b54:	e3a03000 	mov	r3, #0
   29b58:	e3a05000 	mov	r5, #0
   29b5c:	e1a02004 	mov	r2, r4
   29b60:	e1530005 	cmp	r3, r5
   29b64:	01520006 	cmpeq	r2, r6
   29b68:	e1a04006 	mov	r4, r6
   29b6c:	2a000024 	bcs	29c04 <__Divide+0xc4>
   29b70:	e3a01001 	mov	r1, #1
   29b74:	ea000000 	b	29b7c <__Divide+0x3c>
   29b78:	e1a01000 	mov	r1, r0
   29b7c:	e0922002 	adds	r2, r2, r2
   29b80:	e2810001 	add	r0, r1, #1
   29b84:	e0a33003 	adc	r3, r3, r3
   29b88:	e1530005 	cmp	r3, r5
   29b8c:	01520004 	cmpeq	r2, r4
   29b90:	3afffff8 	bcc	29b78 <__Divide+0x38>
   29b94:	e3500000 	cmp	r0, #0
   29b98:	0a00000c 	beq	29bd0 <__Divide+0x90>
   29b9c:	e3a00000 	mov	r0, #0
   29ba0:	e1550003 	cmp	r5, r3
   29ba4:	e2411001 	sub	r1, r1, #1
   29ba8:	01540002 	cmpeq	r4, r2
   29bac:	e1a00080 	lsl	r0, r0, #1
   29bb0:	20466002 	subcs	r6, r6, r2
   29bb4:	23800001 	orrcs	r0, r0, #1
   29bb8:	e1b030a3 	lsrs	r3, r3, #1
   29bbc:	e1a02062 	rrx	r2, r2
   29bc0:	e3710001 	cmn	r1, #1
   29bc4:	e1a04006 	mov	r4, r6
   29bc8:	e3a05000 	mov	r5, #0
   29bcc:	1afffff3 	bne	29ba0 <__Divide+0x60>
   29bd0:	e3570000 	cmp	r7, #0
   29bd4:	15876000 	strne	r6, [r7]
   29bd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29bdc:	e3a0201f 	mov	r2, #31
   29be0:	e3011954 	movw	r1, #6484	; 0x1954
   29be4:	e3401003 	movt	r1, #3
   29be8:	e30b0138 	movw	r0, #45368	; 0xb138
   29bec:	e3400002 	movt	r0, #2
   29bf0:	ebffebea 	bl	24ba0 <assertion_failed>
   29bf4:	ebfff481 	bl	26e00 <CExceptionHandler::Get()>
   29bf8:	e1a01004 	mov	r1, r4
   29bfc:	ebfff437 	bl	26ce0 <CExceptionHandler::Throw(unsigned int)>
   29c00:	eaffffd3 	b	29b54 <__Divide+0x14>
   29c04:	e3a01000 	mov	r1, #0
   29c08:	eaffffe3 	b	29b9c <__Divide+0x5c>

00029c0c <__DivideInteger>:
   29c0c:	e2502000 	subs	r2, r0, #0
   29c10:	e92d4010 	push	{r4, lr}
   29c14:	ba000004 	blt	29c2c <__DivideInteger+0x20>
   29c18:	e3510000 	cmp	r1, #0
   29c1c:	ba00000e 	blt	29c5c <__DivideInteger+0x50>
   29c20:	e3a02000 	mov	r2, #0
   29c24:	e8bd4010 	pop	{r4, lr}
   29c28:	eaffffc4 	b	29b40 <__Divide>
   29c2c:	e3510000 	cmp	r1, #0
   29c30:	ba000004 	blt	29c48 <__DivideInteger+0x3c>
   29c34:	e2620000 	rsb	r0, r2, #0
   29c38:	e3a02000 	mov	r2, #0
   29c3c:	ebffffbf 	bl	29b40 <__Divide>
   29c40:	e2600000 	rsb	r0, r0, #0
   29c44:	e8bd8010 	pop	{r4, pc}
   29c48:	e2620000 	rsb	r0, r2, #0
   29c4c:	e2611000 	rsb	r1, r1, #0
   29c50:	e3a02000 	mov	r2, #0
   29c54:	e8bd4010 	pop	{r4, lr}
   29c58:	eaffffb8 	b	29b40 <__Divide>
   29c5c:	e2611000 	rsb	r1, r1, #0
   29c60:	e3a02000 	mov	r2, #0
   29c64:	ebffffb5 	bl	29b40 <__Divide>
   29c68:	e2600000 	rsb	r0, r0, #0
   29c6c:	e8bd8010 	pop	{r4, pc}

00029c70 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   29c70:	e92d4010 	push	{r4, lr}
   29c74:	e1a04000 	mov	r4, r0
   29c78:	e3a01000 	mov	r1, #0
   29c7c:	e24dd010 	sub	sp, sp, #16
   29c80:	e3a02c01 	mov	r2, #256	; 0x100
   29c84:	e5943020 	ldr	r3, [r4, #32]
   29c88:	e28d0008 	add	r0, sp, #8
   29c8c:	e583100c 	str	r1, [r3, #12]
   29c90:	e5832010 	str	r2, [r3, #16]
   29c94:	ebffdc77 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   29c98:	e3003408 	movw	r3, #1032	; 0x408
   29c9c:	e5942020 	ldr	r2, [r4, #32]
   29ca0:	e28d0008 	add	r0, sp, #8
   29ca4:	e58d3000 	str	r3, [sp]
   29ca8:	e308100b 	movw	r1, #32779	; 0x800b
   29cac:	e3401004 	movt	r1, #4
   29cb0:	e3003414 	movw	r3, #1044	; 0x414
   29cb4:	ebffdcb7 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   29cb8:	e3500000 	cmp	r0, #0
   29cbc:	e28d0008 	add	r0, sp, #8
   29cc0:	0a000003 	beq	29cd4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
   29cc4:	e5943020 	ldr	r3, [r4, #32]
   29cc8:	e593300c 	ldr	r3, [r3, #12]
   29ccc:	e3530000 	cmp	r3, #0
   29cd0:	0a000003 	beq	29ce4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
   29cd4:	ebffdc6d 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   29cd8:	e3a00000 	mov	r0, #0
   29cdc:	e28dd010 	add	sp, sp, #16
   29ce0:	e8bd8010 	pop	{r4, pc}
   29ce4:	ebffdc69 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   29ce8:	e3a00001 	mov	r0, #1
   29cec:	e28dd010 	add	sp, sp, #16
   29cf0:	e8bd8010 	pop	{r4, pc}

00029cf4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   29cf4:	e92d4030 	push	{r4, r5, lr}
   29cf8:	e3510000 	cmp	r1, #0
   29cfc:	13520000 	cmpne	r2, #0
   29d00:	e1a04000 	mov	r4, r0
   29d04:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   29d08:	e3a05000 	mov	r5, #0
   29d0c:	e8840006 	stm	r4, {r1, r2}
   29d10:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   29d14:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   29d18:	e5843010 	str	r3, [r4, #16]
   29d1c:	e584c00c 	str	ip, [r4, #12]
   29d20:	e5840008 	str	r0, [r4, #8]
   29d24:	e5845014 	str	r5, [r4, #20]
   29d28:	e5845018 	str	r5, [r4, #24]
   29d2c:	e584501c 	str	r5, [r4, #28]
   29d30:	e5845020 	str	r5, [r4, #32]
   29d34:	1a000011 	bne	29d80 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   29d38:	e28d000c 	add	r0, sp, #12
   29d3c:	ebffdc4d 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   29d40:	e3a03014 	mov	r3, #20
   29d44:	e58d5000 	str	r5, [sp]
   29d48:	e28d000c 	add	r0, sp, #12
   29d4c:	e3a01003 	mov	r1, #3
   29d50:	e3401004 	movt	r1, #4
   29d54:	e08d2003 	add	r2, sp, r3
   29d58:	ebffdc8e 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   29d5c:	e1500005 	cmp	r0, r5
   29d60:	1a000027 	bne	29e04 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   29d64:	e3a02d0a 	mov	r2, #640	; 0x280
   29d68:	e3a03e1e 	mov	r3, #480	; 0x1e0
   29d6c:	e884000c 	stm	r4, {r2, r3}
   29d70:	e28d000c 	add	r0, sp, #12
   29d74:	ebffdc45 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   29d78:	e5940008 	ldr	r0, [r4, #8]
   29d7c:	e5943010 	ldr	r3, [r4, #16]
   29d80:	e3500000 	cmp	r0, #0
   29d84:	0a00001a 	beq	29df4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   29d88:	e594200c 	ldr	r2, [r4, #12]
   29d8c:	e3520000 	cmp	r2, #0
   29d90:	0a000017 	beq	29df4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   29d94:	e3530008 	cmp	r3, #8
   29d98:	8a000007 	bhi	29dbc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
   29d9c:	e3000414 	movw	r0, #1044	; 0x414
   29da0:	ebffe07d 	bl	21f9c <operator new[](unsigned int)>
   29da4:	e3a02b01 	mov	r2, #1024	; 0x400
   29da8:	e5840020 	str	r0, [r4, #32]
   29dac:	e3a01000 	mov	r1, #0
   29db0:	e2800014 	add	r0, r0, #20
   29db4:	ebffe3eb 	bl	22d68 <memset>
   29db8:	e5943010 	ldr	r3, [r4, #16]
   29dbc:	e3012bec 	movw	r2, #7148	; 0x1bec
   29dc0:	e3402003 	movt	r2, #3
   29dc4:	e5945000 	ldr	r5, [r4]
   29dc8:	e1a00004 	mov	r0, r4
   29dcc:	e594e004 	ldr	lr, [r4, #4]
   29dd0:	e594c008 	ldr	ip, [r4, #8]
   29dd4:	e594100c 	ldr	r1, [r4, #12]
   29dd8:	e582500c 	str	r5, [r2, #12]
   29ddc:	e582e010 	str	lr, [r2, #16]
   29de0:	e582c020 	str	ip, [r2, #32]
   29de4:	e5821024 	str	r1, [r2, #36]	; 0x24
   29de8:	e5823034 	str	r3, [r2, #52]	; 0x34
   29dec:	e28dd02c 	add	sp, sp, #44	; 0x2c
   29df0:	e8bd8030 	pop	{r4, r5, pc}
   29df4:	e8940006 	ldm	r4, {r1, r2}
   29df8:	e5841008 	str	r1, [r4, #8]
   29dfc:	e584200c 	str	r2, [r4, #12]
   29e00:	eaffffe3 	b	29d94 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   29e04:	e59d2020 	ldr	r2, [sp, #32]
   29e08:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   29e0c:	e2421d0a 	sub	r1, r2, #640	; 0x280
   29e10:	e5842000 	str	r2, [r4]
   29e14:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
   29e18:	e5843004 	str	r3, [r4, #4]
   29e1c:	e3520f96 	cmp	r2, #600	; 0x258
   29e20:	93510c05 	cmpls	r1, #1280	; 0x500
   29e24:	9affffd1 	bls	29d70 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   29e28:	eaffffcd 	b	29d64 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

00029e2c <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   29e2c:	e92d4010 	push	{r4, lr}
   29e30:	e3a01014 	mov	r1, #20
   29e34:	e1a04000 	mov	r4, r0
   29e38:	e5900020 	ldr	r0, [r0, #32]
   29e3c:	ebffe059 	bl	21fa8 <operator delete(void*, unsigned int)>
   29e40:	e1a00004 	mov	r0, r4
   29e44:	e8bd8010 	pop	{r4, pc}

00029e48 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   29e48:	e5903010 	ldr	r3, [r0, #16]
   29e4c:	e3530008 	cmp	r3, #8
   29e50:	812fff1e 	bxhi	lr
   29e54:	e5900020 	ldr	r0, [r0, #32]
   29e58:	e1a03982 	lsl	r3, r2, #19
   29e5c:	e1a0c5a2 	lsr	ip, r2, #11
   29e60:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   29e64:	e1a02282 	lsl	r2, r2, #5
   29e68:	e0801101 	add	r1, r0, r1, lsl #2
   29e6c:	e183318c 	orr	r3, r3, ip, lsl #3
   29e70:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   29e74:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   29e78:	e1822003 	orr	r2, r2, r3
   29e7c:	e5812014 	str	r2, [r1, #20]
   29e80:	e12fff1e 	bx	lr

00029e84 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   29e84:	e5903010 	ldr	r3, [r0, #16]
   29e88:	e3530008 	cmp	r3, #8
   29e8c:	95903020 	ldrls	r3, [r0, #32]
   29e90:	90831101 	addls	r1, r3, r1, lsl #2
   29e94:	95812014 	strls	r2, [r1, #20]
   29e98:	e12fff1e 	bx	lr

00029e9c <CBcmFrameBuffer::Initialize()>:
   29e9c:	e92d4070 	push	{r4, r5, r6, lr}
   29ea0:	e1a05000 	mov	r5, r0
   29ea4:	e3016bec 	movw	r6, #7148	; 0x1bec
   29ea8:	e3406003 	movt	r6, #3
   29eac:	e24dd008 	sub	sp, sp, #8
   29eb0:	e1a0000d 	mov	r0, sp
   29eb4:	ebffdbef 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   29eb8:	e1a01006 	mov	r1, r6
   29ebc:	e1a0000d 	mov	r0, sp
   29ec0:	e3a02070 	mov	r2, #112	; 0x70
   29ec4:	ebffdbf6 	bl	20ea4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   29ec8:	e2504000 	subs	r4, r0, #0
   29ecc:	0a00001e 	beq	29f4c <CBcmFrameBuffer::Initialize()+0xb0>
   29ed0:	e596400c 	ldr	r4, [r6, #12]
   29ed4:	e3540000 	cmp	r4, #0
   29ed8:	0a00001b 	beq	29f4c <CBcmFrameBuffer::Initialize()+0xb0>
   29edc:	e5964010 	ldr	r4, [r6, #16]
   29ee0:	e3540000 	cmp	r4, #0
   29ee4:	0a000018 	beq	29f4c <CBcmFrameBuffer::Initialize()+0xb0>
   29ee8:	e5964020 	ldr	r4, [r6, #32]
   29eec:	e3540000 	cmp	r4, #0
   29ef0:	0a000015 	beq	29f4c <CBcmFrameBuffer::Initialize()+0xb0>
   29ef4:	e5964024 	ldr	r4, [r6, #36]	; 0x24
   29ef8:	e3540000 	cmp	r4, #0
   29efc:	0a000012 	beq	29f4c <CBcmFrameBuffer::Initialize()+0xb0>
   29f00:	e5964034 	ldr	r4, [r6, #52]	; 0x34
   29f04:	e3540000 	cmp	r4, #0
   29f08:	0a00000f 	beq	29f4c <CBcmFrameBuffer::Initialize()+0xb0>
   29f0c:	e5964058 	ldr	r4, [r6, #88]	; 0x58
   29f10:	e3540000 	cmp	r4, #0
   29f14:	0a00000c 	beq	29f4c <CBcmFrameBuffer::Initialize()+0xb0>
   29f18:	e5953010 	ldr	r3, [r5, #16]
   29f1c:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   29f20:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
   29f24:	e3530008 	cmp	r3, #8
   29f28:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
   29f2c:	e5854014 	str	r4, [r5, #20]
   29f30:	83a04001 	movhi	r4, #1
   29f34:	e5852018 	str	r2, [r5, #24]
   29f38:	e585301c 	str	r3, [r5, #28]
   29f3c:	8a000002 	bhi	29f4c <CBcmFrameBuffer::Initialize()+0xb0>
   29f40:	e1a00005 	mov	r0, r5
   29f44:	ebffff49 	bl	29c70 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   29f48:	e1a04000 	mov	r4, r0
   29f4c:	e1a0000d 	mov	r0, sp
   29f50:	ebffdbce 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   29f54:	e1a00004 	mov	r0, r4
   29f58:	e28dd008 	add	sp, sp, #8
   29f5c:	e8bd8070 	pop	{r4, r5, r6, pc}

00029f60 <CBcmFrameBuffer::GetWidth() const>:
   29f60:	e5900000 	ldr	r0, [r0]
   29f64:	e12fff1e 	bx	lr

00029f68 <CBcmFrameBuffer::GetHeight() const>:
   29f68:	e5900004 	ldr	r0, [r0, #4]
   29f6c:	e12fff1e 	bx	lr

00029f70 <CBcmFrameBuffer::GetVirtWidth() const>:
   29f70:	e5900008 	ldr	r0, [r0, #8]
   29f74:	e12fff1e 	bx	lr

00029f78 <CBcmFrameBuffer::GetVirtHeight() const>:
   29f78:	e590000c 	ldr	r0, [r0, #12]
   29f7c:	e12fff1e 	bx	lr

00029f80 <CBcmFrameBuffer::GetPitch() const>:
   29f80:	e590001c 	ldr	r0, [r0, #28]
   29f84:	e12fff1e 	bx	lr

00029f88 <CBcmFrameBuffer::GetDepth() const>:
   29f88:	e5900010 	ldr	r0, [r0, #16]
   29f8c:	e12fff1e 	bx	lr

00029f90 <CBcmFrameBuffer::GetBuffer() const>:
   29f90:	e5900014 	ldr	r0, [r0, #20]
   29f94:	e12fff1e 	bx	lr

00029f98 <CBcmFrameBuffer::GetSize() const>:
   29f98:	e5900018 	ldr	r0, [r0, #24]
   29f9c:	e12fff1e 	bx	lr

00029fa0 <CBcmFrameBuffer::UpdatePalette()>:
   29fa0:	e5903010 	ldr	r3, [r0, #16]
   29fa4:	e3530008 	cmp	r3, #8
   29fa8:	9a000001 	bls	29fb4 <CBcmFrameBuffer::UpdatePalette()+0x14>
   29fac:	e3a00001 	mov	r0, #1
   29fb0:	e12fff1e 	bx	lr
   29fb4:	eaffff2d 	b	29c70 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00029fb8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   29fb8:	e92d4070 	push	{r4, r5, r6, lr}
   29fbc:	e1a05001 	mov	r5, r1
   29fc0:	e1a06002 	mov	r6, r2
   29fc4:	e24dd028 	sub	sp, sp, #40	; 0x28
   29fc8:	e28d000c 	add	r0, sp, #12
   29fcc:	ebffdba9 	bl	20e78 <CBcmPropertyTags::CBcmPropertyTags()>
   29fd0:	e3a03008 	mov	r3, #8
   29fd4:	e58d3000 	str	r3, [sp]
   29fd8:	e3a03014 	mov	r3, #20
   29fdc:	e28d000c 	add	r0, sp, #12
   29fe0:	e3081009 	movw	r1, #32777	; 0x8009
   29fe4:	e3401004 	movt	r1, #4
   29fe8:	e08d2003 	add	r2, sp, r3
   29fec:	e58d5020 	str	r5, [sp, #32]
   29ff0:	e58d6024 	str	r6, [sp, #36]	; 0x24
   29ff4:	ebffdbe7 	bl	20f98 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   29ff8:	e2504000 	subs	r4, r0, #0
   29ffc:	0a000006 	beq	2a01c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   2a000:	e59d3020 	ldr	r3, [sp, #32]
   2a004:	e1550003 	cmp	r5, r3
   2a008:	13a04000 	movne	r4, #0
   2a00c:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   2a010:	00444006 	subeq	r4, r4, r6
   2a014:	016f4f14 	clzeq	r4, r4
   2a018:	01a042a4 	lsreq	r4, r4, #5
   2a01c:	e28d000c 	add	r0, sp, #12
   2a020:	ebffdb9a 	bl	20e90 <CBcmPropertyTags::~CBcmPropertyTags()>
   2a024:	e1a00004 	mov	r0, r4
   2a028:	e28dd028 	add	sp, sp, #40	; 0x28
   2a02c:	e8bd8070 	pop	{r4, r5, r6, pc}

0002a030 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>:
   2a030:	e3510006 	cmp	r1, #6
   2a034:	e92d4010 	push	{r4, lr}
   2a038:	e1a04000 	mov	r4, r0
   2a03c:	e5c01000 	strb	r1, [r0]
   2a040:	e5c02001 	strb	r2, [r0, #1]
   2a044:	ca000009 	bgt	2a070 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x40>
   2a048:	e3520007 	cmp	r2, #7
   2a04c:	da000005 	ble	2a068 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x38>
   2a050:	e3011974 	movw	r1, #6516	; 0x1974
   2a054:	e3401003 	movt	r1, #3
   2a058:	e301099c 	movw	r0, #6556	; 0x199c
   2a05c:	e3400003 	movt	r0, #3
   2a060:	e3a0201e 	mov	r2, #30
   2a064:	ebffeacd 	bl	24ba0 <assertion_failed>
   2a068:	e1a00004 	mov	r0, r4
   2a06c:	e8bd8010 	pop	{r4, pc}
   2a070:	e3a0201d 	mov	r2, #29
   2a074:	e3011974 	movw	r1, #6516	; 0x1974
   2a078:	e3401003 	movt	r1, #3
   2a07c:	e3010984 	movw	r0, #6532	; 0x1984
   2a080:	e3400003 	movt	r0, #3
   2a084:	ebffeac5 	bl	24ba0 <assertion_failed>
   2a088:	e5d42001 	ldrb	r2, [r4, #1]
   2a08c:	eaffffed 	b	2a048 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x18>

0002a090 <CGPIOClock::~CGPIOClock()>:
   2a090:	e5d01000 	ldrb	r1, [r0]
   2a094:	e300220e 	movw	r2, #526	; 0x20e
   2a098:	e34027e2 	movt	r2, #2018	; 0x7e2
   2a09c:	e0812002 	add	r2, r1, r2
   2a0a0:	e3a03020 	mov	r3, #32
   2a0a4:	e3453a00 	movt	r3, #23040	; 0x5a00
   2a0a8:	e1a02182 	lsl	r2, r2, #3
   2a0ac:	e5823000 	str	r3, [r2]
   2a0b0:	e5923000 	ldr	r3, [r2]
   2a0b4:	e3130080 	tst	r3, #128	; 0x80
   2a0b8:	1afffffc 	bne	2a0b0 <CGPIOClock::~CGPIOClock()+0x20>
   2a0bc:	e12fff1e 	bx	lr

0002a0c0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>:
   2a0c0:	e3530003 	cmp	r3, #3
   2a0c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2a0c8:	e1a05003 	mov	r5, r3
   2a0cc:	e1a07000 	mov	r7, r0
   2a0d0:	e1a08001 	mov	r8, r1
   2a0d4:	e1a06002 	mov	r6, r2
   2a0d8:	8a000029 	bhi	2a184 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xc4>
   2a0dc:	e3013964 	movw	r3, #6500	; 0x1964
   2a0e0:	e3403003 	movt	r3, #3
   2a0e4:	e7933105 	ldr	r3, [r3, r5, lsl #2]
   2a0e8:	e1530008 	cmp	r3, r8
   2a0ec:	93580a01 	cmpls	r8, #4096	; 0x1000
   2a0f0:	3a000005 	bcc	2a10c <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x4c>
   2a0f4:	e3011974 	movw	r1, #6516	; 0x1974
   2a0f8:	e3401003 	movt	r1, #3
   2a0fc:	e30109c8 	movw	r0, #6600	; 0x19c8
   2a100:	e3400003 	movt	r0, #3
   2a104:	e3a0202c 	mov	r2, #44	; 0x2c
   2a108:	ebffeaa4 	bl	24ba0 <assertion_failed>
   2a10c:	e3560a01 	cmp	r6, #4096	; 0x1000
   2a110:	2a000022 	bcs	2a1a0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xe0>
   2a114:	e5d73000 	ldrb	r3, [r7]
   2a118:	e300420e 	movw	r4, #526	; 0x20e
   2a11c:	e34047e2 	movt	r4, #2018	; 0x7e2
   2a120:	e0834004 	add	r4, r3, r4
   2a124:	e3a03020 	mov	r3, #32
   2a128:	e3453a00 	movt	r3, #23040	; 0x5a00
   2a12c:	e1a04184 	lsl	r4, r4, #3
   2a130:	e5843000 	str	r3, [r4]
   2a134:	e5943000 	ldr	r3, [r4]
   2a138:	e3130080 	tst	r3, #128	; 0x80
   2a13c:	1afffffc 	bne	2a134 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x74>
   2a140:	e386645a 	orr	r6, r6, #1509949440	; 0x5a000000
   2a144:	e3a0000a 	mov	r0, #10
   2a148:	e1a05485 	lsl	r5, r5, #9
   2a14c:	e1866608 	orr	r6, r6, r8, lsl #12
   2a150:	e385545a 	orr	r5, r5, #1509949440	; 0x5a000000
   2a154:	e5846004 	str	r6, [r4, #4]
   2a158:	ebffe2b7 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
   2a15c:	e5d73001 	ldrb	r3, [r7, #1]
   2a160:	e3a0000a 	mov	r0, #10
   2a164:	e1855003 	orr	r5, r5, r3
   2a168:	e5845000 	str	r5, [r4]
   2a16c:	ebffe2b2 	bl	22c3c <CTimer::SimpleusDelay(unsigned int)>
   2a170:	e5943000 	ldr	r3, [r4]
   2a174:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   2a178:	e3833010 	orr	r3, r3, #16
   2a17c:	e5843000 	str	r3, [r4]
   2a180:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2a184:	e3011974 	movw	r1, #6516	; 0x1974
   2a188:	e3401003 	movt	r1, #3
   2a18c:	e30109bc 	movw	r0, #6588	; 0x19bc
   2a190:	e3400003 	movt	r0, #3
   2a194:	e3a0202b 	mov	r2, #43	; 0x2b
   2a198:	ebffea80 	bl	24ba0 <assertion_failed>
   2a19c:	eaffffce 	b	2a0dc <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x1c>
   2a1a0:	e3011974 	movw	r1, #6516	; 0x1974
   2a1a4:	e3401003 	movt	r1, #3
   2a1a8:	e30109f4 	movw	r0, #6644	; 0x19f4
   2a1ac:	e3400003 	movt	r0, #3
   2a1b0:	e3a0202d 	mov	r2, #45	; 0x2d
   2a1b4:	ebffea79 	bl	24ba0 <assertion_failed>
   2a1b8:	eaffffd5 	b	2a114 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x54>

0002a1bc <CGPIOClock::Stop()>:
   2a1bc:	e5d03000 	ldrb	r3, [r0]
   2a1c0:	e300220e 	movw	r2, #526	; 0x20e
   2a1c4:	e34027e2 	movt	r2, #2018	; 0x7e2
   2a1c8:	e0832002 	add	r2, r3, r2
   2a1cc:	e3a03020 	mov	r3, #32
   2a1d0:	e3453a00 	movt	r3, #23040	; 0x5a00
   2a1d4:	e1a02182 	lsl	r2, r2, #3
   2a1d8:	e5823000 	str	r3, [r2]
   2a1dc:	e5923000 	ldr	r3, [r2]
   2a1e0:	e3130080 	tst	r3, #128	; 0x80
   2a1e4:	1afffffc 	bne	2a1dc <CGPIOClock::Stop()+0x20>
   2a1e8:	e12fff1e 	bx	lr
