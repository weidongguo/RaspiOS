
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea0006cd 	b	9b9c <sysinit>

00008064 <_start_secondary>:
    8064:	e10f0000 	mrs	r0, CPSR
    8068:	e220001a 	eor	r0, r0, #26
    806c:	e310001f 	tst	r0, #31
    8070:	e3c0001f 	bic	r0, r0, #31
    8074:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8078:	1a000004 	bne	8090 <_start_secondary+0x2c>
    807c:	e3800c01 	orr	r0, r0, #256	; 0x100
    8080:	e28fe00c 	add	lr, pc, #12
    8084:	e16ff000 	msr	SPSR_fsxc, r0
    8088:	e12ef30e 	.word	0xe12ef30e
    808c:	e160006e 	.word	0xe160006e
    8090:	e121f000 	msr	CPSR_c, r0
    8094:	ee100fb0 	mrc	15, 0, r0, cr0, cr0, {5}
    8098:	e2000003 	and	r0, r0, #3
    809c:	e3a01902 	mov	r1, #32768	; 0x8000
    80a0:	e0010190 	mul	r1, r0, r1
    80a4:	f1020011 	cps	#17
    80a8:	e3a0282d 	mov	r2, #2949120	; 0x2d0000
    80ac:	e081d002 	add	sp, r1, r2
    80b0:	f1020012 	cps	#18
    80b4:	e3a0282b 	mov	r2, #2818048	; 0x2b0000
    80b8:	e081d002 	add	sp, r1, r2
    80bc:	f1020017 	cps	#23
    80c0:	e3a02829 	mov	r2, #2686976	; 0x290000
    80c4:	e081d002 	add	sp, r1, r2
    80c8:	f102001b 	cps	#27
    80cc:	e081d002 	add	sp, r1, r2
    80d0:	e3a01802 	mov	r1, #131072	; 0x20000
    80d4:	e0010190 	mul	r1, r0, r1
    80d8:	f102001f 	cps	#31
    80dc:	e3a0298a 	mov	r2, #2260992	; 0x228000
    80e0:	e081d002 	add	sp, r1, r2
    80e4:	ea0006d2 	b	9c34 <sysinit_secondary>

000080e8 <main>:
    80e8:	e92d4010 	push	{r4, lr}
    80ec:	e24ddd73 	sub	sp, sp, #7360	; 0x1cc0
    80f0:	e1a0000d 	mov	r0, sp
    80f4:	eb000011 	bl	8140 <CKernel::CKernel()>
    80f8:	e1a0000d 	mov	r0, sp
    80fc:	eb000050 	bl	8244 <CKernel::Initialize()>
    8100:	e2504000 	subs	r4, r0, #0
    8104:	0a000004 	beq	811c <main+0x34>
    8108:	e1a0000d 	mov	r0, sp
    810c:	eb000078 	bl	82f4 <CKernel::Run()>
    8110:	e3500002 	cmp	r0, #2
    8114:	13a04000 	movne	r4, #0
    8118:	0a000005 	beq	8134 <main+0x4c>
    811c:	eb00067d 	bl	9b18 <halt>
    8120:	e1a0000d 	mov	r0, sp
    8124:	eb0000a9 	bl	83d0 <CKernel::~CKernel()>
    8128:	e1a00004 	mov	r0, r4
    812c:	e28ddd73 	add	sp, sp, #7360	; 0x1cc0
    8130:	e8bd8010 	pop	{r4, pc}
    8134:	eb00068f 	bl	9b78 <reboot>
    8138:	e3a04001 	mov	r4, #1
    813c:	eafffff7 	b	8120 <main+0x38>

00008140 <CKernel::CKernel()>:
    8140:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8144:	e3a01001 	mov	r1, #1
    8148:	e1a04000 	mov	r4, r0
    814c:	e280a010 	add	sl, r0, #16
    8150:	e284801c 	add	r8, r4, #28
    8154:	eb000620 	bl	99dc <CMemorySystem::CMemorySystem(int)>
    8158:	e1a0000a 	mov	r0, sl
    815c:	eb0001e6 	bl	88fc <CActLED::CActLED()>
    8160:	e1a00008 	mov	r0, r8
    8164:	eb000b02 	bl	ad74 <CKernelOptions::CKernelOptions()>
    8168:	e2840e85 	add	r0, r4, #2128	; 0x850
    816c:	e280000c 	add	r0, r0, #12
    8170:	e2846e87 	add	r6, r4, #2160	; 0x870
    8174:	eb001192 	bl	c7c4 <CDeviceNameService::CDeviceNameService()>
    8178:	e1a00008 	mov	r0, r8
    817c:	eb000aca 	bl	acac <CKernelOptions::GetWidth() const>
    8180:	e2866008 	add	r6, r6, #8
    8184:	e1a05000 	mov	r5, r0
    8188:	e1a00008 	mov	r0, r8
    818c:	eb000ac8 	bl	acb4 <CKernelOptions::GetHeight() const>
    8190:	e3a03000 	mov	r3, #0
    8194:	e1a01005 	mov	r1, r5
    8198:	e1a02000 	mov	r2, r0
    819c:	e1a00006 	mov	r0, r6
    81a0:	e2849d67 	add	r9, r4, #6592	; 0x19c0
    81a4:	eb000ca9 	bl	b450 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    81a8:	e3a02000 	mov	r2, #0
    81ac:	e2840e8e 	add	r0, r4, #2272	; 0x8e0
    81b0:	e1a01002 	mov	r1, r2
    81b4:	e280000c 	add	r0, r0, #12
    81b8:	e2847b07 	add	r7, r4, #7168	; 0x1c00
    81bc:	eb001393 	bl	d010 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>
    81c0:	e2890024 	add	r0, r9, #36	; 0x24
    81c4:	e2899028 	add	r9, r9, #40	; 0x28
    81c8:	eb0018d3 	bl	e51c <CExceptionHandler::CExceptionHandler()>
    81cc:	e2877028 	add	r7, r7, #40	; 0x28
    81d0:	e1a00009 	mov	r0, r9
    81d4:	eb0019c4 	bl	e8ec <CInterruptSystem::CInterruptSystem()>
    81d8:	e2845d71 	add	r5, r4, #7232	; 0x1c40
    81dc:	e1a01009 	mov	r1, r9
    81e0:	e1a00007 	mov	r0, r7
    81e4:	eb00069f 	bl	9c68 <CTimer::CTimer(CInterruptSystem*)>
    81e8:	e2855038 	add	r5, r5, #56	; 0x38
    81ec:	e1a00008 	mov	r0, r8
    81f0:	eb000ab4 	bl	acc8 <CKernelOptions::GetLogLevel() const>
    81f4:	e1a02007 	mov	r2, r7
    81f8:	e1a01000 	mov	r1, r0
    81fc:	e1a00005 	mov	r0, r5
    8200:	eb001210 	bl	ca48 <CLogger::CLogger(unsigned int, CTimer*)>
    8204:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    8208:	e2800028 	add	r0, r0, #40	; 0x28
    820c:	eb0023e6 	bl	111ac <CScheduler::CScheduler()>
    8210:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    8214:	e1a03004 	mov	r3, r4
    8218:	e1a02006 	mov	r2, r6
    821c:	e1a01005 	mov	r1, r5
    8220:	e2800030 	add	r0, r0, #48	; 0x30
    8224:	eb000144 	bl	873c <CoreManager::CoreManager(CLogger*, CScreenDevice*, CMemorySystem*)>
    8228:	e1a0000a 	mov	r0, sl
    822c:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8230:	e3a020c8 	mov	r2, #200	; 0xc8
    8234:	e3a01005 	mov	r1, #5
    8238:	eb0001f7 	bl	8a1c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    823c:	e1a00004 	mov	r0, r4
    8240:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00008244 <CKernel::Initialize()>:
    8244:	e92d4070 	push	{r4, r5, r6, lr}
    8248:	e2804e87 	add	r4, r0, #2160	; 0x870
    824c:	e1a05000 	mov	r5, r0
    8250:	e2844008 	add	r4, r4, #8
    8254:	e1a00004 	mov	r0, r4
    8258:	eb00101c 	bl	c2d0 <CScreenDevice::Initialize()>
    825c:	e3500000 	cmp	r0, #0
    8260:	1a000001 	bne	826c <CKernel::Initialize()+0x28>
    8264:	e3a00000 	mov	r0, #0
    8268:	e8bd8070 	pop	{r4, r5, r6, pc}
    826c:	e2850e8e 	add	r0, r5, #2272	; 0x8e0
    8270:	e3a01cc2 	mov	r1, #49664	; 0xc200
    8274:	e3401001 	movt	r1, #1
    8278:	e280000c 	add	r0, r0, #12
    827c:	eb001397 	bl	d0e0 <CSerialDevice::Initialize(unsigned int)>
    8280:	e3500000 	cmp	r0, #0
    8284:	0afffff6 	beq	8264 <CKernel::Initialize()+0x20>
    8288:	e285001c 	add	r0, r5, #28
    828c:	eb000a8a 	bl	acbc <CKernelOptions::GetLogDevice() const>
    8290:	e1a01000 	mov	r1, r0
    8294:	e2850e85 	add	r0, r5, #2128	; 0x850
    8298:	e3a02000 	mov	r2, #0
    829c:	e280000c 	add	r0, r0, #12
    82a0:	eb0011a3 	bl	c934 <CDeviceNameService::GetDevice(char const*, int)>
    82a4:	e2850d71 	add	r0, r5, #7232	; 0x1c40
    82a8:	e1a01004 	mov	r1, r4
    82ac:	e2800038 	add	r0, r0, #56	; 0x38
    82b0:	eb0012e3 	bl	ce44 <CLogger::Initialize(CDevice*)>
    82b4:	e3500000 	cmp	r0, #0
    82b8:	0affffe9 	beq	8264 <CKernel::Initialize()+0x20>
    82bc:	e2850d67 	add	r0, r5, #6592	; 0x19c0
    82c0:	e2800028 	add	r0, r0, #40	; 0x28
    82c4:	eb00199b 	bl	e938 <CInterruptSystem::Initialize()>
    82c8:	e3500000 	cmp	r0, #0
    82cc:	0affffe4 	beq	8264 <CKernel::Initialize()+0x20>
    82d0:	e2850b07 	add	r0, r5, #7168	; 0x1c00
    82d4:	e2800028 	add	r0, r0, #40	; 0x28
    82d8:	eb0008ad 	bl	a594 <CTimer::Initialize()>
    82dc:	e3500000 	cmp	r0, #0
    82e0:	0affffdf 	beq	8264 <CKernel::Initialize()+0x20>
    82e4:	e2850d72 	add	r0, r5, #7296	; 0x1c80
    82e8:	e2800030 	add	r0, r0, #48	; 0x30
    82ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    82f0:	ea001d73 	b	f8c4 <CMultiCoreSupport::Initialize()>

000082f4 <CKernel::Run()>:
    82f4:	e92d4030 	push	{r4, r5, lr}
    82f8:	e2805d71 	add	r5, r0, #7232	; 0x1c40
    82fc:	e3a02003 	mov	r2, #3
    8300:	e2855038 	add	r5, r5, #56	; 0x38
    8304:	e24dd00c 	sub	sp, sp, #12
    8308:	e1a04000 	mov	r4, r0
    830c:	e3013f74 	movw	r3, #8052	; 0x1f74
    8310:	e3403001 	movt	r3, #1
    8314:	e1a00005 	mov	r0, r5
    8318:	e3011f6c 	movw	r1, #8044	; 0x1f6c
    831c:	e3401001 	movt	r1, #1
    8320:	eb0012bb 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8324:	e3a0006c 	mov	r0, #108	; 0x6c
    8328:	eb0005f3 	bl	9afc <operator new(unsigned int)>
    832c:	e3a01031 	mov	r1, #49	; 0x31
    8330:	eb00012b 	bl	87e4 <myTask::myTask(char)>
    8334:	e3a0006c 	mov	r0, #108	; 0x6c
    8338:	eb0005ef 	bl	9afc <operator new(unsigned int)>
    833c:	e3a01032 	mov	r1, #50	; 0x32
    8340:	eb000127 	bl	87e4 <myTask::myTask(char)>
    8344:	e3a0006c 	mov	r0, #108	; 0x6c
    8348:	eb0005eb 	bl	9afc <operator new(unsigned int)>
    834c:	e3a01033 	mov	r1, #51	; 0x33
    8350:	eb000123 	bl	87e4 <myTask::myTask(char)>
    8354:	e3a0006c 	mov	r0, #108	; 0x6c
    8358:	eb0005e7 	bl	9afc <operator new(unsigned int)>
    835c:	e3a01034 	mov	r1, #52	; 0x34
    8360:	eb00011f 	bl	87e4 <myTask::myTask(char)>
    8364:	e3a0006c 	mov	r0, #108	; 0x6c
    8368:	eb0005e3 	bl	9afc <operator new(unsigned int)>
    836c:	e3a01035 	mov	r1, #53	; 0x35
    8370:	eb00011b 	bl	87e4 <myTask::myTask(char)>
    8374:	e3a0006c 	mov	r0, #108	; 0x6c
    8378:	eb0005df 	bl	9afc <operator new(unsigned int)>
    837c:	e3a01036 	mov	r1, #54	; 0x36
    8380:	e2844d72 	add	r4, r4, #7296	; 0x1c80
    8384:	eb000116 	bl	87e4 <myTask::myTask(char)>
    8388:	eb0008ec 	bl	a740 <CTimer::Get()>
    838c:	e3a00064 	mov	r0, #100	; 0x64
    8390:	e2844028 	add	r4, r4, #40	; 0x28
    8394:	eb00089d 	bl	a610 <CTimer::SimpleMsDelay(unsigned int)>
    8398:	eb0026cf 	bl	11edc <CScheduler::GetCore()>
    839c:	e3a02003 	mov	r2, #3
    83a0:	e58d0000 	str	r0, [sp]
    83a4:	e3013f98 	movw	r3, #8088	; 0x1f98
    83a8:	e3403001 	movt	r3, #1
    83ac:	e1a00005 	mov	r0, r5
    83b0:	e3011f6c 	movw	r1, #8044	; 0x1f6c
    83b4:	e3401001 	movt	r1, #1
    83b8:	eb001295 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    83bc:	e1a00004 	mov	r0, r4
    83c0:	eb0024ba 	bl	116b0 <CScheduler::Yield()>
    83c4:	eafffff3 	b	8398 <CKernel::Run()+0xa4>

000083c8 <CKernel::TimerHandler(unsigned int, void*, void*)>:
    83c8:	e3a03605 	mov	r3, #5242880	; 0x500000
    83cc:	e12fff13 	bx	r3

000083d0 <CKernel::~CKernel()>:
    83d0:	e92d4010 	push	{r4, lr}
    83d4:	e1a04000 	mov	r4, r0
    83d8:	e2800d72 	add	r0, r0, #7296	; 0x1c80
    83dc:	e2800030 	add	r0, r0, #48	; 0x30
    83e0:	eb000069 	bl	858c <CoreManager::~CoreManager()>
    83e4:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    83e8:	e2800028 	add	r0, r0, #40	; 0x28
    83ec:	eb0023ff 	bl	113f0 <CScheduler::~CScheduler()>
    83f0:	e2840d71 	add	r0, r4, #7232	; 0x1c40
    83f4:	e2800038 	add	r0, r0, #56	; 0x38
    83f8:	eb0011a5 	bl	ca94 <CLogger::~CLogger()>
    83fc:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8400:	e2800028 	add	r0, r0, #40	; 0x28
    8404:	eb00063a 	bl	9cf4 <CTimer::~CTimer()>
    8408:	e2840d67 	add	r0, r4, #6592	; 0x19c0
    840c:	e2800028 	add	r0, r0, #40	; 0x28
    8410:	eb001943 	bl	e924 <CInterruptSystem::~CInterruptSystem()>
    8414:	e2840d67 	add	r0, r4, #6592	; 0x19c0
    8418:	e2800024 	add	r0, r0, #36	; 0x24
    841c:	eb001862 	bl	e5ac <CExceptionHandler::~CExceptionHandler()>
    8420:	e2840e8e 	add	r0, r4, #2272	; 0x8e0
    8424:	e280000c 	add	r0, r0, #12
    8428:	eb001494 	bl	d680 <CSerialDevice::~CSerialDevice()>
    842c:	e2840e87 	add	r0, r4, #2160	; 0x870
    8430:	e2800008 	add	r0, r0, #8
    8434:	eb000bb6 	bl	b314 <CScreenDevice::~CScreenDevice()>
    8438:	e2840e85 	add	r0, r4, #2128	; 0x850
    843c:	e280000c 	add	r0, r0, #12
    8440:	eb0010f3 	bl	c814 <CDeviceNameService::~CDeviceNameService()>
    8444:	e284001c 	add	r0, r4, #28
    8448:	eb000a12 	bl	ac98 <CKernelOptions::~CKernelOptions()>
    844c:	e2840010 	add	r0, r4, #16
    8450:	eb000104 	bl	8868 <CActLED::~CActLED()>
    8454:	e1a00004 	mov	r0, r4
    8458:	eb0004fb 	bl	984c <CMemorySystem::~CMemorySystem()>
    845c:	e1a00004 	mov	r0, r4
    8460:	e8bd8010 	pop	{r4, pc}

00008464 <ContextSwitch>:
    8464:	e8807fff 	stm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    8468:	e8917fff 	ldm	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    846c:	e12fff1e 	bx	lr

00008470 <stub(void (*)(), ThreadManager*)>:
    8470:	e92d4010 	push	{r4, lr}
    8474:	e1a04001 	mov	r4, r1
    8478:	e12fff30 	blx	r0
    847c:	e5943008 	ldr	r3, [r4, #8]
    8480:	e594200c 	ldr	r2, [r4, #12]
    8484:	e5842008 	str	r2, [r4, #8]
    8488:	e5930000 	ldr	r0, [r3]
    848c:	e5921000 	ldr	r1, [r2]
    8490:	e2800004 	add	r0, r0, #4
    8494:	e584300c 	str	r3, [r4, #12]
    8498:	e2811004 	add	r1, r1, #4
    849c:	e8bd4010 	pop	{r4, lr}
    84a0:	eaffffef 	b	8464 <ContextSwitch>

000084a4 <ThreadManager::ThreadManager()>:
    84a4:	e92d4070 	push	{r4, r5, r6, lr}
    84a8:	e1a04000 	mov	r4, r0
    84ac:	e3a00048 	mov	r0, #72	; 0x48
    84b0:	eb000591 	bl	9afc <operator new(unsigned int)>
    84b4:	e3a02048 	mov	r2, #72	; 0x48
    84b8:	e3a01000 	mov	r1, #0
    84bc:	e1a05000 	mov	r5, r0
    84c0:	eb0008ac 	bl	a778 <memset>
    84c4:	e5845000 	str	r5, [r4]
    84c8:	e5844008 	str	r4, [r4, #8]
    84cc:	e1a00004 	mov	r0, r4
    84d0:	e8bd8070 	pop	{r4, r5, r6, pc}

000084d4 <ThreadManager::thread_create(void (*)(), ThreadManager*)>:
    84d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    84d8:	e3a00008 	mov	r0, #8
    84dc:	e1a08001 	mov	r8, r1
    84e0:	e1a07002 	mov	r7, r2
    84e4:	eb000584 	bl	9afc <operator new(unsigned int)>
    84e8:	e1a05000 	mov	r5, r0
    84ec:	e3a06000 	mov	r6, #0
    84f0:	e3a00048 	mov	r0, #72	; 0x48
    84f4:	e5856000 	str	r6, [r5]
    84f8:	e5856004 	str	r6, [r5, #4]
    84fc:	eb00057e 	bl	9afc <operator new(unsigned int)>
    8500:	e1a01006 	mov	r1, r6
    8504:	e1a04000 	mov	r4, r0
    8508:	e3a02048 	mov	r2, #72	; 0x48
    850c:	eb000899 	bl	a778 <memset>
    8510:	e3a03601 	mov	r3, #1048576	; 0x100000
    8514:	e1a00003 	mov	r0, r3
    8518:	e5843040 	str	r3, [r4, #64]	; 0x40
    851c:	e5854000 	str	r4, [r5]
    8520:	eb000576 	bl	9b00 <operator new[](unsigned int)>
    8524:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    8528:	e1a01000 	mov	r1, r0
    852c:	e3082470 	movw	r2, #33904	; 0x8470
    8530:	e3402000 	movt	r2, #0
    8534:	e0813003 	add	r3, r1, r3
    8538:	e584203c 	str	r2, [r4, #60]	; 0x3c
    853c:	e1a00005 	mov	r0, r5
    8540:	e3a02001 	mov	r2, #1
    8544:	e5848004 	str	r8, [r4, #4]
    8548:	e5841044 	str	r1, [r4, #68]	; 0x44
    854c:	e5847008 	str	r7, [r4, #8]
    8550:	e5843038 	str	r3, [r4, #56]	; 0x38
    8554:	e5c42000 	strb	r2, [r4]
    8558:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000855c <ThreadManager::thread_switch(Thread*, Thread*)>:
    855c:	e1a03000 	mov	r3, r0
    8560:	e592c000 	ldr	ip, [r2]
    8564:	e5910000 	ldr	r0, [r1]
    8568:	e583100c 	str	r1, [r3, #12]
    856c:	e2800004 	add	r0, r0, #4
    8570:	e5832008 	str	r2, [r3, #8]
    8574:	e28c1004 	add	r1, ip, #4
    8578:	eaffffb9 	b	8464 <ContextSwitch>

0000857c <ThreadManager::getCurrentThread()>:
    857c:	e5900008 	ldr	r0, [r0, #8]
    8580:	e12fff1e 	bx	lr

00008584 <ThreadManager::getParentThread()>:
    8584:	e590000c 	ldr	r0, [r0, #12]
    8588:	e12fff1e 	bx	lr

0000858c <CoreManager::~CoreManager()>:
    858c:	e92d4010 	push	{r4, lr}
    8590:	e3a03000 	mov	r3, #0
    8594:	e1a04000 	mov	r4, r0
    8598:	e5803008 	str	r3, [r0, #8]
    859c:	e3012fc4 	movw	r2, #8132	; 0x1fc4
    85a0:	e3402001 	movt	r2, #1
    85a4:	e5802000 	str	r2, [r0]
    85a8:	e580300c 	str	r3, [r0, #12]
    85ac:	eb001cb5 	bl	f888 <CMultiCoreSupport::~CMultiCoreSupport()>
    85b0:	e1a00004 	mov	r0, r4
    85b4:	e8bd8010 	pop	{r4, pc}

000085b8 <CoreManager::~CoreManager()>:
    85b8:	e92d4010 	push	{r4, lr}
    85bc:	e3a03000 	mov	r3, #0
    85c0:	e1a04000 	mov	r4, r0
    85c4:	e5803008 	str	r3, [r0, #8]
    85c8:	e3012fc4 	movw	r2, #8132	; 0x1fc4
    85cc:	e3402001 	movt	r2, #1
    85d0:	e5802000 	str	r2, [r0]
    85d4:	e580300c 	str	r3, [r0, #12]
    85d8:	eb001caa 	bl	f888 <CMultiCoreSupport::~CMultiCoreSupport()>
    85dc:	e1a00004 	mov	r0, r4
    85e0:	e3a01010 	mov	r1, #16
    85e4:	eb000548 	bl	9b0c <operator delete(void*, unsigned int)>
    85e8:	e1a00004 	mov	r0, r4
    85ec:	e8bd8010 	pop	{r4, pc}

000085f0 <CoreManager::Run(unsigned int)>:
    85f0:	e92d4030 	push	{r4, r5, lr}
    85f4:	e3a02003 	mov	r2, #3
    85f8:	e1a04000 	mov	r4, r0
    85fc:	e24dd014 	sub	sp, sp, #20
    8600:	e1a05001 	mov	r5, r1
    8604:	e3013fd4 	movw	r3, #8148	; 0x1fd4
    8608:	e3403001 	movt	r3, #1
    860c:	e58d1000 	str	r1, [sp]
    8610:	e3011ff8 	movw	r1, #8184	; 0x1ff8
    8614:	e3401001 	movt	r1, #1
    8618:	e590000c 	ldr	r0, [r0, #12]
    861c:	eb0011fc 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8620:	e28d0008 	add	r0, sp, #8
    8624:	eb0022e0 	bl	111ac <CScheduler::CScheduler()>
    8628:	e28d0008 	add	r0, sp, #8
    862c:	eb00255f 	bl	11bb0 <CScheduler::startFromSecondary()>
    8630:	e594000c 	ldr	r0, [r4, #12]
    8634:	e3a02003 	mov	r2, #3
    8638:	e58d5000 	str	r5, [sp]
    863c:	e3023004 	movw	r3, #8196	; 0x2004
    8640:	e3403001 	movt	r3, #1
    8644:	e3011ff8 	movw	r1, #8184	; 0x1ff8
    8648:	e3401001 	movt	r1, #1
    864c:	eb0011f0 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8650:	e28d0008 	add	r0, sp, #8
    8654:	eb002415 	bl	116b0 <CScheduler::Yield()>
    8658:	eafffff4 	b	8630 <CoreManager::Run(unsigned int)+0x40>

0000865c <CoreManager::IPIHandler(unsigned int, unsigned int)>:
    865c:	e92d4030 	push	{r4, r5, lr}
    8660:	e3510003 	cmp	r1, #3
    8664:	e1a04001 	mov	r4, r1
    8668:	e24dd00c 	sub	sp, sp, #12
    866c:	e1a05002 	mov	r5, r2
    8670:	8a00001c 	bhi	86e8 <CoreManager::IPIHandler(unsigned int, unsigned int)+0x8c>
    8674:	e355001f 	cmp	r5, #31
    8678:	8a00000a 	bhi	86a8 <CoreManager::IPIHandler(unsigned int, unsigned int)+0x4c>
    867c:	e3550000 	cmp	r5, #0
    8680:	0a00001f 	beq	8704 <CoreManager::IPIHandler(unsigned int, unsigned int)+0xa8>
    8684:	e355000a 	cmp	r5, #10
    8688:	1a00000c 	bne	86c0 <CoreManager::IPIHandler(unsigned int, unsigned int)+0x64>
    868c:	e1a04204 	lsl	r4, r4, #4
    8690:	e2844101 	add	r4, r4, #1073741824	; 0x40000000
    8694:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    8698:	e3530000 	cmp	r3, #0
    869c:	1a000023 	bne	8730 <CoreManager::IPIHandler(unsigned int, unsigned int)+0xd4>
    86a0:	e28dd00c 	add	sp, sp, #12
    86a4:	e8bd8030 	pop	{r4, r5, pc}
    86a8:	e3021020 	movw	r1, #8224	; 0x2020
    86ac:	e3401001 	movt	r1, #1
    86b0:	e3020040 	movw	r0, #8256	; 0x2040
    86b4:	e3400001 	movt	r0, #1
    86b8:	e3a02030 	mov	r2, #48	; 0x30
    86bc:	eb000f90 	bl	c504 <assertion_failed>
    86c0:	eb001105 	bl	cadc <CLogger::Get()>
    86c4:	e58d4000 	str	r4, [sp]
    86c8:	e3a02004 	mov	r2, #4
    86cc:	e3023088 	movw	r3, #8328	; 0x2088
    86d0:	e3403001 	movt	r3, #1
    86d4:	e302107c 	movw	r1, #8316	; 0x207c
    86d8:	e3401001 	movt	r1, #1
    86dc:	eb0011cc 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    86e0:	e28dd00c 	add	sp, sp, #12
    86e4:	e8bd8030 	pop	{r4, r5, pc}
    86e8:	e3021020 	movw	r1, #8224	; 0x2020
    86ec:	e3401001 	movt	r1, #1
    86f0:	e3020030 	movw	r0, #8240	; 0x2030
    86f4:	e3400001 	movt	r0, #1
    86f8:	e3a0202f 	mov	r2, #47	; 0x2f
    86fc:	eb000f80 	bl	c504 <assertion_failed>
    8700:	eaffffdb 	b	8674 <CoreManager::IPIHandler(unsigned int, unsigned int)+0x18>
    8704:	eb0010f4 	bl	cadc <CLogger::Get()>
    8708:	e58d4000 	str	r4, [sp]
    870c:	e3a02004 	mov	r2, #4
    8710:	e302304c 	movw	r3, #8268	; 0x204c
    8714:	e3403001 	movt	r3, #1
    8718:	e302107c 	movw	r1, #8316	; 0x207c
    871c:	e3401001 	movt	r1, #1
    8720:	eb0011bb 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8724:	e28dd00c 	add	sp, sp, #12
    8728:	e8bd4030 	pop	{r4, r5, lr}
    872c:	ea0004f9 	b	9b18 <halt>
    8730:	e28dd00c 	add	sp, sp, #12
    8734:	e8bd4030 	pop	{r4, r5, lr}
    8738:	e12fff13 	bx	r3

0000873c <CoreManager::CoreManager(CLogger*, CScreenDevice*, CMemorySystem*)>:
    873c:	e92d4070 	push	{r4, r5, r6, lr}
    8740:	e1a04000 	mov	r4, r0
    8744:	e1a05001 	mov	r5, r1
    8748:	e1a01003 	mov	r1, r3
    874c:	e1a06002 	mov	r6, r2
    8750:	eb001c38 	bl	f838 <CMultiCoreSupport::CMultiCoreSupport(CMemorySystem*)>
    8754:	e3013fc4 	movw	r3, #8132	; 0x1fc4
    8758:	e3403001 	movt	r3, #1
    875c:	e5843000 	str	r3, [r4]
    8760:	e5846008 	str	r6, [r4, #8]
    8764:	e1a00004 	mov	r0, r4
    8768:	e584500c 	str	r5, [r4, #12]
    876c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008770 <CoreManager::AssignTask(unsigned int, void (*)())>:
    8770:	e3510003 	cmp	r1, #3
    8774:	91a01201 	lslls	r1, r1, #4
    8778:	93e03000 	mvnls	r3, #0
    877c:	92811101 	addls	r1, r1, #1073741824	; 0x40000000
    8780:	958130cc 	strls	r3, [r1, #204]	; 0xcc
    8784:	9581208c 	strls	r2, [r1, #140]	; 0x8c
    8788:	e12fff1e 	bx	lr

0000878c <CoreManager::WakeUp(unsigned int)>:
    878c:	e1a00001 	mov	r0, r1
    8790:	e3a0100a 	mov	r1, #10
    8794:	ea001c8b 	b	f9c8 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)>

00008798 <myTask::~myTask()>:
    8798:	e92d4010 	push	{r4, lr}
    879c:	e1a04000 	mov	r4, r0
    87a0:	e30230b4 	movw	r3, #8372	; 0x20b4
    87a4:	e3403001 	movt	r3, #1
    87a8:	e5803000 	str	r3, [r0]
    87ac:	eb0021e4 	bl	10f44 <CTask::~CTask()>
    87b0:	e1a00004 	mov	r0, r4
    87b4:	e8bd8010 	pop	{r4, pc}

000087b8 <myTask::~myTask()>:
    87b8:	e92d4010 	push	{r4, lr}
    87bc:	e1a04000 	mov	r4, r0
    87c0:	e30230b4 	movw	r3, #8372	; 0x20b4
    87c4:	e3403001 	movt	r3, #1
    87c8:	e5803000 	str	r3, [r0]
    87cc:	eb0021dc 	bl	10f44 <CTask::~CTask()>
    87d0:	e1a00004 	mov	r0, r4
    87d4:	e3a0106c 	mov	r1, #108	; 0x6c
    87d8:	eb0004cb 	bl	9b0c <operator delete(void*, unsigned int)>
    87dc:	e1a00004 	mov	r0, r4
    87e0:	e8bd8010 	pop	{r4, pc}

000087e4 <myTask::myTask(char)>:
    87e4:	e92d4070 	push	{r4, r5, r6, lr}
    87e8:	e1a04000 	mov	r4, r0
    87ec:	e1a05001 	mov	r5, r1
    87f0:	e3a01901 	mov	r1, #16384	; 0x4000
    87f4:	eb00223e 	bl	110f4 <CTask::CTask(unsigned int)>
    87f8:	e30230b4 	movw	r3, #8372	; 0x20b4
    87fc:	e3403001 	movt	r3, #1
    8800:	e5843000 	str	r3, [r4]
    8804:	e5c45068 	strb	r5, [r4, #104]	; 0x68
    8808:	e1a00004 	mov	r0, r4
    880c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008810 <myTask::foo()>:
    8810:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8814:	e1a05000 	mov	r5, r0
    8818:	e24dd00c 	sub	sp, sp, #12
    881c:	eb0010ae 	bl	cadc <CLogger::Get()>
    8820:	e1a04000 	mov	r4, r0
    8824:	eb0025ac 	bl	11edc <CScheduler::GetCore()>
    8828:	e1d526d8 	ldrsb	r2, [r5, #104]	; 0x68
    882c:	e58d0000 	str	r0, [sp]
    8830:	e30230c0 	movw	r3, #8384	; 0x20c0
    8834:	e3403001 	movt	r3, #1
    8838:	e1a00004 	mov	r0, r4
    883c:	e58d2004 	str	r2, [sp, #4]
    8840:	e30210dc 	movw	r1, #8412	; 0x20dc
    8844:	e3401001 	movt	r1, #1
    8848:	e3a02003 	mov	r2, #3
    884c:	eb001170 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8850:	eb002582 	bl	11e60 <CScheduler::Get()>
    8854:	e3a0100a 	mov	r1, #10
    8858:	eb002531 	bl	11d24 <CScheduler::Sleep(unsigned int)>
    885c:	eaffffee 	b	881c <myTask::foo()+0xc>

00008860 <myTask::Run()>:
    8860:	e92d4010 	push	{r4, lr}
    8864:	ebffffe9 	bl	8810 <myTask::foo()>

00008868 <CActLED::~CActLED()>:
    8868:	e3043490 	movw	r3, #17552	; 0x4490
    886c:	e3403001 	movt	r3, #1
    8870:	e3a02000 	mov	r2, #0
    8874:	e5832000 	str	r2, [r3]
    8878:	e12fff1e 	bx	lr

0000887c <CActLED::On()>:
    887c:	e5903000 	ldr	r3, [r0]
    8880:	e3530000 	cmp	r3, #0
    8884:	0a000004 	beq	889c <CActLED::On()+0x20>
    8888:	e5901008 	ldr	r1, [r0, #8]
    888c:	e1a00003 	mov	r0, r3
    8890:	e2911000 	adds	r1, r1, #0
    8894:	13a01001 	movne	r1, #1
    8898:	ea0000f2 	b	8c68 <CGPIOPin::Write(unsigned int)>
    889c:	e5903004 	ldr	r3, [r0, #4]
    88a0:	e3530000 	cmp	r3, #0
    88a4:	012fff1e 	bxeq	lr
    88a8:	e5901008 	ldr	r1, [r0, #8]
    88ac:	e1a00003 	mov	r0, r3
    88b0:	e2911000 	adds	r1, r1, #0
    88b4:	13a01001 	movne	r1, #1
    88b8:	ea001a4b 	b	f1ec <CVirtualGPIOPin::Write(unsigned int)>

000088bc <CActLED::Off()>:
    88bc:	e5903000 	ldr	r3, [r0]
    88c0:	e3530000 	cmp	r3, #0
    88c4:	0a000004 	beq	88dc <CActLED::Off()+0x20>
    88c8:	e5901008 	ldr	r1, [r0, #8]
    88cc:	e1a00003 	mov	r0, r3
    88d0:	e16f1f11 	clz	r1, r1
    88d4:	e1a012a1 	lsr	r1, r1, #5
    88d8:	ea0000e2 	b	8c68 <CGPIOPin::Write(unsigned int)>
    88dc:	e5903004 	ldr	r3, [r0, #4]
    88e0:	e3530000 	cmp	r3, #0
    88e4:	012fff1e 	bxeq	lr
    88e8:	e5901008 	ldr	r1, [r0, #8]
    88ec:	e1a00003 	mov	r0, r3
    88f0:	e16f1f11 	clz	r1, r1
    88f4:	e1a012a1 	lsr	r1, r1, #5
    88f8:	ea001a3b 	b	f1ec <CVirtualGPIOPin::Write(unsigned int)>

000088fc <CActLED::CActLED()>:
    88fc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8900:	e1a04000 	mov	r4, r0
    8904:	e3043490 	movw	r3, #17552	; 0x4490
    8908:	e3403001 	movt	r3, #1
    890c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    8910:	e3a05000 	mov	r5, #0
    8914:	e28d001c 	add	r0, sp, #28
    8918:	e5845000 	str	r5, [r4]
    891c:	e5845004 	str	r5, [r4, #4]
    8920:	e5834000 	str	r4, [r3]
    8924:	eb000054 	bl	8a7c <CBcmPropertyTags::CBcmPropertyTags()>
    8928:	e58d5000 	str	r5, [sp]
    892c:	e28d001c 	add	r0, sp, #28
    8930:	e3a01002 	mov	r1, #2
    8934:	e3401001 	movt	r1, #1
    8938:	e3a03010 	mov	r3, #16
    893c:	e28d200c 	add	r2, sp, #12
    8940:	eb000095 	bl	8b9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8944:	e1500005 	cmp	r0, r5
    8948:	0a000011 	beq	8994 <CActLED::CActLED()+0x98>
    894c:	e59d3018 	ldr	r3, [sp, #24]
    8950:	e3130502 	tst	r3, #8388608	; 0x800000
    8954:	1a000013 	bne	89a8 <CActLED::CActLED()+0xac>
    8958:	e6ff3073 	uxth	r3, r3
    895c:	e353000f 	cmp	r3, #15
    8960:	83a06001 	movhi	r6, #1
    8964:	9a000021 	bls	89f0 <CActLED::CActLED()+0xf4>
    8968:	e3a00028 	mov	r0, #40	; 0x28
    896c:	eb000462 	bl	9afc <operator new(unsigned int)>
    8970:	e3a03000 	mov	r3, #0
    8974:	e3a02001 	mov	r2, #1
    8978:	e3a0102f 	mov	r1, #47	; 0x2f
    897c:	e1a05000 	mov	r5, r0
    8980:	eb000326 	bl	9620 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8984:	e5845000 	str	r5, [r4]
    8988:	e5846008 	str	r6, [r4, #8]
    898c:	e1a00004 	mov	r0, r4
    8990:	ebffffc9 	bl	88bc <CActLED::Off()>
    8994:	e28d001c 	add	r0, sp, #28
    8998:	eb00003d 	bl	8a94 <CBcmPropertyTags::~CBcmPropertyTags()>
    899c:	e1a00004 	mov	r0, r4
    89a0:	e28dd03c 	add	sp, sp, #60	; 0x3c
    89a4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    89a8:	e7e73253 	ubfx	r3, r3, #4, #8
    89ac:	e3530001 	cmp	r3, #1
    89b0:	9a00000e 	bls	89f0 <CActLED::CActLED()+0xf4>
    89b4:	e353000c 	cmp	r3, #12
    89b8:	13530009 	cmpne	r3, #9
    89bc:	03a06001 	moveq	r6, #1
    89c0:	13a06000 	movne	r6, #0
    89c4:	e3530008 	cmp	r3, #8
    89c8:	12266001 	eorne	r6, r6, #1
    89cc:	1affffe5 	bne	8968 <CActLED::CActLED()+0x6c>
    89d0:	e3a00010 	mov	r0, #16
    89d4:	e2266001 	eor	r6, r6, #1
    89d8:	eb000447 	bl	9afc <operator new(unsigned int)>
    89dc:	e1a01005 	mov	r1, r5
    89e0:	e1a07000 	mov	r7, r0
    89e4:	eb001a2f 	bl	f2a8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    89e8:	e5847004 	str	r7, [r4, #4]
    89ec:	eaffffe5 	b	8988 <CActLED::CActLED()+0x8c>
    89f0:	e3a00028 	mov	r0, #40	; 0x28
    89f4:	eb000440 	bl	9afc <operator new(unsigned int)>
    89f8:	e3a03000 	mov	r3, #0
    89fc:	e3a02001 	mov	r2, #1
    8a00:	e3a01010 	mov	r1, #16
    8a04:	e1a05000 	mov	r5, r0
    8a08:	eb000304 	bl	9620 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8a0c:	e3a03000 	mov	r3, #0
    8a10:	e5845000 	str	r5, [r4]
    8a14:	e5843008 	str	r3, [r4, #8]
    8a18:	eaffffdb 	b	898c <CActLED::CActLED()+0x90>

00008a1c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8a1c:	e3510000 	cmp	r1, #0
    8a20:	012fff1e 	bxeq	lr
    8a24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a28:	e1a08003 	mov	r8, r3
    8a2c:	e1a07002 	mov	r7, r2
    8a30:	e1a05000 	mov	r5, r0
    8a34:	e1a06001 	mov	r6, r1
    8a38:	e3a04001 	mov	r4, #1
    8a3c:	e1a00005 	mov	r0, r5
    8a40:	e2844001 	add	r4, r4, #1
    8a44:	ebffff8c 	bl	887c <CActLED::On()>
    8a48:	e1a00007 	mov	r0, r7
    8a4c:	eb0006ef 	bl	a610 <CTimer::SimpleMsDelay(unsigned int)>
    8a50:	e1a00005 	mov	r0, r5
    8a54:	ebffff98 	bl	88bc <CActLED::Off()>
    8a58:	e1a00008 	mov	r0, r8
    8a5c:	eb0006eb 	bl	a610 <CTimer::SimpleMsDelay(unsigned int)>
    8a60:	e1560004 	cmp	r6, r4
    8a64:	2afffff4 	bcs	8a3c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
    8a68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008a6c <CActLED::Get()>:
    8a6c:	e3043490 	movw	r3, #17552	; 0x4490
    8a70:	e3403001 	movt	r3, #1
    8a74:	e5930000 	ldr	r0, [r3]
    8a78:	e12fff1e 	bx	lr

00008a7c <CBcmPropertyTags::CBcmPropertyTags()>:
    8a7c:	e92d4010 	push	{r4, lr}
    8a80:	e3a01008 	mov	r1, #8
    8a84:	e1a04000 	mov	r4, r0
    8a88:	eb001f6c 	bl	10840 <CBcmMailBox::CBcmMailBox(unsigned int)>
    8a8c:	e1a00004 	mov	r0, r4
    8a90:	e8bd8010 	pop	{r4, pc}

00008a94 <CBcmPropertyTags::~CBcmPropertyTags()>:
    8a94:	e92d4010 	push	{r4, lr}
    8a98:	e1a04000 	mov	r4, r0
    8a9c:	eb001f6e 	bl	1085c <CBcmMailBox::~CBcmMailBox()>
    8aa0:	e1a00004 	mov	r0, r4
    8aa4:	e8bd8010 	pop	{r4, pc}

00008aa8 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    8aa8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8aac:	e2519000 	subs	r9, r1, #0
    8ab0:	e1a0a000 	mov	sl, r0
    8ab4:	e1a04002 	mov	r4, r2
    8ab8:	0a000030 	beq	8b80 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
    8abc:	e354000f 	cmp	r4, #15
    8ac0:	9a000027 	bls	8b64 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
    8ac4:	e284800c 	add	r8, r4, #12
    8ac8:	e3180003 	tst	r8, #3
    8acc:	1a00001d 	bne	8b48 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    8ad0:	e3a06501 	mov	r6, #4194304	; 0x400000
    8ad4:	e3a05008 	mov	r5, #8
    8ad8:	e3405040 	movt	r5, #64	; 0x40
    8adc:	e3a07000 	mov	r7, #0
    8ae0:	e1a00005 	mov	r0, r5
    8ae4:	e5868000 	str	r8, [r6]
    8ae8:	e1a02004 	mov	r2, r4
    8aec:	e5867004 	str	r7, [r6, #4]
    8af0:	e1a01009 	mov	r1, r9
    8af4:	eb000838 	bl	abdc <memcpy>
    8af8:	e7857004 	str	r7, [r5, r4]
    8afc:	f57ff04f 	dsb	sy
    8b00:	e1a01007 	mov	r1, r7
    8b04:	e1a0000a 	mov	r0, sl
    8b08:	e34c1040 	movt	r1, #49216	; 0xc040
    8b0c:	eb001f88 	bl	10934 <CBcmMailBox::WriteRead(unsigned int)>
    8b10:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    8b14:	0a000001 	beq	8b20 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    8b18:	e3a00000 	mov	r0, #0
    8b1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8b20:	f57ff05f 	dmb	sy
    8b24:	e5963004 	ldr	r3, [r6, #4]
    8b28:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    8b2c:	1afffff9 	bne	8b18 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    8b30:	e1a02004 	mov	r2, r4
    8b34:	e1a01005 	mov	r1, r5
    8b38:	e1a00009 	mov	r0, r9
    8b3c:	eb000826 	bl	abdc <memcpy>
    8b40:	e3a00001 	mov	r0, #1
    8b44:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8b48:	e30210e0 	movw	r1, #8416	; 0x20e0
    8b4c:	e3401001 	movt	r1, #1
    8b50:	e302012c 	movw	r0, #8492	; 0x212c
    8b54:	e3400001 	movt	r0, #1
    8b58:	e3a02051 	mov	r2, #81	; 0x51
    8b5c:	eb000e68 	bl	c504 <assertion_failed>
    8b60:	eaffffda 	b	8ad0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    8b64:	e30210e0 	movw	r1, #8416	; 0x20e0
    8b68:	e3401001 	movt	r1, #1
    8b6c:	e3020100 	movw	r0, #8448	; 0x2100
    8b70:	e3400001 	movt	r0, #1
    8b74:	e3a0204f 	mov	r2, #79	; 0x4f
    8b78:	eb000e61 	bl	c504 <assertion_failed>
    8b7c:	eaffffd0 	b	8ac4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    8b80:	e30210e0 	movw	r1, #8416	; 0x20e0
    8b84:	e3401001 	movt	r1, #1
    8b88:	e30200f4 	movw	r0, #8436	; 0x20f4
    8b8c:	e3400001 	movt	r0, #1
    8b90:	e3a0204e 	mov	r2, #78	; 0x4e
    8b94:	eb000e5a 	bl	c504 <assertion_failed>
    8b98:	eaffffc7 	b	8abc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00008b9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    8b9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ba0:	e2524000 	subs	r4, r2, #0
    8ba4:	e1a07000 	mov	r7, r0
    8ba8:	e1a08001 	mov	r8, r1
    8bac:	e1a05003 	mov	r5, r3
    8bb0:	e59d6018 	ldr	r6, [sp, #24]
    8bb4:	0a00001d 	beq	8c30 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
    8bb8:	e355000f 	cmp	r5, #15
    8bbc:	9a000014 	bls	8c14 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    8bc0:	e245300c 	sub	r3, r5, #12
    8bc4:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    8bc8:	e5848000 	str	r8, [r4]
    8bcc:	e1a00007 	mov	r0, r7
    8bd0:	e5846008 	str	r6, [r4, #8]
    8bd4:	e1a02005 	mov	r2, r5
    8bd8:	e5843004 	str	r3, [r4, #4]
    8bdc:	e1a01004 	mov	r1, r4
    8be0:	ebffffb0 	bl	8aa8 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    8be4:	e3500000 	cmp	r0, #0
    8be8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8bec:	e5940008 	ldr	r0, [r4, #8]
    8bf0:	e3500000 	cmp	r0, #0
    8bf4:	ba000001 	blt	8c00 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    8bf8:	e3a00000 	mov	r0, #0
    8bfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c00:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    8c04:	e5840008 	str	r0, [r4, #8]
    8c08:	e2900000 	adds	r0, r0, #0
    8c0c:	13a00001 	movne	r0, #1
    8c10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c14:	e30210e0 	movw	r1, #8416	; 0x20e0
    8c18:	e3401001 	movt	r1, #1
    8c1c:	e3020150 	movw	r0, #8528	; 0x2150
    8c20:	e3400001 	movt	r0, #1
    8c24:	e3a02032 	mov	r2, #50	; 0x32
    8c28:	eb000e35 	bl	c504 <assertion_failed>
    8c2c:	eaffffe3 	b	8bc0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    8c30:	e30210e0 	movw	r1, #8416	; 0x20e0
    8c34:	e3401001 	movt	r1, #1
    8c38:	e3020144 	movw	r0, #8516	; 0x2144
    8c3c:	e3400001 	movt	r0, #1
    8c40:	e3a02031 	mov	r2, #49	; 0x31
    8c44:	eb000e2e 	bl	c504 <assertion_failed>
    8c48:	eaffffda 	b	8bb8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

00008c4c <CGPIOPin::~CGPIOPin()>:
    8c4c:	e12fff1e 	bx	lr

00008c50 <CGPIOPin::~CGPIOPin()>:
    8c50:	e92d4010 	push	{r4, lr}
    8c54:	e3a01028 	mov	r1, #40	; 0x28
    8c58:	e1a04000 	mov	r4, r0
    8c5c:	eb0003aa 	bl	9b0c <operator delete(void*, unsigned int)>
    8c60:	e1a00004 	mov	r0, r4
    8c64:	e8bd8010 	pop	{r4, pc}

00008c68 <CGPIOPin::Write(unsigned int)>:
    8c68:	e5d03010 	ldrb	r3, [r0, #16]
    8c6c:	e92d4070 	push	{r4, r5, r6, lr}
    8c70:	e3530003 	cmp	r3, #3
    8c74:	e1a04000 	mov	r4, r0
    8c78:	e1a05001 	mov	r5, r1
    8c7c:	8a000016 	bhi	8cdc <CGPIOPin::Write(unsigned int)+0x74>
    8c80:	e3550001 	cmp	r5, #1
    8c84:	9a00000c 	bls	8cbc <CGPIOPin::Write(unsigned int)+0x54>
    8c88:	e30211a0 	movw	r1, #8608	; 0x21a0
    8c8c:	e3401001 	movt	r1, #1
    8c90:	e30201d0 	movw	r0, #8656	; 0x21d0
    8c94:	e3400001 	movt	r0, #1
    8c98:	e3a02084 	mov	r2, #132	; 0x84
    8c9c:	eb000e18 	bl	c504 <assertion_failed>
    8ca0:	e3a0101c 	mov	r1, #28
    8ca4:	e3431f20 	movt	r1, #16160	; 0x3f20
    8ca8:	e5845014 	str	r5, [r4, #20]
    8cac:	e5943008 	ldr	r3, [r4, #8]
    8cb0:	e594200c 	ldr	r2, [r4, #12]
    8cb4:	e7812003 	str	r2, [r1, r3]
    8cb8:	e8bd8070 	pop	{r4, r5, r6, pc}
    8cbc:	e3a0301c 	mov	r3, #28
    8cc0:	e3433f20 	movt	r3, #16160	; 0x3f20
    8cc4:	e3550000 	cmp	r5, #0
    8cc8:	e3a01028 	mov	r1, #40	; 0x28
    8ccc:	e3431f20 	movt	r1, #16160	; 0x3f20
    8cd0:	11a01003 	movne	r1, r3
    8cd4:	e5845014 	str	r5, [r4, #20]
    8cd8:	eafffff3 	b	8cac <CGPIOPin::Write(unsigned int)+0x44>
    8cdc:	e30211a0 	movw	r1, #8608	; 0x21a0
    8ce0:	e3401001 	movt	r1, #1
    8ce4:	e30201ac 	movw	r0, #8620	; 0x21ac
    8ce8:	e3400001 	movt	r0, #1
    8cec:	e3a02080 	mov	r2, #128	; 0x80
    8cf0:	eb000e03 	bl	c504 <assertion_failed>
    8cf4:	eaffffe1 	b	8c80 <CGPIOPin::Write(unsigned int)+0x18>

00008cf8 <CGPIOPin::Read() const>:
    8cf8:	e5d03010 	ldrb	r3, [r0, #16]
    8cfc:	e92d4010 	push	{r4, lr}
    8d00:	e2432002 	sub	r2, r3, #2
    8d04:	e1a04000 	mov	r4, r0
    8d08:	e3530000 	cmp	r3, #0
    8d0c:	13520001 	cmpne	r2, #1
    8d10:	9a000005 	bls	8d2c <CGPIOPin::Read() const+0x34>
    8d14:	e30211a0 	movw	r1, #8608	; 0x21a0
    8d18:	e3401001 	movt	r1, #1
    8d1c:	e30201f0 	movw	r0, #8688	; 0x21f0
    8d20:	e3400001 	movt	r0, #1
    8d24:	e3a02092 	mov	r2, #146	; 0x92
    8d28:	eb000df5 	bl	c504 <assertion_failed>
    8d2c:	e5941008 	ldr	r1, [r4, #8]
    8d30:	e3a03034 	mov	r3, #52	; 0x34
    8d34:	e3433f20 	movt	r3, #16160	; 0x3f20
    8d38:	e594200c 	ldr	r2, [r4, #12]
    8d3c:	e7913003 	ldr	r3, [r1, r3]
    8d40:	e1130002 	tst	r3, r2
    8d44:	13a00001 	movne	r0, #1
    8d48:	03a00000 	moveq	r0, #0
    8d4c:	e8bd8010 	pop	{r4, pc}

00008d50 <CGPIOPin::Invert()>:
    8d50:	e5d03010 	ldrb	r3, [r0, #16]
    8d54:	e92d4010 	push	{r4, lr}
    8d58:	e3530001 	cmp	r3, #1
    8d5c:	e1a04000 	mov	r4, r0
    8d60:	0a000005 	beq	8d7c <CGPIOPin::Invert()+0x2c>
    8d64:	e30211a0 	movw	r1, #8608	; 0x21a0
    8d68:	e3401001 	movt	r1, #1
    8d6c:	e302024c 	movw	r0, #8780	; 0x224c
    8d70:	e3400001 	movt	r0, #1
    8d74:	e3a0209f 	mov	r2, #159	; 0x9f
    8d78:	eb000de1 	bl	c504 <assertion_failed>
    8d7c:	e5941014 	ldr	r1, [r4, #20]
    8d80:	e1a00004 	mov	r0, r4
    8d84:	e8bd4010 	pop	{r4, lr}
    8d88:	e2211001 	eor	r1, r1, #1
    8d8c:	eaffffb5 	b	8c68 <CGPIOPin::Write(unsigned int)>

00008d90 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    8d90:	e5d03010 	ldrb	r3, [r0, #16]
    8d94:	e92d4070 	push	{r4, r5, r6, lr}
    8d98:	e1a06002 	mov	r6, r2
    8d9c:	e2432002 	sub	r2, r3, #2
    8da0:	e3530000 	cmp	r3, #0
    8da4:	13520001 	cmpne	r2, #1
    8da8:	e1a04000 	mov	r4, r0
    8dac:	e1a05001 	mov	r5, r1
    8db0:	9a000005 	bls	8dcc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
    8db4:	e30211a0 	movw	r1, #8608	; 0x21a0
    8db8:	e3401001 	movt	r1, #1
    8dbc:	e30201f0 	movw	r0, #8688	; 0x21f0
    8dc0:	e3400001 	movt	r0, #1
    8dc4:	e3a020a8 	mov	r2, #168	; 0xa8
    8dc8:	eb000dcd 	bl	c504 <assertion_failed>
    8dcc:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8dd0:	e3530006 	cmp	r3, #6
    8dd4:	0a000005 	beq	8df0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
    8dd8:	e30211a0 	movw	r1, #8608	; 0x21a0
    8ddc:	e3401001 	movt	r1, #1
    8de0:	e3020268 	movw	r0, #8808	; 0x2268
    8de4:	e3400001 	movt	r0, #1
    8de8:	e3a020aa 	mov	r2, #170	; 0xaa
    8dec:	eb000dc4 	bl	c504 <assertion_failed>
    8df0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8df4:	e3530006 	cmp	r3, #6
    8df8:	0a000005 	beq	8e14 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
    8dfc:	e30211a0 	movw	r1, #8608	; 0x21a0
    8e00:	e3401001 	movt	r1, #1
    8e04:	e302028c 	movw	r0, #8844	; 0x228c
    8e08:	e3400001 	movt	r0, #1
    8e0c:	e3a020ab 	mov	r2, #171	; 0xab
    8e10:	eb000dbb 	bl	c504 <assertion_failed>
    8e14:	e3550000 	cmp	r5, #0
    8e18:	0a00001a 	beq	8e88 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    8e1c:	e594301c 	ldr	r3, [r4, #28]
    8e20:	e3530000 	cmp	r3, #0
    8e24:	0a000005 	beq	8e40 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    8e28:	e30211a0 	movw	r1, #8608	; 0x21a0
    8e2c:	e3401001 	movt	r1, #1
    8e30:	e30202b4 	movw	r0, #8884	; 0x22b4
    8e34:	e3400001 	movt	r0, #1
    8e38:	e3a020ae 	mov	r2, #174	; 0xae
    8e3c:	eb000db0 	bl	c504 <assertion_failed>
    8e40:	e5940018 	ldr	r0, [r4, #24]
    8e44:	e584501c 	str	r5, [r4, #28]
    8e48:	e3500000 	cmp	r0, #0
    8e4c:	e5846020 	str	r6, [r4, #32]
    8e50:	0a000002 	beq	8e60 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    8e54:	e1a01004 	mov	r1, r4
    8e58:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e5c:	ea001843 	b	ef70 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8e60:	e30211a0 	movw	r1, #8608	; 0x21a0
    8e64:	e3401001 	movt	r1, #1
    8e68:	e30202c4 	movw	r0, #8900	; 0x22c4
    8e6c:	e3400001 	movt	r0, #1
    8e70:	e3a020b3 	mov	r2, #179	; 0xb3
    8e74:	eb000da2 	bl	c504 <assertion_failed>
    8e78:	e5940018 	ldr	r0, [r4, #24]
    8e7c:	e1a01004 	mov	r1, r4
    8e80:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e84:	ea001839 	b	ef70 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8e88:	e30211a0 	movw	r1, #8608	; 0x21a0
    8e8c:	e3401001 	movt	r1, #1
    8e90:	e3030870 	movw	r0, #14448	; 0x3870
    8e94:	e3400001 	movt	r0, #1
    8e98:	e3a020ad 	mov	r2, #173	; 0xad
    8e9c:	eb000d98 	bl	c504 <assertion_failed>
    8ea0:	eaffffdd 	b	8e1c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

00008ea4 <CGPIOPin::DisconnectInterrupt()>:
    8ea4:	e5d03010 	ldrb	r3, [r0, #16]
    8ea8:	e92d4010 	push	{r4, lr}
    8eac:	e2432002 	sub	r2, r3, #2
    8eb0:	e1a04000 	mov	r4, r0
    8eb4:	e3530000 	cmp	r3, #0
    8eb8:	13520001 	cmpne	r2, #1
    8ebc:	9a000005 	bls	8ed8 <CGPIOPin::DisconnectInterrupt()+0x34>
    8ec0:	e30211a0 	movw	r1, #8608	; 0x21a0
    8ec4:	e3401001 	movt	r1, #1
    8ec8:	e30201f0 	movw	r0, #8688	; 0x21f0
    8ecc:	e3400001 	movt	r0, #1
    8ed0:	e3a020bb 	mov	r2, #187	; 0xbb
    8ed4:	eb000d8a 	bl	c504 <assertion_failed>
    8ed8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8edc:	e3530006 	cmp	r3, #6
    8ee0:	0a000005 	beq	8efc <CGPIOPin::DisconnectInterrupt()+0x58>
    8ee4:	e30211a0 	movw	r1, #8608	; 0x21a0
    8ee8:	e3401001 	movt	r1, #1
    8eec:	e3020268 	movw	r0, #8808	; 0x2268
    8ef0:	e3400001 	movt	r0, #1
    8ef4:	e3a020bd 	mov	r2, #189	; 0xbd
    8ef8:	eb000d81 	bl	c504 <assertion_failed>
    8efc:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8f00:	e3530006 	cmp	r3, #6
    8f04:	0a000005 	beq	8f20 <CGPIOPin::DisconnectInterrupt()+0x7c>
    8f08:	e30211a0 	movw	r1, #8608	; 0x21a0
    8f0c:	e3401001 	movt	r1, #1
    8f10:	e302028c 	movw	r0, #8844	; 0x228c
    8f14:	e3400001 	movt	r0, #1
    8f18:	e3a020be 	mov	r2, #190	; 0xbe
    8f1c:	eb000d78 	bl	c504 <assertion_failed>
    8f20:	e594301c 	ldr	r3, [r4, #28]
    8f24:	e3530000 	cmp	r3, #0
    8f28:	0a000011 	beq	8f74 <CGPIOPin::DisconnectInterrupt()+0xd0>
    8f2c:	e5940018 	ldr	r0, [r4, #24]
    8f30:	e3a03000 	mov	r3, #0
    8f34:	e584301c 	str	r3, [r4, #28]
    8f38:	e1500003 	cmp	r0, r3
    8f3c:	0a000002 	beq	8f4c <CGPIOPin::DisconnectInterrupt()+0xa8>
    8f40:	e1a01004 	mov	r1, r4
    8f44:	e8bd4010 	pop	{r4, lr}
    8f48:	ea001834 	b	f020 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8f4c:	e30211a0 	movw	r1, #8608	; 0x21a0
    8f50:	e3401001 	movt	r1, #1
    8f54:	e30202c4 	movw	r0, #8900	; 0x22c4
    8f58:	e3400001 	movt	r0, #1
    8f5c:	e3a020c3 	mov	r2, #195	; 0xc3
    8f60:	eb000d67 	bl	c504 <assertion_failed>
    8f64:	e5940018 	ldr	r0, [r4, #24]
    8f68:	e1a01004 	mov	r1, r4
    8f6c:	e8bd4010 	pop	{r4, lr}
    8f70:	ea00182a 	b	f020 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8f74:	e30211a0 	movw	r1, #8608	; 0x21a0
    8f78:	e3401001 	movt	r1, #1
    8f7c:	e30202d4 	movw	r0, #8916	; 0x22d4
    8f80:	e3400001 	movt	r0, #1
    8f84:	e3a020c0 	mov	r2, #192	; 0xc0
    8f88:	eb000d5d 	bl	c504 <assertion_failed>
    8f8c:	eaffffe6 	b	8f2c <CGPIOPin::DisconnectInterrupt()+0x88>

00008f90 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    8f90:	e5d03010 	ldrb	r3, [r0, #16]
    8f94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8f98:	e2432002 	sub	r2, r3, #2
    8f9c:	e1a04000 	mov	r4, r0
    8fa0:	e3530000 	cmp	r3, #0
    8fa4:	13520001 	cmpne	r2, #1
    8fa8:	e1a06001 	mov	r6, r1
    8fac:	9a000005 	bls	8fc8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
    8fb0:	e30211a0 	movw	r1, #8608	; 0x21a0
    8fb4:	e3401001 	movt	r1, #1
    8fb8:	e30201f0 	movw	r0, #8688	; 0x21f0
    8fbc:	e3400001 	movt	r0, #1
    8fc0:	e3a020cb 	mov	r2, #203	; 0xcb
    8fc4:	eb000d4e 	bl	c504 <assertion_failed>
    8fc8:	e594301c 	ldr	r3, [r4, #28]
    8fcc:	e3530000 	cmp	r3, #0
    8fd0:	0a00002f 	beq	9094 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    8fd4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8fd8:	e3530006 	cmp	r3, #6
    8fdc:	0a000005 	beq	8ff8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x68>
    8fe0:	e30211a0 	movw	r1, #8608	; 0x21a0
    8fe4:	e3401001 	movt	r1, #1
    8fe8:	e3020268 	movw	r0, #8808	; 0x2268
    8fec:	e3400001 	movt	r0, #1
    8ff0:	e3a020ce 	mov	r2, #206	; 0xce
    8ff4:	eb000d42 	bl	c504 <assertion_failed>
    8ff8:	e3560005 	cmp	r6, #5
    8ffc:	8a000014 	bhi	9054 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc4>
    9000:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9004:	e1530006 	cmp	r3, r6
    9008:	0a00001a 	beq	9078 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe8>
    900c:	e5943008 	ldr	r3, [r4, #8]
    9010:	e1a07206 	lsl	r7, r6, #4
    9014:	e3a0504c 	mov	r5, #76	; 0x4c
    9018:	e3435f20 	movt	r5, #16160	; 0x3f20
    901c:	e0835005 	add	r5, r3, r5
    9020:	e0477106 	sub	r7, r7, r6, lsl #2
    9024:	e5c46024 	strb	r6, [r4, #36]	; 0x24
    9028:	e3040494 	movw	r0, #17556	; 0x4494
    902c:	e3400001 	movt	r0, #1
    9030:	eb001b12 	bl	fc80 <CSpinLock::Acquire()>
    9034:	e594300c 	ldr	r3, [r4, #12]
    9038:	e7952007 	ldr	r2, [r5, r7]
    903c:	e3040494 	movw	r0, #17556	; 0x4494
    9040:	e3400001 	movt	r0, #1
    9044:	e1823003 	orr	r3, r2, r3
    9048:	e7853007 	str	r3, [r5, r7]
    904c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9050:	ea001b26 	b	fcf0 <CSpinLock::Release()>
    9054:	e30211a0 	movw	r1, #8608	; 0x21a0
    9058:	e3401001 	movt	r1, #1
    905c:	e30202e4 	movw	r0, #8932	; 0x22e4
    9060:	e3400001 	movt	r0, #1
    9064:	e3a020cf 	mov	r2, #207	; 0xcf
    9068:	eb000d25 	bl	c504 <assertion_failed>
    906c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9070:	e1530006 	cmp	r3, r6
    9074:	1affffe4 	bne	900c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
    9078:	e30211a0 	movw	r1, #8608	; 0x21a0
    907c:	e3401001 	movt	r1, #1
    9080:	e3020308 	movw	r0, #8968	; 0x2308
    9084:	e3400001 	movt	r0, #1
    9088:	e3a020d0 	mov	r2, #208	; 0xd0
    908c:	eb000d1c 	bl	c504 <assertion_failed>
    9090:	eaffffdd 	b	900c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
    9094:	e30211a0 	movw	r1, #8608	; 0x21a0
    9098:	e3401001 	movt	r1, #1
    909c:	e30202d4 	movw	r0, #8916	; 0x22d4
    90a0:	e3400001 	movt	r0, #1
    90a4:	e3a020cc 	mov	r2, #204	; 0xcc
    90a8:	eb000d15 	bl	c504 <assertion_failed>
    90ac:	eaffffc8 	b	8fd4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>

000090b0 <CGPIOPin::DisableInterrupt()>:
    90b0:	e5d03010 	ldrb	r3, [r0, #16]
    90b4:	e92d4070 	push	{r4, r5, r6, lr}
    90b8:	e2432002 	sub	r2, r3, #2
    90bc:	e1a04000 	mov	r4, r0
    90c0:	e3530000 	cmp	r3, #0
    90c4:	13520001 	cmpne	r2, #1
    90c8:	9a000005 	bls	90e4 <CGPIOPin::DisableInterrupt()+0x34>
    90cc:	e30211a0 	movw	r1, #8608	; 0x21a0
    90d0:	e3401001 	movt	r1, #1
    90d4:	e30201f0 	movw	r0, #8688	; 0x21f0
    90d8:	e3400001 	movt	r0, #1
    90dc:	e3a020e1 	mov	r2, #225	; 0xe1
    90e0:	eb000d07 	bl	c504 <assertion_failed>
    90e4:	e5d46024 	ldrb	r6, [r4, #36]	; 0x24
    90e8:	e3560005 	cmp	r6, #5
    90ec:	9a000006 	bls	910c <CGPIOPin::DisableInterrupt()+0x5c>
    90f0:	e30211a0 	movw	r1, #8608	; 0x21a0
    90f4:	e3401001 	movt	r1, #1
    90f8:	e3020324 	movw	r0, #8996	; 0x2324
    90fc:	e3400001 	movt	r0, #1
    9100:	e3a020e3 	mov	r2, #227	; 0xe3
    9104:	eb000cfe 	bl	c504 <assertion_failed>
    9108:	e5d46024 	ldrb	r6, [r4, #36]	; 0x24
    910c:	e5942008 	ldr	r2, [r4, #8]
    9110:	e1a03206 	lsl	r3, r6, #4
    9114:	e3a0504c 	mov	r5, #76	; 0x4c
    9118:	e3435f20 	movt	r5, #16160	; 0x3f20
    911c:	e0825005 	add	r5, r2, r5
    9120:	e0436106 	sub	r6, r3, r6, lsl #2
    9124:	e3040494 	movw	r0, #17556	; 0x4494
    9128:	e3400001 	movt	r0, #1
    912c:	eb001ad3 	bl	fc80 <CSpinLock::Acquire()>
    9130:	e594200c 	ldr	r2, [r4, #12]
    9134:	e7953006 	ldr	r3, [r5, r6]
    9138:	e3040494 	movw	r0, #17556	; 0x4494
    913c:	e3400001 	movt	r0, #1
    9140:	e1c33002 	bic	r3, r3, r2
    9144:	e7853006 	str	r3, [r5, r6]
    9148:	eb001ae8 	bl	fcf0 <CSpinLock::Release()>
    914c:	e3a03006 	mov	r3, #6
    9150:	e5c43024 	strb	r3, [r4, #36]	; 0x24
    9154:	e8bd8070 	pop	{r4, r5, r6, pc}

00009158 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    9158:	e5d03010 	ldrb	r3, [r0, #16]
    915c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9160:	e2432002 	sub	r2, r3, #2
    9164:	e1a04000 	mov	r4, r0
    9168:	e3530000 	cmp	r3, #0
    916c:	13520001 	cmpne	r2, #1
    9170:	e1a06001 	mov	r6, r1
    9174:	9a000005 	bls	9190 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
    9178:	e30211a0 	movw	r1, #8608	; 0x21a0
    917c:	e3401001 	movt	r1, #1
    9180:	e30201f0 	movw	r0, #8688	; 0x21f0
    9184:	e3400001 	movt	r0, #1
    9188:	e3a020f4 	mov	r2, #244	; 0xf4
    918c:	eb000cdc 	bl	c504 <assertion_failed>
    9190:	e594301c 	ldr	r3, [r4, #28]
    9194:	e3530000 	cmp	r3, #0
    9198:	0a00002f 	beq	925c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
    919c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    91a0:	e3530006 	cmp	r3, #6
    91a4:	0a000005 	beq	91c0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x68>
    91a8:	e30211a0 	movw	r1, #8608	; 0x21a0
    91ac:	e3401001 	movt	r1, #1
    91b0:	e302028c 	movw	r0, #8844	; 0x228c
    91b4:	e3400001 	movt	r0, #1
    91b8:	e3a020f7 	mov	r2, #247	; 0xf7
    91bc:	eb000cd0 	bl	c504 <assertion_failed>
    91c0:	e3560005 	cmp	r6, #5
    91c4:	8a000014 	bhi	921c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc4>
    91c8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    91cc:	e1530006 	cmp	r3, r6
    91d0:	0a00001a 	beq	9240 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe8>
    91d4:	e5943008 	ldr	r3, [r4, #8]
    91d8:	e1a07206 	lsl	r7, r6, #4
    91dc:	e3a0504c 	mov	r5, #76	; 0x4c
    91e0:	e3435f20 	movt	r5, #16160	; 0x3f20
    91e4:	e0835005 	add	r5, r3, r5
    91e8:	e0477106 	sub	r7, r7, r6, lsl #2
    91ec:	e5c46025 	strb	r6, [r4, #37]	; 0x25
    91f0:	e3040494 	movw	r0, #17556	; 0x4494
    91f4:	e3400001 	movt	r0, #1
    91f8:	eb001aa0 	bl	fc80 <CSpinLock::Acquire()>
    91fc:	e594300c 	ldr	r3, [r4, #12]
    9200:	e7952007 	ldr	r2, [r5, r7]
    9204:	e3040494 	movw	r0, #17556	; 0x4494
    9208:	e3400001 	movt	r0, #1
    920c:	e1823003 	orr	r3, r2, r3
    9210:	e7853007 	str	r3, [r5, r7]
    9214:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9218:	ea001ab4 	b	fcf0 <CSpinLock::Release()>
    921c:	e30211a0 	movw	r1, #8608	; 0x21a0
    9220:	e3401001 	movt	r1, #1
    9224:	e30202e4 	movw	r0, #8932	; 0x22e4
    9228:	e3400001 	movt	r0, #1
    922c:	e3a020f8 	mov	r2, #248	; 0xf8
    9230:	eb000cb3 	bl	c504 <assertion_failed>
    9234:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9238:	e1530006 	cmp	r3, r6
    923c:	1affffe4 	bne	91d4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
    9240:	e30211a0 	movw	r1, #8608	; 0x21a0
    9244:	e3401001 	movt	r1, #1
    9248:	e3020348 	movw	r0, #9032	; 0x2348
    924c:	e3400001 	movt	r0, #1
    9250:	e3a020f9 	mov	r2, #249	; 0xf9
    9254:	eb000caa 	bl	c504 <assertion_failed>
    9258:	eaffffdd 	b	91d4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
    925c:	e30211a0 	movw	r1, #8608	; 0x21a0
    9260:	e3401001 	movt	r1, #1
    9264:	e30202d4 	movw	r0, #8916	; 0x22d4
    9268:	e3400001 	movt	r0, #1
    926c:	e3a020f5 	mov	r2, #245	; 0xf5
    9270:	eb000ca3 	bl	c504 <assertion_failed>
    9274:	eaffffc8 	b	919c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>

00009278 <CGPIOPin::DisableInterrupt2()>:
    9278:	e5d03010 	ldrb	r3, [r0, #16]
    927c:	e92d4070 	push	{r4, r5, r6, lr}
    9280:	e2432002 	sub	r2, r3, #2
    9284:	e1a04000 	mov	r4, r0
    9288:	e3530000 	cmp	r3, #0
    928c:	13520001 	cmpne	r2, #1
    9290:	9a000005 	bls	92ac <CGPIOPin::DisableInterrupt2()+0x34>
    9294:	e30211a0 	movw	r1, #8608	; 0x21a0
    9298:	e3401001 	movt	r1, #1
    929c:	e30201f0 	movw	r0, #8688	; 0x21f0
    92a0:	e3400001 	movt	r0, #1
    92a4:	e300210a 	movw	r2, #266	; 0x10a
    92a8:	eb000c95 	bl	c504 <assertion_failed>
    92ac:	e5d46025 	ldrb	r6, [r4, #37]	; 0x25
    92b0:	e3560005 	cmp	r6, #5
    92b4:	9a000006 	bls	92d4 <CGPIOPin::DisableInterrupt2()+0x5c>
    92b8:	e30211a0 	movw	r1, #8608	; 0x21a0
    92bc:	e3401001 	movt	r1, #1
    92c0:	e3020364 	movw	r0, #9060	; 0x2364
    92c4:	e3400001 	movt	r0, #1
    92c8:	e3a02f43 	mov	r2, #268	; 0x10c
    92cc:	eb000c8c 	bl	c504 <assertion_failed>
    92d0:	e5d46025 	ldrb	r6, [r4, #37]	; 0x25
    92d4:	e5942008 	ldr	r2, [r4, #8]
    92d8:	e1a03206 	lsl	r3, r6, #4
    92dc:	e3a0504c 	mov	r5, #76	; 0x4c
    92e0:	e3435f20 	movt	r5, #16160	; 0x3f20
    92e4:	e0825005 	add	r5, r2, r5
    92e8:	e0436106 	sub	r6, r3, r6, lsl #2
    92ec:	e3040494 	movw	r0, #17556	; 0x4494
    92f0:	e3400001 	movt	r0, #1
    92f4:	eb001a61 	bl	fc80 <CSpinLock::Acquire()>
    92f8:	e594200c 	ldr	r2, [r4, #12]
    92fc:	e7953006 	ldr	r3, [r5, r6]
    9300:	e3040494 	movw	r0, #17556	; 0x4494
    9304:	e3400001 	movt	r0, #1
    9308:	e1c33002 	bic	r3, r3, r2
    930c:	e7853006 	str	r3, [r5, r6]
    9310:	eb001a76 	bl	fcf0 <CSpinLock::Release()>
    9314:	e3a03006 	mov	r3, #6
    9318:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    931c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009320 <CGPIOPin::ReadAll()>:
    9320:	e3a03000 	mov	r3, #0
    9324:	e3433f20 	movt	r3, #16160	; 0x3f20
    9328:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    932c:	e12fff1e 	bx	lr

00009330 <CGPIOPin::SetPullUpMode(unsigned int)>:
    9330:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9334:	e1a06000 	mov	r6, r0
    9338:	e1a07001 	mov	r7, r1
    933c:	e3a04098 	mov	r4, #152	; 0x98
    9340:	e3434f20 	movt	r4, #16160	; 0x3f20
    9344:	e3040494 	movw	r0, #17556	; 0x4494
    9348:	e3400001 	movt	r0, #1
    934c:	e5963008 	ldr	r3, [r6, #8]
    9350:	e0834004 	add	r4, r3, r4
    9354:	eb001a49 	bl	fc80 <CSpinLock::Acquire()>
    9358:	e3570002 	cmp	r7, #2
    935c:	9a000005 	bls	9378 <CGPIOPin::SetPullUpMode(unsigned int)+0x48>
    9360:	e30211a0 	movw	r1, #8608	; 0x21a0
    9364:	e3401001 	movt	r1, #1
    9368:	e3020388 	movw	r0, #9096	; 0x2388
    936c:	e3400001 	movt	r0, #1
    9370:	e3002125 	movw	r2, #293	; 0x125
    9374:	eb000c62 	bl	c504 <assertion_failed>
    9378:	e3a05000 	mov	r5, #0
    937c:	e3435f20 	movt	r5, #16160	; 0x3f20
    9380:	e3a00005 	mov	r0, #5
    9384:	e5857094 	str	r7, [r5, #148]	; 0x94
    9388:	eb0004b0 	bl	a650 <CTimer::SimpleusDelay(unsigned int)>
    938c:	e596300c 	ldr	r3, [r6, #12]
    9390:	e5843000 	str	r3, [r4]
    9394:	e3a00005 	mov	r0, #5
    9398:	eb0004ac 	bl	a650 <CTimer::SimpleusDelay(unsigned int)>
    939c:	e3a03000 	mov	r3, #0
    93a0:	e3040494 	movw	r0, #17556	; 0x4494
    93a4:	e3400001 	movt	r0, #1
    93a8:	e5853094 	str	r3, [r5, #148]	; 0x94
    93ac:	e5843000 	str	r3, [r4]
    93b0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    93b4:	ea001a4d 	b	fcf0 <CSpinLock::Release()>

000093b8 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    93b8:	e5903004 	ldr	r3, [r0, #4]
    93bc:	e92d4070 	push	{r4, r5, r6, lr}
    93c0:	e3530035 	cmp	r3, #53	; 0x35
    93c4:	e1a05001 	mov	r5, r1
    93c8:	8a000021 	bhi	9454 <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
    93cc:	e30c0ccd 	movw	r0, #52429	; 0xcccd
    93d0:	e34c0ccc 	movt	r0, #52428	; 0xcccc
    93d4:	e3550005 	cmp	r5, #5
    93d8:	e0810093 	umull	r0, r1, r3, r0
    93dc:	e1a041a1 	lsr	r4, r1, #3
    93e0:	e284253f 	add	r2, r4, #264241152	; 0xfc00000
    93e4:	e1a01184 	lsl	r1, r4, #3
    93e8:	e2822702 	add	r2, r2, #524288	; 0x80000
    93ec:	e0814084 	add	r4, r1, r4, lsl #1
    93f0:	e0644003 	rsb	r4, r4, r3
    93f4:	e1a06102 	lsl	r6, r2, #2
    93f8:	e0844084 	add	r4, r4, r4, lsl #1
    93fc:	9a000005 	bls	9418 <CGPIOPin::SetAlternateFunction(unsigned int)+0x60>
    9400:	e30211a0 	movw	r1, #8608	; 0x21a0
    9404:	e3401001 	movt	r1, #1
    9408:	e30203a8 	movw	r0, #9128	; 0x23a8
    940c:	e3400001 	movt	r0, #1
    9410:	e3002136 	movw	r2, #310	; 0x136
    9414:	eb000c3a 	bl	c504 <assertion_failed>
    9418:	e3040494 	movw	r0, #17556	; 0x4494
    941c:	e3400001 	movt	r0, #1
    9420:	eb001a16 	bl	fc80 <CSpinLock::Acquire()>
    9424:	e3021178 	movw	r1, #8568	; 0x2178
    9428:	e3401001 	movt	r1, #1
    942c:	e5962000 	ldr	r2, [r6]
    9430:	e3a03007 	mov	r3, #7
    9434:	e3040494 	movw	r0, #17556	; 0x4494
    9438:	e3400001 	movt	r0, #1
    943c:	e7911105 	ldr	r1, [r1, r5, lsl #2]
    9440:	e1c23413 	bic	r3, r2, r3, lsl r4
    9444:	e1834411 	orr	r4, r3, r1, lsl r4
    9448:	e5864000 	str	r4, [r6]
    944c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9450:	ea001a26 	b	fcf0 <CSpinLock::Release()>
    9454:	e1a04000 	mov	r4, r0
    9458:	e30211a0 	movw	r1, #8608	; 0x21a0
    945c:	e3401001 	movt	r1, #1
    9460:	e3020394 	movw	r0, #9108	; 0x2394
    9464:	e3400001 	movt	r0, #1
    9468:	e3002132 	movw	r2, #306	; 0x132
    946c:	eb000c24 	bl	c504 <assertion_failed>
    9470:	e5943004 	ldr	r3, [r4, #4]
    9474:	eaffffd4 	b	93cc <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

00009478 <CGPIOPin::SetMode(TGPIOMode, int)>:
    9478:	e3510009 	cmp	r1, #9
    947c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9480:	e1a04001 	mov	r4, r1
    9484:	e1a06000 	mov	r6, r0
    9488:	e1a07002 	mov	r7, r2
    948c:	8a000037 	bhi	9570 <CGPIOPin::SetMode(TGPIOMode, int)+0xf8>
    9490:	e2443004 	sub	r3, r4, #4
    9494:	e5c64010 	strb	r4, [r6, #16]
    9498:	e3530005 	cmp	r3, #5
    949c:	9a00002c 	bls	9554 <CGPIOPin::SetMode(TGPIOMode, int)+0xdc>
    94a0:	e2973000 	adds	r3, r7, #0
    94a4:	13a03001 	movne	r3, #1
    94a8:	e3540001 	cmp	r4, #1
    94ac:	13a03000 	movne	r3, #0
    94b0:	e3530000 	cmp	r3, #0
    94b4:	1a000055 	bne	9610 <CGPIOPin::SetMode(TGPIOMode, int)+0x198>
    94b8:	e5963004 	ldr	r3, [r6, #4]
    94bc:	e3530035 	cmp	r3, #53	; 0x35
    94c0:	8a00003a 	bhi	95b0 <CGPIOPin::SetMode(TGPIOMode, int)+0x138>
    94c4:	e30c4ccd 	movw	r4, #52429	; 0xcccd
    94c8:	e34c4ccc 	movt	r4, #52428	; 0xcccc
    94cc:	e3040494 	movw	r0, #17556	; 0x4494
    94d0:	e3400001 	movt	r0, #1
    94d4:	e0854493 	umull	r4, r5, r3, r4
    94d8:	e1a041a5 	lsr	r4, r5, #3
    94dc:	e1a05184 	lsl	r5, r4, #3
    94e0:	e0855084 	add	r5, r5, r4, lsl #1
    94e4:	e284453f 	add	r4, r4, #264241152	; 0xfc00000
    94e8:	e2844702 	add	r4, r4, #524288	; 0x80000
    94ec:	e0655003 	rsb	r5, r5, r3
    94f0:	eb0019e2 	bl	fc80 <CSpinLock::Acquire()>
    94f4:	e5d61010 	ldrb	r1, [r6, #16]
    94f8:	e1a04104 	lsl	r4, r4, #2
    94fc:	e0855085 	add	r5, r5, r5, lsl #1
    9500:	e2411001 	sub	r1, r1, #1
    9504:	e3a03007 	mov	r3, #7
    9508:	e16f1f11 	clz	r1, r1
    950c:	e3040494 	movw	r0, #17556	; 0x4494
    9510:	e3400001 	movt	r0, #1
    9514:	e5942000 	ldr	r2, [r4]
    9518:	e1a012a1 	lsr	r1, r1, #5
    951c:	e1c23513 	bic	r3, r2, r3, lsl r5
    9520:	e1835511 	orr	r5, r3, r1, lsl r5
    9524:	e5845000 	str	r5, [r4]
    9528:	eb0019f0 	bl	fcf0 <CSpinLock::Release()>
    952c:	e3570000 	cmp	r7, #0
    9530:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9534:	e5d63010 	ldrb	r3, [r6, #16]
    9538:	e3530003 	cmp	r3, #3
    953c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9540:	ea000011 	b	958c <CGPIOPin::SetMode(TGPIOMode, int)+0x114>
    9544:	00009600 	.word	0x00009600
    9548:	000095f0 	.word	0x000095f0
    954c:	000095e0 	.word	0x000095e0
    9550:	000095d0 	.word	0x000095d0
    9554:	e3570000 	cmp	r7, #0
    9558:	01a01004 	moveq	r1, r4
    955c:	1a00000b 	bne	9590 <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
    9560:	e1a00006 	mov	r0, r6
    9564:	e2411004 	sub	r1, r1, #4
    9568:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    956c:	eaffff91 	b	93b8 <CGPIOPin::SetAlternateFunction(unsigned int)>
    9570:	e30211a0 	movw	r1, #8608	; 0x21a0
    9574:	e3401001 	movt	r1, #1
    9578:	e30203b8 	movw	r0, #9144	; 0x23b8
    957c:	e3400001 	movt	r0, #1
    9580:	e3a0203d 	mov	r2, #61	; 0x3d
    9584:	eb000bde 	bl	c504 <assertion_failed>
    9588:	eaffffc0 	b	9490 <CGPIOPin::SetMode(TGPIOMode, int)+0x18>
    958c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9590:	e1a00006 	mov	r0, r6
    9594:	e3a01000 	mov	r1, #0
    9598:	ebffff64 	bl	9330 <CGPIOPin::SetPullUpMode(unsigned int)>
    959c:	e5d61010 	ldrb	r1, [r6, #16]
    95a0:	e1a00006 	mov	r0, r6
    95a4:	e2411004 	sub	r1, r1, #4
    95a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    95ac:	eaffff81 	b	93b8 <CGPIOPin::SetAlternateFunction(unsigned int)>
    95b0:	e30211a0 	movw	r1, #8608	; 0x21a0
    95b4:	e3401001 	movt	r1, #1
    95b8:	e3020394 	movw	r0, #9108	; 0x2394
    95bc:	e3400001 	movt	r0, #1
    95c0:	e3a02056 	mov	r2, #86	; 0x56
    95c4:	eb000bce 	bl	c504 <assertion_failed>
    95c8:	e5963004 	ldr	r3, [r6, #4]
    95cc:	eaffffbc 	b	94c4 <CGPIOPin::SetMode(TGPIOMode, int)+0x4c>
    95d0:	e1a00006 	mov	r0, r6
    95d4:	e3a01001 	mov	r1, #1
    95d8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    95dc:	eaffff53 	b	9330 <CGPIOPin::SetPullUpMode(unsigned int)>
    95e0:	e1a00006 	mov	r0, r6
    95e4:	e3a01002 	mov	r1, #2
    95e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    95ec:	eaffff4f 	b	9330 <CGPIOPin::SetPullUpMode(unsigned int)>
    95f0:	e1a00006 	mov	r0, r6
    95f4:	e3a01000 	mov	r1, #0
    95f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    95fc:	eafffd99 	b	8c68 <CGPIOPin::Write(unsigned int)>
    9600:	e1a00006 	mov	r0, r6
    9604:	e3a01000 	mov	r1, #0
    9608:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    960c:	eaffff47 	b	9330 <CGPIOPin::SetPullUpMode(unsigned int)>
    9610:	e3a01000 	mov	r1, #0
    9614:	e1a00006 	mov	r0, r6
    9618:	ebffff44 	bl	9330 <CGPIOPin::SetPullUpMode(unsigned int)>
    961c:	eaffffa5 	b	94b8 <CGPIOPin::SetMode(TGPIOMode, int)+0x40>

00009620 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    9620:	e92d4070 	push	{r4, r5, r6, lr}
    9624:	e1a04000 	mov	r4, r0
    9628:	e3510035 	cmp	r1, #53	; 0x35
    962c:	e1a05001 	mov	r5, r1
    9630:	e3020198 	movw	r0, #8600	; 0x2198
    9634:	e3400001 	movt	r0, #1
    9638:	e1a06002 	mov	r6, r2
    963c:	e3a0100a 	mov	r1, #10
    9640:	e5843018 	str	r3, [r4, #24]
    9644:	e3a02000 	mov	r2, #0
    9648:	e3a03006 	mov	r3, #6
    964c:	e5840000 	str	r0, [r4]
    9650:	e5845004 	str	r5, [r4, #4]
    9654:	91a00005 	movls	r0, r5
    9658:	e5c41010 	strb	r1, [r4, #16]
    965c:	e584201c 	str	r2, [r4, #28]
    9660:	e5c43024 	strb	r3, [r4, #36]	; 0x24
    9664:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    9668:	8a00000c 	bhi	96a0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x80>
    966c:	e1a032a0 	lsr	r3, r0, #5
    9670:	e3a05001 	mov	r5, #1
    9674:	e200001f 	and	r0, r0, #31
    9678:	e1a02005 	mov	r2, r5
    967c:	e1a03103 	lsl	r3, r3, #2
    9680:	e1a01006 	mov	r1, r6
    9684:	e1a05015 	lsl	r5, r5, r0
    9688:	e5843008 	str	r3, [r4, #8]
    968c:	e1a00004 	mov	r0, r4
    9690:	e584500c 	str	r5, [r4, #12]
    9694:	ebffff77 	bl	9478 <CGPIOPin::SetMode(TGPIOMode, int)>
    9698:	e1a00004 	mov	r0, r4
    969c:	e8bd8070 	pop	{r4, r5, r6, pc}
    96a0:	eb001830 	bl	f768 <CMachineInfo::Get()>
    96a4:	e6ef1075 	uxtb	r1, r5
    96a8:	eb001803 	bl	f6bc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    96ac:	e3500035 	cmp	r0, #53	; 0x35
    96b0:	e5840004 	str	r0, [r4, #4]
    96b4:	9affffec 	bls	966c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x4c>
    96b8:	e30211a0 	movw	r1, #8608	; 0x21a0
    96bc:	e3401001 	movt	r1, #1
    96c0:	e3020394 	movw	r0, #9108	; 0x2394
    96c4:	e3400001 	movt	r0, #1
    96c8:	e3a0202b 	mov	r2, #43	; 0x2b
    96cc:	eb000b8c 	bl	c504 <assertion_failed>
    96d0:	e5940004 	ldr	r0, [r4, #4]
    96d4:	eaffffe4 	b	966c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x4c>

000096d8 <CGPIOPin::InterruptHandler()>:
    96d8:	e5d03010 	ldrb	r3, [r0, #16]
    96dc:	e92d4010 	push	{r4, lr}
    96e0:	e2432002 	sub	r2, r3, #2
    96e4:	e1a04000 	mov	r4, r0
    96e8:	e3530000 	cmp	r3, #0
    96ec:	13520001 	cmpne	r2, #1
    96f0:	9a000005 	bls	970c <CGPIOPin::InterruptHandler()+0x34>
    96f4:	e30211a0 	movw	r1, #8608	; 0x21a0
    96f8:	e3401001 	movt	r1, #1
    96fc:	e30201f0 	movw	r0, #8688	; 0x21f0
    9700:	e3400001 	movt	r0, #1
    9704:	e3002145 	movw	r2, #325	; 0x145
    9708:	eb000b7d 	bl	c504 <assertion_failed>
    970c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9710:	e3530005 	cmp	r3, #5
    9714:	9a000002 	bls	9724 <CGPIOPin::InterruptHandler()+0x4c>
    9718:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    971c:	e3530005 	cmp	r3, #5
    9720:	8a000005 	bhi	973c <CGPIOPin::InterruptHandler()+0x64>
    9724:	e594301c 	ldr	r3, [r4, #28]
    9728:	e3530000 	cmp	r3, #0
    972c:	0a00000b 	beq	9760 <CGPIOPin::InterruptHandler()+0x88>
    9730:	e5940020 	ldr	r0, [r4, #32]
    9734:	e8bd4010 	pop	{r4, lr}
    9738:	e12fff13 	bx	r3
    973c:	e30211a0 	movw	r1, #8608	; 0x21a0
    9740:	e3401001 	movt	r1, #1
    9744:	e30203d0 	movw	r0, #9168	; 0x23d0
    9748:	e3400001 	movt	r0, #1
    974c:	e3002147 	movw	r2, #327	; 0x147
    9750:	eb000b6b 	bl	c504 <assertion_failed>
    9754:	e594301c 	ldr	r3, [r4, #28]
    9758:	e3530000 	cmp	r3, #0
    975c:	1afffff3 	bne	9730 <CGPIOPin::InterruptHandler()+0x58>
    9760:	e30211a0 	movw	r1, #8608	; 0x21a0
    9764:	e3401001 	movt	r1, #1
    9768:	e30202d4 	movw	r0, #8916	; 0x22d4
    976c:	e3400001 	movt	r0, #1
    9770:	e3002149 	movw	r2, #329	; 0x149
    9774:	eb000b62 	bl	c504 <assertion_failed>
    9778:	e594301c 	ldr	r3, [r4, #28]
    977c:	e5940020 	ldr	r0, [r4, #32]
    9780:	e8bd4010 	pop	{r4, lr}
    9784:	e12fff13 	bx	r3

00009788 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9788:	e3500035 	cmp	r0, #53	; 0x35
    978c:	e92d4070 	push	{r4, r5, r6, lr}
    9790:	e1a05000 	mov	r5, r0
    9794:	8a000018 	bhi	97fc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
    9798:	e1a032a5 	lsr	r3, r5, #5
    979c:	e3a04013 	mov	r4, #19
    97a0:	e3404fc8 	movt	r4, #4040	; 0xfc8
    97a4:	e0834004 	add	r4, r3, r4
    97a8:	e205501f 	and	r5, r5, #31
    97ac:	e3a03001 	mov	r3, #1
    97b0:	e3040494 	movw	r0, #17556	; 0x4494
    97b4:	e3400001 	movt	r0, #1
    97b8:	e1a05513 	lsl	r5, r3, r5
    97bc:	e1a04104 	lsl	r4, r4, #2
    97c0:	eb00192e 	bl	fc80 <CSpinLock::Acquire()>
    97c4:	e3a0208b 	mov	r2, #139	; 0x8b
    97c8:	e3432f20 	movt	r2, #16160	; 0x3f20
    97cc:	e1540002 	cmp	r4, r2
    97d0:	91e01005 	mvnls	r1, r5
    97d4:	8a000004 	bhi	97ec <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
    97d8:	e5943000 	ldr	r3, [r4]
    97dc:	e0033001 	and	r3, r3, r1
    97e0:	e484300c 	str	r3, [r4], #12
    97e4:	e1540002 	cmp	r4, r2
    97e8:	9afffffa 	bls	97d8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    97ec:	e3040494 	movw	r0, #17556	; 0x4494
    97f0:	e3400001 	movt	r0, #1
    97f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    97f8:	ea00193c 	b	fcf0 <CSpinLock::Release()>
    97fc:	e30211a0 	movw	r1, #8608	; 0x21a0
    9800:	e3401001 	movt	r1, #1
    9804:	e302041c 	movw	r0, #9244	; 0x241c
    9808:	e3400001 	movt	r0, #1
    980c:	e300214f 	movw	r2, #335	; 0x14f
    9810:	eb000b3b 	bl	c504 <assertion_failed>
    9814:	eaffffdf 	b	9798 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

00009818 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    9818:	e92d4010 	push	{r4, lr}
    981c:	e3044494 	movw	r4, #17556	; 0x4494
    9820:	e3404001 	movt	r4, #1
    9824:	e1a00004 	mov	r0, r4
    9828:	e3a01001 	mov	r1, #1
    982c:	eb0018f7 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
    9830:	e1a00004 	mov	r0, r4
    9834:	e30424bc 	movw	r2, #17596	; 0x44bc
    9838:	e3402001 	movt	r2, #1
    983c:	e30f1c4c 	movw	r1, #64588	; 0xfc4c
    9840:	e3401000 	movt	r1, #0
    9844:	e8bd4010 	pop	{r4, lr}
    9848:	ea0000b1 	b	9b14 <__aeabi_atexit>

0000984c <CMemorySystem::~CMemorySystem()>:
    984c:	e5903000 	ldr	r3, [r0]
    9850:	e92d4070 	push	{r4, r5, r6, lr}
    9854:	e3530000 	cmp	r3, #0
    9858:	e1a04000 	mov	r4, r0
    985c:	0a000005 	beq	9878 <CMemorySystem::~CMemorySystem()+0x2c>
    9860:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9864:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    9868:	e3c33005 	bic	r3, r3, #5
    986c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9870:	e3a03000 	mov	r3, #0
    9874:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9878:	e594500c 	ldr	r5, [r4, #12]
    987c:	e3550000 	cmp	r5, #0
    9880:	0a000004 	beq	9898 <CMemorySystem::~CMemorySystem()+0x4c>
    9884:	e1a00005 	mov	r0, r5
    9888:	eb000695 	bl	b2e4 <CPageTable::~CPageTable()>
    988c:	e1a00005 	mov	r0, r5
    9890:	e3a01008 	mov	r1, #8
    9894:	eb00009c 	bl	9b0c <operator delete(void*, unsigned int)>
    9898:	e5945008 	ldr	r5, [r4, #8]
    989c:	e3a03000 	mov	r3, #0
    98a0:	e584300c 	str	r3, [r4, #12]
    98a4:	e1550003 	cmp	r5, r3
    98a8:	0a000004 	beq	98c0 <CMemorySystem::~CMemorySystem()+0x74>
    98ac:	e1a00005 	mov	r0, r5
    98b0:	eb00068b 	bl	b2e4 <CPageTable::~CPageTable()>
    98b4:	e1a00005 	mov	r0, r5
    98b8:	e3a01008 	mov	r1, #8
    98bc:	eb000092 	bl	9b0c <operator delete(void*, unsigned int)>
    98c0:	e1a00004 	mov	r0, r4
    98c4:	e8bd8070 	pop	{r4, r5, r6, pc}

000098c8 <CMemorySystem::GetMemSize() const>:
    98c8:	e5900004 	ldr	r0, [r0, #4]
    98cc:	e12fff1e 	bx	lr

000098d0 <CMemorySystem::EnableMMU()>:
    98d0:	e5903000 	ldr	r3, [r0]
    98d4:	e92d4010 	push	{r4, lr}
    98d8:	e3530000 	cmp	r3, #0
    98dc:	e1a04000 	mov	r4, r0
    98e0:	0a00001f 	beq	9964 <CMemorySystem::EnableMMU()+0x94>
    98e4:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    98e8:	e3833040 	orr	r3, r3, #64	; 0x40
    98ec:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    98f0:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    98f4:	e3130001 	tst	r3, #1
    98f8:	1a000020 	bne	9980 <CMemorySystem::EnableMMU()+0xb0>
    98fc:	e3a03002 	mov	r3, #2
    9900:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    9904:	e5940008 	ldr	r0, [r4, #8]
    9908:	e3500000 	cmp	r0, #0
    990c:	0a00002a 	beq	99bc <CMemorySystem::EnableMMU()+0xec>
    9910:	eb00067c 	bl	b308 <CPageTable::GetBaseAddress() const>
    9914:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    9918:	e594000c 	ldr	r0, [r4, #12]
    991c:	e3500000 	cmp	r0, #0
    9920:	0a00001d 	beq	999c <CMemorySystem::EnableMMU()+0xcc>
    9924:	eb000677 	bl	b308 <CPageTable::GetBaseAddress() const>
    9928:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    992c:	e3a03005 	mov	r3, #5
    9930:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    9934:	eb00190f 	bl	fd78 <InvalidateDataCacheL1Only>
    9938:	e3a03000 	mov	r3, #0
    993c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9940:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9944:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9948:	f57ff04f 	dsb	sy
    994c:	f57ff06f 	isb	sy
    9950:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9954:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    9958:	e3833005 	orr	r3, r3, #5
    995c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9960:	e8bd8010 	pop	{r4, pc}
    9964:	e3021430 	movw	r1, #9264	; 0x2430
    9968:	e3401001 	movt	r1, #1
    996c:	e302043c 	movw	r0, #9276	; 0x243c
    9970:	e3400001 	movt	r0, #1
    9974:	e3a020c0 	mov	r2, #192	; 0xc0
    9978:	eb000ae1 	bl	c504 <assertion_failed>
    997c:	eaffffd8 	b	98e4 <CMemorySystem::EnableMMU()+0x14>
    9980:	e3021430 	movw	r1, #9264	; 0x2430
    9984:	e3401001 	movt	r1, #1
    9988:	e302044c 	movw	r0, #9292	; 0x244c
    998c:	e3400001 	movt	r0, #1
    9990:	e3a020cd 	mov	r2, #205	; 0xcd
    9994:	eb000ada 	bl	c504 <assertion_failed>
    9998:	eaffffd7 	b	98fc <CMemorySystem::EnableMMU()+0x2c>
    999c:	e3021430 	movw	r1, #9264	; 0x2430
    99a0:	e3401001 	movt	r1, #1
    99a4:	e3020494 	movw	r0, #9364	; 0x2494
    99a8:	e3400001 	movt	r0, #1
    99ac:	e3a020d7 	mov	r2, #215	; 0xd7
    99b0:	eb000ad3 	bl	c504 <assertion_failed>
    99b4:	e594000c 	ldr	r0, [r4, #12]
    99b8:	eaffffd9 	b	9924 <CMemorySystem::EnableMMU()+0x54>
    99bc:	e3021430 	movw	r1, #9264	; 0x2430
    99c0:	e3401001 	movt	r1, #1
    99c4:	e3020478 	movw	r0, #9336	; 0x2478
    99c8:	e3400001 	movt	r0, #1
    99cc:	e3a020d3 	mov	r2, #211	; 0xd3
    99d0:	eb000acb 	bl	c504 <assertion_failed>
    99d4:	e5940008 	ldr	r0, [r4, #8]
    99d8:	eaffffcc 	b	9910 <CMemorySystem::EnableMMU()+0x40>

000099dc <CMemorySystem::CMemorySystem(int)>:
    99dc:	e92d4030 	push	{r4, r5, lr}
    99e0:	e1a04000 	mov	r4, r0
    99e4:	e3a05000 	mov	r5, #0
    99e8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    99ec:	e28d001c 	add	r0, sp, #28
    99f0:	e8840022 	stm	r4, {r1, r5}
    99f4:	e5845008 	str	r5, [r4, #8]
    99f8:	e584500c 	str	r5, [r4, #12]
    99fc:	ebfffc1e 	bl	8a7c <CBcmPropertyTags::CBcmPropertyTags()>
    9a00:	e58d5000 	str	r5, [sp]
    9a04:	e28d001c 	add	r0, sp, #28
    9a08:	e3a01005 	mov	r1, #5
    9a0c:	e3401001 	movt	r1, #1
    9a10:	e3a03014 	mov	r3, #20
    9a14:	e28d2008 	add	r2, sp, #8
    9a18:	ebfffc5f 	bl	8b9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9a1c:	e3500000 	cmp	r0, #0
    9a20:	1a00001a 	bne	9a90 <CMemorySystem::CMemorySystem(int)+0xb4>
    9a24:	e3a01303 	mov	r1, #201326592	; 0xc000000
    9a28:	e58d0014 	str	r0, [sp, #20]
    9a2c:	e58d1018 	str	r1, [sp, #24]
    9a30:	e5841004 	str	r1, [r4, #4]
    9a34:	eb001a8c 	bl	1046c <mem_init>
    9a38:	e5943000 	ldr	r3, [r4]
    9a3c:	e3530000 	cmp	r3, #0
    9a40:	0a00000d 	beq	9a7c <CMemorySystem::CMemorySystem(int)+0xa0>
    9a44:	e3a00008 	mov	r0, #8
    9a48:	eb00002b 	bl	9afc <operator new(unsigned int)>
    9a4c:	e5941004 	ldr	r1, [r4, #4]
    9a50:	e1a05000 	mov	r5, r0
    9a54:	eb0005d9 	bl	b1c0 <CPageTable::CPageTable(unsigned int)>
    9a58:	e5845008 	str	r5, [r4, #8]
    9a5c:	e3a00008 	mov	r0, #8
    9a60:	eb000025 	bl	9afc <operator new(unsigned int)>
    9a64:	e1a05000 	mov	r5, r0
    9a68:	eb0005a7 	bl	b10c <CPageTable::CPageTable()>
    9a6c:	e1a00004 	mov	r0, r4
    9a70:	e584500c 	str	r5, [r4, #12]
    9a74:	ebffff95 	bl	98d0 <CMemorySystem::EnableMMU()>
    9a78:	eb0018af 	bl	fd3c <CSpinLock::Enable()>
    9a7c:	e28d001c 	add	r0, sp, #28
    9a80:	ebfffc03 	bl	8a94 <CBcmPropertyTags::~CBcmPropertyTags()>
    9a84:	e1a00004 	mov	r0, r4
    9a88:	e28dd03c 	add	sp, sp, #60	; 0x3c
    9a8c:	e8bd8030 	pop	{r4, r5, pc}
    9a90:	e59d0014 	ldr	r0, [sp, #20]
    9a94:	e3500000 	cmp	r0, #0
    9a98:	059d1018 	ldreq	r1, [sp, #24]
    9a9c:	0affffe3 	beq	9a30 <CMemorySystem::CMemorySystem(int)+0x54>
    9aa0:	e3021430 	movw	r1, #9264	; 0x2430
    9aa4:	e3401001 	movt	r1, #1
    9aa8:	e30204a8 	movw	r0, #9384	; 0x24a8
    9aac:	e3400001 	movt	r0, #1
    9ab0:	e3a02042 	mov	r2, #66	; 0x42
    9ab4:	eb000a92 	bl	c504 <assertion_failed>
    9ab8:	e59d1018 	ldr	r1, [sp, #24]
    9abc:	e59d0014 	ldr	r0, [sp, #20]
    9ac0:	eaffffda 	b	9a30 <CMemorySystem::CMemorySystem(int)+0x54>

00009ac4 <CMemorySystem::InitializeSecondary()>:
    9ac4:	e5903000 	ldr	r3, [r0]
    9ac8:	e92d4010 	push	{r4, lr}
    9acc:	e3530000 	cmp	r3, #0
    9ad0:	e1a04000 	mov	r4, r0
    9ad4:	1a000005 	bne	9af0 <CMemorySystem::InitializeSecondary()+0x2c>
    9ad8:	e3021430 	movw	r1, #9264	; 0x2430
    9adc:	e3401001 	movt	r1, #1
    9ae0:	e302043c 	movw	r0, #9276	; 0x243c
    9ae4:	e3400001 	movt	r0, #1
    9ae8:	e3a02073 	mov	r2, #115	; 0x73
    9aec:	eb000a84 	bl	c504 <assertion_failed>
    9af0:	e1a00004 	mov	r0, r4
    9af4:	e8bd4010 	pop	{r4, lr}
    9af8:	eaffff74 	b	98d0 <CMemorySystem::EnableMMU()>

00009afc <operator new(unsigned int)>:
    9afc:	ea001a71 	b	104c8 <malloc>

00009b00 <operator new[](unsigned int)>:
    9b00:	ea001a70 	b	104c8 <malloc>

00009b04 <operator delete(void*)>:
    9b04:	ea001aca 	b	10634 <free>

00009b08 <operator delete[](void*)>:
    9b08:	ea001ac9 	b	10634 <free>

00009b0c <operator delete(void*, unsigned int)>:
    9b0c:	ea001ac8 	b	10634 <free>

00009b10 <operator delete[](void*, unsigned int)>:
    9b10:	ea001ac7 	b	10634 <free>

00009b14 <__aeabi_atexit>:
    9b14:	e12fff1e 	bx	lr

00009b18 <halt>:
    9b18:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
    9b1c:	e2131003 	ands	r1, r3, #3
    9b20:	e30434ac 	movw	r3, #17580	; 0x44ac
    9b24:	e3403001 	movt	r3, #1
    9b28:	0a000005 	beq	9b44 <halt+0x2c>
    9b2c:	e3a02001 	mov	r2, #1
    9b30:	e7832101 	str	r2, [r3, r1, lsl #2]
    9b34:	f57ff05f 	dmb	sy
    9b38:	f57ff04f 	dsb	sy
    9b3c:	e320f003 	wfi
    9b40:	eafffffc 	b	9b38 <halt+0x20>
    9b44:	e3a02001 	mov	r2, #1
    9b48:	f57ff05f 	dmb	sy
    9b4c:	e7930102 	ldr	r0, [r3, r2, lsl #2]
    9b50:	e2822001 	add	r2, r2, #1
    9b54:	e3500000 	cmp	r0, #0
    9b58:	1a000003 	bne	9b6c <halt+0x54>
    9b5c:	f57ff04f 	dsb	sy
    9b60:	e320f003 	wfi
    9b64:	e3a02001 	mov	r2, #1
    9b68:	eafffff6 	b	9b48 <halt+0x30>
    9b6c:	e3520004 	cmp	r2, #4
    9b70:	1afffff4 	bne	9b48 <halt+0x30>
    9b74:	eaffffec 	b	9b2c <halt+0x14>

00009b78 <reboot>:
    9b78:	e3a03000 	mov	r3, #0
    9b7c:	e3433f10 	movt	r3, #16144	; 0x3f10
    9b80:	e3a01001 	mov	r1, #1
    9b84:	e3451a00 	movt	r1, #23040	; 0x5a00
    9b88:	e3a02020 	mov	r2, #32
    9b8c:	e3452a00 	movt	r2, #23040	; 0x5a00
    9b90:	e5831024 	str	r1, [r3, #36]	; 0x24
    9b94:	e583201c 	str	r2, [r3, #28]
    9b98:	eafffffe 	b	9b98 <reboot+0x20>

00009b9c <sysinit>:
    9b9c:	e92d4030 	push	{r4, r5, lr}
    9ba0:	e24dd01c 	sub	sp, sp, #28
    9ba4:	f1080040 	cpsie	f
    9ba8:	eb001872 	bl	fd78 <InvalidateDataCacheL1Only>
    9bac:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    9bb0:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    9bb4:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    9bb8:	f57ff06f 	isb	sy
    9bbc:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    9bc0:	eee83a10 	vmsr	fpexc, r3
    9bc4:	e3a01000 	mov	r1, #0
    9bc8:	eee11a10 	vmsr	fpscr, r1
    9bcc:	e3043490 	movw	r3, #17552	; 0x4490
    9bd0:	e3403001 	movt	r3, #1
    9bd4:	e3042728 	movw	r2, #18216	; 0x4728
    9bd8:	e3402001 	movt	r2, #1
    9bdc:	e1530002 	cmp	r3, r2
    9be0:	2a000002 	bcs	9bf0 <sysinit+0x54>
    9be4:	e4c31001 	strb	r1, [r3], #1
    9be8:	e1530002 	cmp	r3, r2
    9bec:	1afffffc 	bne	9be4 <sysinit+0x48>
    9bf0:	e1a0000d 	mov	r0, sp
    9bf4:	e30453a0 	movw	r5, #17312	; 0x43a0
    9bf8:	e3405001 	movt	r5, #1
    9bfc:	e3044390 	movw	r4, #17296	; 0x4390
    9c00:	e3404001 	movt	r4, #1
    9c04:	eb0015e6 	bl	f3a4 <CMachineInfo::CMachineInfo()>
    9c08:	e1540005 	cmp	r4, r5
    9c0c:	2a000003 	bcs	9c20 <sysinit+0x84>
    9c10:	e4943004 	ldr	r3, [r4], #4
    9c14:	e12fff33 	blx	r3
    9c18:	e1540005 	cmp	r4, r5
    9c1c:	3afffffb 	bcc	9c10 <sysinit+0x74>
    9c20:	ebfff930 	bl	80e8 <main>
    9c24:	e3500001 	cmp	r0, #1
    9c28:	0a000000 	beq	9c30 <sysinit+0x94>
    9c2c:	ebffffb9 	bl	9b18 <halt>
    9c30:	ebffffd0 	bl	9b78 <reboot>

00009c34 <sysinit_secondary>:
    9c34:	e92d4010 	push	{r4, lr}
    9c38:	f1080040 	cpsie	f
    9c3c:	eb00184d 	bl	fd78 <InvalidateDataCacheL1Only>
    9c40:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    9c44:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    9c48:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    9c4c:	f57ff06f 	isb	sy
    9c50:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    9c54:	eee83a10 	vmsr	fpexc, r3
    9c58:	e3a03000 	mov	r3, #0
    9c5c:	eee13a10 	vmsr	fpscr, r3
    9c60:	eb0017e9 	bl	fc0c <main_secondary>
    9c64:	ebffffab 	bl	9b18 <halt>

00009c68 <CTimer::CTimer(CInterruptSystem*)>:
    9c68:	e92d4070 	push	{r4, r5, r6, lr}
    9c6c:	e1a04000 	mov	r4, r0
    9c70:	e3a06000 	mov	r6, #0
    9c74:	e2800010 	add	r0, r0, #16
    9c78:	e30454c0 	movw	r5, #17600	; 0x44c0
    9c7c:	e3405001 	movt	r5, #1
    9c80:	e5846004 	str	r6, [r4, #4]
    9c84:	e5841000 	str	r1, [r4]
    9c88:	e3a01001 	mov	r1, #1
    9c8c:	e5846008 	str	r6, [r4, #8]
    9c90:	e584600c 	str	r6, [r4, #12]
    9c94:	eb0017dd 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
    9c98:	e5846028 	str	r6, [r4, #40]	; 0x28
    9c9c:	e284002c 	add	r0, r4, #44	; 0x2c
    9ca0:	eb0018b1 	bl	ff6c <CPtrList::CPtrList()>
    9ca4:	e2840030 	add	r0, r4, #48	; 0x30
    9ca8:	e3a01001 	mov	r1, #1
    9cac:	eb0017d7 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
    9cb0:	e5952000 	ldr	r2, [r5]
    9cb4:	e3053730 	movw	r3, #22320	; 0x5730
    9cb8:	e3403005 	movt	r3, #5
    9cbc:	e1520006 	cmp	r2, r6
    9cc0:	e5843048 	str	r3, [r4, #72]	; 0x48
    9cc4:	e300315e 	movw	r3, #350	; 0x15e
    9cc8:	e584304c 	str	r3, [r4, #76]	; 0x4c
    9ccc:	0a000005 	beq	9ce8 <CTimer::CTimer(CInterruptSystem*)+0x80>
    9cd0:	e30214fc 	movw	r1, #9468	; 0x24fc
    9cd4:	e3401001 	movt	r1, #1
    9cd8:	e3020508 	movw	r0, #9480	; 0x2508
    9cdc:	e3400001 	movt	r0, #1
    9ce0:	e3a0203b 	mov	r2, #59	; 0x3b
    9ce4:	eb000a06 	bl	c504 <assertion_failed>
    9ce8:	e5854000 	str	r4, [r5]
    9cec:	e1a00004 	mov	r0, r4
    9cf0:	e8bd8070 	pop	{r4, r5, r6, pc}

00009cf4 <CTimer::~CTimer()>:
    9cf4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9cf8:	e1a08000 	mov	r8, r0
    9cfc:	e5900000 	ldr	r0, [r0]
    9d00:	e3500000 	cmp	r0, #0
    9d04:	0a00002f 	beq	9dc8 <CTimer::~CTimer()+0xd4>
    9d08:	e3a01003 	mov	r1, #3
    9d0c:	e3047d43 	movw	r7, #19779	; 0x4d43
    9d10:	e3447b54 	movt	r7, #19284	; 0x4b54
    9d14:	e288402c 	add	r4, r8, #44	; 0x2c
    9d18:	eb0013b7 	bl	ebfc <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9d1c:	ea000011 	b	9d68 <CTimer::~CTimer()+0x74>
    9d20:	eb0018ba 	bl	10010 <CPtrList::GetPtr(TPtrListElement*)>
    9d24:	e2506000 	subs	r6, r0, #0
    9d28:	0a00001f 	beq	9dac <CTimer::~CTimer()+0xb8>
    9d2c:	e5963000 	ldr	r3, [r6]
    9d30:	e30214fc 	movw	r1, #9468	; 0x24fc
    9d34:	e3401001 	movt	r1, #1
    9d38:	e1530007 	cmp	r3, r7
    9d3c:	e302053c 	movw	r0, #9532	; 0x253c
    9d40:	e3400001 	movt	r0, #1
    9d44:	e3a02049 	mov	r2, #73	; 0x49
    9d48:	0a000000 	beq	9d50 <CTimer::~CTimer()+0x5c>
    9d4c:	eb0009ec 	bl	c504 <assertion_failed>
    9d50:	e1a01005 	mov	r1, r5
    9d54:	e1a00004 	mov	r0, r4
    9d58:	eb00194c 	bl	10290 <CPtrList::Remove(TPtrListElement*)>
    9d5c:	e1a00006 	mov	r0, r6
    9d60:	e3a01014 	mov	r1, #20
    9d64:	ebffff68 	bl	9b0c <operator delete(void*, unsigned int)>
    9d68:	e1a00004 	mov	r0, r4
    9d6c:	eb00188e 	bl	ffac <CPtrList::GetFirst()>
    9d70:	e2505000 	subs	r5, r0, #0
    9d74:	e1a01005 	mov	r1, r5
    9d78:	e1a00004 	mov	r0, r4
    9d7c:	1affffe7 	bne	9d20 <CTimer::~CTimer()+0x2c>
    9d80:	e30434c0 	movw	r3, #17600	; 0x44c0
    9d84:	e3403001 	movt	r3, #1
    9d88:	e2880030 	add	r0, r8, #48	; 0x30
    9d8c:	e5835000 	str	r5, [r3]
    9d90:	eb0017ad 	bl	fc4c <CSpinLock::~CSpinLock()>
    9d94:	e1a00004 	mov	r0, r4
    9d98:	eb001876 	bl	ff78 <CPtrList::~CPtrList()>
    9d9c:	e2880010 	add	r0, r8, #16
    9da0:	eb0017a9 	bl	fc4c <CSpinLock::~CSpinLock()>
    9da4:	e1a00008 	mov	r0, r8
    9da8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9dac:	e30214fc 	movw	r1, #9468	; 0x24fc
    9db0:	e3401001 	movt	r1, #1
    9db4:	e3020530 	movw	r0, #9520	; 0x2530
    9db8:	e3400001 	movt	r0, #1
    9dbc:	e3a02048 	mov	r2, #72	; 0x48
    9dc0:	eb0009cf 	bl	c504 <assertion_failed>
    9dc4:	eaffffd8 	b	9d2c <CTimer::~CTimer()+0x38>
    9dc8:	e30214fc 	movw	r1, #9468	; 0x24fc
    9dcc:	e3401001 	movt	r1, #1
    9dd0:	e3020518 	movw	r0, #9496	; 0x2518
    9dd4:	e3400001 	movt	r0, #1
    9dd8:	e3a02041 	mov	r2, #65	; 0x41
    9ddc:	eb0009c8 	bl	c504 <assertion_failed>
    9de0:	e5980000 	ldr	r0, [r8]
    9de4:	eaffffc7 	b	9d08 <CTimer::~CTimer()+0x14>

00009de8 <CTimer::SetTimeZone(int)>:
    9de8:	e2813e59 	add	r3, r1, #1424	; 0x590
    9dec:	e3002b3e 	movw	r2, #2878	; 0xb3e
    9df0:	e283300f 	add	r3, r3, #15
    9df4:	e1530002 	cmp	r3, r2
    9df8:	95801028 	strls	r1, [r0, #40]	; 0x28
    9dfc:	93a00001 	movls	r0, #1
    9e00:	83a00000 	movhi	r0, #0
    9e04:	e12fff1e 	bx	lr

00009e08 <CTimer::GetTimeZone() const>:
    9e08:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    9e0c:	e12fff1e 	bx	lr

00009e10 <CTimer::SetTime(unsigned int, int)>:
    9e10:	e3520000 	cmp	r2, #0
    9e14:	e92d4070 	push	{r4, r5, r6, lr}
    9e18:	e1a04000 	mov	r4, r0
    9e1c:	e1a05001 	mov	r5, r1
    9e20:	1a000004 	bne	9e38 <CTimer::SetTime(unsigned int, int)+0x28>
    9e24:	e5901028 	ldr	r1, [r0, #40]	; 0x28
    9e28:	e1a03301 	lsl	r3, r1, #6
    9e2c:	e0533101 	subs	r3, r3, r1, lsl #2
    9e30:	4a000008 	bmi	9e58 <CTimer::SetTime(unsigned int, int)+0x48>
    9e34:	e0855003 	add	r5, r5, r3
    9e38:	e2846010 	add	r6, r4, #16
    9e3c:	e1a00006 	mov	r0, r6
    9e40:	eb00178e 	bl	fc80 <CSpinLock::Acquire()>
    9e44:	e1a00006 	mov	r0, r6
    9e48:	e584500c 	str	r5, [r4, #12]
    9e4c:	eb0017a7 	bl	fcf0 <CSpinLock::Release()>
    9e50:	e3a00001 	mov	r0, #1
    9e54:	e8bd8070 	pop	{r4, r5, r6, pc}
    9e58:	e2631000 	rsb	r1, r3, #0
    9e5c:	e1510005 	cmp	r1, r5
    9e60:	dafffff3 	ble	9e34 <CTimer::SetTime(unsigned int, int)+0x24>
    9e64:	e1a00002 	mov	r0, r2
    9e68:	e8bd8070 	pop	{r4, r5, r6, pc}

00009e6c <CTimer::GetClockTicks()>:
    9e6c:	e3a03a03 	mov	r3, #12288	; 0x3000
    9e70:	e3433f00 	movt	r3, #16128	; 0x3f00
    9e74:	e5930004 	ldr	r0, [r3, #4]
    9e78:	e12fff1e 	bx	lr

00009e7c <CTimer::GetTicks() const>:
    9e7c:	e5900004 	ldr	r0, [r0, #4]
    9e80:	e12fff1e 	bx	lr

00009e84 <CTimer::GetUptime() const>:
    9e84:	e5900008 	ldr	r0, [r0, #8]
    9e88:	e12fff1e 	bx	lr

00009e8c <CTimer::GetTime() const>:
    9e8c:	e590000c 	ldr	r0, [r0, #12]
    9e90:	e12fff1e 	bx	lr

00009e94 <CTimer::GetUniversalTime() const>:
    9e94:	e5901028 	ldr	r1, [r0, #40]	; 0x28
    9e98:	e590300c 	ldr	r3, [r0, #12]
    9e9c:	e1a02301 	lsl	r2, r1, #6
    9ea0:	e0420101 	sub	r0, r2, r1, lsl #2
    9ea4:	e1500003 	cmp	r0, r3
    9ea8:	d0600003 	rsble	r0, r0, r3
    9eac:	c3a00000 	movgt	r0, #0
    9eb0:	e12fff1e 	bx	lr

00009eb4 <CTimer::GetTimeString()>:
    9eb4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9eb8:	e1a05000 	mov	r5, r0
    9ebc:	e2807010 	add	r7, r0, #16
    9ec0:	e24dd014 	sub	sp, sp, #20
    9ec4:	e1a00007 	mov	r0, r7
    9ec8:	eb00176c 	bl	fc80 <CSpinLock::Acquire()>
    9ecc:	e1a00007 	mov	r0, r7
    9ed0:	e595400c 	ldr	r4, [r5, #12]
    9ed4:	e5956004 	ldr	r6, [r5, #4]
    9ed8:	eb001784 	bl	fcf0 <CSpinLock::Release()>
    9edc:	e1940006 	orrs	r0, r4, r6
    9ee0:	0a00005d 	beq	a05c <CTimer::GetTimeString()+0x1a8>
    9ee4:	e3082889 	movw	r2, #34953	; 0x8889
    9ee8:	e3482888 	movt	r2, #34952	; 0x8888
    9eec:	e30ba3c5 	movw	sl, #46021	; 0xb3c5
    9ef0:	e349a1a2 	movt	sl, #37282	; 0x91a2
    9ef4:	e0810294 	umull	r0, r1, r4, r2
    9ef8:	e3040507 	movw	r0, #17671	; 0x4507
    9efc:	e34c022e 	movt	r0, #49710	; 0xc22e
    9f00:	e08baa94 	umull	sl, fp, r4, sl
    9f04:	e1a0c2a1 	lsr	ip, r1, #5
    9f08:	e3a0ae19 	mov	sl, #400	; 0x190
    9f0c:	e0810094 	umull	r0, r1, r4, r0
    9f10:	e083229c 	umull	r2, r3, ip, r2
    9f14:	e1a0230c 	lsl	r2, ip, #6
    9f18:	e1a075ab 	lsr	r7, fp, #11
    9f1c:	e042810c 	sub	r8, r2, ip, lsl #2
    9f20:	e308051f 	movw	r0, #34079	; 0x851f
    9f24:	e34501eb 	movt	r0, #20971	; 0x51eb
    9f28:	e1a092a3 	lsr	r9, r3, #5
    9f2c:	e0688004 	rsb	r8, r8, r4
    9f30:	e1a05821 	lsr	r5, r1, #16
    9f34:	e30047b2 	movw	r4, #1970	; 0x7b2
    9f38:	e1a03309 	lsl	r3, r9, #6
    9f3c:	e3a0b064 	mov	fp, #100	; 0x64
    9f40:	e0439109 	sub	r9, r3, r9, lsl #2
    9f44:	e300e16e 	movw	lr, #366	; 0x16e
    9f48:	e069900c 	rsb	r9, r9, ip
    9f4c:	e300c16d 	movw	ip, #365	; 0x16d
    9f50:	ea000001 	b	9f5c <CTimer::GetTimeString()+0xa8>
    9f54:	e0635005 	rsb	r5, r3, r5
    9f58:	e2844001 	add	r4, r4, #1
    9f5c:	e0832094 	umull	r2, r3, r4, r0
    9f60:	e1a012a3 	lsr	r1, r3, #5
    9f64:	e1a033a3 	lsr	r3, r3, #7
    9f68:	e061419b 	mls	r1, fp, r1, r4
    9f6c:	e063439a 	mls	r3, sl, r3, r4
    9f70:	e3510000 	cmp	r1, #0
    9f74:	e16f3f13 	clz	r3, r3
    9f78:	01a032a3 	lsreq	r3, r3, #5
    9f7c:	0a000002 	beq	9f8c <CTimer::GetTimeString()+0xd8>
    9f80:	e3140003 	tst	r4, #3
    9f84:	03a03001 	moveq	r3, #1
    9f88:	13a03000 	movne	r3, #0
    9f8c:	e3530000 	cmp	r3, #0
    9f90:	11a0300e 	movne	r3, lr
    9f94:	01a0300c 	moveq	r3, ip
    9f98:	e1550003 	cmp	r5, r3
    9f9c:	2affffec 	bcs	9f54 <CTimer::GetTimeString()+0xa0>
    9fa0:	e308251f 	movw	r2, #34079	; 0x851f
    9fa4:	e34521eb 	movt	r2, #20971	; 0x51eb
    9fa8:	e3a0ee19 	mov	lr, #400	; 0x190
    9fac:	e3140003 	tst	r4, #3
    9fb0:	e0832294 	umull	r2, r3, r4, r2
    9fb4:	e3a0a000 	mov	sl, #0
    9fb8:	03a0c001 	moveq	ip, #1
    9fbc:	13a0c000 	movne	ip, #0
    9fc0:	e151000a 	cmp	r1, sl
    9fc4:	e1a003a3 	lsr	r0, r3, #7
    9fc8:	e30224c4 	movw	r2, #9412	; 0x24c4
    9fcc:	e3402001 	movt	r2, #1
    9fd0:	e063409e 	mls	r3, lr, r0, r4
    9fd4:	11a0100c 	movne	r1, ip
    9fd8:	e16f3f13 	clz	r3, r3
    9fdc:	e1a032a3 	lsr	r3, r3, #5
    9fe0:	01a01003 	moveq	r1, r3
    9fe4:	ea000001 	b	9ff0 <CTimer::GetTimeString()+0x13c>
    9fe8:	e0635005 	rsb	r5, r3, r5
    9fec:	e28aa001 	add	sl, sl, #1
    9ff0:	e35a0001 	cmp	sl, #1
    9ff4:	0a000030 	beq	a0bc <CTimer::GetTimeString()+0x208>
    9ff8:	e792310a 	ldr	r3, [r2, sl, lsl #2]
    9ffc:	e1550003 	cmp	r5, r3
    a000:	2afffff8 	bcs	9fe8 <CTimer::GetTimeString()+0x134>
    a004:	e308251f 	movw	r2, #34079	; 0x851f
    a008:	e34521eb 	movt	r2, #20971	; 0x51eb
    a00c:	e3a01064 	mov	r1, #100	; 0x64
    a010:	e3a00010 	mov	r0, #16
    a014:	e0832296 	umull	r2, r3, r6, r2
    a018:	e1a0b2a3 	lsr	fp, r3, #5
    a01c:	e06b6b91 	mls	fp, r1, fp, r6
    a020:	ebfffeb5 	bl	9afc <operator new(unsigned int)>
    a024:	e1a06000 	mov	r6, r0
    a028:	eb000e03 	bl	d83c <CString::CString()>
    a02c:	e30037b7 	movw	r3, #1975	; 0x7b7
    a030:	e1540003 	cmp	r4, r3
    a034:	8a00000a 	bhi	a064 <CTimer::GetTimeString()+0x1b0>
    a038:	e1a00006 	mov	r0, r6
    a03c:	e58db004 	str	fp, [sp, #4]
    a040:	e1a03009 	mov	r3, r9
    a044:	e58d8000 	str	r8, [sp]
    a048:	e1a02007 	mov	r2, r7
    a04c:	e3021580 	movw	r1, #9600	; 0x2580
    a050:	e3401001 	movt	r1, #1
    a054:	eb001120 	bl	e4dc <CString::Format(char const*, ...)>
    a058:	e1a00006 	mov	r0, r6
    a05c:	e28dd014 	add	sp, sp, #20
    a060:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a064:	e30a0aab 	movw	r0, #43691	; 0xaaab
    a068:	e34a0aaa 	movt	r0, #43690	; 0xaaaa
    a06c:	e30423a0 	movw	r2, #17312	; 0x43a0
    a070:	e3402001 	movt	r2, #1
    a074:	e0810097 	umull	r0, r1, r7, r0
    a078:	e58db00c 	str	fp, [sp, #12]
    a07c:	e2853001 	add	r3, r5, #1
    a080:	e1a0c221 	lsr	ip, r1, #4
    a084:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    a088:	e3021564 	movw	r1, #9572	; 0x2564
    a08c:	e3401001 	movt	r1, #1
    a090:	e1a0028c 	lsl	r0, ip, #5
    a094:	e58d8008 	str	r8, [sp, #8]
    a098:	e040c18c 	sub	ip, r0, ip, lsl #3
    a09c:	e58d9004 	str	r9, [sp, #4]
    a0a0:	e1a00006 	mov	r0, r6
    a0a4:	e06c7007 	rsb	r7, ip, r7
    a0a8:	e58d7000 	str	r7, [sp]
    a0ac:	eb00110a 	bl	e4dc <CString::Format(char const*, ...)>
    a0b0:	e1a00006 	mov	r0, r6
    a0b4:	e28dd014 	add	sp, sp, #20
    a0b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0bc:	e3510000 	cmp	r1, #0
    a0c0:	e3a0301d 	mov	r3, #29
    a0c4:	0affffcb 	beq	9ff8 <CTimer::GetTimeString()+0x144>
    a0c8:	eaffffcb 	b	9ffc <CTimer::GetTimeString()+0x148>

0000a0cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    a0cc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0d0:	e1a05000 	mov	r5, r0
    a0d4:	e1a04002 	mov	r4, r2
    a0d8:	e3a00014 	mov	r0, #20
    a0dc:	e1a06001 	mov	r6, r1
    a0e0:	e1a0b003 	mov	fp, r3
    a0e4:	e59da028 	ldr	sl, [sp, #40]	; 0x28
    a0e8:	ebfffe83 	bl	9afc <operator new(unsigned int)>
    a0ec:	e5957004 	ldr	r7, [r5, #4]
    a0f0:	e3540000 	cmp	r4, #0
    a0f4:	e1a08000 	mov	r8, r0
    a0f8:	e0877006 	add	r7, r7, r6
    a0fc:	0a00003a 	beq	a1ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
    a100:	e2859030 	add	r9, r5, #48	; 0x30
    a104:	e285502c 	add	r5, r5, #44	; 0x2c
    a108:	e1a00009 	mov	r0, r9
    a10c:	e3046d43 	movw	r6, #19779	; 0x4d43
    a110:	e3446b54 	movt	r6, #19284	; 0x4b54
    a114:	e5886000 	str	r6, [r8]
    a118:	e9880090 	stmib	r8, {r4, r7}
    a11c:	e588b00c 	str	fp, [r8, #12]
    a120:	e588a010 	str	sl, [r8, #16]
    a124:	eb0016d5 	bl	fc80 <CSpinLock::Acquire()>
    a128:	e1a00005 	mov	r0, r5
    a12c:	eb00179e 	bl	ffac <CPtrList::GetFirst()>
    a130:	e2504000 	subs	r4, r0, #0
    a134:	1a000013 	bne	a188 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xbc>
    a138:	ea000026 	b	a1d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    a13c:	e59a3000 	ldr	r3, [sl]
    a140:	e30214fc 	movw	r1, #9468	; 0x24fc
    a144:	e3401001 	movt	r1, #1
    a148:	e1530006 	cmp	r3, r6
    a14c:	e30205a4 	movw	r0, #9636	; 0x25a4
    a150:	e3400001 	movt	r0, #1
    a154:	e3002116 	movw	r2, #278	; 0x116
    a158:	0a000000 	beq	a160 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    a15c:	eb0008e8 	bl	c504 <assertion_failed>
    a160:	e59a3008 	ldr	r3, [sl, #8]
    a164:	e1a01004 	mov	r1, r4
    a168:	e1a00005 	mov	r0, r5
    a16c:	e0673003 	rsb	r3, r7, r3
    a170:	e3530000 	cmp	r3, #0
    a174:	ca00000f 	bgt	a1b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
    a178:	eb00178d 	bl	ffb4 <CPtrList::GetNext(TPtrListElement*)>
    a17c:	e3500000 	cmp	r0, #0
    a180:	0a000014 	beq	a1d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    a184:	e1a04000 	mov	r4, r0
    a188:	e1a01004 	mov	r1, r4
    a18c:	e1a00005 	mov	r0, r5
    a190:	eb00179e 	bl	10010 <CPtrList::GetPtr(TPtrListElement*)>
    a194:	e250a000 	subs	sl, r0, #0
    a198:	1affffe7 	bne	a13c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x70>
    a19c:	e30214fc 	movw	r1, #9468	; 0x24fc
    a1a0:	e3401001 	movt	r1, #1
    a1a4:	e3020594 	movw	r0, #9620	; 0x2594
    a1a8:	e3400001 	movt	r0, #1
    a1ac:	e3002115 	movw	r2, #277	; 0x115
    a1b0:	eb0008d3 	bl	c504 <assertion_failed>
    a1b4:	eaffffe0 	b	a13c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x70>
    a1b8:	e1a01004 	mov	r1, r4
    a1bc:	e1a00005 	mov	r0, r5
    a1c0:	e1a02008 	mov	r2, r8
    a1c4:	eb0017a8 	bl	1006c <CPtrList::InsertBefore(TPtrListElement*, void*)>
    a1c8:	e1a00009 	mov	r0, r9
    a1cc:	eb0016c7 	bl	fcf0 <CSpinLock::Release()>
    a1d0:	e1a00008 	mov	r0, r8
    a1d4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1d8:	e1a01004 	mov	r1, r4
    a1dc:	e1a00005 	mov	r0, r5
    a1e0:	e1a02008 	mov	r2, r8
    a1e4:	eb0017e6 	bl	10184 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    a1e8:	eafffff6 	b	a1c8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    a1ec:	e30214fc 	movw	r1, #9468	; 0x24fc
    a1f0:	e3401001 	movt	r1, #1
    a1f4:	e3030870 	movw	r0, #14448	; 0x3870
    a1f8:	e3400001 	movt	r0, #1
    a1fc:	e3002105 	movw	r2, #261	; 0x105
    a200:	eb0008bf 	bl	c504 <assertion_failed>
    a204:	eaffffbd 	b	a100 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x34>

0000a208 <CTimer::CancelKernelTimer(unsigned int)>:
    a208:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a20c:	e2515000 	subs	r5, r1, #0
    a210:	e1a04000 	mov	r4, r0
    a214:	0a00001e 	beq	a294 <CTimer::CancelKernelTimer(unsigned int)+0x8c>
    a218:	e2846030 	add	r6, r4, #48	; 0x30
    a21c:	e284402c 	add	r4, r4, #44	; 0x2c
    a220:	e1a00006 	mov	r0, r6
    a224:	eb001695 	bl	fc80 <CSpinLock::Acquire()>
    a228:	e1a00004 	mov	r0, r4
    a22c:	e1a01005 	mov	r1, r5
    a230:	eb001872 	bl	10400 <CPtrList::Find(void*)>
    a234:	e2507000 	subs	r7, r0, #0
    a238:	0a000012 	beq	a288 <CTimer::CancelKernelTimer(unsigned int)+0x80>
    a23c:	e5952000 	ldr	r2, [r5]
    a240:	e3043d43 	movw	r3, #19779	; 0x4d43
    a244:	e3443b54 	movt	r3, #19284	; 0x4b54
    a248:	e1520003 	cmp	r2, r3
    a24c:	0a000005 	beq	a268 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    a250:	e30214fc 	movw	r1, #9468	; 0x24fc
    a254:	e3401001 	movt	r1, #1
    a258:	e302053c 	movw	r0, #9532	; 0x253c
    a25c:	e3400001 	movt	r0, #1
    a260:	e3002139 	movw	r2, #313	; 0x139
    a264:	eb0008a6 	bl	c504 <assertion_failed>
    a268:	e1a01007 	mov	r1, r7
    a26c:	e1a00004 	mov	r0, r4
    a270:	eb001806 	bl	10290 <CPtrList::Remove(TPtrListElement*)>
    a274:	e3a03000 	mov	r3, #0
    a278:	e1a00005 	mov	r0, r5
    a27c:	e5853000 	str	r3, [r5]
    a280:	e3a01014 	mov	r1, #20
    a284:	ebfffe20 	bl	9b0c <operator delete(void*, unsigned int)>
    a288:	e1a00006 	mov	r0, r6
    a28c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a290:	ea001696 	b	fcf0 <CSpinLock::Release()>
    a294:	e30214fc 	movw	r1, #9468	; 0x24fc
    a298:	e3401001 	movt	r1, #1
    a29c:	e3020530 	movw	r0, #9520	; 0x2530
    a2a0:	e3400001 	movt	r0, #1
    a2a4:	e3002132 	movw	r2, #306	; 0x132
    a2a8:	eb000895 	bl	c504 <assertion_failed>
    a2ac:	eaffffd9 	b	a218 <CTimer::CancelKernelTimer(unsigned int)+0x10>

0000a2b0 <CTimer::PollKernelTimers()>:
    a2b0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2b4:	e2807030 	add	r7, r0, #48	; 0x30
    a2b8:	e280602c 	add	r6, r0, #44	; 0x2c
    a2bc:	e1a08000 	mov	r8, r0
    a2c0:	e1a00007 	mov	r0, r7
    a2c4:	eb00166d 	bl	fc80 <CSpinLock::Acquire()>
    a2c8:	e1a00006 	mov	r0, r6
    a2cc:	eb001736 	bl	ffac <CPtrList::GetFirst()>
    a2d0:	e2505000 	subs	r5, r0, #0
    a2d4:	13049d43 	movwne	r9, #19779	; 0x4d43
    a2d8:	13449b54 	movtne	r9, #19284	; 0x4b54
    a2dc:	1a000028 	bne	a384 <CTimer::PollKernelTimers()+0xd4>
    a2e0:	ea000033 	b	a3b4 <CTimer::PollKernelTimers()+0x104>
    a2e4:	e5943000 	ldr	r3, [r4]
    a2e8:	e30214fc 	movw	r1, #9468	; 0x24fc
    a2ec:	e3401001 	movt	r1, #1
    a2f0:	e1530009 	cmp	r3, r9
    a2f4:	e302053c 	movw	r0, #9532	; 0x253c
    a2f8:	e3400001 	movt	r0, #1
    a2fc:	e300214f 	movw	r2, #335	; 0x14f
    a300:	0a000000 	beq	a308 <CTimer::PollKernelTimers()+0x58>
    a304:	eb00087e 	bl	c504 <assertion_failed>
    a308:	e5982004 	ldr	r2, [r8, #4]
    a30c:	e1a01005 	mov	r1, r5
    a310:	e5943008 	ldr	r3, [r4, #8]
    a314:	e1a00006 	mov	r0, r6
    a318:	e0623003 	rsb	r3, r2, r3
    a31c:	e3530000 	cmp	r3, #0
    a320:	ca000023 	bgt	a3b4 <CTimer::PollKernelTimers()+0x104>
    a324:	eb001722 	bl	ffb4 <CPtrList::GetNext(TPtrListElement*)>
    a328:	e1a01005 	mov	r1, r5
    a32c:	e1a0a000 	mov	sl, r0
    a330:	e1a00006 	mov	r0, r6
    a334:	eb0017d5 	bl	10290 <CPtrList::Remove(TPtrListElement*)>
    a338:	e1a00007 	mov	r0, r7
    a33c:	eb00166b 	bl	fcf0 <CSpinLock::Release()>
    a340:	e594b004 	ldr	fp, [r4, #4]
    a344:	e1a0500a 	mov	r5, sl
    a348:	e35b0000 	cmp	fp, #0
    a34c:	0a00001b 	beq	a3c0 <CTimer::PollKernelTimers()+0x110>
    a350:	e5942010 	ldr	r2, [r4, #16]
    a354:	e1a00004 	mov	r0, r4
    a358:	e594100c 	ldr	r1, [r4, #12]
    a35c:	e12fff3b 	blx	fp
    a360:	e3a03000 	mov	r3, #0
    a364:	e1a00004 	mov	r0, r4
    a368:	e5843000 	str	r3, [r4]
    a36c:	e3a01014 	mov	r1, #20
    a370:	ebfffde5 	bl	9b0c <operator delete(void*, unsigned int)>
    a374:	e1a00007 	mov	r0, r7
    a378:	eb001640 	bl	fc80 <CSpinLock::Acquire()>
    a37c:	e35a0000 	cmp	sl, #0
    a380:	0a00000b 	beq	a3b4 <CTimer::PollKernelTimers()+0x104>
    a384:	e1a01005 	mov	r1, r5
    a388:	e1a00006 	mov	r0, r6
    a38c:	eb00171f 	bl	10010 <CPtrList::GetPtr(TPtrListElement*)>
    a390:	e2504000 	subs	r4, r0, #0
    a394:	1affffd2 	bne	a2e4 <CTimer::PollKernelTimers()+0x34>
    a398:	e30214fc 	movw	r1, #9468	; 0x24fc
    a39c:	e3401001 	movt	r1, #1
    a3a0:	e3020530 	movw	r0, #9520	; 0x2530
    a3a4:	e3400001 	movt	r0, #1
    a3a8:	e300214e 	movw	r2, #334	; 0x14e
    a3ac:	eb000854 	bl	c504 <assertion_failed>
    a3b0:	eaffffcb 	b	a2e4 <CTimer::PollKernelTimers()+0x34>
    a3b4:	e1a00007 	mov	r0, r7
    a3b8:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3bc:	ea00164b 	b	fcf0 <CSpinLock::Release()>
    a3c0:	e30214fc 	movw	r1, #9468	; 0x24fc
    a3c4:	e3401001 	movt	r1, #1
    a3c8:	e3030870 	movw	r0, #14448	; 0x3870
    a3cc:	e3400001 	movt	r0, #1
    a3d0:	e300215d 	movw	r2, #349	; 0x15d
    a3d4:	eb00084a 	bl	c504 <assertion_failed>
    a3d8:	eaffffdc 	b	a350 <CTimer::PollKernelTimers()+0xa0>

0000a3dc <CTimer::InterruptHandler()>:
    a3dc:	e3a03a03 	mov	r3, #12288	; 0x3000
    a3e0:	e3433f00 	movt	r3, #16128	; 0x3f00
    a3e4:	e92d4070 	push	{r4, r5, r6, lr}
    a3e8:	e5933000 	ldr	r3, [r3]
    a3ec:	e1a04000 	mov	r4, r0
    a3f0:	e3130008 	tst	r3, #8
    a3f4:	0a000028 	beq	a49c <CTimer::InterruptHandler()+0xc0>
    a3f8:	e3a02a03 	mov	r2, #12288	; 0x3000
    a3fc:	e3432f00 	movt	r2, #16128	; 0x3f00
    a400:	e2845010 	add	r5, r4, #16
    a404:	e1a00005 	mov	r0, r5
    a408:	e5923018 	ldr	r3, [r2, #24]
    a40c:	e2833c27 	add	r3, r3, #9984	; 0x2700
    a410:	e2833010 	add	r3, r3, #16
    a414:	e5823018 	str	r3, [r2, #24]
    a418:	e5921004 	ldr	r1, [r2, #4]
    a41c:	e1530001 	cmp	r3, r1
    a420:	35923004 	ldrcc	r3, [r2, #4]
    a424:	32833c27 	addcc	r3, r3, #9984	; 0x2700
    a428:	32833010 	addcc	r3, r3, #16
    a42c:	35823018 	strcc	r3, [r2, #24]
    a430:	e3a03a03 	mov	r3, #12288	; 0x3000
    a434:	e3433f00 	movt	r3, #16128	; 0x3f00
    a438:	e3a02008 	mov	r2, #8
    a43c:	e5832000 	str	r2, [r3]
    a440:	eb00160e 	bl	fc80 <CSpinLock::Acquire()>
    a444:	e5943004 	ldr	r3, [r4, #4]
    a448:	e308051f 	movw	r0, #34079	; 0x851f
    a44c:	e34501eb 	movt	r0, #20971	; 0x51eb
    a450:	e2833001 	add	r3, r3, #1
    a454:	e3a0c064 	mov	ip, #100	; 0x64
    a458:	e5843004 	str	r3, [r4, #4]
    a45c:	e0810093 	umull	r0, r1, r3, r0
    a460:	e1a022a1 	lsr	r2, r1, #5
    a464:	e063329c 	mls	r3, ip, r2, r3
    a468:	e3530000 	cmp	r3, #0
    a46c:	1a000005 	bne	a488 <CTimer::InterruptHandler()+0xac>
    a470:	e5943008 	ldr	r3, [r4, #8]
    a474:	e2833001 	add	r3, r3, #1
    a478:	e5843008 	str	r3, [r4, #8]
    a47c:	e594300c 	ldr	r3, [r4, #12]
    a480:	e2833001 	add	r3, r3, #1
    a484:	e584300c 	str	r3, [r4, #12]
    a488:	e1a00005 	mov	r0, r5
    a48c:	eb001617 	bl	fcf0 <CSpinLock::Release()>
    a490:	e1a00004 	mov	r0, r4
    a494:	e8bd4070 	pop	{r4, r5, r6, lr}
    a498:	eaffff84 	b	a2b0 <CTimer::PollKernelTimers()>
    a49c:	e30214fc 	movw	r1, #9468	; 0x24fc
    a4a0:	e3401001 	movt	r1, #1
    a4a4:	e30205cc 	movw	r0, #9676	; 0x25cc
    a4a8:	e3400001 	movt	r0, #1
    a4ac:	e300216f 	movw	r2, #367	; 0x16f
    a4b0:	eb000813 	bl	c504 <assertion_failed>
    a4b4:	eaffffcf 	b	a3f8 <CTimer::InterruptHandler()+0x1c>

0000a4b8 <CTimer::InterruptHandler(void*)>:
    a4b8:	e92d4010 	push	{r4, lr}
    a4bc:	e2504000 	subs	r4, r0, #0
    a4c0:	0a000002 	beq	a4d0 <CTimer::InterruptHandler(void*)+0x18>
    a4c4:	e1a00004 	mov	r0, r4
    a4c8:	e8bd4010 	pop	{r4, lr}
    a4cc:	eaffffc2 	b	a3dc <CTimer::InterruptHandler()>
    a4d0:	e30214fc 	movw	r1, #9468	; 0x24fc
    a4d4:	e3401001 	movt	r1, #1
    a4d8:	e30205f0 	movw	r0, #9712	; 0x25f0
    a4dc:	e3400001 	movt	r0, #1
    a4e0:	e3002191 	movw	r2, #401	; 0x191
    a4e4:	eb000806 	bl	c504 <assertion_failed>
    a4e8:	e1a00004 	mov	r0, r4
    a4ec:	e8bd4010 	pop	{r4, lr}
    a4f0:	eaffffb9 	b	a3dc <CTimer::InterruptHandler()>

0000a4f4 <CTimer::TuneMsDelay()>:
    a4f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a4f8:	e1a04000 	mov	r4, r0
    a4fc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a500:	e24dd00c 	sub	sp, sp, #12
    a504:	e308651f 	movw	r6, #34079	; 0x851f
    a508:	e34561eb 	movt	r6, #20971	; 0x51eb
    a50c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    a510:	e5945004 	ldr	r5, [r4, #4]
    a514:	e0000390 	mul	r0, r0, r3
    a518:	eb000ffc 	bl	e510 <DelayLoop>
    a51c:	e5943004 	ldr	r3, [r4, #4]
    a520:	e3021710 	movw	r1, #10000	; 0x2710
    a524:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    a528:	e0653003 	rsb	r3, r5, r3
    a52c:	e3042dd3 	movw	r2, #19923	; 0x4dd3
    a530:	e3412062 	movt	r2, #4194	; 0x1062
    a534:	e735f311 	udiv	r5, r1, r3
    a538:	e0000590 	mul	r0, r0, r5
    a53c:	e0810690 	umull	r0, r1, r0, r6
    a540:	e0876695 	umull	r6, r7, r5, r6
    a544:	e1a032a1 	lsr	r3, r1, #5
    a548:	e5843048 	str	r3, [r4, #72]	; 0x48
    a54c:	e2833f7d 	add	r3, r3, #500	; 0x1f4
    a550:	e0832293 	umull	r2, r3, r3, r2
    a554:	e1a03323 	lsr	r3, r3, #6
    a558:	e584304c 	str	r3, [r4, #76]	; 0x4c
    a55c:	eb00095e 	bl	cadc <CLogger::Get()>
    a560:	e1a0c2a7 	lsr	ip, r7, #5
    a564:	e3a0e064 	mov	lr, #100	; 0x64
    a568:	e3a02003 	mov	r2, #3
    a56c:	e58dc000 	str	ip, [sp]
    a570:	e30235fc 	movw	r3, #9724	; 0x25fc
    a574:	e3403001 	movt	r3, #1
    a578:	e0655c9e 	mls	r5, lr, ip, r5
    a57c:	e58d5004 	str	r5, [sp, #4]
    a580:	e30214f4 	movw	r1, #9460	; 0x24f4
    a584:	e3401001 	movt	r1, #1
    a588:	eb000a21 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a58c:	e28dd00c 	add	sp, sp, #12
    a590:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000a594 <CTimer::Initialize()>:
    a594:	e92d4010 	push	{r4, lr}
    a598:	e1a04000 	mov	r4, r0
    a59c:	e5900000 	ldr	r0, [r0]
    a5a0:	e3500000 	cmp	r0, #0
    a5a4:	0a000011 	beq	a5f0 <CTimer::Initialize()+0x5c>
    a5a8:	e1a03004 	mov	r3, r4
    a5ac:	e3a01003 	mov	r1, #3
    a5b0:	e30a24b8 	movw	r2, #42168	; 0xa4b8
    a5b4:	e3402000 	movt	r2, #0
    a5b8:	eb001156 	bl	eb18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    a5bc:	e3a02a03 	mov	r2, #12288	; 0x3000
    a5c0:	e3432f00 	movt	r2, #16128	; 0x3f00
    a5c4:	e3a03df2 	mov	r3, #15488	; 0x3c80
    a5c8:	e34f3e36 	movt	r3, #65078	; 0xfe36
    a5cc:	e1a00004 	mov	r0, r4
    a5d0:	e5823004 	str	r3, [r2, #4]
    a5d4:	e5923004 	ldr	r3, [r2, #4]
    a5d8:	e2833c27 	add	r3, r3, #9984	; 0x2700
    a5dc:	e2833010 	add	r3, r3, #16
    a5e0:	e5823018 	str	r3, [r2, #24]
    a5e4:	ebffffc2 	bl	a4f4 <CTimer::TuneMsDelay()>
    a5e8:	e3a00001 	mov	r0, #1
    a5ec:	e8bd8010 	pop	{r4, pc}
    a5f0:	e30214fc 	movw	r1, #9468	; 0x24fc
    a5f4:	e3401001 	movt	r1, #1
    a5f8:	e3020518 	movw	r0, #9496	; 0x2518
    a5fc:	e3400001 	movt	r0, #1
    a600:	e3a02055 	mov	r2, #85	; 0x55
    a604:	eb0007be 	bl	c504 <assertion_failed>
    a608:	e5940000 	ldr	r0, [r4]
    a60c:	eaffffe5 	b	a5a8 <CTimer::Initialize()+0x14>

0000a610 <CTimer::SimpleMsDelay(unsigned int)>:
    a610:	e3500000 	cmp	r0, #0
    a614:	012fff1e 	bxeq	lr
    a618:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    a61c:	e0000093 	mul	r0, r3, r0
    a620:	e3500000 	cmp	r0, #0
    a624:	012fff1e 	bxeq	lr
    a628:	e3a03a03 	mov	r3, #12288	; 0x3000
    a62c:	e3433f00 	movt	r3, #16128	; 0x3f00
    a630:	e2800001 	add	r0, r0, #1
    a634:	e1a01003 	mov	r1, r3
    a638:	e5932004 	ldr	r2, [r3, #4]
    a63c:	e5913004 	ldr	r3, [r1, #4]
    a640:	e0623003 	rsb	r3, r2, r3
    a644:	e1500003 	cmp	r0, r3
    a648:	8afffffb 	bhi	a63c <CTimer::SimpleMsDelay(unsigned int)+0x2c>
    a64c:	e12fff1e 	bx	lr

0000a650 <CTimer::SimpleusDelay(unsigned int)>:
    a650:	e3500000 	cmp	r0, #0
    a654:	012fff1e 	bxeq	lr
    a658:	e3a03a03 	mov	r3, #12288	; 0x3000
    a65c:	e3433f00 	movt	r3, #16128	; 0x3f00
    a660:	e2800001 	add	r0, r0, #1
    a664:	e1a01003 	mov	r1, r3
    a668:	e5932004 	ldr	r2, [r3, #4]
    a66c:	e5913004 	ldr	r3, [r1, #4]
    a670:	e0623003 	rsb	r3, r2, r3
    a674:	e1500003 	cmp	r0, r3
    a678:	8afffffb 	bhi	a66c <CTimer::SimpleusDelay(unsigned int)+0x1c>
    a67c:	e12fff1e 	bx	lr

0000a680 <CTimer::IsLeapYear(unsigned int)>:
    a680:	e308251f 	movw	r2, #34079	; 0x851f
    a684:	e34521eb 	movt	r2, #20971	; 0x51eb
    a688:	e3a0c064 	mov	ip, #100	; 0x64
    a68c:	e0832290 	umull	r2, r3, r0, r2
    a690:	e1a012a3 	lsr	r1, r3, #5
    a694:	e061019c 	mls	r1, ip, r1, r0
    a698:	e3510000 	cmp	r1, #0
    a69c:	0a000003 	beq	a6b0 <CTimer::IsLeapYear(unsigned int)+0x30>
    a6a0:	e3100003 	tst	r0, #3
    a6a4:	03a00001 	moveq	r0, #1
    a6a8:	13a00000 	movne	r0, #0
    a6ac:	e12fff1e 	bx	lr
    a6b0:	e1a033a3 	lsr	r3, r3, #7
    a6b4:	e3a02e19 	mov	r2, #400	; 0x190
    a6b8:	e0600392 	mls	r0, r2, r3, r0
    a6bc:	e16f0f10 	clz	r0, r0
    a6c0:	e1a002a0 	lsr	r0, r0, #5
    a6c4:	e12fff1e 	bx	lr

0000a6c8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    a6c8:	e3500001 	cmp	r0, #1
    a6cc:	0a000003 	beq	a6e0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    a6d0:	e30234c4 	movw	r3, #9412	; 0x24c4
    a6d4:	e3403001 	movt	r3, #1
    a6d8:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    a6dc:	e12fff1e 	bx	lr
    a6e0:	e308251f 	movw	r2, #34079	; 0x851f
    a6e4:	e34521eb 	movt	r2, #20971	; 0x51eb
    a6e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a6ec:	e0832291 	umull	r2, r3, r1, r2
    a6f0:	e3a0e064 	mov	lr, #100	; 0x64
    a6f4:	e1a0c2a3 	lsr	ip, r3, #5
    a6f8:	e06c1c9e 	mls	ip, lr, ip, r1
    a6fc:	e35c0000 	cmp	ip, #0
    a700:	0a000008 	beq	a728 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    a704:	e3110003 	tst	r1, #3
    a708:	03a01001 	moveq	r1, #1
    a70c:	13a01000 	movne	r1, #0
    a710:	e3510000 	cmp	r1, #0
    a714:	030234c4 	movweq	r3, #9412	; 0x24c4
    a718:	13a0001d 	movne	r0, #29
    a71c:	03403001 	movteq	r3, #1
    a720:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    a724:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a728:	e1a033a3 	lsr	r3, r3, #7
    a72c:	e3a02e19 	mov	r2, #400	; 0x190
    a730:	e0611392 	mls	r1, r2, r3, r1
    a734:	e16f1f11 	clz	r1, r1
    a738:	e1a012a1 	lsr	r1, r1, #5
    a73c:	eafffff3 	b	a710 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000a740 <CTimer::Get()>:
    a740:	e92d4010 	push	{r4, lr}
    a744:	e30444c0 	movw	r4, #17600	; 0x44c0
    a748:	e3404001 	movt	r4, #1
    a74c:	e5940000 	ldr	r0, [r4]
    a750:	e3500000 	cmp	r0, #0
    a754:	18bd8010 	popne	{r4, pc}
    a758:	e30021d6 	movw	r2, #470	; 0x1d6
    a75c:	e30214fc 	movw	r1, #9468	; 0x24fc
    a760:	e3401001 	movt	r1, #1
    a764:	e3020614 	movw	r0, #9748	; 0x2614
    a768:	e3400001 	movt	r0, #1
    a76c:	eb000764 	bl	c504 <assertion_failed>
    a770:	e5940000 	ldr	r0, [r4]
    a774:	e8bd8010 	pop	{r4, pc}

0000a778 <memset>:
    a778:	e3520000 	cmp	r2, #0
    a77c:	012fff1e 	bxeq	lr
    a780:	e6af1071 	sxtb	r1, r1
    a784:	e0802002 	add	r2, r0, r2
    a788:	e1a03000 	mov	r3, r0
    a78c:	e4c31001 	strb	r1, [r3], #1
    a790:	e1530002 	cmp	r3, r2
    a794:	1afffffc 	bne	a78c <memset+0x14>
    a798:	e12fff1e 	bx	lr

0000a79c <memcmp>:
    a79c:	e3520000 	cmp	r2, #0
    a7a0:	0a00000e 	beq	a7e0 <memcmp+0x44>
    a7a4:	e5d0c000 	ldrb	ip, [r0]
    a7a8:	e5d13000 	ldrb	r3, [r1]
    a7ac:	e15c0003 	cmp	ip, r3
    a7b0:	8a00000c 	bhi	a7e8 <memcmp+0x4c>
    a7b4:	3a00000d 	bcc	a7f0 <memcmp+0x54>
    a7b8:	e0802002 	add	r2, r0, r2
    a7bc:	e2800001 	add	r0, r0, #1
    a7c0:	ea000004 	b	a7d8 <memcmp+0x3c>
    a7c4:	e4d0c001 	ldrb	ip, [r0], #1
    a7c8:	e5f13001 	ldrb	r3, [r1, #1]!
    a7cc:	e15c0003 	cmp	ip, r3
    a7d0:	8a000004 	bhi	a7e8 <memcmp+0x4c>
    a7d4:	3a000005 	bcc	a7f0 <memcmp+0x54>
    a7d8:	e1500002 	cmp	r0, r2
    a7dc:	1afffff8 	bne	a7c4 <memcmp+0x28>
    a7e0:	e3a00000 	mov	r0, #0
    a7e4:	e12fff1e 	bx	lr
    a7e8:	e3a00001 	mov	r0, #1
    a7ec:	e12fff1e 	bx	lr
    a7f0:	e3e00000 	mvn	r0, #0
    a7f4:	e12fff1e 	bx	lr

0000a7f8 <strlen>:
    a7f8:	e1d010d0 	ldrsb	r1, [r0]
    a7fc:	e2803001 	add	r3, r0, #1
    a800:	e3510000 	cmp	r1, #0
    a804:	0a000003 	beq	a818 <strlen+0x20>
    a808:	e0601003 	rsb	r1, r0, r3
    a80c:	e0d320d1 	ldrsb	r2, [r3], #1
    a810:	e3520000 	cmp	r2, #0
    a814:	1afffffb 	bne	a808 <strlen+0x10>
    a818:	e1a00001 	mov	r0, r1
    a81c:	e12fff1e 	bx	lr

0000a820 <strcmp>:
    a820:	e1d020d0 	ldrsb	r2, [r0]
    a824:	e1d130d0 	ldrsb	r3, [r1]
    a828:	e3520000 	cmp	r2, #0
    a82c:	1a000007 	bne	a850 <strcmp+0x30>
    a830:	ea000008 	b	a858 <strcmp+0x38>
    a834:	e1520003 	cmp	r2, r3
    a838:	ca00000b 	bgt	a86c <strcmp+0x4c>
    a83c:	ba00000c 	blt	a874 <strcmp+0x54>
    a840:	e1f020d1 	ldrsb	r2, [r0, #1]!
    a844:	e3520000 	cmp	r2, #0
    a848:	0a00000b 	beq	a87c <strcmp+0x5c>
    a84c:	e1f130d1 	ldrsb	r3, [r1, #1]!
    a850:	e3530000 	cmp	r3, #0
    a854:	1afffff6 	bne	a834 <strcmp+0x14>
    a858:	e1520003 	cmp	r2, r3
    a85c:	ca000002 	bgt	a86c <strcmp+0x4c>
    a860:	b3e00000 	mvnlt	r0, #0
    a864:	a3a00000 	movge	r0, #0
    a868:	e12fff1e 	bx	lr
    a86c:	e3a00001 	mov	r0, #1
    a870:	e12fff1e 	bx	lr
    a874:	e3e00000 	mvn	r0, #0
    a878:	e12fff1e 	bx	lr
    a87c:	e1d130d1 	ldrsb	r3, [r1, #1]
    a880:	e1520003 	cmp	r2, r3
    a884:	dafffff5 	ble	a860 <strcmp+0x40>
    a888:	eafffff7 	b	a86c <strcmp+0x4c>

0000a88c <strcpy>:
    a88c:	e1d130d0 	ldrsb	r3, [r1]
    a890:	e1a02000 	mov	r2, r0
    a894:	e3530000 	cmp	r3, #0
    a898:	0a000003 	beq	a8ac <strcpy+0x20>
    a89c:	e4c23001 	strb	r3, [r2], #1
    a8a0:	e1f130d1 	ldrsb	r3, [r1, #1]!
    a8a4:	e3530000 	cmp	r3, #0
    a8a8:	1afffffb 	bne	a89c <strcpy+0x10>
    a8ac:	e3a03000 	mov	r3, #0
    a8b0:	e5c23000 	strb	r3, [r2]
    a8b4:	e12fff1e 	bx	lr

0000a8b8 <strncpy>:
    a8b8:	e3520000 	cmp	r2, #0
    a8bc:	012fff1e 	bxeq	lr
    a8c0:	e1d130d0 	ldrsb	r3, [r1]
    a8c4:	e3530000 	cmp	r3, #0
    a8c8:	0a00000a 	beq	a8f8 <strncpy+0x40>
    a8cc:	e0812002 	add	r2, r1, r2
    a8d0:	e1a0c000 	mov	ip, r0
    a8d4:	e2811001 	add	r1, r1, #1
    a8d8:	ea000002 	b	a8e8 <strncpy+0x30>
    a8dc:	e0d130d1 	ldrsb	r3, [r1], #1
    a8e0:	e3530000 	cmp	r3, #0
    a8e4:	0a000004 	beq	a8fc <strncpy+0x44>
    a8e8:	e1510002 	cmp	r1, r2
    a8ec:	e4cc3001 	strb	r3, [ip], #1
    a8f0:	1afffff9 	bne	a8dc <strncpy+0x24>
    a8f4:	e12fff1e 	bx	lr
    a8f8:	e1a0c000 	mov	ip, r0
    a8fc:	e3a03000 	mov	r3, #0
    a900:	e5cc3000 	strb	r3, [ip]
    a904:	e12fff1e 	bx	lr

0000a908 <strcat>:
    a908:	e1d030d0 	ldrsb	r3, [r0]
    a90c:	e3530000 	cmp	r3, #0
    a910:	e1a03000 	mov	r3, r0
    a914:	0a000002 	beq	a924 <strcat+0x1c>
    a918:	e1f320d1 	ldrsb	r2, [r3, #1]!
    a91c:	e3520000 	cmp	r2, #0
    a920:	1afffffc 	bne	a918 <strcat+0x10>
    a924:	e1d120d0 	ldrsb	r2, [r1]
    a928:	e3520000 	cmp	r2, #0
    a92c:	0a000003 	beq	a940 <strcat+0x38>
    a930:	e4c32001 	strb	r2, [r3], #1
    a934:	e1f120d1 	ldrsb	r2, [r1, #1]!
    a938:	e3520000 	cmp	r2, #0
    a93c:	1afffffb 	bne	a930 <strcat+0x28>
    a940:	e3a02000 	mov	r2, #0
    a944:	e5c32000 	strb	r2, [r3]
    a948:	e12fff1e 	bx	lr

0000a94c <strchr>:
    a94c:	e1d020d0 	ldrsb	r2, [r0]
    a950:	e3520000 	cmp	r2, #0
    a954:	0a000009 	beq	a980 <strchr+0x34>
    a958:	e1510002 	cmp	r1, r2
    a95c:	1a000002 	bne	a96c <strchr+0x20>
    a960:	ea000008 	b	a988 <strchr+0x3c>
    a964:	e1530001 	cmp	r3, r1
    a968:	012fff1e 	bxeq	lr
    a96c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    a970:	e3530000 	cmp	r3, #0
    a974:	1afffffa 	bne	a964 <strchr+0x18>
    a978:	e1a00003 	mov	r0, r3
    a97c:	e12fff1e 	bx	lr
    a980:	e1a00002 	mov	r0, r2
    a984:	e12fff1e 	bx	lr
    a988:	e12fff1e 	bx	lr

0000a98c <strtok_r>:
    a98c:	e3500000 	cmp	r0, #0
    a990:	e92d4030 	push	{r4, r5, lr}
    a994:	0a00002b 	beq	aa48 <strtok_r+0xbc>
    a998:	e1d0e0d0 	ldrsb	lr, [r0]
    a99c:	e35e0000 	cmp	lr, #0
    a9a0:	11d140d0 	ldrsbne	r4, [r1]
    a9a4:	0a000024 	beq	aa3c <strtok_r+0xb0>
    a9a8:	e3540000 	cmp	r4, #0
    a9ac:	0a000008 	beq	a9d4 <strtok_r+0x48>
    a9b0:	e15e0004 	cmp	lr, r4
    a9b4:	0a000019 	beq	aa20 <strtok_r+0x94>
    a9b8:	e1a0c001 	mov	ip, r1
    a9bc:	ea000001 	b	a9c8 <strtok_r+0x3c>
    a9c0:	e153000e 	cmp	r3, lr
    a9c4:	0a000015 	beq	aa20 <strtok_r+0x94>
    a9c8:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    a9cc:	e3530000 	cmp	r3, #0
    a9d0:	1afffffa 	bne	a9c0 <strtok_r+0x34>
    a9d4:	e35e0000 	cmp	lr, #0
    a9d8:	0a000017 	beq	aa3c <strtok_r+0xb0>
    a9dc:	e1a05000 	mov	r5, r0
    a9e0:	e3540000 	cmp	r4, #0
    a9e4:	0a000008 	beq	aa0c <strtok_r+0x80>
    a9e8:	e15e0004 	cmp	lr, r4
    a9ec:	0a00000d 	beq	aa28 <strtok_r+0x9c>
    a9f0:	e1a0c001 	mov	ip, r1
    a9f4:	ea000001 	b	aa00 <strtok_r+0x74>
    a9f8:	e15e0003 	cmp	lr, r3
    a9fc:	0a000009 	beq	aa28 <strtok_r+0x9c>
    aa00:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    aa04:	e3530000 	cmp	r3, #0
    aa08:	1afffffa 	bne	a9f8 <strtok_r+0x6c>
    aa0c:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    aa10:	e35e0000 	cmp	lr, #0
    aa14:	1afffff1 	bne	a9e0 <strtok_r+0x54>
    aa18:	e5825000 	str	r5, [r2]
    aa1c:	e8bd8030 	pop	{r4, r5, pc}
    aa20:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    aa24:	eaffffdf 	b	a9a8 <strtok_r+0x1c>
    aa28:	e3a03000 	mov	r3, #0
    aa2c:	e2855001 	add	r5, r5, #1
    aa30:	e5453001 	strb	r3, [r5, #-1]
    aa34:	e5825000 	str	r5, [r2]
    aa38:	e8bd8030 	pop	{r4, r5, pc}
    aa3c:	e3a00000 	mov	r0, #0
    aa40:	e5820000 	str	r0, [r2]
    aa44:	e8bd8030 	pop	{r4, r5, pc}
    aa48:	e5920000 	ldr	r0, [r2]
    aa4c:	e3500000 	cmp	r0, #0
    aa50:	1affffd0 	bne	a998 <strtok_r+0xc>
    aa54:	e8bd8030 	pop	{r4, r5, pc}

0000aa58 <strtoul>:
    aa58:	e3510000 	cmp	r1, #0
    aa5c:	e92d4070 	push	{r4, r5, r6, lr}
    aa60:	e2425002 	sub	r5, r2, #2
    aa64:	15810000 	strne	r0, [r1]
    aa68:	e3520000 	cmp	r2, #0
    aa6c:	13550022 	cmpne	r5, #34	; 0x22
    aa70:	83a05001 	movhi	r5, #1
    aa74:	93a05000 	movls	r5, #0
    aa78:	8a000037 	bhi	ab5c <strtoul+0x104>
    aa7c:	e1a0e000 	mov	lr, r0
    aa80:	e0d030d1 	ldrsb	r3, [r0], #1
    aa84:	e3530020 	cmp	r3, #32
    aa88:	e6efc073 	uxtb	ip, r3
    aa8c:	e24c4009 	sub	r4, ip, #9
    aa90:	0afffff9 	beq	aa7c <strtoul+0x24>
    aa94:	e3540004 	cmp	r4, #4
    aa98:	9afffff7 	bls	aa7c <strtoul+0x24>
    aa9c:	e24cc02b 	sub	ip, ip, #43	; 0x2b
    aaa0:	e243602d 	sub	r6, r3, #45	; 0x2d
    aaa4:	e16f6f16 	clz	r6, r6
    aaa8:	e31c00fd 	tst	ip, #253	; 0xfd
    aaac:	e1a062a6 	lsr	r6, r6, #5
    aab0:	13a06000 	movne	r6, #0
    aab4:	0a000023 	beq	ab48 <strtoul+0xf0>
    aab8:	e3530030 	cmp	r3, #48	; 0x30
    aabc:	0a000028 	beq	ab64 <strtoul+0x10c>
    aac0:	e3520000 	cmp	r2, #0
    aac4:	03a0200a 	moveq	r2, #10
    aac8:	e353002f 	cmp	r3, #47	; 0x2f
    aacc:	da00003c 	ble	abc4 <strtoul+0x16c>
    aad0:	e1a0c003 	mov	ip, r3
    aad4:	e3a05001 	mov	r5, #1
    aad8:	e3a04000 	mov	r4, #0
    aadc:	ea000007 	b	ab00 <strtoul+0xa8>
    aae0:	e1500004 	cmp	r0, r4
    aae4:	e3a05000 	mov	r5, #0
    aae8:	e1a04000 	mov	r4, r0
    aaec:	3a000027 	bcc	ab90 <strtoul+0x138>
    aaf0:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    aaf4:	e353002f 	cmp	r3, #47	; 0x2f
    aaf8:	e1a0c003 	mov	ip, r3
    aafc:	da000028 	ble	aba4 <strtoul+0x14c>
    ab00:	e24cc061 	sub	ip, ip, #97	; 0x61
    ab04:	e35c0019 	cmp	ip, #25
    ab08:	92433020 	subls	r3, r3, #32
    ab0c:	e3530040 	cmp	r3, #64	; 0x40
    ab10:	c2433007 	subgt	r3, r3, #7
    ab14:	e2433030 	sub	r3, r3, #48	; 0x30
    ab18:	e1520003 	cmp	r2, r3
    ab1c:	e0203294 	mla	r0, r4, r2, r3
    ab20:	caffffee 	bgt	aae0 <strtoul+0x88>
    ab24:	e2255001 	eor	r5, r5, #1
    ab28:	e1a00004 	mov	r0, r4
    ab2c:	e3510000 	cmp	r1, #0
    ab30:	e0055006 	and	r5, r5, r6
    ab34:	0a000000 	beq	ab3c <strtoul+0xe4>
    ab38:	e581e000 	str	lr, [r1]
    ab3c:	e3550000 	cmp	r5, #0
    ab40:	12600000 	rsbne	r0, r0, #0
    ab44:	e8bd8070 	pop	{r4, r5, r6, pc}
    ab48:	e1de30d1 	ldrsb	r3, [lr, #1]
    ab4c:	e28ee001 	add	lr, lr, #1
    ab50:	e3530030 	cmp	r3, #48	; 0x30
    ab54:	1affffd9 	bne	aac0 <strtoul+0x68>
    ab58:	ea000001 	b	ab64 <strtoul+0x10c>
    ab5c:	e3a00000 	mov	r0, #0
    ab60:	e8bd8070 	pop	{r4, r5, r6, pc}
    ab64:	e1de30d1 	ldrsb	r3, [lr, #1]
    ab68:	e28ec001 	add	ip, lr, #1
    ab6c:	e3c30020 	bic	r0, r3, #32
    ab70:	e3500058 	cmp	r0, #88	; 0x58
    ab74:	1a00000c 	bne	abac <strtoul+0x154>
    ab78:	e3d23010 	bics	r3, r2, #16
    ab7c:	1afffff6 	bne	ab5c <strtoul+0x104>
    ab80:	e1de30d2 	ldrsb	r3, [lr, #2]
    ab84:	e3a02010 	mov	r2, #16
    ab88:	e28ee002 	add	lr, lr, #2
    ab8c:	eaffffcd 	b	aac8 <strtoul+0x70>
    ab90:	e1510005 	cmp	r1, r5
    ab94:	0a000008 	beq	abbc <strtoul+0x164>
    ab98:	e581e000 	str	lr, [r1]
    ab9c:	e3e00000 	mvn	r0, #0
    aba0:	e8bd8070 	pop	{r4, r5, r6, pc}
    aba4:	e3a05001 	mov	r5, #1
    aba8:	eaffffdf 	b	ab2c <strtoul+0xd4>
    abac:	e3520000 	cmp	r2, #0
    abb0:	e1a0e00c 	mov	lr, ip
    abb4:	03a02008 	moveq	r2, #8
    abb8:	eaffffc2 	b	aac8 <strtoul+0x70>
    abbc:	e3e00000 	mvn	r0, #0
    abc0:	e8bd8070 	pop	{r4, r5, r6, pc}
    abc4:	e3510000 	cmp	r1, #0
    abc8:	13a00000 	movne	r0, #0
    abcc:	1affffd9 	bne	ab38 <strtoul+0xe0>
    abd0:	e1a00001 	mov	r0, r1
    abd4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000abd8 <char2int>:
    abd8:	e12fff1e 	bx	lr

0000abdc <memcpy>:
    abdc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abe0:	e352007f 	cmp	r2, #127	; 0x7f
    abe4:	9a00000b 	bls	ac18 <memcpy+0x3c>
    abe8:	e3110003 	tst	r1, #3
    abec:	1a000009 	bne	ac18 <memcpy+0x3c>
    abf0:	e3100003 	tst	r0, #3
    abf4:	1a000007 	bne	ac18 <memcpy+0x3c>
    abf8:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    abfc:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    ac00:	e2422020 	sub	r2, r2, #32
    ac04:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    ac08:	f5d1f040 	pld	[r1, #64]	; 0x40
    ac0c:	e352001f 	cmp	r2, #31
    ac10:	8afffff9 	bhi	abfc <memcpy+0x20>
    ac14:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    ac18:	e3520000 	cmp	r2, #0
    ac1c:	0a000003 	beq	ac30 <memcpy+0x54>
    ac20:	e4d13001 	ldrb	r3, [r1], #1
    ac24:	e2522001 	subs	r2, r2, #1
    ac28:	e4c03001 	strb	r3, [r0], #1
    ac2c:	1afffffb 	bne	ac20 <memcpy+0x44>
    ac30:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    ac34:	e12fff1e 	bx	lr

0000ac38 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    ac38:	e3a01000 	mov	r1, #0
    ac3c:	ea000009 	b	ac68 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x30>
    ac40:	e3520009 	cmp	r2, #9
    ac44:	8a000011 	bhi	ac90 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    ac48:	e3730001 	cmn	r3, #1
    ac4c:	13a02000 	movne	r2, #0
    ac50:	03a02001 	moveq	r2, #1
    ac54:	e1510003 	cmp	r1, r3
    ac58:	83822001 	orrhi	r2, r2, #1
    ac5c:	e1a01003 	mov	r1, r3
    ac60:	e3520000 	cmp	r2, #0
    ac64:	1a000009 	bne	ac90 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    ac68:	e0d0c0d1 	ldrsb	ip, [r0], #1
    ac6c:	e1a03181 	lsl	r3, r1, #3
    ac70:	e0833081 	add	r3, r3, r1, lsl #1
    ac74:	e24c2030 	sub	r2, ip, #48	; 0x30
    ac78:	e35c0000 	cmp	ip, #0
    ac7c:	e0823003 	add	r3, r2, r3
    ac80:	e6ef2072 	uxtb	r2, r2
    ac84:	1affffed 	bne	ac40 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    ac88:	e1a00001 	mov	r0, r1
    ac8c:	e12fff1e 	bx	lr
    ac90:	e3e00000 	mvn	r0, #0
    ac94:	e12fff1e 	bx	lr

0000ac98 <CKernelOptions::~CKernelOptions()>:
    ac98:	e30434c4 	movw	r3, #17604	; 0x44c4
    ac9c:	e3403001 	movt	r3, #1
    aca0:	e3a02000 	mov	r2, #0
    aca4:	e5832000 	str	r2, [r3]
    aca8:	e12fff1e 	bx	lr

0000acac <CKernelOptions::GetWidth() const>:
    acac:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    acb0:	e12fff1e 	bx	lr

0000acb4 <CKernelOptions::GetHeight() const>:
    acb4:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    acb8:	e12fff1e 	bx	lr

0000acbc <CKernelOptions::GetLogDevice() const>:
    acbc:	e2800e81 	add	r0, r0, #2064	; 0x810
    acc0:	e2800008 	add	r0, r0, #8
    acc4:	e12fff1e 	bx	lr

0000acc8 <CKernelOptions::GetLogLevel() const>:
    acc8:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    accc:	e12fff1e 	bx	lr

0000acd0 <CKernelOptions::GetKeyMap() const>:
    acd0:	e2800e83 	add	r0, r0, #2096	; 0x830
    acd4:	e12fff1e 	bx	lr

0000acd8 <CKernelOptions::GetUSBPowerDelay() const>:
    acd8:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    acdc:	e12fff1e 	bx	lr

0000ace0 <CKernelOptions::GetCPUSpeed() const>:
    ace0:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    ace4:	e12fff1e 	bx	lr

0000ace8 <CKernelOptions::GetSoCMaxTemp() const>:
    ace8:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    acec:	e12fff1e 	bx	lr

0000acf0 <CKernelOptions::Get()>:
    acf0:	e30434c4 	movw	r3, #17604	; 0x44c4
    acf4:	e3403001 	movt	r3, #1
    acf8:	e5930000 	ldr	r0, [r3]
    acfc:	e12fff1e 	bx	lr

0000ad00 <CKernelOptions::GetToken()>:
    ad00:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    ad04:	e1d320d0 	ldrsb	r2, [r3]
    ad08:	e3520000 	cmp	r2, #0
    ad0c:	1a000005 	bne	ad28 <CKernelOptions::GetToken()+0x28>
    ad10:	ea000014 	b	ad68 <CKernelOptions::GetToken()+0x68>
    ad14:	e2833001 	add	r3, r3, #1
    ad18:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    ad1c:	e1d320d0 	ldrsb	r2, [r3]
    ad20:	e3520000 	cmp	r2, #0
    ad24:	0a00000f 	beq	ad68 <CKernelOptions::GetToken()+0x68>
    ad28:	e3520020 	cmp	r2, #32
    ad2c:	0afffff8 	beq	ad14 <CKernelOptions::GetToken()+0x14>
    ad30:	e1a02003 	mov	r2, r3
    ad34:	e2822001 	add	r2, r2, #1
    ad38:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    ad3c:	e1d210d0 	ldrsb	r1, [r2]
    ad40:	e3510000 	cmp	r1, #0
    ad44:	0a000008 	beq	ad6c <CKernelOptions::GetToken()+0x6c>
    ad48:	e3510020 	cmp	r1, #32
    ad4c:	1afffff8 	bne	ad34 <CKernelOptions::GetToken()+0x34>
    ad50:	e282c001 	add	ip, r2, #1
    ad54:	e3a01000 	mov	r1, #0
    ad58:	e580c80c 	str	ip, [r0, #2060]	; 0x80c
    ad5c:	e1a00003 	mov	r0, r3
    ad60:	e5c21000 	strb	r1, [r2]
    ad64:	e12fff1e 	bx	lr
    ad68:	e3a03000 	mov	r3, #0
    ad6c:	e1a00003 	mov	r0, r3
    ad70:	e12fff1e 	bx	lr

0000ad74 <CKernelOptions::CKernelOptions()>:
    ad74:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    ad78:	e1a05000 	mov	r5, r0
    ad7c:	e2808e81 	add	r8, r0, #2064	; 0x810
    ad80:	e2888008 	add	r8, r8, #8
    ad84:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    ad88:	e3a04000 	mov	r4, #0
    ad8c:	e3a02004 	mov	r2, #4
    ad90:	e3a0303c 	mov	r3, #60	; 0x3c
    ad94:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    ad98:	e3021654 	movw	r1, #9812	; 0x2654
    ad9c:	e3401001 	movt	r1, #1
    ada0:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    ada4:	e1a00008 	mov	r0, r8
    ada8:	e5854810 	str	r4, [r5, #2064]	; 0x810
    adac:	e2859e83 	add	r9, r5, #2096	; 0x830
    adb0:	e5854814 	str	r4, [r5, #2068]	; 0x814
    adb4:	e5854834 	str	r4, [r5, #2100]	; 0x834
    adb8:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    adbc:	ebfffeb2 	bl	a88c <strcpy>
    adc0:	e1a00009 	mov	r0, r9
    adc4:	e302165c 	movw	r1, #9820	; 0x265c
    adc8:	e3401001 	movt	r1, #1
    adcc:	ebfffeae 	bl	a88c <strcpy>
    add0:	e30434c4 	movw	r3, #17604	; 0x44c4
    add4:	e3403001 	movt	r3, #1
    add8:	e28d000c 	add	r0, sp, #12
    addc:	e5835000 	str	r5, [r3]
    ade0:	ebfff725 	bl	8a7c <CBcmPropertyTags::CBcmPropertyTags()>
    ade4:	e58d4000 	str	r4, [sp]
    ade8:	e1a02005 	mov	r2, r5
    adec:	e28d000c 	add	r0, sp, #12
    adf0:	e3a01001 	mov	r1, #1
    adf4:	e3401005 	movt	r1, #5
    adf8:	e300380c 	movw	r3, #2060	; 0x80c
    adfc:	ebfff766 	bl	8b9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ae00:	e1500004 	cmp	r0, r4
    ae04:	0a000039 	beq	aef0 <CKernelOptions::CKernelOptions()+0x17c>
    ae08:	e5953008 	ldr	r3, [r5, #8]
    ae0c:	e3530b02 	cmp	r3, #2048	; 0x800
    ae10:	2a000036 	bcs	aef0 <CKernelOptions::CKernelOptions()+0x17c>
    ae14:	e0853003 	add	r3, r5, r3
    ae18:	e285200c 	add	r2, r5, #12
    ae1c:	e5c3400c 	strb	r4, [r3, #12]
    ae20:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    ae24:	e1a00005 	mov	r0, r5
    ae28:	ebffffb4 	bl	ad00 <CKernelOptions::GetToken()>
    ae2c:	e2506000 	subs	r6, r0, #0
    ae30:	0a00002e 	beq	aef0 <CKernelOptions::CKernelOptions()+0x17c>
    ae34:	e1d630d0 	ldrsb	r3, [r6]
    ae38:	e3530000 	cmp	r3, #0
    ae3c:	0a000008 	beq	ae64 <CKernelOptions::CKernelOptions()+0xf0>
    ae40:	e353003d 	cmp	r3, #61	; 0x3d
    ae44:	e1a04006 	mov	r4, r6
    ae48:	1a000002 	bne	ae58 <CKernelOptions::CKernelOptions()+0xe4>
    ae4c:	ea00002c 	b	af04 <CKernelOptions::CKernelOptions()+0x190>
    ae50:	e353003d 	cmp	r3, #61	; 0x3d
    ae54:	0a00002a 	beq	af04 <CKernelOptions::CKernelOptions()+0x190>
    ae58:	e1f430d1 	ldrsb	r3, [r4, #1]!
    ae5c:	e3530000 	cmp	r3, #0
    ae60:	1afffffa 	bne	ae50 <CKernelOptions::CKernelOptions()+0xdc>
    ae64:	e30216b0 	movw	r1, #9904	; 0x26b0
    ae68:	e3401001 	movt	r1, #1
    ae6c:	e1a00006 	mov	r0, r6
    ae70:	ebfffe6a 	bl	a820 <strcmp>
    ae74:	e3500000 	cmp	r0, #0
    ae78:	0affffe9 	beq	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    ae7c:	e3021660 	movw	r1, #9824	; 0x2660
    ae80:	e3401001 	movt	r1, #1
    ae84:	e1a00006 	mov	r0, r6
    ae88:	ebfffe64 	bl	a820 <strcmp>
    ae8c:	e3500000 	cmp	r0, #0
    ae90:	0affffe3 	beq	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    ae94:	e3a07000 	mov	r7, #0
    ae98:	e3021668 	movw	r1, #9832	; 0x2668
    ae9c:	e3401001 	movt	r1, #1
    aea0:	e1a00006 	mov	r0, r6
    aea4:	ebfffe5d 	bl	a820 <strcmp>
    aea8:	e2504000 	subs	r4, r0, #0
    aeac:	0a000029 	beq	af58 <CKernelOptions::CKernelOptions()+0x1e4>
    aeb0:	e3021670 	movw	r1, #9840	; 0x2670
    aeb4:	e3401001 	movt	r1, #1
    aeb8:	e1a00006 	mov	r0, r6
    aebc:	ebfffe57 	bl	a820 <strcmp>
    aec0:	e3500000 	cmp	r0, #0
    aec4:	1a000029 	bne	af70 <CKernelOptions::CKernelOptions()+0x1fc>
    aec8:	e3570000 	cmp	r7, #0
    aecc:	0affffd4 	beq	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    aed0:	e1d730d0 	ldrsb	r3, [r7]
    aed4:	e3530000 	cmp	r3, #0
    aed8:	0affffd1 	beq	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    aedc:	e1a00007 	mov	r0, r7
    aee0:	ebffff54 	bl	ac38 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    aee4:	e3500004 	cmp	r0, #4
    aee8:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    aeec:	eaffffcc 	b	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    aef0:	e28d000c 	add	r0, sp, #12
    aef4:	ebfff6e6 	bl	8a94 <CBcmPropertyTags::~CBcmPropertyTags()>
    aef8:	e1a00005 	mov	r0, r5
    aefc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    af00:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    af04:	e3a03000 	mov	r3, #0
    af08:	e30216b0 	movw	r1, #9904	; 0x26b0
    af0c:	e3401001 	movt	r1, #1
    af10:	e5c43000 	strb	r3, [r4]
    af14:	e1a00006 	mov	r0, r6
    af18:	ebfffe40 	bl	a820 <strcmp>
    af1c:	e3500000 	cmp	r0, #0
    af20:	e2847001 	add	r7, r4, #1
    af24:	1a000051 	bne	b070 <CKernelOptions::CKernelOptions()+0x2fc>
    af28:	e3570000 	cmp	r7, #0
    af2c:	0affffbc 	beq	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    af30:	e1d430d1 	ldrsb	r3, [r4, #1]
    af34:	e3530000 	cmp	r3, #0
    af38:	0affffb9 	beq	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    af3c:	e1a00007 	mov	r0, r7
    af40:	ebffff3c 	bl	ac38 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    af44:	e300353c 	movw	r3, #1340	; 0x53c
    af48:	e2402d0a 	sub	r2, r0, #640	; 0x280
    af4c:	e1520003 	cmp	r2, r3
    af50:	95850810 	strls	r0, [r5, #2064]	; 0x810
    af54:	eaffffb2 	b	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    af58:	e1a01007 	mov	r1, r7
    af5c:	e3a02013 	mov	r2, #19
    af60:	e1a00008 	mov	r0, r8
    af64:	ebfffe53 	bl	a8b8 <strncpy>
    af68:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    af6c:	eaffffac 	b	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    af70:	e302167c 	movw	r1, #9852	; 0x267c
    af74:	e3401001 	movt	r1, #1
    af78:	e1a00006 	mov	r0, r6
    af7c:	ebfffe27 	bl	a820 <strcmp>
    af80:	e2504000 	subs	r4, r0, #0
    af84:	1a000005 	bne	afa0 <CKernelOptions::CKernelOptions()+0x22c>
    af88:	e1a01007 	mov	r1, r7
    af8c:	e3a02002 	mov	r2, #2
    af90:	e1a00009 	mov	r0, r9
    af94:	ebfffe47 	bl	a8b8 <strncpy>
    af98:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    af9c:	eaffffa0 	b	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    afa0:	e3021684 	movw	r1, #9860	; 0x2684
    afa4:	e3401001 	movt	r1, #1
    afa8:	e1a00006 	mov	r0, r6
    afac:	ebfffe1b 	bl	a820 <strcmp>
    afb0:	e3500000 	cmp	r0, #0
    afb4:	1a00000b 	bne	afe8 <CKernelOptions::CKernelOptions()+0x274>
    afb8:	e3570000 	cmp	r7, #0
    afbc:	0affff98 	beq	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    afc0:	e1d730d0 	ldrsb	r3, [r7]
    afc4:	e3530000 	cmp	r3, #0
    afc8:	0affff95 	beq	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    afcc:	e1a00007 	mov	r0, r7
    afd0:	ebffff18 	bl	ac38 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    afd4:	e3013e78 	movw	r3, #7800	; 0x1e78
    afd8:	e24020c8 	sub	r2, r0, #200	; 0xc8
    afdc:	e1520003 	cmp	r2, r3
    afe0:	95850834 	strls	r0, [r5, #2100]	; 0x834
    afe4:	eaffff8e 	b	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    afe8:	e3021694 	movw	r1, #9876	; 0x2694
    afec:	e3401001 	movt	r1, #1
    aff0:	e1a00006 	mov	r0, r6
    aff4:	ebfffe09 	bl	a820 <strcmp>
    aff8:	e3500000 	cmp	r0, #0
    affc:	1a000007 	bne	b020 <CKernelOptions::CKernelOptions()+0x2ac>
    b000:	e1a00007 	mov	r0, r7
    b004:	e302169c 	movw	r1, #9884	; 0x269c
    b008:	e3401001 	movt	r1, #1
    b00c:	ebfffe03 	bl	a820 <strcmp>
    b010:	e3500000 	cmp	r0, #0
    b014:	03a03001 	moveq	r3, #1
    b018:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    b01c:	eaffff80 	b	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    b020:	e1a00006 	mov	r0, r6
    b024:	e30216a4 	movw	r1, #9892	; 0x26a4
    b028:	e3401001 	movt	r1, #1
    b02c:	ebfffdfb 	bl	a820 <strcmp>
    b030:	e2900000 	adds	r0, r0, #0
    b034:	13a00001 	movne	r0, #1
    b038:	e3570000 	cmp	r7, #0
    b03c:	11a03000 	movne	r3, r0
    b040:	03803001 	orreq	r3, r0, #1
    b044:	e3530000 	cmp	r3, #0
    b048:	1affff75 	bne	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    b04c:	e1d730d0 	ldrsb	r3, [r7]
    b050:	e3530000 	cmp	r3, #0
    b054:	0affff72 	beq	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    b058:	e1a00007 	mov	r0, r7
    b05c:	ebfffef5 	bl	ac38 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b060:	e2403028 	sub	r3, r0, #40	; 0x28
    b064:	e3530026 	cmp	r3, #38	; 0x26
    b068:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    b06c:	eaffff6c 	b	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    b070:	e3021660 	movw	r1, #9824	; 0x2660
    b074:	e3401001 	movt	r1, #1
    b078:	e1a00006 	mov	r0, r6
    b07c:	ebfffde7 	bl	a820 <strcmp>
    b080:	e3500000 	cmp	r0, #0
    b084:	1affff83 	bne	ae98 <CKernelOptions::CKernelOptions()+0x124>
    b088:	e3570000 	cmp	r7, #0
    b08c:	0affff64 	beq	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    b090:	e1d430d1 	ldrsb	r3, [r4, #1]
    b094:	e3530000 	cmp	r3, #0
    b098:	0affff61 	beq	ae24 <CKernelOptions::CKernelOptions()+0xb0>
    b09c:	e1a00007 	mov	r0, r7
    b0a0:	ebfffee4 	bl	ac38 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b0a4:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    b0a8:	e3530f96 	cmp	r3, #600	; 0x258
    b0ac:	95850814 	strls	r0, [r5, #2068]	; 0x814
    b0b0:	eaffff5b 	b	ae24 <CKernelOptions::CKernelOptions()+0xb0>

0000b0b4 <CKernelOptions::GetOptionValue(char*)>:
    b0b4:	e1d030d0 	ldrsb	r3, [r0]
    b0b8:	e3530000 	cmp	r3, #0
    b0bc:	1a000003 	bne	b0d0 <CKernelOptions::GetOptionValue(char*)+0x1c>
    b0c0:	ea000007 	b	b0e4 <CKernelOptions::GetOptionValue(char*)+0x30>
    b0c4:	e1f030d1 	ldrsb	r3, [r0, #1]!
    b0c8:	e3530000 	cmp	r3, #0
    b0cc:	0a000004 	beq	b0e4 <CKernelOptions::GetOptionValue(char*)+0x30>
    b0d0:	e353003d 	cmp	r3, #61	; 0x3d
    b0d4:	1afffffa 	bne	b0c4 <CKernelOptions::GetOptionValue(char*)+0x10>
    b0d8:	e3a02000 	mov	r2, #0
    b0dc:	e2803001 	add	r3, r0, #1
    b0e0:	e5c02000 	strb	r2, [r0]
    b0e4:	e1a00003 	mov	r0, r3
    b0e8:	e12fff1e 	bx	lr

0000b0ec <CKernelOptions::GetDecimal(char*)>:
    b0ec:	e2503000 	subs	r3, r0, #0
    b0f0:	0a000002 	beq	b100 <CKernelOptions::GetDecimal(char*)+0x14>
    b0f4:	e1d330d0 	ldrsb	r3, [r3]
    b0f8:	e3530000 	cmp	r3, #0
    b0fc:	1a000001 	bne	b108 <CKernelOptions::GetDecimal(char*)+0x1c>
    b100:	e3e00000 	mvn	r0, #0
    b104:	e12fff1e 	bx	lr
    b108:	eafffeca 	b	ac38 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000b10c <CPageTable::CPageTable()>:
    b10c:	e92d4010 	push	{r4, lr}
    b110:	e1a04000 	mov	r4, r0
    b114:	e3a01000 	mov	r1, #0
    b118:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
    b11c:	e5801000 	str	r1, [r0]
    b120:	e1a0c001 	mov	ip, r1
    b124:	e1a03002 	mov	r3, r2
    b128:	e3a0e002 	mov	lr, #2
    b12c:	e3a00001 	mov	r0, #1
    b130:	e5842004 	str	r2, [r4, #4]
    b134:	e5d32000 	ldrb	r2, [r3]
    b138:	e35c0b01 	cmp	ip, #1024	; 0x400
    b13c:	e5d31002 	ldrb	r1, [r3, #2]
    b140:	e2833004 	add	r3, r3, #4
    b144:	e7c1201e 	bfi	r2, lr, #0, #2
    b148:	e3811001 	orr	r1, r1, #1
    b14c:	e6ef2072 	uxtb	r2, r2
    b150:	e20110f9 	and	r1, r1, #249	; 0xf9
    b154:	e3822004 	orr	r2, r2, #4
    b158:	e7c3119f 	bfc	r1, #3, #1
    b15c:	e20220f7 	and	r2, r2, #247	; 0xf7
    b160:	e5431002 	strb	r1, [r3, #-2]
    b164:	e7c4221f 	bfc	r2, #4, #1
    b168:	e5432004 	strb	r2, [r3, #-4]
    b16c:	e15310b2 	ldrh	r1, [r3, #-2]
    b170:	e15320b4 	ldrh	r2, [r3, #-4]
    b174:	e7cf121c 	bfi	r1, ip, #4, #12
    b178:	e28cc001 	add	ip, ip, #1
    b17c:	e7c8229f 	bfc	r2, #5, #4
    b180:	e14320b4 	strh	r2, [r3, #-4]
    b184:	e14310b2 	strh	r1, [r3, #-2]
    b188:	e1a02422 	lsr	r2, r2, #8
    b18c:	e20220fd 	and	r2, r2, #253	; 0xfd
    b190:	e7c32110 	bfi	r2, r0, #2, #2
    b194:	e202208f 	and	r2, r2, #143	; 0x8f
    b198:	e7c7239f 	bfc	r2, #7, #1
    b19c:	e5432003 	strb	r2, [r3, #-3]
    b1a0:	25532004 	ldrbcs	r2, [r3, #-4]
    b1a4:	23822010 	orrcs	r2, r2, #16
    b1a8:	25432004 	strbcs	r2, [r3, #-4]
    b1ac:	e35c0a01 	cmp	ip, #4096	; 0x1000
    b1b0:	1affffdf 	bne	b134 <CPageTable::CPageTable()+0x28>
    b1b4:	eb001334 	bl	fe8c <CleanDataCache>
    b1b8:	e1a00004 	mov	r0, r4
    b1bc:	e8bd8010 	pop	{r4, pc}

0000b1c0 <CPageTable::CPageTable(unsigned int)>:
    b1c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b1c4:	e3a03001 	mov	r3, #1
    b1c8:	e1a04000 	mov	r4, r0
    b1cc:	e5803000 	str	r3, [r0]
    b1d0:	e1a05001 	mov	r5, r1
    b1d4:	eb00153e 	bl	106d4 <palloc>
    b1d8:	e3500000 	cmp	r0, #0
    b1dc:	e5840004 	str	r0, [r4, #4]
    b1e0:	0a000037 	beq	b2c4 <CPageTable::CPageTable(unsigned int)+0x104>
    b1e4:	e7eb3050 	ubfx	r3, r0, #0, #12
    b1e8:	e3530000 	cmp	r3, #0
    b1ec:	1a00002c 	bne	b2a4 <CPageTable::CPageTable(unsigned int)+0xe4>
    b1f0:	e3016f6c 	movw	r6, #8044	; 0x1f6c
    b1f4:	e3406001 	movt	r6, #1
    b1f8:	e3a02000 	mov	r2, #0
    b1fc:	e3a08002 	mov	r8, #2
    b200:	e3a07001 	mov	r7, #1
    b204:	ea000006 	b	b224 <CPageTable::CPageTable(unsigned int)+0x64>
    b208:	e6ef3073 	uxtb	r3, r3
    b20c:	e7c3319f 	bfc	r3, #3, #1
    b210:	e5c03000 	strb	r3, [r0]
    b214:	e2822601 	add	r2, r2, #1048576	; 0x100000
    b218:	e2800004 	add	r0, r0, #4
    b21c:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    b220:	0a00001c 	beq	b298 <CPageTable::CPageTable(unsigned int)+0xd8>
    b224:	e5d03001 	ldrb	r3, [r0, #1]
    b228:	e7e3ca52 	ubfx	ip, r2, #20, #4
    b22c:	e1520006 	cmp	r2, r6
    b230:	e3a0e001 	mov	lr, #1
    b234:	e20330fc 	and	r3, r3, #252	; 0xfc
    b238:	e388100c 	orr	r1, r8, #12
    b23c:	e7c33117 	bfi	r3, r7, #2, #2
    b240:	e18ec20c 	orr	ip, lr, ip, lsl #4
    b244:	e203308f 	and	r3, r3, #143	; 0x8f
    b248:	e5c0c002 	strb	ip, [r0, #2]
    b24c:	e7c7339f 	bfc	r3, #7, #1
    b250:	e5c01000 	strb	r1, [r0]
    b254:	e5c03001 	strb	r3, [r0, #1]
    b258:	e1a03c22 	lsr	r3, r2, #24
    b25c:	e5c03003 	strb	r3, [r0, #3]
    b260:	3affffeb 	bcc	b214 <CPageTable::CPageTable(unsigned int)+0x54>
    b264:	e1520005 	cmp	r2, r5
    b268:	e6ef3071 	uxtb	r3, r1
    b26c:	e3833010 	orr	r3, r3, #16
    b270:	e5c03000 	strb	r3, [r0]
    b274:	2affffe3 	bcs	b208 <CPageTable::CPageTable(unsigned int)+0x48>
    b278:	e3520501 	cmp	r2, #4194304	; 0x400000
    b27c:	1affffe4 	bne	b214 <CPageTable::CPageTable(unsigned int)+0x54>
    b280:	e5d03000 	ldrb	r3, [r0]
    b284:	e3a02605 	mov	r2, #5242880	; 0x500000
    b288:	e20330fb 	and	r3, r3, #251	; 0xfb
    b28c:	e7c3319f 	bfc	r3, #3, #1
    b290:	e4c03004 	strb	r3, [r0], #4
    b294:	eaffffe2 	b	b224 <CPageTable::CPageTable(unsigned int)+0x64>
    b298:	eb0012fb 	bl	fe8c <CleanDataCache>
    b29c:	e1a00004 	mov	r0, r4
    b2a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b2a4:	e30216b8 	movw	r1, #9912	; 0x26b8
    b2a8:	e3401001 	movt	r1, #1
    b2ac:	e30206d8 	movw	r0, #9944	; 0x26d8
    b2b0:	e3400001 	movt	r0, #1
    b2b4:	e3a02051 	mov	r2, #81	; 0x51
    b2b8:	eb000491 	bl	c504 <assertion_failed>
    b2bc:	e5940004 	ldr	r0, [r4, #4]
    b2c0:	eaffffca 	b	b1f0 <CPageTable::CPageTable(unsigned int)+0x30>
    b2c4:	e30216b8 	movw	r1, #9912	; 0x26b8
    b2c8:	e3401001 	movt	r1, #1
    b2cc:	e30206c8 	movw	r0, #9928	; 0x26c8
    b2d0:	e3400001 	movt	r0, #1
    b2d4:	e3a02050 	mov	r2, #80	; 0x50
    b2d8:	eb000489 	bl	c504 <assertion_failed>
    b2dc:	e5940004 	ldr	r0, [r4, #4]
    b2e0:	eaffffbf 	b	b1e4 <CPageTable::CPageTable(unsigned int)+0x24>

0000b2e4 <CPageTable::~CPageTable()>:
    b2e4:	e5903000 	ldr	r3, [r0]
    b2e8:	e92d4010 	push	{r4, lr}
    b2ec:	e3530000 	cmp	r3, #0
    b2f0:	e1a04000 	mov	r4, r0
    b2f4:	0a000001 	beq	b300 <CPageTable::~CPageTable()+0x1c>
    b2f8:	e5900004 	ldr	r0, [r0, #4]
    b2fc:	eb001526 	bl	1079c <pfree>
    b300:	e1a00004 	mov	r0, r4
    b304:	e8bd8010 	pop	{r4, pc}

0000b308 <CPageTable::GetBaseAddress() const>:
    b308:	e5900004 	ldr	r0, [r0, #4]
    b30c:	e3800059 	orr	r0, r0, #89	; 0x59
    b310:	e12fff1e 	bx	lr

0000b314 <CScreenDevice::~CScreenDevice()>:
    b314:	e590300c 	ldr	r3, [r0, #12]
    b318:	e3022700 	movw	r2, #9984	; 0x2700
    b31c:	e3402001 	movt	r2, #1
    b320:	e3530000 	cmp	r3, #0
    b324:	e92d4070 	push	{r4, r5, r6, lr}
    b328:	e1a04000 	mov	r4, r0
    b32c:	e5802000 	str	r2, [r0]
    b330:	0a000003 	beq	b344 <CScreenDevice::~CScreenDevice()+0x30>
    b334:	e5900018 	ldr	r0, [r0, #24]
    b338:	e3500000 	cmp	r0, #0
    b33c:	0a000000 	beq	b344 <CScreenDevice::~CScreenDevice()+0x30>
    b340:	ebfff9f0 	bl	9b08 <operator delete[](void*)>
    b344:	e5945010 	ldr	r5, [r4, #16]
    b348:	e3a03000 	mov	r3, #0
    b34c:	e5843018 	str	r3, [r4, #24]
    b350:	e1550003 	cmp	r5, r3
    b354:	0a000004 	beq	b36c <CScreenDevice::~CScreenDevice()+0x58>
    b358:	e1a00005 	mov	r0, r5
    b35c:	eb001661 	bl	10ce8 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b360:	e1a00005 	mov	r0, r5
    b364:	e3a01024 	mov	r1, #36	; 0x24
    b368:	ebfff9e7 	bl	9b0c <operator delete(void*, unsigned int)>
    b36c:	e3a03000 	mov	r3, #0
    b370:	e284005c 	add	r0, r4, #92	; 0x5c
    b374:	e5843010 	str	r3, [r4, #16]
    b378:	eb001233 	bl	fc4c <CSpinLock::~CSpinLock()>
    b37c:	e2840014 	add	r0, r4, #20
    b380:	eb000486 	bl	c5a0 <CCharGenerator::~CCharGenerator()>
    b384:	e1a00004 	mov	r0, r4
    b388:	eb0016d7 	bl	10eec <CDevice::~CDevice()>
    b38c:	e1a00004 	mov	r0, r4
    b390:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b394 <CScreenDevice::~CScreenDevice()>:
    b394:	e92d4010 	push	{r4, lr}
    b398:	e1a04000 	mov	r4, r0
    b39c:	ebffffdc 	bl	b314 <CScreenDevice::~CScreenDevice()>
    b3a0:	e1a00004 	mov	r0, r4
    b3a4:	e3a01074 	mov	r1, #116	; 0x74
    b3a8:	ebfff9d7 	bl	9b0c <operator delete(void*, unsigned int)>
    b3ac:	e1a00004 	mov	r0, r4
    b3b0:	e8bd8010 	pop	{r4, pc}

0000b3b4 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]>:
    b3b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b3b8:	e2806014 	add	r6, r0, #20
    b3bc:	e1a05000 	mov	r5, r0
    b3c0:	e1a00006 	mov	r0, r6
    b3c4:	e3a08000 	mov	r8, #0
    b3c8:	eb000479 	bl	c5b4 <CCharGenerator::GetUnderline() const>
    b3cc:	e1a07000 	mov	r7, r0
    b3d0:	e1a00006 	mov	r0, r6
    b3d4:	eb000474 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    b3d8:	e1500007 	cmp	r0, r7
    b3dc:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    b3e0:	e3a04000 	mov	r4, #0
    b3e4:	ea000013 	b	b438 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]+0x84>
    b3e8:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    b3ec:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    b3f0:	e0843003 	add	r3, r4, r3
    b3f4:	e1530002 	cmp	r3, r2
    b3f8:	2a00000d 	bcs	b434 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]+0x80>
    b3fc:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    b400:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    b404:	e0872002 	add	r2, r7, r2
    b408:	e1520001 	cmp	r2, r1
    b40c:	2a000008 	bcs	b434 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]+0x80>
    b410:	e5950020 	ldr	r0, [r5, #32]
    b414:	e5951018 	ldr	r1, [r5, #24]
    b418:	e0233290 	mla	r3, r0, r2, r3
    b41c:	e1a03083 	lsl	r3, r3, #1
    b420:	e19120b3 	ldrh	r2, [r1, r3]
    b424:	e3520000 	cmp	r2, #0
    b428:	118180b3 	strhne	r8, [r1, r3]
    b42c:	01d524b8 	ldrheq	r2, [r5, #72]	; 0x48
    b430:	018120b3 	strheq	r2, [r1, r3]
    b434:	e2844001 	add	r4, r4, #1
    b438:	e1a00006 	mov	r0, r6
    b43c:	eb000458 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    b440:	e1500004 	cmp	r0, r4
    b444:	8affffe7 	bhi	b3e8 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]+0x34>
    b448:	e2877001 	add	r7, r7, #1
    b44c:	eaffffdf 	b	b3d0 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]+0x1c>

0000b450 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    b450:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b454:	e1a04000 	mov	r4, r0
    b458:	e1a05001 	mov	r5, r1
    b45c:	e1a07002 	mov	r7, r2
    b460:	e1a06003 	mov	r6, r3
    b464:	eb0016ac 	bl	10f1c <CDevice::CDevice()>
    b468:	e2840014 	add	r0, r4, #20
    b46c:	e5845004 	str	r5, [r4, #4]
    b470:	e302c700 	movw	ip, #9984	; 0x2700
    b474:	e340c001 	movt	ip, #1
    b478:	e584c000 	str	ip, [r4]
    b47c:	e3a05000 	mov	r5, #0
    b480:	e5847008 	str	r7, [r4, #8]
    b484:	e584600c 	str	r6, [r4, #12]
    b488:	e5845010 	str	r5, [r4, #16]
    b48c:	eb000440 	bl	c594 <CCharGenerator::CCharGenerator()>
    b490:	e3a03001 	mov	r3, #1
    b494:	e3e02020 	mvn	r2, #32
    b498:	e5845018 	str	r5, [r4, #24]
    b49c:	e5845030 	str	r5, [r4, #48]	; 0x30
    b4a0:	e1a01003 	mov	r1, r3
    b4a4:	e5845034 	str	r5, [r4, #52]	; 0x34
    b4a8:	e284005c 	add	r0, r4, #92	; 0x5c
    b4ac:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b4b0:	e5845040 	str	r5, [r4, #64]	; 0x40
    b4b4:	e584504c 	str	r5, [r4, #76]	; 0x4c
    b4b8:	e5845058 	str	r5, [r4, #88]	; 0x58
    b4bc:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
    b4c0:	e5843044 	str	r3, [r4, #68]	; 0x44
    b4c4:	eb0011d1 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
    b4c8:	e1a00004 	mov	r0, r4
    b4cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b4d0 <CScreenDevice::GetWidth() const>:
    b4d0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b4d4:	e12fff1e 	bx	lr

0000b4d8 <CScreenDevice::GetHeight() const>:
    b4d8:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b4dc:	e12fff1e 	bx	lr

0000b4e0 <CScreenDevice::GetColumns() const>:
    b4e0:	e1a03000 	mov	r3, r0
    b4e4:	e2800014 	add	r0, r0, #20
    b4e8:	e92d4010 	push	{r4, lr}
    b4ec:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    b4f0:	eb00042b 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    b4f4:	e730f014 	udiv	r0, r4, r0
    b4f8:	e8bd8010 	pop	{r4, pc}

0000b4fc <CScreenDevice::GetRows() const>:
    b4fc:	e1a03000 	mov	r3, r0
    b500:	e2800014 	add	r0, r0, #20
    b504:	e92d4010 	push	{r4, lr}
    b508:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    b50c:	eb000426 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    b510:	e730f014 	udiv	r0, r4, r0
    b514:	e8bd8010 	pop	{r4, pc}

0000b518 <CScreenDevice::GetStatus()>:
    b518:	e591c018 	ldr	ip, [r1, #24]
    b51c:	e591201c 	ldr	r2, [r1, #28]
    b520:	e92d4070 	push	{r4, r5, r6, lr}
    b524:	e580c000 	str	ip, [r0]
    b528:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    b52c:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    b530:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    b534:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    b538:	e5802004 	str	r2, [r0, #4]
    b53c:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    b540:	e5805008 	str	r5, [r0, #8]
    b544:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    b548:	e580400c 	str	r4, [r0, #12]
    b54c:	e1d154b8 	ldrh	r5, [r1, #72]	; 0x48
    b550:	e580e010 	str	lr, [r0, #16]
    b554:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    b558:	e580c014 	str	ip, [r0, #20]
    b55c:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    b560:	e5802018 	str	r2, [r0, #24]
    b564:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    b568:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    b56c:	e580601c 	str	r6, [r0, #28]
    b570:	e1c052b0 	strh	r5, [r0, #32]
    b574:	e5804024 	str	r4, [r0, #36]	; 0x24
    b578:	e580e028 	str	lr, [r0, #40]	; 0x28
    b57c:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    b580:	e5802030 	str	r2, [r0, #48]	; 0x30
    b584:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b588 <CScreenDevice::SetStatus(TScreenStatus)>:
    b588:	e24dd010 	sub	sp, sp, #16
    b58c:	e92d4070 	push	{r4, r5, r6, lr}
    b590:	e28dc014 	add	ip, sp, #20
    b594:	e88c000e 	stm	ip, {r1, r2, r3}
    b598:	e590201c 	ldr	r2, [r0, #28]
    b59c:	e59d3018 	ldr	r3, [sp, #24]
    b5a0:	e1520003 	cmp	r2, r3
    b5a4:	0a000003 	beq	b5b8 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    b5a8:	e3a00000 	mov	r0, #0
    b5ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    b5b0:	e28dd010 	add	sp, sp, #16
    b5b4:	e12fff1e 	bx	lr
    b5b8:	e5902020 	ldr	r2, [r0, #32]
    b5bc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b5c0:	e1520003 	cmp	r2, r3
    b5c4:	1afffff7 	bne	b5a8 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b5c8:	e1a04000 	mov	r4, r0
    b5cc:	e280505c 	add	r5, r0, #92	; 0x5c
    b5d0:	e1a00005 	mov	r0, r5
    b5d4:	eb0011a9 	bl	fc80 <CSpinLock::Acquire()>
    b5d8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    b5dc:	e3530000 	cmp	r3, #0
    b5e0:	1a000002 	bne	b5f0 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    b5e4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    b5e8:	e3530000 	cmp	r3, #0
    b5ec:	0a000003 	beq	b600 <CScreenDevice::SetStatus(TScreenStatus)+0x78>
    b5f0:	e1a00005 	mov	r0, r5
    b5f4:	eb0011bd 	bl	fcf0 <CSpinLock::Release()>
    b5f8:	e3a00000 	mov	r0, #0
    b5fc:	eaffffea 	b	b5ac <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    b600:	e594201c 	ldr	r2, [r4, #28]
    b604:	e59d1014 	ldr	r1, [sp, #20]
    b608:	e5940018 	ldr	r0, [r4, #24]
    b60c:	ebfffd72 	bl	abdc <memcpy>
    b610:	e28d2024 	add	r2, sp, #36	; 0x24
    b614:	e59dc01c 	ldr	ip, [sp, #28]
    b618:	e1a00005 	mov	r0, r5
    b61c:	e59d1020 	ldr	r1, [sp, #32]
    b620:	e892402c 	ldm	r2, {r2, r3, r5, lr}
    b624:	e584c030 	str	ip, [r4, #48]	; 0x30
    b628:	e5841034 	str	r1, [r4, #52]	; 0x34
    b62c:	e1ddc3b4 	ldrh	ip, [sp, #52]	; 0x34
    b630:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    b634:	e5842038 	str	r2, [r4, #56]	; 0x38
    b638:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b63c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    b640:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    b644:	e5845040 	str	r5, [r4, #64]	; 0x40
    b648:	e584e044 	str	lr, [r4, #68]	; 0x44
    b64c:	e1c4c4b8 	strh	ip, [r4, #72]	; 0x48
    b650:	e584104c 	str	r1, [r4, #76]	; 0x4c
    b654:	e5842050 	str	r2, [r4, #80]	; 0x50
    b658:	e5843054 	str	r3, [r4, #84]	; 0x54
    b65c:	eb0011a3 	bl	fcf0 <CSpinLock::Release()>
    b660:	f57ff05f 	dmb	sy
    b664:	e3a00001 	mov	r0, #1
    b668:	eaffffcf 	b	b5ac <CScreenDevice::SetStatus(TScreenStatus)+0x24>

0000b66c <CScreenDevice::CarriageReturn()>:
    b66c:	e3a03000 	mov	r3, #0
    b670:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b674:	e12fff1e 	bx	lr

0000b678 <CScreenDevice::CursorHome()>:
    b678:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b67c:	e3a02000 	mov	r2, #0
    b680:	e5803040 	str	r3, [r0, #64]	; 0x40
    b684:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b688:	e12fff1e 	bx	lr

0000b68c <CScreenDevice::CursorLeft()>:
    b68c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    b690:	e92d4070 	push	{r4, r5, r6, lr}
    b694:	e3530000 	cmp	r3, #0
    b698:	e1a04000 	mov	r4, r0
    b69c:	1a00000f 	bne	b6e0 <CScreenDevice::CursorLeft()+0x54>
    b6a0:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b6a4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b6a8:	e1520003 	cmp	r2, r3
    b6ac:	98bd8070 	popls	{r4, r5, r6, pc}
    b6b0:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    b6b4:	e2806014 	add	r6, r0, #20
    b6b8:	e1a00006 	mov	r0, r6
    b6bc:	eb0003b8 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    b6c0:	e0605005 	rsb	r5, r0, r5
    b6c4:	e1a00006 	mov	r0, r6
    b6c8:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b6cc:	eb0003b6 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    b6d0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b6d4:	e0600003 	rsb	r0, r0, r3
    b6d8:	e5840040 	str	r0, [r4, #64]	; 0x40
    b6dc:	e8bd8070 	pop	{r4, r5, r6, pc}
    b6e0:	e2800014 	add	r0, r0, #20
    b6e4:	eb0003ae 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    b6e8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b6ec:	e0600003 	rsb	r0, r0, r3
    b6f0:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b6f4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b6f8 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b6f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b6fc:	e1a04002 	mov	r4, r2
    b700:	e1a05000 	mov	r5, r0
    b704:	e2806014 	add	r6, r0, #20
    b708:	e2444001 	sub	r4, r4, #1
    b70c:	e1a00006 	mov	r0, r6
    b710:	e1a07001 	mov	r7, r1
    b714:	eb0003a2 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    b718:	e0040490 	mul	r4, r0, r4
    b71c:	e1a00006 	mov	r0, r6
    b720:	eb0003a1 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    b724:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b728:	e1540003 	cmp	r4, r3
    b72c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    b730:	e2477001 	sub	r7, r7, #1
    b734:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    b738:	e0000790 	mul	r0, r0, r7
    b73c:	e1500003 	cmp	r0, r3
    b740:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    b744:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    b748:	e1500003 	cmp	r0, r3
    b74c:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    b750:	35850040 	strcc	r0, [r5, #64]	; 0x40
    b754:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b758 <CScreenDevice::CursorUp()>:
    b758:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b75c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b760:	e1520003 	cmp	r2, r3
    b764:	912fff1e 	bxls	lr
    b768:	e92d4010 	push	{r4, lr}
    b76c:	e1a04000 	mov	r4, r0
    b770:	e2800014 	add	r0, r0, #20
    b774:	eb00038c 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    b778:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b77c:	e0600003 	rsb	r0, r0, r3
    b780:	e5840040 	str	r0, [r4, #64]	; 0x40
    b784:	e8bd8010 	pop	{r4, pc}

0000b788 <CScreenDevice::DeleteChars(unsigned int)>:
    b788:	e12fff1e 	bx	lr

0000b78c <CScreenDevice::DeleteLines(unsigned int)>:
    b78c:	e12fff1e 	bx	lr

0000b790 <CScreenDevice::InsertLines(unsigned int)>:
    b790:	e12fff1e 	bx	lr

0000b794 <CScreenDevice::InsertMode(int)>:
    b794:	e580104c 	str	r1, [r0, #76]	; 0x4c
    b798:	e12fff1e 	bx	lr

0000b79c <CScreenDevice::ReverseScroll()>:
    b79c:	e12fff1e 	bx	lr

0000b7a0 <CScreenDevice::SetCursorMode(int)>:
    b7a0:	e5801044 	str	r1, [r0, #68]	; 0x44
    b7a4:	e12fff1e 	bx	lr

0000b7a8 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    b7a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b7ac:	e1a04001 	mov	r4, r1
    b7b0:	e1a06000 	mov	r6, r0
    b7b4:	e2807014 	add	r7, r0, #20
    b7b8:	e2444001 	sub	r4, r4, #1
    b7bc:	e1a05002 	mov	r5, r2
    b7c0:	e1a00007 	mov	r0, r7
    b7c4:	eb000378 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    b7c8:	e0040490 	mul	r4, r0, r4
    b7cc:	e1a00007 	mov	r0, r7
    b7d0:	eb000375 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    b7d4:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    b7d8:	e0000095 	mul	r0, r5, r0
    b7dc:	e3500000 	cmp	r0, #0
    b7e0:	11540002 	cmpne	r4, r2
    b7e4:	33a03001 	movcc	r3, #1
    b7e8:	23a03000 	movcs	r3, #0
    b7ec:	e1500002 	cmp	r0, r2
    b7f0:	83a03000 	movhi	r3, #0
    b7f4:	92033001 	andls	r3, r3, #1
    b7f8:	e1540000 	cmp	r4, r0
    b7fc:	23a03000 	movcs	r3, #0
    b800:	32033001 	andcc	r3, r3, #1
    b804:	e3530000 	cmp	r3, #0
    b808:	e3a03000 	mov	r3, #0
    b80c:	15864034 	strne	r4, [r6, #52]	; 0x34
    b810:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    b814:	15860038 	strne	r0, [r6, #56]	; 0x38
    b818:	e5864040 	str	r4, [r6, #64]	; 0x40
    b81c:	e586303c 	str	r3, [r6, #60]	; 0x3c
    b820:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b824 <CScreenDevice::SetStandoutMode(unsigned int)>:
    b824:	e351001b 	cmp	r1, #27
    b828:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    b82c:	ea00001d 	b	b8a8 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    b830:	0000b8b8 	.word	0x0000b8b8
    b834:	0000b8ac 	.word	0x0000b8ac
    b838:	0000b8a0 	.word	0x0000b8a0
    b83c:	0000b8a8 	.word	0x0000b8a8
    b840:	0000b8a8 	.word	0x0000b8a8
    b844:	0000b8a8 	.word	0x0000b8a8
    b848:	0000b8a8 	.word	0x0000b8a8
    b84c:	0000b8a8 	.word	0x0000b8a8
    b850:	0000b8a8 	.word	0x0000b8a8
    b854:	0000b8a8 	.word	0x0000b8a8
    b858:	0000b8a8 	.word	0x0000b8a8
    b85c:	0000b8a8 	.word	0x0000b8a8
    b860:	0000b8a8 	.word	0x0000b8a8
    b864:	0000b8a8 	.word	0x0000b8a8
    b868:	0000b8a8 	.word	0x0000b8a8
    b86c:	0000b8a8 	.word	0x0000b8a8
    b870:	0000b8a8 	.word	0x0000b8a8
    b874:	0000b8a8 	.word	0x0000b8a8
    b878:	0000b8a8 	.word	0x0000b8a8
    b87c:	0000b8a8 	.word	0x0000b8a8
    b880:	0000b8a8 	.word	0x0000b8a8
    b884:	0000b8a8 	.word	0x0000b8a8
    b888:	0000b8a8 	.word	0x0000b8a8
    b88c:	0000b8a8 	.word	0x0000b8a8
    b890:	0000b8a8 	.word	0x0000b8a8
    b894:	0000b8a8 	.word	0x0000b8a8
    b898:	0000b8a8 	.word	0x0000b8a8
    b89c:	0000b8b8 	.word	0x0000b8b8
    b8a0:	e3a0301f 	mov	r3, #31
    b8a4:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b8a8:	e12fff1e 	bx	lr
    b8ac:	e3a03b3e 	mov	r3, #63488	; 0xf800
    b8b0:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b8b4:	e12fff1e 	bx	lr
    b8b8:	e3e03020 	mvn	r3, #32
    b8bc:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b8c0:	e12fff1e 	bx	lr

0000b8c4 <CScreenDevice::Scroll()>:
    b8c4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b8c8:	e1a07000 	mov	r7, r0
    b8cc:	e2800014 	add	r0, r0, #20
    b8d0:	eb000335 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    b8d4:	e1a06000 	mov	r6, r0
    b8d8:	e5972034 	ldr	r2, [r7, #52]	; 0x34
    b8dc:	e5975020 	ldr	r5, [r7, #32]
    b8e0:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    b8e4:	e5978018 	ldr	r8, [r7, #24]
    b8e8:	e0624004 	rsb	r4, r2, r4
    b8ec:	e1a03085 	lsl	r3, r5, #1
    b8f0:	e0604004 	rsb	r4, r0, r4
    b8f4:	e0050295 	mul	r5, r5, r2
    b8f8:	e0040493 	mul	r4, r3, r4
    b8fc:	e3540000 	cmp	r4, #0
    b900:	e0885085 	add	r5, r8, r5, lsl #1
    b904:	1a000007 	bne	b928 <CScreenDevice::Scroll()+0x64>
    b908:	e0030693 	mul	r3, r3, r6
    b90c:	e1b02123 	lsrs	r2, r3, #2
    b910:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b914:	e1a00005 	mov	r0, r5
    b918:	e1a02102 	lsl	r2, r2, #2
    b91c:	e3a01000 	mov	r1, #0
    b920:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b924:	eafffb93 	b	a778 <memset>
    b928:	e0801002 	add	r1, r0, r2
    b92c:	e3c4900f 	bic	r9, r4, #15
    b930:	e1a02009 	mov	r2, r9
    b934:	e1a00005 	mov	r0, r5
    b938:	e0288193 	mla	r8, r3, r1, r8
    b93c:	e1a01008 	mov	r1, r8
    b940:	ebfffca5 	bl	abdc <memcpy>
    b944:	e204200e 	and	r2, r4, #14
    b948:	e0850009 	add	r0, r5, r9
    b94c:	e0881009 	add	r1, r8, r9
    b950:	ebfffca1 	bl	abdc <memcpy>
    b954:	e5972020 	ldr	r2, [r7, #32]
    b958:	e3c44003 	bic	r4, r4, #3
    b95c:	e0855004 	add	r5, r5, r4
    b960:	e1a03082 	lsl	r3, r2, #1
    b964:	eaffffe7 	b	b908 <CScreenDevice::Scroll()+0x44>

0000b968 <CScreenDevice::CursorDown()>:
    b968:	e92d4070 	push	{r4, r5, r6, lr}
    b96c:	e1a04000 	mov	r4, r0
    b970:	e2805014 	add	r5, r0, #20
    b974:	e1a00005 	mov	r0, r5
    b978:	eb00030b 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    b97c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b980:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    b984:	e0800003 	add	r0, r0, r3
    b988:	e5840040 	str	r0, [r4, #64]	; 0x40
    b98c:	e1500002 	cmp	r0, r2
    b990:	38bd8070 	popcc	{r4, r5, r6, pc}
    b994:	e1a00004 	mov	r0, r4
    b998:	ebffffc9 	bl	b8c4 <CScreenDevice::Scroll()>
    b99c:	e1a00005 	mov	r0, r5
    b9a0:	eb000301 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    b9a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b9a8:	e0600003 	rsb	r0, r0, r3
    b9ac:	e5840040 	str	r0, [r4, #64]	; 0x40
    b9b0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b9b4 <CScreenDevice::NewLine()>:
    b9b4:	e3a02000 	mov	r2, #0
    b9b8:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b9bc:	eaffffe9 	b	b968 <CScreenDevice::CursorDown()>

0000b9c0 <CScreenDevice::CursorRight()>:
    b9c0:	e92d4010 	push	{r4, lr}
    b9c4:	e1a04000 	mov	r4, r0
    b9c8:	e2800014 	add	r0, r0, #20
    b9cc:	eb0002f4 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    b9d0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b9d4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    b9d8:	e0800003 	add	r0, r0, r3
    b9dc:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b9e0:	e1500002 	cmp	r0, r2
    b9e4:	38bd8010 	popcc	{r4, pc}
    b9e8:	e3a03000 	mov	r3, #0
    b9ec:	e1a00004 	mov	r0, r4
    b9f0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b9f4:	e8bd4010 	pop	{r4, lr}
    b9f8:	eaffffda 	b	b968 <CScreenDevice::CursorDown()>

0000b9fc <CScreenDevice::Tabulator()>:
    b9fc:	e92d4010 	push	{r4, lr}
    ba00:	e1a04000 	mov	r4, r0
    ba04:	e2800014 	add	r0, r0, #20
    ba08:	eb0002e5 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    ba0c:	e1a00180 	lsl	r0, r0, #3
    ba10:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    ba14:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    ba18:	e0803003 	add	r3, r0, r3
    ba1c:	e733f013 	udiv	r3, r3, r0
    ba20:	e0000390 	mul	r0, r0, r3
    ba24:	e584003c 	str	r0, [r4, #60]	; 0x3c
    ba28:	e1500002 	cmp	r0, r2
    ba2c:	38bd8010 	popcc	{r4, pc}
    ba30:	e3a03000 	mov	r3, #0
    ba34:	e1a00004 	mov	r0, r4
    ba38:	e584303c 	str	r3, [r4, #60]	; 0x3c
    ba3c:	e8bd4010 	pop	{r4, lr}
    ba40:	eaffffc8 	b	b968 <CScreenDevice::CursorDown()>

0000ba44 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    ba44:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba48:	e2806014 	add	r6, r0, #20
    ba4c:	e1a07000 	mov	r7, r0
    ba50:	e24dd00c 	sub	sp, sp, #12
    ba54:	e3a08000 	mov	r8, #0
    ba58:	e1a00006 	mov	r0, r6
    ba5c:	e1a0a001 	mov	sl, r1
    ba60:	e1a09002 	mov	r9, r2
    ba64:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    ba68:	e58d3004 	str	r3, [sp, #4]
    ba6c:	eb0002ce 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    ba70:	e1580000 	cmp	r8, r0
    ba74:	2a000024 	bcs	bb0c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
    ba78:	e59d3004 	ldr	r3, [sp, #4]
    ba7c:	e3a04000 	mov	r4, #0
    ba80:	e0883003 	add	r3, r8, r3
    ba84:	e58d3000 	str	r3, [sp]
    ba88:	e1a00006 	mov	r0, r6
    ba8c:	e0845009 	add	r5, r4, r9
    ba90:	eb0002c3 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    ba94:	e1540000 	cmp	r4, r0
    ba98:	e1a02004 	mov	r2, r4
    ba9c:	e1a03008 	mov	r3, r8
    baa0:	e1a0100a 	mov	r1, sl
    baa4:	e1a00006 	mov	r0, r6
    baa8:	e2844001 	add	r4, r4, #1
    baac:	2a000011 	bcs	baf8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>
    bab0:	eb0002c1 	bl	c5bc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    bab4:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    bab8:	e3500000 	cmp	r0, #0
    babc:	11a0200b 	movne	r2, fp
    bac0:	03a02000 	moveq	r2, #0
    bac4:	e1550003 	cmp	r5, r3
    bac8:	2affffee 	bcs	ba88 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    bacc:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    bad0:	e59d1000 	ldr	r1, [sp]
    bad4:	e1510003 	cmp	r1, r3
    bad8:	2affffea 	bcs	ba88 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    badc:	e5973020 	ldr	r3, [r7, #32]
    bae0:	e59d0000 	ldr	r0, [sp]
    bae4:	e5971018 	ldr	r1, [r7, #24]
    bae8:	e0255093 	mla	r5, r3, r0, r5
    baec:	e1a05085 	lsl	r5, r5, #1
    baf0:	e18120b5 	strh	r2, [r1, r5]
    baf4:	eaffffe3 	b	ba88 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    baf8:	e2888001 	add	r8, r8, #1
    bafc:	e1a00006 	mov	r0, r6
    bb00:	eb0002a9 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    bb04:	e1580000 	cmp	r8, r0
    bb08:	3affffda 	bcc	ba78 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    bb0c:	e28dd00c 	add	sp, sp, #12
    bb10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bb14 <CScreenDevice::DisplayChar(char)>:
    bb14:	e6ef3071 	uxtb	r3, r1
    bb18:	e353001f 	cmp	r3, #31
    bb1c:	912fff1e 	bxls	lr
    bb20:	e92d4010 	push	{r4, lr}
    bb24:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    bb28:	e1a04000 	mov	r4, r0
    bb2c:	e24dd008 	sub	sp, sp, #8
    bb30:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    bb34:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    bb38:	e58dc000 	str	ip, [sp]
    bb3c:	ebffffc0 	bl	ba44 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    bb40:	e1a00004 	mov	r0, r4
    bb44:	e28dd008 	add	sp, sp, #8
    bb48:	e8bd4010 	pop	{r4, lr}
    bb4c:	eaffff9b 	b	b9c0 <CScreenDevice::CursorRight()>

0000bb50 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    bb50:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb54:	e3a08000 	mov	r8, #0
    bb58:	e1a0b000 	mov	fp, r0
    bb5c:	e1a06001 	mov	r6, r1
    bb60:	e1a0a002 	mov	sl, r2
    bb64:	e2805014 	add	r5, r0, #20
    bb68:	e1a09008 	mov	r9, r8
    bb6c:	e1a00005 	mov	r0, r5
    bb70:	eb00028d 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    bb74:	e1580000 	cmp	r8, r0
    bb78:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb7c:	e3a04000 	mov	r4, #0
    bb80:	e088700a 	add	r7, r8, sl
    bb84:	e1a00005 	mov	r0, r5
    bb88:	eb000285 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    bb8c:	e1540000 	cmp	r4, r0
    bb90:	e0843006 	add	r3, r4, r6
    bb94:	e2844001 	add	r4, r4, #1
    bb98:	2a00000b 	bcs	bbcc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    bb9c:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    bba0:	e1530002 	cmp	r3, r2
    bba4:	2afffff6 	bcs	bb84 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    bba8:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    bbac:	e1570002 	cmp	r7, r2
    bbb0:	2afffff3 	bcs	bb84 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    bbb4:	e59b2020 	ldr	r2, [fp, #32]
    bbb8:	e59b1018 	ldr	r1, [fp, #24]
    bbbc:	e0233792 	mla	r3, r2, r7, r3
    bbc0:	e1a03083 	lsl	r3, r3, #1
    bbc4:	e18190b3 	strh	r9, [r1, r3]
    bbc8:	eaffffed 	b	bb84 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    bbcc:	e2888001 	add	r8, r8, #1
    bbd0:	eaffffe5 	b	bb6c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000bbd4 <CScreenDevice::ClearLineEnd()>:
    bbd4:	e92d4070 	push	{r4, r5, r6, lr}
    bbd8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bbdc:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    bbe0:	e1540003 	cmp	r4, r3
    bbe4:	28bd8070 	popcs	{r4, r5, r6, pc}
    bbe8:	e1a05000 	mov	r5, r0
    bbec:	e2806014 	add	r6, r0, #20
    bbf0:	e1a01004 	mov	r1, r4
    bbf4:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bbf8:	e1a00005 	mov	r0, r5
    bbfc:	ebffffd3 	bl	bb50 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bc00:	e1a00006 	mov	r0, r6
    bc04:	eb000266 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    bc08:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bc0c:	e0844000 	add	r4, r4, r0
    bc10:	e1530004 	cmp	r3, r4
    bc14:	8afffff5 	bhi	bbf0 <CScreenDevice::ClearLineEnd()+0x1c>
    bc18:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bc1c <CScreenDevice::EraseChars(unsigned int) [clone .part.4] [clone .constprop.8]>:
    bc1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bc20:	e1a05000 	mov	r5, r0
    bc24:	e1a07001 	mov	r7, r1
    bc28:	e2808014 	add	r8, r0, #20
    bc2c:	e1a00008 	mov	r0, r8
    bc30:	e595603c 	ldr	r6, [r5, #60]	; 0x3c
    bc34:	eb00025a 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    bc38:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bc3c:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    bc40:	e0206097 	mla	r0, r7, r0, r6
    bc44:	e1500003 	cmp	r0, r3
    bc48:	31a06000 	movcc	r6, r0
    bc4c:	21a06003 	movcs	r6, r3
    bc50:	e1540006 	cmp	r4, r6
    bc54:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    bc58:	e1a01004 	mov	r1, r4
    bc5c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bc60:	e1a00005 	mov	r0, r5
    bc64:	ebffffb9 	bl	bb50 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bc68:	e1a00008 	mov	r0, r8
    bc6c:	eb00024c 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    bc70:	e0844000 	add	r4, r4, r0
    bc74:	e1540006 	cmp	r4, r6
    bc78:	3afffff6 	bcc	bc58 <CScreenDevice::EraseChars(unsigned int) [clone .part.4] [clone .constprop.8]+0x3c>
    bc7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bc80 <CScreenDevice::EraseChars(unsigned int)>:
    bc80:	e3510000 	cmp	r1, #0
    bc84:	012fff1e 	bxeq	lr
    bc88:	eaffffe3 	b	bc1c <CScreenDevice::EraseChars(unsigned int) [clone .part.4] [clone .constprop.8]>

0000bc8c <CScreenDevice::ClearDisplayEnd()>:
    bc8c:	e92d4070 	push	{r4, r5, r6, lr}
    bc90:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bc94:	e1a05000 	mov	r5, r0
    bc98:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    bc9c:	e2806014 	add	r6, r0, #20
    bca0:	e1540003 	cmp	r4, r3
    bca4:	2a000009 	bcs	bcd0 <CScreenDevice::ClearDisplayEnd()+0x44>
    bca8:	e1a01004 	mov	r1, r4
    bcac:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bcb0:	e1a00005 	mov	r0, r5
    bcb4:	ebffffa5 	bl	bb50 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bcb8:	e1a00006 	mov	r0, r6
    bcbc:	eb000238 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    bcc0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bcc4:	e0844000 	add	r4, r4, r0
    bcc8:	e1530004 	cmp	r3, r4
    bccc:	8afffff5 	bhi	bca8 <CScreenDevice::ClearDisplayEnd()+0x1c>
    bcd0:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    bcd4:	e1a00006 	mov	r0, r6
    bcd8:	eb000233 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    bcdc:	e5953020 	ldr	r3, [r5, #32]
    bce0:	e0840000 	add	r0, r4, r0
    bce4:	e595201c 	ldr	r2, [r5, #28]
    bce8:	e5951018 	ldr	r1, [r5, #24]
    bcec:	e0000093 	mul	r0, r3, r0
    bcf0:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    bcf4:	0a000004 	beq	bd0c <CScreenDevice::ClearDisplayEnd()+0x80>
    bcf8:	e0810080 	add	r0, r1, r0, lsl #1
    bcfc:	e1a02082 	lsl	r2, r2, #1
    bd00:	e3a01000 	mov	r1, #0
    bd04:	e8bd4070 	pop	{r4, r5, r6, lr}
    bd08:	eafffa9a 	b	a778 <memset>
    bd0c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bd10 <CScreenDevice::Write(char)>:
    bd10:	e92d4010 	push	{r4, lr}
    bd14:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    bd18:	e1a04000 	mov	r4, r0
    bd1c:	e24dd008 	sub	sp, sp, #8
    bd20:	e3530007 	cmp	r3, #7
    bd24:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bd28:	ea000010 	b	bd70 <CScreenDevice::Write(char)+0x60>
    bd2c:	0000bdc4 	.word	0x0000bdc4
    bd30:	0000be24 	.word	0x0000be24
    bd34:	0000be40 	.word	0x0000be40
    bd38:	0000be98 	.word	0x0000be98
    bd3c:	0000bf74 	.word	0x0000bf74
    bd40:	0000bf94 	.word	0x0000bf94
    bd44:	0000bfb4 	.word	0x0000bfb4
    bd48:	0000bd80 	.word	0x0000bd80
    bd4c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    bd50:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bd54:	e1520003 	cmp	r2, r3
    bd58:	9a000004 	bls	bd70 <CScreenDevice::Write(char)+0x60>
    bd5c:	e2800014 	add	r0, r0, #20
    bd60:	eb000211 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    bd64:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bd68:	e0600003 	rsb	r0, r0, r3
    bd6c:	e5840040 	str	r0, [r4, #64]	; 0x40
    bd70:	e3a03000 	mov	r3, #0
    bd74:	e5843030 	str	r3, [r4, #48]	; 0x30
    bd78:	e28dd008 	add	sp, sp, #8
    bd7c:	e8bd8010 	pop	{r4, pc}
    bd80:	e3510068 	cmp	r1, #104	; 0x68
    bd84:	0a00009b 	beq	bff8 <CScreenDevice::Write(char)+0x2e8>
    bd88:	e351006c 	cmp	r1, #108	; 0x6c
    bd8c:	0a000099 	beq	bff8 <CScreenDevice::Write(char)+0x2e8>
    bd90:	e2413030 	sub	r3, r1, #48	; 0x30
    bd94:	e6ef3073 	uxtb	r3, r3
    bd98:	e3530009 	cmp	r3, #9
    bd9c:	8afffff3 	bhi	bd70 <CScreenDevice::Write(char)+0x60>
    bda0:	e5942050 	ldr	r2, [r4, #80]	; 0x50
    bda4:	e1a03182 	lsl	r3, r2, #3
    bda8:	e0833082 	add	r3, r3, r2, lsl #1
    bdac:	e2433030 	sub	r3, r3, #48	; 0x30
    bdb0:	e0831001 	add	r1, r3, r1
    bdb4:	e5841050 	str	r1, [r4, #80]	; 0x50
    bdb8:	e3510063 	cmp	r1, #99	; 0x63
    bdbc:	8affffeb 	bhi	bd70 <CScreenDevice::Write(char)+0x60>
    bdc0:	eaffffec 	b	bd78 <CScreenDevice::Write(char)+0x68>
    bdc4:	e2413008 	sub	r3, r1, #8
    bdc8:	e3530013 	cmp	r3, #19
    bdcc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bdd0:	ea0000ee 	b	c190 <CScreenDevice::Write(char)+0x480>
    bdd4:	0000c064 	.word	0x0000c064
    bdd8:	0000c058 	.word	0x0000c058
    bddc:	0000c044 	.word	0x0000c044
    bde0:	0000c190 	.word	0x0000c190
    bde4:	0000c190 	.word	0x0000c190
    bde8:	0000c038 	.word	0x0000c038
    bdec:	0000c190 	.word	0x0000c190
    bdf0:	0000c190 	.word	0x0000c190
    bdf4:	0000c190 	.word	0x0000c190
    bdf8:	0000c190 	.word	0x0000c190
    bdfc:	0000c190 	.word	0x0000c190
    be00:	0000c190 	.word	0x0000c190
    be04:	0000c190 	.word	0x0000c190
    be08:	0000c190 	.word	0x0000c190
    be0c:	0000c190 	.word	0x0000c190
    be10:	0000c190 	.word	0x0000c190
    be14:	0000c190 	.word	0x0000c190
    be18:	0000c190 	.word	0x0000c190
    be1c:	0000c190 	.word	0x0000c190
    be20:	0000c02c 	.word	0x0000c02c
    be24:	e351004d 	cmp	r1, #77	; 0x4d
    be28:	0affffd0 	beq	bd70 <CScreenDevice::Write(char)+0x60>
    be2c:	e351005b 	cmp	r1, #91	; 0x5b
    be30:	03a03002 	moveq	r3, #2
    be34:	05803030 	streq	r3, [r0, #48]	; 0x30
    be38:	0affffce 	beq	bd78 <CScreenDevice::Write(char)+0x68>
    be3c:	eaffffcb 	b	bd70 <CScreenDevice::Write(char)+0x60>
    be40:	e241303f 	sub	r3, r1, #63	; 0x3f
    be44:	e3530011 	cmp	r3, #17
    be48:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    be4c:	ea0000db 	b	c1c0 <CScreenDevice::Write(char)+0x4b0>
    be50:	0000c14c 	.word	0x0000c14c
    be54:	0000c1c0 	.word	0x0000c1c0
    be58:	0000bd4c 	.word	0x0000bd4c
    be5c:	0000c180 	.word	0x0000c180
    be60:	0000c170 	.word	0x0000c170
    be64:	0000c1c0 	.word	0x0000c1c0
    be68:	0000c1c0 	.word	0x0000c1c0
    be6c:	0000c1c0 	.word	0x0000c1c0
    be70:	0000c1c0 	.word	0x0000c1c0
    be74:	0000c158 	.word	0x0000c158
    be78:	0000c1c0 	.word	0x0000c1c0
    be7c:	0000c13c 	.word	0x0000c13c
    be80:	0000c12c 	.word	0x0000c12c
    be84:	0000bd70 	.word	0x0000bd70
    be88:	0000bd70 	.word	0x0000bd70
    be8c:	0000c1c0 	.word	0x0000c1c0
    be90:	0000c1c0 	.word	0x0000c1c0
    be94:	0000bd70 	.word	0x0000bd70
    be98:	e241303b 	sub	r3, r1, #59	; 0x3b
    be9c:	e3530032 	cmp	r3, #50	; 0x32
    bea0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bea4:	eaffffb9 	b	bd90 <CScreenDevice::Write(char)+0x80>
    bea8:	0000c120 	.word	0x0000c120
    beac:	0000bd90 	.word	0x0000bd90
    beb0:	0000bd90 	.word	0x0000bd90
    beb4:	0000bd90 	.word	0x0000bd90
    beb8:	0000bd90 	.word	0x0000bd90
    bebc:	0000bd90 	.word	0x0000bd90
    bec0:	0000bd90 	.word	0x0000bd90
    bec4:	0000bd90 	.word	0x0000bd90
    bec8:	0000bd90 	.word	0x0000bd90
    becc:	0000bd90 	.word	0x0000bd90
    bed0:	0000bd90 	.word	0x0000bd90
    bed4:	0000bd90 	.word	0x0000bd90
    bed8:	0000bd90 	.word	0x0000bd90
    bedc:	0000bd90 	.word	0x0000bd90
    bee0:	0000bd90 	.word	0x0000bd90
    bee4:	0000bd90 	.word	0x0000bd90
    bee8:	0000bd90 	.word	0x0000bd90
    beec:	0000bd70 	.word	0x0000bd70
    bef0:	0000bd70 	.word	0x0000bd70
    bef4:	0000bd90 	.word	0x0000bd90
    bef8:	0000bd90 	.word	0x0000bd90
    befc:	0000bd70 	.word	0x0000bd70
    bf00:	0000bd90 	.word	0x0000bd90
    bf04:	0000bd90 	.word	0x0000bd90
    bf08:	0000bd90 	.word	0x0000bd90
    bf0c:	0000bd90 	.word	0x0000bd90
    bf10:	0000bd90 	.word	0x0000bd90
    bf14:	0000bd90 	.word	0x0000bd90
    bf18:	0000bd90 	.word	0x0000bd90
    bf1c:	0000c070 	.word	0x0000c070
    bf20:	0000bd90 	.word	0x0000bd90
    bf24:	0000bd90 	.word	0x0000bd90
    bf28:	0000bd90 	.word	0x0000bd90
    bf2c:	0000bd90 	.word	0x0000bd90
    bf30:	0000bd90 	.word	0x0000bd90
    bf34:	0000bd90 	.word	0x0000bd90
    bf38:	0000bd90 	.word	0x0000bd90
    bf3c:	0000bd90 	.word	0x0000bd90
    bf40:	0000bd90 	.word	0x0000bd90
    bf44:	0000bd90 	.word	0x0000bd90
    bf48:	0000bd90 	.word	0x0000bd90
    bf4c:	0000bd90 	.word	0x0000bd90
    bf50:	0000bd90 	.word	0x0000bd90
    bf54:	0000bd90 	.word	0x0000bd90
    bf58:	0000bd90 	.word	0x0000bd90
    bf5c:	0000c084 	.word	0x0000c084
    bf60:	0000bd90 	.word	0x0000bd90
    bf64:	0000bd90 	.word	0x0000bd90
    bf68:	0000bd90 	.word	0x0000bd90
    bf6c:	0000c084 	.word	0x0000c084
    bf70:	0000c0a0 	.word	0x0000c0a0
    bf74:	e2411030 	sub	r1, r1, #48	; 0x30
    bf78:	e6ef3071 	uxtb	r3, r1
    bf7c:	e3530009 	cmp	r3, #9
    bf80:	8affff7a 	bhi	bd70 <CScreenDevice::Write(char)+0x60>
    bf84:	e3a03007 	mov	r3, #7
    bf88:	e5801050 	str	r1, [r0, #80]	; 0x50
    bf8c:	e5803030 	str	r3, [r0, #48]	; 0x30
    bf90:	eaffff78 	b	bd78 <CScreenDevice::Write(char)+0x68>
    bf94:	e2411030 	sub	r1, r1, #48	; 0x30
    bf98:	e6ef3071 	uxtb	r3, r1
    bf9c:	e3530009 	cmp	r3, #9
    bfa0:	8affff72 	bhi	bd70 <CScreenDevice::Write(char)+0x60>
    bfa4:	e3a03006 	mov	r3, #6
    bfa8:	e5801054 	str	r1, [r0, #84]	; 0x54
    bfac:	e5803030 	str	r3, [r0, #48]	; 0x30
    bfb0:	eaffff70 	b	bd78 <CScreenDevice::Write(char)+0x68>
    bfb4:	e3510048 	cmp	r1, #72	; 0x48
    bfb8:	0a000091 	beq	c204 <CScreenDevice::Write(char)+0x4f4>
    bfbc:	e3510072 	cmp	r1, #114	; 0x72
    bfc0:	0a000013 	beq	c014 <CScreenDevice::Write(char)+0x304>
    bfc4:	e2413030 	sub	r3, r1, #48	; 0x30
    bfc8:	e6ef3073 	uxtb	r3, r3
    bfcc:	e3530009 	cmp	r3, #9
    bfd0:	8affff66 	bhi	bd70 <CScreenDevice::Write(char)+0x60>
    bfd4:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    bfd8:	e1a03182 	lsl	r3, r2, #3
    bfdc:	e0833082 	add	r3, r3, r2, lsl #1
    bfe0:	e2433030 	sub	r3, r3, #48	; 0x30
    bfe4:	e0831001 	add	r1, r3, r1
    bfe8:	e5801054 	str	r1, [r0, #84]	; 0x54
    bfec:	e35100c7 	cmp	r1, #199	; 0xc7
    bff0:	8affff5e 	bhi	bd70 <CScreenDevice::Write(char)+0x60>
    bff4:	eaffff5f 	b	bd78 <CScreenDevice::Write(char)+0x68>
    bff8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    bffc:	e3530019 	cmp	r3, #25
    c000:	02411068 	subeq	r1, r1, #104	; 0x68
    c004:	016f1f11 	clzeq	r1, r1
    c008:	01a012a1 	lsreq	r1, r1, #5
    c00c:	05841044 	streq	r1, [r4, #68]	; 0x44
    c010:	eaffff56 	b	bd70 <CScreenDevice::Write(char)+0x60>
    c014:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c018:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c01c:	ebfffde1 	bl	b7a8 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    c020:	e3a03000 	mov	r3, #0
    c024:	e5843030 	str	r3, [r4, #48]	; 0x30
    c028:	eaffff52 	b	bd78 <CScreenDevice::Write(char)+0x68>
    c02c:	e3a03001 	mov	r3, #1
    c030:	e5803030 	str	r3, [r0, #48]	; 0x30
    c034:	eaffff4f 	b	bd78 <CScreenDevice::Write(char)+0x68>
    c038:	e3a03000 	mov	r3, #0
    c03c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c040:	eaffff4c 	b	bd78 <CScreenDevice::Write(char)+0x68>
    c044:	e3a03000 	mov	r3, #0
    c048:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c04c:	e28dd008 	add	sp, sp, #8
    c050:	e8bd4010 	pop	{r4, lr}
    c054:	eafffe43 	b	b968 <CScreenDevice::CursorDown()>
    c058:	e28dd008 	add	sp, sp, #8
    c05c:	e8bd4010 	pop	{r4, lr}
    c060:	eafffe65 	b	b9fc <CScreenDevice::Tabulator()>
    c064:	e28dd008 	add	sp, sp, #8
    c068:	e8bd4010 	pop	{r4, lr}
    c06c:	eafffd86 	b	b68c <CScreenDevice::CursorLeft()>
    c070:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c074:	e3510000 	cmp	r1, #0
    c078:	0affff3c 	beq	bd70 <CScreenDevice::Write(char)+0x60>
    c07c:	ebfffee6 	bl	bc1c <CScreenDevice::EraseChars(unsigned int) [clone .part.4] [clone .constprop.8]>
    c080:	eaffff3a 	b	bd70 <CScreenDevice::Write(char)+0x60>
    c084:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c088:	e3530004 	cmp	r3, #4
    c08c:	02411068 	subeq	r1, r1, #104	; 0x68
    c090:	016f1f11 	clzeq	r1, r1
    c094:	01a012a1 	lsreq	r1, r1, #5
    c098:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    c09c:	eaffff33 	b	bd70 <CScreenDevice::Write(char)+0x60>
    c0a0:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c0a4:	e353001b 	cmp	r3, #27
    c0a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c0ac:	eaffff2f 	b	bd70 <CScreenDevice::Write(char)+0x60>
    c0b0:	0000c1f8 	.word	0x0000c1f8
    c0b4:	0000c1ec 	.word	0x0000c1ec
    c0b8:	0000c1e0 	.word	0x0000c1e0
    c0bc:	0000bd70 	.word	0x0000bd70
    c0c0:	0000bd70 	.word	0x0000bd70
    c0c4:	0000bd70 	.word	0x0000bd70
    c0c8:	0000bd70 	.word	0x0000bd70
    c0cc:	0000bd70 	.word	0x0000bd70
    c0d0:	0000bd70 	.word	0x0000bd70
    c0d4:	0000bd70 	.word	0x0000bd70
    c0d8:	0000bd70 	.word	0x0000bd70
    c0dc:	0000bd70 	.word	0x0000bd70
    c0e0:	0000bd70 	.word	0x0000bd70
    c0e4:	0000bd70 	.word	0x0000bd70
    c0e8:	0000bd70 	.word	0x0000bd70
    c0ec:	0000bd70 	.word	0x0000bd70
    c0f0:	0000bd70 	.word	0x0000bd70
    c0f4:	0000bd70 	.word	0x0000bd70
    c0f8:	0000bd70 	.word	0x0000bd70
    c0fc:	0000bd70 	.word	0x0000bd70
    c100:	0000bd70 	.word	0x0000bd70
    c104:	0000bd70 	.word	0x0000bd70
    c108:	0000bd70 	.word	0x0000bd70
    c10c:	0000bd70 	.word	0x0000bd70
    c110:	0000bd70 	.word	0x0000bd70
    c114:	0000bd70 	.word	0x0000bd70
    c118:	0000bd70 	.word	0x0000bd70
    c11c:	0000c1f8 	.word	0x0000c1f8
    c120:	e3a03005 	mov	r3, #5
    c124:	e5803030 	str	r3, [r0, #48]	; 0x30
    c128:	eaffff12 	b	bd78 <CScreenDevice::Write(char)+0x68>
    c12c:	ebfffea8 	bl	bbd4 <CScreenDevice::ClearLineEnd()>
    c130:	e3a03000 	mov	r3, #0
    c134:	e5843030 	str	r3, [r4, #48]	; 0x30
    c138:	eaffff0e 	b	bd78 <CScreenDevice::Write(char)+0x68>
    c13c:	ebfffed2 	bl	bc8c <CScreenDevice::ClearDisplayEnd()>
    c140:	e3a03000 	mov	r3, #0
    c144:	e5843030 	str	r3, [r4, #48]	; 0x30
    c148:	eaffff0a 	b	bd78 <CScreenDevice::Write(char)+0x68>
    c14c:	e3a03004 	mov	r3, #4
    c150:	e5803030 	str	r3, [r0, #48]	; 0x30
    c154:	eaffff07 	b	bd78 <CScreenDevice::Write(char)+0x68>
    c158:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c15c:	e3a03000 	mov	r3, #0
    c160:	e5802040 	str	r2, [r0, #64]	; 0x40
    c164:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c168:	e5803030 	str	r3, [r0, #48]	; 0x30
    c16c:	eaffff01 	b	bd78 <CScreenDevice::Write(char)+0x68>
    c170:	ebfffe12 	bl	b9c0 <CScreenDevice::CursorRight()>
    c174:	e3a03000 	mov	r3, #0
    c178:	e5843030 	str	r3, [r4, #48]	; 0x30
    c17c:	eafffefd 	b	bd78 <CScreenDevice::Write(char)+0x68>
    c180:	ebfffdf8 	bl	b968 <CScreenDevice::CursorDown()>
    c184:	e3a03000 	mov	r3, #0
    c188:	e5843030 	str	r3, [r4, #48]	; 0x30
    c18c:	eafffef9 	b	bd78 <CScreenDevice::Write(char)+0x68>
    c190:	e6ef3071 	uxtb	r3, r1
    c194:	e353001f 	cmp	r3, #31
    c198:	9afffef6 	bls	bd78 <CScreenDevice::Write(char)+0x68>
    c19c:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    c1a0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c1a4:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c1a8:	e58dc000 	str	ip, [sp]
    c1ac:	ebfffe24 	bl	ba44 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c1b0:	e1a00004 	mov	r0, r4
    c1b4:	e28dd008 	add	sp, sp, #8
    c1b8:	e8bd4010 	pop	{r4, lr}
    c1bc:	eafffdff 	b	b9c0 <CScreenDevice::CursorRight()>
    c1c0:	e2411030 	sub	r1, r1, #48	; 0x30
    c1c4:	e6ef3071 	uxtb	r3, r1
    c1c8:	e3530009 	cmp	r3, #9
    c1cc:	8afffee7 	bhi	bd70 <CScreenDevice::Write(char)+0x60>
    c1d0:	e3a03003 	mov	r3, #3
    c1d4:	e5801050 	str	r1, [r0, #80]	; 0x50
    c1d8:	e5803030 	str	r3, [r0, #48]	; 0x30
    c1dc:	eafffee5 	b	bd78 <CScreenDevice::Write(char)+0x68>
    c1e0:	e3a0301f 	mov	r3, #31
    c1e4:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c1e8:	eafffee0 	b	bd70 <CScreenDevice::Write(char)+0x60>
    c1ec:	e3a03b3e 	mov	r3, #63488	; 0xf800
    c1f0:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c1f4:	eafffedd 	b	bd70 <CScreenDevice::Write(char)+0x60>
    c1f8:	e3e03020 	mvn	r3, #32
    c1fc:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c200:	eafffeda 	b	bd70 <CScreenDevice::Write(char)+0x60>
    c204:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c208:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c20c:	ebfffd39 	bl	b6f8 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    c210:	e3a03000 	mov	r3, #0
    c214:	e5843030 	str	r3, [r4, #48]	; 0x30
    c218:	eafffed6 	b	bd78 <CScreenDevice::Write(char)+0x68>

0000c21c <CScreenDevice::Write(void const*, unsigned int)>:
    c21c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c220:	e1a05000 	mov	r5, r0
    c224:	e280805c 	add	r8, r0, #92	; 0x5c
    c228:	e1a00008 	mov	r0, r8
    c22c:	e1a04002 	mov	r4, r2
    c230:	e1a07001 	mov	r7, r1
    c234:	eb000e91 	bl	fc80 <CSpinLock::Acquire()>
    c238:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c23c:	e3a02001 	mov	r2, #1
    c240:	e5852058 	str	r2, [r5, #88]	; 0x58
    c244:	e3530000 	cmp	r3, #0
    c248:	1a000017 	bne	c2ac <CScreenDevice::Write(void const*, unsigned int)+0x90>
    c24c:	e3540000 	cmp	r4, #0
    c250:	e2446001 	sub	r6, r4, #1
    c254:	0a00001b 	beq	c2c8 <CScreenDevice::Write(void const*, unsigned int)+0xac>
    c258:	e1a04007 	mov	r4, r7
    c25c:	e0d410d1 	ldrsb	r1, [r4], #1
    c260:	e1a00005 	mov	r0, r5
    c264:	ebfffea9 	bl	bd10 <CScreenDevice::Write(char)>
    c268:	e2643001 	rsb	r3, r4, #1
    c26c:	e0833006 	add	r3, r3, r6
    c270:	e1770003 	cmn	r7, r3
    c274:	1afffff8 	bne	c25c <CScreenDevice::Write(void const*, unsigned int)+0x40>
    c278:	e2866001 	add	r6, r6, #1
    c27c:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c280:	e3530000 	cmp	r3, #0
    c284:	0a000001 	beq	c290 <CScreenDevice::Write(void const*, unsigned int)+0x74>
    c288:	e1a00005 	mov	r0, r5
    c28c:	ebfffc48 	bl	b3b4 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]>
    c290:	e3a03000 	mov	r3, #0
    c294:	e1a00008 	mov	r0, r8
    c298:	e5853058 	str	r3, [r5, #88]	; 0x58
    c29c:	eb000e93 	bl	fcf0 <CSpinLock::Release()>
    c2a0:	f57ff05f 	dmb	sy
    c2a4:	e1a00006 	mov	r0, r6
    c2a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c2ac:	e1a00005 	mov	r0, r5
    c2b0:	e2446001 	sub	r6, r4, #1
    c2b4:	ebfffc3e 	bl	b3b4 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]>
    c2b8:	e3540000 	cmp	r4, #0
    c2bc:	1affffe5 	bne	c258 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    c2c0:	e1a06004 	mov	r6, r4
    c2c4:	eaffffec 	b	c27c <CScreenDevice::Write(void const*, unsigned int)+0x60>
    c2c8:	e1a06004 	mov	r6, r4
    c2cc:	eaffffef 	b	c290 <CScreenDevice::Write(void const*, unsigned int)+0x74>

0000c2d0 <CScreenDevice::Initialize()>:
    c2d0:	e92d4070 	push	{r4, r5, r6, lr}
    c2d4:	e590600c 	ldr	r6, [r0, #12]
    c2d8:	e1a04000 	mov	r4, r0
    c2dc:	e24dd008 	sub	sp, sp, #8
    c2e0:	e3560000 	cmp	r6, #0
    c2e4:	0a000027 	beq	c388 <CScreenDevice::Initialize()+0xb8>
    c2e8:	e9900009 	ldmib	r0, {r0, r3}
    c2ec:	e5840024 	str	r0, [r4, #36]	; 0x24
    c2f0:	e5840020 	str	r0, [r4, #32]
    c2f4:	e0000093 	mul	r0, r3, r0
    c2f8:	e5843028 	str	r3, [r4, #40]	; 0x28
    c2fc:	e35005fe 	cmp	r0, #1065353216	; 0x3f800000
    c300:	e1a00080 	lsl	r0, r0, #1
    c304:	e584001c 	str	r0, [r4, #28]
    c308:	83e00000 	mvnhi	r0, #0
    c30c:	ebfff5fb 	bl	9b00 <operator new[](unsigned int)>
    c310:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    c314:	e5840018 	str	r0, [r4, #24]
    c318:	e2846014 	add	r6, r4, #20
    c31c:	e1a00006 	mov	r0, r6
    c320:	eb0000a1 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    c324:	e735f015 	udiv	r5, r5, r0
    c328:	e1a00006 	mov	r0, r6
    c32c:	eb00009e 	bl	c5ac <CCharGenerator::GetCharHeight() const>
    c330:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    c334:	e5843040 	str	r3, [r4, #64]	; 0x40
    c338:	e3a03000 	mov	r3, #0
    c33c:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c340:	e0030590 	mul	r3, r0, r5
    c344:	e584302c 	str	r3, [r4, #44]	; 0x2c
    c348:	e1a00004 	mov	r0, r4
    c34c:	e5843038 	str	r3, [r4, #56]	; 0x38
    c350:	ebfffe4d 	bl	bc8c <CScreenDevice::ClearDisplayEnd()>
    c354:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c358:	e3530000 	cmp	r3, #0
    c35c:	1a000031 	bne	c428 <CScreenDevice::Initialize()+0x158>
    c360:	eb0001aa 	bl	ca10 <CDeviceNameService::Get()>
    c364:	e3021654 	movw	r1, #9812	; 0x2654
    c368:	e3401001 	movt	r1, #1
    c36c:	e1a02004 	mov	r2, r4
    c370:	e3a03000 	mov	r3, #0
    c374:	e3a06001 	mov	r6, #1
    c378:	eb000141 	bl	c884 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    c37c:	e1a00006 	mov	r0, r6
    c380:	e28dd008 	add	sp, sp, #8
    c384:	e8bd8070 	pop	{r4, r5, r6, pc}
    c388:	e3a00024 	mov	r0, #36	; 0x24
    c38c:	ebfff5da 	bl	9afc <operator new(unsigned int)>
    c390:	e5942008 	ldr	r2, [r4, #8]
    c394:	e5941004 	ldr	r1, [r4, #4]
    c398:	e1a05000 	mov	r5, r0
    c39c:	e3a03010 	mov	r3, #16
    c3a0:	e58d6004 	str	r6, [sp, #4]
    c3a4:	e58d6000 	str	r6, [sp]
    c3a8:	eb0011ff 	bl	10bac <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c3ac:	e5845010 	str	r5, [r4, #16]
    c3b0:	e1a00005 	mov	r0, r5
    c3b4:	eb001267 	bl	10d58 <CBcmFrameBuffer::Initialize()>
    c3b8:	e3500000 	cmp	r0, #0
    c3bc:	0affffee 	beq	c37c <CScreenDevice::Initialize()+0xac>
    c3c0:	e5940010 	ldr	r0, [r4, #16]
    c3c4:	eb00129e 	bl	10e44 <CBcmFrameBuffer::GetDepth() const>
    c3c8:	e3500010 	cmp	r0, #16
    c3cc:	1affffea 	bne	c37c <CScreenDevice::Initialize()+0xac>
    c3d0:	e5940010 	ldr	r0, [r4, #16]
    c3d4:	eb00129c 	bl	10e4c <CBcmFrameBuffer::GetBuffer() const>
    c3d8:	e5840018 	str	r0, [r4, #24]
    c3dc:	e5940010 	ldr	r0, [r4, #16]
    c3e0:	eb00129b 	bl	10e54 <CBcmFrameBuffer::GetSize() const>
    c3e4:	e584001c 	str	r0, [r4, #28]
    c3e8:	e5940010 	ldr	r0, [r4, #16]
    c3ec:	eb001292 	bl	10e3c <CBcmFrameBuffer::GetPitch() const>
    c3f0:	e5840020 	str	r0, [r4, #32]
    c3f4:	e5940010 	ldr	r0, [r4, #16]
    c3f8:	eb001287 	bl	10e1c <CBcmFrameBuffer::GetWidth() const>
    c3fc:	e5840024 	str	r0, [r4, #36]	; 0x24
    c400:	e5940010 	ldr	r0, [r4, #16]
    c404:	eb001286 	bl	10e24 <CBcmFrameBuffer::GetHeight() const>
    c408:	e5943020 	ldr	r3, [r4, #32]
    c40c:	e1a05000 	mov	r5, r0
    c410:	e5840028 	str	r0, [r4, #40]	; 0x28
    c414:	e3130003 	tst	r3, #3
    c418:	01a030a3 	lsreq	r3, r3, #1
    c41c:	05843020 	streq	r3, [r4, #32]
    c420:	0affffbc 	beq	c318 <CScreenDevice::Initialize()+0x48>
    c424:	eaffffd4 	b	c37c <CScreenDevice::Initialize()+0xac>
    c428:	e1a00004 	mov	r0, r4
    c42c:	ebfffbe0 	bl	b3b4 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]>
    c430:	eaffffca 	b	c360 <CScreenDevice::Initialize()+0x90>

0000c434 <CScreenDevice::InvertCursor()>:
    c434:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    c438:	e3530000 	cmp	r3, #0
    c43c:	012fff1e 	bxeq	lr
    c440:	eafffbdb 	b	b3b4 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]>

0000c444 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    c444:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    c448:	e15c0001 	cmp	ip, r1
    c44c:	912fff1e 	bxls	lr
    c450:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    c454:	e15c0002 	cmp	ip, r2
    c458:	8590c020 	ldrhi	ip, [r0, #32]
    c45c:	85900018 	ldrhi	r0, [r0, #24]
    c460:	8022129c 	mlahi	r2, ip, r2, r1
    c464:	81a02082 	lslhi	r2, r2, #1
    c468:	818030b2 	strhhi	r3, [r0, r2]
    c46c:	e12fff1e 	bx	lr

0000c470 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c470:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c474:	e1530001 	cmp	r3, r1
    c478:	9a000008 	bls	c4a0 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    c47c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    c480:	e1530002 	cmp	r3, r2
    c484:	9a000005 	bls	c4a0 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    c488:	e590c020 	ldr	ip, [r0, #32]
    c48c:	e5903018 	ldr	r3, [r0, #24]
    c490:	e022129c 	mla	r2, ip, r2, r1
    c494:	e1a02082 	lsl	r2, r2, #1
    c498:	e19300b2 	ldrh	r0, [r3, r2]
    c49c:	e12fff1e 	bx	lr
    c4a0:	e3a00000 	mov	r0, #0
    c4a4:	e12fff1e 	bx	lr

0000c4a8 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c4a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c4ac:	e1a05000 	mov	r5, r0
    c4b0:	e1a06002 	mov	r6, r2
    c4b4:	e24dd00c 	sub	sp, sp, #12
    c4b8:	e1a04001 	mov	r4, r1
    c4bc:	e2800014 	add	r0, r0, #20
    c4c0:	e2044003 	and	r4, r4, #3
    c4c4:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    c4c8:	eb000035 	bl	c5a4 <CCharGenerator::GetCharWidth() const>
    c4cc:	e2061003 	and	r1, r6, #3
    c4d0:	e30236f8 	movw	r3, #9976	; 0x26f8
    c4d4:	e3403001 	movt	r3, #1
    c4d8:	e0831001 	add	r1, r3, r1
    c4dc:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    c4e0:	e0220094 	mla	r2, r4, r0, r0
    c4e4:	e3a03000 	mov	r3, #0
    c4e8:	e1a00005 	mov	r0, r5
    c4ec:	e1d111dc 	ldrsb	r1, [r1, #28]
    c4f0:	e0622007 	rsb	r2, r2, r7
    c4f4:	e58dc000 	str	ip, [sp]
    c4f8:	ebfffd51 	bl	ba44 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c4fc:	e28dd00c 	add	sp, sp, #12
    c500:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c504 <assertion_failed>:
    c504:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c508:	e1a05000 	mov	r5, r0
    c50c:	e1a06001 	mov	r6, r1
    c510:	e24dd01c 	sub	sp, sp, #28
    c514:	e1a07002 	mov	r7, r2
    c518:	e1a0400d 	mov	r4, sp
    c51c:	eb0009e5 	bl	ecb8 <CInterruptSystem::DisableFIQ()>
    c520:	f1080040 	cpsie	f
    c524:	e28d0008 	add	r0, sp, #8
    c528:	eb0004c3 	bl	d83c <CString::CString()>
    c52c:	e1a03007 	mov	r3, r7
    c530:	e1a02006 	mov	r2, r6
    c534:	e28d0008 	add	r0, sp, #8
    c538:	e302171c 	movw	r1, #10012	; 0x271c
    c53c:	e3401001 	movt	r1, #1
    c540:	eb0007e5 	bl	e4dc <CString::Format(char const*, ...)>
    c544:	e28d0008 	add	r0, sp, #8
    c548:	eb0004d2 	bl	d898 <CString::operator char const*() const>
    c54c:	e1a01000 	mov	r1, r0
    c550:	e1a00004 	mov	r0, r4
    c554:	eb000079 	bl	c740 <debug_stacktrace(unsigned int const*, char const*)>
    c558:	eb00015f 	bl	cadc <CLogger::Get()>
    c55c:	e1a04000 	mov	r4, r0
    c560:	e28d0008 	add	r0, sp, #8
    c564:	eb0004cb 	bl	d898 <CString::operator char const*() const>
    c568:	e3a02000 	mov	r2, #0
    c56c:	e1a01000 	mov	r1, r0
    c570:	e58d5000 	str	r5, [sp]
    c574:	e1a00004 	mov	r0, r4
    c578:	e3023724 	movw	r3, #10020	; 0x2724
    c57c:	e3403001 	movt	r3, #1
    c580:	eb000223 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c584:	e28d0008 	add	r0, sp, #8
    c588:	eb000478 	bl	d770 <CString::~CString()>
    c58c:	e28dd01c 	add	sp, sp, #28
    c590:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c594 <CCharGenerator::CCharGenerator()>:
    c594:	e3a03008 	mov	r3, #8
    c598:	e5803000 	str	r3, [r0]
    c59c:	e12fff1e 	bx	lr

0000c5a0 <CCharGenerator::~CCharGenerator()>:
    c5a0:	e12fff1e 	bx	lr

0000c5a4 <CCharGenerator::GetCharWidth() const>:
    c5a4:	e5900000 	ldr	r0, [r0]
    c5a8:	e12fff1e 	bx	lr

0000c5ac <CCharGenerator::GetCharHeight() const>:
    c5ac:	e3a00013 	mov	r0, #19
    c5b0:	e12fff1e 	bx	lr

0000c5b4 <CCharGenerator::GetUnderline() const>:
    c5b4:	e3a00010 	mov	r0, #16
    c5b8:	e12fff1e 	bx	lr

0000c5bc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    c5bc:	e6ef1071 	uxtb	r1, r1
    c5c0:	e92d4070 	push	{r4, r5, r6, lr}
    c5c4:	e2414021 	sub	r4, r1, #33	; 0x21
    c5c8:	e35400de 	cmp	r4, #222	; 0xde
    c5cc:	8a00000f 	bhi	c610 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    c5d0:	e1a06003 	mov	r6, r3
    c5d4:	e5903000 	ldr	r3, [r0]
    c5d8:	e1a05002 	mov	r5, r2
    c5dc:	e1530002 	cmp	r3, r2
    c5e0:	9a00000c 	bls	c618 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    c5e4:	e356000f 	cmp	r6, #15
    c5e8:	8a000008 	bhi	c610 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    c5ec:	e302173c 	movw	r1, #10044	; 0x273c
    c5f0:	e3401001 	movt	r1, #1
    c5f4:	e0811204 	add	r1, r1, r4, lsl #4
    c5f8:	e3a02080 	mov	r2, #128	; 0x80
    c5fc:	e7d13006 	ldrb	r3, [r1, r6]
    c600:	e0133552 	ands	r3, r3, r2, asr r5
    c604:	13a00001 	movne	r0, #1
    c608:	03a00000 	moveq	r0, #0
    c60c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c610:	e3a00000 	mov	r0, #0
    c614:	e8bd8070 	pop	{r4, r5, r6, pc}
    c618:	e303152c 	movw	r1, #13612	; 0x352c
    c61c:	e3401001 	movt	r1, #1
    c620:	e3030540 	movw	r0, #13632	; 0x3540
    c624:	e3400001 	movt	r0, #1
    c628:	e3a0204e 	mov	r2, #78	; 0x4e
    c62c:	ebffffb4 	bl	c504 <assertion_failed>
    c630:	e356000f 	cmp	r6, #15
    c634:	9affffec 	bls	c5ec <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    c638:	eafffff4 	b	c610 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000c63c <debug_hexdump(void const*, unsigned int, char const*)>:
    c63c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c640:	e3520000 	cmp	r2, #0
    c644:	e3038558 	movw	r8, #13656	; 0x3558
    c648:	e3408001 	movt	r8, #1
    c64c:	11a08002 	movne	r8, r2
    c650:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    c654:	e1a05001 	mov	r5, r1
    c658:	e1a04000 	mov	r4, r0
    c65c:	eb00011e 	bl	cadc <CLogger::Get()>
    c660:	e1a01008 	mov	r1, r8
    c664:	e3033560 	movw	r3, #13664	; 0x3560
    c668:	e3403001 	movt	r3, #1
    c66c:	e58d4004 	str	r4, [sp, #4]
    c670:	e3a02004 	mov	r2, #4
    c674:	e58d5000 	str	r5, [sp]
    c678:	eb0001e5 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c67c:	e3550000 	cmp	r5, #0
    c680:	0a000029 	beq	c72c <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
    c684:	eb000114 	bl	cadc <CLogger::Get()>
    c688:	e5d4900f 	ldrb	r9, [r4, #15]
    c68c:	e5d4700e 	ldrb	r7, [r4, #14]
    c690:	e3033584 	movw	r3, #13700	; 0x3584
    c694:	e3403001 	movt	r3, #1
    c698:	e5d4600d 	ldrb	r6, [r4, #13]
    c69c:	e3a02004 	mov	r2, #4
    c6a0:	e5d4e00c 	ldrb	lr, [r4, #12]
    c6a4:	e1a01008 	mov	r1, r8
    c6a8:	e5d4b00b 	ldrb	fp, [r4, #11]
    c6ac:	e6ffc074 	uxth	ip, r4
    c6b0:	e5d4a00a 	ldrb	sl, [r4, #10]
    c6b4:	e2844010 	add	r4, r4, #16
    c6b8:	e58d9040 	str	r9, [sp, #64]	; 0x40
    c6bc:	e5549007 	ldrb	r9, [r4, #-7]
    c6c0:	e58d703c 	str	r7, [sp, #60]	; 0x3c
    c6c4:	e5547008 	ldrb	r7, [r4, #-8]
    c6c8:	e58d6038 	str	r6, [sp, #56]	; 0x38
    c6cc:	e5546009 	ldrb	r6, [r4, #-9]
    c6d0:	e58de034 	str	lr, [sp, #52]	; 0x34
    c6d4:	e554e00a 	ldrb	lr, [r4, #-10]
    c6d8:	e58db030 	str	fp, [sp, #48]	; 0x30
    c6dc:	e554b00b 	ldrb	fp, [r4, #-11]
    c6e0:	e58da02c 	str	sl, [sp, #44]	; 0x2c
    c6e4:	e554a00c 	ldrb	sl, [r4, #-12]
    c6e8:	e58d9028 	str	r9, [sp, #40]	; 0x28
    c6ec:	e554900d 	ldrb	r9, [r4, #-13]
    c6f0:	e58d7024 	str	r7, [sp, #36]	; 0x24
    c6f4:	e554700e 	ldrb	r7, [r4, #-14]
    c6f8:	e58d6020 	str	r6, [sp, #32]
    c6fc:	e554600f 	ldrb	r6, [r4, #-15]
    c700:	e58de01c 	str	lr, [sp, #28]
    c704:	e554e010 	ldrb	lr, [r4, #-16]
    c708:	e58db018 	str	fp, [sp, #24]
    c70c:	e58da014 	str	sl, [sp, #20]
    c710:	e58d9010 	str	r9, [sp, #16]
    c714:	e58d700c 	str	r7, [sp, #12]
    c718:	e58d6008 	str	r6, [sp, #8]
    c71c:	e88d5000 	stm	sp, {ip, lr}
    c720:	eb0001bb 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c724:	e355000f 	cmp	r5, #15
    c728:	8a000001 	bhi	c734 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
    c72c:	e28dd04c 	add	sp, sp, #76	; 0x4c
    c730:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c734:	e2555010 	subs	r5, r5, #16
    c738:	1affffd1 	bne	c684 <debug_hexdump(void const*, unsigned int, char const*)+0x48>
    c73c:	eafffffa 	b	c72c <debug_hexdump(void const*, unsigned int, char const*)+0xf0>

0000c740 <debug_stacktrace(unsigned int const*, char const*)>:
    c740:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c744:	e3510000 	cmp	r1, #0
    c748:	e3037558 	movw	r7, #13656	; 0x3558
    c74c:	e3407001 	movt	r7, #1
    c750:	11a07001 	movne	r7, r1
    c754:	e3016f6c 	movw	r6, #8044	; 0x1f6c
    c758:	e3406001 	movt	r6, #1
    c75c:	e24dd00c 	sub	sp, sp, #12
    c760:	e2405004 	sub	r5, r0, #4
    c764:	e3a04000 	mov	r4, #0
    c768:	ea000002 	b	c778 <debug_stacktrace(unsigned int const*, char const*)+0x38>
    c76c:	e2844001 	add	r4, r4, #1
    c770:	e3540040 	cmp	r4, #64	; 0x40
    c774:	0a000010 	beq	c7bc <debug_stacktrace(unsigned int const*, char const*)+0x7c>
    c778:	e5b53004 	ldr	r3, [r5, #4]!
    c77c:	e3530902 	cmp	r3, #32768	; 0x8000
    c780:	3afffff9 	bcc	c76c <debug_stacktrace(unsigned int const*, char const*)+0x2c>
    c784:	e1530006 	cmp	r3, r6
    c788:	2afffff7 	bcs	c76c <debug_stacktrace(unsigned int const*, char const*)+0x2c>
    c78c:	eb0000d2 	bl	cadc <CLogger::Get()>
    c790:	e5953000 	ldr	r3, [r5]
    c794:	e58d3004 	str	r3, [sp, #4]
    c798:	e3a02004 	mov	r2, #4
    c79c:	e58d4000 	str	r4, [sp]
    c7a0:	e30335dc 	movw	r3, #13788	; 0x35dc
    c7a4:	e3403001 	movt	r3, #1
    c7a8:	e1a01007 	mov	r1, r7
    c7ac:	e2844001 	add	r4, r4, #1
    c7b0:	eb000197 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c7b4:	e3540040 	cmp	r4, #64	; 0x40
    c7b8:	1affffee 	bne	c778 <debug_stacktrace(unsigned int const*, char const*)+0x38>
    c7bc:	e28dd00c 	add	sp, sp, #12
    c7c0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c7c4 <CDeviceNameService::CDeviceNameService()>:
    c7c4:	e92d4070 	push	{r4, r5, r6, lr}
    c7c8:	e30444c8 	movw	r4, #17608	; 0x44c8
    c7cc:	e3404001 	movt	r4, #1
    c7d0:	e3a03000 	mov	r3, #0
    c7d4:	e1a05000 	mov	r5, r0
    c7d8:	e1a01003 	mov	r1, r3
    c7dc:	e4803004 	str	r3, [r0], #4
    c7e0:	eb000d0a 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
    c7e4:	e5943000 	ldr	r3, [r4]
    c7e8:	e3530000 	cmp	r3, #0
    c7ec:	0a000005 	beq	c808 <CDeviceNameService::CDeviceNameService()+0x44>
    c7f0:	e30315f0 	movw	r1, #13808	; 0x35f0
    c7f4:	e3401001 	movt	r1, #1
    c7f8:	e3030608 	movw	r0, #13832	; 0x3608
    c7fc:	e3400001 	movt	r0, #1
    c800:	e3a0201e 	mov	r2, #30
    c804:	ebffff3e 	bl	c504 <assertion_failed>
    c808:	e5845000 	str	r5, [r4]
    c80c:	e1a00005 	mov	r0, r5
    c810:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c814 <CDeviceNameService::~CDeviceNameService()>:
    c814:	e5903000 	ldr	r3, [r0]
    c818:	e92d4070 	push	{r4, r5, r6, lr}
    c81c:	e3530000 	cmp	r3, #0
    c820:	e1a05000 	mov	r5, r0
    c824:	0a00000e 	beq	c864 <CDeviceNameService::~CDeviceNameService()+0x50>
    c828:	e3a06000 	mov	r6, #0
    c82c:	e5930004 	ldr	r0, [r3, #4]
    c830:	e5934000 	ldr	r4, [r3]
    c834:	e3500000 	cmp	r0, #0
    c838:	0a000000 	beq	c840 <CDeviceNameService::~CDeviceNameService()+0x2c>
    c83c:	ebfff4b1 	bl	9b08 <operator delete[](void*)>
    c840:	e5953000 	ldr	r3, [r5]
    c844:	e3a01010 	mov	r1, #16
    c848:	e1a00003 	mov	r0, r3
    c84c:	e5836004 	str	r6, [r3, #4]
    c850:	e5836008 	str	r6, [r3, #8]
    c854:	ebfff4ac 	bl	9b0c <operator delete(void*, unsigned int)>
    c858:	e2543000 	subs	r3, r4, #0
    c85c:	e5854000 	str	r4, [r5]
    c860:	1afffff1 	bne	c82c <CDeviceNameService::~CDeviceNameService()+0x18>
    c864:	e30434c8 	movw	r3, #17608	; 0x44c8
    c868:	e3403001 	movt	r3, #1
    c86c:	e2850004 	add	r0, r5, #4
    c870:	e3a02000 	mov	r2, #0
    c874:	e5832000 	str	r2, [r3]
    c878:	eb000cf3 	bl	fc4c <CSpinLock::~CSpinLock()>
    c87c:	e1a00005 	mov	r0, r5
    c880:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c884 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    c884:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c888:	e2808004 	add	r8, r0, #4
    c88c:	e1a05000 	mov	r5, r0
    c890:	e1a00008 	mov	r0, r8
    c894:	e1a06001 	mov	r6, r1
    c898:	e1a07002 	mov	r7, r2
    c89c:	e1a09003 	mov	r9, r3
    c8a0:	eb000cf6 	bl	fc80 <CSpinLock::Acquire()>
    c8a4:	e3a00010 	mov	r0, #16
    c8a8:	ebfff493 	bl	9afc <operator new(unsigned int)>
    c8ac:	e3560000 	cmp	r6, #0
    c8b0:	e1a04000 	mov	r4, r0
    c8b4:	0a000017 	beq	c918 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x94>
    c8b8:	e1a00006 	mov	r0, r6
    c8bc:	ebfff7cd 	bl	a7f8 <strlen>
    c8c0:	e2800001 	add	r0, r0, #1
    c8c4:	ebfff48d 	bl	9b00 <operator new[](unsigned int)>
    c8c8:	e1a01006 	mov	r1, r6
    c8cc:	e5840004 	str	r0, [r4, #4]
    c8d0:	ebfff7ed 	bl	a88c <strcpy>
    c8d4:	e3570000 	cmp	r7, #0
    c8d8:	0a000007 	beq	c8fc <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x78>
    c8dc:	e5953000 	ldr	r3, [r5]
    c8e0:	e1a00008 	mov	r0, r8
    c8e4:	e5854000 	str	r4, [r5]
    c8e8:	e5847008 	str	r7, [r4, #8]
    c8ec:	e584900c 	str	r9, [r4, #12]
    c8f0:	e5843000 	str	r3, [r4]
    c8f4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    c8f8:	ea000cfc 	b	fcf0 <CSpinLock::Release()>
    c8fc:	e30315f0 	movw	r1, #13808	; 0x35f0
    c900:	e3401001 	movt	r1, #1
    c904:	e3030620 	movw	r0, #13856	; 0x3620
    c908:	e3400001 	movt	r0, #1
    c90c:	e3a0203f 	mov	r2, #63	; 0x3f
    c910:	ebfffefb 	bl	c504 <assertion_failed>
    c914:	eafffff0 	b	c8dc <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    c918:	e30315f0 	movw	r1, #13808	; 0x35f0
    c91c:	e3401001 	movt	r1, #1
    c920:	e3030614 	movw	r0, #13844	; 0x3614
    c924:	e3400001 	movt	r0, #1
    c928:	e3a0203a 	mov	r2, #58	; 0x3a
    c92c:	ebfffef4 	bl	c504 <assertion_failed>
    c930:	eaffffe0 	b	c8b8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

0000c934 <CDeviceNameService::GetDevice(char const*, int)>:
    c934:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c938:	e2515000 	subs	r5, r1, #0
    c93c:	e1a04000 	mov	r4, r0
    c940:	e1a06002 	mov	r6, r2
    c944:	0a000022 	beq	c9d4 <CDeviceNameService::GetDevice(char const*, int)+0xa0>
    c948:	e2847004 	add	r7, r4, #4
    c94c:	e1a00007 	mov	r0, r7
    c950:	eb000cca 	bl	fc80 <CSpinLock::Acquire()>
    c954:	e5944000 	ldr	r4, [r4]
    c958:	e3540000 	cmp	r4, #0
    c95c:	0a000018 	beq	c9c4 <CDeviceNameService::GetDevice(char const*, int)+0x90>
    c960:	e5941004 	ldr	r1, [r4, #4]
    c964:	e3510000 	cmp	r1, #0
    c968:	0a00000d 	beq	c9a4 <CDeviceNameService::GetDevice(char const*, int)+0x70>
    c96c:	e1a00005 	mov	r0, r5
    c970:	ebfff7aa 	bl	a820 <strcmp>
    c974:	e3500000 	cmp	r0, #0
    c978:	1afffff5 	bne	c954 <CDeviceNameService::GetDevice(char const*, int)+0x20>
    c97c:	e594300c 	ldr	r3, [r4, #12]
    c980:	e1530006 	cmp	r3, r6
    c984:	1afffff2 	bne	c954 <CDeviceNameService::GetDevice(char const*, int)+0x20>
    c988:	e5944008 	ldr	r4, [r4, #8]
    c98c:	e1a00007 	mov	r0, r7
    c990:	eb000cd6 	bl	fcf0 <CSpinLock::Release()>
    c994:	e3540000 	cmp	r4, #0
    c998:	0a000014 	beq	c9f0 <CDeviceNameService::GetDevice(char const*, int)+0xbc>
    c99c:	e1a00004 	mov	r0, r4
    c9a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c9a4:	e30315f0 	movw	r1, #13808	; 0x35f0
    c9a8:	e3401001 	movt	r1, #1
    c9ac:	e3030630 	movw	r0, #13872	; 0x3630
    c9b0:	e3400001 	movt	r0, #1
    c9b4:	e3a02053 	mov	r2, #83	; 0x53
    c9b8:	ebfffed1 	bl	c504 <assertion_failed>
    c9bc:	e5941004 	ldr	r1, [r4, #4]
    c9c0:	eaffffe9 	b	c96c <CDeviceNameService::GetDevice(char const*, int)+0x38>
    c9c4:	e1a00007 	mov	r0, r7
    c9c8:	eb000cc8 	bl	fcf0 <CSpinLock::Release()>
    c9cc:	e3a00000 	mov	r0, #0
    c9d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c9d4:	e30315f0 	movw	r1, #13808	; 0x35f0
    c9d8:	e3401001 	movt	r1, #1
    c9dc:	e3030614 	movw	r0, #13844	; 0x3614
    c9e0:	e3400001 	movt	r0, #1
    c9e4:	e3a0204c 	mov	r2, #76	; 0x4c
    c9e8:	ebfffec5 	bl	c504 <assertion_failed>
    c9ec:	eaffffd5 	b	c948 <CDeviceNameService::GetDevice(char const*, int)+0x14>
    c9f0:	e3a0205b 	mov	r2, #91	; 0x5b
    c9f4:	e30315f0 	movw	r1, #13808	; 0x35f0
    c9f8:	e3401001 	movt	r1, #1
    c9fc:	e3030644 	movw	r0, #13892	; 0x3644
    ca00:	e3400001 	movt	r0, #1
    ca04:	ebfffebe 	bl	c504 <assertion_failed>
    ca08:	e1a00004 	mov	r0, r4
    ca0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ca10 <CDeviceNameService::Get()>:
    ca10:	e92d4010 	push	{r4, lr}
    ca14:	e30444c8 	movw	r4, #17608	; 0x44c8
    ca18:	e3404001 	movt	r4, #1
    ca1c:	e5940000 	ldr	r0, [r4]
    ca20:	e3500000 	cmp	r0, #0
    ca24:	18bd8010 	popne	{r4, pc}
    ca28:	e3a02069 	mov	r2, #105	; 0x69
    ca2c:	e30315f0 	movw	r1, #13808	; 0x35f0
    ca30:	e3401001 	movt	r1, #1
    ca34:	e3030654 	movw	r0, #13908	; 0x3654
    ca38:	e3400001 	movt	r0, #1
    ca3c:	ebfffeb0 	bl	c504 <assertion_failed>
    ca40:	e5940000 	ldr	r0, [r4]
    ca44:	e8bd8010 	pop	{r4, pc}

0000ca48 <CLogger::CLogger(unsigned int, CTimer*)>:
    ca48:	e92d4010 	push	{r4, lr}
    ca4c:	e1a04000 	mov	r4, r0
    ca50:	e3a03000 	mov	r3, #0
    ca54:	e2800018 	add	r0, r0, #24
    ca58:	e984000c 	stmib	r4, {r2, r3}
    ca5c:	e584300c 	str	r3, [r4, #12]
    ca60:	e5843010 	str	r3, [r4, #16]
    ca64:	e5843014 	str	r3, [r4, #20]
    ca68:	e5841000 	str	r1, [r4]
    ca6c:	e3a01001 	mov	r1, #1
    ca70:	eb000c66 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
    ca74:	e3a00901 	mov	r0, #16384	; 0x4000
    ca78:	ebfff420 	bl	9b00 <operator new[](unsigned int)>
    ca7c:	e30434cc 	movw	r3, #17612	; 0x44cc
    ca80:	e3403001 	movt	r3, #1
    ca84:	e584000c 	str	r0, [r4, #12]
    ca88:	e1a00004 	mov	r0, r4
    ca8c:	e5834000 	str	r4, [r3]
    ca90:	e8bd8010 	pop	{r4, pc}

0000ca94 <CLogger::~CLogger()>:
    ca94:	e92d4010 	push	{r4, lr}
    ca98:	e1a04000 	mov	r4, r0
    ca9c:	e590000c 	ldr	r0, [r0, #12]
    caa0:	e3a02000 	mov	r2, #0
    caa4:	e30434cc 	movw	r3, #17612	; 0x44cc
    caa8:	e3403001 	movt	r3, #1
    caac:	e1500002 	cmp	r0, r2
    cab0:	e5832000 	str	r2, [r3]
    cab4:	0a000000 	beq	cabc <CLogger::~CLogger()+0x28>
    cab8:	ebfff412 	bl	9b08 <operator delete[](void*)>
    cabc:	e3a03000 	mov	r3, #0
    cac0:	e2840018 	add	r0, r4, #24
    cac4:	e584300c 	str	r3, [r4, #12]
    cac8:	e5843008 	str	r3, [r4, #8]
    cacc:	e5843004 	str	r3, [r4, #4]
    cad0:	eb000c5d 	bl	fc4c <CSpinLock::~CSpinLock()>
    cad4:	e1a00004 	mov	r0, r4
    cad8:	e8bd8010 	pop	{r4, pc}

0000cadc <CLogger::Get()>:
    cadc:	e30434cc 	movw	r3, #17612	; 0x44cc
    cae0:	e3403001 	movt	r3, #1
    cae4:	e5930000 	ldr	r0, [r3]
    cae8:	e12fff1e 	bx	lr

0000caec <CLogger::Write(char const*)>:
    caec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    caf0:	e1a04000 	mov	r4, r0
    caf4:	e1a00001 	mov	r0, r1
    caf8:	e1a05001 	mov	r5, r1
    cafc:	ebfff73d 	bl	a7f8 <strlen>
    cb00:	e1a07000 	mov	r7, r0
    cb04:	e1a01005 	mov	r1, r5
    cb08:	e5940008 	ldr	r0, [r4, #8]
    cb0c:	e1a02007 	mov	r2, r7
    cb10:	e2846018 	add	r6, r4, #24
    cb14:	e5903000 	ldr	r3, [r0]
    cb18:	e593300c 	ldr	r3, [r3, #12]
    cb1c:	e12fff33 	blx	r3
    cb20:	e1a00006 	mov	r0, r6
    cb24:	eb000c55 	bl	fc80 <CSpinLock::Acquire()>
    cb28:	e0850007 	add	r0, r5, r7
    cb2c:	e1550000 	cmp	r5, r0
    cb30:	0a00000f 	beq	cb74 <CLogger::Write(char const*)+0x88>
    cb34:	e0d530d1 	ldrsb	r3, [r5], #1
    cb38:	e353000d 	cmp	r3, #13
    cb3c:	0afffffa 	beq	cb2c <CLogger::Write(char const*)+0x40>
    cb40:	e5941010 	ldr	r1, [r4, #16]
    cb44:	e594c00c 	ldr	ip, [r4, #12]
    cb48:	e7cc3001 	strb	r3, [ip, r1]
    cb4c:	e5943010 	ldr	r3, [r4, #16]
    cb50:	e5941014 	ldr	r1, [r4, #20]
    cb54:	e2833001 	add	r3, r3, #1
    cb58:	e7ed3053 	ubfx	r3, r3, #0, #14
    cb5c:	e5843010 	str	r3, [r4, #16]
    cb60:	e1530001 	cmp	r3, r1
    cb64:	1afffff0 	bne	cb2c <CLogger::Write(char const*)+0x40>
    cb68:	e2433001 	sub	r3, r3, #1
    cb6c:	e7ed3053 	ubfx	r3, r3, #0, #14
    cb70:	e5843010 	str	r3, [r4, #16]
    cb74:	e1a00006 	mov	r0, r6
    cb78:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    cb7c:	ea000c5b 	b	fcf0 <CSpinLock::Release()>

0000cb80 <CLogger::Read(void*, unsigned int)>:
    cb80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cb84:	e1a04000 	mov	r4, r0
    cb88:	e2807018 	add	r7, r0, #24
    cb8c:	e1a00007 	mov	r0, r7
    cb90:	e1a06002 	mov	r6, r2
    cb94:	e1a05001 	mov	r5, r1
    cb98:	eb000c38 	bl	fc80 <CSpinLock::Acquire()>
    cb9c:	e5942010 	ldr	r2, [r4, #16]
    cba0:	e5943014 	ldr	r3, [r4, #20]
    cba4:	e1520003 	cmp	r2, r3
    cba8:	11a08006 	movne	r8, r6
    cbac:	13a0c000 	movne	ip, #0
    cbb0:	1a00000a 	bne	cbe0 <CLogger::Read(void*, unsigned int)+0x60>
    cbb4:	ea000012 	b	cc04 <CLogger::Read(void*, unsigned int)+0x84>
    cbb8:	e594100c 	ldr	r1, [r4, #12]
    cbbc:	e19130d3 	ldrsb	r3, [r1, r3]
    cbc0:	e4c53001 	strb	r3, [r5], #1
    cbc4:	e5943014 	ldr	r3, [r4, #20]
    cbc8:	e5941010 	ldr	r1, [r4, #16]
    cbcc:	e2833001 	add	r3, r3, #1
    cbd0:	e7ed3053 	ubfx	r3, r3, #0, #14
    cbd4:	e5843014 	str	r3, [r4, #20]
    cbd8:	e1530001 	cmp	r3, r1
    cbdc:	0a000006 	beq	cbfc <CLogger::Read(void*, unsigned int)+0x7c>
    cbe0:	e15c0006 	cmp	ip, r6
    cbe4:	e28cc001 	add	ip, ip, #1
    cbe8:	1afffff2 	bne	cbb8 <CLogger::Read(void*, unsigned int)+0x38>
    cbec:	e1a00007 	mov	r0, r7
    cbf0:	eb000c3e 	bl	fcf0 <CSpinLock::Release()>
    cbf4:	e1a00008 	mov	r0, r8
    cbf8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cbfc:	e1a0800c 	mov	r8, ip
    cc00:	eafffff9 	b	cbec <CLogger::Read(void*, unsigned int)+0x6c>
    cc04:	e1a00007 	mov	r0, r7
    cc08:	eb000c38 	bl	fcf0 <CSpinLock::Release()>
    cc0c:	e3e00000 	mvn	r0, #0
    cc10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000cc14 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    cc14:	e590c000 	ldr	ip, [r0]
    cc18:	e152000c 	cmp	r2, ip
    cc1c:	812fff1e 	bxhi	lr
    cc20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cc24:	e1a05002 	mov	r5, r2
    cc28:	e1a04000 	mov	r4, r0
    cc2c:	e24dd020 	sub	sp, sp, #32
    cc30:	e1a07003 	mov	r7, r3
    cc34:	e1a0000d 	mov	r0, sp
    cc38:	e1a06001 	mov	r6, r1
    cc3c:	eb0002fe 	bl	d83c <CString::CString()>
    cc40:	e3550000 	cmp	r5, #0
    cc44:	0a000049 	beq	cd70 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    cc48:	e5940004 	ldr	r0, [r4, #4]
    cc4c:	e3500000 	cmp	r0, #0
    cc50:	0a000032 	beq	cd20 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    cc54:	ebfff496 	bl	9eb4 <CTimer::GetTimeString()>
    cc58:	e2508000 	subs	r8, r0, #0
    cc5c:	0a00000b 	beq	cc90 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    cc60:	eb00030c 	bl	d898 <CString::operator char const*() const>
    cc64:	e1a01000 	mov	r1, r0
    cc68:	e1a0000d 	mov	r0, sp
    cc6c:	eb000325 	bl	d908 <CString::Append(char const*)>
    cc70:	e1a0000d 	mov	r0, sp
    cc74:	e3031668 	movw	r1, #13928	; 0x3668
    cc78:	e3401001 	movt	r1, #1
    cc7c:	eb000321 	bl	d908 <CString::Append(char const*)>
    cc80:	e5983000 	ldr	r3, [r8]
    cc84:	e1a00008 	mov	r0, r8
    cc88:	e5933004 	ldr	r3, [r3, #4]
    cc8c:	e12fff33 	blx	r3
    cc90:	e1a01006 	mov	r1, r6
    cc94:	e1a0000d 	mov	r0, sp
    cc98:	eb00031a 	bl	d908 <CString::Append(char const*)>
    cc9c:	e28d6010 	add	r6, sp, #16
    cca0:	e1a0000d 	mov	r0, sp
    cca4:	e303166c 	movw	r1, #13932	; 0x366c
    cca8:	e3401001 	movt	r1, #1
    ccac:	eb000315 	bl	d908 <CString::Append(char const*)>
    ccb0:	e1a00006 	mov	r0, r6
    ccb4:	eb0002e0 	bl	d83c <CString::CString()>
    ccb8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    ccbc:	e1a01007 	mov	r1, r7
    ccc0:	e1a00006 	mov	r0, r6
    ccc4:	eb000417 	bl	dd28 <CString::FormatV(char const*, std::__va_list)>
    ccc8:	e1a00006 	mov	r0, r6
    cccc:	eb0002f1 	bl	d898 <CString::operator char const*() const>
    ccd0:	e1a01000 	mov	r1, r0
    ccd4:	e1a0000d 	mov	r0, sp
    ccd8:	eb00030a 	bl	d908 <CString::Append(char const*)>
    ccdc:	e3550000 	cmp	r5, #0
    cce0:	0a00003c 	beq	cdd8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    cce4:	e1a0000d 	mov	r0, sp
    cce8:	e3031678 	movw	r1, #13944	; 0x3678
    ccec:	e3401001 	movt	r1, #1
    ccf0:	eb000304 	bl	d908 <CString::Append(char const*)>
    ccf4:	e1a0000d 	mov	r0, sp
    ccf8:	eb0002e6 	bl	d898 <CString::operator char const*() const>
    ccfc:	e1a01000 	mov	r1, r0
    cd00:	e1a00004 	mov	r0, r4
    cd04:	ebffff78 	bl	caec <CLogger::Write(char const*)>
    cd08:	e1a00006 	mov	r0, r6
    cd0c:	eb000297 	bl	d770 <CString::~CString()>
    cd10:	e1a0000d 	mov	r0, sp
    cd14:	eb000295 	bl	d770 <CString::~CString()>
    cd18:	e28dd020 	add	sp, sp, #32
    cd1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cd20:	e1a01006 	mov	r1, r6
    cd24:	e1a0000d 	mov	r0, sp
    cd28:	eb0002f6 	bl	d908 <CString::Append(char const*)>
    cd2c:	e28d6010 	add	r6, sp, #16
    cd30:	e1a0000d 	mov	r0, sp
    cd34:	e303166c 	movw	r1, #13932	; 0x366c
    cd38:	e3401001 	movt	r1, #1
    cd3c:	eb0002f1 	bl	d908 <CString::Append(char const*)>
    cd40:	e1a00006 	mov	r0, r6
    cd44:	eb0002bc 	bl	d83c <CString::CString()>
    cd48:	e1a01007 	mov	r1, r7
    cd4c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    cd50:	e1a00006 	mov	r0, r6
    cd54:	eb0003f3 	bl	dd28 <CString::FormatV(char const*, std::__va_list)>
    cd58:	e1a00006 	mov	r0, r6
    cd5c:	eb0002cd 	bl	d898 <CString::operator char const*() const>
    cd60:	e1a01000 	mov	r1, r0
    cd64:	e1a0000d 	mov	r0, sp
    cd68:	eb0002e6 	bl	d908 <CString::Append(char const*)>
    cd6c:	eaffffdc 	b	cce4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    cd70:	e3031660 	movw	r1, #13920	; 0x3660
    cd74:	e3401001 	movt	r1, #1
    cd78:	e1a0000d 	mov	r0, sp
    cd7c:	eb0002cb 	bl	d8b0 <CString::operator=(char const*)>
    cd80:	e5940004 	ldr	r0, [r4, #4]
    cd84:	e3500000 	cmp	r0, #0
    cd88:	1affffb1 	bne	cc54 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    cd8c:	e1a01006 	mov	r1, r6
    cd90:	e1a0000d 	mov	r0, sp
    cd94:	eb0002db 	bl	d908 <CString::Append(char const*)>
    cd98:	e28d6010 	add	r6, sp, #16
    cd9c:	e1a0000d 	mov	r0, sp
    cda0:	e303166c 	movw	r1, #13932	; 0x366c
    cda4:	e3401001 	movt	r1, #1
    cda8:	eb0002d6 	bl	d908 <CString::Append(char const*)>
    cdac:	e1a00006 	mov	r0, r6
    cdb0:	eb0002a1 	bl	d83c <CString::CString()>
    cdb4:	e1a01007 	mov	r1, r7
    cdb8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    cdbc:	e1a00006 	mov	r0, r6
    cdc0:	eb0003d8 	bl	dd28 <CString::FormatV(char const*, std::__va_list)>
    cdc4:	e1a00006 	mov	r0, r6
    cdc8:	eb0002b2 	bl	d898 <CString::operator char const*() const>
    cdcc:	e1a01000 	mov	r1, r0
    cdd0:	e1a0000d 	mov	r0, sp
    cdd4:	eb0002cb 	bl	d908 <CString::Append(char const*)>
    cdd8:	e1a0000d 	mov	r0, sp
    cddc:	e3031670 	movw	r1, #13936	; 0x3670
    cde0:	e3401001 	movt	r1, #1
    cde4:	eb0002c7 	bl	d908 <CString::Append(char const*)>
    cde8:	e1a0000d 	mov	r0, sp
    cdec:	e3031678 	movw	r1, #13944	; 0x3678
    cdf0:	e3401001 	movt	r1, #1
    cdf4:	eb0002c3 	bl	d908 <CString::Append(char const*)>
    cdf8:	e1a0000d 	mov	r0, sp
    cdfc:	eb0002a5 	bl	d898 <CString::operator char const*() const>
    ce00:	e1a01000 	mov	r1, r0
    ce04:	e1a00004 	mov	r0, r4
    ce08:	ebffff37 	bl	caec <CLogger::Write(char const*)>
    ce0c:	eb000b08 	bl	fa34 <CMultiCoreSupport::HaltAll()>
    ce10:	eaffffbc 	b	cd08 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    ce14:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    ce18:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ce1c:	e24dd010 	sub	sp, sp, #16
    ce20:	e28dc018 	add	ip, sp, #24
    ce24:	e59d3014 	ldr	r3, [sp, #20]
    ce28:	e58dc000 	str	ip, [sp]
    ce2c:	e58dc00c 	str	ip, [sp, #12]
    ce30:	ebffff77 	bl	cc14 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    ce34:	e28dd010 	add	sp, sp, #16
    ce38:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ce3c:	e28dd004 	add	sp, sp, #4
    ce40:	e12fff1e 	bx	lr

0000ce44 <CLogger::Initialize(CDevice*)>:
    ce44:	e92d4010 	push	{r4, lr}
    ce48:	e5801008 	str	r1, [r0, #8]
    ce4c:	e1a04000 	mov	r4, r0
    ce50:	e24dd008 	sub	sp, sp, #8
    ce54:	eb000a43 	bl	f768 <CMachineInfo::Get()>
    ce58:	eb0009cf 	bl	f59c <CMachineInfo::GetMachineName() const>
    ce5c:	e3a02003 	mov	r2, #3
    ce60:	e58d0000 	str	r0, [sp]
    ce64:	e303367c 	movw	r3, #13948	; 0x367c
    ce68:	e3403001 	movt	r3, #1
    ce6c:	e1a00004 	mov	r0, r4
    ce70:	e3031694 	movw	r1, #13972	; 0x3694
    ce74:	e3401001 	movt	r1, #1
    ce78:	ebffffe5 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ce7c:	e3a00001 	mov	r0, #1
    ce80:	e28dd008 	add	sp, sp, #8
    ce84:	e8bd8010 	pop	{r4, pc}

0000ce88 <CSerialDevice::Read(void*, unsigned int)>:
    ce88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ce8c:	e2515000 	subs	r5, r1, #0
    ce90:	e1a04000 	mov	r4, r0
    ce94:	e1a06002 	mov	r6, r2
    ce98:	0a00004b 	beq	cfcc <CSerialDevice::Read(void*, unsigned int)+0x144>
    ce9c:	e59470a4 	ldr	r7, [r4, #164]	; 0xa4
    cea0:	e3570000 	cmp	r7, #0
    cea4:	0a000023 	beq	cf38 <CSerialDevice::Read(void*, unsigned int)+0xb0>
    cea8:	e2848d43 	add	r8, r4, #4288	; 0x10c0
    ceac:	e2888008 	add	r8, r8, #8
    ceb0:	e1a00008 	mov	r0, r8
    ceb4:	eb000b71 	bl	fc80 <CSpinLock::Acquire()>
    ceb8:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    cebc:	e3530000 	cmp	r3, #0
    cec0:	ba00003d 	blt	cfbc <CSerialDevice::Read(void*, unsigned int)+0x134>
    cec4:	e3560000 	cmp	r6, #0
    cec8:	0a00004a 	beq	cff8 <CSerialDevice::Read(void*, unsigned int)+0x170>
    cecc:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    ced0:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    ced4:	e1520003 	cmp	r2, r3
    ced8:	0a000048 	beq	d000 <CSerialDevice::Read(void*, unsigned int)+0x178>
    cedc:	e3a02001 	mov	r2, #1
    cee0:	ea000003 	b	cef4 <CSerialDevice::Read(void*, unsigned int)+0x6c>
    cee4:	e59418b0 	ldr	r1, [r4, #2224]	; 0x8b0
    cee8:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    ceec:	e1510003 	cmp	r1, r3
    cef0:	0a00000c 	beq	cf28 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    cef4:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    cef8:	e1560002 	cmp	r6, r2
    cefc:	e1a07002 	mov	r7, r2
    cf00:	e2822001 	add	r2, r2, #1
    cf04:	e0841003 	add	r1, r4, r3
    cf08:	e2833001 	add	r3, r3, #1
    cf0c:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    cf10:	e5d130b0 	ldrb	r3, [r1, #176]	; 0xb0
    cf14:	e4c53001 	strb	r3, [r5], #1
    cf18:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    cf1c:	e7ea3053 	ubfx	r3, r3, #0, #11
    cf20:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    cf24:	1affffee 	bne	cee4 <CSerialDevice::Read(void*, unsigned int)+0x5c>
    cf28:	e1a00008 	mov	r0, r8
    cf2c:	eb000b6f 	bl	fcf0 <CSpinLock::Release()>
    cf30:	e1a00007 	mov	r0, r7
    cf34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cf38:	e3560000 	cmp	r6, #0
    cf3c:	0a000031 	beq	d008 <CSerialDevice::Read(void*, unsigned int)+0x180>
    cf40:	e3a01a01 	mov	r1, #4096	; 0x1000
    cf44:	e3431f20 	movt	r1, #16160	; 0x3f20
    cf48:	e5913018 	ldr	r3, [r1, #24]
    cf4c:	e3130010 	tst	r3, #16
    cf50:	1afffff6 	bne	cf30 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cf54:	e5913000 	ldr	r3, [r1]
    cf58:	e3130b01 	tst	r3, #1024	; 0x400
    cf5c:	1a000014 	bne	cfb4 <CSerialDevice::Read(void*, unsigned int)+0x12c>
    cf60:	e3130b02 	tst	r3, #2048	; 0x800
    cf64:	1a00001f 	bne	cfe8 <CSerialDevice::Read(void*, unsigned int)+0x160>
    cf68:	e3130c01 	tst	r3, #256	; 0x100
    cf6c:	03a02001 	moveq	r2, #1
    cf70:	0a000004 	beq	cf88 <CSerialDevice::Read(void*, unsigned int)+0x100>
    cf74:	ea00001d 	b	cff0 <CSerialDevice::Read(void*, unsigned int)+0x168>
    cf78:	e3130b02 	tst	r3, #2048	; 0x800
    cf7c:	1a000019 	bne	cfe8 <CSerialDevice::Read(void*, unsigned int)+0x160>
    cf80:	e3130c01 	tst	r3, #256	; 0x100
    cf84:	1a000019 	bne	cff0 <CSerialDevice::Read(void*, unsigned int)+0x168>
    cf88:	e1560002 	cmp	r6, r2
    cf8c:	e1a07002 	mov	r7, r2
    cf90:	e4c53001 	strb	r3, [r5], #1
    cf94:	e2822001 	add	r2, r2, #1
    cf98:	0affffe4 	beq	cf30 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cf9c:	e5913018 	ldr	r3, [r1, #24]
    cfa0:	e3130010 	tst	r3, #16
    cfa4:	1affffe1 	bne	cf30 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cfa8:	e5913000 	ldr	r3, [r1]
    cfac:	e3130b01 	tst	r3, #1024	; 0x400
    cfb0:	0afffff0 	beq	cf78 <CSerialDevice::Read(void*, unsigned int)+0xf0>
    cfb4:	e3e07000 	mvn	r7, #0
    cfb8:	eaffffdc 	b	cf30 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cfbc:	e59478b8 	ldr	r7, [r4, #2232]	; 0x8b8
    cfc0:	e3a03000 	mov	r3, #0
    cfc4:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    cfc8:	eaffffd6 	b	cf28 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    cfcc:	e30316b8 	movw	r1, #14008	; 0x36b8
    cfd0:	e3401001 	movt	r1, #1
    cfd4:	e30306c4 	movw	r0, #14020	; 0x36c4
    cfd8:	e3400001 	movt	r0, #1
    cfdc:	e3a02c01 	mov	r2, #256	; 0x100
    cfe0:	ebfffd47 	bl	c504 <assertion_failed>
    cfe4:	eaffffac 	b	ce9c <CSerialDevice::Read(void*, unsigned int)+0x14>
    cfe8:	e3e07001 	mvn	r7, #1
    cfec:	eaffffcf 	b	cf30 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cff0:	e3e07002 	mvn	r7, #2
    cff4:	eaffffcd 	b	cf30 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cff8:	e1a07006 	mov	r7, r6
    cffc:	eaffffc9 	b	cf28 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    d000:	e3a07000 	mov	r7, #0
    d004:	eaffffc7 	b	cf28 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    d008:	e1a07006 	mov	r7, r6
    d00c:	eaffffc7 	b	cf30 <CSerialDevice::Read(void*, unsigned int)+0xa8>

0000d010 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>:
    d010:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d014:	e1a04000 	mov	r4, r0
    d018:	e1a06002 	mov	r6, r2
    d01c:	e1a07001 	mov	r7, r1
    d020:	eb000fbd 	bl	10f1c <CDevice::CDevice()>
    d024:	e1a00004 	mov	r0, r4
    d028:	e3a03000 	mov	r3, #0
    d02c:	e1a02003 	mov	r2, r3
    d030:	e3a01020 	mov	r1, #32
    d034:	e303c6a4 	movw	ip, #13988	; 0x36a4
    d038:	e340c001 	movt	ip, #1
    d03c:	e480c004 	str	ip, [r0], #4
    d040:	e3a05001 	mov	r5, #1
    d044:	ebfff175 	bl	9620 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d048:	e3a03000 	mov	r3, #0
    d04c:	e1a02003 	mov	r2, r3
    d050:	e284002c 	add	r0, r4, #44	; 0x2c
    d054:	e3a01021 	mov	r1, #33	; 0x21
    d058:	ebfff170 	bl	9620 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d05c:	e2840054 	add	r0, r4, #84	; 0x54
    d060:	e3a03000 	mov	r3, #0
    d064:	e3a02004 	mov	r2, #4
    d068:	e3a0100e 	mov	r1, #14
    d06c:	ebfff16b 	bl	9620 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d070:	e3a0100f 	mov	r1, #15
    d074:	e284007c 	add	r0, r4, #124	; 0x7c
    d078:	e3a03000 	mov	r3, #0
    d07c:	e3a02004 	mov	r2, #4
    d080:	ebfff166 	bl	9620 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d084:	e2842a01 	add	r2, r4, #4096	; 0x1000
    d088:	e3560000 	cmp	r6, #0
    d08c:	e2840d43 	add	r0, r4, #4288	; 0x10c0
    d090:	e3a03000 	mov	r3, #0
    d094:	e58470a4 	str	r7, [r4, #164]	; 0xa4
    d098:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    d09c:	13a01002 	movne	r1, #2
    d0a0:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    d0a4:	01a01005 	moveq	r1, r5
    d0a8:	e58430ac 	str	r3, [r4, #172]	; 0xac
    d0ac:	e2800008 	add	r0, r0, #8
    d0b0:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    d0b4:	e58460a8 	str	r6, [r4, #168]	; 0xa8
    d0b8:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    d0bc:	e58250c4 	str	r5, [r2, #196]	; 0xc4
    d0c0:	e58230c0 	str	r3, [r2, #192]	; 0xc0
    d0c4:	eb000ad1 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
    d0c8:	e2840d43 	add	r0, r4, #4288	; 0x10c0
    d0cc:	e1a01005 	mov	r1, r5
    d0d0:	e2800020 	add	r0, r0, #32
    d0d4:	eb000acd 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
    d0d8:	e1a00004 	mov	r0, r4
    d0dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d0e0 <CSerialDevice::Initialize(unsigned int)>:
    d0e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d0e4:	e1a08001 	mov	r8, r1
    d0e8:	e1a05000 	mov	r5, r0
    d0ec:	eb00099d 	bl	f768 <CMachineInfo::Get()>
    d0f0:	e3a01002 	mov	r1, #2
    d0f4:	eb00093e 	bl	f5f4 <CMachineInfo::GetClockRate(unsigned int) const>
    d0f8:	e2507000 	subs	r7, r0, #0
    d0fc:	0a000060 	beq	d284 <CSerialDevice::Initialize(unsigned int)+0x1a4>
    d100:	e30037d4 	movw	r3, #2004	; 0x7d4
    d104:	e340303d 	movt	r3, #61	; 0x3d
    d108:	e2482f4b 	sub	r2, r8, #300	; 0x12c
    d10c:	e1520003 	cmp	r2, r3
    d110:	8a000054 	bhi	d268 <CSerialDevice::Initialize(unsigned int)+0x188>
    d114:	e1a04208 	lsl	r4, r8, #4
    d118:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    d11c:	e736f417 	udiv	r6, r7, r4
    d120:	e2462001 	sub	r2, r6, #1
    d124:	e1520003 	cmp	r2, r3
    d128:	8a000047 	bhi	d24c <CSerialDevice::Initialize(unsigned int)+0x16c>
    d12c:	e0617694 	mls	r1, r4, r6, r7
    d130:	e1a01181 	lsl	r1, r1, #3
    d134:	e731f811 	udiv	r1, r1, r8
    d138:	e2014001 	and	r4, r1, #1
    d13c:	e08440a1 	add	r4, r4, r1, lsr #1
    d140:	e354003f 	cmp	r4, #63	; 0x3f
    d144:	8a00002b 	bhi	d1f8 <CSerialDevice::Initialize(unsigned int)+0x118>
    d148:	e59500a4 	ldr	r0, [r5, #164]	; 0xa4
    d14c:	e3500000 	cmp	r0, #0
    d150:	0a000031 	beq	d21c <CSerialDevice::Initialize(unsigned int)+0x13c>
    d154:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
    d158:	e30d2644 	movw	r2, #54852	; 0xd644
    d15c:	e3402000 	movt	r2, #0
    d160:	e3530000 	cmp	r3, #0
    d164:	e3a01039 	mov	r1, #57	; 0x39
    d168:	e1a03005 	mov	r3, r5
    d16c:	0a00001f 	beq	d1f0 <CSerialDevice::Initialize(unsigned int)+0x110>
    d170:	eb000609 	bl	e99c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    d174:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
    d178:	e3a03a01 	mov	r3, #4096	; 0x1000
    d17c:	e3433f20 	movt	r3, #16160	; 0x3f20
    d180:	e3520000 	cmp	r2, #0
    d184:	e3a01000 	mov	r1, #0
    d188:	e3a02001 	mov	r2, #1
    d18c:	e58520ac 	str	r2, [r5, #172]	; 0xac
    d190:	e5831038 	str	r1, [r3, #56]	; 0x38
    d194:	e30027ff 	movw	r2, #2047	; 0x7ff
    d198:	e5832044 	str	r2, [r3, #68]	; 0x44
    d19c:	e5836024 	str	r6, [r3, #36]	; 0x24
    d1a0:	e5834028 	str	r4, [r3, #40]	; 0x28
    d1a4:	0a000023 	beq	d238 <CSerialDevice::Initialize(unsigned int)+0x158>
    d1a8:	e3a02009 	mov	r2, #9
    d1ac:	e3a01070 	mov	r1, #112	; 0x70
    d1b0:	e5832034 	str	r2, [r3, #52]	; 0x34
    d1b4:	e3a02e45 	mov	r2, #1104	; 0x450
    d1b8:	e583102c 	str	r1, [r3, #44]	; 0x2c
    d1bc:	e5832038 	str	r2, [r3, #56]	; 0x38
    d1c0:	e3a03a01 	mov	r3, #4096	; 0x1000
    d1c4:	e3433f20 	movt	r3, #16160	; 0x3f20
    d1c8:	e3002301 	movw	r2, #769	; 0x301
    d1cc:	e5832030 	str	r2, [r3, #48]	; 0x30
    d1d0:	ebfffe0e 	bl	ca10 <CDeviceNameService::Get()>
    d1d4:	e1a02005 	mov	r2, r5
    d1d8:	e3a03000 	mov	r3, #0
    d1dc:	e3031744 	movw	r1, #14148	; 0x3744
    d1e0:	e3401001 	movt	r1, #1
    d1e4:	ebfffda6 	bl	c884 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    d1e8:	e3a00001 	mov	r0, #1
    d1ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d1f0:	eb000648 	bl	eb18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    d1f4:	eaffffde 	b	d174 <CSerialDevice::Initialize(unsigned int)+0x94>
    d1f8:	e30316b8 	movw	r1, #14008	; 0x36b8
    d1fc:	e3401001 	movt	r1, #1
    d200:	e3030730 	movw	r0, #14128	; 0x3730
    d204:	e3400001 	movt	r0, #1
    d208:	e3a02091 	mov	r2, #145	; 0x91
    d20c:	ebfffcbc 	bl	c504 <assertion_failed>
    d210:	e59500a4 	ldr	r0, [r5, #164]	; 0xa4
    d214:	e3500000 	cmp	r0, #0
    d218:	1affffcd 	bne	d154 <CSerialDevice::Initialize(unsigned int)+0x74>
    d21c:	e3a03a01 	mov	r3, #4096	; 0x1000
    d220:	e3433f20 	movt	r3, #16160	; 0x3f20
    d224:	e30027ff 	movw	r2, #2047	; 0x7ff
    d228:	e5830038 	str	r0, [r3, #56]	; 0x38
    d22c:	e5832044 	str	r2, [r3, #68]	; 0x44
    d230:	e5836024 	str	r6, [r3, #36]	; 0x24
    d234:	e5834028 	str	r4, [r3, #40]	; 0x28
    d238:	e3a03a01 	mov	r3, #4096	; 0x1000
    d23c:	e3433f20 	movt	r3, #16160	; 0x3f20
    d240:	e3a02060 	mov	r2, #96	; 0x60
    d244:	e583202c 	str	r2, [r3, #44]	; 0x2c
    d248:	eaffffdc 	b	d1c0 <CSerialDevice::Initialize(unsigned int)+0xe0>
    d24c:	e30316b8 	movw	r1, #14008	; 0x36b8
    d250:	e3401001 	movt	r1, #1
    d254:	e303070c 	movw	r0, #14092	; 0x370c
    d258:	e3400001 	movt	r0, #1
    d25c:	e3a0208e 	mov	r2, #142	; 0x8e
    d260:	ebfffca7 	bl	c504 <assertion_failed>
    d264:	eaffffb0 	b	d12c <CSerialDevice::Initialize(unsigned int)+0x4c>
    d268:	e30316b8 	movw	r1, #14008	; 0x36b8
    d26c:	e3401001 	movt	r1, #1
    d270:	e30306e0 	movw	r0, #14048	; 0x36e0
    d274:	e3400001 	movt	r0, #1
    d278:	e3a0208b 	mov	r2, #139	; 0x8b
    d27c:	ebfffca0 	bl	c504 <assertion_failed>
    d280:	eaffffa3 	b	d114 <CSerialDevice::Initialize(unsigned int)+0x34>
    d284:	e30316b8 	movw	r1, #14008	; 0x36b8
    d288:	e3401001 	movt	r1, #1
    d28c:	e30306d0 	movw	r0, #14032	; 0x36d0
    d290:	e3400001 	movt	r0, #1
    d294:	e3a02089 	mov	r2, #137	; 0x89
    d298:	ebfffc99 	bl	c504 <assertion_failed>
    d29c:	eaffff97 	b	d100 <CSerialDevice::Initialize(unsigned int)+0x20>

0000d2a0 <CSerialDevice::GetOptions() const>:
    d2a0:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d2a4:	e59000c4 	ldr	r0, [r0, #196]	; 0xc4
    d2a8:	e12fff1e 	bx	lr

0000d2ac <CSerialDevice::SetOptions(unsigned int)>:
    d2ac:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d2b0:	e58010c4 	str	r1, [r0, #196]	; 0xc4
    d2b4:	e12fff1e 	bx	lr

0000d2b8 <CSerialDevice::Write(unsigned char)>:
    d2b8:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    d2bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d2c0:	e3530000 	cmp	r3, #0
    d2c4:	03a00a01 	moveq	r0, #4096	; 0x1000
    d2c8:	03430f20 	movteq	r0, #16160	; 0x3f20
    d2cc:	0a000019 	beq	d338 <CSerialDevice::Write(unsigned char)+0x80>
    d2d0:	e2806d43 	add	r6, r0, #4288	; 0x10c0
    d2d4:	e1a04000 	mov	r4, r0
    d2d8:	e2866008 	add	r6, r6, #8
    d2dc:	e1a05001 	mov	r5, r1
    d2e0:	e1a00006 	mov	r0, r6
    d2e4:	eb000a65 	bl	fc80 <CSpinLock::Acquire()>
    d2e8:	e2843a01 	add	r3, r4, #4096	; 0x1000
    d2ec:	e59320bc 	ldr	r2, [r3, #188]	; 0xbc
    d2f0:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
    d2f4:	e2822001 	add	r2, r2, #1
    d2f8:	e7ea2052 	ubfx	r2, r2, #0, #11
    d2fc:	e1520001 	cmp	r2, r1
    d300:	13a07001 	movne	r7, #1
    d304:	03a07000 	moveq	r7, #0
    d308:	159320bc 	ldrne	r2, [r3, #188]	; 0xbc
    d30c:	10840002 	addne	r0, r4, r2
    d310:	10822007 	addne	r2, r2, r7
    d314:	158320bc 	strne	r2, [r3, #188]	; 0xbc
    d318:	15c058bc 	strbne	r5, [r0, #2236]	; 0x8bc
    d31c:	e1a00006 	mov	r0, r6
    d320:	159320bc 	ldrne	r2, [r3, #188]	; 0xbc
    d324:	17ea2052 	ubfxne	r2, r2, #0, #11
    d328:	158320bc 	strne	r2, [r3, #188]	; 0xbc
    d32c:	eb000a6f 	bl	fcf0 <CSpinLock::Release()>
    d330:	e1a00007 	mov	r0, r7
    d334:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d338:	e5902018 	ldr	r2, [r0, #24]
    d33c:	e3a03a01 	mov	r3, #4096	; 0x1000
    d340:	e3433f20 	movt	r3, #16160	; 0x3f20
    d344:	e3120020 	tst	r2, #32
    d348:	1afffffa 	bne	d338 <CSerialDevice::Write(unsigned char)+0x80>
    d34c:	e3a07001 	mov	r7, #1
    d350:	e5831000 	str	r1, [r3]
    d354:	e1a00007 	mov	r0, r7
    d358:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d35c <CSerialDevice::Write(void const*, unsigned int)>:
    d35c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d360:	e2809d43 	add	r9, r0, #4288	; 0x10c0
    d364:	e1a04001 	mov	r4, r1
    d368:	e2899020 	add	r9, r9, #32
    d36c:	e1a06000 	mov	r6, r0
    d370:	e1a00009 	mov	r0, r9
    d374:	e1a07002 	mov	r7, r2
    d378:	eb000a40 	bl	fc80 <CSpinLock::Acquire()>
    d37c:	e3540000 	cmp	r4, #0
    d380:	0a000049 	beq	d4ac <CSerialDevice::Write(void const*, unsigned int)+0x150>
    d384:	e3570000 	cmp	r7, #0
    d388:	0a00004e 	beq	d4c8 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    d38c:	e3a05000 	mov	r5, #0
    d390:	e2868a01 	add	r8, r6, #4096	; 0x1000
    d394:	ea000002 	b	d3a4 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    d398:	e2855001 	add	r5, r5, #1
    d39c:	e1550007 	cmp	r5, r7
    d3a0:	0a00000f 	beq	d3e4 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    d3a4:	e5d41000 	ldrb	r1, [r4]
    d3a8:	e1a00006 	mov	r0, r6
    d3ac:	ebffffc1 	bl	d2b8 <CSerialDevice::Write(unsigned char)>
    d3b0:	e3500000 	cmp	r0, #0
    d3b4:	0a00000a 	beq	d3e4 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    d3b8:	e4d43001 	ldrb	r3, [r4], #1
    d3bc:	e353000a 	cmp	r3, #10
    d3c0:	1afffff4 	bne	d398 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    d3c4:	e59830c4 	ldr	r3, [r8, #196]	; 0xc4
    d3c8:	e3130001 	tst	r3, #1
    d3cc:	0afffff1 	beq	d398 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    d3d0:	e3a0100d 	mov	r1, #13
    d3d4:	e1a00006 	mov	r0, r6
    d3d8:	ebffffb6 	bl	d2b8 <CSerialDevice::Write(unsigned char)>
    d3dc:	e3500000 	cmp	r0, #0
    d3e0:	1affffec 	bne	d398 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    d3e4:	e1a00009 	mov	r0, r9
    d3e8:	eb000a40 	bl	fcf0 <CSpinLock::Release()>
    d3ec:	e59630a4 	ldr	r3, [r6, #164]	; 0xa4
    d3f0:	e3530000 	cmp	r3, #0
    d3f4:	0a000024 	beq	d48c <CSerialDevice::Write(void const*, unsigned int)+0x130>
    d3f8:	e2864d43 	add	r4, r6, #4288	; 0x10c0
    d3fc:	e2844008 	add	r4, r4, #8
    d400:	e1a00004 	mov	r0, r4
    d404:	eb000a1d 	bl	fc80 <CSpinLock::Acquire()>
    d408:	e2863a01 	add	r3, r6, #4096	; 0x1000
    d40c:	e59310bc 	ldr	r1, [r3, #188]	; 0xbc
    d410:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d414:	e1510002 	cmp	r1, r2
    d418:	0a000019 	beq	d484 <CSerialDevice::Write(void const*, unsigned int)+0x128>
    d41c:	e59320bc 	ldr	r2, [r3, #188]	; 0xbc
    d420:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
    d424:	e1510002 	cmp	r1, r2
    d428:	0a000015 	beq	d484 <CSerialDevice::Write(void const*, unsigned int)+0x128>
    d42c:	e3a01a01 	mov	r1, #4096	; 0x1000
    d430:	e3431f20 	movt	r1, #16160	; 0x3f20
    d434:	e5912018 	ldr	r2, [r1, #24]
    d438:	e3120020 	tst	r2, #32
    d43c:	0a000003 	beq	d450 <CSerialDevice::Write(void const*, unsigned int)+0xf4>
    d440:	ea000013 	b	d494 <CSerialDevice::Write(void const*, unsigned int)+0x138>
    d444:	e5912018 	ldr	r2, [r1, #24]
    d448:	e3120020 	tst	r2, #32
    d44c:	1a000010 	bne	d494 <CSerialDevice::Write(void const*, unsigned int)+0x138>
    d450:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d454:	e0860002 	add	r0, r6, r2
    d458:	e2822001 	add	r2, r2, #1
    d45c:	e58320c0 	str	r2, [r3, #192]	; 0xc0
    d460:	e5d028bc 	ldrb	r2, [r0, #2236]	; 0x8bc
    d464:	e5812000 	str	r2, [r1]
    d468:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d46c:	e7ea2052 	ubfx	r2, r2, #0, #11
    d470:	e58320c0 	str	r2, [r3, #192]	; 0xc0
    d474:	e59300bc 	ldr	r0, [r3, #188]	; 0xbc
    d478:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d47c:	e1500002 	cmp	r0, r2
    d480:	1affffef 	bne	d444 <CSerialDevice::Write(void const*, unsigned int)+0xe8>
    d484:	e1a00004 	mov	r0, r4
    d488:	eb000a18 	bl	fcf0 <CSpinLock::Release()>
    d48c:	e1a00005 	mov	r0, r5
    d490:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d494:	e3a03a01 	mov	r3, #4096	; 0x1000
    d498:	e3433f20 	movt	r3, #16160	; 0x3f20
    d49c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    d4a0:	e3822020 	orr	r2, r2, #32
    d4a4:	e5832038 	str	r2, [r3, #56]	; 0x38
    d4a8:	eafffff5 	b	d484 <CSerialDevice::Write(void const*, unsigned int)+0x128>
    d4ac:	e30316b8 	movw	r1, #14008	; 0x36b8
    d4b0:	e3401001 	movt	r1, #1
    d4b4:	e30306c4 	movw	r0, #14020	; 0x36c4
    d4b8:	e3400001 	movt	r0, #1
    d4bc:	e3a020c2 	mov	r2, #194	; 0xc2
    d4c0:	ebfffc0f 	bl	c504 <assertion_failed>
    d4c4:	eaffffae 	b	d384 <CSerialDevice::Write(void const*, unsigned int)+0x28>
    d4c8:	e1a05007 	mov	r5, r7
    d4cc:	eaffffc4 	b	d3e4 <CSerialDevice::Write(void const*, unsigned int)+0x88>

0000d4d0 <CSerialDevice::InterruptHandler()>:
    d4d0:	e92d4070 	push	{r4, r5, r6, lr}
    d4d4:	e2805d43 	add	r5, r0, #4288	; 0x10c0
    d4d8:	e1a04000 	mov	r4, r0
    d4dc:	e2855008 	add	r5, r5, #8
    d4e0:	e1a00005 	mov	r0, r5
    d4e4:	eb0009e5 	bl	fc80 <CSpinLock::Acquire()>
    d4e8:	e3a03a01 	mov	r3, #4096	; 0x1000
    d4ec:	e3433f20 	movt	r3, #16160	; 0x3f20
    d4f0:	e1a01003 	mov	r1, r3
    d4f4:	e3e0e002 	mvn	lr, #2
    d4f8:	e3e00001 	mvn	r0, #1
    d4fc:	e3e0c000 	mvn	ip, #0
    d500:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    d504:	e5832044 	str	r2, [r3, #68]	; 0x44
    d508:	e5913018 	ldr	r3, [r1, #24]
    d50c:	e3a02a01 	mov	r2, #4096	; 0x1000
    d510:	e3432f20 	movt	r2, #16160	; 0x3f20
    d514:	e3130010 	tst	r3, #16
    d518:	1a000024 	bne	d5b0 <CSerialDevice::InterruptHandler()+0xe0>
    d51c:	e5912000 	ldr	r2, [r1]
    d520:	e3120b01 	tst	r2, #1024	; 0x400
    d524:	0a000011 	beq	d570 <CSerialDevice::InterruptHandler()+0xa0>
    d528:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d52c:	e3530000 	cmp	r3, #0
    d530:	0584c8b8 	streq	ip, [r4, #2232]	; 0x8b8
    d534:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    d538:	e59468b4 	ldr	r6, [r4, #2228]	; 0x8b4
    d53c:	e2833001 	add	r3, r3, #1
    d540:	e7ea3053 	ubfx	r3, r3, #0, #11
    d544:	e1530006 	cmp	r3, r6
    d548:	0a00000e 	beq	d588 <CSerialDevice::InterruptHandler()+0xb8>
    d54c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    d550:	e0846003 	add	r6, r4, r3
    d554:	e2833001 	add	r3, r3, #1
    d558:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    d55c:	e5c620b0 	strb	r2, [r6, #176]	; 0xb0
    d560:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    d564:	e7ea3053 	ubfx	r3, r3, #0, #11
    d568:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    d56c:	eaffffe5 	b	d508 <CSerialDevice::InterruptHandler()+0x38>
    d570:	e3120b02 	tst	r2, #2048	; 0x800
    d574:	0a000007 	beq	d598 <CSerialDevice::InterruptHandler()+0xc8>
    d578:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d57c:	e3530000 	cmp	r3, #0
    d580:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    d584:	eaffffea 	b	d534 <CSerialDevice::InterruptHandler()+0x64>
    d588:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d58c:	e3530000 	cmp	r3, #0
    d590:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    d594:	eaffffdb 	b	d508 <CSerialDevice::InterruptHandler()+0x38>
    d598:	e3120c01 	tst	r2, #256	; 0x100
    d59c:	0affffe4 	beq	d534 <CSerialDevice::InterruptHandler()+0x64>
    d5a0:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d5a4:	e3530000 	cmp	r3, #0
    d5a8:	0584e8b8 	streq	lr, [r4, #2232]	; 0x8b8
    d5ac:	eaffffe0 	b	d534 <CSerialDevice::InterruptHandler()+0x64>
    d5b0:	e5923018 	ldr	r3, [r2, #24]
    d5b4:	e3130020 	tst	r3, #32
    d5b8:	1a000016 	bne	d618 <CSerialDevice::InterruptHandler()+0x148>
    d5bc:	e2843a01 	add	r3, r4, #4096	; 0x1000
    d5c0:	e59300bc 	ldr	r0, [r3, #188]	; 0xbc
    d5c4:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
    d5c8:	e1500001 	cmp	r0, r1
    d5cc:	11a01002 	movne	r1, r2
    d5d0:	1a000004 	bne	d5e8 <CSerialDevice::InterruptHandler()+0x118>
    d5d4:	ea000012 	b	d624 <CSerialDevice::InterruptHandler()+0x154>
    d5d8:	e59300bc 	ldr	r0, [r3, #188]	; 0xbc
    d5dc:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d5e0:	e1500002 	cmp	r0, r2
    d5e4:	0a00000e 	beq	d624 <CSerialDevice::InterruptHandler()+0x154>
    d5e8:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d5ec:	e0840002 	add	r0, r4, r2
    d5f0:	e2822001 	add	r2, r2, #1
    d5f4:	e58320c0 	str	r2, [r3, #192]	; 0xc0
    d5f8:	e5d028bc 	ldrb	r2, [r0, #2236]	; 0x8bc
    d5fc:	e5812000 	str	r2, [r1]
    d600:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d604:	e7ea2052 	ubfx	r2, r2, #0, #11
    d608:	e58320c0 	str	r2, [r3, #192]	; 0xc0
    d60c:	e5912018 	ldr	r2, [r1, #24]
    d610:	e3120020 	tst	r2, #32
    d614:	0affffef 	beq	d5d8 <CSerialDevice::InterruptHandler()+0x108>
    d618:	e1a00005 	mov	r0, r5
    d61c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d620:	ea0009b2 	b	fcf0 <CSpinLock::Release()>
    d624:	e3a03a01 	mov	r3, #4096	; 0x1000
    d628:	e3433f20 	movt	r3, #16160	; 0x3f20
    d62c:	e1a00005 	mov	r0, r5
    d630:	e8bd4070 	pop	{r4, r5, r6, lr}
    d634:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    d638:	e3c22020 	bic	r2, r2, #32
    d63c:	e5832038 	str	r2, [r3, #56]	; 0x38
    d640:	ea0009aa 	b	fcf0 <CSpinLock::Release()>

0000d644 <CSerialDevice::InterruptStub(void*)>:
    d644:	e92d4010 	push	{r4, lr}
    d648:	e2504000 	subs	r4, r0, #0
    d64c:	0a000002 	beq	d65c <CSerialDevice::InterruptStub(void*)+0x18>
    d650:	e1a00004 	mov	r0, r4
    d654:	e8bd4010 	pop	{r4, lr}
    d658:	eaffff9c 	b	d4d0 <CSerialDevice::InterruptHandler()>
    d65c:	e30316b8 	movw	r1, #14008	; 0x36b8
    d660:	e3401001 	movt	r1, #1
    d664:	e30205f0 	movw	r0, #9712	; 0x25f0
    d668:	e3400001 	movt	r0, #1
    d66c:	e30021c1 	movw	r2, #449	; 0x1c1
    d670:	ebfffba3 	bl	c504 <assertion_failed>
    d674:	e1a00004 	mov	r0, r4
    d678:	e8bd4010 	pop	{r4, lr}
    d67c:	eaffff93 	b	d4d0 <CSerialDevice::InterruptHandler()>

0000d680 <CSerialDevice::~CSerialDevice()>:
    d680:	e3a03a01 	mov	r3, #4096	; 0x1000
    d684:	e3433f20 	movt	r3, #16160	; 0x3f20
    d688:	e92d4010 	push	{r4, lr}
    d68c:	e3a02000 	mov	r2, #0
    d690:	e30316a4 	movw	r1, #13988	; 0x36a4
    d694:	e3401001 	movt	r1, #1
    d698:	e5801000 	str	r1, [r0]
    d69c:	e5832038 	str	r2, [r3, #56]	; 0x38
    d6a0:	e1a04000 	mov	r4, r0
    d6a4:	e5832030 	str	r2, [r3, #48]	; 0x30
    d6a8:	e59030ac 	ldr	r3, [r0, #172]	; 0xac
    d6ac:	e1530002 	cmp	r3, r2
    d6b0:	0a000006 	beq	d6d0 <CSerialDevice::~CSerialDevice()+0x50>
    d6b4:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    d6b8:	e1500002 	cmp	r0, r2
    d6bc:	0a00001a 	beq	d72c <CSerialDevice::~CSerialDevice()+0xac>
    d6c0:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
    d6c4:	e3530000 	cmp	r3, #0
    d6c8:	0a000014 	beq	d720 <CSerialDevice::~CSerialDevice()+0xa0>
    d6cc:	eb0004e1 	bl	ea58 <CInterruptSystem::DisconnectFIQ()>
    d6d0:	e2840d43 	add	r0, r4, #4288	; 0x10c0
    d6d4:	e3a03000 	mov	r3, #0
    d6d8:	e2800020 	add	r0, r0, #32
    d6dc:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    d6e0:	eb000959 	bl	fc4c <CSpinLock::~CSpinLock()>
    d6e4:	e2840d43 	add	r0, r4, #4288	; 0x10c0
    d6e8:	e2800008 	add	r0, r0, #8
    d6ec:	eb000956 	bl	fc4c <CSpinLock::~CSpinLock()>
    d6f0:	e284007c 	add	r0, r4, #124	; 0x7c
    d6f4:	ebffed54 	bl	8c4c <CGPIOPin::~CGPIOPin()>
    d6f8:	e2840054 	add	r0, r4, #84	; 0x54
    d6fc:	ebffed52 	bl	8c4c <CGPIOPin::~CGPIOPin()>
    d700:	e284002c 	add	r0, r4, #44	; 0x2c
    d704:	ebffed50 	bl	8c4c <CGPIOPin::~CGPIOPin()>
    d708:	e2840004 	add	r0, r4, #4
    d70c:	ebffed4e 	bl	8c4c <CGPIOPin::~CGPIOPin()>
    d710:	e1a00004 	mov	r0, r4
    d714:	eb000df4 	bl	10eec <CDevice::~CDevice()>
    d718:	e1a00004 	mov	r0, r4
    d71c:	e8bd8010 	pop	{r4, pc}
    d720:	e3a01039 	mov	r1, #57	; 0x39
    d724:	eb000534 	bl	ebfc <CInterruptSystem::DisconnectIRQ(unsigned int)>
    d728:	eaffffe8 	b	d6d0 <CSerialDevice::~CSerialDevice()+0x50>
    d72c:	e30316b8 	movw	r1, #14008	; 0x36b8
    d730:	e3401001 	movt	r1, #1
    d734:	e3020518 	movw	r0, #9496	; 0x2518
    d738:	e3400001 	movt	r0, #1
    d73c:	e3a02078 	mov	r2, #120	; 0x78
    d740:	ebfffb6f 	bl	c504 <assertion_failed>
    d744:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    d748:	eaffffdc 	b	d6c0 <CSerialDevice::~CSerialDevice()+0x40>

0000d74c <CSerialDevice::~CSerialDevice()>:
    d74c:	e92d4010 	push	{r4, lr}
    d750:	e1a04000 	mov	r4, r0
    d754:	ebffffc9 	bl	d680 <CSerialDevice::~CSerialDevice()>
    d758:	e1a00004 	mov	r0, r4
    d75c:	e30110f8 	movw	r1, #4344	; 0x10f8
    d760:	ebfff0e9 	bl	9b0c <operator delete(void*, unsigned int)>
    d764:	e1a00004 	mov	r0, r4
    d768:	e8bd8010 	pop	{r4, pc}
    d76c:	00000000 	andeq	r0, r0, r0

0000d770 <CString::~CString()>:
    d770:	e92d4010 	push	{r4, lr}
    d774:	e1a04000 	mov	r4, r0
    d778:	e5900004 	ldr	r0, [r0, #4]
    d77c:	e3033754 	movw	r3, #14164	; 0x3754
    d780:	e3403001 	movt	r3, #1
    d784:	e3500000 	cmp	r0, #0
    d788:	e5843000 	str	r3, [r4]
    d78c:	0a000000 	beq	d794 <CString::~CString()+0x24>
    d790:	ebfff0dc 	bl	9b08 <operator delete[](void*)>
    d794:	e1a00004 	mov	r0, r4
    d798:	e8bd8010 	pop	{r4, pc}

0000d79c <CString::~CString()>:
    d79c:	e92d4010 	push	{r4, lr}
    d7a0:	e1a04000 	mov	r4, r0
    d7a4:	e5900004 	ldr	r0, [r0, #4]
    d7a8:	e3033754 	movw	r3, #14164	; 0x3754
    d7ac:	e3403001 	movt	r3, #1
    d7b0:	e3500000 	cmp	r0, #0
    d7b4:	e5843000 	str	r3, [r4]
    d7b8:	0a000000 	beq	d7c0 <CString::~CString()+0x24>
    d7bc:	ebfff0d1 	bl	9b08 <operator delete[](void*)>
    d7c0:	e1a00004 	mov	r0, r4
    d7c4:	e3a01010 	mov	r1, #16
    d7c8:	ebfff0cf 	bl	9b0c <operator delete(void*, unsigned int)>
    d7cc:	e1a00004 	mov	r0, r4
    d7d0:	e8bd8010 	pop	{r4, pc}

0000d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>:
    d7d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d7d8:	e990002c 	ldmib	r0, {r2, r3, r5}
    d7dc:	e0625005 	rsb	r5, r2, r5
    d7e0:	e0851001 	add	r1, r5, r1
    d7e4:	e2812001 	add	r2, r1, #1
    d7e8:	e1520003 	cmp	r2, r3
    d7ec:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d7f0:	e1a04000 	mov	r4, r0
    d7f4:	e2816041 	add	r6, r1, #65	; 0x41
    d7f8:	e1a00006 	mov	r0, r6
    d7fc:	ebfff0bf 	bl	9b00 <operator new[](unsigned int)>
    d800:	e3a02000 	mov	r2, #0
    d804:	e594300c 	ldr	r3, [r4, #12]
    d808:	e1a07000 	mov	r7, r0
    d80c:	e5c32000 	strb	r2, [r3]
    d810:	e5941004 	ldr	r1, [r4, #4]
    d814:	ebfff41c 	bl	a88c <strcpy>
    d818:	e5940004 	ldr	r0, [r4, #4]
    d81c:	e3500000 	cmp	r0, #0
    d820:	0a000000 	beq	d828 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]+0x54>
    d824:	ebfff0b7 	bl	9b08 <operator delete[](void*)>
    d828:	e0875005 	add	r5, r7, r5
    d82c:	e5847004 	str	r7, [r4, #4]
    d830:	e584500c 	str	r5, [r4, #12]
    d834:	e5846008 	str	r6, [r4, #8]
    d838:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d83c <CString::CString()>:
    d83c:	e3a02000 	mov	r2, #0
    d840:	e3031754 	movw	r1, #14164	; 0x3754
    d844:	e3401001 	movt	r1, #1
    d848:	e5802008 	str	r2, [r0, #8]
    d84c:	e8800006 	stm	r0, {r1, r2}
    d850:	e12fff1e 	bx	lr

0000d854 <CString::CString(char const*)>:
    d854:	e92d4070 	push	{r4, r5, r6, lr}
    d858:	e1a04000 	mov	r4, r0
    d85c:	e3033754 	movw	r3, #14164	; 0x3754
    d860:	e3403001 	movt	r3, #1
    d864:	e1a00001 	mov	r0, r1
    d868:	e1a05001 	mov	r5, r1
    d86c:	e5843000 	str	r3, [r4]
    d870:	ebfff3e0 	bl	a7f8 <strlen>
    d874:	e2803001 	add	r3, r0, #1
    d878:	e1a00003 	mov	r0, r3
    d87c:	e5843008 	str	r3, [r4, #8]
    d880:	ebfff09e 	bl	9b00 <operator new[](unsigned int)>
    d884:	e1a01005 	mov	r1, r5
    d888:	e5840004 	str	r0, [r4, #4]
    d88c:	ebfff3fe 	bl	a88c <strcpy>
    d890:	e1a00004 	mov	r0, r4
    d894:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d898 <CString::operator char const*() const>:
    d898:	e5900004 	ldr	r0, [r0, #4]
    d89c:	e3043014 	movw	r3, #16404	; 0x4014
    d8a0:	e3403001 	movt	r3, #1
    d8a4:	e3500000 	cmp	r0, #0
    d8a8:	01a00003 	moveq	r0, r3
    d8ac:	e12fff1e 	bx	lr

0000d8b0 <CString::operator=(char const*)>:
    d8b0:	e92d4070 	push	{r4, r5, r6, lr}
    d8b4:	e1a04000 	mov	r4, r0
    d8b8:	e5900004 	ldr	r0, [r0, #4]
    d8bc:	e1a05001 	mov	r5, r1
    d8c0:	e3500000 	cmp	r0, #0
    d8c4:	0a000000 	beq	d8cc <CString::operator=(char const*)+0x1c>
    d8c8:	ebfff08e 	bl	9b08 <operator delete[](void*)>
    d8cc:	e1a00005 	mov	r0, r5
    d8d0:	ebfff3c8 	bl	a7f8 <strlen>
    d8d4:	e2803001 	add	r3, r0, #1
    d8d8:	e1a00003 	mov	r0, r3
    d8dc:	e5843008 	str	r3, [r4, #8]
    d8e0:	ebfff086 	bl	9b00 <operator new[](unsigned int)>
    d8e4:	e1a01005 	mov	r1, r5
    d8e8:	e5840004 	str	r0, [r4, #4]
    d8ec:	ebfff3e6 	bl	a88c <strcpy>
    d8f0:	e5940004 	ldr	r0, [r4, #4]
    d8f4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d8f8 <CString::GetLength() const>:
    d8f8:	e5900004 	ldr	r0, [r0, #4]
    d8fc:	e3500000 	cmp	r0, #0
    d900:	012fff1e 	bxeq	lr
    d904:	eafff3bb 	b	a7f8 <strlen>

0000d908 <CString::Append(char const*)>:
    d908:	e92d4070 	push	{r4, r5, r6, lr}
    d90c:	e1a04000 	mov	r4, r0
    d910:	e5900004 	ldr	r0, [r0, #4]
    d914:	e3a03001 	mov	r3, #1
    d918:	e1a06001 	mov	r6, r1
    d91c:	e3500000 	cmp	r0, #0
    d920:	e5843008 	str	r3, [r4, #8]
    d924:	0a000003 	beq	d938 <CString::Append(char const*)+0x30>
    d928:	ebfff3b2 	bl	a7f8 <strlen>
    d92c:	e5943008 	ldr	r3, [r4, #8]
    d930:	e0830000 	add	r0, r3, r0
    d934:	e5840008 	str	r0, [r4, #8]
    d938:	e1a00006 	mov	r0, r6
    d93c:	ebfff3ad 	bl	a7f8 <strlen>
    d940:	e5943008 	ldr	r3, [r4, #8]
    d944:	e0800003 	add	r0, r0, r3
    d948:	e5840008 	str	r0, [r4, #8]
    d94c:	ebfff06b 	bl	9b00 <operator new[](unsigned int)>
    d950:	e5941004 	ldr	r1, [r4, #4]
    d954:	e1a05000 	mov	r5, r0
    d958:	e3510000 	cmp	r1, #0
    d95c:	05c01000 	strbeq	r1, [r0]
    d960:	0a000004 	beq	d978 <CString::Append(char const*)+0x70>
    d964:	ebfff3c8 	bl	a88c <strcpy>
    d968:	e5940004 	ldr	r0, [r4, #4]
    d96c:	e3500000 	cmp	r0, #0
    d970:	0a000000 	beq	d978 <CString::Append(char const*)+0x70>
    d974:	ebfff063 	bl	9b08 <operator delete[](void*)>
    d978:	e1a01006 	mov	r1, r6
    d97c:	e1a00005 	mov	r0, r5
    d980:	ebfff3e0 	bl	a908 <strcat>
    d984:	e5845004 	str	r5, [r4, #4]
    d988:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d98c <CString::Compare(char const*) const>:
    d98c:	e5900004 	ldr	r0, [r0, #4]
    d990:	eafff3a2 	b	a820 <strcmp>

0000d994 <CString::Find(char) const>:
    d994:	e5902004 	ldr	r2, [r0, #4]
    d998:	e1d230d0 	ldrsb	r3, [r2]
    d99c:	e3530000 	cmp	r3, #0
    d9a0:	0a000009 	beq	d9cc <CString::Find(char) const+0x38>
    d9a4:	e1510003 	cmp	r1, r3
    d9a8:	e3a00000 	mov	r0, #0
    d9ac:	1a000002 	bne	d9bc <CString::Find(char) const+0x28>
    d9b0:	ea000007 	b	d9d4 <CString::Find(char) const+0x40>
    d9b4:	e1530001 	cmp	r3, r1
    d9b8:	012fff1e 	bxeq	lr
    d9bc:	e1f230d1 	ldrsb	r3, [r2, #1]!
    d9c0:	e2800001 	add	r0, r0, #1
    d9c4:	e3530000 	cmp	r3, #0
    d9c8:	1afffff9 	bne	d9b4 <CString::Find(char) const+0x20>
    d9cc:	e3e00000 	mvn	r0, #0
    d9d0:	e12fff1e 	bx	lr
    d9d4:	e12fff1e 	bx	lr

0000d9d8 <CString::PutChar(char, unsigned int)>:
    d9d8:	e3520000 	cmp	r2, #0
    d9dc:	012fff1e 	bxeq	lr
    d9e0:	e92d4070 	push	{r4, r5, r6, lr}
    d9e4:	e1a04002 	mov	r4, r2
    d9e8:	e1a06001 	mov	r6, r1
    d9ec:	e1a01002 	mov	r1, r2
    d9f0:	e1a05000 	mov	r5, r0
    d9f4:	ebffff76 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    d9f8:	e2443001 	sub	r3, r4, #1
    d9fc:	e595200c 	ldr	r2, [r5, #12]
    da00:	e2433001 	sub	r3, r3, #1
    da04:	e3730001 	cmn	r3, #1
    da08:	e2820001 	add	r0, r2, #1
    da0c:	e585000c 	str	r0, [r5, #12]
    da10:	e5c26000 	strb	r6, [r2]
    da14:	1afffff8 	bne	d9fc <CString::PutChar(char, unsigned int)+0x24>
    da18:	e8bd8070 	pop	{r4, r5, r6, pc}

0000da1c <CString::PutString(char const*)>:
    da1c:	e92d4070 	push	{r4, r5, r6, lr}
    da20:	e1a04000 	mov	r4, r0
    da24:	e1a00001 	mov	r0, r1
    da28:	e1a05001 	mov	r5, r1
    da2c:	ebfff371 	bl	a7f8 <strlen>
    da30:	e2506000 	subs	r6, r0, #0
    da34:	0a000002 	beq	da44 <CString::PutString(char const*)+0x28>
    da38:	e1a01006 	mov	r1, r6
    da3c:	e1a00004 	mov	r0, r4
    da40:	ebffff63 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    da44:	e1a01005 	mov	r1, r5
    da48:	e594000c 	ldr	r0, [r4, #12]
    da4c:	ebfff38e 	bl	a88c <strcpy>
    da50:	e594100c 	ldr	r1, [r4, #12]
    da54:	e0811006 	add	r1, r1, r6
    da58:	e584100c 	str	r1, [r4, #12]
    da5c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000da60 <CString::ReserveSpace(unsigned int)>:
    da60:	e3510000 	cmp	r1, #0
    da64:	012fff1e 	bxeq	lr
    da68:	eaffff59 	b	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>

0000da6c <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    da6c:	e1510002 	cmp	r1, r2
    da70:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    da74:	23a0c001 	movcs	ip, #1
    da78:	3a000018 	bcc	dae0 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x74>
    da7c:	e00c0c92 	mul	ip, r2, ip
    da80:	e734fc11 	udiv	r4, r1, ip
    da84:	e1540002 	cmp	r4, r2
    da88:	e1a0e004 	mov	lr, r4
    da8c:	2afffffa 	bcs	da7c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x10>
    da90:	e3530000 	cmp	r3, #0
    da94:	e1a05000 	mov	r5, r0
    da98:	13a07037 	movne	r7, #55	; 0x37
    da9c:	03a07057 	moveq	r7, #87	; 0x57
    daa0:	ea000001 	b	daac <CString::ntoa(char*, unsigned long, unsigned int, int)+0x40>
    daa4:	e734fc11 	udiv	r4, r1, ip
    daa8:	e1a0e004 	mov	lr, r4
    daac:	e35e0009 	cmp	lr, #9
    dab0:	e087300e 	add	r3, r7, lr
    dab4:	e061149c 	mls	r1, ip, r4, r1
    dab8:	e28ee030 	add	lr, lr, #48	; 0x30
    dabc:	e6af3073 	sxtb	r3, r3
    dac0:	e1a06005 	mov	r6, r5
    dac4:	96af307e 	sxtbls	r3, lr
    dac8:	e4c53001 	strb	r3, [r5], #1
    dacc:	e73cf21c 	udiv	ip, ip, r2
    dad0:	e35c0000 	cmp	ip, #0
    dad4:	1afffff2 	bne	daa4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x38>
    dad8:	e5c6c001 	strb	ip, [r6, #1]
    dadc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    dae0:	e1a0e001 	mov	lr, r1
    dae4:	e3a0c001 	mov	ip, #1
    dae8:	e1a04001 	mov	r4, r1
    daec:	eaffffe7 	b	da90 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x24>

0000daf0 <CString::ftoa(char*, double, unsigned int)>:
    daf0:	eeb50bc0 	vcmpe.f64	d0, #0.0
    daf4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    daf8:	eddf0b88 	vldr	d16, [pc, #544]	; dd20 <CString::ftoa(char*, double, unsigned int)+0x230>
    dafc:	e1a04000 	mov	r4, r0
    db00:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    db04:	e1a06001 	mov	r6, r1
    db08:	ed2d8b02 	vpush	{d8}
    db0c:	e24dd014 	sub	sp, sp, #20
    db10:	eeb08b40 	vmov.f64	d8, d0
    db14:	4eb18b40 	vnegmi.f64	d8, d0
    db18:	43a0302d 	movmi	r3, #45	; 0x2d
    db1c:	42807001 	addmi	r7, r0, #1
    db20:	45c03000 	strbmi	r3, [r0]
    db24:	51a07000 	movpl	r7, r0
    db28:	eeb48be0 	vcmpe.f64	d8, d16
    db2c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    db30:	ca000066 	bgt	dcd0 <CString::ftoa(char*, double, unsigned int)+0x1e0>
    db34:	eefc7bc8 	vcvt.u32.f64	s15, d8
    db38:	ee175a90 	vmov	r5, s15
    db3c:	e3550009 	cmp	r5, #9
    db40:	83a02001 	movhi	r2, #1
    db44:	9a000069 	bls	dcf0 <CString::ftoa(char*, double, unsigned int)+0x200>
    db48:	e1a03182 	lsl	r3, r2, #3
    db4c:	e0832082 	add	r2, r3, r2, lsl #1
    db50:	e733f215 	udiv	r3, r5, r2
    db54:	e3530009 	cmp	r3, #9
    db58:	8afffffa 	bhi	db48 <CString::ftoa(char*, double, unsigned int)+0x58>
    db5c:	e30ceccd 	movw	lr, #52429	; 0xcccd
    db60:	e34ceccc 	movt	lr, #52428	; 0xcccc
    db64:	e1a01007 	mov	r1, r7
    db68:	e1a0c005 	mov	ip, r5
    db6c:	e739f215 	udiv	r9, r5, r2
    db70:	ea000001 	b	db7c <CString::ftoa(char*, double, unsigned int)+0x8c>
    db74:	e739f21c 	udiv	r9, ip, r2
    db78:	e1a03009 	mov	r3, r9
    db7c:	e3530009 	cmp	r3, #9
    db80:	e2830057 	add	r0, r3, #87	; 0x57
    db84:	e2833030 	add	r3, r3, #48	; 0x30
    db88:	e1a08001 	mov	r8, r1
    db8c:	e6af0070 	sxtb	r0, r0
    db90:	e06cc992 	mls	ip, r2, r9, ip
    db94:	96af0073 	sxtbls	r0, r3
    db98:	e4c10001 	strb	r0, [r1], #1
    db9c:	e0832e92 	umull	r2, r3, r2, lr
    dba0:	e1b021a3 	lsrs	r2, r3, #3
    dba4:	1afffff2 	bne	db74 <CString::ftoa(char*, double, unsigned int)+0x84>
    dba8:	e3560000 	cmp	r6, #0
    dbac:	e5c82001 	strb	r2, [r8, #1]
    dbb0:	1a000003 	bne	dbc4 <CString::ftoa(char*, double, unsigned int)+0xd4>
    dbb4:	e1a00004 	mov	r0, r4
    dbb8:	e28dd014 	add	sp, sp, #20
    dbbc:	ecbd8b02 	vpop	{d8}
    dbc0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    dbc4:	e1a00007 	mov	r0, r7
    dbc8:	ebfff30a 	bl	a7f8 <strlen>
    dbcc:	e3560009 	cmp	r6, #9
    dbd0:	23a06009 	movcs	r6, #9
    dbd4:	e2803001 	add	r3, r0, #1
    dbd8:	e3560001 	cmp	r6, #1
    dbdc:	e3a0202e 	mov	r2, #46	; 0x2e
    dbe0:	e7c72000 	strb	r2, [r7, r0]
    dbe4:	e0877003 	add	r7, r7, r3
    dbe8:	0a000045 	beq	dd04 <CString::ftoa(char*, double, unsigned int)+0x214>
    dbec:	e3a02002 	mov	r2, #2
    dbf0:	e3a0300a 	mov	r3, #10
    dbf4:	e2822001 	add	r2, r2, #1
    dbf8:	e1a01183 	lsl	r1, r3, #3
    dbfc:	e1520006 	cmp	r2, r6
    dc00:	e0813083 	add	r3, r1, r3, lsl #1
    dc04:	9afffffa 	bls	dbf4 <CString::ftoa(char*, double, unsigned int)+0x104>
    dc08:	ee073a90 	vmov	s15, r3
    dc0c:	eef81b67 	vcvt.f64.u32	d17, s15
    dc10:	ee075a90 	vmov	s15, r5
    dc14:	eef80b67 	vcvt.f64.u32	d16, s15
    dc18:	ee388b60 	vsub.f64	d8, d8, d16
    dc1c:	ee288b21 	vmul.f64	d8, d8, d17
    dc20:	eefc7bc8 	vcvt.u32.f64	s15, d8
    dc24:	ee170a90 	vmov	r0, s15
    dc28:	e3500009 	cmp	r0, #9
    dc2c:	83a02001 	movhi	r2, #1
    dc30:	9a000035 	bls	dd0c <CString::ftoa(char*, double, unsigned int)+0x21c>
    dc34:	e1a03182 	lsl	r3, r2, #3
    dc38:	e0832082 	add	r2, r3, r2, lsl #1
    dc3c:	e73cf210 	udiv	ip, r0, r2
    dc40:	e35c0009 	cmp	ip, #9
    dc44:	e1a0300c 	mov	r3, ip
    dc48:	8afffff9 	bhi	dc34 <CString::ftoa(char*, double, unsigned int)+0x144>
    dc4c:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    dc50:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    dc54:	e28de004 	add	lr, sp, #4
    dc58:	ea000001 	b	dc64 <CString::ftoa(char*, double, unsigned int)+0x174>
    dc5c:	e73cf210 	udiv	ip, r0, r2
    dc60:	e1a0300c 	mov	r3, ip
    dc64:	e3530009 	cmp	r3, #9
    dc68:	e2831057 	add	r1, r3, #87	; 0x57
    dc6c:	e2833030 	add	r3, r3, #48	; 0x30
    dc70:	e1a0800e 	mov	r8, lr
    dc74:	e6af1071 	sxtb	r1, r1
    dc78:	e0600c92 	mls	r0, r2, ip, r0
    dc7c:	96af1073 	sxtbls	r1, r3
    dc80:	e4ce1001 	strb	r1, [lr], #1
    dc84:	e0832592 	umull	r2, r3, r2, r5
    dc88:	e1b021a3 	lsrs	r2, r3, #3
    dc8c:	1afffff2 	bne	dc5c <CString::ftoa(char*, double, unsigned int)+0x16c>
    dc90:	e28d0004 	add	r0, sp, #4
    dc94:	e5c82001 	strb	r2, [r8, #1]
    dc98:	ebfff2d6 	bl	a7f8 <strlen>
    dc9c:	e0560000 	subs	r0, r6, r0
    dca0:	0a000015 	beq	dcfc <CString::ftoa(char*, double, unsigned int)+0x20c>
    dca4:	e0870000 	add	r0, r7, r0
    dca8:	e3a03030 	mov	r3, #48	; 0x30
    dcac:	e4c73001 	strb	r3, [r7], #1
    dcb0:	e1570000 	cmp	r7, r0
    dcb4:	1afffffc 	bne	dcac <CString::ftoa(char*, double, unsigned int)+0x1bc>
    dcb8:	e28d1004 	add	r1, sp, #4
    dcbc:	ebfff2f2 	bl	a88c <strcpy>
    dcc0:	e1a00004 	mov	r0, r4
    dcc4:	e28dd014 	add	sp, sp, #20
    dcc8:	ecbd8b02 	vpop	{d8}
    dccc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    dcd0:	e1a00007 	mov	r0, r7
    dcd4:	e303175c 	movw	r1, #14172	; 0x375c
    dcd8:	e3401001 	movt	r1, #1
    dcdc:	ebfff2ea 	bl	a88c <strcpy>
    dce0:	e1a00004 	mov	r0, r4
    dce4:	e28dd014 	add	sp, sp, #20
    dce8:	ecbd8b02 	vpop	{d8}
    dcec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    dcf0:	ee173a90 	vmov	r3, s15
    dcf4:	e3a02001 	mov	r2, #1
    dcf8:	eaffff97 	b	db5c <CString::ftoa(char*, double, unsigned int)+0x6c>
    dcfc:	e1a00007 	mov	r0, r7
    dd00:	eaffffec 	b	dcb8 <CString::ftoa(char*, double, unsigned int)+0x1c8>
    dd04:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    dd08:	eaffffc0 	b	dc10 <CString::ftoa(char*, double, unsigned int)+0x120>
    dd0c:	ee173a90 	vmov	r3, s15
    dd10:	e3a02001 	mov	r2, #1
    dd14:	ee17ca90 	vmov	ip, s15
    dd18:	eaffffcb 	b	dc4c <CString::ftoa(char*, double, unsigned int)+0x15c>
    dd1c:	e320f000 	nop	{0}
    dd20:	ffe00000 	.word	0xffe00000
    dd24:	41efffff 	.word	0x41efffff

0000dd28 <CString::FormatV(char const*, std::__va_list)>:
    dd28:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd2c:	e1a08000 	mov	r8, r0
    dd30:	e5900004 	ldr	r0, [r0, #4]
    dd34:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    dd38:	e1a05001 	mov	r5, r1
    dd3c:	e3500000 	cmp	r0, #0
    dd40:	e58d2004 	str	r2, [sp, #4]
    dd44:	0a000000 	beq	dd4c <CString::FormatV(char const*, std::__va_list)+0x24>
    dd48:	ebffef6e 	bl	9b08 <operator delete[](void*)>
    dd4c:	e3a00040 	mov	r0, #64	; 0x40
    dd50:	e5880008 	str	r0, [r8, #8]
    dd54:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    dd58:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    dd5c:	e58d300c 	str	r3, [sp, #12]
    dd60:	ebffef66 	bl	9b00 <operator new[](unsigned int)>
    dd64:	e5880004 	str	r0, [r8, #4]
    dd68:	e588000c 	str	r0, [r8, #12]
    dd6c:	e1d540d0 	ldrsb	r4, [r5]
    dd70:	e3540000 	cmp	r4, #0
    dd74:	0a00008e 	beq	dfb4 <CString::FormatV(char const*, std::__va_list)+0x28c>
    dd78:	e3540025 	cmp	r4, #37	; 0x25
    dd7c:	13a01001 	movne	r1, #1
    dd80:	11a00008 	movne	r0, r8
    dd84:	1a000134 	bne	e25c <CString::FormatV(char const*, std::__va_list)+0x534>
    dd88:	e1d540d1 	ldrsb	r4, [r5, #1]
    dd8c:	e3540025 	cmp	r4, #37	; 0x25
    dd90:	0a00014b 	beq	e2c4 <CString::FormatV(char const*, std::__va_list)+0x59c>
    dd94:	e354002d 	cmp	r4, #45	; 0x2d
    dd98:	11a02004 	movne	r2, r4
    dd9c:	12855001 	addne	r5, r5, #1
    dda0:	01d520d2 	ldrsbeq	r2, [r5, #2]
    dda4:	02855002 	addeq	r5, r5, #2
    dda8:	13a07000 	movne	r7, #0
    ddac:	03a07001 	moveq	r7, #1
    ddb0:	e3520030 	cmp	r2, #48	; 0x30
    ddb4:	e3a04000 	mov	r4, #0
    ddb8:	03a03001 	moveq	r3, #1
    ddbc:	13a03000 	movne	r3, #0
    ddc0:	01d520d1 	ldrsbeq	r2, [r5, #1]
    ddc4:	00855003 	addeq	r5, r5, r3
    ddc8:	058d3008 	streq	r3, [sp, #8]
    ddcc:	158d3008 	strne	r3, [sp, #8]
    ddd0:	e2423030 	sub	r3, r2, #48	; 0x30
    ddd4:	e6ef3073 	uxtb	r3, r3
    ddd8:	e3530009 	cmp	r3, #9
    dddc:	8a000008 	bhi	de04 <CString::FormatV(char const*, std::__va_list)+0xdc>
    dde0:	e1a03184 	lsl	r3, r4, #3
    dde4:	e0834084 	add	r4, r3, r4, lsl #1
    dde8:	e0844002 	add	r4, r4, r2
    ddec:	e1f520d1 	ldrsb	r2, [r5, #1]!
    ddf0:	e2444030 	sub	r4, r4, #48	; 0x30
    ddf4:	e2423030 	sub	r3, r2, #48	; 0x30
    ddf8:	e6ef3073 	uxtb	r3, r3
    ddfc:	e3530009 	cmp	r3, #9
    de00:	9afffff6 	bls	dde0 <CString::FormatV(char const*, std::__va_list)+0xb8>
    de04:	e352002e 	cmp	r2, #46	; 0x2e
    de08:	0a000119 	beq	e274 <CString::FormatV(char const*, std::__va_list)+0x54c>
    de0c:	e1d500d0 	ldrsb	r0, [r5]
    de10:	e3a01006 	mov	r1, #6
    de14:	e350006c 	cmp	r0, #108	; 0x6c
    de18:	03a02001 	moveq	r2, #1
    de1c:	01d500d1 	ldrsbeq	r0, [r5, #1]
    de20:	00855002 	addeq	r5, r5, r2
    de24:	e2403058 	sub	r3, r0, #88	; 0x58
    de28:	e3530020 	cmp	r3, #32
    de2c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    de30:	ea0000fe 	b	e230 <CString::FormatV(char const*, std::__va_list)+0x508>
    de34:	0000e228 	.word	0x0000e228
    de38:	0000e230 	.word	0x0000e230
    de3c:	0000e230 	.word	0x0000e230
    de40:	0000e230 	.word	0x0000e230
    de44:	0000e230 	.word	0x0000e230
    de48:	0000e230 	.word	0x0000e230
    de4c:	0000e230 	.word	0x0000e230
    de50:	0000e230 	.word	0x0000e230
    de54:	0000e230 	.word	0x0000e230
    de58:	0000e230 	.word	0x0000e230
    de5c:	0000e230 	.word	0x0000e230
    de60:	0000e1b8 	.word	0x0000e1b8
    de64:	0000e0b4 	.word	0x0000e0b4
    de68:	0000e230 	.word	0x0000e230
    de6c:	0000e03c 	.word	0x0000e03c
    de70:	0000e230 	.word	0x0000e230
    de74:	0000e230 	.word	0x0000e230
    de78:	0000e230 	.word	0x0000e230
    de7c:	0000e230 	.word	0x0000e230
    de80:	0000e230 	.word	0x0000e230
    de84:	0000e230 	.word	0x0000e230
    de88:	0000e230 	.word	0x0000e230
    de8c:	0000e230 	.word	0x0000e230
    de90:	0000e034 	.word	0x0000e034
    de94:	0000e230 	.word	0x0000e230
    de98:	0000e230 	.word	0x0000e230
    de9c:	0000e230 	.word	0x0000e230
    dea0:	0000dfc4 	.word	0x0000dfc4
    dea4:	0000e230 	.word	0x0000e230
    dea8:	0000deb8 	.word	0x0000deb8
    deac:	0000e230 	.word	0x0000e230
    deb0:	0000e230 	.word	0x0000e230
    deb4:	0000e228 	.word	0x0000e228
    deb8:	e3a0900a 	mov	r9, #10
    debc:	e59d3004 	ldr	r3, [sp, #4]
    dec0:	e2833004 	add	r3, r3, #4
    dec4:	e513c004 	ldr	ip, [r3, #-4]
    dec8:	e58d3004 	str	r3, [sp, #4]
    decc:	e15c0009 	cmp	ip, r9
    ded0:	23a03001 	movcs	r3, #1
    ded4:	3a000179 	bcc	e4c0 <CString::FormatV(char const*, std::__va_list)+0x798>
    ded8:	e0030399 	mul	r3, r9, r3
    dedc:	e731f31c 	udiv	r1, ip, r3
    dee0:	e1590001 	cmp	r9, r1
    dee4:	e1a02001 	mov	r2, r1
    dee8:	9afffffa 	bls	ded8 <CString::FormatV(char const*, std::__va_list)+0x1b0>
    deec:	e3500058 	cmp	r0, #88	; 0x58
    def0:	e28d6010 	add	r6, sp, #16
    def4:	13a0b057 	movne	fp, #87	; 0x57
    def8:	03a0b037 	moveq	fp, #55	; 0x37
    defc:	e1a0e006 	mov	lr, r6
    df00:	ea000001 	b	df0c <CString::FormatV(char const*, std::__va_list)+0x1e4>
    df04:	e731f31c 	udiv	r1, ip, r3
    df08:	e1a02001 	mov	r2, r1
    df0c:	e3520009 	cmp	r2, #9
    df10:	e08b0002 	add	r0, fp, r2
    df14:	e06cc193 	mls	ip, r3, r1, ip
    df18:	e2822030 	add	r2, r2, #48	; 0x30
    df1c:	e6af0070 	sxtb	r0, r0
    df20:	e1a0a00e 	mov	sl, lr
    df24:	96af0072 	sxtbls	r0, r2
    df28:	e4ce0001 	strb	r0, [lr], #1
    df2c:	e733f913 	udiv	r3, r3, r9
    df30:	e3530000 	cmp	r3, #0
    df34:	1afffff2 	bne	df04 <CString::FormatV(char const*, std::__va_list)+0x1dc>
    df38:	e1a00006 	mov	r0, r6
    df3c:	e5ca3001 	strb	r3, [sl, #1]
    df40:	ebfff22c 	bl	a7f8 <strlen>
    df44:	e3570000 	cmp	r7, #0
    df48:	e1a09000 	mov	r9, r0
    df4c:	1a0000ff 	bne	e350 <CString::FormatV(char const*, std::__va_list)+0x628>
    df50:	e1500004 	cmp	r0, r4
    df54:	2a00000f 	bcs	df98 <CString::FormatV(char const*, std::__va_list)+0x270>
    df58:	e59d3008 	ldr	r3, [sp, #8]
    df5c:	e0604004 	rsb	r4, r0, r4
    df60:	e1a01004 	mov	r1, r4
    df64:	e1a00008 	mov	r0, r8
    df68:	e3530000 	cmp	r3, #0
    df6c:	03a07020 	moveq	r7, #32
    df70:	13a07030 	movne	r7, #48	; 0x30
    df74:	ebfffe16 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    df78:	e2443001 	sub	r3, r4, #1
    df7c:	e598200c 	ldr	r2, [r8, #12]
    df80:	e2433001 	sub	r3, r3, #1
    df84:	e3730001 	cmn	r3, #1
    df88:	e2821001 	add	r1, r2, #1
    df8c:	e588100c 	str	r1, [r8, #12]
    df90:	e5c27000 	strb	r7, [r2]
    df94:	1afffff8 	bne	df7c <CString::FormatV(char const*, std::__va_list)+0x254>
    df98:	e1a01006 	mov	r1, r6
    df9c:	e1a00008 	mov	r0, r8
    dfa0:	ebfffe9d 	bl	da1c <CString::PutString(char const*)>
    dfa4:	e2855001 	add	r5, r5, #1
    dfa8:	e1d540d0 	ldrsb	r4, [r5]
    dfac:	e3540000 	cmp	r4, #0
    dfb0:	1affff70 	bne	dd78 <CString::FormatV(char const*, std::__va_list)+0x50>
    dfb4:	e598300c 	ldr	r3, [r8, #12]
    dfb8:	e5c34000 	strb	r4, [r3]
    dfbc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    dfc0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfc4:	e59d3004 	ldr	r3, [sp, #4]
    dfc8:	e2836004 	add	r6, r3, #4
    dfcc:	e593a000 	ldr	sl, [r3]
    dfd0:	e1a0000a 	mov	r0, sl
    dfd4:	ebfff207 	bl	a7f8 <strlen>
    dfd8:	e3570000 	cmp	r7, #0
    dfdc:	e1a09000 	mov	r9, r0
    dfe0:	1a000104 	bne	e3f8 <CString::FormatV(char const*, std::__va_list)+0x6d0>
    dfe4:	e1500004 	cmp	r0, r4
    dfe8:	2a00000c 	bcs	e020 <CString::FormatV(char const*, std::__va_list)+0x2f8>
    dfec:	e0604004 	rsb	r4, r0, r4
    dff0:	e1a00008 	mov	r0, r8
    dff4:	e1a01004 	mov	r1, r4
    dff8:	ebfffdf5 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    dffc:	e2443001 	sub	r3, r4, #1
    e000:	e3a00020 	mov	r0, #32
    e004:	e598200c 	ldr	r2, [r8, #12]
    e008:	e2433001 	sub	r3, r3, #1
    e00c:	e3730001 	cmn	r3, #1
    e010:	e2821001 	add	r1, r2, #1
    e014:	e588100c 	str	r1, [r8, #12]
    e018:	e5c20000 	strb	r0, [r2]
    e01c:	1afffff8 	bne	e004 <CString::FormatV(char const*, std::__va_list)+0x2dc>
    e020:	e1a0100a 	mov	r1, sl
    e024:	e1a00008 	mov	r0, r8
    e028:	e58d6004 	str	r6, [sp, #4]
    e02c:	ebfffe7a 	bl	da1c <CString::PutString(char const*)>
    e030:	eaffffdb 	b	dfa4 <CString::FormatV(char const*, std::__va_list)+0x27c>
    e034:	e3a09008 	mov	r9, #8
    e038:	eaffff9f 	b	debc <CString::FormatV(char const*, std::__va_list)+0x194>
    e03c:	e59d3004 	ldr	r3, [sp, #4]
    e040:	e28d6010 	add	r6, sp, #16
    e044:	e1a00006 	mov	r0, r6
    e048:	e2833007 	add	r3, r3, #7
    e04c:	e3c33007 	bic	r3, r3, #7
    e050:	e2832008 	add	r2, r3, #8
    e054:	e58d2004 	str	r2, [sp, #4]
    e058:	ed930b00 	vldr	d0, [r3]
    e05c:	ebfffea3 	bl	daf0 <CString::ftoa(char*, double, unsigned int)>
    e060:	e1a00006 	mov	r0, r6
    e064:	ebfff1e3 	bl	a7f8 <strlen>
    e068:	e3570000 	cmp	r7, #0
    e06c:	e1a09000 	mov	r9, r0
    e070:	1a0000f3 	bne	e444 <CString::FormatV(char const*, std::__va_list)+0x71c>
    e074:	e1500004 	cmp	r0, r4
    e078:	2affffc6 	bcs	df98 <CString::FormatV(char const*, std::__va_list)+0x270>
    e07c:	e0604004 	rsb	r4, r0, r4
    e080:	e1a00008 	mov	r0, r8
    e084:	e1a01004 	mov	r1, r4
    e088:	ebfffdd1 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e08c:	e2443001 	sub	r3, r4, #1
    e090:	e3a00020 	mov	r0, #32
    e094:	e598200c 	ldr	r2, [r8, #12]
    e098:	e2433001 	sub	r3, r3, #1
    e09c:	e3730001 	cmn	r3, #1
    e0a0:	e2821001 	add	r1, r2, #1
    e0a4:	e588100c 	str	r1, [r8, #12]
    e0a8:	e5c20000 	strb	r0, [r2]
    e0ac:	1afffff8 	bne	e094 <CString::FormatV(char const*, std::__va_list)+0x36c>
    e0b0:	eaffffb8 	b	df98 <CString::FormatV(char const*, std::__va_list)+0x270>
    e0b4:	e59d3004 	ldr	r3, [sp, #4]
    e0b8:	e2833004 	add	r3, r3, #4
    e0bc:	e513b004 	ldr	fp, [r3, #-4]
    e0c0:	e58d3004 	str	r3, [sp, #4]
    e0c4:	e35b0000 	cmp	fp, #0
    e0c8:	b26bb000 	rsblt	fp, fp, #0
    e0cc:	b3a0a001 	movlt	sl, #1
    e0d0:	a3a0a000 	movge	sl, #0
    e0d4:	e35b0009 	cmp	fp, #9
    e0d8:	e1a0900a 	mov	r9, sl
    e0dc:	e1a0e00b 	mov	lr, fp
    e0e0:	c3a02001 	movgt	r2, #1
    e0e4:	da0000f2 	ble	e4b4 <CString::FormatV(char const*, std::__va_list)+0x78c>
    e0e8:	e1a03182 	lsl	r3, r2, #3
    e0ec:	e0832082 	add	r2, r3, r2, lsl #1
    e0f0:	e733f21b 	udiv	r3, fp, r2
    e0f4:	e3530009 	cmp	r3, #9
    e0f8:	8afffffa 	bhi	e0e8 <CString::FormatV(char const*, std::__va_list)+0x3c0>
    e0fc:	e28d6010 	add	r6, sp, #16
    e100:	e58d7008 	str	r7, [sp, #8]
    e104:	e73bf21b 	udiv	fp, fp, r2
    e108:	e1a00006 	mov	r0, r6
    e10c:	e59d700c 	ldr	r7, [sp, #12]
    e110:	ea000001 	b	e11c <CString::FormatV(char const*, std::__va_list)+0x3f4>
    e114:	e73bf21e 	udiv	fp, lr, r2
    e118:	e1a0300b 	mov	r3, fp
    e11c:	e3530009 	cmp	r3, #9
    e120:	e2831057 	add	r1, r3, #87	; 0x57
    e124:	e2833030 	add	r3, r3, #48	; 0x30
    e128:	e1a0c000 	mov	ip, r0
    e12c:	e6af1071 	sxtb	r1, r1
    e130:	e06eeb92 	mls	lr, r2, fp, lr
    e134:	96af1073 	sxtbls	r1, r3
    e138:	e4c01001 	strb	r1, [r0], #1
    e13c:	e0832792 	umull	r2, r3, r2, r7
    e140:	e1b021a3 	lsrs	r2, r3, #3
    e144:	1afffff2 	bne	e114 <CString::FormatV(char const*, std::__va_list)+0x3ec>
    e148:	e59d7008 	ldr	r7, [sp, #8]
    e14c:	e1a00006 	mov	r0, r6
    e150:	e5cc2001 	strb	r2, [ip, #1]
    e154:	ebfff1a7 	bl	a7f8 <strlen>
    e158:	e3570000 	cmp	r7, #0
    e15c:	e080a00a 	add	sl, r0, sl
    e160:	0a000060 	beq	e2e8 <CString::FormatV(char const*, std::__va_list)+0x5c0>
    e164:	e3590000 	cmp	r9, #0
    e168:	1a0000c8 	bne	e490 <CString::FormatV(char const*, std::__va_list)+0x768>
    e16c:	e1a01006 	mov	r1, r6
    e170:	e1a00008 	mov	r0, r8
    e174:	ebfffe28 	bl	da1c <CString::PutString(char const*)>
    e178:	e15a0004 	cmp	sl, r4
    e17c:	2affff88 	bcs	dfa4 <CString::FormatV(char const*, std::__va_list)+0x27c>
    e180:	e06aa004 	rsb	sl, sl, r4
    e184:	e1a00008 	mov	r0, r8
    e188:	e1a0100a 	mov	r1, sl
    e18c:	ebfffd90 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e190:	e24a3001 	sub	r3, sl, #1
    e194:	e3a00020 	mov	r0, #32
    e198:	e598200c 	ldr	r2, [r8, #12]
    e19c:	e2433001 	sub	r3, r3, #1
    e1a0:	e3730001 	cmn	r3, #1
    e1a4:	e2821001 	add	r1, r2, #1
    e1a8:	e588100c 	str	r1, [r8, #12]
    e1ac:	e5c20000 	strb	r0, [r2]
    e1b0:	1afffff8 	bne	e198 <CString::FormatV(char const*, std::__va_list)+0x470>
    e1b4:	eaffff7a 	b	dfa4 <CString::FormatV(char const*, std::__va_list)+0x27c>
    e1b8:	e59d3004 	ldr	r3, [sp, #4]
    e1bc:	e3570000 	cmp	r7, #0
    e1c0:	e2836004 	add	r6, r3, #4
    e1c4:	e1d370d0 	ldrsb	r7, [r3]
    e1c8:	1a000073 	bne	e39c <CString::FormatV(char const*, std::__va_list)+0x674>
    e1cc:	e3540001 	cmp	r4, #1
    e1d0:	9a00000b 	bls	e204 <CString::FormatV(char const*, std::__va_list)+0x4dc>
    e1d4:	e2441001 	sub	r1, r4, #1
    e1d8:	e1a00008 	mov	r0, r8
    e1dc:	ebfffd7c 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e1e0:	e2444002 	sub	r4, r4, #2
    e1e4:	e3a01020 	mov	r1, #32
    e1e8:	e598300c 	ldr	r3, [r8, #12]
    e1ec:	e2444001 	sub	r4, r4, #1
    e1f0:	e3740001 	cmn	r4, #1
    e1f4:	e2832001 	add	r2, r3, #1
    e1f8:	e588200c 	str	r2, [r8, #12]
    e1fc:	e5c31000 	strb	r1, [r3]
    e200:	1afffff8 	bne	e1e8 <CString::FormatV(char const*, std::__va_list)+0x4c0>
    e204:	e3a01001 	mov	r1, #1
    e208:	e1a00008 	mov	r0, r8
    e20c:	ebfffd70 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e210:	e598300c 	ldr	r3, [r8, #12]
    e214:	e58d6004 	str	r6, [sp, #4]
    e218:	e2832001 	add	r2, r3, #1
    e21c:	e588200c 	str	r2, [r8, #12]
    e220:	e5c37000 	strb	r7, [r3]
    e224:	eaffff5e 	b	dfa4 <CString::FormatV(char const*, std::__va_list)+0x27c>
    e228:	e3a09010 	mov	r9, #16
    e22c:	eaffff22 	b	debc <CString::FormatV(char const*, std::__va_list)+0x194>
    e230:	e3a01001 	mov	r1, #1
    e234:	e1a00008 	mov	r0, r8
    e238:	ebfffd65 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e23c:	e598300c 	ldr	r3, [r8, #12]
    e240:	e3a01001 	mov	r1, #1
    e244:	e3a02025 	mov	r2, #37	; 0x25
    e248:	e0830001 	add	r0, r3, r1
    e24c:	e588000c 	str	r0, [r8, #12]
    e250:	e5c32000 	strb	r2, [r3]
    e254:	e1a00008 	mov	r0, r8
    e258:	e1d540d0 	ldrsb	r4, [r5]
    e25c:	ebfffd5c 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e260:	e598300c 	ldr	r3, [r8, #12]
    e264:	e2832001 	add	r2, r3, #1
    e268:	e588200c 	str	r2, [r8, #12]
    e26c:	e5c34000 	strb	r4, [r3]
    e270:	eaffff4b 	b	dfa4 <CString::FormatV(char const*, std::__va_list)+0x27c>
    e274:	e1d520d1 	ldrsb	r2, [r5, #1]
    e278:	e2855001 	add	r5, r5, #1
    e27c:	e2423030 	sub	r3, r2, #48	; 0x30
    e280:	e6ef3073 	uxtb	r3, r3
    e284:	e3530009 	cmp	r3, #9
    e288:	8a000090 	bhi	e4d0 <CString::FormatV(char const*, std::__va_list)+0x7a8>
    e28c:	e3a01000 	mov	r1, #0
    e290:	e1a03001 	mov	r3, r1
    e294:	e1a00183 	lsl	r0, r3, #3
    e298:	e0803083 	add	r3, r0, r3, lsl #1
    e29c:	e0833002 	add	r3, r3, r2
    e2a0:	e1f520d1 	ldrsb	r2, [r5, #1]!
    e2a4:	e2433030 	sub	r3, r3, #48	; 0x30
    e2a8:	e2420030 	sub	r0, r2, #48	; 0x30
    e2ac:	e6ef0070 	uxtb	r0, r0
    e2b0:	e3500009 	cmp	r0, #9
    e2b4:	9afffff6 	bls	e294 <CString::FormatV(char const*, std::__va_list)+0x56c>
    e2b8:	e1a01003 	mov	r1, r3
    e2bc:	e1a00002 	mov	r0, r2
    e2c0:	eafffed3 	b	de14 <CString::FormatV(char const*, std::__va_list)+0xec>
    e2c4:	e3a01001 	mov	r1, #1
    e2c8:	e1a00008 	mov	r0, r8
    e2cc:	ebfffd40 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e2d0:	e598300c 	ldr	r3, [r8, #12]
    e2d4:	e2855002 	add	r5, r5, #2
    e2d8:	e2831001 	add	r1, r3, #1
    e2dc:	e588100c 	str	r1, [r8, #12]
    e2e0:	e5c34000 	strb	r4, [r3]
    e2e4:	eafffea0 	b	dd6c <CString::FormatV(char const*, std::__va_list)+0x44>
    e2e8:	e15a0004 	cmp	sl, r4
    e2ec:	2a00000c 	bcs	e324 <CString::FormatV(char const*, std::__va_list)+0x5fc>
    e2f0:	e06aa004 	rsb	sl, sl, r4
    e2f4:	e1a00008 	mov	r0, r8
    e2f8:	e1a0100a 	mov	r1, sl
    e2fc:	ebfffd34 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e300:	e24a3001 	sub	r3, sl, #1
    e304:	e3a00020 	mov	r0, #32
    e308:	e598200c 	ldr	r2, [r8, #12]
    e30c:	e2433001 	sub	r3, r3, #1
    e310:	e3730001 	cmn	r3, #1
    e314:	e2821001 	add	r1, r2, #1
    e318:	e588100c 	str	r1, [r8, #12]
    e31c:	e5c20000 	strb	r0, [r2]
    e320:	1afffff8 	bne	e308 <CString::FormatV(char const*, std::__va_list)+0x5e0>
    e324:	e3590000 	cmp	r9, #0
    e328:	0affff1a 	beq	df98 <CString::FormatV(char const*, std::__va_list)+0x270>
    e32c:	e3a01001 	mov	r1, #1
    e330:	e1a00008 	mov	r0, r8
    e334:	ebfffd26 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e338:	e598300c 	ldr	r3, [r8, #12]
    e33c:	e3a0202d 	mov	r2, #45	; 0x2d
    e340:	e2831001 	add	r1, r3, #1
    e344:	e588100c 	str	r1, [r8, #12]
    e348:	e5c32000 	strb	r2, [r3]
    e34c:	eaffff11 	b	df98 <CString::FormatV(char const*, std::__va_list)+0x270>
    e350:	e1a01006 	mov	r1, r6
    e354:	e1a00008 	mov	r0, r8
    e358:	ebfffdaf 	bl	da1c <CString::PutString(char const*)>
    e35c:	e1590004 	cmp	r9, r4
    e360:	2affff0f 	bcs	dfa4 <CString::FormatV(char const*, std::__va_list)+0x27c>
    e364:	e0694004 	rsb	r4, r9, r4
    e368:	e1a00008 	mov	r0, r8
    e36c:	e1a01004 	mov	r1, r4
    e370:	ebfffd17 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e374:	e2443001 	sub	r3, r4, #1
    e378:	e3a00020 	mov	r0, #32
    e37c:	e598200c 	ldr	r2, [r8, #12]
    e380:	e2433001 	sub	r3, r3, #1
    e384:	e3730001 	cmn	r3, #1
    e388:	e2821001 	add	r1, r2, #1
    e38c:	e588100c 	str	r1, [r8, #12]
    e390:	e5c20000 	strb	r0, [r2]
    e394:	1afffff8 	bne	e37c <CString::FormatV(char const*, std::__va_list)+0x654>
    e398:	eaffff01 	b	dfa4 <CString::FormatV(char const*, std::__va_list)+0x27c>
    e39c:	e3a01001 	mov	r1, #1
    e3a0:	e1a00008 	mov	r0, r8
    e3a4:	ebfffd0a 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e3a8:	e598300c 	ldr	r3, [r8, #12]
    e3ac:	e3540001 	cmp	r4, #1
    e3b0:	e2832001 	add	r2, r3, #1
    e3b4:	e588200c 	str	r2, [r8, #12]
    e3b8:	e5c37000 	strb	r7, [r3]
    e3bc:	9a00000b 	bls	e3f0 <CString::FormatV(char const*, std::__va_list)+0x6c8>
    e3c0:	e2441001 	sub	r1, r4, #1
    e3c4:	e1a00008 	mov	r0, r8
    e3c8:	ebfffd01 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e3cc:	e2444002 	sub	r4, r4, #2
    e3d0:	e3a01020 	mov	r1, #32
    e3d4:	e598300c 	ldr	r3, [r8, #12]
    e3d8:	e2444001 	sub	r4, r4, #1
    e3dc:	e3740001 	cmn	r4, #1
    e3e0:	e2832001 	add	r2, r3, #1
    e3e4:	e588200c 	str	r2, [r8, #12]
    e3e8:	e5c31000 	strb	r1, [r3]
    e3ec:	1afffff8 	bne	e3d4 <CString::FormatV(char const*, std::__va_list)+0x6ac>
    e3f0:	e58d6004 	str	r6, [sp, #4]
    e3f4:	eafffeea 	b	dfa4 <CString::FormatV(char const*, std::__va_list)+0x27c>
    e3f8:	e1a0100a 	mov	r1, sl
    e3fc:	e1a00008 	mov	r0, r8
    e400:	ebfffd85 	bl	da1c <CString::PutString(char const*)>
    e404:	e1590004 	cmp	r9, r4
    e408:	2afffff8 	bcs	e3f0 <CString::FormatV(char const*, std::__va_list)+0x6c8>
    e40c:	e0694004 	rsb	r4, r9, r4
    e410:	e1a00008 	mov	r0, r8
    e414:	e1a01004 	mov	r1, r4
    e418:	ebfffced 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e41c:	e2443001 	sub	r3, r4, #1
    e420:	e3a00020 	mov	r0, #32
    e424:	e598200c 	ldr	r2, [r8, #12]
    e428:	e2433001 	sub	r3, r3, #1
    e42c:	e3730001 	cmn	r3, #1
    e430:	e2821001 	add	r1, r2, #1
    e434:	e588100c 	str	r1, [r8, #12]
    e438:	e5c20000 	strb	r0, [r2]
    e43c:	1afffff8 	bne	e424 <CString::FormatV(char const*, std::__va_list)+0x6fc>
    e440:	eaffffea 	b	e3f0 <CString::FormatV(char const*, std::__va_list)+0x6c8>
    e444:	e1a01006 	mov	r1, r6
    e448:	e1a00008 	mov	r0, r8
    e44c:	ebfffd72 	bl	da1c <CString::PutString(char const*)>
    e450:	e1590004 	cmp	r9, r4
    e454:	2afffed2 	bcs	dfa4 <CString::FormatV(char const*, std::__va_list)+0x27c>
    e458:	e0694004 	rsb	r4, r9, r4
    e45c:	e1a00008 	mov	r0, r8
    e460:	e1a01004 	mov	r1, r4
    e464:	ebfffcda 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e468:	e2443001 	sub	r3, r4, #1
    e46c:	e3a00020 	mov	r0, #32
    e470:	e598200c 	ldr	r2, [r8, #12]
    e474:	e2433001 	sub	r3, r3, #1
    e478:	e3730001 	cmn	r3, #1
    e47c:	e2821001 	add	r1, r2, #1
    e480:	e588100c 	str	r1, [r8, #12]
    e484:	e5c20000 	strb	r0, [r2]
    e488:	1afffff8 	bne	e470 <CString::FormatV(char const*, std::__va_list)+0x748>
    e48c:	eafffec4 	b	dfa4 <CString::FormatV(char const*, std::__va_list)+0x27c>
    e490:	e3a01001 	mov	r1, #1
    e494:	e1a00008 	mov	r0, r8
    e498:	ebfffccd 	bl	d7d4 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e49c:	e598300c 	ldr	r3, [r8, #12]
    e4a0:	e3a0202d 	mov	r2, #45	; 0x2d
    e4a4:	e2831001 	add	r1, r3, #1
    e4a8:	e588100c 	str	r1, [r8, #12]
    e4ac:	e5c32000 	strb	r2, [r3]
    e4b0:	eaffff2d 	b	e16c <CString::FormatV(char const*, std::__va_list)+0x444>
    e4b4:	e1a0300b 	mov	r3, fp
    e4b8:	e3a02001 	mov	r2, #1
    e4bc:	eaffff0e 	b	e0fc <CString::FormatV(char const*, std::__va_list)+0x3d4>
    e4c0:	e1a0200c 	mov	r2, ip
    e4c4:	e3a03001 	mov	r3, #1
    e4c8:	e1a0100c 	mov	r1, ip
    e4cc:	eafffe86 	b	deec <CString::FormatV(char const*, std::__va_list)+0x1c4>
    e4d0:	e1a00002 	mov	r0, r2
    e4d4:	e3a01000 	mov	r1, #0
    e4d8:	eafffe4d 	b	de14 <CString::FormatV(char const*, std::__va_list)+0xec>

0000e4dc <CString::Format(char const*, ...)>:
    e4dc:	e92d000e 	push	{r1, r2, r3}
    e4e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e4e4:	e24dd008 	sub	sp, sp, #8
    e4e8:	e28d3010 	add	r3, sp, #16
    e4ec:	e1a02003 	mov	r2, r3
    e4f0:	e59d100c 	ldr	r1, [sp, #12]
    e4f4:	e58d3004 	str	r3, [sp, #4]
    e4f8:	ebfffe0a 	bl	dd28 <CString::FormatV(char const*, std::__va_list)>
    e4fc:	e28dd008 	add	sp, sp, #8
    e500:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    e504:	e28dd00c 	add	sp, sp, #12
    e508:	e12fff1e 	bx	lr
    e50c:	00000000 	andeq	r0, r0, r0

0000e510 <DelayLoop>:
    e510:	e2500001 	subs	r0, r0, #1
    e514:	8afffffd 	bhi	e510 <DelayLoop>
    e518:	e1a0f00e 	mov	pc, lr

0000e51c <CExceptionHandler::CExceptionHandler()>:
    e51c:	e92d4070 	push	{r4, r5, r6, lr}
    e520:	e30454d0 	movw	r5, #17616	; 0x44d0
    e524:	e3405001 	movt	r5, #1
    e528:	e1a04000 	mov	r4, r0
    e52c:	e5953000 	ldr	r3, [r5]
    e530:	e3530000 	cmp	r3, #0
    e534:	0a000005 	beq	e550 <CExceptionHandler::CExceptionHandler()+0x34>
    e538:	e3031768 	movw	r1, #14184	; 0x3768
    e53c:	e3401001 	movt	r1, #1
    e540:	e3020508 	movw	r0, #9480	; 0x2508
    e544:	e3400001 	movt	r0, #1
    e548:	e3a0202e 	mov	r2, #46	; 0x2e
    e54c:	ebfff7ec 	bl	c504 <assertion_failed>
    e550:	e30e17dc 	movw	r1, #59356	; 0xe7dc
    e554:	e3401000 	movt	r1, #0
    e558:	e30e2814 	movw	r2, #59412	; 0xe814
    e55c:	e3402000 	movt	r2, #0
    e560:	e30e3850 	movw	r3, #59472	; 0xe850
    e564:	e3403000 	movt	r3, #0
    e568:	e3a00000 	mov	r0, #0
    e56c:	e1a01141 	asr	r1, r1, #2
    e570:	e1a02142 	asr	r2, r2, #2
    e574:	e1a03143 	asr	r3, r3, #2
    e578:	e2411002 	sub	r1, r1, #2
    e57c:	e2422002 	sub	r2, r2, #2
    e580:	e2433002 	sub	r3, r3, #2
    e584:	e5854000 	str	r4, [r5]
    e588:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    e58c:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    e590:	e5801004 	str	r1, [r0, #4]
    e594:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e598:	e580200c 	str	r2, [r0, #12]
    e59c:	e5803010 	str	r3, [r0, #16]
    e5a0:	eb000958 	bl	10b08 <SyncDataAndInstructionCache>
    e5a4:	e1a00004 	mov	r0, r4
    e5a8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e5ac <CExceptionHandler::~CExceptionHandler()>:
    e5ac:	e30434d0 	movw	r3, #17616	; 0x44d0
    e5b0:	e3403001 	movt	r3, #1
    e5b4:	e3a02000 	mov	r2, #0
    e5b8:	e5832000 	str	r2, [r3]
    e5bc:	e12fff1e 	bx	lr

0000e5c0 <CExceptionHandler::Get()>:
    e5c0:	e92d4010 	push	{r4, lr}
    e5c4:	e30444d0 	movw	r4, #17616	; 0x44d0
    e5c8:	e3404001 	movt	r4, #1
    e5cc:	e5940000 	ldr	r0, [r4]
    e5d0:	e3500000 	cmp	r0, #0
    e5d4:	18bd8010 	popne	{r4, pc}
    e5d8:	e3a0207e 	mov	r2, #126	; 0x7e
    e5dc:	e3031768 	movw	r1, #14184	; 0x3768
    e5e0:	e3401001 	movt	r1, #1
    e5e4:	e3020614 	movw	r0, #9748	; 0x2614
    e5e8:	e3400001 	movt	r0, #1
    e5ec:	ebfff7c4 	bl	c504 <assertion_failed>
    e5f0:	e5940000 	ldr	r0, [r4]
    e5f4:	e8bd8010 	pop	{r4, pc}

0000e5f8 <CExceptionHandler::Throw(unsigned int)>:
    e5f8:	e92d4030 	push	{r4, r5, lr}
    e5fc:	e1a05001 	mov	r5, r1
    e600:	e24dd01c 	sub	sp, sp, #28
    e604:	e28d0008 	add	r0, sp, #8
    e608:	ebfffc8b 	bl	d83c <CString::CString()>
    e60c:	ee102fb0 	mrc	15, 0, r2, cr0, cr0, {5}
    e610:	e3031780 	movw	r1, #14208	; 0x3780
    e614:	e3401001 	movt	r1, #1
    e618:	e2022003 	and	r2, r2, #3
    e61c:	e28d0008 	add	r0, sp, #8
    e620:	ebffffad 	bl	e4dc <CString::Format(char const*, ...)>
    e624:	ebfff92c 	bl	cadc <CLogger::Get()>
    e628:	e1a04000 	mov	r4, r0
    e62c:	e28d0008 	add	r0, sp, #8
    e630:	ebfffc98 	bl	d898 <CString::operator char const*() const>
    e634:	e30423d0 	movw	r2, #17360	; 0x43d0
    e638:	e3402001 	movt	r2, #1
    e63c:	e1a01000 	mov	r1, r0
    e640:	e3033788 	movw	r3, #14216	; 0x3788
    e644:	e3403001 	movt	r3, #1
    e648:	e7922105 	ldr	r2, [r2, r5, lsl #2]
    e64c:	e1a00004 	mov	r0, r4
    e650:	e58d2000 	str	r2, [sp]
    e654:	e3a02000 	mov	r2, #0
    e658:	ebfff9ed 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e65c:	e28d0008 	add	r0, sp, #8
    e660:	ebfffc42 	bl	d770 <CString::~CString()>
    e664:	e28dd01c 	add	sp, sp, #28
    e668:	e8bd8030 	pop	{r4, r5, pc}

0000e66c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    e66c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e670:	e1a05001 	mov	r5, r1
    e674:	e1a04002 	mov	r4, r2
    e678:	e24dd030 	sub	sp, sp, #48	; 0x30
    e67c:	e28d0020 	add	r0, sp, #32
    e680:	ebfffc6d 	bl	d83c <CString::CString()>
    e684:	ee102fb0 	mrc	15, 0, r2, cr0, cr0, {5}
    e688:	e3031780 	movw	r1, #14208	; 0x3780
    e68c:	e3401001 	movt	r1, #1
    e690:	e2022003 	and	r2, r2, #3
    e694:	e28d0020 	add	r0, sp, #32
    e698:	ebffff8f 	bl	e4dc <CString::Format(char const*, ...)>
    e69c:	e3550002 	cmp	r5, #2
    e6a0:	0a00002d 	beq	e75c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xf0>
    e6a4:	e3550003 	cmp	r5, #3
    e6a8:	0a000028 	beq	e750 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
    e6ac:	e3a07000 	mov	r7, #0
    e6b0:	e1a08007 	mov	r8, r7
    e6b4:	e3540000 	cmp	r4, #0
    e6b8:	0a00002a 	beq	e768 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xfc>
    e6bc:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    e6c0:	e28d0020 	add	r0, sp, #32
    e6c4:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    e6c8:	e203301f 	and	r3, r3, #31
    e6cc:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    e6d0:	e3530012 	cmp	r3, #18
    e6d4:	08940240 	ldmeq	r4, {r6, r9}
    e6d8:	ebfffc6e 	bl	d898 <CString::operator char const*() const>
    e6dc:	e1a01000 	mov	r1, r0
    e6e0:	e1a00006 	mov	r0, r6
    e6e4:	ebfff815 	bl	c740 <debug_stacktrace(unsigned int const*, char const*)>
    e6e8:	ebfff8fb 	bl	cadc <CLogger::Get()>
    e6ec:	e1a0a000 	mov	sl, r0
    e6f0:	e28d0020 	add	r0, sp, #32
    e6f4:	ebfffc67 	bl	d898 <CString::operator char const*() const>
    e6f8:	e30433d0 	movw	r3, #17360	; 0x43d0
    e6fc:	e3403001 	movt	r3, #1
    e700:	e58d9014 	str	r9, [sp, #20]
    e704:	e1a01000 	mov	r1, r0
    e708:	e3a02000 	mov	r2, #0
    e70c:	e1a0000a 	mov	r0, sl
    e710:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    e714:	e7935105 	ldr	r5, [r3, r5, lsl #2]
    e718:	e30337a4 	movw	r3, #14244	; 0x37a4
    e71c:	e3403001 	movt	r3, #1
    e720:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    e724:	e58dc004 	str	ip, [sp, #4]
    e728:	e58de018 	str	lr, [sp, #24]
    e72c:	e58d6010 	str	r6, [sp, #16]
    e730:	e58d700c 	str	r7, [sp, #12]
    e734:	e58d8008 	str	r8, [sp, #8]
    e738:	e58d5000 	str	r5, [sp]
    e73c:	ebfff9b4 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e740:	e28d0020 	add	r0, sp, #32
    e744:	ebfffc09 	bl	d770 <CString::~CString()>
    e748:	e28dd030 	add	sp, sp, #48	; 0x30
    e74c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e750:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
    e754:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
    e758:	eaffffd5 	b	e6b4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x48>
    e75c:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
    e760:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
    e764:	eaffffd2 	b	e6b4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x48>
    e768:	e3031768 	movw	r1, #14184	; 0x3768
    e76c:	e3401001 	movt	r1, #1
    e770:	e3030798 	movw	r0, #14232	; 0x3798
    e774:	e3400001 	movt	r0, #1
    e778:	e3a02067 	mov	r2, #103	; 0x67
    e77c:	ebfff760 	bl	c504 <assertion_failed>
    e780:	eaffffcd 	b	e6bc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>

0000e784 <ExceptionHandler>:
    e784:	e92d4070 	push	{r4, r5, r6, lr}
    e788:	e30444d0 	movw	r4, #17616	; 0x44d0
    e78c:	e3404001 	movt	r4, #1
    e790:	e1a05000 	mov	r5, r0
    e794:	e1a06001 	mov	r6, r1
    e798:	e5940000 	ldr	r0, [r4]
    e79c:	e3500000 	cmp	r0, #0
    e7a0:	0a000003 	beq	e7b4 <ExceptionHandler+0x30>
    e7a4:	e1a02006 	mov	r2, r6
    e7a8:	e1a01005 	mov	r1, r5
    e7ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    e7b0:	eaffffad 	b	e66c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
    e7b4:	e3a0207e 	mov	r2, #126	; 0x7e
    e7b8:	e3031768 	movw	r1, #14184	; 0x3768
    e7bc:	e3401001 	movt	r1, #1
    e7c0:	e3020614 	movw	r0, #9748	; 0x2614
    e7c4:	e3400001 	movt	r0, #1
    e7c8:	ebfff74d 	bl	c504 <assertion_failed>
    e7cc:	e5940000 	ldr	r0, [r4]
    e7d0:	e1a02006 	mov	r2, r6
    e7d4:	e1a01005 	mov	r1, r5
    e7d8:	e8bd4070 	pop	{r4, r5, r6, lr}
    e7dc:	eaffffa2 	b	e66c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000e7e0 <UndefinedInstructionStub>:
    e7e0:	e24ee004 	sub	lr, lr, #4
    e7e4:	e92d4000 	stmfd	sp!, {lr}
    e7e8:	e14fe000 	mrs	lr, SPSR
    e7ec:	e92d4000 	stmfd	sp!, {lr}
    e7f0:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e7f4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e7f8:	e1a0100d 	mov	r1, sp
    e7fc:	f1020012 	cps	#18
    e800:	e1a0200d 	mov	r2, sp
    e804:	e1a0300e 	mov	r3, lr
    e808:	f102001f 	cps	#31
    e80c:	e1a0d001 	mov	sp, r1
    e810:	e92d000c 	push	{r2, r3}
    e814:	e1a0100d 	mov	r1, sp
    e818:	e3a00001 	mov	r0, #1
    e81c:	eaffffd8 	b	e784 <ExceptionHandler>

0000e820 <PrefetchAbortStub>:
    e820:	e24ee004 	sub	lr, lr, #4
    e824:	e92d4000 	stmfd	sp!, {lr}
    e828:	e14fe000 	mrs	lr, SPSR
    e82c:	e92d4000 	stmfd	sp!, {lr}
    e830:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e834:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e838:	e1a0100d 	mov	r1, sp
    e83c:	f1020012 	cps	#18
    e840:	e1a0200d 	mov	r2, sp
    e844:	e1a0300e 	mov	r3, lr
    e848:	f102001f 	cps	#31
    e84c:	e1a0d001 	mov	sp, r1
    e850:	e92d000c 	push	{r2, r3}
    e854:	e1a0100d 	mov	r1, sp
    e858:	e3a00002 	mov	r0, #2
    e85c:	eaffffc8 	b	e784 <ExceptionHandler>

0000e860 <DataAbortStub>:
    e860:	e24ee008 	sub	lr, lr, #8
    e864:	e92d4000 	stmfd	sp!, {lr}
    e868:	e14fe000 	mrs	lr, SPSR
    e86c:	e92d4000 	stmfd	sp!, {lr}
    e870:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e874:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e878:	e1a0100d 	mov	r1, sp
    e87c:	f1020012 	cps	#18
    e880:	e1a0200d 	mov	r2, sp
    e884:	e1a0300e 	mov	r3, lr
    e888:	f102001f 	cps	#31
    e88c:	e1a0d001 	mov	sp, r1
    e890:	e92d000c 	push	{r2, r3}
    e894:	e1a0100d 	mov	r1, sp
    e898:	e3a00003 	mov	r0, #3
    e89c:	eaffffb8 	b	e784 <ExceptionHandler>

0000e8a0 <IRQStub>:
    e8a0:	e24ee004 	sub	lr, lr, #4
    e8a4:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e8a8:	eb000161 	bl	ee34 <InterruptHandler>
    e8ac:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000e8b0 <FIQStub>:
    e8b0:	e24ee004 	sub	lr, lr, #4
    e8b4:	e92d400f 	push	{r0, r1, r2, r3, lr}
    e8b8:	e59f2024 	ldr	r2, [pc, #36]	; e8e4 <FIQStub+0x34>
    e8bc:	e5921000 	ldr	r1, [r2]
    e8c0:	e3510000 	cmp	r1, #0
    e8c4:	0a000002 	beq	e8d4 <FIQStub+0x24>
    e8c8:	e5920004 	ldr	r0, [r2, #4]
    e8cc:	e12fff31 	blx	r1
    e8d0:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    e8d4:	e59f100c 	ldr	r1, [pc, #12]	; e8e8 <FIQStub+0x38>
    e8d8:	e3a00000 	mov	r0, #0
    e8dc:	e5810000 	str	r0, [r1]
    e8e0:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    e8e4:	000143e0 	.word	0x000143e0
    e8e8:	3f00b20c 	.word	0x3f00b20c

0000e8ec <CInterruptSystem::CInterruptSystem()>:
    e8ec:	e1a0c000 	mov	ip, r0
    e8f0:	e2800f47 	add	r0, r0, #284	; 0x11c
    e8f4:	e3a01000 	mov	r1, #0
    e8f8:	e24c3004 	sub	r3, ip, #4
    e8fc:	e1a02000 	mov	r2, r0
    e900:	e5a31004 	str	r1, [r3, #4]!
    e904:	e5a21004 	str	r1, [r2, #4]!
    e908:	e1530000 	cmp	r3, r0
    e90c:	1afffffb 	bne	e900 <CInterruptSystem::CInterruptSystem()+0x14>
    e910:	e30434d4 	movw	r3, #17620	; 0x44d4
    e914:	e3403001 	movt	r3, #1
    e918:	e1a0000c 	mov	r0, ip
    e91c:	e583c000 	str	ip, [r3]
    e920:	e12fff1e 	bx	lr

0000e924 <CInterruptSystem::~CInterruptSystem()>:
    e924:	e30434d4 	movw	r3, #17620	; 0x44d4
    e928:	e3403001 	movt	r3, #1
    e92c:	e3a02000 	mov	r2, #0
    e930:	e5832000 	str	r2, [r3]
    e934:	e12fff1e 	bx	lr

0000e938 <CInterruptSystem::Initialize()>:
    e938:	e30e2888 	movw	r2, #59528	; 0xe888
    e93c:	e3402000 	movt	r2, #0
    e940:	e30e3894 	movw	r3, #59540	; 0xe894
    e944:	e3403000 	movt	r3, #0
    e948:	e92d4010 	push	{r4, lr}
    e94c:	e3a04000 	mov	r4, #0
    e950:	e1a02142 	asr	r2, r2, #2
    e954:	e1a03143 	asr	r3, r3, #2
    e958:	e2422002 	sub	r2, r2, #2
    e95c:	e2433002 	sub	r3, r3, #2
    e960:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    e964:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e968:	e5842018 	str	r2, [r4, #24]
    e96c:	e584301c 	str	r3, [r4, #28]
    e970:	eb000864 	bl	10b08 <SyncDataAndInstructionCache>
    e974:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e978:	e3433f00 	movt	r3, #16128	; 0x3f00
    e97c:	e3e02000 	mvn	r2, #0
    e980:	e583420c 	str	r4, [r3, #524]	; 0x20c
    e984:	e583221c 	str	r2, [r3, #540]	; 0x21c
    e988:	e5832220 	str	r2, [r3, #544]	; 0x220
    e98c:	e5832224 	str	r2, [r3, #548]	; 0x224
    e990:	f1080080 	cpsie	i
    e994:	e3a00001 	mov	r0, #1
    e998:	e8bd8010 	pop	{r4, pc}

0000e99c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    e99c:	e3510047 	cmp	r1, #71	; 0x47
    e9a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e9a4:	e1a04001 	mov	r4, r1
    e9a8:	e1a06002 	mov	r6, r2
    e9ac:	e1a07003 	mov	r7, r3
    e9b0:	8a00001a 	bhi	ea20 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x84>
    e9b4:	e3560000 	cmp	r6, #0
    e9b8:	0a00001f 	beq	ea3c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
    e9bc:	e30453e0 	movw	r5, #17376	; 0x43e0
    e9c0:	e3405001 	movt	r5, #1
    e9c4:	e5953000 	ldr	r3, [r5]
    e9c8:	e3530000 	cmp	r3, #0
    e9cc:	0a000005 	beq	e9e8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>
    e9d0:	e303182c 	movw	r1, #14380	; 0x382c
    e9d4:	e3401001 	movt	r1, #1
    e9d8:	e3030850 	movw	r0, #14416	; 0x3850
    e9dc:	e3400001 	movt	r0, #1
    e9e0:	e3a0207a 	mov	r2, #122	; 0x7a
    e9e4:	ebfff6c6 	bl	c504 <assertion_failed>
    e9e8:	e3540047 	cmp	r4, #71	; 0x47
    e9ec:	e88500c0 	stm	r5, {r6, r7}
    e9f0:	9a000005 	bls	ea0c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x70>
    e9f4:	e303182c 	movw	r1, #14380	; 0x382c
    e9f8:	e3401001 	movt	r1, #1
    e9fc:	e303083c 	movw	r0, #14396	; 0x383c
    ea00:	e3400001 	movt	r0, #1
    ea04:	e3a020a6 	mov	r2, #166	; 0xa6
    ea08:	ebfff6bd 	bl	c504 <assertion_failed>
    ea0c:	e3a03a0b 	mov	r3, #45056	; 0xb000
    ea10:	e3433f00 	movt	r3, #16128	; 0x3f00
    ea14:	e3844080 	orr	r4, r4, #128	; 0x80
    ea18:	e583420c 	str	r4, [r3, #524]	; 0x20c
    ea1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ea20:	e303182c 	movw	r1, #14380	; 0x382c
    ea24:	e3401001 	movt	r1, #1
    ea28:	e303083c 	movw	r0, #14396	; 0x383c
    ea2c:	e3400001 	movt	r0, #1
    ea30:	e3a02078 	mov	r2, #120	; 0x78
    ea34:	ebfff6b2 	bl	c504 <assertion_failed>
    ea38:	eaffffdd 	b	e9b4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
    ea3c:	e303182c 	movw	r1, #14380	; 0x382c
    ea40:	e3401001 	movt	r1, #1
    ea44:	e3030870 	movw	r0, #14448	; 0x3870
    ea48:	e3400001 	movt	r0, #1
    ea4c:	e3a02079 	mov	r2, #121	; 0x79
    ea50:	ebfff6ab 	bl	c504 <assertion_failed>
    ea54:	eaffffd8 	b	e9bc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>

0000ea58 <CInterruptSystem::DisconnectFIQ()>:
    ea58:	e92d4010 	push	{r4, lr}
    ea5c:	e30443e0 	movw	r4, #17376	; 0x43e0
    ea60:	e3404001 	movt	r4, #1
    ea64:	e5943000 	ldr	r3, [r4]
    ea68:	e3530000 	cmp	r3, #0
    ea6c:	0a000006 	beq	ea8c <CInterruptSystem::DisconnectFIQ()+0x34>
    ea70:	e3a02a0b 	mov	r2, #45056	; 0xb000
    ea74:	e3432f00 	movt	r2, #16128	; 0x3f00
    ea78:	e3a03000 	mov	r3, #0
    ea7c:	e582320c 	str	r3, [r2, #524]	; 0x20c
    ea80:	e5843000 	str	r3, [r4]
    ea84:	e5843004 	str	r3, [r4, #4]
    ea88:	e8bd8010 	pop	{r4, pc}
    ea8c:	e303182c 	movw	r1, #14380	; 0x382c
    ea90:	e3401001 	movt	r1, #1
    ea94:	e3030868 	movw	r0, #14440	; 0x3868
    ea98:	e3400001 	movt	r0, #1
    ea9c:	e3a02084 	mov	r2, #132	; 0x84
    eaa0:	ebfff697 	bl	c504 <assertion_failed>
    eaa4:	eafffff1 	b	ea70 <CInterruptSystem::DisconnectFIQ()+0x18>

0000eaa8 <CInterruptSystem::EnableIRQ(unsigned int)>:
    eaa8:	e3500047 	cmp	r0, #71	; 0x47
    eaac:	e92d4010 	push	{r4, lr}
    eab0:	e1a04000 	mov	r4, r0
    eab4:	8a00000e 	bhi	eaf4 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
    eab8:	e350001f 	cmp	r0, #31
    eabc:	930b2210 	movwls	r2, #45584	; 0xb210
    eac0:	93432f00 	movtls	r2, #16128	; 0x3f00
    eac4:	8a000004 	bhi	eadc <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
    eac8:	e204401f 	and	r4, r4, #31
    eacc:	e3a03001 	mov	r3, #1
    ead0:	e1a04413 	lsl	r4, r3, r4
    ead4:	e5824000 	str	r4, [r2]
    ead8:	e8bd8010 	pop	{r4, pc}
    eadc:	e350003f 	cmp	r0, #63	; 0x3f
    eae0:	930b2214 	movwls	r2, #45588	; 0xb214
    eae4:	93432f00 	movtls	r2, #16128	; 0x3f00
    eae8:	830b2218 	movwhi	r2, #45592	; 0xb218
    eaec:	83432f00 	movthi	r2, #16128	; 0x3f00
    eaf0:	eafffff4 	b	eac8 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
    eaf4:	e3a02090 	mov	r2, #144	; 0x90
    eaf8:	e303182c 	movw	r1, #14380	; 0x382c
    eafc:	e3401001 	movt	r1, #1
    eb00:	e3030880 	movw	r0, #14464	; 0x3880
    eb04:	e3400001 	movt	r0, #1
    eb08:	ebfff67d 	bl	c504 <assertion_failed>
    eb0c:	e30b2218 	movw	r2, #45592	; 0xb218
    eb10:	e3432f00 	movt	r2, #16128	; 0x3f00
    eb14:	eaffffeb 	b	eac8 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

0000eb18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    eb18:	e3510047 	cmp	r1, #71	; 0x47
    eb1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    eb20:	e1a04001 	mov	r4, r1
    eb24:	e1a05000 	mov	r5, r0
    eb28:	e1a08002 	mov	r8, r2
    eb2c:	e1a07003 	mov	r7, r3
    eb30:	8a00000e 	bhi	eb70 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
    eb34:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    eb38:	e0856104 	add	r6, r5, r4, lsl #2
    eb3c:	e3530000 	cmp	r3, #0
    eb40:	0a000005 	beq	eb5c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
    eb44:	e303182c 	movw	r1, #14380	; 0x382c
    eb48:	e3401001 	movt	r1, #1
    eb4c:	e3030894 	movw	r0, #14484	; 0x3894
    eb50:	e3400001 	movt	r0, #1
    eb54:	e3a02060 	mov	r2, #96	; 0x60
    eb58:	ebfff669 	bl	c504 <assertion_failed>
    eb5c:	e7858104 	str	r8, [r5, r4, lsl #2]
    eb60:	e1a00004 	mov	r0, r4
    eb64:	e5867120 	str	r7, [r6, #288]	; 0x120
    eb68:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    eb6c:	eaffffcd 	b	eaa8 <CInterruptSystem::EnableIRQ(unsigned int)>
    eb70:	e303182c 	movw	r1, #14380	; 0x382c
    eb74:	e3401001 	movt	r1, #1
    eb78:	e3030880 	movw	r0, #14464	; 0x3880
    eb7c:	e3400001 	movt	r0, #1
    eb80:	e3a0205f 	mov	r2, #95	; 0x5f
    eb84:	ebfff65e 	bl	c504 <assertion_failed>
    eb88:	eaffffe9 	b	eb34 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0000eb8c <CInterruptSystem::DisableIRQ(unsigned int)>:
    eb8c:	e3500047 	cmp	r0, #71	; 0x47
    eb90:	e92d4010 	push	{r4, lr}
    eb94:	e1a04000 	mov	r4, r0
    eb98:	8a00000e 	bhi	ebd8 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
    eb9c:	e350001f 	cmp	r0, #31
    eba0:	930b221c 	movwls	r2, #45596	; 0xb21c
    eba4:	93432f00 	movtls	r2, #16128	; 0x3f00
    eba8:	8a000004 	bhi	ebc0 <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
    ebac:	e204401f 	and	r4, r4, #31
    ebb0:	e3a03001 	mov	r3, #1
    ebb4:	e1a04413 	lsl	r4, r3, r4
    ebb8:	e5824000 	str	r4, [r2]
    ebbc:	e8bd8010 	pop	{r4, pc}
    ebc0:	e350003f 	cmp	r0, #63	; 0x3f
    ebc4:	930b2220 	movwls	r2, #45600	; 0xb220
    ebc8:	93432f00 	movtls	r2, #16128	; 0x3f00
    ebcc:	830b2224 	movwhi	r2, #45604	; 0xb224
    ebd0:	83432f00 	movthi	r2, #16128	; 0x3f00
    ebd4:	eafffff4 	b	ebac <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
    ebd8:	e3a0209b 	mov	r2, #155	; 0x9b
    ebdc:	e303182c 	movw	r1, #14380	; 0x382c
    ebe0:	e3401001 	movt	r1, #1
    ebe4:	e3030880 	movw	r0, #14464	; 0x3880
    ebe8:	e3400001 	movt	r0, #1
    ebec:	ebfff644 	bl	c504 <assertion_failed>
    ebf0:	e30b2224 	movw	r2, #45604	; 0xb224
    ebf4:	e3432f00 	movt	r2, #16128	; 0x3f00
    ebf8:	eaffffeb 	b	ebac <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

0000ebfc <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    ebfc:	e3510047 	cmp	r1, #71	; 0x47
    ec00:	e92d4070 	push	{r4, r5, r6, lr}
    ec04:	e1a04001 	mov	r4, r1
    ec08:	e1a05000 	mov	r5, r0
    ec0c:	8a000009 	bhi	ec38 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    ec10:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    ec14:	e0856104 	add	r6, r5, r4, lsl #2
    ec18:	e3530000 	cmp	r3, #0
    ec1c:	0a00000f 	beq	ec60 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    ec20:	e1a00004 	mov	r0, r4
    ec24:	ebffffd8 	bl	eb8c <CInterruptSystem::DisableIRQ(unsigned int)>
    ec28:	e3a03000 	mov	r3, #0
    ec2c:	e7853104 	str	r3, [r5, r4, lsl #2]
    ec30:	e5863120 	str	r3, [r6, #288]	; 0x120
    ec34:	e8bd8070 	pop	{r4, r5, r6, pc}
    ec38:	e303182c 	movw	r1, #14380	; 0x382c
    ec3c:	e3401001 	movt	r1, #1
    ec40:	e3030880 	movw	r0, #14464	; 0x3880
    ec44:	e3400001 	movt	r0, #1
    ec48:	e3a0206a 	mov	r2, #106	; 0x6a
    ec4c:	e0856104 	add	r6, r5, r4, lsl #2
    ec50:	ebfff62b 	bl	c504 <assertion_failed>
    ec54:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    ec58:	e3530000 	cmp	r3, #0
    ec5c:	1affffef 	bne	ec20 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    ec60:	e303182c 	movw	r1, #14380	; 0x382c
    ec64:	e3401001 	movt	r1, #1
    ec68:	e30308b0 	movw	r0, #14512	; 0x38b0
    ec6c:	e3400001 	movt	r0, #1
    ec70:	e3a0206b 	mov	r2, #107	; 0x6b
    ec74:	ebfff622 	bl	c504 <assertion_failed>
    ec78:	eaffffe8 	b	ec20 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0000ec7c <CInterruptSystem::EnableFIQ(unsigned int)>:
    ec7c:	e3500047 	cmp	r0, #71	; 0x47
    ec80:	e92d4010 	push	{r4, lr}
    ec84:	e1a04000 	mov	r4, r0
    ec88:	9a000005 	bls	eca4 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    ec8c:	e303182c 	movw	r1, #14380	; 0x382c
    ec90:	e3401001 	movt	r1, #1
    ec94:	e303083c 	movw	r0, #14396	; 0x383c
    ec98:	e3400001 	movt	r0, #1
    ec9c:	e3a020a6 	mov	r2, #166	; 0xa6
    eca0:	ebfff617 	bl	c504 <assertion_failed>
    eca4:	e3a03a0b 	mov	r3, #45056	; 0xb000
    eca8:	e3433f00 	movt	r3, #16128	; 0x3f00
    ecac:	e3844080 	orr	r4, r4, #128	; 0x80
    ecb0:	e583420c 	str	r4, [r3, #524]	; 0x20c
    ecb4:	e8bd8010 	pop	{r4, pc}

0000ecb8 <CInterruptSystem::DisableFIQ()>:
    ecb8:	e3a03a0b 	mov	r3, #45056	; 0xb000
    ecbc:	e3433f00 	movt	r3, #16128	; 0x3f00
    ecc0:	e3a02000 	mov	r2, #0
    ecc4:	e583220c 	str	r2, [r3, #524]	; 0x20c
    ecc8:	e12fff1e 	bx	lr

0000eccc <CInterruptSystem::Get()>:
    eccc:	e92d4010 	push	{r4, lr}
    ecd0:	e30444d4 	movw	r4, #17620	; 0x44d4
    ecd4:	e3404001 	movt	r4, #1
    ecd8:	e5940000 	ldr	r0, [r4]
    ecdc:	e3500000 	cmp	r0, #0
    ece0:	18bd8010 	popne	{r4, pc}
    ece4:	e3a020b8 	mov	r2, #184	; 0xb8
    ece8:	e303182c 	movw	r1, #14380	; 0x382c
    ecec:	e3401001 	movt	r1, #1
    ecf0:	e3020614 	movw	r0, #9748	; 0x2614
    ecf4:	e3400001 	movt	r0, #1
    ecf8:	ebfff601 	bl	c504 <assertion_failed>
    ecfc:	e5940000 	ldr	r0, [r4]
    ed00:	e8bd8010 	pop	{r4, pc}

0000ed04 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    ed04:	e3510047 	cmp	r1, #71	; 0x47
    ed08:	e92d4070 	push	{r4, r5, r6, lr}
    ed0c:	e1a06001 	mov	r6, r1
    ed10:	e1a05000 	mov	r5, r0
    ed14:	8a000007 	bhi	ed38 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    ed18:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    ed1c:	e0855106 	add	r5, r5, r6, lsl #2
    ed20:	e3540000 	cmp	r4, #0
    ed24:	0a00000d 	beq	ed60 <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
    ed28:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    ed2c:	e12fff34 	blx	r4
    ed30:	e3a00001 	mov	r0, #1
    ed34:	e8bd8070 	pop	{r4, r5, r6, pc}
    ed38:	e303182c 	movw	r1, #14380	; 0x382c
    ed3c:	e3401001 	movt	r1, #1
    ed40:	e3030880 	movw	r0, #14464	; 0x3880
    ed44:	e3400001 	movt	r0, #1
    ed48:	e3a020be 	mov	r2, #190	; 0xbe
    ed4c:	ebfff5ec 	bl	c504 <assertion_failed>
    ed50:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    ed54:	e0855106 	add	r5, r5, r6, lsl #2
    ed58:	e3540000 	cmp	r4, #0
    ed5c:	1afffff1 	bne	ed28 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    ed60:	e1a00006 	mov	r0, r6
    ed64:	ebffff88 	bl	eb8c <CInterruptSystem::DisableIRQ(unsigned int)>
    ed68:	e1a00004 	mov	r0, r4
    ed6c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ed70 <CInterruptSystem::InterruptHandler()>:
    ed70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ed74:	e30464d4 	movw	r6, #17620	; 0x44d4
    ed78:	e3406001 	movt	r6, #1
    ed7c:	e24dd010 	sub	sp, sp, #16
    ed80:	e5963000 	ldr	r3, [r6]
    ed84:	e3530000 	cmp	r3, #0
    ed88:	0a000022 	beq	ee18 <CInterruptSystem::InterruptHandler()+0xa8>
    ed8c:	eb000336 	bl	fa6c <CMultiCoreSupport::LocalInterruptHandler()>
    ed90:	e3500000 	cmp	r0, #0
    ed94:	1a000018 	bne	edfc <CInterruptSystem::InterruptHandler()+0x8c>
    ed98:	e3a03a0b 	mov	r3, #45056	; 0xb000
    ed9c:	e3433f00 	movt	r3, #16128	; 0x3f00
    eda0:	e1a07000 	mov	r7, r0
    eda4:	e28d8004 	add	r8, sp, #4
    eda8:	e5934204 	ldr	r4, [r3, #516]	; 0x204
    edac:	e58d4004 	str	r4, [sp, #4]
    edb0:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    edb4:	e58d2008 	str	r2, [sp, #8]
    edb8:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    edbc:	e6ef3073 	uxtb	r3, r3
    edc0:	e58d300c 	str	r3, [sp, #12]
    edc4:	e3540000 	cmp	r4, #0
    edc8:	0a00000d 	beq	ee04 <CInterruptSystem::InterruptHandler()+0x94>
    edcc:	e1a05007 	mov	r5, r7
    edd0:	ea000002 	b	ede0 <CInterruptSystem::InterruptHandler()+0x70>
    edd4:	e1b040a4 	lsrs	r4, r4, #1
    edd8:	e2855001 	add	r5, r5, #1
    eddc:	0a000008 	beq	ee04 <CInterruptSystem::InterruptHandler()+0x94>
    ede0:	e3140001 	tst	r4, #1
    ede4:	0afffffa 	beq	edd4 <CInterruptSystem::InterruptHandler()+0x64>
    ede8:	e1a01005 	mov	r1, r5
    edec:	e5960000 	ldr	r0, [r6]
    edf0:	ebffffc3 	bl	ed04 <CInterruptSystem::CallIRQHandler(unsigned int)>
    edf4:	e3500000 	cmp	r0, #0
    edf8:	0afffff5 	beq	edd4 <CInterruptSystem::InterruptHandler()+0x64>
    edfc:	e28dd010 	add	sp, sp, #16
    ee00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ee04:	e2877020 	add	r7, r7, #32
    ee08:	e3570060 	cmp	r7, #96	; 0x60
    ee0c:	0afffffa 	beq	edfc <CInterruptSystem::InterruptHandler()+0x8c>
    ee10:	e5b84004 	ldr	r4, [r8, #4]!
    ee14:	eaffffea 	b	edc4 <CInterruptSystem::InterruptHandler()+0x54>
    ee18:	e303182c 	movw	r1, #14380	; 0x382c
    ee1c:	e3401001 	movt	r1, #1
    ee20:	e3020614 	movw	r0, #9748	; 0x2614
    ee24:	e3400001 	movt	r0, #1
    ee28:	e3a020d1 	mov	r2, #209	; 0xd1
    ee2c:	ebfff5b4 	bl	c504 <assertion_failed>
    ee30:	eaffffd5 	b	ed8c <CInterruptSystem::InterruptHandler()+0x1c>

0000ee34 <InterruptHandler>:
    ee34:	eaffffcd 	b	ed70 <CInterruptSystem::InterruptHandler()>

0000ee38 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    ee38:	e1a03000 	mov	r3, r0
    ee3c:	e5801000 	str	r1, [r0]
    ee40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ee44:	e3a0e000 	mov	lr, #0
    ee48:	e28020dc 	add	r2, r0, #220	; 0xdc
    ee4c:	e1a0c00e 	mov	ip, lr
    ee50:	e5a3e004 	str	lr, [r3, #4]!
    ee54:	e5a3c004 	str	ip, [r3, #4]!
    ee58:	e1530002 	cmp	r3, r2
    ee5c:	1afffffc 	bne	ee54 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    ee60:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ee64 <CGPIOManager::~CGPIOManager()>:
    ee64:	e92d4070 	push	{r4, r5, r6, lr}
    ee68:	e1a06000 	mov	r6, r0
    ee6c:	e2804004 	add	r4, r0, #4
    ee70:	e28050dc 	add	r5, r0, #220	; 0xdc
    ee74:	e5b43004 	ldr	r3, [r4, #4]!
    ee78:	e30318cc 	movw	r1, #14540	; 0x38cc
    ee7c:	e3401001 	movt	r1, #1
    ee80:	e3530000 	cmp	r3, #0
    ee84:	e30308dc 	movw	r0, #14556	; 0x38dc
    ee88:	e3400001 	movt	r0, #1
    ee8c:	e3a0202c 	mov	r2, #44	; 0x2c
    ee90:	0a000000 	beq	ee98 <CGPIOManager::~CGPIOManager()+0x34>
    ee94:	ebfff59a 	bl	c504 <assertion_failed>
    ee98:	e1540005 	cmp	r4, r5
    ee9c:	1afffff4 	bne	ee74 <CGPIOManager::~CGPIOManager()+0x10>
    eea0:	e5963004 	ldr	r3, [r6, #4]
    eea4:	e3530000 	cmp	r3, #0
    eea8:	0a000004 	beq	eec0 <CGPIOManager::~CGPIOManager()+0x5c>
    eeac:	e5960000 	ldr	r0, [r6]
    eeb0:	e3500000 	cmp	r0, #0
    eeb4:	0a000003 	beq	eec8 <CGPIOManager::~CGPIOManager()+0x64>
    eeb8:	e3a01034 	mov	r1, #52	; 0x34
    eebc:	ebffff4e 	bl	ebfc <CInterruptSystem::DisconnectIRQ(unsigned int)>
    eec0:	e1a00006 	mov	r0, r6
    eec4:	e8bd8070 	pop	{r4, r5, r6, pc}
    eec8:	e30318cc 	movw	r1, #14540	; 0x38cc
    eecc:	e3401001 	movt	r1, #1
    eed0:	e30308f0 	movw	r0, #14576	; 0x38f0
    eed4:	e3400001 	movt	r0, #1
    eed8:	e3a02032 	mov	r2, #50	; 0x32
    eedc:	ebfff588 	bl	c504 <assertion_failed>
    eee0:	e5960000 	ldr	r0, [r6]
    eee4:	eafffff3 	b	eeb8 <CGPIOManager::~CGPIOManager()+0x54>

0000eee8 <CGPIOManager::Initialize()>:
    eee8:	e5903004 	ldr	r3, [r0, #4]
    eeec:	e92d4010 	push	{r4, lr}
    eef0:	e3530000 	cmp	r3, #0
    eef4:	e1a04000 	mov	r4, r0
    eef8:	1a00000b 	bne	ef2c <CGPIOManager::Initialize()+0x44>
    eefc:	e5940000 	ldr	r0, [r4]
    ef00:	e3500000 	cmp	r0, #0
    ef04:	0a000011 	beq	ef50 <CGPIOManager::Initialize()+0x68>
    ef08:	e1a03004 	mov	r3, r4
    ef0c:	e3a01034 	mov	r1, #52	; 0x34
    ef10:	e30f2194 	movw	r2, #61844	; 0xf194
    ef14:	e3402000 	movt	r2, #0
    ef18:	ebfffefe 	bl	eb18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    ef1c:	e3a03001 	mov	r3, #1
    ef20:	e1a00003 	mov	r0, r3
    ef24:	e5843004 	str	r3, [r4, #4]
    ef28:	e8bd8010 	pop	{r4, pc}
    ef2c:	e30318cc 	movw	r1, #14540	; 0x38cc
    ef30:	e3401001 	movt	r1, #1
    ef34:	e3030904 	movw	r0, #14596	; 0x3904
    ef38:	e3400001 	movt	r0, #1
    ef3c:	e3a0203b 	mov	r2, #59	; 0x3b
    ef40:	ebfff56f 	bl	c504 <assertion_failed>
    ef44:	e5940000 	ldr	r0, [r4]
    ef48:	e3500000 	cmp	r0, #0
    ef4c:	1affffed 	bne	ef08 <CGPIOManager::Initialize()+0x20>
    ef50:	e30318cc 	movw	r1, #14540	; 0x38cc
    ef54:	e3401001 	movt	r1, #1
    ef58:	e30308f0 	movw	r0, #14576	; 0x38f0
    ef5c:	e3400001 	movt	r0, #1
    ef60:	e3a0203c 	mov	r2, #60	; 0x3c
    ef64:	ebfff566 	bl	c504 <assertion_failed>
    ef68:	e5940000 	ldr	r0, [r4]
    ef6c:	eaffffe5 	b	ef08 <CGPIOManager::Initialize()+0x20>

0000ef70 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    ef70:	e5903004 	ldr	r3, [r0, #4]
    ef74:	e92d4070 	push	{r4, r5, r6, lr}
    ef78:	e3530000 	cmp	r3, #0
    ef7c:	e1a04000 	mov	r4, r0
    ef80:	e1a05001 	mov	r5, r1
    ef84:	0a000010 	beq	efcc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
    ef88:	e3550000 	cmp	r5, #0
    ef8c:	0a00001c 	beq	f004 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    ef90:	e5956004 	ldr	r6, [r5, #4]
    ef94:	e3560035 	cmp	r6, #53	; 0x35
    ef98:	8a000012 	bhi	efe8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
    ef9c:	e0844106 	add	r4, r4, r6, lsl #2
    efa0:	e5943008 	ldr	r3, [r4, #8]
    efa4:	e3530000 	cmp	r3, #0
    efa8:	0a000005 	beq	efc4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    efac:	e30318cc 	movw	r1, #14540	; 0x38cc
    efb0:	e3401001 	movt	r1, #1
    efb4:	e30308dc 	movw	r0, #14556	; 0x38dc
    efb8:	e3400001 	movt	r0, #1
    efbc:	e3a0204b 	mov	r2, #75	; 0x4b
    efc0:	ebfff54f 	bl	c504 <assertion_failed>
    efc4:	e5845008 	str	r5, [r4, #8]
    efc8:	e8bd8070 	pop	{r4, r5, r6, pc}
    efcc:	e30318cc 	movw	r1, #14540	; 0x38cc
    efd0:	e3401001 	movt	r1, #1
    efd4:	e3030918 	movw	r0, #14616	; 0x3918
    efd8:	e3400001 	movt	r0, #1
    efdc:	e3a02045 	mov	r2, #69	; 0x45
    efe0:	ebfff547 	bl	c504 <assertion_failed>
    efe4:	eaffffe7 	b	ef88 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    efe8:	e30318cc 	movw	r1, #14540	; 0x38cc
    efec:	e3401001 	movt	r1, #1
    eff0:	e302041c 	movw	r0, #9244	; 0x241c
    eff4:	e3400001 	movt	r0, #1
    eff8:	e3a02049 	mov	r2, #73	; 0x49
    effc:	ebfff540 	bl	c504 <assertion_failed>
    f000:	eaffffe5 	b	ef9c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    f004:	e30318cc 	movw	r1, #14540	; 0x38cc
    f008:	e3401001 	movt	r1, #1
    f00c:	e3030928 	movw	r0, #14632	; 0x3928
    f010:	e3400001 	movt	r0, #1
    f014:	e3a02047 	mov	r2, #71	; 0x47
    f018:	ebfff539 	bl	c504 <assertion_failed>
    f01c:	eaffffdb 	b	ef90 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

0000f020 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    f020:	e5903004 	ldr	r3, [r0, #4]
    f024:	e92d4070 	push	{r4, r5, r6, lr}
    f028:	e3530000 	cmp	r3, #0
    f02c:	e1a04000 	mov	r4, r0
    f030:	e1a05001 	mov	r5, r1
    f034:	0a00000b 	beq	f068 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    f038:	e3550000 	cmp	r5, #0
    f03c:	0a000021 	beq	f0c8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    f040:	e5955004 	ldr	r5, [r5, #4]
    f044:	e3550035 	cmp	r5, #53	; 0x35
    f048:	8a00000d 	bhi	f084 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
    f04c:	e0844105 	add	r4, r4, r5, lsl #2
    f050:	e5943008 	ldr	r3, [r4, #8]
    f054:	e3530000 	cmp	r3, #0
    f058:	0a000013 	beq	f0ac <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
    f05c:	e3a03000 	mov	r3, #0
    f060:	e5843008 	str	r3, [r4, #8]
    f064:	e8bd8070 	pop	{r4, r5, r6, pc}
    f068:	e30318cc 	movw	r1, #14540	; 0x38cc
    f06c:	e3401001 	movt	r1, #1
    f070:	e3030918 	movw	r0, #14616	; 0x3918
    f074:	e3400001 	movt	r0, #1
    f078:	e3a02052 	mov	r2, #82	; 0x52
    f07c:	ebfff520 	bl	c504 <assertion_failed>
    f080:	eaffffec 	b	f038 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    f084:	e0844105 	add	r4, r4, r5, lsl #2
    f088:	e30318cc 	movw	r1, #14540	; 0x38cc
    f08c:	e3401001 	movt	r1, #1
    f090:	e302041c 	movw	r0, #9244	; 0x241c
    f094:	e3400001 	movt	r0, #1
    f098:	e3a02056 	mov	r2, #86	; 0x56
    f09c:	ebfff518 	bl	c504 <assertion_failed>
    f0a0:	e5943008 	ldr	r3, [r4, #8]
    f0a4:	e3530000 	cmp	r3, #0
    f0a8:	1affffeb 	bne	f05c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    f0ac:	e30318cc 	movw	r1, #14540	; 0x38cc
    f0b0:	e3401001 	movt	r1, #1
    f0b4:	e3030934 	movw	r0, #14644	; 0x3934
    f0b8:	e3400001 	movt	r0, #1
    f0bc:	e3a02058 	mov	r2, #88	; 0x58
    f0c0:	ebfff50f 	bl	c504 <assertion_failed>
    f0c4:	eaffffe4 	b	f05c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    f0c8:	e30318cc 	movw	r1, #14540	; 0x38cc
    f0cc:	e3401001 	movt	r1, #1
    f0d0:	e3030928 	movw	r0, #14632	; 0x3928
    f0d4:	e3400001 	movt	r0, #1
    f0d8:	e3a02054 	mov	r2, #84	; 0x54
    f0dc:	ebfff508 	bl	c504 <assertion_failed>
    f0e0:	eaffffd6 	b	f040 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

0000f0e4 <CGPIOManager::InterruptHandler()>:
    f0e4:	e5903004 	ldr	r3, [r0, #4]
    f0e8:	e92d4070 	push	{r4, r5, r6, lr}
    f0ec:	e3530000 	cmp	r3, #0
    f0f0:	e1a06000 	mov	r6, r0
    f0f4:	0a00001c 	beq	f16c <CGPIOManager::InterruptHandler()+0x88>
    f0f8:	e3a03000 	mov	r3, #0
    f0fc:	e3433f20 	movt	r3, #16160	; 0x3f20
    f100:	e1a02003 	mov	r2, r3
    f104:	e3a04000 	mov	r4, #0
    f108:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    f10c:	ea000004 	b	f124 <CGPIOManager::InterruptHandler()+0x40>
    f110:	e2844001 	add	r4, r4, #1
    f114:	e314001f 	tst	r4, #31
    f118:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    f11c:	e3540036 	cmp	r4, #54	; 0x36
    f120:	08bd8070 	popeq	{r4, r5, r6, pc}
    f124:	e3130001 	tst	r3, #1
    f128:	e1a030a3 	lsr	r3, r3, #1
    f12c:	0afffff7 	beq	f110 <CGPIOManager::InterruptHandler()+0x2c>
    f130:	e2843002 	add	r3, r4, #2
    f134:	e204501f 	and	r5, r4, #31
    f138:	e3a02001 	mov	r2, #1
    f13c:	e7960103 	ldr	r0, [r6, r3, lsl #2]
    f140:	e1a05512 	lsl	r5, r2, r5
    f144:	e3500000 	cmp	r0, #0
    f148:	0a00000e 	beq	f188 <CGPIOManager::InterruptHandler()+0xa4>
    f14c:	ebffe961 	bl	96d8 <CGPIOPin::InterruptHandler()>
    f150:	e1a042a4 	lsr	r4, r4, #5
    f154:	e3a03010 	mov	r3, #16
    f158:	e3403fc8 	movt	r3, #4040	; 0xfc8
    f15c:	e0843003 	add	r3, r4, r3
    f160:	e1a03103 	lsl	r3, r3, #2
    f164:	e5835000 	str	r5, [r3]
    f168:	e8bd8070 	pop	{r4, r5, r6, pc}
    f16c:	e30318cc 	movw	r1, #14540	; 0x38cc
    f170:	e3401001 	movt	r1, #1
    f174:	e3030918 	movw	r0, #14616	; 0x3918
    f178:	e3400001 	movt	r0, #1
    f17c:	e3a0205e 	mov	r2, #94	; 0x5e
    f180:	ebfff4df 	bl	c504 <assertion_failed>
    f184:	eaffffdb 	b	f0f8 <CGPIOManager::InterruptHandler()+0x14>
    f188:	e1a00004 	mov	r0, r4
    f18c:	ebffe97d 	bl	9788 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    f190:	eaffffee 	b	f150 <CGPIOManager::InterruptHandler()+0x6c>

0000f194 <CGPIOManager::InterruptStub(void*)>:
    f194:	e92d4010 	push	{r4, lr}
    f198:	e2504000 	subs	r4, r0, #0
    f19c:	0a000002 	beq	f1ac <CGPIOManager::InterruptStub(void*)+0x18>
    f1a0:	e1a00004 	mov	r0, r4
    f1a4:	e8bd4010 	pop	{r4, lr}
    f1a8:	eaffffcd 	b	f0e4 <CGPIOManager::InterruptHandler()>
    f1ac:	e30318cc 	movw	r1, #14540	; 0x38cc
    f1b0:	e3401001 	movt	r1, #1
    f1b4:	e3030948 	movw	r0, #14664	; 0x3948
    f1b8:	e3400001 	movt	r0, #1
    f1bc:	e3a0208a 	mov	r2, #138	; 0x8a
    f1c0:	ebfff4cf 	bl	c504 <assertion_failed>
    f1c4:	e1a00004 	mov	r0, r4
    f1c8:	e8bd4010 	pop	{r4, lr}
    f1cc:	eaffffc4 	b	f0e4 <CGPIOManager::InterruptHandler()>

0000f1d0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    f1d0:	e12fff1e 	bx	lr

0000f1d4 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    f1d4:	e92d4010 	push	{r4, lr}
    f1d8:	e3a01010 	mov	r1, #16
    f1dc:	e1a04000 	mov	r4, r0
    f1e0:	ebffea49 	bl	9b0c <operator delete(void*, unsigned int)>
    f1e4:	e1a00004 	mov	r0, r4
    f1e8:	e8bd8010 	pop	{r4, pc}

0000f1ec <CVirtualGPIOPin::Write(unsigned int)>:
    f1ec:	e5903004 	ldr	r3, [r0, #4]
    f1f0:	e3530001 	cmp	r3, #1
    f1f4:	812fff1e 	bxhi	lr
    f1f8:	e92d4070 	push	{r4, r5, r6, lr}
    f1fc:	e30454d8 	movw	r5, #17624	; 0x44d8
    f200:	e3405001 	movt	r5, #1
    f204:	e3510001 	cmp	r1, #1
    f208:	93a03000 	movls	r3, #0
    f20c:	83a03001 	movhi	r3, #1
    f210:	e5952000 	ldr	r2, [r5]
    f214:	e3520000 	cmp	r2, #0
    f218:	03833001 	orreq	r3, r3, #1
    f21c:	e3530000 	cmp	r3, #0
    f220:	18bd8070 	popne	{r4, r5, r6, pc}
    f224:	e1a04000 	mov	r4, r0
    f228:	e2850004 	add	r0, r5, #4
    f22c:	e1a06001 	mov	r6, r1
    f230:	eb000292 	bl	fc80 <CSpinLock::Acquire()>
    f234:	e1d410bc 	ldrh	r1, [r4, #12]
    f238:	e1d430be 	ldrh	r3, [r4, #14]
    f23c:	e5846008 	str	r6, [r4, #8]
    f240:	e0632001 	rsb	r2, r3, r1
    f244:	e6bf2072 	sxth	r2, r2
    f248:	e3520000 	cmp	r2, #0
    f24c:	da00000c 	ble	f284 <CVirtualGPIOPin::Write(unsigned int)+0x98>
    f250:	e3560000 	cmp	r6, #0
    f254:	02832001 	addeq	r2, r3, #1
    f258:	06ff3072 	uxtheq	r3, r2
    f25c:	01c430be 	strheq	r3, [r4, #14]
    f260:	1a00000c 	bne	f298 <CVirtualGPIOPin::Write(unsigned int)+0xac>
    f264:	e594c004 	ldr	ip, [r4, #4]
    f268:	e1833801 	orr	r3, r3, r1, lsl #16
    f26c:	e5952000 	ldr	r2, [r5]
    f270:	e30404dc 	movw	r0, #17628	; 0x44dc
    f274:	e3400001 	movt	r0, #1
    f278:	e8bd4070 	pop	{r4, r5, r6, lr}
    f27c:	e782310c 	str	r3, [r2, ip, lsl #2]
    f280:	ea00029a 	b	fcf0 <CSpinLock::Release()>
    f284:	e3560000 	cmp	r6, #0
    f288:	12811001 	addne	r1, r1, #1
    f28c:	16ff1071 	uxthne	r1, r1
    f290:	11c410bc 	strhne	r1, [r4, #12]
    f294:	1afffff2 	bne	f264 <CVirtualGPIOPin::Write(unsigned int)+0x78>
    f298:	e30404dc 	movw	r0, #17628	; 0x44dc
    f29c:	e3400001 	movt	r0, #1
    f2a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    f2a4:	ea000291 	b	fcf0 <CSpinLock::Release()>

0000f2a8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    f2a8:	e92d4070 	push	{r4, r5, r6, lr}
    f2ac:	e3510001 	cmp	r1, #1
    f2b0:	e3a03000 	mov	r3, #0
    f2b4:	e303295c 	movw	r2, #14684	; 0x395c
    f2b8:	e3402001 	movt	r2, #1
    f2bc:	e24dd038 	sub	sp, sp, #56	; 0x38
    f2c0:	e1a04000 	mov	r4, r0
    f2c4:	e5801004 	str	r1, [r0, #4]
    f2c8:	e5802000 	str	r2, [r0]
    f2cc:	e1c030bc 	strh	r3, [r0, #12]
    f2d0:	e1c030be 	strh	r3, [r0, #14]
    f2d4:	9a000002 	bls	f2e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x3c>
    f2d8:	e1a00004 	mov	r0, r4
    f2dc:	e28dd038 	add	sp, sp, #56	; 0x38
    f2e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f2e4:	e30454d8 	movw	r5, #17624	; 0x44d8
    f2e8:	e3405001 	movt	r5, #1
    f2ec:	e2850004 	add	r0, r5, #4
    f2f0:	eb000262 	bl	fc80 <CSpinLock::Acquire()>
    f2f4:	e5956000 	ldr	r6, [r5]
    f2f8:	e3560000 	cmp	r6, #0
    f2fc:	0a000008 	beq	f324 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x7c>
    f300:	e30404dc 	movw	r0, #17628	; 0x44dc
    f304:	e3400001 	movt	r0, #1
    f308:	eb000278 	bl	fcf0 <CSpinLock::Release()>
    f30c:	e1a00004 	mov	r0, r4
    f310:	e3a01000 	mov	r1, #0
    f314:	ebffffb4 	bl	f1ec <CVirtualGPIOPin::Write(unsigned int)>
    f318:	e1a00004 	mov	r0, r4
    f31c:	e28dd038 	add	sp, sp, #56	; 0x38
    f320:	e8bd8070 	pop	{r4, r5, r6, pc}
    f324:	e28d001c 	add	r0, sp, #28
    f328:	ebffe5d3 	bl	8a7c <CBcmPropertyTags::CBcmPropertyTags()>
    f32c:	e3a03010 	mov	r3, #16
    f330:	e58d6000 	str	r6, [sp]
    f334:	e28d001c 	add	r0, sp, #28
    f338:	e28d200c 	add	r2, sp, #12
    f33c:	e3a01010 	mov	r1, #16
    f340:	e3401004 	movt	r1, #4
    f344:	ebffe614 	bl	8b9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f348:	e3500000 	cmp	r0, #0
    f34c:	e28d001c 	add	r0, sp, #28
    f350:	159d3018 	ldrne	r3, [sp, #24]
    f354:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    f358:	15853000 	strne	r3, [r5]
    f35c:	ebffe5cc 	bl	8a94 <CBcmPropertyTags::~CBcmPropertyTags()>
    f360:	eaffffe6 	b	f300 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>

0000f364 <CVirtualGPIOPin::Invert()>:
    f364:	e5901008 	ldr	r1, [r0, #8]
    f368:	e2211001 	eor	r1, r1, #1
    f36c:	eaffff9e 	b	f1ec <CVirtualGPIOPin::Write(unsigned int)>

0000f370 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    f370:	e92d4010 	push	{r4, lr}
    f374:	e30444dc 	movw	r4, #17628	; 0x44dc
    f378:	e3404001 	movt	r4, #1
    f37c:	e3a01000 	mov	r1, #0
    f380:	e1a00004 	mov	r0, r4
    f384:	eb000221 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
    f388:	e1a00004 	mov	r0, r4
    f38c:	e30424bc 	movw	r2, #17596	; 0x44bc
    f390:	e3402001 	movt	r2, #1
    f394:	e30f1c4c 	movw	r1, #64588	; 0xfc4c
    f398:	e3401000 	movt	r1, #0
    f39c:	e8bd4010 	pop	{r4, lr}
    f3a0:	eaffe9db 	b	9b14 <__aeabi_atexit>

0000f3a4 <CMachineInfo::CMachineInfo()>:
    f3a4:	e30424f4 	movw	r2, #17652	; 0x44f4
    f3a8:	e3402001 	movt	r2, #1
    f3ac:	e92d4030 	push	{r4, r5, lr}
    f3b0:	e5925000 	ldr	r5, [r2]
    f3b4:	e1a04000 	mov	r4, r0
    f3b8:	e3a03000 	mov	r3, #0
    f3bc:	e3a0000c 	mov	r0, #12
    f3c0:	e1550003 	cmp	r5, r3
    f3c4:	e3a01003 	mov	r1, #3
    f3c8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f3cc:	e5c40004 	strb	r0, [r4, #4]
    f3d0:	e5c41010 	strb	r1, [r4, #16]
    f3d4:	e5843000 	str	r3, [r4]
    f3d8:	e5843008 	str	r3, [r4, #8]
    f3dc:	e584300c 	str	r3, [r4, #12]
    f3e0:	e5843014 	str	r3, [r4, #20]
    f3e4:	0a00000e 	beq	f424 <CMachineInfo::CMachineInfo()+0x80>
    f3e8:	e595e000 	ldr	lr, [r5]
    f3ec:	e5d5c004 	ldrb	ip, [r5, #4]
    f3f0:	e5950008 	ldr	r0, [r5, #8]
    f3f4:	e595100c 	ldr	r1, [r5, #12]
    f3f8:	e5d52010 	ldrb	r2, [r5, #16]
    f3fc:	e5953014 	ldr	r3, [r5, #20]
    f400:	e5843014 	str	r3, [r4, #20]
    f404:	e584e000 	str	lr, [r4]
    f408:	e5c4c004 	strb	ip, [r4, #4]
    f40c:	e5840008 	str	r0, [r4, #8]
    f410:	e584100c 	str	r1, [r4, #12]
    f414:	e5c42010 	strb	r2, [r4, #16]
    f418:	e1a00004 	mov	r0, r4
    f41c:	e28dd03c 	add	sp, sp, #60	; 0x3c
    f420:	e8bd8030 	pop	{r4, r5, pc}
    f424:	e28d001c 	add	r0, sp, #28
    f428:	e5824000 	str	r4, [r2]
    f42c:	ebffe592 	bl	8a7c <CBcmPropertyTags::CBcmPropertyTags()>
    f430:	e58d5000 	str	r5, [sp]
    f434:	e28d001c 	add	r0, sp, #28
    f438:	e3a01002 	mov	r1, #2
    f43c:	e3401001 	movt	r1, #1
    f440:	e3a03010 	mov	r3, #16
    f444:	e28d200c 	add	r2, sp, #12
    f448:	ebffe5d3 	bl	8b9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f44c:	e3500000 	cmp	r0, #0
    f450:	0a00000d 	beq	f48c <CMachineInfo::CMachineInfo()+0xe8>
    f454:	e59d2018 	ldr	r2, [sp, #24]
    f458:	e5842000 	str	r2, [r4]
    f45c:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    f460:	1a00000c 	bne	f498 <CMachineInfo::CMachineInfo()+0xf4>
    f464:	e3a01002 	mov	r1, #2
    f468:	e30309dc 	movw	r0, #14812	; 0x39dc
    f46c:	e3400001 	movt	r0, #1
    f470:	ea000000 	b	f478 <CMachineInfo::CMachineInfo()+0xd4>
    f474:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    f478:	e1520001 	cmp	r2, r1
    f47c:	0a000012 	beq	f4cc <CMachineInfo::CMachineInfo()+0x128>
    f480:	e2833001 	add	r3, r3, #1
    f484:	e3530011 	cmp	r3, #17
    f488:	1afffff9 	bne	f474 <CMachineInfo::CMachineInfo()+0xd0>
    f48c:	e28d001c 	add	r0, sp, #28
    f490:	ebffe57f 	bl	8a94 <CBcmPropertyTags::~CBcmPropertyTags()>
    f494:	eaffffdf 	b	f418 <CMachineInfo::CMachineInfo()+0x74>
    f498:	e303c964 	movw	ip, #14692	; 0x3964
    f49c:	e340c001 	movt	ip, #1
    f4a0:	e1a0100c 	mov	r1, ip
    f4a4:	e1a03005 	mov	r3, r5
    f4a8:	e7e70252 	ubfx	r0, r2, #4, #8
    f4ac:	ea000000 	b	f4b4 <CMachineInfo::CMachineInfo()+0x110>
    f4b0:	e5b1500c 	ldr	r5, [r1, #12]!
    f4b4:	e1550000 	cmp	r5, r0
    f4b8:	0a000011 	beq	f504 <CMachineInfo::CMachineInfo()+0x160>
    f4bc:	e2833001 	add	r3, r3, #1
    f4c0:	e353000a 	cmp	r3, #10
    f4c4:	1afffff9 	bne	f4b0 <CMachineInfo::CMachineInfo()+0x10c>
    f4c8:	eaffffef 	b	f48c <CMachineInfo::CMachineInfo()+0xe8>
    f4cc:	e3032964 	movw	r2, #14692	; 0x3964
    f4d0:	e3402001 	movt	r2, #1
    f4d4:	e0823203 	add	r3, r2, r3, lsl #4
    f4d8:	e3a01001 	mov	r1, #1
    f4dc:	e3a02000 	mov	r2, #0
    f4e0:	e5841008 	str	r1, [r4, #8]
    f4e4:	e5c42010 	strb	r2, [r4, #16]
    f4e8:	e5d3107c 	ldrb	r1, [r3, #124]	; 0x7c
    f4ec:	e5932080 	ldr	r2, [r3, #128]	; 0x80
    f4f0:	e5933084 	ldr	r3, [r3, #132]	; 0x84
    f4f4:	e5c41004 	strb	r1, [r4, #4]
    f4f8:	e584200c 	str	r2, [r4, #12]
    f4fc:	e5843014 	str	r3, [r4, #20]
    f500:	eaffffe1 	b	f48c <CMachineInfo::CMachineInfo()+0xe8>
    f504:	e1a01203 	lsl	r1, r3, #4
    f508:	e7e30652 	ubfx	r0, r2, #12, #4
    f50c:	e0413103 	sub	r3, r1, r3, lsl #2
    f510:	e7e2ea52 	ubfx	lr, r2, #20, #3
    f514:	e08cc003 	add	ip, ip, r3
    f518:	e3a01c01 	mov	r1, #256	; 0x100
    f51c:	e3500002 	cmp	r0, #2
    f520:	e5c40010 	strb	r0, [r4, #16]
    f524:	e202300f 	and	r3, r2, #15
    f528:	e1a02e11 	lsl	r2, r1, lr
    f52c:	e5dc0004 	ldrb	r0, [ip, #4]
    f530:	e2833001 	add	r3, r3, #1
    f534:	e59c1008 	ldr	r1, [ip, #8]
    f538:	e5841008 	str	r1, [r4, #8]
    f53c:	83a01003 	movhi	r1, #3
    f540:	85c41010 	strbhi	r1, [r4, #16]
    f544:	e3500003 	cmp	r0, #3
    f548:	03520c01 	cmpeq	r2, #256	; 0x100
    f54c:	e5c40004 	strb	r0, [r4, #4]
    f550:	e5842014 	str	r2, [r4, #20]
    f554:	e584300c 	str	r3, [r4, #12]
    f558:	1affffcb 	bne	f48c <CMachineInfo::CMachineInfo()+0xe8>
    f55c:	e3530001 	cmp	r3, #1
    f560:	13a03002 	movne	r3, #2
    f564:	03a03001 	moveq	r3, #1
    f568:	e5c43004 	strb	r3, [r4, #4]
    f56c:	eaffffc6 	b	f48c <CMachineInfo::CMachineInfo()+0xe8>

0000f570 <CMachineInfo::~CMachineInfo()>:
    f570:	e30434f4 	movw	r3, #17652	; 0x44f4
    f574:	e3403001 	movt	r3, #1
    f578:	e3a0100c 	mov	r1, #12
    f57c:	e5c01004 	strb	r1, [r0, #4]
    f580:	e5932000 	ldr	r2, [r3]
    f584:	e1500002 	cmp	r0, r2
    f588:	03a02000 	moveq	r2, #0
    f58c:	05832000 	streq	r2, [r3]
    f590:	e12fff1e 	bx	lr

0000f594 <CMachineInfo::GetMachineModel() const>:
    f594:	e5d00004 	ldrb	r0, [r0, #4]
    f598:	e12fff1e 	bx	lr

0000f59c <CMachineInfo::GetMachineName() const>:
    f59c:	e5d02004 	ldrb	r2, [r0, #4]
    f5a0:	e3033964 	movw	r3, #14692	; 0x3964
    f5a4:	e3403001 	movt	r3, #1
    f5a8:	e0833102 	add	r3, r3, r2, lsl #2
    f5ac:	e5930188 	ldr	r0, [r3, #392]	; 0x188
    f5b0:	e12fff1e 	bx	lr

0000f5b4 <CMachineInfo::GetModelMajor() const>:
    f5b4:	e5900008 	ldr	r0, [r0, #8]
    f5b8:	e12fff1e 	bx	lr

0000f5bc <CMachineInfo::GetModelRevision() const>:
    f5bc:	e590000c 	ldr	r0, [r0, #12]
    f5c0:	e12fff1e 	bx	lr

0000f5c4 <CMachineInfo::GetSoCType() const>:
    f5c4:	e5d00010 	ldrb	r0, [r0, #16]
    f5c8:	e12fff1e 	bx	lr

0000f5cc <CMachineInfo::GetRAMSize() const>:
    f5cc:	e5900014 	ldr	r0, [r0, #20]
    f5d0:	e12fff1e 	bx	lr

0000f5d4 <CMachineInfo::GetSoCName() const>:
    f5d4:	e5d02010 	ldrb	r2, [r0, #16]
    f5d8:	e3033964 	movw	r3, #14692	; 0x3964
    f5dc:	e3403001 	movt	r3, #1
    f5e0:	e0833102 	add	r3, r3, r2, lsl #2
    f5e4:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
    f5e8:	e12fff1e 	bx	lr

0000f5ec <CMachineInfo::GetRevisionRaw() const>:
    f5ec:	e5900000 	ldr	r0, [r0]
    f5f0:	e12fff1e 	bx	lr

0000f5f4 <CMachineInfo::GetClockRate(unsigned int) const>:
    f5f4:	e92d4070 	push	{r4, r5, r6, lr}
    f5f8:	e1a06000 	mov	r6, r0
    f5fc:	e1a05001 	mov	r5, r1
    f600:	e24dd038 	sub	sp, sp, #56	; 0x38
    f604:	e28d001c 	add	r0, sp, #28
    f608:	ebffe51b 	bl	8a7c <CBcmPropertyTags::CBcmPropertyTags()>
    f60c:	e3a03004 	mov	r3, #4
    f610:	e28d001c 	add	r0, sp, #28
    f614:	e58d3000 	str	r3, [sp]
    f618:	e3a01002 	mov	r1, #2
    f61c:	e3401003 	movt	r1, #3
    f620:	e3a03014 	mov	r3, #20
    f624:	e28d2008 	add	r2, sp, #8
    f628:	e58d5014 	str	r5, [sp, #20]
    f62c:	ebffe55a 	bl	8b9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f630:	e2504000 	subs	r4, r0, #0
    f634:	159d4018 	ldrne	r4, [sp, #24]
    f638:	1a00000b 	bne	f66c <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f63c:	e3550002 	cmp	r5, #2
    f640:	0a00000e 	beq	f680 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    f644:	e3550004 	cmp	r5, #4
    f648:	0a000012 	beq	f698 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
    f64c:	e3550001 	cmp	r5, #1
    f650:	0a00000d 	beq	f68c <CMachineInfo::GetClockRate(unsigned int) const+0x98>
    f654:	e3031b30 	movw	r1, #15152	; 0x3b30
    f658:	e3401001 	movt	r1, #1
    f65c:	e30308c8 	movw	r0, #14536	; 0x38c8
    f660:	e3400001 	movt	r0, #1
    f664:	e3a02e11 	mov	r2, #272	; 0x110
    f668:	ebfff3a5 	bl	c504 <assertion_failed>
    f66c:	e28d001c 	add	r0, sp, #28
    f670:	ebffe507 	bl	8a94 <CBcmPropertyTags::~CBcmPropertyTags()>
    f674:	e1a00004 	mov	r0, r4
    f678:	e28dd038 	add	sp, sp, #56	; 0x38
    f67c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f680:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    f684:	e34042dc 	movt	r4, #732	; 0x2dc
    f688:	eafffff7 	b	f66c <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f68c:	e3a04ce1 	mov	r4, #57600	; 0xe100
    f690:	e34045f5 	movt	r4, #1525	; 0x5f5
    f694:	eafffff4 	b	f66c <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f698:	e5964008 	ldr	r4, [r6, #8]
    f69c:	e30b3280 	movw	r3, #45696	; 0xb280
    f6a0:	e3403ee6 	movt	r3, #3814	; 0xee6
    f6a4:	e3540002 	cmp	r4, #2
    f6a8:	e3a02ca3 	mov	r2, #41728	; 0xa300
    f6ac:	e34121e1 	movt	r2, #4577	; 0x11e1
    f6b0:	91a04003 	movls	r4, r3
    f6b4:	81a04002 	movhi	r4, r2
    f6b8:	eaffffeb 	b	f66c <CMachineInfo::GetClockRate(unsigned int) const+0x78>

0000f6bc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    f6bc:	e3510036 	cmp	r1, #54	; 0x36
    f6c0:	0a00000f 	beq	f704 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
    f6c4:	e3510037 	cmp	r1, #55	; 0x37
    f6c8:	1a000004 	bne	f6e0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    f6cc:	e5d03004 	ldrb	r3, [r0, #4]
    f6d0:	e3530003 	cmp	r3, #3
    f6d4:	83a00028 	movhi	r0, #40	; 0x28
    f6d8:	93a0002d 	movls	r0, #45	; 0x2d
    f6dc:	e12fff1e 	bx	lr
    f6e0:	e92d4010 	push	{r4, lr}
    f6e4:	e300213b 	movw	r2, #315	; 0x13b
    f6e8:	e3031b30 	movw	r1, #15152	; 0x3b30
    f6ec:	e3401001 	movt	r1, #1
    f6f0:	e30308c8 	movw	r0, #14536	; 0x38c8
    f6f4:	e3400001 	movt	r0, #1
    f6f8:	ebfff381 	bl	c504 <assertion_failed>
    f6fc:	e3a00000 	mov	r0, #0
    f700:	e8bd8010 	pop	{r4, pc}
    f704:	e5d03004 	ldrb	r3, [r0, #4]
    f708:	e3530003 	cmp	r3, #3
    f70c:	8a000001 	bhi	f718 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
    f710:	e3a00028 	mov	r0, #40	; 0x28
    f714:	e12fff1e 	bx	lr
    f718:	e5903008 	ldr	r3, [r0, #8]
    f71c:	e3530003 	cmp	r3, #3
    f720:	33a0002d 	movcc	r0, #45	; 0x2d
    f724:	23a00029 	movcs	r0, #41	; 0x29
    f728:	e12fff1e 	bx	lr

0000f72c <CMachineInfo::GetDevice(TDeviceId) const>:
    f72c:	e3510000 	cmp	r1, #0
    f730:	1a000003 	bne	f744 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    f734:	e5d00004 	ldrb	r0, [r0, #4]
    f738:	e2500001 	subs	r0, r0, #1
    f73c:	13a00001 	movne	r0, #1
    f740:	e12fff1e 	bx	lr
    f744:	e92d4010 	push	{r4, lr}
    f748:	e3a02f55 	mov	r2, #340	; 0x154
    f74c:	e3031b30 	movw	r1, #15152	; 0x3b30
    f750:	e3401001 	movt	r1, #1
    f754:	e30308c8 	movw	r0, #14536	; 0x38c8
    f758:	e3400001 	movt	r0, #1
    f75c:	ebfff368 	bl	c504 <assertion_failed>
    f760:	e3a00000 	mov	r0, #0
    f764:	e8bd8010 	pop	{r4, pc}

0000f768 <CMachineInfo::Get()>:
    f768:	e92d4010 	push	{r4, lr}
    f76c:	e30444f4 	movw	r4, #17652	; 0x44f4
    f770:	e3404001 	movt	r4, #1
    f774:	e5940000 	ldr	r0, [r4]
    f778:	e3500000 	cmp	r0, #0
    f77c:	18bd8010 	popne	{r4, pc}
    f780:	e300215d 	movw	r2, #349	; 0x15d
    f784:	e3031b30 	movw	r1, #15152	; 0x3b30
    f788:	e3401001 	movt	r1, #1
    f78c:	e3020614 	movw	r0, #9748	; 0x2614
    f790:	e3400001 	movt	r0, #1
    f794:	ebfff35a 	bl	c504 <assertion_failed>
    f798:	e5940000 	ldr	r0, [r4]
    f79c:	e8bd8010 	pop	{r4, pc}

0000f7a0 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)>:
    f7a0:	e92d4030 	push	{r4, r5, lr}
    f7a4:	e3510003 	cmp	r1, #3
    f7a8:	e1a05001 	mov	r5, r1
    f7ac:	e24dd00c 	sub	sp, sp, #12
    f7b0:	e1a04002 	mov	r4, r2
    f7b4:	8a000018 	bhi	f81c <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x7c>
    f7b8:	e354001f 	cmp	r4, #31
    f7bc:	8a00000e 	bhi	f7fc <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x5c>
    f7c0:	e3540000 	cmp	r4, #0
    f7c4:	1a00000a 	bne	f7f4 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x54>
    f7c8:	ebfff4c3 	bl	cadc <CLogger::Get()>
    f7cc:	e58d5000 	str	r5, [sp]
    f7d0:	e3a02004 	mov	r2, #4
    f7d4:	e3033c7c 	movw	r3, #15484	; 0x3c7c
    f7d8:	e3403001 	movt	r3, #1
    f7dc:	e3031c4c 	movw	r1, #15436	; 0x3c4c
    f7e0:	e3401001 	movt	r1, #1
    f7e4:	ebfff58a 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f7e8:	e28dd00c 	add	sp, sp, #12
    f7ec:	e8bd4030 	pop	{r4, r5, lr}
    f7f0:	eaffe8c8 	b	9b18 <halt>
    f7f4:	e28dd00c 	add	sp, sp, #12
    f7f8:	e8bd8030 	pop	{r4, r5, pc}
    f7fc:	e3031c6c 	movw	r1, #15468	; 0x3c6c
    f800:	e3401001 	movt	r1, #1
    f804:	e3020040 	movw	r0, #8256	; 0x2040
    f808:	e3400001 	movt	r0, #1
    f80c:	e3a02068 	mov	r2, #104	; 0x68
    f810:	e28dd00c 	add	sp, sp, #12
    f814:	e8bd4030 	pop	{r4, r5, lr}
    f818:	eafff339 	b	c504 <assertion_failed>
    f81c:	e3031c6c 	movw	r1, #15468	; 0x3c6c
    f820:	e3401001 	movt	r1, #1
    f824:	e3020030 	movw	r0, #8240	; 0x2030
    f828:	e3400001 	movt	r0, #1
    f82c:	e3a02067 	mov	r2, #103	; 0x67
    f830:	ebfff333 	bl	c504 <assertion_failed>
    f834:	eaffffdf 	b	f7b8 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x18>

0000f838 <CMultiCoreSupport::CMultiCoreSupport(CMemorySystem*)>:
    f838:	e92d4070 	push	{r4, r5, r6, lr}
    f83c:	e30454f8 	movw	r5, #17656	; 0x44f8
    f840:	e3405001 	movt	r5, #1
    f844:	e3033c5c 	movw	r3, #15452	; 0x3c5c
    f848:	e3403001 	movt	r3, #1
    f84c:	e1a04000 	mov	r4, r0
    f850:	e5801004 	str	r1, [r0, #4]
    f854:	e5952000 	ldr	r2, [r5]
    f858:	e5803000 	str	r3, [r0]
    f85c:	e3520000 	cmp	r2, #0
    f860:	0a000005 	beq	f87c <CMultiCoreSupport::CMultiCoreSupport(CMemorySystem*)+0x44>
    f864:	e3031c6c 	movw	r1, #15468	; 0x3c6c
    f868:	e3401001 	movt	r1, #1
    f86c:	e3020508 	movw	r0, #9480	; 0x2508
    f870:	e3400001 	movt	r0, #1
    f874:	e3a0202b 	mov	r2, #43	; 0x2b
    f878:	ebfff321 	bl	c504 <assertion_failed>
    f87c:	e5854000 	str	r4, [r5]
    f880:	e1a00004 	mov	r0, r4
    f884:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f888 <CMultiCoreSupport::~CMultiCoreSupport()>:
    f888:	e30434f8 	movw	r3, #17656	; 0x44f8
    f88c:	e3403001 	movt	r3, #1
    f890:	e3a02000 	mov	r2, #0
    f894:	e5832000 	str	r2, [r3]
    f898:	e12fff1e 	bx	lr

0000f89c <CMultiCoreSupport::~CMultiCoreSupport()>:
    f89c:	e30434f8 	movw	r3, #17656	; 0x44f8
    f8a0:	e3403001 	movt	r3, #1
    f8a4:	e92d4010 	push	{r4, lr}
    f8a8:	e3a01008 	mov	r1, #8
    f8ac:	e1a04000 	mov	r4, r0
    f8b0:	e3a02000 	mov	r2, #0
    f8b4:	e5832000 	str	r2, [r3]
    f8b8:	ebffe893 	bl	9b0c <operator delete(void*, unsigned int)>
    f8bc:	e1a00004 	mov	r0, r4
    f8c0:	e8bd8010 	pop	{r4, pc}

0000f8c4 <CMultiCoreSupport::Initialize()>:
    f8c4:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    f8c8:	e3a01001 	mov	r1, #1
    f8cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f8d0:	e592300c 	ldr	r3, [r2, #12]
    f8d4:	e3a050dc 	mov	r5, #220	; 0xdc
    f8d8:	e3445000 	movt	r5, #16384	; 0x4000
    f8dc:	e3c3300c 	bic	r3, r3, #12
    f8e0:	e3086064 	movw	r6, #32868	; 0x8064
    f8e4:	e3406000 	movt	r6, #0
    f8e8:	e3a08f43 	mov	r8, #268	; 0x10c
    f8ec:	e3448000 	movt	r8, #16384	; 0x4000
    f8f0:	e3833004 	orr	r3, r3, #4
    f8f4:	e24dd008 	sub	sp, sp, #8
    f8f8:	e582300c 	str	r3, [r2, #12]
    f8fc:	e1a07001 	mov	r7, r1
    f900:	e5821050 	str	r1, [r2, #80]	; 0x50
    f904:	f57ff04f 	dsb	sy
    f908:	e5953000 	ldr	r3, [r5]
    f90c:	e3530000 	cmp	r3, #0
    f910:	13a04063 	movne	r4, #99	; 0x63
    f914:	1a000002 	bne	f924 <CMultiCoreSupport::Initialize()+0x60>
    f918:	ea000006 	b	f938 <CMultiCoreSupport::Initialize()+0x74>
    f91c:	e2544001 	subs	r4, r4, #1
    f920:	0a000018 	beq	f988 <CMultiCoreSupport::Initialize()+0xc4>
    f924:	e3a00001 	mov	r0, #1
    f928:	ebffeb38 	bl	a610 <CTimer::SimpleMsDelay(unsigned int)>
    f92c:	e5953000 	ldr	r3, [r5]
    f930:	e3530000 	cmp	r3, #0
    f934:	1afffff8 	bne	f91c <CMultiCoreSupport::Initialize()+0x58>
    f938:	e5056040 	str	r6, [r5, #-64]	; 0xffffffc0
    f93c:	e5953000 	ldr	r3, [r5]
    f940:	e3530000 	cmp	r3, #0
    f944:	13a04063 	movne	r4, #99	; 0x63
    f948:	1a000002 	bne	f958 <CMultiCoreSupport::Initialize()+0x94>
    f94c:	ea000006 	b	f96c <CMultiCoreSupport::Initialize()+0xa8>
    f950:	e2544001 	subs	r4, r4, #1
    f954:	0a000016 	beq	f9b4 <CMultiCoreSupport::Initialize()+0xf0>
    f958:	e3a00001 	mov	r0, #1
    f95c:	ebffeb2b 	bl	a610 <CTimer::SimpleMsDelay(unsigned int)>
    f960:	e5953000 	ldr	r3, [r5]
    f964:	e3530000 	cmp	r3, #0
    f968:	1afffff8 	bne	f950 <CMultiCoreSupport::Initialize()+0x8c>
    f96c:	e2855010 	add	r5, r5, #16
    f970:	e2877001 	add	r7, r7, #1
    f974:	e1550008 	cmp	r5, r8
    f978:	1affffe1 	bne	f904 <CMultiCoreSupport::Initialize()+0x40>
    f97c:	e3a00001 	mov	r0, #1
    f980:	e28dd008 	add	sp, sp, #8
    f984:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f988:	ebfff453 	bl	cadc <CLogger::Get()>
    f98c:	e3033c98 	movw	r3, #15512	; 0x3c98
    f990:	e3403001 	movt	r3, #1
    f994:	e58d7000 	str	r7, [sp]
    f998:	e3a02001 	mov	r2, #1
    f99c:	e3031c4c 	movw	r1, #15436	; 0x3c4c
    f9a0:	e3401001 	movt	r1, #1
    f9a4:	ebfff51a 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f9a8:	e1a00004 	mov	r0, r4
    f9ac:	e28dd008 	add	sp, sp, #8
    f9b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f9b4:	ebfff448 	bl	cadc <CLogger::Get()>
    f9b8:	e3033cb8 	movw	r3, #15544	; 0x3cb8
    f9bc:	e3403001 	movt	r3, #1
    f9c0:	e58d7000 	str	r7, [sp]
    f9c4:	eafffff3 	b	f998 <CMultiCoreSupport::Initialize()+0xd4>

0000f9c8 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)>:
    f9c8:	e3500003 	cmp	r0, #3
    f9cc:	e92d4070 	push	{r4, r5, r6, lr}
    f9d0:	e1a04000 	mov	r4, r0
    f9d4:	e1a05001 	mov	r5, r1
    f9d8:	8a00000e 	bhi	fa18 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)+0x50>
    f9dc:	e355001f 	cmp	r5, #31
    f9e0:	9a000005 	bls	f9fc <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)+0x34>
    f9e4:	e3031c6c 	movw	r1, #15468	; 0x3c6c
    f9e8:	e3401001 	movt	r1, #1
    f9ec:	e3020040 	movw	r0, #8256	; 0x2040
    f9f0:	e3400001 	movt	r0, #1
    f9f4:	e3a02075 	mov	r2, #117	; 0x75
    f9f8:	ebfff2c1 	bl	c504 <assertion_failed>
    f9fc:	e2840301 	add	r0, r4, #67108864	; 0x4000000
    fa00:	e3a01001 	mov	r1, #1
    fa04:	e2800008 	add	r0, r0, #8
    fa08:	e1a01511 	lsl	r1, r1, r5
    fa0c:	e1a00200 	lsl	r0, r0, #4
    fa10:	e5801000 	str	r1, [r0]
    fa14:	e8bd8070 	pop	{r4, r5, r6, pc}
    fa18:	e3031c6c 	movw	r1, #15468	; 0x3c6c
    fa1c:	e3401001 	movt	r1, #1
    fa20:	e3020030 	movw	r0, #8240	; 0x2030
    fa24:	e3400001 	movt	r0, #1
    fa28:	e3a02074 	mov	r2, #116	; 0x74
    fa2c:	ebfff2b4 	bl	c504 <assertion_failed>
    fa30:	eaffffe9 	b	f9dc <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)+0x14>

0000fa34 <CMultiCoreSupport::HaltAll()>:
    fa34:	e92d4010 	push	{r4, lr}
    fa38:	e3a04000 	mov	r4, #0
    fa3c:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
    fa40:	e2033003 	and	r3, r3, #3
    fa44:	e1a00004 	mov	r0, r4
    fa48:	e1530004 	cmp	r3, r4
    fa4c:	e3a01000 	mov	r1, #0
    fa50:	e2844001 	add	r4, r4, #1
    fa54:	0a000000 	beq	fa5c <CMultiCoreSupport::HaltAll()+0x28>
    fa58:	ebffffda 	bl	f9c8 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)>
    fa5c:	e3540004 	cmp	r4, #4
    fa60:	1afffff5 	bne	fa3c <CMultiCoreSupport::HaltAll()+0x8>
    fa64:	e8bd4010 	pop	{r4, lr}
    fa68:	eaffe82a 	b	9b18 <halt>

0000fa6c <CMultiCoreSupport::LocalInterruptHandler()>:
    fa6c:	e304c4f8 	movw	ip, #17656	; 0x44f8
    fa70:	e340c001 	movt	ip, #1
    fa74:	e92d4010 	push	{r4, lr}
    fa78:	e59c0000 	ldr	r0, [ip]
    fa7c:	e3500000 	cmp	r0, #0
    fa80:	08bd8010 	popeq	{r4, pc}
    fa84:	ee101fb0 	mrc	15, 0, r1, cr0, cr0, {5}
    fa88:	e2011003 	and	r1, r1, #3
    fa8c:	e2813201 	add	r3, r1, #268435456	; 0x10000000
    fa90:	e2833018 	add	r3, r3, #24
    fa94:	e1a03103 	lsl	r3, r3, #2
    fa98:	e5930000 	ldr	r0, [r3]
    fa9c:	e2100010 	ands	r0, r0, #16
    faa0:	08bd8010 	popeq	{r4, pc}
    faa4:	e2813301 	add	r3, r1, #67108864	; 0x4000000
    faa8:	e283300c 	add	r3, r3, #12
    faac:	e1a03203 	lsl	r3, r3, #4
    fab0:	e5930000 	ldr	r0, [r3]
    fab4:	e3500000 	cmp	r0, #0
    fab8:	08bd8010 	popeq	{r4, pc}
    fabc:	e2102001 	ands	r2, r0, #1
    fac0:	1a00000e 	bne	fb00 <CMultiCoreSupport::LocalInterruptHandler()+0x94>
    fac4:	e1a000a0 	lsr	r0, r0, #1
    fac8:	e2822001 	add	r2, r2, #1
    facc:	e3100001 	tst	r0, #1
    fad0:	0afffffb 	beq	fac4 <CMultiCoreSupport::LocalInterruptHandler()+0x58>
    fad4:	e3a00001 	mov	r0, #1
    fad8:	e1a00210 	lsl	r0, r0, r2
    fadc:	e5830000 	str	r0, [r3]
    fae0:	f57ff04f 	dsb	sy
    fae4:	e59c3000 	ldr	r3, [ip]
    fae8:	e1a00003 	mov	r0, r3
    faec:	e5933000 	ldr	r3, [r3]
    faf0:	e593300c 	ldr	r3, [r3, #12]
    faf4:	e12fff33 	blx	r3
    faf8:	e3a00001 	mov	r0, #1
    fafc:	e8bd8010 	pop	{r4, pc}
    fb00:	e3a00001 	mov	r0, #1
    fb04:	e3a02000 	mov	r2, #0
    fb08:	eafffff3 	b	fadc <CMultiCoreSupport::LocalInterruptHandler()+0x70>

0000fb0c <CMultiCoreSupport::EntrySecondary()>:
    fb0c:	e92d4030 	push	{r4, r5, lr}
    fb10:	e30454f8 	movw	r5, #17656	; 0x44f8
    fb14:	e3405001 	movt	r5, #1
    fb18:	e24dd00c 	sub	sp, sp, #12
    fb1c:	e5953000 	ldr	r3, [r5]
    fb20:	e3530000 	cmp	r3, #0
    fb24:	0a000030 	beq	fbec <CMultiCoreSupport::EntrySecondary()+0xe0>
    fb28:	e5930004 	ldr	r0, [r3, #4]
    fb2c:	e3500000 	cmp	r0, #0
    fb30:	0a000024 	beq	fbc8 <CMultiCoreSupport::EntrySecondary()+0xbc>
    fb34:	ebffe7e2 	bl	9ac4 <CMemorySystem::InitializeSecondary()>
    fb38:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
    fb3c:	e2044003 	and	r4, r4, #3
    fb40:	e3a00000 	mov	r0, #0
    fb44:	e2843201 	add	r3, r4, #268435456	; 0x10000000
    fb48:	e3a01001 	mov	r1, #1
    fb4c:	e2833014 	add	r3, r3, #20
    fb50:	e1a02204 	lsl	r2, r4, #4
    fb54:	e2822101 	add	r2, r2, #1073741824	; 0x40000000
    fb58:	e1a03103 	lsl	r3, r3, #2
    fb5c:	e58200cc 	str	r0, [r2, #204]	; 0xcc
    fb60:	e5831000 	str	r1, [r3]
    fb64:	f1080080 	cpsie	i
    fb68:	ebfff3db 	bl	cadc <CLogger::Get()>
    fb6c:	e3a02004 	mov	r2, #4
    fb70:	e58d4000 	str	r4, [sp]
    fb74:	e3033cf4 	movw	r3, #15604	; 0x3cf4
    fb78:	e3403001 	movt	r3, #1
    fb7c:	e3031c4c 	movw	r1, #15436	; 0x3c4c
    fb80:	e3401001 	movt	r1, #1
    fb84:	ebfff4a2 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fb88:	e5953000 	ldr	r3, [r5]
    fb8c:	e1a01004 	mov	r1, r4
    fb90:	e1a00003 	mov	r0, r3
    fb94:	e5933000 	ldr	r3, [r3]
    fb98:	e5933008 	ldr	r3, [r3, #8]
    fb9c:	e12fff33 	blx	r3
    fba0:	ebfff3cd 	bl	cadc <CLogger::Get()>
    fba4:	e58d4000 	str	r4, [sp]
    fba8:	e3a02004 	mov	r2, #4
    fbac:	e3033c7c 	movw	r3, #15484	; 0x3c7c
    fbb0:	e3403001 	movt	r3, #1
    fbb4:	e3031c4c 	movw	r1, #15436	; 0x3c4c
    fbb8:	e3401001 	movt	r1, #1
    fbbc:	ebfff494 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fbc0:	e28dd00c 	add	sp, sp, #12
    fbc4:	e8bd8030 	pop	{r4, r5, pc}
    fbc8:	e3031c6c 	movw	r1, #15468	; 0x3c6c
    fbcc:	e3401001 	movt	r1, #1
    fbd0:	e3030cd4 	movw	r0, #15572	; 0x3cd4
    fbd4:	e3400001 	movt	r0, #1
    fbd8:	e3a020ad 	mov	r2, #173	; 0xad
    fbdc:	ebfff248 	bl	c504 <assertion_failed>
    fbe0:	e5953000 	ldr	r3, [r5]
    fbe4:	e5930004 	ldr	r0, [r3, #4]
    fbe8:	eaffffd1 	b	fb34 <CMultiCoreSupport::EntrySecondary()+0x28>
    fbec:	e3031c6c 	movw	r1, #15468	; 0x3c6c
    fbf0:	e3401001 	movt	r1, #1
    fbf4:	e3020614 	movw	r0, #9748	; 0x2614
    fbf8:	e3400001 	movt	r0, #1
    fbfc:	e3a020ab 	mov	r2, #171	; 0xab
    fc00:	ebfff23f 	bl	c504 <assertion_failed>
    fc04:	e5953000 	ldr	r3, [r5]
    fc08:	eaffffc6 	b	fb28 <CMultiCoreSupport::EntrySecondary()+0x1c>

0000fc0c <main_secondary>:
    fc0c:	eaffffbe 	b	fb0c <CMultiCoreSupport::EntrySecondary()>

0000fc10 <CSpinLock::CSpinLock(unsigned int)>:
    fc10:	e3510002 	cmp	r1, #2
    fc14:	e3a03000 	mov	r3, #0
    fc18:	e92d4010 	push	{r4, lr}
    fc1c:	e1a04000 	mov	r4, r0
    fc20:	e5801000 	str	r1, [r0]
    fc24:	e5803014 	str	r3, [r0, #20]
    fc28:	9a000005 	bls	fc44 <CSpinLock::CSpinLock(unsigned int)+0x34>
    fc2c:	e3031d08 	movw	r1, #15624	; 0x3d08
    fc30:	e3401001 	movt	r1, #1
    fc34:	e3030d18 	movw	r0, #15640	; 0x3d18
    fc38:	e3400001 	movt	r0, #1
    fc3c:	e3a02023 	mov	r2, #35	; 0x23
    fc40:	ebfff22f 	bl	c504 <assertion_failed>
    fc44:	e1a00004 	mov	r0, r4
    fc48:	e8bd8010 	pop	{r4, pc}

0000fc4c <CSpinLock::~CSpinLock()>:
    fc4c:	e5903014 	ldr	r3, [r0, #20]
    fc50:	e92d4010 	push	{r4, lr}
    fc54:	e3530000 	cmp	r3, #0
    fc58:	e1a04000 	mov	r4, r0
    fc5c:	0a000005 	beq	fc78 <CSpinLock::~CSpinLock()+0x2c>
    fc60:	e3031d08 	movw	r1, #15624	; 0x3d08
    fc64:	e3401001 	movt	r1, #1
    fc68:	e3030d34 	movw	r0, #15668	; 0x3d34
    fc6c:	e3400001 	movt	r0, #1
    fc70:	e3a02028 	mov	r2, #40	; 0x28
    fc74:	ebfff222 	bl	c504 <assertion_failed>
    fc78:	e1a00004 	mov	r0, r4
    fc7c:	e8bd8010 	pop	{r4, pc}

0000fc80 <CSpinLock::Acquire()>:
    fc80:	e5902000 	ldr	r2, [r0]
    fc84:	e3520000 	cmp	r2, #0
    fc88:	0a000007 	beq	fcac <CSpinLock::Acquire()+0x2c>
    fc8c:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
    fc90:	e10f1000 	mrs	r1, CPSR
    fc94:	f10c0080 	cpsid	i
    fc98:	e2033003 	and	r3, r3, #3
    fc9c:	e3520002 	cmp	r2, #2
    fca0:	e0803103 	add	r3, r0, r3, lsl #2
    fca4:	e5831004 	str	r1, [r3, #4]
    fca8:	0a00000e 	beq	fce8 <CSpinLock::Acquire()+0x68>
    fcac:	e30434fc 	movw	r3, #17660	; 0x44fc
    fcb0:	e3403001 	movt	r3, #1
    fcb4:	e5933000 	ldr	r3, [r3]
    fcb8:	e3530000 	cmp	r3, #0
    fcbc:	012fff1e 	bxeq	lr
    fcc0:	e2800014 	add	r0, r0, #20
    fcc4:	e1a01000 	mov	r1, r0
    fcc8:	e3a02001 	mov	r2, #1
    fccc:	e1913f9f 	ldrex	r3, [r1]
    fcd0:	e3530000 	cmp	r3, #0
    fcd4:	01813f92 	strexeq	r3, r2, [r1]
    fcd8:	03530000 	cmpeq	r3, #0
    fcdc:	1afffffa 	bne	fccc <CSpinLock::Acquire()+0x4c>
    fce0:	f57ff05f 	dmb	sy
    fce4:	e12fff1e 	bx	lr
    fce8:	f10c0040 	cpsid	f
    fcec:	eaffffee 	b	fcac <CSpinLock::Acquire()+0x2c>

0000fcf0 <CSpinLock::Release()>:
    fcf0:	e30434fc 	movw	r3, #17660	; 0x44fc
    fcf4:	e3403001 	movt	r3, #1
    fcf8:	e5933000 	ldr	r3, [r3]
    fcfc:	e3530000 	cmp	r3, #0
    fd00:	0a000004 	beq	fd18 <CSpinLock::Release()+0x28>
    fd04:	e2803014 	add	r3, r0, #20
    fd08:	e1a01003 	mov	r1, r3
    fd0c:	e3a02000 	mov	r2, #0
    fd10:	f57ff05f 	dmb	sy
    fd14:	e5812000 	str	r2, [r1]
    fd18:	e5903000 	ldr	r3, [r0]
    fd1c:	e3530000 	cmp	r3, #0
    fd20:	012fff1e 	bxeq	lr
    fd24:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
    fd28:	e2033003 	and	r3, r3, #3
    fd2c:	e0800103 	add	r0, r0, r3, lsl #2
    fd30:	e5903004 	ldr	r3, [r0, #4]
    fd34:	e121f003 	msr	CPSR_c, r3
    fd38:	e12fff1e 	bx	lr

0000fd3c <CSpinLock::Enable()>:
    fd3c:	e92d4010 	push	{r4, lr}
    fd40:	e30444fc 	movw	r4, #17660	; 0x44fc
    fd44:	e3404001 	movt	r4, #1
    fd48:	e5943000 	ldr	r3, [r4]
    fd4c:	e3530000 	cmp	r3, #0
    fd50:	0a000005 	beq	fd6c <CSpinLock::Enable()+0x30>
    fd54:	e3031d08 	movw	r1, #15624	; 0x3d08
    fd58:	e3401001 	movt	r1, #1
    fd5c:	e3030d40 	movw	r0, #15680	; 0x3d40
    fd60:	e3400001 	movt	r0, #1
    fd64:	e3a02074 	mov	r2, #116	; 0x74
    fd68:	ebfff1e5 	bl	c504 <assertion_failed>
    fd6c:	e3a03001 	mov	r3, #1
    fd70:	e5843000 	str	r3, [r4]
    fd74:	e8bd8010 	pop	{r4, pc}

0000fd78 <InvalidateDataCacheL1Only>:
    fd78:	e92d0070 	push	{r4, r5, r6}
    fd7c:	e3a00000 	mov	r0, #0
    fd80:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    fd84:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    fd88:	e3071fff 	movw	r1, #32767	; 0x7fff
    fd8c:	e00126a0 	and	r2, r1, r0, lsr #13
    fd90:	e30013ff 	movw	r1, #1023	; 0x3ff
    fd94:	e00131a0 	and	r3, r1, r0, lsr #3
    fd98:	e2822001 	add	r2, r2, #1
    fd9c:	e2000007 	and	r0, r0, #7
    fda0:	e2800004 	add	r0, r0, #4
    fda4:	e16f1f13 	clz	r1, r3
    fda8:	e2834001 	add	r4, r3, #1
    fdac:	e2422001 	sub	r2, r2, #1
    fdb0:	e1a03004 	mov	r3, r4
    fdb4:	e2533001 	subs	r3, r3, #1
    fdb8:	e1a05113 	lsl	r5, r3, r1
    fdbc:	e1a06012 	lsl	r6, r2, r0
    fdc0:	e1855006 	orr	r5, r5, r6
    fdc4:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    fdc8:	cafffff9 	bgt	fdb4 <InvalidateDataCacheL1Only+0x3c>
    fdcc:	e3520000 	cmp	r2, #0
    fdd0:	cafffff5 	bgt	fdac <InvalidateDataCacheL1Only+0x34>
    fdd4:	f57ff04e 	dsb	st
    fdd8:	f57ff06f 	isb	sy
    fddc:	e8bd0070 	pop	{r4, r5, r6}
    fde0:	e12fff1e 	bx	lr

0000fde4 <InvalidateDataCache>:
    fde4:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    fde8:	f57ff05f 	dmb	sy
    fdec:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    fdf0:	e1a03ba0 	lsr	r3, r0, #23
    fdf4:	e213300e 	ands	r3, r3, #14
    fdf8:	0a00001d 	beq	fe74 <InvalidateDataCache+0x90>
    fdfc:	e3a0a000 	mov	sl, #0
    fe00:	e08a20aa 	add	r2, sl, sl, lsr #1
    fe04:	e1a01230 	lsr	r1, r0, r2
    fe08:	e2011007 	and	r1, r1, #7
    fe0c:	e3510002 	cmp	r1, #2
    fe10:	ba000014 	blt	fe68 <InvalidateDataCache+0x84>
    fe14:	e10f9000 	mrs	r9, CPSR
    fe18:	f10c0080 	cpsid	i
    fe1c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    fe20:	f57ff06f 	isb	sy
    fe24:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    fe28:	e121f009 	msr	CPSR_c, r9
    fe2c:	e2012007 	and	r2, r1, #7
    fe30:	e2822004 	add	r2, r2, #4
    fe34:	e30043ff 	movw	r4, #1023	; 0x3ff
    fe38:	e01441a1 	ands	r4, r4, r1, lsr #3
    fe3c:	e16f5f14 	clz	r5, r4
    fe40:	e3077fff 	movw	r7, #32767	; 0x7fff
    fe44:	e01776a1 	ands	r7, r7, r1, lsr #13
    fe48:	e1a09007 	mov	r9, r7
    fe4c:	e18ab514 	orr	fp, sl, r4, lsl r5
    fe50:	e18bb219 	orr	fp, fp, r9, lsl r2
    fe54:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    fe58:	e2599001 	subs	r9, r9, #1
    fe5c:	aafffffa 	bge	fe4c <InvalidateDataCache+0x68>
    fe60:	e2544001 	subs	r4, r4, #1
    fe64:	aafffff7 	bge	fe48 <InvalidateDataCache+0x64>
    fe68:	e28aa002 	add	sl, sl, #2
    fe6c:	e153000a 	cmp	r3, sl
    fe70:	caffffe2 	bgt	fe00 <InvalidateDataCache+0x1c>
    fe74:	e3a0a000 	mov	sl, #0
    fe78:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    fe7c:	f57ff04e 	dsb	st
    fe80:	f57ff06f 	isb	sy
    fe84:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    fe88:	e12fff1e 	bx	lr

0000fe8c <CleanDataCache>:
    fe8c:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    fe90:	f57ff05f 	dmb	sy
    fe94:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    fe98:	e1a03ba0 	lsr	r3, r0, #23
    fe9c:	e213300e 	ands	r3, r3, #14
    fea0:	0a00001d 	beq	ff1c <CleanDataCache+0x90>
    fea4:	e3a0a000 	mov	sl, #0
    fea8:	e08a20aa 	add	r2, sl, sl, lsr #1
    feac:	e1a01230 	lsr	r1, r0, r2
    feb0:	e2011007 	and	r1, r1, #7
    feb4:	e3510002 	cmp	r1, #2
    feb8:	ba000014 	blt	ff10 <CleanDataCache+0x84>
    febc:	e10f9000 	mrs	r9, CPSR
    fec0:	f10c0080 	cpsid	i
    fec4:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    fec8:	f57ff06f 	isb	sy
    fecc:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    fed0:	e121f009 	msr	CPSR_c, r9
    fed4:	e2012007 	and	r2, r1, #7
    fed8:	e2822004 	add	r2, r2, #4
    fedc:	e30043ff 	movw	r4, #1023	; 0x3ff
    fee0:	e01441a1 	ands	r4, r4, r1, lsr #3
    fee4:	e16f5f14 	clz	r5, r4
    fee8:	e3077fff 	movw	r7, #32767	; 0x7fff
    feec:	e01776a1 	ands	r7, r7, r1, lsr #13
    fef0:	e1a09007 	mov	r9, r7
    fef4:	e18ab514 	orr	fp, sl, r4, lsl r5
    fef8:	e18bb219 	orr	fp, fp, r9, lsl r2
    fefc:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    ff00:	e2599001 	subs	r9, r9, #1
    ff04:	aafffffa 	bge	fef4 <CleanDataCache+0x68>
    ff08:	e2544001 	subs	r4, r4, #1
    ff0c:	aafffff7 	bge	fef0 <CleanDataCache+0x64>
    ff10:	e28aa002 	add	sl, sl, #2
    ff14:	e153000a 	cmp	r3, sl
    ff18:	caffffe2 	bgt	fea8 <CleanDataCache+0x1c>
    ff1c:	e3a0a000 	mov	sl, #0
    ff20:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    ff24:	f57ff04e 	dsb	st
    ff28:	f57ff06f 	isb	sy
    ff2c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    ff30:	e12fff1e 	bx	lr

0000ff34 <CleanAndInvalidateDataCacheRange>:
    ff34:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    ff38:	e1a03823 	lsr	r3, r3, #16
    ff3c:	e203300f 	and	r3, r3, #15
    ff40:	e3a02004 	mov	r2, #4
    ff44:	e1a02312 	lsl	r2, r2, r3
    ff48:	e0801001 	add	r1, r0, r1
    ff4c:	e2423001 	sub	r3, r2, #1
    ff50:	e1c00003 	bic	r0, r0, r3
    ff54:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    ff58:	e0800002 	add	r0, r0, r2
    ff5c:	e1500001 	cmp	r0, r1
    ff60:	3afffffb 	bcc	ff54 <CleanAndInvalidateDataCacheRange+0x20>
    ff64:	f57ff04e 	dsb	st
    ff68:	e12fff1e 	bx	lr

0000ff6c <CPtrList::CPtrList()>:
    ff6c:	e3a02000 	mov	r2, #0
    ff70:	e5802000 	str	r2, [r0]
    ff74:	e12fff1e 	bx	lr

0000ff78 <CPtrList::~CPtrList()>:
    ff78:	e5903000 	ldr	r3, [r0]
    ff7c:	e92d4010 	push	{r4, lr}
    ff80:	e3530000 	cmp	r3, #0
    ff84:	e1a04000 	mov	r4, r0
    ff88:	0a000005 	beq	ffa4 <CPtrList::~CPtrList()+0x2c>
    ff8c:	e3031d4c 	movw	r1, #15692	; 0x3d4c
    ff90:	e3401001 	movt	r1, #1
    ff94:	e3030d58 	movw	r0, #15704	; 0x3d58
    ff98:	e3400001 	movt	r0, #1
    ff9c:	e3a0202a 	mov	r2, #42	; 0x2a
    ffa0:	ebfff157 	bl	c504 <assertion_failed>
    ffa4:	e1a00004 	mov	r0, r4
    ffa8:	e8bd8010 	pop	{r4, pc}

0000ffac <CPtrList::GetFirst()>:
    ffac:	e5900000 	ldr	r0, [r0]
    ffb0:	e12fff1e 	bx	lr

0000ffb4 <CPtrList::GetNext(TPtrListElement*)>:
    ffb4:	e92d4010 	push	{r4, lr}
    ffb8:	e2514000 	subs	r4, r1, #0
    ffbc:	0a00000c 	beq	fff4 <CPtrList::GetNext(TPtrListElement*)+0x40>
    ffc0:	e5942000 	ldr	r2, [r4]
    ffc4:	e3043d43 	movw	r3, #19779	; 0x4d43
    ffc8:	e345304c 	movt	r3, #20556	; 0x504c
    ffcc:	e1520003 	cmp	r2, r3
    ffd0:	0a000005 	beq	ffec <CPtrList::GetNext(TPtrListElement*)+0x38>
    ffd4:	e3031d4c 	movw	r1, #15692	; 0x3d4c
    ffd8:	e3401001 	movt	r1, #1
    ffdc:	e3030d78 	movw	r0, #15736	; 0x3d78
    ffe0:	e3400001 	movt	r0, #1
    ffe4:	e3a02035 	mov	r2, #53	; 0x35
    ffe8:	ebfff145 	bl	c504 <assertion_failed>
    ffec:	e5940008 	ldr	r0, [r4, #8]
    fff0:	e8bd8010 	pop	{r4, pc}
    fff4:	e3031d4c 	movw	r1, #15692	; 0x3d4c
    fff8:	e3401001 	movt	r1, #1
    fffc:	e3030d68 	movw	r0, #15720	; 0x3d68
   10000:	e3400001 	movt	r0, #1
   10004:	e3a02034 	mov	r2, #52	; 0x34
   10008:	ebfff13d 	bl	c504 <assertion_failed>
   1000c:	eaffffeb 	b	ffc0 <CPtrList::GetNext(TPtrListElement*)+0xc>

00010010 <CPtrList::GetPtr(TPtrListElement*)>:
   10010:	e92d4010 	push	{r4, lr}
   10014:	e2514000 	subs	r4, r1, #0
   10018:	0a00000c 	beq	10050 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   1001c:	e5942000 	ldr	r2, [r4]
   10020:	e3043d43 	movw	r3, #19779	; 0x4d43
   10024:	e345304c 	movt	r3, #20556	; 0x504c
   10028:	e1520003 	cmp	r2, r3
   1002c:	0a000005 	beq	10048 <CPtrList::GetPtr(TPtrListElement*)+0x38>
   10030:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   10034:	e3401001 	movt	r1, #1
   10038:	e3030d78 	movw	r0, #15736	; 0x3d78
   1003c:	e3400001 	movt	r0, #1
   10040:	e3a0203d 	mov	r2, #61	; 0x3d
   10044:	ebfff12e 	bl	c504 <assertion_failed>
   10048:	e594000c 	ldr	r0, [r4, #12]
   1004c:	e8bd8010 	pop	{r4, pc}
   10050:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   10054:	e3401001 	movt	r1, #1
   10058:	e3030d68 	movw	r0, #15720	; 0x3d68
   1005c:	e3400001 	movt	r0, #1
   10060:	e3a0203c 	mov	r2, #60	; 0x3c
   10064:	ebfff126 	bl	c504 <assertion_failed>
   10068:	eaffffeb 	b	1001c <CPtrList::GetPtr(TPtrListElement*)+0xc>

0001006c <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   1006c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10070:	e1a06000 	mov	r6, r0
   10074:	e3a00010 	mov	r0, #16
   10078:	e1a07002 	mov	r7, r2
   1007c:	e1a04001 	mov	r4, r1
   10080:	ebffe69d 	bl	9afc <operator new(unsigned int)>
   10084:	e3043d43 	movw	r3, #19779	; 0x4d43
   10088:	e345304c 	movt	r3, #20556	; 0x504c
   1008c:	e5803000 	str	r3, [r0]
   10090:	e5962000 	ldr	r2, [r6]
   10094:	e1a05000 	mov	r5, r0
   10098:	e580700c 	str	r7, [r0, #12]
   1009c:	e3520000 	cmp	r2, #0
   100a0:	0a000029 	beq	1014c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   100a4:	e3540000 	cmp	r4, #0
   100a8:	0a00002e 	beq	10168 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   100ac:	e5942000 	ldr	r2, [r4]
   100b0:	e3043d43 	movw	r3, #19779	; 0x4d43
   100b4:	e345304c 	movt	r3, #20556	; 0x504c
   100b8:	e1520003 	cmp	r2, r3
   100bc:	0a000005 	beq	100d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
   100c0:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   100c4:	e3401001 	movt	r1, #1
   100c8:	e3030db8 	movw	r0, #15800	; 0x3db8
   100cc:	e3400001 	movt	r0, #1
   100d0:	e3a0204e 	mov	r2, #78	; 0x4e
   100d4:	ebfff10a 	bl	c504 <assertion_failed>
   100d8:	e5963000 	ldr	r3, [r6]
   100dc:	e1540003 	cmp	r4, r3
   100e0:	0a000013 	beq	10134 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
   100e4:	e5943004 	ldr	r3, [r4, #4]
   100e8:	e5854008 	str	r4, [r5, #8]
   100ec:	e3530000 	cmp	r3, #0
   100f0:	e5853004 	str	r3, [r5, #4]
   100f4:	0a00000c 	beq	1012c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   100f8:	e5931000 	ldr	r1, [r3]
   100fc:	e3042d43 	movw	r2, #19779	; 0x4d43
   10100:	e345204c 	movt	r2, #20556	; 0x504c
   10104:	e1510002 	cmp	r1, r2
   10108:	0a000006 	beq	10128 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
   1010c:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   10110:	e3401001 	movt	r1, #1
   10114:	e3030ddc 	movw	r0, #15836	; 0x3ddc
   10118:	e3400001 	movt	r0, #1
   1011c:	e3a02060 	mov	r2, #96	; 0x60
   10120:	ebfff0f7 	bl	c504 <assertion_failed>
   10124:	e5943004 	ldr	r3, [r4, #4]
   10128:	e5835008 	str	r5, [r3, #8]
   1012c:	e5845004 	str	r5, [r4, #4]
   10130:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10134:	e5845004 	str	r5, [r4, #4]
   10138:	e3a03000 	mov	r3, #0
   1013c:	e5854008 	str	r4, [r5, #8]
   10140:	e5865000 	str	r5, [r6]
   10144:	e5853004 	str	r3, [r5, #4]
   10148:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1014c:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   10150:	e3401001 	movt	r1, #1
   10154:	e3030d9c 	movw	r0, #15772	; 0x3d9c
   10158:	e3400001 	movt	r0, #1
   1015c:	e3a0204c 	mov	r2, #76	; 0x4c
   10160:	ebfff0e7 	bl	c504 <assertion_failed>
   10164:	eaffffce 	b	100a4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
   10168:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   1016c:	e3401001 	movt	r1, #1
   10170:	e3030dac 	movw	r0, #15788	; 0x3dac
   10174:	e3400001 	movt	r0, #1
   10178:	e3a0204d 	mov	r2, #77	; 0x4d
   1017c:	ebfff0e0 	bl	c504 <assertion_failed>
   10180:	eaffffc9 	b	100ac <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

00010184 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   10184:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10188:	e1a06000 	mov	r6, r0
   1018c:	e1a05001 	mov	r5, r1
   10190:	e3a00010 	mov	r0, #16
   10194:	e1a07002 	mov	r7, r2
   10198:	ebffe657 	bl	9afc <operator new(unsigned int)>
   1019c:	e3550000 	cmp	r5, #0
   101a0:	e3043d43 	movw	r3, #19779	; 0x4d43
   101a4:	e345304c 	movt	r3, #20556	; 0x504c
   101a8:	e1a04000 	mov	r4, r0
   101ac:	e5803000 	str	r3, [r0]
   101b0:	e580700c 	str	r7, [r0, #12]
   101b4:	e5963000 	ldr	r3, [r6]
   101b8:	0a000020 	beq	10240 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   101bc:	e3530000 	cmp	r3, #0
   101c0:	0a00002b 	beq	10274 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   101c4:	e5952000 	ldr	r2, [r5]
   101c8:	e3043d43 	movw	r3, #19779	; 0x4d43
   101cc:	e345304c 	movt	r3, #20556	; 0x504c
   101d0:	e1520003 	cmp	r2, r3
   101d4:	0a000005 	beq	101f0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   101d8:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   101dc:	e3401001 	movt	r1, #1
   101e0:	e3030e04 	movw	r0, #15876	; 0x3e04
   101e4:	e3400001 	movt	r0, #1
   101e8:	e3a0207e 	mov	r2, #126	; 0x7e
   101ec:	ebfff0c4 	bl	c504 <assertion_failed>
   101f0:	e5953008 	ldr	r3, [r5, #8]
   101f4:	e5845004 	str	r5, [r4, #4]
   101f8:	e3530000 	cmp	r3, #0
   101fc:	e5843008 	str	r3, [r4, #8]
   10200:	0a00000c 	beq	10238 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
   10204:	e5931000 	ldr	r1, [r3]
   10208:	e3042d43 	movw	r2, #19779	; 0x4d43
   1020c:	e345204c 	movt	r2, #20556	; 0x504c
   10210:	e1510002 	cmp	r1, r2
   10214:	0a000006 	beq	10234 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
   10218:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   1021c:	e3401001 	movt	r1, #1
   10220:	e3030e28 	movw	r0, #15912	; 0x3e28
   10224:	e3400001 	movt	r0, #1
   10228:	e3a02085 	mov	r2, #133	; 0x85
   1022c:	ebfff0b4 	bl	c504 <assertion_failed>
   10230:	e5953008 	ldr	r3, [r5, #8]
   10234:	e5834004 	str	r4, [r3, #4]
   10238:	e5854008 	str	r4, [r5, #8]
   1023c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10240:	e3530000 	cmp	r3, #0
   10244:	0a000005 	beq	10260 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   10248:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   1024c:	e3401001 	movt	r1, #1
   10250:	e3030d58 	movw	r0, #15704	; 0x3d58
   10254:	e3400001 	movt	r0, #1
   10258:	e3a02074 	mov	r2, #116	; 0x74
   1025c:	ebfff0a8 	bl	c504 <assertion_failed>
   10260:	e3a03000 	mov	r3, #0
   10264:	e5864000 	str	r4, [r6]
   10268:	e5843004 	str	r3, [r4, #4]
   1026c:	e5843008 	str	r3, [r4, #8]
   10270:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10274:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   10278:	e3401001 	movt	r1, #1
   1027c:	e3030d9c 	movw	r0, #15772	; 0x3d9c
   10280:	e3400001 	movt	r0, #1
   10284:	e3a0207d 	mov	r2, #125	; 0x7d
   10288:	ebfff09d 	bl	c504 <assertion_failed>
   1028c:	eaffffcc 	b	101c4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

00010290 <CPtrList::Remove(TPtrListElement*)>:
   10290:	e92d4070 	push	{r4, r5, r6, lr}
   10294:	e2514000 	subs	r4, r1, #0
   10298:	e1a05000 	mov	r5, r0
   1029c:	0a000048 	beq	103c4 <CPtrList::Remove(TPtrListElement*)+0x134>
   102a0:	e5942000 	ldr	r2, [r4]
   102a4:	e3043d43 	movw	r3, #19779	; 0x4d43
   102a8:	e345304c 	movt	r3, #20556	; 0x504c
   102ac:	e1520003 	cmp	r2, r3
   102b0:	0a000005 	beq	102cc <CPtrList::Remove(TPtrListElement*)+0x3c>
   102b4:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   102b8:	e3401001 	movt	r1, #1
   102bc:	e3030d78 	movw	r0, #15736	; 0x3d78
   102c0:	e3400001 	movt	r0, #1
   102c4:	e3a02090 	mov	r2, #144	; 0x90
   102c8:	ebfff08d 	bl	c504 <assertion_failed>
   102cc:	e5953000 	ldr	r3, [r5]
   102d0:	e1540003 	cmp	r4, r3
   102d4:	0a000027 	beq	10378 <CPtrList::Remove(TPtrListElement*)+0xe8>
   102d8:	e5943004 	ldr	r3, [r4, #4]
   102dc:	e3530000 	cmp	r3, #0
   102e0:	0a00003e 	beq	103e0 <CPtrList::Remove(TPtrListElement*)+0x150>
   102e4:	e5931000 	ldr	r1, [r3]
   102e8:	e3042d43 	movw	r2, #19779	; 0x4d43
   102ec:	e345204c 	movt	r2, #20556	; 0x504c
   102f0:	e1510002 	cmp	r1, r2
   102f4:	0a000006 	beq	10314 <CPtrList::Remove(TPtrListElement*)+0x84>
   102f8:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   102fc:	e3401001 	movt	r1, #1
   10300:	e3030e98 	movw	r0, #16024	; 0x3e98
   10304:	e3400001 	movt	r0, #1
   10308:	e3a0209f 	mov	r2, #159	; 0x9f
   1030c:	ebfff07c 	bl	c504 <assertion_failed>
   10310:	e5943004 	ldr	r3, [r4, #4]
   10314:	e5942008 	ldr	r2, [r4, #8]
   10318:	e5832008 	str	r2, [r3, #8]
   1031c:	e5942008 	ldr	r2, [r4, #8]
   10320:	e3520000 	cmp	r2, #0
   10324:	0a00000d 	beq	10360 <CPtrList::Remove(TPtrListElement*)+0xd0>
   10328:	e5920000 	ldr	r0, [r2]
   1032c:	e3041d43 	movw	r1, #19779	; 0x4d43
   10330:	e345104c 	movt	r1, #20556	; 0x504c
   10334:	e1500001 	cmp	r0, r1
   10338:	0a000007 	beq	1035c <CPtrList::Remove(TPtrListElement*)+0xcc>
   1033c:	e3a020a4 	mov	r2, #164	; 0xa4
   10340:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   10344:	e3401001 	movt	r1, #1
   10348:	e3030e54 	movw	r0, #15956	; 0x3e54
   1034c:	e3400001 	movt	r0, #1
   10350:	ebfff06b 	bl	c504 <assertion_failed>
   10354:	e5942008 	ldr	r2, [r4, #8]
   10358:	e5943004 	ldr	r3, [r4, #4]
   1035c:	e5823004 	str	r3, [r2, #4]
   10360:	e3a03000 	mov	r3, #0
   10364:	e1a00004 	mov	r0, r4
   10368:	e5843000 	str	r3, [r4]
   1036c:	e3a01010 	mov	r1, #16
   10370:	e8bd4070 	pop	{r4, r5, r6, lr}
   10374:	eaffe5e4 	b	9b0c <operator delete(void*, unsigned int)>
   10378:	e5943008 	ldr	r3, [r4, #8]
   1037c:	e5853000 	str	r3, [r5]
   10380:	e3530000 	cmp	r3, #0
   10384:	0afffff5 	beq	10360 <CPtrList::Remove(TPtrListElement*)+0xd0>
   10388:	e5931000 	ldr	r1, [r3]
   1038c:	e3042d43 	movw	r2, #19779	; 0x4d43
   10390:	e345204c 	movt	r2, #20556	; 0x504c
   10394:	e1510002 	cmp	r1, r2
   10398:	0a000006 	beq	103b8 <CPtrList::Remove(TPtrListElement*)+0x128>
   1039c:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   103a0:	e3401001 	movt	r1, #1
   103a4:	e3030e54 	movw	r0, #15956	; 0x3e54
   103a8:	e3400001 	movt	r0, #1
   103ac:	e3a02098 	mov	r2, #152	; 0x98
   103b0:	ebfff053 	bl	c504 <assertion_failed>
   103b4:	e5943008 	ldr	r3, [r4, #8]
   103b8:	e3a02000 	mov	r2, #0
   103bc:	e5832004 	str	r2, [r3, #4]
   103c0:	eaffffe6 	b	10360 <CPtrList::Remove(TPtrListElement*)+0xd0>
   103c4:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   103c8:	e3401001 	movt	r1, #1
   103cc:	e3030d68 	movw	r0, #15720	; 0x3d68
   103d0:	e3400001 	movt	r0, #1
   103d4:	e3a0208f 	mov	r2, #143	; 0x8f
   103d8:	ebfff049 	bl	c504 <assertion_failed>
   103dc:	eaffffaf 	b	102a0 <CPtrList::Remove(TPtrListElement*)+0x10>
   103e0:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   103e4:	e3401001 	movt	r1, #1
   103e8:	e3030e80 	movw	r0, #16000	; 0x3e80
   103ec:	e3400001 	movt	r0, #1
   103f0:	e3a0209e 	mov	r2, #158	; 0x9e
   103f4:	ebfff042 	bl	c504 <assertion_failed>
   103f8:	e5943004 	ldr	r3, [r4, #4]
   103fc:	eaffffb8 	b	102e4 <CPtrList::Remove(TPtrListElement*)+0x54>

00010400 <CPtrList::Find(void*)>:
   10400:	e92d4070 	push	{r4, r5, r6, lr}
   10404:	e5904000 	ldr	r4, [r0]
   10408:	e3540000 	cmp	r4, #0
   1040c:	13046d43 	movwne	r6, #19779	; 0x4d43
   10410:	11a05001 	movne	r5, r1
   10414:	1345604c 	movtne	r6, #20556	; 0x504c
   10418:	1a000003 	bne	1042c <CPtrList::Find(void*)+0x2c>
   1041c:	ea000010 	b	10464 <CPtrList::Find(void*)+0x64>
   10420:	e5944008 	ldr	r4, [r4, #8]
   10424:	e3540000 	cmp	r4, #0
   10428:	0a00000d 	beq	10464 <CPtrList::Find(void*)+0x64>
   1042c:	e5943000 	ldr	r3, [r4]
   10430:	e3031d4c 	movw	r1, #15692	; 0x3d4c
   10434:	e3401001 	movt	r1, #1
   10438:	e1530006 	cmp	r3, r6
   1043c:	e3030d78 	movw	r0, #15736	; 0x3d78
   10440:	e3400001 	movt	r0, #1
   10444:	e3a020b3 	mov	r2, #179	; 0xb3
   10448:	0a000000 	beq	10450 <CPtrList::Find(void*)+0x50>
   1044c:	ebfff02c 	bl	c504 <assertion_failed>
   10450:	e594300c 	ldr	r3, [r4, #12]
   10454:	e1530005 	cmp	r3, r5
   10458:	1afffff0 	bne	10420 <CPtrList::Find(void*)+0x20>
   1045c:	e1a00004 	mov	r0, r4
   10460:	e8bd8070 	pop	{r4, r5, r6, pc}
   10464:	e3a00000 	mov	r0, #0
   10468:	e8bd8070 	pop	{r4, r5, r6, pc}

0001046c <mem_init>:
   1046c:	e0801001 	add	r1, r0, r1
   10470:	e3042500 	movw	r2, #17664	; 0x4500
   10474:	e3402001 	movt	r2, #1
   10478:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   1047c:	e3500605 	cmp	r0, #5242880	; 0x500000
   10480:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   10484:	33a00605 	movcc	r0, #5242880	; 0x500000
   10488:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   1048c:	e582100c 	str	r1, [r2, #12]
   10490:	e3c3300f 	bic	r3, r3, #15
   10494:	e2411501 	sub	r1, r1, #4194304	; 0x400000
   10498:	e5820000 	str	r0, [r2]
   1049c:	e982000a 	stmib	r2, {r1, r3}
   104a0:	e12fff1e 	bx	lr

000104a4 <mem_get_size>:
   104a4:	e3043500 	movw	r3, #17664	; 0x4500
   104a8:	e3403001 	movt	r3, #1
   104ac:	e8930003 	ldm	r3, {r0, r1}
   104b0:	e593200c 	ldr	r2, [r3, #12]
   104b4:	e5933008 	ldr	r3, [r3, #8]
   104b8:	e0600001 	rsb	r0, r0, r1
   104bc:	e0633002 	rsb	r3, r3, r2
   104c0:	e0800003 	add	r0, r0, r3
   104c4:	e12fff1e 	bx	lr

000104c8 <malloc>:
   104c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   104cc:	e3047500 	movw	r7, #17664	; 0x4500
   104d0:	e3407001 	movt	r7, #1
   104d4:	e1a05000 	mov	r5, r0
   104d8:	e5973000 	ldr	r3, [r7]
   104dc:	e3530000 	cmp	r3, #0
   104e0:	0a000047 	beq	10604 <malloc+0x13c>
   104e4:	e30443e8 	movw	r4, #17384	; 0x43e8
   104e8:	e3404001 	movt	r4, #1
   104ec:	e3040510 	movw	r0, #17680	; 0x4510
   104f0:	e3400001 	movt	r0, #1
   104f4:	ebfffde1 	bl	fc80 <CSpinLock::Acquire()>
   104f8:	e5943000 	ldr	r3, [r4]
   104fc:	e3530000 	cmp	r3, #0
   10500:	0a000007 	beq	10524 <malloc+0x5c>
   10504:	e1550003 	cmp	r5, r3
   10508:	8a000002 	bhi	10518 <malloc+0x50>
   1050c:	ea000016 	b	1056c <malloc+0xa4>
   10510:	e1530005 	cmp	r3, r5
   10514:	2a000014 	bcs	1056c <malloc+0xa4>
   10518:	e5b43008 	ldr	r3, [r4, #8]!
   1051c:	e3530000 	cmp	r3, #0
   10520:	1afffffa 	bne	10510 <malloc+0x48>
   10524:	e5976000 	ldr	r6, [r7]
   10528:	e285301f 	add	r3, r5, #31
   1052c:	e3c3300f 	bic	r3, r3, #15
   10530:	e5972004 	ldr	r2, [r7, #4]
   10534:	e0863003 	add	r3, r6, r3
   10538:	e5873000 	str	r3, [r7]
   1053c:	e1530002 	cmp	r3, r2
   10540:	8a000036 	bhi	10620 <malloc+0x158>
   10544:	e3a02043 	mov	r2, #67	; 0x43
   10548:	e3a0304d 	mov	r3, #77	; 0x4d
   1054c:	e5c62000 	strb	r2, [r6]
   10550:	e3a0204c 	mov	r2, #76	; 0x4c
   10554:	e5c63001 	strb	r3, [r6, #1]
   10558:	e3a03042 	mov	r3, #66	; 0x42
   1055c:	e5865004 	str	r5, [r6, #4]
   10560:	e5c62002 	strb	r2, [r6, #2]
   10564:	e5c63003 	strb	r3, [r6, #3]
   10568:	ea000010 	b	105b0 <malloc+0xe8>
   1056c:	e5946004 	ldr	r6, [r4, #4]
   10570:	e3560000 	cmp	r6, #0
   10574:	01a05003 	moveq	r5, r3
   10578:	0affffe9 	beq	10524 <malloc+0x5c>
   1057c:	e5962000 	ldr	r2, [r6]
   10580:	e3043d43 	movw	r3, #19779	; 0x4d43
   10584:	e344324c 	movt	r3, #16972	; 0x424c
   10588:	e1520003 	cmp	r2, r3
   1058c:	0a000005 	beq	105a8 <malloc+0xe0>
   10590:	e3031ec4 	movw	r1, #16068	; 0x3ec4
   10594:	e3401001 	movt	r1, #1
   10598:	e3030ee4 	movw	r0, #16100	; 0x3ee4
   1059c:	e3400001 	movt	r0, #1
   105a0:	e3a02089 	mov	r2, #137	; 0x89
   105a4:	ebffefd6 	bl	c504 <assertion_failed>
   105a8:	e5963008 	ldr	r3, [r6, #8]
   105ac:	e5843004 	str	r3, [r4, #4]
   105b0:	e3040510 	movw	r0, #17680	; 0x4510
   105b4:	e3400001 	movt	r0, #1
   105b8:	e2864010 	add	r4, r6, #16
   105bc:	ebfffdcb 	bl	fcf0 <CSpinLock::Release()>
   105c0:	e314000f 	tst	r4, #15
   105c4:	e3a03000 	mov	r3, #0
   105c8:	e5c63008 	strb	r3, [r6, #8]
   105cc:	e5c63009 	strb	r3, [r6, #9]
   105d0:	e5c6300a 	strb	r3, [r6, #10]
   105d4:	e5c6300b 	strb	r3, [r6, #11]
   105d8:	1a000001 	bne	105e4 <malloc+0x11c>
   105dc:	e1a00004 	mov	r0, r4
   105e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   105e4:	e3a020a1 	mov	r2, #161	; 0xa1
   105e8:	e3031ec4 	movw	r1, #16068	; 0x3ec4
   105ec:	e3401001 	movt	r1, #1
   105f0:	e3030f08 	movw	r0, #16136	; 0x3f08
   105f4:	e3400001 	movt	r0, #1
   105f8:	ebffefc1 	bl	c504 <assertion_failed>
   105fc:	e1a00004 	mov	r0, r4
   10600:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10604:	e3031ec4 	movw	r1, #16068	; 0x3ec4
   10608:	e3401001 	movt	r1, #1
   1060c:	e3030ed0 	movw	r0, #16080	; 0x3ed0
   10610:	e3400001 	movt	r0, #1
   10614:	e3a0206f 	mov	r2, #111	; 0x6f
   10618:	ebffefb9 	bl	c504 <assertion_failed>
   1061c:	eaffffb0 	b	104e4 <malloc+0x1c>
   10620:	e3040510 	movw	r0, #17680	; 0x4510
   10624:	e3400001 	movt	r0, #1
   10628:	ebfffdb0 	bl	fcf0 <CSpinLock::Release()>
   1062c:	e3a00000 	mov	r0, #0
   10630:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00010634 <free>:
   10634:	e3500000 	cmp	r0, #0
   10638:	012fff1e 	bxeq	lr
   1063c:	e92d4070 	push	{r4, r5, r6, lr}
   10640:	e1a05000 	mov	r5, r0
   10644:	e3043d43 	movw	r3, #19779	; 0x4d43
   10648:	e344324c 	movt	r3, #16972	; 0x424c
   1064c:	e5352010 	ldr	r2, [r5, #-16]!
   10650:	e1520003 	cmp	r2, r3
   10654:	0a000005 	beq	10670 <free+0x3c>
   10658:	e3031ec4 	movw	r1, #16068	; 0x3ec4
   1065c:	e3401001 	movt	r1, #1
   10660:	e3030ee4 	movw	r0, #16100	; 0x3ee4
   10664:	e3400001 	movt	r0, #1
   10668:	e3a020ae 	mov	r2, #174	; 0xae
   1066c:	ebffefa4 	bl	c504 <assertion_failed>
   10670:	e30443e8 	movw	r4, #17384	; 0x43e8
   10674:	e3404001 	movt	r4, #1
   10678:	e5943000 	ldr	r3, [r4]
   1067c:	e3530000 	cmp	r3, #0
   10680:	08bd8070 	popeq	{r4, r5, r6, pc}
   10684:	e5952004 	ldr	r2, [r5, #4]
   10688:	e1520003 	cmp	r2, r3
   1068c:	1a000002 	bne	1069c <free+0x68>
   10690:	ea000005 	b	106ac <free+0x78>
   10694:	e1530002 	cmp	r3, r2
   10698:	0a000003 	beq	106ac <free+0x78>
   1069c:	e5b43008 	ldr	r3, [r4, #8]!
   106a0:	e3530000 	cmp	r3, #0
   106a4:	1afffffa 	bne	10694 <free+0x60>
   106a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   106ac:	e3040510 	movw	r0, #17680	; 0x4510
   106b0:	e3400001 	movt	r0, #1
   106b4:	ebfffd71 	bl	fc80 <CSpinLock::Acquire()>
   106b8:	e5943004 	ldr	r3, [r4, #4]
   106bc:	e5853008 	str	r3, [r5, #8]
   106c0:	e3040510 	movw	r0, #17680	; 0x4510
   106c4:	e3400001 	movt	r0, #1
   106c8:	e5845004 	str	r5, [r4, #4]
   106cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   106d0:	eafffd86 	b	fcf0 <CSpinLock::Release()>

000106d4 <palloc>:
   106d4:	e92d4070 	push	{r4, r5, r6, lr}
   106d8:	e3045500 	movw	r5, #17664	; 0x4500
   106dc:	e3405001 	movt	r5, #1
   106e0:	e5953008 	ldr	r3, [r5, #8]
   106e4:	e3530000 	cmp	r3, #0
   106e8:	0a000024 	beq	10780 <palloc+0xac>
   106ec:	e3046500 	movw	r6, #17664	; 0x4500
   106f0:	e3406001 	movt	r6, #1
   106f4:	e2860028 	add	r0, r6, #40	; 0x28
   106f8:	ebfffd60 	bl	fc80 <CSpinLock::Acquire()>
   106fc:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   10700:	e3540000 	cmp	r4, #0
   10704:	0a000013 	beq	10758 <palloc+0x84>
   10708:	e5942000 	ldr	r2, [r4]
   1070c:	e3043d43 	movw	r3, #19779	; 0x4d43
   10710:	e3453047 	movt	r3, #20551	; 0x5047
   10714:	e1520003 	cmp	r2, r3
   10718:	0a000005 	beq	10734 <palloc+0x60>
   1071c:	e3031ec4 	movw	r1, #16068	; 0x3ec4
   10720:	e3401001 	movt	r1, #1
   10724:	e3030f48 	movw	r0, #16200	; 0x3f48
   10728:	e3400001 	movt	r0, #1
   1072c:	e3a020d4 	mov	r2, #212	; 0xd4
   10730:	ebffef73 	bl	c504 <assertion_failed>
   10734:	e5942004 	ldr	r2, [r4, #4]
   10738:	e3a03000 	mov	r3, #0
   1073c:	e5852040 	str	r2, [r5, #64]	; 0x40
   10740:	e5843000 	str	r3, [r4]
   10744:	e3040528 	movw	r0, #17704	; 0x4528
   10748:	e3400001 	movt	r0, #1
   1074c:	ebfffd67 	bl	fcf0 <CSpinLock::Release()>
   10750:	e1a00004 	mov	r0, r4
   10754:	e8bd8070 	pop	{r4, r5, r6, pc}
   10758:	e5964008 	ldr	r4, [r6, #8]
   1075c:	e596200c 	ldr	r2, [r6, #12]
   10760:	e2843a01 	add	r3, r4, #4096	; 0x1000
   10764:	e5863008 	str	r3, [r6, #8]
   10768:	e1530002 	cmp	r3, r2
   1076c:	9afffff4 	bls	10744 <palloc+0x70>
   10770:	e2860028 	add	r0, r6, #40	; 0x28
   10774:	ebfffd5d 	bl	fcf0 <CSpinLock::Release()>
   10778:	e3a00000 	mov	r0, #0
   1077c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10780:	e3031ec4 	movw	r1, #16068	; 0x3ec4
   10784:	e3401001 	movt	r1, #1
   10788:	e3030f34 	movw	r0, #16180	; 0x3f34
   1078c:	e3400001 	movt	r0, #1
   10790:	e3a020c6 	mov	r2, #198	; 0xc6
   10794:	ebffef5a 	bl	c504 <assertion_failed>
   10798:	eaffffd3 	b	106ec <palloc+0x18>

0001079c <pfree>:
   1079c:	e3500000 	cmp	r0, #0
   107a0:	012fff1e 	bxeq	lr
   107a4:	e92d4070 	push	{r4, r5, r6, lr}
   107a8:	e3044500 	movw	r4, #17664	; 0x4500
   107ac:	e3404001 	movt	r4, #1
   107b0:	e1a05000 	mov	r5, r0
   107b4:	e2840028 	add	r0, r4, #40	; 0x28
   107b8:	ebfffd30 	bl	fc80 <CSpinLock::Acquire()>
   107bc:	e2840028 	add	r0, r4, #40	; 0x28
   107c0:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   107c4:	e3043d43 	movw	r3, #19779	; 0x4d43
   107c8:	e3453047 	movt	r3, #20551	; 0x5047
   107cc:	e5853000 	str	r3, [r5]
   107d0:	e5852004 	str	r2, [r5, #4]
   107d4:	e5845040 	str	r5, [r4, #64]	; 0x40
   107d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   107dc:	eafffd43 	b	fcf0 <CSpinLock::Release()>

000107e0 <_GLOBAL__sub_I_mem_init>:
   107e0:	e3043500 	movw	r3, #17664	; 0x4500
   107e4:	e3403001 	movt	r3, #1
   107e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   107ec:	e2837010 	add	r7, r3, #16
   107f0:	e3a01001 	mov	r1, #1
   107f4:	e1a00007 	mov	r0, r7
   107f8:	e30464bc 	movw	r6, #17596	; 0x44bc
   107fc:	e3406001 	movt	r6, #1
   10800:	e30f5c4c 	movw	r5, #64588	; 0xfc4c
   10804:	e3405000 	movt	r5, #0
   10808:	e2834028 	add	r4, r3, #40	; 0x28
   1080c:	ebfffcff 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
   10810:	e1a02006 	mov	r2, r6
   10814:	e1a01005 	mov	r1, r5
   10818:	e1a00007 	mov	r0, r7
   1081c:	ebffe4bc 	bl	9b14 <__aeabi_atexit>
   10820:	e1a00004 	mov	r0, r4
   10824:	e3a01001 	mov	r1, #1
   10828:	ebfffcf8 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
   1082c:	e1a02006 	mov	r2, r6
   10830:	e1a01005 	mov	r1, r5
   10834:	e1a00004 	mov	r0, r4
   10838:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1083c:	eaffe4b4 	b	9b14 <__aeabi_atexit>

00010840 <CBcmMailBox::CBcmMailBox(unsigned int)>:
   10840:	e92d4010 	push	{r4, lr}
   10844:	e1a04000 	mov	r4, r0
   10848:	e4801004 	str	r1, [r0], #4
   1084c:	e3a01000 	mov	r1, #0
   10850:	ebfffcee 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
   10854:	e1a00004 	mov	r0, r4
   10858:	e8bd8010 	pop	{r4, pc}

0001085c <CBcmMailBox::~CBcmMailBox()>:
   1085c:	e92d4010 	push	{r4, lr}
   10860:	e1a04000 	mov	r4, r0
   10864:	e2800004 	add	r0, r0, #4
   10868:	ebfffcf7 	bl	fc4c <CSpinLock::~CSpinLock()>
   1086c:	e1a00004 	mov	r0, r4
   10870:	e8bd8010 	pop	{r4, pc}

00010874 <CBcmMailBox::Flush()>:
   10874:	e92d4010 	push	{r4, lr}
   10878:	e3a04a0b 	mov	r4, #45056	; 0xb000
   1087c:	e3434f00 	movt	r4, #16128	; 0x3f00
   10880:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10884:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10888:	18bd8010 	popne	{r4, pc}
   1088c:	e3a00014 	mov	r0, #20
   10890:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   10894:	ebffe75d 	bl	a610 <CTimer::SimpleMsDelay(unsigned int)>
   10898:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1089c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   108a0:	0afffff9 	beq	1088c <CBcmMailBox::Flush()+0x18>
   108a4:	e8bd8010 	pop	{r4, pc}

000108a8 <CBcmMailBox::Read()>:
   108a8:	e3a02a0b 	mov	r2, #45056	; 0xb000
   108ac:	e3432f00 	movt	r2, #16128	; 0x3f00
   108b0:	e590c000 	ldr	ip, [r0]
   108b4:	e1a01002 	mov	r1, r2
   108b8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   108bc:	e3130101 	tst	r3, #1073741824	; 0x40000000
   108c0:	1afffffc 	bne	108b8 <CBcmMailBox::Read()+0x10>
   108c4:	e5910880 	ldr	r0, [r1, #2176]	; 0x880
   108c8:	e200300f 	and	r3, r0, #15
   108cc:	e15c0003 	cmp	ip, r3
   108d0:	1afffff8 	bne	108b8 <CBcmMailBox::Read()+0x10>
   108d4:	e3c0000f 	bic	r0, r0, #15
   108d8:	e12fff1e 	bx	lr

000108dc <CBcmMailBox::Write(unsigned int)>:
   108dc:	e92d4070 	push	{r4, r5, r6, lr}
   108e0:	e3a02a0b 	mov	r2, #45056	; 0xb000
   108e4:	e3432f00 	movt	r2, #16128	; 0x3f00
   108e8:	e1a05000 	mov	r5, r0
   108ec:	e1a04001 	mov	r4, r1
   108f0:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   108f4:	e3530000 	cmp	r3, #0
   108f8:	bafffffc 	blt	108f0 <CBcmMailBox::Write(unsigned int)+0x14>
   108fc:	e314000f 	tst	r4, #15
   10900:	0a000005 	beq	1091c <CBcmMailBox::Write(unsigned int)+0x40>
   10904:	e3031f6c 	movw	r1, #16236	; 0x3f6c
   10908:	e3401001 	movt	r1, #1
   1090c:	e3030f7c 	movw	r0, #16252	; 0x3f7c
   10910:	e3400001 	movt	r0, #1
   10914:	e3a0205a 	mov	r2, #90	; 0x5a
   10918:	ebffeef9 	bl	c504 <assertion_failed>
   1091c:	e3a03a0b 	mov	r3, #45056	; 0xb000
   10920:	e3433f00 	movt	r3, #16128	; 0x3f00
   10924:	e5951000 	ldr	r1, [r5]
   10928:	e1841001 	orr	r1, r4, r1
   1092c:	e58318a0 	str	r1, [r3, #2208]	; 0x8a0
   10930:	e8bd8070 	pop	{r4, r5, r6, pc}

00010934 <CBcmMailBox::WriteRead(unsigned int)>:
   10934:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10938:	e3a04a0b 	mov	r4, #45056	; 0xb000
   1093c:	e3434f00 	movt	r4, #16128	; 0x3f00
   10940:	e2805004 	add	r5, r0, #4
   10944:	e1a06000 	mov	r6, r0
   10948:	e1a00005 	mov	r0, r5
   1094c:	e1a07001 	mov	r7, r1
   10950:	ebfffcca 	bl	fc80 <CSpinLock::Acquire()>
   10954:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10958:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1095c:	1a000005 	bne	10978 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   10960:	e3a00014 	mov	r0, #20
   10964:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   10968:	ebffe728 	bl	a610 <CTimer::SimpleMsDelay(unsigned int)>
   1096c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10970:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10974:	0afffff9 	beq	10960 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   10978:	e1a01007 	mov	r1, r7
   1097c:	e1a00006 	mov	r0, r6
   10980:	ebffffd5 	bl	108dc <CBcmMailBox::Write(unsigned int)>
   10984:	e3a02a0b 	mov	r2, #45056	; 0xb000
   10988:	e3432f00 	movt	r2, #16128	; 0x3f00
   1098c:	e5960000 	ldr	r0, [r6]
   10990:	e1a01002 	mov	r1, r2
   10994:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   10998:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1099c:	1afffffc 	bne	10994 <CBcmMailBox::WriteRead(unsigned int)+0x60>
   109a0:	e5914880 	ldr	r4, [r1, #2176]	; 0x880
   109a4:	e204300f 	and	r3, r4, #15
   109a8:	e1500003 	cmp	r0, r3
   109ac:	1afffff8 	bne	10994 <CBcmMailBox::WriteRead(unsigned int)+0x60>
   109b0:	e1a00005 	mov	r0, r5
   109b4:	ebfffccd 	bl	fcf0 <CSpinLock::Release()>
   109b8:	e3c4000f 	bic	r0, r4, #15
   109bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000109c0 <__cxa_pure_virtual>:
   109c0:	e3031f90 	movw	r1, #16272	; 0x3f90
   109c4:	e3401001 	movt	r1, #1
   109c8:	e30308c8 	movw	r0, #14536	; 0x38c8
   109cc:	e3400001 	movt	r0, #1
   109d0:	e3a02018 	mov	r2, #24
   109d4:	eaffeeca 	b	c504 <assertion_failed>

000109d8 <EnterCritical>:
   109d8:	e2403001 	sub	r3, r0, #1
   109dc:	e3530001 	cmp	r3, #1
   109e0:	e92d4070 	push	{r4, r5, r6, lr}
   109e4:	e1a04000 	mov	r4, r0
   109e8:	9a000005 	bls	10a04 <EnterCritical+0x2c>
   109ec:	e3031fa0 	movw	r1, #16288	; 0x3fa0
   109f0:	e3401001 	movt	r1, #1
   109f4:	e3030fb0 	movw	r0, #16304	; 0x3fb0
   109f8:	e3400001 	movt	r0, #1
   109fc:	e3a02022 	mov	r2, #34	; 0x22
   10a00:	ebffeebf 	bl	c504 <assertion_failed>
   10a04:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   10a08:	e2055003 	and	r5, r5, #3
   10a0c:	e10f6000 	mrs	r6, CPSR
   10a10:	e3540002 	cmp	r4, #2
   10a14:	0a000001 	beq	10a20 <EnterCritical+0x48>
   10a18:	e3160040 	tst	r6, #64	; 0x40
   10a1c:	1a000019 	bne	10a88 <EnterCritical+0xb0>
   10a20:	f10c0080 	cpsid	i
   10a24:	e3540002 	cmp	r4, #2
   10a28:	0a000014 	beq	10a80 <EnterCritical+0xa8>
   10a2c:	e3044544 	movw	r4, #17732	; 0x4544
   10a30:	e3404001 	movt	r4, #1
   10a34:	e7943105 	ldr	r3, [r4, r5, lsl #2]
   10a38:	e3530013 	cmp	r3, #19
   10a3c:	9a000005 	bls	10a58 <EnterCritical+0x80>
   10a40:	e3031fa0 	movw	r1, #16288	; 0x3fa0
   10a44:	e3401001 	movt	r1, #1
   10a48:	e3040018 	movw	r0, #16408	; 0x4018
   10a4c:	e3400001 	movt	r0, #1
   10a50:	e3a02034 	mov	r2, #52	; 0x34
   10a54:	ebffeeaa 	bl	c504 <assertion_failed>
   10a58:	e7942105 	ldr	r2, [r4, r5, lsl #2]
   10a5c:	e1a03205 	lsl	r3, r5, #4
   10a60:	e0833105 	add	r3, r3, r5, lsl #2
   10a64:	e0833002 	add	r3, r3, r2
   10a68:	e2822001 	add	r2, r2, #1
   10a6c:	e7842105 	str	r2, [r4, r5, lsl #2]
   10a70:	e0844103 	add	r4, r4, r3, lsl #2
   10a74:	e5846010 	str	r6, [r4, #16]
   10a78:	f57ff05f 	dmb	sy
   10a7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a80:	f10c0040 	cpsid	f
   10a84:	eaffffe8 	b	10a2c <EnterCritical+0x54>
   10a88:	e3031fa0 	movw	r1, #16288	; 0x3fa0
   10a8c:	e3401001 	movt	r1, #1
   10a90:	e3030fe8 	movw	r0, #16360	; 0x3fe8
   10a94:	e3400001 	movt	r0, #1
   10a98:	e3a0202c 	mov	r2, #44	; 0x2c
   10a9c:	ebffee98 	bl	c504 <assertion_failed>
   10aa0:	eaffffde 	b	10a20 <EnterCritical+0x48>

00010aa4 <LeaveCritical>:
   10aa4:	e92d4070 	push	{r4, r5, r6, lr}
   10aa8:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   10aac:	e2055003 	and	r5, r5, #3
   10ab0:	f57ff05f 	dmb	sy
   10ab4:	e3044544 	movw	r4, #17732	; 0x4544
   10ab8:	e3404001 	movt	r4, #1
   10abc:	e7943105 	ldr	r3, [r4, r5, lsl #2]
   10ac0:	e3530000 	cmp	r3, #0
   10ac4:	1a000005 	bne	10ae0 <LeaveCritical+0x3c>
   10ac8:	e3031fa0 	movw	r1, #16288	; 0x3fa0
   10acc:	e3401001 	movt	r1, #1
   10ad0:	e3040048 	movw	r0, #16456	; 0x4048
   10ad4:	e3400001 	movt	r0, #1
   10ad8:	e3a02042 	mov	r2, #66	; 0x42
   10adc:	ebffee88 	bl	c504 <assertion_failed>
   10ae0:	e7943105 	ldr	r3, [r4, r5, lsl #2]
   10ae4:	e1a02205 	lsl	r2, r5, #4
   10ae8:	e0822105 	add	r2, r2, r5, lsl #2
   10aec:	e2433001 	sub	r3, r3, #1
   10af0:	e7843105 	str	r3, [r4, r5, lsl #2]
   10af4:	e0823003 	add	r3, r2, r3
   10af8:	e0844103 	add	r4, r4, r3, lsl #2
   10afc:	e5943010 	ldr	r3, [r4, #16]
   10b00:	e121f003 	msr	CPSR_c, r3
   10b04:	e8bd8070 	pop	{r4, r5, r6, pc}

00010b08 <SyncDataAndInstructionCache>:
   10b08:	e92d4010 	push	{r4, lr}
   10b0c:	ebfffcde 	bl	fe8c <CleanDataCache>
   10b10:	e3a03000 	mov	r3, #0
   10b14:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   10b18:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   10b1c:	f57ff04f 	dsb	sy
   10b20:	f57ff06f 	isb	sy
   10b24:	e8bd8010 	pop	{r4, pc}

00010b28 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   10b28:	e92d4010 	push	{r4, lr}
   10b2c:	e1a04000 	mov	r4, r0
   10b30:	e3a01000 	mov	r1, #0
   10b34:	e24dd028 	sub	sp, sp, #40	; 0x28
   10b38:	e3a02c01 	mov	r2, #256	; 0x100
   10b3c:	e28d000c 	add	r0, sp, #12
   10b40:	e5943020 	ldr	r3, [r4, #32]
   10b44:	e583100c 	str	r1, [r3, #12]
   10b48:	e5832010 	str	r2, [r3, #16]
   10b4c:	ebffdfca 	bl	8a7c <CBcmPropertyTags::CBcmPropertyTags()>
   10b50:	e5942020 	ldr	r2, [r4, #32]
   10b54:	e3003408 	movw	r3, #1032	; 0x408
   10b58:	e28d000c 	add	r0, sp, #12
   10b5c:	e58d3000 	str	r3, [sp]
   10b60:	e308100b 	movw	r1, #32779	; 0x800b
   10b64:	e3401004 	movt	r1, #4
   10b68:	e3003414 	movw	r3, #1044	; 0x414
   10b6c:	ebffe00a 	bl	8b9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10b70:	e3500000 	cmp	r0, #0
   10b74:	e28d000c 	add	r0, sp, #12
   10b78:	0a000003 	beq	10b8c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
   10b7c:	e5943020 	ldr	r3, [r4, #32]
   10b80:	e593300c 	ldr	r3, [r3, #12]
   10b84:	e3530000 	cmp	r3, #0
   10b88:	0a000003 	beq	10b9c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
   10b8c:	ebffdfc0 	bl	8a94 <CBcmPropertyTags::~CBcmPropertyTags()>
   10b90:	e3a00000 	mov	r0, #0
   10b94:	e28dd028 	add	sp, sp, #40	; 0x28
   10b98:	e8bd8010 	pop	{r4, pc}
   10b9c:	ebffdfbc 	bl	8a94 <CBcmPropertyTags::~CBcmPropertyTags()>
   10ba0:	e3a00001 	mov	r0, #1
   10ba4:	e28dd028 	add	sp, sp, #40	; 0x28
   10ba8:	e8bd8010 	pop	{r4, pc}

00010bac <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   10bac:	e92d4030 	push	{r4, r5, lr}
   10bb0:	e1a04000 	mov	r4, r0
   10bb4:	e3510000 	cmp	r1, #0
   10bb8:	13520000 	cmpne	r2, #0
   10bbc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   10bc0:	e3a05000 	mov	r5, #0
   10bc4:	e8840006 	stm	r4, {r1, r2}
   10bc8:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   10bcc:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
   10bd0:	e5843010 	str	r3, [r4, #16]
   10bd4:	e584c00c 	str	ip, [r4, #12]
   10bd8:	e5840008 	str	r0, [r4, #8]
   10bdc:	e5845014 	str	r5, [r4, #20]
   10be0:	e5845018 	str	r5, [r4, #24]
   10be4:	e584501c 	str	r5, [r4, #28]
   10be8:	e5845020 	str	r5, [r4, #32]
   10bec:	1a000011 	bne	10c38 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   10bf0:	e28d001c 	add	r0, sp, #28
   10bf4:	ebffdfa0 	bl	8a7c <CBcmPropertyTags::CBcmPropertyTags()>
   10bf8:	e58d5000 	str	r5, [sp]
   10bfc:	e28d001c 	add	r0, sp, #28
   10c00:	e3a01003 	mov	r1, #3
   10c04:	e3401004 	movt	r1, #4
   10c08:	e3a03014 	mov	r3, #20
   10c0c:	e28d2008 	add	r2, sp, #8
   10c10:	ebffdfe1 	bl	8b9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10c14:	e1500005 	cmp	r0, r5
   10c18:	1a000028 	bne	10cc0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
   10c1c:	e3a02d0a 	mov	r2, #640	; 0x280
   10c20:	e3a03e1e 	mov	r3, #480	; 0x1e0
   10c24:	e884000c 	stm	r4, {r2, r3}
   10c28:	e28d001c 	add	r0, sp, #28
   10c2c:	ebffdf98 	bl	8a94 <CBcmPropertyTags::~CBcmPropertyTags()>
   10c30:	e5940008 	ldr	r0, [r4, #8]
   10c34:	e5943010 	ldr	r3, [r4, #16]
   10c38:	e3500000 	cmp	r0, #0
   10c3c:	0a00001b 	beq	10cb0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   10c40:	e594200c 	ldr	r2, [r4, #12]
   10c44:	e3520000 	cmp	r2, #0
   10c48:	0a000018 	beq	10cb0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   10c4c:	e3530008 	cmp	r3, #8
   10c50:	8a000008 	bhi	10c78 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xcc>
   10c54:	e3000414 	movw	r0, #1044	; 0x414
   10c58:	ebffe3a8 	bl	9b00 <operator new[](unsigned int)>
   10c5c:	e3a02b01 	mov	r2, #1024	; 0x400
   10c60:	e1a03000 	mov	r3, r0
   10c64:	e3a01000 	mov	r1, #0
   10c68:	e5843020 	str	r3, [r4, #32]
   10c6c:	e2800014 	add	r0, r0, #20
   10c70:	ebffe6c0 	bl	a778 <memset>
   10c74:	e5943010 	ldr	r3, [r4, #16]
   10c78:	e3042420 	movw	r2, #17440	; 0x4420
   10c7c:	e3402001 	movt	r2, #1
   10c80:	e5945000 	ldr	r5, [r4]
   10c84:	e1a00004 	mov	r0, r4
   10c88:	e594e004 	ldr	lr, [r4, #4]
   10c8c:	e594c008 	ldr	ip, [r4, #8]
   10c90:	e594100c 	ldr	r1, [r4, #12]
   10c94:	e5821024 	str	r1, [r2, #36]	; 0x24
   10c98:	e582500c 	str	r5, [r2, #12]
   10c9c:	e582e010 	str	lr, [r2, #16]
   10ca0:	e582c020 	str	ip, [r2, #32]
   10ca4:	e5823034 	str	r3, [r2, #52]	; 0x34
   10ca8:	e28dd03c 	add	sp, sp, #60	; 0x3c
   10cac:	e8bd8030 	pop	{r4, r5, pc}
   10cb0:	e8940006 	ldm	r4, {r1, r2}
   10cb4:	e5841008 	str	r1, [r4, #8]
   10cb8:	e584200c 	str	r2, [r4, #12]
   10cbc:	eaffffe2 	b	10c4c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   10cc0:	e59d2014 	ldr	r2, [sp, #20]
   10cc4:	e59d3018 	ldr	r3, [sp, #24]
   10cc8:	e2421d0a 	sub	r1, r2, #640	; 0x280
   10ccc:	e5842000 	str	r2, [r4]
   10cd0:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
   10cd4:	e5843004 	str	r3, [r4, #4]
   10cd8:	e3520f96 	cmp	r2, #600	; 0x258
   10cdc:	93510c05 	cmpls	r1, #1280	; 0x500
   10ce0:	9affffd0 	bls	10c28 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   10ce4:	eaffffcc 	b	10c1c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

00010ce8 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   10ce8:	e92d4010 	push	{r4, lr}
   10cec:	e3a01014 	mov	r1, #20
   10cf0:	e1a04000 	mov	r4, r0
   10cf4:	e5900020 	ldr	r0, [r0, #32]
   10cf8:	ebffe383 	bl	9b0c <operator delete(void*, unsigned int)>
   10cfc:	e1a00004 	mov	r0, r4
   10d00:	e8bd8010 	pop	{r4, pc}

00010d04 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   10d04:	e5903010 	ldr	r3, [r0, #16]
   10d08:	e3530008 	cmp	r3, #8
   10d0c:	812fff1e 	bxhi	lr
   10d10:	e5900020 	ldr	r0, [r0, #32]
   10d14:	e1a03982 	lsl	r3, r2, #19
   10d18:	e1a0c5a2 	lsr	ip, r2, #11
   10d1c:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   10d20:	e0801101 	add	r1, r0, r1, lsl #2
   10d24:	e1a02282 	lsl	r2, r2, #5
   10d28:	e183318c 	orr	r3, r3, ip, lsl #3
   10d2c:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   10d30:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   10d34:	e1822003 	orr	r2, r2, r3
   10d38:	e5812014 	str	r2, [r1, #20]
   10d3c:	e12fff1e 	bx	lr

00010d40 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   10d40:	e5903010 	ldr	r3, [r0, #16]
   10d44:	e3530008 	cmp	r3, #8
   10d48:	95903020 	ldrls	r3, [r0, #32]
   10d4c:	90831101 	addls	r1, r3, r1, lsl #2
   10d50:	95812014 	strls	r2, [r1, #20]
   10d54:	e12fff1e 	bx	lr

00010d58 <CBcmFrameBuffer::Initialize()>:
   10d58:	e92d4070 	push	{r4, r5, r6, lr}
   10d5c:	e1a05000 	mov	r5, r0
   10d60:	e3046420 	movw	r6, #17440	; 0x4420
   10d64:	e3406001 	movt	r6, #1
   10d68:	e24dd020 	sub	sp, sp, #32
   10d6c:	e28d0004 	add	r0, sp, #4
   10d70:	ebffdf41 	bl	8a7c <CBcmPropertyTags::CBcmPropertyTags()>
   10d74:	e1a01006 	mov	r1, r6
   10d78:	e28d0004 	add	r0, sp, #4
   10d7c:	e3a02070 	mov	r2, #112	; 0x70
   10d80:	ebffdf48 	bl	8aa8 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   10d84:	e2504000 	subs	r4, r0, #0
   10d88:	0a00001e 	beq	10e08 <CBcmFrameBuffer::Initialize()+0xb0>
   10d8c:	e596400c 	ldr	r4, [r6, #12]
   10d90:	e3540000 	cmp	r4, #0
   10d94:	0a00001b 	beq	10e08 <CBcmFrameBuffer::Initialize()+0xb0>
   10d98:	e5964010 	ldr	r4, [r6, #16]
   10d9c:	e3540000 	cmp	r4, #0
   10da0:	0a000018 	beq	10e08 <CBcmFrameBuffer::Initialize()+0xb0>
   10da4:	e5964020 	ldr	r4, [r6, #32]
   10da8:	e3540000 	cmp	r4, #0
   10dac:	0a000015 	beq	10e08 <CBcmFrameBuffer::Initialize()+0xb0>
   10db0:	e5964024 	ldr	r4, [r6, #36]	; 0x24
   10db4:	e3540000 	cmp	r4, #0
   10db8:	0a000012 	beq	10e08 <CBcmFrameBuffer::Initialize()+0xb0>
   10dbc:	e5964034 	ldr	r4, [r6, #52]	; 0x34
   10dc0:	e3540000 	cmp	r4, #0
   10dc4:	0a00000f 	beq	10e08 <CBcmFrameBuffer::Initialize()+0xb0>
   10dc8:	e5964058 	ldr	r4, [r6, #88]	; 0x58
   10dcc:	e3540000 	cmp	r4, #0
   10dd0:	0a00000c 	beq	10e08 <CBcmFrameBuffer::Initialize()+0xb0>
   10dd4:	e5953010 	ldr	r3, [r5, #16]
   10dd8:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   10ddc:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
   10de0:	e3530008 	cmp	r3, #8
   10de4:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
   10de8:	e585301c 	str	r3, [r5, #28]
   10dec:	e5854014 	str	r4, [r5, #20]
   10df0:	83a04001 	movhi	r4, #1
   10df4:	e5852018 	str	r2, [r5, #24]
   10df8:	8a000002 	bhi	10e08 <CBcmFrameBuffer::Initialize()+0xb0>
   10dfc:	e1a00005 	mov	r0, r5
   10e00:	ebffff48 	bl	10b28 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   10e04:	e1a04000 	mov	r4, r0
   10e08:	e28d0004 	add	r0, sp, #4
   10e0c:	ebffdf20 	bl	8a94 <CBcmPropertyTags::~CBcmPropertyTags()>
   10e10:	e1a00004 	mov	r0, r4
   10e14:	e28dd020 	add	sp, sp, #32
   10e18:	e8bd8070 	pop	{r4, r5, r6, pc}

00010e1c <CBcmFrameBuffer::GetWidth() const>:
   10e1c:	e5900000 	ldr	r0, [r0]
   10e20:	e12fff1e 	bx	lr

00010e24 <CBcmFrameBuffer::GetHeight() const>:
   10e24:	e5900004 	ldr	r0, [r0, #4]
   10e28:	e12fff1e 	bx	lr

00010e2c <CBcmFrameBuffer::GetVirtWidth() const>:
   10e2c:	e5900008 	ldr	r0, [r0, #8]
   10e30:	e12fff1e 	bx	lr

00010e34 <CBcmFrameBuffer::GetVirtHeight() const>:
   10e34:	e590000c 	ldr	r0, [r0, #12]
   10e38:	e12fff1e 	bx	lr

00010e3c <CBcmFrameBuffer::GetPitch() const>:
   10e3c:	e590001c 	ldr	r0, [r0, #28]
   10e40:	e12fff1e 	bx	lr

00010e44 <CBcmFrameBuffer::GetDepth() const>:
   10e44:	e5900010 	ldr	r0, [r0, #16]
   10e48:	e12fff1e 	bx	lr

00010e4c <CBcmFrameBuffer::GetBuffer() const>:
   10e4c:	e5900014 	ldr	r0, [r0, #20]
   10e50:	e12fff1e 	bx	lr

00010e54 <CBcmFrameBuffer::GetSize() const>:
   10e54:	e5900018 	ldr	r0, [r0, #24]
   10e58:	e12fff1e 	bx	lr

00010e5c <CBcmFrameBuffer::UpdatePalette()>:
   10e5c:	e5903010 	ldr	r3, [r0, #16]
   10e60:	e3530008 	cmp	r3, #8
   10e64:	9a000001 	bls	10e70 <CBcmFrameBuffer::UpdatePalette()+0x14>
   10e68:	e3a00001 	mov	r0, #1
   10e6c:	e12fff1e 	bx	lr
   10e70:	eaffff2c 	b	10b28 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00010e74 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   10e74:	e92d4070 	push	{r4, r5, r6, lr}
   10e78:	e1a05001 	mov	r5, r1
   10e7c:	e1a06002 	mov	r6, r2
   10e80:	e24dd038 	sub	sp, sp, #56	; 0x38
   10e84:	e28d001c 	add	r0, sp, #28
   10e88:	ebffdefb 	bl	8a7c <CBcmPropertyTags::CBcmPropertyTags()>
   10e8c:	e3a03008 	mov	r3, #8
   10e90:	e28d001c 	add	r0, sp, #28
   10e94:	e58d3000 	str	r3, [sp]
   10e98:	e3081009 	movw	r1, #32777	; 0x8009
   10e9c:	e3401004 	movt	r1, #4
   10ea0:	e3a03014 	mov	r3, #20
   10ea4:	e28d2008 	add	r2, sp, #8
   10ea8:	e58d5014 	str	r5, [sp, #20]
   10eac:	e58d6018 	str	r6, [sp, #24]
   10eb0:	ebffdf39 	bl	8b9c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10eb4:	e2504000 	subs	r4, r0, #0
   10eb8:	0a000006 	beq	10ed8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   10ebc:	e59d3014 	ldr	r3, [sp, #20]
   10ec0:	e1550003 	cmp	r5, r3
   10ec4:	13a04000 	movne	r4, #0
   10ec8:	059d4018 	ldreq	r4, [sp, #24]
   10ecc:	00664004 	rsbeq	r4, r6, r4
   10ed0:	016f4f14 	clzeq	r4, r4
   10ed4:	01a042a4 	lsreq	r4, r4, #5
   10ed8:	e28d001c 	add	r0, sp, #28
   10edc:	ebffdeec 	bl	8a94 <CBcmPropertyTags::~CBcmPropertyTags()>
   10ee0:	e1a00004 	mov	r0, r4
   10ee4:	e28dd038 	add	sp, sp, #56	; 0x38
   10ee8:	e8bd8070 	pop	{r4, r5, r6, pc}

00010eec <CDevice::~CDevice()>:
   10eec:	e12fff1e 	bx	lr

00010ef0 <CDevice::Read(void*, unsigned int)>:
   10ef0:	e3e00000 	mvn	r0, #0
   10ef4:	e12fff1e 	bx	lr

00010ef8 <CDevice::Seek(unsigned long long)>:
   10ef8:	e3e00000 	mvn	r0, #0
   10efc:	e3e01000 	mvn	r1, #0
   10f00:	e12fff1e 	bx	lr

00010f04 <CDevice::~CDevice()>:
   10f04:	e92d4010 	push	{r4, lr}
   10f08:	e3a01004 	mov	r1, #4
   10f0c:	e1a04000 	mov	r4, r0
   10f10:	ebffe2fd 	bl	9b0c <operator delete(void*, unsigned int)>
   10f14:	e1a00004 	mov	r0, r4
   10f18:	e8bd8010 	pop	{r4, pc}

00010f1c <CDevice::CDevice()>:
   10f1c:	e304306c 	movw	r3, #16492	; 0x406c
   10f20:	e3403001 	movt	r3, #1
   10f24:	e5803000 	str	r3, [r0]
   10f28:	e12fff1e 	bx	lr

00010f2c <CTask::Run()>:
   10f2c:	e3041094 	movw	r1, #16532	; 0x4094
   10f30:	e3401001 	movt	r1, #1
   10f34:	e30308c8 	movw	r0, #14536	; 0x38c8
   10f38:	e3400001 	movt	r0, #1
   10f3c:	e3a0203a 	mov	r2, #58	; 0x3a
   10f40:	eaffed6f 	b	c504 <assertion_failed>

00010f44 <CTask::~CTask()>:
   10f44:	e92d4070 	push	{r4, r5, r6, lr}
   10f48:	e1a05000 	mov	r5, r0
   10f4c:	e1a04000 	mov	r4, r0
   10f50:	e3043088 	movw	r3, #16520	; 0x4088
   10f54:	e3403001 	movt	r3, #1
   10f58:	e4853050 	str	r3, [r5], #80	; 0x50
   10f5c:	e1a00005 	mov	r0, r5
   10f60:	ebfffb46 	bl	fc80 <CSpinLock::Acquire()>
   10f64:	e5d43004 	ldrb	r3, [r4, #4]
   10f68:	e3530003 	cmp	r3, #3
   10f6c:	0a000005 	beq	10f88 <CTask::~CTask()+0x44>
   10f70:	e3041094 	movw	r1, #16532	; 0x4094
   10f74:	e3401001 	movt	r1, #1
   10f78:	e30400a0 	movw	r0, #16544	; 0x40a0
   10f7c:	e3400001 	movt	r0, #1
   10f80:	e3a0202f 	mov	r2, #47	; 0x2f
   10f84:	ebffed5e 	bl	c504 <assertion_failed>
   10f88:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
   10f8c:	e3a03004 	mov	r3, #4
   10f90:	e5c43004 	strb	r3, [r4, #4]
   10f94:	e3500000 	cmp	r0, #0
   10f98:	0a000000 	beq	10fa0 <CTask::~CTask()+0x5c>
   10f9c:	ebffe2d9 	bl	9b08 <operator delete[](void*)>
   10fa0:	e3a03000 	mov	r3, #0
   10fa4:	e1a00005 	mov	r0, r5
   10fa8:	e584304c 	str	r3, [r4, #76]	; 0x4c
   10fac:	ebfffb4f 	bl	fcf0 <CSpinLock::Release()>
   10fb0:	e1a00005 	mov	r0, r5
   10fb4:	ebfffb24 	bl	fc4c <CSpinLock::~CSpinLock()>
   10fb8:	e1a00004 	mov	r0, r4
   10fbc:	e8bd8070 	pop	{r4, r5, r6, pc}

00010fc0 <CTask::~CTask()>:
   10fc0:	e92d4010 	push	{r4, lr}
   10fc4:	e1a04000 	mov	r4, r0
   10fc8:	ebffffdd 	bl	10f44 <CTask::~CTask()>
   10fcc:	e1a00004 	mov	r0, r4
   10fd0:	e3a01068 	mov	r1, #104	; 0x68
   10fd4:	ebffe2cc 	bl	9b0c <operator delete(void*, unsigned int)>
   10fd8:	e1a00004 	mov	r0, r4
   10fdc:	e8bd8010 	pop	{r4, pc}

00010fe0 <CTask::TaskEntry(void*)>:
   10fe0:	e92d4070 	push	{r4, r5, r6, lr}
   10fe4:	e2504000 	subs	r4, r0, #0
   10fe8:	0a000021 	beq	11074 <CTask::TaskEntry(void*)+0x94>
   10fec:	e2845050 	add	r5, r4, #80	; 0x50
   10ff0:	e1a00005 	mov	r0, r5
   10ff4:	ebfffb21 	bl	fc80 <CSpinLock::Acquire()>
   10ff8:	e5d46004 	ldrb	r6, [r4, #4]
   10ffc:	e1a00005 	mov	r0, r5
   11000:	ebfffb3a 	bl	fcf0 <CSpinLock::Release()>
   11004:	e6ef6076 	uxtb	r6, r6
   11008:	e3560005 	cmp	r6, #5
   1100c:	0a000005 	beq	11028 <CTask::TaskEntry(void*)+0x48>
   11010:	e3041094 	movw	r1, #16532	; 0x4094
   11014:	e3401001 	movt	r1, #1
   11018:	e30400c0 	movw	r0, #16576	; 0x40c0
   1101c:	e3400001 	movt	r0, #1
   11020:	e3a0204f 	mov	r2, #79	; 0x4f
   11024:	ebffed36 	bl	c504 <assertion_failed>
   11028:	e5943000 	ldr	r3, [r4]
   1102c:	e1a00004 	mov	r0, r4
   11030:	e5933008 	ldr	r3, [r3, #8]
   11034:	e12fff33 	blx	r3
   11038:	e1a00005 	mov	r0, r5
   1103c:	ebfffb0f 	bl	fc80 <CSpinLock::Acquire()>
   11040:	e3a03003 	mov	r3, #3
   11044:	e1a00005 	mov	r0, r5
   11048:	e5c43004 	strb	r3, [r4, #4]
   1104c:	ebfffb27 	bl	fcf0 <CSpinLock::Release()>
   11050:	eb000382 	bl	11e60 <CScheduler::Get()>
   11054:	eb000195 	bl	116b0 <CScheduler::Yield()>
   11058:	e3041094 	movw	r1, #16532	; 0x4094
   1105c:	e3401001 	movt	r1, #1
   11060:	e30308c8 	movw	r0, #14536	; 0x38c8
   11064:	e3400001 	movt	r0, #1
   11068:	e3a02056 	mov	r2, #86	; 0x56
   1106c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11070:	eaffed23 	b	c504 <assertion_failed>
   11074:	e3041094 	movw	r1, #16532	; 0x4094
   11078:	e3401001 	movt	r1, #1
   1107c:	e30205f0 	movw	r0, #9712	; 0x25f0
   11080:	e3400001 	movt	r0, #1
   11084:	e3a0204e 	mov	r2, #78	; 0x4e
   11088:	ebffed1d 	bl	c504 <assertion_failed>
   1108c:	eaffffd6 	b	10fec <CTask::TaskEntry(void*)+0xc>

00011090 <CTask::InitializeRegs()>:
   11090:	e92d4010 	push	{r4, lr}
   11094:	e1a04000 	mov	r4, r0
   11098:	e3a0203c 	mov	r2, #60	; 0x3c
   1109c:	e280000c 	add	r0, r0, #12
   110a0:	e3a01000 	mov	r1, #0
   110a4:	ebffe5b3 	bl	a778 <memset>
   110a8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   110ac:	e584400c 	str	r4, [r4, #12]
   110b0:	e3530000 	cmp	r3, #0
   110b4:	0a000006 	beq	110d4 <CTask::InitializeRegs()+0x44>
   110b8:	e5941048 	ldr	r1, [r4, #72]	; 0x48
   110bc:	e3002fe0 	movw	r2, #4064	; 0xfe0
   110c0:	e3402001 	movt	r2, #1
   110c4:	e5842044 	str	r2, [r4, #68]	; 0x44
   110c8:	e0833001 	add	r3, r3, r1
   110cc:	e5843040 	str	r3, [r4, #64]	; 0x40
   110d0:	e8bd8010 	pop	{r4, pc}
   110d4:	e3041094 	movw	r1, #16532	; 0x4094
   110d8:	e3401001 	movt	r1, #1
   110dc:	e30400e8 	movw	r0, #16616	; 0x40e8
   110e0:	e3400001 	movt	r0, #1
   110e4:	e3a02044 	mov	r2, #68	; 0x44
   110e8:	ebffed05 	bl	c504 <assertion_failed>
   110ec:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   110f0:	eafffff0 	b	110b8 <CTask::InitializeRegs()+0x28>

000110f4 <CTask::CTask(unsigned int)>:
   110f4:	e92d4010 	push	{r4, lr}
   110f8:	e1a04000 	mov	r4, r0
   110fc:	e3a03000 	mov	r3, #0
   11100:	e3042088 	movw	r2, #16520	; 0x4088
   11104:	e3402001 	movt	r2, #1
   11108:	e2800050 	add	r0, r0, #80	; 0x50
   1110c:	e5841048 	str	r1, [r4, #72]	; 0x48
   11110:	e3a01001 	mov	r1, #1
   11114:	e5842000 	str	r2, [r4]
   11118:	e5c43004 	strb	r3, [r4, #4]
   1111c:	e584304c 	str	r3, [r4, #76]	; 0x4c
   11120:	ebfffaba 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
   11124:	e5940048 	ldr	r0, [r4, #72]	; 0x48
   11128:	e3500000 	cmp	r0, #0
   1112c:	0a000007 	beq	11150 <CTask::CTask(unsigned int)+0x5c>
   11130:	e3500b01 	cmp	r0, #1024	; 0x400
   11134:	3a000012 	bcc	11184 <CTask::CTask(unsigned int)+0x90>
   11138:	e3100003 	tst	r0, #3
   1113c:	1a000008 	bne	11164 <CTask::CTask(unsigned int)+0x70>
   11140:	ebffe26e 	bl	9b00 <operator new[](unsigned int)>
   11144:	e584004c 	str	r0, [r4, #76]	; 0x4c
   11148:	e1a00004 	mov	r0, r4
   1114c:	ebffffcf 	bl	11090 <CTask::InitializeRegs()>
   11150:	eb000342 	bl	11e60 <CScheduler::Get()>
   11154:	e1a01004 	mov	r1, r4
   11158:	eb00004e 	bl	11298 <CScheduler::AddTask(CTask*)>
   1115c:	e1a00004 	mov	r0, r4
   11160:	e8bd8010 	pop	{r4, pc}
   11164:	e3041094 	movw	r1, #16532	; 0x4094
   11168:	e3401001 	movt	r1, #1
   1116c:	e3040110 	movw	r0, #16656	; 0x4110
   11170:	e3400001 	movt	r0, #1
   11174:	e3a02021 	mov	r2, #33	; 0x21
   11178:	ebffece1 	bl	c504 <assertion_failed>
   1117c:	e5940048 	ldr	r0, [r4, #72]	; 0x48
   11180:	eaffffee 	b	11140 <CTask::CTask(unsigned int)+0x4c>
   11184:	e3041094 	movw	r1, #16532	; 0x4094
   11188:	e3401001 	movt	r1, #1
   1118c:	e30400f8 	movw	r0, #16632	; 0x40f8
   11190:	e3400001 	movt	r0, #1
   11194:	e3a02020 	mov	r2, #32
   11198:	ebffecd9 	bl	c504 <assertion_failed>
   1119c:	e5940048 	ldr	r0, [r4, #72]	; 0x48
   111a0:	e3100003 	tst	r0, #3
   111a4:	0affffe5 	beq	11140 <CTask::CTask(unsigned int)+0x4c>
   111a8:	eaffffed 	b	11164 <CTask::CTask(unsigned int)+0x70>

000111ac <CScheduler::CScheduler()>:
   111ac:	e92d4070 	push	{r4, r5, r6, lr}
   111b0:	e1a06000 	mov	r6, r0
   111b4:	e3044694 	movw	r4, #18068	; 0x4694
   111b8:	e3404001 	movt	r4, #1
   111bc:	e3a03000 	mov	r3, #0
   111c0:	e1a00004 	mov	r0, r4
   111c4:	e5863000 	str	r3, [r6]
   111c8:	e5863004 	str	r3, [r6, #4]
   111cc:	ebfffaab 	bl	fc80 <CSpinLock::Acquire()>
   111d0:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   111d4:	e2055003 	and	r5, r5, #3
   111d8:	e1a00004 	mov	r0, r4
   111dc:	ebfffac3 	bl	fcf0 <CSpinLock::Release()>
   111e0:	e0845105 	add	r5, r4, r5, lsl #2
   111e4:	e5953018 	ldr	r3, [r5, #24]
   111e8:	e3530000 	cmp	r3, #0
   111ec:	0a000005 	beq	11208 <CScheduler::CScheduler()+0x5c>
   111f0:	e3041130 	movw	r1, #16688	; 0x4130
   111f4:	e3401001 	movt	r1, #1
   111f8:	e3040140 	movw	r0, #16704	; 0x4140
   111fc:	e3400001 	movt	r0, #1
   11200:	e3a02029 	mov	r2, #41	; 0x29
   11204:	ebffecbe 	bl	c504 <assertion_failed>
   11208:	e3040694 	movw	r0, #18068	; 0x4694
   1120c:	e3400001 	movt	r0, #1
   11210:	ebfffa9a 	bl	fc80 <CSpinLock::Acquire()>
   11214:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   11218:	e2055003 	and	r5, r5, #3
   1121c:	e3040694 	movw	r0, #18068	; 0x4694
   11220:	e3400001 	movt	r0, #1
   11224:	e0844105 	add	r4, r4, r5, lsl #2
   11228:	ebfffab0 	bl	fcf0 <CSpinLock::Release()>
   1122c:	e3a00068 	mov	r0, #104	; 0x68
   11230:	e5846018 	str	r6, [r4, #24]
   11234:	ebffe230 	bl	9afc <operator new(unsigned int)>
   11238:	e1a04000 	mov	r4, r0
   1123c:	e3a01000 	mov	r1, #0
   11240:	e2805050 	add	r5, r0, #80	; 0x50
   11244:	ebffffaa 	bl	110f4 <CTask::CTask(unsigned int)>
   11248:	e1a00005 	mov	r0, r5
   1124c:	e5864000 	str	r4, [r6]
   11250:	ebfffa8a 	bl	fc80 <CSpinLock::Acquire()>
   11254:	e3a03005 	mov	r3, #5
   11258:	e1a00005 	mov	r0, r5
   1125c:	e5c43004 	strb	r3, [r4, #4]
   11260:	ebfffaa2 	bl	fcf0 <CSpinLock::Release()>
   11264:	e5963000 	ldr	r3, [r6]
   11268:	e3530000 	cmp	r3, #0
   1126c:	0a000001 	beq	11278 <CScheduler::CScheduler()+0xcc>
   11270:	e1a00006 	mov	r0, r6
   11274:	e8bd8070 	pop	{r4, r5, r6, pc}
   11278:	e3a0202e 	mov	r2, #46	; 0x2e
   1127c:	e3041130 	movw	r1, #16688	; 0x4130
   11280:	e3401001 	movt	r1, #1
   11284:	e3040164 	movw	r0, #16740	; 0x4164
   11288:	e3400001 	movt	r0, #1
   1128c:	ebffec9c 	bl	c504 <assertion_failed>
   11290:	e1a00006 	mov	r0, r6
   11294:	e8bd8070 	pop	{r4, r5, r6, pc}

00011298 <CScheduler::AddTask(CTask*)>:
   11298:	e92d4070 	push	{r4, r5, r6, lr}
   1129c:	e2514000 	subs	r4, r1, #0
   112a0:	0a000028 	beq	11348 <CScheduler::AddTask(CTask*)+0xb0>
   112a4:	e3045694 	movw	r5, #18068	; 0x4694
   112a8:	e3405001 	movt	r5, #1
   112ac:	e2850028 	add	r0, r5, #40	; 0x28
   112b0:	ebfffa72 	bl	fc80 <CSpinLock::Acquire()>
   112b4:	e5950040 	ldr	r0, [r5, #64]	; 0x40
   112b8:	e3500000 	cmp	r0, #0
   112bc:	0a00000d 	beq	112f8 <CScheduler::AddTask(CTask*)+0x60>
   112c0:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   112c4:	e3530000 	cmp	r3, #0
   112c8:	12852044 	addne	r2, r5, #68	; 0x44
   112cc:	13a03000 	movne	r3, #0
   112d0:	1a000003 	bne	112e4 <CScheduler::AddTask(CTask*)+0x4c>
   112d4:	ea00000f 	b	11318 <CScheduler::AddTask(CTask*)+0x80>
   112d8:	e5b21004 	ldr	r1, [r2, #4]!
   112dc:	e3510000 	cmp	r1, #0
   112e0:	0a00000c 	beq	11318 <CScheduler::AddTask(CTask*)+0x80>
   112e4:	e2833001 	add	r3, r3, #1
   112e8:	e1530000 	cmp	r3, r0
   112ec:	1afffff9 	bne	112d8 <CScheduler::AddTask(CTask*)+0x40>
   112f0:	e3500013 	cmp	r0, #19
   112f4:	8a00000a 	bhi	11324 <CScheduler::AddTask(CTask*)+0x8c>
   112f8:	e0852100 	add	r2, r5, r0, lsl #2
   112fc:	e2803001 	add	r3, r0, #1
   11300:	e30406bc 	movw	r0, #18108	; 0x46bc
   11304:	e3400001 	movt	r0, #1
   11308:	e5853040 	str	r3, [r5, #64]	; 0x40
   1130c:	e5824044 	str	r4, [r2, #68]	; 0x44
   11310:	e8bd4070 	pop	{r4, r5, r6, lr}
   11314:	eafffa75 	b	fcf0 <CSpinLock::Release()>
   11318:	e0853103 	add	r3, r5, r3, lsl #2
   1131c:	e5834044 	str	r4, [r3, #68]	; 0x44
   11320:	e8bd8070 	pop	{r4, r5, r6, pc}
   11324:	ebffedec 	bl	cadc <CLogger::Get()>
   11328:	e3043180 	movw	r3, #16768	; 0x4180
   1132c:	e3403001 	movt	r3, #1
   11330:	e3041128 	movw	r1, #16680	; 0x4128
   11334:	e3401001 	movt	r1, #1
   11338:	e3a02000 	mov	r2, #0
   1133c:	ebffeeb4 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11340:	e5950040 	ldr	r0, [r5, #64]	; 0x40
   11344:	eaffffeb 	b	112f8 <CScheduler::AddTask(CTask*)+0x60>
   11348:	e3041130 	movw	r1, #16688	; 0x4130
   1134c:	e3401001 	movt	r1, #1
   11350:	e3040174 	movw	r0, #16756	; 0x4174
   11354:	e3400001 	movt	r0, #1
   11358:	e3a020b5 	mov	r2, #181	; 0xb5
   1135c:	ebffec68 	bl	c504 <assertion_failed>
   11360:	eaffffcf 	b	112a4 <CScheduler::AddTask(CTask*)+0xc>

00011364 <CScheduler::RemoveTask(CTask*)>:
   11364:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11368:	e304e694 	movw	lr, #18068	; 0x4694
   1136c:	e340e001 	movt	lr, #1
   11370:	e59ec040 	ldr	ip, [lr, #64]	; 0x40
   11374:	e35c0000 	cmp	ip, #0
   11378:	0a00000b 	beq	113ac <CScheduler::RemoveTask(CTask*)+0x48>
   1137c:	e59e3044 	ldr	r3, [lr, #68]	; 0x44
   11380:	e1510003 	cmp	r1, r3
   11384:	128e2044 	addne	r2, lr, #68	; 0x44
   11388:	13a03000 	movne	r3, #0
   1138c:	1a000003 	bne	113a0 <CScheduler::RemoveTask(CTask*)+0x3c>
   11390:	ea00000c 	b	113c8 <CScheduler::RemoveTask(CTask*)+0x64>
   11394:	e5b20004 	ldr	r0, [r2, #4]!
   11398:	e1500001 	cmp	r0, r1
   1139c:	0a00000a 	beq	113cc <CScheduler::RemoveTask(CTask*)+0x68>
   113a0:	e2833001 	add	r3, r3, #1
   113a4:	e153000c 	cmp	r3, ip
   113a8:	1afffff9 	bne	11394 <CScheduler::RemoveTask(CTask*)+0x30>
   113ac:	e3041130 	movw	r1, #16688	; 0x4130
   113b0:	e3401001 	movt	r1, #1
   113b4:	e30308c8 	movw	r0, #14536	; 0x38c8
   113b8:	e3400001 	movt	r0, #1
   113bc:	e3a020e1 	mov	r2, #225	; 0xe1
   113c0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   113c4:	eaffec4e 	b	c504 <assertion_failed>
   113c8:	e3a03000 	mov	r3, #0
   113cc:	e24cc001 	sub	ip, ip, #1
   113d0:	e08ee103 	add	lr, lr, r3, lsl #2
   113d4:	e15c0003 	cmp	ip, r3
   113d8:	e3a01000 	mov	r1, #0
   113dc:	e3042694 	movw	r2, #18068	; 0x4694
   113e0:	e3402001 	movt	r2, #1
   113e4:	e58e1044 	str	r1, [lr, #68]	; 0x44
   113e8:	05823040 	streq	r3, [r2, #64]	; 0x40
   113ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000113f0 <CScheduler::~CScheduler()>:
   113f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   113f4:	e3044694 	movw	r4, #18068	; 0x4694
   113f8:	e3404001 	movt	r4, #1
   113fc:	e1a05000 	mov	r5, r0
   11400:	e2840028 	add	r0, r4, #40	; 0x28
   11404:	ebfffa1d 	bl	fc80 <CSpinLock::Acquire()>
   11408:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1140c:	e3530001 	cmp	r3, #1
   11410:	0a000005 	beq	1142c <CScheduler::~CScheduler()+0x3c>
   11414:	e3041130 	movw	r1, #16688	; 0x4130
   11418:	e3401001 	movt	r1, #1
   1141c:	e30401a0 	movw	r0, #16800	; 0x41a0
   11420:	e3400001 	movt	r0, #1
   11424:	e3a02034 	mov	r2, #52	; 0x34
   11428:	ebffec35 	bl	c504 <assertion_failed>
   1142c:	e5951000 	ldr	r1, [r5]
   11430:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   11434:	e1530001 	cmp	r3, r1
   11438:	0a000006 	beq	11458 <CScheduler::~CScheduler()+0x68>
   1143c:	e3041130 	movw	r1, #16688	; 0x4130
   11440:	e3401001 	movt	r1, #1
   11444:	e30401b0 	movw	r0, #16816	; 0x41b0
   11448:	e3400001 	movt	r0, #1
   1144c:	e3a02035 	mov	r2, #53	; 0x35
   11450:	ebffec2b 	bl	c504 <assertion_failed>
   11454:	e5951000 	ldr	r1, [r5]
   11458:	e1a00005 	mov	r0, r5
   1145c:	ebffffc0 	bl	11364 <CScheduler::RemoveTask(CTask*)>
   11460:	e5950000 	ldr	r0, [r5]
   11464:	e3500000 	cmp	r0, #0
   11468:	0a000002 	beq	11478 <CScheduler::~CScheduler()+0x88>
   1146c:	e5903000 	ldr	r3, [r0]
   11470:	e5933004 	ldr	r3, [r3, #4]
   11474:	e12fff33 	blx	r3
   11478:	e3a07000 	mov	r7, #0
   1147c:	e3040694 	movw	r0, #18068	; 0x4694
   11480:	e3400001 	movt	r0, #1
   11484:	e5857000 	str	r7, [r5]
   11488:	ebfff9fc 	bl	fc80 <CSpinLock::Acquire()>
   1148c:	ee106fb0 	mrc	15, 0, r6, cr0, cr0, {5}
   11490:	e2066003 	and	r6, r6, #3
   11494:	e3040694 	movw	r0, #18068	; 0x4694
   11498:	e3400001 	movt	r0, #1
   1149c:	e0844106 	add	r4, r4, r6, lsl #2
   114a0:	ebfffa12 	bl	fcf0 <CSpinLock::Release()>
   114a4:	e30406bc 	movw	r0, #18108	; 0x46bc
   114a8:	e3400001 	movt	r0, #1
   114ac:	e5847018 	str	r7, [r4, #24]
   114b0:	ebfffa0e 	bl	fcf0 <CSpinLock::Release()>
   114b4:	e1a00005 	mov	r0, r5
   114b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000114bc <CScheduler::WakeTask(CTask**)>:
   114bc:	e92d4070 	push	{r4, r5, r6, lr}
   114c0:	e2515000 	subs	r5, r1, #0
   114c4:	0a00001a 	beq	11534 <CScheduler::WakeTask(CTask**)+0x78>
   114c8:	e5954000 	ldr	r4, [r5]
   114cc:	e3a03000 	mov	r3, #0
   114d0:	e5853000 	str	r3, [r5]
   114d4:	e1540003 	cmp	r4, r3
   114d8:	0a00001c 	beq	11550 <CScheduler::WakeTask(CTask**)+0x94>
   114dc:	e2845050 	add	r5, r4, #80	; 0x50
   114e0:	e1a00005 	mov	r0, r5
   114e4:	ebfff9e5 	bl	fc80 <CSpinLock::Acquire()>
   114e8:	e5d46004 	ldrb	r6, [r4, #4]
   114ec:	e1a00005 	mov	r0, r5
   114f0:	ebfff9fe 	bl	fcf0 <CSpinLock::Release()>
   114f4:	e6ef6076 	uxtb	r6, r6
   114f8:	e3560001 	cmp	r6, #1
   114fc:	0a000005 	beq	11518 <CScheduler::WakeTask(CTask**)+0x5c>
   11500:	e3041130 	movw	r1, #16688	; 0x4130
   11504:	e3401001 	movt	r1, #1
   11508:	e30401d8 	movw	r0, #16856	; 0x41d8
   1150c:	e3400001 	movt	r0, #1
   11510:	e3002101 	movw	r2, #257	; 0x101
   11514:	ebffebfa 	bl	c504 <assertion_failed>
   11518:	e1a00005 	mov	r0, r5
   1151c:	ebfff9d7 	bl	fc80 <CSpinLock::Acquire()>
   11520:	e1a00005 	mov	r0, r5
   11524:	e3a03000 	mov	r3, #0
   11528:	e5c43004 	strb	r3, [r4, #4]
   1152c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11530:	eafff9ee 	b	fcf0 <CSpinLock::Release()>
   11534:	e3041130 	movw	r1, #16688	; 0x4130
   11538:	e3401001 	movt	r1, #1
   1153c:	e30401cc 	movw	r0, #16844	; 0x41cc
   11540:	e3400001 	movt	r0, #1
   11544:	e3a020f4 	mov	r2, #244	; 0xf4
   11548:	ebffebed 	bl	c504 <assertion_failed>
   1154c:	eaffffdd 	b	114c8 <CScheduler::WakeTask(CTask**)+0xc>
   11550:	e3041130 	movw	r1, #16688	; 0x4130
   11554:	e3401001 	movt	r1, #1
   11558:	e3040174 	movw	r0, #16756	; 0x4174
   1155c:	e3400001 	movt	r0, #1
   11560:	e3a02c01 	mov	r2, #256	; 0x100
   11564:	ebffebe6 	bl	c504 <assertion_failed>
   11568:	eaffffdb 	b	114dc <CScheduler::WakeTask(CTask**)+0x20>

0001156c <CScheduler::GetNextTask()>:
   1156c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11570:	e5904004 	ldr	r4, [r0, #4]
   11574:	e304b694 	movw	fp, #18068	; 0x4694
   11578:	e340b001 	movt	fp, #1
   1157c:	e3540014 	cmp	r4, #20
   11580:	e1a09000 	mov	r9, r0
   11584:	23a04000 	movcs	r4, #0
   11588:	ebffe46c 	bl	a740 <CTimer::Get()>
   1158c:	ebffe236 	bl	9e6c <CTimer::GetClockTicks()>
   11590:	e59b3040 	ldr	r3, [fp, #64]	; 0x40
   11594:	e3530000 	cmp	r3, #0
   11598:	0a000022 	beq	11628 <CScheduler::GetNextTask()+0xbc>
   1159c:	e1a0a000 	mov	sl, r0
   115a0:	e3a08001 	mov	r8, #1
   115a4:	e2844001 	add	r4, r4, #1
   115a8:	e2888001 	add	r8, r8, #1
   115ac:	e1540003 	cmp	r4, r3
   115b0:	23a04000 	movcs	r4, #0
   115b4:	e08b3104 	add	r3, fp, r4, lsl #2
   115b8:	e5935044 	ldr	r5, [r3, #68]	; 0x44
   115bc:	e3550000 	cmp	r5, #0
   115c0:	e2857050 	add	r7, r5, #80	; 0x50
   115c4:	e1a00007 	mov	r0, r7
   115c8:	0a000013 	beq	1161c <CScheduler::GetNextTask()+0xb0>
   115cc:	ebfff9ab 	bl	fc80 <CSpinLock::Acquire()>
   115d0:	e5d56004 	ldrb	r6, [r5, #4]
   115d4:	e1a00007 	mov	r0, r7
   115d8:	e6ef6076 	uxtb	r6, r6
   115dc:	ebfff9c3 	bl	fcf0 <CSpinLock::Release()>
   115e0:	e3560005 	cmp	r6, #5
   115e4:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
   115e8:	ea000005 	b	11604 <CScheduler::GetNextTask()+0x98>
   115ec:	00011650 	.word	0x00011650
   115f0:	0001161c 	.word	0x0001161c
   115f4:	00011630 	.word	0x00011630
   115f8:	0001168c 	.word	0x0001168c
   115fc:	00011604 	.word	0x00011604
   11600:	00011670 	.word	0x00011670
   11604:	e3041130 	movw	r1, #16688	; 0x4130
   11608:	e3401001 	movt	r1, #1
   1160c:	e30308c8 	movw	r0, #14536	; 0x38c8
   11610:	e3400001 	movt	r0, #1
   11614:	e300213b 	movw	r2, #315	; 0x13b
   11618:	ebffebb9 	bl	c504 <assertion_failed>
   1161c:	e59b3040 	ldr	r3, [fp, #64]	; 0x40
   11620:	e1530008 	cmp	r3, r8
   11624:	2affffde 	bcs	115a4 <CScheduler::GetNextTask()+0x38>
   11628:	e3a00014 	mov	r0, #20
   1162c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11630:	e1a00007 	mov	r0, r7
   11634:	ebfff991 	bl	fc80 <CSpinLock::Acquire()>
   11638:	e5956008 	ldr	r6, [r5, #8]
   1163c:	e1a00007 	mov	r0, r7
   11640:	e06a6006 	rsb	r6, sl, r6
   11644:	ebfff9a9 	bl	fcf0 <CSpinLock::Release()>
   11648:	e3560000 	cmp	r6, #0
   1164c:	cafffff2 	bgt	1161c <CScheduler::GetNextTask()+0xb0>
   11650:	e1a00007 	mov	r0, r7
   11654:	ebfff989 	bl	fc80 <CSpinLock::Acquire()>
   11658:	e3a03005 	mov	r3, #5
   1165c:	e1a00007 	mov	r0, r7
   11660:	e5c53004 	strb	r3, [r5, #4]
   11664:	ebfff9a1 	bl	fcf0 <CSpinLock::Release()>
   11668:	e1a00004 	mov	r0, r4
   1166c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11670:	e5993000 	ldr	r3, [r9]
   11674:	e1550003 	cmp	r5, r3
   11678:	0afffffa 	beq	11668 <CScheduler::GetNextTask()+0xfc>
   1167c:	e59b3040 	ldr	r3, [fp, #64]	; 0x40
   11680:	e1530008 	cmp	r3, r8
   11684:	2affffc6 	bcs	115a4 <CScheduler::GetNextTask()+0x38>
   11688:	eaffffe6 	b	11628 <CScheduler::GetNextTask()+0xbc>
   1168c:	e1a00009 	mov	r0, r9
   11690:	e1a01005 	mov	r1, r5
   11694:	ebffff32 	bl	11364 <CScheduler::RemoveTask(CTask*)>
   11698:	e5953000 	ldr	r3, [r5]
   1169c:	e1a00005 	mov	r0, r5
   116a0:	e5933004 	ldr	r3, [r3, #4]
   116a4:	e12fff33 	blx	r3
   116a8:	e3a00014 	mov	r0, #20
   116ac:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000116b0 <CScheduler::Yield()>:
   116b0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   116b4:	e1a05000 	mov	r5, r0
   116b8:	e24dd00c 	sub	sp, sp, #12
   116bc:	ebffed06 	bl	cadc <CLogger::Get()>
   116c0:	e1a06000 	mov	r6, r0
   116c4:	e3040694 	movw	r0, #18068	; 0x4694
   116c8:	e3400001 	movt	r0, #1
   116cc:	ebfff96b 	bl	fc80 <CSpinLock::Acquire()>
   116d0:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   116d4:	e3040694 	movw	r0, #18068	; 0x4694
   116d8:	e3400001 	movt	r0, #1
   116dc:	ebfff983 	bl	fcf0 <CSpinLock::Release()>
   116e0:	e2044003 	and	r4, r4, #3
   116e4:	e3a02003 	mov	r2, #3
   116e8:	e1a00006 	mov	r0, r6
   116ec:	e58d4000 	str	r4, [sp]
   116f0:	e3043200 	movw	r3, #16896	; 0x4200
   116f4:	e3403001 	movt	r3, #1
   116f8:	e3041218 	movw	r1, #16920	; 0x4218
   116fc:	e3401001 	movt	r1, #1
   11700:	ebffedc3 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11704:	ebffecf4 	bl	cadc <CLogger::Get()>
   11708:	e1a06000 	mov	r6, r0
   1170c:	e3040694 	movw	r0, #18068	; 0x4694
   11710:	e3400001 	movt	r0, #1
   11714:	ebfff959 	bl	fc80 <CSpinLock::Acquire()>
   11718:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   1171c:	e3040694 	movw	r0, #18068	; 0x4694
   11720:	e3400001 	movt	r0, #1
   11724:	ebfff971 	bl	fcf0 <CSpinLock::Release()>
   11728:	e2044003 	and	r4, r4, #3
   1172c:	e3a02003 	mov	r2, #3
   11730:	e1a00006 	mov	r0, r6
   11734:	e58d4000 	str	r4, [sp]
   11738:	e3043224 	movw	r3, #16932	; 0x4224
   1173c:	e3403001 	movt	r3, #1
   11740:	e3041218 	movw	r1, #16920	; 0x4218
   11744:	e3401001 	movt	r1, #1
   11748:	ebffedb1 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1174c:	e30406bc 	movw	r0, #18108	; 0x46bc
   11750:	e3400001 	movt	r0, #1
   11754:	ebfff949 	bl	fc80 <CSpinLock::Acquire()>
   11758:	ebffecdf 	bl	cadc <CLogger::Get()>
   1175c:	e1a07000 	mov	r7, r0
   11760:	e3040694 	movw	r0, #18068	; 0x4694
   11764:	e3400001 	movt	r0, #1
   11768:	ebfff944 	bl	fc80 <CSpinLock::Acquire()>
   1176c:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   11770:	e3040694 	movw	r0, #18068	; 0x4694
   11774:	e3400001 	movt	r0, #1
   11778:	e1a06000 	mov	r6, r0
   1177c:	e2044003 	and	r4, r4, #3
   11780:	ebfff95a 	bl	fcf0 <CSpinLock::Release()>
   11784:	e1a00007 	mov	r0, r7
   11788:	e58d4000 	str	r4, [sp]
   1178c:	e3043240 	movw	r3, #16960	; 0x4240
   11790:	e3403001 	movt	r3, #1
   11794:	e3041218 	movw	r1, #16920	; 0x4218
   11798:	e3401001 	movt	r1, #1
   1179c:	e3a02003 	mov	r2, #3
   117a0:	ebffed9b 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   117a4:	ea000053 	b	118f8 <CScheduler::Yield()+0x248>
   117a8:	ebffeccb 	bl	cadc <CLogger::Get()>
   117ac:	e1a07000 	mov	r7, r0
   117b0:	e3040694 	movw	r0, #18068	; 0x4694
   117b4:	e3400001 	movt	r0, #1
   117b8:	ebfff930 	bl	fc80 <CSpinLock::Acquire()>
   117bc:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   117c0:	e3040694 	movw	r0, #18068	; 0x4694
   117c4:	e3400001 	movt	r0, #1
   117c8:	ebfff948 	bl	fcf0 <CSpinLock::Release()>
   117cc:	e2044003 	and	r4, r4, #3
   117d0:	e3a02003 	mov	r2, #3
   117d4:	e1a00007 	mov	r0, r7
   117d8:	e58d4000 	str	r4, [sp]
   117dc:	e3043254 	movw	r3, #16980	; 0x4254
   117e0:	e3403001 	movt	r3, #1
   117e4:	e3041218 	movw	r1, #16920	; 0x4218
   117e8:	e3401001 	movt	r1, #1
   117ec:	ebffed88 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   117f0:	e30406bc 	movw	r0, #18108	; 0x46bc
   117f4:	e3400001 	movt	r0, #1
   117f8:	ebfff93c 	bl	fcf0 <CSpinLock::Release()>
   117fc:	ebffecb6 	bl	cadc <CLogger::Get()>
   11800:	e1a07000 	mov	r7, r0
   11804:	e3040694 	movw	r0, #18068	; 0x4694
   11808:	e3400001 	movt	r0, #1
   1180c:	ebfff91b 	bl	fc80 <CSpinLock::Acquire()>
   11810:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   11814:	e3040694 	movw	r0, #18068	; 0x4694
   11818:	e3400001 	movt	r0, #1
   1181c:	ebfff933 	bl	fcf0 <CSpinLock::Release()>
   11820:	e2044003 	and	r4, r4, #3
   11824:	e3a02003 	mov	r2, #3
   11828:	e1a00007 	mov	r0, r7
   1182c:	e58d4000 	str	r4, [sp]
   11830:	e304326c 	movw	r3, #17004	; 0x426c
   11834:	e3403001 	movt	r3, #1
   11838:	e3041218 	movw	r1, #16920	; 0x4218
   1183c:	e3401001 	movt	r1, #1
   11840:	ebffed73 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11844:	ebffe3bd 	bl	a740 <CTimer::Get()>
   11848:	e3a00064 	mov	r0, #100	; 0x64
   1184c:	ebffe36f 	bl	a610 <CTimer::SimpleMsDelay(unsigned int)>
   11850:	ebffeca1 	bl	cadc <CLogger::Get()>
   11854:	e1a07000 	mov	r7, r0
   11858:	e3040694 	movw	r0, #18068	; 0x4694
   1185c:	e3400001 	movt	r0, #1
   11860:	ebfff906 	bl	fc80 <CSpinLock::Acquire()>
   11864:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   11868:	e3040694 	movw	r0, #18068	; 0x4694
   1186c:	e3400001 	movt	r0, #1
   11870:	ebfff91e 	bl	fcf0 <CSpinLock::Release()>
   11874:	e2044003 	and	r4, r4, #3
   11878:	e3a02003 	mov	r2, #3
   1187c:	e1a00007 	mov	r0, r7
   11880:	e58d4000 	str	r4, [sp]
   11884:	e3043224 	movw	r3, #16932	; 0x4224
   11888:	e3403001 	movt	r3, #1
   1188c:	e3041218 	movw	r1, #16920	; 0x4218
   11890:	e3401001 	movt	r1, #1
   11894:	ebffed5e 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11898:	e30406bc 	movw	r0, #18108	; 0x46bc
   1189c:	e3400001 	movt	r0, #1
   118a0:	ebfff8f6 	bl	fc80 <CSpinLock::Acquire()>
   118a4:	ebffec8c 	bl	cadc <CLogger::Get()>
   118a8:	e1a07000 	mov	r7, r0
   118ac:	e3040694 	movw	r0, #18068	; 0x4694
   118b0:	e3400001 	movt	r0, #1
   118b4:	ebfff8f1 	bl	fc80 <CSpinLock::Acquire()>
   118b8:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   118bc:	e3040694 	movw	r0, #18068	; 0x4694
   118c0:	e3400001 	movt	r0, #1
   118c4:	ebfff909 	bl	fcf0 <CSpinLock::Release()>
   118c8:	e2044003 	and	r4, r4, #3
   118cc:	e1a00007 	mov	r0, r7
   118d0:	e58d4000 	str	r4, [sp]
   118d4:	e3043240 	movw	r3, #16960	; 0x4240
   118d8:	e3403001 	movt	r3, #1
   118dc:	e3041218 	movw	r1, #16920	; 0x4218
   118e0:	e3401001 	movt	r1, #1
   118e4:	e3a02003 	mov	r2, #3
   118e8:	ebffed49 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   118ec:	e5963040 	ldr	r3, [r6, #64]	; 0x40
   118f0:	e3530000 	cmp	r3, #0
   118f4:	0a000069 	beq	11aa0 <CScheduler::Yield()+0x3f0>
   118f8:	e1a00005 	mov	r0, r5
   118fc:	ebffff1a 	bl	1156c <CScheduler::GetNextTask()>
   11900:	e3500014 	cmp	r0, #20
   11904:	e5850004 	str	r0, [r5, #4]
   11908:	0affffa6 	beq	117a8 <CScheduler::Yield()+0xf8>
   1190c:	ebffec72 	bl	cadc <CLogger::Get()>
   11910:	e1a07000 	mov	r7, r0
   11914:	e3040694 	movw	r0, #18068	; 0x4694
   11918:	e3400001 	movt	r0, #1
   1191c:	ebfff8d7 	bl	fc80 <CSpinLock::Acquire()>
   11920:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   11924:	e3040694 	movw	r0, #18068	; 0x4694
   11928:	e3400001 	movt	r0, #1
   1192c:	ebfff8ef 	bl	fcf0 <CSpinLock::Release()>
   11930:	e5952004 	ldr	r2, [r5, #4]
   11934:	e58d2004 	str	r2, [sp, #4]
   11938:	e2044003 	and	r4, r4, #3
   1193c:	e1a00007 	mov	r0, r7
   11940:	e58d4000 	str	r4, [sp]
   11944:	e30432b0 	movw	r3, #17072	; 0x42b0
   11948:	e3403001 	movt	r3, #1
   1194c:	e3041218 	movw	r1, #16920	; 0x4218
   11950:	e3401001 	movt	r1, #1
   11954:	e3a02003 	mov	r2, #3
   11958:	ebffed2d 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1195c:	e5953004 	ldr	r3, [r5, #4]
   11960:	e3530013 	cmp	r3, #19
   11964:	8a000054 	bhi	11abc <CScheduler::Yield()+0x40c>
   11968:	e0866103 	add	r6, r6, r3, lsl #2
   1196c:	e5964044 	ldr	r4, [r6, #68]	; 0x44
   11970:	e3540000 	cmp	r4, #0
   11974:	0a000078 	beq	11b5c <CScheduler::Yield()+0x4ac>
   11978:	e5956000 	ldr	r6, [r5]
   1197c:	e1540006 	cmp	r4, r6
   11980:	0a00005e 	beq	11b00 <CScheduler::Yield()+0x450>
   11984:	e2867050 	add	r7, r6, #80	; 0x50
   11988:	e1a00007 	mov	r0, r7
   1198c:	ebfff8bb 	bl	fc80 <CSpinLock::Acquire()>
   11990:	e5d66004 	ldrb	r6, [r6, #4]
   11994:	e1a00007 	mov	r0, r7
   11998:	ebfff8d4 	bl	fcf0 <CSpinLock::Release()>
   1199c:	e6ef6076 	uxtb	r6, r6
   119a0:	e3560005 	cmp	r6, #5
   119a4:	0a00004c 	beq	11adc <CScheduler::Yield()+0x42c>
   119a8:	e5956000 	ldr	r6, [r5]
   119ac:	e2848050 	add	r8, r4, #80	; 0x50
   119b0:	e284700c 	add	r7, r4, #12
   119b4:	e2869050 	add	r9, r6, #80	; 0x50
   119b8:	e286600c 	add	r6, r6, #12
   119bc:	e1a00009 	mov	r0, r9
   119c0:	ebfff8ae 	bl	fc80 <CSpinLock::Acquire()>
   119c4:	e1a00009 	mov	r0, r9
   119c8:	ebfff8c8 	bl	fcf0 <CSpinLock::Release()>
   119cc:	e5854000 	str	r4, [r5]
   119d0:	e1a00008 	mov	r0, r8
   119d4:	ebfff8a9 	bl	fc80 <CSpinLock::Acquire()>
   119d8:	e1a00008 	mov	r0, r8
   119dc:	ebfff8c3 	bl	fcf0 <CSpinLock::Release()>
   119e0:	ebffec3d 	bl	cadc <CLogger::Get()>
   119e4:	e1a05000 	mov	r5, r0
   119e8:	e3040694 	movw	r0, #18068	; 0x4694
   119ec:	e3400001 	movt	r0, #1
   119f0:	ebfff8a2 	bl	fc80 <CSpinLock::Acquire()>
   119f4:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   119f8:	e3040694 	movw	r0, #18068	; 0x4694
   119fc:	e3400001 	movt	r0, #1
   11a00:	ebfff8ba 	bl	fcf0 <CSpinLock::Release()>
   11a04:	e2044003 	and	r4, r4, #3
   11a08:	e1a00005 	mov	r0, r5
   11a0c:	e3a02003 	mov	r2, #3
   11a10:	e58d4000 	str	r4, [sp]
   11a14:	e3043254 	movw	r3, #16980	; 0x4254
   11a18:	e3403001 	movt	r3, #1
   11a1c:	e3041218 	movw	r1, #16920	; 0x4218
   11a20:	e3401001 	movt	r1, #1
   11a24:	ebffecfa 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11a28:	e30406bc 	movw	r0, #18108	; 0x46bc
   11a2c:	e3400001 	movt	r0, #1
   11a30:	ebfff8ae 	bl	fcf0 <CSpinLock::Release()>
   11a34:	e3560000 	cmp	r6, #0
   11a38:	0a00004e 	beq	11b78 <CScheduler::Yield()+0x4c8>
   11a3c:	e3570000 	cmp	r7, #0
   11a40:	0a000053 	beq	11b94 <CScheduler::Yield()+0x4e4>
   11a44:	ebffec24 	bl	cadc <CLogger::Get()>
   11a48:	e1a05000 	mov	r5, r0
   11a4c:	e3040694 	movw	r0, #18068	; 0x4694
   11a50:	e3400001 	movt	r0, #1
   11a54:	ebfff889 	bl	fc80 <CSpinLock::Acquire()>
   11a58:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   11a5c:	e3040694 	movw	r0, #18068	; 0x4694
   11a60:	e3400001 	movt	r0, #1
   11a64:	ebfff8a1 	bl	fcf0 <CSpinLock::Release()>
   11a68:	e2044003 	and	r4, r4, #3
   11a6c:	e1a00005 	mov	r0, r5
   11a70:	e58d4000 	str	r4, [sp]
   11a74:	e3a02003 	mov	r2, #3
   11a78:	e3043308 	movw	r3, #17160	; 0x4308
   11a7c:	e3403001 	movt	r3, #1
   11a80:	e3041218 	movw	r1, #16920	; 0x4218
   11a84:	e3401001 	movt	r1, #1
   11a88:	ebffece1 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11a8c:	e1a01007 	mov	r1, r7
   11a90:	e1a00006 	mov	r0, r6
   11a94:	e28dd00c 	add	sp, sp, #12
   11a98:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   11a9c:	ea00012f 	b	11f60 <TaskSwitch>
   11aa0:	e3041130 	movw	r1, #16688	; 0x4130
   11aa4:	e3401001 	movt	r1, #1
   11aa8:	e30402a0 	movw	r0, #17056	; 0x42a0
   11aac:	e3400001 	movt	r0, #1
   11ab0:	e3a02060 	mov	r2, #96	; 0x60
   11ab4:	ebffea92 	bl	c504 <assertion_failed>
   11ab8:	eaffff8e 	b	118f8 <CScheduler::Yield()+0x248>
   11abc:	e3041130 	movw	r1, #16688	; 0x4130
   11ac0:	e3401001 	movt	r1, #1
   11ac4:	e30402c4 	movw	r0, #17092	; 0x42c4
   11ac8:	e3400001 	movt	r0, #1
   11acc:	e3a02064 	mov	r2, #100	; 0x64
   11ad0:	ebffea8b 	bl	c504 <assertion_failed>
   11ad4:	e5953004 	ldr	r3, [r5, #4]
   11ad8:	eaffffa2 	b	11968 <CScheduler::Yield()+0x2b8>
   11adc:	e5956000 	ldr	r6, [r5]
   11ae0:	e2867050 	add	r7, r6, #80	; 0x50
   11ae4:	e1a00007 	mov	r0, r7
   11ae8:	ebfff864 	bl	fc80 <CSpinLock::Acquire()>
   11aec:	e3a03000 	mov	r3, #0
   11af0:	e1a00007 	mov	r0, r7
   11af4:	e5c63004 	strb	r3, [r6, #4]
   11af8:	ebfff87c 	bl	fcf0 <CSpinLock::Release()>
   11afc:	eaffffa9 	b	119a8 <CScheduler::Yield()+0x2f8>
   11b00:	ebffebf5 	bl	cadc <CLogger::Get()>
   11b04:	e1a05000 	mov	r5, r0
   11b08:	e3040694 	movw	r0, #18068	; 0x4694
   11b0c:	e3400001 	movt	r0, #1
   11b10:	ebfff85a 	bl	fc80 <CSpinLock::Acquire()>
   11b14:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   11b18:	e3040694 	movw	r0, #18068	; 0x4694
   11b1c:	e3400001 	movt	r0, #1
   11b20:	ebfff872 	bl	fcf0 <CSpinLock::Release()>
   11b24:	e2043003 	and	r3, r4, #3
   11b28:	e1a00005 	mov	r0, r5
   11b2c:	e58d3000 	str	r3, [sp]
   11b30:	e3a02003 	mov	r2, #3
   11b34:	e3043254 	movw	r3, #16980	; 0x4254
   11b38:	e3403001 	movt	r3, #1
   11b3c:	e3041218 	movw	r1, #16920	; 0x4218
   11b40:	e3401001 	movt	r1, #1
   11b44:	ebffecb2 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11b48:	e30406bc 	movw	r0, #18108	; 0x46bc
   11b4c:	e3400001 	movt	r0, #1
   11b50:	e28dd00c 	add	sp, sp, #12
   11b54:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   11b58:	eafff864 	b	fcf0 <CSpinLock::Release()>
   11b5c:	e3041130 	movw	r1, #16688	; 0x4130
   11b60:	e3401001 	movt	r1, #1
   11b64:	e30402dc 	movw	r0, #17116	; 0x42dc
   11b68:	e3400001 	movt	r0, #1
   11b6c:	e3a02066 	mov	r2, #102	; 0x66
   11b70:	ebffea63 	bl	c504 <assertion_failed>
   11b74:	eaffff7f 	b	11978 <CScheduler::Yield()+0x2c8>
   11b78:	e3041130 	movw	r1, #16688	; 0x4130
   11b7c:	e3401001 	movt	r1, #1
   11b80:	e30402e8 	movw	r0, #17128	; 0x42e8
   11b84:	e3400001 	movt	r0, #1
   11b88:	e3a0207c 	mov	r2, #124	; 0x7c
   11b8c:	ebffea5c 	bl	c504 <assertion_failed>
   11b90:	eaffffa9 	b	11a3c <CScheduler::Yield()+0x38c>
   11b94:	e3041130 	movw	r1, #16688	; 0x4130
   11b98:	e3401001 	movt	r1, #1
   11b9c:	e30402f8 	movw	r0, #17144	; 0x42f8
   11ba0:	e3400001 	movt	r0, #1
   11ba4:	e3a0207d 	mov	r2, #125	; 0x7d
   11ba8:	ebffea55 	bl	c504 <assertion_failed>
   11bac:	eaffffa4 	b	11a44 <CScheduler::Yield()+0x394>

00011bb0 <CScheduler::startFromSecondary()>:
   11bb0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11bb4:	e3045694 	movw	r5, #18068	; 0x4694
   11bb8:	e3405001 	movt	r5, #1
   11bbc:	e24dd00c 	sub	sp, sp, #12
   11bc0:	e1a06000 	mov	r6, r0
   11bc4:	ebffebc4 	bl	cadc <CLogger::Get()>
   11bc8:	e1a07000 	mov	r7, r0
   11bcc:	e1a00005 	mov	r0, r5
   11bd0:	ebfff82a 	bl	fc80 <CSpinLock::Acquire()>
   11bd4:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   11bd8:	e1a00005 	mov	r0, r5
   11bdc:	e2044003 	and	r4, r4, #3
   11be0:	ebfff842 	bl	fcf0 <CSpinLock::Release()>
   11be4:	e3a02003 	mov	r2, #3
   11be8:	e1a00007 	mov	r0, r7
   11bec:	e58d4000 	str	r4, [sp]
   11bf0:	e3043328 	movw	r3, #17192	; 0x4328
   11bf4:	e3403001 	movt	r3, #1
   11bf8:	e3041218 	movw	r1, #16920	; 0x4218
   11bfc:	e3401001 	movt	r1, #1
   11c00:	ebffec83 	bl	ce14 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c04:	e5964000 	ldr	r4, [r6]
   11c08:	e2845050 	add	r5, r4, #80	; 0x50
   11c0c:	e1a00005 	mov	r0, r5
   11c10:	ebfff81a 	bl	fc80 <CSpinLock::Acquire()>
   11c14:	e1a00005 	mov	r0, r5
   11c18:	e3a03003 	mov	r3, #3
   11c1c:	e5c43004 	strb	r3, [r4, #4]
   11c20:	ebfff832 	bl	fcf0 <CSpinLock::Release()>
   11c24:	e1a00006 	mov	r0, r6
   11c28:	e28dd00c 	add	sp, sp, #12
   11c2c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   11c30:	eafffe9e 	b	116b0 <CScheduler::Yield()>

00011c34 <CScheduler::usSleep(unsigned int) [clone .part.2]>:
   11c34:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11c38:	e1a04000 	mov	r4, r0
   11c3c:	e1a08001 	mov	r8, r1
   11c40:	ebffe2be 	bl	a740 <CTimer::Get()>
   11c44:	ebffe088 	bl	9e6c <CTimer::GetClockTicks()>
   11c48:	e1a06000 	mov	r6, r0
   11c4c:	e30406bc 	movw	r0, #18108	; 0x46bc
   11c50:	e3400001 	movt	r0, #1
   11c54:	ebfff809 	bl	fc80 <CSpinLock::Acquire()>
   11c58:	e5945000 	ldr	r5, [r4]
   11c5c:	e3550000 	cmp	r5, #0
   11c60:	0a000024 	beq	11cf8 <CScheduler::usSleep(unsigned int) [clone .part.2]+0xc4>
   11c64:	e2857050 	add	r7, r5, #80	; 0x50
   11c68:	e1a00007 	mov	r0, r7
   11c6c:	ebfff803 	bl	fc80 <CSpinLock::Acquire()>
   11c70:	e5d55004 	ldrb	r5, [r5, #4]
   11c74:	e1a00007 	mov	r0, r7
   11c78:	ebfff81c 	bl	fcf0 <CSpinLock::Release()>
   11c7c:	e6ef5075 	uxtb	r5, r5
   11c80:	e3550005 	cmp	r5, #5
   11c84:	0a000005 	beq	11ca0 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x6c>
   11c88:	e3041130 	movw	r1, #16688	; 0x4130
   11c8c:	e3401001 	movt	r1, #1
   11c90:	e304034c 	movw	r0, #17228	; 0x434c
   11c94:	e3400001 	movt	r0, #1
   11c98:	e3a020a7 	mov	r2, #167	; 0xa7
   11c9c:	ebffea18 	bl	c504 <assertion_failed>
   11ca0:	e5947000 	ldr	r7, [r4]
   11ca4:	e0866008 	add	r6, r6, r8
   11ca8:	e2875050 	add	r5, r7, #80	; 0x50
   11cac:	e1a00005 	mov	r0, r5
   11cb0:	ebfff7f2 	bl	fc80 <CSpinLock::Acquire()>
   11cb4:	e5876008 	str	r6, [r7, #8]
   11cb8:	e1a00005 	mov	r0, r5
   11cbc:	ebfff80b 	bl	fcf0 <CSpinLock::Release()>
   11cc0:	e5945000 	ldr	r5, [r4]
   11cc4:	e2856050 	add	r6, r5, #80	; 0x50
   11cc8:	e1a00006 	mov	r0, r6
   11ccc:	ebfff7eb 	bl	fc80 <CSpinLock::Acquire()>
   11cd0:	e1a00006 	mov	r0, r6
   11cd4:	e3a03002 	mov	r3, #2
   11cd8:	e5c53004 	strb	r3, [r5, #4]
   11cdc:	ebfff803 	bl	fcf0 <CSpinLock::Release()>
   11ce0:	e30406bc 	movw	r0, #18108	; 0x46bc
   11ce4:	e3400001 	movt	r0, #1
   11ce8:	ebfff800 	bl	fcf0 <CSpinLock::Release()>
   11cec:	e1a00004 	mov	r0, r4
   11cf0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11cf4:	eafffe6d 	b	116b0 <CScheduler::Yield()>
   11cf8:	e3041130 	movw	r1, #16688	; 0x4130
   11cfc:	e3401001 	movt	r1, #1
   11d00:	e3040164 	movw	r0, #16740	; 0x4164
   11d04:	e3400001 	movt	r0, #1
   11d08:	e3a020a6 	mov	r2, #166	; 0xa6
   11d0c:	ebffe9fc 	bl	c504 <assertion_failed>
   11d10:	e5945000 	ldr	r5, [r4]
   11d14:	eaffffd2 	b	11c64 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x30>

00011d18 <CScheduler::usSleep(unsigned int)>:
   11d18:	e3510000 	cmp	r1, #0
   11d1c:	012fff1e 	bxeq	lr
   11d20:	eaffffc3 	b	11c34 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00011d24 <CScheduler::Sleep(unsigned int)>:
   11d24:	e92d4070 	push	{r4, r5, r6, lr}
   11d28:	e3005708 	movw	r5, #1800	; 0x708
   11d2c:	e1a04001 	mov	r4, r1
   11d30:	e1510005 	cmp	r1, r5
   11d34:	e1a06000 	mov	r6, r0
   11d38:	9a000007 	bls	11d5c <CScheduler::Sleep(unsigned int)+0x38>
   11d3c:	e2444c07 	sub	r4, r4, #1792	; 0x700
   11d40:	e3a01cd2 	mov	r1, #53760	; 0xd200
   11d44:	e3461b49 	movt	r1, #27465	; 0x6b49
   11d48:	e2444008 	sub	r4, r4, #8
   11d4c:	e1a00006 	mov	r0, r6
   11d50:	ebffffb7 	bl	11c34 <CScheduler::usSleep(unsigned int) [clone .part.2]>
   11d54:	e1540005 	cmp	r4, r5
   11d58:	8afffff7 	bhi	11d3c <CScheduler::Sleep(unsigned int)+0x18>
   11d5c:	e3041240 	movw	r1, #16960	; 0x4240
   11d60:	e340100f 	movt	r1, #15
   11d64:	e0010491 	mul	r1, r1, r4
   11d68:	e3510000 	cmp	r1, #0
   11d6c:	08bd8070 	popeq	{r4, r5, r6, pc}
   11d70:	e1a00006 	mov	r0, r6
   11d74:	e8bd4070 	pop	{r4, r5, r6, lr}
   11d78:	eaffffad 	b	11c34 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00011d7c <CScheduler::MsSleep(unsigned int)>:
   11d7c:	e3510000 	cmp	r1, #0
   11d80:	012fff1e 	bxeq	lr
   11d84:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   11d88:	e0010193 	mul	r1, r3, r1
   11d8c:	e3510000 	cmp	r1, #0
   11d90:	012fff1e 	bxeq	lr
   11d94:	eaffffa6 	b	11c34 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00011d98 <CScheduler::BlockTask(CTask**)>:
   11d98:	e92d4070 	push	{r4, r5, r6, lr}
   11d9c:	e2515000 	subs	r5, r1, #0
   11da0:	e1a04000 	mov	r4, r0
   11da4:	0a00001e 	beq	11e24 <CScheduler::BlockTask(CTask**)+0x8c>
   11da8:	e5943000 	ldr	r3, [r4]
   11dac:	e5853000 	str	r3, [r5]
   11db0:	e5945000 	ldr	r5, [r4]
   11db4:	e3550000 	cmp	r5, #0
   11db8:	0a000020 	beq	11e40 <CScheduler::BlockTask(CTask**)+0xa8>
   11dbc:	e2856050 	add	r6, r5, #80	; 0x50
   11dc0:	e1a00006 	mov	r0, r6
   11dc4:	ebfff7ad 	bl	fc80 <CSpinLock::Acquire()>
   11dc8:	e5d55004 	ldrb	r5, [r5, #4]
   11dcc:	e1a00006 	mov	r0, r6
   11dd0:	ebfff7c6 	bl	fcf0 <CSpinLock::Release()>
   11dd4:	e6ef5075 	uxtb	r5, r5
   11dd8:	e3550005 	cmp	r5, #5
   11ddc:	0a000005 	beq	11df8 <CScheduler::BlockTask(CTask**)+0x60>
   11de0:	e3041130 	movw	r1, #16688	; 0x4130
   11de4:	e3401001 	movt	r1, #1
   11de8:	e304034c 	movw	r0, #17228	; 0x434c
   11dec:	e3400001 	movt	r0, #1
   11df0:	e3a020eb 	mov	r2, #235	; 0xeb
   11df4:	ebffe9c2 	bl	c504 <assertion_failed>
   11df8:	e5945000 	ldr	r5, [r4]
   11dfc:	e2856050 	add	r6, r5, #80	; 0x50
   11e00:	e1a00006 	mov	r0, r6
   11e04:	ebfff79d 	bl	fc80 <CSpinLock::Acquire()>
   11e08:	e1a00006 	mov	r0, r6
   11e0c:	e3a03001 	mov	r3, #1
   11e10:	e5c53004 	strb	r3, [r5, #4]
   11e14:	ebfff7b5 	bl	fcf0 <CSpinLock::Release()>
   11e18:	e1a00004 	mov	r0, r4
   11e1c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11e20:	eafffe22 	b	116b0 <CScheduler::Yield()>
   11e24:	e3041130 	movw	r1, #16688	; 0x4130
   11e28:	e3401001 	movt	r1, #1
   11e2c:	e30401cc 	movw	r0, #16844	; 0x41cc
   11e30:	e3400001 	movt	r0, #1
   11e34:	e3a020e7 	mov	r2, #231	; 0xe7
   11e38:	ebffe9b1 	bl	c504 <assertion_failed>
   11e3c:	eaffffd9 	b	11da8 <CScheduler::BlockTask(CTask**)+0x10>
   11e40:	e3041130 	movw	r1, #16688	; 0x4130
   11e44:	e3401001 	movt	r1, #1
   11e48:	e3040164 	movw	r0, #16740	; 0x4164
   11e4c:	e3400001 	movt	r0, #1
   11e50:	e3a020ea 	mov	r2, #234	; 0xea
   11e54:	ebffe9aa 	bl	c504 <assertion_failed>
   11e58:	e5945000 	ldr	r5, [r4]
   11e5c:	eaffffd6 	b	11dbc <CScheduler::BlockTask(CTask**)+0x24>

00011e60 <CScheduler::Get()>:
   11e60:	e92d4070 	push	{r4, r5, r6, lr}
   11e64:	e3044694 	movw	r4, #18068	; 0x4694
   11e68:	e3404001 	movt	r4, #1
   11e6c:	e1a00004 	mov	r0, r4
   11e70:	ebfff782 	bl	fc80 <CSpinLock::Acquire()>
   11e74:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   11e78:	e2055003 	and	r5, r5, #3
   11e7c:	e1a00004 	mov	r0, r4
   11e80:	ebfff79a 	bl	fcf0 <CSpinLock::Release()>
   11e84:	e0845105 	add	r5, r4, r5, lsl #2
   11e88:	e5953018 	ldr	r3, [r5, #24]
   11e8c:	e3530000 	cmp	r3, #0
   11e90:	0a00000a 	beq	11ec0 <CScheduler::Get()+0x60>
   11e94:	e3040694 	movw	r0, #18068	; 0x4694
   11e98:	e3400001 	movt	r0, #1
   11e9c:	ebfff777 	bl	fc80 <CSpinLock::Acquire()>
   11ea0:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   11ea4:	e2055003 	and	r5, r5, #3
   11ea8:	e3040694 	movw	r0, #18068	; 0x4694
   11eac:	e3400001 	movt	r0, #1
   11eb0:	e0844105 	add	r4, r4, r5, lsl #2
   11eb4:	ebfff78d 	bl	fcf0 <CSpinLock::Release()>
   11eb8:	e5940018 	ldr	r0, [r4, #24]
   11ebc:	e8bd8070 	pop	{r4, r5, r6, pc}
   11ec0:	e3041130 	movw	r1, #16688	; 0x4130
   11ec4:	e3401001 	movt	r1, #1
   11ec8:	e3040378 	movw	r0, #17272	; 0x4378
   11ecc:	e3400001 	movt	r0, #1
   11ed0:	e3002145 	movw	r2, #325	; 0x145
   11ed4:	ebffe98a 	bl	c504 <assertion_failed>
   11ed8:	eaffffed 	b	11e94 <CScheduler::Get()+0x34>

00011edc <CScheduler::GetCore()>:
   11edc:	e92d4070 	push	{r4, r5, r6, lr}
   11ee0:	e3044694 	movw	r4, #18068	; 0x4694
   11ee4:	e3404001 	movt	r4, #1
   11ee8:	e1a00004 	mov	r0, r4
   11eec:	ebfff763 	bl	fc80 <CSpinLock::Acquire()>
   11ef0:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   11ef4:	e1a00004 	mov	r0, r4
   11ef8:	ebfff77c 	bl	fcf0 <CSpinLock::Release()>
   11efc:	e2050003 	and	r0, r5, #3
   11f00:	e8bd8070 	pop	{r4, r5, r6, pc}

00011f04 <_GLOBAL__sub_I_m_pTask>:
   11f04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11f08:	e3044694 	movw	r4, #18068	; 0x4694
   11f0c:	e3404001 	movt	r4, #1
   11f10:	e1a00004 	mov	r0, r4
   11f14:	e3a01001 	mov	r1, #1
   11f18:	e30464bc 	movw	r6, #17596	; 0x44bc
   11f1c:	e3406001 	movt	r6, #1
   11f20:	e30f5c4c 	movw	r5, #64588	; 0xfc4c
   11f24:	e3405000 	movt	r5, #0
   11f28:	ebfff738 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
   11f2c:	e2847028 	add	r7, r4, #40	; 0x28
   11f30:	e1a02006 	mov	r2, r6
   11f34:	e1a01005 	mov	r1, r5
   11f38:	e1a00004 	mov	r0, r4
   11f3c:	ebffdef4 	bl	9b14 <__aeabi_atexit>
   11f40:	e1a00007 	mov	r0, r7
   11f44:	e3a01001 	mov	r1, #1
   11f48:	ebfff730 	bl	fc10 <CSpinLock::CSpinLock(unsigned int)>
   11f4c:	e1a02006 	mov	r2, r6
   11f50:	e1a01005 	mov	r1, r5
   11f54:	e1a00007 	mov	r0, r7
   11f58:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11f5c:	eaffdeec 	b	9b14 <__aeabi_atexit>

00011f60 <TaskSwitch>:
   11f60:	e8807fff 	stm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   11f64:	e8917fff 	ldm	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   11f68:	e12fff1e 	bx	lr
