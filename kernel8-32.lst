
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea0006d0 	b	9ba8 <sysinit>

00008064 <_start_secondary>:
    8064:	e10f0000 	mrs	r0, CPSR
    8068:	e220001a 	eor	r0, r0, #26
    806c:	e310001f 	tst	r0, #31
    8070:	e3c0001f 	bic	r0, r0, #31
    8074:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8078:	1a000004 	bne	8090 <_start_secondary+0x2c>
    807c:	e3800c01 	orr	r0, r0, #256	; 0x100
    8080:	e28fe00c 	add	lr, pc, #12
    8084:	e16ff000 	msr	SPSR_fsxc, r0
    8088:	e12ef30e 	.word	0xe12ef30e
    808c:	e160006e 	.word	0xe160006e
    8090:	e121f000 	msr	CPSR_c, r0
    8094:	ee100fb0 	mrc	15, 0, r0, cr0, cr0, {5}
    8098:	e2000003 	and	r0, r0, #3
    809c:	e3a01902 	mov	r1, #32768	; 0x8000
    80a0:	e0010190 	mul	r1, r0, r1
    80a4:	f1020011 	cps	#17
    80a8:	e3a0282d 	mov	r2, #2949120	; 0x2d0000
    80ac:	e081d002 	add	sp, r1, r2
    80b0:	f1020012 	cps	#18
    80b4:	e3a0282b 	mov	r2, #2818048	; 0x2b0000
    80b8:	e081d002 	add	sp, r1, r2
    80bc:	f1020017 	cps	#23
    80c0:	e3a02829 	mov	r2, #2686976	; 0x290000
    80c4:	e081d002 	add	sp, r1, r2
    80c8:	f102001b 	cps	#27
    80cc:	e081d002 	add	sp, r1, r2
    80d0:	e3a01802 	mov	r1, #131072	; 0x20000
    80d4:	e0010190 	mul	r1, r0, r1
    80d8:	f102001f 	cps	#31
    80dc:	e3a0298a 	mov	r2, #2260992	; 0x228000
    80e0:	e081d002 	add	sp, r1, r2
    80e4:	ea0006d5 	b	9c40 <sysinit_secondary>

000080e8 <main>:
    80e8:	e92d4010 	push	{r4, lr}
    80ec:	e24ddd73 	sub	sp, sp, #7360	; 0x1cc0
    80f0:	e1a0000d 	mov	r0, sp
    80f4:	eb000011 	bl	8140 <CKernel::CKernel()>
    80f8:	e1a0000d 	mov	r0, sp
    80fc:	eb000050 	bl	8244 <CKernel::Initialize()>
    8100:	e2504000 	subs	r4, r0, #0
    8104:	0a000004 	beq	811c <main+0x34>
    8108:	e1a0000d 	mov	r0, sp
    810c:	eb000078 	bl	82f4 <CKernel::Run()>
    8110:	e3500002 	cmp	r0, #2
    8114:	13a04000 	movne	r4, #0
    8118:	0a000005 	beq	8134 <main+0x4c>
    811c:	eb000680 	bl	9b24 <halt>
    8120:	e1a0000d 	mov	r0, sp
    8124:	eb0000aa 	bl	83d4 <CKernel::~CKernel()>
    8128:	e1a00004 	mov	r0, r4
    812c:	e28ddd73 	add	sp, sp, #7360	; 0x1cc0
    8130:	e8bd8010 	pop	{r4, pc}
    8134:	eb000692 	bl	9b84 <reboot>
    8138:	e3a04001 	mov	r4, #1
    813c:	eafffff7 	b	8120 <main+0x38>

00008140 <CKernel::CKernel()>:
    8140:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8144:	e3a01001 	mov	r1, #1
    8148:	e1a04000 	mov	r4, r0
    814c:	e280a010 	add	sl, r0, #16
    8150:	e284801c 	add	r8, r4, #28
    8154:	eb000623 	bl	99e8 <CMemorySystem::CMemorySystem(int)>
    8158:	e1a0000a 	mov	r0, sl
    815c:	eb0001e9 	bl	8908 <CActLED::CActLED()>
    8160:	e1a00008 	mov	r0, r8
    8164:	eb000b05 	bl	ad80 <CKernelOptions::CKernelOptions()>
    8168:	e2840e85 	add	r0, r4, #2128	; 0x850
    816c:	e280000c 	add	r0, r0, #12
    8170:	e2846e87 	add	r6, r4, #2160	; 0x870
    8174:	eb001195 	bl	c7d0 <CDeviceNameService::CDeviceNameService()>
    8178:	e1a00008 	mov	r0, r8
    817c:	eb000acd 	bl	acb8 <CKernelOptions::GetWidth() const>
    8180:	e2866008 	add	r6, r6, #8
    8184:	e1a05000 	mov	r5, r0
    8188:	e1a00008 	mov	r0, r8
    818c:	eb000acb 	bl	acc0 <CKernelOptions::GetHeight() const>
    8190:	e3a03000 	mov	r3, #0
    8194:	e1a01005 	mov	r1, r5
    8198:	e1a02000 	mov	r2, r0
    819c:	e1a00006 	mov	r0, r6
    81a0:	e2849d67 	add	r9, r4, #6592	; 0x19c0
    81a4:	eb000cac 	bl	b45c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    81a8:	e3a02000 	mov	r2, #0
    81ac:	e2840e8e 	add	r0, r4, #2272	; 0x8e0
    81b0:	e1a01002 	mov	r1, r2
    81b4:	e280000c 	add	r0, r0, #12
    81b8:	e2847b07 	add	r7, r4, #7168	; 0x1c00
    81bc:	eb001396 	bl	d01c <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>
    81c0:	e2890024 	add	r0, r9, #36	; 0x24
    81c4:	e2899028 	add	r9, r9, #40	; 0x28
    81c8:	eb0018d5 	bl	e524 <CExceptionHandler::CExceptionHandler()>
    81cc:	e2877028 	add	r7, r7, #40	; 0x28
    81d0:	e1a00009 	mov	r0, r9
    81d4:	eb0019c6 	bl	e8f4 <CInterruptSystem::CInterruptSystem()>
    81d8:	e2845d71 	add	r5, r4, #7232	; 0x1c40
    81dc:	e1a01009 	mov	r1, r9
    81e0:	e1a00007 	mov	r0, r7
    81e4:	eb0006a2 	bl	9c74 <CTimer::CTimer(CInterruptSystem*)>
    81e8:	e2855038 	add	r5, r5, #56	; 0x38
    81ec:	e1a00008 	mov	r0, r8
    81f0:	eb000ab7 	bl	acd4 <CKernelOptions::GetLogLevel() const>
    81f4:	e1a02007 	mov	r2, r7
    81f8:	e1a01000 	mov	r1, r0
    81fc:	e1a00005 	mov	r0, r5
    8200:	eb001213 	bl	ca54 <CLogger::CLogger(unsigned int, CTimer*)>
    8204:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    8208:	e2800028 	add	r0, r0, #40	; 0x28
    820c:	eb0023e8 	bl	111b4 <CScheduler::CScheduler()>
    8210:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    8214:	e1a03004 	mov	r3, r4
    8218:	e1a02006 	mov	r2, r6
    821c:	e1a01005 	mov	r1, r5
    8220:	e2800034 	add	r0, r0, #52	; 0x34
    8224:	eb000145 	bl	8740 <CoreManager::CoreManager(CLogger*, CScreenDevice*, CMemorySystem*)>
    8228:	e1a0000a 	mov	r0, sl
    822c:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8230:	e3a020c8 	mov	r2, #200	; 0xc8
    8234:	e3a01005 	mov	r1, #5
    8238:	eb0001fa 	bl	8a28 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    823c:	e1a00004 	mov	r0, r4
    8240:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00008244 <CKernel::Initialize()>:
    8244:	e92d4070 	push	{r4, r5, r6, lr}
    8248:	e2804e87 	add	r4, r0, #2160	; 0x870
    824c:	e1a05000 	mov	r5, r0
    8250:	e2844008 	add	r4, r4, #8
    8254:	e1a00004 	mov	r0, r4
    8258:	eb00101f 	bl	c2dc <CScreenDevice::Initialize()>
    825c:	e3500000 	cmp	r0, #0
    8260:	1a000001 	bne	826c <CKernel::Initialize()+0x28>
    8264:	e3a00000 	mov	r0, #0
    8268:	e8bd8070 	pop	{r4, r5, r6, pc}
    826c:	e2850e8e 	add	r0, r5, #2272	; 0x8e0
    8270:	e3a01cc2 	mov	r1, #49664	; 0xc200
    8274:	e3401001 	movt	r1, #1
    8278:	e280000c 	add	r0, r0, #12
    827c:	eb00139a 	bl	d0ec <CSerialDevice::Initialize(unsigned int)>
    8280:	e3500000 	cmp	r0, #0
    8284:	0afffff6 	beq	8264 <CKernel::Initialize()+0x20>
    8288:	e285001c 	add	r0, r5, #28
    828c:	eb000a8d 	bl	acc8 <CKernelOptions::GetLogDevice() const>
    8290:	e1a01000 	mov	r1, r0
    8294:	e2850e85 	add	r0, r5, #2128	; 0x850
    8298:	e3a02000 	mov	r2, #0
    829c:	e280000c 	add	r0, r0, #12
    82a0:	eb0011a6 	bl	c940 <CDeviceNameService::GetDevice(char const*, int)>
    82a4:	e2850d71 	add	r0, r5, #7232	; 0x1c40
    82a8:	e1a01004 	mov	r1, r4
    82ac:	e2800038 	add	r0, r0, #56	; 0x38
    82b0:	eb0012e6 	bl	ce50 <CLogger::Initialize(CDevice*)>
    82b4:	e3500000 	cmp	r0, #0
    82b8:	0affffe9 	beq	8264 <CKernel::Initialize()+0x20>
    82bc:	e2850d67 	add	r0, r5, #6592	; 0x19c0
    82c0:	e2800028 	add	r0, r0, #40	; 0x28
    82c4:	eb00199d 	bl	e940 <CInterruptSystem::Initialize()>
    82c8:	e3500000 	cmp	r0, #0
    82cc:	0affffe4 	beq	8264 <CKernel::Initialize()+0x20>
    82d0:	e2850b07 	add	r0, r5, #7168	; 0x1c00
    82d4:	e2800028 	add	r0, r0, #40	; 0x28
    82d8:	eb0008b0 	bl	a5a0 <CTimer::Initialize()>
    82dc:	e3500000 	cmp	r0, #0
    82e0:	0affffdf 	beq	8264 <CKernel::Initialize()+0x20>
    82e4:	e2850d72 	add	r0, r5, #7296	; 0x1c80
    82e8:	e2800034 	add	r0, r0, #52	; 0x34
    82ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    82f0:	ea001d75 	b	f8cc <CMultiCoreSupport::Initialize()>

000082f4 <CKernel::Run()>:
    82f4:	e92d4070 	push	{r4, r5, r6, lr}
    82f8:	e2805d71 	add	r5, r0, #7232	; 0x1c40
    82fc:	e3a02003 	mov	r2, #3
    8300:	e2855038 	add	r5, r5, #56	; 0x38
    8304:	e24dd008 	sub	sp, sp, #8
    8308:	e1a04000 	mov	r4, r0
    830c:	e3013c54 	movw	r3, #7252	; 0x1c54
    8310:	e3403001 	movt	r3, #1
    8314:	e1a00005 	mov	r0, r5
    8318:	e3011c4c 	movw	r1, #7244	; 0x1c4c
    831c:	e3401001 	movt	r1, #1
    8320:	eb0012be 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8324:	e3a0006c 	mov	r0, #108	; 0x6c
    8328:	eb0005f6 	bl	9b08 <operator new(unsigned int)>
    832c:	e3a01031 	mov	r1, #49	; 0x31
    8330:	eb00012c 	bl	87e8 <myTask::myTask(char)>
    8334:	e3a0006c 	mov	r0, #108	; 0x6c
    8338:	eb0005f2 	bl	9b08 <operator new(unsigned int)>
    833c:	e3a01032 	mov	r1, #50	; 0x32
    8340:	eb000128 	bl	87e8 <myTask::myTask(char)>
    8344:	e3a0006c 	mov	r0, #108	; 0x6c
    8348:	eb0005ee 	bl	9b08 <operator new(unsigned int)>
    834c:	e3a01033 	mov	r1, #51	; 0x33
    8350:	eb000124 	bl	87e8 <myTask::myTask(char)>
    8354:	e3a0006c 	mov	r0, #108	; 0x6c
    8358:	eb0005ea 	bl	9b08 <operator new(unsigned int)>
    835c:	e3a01034 	mov	r1, #52	; 0x34
    8360:	eb000120 	bl	87e8 <myTask::myTask(char)>
    8364:	e3a0006c 	mov	r0, #108	; 0x6c
    8368:	eb0005e6 	bl	9b08 <operator new(unsigned int)>
    836c:	e3a01035 	mov	r1, #53	; 0x35
    8370:	eb00011c 	bl	87e8 <myTask::myTask(char)>
    8374:	e3a0006c 	mov	r0, #108	; 0x6c
    8378:	eb0005e2 	bl	9b08 <operator new(unsigned int)>
    837c:	e3a01036 	mov	r1, #54	; 0x36
    8380:	e2846d72 	add	r6, r4, #7296	; 0x1c80
    8384:	eb000117 	bl	87e8 <myTask::myTask(char)>
    8388:	eb0008ef 	bl	a74c <CTimer::Get()>
    838c:	e3a00064 	mov	r0, #100	; 0x64
    8390:	e2866028 	add	r6, r6, #40	; 0x28
    8394:	e2844a01 	add	r4, r4, #4096	; 0x1000
    8398:	eb00089f 	bl	a61c <CTimer::SimpleMsDelay(unsigned int)>
    839c:	e5942ca8 	ldr	r2, [r4, #3240]	; 0xca8
    83a0:	e1a00005 	mov	r0, r5
    83a4:	e58d2000 	str	r2, [sp]
    83a8:	e3013c78 	movw	r3, #7288	; 0x1c78
    83ac:	e3403001 	movt	r3, #1
    83b0:	e3a02003 	mov	r2, #3
    83b4:	e3011c4c 	movw	r1, #7244	; 0x1c4c
    83b8:	e3401001 	movt	r1, #1
    83bc:	eb001297 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    83c0:	e1a00006 	mov	r0, r6
    83c4:	eb00254d 	bl	11900 <CScheduler::startFromSecondary()>
    83c8:	eafffff3 	b	839c <CKernel::Run()+0xa8>

000083cc <CKernel::TimerHandler(unsigned int, void*, void*)>:
    83cc:	e3a03605 	mov	r3, #5242880	; 0x500000
    83d0:	e12fff13 	bx	r3

000083d4 <CKernel::~CKernel()>:
    83d4:	e92d4010 	push	{r4, lr}
    83d8:	e1a04000 	mov	r4, r0
    83dc:	e2800d72 	add	r0, r0, #7296	; 0x1c80
    83e0:	e2800034 	add	r0, r0, #52	; 0x34
    83e4:	eb000069 	bl	8590 <CoreManager::~CoreManager()>
    83e8:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    83ec:	e2800028 	add	r0, r0, #40	; 0x28
    83f0:	eb00240b 	bl	11424 <CScheduler::~CScheduler()>
    83f4:	e2840d71 	add	r0, r4, #7232	; 0x1c40
    83f8:	e2800038 	add	r0, r0, #56	; 0x38
    83fc:	eb0011a7 	bl	caa0 <CLogger::~CLogger()>
    8400:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8404:	e2800028 	add	r0, r0, #40	; 0x28
    8408:	eb00063c 	bl	9d00 <CTimer::~CTimer()>
    840c:	e2840d67 	add	r0, r4, #6592	; 0x19c0
    8410:	e2800028 	add	r0, r0, #40	; 0x28
    8414:	eb001944 	bl	e92c <CInterruptSystem::~CInterruptSystem()>
    8418:	e2840d67 	add	r0, r4, #6592	; 0x19c0
    841c:	e2800024 	add	r0, r0, #36	; 0x24
    8420:	eb001863 	bl	e5b4 <CExceptionHandler::~CExceptionHandler()>
    8424:	e2840e8e 	add	r0, r4, #2272	; 0x8e0
    8428:	e280000c 	add	r0, r0, #12
    842c:	eb001496 	bl	d68c <CSerialDevice::~CSerialDevice()>
    8430:	e2840e87 	add	r0, r4, #2160	; 0x870
    8434:	e2800008 	add	r0, r0, #8
    8438:	eb000bb8 	bl	b320 <CScreenDevice::~CScreenDevice()>
    843c:	e2840e85 	add	r0, r4, #2128	; 0x850
    8440:	e280000c 	add	r0, r0, #12
    8444:	eb0010f5 	bl	c820 <CDeviceNameService::~CDeviceNameService()>
    8448:	e284001c 	add	r0, r4, #28
    844c:	eb000a14 	bl	aca4 <CKernelOptions::~CKernelOptions()>
    8450:	e2840010 	add	r0, r4, #16
    8454:	eb000106 	bl	8874 <CActLED::~CActLED()>
    8458:	e1a00004 	mov	r0, r4
    845c:	eb0004fd 	bl	9858 <CMemorySystem::~CMemorySystem()>
    8460:	e1a00004 	mov	r0, r4
    8464:	e8bd8010 	pop	{r4, pc}

00008468 <ContextSwitch>:
    8468:	e8807fff 	stm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    846c:	e8917fff 	ldm	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    8470:	e12fff1e 	bx	lr

00008474 <stub(void (*)(), ThreadManager*)>:
    8474:	e92d4010 	push	{r4, lr}
    8478:	e1a04001 	mov	r4, r1
    847c:	e12fff30 	blx	r0
    8480:	e5943008 	ldr	r3, [r4, #8]
    8484:	e594200c 	ldr	r2, [r4, #12]
    8488:	e5842008 	str	r2, [r4, #8]
    848c:	e5930000 	ldr	r0, [r3]
    8490:	e5921000 	ldr	r1, [r2]
    8494:	e2800004 	add	r0, r0, #4
    8498:	e584300c 	str	r3, [r4, #12]
    849c:	e2811004 	add	r1, r1, #4
    84a0:	e8bd4010 	pop	{r4, lr}
    84a4:	eaffffef 	b	8468 <ContextSwitch>

000084a8 <ThreadManager::ThreadManager()>:
    84a8:	e92d4070 	push	{r4, r5, r6, lr}
    84ac:	e1a04000 	mov	r4, r0
    84b0:	e3a00048 	mov	r0, #72	; 0x48
    84b4:	eb000593 	bl	9b08 <operator new(unsigned int)>
    84b8:	e3a02048 	mov	r2, #72	; 0x48
    84bc:	e3a01000 	mov	r1, #0
    84c0:	e1a05000 	mov	r5, r0
    84c4:	eb0008ae 	bl	a784 <memset>
    84c8:	e5845000 	str	r5, [r4]
    84cc:	e5844008 	str	r4, [r4, #8]
    84d0:	e1a00004 	mov	r0, r4
    84d4:	e8bd8070 	pop	{r4, r5, r6, pc}

000084d8 <ThreadManager::thread_create(void (*)(), ThreadManager*)>:
    84d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    84dc:	e3a00008 	mov	r0, #8
    84e0:	e1a08001 	mov	r8, r1
    84e4:	e1a07002 	mov	r7, r2
    84e8:	eb000586 	bl	9b08 <operator new(unsigned int)>
    84ec:	e1a05000 	mov	r5, r0
    84f0:	e3a06000 	mov	r6, #0
    84f4:	e3a00048 	mov	r0, #72	; 0x48
    84f8:	e5856000 	str	r6, [r5]
    84fc:	e5856004 	str	r6, [r5, #4]
    8500:	eb000580 	bl	9b08 <operator new(unsigned int)>
    8504:	e1a01006 	mov	r1, r6
    8508:	e1a04000 	mov	r4, r0
    850c:	e3a02048 	mov	r2, #72	; 0x48
    8510:	eb00089b 	bl	a784 <memset>
    8514:	e3a03601 	mov	r3, #1048576	; 0x100000
    8518:	e1a00003 	mov	r0, r3
    851c:	e5843040 	str	r3, [r4, #64]	; 0x40
    8520:	e5854000 	str	r4, [r5]
    8524:	eb000578 	bl	9b0c <operator new[](unsigned int)>
    8528:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    852c:	e1a01000 	mov	r1, r0
    8530:	e3082474 	movw	r2, #33908	; 0x8474
    8534:	e3402000 	movt	r2, #0
    8538:	e0813003 	add	r3, r1, r3
    853c:	e584203c 	str	r2, [r4, #60]	; 0x3c
    8540:	e1a00005 	mov	r0, r5
    8544:	e3a02001 	mov	r2, #1
    8548:	e5848004 	str	r8, [r4, #4]
    854c:	e5841044 	str	r1, [r4, #68]	; 0x44
    8550:	e5847008 	str	r7, [r4, #8]
    8554:	e5843038 	str	r3, [r4, #56]	; 0x38
    8558:	e5c42000 	strb	r2, [r4]
    855c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008560 <ThreadManager::thread_switch(Thread*, Thread*)>:
    8560:	e1a03000 	mov	r3, r0
    8564:	e592c000 	ldr	ip, [r2]
    8568:	e5910000 	ldr	r0, [r1]
    856c:	e583100c 	str	r1, [r3, #12]
    8570:	e2800004 	add	r0, r0, #4
    8574:	e5832008 	str	r2, [r3, #8]
    8578:	e28c1004 	add	r1, ip, #4
    857c:	eaffffb9 	b	8468 <ContextSwitch>

00008580 <ThreadManager::getCurrentThread()>:
    8580:	e5900008 	ldr	r0, [r0, #8]
    8584:	e12fff1e 	bx	lr

00008588 <ThreadManager::getParentThread()>:
    8588:	e590000c 	ldr	r0, [r0, #12]
    858c:	e12fff1e 	bx	lr

00008590 <CoreManager::~CoreManager()>:
    8590:	e92d4010 	push	{r4, lr}
    8594:	e3a03000 	mov	r3, #0
    8598:	e1a04000 	mov	r4, r0
    859c:	e5803008 	str	r3, [r0, #8]
    85a0:	e3012ca4 	movw	r2, #7332	; 0x1ca4
    85a4:	e3402001 	movt	r2, #1
    85a8:	e5802000 	str	r2, [r0]
    85ac:	e580300c 	str	r3, [r0, #12]
    85b0:	eb001cb6 	bl	f890 <CMultiCoreSupport::~CMultiCoreSupport()>
    85b4:	e1a00004 	mov	r0, r4
    85b8:	e8bd8010 	pop	{r4, pc}

000085bc <CoreManager::~CoreManager()>:
    85bc:	e92d4010 	push	{r4, lr}
    85c0:	e3a03000 	mov	r3, #0
    85c4:	e1a04000 	mov	r4, r0
    85c8:	e5803008 	str	r3, [r0, #8]
    85cc:	e3012ca4 	movw	r2, #7332	; 0x1ca4
    85d0:	e3402001 	movt	r2, #1
    85d4:	e5802000 	str	r2, [r0]
    85d8:	e580300c 	str	r3, [r0, #12]
    85dc:	eb001cab 	bl	f890 <CMultiCoreSupport::~CMultiCoreSupport()>
    85e0:	e1a00004 	mov	r0, r4
    85e4:	e3a01010 	mov	r1, #16
    85e8:	eb00054a 	bl	9b18 <operator delete(void*, unsigned int)>
    85ec:	e1a00004 	mov	r0, r4
    85f0:	e8bd8010 	pop	{r4, pc}

000085f4 <CoreManager::Run(unsigned int)>:
    85f4:	e92d4030 	push	{r4, r5, lr}
    85f8:	e3a02003 	mov	r2, #3
    85fc:	e1a04000 	mov	r4, r0
    8600:	e24dd014 	sub	sp, sp, #20
    8604:	e1a05001 	mov	r5, r1
    8608:	e3013cb4 	movw	r3, #7348	; 0x1cb4
    860c:	e3403001 	movt	r3, #1
    8610:	e58d1000 	str	r1, [sp]
    8614:	e3011cd8 	movw	r1, #7384	; 0x1cd8
    8618:	e3401001 	movt	r1, #1
    861c:	e590000c 	ldr	r0, [r0, #12]
    8620:	eb0011fe 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8624:	e28d0008 	add	r0, sp, #8
    8628:	eb0022e1 	bl	111b4 <CScheduler::CScheduler()>
    862c:	e28d0008 	add	r0, sp, #8
    8630:	eb0024b2 	bl	11900 <CScheduler::startFromSecondary()>
    8634:	e594000c 	ldr	r0, [r4, #12]
    8638:	e3a02003 	mov	r2, #3
    863c:	e58d5000 	str	r5, [sp]
    8640:	e3013ce4 	movw	r3, #7396	; 0x1ce4
    8644:	e3403001 	movt	r3, #1
    8648:	e3011cd8 	movw	r1, #7384	; 0x1cd8
    864c:	e3401001 	movt	r1, #1
    8650:	eb0011f2 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8654:	e28d0008 	add	r0, sp, #8
    8658:	eb00241f 	bl	116dc <CScheduler::Yield()>
    865c:	eafffff4 	b	8634 <CoreManager::Run(unsigned int)+0x40>

00008660 <CoreManager::IPIHandler(unsigned int, unsigned int)>:
    8660:	e92d4030 	push	{r4, r5, lr}
    8664:	e3510003 	cmp	r1, #3
    8668:	e1a04001 	mov	r4, r1
    866c:	e24dd00c 	sub	sp, sp, #12
    8670:	e1a05002 	mov	r5, r2
    8674:	8a00001c 	bhi	86ec <CoreManager::IPIHandler(unsigned int, unsigned int)+0x8c>
    8678:	e355001f 	cmp	r5, #31
    867c:	8a00000a 	bhi	86ac <CoreManager::IPIHandler(unsigned int, unsigned int)+0x4c>
    8680:	e3550000 	cmp	r5, #0
    8684:	0a00001f 	beq	8708 <CoreManager::IPIHandler(unsigned int, unsigned int)+0xa8>
    8688:	e355000a 	cmp	r5, #10
    868c:	1a00000c 	bne	86c4 <CoreManager::IPIHandler(unsigned int, unsigned int)+0x64>
    8690:	e1a04204 	lsl	r4, r4, #4
    8694:	e2844101 	add	r4, r4, #1073741824	; 0x40000000
    8698:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    869c:	e3530000 	cmp	r3, #0
    86a0:	1a000023 	bne	8734 <CoreManager::IPIHandler(unsigned int, unsigned int)+0xd4>
    86a4:	e28dd00c 	add	sp, sp, #12
    86a8:	e8bd8030 	pop	{r4, r5, pc}
    86ac:	e3011d00 	movw	r1, #7424	; 0x1d00
    86b0:	e3401001 	movt	r1, #1
    86b4:	e3010d20 	movw	r0, #7456	; 0x1d20
    86b8:	e3400001 	movt	r0, #1
    86bc:	e3a02030 	mov	r2, #48	; 0x30
    86c0:	eb000f92 	bl	c510 <assertion_failed>
    86c4:	eb001107 	bl	cae8 <CLogger::Get()>
    86c8:	e58d4000 	str	r4, [sp]
    86cc:	e3a02004 	mov	r2, #4
    86d0:	e3013d68 	movw	r3, #7528	; 0x1d68
    86d4:	e3403001 	movt	r3, #1
    86d8:	e3011d5c 	movw	r1, #7516	; 0x1d5c
    86dc:	e3401001 	movt	r1, #1
    86e0:	eb0011ce 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    86e4:	e28dd00c 	add	sp, sp, #12
    86e8:	e8bd8030 	pop	{r4, r5, pc}
    86ec:	e3011d00 	movw	r1, #7424	; 0x1d00
    86f0:	e3401001 	movt	r1, #1
    86f4:	e3010d10 	movw	r0, #7440	; 0x1d10
    86f8:	e3400001 	movt	r0, #1
    86fc:	e3a0202f 	mov	r2, #47	; 0x2f
    8700:	eb000f82 	bl	c510 <assertion_failed>
    8704:	eaffffdb 	b	8678 <CoreManager::IPIHandler(unsigned int, unsigned int)+0x18>
    8708:	eb0010f6 	bl	cae8 <CLogger::Get()>
    870c:	e58d4000 	str	r4, [sp]
    8710:	e3a02004 	mov	r2, #4
    8714:	e3013d2c 	movw	r3, #7468	; 0x1d2c
    8718:	e3403001 	movt	r3, #1
    871c:	e3011d5c 	movw	r1, #7516	; 0x1d5c
    8720:	e3401001 	movt	r1, #1
    8724:	eb0011bd 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8728:	e28dd00c 	add	sp, sp, #12
    872c:	e8bd4030 	pop	{r4, r5, lr}
    8730:	ea0004fb 	b	9b24 <halt>
    8734:	e28dd00c 	add	sp, sp, #12
    8738:	e8bd4030 	pop	{r4, r5, lr}
    873c:	e12fff13 	bx	r3

00008740 <CoreManager::CoreManager(CLogger*, CScreenDevice*, CMemorySystem*)>:
    8740:	e92d4070 	push	{r4, r5, r6, lr}
    8744:	e1a04000 	mov	r4, r0
    8748:	e1a05001 	mov	r5, r1
    874c:	e1a01003 	mov	r1, r3
    8750:	e1a06002 	mov	r6, r2
    8754:	eb001c39 	bl	f840 <CMultiCoreSupport::CMultiCoreSupport(CMemorySystem*)>
    8758:	e3013ca4 	movw	r3, #7332	; 0x1ca4
    875c:	e3403001 	movt	r3, #1
    8760:	e5843000 	str	r3, [r4]
    8764:	e5846008 	str	r6, [r4, #8]
    8768:	e1a00004 	mov	r0, r4
    876c:	e584500c 	str	r5, [r4, #12]
    8770:	e8bd8070 	pop	{r4, r5, r6, pc}

00008774 <CoreManager::AssignTask(unsigned int, void (*)())>:
    8774:	e3510003 	cmp	r1, #3
    8778:	91a01201 	lslls	r1, r1, #4
    877c:	93e03000 	mvnls	r3, #0
    8780:	92811101 	addls	r1, r1, #1073741824	; 0x40000000
    8784:	958130cc 	strls	r3, [r1, #204]	; 0xcc
    8788:	9581208c 	strls	r2, [r1, #140]	; 0x8c
    878c:	e12fff1e 	bx	lr

00008790 <CoreManager::WakeUp(unsigned int)>:
    8790:	e1a00001 	mov	r0, r1
    8794:	e3a0100a 	mov	r1, #10
    8798:	ea001c8c 	b	f9d0 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)>

0000879c <myTask::~myTask()>:
    879c:	e92d4010 	push	{r4, lr}
    87a0:	e1a04000 	mov	r4, r0
    87a4:	e3013d94 	movw	r3, #7572	; 0x1d94
    87a8:	e3403001 	movt	r3, #1
    87ac:	e5803000 	str	r3, [r0]
    87b0:	eb0021e5 	bl	10f4c <CTask::~CTask()>
    87b4:	e1a00004 	mov	r0, r4
    87b8:	e8bd8010 	pop	{r4, pc}

000087bc <myTask::~myTask()>:
    87bc:	e92d4010 	push	{r4, lr}
    87c0:	e1a04000 	mov	r4, r0
    87c4:	e3013d94 	movw	r3, #7572	; 0x1d94
    87c8:	e3403001 	movt	r3, #1
    87cc:	e5803000 	str	r3, [r0]
    87d0:	eb0021dd 	bl	10f4c <CTask::~CTask()>
    87d4:	e1a00004 	mov	r0, r4
    87d8:	e3a0106c 	mov	r1, #108	; 0x6c
    87dc:	eb0004cd 	bl	9b18 <operator delete(void*, unsigned int)>
    87e0:	e1a00004 	mov	r0, r4
    87e4:	e8bd8010 	pop	{r4, pc}

000087e8 <myTask::myTask(char)>:
    87e8:	e92d4070 	push	{r4, r5, r6, lr}
    87ec:	e1a04000 	mov	r4, r0
    87f0:	e1a05001 	mov	r5, r1
    87f4:	e3a01901 	mov	r1, #16384	; 0x4000
    87f8:	eb00223f 	bl	110fc <CTask::CTask(unsigned int)>
    87fc:	e3013d94 	movw	r3, #7572	; 0x1d94
    8800:	e3403001 	movt	r3, #1
    8804:	e5843000 	str	r3, [r4]
    8808:	e5c45068 	strb	r5, [r4, #104]	; 0x68
    880c:	e1a00004 	mov	r0, r4
    8810:	e8bd8070 	pop	{r4, r5, r6, pc}

00008814 <myTask::foo()>:
    8814:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8818:	e1a05000 	mov	r5, r0
    881c:	e24dd00c 	sub	sp, sp, #12
    8820:	eb0007c9 	bl	a74c <CTimer::Get()>
    8824:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    8828:	eb00077b 	bl	a61c <CTimer::SimpleMsDelay(unsigned int)>
    882c:	eb0010ad 	bl	cae8 <CLogger::Get()>
    8830:	e1a04000 	mov	r4, r0
    8834:	eb0024e0 	bl	11bbc <CScheduler::GetCore()>
    8838:	e1d526d8 	ldrsb	r2, [r5, #104]	; 0x68
    883c:	e58d0000 	str	r0, [sp]
    8840:	e3013da0 	movw	r3, #7584	; 0x1da0
    8844:	e3403001 	movt	r3, #1
    8848:	e1a00004 	mov	r0, r4
    884c:	e58d2004 	str	r2, [sp, #4]
    8850:	e3011dbc 	movw	r1, #7612	; 0x1dbc
    8854:	e3401001 	movt	r1, #1
    8858:	e3a02003 	mov	r2, #3
    885c:	eb00116f 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8860:	eb0024b6 	bl	11b40 <CScheduler::Get()>
    8864:	eb00239c 	bl	116dc <CScheduler::Yield()>
    8868:	eaffffec 	b	8820 <myTask::foo()+0xc>

0000886c <myTask::Run()>:
    886c:	e92d4010 	push	{r4, lr}
    8870:	ebffffe7 	bl	8814 <myTask::foo()>

00008874 <CActLED::~CActLED()>:
    8874:	e3043078 	movw	r3, #16504	; 0x4078
    8878:	e3403001 	movt	r3, #1
    887c:	e3a02000 	mov	r2, #0
    8880:	e5832000 	str	r2, [r3]
    8884:	e12fff1e 	bx	lr

00008888 <CActLED::On()>:
    8888:	e5903000 	ldr	r3, [r0]
    888c:	e3530000 	cmp	r3, #0
    8890:	0a000004 	beq	88a8 <CActLED::On()+0x20>
    8894:	e5901008 	ldr	r1, [r0, #8]
    8898:	e1a00003 	mov	r0, r3
    889c:	e2911000 	adds	r1, r1, #0
    88a0:	13a01001 	movne	r1, #1
    88a4:	ea0000f2 	b	8c74 <CGPIOPin::Write(unsigned int)>
    88a8:	e5903004 	ldr	r3, [r0, #4]
    88ac:	e3530000 	cmp	r3, #0
    88b0:	012fff1e 	bxeq	lr
    88b4:	e5901008 	ldr	r1, [r0, #8]
    88b8:	e1a00003 	mov	r0, r3
    88bc:	e2911000 	adds	r1, r1, #0
    88c0:	13a01001 	movne	r1, #1
    88c4:	ea001a4a 	b	f1f4 <CVirtualGPIOPin::Write(unsigned int)>

000088c8 <CActLED::Off()>:
    88c8:	e5903000 	ldr	r3, [r0]
    88cc:	e3530000 	cmp	r3, #0
    88d0:	0a000004 	beq	88e8 <CActLED::Off()+0x20>
    88d4:	e5901008 	ldr	r1, [r0, #8]
    88d8:	e1a00003 	mov	r0, r3
    88dc:	e16f1f11 	clz	r1, r1
    88e0:	e1a012a1 	lsr	r1, r1, #5
    88e4:	ea0000e2 	b	8c74 <CGPIOPin::Write(unsigned int)>
    88e8:	e5903004 	ldr	r3, [r0, #4]
    88ec:	e3530000 	cmp	r3, #0
    88f0:	012fff1e 	bxeq	lr
    88f4:	e5901008 	ldr	r1, [r0, #8]
    88f8:	e1a00003 	mov	r0, r3
    88fc:	e16f1f11 	clz	r1, r1
    8900:	e1a012a1 	lsr	r1, r1, #5
    8904:	ea001a3a 	b	f1f4 <CVirtualGPIOPin::Write(unsigned int)>

00008908 <CActLED::CActLED()>:
    8908:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    890c:	e1a04000 	mov	r4, r0
    8910:	e3043078 	movw	r3, #16504	; 0x4078
    8914:	e3403001 	movt	r3, #1
    8918:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    891c:	e3a05000 	mov	r5, #0
    8920:	e28d001c 	add	r0, sp, #28
    8924:	e5845000 	str	r5, [r4]
    8928:	e5845004 	str	r5, [r4, #4]
    892c:	e5834000 	str	r4, [r3]
    8930:	eb000054 	bl	8a88 <CBcmPropertyTags::CBcmPropertyTags()>
    8934:	e58d5000 	str	r5, [sp]
    8938:	e28d001c 	add	r0, sp, #28
    893c:	e3a01002 	mov	r1, #2
    8940:	e3401001 	movt	r1, #1
    8944:	e3a03010 	mov	r3, #16
    8948:	e28d200c 	add	r2, sp, #12
    894c:	eb000095 	bl	8ba8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8950:	e1500005 	cmp	r0, r5
    8954:	0a000011 	beq	89a0 <CActLED::CActLED()+0x98>
    8958:	e59d3018 	ldr	r3, [sp, #24]
    895c:	e3130502 	tst	r3, #8388608	; 0x800000
    8960:	1a000013 	bne	89b4 <CActLED::CActLED()+0xac>
    8964:	e6ff3073 	uxth	r3, r3
    8968:	e353000f 	cmp	r3, #15
    896c:	83a06001 	movhi	r6, #1
    8970:	9a000021 	bls	89fc <CActLED::CActLED()+0xf4>
    8974:	e3a00028 	mov	r0, #40	; 0x28
    8978:	eb000462 	bl	9b08 <operator new(unsigned int)>
    897c:	e3a03000 	mov	r3, #0
    8980:	e3a02001 	mov	r2, #1
    8984:	e3a0102f 	mov	r1, #47	; 0x2f
    8988:	e1a05000 	mov	r5, r0
    898c:	eb000326 	bl	962c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8990:	e5845000 	str	r5, [r4]
    8994:	e5846008 	str	r6, [r4, #8]
    8998:	e1a00004 	mov	r0, r4
    899c:	ebffffc9 	bl	88c8 <CActLED::Off()>
    89a0:	e28d001c 	add	r0, sp, #28
    89a4:	eb00003d 	bl	8aa0 <CBcmPropertyTags::~CBcmPropertyTags()>
    89a8:	e1a00004 	mov	r0, r4
    89ac:	e28dd03c 	add	sp, sp, #60	; 0x3c
    89b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    89b4:	e7e73253 	ubfx	r3, r3, #4, #8
    89b8:	e3530001 	cmp	r3, #1
    89bc:	9a00000e 	bls	89fc <CActLED::CActLED()+0xf4>
    89c0:	e353000c 	cmp	r3, #12
    89c4:	13530009 	cmpne	r3, #9
    89c8:	03a06001 	moveq	r6, #1
    89cc:	13a06000 	movne	r6, #0
    89d0:	e3530008 	cmp	r3, #8
    89d4:	12266001 	eorne	r6, r6, #1
    89d8:	1affffe5 	bne	8974 <CActLED::CActLED()+0x6c>
    89dc:	e3a00010 	mov	r0, #16
    89e0:	e2266001 	eor	r6, r6, #1
    89e4:	eb000447 	bl	9b08 <operator new(unsigned int)>
    89e8:	e1a01005 	mov	r1, r5
    89ec:	e1a07000 	mov	r7, r0
    89f0:	eb001a2e 	bl	f2b0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    89f4:	e5847004 	str	r7, [r4, #4]
    89f8:	eaffffe5 	b	8994 <CActLED::CActLED()+0x8c>
    89fc:	e3a00028 	mov	r0, #40	; 0x28
    8a00:	eb000440 	bl	9b08 <operator new(unsigned int)>
    8a04:	e3a03000 	mov	r3, #0
    8a08:	e3a02001 	mov	r2, #1
    8a0c:	e3a01010 	mov	r1, #16
    8a10:	e1a05000 	mov	r5, r0
    8a14:	eb000304 	bl	962c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8a18:	e3a03000 	mov	r3, #0
    8a1c:	e5845000 	str	r5, [r4]
    8a20:	e5843008 	str	r3, [r4, #8]
    8a24:	eaffffdb 	b	8998 <CActLED::CActLED()+0x90>

00008a28 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8a28:	e3510000 	cmp	r1, #0
    8a2c:	012fff1e 	bxeq	lr
    8a30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a34:	e1a08003 	mov	r8, r3
    8a38:	e1a07002 	mov	r7, r2
    8a3c:	e1a05000 	mov	r5, r0
    8a40:	e1a06001 	mov	r6, r1
    8a44:	e3a04001 	mov	r4, #1
    8a48:	e1a00005 	mov	r0, r5
    8a4c:	e2844001 	add	r4, r4, #1
    8a50:	ebffff8c 	bl	8888 <CActLED::On()>
    8a54:	e1a00007 	mov	r0, r7
    8a58:	eb0006ef 	bl	a61c <CTimer::SimpleMsDelay(unsigned int)>
    8a5c:	e1a00005 	mov	r0, r5
    8a60:	ebffff98 	bl	88c8 <CActLED::Off()>
    8a64:	e1a00008 	mov	r0, r8
    8a68:	eb0006eb 	bl	a61c <CTimer::SimpleMsDelay(unsigned int)>
    8a6c:	e1560004 	cmp	r6, r4
    8a70:	2afffff4 	bcs	8a48 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
    8a74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008a78 <CActLED::Get()>:
    8a78:	e3043078 	movw	r3, #16504	; 0x4078
    8a7c:	e3403001 	movt	r3, #1
    8a80:	e5930000 	ldr	r0, [r3]
    8a84:	e12fff1e 	bx	lr

00008a88 <CBcmPropertyTags::CBcmPropertyTags()>:
    8a88:	e92d4010 	push	{r4, lr}
    8a8c:	e3a01008 	mov	r1, #8
    8a90:	e1a04000 	mov	r4, r0
    8a94:	eb001f6b 	bl	10848 <CBcmMailBox::CBcmMailBox(unsigned int)>
    8a98:	e1a00004 	mov	r0, r4
    8a9c:	e8bd8010 	pop	{r4, pc}

00008aa0 <CBcmPropertyTags::~CBcmPropertyTags()>:
    8aa0:	e92d4010 	push	{r4, lr}
    8aa4:	e1a04000 	mov	r4, r0
    8aa8:	eb001f6d 	bl	10864 <CBcmMailBox::~CBcmMailBox()>
    8aac:	e1a00004 	mov	r0, r4
    8ab0:	e8bd8010 	pop	{r4, pc}

00008ab4 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    8ab4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8ab8:	e2519000 	subs	r9, r1, #0
    8abc:	e1a0a000 	mov	sl, r0
    8ac0:	e1a04002 	mov	r4, r2
    8ac4:	0a000030 	beq	8b8c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
    8ac8:	e354000f 	cmp	r4, #15
    8acc:	9a000027 	bls	8b70 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
    8ad0:	e284800c 	add	r8, r4, #12
    8ad4:	e3180003 	tst	r8, #3
    8ad8:	1a00001d 	bne	8b54 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    8adc:	e3a06501 	mov	r6, #4194304	; 0x400000
    8ae0:	e3a05008 	mov	r5, #8
    8ae4:	e3405040 	movt	r5, #64	; 0x40
    8ae8:	e3a07000 	mov	r7, #0
    8aec:	e1a00005 	mov	r0, r5
    8af0:	e5868000 	str	r8, [r6]
    8af4:	e1a02004 	mov	r2, r4
    8af8:	e5867004 	str	r7, [r6, #4]
    8afc:	e1a01009 	mov	r1, r9
    8b00:	eb000838 	bl	abe8 <memcpy>
    8b04:	e7857004 	str	r7, [r5, r4]
    8b08:	f57ff04f 	dsb	sy
    8b0c:	e1a01007 	mov	r1, r7
    8b10:	e1a0000a 	mov	r0, sl
    8b14:	e34c1040 	movt	r1, #49216	; 0xc040
    8b18:	eb001f87 	bl	1093c <CBcmMailBox::WriteRead(unsigned int)>
    8b1c:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    8b20:	0a000001 	beq	8b2c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    8b24:	e3a00000 	mov	r0, #0
    8b28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8b2c:	f57ff05f 	dmb	sy
    8b30:	e5963004 	ldr	r3, [r6, #4]
    8b34:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    8b38:	1afffff9 	bne	8b24 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    8b3c:	e1a02004 	mov	r2, r4
    8b40:	e1a01005 	mov	r1, r5
    8b44:	e1a00009 	mov	r0, r9
    8b48:	eb000826 	bl	abe8 <memcpy>
    8b4c:	e3a00001 	mov	r0, #1
    8b50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8b54:	e3011dc0 	movw	r1, #7616	; 0x1dc0
    8b58:	e3401001 	movt	r1, #1
    8b5c:	e3010e0c 	movw	r0, #7692	; 0x1e0c
    8b60:	e3400001 	movt	r0, #1
    8b64:	e3a02051 	mov	r2, #81	; 0x51
    8b68:	eb000e68 	bl	c510 <assertion_failed>
    8b6c:	eaffffda 	b	8adc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    8b70:	e3011dc0 	movw	r1, #7616	; 0x1dc0
    8b74:	e3401001 	movt	r1, #1
    8b78:	e3010de0 	movw	r0, #7648	; 0x1de0
    8b7c:	e3400001 	movt	r0, #1
    8b80:	e3a0204f 	mov	r2, #79	; 0x4f
    8b84:	eb000e61 	bl	c510 <assertion_failed>
    8b88:	eaffffd0 	b	8ad0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    8b8c:	e3011dc0 	movw	r1, #7616	; 0x1dc0
    8b90:	e3401001 	movt	r1, #1
    8b94:	e3010dd4 	movw	r0, #7636	; 0x1dd4
    8b98:	e3400001 	movt	r0, #1
    8b9c:	e3a0204e 	mov	r2, #78	; 0x4e
    8ba0:	eb000e5a 	bl	c510 <assertion_failed>
    8ba4:	eaffffc7 	b	8ac8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00008ba8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    8ba8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8bac:	e2524000 	subs	r4, r2, #0
    8bb0:	e1a07000 	mov	r7, r0
    8bb4:	e1a08001 	mov	r8, r1
    8bb8:	e1a05003 	mov	r5, r3
    8bbc:	e59d6018 	ldr	r6, [sp, #24]
    8bc0:	0a00001d 	beq	8c3c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
    8bc4:	e355000f 	cmp	r5, #15
    8bc8:	9a000014 	bls	8c20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    8bcc:	e245300c 	sub	r3, r5, #12
    8bd0:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    8bd4:	e5848000 	str	r8, [r4]
    8bd8:	e1a00007 	mov	r0, r7
    8bdc:	e5846008 	str	r6, [r4, #8]
    8be0:	e1a02005 	mov	r2, r5
    8be4:	e5843004 	str	r3, [r4, #4]
    8be8:	e1a01004 	mov	r1, r4
    8bec:	ebffffb0 	bl	8ab4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    8bf0:	e3500000 	cmp	r0, #0
    8bf4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8bf8:	e5940008 	ldr	r0, [r4, #8]
    8bfc:	e3500000 	cmp	r0, #0
    8c00:	ba000001 	blt	8c0c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    8c04:	e3a00000 	mov	r0, #0
    8c08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c0c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    8c10:	e5840008 	str	r0, [r4, #8]
    8c14:	e2900000 	adds	r0, r0, #0
    8c18:	13a00001 	movne	r0, #1
    8c1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c20:	e3011dc0 	movw	r1, #7616	; 0x1dc0
    8c24:	e3401001 	movt	r1, #1
    8c28:	e3010e30 	movw	r0, #7728	; 0x1e30
    8c2c:	e3400001 	movt	r0, #1
    8c30:	e3a02032 	mov	r2, #50	; 0x32
    8c34:	eb000e35 	bl	c510 <assertion_failed>
    8c38:	eaffffe3 	b	8bcc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    8c3c:	e3011dc0 	movw	r1, #7616	; 0x1dc0
    8c40:	e3401001 	movt	r1, #1
    8c44:	e3010e24 	movw	r0, #7716	; 0x1e24
    8c48:	e3400001 	movt	r0, #1
    8c4c:	e3a02031 	mov	r2, #49	; 0x31
    8c50:	eb000e2e 	bl	c510 <assertion_failed>
    8c54:	eaffffda 	b	8bc4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

00008c58 <CGPIOPin::~CGPIOPin()>:
    8c58:	e12fff1e 	bx	lr

00008c5c <CGPIOPin::~CGPIOPin()>:
    8c5c:	e92d4010 	push	{r4, lr}
    8c60:	e3a01028 	mov	r1, #40	; 0x28
    8c64:	e1a04000 	mov	r4, r0
    8c68:	eb0003aa 	bl	9b18 <operator delete(void*, unsigned int)>
    8c6c:	e1a00004 	mov	r0, r4
    8c70:	e8bd8010 	pop	{r4, pc}

00008c74 <CGPIOPin::Write(unsigned int)>:
    8c74:	e5d03010 	ldrb	r3, [r0, #16]
    8c78:	e92d4070 	push	{r4, r5, r6, lr}
    8c7c:	e3530003 	cmp	r3, #3
    8c80:	e1a04000 	mov	r4, r0
    8c84:	e1a05001 	mov	r5, r1
    8c88:	8a000016 	bhi	8ce8 <CGPIOPin::Write(unsigned int)+0x74>
    8c8c:	e3550001 	cmp	r5, #1
    8c90:	9a00000c 	bls	8cc8 <CGPIOPin::Write(unsigned int)+0x54>
    8c94:	e3011e80 	movw	r1, #7808	; 0x1e80
    8c98:	e3401001 	movt	r1, #1
    8c9c:	e3010eb0 	movw	r0, #7856	; 0x1eb0
    8ca0:	e3400001 	movt	r0, #1
    8ca4:	e3a02084 	mov	r2, #132	; 0x84
    8ca8:	eb000e18 	bl	c510 <assertion_failed>
    8cac:	e3a0101c 	mov	r1, #28
    8cb0:	e3431f20 	movt	r1, #16160	; 0x3f20
    8cb4:	e5845014 	str	r5, [r4, #20]
    8cb8:	e5943008 	ldr	r3, [r4, #8]
    8cbc:	e594200c 	ldr	r2, [r4, #12]
    8cc0:	e7812003 	str	r2, [r1, r3]
    8cc4:	e8bd8070 	pop	{r4, r5, r6, pc}
    8cc8:	e3a0301c 	mov	r3, #28
    8ccc:	e3433f20 	movt	r3, #16160	; 0x3f20
    8cd0:	e3550000 	cmp	r5, #0
    8cd4:	e3a01028 	mov	r1, #40	; 0x28
    8cd8:	e3431f20 	movt	r1, #16160	; 0x3f20
    8cdc:	11a01003 	movne	r1, r3
    8ce0:	e5845014 	str	r5, [r4, #20]
    8ce4:	eafffff3 	b	8cb8 <CGPIOPin::Write(unsigned int)+0x44>
    8ce8:	e3011e80 	movw	r1, #7808	; 0x1e80
    8cec:	e3401001 	movt	r1, #1
    8cf0:	e3010e8c 	movw	r0, #7820	; 0x1e8c
    8cf4:	e3400001 	movt	r0, #1
    8cf8:	e3a02080 	mov	r2, #128	; 0x80
    8cfc:	eb000e03 	bl	c510 <assertion_failed>
    8d00:	eaffffe1 	b	8c8c <CGPIOPin::Write(unsigned int)+0x18>

00008d04 <CGPIOPin::Read() const>:
    8d04:	e5d03010 	ldrb	r3, [r0, #16]
    8d08:	e92d4010 	push	{r4, lr}
    8d0c:	e2432002 	sub	r2, r3, #2
    8d10:	e1a04000 	mov	r4, r0
    8d14:	e3530000 	cmp	r3, #0
    8d18:	13520001 	cmpne	r2, #1
    8d1c:	9a000005 	bls	8d38 <CGPIOPin::Read() const+0x34>
    8d20:	e3011e80 	movw	r1, #7808	; 0x1e80
    8d24:	e3401001 	movt	r1, #1
    8d28:	e3010ed0 	movw	r0, #7888	; 0x1ed0
    8d2c:	e3400001 	movt	r0, #1
    8d30:	e3a02092 	mov	r2, #146	; 0x92
    8d34:	eb000df5 	bl	c510 <assertion_failed>
    8d38:	e5941008 	ldr	r1, [r4, #8]
    8d3c:	e3a03034 	mov	r3, #52	; 0x34
    8d40:	e3433f20 	movt	r3, #16160	; 0x3f20
    8d44:	e594200c 	ldr	r2, [r4, #12]
    8d48:	e7913003 	ldr	r3, [r1, r3]
    8d4c:	e1130002 	tst	r3, r2
    8d50:	13a00001 	movne	r0, #1
    8d54:	03a00000 	moveq	r0, #0
    8d58:	e8bd8010 	pop	{r4, pc}

00008d5c <CGPIOPin::Invert()>:
    8d5c:	e5d03010 	ldrb	r3, [r0, #16]
    8d60:	e92d4010 	push	{r4, lr}
    8d64:	e3530001 	cmp	r3, #1
    8d68:	e1a04000 	mov	r4, r0
    8d6c:	0a000005 	beq	8d88 <CGPIOPin::Invert()+0x2c>
    8d70:	e3011e80 	movw	r1, #7808	; 0x1e80
    8d74:	e3401001 	movt	r1, #1
    8d78:	e3010f2c 	movw	r0, #7980	; 0x1f2c
    8d7c:	e3400001 	movt	r0, #1
    8d80:	e3a0209f 	mov	r2, #159	; 0x9f
    8d84:	eb000de1 	bl	c510 <assertion_failed>
    8d88:	e5941014 	ldr	r1, [r4, #20]
    8d8c:	e1a00004 	mov	r0, r4
    8d90:	e8bd4010 	pop	{r4, lr}
    8d94:	e2211001 	eor	r1, r1, #1
    8d98:	eaffffb5 	b	8c74 <CGPIOPin::Write(unsigned int)>

00008d9c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    8d9c:	e5d03010 	ldrb	r3, [r0, #16]
    8da0:	e92d4070 	push	{r4, r5, r6, lr}
    8da4:	e1a06002 	mov	r6, r2
    8da8:	e2432002 	sub	r2, r3, #2
    8dac:	e3530000 	cmp	r3, #0
    8db0:	13520001 	cmpne	r2, #1
    8db4:	e1a04000 	mov	r4, r0
    8db8:	e1a05001 	mov	r5, r1
    8dbc:	9a000005 	bls	8dd8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
    8dc0:	e3011e80 	movw	r1, #7808	; 0x1e80
    8dc4:	e3401001 	movt	r1, #1
    8dc8:	e3010ed0 	movw	r0, #7888	; 0x1ed0
    8dcc:	e3400001 	movt	r0, #1
    8dd0:	e3a020a8 	mov	r2, #168	; 0xa8
    8dd4:	eb000dcd 	bl	c510 <assertion_failed>
    8dd8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8ddc:	e3530006 	cmp	r3, #6
    8de0:	0a000005 	beq	8dfc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
    8de4:	e3011e80 	movw	r1, #7808	; 0x1e80
    8de8:	e3401001 	movt	r1, #1
    8dec:	e3010f48 	movw	r0, #8008	; 0x1f48
    8df0:	e3400001 	movt	r0, #1
    8df4:	e3a020aa 	mov	r2, #170	; 0xaa
    8df8:	eb000dc4 	bl	c510 <assertion_failed>
    8dfc:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8e00:	e3530006 	cmp	r3, #6
    8e04:	0a000005 	beq	8e20 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
    8e08:	e3011e80 	movw	r1, #7808	; 0x1e80
    8e0c:	e3401001 	movt	r1, #1
    8e10:	e3010f6c 	movw	r0, #8044	; 0x1f6c
    8e14:	e3400001 	movt	r0, #1
    8e18:	e3a020ab 	mov	r2, #171	; 0xab
    8e1c:	eb000dbb 	bl	c510 <assertion_failed>
    8e20:	e3550000 	cmp	r5, #0
    8e24:	0a00001a 	beq	8e94 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    8e28:	e594301c 	ldr	r3, [r4, #28]
    8e2c:	e3530000 	cmp	r3, #0
    8e30:	0a000005 	beq	8e4c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    8e34:	e3011e80 	movw	r1, #7808	; 0x1e80
    8e38:	e3401001 	movt	r1, #1
    8e3c:	e3010f94 	movw	r0, #8084	; 0x1f94
    8e40:	e3400001 	movt	r0, #1
    8e44:	e3a020ae 	mov	r2, #174	; 0xae
    8e48:	eb000db0 	bl	c510 <assertion_failed>
    8e4c:	e5940018 	ldr	r0, [r4, #24]
    8e50:	e584501c 	str	r5, [r4, #28]
    8e54:	e3500000 	cmp	r0, #0
    8e58:	e5846020 	str	r6, [r4, #32]
    8e5c:	0a000002 	beq	8e6c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    8e60:	e1a01004 	mov	r1, r4
    8e64:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e68:	ea001842 	b	ef78 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8e6c:	e3011e80 	movw	r1, #7808	; 0x1e80
    8e70:	e3401001 	movt	r1, #1
    8e74:	e3010fa4 	movw	r0, #8100	; 0x1fa4
    8e78:	e3400001 	movt	r0, #1
    8e7c:	e3a020b3 	mov	r2, #179	; 0xb3
    8e80:	eb000da2 	bl	c510 <assertion_failed>
    8e84:	e5940018 	ldr	r0, [r4, #24]
    8e88:	e1a01004 	mov	r1, r4
    8e8c:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e90:	ea001838 	b	ef78 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8e94:	e3011e80 	movw	r1, #7808	; 0x1e80
    8e98:	e3401001 	movt	r1, #1
    8e9c:	e3030550 	movw	r0, #13648	; 0x3550
    8ea0:	e3400001 	movt	r0, #1
    8ea4:	e3a020ad 	mov	r2, #173	; 0xad
    8ea8:	eb000d98 	bl	c510 <assertion_failed>
    8eac:	eaffffdd 	b	8e28 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

00008eb0 <CGPIOPin::DisconnectInterrupt()>:
    8eb0:	e5d03010 	ldrb	r3, [r0, #16]
    8eb4:	e92d4010 	push	{r4, lr}
    8eb8:	e2432002 	sub	r2, r3, #2
    8ebc:	e1a04000 	mov	r4, r0
    8ec0:	e3530000 	cmp	r3, #0
    8ec4:	13520001 	cmpne	r2, #1
    8ec8:	9a000005 	bls	8ee4 <CGPIOPin::DisconnectInterrupt()+0x34>
    8ecc:	e3011e80 	movw	r1, #7808	; 0x1e80
    8ed0:	e3401001 	movt	r1, #1
    8ed4:	e3010ed0 	movw	r0, #7888	; 0x1ed0
    8ed8:	e3400001 	movt	r0, #1
    8edc:	e3a020bb 	mov	r2, #187	; 0xbb
    8ee0:	eb000d8a 	bl	c510 <assertion_failed>
    8ee4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8ee8:	e3530006 	cmp	r3, #6
    8eec:	0a000005 	beq	8f08 <CGPIOPin::DisconnectInterrupt()+0x58>
    8ef0:	e3011e80 	movw	r1, #7808	; 0x1e80
    8ef4:	e3401001 	movt	r1, #1
    8ef8:	e3010f48 	movw	r0, #8008	; 0x1f48
    8efc:	e3400001 	movt	r0, #1
    8f00:	e3a020bd 	mov	r2, #189	; 0xbd
    8f04:	eb000d81 	bl	c510 <assertion_failed>
    8f08:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8f0c:	e3530006 	cmp	r3, #6
    8f10:	0a000005 	beq	8f2c <CGPIOPin::DisconnectInterrupt()+0x7c>
    8f14:	e3011e80 	movw	r1, #7808	; 0x1e80
    8f18:	e3401001 	movt	r1, #1
    8f1c:	e3010f6c 	movw	r0, #8044	; 0x1f6c
    8f20:	e3400001 	movt	r0, #1
    8f24:	e3a020be 	mov	r2, #190	; 0xbe
    8f28:	eb000d78 	bl	c510 <assertion_failed>
    8f2c:	e594301c 	ldr	r3, [r4, #28]
    8f30:	e3530000 	cmp	r3, #0
    8f34:	0a000011 	beq	8f80 <CGPIOPin::DisconnectInterrupt()+0xd0>
    8f38:	e5940018 	ldr	r0, [r4, #24]
    8f3c:	e3a03000 	mov	r3, #0
    8f40:	e584301c 	str	r3, [r4, #28]
    8f44:	e1500003 	cmp	r0, r3
    8f48:	0a000002 	beq	8f58 <CGPIOPin::DisconnectInterrupt()+0xa8>
    8f4c:	e1a01004 	mov	r1, r4
    8f50:	e8bd4010 	pop	{r4, lr}
    8f54:	ea001833 	b	f028 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8f58:	e3011e80 	movw	r1, #7808	; 0x1e80
    8f5c:	e3401001 	movt	r1, #1
    8f60:	e3010fa4 	movw	r0, #8100	; 0x1fa4
    8f64:	e3400001 	movt	r0, #1
    8f68:	e3a020c3 	mov	r2, #195	; 0xc3
    8f6c:	eb000d67 	bl	c510 <assertion_failed>
    8f70:	e5940018 	ldr	r0, [r4, #24]
    8f74:	e1a01004 	mov	r1, r4
    8f78:	e8bd4010 	pop	{r4, lr}
    8f7c:	ea001829 	b	f028 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8f80:	e3011e80 	movw	r1, #7808	; 0x1e80
    8f84:	e3401001 	movt	r1, #1
    8f88:	e3010fb4 	movw	r0, #8116	; 0x1fb4
    8f8c:	e3400001 	movt	r0, #1
    8f90:	e3a020c0 	mov	r2, #192	; 0xc0
    8f94:	eb000d5d 	bl	c510 <assertion_failed>
    8f98:	eaffffe6 	b	8f38 <CGPIOPin::DisconnectInterrupt()+0x88>

00008f9c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    8f9c:	e5d03010 	ldrb	r3, [r0, #16]
    8fa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8fa4:	e2432002 	sub	r2, r3, #2
    8fa8:	e1a04000 	mov	r4, r0
    8fac:	e3530000 	cmp	r3, #0
    8fb0:	13520001 	cmpne	r2, #1
    8fb4:	e1a06001 	mov	r6, r1
    8fb8:	9a000005 	bls	8fd4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
    8fbc:	e3011e80 	movw	r1, #7808	; 0x1e80
    8fc0:	e3401001 	movt	r1, #1
    8fc4:	e3010ed0 	movw	r0, #7888	; 0x1ed0
    8fc8:	e3400001 	movt	r0, #1
    8fcc:	e3a020cb 	mov	r2, #203	; 0xcb
    8fd0:	eb000d4e 	bl	c510 <assertion_failed>
    8fd4:	e594301c 	ldr	r3, [r4, #28]
    8fd8:	e3530000 	cmp	r3, #0
    8fdc:	0a00002f 	beq	90a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
    8fe0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8fe4:	e3530006 	cmp	r3, #6
    8fe8:	0a000005 	beq	9004 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x68>
    8fec:	e3011e80 	movw	r1, #7808	; 0x1e80
    8ff0:	e3401001 	movt	r1, #1
    8ff4:	e3010f48 	movw	r0, #8008	; 0x1f48
    8ff8:	e3400001 	movt	r0, #1
    8ffc:	e3a020ce 	mov	r2, #206	; 0xce
    9000:	eb000d42 	bl	c510 <assertion_failed>
    9004:	e3560005 	cmp	r6, #5
    9008:	8a000014 	bhi	9060 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc4>
    900c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9010:	e1530006 	cmp	r3, r6
    9014:	0a00001a 	beq	9084 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe8>
    9018:	e5943008 	ldr	r3, [r4, #8]
    901c:	e1a07206 	lsl	r7, r6, #4
    9020:	e3a0504c 	mov	r5, #76	; 0x4c
    9024:	e3435f20 	movt	r5, #16160	; 0x3f20
    9028:	e0835005 	add	r5, r3, r5
    902c:	e0477106 	sub	r7, r7, r6, lsl #2
    9030:	e5c46024 	strb	r6, [r4, #36]	; 0x24
    9034:	e304007c 	movw	r0, #16508	; 0x407c
    9038:	e3400001 	movt	r0, #1
    903c:	eb001b11 	bl	fc88 <CSpinLock::Acquire()>
    9040:	e594300c 	ldr	r3, [r4, #12]
    9044:	e7952007 	ldr	r2, [r5, r7]
    9048:	e304007c 	movw	r0, #16508	; 0x407c
    904c:	e3400001 	movt	r0, #1
    9050:	e1823003 	orr	r3, r2, r3
    9054:	e7853007 	str	r3, [r5, r7]
    9058:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    905c:	ea001b25 	b	fcf8 <CSpinLock::Release()>
    9060:	e3011e80 	movw	r1, #7808	; 0x1e80
    9064:	e3401001 	movt	r1, #1
    9068:	e3010fc4 	movw	r0, #8132	; 0x1fc4
    906c:	e3400001 	movt	r0, #1
    9070:	e3a020cf 	mov	r2, #207	; 0xcf
    9074:	eb000d25 	bl	c510 <assertion_failed>
    9078:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    907c:	e1530006 	cmp	r3, r6
    9080:	1affffe4 	bne	9018 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
    9084:	e3011e80 	movw	r1, #7808	; 0x1e80
    9088:	e3401001 	movt	r1, #1
    908c:	e3010fe8 	movw	r0, #8168	; 0x1fe8
    9090:	e3400001 	movt	r0, #1
    9094:	e3a020d0 	mov	r2, #208	; 0xd0
    9098:	eb000d1c 	bl	c510 <assertion_failed>
    909c:	eaffffdd 	b	9018 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
    90a0:	e3011e80 	movw	r1, #7808	; 0x1e80
    90a4:	e3401001 	movt	r1, #1
    90a8:	e3010fb4 	movw	r0, #8116	; 0x1fb4
    90ac:	e3400001 	movt	r0, #1
    90b0:	e3a020cc 	mov	r2, #204	; 0xcc
    90b4:	eb000d15 	bl	c510 <assertion_failed>
    90b8:	eaffffc8 	b	8fe0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>

000090bc <CGPIOPin::DisableInterrupt()>:
    90bc:	e5d03010 	ldrb	r3, [r0, #16]
    90c0:	e92d4070 	push	{r4, r5, r6, lr}
    90c4:	e2432002 	sub	r2, r3, #2
    90c8:	e1a04000 	mov	r4, r0
    90cc:	e3530000 	cmp	r3, #0
    90d0:	13520001 	cmpne	r2, #1
    90d4:	9a000005 	bls	90f0 <CGPIOPin::DisableInterrupt()+0x34>
    90d8:	e3011e80 	movw	r1, #7808	; 0x1e80
    90dc:	e3401001 	movt	r1, #1
    90e0:	e3010ed0 	movw	r0, #7888	; 0x1ed0
    90e4:	e3400001 	movt	r0, #1
    90e8:	e3a020e1 	mov	r2, #225	; 0xe1
    90ec:	eb000d07 	bl	c510 <assertion_failed>
    90f0:	e5d46024 	ldrb	r6, [r4, #36]	; 0x24
    90f4:	e3560005 	cmp	r6, #5
    90f8:	9a000006 	bls	9118 <CGPIOPin::DisableInterrupt()+0x5c>
    90fc:	e3011e80 	movw	r1, #7808	; 0x1e80
    9100:	e3401001 	movt	r1, #1
    9104:	e3020004 	movw	r0, #8196	; 0x2004
    9108:	e3400001 	movt	r0, #1
    910c:	e3a020e3 	mov	r2, #227	; 0xe3
    9110:	eb000cfe 	bl	c510 <assertion_failed>
    9114:	e5d46024 	ldrb	r6, [r4, #36]	; 0x24
    9118:	e5942008 	ldr	r2, [r4, #8]
    911c:	e1a03206 	lsl	r3, r6, #4
    9120:	e3a0504c 	mov	r5, #76	; 0x4c
    9124:	e3435f20 	movt	r5, #16160	; 0x3f20
    9128:	e0825005 	add	r5, r2, r5
    912c:	e0436106 	sub	r6, r3, r6, lsl #2
    9130:	e304007c 	movw	r0, #16508	; 0x407c
    9134:	e3400001 	movt	r0, #1
    9138:	eb001ad2 	bl	fc88 <CSpinLock::Acquire()>
    913c:	e594200c 	ldr	r2, [r4, #12]
    9140:	e7953006 	ldr	r3, [r5, r6]
    9144:	e304007c 	movw	r0, #16508	; 0x407c
    9148:	e3400001 	movt	r0, #1
    914c:	e1c33002 	bic	r3, r3, r2
    9150:	e7853006 	str	r3, [r5, r6]
    9154:	eb001ae7 	bl	fcf8 <CSpinLock::Release()>
    9158:	e3a03006 	mov	r3, #6
    915c:	e5c43024 	strb	r3, [r4, #36]	; 0x24
    9160:	e8bd8070 	pop	{r4, r5, r6, pc}

00009164 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    9164:	e5d03010 	ldrb	r3, [r0, #16]
    9168:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    916c:	e2432002 	sub	r2, r3, #2
    9170:	e1a04000 	mov	r4, r0
    9174:	e3530000 	cmp	r3, #0
    9178:	13520001 	cmpne	r2, #1
    917c:	e1a06001 	mov	r6, r1
    9180:	9a000005 	bls	919c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
    9184:	e3011e80 	movw	r1, #7808	; 0x1e80
    9188:	e3401001 	movt	r1, #1
    918c:	e3010ed0 	movw	r0, #7888	; 0x1ed0
    9190:	e3400001 	movt	r0, #1
    9194:	e3a020f4 	mov	r2, #244	; 0xf4
    9198:	eb000cdc 	bl	c510 <assertion_failed>
    919c:	e594301c 	ldr	r3, [r4, #28]
    91a0:	e3530000 	cmp	r3, #0
    91a4:	0a00002f 	beq	9268 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
    91a8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    91ac:	e3530006 	cmp	r3, #6
    91b0:	0a000005 	beq	91cc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x68>
    91b4:	e3011e80 	movw	r1, #7808	; 0x1e80
    91b8:	e3401001 	movt	r1, #1
    91bc:	e3010f6c 	movw	r0, #8044	; 0x1f6c
    91c0:	e3400001 	movt	r0, #1
    91c4:	e3a020f7 	mov	r2, #247	; 0xf7
    91c8:	eb000cd0 	bl	c510 <assertion_failed>
    91cc:	e3560005 	cmp	r6, #5
    91d0:	8a000014 	bhi	9228 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc4>
    91d4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    91d8:	e1530006 	cmp	r3, r6
    91dc:	0a00001a 	beq	924c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe8>
    91e0:	e5943008 	ldr	r3, [r4, #8]
    91e4:	e1a07206 	lsl	r7, r6, #4
    91e8:	e3a0504c 	mov	r5, #76	; 0x4c
    91ec:	e3435f20 	movt	r5, #16160	; 0x3f20
    91f0:	e0835005 	add	r5, r3, r5
    91f4:	e0477106 	sub	r7, r7, r6, lsl #2
    91f8:	e5c46025 	strb	r6, [r4, #37]	; 0x25
    91fc:	e304007c 	movw	r0, #16508	; 0x407c
    9200:	e3400001 	movt	r0, #1
    9204:	eb001a9f 	bl	fc88 <CSpinLock::Acquire()>
    9208:	e594300c 	ldr	r3, [r4, #12]
    920c:	e7952007 	ldr	r2, [r5, r7]
    9210:	e304007c 	movw	r0, #16508	; 0x407c
    9214:	e3400001 	movt	r0, #1
    9218:	e1823003 	orr	r3, r2, r3
    921c:	e7853007 	str	r3, [r5, r7]
    9220:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9224:	ea001ab3 	b	fcf8 <CSpinLock::Release()>
    9228:	e3011e80 	movw	r1, #7808	; 0x1e80
    922c:	e3401001 	movt	r1, #1
    9230:	e3010fc4 	movw	r0, #8132	; 0x1fc4
    9234:	e3400001 	movt	r0, #1
    9238:	e3a020f8 	mov	r2, #248	; 0xf8
    923c:	eb000cb3 	bl	c510 <assertion_failed>
    9240:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9244:	e1530006 	cmp	r3, r6
    9248:	1affffe4 	bne	91e0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
    924c:	e3011e80 	movw	r1, #7808	; 0x1e80
    9250:	e3401001 	movt	r1, #1
    9254:	e3020028 	movw	r0, #8232	; 0x2028
    9258:	e3400001 	movt	r0, #1
    925c:	e3a020f9 	mov	r2, #249	; 0xf9
    9260:	eb000caa 	bl	c510 <assertion_failed>
    9264:	eaffffdd 	b	91e0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
    9268:	e3011e80 	movw	r1, #7808	; 0x1e80
    926c:	e3401001 	movt	r1, #1
    9270:	e3010fb4 	movw	r0, #8116	; 0x1fb4
    9274:	e3400001 	movt	r0, #1
    9278:	e3a020f5 	mov	r2, #245	; 0xf5
    927c:	eb000ca3 	bl	c510 <assertion_failed>
    9280:	eaffffc8 	b	91a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>

00009284 <CGPIOPin::DisableInterrupt2()>:
    9284:	e5d03010 	ldrb	r3, [r0, #16]
    9288:	e92d4070 	push	{r4, r5, r6, lr}
    928c:	e2432002 	sub	r2, r3, #2
    9290:	e1a04000 	mov	r4, r0
    9294:	e3530000 	cmp	r3, #0
    9298:	13520001 	cmpne	r2, #1
    929c:	9a000005 	bls	92b8 <CGPIOPin::DisableInterrupt2()+0x34>
    92a0:	e3011e80 	movw	r1, #7808	; 0x1e80
    92a4:	e3401001 	movt	r1, #1
    92a8:	e3010ed0 	movw	r0, #7888	; 0x1ed0
    92ac:	e3400001 	movt	r0, #1
    92b0:	e300210a 	movw	r2, #266	; 0x10a
    92b4:	eb000c95 	bl	c510 <assertion_failed>
    92b8:	e5d46025 	ldrb	r6, [r4, #37]	; 0x25
    92bc:	e3560005 	cmp	r6, #5
    92c0:	9a000006 	bls	92e0 <CGPIOPin::DisableInterrupt2()+0x5c>
    92c4:	e3011e80 	movw	r1, #7808	; 0x1e80
    92c8:	e3401001 	movt	r1, #1
    92cc:	e3020044 	movw	r0, #8260	; 0x2044
    92d0:	e3400001 	movt	r0, #1
    92d4:	e3a02f43 	mov	r2, #268	; 0x10c
    92d8:	eb000c8c 	bl	c510 <assertion_failed>
    92dc:	e5d46025 	ldrb	r6, [r4, #37]	; 0x25
    92e0:	e5942008 	ldr	r2, [r4, #8]
    92e4:	e1a03206 	lsl	r3, r6, #4
    92e8:	e3a0504c 	mov	r5, #76	; 0x4c
    92ec:	e3435f20 	movt	r5, #16160	; 0x3f20
    92f0:	e0825005 	add	r5, r2, r5
    92f4:	e0436106 	sub	r6, r3, r6, lsl #2
    92f8:	e304007c 	movw	r0, #16508	; 0x407c
    92fc:	e3400001 	movt	r0, #1
    9300:	eb001a60 	bl	fc88 <CSpinLock::Acquire()>
    9304:	e594200c 	ldr	r2, [r4, #12]
    9308:	e7953006 	ldr	r3, [r5, r6]
    930c:	e304007c 	movw	r0, #16508	; 0x407c
    9310:	e3400001 	movt	r0, #1
    9314:	e1c33002 	bic	r3, r3, r2
    9318:	e7853006 	str	r3, [r5, r6]
    931c:	eb001a75 	bl	fcf8 <CSpinLock::Release()>
    9320:	e3a03006 	mov	r3, #6
    9324:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    9328:	e8bd8070 	pop	{r4, r5, r6, pc}

0000932c <CGPIOPin::ReadAll()>:
    932c:	e3a03000 	mov	r3, #0
    9330:	e3433f20 	movt	r3, #16160	; 0x3f20
    9334:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    9338:	e12fff1e 	bx	lr

0000933c <CGPIOPin::SetPullUpMode(unsigned int)>:
    933c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9340:	e1a06000 	mov	r6, r0
    9344:	e1a07001 	mov	r7, r1
    9348:	e3a04098 	mov	r4, #152	; 0x98
    934c:	e3434f20 	movt	r4, #16160	; 0x3f20
    9350:	e304007c 	movw	r0, #16508	; 0x407c
    9354:	e3400001 	movt	r0, #1
    9358:	e5963008 	ldr	r3, [r6, #8]
    935c:	e0834004 	add	r4, r3, r4
    9360:	eb001a48 	bl	fc88 <CSpinLock::Acquire()>
    9364:	e3570002 	cmp	r7, #2
    9368:	9a000005 	bls	9384 <CGPIOPin::SetPullUpMode(unsigned int)+0x48>
    936c:	e3011e80 	movw	r1, #7808	; 0x1e80
    9370:	e3401001 	movt	r1, #1
    9374:	e3020068 	movw	r0, #8296	; 0x2068
    9378:	e3400001 	movt	r0, #1
    937c:	e3002125 	movw	r2, #293	; 0x125
    9380:	eb000c62 	bl	c510 <assertion_failed>
    9384:	e3a05000 	mov	r5, #0
    9388:	e3435f20 	movt	r5, #16160	; 0x3f20
    938c:	e3a00005 	mov	r0, #5
    9390:	e5857094 	str	r7, [r5, #148]	; 0x94
    9394:	eb0004b0 	bl	a65c <CTimer::SimpleusDelay(unsigned int)>
    9398:	e596300c 	ldr	r3, [r6, #12]
    939c:	e5843000 	str	r3, [r4]
    93a0:	e3a00005 	mov	r0, #5
    93a4:	eb0004ac 	bl	a65c <CTimer::SimpleusDelay(unsigned int)>
    93a8:	e3a03000 	mov	r3, #0
    93ac:	e304007c 	movw	r0, #16508	; 0x407c
    93b0:	e3400001 	movt	r0, #1
    93b4:	e5853094 	str	r3, [r5, #148]	; 0x94
    93b8:	e5843000 	str	r3, [r4]
    93bc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    93c0:	ea001a4c 	b	fcf8 <CSpinLock::Release()>

000093c4 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    93c4:	e5903004 	ldr	r3, [r0, #4]
    93c8:	e92d4070 	push	{r4, r5, r6, lr}
    93cc:	e3530035 	cmp	r3, #53	; 0x35
    93d0:	e1a05001 	mov	r5, r1
    93d4:	8a000021 	bhi	9460 <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
    93d8:	e30c0ccd 	movw	r0, #52429	; 0xcccd
    93dc:	e34c0ccc 	movt	r0, #52428	; 0xcccc
    93e0:	e3550005 	cmp	r5, #5
    93e4:	e0810093 	umull	r0, r1, r3, r0
    93e8:	e1a041a1 	lsr	r4, r1, #3
    93ec:	e284253f 	add	r2, r4, #264241152	; 0xfc00000
    93f0:	e1a01184 	lsl	r1, r4, #3
    93f4:	e2822702 	add	r2, r2, #524288	; 0x80000
    93f8:	e0814084 	add	r4, r1, r4, lsl #1
    93fc:	e0644003 	rsb	r4, r4, r3
    9400:	e1a06102 	lsl	r6, r2, #2
    9404:	e0844084 	add	r4, r4, r4, lsl #1
    9408:	9a000005 	bls	9424 <CGPIOPin::SetAlternateFunction(unsigned int)+0x60>
    940c:	e3011e80 	movw	r1, #7808	; 0x1e80
    9410:	e3401001 	movt	r1, #1
    9414:	e3020088 	movw	r0, #8328	; 0x2088
    9418:	e3400001 	movt	r0, #1
    941c:	e3002136 	movw	r2, #310	; 0x136
    9420:	eb000c3a 	bl	c510 <assertion_failed>
    9424:	e304007c 	movw	r0, #16508	; 0x407c
    9428:	e3400001 	movt	r0, #1
    942c:	eb001a15 	bl	fc88 <CSpinLock::Acquire()>
    9430:	e3011e58 	movw	r1, #7768	; 0x1e58
    9434:	e3401001 	movt	r1, #1
    9438:	e5962000 	ldr	r2, [r6]
    943c:	e3a03007 	mov	r3, #7
    9440:	e304007c 	movw	r0, #16508	; 0x407c
    9444:	e3400001 	movt	r0, #1
    9448:	e7911105 	ldr	r1, [r1, r5, lsl #2]
    944c:	e1c23413 	bic	r3, r2, r3, lsl r4
    9450:	e1834411 	orr	r4, r3, r1, lsl r4
    9454:	e5864000 	str	r4, [r6]
    9458:	e8bd4070 	pop	{r4, r5, r6, lr}
    945c:	ea001a25 	b	fcf8 <CSpinLock::Release()>
    9460:	e1a04000 	mov	r4, r0
    9464:	e3011e80 	movw	r1, #7808	; 0x1e80
    9468:	e3401001 	movt	r1, #1
    946c:	e3020074 	movw	r0, #8308	; 0x2074
    9470:	e3400001 	movt	r0, #1
    9474:	e3002132 	movw	r2, #306	; 0x132
    9478:	eb000c24 	bl	c510 <assertion_failed>
    947c:	e5943004 	ldr	r3, [r4, #4]
    9480:	eaffffd4 	b	93d8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

00009484 <CGPIOPin::SetMode(TGPIOMode, int)>:
    9484:	e3510009 	cmp	r1, #9
    9488:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    948c:	e1a04001 	mov	r4, r1
    9490:	e1a06000 	mov	r6, r0
    9494:	e1a07002 	mov	r7, r2
    9498:	8a000037 	bhi	957c <CGPIOPin::SetMode(TGPIOMode, int)+0xf8>
    949c:	e2443004 	sub	r3, r4, #4
    94a0:	e5c64010 	strb	r4, [r6, #16]
    94a4:	e3530005 	cmp	r3, #5
    94a8:	9a00002c 	bls	9560 <CGPIOPin::SetMode(TGPIOMode, int)+0xdc>
    94ac:	e2973000 	adds	r3, r7, #0
    94b0:	13a03001 	movne	r3, #1
    94b4:	e3540001 	cmp	r4, #1
    94b8:	13a03000 	movne	r3, #0
    94bc:	e3530000 	cmp	r3, #0
    94c0:	1a000055 	bne	961c <CGPIOPin::SetMode(TGPIOMode, int)+0x198>
    94c4:	e5963004 	ldr	r3, [r6, #4]
    94c8:	e3530035 	cmp	r3, #53	; 0x35
    94cc:	8a00003a 	bhi	95bc <CGPIOPin::SetMode(TGPIOMode, int)+0x138>
    94d0:	e30c4ccd 	movw	r4, #52429	; 0xcccd
    94d4:	e34c4ccc 	movt	r4, #52428	; 0xcccc
    94d8:	e304007c 	movw	r0, #16508	; 0x407c
    94dc:	e3400001 	movt	r0, #1
    94e0:	e0854493 	umull	r4, r5, r3, r4
    94e4:	e1a041a5 	lsr	r4, r5, #3
    94e8:	e1a05184 	lsl	r5, r4, #3
    94ec:	e0855084 	add	r5, r5, r4, lsl #1
    94f0:	e284453f 	add	r4, r4, #264241152	; 0xfc00000
    94f4:	e2844702 	add	r4, r4, #524288	; 0x80000
    94f8:	e0655003 	rsb	r5, r5, r3
    94fc:	eb0019e1 	bl	fc88 <CSpinLock::Acquire()>
    9500:	e5d61010 	ldrb	r1, [r6, #16]
    9504:	e1a04104 	lsl	r4, r4, #2
    9508:	e0855085 	add	r5, r5, r5, lsl #1
    950c:	e2411001 	sub	r1, r1, #1
    9510:	e3a03007 	mov	r3, #7
    9514:	e16f1f11 	clz	r1, r1
    9518:	e304007c 	movw	r0, #16508	; 0x407c
    951c:	e3400001 	movt	r0, #1
    9520:	e5942000 	ldr	r2, [r4]
    9524:	e1a012a1 	lsr	r1, r1, #5
    9528:	e1c23513 	bic	r3, r2, r3, lsl r5
    952c:	e1835511 	orr	r5, r3, r1, lsl r5
    9530:	e5845000 	str	r5, [r4]
    9534:	eb0019ef 	bl	fcf8 <CSpinLock::Release()>
    9538:	e3570000 	cmp	r7, #0
    953c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9540:	e5d63010 	ldrb	r3, [r6, #16]
    9544:	e3530003 	cmp	r3, #3
    9548:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    954c:	ea000011 	b	9598 <CGPIOPin::SetMode(TGPIOMode, int)+0x114>
    9550:	0000960c 	.word	0x0000960c
    9554:	000095fc 	.word	0x000095fc
    9558:	000095ec 	.word	0x000095ec
    955c:	000095dc 	.word	0x000095dc
    9560:	e3570000 	cmp	r7, #0
    9564:	01a01004 	moveq	r1, r4
    9568:	1a00000b 	bne	959c <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
    956c:	e1a00006 	mov	r0, r6
    9570:	e2411004 	sub	r1, r1, #4
    9574:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9578:	eaffff91 	b	93c4 <CGPIOPin::SetAlternateFunction(unsigned int)>
    957c:	e3011e80 	movw	r1, #7808	; 0x1e80
    9580:	e3401001 	movt	r1, #1
    9584:	e3020098 	movw	r0, #8344	; 0x2098
    9588:	e3400001 	movt	r0, #1
    958c:	e3a0203d 	mov	r2, #61	; 0x3d
    9590:	eb000bde 	bl	c510 <assertion_failed>
    9594:	eaffffc0 	b	949c <CGPIOPin::SetMode(TGPIOMode, int)+0x18>
    9598:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    959c:	e1a00006 	mov	r0, r6
    95a0:	e3a01000 	mov	r1, #0
    95a4:	ebffff64 	bl	933c <CGPIOPin::SetPullUpMode(unsigned int)>
    95a8:	e5d61010 	ldrb	r1, [r6, #16]
    95ac:	e1a00006 	mov	r0, r6
    95b0:	e2411004 	sub	r1, r1, #4
    95b4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    95b8:	eaffff81 	b	93c4 <CGPIOPin::SetAlternateFunction(unsigned int)>
    95bc:	e3011e80 	movw	r1, #7808	; 0x1e80
    95c0:	e3401001 	movt	r1, #1
    95c4:	e3020074 	movw	r0, #8308	; 0x2074
    95c8:	e3400001 	movt	r0, #1
    95cc:	e3a02056 	mov	r2, #86	; 0x56
    95d0:	eb000bce 	bl	c510 <assertion_failed>
    95d4:	e5963004 	ldr	r3, [r6, #4]
    95d8:	eaffffbc 	b	94d0 <CGPIOPin::SetMode(TGPIOMode, int)+0x4c>
    95dc:	e1a00006 	mov	r0, r6
    95e0:	e3a01001 	mov	r1, #1
    95e4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    95e8:	eaffff53 	b	933c <CGPIOPin::SetPullUpMode(unsigned int)>
    95ec:	e1a00006 	mov	r0, r6
    95f0:	e3a01002 	mov	r1, #2
    95f4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    95f8:	eaffff4f 	b	933c <CGPIOPin::SetPullUpMode(unsigned int)>
    95fc:	e1a00006 	mov	r0, r6
    9600:	e3a01000 	mov	r1, #0
    9604:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9608:	eafffd99 	b	8c74 <CGPIOPin::Write(unsigned int)>
    960c:	e1a00006 	mov	r0, r6
    9610:	e3a01000 	mov	r1, #0
    9614:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9618:	eaffff47 	b	933c <CGPIOPin::SetPullUpMode(unsigned int)>
    961c:	e3a01000 	mov	r1, #0
    9620:	e1a00006 	mov	r0, r6
    9624:	ebffff44 	bl	933c <CGPIOPin::SetPullUpMode(unsigned int)>
    9628:	eaffffa5 	b	94c4 <CGPIOPin::SetMode(TGPIOMode, int)+0x40>

0000962c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    962c:	e92d4070 	push	{r4, r5, r6, lr}
    9630:	e1a04000 	mov	r4, r0
    9634:	e3510035 	cmp	r1, #53	; 0x35
    9638:	e1a05001 	mov	r5, r1
    963c:	e3010e78 	movw	r0, #7800	; 0x1e78
    9640:	e3400001 	movt	r0, #1
    9644:	e1a06002 	mov	r6, r2
    9648:	e3a0100a 	mov	r1, #10
    964c:	e5843018 	str	r3, [r4, #24]
    9650:	e3a02000 	mov	r2, #0
    9654:	e3a03006 	mov	r3, #6
    9658:	e5840000 	str	r0, [r4]
    965c:	e5845004 	str	r5, [r4, #4]
    9660:	91a00005 	movls	r0, r5
    9664:	e5c41010 	strb	r1, [r4, #16]
    9668:	e584201c 	str	r2, [r4, #28]
    966c:	e5c43024 	strb	r3, [r4, #36]	; 0x24
    9670:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    9674:	8a00000c 	bhi	96ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x80>
    9678:	e1a032a0 	lsr	r3, r0, #5
    967c:	e3a05001 	mov	r5, #1
    9680:	e200001f 	and	r0, r0, #31
    9684:	e1a02005 	mov	r2, r5
    9688:	e1a03103 	lsl	r3, r3, #2
    968c:	e1a01006 	mov	r1, r6
    9690:	e1a05015 	lsl	r5, r5, r0
    9694:	e5843008 	str	r3, [r4, #8]
    9698:	e1a00004 	mov	r0, r4
    969c:	e584500c 	str	r5, [r4, #12]
    96a0:	ebffff77 	bl	9484 <CGPIOPin::SetMode(TGPIOMode, int)>
    96a4:	e1a00004 	mov	r0, r4
    96a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    96ac:	eb00182f 	bl	f770 <CMachineInfo::Get()>
    96b0:	e6ef1075 	uxtb	r1, r5
    96b4:	eb001802 	bl	f6c4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    96b8:	e3500035 	cmp	r0, #53	; 0x35
    96bc:	e5840004 	str	r0, [r4, #4]
    96c0:	9affffec 	bls	9678 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x4c>
    96c4:	e3011e80 	movw	r1, #7808	; 0x1e80
    96c8:	e3401001 	movt	r1, #1
    96cc:	e3020074 	movw	r0, #8308	; 0x2074
    96d0:	e3400001 	movt	r0, #1
    96d4:	e3a0202b 	mov	r2, #43	; 0x2b
    96d8:	eb000b8c 	bl	c510 <assertion_failed>
    96dc:	e5940004 	ldr	r0, [r4, #4]
    96e0:	eaffffe4 	b	9678 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x4c>

000096e4 <CGPIOPin::InterruptHandler()>:
    96e4:	e5d03010 	ldrb	r3, [r0, #16]
    96e8:	e92d4010 	push	{r4, lr}
    96ec:	e2432002 	sub	r2, r3, #2
    96f0:	e1a04000 	mov	r4, r0
    96f4:	e3530000 	cmp	r3, #0
    96f8:	13520001 	cmpne	r2, #1
    96fc:	9a000005 	bls	9718 <CGPIOPin::InterruptHandler()+0x34>
    9700:	e3011e80 	movw	r1, #7808	; 0x1e80
    9704:	e3401001 	movt	r1, #1
    9708:	e3010ed0 	movw	r0, #7888	; 0x1ed0
    970c:	e3400001 	movt	r0, #1
    9710:	e3002145 	movw	r2, #325	; 0x145
    9714:	eb000b7d 	bl	c510 <assertion_failed>
    9718:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    971c:	e3530005 	cmp	r3, #5
    9720:	9a000002 	bls	9730 <CGPIOPin::InterruptHandler()+0x4c>
    9724:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9728:	e3530005 	cmp	r3, #5
    972c:	8a000005 	bhi	9748 <CGPIOPin::InterruptHandler()+0x64>
    9730:	e594301c 	ldr	r3, [r4, #28]
    9734:	e3530000 	cmp	r3, #0
    9738:	0a00000b 	beq	976c <CGPIOPin::InterruptHandler()+0x88>
    973c:	e5940020 	ldr	r0, [r4, #32]
    9740:	e8bd4010 	pop	{r4, lr}
    9744:	e12fff13 	bx	r3
    9748:	e3011e80 	movw	r1, #7808	; 0x1e80
    974c:	e3401001 	movt	r1, #1
    9750:	e30200b0 	movw	r0, #8368	; 0x20b0
    9754:	e3400001 	movt	r0, #1
    9758:	e3002147 	movw	r2, #327	; 0x147
    975c:	eb000b6b 	bl	c510 <assertion_failed>
    9760:	e594301c 	ldr	r3, [r4, #28]
    9764:	e3530000 	cmp	r3, #0
    9768:	1afffff3 	bne	973c <CGPIOPin::InterruptHandler()+0x58>
    976c:	e3011e80 	movw	r1, #7808	; 0x1e80
    9770:	e3401001 	movt	r1, #1
    9774:	e3010fb4 	movw	r0, #8116	; 0x1fb4
    9778:	e3400001 	movt	r0, #1
    977c:	e3002149 	movw	r2, #329	; 0x149
    9780:	eb000b62 	bl	c510 <assertion_failed>
    9784:	e594301c 	ldr	r3, [r4, #28]
    9788:	e5940020 	ldr	r0, [r4, #32]
    978c:	e8bd4010 	pop	{r4, lr}
    9790:	e12fff13 	bx	r3

00009794 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9794:	e3500035 	cmp	r0, #53	; 0x35
    9798:	e92d4070 	push	{r4, r5, r6, lr}
    979c:	e1a05000 	mov	r5, r0
    97a0:	8a000018 	bhi	9808 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
    97a4:	e1a032a5 	lsr	r3, r5, #5
    97a8:	e3a04013 	mov	r4, #19
    97ac:	e3404fc8 	movt	r4, #4040	; 0xfc8
    97b0:	e0834004 	add	r4, r3, r4
    97b4:	e205501f 	and	r5, r5, #31
    97b8:	e3a03001 	mov	r3, #1
    97bc:	e304007c 	movw	r0, #16508	; 0x407c
    97c0:	e3400001 	movt	r0, #1
    97c4:	e1a05513 	lsl	r5, r3, r5
    97c8:	e1a04104 	lsl	r4, r4, #2
    97cc:	eb00192d 	bl	fc88 <CSpinLock::Acquire()>
    97d0:	e3a0208b 	mov	r2, #139	; 0x8b
    97d4:	e3432f20 	movt	r2, #16160	; 0x3f20
    97d8:	e1540002 	cmp	r4, r2
    97dc:	91e01005 	mvnls	r1, r5
    97e0:	8a000004 	bhi	97f8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
    97e4:	e5943000 	ldr	r3, [r4]
    97e8:	e0033001 	and	r3, r3, r1
    97ec:	e484300c 	str	r3, [r4], #12
    97f0:	e1540002 	cmp	r4, r2
    97f4:	9afffffa 	bls	97e4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    97f8:	e304007c 	movw	r0, #16508	; 0x407c
    97fc:	e3400001 	movt	r0, #1
    9800:	e8bd4070 	pop	{r4, r5, r6, lr}
    9804:	ea00193b 	b	fcf8 <CSpinLock::Release()>
    9808:	e3011e80 	movw	r1, #7808	; 0x1e80
    980c:	e3401001 	movt	r1, #1
    9810:	e30200fc 	movw	r0, #8444	; 0x20fc
    9814:	e3400001 	movt	r0, #1
    9818:	e300214f 	movw	r2, #335	; 0x14f
    981c:	eb000b3b 	bl	c510 <assertion_failed>
    9820:	eaffffdf 	b	97a4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

00009824 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    9824:	e92d4010 	push	{r4, lr}
    9828:	e304407c 	movw	r4, #16508	; 0x407c
    982c:	e3404001 	movt	r4, #1
    9830:	e1a00004 	mov	r0, r4
    9834:	e3a01001 	mov	r1, #1
    9838:	eb0018f6 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
    983c:	e1a00004 	mov	r0, r4
    9840:	e30420a4 	movw	r2, #16548	; 0x40a4
    9844:	e3402001 	movt	r2, #1
    9848:	e30f1c54 	movw	r1, #64596	; 0xfc54
    984c:	e3401000 	movt	r1, #0
    9850:	e8bd4010 	pop	{r4, lr}
    9854:	ea0000b1 	b	9b20 <__aeabi_atexit>

00009858 <CMemorySystem::~CMemorySystem()>:
    9858:	e5903000 	ldr	r3, [r0]
    985c:	e92d4070 	push	{r4, r5, r6, lr}
    9860:	e3530000 	cmp	r3, #0
    9864:	e1a04000 	mov	r4, r0
    9868:	0a000005 	beq	9884 <CMemorySystem::~CMemorySystem()+0x2c>
    986c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9870:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    9874:	e3c33005 	bic	r3, r3, #5
    9878:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    987c:	e3a03000 	mov	r3, #0
    9880:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9884:	e594500c 	ldr	r5, [r4, #12]
    9888:	e3550000 	cmp	r5, #0
    988c:	0a000004 	beq	98a4 <CMemorySystem::~CMemorySystem()+0x4c>
    9890:	e1a00005 	mov	r0, r5
    9894:	eb000695 	bl	b2f0 <CPageTable::~CPageTable()>
    9898:	e1a00005 	mov	r0, r5
    989c:	e3a01008 	mov	r1, #8
    98a0:	eb00009c 	bl	9b18 <operator delete(void*, unsigned int)>
    98a4:	e5945008 	ldr	r5, [r4, #8]
    98a8:	e3a03000 	mov	r3, #0
    98ac:	e584300c 	str	r3, [r4, #12]
    98b0:	e1550003 	cmp	r5, r3
    98b4:	0a000004 	beq	98cc <CMemorySystem::~CMemorySystem()+0x74>
    98b8:	e1a00005 	mov	r0, r5
    98bc:	eb00068b 	bl	b2f0 <CPageTable::~CPageTable()>
    98c0:	e1a00005 	mov	r0, r5
    98c4:	e3a01008 	mov	r1, #8
    98c8:	eb000092 	bl	9b18 <operator delete(void*, unsigned int)>
    98cc:	e1a00004 	mov	r0, r4
    98d0:	e8bd8070 	pop	{r4, r5, r6, pc}

000098d4 <CMemorySystem::GetMemSize() const>:
    98d4:	e5900004 	ldr	r0, [r0, #4]
    98d8:	e12fff1e 	bx	lr

000098dc <CMemorySystem::EnableMMU()>:
    98dc:	e5903000 	ldr	r3, [r0]
    98e0:	e92d4010 	push	{r4, lr}
    98e4:	e3530000 	cmp	r3, #0
    98e8:	e1a04000 	mov	r4, r0
    98ec:	0a00001f 	beq	9970 <CMemorySystem::EnableMMU()+0x94>
    98f0:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    98f4:	e3833040 	orr	r3, r3, #64	; 0x40
    98f8:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    98fc:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    9900:	e3130001 	tst	r3, #1
    9904:	1a000020 	bne	998c <CMemorySystem::EnableMMU()+0xb0>
    9908:	e3a03002 	mov	r3, #2
    990c:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    9910:	e5940008 	ldr	r0, [r4, #8]
    9914:	e3500000 	cmp	r0, #0
    9918:	0a00002a 	beq	99c8 <CMemorySystem::EnableMMU()+0xec>
    991c:	eb00067c 	bl	b314 <CPageTable::GetBaseAddress() const>
    9920:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    9924:	e594000c 	ldr	r0, [r4, #12]
    9928:	e3500000 	cmp	r0, #0
    992c:	0a00001d 	beq	99a8 <CMemorySystem::EnableMMU()+0xcc>
    9930:	eb000677 	bl	b314 <CPageTable::GetBaseAddress() const>
    9934:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    9938:	e3a03005 	mov	r3, #5
    993c:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    9940:	eb00190e 	bl	fd80 <InvalidateDataCacheL1Only>
    9944:	e3a03000 	mov	r3, #0
    9948:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    994c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9950:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9954:	f57ff04f 	dsb	sy
    9958:	f57ff06f 	isb	sy
    995c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9960:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    9964:	e3833005 	orr	r3, r3, #5
    9968:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    996c:	e8bd8010 	pop	{r4, pc}
    9970:	e3021110 	movw	r1, #8464	; 0x2110
    9974:	e3401001 	movt	r1, #1
    9978:	e302011c 	movw	r0, #8476	; 0x211c
    997c:	e3400001 	movt	r0, #1
    9980:	e3a020c0 	mov	r2, #192	; 0xc0
    9984:	eb000ae1 	bl	c510 <assertion_failed>
    9988:	eaffffd8 	b	98f0 <CMemorySystem::EnableMMU()+0x14>
    998c:	e3021110 	movw	r1, #8464	; 0x2110
    9990:	e3401001 	movt	r1, #1
    9994:	e302012c 	movw	r0, #8492	; 0x212c
    9998:	e3400001 	movt	r0, #1
    999c:	e3a020cd 	mov	r2, #205	; 0xcd
    99a0:	eb000ada 	bl	c510 <assertion_failed>
    99a4:	eaffffd7 	b	9908 <CMemorySystem::EnableMMU()+0x2c>
    99a8:	e3021110 	movw	r1, #8464	; 0x2110
    99ac:	e3401001 	movt	r1, #1
    99b0:	e3020174 	movw	r0, #8564	; 0x2174
    99b4:	e3400001 	movt	r0, #1
    99b8:	e3a020d7 	mov	r2, #215	; 0xd7
    99bc:	eb000ad3 	bl	c510 <assertion_failed>
    99c0:	e594000c 	ldr	r0, [r4, #12]
    99c4:	eaffffd9 	b	9930 <CMemorySystem::EnableMMU()+0x54>
    99c8:	e3021110 	movw	r1, #8464	; 0x2110
    99cc:	e3401001 	movt	r1, #1
    99d0:	e3020158 	movw	r0, #8536	; 0x2158
    99d4:	e3400001 	movt	r0, #1
    99d8:	e3a020d3 	mov	r2, #211	; 0xd3
    99dc:	eb000acb 	bl	c510 <assertion_failed>
    99e0:	e5940008 	ldr	r0, [r4, #8]
    99e4:	eaffffcc 	b	991c <CMemorySystem::EnableMMU()+0x40>

000099e8 <CMemorySystem::CMemorySystem(int)>:
    99e8:	e92d4030 	push	{r4, r5, lr}
    99ec:	e1a04000 	mov	r4, r0
    99f0:	e3a05000 	mov	r5, #0
    99f4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    99f8:	e28d001c 	add	r0, sp, #28
    99fc:	e8840022 	stm	r4, {r1, r5}
    9a00:	e5845008 	str	r5, [r4, #8]
    9a04:	e584500c 	str	r5, [r4, #12]
    9a08:	ebfffc1e 	bl	8a88 <CBcmPropertyTags::CBcmPropertyTags()>
    9a0c:	e58d5000 	str	r5, [sp]
    9a10:	e28d001c 	add	r0, sp, #28
    9a14:	e3a01005 	mov	r1, #5
    9a18:	e3401001 	movt	r1, #1
    9a1c:	e3a03014 	mov	r3, #20
    9a20:	e28d2008 	add	r2, sp, #8
    9a24:	ebfffc5f 	bl	8ba8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9a28:	e3500000 	cmp	r0, #0
    9a2c:	1a00001a 	bne	9a9c <CMemorySystem::CMemorySystem(int)+0xb4>
    9a30:	e3a01303 	mov	r1, #201326592	; 0xc000000
    9a34:	e58d0014 	str	r0, [sp, #20]
    9a38:	e58d1018 	str	r1, [sp, #24]
    9a3c:	e5841004 	str	r1, [r4, #4]
    9a40:	eb001a8b 	bl	10474 <mem_init>
    9a44:	e5943000 	ldr	r3, [r4]
    9a48:	e3530000 	cmp	r3, #0
    9a4c:	0a00000d 	beq	9a88 <CMemorySystem::CMemorySystem(int)+0xa0>
    9a50:	e3a00008 	mov	r0, #8
    9a54:	eb00002b 	bl	9b08 <operator new(unsigned int)>
    9a58:	e5941004 	ldr	r1, [r4, #4]
    9a5c:	e1a05000 	mov	r5, r0
    9a60:	eb0005d9 	bl	b1cc <CPageTable::CPageTable(unsigned int)>
    9a64:	e5845008 	str	r5, [r4, #8]
    9a68:	e3a00008 	mov	r0, #8
    9a6c:	eb000025 	bl	9b08 <operator new(unsigned int)>
    9a70:	e1a05000 	mov	r5, r0
    9a74:	eb0005a7 	bl	b118 <CPageTable::CPageTable()>
    9a78:	e1a00004 	mov	r0, r4
    9a7c:	e584500c 	str	r5, [r4, #12]
    9a80:	ebffff95 	bl	98dc <CMemorySystem::EnableMMU()>
    9a84:	eb0018ae 	bl	fd44 <CSpinLock::Enable()>
    9a88:	e28d001c 	add	r0, sp, #28
    9a8c:	ebfffc03 	bl	8aa0 <CBcmPropertyTags::~CBcmPropertyTags()>
    9a90:	e1a00004 	mov	r0, r4
    9a94:	e28dd03c 	add	sp, sp, #60	; 0x3c
    9a98:	e8bd8030 	pop	{r4, r5, pc}
    9a9c:	e59d0014 	ldr	r0, [sp, #20]
    9aa0:	e3500000 	cmp	r0, #0
    9aa4:	059d1018 	ldreq	r1, [sp, #24]
    9aa8:	0affffe3 	beq	9a3c <CMemorySystem::CMemorySystem(int)+0x54>
    9aac:	e3021110 	movw	r1, #8464	; 0x2110
    9ab0:	e3401001 	movt	r1, #1
    9ab4:	e3020188 	movw	r0, #8584	; 0x2188
    9ab8:	e3400001 	movt	r0, #1
    9abc:	e3a02042 	mov	r2, #66	; 0x42
    9ac0:	eb000a92 	bl	c510 <assertion_failed>
    9ac4:	e59d1018 	ldr	r1, [sp, #24]
    9ac8:	e59d0014 	ldr	r0, [sp, #20]
    9acc:	eaffffda 	b	9a3c <CMemorySystem::CMemorySystem(int)+0x54>

00009ad0 <CMemorySystem::InitializeSecondary()>:
    9ad0:	e5903000 	ldr	r3, [r0]
    9ad4:	e92d4010 	push	{r4, lr}
    9ad8:	e3530000 	cmp	r3, #0
    9adc:	e1a04000 	mov	r4, r0
    9ae0:	1a000005 	bne	9afc <CMemorySystem::InitializeSecondary()+0x2c>
    9ae4:	e3021110 	movw	r1, #8464	; 0x2110
    9ae8:	e3401001 	movt	r1, #1
    9aec:	e302011c 	movw	r0, #8476	; 0x211c
    9af0:	e3400001 	movt	r0, #1
    9af4:	e3a02073 	mov	r2, #115	; 0x73
    9af8:	eb000a84 	bl	c510 <assertion_failed>
    9afc:	e1a00004 	mov	r0, r4
    9b00:	e8bd4010 	pop	{r4, lr}
    9b04:	eaffff74 	b	98dc <CMemorySystem::EnableMMU()>

00009b08 <operator new(unsigned int)>:
    9b08:	ea001a70 	b	104d0 <malloc>

00009b0c <operator new[](unsigned int)>:
    9b0c:	ea001a6f 	b	104d0 <malloc>

00009b10 <operator delete(void*)>:
    9b10:	ea001ac9 	b	1063c <free>

00009b14 <operator delete[](void*)>:
    9b14:	ea001ac8 	b	1063c <free>

00009b18 <operator delete(void*, unsigned int)>:
    9b18:	ea001ac7 	b	1063c <free>

00009b1c <operator delete[](void*, unsigned int)>:
    9b1c:	ea001ac6 	b	1063c <free>

00009b20 <__aeabi_atexit>:
    9b20:	e12fff1e 	bx	lr

00009b24 <halt>:
    9b24:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
    9b28:	e2131003 	ands	r1, r3, #3
    9b2c:	e3043094 	movw	r3, #16532	; 0x4094
    9b30:	e3403001 	movt	r3, #1
    9b34:	0a000005 	beq	9b50 <halt+0x2c>
    9b38:	e3a02001 	mov	r2, #1
    9b3c:	e7832101 	str	r2, [r3, r1, lsl #2]
    9b40:	f57ff05f 	dmb	sy
    9b44:	f57ff04f 	dsb	sy
    9b48:	e320f003 	wfi
    9b4c:	eafffffc 	b	9b44 <halt+0x20>
    9b50:	e3a02001 	mov	r2, #1
    9b54:	f57ff05f 	dmb	sy
    9b58:	e7930102 	ldr	r0, [r3, r2, lsl #2]
    9b5c:	e2822001 	add	r2, r2, #1
    9b60:	e3500000 	cmp	r0, #0
    9b64:	1a000003 	bne	9b78 <halt+0x54>
    9b68:	f57ff04f 	dsb	sy
    9b6c:	e320f003 	wfi
    9b70:	e3a02001 	mov	r2, #1
    9b74:	eafffff6 	b	9b54 <halt+0x30>
    9b78:	e3520004 	cmp	r2, #4
    9b7c:	1afffff4 	bne	9b54 <halt+0x30>
    9b80:	eaffffec 	b	9b38 <halt+0x14>

00009b84 <reboot>:
    9b84:	e3a03000 	mov	r3, #0
    9b88:	e3433f10 	movt	r3, #16144	; 0x3f10
    9b8c:	e3a01001 	mov	r1, #1
    9b90:	e3451a00 	movt	r1, #23040	; 0x5a00
    9b94:	e3a02020 	mov	r2, #32
    9b98:	e3452a00 	movt	r2, #23040	; 0x5a00
    9b9c:	e5831024 	str	r1, [r3, #36]	; 0x24
    9ba0:	e583201c 	str	r2, [r3, #28]
    9ba4:	eafffffe 	b	9ba4 <reboot+0x20>

00009ba8 <sysinit>:
    9ba8:	e92d4030 	push	{r4, r5, lr}
    9bac:	e24dd01c 	sub	sp, sp, #28
    9bb0:	f1080040 	cpsie	f
    9bb4:	eb001871 	bl	fd80 <InvalidateDataCacheL1Only>
    9bb8:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    9bbc:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    9bc0:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    9bc4:	f57ff06f 	isb	sy
    9bc8:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    9bcc:	eee83a10 	vmsr	fpexc, r3
    9bd0:	e3a01000 	mov	r1, #0
    9bd4:	eee11a10 	vmsr	fpscr, r1
    9bd8:	e3043078 	movw	r3, #16504	; 0x4078
    9bdc:	e3403001 	movt	r3, #1
    9be0:	e3042310 	movw	r2, #17168	; 0x4310
    9be4:	e3402001 	movt	r2, #1
    9be8:	e1530002 	cmp	r3, r2
    9bec:	2a000002 	bcs	9bfc <sysinit+0x54>
    9bf0:	e4c31001 	strb	r1, [r3], #1
    9bf4:	e1530002 	cmp	r3, r2
    9bf8:	1afffffc 	bne	9bf0 <sysinit+0x48>
    9bfc:	e1a0000d 	mov	r0, sp
    9c00:	e3035f88 	movw	r5, #16264	; 0x3f88
    9c04:	e3405001 	movt	r5, #1
    9c08:	e3034f78 	movw	r4, #16248	; 0x3f78
    9c0c:	e3404001 	movt	r4, #1
    9c10:	eb0015e5 	bl	f3ac <CMachineInfo::CMachineInfo()>
    9c14:	e1540005 	cmp	r4, r5
    9c18:	2a000003 	bcs	9c2c <sysinit+0x84>
    9c1c:	e4943004 	ldr	r3, [r4], #4
    9c20:	e12fff33 	blx	r3
    9c24:	e1540005 	cmp	r4, r5
    9c28:	3afffffb 	bcc	9c1c <sysinit+0x74>
    9c2c:	ebfff92d 	bl	80e8 <main>
    9c30:	e3500001 	cmp	r0, #1
    9c34:	0a000000 	beq	9c3c <sysinit+0x94>
    9c38:	ebffffb9 	bl	9b24 <halt>
    9c3c:	ebffffd0 	bl	9b84 <reboot>

00009c40 <sysinit_secondary>:
    9c40:	e92d4010 	push	{r4, lr}
    9c44:	f1080040 	cpsie	f
    9c48:	eb00184c 	bl	fd80 <InvalidateDataCacheL1Only>
    9c4c:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    9c50:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    9c54:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    9c58:	f57ff06f 	isb	sy
    9c5c:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    9c60:	eee83a10 	vmsr	fpexc, r3
    9c64:	e3a03000 	mov	r3, #0
    9c68:	eee13a10 	vmsr	fpscr, r3
    9c6c:	eb0017e8 	bl	fc14 <main_secondary>
    9c70:	ebffffab 	bl	9b24 <halt>

00009c74 <CTimer::CTimer(CInterruptSystem*)>:
    9c74:	e92d4070 	push	{r4, r5, r6, lr}
    9c78:	e1a04000 	mov	r4, r0
    9c7c:	e3a06000 	mov	r6, #0
    9c80:	e2800010 	add	r0, r0, #16
    9c84:	e30450a8 	movw	r5, #16552	; 0x40a8
    9c88:	e3405001 	movt	r5, #1
    9c8c:	e5846004 	str	r6, [r4, #4]
    9c90:	e5841000 	str	r1, [r4]
    9c94:	e3a01001 	mov	r1, #1
    9c98:	e5846008 	str	r6, [r4, #8]
    9c9c:	e584600c 	str	r6, [r4, #12]
    9ca0:	eb0017dc 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
    9ca4:	e5846028 	str	r6, [r4, #40]	; 0x28
    9ca8:	e284002c 	add	r0, r4, #44	; 0x2c
    9cac:	eb0018b0 	bl	ff74 <CPtrList::CPtrList()>
    9cb0:	e2840030 	add	r0, r4, #48	; 0x30
    9cb4:	e3a01001 	mov	r1, #1
    9cb8:	eb0017d6 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
    9cbc:	e5952000 	ldr	r2, [r5]
    9cc0:	e3053730 	movw	r3, #22320	; 0x5730
    9cc4:	e3403005 	movt	r3, #5
    9cc8:	e1520006 	cmp	r2, r6
    9ccc:	e5843048 	str	r3, [r4, #72]	; 0x48
    9cd0:	e300315e 	movw	r3, #350	; 0x15e
    9cd4:	e584304c 	str	r3, [r4, #76]	; 0x4c
    9cd8:	0a000005 	beq	9cf4 <CTimer::CTimer(CInterruptSystem*)+0x80>
    9cdc:	e30211dc 	movw	r1, #8668	; 0x21dc
    9ce0:	e3401001 	movt	r1, #1
    9ce4:	e30201e8 	movw	r0, #8680	; 0x21e8
    9ce8:	e3400001 	movt	r0, #1
    9cec:	e3a0203b 	mov	r2, #59	; 0x3b
    9cf0:	eb000a06 	bl	c510 <assertion_failed>
    9cf4:	e5854000 	str	r4, [r5]
    9cf8:	e1a00004 	mov	r0, r4
    9cfc:	e8bd8070 	pop	{r4, r5, r6, pc}

00009d00 <CTimer::~CTimer()>:
    9d00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9d04:	e1a08000 	mov	r8, r0
    9d08:	e5900000 	ldr	r0, [r0]
    9d0c:	e3500000 	cmp	r0, #0
    9d10:	0a00002f 	beq	9dd4 <CTimer::~CTimer()+0xd4>
    9d14:	e3a01003 	mov	r1, #3
    9d18:	e3047d43 	movw	r7, #19779	; 0x4d43
    9d1c:	e3447b54 	movt	r7, #19284	; 0x4b54
    9d20:	e288402c 	add	r4, r8, #44	; 0x2c
    9d24:	eb0013b6 	bl	ec04 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9d28:	ea000011 	b	9d74 <CTimer::~CTimer()+0x74>
    9d2c:	eb0018b9 	bl	10018 <CPtrList::GetPtr(TPtrListElement*)>
    9d30:	e2506000 	subs	r6, r0, #0
    9d34:	0a00001f 	beq	9db8 <CTimer::~CTimer()+0xb8>
    9d38:	e5963000 	ldr	r3, [r6]
    9d3c:	e30211dc 	movw	r1, #8668	; 0x21dc
    9d40:	e3401001 	movt	r1, #1
    9d44:	e1530007 	cmp	r3, r7
    9d48:	e302021c 	movw	r0, #8732	; 0x221c
    9d4c:	e3400001 	movt	r0, #1
    9d50:	e3a02049 	mov	r2, #73	; 0x49
    9d54:	0a000000 	beq	9d5c <CTimer::~CTimer()+0x5c>
    9d58:	eb0009ec 	bl	c510 <assertion_failed>
    9d5c:	e1a01005 	mov	r1, r5
    9d60:	e1a00004 	mov	r0, r4
    9d64:	eb00194b 	bl	10298 <CPtrList::Remove(TPtrListElement*)>
    9d68:	e1a00006 	mov	r0, r6
    9d6c:	e3a01014 	mov	r1, #20
    9d70:	ebffff68 	bl	9b18 <operator delete(void*, unsigned int)>
    9d74:	e1a00004 	mov	r0, r4
    9d78:	eb00188d 	bl	ffb4 <CPtrList::GetFirst()>
    9d7c:	e2505000 	subs	r5, r0, #0
    9d80:	e1a01005 	mov	r1, r5
    9d84:	e1a00004 	mov	r0, r4
    9d88:	1affffe7 	bne	9d2c <CTimer::~CTimer()+0x2c>
    9d8c:	e30430a8 	movw	r3, #16552	; 0x40a8
    9d90:	e3403001 	movt	r3, #1
    9d94:	e2880030 	add	r0, r8, #48	; 0x30
    9d98:	e5835000 	str	r5, [r3]
    9d9c:	eb0017ac 	bl	fc54 <CSpinLock::~CSpinLock()>
    9da0:	e1a00004 	mov	r0, r4
    9da4:	eb001875 	bl	ff80 <CPtrList::~CPtrList()>
    9da8:	e2880010 	add	r0, r8, #16
    9dac:	eb0017a8 	bl	fc54 <CSpinLock::~CSpinLock()>
    9db0:	e1a00008 	mov	r0, r8
    9db4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9db8:	e30211dc 	movw	r1, #8668	; 0x21dc
    9dbc:	e3401001 	movt	r1, #1
    9dc0:	e3020210 	movw	r0, #8720	; 0x2210
    9dc4:	e3400001 	movt	r0, #1
    9dc8:	e3a02048 	mov	r2, #72	; 0x48
    9dcc:	eb0009cf 	bl	c510 <assertion_failed>
    9dd0:	eaffffd8 	b	9d38 <CTimer::~CTimer()+0x38>
    9dd4:	e30211dc 	movw	r1, #8668	; 0x21dc
    9dd8:	e3401001 	movt	r1, #1
    9ddc:	e30201f8 	movw	r0, #8696	; 0x21f8
    9de0:	e3400001 	movt	r0, #1
    9de4:	e3a02041 	mov	r2, #65	; 0x41
    9de8:	eb0009c8 	bl	c510 <assertion_failed>
    9dec:	e5980000 	ldr	r0, [r8]
    9df0:	eaffffc7 	b	9d14 <CTimer::~CTimer()+0x14>

00009df4 <CTimer::SetTimeZone(int)>:
    9df4:	e2813e59 	add	r3, r1, #1424	; 0x590
    9df8:	e3002b3e 	movw	r2, #2878	; 0xb3e
    9dfc:	e283300f 	add	r3, r3, #15
    9e00:	e1530002 	cmp	r3, r2
    9e04:	95801028 	strls	r1, [r0, #40]	; 0x28
    9e08:	93a00001 	movls	r0, #1
    9e0c:	83a00000 	movhi	r0, #0
    9e10:	e12fff1e 	bx	lr

00009e14 <CTimer::GetTimeZone() const>:
    9e14:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    9e18:	e12fff1e 	bx	lr

00009e1c <CTimer::SetTime(unsigned int, int)>:
    9e1c:	e3520000 	cmp	r2, #0
    9e20:	e92d4070 	push	{r4, r5, r6, lr}
    9e24:	e1a04000 	mov	r4, r0
    9e28:	e1a05001 	mov	r5, r1
    9e2c:	1a000004 	bne	9e44 <CTimer::SetTime(unsigned int, int)+0x28>
    9e30:	e5901028 	ldr	r1, [r0, #40]	; 0x28
    9e34:	e1a03301 	lsl	r3, r1, #6
    9e38:	e0533101 	subs	r3, r3, r1, lsl #2
    9e3c:	4a000008 	bmi	9e64 <CTimer::SetTime(unsigned int, int)+0x48>
    9e40:	e0855003 	add	r5, r5, r3
    9e44:	e2846010 	add	r6, r4, #16
    9e48:	e1a00006 	mov	r0, r6
    9e4c:	eb00178d 	bl	fc88 <CSpinLock::Acquire()>
    9e50:	e1a00006 	mov	r0, r6
    9e54:	e584500c 	str	r5, [r4, #12]
    9e58:	eb0017a6 	bl	fcf8 <CSpinLock::Release()>
    9e5c:	e3a00001 	mov	r0, #1
    9e60:	e8bd8070 	pop	{r4, r5, r6, pc}
    9e64:	e2631000 	rsb	r1, r3, #0
    9e68:	e1510005 	cmp	r1, r5
    9e6c:	dafffff3 	ble	9e40 <CTimer::SetTime(unsigned int, int)+0x24>
    9e70:	e1a00002 	mov	r0, r2
    9e74:	e8bd8070 	pop	{r4, r5, r6, pc}

00009e78 <CTimer::GetClockTicks()>:
    9e78:	e3a03a03 	mov	r3, #12288	; 0x3000
    9e7c:	e3433f00 	movt	r3, #16128	; 0x3f00
    9e80:	e5930004 	ldr	r0, [r3, #4]
    9e84:	e12fff1e 	bx	lr

00009e88 <CTimer::GetTicks() const>:
    9e88:	e5900004 	ldr	r0, [r0, #4]
    9e8c:	e12fff1e 	bx	lr

00009e90 <CTimer::GetUptime() const>:
    9e90:	e5900008 	ldr	r0, [r0, #8]
    9e94:	e12fff1e 	bx	lr

00009e98 <CTimer::GetTime() const>:
    9e98:	e590000c 	ldr	r0, [r0, #12]
    9e9c:	e12fff1e 	bx	lr

00009ea0 <CTimer::GetUniversalTime() const>:
    9ea0:	e5901028 	ldr	r1, [r0, #40]	; 0x28
    9ea4:	e590300c 	ldr	r3, [r0, #12]
    9ea8:	e1a02301 	lsl	r2, r1, #6
    9eac:	e0420101 	sub	r0, r2, r1, lsl #2
    9eb0:	e1500003 	cmp	r0, r3
    9eb4:	d0600003 	rsble	r0, r0, r3
    9eb8:	c3a00000 	movgt	r0, #0
    9ebc:	e12fff1e 	bx	lr

00009ec0 <CTimer::GetTimeString()>:
    9ec0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ec4:	e1a05000 	mov	r5, r0
    9ec8:	e2807010 	add	r7, r0, #16
    9ecc:	e24dd014 	sub	sp, sp, #20
    9ed0:	e1a00007 	mov	r0, r7
    9ed4:	eb00176b 	bl	fc88 <CSpinLock::Acquire()>
    9ed8:	e1a00007 	mov	r0, r7
    9edc:	e595400c 	ldr	r4, [r5, #12]
    9ee0:	e5956004 	ldr	r6, [r5, #4]
    9ee4:	eb001783 	bl	fcf8 <CSpinLock::Release()>
    9ee8:	e1940006 	orrs	r0, r4, r6
    9eec:	0a00005d 	beq	a068 <CTimer::GetTimeString()+0x1a8>
    9ef0:	e3082889 	movw	r2, #34953	; 0x8889
    9ef4:	e3482888 	movt	r2, #34952	; 0x8888
    9ef8:	e30ba3c5 	movw	sl, #46021	; 0xb3c5
    9efc:	e349a1a2 	movt	sl, #37282	; 0x91a2
    9f00:	e0810294 	umull	r0, r1, r4, r2
    9f04:	e3040507 	movw	r0, #17671	; 0x4507
    9f08:	e34c022e 	movt	r0, #49710	; 0xc22e
    9f0c:	e08baa94 	umull	sl, fp, r4, sl
    9f10:	e1a0c2a1 	lsr	ip, r1, #5
    9f14:	e3a0ae19 	mov	sl, #400	; 0x190
    9f18:	e0810094 	umull	r0, r1, r4, r0
    9f1c:	e083229c 	umull	r2, r3, ip, r2
    9f20:	e1a0230c 	lsl	r2, ip, #6
    9f24:	e1a075ab 	lsr	r7, fp, #11
    9f28:	e042810c 	sub	r8, r2, ip, lsl #2
    9f2c:	e308051f 	movw	r0, #34079	; 0x851f
    9f30:	e34501eb 	movt	r0, #20971	; 0x51eb
    9f34:	e1a092a3 	lsr	r9, r3, #5
    9f38:	e0688004 	rsb	r8, r8, r4
    9f3c:	e1a05821 	lsr	r5, r1, #16
    9f40:	e30047b2 	movw	r4, #1970	; 0x7b2
    9f44:	e1a03309 	lsl	r3, r9, #6
    9f48:	e3a0b064 	mov	fp, #100	; 0x64
    9f4c:	e0439109 	sub	r9, r3, r9, lsl #2
    9f50:	e300e16e 	movw	lr, #366	; 0x16e
    9f54:	e069900c 	rsb	r9, r9, ip
    9f58:	e300c16d 	movw	ip, #365	; 0x16d
    9f5c:	ea000001 	b	9f68 <CTimer::GetTimeString()+0xa8>
    9f60:	e0635005 	rsb	r5, r3, r5
    9f64:	e2844001 	add	r4, r4, #1
    9f68:	e0832094 	umull	r2, r3, r4, r0
    9f6c:	e1a012a3 	lsr	r1, r3, #5
    9f70:	e1a033a3 	lsr	r3, r3, #7
    9f74:	e061419b 	mls	r1, fp, r1, r4
    9f78:	e063439a 	mls	r3, sl, r3, r4
    9f7c:	e3510000 	cmp	r1, #0
    9f80:	e16f3f13 	clz	r3, r3
    9f84:	01a032a3 	lsreq	r3, r3, #5
    9f88:	0a000002 	beq	9f98 <CTimer::GetTimeString()+0xd8>
    9f8c:	e3140003 	tst	r4, #3
    9f90:	03a03001 	moveq	r3, #1
    9f94:	13a03000 	movne	r3, #0
    9f98:	e3530000 	cmp	r3, #0
    9f9c:	11a0300e 	movne	r3, lr
    9fa0:	01a0300c 	moveq	r3, ip
    9fa4:	e1550003 	cmp	r5, r3
    9fa8:	2affffec 	bcs	9f60 <CTimer::GetTimeString()+0xa0>
    9fac:	e308251f 	movw	r2, #34079	; 0x851f
    9fb0:	e34521eb 	movt	r2, #20971	; 0x51eb
    9fb4:	e3a0ee19 	mov	lr, #400	; 0x190
    9fb8:	e3140003 	tst	r4, #3
    9fbc:	e0832294 	umull	r2, r3, r4, r2
    9fc0:	e3a0a000 	mov	sl, #0
    9fc4:	03a0c001 	moveq	ip, #1
    9fc8:	13a0c000 	movne	ip, #0
    9fcc:	e151000a 	cmp	r1, sl
    9fd0:	e1a003a3 	lsr	r0, r3, #7
    9fd4:	e30221a4 	movw	r2, #8612	; 0x21a4
    9fd8:	e3402001 	movt	r2, #1
    9fdc:	e063409e 	mls	r3, lr, r0, r4
    9fe0:	11a0100c 	movne	r1, ip
    9fe4:	e16f3f13 	clz	r3, r3
    9fe8:	e1a032a3 	lsr	r3, r3, #5
    9fec:	01a01003 	moveq	r1, r3
    9ff0:	ea000001 	b	9ffc <CTimer::GetTimeString()+0x13c>
    9ff4:	e0635005 	rsb	r5, r3, r5
    9ff8:	e28aa001 	add	sl, sl, #1
    9ffc:	e35a0001 	cmp	sl, #1
    a000:	0a000030 	beq	a0c8 <CTimer::GetTimeString()+0x208>
    a004:	e792310a 	ldr	r3, [r2, sl, lsl #2]
    a008:	e1550003 	cmp	r5, r3
    a00c:	2afffff8 	bcs	9ff4 <CTimer::GetTimeString()+0x134>
    a010:	e308251f 	movw	r2, #34079	; 0x851f
    a014:	e34521eb 	movt	r2, #20971	; 0x51eb
    a018:	e3a01064 	mov	r1, #100	; 0x64
    a01c:	e3a00010 	mov	r0, #16
    a020:	e0832296 	umull	r2, r3, r6, r2
    a024:	e1a0b2a3 	lsr	fp, r3, #5
    a028:	e06b6b91 	mls	fp, r1, fp, r6
    a02c:	ebfffeb5 	bl	9b08 <operator new(unsigned int)>
    a030:	e1a06000 	mov	r6, r0
    a034:	eb000e02 	bl	d844 <CString::CString()>
    a038:	e30037b7 	movw	r3, #1975	; 0x7b7
    a03c:	e1540003 	cmp	r4, r3
    a040:	8a00000a 	bhi	a070 <CTimer::GetTimeString()+0x1b0>
    a044:	e1a00006 	mov	r0, r6
    a048:	e58db004 	str	fp, [sp, #4]
    a04c:	e1a03009 	mov	r3, r9
    a050:	e58d8000 	str	r8, [sp]
    a054:	e1a02007 	mov	r2, r7
    a058:	e3021260 	movw	r1, #8800	; 0x2260
    a05c:	e3401001 	movt	r1, #1
    a060:	eb00111f 	bl	e4e4 <CString::Format(char const*, ...)>
    a064:	e1a00006 	mov	r0, r6
    a068:	e28dd014 	add	sp, sp, #20
    a06c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a070:	e30a0aab 	movw	r0, #43691	; 0xaaab
    a074:	e34a0aaa 	movt	r0, #43690	; 0xaaaa
    a078:	e3032f88 	movw	r2, #16264	; 0x3f88
    a07c:	e3402001 	movt	r2, #1
    a080:	e0810097 	umull	r0, r1, r7, r0
    a084:	e58db00c 	str	fp, [sp, #12]
    a088:	e2853001 	add	r3, r5, #1
    a08c:	e1a0c221 	lsr	ip, r1, #4
    a090:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    a094:	e3021244 	movw	r1, #8772	; 0x2244
    a098:	e3401001 	movt	r1, #1
    a09c:	e1a0028c 	lsl	r0, ip, #5
    a0a0:	e58d8008 	str	r8, [sp, #8]
    a0a4:	e040c18c 	sub	ip, r0, ip, lsl #3
    a0a8:	e58d9004 	str	r9, [sp, #4]
    a0ac:	e1a00006 	mov	r0, r6
    a0b0:	e06c7007 	rsb	r7, ip, r7
    a0b4:	e58d7000 	str	r7, [sp]
    a0b8:	eb001109 	bl	e4e4 <CString::Format(char const*, ...)>
    a0bc:	e1a00006 	mov	r0, r6
    a0c0:	e28dd014 	add	sp, sp, #20
    a0c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0c8:	e3510000 	cmp	r1, #0
    a0cc:	e3a0301d 	mov	r3, #29
    a0d0:	0affffcb 	beq	a004 <CTimer::GetTimeString()+0x144>
    a0d4:	eaffffcb 	b	a008 <CTimer::GetTimeString()+0x148>

0000a0d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    a0d8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0dc:	e1a05000 	mov	r5, r0
    a0e0:	e1a04002 	mov	r4, r2
    a0e4:	e3a00014 	mov	r0, #20
    a0e8:	e1a06001 	mov	r6, r1
    a0ec:	e1a0b003 	mov	fp, r3
    a0f0:	e59da028 	ldr	sl, [sp, #40]	; 0x28
    a0f4:	ebfffe83 	bl	9b08 <operator new(unsigned int)>
    a0f8:	e5957004 	ldr	r7, [r5, #4]
    a0fc:	e3540000 	cmp	r4, #0
    a100:	e1a08000 	mov	r8, r0
    a104:	e0877006 	add	r7, r7, r6
    a108:	0a00003a 	beq	a1f8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
    a10c:	e2859030 	add	r9, r5, #48	; 0x30
    a110:	e285502c 	add	r5, r5, #44	; 0x2c
    a114:	e1a00009 	mov	r0, r9
    a118:	e3046d43 	movw	r6, #19779	; 0x4d43
    a11c:	e3446b54 	movt	r6, #19284	; 0x4b54
    a120:	e5886000 	str	r6, [r8]
    a124:	e9880090 	stmib	r8, {r4, r7}
    a128:	e588b00c 	str	fp, [r8, #12]
    a12c:	e588a010 	str	sl, [r8, #16]
    a130:	eb0016d4 	bl	fc88 <CSpinLock::Acquire()>
    a134:	e1a00005 	mov	r0, r5
    a138:	eb00179d 	bl	ffb4 <CPtrList::GetFirst()>
    a13c:	e2504000 	subs	r4, r0, #0
    a140:	1a000013 	bne	a194 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xbc>
    a144:	ea000026 	b	a1e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    a148:	e59a3000 	ldr	r3, [sl]
    a14c:	e30211dc 	movw	r1, #8668	; 0x21dc
    a150:	e3401001 	movt	r1, #1
    a154:	e1530006 	cmp	r3, r6
    a158:	e3020284 	movw	r0, #8836	; 0x2284
    a15c:	e3400001 	movt	r0, #1
    a160:	e3002116 	movw	r2, #278	; 0x116
    a164:	0a000000 	beq	a16c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    a168:	eb0008e8 	bl	c510 <assertion_failed>
    a16c:	e59a3008 	ldr	r3, [sl, #8]
    a170:	e1a01004 	mov	r1, r4
    a174:	e1a00005 	mov	r0, r5
    a178:	e0673003 	rsb	r3, r7, r3
    a17c:	e3530000 	cmp	r3, #0
    a180:	ca00000f 	bgt	a1c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
    a184:	eb00178c 	bl	ffbc <CPtrList::GetNext(TPtrListElement*)>
    a188:	e3500000 	cmp	r0, #0
    a18c:	0a000014 	beq	a1e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    a190:	e1a04000 	mov	r4, r0
    a194:	e1a01004 	mov	r1, r4
    a198:	e1a00005 	mov	r0, r5
    a19c:	eb00179d 	bl	10018 <CPtrList::GetPtr(TPtrListElement*)>
    a1a0:	e250a000 	subs	sl, r0, #0
    a1a4:	1affffe7 	bne	a148 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x70>
    a1a8:	e30211dc 	movw	r1, #8668	; 0x21dc
    a1ac:	e3401001 	movt	r1, #1
    a1b0:	e3020274 	movw	r0, #8820	; 0x2274
    a1b4:	e3400001 	movt	r0, #1
    a1b8:	e3002115 	movw	r2, #277	; 0x115
    a1bc:	eb0008d3 	bl	c510 <assertion_failed>
    a1c0:	eaffffe0 	b	a148 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x70>
    a1c4:	e1a01004 	mov	r1, r4
    a1c8:	e1a00005 	mov	r0, r5
    a1cc:	e1a02008 	mov	r2, r8
    a1d0:	eb0017a7 	bl	10074 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    a1d4:	e1a00009 	mov	r0, r9
    a1d8:	eb0016c6 	bl	fcf8 <CSpinLock::Release()>
    a1dc:	e1a00008 	mov	r0, r8
    a1e0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1e4:	e1a01004 	mov	r1, r4
    a1e8:	e1a00005 	mov	r0, r5
    a1ec:	e1a02008 	mov	r2, r8
    a1f0:	eb0017e5 	bl	1018c <CPtrList::InsertAfter(TPtrListElement*, void*)>
    a1f4:	eafffff6 	b	a1d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    a1f8:	e30211dc 	movw	r1, #8668	; 0x21dc
    a1fc:	e3401001 	movt	r1, #1
    a200:	e3030550 	movw	r0, #13648	; 0x3550
    a204:	e3400001 	movt	r0, #1
    a208:	e3002105 	movw	r2, #261	; 0x105
    a20c:	eb0008bf 	bl	c510 <assertion_failed>
    a210:	eaffffbd 	b	a10c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x34>

0000a214 <CTimer::CancelKernelTimer(unsigned int)>:
    a214:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a218:	e2515000 	subs	r5, r1, #0
    a21c:	e1a04000 	mov	r4, r0
    a220:	0a00001e 	beq	a2a0 <CTimer::CancelKernelTimer(unsigned int)+0x8c>
    a224:	e2846030 	add	r6, r4, #48	; 0x30
    a228:	e284402c 	add	r4, r4, #44	; 0x2c
    a22c:	e1a00006 	mov	r0, r6
    a230:	eb001694 	bl	fc88 <CSpinLock::Acquire()>
    a234:	e1a00004 	mov	r0, r4
    a238:	e1a01005 	mov	r1, r5
    a23c:	eb001871 	bl	10408 <CPtrList::Find(void*)>
    a240:	e2507000 	subs	r7, r0, #0
    a244:	0a000012 	beq	a294 <CTimer::CancelKernelTimer(unsigned int)+0x80>
    a248:	e5952000 	ldr	r2, [r5]
    a24c:	e3043d43 	movw	r3, #19779	; 0x4d43
    a250:	e3443b54 	movt	r3, #19284	; 0x4b54
    a254:	e1520003 	cmp	r2, r3
    a258:	0a000005 	beq	a274 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    a25c:	e30211dc 	movw	r1, #8668	; 0x21dc
    a260:	e3401001 	movt	r1, #1
    a264:	e302021c 	movw	r0, #8732	; 0x221c
    a268:	e3400001 	movt	r0, #1
    a26c:	e3002139 	movw	r2, #313	; 0x139
    a270:	eb0008a6 	bl	c510 <assertion_failed>
    a274:	e1a01007 	mov	r1, r7
    a278:	e1a00004 	mov	r0, r4
    a27c:	eb001805 	bl	10298 <CPtrList::Remove(TPtrListElement*)>
    a280:	e3a03000 	mov	r3, #0
    a284:	e1a00005 	mov	r0, r5
    a288:	e5853000 	str	r3, [r5]
    a28c:	e3a01014 	mov	r1, #20
    a290:	ebfffe20 	bl	9b18 <operator delete(void*, unsigned int)>
    a294:	e1a00006 	mov	r0, r6
    a298:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a29c:	ea001695 	b	fcf8 <CSpinLock::Release()>
    a2a0:	e30211dc 	movw	r1, #8668	; 0x21dc
    a2a4:	e3401001 	movt	r1, #1
    a2a8:	e3020210 	movw	r0, #8720	; 0x2210
    a2ac:	e3400001 	movt	r0, #1
    a2b0:	e3002132 	movw	r2, #306	; 0x132
    a2b4:	eb000895 	bl	c510 <assertion_failed>
    a2b8:	eaffffd9 	b	a224 <CTimer::CancelKernelTimer(unsigned int)+0x10>

0000a2bc <CTimer::PollKernelTimers()>:
    a2bc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2c0:	e2807030 	add	r7, r0, #48	; 0x30
    a2c4:	e280602c 	add	r6, r0, #44	; 0x2c
    a2c8:	e1a08000 	mov	r8, r0
    a2cc:	e1a00007 	mov	r0, r7
    a2d0:	eb00166c 	bl	fc88 <CSpinLock::Acquire()>
    a2d4:	e1a00006 	mov	r0, r6
    a2d8:	eb001735 	bl	ffb4 <CPtrList::GetFirst()>
    a2dc:	e2505000 	subs	r5, r0, #0
    a2e0:	13049d43 	movwne	r9, #19779	; 0x4d43
    a2e4:	13449b54 	movtne	r9, #19284	; 0x4b54
    a2e8:	1a000028 	bne	a390 <CTimer::PollKernelTimers()+0xd4>
    a2ec:	ea000033 	b	a3c0 <CTimer::PollKernelTimers()+0x104>
    a2f0:	e5943000 	ldr	r3, [r4]
    a2f4:	e30211dc 	movw	r1, #8668	; 0x21dc
    a2f8:	e3401001 	movt	r1, #1
    a2fc:	e1530009 	cmp	r3, r9
    a300:	e302021c 	movw	r0, #8732	; 0x221c
    a304:	e3400001 	movt	r0, #1
    a308:	e300214f 	movw	r2, #335	; 0x14f
    a30c:	0a000000 	beq	a314 <CTimer::PollKernelTimers()+0x58>
    a310:	eb00087e 	bl	c510 <assertion_failed>
    a314:	e5982004 	ldr	r2, [r8, #4]
    a318:	e1a01005 	mov	r1, r5
    a31c:	e5943008 	ldr	r3, [r4, #8]
    a320:	e1a00006 	mov	r0, r6
    a324:	e0623003 	rsb	r3, r2, r3
    a328:	e3530000 	cmp	r3, #0
    a32c:	ca000023 	bgt	a3c0 <CTimer::PollKernelTimers()+0x104>
    a330:	eb001721 	bl	ffbc <CPtrList::GetNext(TPtrListElement*)>
    a334:	e1a01005 	mov	r1, r5
    a338:	e1a0a000 	mov	sl, r0
    a33c:	e1a00006 	mov	r0, r6
    a340:	eb0017d4 	bl	10298 <CPtrList::Remove(TPtrListElement*)>
    a344:	e1a00007 	mov	r0, r7
    a348:	eb00166a 	bl	fcf8 <CSpinLock::Release()>
    a34c:	e594b004 	ldr	fp, [r4, #4]
    a350:	e1a0500a 	mov	r5, sl
    a354:	e35b0000 	cmp	fp, #0
    a358:	0a00001b 	beq	a3cc <CTimer::PollKernelTimers()+0x110>
    a35c:	e5942010 	ldr	r2, [r4, #16]
    a360:	e1a00004 	mov	r0, r4
    a364:	e594100c 	ldr	r1, [r4, #12]
    a368:	e12fff3b 	blx	fp
    a36c:	e3a03000 	mov	r3, #0
    a370:	e1a00004 	mov	r0, r4
    a374:	e5843000 	str	r3, [r4]
    a378:	e3a01014 	mov	r1, #20
    a37c:	ebfffde5 	bl	9b18 <operator delete(void*, unsigned int)>
    a380:	e1a00007 	mov	r0, r7
    a384:	eb00163f 	bl	fc88 <CSpinLock::Acquire()>
    a388:	e35a0000 	cmp	sl, #0
    a38c:	0a00000b 	beq	a3c0 <CTimer::PollKernelTimers()+0x104>
    a390:	e1a01005 	mov	r1, r5
    a394:	e1a00006 	mov	r0, r6
    a398:	eb00171e 	bl	10018 <CPtrList::GetPtr(TPtrListElement*)>
    a39c:	e2504000 	subs	r4, r0, #0
    a3a0:	1affffd2 	bne	a2f0 <CTimer::PollKernelTimers()+0x34>
    a3a4:	e30211dc 	movw	r1, #8668	; 0x21dc
    a3a8:	e3401001 	movt	r1, #1
    a3ac:	e3020210 	movw	r0, #8720	; 0x2210
    a3b0:	e3400001 	movt	r0, #1
    a3b4:	e300214e 	movw	r2, #334	; 0x14e
    a3b8:	eb000854 	bl	c510 <assertion_failed>
    a3bc:	eaffffcb 	b	a2f0 <CTimer::PollKernelTimers()+0x34>
    a3c0:	e1a00007 	mov	r0, r7
    a3c4:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3c8:	ea00164a 	b	fcf8 <CSpinLock::Release()>
    a3cc:	e30211dc 	movw	r1, #8668	; 0x21dc
    a3d0:	e3401001 	movt	r1, #1
    a3d4:	e3030550 	movw	r0, #13648	; 0x3550
    a3d8:	e3400001 	movt	r0, #1
    a3dc:	e300215d 	movw	r2, #349	; 0x15d
    a3e0:	eb00084a 	bl	c510 <assertion_failed>
    a3e4:	eaffffdc 	b	a35c <CTimer::PollKernelTimers()+0xa0>

0000a3e8 <CTimer::InterruptHandler()>:
    a3e8:	e3a03a03 	mov	r3, #12288	; 0x3000
    a3ec:	e3433f00 	movt	r3, #16128	; 0x3f00
    a3f0:	e92d4070 	push	{r4, r5, r6, lr}
    a3f4:	e5933000 	ldr	r3, [r3]
    a3f8:	e1a04000 	mov	r4, r0
    a3fc:	e3130008 	tst	r3, #8
    a400:	0a000028 	beq	a4a8 <CTimer::InterruptHandler()+0xc0>
    a404:	e3a02a03 	mov	r2, #12288	; 0x3000
    a408:	e3432f00 	movt	r2, #16128	; 0x3f00
    a40c:	e2845010 	add	r5, r4, #16
    a410:	e1a00005 	mov	r0, r5
    a414:	e5923018 	ldr	r3, [r2, #24]
    a418:	e2833c27 	add	r3, r3, #9984	; 0x2700
    a41c:	e2833010 	add	r3, r3, #16
    a420:	e5823018 	str	r3, [r2, #24]
    a424:	e5921004 	ldr	r1, [r2, #4]
    a428:	e1530001 	cmp	r3, r1
    a42c:	35923004 	ldrcc	r3, [r2, #4]
    a430:	32833c27 	addcc	r3, r3, #9984	; 0x2700
    a434:	32833010 	addcc	r3, r3, #16
    a438:	35823018 	strcc	r3, [r2, #24]
    a43c:	e3a03a03 	mov	r3, #12288	; 0x3000
    a440:	e3433f00 	movt	r3, #16128	; 0x3f00
    a444:	e3a02008 	mov	r2, #8
    a448:	e5832000 	str	r2, [r3]
    a44c:	eb00160d 	bl	fc88 <CSpinLock::Acquire()>
    a450:	e5943004 	ldr	r3, [r4, #4]
    a454:	e308051f 	movw	r0, #34079	; 0x851f
    a458:	e34501eb 	movt	r0, #20971	; 0x51eb
    a45c:	e2833001 	add	r3, r3, #1
    a460:	e3a0c064 	mov	ip, #100	; 0x64
    a464:	e5843004 	str	r3, [r4, #4]
    a468:	e0810093 	umull	r0, r1, r3, r0
    a46c:	e1a022a1 	lsr	r2, r1, #5
    a470:	e063329c 	mls	r3, ip, r2, r3
    a474:	e3530000 	cmp	r3, #0
    a478:	1a000005 	bne	a494 <CTimer::InterruptHandler()+0xac>
    a47c:	e5943008 	ldr	r3, [r4, #8]
    a480:	e2833001 	add	r3, r3, #1
    a484:	e5843008 	str	r3, [r4, #8]
    a488:	e594300c 	ldr	r3, [r4, #12]
    a48c:	e2833001 	add	r3, r3, #1
    a490:	e584300c 	str	r3, [r4, #12]
    a494:	e1a00005 	mov	r0, r5
    a498:	eb001616 	bl	fcf8 <CSpinLock::Release()>
    a49c:	e1a00004 	mov	r0, r4
    a4a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    a4a4:	eaffff84 	b	a2bc <CTimer::PollKernelTimers()>
    a4a8:	e30211dc 	movw	r1, #8668	; 0x21dc
    a4ac:	e3401001 	movt	r1, #1
    a4b0:	e30202ac 	movw	r0, #8876	; 0x22ac
    a4b4:	e3400001 	movt	r0, #1
    a4b8:	e300216f 	movw	r2, #367	; 0x16f
    a4bc:	eb000813 	bl	c510 <assertion_failed>
    a4c0:	eaffffcf 	b	a404 <CTimer::InterruptHandler()+0x1c>

0000a4c4 <CTimer::InterruptHandler(void*)>:
    a4c4:	e92d4010 	push	{r4, lr}
    a4c8:	e2504000 	subs	r4, r0, #0
    a4cc:	0a000002 	beq	a4dc <CTimer::InterruptHandler(void*)+0x18>
    a4d0:	e1a00004 	mov	r0, r4
    a4d4:	e8bd4010 	pop	{r4, lr}
    a4d8:	eaffffc2 	b	a3e8 <CTimer::InterruptHandler()>
    a4dc:	e30211dc 	movw	r1, #8668	; 0x21dc
    a4e0:	e3401001 	movt	r1, #1
    a4e4:	e30202d0 	movw	r0, #8912	; 0x22d0
    a4e8:	e3400001 	movt	r0, #1
    a4ec:	e3002191 	movw	r2, #401	; 0x191
    a4f0:	eb000806 	bl	c510 <assertion_failed>
    a4f4:	e1a00004 	mov	r0, r4
    a4f8:	e8bd4010 	pop	{r4, lr}
    a4fc:	eaffffb9 	b	a3e8 <CTimer::InterruptHandler()>

0000a500 <CTimer::TuneMsDelay()>:
    a500:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a504:	e1a04000 	mov	r4, r0
    a508:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a50c:	e24dd00c 	sub	sp, sp, #12
    a510:	e308651f 	movw	r6, #34079	; 0x851f
    a514:	e34561eb 	movt	r6, #20971	; 0x51eb
    a518:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    a51c:	e5945004 	ldr	r5, [r4, #4]
    a520:	e0000390 	mul	r0, r0, r3
    a524:	eb000ffb 	bl	e518 <DelayLoop>
    a528:	e5943004 	ldr	r3, [r4, #4]
    a52c:	e3021710 	movw	r1, #10000	; 0x2710
    a530:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    a534:	e0653003 	rsb	r3, r5, r3
    a538:	e3042dd3 	movw	r2, #19923	; 0x4dd3
    a53c:	e3412062 	movt	r2, #4194	; 0x1062
    a540:	e735f311 	udiv	r5, r1, r3
    a544:	e0000590 	mul	r0, r0, r5
    a548:	e0810690 	umull	r0, r1, r0, r6
    a54c:	e0876695 	umull	r6, r7, r5, r6
    a550:	e1a032a1 	lsr	r3, r1, #5
    a554:	e5843048 	str	r3, [r4, #72]	; 0x48
    a558:	e2833f7d 	add	r3, r3, #500	; 0x1f4
    a55c:	e0832293 	umull	r2, r3, r3, r2
    a560:	e1a03323 	lsr	r3, r3, #6
    a564:	e584304c 	str	r3, [r4, #76]	; 0x4c
    a568:	eb00095e 	bl	cae8 <CLogger::Get()>
    a56c:	e1a0c2a7 	lsr	ip, r7, #5
    a570:	e3a0e064 	mov	lr, #100	; 0x64
    a574:	e3a02003 	mov	r2, #3
    a578:	e58dc000 	str	ip, [sp]
    a57c:	e30232dc 	movw	r3, #8924	; 0x22dc
    a580:	e3403001 	movt	r3, #1
    a584:	e0655c9e 	mls	r5, lr, ip, r5
    a588:	e58d5004 	str	r5, [sp, #4]
    a58c:	e30211d4 	movw	r1, #8660	; 0x21d4
    a590:	e3401001 	movt	r1, #1
    a594:	eb000a21 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a598:	e28dd00c 	add	sp, sp, #12
    a59c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000a5a0 <CTimer::Initialize()>:
    a5a0:	e92d4010 	push	{r4, lr}
    a5a4:	e1a04000 	mov	r4, r0
    a5a8:	e5900000 	ldr	r0, [r0]
    a5ac:	e3500000 	cmp	r0, #0
    a5b0:	0a000011 	beq	a5fc <CTimer::Initialize()+0x5c>
    a5b4:	e1a03004 	mov	r3, r4
    a5b8:	e3a01003 	mov	r1, #3
    a5bc:	e30a24c4 	movw	r2, #42180	; 0xa4c4
    a5c0:	e3402000 	movt	r2, #0
    a5c4:	eb001155 	bl	eb20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    a5c8:	e3a02a03 	mov	r2, #12288	; 0x3000
    a5cc:	e3432f00 	movt	r2, #16128	; 0x3f00
    a5d0:	e3a03df2 	mov	r3, #15488	; 0x3c80
    a5d4:	e34f3e36 	movt	r3, #65078	; 0xfe36
    a5d8:	e1a00004 	mov	r0, r4
    a5dc:	e5823004 	str	r3, [r2, #4]
    a5e0:	e5923004 	ldr	r3, [r2, #4]
    a5e4:	e2833c27 	add	r3, r3, #9984	; 0x2700
    a5e8:	e2833010 	add	r3, r3, #16
    a5ec:	e5823018 	str	r3, [r2, #24]
    a5f0:	ebffffc2 	bl	a500 <CTimer::TuneMsDelay()>
    a5f4:	e3a00001 	mov	r0, #1
    a5f8:	e8bd8010 	pop	{r4, pc}
    a5fc:	e30211dc 	movw	r1, #8668	; 0x21dc
    a600:	e3401001 	movt	r1, #1
    a604:	e30201f8 	movw	r0, #8696	; 0x21f8
    a608:	e3400001 	movt	r0, #1
    a60c:	e3a02055 	mov	r2, #85	; 0x55
    a610:	eb0007be 	bl	c510 <assertion_failed>
    a614:	e5940000 	ldr	r0, [r4]
    a618:	eaffffe5 	b	a5b4 <CTimer::Initialize()+0x14>

0000a61c <CTimer::SimpleMsDelay(unsigned int)>:
    a61c:	e3500000 	cmp	r0, #0
    a620:	012fff1e 	bxeq	lr
    a624:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    a628:	e0000093 	mul	r0, r3, r0
    a62c:	e3500000 	cmp	r0, #0
    a630:	012fff1e 	bxeq	lr
    a634:	e3a03a03 	mov	r3, #12288	; 0x3000
    a638:	e3433f00 	movt	r3, #16128	; 0x3f00
    a63c:	e2800001 	add	r0, r0, #1
    a640:	e1a01003 	mov	r1, r3
    a644:	e5932004 	ldr	r2, [r3, #4]
    a648:	e5913004 	ldr	r3, [r1, #4]
    a64c:	e0623003 	rsb	r3, r2, r3
    a650:	e1500003 	cmp	r0, r3
    a654:	8afffffb 	bhi	a648 <CTimer::SimpleMsDelay(unsigned int)+0x2c>
    a658:	e12fff1e 	bx	lr

0000a65c <CTimer::SimpleusDelay(unsigned int)>:
    a65c:	e3500000 	cmp	r0, #0
    a660:	012fff1e 	bxeq	lr
    a664:	e3a03a03 	mov	r3, #12288	; 0x3000
    a668:	e3433f00 	movt	r3, #16128	; 0x3f00
    a66c:	e2800001 	add	r0, r0, #1
    a670:	e1a01003 	mov	r1, r3
    a674:	e5932004 	ldr	r2, [r3, #4]
    a678:	e5913004 	ldr	r3, [r1, #4]
    a67c:	e0623003 	rsb	r3, r2, r3
    a680:	e1500003 	cmp	r0, r3
    a684:	8afffffb 	bhi	a678 <CTimer::SimpleusDelay(unsigned int)+0x1c>
    a688:	e12fff1e 	bx	lr

0000a68c <CTimer::IsLeapYear(unsigned int)>:
    a68c:	e308251f 	movw	r2, #34079	; 0x851f
    a690:	e34521eb 	movt	r2, #20971	; 0x51eb
    a694:	e3a0c064 	mov	ip, #100	; 0x64
    a698:	e0832290 	umull	r2, r3, r0, r2
    a69c:	e1a012a3 	lsr	r1, r3, #5
    a6a0:	e061019c 	mls	r1, ip, r1, r0
    a6a4:	e3510000 	cmp	r1, #0
    a6a8:	0a000003 	beq	a6bc <CTimer::IsLeapYear(unsigned int)+0x30>
    a6ac:	e3100003 	tst	r0, #3
    a6b0:	03a00001 	moveq	r0, #1
    a6b4:	13a00000 	movne	r0, #0
    a6b8:	e12fff1e 	bx	lr
    a6bc:	e1a033a3 	lsr	r3, r3, #7
    a6c0:	e3a02e19 	mov	r2, #400	; 0x190
    a6c4:	e0600392 	mls	r0, r2, r3, r0
    a6c8:	e16f0f10 	clz	r0, r0
    a6cc:	e1a002a0 	lsr	r0, r0, #5
    a6d0:	e12fff1e 	bx	lr

0000a6d4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    a6d4:	e3500001 	cmp	r0, #1
    a6d8:	0a000003 	beq	a6ec <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    a6dc:	e30231a4 	movw	r3, #8612	; 0x21a4
    a6e0:	e3403001 	movt	r3, #1
    a6e4:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    a6e8:	e12fff1e 	bx	lr
    a6ec:	e308251f 	movw	r2, #34079	; 0x851f
    a6f0:	e34521eb 	movt	r2, #20971	; 0x51eb
    a6f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a6f8:	e0832291 	umull	r2, r3, r1, r2
    a6fc:	e3a0e064 	mov	lr, #100	; 0x64
    a700:	e1a0c2a3 	lsr	ip, r3, #5
    a704:	e06c1c9e 	mls	ip, lr, ip, r1
    a708:	e35c0000 	cmp	ip, #0
    a70c:	0a000008 	beq	a734 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    a710:	e3110003 	tst	r1, #3
    a714:	03a01001 	moveq	r1, #1
    a718:	13a01000 	movne	r1, #0
    a71c:	e3510000 	cmp	r1, #0
    a720:	030231a4 	movweq	r3, #8612	; 0x21a4
    a724:	13a0001d 	movne	r0, #29
    a728:	03403001 	movteq	r3, #1
    a72c:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    a730:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a734:	e1a033a3 	lsr	r3, r3, #7
    a738:	e3a02e19 	mov	r2, #400	; 0x190
    a73c:	e0611392 	mls	r1, r2, r3, r1
    a740:	e16f1f11 	clz	r1, r1
    a744:	e1a012a1 	lsr	r1, r1, #5
    a748:	eafffff3 	b	a71c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000a74c <CTimer::Get()>:
    a74c:	e92d4010 	push	{r4, lr}
    a750:	e30440a8 	movw	r4, #16552	; 0x40a8
    a754:	e3404001 	movt	r4, #1
    a758:	e5940000 	ldr	r0, [r4]
    a75c:	e3500000 	cmp	r0, #0
    a760:	18bd8010 	popne	{r4, pc}
    a764:	e30021d6 	movw	r2, #470	; 0x1d6
    a768:	e30211dc 	movw	r1, #8668	; 0x21dc
    a76c:	e3401001 	movt	r1, #1
    a770:	e30202f4 	movw	r0, #8948	; 0x22f4
    a774:	e3400001 	movt	r0, #1
    a778:	eb000764 	bl	c510 <assertion_failed>
    a77c:	e5940000 	ldr	r0, [r4]
    a780:	e8bd8010 	pop	{r4, pc}

0000a784 <memset>:
    a784:	e3520000 	cmp	r2, #0
    a788:	012fff1e 	bxeq	lr
    a78c:	e6af1071 	sxtb	r1, r1
    a790:	e0802002 	add	r2, r0, r2
    a794:	e1a03000 	mov	r3, r0
    a798:	e4c31001 	strb	r1, [r3], #1
    a79c:	e1530002 	cmp	r3, r2
    a7a0:	1afffffc 	bne	a798 <memset+0x14>
    a7a4:	e12fff1e 	bx	lr

0000a7a8 <memcmp>:
    a7a8:	e3520000 	cmp	r2, #0
    a7ac:	0a00000e 	beq	a7ec <memcmp+0x44>
    a7b0:	e5d0c000 	ldrb	ip, [r0]
    a7b4:	e5d13000 	ldrb	r3, [r1]
    a7b8:	e15c0003 	cmp	ip, r3
    a7bc:	8a00000c 	bhi	a7f4 <memcmp+0x4c>
    a7c0:	3a00000d 	bcc	a7fc <memcmp+0x54>
    a7c4:	e0802002 	add	r2, r0, r2
    a7c8:	e2800001 	add	r0, r0, #1
    a7cc:	ea000004 	b	a7e4 <memcmp+0x3c>
    a7d0:	e4d0c001 	ldrb	ip, [r0], #1
    a7d4:	e5f13001 	ldrb	r3, [r1, #1]!
    a7d8:	e15c0003 	cmp	ip, r3
    a7dc:	8a000004 	bhi	a7f4 <memcmp+0x4c>
    a7e0:	3a000005 	bcc	a7fc <memcmp+0x54>
    a7e4:	e1500002 	cmp	r0, r2
    a7e8:	1afffff8 	bne	a7d0 <memcmp+0x28>
    a7ec:	e3a00000 	mov	r0, #0
    a7f0:	e12fff1e 	bx	lr
    a7f4:	e3a00001 	mov	r0, #1
    a7f8:	e12fff1e 	bx	lr
    a7fc:	e3e00000 	mvn	r0, #0
    a800:	e12fff1e 	bx	lr

0000a804 <strlen>:
    a804:	e1d010d0 	ldrsb	r1, [r0]
    a808:	e2803001 	add	r3, r0, #1
    a80c:	e3510000 	cmp	r1, #0
    a810:	0a000003 	beq	a824 <strlen+0x20>
    a814:	e0601003 	rsb	r1, r0, r3
    a818:	e0d320d1 	ldrsb	r2, [r3], #1
    a81c:	e3520000 	cmp	r2, #0
    a820:	1afffffb 	bne	a814 <strlen+0x10>
    a824:	e1a00001 	mov	r0, r1
    a828:	e12fff1e 	bx	lr

0000a82c <strcmp>:
    a82c:	e1d020d0 	ldrsb	r2, [r0]
    a830:	e1d130d0 	ldrsb	r3, [r1]
    a834:	e3520000 	cmp	r2, #0
    a838:	1a000007 	bne	a85c <strcmp+0x30>
    a83c:	ea000008 	b	a864 <strcmp+0x38>
    a840:	e1520003 	cmp	r2, r3
    a844:	ca00000b 	bgt	a878 <strcmp+0x4c>
    a848:	ba00000c 	blt	a880 <strcmp+0x54>
    a84c:	e1f020d1 	ldrsb	r2, [r0, #1]!
    a850:	e3520000 	cmp	r2, #0
    a854:	0a00000b 	beq	a888 <strcmp+0x5c>
    a858:	e1f130d1 	ldrsb	r3, [r1, #1]!
    a85c:	e3530000 	cmp	r3, #0
    a860:	1afffff6 	bne	a840 <strcmp+0x14>
    a864:	e1520003 	cmp	r2, r3
    a868:	ca000002 	bgt	a878 <strcmp+0x4c>
    a86c:	b3e00000 	mvnlt	r0, #0
    a870:	a3a00000 	movge	r0, #0
    a874:	e12fff1e 	bx	lr
    a878:	e3a00001 	mov	r0, #1
    a87c:	e12fff1e 	bx	lr
    a880:	e3e00000 	mvn	r0, #0
    a884:	e12fff1e 	bx	lr
    a888:	e1d130d1 	ldrsb	r3, [r1, #1]
    a88c:	e1520003 	cmp	r2, r3
    a890:	dafffff5 	ble	a86c <strcmp+0x40>
    a894:	eafffff7 	b	a878 <strcmp+0x4c>

0000a898 <strcpy>:
    a898:	e1d130d0 	ldrsb	r3, [r1]
    a89c:	e1a02000 	mov	r2, r0
    a8a0:	e3530000 	cmp	r3, #0
    a8a4:	0a000003 	beq	a8b8 <strcpy+0x20>
    a8a8:	e4c23001 	strb	r3, [r2], #1
    a8ac:	e1f130d1 	ldrsb	r3, [r1, #1]!
    a8b0:	e3530000 	cmp	r3, #0
    a8b4:	1afffffb 	bne	a8a8 <strcpy+0x10>
    a8b8:	e3a03000 	mov	r3, #0
    a8bc:	e5c23000 	strb	r3, [r2]
    a8c0:	e12fff1e 	bx	lr

0000a8c4 <strncpy>:
    a8c4:	e3520000 	cmp	r2, #0
    a8c8:	012fff1e 	bxeq	lr
    a8cc:	e1d130d0 	ldrsb	r3, [r1]
    a8d0:	e3530000 	cmp	r3, #0
    a8d4:	0a00000a 	beq	a904 <strncpy+0x40>
    a8d8:	e0812002 	add	r2, r1, r2
    a8dc:	e1a0c000 	mov	ip, r0
    a8e0:	e2811001 	add	r1, r1, #1
    a8e4:	ea000002 	b	a8f4 <strncpy+0x30>
    a8e8:	e0d130d1 	ldrsb	r3, [r1], #1
    a8ec:	e3530000 	cmp	r3, #0
    a8f0:	0a000004 	beq	a908 <strncpy+0x44>
    a8f4:	e1510002 	cmp	r1, r2
    a8f8:	e4cc3001 	strb	r3, [ip], #1
    a8fc:	1afffff9 	bne	a8e8 <strncpy+0x24>
    a900:	e12fff1e 	bx	lr
    a904:	e1a0c000 	mov	ip, r0
    a908:	e3a03000 	mov	r3, #0
    a90c:	e5cc3000 	strb	r3, [ip]
    a910:	e12fff1e 	bx	lr

0000a914 <strcat>:
    a914:	e1d030d0 	ldrsb	r3, [r0]
    a918:	e3530000 	cmp	r3, #0
    a91c:	e1a03000 	mov	r3, r0
    a920:	0a000002 	beq	a930 <strcat+0x1c>
    a924:	e1f320d1 	ldrsb	r2, [r3, #1]!
    a928:	e3520000 	cmp	r2, #0
    a92c:	1afffffc 	bne	a924 <strcat+0x10>
    a930:	e1d120d0 	ldrsb	r2, [r1]
    a934:	e3520000 	cmp	r2, #0
    a938:	0a000003 	beq	a94c <strcat+0x38>
    a93c:	e4c32001 	strb	r2, [r3], #1
    a940:	e1f120d1 	ldrsb	r2, [r1, #1]!
    a944:	e3520000 	cmp	r2, #0
    a948:	1afffffb 	bne	a93c <strcat+0x28>
    a94c:	e3a02000 	mov	r2, #0
    a950:	e5c32000 	strb	r2, [r3]
    a954:	e12fff1e 	bx	lr

0000a958 <strchr>:
    a958:	e1d020d0 	ldrsb	r2, [r0]
    a95c:	e3520000 	cmp	r2, #0
    a960:	0a000009 	beq	a98c <strchr+0x34>
    a964:	e1510002 	cmp	r1, r2
    a968:	1a000002 	bne	a978 <strchr+0x20>
    a96c:	ea000008 	b	a994 <strchr+0x3c>
    a970:	e1530001 	cmp	r3, r1
    a974:	012fff1e 	bxeq	lr
    a978:	e1f030d1 	ldrsb	r3, [r0, #1]!
    a97c:	e3530000 	cmp	r3, #0
    a980:	1afffffa 	bne	a970 <strchr+0x18>
    a984:	e1a00003 	mov	r0, r3
    a988:	e12fff1e 	bx	lr
    a98c:	e1a00002 	mov	r0, r2
    a990:	e12fff1e 	bx	lr
    a994:	e12fff1e 	bx	lr

0000a998 <strtok_r>:
    a998:	e3500000 	cmp	r0, #0
    a99c:	e92d4030 	push	{r4, r5, lr}
    a9a0:	0a00002b 	beq	aa54 <strtok_r+0xbc>
    a9a4:	e1d0e0d0 	ldrsb	lr, [r0]
    a9a8:	e35e0000 	cmp	lr, #0
    a9ac:	11d140d0 	ldrsbne	r4, [r1]
    a9b0:	0a000024 	beq	aa48 <strtok_r+0xb0>
    a9b4:	e3540000 	cmp	r4, #0
    a9b8:	0a000008 	beq	a9e0 <strtok_r+0x48>
    a9bc:	e15e0004 	cmp	lr, r4
    a9c0:	0a000019 	beq	aa2c <strtok_r+0x94>
    a9c4:	e1a0c001 	mov	ip, r1
    a9c8:	ea000001 	b	a9d4 <strtok_r+0x3c>
    a9cc:	e153000e 	cmp	r3, lr
    a9d0:	0a000015 	beq	aa2c <strtok_r+0x94>
    a9d4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    a9d8:	e3530000 	cmp	r3, #0
    a9dc:	1afffffa 	bne	a9cc <strtok_r+0x34>
    a9e0:	e35e0000 	cmp	lr, #0
    a9e4:	0a000017 	beq	aa48 <strtok_r+0xb0>
    a9e8:	e1a05000 	mov	r5, r0
    a9ec:	e3540000 	cmp	r4, #0
    a9f0:	0a000008 	beq	aa18 <strtok_r+0x80>
    a9f4:	e15e0004 	cmp	lr, r4
    a9f8:	0a00000d 	beq	aa34 <strtok_r+0x9c>
    a9fc:	e1a0c001 	mov	ip, r1
    aa00:	ea000001 	b	aa0c <strtok_r+0x74>
    aa04:	e15e0003 	cmp	lr, r3
    aa08:	0a000009 	beq	aa34 <strtok_r+0x9c>
    aa0c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    aa10:	e3530000 	cmp	r3, #0
    aa14:	1afffffa 	bne	aa04 <strtok_r+0x6c>
    aa18:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    aa1c:	e35e0000 	cmp	lr, #0
    aa20:	1afffff1 	bne	a9ec <strtok_r+0x54>
    aa24:	e5825000 	str	r5, [r2]
    aa28:	e8bd8030 	pop	{r4, r5, pc}
    aa2c:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    aa30:	eaffffdf 	b	a9b4 <strtok_r+0x1c>
    aa34:	e3a03000 	mov	r3, #0
    aa38:	e2855001 	add	r5, r5, #1
    aa3c:	e5453001 	strb	r3, [r5, #-1]
    aa40:	e5825000 	str	r5, [r2]
    aa44:	e8bd8030 	pop	{r4, r5, pc}
    aa48:	e3a00000 	mov	r0, #0
    aa4c:	e5820000 	str	r0, [r2]
    aa50:	e8bd8030 	pop	{r4, r5, pc}
    aa54:	e5920000 	ldr	r0, [r2]
    aa58:	e3500000 	cmp	r0, #0
    aa5c:	1affffd0 	bne	a9a4 <strtok_r+0xc>
    aa60:	e8bd8030 	pop	{r4, r5, pc}

0000aa64 <strtoul>:
    aa64:	e3510000 	cmp	r1, #0
    aa68:	e92d4070 	push	{r4, r5, r6, lr}
    aa6c:	e2425002 	sub	r5, r2, #2
    aa70:	15810000 	strne	r0, [r1]
    aa74:	e3520000 	cmp	r2, #0
    aa78:	13550022 	cmpne	r5, #34	; 0x22
    aa7c:	83a05001 	movhi	r5, #1
    aa80:	93a05000 	movls	r5, #0
    aa84:	8a000037 	bhi	ab68 <strtoul+0x104>
    aa88:	e1a0e000 	mov	lr, r0
    aa8c:	e0d030d1 	ldrsb	r3, [r0], #1
    aa90:	e3530020 	cmp	r3, #32
    aa94:	e6efc073 	uxtb	ip, r3
    aa98:	e24c4009 	sub	r4, ip, #9
    aa9c:	0afffff9 	beq	aa88 <strtoul+0x24>
    aaa0:	e3540004 	cmp	r4, #4
    aaa4:	9afffff7 	bls	aa88 <strtoul+0x24>
    aaa8:	e24cc02b 	sub	ip, ip, #43	; 0x2b
    aaac:	e243602d 	sub	r6, r3, #45	; 0x2d
    aab0:	e16f6f16 	clz	r6, r6
    aab4:	e31c00fd 	tst	ip, #253	; 0xfd
    aab8:	e1a062a6 	lsr	r6, r6, #5
    aabc:	13a06000 	movne	r6, #0
    aac0:	0a000023 	beq	ab54 <strtoul+0xf0>
    aac4:	e3530030 	cmp	r3, #48	; 0x30
    aac8:	0a000028 	beq	ab70 <strtoul+0x10c>
    aacc:	e3520000 	cmp	r2, #0
    aad0:	03a0200a 	moveq	r2, #10
    aad4:	e353002f 	cmp	r3, #47	; 0x2f
    aad8:	da00003c 	ble	abd0 <strtoul+0x16c>
    aadc:	e1a0c003 	mov	ip, r3
    aae0:	e3a05001 	mov	r5, #1
    aae4:	e3a04000 	mov	r4, #0
    aae8:	ea000007 	b	ab0c <strtoul+0xa8>
    aaec:	e1500004 	cmp	r0, r4
    aaf0:	e3a05000 	mov	r5, #0
    aaf4:	e1a04000 	mov	r4, r0
    aaf8:	3a000027 	bcc	ab9c <strtoul+0x138>
    aafc:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    ab00:	e353002f 	cmp	r3, #47	; 0x2f
    ab04:	e1a0c003 	mov	ip, r3
    ab08:	da000028 	ble	abb0 <strtoul+0x14c>
    ab0c:	e24cc061 	sub	ip, ip, #97	; 0x61
    ab10:	e35c0019 	cmp	ip, #25
    ab14:	92433020 	subls	r3, r3, #32
    ab18:	e3530040 	cmp	r3, #64	; 0x40
    ab1c:	c2433007 	subgt	r3, r3, #7
    ab20:	e2433030 	sub	r3, r3, #48	; 0x30
    ab24:	e1520003 	cmp	r2, r3
    ab28:	e0203294 	mla	r0, r4, r2, r3
    ab2c:	caffffee 	bgt	aaec <strtoul+0x88>
    ab30:	e2255001 	eor	r5, r5, #1
    ab34:	e1a00004 	mov	r0, r4
    ab38:	e3510000 	cmp	r1, #0
    ab3c:	e0055006 	and	r5, r5, r6
    ab40:	0a000000 	beq	ab48 <strtoul+0xe4>
    ab44:	e581e000 	str	lr, [r1]
    ab48:	e3550000 	cmp	r5, #0
    ab4c:	12600000 	rsbne	r0, r0, #0
    ab50:	e8bd8070 	pop	{r4, r5, r6, pc}
    ab54:	e1de30d1 	ldrsb	r3, [lr, #1]
    ab58:	e28ee001 	add	lr, lr, #1
    ab5c:	e3530030 	cmp	r3, #48	; 0x30
    ab60:	1affffd9 	bne	aacc <strtoul+0x68>
    ab64:	ea000001 	b	ab70 <strtoul+0x10c>
    ab68:	e3a00000 	mov	r0, #0
    ab6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ab70:	e1de30d1 	ldrsb	r3, [lr, #1]
    ab74:	e28ec001 	add	ip, lr, #1
    ab78:	e3c30020 	bic	r0, r3, #32
    ab7c:	e3500058 	cmp	r0, #88	; 0x58
    ab80:	1a00000c 	bne	abb8 <strtoul+0x154>
    ab84:	e3d23010 	bics	r3, r2, #16
    ab88:	1afffff6 	bne	ab68 <strtoul+0x104>
    ab8c:	e1de30d2 	ldrsb	r3, [lr, #2]
    ab90:	e3a02010 	mov	r2, #16
    ab94:	e28ee002 	add	lr, lr, #2
    ab98:	eaffffcd 	b	aad4 <strtoul+0x70>
    ab9c:	e1510005 	cmp	r1, r5
    aba0:	0a000008 	beq	abc8 <strtoul+0x164>
    aba4:	e581e000 	str	lr, [r1]
    aba8:	e3e00000 	mvn	r0, #0
    abac:	e8bd8070 	pop	{r4, r5, r6, pc}
    abb0:	e3a05001 	mov	r5, #1
    abb4:	eaffffdf 	b	ab38 <strtoul+0xd4>
    abb8:	e3520000 	cmp	r2, #0
    abbc:	e1a0e00c 	mov	lr, ip
    abc0:	03a02008 	moveq	r2, #8
    abc4:	eaffffc2 	b	aad4 <strtoul+0x70>
    abc8:	e3e00000 	mvn	r0, #0
    abcc:	e8bd8070 	pop	{r4, r5, r6, pc}
    abd0:	e3510000 	cmp	r1, #0
    abd4:	13a00000 	movne	r0, #0
    abd8:	1affffd9 	bne	ab44 <strtoul+0xe0>
    abdc:	e1a00001 	mov	r0, r1
    abe0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000abe4 <char2int>:
    abe4:	e12fff1e 	bx	lr

0000abe8 <memcpy>:
    abe8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    abec:	e352007f 	cmp	r2, #127	; 0x7f
    abf0:	9a00000b 	bls	ac24 <memcpy+0x3c>
    abf4:	e3110003 	tst	r1, #3
    abf8:	1a000009 	bne	ac24 <memcpy+0x3c>
    abfc:	e3100003 	tst	r0, #3
    ac00:	1a000007 	bne	ac24 <memcpy+0x3c>
    ac04:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    ac08:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    ac0c:	e2422020 	sub	r2, r2, #32
    ac10:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    ac14:	f5d1f040 	pld	[r1, #64]	; 0x40
    ac18:	e352001f 	cmp	r2, #31
    ac1c:	8afffff9 	bhi	ac08 <memcpy+0x20>
    ac20:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    ac24:	e3520000 	cmp	r2, #0
    ac28:	0a000003 	beq	ac3c <memcpy+0x54>
    ac2c:	e4d13001 	ldrb	r3, [r1], #1
    ac30:	e2522001 	subs	r2, r2, #1
    ac34:	e4c03001 	strb	r3, [r0], #1
    ac38:	1afffffb 	bne	ac2c <memcpy+0x44>
    ac3c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    ac40:	e12fff1e 	bx	lr

0000ac44 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    ac44:	e3a01000 	mov	r1, #0
    ac48:	ea000009 	b	ac74 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x30>
    ac4c:	e3520009 	cmp	r2, #9
    ac50:	8a000011 	bhi	ac9c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    ac54:	e3730001 	cmn	r3, #1
    ac58:	13a02000 	movne	r2, #0
    ac5c:	03a02001 	moveq	r2, #1
    ac60:	e1510003 	cmp	r1, r3
    ac64:	83822001 	orrhi	r2, r2, #1
    ac68:	e1a01003 	mov	r1, r3
    ac6c:	e3520000 	cmp	r2, #0
    ac70:	1a000009 	bne	ac9c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    ac74:	e0d0c0d1 	ldrsb	ip, [r0], #1
    ac78:	e1a03181 	lsl	r3, r1, #3
    ac7c:	e0833081 	add	r3, r3, r1, lsl #1
    ac80:	e24c2030 	sub	r2, ip, #48	; 0x30
    ac84:	e35c0000 	cmp	ip, #0
    ac88:	e0823003 	add	r3, r2, r3
    ac8c:	e6ef2072 	uxtb	r2, r2
    ac90:	1affffed 	bne	ac4c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    ac94:	e1a00001 	mov	r0, r1
    ac98:	e12fff1e 	bx	lr
    ac9c:	e3e00000 	mvn	r0, #0
    aca0:	e12fff1e 	bx	lr

0000aca4 <CKernelOptions::~CKernelOptions()>:
    aca4:	e30430ac 	movw	r3, #16556	; 0x40ac
    aca8:	e3403001 	movt	r3, #1
    acac:	e3a02000 	mov	r2, #0
    acb0:	e5832000 	str	r2, [r3]
    acb4:	e12fff1e 	bx	lr

0000acb8 <CKernelOptions::GetWidth() const>:
    acb8:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    acbc:	e12fff1e 	bx	lr

0000acc0 <CKernelOptions::GetHeight() const>:
    acc0:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    acc4:	e12fff1e 	bx	lr

0000acc8 <CKernelOptions::GetLogDevice() const>:
    acc8:	e2800e81 	add	r0, r0, #2064	; 0x810
    accc:	e2800008 	add	r0, r0, #8
    acd0:	e12fff1e 	bx	lr

0000acd4 <CKernelOptions::GetLogLevel() const>:
    acd4:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    acd8:	e12fff1e 	bx	lr

0000acdc <CKernelOptions::GetKeyMap() const>:
    acdc:	e2800e83 	add	r0, r0, #2096	; 0x830
    ace0:	e12fff1e 	bx	lr

0000ace4 <CKernelOptions::GetUSBPowerDelay() const>:
    ace4:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    ace8:	e12fff1e 	bx	lr

0000acec <CKernelOptions::GetCPUSpeed() const>:
    acec:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    acf0:	e12fff1e 	bx	lr

0000acf4 <CKernelOptions::GetSoCMaxTemp() const>:
    acf4:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    acf8:	e12fff1e 	bx	lr

0000acfc <CKernelOptions::Get()>:
    acfc:	e30430ac 	movw	r3, #16556	; 0x40ac
    ad00:	e3403001 	movt	r3, #1
    ad04:	e5930000 	ldr	r0, [r3]
    ad08:	e12fff1e 	bx	lr

0000ad0c <CKernelOptions::GetToken()>:
    ad0c:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    ad10:	e1d320d0 	ldrsb	r2, [r3]
    ad14:	e3520000 	cmp	r2, #0
    ad18:	1a000005 	bne	ad34 <CKernelOptions::GetToken()+0x28>
    ad1c:	ea000014 	b	ad74 <CKernelOptions::GetToken()+0x68>
    ad20:	e2833001 	add	r3, r3, #1
    ad24:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    ad28:	e1d320d0 	ldrsb	r2, [r3]
    ad2c:	e3520000 	cmp	r2, #0
    ad30:	0a00000f 	beq	ad74 <CKernelOptions::GetToken()+0x68>
    ad34:	e3520020 	cmp	r2, #32
    ad38:	0afffff8 	beq	ad20 <CKernelOptions::GetToken()+0x14>
    ad3c:	e1a02003 	mov	r2, r3
    ad40:	e2822001 	add	r2, r2, #1
    ad44:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    ad48:	e1d210d0 	ldrsb	r1, [r2]
    ad4c:	e3510000 	cmp	r1, #0
    ad50:	0a000008 	beq	ad78 <CKernelOptions::GetToken()+0x6c>
    ad54:	e3510020 	cmp	r1, #32
    ad58:	1afffff8 	bne	ad40 <CKernelOptions::GetToken()+0x34>
    ad5c:	e282c001 	add	ip, r2, #1
    ad60:	e3a01000 	mov	r1, #0
    ad64:	e580c80c 	str	ip, [r0, #2060]	; 0x80c
    ad68:	e1a00003 	mov	r0, r3
    ad6c:	e5c21000 	strb	r1, [r2]
    ad70:	e12fff1e 	bx	lr
    ad74:	e3a03000 	mov	r3, #0
    ad78:	e1a00003 	mov	r0, r3
    ad7c:	e12fff1e 	bx	lr

0000ad80 <CKernelOptions::CKernelOptions()>:
    ad80:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    ad84:	e1a05000 	mov	r5, r0
    ad88:	e2808e81 	add	r8, r0, #2064	; 0x810
    ad8c:	e2888008 	add	r8, r8, #8
    ad90:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    ad94:	e3a04000 	mov	r4, #0
    ad98:	e3a02004 	mov	r2, #4
    ad9c:	e3a0303c 	mov	r3, #60	; 0x3c
    ada0:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    ada4:	e3021334 	movw	r1, #9012	; 0x2334
    ada8:	e3401001 	movt	r1, #1
    adac:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    adb0:	e1a00008 	mov	r0, r8
    adb4:	e5854810 	str	r4, [r5, #2064]	; 0x810
    adb8:	e2859e83 	add	r9, r5, #2096	; 0x830
    adbc:	e5854814 	str	r4, [r5, #2068]	; 0x814
    adc0:	e5854834 	str	r4, [r5, #2100]	; 0x834
    adc4:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    adc8:	ebfffeb2 	bl	a898 <strcpy>
    adcc:	e1a00009 	mov	r0, r9
    add0:	e302133c 	movw	r1, #9020	; 0x233c
    add4:	e3401001 	movt	r1, #1
    add8:	ebfffeae 	bl	a898 <strcpy>
    addc:	e30430ac 	movw	r3, #16556	; 0x40ac
    ade0:	e3403001 	movt	r3, #1
    ade4:	e28d000c 	add	r0, sp, #12
    ade8:	e5835000 	str	r5, [r3]
    adec:	ebfff725 	bl	8a88 <CBcmPropertyTags::CBcmPropertyTags()>
    adf0:	e58d4000 	str	r4, [sp]
    adf4:	e1a02005 	mov	r2, r5
    adf8:	e28d000c 	add	r0, sp, #12
    adfc:	e3a01001 	mov	r1, #1
    ae00:	e3401005 	movt	r1, #5
    ae04:	e300380c 	movw	r3, #2060	; 0x80c
    ae08:	ebfff766 	bl	8ba8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ae0c:	e1500004 	cmp	r0, r4
    ae10:	0a000039 	beq	aefc <CKernelOptions::CKernelOptions()+0x17c>
    ae14:	e5953008 	ldr	r3, [r5, #8]
    ae18:	e3530b02 	cmp	r3, #2048	; 0x800
    ae1c:	2a000036 	bcs	aefc <CKernelOptions::CKernelOptions()+0x17c>
    ae20:	e0853003 	add	r3, r5, r3
    ae24:	e285200c 	add	r2, r5, #12
    ae28:	e5c3400c 	strb	r4, [r3, #12]
    ae2c:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    ae30:	e1a00005 	mov	r0, r5
    ae34:	ebffffb4 	bl	ad0c <CKernelOptions::GetToken()>
    ae38:	e2506000 	subs	r6, r0, #0
    ae3c:	0a00002e 	beq	aefc <CKernelOptions::CKernelOptions()+0x17c>
    ae40:	e1d630d0 	ldrsb	r3, [r6]
    ae44:	e3530000 	cmp	r3, #0
    ae48:	0a000008 	beq	ae70 <CKernelOptions::CKernelOptions()+0xf0>
    ae4c:	e353003d 	cmp	r3, #61	; 0x3d
    ae50:	e1a04006 	mov	r4, r6
    ae54:	1a000002 	bne	ae64 <CKernelOptions::CKernelOptions()+0xe4>
    ae58:	ea00002c 	b	af10 <CKernelOptions::CKernelOptions()+0x190>
    ae5c:	e353003d 	cmp	r3, #61	; 0x3d
    ae60:	0a00002a 	beq	af10 <CKernelOptions::CKernelOptions()+0x190>
    ae64:	e1f430d1 	ldrsb	r3, [r4, #1]!
    ae68:	e3530000 	cmp	r3, #0
    ae6c:	1afffffa 	bne	ae5c <CKernelOptions::CKernelOptions()+0xdc>
    ae70:	e3021390 	movw	r1, #9104	; 0x2390
    ae74:	e3401001 	movt	r1, #1
    ae78:	e1a00006 	mov	r0, r6
    ae7c:	ebfffe6a 	bl	a82c <strcmp>
    ae80:	e3500000 	cmp	r0, #0
    ae84:	0affffe9 	beq	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    ae88:	e3021340 	movw	r1, #9024	; 0x2340
    ae8c:	e3401001 	movt	r1, #1
    ae90:	e1a00006 	mov	r0, r6
    ae94:	ebfffe64 	bl	a82c <strcmp>
    ae98:	e3500000 	cmp	r0, #0
    ae9c:	0affffe3 	beq	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    aea0:	e3a07000 	mov	r7, #0
    aea4:	e3021348 	movw	r1, #9032	; 0x2348
    aea8:	e3401001 	movt	r1, #1
    aeac:	e1a00006 	mov	r0, r6
    aeb0:	ebfffe5d 	bl	a82c <strcmp>
    aeb4:	e2504000 	subs	r4, r0, #0
    aeb8:	0a000029 	beq	af64 <CKernelOptions::CKernelOptions()+0x1e4>
    aebc:	e3021350 	movw	r1, #9040	; 0x2350
    aec0:	e3401001 	movt	r1, #1
    aec4:	e1a00006 	mov	r0, r6
    aec8:	ebfffe57 	bl	a82c <strcmp>
    aecc:	e3500000 	cmp	r0, #0
    aed0:	1a000029 	bne	af7c <CKernelOptions::CKernelOptions()+0x1fc>
    aed4:	e3570000 	cmp	r7, #0
    aed8:	0affffd4 	beq	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    aedc:	e1d730d0 	ldrsb	r3, [r7]
    aee0:	e3530000 	cmp	r3, #0
    aee4:	0affffd1 	beq	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    aee8:	e1a00007 	mov	r0, r7
    aeec:	ebffff54 	bl	ac44 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    aef0:	e3500004 	cmp	r0, #4
    aef4:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    aef8:	eaffffcc 	b	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    aefc:	e28d000c 	add	r0, sp, #12
    af00:	ebfff6e6 	bl	8aa0 <CBcmPropertyTags::~CBcmPropertyTags()>
    af04:	e1a00005 	mov	r0, r5
    af08:	e28dd02c 	add	sp, sp, #44	; 0x2c
    af0c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    af10:	e3a03000 	mov	r3, #0
    af14:	e3021390 	movw	r1, #9104	; 0x2390
    af18:	e3401001 	movt	r1, #1
    af1c:	e5c43000 	strb	r3, [r4]
    af20:	e1a00006 	mov	r0, r6
    af24:	ebfffe40 	bl	a82c <strcmp>
    af28:	e3500000 	cmp	r0, #0
    af2c:	e2847001 	add	r7, r4, #1
    af30:	1a000051 	bne	b07c <CKernelOptions::CKernelOptions()+0x2fc>
    af34:	e3570000 	cmp	r7, #0
    af38:	0affffbc 	beq	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    af3c:	e1d430d1 	ldrsb	r3, [r4, #1]
    af40:	e3530000 	cmp	r3, #0
    af44:	0affffb9 	beq	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    af48:	e1a00007 	mov	r0, r7
    af4c:	ebffff3c 	bl	ac44 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    af50:	e300353c 	movw	r3, #1340	; 0x53c
    af54:	e2402d0a 	sub	r2, r0, #640	; 0x280
    af58:	e1520003 	cmp	r2, r3
    af5c:	95850810 	strls	r0, [r5, #2064]	; 0x810
    af60:	eaffffb2 	b	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    af64:	e1a01007 	mov	r1, r7
    af68:	e3a02013 	mov	r2, #19
    af6c:	e1a00008 	mov	r0, r8
    af70:	ebfffe53 	bl	a8c4 <strncpy>
    af74:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    af78:	eaffffac 	b	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    af7c:	e302135c 	movw	r1, #9052	; 0x235c
    af80:	e3401001 	movt	r1, #1
    af84:	e1a00006 	mov	r0, r6
    af88:	ebfffe27 	bl	a82c <strcmp>
    af8c:	e2504000 	subs	r4, r0, #0
    af90:	1a000005 	bne	afac <CKernelOptions::CKernelOptions()+0x22c>
    af94:	e1a01007 	mov	r1, r7
    af98:	e3a02002 	mov	r2, #2
    af9c:	e1a00009 	mov	r0, r9
    afa0:	ebfffe47 	bl	a8c4 <strncpy>
    afa4:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    afa8:	eaffffa0 	b	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    afac:	e3021364 	movw	r1, #9060	; 0x2364
    afb0:	e3401001 	movt	r1, #1
    afb4:	e1a00006 	mov	r0, r6
    afb8:	ebfffe1b 	bl	a82c <strcmp>
    afbc:	e3500000 	cmp	r0, #0
    afc0:	1a00000b 	bne	aff4 <CKernelOptions::CKernelOptions()+0x274>
    afc4:	e3570000 	cmp	r7, #0
    afc8:	0affff98 	beq	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    afcc:	e1d730d0 	ldrsb	r3, [r7]
    afd0:	e3530000 	cmp	r3, #0
    afd4:	0affff95 	beq	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    afd8:	e1a00007 	mov	r0, r7
    afdc:	ebffff18 	bl	ac44 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    afe0:	e3013e78 	movw	r3, #7800	; 0x1e78
    afe4:	e24020c8 	sub	r2, r0, #200	; 0xc8
    afe8:	e1520003 	cmp	r2, r3
    afec:	95850834 	strls	r0, [r5, #2100]	; 0x834
    aff0:	eaffff8e 	b	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    aff4:	e3021374 	movw	r1, #9076	; 0x2374
    aff8:	e3401001 	movt	r1, #1
    affc:	e1a00006 	mov	r0, r6
    b000:	ebfffe09 	bl	a82c <strcmp>
    b004:	e3500000 	cmp	r0, #0
    b008:	1a000007 	bne	b02c <CKernelOptions::CKernelOptions()+0x2ac>
    b00c:	e1a00007 	mov	r0, r7
    b010:	e302137c 	movw	r1, #9084	; 0x237c
    b014:	e3401001 	movt	r1, #1
    b018:	ebfffe03 	bl	a82c <strcmp>
    b01c:	e3500000 	cmp	r0, #0
    b020:	03a03001 	moveq	r3, #1
    b024:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    b028:	eaffff80 	b	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    b02c:	e1a00006 	mov	r0, r6
    b030:	e3021384 	movw	r1, #9092	; 0x2384
    b034:	e3401001 	movt	r1, #1
    b038:	ebfffdfb 	bl	a82c <strcmp>
    b03c:	e2900000 	adds	r0, r0, #0
    b040:	13a00001 	movne	r0, #1
    b044:	e3570000 	cmp	r7, #0
    b048:	11a03000 	movne	r3, r0
    b04c:	03803001 	orreq	r3, r0, #1
    b050:	e3530000 	cmp	r3, #0
    b054:	1affff75 	bne	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    b058:	e1d730d0 	ldrsb	r3, [r7]
    b05c:	e3530000 	cmp	r3, #0
    b060:	0affff72 	beq	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    b064:	e1a00007 	mov	r0, r7
    b068:	ebfffef5 	bl	ac44 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b06c:	e2403028 	sub	r3, r0, #40	; 0x28
    b070:	e3530026 	cmp	r3, #38	; 0x26
    b074:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    b078:	eaffff6c 	b	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    b07c:	e3021340 	movw	r1, #9024	; 0x2340
    b080:	e3401001 	movt	r1, #1
    b084:	e1a00006 	mov	r0, r6
    b088:	ebfffde7 	bl	a82c <strcmp>
    b08c:	e3500000 	cmp	r0, #0
    b090:	1affff83 	bne	aea4 <CKernelOptions::CKernelOptions()+0x124>
    b094:	e3570000 	cmp	r7, #0
    b098:	0affff64 	beq	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    b09c:	e1d430d1 	ldrsb	r3, [r4, #1]
    b0a0:	e3530000 	cmp	r3, #0
    b0a4:	0affff61 	beq	ae30 <CKernelOptions::CKernelOptions()+0xb0>
    b0a8:	e1a00007 	mov	r0, r7
    b0ac:	ebfffee4 	bl	ac44 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b0b0:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    b0b4:	e3530f96 	cmp	r3, #600	; 0x258
    b0b8:	95850814 	strls	r0, [r5, #2068]	; 0x814
    b0bc:	eaffff5b 	b	ae30 <CKernelOptions::CKernelOptions()+0xb0>

0000b0c0 <CKernelOptions::GetOptionValue(char*)>:
    b0c0:	e1d030d0 	ldrsb	r3, [r0]
    b0c4:	e3530000 	cmp	r3, #0
    b0c8:	1a000003 	bne	b0dc <CKernelOptions::GetOptionValue(char*)+0x1c>
    b0cc:	ea000007 	b	b0f0 <CKernelOptions::GetOptionValue(char*)+0x30>
    b0d0:	e1f030d1 	ldrsb	r3, [r0, #1]!
    b0d4:	e3530000 	cmp	r3, #0
    b0d8:	0a000004 	beq	b0f0 <CKernelOptions::GetOptionValue(char*)+0x30>
    b0dc:	e353003d 	cmp	r3, #61	; 0x3d
    b0e0:	1afffffa 	bne	b0d0 <CKernelOptions::GetOptionValue(char*)+0x10>
    b0e4:	e3a02000 	mov	r2, #0
    b0e8:	e2803001 	add	r3, r0, #1
    b0ec:	e5c02000 	strb	r2, [r0]
    b0f0:	e1a00003 	mov	r0, r3
    b0f4:	e12fff1e 	bx	lr

0000b0f8 <CKernelOptions::GetDecimal(char*)>:
    b0f8:	e2503000 	subs	r3, r0, #0
    b0fc:	0a000002 	beq	b10c <CKernelOptions::GetDecimal(char*)+0x14>
    b100:	e1d330d0 	ldrsb	r3, [r3]
    b104:	e3530000 	cmp	r3, #0
    b108:	1a000001 	bne	b114 <CKernelOptions::GetDecimal(char*)+0x1c>
    b10c:	e3e00000 	mvn	r0, #0
    b110:	e12fff1e 	bx	lr
    b114:	eafffeca 	b	ac44 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000b118 <CPageTable::CPageTable()>:
    b118:	e92d4010 	push	{r4, lr}
    b11c:	e1a04000 	mov	r4, r0
    b120:	e3a01000 	mov	r1, #0
    b124:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
    b128:	e5801000 	str	r1, [r0]
    b12c:	e1a0c001 	mov	ip, r1
    b130:	e1a03002 	mov	r3, r2
    b134:	e3a0e002 	mov	lr, #2
    b138:	e3a00001 	mov	r0, #1
    b13c:	e5842004 	str	r2, [r4, #4]
    b140:	e5d32000 	ldrb	r2, [r3]
    b144:	e35c0b01 	cmp	ip, #1024	; 0x400
    b148:	e5d31002 	ldrb	r1, [r3, #2]
    b14c:	e2833004 	add	r3, r3, #4
    b150:	e7c1201e 	bfi	r2, lr, #0, #2
    b154:	e3811001 	orr	r1, r1, #1
    b158:	e6ef2072 	uxtb	r2, r2
    b15c:	e20110f9 	and	r1, r1, #249	; 0xf9
    b160:	e3822004 	orr	r2, r2, #4
    b164:	e7c3119f 	bfc	r1, #3, #1
    b168:	e20220f7 	and	r2, r2, #247	; 0xf7
    b16c:	e5431002 	strb	r1, [r3, #-2]
    b170:	e7c4221f 	bfc	r2, #4, #1
    b174:	e5432004 	strb	r2, [r3, #-4]
    b178:	e15310b2 	ldrh	r1, [r3, #-2]
    b17c:	e15320b4 	ldrh	r2, [r3, #-4]
    b180:	e7cf121c 	bfi	r1, ip, #4, #12
    b184:	e28cc001 	add	ip, ip, #1
    b188:	e7c8229f 	bfc	r2, #5, #4
    b18c:	e14320b4 	strh	r2, [r3, #-4]
    b190:	e14310b2 	strh	r1, [r3, #-2]
    b194:	e1a02422 	lsr	r2, r2, #8
    b198:	e20220fd 	and	r2, r2, #253	; 0xfd
    b19c:	e7c32110 	bfi	r2, r0, #2, #2
    b1a0:	e202208f 	and	r2, r2, #143	; 0x8f
    b1a4:	e7c7239f 	bfc	r2, #7, #1
    b1a8:	e5432003 	strb	r2, [r3, #-3]
    b1ac:	25532004 	ldrbcs	r2, [r3, #-4]
    b1b0:	23822010 	orrcs	r2, r2, #16
    b1b4:	25432004 	strbcs	r2, [r3, #-4]
    b1b8:	e35c0a01 	cmp	ip, #4096	; 0x1000
    b1bc:	1affffdf 	bne	b140 <CPageTable::CPageTable()+0x28>
    b1c0:	eb001333 	bl	fe94 <CleanDataCache>
    b1c4:	e1a00004 	mov	r0, r4
    b1c8:	e8bd8010 	pop	{r4, pc}

0000b1cc <CPageTable::CPageTable(unsigned int)>:
    b1cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b1d0:	e3a03001 	mov	r3, #1
    b1d4:	e1a04000 	mov	r4, r0
    b1d8:	e5803000 	str	r3, [r0]
    b1dc:	e1a05001 	mov	r5, r1
    b1e0:	eb00153d 	bl	106dc <palloc>
    b1e4:	e3500000 	cmp	r0, #0
    b1e8:	e5840004 	str	r0, [r4, #4]
    b1ec:	0a000037 	beq	b2d0 <CPageTable::CPageTable(unsigned int)+0x104>
    b1f0:	e7eb3050 	ubfx	r3, r0, #0, #12
    b1f4:	e3530000 	cmp	r3, #0
    b1f8:	1a00002c 	bne	b2b0 <CPageTable::CPageTable(unsigned int)+0xe4>
    b1fc:	e3016c4c 	movw	r6, #7244	; 0x1c4c
    b200:	e3406001 	movt	r6, #1
    b204:	e3a02000 	mov	r2, #0
    b208:	e3a08002 	mov	r8, #2
    b20c:	e3a07001 	mov	r7, #1
    b210:	ea000006 	b	b230 <CPageTable::CPageTable(unsigned int)+0x64>
    b214:	e6ef3073 	uxtb	r3, r3
    b218:	e7c3319f 	bfc	r3, #3, #1
    b21c:	e5c03000 	strb	r3, [r0]
    b220:	e2822601 	add	r2, r2, #1048576	; 0x100000
    b224:	e2800004 	add	r0, r0, #4
    b228:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    b22c:	0a00001c 	beq	b2a4 <CPageTable::CPageTable(unsigned int)+0xd8>
    b230:	e5d03001 	ldrb	r3, [r0, #1]
    b234:	e7e3ca52 	ubfx	ip, r2, #20, #4
    b238:	e1520006 	cmp	r2, r6
    b23c:	e3a0e001 	mov	lr, #1
    b240:	e20330fc 	and	r3, r3, #252	; 0xfc
    b244:	e388100c 	orr	r1, r8, #12
    b248:	e7c33117 	bfi	r3, r7, #2, #2
    b24c:	e18ec20c 	orr	ip, lr, ip, lsl #4
    b250:	e203308f 	and	r3, r3, #143	; 0x8f
    b254:	e5c0c002 	strb	ip, [r0, #2]
    b258:	e7c7339f 	bfc	r3, #7, #1
    b25c:	e5c01000 	strb	r1, [r0]
    b260:	e5c03001 	strb	r3, [r0, #1]
    b264:	e1a03c22 	lsr	r3, r2, #24
    b268:	e5c03003 	strb	r3, [r0, #3]
    b26c:	3affffeb 	bcc	b220 <CPageTable::CPageTable(unsigned int)+0x54>
    b270:	e1520005 	cmp	r2, r5
    b274:	e6ef3071 	uxtb	r3, r1
    b278:	e3833010 	orr	r3, r3, #16
    b27c:	e5c03000 	strb	r3, [r0]
    b280:	2affffe3 	bcs	b214 <CPageTable::CPageTable(unsigned int)+0x48>
    b284:	e3520501 	cmp	r2, #4194304	; 0x400000
    b288:	1affffe4 	bne	b220 <CPageTable::CPageTable(unsigned int)+0x54>
    b28c:	e5d03000 	ldrb	r3, [r0]
    b290:	e3a02605 	mov	r2, #5242880	; 0x500000
    b294:	e20330fb 	and	r3, r3, #251	; 0xfb
    b298:	e7c3319f 	bfc	r3, #3, #1
    b29c:	e4c03004 	strb	r3, [r0], #4
    b2a0:	eaffffe2 	b	b230 <CPageTable::CPageTable(unsigned int)+0x64>
    b2a4:	eb0012fa 	bl	fe94 <CleanDataCache>
    b2a8:	e1a00004 	mov	r0, r4
    b2ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b2b0:	e3021398 	movw	r1, #9112	; 0x2398
    b2b4:	e3401001 	movt	r1, #1
    b2b8:	e30203b8 	movw	r0, #9144	; 0x23b8
    b2bc:	e3400001 	movt	r0, #1
    b2c0:	e3a02051 	mov	r2, #81	; 0x51
    b2c4:	eb000491 	bl	c510 <assertion_failed>
    b2c8:	e5940004 	ldr	r0, [r4, #4]
    b2cc:	eaffffca 	b	b1fc <CPageTable::CPageTable(unsigned int)+0x30>
    b2d0:	e3021398 	movw	r1, #9112	; 0x2398
    b2d4:	e3401001 	movt	r1, #1
    b2d8:	e30203a8 	movw	r0, #9128	; 0x23a8
    b2dc:	e3400001 	movt	r0, #1
    b2e0:	e3a02050 	mov	r2, #80	; 0x50
    b2e4:	eb000489 	bl	c510 <assertion_failed>
    b2e8:	e5940004 	ldr	r0, [r4, #4]
    b2ec:	eaffffbf 	b	b1f0 <CPageTable::CPageTable(unsigned int)+0x24>

0000b2f0 <CPageTable::~CPageTable()>:
    b2f0:	e5903000 	ldr	r3, [r0]
    b2f4:	e92d4010 	push	{r4, lr}
    b2f8:	e3530000 	cmp	r3, #0
    b2fc:	e1a04000 	mov	r4, r0
    b300:	0a000001 	beq	b30c <CPageTable::~CPageTable()+0x1c>
    b304:	e5900004 	ldr	r0, [r0, #4]
    b308:	eb001525 	bl	107a4 <pfree>
    b30c:	e1a00004 	mov	r0, r4
    b310:	e8bd8010 	pop	{r4, pc}

0000b314 <CPageTable::GetBaseAddress() const>:
    b314:	e5900004 	ldr	r0, [r0, #4]
    b318:	e3800059 	orr	r0, r0, #89	; 0x59
    b31c:	e12fff1e 	bx	lr

0000b320 <CScreenDevice::~CScreenDevice()>:
    b320:	e590300c 	ldr	r3, [r0, #12]
    b324:	e30223e0 	movw	r2, #9184	; 0x23e0
    b328:	e3402001 	movt	r2, #1
    b32c:	e3530000 	cmp	r3, #0
    b330:	e92d4070 	push	{r4, r5, r6, lr}
    b334:	e1a04000 	mov	r4, r0
    b338:	e5802000 	str	r2, [r0]
    b33c:	0a000003 	beq	b350 <CScreenDevice::~CScreenDevice()+0x30>
    b340:	e5900018 	ldr	r0, [r0, #24]
    b344:	e3500000 	cmp	r0, #0
    b348:	0a000000 	beq	b350 <CScreenDevice::~CScreenDevice()+0x30>
    b34c:	ebfff9f0 	bl	9b14 <operator delete[](void*)>
    b350:	e5945010 	ldr	r5, [r4, #16]
    b354:	e3a03000 	mov	r3, #0
    b358:	e5843018 	str	r3, [r4, #24]
    b35c:	e1550003 	cmp	r5, r3
    b360:	0a000004 	beq	b378 <CScreenDevice::~CScreenDevice()+0x58>
    b364:	e1a00005 	mov	r0, r5
    b368:	eb001660 	bl	10cf0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b36c:	e1a00005 	mov	r0, r5
    b370:	e3a01024 	mov	r1, #36	; 0x24
    b374:	ebfff9e7 	bl	9b18 <operator delete(void*, unsigned int)>
    b378:	e3a03000 	mov	r3, #0
    b37c:	e284005c 	add	r0, r4, #92	; 0x5c
    b380:	e5843010 	str	r3, [r4, #16]
    b384:	eb001232 	bl	fc54 <CSpinLock::~CSpinLock()>
    b388:	e2840014 	add	r0, r4, #20
    b38c:	eb000486 	bl	c5ac <CCharGenerator::~CCharGenerator()>
    b390:	e1a00004 	mov	r0, r4
    b394:	eb0016d6 	bl	10ef4 <CDevice::~CDevice()>
    b398:	e1a00004 	mov	r0, r4
    b39c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b3a0 <CScreenDevice::~CScreenDevice()>:
    b3a0:	e92d4010 	push	{r4, lr}
    b3a4:	e1a04000 	mov	r4, r0
    b3a8:	ebffffdc 	bl	b320 <CScreenDevice::~CScreenDevice()>
    b3ac:	e1a00004 	mov	r0, r4
    b3b0:	e3a01074 	mov	r1, #116	; 0x74
    b3b4:	ebfff9d7 	bl	9b18 <operator delete(void*, unsigned int)>
    b3b8:	e1a00004 	mov	r0, r4
    b3bc:	e8bd8010 	pop	{r4, pc}

0000b3c0 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]>:
    b3c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b3c4:	e2806014 	add	r6, r0, #20
    b3c8:	e1a05000 	mov	r5, r0
    b3cc:	e1a00006 	mov	r0, r6
    b3d0:	e3a08000 	mov	r8, #0
    b3d4:	eb000479 	bl	c5c0 <CCharGenerator::GetUnderline() const>
    b3d8:	e1a07000 	mov	r7, r0
    b3dc:	e1a00006 	mov	r0, r6
    b3e0:	eb000474 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    b3e4:	e1500007 	cmp	r0, r7
    b3e8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    b3ec:	e3a04000 	mov	r4, #0
    b3f0:	ea000013 	b	b444 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]+0x84>
    b3f4:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    b3f8:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    b3fc:	e0843003 	add	r3, r4, r3
    b400:	e1530002 	cmp	r3, r2
    b404:	2a00000d 	bcs	b440 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]+0x80>
    b408:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    b40c:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    b410:	e0872002 	add	r2, r7, r2
    b414:	e1520001 	cmp	r2, r1
    b418:	2a000008 	bcs	b440 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]+0x80>
    b41c:	e5950020 	ldr	r0, [r5, #32]
    b420:	e5951018 	ldr	r1, [r5, #24]
    b424:	e0233290 	mla	r3, r0, r2, r3
    b428:	e1a03083 	lsl	r3, r3, #1
    b42c:	e19120b3 	ldrh	r2, [r1, r3]
    b430:	e3520000 	cmp	r2, #0
    b434:	118180b3 	strhne	r8, [r1, r3]
    b438:	01d524b8 	ldrheq	r2, [r5, #72]	; 0x48
    b43c:	018120b3 	strheq	r2, [r1, r3]
    b440:	e2844001 	add	r4, r4, #1
    b444:	e1a00006 	mov	r0, r6
    b448:	eb000458 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    b44c:	e1500004 	cmp	r0, r4
    b450:	8affffe7 	bhi	b3f4 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]+0x34>
    b454:	e2877001 	add	r7, r7, #1
    b458:	eaffffdf 	b	b3dc <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]+0x1c>

0000b45c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    b45c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b460:	e1a04000 	mov	r4, r0
    b464:	e1a05001 	mov	r5, r1
    b468:	e1a07002 	mov	r7, r2
    b46c:	e1a06003 	mov	r6, r3
    b470:	eb0016ab 	bl	10f24 <CDevice::CDevice()>
    b474:	e2840014 	add	r0, r4, #20
    b478:	e5845004 	str	r5, [r4, #4]
    b47c:	e302c3e0 	movw	ip, #9184	; 0x23e0
    b480:	e340c001 	movt	ip, #1
    b484:	e584c000 	str	ip, [r4]
    b488:	e3a05000 	mov	r5, #0
    b48c:	e5847008 	str	r7, [r4, #8]
    b490:	e584600c 	str	r6, [r4, #12]
    b494:	e5845010 	str	r5, [r4, #16]
    b498:	eb000440 	bl	c5a0 <CCharGenerator::CCharGenerator()>
    b49c:	e3a03001 	mov	r3, #1
    b4a0:	e3e02020 	mvn	r2, #32
    b4a4:	e5845018 	str	r5, [r4, #24]
    b4a8:	e5845030 	str	r5, [r4, #48]	; 0x30
    b4ac:	e1a01003 	mov	r1, r3
    b4b0:	e5845034 	str	r5, [r4, #52]	; 0x34
    b4b4:	e284005c 	add	r0, r4, #92	; 0x5c
    b4b8:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b4bc:	e5845040 	str	r5, [r4, #64]	; 0x40
    b4c0:	e584504c 	str	r5, [r4, #76]	; 0x4c
    b4c4:	e5845058 	str	r5, [r4, #88]	; 0x58
    b4c8:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
    b4cc:	e5843044 	str	r3, [r4, #68]	; 0x44
    b4d0:	eb0011d0 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
    b4d4:	e1a00004 	mov	r0, r4
    b4d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b4dc <CScreenDevice::GetWidth() const>:
    b4dc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b4e0:	e12fff1e 	bx	lr

0000b4e4 <CScreenDevice::GetHeight() const>:
    b4e4:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b4e8:	e12fff1e 	bx	lr

0000b4ec <CScreenDevice::GetColumns() const>:
    b4ec:	e1a03000 	mov	r3, r0
    b4f0:	e2800014 	add	r0, r0, #20
    b4f4:	e92d4010 	push	{r4, lr}
    b4f8:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    b4fc:	eb00042b 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    b500:	e730f014 	udiv	r0, r4, r0
    b504:	e8bd8010 	pop	{r4, pc}

0000b508 <CScreenDevice::GetRows() const>:
    b508:	e1a03000 	mov	r3, r0
    b50c:	e2800014 	add	r0, r0, #20
    b510:	e92d4010 	push	{r4, lr}
    b514:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    b518:	eb000426 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    b51c:	e730f014 	udiv	r0, r4, r0
    b520:	e8bd8010 	pop	{r4, pc}

0000b524 <CScreenDevice::GetStatus()>:
    b524:	e591c018 	ldr	ip, [r1, #24]
    b528:	e591201c 	ldr	r2, [r1, #28]
    b52c:	e92d4070 	push	{r4, r5, r6, lr}
    b530:	e580c000 	str	ip, [r0]
    b534:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    b538:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    b53c:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    b540:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    b544:	e5802004 	str	r2, [r0, #4]
    b548:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    b54c:	e5805008 	str	r5, [r0, #8]
    b550:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    b554:	e580400c 	str	r4, [r0, #12]
    b558:	e1d154b8 	ldrh	r5, [r1, #72]	; 0x48
    b55c:	e580e010 	str	lr, [r0, #16]
    b560:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    b564:	e580c014 	str	ip, [r0, #20]
    b568:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    b56c:	e5802018 	str	r2, [r0, #24]
    b570:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    b574:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    b578:	e580601c 	str	r6, [r0, #28]
    b57c:	e1c052b0 	strh	r5, [r0, #32]
    b580:	e5804024 	str	r4, [r0, #36]	; 0x24
    b584:	e580e028 	str	lr, [r0, #40]	; 0x28
    b588:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    b58c:	e5802030 	str	r2, [r0, #48]	; 0x30
    b590:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b594 <CScreenDevice::SetStatus(TScreenStatus)>:
    b594:	e24dd010 	sub	sp, sp, #16
    b598:	e92d4070 	push	{r4, r5, r6, lr}
    b59c:	e28dc014 	add	ip, sp, #20
    b5a0:	e88c000e 	stm	ip, {r1, r2, r3}
    b5a4:	e590201c 	ldr	r2, [r0, #28]
    b5a8:	e59d3018 	ldr	r3, [sp, #24]
    b5ac:	e1520003 	cmp	r2, r3
    b5b0:	0a000003 	beq	b5c4 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    b5b4:	e3a00000 	mov	r0, #0
    b5b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    b5bc:	e28dd010 	add	sp, sp, #16
    b5c0:	e12fff1e 	bx	lr
    b5c4:	e5902020 	ldr	r2, [r0, #32]
    b5c8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b5cc:	e1520003 	cmp	r2, r3
    b5d0:	1afffff7 	bne	b5b4 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b5d4:	e1a04000 	mov	r4, r0
    b5d8:	e280505c 	add	r5, r0, #92	; 0x5c
    b5dc:	e1a00005 	mov	r0, r5
    b5e0:	eb0011a8 	bl	fc88 <CSpinLock::Acquire()>
    b5e4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    b5e8:	e3530000 	cmp	r3, #0
    b5ec:	1a000002 	bne	b5fc <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    b5f0:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    b5f4:	e3530000 	cmp	r3, #0
    b5f8:	0a000003 	beq	b60c <CScreenDevice::SetStatus(TScreenStatus)+0x78>
    b5fc:	e1a00005 	mov	r0, r5
    b600:	eb0011bc 	bl	fcf8 <CSpinLock::Release()>
    b604:	e3a00000 	mov	r0, #0
    b608:	eaffffea 	b	b5b8 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    b60c:	e594201c 	ldr	r2, [r4, #28]
    b610:	e59d1014 	ldr	r1, [sp, #20]
    b614:	e5940018 	ldr	r0, [r4, #24]
    b618:	ebfffd72 	bl	abe8 <memcpy>
    b61c:	e28d2024 	add	r2, sp, #36	; 0x24
    b620:	e59dc01c 	ldr	ip, [sp, #28]
    b624:	e1a00005 	mov	r0, r5
    b628:	e59d1020 	ldr	r1, [sp, #32]
    b62c:	e892402c 	ldm	r2, {r2, r3, r5, lr}
    b630:	e584c030 	str	ip, [r4, #48]	; 0x30
    b634:	e5841034 	str	r1, [r4, #52]	; 0x34
    b638:	e1ddc3b4 	ldrh	ip, [sp, #52]	; 0x34
    b63c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    b640:	e5842038 	str	r2, [r4, #56]	; 0x38
    b644:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b648:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    b64c:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    b650:	e5845040 	str	r5, [r4, #64]	; 0x40
    b654:	e584e044 	str	lr, [r4, #68]	; 0x44
    b658:	e1c4c4b8 	strh	ip, [r4, #72]	; 0x48
    b65c:	e584104c 	str	r1, [r4, #76]	; 0x4c
    b660:	e5842050 	str	r2, [r4, #80]	; 0x50
    b664:	e5843054 	str	r3, [r4, #84]	; 0x54
    b668:	eb0011a2 	bl	fcf8 <CSpinLock::Release()>
    b66c:	f57ff05f 	dmb	sy
    b670:	e3a00001 	mov	r0, #1
    b674:	eaffffcf 	b	b5b8 <CScreenDevice::SetStatus(TScreenStatus)+0x24>

0000b678 <CScreenDevice::CarriageReturn()>:
    b678:	e3a03000 	mov	r3, #0
    b67c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b680:	e12fff1e 	bx	lr

0000b684 <CScreenDevice::CursorHome()>:
    b684:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b688:	e3a02000 	mov	r2, #0
    b68c:	e5803040 	str	r3, [r0, #64]	; 0x40
    b690:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b694:	e12fff1e 	bx	lr

0000b698 <CScreenDevice::CursorLeft()>:
    b698:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    b69c:	e92d4070 	push	{r4, r5, r6, lr}
    b6a0:	e3530000 	cmp	r3, #0
    b6a4:	e1a04000 	mov	r4, r0
    b6a8:	1a00000f 	bne	b6ec <CScreenDevice::CursorLeft()+0x54>
    b6ac:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b6b0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b6b4:	e1520003 	cmp	r2, r3
    b6b8:	98bd8070 	popls	{r4, r5, r6, pc}
    b6bc:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    b6c0:	e2806014 	add	r6, r0, #20
    b6c4:	e1a00006 	mov	r0, r6
    b6c8:	eb0003b8 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    b6cc:	e0605005 	rsb	r5, r0, r5
    b6d0:	e1a00006 	mov	r0, r6
    b6d4:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b6d8:	eb0003b6 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    b6dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b6e0:	e0600003 	rsb	r0, r0, r3
    b6e4:	e5840040 	str	r0, [r4, #64]	; 0x40
    b6e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b6ec:	e2800014 	add	r0, r0, #20
    b6f0:	eb0003ae 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    b6f4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b6f8:	e0600003 	rsb	r0, r0, r3
    b6fc:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b700:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b704 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b704:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b708:	e1a04002 	mov	r4, r2
    b70c:	e1a05000 	mov	r5, r0
    b710:	e2806014 	add	r6, r0, #20
    b714:	e2444001 	sub	r4, r4, #1
    b718:	e1a00006 	mov	r0, r6
    b71c:	e1a07001 	mov	r7, r1
    b720:	eb0003a2 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    b724:	e0040490 	mul	r4, r0, r4
    b728:	e1a00006 	mov	r0, r6
    b72c:	eb0003a1 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    b730:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b734:	e1540003 	cmp	r4, r3
    b738:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    b73c:	e2477001 	sub	r7, r7, #1
    b740:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    b744:	e0000790 	mul	r0, r0, r7
    b748:	e1500003 	cmp	r0, r3
    b74c:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    b750:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    b754:	e1500003 	cmp	r0, r3
    b758:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    b75c:	35850040 	strcc	r0, [r5, #64]	; 0x40
    b760:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b764 <CScreenDevice::CursorUp()>:
    b764:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b768:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b76c:	e1520003 	cmp	r2, r3
    b770:	912fff1e 	bxls	lr
    b774:	e92d4010 	push	{r4, lr}
    b778:	e1a04000 	mov	r4, r0
    b77c:	e2800014 	add	r0, r0, #20
    b780:	eb00038c 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    b784:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b788:	e0600003 	rsb	r0, r0, r3
    b78c:	e5840040 	str	r0, [r4, #64]	; 0x40
    b790:	e8bd8010 	pop	{r4, pc}

0000b794 <CScreenDevice::DeleteChars(unsigned int)>:
    b794:	e12fff1e 	bx	lr

0000b798 <CScreenDevice::DeleteLines(unsigned int)>:
    b798:	e12fff1e 	bx	lr

0000b79c <CScreenDevice::InsertLines(unsigned int)>:
    b79c:	e12fff1e 	bx	lr

0000b7a0 <CScreenDevice::InsertMode(int)>:
    b7a0:	e580104c 	str	r1, [r0, #76]	; 0x4c
    b7a4:	e12fff1e 	bx	lr

0000b7a8 <CScreenDevice::ReverseScroll()>:
    b7a8:	e12fff1e 	bx	lr

0000b7ac <CScreenDevice::SetCursorMode(int)>:
    b7ac:	e5801044 	str	r1, [r0, #68]	; 0x44
    b7b0:	e12fff1e 	bx	lr

0000b7b4 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    b7b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b7b8:	e1a04001 	mov	r4, r1
    b7bc:	e1a06000 	mov	r6, r0
    b7c0:	e2807014 	add	r7, r0, #20
    b7c4:	e2444001 	sub	r4, r4, #1
    b7c8:	e1a05002 	mov	r5, r2
    b7cc:	e1a00007 	mov	r0, r7
    b7d0:	eb000378 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    b7d4:	e0040490 	mul	r4, r0, r4
    b7d8:	e1a00007 	mov	r0, r7
    b7dc:	eb000375 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    b7e0:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    b7e4:	e0000095 	mul	r0, r5, r0
    b7e8:	e3500000 	cmp	r0, #0
    b7ec:	11540002 	cmpne	r4, r2
    b7f0:	33a03001 	movcc	r3, #1
    b7f4:	23a03000 	movcs	r3, #0
    b7f8:	e1500002 	cmp	r0, r2
    b7fc:	83a03000 	movhi	r3, #0
    b800:	92033001 	andls	r3, r3, #1
    b804:	e1540000 	cmp	r4, r0
    b808:	23a03000 	movcs	r3, #0
    b80c:	32033001 	andcc	r3, r3, #1
    b810:	e3530000 	cmp	r3, #0
    b814:	e3a03000 	mov	r3, #0
    b818:	15864034 	strne	r4, [r6, #52]	; 0x34
    b81c:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    b820:	15860038 	strne	r0, [r6, #56]	; 0x38
    b824:	e5864040 	str	r4, [r6, #64]	; 0x40
    b828:	e586303c 	str	r3, [r6, #60]	; 0x3c
    b82c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b830 <CScreenDevice::SetStandoutMode(unsigned int)>:
    b830:	e351001b 	cmp	r1, #27
    b834:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    b838:	ea00001d 	b	b8b4 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    b83c:	0000b8c4 	.word	0x0000b8c4
    b840:	0000b8b8 	.word	0x0000b8b8
    b844:	0000b8ac 	.word	0x0000b8ac
    b848:	0000b8b4 	.word	0x0000b8b4
    b84c:	0000b8b4 	.word	0x0000b8b4
    b850:	0000b8b4 	.word	0x0000b8b4
    b854:	0000b8b4 	.word	0x0000b8b4
    b858:	0000b8b4 	.word	0x0000b8b4
    b85c:	0000b8b4 	.word	0x0000b8b4
    b860:	0000b8b4 	.word	0x0000b8b4
    b864:	0000b8b4 	.word	0x0000b8b4
    b868:	0000b8b4 	.word	0x0000b8b4
    b86c:	0000b8b4 	.word	0x0000b8b4
    b870:	0000b8b4 	.word	0x0000b8b4
    b874:	0000b8b4 	.word	0x0000b8b4
    b878:	0000b8b4 	.word	0x0000b8b4
    b87c:	0000b8b4 	.word	0x0000b8b4
    b880:	0000b8b4 	.word	0x0000b8b4
    b884:	0000b8b4 	.word	0x0000b8b4
    b888:	0000b8b4 	.word	0x0000b8b4
    b88c:	0000b8b4 	.word	0x0000b8b4
    b890:	0000b8b4 	.word	0x0000b8b4
    b894:	0000b8b4 	.word	0x0000b8b4
    b898:	0000b8b4 	.word	0x0000b8b4
    b89c:	0000b8b4 	.word	0x0000b8b4
    b8a0:	0000b8b4 	.word	0x0000b8b4
    b8a4:	0000b8b4 	.word	0x0000b8b4
    b8a8:	0000b8c4 	.word	0x0000b8c4
    b8ac:	e3a0301f 	mov	r3, #31
    b8b0:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b8b4:	e12fff1e 	bx	lr
    b8b8:	e3a03b3e 	mov	r3, #63488	; 0xf800
    b8bc:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b8c0:	e12fff1e 	bx	lr
    b8c4:	e3e03020 	mvn	r3, #32
    b8c8:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b8cc:	e12fff1e 	bx	lr

0000b8d0 <CScreenDevice::Scroll()>:
    b8d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b8d4:	e1a07000 	mov	r7, r0
    b8d8:	e2800014 	add	r0, r0, #20
    b8dc:	eb000335 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    b8e0:	e1a06000 	mov	r6, r0
    b8e4:	e5972034 	ldr	r2, [r7, #52]	; 0x34
    b8e8:	e5975020 	ldr	r5, [r7, #32]
    b8ec:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    b8f0:	e5978018 	ldr	r8, [r7, #24]
    b8f4:	e0624004 	rsb	r4, r2, r4
    b8f8:	e1a03085 	lsl	r3, r5, #1
    b8fc:	e0604004 	rsb	r4, r0, r4
    b900:	e0050295 	mul	r5, r5, r2
    b904:	e0040493 	mul	r4, r3, r4
    b908:	e3540000 	cmp	r4, #0
    b90c:	e0885085 	add	r5, r8, r5, lsl #1
    b910:	1a000007 	bne	b934 <CScreenDevice::Scroll()+0x64>
    b914:	e0030693 	mul	r3, r3, r6
    b918:	e1b02123 	lsrs	r2, r3, #2
    b91c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b920:	e1a00005 	mov	r0, r5
    b924:	e1a02102 	lsl	r2, r2, #2
    b928:	e3a01000 	mov	r1, #0
    b92c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b930:	eafffb93 	b	a784 <memset>
    b934:	e0801002 	add	r1, r0, r2
    b938:	e3c4900f 	bic	r9, r4, #15
    b93c:	e1a02009 	mov	r2, r9
    b940:	e1a00005 	mov	r0, r5
    b944:	e0288193 	mla	r8, r3, r1, r8
    b948:	e1a01008 	mov	r1, r8
    b94c:	ebfffca5 	bl	abe8 <memcpy>
    b950:	e204200e 	and	r2, r4, #14
    b954:	e0850009 	add	r0, r5, r9
    b958:	e0881009 	add	r1, r8, r9
    b95c:	ebfffca1 	bl	abe8 <memcpy>
    b960:	e5972020 	ldr	r2, [r7, #32]
    b964:	e3c44003 	bic	r4, r4, #3
    b968:	e0855004 	add	r5, r5, r4
    b96c:	e1a03082 	lsl	r3, r2, #1
    b970:	eaffffe7 	b	b914 <CScreenDevice::Scroll()+0x44>

0000b974 <CScreenDevice::CursorDown()>:
    b974:	e92d4070 	push	{r4, r5, r6, lr}
    b978:	e1a04000 	mov	r4, r0
    b97c:	e2805014 	add	r5, r0, #20
    b980:	e1a00005 	mov	r0, r5
    b984:	eb00030b 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    b988:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b98c:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    b990:	e0800003 	add	r0, r0, r3
    b994:	e5840040 	str	r0, [r4, #64]	; 0x40
    b998:	e1500002 	cmp	r0, r2
    b99c:	38bd8070 	popcc	{r4, r5, r6, pc}
    b9a0:	e1a00004 	mov	r0, r4
    b9a4:	ebffffc9 	bl	b8d0 <CScreenDevice::Scroll()>
    b9a8:	e1a00005 	mov	r0, r5
    b9ac:	eb000301 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    b9b0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b9b4:	e0600003 	rsb	r0, r0, r3
    b9b8:	e5840040 	str	r0, [r4, #64]	; 0x40
    b9bc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b9c0 <CScreenDevice::NewLine()>:
    b9c0:	e3a02000 	mov	r2, #0
    b9c4:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b9c8:	eaffffe9 	b	b974 <CScreenDevice::CursorDown()>

0000b9cc <CScreenDevice::CursorRight()>:
    b9cc:	e92d4010 	push	{r4, lr}
    b9d0:	e1a04000 	mov	r4, r0
    b9d4:	e2800014 	add	r0, r0, #20
    b9d8:	eb0002f4 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    b9dc:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b9e0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    b9e4:	e0800003 	add	r0, r0, r3
    b9e8:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b9ec:	e1500002 	cmp	r0, r2
    b9f0:	38bd8010 	popcc	{r4, pc}
    b9f4:	e3a03000 	mov	r3, #0
    b9f8:	e1a00004 	mov	r0, r4
    b9fc:	e584303c 	str	r3, [r4, #60]	; 0x3c
    ba00:	e8bd4010 	pop	{r4, lr}
    ba04:	eaffffda 	b	b974 <CScreenDevice::CursorDown()>

0000ba08 <CScreenDevice::Tabulator()>:
    ba08:	e92d4010 	push	{r4, lr}
    ba0c:	e1a04000 	mov	r4, r0
    ba10:	e2800014 	add	r0, r0, #20
    ba14:	eb0002e5 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    ba18:	e1a00180 	lsl	r0, r0, #3
    ba1c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    ba20:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    ba24:	e0803003 	add	r3, r0, r3
    ba28:	e733f013 	udiv	r3, r3, r0
    ba2c:	e0000390 	mul	r0, r0, r3
    ba30:	e584003c 	str	r0, [r4, #60]	; 0x3c
    ba34:	e1500002 	cmp	r0, r2
    ba38:	38bd8010 	popcc	{r4, pc}
    ba3c:	e3a03000 	mov	r3, #0
    ba40:	e1a00004 	mov	r0, r4
    ba44:	e584303c 	str	r3, [r4, #60]	; 0x3c
    ba48:	e8bd4010 	pop	{r4, lr}
    ba4c:	eaffffc8 	b	b974 <CScreenDevice::CursorDown()>

0000ba50 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    ba50:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba54:	e2806014 	add	r6, r0, #20
    ba58:	e1a07000 	mov	r7, r0
    ba5c:	e24dd00c 	sub	sp, sp, #12
    ba60:	e3a08000 	mov	r8, #0
    ba64:	e1a00006 	mov	r0, r6
    ba68:	e1a0a001 	mov	sl, r1
    ba6c:	e1a09002 	mov	r9, r2
    ba70:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    ba74:	e58d3004 	str	r3, [sp, #4]
    ba78:	eb0002ce 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    ba7c:	e1580000 	cmp	r8, r0
    ba80:	2a000024 	bcs	bb18 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
    ba84:	e59d3004 	ldr	r3, [sp, #4]
    ba88:	e3a04000 	mov	r4, #0
    ba8c:	e0883003 	add	r3, r8, r3
    ba90:	e58d3000 	str	r3, [sp]
    ba94:	e1a00006 	mov	r0, r6
    ba98:	e0845009 	add	r5, r4, r9
    ba9c:	eb0002c3 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    baa0:	e1540000 	cmp	r4, r0
    baa4:	e1a02004 	mov	r2, r4
    baa8:	e1a03008 	mov	r3, r8
    baac:	e1a0100a 	mov	r1, sl
    bab0:	e1a00006 	mov	r0, r6
    bab4:	e2844001 	add	r4, r4, #1
    bab8:	2a000011 	bcs	bb04 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>
    babc:	eb0002c1 	bl	c5c8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    bac0:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    bac4:	e3500000 	cmp	r0, #0
    bac8:	11a0200b 	movne	r2, fp
    bacc:	03a02000 	moveq	r2, #0
    bad0:	e1550003 	cmp	r5, r3
    bad4:	2affffee 	bcs	ba94 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    bad8:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    badc:	e59d1000 	ldr	r1, [sp]
    bae0:	e1510003 	cmp	r1, r3
    bae4:	2affffea 	bcs	ba94 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    bae8:	e5973020 	ldr	r3, [r7, #32]
    baec:	e59d0000 	ldr	r0, [sp]
    baf0:	e5971018 	ldr	r1, [r7, #24]
    baf4:	e0255093 	mla	r5, r3, r0, r5
    baf8:	e1a05085 	lsl	r5, r5, #1
    bafc:	e18120b5 	strh	r2, [r1, r5]
    bb00:	eaffffe3 	b	ba94 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    bb04:	e2888001 	add	r8, r8, #1
    bb08:	e1a00006 	mov	r0, r6
    bb0c:	eb0002a9 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    bb10:	e1580000 	cmp	r8, r0
    bb14:	3affffda 	bcc	ba84 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    bb18:	e28dd00c 	add	sp, sp, #12
    bb1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bb20 <CScreenDevice::DisplayChar(char)>:
    bb20:	e6ef3071 	uxtb	r3, r1
    bb24:	e353001f 	cmp	r3, #31
    bb28:	912fff1e 	bxls	lr
    bb2c:	e92d4010 	push	{r4, lr}
    bb30:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    bb34:	e1a04000 	mov	r4, r0
    bb38:	e24dd008 	sub	sp, sp, #8
    bb3c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    bb40:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    bb44:	e58dc000 	str	ip, [sp]
    bb48:	ebffffc0 	bl	ba50 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    bb4c:	e1a00004 	mov	r0, r4
    bb50:	e28dd008 	add	sp, sp, #8
    bb54:	e8bd4010 	pop	{r4, lr}
    bb58:	eaffff9b 	b	b9cc <CScreenDevice::CursorRight()>

0000bb5c <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    bb5c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb60:	e3a08000 	mov	r8, #0
    bb64:	e1a0b000 	mov	fp, r0
    bb68:	e1a06001 	mov	r6, r1
    bb6c:	e1a0a002 	mov	sl, r2
    bb70:	e2805014 	add	r5, r0, #20
    bb74:	e1a09008 	mov	r9, r8
    bb78:	e1a00005 	mov	r0, r5
    bb7c:	eb00028d 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    bb80:	e1580000 	cmp	r8, r0
    bb84:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb88:	e3a04000 	mov	r4, #0
    bb8c:	e088700a 	add	r7, r8, sl
    bb90:	e1a00005 	mov	r0, r5
    bb94:	eb000285 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    bb98:	e1540000 	cmp	r4, r0
    bb9c:	e0843006 	add	r3, r4, r6
    bba0:	e2844001 	add	r4, r4, #1
    bba4:	2a00000b 	bcs	bbd8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    bba8:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    bbac:	e1530002 	cmp	r3, r2
    bbb0:	2afffff6 	bcs	bb90 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    bbb4:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    bbb8:	e1570002 	cmp	r7, r2
    bbbc:	2afffff3 	bcs	bb90 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    bbc0:	e59b2020 	ldr	r2, [fp, #32]
    bbc4:	e59b1018 	ldr	r1, [fp, #24]
    bbc8:	e0233792 	mla	r3, r2, r7, r3
    bbcc:	e1a03083 	lsl	r3, r3, #1
    bbd0:	e18190b3 	strh	r9, [r1, r3]
    bbd4:	eaffffed 	b	bb90 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    bbd8:	e2888001 	add	r8, r8, #1
    bbdc:	eaffffe5 	b	bb78 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000bbe0 <CScreenDevice::ClearLineEnd()>:
    bbe0:	e92d4070 	push	{r4, r5, r6, lr}
    bbe4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bbe8:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    bbec:	e1540003 	cmp	r4, r3
    bbf0:	28bd8070 	popcs	{r4, r5, r6, pc}
    bbf4:	e1a05000 	mov	r5, r0
    bbf8:	e2806014 	add	r6, r0, #20
    bbfc:	e1a01004 	mov	r1, r4
    bc00:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bc04:	e1a00005 	mov	r0, r5
    bc08:	ebffffd3 	bl	bb5c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bc0c:	e1a00006 	mov	r0, r6
    bc10:	eb000266 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    bc14:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bc18:	e0844000 	add	r4, r4, r0
    bc1c:	e1530004 	cmp	r3, r4
    bc20:	8afffff5 	bhi	bbfc <CScreenDevice::ClearLineEnd()+0x1c>
    bc24:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bc28 <CScreenDevice::EraseChars(unsigned int) [clone .part.4] [clone .constprop.8]>:
    bc28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bc2c:	e1a05000 	mov	r5, r0
    bc30:	e1a07001 	mov	r7, r1
    bc34:	e2808014 	add	r8, r0, #20
    bc38:	e1a00008 	mov	r0, r8
    bc3c:	e595603c 	ldr	r6, [r5, #60]	; 0x3c
    bc40:	eb00025a 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    bc44:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bc48:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    bc4c:	e0206097 	mla	r0, r7, r0, r6
    bc50:	e1500003 	cmp	r0, r3
    bc54:	31a06000 	movcc	r6, r0
    bc58:	21a06003 	movcs	r6, r3
    bc5c:	e1540006 	cmp	r4, r6
    bc60:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    bc64:	e1a01004 	mov	r1, r4
    bc68:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bc6c:	e1a00005 	mov	r0, r5
    bc70:	ebffffb9 	bl	bb5c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bc74:	e1a00008 	mov	r0, r8
    bc78:	eb00024c 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    bc7c:	e0844000 	add	r4, r4, r0
    bc80:	e1540006 	cmp	r4, r6
    bc84:	3afffff6 	bcc	bc64 <CScreenDevice::EraseChars(unsigned int) [clone .part.4] [clone .constprop.8]+0x3c>
    bc88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bc8c <CScreenDevice::EraseChars(unsigned int)>:
    bc8c:	e3510000 	cmp	r1, #0
    bc90:	012fff1e 	bxeq	lr
    bc94:	eaffffe3 	b	bc28 <CScreenDevice::EraseChars(unsigned int) [clone .part.4] [clone .constprop.8]>

0000bc98 <CScreenDevice::ClearDisplayEnd()>:
    bc98:	e92d4070 	push	{r4, r5, r6, lr}
    bc9c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bca0:	e1a05000 	mov	r5, r0
    bca4:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    bca8:	e2806014 	add	r6, r0, #20
    bcac:	e1540003 	cmp	r4, r3
    bcb0:	2a000009 	bcs	bcdc <CScreenDevice::ClearDisplayEnd()+0x44>
    bcb4:	e1a01004 	mov	r1, r4
    bcb8:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bcbc:	e1a00005 	mov	r0, r5
    bcc0:	ebffffa5 	bl	bb5c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bcc4:	e1a00006 	mov	r0, r6
    bcc8:	eb000238 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    bccc:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bcd0:	e0844000 	add	r4, r4, r0
    bcd4:	e1530004 	cmp	r3, r4
    bcd8:	8afffff5 	bhi	bcb4 <CScreenDevice::ClearDisplayEnd()+0x1c>
    bcdc:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    bce0:	e1a00006 	mov	r0, r6
    bce4:	eb000233 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    bce8:	e5953020 	ldr	r3, [r5, #32]
    bcec:	e0840000 	add	r0, r4, r0
    bcf0:	e595201c 	ldr	r2, [r5, #28]
    bcf4:	e5951018 	ldr	r1, [r5, #24]
    bcf8:	e0000093 	mul	r0, r3, r0
    bcfc:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    bd00:	0a000004 	beq	bd18 <CScreenDevice::ClearDisplayEnd()+0x80>
    bd04:	e0810080 	add	r0, r1, r0, lsl #1
    bd08:	e1a02082 	lsl	r2, r2, #1
    bd0c:	e3a01000 	mov	r1, #0
    bd10:	e8bd4070 	pop	{r4, r5, r6, lr}
    bd14:	eafffa9a 	b	a784 <memset>
    bd18:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bd1c <CScreenDevice::Write(char)>:
    bd1c:	e92d4010 	push	{r4, lr}
    bd20:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    bd24:	e1a04000 	mov	r4, r0
    bd28:	e24dd008 	sub	sp, sp, #8
    bd2c:	e3530007 	cmp	r3, #7
    bd30:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bd34:	ea000010 	b	bd7c <CScreenDevice::Write(char)+0x60>
    bd38:	0000bdd0 	.word	0x0000bdd0
    bd3c:	0000be30 	.word	0x0000be30
    bd40:	0000be4c 	.word	0x0000be4c
    bd44:	0000bea4 	.word	0x0000bea4
    bd48:	0000bf80 	.word	0x0000bf80
    bd4c:	0000bfa0 	.word	0x0000bfa0
    bd50:	0000bfc0 	.word	0x0000bfc0
    bd54:	0000bd8c 	.word	0x0000bd8c
    bd58:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    bd5c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bd60:	e1520003 	cmp	r2, r3
    bd64:	9a000004 	bls	bd7c <CScreenDevice::Write(char)+0x60>
    bd68:	e2800014 	add	r0, r0, #20
    bd6c:	eb000211 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    bd70:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bd74:	e0600003 	rsb	r0, r0, r3
    bd78:	e5840040 	str	r0, [r4, #64]	; 0x40
    bd7c:	e3a03000 	mov	r3, #0
    bd80:	e5843030 	str	r3, [r4, #48]	; 0x30
    bd84:	e28dd008 	add	sp, sp, #8
    bd88:	e8bd8010 	pop	{r4, pc}
    bd8c:	e3510068 	cmp	r1, #104	; 0x68
    bd90:	0a00009b 	beq	c004 <CScreenDevice::Write(char)+0x2e8>
    bd94:	e351006c 	cmp	r1, #108	; 0x6c
    bd98:	0a000099 	beq	c004 <CScreenDevice::Write(char)+0x2e8>
    bd9c:	e2413030 	sub	r3, r1, #48	; 0x30
    bda0:	e6ef3073 	uxtb	r3, r3
    bda4:	e3530009 	cmp	r3, #9
    bda8:	8afffff3 	bhi	bd7c <CScreenDevice::Write(char)+0x60>
    bdac:	e5942050 	ldr	r2, [r4, #80]	; 0x50
    bdb0:	e1a03182 	lsl	r3, r2, #3
    bdb4:	e0833082 	add	r3, r3, r2, lsl #1
    bdb8:	e2433030 	sub	r3, r3, #48	; 0x30
    bdbc:	e0831001 	add	r1, r3, r1
    bdc0:	e5841050 	str	r1, [r4, #80]	; 0x50
    bdc4:	e3510063 	cmp	r1, #99	; 0x63
    bdc8:	8affffeb 	bhi	bd7c <CScreenDevice::Write(char)+0x60>
    bdcc:	eaffffec 	b	bd84 <CScreenDevice::Write(char)+0x68>
    bdd0:	e2413008 	sub	r3, r1, #8
    bdd4:	e3530013 	cmp	r3, #19
    bdd8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bddc:	ea0000ee 	b	c19c <CScreenDevice::Write(char)+0x480>
    bde0:	0000c070 	.word	0x0000c070
    bde4:	0000c064 	.word	0x0000c064
    bde8:	0000c050 	.word	0x0000c050
    bdec:	0000c19c 	.word	0x0000c19c
    bdf0:	0000c19c 	.word	0x0000c19c
    bdf4:	0000c044 	.word	0x0000c044
    bdf8:	0000c19c 	.word	0x0000c19c
    bdfc:	0000c19c 	.word	0x0000c19c
    be00:	0000c19c 	.word	0x0000c19c
    be04:	0000c19c 	.word	0x0000c19c
    be08:	0000c19c 	.word	0x0000c19c
    be0c:	0000c19c 	.word	0x0000c19c
    be10:	0000c19c 	.word	0x0000c19c
    be14:	0000c19c 	.word	0x0000c19c
    be18:	0000c19c 	.word	0x0000c19c
    be1c:	0000c19c 	.word	0x0000c19c
    be20:	0000c19c 	.word	0x0000c19c
    be24:	0000c19c 	.word	0x0000c19c
    be28:	0000c19c 	.word	0x0000c19c
    be2c:	0000c038 	.word	0x0000c038
    be30:	e351004d 	cmp	r1, #77	; 0x4d
    be34:	0affffd0 	beq	bd7c <CScreenDevice::Write(char)+0x60>
    be38:	e351005b 	cmp	r1, #91	; 0x5b
    be3c:	03a03002 	moveq	r3, #2
    be40:	05803030 	streq	r3, [r0, #48]	; 0x30
    be44:	0affffce 	beq	bd84 <CScreenDevice::Write(char)+0x68>
    be48:	eaffffcb 	b	bd7c <CScreenDevice::Write(char)+0x60>
    be4c:	e241303f 	sub	r3, r1, #63	; 0x3f
    be50:	e3530011 	cmp	r3, #17
    be54:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    be58:	ea0000db 	b	c1cc <CScreenDevice::Write(char)+0x4b0>
    be5c:	0000c158 	.word	0x0000c158
    be60:	0000c1cc 	.word	0x0000c1cc
    be64:	0000bd58 	.word	0x0000bd58
    be68:	0000c18c 	.word	0x0000c18c
    be6c:	0000c17c 	.word	0x0000c17c
    be70:	0000c1cc 	.word	0x0000c1cc
    be74:	0000c1cc 	.word	0x0000c1cc
    be78:	0000c1cc 	.word	0x0000c1cc
    be7c:	0000c1cc 	.word	0x0000c1cc
    be80:	0000c164 	.word	0x0000c164
    be84:	0000c1cc 	.word	0x0000c1cc
    be88:	0000c148 	.word	0x0000c148
    be8c:	0000c138 	.word	0x0000c138
    be90:	0000bd7c 	.word	0x0000bd7c
    be94:	0000bd7c 	.word	0x0000bd7c
    be98:	0000c1cc 	.word	0x0000c1cc
    be9c:	0000c1cc 	.word	0x0000c1cc
    bea0:	0000bd7c 	.word	0x0000bd7c
    bea4:	e241303b 	sub	r3, r1, #59	; 0x3b
    bea8:	e3530032 	cmp	r3, #50	; 0x32
    beac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    beb0:	eaffffb9 	b	bd9c <CScreenDevice::Write(char)+0x80>
    beb4:	0000c12c 	.word	0x0000c12c
    beb8:	0000bd9c 	.word	0x0000bd9c
    bebc:	0000bd9c 	.word	0x0000bd9c
    bec0:	0000bd9c 	.word	0x0000bd9c
    bec4:	0000bd9c 	.word	0x0000bd9c
    bec8:	0000bd9c 	.word	0x0000bd9c
    becc:	0000bd9c 	.word	0x0000bd9c
    bed0:	0000bd9c 	.word	0x0000bd9c
    bed4:	0000bd9c 	.word	0x0000bd9c
    bed8:	0000bd9c 	.word	0x0000bd9c
    bedc:	0000bd9c 	.word	0x0000bd9c
    bee0:	0000bd9c 	.word	0x0000bd9c
    bee4:	0000bd9c 	.word	0x0000bd9c
    bee8:	0000bd9c 	.word	0x0000bd9c
    beec:	0000bd9c 	.word	0x0000bd9c
    bef0:	0000bd9c 	.word	0x0000bd9c
    bef4:	0000bd9c 	.word	0x0000bd9c
    bef8:	0000bd7c 	.word	0x0000bd7c
    befc:	0000bd7c 	.word	0x0000bd7c
    bf00:	0000bd9c 	.word	0x0000bd9c
    bf04:	0000bd9c 	.word	0x0000bd9c
    bf08:	0000bd7c 	.word	0x0000bd7c
    bf0c:	0000bd9c 	.word	0x0000bd9c
    bf10:	0000bd9c 	.word	0x0000bd9c
    bf14:	0000bd9c 	.word	0x0000bd9c
    bf18:	0000bd9c 	.word	0x0000bd9c
    bf1c:	0000bd9c 	.word	0x0000bd9c
    bf20:	0000bd9c 	.word	0x0000bd9c
    bf24:	0000bd9c 	.word	0x0000bd9c
    bf28:	0000c07c 	.word	0x0000c07c
    bf2c:	0000bd9c 	.word	0x0000bd9c
    bf30:	0000bd9c 	.word	0x0000bd9c
    bf34:	0000bd9c 	.word	0x0000bd9c
    bf38:	0000bd9c 	.word	0x0000bd9c
    bf3c:	0000bd9c 	.word	0x0000bd9c
    bf40:	0000bd9c 	.word	0x0000bd9c
    bf44:	0000bd9c 	.word	0x0000bd9c
    bf48:	0000bd9c 	.word	0x0000bd9c
    bf4c:	0000bd9c 	.word	0x0000bd9c
    bf50:	0000bd9c 	.word	0x0000bd9c
    bf54:	0000bd9c 	.word	0x0000bd9c
    bf58:	0000bd9c 	.word	0x0000bd9c
    bf5c:	0000bd9c 	.word	0x0000bd9c
    bf60:	0000bd9c 	.word	0x0000bd9c
    bf64:	0000bd9c 	.word	0x0000bd9c
    bf68:	0000c090 	.word	0x0000c090
    bf6c:	0000bd9c 	.word	0x0000bd9c
    bf70:	0000bd9c 	.word	0x0000bd9c
    bf74:	0000bd9c 	.word	0x0000bd9c
    bf78:	0000c090 	.word	0x0000c090
    bf7c:	0000c0ac 	.word	0x0000c0ac
    bf80:	e2411030 	sub	r1, r1, #48	; 0x30
    bf84:	e6ef3071 	uxtb	r3, r1
    bf88:	e3530009 	cmp	r3, #9
    bf8c:	8affff7a 	bhi	bd7c <CScreenDevice::Write(char)+0x60>
    bf90:	e3a03007 	mov	r3, #7
    bf94:	e5801050 	str	r1, [r0, #80]	; 0x50
    bf98:	e5803030 	str	r3, [r0, #48]	; 0x30
    bf9c:	eaffff78 	b	bd84 <CScreenDevice::Write(char)+0x68>
    bfa0:	e2411030 	sub	r1, r1, #48	; 0x30
    bfa4:	e6ef3071 	uxtb	r3, r1
    bfa8:	e3530009 	cmp	r3, #9
    bfac:	8affff72 	bhi	bd7c <CScreenDevice::Write(char)+0x60>
    bfb0:	e3a03006 	mov	r3, #6
    bfb4:	e5801054 	str	r1, [r0, #84]	; 0x54
    bfb8:	e5803030 	str	r3, [r0, #48]	; 0x30
    bfbc:	eaffff70 	b	bd84 <CScreenDevice::Write(char)+0x68>
    bfc0:	e3510048 	cmp	r1, #72	; 0x48
    bfc4:	0a000091 	beq	c210 <CScreenDevice::Write(char)+0x4f4>
    bfc8:	e3510072 	cmp	r1, #114	; 0x72
    bfcc:	0a000013 	beq	c020 <CScreenDevice::Write(char)+0x304>
    bfd0:	e2413030 	sub	r3, r1, #48	; 0x30
    bfd4:	e6ef3073 	uxtb	r3, r3
    bfd8:	e3530009 	cmp	r3, #9
    bfdc:	8affff66 	bhi	bd7c <CScreenDevice::Write(char)+0x60>
    bfe0:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    bfe4:	e1a03182 	lsl	r3, r2, #3
    bfe8:	e0833082 	add	r3, r3, r2, lsl #1
    bfec:	e2433030 	sub	r3, r3, #48	; 0x30
    bff0:	e0831001 	add	r1, r3, r1
    bff4:	e5801054 	str	r1, [r0, #84]	; 0x54
    bff8:	e35100c7 	cmp	r1, #199	; 0xc7
    bffc:	8affff5e 	bhi	bd7c <CScreenDevice::Write(char)+0x60>
    c000:	eaffff5f 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c004:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c008:	e3530019 	cmp	r3, #25
    c00c:	02411068 	subeq	r1, r1, #104	; 0x68
    c010:	016f1f11 	clzeq	r1, r1
    c014:	01a012a1 	lsreq	r1, r1, #5
    c018:	05841044 	streq	r1, [r4, #68]	; 0x44
    c01c:	eaffff56 	b	bd7c <CScreenDevice::Write(char)+0x60>
    c020:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c024:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c028:	ebfffde1 	bl	b7b4 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    c02c:	e3a03000 	mov	r3, #0
    c030:	e5843030 	str	r3, [r4, #48]	; 0x30
    c034:	eaffff52 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c038:	e3a03001 	mov	r3, #1
    c03c:	e5803030 	str	r3, [r0, #48]	; 0x30
    c040:	eaffff4f 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c044:	e3a03000 	mov	r3, #0
    c048:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c04c:	eaffff4c 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c050:	e3a03000 	mov	r3, #0
    c054:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c058:	e28dd008 	add	sp, sp, #8
    c05c:	e8bd4010 	pop	{r4, lr}
    c060:	eafffe43 	b	b974 <CScreenDevice::CursorDown()>
    c064:	e28dd008 	add	sp, sp, #8
    c068:	e8bd4010 	pop	{r4, lr}
    c06c:	eafffe65 	b	ba08 <CScreenDevice::Tabulator()>
    c070:	e28dd008 	add	sp, sp, #8
    c074:	e8bd4010 	pop	{r4, lr}
    c078:	eafffd86 	b	b698 <CScreenDevice::CursorLeft()>
    c07c:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c080:	e3510000 	cmp	r1, #0
    c084:	0affff3c 	beq	bd7c <CScreenDevice::Write(char)+0x60>
    c088:	ebfffee6 	bl	bc28 <CScreenDevice::EraseChars(unsigned int) [clone .part.4] [clone .constprop.8]>
    c08c:	eaffff3a 	b	bd7c <CScreenDevice::Write(char)+0x60>
    c090:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c094:	e3530004 	cmp	r3, #4
    c098:	02411068 	subeq	r1, r1, #104	; 0x68
    c09c:	016f1f11 	clzeq	r1, r1
    c0a0:	01a012a1 	lsreq	r1, r1, #5
    c0a4:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    c0a8:	eaffff33 	b	bd7c <CScreenDevice::Write(char)+0x60>
    c0ac:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c0b0:	e353001b 	cmp	r3, #27
    c0b4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c0b8:	eaffff2f 	b	bd7c <CScreenDevice::Write(char)+0x60>
    c0bc:	0000c204 	.word	0x0000c204
    c0c0:	0000c1f8 	.word	0x0000c1f8
    c0c4:	0000c1ec 	.word	0x0000c1ec
    c0c8:	0000bd7c 	.word	0x0000bd7c
    c0cc:	0000bd7c 	.word	0x0000bd7c
    c0d0:	0000bd7c 	.word	0x0000bd7c
    c0d4:	0000bd7c 	.word	0x0000bd7c
    c0d8:	0000bd7c 	.word	0x0000bd7c
    c0dc:	0000bd7c 	.word	0x0000bd7c
    c0e0:	0000bd7c 	.word	0x0000bd7c
    c0e4:	0000bd7c 	.word	0x0000bd7c
    c0e8:	0000bd7c 	.word	0x0000bd7c
    c0ec:	0000bd7c 	.word	0x0000bd7c
    c0f0:	0000bd7c 	.word	0x0000bd7c
    c0f4:	0000bd7c 	.word	0x0000bd7c
    c0f8:	0000bd7c 	.word	0x0000bd7c
    c0fc:	0000bd7c 	.word	0x0000bd7c
    c100:	0000bd7c 	.word	0x0000bd7c
    c104:	0000bd7c 	.word	0x0000bd7c
    c108:	0000bd7c 	.word	0x0000bd7c
    c10c:	0000bd7c 	.word	0x0000bd7c
    c110:	0000bd7c 	.word	0x0000bd7c
    c114:	0000bd7c 	.word	0x0000bd7c
    c118:	0000bd7c 	.word	0x0000bd7c
    c11c:	0000bd7c 	.word	0x0000bd7c
    c120:	0000bd7c 	.word	0x0000bd7c
    c124:	0000bd7c 	.word	0x0000bd7c
    c128:	0000c204 	.word	0x0000c204
    c12c:	e3a03005 	mov	r3, #5
    c130:	e5803030 	str	r3, [r0, #48]	; 0x30
    c134:	eaffff12 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c138:	ebfffea8 	bl	bbe0 <CScreenDevice::ClearLineEnd()>
    c13c:	e3a03000 	mov	r3, #0
    c140:	e5843030 	str	r3, [r4, #48]	; 0x30
    c144:	eaffff0e 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c148:	ebfffed2 	bl	bc98 <CScreenDevice::ClearDisplayEnd()>
    c14c:	e3a03000 	mov	r3, #0
    c150:	e5843030 	str	r3, [r4, #48]	; 0x30
    c154:	eaffff0a 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c158:	e3a03004 	mov	r3, #4
    c15c:	e5803030 	str	r3, [r0, #48]	; 0x30
    c160:	eaffff07 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c164:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c168:	e3a03000 	mov	r3, #0
    c16c:	e5802040 	str	r2, [r0, #64]	; 0x40
    c170:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c174:	e5803030 	str	r3, [r0, #48]	; 0x30
    c178:	eaffff01 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c17c:	ebfffe12 	bl	b9cc <CScreenDevice::CursorRight()>
    c180:	e3a03000 	mov	r3, #0
    c184:	e5843030 	str	r3, [r4, #48]	; 0x30
    c188:	eafffefd 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c18c:	ebfffdf8 	bl	b974 <CScreenDevice::CursorDown()>
    c190:	e3a03000 	mov	r3, #0
    c194:	e5843030 	str	r3, [r4, #48]	; 0x30
    c198:	eafffef9 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c19c:	e6ef3071 	uxtb	r3, r1
    c1a0:	e353001f 	cmp	r3, #31
    c1a4:	9afffef6 	bls	bd84 <CScreenDevice::Write(char)+0x68>
    c1a8:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    c1ac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c1b0:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c1b4:	e58dc000 	str	ip, [sp]
    c1b8:	ebfffe24 	bl	ba50 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c1bc:	e1a00004 	mov	r0, r4
    c1c0:	e28dd008 	add	sp, sp, #8
    c1c4:	e8bd4010 	pop	{r4, lr}
    c1c8:	eafffdff 	b	b9cc <CScreenDevice::CursorRight()>
    c1cc:	e2411030 	sub	r1, r1, #48	; 0x30
    c1d0:	e6ef3071 	uxtb	r3, r1
    c1d4:	e3530009 	cmp	r3, #9
    c1d8:	8afffee7 	bhi	bd7c <CScreenDevice::Write(char)+0x60>
    c1dc:	e3a03003 	mov	r3, #3
    c1e0:	e5801050 	str	r1, [r0, #80]	; 0x50
    c1e4:	e5803030 	str	r3, [r0, #48]	; 0x30
    c1e8:	eafffee5 	b	bd84 <CScreenDevice::Write(char)+0x68>
    c1ec:	e3a0301f 	mov	r3, #31
    c1f0:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c1f4:	eafffee0 	b	bd7c <CScreenDevice::Write(char)+0x60>
    c1f8:	e3a03b3e 	mov	r3, #63488	; 0xf800
    c1fc:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c200:	eafffedd 	b	bd7c <CScreenDevice::Write(char)+0x60>
    c204:	e3e03020 	mvn	r3, #32
    c208:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c20c:	eafffeda 	b	bd7c <CScreenDevice::Write(char)+0x60>
    c210:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c214:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c218:	ebfffd39 	bl	b704 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    c21c:	e3a03000 	mov	r3, #0
    c220:	e5843030 	str	r3, [r4, #48]	; 0x30
    c224:	eafffed6 	b	bd84 <CScreenDevice::Write(char)+0x68>

0000c228 <CScreenDevice::Write(void const*, unsigned int)>:
    c228:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c22c:	e1a05000 	mov	r5, r0
    c230:	e280805c 	add	r8, r0, #92	; 0x5c
    c234:	e1a00008 	mov	r0, r8
    c238:	e1a04002 	mov	r4, r2
    c23c:	e1a07001 	mov	r7, r1
    c240:	eb000e90 	bl	fc88 <CSpinLock::Acquire()>
    c244:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c248:	e3a02001 	mov	r2, #1
    c24c:	e5852058 	str	r2, [r5, #88]	; 0x58
    c250:	e3530000 	cmp	r3, #0
    c254:	1a000017 	bne	c2b8 <CScreenDevice::Write(void const*, unsigned int)+0x90>
    c258:	e3540000 	cmp	r4, #0
    c25c:	e2446001 	sub	r6, r4, #1
    c260:	0a00001b 	beq	c2d4 <CScreenDevice::Write(void const*, unsigned int)+0xac>
    c264:	e1a04007 	mov	r4, r7
    c268:	e0d410d1 	ldrsb	r1, [r4], #1
    c26c:	e1a00005 	mov	r0, r5
    c270:	ebfffea9 	bl	bd1c <CScreenDevice::Write(char)>
    c274:	e2643001 	rsb	r3, r4, #1
    c278:	e0833006 	add	r3, r3, r6
    c27c:	e1770003 	cmn	r7, r3
    c280:	1afffff8 	bne	c268 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    c284:	e2866001 	add	r6, r6, #1
    c288:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c28c:	e3530000 	cmp	r3, #0
    c290:	0a000001 	beq	c29c <CScreenDevice::Write(void const*, unsigned int)+0x74>
    c294:	e1a00005 	mov	r0, r5
    c298:	ebfffc48 	bl	b3c0 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]>
    c29c:	e3a03000 	mov	r3, #0
    c2a0:	e1a00008 	mov	r0, r8
    c2a4:	e5853058 	str	r3, [r5, #88]	; 0x58
    c2a8:	eb000e92 	bl	fcf8 <CSpinLock::Release()>
    c2ac:	f57ff05f 	dmb	sy
    c2b0:	e1a00006 	mov	r0, r6
    c2b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c2b8:	e1a00005 	mov	r0, r5
    c2bc:	e2446001 	sub	r6, r4, #1
    c2c0:	ebfffc3e 	bl	b3c0 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]>
    c2c4:	e3540000 	cmp	r4, #0
    c2c8:	1affffe5 	bne	c264 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    c2cc:	e1a06004 	mov	r6, r4
    c2d0:	eaffffec 	b	c288 <CScreenDevice::Write(void const*, unsigned int)+0x60>
    c2d4:	e1a06004 	mov	r6, r4
    c2d8:	eaffffef 	b	c29c <CScreenDevice::Write(void const*, unsigned int)+0x74>

0000c2dc <CScreenDevice::Initialize()>:
    c2dc:	e92d4070 	push	{r4, r5, r6, lr}
    c2e0:	e590600c 	ldr	r6, [r0, #12]
    c2e4:	e1a04000 	mov	r4, r0
    c2e8:	e24dd008 	sub	sp, sp, #8
    c2ec:	e3560000 	cmp	r6, #0
    c2f0:	0a000027 	beq	c394 <CScreenDevice::Initialize()+0xb8>
    c2f4:	e9900009 	ldmib	r0, {r0, r3}
    c2f8:	e5840024 	str	r0, [r4, #36]	; 0x24
    c2fc:	e5840020 	str	r0, [r4, #32]
    c300:	e0000093 	mul	r0, r3, r0
    c304:	e5843028 	str	r3, [r4, #40]	; 0x28
    c308:	e35005fe 	cmp	r0, #1065353216	; 0x3f800000
    c30c:	e1a00080 	lsl	r0, r0, #1
    c310:	e584001c 	str	r0, [r4, #28]
    c314:	83e00000 	mvnhi	r0, #0
    c318:	ebfff5fb 	bl	9b0c <operator new[](unsigned int)>
    c31c:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    c320:	e5840018 	str	r0, [r4, #24]
    c324:	e2846014 	add	r6, r4, #20
    c328:	e1a00006 	mov	r0, r6
    c32c:	eb0000a1 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    c330:	e735f015 	udiv	r5, r5, r0
    c334:	e1a00006 	mov	r0, r6
    c338:	eb00009e 	bl	c5b8 <CCharGenerator::GetCharHeight() const>
    c33c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    c340:	e5843040 	str	r3, [r4, #64]	; 0x40
    c344:	e3a03000 	mov	r3, #0
    c348:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c34c:	e0030590 	mul	r3, r0, r5
    c350:	e584302c 	str	r3, [r4, #44]	; 0x2c
    c354:	e1a00004 	mov	r0, r4
    c358:	e5843038 	str	r3, [r4, #56]	; 0x38
    c35c:	ebfffe4d 	bl	bc98 <CScreenDevice::ClearDisplayEnd()>
    c360:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c364:	e3530000 	cmp	r3, #0
    c368:	1a000031 	bne	c434 <CScreenDevice::Initialize()+0x158>
    c36c:	eb0001aa 	bl	ca1c <CDeviceNameService::Get()>
    c370:	e3021334 	movw	r1, #9012	; 0x2334
    c374:	e3401001 	movt	r1, #1
    c378:	e1a02004 	mov	r2, r4
    c37c:	e3a03000 	mov	r3, #0
    c380:	e3a06001 	mov	r6, #1
    c384:	eb000141 	bl	c890 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    c388:	e1a00006 	mov	r0, r6
    c38c:	e28dd008 	add	sp, sp, #8
    c390:	e8bd8070 	pop	{r4, r5, r6, pc}
    c394:	e3a00024 	mov	r0, #36	; 0x24
    c398:	ebfff5da 	bl	9b08 <operator new(unsigned int)>
    c39c:	e5942008 	ldr	r2, [r4, #8]
    c3a0:	e5941004 	ldr	r1, [r4, #4]
    c3a4:	e1a05000 	mov	r5, r0
    c3a8:	e3a03010 	mov	r3, #16
    c3ac:	e58d6004 	str	r6, [sp, #4]
    c3b0:	e58d6000 	str	r6, [sp]
    c3b4:	eb0011fe 	bl	10bb4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c3b8:	e5845010 	str	r5, [r4, #16]
    c3bc:	e1a00005 	mov	r0, r5
    c3c0:	eb001266 	bl	10d60 <CBcmFrameBuffer::Initialize()>
    c3c4:	e3500000 	cmp	r0, #0
    c3c8:	0affffee 	beq	c388 <CScreenDevice::Initialize()+0xac>
    c3cc:	e5940010 	ldr	r0, [r4, #16]
    c3d0:	eb00129d 	bl	10e4c <CBcmFrameBuffer::GetDepth() const>
    c3d4:	e3500010 	cmp	r0, #16
    c3d8:	1affffea 	bne	c388 <CScreenDevice::Initialize()+0xac>
    c3dc:	e5940010 	ldr	r0, [r4, #16]
    c3e0:	eb00129b 	bl	10e54 <CBcmFrameBuffer::GetBuffer() const>
    c3e4:	e5840018 	str	r0, [r4, #24]
    c3e8:	e5940010 	ldr	r0, [r4, #16]
    c3ec:	eb00129a 	bl	10e5c <CBcmFrameBuffer::GetSize() const>
    c3f0:	e584001c 	str	r0, [r4, #28]
    c3f4:	e5940010 	ldr	r0, [r4, #16]
    c3f8:	eb001291 	bl	10e44 <CBcmFrameBuffer::GetPitch() const>
    c3fc:	e5840020 	str	r0, [r4, #32]
    c400:	e5940010 	ldr	r0, [r4, #16]
    c404:	eb001286 	bl	10e24 <CBcmFrameBuffer::GetWidth() const>
    c408:	e5840024 	str	r0, [r4, #36]	; 0x24
    c40c:	e5940010 	ldr	r0, [r4, #16]
    c410:	eb001285 	bl	10e2c <CBcmFrameBuffer::GetHeight() const>
    c414:	e5943020 	ldr	r3, [r4, #32]
    c418:	e1a05000 	mov	r5, r0
    c41c:	e5840028 	str	r0, [r4, #40]	; 0x28
    c420:	e3130003 	tst	r3, #3
    c424:	01a030a3 	lsreq	r3, r3, #1
    c428:	05843020 	streq	r3, [r4, #32]
    c42c:	0affffbc 	beq	c324 <CScreenDevice::Initialize()+0x48>
    c430:	eaffffd4 	b	c388 <CScreenDevice::Initialize()+0xac>
    c434:	e1a00004 	mov	r0, r4
    c438:	ebfffbe0 	bl	b3c0 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]>
    c43c:	eaffffca 	b	c36c <CScreenDevice::Initialize()+0x90>

0000c440 <CScreenDevice::InvertCursor()>:
    c440:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    c444:	e3530000 	cmp	r3, #0
    c448:	012fff1e 	bxeq	lr
    c44c:	eafffbdb 	b	b3c0 <CScreenDevice::InvertCursor() [clone .part.6] [clone .constprop.9]>

0000c450 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    c450:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    c454:	e15c0001 	cmp	ip, r1
    c458:	912fff1e 	bxls	lr
    c45c:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    c460:	e15c0002 	cmp	ip, r2
    c464:	8590c020 	ldrhi	ip, [r0, #32]
    c468:	85900018 	ldrhi	r0, [r0, #24]
    c46c:	8022129c 	mlahi	r2, ip, r2, r1
    c470:	81a02082 	lslhi	r2, r2, #1
    c474:	818030b2 	strhhi	r3, [r0, r2]
    c478:	e12fff1e 	bx	lr

0000c47c <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c47c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c480:	e1530001 	cmp	r3, r1
    c484:	9a000008 	bls	c4ac <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    c488:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    c48c:	e1530002 	cmp	r3, r2
    c490:	9a000005 	bls	c4ac <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    c494:	e590c020 	ldr	ip, [r0, #32]
    c498:	e5903018 	ldr	r3, [r0, #24]
    c49c:	e022129c 	mla	r2, ip, r2, r1
    c4a0:	e1a02082 	lsl	r2, r2, #1
    c4a4:	e19300b2 	ldrh	r0, [r3, r2]
    c4a8:	e12fff1e 	bx	lr
    c4ac:	e3a00000 	mov	r0, #0
    c4b0:	e12fff1e 	bx	lr

0000c4b4 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c4b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c4b8:	e1a05000 	mov	r5, r0
    c4bc:	e1a06002 	mov	r6, r2
    c4c0:	e24dd00c 	sub	sp, sp, #12
    c4c4:	e1a04001 	mov	r4, r1
    c4c8:	e2800014 	add	r0, r0, #20
    c4cc:	e2044003 	and	r4, r4, #3
    c4d0:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    c4d4:	eb000035 	bl	c5b0 <CCharGenerator::GetCharWidth() const>
    c4d8:	e2061003 	and	r1, r6, #3
    c4dc:	e30233d8 	movw	r3, #9176	; 0x23d8
    c4e0:	e3403001 	movt	r3, #1
    c4e4:	e0831001 	add	r1, r3, r1
    c4e8:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    c4ec:	e0220094 	mla	r2, r4, r0, r0
    c4f0:	e3a03000 	mov	r3, #0
    c4f4:	e1a00005 	mov	r0, r5
    c4f8:	e1d111dc 	ldrsb	r1, [r1, #28]
    c4fc:	e0622007 	rsb	r2, r2, r7
    c500:	e58dc000 	str	ip, [sp]
    c504:	ebfffd51 	bl	ba50 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c508:	e28dd00c 	add	sp, sp, #12
    c50c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c510 <assertion_failed>:
    c510:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c514:	e1a05000 	mov	r5, r0
    c518:	e1a06001 	mov	r6, r1
    c51c:	e24dd01c 	sub	sp, sp, #28
    c520:	e1a07002 	mov	r7, r2
    c524:	e1a0400d 	mov	r4, sp
    c528:	eb0009e4 	bl	ecc0 <CInterruptSystem::DisableFIQ()>
    c52c:	f1080040 	cpsie	f
    c530:	e28d0008 	add	r0, sp, #8
    c534:	eb0004c2 	bl	d844 <CString::CString()>
    c538:	e1a03007 	mov	r3, r7
    c53c:	e1a02006 	mov	r2, r6
    c540:	e28d0008 	add	r0, sp, #8
    c544:	e30213fc 	movw	r1, #9212	; 0x23fc
    c548:	e3401001 	movt	r1, #1
    c54c:	eb0007e4 	bl	e4e4 <CString::Format(char const*, ...)>
    c550:	e28d0008 	add	r0, sp, #8
    c554:	eb0004d1 	bl	d8a0 <CString::operator char const*() const>
    c558:	e1a01000 	mov	r1, r0
    c55c:	e1a00004 	mov	r0, r4
    c560:	eb000079 	bl	c74c <debug_stacktrace(unsigned int const*, char const*)>
    c564:	eb00015f 	bl	cae8 <CLogger::Get()>
    c568:	e1a04000 	mov	r4, r0
    c56c:	e28d0008 	add	r0, sp, #8
    c570:	eb0004ca 	bl	d8a0 <CString::operator char const*() const>
    c574:	e3a02000 	mov	r2, #0
    c578:	e1a01000 	mov	r1, r0
    c57c:	e58d5000 	str	r5, [sp]
    c580:	e1a00004 	mov	r0, r4
    c584:	e3023404 	movw	r3, #9220	; 0x2404
    c588:	e3403001 	movt	r3, #1
    c58c:	eb000223 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c590:	e28d0008 	add	r0, sp, #8
    c594:	eb000477 	bl	d778 <CString::~CString()>
    c598:	e28dd01c 	add	sp, sp, #28
    c59c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c5a0 <CCharGenerator::CCharGenerator()>:
    c5a0:	e3a03008 	mov	r3, #8
    c5a4:	e5803000 	str	r3, [r0]
    c5a8:	e12fff1e 	bx	lr

0000c5ac <CCharGenerator::~CCharGenerator()>:
    c5ac:	e12fff1e 	bx	lr

0000c5b0 <CCharGenerator::GetCharWidth() const>:
    c5b0:	e5900000 	ldr	r0, [r0]
    c5b4:	e12fff1e 	bx	lr

0000c5b8 <CCharGenerator::GetCharHeight() const>:
    c5b8:	e3a00013 	mov	r0, #19
    c5bc:	e12fff1e 	bx	lr

0000c5c0 <CCharGenerator::GetUnderline() const>:
    c5c0:	e3a00010 	mov	r0, #16
    c5c4:	e12fff1e 	bx	lr

0000c5c8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    c5c8:	e6ef1071 	uxtb	r1, r1
    c5cc:	e92d4070 	push	{r4, r5, r6, lr}
    c5d0:	e2414021 	sub	r4, r1, #33	; 0x21
    c5d4:	e35400de 	cmp	r4, #222	; 0xde
    c5d8:	8a00000f 	bhi	c61c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    c5dc:	e1a06003 	mov	r6, r3
    c5e0:	e5903000 	ldr	r3, [r0]
    c5e4:	e1a05002 	mov	r5, r2
    c5e8:	e1530002 	cmp	r3, r2
    c5ec:	9a00000c 	bls	c624 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    c5f0:	e356000f 	cmp	r6, #15
    c5f4:	8a000008 	bhi	c61c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    c5f8:	e302141c 	movw	r1, #9244	; 0x241c
    c5fc:	e3401001 	movt	r1, #1
    c600:	e0811204 	add	r1, r1, r4, lsl #4
    c604:	e3a02080 	mov	r2, #128	; 0x80
    c608:	e7d13006 	ldrb	r3, [r1, r6]
    c60c:	e0133552 	ands	r3, r3, r2, asr r5
    c610:	13a00001 	movne	r0, #1
    c614:	03a00000 	moveq	r0, #0
    c618:	e8bd8070 	pop	{r4, r5, r6, pc}
    c61c:	e3a00000 	mov	r0, #0
    c620:	e8bd8070 	pop	{r4, r5, r6, pc}
    c624:	e303120c 	movw	r1, #12812	; 0x320c
    c628:	e3401001 	movt	r1, #1
    c62c:	e3030220 	movw	r0, #12832	; 0x3220
    c630:	e3400001 	movt	r0, #1
    c634:	e3a0204e 	mov	r2, #78	; 0x4e
    c638:	ebffffb4 	bl	c510 <assertion_failed>
    c63c:	e356000f 	cmp	r6, #15
    c640:	9affffec 	bls	c5f8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    c644:	eafffff4 	b	c61c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000c648 <debug_hexdump(void const*, unsigned int, char const*)>:
    c648:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c64c:	e3520000 	cmp	r2, #0
    c650:	e3038238 	movw	r8, #12856	; 0x3238
    c654:	e3408001 	movt	r8, #1
    c658:	11a08002 	movne	r8, r2
    c65c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    c660:	e1a05001 	mov	r5, r1
    c664:	e1a04000 	mov	r4, r0
    c668:	eb00011e 	bl	cae8 <CLogger::Get()>
    c66c:	e1a01008 	mov	r1, r8
    c670:	e3033240 	movw	r3, #12864	; 0x3240
    c674:	e3403001 	movt	r3, #1
    c678:	e58d4004 	str	r4, [sp, #4]
    c67c:	e3a02004 	mov	r2, #4
    c680:	e58d5000 	str	r5, [sp]
    c684:	eb0001e5 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c688:	e3550000 	cmp	r5, #0
    c68c:	0a000029 	beq	c738 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
    c690:	eb000114 	bl	cae8 <CLogger::Get()>
    c694:	e5d4900f 	ldrb	r9, [r4, #15]
    c698:	e5d4700e 	ldrb	r7, [r4, #14]
    c69c:	e3033264 	movw	r3, #12900	; 0x3264
    c6a0:	e3403001 	movt	r3, #1
    c6a4:	e5d4600d 	ldrb	r6, [r4, #13]
    c6a8:	e3a02004 	mov	r2, #4
    c6ac:	e5d4e00c 	ldrb	lr, [r4, #12]
    c6b0:	e1a01008 	mov	r1, r8
    c6b4:	e5d4b00b 	ldrb	fp, [r4, #11]
    c6b8:	e6ffc074 	uxth	ip, r4
    c6bc:	e5d4a00a 	ldrb	sl, [r4, #10]
    c6c0:	e2844010 	add	r4, r4, #16
    c6c4:	e58d9040 	str	r9, [sp, #64]	; 0x40
    c6c8:	e5549007 	ldrb	r9, [r4, #-7]
    c6cc:	e58d703c 	str	r7, [sp, #60]	; 0x3c
    c6d0:	e5547008 	ldrb	r7, [r4, #-8]
    c6d4:	e58d6038 	str	r6, [sp, #56]	; 0x38
    c6d8:	e5546009 	ldrb	r6, [r4, #-9]
    c6dc:	e58de034 	str	lr, [sp, #52]	; 0x34
    c6e0:	e554e00a 	ldrb	lr, [r4, #-10]
    c6e4:	e58db030 	str	fp, [sp, #48]	; 0x30
    c6e8:	e554b00b 	ldrb	fp, [r4, #-11]
    c6ec:	e58da02c 	str	sl, [sp, #44]	; 0x2c
    c6f0:	e554a00c 	ldrb	sl, [r4, #-12]
    c6f4:	e58d9028 	str	r9, [sp, #40]	; 0x28
    c6f8:	e554900d 	ldrb	r9, [r4, #-13]
    c6fc:	e58d7024 	str	r7, [sp, #36]	; 0x24
    c700:	e554700e 	ldrb	r7, [r4, #-14]
    c704:	e58d6020 	str	r6, [sp, #32]
    c708:	e554600f 	ldrb	r6, [r4, #-15]
    c70c:	e58de01c 	str	lr, [sp, #28]
    c710:	e554e010 	ldrb	lr, [r4, #-16]
    c714:	e58db018 	str	fp, [sp, #24]
    c718:	e58da014 	str	sl, [sp, #20]
    c71c:	e58d9010 	str	r9, [sp, #16]
    c720:	e58d700c 	str	r7, [sp, #12]
    c724:	e58d6008 	str	r6, [sp, #8]
    c728:	e88d5000 	stm	sp, {ip, lr}
    c72c:	eb0001bb 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c730:	e355000f 	cmp	r5, #15
    c734:	8a000001 	bhi	c740 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
    c738:	e28dd04c 	add	sp, sp, #76	; 0x4c
    c73c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c740:	e2555010 	subs	r5, r5, #16
    c744:	1affffd1 	bne	c690 <debug_hexdump(void const*, unsigned int, char const*)+0x48>
    c748:	eafffffa 	b	c738 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>

0000c74c <debug_stacktrace(unsigned int const*, char const*)>:
    c74c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c750:	e3510000 	cmp	r1, #0
    c754:	e3037238 	movw	r7, #12856	; 0x3238
    c758:	e3407001 	movt	r7, #1
    c75c:	11a07001 	movne	r7, r1
    c760:	e3016c4c 	movw	r6, #7244	; 0x1c4c
    c764:	e3406001 	movt	r6, #1
    c768:	e24dd00c 	sub	sp, sp, #12
    c76c:	e2405004 	sub	r5, r0, #4
    c770:	e3a04000 	mov	r4, #0
    c774:	ea000002 	b	c784 <debug_stacktrace(unsigned int const*, char const*)+0x38>
    c778:	e2844001 	add	r4, r4, #1
    c77c:	e3540040 	cmp	r4, #64	; 0x40
    c780:	0a000010 	beq	c7c8 <debug_stacktrace(unsigned int const*, char const*)+0x7c>
    c784:	e5b53004 	ldr	r3, [r5, #4]!
    c788:	e3530902 	cmp	r3, #32768	; 0x8000
    c78c:	3afffff9 	bcc	c778 <debug_stacktrace(unsigned int const*, char const*)+0x2c>
    c790:	e1530006 	cmp	r3, r6
    c794:	2afffff7 	bcs	c778 <debug_stacktrace(unsigned int const*, char const*)+0x2c>
    c798:	eb0000d2 	bl	cae8 <CLogger::Get()>
    c79c:	e5953000 	ldr	r3, [r5]
    c7a0:	e58d3004 	str	r3, [sp, #4]
    c7a4:	e3a02004 	mov	r2, #4
    c7a8:	e58d4000 	str	r4, [sp]
    c7ac:	e30332bc 	movw	r3, #12988	; 0x32bc
    c7b0:	e3403001 	movt	r3, #1
    c7b4:	e1a01007 	mov	r1, r7
    c7b8:	e2844001 	add	r4, r4, #1
    c7bc:	eb000197 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c7c0:	e3540040 	cmp	r4, #64	; 0x40
    c7c4:	1affffee 	bne	c784 <debug_stacktrace(unsigned int const*, char const*)+0x38>
    c7c8:	e28dd00c 	add	sp, sp, #12
    c7cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c7d0 <CDeviceNameService::CDeviceNameService()>:
    c7d0:	e92d4070 	push	{r4, r5, r6, lr}
    c7d4:	e30440b0 	movw	r4, #16560	; 0x40b0
    c7d8:	e3404001 	movt	r4, #1
    c7dc:	e3a03000 	mov	r3, #0
    c7e0:	e1a05000 	mov	r5, r0
    c7e4:	e1a01003 	mov	r1, r3
    c7e8:	e4803004 	str	r3, [r0], #4
    c7ec:	eb000d09 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
    c7f0:	e5943000 	ldr	r3, [r4]
    c7f4:	e3530000 	cmp	r3, #0
    c7f8:	0a000005 	beq	c814 <CDeviceNameService::CDeviceNameService()+0x44>
    c7fc:	e30312d0 	movw	r1, #13008	; 0x32d0
    c800:	e3401001 	movt	r1, #1
    c804:	e30302e8 	movw	r0, #13032	; 0x32e8
    c808:	e3400001 	movt	r0, #1
    c80c:	e3a0201e 	mov	r2, #30
    c810:	ebffff3e 	bl	c510 <assertion_failed>
    c814:	e5845000 	str	r5, [r4]
    c818:	e1a00005 	mov	r0, r5
    c81c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c820 <CDeviceNameService::~CDeviceNameService()>:
    c820:	e5903000 	ldr	r3, [r0]
    c824:	e92d4070 	push	{r4, r5, r6, lr}
    c828:	e3530000 	cmp	r3, #0
    c82c:	e1a05000 	mov	r5, r0
    c830:	0a00000e 	beq	c870 <CDeviceNameService::~CDeviceNameService()+0x50>
    c834:	e3a06000 	mov	r6, #0
    c838:	e5930004 	ldr	r0, [r3, #4]
    c83c:	e5934000 	ldr	r4, [r3]
    c840:	e3500000 	cmp	r0, #0
    c844:	0a000000 	beq	c84c <CDeviceNameService::~CDeviceNameService()+0x2c>
    c848:	ebfff4b1 	bl	9b14 <operator delete[](void*)>
    c84c:	e5953000 	ldr	r3, [r5]
    c850:	e3a01010 	mov	r1, #16
    c854:	e1a00003 	mov	r0, r3
    c858:	e5836004 	str	r6, [r3, #4]
    c85c:	e5836008 	str	r6, [r3, #8]
    c860:	ebfff4ac 	bl	9b18 <operator delete(void*, unsigned int)>
    c864:	e2543000 	subs	r3, r4, #0
    c868:	e5854000 	str	r4, [r5]
    c86c:	1afffff1 	bne	c838 <CDeviceNameService::~CDeviceNameService()+0x18>
    c870:	e30430b0 	movw	r3, #16560	; 0x40b0
    c874:	e3403001 	movt	r3, #1
    c878:	e2850004 	add	r0, r5, #4
    c87c:	e3a02000 	mov	r2, #0
    c880:	e5832000 	str	r2, [r3]
    c884:	eb000cf2 	bl	fc54 <CSpinLock::~CSpinLock()>
    c888:	e1a00005 	mov	r0, r5
    c88c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c890 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    c890:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c894:	e2808004 	add	r8, r0, #4
    c898:	e1a05000 	mov	r5, r0
    c89c:	e1a00008 	mov	r0, r8
    c8a0:	e1a06001 	mov	r6, r1
    c8a4:	e1a07002 	mov	r7, r2
    c8a8:	e1a09003 	mov	r9, r3
    c8ac:	eb000cf5 	bl	fc88 <CSpinLock::Acquire()>
    c8b0:	e3a00010 	mov	r0, #16
    c8b4:	ebfff493 	bl	9b08 <operator new(unsigned int)>
    c8b8:	e3560000 	cmp	r6, #0
    c8bc:	e1a04000 	mov	r4, r0
    c8c0:	0a000017 	beq	c924 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x94>
    c8c4:	e1a00006 	mov	r0, r6
    c8c8:	ebfff7cd 	bl	a804 <strlen>
    c8cc:	e2800001 	add	r0, r0, #1
    c8d0:	ebfff48d 	bl	9b0c <operator new[](unsigned int)>
    c8d4:	e1a01006 	mov	r1, r6
    c8d8:	e5840004 	str	r0, [r4, #4]
    c8dc:	ebfff7ed 	bl	a898 <strcpy>
    c8e0:	e3570000 	cmp	r7, #0
    c8e4:	0a000007 	beq	c908 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x78>
    c8e8:	e5953000 	ldr	r3, [r5]
    c8ec:	e1a00008 	mov	r0, r8
    c8f0:	e5854000 	str	r4, [r5]
    c8f4:	e5847008 	str	r7, [r4, #8]
    c8f8:	e584900c 	str	r9, [r4, #12]
    c8fc:	e5843000 	str	r3, [r4]
    c900:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    c904:	ea000cfb 	b	fcf8 <CSpinLock::Release()>
    c908:	e30312d0 	movw	r1, #13008	; 0x32d0
    c90c:	e3401001 	movt	r1, #1
    c910:	e3030300 	movw	r0, #13056	; 0x3300
    c914:	e3400001 	movt	r0, #1
    c918:	e3a0203f 	mov	r2, #63	; 0x3f
    c91c:	ebfffefb 	bl	c510 <assertion_failed>
    c920:	eafffff0 	b	c8e8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    c924:	e30312d0 	movw	r1, #13008	; 0x32d0
    c928:	e3401001 	movt	r1, #1
    c92c:	e30302f4 	movw	r0, #13044	; 0x32f4
    c930:	e3400001 	movt	r0, #1
    c934:	e3a0203a 	mov	r2, #58	; 0x3a
    c938:	ebfffef4 	bl	c510 <assertion_failed>
    c93c:	eaffffe0 	b	c8c4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

0000c940 <CDeviceNameService::GetDevice(char const*, int)>:
    c940:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c944:	e2515000 	subs	r5, r1, #0
    c948:	e1a04000 	mov	r4, r0
    c94c:	e1a06002 	mov	r6, r2
    c950:	0a000022 	beq	c9e0 <CDeviceNameService::GetDevice(char const*, int)+0xa0>
    c954:	e2847004 	add	r7, r4, #4
    c958:	e1a00007 	mov	r0, r7
    c95c:	eb000cc9 	bl	fc88 <CSpinLock::Acquire()>
    c960:	e5944000 	ldr	r4, [r4]
    c964:	e3540000 	cmp	r4, #0
    c968:	0a000018 	beq	c9d0 <CDeviceNameService::GetDevice(char const*, int)+0x90>
    c96c:	e5941004 	ldr	r1, [r4, #4]
    c970:	e3510000 	cmp	r1, #0
    c974:	0a00000d 	beq	c9b0 <CDeviceNameService::GetDevice(char const*, int)+0x70>
    c978:	e1a00005 	mov	r0, r5
    c97c:	ebfff7aa 	bl	a82c <strcmp>
    c980:	e3500000 	cmp	r0, #0
    c984:	1afffff5 	bne	c960 <CDeviceNameService::GetDevice(char const*, int)+0x20>
    c988:	e594300c 	ldr	r3, [r4, #12]
    c98c:	e1530006 	cmp	r3, r6
    c990:	1afffff2 	bne	c960 <CDeviceNameService::GetDevice(char const*, int)+0x20>
    c994:	e5944008 	ldr	r4, [r4, #8]
    c998:	e1a00007 	mov	r0, r7
    c99c:	eb000cd5 	bl	fcf8 <CSpinLock::Release()>
    c9a0:	e3540000 	cmp	r4, #0
    c9a4:	0a000014 	beq	c9fc <CDeviceNameService::GetDevice(char const*, int)+0xbc>
    c9a8:	e1a00004 	mov	r0, r4
    c9ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c9b0:	e30312d0 	movw	r1, #13008	; 0x32d0
    c9b4:	e3401001 	movt	r1, #1
    c9b8:	e3030310 	movw	r0, #13072	; 0x3310
    c9bc:	e3400001 	movt	r0, #1
    c9c0:	e3a02053 	mov	r2, #83	; 0x53
    c9c4:	ebfffed1 	bl	c510 <assertion_failed>
    c9c8:	e5941004 	ldr	r1, [r4, #4]
    c9cc:	eaffffe9 	b	c978 <CDeviceNameService::GetDevice(char const*, int)+0x38>
    c9d0:	e1a00007 	mov	r0, r7
    c9d4:	eb000cc7 	bl	fcf8 <CSpinLock::Release()>
    c9d8:	e3a00000 	mov	r0, #0
    c9dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c9e0:	e30312d0 	movw	r1, #13008	; 0x32d0
    c9e4:	e3401001 	movt	r1, #1
    c9e8:	e30302f4 	movw	r0, #13044	; 0x32f4
    c9ec:	e3400001 	movt	r0, #1
    c9f0:	e3a0204c 	mov	r2, #76	; 0x4c
    c9f4:	ebfffec5 	bl	c510 <assertion_failed>
    c9f8:	eaffffd5 	b	c954 <CDeviceNameService::GetDevice(char const*, int)+0x14>
    c9fc:	e3a0205b 	mov	r2, #91	; 0x5b
    ca00:	e30312d0 	movw	r1, #13008	; 0x32d0
    ca04:	e3401001 	movt	r1, #1
    ca08:	e3030324 	movw	r0, #13092	; 0x3324
    ca0c:	e3400001 	movt	r0, #1
    ca10:	ebfffebe 	bl	c510 <assertion_failed>
    ca14:	e1a00004 	mov	r0, r4
    ca18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ca1c <CDeviceNameService::Get()>:
    ca1c:	e92d4010 	push	{r4, lr}
    ca20:	e30440b0 	movw	r4, #16560	; 0x40b0
    ca24:	e3404001 	movt	r4, #1
    ca28:	e5940000 	ldr	r0, [r4]
    ca2c:	e3500000 	cmp	r0, #0
    ca30:	18bd8010 	popne	{r4, pc}
    ca34:	e3a02069 	mov	r2, #105	; 0x69
    ca38:	e30312d0 	movw	r1, #13008	; 0x32d0
    ca3c:	e3401001 	movt	r1, #1
    ca40:	e3030334 	movw	r0, #13108	; 0x3334
    ca44:	e3400001 	movt	r0, #1
    ca48:	ebfffeb0 	bl	c510 <assertion_failed>
    ca4c:	e5940000 	ldr	r0, [r4]
    ca50:	e8bd8010 	pop	{r4, pc}

0000ca54 <CLogger::CLogger(unsigned int, CTimer*)>:
    ca54:	e92d4010 	push	{r4, lr}
    ca58:	e1a04000 	mov	r4, r0
    ca5c:	e3a03000 	mov	r3, #0
    ca60:	e2800018 	add	r0, r0, #24
    ca64:	e984000c 	stmib	r4, {r2, r3}
    ca68:	e584300c 	str	r3, [r4, #12]
    ca6c:	e5843010 	str	r3, [r4, #16]
    ca70:	e5843014 	str	r3, [r4, #20]
    ca74:	e5841000 	str	r1, [r4]
    ca78:	e3a01001 	mov	r1, #1
    ca7c:	eb000c65 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
    ca80:	e3a00901 	mov	r0, #16384	; 0x4000
    ca84:	ebfff420 	bl	9b0c <operator new[](unsigned int)>
    ca88:	e30430b4 	movw	r3, #16564	; 0x40b4
    ca8c:	e3403001 	movt	r3, #1
    ca90:	e584000c 	str	r0, [r4, #12]
    ca94:	e1a00004 	mov	r0, r4
    ca98:	e5834000 	str	r4, [r3]
    ca9c:	e8bd8010 	pop	{r4, pc}

0000caa0 <CLogger::~CLogger()>:
    caa0:	e92d4010 	push	{r4, lr}
    caa4:	e1a04000 	mov	r4, r0
    caa8:	e590000c 	ldr	r0, [r0, #12]
    caac:	e3a02000 	mov	r2, #0
    cab0:	e30430b4 	movw	r3, #16564	; 0x40b4
    cab4:	e3403001 	movt	r3, #1
    cab8:	e1500002 	cmp	r0, r2
    cabc:	e5832000 	str	r2, [r3]
    cac0:	0a000000 	beq	cac8 <CLogger::~CLogger()+0x28>
    cac4:	ebfff412 	bl	9b14 <operator delete[](void*)>
    cac8:	e3a03000 	mov	r3, #0
    cacc:	e2840018 	add	r0, r4, #24
    cad0:	e584300c 	str	r3, [r4, #12]
    cad4:	e5843008 	str	r3, [r4, #8]
    cad8:	e5843004 	str	r3, [r4, #4]
    cadc:	eb000c5c 	bl	fc54 <CSpinLock::~CSpinLock()>
    cae0:	e1a00004 	mov	r0, r4
    cae4:	e8bd8010 	pop	{r4, pc}

0000cae8 <CLogger::Get()>:
    cae8:	e30430b4 	movw	r3, #16564	; 0x40b4
    caec:	e3403001 	movt	r3, #1
    caf0:	e5930000 	ldr	r0, [r3]
    caf4:	e12fff1e 	bx	lr

0000caf8 <CLogger::Write(char const*)>:
    caf8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cafc:	e1a04000 	mov	r4, r0
    cb00:	e1a00001 	mov	r0, r1
    cb04:	e1a05001 	mov	r5, r1
    cb08:	ebfff73d 	bl	a804 <strlen>
    cb0c:	e1a07000 	mov	r7, r0
    cb10:	e1a01005 	mov	r1, r5
    cb14:	e5940008 	ldr	r0, [r4, #8]
    cb18:	e1a02007 	mov	r2, r7
    cb1c:	e2846018 	add	r6, r4, #24
    cb20:	e5903000 	ldr	r3, [r0]
    cb24:	e593300c 	ldr	r3, [r3, #12]
    cb28:	e12fff33 	blx	r3
    cb2c:	e1a00006 	mov	r0, r6
    cb30:	eb000c54 	bl	fc88 <CSpinLock::Acquire()>
    cb34:	e0850007 	add	r0, r5, r7
    cb38:	e1550000 	cmp	r5, r0
    cb3c:	0a00000f 	beq	cb80 <CLogger::Write(char const*)+0x88>
    cb40:	e0d530d1 	ldrsb	r3, [r5], #1
    cb44:	e353000d 	cmp	r3, #13
    cb48:	0afffffa 	beq	cb38 <CLogger::Write(char const*)+0x40>
    cb4c:	e5941010 	ldr	r1, [r4, #16]
    cb50:	e594c00c 	ldr	ip, [r4, #12]
    cb54:	e7cc3001 	strb	r3, [ip, r1]
    cb58:	e5943010 	ldr	r3, [r4, #16]
    cb5c:	e5941014 	ldr	r1, [r4, #20]
    cb60:	e2833001 	add	r3, r3, #1
    cb64:	e7ed3053 	ubfx	r3, r3, #0, #14
    cb68:	e5843010 	str	r3, [r4, #16]
    cb6c:	e1530001 	cmp	r3, r1
    cb70:	1afffff0 	bne	cb38 <CLogger::Write(char const*)+0x40>
    cb74:	e2433001 	sub	r3, r3, #1
    cb78:	e7ed3053 	ubfx	r3, r3, #0, #14
    cb7c:	e5843010 	str	r3, [r4, #16]
    cb80:	e1a00006 	mov	r0, r6
    cb84:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    cb88:	ea000c5a 	b	fcf8 <CSpinLock::Release()>

0000cb8c <CLogger::Read(void*, unsigned int)>:
    cb8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cb90:	e1a04000 	mov	r4, r0
    cb94:	e2807018 	add	r7, r0, #24
    cb98:	e1a00007 	mov	r0, r7
    cb9c:	e1a06002 	mov	r6, r2
    cba0:	e1a05001 	mov	r5, r1
    cba4:	eb000c37 	bl	fc88 <CSpinLock::Acquire()>
    cba8:	e5942010 	ldr	r2, [r4, #16]
    cbac:	e5943014 	ldr	r3, [r4, #20]
    cbb0:	e1520003 	cmp	r2, r3
    cbb4:	11a08006 	movne	r8, r6
    cbb8:	13a0c000 	movne	ip, #0
    cbbc:	1a00000a 	bne	cbec <CLogger::Read(void*, unsigned int)+0x60>
    cbc0:	ea000012 	b	cc10 <CLogger::Read(void*, unsigned int)+0x84>
    cbc4:	e594100c 	ldr	r1, [r4, #12]
    cbc8:	e19130d3 	ldrsb	r3, [r1, r3]
    cbcc:	e4c53001 	strb	r3, [r5], #1
    cbd0:	e5943014 	ldr	r3, [r4, #20]
    cbd4:	e5941010 	ldr	r1, [r4, #16]
    cbd8:	e2833001 	add	r3, r3, #1
    cbdc:	e7ed3053 	ubfx	r3, r3, #0, #14
    cbe0:	e5843014 	str	r3, [r4, #20]
    cbe4:	e1530001 	cmp	r3, r1
    cbe8:	0a000006 	beq	cc08 <CLogger::Read(void*, unsigned int)+0x7c>
    cbec:	e15c0006 	cmp	ip, r6
    cbf0:	e28cc001 	add	ip, ip, #1
    cbf4:	1afffff2 	bne	cbc4 <CLogger::Read(void*, unsigned int)+0x38>
    cbf8:	e1a00007 	mov	r0, r7
    cbfc:	eb000c3d 	bl	fcf8 <CSpinLock::Release()>
    cc00:	e1a00008 	mov	r0, r8
    cc04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cc08:	e1a0800c 	mov	r8, ip
    cc0c:	eafffff9 	b	cbf8 <CLogger::Read(void*, unsigned int)+0x6c>
    cc10:	e1a00007 	mov	r0, r7
    cc14:	eb000c37 	bl	fcf8 <CSpinLock::Release()>
    cc18:	e3e00000 	mvn	r0, #0
    cc1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000cc20 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    cc20:	e590c000 	ldr	ip, [r0]
    cc24:	e152000c 	cmp	r2, ip
    cc28:	812fff1e 	bxhi	lr
    cc2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cc30:	e1a05002 	mov	r5, r2
    cc34:	e1a04000 	mov	r4, r0
    cc38:	e24dd020 	sub	sp, sp, #32
    cc3c:	e1a07003 	mov	r7, r3
    cc40:	e1a0000d 	mov	r0, sp
    cc44:	e1a06001 	mov	r6, r1
    cc48:	eb0002fd 	bl	d844 <CString::CString()>
    cc4c:	e3550000 	cmp	r5, #0
    cc50:	0a000049 	beq	cd7c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    cc54:	e5940004 	ldr	r0, [r4, #4]
    cc58:	e3500000 	cmp	r0, #0
    cc5c:	0a000032 	beq	cd2c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    cc60:	ebfff496 	bl	9ec0 <CTimer::GetTimeString()>
    cc64:	e2508000 	subs	r8, r0, #0
    cc68:	0a00000b 	beq	cc9c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    cc6c:	eb00030b 	bl	d8a0 <CString::operator char const*() const>
    cc70:	e1a01000 	mov	r1, r0
    cc74:	e1a0000d 	mov	r0, sp
    cc78:	eb000324 	bl	d910 <CString::Append(char const*)>
    cc7c:	e1a0000d 	mov	r0, sp
    cc80:	e3031348 	movw	r1, #13128	; 0x3348
    cc84:	e3401001 	movt	r1, #1
    cc88:	eb000320 	bl	d910 <CString::Append(char const*)>
    cc8c:	e5983000 	ldr	r3, [r8]
    cc90:	e1a00008 	mov	r0, r8
    cc94:	e5933004 	ldr	r3, [r3, #4]
    cc98:	e12fff33 	blx	r3
    cc9c:	e1a01006 	mov	r1, r6
    cca0:	e1a0000d 	mov	r0, sp
    cca4:	eb000319 	bl	d910 <CString::Append(char const*)>
    cca8:	e28d6010 	add	r6, sp, #16
    ccac:	e1a0000d 	mov	r0, sp
    ccb0:	e303134c 	movw	r1, #13132	; 0x334c
    ccb4:	e3401001 	movt	r1, #1
    ccb8:	eb000314 	bl	d910 <CString::Append(char const*)>
    ccbc:	e1a00006 	mov	r0, r6
    ccc0:	eb0002df 	bl	d844 <CString::CString()>
    ccc4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    ccc8:	e1a01007 	mov	r1, r7
    cccc:	e1a00006 	mov	r0, r6
    ccd0:	eb000416 	bl	dd30 <CString::FormatV(char const*, std::__va_list)>
    ccd4:	e1a00006 	mov	r0, r6
    ccd8:	eb0002f0 	bl	d8a0 <CString::operator char const*() const>
    ccdc:	e1a01000 	mov	r1, r0
    cce0:	e1a0000d 	mov	r0, sp
    cce4:	eb000309 	bl	d910 <CString::Append(char const*)>
    cce8:	e3550000 	cmp	r5, #0
    ccec:	0a00003c 	beq	cde4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    ccf0:	e1a0000d 	mov	r0, sp
    ccf4:	e3031358 	movw	r1, #13144	; 0x3358
    ccf8:	e3401001 	movt	r1, #1
    ccfc:	eb000303 	bl	d910 <CString::Append(char const*)>
    cd00:	e1a0000d 	mov	r0, sp
    cd04:	eb0002e5 	bl	d8a0 <CString::operator char const*() const>
    cd08:	e1a01000 	mov	r1, r0
    cd0c:	e1a00004 	mov	r0, r4
    cd10:	ebffff78 	bl	caf8 <CLogger::Write(char const*)>
    cd14:	e1a00006 	mov	r0, r6
    cd18:	eb000296 	bl	d778 <CString::~CString()>
    cd1c:	e1a0000d 	mov	r0, sp
    cd20:	eb000294 	bl	d778 <CString::~CString()>
    cd24:	e28dd020 	add	sp, sp, #32
    cd28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cd2c:	e1a01006 	mov	r1, r6
    cd30:	e1a0000d 	mov	r0, sp
    cd34:	eb0002f5 	bl	d910 <CString::Append(char const*)>
    cd38:	e28d6010 	add	r6, sp, #16
    cd3c:	e1a0000d 	mov	r0, sp
    cd40:	e303134c 	movw	r1, #13132	; 0x334c
    cd44:	e3401001 	movt	r1, #1
    cd48:	eb0002f0 	bl	d910 <CString::Append(char const*)>
    cd4c:	e1a00006 	mov	r0, r6
    cd50:	eb0002bb 	bl	d844 <CString::CString()>
    cd54:	e1a01007 	mov	r1, r7
    cd58:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    cd5c:	e1a00006 	mov	r0, r6
    cd60:	eb0003f2 	bl	dd30 <CString::FormatV(char const*, std::__va_list)>
    cd64:	e1a00006 	mov	r0, r6
    cd68:	eb0002cc 	bl	d8a0 <CString::operator char const*() const>
    cd6c:	e1a01000 	mov	r1, r0
    cd70:	e1a0000d 	mov	r0, sp
    cd74:	eb0002e5 	bl	d910 <CString::Append(char const*)>
    cd78:	eaffffdc 	b	ccf0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    cd7c:	e3031340 	movw	r1, #13120	; 0x3340
    cd80:	e3401001 	movt	r1, #1
    cd84:	e1a0000d 	mov	r0, sp
    cd88:	eb0002ca 	bl	d8b8 <CString::operator=(char const*)>
    cd8c:	e5940004 	ldr	r0, [r4, #4]
    cd90:	e3500000 	cmp	r0, #0
    cd94:	1affffb1 	bne	cc60 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    cd98:	e1a01006 	mov	r1, r6
    cd9c:	e1a0000d 	mov	r0, sp
    cda0:	eb0002da 	bl	d910 <CString::Append(char const*)>
    cda4:	e28d6010 	add	r6, sp, #16
    cda8:	e1a0000d 	mov	r0, sp
    cdac:	e303134c 	movw	r1, #13132	; 0x334c
    cdb0:	e3401001 	movt	r1, #1
    cdb4:	eb0002d5 	bl	d910 <CString::Append(char const*)>
    cdb8:	e1a00006 	mov	r0, r6
    cdbc:	eb0002a0 	bl	d844 <CString::CString()>
    cdc0:	e1a01007 	mov	r1, r7
    cdc4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    cdc8:	e1a00006 	mov	r0, r6
    cdcc:	eb0003d7 	bl	dd30 <CString::FormatV(char const*, std::__va_list)>
    cdd0:	e1a00006 	mov	r0, r6
    cdd4:	eb0002b1 	bl	d8a0 <CString::operator char const*() const>
    cdd8:	e1a01000 	mov	r1, r0
    cddc:	e1a0000d 	mov	r0, sp
    cde0:	eb0002ca 	bl	d910 <CString::Append(char const*)>
    cde4:	e1a0000d 	mov	r0, sp
    cde8:	e3031350 	movw	r1, #13136	; 0x3350
    cdec:	e3401001 	movt	r1, #1
    cdf0:	eb0002c6 	bl	d910 <CString::Append(char const*)>
    cdf4:	e1a0000d 	mov	r0, sp
    cdf8:	e3031358 	movw	r1, #13144	; 0x3358
    cdfc:	e3401001 	movt	r1, #1
    ce00:	eb0002c2 	bl	d910 <CString::Append(char const*)>
    ce04:	e1a0000d 	mov	r0, sp
    ce08:	eb0002a4 	bl	d8a0 <CString::operator char const*() const>
    ce0c:	e1a01000 	mov	r1, r0
    ce10:	e1a00004 	mov	r0, r4
    ce14:	ebffff37 	bl	caf8 <CLogger::Write(char const*)>
    ce18:	eb000b07 	bl	fa3c <CMultiCoreSupport::HaltAll()>
    ce1c:	eaffffbc 	b	cd14 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    ce20:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    ce24:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ce28:	e24dd010 	sub	sp, sp, #16
    ce2c:	e28dc018 	add	ip, sp, #24
    ce30:	e59d3014 	ldr	r3, [sp, #20]
    ce34:	e58dc000 	str	ip, [sp]
    ce38:	e58dc00c 	str	ip, [sp, #12]
    ce3c:	ebffff77 	bl	cc20 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    ce40:	e28dd010 	add	sp, sp, #16
    ce44:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ce48:	e28dd004 	add	sp, sp, #4
    ce4c:	e12fff1e 	bx	lr

0000ce50 <CLogger::Initialize(CDevice*)>:
    ce50:	e92d4010 	push	{r4, lr}
    ce54:	e5801008 	str	r1, [r0, #8]
    ce58:	e1a04000 	mov	r4, r0
    ce5c:	e24dd008 	sub	sp, sp, #8
    ce60:	eb000a42 	bl	f770 <CMachineInfo::Get()>
    ce64:	eb0009ce 	bl	f5a4 <CMachineInfo::GetMachineName() const>
    ce68:	e3a02003 	mov	r2, #3
    ce6c:	e58d0000 	str	r0, [sp]
    ce70:	e303335c 	movw	r3, #13148	; 0x335c
    ce74:	e3403001 	movt	r3, #1
    ce78:	e1a00004 	mov	r0, r4
    ce7c:	e3031374 	movw	r1, #13172	; 0x3374
    ce80:	e3401001 	movt	r1, #1
    ce84:	ebffffe5 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ce88:	e3a00001 	mov	r0, #1
    ce8c:	e28dd008 	add	sp, sp, #8
    ce90:	e8bd8010 	pop	{r4, pc}

0000ce94 <CSerialDevice::Read(void*, unsigned int)>:
    ce94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ce98:	e2515000 	subs	r5, r1, #0
    ce9c:	e1a04000 	mov	r4, r0
    cea0:	e1a06002 	mov	r6, r2
    cea4:	0a00004b 	beq	cfd8 <CSerialDevice::Read(void*, unsigned int)+0x144>
    cea8:	e59470a4 	ldr	r7, [r4, #164]	; 0xa4
    ceac:	e3570000 	cmp	r7, #0
    ceb0:	0a000023 	beq	cf44 <CSerialDevice::Read(void*, unsigned int)+0xb0>
    ceb4:	e2848d43 	add	r8, r4, #4288	; 0x10c0
    ceb8:	e2888008 	add	r8, r8, #8
    cebc:	e1a00008 	mov	r0, r8
    cec0:	eb000b70 	bl	fc88 <CSpinLock::Acquire()>
    cec4:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    cec8:	e3530000 	cmp	r3, #0
    cecc:	ba00003d 	blt	cfc8 <CSerialDevice::Read(void*, unsigned int)+0x134>
    ced0:	e3560000 	cmp	r6, #0
    ced4:	0a00004a 	beq	d004 <CSerialDevice::Read(void*, unsigned int)+0x170>
    ced8:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    cedc:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    cee0:	e1520003 	cmp	r2, r3
    cee4:	0a000048 	beq	d00c <CSerialDevice::Read(void*, unsigned int)+0x178>
    cee8:	e3a02001 	mov	r2, #1
    ceec:	ea000003 	b	cf00 <CSerialDevice::Read(void*, unsigned int)+0x6c>
    cef0:	e59418b0 	ldr	r1, [r4, #2224]	; 0x8b0
    cef4:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    cef8:	e1510003 	cmp	r1, r3
    cefc:	0a00000c 	beq	cf34 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    cf00:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    cf04:	e1560002 	cmp	r6, r2
    cf08:	e1a07002 	mov	r7, r2
    cf0c:	e2822001 	add	r2, r2, #1
    cf10:	e0841003 	add	r1, r4, r3
    cf14:	e2833001 	add	r3, r3, #1
    cf18:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    cf1c:	e5d130b0 	ldrb	r3, [r1, #176]	; 0xb0
    cf20:	e4c53001 	strb	r3, [r5], #1
    cf24:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    cf28:	e7ea3053 	ubfx	r3, r3, #0, #11
    cf2c:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    cf30:	1affffee 	bne	cef0 <CSerialDevice::Read(void*, unsigned int)+0x5c>
    cf34:	e1a00008 	mov	r0, r8
    cf38:	eb000b6e 	bl	fcf8 <CSpinLock::Release()>
    cf3c:	e1a00007 	mov	r0, r7
    cf40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cf44:	e3560000 	cmp	r6, #0
    cf48:	0a000031 	beq	d014 <CSerialDevice::Read(void*, unsigned int)+0x180>
    cf4c:	e3a01a01 	mov	r1, #4096	; 0x1000
    cf50:	e3431f20 	movt	r1, #16160	; 0x3f20
    cf54:	e5913018 	ldr	r3, [r1, #24]
    cf58:	e3130010 	tst	r3, #16
    cf5c:	1afffff6 	bne	cf3c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cf60:	e5913000 	ldr	r3, [r1]
    cf64:	e3130b01 	tst	r3, #1024	; 0x400
    cf68:	1a000014 	bne	cfc0 <CSerialDevice::Read(void*, unsigned int)+0x12c>
    cf6c:	e3130b02 	tst	r3, #2048	; 0x800
    cf70:	1a00001f 	bne	cff4 <CSerialDevice::Read(void*, unsigned int)+0x160>
    cf74:	e3130c01 	tst	r3, #256	; 0x100
    cf78:	03a02001 	moveq	r2, #1
    cf7c:	0a000004 	beq	cf94 <CSerialDevice::Read(void*, unsigned int)+0x100>
    cf80:	ea00001d 	b	cffc <CSerialDevice::Read(void*, unsigned int)+0x168>
    cf84:	e3130b02 	tst	r3, #2048	; 0x800
    cf88:	1a000019 	bne	cff4 <CSerialDevice::Read(void*, unsigned int)+0x160>
    cf8c:	e3130c01 	tst	r3, #256	; 0x100
    cf90:	1a000019 	bne	cffc <CSerialDevice::Read(void*, unsigned int)+0x168>
    cf94:	e1560002 	cmp	r6, r2
    cf98:	e1a07002 	mov	r7, r2
    cf9c:	e4c53001 	strb	r3, [r5], #1
    cfa0:	e2822001 	add	r2, r2, #1
    cfa4:	0affffe4 	beq	cf3c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cfa8:	e5913018 	ldr	r3, [r1, #24]
    cfac:	e3130010 	tst	r3, #16
    cfb0:	1affffe1 	bne	cf3c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cfb4:	e5913000 	ldr	r3, [r1]
    cfb8:	e3130b01 	tst	r3, #1024	; 0x400
    cfbc:	0afffff0 	beq	cf84 <CSerialDevice::Read(void*, unsigned int)+0xf0>
    cfc0:	e3e07000 	mvn	r7, #0
    cfc4:	eaffffdc 	b	cf3c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cfc8:	e59478b8 	ldr	r7, [r4, #2232]	; 0x8b8
    cfcc:	e3a03000 	mov	r3, #0
    cfd0:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    cfd4:	eaffffd6 	b	cf34 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    cfd8:	e3031398 	movw	r1, #13208	; 0x3398
    cfdc:	e3401001 	movt	r1, #1
    cfe0:	e30303a4 	movw	r0, #13220	; 0x33a4
    cfe4:	e3400001 	movt	r0, #1
    cfe8:	e3a02c01 	mov	r2, #256	; 0x100
    cfec:	ebfffd47 	bl	c510 <assertion_failed>
    cff0:	eaffffac 	b	cea8 <CSerialDevice::Read(void*, unsigned int)+0x14>
    cff4:	e3e07001 	mvn	r7, #1
    cff8:	eaffffcf 	b	cf3c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cffc:	e3e07002 	mvn	r7, #2
    d000:	eaffffcd 	b	cf3c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    d004:	e1a07006 	mov	r7, r6
    d008:	eaffffc9 	b	cf34 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    d00c:	e3a07000 	mov	r7, #0
    d010:	eaffffc7 	b	cf34 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    d014:	e1a07006 	mov	r7, r6
    d018:	eaffffc7 	b	cf3c <CSerialDevice::Read(void*, unsigned int)+0xa8>

0000d01c <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>:
    d01c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d020:	e1a04000 	mov	r4, r0
    d024:	e1a06002 	mov	r6, r2
    d028:	e1a07001 	mov	r7, r1
    d02c:	eb000fbc 	bl	10f24 <CDevice::CDevice()>
    d030:	e1a00004 	mov	r0, r4
    d034:	e3a03000 	mov	r3, #0
    d038:	e1a02003 	mov	r2, r3
    d03c:	e3a01020 	mov	r1, #32
    d040:	e303c384 	movw	ip, #13188	; 0x3384
    d044:	e340c001 	movt	ip, #1
    d048:	e480c004 	str	ip, [r0], #4
    d04c:	e3a05001 	mov	r5, #1
    d050:	ebfff175 	bl	962c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d054:	e3a03000 	mov	r3, #0
    d058:	e1a02003 	mov	r2, r3
    d05c:	e284002c 	add	r0, r4, #44	; 0x2c
    d060:	e3a01021 	mov	r1, #33	; 0x21
    d064:	ebfff170 	bl	962c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d068:	e2840054 	add	r0, r4, #84	; 0x54
    d06c:	e3a03000 	mov	r3, #0
    d070:	e3a02004 	mov	r2, #4
    d074:	e3a0100e 	mov	r1, #14
    d078:	ebfff16b 	bl	962c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d07c:	e3a0100f 	mov	r1, #15
    d080:	e284007c 	add	r0, r4, #124	; 0x7c
    d084:	e3a03000 	mov	r3, #0
    d088:	e3a02004 	mov	r2, #4
    d08c:	ebfff166 	bl	962c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    d090:	e2842a01 	add	r2, r4, #4096	; 0x1000
    d094:	e3560000 	cmp	r6, #0
    d098:	e2840d43 	add	r0, r4, #4288	; 0x10c0
    d09c:	e3a03000 	mov	r3, #0
    d0a0:	e58470a4 	str	r7, [r4, #164]	; 0xa4
    d0a4:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    d0a8:	13a01002 	movne	r1, #2
    d0ac:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    d0b0:	01a01005 	moveq	r1, r5
    d0b4:	e58430ac 	str	r3, [r4, #172]	; 0xac
    d0b8:	e2800008 	add	r0, r0, #8
    d0bc:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    d0c0:	e58460a8 	str	r6, [r4, #168]	; 0xa8
    d0c4:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    d0c8:	e58250c4 	str	r5, [r2, #196]	; 0xc4
    d0cc:	e58230c0 	str	r3, [r2, #192]	; 0xc0
    d0d0:	eb000ad0 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
    d0d4:	e2840d43 	add	r0, r4, #4288	; 0x10c0
    d0d8:	e1a01005 	mov	r1, r5
    d0dc:	e2800020 	add	r0, r0, #32
    d0e0:	eb000acc 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
    d0e4:	e1a00004 	mov	r0, r4
    d0e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d0ec <CSerialDevice::Initialize(unsigned int)>:
    d0ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d0f0:	e1a08001 	mov	r8, r1
    d0f4:	e1a05000 	mov	r5, r0
    d0f8:	eb00099c 	bl	f770 <CMachineInfo::Get()>
    d0fc:	e3a01002 	mov	r1, #2
    d100:	eb00093d 	bl	f5fc <CMachineInfo::GetClockRate(unsigned int) const>
    d104:	e2507000 	subs	r7, r0, #0
    d108:	0a000060 	beq	d290 <CSerialDevice::Initialize(unsigned int)+0x1a4>
    d10c:	e30037d4 	movw	r3, #2004	; 0x7d4
    d110:	e340303d 	movt	r3, #61	; 0x3d
    d114:	e2482f4b 	sub	r2, r8, #300	; 0x12c
    d118:	e1520003 	cmp	r2, r3
    d11c:	8a000054 	bhi	d274 <CSerialDevice::Initialize(unsigned int)+0x188>
    d120:	e1a04208 	lsl	r4, r8, #4
    d124:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    d128:	e736f417 	udiv	r6, r7, r4
    d12c:	e2462001 	sub	r2, r6, #1
    d130:	e1520003 	cmp	r2, r3
    d134:	8a000047 	bhi	d258 <CSerialDevice::Initialize(unsigned int)+0x16c>
    d138:	e0617694 	mls	r1, r4, r6, r7
    d13c:	e1a01181 	lsl	r1, r1, #3
    d140:	e731f811 	udiv	r1, r1, r8
    d144:	e2014001 	and	r4, r1, #1
    d148:	e08440a1 	add	r4, r4, r1, lsr #1
    d14c:	e354003f 	cmp	r4, #63	; 0x3f
    d150:	8a00002b 	bhi	d204 <CSerialDevice::Initialize(unsigned int)+0x118>
    d154:	e59500a4 	ldr	r0, [r5, #164]	; 0xa4
    d158:	e3500000 	cmp	r0, #0
    d15c:	0a000031 	beq	d228 <CSerialDevice::Initialize(unsigned int)+0x13c>
    d160:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
    d164:	e30d2650 	movw	r2, #54864	; 0xd650
    d168:	e3402000 	movt	r2, #0
    d16c:	e3530000 	cmp	r3, #0
    d170:	e3a01039 	mov	r1, #57	; 0x39
    d174:	e1a03005 	mov	r3, r5
    d178:	0a00001f 	beq	d1fc <CSerialDevice::Initialize(unsigned int)+0x110>
    d17c:	eb000608 	bl	e9a4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    d180:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
    d184:	e3a03a01 	mov	r3, #4096	; 0x1000
    d188:	e3433f20 	movt	r3, #16160	; 0x3f20
    d18c:	e3520000 	cmp	r2, #0
    d190:	e3a01000 	mov	r1, #0
    d194:	e3a02001 	mov	r2, #1
    d198:	e58520ac 	str	r2, [r5, #172]	; 0xac
    d19c:	e5831038 	str	r1, [r3, #56]	; 0x38
    d1a0:	e30027ff 	movw	r2, #2047	; 0x7ff
    d1a4:	e5832044 	str	r2, [r3, #68]	; 0x44
    d1a8:	e5836024 	str	r6, [r3, #36]	; 0x24
    d1ac:	e5834028 	str	r4, [r3, #40]	; 0x28
    d1b0:	0a000023 	beq	d244 <CSerialDevice::Initialize(unsigned int)+0x158>
    d1b4:	e3a02009 	mov	r2, #9
    d1b8:	e3a01070 	mov	r1, #112	; 0x70
    d1bc:	e5832034 	str	r2, [r3, #52]	; 0x34
    d1c0:	e3a02e45 	mov	r2, #1104	; 0x450
    d1c4:	e583102c 	str	r1, [r3, #44]	; 0x2c
    d1c8:	e5832038 	str	r2, [r3, #56]	; 0x38
    d1cc:	e3a03a01 	mov	r3, #4096	; 0x1000
    d1d0:	e3433f20 	movt	r3, #16160	; 0x3f20
    d1d4:	e3002301 	movw	r2, #769	; 0x301
    d1d8:	e5832030 	str	r2, [r3, #48]	; 0x30
    d1dc:	ebfffe0e 	bl	ca1c <CDeviceNameService::Get()>
    d1e0:	e1a02005 	mov	r2, r5
    d1e4:	e3a03000 	mov	r3, #0
    d1e8:	e3031424 	movw	r1, #13348	; 0x3424
    d1ec:	e3401001 	movt	r1, #1
    d1f0:	ebfffda6 	bl	c890 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    d1f4:	e3a00001 	mov	r0, #1
    d1f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d1fc:	eb000647 	bl	eb20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    d200:	eaffffde 	b	d180 <CSerialDevice::Initialize(unsigned int)+0x94>
    d204:	e3031398 	movw	r1, #13208	; 0x3398
    d208:	e3401001 	movt	r1, #1
    d20c:	e3030410 	movw	r0, #13328	; 0x3410
    d210:	e3400001 	movt	r0, #1
    d214:	e3a02091 	mov	r2, #145	; 0x91
    d218:	ebfffcbc 	bl	c510 <assertion_failed>
    d21c:	e59500a4 	ldr	r0, [r5, #164]	; 0xa4
    d220:	e3500000 	cmp	r0, #0
    d224:	1affffcd 	bne	d160 <CSerialDevice::Initialize(unsigned int)+0x74>
    d228:	e3a03a01 	mov	r3, #4096	; 0x1000
    d22c:	e3433f20 	movt	r3, #16160	; 0x3f20
    d230:	e30027ff 	movw	r2, #2047	; 0x7ff
    d234:	e5830038 	str	r0, [r3, #56]	; 0x38
    d238:	e5832044 	str	r2, [r3, #68]	; 0x44
    d23c:	e5836024 	str	r6, [r3, #36]	; 0x24
    d240:	e5834028 	str	r4, [r3, #40]	; 0x28
    d244:	e3a03a01 	mov	r3, #4096	; 0x1000
    d248:	e3433f20 	movt	r3, #16160	; 0x3f20
    d24c:	e3a02060 	mov	r2, #96	; 0x60
    d250:	e583202c 	str	r2, [r3, #44]	; 0x2c
    d254:	eaffffdc 	b	d1cc <CSerialDevice::Initialize(unsigned int)+0xe0>
    d258:	e3031398 	movw	r1, #13208	; 0x3398
    d25c:	e3401001 	movt	r1, #1
    d260:	e30303ec 	movw	r0, #13292	; 0x33ec
    d264:	e3400001 	movt	r0, #1
    d268:	e3a0208e 	mov	r2, #142	; 0x8e
    d26c:	ebfffca7 	bl	c510 <assertion_failed>
    d270:	eaffffb0 	b	d138 <CSerialDevice::Initialize(unsigned int)+0x4c>
    d274:	e3031398 	movw	r1, #13208	; 0x3398
    d278:	e3401001 	movt	r1, #1
    d27c:	e30303c0 	movw	r0, #13248	; 0x33c0
    d280:	e3400001 	movt	r0, #1
    d284:	e3a0208b 	mov	r2, #139	; 0x8b
    d288:	ebfffca0 	bl	c510 <assertion_failed>
    d28c:	eaffffa3 	b	d120 <CSerialDevice::Initialize(unsigned int)+0x34>
    d290:	e3031398 	movw	r1, #13208	; 0x3398
    d294:	e3401001 	movt	r1, #1
    d298:	e30303b0 	movw	r0, #13232	; 0x33b0
    d29c:	e3400001 	movt	r0, #1
    d2a0:	e3a02089 	mov	r2, #137	; 0x89
    d2a4:	ebfffc99 	bl	c510 <assertion_failed>
    d2a8:	eaffff97 	b	d10c <CSerialDevice::Initialize(unsigned int)+0x20>

0000d2ac <CSerialDevice::GetOptions() const>:
    d2ac:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d2b0:	e59000c4 	ldr	r0, [r0, #196]	; 0xc4
    d2b4:	e12fff1e 	bx	lr

0000d2b8 <CSerialDevice::SetOptions(unsigned int)>:
    d2b8:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d2bc:	e58010c4 	str	r1, [r0, #196]	; 0xc4
    d2c0:	e12fff1e 	bx	lr

0000d2c4 <CSerialDevice::Write(unsigned char)>:
    d2c4:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    d2c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d2cc:	e3530000 	cmp	r3, #0
    d2d0:	03a00a01 	moveq	r0, #4096	; 0x1000
    d2d4:	03430f20 	movteq	r0, #16160	; 0x3f20
    d2d8:	0a000019 	beq	d344 <CSerialDevice::Write(unsigned char)+0x80>
    d2dc:	e2806d43 	add	r6, r0, #4288	; 0x10c0
    d2e0:	e1a04000 	mov	r4, r0
    d2e4:	e2866008 	add	r6, r6, #8
    d2e8:	e1a05001 	mov	r5, r1
    d2ec:	e1a00006 	mov	r0, r6
    d2f0:	eb000a64 	bl	fc88 <CSpinLock::Acquire()>
    d2f4:	e2843a01 	add	r3, r4, #4096	; 0x1000
    d2f8:	e59320bc 	ldr	r2, [r3, #188]	; 0xbc
    d2fc:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
    d300:	e2822001 	add	r2, r2, #1
    d304:	e7ea2052 	ubfx	r2, r2, #0, #11
    d308:	e1520001 	cmp	r2, r1
    d30c:	13a07001 	movne	r7, #1
    d310:	03a07000 	moveq	r7, #0
    d314:	159320bc 	ldrne	r2, [r3, #188]	; 0xbc
    d318:	10840002 	addne	r0, r4, r2
    d31c:	10822007 	addne	r2, r2, r7
    d320:	158320bc 	strne	r2, [r3, #188]	; 0xbc
    d324:	15c058bc 	strbne	r5, [r0, #2236]	; 0x8bc
    d328:	e1a00006 	mov	r0, r6
    d32c:	159320bc 	ldrne	r2, [r3, #188]	; 0xbc
    d330:	17ea2052 	ubfxne	r2, r2, #0, #11
    d334:	158320bc 	strne	r2, [r3, #188]	; 0xbc
    d338:	eb000a6e 	bl	fcf8 <CSpinLock::Release()>
    d33c:	e1a00007 	mov	r0, r7
    d340:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d344:	e5902018 	ldr	r2, [r0, #24]
    d348:	e3a03a01 	mov	r3, #4096	; 0x1000
    d34c:	e3433f20 	movt	r3, #16160	; 0x3f20
    d350:	e3120020 	tst	r2, #32
    d354:	1afffffa 	bne	d344 <CSerialDevice::Write(unsigned char)+0x80>
    d358:	e3a07001 	mov	r7, #1
    d35c:	e5831000 	str	r1, [r3]
    d360:	e1a00007 	mov	r0, r7
    d364:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d368 <CSerialDevice::Write(void const*, unsigned int)>:
    d368:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d36c:	e2809d43 	add	r9, r0, #4288	; 0x10c0
    d370:	e1a04001 	mov	r4, r1
    d374:	e2899020 	add	r9, r9, #32
    d378:	e1a06000 	mov	r6, r0
    d37c:	e1a00009 	mov	r0, r9
    d380:	e1a07002 	mov	r7, r2
    d384:	eb000a3f 	bl	fc88 <CSpinLock::Acquire()>
    d388:	e3540000 	cmp	r4, #0
    d38c:	0a000049 	beq	d4b8 <CSerialDevice::Write(void const*, unsigned int)+0x150>
    d390:	e3570000 	cmp	r7, #0
    d394:	0a00004e 	beq	d4d4 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    d398:	e3a05000 	mov	r5, #0
    d39c:	e2868a01 	add	r8, r6, #4096	; 0x1000
    d3a0:	ea000002 	b	d3b0 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    d3a4:	e2855001 	add	r5, r5, #1
    d3a8:	e1550007 	cmp	r5, r7
    d3ac:	0a00000f 	beq	d3f0 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    d3b0:	e5d41000 	ldrb	r1, [r4]
    d3b4:	e1a00006 	mov	r0, r6
    d3b8:	ebffffc1 	bl	d2c4 <CSerialDevice::Write(unsigned char)>
    d3bc:	e3500000 	cmp	r0, #0
    d3c0:	0a00000a 	beq	d3f0 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    d3c4:	e4d43001 	ldrb	r3, [r4], #1
    d3c8:	e353000a 	cmp	r3, #10
    d3cc:	1afffff4 	bne	d3a4 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    d3d0:	e59830c4 	ldr	r3, [r8, #196]	; 0xc4
    d3d4:	e3130001 	tst	r3, #1
    d3d8:	0afffff1 	beq	d3a4 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    d3dc:	e3a0100d 	mov	r1, #13
    d3e0:	e1a00006 	mov	r0, r6
    d3e4:	ebffffb6 	bl	d2c4 <CSerialDevice::Write(unsigned char)>
    d3e8:	e3500000 	cmp	r0, #0
    d3ec:	1affffec 	bne	d3a4 <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    d3f0:	e1a00009 	mov	r0, r9
    d3f4:	eb000a3f 	bl	fcf8 <CSpinLock::Release()>
    d3f8:	e59630a4 	ldr	r3, [r6, #164]	; 0xa4
    d3fc:	e3530000 	cmp	r3, #0
    d400:	0a000024 	beq	d498 <CSerialDevice::Write(void const*, unsigned int)+0x130>
    d404:	e2864d43 	add	r4, r6, #4288	; 0x10c0
    d408:	e2844008 	add	r4, r4, #8
    d40c:	e1a00004 	mov	r0, r4
    d410:	eb000a1c 	bl	fc88 <CSpinLock::Acquire()>
    d414:	e2863a01 	add	r3, r6, #4096	; 0x1000
    d418:	e59310bc 	ldr	r1, [r3, #188]	; 0xbc
    d41c:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d420:	e1510002 	cmp	r1, r2
    d424:	0a000019 	beq	d490 <CSerialDevice::Write(void const*, unsigned int)+0x128>
    d428:	e59320bc 	ldr	r2, [r3, #188]	; 0xbc
    d42c:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
    d430:	e1510002 	cmp	r1, r2
    d434:	0a000015 	beq	d490 <CSerialDevice::Write(void const*, unsigned int)+0x128>
    d438:	e3a01a01 	mov	r1, #4096	; 0x1000
    d43c:	e3431f20 	movt	r1, #16160	; 0x3f20
    d440:	e5912018 	ldr	r2, [r1, #24]
    d444:	e3120020 	tst	r2, #32
    d448:	0a000003 	beq	d45c <CSerialDevice::Write(void const*, unsigned int)+0xf4>
    d44c:	ea000013 	b	d4a0 <CSerialDevice::Write(void const*, unsigned int)+0x138>
    d450:	e5912018 	ldr	r2, [r1, #24]
    d454:	e3120020 	tst	r2, #32
    d458:	1a000010 	bne	d4a0 <CSerialDevice::Write(void const*, unsigned int)+0x138>
    d45c:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d460:	e0860002 	add	r0, r6, r2
    d464:	e2822001 	add	r2, r2, #1
    d468:	e58320c0 	str	r2, [r3, #192]	; 0xc0
    d46c:	e5d028bc 	ldrb	r2, [r0, #2236]	; 0x8bc
    d470:	e5812000 	str	r2, [r1]
    d474:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d478:	e7ea2052 	ubfx	r2, r2, #0, #11
    d47c:	e58320c0 	str	r2, [r3, #192]	; 0xc0
    d480:	e59300bc 	ldr	r0, [r3, #188]	; 0xbc
    d484:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d488:	e1500002 	cmp	r0, r2
    d48c:	1affffef 	bne	d450 <CSerialDevice::Write(void const*, unsigned int)+0xe8>
    d490:	e1a00004 	mov	r0, r4
    d494:	eb000a17 	bl	fcf8 <CSpinLock::Release()>
    d498:	e1a00005 	mov	r0, r5
    d49c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d4a0:	e3a03a01 	mov	r3, #4096	; 0x1000
    d4a4:	e3433f20 	movt	r3, #16160	; 0x3f20
    d4a8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    d4ac:	e3822020 	orr	r2, r2, #32
    d4b0:	e5832038 	str	r2, [r3, #56]	; 0x38
    d4b4:	eafffff5 	b	d490 <CSerialDevice::Write(void const*, unsigned int)+0x128>
    d4b8:	e3031398 	movw	r1, #13208	; 0x3398
    d4bc:	e3401001 	movt	r1, #1
    d4c0:	e30303a4 	movw	r0, #13220	; 0x33a4
    d4c4:	e3400001 	movt	r0, #1
    d4c8:	e3a020c2 	mov	r2, #194	; 0xc2
    d4cc:	ebfffc0f 	bl	c510 <assertion_failed>
    d4d0:	eaffffae 	b	d390 <CSerialDevice::Write(void const*, unsigned int)+0x28>
    d4d4:	e1a05007 	mov	r5, r7
    d4d8:	eaffffc4 	b	d3f0 <CSerialDevice::Write(void const*, unsigned int)+0x88>

0000d4dc <CSerialDevice::InterruptHandler()>:
    d4dc:	e92d4070 	push	{r4, r5, r6, lr}
    d4e0:	e2805d43 	add	r5, r0, #4288	; 0x10c0
    d4e4:	e1a04000 	mov	r4, r0
    d4e8:	e2855008 	add	r5, r5, #8
    d4ec:	e1a00005 	mov	r0, r5
    d4f0:	eb0009e4 	bl	fc88 <CSpinLock::Acquire()>
    d4f4:	e3a03a01 	mov	r3, #4096	; 0x1000
    d4f8:	e3433f20 	movt	r3, #16160	; 0x3f20
    d4fc:	e1a01003 	mov	r1, r3
    d500:	e3e0e002 	mvn	lr, #2
    d504:	e3e00001 	mvn	r0, #1
    d508:	e3e0c000 	mvn	ip, #0
    d50c:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    d510:	e5832044 	str	r2, [r3, #68]	; 0x44
    d514:	e5913018 	ldr	r3, [r1, #24]
    d518:	e3a02a01 	mov	r2, #4096	; 0x1000
    d51c:	e3432f20 	movt	r2, #16160	; 0x3f20
    d520:	e3130010 	tst	r3, #16
    d524:	1a000024 	bne	d5bc <CSerialDevice::InterruptHandler()+0xe0>
    d528:	e5912000 	ldr	r2, [r1]
    d52c:	e3120b01 	tst	r2, #1024	; 0x400
    d530:	0a000011 	beq	d57c <CSerialDevice::InterruptHandler()+0xa0>
    d534:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d538:	e3530000 	cmp	r3, #0
    d53c:	0584c8b8 	streq	ip, [r4, #2232]	; 0x8b8
    d540:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    d544:	e59468b4 	ldr	r6, [r4, #2228]	; 0x8b4
    d548:	e2833001 	add	r3, r3, #1
    d54c:	e7ea3053 	ubfx	r3, r3, #0, #11
    d550:	e1530006 	cmp	r3, r6
    d554:	0a00000e 	beq	d594 <CSerialDevice::InterruptHandler()+0xb8>
    d558:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    d55c:	e0846003 	add	r6, r4, r3
    d560:	e2833001 	add	r3, r3, #1
    d564:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    d568:	e5c620b0 	strb	r2, [r6, #176]	; 0xb0
    d56c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    d570:	e7ea3053 	ubfx	r3, r3, #0, #11
    d574:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    d578:	eaffffe5 	b	d514 <CSerialDevice::InterruptHandler()+0x38>
    d57c:	e3120b02 	tst	r2, #2048	; 0x800
    d580:	0a000007 	beq	d5a4 <CSerialDevice::InterruptHandler()+0xc8>
    d584:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d588:	e3530000 	cmp	r3, #0
    d58c:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    d590:	eaffffea 	b	d540 <CSerialDevice::InterruptHandler()+0x64>
    d594:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d598:	e3530000 	cmp	r3, #0
    d59c:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    d5a0:	eaffffdb 	b	d514 <CSerialDevice::InterruptHandler()+0x38>
    d5a4:	e3120c01 	tst	r2, #256	; 0x100
    d5a8:	0affffe4 	beq	d540 <CSerialDevice::InterruptHandler()+0x64>
    d5ac:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d5b0:	e3530000 	cmp	r3, #0
    d5b4:	0584e8b8 	streq	lr, [r4, #2232]	; 0x8b8
    d5b8:	eaffffe0 	b	d540 <CSerialDevice::InterruptHandler()+0x64>
    d5bc:	e5923018 	ldr	r3, [r2, #24]
    d5c0:	e3130020 	tst	r3, #32
    d5c4:	1a000016 	bne	d624 <CSerialDevice::InterruptHandler()+0x148>
    d5c8:	e2843a01 	add	r3, r4, #4096	; 0x1000
    d5cc:	e59300bc 	ldr	r0, [r3, #188]	; 0xbc
    d5d0:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
    d5d4:	e1500001 	cmp	r0, r1
    d5d8:	11a01002 	movne	r1, r2
    d5dc:	1a000004 	bne	d5f4 <CSerialDevice::InterruptHandler()+0x118>
    d5e0:	ea000012 	b	d630 <CSerialDevice::InterruptHandler()+0x154>
    d5e4:	e59300bc 	ldr	r0, [r3, #188]	; 0xbc
    d5e8:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d5ec:	e1500002 	cmp	r0, r2
    d5f0:	0a00000e 	beq	d630 <CSerialDevice::InterruptHandler()+0x154>
    d5f4:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d5f8:	e0840002 	add	r0, r4, r2
    d5fc:	e2822001 	add	r2, r2, #1
    d600:	e58320c0 	str	r2, [r3, #192]	; 0xc0
    d604:	e5d028bc 	ldrb	r2, [r0, #2236]	; 0x8bc
    d608:	e5812000 	str	r2, [r1]
    d60c:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
    d610:	e7ea2052 	ubfx	r2, r2, #0, #11
    d614:	e58320c0 	str	r2, [r3, #192]	; 0xc0
    d618:	e5912018 	ldr	r2, [r1, #24]
    d61c:	e3120020 	tst	r2, #32
    d620:	0affffef 	beq	d5e4 <CSerialDevice::InterruptHandler()+0x108>
    d624:	e1a00005 	mov	r0, r5
    d628:	e8bd4070 	pop	{r4, r5, r6, lr}
    d62c:	ea0009b1 	b	fcf8 <CSpinLock::Release()>
    d630:	e3a03a01 	mov	r3, #4096	; 0x1000
    d634:	e3433f20 	movt	r3, #16160	; 0x3f20
    d638:	e1a00005 	mov	r0, r5
    d63c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d640:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    d644:	e3c22020 	bic	r2, r2, #32
    d648:	e5832038 	str	r2, [r3, #56]	; 0x38
    d64c:	ea0009a9 	b	fcf8 <CSpinLock::Release()>

0000d650 <CSerialDevice::InterruptStub(void*)>:
    d650:	e92d4010 	push	{r4, lr}
    d654:	e2504000 	subs	r4, r0, #0
    d658:	0a000002 	beq	d668 <CSerialDevice::InterruptStub(void*)+0x18>
    d65c:	e1a00004 	mov	r0, r4
    d660:	e8bd4010 	pop	{r4, lr}
    d664:	eaffff9c 	b	d4dc <CSerialDevice::InterruptHandler()>
    d668:	e3031398 	movw	r1, #13208	; 0x3398
    d66c:	e3401001 	movt	r1, #1
    d670:	e30202d0 	movw	r0, #8912	; 0x22d0
    d674:	e3400001 	movt	r0, #1
    d678:	e30021c1 	movw	r2, #449	; 0x1c1
    d67c:	ebfffba3 	bl	c510 <assertion_failed>
    d680:	e1a00004 	mov	r0, r4
    d684:	e8bd4010 	pop	{r4, lr}
    d688:	eaffff93 	b	d4dc <CSerialDevice::InterruptHandler()>

0000d68c <CSerialDevice::~CSerialDevice()>:
    d68c:	e3a03a01 	mov	r3, #4096	; 0x1000
    d690:	e3433f20 	movt	r3, #16160	; 0x3f20
    d694:	e92d4010 	push	{r4, lr}
    d698:	e3a02000 	mov	r2, #0
    d69c:	e3031384 	movw	r1, #13188	; 0x3384
    d6a0:	e3401001 	movt	r1, #1
    d6a4:	e5801000 	str	r1, [r0]
    d6a8:	e5832038 	str	r2, [r3, #56]	; 0x38
    d6ac:	e1a04000 	mov	r4, r0
    d6b0:	e5832030 	str	r2, [r3, #48]	; 0x30
    d6b4:	e59030ac 	ldr	r3, [r0, #172]	; 0xac
    d6b8:	e1530002 	cmp	r3, r2
    d6bc:	0a000006 	beq	d6dc <CSerialDevice::~CSerialDevice()+0x50>
    d6c0:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    d6c4:	e1500002 	cmp	r0, r2
    d6c8:	0a00001a 	beq	d738 <CSerialDevice::~CSerialDevice()+0xac>
    d6cc:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
    d6d0:	e3530000 	cmp	r3, #0
    d6d4:	0a000014 	beq	d72c <CSerialDevice::~CSerialDevice()+0xa0>
    d6d8:	eb0004e0 	bl	ea60 <CInterruptSystem::DisconnectFIQ()>
    d6dc:	e2840d43 	add	r0, r4, #4288	; 0x10c0
    d6e0:	e3a03000 	mov	r3, #0
    d6e4:	e2800020 	add	r0, r0, #32
    d6e8:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    d6ec:	eb000958 	bl	fc54 <CSpinLock::~CSpinLock()>
    d6f0:	e2840d43 	add	r0, r4, #4288	; 0x10c0
    d6f4:	e2800008 	add	r0, r0, #8
    d6f8:	eb000955 	bl	fc54 <CSpinLock::~CSpinLock()>
    d6fc:	e284007c 	add	r0, r4, #124	; 0x7c
    d700:	ebffed54 	bl	8c58 <CGPIOPin::~CGPIOPin()>
    d704:	e2840054 	add	r0, r4, #84	; 0x54
    d708:	ebffed52 	bl	8c58 <CGPIOPin::~CGPIOPin()>
    d70c:	e284002c 	add	r0, r4, #44	; 0x2c
    d710:	ebffed50 	bl	8c58 <CGPIOPin::~CGPIOPin()>
    d714:	e2840004 	add	r0, r4, #4
    d718:	ebffed4e 	bl	8c58 <CGPIOPin::~CGPIOPin()>
    d71c:	e1a00004 	mov	r0, r4
    d720:	eb000df3 	bl	10ef4 <CDevice::~CDevice()>
    d724:	e1a00004 	mov	r0, r4
    d728:	e8bd8010 	pop	{r4, pc}
    d72c:	e3a01039 	mov	r1, #57	; 0x39
    d730:	eb000533 	bl	ec04 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    d734:	eaffffe8 	b	d6dc <CSerialDevice::~CSerialDevice()+0x50>
    d738:	e3031398 	movw	r1, #13208	; 0x3398
    d73c:	e3401001 	movt	r1, #1
    d740:	e30201f8 	movw	r0, #8696	; 0x21f8
    d744:	e3400001 	movt	r0, #1
    d748:	e3a02078 	mov	r2, #120	; 0x78
    d74c:	ebfffb6f 	bl	c510 <assertion_failed>
    d750:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    d754:	eaffffdc 	b	d6cc <CSerialDevice::~CSerialDevice()+0x40>

0000d758 <CSerialDevice::~CSerialDevice()>:
    d758:	e92d4010 	push	{r4, lr}
    d75c:	e1a04000 	mov	r4, r0
    d760:	ebffffc9 	bl	d68c <CSerialDevice::~CSerialDevice()>
    d764:	e1a00004 	mov	r0, r4
    d768:	e30110f8 	movw	r1, #4344	; 0x10f8
    d76c:	ebfff0e9 	bl	9b18 <operator delete(void*, unsigned int)>
    d770:	e1a00004 	mov	r0, r4
    d774:	e8bd8010 	pop	{r4, pc}

0000d778 <CString::~CString()>:
    d778:	e92d4010 	push	{r4, lr}
    d77c:	e1a04000 	mov	r4, r0
    d780:	e5900004 	ldr	r0, [r0, #4]
    d784:	e3033434 	movw	r3, #13364	; 0x3434
    d788:	e3403001 	movt	r3, #1
    d78c:	e3500000 	cmp	r0, #0
    d790:	e5843000 	str	r3, [r4]
    d794:	0a000000 	beq	d79c <CString::~CString()+0x24>
    d798:	ebfff0dd 	bl	9b14 <operator delete[](void*)>
    d79c:	e1a00004 	mov	r0, r4
    d7a0:	e8bd8010 	pop	{r4, pc}

0000d7a4 <CString::~CString()>:
    d7a4:	e92d4010 	push	{r4, lr}
    d7a8:	e1a04000 	mov	r4, r0
    d7ac:	e5900004 	ldr	r0, [r0, #4]
    d7b0:	e3033434 	movw	r3, #13364	; 0x3434
    d7b4:	e3403001 	movt	r3, #1
    d7b8:	e3500000 	cmp	r0, #0
    d7bc:	e5843000 	str	r3, [r4]
    d7c0:	0a000000 	beq	d7c8 <CString::~CString()+0x24>
    d7c4:	ebfff0d2 	bl	9b14 <operator delete[](void*)>
    d7c8:	e1a00004 	mov	r0, r4
    d7cc:	e3a01010 	mov	r1, #16
    d7d0:	ebfff0d0 	bl	9b18 <operator delete(void*, unsigned int)>
    d7d4:	e1a00004 	mov	r0, r4
    d7d8:	e8bd8010 	pop	{r4, pc}

0000d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>:
    d7dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d7e0:	e990002c 	ldmib	r0, {r2, r3, r5}
    d7e4:	e0625005 	rsb	r5, r2, r5
    d7e8:	e0851001 	add	r1, r5, r1
    d7ec:	e2812001 	add	r2, r1, #1
    d7f0:	e1520003 	cmp	r2, r3
    d7f4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d7f8:	e1a04000 	mov	r4, r0
    d7fc:	e2816041 	add	r6, r1, #65	; 0x41
    d800:	e1a00006 	mov	r0, r6
    d804:	ebfff0c0 	bl	9b0c <operator new[](unsigned int)>
    d808:	e3a02000 	mov	r2, #0
    d80c:	e594300c 	ldr	r3, [r4, #12]
    d810:	e1a07000 	mov	r7, r0
    d814:	e5c32000 	strb	r2, [r3]
    d818:	e5941004 	ldr	r1, [r4, #4]
    d81c:	ebfff41d 	bl	a898 <strcpy>
    d820:	e5940004 	ldr	r0, [r4, #4]
    d824:	e3500000 	cmp	r0, #0
    d828:	0a000000 	beq	d830 <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]+0x54>
    d82c:	ebfff0b8 	bl	9b14 <operator delete[](void*)>
    d830:	e0875005 	add	r5, r7, r5
    d834:	e5847004 	str	r7, [r4, #4]
    d838:	e584500c 	str	r5, [r4, #12]
    d83c:	e5846008 	str	r6, [r4, #8]
    d840:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d844 <CString::CString()>:
    d844:	e3a02000 	mov	r2, #0
    d848:	e3031434 	movw	r1, #13364	; 0x3434
    d84c:	e3401001 	movt	r1, #1
    d850:	e5802008 	str	r2, [r0, #8]
    d854:	e8800006 	stm	r0, {r1, r2}
    d858:	e12fff1e 	bx	lr

0000d85c <CString::CString(char const*)>:
    d85c:	e92d4070 	push	{r4, r5, r6, lr}
    d860:	e1a04000 	mov	r4, r0
    d864:	e3033434 	movw	r3, #13364	; 0x3434
    d868:	e3403001 	movt	r3, #1
    d86c:	e1a00001 	mov	r0, r1
    d870:	e1a05001 	mov	r5, r1
    d874:	e5843000 	str	r3, [r4]
    d878:	ebfff3e1 	bl	a804 <strlen>
    d87c:	e2803001 	add	r3, r0, #1
    d880:	e1a00003 	mov	r0, r3
    d884:	e5843008 	str	r3, [r4, #8]
    d888:	ebfff09f 	bl	9b0c <operator new[](unsigned int)>
    d88c:	e1a01005 	mov	r1, r5
    d890:	e5840004 	str	r0, [r4, #4]
    d894:	ebfff3ff 	bl	a898 <strcpy>
    d898:	e1a00004 	mov	r0, r4
    d89c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d8a0 <CString::operator char const*() const>:
    d8a0:	e5900004 	ldr	r0, [r0, #4]
    d8a4:	e3033cf4 	movw	r3, #15604	; 0x3cf4
    d8a8:	e3403001 	movt	r3, #1
    d8ac:	e3500000 	cmp	r0, #0
    d8b0:	01a00003 	moveq	r0, r3
    d8b4:	e12fff1e 	bx	lr

0000d8b8 <CString::operator=(char const*)>:
    d8b8:	e92d4070 	push	{r4, r5, r6, lr}
    d8bc:	e1a04000 	mov	r4, r0
    d8c0:	e5900004 	ldr	r0, [r0, #4]
    d8c4:	e1a05001 	mov	r5, r1
    d8c8:	e3500000 	cmp	r0, #0
    d8cc:	0a000000 	beq	d8d4 <CString::operator=(char const*)+0x1c>
    d8d0:	ebfff08f 	bl	9b14 <operator delete[](void*)>
    d8d4:	e1a00005 	mov	r0, r5
    d8d8:	ebfff3c9 	bl	a804 <strlen>
    d8dc:	e2803001 	add	r3, r0, #1
    d8e0:	e1a00003 	mov	r0, r3
    d8e4:	e5843008 	str	r3, [r4, #8]
    d8e8:	ebfff087 	bl	9b0c <operator new[](unsigned int)>
    d8ec:	e1a01005 	mov	r1, r5
    d8f0:	e5840004 	str	r0, [r4, #4]
    d8f4:	ebfff3e7 	bl	a898 <strcpy>
    d8f8:	e5940004 	ldr	r0, [r4, #4]
    d8fc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d900 <CString::GetLength() const>:
    d900:	e5900004 	ldr	r0, [r0, #4]
    d904:	e3500000 	cmp	r0, #0
    d908:	012fff1e 	bxeq	lr
    d90c:	eafff3bc 	b	a804 <strlen>

0000d910 <CString::Append(char const*)>:
    d910:	e92d4070 	push	{r4, r5, r6, lr}
    d914:	e1a04000 	mov	r4, r0
    d918:	e5900004 	ldr	r0, [r0, #4]
    d91c:	e3a03001 	mov	r3, #1
    d920:	e1a06001 	mov	r6, r1
    d924:	e3500000 	cmp	r0, #0
    d928:	e5843008 	str	r3, [r4, #8]
    d92c:	0a000003 	beq	d940 <CString::Append(char const*)+0x30>
    d930:	ebfff3b3 	bl	a804 <strlen>
    d934:	e5943008 	ldr	r3, [r4, #8]
    d938:	e0830000 	add	r0, r3, r0
    d93c:	e5840008 	str	r0, [r4, #8]
    d940:	e1a00006 	mov	r0, r6
    d944:	ebfff3ae 	bl	a804 <strlen>
    d948:	e5943008 	ldr	r3, [r4, #8]
    d94c:	e0800003 	add	r0, r0, r3
    d950:	e5840008 	str	r0, [r4, #8]
    d954:	ebfff06c 	bl	9b0c <operator new[](unsigned int)>
    d958:	e5941004 	ldr	r1, [r4, #4]
    d95c:	e1a05000 	mov	r5, r0
    d960:	e3510000 	cmp	r1, #0
    d964:	05c01000 	strbeq	r1, [r0]
    d968:	0a000004 	beq	d980 <CString::Append(char const*)+0x70>
    d96c:	ebfff3c9 	bl	a898 <strcpy>
    d970:	e5940004 	ldr	r0, [r4, #4]
    d974:	e3500000 	cmp	r0, #0
    d978:	0a000000 	beq	d980 <CString::Append(char const*)+0x70>
    d97c:	ebfff064 	bl	9b14 <operator delete[](void*)>
    d980:	e1a01006 	mov	r1, r6
    d984:	e1a00005 	mov	r0, r5
    d988:	ebfff3e1 	bl	a914 <strcat>
    d98c:	e5845004 	str	r5, [r4, #4]
    d990:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d994 <CString::Compare(char const*) const>:
    d994:	e5900004 	ldr	r0, [r0, #4]
    d998:	eafff3a3 	b	a82c <strcmp>

0000d99c <CString::Find(char) const>:
    d99c:	e5902004 	ldr	r2, [r0, #4]
    d9a0:	e1d230d0 	ldrsb	r3, [r2]
    d9a4:	e3530000 	cmp	r3, #0
    d9a8:	0a000009 	beq	d9d4 <CString::Find(char) const+0x38>
    d9ac:	e1510003 	cmp	r1, r3
    d9b0:	e3a00000 	mov	r0, #0
    d9b4:	1a000002 	bne	d9c4 <CString::Find(char) const+0x28>
    d9b8:	ea000007 	b	d9dc <CString::Find(char) const+0x40>
    d9bc:	e1530001 	cmp	r3, r1
    d9c0:	012fff1e 	bxeq	lr
    d9c4:	e1f230d1 	ldrsb	r3, [r2, #1]!
    d9c8:	e2800001 	add	r0, r0, #1
    d9cc:	e3530000 	cmp	r3, #0
    d9d0:	1afffff9 	bne	d9bc <CString::Find(char) const+0x20>
    d9d4:	e3e00000 	mvn	r0, #0
    d9d8:	e12fff1e 	bx	lr
    d9dc:	e12fff1e 	bx	lr

0000d9e0 <CString::PutChar(char, unsigned int)>:
    d9e0:	e3520000 	cmp	r2, #0
    d9e4:	012fff1e 	bxeq	lr
    d9e8:	e92d4070 	push	{r4, r5, r6, lr}
    d9ec:	e1a04002 	mov	r4, r2
    d9f0:	e1a06001 	mov	r6, r1
    d9f4:	e1a01002 	mov	r1, r2
    d9f8:	e1a05000 	mov	r5, r0
    d9fc:	ebffff76 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    da00:	e2443001 	sub	r3, r4, #1
    da04:	e595200c 	ldr	r2, [r5, #12]
    da08:	e2433001 	sub	r3, r3, #1
    da0c:	e3730001 	cmn	r3, #1
    da10:	e2820001 	add	r0, r2, #1
    da14:	e585000c 	str	r0, [r5, #12]
    da18:	e5c26000 	strb	r6, [r2]
    da1c:	1afffff8 	bne	da04 <CString::PutChar(char, unsigned int)+0x24>
    da20:	e8bd8070 	pop	{r4, r5, r6, pc}

0000da24 <CString::PutString(char const*)>:
    da24:	e92d4070 	push	{r4, r5, r6, lr}
    da28:	e1a04000 	mov	r4, r0
    da2c:	e1a00001 	mov	r0, r1
    da30:	e1a05001 	mov	r5, r1
    da34:	ebfff372 	bl	a804 <strlen>
    da38:	e2506000 	subs	r6, r0, #0
    da3c:	0a000002 	beq	da4c <CString::PutString(char const*)+0x28>
    da40:	e1a01006 	mov	r1, r6
    da44:	e1a00004 	mov	r0, r4
    da48:	ebffff63 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    da4c:	e1a01005 	mov	r1, r5
    da50:	e594000c 	ldr	r0, [r4, #12]
    da54:	ebfff38f 	bl	a898 <strcpy>
    da58:	e594100c 	ldr	r1, [r4, #12]
    da5c:	e0811006 	add	r1, r1, r6
    da60:	e584100c 	str	r1, [r4, #12]
    da64:	e8bd8070 	pop	{r4, r5, r6, pc}

0000da68 <CString::ReserveSpace(unsigned int)>:
    da68:	e3510000 	cmp	r1, #0
    da6c:	012fff1e 	bxeq	lr
    da70:	eaffff59 	b	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>

0000da74 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    da74:	e1510002 	cmp	r1, r2
    da78:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    da7c:	23a0c001 	movcs	ip, #1
    da80:	3a000018 	bcc	dae8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x74>
    da84:	e00c0c92 	mul	ip, r2, ip
    da88:	e734fc11 	udiv	r4, r1, ip
    da8c:	e1540002 	cmp	r4, r2
    da90:	e1a0e004 	mov	lr, r4
    da94:	2afffffa 	bcs	da84 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x10>
    da98:	e3530000 	cmp	r3, #0
    da9c:	e1a05000 	mov	r5, r0
    daa0:	13a07037 	movne	r7, #55	; 0x37
    daa4:	03a07057 	moveq	r7, #87	; 0x57
    daa8:	ea000001 	b	dab4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x40>
    daac:	e734fc11 	udiv	r4, r1, ip
    dab0:	e1a0e004 	mov	lr, r4
    dab4:	e35e0009 	cmp	lr, #9
    dab8:	e087300e 	add	r3, r7, lr
    dabc:	e061149c 	mls	r1, ip, r4, r1
    dac0:	e28ee030 	add	lr, lr, #48	; 0x30
    dac4:	e6af3073 	sxtb	r3, r3
    dac8:	e1a06005 	mov	r6, r5
    dacc:	96af307e 	sxtbls	r3, lr
    dad0:	e4c53001 	strb	r3, [r5], #1
    dad4:	e73cf21c 	udiv	ip, ip, r2
    dad8:	e35c0000 	cmp	ip, #0
    dadc:	1afffff2 	bne	daac <CString::ntoa(char*, unsigned long, unsigned int, int)+0x38>
    dae0:	e5c6c001 	strb	ip, [r6, #1]
    dae4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    dae8:	e1a0e001 	mov	lr, r1
    daec:	e3a0c001 	mov	ip, #1
    daf0:	e1a04001 	mov	r4, r1
    daf4:	eaffffe7 	b	da98 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x24>

0000daf8 <CString::ftoa(char*, double, unsigned int)>:
    daf8:	eeb50bc0 	vcmpe.f64	d0, #0.0
    dafc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    db00:	eddf0b88 	vldr	d16, [pc, #544]	; dd28 <CString::ftoa(char*, double, unsigned int)+0x230>
    db04:	e1a04000 	mov	r4, r0
    db08:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    db0c:	e1a06001 	mov	r6, r1
    db10:	ed2d8b02 	vpush	{d8}
    db14:	e24dd014 	sub	sp, sp, #20
    db18:	eeb08b40 	vmov.f64	d8, d0
    db1c:	4eb18b40 	vnegmi.f64	d8, d0
    db20:	43a0302d 	movmi	r3, #45	; 0x2d
    db24:	42807001 	addmi	r7, r0, #1
    db28:	45c03000 	strbmi	r3, [r0]
    db2c:	51a07000 	movpl	r7, r0
    db30:	eeb48be0 	vcmpe.f64	d8, d16
    db34:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    db38:	ca000066 	bgt	dcd8 <CString::ftoa(char*, double, unsigned int)+0x1e0>
    db3c:	eefc7bc8 	vcvt.u32.f64	s15, d8
    db40:	ee175a90 	vmov	r5, s15
    db44:	e3550009 	cmp	r5, #9
    db48:	83a02001 	movhi	r2, #1
    db4c:	9a000069 	bls	dcf8 <CString::ftoa(char*, double, unsigned int)+0x200>
    db50:	e1a03182 	lsl	r3, r2, #3
    db54:	e0832082 	add	r2, r3, r2, lsl #1
    db58:	e733f215 	udiv	r3, r5, r2
    db5c:	e3530009 	cmp	r3, #9
    db60:	8afffffa 	bhi	db50 <CString::ftoa(char*, double, unsigned int)+0x58>
    db64:	e30ceccd 	movw	lr, #52429	; 0xcccd
    db68:	e34ceccc 	movt	lr, #52428	; 0xcccc
    db6c:	e1a01007 	mov	r1, r7
    db70:	e1a0c005 	mov	ip, r5
    db74:	e739f215 	udiv	r9, r5, r2
    db78:	ea000001 	b	db84 <CString::ftoa(char*, double, unsigned int)+0x8c>
    db7c:	e739f21c 	udiv	r9, ip, r2
    db80:	e1a03009 	mov	r3, r9
    db84:	e3530009 	cmp	r3, #9
    db88:	e2830057 	add	r0, r3, #87	; 0x57
    db8c:	e2833030 	add	r3, r3, #48	; 0x30
    db90:	e1a08001 	mov	r8, r1
    db94:	e6af0070 	sxtb	r0, r0
    db98:	e06cc992 	mls	ip, r2, r9, ip
    db9c:	96af0073 	sxtbls	r0, r3
    dba0:	e4c10001 	strb	r0, [r1], #1
    dba4:	e0832e92 	umull	r2, r3, r2, lr
    dba8:	e1b021a3 	lsrs	r2, r3, #3
    dbac:	1afffff2 	bne	db7c <CString::ftoa(char*, double, unsigned int)+0x84>
    dbb0:	e3560000 	cmp	r6, #0
    dbb4:	e5c82001 	strb	r2, [r8, #1]
    dbb8:	1a000003 	bne	dbcc <CString::ftoa(char*, double, unsigned int)+0xd4>
    dbbc:	e1a00004 	mov	r0, r4
    dbc0:	e28dd014 	add	sp, sp, #20
    dbc4:	ecbd8b02 	vpop	{d8}
    dbc8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    dbcc:	e1a00007 	mov	r0, r7
    dbd0:	ebfff30b 	bl	a804 <strlen>
    dbd4:	e3560009 	cmp	r6, #9
    dbd8:	23a06009 	movcs	r6, #9
    dbdc:	e2803001 	add	r3, r0, #1
    dbe0:	e3560001 	cmp	r6, #1
    dbe4:	e3a0202e 	mov	r2, #46	; 0x2e
    dbe8:	e7c72000 	strb	r2, [r7, r0]
    dbec:	e0877003 	add	r7, r7, r3
    dbf0:	0a000045 	beq	dd0c <CString::ftoa(char*, double, unsigned int)+0x214>
    dbf4:	e3a02002 	mov	r2, #2
    dbf8:	e3a0300a 	mov	r3, #10
    dbfc:	e2822001 	add	r2, r2, #1
    dc00:	e1a01183 	lsl	r1, r3, #3
    dc04:	e1520006 	cmp	r2, r6
    dc08:	e0813083 	add	r3, r1, r3, lsl #1
    dc0c:	9afffffa 	bls	dbfc <CString::ftoa(char*, double, unsigned int)+0x104>
    dc10:	ee073a90 	vmov	s15, r3
    dc14:	eef81b67 	vcvt.f64.u32	d17, s15
    dc18:	ee075a90 	vmov	s15, r5
    dc1c:	eef80b67 	vcvt.f64.u32	d16, s15
    dc20:	ee388b60 	vsub.f64	d8, d8, d16
    dc24:	ee288b21 	vmul.f64	d8, d8, d17
    dc28:	eefc7bc8 	vcvt.u32.f64	s15, d8
    dc2c:	ee170a90 	vmov	r0, s15
    dc30:	e3500009 	cmp	r0, #9
    dc34:	83a02001 	movhi	r2, #1
    dc38:	9a000035 	bls	dd14 <CString::ftoa(char*, double, unsigned int)+0x21c>
    dc3c:	e1a03182 	lsl	r3, r2, #3
    dc40:	e0832082 	add	r2, r3, r2, lsl #1
    dc44:	e73cf210 	udiv	ip, r0, r2
    dc48:	e35c0009 	cmp	ip, #9
    dc4c:	e1a0300c 	mov	r3, ip
    dc50:	8afffff9 	bhi	dc3c <CString::ftoa(char*, double, unsigned int)+0x144>
    dc54:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    dc58:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    dc5c:	e28de004 	add	lr, sp, #4
    dc60:	ea000001 	b	dc6c <CString::ftoa(char*, double, unsigned int)+0x174>
    dc64:	e73cf210 	udiv	ip, r0, r2
    dc68:	e1a0300c 	mov	r3, ip
    dc6c:	e3530009 	cmp	r3, #9
    dc70:	e2831057 	add	r1, r3, #87	; 0x57
    dc74:	e2833030 	add	r3, r3, #48	; 0x30
    dc78:	e1a0800e 	mov	r8, lr
    dc7c:	e6af1071 	sxtb	r1, r1
    dc80:	e0600c92 	mls	r0, r2, ip, r0
    dc84:	96af1073 	sxtbls	r1, r3
    dc88:	e4ce1001 	strb	r1, [lr], #1
    dc8c:	e0832592 	umull	r2, r3, r2, r5
    dc90:	e1b021a3 	lsrs	r2, r3, #3
    dc94:	1afffff2 	bne	dc64 <CString::ftoa(char*, double, unsigned int)+0x16c>
    dc98:	e28d0004 	add	r0, sp, #4
    dc9c:	e5c82001 	strb	r2, [r8, #1]
    dca0:	ebfff2d7 	bl	a804 <strlen>
    dca4:	e0560000 	subs	r0, r6, r0
    dca8:	0a000015 	beq	dd04 <CString::ftoa(char*, double, unsigned int)+0x20c>
    dcac:	e0870000 	add	r0, r7, r0
    dcb0:	e3a03030 	mov	r3, #48	; 0x30
    dcb4:	e4c73001 	strb	r3, [r7], #1
    dcb8:	e1570000 	cmp	r7, r0
    dcbc:	1afffffc 	bne	dcb4 <CString::ftoa(char*, double, unsigned int)+0x1bc>
    dcc0:	e28d1004 	add	r1, sp, #4
    dcc4:	ebfff2f3 	bl	a898 <strcpy>
    dcc8:	e1a00004 	mov	r0, r4
    dccc:	e28dd014 	add	sp, sp, #20
    dcd0:	ecbd8b02 	vpop	{d8}
    dcd4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    dcd8:	e1a00007 	mov	r0, r7
    dcdc:	e303143c 	movw	r1, #13372	; 0x343c
    dce0:	e3401001 	movt	r1, #1
    dce4:	ebfff2eb 	bl	a898 <strcpy>
    dce8:	e1a00004 	mov	r0, r4
    dcec:	e28dd014 	add	sp, sp, #20
    dcf0:	ecbd8b02 	vpop	{d8}
    dcf4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    dcf8:	ee173a90 	vmov	r3, s15
    dcfc:	e3a02001 	mov	r2, #1
    dd00:	eaffff97 	b	db64 <CString::ftoa(char*, double, unsigned int)+0x6c>
    dd04:	e1a00007 	mov	r0, r7
    dd08:	eaffffec 	b	dcc0 <CString::ftoa(char*, double, unsigned int)+0x1c8>
    dd0c:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    dd10:	eaffffc0 	b	dc18 <CString::ftoa(char*, double, unsigned int)+0x120>
    dd14:	ee173a90 	vmov	r3, s15
    dd18:	e3a02001 	mov	r2, #1
    dd1c:	ee17ca90 	vmov	ip, s15
    dd20:	eaffffcb 	b	dc54 <CString::ftoa(char*, double, unsigned int)+0x15c>
    dd24:	e320f000 	nop	{0}
    dd28:	ffe00000 	.word	0xffe00000
    dd2c:	41efffff 	.word	0x41efffff

0000dd30 <CString::FormatV(char const*, std::__va_list)>:
    dd30:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd34:	e1a08000 	mov	r8, r0
    dd38:	e5900004 	ldr	r0, [r0, #4]
    dd3c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    dd40:	e1a05001 	mov	r5, r1
    dd44:	e3500000 	cmp	r0, #0
    dd48:	e58d2004 	str	r2, [sp, #4]
    dd4c:	0a000000 	beq	dd54 <CString::FormatV(char const*, std::__va_list)+0x24>
    dd50:	ebffef6f 	bl	9b14 <operator delete[](void*)>
    dd54:	e3a00040 	mov	r0, #64	; 0x40
    dd58:	e5880008 	str	r0, [r8, #8]
    dd5c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    dd60:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    dd64:	e58d300c 	str	r3, [sp, #12]
    dd68:	ebffef67 	bl	9b0c <operator new[](unsigned int)>
    dd6c:	e5880004 	str	r0, [r8, #4]
    dd70:	e588000c 	str	r0, [r8, #12]
    dd74:	e1d540d0 	ldrsb	r4, [r5]
    dd78:	e3540000 	cmp	r4, #0
    dd7c:	0a00008e 	beq	dfbc <CString::FormatV(char const*, std::__va_list)+0x28c>
    dd80:	e3540025 	cmp	r4, #37	; 0x25
    dd84:	13a01001 	movne	r1, #1
    dd88:	11a00008 	movne	r0, r8
    dd8c:	1a000134 	bne	e264 <CString::FormatV(char const*, std::__va_list)+0x534>
    dd90:	e1d540d1 	ldrsb	r4, [r5, #1]
    dd94:	e3540025 	cmp	r4, #37	; 0x25
    dd98:	0a00014b 	beq	e2cc <CString::FormatV(char const*, std::__va_list)+0x59c>
    dd9c:	e354002d 	cmp	r4, #45	; 0x2d
    dda0:	11a02004 	movne	r2, r4
    dda4:	12855001 	addne	r5, r5, #1
    dda8:	01d520d2 	ldrsbeq	r2, [r5, #2]
    ddac:	02855002 	addeq	r5, r5, #2
    ddb0:	13a07000 	movne	r7, #0
    ddb4:	03a07001 	moveq	r7, #1
    ddb8:	e3520030 	cmp	r2, #48	; 0x30
    ddbc:	e3a04000 	mov	r4, #0
    ddc0:	03a03001 	moveq	r3, #1
    ddc4:	13a03000 	movne	r3, #0
    ddc8:	01d520d1 	ldrsbeq	r2, [r5, #1]
    ddcc:	00855003 	addeq	r5, r5, r3
    ddd0:	058d3008 	streq	r3, [sp, #8]
    ddd4:	158d3008 	strne	r3, [sp, #8]
    ddd8:	e2423030 	sub	r3, r2, #48	; 0x30
    dddc:	e6ef3073 	uxtb	r3, r3
    dde0:	e3530009 	cmp	r3, #9
    dde4:	8a000008 	bhi	de0c <CString::FormatV(char const*, std::__va_list)+0xdc>
    dde8:	e1a03184 	lsl	r3, r4, #3
    ddec:	e0834084 	add	r4, r3, r4, lsl #1
    ddf0:	e0844002 	add	r4, r4, r2
    ddf4:	e1f520d1 	ldrsb	r2, [r5, #1]!
    ddf8:	e2444030 	sub	r4, r4, #48	; 0x30
    ddfc:	e2423030 	sub	r3, r2, #48	; 0x30
    de00:	e6ef3073 	uxtb	r3, r3
    de04:	e3530009 	cmp	r3, #9
    de08:	9afffff6 	bls	dde8 <CString::FormatV(char const*, std::__va_list)+0xb8>
    de0c:	e352002e 	cmp	r2, #46	; 0x2e
    de10:	0a000119 	beq	e27c <CString::FormatV(char const*, std::__va_list)+0x54c>
    de14:	e1d500d0 	ldrsb	r0, [r5]
    de18:	e3a01006 	mov	r1, #6
    de1c:	e350006c 	cmp	r0, #108	; 0x6c
    de20:	03a02001 	moveq	r2, #1
    de24:	01d500d1 	ldrsbeq	r0, [r5, #1]
    de28:	00855002 	addeq	r5, r5, r2
    de2c:	e2403058 	sub	r3, r0, #88	; 0x58
    de30:	e3530020 	cmp	r3, #32
    de34:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    de38:	ea0000fe 	b	e238 <CString::FormatV(char const*, std::__va_list)+0x508>
    de3c:	0000e230 	.word	0x0000e230
    de40:	0000e238 	.word	0x0000e238
    de44:	0000e238 	.word	0x0000e238
    de48:	0000e238 	.word	0x0000e238
    de4c:	0000e238 	.word	0x0000e238
    de50:	0000e238 	.word	0x0000e238
    de54:	0000e238 	.word	0x0000e238
    de58:	0000e238 	.word	0x0000e238
    de5c:	0000e238 	.word	0x0000e238
    de60:	0000e238 	.word	0x0000e238
    de64:	0000e238 	.word	0x0000e238
    de68:	0000e1c0 	.word	0x0000e1c0
    de6c:	0000e0bc 	.word	0x0000e0bc
    de70:	0000e238 	.word	0x0000e238
    de74:	0000e044 	.word	0x0000e044
    de78:	0000e238 	.word	0x0000e238
    de7c:	0000e238 	.word	0x0000e238
    de80:	0000e238 	.word	0x0000e238
    de84:	0000e238 	.word	0x0000e238
    de88:	0000e238 	.word	0x0000e238
    de8c:	0000e238 	.word	0x0000e238
    de90:	0000e238 	.word	0x0000e238
    de94:	0000e238 	.word	0x0000e238
    de98:	0000e03c 	.word	0x0000e03c
    de9c:	0000e238 	.word	0x0000e238
    dea0:	0000e238 	.word	0x0000e238
    dea4:	0000e238 	.word	0x0000e238
    dea8:	0000dfcc 	.word	0x0000dfcc
    deac:	0000e238 	.word	0x0000e238
    deb0:	0000dec0 	.word	0x0000dec0
    deb4:	0000e238 	.word	0x0000e238
    deb8:	0000e238 	.word	0x0000e238
    debc:	0000e230 	.word	0x0000e230
    dec0:	e3a0900a 	mov	r9, #10
    dec4:	e59d3004 	ldr	r3, [sp, #4]
    dec8:	e2833004 	add	r3, r3, #4
    decc:	e513c004 	ldr	ip, [r3, #-4]
    ded0:	e58d3004 	str	r3, [sp, #4]
    ded4:	e15c0009 	cmp	ip, r9
    ded8:	23a03001 	movcs	r3, #1
    dedc:	3a000179 	bcc	e4c8 <CString::FormatV(char const*, std::__va_list)+0x798>
    dee0:	e0030399 	mul	r3, r9, r3
    dee4:	e731f31c 	udiv	r1, ip, r3
    dee8:	e1590001 	cmp	r9, r1
    deec:	e1a02001 	mov	r2, r1
    def0:	9afffffa 	bls	dee0 <CString::FormatV(char const*, std::__va_list)+0x1b0>
    def4:	e3500058 	cmp	r0, #88	; 0x58
    def8:	e28d6010 	add	r6, sp, #16
    defc:	13a0b057 	movne	fp, #87	; 0x57
    df00:	03a0b037 	moveq	fp, #55	; 0x37
    df04:	e1a0e006 	mov	lr, r6
    df08:	ea000001 	b	df14 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    df0c:	e731f31c 	udiv	r1, ip, r3
    df10:	e1a02001 	mov	r2, r1
    df14:	e3520009 	cmp	r2, #9
    df18:	e08b0002 	add	r0, fp, r2
    df1c:	e06cc193 	mls	ip, r3, r1, ip
    df20:	e2822030 	add	r2, r2, #48	; 0x30
    df24:	e6af0070 	sxtb	r0, r0
    df28:	e1a0a00e 	mov	sl, lr
    df2c:	96af0072 	sxtbls	r0, r2
    df30:	e4ce0001 	strb	r0, [lr], #1
    df34:	e733f913 	udiv	r3, r3, r9
    df38:	e3530000 	cmp	r3, #0
    df3c:	1afffff2 	bne	df0c <CString::FormatV(char const*, std::__va_list)+0x1dc>
    df40:	e1a00006 	mov	r0, r6
    df44:	e5ca3001 	strb	r3, [sl, #1]
    df48:	ebfff22d 	bl	a804 <strlen>
    df4c:	e3570000 	cmp	r7, #0
    df50:	e1a09000 	mov	r9, r0
    df54:	1a0000ff 	bne	e358 <CString::FormatV(char const*, std::__va_list)+0x628>
    df58:	e1500004 	cmp	r0, r4
    df5c:	2a00000f 	bcs	dfa0 <CString::FormatV(char const*, std::__va_list)+0x270>
    df60:	e59d3008 	ldr	r3, [sp, #8]
    df64:	e0604004 	rsb	r4, r0, r4
    df68:	e1a01004 	mov	r1, r4
    df6c:	e1a00008 	mov	r0, r8
    df70:	e3530000 	cmp	r3, #0
    df74:	03a07020 	moveq	r7, #32
    df78:	13a07030 	movne	r7, #48	; 0x30
    df7c:	ebfffe16 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    df80:	e2443001 	sub	r3, r4, #1
    df84:	e598200c 	ldr	r2, [r8, #12]
    df88:	e2433001 	sub	r3, r3, #1
    df8c:	e3730001 	cmn	r3, #1
    df90:	e2821001 	add	r1, r2, #1
    df94:	e588100c 	str	r1, [r8, #12]
    df98:	e5c27000 	strb	r7, [r2]
    df9c:	1afffff8 	bne	df84 <CString::FormatV(char const*, std::__va_list)+0x254>
    dfa0:	e1a01006 	mov	r1, r6
    dfa4:	e1a00008 	mov	r0, r8
    dfa8:	ebfffe9d 	bl	da24 <CString::PutString(char const*)>
    dfac:	e2855001 	add	r5, r5, #1
    dfb0:	e1d540d0 	ldrsb	r4, [r5]
    dfb4:	e3540000 	cmp	r4, #0
    dfb8:	1affff70 	bne	dd80 <CString::FormatV(char const*, std::__va_list)+0x50>
    dfbc:	e598300c 	ldr	r3, [r8, #12]
    dfc0:	e5c34000 	strb	r4, [r3]
    dfc4:	e28dd02c 	add	sp, sp, #44	; 0x2c
    dfc8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfcc:	e59d3004 	ldr	r3, [sp, #4]
    dfd0:	e2836004 	add	r6, r3, #4
    dfd4:	e593a000 	ldr	sl, [r3]
    dfd8:	e1a0000a 	mov	r0, sl
    dfdc:	ebfff208 	bl	a804 <strlen>
    dfe0:	e3570000 	cmp	r7, #0
    dfe4:	e1a09000 	mov	r9, r0
    dfe8:	1a000104 	bne	e400 <CString::FormatV(char const*, std::__va_list)+0x6d0>
    dfec:	e1500004 	cmp	r0, r4
    dff0:	2a00000c 	bcs	e028 <CString::FormatV(char const*, std::__va_list)+0x2f8>
    dff4:	e0604004 	rsb	r4, r0, r4
    dff8:	e1a00008 	mov	r0, r8
    dffc:	e1a01004 	mov	r1, r4
    e000:	ebfffdf5 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e004:	e2443001 	sub	r3, r4, #1
    e008:	e3a00020 	mov	r0, #32
    e00c:	e598200c 	ldr	r2, [r8, #12]
    e010:	e2433001 	sub	r3, r3, #1
    e014:	e3730001 	cmn	r3, #1
    e018:	e2821001 	add	r1, r2, #1
    e01c:	e588100c 	str	r1, [r8, #12]
    e020:	e5c20000 	strb	r0, [r2]
    e024:	1afffff8 	bne	e00c <CString::FormatV(char const*, std::__va_list)+0x2dc>
    e028:	e1a0100a 	mov	r1, sl
    e02c:	e1a00008 	mov	r0, r8
    e030:	e58d6004 	str	r6, [sp, #4]
    e034:	ebfffe7a 	bl	da24 <CString::PutString(char const*)>
    e038:	eaffffdb 	b	dfac <CString::FormatV(char const*, std::__va_list)+0x27c>
    e03c:	e3a09008 	mov	r9, #8
    e040:	eaffff9f 	b	dec4 <CString::FormatV(char const*, std::__va_list)+0x194>
    e044:	e59d3004 	ldr	r3, [sp, #4]
    e048:	e28d6010 	add	r6, sp, #16
    e04c:	e1a00006 	mov	r0, r6
    e050:	e2833007 	add	r3, r3, #7
    e054:	e3c33007 	bic	r3, r3, #7
    e058:	e2832008 	add	r2, r3, #8
    e05c:	e58d2004 	str	r2, [sp, #4]
    e060:	ed930b00 	vldr	d0, [r3]
    e064:	ebfffea3 	bl	daf8 <CString::ftoa(char*, double, unsigned int)>
    e068:	e1a00006 	mov	r0, r6
    e06c:	ebfff1e4 	bl	a804 <strlen>
    e070:	e3570000 	cmp	r7, #0
    e074:	e1a09000 	mov	r9, r0
    e078:	1a0000f3 	bne	e44c <CString::FormatV(char const*, std::__va_list)+0x71c>
    e07c:	e1500004 	cmp	r0, r4
    e080:	2affffc6 	bcs	dfa0 <CString::FormatV(char const*, std::__va_list)+0x270>
    e084:	e0604004 	rsb	r4, r0, r4
    e088:	e1a00008 	mov	r0, r8
    e08c:	e1a01004 	mov	r1, r4
    e090:	ebfffdd1 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e094:	e2443001 	sub	r3, r4, #1
    e098:	e3a00020 	mov	r0, #32
    e09c:	e598200c 	ldr	r2, [r8, #12]
    e0a0:	e2433001 	sub	r3, r3, #1
    e0a4:	e3730001 	cmn	r3, #1
    e0a8:	e2821001 	add	r1, r2, #1
    e0ac:	e588100c 	str	r1, [r8, #12]
    e0b0:	e5c20000 	strb	r0, [r2]
    e0b4:	1afffff8 	bne	e09c <CString::FormatV(char const*, std::__va_list)+0x36c>
    e0b8:	eaffffb8 	b	dfa0 <CString::FormatV(char const*, std::__va_list)+0x270>
    e0bc:	e59d3004 	ldr	r3, [sp, #4]
    e0c0:	e2833004 	add	r3, r3, #4
    e0c4:	e513b004 	ldr	fp, [r3, #-4]
    e0c8:	e58d3004 	str	r3, [sp, #4]
    e0cc:	e35b0000 	cmp	fp, #0
    e0d0:	b26bb000 	rsblt	fp, fp, #0
    e0d4:	b3a0a001 	movlt	sl, #1
    e0d8:	a3a0a000 	movge	sl, #0
    e0dc:	e35b0009 	cmp	fp, #9
    e0e0:	e1a0900a 	mov	r9, sl
    e0e4:	e1a0e00b 	mov	lr, fp
    e0e8:	c3a02001 	movgt	r2, #1
    e0ec:	da0000f2 	ble	e4bc <CString::FormatV(char const*, std::__va_list)+0x78c>
    e0f0:	e1a03182 	lsl	r3, r2, #3
    e0f4:	e0832082 	add	r2, r3, r2, lsl #1
    e0f8:	e733f21b 	udiv	r3, fp, r2
    e0fc:	e3530009 	cmp	r3, #9
    e100:	8afffffa 	bhi	e0f0 <CString::FormatV(char const*, std::__va_list)+0x3c0>
    e104:	e28d6010 	add	r6, sp, #16
    e108:	e58d7008 	str	r7, [sp, #8]
    e10c:	e73bf21b 	udiv	fp, fp, r2
    e110:	e1a00006 	mov	r0, r6
    e114:	e59d700c 	ldr	r7, [sp, #12]
    e118:	ea000001 	b	e124 <CString::FormatV(char const*, std::__va_list)+0x3f4>
    e11c:	e73bf21e 	udiv	fp, lr, r2
    e120:	e1a0300b 	mov	r3, fp
    e124:	e3530009 	cmp	r3, #9
    e128:	e2831057 	add	r1, r3, #87	; 0x57
    e12c:	e2833030 	add	r3, r3, #48	; 0x30
    e130:	e1a0c000 	mov	ip, r0
    e134:	e6af1071 	sxtb	r1, r1
    e138:	e06eeb92 	mls	lr, r2, fp, lr
    e13c:	96af1073 	sxtbls	r1, r3
    e140:	e4c01001 	strb	r1, [r0], #1
    e144:	e0832792 	umull	r2, r3, r2, r7
    e148:	e1b021a3 	lsrs	r2, r3, #3
    e14c:	1afffff2 	bne	e11c <CString::FormatV(char const*, std::__va_list)+0x3ec>
    e150:	e59d7008 	ldr	r7, [sp, #8]
    e154:	e1a00006 	mov	r0, r6
    e158:	e5cc2001 	strb	r2, [ip, #1]
    e15c:	ebfff1a8 	bl	a804 <strlen>
    e160:	e3570000 	cmp	r7, #0
    e164:	e080a00a 	add	sl, r0, sl
    e168:	0a000060 	beq	e2f0 <CString::FormatV(char const*, std::__va_list)+0x5c0>
    e16c:	e3590000 	cmp	r9, #0
    e170:	1a0000c8 	bne	e498 <CString::FormatV(char const*, std::__va_list)+0x768>
    e174:	e1a01006 	mov	r1, r6
    e178:	e1a00008 	mov	r0, r8
    e17c:	ebfffe28 	bl	da24 <CString::PutString(char const*)>
    e180:	e15a0004 	cmp	sl, r4
    e184:	2affff88 	bcs	dfac <CString::FormatV(char const*, std::__va_list)+0x27c>
    e188:	e06aa004 	rsb	sl, sl, r4
    e18c:	e1a00008 	mov	r0, r8
    e190:	e1a0100a 	mov	r1, sl
    e194:	ebfffd90 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e198:	e24a3001 	sub	r3, sl, #1
    e19c:	e3a00020 	mov	r0, #32
    e1a0:	e598200c 	ldr	r2, [r8, #12]
    e1a4:	e2433001 	sub	r3, r3, #1
    e1a8:	e3730001 	cmn	r3, #1
    e1ac:	e2821001 	add	r1, r2, #1
    e1b0:	e588100c 	str	r1, [r8, #12]
    e1b4:	e5c20000 	strb	r0, [r2]
    e1b8:	1afffff8 	bne	e1a0 <CString::FormatV(char const*, std::__va_list)+0x470>
    e1bc:	eaffff7a 	b	dfac <CString::FormatV(char const*, std::__va_list)+0x27c>
    e1c0:	e59d3004 	ldr	r3, [sp, #4]
    e1c4:	e3570000 	cmp	r7, #0
    e1c8:	e2836004 	add	r6, r3, #4
    e1cc:	e1d370d0 	ldrsb	r7, [r3]
    e1d0:	1a000073 	bne	e3a4 <CString::FormatV(char const*, std::__va_list)+0x674>
    e1d4:	e3540001 	cmp	r4, #1
    e1d8:	9a00000b 	bls	e20c <CString::FormatV(char const*, std::__va_list)+0x4dc>
    e1dc:	e2441001 	sub	r1, r4, #1
    e1e0:	e1a00008 	mov	r0, r8
    e1e4:	ebfffd7c 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e1e8:	e2444002 	sub	r4, r4, #2
    e1ec:	e3a01020 	mov	r1, #32
    e1f0:	e598300c 	ldr	r3, [r8, #12]
    e1f4:	e2444001 	sub	r4, r4, #1
    e1f8:	e3740001 	cmn	r4, #1
    e1fc:	e2832001 	add	r2, r3, #1
    e200:	e588200c 	str	r2, [r8, #12]
    e204:	e5c31000 	strb	r1, [r3]
    e208:	1afffff8 	bne	e1f0 <CString::FormatV(char const*, std::__va_list)+0x4c0>
    e20c:	e3a01001 	mov	r1, #1
    e210:	e1a00008 	mov	r0, r8
    e214:	ebfffd70 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e218:	e598300c 	ldr	r3, [r8, #12]
    e21c:	e58d6004 	str	r6, [sp, #4]
    e220:	e2832001 	add	r2, r3, #1
    e224:	e588200c 	str	r2, [r8, #12]
    e228:	e5c37000 	strb	r7, [r3]
    e22c:	eaffff5e 	b	dfac <CString::FormatV(char const*, std::__va_list)+0x27c>
    e230:	e3a09010 	mov	r9, #16
    e234:	eaffff22 	b	dec4 <CString::FormatV(char const*, std::__va_list)+0x194>
    e238:	e3a01001 	mov	r1, #1
    e23c:	e1a00008 	mov	r0, r8
    e240:	ebfffd65 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e244:	e598300c 	ldr	r3, [r8, #12]
    e248:	e3a01001 	mov	r1, #1
    e24c:	e3a02025 	mov	r2, #37	; 0x25
    e250:	e0830001 	add	r0, r3, r1
    e254:	e588000c 	str	r0, [r8, #12]
    e258:	e5c32000 	strb	r2, [r3]
    e25c:	e1a00008 	mov	r0, r8
    e260:	e1d540d0 	ldrsb	r4, [r5]
    e264:	ebfffd5c 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e268:	e598300c 	ldr	r3, [r8, #12]
    e26c:	e2832001 	add	r2, r3, #1
    e270:	e588200c 	str	r2, [r8, #12]
    e274:	e5c34000 	strb	r4, [r3]
    e278:	eaffff4b 	b	dfac <CString::FormatV(char const*, std::__va_list)+0x27c>
    e27c:	e1d520d1 	ldrsb	r2, [r5, #1]
    e280:	e2855001 	add	r5, r5, #1
    e284:	e2423030 	sub	r3, r2, #48	; 0x30
    e288:	e6ef3073 	uxtb	r3, r3
    e28c:	e3530009 	cmp	r3, #9
    e290:	8a000090 	bhi	e4d8 <CString::FormatV(char const*, std::__va_list)+0x7a8>
    e294:	e3a01000 	mov	r1, #0
    e298:	e1a03001 	mov	r3, r1
    e29c:	e1a00183 	lsl	r0, r3, #3
    e2a0:	e0803083 	add	r3, r0, r3, lsl #1
    e2a4:	e0833002 	add	r3, r3, r2
    e2a8:	e1f520d1 	ldrsb	r2, [r5, #1]!
    e2ac:	e2433030 	sub	r3, r3, #48	; 0x30
    e2b0:	e2420030 	sub	r0, r2, #48	; 0x30
    e2b4:	e6ef0070 	uxtb	r0, r0
    e2b8:	e3500009 	cmp	r0, #9
    e2bc:	9afffff6 	bls	e29c <CString::FormatV(char const*, std::__va_list)+0x56c>
    e2c0:	e1a01003 	mov	r1, r3
    e2c4:	e1a00002 	mov	r0, r2
    e2c8:	eafffed3 	b	de1c <CString::FormatV(char const*, std::__va_list)+0xec>
    e2cc:	e3a01001 	mov	r1, #1
    e2d0:	e1a00008 	mov	r0, r8
    e2d4:	ebfffd40 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e2d8:	e598300c 	ldr	r3, [r8, #12]
    e2dc:	e2855002 	add	r5, r5, #2
    e2e0:	e2831001 	add	r1, r3, #1
    e2e4:	e588100c 	str	r1, [r8, #12]
    e2e8:	e5c34000 	strb	r4, [r3]
    e2ec:	eafffea0 	b	dd74 <CString::FormatV(char const*, std::__va_list)+0x44>
    e2f0:	e15a0004 	cmp	sl, r4
    e2f4:	2a00000c 	bcs	e32c <CString::FormatV(char const*, std::__va_list)+0x5fc>
    e2f8:	e06aa004 	rsb	sl, sl, r4
    e2fc:	e1a00008 	mov	r0, r8
    e300:	e1a0100a 	mov	r1, sl
    e304:	ebfffd34 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e308:	e24a3001 	sub	r3, sl, #1
    e30c:	e3a00020 	mov	r0, #32
    e310:	e598200c 	ldr	r2, [r8, #12]
    e314:	e2433001 	sub	r3, r3, #1
    e318:	e3730001 	cmn	r3, #1
    e31c:	e2821001 	add	r1, r2, #1
    e320:	e588100c 	str	r1, [r8, #12]
    e324:	e5c20000 	strb	r0, [r2]
    e328:	1afffff8 	bne	e310 <CString::FormatV(char const*, std::__va_list)+0x5e0>
    e32c:	e3590000 	cmp	r9, #0
    e330:	0affff1a 	beq	dfa0 <CString::FormatV(char const*, std::__va_list)+0x270>
    e334:	e3a01001 	mov	r1, #1
    e338:	e1a00008 	mov	r0, r8
    e33c:	ebfffd26 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e340:	e598300c 	ldr	r3, [r8, #12]
    e344:	e3a0202d 	mov	r2, #45	; 0x2d
    e348:	e2831001 	add	r1, r3, #1
    e34c:	e588100c 	str	r1, [r8, #12]
    e350:	e5c32000 	strb	r2, [r3]
    e354:	eaffff11 	b	dfa0 <CString::FormatV(char const*, std::__va_list)+0x270>
    e358:	e1a01006 	mov	r1, r6
    e35c:	e1a00008 	mov	r0, r8
    e360:	ebfffdaf 	bl	da24 <CString::PutString(char const*)>
    e364:	e1590004 	cmp	r9, r4
    e368:	2affff0f 	bcs	dfac <CString::FormatV(char const*, std::__va_list)+0x27c>
    e36c:	e0694004 	rsb	r4, r9, r4
    e370:	e1a00008 	mov	r0, r8
    e374:	e1a01004 	mov	r1, r4
    e378:	ebfffd17 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e37c:	e2443001 	sub	r3, r4, #1
    e380:	e3a00020 	mov	r0, #32
    e384:	e598200c 	ldr	r2, [r8, #12]
    e388:	e2433001 	sub	r3, r3, #1
    e38c:	e3730001 	cmn	r3, #1
    e390:	e2821001 	add	r1, r2, #1
    e394:	e588100c 	str	r1, [r8, #12]
    e398:	e5c20000 	strb	r0, [r2]
    e39c:	1afffff8 	bne	e384 <CString::FormatV(char const*, std::__va_list)+0x654>
    e3a0:	eaffff01 	b	dfac <CString::FormatV(char const*, std::__va_list)+0x27c>
    e3a4:	e3a01001 	mov	r1, #1
    e3a8:	e1a00008 	mov	r0, r8
    e3ac:	ebfffd0a 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e3b0:	e598300c 	ldr	r3, [r8, #12]
    e3b4:	e3540001 	cmp	r4, #1
    e3b8:	e2832001 	add	r2, r3, #1
    e3bc:	e588200c 	str	r2, [r8, #12]
    e3c0:	e5c37000 	strb	r7, [r3]
    e3c4:	9a00000b 	bls	e3f8 <CString::FormatV(char const*, std::__va_list)+0x6c8>
    e3c8:	e2441001 	sub	r1, r4, #1
    e3cc:	e1a00008 	mov	r0, r8
    e3d0:	ebfffd01 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e3d4:	e2444002 	sub	r4, r4, #2
    e3d8:	e3a01020 	mov	r1, #32
    e3dc:	e598300c 	ldr	r3, [r8, #12]
    e3e0:	e2444001 	sub	r4, r4, #1
    e3e4:	e3740001 	cmn	r4, #1
    e3e8:	e2832001 	add	r2, r3, #1
    e3ec:	e588200c 	str	r2, [r8, #12]
    e3f0:	e5c31000 	strb	r1, [r3]
    e3f4:	1afffff8 	bne	e3dc <CString::FormatV(char const*, std::__va_list)+0x6ac>
    e3f8:	e58d6004 	str	r6, [sp, #4]
    e3fc:	eafffeea 	b	dfac <CString::FormatV(char const*, std::__va_list)+0x27c>
    e400:	e1a0100a 	mov	r1, sl
    e404:	e1a00008 	mov	r0, r8
    e408:	ebfffd85 	bl	da24 <CString::PutString(char const*)>
    e40c:	e1590004 	cmp	r9, r4
    e410:	2afffff8 	bcs	e3f8 <CString::FormatV(char const*, std::__va_list)+0x6c8>
    e414:	e0694004 	rsb	r4, r9, r4
    e418:	e1a00008 	mov	r0, r8
    e41c:	e1a01004 	mov	r1, r4
    e420:	ebfffced 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e424:	e2443001 	sub	r3, r4, #1
    e428:	e3a00020 	mov	r0, #32
    e42c:	e598200c 	ldr	r2, [r8, #12]
    e430:	e2433001 	sub	r3, r3, #1
    e434:	e3730001 	cmn	r3, #1
    e438:	e2821001 	add	r1, r2, #1
    e43c:	e588100c 	str	r1, [r8, #12]
    e440:	e5c20000 	strb	r0, [r2]
    e444:	1afffff8 	bne	e42c <CString::FormatV(char const*, std::__va_list)+0x6fc>
    e448:	eaffffea 	b	e3f8 <CString::FormatV(char const*, std::__va_list)+0x6c8>
    e44c:	e1a01006 	mov	r1, r6
    e450:	e1a00008 	mov	r0, r8
    e454:	ebfffd72 	bl	da24 <CString::PutString(char const*)>
    e458:	e1590004 	cmp	r9, r4
    e45c:	2afffed2 	bcs	dfac <CString::FormatV(char const*, std::__va_list)+0x27c>
    e460:	e0694004 	rsb	r4, r9, r4
    e464:	e1a00008 	mov	r0, r8
    e468:	e1a01004 	mov	r1, r4
    e46c:	ebfffcda 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e470:	e2443001 	sub	r3, r4, #1
    e474:	e3a00020 	mov	r0, #32
    e478:	e598200c 	ldr	r2, [r8, #12]
    e47c:	e2433001 	sub	r3, r3, #1
    e480:	e3730001 	cmn	r3, #1
    e484:	e2821001 	add	r1, r2, #1
    e488:	e588100c 	str	r1, [r8, #12]
    e48c:	e5c20000 	strb	r0, [r2]
    e490:	1afffff8 	bne	e478 <CString::FormatV(char const*, std::__va_list)+0x748>
    e494:	eafffec4 	b	dfac <CString::FormatV(char const*, std::__va_list)+0x27c>
    e498:	e3a01001 	mov	r1, #1
    e49c:	e1a00008 	mov	r0, r8
    e4a0:	ebfffccd 	bl	d7dc <CString::ReserveSpace(unsigned int) [clone .part.0] [clone .constprop.1]>
    e4a4:	e598300c 	ldr	r3, [r8, #12]
    e4a8:	e3a0202d 	mov	r2, #45	; 0x2d
    e4ac:	e2831001 	add	r1, r3, #1
    e4b0:	e588100c 	str	r1, [r8, #12]
    e4b4:	e5c32000 	strb	r2, [r3]
    e4b8:	eaffff2d 	b	e174 <CString::FormatV(char const*, std::__va_list)+0x444>
    e4bc:	e1a0300b 	mov	r3, fp
    e4c0:	e3a02001 	mov	r2, #1
    e4c4:	eaffff0e 	b	e104 <CString::FormatV(char const*, std::__va_list)+0x3d4>
    e4c8:	e1a0200c 	mov	r2, ip
    e4cc:	e3a03001 	mov	r3, #1
    e4d0:	e1a0100c 	mov	r1, ip
    e4d4:	eafffe86 	b	def4 <CString::FormatV(char const*, std::__va_list)+0x1c4>
    e4d8:	e1a00002 	mov	r0, r2
    e4dc:	e3a01000 	mov	r1, #0
    e4e0:	eafffe4d 	b	de1c <CString::FormatV(char const*, std::__va_list)+0xec>

0000e4e4 <CString::Format(char const*, ...)>:
    e4e4:	e92d000e 	push	{r1, r2, r3}
    e4e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e4ec:	e24dd008 	sub	sp, sp, #8
    e4f0:	e28d3010 	add	r3, sp, #16
    e4f4:	e1a02003 	mov	r2, r3
    e4f8:	e59d100c 	ldr	r1, [sp, #12]
    e4fc:	e58d3004 	str	r3, [sp, #4]
    e500:	ebfffe0a 	bl	dd30 <CString::FormatV(char const*, std::__va_list)>
    e504:	e28dd008 	add	sp, sp, #8
    e508:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    e50c:	e28dd00c 	add	sp, sp, #12
    e510:	e12fff1e 	bx	lr
    e514:	00000000 	andeq	r0, r0, r0

0000e518 <DelayLoop>:
    e518:	e2500001 	subs	r0, r0, #1
    e51c:	8afffffd 	bhi	e518 <DelayLoop>
    e520:	e1a0f00e 	mov	pc, lr

0000e524 <CExceptionHandler::CExceptionHandler()>:
    e524:	e92d4070 	push	{r4, r5, r6, lr}
    e528:	e30450b8 	movw	r5, #16568	; 0x40b8
    e52c:	e3405001 	movt	r5, #1
    e530:	e1a04000 	mov	r4, r0
    e534:	e5953000 	ldr	r3, [r5]
    e538:	e3530000 	cmp	r3, #0
    e53c:	0a000005 	beq	e558 <CExceptionHandler::CExceptionHandler()+0x34>
    e540:	e3031448 	movw	r1, #13384	; 0x3448
    e544:	e3401001 	movt	r1, #1
    e548:	e30201e8 	movw	r0, #8680	; 0x21e8
    e54c:	e3400001 	movt	r0, #1
    e550:	e3a0202e 	mov	r2, #46	; 0x2e
    e554:	ebfff7ed 	bl	c510 <assertion_failed>
    e558:	e30e17e4 	movw	r1, #59364	; 0xe7e4
    e55c:	e3401000 	movt	r1, #0
    e560:	e30e281c 	movw	r2, #59420	; 0xe81c
    e564:	e3402000 	movt	r2, #0
    e568:	e30e3858 	movw	r3, #59480	; 0xe858
    e56c:	e3403000 	movt	r3, #0
    e570:	e3a00000 	mov	r0, #0
    e574:	e1a01141 	asr	r1, r1, #2
    e578:	e1a02142 	asr	r2, r2, #2
    e57c:	e1a03143 	asr	r3, r3, #2
    e580:	e2411002 	sub	r1, r1, #2
    e584:	e2422002 	sub	r2, r2, #2
    e588:	e2433002 	sub	r3, r3, #2
    e58c:	e5854000 	str	r4, [r5]
    e590:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    e594:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    e598:	e5801004 	str	r1, [r0, #4]
    e59c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e5a0:	e580200c 	str	r2, [r0, #12]
    e5a4:	e5803010 	str	r3, [r0, #16]
    e5a8:	eb000958 	bl	10b10 <SyncDataAndInstructionCache>
    e5ac:	e1a00004 	mov	r0, r4
    e5b0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e5b4 <CExceptionHandler::~CExceptionHandler()>:
    e5b4:	e30430b8 	movw	r3, #16568	; 0x40b8
    e5b8:	e3403001 	movt	r3, #1
    e5bc:	e3a02000 	mov	r2, #0
    e5c0:	e5832000 	str	r2, [r3]
    e5c4:	e12fff1e 	bx	lr

0000e5c8 <CExceptionHandler::Get()>:
    e5c8:	e92d4010 	push	{r4, lr}
    e5cc:	e30440b8 	movw	r4, #16568	; 0x40b8
    e5d0:	e3404001 	movt	r4, #1
    e5d4:	e5940000 	ldr	r0, [r4]
    e5d8:	e3500000 	cmp	r0, #0
    e5dc:	18bd8010 	popne	{r4, pc}
    e5e0:	e3a0207e 	mov	r2, #126	; 0x7e
    e5e4:	e3031448 	movw	r1, #13384	; 0x3448
    e5e8:	e3401001 	movt	r1, #1
    e5ec:	e30202f4 	movw	r0, #8948	; 0x22f4
    e5f0:	e3400001 	movt	r0, #1
    e5f4:	ebfff7c5 	bl	c510 <assertion_failed>
    e5f8:	e5940000 	ldr	r0, [r4]
    e5fc:	e8bd8010 	pop	{r4, pc}

0000e600 <CExceptionHandler::Throw(unsigned int)>:
    e600:	e92d4030 	push	{r4, r5, lr}
    e604:	e1a05001 	mov	r5, r1
    e608:	e24dd01c 	sub	sp, sp, #28
    e60c:	e28d0008 	add	r0, sp, #8
    e610:	ebfffc8b 	bl	d844 <CString::CString()>
    e614:	ee102fb0 	mrc	15, 0, r2, cr0, cr0, {5}
    e618:	e3031460 	movw	r1, #13408	; 0x3460
    e61c:	e3401001 	movt	r1, #1
    e620:	e2022003 	and	r2, r2, #3
    e624:	e28d0008 	add	r0, sp, #8
    e628:	ebffffad 	bl	e4e4 <CString::Format(char const*, ...)>
    e62c:	ebfff92d 	bl	cae8 <CLogger::Get()>
    e630:	e1a04000 	mov	r4, r0
    e634:	e28d0008 	add	r0, sp, #8
    e638:	ebfffc98 	bl	d8a0 <CString::operator char const*() const>
    e63c:	e3032fb8 	movw	r2, #16312	; 0x3fb8
    e640:	e3402001 	movt	r2, #1
    e644:	e1a01000 	mov	r1, r0
    e648:	e3033468 	movw	r3, #13416	; 0x3468
    e64c:	e3403001 	movt	r3, #1
    e650:	e7922105 	ldr	r2, [r2, r5, lsl #2]
    e654:	e1a00004 	mov	r0, r4
    e658:	e58d2000 	str	r2, [sp]
    e65c:	e3a02000 	mov	r2, #0
    e660:	ebfff9ee 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e664:	e28d0008 	add	r0, sp, #8
    e668:	ebfffc42 	bl	d778 <CString::~CString()>
    e66c:	e28dd01c 	add	sp, sp, #28
    e670:	e8bd8030 	pop	{r4, r5, pc}

0000e674 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    e674:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e678:	e1a05001 	mov	r5, r1
    e67c:	e1a04002 	mov	r4, r2
    e680:	e24dd030 	sub	sp, sp, #48	; 0x30
    e684:	e28d0020 	add	r0, sp, #32
    e688:	ebfffc6d 	bl	d844 <CString::CString()>
    e68c:	ee102fb0 	mrc	15, 0, r2, cr0, cr0, {5}
    e690:	e3031460 	movw	r1, #13408	; 0x3460
    e694:	e3401001 	movt	r1, #1
    e698:	e2022003 	and	r2, r2, #3
    e69c:	e28d0020 	add	r0, sp, #32
    e6a0:	ebffff8f 	bl	e4e4 <CString::Format(char const*, ...)>
    e6a4:	e3550002 	cmp	r5, #2
    e6a8:	0a00002d 	beq	e764 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xf0>
    e6ac:	e3550003 	cmp	r5, #3
    e6b0:	0a000028 	beq	e758 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
    e6b4:	e3a07000 	mov	r7, #0
    e6b8:	e1a08007 	mov	r8, r7
    e6bc:	e3540000 	cmp	r4, #0
    e6c0:	0a00002a 	beq	e770 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xfc>
    e6c4:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    e6c8:	e28d0020 	add	r0, sp, #32
    e6cc:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    e6d0:	e203301f 	and	r3, r3, #31
    e6d4:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    e6d8:	e3530012 	cmp	r3, #18
    e6dc:	08940240 	ldmeq	r4, {r6, r9}
    e6e0:	ebfffc6e 	bl	d8a0 <CString::operator char const*() const>
    e6e4:	e1a01000 	mov	r1, r0
    e6e8:	e1a00006 	mov	r0, r6
    e6ec:	ebfff816 	bl	c74c <debug_stacktrace(unsigned int const*, char const*)>
    e6f0:	ebfff8fc 	bl	cae8 <CLogger::Get()>
    e6f4:	e1a0a000 	mov	sl, r0
    e6f8:	e28d0020 	add	r0, sp, #32
    e6fc:	ebfffc67 	bl	d8a0 <CString::operator char const*() const>
    e700:	e3033fb8 	movw	r3, #16312	; 0x3fb8
    e704:	e3403001 	movt	r3, #1
    e708:	e58d9014 	str	r9, [sp, #20]
    e70c:	e1a01000 	mov	r1, r0
    e710:	e3a02000 	mov	r2, #0
    e714:	e1a0000a 	mov	r0, sl
    e718:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    e71c:	e7935105 	ldr	r5, [r3, r5, lsl #2]
    e720:	e3033484 	movw	r3, #13444	; 0x3484
    e724:	e3403001 	movt	r3, #1
    e728:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    e72c:	e58dc004 	str	ip, [sp, #4]
    e730:	e58de018 	str	lr, [sp, #24]
    e734:	e58d6010 	str	r6, [sp, #16]
    e738:	e58d700c 	str	r7, [sp, #12]
    e73c:	e58d8008 	str	r8, [sp, #8]
    e740:	e58d5000 	str	r5, [sp]
    e744:	ebfff9b5 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e748:	e28d0020 	add	r0, sp, #32
    e74c:	ebfffc09 	bl	d778 <CString::~CString()>
    e750:	e28dd030 	add	sp, sp, #48	; 0x30
    e754:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e758:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
    e75c:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
    e760:	eaffffd5 	b	e6bc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x48>
    e764:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
    e768:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
    e76c:	eaffffd2 	b	e6bc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x48>
    e770:	e3031448 	movw	r1, #13384	; 0x3448
    e774:	e3401001 	movt	r1, #1
    e778:	e3030478 	movw	r0, #13432	; 0x3478
    e77c:	e3400001 	movt	r0, #1
    e780:	e3a02067 	mov	r2, #103	; 0x67
    e784:	ebfff761 	bl	c510 <assertion_failed>
    e788:	eaffffcd 	b	e6c4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>

0000e78c <ExceptionHandler>:
    e78c:	e92d4070 	push	{r4, r5, r6, lr}
    e790:	e30440b8 	movw	r4, #16568	; 0x40b8
    e794:	e3404001 	movt	r4, #1
    e798:	e1a05000 	mov	r5, r0
    e79c:	e1a06001 	mov	r6, r1
    e7a0:	e5940000 	ldr	r0, [r4]
    e7a4:	e3500000 	cmp	r0, #0
    e7a8:	0a000003 	beq	e7bc <ExceptionHandler+0x30>
    e7ac:	e1a02006 	mov	r2, r6
    e7b0:	e1a01005 	mov	r1, r5
    e7b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    e7b8:	eaffffad 	b	e674 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
    e7bc:	e3a0207e 	mov	r2, #126	; 0x7e
    e7c0:	e3031448 	movw	r1, #13384	; 0x3448
    e7c4:	e3401001 	movt	r1, #1
    e7c8:	e30202f4 	movw	r0, #8948	; 0x22f4
    e7cc:	e3400001 	movt	r0, #1
    e7d0:	ebfff74e 	bl	c510 <assertion_failed>
    e7d4:	e5940000 	ldr	r0, [r4]
    e7d8:	e1a02006 	mov	r2, r6
    e7dc:	e1a01005 	mov	r1, r5
    e7e0:	e8bd4070 	pop	{r4, r5, r6, lr}
    e7e4:	eaffffa2 	b	e674 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000e7e8 <UndefinedInstructionStub>:
    e7e8:	e24ee004 	sub	lr, lr, #4
    e7ec:	e92d4000 	stmfd	sp!, {lr}
    e7f0:	e14fe000 	mrs	lr, SPSR
    e7f4:	e92d4000 	stmfd	sp!, {lr}
    e7f8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e7fc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e800:	e1a0100d 	mov	r1, sp
    e804:	f1020012 	cps	#18
    e808:	e1a0200d 	mov	r2, sp
    e80c:	e1a0300e 	mov	r3, lr
    e810:	f102001f 	cps	#31
    e814:	e1a0d001 	mov	sp, r1
    e818:	e92d000c 	push	{r2, r3}
    e81c:	e1a0100d 	mov	r1, sp
    e820:	e3a00001 	mov	r0, #1
    e824:	eaffffd8 	b	e78c <ExceptionHandler>

0000e828 <PrefetchAbortStub>:
    e828:	e24ee004 	sub	lr, lr, #4
    e82c:	e92d4000 	stmfd	sp!, {lr}
    e830:	e14fe000 	mrs	lr, SPSR
    e834:	e92d4000 	stmfd	sp!, {lr}
    e838:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e83c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e840:	e1a0100d 	mov	r1, sp
    e844:	f1020012 	cps	#18
    e848:	e1a0200d 	mov	r2, sp
    e84c:	e1a0300e 	mov	r3, lr
    e850:	f102001f 	cps	#31
    e854:	e1a0d001 	mov	sp, r1
    e858:	e92d000c 	push	{r2, r3}
    e85c:	e1a0100d 	mov	r1, sp
    e860:	e3a00002 	mov	r0, #2
    e864:	eaffffc8 	b	e78c <ExceptionHandler>

0000e868 <DataAbortStub>:
    e868:	e24ee008 	sub	lr, lr, #8
    e86c:	e92d4000 	stmfd	sp!, {lr}
    e870:	e14fe000 	mrs	lr, SPSR
    e874:	e92d4000 	stmfd	sp!, {lr}
    e878:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e87c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e880:	e1a0100d 	mov	r1, sp
    e884:	f1020012 	cps	#18
    e888:	e1a0200d 	mov	r2, sp
    e88c:	e1a0300e 	mov	r3, lr
    e890:	f102001f 	cps	#31
    e894:	e1a0d001 	mov	sp, r1
    e898:	e92d000c 	push	{r2, r3}
    e89c:	e1a0100d 	mov	r1, sp
    e8a0:	e3a00003 	mov	r0, #3
    e8a4:	eaffffb8 	b	e78c <ExceptionHandler>

0000e8a8 <IRQStub>:
    e8a8:	e24ee004 	sub	lr, lr, #4
    e8ac:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e8b0:	eb000161 	bl	ee3c <InterruptHandler>
    e8b4:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000e8b8 <FIQStub>:
    e8b8:	e24ee004 	sub	lr, lr, #4
    e8bc:	e92d400f 	push	{r0, r1, r2, r3, lr}
    e8c0:	e59f2024 	ldr	r2, [pc, #36]	; e8ec <FIQStub+0x34>
    e8c4:	e5921000 	ldr	r1, [r2]
    e8c8:	e3510000 	cmp	r1, #0
    e8cc:	0a000002 	beq	e8dc <FIQStub+0x24>
    e8d0:	e5920004 	ldr	r0, [r2, #4]
    e8d4:	e12fff31 	blx	r1
    e8d8:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    e8dc:	e59f100c 	ldr	r1, [pc, #12]	; e8f0 <FIQStub+0x38>
    e8e0:	e3a00000 	mov	r0, #0
    e8e4:	e5810000 	str	r0, [r1]
    e8e8:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    e8ec:	00013fc8 	.word	0x00013fc8
    e8f0:	3f00b20c 	.word	0x3f00b20c

0000e8f4 <CInterruptSystem::CInterruptSystem()>:
    e8f4:	e1a0c000 	mov	ip, r0
    e8f8:	e2800f47 	add	r0, r0, #284	; 0x11c
    e8fc:	e3a01000 	mov	r1, #0
    e900:	e24c3004 	sub	r3, ip, #4
    e904:	e1a02000 	mov	r2, r0
    e908:	e5a31004 	str	r1, [r3, #4]!
    e90c:	e5a21004 	str	r1, [r2, #4]!
    e910:	e1530000 	cmp	r3, r0
    e914:	1afffffb 	bne	e908 <CInterruptSystem::CInterruptSystem()+0x14>
    e918:	e30430bc 	movw	r3, #16572	; 0x40bc
    e91c:	e3403001 	movt	r3, #1
    e920:	e1a0000c 	mov	r0, ip
    e924:	e583c000 	str	ip, [r3]
    e928:	e12fff1e 	bx	lr

0000e92c <CInterruptSystem::~CInterruptSystem()>:
    e92c:	e30430bc 	movw	r3, #16572	; 0x40bc
    e930:	e3403001 	movt	r3, #1
    e934:	e3a02000 	mov	r2, #0
    e938:	e5832000 	str	r2, [r3]
    e93c:	e12fff1e 	bx	lr

0000e940 <CInterruptSystem::Initialize()>:
    e940:	e30e2890 	movw	r2, #59536	; 0xe890
    e944:	e3402000 	movt	r2, #0
    e948:	e30e389c 	movw	r3, #59548	; 0xe89c
    e94c:	e3403000 	movt	r3, #0
    e950:	e92d4010 	push	{r4, lr}
    e954:	e3a04000 	mov	r4, #0
    e958:	e1a02142 	asr	r2, r2, #2
    e95c:	e1a03143 	asr	r3, r3, #2
    e960:	e2422002 	sub	r2, r2, #2
    e964:	e2433002 	sub	r3, r3, #2
    e968:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    e96c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e970:	e5842018 	str	r2, [r4, #24]
    e974:	e584301c 	str	r3, [r4, #28]
    e978:	eb000864 	bl	10b10 <SyncDataAndInstructionCache>
    e97c:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e980:	e3433f00 	movt	r3, #16128	; 0x3f00
    e984:	e3e02000 	mvn	r2, #0
    e988:	e583420c 	str	r4, [r3, #524]	; 0x20c
    e98c:	e583221c 	str	r2, [r3, #540]	; 0x21c
    e990:	e5832220 	str	r2, [r3, #544]	; 0x220
    e994:	e5832224 	str	r2, [r3, #548]	; 0x224
    e998:	f1080080 	cpsie	i
    e99c:	e3a00001 	mov	r0, #1
    e9a0:	e8bd8010 	pop	{r4, pc}

0000e9a4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    e9a4:	e3510047 	cmp	r1, #71	; 0x47
    e9a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e9ac:	e1a04001 	mov	r4, r1
    e9b0:	e1a06002 	mov	r6, r2
    e9b4:	e1a07003 	mov	r7, r3
    e9b8:	8a00001a 	bhi	ea28 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x84>
    e9bc:	e3560000 	cmp	r6, #0
    e9c0:	0a00001f 	beq	ea44 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
    e9c4:	e3035fc8 	movw	r5, #16328	; 0x3fc8
    e9c8:	e3405001 	movt	r5, #1
    e9cc:	e5953000 	ldr	r3, [r5]
    e9d0:	e3530000 	cmp	r3, #0
    e9d4:	0a000005 	beq	e9f0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>
    e9d8:	e303150c 	movw	r1, #13580	; 0x350c
    e9dc:	e3401001 	movt	r1, #1
    e9e0:	e3030530 	movw	r0, #13616	; 0x3530
    e9e4:	e3400001 	movt	r0, #1
    e9e8:	e3a0207a 	mov	r2, #122	; 0x7a
    e9ec:	ebfff6c7 	bl	c510 <assertion_failed>
    e9f0:	e3540047 	cmp	r4, #71	; 0x47
    e9f4:	e88500c0 	stm	r5, {r6, r7}
    e9f8:	9a000005 	bls	ea14 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x70>
    e9fc:	e303150c 	movw	r1, #13580	; 0x350c
    ea00:	e3401001 	movt	r1, #1
    ea04:	e303051c 	movw	r0, #13596	; 0x351c
    ea08:	e3400001 	movt	r0, #1
    ea0c:	e3a020a6 	mov	r2, #166	; 0xa6
    ea10:	ebfff6be 	bl	c510 <assertion_failed>
    ea14:	e3a03a0b 	mov	r3, #45056	; 0xb000
    ea18:	e3433f00 	movt	r3, #16128	; 0x3f00
    ea1c:	e3844080 	orr	r4, r4, #128	; 0x80
    ea20:	e583420c 	str	r4, [r3, #524]	; 0x20c
    ea24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ea28:	e303150c 	movw	r1, #13580	; 0x350c
    ea2c:	e3401001 	movt	r1, #1
    ea30:	e303051c 	movw	r0, #13596	; 0x351c
    ea34:	e3400001 	movt	r0, #1
    ea38:	e3a02078 	mov	r2, #120	; 0x78
    ea3c:	ebfff6b3 	bl	c510 <assertion_failed>
    ea40:	eaffffdd 	b	e9bc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
    ea44:	e303150c 	movw	r1, #13580	; 0x350c
    ea48:	e3401001 	movt	r1, #1
    ea4c:	e3030550 	movw	r0, #13648	; 0x3550
    ea50:	e3400001 	movt	r0, #1
    ea54:	e3a02079 	mov	r2, #121	; 0x79
    ea58:	ebfff6ac 	bl	c510 <assertion_failed>
    ea5c:	eaffffd8 	b	e9c4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>

0000ea60 <CInterruptSystem::DisconnectFIQ()>:
    ea60:	e92d4010 	push	{r4, lr}
    ea64:	e3034fc8 	movw	r4, #16328	; 0x3fc8
    ea68:	e3404001 	movt	r4, #1
    ea6c:	e5943000 	ldr	r3, [r4]
    ea70:	e3530000 	cmp	r3, #0
    ea74:	0a000006 	beq	ea94 <CInterruptSystem::DisconnectFIQ()+0x34>
    ea78:	e3a02a0b 	mov	r2, #45056	; 0xb000
    ea7c:	e3432f00 	movt	r2, #16128	; 0x3f00
    ea80:	e3a03000 	mov	r3, #0
    ea84:	e582320c 	str	r3, [r2, #524]	; 0x20c
    ea88:	e5843000 	str	r3, [r4]
    ea8c:	e5843004 	str	r3, [r4, #4]
    ea90:	e8bd8010 	pop	{r4, pc}
    ea94:	e303150c 	movw	r1, #13580	; 0x350c
    ea98:	e3401001 	movt	r1, #1
    ea9c:	e3030548 	movw	r0, #13640	; 0x3548
    eaa0:	e3400001 	movt	r0, #1
    eaa4:	e3a02084 	mov	r2, #132	; 0x84
    eaa8:	ebfff698 	bl	c510 <assertion_failed>
    eaac:	eafffff1 	b	ea78 <CInterruptSystem::DisconnectFIQ()+0x18>

0000eab0 <CInterruptSystem::EnableIRQ(unsigned int)>:
    eab0:	e3500047 	cmp	r0, #71	; 0x47
    eab4:	e92d4010 	push	{r4, lr}
    eab8:	e1a04000 	mov	r4, r0
    eabc:	8a00000e 	bhi	eafc <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
    eac0:	e350001f 	cmp	r0, #31
    eac4:	930b2210 	movwls	r2, #45584	; 0xb210
    eac8:	93432f00 	movtls	r2, #16128	; 0x3f00
    eacc:	8a000004 	bhi	eae4 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
    ead0:	e204401f 	and	r4, r4, #31
    ead4:	e3a03001 	mov	r3, #1
    ead8:	e1a04413 	lsl	r4, r3, r4
    eadc:	e5824000 	str	r4, [r2]
    eae0:	e8bd8010 	pop	{r4, pc}
    eae4:	e350003f 	cmp	r0, #63	; 0x3f
    eae8:	930b2214 	movwls	r2, #45588	; 0xb214
    eaec:	93432f00 	movtls	r2, #16128	; 0x3f00
    eaf0:	830b2218 	movwhi	r2, #45592	; 0xb218
    eaf4:	83432f00 	movthi	r2, #16128	; 0x3f00
    eaf8:	eafffff4 	b	ead0 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
    eafc:	e3a02090 	mov	r2, #144	; 0x90
    eb00:	e303150c 	movw	r1, #13580	; 0x350c
    eb04:	e3401001 	movt	r1, #1
    eb08:	e3030560 	movw	r0, #13664	; 0x3560
    eb0c:	e3400001 	movt	r0, #1
    eb10:	ebfff67e 	bl	c510 <assertion_failed>
    eb14:	e30b2218 	movw	r2, #45592	; 0xb218
    eb18:	e3432f00 	movt	r2, #16128	; 0x3f00
    eb1c:	eaffffeb 	b	ead0 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

0000eb20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    eb20:	e3510047 	cmp	r1, #71	; 0x47
    eb24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    eb28:	e1a04001 	mov	r4, r1
    eb2c:	e1a05000 	mov	r5, r0
    eb30:	e1a08002 	mov	r8, r2
    eb34:	e1a07003 	mov	r7, r3
    eb38:	8a00000e 	bhi	eb78 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
    eb3c:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    eb40:	e0856104 	add	r6, r5, r4, lsl #2
    eb44:	e3530000 	cmp	r3, #0
    eb48:	0a000005 	beq	eb64 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
    eb4c:	e303150c 	movw	r1, #13580	; 0x350c
    eb50:	e3401001 	movt	r1, #1
    eb54:	e3030574 	movw	r0, #13684	; 0x3574
    eb58:	e3400001 	movt	r0, #1
    eb5c:	e3a02060 	mov	r2, #96	; 0x60
    eb60:	ebfff66a 	bl	c510 <assertion_failed>
    eb64:	e7858104 	str	r8, [r5, r4, lsl #2]
    eb68:	e1a00004 	mov	r0, r4
    eb6c:	e5867120 	str	r7, [r6, #288]	; 0x120
    eb70:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    eb74:	eaffffcd 	b	eab0 <CInterruptSystem::EnableIRQ(unsigned int)>
    eb78:	e303150c 	movw	r1, #13580	; 0x350c
    eb7c:	e3401001 	movt	r1, #1
    eb80:	e3030560 	movw	r0, #13664	; 0x3560
    eb84:	e3400001 	movt	r0, #1
    eb88:	e3a0205f 	mov	r2, #95	; 0x5f
    eb8c:	ebfff65f 	bl	c510 <assertion_failed>
    eb90:	eaffffe9 	b	eb3c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0000eb94 <CInterruptSystem::DisableIRQ(unsigned int)>:
    eb94:	e3500047 	cmp	r0, #71	; 0x47
    eb98:	e92d4010 	push	{r4, lr}
    eb9c:	e1a04000 	mov	r4, r0
    eba0:	8a00000e 	bhi	ebe0 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
    eba4:	e350001f 	cmp	r0, #31
    eba8:	930b221c 	movwls	r2, #45596	; 0xb21c
    ebac:	93432f00 	movtls	r2, #16128	; 0x3f00
    ebb0:	8a000004 	bhi	ebc8 <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
    ebb4:	e204401f 	and	r4, r4, #31
    ebb8:	e3a03001 	mov	r3, #1
    ebbc:	e1a04413 	lsl	r4, r3, r4
    ebc0:	e5824000 	str	r4, [r2]
    ebc4:	e8bd8010 	pop	{r4, pc}
    ebc8:	e350003f 	cmp	r0, #63	; 0x3f
    ebcc:	930b2220 	movwls	r2, #45600	; 0xb220
    ebd0:	93432f00 	movtls	r2, #16128	; 0x3f00
    ebd4:	830b2224 	movwhi	r2, #45604	; 0xb224
    ebd8:	83432f00 	movthi	r2, #16128	; 0x3f00
    ebdc:	eafffff4 	b	ebb4 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
    ebe0:	e3a0209b 	mov	r2, #155	; 0x9b
    ebe4:	e303150c 	movw	r1, #13580	; 0x350c
    ebe8:	e3401001 	movt	r1, #1
    ebec:	e3030560 	movw	r0, #13664	; 0x3560
    ebf0:	e3400001 	movt	r0, #1
    ebf4:	ebfff645 	bl	c510 <assertion_failed>
    ebf8:	e30b2224 	movw	r2, #45604	; 0xb224
    ebfc:	e3432f00 	movt	r2, #16128	; 0x3f00
    ec00:	eaffffeb 	b	ebb4 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

0000ec04 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    ec04:	e3510047 	cmp	r1, #71	; 0x47
    ec08:	e92d4070 	push	{r4, r5, r6, lr}
    ec0c:	e1a04001 	mov	r4, r1
    ec10:	e1a05000 	mov	r5, r0
    ec14:	8a000009 	bhi	ec40 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    ec18:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    ec1c:	e0856104 	add	r6, r5, r4, lsl #2
    ec20:	e3530000 	cmp	r3, #0
    ec24:	0a00000f 	beq	ec68 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    ec28:	e1a00004 	mov	r0, r4
    ec2c:	ebffffd8 	bl	eb94 <CInterruptSystem::DisableIRQ(unsigned int)>
    ec30:	e3a03000 	mov	r3, #0
    ec34:	e7853104 	str	r3, [r5, r4, lsl #2]
    ec38:	e5863120 	str	r3, [r6, #288]	; 0x120
    ec3c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ec40:	e303150c 	movw	r1, #13580	; 0x350c
    ec44:	e3401001 	movt	r1, #1
    ec48:	e3030560 	movw	r0, #13664	; 0x3560
    ec4c:	e3400001 	movt	r0, #1
    ec50:	e3a0206a 	mov	r2, #106	; 0x6a
    ec54:	e0856104 	add	r6, r5, r4, lsl #2
    ec58:	ebfff62c 	bl	c510 <assertion_failed>
    ec5c:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    ec60:	e3530000 	cmp	r3, #0
    ec64:	1affffef 	bne	ec28 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    ec68:	e303150c 	movw	r1, #13580	; 0x350c
    ec6c:	e3401001 	movt	r1, #1
    ec70:	e3030590 	movw	r0, #13712	; 0x3590
    ec74:	e3400001 	movt	r0, #1
    ec78:	e3a0206b 	mov	r2, #107	; 0x6b
    ec7c:	ebfff623 	bl	c510 <assertion_failed>
    ec80:	eaffffe8 	b	ec28 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0000ec84 <CInterruptSystem::EnableFIQ(unsigned int)>:
    ec84:	e3500047 	cmp	r0, #71	; 0x47
    ec88:	e92d4010 	push	{r4, lr}
    ec8c:	e1a04000 	mov	r4, r0
    ec90:	9a000005 	bls	ecac <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    ec94:	e303150c 	movw	r1, #13580	; 0x350c
    ec98:	e3401001 	movt	r1, #1
    ec9c:	e303051c 	movw	r0, #13596	; 0x351c
    eca0:	e3400001 	movt	r0, #1
    eca4:	e3a020a6 	mov	r2, #166	; 0xa6
    eca8:	ebfff618 	bl	c510 <assertion_failed>
    ecac:	e3a03a0b 	mov	r3, #45056	; 0xb000
    ecb0:	e3433f00 	movt	r3, #16128	; 0x3f00
    ecb4:	e3844080 	orr	r4, r4, #128	; 0x80
    ecb8:	e583420c 	str	r4, [r3, #524]	; 0x20c
    ecbc:	e8bd8010 	pop	{r4, pc}

0000ecc0 <CInterruptSystem::DisableFIQ()>:
    ecc0:	e3a03a0b 	mov	r3, #45056	; 0xb000
    ecc4:	e3433f00 	movt	r3, #16128	; 0x3f00
    ecc8:	e3a02000 	mov	r2, #0
    eccc:	e583220c 	str	r2, [r3, #524]	; 0x20c
    ecd0:	e12fff1e 	bx	lr

0000ecd4 <CInterruptSystem::Get()>:
    ecd4:	e92d4010 	push	{r4, lr}
    ecd8:	e30440bc 	movw	r4, #16572	; 0x40bc
    ecdc:	e3404001 	movt	r4, #1
    ece0:	e5940000 	ldr	r0, [r4]
    ece4:	e3500000 	cmp	r0, #0
    ece8:	18bd8010 	popne	{r4, pc}
    ecec:	e3a020b8 	mov	r2, #184	; 0xb8
    ecf0:	e303150c 	movw	r1, #13580	; 0x350c
    ecf4:	e3401001 	movt	r1, #1
    ecf8:	e30202f4 	movw	r0, #8948	; 0x22f4
    ecfc:	e3400001 	movt	r0, #1
    ed00:	ebfff602 	bl	c510 <assertion_failed>
    ed04:	e5940000 	ldr	r0, [r4]
    ed08:	e8bd8010 	pop	{r4, pc}

0000ed0c <CInterruptSystem::CallIRQHandler(unsigned int)>:
    ed0c:	e3510047 	cmp	r1, #71	; 0x47
    ed10:	e92d4070 	push	{r4, r5, r6, lr}
    ed14:	e1a06001 	mov	r6, r1
    ed18:	e1a05000 	mov	r5, r0
    ed1c:	8a000007 	bhi	ed40 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    ed20:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    ed24:	e0855106 	add	r5, r5, r6, lsl #2
    ed28:	e3540000 	cmp	r4, #0
    ed2c:	0a00000d 	beq	ed68 <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
    ed30:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    ed34:	e12fff34 	blx	r4
    ed38:	e3a00001 	mov	r0, #1
    ed3c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ed40:	e303150c 	movw	r1, #13580	; 0x350c
    ed44:	e3401001 	movt	r1, #1
    ed48:	e3030560 	movw	r0, #13664	; 0x3560
    ed4c:	e3400001 	movt	r0, #1
    ed50:	e3a020be 	mov	r2, #190	; 0xbe
    ed54:	ebfff5ed 	bl	c510 <assertion_failed>
    ed58:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    ed5c:	e0855106 	add	r5, r5, r6, lsl #2
    ed60:	e3540000 	cmp	r4, #0
    ed64:	1afffff1 	bne	ed30 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    ed68:	e1a00006 	mov	r0, r6
    ed6c:	ebffff88 	bl	eb94 <CInterruptSystem::DisableIRQ(unsigned int)>
    ed70:	e1a00004 	mov	r0, r4
    ed74:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ed78 <CInterruptSystem::InterruptHandler()>:
    ed78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ed7c:	e30460bc 	movw	r6, #16572	; 0x40bc
    ed80:	e3406001 	movt	r6, #1
    ed84:	e24dd010 	sub	sp, sp, #16
    ed88:	e5963000 	ldr	r3, [r6]
    ed8c:	e3530000 	cmp	r3, #0
    ed90:	0a000022 	beq	ee20 <CInterruptSystem::InterruptHandler()+0xa8>
    ed94:	eb000336 	bl	fa74 <CMultiCoreSupport::LocalInterruptHandler()>
    ed98:	e3500000 	cmp	r0, #0
    ed9c:	1a000018 	bne	ee04 <CInterruptSystem::InterruptHandler()+0x8c>
    eda0:	e3a03a0b 	mov	r3, #45056	; 0xb000
    eda4:	e3433f00 	movt	r3, #16128	; 0x3f00
    eda8:	e1a07000 	mov	r7, r0
    edac:	e28d8004 	add	r8, sp, #4
    edb0:	e5934204 	ldr	r4, [r3, #516]	; 0x204
    edb4:	e58d4004 	str	r4, [sp, #4]
    edb8:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    edbc:	e58d2008 	str	r2, [sp, #8]
    edc0:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    edc4:	e6ef3073 	uxtb	r3, r3
    edc8:	e58d300c 	str	r3, [sp, #12]
    edcc:	e3540000 	cmp	r4, #0
    edd0:	0a00000d 	beq	ee0c <CInterruptSystem::InterruptHandler()+0x94>
    edd4:	e1a05007 	mov	r5, r7
    edd8:	ea000002 	b	ede8 <CInterruptSystem::InterruptHandler()+0x70>
    eddc:	e1b040a4 	lsrs	r4, r4, #1
    ede0:	e2855001 	add	r5, r5, #1
    ede4:	0a000008 	beq	ee0c <CInterruptSystem::InterruptHandler()+0x94>
    ede8:	e3140001 	tst	r4, #1
    edec:	0afffffa 	beq	eddc <CInterruptSystem::InterruptHandler()+0x64>
    edf0:	e1a01005 	mov	r1, r5
    edf4:	e5960000 	ldr	r0, [r6]
    edf8:	ebffffc3 	bl	ed0c <CInterruptSystem::CallIRQHandler(unsigned int)>
    edfc:	e3500000 	cmp	r0, #0
    ee00:	0afffff5 	beq	eddc <CInterruptSystem::InterruptHandler()+0x64>
    ee04:	e28dd010 	add	sp, sp, #16
    ee08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ee0c:	e2877020 	add	r7, r7, #32
    ee10:	e3570060 	cmp	r7, #96	; 0x60
    ee14:	0afffffa 	beq	ee04 <CInterruptSystem::InterruptHandler()+0x8c>
    ee18:	e5b84004 	ldr	r4, [r8, #4]!
    ee1c:	eaffffea 	b	edcc <CInterruptSystem::InterruptHandler()+0x54>
    ee20:	e303150c 	movw	r1, #13580	; 0x350c
    ee24:	e3401001 	movt	r1, #1
    ee28:	e30202f4 	movw	r0, #8948	; 0x22f4
    ee2c:	e3400001 	movt	r0, #1
    ee30:	e3a020d1 	mov	r2, #209	; 0xd1
    ee34:	ebfff5b5 	bl	c510 <assertion_failed>
    ee38:	eaffffd5 	b	ed94 <CInterruptSystem::InterruptHandler()+0x1c>

0000ee3c <InterruptHandler>:
    ee3c:	eaffffcd 	b	ed78 <CInterruptSystem::InterruptHandler()>

0000ee40 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    ee40:	e1a03000 	mov	r3, r0
    ee44:	e5801000 	str	r1, [r0]
    ee48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ee4c:	e3a0e000 	mov	lr, #0
    ee50:	e28020dc 	add	r2, r0, #220	; 0xdc
    ee54:	e1a0c00e 	mov	ip, lr
    ee58:	e5a3e004 	str	lr, [r3, #4]!
    ee5c:	e5a3c004 	str	ip, [r3, #4]!
    ee60:	e1530002 	cmp	r3, r2
    ee64:	1afffffc 	bne	ee5c <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    ee68:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ee6c <CGPIOManager::~CGPIOManager()>:
    ee6c:	e92d4070 	push	{r4, r5, r6, lr}
    ee70:	e1a06000 	mov	r6, r0
    ee74:	e2804004 	add	r4, r0, #4
    ee78:	e28050dc 	add	r5, r0, #220	; 0xdc
    ee7c:	e5b43004 	ldr	r3, [r4, #4]!
    ee80:	e30315ac 	movw	r1, #13740	; 0x35ac
    ee84:	e3401001 	movt	r1, #1
    ee88:	e3530000 	cmp	r3, #0
    ee8c:	e30305bc 	movw	r0, #13756	; 0x35bc
    ee90:	e3400001 	movt	r0, #1
    ee94:	e3a0202c 	mov	r2, #44	; 0x2c
    ee98:	0a000000 	beq	eea0 <CGPIOManager::~CGPIOManager()+0x34>
    ee9c:	ebfff59b 	bl	c510 <assertion_failed>
    eea0:	e1540005 	cmp	r4, r5
    eea4:	1afffff4 	bne	ee7c <CGPIOManager::~CGPIOManager()+0x10>
    eea8:	e5963004 	ldr	r3, [r6, #4]
    eeac:	e3530000 	cmp	r3, #0
    eeb0:	0a000004 	beq	eec8 <CGPIOManager::~CGPIOManager()+0x5c>
    eeb4:	e5960000 	ldr	r0, [r6]
    eeb8:	e3500000 	cmp	r0, #0
    eebc:	0a000003 	beq	eed0 <CGPIOManager::~CGPIOManager()+0x64>
    eec0:	e3a01034 	mov	r1, #52	; 0x34
    eec4:	ebffff4e 	bl	ec04 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    eec8:	e1a00006 	mov	r0, r6
    eecc:	e8bd8070 	pop	{r4, r5, r6, pc}
    eed0:	e30315ac 	movw	r1, #13740	; 0x35ac
    eed4:	e3401001 	movt	r1, #1
    eed8:	e30305d0 	movw	r0, #13776	; 0x35d0
    eedc:	e3400001 	movt	r0, #1
    eee0:	e3a02032 	mov	r2, #50	; 0x32
    eee4:	ebfff589 	bl	c510 <assertion_failed>
    eee8:	e5960000 	ldr	r0, [r6]
    eeec:	eafffff3 	b	eec0 <CGPIOManager::~CGPIOManager()+0x54>

0000eef0 <CGPIOManager::Initialize()>:
    eef0:	e5903004 	ldr	r3, [r0, #4]
    eef4:	e92d4010 	push	{r4, lr}
    eef8:	e3530000 	cmp	r3, #0
    eefc:	e1a04000 	mov	r4, r0
    ef00:	1a00000b 	bne	ef34 <CGPIOManager::Initialize()+0x44>
    ef04:	e5940000 	ldr	r0, [r4]
    ef08:	e3500000 	cmp	r0, #0
    ef0c:	0a000011 	beq	ef58 <CGPIOManager::Initialize()+0x68>
    ef10:	e1a03004 	mov	r3, r4
    ef14:	e3a01034 	mov	r1, #52	; 0x34
    ef18:	e30f219c 	movw	r2, #61852	; 0xf19c
    ef1c:	e3402000 	movt	r2, #0
    ef20:	ebfffefe 	bl	eb20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    ef24:	e3a03001 	mov	r3, #1
    ef28:	e1a00003 	mov	r0, r3
    ef2c:	e5843004 	str	r3, [r4, #4]
    ef30:	e8bd8010 	pop	{r4, pc}
    ef34:	e30315ac 	movw	r1, #13740	; 0x35ac
    ef38:	e3401001 	movt	r1, #1
    ef3c:	e30305e4 	movw	r0, #13796	; 0x35e4
    ef40:	e3400001 	movt	r0, #1
    ef44:	e3a0203b 	mov	r2, #59	; 0x3b
    ef48:	ebfff570 	bl	c510 <assertion_failed>
    ef4c:	e5940000 	ldr	r0, [r4]
    ef50:	e3500000 	cmp	r0, #0
    ef54:	1affffed 	bne	ef10 <CGPIOManager::Initialize()+0x20>
    ef58:	e30315ac 	movw	r1, #13740	; 0x35ac
    ef5c:	e3401001 	movt	r1, #1
    ef60:	e30305d0 	movw	r0, #13776	; 0x35d0
    ef64:	e3400001 	movt	r0, #1
    ef68:	e3a0203c 	mov	r2, #60	; 0x3c
    ef6c:	ebfff567 	bl	c510 <assertion_failed>
    ef70:	e5940000 	ldr	r0, [r4]
    ef74:	eaffffe5 	b	ef10 <CGPIOManager::Initialize()+0x20>

0000ef78 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    ef78:	e5903004 	ldr	r3, [r0, #4]
    ef7c:	e92d4070 	push	{r4, r5, r6, lr}
    ef80:	e3530000 	cmp	r3, #0
    ef84:	e1a04000 	mov	r4, r0
    ef88:	e1a05001 	mov	r5, r1
    ef8c:	0a000010 	beq	efd4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
    ef90:	e3550000 	cmp	r5, #0
    ef94:	0a00001c 	beq	f00c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    ef98:	e5956004 	ldr	r6, [r5, #4]
    ef9c:	e3560035 	cmp	r6, #53	; 0x35
    efa0:	8a000012 	bhi	eff0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
    efa4:	e0844106 	add	r4, r4, r6, lsl #2
    efa8:	e5943008 	ldr	r3, [r4, #8]
    efac:	e3530000 	cmp	r3, #0
    efb0:	0a000005 	beq	efcc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    efb4:	e30315ac 	movw	r1, #13740	; 0x35ac
    efb8:	e3401001 	movt	r1, #1
    efbc:	e30305bc 	movw	r0, #13756	; 0x35bc
    efc0:	e3400001 	movt	r0, #1
    efc4:	e3a0204b 	mov	r2, #75	; 0x4b
    efc8:	ebfff550 	bl	c510 <assertion_failed>
    efcc:	e5845008 	str	r5, [r4, #8]
    efd0:	e8bd8070 	pop	{r4, r5, r6, pc}
    efd4:	e30315ac 	movw	r1, #13740	; 0x35ac
    efd8:	e3401001 	movt	r1, #1
    efdc:	e30305f8 	movw	r0, #13816	; 0x35f8
    efe0:	e3400001 	movt	r0, #1
    efe4:	e3a02045 	mov	r2, #69	; 0x45
    efe8:	ebfff548 	bl	c510 <assertion_failed>
    efec:	eaffffe7 	b	ef90 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    eff0:	e30315ac 	movw	r1, #13740	; 0x35ac
    eff4:	e3401001 	movt	r1, #1
    eff8:	e30200fc 	movw	r0, #8444	; 0x20fc
    effc:	e3400001 	movt	r0, #1
    f000:	e3a02049 	mov	r2, #73	; 0x49
    f004:	ebfff541 	bl	c510 <assertion_failed>
    f008:	eaffffe5 	b	efa4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    f00c:	e30315ac 	movw	r1, #13740	; 0x35ac
    f010:	e3401001 	movt	r1, #1
    f014:	e3030608 	movw	r0, #13832	; 0x3608
    f018:	e3400001 	movt	r0, #1
    f01c:	e3a02047 	mov	r2, #71	; 0x47
    f020:	ebfff53a 	bl	c510 <assertion_failed>
    f024:	eaffffdb 	b	ef98 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

0000f028 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    f028:	e5903004 	ldr	r3, [r0, #4]
    f02c:	e92d4070 	push	{r4, r5, r6, lr}
    f030:	e3530000 	cmp	r3, #0
    f034:	e1a04000 	mov	r4, r0
    f038:	e1a05001 	mov	r5, r1
    f03c:	0a00000b 	beq	f070 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    f040:	e3550000 	cmp	r5, #0
    f044:	0a000021 	beq	f0d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    f048:	e5955004 	ldr	r5, [r5, #4]
    f04c:	e3550035 	cmp	r5, #53	; 0x35
    f050:	8a00000d 	bhi	f08c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
    f054:	e0844105 	add	r4, r4, r5, lsl #2
    f058:	e5943008 	ldr	r3, [r4, #8]
    f05c:	e3530000 	cmp	r3, #0
    f060:	0a000013 	beq	f0b4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
    f064:	e3a03000 	mov	r3, #0
    f068:	e5843008 	str	r3, [r4, #8]
    f06c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f070:	e30315ac 	movw	r1, #13740	; 0x35ac
    f074:	e3401001 	movt	r1, #1
    f078:	e30305f8 	movw	r0, #13816	; 0x35f8
    f07c:	e3400001 	movt	r0, #1
    f080:	e3a02052 	mov	r2, #82	; 0x52
    f084:	ebfff521 	bl	c510 <assertion_failed>
    f088:	eaffffec 	b	f040 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    f08c:	e0844105 	add	r4, r4, r5, lsl #2
    f090:	e30315ac 	movw	r1, #13740	; 0x35ac
    f094:	e3401001 	movt	r1, #1
    f098:	e30200fc 	movw	r0, #8444	; 0x20fc
    f09c:	e3400001 	movt	r0, #1
    f0a0:	e3a02056 	mov	r2, #86	; 0x56
    f0a4:	ebfff519 	bl	c510 <assertion_failed>
    f0a8:	e5943008 	ldr	r3, [r4, #8]
    f0ac:	e3530000 	cmp	r3, #0
    f0b0:	1affffeb 	bne	f064 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    f0b4:	e30315ac 	movw	r1, #13740	; 0x35ac
    f0b8:	e3401001 	movt	r1, #1
    f0bc:	e3030614 	movw	r0, #13844	; 0x3614
    f0c0:	e3400001 	movt	r0, #1
    f0c4:	e3a02058 	mov	r2, #88	; 0x58
    f0c8:	ebfff510 	bl	c510 <assertion_failed>
    f0cc:	eaffffe4 	b	f064 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    f0d0:	e30315ac 	movw	r1, #13740	; 0x35ac
    f0d4:	e3401001 	movt	r1, #1
    f0d8:	e3030608 	movw	r0, #13832	; 0x3608
    f0dc:	e3400001 	movt	r0, #1
    f0e0:	e3a02054 	mov	r2, #84	; 0x54
    f0e4:	ebfff509 	bl	c510 <assertion_failed>
    f0e8:	eaffffd6 	b	f048 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

0000f0ec <CGPIOManager::InterruptHandler()>:
    f0ec:	e5903004 	ldr	r3, [r0, #4]
    f0f0:	e92d4070 	push	{r4, r5, r6, lr}
    f0f4:	e3530000 	cmp	r3, #0
    f0f8:	e1a06000 	mov	r6, r0
    f0fc:	0a00001c 	beq	f174 <CGPIOManager::InterruptHandler()+0x88>
    f100:	e3a03000 	mov	r3, #0
    f104:	e3433f20 	movt	r3, #16160	; 0x3f20
    f108:	e1a02003 	mov	r2, r3
    f10c:	e3a04000 	mov	r4, #0
    f110:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    f114:	ea000004 	b	f12c <CGPIOManager::InterruptHandler()+0x40>
    f118:	e2844001 	add	r4, r4, #1
    f11c:	e314001f 	tst	r4, #31
    f120:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    f124:	e3540036 	cmp	r4, #54	; 0x36
    f128:	08bd8070 	popeq	{r4, r5, r6, pc}
    f12c:	e3130001 	tst	r3, #1
    f130:	e1a030a3 	lsr	r3, r3, #1
    f134:	0afffff7 	beq	f118 <CGPIOManager::InterruptHandler()+0x2c>
    f138:	e2843002 	add	r3, r4, #2
    f13c:	e204501f 	and	r5, r4, #31
    f140:	e3a02001 	mov	r2, #1
    f144:	e7960103 	ldr	r0, [r6, r3, lsl #2]
    f148:	e1a05512 	lsl	r5, r2, r5
    f14c:	e3500000 	cmp	r0, #0
    f150:	0a00000e 	beq	f190 <CGPIOManager::InterruptHandler()+0xa4>
    f154:	ebffe962 	bl	96e4 <CGPIOPin::InterruptHandler()>
    f158:	e1a042a4 	lsr	r4, r4, #5
    f15c:	e3a03010 	mov	r3, #16
    f160:	e3403fc8 	movt	r3, #4040	; 0xfc8
    f164:	e0843003 	add	r3, r4, r3
    f168:	e1a03103 	lsl	r3, r3, #2
    f16c:	e5835000 	str	r5, [r3]
    f170:	e8bd8070 	pop	{r4, r5, r6, pc}
    f174:	e30315ac 	movw	r1, #13740	; 0x35ac
    f178:	e3401001 	movt	r1, #1
    f17c:	e30305f8 	movw	r0, #13816	; 0x35f8
    f180:	e3400001 	movt	r0, #1
    f184:	e3a0205e 	mov	r2, #94	; 0x5e
    f188:	ebfff4e0 	bl	c510 <assertion_failed>
    f18c:	eaffffdb 	b	f100 <CGPIOManager::InterruptHandler()+0x14>
    f190:	e1a00004 	mov	r0, r4
    f194:	ebffe97e 	bl	9794 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    f198:	eaffffee 	b	f158 <CGPIOManager::InterruptHandler()+0x6c>

0000f19c <CGPIOManager::InterruptStub(void*)>:
    f19c:	e92d4010 	push	{r4, lr}
    f1a0:	e2504000 	subs	r4, r0, #0
    f1a4:	0a000002 	beq	f1b4 <CGPIOManager::InterruptStub(void*)+0x18>
    f1a8:	e1a00004 	mov	r0, r4
    f1ac:	e8bd4010 	pop	{r4, lr}
    f1b0:	eaffffcd 	b	f0ec <CGPIOManager::InterruptHandler()>
    f1b4:	e30315ac 	movw	r1, #13740	; 0x35ac
    f1b8:	e3401001 	movt	r1, #1
    f1bc:	e3030628 	movw	r0, #13864	; 0x3628
    f1c0:	e3400001 	movt	r0, #1
    f1c4:	e3a0208a 	mov	r2, #138	; 0x8a
    f1c8:	ebfff4d0 	bl	c510 <assertion_failed>
    f1cc:	e1a00004 	mov	r0, r4
    f1d0:	e8bd4010 	pop	{r4, lr}
    f1d4:	eaffffc4 	b	f0ec <CGPIOManager::InterruptHandler()>

0000f1d8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    f1d8:	e12fff1e 	bx	lr

0000f1dc <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    f1dc:	e92d4010 	push	{r4, lr}
    f1e0:	e3a01010 	mov	r1, #16
    f1e4:	e1a04000 	mov	r4, r0
    f1e8:	ebffea4a 	bl	9b18 <operator delete(void*, unsigned int)>
    f1ec:	e1a00004 	mov	r0, r4
    f1f0:	e8bd8010 	pop	{r4, pc}

0000f1f4 <CVirtualGPIOPin::Write(unsigned int)>:
    f1f4:	e5903004 	ldr	r3, [r0, #4]
    f1f8:	e3530001 	cmp	r3, #1
    f1fc:	812fff1e 	bxhi	lr
    f200:	e92d4070 	push	{r4, r5, r6, lr}
    f204:	e30450c0 	movw	r5, #16576	; 0x40c0
    f208:	e3405001 	movt	r5, #1
    f20c:	e3510001 	cmp	r1, #1
    f210:	93a03000 	movls	r3, #0
    f214:	83a03001 	movhi	r3, #1
    f218:	e5952000 	ldr	r2, [r5]
    f21c:	e3520000 	cmp	r2, #0
    f220:	03833001 	orreq	r3, r3, #1
    f224:	e3530000 	cmp	r3, #0
    f228:	18bd8070 	popne	{r4, r5, r6, pc}
    f22c:	e1a04000 	mov	r4, r0
    f230:	e2850004 	add	r0, r5, #4
    f234:	e1a06001 	mov	r6, r1
    f238:	eb000292 	bl	fc88 <CSpinLock::Acquire()>
    f23c:	e1d410bc 	ldrh	r1, [r4, #12]
    f240:	e1d430be 	ldrh	r3, [r4, #14]
    f244:	e5846008 	str	r6, [r4, #8]
    f248:	e0632001 	rsb	r2, r3, r1
    f24c:	e6bf2072 	sxth	r2, r2
    f250:	e3520000 	cmp	r2, #0
    f254:	da00000c 	ble	f28c <CVirtualGPIOPin::Write(unsigned int)+0x98>
    f258:	e3560000 	cmp	r6, #0
    f25c:	02832001 	addeq	r2, r3, #1
    f260:	06ff3072 	uxtheq	r3, r2
    f264:	01c430be 	strheq	r3, [r4, #14]
    f268:	1a00000c 	bne	f2a0 <CVirtualGPIOPin::Write(unsigned int)+0xac>
    f26c:	e594c004 	ldr	ip, [r4, #4]
    f270:	e1833801 	orr	r3, r3, r1, lsl #16
    f274:	e5952000 	ldr	r2, [r5]
    f278:	e30400c4 	movw	r0, #16580	; 0x40c4
    f27c:	e3400001 	movt	r0, #1
    f280:	e8bd4070 	pop	{r4, r5, r6, lr}
    f284:	e782310c 	str	r3, [r2, ip, lsl #2]
    f288:	ea00029a 	b	fcf8 <CSpinLock::Release()>
    f28c:	e3560000 	cmp	r6, #0
    f290:	12811001 	addne	r1, r1, #1
    f294:	16ff1071 	uxthne	r1, r1
    f298:	11c410bc 	strhne	r1, [r4, #12]
    f29c:	1afffff2 	bne	f26c <CVirtualGPIOPin::Write(unsigned int)+0x78>
    f2a0:	e30400c4 	movw	r0, #16580	; 0x40c4
    f2a4:	e3400001 	movt	r0, #1
    f2a8:	e8bd4070 	pop	{r4, r5, r6, lr}
    f2ac:	ea000291 	b	fcf8 <CSpinLock::Release()>

0000f2b0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    f2b0:	e92d4070 	push	{r4, r5, r6, lr}
    f2b4:	e3510001 	cmp	r1, #1
    f2b8:	e3a03000 	mov	r3, #0
    f2bc:	e303263c 	movw	r2, #13884	; 0x363c
    f2c0:	e3402001 	movt	r2, #1
    f2c4:	e24dd038 	sub	sp, sp, #56	; 0x38
    f2c8:	e1a04000 	mov	r4, r0
    f2cc:	e5801004 	str	r1, [r0, #4]
    f2d0:	e5802000 	str	r2, [r0]
    f2d4:	e1c030bc 	strh	r3, [r0, #12]
    f2d8:	e1c030be 	strh	r3, [r0, #14]
    f2dc:	9a000002 	bls	f2ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x3c>
    f2e0:	e1a00004 	mov	r0, r4
    f2e4:	e28dd038 	add	sp, sp, #56	; 0x38
    f2e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f2ec:	e30450c0 	movw	r5, #16576	; 0x40c0
    f2f0:	e3405001 	movt	r5, #1
    f2f4:	e2850004 	add	r0, r5, #4
    f2f8:	eb000262 	bl	fc88 <CSpinLock::Acquire()>
    f2fc:	e5956000 	ldr	r6, [r5]
    f300:	e3560000 	cmp	r6, #0
    f304:	0a000008 	beq	f32c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x7c>
    f308:	e30400c4 	movw	r0, #16580	; 0x40c4
    f30c:	e3400001 	movt	r0, #1
    f310:	eb000278 	bl	fcf8 <CSpinLock::Release()>
    f314:	e1a00004 	mov	r0, r4
    f318:	e3a01000 	mov	r1, #0
    f31c:	ebffffb4 	bl	f1f4 <CVirtualGPIOPin::Write(unsigned int)>
    f320:	e1a00004 	mov	r0, r4
    f324:	e28dd038 	add	sp, sp, #56	; 0x38
    f328:	e8bd8070 	pop	{r4, r5, r6, pc}
    f32c:	e28d001c 	add	r0, sp, #28
    f330:	ebffe5d4 	bl	8a88 <CBcmPropertyTags::CBcmPropertyTags()>
    f334:	e3a03010 	mov	r3, #16
    f338:	e58d6000 	str	r6, [sp]
    f33c:	e28d001c 	add	r0, sp, #28
    f340:	e28d200c 	add	r2, sp, #12
    f344:	e3a01010 	mov	r1, #16
    f348:	e3401004 	movt	r1, #4
    f34c:	ebffe615 	bl	8ba8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f350:	e3500000 	cmp	r0, #0
    f354:	e28d001c 	add	r0, sp, #28
    f358:	159d3018 	ldrne	r3, [sp, #24]
    f35c:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    f360:	15853000 	strne	r3, [r5]
    f364:	ebffe5cd 	bl	8aa0 <CBcmPropertyTags::~CBcmPropertyTags()>
    f368:	eaffffe6 	b	f308 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>

0000f36c <CVirtualGPIOPin::Invert()>:
    f36c:	e5901008 	ldr	r1, [r0, #8]
    f370:	e2211001 	eor	r1, r1, #1
    f374:	eaffff9e 	b	f1f4 <CVirtualGPIOPin::Write(unsigned int)>

0000f378 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    f378:	e92d4010 	push	{r4, lr}
    f37c:	e30440c4 	movw	r4, #16580	; 0x40c4
    f380:	e3404001 	movt	r4, #1
    f384:	e3a01000 	mov	r1, #0
    f388:	e1a00004 	mov	r0, r4
    f38c:	eb000221 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
    f390:	e1a00004 	mov	r0, r4
    f394:	e30420a4 	movw	r2, #16548	; 0x40a4
    f398:	e3402001 	movt	r2, #1
    f39c:	e30f1c54 	movw	r1, #64596	; 0xfc54
    f3a0:	e3401000 	movt	r1, #0
    f3a4:	e8bd4010 	pop	{r4, lr}
    f3a8:	eaffe9dc 	b	9b20 <__aeabi_atexit>

0000f3ac <CMachineInfo::CMachineInfo()>:
    f3ac:	e30420dc 	movw	r2, #16604	; 0x40dc
    f3b0:	e3402001 	movt	r2, #1
    f3b4:	e92d4030 	push	{r4, r5, lr}
    f3b8:	e5925000 	ldr	r5, [r2]
    f3bc:	e1a04000 	mov	r4, r0
    f3c0:	e3a03000 	mov	r3, #0
    f3c4:	e3a0000c 	mov	r0, #12
    f3c8:	e1550003 	cmp	r5, r3
    f3cc:	e3a01003 	mov	r1, #3
    f3d0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f3d4:	e5c40004 	strb	r0, [r4, #4]
    f3d8:	e5c41010 	strb	r1, [r4, #16]
    f3dc:	e5843000 	str	r3, [r4]
    f3e0:	e5843008 	str	r3, [r4, #8]
    f3e4:	e584300c 	str	r3, [r4, #12]
    f3e8:	e5843014 	str	r3, [r4, #20]
    f3ec:	0a00000e 	beq	f42c <CMachineInfo::CMachineInfo()+0x80>
    f3f0:	e595e000 	ldr	lr, [r5]
    f3f4:	e5d5c004 	ldrb	ip, [r5, #4]
    f3f8:	e5950008 	ldr	r0, [r5, #8]
    f3fc:	e595100c 	ldr	r1, [r5, #12]
    f400:	e5d52010 	ldrb	r2, [r5, #16]
    f404:	e5953014 	ldr	r3, [r5, #20]
    f408:	e5843014 	str	r3, [r4, #20]
    f40c:	e584e000 	str	lr, [r4]
    f410:	e5c4c004 	strb	ip, [r4, #4]
    f414:	e5840008 	str	r0, [r4, #8]
    f418:	e584100c 	str	r1, [r4, #12]
    f41c:	e5c42010 	strb	r2, [r4, #16]
    f420:	e1a00004 	mov	r0, r4
    f424:	e28dd03c 	add	sp, sp, #60	; 0x3c
    f428:	e8bd8030 	pop	{r4, r5, pc}
    f42c:	e28d001c 	add	r0, sp, #28
    f430:	e5824000 	str	r4, [r2]
    f434:	ebffe593 	bl	8a88 <CBcmPropertyTags::CBcmPropertyTags()>
    f438:	e58d5000 	str	r5, [sp]
    f43c:	e28d001c 	add	r0, sp, #28
    f440:	e3a01002 	mov	r1, #2
    f444:	e3401001 	movt	r1, #1
    f448:	e3a03010 	mov	r3, #16
    f44c:	e28d200c 	add	r2, sp, #12
    f450:	ebffe5d4 	bl	8ba8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f454:	e3500000 	cmp	r0, #0
    f458:	0a00000d 	beq	f494 <CMachineInfo::CMachineInfo()+0xe8>
    f45c:	e59d2018 	ldr	r2, [sp, #24]
    f460:	e5842000 	str	r2, [r4]
    f464:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    f468:	1a00000c 	bne	f4a0 <CMachineInfo::CMachineInfo()+0xf4>
    f46c:	e3a01002 	mov	r1, #2
    f470:	e30306bc 	movw	r0, #14012	; 0x36bc
    f474:	e3400001 	movt	r0, #1
    f478:	ea000000 	b	f480 <CMachineInfo::CMachineInfo()+0xd4>
    f47c:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    f480:	e1520001 	cmp	r2, r1
    f484:	0a000012 	beq	f4d4 <CMachineInfo::CMachineInfo()+0x128>
    f488:	e2833001 	add	r3, r3, #1
    f48c:	e3530011 	cmp	r3, #17
    f490:	1afffff9 	bne	f47c <CMachineInfo::CMachineInfo()+0xd0>
    f494:	e28d001c 	add	r0, sp, #28
    f498:	ebffe580 	bl	8aa0 <CBcmPropertyTags::~CBcmPropertyTags()>
    f49c:	eaffffdf 	b	f420 <CMachineInfo::CMachineInfo()+0x74>
    f4a0:	e303c644 	movw	ip, #13892	; 0x3644
    f4a4:	e340c001 	movt	ip, #1
    f4a8:	e1a0100c 	mov	r1, ip
    f4ac:	e1a03005 	mov	r3, r5
    f4b0:	e7e70252 	ubfx	r0, r2, #4, #8
    f4b4:	ea000000 	b	f4bc <CMachineInfo::CMachineInfo()+0x110>
    f4b8:	e5b1500c 	ldr	r5, [r1, #12]!
    f4bc:	e1550000 	cmp	r5, r0
    f4c0:	0a000011 	beq	f50c <CMachineInfo::CMachineInfo()+0x160>
    f4c4:	e2833001 	add	r3, r3, #1
    f4c8:	e353000a 	cmp	r3, #10
    f4cc:	1afffff9 	bne	f4b8 <CMachineInfo::CMachineInfo()+0x10c>
    f4d0:	eaffffef 	b	f494 <CMachineInfo::CMachineInfo()+0xe8>
    f4d4:	e3032644 	movw	r2, #13892	; 0x3644
    f4d8:	e3402001 	movt	r2, #1
    f4dc:	e0823203 	add	r3, r2, r3, lsl #4
    f4e0:	e3a01001 	mov	r1, #1
    f4e4:	e3a02000 	mov	r2, #0
    f4e8:	e5841008 	str	r1, [r4, #8]
    f4ec:	e5c42010 	strb	r2, [r4, #16]
    f4f0:	e5d3107c 	ldrb	r1, [r3, #124]	; 0x7c
    f4f4:	e5932080 	ldr	r2, [r3, #128]	; 0x80
    f4f8:	e5933084 	ldr	r3, [r3, #132]	; 0x84
    f4fc:	e5c41004 	strb	r1, [r4, #4]
    f500:	e584200c 	str	r2, [r4, #12]
    f504:	e5843014 	str	r3, [r4, #20]
    f508:	eaffffe1 	b	f494 <CMachineInfo::CMachineInfo()+0xe8>
    f50c:	e1a01203 	lsl	r1, r3, #4
    f510:	e7e30652 	ubfx	r0, r2, #12, #4
    f514:	e0413103 	sub	r3, r1, r3, lsl #2
    f518:	e7e2ea52 	ubfx	lr, r2, #20, #3
    f51c:	e08cc003 	add	ip, ip, r3
    f520:	e3a01c01 	mov	r1, #256	; 0x100
    f524:	e3500002 	cmp	r0, #2
    f528:	e5c40010 	strb	r0, [r4, #16]
    f52c:	e202300f 	and	r3, r2, #15
    f530:	e1a02e11 	lsl	r2, r1, lr
    f534:	e5dc0004 	ldrb	r0, [ip, #4]
    f538:	e2833001 	add	r3, r3, #1
    f53c:	e59c1008 	ldr	r1, [ip, #8]
    f540:	e5841008 	str	r1, [r4, #8]
    f544:	83a01003 	movhi	r1, #3
    f548:	85c41010 	strbhi	r1, [r4, #16]
    f54c:	e3500003 	cmp	r0, #3
    f550:	03520c01 	cmpeq	r2, #256	; 0x100
    f554:	e5c40004 	strb	r0, [r4, #4]
    f558:	e5842014 	str	r2, [r4, #20]
    f55c:	e584300c 	str	r3, [r4, #12]
    f560:	1affffcb 	bne	f494 <CMachineInfo::CMachineInfo()+0xe8>
    f564:	e3530001 	cmp	r3, #1
    f568:	13a03002 	movne	r3, #2
    f56c:	03a03001 	moveq	r3, #1
    f570:	e5c43004 	strb	r3, [r4, #4]
    f574:	eaffffc6 	b	f494 <CMachineInfo::CMachineInfo()+0xe8>

0000f578 <CMachineInfo::~CMachineInfo()>:
    f578:	e30430dc 	movw	r3, #16604	; 0x40dc
    f57c:	e3403001 	movt	r3, #1
    f580:	e3a0100c 	mov	r1, #12
    f584:	e5c01004 	strb	r1, [r0, #4]
    f588:	e5932000 	ldr	r2, [r3]
    f58c:	e1500002 	cmp	r0, r2
    f590:	03a02000 	moveq	r2, #0
    f594:	05832000 	streq	r2, [r3]
    f598:	e12fff1e 	bx	lr

0000f59c <CMachineInfo::GetMachineModel() const>:
    f59c:	e5d00004 	ldrb	r0, [r0, #4]
    f5a0:	e12fff1e 	bx	lr

0000f5a4 <CMachineInfo::GetMachineName() const>:
    f5a4:	e5d02004 	ldrb	r2, [r0, #4]
    f5a8:	e3033644 	movw	r3, #13892	; 0x3644
    f5ac:	e3403001 	movt	r3, #1
    f5b0:	e0833102 	add	r3, r3, r2, lsl #2
    f5b4:	e5930188 	ldr	r0, [r3, #392]	; 0x188
    f5b8:	e12fff1e 	bx	lr

0000f5bc <CMachineInfo::GetModelMajor() const>:
    f5bc:	e5900008 	ldr	r0, [r0, #8]
    f5c0:	e12fff1e 	bx	lr

0000f5c4 <CMachineInfo::GetModelRevision() const>:
    f5c4:	e590000c 	ldr	r0, [r0, #12]
    f5c8:	e12fff1e 	bx	lr

0000f5cc <CMachineInfo::GetSoCType() const>:
    f5cc:	e5d00010 	ldrb	r0, [r0, #16]
    f5d0:	e12fff1e 	bx	lr

0000f5d4 <CMachineInfo::GetRAMSize() const>:
    f5d4:	e5900014 	ldr	r0, [r0, #20]
    f5d8:	e12fff1e 	bx	lr

0000f5dc <CMachineInfo::GetSoCName() const>:
    f5dc:	e5d02010 	ldrb	r2, [r0, #16]
    f5e0:	e3033644 	movw	r3, #13892	; 0x3644
    f5e4:	e3403001 	movt	r3, #1
    f5e8:	e0833102 	add	r3, r3, r2, lsl #2
    f5ec:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
    f5f0:	e12fff1e 	bx	lr

0000f5f4 <CMachineInfo::GetRevisionRaw() const>:
    f5f4:	e5900000 	ldr	r0, [r0]
    f5f8:	e12fff1e 	bx	lr

0000f5fc <CMachineInfo::GetClockRate(unsigned int) const>:
    f5fc:	e92d4070 	push	{r4, r5, r6, lr}
    f600:	e1a06000 	mov	r6, r0
    f604:	e1a05001 	mov	r5, r1
    f608:	e24dd038 	sub	sp, sp, #56	; 0x38
    f60c:	e28d001c 	add	r0, sp, #28
    f610:	ebffe51c 	bl	8a88 <CBcmPropertyTags::CBcmPropertyTags()>
    f614:	e3a03004 	mov	r3, #4
    f618:	e28d001c 	add	r0, sp, #28
    f61c:	e58d3000 	str	r3, [sp]
    f620:	e3a01002 	mov	r1, #2
    f624:	e3401003 	movt	r1, #3
    f628:	e3a03014 	mov	r3, #20
    f62c:	e28d2008 	add	r2, sp, #8
    f630:	e58d5014 	str	r5, [sp, #20]
    f634:	ebffe55b 	bl	8ba8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f638:	e2504000 	subs	r4, r0, #0
    f63c:	159d4018 	ldrne	r4, [sp, #24]
    f640:	1a00000b 	bne	f674 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f644:	e3550002 	cmp	r5, #2
    f648:	0a00000e 	beq	f688 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    f64c:	e3550004 	cmp	r5, #4
    f650:	0a000012 	beq	f6a0 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
    f654:	e3550001 	cmp	r5, #1
    f658:	0a00000d 	beq	f694 <CMachineInfo::GetClockRate(unsigned int) const+0x98>
    f65c:	e3031810 	movw	r1, #14352	; 0x3810
    f660:	e3401001 	movt	r1, #1
    f664:	e30305a8 	movw	r0, #13736	; 0x35a8
    f668:	e3400001 	movt	r0, #1
    f66c:	e3a02e11 	mov	r2, #272	; 0x110
    f670:	ebfff3a6 	bl	c510 <assertion_failed>
    f674:	e28d001c 	add	r0, sp, #28
    f678:	ebffe508 	bl	8aa0 <CBcmPropertyTags::~CBcmPropertyTags()>
    f67c:	e1a00004 	mov	r0, r4
    f680:	e28dd038 	add	sp, sp, #56	; 0x38
    f684:	e8bd8070 	pop	{r4, r5, r6, pc}
    f688:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    f68c:	e34042dc 	movt	r4, #732	; 0x2dc
    f690:	eafffff7 	b	f674 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f694:	e3a04ce1 	mov	r4, #57600	; 0xe100
    f698:	e34045f5 	movt	r4, #1525	; 0x5f5
    f69c:	eafffff4 	b	f674 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f6a0:	e5964008 	ldr	r4, [r6, #8]
    f6a4:	e30b3280 	movw	r3, #45696	; 0xb280
    f6a8:	e3403ee6 	movt	r3, #3814	; 0xee6
    f6ac:	e3540002 	cmp	r4, #2
    f6b0:	e3a02ca3 	mov	r2, #41728	; 0xa300
    f6b4:	e34121e1 	movt	r2, #4577	; 0x11e1
    f6b8:	91a04003 	movls	r4, r3
    f6bc:	81a04002 	movhi	r4, r2
    f6c0:	eaffffeb 	b	f674 <CMachineInfo::GetClockRate(unsigned int) const+0x78>

0000f6c4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    f6c4:	e3510036 	cmp	r1, #54	; 0x36
    f6c8:	0a00000f 	beq	f70c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
    f6cc:	e3510037 	cmp	r1, #55	; 0x37
    f6d0:	1a000004 	bne	f6e8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    f6d4:	e5d03004 	ldrb	r3, [r0, #4]
    f6d8:	e3530003 	cmp	r3, #3
    f6dc:	83a00028 	movhi	r0, #40	; 0x28
    f6e0:	93a0002d 	movls	r0, #45	; 0x2d
    f6e4:	e12fff1e 	bx	lr
    f6e8:	e92d4010 	push	{r4, lr}
    f6ec:	e300213b 	movw	r2, #315	; 0x13b
    f6f0:	e3031810 	movw	r1, #14352	; 0x3810
    f6f4:	e3401001 	movt	r1, #1
    f6f8:	e30305a8 	movw	r0, #13736	; 0x35a8
    f6fc:	e3400001 	movt	r0, #1
    f700:	ebfff382 	bl	c510 <assertion_failed>
    f704:	e3a00000 	mov	r0, #0
    f708:	e8bd8010 	pop	{r4, pc}
    f70c:	e5d03004 	ldrb	r3, [r0, #4]
    f710:	e3530003 	cmp	r3, #3
    f714:	8a000001 	bhi	f720 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
    f718:	e3a00028 	mov	r0, #40	; 0x28
    f71c:	e12fff1e 	bx	lr
    f720:	e5903008 	ldr	r3, [r0, #8]
    f724:	e3530003 	cmp	r3, #3
    f728:	33a0002d 	movcc	r0, #45	; 0x2d
    f72c:	23a00029 	movcs	r0, #41	; 0x29
    f730:	e12fff1e 	bx	lr

0000f734 <CMachineInfo::GetDevice(TDeviceId) const>:
    f734:	e3510000 	cmp	r1, #0
    f738:	1a000003 	bne	f74c <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    f73c:	e5d00004 	ldrb	r0, [r0, #4]
    f740:	e2500001 	subs	r0, r0, #1
    f744:	13a00001 	movne	r0, #1
    f748:	e12fff1e 	bx	lr
    f74c:	e92d4010 	push	{r4, lr}
    f750:	e3a02f55 	mov	r2, #340	; 0x154
    f754:	e3031810 	movw	r1, #14352	; 0x3810
    f758:	e3401001 	movt	r1, #1
    f75c:	e30305a8 	movw	r0, #13736	; 0x35a8
    f760:	e3400001 	movt	r0, #1
    f764:	ebfff369 	bl	c510 <assertion_failed>
    f768:	e3a00000 	mov	r0, #0
    f76c:	e8bd8010 	pop	{r4, pc}

0000f770 <CMachineInfo::Get()>:
    f770:	e92d4010 	push	{r4, lr}
    f774:	e30440dc 	movw	r4, #16604	; 0x40dc
    f778:	e3404001 	movt	r4, #1
    f77c:	e5940000 	ldr	r0, [r4]
    f780:	e3500000 	cmp	r0, #0
    f784:	18bd8010 	popne	{r4, pc}
    f788:	e300215d 	movw	r2, #349	; 0x15d
    f78c:	e3031810 	movw	r1, #14352	; 0x3810
    f790:	e3401001 	movt	r1, #1
    f794:	e30202f4 	movw	r0, #8948	; 0x22f4
    f798:	e3400001 	movt	r0, #1
    f79c:	ebfff35b 	bl	c510 <assertion_failed>
    f7a0:	e5940000 	ldr	r0, [r4]
    f7a4:	e8bd8010 	pop	{r4, pc}

0000f7a8 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)>:
    f7a8:	e92d4030 	push	{r4, r5, lr}
    f7ac:	e3510003 	cmp	r1, #3
    f7b0:	e1a05001 	mov	r5, r1
    f7b4:	e24dd00c 	sub	sp, sp, #12
    f7b8:	e1a04002 	mov	r4, r2
    f7bc:	8a000018 	bhi	f824 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x7c>
    f7c0:	e354001f 	cmp	r4, #31
    f7c4:	8a00000e 	bhi	f804 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x5c>
    f7c8:	e3540000 	cmp	r4, #0
    f7cc:	1a00000a 	bne	f7fc <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x54>
    f7d0:	ebfff4c4 	bl	cae8 <CLogger::Get()>
    f7d4:	e58d5000 	str	r5, [sp]
    f7d8:	e3a02004 	mov	r2, #4
    f7dc:	e303395c 	movw	r3, #14684	; 0x395c
    f7e0:	e3403001 	movt	r3, #1
    f7e4:	e303192c 	movw	r1, #14636	; 0x392c
    f7e8:	e3401001 	movt	r1, #1
    f7ec:	ebfff58b 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f7f0:	e28dd00c 	add	sp, sp, #12
    f7f4:	e8bd4030 	pop	{r4, r5, lr}
    f7f8:	eaffe8c9 	b	9b24 <halt>
    f7fc:	e28dd00c 	add	sp, sp, #12
    f800:	e8bd8030 	pop	{r4, r5, pc}
    f804:	e303194c 	movw	r1, #14668	; 0x394c
    f808:	e3401001 	movt	r1, #1
    f80c:	e3010d20 	movw	r0, #7456	; 0x1d20
    f810:	e3400001 	movt	r0, #1
    f814:	e3a02068 	mov	r2, #104	; 0x68
    f818:	e28dd00c 	add	sp, sp, #12
    f81c:	e8bd4030 	pop	{r4, r5, lr}
    f820:	eafff33a 	b	c510 <assertion_failed>
    f824:	e303194c 	movw	r1, #14668	; 0x394c
    f828:	e3401001 	movt	r1, #1
    f82c:	e3010d10 	movw	r0, #7440	; 0x1d10
    f830:	e3400001 	movt	r0, #1
    f834:	e3a02067 	mov	r2, #103	; 0x67
    f838:	ebfff334 	bl	c510 <assertion_failed>
    f83c:	eaffffdf 	b	f7c0 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x18>

0000f840 <CMultiCoreSupport::CMultiCoreSupport(CMemorySystem*)>:
    f840:	e92d4070 	push	{r4, r5, r6, lr}
    f844:	e30450e0 	movw	r5, #16608	; 0x40e0
    f848:	e3405001 	movt	r5, #1
    f84c:	e303393c 	movw	r3, #14652	; 0x393c
    f850:	e3403001 	movt	r3, #1
    f854:	e1a04000 	mov	r4, r0
    f858:	e5801004 	str	r1, [r0, #4]
    f85c:	e5952000 	ldr	r2, [r5]
    f860:	e5803000 	str	r3, [r0]
    f864:	e3520000 	cmp	r2, #0
    f868:	0a000005 	beq	f884 <CMultiCoreSupport::CMultiCoreSupport(CMemorySystem*)+0x44>
    f86c:	e303194c 	movw	r1, #14668	; 0x394c
    f870:	e3401001 	movt	r1, #1
    f874:	e30201e8 	movw	r0, #8680	; 0x21e8
    f878:	e3400001 	movt	r0, #1
    f87c:	e3a0202b 	mov	r2, #43	; 0x2b
    f880:	ebfff322 	bl	c510 <assertion_failed>
    f884:	e5854000 	str	r4, [r5]
    f888:	e1a00004 	mov	r0, r4
    f88c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f890 <CMultiCoreSupport::~CMultiCoreSupport()>:
    f890:	e30430e0 	movw	r3, #16608	; 0x40e0
    f894:	e3403001 	movt	r3, #1
    f898:	e3a02000 	mov	r2, #0
    f89c:	e5832000 	str	r2, [r3]
    f8a0:	e12fff1e 	bx	lr

0000f8a4 <CMultiCoreSupport::~CMultiCoreSupport()>:
    f8a4:	e30430e0 	movw	r3, #16608	; 0x40e0
    f8a8:	e3403001 	movt	r3, #1
    f8ac:	e92d4010 	push	{r4, lr}
    f8b0:	e3a01008 	mov	r1, #8
    f8b4:	e1a04000 	mov	r4, r0
    f8b8:	e3a02000 	mov	r2, #0
    f8bc:	e5832000 	str	r2, [r3]
    f8c0:	ebffe894 	bl	9b18 <operator delete(void*, unsigned int)>
    f8c4:	e1a00004 	mov	r0, r4
    f8c8:	e8bd8010 	pop	{r4, pc}

0000f8cc <CMultiCoreSupport::Initialize()>:
    f8cc:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    f8d0:	e3a01001 	mov	r1, #1
    f8d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f8d8:	e592300c 	ldr	r3, [r2, #12]
    f8dc:	e3a050dc 	mov	r5, #220	; 0xdc
    f8e0:	e3445000 	movt	r5, #16384	; 0x4000
    f8e4:	e3c3300c 	bic	r3, r3, #12
    f8e8:	e3086064 	movw	r6, #32868	; 0x8064
    f8ec:	e3406000 	movt	r6, #0
    f8f0:	e3a08f43 	mov	r8, #268	; 0x10c
    f8f4:	e3448000 	movt	r8, #16384	; 0x4000
    f8f8:	e3833004 	orr	r3, r3, #4
    f8fc:	e24dd008 	sub	sp, sp, #8
    f900:	e582300c 	str	r3, [r2, #12]
    f904:	e1a07001 	mov	r7, r1
    f908:	e5821050 	str	r1, [r2, #80]	; 0x50
    f90c:	f57ff04f 	dsb	sy
    f910:	e5953000 	ldr	r3, [r5]
    f914:	e3530000 	cmp	r3, #0
    f918:	13a04063 	movne	r4, #99	; 0x63
    f91c:	1a000002 	bne	f92c <CMultiCoreSupport::Initialize()+0x60>
    f920:	ea000006 	b	f940 <CMultiCoreSupport::Initialize()+0x74>
    f924:	e2544001 	subs	r4, r4, #1
    f928:	0a000018 	beq	f990 <CMultiCoreSupport::Initialize()+0xc4>
    f92c:	e3a00001 	mov	r0, #1
    f930:	ebffeb39 	bl	a61c <CTimer::SimpleMsDelay(unsigned int)>
    f934:	e5953000 	ldr	r3, [r5]
    f938:	e3530000 	cmp	r3, #0
    f93c:	1afffff8 	bne	f924 <CMultiCoreSupport::Initialize()+0x58>
    f940:	e5056040 	str	r6, [r5, #-64]	; 0xffffffc0
    f944:	e5953000 	ldr	r3, [r5]
    f948:	e3530000 	cmp	r3, #0
    f94c:	13a04063 	movne	r4, #99	; 0x63
    f950:	1a000002 	bne	f960 <CMultiCoreSupport::Initialize()+0x94>
    f954:	ea000006 	b	f974 <CMultiCoreSupport::Initialize()+0xa8>
    f958:	e2544001 	subs	r4, r4, #1
    f95c:	0a000016 	beq	f9bc <CMultiCoreSupport::Initialize()+0xf0>
    f960:	e3a00001 	mov	r0, #1
    f964:	ebffeb2c 	bl	a61c <CTimer::SimpleMsDelay(unsigned int)>
    f968:	e5953000 	ldr	r3, [r5]
    f96c:	e3530000 	cmp	r3, #0
    f970:	1afffff8 	bne	f958 <CMultiCoreSupport::Initialize()+0x8c>
    f974:	e2855010 	add	r5, r5, #16
    f978:	e2877001 	add	r7, r7, #1
    f97c:	e1550008 	cmp	r5, r8
    f980:	1affffe1 	bne	f90c <CMultiCoreSupport::Initialize()+0x40>
    f984:	e3a00001 	mov	r0, #1
    f988:	e28dd008 	add	sp, sp, #8
    f98c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f990:	ebfff454 	bl	cae8 <CLogger::Get()>
    f994:	e3033978 	movw	r3, #14712	; 0x3978
    f998:	e3403001 	movt	r3, #1
    f99c:	e58d7000 	str	r7, [sp]
    f9a0:	e3a02001 	mov	r2, #1
    f9a4:	e303192c 	movw	r1, #14636	; 0x392c
    f9a8:	e3401001 	movt	r1, #1
    f9ac:	ebfff51b 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f9b0:	e1a00004 	mov	r0, r4
    f9b4:	e28dd008 	add	sp, sp, #8
    f9b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f9bc:	ebfff449 	bl	cae8 <CLogger::Get()>
    f9c0:	e3033998 	movw	r3, #14744	; 0x3998
    f9c4:	e3403001 	movt	r3, #1
    f9c8:	e58d7000 	str	r7, [sp]
    f9cc:	eafffff3 	b	f9a0 <CMultiCoreSupport::Initialize()+0xd4>

0000f9d0 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)>:
    f9d0:	e3500003 	cmp	r0, #3
    f9d4:	e92d4070 	push	{r4, r5, r6, lr}
    f9d8:	e1a04000 	mov	r4, r0
    f9dc:	e1a05001 	mov	r5, r1
    f9e0:	8a00000e 	bhi	fa20 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)+0x50>
    f9e4:	e355001f 	cmp	r5, #31
    f9e8:	9a000005 	bls	fa04 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)+0x34>
    f9ec:	e303194c 	movw	r1, #14668	; 0x394c
    f9f0:	e3401001 	movt	r1, #1
    f9f4:	e3010d20 	movw	r0, #7456	; 0x1d20
    f9f8:	e3400001 	movt	r0, #1
    f9fc:	e3a02075 	mov	r2, #117	; 0x75
    fa00:	ebfff2c2 	bl	c510 <assertion_failed>
    fa04:	e2840301 	add	r0, r4, #67108864	; 0x4000000
    fa08:	e3a01001 	mov	r1, #1
    fa0c:	e2800008 	add	r0, r0, #8
    fa10:	e1a01511 	lsl	r1, r1, r5
    fa14:	e1a00200 	lsl	r0, r0, #4
    fa18:	e5801000 	str	r1, [r0]
    fa1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    fa20:	e303194c 	movw	r1, #14668	; 0x394c
    fa24:	e3401001 	movt	r1, #1
    fa28:	e3010d10 	movw	r0, #7440	; 0x1d10
    fa2c:	e3400001 	movt	r0, #1
    fa30:	e3a02074 	mov	r2, #116	; 0x74
    fa34:	ebfff2b5 	bl	c510 <assertion_failed>
    fa38:	eaffffe9 	b	f9e4 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)+0x14>

0000fa3c <CMultiCoreSupport::HaltAll()>:
    fa3c:	e92d4010 	push	{r4, lr}
    fa40:	e3a04000 	mov	r4, #0
    fa44:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
    fa48:	e2033003 	and	r3, r3, #3
    fa4c:	e1a00004 	mov	r0, r4
    fa50:	e1530004 	cmp	r3, r4
    fa54:	e3a01000 	mov	r1, #0
    fa58:	e2844001 	add	r4, r4, #1
    fa5c:	0a000000 	beq	fa64 <CMultiCoreSupport::HaltAll()+0x28>
    fa60:	ebffffda 	bl	f9d0 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)>
    fa64:	e3540004 	cmp	r4, #4
    fa68:	1afffff5 	bne	fa44 <CMultiCoreSupport::HaltAll()+0x8>
    fa6c:	e8bd4010 	pop	{r4, lr}
    fa70:	eaffe82b 	b	9b24 <halt>

0000fa74 <CMultiCoreSupport::LocalInterruptHandler()>:
    fa74:	e304c0e0 	movw	ip, #16608	; 0x40e0
    fa78:	e340c001 	movt	ip, #1
    fa7c:	e92d4010 	push	{r4, lr}
    fa80:	e59c0000 	ldr	r0, [ip]
    fa84:	e3500000 	cmp	r0, #0
    fa88:	08bd8010 	popeq	{r4, pc}
    fa8c:	ee101fb0 	mrc	15, 0, r1, cr0, cr0, {5}
    fa90:	e2011003 	and	r1, r1, #3
    fa94:	e2813201 	add	r3, r1, #268435456	; 0x10000000
    fa98:	e2833018 	add	r3, r3, #24
    fa9c:	e1a03103 	lsl	r3, r3, #2
    faa0:	e5930000 	ldr	r0, [r3]
    faa4:	e2100010 	ands	r0, r0, #16
    faa8:	08bd8010 	popeq	{r4, pc}
    faac:	e2813301 	add	r3, r1, #67108864	; 0x4000000
    fab0:	e283300c 	add	r3, r3, #12
    fab4:	e1a03203 	lsl	r3, r3, #4
    fab8:	e5930000 	ldr	r0, [r3]
    fabc:	e3500000 	cmp	r0, #0
    fac0:	08bd8010 	popeq	{r4, pc}
    fac4:	e2102001 	ands	r2, r0, #1
    fac8:	1a00000e 	bne	fb08 <CMultiCoreSupport::LocalInterruptHandler()+0x94>
    facc:	e1a000a0 	lsr	r0, r0, #1
    fad0:	e2822001 	add	r2, r2, #1
    fad4:	e3100001 	tst	r0, #1
    fad8:	0afffffb 	beq	facc <CMultiCoreSupport::LocalInterruptHandler()+0x58>
    fadc:	e3a00001 	mov	r0, #1
    fae0:	e1a00210 	lsl	r0, r0, r2
    fae4:	e5830000 	str	r0, [r3]
    fae8:	f57ff04f 	dsb	sy
    faec:	e59c3000 	ldr	r3, [ip]
    faf0:	e1a00003 	mov	r0, r3
    faf4:	e5933000 	ldr	r3, [r3]
    faf8:	e593300c 	ldr	r3, [r3, #12]
    fafc:	e12fff33 	blx	r3
    fb00:	e3a00001 	mov	r0, #1
    fb04:	e8bd8010 	pop	{r4, pc}
    fb08:	e3a00001 	mov	r0, #1
    fb0c:	e3a02000 	mov	r2, #0
    fb10:	eafffff3 	b	fae4 <CMultiCoreSupport::LocalInterruptHandler()+0x70>

0000fb14 <CMultiCoreSupport::EntrySecondary()>:
    fb14:	e92d4030 	push	{r4, r5, lr}
    fb18:	e30450e0 	movw	r5, #16608	; 0x40e0
    fb1c:	e3405001 	movt	r5, #1
    fb20:	e24dd00c 	sub	sp, sp, #12
    fb24:	e5953000 	ldr	r3, [r5]
    fb28:	e3530000 	cmp	r3, #0
    fb2c:	0a000030 	beq	fbf4 <CMultiCoreSupport::EntrySecondary()+0xe0>
    fb30:	e5930004 	ldr	r0, [r3, #4]
    fb34:	e3500000 	cmp	r0, #0
    fb38:	0a000024 	beq	fbd0 <CMultiCoreSupport::EntrySecondary()+0xbc>
    fb3c:	ebffe7e3 	bl	9ad0 <CMemorySystem::InitializeSecondary()>
    fb40:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
    fb44:	e2044003 	and	r4, r4, #3
    fb48:	e3a00000 	mov	r0, #0
    fb4c:	e2843201 	add	r3, r4, #268435456	; 0x10000000
    fb50:	e3a01001 	mov	r1, #1
    fb54:	e2833014 	add	r3, r3, #20
    fb58:	e1a02204 	lsl	r2, r4, #4
    fb5c:	e2822101 	add	r2, r2, #1073741824	; 0x40000000
    fb60:	e1a03103 	lsl	r3, r3, #2
    fb64:	e58200cc 	str	r0, [r2, #204]	; 0xcc
    fb68:	e5831000 	str	r1, [r3]
    fb6c:	f1080080 	cpsie	i
    fb70:	ebfff3dc 	bl	cae8 <CLogger::Get()>
    fb74:	e3a02004 	mov	r2, #4
    fb78:	e58d4000 	str	r4, [sp]
    fb7c:	e30339d4 	movw	r3, #14804	; 0x39d4
    fb80:	e3403001 	movt	r3, #1
    fb84:	e303192c 	movw	r1, #14636	; 0x392c
    fb88:	e3401001 	movt	r1, #1
    fb8c:	ebfff4a3 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fb90:	e5953000 	ldr	r3, [r5]
    fb94:	e1a01004 	mov	r1, r4
    fb98:	e1a00003 	mov	r0, r3
    fb9c:	e5933000 	ldr	r3, [r3]
    fba0:	e5933008 	ldr	r3, [r3, #8]
    fba4:	e12fff33 	blx	r3
    fba8:	ebfff3ce 	bl	cae8 <CLogger::Get()>
    fbac:	e58d4000 	str	r4, [sp]
    fbb0:	e3a02004 	mov	r2, #4
    fbb4:	e303395c 	movw	r3, #14684	; 0x395c
    fbb8:	e3403001 	movt	r3, #1
    fbbc:	e303192c 	movw	r1, #14636	; 0x392c
    fbc0:	e3401001 	movt	r1, #1
    fbc4:	ebfff495 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fbc8:	e28dd00c 	add	sp, sp, #12
    fbcc:	e8bd8030 	pop	{r4, r5, pc}
    fbd0:	e303194c 	movw	r1, #14668	; 0x394c
    fbd4:	e3401001 	movt	r1, #1
    fbd8:	e30309b4 	movw	r0, #14772	; 0x39b4
    fbdc:	e3400001 	movt	r0, #1
    fbe0:	e3a020ad 	mov	r2, #173	; 0xad
    fbe4:	ebfff249 	bl	c510 <assertion_failed>
    fbe8:	e5953000 	ldr	r3, [r5]
    fbec:	e5930004 	ldr	r0, [r3, #4]
    fbf0:	eaffffd1 	b	fb3c <CMultiCoreSupport::EntrySecondary()+0x28>
    fbf4:	e303194c 	movw	r1, #14668	; 0x394c
    fbf8:	e3401001 	movt	r1, #1
    fbfc:	e30202f4 	movw	r0, #8948	; 0x22f4
    fc00:	e3400001 	movt	r0, #1
    fc04:	e3a020ab 	mov	r2, #171	; 0xab
    fc08:	ebfff240 	bl	c510 <assertion_failed>
    fc0c:	e5953000 	ldr	r3, [r5]
    fc10:	eaffffc6 	b	fb30 <CMultiCoreSupport::EntrySecondary()+0x1c>

0000fc14 <main_secondary>:
    fc14:	eaffffbe 	b	fb14 <CMultiCoreSupport::EntrySecondary()>

0000fc18 <CSpinLock::CSpinLock(unsigned int)>:
    fc18:	e3510002 	cmp	r1, #2
    fc1c:	e3a03000 	mov	r3, #0
    fc20:	e92d4010 	push	{r4, lr}
    fc24:	e1a04000 	mov	r4, r0
    fc28:	e5801000 	str	r1, [r0]
    fc2c:	e5803014 	str	r3, [r0, #20]
    fc30:	9a000005 	bls	fc4c <CSpinLock::CSpinLock(unsigned int)+0x34>
    fc34:	e30319e8 	movw	r1, #14824	; 0x39e8
    fc38:	e3401001 	movt	r1, #1
    fc3c:	e30309f8 	movw	r0, #14840	; 0x39f8
    fc40:	e3400001 	movt	r0, #1
    fc44:	e3a02023 	mov	r2, #35	; 0x23
    fc48:	ebfff230 	bl	c510 <assertion_failed>
    fc4c:	e1a00004 	mov	r0, r4
    fc50:	e8bd8010 	pop	{r4, pc}

0000fc54 <CSpinLock::~CSpinLock()>:
    fc54:	e5903014 	ldr	r3, [r0, #20]
    fc58:	e92d4010 	push	{r4, lr}
    fc5c:	e3530000 	cmp	r3, #0
    fc60:	e1a04000 	mov	r4, r0
    fc64:	0a000005 	beq	fc80 <CSpinLock::~CSpinLock()+0x2c>
    fc68:	e30319e8 	movw	r1, #14824	; 0x39e8
    fc6c:	e3401001 	movt	r1, #1
    fc70:	e3030a14 	movw	r0, #14868	; 0x3a14
    fc74:	e3400001 	movt	r0, #1
    fc78:	e3a02028 	mov	r2, #40	; 0x28
    fc7c:	ebfff223 	bl	c510 <assertion_failed>
    fc80:	e1a00004 	mov	r0, r4
    fc84:	e8bd8010 	pop	{r4, pc}

0000fc88 <CSpinLock::Acquire()>:
    fc88:	e5902000 	ldr	r2, [r0]
    fc8c:	e3520000 	cmp	r2, #0
    fc90:	0a000007 	beq	fcb4 <CSpinLock::Acquire()+0x2c>
    fc94:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
    fc98:	e10f1000 	mrs	r1, CPSR
    fc9c:	f10c0080 	cpsid	i
    fca0:	e2033003 	and	r3, r3, #3
    fca4:	e3520002 	cmp	r2, #2
    fca8:	e0803103 	add	r3, r0, r3, lsl #2
    fcac:	e5831004 	str	r1, [r3, #4]
    fcb0:	0a00000e 	beq	fcf0 <CSpinLock::Acquire()+0x68>
    fcb4:	e30430e4 	movw	r3, #16612	; 0x40e4
    fcb8:	e3403001 	movt	r3, #1
    fcbc:	e5933000 	ldr	r3, [r3]
    fcc0:	e3530000 	cmp	r3, #0
    fcc4:	012fff1e 	bxeq	lr
    fcc8:	e2800014 	add	r0, r0, #20
    fccc:	e1a01000 	mov	r1, r0
    fcd0:	e3a02001 	mov	r2, #1
    fcd4:	e1913f9f 	ldrex	r3, [r1]
    fcd8:	e3530000 	cmp	r3, #0
    fcdc:	01813f92 	strexeq	r3, r2, [r1]
    fce0:	03530000 	cmpeq	r3, #0
    fce4:	1afffffa 	bne	fcd4 <CSpinLock::Acquire()+0x4c>
    fce8:	f57ff05f 	dmb	sy
    fcec:	e12fff1e 	bx	lr
    fcf0:	f10c0040 	cpsid	f
    fcf4:	eaffffee 	b	fcb4 <CSpinLock::Acquire()+0x2c>

0000fcf8 <CSpinLock::Release()>:
    fcf8:	e30430e4 	movw	r3, #16612	; 0x40e4
    fcfc:	e3403001 	movt	r3, #1
    fd00:	e5933000 	ldr	r3, [r3]
    fd04:	e3530000 	cmp	r3, #0
    fd08:	0a000004 	beq	fd20 <CSpinLock::Release()+0x28>
    fd0c:	e2803014 	add	r3, r0, #20
    fd10:	e1a01003 	mov	r1, r3
    fd14:	e3a02000 	mov	r2, #0
    fd18:	f57ff05f 	dmb	sy
    fd1c:	e5812000 	str	r2, [r1]
    fd20:	e5903000 	ldr	r3, [r0]
    fd24:	e3530000 	cmp	r3, #0
    fd28:	012fff1e 	bxeq	lr
    fd2c:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
    fd30:	e2033003 	and	r3, r3, #3
    fd34:	e0800103 	add	r0, r0, r3, lsl #2
    fd38:	e5903004 	ldr	r3, [r0, #4]
    fd3c:	e121f003 	msr	CPSR_c, r3
    fd40:	e12fff1e 	bx	lr

0000fd44 <CSpinLock::Enable()>:
    fd44:	e92d4010 	push	{r4, lr}
    fd48:	e30440e4 	movw	r4, #16612	; 0x40e4
    fd4c:	e3404001 	movt	r4, #1
    fd50:	e5943000 	ldr	r3, [r4]
    fd54:	e3530000 	cmp	r3, #0
    fd58:	0a000005 	beq	fd74 <CSpinLock::Enable()+0x30>
    fd5c:	e30319e8 	movw	r1, #14824	; 0x39e8
    fd60:	e3401001 	movt	r1, #1
    fd64:	e3030a20 	movw	r0, #14880	; 0x3a20
    fd68:	e3400001 	movt	r0, #1
    fd6c:	e3a02074 	mov	r2, #116	; 0x74
    fd70:	ebfff1e6 	bl	c510 <assertion_failed>
    fd74:	e3a03001 	mov	r3, #1
    fd78:	e5843000 	str	r3, [r4]
    fd7c:	e8bd8010 	pop	{r4, pc}

0000fd80 <InvalidateDataCacheL1Only>:
    fd80:	e92d0070 	push	{r4, r5, r6}
    fd84:	e3a00000 	mov	r0, #0
    fd88:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    fd8c:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    fd90:	e3071fff 	movw	r1, #32767	; 0x7fff
    fd94:	e00126a0 	and	r2, r1, r0, lsr #13
    fd98:	e30013ff 	movw	r1, #1023	; 0x3ff
    fd9c:	e00131a0 	and	r3, r1, r0, lsr #3
    fda0:	e2822001 	add	r2, r2, #1
    fda4:	e2000007 	and	r0, r0, #7
    fda8:	e2800004 	add	r0, r0, #4
    fdac:	e16f1f13 	clz	r1, r3
    fdb0:	e2834001 	add	r4, r3, #1
    fdb4:	e2422001 	sub	r2, r2, #1
    fdb8:	e1a03004 	mov	r3, r4
    fdbc:	e2533001 	subs	r3, r3, #1
    fdc0:	e1a05113 	lsl	r5, r3, r1
    fdc4:	e1a06012 	lsl	r6, r2, r0
    fdc8:	e1855006 	orr	r5, r5, r6
    fdcc:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    fdd0:	cafffff9 	bgt	fdbc <InvalidateDataCacheL1Only+0x3c>
    fdd4:	e3520000 	cmp	r2, #0
    fdd8:	cafffff5 	bgt	fdb4 <InvalidateDataCacheL1Only+0x34>
    fddc:	f57ff04e 	dsb	st
    fde0:	f57ff06f 	isb	sy
    fde4:	e8bd0070 	pop	{r4, r5, r6}
    fde8:	e12fff1e 	bx	lr

0000fdec <InvalidateDataCache>:
    fdec:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    fdf0:	f57ff05f 	dmb	sy
    fdf4:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    fdf8:	e1a03ba0 	lsr	r3, r0, #23
    fdfc:	e213300e 	ands	r3, r3, #14
    fe00:	0a00001d 	beq	fe7c <InvalidateDataCache+0x90>
    fe04:	e3a0a000 	mov	sl, #0
    fe08:	e08a20aa 	add	r2, sl, sl, lsr #1
    fe0c:	e1a01230 	lsr	r1, r0, r2
    fe10:	e2011007 	and	r1, r1, #7
    fe14:	e3510002 	cmp	r1, #2
    fe18:	ba000014 	blt	fe70 <InvalidateDataCache+0x84>
    fe1c:	e10f9000 	mrs	r9, CPSR
    fe20:	f10c0080 	cpsid	i
    fe24:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    fe28:	f57ff06f 	isb	sy
    fe2c:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    fe30:	e121f009 	msr	CPSR_c, r9
    fe34:	e2012007 	and	r2, r1, #7
    fe38:	e2822004 	add	r2, r2, #4
    fe3c:	e30043ff 	movw	r4, #1023	; 0x3ff
    fe40:	e01441a1 	ands	r4, r4, r1, lsr #3
    fe44:	e16f5f14 	clz	r5, r4
    fe48:	e3077fff 	movw	r7, #32767	; 0x7fff
    fe4c:	e01776a1 	ands	r7, r7, r1, lsr #13
    fe50:	e1a09007 	mov	r9, r7
    fe54:	e18ab514 	orr	fp, sl, r4, lsl r5
    fe58:	e18bb219 	orr	fp, fp, r9, lsl r2
    fe5c:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    fe60:	e2599001 	subs	r9, r9, #1
    fe64:	aafffffa 	bge	fe54 <InvalidateDataCache+0x68>
    fe68:	e2544001 	subs	r4, r4, #1
    fe6c:	aafffff7 	bge	fe50 <InvalidateDataCache+0x64>
    fe70:	e28aa002 	add	sl, sl, #2
    fe74:	e153000a 	cmp	r3, sl
    fe78:	caffffe2 	bgt	fe08 <InvalidateDataCache+0x1c>
    fe7c:	e3a0a000 	mov	sl, #0
    fe80:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    fe84:	f57ff04e 	dsb	st
    fe88:	f57ff06f 	isb	sy
    fe8c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    fe90:	e12fff1e 	bx	lr

0000fe94 <CleanDataCache>:
    fe94:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    fe98:	f57ff05f 	dmb	sy
    fe9c:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    fea0:	e1a03ba0 	lsr	r3, r0, #23
    fea4:	e213300e 	ands	r3, r3, #14
    fea8:	0a00001d 	beq	ff24 <CleanDataCache+0x90>
    feac:	e3a0a000 	mov	sl, #0
    feb0:	e08a20aa 	add	r2, sl, sl, lsr #1
    feb4:	e1a01230 	lsr	r1, r0, r2
    feb8:	e2011007 	and	r1, r1, #7
    febc:	e3510002 	cmp	r1, #2
    fec0:	ba000014 	blt	ff18 <CleanDataCache+0x84>
    fec4:	e10f9000 	mrs	r9, CPSR
    fec8:	f10c0080 	cpsid	i
    fecc:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    fed0:	f57ff06f 	isb	sy
    fed4:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    fed8:	e121f009 	msr	CPSR_c, r9
    fedc:	e2012007 	and	r2, r1, #7
    fee0:	e2822004 	add	r2, r2, #4
    fee4:	e30043ff 	movw	r4, #1023	; 0x3ff
    fee8:	e01441a1 	ands	r4, r4, r1, lsr #3
    feec:	e16f5f14 	clz	r5, r4
    fef0:	e3077fff 	movw	r7, #32767	; 0x7fff
    fef4:	e01776a1 	ands	r7, r7, r1, lsr #13
    fef8:	e1a09007 	mov	r9, r7
    fefc:	e18ab514 	orr	fp, sl, r4, lsl r5
    ff00:	e18bb219 	orr	fp, fp, r9, lsl r2
    ff04:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    ff08:	e2599001 	subs	r9, r9, #1
    ff0c:	aafffffa 	bge	fefc <CleanDataCache+0x68>
    ff10:	e2544001 	subs	r4, r4, #1
    ff14:	aafffff7 	bge	fef8 <CleanDataCache+0x64>
    ff18:	e28aa002 	add	sl, sl, #2
    ff1c:	e153000a 	cmp	r3, sl
    ff20:	caffffe2 	bgt	feb0 <CleanDataCache+0x1c>
    ff24:	e3a0a000 	mov	sl, #0
    ff28:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    ff2c:	f57ff04e 	dsb	st
    ff30:	f57ff06f 	isb	sy
    ff34:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    ff38:	e12fff1e 	bx	lr

0000ff3c <CleanAndInvalidateDataCacheRange>:
    ff3c:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    ff40:	e1a03823 	lsr	r3, r3, #16
    ff44:	e203300f 	and	r3, r3, #15
    ff48:	e3a02004 	mov	r2, #4
    ff4c:	e1a02312 	lsl	r2, r2, r3
    ff50:	e0801001 	add	r1, r0, r1
    ff54:	e2423001 	sub	r3, r2, #1
    ff58:	e1c00003 	bic	r0, r0, r3
    ff5c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    ff60:	e0800002 	add	r0, r0, r2
    ff64:	e1500001 	cmp	r0, r1
    ff68:	3afffffb 	bcc	ff5c <CleanAndInvalidateDataCacheRange+0x20>
    ff6c:	f57ff04e 	dsb	st
    ff70:	e12fff1e 	bx	lr

0000ff74 <CPtrList::CPtrList()>:
    ff74:	e3a02000 	mov	r2, #0
    ff78:	e5802000 	str	r2, [r0]
    ff7c:	e12fff1e 	bx	lr

0000ff80 <CPtrList::~CPtrList()>:
    ff80:	e5903000 	ldr	r3, [r0]
    ff84:	e92d4010 	push	{r4, lr}
    ff88:	e3530000 	cmp	r3, #0
    ff8c:	e1a04000 	mov	r4, r0
    ff90:	0a000005 	beq	ffac <CPtrList::~CPtrList()+0x2c>
    ff94:	e3031a2c 	movw	r1, #14892	; 0x3a2c
    ff98:	e3401001 	movt	r1, #1
    ff9c:	e3030a38 	movw	r0, #14904	; 0x3a38
    ffa0:	e3400001 	movt	r0, #1
    ffa4:	e3a0202a 	mov	r2, #42	; 0x2a
    ffa8:	ebfff158 	bl	c510 <assertion_failed>
    ffac:	e1a00004 	mov	r0, r4
    ffb0:	e8bd8010 	pop	{r4, pc}

0000ffb4 <CPtrList::GetFirst()>:
    ffb4:	e5900000 	ldr	r0, [r0]
    ffb8:	e12fff1e 	bx	lr

0000ffbc <CPtrList::GetNext(TPtrListElement*)>:
    ffbc:	e92d4010 	push	{r4, lr}
    ffc0:	e2514000 	subs	r4, r1, #0
    ffc4:	0a00000c 	beq	fffc <CPtrList::GetNext(TPtrListElement*)+0x40>
    ffc8:	e5942000 	ldr	r2, [r4]
    ffcc:	e3043d43 	movw	r3, #19779	; 0x4d43
    ffd0:	e345304c 	movt	r3, #20556	; 0x504c
    ffd4:	e1520003 	cmp	r2, r3
    ffd8:	0a000005 	beq	fff4 <CPtrList::GetNext(TPtrListElement*)+0x38>
    ffdc:	e3031a2c 	movw	r1, #14892	; 0x3a2c
    ffe0:	e3401001 	movt	r1, #1
    ffe4:	e3030a58 	movw	r0, #14936	; 0x3a58
    ffe8:	e3400001 	movt	r0, #1
    ffec:	e3a02035 	mov	r2, #53	; 0x35
    fff0:	ebfff146 	bl	c510 <assertion_failed>
    fff4:	e5940008 	ldr	r0, [r4, #8]
    fff8:	e8bd8010 	pop	{r4, pc}
    fffc:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   10000:	e3401001 	movt	r1, #1
   10004:	e3030a48 	movw	r0, #14920	; 0x3a48
   10008:	e3400001 	movt	r0, #1
   1000c:	e3a02034 	mov	r2, #52	; 0x34
   10010:	ebfff13e 	bl	c510 <assertion_failed>
   10014:	eaffffeb 	b	ffc8 <CPtrList::GetNext(TPtrListElement*)+0xc>

00010018 <CPtrList::GetPtr(TPtrListElement*)>:
   10018:	e92d4010 	push	{r4, lr}
   1001c:	e2514000 	subs	r4, r1, #0
   10020:	0a00000c 	beq	10058 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   10024:	e5942000 	ldr	r2, [r4]
   10028:	e3043d43 	movw	r3, #19779	; 0x4d43
   1002c:	e345304c 	movt	r3, #20556	; 0x504c
   10030:	e1520003 	cmp	r2, r3
   10034:	0a000005 	beq	10050 <CPtrList::GetPtr(TPtrListElement*)+0x38>
   10038:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   1003c:	e3401001 	movt	r1, #1
   10040:	e3030a58 	movw	r0, #14936	; 0x3a58
   10044:	e3400001 	movt	r0, #1
   10048:	e3a0203d 	mov	r2, #61	; 0x3d
   1004c:	ebfff12f 	bl	c510 <assertion_failed>
   10050:	e594000c 	ldr	r0, [r4, #12]
   10054:	e8bd8010 	pop	{r4, pc}
   10058:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   1005c:	e3401001 	movt	r1, #1
   10060:	e3030a48 	movw	r0, #14920	; 0x3a48
   10064:	e3400001 	movt	r0, #1
   10068:	e3a0203c 	mov	r2, #60	; 0x3c
   1006c:	ebfff127 	bl	c510 <assertion_failed>
   10070:	eaffffeb 	b	10024 <CPtrList::GetPtr(TPtrListElement*)+0xc>

00010074 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   10074:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10078:	e1a06000 	mov	r6, r0
   1007c:	e3a00010 	mov	r0, #16
   10080:	e1a07002 	mov	r7, r2
   10084:	e1a04001 	mov	r4, r1
   10088:	ebffe69e 	bl	9b08 <operator new(unsigned int)>
   1008c:	e3043d43 	movw	r3, #19779	; 0x4d43
   10090:	e345304c 	movt	r3, #20556	; 0x504c
   10094:	e5803000 	str	r3, [r0]
   10098:	e5962000 	ldr	r2, [r6]
   1009c:	e1a05000 	mov	r5, r0
   100a0:	e580700c 	str	r7, [r0, #12]
   100a4:	e3520000 	cmp	r2, #0
   100a8:	0a000029 	beq	10154 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   100ac:	e3540000 	cmp	r4, #0
   100b0:	0a00002e 	beq	10170 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   100b4:	e5942000 	ldr	r2, [r4]
   100b8:	e3043d43 	movw	r3, #19779	; 0x4d43
   100bc:	e345304c 	movt	r3, #20556	; 0x504c
   100c0:	e1520003 	cmp	r2, r3
   100c4:	0a000005 	beq	100e0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
   100c8:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   100cc:	e3401001 	movt	r1, #1
   100d0:	e3030a98 	movw	r0, #15000	; 0x3a98
   100d4:	e3400001 	movt	r0, #1
   100d8:	e3a0204e 	mov	r2, #78	; 0x4e
   100dc:	ebfff10b 	bl	c510 <assertion_failed>
   100e0:	e5963000 	ldr	r3, [r6]
   100e4:	e1540003 	cmp	r4, r3
   100e8:	0a000013 	beq	1013c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
   100ec:	e5943004 	ldr	r3, [r4, #4]
   100f0:	e5854008 	str	r4, [r5, #8]
   100f4:	e3530000 	cmp	r3, #0
   100f8:	e5853004 	str	r3, [r5, #4]
   100fc:	0a00000c 	beq	10134 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   10100:	e5931000 	ldr	r1, [r3]
   10104:	e3042d43 	movw	r2, #19779	; 0x4d43
   10108:	e345204c 	movt	r2, #20556	; 0x504c
   1010c:	e1510002 	cmp	r1, r2
   10110:	0a000006 	beq	10130 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
   10114:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   10118:	e3401001 	movt	r1, #1
   1011c:	e3030abc 	movw	r0, #15036	; 0x3abc
   10120:	e3400001 	movt	r0, #1
   10124:	e3a02060 	mov	r2, #96	; 0x60
   10128:	ebfff0f8 	bl	c510 <assertion_failed>
   1012c:	e5943004 	ldr	r3, [r4, #4]
   10130:	e5835008 	str	r5, [r3, #8]
   10134:	e5845004 	str	r5, [r4, #4]
   10138:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1013c:	e5845004 	str	r5, [r4, #4]
   10140:	e3a03000 	mov	r3, #0
   10144:	e5854008 	str	r4, [r5, #8]
   10148:	e5865000 	str	r5, [r6]
   1014c:	e5853004 	str	r3, [r5, #4]
   10150:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10154:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   10158:	e3401001 	movt	r1, #1
   1015c:	e3030a7c 	movw	r0, #14972	; 0x3a7c
   10160:	e3400001 	movt	r0, #1
   10164:	e3a0204c 	mov	r2, #76	; 0x4c
   10168:	ebfff0e8 	bl	c510 <assertion_failed>
   1016c:	eaffffce 	b	100ac <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
   10170:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   10174:	e3401001 	movt	r1, #1
   10178:	e3030a8c 	movw	r0, #14988	; 0x3a8c
   1017c:	e3400001 	movt	r0, #1
   10180:	e3a0204d 	mov	r2, #77	; 0x4d
   10184:	ebfff0e1 	bl	c510 <assertion_failed>
   10188:	eaffffc9 	b	100b4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

0001018c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   1018c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10190:	e1a06000 	mov	r6, r0
   10194:	e1a05001 	mov	r5, r1
   10198:	e3a00010 	mov	r0, #16
   1019c:	e1a07002 	mov	r7, r2
   101a0:	ebffe658 	bl	9b08 <operator new(unsigned int)>
   101a4:	e3550000 	cmp	r5, #0
   101a8:	e3043d43 	movw	r3, #19779	; 0x4d43
   101ac:	e345304c 	movt	r3, #20556	; 0x504c
   101b0:	e1a04000 	mov	r4, r0
   101b4:	e5803000 	str	r3, [r0]
   101b8:	e580700c 	str	r7, [r0, #12]
   101bc:	e5963000 	ldr	r3, [r6]
   101c0:	0a000020 	beq	10248 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   101c4:	e3530000 	cmp	r3, #0
   101c8:	0a00002b 	beq	1027c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   101cc:	e5952000 	ldr	r2, [r5]
   101d0:	e3043d43 	movw	r3, #19779	; 0x4d43
   101d4:	e345304c 	movt	r3, #20556	; 0x504c
   101d8:	e1520003 	cmp	r2, r3
   101dc:	0a000005 	beq	101f8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   101e0:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   101e4:	e3401001 	movt	r1, #1
   101e8:	e3030ae4 	movw	r0, #15076	; 0x3ae4
   101ec:	e3400001 	movt	r0, #1
   101f0:	e3a0207e 	mov	r2, #126	; 0x7e
   101f4:	ebfff0c5 	bl	c510 <assertion_failed>
   101f8:	e5953008 	ldr	r3, [r5, #8]
   101fc:	e5845004 	str	r5, [r4, #4]
   10200:	e3530000 	cmp	r3, #0
   10204:	e5843008 	str	r3, [r4, #8]
   10208:	0a00000c 	beq	10240 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
   1020c:	e5931000 	ldr	r1, [r3]
   10210:	e3042d43 	movw	r2, #19779	; 0x4d43
   10214:	e345204c 	movt	r2, #20556	; 0x504c
   10218:	e1510002 	cmp	r1, r2
   1021c:	0a000006 	beq	1023c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
   10220:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   10224:	e3401001 	movt	r1, #1
   10228:	e3030b08 	movw	r0, #15112	; 0x3b08
   1022c:	e3400001 	movt	r0, #1
   10230:	e3a02085 	mov	r2, #133	; 0x85
   10234:	ebfff0b5 	bl	c510 <assertion_failed>
   10238:	e5953008 	ldr	r3, [r5, #8]
   1023c:	e5834004 	str	r4, [r3, #4]
   10240:	e5854008 	str	r4, [r5, #8]
   10244:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10248:	e3530000 	cmp	r3, #0
   1024c:	0a000005 	beq	10268 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   10250:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   10254:	e3401001 	movt	r1, #1
   10258:	e3030a38 	movw	r0, #14904	; 0x3a38
   1025c:	e3400001 	movt	r0, #1
   10260:	e3a02074 	mov	r2, #116	; 0x74
   10264:	ebfff0a9 	bl	c510 <assertion_failed>
   10268:	e3a03000 	mov	r3, #0
   1026c:	e5864000 	str	r4, [r6]
   10270:	e5843004 	str	r3, [r4, #4]
   10274:	e5843008 	str	r3, [r4, #8]
   10278:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1027c:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   10280:	e3401001 	movt	r1, #1
   10284:	e3030a7c 	movw	r0, #14972	; 0x3a7c
   10288:	e3400001 	movt	r0, #1
   1028c:	e3a0207d 	mov	r2, #125	; 0x7d
   10290:	ebfff09e 	bl	c510 <assertion_failed>
   10294:	eaffffcc 	b	101cc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

00010298 <CPtrList::Remove(TPtrListElement*)>:
   10298:	e92d4070 	push	{r4, r5, r6, lr}
   1029c:	e2514000 	subs	r4, r1, #0
   102a0:	e1a05000 	mov	r5, r0
   102a4:	0a000048 	beq	103cc <CPtrList::Remove(TPtrListElement*)+0x134>
   102a8:	e5942000 	ldr	r2, [r4]
   102ac:	e3043d43 	movw	r3, #19779	; 0x4d43
   102b0:	e345304c 	movt	r3, #20556	; 0x504c
   102b4:	e1520003 	cmp	r2, r3
   102b8:	0a000005 	beq	102d4 <CPtrList::Remove(TPtrListElement*)+0x3c>
   102bc:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   102c0:	e3401001 	movt	r1, #1
   102c4:	e3030a58 	movw	r0, #14936	; 0x3a58
   102c8:	e3400001 	movt	r0, #1
   102cc:	e3a02090 	mov	r2, #144	; 0x90
   102d0:	ebfff08e 	bl	c510 <assertion_failed>
   102d4:	e5953000 	ldr	r3, [r5]
   102d8:	e1540003 	cmp	r4, r3
   102dc:	0a000027 	beq	10380 <CPtrList::Remove(TPtrListElement*)+0xe8>
   102e0:	e5943004 	ldr	r3, [r4, #4]
   102e4:	e3530000 	cmp	r3, #0
   102e8:	0a00003e 	beq	103e8 <CPtrList::Remove(TPtrListElement*)+0x150>
   102ec:	e5931000 	ldr	r1, [r3]
   102f0:	e3042d43 	movw	r2, #19779	; 0x4d43
   102f4:	e345204c 	movt	r2, #20556	; 0x504c
   102f8:	e1510002 	cmp	r1, r2
   102fc:	0a000006 	beq	1031c <CPtrList::Remove(TPtrListElement*)+0x84>
   10300:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   10304:	e3401001 	movt	r1, #1
   10308:	e3030b78 	movw	r0, #15224	; 0x3b78
   1030c:	e3400001 	movt	r0, #1
   10310:	e3a0209f 	mov	r2, #159	; 0x9f
   10314:	ebfff07d 	bl	c510 <assertion_failed>
   10318:	e5943004 	ldr	r3, [r4, #4]
   1031c:	e5942008 	ldr	r2, [r4, #8]
   10320:	e5832008 	str	r2, [r3, #8]
   10324:	e5942008 	ldr	r2, [r4, #8]
   10328:	e3520000 	cmp	r2, #0
   1032c:	0a00000d 	beq	10368 <CPtrList::Remove(TPtrListElement*)+0xd0>
   10330:	e5920000 	ldr	r0, [r2]
   10334:	e3041d43 	movw	r1, #19779	; 0x4d43
   10338:	e345104c 	movt	r1, #20556	; 0x504c
   1033c:	e1500001 	cmp	r0, r1
   10340:	0a000007 	beq	10364 <CPtrList::Remove(TPtrListElement*)+0xcc>
   10344:	e3a020a4 	mov	r2, #164	; 0xa4
   10348:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   1034c:	e3401001 	movt	r1, #1
   10350:	e3030b34 	movw	r0, #15156	; 0x3b34
   10354:	e3400001 	movt	r0, #1
   10358:	ebfff06c 	bl	c510 <assertion_failed>
   1035c:	e5942008 	ldr	r2, [r4, #8]
   10360:	e5943004 	ldr	r3, [r4, #4]
   10364:	e5823004 	str	r3, [r2, #4]
   10368:	e3a03000 	mov	r3, #0
   1036c:	e1a00004 	mov	r0, r4
   10370:	e5843000 	str	r3, [r4]
   10374:	e3a01010 	mov	r1, #16
   10378:	e8bd4070 	pop	{r4, r5, r6, lr}
   1037c:	eaffe5e5 	b	9b18 <operator delete(void*, unsigned int)>
   10380:	e5943008 	ldr	r3, [r4, #8]
   10384:	e5853000 	str	r3, [r5]
   10388:	e3530000 	cmp	r3, #0
   1038c:	0afffff5 	beq	10368 <CPtrList::Remove(TPtrListElement*)+0xd0>
   10390:	e5931000 	ldr	r1, [r3]
   10394:	e3042d43 	movw	r2, #19779	; 0x4d43
   10398:	e345204c 	movt	r2, #20556	; 0x504c
   1039c:	e1510002 	cmp	r1, r2
   103a0:	0a000006 	beq	103c0 <CPtrList::Remove(TPtrListElement*)+0x128>
   103a4:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   103a8:	e3401001 	movt	r1, #1
   103ac:	e3030b34 	movw	r0, #15156	; 0x3b34
   103b0:	e3400001 	movt	r0, #1
   103b4:	e3a02098 	mov	r2, #152	; 0x98
   103b8:	ebfff054 	bl	c510 <assertion_failed>
   103bc:	e5943008 	ldr	r3, [r4, #8]
   103c0:	e3a02000 	mov	r2, #0
   103c4:	e5832004 	str	r2, [r3, #4]
   103c8:	eaffffe6 	b	10368 <CPtrList::Remove(TPtrListElement*)+0xd0>
   103cc:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   103d0:	e3401001 	movt	r1, #1
   103d4:	e3030a48 	movw	r0, #14920	; 0x3a48
   103d8:	e3400001 	movt	r0, #1
   103dc:	e3a0208f 	mov	r2, #143	; 0x8f
   103e0:	ebfff04a 	bl	c510 <assertion_failed>
   103e4:	eaffffaf 	b	102a8 <CPtrList::Remove(TPtrListElement*)+0x10>
   103e8:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   103ec:	e3401001 	movt	r1, #1
   103f0:	e3030b60 	movw	r0, #15200	; 0x3b60
   103f4:	e3400001 	movt	r0, #1
   103f8:	e3a0209e 	mov	r2, #158	; 0x9e
   103fc:	ebfff043 	bl	c510 <assertion_failed>
   10400:	e5943004 	ldr	r3, [r4, #4]
   10404:	eaffffb8 	b	102ec <CPtrList::Remove(TPtrListElement*)+0x54>

00010408 <CPtrList::Find(void*)>:
   10408:	e92d4070 	push	{r4, r5, r6, lr}
   1040c:	e5904000 	ldr	r4, [r0]
   10410:	e3540000 	cmp	r4, #0
   10414:	13046d43 	movwne	r6, #19779	; 0x4d43
   10418:	11a05001 	movne	r5, r1
   1041c:	1345604c 	movtne	r6, #20556	; 0x504c
   10420:	1a000003 	bne	10434 <CPtrList::Find(void*)+0x2c>
   10424:	ea000010 	b	1046c <CPtrList::Find(void*)+0x64>
   10428:	e5944008 	ldr	r4, [r4, #8]
   1042c:	e3540000 	cmp	r4, #0
   10430:	0a00000d 	beq	1046c <CPtrList::Find(void*)+0x64>
   10434:	e5943000 	ldr	r3, [r4]
   10438:	e3031a2c 	movw	r1, #14892	; 0x3a2c
   1043c:	e3401001 	movt	r1, #1
   10440:	e1530006 	cmp	r3, r6
   10444:	e3030a58 	movw	r0, #14936	; 0x3a58
   10448:	e3400001 	movt	r0, #1
   1044c:	e3a020b3 	mov	r2, #179	; 0xb3
   10450:	0a000000 	beq	10458 <CPtrList::Find(void*)+0x50>
   10454:	ebfff02d 	bl	c510 <assertion_failed>
   10458:	e594300c 	ldr	r3, [r4, #12]
   1045c:	e1530005 	cmp	r3, r5
   10460:	1afffff0 	bne	10428 <CPtrList::Find(void*)+0x20>
   10464:	e1a00004 	mov	r0, r4
   10468:	e8bd8070 	pop	{r4, r5, r6, pc}
   1046c:	e3a00000 	mov	r0, #0
   10470:	e8bd8070 	pop	{r4, r5, r6, pc}

00010474 <mem_init>:
   10474:	e0801001 	add	r1, r0, r1
   10478:	e30420e8 	movw	r2, #16616	; 0x40e8
   1047c:	e3402001 	movt	r2, #1
   10480:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   10484:	e3500605 	cmp	r0, #5242880	; 0x500000
   10488:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   1048c:	33a00605 	movcc	r0, #5242880	; 0x500000
   10490:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   10494:	e582100c 	str	r1, [r2, #12]
   10498:	e3c3300f 	bic	r3, r3, #15
   1049c:	e2411501 	sub	r1, r1, #4194304	; 0x400000
   104a0:	e5820000 	str	r0, [r2]
   104a4:	e982000a 	stmib	r2, {r1, r3}
   104a8:	e12fff1e 	bx	lr

000104ac <mem_get_size>:
   104ac:	e30430e8 	movw	r3, #16616	; 0x40e8
   104b0:	e3403001 	movt	r3, #1
   104b4:	e8930003 	ldm	r3, {r0, r1}
   104b8:	e593200c 	ldr	r2, [r3, #12]
   104bc:	e5933008 	ldr	r3, [r3, #8]
   104c0:	e0600001 	rsb	r0, r0, r1
   104c4:	e0633002 	rsb	r3, r3, r2
   104c8:	e0800003 	add	r0, r0, r3
   104cc:	e12fff1e 	bx	lr

000104d0 <malloc>:
   104d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   104d4:	e30470e8 	movw	r7, #16616	; 0x40e8
   104d8:	e3407001 	movt	r7, #1
   104dc:	e1a05000 	mov	r5, r0
   104e0:	e5973000 	ldr	r3, [r7]
   104e4:	e3530000 	cmp	r3, #0
   104e8:	0a000047 	beq	1060c <malloc+0x13c>
   104ec:	e3034fd0 	movw	r4, #16336	; 0x3fd0
   104f0:	e3404001 	movt	r4, #1
   104f4:	e30400f8 	movw	r0, #16632	; 0x40f8
   104f8:	e3400001 	movt	r0, #1
   104fc:	ebfffde1 	bl	fc88 <CSpinLock::Acquire()>
   10500:	e5943000 	ldr	r3, [r4]
   10504:	e3530000 	cmp	r3, #0
   10508:	0a000007 	beq	1052c <malloc+0x5c>
   1050c:	e1550003 	cmp	r5, r3
   10510:	8a000002 	bhi	10520 <malloc+0x50>
   10514:	ea000016 	b	10574 <malloc+0xa4>
   10518:	e1530005 	cmp	r3, r5
   1051c:	2a000014 	bcs	10574 <malloc+0xa4>
   10520:	e5b43008 	ldr	r3, [r4, #8]!
   10524:	e3530000 	cmp	r3, #0
   10528:	1afffffa 	bne	10518 <malloc+0x48>
   1052c:	e5976000 	ldr	r6, [r7]
   10530:	e285301f 	add	r3, r5, #31
   10534:	e3c3300f 	bic	r3, r3, #15
   10538:	e5972004 	ldr	r2, [r7, #4]
   1053c:	e0863003 	add	r3, r6, r3
   10540:	e5873000 	str	r3, [r7]
   10544:	e1530002 	cmp	r3, r2
   10548:	8a000036 	bhi	10628 <malloc+0x158>
   1054c:	e3a02043 	mov	r2, #67	; 0x43
   10550:	e3a0304d 	mov	r3, #77	; 0x4d
   10554:	e5c62000 	strb	r2, [r6]
   10558:	e3a0204c 	mov	r2, #76	; 0x4c
   1055c:	e5c63001 	strb	r3, [r6, #1]
   10560:	e3a03042 	mov	r3, #66	; 0x42
   10564:	e5865004 	str	r5, [r6, #4]
   10568:	e5c62002 	strb	r2, [r6, #2]
   1056c:	e5c63003 	strb	r3, [r6, #3]
   10570:	ea000010 	b	105b8 <malloc+0xe8>
   10574:	e5946004 	ldr	r6, [r4, #4]
   10578:	e3560000 	cmp	r6, #0
   1057c:	01a05003 	moveq	r5, r3
   10580:	0affffe9 	beq	1052c <malloc+0x5c>
   10584:	e5962000 	ldr	r2, [r6]
   10588:	e3043d43 	movw	r3, #19779	; 0x4d43
   1058c:	e344324c 	movt	r3, #16972	; 0x424c
   10590:	e1520003 	cmp	r2, r3
   10594:	0a000005 	beq	105b0 <malloc+0xe0>
   10598:	e3031ba4 	movw	r1, #15268	; 0x3ba4
   1059c:	e3401001 	movt	r1, #1
   105a0:	e3030bc4 	movw	r0, #15300	; 0x3bc4
   105a4:	e3400001 	movt	r0, #1
   105a8:	e3a02089 	mov	r2, #137	; 0x89
   105ac:	ebffefd7 	bl	c510 <assertion_failed>
   105b0:	e5963008 	ldr	r3, [r6, #8]
   105b4:	e5843004 	str	r3, [r4, #4]
   105b8:	e30400f8 	movw	r0, #16632	; 0x40f8
   105bc:	e3400001 	movt	r0, #1
   105c0:	e2864010 	add	r4, r6, #16
   105c4:	ebfffdcb 	bl	fcf8 <CSpinLock::Release()>
   105c8:	e314000f 	tst	r4, #15
   105cc:	e3a03000 	mov	r3, #0
   105d0:	e5c63008 	strb	r3, [r6, #8]
   105d4:	e5c63009 	strb	r3, [r6, #9]
   105d8:	e5c6300a 	strb	r3, [r6, #10]
   105dc:	e5c6300b 	strb	r3, [r6, #11]
   105e0:	1a000001 	bne	105ec <malloc+0x11c>
   105e4:	e1a00004 	mov	r0, r4
   105e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   105ec:	e3a020a1 	mov	r2, #161	; 0xa1
   105f0:	e3031ba4 	movw	r1, #15268	; 0x3ba4
   105f4:	e3401001 	movt	r1, #1
   105f8:	e3030be8 	movw	r0, #15336	; 0x3be8
   105fc:	e3400001 	movt	r0, #1
   10600:	ebffefc2 	bl	c510 <assertion_failed>
   10604:	e1a00004 	mov	r0, r4
   10608:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1060c:	e3031ba4 	movw	r1, #15268	; 0x3ba4
   10610:	e3401001 	movt	r1, #1
   10614:	e3030bb0 	movw	r0, #15280	; 0x3bb0
   10618:	e3400001 	movt	r0, #1
   1061c:	e3a0206f 	mov	r2, #111	; 0x6f
   10620:	ebffefba 	bl	c510 <assertion_failed>
   10624:	eaffffb0 	b	104ec <malloc+0x1c>
   10628:	e30400f8 	movw	r0, #16632	; 0x40f8
   1062c:	e3400001 	movt	r0, #1
   10630:	ebfffdb0 	bl	fcf8 <CSpinLock::Release()>
   10634:	e3a00000 	mov	r0, #0
   10638:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001063c <free>:
   1063c:	e3500000 	cmp	r0, #0
   10640:	012fff1e 	bxeq	lr
   10644:	e92d4070 	push	{r4, r5, r6, lr}
   10648:	e1a05000 	mov	r5, r0
   1064c:	e3043d43 	movw	r3, #19779	; 0x4d43
   10650:	e344324c 	movt	r3, #16972	; 0x424c
   10654:	e5352010 	ldr	r2, [r5, #-16]!
   10658:	e1520003 	cmp	r2, r3
   1065c:	0a000005 	beq	10678 <free+0x3c>
   10660:	e3031ba4 	movw	r1, #15268	; 0x3ba4
   10664:	e3401001 	movt	r1, #1
   10668:	e3030bc4 	movw	r0, #15300	; 0x3bc4
   1066c:	e3400001 	movt	r0, #1
   10670:	e3a020ae 	mov	r2, #174	; 0xae
   10674:	ebffefa5 	bl	c510 <assertion_failed>
   10678:	e3034fd0 	movw	r4, #16336	; 0x3fd0
   1067c:	e3404001 	movt	r4, #1
   10680:	e5943000 	ldr	r3, [r4]
   10684:	e3530000 	cmp	r3, #0
   10688:	08bd8070 	popeq	{r4, r5, r6, pc}
   1068c:	e5952004 	ldr	r2, [r5, #4]
   10690:	e1520003 	cmp	r2, r3
   10694:	1a000002 	bne	106a4 <free+0x68>
   10698:	ea000005 	b	106b4 <free+0x78>
   1069c:	e1530002 	cmp	r3, r2
   106a0:	0a000003 	beq	106b4 <free+0x78>
   106a4:	e5b43008 	ldr	r3, [r4, #8]!
   106a8:	e3530000 	cmp	r3, #0
   106ac:	1afffffa 	bne	1069c <free+0x60>
   106b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   106b4:	e30400f8 	movw	r0, #16632	; 0x40f8
   106b8:	e3400001 	movt	r0, #1
   106bc:	ebfffd71 	bl	fc88 <CSpinLock::Acquire()>
   106c0:	e5943004 	ldr	r3, [r4, #4]
   106c4:	e5853008 	str	r3, [r5, #8]
   106c8:	e30400f8 	movw	r0, #16632	; 0x40f8
   106cc:	e3400001 	movt	r0, #1
   106d0:	e5845004 	str	r5, [r4, #4]
   106d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   106d8:	eafffd86 	b	fcf8 <CSpinLock::Release()>

000106dc <palloc>:
   106dc:	e92d4070 	push	{r4, r5, r6, lr}
   106e0:	e30450e8 	movw	r5, #16616	; 0x40e8
   106e4:	e3405001 	movt	r5, #1
   106e8:	e5953008 	ldr	r3, [r5, #8]
   106ec:	e3530000 	cmp	r3, #0
   106f0:	0a000024 	beq	10788 <palloc+0xac>
   106f4:	e30460e8 	movw	r6, #16616	; 0x40e8
   106f8:	e3406001 	movt	r6, #1
   106fc:	e2860028 	add	r0, r6, #40	; 0x28
   10700:	ebfffd60 	bl	fc88 <CSpinLock::Acquire()>
   10704:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   10708:	e3540000 	cmp	r4, #0
   1070c:	0a000013 	beq	10760 <palloc+0x84>
   10710:	e5942000 	ldr	r2, [r4]
   10714:	e3043d43 	movw	r3, #19779	; 0x4d43
   10718:	e3453047 	movt	r3, #20551	; 0x5047
   1071c:	e1520003 	cmp	r2, r3
   10720:	0a000005 	beq	1073c <palloc+0x60>
   10724:	e3031ba4 	movw	r1, #15268	; 0x3ba4
   10728:	e3401001 	movt	r1, #1
   1072c:	e3030c28 	movw	r0, #15400	; 0x3c28
   10730:	e3400001 	movt	r0, #1
   10734:	e3a020d4 	mov	r2, #212	; 0xd4
   10738:	ebffef74 	bl	c510 <assertion_failed>
   1073c:	e5942004 	ldr	r2, [r4, #4]
   10740:	e3a03000 	mov	r3, #0
   10744:	e5852040 	str	r2, [r5, #64]	; 0x40
   10748:	e5843000 	str	r3, [r4]
   1074c:	e3040110 	movw	r0, #16656	; 0x4110
   10750:	e3400001 	movt	r0, #1
   10754:	ebfffd67 	bl	fcf8 <CSpinLock::Release()>
   10758:	e1a00004 	mov	r0, r4
   1075c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10760:	e5964008 	ldr	r4, [r6, #8]
   10764:	e596200c 	ldr	r2, [r6, #12]
   10768:	e2843a01 	add	r3, r4, #4096	; 0x1000
   1076c:	e5863008 	str	r3, [r6, #8]
   10770:	e1530002 	cmp	r3, r2
   10774:	9afffff4 	bls	1074c <palloc+0x70>
   10778:	e2860028 	add	r0, r6, #40	; 0x28
   1077c:	ebfffd5d 	bl	fcf8 <CSpinLock::Release()>
   10780:	e3a00000 	mov	r0, #0
   10784:	e8bd8070 	pop	{r4, r5, r6, pc}
   10788:	e3031ba4 	movw	r1, #15268	; 0x3ba4
   1078c:	e3401001 	movt	r1, #1
   10790:	e3030c14 	movw	r0, #15380	; 0x3c14
   10794:	e3400001 	movt	r0, #1
   10798:	e3a020c6 	mov	r2, #198	; 0xc6
   1079c:	ebffef5b 	bl	c510 <assertion_failed>
   107a0:	eaffffd3 	b	106f4 <palloc+0x18>

000107a4 <pfree>:
   107a4:	e3500000 	cmp	r0, #0
   107a8:	012fff1e 	bxeq	lr
   107ac:	e92d4070 	push	{r4, r5, r6, lr}
   107b0:	e30440e8 	movw	r4, #16616	; 0x40e8
   107b4:	e3404001 	movt	r4, #1
   107b8:	e1a05000 	mov	r5, r0
   107bc:	e2840028 	add	r0, r4, #40	; 0x28
   107c0:	ebfffd30 	bl	fc88 <CSpinLock::Acquire()>
   107c4:	e2840028 	add	r0, r4, #40	; 0x28
   107c8:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   107cc:	e3043d43 	movw	r3, #19779	; 0x4d43
   107d0:	e3453047 	movt	r3, #20551	; 0x5047
   107d4:	e5853000 	str	r3, [r5]
   107d8:	e5852004 	str	r2, [r5, #4]
   107dc:	e5845040 	str	r5, [r4, #64]	; 0x40
   107e0:	e8bd4070 	pop	{r4, r5, r6, lr}
   107e4:	eafffd43 	b	fcf8 <CSpinLock::Release()>

000107e8 <_GLOBAL__sub_I_mem_init>:
   107e8:	e30430e8 	movw	r3, #16616	; 0x40e8
   107ec:	e3403001 	movt	r3, #1
   107f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   107f4:	e2837010 	add	r7, r3, #16
   107f8:	e3a01001 	mov	r1, #1
   107fc:	e1a00007 	mov	r0, r7
   10800:	e30460a4 	movw	r6, #16548	; 0x40a4
   10804:	e3406001 	movt	r6, #1
   10808:	e30f5c54 	movw	r5, #64596	; 0xfc54
   1080c:	e3405000 	movt	r5, #0
   10810:	e2834028 	add	r4, r3, #40	; 0x28
   10814:	ebfffcff 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
   10818:	e1a02006 	mov	r2, r6
   1081c:	e1a01005 	mov	r1, r5
   10820:	e1a00007 	mov	r0, r7
   10824:	ebffe4bd 	bl	9b20 <__aeabi_atexit>
   10828:	e1a00004 	mov	r0, r4
   1082c:	e3a01001 	mov	r1, #1
   10830:	ebfffcf8 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
   10834:	e1a02006 	mov	r2, r6
   10838:	e1a01005 	mov	r1, r5
   1083c:	e1a00004 	mov	r0, r4
   10840:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   10844:	eaffe4b5 	b	9b20 <__aeabi_atexit>

00010848 <CBcmMailBox::CBcmMailBox(unsigned int)>:
   10848:	e92d4010 	push	{r4, lr}
   1084c:	e1a04000 	mov	r4, r0
   10850:	e4801004 	str	r1, [r0], #4
   10854:	e3a01000 	mov	r1, #0
   10858:	ebfffcee 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
   1085c:	e1a00004 	mov	r0, r4
   10860:	e8bd8010 	pop	{r4, pc}

00010864 <CBcmMailBox::~CBcmMailBox()>:
   10864:	e92d4010 	push	{r4, lr}
   10868:	e1a04000 	mov	r4, r0
   1086c:	e2800004 	add	r0, r0, #4
   10870:	ebfffcf7 	bl	fc54 <CSpinLock::~CSpinLock()>
   10874:	e1a00004 	mov	r0, r4
   10878:	e8bd8010 	pop	{r4, pc}

0001087c <CBcmMailBox::Flush()>:
   1087c:	e92d4010 	push	{r4, lr}
   10880:	e3a04a0b 	mov	r4, #45056	; 0xb000
   10884:	e3434f00 	movt	r4, #16128	; 0x3f00
   10888:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1088c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10890:	18bd8010 	popne	{r4, pc}
   10894:	e3a00014 	mov	r0, #20
   10898:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   1089c:	ebffe75e 	bl	a61c <CTimer::SimpleMsDelay(unsigned int)>
   108a0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   108a4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   108a8:	0afffff9 	beq	10894 <CBcmMailBox::Flush()+0x18>
   108ac:	e8bd8010 	pop	{r4, pc}

000108b0 <CBcmMailBox::Read()>:
   108b0:	e3a02a0b 	mov	r2, #45056	; 0xb000
   108b4:	e3432f00 	movt	r2, #16128	; 0x3f00
   108b8:	e590c000 	ldr	ip, [r0]
   108bc:	e1a01002 	mov	r1, r2
   108c0:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   108c4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   108c8:	1afffffc 	bne	108c0 <CBcmMailBox::Read()+0x10>
   108cc:	e5910880 	ldr	r0, [r1, #2176]	; 0x880
   108d0:	e200300f 	and	r3, r0, #15
   108d4:	e15c0003 	cmp	ip, r3
   108d8:	1afffff8 	bne	108c0 <CBcmMailBox::Read()+0x10>
   108dc:	e3c0000f 	bic	r0, r0, #15
   108e0:	e12fff1e 	bx	lr

000108e4 <CBcmMailBox::Write(unsigned int)>:
   108e4:	e92d4070 	push	{r4, r5, r6, lr}
   108e8:	e3a02a0b 	mov	r2, #45056	; 0xb000
   108ec:	e3432f00 	movt	r2, #16128	; 0x3f00
   108f0:	e1a05000 	mov	r5, r0
   108f4:	e1a04001 	mov	r4, r1
   108f8:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   108fc:	e3530000 	cmp	r3, #0
   10900:	bafffffc 	blt	108f8 <CBcmMailBox::Write(unsigned int)+0x14>
   10904:	e314000f 	tst	r4, #15
   10908:	0a000005 	beq	10924 <CBcmMailBox::Write(unsigned int)+0x40>
   1090c:	e3031c4c 	movw	r1, #15436	; 0x3c4c
   10910:	e3401001 	movt	r1, #1
   10914:	e3030c5c 	movw	r0, #15452	; 0x3c5c
   10918:	e3400001 	movt	r0, #1
   1091c:	e3a0205a 	mov	r2, #90	; 0x5a
   10920:	ebffeefa 	bl	c510 <assertion_failed>
   10924:	e3a03a0b 	mov	r3, #45056	; 0xb000
   10928:	e3433f00 	movt	r3, #16128	; 0x3f00
   1092c:	e5951000 	ldr	r1, [r5]
   10930:	e1841001 	orr	r1, r4, r1
   10934:	e58318a0 	str	r1, [r3, #2208]	; 0x8a0
   10938:	e8bd8070 	pop	{r4, r5, r6, pc}

0001093c <CBcmMailBox::WriteRead(unsigned int)>:
   1093c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10940:	e3a04a0b 	mov	r4, #45056	; 0xb000
   10944:	e3434f00 	movt	r4, #16128	; 0x3f00
   10948:	e2805004 	add	r5, r0, #4
   1094c:	e1a06000 	mov	r6, r0
   10950:	e1a00005 	mov	r0, r5
   10954:	e1a07001 	mov	r7, r1
   10958:	ebfffcca 	bl	fc88 <CSpinLock::Acquire()>
   1095c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10960:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10964:	1a000005 	bne	10980 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   10968:	e3a00014 	mov	r0, #20
   1096c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   10970:	ebffe729 	bl	a61c <CTimer::SimpleMsDelay(unsigned int)>
   10974:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10978:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1097c:	0afffff9 	beq	10968 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   10980:	e1a01007 	mov	r1, r7
   10984:	e1a00006 	mov	r0, r6
   10988:	ebffffd5 	bl	108e4 <CBcmMailBox::Write(unsigned int)>
   1098c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   10990:	e3432f00 	movt	r2, #16128	; 0x3f00
   10994:	e5960000 	ldr	r0, [r6]
   10998:	e1a01002 	mov	r1, r2
   1099c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   109a0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   109a4:	1afffffc 	bne	1099c <CBcmMailBox::WriteRead(unsigned int)+0x60>
   109a8:	e5914880 	ldr	r4, [r1, #2176]	; 0x880
   109ac:	e204300f 	and	r3, r4, #15
   109b0:	e1500003 	cmp	r0, r3
   109b4:	1afffff8 	bne	1099c <CBcmMailBox::WriteRead(unsigned int)+0x60>
   109b8:	e1a00005 	mov	r0, r5
   109bc:	ebfffccd 	bl	fcf8 <CSpinLock::Release()>
   109c0:	e3c4000f 	bic	r0, r4, #15
   109c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000109c8 <__cxa_pure_virtual>:
   109c8:	e3031c70 	movw	r1, #15472	; 0x3c70
   109cc:	e3401001 	movt	r1, #1
   109d0:	e30305a8 	movw	r0, #13736	; 0x35a8
   109d4:	e3400001 	movt	r0, #1
   109d8:	e3a02018 	mov	r2, #24
   109dc:	eaffeecb 	b	c510 <assertion_failed>

000109e0 <EnterCritical>:
   109e0:	e2403001 	sub	r3, r0, #1
   109e4:	e3530001 	cmp	r3, #1
   109e8:	e92d4070 	push	{r4, r5, r6, lr}
   109ec:	e1a04000 	mov	r4, r0
   109f0:	9a000005 	bls	10a0c <EnterCritical+0x2c>
   109f4:	e3031c80 	movw	r1, #15488	; 0x3c80
   109f8:	e3401001 	movt	r1, #1
   109fc:	e3030c90 	movw	r0, #15504	; 0x3c90
   10a00:	e3400001 	movt	r0, #1
   10a04:	e3a02022 	mov	r2, #34	; 0x22
   10a08:	ebffeec0 	bl	c510 <assertion_failed>
   10a0c:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   10a10:	e2055003 	and	r5, r5, #3
   10a14:	e10f6000 	mrs	r6, CPSR
   10a18:	e3540002 	cmp	r4, #2
   10a1c:	0a000001 	beq	10a28 <EnterCritical+0x48>
   10a20:	e3160040 	tst	r6, #64	; 0x40
   10a24:	1a000019 	bne	10a90 <EnterCritical+0xb0>
   10a28:	f10c0080 	cpsid	i
   10a2c:	e3540002 	cmp	r4, #2
   10a30:	0a000014 	beq	10a88 <EnterCritical+0xa8>
   10a34:	e304412c 	movw	r4, #16684	; 0x412c
   10a38:	e3404001 	movt	r4, #1
   10a3c:	e7943105 	ldr	r3, [r4, r5, lsl #2]
   10a40:	e3530013 	cmp	r3, #19
   10a44:	9a000005 	bls	10a60 <EnterCritical+0x80>
   10a48:	e3031c80 	movw	r1, #15488	; 0x3c80
   10a4c:	e3401001 	movt	r1, #1
   10a50:	e3030cf8 	movw	r0, #15608	; 0x3cf8
   10a54:	e3400001 	movt	r0, #1
   10a58:	e3a02034 	mov	r2, #52	; 0x34
   10a5c:	ebffeeab 	bl	c510 <assertion_failed>
   10a60:	e7942105 	ldr	r2, [r4, r5, lsl #2]
   10a64:	e1a03205 	lsl	r3, r5, #4
   10a68:	e0833105 	add	r3, r3, r5, lsl #2
   10a6c:	e0833002 	add	r3, r3, r2
   10a70:	e2822001 	add	r2, r2, #1
   10a74:	e7842105 	str	r2, [r4, r5, lsl #2]
   10a78:	e0844103 	add	r4, r4, r3, lsl #2
   10a7c:	e5846010 	str	r6, [r4, #16]
   10a80:	f57ff05f 	dmb	sy
   10a84:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a88:	f10c0040 	cpsid	f
   10a8c:	eaffffe8 	b	10a34 <EnterCritical+0x54>
   10a90:	e3031c80 	movw	r1, #15488	; 0x3c80
   10a94:	e3401001 	movt	r1, #1
   10a98:	e3030cc8 	movw	r0, #15560	; 0x3cc8
   10a9c:	e3400001 	movt	r0, #1
   10aa0:	e3a0202c 	mov	r2, #44	; 0x2c
   10aa4:	ebffee99 	bl	c510 <assertion_failed>
   10aa8:	eaffffde 	b	10a28 <EnterCritical+0x48>

00010aac <LeaveCritical>:
   10aac:	e92d4070 	push	{r4, r5, r6, lr}
   10ab0:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   10ab4:	e2055003 	and	r5, r5, #3
   10ab8:	f57ff05f 	dmb	sy
   10abc:	e304412c 	movw	r4, #16684	; 0x412c
   10ac0:	e3404001 	movt	r4, #1
   10ac4:	e7943105 	ldr	r3, [r4, r5, lsl #2]
   10ac8:	e3530000 	cmp	r3, #0
   10acc:	1a000005 	bne	10ae8 <LeaveCritical+0x3c>
   10ad0:	e3031c80 	movw	r1, #15488	; 0x3c80
   10ad4:	e3401001 	movt	r1, #1
   10ad8:	e3030d28 	movw	r0, #15656	; 0x3d28
   10adc:	e3400001 	movt	r0, #1
   10ae0:	e3a02042 	mov	r2, #66	; 0x42
   10ae4:	ebffee89 	bl	c510 <assertion_failed>
   10ae8:	e7943105 	ldr	r3, [r4, r5, lsl #2]
   10aec:	e1a02205 	lsl	r2, r5, #4
   10af0:	e0822105 	add	r2, r2, r5, lsl #2
   10af4:	e2433001 	sub	r3, r3, #1
   10af8:	e7843105 	str	r3, [r4, r5, lsl #2]
   10afc:	e0823003 	add	r3, r2, r3
   10b00:	e0844103 	add	r4, r4, r3, lsl #2
   10b04:	e5943010 	ldr	r3, [r4, #16]
   10b08:	e121f003 	msr	CPSR_c, r3
   10b0c:	e8bd8070 	pop	{r4, r5, r6, pc}

00010b10 <SyncDataAndInstructionCache>:
   10b10:	e92d4010 	push	{r4, lr}
   10b14:	ebfffcde 	bl	fe94 <CleanDataCache>
   10b18:	e3a03000 	mov	r3, #0
   10b1c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   10b20:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   10b24:	f57ff04f 	dsb	sy
   10b28:	f57ff06f 	isb	sy
   10b2c:	e8bd8010 	pop	{r4, pc}

00010b30 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   10b30:	e92d4010 	push	{r4, lr}
   10b34:	e1a04000 	mov	r4, r0
   10b38:	e3a01000 	mov	r1, #0
   10b3c:	e24dd028 	sub	sp, sp, #40	; 0x28
   10b40:	e3a02c01 	mov	r2, #256	; 0x100
   10b44:	e28d000c 	add	r0, sp, #12
   10b48:	e5943020 	ldr	r3, [r4, #32]
   10b4c:	e583100c 	str	r1, [r3, #12]
   10b50:	e5832010 	str	r2, [r3, #16]
   10b54:	ebffdfcb 	bl	8a88 <CBcmPropertyTags::CBcmPropertyTags()>
   10b58:	e5942020 	ldr	r2, [r4, #32]
   10b5c:	e3003408 	movw	r3, #1032	; 0x408
   10b60:	e28d000c 	add	r0, sp, #12
   10b64:	e58d3000 	str	r3, [sp]
   10b68:	e308100b 	movw	r1, #32779	; 0x800b
   10b6c:	e3401004 	movt	r1, #4
   10b70:	e3003414 	movw	r3, #1044	; 0x414
   10b74:	ebffe00b 	bl	8ba8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10b78:	e3500000 	cmp	r0, #0
   10b7c:	e28d000c 	add	r0, sp, #12
   10b80:	0a000003 	beq	10b94 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
   10b84:	e5943020 	ldr	r3, [r4, #32]
   10b88:	e593300c 	ldr	r3, [r3, #12]
   10b8c:	e3530000 	cmp	r3, #0
   10b90:	0a000003 	beq	10ba4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
   10b94:	ebffdfc1 	bl	8aa0 <CBcmPropertyTags::~CBcmPropertyTags()>
   10b98:	e3a00000 	mov	r0, #0
   10b9c:	e28dd028 	add	sp, sp, #40	; 0x28
   10ba0:	e8bd8010 	pop	{r4, pc}
   10ba4:	ebffdfbd 	bl	8aa0 <CBcmPropertyTags::~CBcmPropertyTags()>
   10ba8:	e3a00001 	mov	r0, #1
   10bac:	e28dd028 	add	sp, sp, #40	; 0x28
   10bb0:	e8bd8010 	pop	{r4, pc}

00010bb4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   10bb4:	e92d4030 	push	{r4, r5, lr}
   10bb8:	e1a04000 	mov	r4, r0
   10bbc:	e3510000 	cmp	r1, #0
   10bc0:	13520000 	cmpne	r2, #0
   10bc4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   10bc8:	e3a05000 	mov	r5, #0
   10bcc:	e8840006 	stm	r4, {r1, r2}
   10bd0:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   10bd4:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
   10bd8:	e5843010 	str	r3, [r4, #16]
   10bdc:	e584c00c 	str	ip, [r4, #12]
   10be0:	e5840008 	str	r0, [r4, #8]
   10be4:	e5845014 	str	r5, [r4, #20]
   10be8:	e5845018 	str	r5, [r4, #24]
   10bec:	e584501c 	str	r5, [r4, #28]
   10bf0:	e5845020 	str	r5, [r4, #32]
   10bf4:	1a000011 	bne	10c40 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   10bf8:	e28d001c 	add	r0, sp, #28
   10bfc:	ebffdfa1 	bl	8a88 <CBcmPropertyTags::CBcmPropertyTags()>
   10c00:	e58d5000 	str	r5, [sp]
   10c04:	e28d001c 	add	r0, sp, #28
   10c08:	e3a01003 	mov	r1, #3
   10c0c:	e3401004 	movt	r1, #4
   10c10:	e3a03014 	mov	r3, #20
   10c14:	e28d2008 	add	r2, sp, #8
   10c18:	ebffdfe2 	bl	8ba8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10c1c:	e1500005 	cmp	r0, r5
   10c20:	1a000028 	bne	10cc8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
   10c24:	e3a02d0a 	mov	r2, #640	; 0x280
   10c28:	e3a03e1e 	mov	r3, #480	; 0x1e0
   10c2c:	e884000c 	stm	r4, {r2, r3}
   10c30:	e28d001c 	add	r0, sp, #28
   10c34:	ebffdf99 	bl	8aa0 <CBcmPropertyTags::~CBcmPropertyTags()>
   10c38:	e5940008 	ldr	r0, [r4, #8]
   10c3c:	e5943010 	ldr	r3, [r4, #16]
   10c40:	e3500000 	cmp	r0, #0
   10c44:	0a00001b 	beq	10cb8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   10c48:	e594200c 	ldr	r2, [r4, #12]
   10c4c:	e3520000 	cmp	r2, #0
   10c50:	0a000018 	beq	10cb8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   10c54:	e3530008 	cmp	r3, #8
   10c58:	8a000008 	bhi	10c80 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xcc>
   10c5c:	e3000414 	movw	r0, #1044	; 0x414
   10c60:	ebffe3a9 	bl	9b0c <operator new[](unsigned int)>
   10c64:	e3a02b01 	mov	r2, #1024	; 0x400
   10c68:	e1a03000 	mov	r3, r0
   10c6c:	e3a01000 	mov	r1, #0
   10c70:	e5843020 	str	r3, [r4, #32]
   10c74:	e2800014 	add	r0, r0, #20
   10c78:	ebffe6c1 	bl	a784 <memset>
   10c7c:	e5943010 	ldr	r3, [r4, #16]
   10c80:	e3042008 	movw	r2, #16392	; 0x4008
   10c84:	e3402001 	movt	r2, #1
   10c88:	e5945000 	ldr	r5, [r4]
   10c8c:	e1a00004 	mov	r0, r4
   10c90:	e594e004 	ldr	lr, [r4, #4]
   10c94:	e594c008 	ldr	ip, [r4, #8]
   10c98:	e594100c 	ldr	r1, [r4, #12]
   10c9c:	e5821024 	str	r1, [r2, #36]	; 0x24
   10ca0:	e582500c 	str	r5, [r2, #12]
   10ca4:	e582e010 	str	lr, [r2, #16]
   10ca8:	e582c020 	str	ip, [r2, #32]
   10cac:	e5823034 	str	r3, [r2, #52]	; 0x34
   10cb0:	e28dd03c 	add	sp, sp, #60	; 0x3c
   10cb4:	e8bd8030 	pop	{r4, r5, pc}
   10cb8:	e8940006 	ldm	r4, {r1, r2}
   10cbc:	e5841008 	str	r1, [r4, #8]
   10cc0:	e584200c 	str	r2, [r4, #12]
   10cc4:	eaffffe2 	b	10c54 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   10cc8:	e59d2014 	ldr	r2, [sp, #20]
   10ccc:	e59d3018 	ldr	r3, [sp, #24]
   10cd0:	e2421d0a 	sub	r1, r2, #640	; 0x280
   10cd4:	e5842000 	str	r2, [r4]
   10cd8:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
   10cdc:	e5843004 	str	r3, [r4, #4]
   10ce0:	e3520f96 	cmp	r2, #600	; 0x258
   10ce4:	93510c05 	cmpls	r1, #1280	; 0x500
   10ce8:	9affffd0 	bls	10c30 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   10cec:	eaffffcc 	b	10c24 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

00010cf0 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   10cf0:	e92d4010 	push	{r4, lr}
   10cf4:	e3a01014 	mov	r1, #20
   10cf8:	e1a04000 	mov	r4, r0
   10cfc:	e5900020 	ldr	r0, [r0, #32]
   10d00:	ebffe384 	bl	9b18 <operator delete(void*, unsigned int)>
   10d04:	e1a00004 	mov	r0, r4
   10d08:	e8bd8010 	pop	{r4, pc}

00010d0c <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   10d0c:	e5903010 	ldr	r3, [r0, #16]
   10d10:	e3530008 	cmp	r3, #8
   10d14:	812fff1e 	bxhi	lr
   10d18:	e5900020 	ldr	r0, [r0, #32]
   10d1c:	e1a03982 	lsl	r3, r2, #19
   10d20:	e1a0c5a2 	lsr	ip, r2, #11
   10d24:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   10d28:	e0801101 	add	r1, r0, r1, lsl #2
   10d2c:	e1a02282 	lsl	r2, r2, #5
   10d30:	e183318c 	orr	r3, r3, ip, lsl #3
   10d34:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   10d38:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   10d3c:	e1822003 	orr	r2, r2, r3
   10d40:	e5812014 	str	r2, [r1, #20]
   10d44:	e12fff1e 	bx	lr

00010d48 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   10d48:	e5903010 	ldr	r3, [r0, #16]
   10d4c:	e3530008 	cmp	r3, #8
   10d50:	95903020 	ldrls	r3, [r0, #32]
   10d54:	90831101 	addls	r1, r3, r1, lsl #2
   10d58:	95812014 	strls	r2, [r1, #20]
   10d5c:	e12fff1e 	bx	lr

00010d60 <CBcmFrameBuffer::Initialize()>:
   10d60:	e92d4070 	push	{r4, r5, r6, lr}
   10d64:	e1a05000 	mov	r5, r0
   10d68:	e3046008 	movw	r6, #16392	; 0x4008
   10d6c:	e3406001 	movt	r6, #1
   10d70:	e24dd020 	sub	sp, sp, #32
   10d74:	e28d0004 	add	r0, sp, #4
   10d78:	ebffdf42 	bl	8a88 <CBcmPropertyTags::CBcmPropertyTags()>
   10d7c:	e1a01006 	mov	r1, r6
   10d80:	e28d0004 	add	r0, sp, #4
   10d84:	e3a02070 	mov	r2, #112	; 0x70
   10d88:	ebffdf49 	bl	8ab4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   10d8c:	e2504000 	subs	r4, r0, #0
   10d90:	0a00001e 	beq	10e10 <CBcmFrameBuffer::Initialize()+0xb0>
   10d94:	e596400c 	ldr	r4, [r6, #12]
   10d98:	e3540000 	cmp	r4, #0
   10d9c:	0a00001b 	beq	10e10 <CBcmFrameBuffer::Initialize()+0xb0>
   10da0:	e5964010 	ldr	r4, [r6, #16]
   10da4:	e3540000 	cmp	r4, #0
   10da8:	0a000018 	beq	10e10 <CBcmFrameBuffer::Initialize()+0xb0>
   10dac:	e5964020 	ldr	r4, [r6, #32]
   10db0:	e3540000 	cmp	r4, #0
   10db4:	0a000015 	beq	10e10 <CBcmFrameBuffer::Initialize()+0xb0>
   10db8:	e5964024 	ldr	r4, [r6, #36]	; 0x24
   10dbc:	e3540000 	cmp	r4, #0
   10dc0:	0a000012 	beq	10e10 <CBcmFrameBuffer::Initialize()+0xb0>
   10dc4:	e5964034 	ldr	r4, [r6, #52]	; 0x34
   10dc8:	e3540000 	cmp	r4, #0
   10dcc:	0a00000f 	beq	10e10 <CBcmFrameBuffer::Initialize()+0xb0>
   10dd0:	e5964058 	ldr	r4, [r6, #88]	; 0x58
   10dd4:	e3540000 	cmp	r4, #0
   10dd8:	0a00000c 	beq	10e10 <CBcmFrameBuffer::Initialize()+0xb0>
   10ddc:	e5953010 	ldr	r3, [r5, #16]
   10de0:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   10de4:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
   10de8:	e3530008 	cmp	r3, #8
   10dec:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
   10df0:	e585301c 	str	r3, [r5, #28]
   10df4:	e5854014 	str	r4, [r5, #20]
   10df8:	83a04001 	movhi	r4, #1
   10dfc:	e5852018 	str	r2, [r5, #24]
   10e00:	8a000002 	bhi	10e10 <CBcmFrameBuffer::Initialize()+0xb0>
   10e04:	e1a00005 	mov	r0, r5
   10e08:	ebffff48 	bl	10b30 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   10e0c:	e1a04000 	mov	r4, r0
   10e10:	e28d0004 	add	r0, sp, #4
   10e14:	ebffdf21 	bl	8aa0 <CBcmPropertyTags::~CBcmPropertyTags()>
   10e18:	e1a00004 	mov	r0, r4
   10e1c:	e28dd020 	add	sp, sp, #32
   10e20:	e8bd8070 	pop	{r4, r5, r6, pc}

00010e24 <CBcmFrameBuffer::GetWidth() const>:
   10e24:	e5900000 	ldr	r0, [r0]
   10e28:	e12fff1e 	bx	lr

00010e2c <CBcmFrameBuffer::GetHeight() const>:
   10e2c:	e5900004 	ldr	r0, [r0, #4]
   10e30:	e12fff1e 	bx	lr

00010e34 <CBcmFrameBuffer::GetVirtWidth() const>:
   10e34:	e5900008 	ldr	r0, [r0, #8]
   10e38:	e12fff1e 	bx	lr

00010e3c <CBcmFrameBuffer::GetVirtHeight() const>:
   10e3c:	e590000c 	ldr	r0, [r0, #12]
   10e40:	e12fff1e 	bx	lr

00010e44 <CBcmFrameBuffer::GetPitch() const>:
   10e44:	e590001c 	ldr	r0, [r0, #28]
   10e48:	e12fff1e 	bx	lr

00010e4c <CBcmFrameBuffer::GetDepth() const>:
   10e4c:	e5900010 	ldr	r0, [r0, #16]
   10e50:	e12fff1e 	bx	lr

00010e54 <CBcmFrameBuffer::GetBuffer() const>:
   10e54:	e5900014 	ldr	r0, [r0, #20]
   10e58:	e12fff1e 	bx	lr

00010e5c <CBcmFrameBuffer::GetSize() const>:
   10e5c:	e5900018 	ldr	r0, [r0, #24]
   10e60:	e12fff1e 	bx	lr

00010e64 <CBcmFrameBuffer::UpdatePalette()>:
   10e64:	e5903010 	ldr	r3, [r0, #16]
   10e68:	e3530008 	cmp	r3, #8
   10e6c:	9a000001 	bls	10e78 <CBcmFrameBuffer::UpdatePalette()+0x14>
   10e70:	e3a00001 	mov	r0, #1
   10e74:	e12fff1e 	bx	lr
   10e78:	eaffff2c 	b	10b30 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00010e7c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   10e7c:	e92d4070 	push	{r4, r5, r6, lr}
   10e80:	e1a05001 	mov	r5, r1
   10e84:	e1a06002 	mov	r6, r2
   10e88:	e24dd038 	sub	sp, sp, #56	; 0x38
   10e8c:	e28d001c 	add	r0, sp, #28
   10e90:	ebffdefc 	bl	8a88 <CBcmPropertyTags::CBcmPropertyTags()>
   10e94:	e3a03008 	mov	r3, #8
   10e98:	e28d001c 	add	r0, sp, #28
   10e9c:	e58d3000 	str	r3, [sp]
   10ea0:	e3081009 	movw	r1, #32777	; 0x8009
   10ea4:	e3401004 	movt	r1, #4
   10ea8:	e3a03014 	mov	r3, #20
   10eac:	e28d2008 	add	r2, sp, #8
   10eb0:	e58d5014 	str	r5, [sp, #20]
   10eb4:	e58d6018 	str	r6, [sp, #24]
   10eb8:	ebffdf3a 	bl	8ba8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10ebc:	e2504000 	subs	r4, r0, #0
   10ec0:	0a000006 	beq	10ee0 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   10ec4:	e59d3014 	ldr	r3, [sp, #20]
   10ec8:	e1550003 	cmp	r5, r3
   10ecc:	13a04000 	movne	r4, #0
   10ed0:	059d4018 	ldreq	r4, [sp, #24]
   10ed4:	00664004 	rsbeq	r4, r6, r4
   10ed8:	016f4f14 	clzeq	r4, r4
   10edc:	01a042a4 	lsreq	r4, r4, #5
   10ee0:	e28d001c 	add	r0, sp, #28
   10ee4:	ebffdeed 	bl	8aa0 <CBcmPropertyTags::~CBcmPropertyTags()>
   10ee8:	e1a00004 	mov	r0, r4
   10eec:	e28dd038 	add	sp, sp, #56	; 0x38
   10ef0:	e8bd8070 	pop	{r4, r5, r6, pc}

00010ef4 <CDevice::~CDevice()>:
   10ef4:	e12fff1e 	bx	lr

00010ef8 <CDevice::Read(void*, unsigned int)>:
   10ef8:	e3e00000 	mvn	r0, #0
   10efc:	e12fff1e 	bx	lr

00010f00 <CDevice::Seek(unsigned long long)>:
   10f00:	e3e00000 	mvn	r0, #0
   10f04:	e3e01000 	mvn	r1, #0
   10f08:	e12fff1e 	bx	lr

00010f0c <CDevice::~CDevice()>:
   10f0c:	e92d4010 	push	{r4, lr}
   10f10:	e3a01004 	mov	r1, #4
   10f14:	e1a04000 	mov	r4, r0
   10f18:	ebffe2fe 	bl	9b18 <operator delete(void*, unsigned int)>
   10f1c:	e1a00004 	mov	r0, r4
   10f20:	e8bd8010 	pop	{r4, pc}

00010f24 <CDevice::CDevice()>:
   10f24:	e3033d4c 	movw	r3, #15692	; 0x3d4c
   10f28:	e3403001 	movt	r3, #1
   10f2c:	e5803000 	str	r3, [r0]
   10f30:	e12fff1e 	bx	lr

00010f34 <CTask::Run()>:
   10f34:	e3031d74 	movw	r1, #15732	; 0x3d74
   10f38:	e3401001 	movt	r1, #1
   10f3c:	e30305a8 	movw	r0, #13736	; 0x35a8
   10f40:	e3400001 	movt	r0, #1
   10f44:	e3a0203a 	mov	r2, #58	; 0x3a
   10f48:	eaffed70 	b	c510 <assertion_failed>

00010f4c <CTask::~CTask()>:
   10f4c:	e92d4070 	push	{r4, r5, r6, lr}
   10f50:	e1a05000 	mov	r5, r0
   10f54:	e1a04000 	mov	r4, r0
   10f58:	e3033d68 	movw	r3, #15720	; 0x3d68
   10f5c:	e3403001 	movt	r3, #1
   10f60:	e4853050 	str	r3, [r5], #80	; 0x50
   10f64:	e1a00005 	mov	r0, r5
   10f68:	ebfffb46 	bl	fc88 <CSpinLock::Acquire()>
   10f6c:	e5d43004 	ldrb	r3, [r4, #4]
   10f70:	e3530003 	cmp	r3, #3
   10f74:	0a000005 	beq	10f90 <CTask::~CTask()+0x44>
   10f78:	e3031d74 	movw	r1, #15732	; 0x3d74
   10f7c:	e3401001 	movt	r1, #1
   10f80:	e3030d80 	movw	r0, #15744	; 0x3d80
   10f84:	e3400001 	movt	r0, #1
   10f88:	e3a0202f 	mov	r2, #47	; 0x2f
   10f8c:	ebffed5f 	bl	c510 <assertion_failed>
   10f90:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
   10f94:	e3a03004 	mov	r3, #4
   10f98:	e5c43004 	strb	r3, [r4, #4]
   10f9c:	e3500000 	cmp	r0, #0
   10fa0:	0a000000 	beq	10fa8 <CTask::~CTask()+0x5c>
   10fa4:	ebffe2da 	bl	9b14 <operator delete[](void*)>
   10fa8:	e3a03000 	mov	r3, #0
   10fac:	e1a00005 	mov	r0, r5
   10fb0:	e584304c 	str	r3, [r4, #76]	; 0x4c
   10fb4:	ebfffb4f 	bl	fcf8 <CSpinLock::Release()>
   10fb8:	e1a00005 	mov	r0, r5
   10fbc:	ebfffb24 	bl	fc54 <CSpinLock::~CSpinLock()>
   10fc0:	e1a00004 	mov	r0, r4
   10fc4:	e8bd8070 	pop	{r4, r5, r6, pc}

00010fc8 <CTask::~CTask()>:
   10fc8:	e92d4010 	push	{r4, lr}
   10fcc:	e1a04000 	mov	r4, r0
   10fd0:	ebffffdd 	bl	10f4c <CTask::~CTask()>
   10fd4:	e1a00004 	mov	r0, r4
   10fd8:	e3a01068 	mov	r1, #104	; 0x68
   10fdc:	ebffe2cd 	bl	9b18 <operator delete(void*, unsigned int)>
   10fe0:	e1a00004 	mov	r0, r4
   10fe4:	e8bd8010 	pop	{r4, pc}

00010fe8 <CTask::TaskEntry(void*)>:
   10fe8:	e92d4070 	push	{r4, r5, r6, lr}
   10fec:	e2504000 	subs	r4, r0, #0
   10ff0:	0a000021 	beq	1107c <CTask::TaskEntry(void*)+0x94>
   10ff4:	e2845050 	add	r5, r4, #80	; 0x50
   10ff8:	e1a00005 	mov	r0, r5
   10ffc:	ebfffb21 	bl	fc88 <CSpinLock::Acquire()>
   11000:	e5d46004 	ldrb	r6, [r4, #4]
   11004:	e1a00005 	mov	r0, r5
   11008:	ebfffb3a 	bl	fcf8 <CSpinLock::Release()>
   1100c:	e6ef6076 	uxtb	r6, r6
   11010:	e3560005 	cmp	r6, #5
   11014:	0a000005 	beq	11030 <CTask::TaskEntry(void*)+0x48>
   11018:	e3031d74 	movw	r1, #15732	; 0x3d74
   1101c:	e3401001 	movt	r1, #1
   11020:	e3030da0 	movw	r0, #15776	; 0x3da0
   11024:	e3400001 	movt	r0, #1
   11028:	e3a0204f 	mov	r2, #79	; 0x4f
   1102c:	ebffed37 	bl	c510 <assertion_failed>
   11030:	e5943000 	ldr	r3, [r4]
   11034:	e1a00004 	mov	r0, r4
   11038:	e5933008 	ldr	r3, [r3, #8]
   1103c:	e12fff33 	blx	r3
   11040:	e1a00005 	mov	r0, r5
   11044:	ebfffb0f 	bl	fc88 <CSpinLock::Acquire()>
   11048:	e3a03003 	mov	r3, #3
   1104c:	e1a00005 	mov	r0, r5
   11050:	e5c43004 	strb	r3, [r4, #4]
   11054:	ebfffb27 	bl	fcf8 <CSpinLock::Release()>
   11058:	eb0002b8 	bl	11b40 <CScheduler::Get()>
   1105c:	eb00019e 	bl	116dc <CScheduler::Yield()>
   11060:	e3031d74 	movw	r1, #15732	; 0x3d74
   11064:	e3401001 	movt	r1, #1
   11068:	e30305a8 	movw	r0, #13736	; 0x35a8
   1106c:	e3400001 	movt	r0, #1
   11070:	e3a02056 	mov	r2, #86	; 0x56
   11074:	e8bd4070 	pop	{r4, r5, r6, lr}
   11078:	eaffed24 	b	c510 <assertion_failed>
   1107c:	e3031d74 	movw	r1, #15732	; 0x3d74
   11080:	e3401001 	movt	r1, #1
   11084:	e30202d0 	movw	r0, #8912	; 0x22d0
   11088:	e3400001 	movt	r0, #1
   1108c:	e3a0204e 	mov	r2, #78	; 0x4e
   11090:	ebffed1e 	bl	c510 <assertion_failed>
   11094:	eaffffd6 	b	10ff4 <CTask::TaskEntry(void*)+0xc>

00011098 <CTask::InitializeRegs()>:
   11098:	e92d4010 	push	{r4, lr}
   1109c:	e1a04000 	mov	r4, r0
   110a0:	e3a0203c 	mov	r2, #60	; 0x3c
   110a4:	e280000c 	add	r0, r0, #12
   110a8:	e3a01000 	mov	r1, #0
   110ac:	ebffe5b4 	bl	a784 <memset>
   110b0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   110b4:	e584400c 	str	r4, [r4, #12]
   110b8:	e3530000 	cmp	r3, #0
   110bc:	0a000006 	beq	110dc <CTask::InitializeRegs()+0x44>
   110c0:	e5941048 	ldr	r1, [r4, #72]	; 0x48
   110c4:	e3002fe8 	movw	r2, #4072	; 0xfe8
   110c8:	e3402001 	movt	r2, #1
   110cc:	e5842044 	str	r2, [r4, #68]	; 0x44
   110d0:	e0833001 	add	r3, r3, r1
   110d4:	e5843040 	str	r3, [r4, #64]	; 0x40
   110d8:	e8bd8010 	pop	{r4, pc}
   110dc:	e3031d74 	movw	r1, #15732	; 0x3d74
   110e0:	e3401001 	movt	r1, #1
   110e4:	e3030dc8 	movw	r0, #15816	; 0x3dc8
   110e8:	e3400001 	movt	r0, #1
   110ec:	e3a02044 	mov	r2, #68	; 0x44
   110f0:	ebffed06 	bl	c510 <assertion_failed>
   110f4:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   110f8:	eafffff0 	b	110c0 <CTask::InitializeRegs()+0x28>

000110fc <CTask::CTask(unsigned int)>:
   110fc:	e92d4010 	push	{r4, lr}
   11100:	e1a04000 	mov	r4, r0
   11104:	e3a03000 	mov	r3, #0
   11108:	e3032d68 	movw	r2, #15720	; 0x3d68
   1110c:	e3402001 	movt	r2, #1
   11110:	e2800050 	add	r0, r0, #80	; 0x50
   11114:	e5841048 	str	r1, [r4, #72]	; 0x48
   11118:	e3a01001 	mov	r1, #1
   1111c:	e5842000 	str	r2, [r4]
   11120:	e5c43004 	strb	r3, [r4, #4]
   11124:	e584304c 	str	r3, [r4, #76]	; 0x4c
   11128:	ebfffaba 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
   1112c:	e5940048 	ldr	r0, [r4, #72]	; 0x48
   11130:	e3500000 	cmp	r0, #0
   11134:	0a000007 	beq	11158 <CTask::CTask(unsigned int)+0x5c>
   11138:	e3500b01 	cmp	r0, #1024	; 0x400
   1113c:	3a000012 	bcc	1118c <CTask::CTask(unsigned int)+0x90>
   11140:	e3100003 	tst	r0, #3
   11144:	1a000008 	bne	1116c <CTask::CTask(unsigned int)+0x70>
   11148:	ebffe26f 	bl	9b0c <operator new[](unsigned int)>
   1114c:	e584004c 	str	r0, [r4, #76]	; 0x4c
   11150:	e1a00004 	mov	r0, r4
   11154:	ebffffcf 	bl	11098 <CTask::InitializeRegs()>
   11158:	eb000278 	bl	11b40 <CScheduler::Get()>
   1115c:	e1a01004 	mov	r1, r4
   11160:	eb000056 	bl	112c0 <CScheduler::AddTask(CTask*)>
   11164:	e1a00004 	mov	r0, r4
   11168:	e8bd8010 	pop	{r4, pc}
   1116c:	e3031d74 	movw	r1, #15732	; 0x3d74
   11170:	e3401001 	movt	r1, #1
   11174:	e3030df0 	movw	r0, #15856	; 0x3df0
   11178:	e3400001 	movt	r0, #1
   1117c:	e3a02021 	mov	r2, #33	; 0x21
   11180:	ebffece2 	bl	c510 <assertion_failed>
   11184:	e5940048 	ldr	r0, [r4, #72]	; 0x48
   11188:	eaffffee 	b	11148 <CTask::CTask(unsigned int)+0x4c>
   1118c:	e3031d74 	movw	r1, #15732	; 0x3d74
   11190:	e3401001 	movt	r1, #1
   11194:	e3030dd8 	movw	r0, #15832	; 0x3dd8
   11198:	e3400001 	movt	r0, #1
   1119c:	e3a02020 	mov	r2, #32
   111a0:	ebffecda 	bl	c510 <assertion_failed>
   111a4:	e5940048 	ldr	r0, [r4, #72]	; 0x48
   111a8:	e3100003 	tst	r0, #3
   111ac:	0affffe5 	beq	11148 <CTask::CTask(unsigned int)+0x4c>
   111b0:	eaffffed 	b	1116c <CTask::CTask(unsigned int)+0x70>

000111b4 <CScheduler::CScheduler()>:
   111b4:	e92d4070 	push	{r4, r5, r6, lr}
   111b8:	e1a05000 	mov	r5, r0
   111bc:	e304427c 	movw	r4, #17020	; 0x427c
   111c0:	e3404001 	movt	r4, #1
   111c4:	e3a03000 	mov	r3, #0
   111c8:	e1a00004 	mov	r0, r4
   111cc:	e5853004 	str	r3, [r5, #4]
   111d0:	e5853008 	str	r3, [r5, #8]
   111d4:	ebfffaab 	bl	fc88 <CSpinLock::Acquire()>
   111d8:	ee106fb0 	mrc	15, 0, r6, cr0, cr0, {5}
   111dc:	e2066003 	and	r6, r6, #3
   111e0:	e1a00004 	mov	r0, r4
   111e4:	ebfffac3 	bl	fcf8 <CSpinLock::Release()>
   111e8:	e0846106 	add	r6, r4, r6, lsl #2
   111ec:	e5963018 	ldr	r3, [r6, #24]
   111f0:	e3530000 	cmp	r3, #0
   111f4:	0a000005 	beq	11210 <CScheduler::CScheduler()+0x5c>
   111f8:	e3031e10 	movw	r1, #15888	; 0x3e10
   111fc:	e3401001 	movt	r1, #1
   11200:	e3030e20 	movw	r0, #15904	; 0x3e20
   11204:	e3400001 	movt	r0, #1
   11208:	e3a02029 	mov	r2, #41	; 0x29
   1120c:	ebffecbf 	bl	c510 <assertion_failed>
   11210:	e304027c 	movw	r0, #17020	; 0x427c
   11214:	e3400001 	movt	r0, #1
   11218:	ebfffa9a 	bl	fc88 <CSpinLock::Acquire()>
   1121c:	ee106fb0 	mrc	15, 0, r6, cr0, cr0, {5}
   11220:	e2066003 	and	r6, r6, #3
   11224:	e304027c 	movw	r0, #17020	; 0x427c
   11228:	e3400001 	movt	r0, #1
   1122c:	e0844106 	add	r4, r4, r6, lsl #2
   11230:	ebfffab0 	bl	fcf8 <CSpinLock::Release()>
   11234:	e3a00068 	mov	r0, #104	; 0x68
   11238:	e5845018 	str	r5, [r4, #24]
   1123c:	ebffe231 	bl	9b08 <operator new(unsigned int)>
   11240:	e1a04000 	mov	r4, r0
   11244:	e3a01000 	mov	r1, #0
   11248:	e2806050 	add	r6, r0, #80	; 0x50
   1124c:	ebffffaa 	bl	110fc <CTask::CTask(unsigned int)>
   11250:	e1a00006 	mov	r0, r6
   11254:	e5854004 	str	r4, [r5, #4]
   11258:	ebfffa8a 	bl	fc88 <CSpinLock::Acquire()>
   1125c:	e3a03005 	mov	r3, #5
   11260:	e1a00006 	mov	r0, r6
   11264:	e5c43004 	strb	r3, [r4, #4]
   11268:	ebfffaa2 	bl	fcf8 <CSpinLock::Release()>
   1126c:	e5953004 	ldr	r3, [r5, #4]
   11270:	e3530000 	cmp	r3, #0
   11274:	0a00000a 	beq	112a4 <CScheduler::CScheduler()+0xf0>
   11278:	e304027c 	movw	r0, #17020	; 0x427c
   1127c:	e3400001 	movt	r0, #1
   11280:	ebfffa80 	bl	fc88 <CSpinLock::Acquire()>
   11284:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   11288:	e304027c 	movw	r0, #17020	; 0x427c
   1128c:	e3400001 	movt	r0, #1
   11290:	ebfffa98 	bl	fcf8 <CSpinLock::Release()>
   11294:	e2044003 	and	r4, r4, #3
   11298:	e1a00005 	mov	r0, r5
   1129c:	e5854000 	str	r4, [r5]
   112a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   112a4:	e3031e10 	movw	r1, #15888	; 0x3e10
   112a8:	e3401001 	movt	r1, #1
   112ac:	e3030e44 	movw	r0, #15940	; 0x3e44
   112b0:	e3400001 	movt	r0, #1
   112b4:	e3a0202e 	mov	r2, #46	; 0x2e
   112b8:	ebffec94 	bl	c510 <assertion_failed>
   112bc:	eaffffed 	b	11278 <CScheduler::CScheduler()+0xc4>

000112c0 <CScheduler::AddTask(CTask*)>:
   112c0:	e92d4070 	push	{r4, r5, r6, lr}
   112c4:	e2514000 	subs	r4, r1, #0
   112c8:	0a00002b 	beq	1137c <CScheduler::AddTask(CTask*)+0xbc>
   112cc:	e304527c 	movw	r5, #17020	; 0x427c
   112d0:	e3405001 	movt	r5, #1
   112d4:	e2850028 	add	r0, r5, #40	; 0x28
   112d8:	ebfffa6a 	bl	fc88 <CSpinLock::Acquire()>
   112dc:	e5950040 	ldr	r0, [r5, #64]	; 0x40
   112e0:	e3500000 	cmp	r0, #0
   112e4:	0a00000d 	beq	11320 <CScheduler::AddTask(CTask*)+0x60>
   112e8:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   112ec:	e3530000 	cmp	r3, #0
   112f0:	12852044 	addne	r2, r5, #68	; 0x44
   112f4:	13a03000 	movne	r3, #0
   112f8:	1a000003 	bne	1130c <CScheduler::AddTask(CTask*)+0x4c>
   112fc:	ea00000f 	b	11340 <CScheduler::AddTask(CTask*)+0x80>
   11300:	e5b21004 	ldr	r1, [r2, #4]!
   11304:	e3510000 	cmp	r1, #0
   11308:	0a00000c 	beq	11340 <CScheduler::AddTask(CTask*)+0x80>
   1130c:	e2833001 	add	r3, r3, #1
   11310:	e1530000 	cmp	r3, r0
   11314:	1afffff9 	bne	11300 <CScheduler::AddTask(CTask*)+0x40>
   11318:	e3500013 	cmp	r0, #19
   1131c:	8a00000d 	bhi	11358 <CScheduler::AddTask(CTask*)+0x98>
   11320:	e0852100 	add	r2, r5, r0, lsl #2
   11324:	e2803001 	add	r3, r0, #1
   11328:	e30402a4 	movw	r0, #17060	; 0x42a4
   1132c:	e3400001 	movt	r0, #1
   11330:	e5853040 	str	r3, [r5, #64]	; 0x40
   11334:	e5824044 	str	r4, [r2, #68]	; 0x44
   11338:	e8bd4070 	pop	{r4, r5, r6, lr}
   1133c:	eafffa6d 	b	fcf8 <CSpinLock::Release()>
   11340:	e0853103 	add	r3, r5, r3, lsl #2
   11344:	e30402a4 	movw	r0, #17060	; 0x42a4
   11348:	e3400001 	movt	r0, #1
   1134c:	e5834044 	str	r4, [r3, #68]	; 0x44
   11350:	e8bd4070 	pop	{r4, r5, r6, lr}
   11354:	eafffa67 	b	fcf8 <CSpinLock::Release()>
   11358:	ebffede2 	bl	cae8 <CLogger::Get()>
   1135c:	e3033e60 	movw	r3, #15968	; 0x3e60
   11360:	e3403001 	movt	r3, #1
   11364:	e3031e08 	movw	r1, #15880	; 0x3e08
   11368:	e3401001 	movt	r1, #1
   1136c:	e3a02000 	mov	r2, #0
   11370:	ebffeeaa 	bl	ce20 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11374:	e5950040 	ldr	r0, [r5, #64]	; 0x40
   11378:	eaffffe8 	b	11320 <CScheduler::AddTask(CTask*)+0x60>
   1137c:	e3031e10 	movw	r1, #15888	; 0x3e10
   11380:	e3401001 	movt	r1, #1
   11384:	e3030e54 	movw	r0, #15956	; 0x3e54
   11388:	e3400001 	movt	r0, #1
   1138c:	e3a020c6 	mov	r2, #198	; 0xc6
   11390:	ebffec5e 	bl	c510 <assertion_failed>
   11394:	eaffffcc 	b	112cc <CScheduler::AddTask(CTask*)+0xc>

00011398 <CScheduler::RemoveTask(CTask*)>:
   11398:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1139c:	e304e27c 	movw	lr, #17020	; 0x427c
   113a0:	e340e001 	movt	lr, #1
   113a4:	e59ec040 	ldr	ip, [lr, #64]	; 0x40
   113a8:	e35c0000 	cmp	ip, #0
   113ac:	0a00000b 	beq	113e0 <CScheduler::RemoveTask(CTask*)+0x48>
   113b0:	e59e3044 	ldr	r3, [lr, #68]	; 0x44
   113b4:	e1510003 	cmp	r1, r3
   113b8:	128e2044 	addne	r2, lr, #68	; 0x44
   113bc:	13a03000 	movne	r3, #0
   113c0:	1a000003 	bne	113d4 <CScheduler::RemoveTask(CTask*)+0x3c>
   113c4:	ea00000c 	b	113fc <CScheduler::RemoveTask(CTask*)+0x64>
   113c8:	e5b20004 	ldr	r0, [r2, #4]!
   113cc:	e1500001 	cmp	r0, r1
   113d0:	0a00000a 	beq	11400 <CScheduler::RemoveTask(CTask*)+0x68>
   113d4:	e2833001 	add	r3, r3, #1
   113d8:	e153000c 	cmp	r3, ip
   113dc:	1afffff9 	bne	113c8 <CScheduler::RemoveTask(CTask*)+0x30>
   113e0:	e3031e10 	movw	r1, #15888	; 0x3e10
   113e4:	e3401001 	movt	r1, #1
   113e8:	e30305a8 	movw	r0, #13736	; 0x35a8
   113ec:	e3400001 	movt	r0, #1
   113f0:	e3a020f3 	mov	r2, #243	; 0xf3
   113f4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   113f8:	eaffec44 	b	c510 <assertion_failed>
   113fc:	e3a03000 	mov	r3, #0
   11400:	e24cc001 	sub	ip, ip, #1
   11404:	e08ee103 	add	lr, lr, r3, lsl #2
   11408:	e15c0003 	cmp	ip, r3
   1140c:	e3a01000 	mov	r1, #0
   11410:	e304227c 	movw	r2, #17020	; 0x427c
   11414:	e3402001 	movt	r2, #1
   11418:	e58e1044 	str	r1, [lr, #68]	; 0x44
   1141c:	05823040 	streq	r3, [r2, #64]	; 0x40
   11420:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00011424 <CScheduler::~CScheduler()>:
   11424:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11428:	e304427c 	movw	r4, #17020	; 0x427c
   1142c:	e3404001 	movt	r4, #1
   11430:	e1a05000 	mov	r5, r0
   11434:	e2840028 	add	r0, r4, #40	; 0x28
   11438:	ebfffa12 	bl	fc88 <CSpinLock::Acquire()>
   1143c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   11440:	e3530001 	cmp	r3, #1
   11444:	0a000005 	beq	11460 <CScheduler::~CScheduler()+0x3c>
   11448:	e3031e10 	movw	r1, #15888	; 0x3e10
   1144c:	e3401001 	movt	r1, #1
   11450:	e3030e80 	movw	r0, #16000	; 0x3e80
   11454:	e3400001 	movt	r0, #1
   11458:	e3a02036 	mov	r2, #54	; 0x36
   1145c:	ebffec2b 	bl	c510 <assertion_failed>
   11460:	e5951004 	ldr	r1, [r5, #4]
   11464:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   11468:	e1530001 	cmp	r3, r1
   1146c:	0a000006 	beq	1148c <CScheduler::~CScheduler()+0x68>
   11470:	e3031e10 	movw	r1, #15888	; 0x3e10
   11474:	e3401001 	movt	r1, #1
   11478:	e3030e90 	movw	r0, #16016	; 0x3e90
   1147c:	e3400001 	movt	r0, #1
   11480:	e3a02037 	mov	r2, #55	; 0x37
   11484:	ebffec21 	bl	c510 <assertion_failed>
   11488:	e5951004 	ldr	r1, [r5, #4]
   1148c:	e1a00005 	mov	r0, r5
   11490:	ebffffc0 	bl	11398 <CScheduler::RemoveTask(CTask*)>
   11494:	e5950004 	ldr	r0, [r5, #4]
   11498:	e3500000 	cmp	r0, #0
   1149c:	0a000002 	beq	114ac <CScheduler::~CScheduler()+0x88>
   114a0:	e5903000 	ldr	r3, [r0]
   114a4:	e5933004 	ldr	r3, [r3, #4]
   114a8:	e12fff33 	blx	r3
   114ac:	e3a07000 	mov	r7, #0
   114b0:	e304027c 	movw	r0, #17020	; 0x427c
   114b4:	e3400001 	movt	r0, #1
   114b8:	e5857004 	str	r7, [r5, #4]
   114bc:	ebfff9f1 	bl	fc88 <CSpinLock::Acquire()>
   114c0:	ee106fb0 	mrc	15, 0, r6, cr0, cr0, {5}
   114c4:	e2066003 	and	r6, r6, #3
   114c8:	e304027c 	movw	r0, #17020	; 0x427c
   114cc:	e3400001 	movt	r0, #1
   114d0:	e0844106 	add	r4, r4, r6, lsl #2
   114d4:	ebfffa07 	bl	fcf8 <CSpinLock::Release()>
   114d8:	e30402a4 	movw	r0, #17060	; 0x42a4
   114dc:	e3400001 	movt	r0, #1
   114e0:	e5847018 	str	r7, [r4, #24]
   114e4:	ebfffa03 	bl	fcf8 <CSpinLock::Release()>
   114e8:	e1a00005 	mov	r0, r5
   114ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000114f0 <CScheduler::WakeTask(CTask**)>:
   114f0:	e92d4070 	push	{r4, r5, r6, lr}
   114f4:	e2515000 	subs	r5, r1, #0
   114f8:	0a00001a 	beq	11568 <CScheduler::WakeTask(CTask**)+0x78>
   114fc:	e5954000 	ldr	r4, [r5]
   11500:	e3a03000 	mov	r3, #0
   11504:	e5853000 	str	r3, [r5]
   11508:	e1540003 	cmp	r4, r3
   1150c:	0a00001c 	beq	11584 <CScheduler::WakeTask(CTask**)+0x94>
   11510:	e2845050 	add	r5, r4, #80	; 0x50
   11514:	e1a00005 	mov	r0, r5
   11518:	ebfff9da 	bl	fc88 <CSpinLock::Acquire()>
   1151c:	e5d46004 	ldrb	r6, [r4, #4]
   11520:	e1a00005 	mov	r0, r5
   11524:	ebfff9f3 	bl	fcf8 <CSpinLock::Release()>
   11528:	e6ef6076 	uxtb	r6, r6
   1152c:	e3560001 	cmp	r6, #1
   11530:	0a000005 	beq	1154c <CScheduler::WakeTask(CTask**)+0x5c>
   11534:	e3031e10 	movw	r1, #15888	; 0x3e10
   11538:	e3401001 	movt	r1, #1
   1153c:	e3030eb8 	movw	r0, #16056	; 0x3eb8
   11540:	e3400001 	movt	r0, #1
   11544:	e3002113 	movw	r2, #275	; 0x113
   11548:	ebffebf0 	bl	c510 <assertion_failed>
   1154c:	e1a00005 	mov	r0, r5
   11550:	ebfff9cc 	bl	fc88 <CSpinLock::Acquire()>
   11554:	e1a00005 	mov	r0, r5
   11558:	e3a03000 	mov	r3, #0
   1155c:	e5c43004 	strb	r3, [r4, #4]
   11560:	e8bd4070 	pop	{r4, r5, r6, lr}
   11564:	eafff9e3 	b	fcf8 <CSpinLock::Release()>
   11568:	e3031e10 	movw	r1, #15888	; 0x3e10
   1156c:	e3401001 	movt	r1, #1
   11570:	e3030eac 	movw	r0, #16044	; 0x3eac
   11574:	e3400001 	movt	r0, #1
   11578:	e3002106 	movw	r2, #262	; 0x106
   1157c:	ebffebe3 	bl	c510 <assertion_failed>
   11580:	eaffffdd 	b	114fc <CScheduler::WakeTask(CTask**)+0xc>
   11584:	e3031e10 	movw	r1, #15888	; 0x3e10
   11588:	e3401001 	movt	r1, #1
   1158c:	e3030e54 	movw	r0, #15956	; 0x3e54
   11590:	e3400001 	movt	r0, #1
   11594:	e3002112 	movw	r2, #274	; 0x112
   11598:	ebffebdc 	bl	c510 <assertion_failed>
   1159c:	eaffffdb 	b	11510 <CScheduler::WakeTask(CTask**)+0x20>

000115a0 <CScheduler::GetNextTask()>:
   115a0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115a4:	e5904008 	ldr	r4, [r0, #8]
   115a8:	e304b27c 	movw	fp, #17020	; 0x427c
   115ac:	e340b001 	movt	fp, #1
   115b0:	e3540014 	cmp	r4, #20
   115b4:	e1a09000 	mov	r9, r0
   115b8:	23a04000 	movcs	r4, #0
   115bc:	ebffe462 	bl	a74c <CTimer::Get()>
   115c0:	ebffe22c 	bl	9e78 <CTimer::GetClockTicks()>
   115c4:	e59b3040 	ldr	r3, [fp, #64]	; 0x40
   115c8:	e3530000 	cmp	r3, #0
   115cc:	0a000022 	beq	1165c <CScheduler::GetNextTask()+0xbc>
   115d0:	e1a0a000 	mov	sl, r0
   115d4:	e3a08001 	mov	r8, #1
   115d8:	e2844001 	add	r4, r4, #1
   115dc:	e2888001 	add	r8, r8, #1
   115e0:	e1540003 	cmp	r4, r3
   115e4:	23a04000 	movcs	r4, #0
   115e8:	e08b3104 	add	r3, fp, r4, lsl #2
   115ec:	e5935044 	ldr	r5, [r3, #68]	; 0x44
   115f0:	e3550000 	cmp	r5, #0
   115f4:	e2857050 	add	r7, r5, #80	; 0x50
   115f8:	e1a00007 	mov	r0, r7
   115fc:	0a000013 	beq	11650 <CScheduler::GetNextTask()+0xb0>
   11600:	ebfff9a0 	bl	fc88 <CSpinLock::Acquire()>
   11604:	e5d56004 	ldrb	r6, [r5, #4]
   11608:	e1a00007 	mov	r0, r7
   1160c:	e6ef6076 	uxtb	r6, r6
   11610:	ebfff9b8 	bl	fcf8 <CSpinLock::Release()>
   11614:	e3560005 	cmp	r6, #5
   11618:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
   1161c:	ea000005 	b	11638 <CScheduler::GetNextTask()+0x98>
   11620:	00011684 	.word	0x00011684
   11624:	00011650 	.word	0x00011650
   11628:	00011664 	.word	0x00011664
   1162c:	000116b8 	.word	0x000116b8
   11630:	00011638 	.word	0x00011638
   11634:	000116a4 	.word	0x000116a4
   11638:	e3031e10 	movw	r1, #15888	; 0x3e10
   1163c:	e3401001 	movt	r1, #1
   11640:	e30305a8 	movw	r0, #13736	; 0x35a8
   11644:	e3400001 	movt	r0, #1
   11648:	e300214d 	movw	r2, #333	; 0x14d
   1164c:	ebffebaf 	bl	c510 <assertion_failed>
   11650:	e59b3040 	ldr	r3, [fp, #64]	; 0x40
   11654:	e1530008 	cmp	r3, r8
   11658:	2affffde 	bcs	115d8 <CScheduler::GetNextTask()+0x38>
   1165c:	e3a00014 	mov	r0, #20
   11660:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11664:	e1a00007 	mov	r0, r7
   11668:	ebfff986 	bl	fc88 <CSpinLock::Acquire()>
   1166c:	e5956008 	ldr	r6, [r5, #8]
   11670:	e1a00007 	mov	r0, r7
   11674:	e06a6006 	rsb	r6, sl, r6
   11678:	ebfff99e 	bl	fcf8 <CSpinLock::Release()>
   1167c:	e3560000 	cmp	r6, #0
   11680:	cafffff2 	bgt	11650 <CScheduler::GetNextTask()+0xb0>
   11684:	e1a00007 	mov	r0, r7
   11688:	ebfff97e 	bl	fc88 <CSpinLock::Acquire()>
   1168c:	e1a00007 	mov	r0, r7
   11690:	e3a03005 	mov	r3, #5
   11694:	e5c53004 	strb	r3, [r5, #4]
   11698:	ebfff996 	bl	fcf8 <CSpinLock::Release()>
   1169c:	e1a00004 	mov	r0, r4
   116a0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116a4:	e5993004 	ldr	r3, [r9, #4]
   116a8:	e1550003 	cmp	r5, r3
   116ac:	1affffe7 	bne	11650 <CScheduler::GetNextTask()+0xb0>
   116b0:	e1a00004 	mov	r0, r4
   116b4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116b8:	e1a00009 	mov	r0, r9
   116bc:	e1a01005 	mov	r1, r5
   116c0:	ebffff34 	bl	11398 <CScheduler::RemoveTask(CTask*)>
   116c4:	e5953000 	ldr	r3, [r5]
   116c8:	e1a00005 	mov	r0, r5
   116cc:	e5933004 	ldr	r3, [r3, #4]
   116d0:	e12fff33 	blx	r3
   116d4:	e3a00014 	mov	r0, #20
   116d8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000116dc <CScheduler::Yield()>:
   116dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   116e0:	e1a04000 	mov	r4, r0
   116e4:	e304527c 	movw	r5, #17020	; 0x427c
   116e8:	e3405001 	movt	r5, #1
   116ec:	ebffe416 	bl	a74c <CTimer::Get()>
   116f0:	e3a00064 	mov	r0, #100	; 0x64
   116f4:	ebffe3c8 	bl	a61c <CTimer::SimpleMsDelay(unsigned int)>
   116f8:	e2850028 	add	r0, r5, #40	; 0x28
   116fc:	ebfff961 	bl	fc88 <CSpinLock::Acquire()>
   11700:	ea000009 	b	1172c <CScheduler::Yield()+0x50>
   11704:	ebfff97b 	bl	fcf8 <CSpinLock::Release()>
   11708:	ebffe40f 	bl	a74c <CTimer::Get()>
   1170c:	e3a0000a 	mov	r0, #10
   11710:	ebffe3c1 	bl	a61c <CTimer::SimpleMsDelay(unsigned int)>
   11714:	e30402a4 	movw	r0, #17060	; 0x42a4
   11718:	e3400001 	movt	r0, #1
   1171c:	ebfff959 	bl	fc88 <CSpinLock::Acquire()>
   11720:	e5953040 	ldr	r3, [r5, #64]	; 0x40
   11724:	e3530000 	cmp	r3, #0
   11728:	0a00003b 	beq	1181c <CScheduler::Yield()+0x140>
   1172c:	e1a00004 	mov	r0, r4
   11730:	ebffff9a 	bl	115a0 <CScheduler::GetNextTask()>
   11734:	e1a03000 	mov	r3, r0
   11738:	e3530014 	cmp	r3, #20
   1173c:	e30402a4 	movw	r0, #17060	; 0x42a4
   11740:	e3400001 	movt	r0, #1
   11744:	e5843008 	str	r3, [r4, #8]
   11748:	0affffed 	beq	11704 <CScheduler::Yield()+0x28>
   1174c:	e3530013 	cmp	r3, #19
   11750:	8a000038 	bhi	11838 <CScheduler::Yield()+0x15c>
   11754:	e0853103 	add	r3, r5, r3, lsl #2
   11758:	e5935044 	ldr	r5, [r3, #68]	; 0x44
   1175c:	e3550000 	cmp	r5, #0
   11760:	0a000049 	beq	1188c <CScheduler::Yield()+0x1b0>
   11764:	e5946004 	ldr	r6, [r4, #4]
   11768:	e1550006 	cmp	r5, r6
   1176c:	0a000042 	beq	1187c <CScheduler::Yield()+0x1a0>
   11770:	e2867050 	add	r7, r6, #80	; 0x50
   11774:	e1a00007 	mov	r0, r7
   11778:	ebfff942 	bl	fc88 <CSpinLock::Acquire()>
   1177c:	e1a00007 	mov	r0, r7
   11780:	e5d63004 	ldrb	r3, [r6, #4]
   11784:	ebfff95b 	bl	fcf8 <CSpinLock::Release()>
   11788:	e5946004 	ldr	r6, [r4, #4]
   1178c:	e3560000 	cmp	r6, #0
   11790:	0a000052 	beq	118e0 <CScheduler::Yield()+0x204>
   11794:	e2867050 	add	r7, r6, #80	; 0x50
   11798:	e1a00007 	mov	r0, r7
   1179c:	ebfff939 	bl	fc88 <CSpinLock::Acquire()>
   117a0:	e5d66004 	ldrb	r6, [r6, #4]
   117a4:	e1a00007 	mov	r0, r7
   117a8:	ebfff952 	bl	fcf8 <CSpinLock::Release()>
   117ac:	e6ef6076 	uxtb	r6, r6
   117b0:	e3560005 	cmp	r6, #5
   117b4:	0a000027 	beq	11858 <CScheduler::Yield()+0x17c>
   117b8:	e5946004 	ldr	r6, [r4, #4]
   117bc:	e2858050 	add	r8, r5, #80	; 0x50
   117c0:	e285700c 	add	r7, r5, #12
   117c4:	e2869050 	add	r9, r6, #80	; 0x50
   117c8:	e286600c 	add	r6, r6, #12
   117cc:	e1a00009 	mov	r0, r9
   117d0:	ebfff92c 	bl	fc88 <CSpinLock::Acquire()>
   117d4:	e1a00009 	mov	r0, r9
   117d8:	ebfff946 	bl	fcf8 <CSpinLock::Release()>
   117dc:	e1a00008 	mov	r0, r8
   117e0:	e5845004 	str	r5, [r4, #4]
   117e4:	ebfff927 	bl	fc88 <CSpinLock::Acquire()>
   117e8:	e1a00008 	mov	r0, r8
   117ec:	ebfff941 	bl	fcf8 <CSpinLock::Release()>
   117f0:	e30402a4 	movw	r0, #17060	; 0x42a4
   117f4:	e3400001 	movt	r0, #1
   117f8:	ebfff93e 	bl	fcf8 <CSpinLock::Release()>
   117fc:	e3560000 	cmp	r6, #0
   11800:	0a000028 	beq	118a8 <CScheduler::Yield()+0x1cc>
   11804:	e3570000 	cmp	r7, #0
   11808:	0a00002d 	beq	118c4 <CScheduler::Yield()+0x1e8>
   1180c:	e1a01007 	mov	r1, r7
   11810:	e1a00006 	mov	r0, r6
   11814:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11818:	ea000108 	b	11c40 <TaskSwitch>
   1181c:	e3031e10 	movw	r1, #15888	; 0x3e10
   11820:	e3401001 	movt	r1, #1
   11824:	e3030ee0 	movw	r0, #16096	; 0x3ee0
   11828:	e3400001 	movt	r0, #1
   1182c:	e3a02067 	mov	r2, #103	; 0x67
   11830:	ebffeb36 	bl	c510 <assertion_failed>
   11834:	eaffffbc 	b	1172c <CScheduler::Yield()+0x50>
   11838:	e3031e10 	movw	r1, #15888	; 0x3e10
   1183c:	e3401001 	movt	r1, #1
   11840:	e3030ef0 	movw	r0, #16112	; 0x3ef0
   11844:	e3400001 	movt	r0, #1
   11848:	e3a0206b 	mov	r2, #107	; 0x6b
   1184c:	ebffeb2f 	bl	c510 <assertion_failed>
   11850:	e5943008 	ldr	r3, [r4, #8]
   11854:	eaffffbe 	b	11754 <CScheduler::Yield()+0x78>
   11858:	e5946004 	ldr	r6, [r4, #4]
   1185c:	e2867050 	add	r7, r6, #80	; 0x50
   11860:	e1a00007 	mov	r0, r7
   11864:	ebfff907 	bl	fc88 <CSpinLock::Acquire()>
   11868:	e3a03000 	mov	r3, #0
   1186c:	e1a00007 	mov	r0, r7
   11870:	e5c63004 	strb	r3, [r6, #4]
   11874:	ebfff91f 	bl	fcf8 <CSpinLock::Release()>
   11878:	eaffffce 	b	117b8 <CScheduler::Yield()+0xdc>
   1187c:	e30402a4 	movw	r0, #17060	; 0x42a4
   11880:	e3400001 	movt	r0, #1
   11884:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11888:	eafff91a 	b	fcf8 <CSpinLock::Release()>
   1188c:	e3031e10 	movw	r1, #15888	; 0x3e10
   11890:	e3401001 	movt	r1, #1
   11894:	e3030f08 	movw	r0, #16136	; 0x3f08
   11898:	e3400001 	movt	r0, #1
   1189c:	e3a0206d 	mov	r2, #109	; 0x6d
   118a0:	ebffeb1a 	bl	c510 <assertion_failed>
   118a4:	eaffffae 	b	11764 <CScheduler::Yield()+0x88>
   118a8:	e3031e10 	movw	r1, #15888	; 0x3e10
   118ac:	e3401001 	movt	r1, #1
   118b0:	e3030f14 	movw	r0, #16148	; 0x3f14
   118b4:	e3400001 	movt	r0, #1
   118b8:	e3a0208a 	mov	r2, #138	; 0x8a
   118bc:	ebffeb13 	bl	c510 <assertion_failed>
   118c0:	eaffffcf 	b	11804 <CScheduler::Yield()+0x128>
   118c4:	e3031e10 	movw	r1, #15888	; 0x3e10
   118c8:	e3401001 	movt	r1, #1
   118cc:	e3030f24 	movw	r0, #16164	; 0x3f24
   118d0:	e3400001 	movt	r0, #1
   118d4:	e3a0208b 	mov	r2, #139	; 0x8b
   118d8:	ebffeb0c 	bl	c510 <assertion_failed>
   118dc:	eaffffca 	b	1180c <CScheduler::Yield()+0x130>
   118e0:	e3031e10 	movw	r1, #15888	; 0x3e10
   118e4:	e3401001 	movt	r1, #1
   118e8:	e3030e44 	movw	r0, #15940	; 0x3e44
   118ec:	e3400001 	movt	r0, #1
   118f0:	e3a0207b 	mov	r2, #123	; 0x7b
   118f4:	ebffeb05 	bl	c510 <assertion_failed>
   118f8:	e5946004 	ldr	r6, [r4, #4]
   118fc:	eaffffa4 	b	11794 <CScheduler::Yield()+0xb8>

00011900 <CScheduler::startFromSecondary()>:
   11900:	e92d4010 	push	{r4, lr}
   11904:	e1a04000 	mov	r4, r0
   11908:	e1a00004 	mov	r0, r4
   1190c:	ebffff72 	bl	116dc <CScheduler::Yield()>
   11910:	eafffffc 	b	11908 <CScheduler::startFromSecondary()+0x8>

00011914 <CScheduler::usSleep(unsigned int) [clone .part.2]>:
   11914:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11918:	e1a04000 	mov	r4, r0
   1191c:	e1a08001 	mov	r8, r1
   11920:	ebffe389 	bl	a74c <CTimer::Get()>
   11924:	ebffe153 	bl	9e78 <CTimer::GetClockTicks()>
   11928:	e1a06000 	mov	r6, r0
   1192c:	e30402a4 	movw	r0, #17060	; 0x42a4
   11930:	e3400001 	movt	r0, #1
   11934:	ebfff8d3 	bl	fc88 <CSpinLock::Acquire()>
   11938:	e5945004 	ldr	r5, [r4, #4]
   1193c:	e3550000 	cmp	r5, #0
   11940:	0a000024 	beq	119d8 <CScheduler::usSleep(unsigned int) [clone .part.2]+0xc4>
   11944:	e2857050 	add	r7, r5, #80	; 0x50
   11948:	e1a00007 	mov	r0, r7
   1194c:	ebfff8cd 	bl	fc88 <CSpinLock::Acquire()>
   11950:	e5d55004 	ldrb	r5, [r5, #4]
   11954:	e1a00007 	mov	r0, r7
   11958:	ebfff8e6 	bl	fcf8 <CSpinLock::Release()>
   1195c:	e6ef5075 	uxtb	r5, r5
   11960:	e3550005 	cmp	r5, #5
   11964:	0a000005 	beq	11980 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x6c>
   11968:	e3031e10 	movw	r1, #15888	; 0x3e10
   1196c:	e3401001 	movt	r1, #1
   11970:	e3030f34 	movw	r0, #16180	; 0x3f34
   11974:	e3400001 	movt	r0, #1
   11978:	e3a020b8 	mov	r2, #184	; 0xb8
   1197c:	ebffeae3 	bl	c510 <assertion_failed>
   11980:	e5947004 	ldr	r7, [r4, #4]
   11984:	e0866008 	add	r6, r6, r8
   11988:	e2875050 	add	r5, r7, #80	; 0x50
   1198c:	e1a00005 	mov	r0, r5
   11990:	ebfff8bc 	bl	fc88 <CSpinLock::Acquire()>
   11994:	e5876008 	str	r6, [r7, #8]
   11998:	e1a00005 	mov	r0, r5
   1199c:	ebfff8d5 	bl	fcf8 <CSpinLock::Release()>
   119a0:	e5945004 	ldr	r5, [r4, #4]
   119a4:	e2856050 	add	r6, r5, #80	; 0x50
   119a8:	e1a00006 	mov	r0, r6
   119ac:	ebfff8b5 	bl	fc88 <CSpinLock::Acquire()>
   119b0:	e1a00006 	mov	r0, r6
   119b4:	e3a03002 	mov	r3, #2
   119b8:	e5c53004 	strb	r3, [r5, #4]
   119bc:	ebfff8cd 	bl	fcf8 <CSpinLock::Release()>
   119c0:	e30402a4 	movw	r0, #17060	; 0x42a4
   119c4:	e3400001 	movt	r0, #1
   119c8:	ebfff8ca 	bl	fcf8 <CSpinLock::Release()>
   119cc:	e1a00004 	mov	r0, r4
   119d0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   119d4:	eaffff40 	b	116dc <CScheduler::Yield()>
   119d8:	e3031e10 	movw	r1, #15888	; 0x3e10
   119dc:	e3401001 	movt	r1, #1
   119e0:	e3030e44 	movw	r0, #15940	; 0x3e44
   119e4:	e3400001 	movt	r0, #1
   119e8:	e3a020b7 	mov	r2, #183	; 0xb7
   119ec:	ebffeac7 	bl	c510 <assertion_failed>
   119f0:	e5945004 	ldr	r5, [r4, #4]
   119f4:	eaffffd2 	b	11944 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x30>

000119f8 <CScheduler::usSleep(unsigned int)>:
   119f8:	e3510000 	cmp	r1, #0
   119fc:	012fff1e 	bxeq	lr
   11a00:	eaffffc3 	b	11914 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00011a04 <CScheduler::Sleep(unsigned int)>:
   11a04:	e92d4070 	push	{r4, r5, r6, lr}
   11a08:	e3005708 	movw	r5, #1800	; 0x708
   11a0c:	e1a04001 	mov	r4, r1
   11a10:	e1510005 	cmp	r1, r5
   11a14:	e1a06000 	mov	r6, r0
   11a18:	9a000007 	bls	11a3c <CScheduler::Sleep(unsigned int)+0x38>
   11a1c:	e2444c07 	sub	r4, r4, #1792	; 0x700
   11a20:	e3a01cd2 	mov	r1, #53760	; 0xd200
   11a24:	e3461b49 	movt	r1, #27465	; 0x6b49
   11a28:	e2444008 	sub	r4, r4, #8
   11a2c:	e1a00006 	mov	r0, r6
   11a30:	ebffffb7 	bl	11914 <CScheduler::usSleep(unsigned int) [clone .part.2]>
   11a34:	e1540005 	cmp	r4, r5
   11a38:	8afffff7 	bhi	11a1c <CScheduler::Sleep(unsigned int)+0x18>
   11a3c:	e3041240 	movw	r1, #16960	; 0x4240
   11a40:	e340100f 	movt	r1, #15
   11a44:	e0010491 	mul	r1, r1, r4
   11a48:	e3510000 	cmp	r1, #0
   11a4c:	08bd8070 	popeq	{r4, r5, r6, pc}
   11a50:	e1a00006 	mov	r0, r6
   11a54:	e8bd4070 	pop	{r4, r5, r6, lr}
   11a58:	eaffffad 	b	11914 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00011a5c <CScheduler::MsSleep(unsigned int)>:
   11a5c:	e3510000 	cmp	r1, #0
   11a60:	012fff1e 	bxeq	lr
   11a64:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   11a68:	e0010193 	mul	r1, r3, r1
   11a6c:	e3510000 	cmp	r1, #0
   11a70:	012fff1e 	bxeq	lr
   11a74:	eaffffa6 	b	11914 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00011a78 <CScheduler::BlockTask(CTask**)>:
   11a78:	e92d4070 	push	{r4, r5, r6, lr}
   11a7c:	e2515000 	subs	r5, r1, #0
   11a80:	e1a04000 	mov	r4, r0
   11a84:	0a00001e 	beq	11b04 <CScheduler::BlockTask(CTask**)+0x8c>
   11a88:	e5943004 	ldr	r3, [r4, #4]
   11a8c:	e5853000 	str	r3, [r5]
   11a90:	e5945004 	ldr	r5, [r4, #4]
   11a94:	e3550000 	cmp	r5, #0
   11a98:	0a000020 	beq	11b20 <CScheduler::BlockTask(CTask**)+0xa8>
   11a9c:	e2856050 	add	r6, r5, #80	; 0x50
   11aa0:	e1a00006 	mov	r0, r6
   11aa4:	ebfff877 	bl	fc88 <CSpinLock::Acquire()>
   11aa8:	e5d55004 	ldrb	r5, [r5, #4]
   11aac:	e1a00006 	mov	r0, r6
   11ab0:	ebfff890 	bl	fcf8 <CSpinLock::Release()>
   11ab4:	e6ef5075 	uxtb	r5, r5
   11ab8:	e3550005 	cmp	r5, #5
   11abc:	0a000005 	beq	11ad8 <CScheduler::BlockTask(CTask**)+0x60>
   11ac0:	e3031e10 	movw	r1, #15888	; 0x3e10
   11ac4:	e3401001 	movt	r1, #1
   11ac8:	e3030f34 	movw	r0, #16180	; 0x3f34
   11acc:	e3400001 	movt	r0, #1
   11ad0:	e3a020fd 	mov	r2, #253	; 0xfd
   11ad4:	ebffea8d 	bl	c510 <assertion_failed>
   11ad8:	e5945004 	ldr	r5, [r4, #4]
   11adc:	e2856050 	add	r6, r5, #80	; 0x50
   11ae0:	e1a00006 	mov	r0, r6
   11ae4:	ebfff867 	bl	fc88 <CSpinLock::Acquire()>
   11ae8:	e1a00006 	mov	r0, r6
   11aec:	e3a03001 	mov	r3, #1
   11af0:	e5c53004 	strb	r3, [r5, #4]
   11af4:	ebfff87f 	bl	fcf8 <CSpinLock::Release()>
   11af8:	e1a00004 	mov	r0, r4
   11afc:	e8bd4070 	pop	{r4, r5, r6, lr}
   11b00:	eafffef5 	b	116dc <CScheduler::Yield()>
   11b04:	e3031e10 	movw	r1, #15888	; 0x3e10
   11b08:	e3401001 	movt	r1, #1
   11b0c:	e3030eac 	movw	r0, #16044	; 0x3eac
   11b10:	e3400001 	movt	r0, #1
   11b14:	e3a020f9 	mov	r2, #249	; 0xf9
   11b18:	ebffea7c 	bl	c510 <assertion_failed>
   11b1c:	eaffffd9 	b	11a88 <CScheduler::BlockTask(CTask**)+0x10>
   11b20:	e3031e10 	movw	r1, #15888	; 0x3e10
   11b24:	e3401001 	movt	r1, #1
   11b28:	e3030e44 	movw	r0, #15940	; 0x3e44
   11b2c:	e3400001 	movt	r0, #1
   11b30:	e3a020fc 	mov	r2, #252	; 0xfc
   11b34:	ebffea75 	bl	c510 <assertion_failed>
   11b38:	e5945004 	ldr	r5, [r4, #4]
   11b3c:	eaffffd6 	b	11a9c <CScheduler::BlockTask(CTask**)+0x24>

00011b40 <CScheduler::Get()>:
   11b40:	e92d4070 	push	{r4, r5, r6, lr}
   11b44:	e304427c 	movw	r4, #17020	; 0x427c
   11b48:	e3404001 	movt	r4, #1
   11b4c:	e1a00004 	mov	r0, r4
   11b50:	ebfff84c 	bl	fc88 <CSpinLock::Acquire()>
   11b54:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   11b58:	e2055003 	and	r5, r5, #3
   11b5c:	e1a00004 	mov	r0, r4
   11b60:	ebfff864 	bl	fcf8 <CSpinLock::Release()>
   11b64:	e0845105 	add	r5, r4, r5, lsl #2
   11b68:	e5953018 	ldr	r3, [r5, #24]
   11b6c:	e3530000 	cmp	r3, #0
   11b70:	0a00000a 	beq	11ba0 <CScheduler::Get()+0x60>
   11b74:	e304027c 	movw	r0, #17020	; 0x427c
   11b78:	e3400001 	movt	r0, #1
   11b7c:	ebfff841 	bl	fc88 <CSpinLock::Acquire()>
   11b80:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   11b84:	e2055003 	and	r5, r5, #3
   11b88:	e304027c 	movw	r0, #17020	; 0x427c
   11b8c:	e3400001 	movt	r0, #1
   11b90:	e0844105 	add	r4, r4, r5, lsl #2
   11b94:	ebfff857 	bl	fcf8 <CSpinLock::Release()>
   11b98:	e5940018 	ldr	r0, [r4, #24]
   11b9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11ba0:	e3031e10 	movw	r1, #15888	; 0x3e10
   11ba4:	e3401001 	movt	r1, #1
   11ba8:	e3030f60 	movw	r0, #16224	; 0x3f60
   11bac:	e3400001 	movt	r0, #1
   11bb0:	e3002157 	movw	r2, #343	; 0x157
   11bb4:	ebffea55 	bl	c510 <assertion_failed>
   11bb8:	eaffffed 	b	11b74 <CScheduler::Get()+0x34>

00011bbc <CScheduler::GetCore()>:
   11bbc:	e92d4070 	push	{r4, r5, r6, lr}
   11bc0:	e304427c 	movw	r4, #17020	; 0x427c
   11bc4:	e3404001 	movt	r4, #1
   11bc8:	e1a00004 	mov	r0, r4
   11bcc:	ebfff82d 	bl	fc88 <CSpinLock::Acquire()>
   11bd0:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   11bd4:	e1a00004 	mov	r0, r4
   11bd8:	ebfff846 	bl	fcf8 <CSpinLock::Release()>
   11bdc:	e2050003 	and	r0, r5, #3
   11be0:	e8bd8070 	pop	{r4, r5, r6, pc}

00011be4 <_GLOBAL__sub_I_m_pTask>:
   11be4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11be8:	e304427c 	movw	r4, #17020	; 0x427c
   11bec:	e3404001 	movt	r4, #1
   11bf0:	e1a00004 	mov	r0, r4
   11bf4:	e3a01001 	mov	r1, #1
   11bf8:	e30460a4 	movw	r6, #16548	; 0x40a4
   11bfc:	e3406001 	movt	r6, #1
   11c00:	e30f5c54 	movw	r5, #64596	; 0xfc54
   11c04:	e3405000 	movt	r5, #0
   11c08:	ebfff802 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
   11c0c:	e2847028 	add	r7, r4, #40	; 0x28
   11c10:	e1a02006 	mov	r2, r6
   11c14:	e1a01005 	mov	r1, r5
   11c18:	e1a00004 	mov	r0, r4
   11c1c:	ebffdfbf 	bl	9b20 <__aeabi_atexit>
   11c20:	e1a00007 	mov	r0, r7
   11c24:	e3a01001 	mov	r1, #1
   11c28:	ebfff7fa 	bl	fc18 <CSpinLock::CSpinLock(unsigned int)>
   11c2c:	e1a02006 	mov	r2, r6
   11c30:	e1a01005 	mov	r1, r5
   11c34:	e1a00007 	mov	r0, r7
   11c38:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11c3c:	eaffdfb7 	b	9b20 <__aeabi_atexit>

00011c40 <TaskSwitch>:
   11c40:	e8807fff 	stm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   11c44:	e8917fff 	ldm	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   11c48:	e12fff1e 	bx	lr
