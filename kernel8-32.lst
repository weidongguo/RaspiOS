
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea006824 	b	220f8 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

00008070 <main>:
    8070:	e92d4010 	push	{r4, lr}
    8074:	e24ddd7b 	sub	sp, sp, #7872	; 0x1ec0
    8078:	e24dd018 	sub	sp, sp, #24
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb000012 	bl	80d0 <CKernel::CKernel()>
    8084:	e1a0000d 	mov	r0, sp
    8088:	eb000062 	bl	8218 <CKernel::Initialize()>
    808c:	e2504000 	subs	r4, r0, #0
    8090:	0a000004 	beq	80a8 <main+0x38>
    8094:	e1a0000d 	mov	r0, sp
    8098:	eb0000c8 	bl	83c0 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	13a04000 	movne	r4, #0
    80a4:	0a000006 	beq	80c4 <main+0x54>
    80a8:	eb006806 	bl	220c8 <halt>
    80ac:	e1a0000d 	mov	r0, sp
    80b0:	eb000197 	bl	8714 <CKernel::~CKernel()>
    80b4:	e1a00004 	mov	r0, r4
    80b8:	e28ddd7b 	add	sp, sp, #7872	; 0x1ec0
    80bc:	e28dd018 	add	sp, sp, #24
    80c0:	e8bd8010 	pop	{r4, pc}
    80c4:	eb006802 	bl	220d4 <reboot>
    80c8:	e3a04001 	mov	r4, #1
    80cc:	eafffff6 	b	80ac <main+0x3c>

000080d0 <CKernel::CKernel()>:
    80d0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    80d4:	e3a01001 	mov	r1, #1
    80d8:	e1a04000 	mov	r4, r0
    80dc:	e24dd00c 	sub	sp, sp, #12
    80e0:	e2809010 	add	r9, r0, #16
    80e4:	e284801c 	add	r8, r4, #28
    80e8:	eb006765 	bl	21e84 <CMemorySystem::CMemorySystem(int)>
    80ec:	e1a00009 	mov	r0, r9
    80f0:	e2845d66 	add	r5, r4, #6528	; 0x1980
    80f4:	eb0062f6 	bl	20cd4 <CActLED::CActLED()>
    80f8:	e1a00008 	mov	r0, r8
    80fc:	eb006c9e 	bl	2337c <CKernelOptions::CKernelOptions()>
    8100:	e2840e85 	add	r0, r4, #2128	; 0x850
    8104:	e280000c 	add	r0, r0, #12
    8108:	e2855018 	add	r5, r5, #24
    810c:	eb007359 	bl	24e78 <CDeviceNameService::CDeviceNameService()>
    8110:	e1a00008 	mov	r0, r8
    8114:	eb006c64 	bl	232ac <CKernelOptions::GetWidth() const>
    8118:	e1a06000 	mov	r6, r0
    811c:	e1a00008 	mov	r0, r8
    8120:	e2847c1d 	add	r7, r4, #7424	; 0x1d00
    8124:	eb006c62 	bl	232b4 <CKernelOptions::GetHeight() const>
    8128:	e1a02000 	mov	r2, r0
    812c:	e2840e86 	add	r0, r4, #2144	; 0x860
    8130:	e3a03000 	mov	r3, #0
    8134:	e1a01006 	mov	r1, r6
    8138:	e2800004 	add	r0, r0, #4
    813c:	eb006e57 	bl	23aa0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8140:	e3a02000 	mov	r2, #0
    8144:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8148:	e1a01002 	mov	r1, r2
    814c:	e2800004 	add	r0, r0, #4
    8150:	e2846d6f 	add	r6, r4, #7104	; 0x1bc0
    8154:	eb007578 	bl	2573c <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>
    8158:	e2840d66 	add	r0, r4, #6528	; 0x1980
    815c:	e2800014 	add	r0, r0, #20
    8160:	e2866018 	add	r6, r6, #24
    8164:	eb007b06 	bl	26d84 <CExceptionHandler::CExceptionHandler()>
    8168:	e1a00005 	mov	r0, r5
    816c:	eb007bdd 	bl	270e8 <CInterruptSystem::CInterruptSystem()>
    8170:	e1a01005 	mov	r1, r5
    8174:	e1a00006 	mov	r0, r6
    8178:	e2877024 	add	r7, r7, #36	; 0x24
    817c:	eb006808 	bl	221a4 <CTimer::CTimer(CInterruptSystem*)>
    8180:	e1a00008 	mov	r0, r8
    8184:	eb006c4f 	bl	232c8 <CKernelOptions::GetLogLevel() const>
    8188:	e1a02006 	mov	r2, r6
    818c:	e1a01000 	mov	r1, r0
    8190:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8194:	eb0073e6 	bl	25134 <CLogger::CLogger(unsigned int, CTimer*)>
    8198:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    819c:	e1a02006 	mov	r2, r6
    81a0:	e1a01005 	mov	r1, r5
    81a4:	e280001c 	add	r0, r0, #28
    81a8:	eb000703 	bl	9dbc <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    81ac:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    81b0:	e2800008 	add	r0, r0, #8
    81b4:	eb0060c0 	bl	204bc <CScheduler::CScheduler()>
    81b8:	e3a03000 	mov	r3, #0
    81bc:	e58d3000 	str	r3, [sp]
    81c0:	e1a02003 	mov	r2, r3
    81c4:	e1a01003 	mov	r1, r3
    81c8:	e1a00007 	mov	r0, r7
    81cc:	eb0036e9 	bl	15d78 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*)>
    81d0:	e2840c1e 	add	r0, r4, #7680	; 0x1e00
    81d4:	e1a01007 	mov	r1, r7
    81d8:	e280003c 	add	r0, r0, #60	; 0x3c
    81dc:	eb0058ee 	bl	1e59c <CDNSClient::CDNSClient(CNetSubSystem*)>
    81e0:	e1a01005 	mov	r1, r5
    81e4:	e2840d79 	add	r0, r4, #7744	; 0x1e40
    81e8:	eb007e84 	bl	27c00 <CPWMSoundDevice::CPWMSoundDevice(CInterruptSystem*)>
    81ec:	e301cc54 	movw	ip, #7252	; 0x1c54
    81f0:	e340c003 	movt	ip, #3
    81f4:	e1a00009 	mov	r0, r9
    81f8:	e3a03f7d 	mov	r3, #500	; 0x1f4
    81fc:	e3a020c8 	mov	r2, #200	; 0xc8
    8200:	e3a01005 	mov	r1, #5
    8204:	e58c4000 	str	r4, [ip]
    8208:	eb0062f8 	bl	20df0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    820c:	e1a00004 	mov	r0, r4
    8210:	e28dd00c 	add	sp, sp, #12
    8214:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

00008218 <CKernel::Initialize()>:
    8218:	e92d4070 	push	{r4, r5, r6, lr}
    821c:	e2805e86 	add	r5, r0, #2144	; 0x860
    8220:	e2855004 	add	r5, r5, #4
    8224:	e1a04000 	mov	r4, r0
    8228:	e1a00005 	mov	r0, r5
    822c:	eb0071c9 	bl	24958 <CScreenDevice::Initialize()>
    8230:	e3500000 	cmp	r0, #0
    8234:	1a000001 	bne	8240 <CKernel::Initialize()+0x28>
    8238:	e3a00000 	mov	r0, #0
    823c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8240:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8244:	e3a01cc2 	mov	r1, #49664	; 0xc200
    8248:	e3401001 	movt	r1, #1
    824c:	e2800004 	add	r0, r0, #4
    8250:	eb007568 	bl	257f8 <CSerialDevice::Initialize(unsigned int)>
    8254:	e3500000 	cmp	r0, #0
    8258:	0afffff6 	beq	8238 <CKernel::Initialize()+0x20>
    825c:	e284001c 	add	r0, r4, #28
    8260:	eb006c15 	bl	232bc <CKernelOptions::GetLogDevice() const>
    8264:	e1a01000 	mov	r1, r0
    8268:	e2840e85 	add	r0, r4, #2128	; 0x850
    826c:	e3a02000 	mov	r2, #0
    8270:	e280000c 	add	r0, r0, #12
    8274:	eb00735c 	bl	24fec <CDeviceNameService::GetDevice(char const*, int)>
    8278:	e1a01005 	mov	r1, r5
    827c:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8280:	eb0074b2 	bl	25550 <CLogger::Initialize(CDevice*)>
    8284:	e3500000 	cmp	r0, #0
    8288:	0affffea 	beq	8238 <CKernel::Initialize()+0x20>
    828c:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8290:	e2800018 	add	r0, r0, #24
    8294:	eb007ba6 	bl	27134 <CInterruptSystem::Initialize()>
    8298:	e3500000 	cmp	r0, #0
    829c:	0affffe5 	beq	8238 <CKernel::Initialize()+0x20>
    82a0:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    82a4:	e2800018 	add	r0, r0, #24
    82a8:	eb006a29 	bl	22b54 <CTimer::Initialize()>
    82ac:	e3500000 	cmp	r0, #0
    82b0:	0affffe0 	beq	8238 <CKernel::Initialize()+0x20>
    82b4:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    82b8:	e280001c 	add	r0, r0, #28
    82bc:	eb000e8d 	bl	bcf8 <CDWHCIDevice::Initialize()>
    82c0:	e3500000 	cmp	r0, #0
    82c4:	0affffdb 	beq	8238 <CKernel::Initialize()+0x20>
    82c8:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    82cc:	e2800024 	add	r0, r0, #36	; 0x24
    82d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    82d4:	ea0036f4 	b	15eac <CNetSubSystem::Initialize()>

000082d8 <tfoo(unsigned int, void const*)>:
    82d8:	e92d4010 	push	{r4, lr}
    82dc:	e1a04001 	mov	r4, r1
    82e0:	e24dd008 	sub	sp, sp, #8
    82e4:	eb0073b1 	bl	251b0 <CLogger::Get()>
    82e8:	e594c000 	ldr	ip, [r4]
    82ec:	e3a02003 	mov	r2, #3
    82f0:	e30a3338 	movw	r3, #41784	; 0xa338
    82f4:	e3403002 	movt	r3, #2
    82f8:	e58dc000 	str	ip, [sp]
    82fc:	e30a1344 	movw	r1, #41796	; 0xa344
    8300:	e3401002 	movt	r1, #2
    8304:	eb007485 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8308:	e28dd008 	add	sp, sp, #8
    830c:	e8bd8010 	pop	{r4, pc}

00008310 <tfooinf(unsigned int, void const*)>:
    8310:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8314:	e30a5338 	movw	r5, #41784	; 0xa338
    8318:	e3405002 	movt	r5, #2
    831c:	e30a4344 	movw	r4, #41796	; 0xa344
    8320:	e3404002 	movt	r4, #2
    8324:	e24dd00c 	sub	sp, sp, #12
    8328:	e1a06001 	mov	r6, r1
    832c:	eb00739f 	bl	251b0 <CLogger::Get()>
    8330:	e5961000 	ldr	r1, [r6]
    8334:	e1a03005 	mov	r3, r5
    8338:	e3a02003 	mov	r2, #3
    833c:	e58d1000 	str	r1, [sp]
    8340:	e1a01004 	mov	r1, r4
    8344:	eb007475 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8348:	eb0061ec 	bl	20b00 <CScheduler::Get()>
    834c:	e3a01005 	mov	r1, #5
    8350:	eb0061a5 	bl	209ec <CScheduler::Sleep(unsigned int)>
    8354:	eafffff4 	b	832c <tfooinf(unsigned int, void const*)+0x1c>

00008358 <modifysong(char*, char*)>:
    8358:	e1d030d0 	ldrsb	r3, [r0]
    835c:	e3530000 	cmp	r3, #0
    8360:	0a000012 	beq	83b0 <modifysong(char*, char*)+0x58>
    8364:	e92d4010 	push	{r4, lr}
    8368:	e3a02000 	mov	r2, #0
    836c:	e3a04025 	mov	r4, #37	; 0x25
    8370:	e3a0e032 	mov	lr, #50	; 0x32
    8374:	e3a0c030 	mov	ip, #48	; 0x30
    8378:	e3530020 	cmp	r3, #32
    837c:	01a03001 	moveq	r3, r1
    8380:	17c13002 	strbne	r3, [r1, r2]
    8384:	12822001 	addne	r2, r2, #1
    8388:	07e34002 	strbeq	r4, [r3, r2]!
    838c:	02822003 	addeq	r2, r2, #3
    8390:	05c3e001 	strbeq	lr, [r3, #1]
    8394:	05c3c002 	strbeq	ip, [r3, #2]
    8398:	e1f030d1 	ldrsb	r3, [r0, #1]!
    839c:	e3530000 	cmp	r3, #0
    83a0:	1afffff4 	bne	8378 <modifysong(char*, char*)+0x20>
    83a4:	e3a03000 	mov	r3, #0
    83a8:	e7c13002 	strb	r3, [r1, r2]
    83ac:	e8bd8010 	pop	{r4, pc}
    83b0:	e1a02003 	mov	r2, r3
    83b4:	e3a03000 	mov	r3, #0
    83b8:	e7c13002 	strb	r3, [r1, r2]
    83bc:	e12fff1e 	bx	lr

000083c0 <CKernel::Run()>:
    83c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83c4:	e2805b07 	add	r5, r0, #7168	; 0x1c00
    83c8:	e1a04000 	mov	r4, r0
    83cc:	e24ddeff 	sub	sp, sp, #4080	; 0xff0
    83d0:	e1a00005 	mov	r0, r5
    83d4:	e24dd004 	sub	sp, sp, #4
    83d8:	e3a02003 	mov	r2, #3
    83dc:	e30a334c 	movw	r3, #41804	; 0xa34c
    83e0:	e3403002 	movt	r3, #2
    83e4:	e30a1330 	movw	r1, #41776	; 0xa330
    83e8:	e3401002 	movt	r1, #2
    83ec:	eb00744b 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    83f0:	e2840e85 	add	r0, r4, #2128	; 0x850
    83f4:	e280000c 	add	r0, r0, #12
    83f8:	e30a1370 	movw	r1, #41840	; 0xa370
    83fc:	e3401002 	movt	r1, #2
    8400:	e3a02000 	mov	r2, #0
    8404:	eb0072f8 	bl	24fec <CDeviceNameService::GetDevice(char const*, int)>
    8408:	e2506000 	subs	r6, r0, #0
    840c:	0a0000b3 	beq	86e0 <CKernel::Run()+0x320>
    8410:	e30817d4 	movw	r1, #34772	; 0x87d4
    8414:	e3401000 	movt	r1, #0
    8418:	eb0020b5 	bl	106f4 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>
    841c:	e28d0ebe 	add	r0, sp, #3040	; 0xbe0
    8420:	e1a01006 	mov	r1, r6
    8424:	e2800004 	add	r0, r0, #4
    8428:	eb0005e8 	bl	9bd0 <Keyboard::Keyboard(CUSBKeyboardDevice*)>
    842c:	e3a00008 	mov	r0, #8
    8430:	eb0066cd 	bl	21f6c <operator new(unsigned int)>
    8434:	e2847d73 	add	r7, r4, #7360	; 0x1cc0
    8438:	e1a08000 	mov	r8, r0
    843c:	eb005549 	bl	1d968 <CIPAddress::CIPAddress()>
    8440:	e2840c1e 	add	r0, r4, #7680	; 0x1e00
    8444:	e1a02008 	mov	r2, r8
    8448:	e280003c 	add	r0, r0, #60	; 0x3c
    844c:	e30a138c 	movw	r1, #41868	; 0xa38c
    8450:	e3401002 	movt	r1, #2
    8454:	e2877008 	add	r7, r7, #8
    8458:	eb00585f 	bl	1e5dc <CDNSClient::Resolve(char const*, CIPAddress*)>
    845c:	e30015dc 	movw	r1, #1500	; 0x5dc
    8460:	e1a00007 	mov	r0, r7
    8464:	eb006177 	bl	20a48 <CScheduler::MsSleep(unsigned int)>
    8468:	e3a00010 	mov	r0, #16
    846c:	eb0066be 	bl	21f6c <operator new(unsigned int)>
    8470:	e1a06000 	mov	r6, r0
    8474:	eb0076d4 	bl	25fcc <CString::CString()>
    8478:	e1a01006 	mov	r1, r6
    847c:	e1a00008 	mov	r0, r8
    8480:	e2848e86 	add	r8, r4, #2144	; 0x860
    8484:	eb005655 	bl	1dde0 <CIPAddress::Format(CString*) const>
    8488:	e1a00006 	mov	r0, r6
    848c:	eb0076e5 	bl	26028 <CString::operator char const*() const>
    8490:	e2846c1d 	add	r6, r4, #7424	; 0x1d00
    8494:	e3a02003 	mov	r2, #3
    8498:	e58d0000 	str	r0, [sp]
    849c:	e30a33a4 	movw	r3, #41892	; 0xa3a4
    84a0:	e3403002 	movt	r3, #2
    84a4:	e1a00005 	mov	r0, r5
    84a8:	e30a1330 	movw	r1, #41776	; 0xa330
    84ac:	e3401002 	movt	r1, #2
    84b0:	eb00741a 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    84b4:	e2866024 	add	r6, r6, #36	; 0x24
    84b8:	e28d001c 	add	r0, sp, #28
    84bc:	e2888004 	add	r8, r8, #4
    84c0:	eb0076c1 	bl	25fcc <CString::CString()>
    84c4:	e1a00006 	mov	r0, r6
    84c8:	eb0036d1 	bl	16014 <CNetSubSystem::GetConfig()>
    84cc:	e2844d79 	add	r4, r4, #7744	; 0x1e40
    84d0:	eb0054c8 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
    84d4:	e28d101c 	add	r1, sp, #28
    84d8:	eb005640 	bl	1dde0 <CIPAddress::Format(CString*) const>
    84dc:	e28d001c 	add	r0, sp, #28
    84e0:	eb0076d0 	bl	26028 <CString::operator char const*() const>
    84e4:	e3a02003 	mov	r2, #3
    84e8:	e58d0000 	str	r0, [sp]
    84ec:	e30a33b0 	movw	r3, #41904	; 0xa3b0
    84f0:	e3403002 	movt	r3, #2
    84f4:	e1a00005 	mov	r0, r5
    84f8:	e30a1330 	movw	r1, #41776	; 0xa330
    84fc:	e3401002 	movt	r1, #2
    8500:	eb007406 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8504:	e3010890 	movw	r0, #6288	; 0x1890
    8508:	eb006697 	bl	21f6c <operator new(unsigned int)>
    850c:	e3a0c000 	mov	ip, #0
    8510:	e3a0e050 	mov	lr, #80	; 0x50
    8514:	e1a0a000 	mov	sl, r0
    8518:	e58dc014 	str	ip, [sp, #20]
    851c:	e30a23c8 	movw	r2, #41928	; 0xa3c8
    8520:	e3402002 	movt	r2, #2
    8524:	e58dc010 	str	ip, [sp, #16]
    8528:	e1a01006 	mov	r1, r6
    852c:	e58dc00c 	str	ip, [sp, #12]
    8530:	e3a0c001 	mov	ip, #1
    8534:	e1a03008 	mov	r3, r8
    8538:	e58d2000 	str	r2, [sp]
    853c:	e98d5000 	stmib	sp, {ip, lr}
    8540:	e1a02004 	mov	r2, r4
    8544:	eb000145 	bl	8a60 <HTTPClient::HTTPClient(CNetSubSystem*, CPWMSoundDevice*, CScreenDevice*, char*, int, int, CSocket*, unsigned int, int)>
    8548:	e3a02003 	mov	r2, #3
    854c:	e1a00005 	mov	r0, r5
    8550:	e30a33cc 	movw	r3, #41932	; 0xa3cc
    8554:	e3403002 	movt	r3, #2
    8558:	e30a1330 	movw	r1, #41776	; 0xa330
    855c:	e3401002 	movt	r1, #2
    8560:	eb0073ee 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8564:	e59a2050 	ldr	r2, [sl, #80]	; 0x50
    8568:	e30a33e0 	movw	r3, #41952	; 0xa3e0
    856c:	e3403002 	movt	r3, #2
    8570:	e58d2000 	str	r2, [sp]
    8574:	e30a1330 	movw	r1, #41776	; 0xa330
    8578:	e3401002 	movt	r1, #2
    857c:	e3a02003 	mov	r2, #3
    8580:	e1a00005 	mov	r0, r5
    8584:	eb0073e5 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8588:	e28d0ebe 	add	r0, sp, #3040	; 0xbe0
    858c:	e2800004 	add	r0, r0, #4
    8590:	eb0005ba 	bl	9c80 <Keyboard::IsEndOfLine()>
    8594:	e3500000 	cmp	r0, #0
    8598:	0afffffa 	beq	8588 <CKernel::Run()+0x1c8>
    859c:	e59a3050 	ldr	r3, [sl, #80]	; 0x50
    85a0:	e1a00007 	mov	r0, r7
    85a4:	e3530001 	cmp	r3, #1
    85a8:	0a000001 	beq	85b4 <CKernel::Run()+0x1f4>
    85ac:	eb0060a5 	bl	20848 <CScheduler::Yield()>
    85b0:	eafffff4 	b	8588 <CKernel::Run()+0x1c8>
    85b4:	e28d902c 	add	r9, sp, #44	; 0x2c
    85b8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    85bc:	e3a01000 	mov	r1, #0
    85c0:	e1a00009 	mov	r0, r9
    85c4:	eb0069dc 	bl	22d3c <memset>
    85c8:	e59a1054 	ldr	r1, [sl, #84]	; 0x54
    85cc:	e1a00009 	mov	r0, r9
    85d0:	e3a0b05a 	mov	fp, #90	; 0x5a
    85d4:	eb006a1d 	bl	22e50 <strcpy>
    85d8:	e3a02003 	mov	r2, #3
    85dc:	e1a00005 	mov	r0, r5
    85e0:	e58d9000 	str	r9, [sp]
    85e4:	e30a3400 	movw	r3, #41984	; 0xa400
    85e8:	e3403002 	movt	r3, #2
    85ec:	e30a1330 	movw	r1, #41776	; 0xa330
    85f0:	e3401002 	movt	r1, #2
    85f4:	eb0073c9 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    85f8:	e3010890 	movw	r0, #6288	; 0x1890
    85fc:	eb00665a 	bl	21f6c <operator new(unsigned int)>
    8600:	e1a0a000 	mov	sl, r0
    8604:	e3a0c000 	mov	ip, #0
    8608:	e3a0e002 	mov	lr, #2
    860c:	e1a03008 	mov	r3, r8
    8610:	e58d9000 	str	r9, [sp]
    8614:	e1a02004 	mov	r2, r4
    8618:	e1a01006 	mov	r1, r6
    861c:	e58dc014 	str	ip, [sp, #20]
    8620:	e58dc010 	str	ip, [sp, #16]
    8624:	e58dc00c 	str	ip, [sp, #12]
    8628:	e58db008 	str	fp, [sp, #8]
    862c:	e58de004 	str	lr, [sp, #4]
    8630:	eb00010a 	bl	8a60 <HTTPClient::HTTPClient(CNetSubSystem*, CPWMSoundDevice*, CScreenDevice*, char*, int, int, CSocket*, unsigned int, int)>
    8634:	e59a3050 	ldr	r3, [sl, #80]	; 0x50
    8638:	e3530001 	cmp	r3, #1
    863c:	0a000004 	beq	8654 <CKernel::Run()+0x294>
    8640:	e1a00007 	mov	r0, r7
    8644:	eb00607f 	bl	20848 <CScheduler::Yield()>
    8648:	e59a3050 	ldr	r3, [sl, #80]	; 0x50
    864c:	e3530001 	cmp	r3, #1
    8650:	1afffffa 	bne	8640 <CKernel::Run()+0x280>
    8654:	e28d4e41 	add	r4, sp, #1040	; 0x410
    8658:	e28d6e7f 	add	r6, sp, #2032	; 0x7f0
    865c:	e2844004 	add	r4, r4, #4
    8660:	e286600c 	add	r6, r6, #12
    8664:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8668:	e3a01000 	mov	r1, #0
    866c:	e1a00004 	mov	r0, r4
    8670:	eb0069b1 	bl	22d3c <memset>
    8674:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8678:	e3a01000 	mov	r1, #0
    867c:	e1a00006 	mov	r0, r6
    8680:	eb0069ad 	bl	22d3c <memset>
    8684:	e59a1054 	ldr	r1, [sl, #84]	; 0x54
    8688:	e1a00004 	mov	r0, r4
    868c:	eb0069ef 	bl	22e50 <strcpy>
    8690:	e1a01006 	mov	r1, r6
    8694:	e1a00004 	mov	r0, r4
    8698:	ebffff2e 	bl	8358 <modifysong(char*, char*)>
    869c:	e3a02003 	mov	r2, #3
    86a0:	e1a00005 	mov	r0, r5
    86a4:	e58d4000 	str	r4, [sp]
    86a8:	e30a3428 	movw	r3, #42024	; 0xa428
    86ac:	e3403002 	movt	r3, #2
    86b0:	e30a1330 	movw	r1, #41776	; 0xa330
    86b4:	e3401002 	movt	r1, #2
    86b8:	eb007398 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    86bc:	e30a3428 	movw	r3, #42024	; 0xa428
    86c0:	e3403002 	movt	r3, #2
    86c4:	e30a1330 	movw	r1, #41776	; 0xa330
    86c8:	e3401002 	movt	r1, #2
    86cc:	e58d6000 	str	r6, [sp]
    86d0:	e1a00005 	mov	r0, r5
    86d4:	e3a02003 	mov	r2, #3
    86d8:	eb007390 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    86dc:	eafffffe 	b	86dc <CKernel::Run()+0x31c>
    86e0:	e1a00005 	mov	r0, r5
    86e4:	e3a02001 	mov	r2, #1
    86e8:	e30a3378 	movw	r3, #41848	; 0xa378
    86ec:	e3403002 	movt	r3, #2
    86f0:	e30a1330 	movw	r1, #41776	; 0xa330
    86f4:	e3401002 	movt	r1, #2
    86f8:	eb007388 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    86fc:	e3a00001 	mov	r0, #1
    8700:	e28ddeff 	add	sp, sp, #4080	; 0xff0
    8704:	e28dd004 	add	sp, sp, #4
    8708:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000870c <CKernel::TimerHandler(unsigned int, void*, void*)>:
    870c:	e3a03605 	mov	r3, #5242880	; 0x500000
    8710:	e12fff13 	bx	r3

00008714 <CKernel::~CKernel()>:
    8714:	e3013c54 	movw	r3, #7252	; 0x1c54
    8718:	e3403003 	movt	r3, #3
    871c:	e92d4010 	push	{r4, lr}
    8720:	e3a02000 	mov	r2, #0
    8724:	e1a04000 	mov	r4, r0
    8728:	e2800d79 	add	r0, r0, #7744	; 0x1e40
    872c:	e5832000 	str	r2, [r3]
    8730:	eb007ca2 	bl	279c0 <CPWMSoundDevice::~CPWMSoundDevice()>
    8734:	e2840c1e 	add	r0, r4, #7680	; 0x1e00
    8738:	e280003c 	add	r0, r0, #60	; 0x3c
    873c:	eb0057a5 	bl	1e5d8 <CDNSClient::~CDNSClient()>
    8740:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    8744:	e2800024 	add	r0, r0, #36	; 0x24
    8748:	eb0035c1 	bl	15e54 <CNetSubSystem::~CNetSubSystem()>
    874c:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    8750:	e2800008 	add	r0, r0, #8
    8754:	eb005fbb 	bl	20648 <CScheduler::~CScheduler()>
    8758:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    875c:	e280001c 	add	r0, r0, #28
    8760:	eb000561 	bl	9cec <CDWHCIDevice::~CDWHCIDevice()>
    8764:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8768:	eb007284 	bl	25180 <CLogger::~CLogger()>
    876c:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    8770:	e2800018 	add	r0, r0, #24
    8774:	eb0066aa 	bl	22224 <CTimer::~CTimer()>
    8778:	e2840d66 	add	r0, r4, #6528	; 0x1980
    877c:	e2800018 	add	r0, r0, #24
    8780:	eb007a66 	bl	27120 <CInterruptSystem::~CInterruptSystem()>
    8784:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8788:	e2800014 	add	r0, r0, #20
    878c:	eb0079a0 	bl	26e14 <CExceptionHandler::~CExceptionHandler()>
    8790:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8794:	e2800004 	add	r0, r0, #4
    8798:	eb0075a3 	bl	25e2c <CSerialDevice::~CSerialDevice()>
    879c:	e2840e86 	add	r0, r4, #2144	; 0x860
    87a0:	e2800004 	add	r0, r0, #4
    87a4:	eb006c70 	bl	2396c <CScreenDevice::~CScreenDevice()>
    87a8:	e2840e85 	add	r0, r4, #2128	; 0x850
    87ac:	e280000c 	add	r0, r0, #12
    87b0:	eb0071c3 	bl	24ec4 <CDeviceNameService::~CDeviceNameService()>
    87b4:	e284001c 	add	r0, r4, #28
    87b8:	eb006ab6 	bl	23298 <CKernelOptions::~CKernelOptions()>
    87bc:	e2840010 	add	r0, r4, #16
    87c0:	eb00611e 	bl	20c40 <CActLED::~CActLED()>
    87c4:	e1a00004 	mov	r0, r4
    87c8:	eb006549 	bl	21cf4 <CMemorySystem::~CMemorySystem()>
    87cc:	e1a00004 	mov	r0, r4
    87d0:	e8bd8010 	pop	{r4, pc}

000087d4 <CKernel::KeyPressedHandler(char const*)>:
    87d4:	e92d4070 	push	{r4, r5, r6, lr}
    87d8:	e3016c54 	movw	r6, #7252	; 0x1c54
    87dc:	e3406003 	movt	r6, #3
    87e0:	e1a04000 	mov	r4, r0
    87e4:	e5963000 	ldr	r3, [r6]
    87e8:	e3530000 	cmp	r3, #0
    87ec:	0a000024 	beq	8884 <CKernel::KeyPressedHandler(char const*)+0xb0>
    87f0:	e1a00004 	mov	r0, r4
    87f4:	eb006970 	bl	22dbc <strlen>
    87f8:	e1a05000 	mov	r5, r0
    87fc:	e5960000 	ldr	r0, [r6]
    8800:	e1a02005 	mov	r2, r5
    8804:	e1a01004 	mov	r1, r4
    8808:	e2800e86 	add	r0, r0, #2144	; 0x860
    880c:	e2800004 	add	r0, r0, #4
    8810:	eb007020 	bl	24898 <CScreenDevice::Write(void const*, unsigned int)>
    8814:	eb0004fa 	bl	9c04 <Keyboard::Get()>
    8818:	e2506000 	subs	r6, r0, #0
    881c:	0a000011 	beq	8868 <CKernel::KeyPressedHandler(char const*)+0x94>
    8820:	e1a00006 	mov	r0, r6
    8824:	eb000515 	bl	9c80 <Keyboard::IsEndOfLine()>
    8828:	e3500000 	cmp	r0, #0
    882c:	1a000008 	bne	8854 <CKernel::KeyPressedHandler(char const*)+0x80>
    8830:	e3550000 	cmp	r5, #0
    8834:	08bd8070 	popeq	{r4, r5, r6, pc}
    8838:	e0845005 	add	r5, r4, r5
    883c:	e0d410d1 	ldrsb	r1, [r4], #1
    8840:	e1a00006 	mov	r0, r6
    8844:	eb0004f2 	bl	9c14 <Keyboard::AppendToBuffer(char)>
    8848:	e1540005 	cmp	r4, r5
    884c:	1afffffa 	bne	883c <CKernel::KeyPressedHandler(char const*)+0x68>
    8850:	e8bd8070 	pop	{r4, r5, r6, pc}
    8854:	e1a00006 	mov	r0, r6
    8858:	eb000504 	bl	9c70 <Keyboard::ClearBuffer()>
    885c:	e3550000 	cmp	r5, #0
    8860:	1afffff4 	bne	8838 <CKernel::KeyPressedHandler(char const*)+0x64>
    8864:	e8bd8070 	pop	{r4, r5, r6, pc}
    8868:	e30a1450 	movw	r1, #42064	; 0xa450
    886c:	e3401002 	movt	r1, #2
    8870:	e30a046c 	movw	r0, #42092	; 0xa46c
    8874:	e3400002 	movt	r0, #2
    8878:	e300211d 	movw	r2, #285	; 0x11d
    887c:	eb0070c6 	bl	24b9c <assertion_failed>
    8880:	eaffffe6 	b	8820 <CKernel::KeyPressedHandler(char const*)+0x4c>
    8884:	e30a1450 	movw	r1, #42064	; 0xa450
    8888:	e3401002 	movt	r1, #2
    888c:	e30a045c 	movw	r0, #42076	; 0xa45c
    8890:	e3400002 	movt	r0, #2
    8894:	e3a02f46 	mov	r2, #280	; 0x118
    8898:	eb0070bf 	bl	24b9c <assertion_failed>
    889c:	eaffffd3 	b	87f0 <CKernel::KeyPressedHandler(char const*)+0x1c>

000088a0 <Thread::Run()>:
    88a0:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    88a4:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    88a8:	e5900054 	ldr	r0, [r0, #84]	; 0x54
    88ac:	e12fff13 	bx	r3

000088b0 <Thread::~Thread()>:
    88b0:	e59f2020 	ldr	r2, [pc, #32]	; 88d8 <Thread::~Thread()+0x28>
    88b4:	e3a03000 	mov	r3, #0
    88b8:	e92d4010 	push	{r4, lr}
    88bc:	e1a04000 	mov	r4, r0
    88c0:	e5802000 	str	r2, [r0]
    88c4:	e5803050 	str	r3, [r0, #80]	; 0x50
    88c8:	e5803058 	str	r3, [r0, #88]	; 0x58
    88cc:	eb005e7e 	bl	202cc <CTask::~CTask()>
    88d0:	e1a00004 	mov	r0, r4
    88d4:	e8bd8010 	pop	{r4, pc}
    88d8:	0002a484 	.word	0x0002a484

000088dc <Thread::~Thread()>:
    88dc:	e59f202c 	ldr	r2, [pc, #44]	; 8910 <Thread::~Thread()+0x34>
    88e0:	e3a03000 	mov	r3, #0
    88e4:	e92d4010 	push	{r4, lr}
    88e8:	e1a04000 	mov	r4, r0
    88ec:	e5802000 	str	r2, [r0]
    88f0:	e5803050 	str	r3, [r0, #80]	; 0x50
    88f4:	e5803058 	str	r3, [r0, #88]	; 0x58
    88f8:	eb005e73 	bl	202cc <CTask::~CTask()>
    88fc:	e1a00004 	mov	r0, r4
    8900:	e3a0105c 	mov	r1, #92	; 0x5c
    8904:	eb00659c 	bl	21f7c <operator delete(void*, unsigned int)>
    8908:	e1a00004 	mov	r0, r4
    890c:	e8bd8010 	pop	{r4, pc}
    8910:	0002a484 	.word	0x0002a484

00008914 <Thread::Thread(void (*)(unsigned int, void const*), unsigned int, void const*)>:
    8914:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8918:	e1a04000 	mov	r4, r0
    891c:	e1a07001 	mov	r7, r1
    8920:	e3a01901 	mov	r1, #16384	; 0x4000
    8924:	e1a06002 	mov	r6, r2
    8928:	e1a05003 	mov	r5, r3
    892c:	eb005eb6 	bl	2040c <CTask::CTask(unsigned int)>
    8930:	e59f1014 	ldr	r1, [pc, #20]	; 894c <Thread::Thread(void (*)(unsigned int, void const*), unsigned int, void const*)+0x38>
    8934:	e1a00004 	mov	r0, r4
    8938:	e5847050 	str	r7, [r4, #80]	; 0x50
    893c:	e5846054 	str	r6, [r4, #84]	; 0x54
    8940:	e5845058 	str	r5, [r4, #88]	; 0x58
    8944:	e5841000 	str	r1, [r4]
    8948:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    894c:	0002a484 	.word	0x0002a484

00008950 <HTTPClient::~HTTPClient()>:
    8950:	e59f2038 	ldr	r2, [pc, #56]	; 8990 <HTTPClient::~HTTPClient()+0x40>
    8954:	e3a03001 	mov	r3, #1
    8958:	e92d4010 	push	{r4, lr}
    895c:	e1a04000 	mov	r4, r0
    8960:	e1a01003 	mov	r1, r3
    8964:	e5802000 	str	r2, [r0]
    8968:	e5803050 	str	r3, [r0, #80]	; 0x50
    896c:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    8970:	eb006581 	bl	21f7c <operator delete(void*, unsigned int)>
    8974:	e3a03000 	mov	r3, #0
    8978:	e5843070 	str	r3, [r4, #112]	; 0x70
    897c:	e1a00004 	mov	r0, r4
    8980:	e5843058 	str	r3, [r4, #88]	; 0x58
    8984:	eb005e50 	bl	202cc <CTask::~CTask()>
    8988:	e1a00004 	mov	r0, r4
    898c:	e8bd8010 	pop	{r4, pc}
    8990:	0002a498 	.word	0x0002a498

00008994 <HTTPClient::~HTTPClient()>:
    8994:	e92d4010 	push	{r4, lr}
    8998:	e1a04000 	mov	r4, r0
    899c:	ebffffeb 	bl	8950 <HTTPClient::~HTTPClient()>
    89a0:	e1a00004 	mov	r0, r4
    89a4:	e3011890 	movw	r1, #6288	; 0x1890
    89a8:	eb006573 	bl	21f7c <operator delete(void*, unsigned int)>
    89ac:	e1a00004 	mov	r0, r4
    89b0:	e8bd8010 	pop	{r4, pc}

000089b4 <my_strstr(char*, char const*, int&)>:
    89b4:	e3510000 	cmp	r1, #0
    89b8:	13500000 	cmpne	r0, #0
    89bc:	e3a03000 	mov	r3, #0
    89c0:	e5823000 	str	r3, [r2]
    89c4:	0a000023 	beq	8a58 <my_strstr(char*, char const*, int&)+0xa4>
    89c8:	e92d4070 	push	{r4, r5, r6, lr}
    89cc:	e1d0e0d0 	ldrsb	lr, [r0]
    89d0:	e15e0003 	cmp	lr, r3
    89d4:	0a00001b 	beq	8a48 <my_strstr(char*, char const*, int&)+0x94>
    89d8:	e1d160d0 	ldrsb	r6, [r1]
    89dc:	e16f3f16 	clz	r3, r6
    89e0:	e1a0c006 	mov	ip, r6
    89e4:	e1a032a3 	lsr	r3, r3, #5
    89e8:	e15e0006 	cmp	lr, r6
    89ec:	13833001 	orrne	r3, r3, #1
    89f0:	e3530000 	cmp	r3, #0
    89f4:	01a05001 	moveq	r5, r1
    89f8:	01a04000 	moveq	r4, r0
    89fc:	0a000007 	beq	8a20 <my_strstr(char*, char const*, int&)+0x6c>
    8a00:	ea00000a 	b	8a30 <my_strstr(char*, char const*, int&)+0x7c>
    8a04:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
    8a08:	e16f3f1c 	clz	r3, ip
    8a0c:	e1a032a3 	lsr	r3, r3, #5
    8a10:	e15e000c 	cmp	lr, ip
    8a14:	13833001 	orrne	r3, r3, #1
    8a18:	e3530000 	cmp	r3, #0
    8a1c:	1a000003 	bne	8a30 <my_strstr(char*, char const*, int&)+0x7c>
    8a20:	e1f4e0d1 	ldrsb	lr, [r4, #1]!
    8a24:	e35e0000 	cmp	lr, #0
    8a28:	1afffff5 	bne	8a04 <my_strstr(char*, char const*, int&)+0x50>
    8a2c:	e1d5c0d1 	ldrsb	ip, [r5, #1]
    8a30:	e35c0000 	cmp	ip, #0
    8a34:	08bd8070 	popeq	{r4, r5, r6, pc}
    8a38:	e1d0e0d1 	ldrsb	lr, [r0, #1]
    8a3c:	e2800001 	add	r0, r0, #1
    8a40:	e35e0000 	cmp	lr, #0
    8a44:	1affffe4 	bne	89dc <my_strstr(char*, char const*, int&)+0x28>
    8a48:	e3a03001 	mov	r3, #1
    8a4c:	e3a00000 	mov	r0, #0
    8a50:	e5823000 	str	r3, [r2]
    8a54:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a58:	e1a00003 	mov	r0, r3
    8a5c:	e12fff1e 	bx	lr

00008a60 <HTTPClient::HTTPClient(CNetSubSystem*, CPWMSoundDevice*, CScreenDevice*, char*, int, int, CSocket*, unsigned int, int)>:
    8a60:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a64:	e1a0a001 	mov	sl, r1
    8a68:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
    8a6c:	e3a01901 	mov	r1, #16384	; 0x4000
    8a70:	e1a04000 	mov	r4, r0
    8a74:	e1a0b002 	mov	fp, r2
    8a78:	e1a06003 	mov	r6, r3
    8a7c:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
    8a80:	e59d8030 	ldr	r8, [sp, #48]	; 0x30
    8a84:	e59d9034 	ldr	r9, [sp, #52]	; 0x34
    8a88:	eb005e5f 	bl	2040c <CTask::CTask(unsigned int)>
    8a8c:	e3550000 	cmp	r5, #0
    8a90:	e59f2048 	ldr	r2, [pc, #72]	; 8ae0 <HTTPClient::HTTPClient(CNetSubSystem*, CPWMSoundDevice*, CScreenDevice*, char*, int, int, CSocket*, unsigned int, int)+0x80>
    8a94:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
    8a98:	e3a01000 	mov	r1, #0
    8a9c:	e584a058 	str	sl, [r4, #88]	; 0x58
    8aa0:	e584905c 	str	r9, [r4, #92]	; 0x5c
    8aa4:	e5846060 	str	r6, [r4, #96]	; 0x60
    8aa8:	e5845064 	str	r5, [r4, #100]	; 0x64
    8aac:	e1c486b8 	strh	r8, [r4, #104]	; 0x68
    8ab0:	e584b06c 	str	fp, [r4, #108]	; 0x6c
    8ab4:	e5847078 	str	r7, [r4, #120]	; 0x78
    8ab8:	e584307c 	str	r3, [r4, #124]	; 0x7c
    8abc:	e5842000 	str	r2, [r4]
    8ac0:	e5841070 	str	r1, [r4, #112]	; 0x70
    8ac4:	e5841050 	str	r1, [r4, #80]	; 0x50
    8ac8:	0a000002 	beq	8ad8 <HTTPClient::HTTPClient(CNetSubSystem*, CPWMSoundDevice*, CScreenDevice*, char*, int, int, CSocket*, unsigned int, int)+0x78>
    8acc:	e1a00005 	mov	r0, r5
    8ad0:	eb006526 	bl	21f70 <operator new[](unsigned int)>
    8ad4:	e5840070 	str	r0, [r4, #112]	; 0x70
    8ad8:	e1a00004 	mov	r0, r4
    8adc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ae0:	0002a498 	.word	0x0002a498

00008ae4 <HTTPClient::GetLinkForPhase2()>:
    8ae4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ae8:	e24ddffe 	sub	sp, sp, #1016	; 0x3f8
    8aec:	eb0071af 	bl	251b0 <CLogger::Get()>
    8af0:	e30a34b0 	movw	r3, #42160	; 0xa4b0
    8af4:	e3403002 	movt	r3, #2
    8af8:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    8afc:	e3401002 	movt	r1, #2
    8b00:	e3a02004 	mov	r2, #4
    8b04:	eb007285 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8b08:	e3010c5c 	movw	r0, #7260	; 0x1c5c
    8b0c:	e3400003 	movt	r0, #3
    8b10:	e3a03000 	mov	r3, #0
    8b14:	e58d300c 	str	r3, [sp, #12]
    8b18:	e1d030d0 	ldrsb	r3, [r0]
    8b1c:	e3530000 	cmp	r3, #0
    8b20:	0a000016 	beq	8b80 <HTTPClient::GetLinkForPhase2()+0x9c>
    8b24:	e353003c 	cmp	r3, #60	; 0x3c
    8b28:	01a0e000 	moveq	lr, r0
    8b2c:	059f2188 	ldreq	r2, [pc, #392]	; 8cbc <HTTPClient::GetLinkForPhase2()+0x1d8>
    8b30:	0a000007 	beq	8b54 <HTTPClient::GetLinkForPhase2()+0x70>
    8b34:	ea00000d 	b	8b70 <HTTPClient::GetLinkForPhase2()+0x8c>
    8b38:	e0d2c0d1 	ldrsb	ip, [r2], #1
    8b3c:	e16f3f1c 	clz	r3, ip
    8b40:	e1a032a3 	lsr	r3, r3, #5
    8b44:	e151000c 	cmp	r1, ip
    8b48:	13833001 	orrne	r3, r3, #1
    8b4c:	e3530000 	cmp	r3, #0
    8b50:	1a000003 	bne	8b64 <HTTPClient::GetLinkForPhase2()+0x80>
    8b54:	e1fe10d1 	ldrsb	r1, [lr, #1]!
    8b58:	e1a04002 	mov	r4, r2
    8b5c:	e3510000 	cmp	r1, #0
    8b60:	1afffff4 	bne	8b38 <HTTPClient::GetLinkForPhase2()+0x54>
    8b64:	e1d430d0 	ldrsb	r3, [r4]
    8b68:	e3530000 	cmp	r3, #0
    8b6c:	0a000050 	beq	8cb4 <HTTPClient::GetLinkForPhase2()+0x1d0>
    8b70:	e1d030d1 	ldrsb	r3, [r0, #1]
    8b74:	e2800001 	add	r0, r0, #1
    8b78:	e3530000 	cmp	r3, #0
    8b7c:	1affffe8 	bne	8b24 <HTTPClient::GetLinkForPhase2()+0x40>
    8b80:	e3a03001 	mov	r3, #1
    8b84:	e3a04000 	mov	r4, #0
    8b88:	e58d300c 	str	r3, [sp, #12]
    8b8c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8b90:	e3a01000 	mov	r1, #0
    8b94:	e28d0010 	add	r0, sp, #16
    8b98:	e30a74dc 	movw	r7, #42204	; 0xa4dc
    8b9c:	e3407002 	movt	r7, #2
    8ba0:	e30a54f8 	movw	r5, #42232	; 0xa4f8
    8ba4:	e3405002 	movt	r5, #2
    8ba8:	e30a64c8 	movw	r6, #42184	; 0xa4c8
    8bac:	e3406002 	movt	r6, #2
    8bb0:	e59f8108 	ldr	r8, [pc, #264]	; 8cc0 <HTTPClient::GetLinkForPhase2()+0x1dc>
    8bb4:	eb006860 	bl	22d3c <memset>
    8bb8:	e1a00004 	mov	r0, r4
    8bbc:	e28d200c 	add	r2, sp, #12
    8bc0:	e1a01007 	mov	r1, r7
    8bc4:	ebffff7a 	bl	89b4 <my_strstr(char*, char const*, int&)>
    8bc8:	e28d200c 	add	r2, sp, #12
    8bcc:	e1a01007 	mov	r1, r7
    8bd0:	ebffff77 	bl	89b4 <my_strstr(char*, char const*, int&)>
    8bd4:	e28d200c 	add	r2, sp, #12
    8bd8:	e30a14f0 	movw	r1, #42224	; 0xa4f0
    8bdc:	e3401002 	movt	r1, #2
    8be0:	ebffff73 	bl	89b4 <my_strstr(char*, char const*, int&)>
    8be4:	e28d2008 	add	r2, sp, #8
    8be8:	e1a01005 	mov	r1, r5
    8bec:	eb0068d6 	bl	22f4c <strtok_r>
    8bf0:	e28d2008 	add	r2, sp, #8
    8bf4:	e1a01005 	mov	r1, r5
    8bf8:	e3a00000 	mov	r0, #0
    8bfc:	eb0068d2 	bl	22f4c <strtok_r>
    8c00:	e1a04000 	mov	r4, r0
    8c04:	eb007169 	bl	251b0 <CLogger::Get()>
    8c08:	e3a02004 	mov	r2, #4
    8c0c:	e58d4000 	str	r4, [sp]
    8c10:	e1a01006 	mov	r1, r6
    8c14:	e30a34fc 	movw	r3, #42236	; 0xa4fc
    8c18:	e3403002 	movt	r3, #2
    8c1c:	eb00723f 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8c20:	e1a01004 	mov	r1, r4
    8c24:	e2480008 	sub	r0, r8, #8
    8c28:	eb006888 	bl	22e50 <strcpy>
    8c2c:	e28d200c 	add	r2, sp, #12
    8c30:	e30a150c 	movw	r1, #42252	; 0xa50c
    8c34:	e3401002 	movt	r1, #2
    8c38:	e59d0008 	ldr	r0, [sp, #8]
    8c3c:	ebffff5c 	bl	89b4 <my_strstr(char*, char const*, int&)>
    8c40:	e28d200c 	add	r2, sp, #12
    8c44:	e30a1528 	movw	r1, #42280	; 0xa528
    8c48:	e3401002 	movt	r1, #2
    8c4c:	ebffff58 	bl	89b4 <my_strstr(char*, char const*, int&)>
    8c50:	e28d2008 	add	r2, sp, #8
    8c54:	e30a1544 	movw	r1, #42308	; 0xa544
    8c58:	e3401002 	movt	r1, #2
    8c5c:	eb0068ba 	bl	22f4c <strtok_r>
    8c60:	e28d2008 	add	r2, sp, #8
    8c64:	e1a01005 	mov	r1, r5
    8c68:	e3a00000 	mov	r0, #0
    8c6c:	eb0068b6 	bl	22f4c <strtok_r>
    8c70:	e1a04000 	mov	r4, r0
    8c74:	eb00714d 	bl	251b0 <CLogger::Get()>
    8c78:	e58d4000 	str	r4, [sp]
    8c7c:	e3a02004 	mov	r2, #4
    8c80:	e1a01006 	mov	r1, r6
    8c84:	e30a3548 	movw	r3, #42312	; 0xa548
    8c88:	e3403002 	movt	r3, #2
    8c8c:	eb007223 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8c90:	e1a00004 	mov	r0, r4
    8c94:	e30a156c 	movw	r1, #42348	; 0xa56c
    8c98:	e3401002 	movt	r1, #2
    8c9c:	e59d4008 	ldr	r4, [sp, #8]
    8ca0:	eb00684f 	bl	22de4 <strcmp>
    8ca4:	e3500000 	cmp	r0, #0
    8ca8:	1affffc2 	bne	8bb8 <HTTPClient::GetLinkForPhase2()+0xd4>
    8cac:	e28ddffe 	add	sp, sp, #1016	; 0x3f8
    8cb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8cb4:	e1a04000 	mov	r4, r0
    8cb8:	eaffffb3 	b	8b8c <HTTPClient::GetLinkForPhase2()+0xa8>
    8cbc:	0002a4d5 	.word	0x0002a4d5
    8cc0:	01431c64 	.word	0x01431c64

00008cc4 <HTTPClient::GetDownloadLink()>:
    8cc4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8cc8:	e3014c5c 	movw	r4, #7260	; 0x1c5c
    8ccc:	e3404003 	movt	r4, #3
    8cd0:	e24ddffe 	sub	sp, sp, #1016	; 0x3f8
    8cd4:	eb007135 	bl	251b0 <CLogger::Get()>
    8cd8:	e3a02004 	mov	r2, #4
    8cdc:	e30a3574 	movw	r3, #42356	; 0xa574
    8ce0:	e3403002 	movt	r3, #2
    8ce4:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    8ce8:	e3401002 	movt	r1, #2
    8cec:	eb00720b 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8cf0:	e1d430d0 	ldrsb	r3, [r4]
    8cf4:	e3a02000 	mov	r2, #0
    8cf8:	e1530002 	cmp	r3, r2
    8cfc:	e58d200c 	str	r2, [sp, #12]
    8d00:	0a000017 	beq	8d64 <HTTPClient::GetDownloadLink()+0xa0>
    8d04:	e1a05004 	mov	r5, r4
    8d08:	e353003c 	cmp	r3, #60	; 0x3c
    8d0c:	01a0c005 	moveq	ip, r5
    8d10:	059f2344 	ldreq	r2, [pc, #836]	; 905c <HTTPClient::GetDownloadLink()+0x398>
    8d14:	0a000007 	beq	8d38 <HTTPClient::GetDownloadLink()+0x74>
    8d18:	ea00000d 	b	8d54 <HTTPClient::GetDownloadLink()+0x90>
    8d1c:	e0d200d1 	ldrsb	r0, [r2], #1
    8d20:	e16f3f10 	clz	r3, r0
    8d24:	e1a032a3 	lsr	r3, r3, #5
    8d28:	e1510000 	cmp	r1, r0
    8d2c:	13833001 	orrne	r3, r3, #1
    8d30:	e3530000 	cmp	r3, #0
    8d34:	1a000003 	bne	8d48 <HTTPClient::GetDownloadLink()+0x84>
    8d38:	e1fc10d1 	ldrsb	r1, [ip, #1]!
    8d3c:	e1a0e002 	mov	lr, r2
    8d40:	e3510000 	cmp	r1, #0
    8d44:	1afffff4 	bne	8d1c <HTTPClient::GetDownloadLink()+0x58>
    8d48:	e1de60d0 	ldrsb	r6, [lr]
    8d4c:	e3560000 	cmp	r6, #0
    8d50:	0a000068 	beq	8ef8 <HTTPClient::GetDownloadLink()+0x234>
    8d54:	e1d530d1 	ldrsb	r3, [r5, #1]
    8d58:	e2855001 	add	r5, r5, #1
    8d5c:	e3530000 	cmp	r3, #0
    8d60:	1affffe8 	bne	8d08 <HTTPClient::GetDownloadLink()+0x44>
    8d64:	e3a03001 	mov	r3, #1
    8d68:	e58d300c 	str	r3, [sp, #12]
    8d6c:	eb00710f 	bl	251b0 <CLogger::Get()>
    8d70:	e3a02004 	mov	r2, #4
    8d74:	e30a35b0 	movw	r3, #42416	; 0xa5b0
    8d78:	e3403002 	movt	r3, #2
    8d7c:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    8d80:	e3401002 	movt	r1, #2
    8d84:	eb0071e5 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8d88:	e1d430d0 	ldrsb	r3, [r4]
    8d8c:	e3a02000 	mov	r2, #0
    8d90:	e1530002 	cmp	r3, r2
    8d94:	e58d200c 	str	r2, [sp, #12]
    8d98:	0a000018 	beq	8e00 <HTTPClient::GetDownloadLink()+0x13c>
    8d9c:	e301ec5c 	movw	lr, #7260	; 0x1c5c
    8da0:	e340e003 	movt	lr, #3
    8da4:	e353003c 	cmp	r3, #60	; 0x3c
    8da8:	01a0000e 	moveq	r0, lr
    8dac:	059f22ac 	ldreq	r2, [pc, #684]	; 9060 <HTTPClient::GetDownloadLink()+0x39c>
    8db0:	0a000007 	beq	8dd4 <HTTPClient::GetDownloadLink()+0x110>
    8db4:	ea00000d 	b	8df0 <HTTPClient::GetDownloadLink()+0x12c>
    8db8:	e0d210d1 	ldrsb	r1, [r2], #1
    8dbc:	e0533001 	subs	r3, r3, r1
    8dc0:	13a03001 	movne	r3, #1
    8dc4:	e3510000 	cmp	r1, #0
    8dc8:	03833001 	orreq	r3, r3, #1
    8dcc:	e3530000 	cmp	r3, #0
    8dd0:	1a000003 	bne	8de4 <HTTPClient::GetDownloadLink()+0x120>
    8dd4:	e1f030d1 	ldrsb	r3, [r0, #1]!
    8dd8:	e1a0c002 	mov	ip, r2
    8ddc:	e3530000 	cmp	r3, #0
    8de0:	1afffff4 	bne	8db8 <HTTPClient::GetDownloadLink()+0xf4>
    8de4:	e1dc30d0 	ldrsb	r3, [ip]
    8de8:	e3530000 	cmp	r3, #0
    8dec:	0a000098 	beq	9054 <HTTPClient::GetDownloadLink()+0x390>
    8df0:	e1de30d1 	ldrsb	r3, [lr, #1]
    8df4:	e28ee001 	add	lr, lr, #1
    8df8:	e3530000 	cmp	r3, #0
    8dfc:	1affffe8 	bne	8da4 <HTTPClient::GetDownloadLink()+0xe0>
    8e00:	e3a03001 	mov	r3, #1
    8e04:	e3a04000 	mov	r4, #0
    8e08:	e58d300c 	str	r3, [sp, #12]
    8e0c:	e30aa5b8 	movw	sl, #42424	; 0xa5b8
    8e10:	e340a002 	movt	sl, #2
    8e14:	e30a95e0 	movw	r9, #42464	; 0xa5e0
    8e18:	e3409002 	movt	r9, #2
    8e1c:	e30a74f8 	movw	r7, #42232	; 0xa4f8
    8e20:	e3407002 	movt	r7, #2
    8e24:	e28d600c 	add	r6, sp, #12
    8e28:	e28d5008 	add	r5, sp, #8
    8e2c:	e28d8010 	add	r8, sp, #16
    8e30:	e1a00004 	mov	r0, r4
    8e34:	e1a02006 	mov	r2, r6
    8e38:	e1a0100a 	mov	r1, sl
    8e3c:	ebfffedc 	bl	89b4 <my_strstr(char*, char const*, int&)>
    8e40:	e1a02006 	mov	r2, r6
    8e44:	e1a01009 	mov	r1, r9
    8e48:	ebfffed9 	bl	89b4 <my_strstr(char*, char const*, int&)>
    8e4c:	e1a02005 	mov	r2, r5
    8e50:	e1a01007 	mov	r1, r7
    8e54:	eb00683c 	bl	22f4c <strtok_r>
    8e58:	e1a02005 	mov	r2, r5
    8e5c:	e1a01007 	mov	r1, r7
    8e60:	e3a00000 	mov	r0, #0
    8e64:	eb006838 	bl	22f4c <strtok_r>
    8e68:	e1a04000 	mov	r4, r0
    8e6c:	eb0070cf 	bl	251b0 <CLogger::Get()>
    8e70:	e3a02004 	mov	r2, #4
    8e74:	e58d4000 	str	r4, [sp]
    8e78:	e30a35e8 	movw	r3, #42472	; 0xa5e8
    8e7c:	e3403002 	movt	r3, #2
    8e80:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    8e84:	e3401002 	movt	r1, #2
    8e88:	eb0071a4 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8e8c:	e1a01004 	mov	r1, r4
    8e90:	e1a00008 	mov	r0, r8
    8e94:	eb0067ed 	bl	22e50 <strcpy>
    8e98:	e1a00004 	mov	r0, r4
    8e9c:	eb0067c6 	bl	22dbc <strlen>
    8ea0:	e2400003 	sub	r0, r0, #3
    8ea4:	e0840000 	add	r0, r4, r0
    8ea8:	e30a15f4 	movw	r1, #42484	; 0xa5f4
    8eac:	e3401002 	movt	r1, #2
    8eb0:	e59d4008 	ldr	r4, [sp, #8]
    8eb4:	eb0067ca 	bl	22de4 <strcmp>
    8eb8:	e3500000 	cmp	r0, #0
    8ebc:	1affffdb 	bne	8e30 <HTTPClient::GetDownloadLink()+0x16c>
    8ec0:	eb0070ba 	bl	251b0 <CLogger::Get()>
    8ec4:	e3a02004 	mov	r2, #4
    8ec8:	e58d8000 	str	r8, [sp]
    8ecc:	e30a35e8 	movw	r3, #42472	; 0xa5e8
    8ed0:	e3403002 	movt	r3, #2
    8ed4:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    8ed8:	e3401002 	movt	r1, #2
    8edc:	eb00718f 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8ee0:	e1a01008 	mov	r1, r8
    8ee4:	e59f0178 	ldr	r0, [pc, #376]	; 9064 <HTTPClient::GetDownloadLink()+0x3a0>
    8ee8:	eb0067d8 	bl	22e50 <strcpy>
    8eec:	e3a00000 	mov	r0, #0
    8ef0:	e28ddffe 	add	sp, sp, #1016	; 0x3f8
    8ef4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8ef8:	eb0070ac 	bl	251b0 <CLogger::Get()>
    8efc:	e30a35f8 	movw	r3, #42488	; 0xa5f8
    8f00:	e3403002 	movt	r3, #2
    8f04:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    8f08:	e3401002 	movt	r1, #2
    8f0c:	e3a02004 	mov	r2, #4
    8f10:	eb007182 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8f14:	e1d430d0 	ldrsb	r3, [r4]
    8f18:	e58d600c 	str	r6, [sp, #12]
    8f1c:	e3530000 	cmp	r3, #0
    8f20:	0a000018 	beq	8f88 <HTTPClient::GetDownloadLink()+0x2c4>
    8f24:	e301ec5c 	movw	lr, #7260	; 0x1c5c
    8f28:	e340e003 	movt	lr, #3
    8f2c:	e353003c 	cmp	r3, #60	; 0x3c
    8f30:	01a0000e 	moveq	r0, lr
    8f34:	059f2124 	ldreq	r2, [pc, #292]	; 9060 <HTTPClient::GetDownloadLink()+0x39c>
    8f38:	0a000007 	beq	8f5c <HTTPClient::GetDownloadLink()+0x298>
    8f3c:	ea00000d 	b	8f78 <HTTPClient::GetDownloadLink()+0x2b4>
    8f40:	e0d210d1 	ldrsb	r1, [r2], #1
    8f44:	e0533001 	subs	r3, r3, r1
    8f48:	13a03001 	movne	r3, #1
    8f4c:	e3510000 	cmp	r1, #0
    8f50:	03833001 	orreq	r3, r3, #1
    8f54:	e3530000 	cmp	r3, #0
    8f58:	1a000003 	bne	8f6c <HTTPClient::GetDownloadLink()+0x2a8>
    8f5c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    8f60:	e1a0c002 	mov	ip, r2
    8f64:	e3530000 	cmp	r3, #0
    8f68:	1afffff4 	bne	8f40 <HTTPClient::GetDownloadLink()+0x27c>
    8f6c:	e1dc30d0 	ldrsb	r3, [ip]
    8f70:	e3530000 	cmp	r3, #0
    8f74:	0a000034 	beq	904c <HTTPClient::GetDownloadLink()+0x388>
    8f78:	e1de30d1 	ldrsb	r3, [lr, #1]
    8f7c:	e28ee001 	add	lr, lr, #1
    8f80:	e3530000 	cmp	r3, #0
    8f84:	1affffe8 	bne	8f2c <HTTPClient::GetDownloadLink()+0x268>
    8f88:	e3a03001 	mov	r3, #1
    8f8c:	e3a04000 	mov	r4, #0
    8f90:	e58d300c 	str	r3, [sp, #12]
    8f94:	e30aa58c 	movw	sl, #42380	; 0xa58c
    8f98:	e340a002 	movt	sl, #2
    8f9c:	e30a95e0 	movw	r9, #42464	; 0xa5e0
    8fa0:	e3409002 	movt	r9, #2
    8fa4:	e30a74f8 	movw	r7, #42232	; 0xa4f8
    8fa8:	e3407002 	movt	r7, #2
    8fac:	e28d600c 	add	r6, sp, #12
    8fb0:	e28d5008 	add	r5, sp, #8
    8fb4:	e28d8010 	add	r8, sp, #16
    8fb8:	e1a00004 	mov	r0, r4
    8fbc:	e1a02006 	mov	r2, r6
    8fc0:	e1a0100a 	mov	r1, sl
    8fc4:	ebfffe7a 	bl	89b4 <my_strstr(char*, char const*, int&)>
    8fc8:	e1a02006 	mov	r2, r6
    8fcc:	e1a01009 	mov	r1, r9
    8fd0:	ebfffe77 	bl	89b4 <my_strstr(char*, char const*, int&)>
    8fd4:	e1a02005 	mov	r2, r5
    8fd8:	e1a01007 	mov	r1, r7
    8fdc:	eb0067da 	bl	22f4c <strtok_r>
    8fe0:	e1a02005 	mov	r2, r5
    8fe4:	e1a01007 	mov	r1, r7
    8fe8:	e3a00000 	mov	r0, #0
    8fec:	eb0067d6 	bl	22f4c <strtok_r>
    8ff0:	e1a04000 	mov	r4, r0
    8ff4:	eb00706d 	bl	251b0 <CLogger::Get()>
    8ff8:	e3a02004 	mov	r2, #4
    8ffc:	e58d4000 	str	r4, [sp]
    9000:	e30a35e8 	movw	r3, #42472	; 0xa5e8
    9004:	e3403002 	movt	r3, #2
    9008:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    900c:	e3401002 	movt	r1, #2
    9010:	eb007142 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9014:	e1a01004 	mov	r1, r4
    9018:	e1a00008 	mov	r0, r8
    901c:	eb00678b 	bl	22e50 <strcpy>
    9020:	e1a00004 	mov	r0, r4
    9024:	eb006764 	bl	22dbc <strlen>
    9028:	e2400003 	sub	r0, r0, #3
    902c:	e0840000 	add	r0, r4, r0
    9030:	e30a15f4 	movw	r1, #42484	; 0xa5f4
    9034:	e3401002 	movt	r1, #2
    9038:	e59d4008 	ldr	r4, [sp, #8]
    903c:	eb006768 	bl	22de4 <strcmp>
    9040:	e3500000 	cmp	r0, #0
    9044:	1affffdb 	bne	8fb8 <HTTPClient::GetDownloadLink()+0x2f4>
    9048:	eaffff9c 	b	8ec0 <HTTPClient::GetDownloadLink()+0x1fc>
    904c:	e1a0400e 	mov	r4, lr
    9050:	eaffffcf 	b	8f94 <HTTPClient::GetDownloadLink()+0x2d0>
    9054:	e1a0400e 	mov	r4, lr
    9058:	eaffff6b 	b	8e0c <HTTPClient::GetDownloadLink()+0x148>
    905c:	0002a58d 	.word	0x0002a58d
    9060:	0002a4d5 	.word	0x0002a4d5
    9064:	01432044 	.word	0x01432044

00009068 <HTTPClient::getnewlocation()>:
    9068:	e3010c5c 	movw	r0, #7260	; 0x1c5c
    906c:	e3400003 	movt	r0, #3
    9070:	e92d4010 	push	{r4, lr}
    9074:	e1d030d0 	ldrsb	r3, [r0]
    9078:	e24dd010 	sub	sp, sp, #16
    907c:	e3530000 	cmp	r3, #0
    9080:	0a000016 	beq	90e0 <HTTPClient::getnewlocation()+0x78>
    9084:	e353004c 	cmp	r3, #76	; 0x4c
    9088:	01a0e000 	moveq	lr, r0
    908c:	059f20bc 	ldreq	r2, [pc, #188]	; 9150 <HTTPClient::getnewlocation()+0xe8>
    9090:	0a000007 	beq	90b4 <HTTPClient::getnewlocation()+0x4c>
    9094:	ea00000d 	b	90d0 <HTTPClient::getnewlocation()+0x68>
    9098:	e0d2c0d1 	ldrsb	ip, [r2], #1
    909c:	e16f3f1c 	clz	r3, ip
    90a0:	e1a032a3 	lsr	r3, r3, #5
    90a4:	e151000c 	cmp	r1, ip
    90a8:	13833001 	orrne	r3, r3, #1
    90ac:	e3530000 	cmp	r3, #0
    90b0:	1a000003 	bne	90c4 <HTTPClient::getnewlocation()+0x5c>
    90b4:	e1fe10d1 	ldrsb	r1, [lr, #1]!
    90b8:	e1a04002 	mov	r4, r2
    90bc:	e3510000 	cmp	r1, #0
    90c0:	1afffff4 	bne	9098 <HTTPClient::getnewlocation()+0x30>
    90c4:	e1d430d0 	ldrsb	r3, [r4]
    90c8:	e3530000 	cmp	r3, #0
    90cc:	0a000004 	beq	90e4 <HTTPClient::getnewlocation()+0x7c>
    90d0:	e1d030d1 	ldrsb	r3, [r0, #1]
    90d4:	e2800001 	add	r0, r0, #1
    90d8:	e3530000 	cmp	r3, #0
    90dc:	1affffe8 	bne	9084 <HTTPClient::getnewlocation()+0x1c>
    90e0:	e1a00003 	mov	r0, r3
    90e4:	e28d200c 	add	r2, sp, #12
    90e8:	e30a1608 	movw	r1, #42504	; 0xa608
    90ec:	e3401002 	movt	r1, #2
    90f0:	eb006795 	bl	22f4c <strtok_r>
    90f4:	e59d300c 	ldr	r3, [sp, #12]
    90f8:	e1d320d0 	ldrsb	r2, [r3]
    90fc:	e3520020 	cmp	r2, #32
    9100:	1a000004 	bne	9118 <HTTPClient::getnewlocation()+0xb0>
    9104:	e2833001 	add	r3, r3, #1
    9108:	e58d300c 	str	r3, [sp, #12]
    910c:	e1d320d0 	ldrsb	r2, [r3]
    9110:	e3520020 	cmp	r2, #32
    9114:	0afffffa 	beq	9104 <HTTPClient::getnewlocation()+0x9c>
    9118:	eb007024 	bl	251b0 <CLogger::Get()>
    911c:	e59d200c 	ldr	r2, [sp, #12]
    9120:	e30a360c 	movw	r3, #42508	; 0xa60c
    9124:	e3403002 	movt	r3, #2
    9128:	e58d2000 	str	r2, [sp]
    912c:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    9130:	e3401002 	movt	r1, #2
    9134:	e3a02004 	mov	r2, #4
    9138:	eb0070f8 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    913c:	e59d100c 	ldr	r1, [sp, #12]
    9140:	e59f000c 	ldr	r0, [pc, #12]	; 9154 <HTTPClient::getnewlocation()+0xec>
    9144:	eb006741 	bl	22e50 <strcpy>
    9148:	e28dd010 	add	sp, sp, #16
    914c:	e8bd8010 	pop	{r4, pc}
    9150:	0002a601 	.word	0x0002a601
    9154:	0143242c 	.word	0x0143242c

00009158 <HTTPClient::ParseMethod(char*)>:
    9158:	e92d4030 	push	{r4, r5, lr}
    915c:	e2514000 	subs	r4, r1, #0
    9160:	e1a05000 	mov	r5, r0
    9164:	e24dd00c 	sub	sp, sp, #12
    9168:	0a00004b 	beq	929c <HTTPClient::ParseMethod(char*)+0x144>
    916c:	e1a00004 	mov	r0, r4
    9170:	e28d2004 	add	r2, sp, #4
    9174:	e30a13c8 	movw	r1, #41928	; 0xa3c8
    9178:	e3401002 	movt	r1, #2
    917c:	eb006772 	bl	22f4c <strtok_r>
    9180:	e2504000 	subs	r4, r0, #0
    9184:	0a00003e 	beq	9284 <HTTPClient::ParseMethod(char*)+0x12c>
    9188:	e30a163c 	movw	r1, #42556	; 0xa63c
    918c:	e3401002 	movt	r1, #2
    9190:	eb006713 	bl	22de4 <strcmp>
    9194:	e3500000 	cmp	r0, #0
    9198:	05c50074 	strbeq	r0, [r5, #116]	; 0x74
    919c:	1a00002c 	bne	9254 <HTTPClient::ParseMethod(char*)+0xfc>
    91a0:	e30a13c8 	movw	r1, #41928	; 0xa3c8
    91a4:	e3401002 	movt	r1, #2
    91a8:	e28d2004 	add	r2, sp, #4
    91ac:	e3a00000 	mov	r0, #0
    91b0:	eb006765 	bl	22f4c <strtok_r>
    91b4:	e2504000 	subs	r4, r0, #0
    91b8:	0a000022 	beq	9248 <HTTPClient::ParseMethod(char*)+0xf0>
    91bc:	eb0066fe 	bl	22dbc <strlen>
    91c0:	e3500b02 	cmp	r0, #2048	; 0x800
    91c4:	8300019e 	movwhi	r0, #414	; 0x19e
    91c8:	9a000001 	bls	91d4 <HTTPClient::ParseMethod(char*)+0x7c>
    91cc:	e28dd00c 	add	sp, sp, #12
    91d0:	e8bd8030 	pop	{r4, r5, pc}
    91d4:	e1a01004 	mov	r1, r4
    91d8:	e2850080 	add	r0, r5, #128	; 0x80
    91dc:	eb00671b 	bl	22e50 <strcpy>
    91e0:	e28d2004 	add	r2, sp, #4
    91e4:	e30a1650 	movw	r1, #42576	; 0xa650
    91e8:	e3401002 	movt	r1, #2
    91ec:	e3a00000 	mov	r0, #0
    91f0:	eb006755 	bl	22f4c <strtok_r>
    91f4:	e3500000 	cmp	r0, #0
    91f8:	0a000012 	beq	9248 <HTTPClient::ParseMethod(char*)+0xf0>
    91fc:	e30a1654 	movw	r1, #42580	; 0xa654
    9200:	e3401002 	movt	r1, #2
    9204:	eb0066f6 	bl	22de4 <strcmp>
    9208:	e3500000 	cmp	r0, #0
    920c:	1a00000d 	bne	9248 <HTTPClient::ParseMethod(char*)+0xf0>
    9210:	e28d2004 	add	r2, sp, #4
    9214:	e30a1660 	movw	r1, #42592	; 0xa660
    9218:	e3401002 	movt	r1, #2
    921c:	eb00674a 	bl	22f4c <strtok_r>
    9220:	e3500000 	cmp	r0, #0
    9224:	0a000007 	beq	9248 <HTTPClient::ParseMethod(char*)+0xf0>
    9228:	e30a165c 	movw	r1, #42588	; 0xa65c
    922c:	e3401002 	movt	r1, #2
    9230:	eb0066eb 	bl	22de4 <strcmp>
    9234:	e30031f9 	movw	r3, #505	; 0x1f9
    9238:	e3500000 	cmp	r0, #0
    923c:	11a00003 	movne	r0, r3
    9240:	03a000c8 	moveq	r0, #200	; 0xc8
    9244:	eaffffe0 	b	91cc <HTTPClient::ParseMethod(char*)+0x74>
    9248:	e3a00e19 	mov	r0, #400	; 0x190
    924c:	e28dd00c 	add	sp, sp, #12
    9250:	e8bd8030 	pop	{r4, r5, pc}
    9254:	e30a1640 	movw	r1, #42560	; 0xa640
    9258:	e3401002 	movt	r1, #2
    925c:	e1a00004 	mov	r0, r4
    9260:	eb0066df 	bl	22de4 <strcmp>
    9264:	e3500000 	cmp	r0, #0
    9268:	0a000008 	beq	9290 <HTTPClient::ParseMethod(char*)+0x138>
    926c:	e1a00004 	mov	r0, r4
    9270:	e30a1648 	movw	r1, #42568	; 0xa648
    9274:	e3401002 	movt	r1, #2
    9278:	eb0066d9 	bl	22de4 <strcmp>
    927c:	e3500000 	cmp	r0, #0
    9280:	0a00000c 	beq	92b8 <HTTPClient::ParseMethod(char*)+0x160>
    9284:	e30001f5 	movw	r0, #501	; 0x1f5
    9288:	e28dd00c 	add	sp, sp, #12
    928c:	e8bd8030 	pop	{r4, r5, pc}
    9290:	e3a03001 	mov	r3, #1
    9294:	e5c53074 	strb	r3, [r5, #116]	; 0x74
    9298:	eaffffc0 	b	91a0 <HTTPClient::ParseMethod(char*)+0x48>
    929c:	e30a1620 	movw	r1, #42528	; 0xa620
    92a0:	e3401002 	movt	r1, #2
    92a4:	e30a0630 	movw	r0, #42544	; 0xa630
    92a8:	e3400002 	movt	r0, #2
    92ac:	e3002405 	movw	r2, #1029	; 0x405
    92b0:	eb006e39 	bl	24b9c <assertion_failed>
    92b4:	eaffffac 	b	916c <HTTPClient::ParseMethod(char*)+0x14>
    92b8:	e3a03002 	mov	r3, #2
    92bc:	e5c53074 	strb	r3, [r5, #116]	; 0x74
    92c0:	eaffffb6 	b	91a0 <HTTPClient::ParseMethod(char*)+0x48>

000092c4 <HTTPClient::ParseHeaderField(char*)>:
    92c4:	e92d4030 	push	{r4, r5, lr}
    92c8:	e2514000 	subs	r4, r1, #0
    92cc:	e1a05000 	mov	r5, r0
    92d0:	e24dd00c 	sub	sp, sp, #12
    92d4:	0a00003f 	beq	93d8 <HTTPClient::ParseHeaderField(char*)+0x114>
    92d8:	e1a00004 	mov	r0, r4
    92dc:	e28d2004 	add	r2, sp, #4
    92e0:	e30a1608 	movw	r1, #42504	; 0xa608
    92e4:	e3401002 	movt	r1, #2
    92e8:	eb006717 	bl	22f4c <strtok_r>
    92ec:	e2504000 	subs	r4, r0, #0
    92f0:	0a00001e 	beq	9370 <HTTPClient::ParseHeaderField(char*)+0xac>
    92f4:	e30a1664 	movw	r1, #42596	; 0xa664
    92f8:	e3401002 	movt	r1, #2
    92fc:	eb0066b8 	bl	22de4 <strcmp>
    9300:	e3500000 	cmp	r0, #0
    9304:	0a000008 	beq	932c <HTTPClient::ParseHeaderField(char*)+0x68>
    9308:	e1a00004 	mov	r0, r4
    930c:	e30a1698 	movw	r1, #42648	; 0xa698
    9310:	e3401002 	movt	r1, #2
    9314:	eb0066b2 	bl	22de4 <strcmp>
    9318:	e2504000 	subs	r4, r0, #0
    931c:	0a000016 	beq	937c <HTTPClient::ParseHeaderField(char*)+0xb8>
    9320:	e3a000c8 	mov	r0, #200	; 0xc8
    9324:	e28dd00c 	add	sp, sp, #12
    9328:	e8bd8030 	pop	{r4, r5, pc}
    932c:	e28d2004 	add	r2, sp, #4
    9330:	e30a13c8 	movw	r1, #41928	; 0xa3c8
    9334:	e3401002 	movt	r1, #2
    9338:	eb006703 	bl	22f4c <strtok_r>
    933c:	e3500000 	cmp	r0, #0
    9340:	0a00000a 	beq	9370 <HTTPClient::ParseHeaderField(char*)+0xac>
    9344:	e30a1674 	movw	r1, #42612	; 0xa674
    9348:	e3401002 	movt	r1, #2
    934c:	eb0066a4 	bl	22de4 <strcmp>
    9350:	e3500000 	cmp	r0, #0
    9354:	1afffff1 	bne	9320 <HTTPClient::ParseHeaderField(char*)+0x5c>
    9358:	e2855a01 	add	r5, r5, #4096	; 0x1000
    935c:	e3a03001 	mov	r3, #1
    9360:	e3a000c8 	mov	r0, #200	; 0xc8
    9364:	e5853084 	str	r3, [r5, #132]	; 0x84
    9368:	e28dd00c 	add	sp, sp, #12
    936c:	e8bd8030 	pop	{r4, r5, pc}
    9370:	e3a00e19 	mov	r0, #400	; 0x190
    9374:	e28dd00c 	add	sp, sp, #12
    9378:	e8bd8030 	pop	{r4, r5, pc}
    937c:	e28d2004 	add	r2, sp, #4
    9380:	e30a13c8 	movw	r1, #41928	; 0xa3c8
    9384:	e3401002 	movt	r1, #2
    9388:	eb0066ef 	bl	22f4c <strtok_r>
    938c:	e3500000 	cmp	r0, #0
    9390:	0afffff6 	beq	9370 <HTTPClient::ParseHeaderField(char*)+0xac>
    9394:	e2400001 	sub	r0, r0, #1
    9398:	e1a03004 	mov	r3, r4
    939c:	e3a0c00a 	mov	ip, #10
    93a0:	ea000004 	b	93b8 <HTTPClient::ParseHeaderField(char*)+0xf4>
    93a4:	e3510009 	cmp	r1, #9
    93a8:	e023139c 	mla	r3, ip, r3, r1
    93ac:	8affffef 	bhi	9370 <HTTPClient::ParseHeaderField(char*)+0xac>
    93b0:	e3530b02 	cmp	r3, #2048	; 0x800
    93b4:	8a00000e 	bhi	93f4 <HTTPClient::ParseHeaderField(char*)+0x130>
    93b8:	e1f020d1 	ldrsb	r2, [r0, #1]!
    93bc:	e3520000 	cmp	r2, #0
    93c0:	e2421030 	sub	r1, r2, #48	; 0x30
    93c4:	1afffff6 	bne	93a4 <HTTPClient::ParseHeaderField(char*)+0xe0>
    93c8:	e2855a01 	add	r5, r5, #4096	; 0x1000
    93cc:	e3a000c8 	mov	r0, #200	; 0xc8
    93d0:	e5853088 	str	r3, [r5, #136]	; 0x88
    93d4:	eaffffd2 	b	9324 <HTTPClient::ParseHeaderField(char*)+0x60>
    93d8:	e30a1620 	movw	r1, #42528	; 0xa620
    93dc:	e3401002 	movt	r1, #2
    93e0:	e30a0630 	movw	r0, #42544	; 0xa630
    93e4:	e3400002 	movt	r0, #2
    93e8:	e3a02d11 	mov	r2, #1088	; 0x440
    93ec:	eb006dea 	bl	24b9c <assertion_failed>
    93f0:	eaffffb8 	b	92d8 <HTTPClient::ParseHeaderField(char*)+0x14>
    93f4:	e300019d 	movw	r0, #413	; 0x19d
    93f8:	eaffffc9 	b	9324 <HTTPClient::ParseHeaderField(char*)+0x60>

000093fc <HTTPClient::ParseRequest()>:
    93fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9400:	e2808a01 	add	r8, r0, #4096	; 0x1000
    9404:	e3a03000 	mov	r3, #0
    9408:	e3a02003 	mov	r2, #3
    940c:	e5c03080 	strb	r3, [r0, #128]	; 0x80
    9410:	e5c02074 	strb	r2, [r0, #116]	; 0x74
    9414:	e1a07000 	mov	r7, r0
    9418:	e5c03881 	strb	r3, [r0, #2177]	; 0x881
    941c:	e24ddd39 	sub	sp, sp, #3648	; 0xe40
    9420:	e5c03982 	strb	r3, [r0, #2434]	; 0x982
    9424:	e24dd00c 	sub	sp, sp, #12
    9428:	e5c8308c 	strb	r3, [r8, #140]	; 0x8c
    942c:	e5883084 	str	r3, [r8, #132]	; 0x84
    9430:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    9434:	e5883088 	str	r3, [r8, #136]	; 0x88
    9438:	e1500003 	cmp	r0, r3
    943c:	0a000087 	beq	9660 <HTTPClient::ParseRequest()+0x264>
    9440:	e3a06000 	mov	r6, #0
    9444:	e3a090c8 	mov	r9, #200	; 0xc8
    9448:	e1a0a006 	mov	sl, r6
    944c:	e1a05006 	mov	r5, r6
    9450:	e3a03000 	mov	r3, #0
    9454:	e3a02d19 	mov	r2, #1600	; 0x640
    9458:	e28d1004 	add	r1, sp, #4
    945c:	eb003494 	bl	166b4 <CSocket::Receive(void*, unsigned int, int)>
    9460:	e250b000 	subs	fp, r0, #0
    9464:	da000054 	ble	95bc <HTTPClient::ParseRequest()+0x1c0>
    9468:	e3a04001 	mov	r4, #1
    946c:	ea000011 	b	94b8 <HTTPClient::ParseRequest()+0xbc>
    9470:	e353000d 	cmp	r3, #13
    9474:	0a00000c 	beq	94ac <HTTPClient::ParseRequest()+0xb0>
    9478:	e353000a 	cmp	r3, #10
    947c:	0a000027 	beq	9520 <HTTPClient::ParseRequest()+0x124>
    9480:	e3560b02 	cmp	r6, #2048	; 0x800
    9484:	2300919d 	movwcs	r9, #413	; 0x19d
    9488:	2a000007 	bcs	94ac <HTTPClient::ParseRequest()+0xb0>
    948c:	e28d1d39 	add	r1, sp, #3648	; 0xe40
    9490:	e2862001 	add	r2, r6, #1
    9494:	e2811008 	add	r1, r1, #8
    9498:	e0810006 	add	r0, r1, r6
    949c:	e0811002 	add	r1, r1, r2
    94a0:	e1a06002 	mov	r6, r2
    94a4:	e5403804 	strb	r3, [r0, #-2052]	; 0xfffff7fc
    94a8:	e5415804 	strb	r5, [r1, #-2052]	; 0xfffff7fc
    94ac:	e154000b 	cmp	r4, fp
    94b0:	2a000018 	bcs	9518 <HTTPClient::ParseRequest()+0x11c>
    94b4:	e2844001 	add	r4, r4, #1
    94b8:	e28d3004 	add	r3, sp, #4
    94bc:	e3550000 	cmp	r5, #0
    94c0:	e0833004 	add	r3, r3, r4
    94c4:	e15330d1 	ldrsb	r3, [r3, #-1]
    94c8:	0affffe8 	beq	9470 <HTTPClient::ParseRequest()+0x74>
    94cc:	e3550001 	cmp	r5, #1
    94d0:	0a000003 	beq	94e4 <HTTPClient::ParseRequest()+0xe8>
    94d4:	e154000b 	cmp	r4, fp
    94d8:	2a000038 	bcs	95c0 <HTTPClient::ParseRequest()+0x1c4>
    94dc:	e3a05002 	mov	r5, #2
    94e0:	eafffff3 	b	94b4 <HTTPClient::ParseRequest()+0xb8>
    94e4:	e2862001 	add	r2, r6, #1
    94e8:	e301108c 	movw	r1, #4236	; 0x108c
    94ec:	e0876006 	add	r6, r7, r6
    94f0:	e0870002 	add	r0, r7, r2
    94f4:	e3a0c000 	mov	ip, #0
    94f8:	e7c63001 	strb	r3, [r6, r1]
    94fc:	e1a06002 	mov	r6, r2
    9500:	e7c0c001 	strb	ip, [r0, r1]
    9504:	e5983088 	ldr	r3, [r8, #136]	; 0x88
    9508:	e1520003 	cmp	r2, r3
    950c:	2afffff0 	bcs	94d4 <HTTPClient::ParseRequest()+0xd8>
    9510:	e154000b 	cmp	r4, fp
    9514:	3affffe6 	bcc	94b4 <HTTPClient::ParseRequest()+0xb8>
    9518:	e597005c 	ldr	r0, [r7, #92]	; 0x5c
    951c:	eaffffcb 	b	9450 <HTTPClient::ParseRequest()+0x54>
    9520:	e3560000 	cmp	r6, #0
    9524:	1a000007 	bne	9548 <HTTPClient::ParseRequest()+0x14c>
    9528:	e5983084 	ldr	r3, [r8, #132]	; 0x84
    952c:	e3530000 	cmp	r3, #0
    9530:	0affffe7 	beq	94d4 <HTTPClient::ParseRequest()+0xd8>
    9534:	e5983088 	ldr	r3, [r8, #136]	; 0x88
    9538:	e3530000 	cmp	r3, #0
    953c:	0affffe4 	beq	94d4 <HTTPClient::ParseRequest()+0xd8>
    9540:	e3a05001 	mov	r5, #1
    9544:	eaffffd8 	b	94ac <HTTPClient::ParseRequest()+0xb0>
    9548:	e35a0000 	cmp	sl, #0
    954c:	e28a3001 	add	r3, sl, #1
    9550:	1a00000d 	bne	958c <HTTPClient::ParseRequest()+0x190>
    9554:	e35900c8 	cmp	r9, #200	; 0xc8
    9558:	11a0600a 	movne	r6, sl
    955c:	13a0a001 	movne	sl, #1
    9560:	11a05006 	movne	r5, r6
    9564:	1affffd0 	bne	94ac <HTTPClient::ParseRequest()+0xb0>
    9568:	e28d1d19 	add	r1, sp, #1600	; 0x640
    956c:	e1a00007 	mov	r0, r7
    9570:	e2811004 	add	r1, r1, #4
    9574:	e1a0600a 	mov	r6, sl
    9578:	ebfffef6 	bl	9158 <HTTPClient::ParseMethod(char*)>
    957c:	e1a0500a 	mov	r5, sl
    9580:	e1a09000 	mov	r9, r0
    9584:	e3a0a001 	mov	sl, #1
    9588:	eaffffc7 	b	94ac <HTTPClient::ParseRequest()+0xb0>
    958c:	e35900c8 	cmp	r9, #200	; 0xc8
    9590:	11a0a003 	movne	sl, r3
    9594:	11a06005 	movne	r6, r5
    9598:	1affffc3 	bne	94ac <HTTPClient::ParseRequest()+0xb0>
    959c:	e28d1d19 	add	r1, sp, #1600	; 0x640
    95a0:	e1a00007 	mov	r0, r7
    95a4:	e2811004 	add	r1, r1, #4
    95a8:	e1a0a003 	mov	sl, r3
    95ac:	e1a06005 	mov	r6, r5
    95b0:	ebffff43 	bl	92c4 <HTTPClient::ParseHeaderField(char*)>
    95b4:	e1a09000 	mov	r9, r0
    95b8:	eaffffbb 	b	94ac <HTTPClient::ParseRequest()+0xb0>
    95bc:	ba00001c 	blt	9634 <HTTPClient::ParseRequest()+0x238>
    95c0:	e35900c8 	cmp	r9, #200	; 0xc8
    95c4:	0a000003 	beq	95d8 <HTTPClient::ParseRequest()+0x1dc>
    95c8:	e1a00009 	mov	r0, r9
    95cc:	e28ddd39 	add	sp, sp, #3648	; 0xe40
    95d0:	e28dd00c 	add	sp, sp, #12
    95d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95d8:	e35a0000 	cmp	sl, #0
    95dc:	03a09f82 	moveq	r9, #520	; 0x208
    95e0:	0afffff8 	beq	95c8 <HTTPClient::ParseRequest()+0x1cc>
    95e4:	e2874080 	add	r4, r7, #128	; 0x80
    95e8:	e3a0103f 	mov	r1, #63	; 0x3f
    95ec:	e1a00004 	mov	r0, r4
    95f0:	eb006645 	bl	22f0c <strchr>
    95f4:	e2506000 	subs	r6, r0, #0
    95f8:	0a000020 	beq	9680 <HTTPClient::ParseRequest()+0x284>
    95fc:	e0465004 	sub	r5, r6, r4
    9600:	e2870d22 	add	r0, r7, #2176	; 0x880
    9604:	e1a02005 	mov	r2, r5
    9608:	e0875005 	add	r5, r7, r5
    960c:	e1a01004 	mov	r1, r4
    9610:	e2800001 	add	r0, r0, #1
    9614:	eb006618 	bl	22e7c <strncpy>
    9618:	e2870d26 	add	r0, r7, #2432	; 0x980
    961c:	e3a03000 	mov	r3, #0
    9620:	e2861001 	add	r1, r6, #1
    9624:	e5c53881 	strb	r3, [r5, #2177]	; 0x881
    9628:	e2800002 	add	r0, r0, #2
    962c:	eb006607 	bl	22e50 <strcpy>
    9630:	eaffffe4 	b	95c8 <HTTPClient::ParseRequest()+0x1cc>
    9634:	eb006edd 	bl	251b0 <CLogger::Get()>
    9638:	e3a09f82 	mov	r9, #520	; 0x208
    963c:	e3a02001 	mov	r2, #1
    9640:	e59f104c 	ldr	r1, [pc, #76]	; 9694 <HTTPClient::ParseRequest()+0x298>
    9644:	e30a36b8 	movw	r3, #42680	; 0xa6b8
    9648:	e3403002 	movt	r3, #2
    964c:	eb006fb3 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9650:	e1a00009 	mov	r0, r9
    9654:	e28ddd39 	add	sp, sp, #3648	; 0xe40
    9658:	e28dd00c 	add	sp, sp, #12
    965c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9660:	e30a1620 	movw	r1, #42528	; 0xa620
    9664:	e3401002 	movt	r1, #2
    9668:	e30a06a8 	movw	r0, #42664	; 0xa6a8
    966c:	e3400002 	movt	r0, #2
    9670:	e300238f 	movw	r2, #911	; 0x38f
    9674:	eb006d48 	bl	24b9c <assertion_failed>
    9678:	e597005c 	ldr	r0, [r7, #92]	; 0x5c
    967c:	eaffff6f 	b	9440 <HTTPClient::ParseRequest()+0x44>
    9680:	e2870d22 	add	r0, r7, #2176	; 0x880
    9684:	e1a01004 	mov	r1, r4
    9688:	e2800001 	add	r0, r0, #1
    968c:	eb0065ef 	bl	22e50 <strcpy>
    9690:	eaffffcc 	b	95c8 <HTTPClient::ParseRequest()+0x1cc>
    9694:	0002a4a4 	.word	0x0002a4a4

00009698 <HTTPClient::Request(char*)>:
    9698:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    969c:	e1a04000 	mov	r4, r0
    96a0:	e1a05001 	mov	r5, r1
    96a4:	e24ddb01 	sub	sp, sp, #1024	; 0x400
    96a8:	e24dd00c 	sub	sp, sp, #12
    96ac:	eb006ebf 	bl	251b0 <CLogger::Get()>
    96b0:	e3a02004 	mov	r2, #4
    96b4:	e30a36c8 	movw	r3, #42696	; 0xa6c8
    96b8:	e3403002 	movt	r3, #2
    96bc:	e58d5000 	str	r5, [sp]
    96c0:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    96c4:	e3401002 	movt	r1, #2
    96c8:	eb006f94 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    96cc:	eb006eb7 	bl	251b0 <CLogger::Get()>
    96d0:	e1d426b8 	ldrh	r2, [r4, #104]	; 0x68
    96d4:	e30a36d8 	movw	r3, #42712	; 0xa6d8
    96d8:	e3403002 	movt	r3, #2
    96dc:	e58d2000 	str	r2, [sp]
    96e0:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    96e4:	e3401002 	movt	r1, #2
    96e8:	e3a02004 	mov	r2, #4
    96ec:	eb006f8b 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    96f0:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    96f4:	e3530000 	cmp	r3, #0
    96f8:	0a00010d 	beq	9b34 <HTTPClient::Request(char*)+0x49c>
    96fc:	e3a00018 	mov	r0, #24
    9700:	eb006219 	bl	21f6c <operator new(unsigned int)>
    9704:	e3a02006 	mov	r2, #6
    9708:	e5941058 	ldr	r1, [r4, #88]	; 0x58
    970c:	e1a06000 	mov	r6, r0
    9710:	eb00328f 	bl	16154 <CSocket::CSocket(CNetSubSystem*, int)>
    9714:	e584605c 	str	r6, [r4, #92]	; 0x5c
    9718:	eb006ea4 	bl	251b0 <CLogger::Get()>
    971c:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    9720:	e30a3700 	movw	r3, #42752	; 0xa700
    9724:	e3403002 	movt	r3, #2
    9728:	e58d2000 	str	r2, [sp]
    972c:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    9730:	e3401002 	movt	r1, #2
    9734:	e3a02004 	mov	r2, #4
    9738:	eb006f78 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    973c:	e1d416b8 	ldrh	r1, [r4, #104]	; 0x68
    9740:	e594005c 	ldr	r0, [r4, #92]	; 0x5c
    9744:	eb0032ef 	bl	16308 <CSocket::Bind(unsigned short)>
    9748:	e3500000 	cmp	r0, #0
    974c:	ba00009d 	blt	99c8 <HTTPClient::Request(char*)+0x330>
    9750:	e59f140c 	ldr	r1, [pc, #1036]	; 9b64 <HTTPClient::Request(char*)+0x4cc>
    9754:	e28d0008 	add	r0, sp, #8
    9758:	eb005130 	bl	1dc20 <CIPAddress::CIPAddress(unsigned char const*)>
    975c:	e28d0010 	add	r0, sp, #16
    9760:	eb007219 	bl	25fcc <CString::CString()>
    9764:	eb006e91 	bl	251b0 <CLogger::Get()>
    9768:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    976c:	e30a3730 	movw	r3, #42800	; 0xa730
    9770:	e3403002 	movt	r3, #2
    9774:	e58d2000 	str	r2, [sp]
    9778:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    977c:	e3401002 	movt	r1, #2
    9780:	e3a02004 	mov	r2, #4
    9784:	eb006f65 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9788:	e28d1008 	add	r1, sp, #8
    978c:	e3a02050 	mov	r2, #80	; 0x50
    9790:	e594005c 	ldr	r0, [r4, #92]	; 0x5c
    9794:	eb0032f3 	bl	16368 <CSocket::Connect(CIPAddress&, unsigned short)>
    9798:	e1a06000 	mov	r6, r0
    979c:	eb006e83 	bl	251b0 <CLogger::Get()>
    97a0:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    97a4:	e30a3744 	movw	r3, #42820	; 0xa744
    97a8:	e3403002 	movt	r3, #2
    97ac:	e58d2004 	str	r2, [sp, #4]
    97b0:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    97b4:	e3401002 	movt	r1, #2
    97b8:	e3a02004 	mov	r2, #4
    97bc:	e58d6000 	str	r6, [sp]
    97c0:	eb006f56 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    97c4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    97c8:	e3a01000 	mov	r1, #0
    97cc:	e28d0020 	add	r0, sp, #32
    97d0:	eb006559 	bl	22d3c <memset>
    97d4:	e28d1020 	add	r1, sp, #32
    97d8:	e1a00005 	mov	r0, r5
    97dc:	ebfffadd 	bl	8358 <modifysong(char*, char*)>
    97e0:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
    97e4:	e3530001 	cmp	r3, #1
    97e8:	0a0000a9 	beq	9a94 <HTTPClient::Request(char*)+0x3fc>
    97ec:	e3530002 	cmp	r3, #2
    97f0:	0a0000c0 	beq	9af8 <HTTPClient::Request(char*)+0x460>
    97f4:	e3530003 	cmp	r3, #3
    97f8:	0a00009d 	beq	9a74 <HTTPClient::Request(char*)+0x3dc>
    97fc:	eb006e6b 	bl	251b0 <CLogger::Get()>
    9800:	e1a05000 	mov	r5, r0
    9804:	e28d0010 	add	r0, sp, #16
    9808:	eb007206 	bl	26028 <CString::operator char const*() const>
    980c:	e3a02004 	mov	r2, #4
    9810:	e58d0000 	str	r0, [sp]
    9814:	e30a3834 	movw	r3, #43060	; 0xa834
    9818:	e3403002 	movt	r3, #2
    981c:	e1a00005 	mov	r0, r5
    9820:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    9824:	e3401002 	movt	r1, #2
    9828:	eb006f3c 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    982c:	e594505c 	ldr	r5, [r4, #92]	; 0x5c
    9830:	e28d0010 	add	r0, sp, #16
    9834:	eb0071fb 	bl	26028 <CString::operator char const*() const>
    9838:	e1a06000 	mov	r6, r0
    983c:	e28d0010 	add	r0, sp, #16
    9840:	eb00720f 	bl	26084 <CString::GetLength() const>
    9844:	e1a01006 	mov	r1, r6
    9848:	e1a02000 	mov	r2, r0
    984c:	e3a03040 	mov	r3, #64	; 0x40
    9850:	e1a00005 	mov	r0, r5
    9854:	eb00336b 	bl	16608 <CSocket::Send(void const*, unsigned int, int)>
    9858:	e3500000 	cmp	r0, #0
    985c:	ba000092 	blt	9aac <HTTPClient::Request(char*)+0x414>
    9860:	e3a06000 	mov	r6, #0
    9864:	e3017c5c 	movw	r7, #7260	; 0x1c5c
    9868:	e3407003 	movt	r7, #3
    986c:	e30ab858 	movw	fp, #43096	; 0xa858
    9870:	e340b002 	movt	fp, #2
    9874:	e30a84c8 	movw	r8, #42184	; 0xa4c8
    9878:	e3408002 	movt	r8, #2
    987c:	e30aa870 	movw	sl, #43120	; 0xa870
    9880:	e340a002 	movt	sl, #2
    9884:	e1a09006 	mov	r9, r6
    9888:	ea000004 	b	98a0 <HTTPClient::Request(char*)+0x208>
    988c:	e3530002 	cmp	r3, #2
    9890:	0356004b 	cmpeq	r6, #75	; 0x4b
    9894:	0a00007c 	beq	9a8c <HTTPClient::Request(char*)+0x3f4>
    9898:	e0899005 	add	r9, r9, r5
    989c:	e2866001 	add	r6, r6, #1
    98a0:	e1a01007 	mov	r1, r7
    98a4:	e3a03000 	mov	r3, #0
    98a8:	e3a02d19 	mov	r2, #1600	; 0x640
    98ac:	e594005c 	ldr	r0, [r4, #92]	; 0x5c
    98b0:	eb00337f 	bl	166b4 <CSocket::Receive(void*, unsigned int, int)>
    98b4:	e2505000 	subs	r5, r0, #0
    98b8:	e0877005 	add	r7, r7, r5
    98bc:	da000014 	ble	9914 <HTTPClient::Request(char*)+0x27c>
    98c0:	eb006e3a 	bl	251b0 <CLogger::Get()>
    98c4:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    98c8:	e1a0300b 	mov	r3, fp
    98cc:	e1a01008 	mov	r1, r8
    98d0:	e58d2004 	str	r2, [sp, #4]
    98d4:	e3a02004 	mov	r2, #4
    98d8:	e58d5000 	str	r5, [sp]
    98dc:	eb006f0f 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    98e0:	eb006e32 	bl	251b0 <CLogger::Get()>
    98e4:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    98e8:	e1a0300a 	mov	r3, sl
    98ec:	e58d6000 	str	r6, [sp]
    98f0:	e58d2004 	str	r2, [sp, #4]
    98f4:	e1a01008 	mov	r1, r8
    98f8:	e3a02004 	mov	r2, #4
    98fc:	eb006f07 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9900:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
    9904:	e3530001 	cmp	r3, #1
    9908:	1affffdf 	bne	988c <HTTPClient::Request(char*)+0x1f4>
    990c:	e3560046 	cmp	r6, #70	; 0x46
    9910:	1affffe0 	bne	9898 <HTTPClient::Request(char*)+0x200>
    9914:	eb006e25 	bl	251b0 <CLogger::Get()>
    9918:	e3a02004 	mov	r2, #4
    991c:	e30a3888 	movw	r3, #43144	; 0xa888
    9920:	e3403002 	movt	r3, #2
    9924:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    9928:	e3401002 	movt	r1, #2
    992c:	eb006efb 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9930:	eb006e1e 	bl	251b0 <CLogger::Get()>
    9934:	e3a02004 	mov	r2, #4
    9938:	e58d5000 	str	r5, [sp]
    993c:	e30a3890 	movw	r3, #43152	; 0xa890
    9940:	e3403002 	movt	r3, #2
    9944:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    9948:	e3401002 	movt	r1, #2
    994c:	eb006ef3 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9950:	eb006e16 	bl	251b0 <CLogger::Get()>
    9954:	e3a02004 	mov	r2, #4
    9958:	e58d9000 	str	r9, [sp]
    995c:	e30a38a4 	movw	r3, #43172	; 0xa8a4
    9960:	e3403002 	movt	r3, #2
    9964:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    9968:	e3401002 	movt	r1, #2
    996c:	eb006eeb 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9970:	eb006e0e 	bl	251b0 <CLogger::Get()>
    9974:	e58d6000 	str	r6, [sp]
    9978:	e30a38b4 	movw	r3, #43188	; 0xa8b4
    997c:	e3403002 	movt	r3, #2
    9980:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    9984:	e3401002 	movt	r1, #2
    9988:	e3a02004 	mov	r2, #4
    998c:	eb006ee3 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9990:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
    9994:	e3530001 	cmp	r3, #1
    9998:	0a00005c 	beq	9b10 <HTTPClient::Request(char*)+0x478>
    999c:	e3530002 	cmp	r3, #2
    99a0:	0a00001d 	beq	9a1c <HTTPClient::Request(char*)+0x384>
    99a4:	e3530003 	cmp	r3, #3
    99a8:	0a000068 	beq	9b50 <HTTPClient::Request(char*)+0x4b8>
    99ac:	e28d0010 	add	r0, sp, #16
    99b0:	eb007152 	bl	25f00 <CString::~CString()>
    99b4:	e28d0008 	add	r0, sp, #8
    99b8:	eb005003 	bl	1d9cc <CIPAddress::~CIPAddress()>
    99bc:	e28ddb01 	add	sp, sp, #1024	; 0x400
    99c0:	e28dd00c 	add	sp, sp, #12
    99c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99c8:	eb006df8 	bl	251b0 <CLogger::Get()>
    99cc:	e1d426b8 	ldrh	r2, [r4, #104]	; 0x68
    99d0:	e30a3710 	movw	r3, #42768	; 0xa710
    99d4:	e3403002 	movt	r3, #2
    99d8:	e58d2000 	str	r2, [sp]
    99dc:	e3a02001 	mov	r2, #1
    99e0:	e59f1180 	ldr	r1, [pc, #384]	; 9b68 <HTTPClient::Request(char*)+0x4d0>
    99e4:	eb006ecd 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    99e8:	e594505c 	ldr	r5, [r4, #92]	; 0x5c
    99ec:	e3550000 	cmp	r5, #0
    99f0:	0a000004 	beq	9a08 <HTTPClient::Request(char*)+0x370>
    99f4:	e1a00005 	mov	r0, r5
    99f8:	eb003229 	bl	162a4 <CSocket::~CSocket()>
    99fc:	e1a00005 	mov	r0, r5
    9a00:	e3a01018 	mov	r1, #24
    9a04:	eb00615c 	bl	21f7c <operator delete(void*, unsigned int)>
    9a08:	e3a03000 	mov	r3, #0
    9a0c:	e584305c 	str	r3, [r4, #92]	; 0x5c
    9a10:	e28ddb01 	add	sp, sp, #1024	; 0x400
    9a14:	e28dd00c 	add	sp, sp, #12
    9a18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a1c:	e59f5148 	ldr	r5, [pc, #328]	; 9b6c <HTTPClient::Request(char*)+0x4d4>
    9a20:	e1a00004 	mov	r0, r4
    9a24:	ebfffca6 	bl	8cc4 <HTTPClient::GetDownloadLink()>
    9a28:	e5845054 	str	r5, [r4, #84]	; 0x54
    9a2c:	eb006ddf 	bl	251b0 <CLogger::Get()>
    9a30:	e30a38ec 	movw	r3, #43244	; 0xa8ec
    9a34:	e3403002 	movt	r3, #2
    9a38:	e58d5000 	str	r5, [sp]
    9a3c:	e3a02004 	mov	r2, #4
    9a40:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    9a44:	e3401002 	movt	r1, #2
    9a48:	eb006eb4 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9a4c:	eb006dd7 	bl	251b0 <CLogger::Get()>
    9a50:	e5942054 	ldr	r2, [r4, #84]	; 0x54
    9a54:	e30a38d4 	movw	r3, #43220	; 0xa8d4
    9a58:	e3403002 	movt	r3, #2
    9a5c:	e58d2000 	str	r2, [sp]
    9a60:	e30a14c8 	movw	r1, #42184	; 0xa4c8
    9a64:	e3401002 	movt	r1, #2
    9a68:	e3a02004 	mov	r2, #4
    9a6c:	eb006eab 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9a70:	eaffffcd 	b	99ac <HTTPClient::Request(char*)+0x314>
    9a74:	e30a17f4 	movw	r1, #42996	; 0xa7f4
    9a78:	e3401002 	movt	r1, #2
    9a7c:	e5942078 	ldr	r2, [r4, #120]	; 0x78
    9a80:	e28d0010 	add	r0, sp, #16
    9a84:	eb0074af 	bl	26d48 <CString::Format(char const*, ...)>
    9a88:	eaffff5b 	b	97fc <HTTPClient::Request(char*)+0x164>
    9a8c:	e3a0604b 	mov	r6, #75	; 0x4b
    9a90:	eaffff9f 	b	9914 <HTTPClient::Request(char*)+0x27c>
    9a94:	e28d2020 	add	r2, sp, #32
    9a98:	e30a175c 	movw	r1, #42844	; 0xa75c
    9a9c:	e3401002 	movt	r1, #2
    9aa0:	e28d0010 	add	r0, sp, #16
    9aa4:	eb0074a7 	bl	26d48 <CString::Format(char const*, ...)>
    9aa8:	eaffff53 	b	97fc <HTTPClient::Request(char*)+0x164>
    9aac:	eb006dbf 	bl	251b0 <CLogger::Get()>
    9ab0:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
    9ab4:	e30a3840 	movw	r3, #43072	; 0xa840
    9ab8:	e3403002 	movt	r3, #2
    9abc:	e58d2000 	str	r2, [sp]
    9ac0:	e3a02001 	mov	r2, #1
    9ac4:	e59f109c 	ldr	r1, [pc, #156]	; 9b68 <HTTPClient::Request(char*)+0x4d0>
    9ac8:	eb006e94 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9acc:	e594505c 	ldr	r5, [r4, #92]	; 0x5c
    9ad0:	e3550000 	cmp	r5, #0
    9ad4:	0a000004 	beq	9aec <HTTPClient::Request(char*)+0x454>
    9ad8:	e1a00005 	mov	r0, r5
    9adc:	eb0031f0 	bl	162a4 <CSocket::~CSocket()>
    9ae0:	e1a00005 	mov	r0, r5
    9ae4:	e3a01018 	mov	r1, #24
    9ae8:	eb006123 	bl	21f7c <operator delete(void*, unsigned int)>
    9aec:	e3a03000 	mov	r3, #0
    9af0:	e584305c 	str	r3, [r4, #92]	; 0x5c
    9af4:	eaffffac 	b	99ac <HTTPClient::Request(char*)+0x314>
    9af8:	e30a17b0 	movw	r1, #42928	; 0xa7b0
    9afc:	e3401002 	movt	r1, #2
    9b00:	e5942078 	ldr	r2, [r4, #120]	; 0x78
    9b04:	e28d0010 	add	r0, sp, #16
    9b08:	eb00748e 	bl	26d48 <CString::Format(char const*, ...)>
    9b0c:	eaffff3a 	b	97fc <HTTPClient::Request(char*)+0x164>
    9b10:	e59f5058 	ldr	r5, [pc, #88]	; 9b70 <HTTPClient::Request(char*)+0x4d8>
    9b14:	e1a00004 	mov	r0, r4
    9b18:	ebfffbf1 	bl	8ae4 <HTTPClient::GetLinkForPhase2()>
    9b1c:	e5845054 	str	r5, [r4, #84]	; 0x54
    9b20:	eb006da2 	bl	251b0 <CLogger::Get()>
    9b24:	e30a38d4 	movw	r3, #43220	; 0xa8d4
    9b28:	e3403002 	movt	r3, #2
    9b2c:	e58d5000 	str	r5, [sp]
    9b30:	eaffffc1 	b	9a3c <HTTPClient::Request(char*)+0x3a4>
    9b34:	e30a1620 	movw	r1, #42528	; 0xa620
    9b38:	e3401002 	movt	r1, #2
    9b3c:	e30a06e8 	movw	r0, #42728	; 0xa6e8
    9b40:	e3400002 	movt	r0, #2
    9b44:	e3a02091 	mov	r2, #145	; 0x91
    9b48:	eb006c13 	bl	24b9c <assertion_failed>
    9b4c:	eafffeea 	b	96fc <HTTPClient::Request(char*)+0x64>
    9b50:	e1a00004 	mov	r0, r4
    9b54:	ebfffd43 	bl	9068 <HTTPClient::getnewlocation()>
    9b58:	e59f3014 	ldr	r3, [pc, #20]	; 9b74 <HTTPClient::Request(char*)+0x4dc>
    9b5c:	e5843054 	str	r3, [r4, #84]	; 0x54
    9b60:	eaffff91 	b	99ac <HTTPClient::Request(char*)+0x314>
    9b64:	0002a4ac 	.word	0x0002a4ac
    9b68:	0002a4a4 	.word	0x0002a4a4
    9b6c:	01432044 	.word	0x01432044
    9b70:	01431c5c 	.word	0x01431c5c
    9b74:	0143242c 	.word	0x0143242c

00009b78 <HTTPClient::Run()>:
    9b78:	e590307c 	ldr	r3, [r0, #124]	; 0x7c
    9b7c:	e92d4070 	push	{r4, r5, r6, lr}
    9b80:	e1a04000 	mov	r4, r0
    9b84:	e3530001 	cmp	r3, #1
    9b88:	0a000005 	beq	9ba4 <HTTPClient::Run()+0x2c>
    9b8c:	e2433002 	sub	r3, r3, #2
    9b90:	e3530001 	cmp	r3, #1
    9b94:	88bd8070 	pophi	{r4, r5, r6, pc}
    9b98:	e5901078 	ldr	r1, [r0, #120]	; 0x78
    9b9c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9ba0:	eafffebc 	b	9698 <HTTPClient::Request(char*)>
    9ba4:	eb000016 	bl	9c04 <Keyboard::Get()>
    9ba8:	e1a05000 	mov	r5, r0
    9bac:	eb000033 	bl	9c80 <Keyboard::IsEndOfLine()>
    9bb0:	e3500000 	cmp	r0, #0
    9bb4:	08bd8070 	popeq	{r4, r5, r6, pc}
    9bb8:	e1a00005 	mov	r0, r5
    9bbc:	eb000031 	bl	9c88 <Keyboard::GetBuffer()>
    9bc0:	e1a01000 	mov	r1, r0
    9bc4:	e1a00004 	mov	r0, r4
    9bc8:	e8bd4070 	pop	{r4, r5, r6, lr}
    9bcc:	eafffeb1 	b	9698 <HTTPClient::Request(char*)>

00009bd0 <Keyboard::Keyboard(CUSBKeyboardDevice*)>:
    9bd0:	e3022814 	movw	r2, #10260	; 0x2814
    9bd4:	e3402143 	movt	r2, #323	; 0x143
    9bd8:	e3a0c000 	mov	ip, #0
    9bdc:	e5801408 	str	r1, [r0, #1032]	; 0x408
    9be0:	e580c400 	str	ip, [r0, #1024]	; 0x400
    9be4:	e5820000 	str	r0, [r2]
    9be8:	e5c0c404 	strb	ip, [r0, #1028]	; 0x404
    9bec:	e12fff1e 	bx	lr

00009bf0 <Keyboard::~Keyboard()>:
    9bf0:	e3023814 	movw	r3, #10260	; 0x2814
    9bf4:	e3403143 	movt	r3, #323	; 0x143
    9bf8:	e3a02000 	mov	r2, #0
    9bfc:	e5832000 	str	r2, [r3]
    9c00:	e12fff1e 	bx	lr

00009c04 <Keyboard::Get()>:
    9c04:	e3023814 	movw	r3, #10260	; 0x2814
    9c08:	e3403143 	movt	r3, #323	; 0x143
    9c0c:	e5930000 	ldr	r0, [r3]
    9c10:	e12fff1e 	bx	lr

00009c14 <Keyboard::AppendToBuffer(char)>:
    9c14:	e590c400 	ldr	ip, [r0, #1024]	; 0x400
    9c18:	e35c0b01 	cmp	ip, #1024	; 0x400
    9c1c:	2a000011 	bcs	9c68 <Keyboard::AppendToBuffer(char)+0x54>
    9c20:	e351000d 	cmp	r1, #13
    9c24:	1351000a 	cmpne	r1, #10
    9c28:	e1a02000 	mov	r2, r0
    9c2c:	03a03001 	moveq	r3, #1
    9c30:	13a03000 	movne	r3, #0
    9c34:	0a000005 	beq	9c50 <Keyboard::AppendToBuffer(char)+0x3c>
    9c38:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9c3c:	e28ce001 	add	lr, ip, #1
    9c40:	e1a00003 	mov	r0, r3
    9c44:	e582e400 	str	lr, [r2, #1024]	; 0x400
    9c48:	e7c2100c 	strb	r1, [r2, ip]
    9c4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9c50:	e3a03000 	mov	r3, #0
    9c54:	e3a01001 	mov	r1, #1
    9c58:	e7c0300c 	strb	r3, [r0, ip]
    9c5c:	e1a00003 	mov	r0, r3
    9c60:	e5c21404 	strb	r1, [r2, #1028]	; 0x404
    9c64:	e12fff1e 	bx	lr
    9c68:	e3e00000 	mvn	r0, #0
    9c6c:	e12fff1e 	bx	lr

00009c70 <Keyboard::ClearBuffer()>:
    9c70:	e3a03000 	mov	r3, #0
    9c74:	e5803400 	str	r3, [r0, #1024]	; 0x400
    9c78:	e5c03404 	strb	r3, [r0, #1028]	; 0x404
    9c7c:	e12fff1e 	bx	lr

00009c80 <Keyboard::IsEndOfLine()>:
    9c80:	e5d00404 	ldrb	r0, [r0, #1028]	; 0x404
    9c84:	e12fff1e 	bx	lr

00009c88 <Keyboard::GetBuffer()>:
    9c88:	e12fff1e 	bx	lr

00009c8c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    9c8c:	e92d4070 	push	{r4, r5, r6, lr}
    9c90:	e2525000 	subs	r5, r2, #0
    9c94:	e1a04001 	mov	r4, r1
    9c98:	0a00000c 	beq	9cd0 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x44>
    9c9c:	e354000f 	cmp	r4, #15
    9ca0:	9a000005 	bls	9cbc <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x30>
    9ca4:	e30a1928 	movw	r1, #43304	; 0xa928
    9ca8:	e30a0944 	movw	r0, #43332	; 0xa944
    9cac:	e3401002 	movt	r1, #2
    9cb0:	e3400002 	movt	r0, #2
    9cb4:	e3a02f96 	mov	r2, #600	; 0x258
    9cb8:	eb006bb7 	bl	24b9c <assertion_failed>
    9cbc:	e2844016 	add	r4, r4, #22
    9cc0:	e3a03000 	mov	r3, #0
    9cc4:	e0854104 	add	r4, r5, r4, lsl #2
    9cc8:	e5843004 	str	r3, [r4, #4]
    9ccc:	e8bd8070 	pop	{r4, r5, r6, pc}
    9cd0:	e30a1928 	movw	r1, #43304	; 0xa928
    9cd4:	e30a0938 	movw	r0, #43320	; 0xa938
    9cd8:	e3401002 	movt	r1, #2
    9cdc:	e3400002 	movt	r0, #2
    9ce0:	e3002255 	movw	r2, #597	; 0x255
    9ce4:	eb006bac 	bl	24b9c <assertion_failed>
    9ce8:	eaffffeb 	b	9c9c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x10>

00009cec <CDWHCIDevice::~CDWHCIDevice()>:
    9cec:	e59f2028 	ldr	r2, [pc, #40]	; 9d1c <CDWHCIDevice::~CDWHCIDevice()+0x30>
    9cf0:	e3a03000 	mov	r3, #0
    9cf4:	e92d4010 	push	{r4, lr}
    9cf8:	e1a04000 	mov	r4, r0
    9cfc:	e884000c 	stm	r4, {r2, r3}
    9d00:	e28000a4 	add	r0, r0, #164	; 0xa4
    9d04:	e5843008 	str	r3, [r4, #8]
    9d08:	eb001b10 	bl	10950 <CDWHCIRootPort::~CDWHCIRootPort()>
    9d0c:	e1a00004 	mov	r0, r4
    9d10:	eb00110e 	bl	e150 <CUSBHostController::~CUSBHostController()>
    9d14:	e1a00004 	mov	r0, r4
    9d18:	e8bd8010 	pop	{r4, pc}
    9d1c:	0002a90c 	.word	0x0002a90c

00009d20 <CDWHCIDevice::~CDWHCIDevice()>:
    9d20:	e59f2034 	ldr	r2, [pc, #52]	; 9d5c <CDWHCIDevice::~CDWHCIDevice()+0x3c>
    9d24:	e3a03000 	mov	r3, #0
    9d28:	e92d4010 	push	{r4, lr}
    9d2c:	e1a04000 	mov	r4, r0
    9d30:	e884000c 	stm	r4, {r2, r3}
    9d34:	e28000a4 	add	r0, r0, #164	; 0xa4
    9d38:	e5843008 	str	r3, [r4, #8]
    9d3c:	eb001b03 	bl	10950 <CDWHCIRootPort::~CDWHCIRootPort()>
    9d40:	e1a00004 	mov	r0, r4
    9d44:	eb001101 	bl	e150 <CUSBHostController::~CUSBHostController()>
    9d48:	e1a00004 	mov	r0, r4
    9d4c:	e3a010ac 	mov	r1, #172	; 0xac
    9d50:	eb006089 	bl	21f7c <operator delete(void*, unsigned int)>
    9d54:	e1a00004 	mov	r0, r4
    9d58:	e8bd8010 	pop	{r4, pc}
    9d5c:	0002a90c 	.word	0x0002a90c

00009d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>:
    9d60:	e92d4030 	push	{r4, r5, lr}
    9d64:	e24dd01c 	sub	sp, sp, #28
    9d68:	e1a05000 	mov	r5, r0
    9d6c:	e28d000c 	add	r0, sp, #12
    9d70:	eb0008ee 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9d74:	f57ff05f 	dmb	sy
    9d78:	eb006d0c 	bl	251b0 <CLogger::Get()>
    9d7c:	e1a04000 	mov	r4, r0
    9d80:	e28d000c 	add	r0, sp, #12
    9d84:	eb0008f2 	bl	c154 <CDWHCIRegister::Read()>
    9d88:	e3a02004 	mov	r2, #4
    9d8c:	e59f1024 	ldr	r1, [pc, #36]	; 9db8 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]+0x58>
    9d90:	e30a3964 	movw	r3, #43364	; 0xa964
    9d94:	e58d5004 	str	r5, [sp, #4]
    9d98:	e3403002 	movt	r3, #2
    9d9c:	e58d0000 	str	r0, [sp]
    9da0:	e1a00004 	mov	r0, r4
    9da4:	eb006ddd 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9da8:	e28d000c 	add	r0, sp, #12
    9dac:	eb0008e7 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    9db0:	e28dd01c 	add	sp, sp, #28
    9db4:	e8bd8030 	pop	{r4, r5, pc}
    9db8:	0002a91c 	.word	0x0002a91c

00009dbc <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    9dbc:	e92d4070 	push	{r4, r5, r6, lr}
    9dc0:	e1a04000 	mov	r4, r0
    9dc4:	e1a06001 	mov	r6, r1
    9dc8:	e1a05002 	mov	r5, r2
    9dcc:	eb0010db 	bl	e140 <CUSBHostController::CUSBHostController()>
    9dd0:	e59f00c4 	ldr	r0, [pc, #196]	; 9e9c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xe0>
    9dd4:	e3a03000 	mov	r3, #0
    9dd8:	e3a0c001 	mov	ip, #1
    9ddc:	e5843010 	str	r3, [r4, #16]
    9de0:	e1a01004 	mov	r1, r4
    9de4:	e5840000 	str	r0, [r4]
    9de8:	e28400a4 	add	r0, r4, #164	; 0xa4
    9dec:	e584300c 	str	r3, [r4, #12]
    9df0:	e584309c 	str	r3, [r4, #156]	; 0x9c
    9df4:	e58430a0 	str	r3, [r4, #160]	; 0xa0
    9df8:	e5846004 	str	r6, [r4, #4]
    9dfc:	e5845008 	str	r5, [r4, #8]
    9e00:	e584c014 	str	ip, [r4, #20]
    9e04:	e584c058 	str	ip, [r4, #88]	; 0x58
    9e08:	eb001ac0 	bl	10910 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    9e0c:	e5943004 	ldr	r3, [r4, #4]
    9e10:	e3530000 	cmp	r3, #0
    9e14:	0a000012 	beq	9e64 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xa8>
    9e18:	e5943008 	ldr	r3, [r4, #8]
    9e1c:	e3530000 	cmp	r3, #0
    9e20:	0a000016 	beq	9e80 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xc4>
    9e24:	e2843014 	add	r3, r4, #20
    9e28:	e2841054 	add	r1, r4, #84	; 0x54
    9e2c:	e3a02000 	mov	r2, #0
    9e30:	e5a32004 	str	r2, [r3, #4]!
    9e34:	e1510003 	cmp	r1, r3
    9e38:	1afffffc 	bne	9e30 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x74>
    9e3c:	e3a03000 	mov	r3, #0
    9e40:	e1a01003 	mov	r1, r3
    9e44:	e2832016 	add	r2, r3, #22
    9e48:	e2833001 	add	r3, r3, #1
    9e4c:	e3530010 	cmp	r3, #16
    9e50:	e0842102 	add	r2, r4, r2, lsl #2
    9e54:	e5821004 	str	r1, [r2, #4]
    9e58:	1afffff9 	bne	9e44 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x88>
    9e5c:	e1a00004 	mov	r0, r4
    9e60:	e8bd8070 	pop	{r4, r5, r6, pc}
    9e64:	e30a1928 	movw	r1, #43304	; 0xa928
    9e68:	e30a0970 	movw	r0, #43376	; 0xa970
    9e6c:	e3401002 	movt	r1, #2
    9e70:	e3400002 	movt	r0, #2
    9e74:	e3a02045 	mov	r2, #69	; 0x45
    9e78:	eb006b47 	bl	24b9c <assertion_failed>
    9e7c:	eaffffe5 	b	9e18 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x5c>
    9e80:	e30a1928 	movw	r1, #43304	; 0xa928
    9e84:	e30a0988 	movw	r0, #43400	; 0xa988
    9e88:	e3401002 	movt	r1, #2
    9e8c:	e3400002 	movt	r0, #2
    9e90:	e3a02046 	mov	r2, #70	; 0x46
    9e94:	eb006b40 	bl	24b9c <assertion_failed>
    9e98:	eaffffe1 	b	9e24 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x68>
    9e9c:	0002a90c 	.word	0x0002a90c

00009ea0 <CDWHCIDevice::GetPortSpeed()>:
    9ea0:	e92d4010 	push	{r4, lr}
    9ea4:	e24dd010 	sub	sp, sp, #16
    9ea8:	e28d0004 	add	r0, sp, #4
    9eac:	e3a01d11 	mov	r1, #1088	; 0x440
    9eb0:	e3431f98 	movt	r1, #16280	; 0x3f98
    9eb4:	eb00089d 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9eb8:	e28d0004 	add	r0, sp, #4
    9ebc:	eb0008a4 	bl	c154 <CDWHCIRegister::Read()>
    9ec0:	e7e148d0 	ubfx	r4, r0, #17, #2
    9ec4:	e3540003 	cmp	r4, #3
    9ec8:	130a3904 	movwne	r3, #43268	; 0xa904
    9ecc:	13403002 	movtne	r3, #2
    9ed0:	10830004 	addne	r0, r3, r4
    9ed4:	15d04020 	ldrbne	r4, [r0, #32]
    9ed8:	e28d0004 	add	r0, sp, #4
    9edc:	eb00089b 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    9ee0:	e1a00004 	mov	r0, r4
    9ee4:	e28dd010 	add	sp, sp, #16
    9ee8:	e8bd8010 	pop	{r4, pc}

00009eec <CDWHCIDevice::OvercurrentDetected()>:
    9eec:	e92d4010 	push	{r4, lr}
    9ef0:	e24dd010 	sub	sp, sp, #16
    9ef4:	e28d0004 	add	r0, sp, #4
    9ef8:	e3a01d11 	mov	r1, #1088	; 0x440
    9efc:	e3431f98 	movt	r1, #16280	; 0x3f98
    9f00:	eb00088a 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f04:	e28d0004 	add	r0, sp, #4
    9f08:	eb000891 	bl	c154 <CDWHCIRegister::Read()>
    9f0c:	e1a04000 	mov	r4, r0
    9f10:	e28d0004 	add	r0, sp, #4
    9f14:	eb00088d 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    9f18:	e7e00254 	ubfx	r0, r4, #4, #1
    9f1c:	e28dd010 	add	sp, sp, #16
    9f20:	e8bd8010 	pop	{r4, pc}

00009f24 <CDWHCIDevice::DisableRootPort()>:
    9f24:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9f28:	e24dd014 	sub	sp, sp, #20
    9f2c:	e28d0004 	add	r0, sp, #4
    9f30:	e3a01d11 	mov	r1, #1088	; 0x440
    9f34:	e3431f98 	movt	r1, #16280	; 0x3f98
    9f38:	eb00087c 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f3c:	e28d0004 	add	r0, sp, #4
    9f40:	eb000883 	bl	c154 <CDWHCIRegister::Read()>
    9f44:	e3e01a01 	mvn	r1, #4096	; 0x1000
    9f48:	e28d0004 	add	r0, sp, #4
    9f4c:	eb0008b9 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    9f50:	e28d0004 	add	r0, sp, #4
    9f54:	eb000885 	bl	c170 <CDWHCIRegister::Write()>
    9f58:	e28d0004 	add	r0, sp, #4
    9f5c:	eb00087b 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    9f60:	e28dd014 	add	sp, sp, #20
    9f64:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009f68 <CDWHCIDevice::PowerOn()>:
    9f68:	e92d4010 	push	{r4, lr}
    9f6c:	e24dd028 	sub	sp, sp, #40	; 0x28
    9f70:	e28d000c 	add	r0, sp, #12
    9f74:	eb005bb4 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
    9f78:	e28d000c 	add	r0, sp, #12
    9f7c:	e3a03000 	mov	r3, #0
    9f80:	e3081001 	movw	r1, #32769	; 0x8001
    9f84:	e58d3000 	str	r3, [sp]
    9f88:	e3401002 	movt	r1, #2
    9f8c:	e3a03014 	mov	r3, #20
    9f90:	e08d2003 	add	r2, sp, r3
    9f94:	e3a0c003 	mov	ip, #3
    9f98:	e58dc020 	str	ip, [sp, #32]
    9f9c:	e58dc024 	str	ip, [sp, #36]	; 0x24
    9fa0:	eb005bf1 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9fa4:	e2504000 	subs	r4, r0, #0
    9fa8:	e28d000c 	add	r0, sp, #12
    9fac:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    9fb0:	12044003 	andne	r4, r4, #3
    9fb4:	12444001 	subne	r4, r4, #1
    9fb8:	116f4f14 	clzne	r4, r4
    9fbc:	11a042a4 	lsrne	r4, r4, #5
    9fc0:	eb005ba7 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
    9fc4:	e1a00004 	mov	r0, r4
    9fc8:	e28dd028 	add	sp, sp, #40	; 0x28
    9fcc:	e8bd8010 	pop	{r4, pc}

00009fd0 <CDWHCIDevice::EnableGlobalInterrupts()>:
    9fd0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9fd4:	e24dd014 	sub	sp, sp, #20
    9fd8:	e28d0004 	add	r0, sp, #4
    9fdc:	e3a01008 	mov	r1, #8
    9fe0:	e3431f98 	movt	r1, #16280	; 0x3f98
    9fe4:	eb000851 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9fe8:	e28d0004 	add	r0, sp, #4
    9fec:	eb000858 	bl	c154 <CDWHCIRegister::Read()>
    9ff0:	e3a01001 	mov	r1, #1
    9ff4:	e28d0004 	add	r0, sp, #4
    9ff8:	eb00089e 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    9ffc:	e28d0004 	add	r0, sp, #4
    a000:	eb00085a 	bl	c170 <CDWHCIRegister::Write()>
    a004:	e28d0004 	add	r0, sp, #4
    a008:	eb000850 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a00c:	e28dd014 	add	sp, sp, #20
    a010:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a014 <CDWHCIDevice::EnableCommonInterrupts()>:
    a014:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a018:	e24dd014 	sub	sp, sp, #20
    a01c:	e28d0004 	add	r0, sp, #4
    a020:	e3a01014 	mov	r1, #20
    a024:	e3431f98 	movt	r1, #16280	; 0x3f98
    a028:	eb000840 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a02c:	e28d0004 	add	r0, sp, #4
    a030:	eb0008d9 	bl	c39c <CDWHCIRegister::SetAll()>
    a034:	e28d0004 	add	r0, sp, #4
    a038:	eb00084c 	bl	c170 <CDWHCIRegister::Write()>
    a03c:	e28d0004 	add	r0, sp, #4
    a040:	eb000842 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a044:	e28dd014 	add	sp, sp, #20
    a048:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a04c <CDWHCIDevice::EnableHostInterrupts()>:
    a04c:	e92d4010 	push	{r4, lr}
    a050:	e24dd010 	sub	sp, sp, #16
    a054:	e3a02000 	mov	r2, #0
    a058:	e1a04000 	mov	r4, r0
    a05c:	e3a01018 	mov	r1, #24
    a060:	e28d0004 	add	r0, sp, #4
    a064:	e3431f98 	movt	r1, #16280	; 0x3f98
    a068:	eb000834 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a06c:	e28d0004 	add	r0, sp, #4
    a070:	eb00083e 	bl	c170 <CDWHCIRegister::Write()>
    a074:	e1a00004 	mov	r0, r4
    a078:	ebffffe5 	bl	a014 <CDWHCIDevice::EnableCommonInterrupts()>
    a07c:	e28d0004 	add	r0, sp, #4
    a080:	eb000833 	bl	c154 <CDWHCIRegister::Read()>
    a084:	e3a01402 	mov	r1, #33554432	; 0x2000000
    a088:	e28d0004 	add	r0, sp, #4
    a08c:	eb000879 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a090:	e28d0004 	add	r0, sp, #4
    a094:	eb000835 	bl	c170 <CDWHCIRegister::Write()>
    a098:	e28d0004 	add	r0, sp, #4
    a09c:	eb00082b 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a0a0:	e28dd010 	add	sp, sp, #16
    a0a4:	e8bd8010 	pop	{r4, pc}

0000a0a8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    a0a8:	e92d4030 	push	{r4, r5, lr}
    a0ac:	e24dd014 	sub	sp, sp, #20
    a0b0:	e1a04000 	mov	r4, r0
    a0b4:	e1a05001 	mov	r5, r1
    a0b8:	e28d0004 	add	r0, sp, #4
    a0bc:	e3001418 	movw	r1, #1048	; 0x418
    a0c0:	e3431f98 	movt	r1, #16280	; 0x3f98
    a0c4:	eb000819 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a0c8:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    a0cc:	e3500000 	cmp	r0, #0
    a0d0:	1a00000f 	bne	a114 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x6c>
    a0d4:	e28d0004 	add	r0, sp, #4
    a0d8:	eb00081d 	bl	c154 <CDWHCIRegister::Read()>
    a0dc:	e3a01001 	mov	r1, #1
    a0e0:	e1a01511 	lsl	r1, r1, r5
    a0e4:	e28d0004 	add	r0, sp, #4
    a0e8:	eb000862 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a0ec:	e28d0004 	add	r0, sp, #4
    a0f0:	eb00081e 	bl	c170 <CDWHCIRegister::Write()>
    a0f4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a0f8:	e3530000 	cmp	r3, #0
    a0fc:	0a000000 	beq	a104 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x5c>
    a100:	eb005fd3 	bl	22054 <LeaveCritical>
    a104:	e28d0004 	add	r0, sp, #4
    a108:	eb000810 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a10c:	e28dd014 	add	sp, sp, #20
    a110:	e8bd8030 	pop	{r4, r5, pc}
    a114:	eb005fa0 	bl	21f9c <EnterCritical>
    a118:	eaffffed 	b	a0d4 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x2c>

0000a11c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    a11c:	e92d4030 	push	{r4, r5, lr}
    a120:	e24dd014 	sub	sp, sp, #20
    a124:	e1a04000 	mov	r4, r0
    a128:	e1a05001 	mov	r5, r1
    a12c:	e28d0004 	add	r0, sp, #4
    a130:	e3001418 	movw	r1, #1048	; 0x418
    a134:	e3431f98 	movt	r1, #16280	; 0x3f98
    a138:	eb0007fc 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a13c:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    a140:	e3500000 	cmp	r0, #0
    a144:	1a00000f 	bne	a188 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x6c>
    a148:	e28d0004 	add	r0, sp, #4
    a14c:	eb000800 	bl	c154 <CDWHCIRegister::Read()>
    a150:	e3a01001 	mov	r1, #1
    a154:	e1e01511 	mvn	r1, r1, lsl r5
    a158:	e28d0004 	add	r0, sp, #4
    a15c:	eb000835 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    a160:	e28d0004 	add	r0, sp, #4
    a164:	eb000801 	bl	c170 <CDWHCIRegister::Write()>
    a168:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a16c:	e3530000 	cmp	r3, #0
    a170:	0a000000 	beq	a178 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x5c>
    a174:	eb005fb6 	bl	22054 <LeaveCritical>
    a178:	e28d0004 	add	r0, sp, #4
    a17c:	eb0007f3 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a180:	e28dd014 	add	sp, sp, #20
    a184:	e8bd8030 	pop	{r4, r5, pc}
    a188:	eb005f83 	bl	21f9c <EnterCritical>
    a18c:	eaffffed 	b	a148 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x2c>

0000a190 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    a190:	e92d4070 	push	{r4, r5, r6, lr}
    a194:	e2514000 	subs	r4, r1, #0
    a198:	e24dd048 	sub	sp, sp, #72	; 0x48
    a19c:	e1a06000 	mov	r6, r0
    a1a0:	0a0000e5 	beq	a53c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ac>
    a1a4:	e1a00004 	mov	r0, r4
    a1a8:	eb000938 	bl	c690 <CDWHCITransferStageData::GetChannelNumber() const>
    a1ac:	e596300c 	ldr	r3, [r6, #12]
    a1b0:	e1500003 	cmp	r0, r3
    a1b4:	e1a05000 	mov	r5, r0
    a1b8:	2a0000d4 	bcs	a510 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x380>
    a1bc:	e3a01001 	mov	r1, #1
    a1c0:	e1a00004 	mov	r0, r4
    a1c4:	eb00092b 	bl	c678 <CDWHCITransferStageData::SetSubState(unsigned int)>
    a1c8:	e1a05285 	lsl	r5, r5, #5
    a1cc:	e3001508 	movw	r1, #1288	; 0x508
    a1d0:	e3431f98 	movt	r1, #16280	; 0x3f98
    a1d4:	e0851001 	add	r1, r5, r1
    a1d8:	e1a0000d 	mov	r0, sp
    a1dc:	eb0007d3 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a1e0:	e1a0000d 	mov	r0, sp
    a1e4:	eb00086c 	bl	c39c <CDWHCIRegister::SetAll()>
    a1e8:	e1a0000d 	mov	r0, sp
    a1ec:	eb0007df 	bl	c170 <CDWHCIRegister::Write()>
    a1f0:	e3a01e51 	mov	r1, #1296	; 0x510
    a1f4:	e3431f98 	movt	r1, #16280	; 0x3f98
    a1f8:	e3a02000 	mov	r2, #0
    a1fc:	e0851001 	add	r1, r5, r1
    a200:	e28d000c 	add	r0, sp, #12
    a204:	eb0007cd 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a208:	e1a00004 	mov	r0, r4
    a20c:	eb000a5b 	bl	cb80 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a210:	e7f21050 	ubfx	r1, r0, #0, #19
    a214:	e28d000c 	add	r0, sp, #12
    a218:	eb000816 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a21c:	e1a00004 	mov	r0, r4
    a220:	eb000a58 	bl	cb88 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    a224:	e3a01000 	mov	r1, #0
    a228:	e3411ff8 	movt	r1, #8184	; 0x1ff8
    a22c:	e0011980 	and	r1, r1, r0, lsl #19
    a230:	e28d000c 	add	r0, sp, #12
    a234:	eb00080f 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a238:	e1a00004 	mov	r0, r4
    a23c:	eb000a1b 	bl	cab0 <CDWHCITransferStageData::GetPID() const>
    a240:	e1a01e80 	lsl	r1, r0, #29
    a244:	e28d000c 	add	r0, sp, #12
    a248:	eb00080a 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a24c:	e28d000c 	add	r0, sp, #12
    a250:	eb0007c6 	bl	c170 <CDWHCIRegister::Write()>
    a254:	e1a00004 	mov	r0, r4
    a258:	eb000a38 	bl	cb40 <CDWHCITransferStageData::GetDMAAddress() const>
    a25c:	e3001514 	movw	r1, #1300	; 0x514
    a260:	e3431f98 	movt	r1, #16280	; 0x3f98
    a264:	e0851001 	add	r1, r5, r1
    a268:	e2802103 	add	r2, r0, #-1073741824	; 0xc0000000
    a26c:	e28d0018 	add	r0, sp, #24
    a270:	eb0007b2 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a274:	e28d0018 	add	r0, sp, #24
    a278:	eb0007bc 	bl	c170 <CDWHCIRegister::Write()>
    a27c:	e1a00004 	mov	r0, r4
    a280:	eb000a2e 	bl	cb40 <CDWHCITransferStageData::GetDMAAddress() const>
    a284:	e1a06000 	mov	r6, r0
    a288:	e1a00004 	mov	r0, r4
    a28c:	eb000a3b 	bl	cb80 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a290:	e1a01000 	mov	r1, r0
    a294:	e1a00006 	mov	r0, r6
    a298:	eb007ae3 	bl	28e2c <CleanAndInvalidateDataCacheRange>
    a29c:	e3001504 	movw	r1, #1284	; 0x504
    a2a0:	e3431f98 	movt	r1, #16280	; 0x3f98
    a2a4:	e3a02000 	mov	r2, #0
    a2a8:	e0851001 	add	r1, r5, r1
    a2ac:	e28d0024 	add	r0, sp, #36	; 0x24
    a2b0:	eb0007a2 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a2b4:	e1a00004 	mov	r0, r4
    a2b8:	eb000a34 	bl	cb90 <CDWHCITransferStageData::IsSplit() const>
    a2bc:	e3500000 	cmp	r0, #0
    a2c0:	1a00007b 	bne	a4b4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x324>
    a2c4:	e28d0024 	add	r0, sp, #36	; 0x24
    a2c8:	eb0007a8 	bl	c170 <CDWHCIRegister::Write()>
    a2cc:	e3a01c05 	mov	r1, #1280	; 0x500
    a2d0:	e3431f98 	movt	r1, #16280	; 0x3f98
    a2d4:	e28d0030 	add	r0, sp, #48	; 0x30
    a2d8:	e0851001 	add	r1, r5, r1
    a2dc:	eb000793 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a2e0:	e28d0030 	add	r0, sp, #48	; 0x30
    a2e4:	eb00079a 	bl	c154 <CDWHCIRegister::Read()>
    a2e8:	e28d0030 	add	r0, sp, #48	; 0x30
    a2ec:	e3a01b3e 	mov	r1, #63488	; 0xf800
    a2f0:	e34f1fff 	movt	r1, #65535	; 0xffff
    a2f4:	eb0007cf 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    a2f8:	e1a00004 	mov	r0, r4
    a2fc:	eb0009e7 	bl	caa0 <CDWHCITransferStageData::GetMaxPacketSize() const>
    a300:	e7ea1050 	ubfx	r1, r0, #0, #11
    a304:	e28d0030 	add	r0, sp, #48	; 0x30
    a308:	eb0007da 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a30c:	e28d0030 	add	r0, sp, #48	; 0x30
    a310:	e3e01603 	mvn	r1, #3145728	; 0x300000
    a314:	eb0007c7 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    a318:	e28d0030 	add	r0, sp, #48	; 0x30
    a31c:	e3a01601 	mov	r1, #1048576	; 0x100000
    a320:	eb0007d4 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a324:	e1a00004 	mov	r0, r4
    a328:	eb000a00 	bl	cb30 <CDWHCITransferStageData::IsDirectionIn() const>
    a32c:	e3500000 	cmp	r0, #0
    a330:	0a000057 	beq	a494 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x304>
    a334:	e3a01902 	mov	r1, #32768	; 0x8000
    a338:	e28d0030 	add	r0, sp, #48	; 0x30
    a33c:	eb0007cd 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a340:	e1a00004 	mov	r0, r4
    a344:	eb0009d7 	bl	caa8 <CDWHCITransferStageData::GetSpeed() const>
    a348:	e3500000 	cmp	r0, #0
    a34c:	1a00004c 	bne	a484 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2f4>
    a350:	e3a01802 	mov	r1, #131072	; 0x20000
    a354:	e28d0030 	add	r0, sp, #48	; 0x30
    a358:	eb0007c6 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a35c:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    a360:	e28d0030 	add	r0, sp, #48	; 0x30
    a364:	eb0007b3 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    a368:	e1a00004 	mov	r0, r4
    a36c:	eb00098a 	bl	c99c <CDWHCITransferStageData::GetDeviceAddress() const>
    a370:	e1a01b00 	lsl	r1, r0, #22
    a374:	e28d0030 	add	r0, sp, #48	; 0x30
    a378:	eb0007be 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a37c:	e3e01703 	mvn	r1, #786432	; 0xc0000
    a380:	e28d0030 	add	r0, sp, #48	; 0x30
    a384:	eb0007ab 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    a388:	e1a00004 	mov	r0, r4
    a38c:	eb000993 	bl	c9e0 <CDWHCITransferStageData::GetEndpointType() const>
    a390:	e1a01900 	lsl	r1, r0, #18
    a394:	e28d0030 	add	r0, sp, #48	; 0x30
    a398:	eb0007b6 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a39c:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    a3a0:	e28d0030 	add	r0, sp, #48	; 0x30
    a3a4:	eb0007a3 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    a3a8:	e1a00004 	mov	r0, r4
    a3ac:	eb0009aa 	bl	ca5c <CDWHCITransferStageData::GetEndpointNumber() const>
    a3b0:	e1a01580 	lsl	r1, r0, #11
    a3b4:	e28d0030 	add	r0, sp, #48	; 0x30
    a3b8:	eb0007ae 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a3bc:	e1a00004 	mov	r0, r4
    a3c0:	eb000a6f 	bl	cd84 <CDWHCITransferStageData::GetFrameScheduler() const>
    a3c4:	e2506000 	subs	r6, r0, #0
    a3c8:	0a00000b 	beq	a3fc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x26c>
    a3cc:	e5963000 	ldr	r3, [r6]
    a3d0:	e5933014 	ldr	r3, [r3, #20]
    a3d4:	e12fff33 	blx	r3
    a3d8:	e5963000 	ldr	r3, [r6]
    a3dc:	e1a00006 	mov	r0, r6
    a3e0:	e5933018 	ldr	r3, [r3, #24]
    a3e4:	e12fff33 	blx	r3
    a3e8:	e3500000 	cmp	r0, #0
    a3ec:	1a00002c 	bne	a4a4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x314>
    a3f0:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    a3f4:	e28d0030 	add	r0, sp, #48	; 0x30
    a3f8:	eb00078e 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    a3fc:	e300150c 	movw	r1, #1292	; 0x50c
    a400:	e3431f98 	movt	r1, #16280	; 0x3f98
    a404:	e0851001 	add	r1, r5, r1
    a408:	e28d003c 	add	r0, sp, #60	; 0x3c
    a40c:	eb000747 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a410:	e1a00004 	mov	r0, r4
    a414:	eb000a26 	bl	ccb4 <CDWHCITransferStageData::GetStatusMask() const>
    a418:	e1a01000 	mov	r1, r0
    a41c:	e28d003c 	add	r0, sp, #60	; 0x3c
    a420:	eb00076e 	bl	c1e0 <CDWHCIRegister::Set(unsigned int)>
    a424:	e28d003c 	add	r0, sp, #60	; 0x3c
    a428:	eb000750 	bl	c170 <CDWHCIRegister::Write()>
    a42c:	e28d0030 	add	r0, sp, #48	; 0x30
    a430:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a434:	eb00078f 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a438:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    a43c:	e28d0030 	add	r0, sp, #48	; 0x30
    a440:	eb00077c 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    a444:	e28d0030 	add	r0, sp, #48	; 0x30
    a448:	eb000748 	bl	c170 <CDWHCIRegister::Write()>
    a44c:	e28d003c 	add	r0, sp, #60	; 0x3c
    a450:	eb00073e 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a454:	e28d0030 	add	r0, sp, #48	; 0x30
    a458:	eb00073c 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a45c:	e28d0024 	add	r0, sp, #36	; 0x24
    a460:	eb00073a 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a464:	e28d0018 	add	r0, sp, #24
    a468:	eb000738 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a46c:	e28d000c 	add	r0, sp, #12
    a470:	eb000736 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a474:	e1a0000d 	mov	r0, sp
    a478:	eb000734 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a47c:	e28dd048 	add	sp, sp, #72	; 0x48
    a480:	e8bd8070 	pop	{r4, r5, r6, pc}
    a484:	e3e01802 	mvn	r1, #131072	; 0x20000
    a488:	e28d0030 	add	r0, sp, #48	; 0x30
    a48c:	eb000769 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    a490:	eaffffb1 	b	a35c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1cc>
    a494:	e3e01902 	mvn	r1, #32768	; 0x8000
    a498:	e28d0030 	add	r0, sp, #48	; 0x30
    a49c:	eb000765 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    a4a0:	eaffffa6 	b	a340 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1b0>
    a4a4:	e3a01202 	mov	r1, #536870912	; 0x20000000
    a4a8:	e28d0030 	add	r0, sp, #48	; 0x30
    a4ac:	eb000771 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a4b0:	eaffffd1 	b	a3fc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x26c>
    a4b4:	e1a00004 	mov	r0, r4
    a4b8:	eb0009df 	bl	cc3c <CDWHCITransferStageData::GetHubPortAddress() const>
    a4bc:	e1a01000 	mov	r1, r0
    a4c0:	e28d0024 	add	r0, sp, #36	; 0x24
    a4c4:	eb00076b 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a4c8:	e1a00004 	mov	r0, r4
    a4cc:	eb0009be 	bl	cbcc <CDWHCITransferStageData::GetHubAddress() const>
    a4d0:	e1a01380 	lsl	r1, r0, #7
    a4d4:	e28d0024 	add	r0, sp, #36	; 0x24
    a4d8:	eb000766 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a4dc:	e1a00004 	mov	r0, r4
    a4e0:	eb0009f1 	bl	ccac <CDWHCITransferStageData::GetSplitPosition() const>
    a4e4:	e1a01700 	lsl	r1, r0, #14
    a4e8:	e28d0024 	add	r0, sp, #36	; 0x24
    a4ec:	eb000761 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a4f0:	e1a00004 	mov	r0, r4
    a4f4:	eb0009a7 	bl	cb98 <CDWHCITransferStageData::IsSplitComplete() const>
    a4f8:	e3500000 	cmp	r0, #0
    a4fc:	1a00000a 	bne	a52c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x39c>
    a500:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a504:	e28d0024 	add	r0, sp, #36	; 0x24
    a508:	eb00075a 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a50c:	eaffff6c 	b	a2c4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x134>
    a510:	e30a1928 	movw	r1, #43304	; 0xa928
    a514:	e30a09a8 	movw	r0, #43432	; 0xa9a8
    a518:	e3401002 	movt	r1, #2
    a51c:	e3400002 	movt	r0, #2
    a520:	e30022ab 	movw	r2, #683	; 0x2ab
    a524:	eb00699c 	bl	24b9c <assertion_failed>
    a528:	eaffff23 	b	a1bc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2c>
    a52c:	e3a01801 	mov	r1, #65536	; 0x10000
    a530:	e28d0024 	add	r0, sp, #36	; 0x24
    a534:	eb00074f 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a538:	eafffff0 	b	a500 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x370>
    a53c:	e30a1928 	movw	r1, #43304	; 0xa928
    a540:	e30a0998 	movw	r0, #43416	; 0xa998
    a544:	e3401002 	movt	r1, #2
    a548:	e3400002 	movt	r0, #2
    a54c:	e30022a9 	movw	r2, #681	; 0x2a9
    a550:	eb006991 	bl	24b9c <assertion_failed>
    a554:	eaffff12 	b	a1a4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x14>

0000a558 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    a558:	e92d4070 	push	{r4, r5, r6, lr}
    a55c:	e2515000 	subs	r5, r1, #0
    a560:	e24dd018 	sub	sp, sp, #24
    a564:	e1a06000 	mov	r6, r0
    a568:	0a00003a 	beq	a658 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x100>
    a56c:	e1a00005 	mov	r0, r5
    a570:	eb000846 	bl	c690 <CDWHCITransferStageData::GetChannelNumber() const>
    a574:	e596300c 	ldr	r3, [r6, #12]
    a578:	e1500003 	cmp	r0, r3
    a57c:	e1a04000 	mov	r4, r0
    a580:	2a00002d 	bcs	a63c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xe4>
    a584:	e30c1028 	movw	r1, #49192	; 0xc028
    a588:	e34011fc 	movt	r1, #508	; 0x1fc
    a58c:	e0841001 	add	r1, r4, r1
    a590:	e1a0000d 	mov	r0, sp
    a594:	e1a04281 	lsl	r4, r1, #5
    a598:	e1a01004 	mov	r1, r4
    a59c:	eb0006e3 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a5a0:	e1a0000d 	mov	r0, sp
    a5a4:	eb0006ea 	bl	c154 <CDWHCIRegister::Read()>
    a5a8:	e1a0000d 	mov	r0, sp
    a5ac:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a5b0:	eb00070e 	bl	c1f0 <CDWHCIRegister::IsSet(unsigned int) const>
    a5b4:	e3500000 	cmp	r0, #0
    a5b8:	1a000006 	bne	a5d8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x80>
    a5bc:	e1a01005 	mov	r1, r5
    a5c0:	e1a00006 	mov	r0, r6
    a5c4:	ebfffef1 	bl	a190 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    a5c8:	e1a0000d 	mov	r0, sp
    a5cc:	eb0006df 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a5d0:	e28dd018 	add	sp, sp, #24
    a5d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a5d8:	e1a00005 	mov	r0, r5
    a5dc:	e3a01000 	mov	r1, #0
    a5e0:	eb000824 	bl	c678 <CDWHCITransferStageData::SetSubState(unsigned int)>
    a5e4:	e1a0000d 	mov	r0, sp
    a5e8:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    a5ec:	eb000711 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    a5f0:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    a5f4:	e1a0000d 	mov	r0, sp
    a5f8:	eb00071e 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    a5fc:	e1a0000d 	mov	r0, sp
    a600:	eb0006da 	bl	c170 <CDWHCIRegister::Write()>
    a604:	e284100c 	add	r1, r4, #12
    a608:	e28d000c 	add	r0, sp, #12
    a60c:	eb0006c7 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a610:	e3a01002 	mov	r1, #2
    a614:	e28d000c 	add	r0, sp, #12
    a618:	eb0006f0 	bl	c1e0 <CDWHCIRegister::Set(unsigned int)>
    a61c:	e28d000c 	add	r0, sp, #12
    a620:	eb0006d2 	bl	c170 <CDWHCIRegister::Write()>
    a624:	e28d000c 	add	r0, sp, #12
    a628:	eb0006c8 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a62c:	e1a0000d 	mov	r0, sp
    a630:	eb0006c6 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    a634:	e28dd018 	add	sp, sp, #24
    a638:	e8bd8070 	pop	{r4, r5, r6, pc}
    a63c:	e30a1928 	movw	r1, #43304	; 0xa928
    a640:	e30a09a8 	movw	r0, #43432	; 0xa9a8
    a644:	e3401002 	movt	r1, #2
    a648:	e3400002 	movt	r0, #2
    a64c:	e3a02e29 	mov	r2, #656	; 0x290
    a650:	eb006951 	bl	24b9c <assertion_failed>
    a654:	eaffffca 	b	a584 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x2c>
    a658:	e30a1928 	movw	r1, #43304	; 0xa928
    a65c:	e30a0998 	movw	r0, #43416	; 0xa998
    a660:	e3401002 	movt	r1, #2
    a664:	e3400002 	movt	r0, #2
    a668:	e300228e 	movw	r2, #654	; 0x28e
    a66c:	eb00694a 	bl	24b9c <assertion_failed>
    a670:	eaffffbd 	b	a56c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x14>

0000a674 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    a674:	e92d4070 	push	{r4, r5, r6, lr}
    a678:	e2514000 	subs	r4, r1, #0
    a67c:	e1a05000 	mov	r5, r0
    a680:	0a000022 	beq	a710 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    a684:	e1a00004 	mov	r0, r4
    a688:	eb0007f8 	bl	c670 <CDWHCITransferStageData::GetState() const>
    a68c:	e3500003 	cmp	r0, #3
    a690:	0a000005 	beq	a6ac <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x38>
    a694:	e30a1928 	movw	r1, #43304	; 0xa928
    a698:	e30a09c0 	movw	r0, #43456	; 0xa9c0
    a69c:	e3401002 	movt	r1, #2
    a6a0:	e3400002 	movt	r0, #2
    a6a4:	e3002425 	movw	r2, #1061	; 0x425
    a6a8:	eb00693b 	bl	24b9c <assertion_failed>
    a6ac:	e1a00004 	mov	r0, r4
    a6b0:	eb000936 	bl	cb90 <CDWHCITransferStageData::IsSplit() const>
    a6b4:	e2501000 	subs	r1, r0, #0
    a6b8:	1a000005 	bne	a6d4 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x60>
    a6bc:	e1a00004 	mov	r0, r4
    a6c0:	eb0007e8 	bl	c668 <CDWHCITransferStageData::SetState(unsigned int)>
    a6c4:	e1a01004 	mov	r1, r4
    a6c8:	e1a00005 	mov	r0, r5
    a6cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    a6d0:	eaffffa0 	b	a558 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a6d4:	e1a00004 	mov	r0, r4
    a6d8:	e3a01001 	mov	r1, #1
    a6dc:	eb0007e1 	bl	c668 <CDWHCITransferStageData::SetState(unsigned int)>
    a6e0:	e3a01000 	mov	r1, #0
    a6e4:	e1a00004 	mov	r0, r4
    a6e8:	eb0007d0 	bl	c630 <CDWHCITransferStageData::SetSplitComplete(int)>
    a6ec:	e1a00004 	mov	r0, r4
    a6f0:	eb0009a3 	bl	cd84 <CDWHCITransferStageData::GetFrameScheduler() const>
    a6f4:	e5903000 	ldr	r3, [r0]
    a6f8:	e5933008 	ldr	r3, [r3, #8]
    a6fc:	e12fff33 	blx	r3
    a700:	e1a01004 	mov	r1, r4
    a704:	e1a00005 	mov	r0, r5
    a708:	e8bd4070 	pop	{r4, r5, r6, lr}
    a70c:	eaffff91 	b	a558 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a710:	e30a1928 	movw	r1, #43304	; 0xa928
    a714:	e30a0998 	movw	r0, #43416	; 0xa998
    a718:	e3401002 	movt	r1, #2
    a71c:	e3400002 	movt	r0, #2
    a720:	e3002424 	movw	r2, #1060	; 0x424
    a724:	eb00691c 	bl	24b9c <assertion_failed>
    a728:	eaffffd5 	b	a684 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x10>

0000a72c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    a72c:	e92d4070 	push	{r4, r5, r6, lr}
    a730:	e2525000 	subs	r5, r2, #0
    a734:	e1a04001 	mov	r4, r1
    a738:	0a00000f 	beq	a77c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x50>
    a73c:	e3540000 	cmp	r4, #0
    a740:	0a000003 	beq	a754 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x28>
    a744:	e1a01004 	mov	r1, r4
    a748:	e1a00005 	mov	r0, r5
    a74c:	e8bd4070 	pop	{r4, r5, r6, lr}
    a750:	eaffffc7 	b	a674 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a754:	e30a1928 	movw	r1, #43304	; 0xa928
    a758:	e30a09f4 	movw	r0, #43508	; 0xa9f4
    a75c:	e3401002 	movt	r1, #2
    a760:	e3400002 	movt	r0, #2
    a764:	e300243e 	movw	r2, #1086	; 0x43e
    a768:	eb00690b 	bl	24b9c <assertion_failed>
    a76c:	e1a01004 	mov	r1, r4
    a770:	e1a00005 	mov	r0, r5
    a774:	e8bd4070 	pop	{r4, r5, r6, lr}
    a778:	eaffffbd 	b	a674 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a77c:	e30a1928 	movw	r1, #43304	; 0xa928
    a780:	e30a0938 	movw	r0, #43320	; 0xa938
    a784:	e3401002 	movt	r1, #2
    a788:	e3400002 	movt	r0, #2
    a78c:	e300243b 	movw	r2, #1083	; 0x43b
    a790:	eb006901 	bl	24b9c <assertion_failed>
    a794:	eaffffe8 	b	a73c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x10>

0000a798 <CDWHCIDevice::AllocateChannel()>:
    a798:	e590c014 	ldr	ip, [r0, #20]
    a79c:	e92d4010 	push	{r4, lr}
    a7a0:	e35c0000 	cmp	ip, #0
    a7a4:	e24dd008 	sub	sp, sp, #8
    a7a8:	e1a04000 	mov	r4, r0
    a7ac:	1a000014 	bne	a804 <CDWHCIDevice::AllocateChannel()+0x6c>
    a7b0:	e590100c 	ldr	r1, [r0, #12]
    a7b4:	e3510000 	cmp	r1, #0
    a7b8:	0a00000e 	beq	a7f8 <CDWHCIDevice::AllocateChannel()+0x60>
    a7bc:	e5903010 	ldr	r3, [r0, #16]
    a7c0:	e2130001 	ands	r0, r3, #1
    a7c4:	0a000025 	beq	a860 <CDWHCIDevice::AllocateChannel()+0xc8>
    a7c8:	e3a00000 	mov	r0, #0
    a7cc:	e3a03001 	mov	r3, #1
    a7d0:	ea000002 	b	a7e0 <CDWHCIDevice::AllocateChannel()+0x48>
    a7d4:	e5942010 	ldr	r2, [r4, #16]
    a7d8:	e1120003 	tst	r2, r3
    a7dc:	0a000013 	beq	a830 <CDWHCIDevice::AllocateChannel()+0x98>
    a7e0:	e2800001 	add	r0, r0, #1
    a7e4:	e1a03083 	lsl	r3, r3, #1
    a7e8:	e1500001 	cmp	r0, r1
    a7ec:	3afffff8 	bcc	a7d4 <CDWHCIDevice::AllocateChannel()+0x3c>
    a7f0:	e35c0000 	cmp	ip, #0
    a7f4:	1a000017 	bne	a858 <CDWHCIDevice::AllocateChannel()+0xc0>
    a7f8:	e3a00010 	mov	r0, #16
    a7fc:	e28dd008 	add	sp, sp, #8
    a800:	e8bd8010 	pop	{r4, pc}
    a804:	e1a0000c 	mov	r0, ip
    a808:	eb005de3 	bl	21f9c <EnterCritical>
    a80c:	e594100c 	ldr	r1, [r4, #12]
    a810:	e3510000 	cmp	r1, #0
    a814:	0594c014 	ldreq	ip, [r4, #20]
    a818:	0afffff4 	beq	a7f0 <CDWHCIDevice::AllocateChannel()+0x58>
    a81c:	e5943010 	ldr	r3, [r4, #16]
    a820:	e594c014 	ldr	ip, [r4, #20]
    a824:	e2130001 	ands	r0, r3, #1
    a828:	1affffe6 	bne	a7c8 <CDWHCIDevice::AllocateChannel()+0x30>
    a82c:	e3a03001 	mov	r3, #1
    a830:	e5942010 	ldr	r2, [r4, #16]
    a834:	e35c0000 	cmp	ip, #0
    a838:	e1823003 	orr	r3, r2, r3
    a83c:	e5843010 	str	r3, [r4, #16]
    a840:	0affffed 	beq	a7fc <CDWHCIDevice::AllocateChannel()+0x64>
    a844:	e58d0004 	str	r0, [sp, #4]
    a848:	eb005e01 	bl	22054 <LeaveCritical>
    a84c:	e59d0004 	ldr	r0, [sp, #4]
    a850:	e28dd008 	add	sp, sp, #8
    a854:	e8bd8010 	pop	{r4, pc}
    a858:	eb005dfd 	bl	22054 <LeaveCritical>
    a85c:	eaffffe5 	b	a7f8 <CDWHCIDevice::AllocateChannel()+0x60>
    a860:	e5943010 	ldr	r3, [r4, #16]
    a864:	e3833001 	orr	r3, r3, #1
    a868:	e5843010 	str	r3, [r4, #16]
    a86c:	eaffffe2 	b	a7fc <CDWHCIDevice::AllocateChannel()+0x64>

0000a870 <CDWHCIDevice::FreeChannel(unsigned int)>:
    a870:	e590300c 	ldr	r3, [r0, #12]
    a874:	e92d4070 	push	{r4, r5, r6, lr}
    a878:	e1530001 	cmp	r3, r1
    a87c:	e1a04000 	mov	r4, r0
    a880:	e1a06001 	mov	r6, r1
    a884:	9a000018 	bls	a8ec <CDWHCIDevice::FreeChannel(unsigned int)+0x7c>
    a888:	e5940014 	ldr	r0, [r4, #20]
    a88c:	e3a05001 	mov	r5, #1
    a890:	e1a05615 	lsl	r5, r5, r6
    a894:	e3500000 	cmp	r0, #0
    a898:	1a000011 	bne	a8e4 <CDWHCIDevice::FreeChannel(unsigned int)+0x74>
    a89c:	e5943010 	ldr	r3, [r4, #16]
    a8a0:	e1150003 	tst	r5, r3
    a8a4:	0a000007 	beq	a8c8 <CDWHCIDevice::FreeChannel(unsigned int)+0x58>
    a8a8:	e5942014 	ldr	r2, [r4, #20]
    a8ac:	e5943010 	ldr	r3, [r4, #16]
    a8b0:	e3520000 	cmp	r2, #0
    a8b4:	e1c35005 	bic	r5, r3, r5
    a8b8:	e5845010 	str	r5, [r4, #16]
    a8bc:	08bd8070 	popeq	{r4, r5, r6, pc}
    a8c0:	e8bd4070 	pop	{r4, r5, r6, lr}
    a8c4:	ea005de2 	b	22054 <LeaveCritical>
    a8c8:	e30a1928 	movw	r1, #43304	; 0xa928
    a8cc:	e30a0a00 	movw	r0, #43520	; 0xaa00
    a8d0:	e3401002 	movt	r1, #2
    a8d4:	e3400002 	movt	r0, #2
    a8d8:	e3002462 	movw	r2, #1122	; 0x462
    a8dc:	eb0068ae 	bl	24b9c <assertion_failed>
    a8e0:	eafffff0 	b	a8a8 <CDWHCIDevice::FreeChannel(unsigned int)+0x38>
    a8e4:	eb005dac 	bl	21f9c <EnterCritical>
    a8e8:	eaffffeb 	b	a89c <CDWHCIDevice::FreeChannel(unsigned int)+0x2c>
    a8ec:	e30a1928 	movw	r1, #43304	; 0xa928
    a8f0:	e30a09a8 	movw	r0, #43432	; 0xa9a8
    a8f4:	e3401002 	movt	r1, #2
    a8f8:	e3400002 	movt	r0, #2
    a8fc:	e300245d 	movw	r2, #1117	; 0x45d
    a900:	eb0068a5 	bl	24b9c <assertion_failed>
    a904:	eaffffdf 	b	a888 <CDWHCIDevice::FreeChannel(unsigned int)+0x18>

0000a908 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)>:
    a908:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a90c:	e2517000 	subs	r7, r1, #0
    a910:	e24dd008 	sub	sp, sp, #8
    a914:	e1a04000 	mov	r4, r0
    a918:	e1a08002 	mov	r8, r2
    a91c:	e1a09003 	mov	r9, r3
    a920:	0a000048 	beq	aa48 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x140>
    a924:	e1a00004 	mov	r0, r4
    a928:	ebffff9a 	bl	a798 <CDWHCIDevice::AllocateChannel()>
    a92c:	e594300c 	ldr	r3, [r4, #12]
    a930:	e1500003 	cmp	r0, r3
    a934:	e1a05000 	mov	r5, r0
    a938:	23a07000 	movcs	r7, #0
    a93c:	3a000002 	bcc	a94c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x44>
    a940:	e1a00007 	mov	r0, r7
    a944:	e28dd008 	add	sp, sp, #8
    a948:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a94c:	e3a00054 	mov	r0, #84	; 0x54
    a950:	e084a105 	add	sl, r4, r5, lsl #2
    a954:	eb005d84 	bl	21f6c <operator new(unsigned int)>
    a958:	e1a03008 	mov	r3, r8
    a95c:	e58d9000 	str	r9, [sp]
    a960:	e1a02007 	mov	r2, r7
    a964:	e1a01005 	mov	r1, r5
    a968:	e1a06000 	mov	r6, r0
    a96c:	eb00075d 	bl	c6e8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)>
    a970:	e59a3018 	ldr	r3, [sl, #24]
    a974:	e3530000 	cmp	r3, #0
    a978:	0a000005 	beq	a994 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x8c>
    a97c:	e30a1928 	movw	r1, #43304	; 0xa928
    a980:	e30a0a30 	movw	r0, #43568	; 0xaa30
    a984:	e3401002 	movt	r1, #2
    a988:	e3400002 	movt	r0, #2
    a98c:	e300226b 	movw	r2, #619	; 0x26b
    a990:	eb006881 	bl	24b9c <assertion_failed>
    a994:	e1a01005 	mov	r1, r5
    a998:	e1a00004 	mov	r0, r4
    a99c:	e58a6018 	str	r6, [sl, #24]
    a9a0:	ebfffdc0 	bl	a0a8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    a9a4:	e1a00006 	mov	r0, r6
    a9a8:	eb000878 	bl	cb90 <CDWHCITransferStageData::IsSplit() const>
    a9ac:	e2501000 	subs	r1, r0, #0
    a9b0:	e1a00006 	mov	r0, r6
    a9b4:	1a000007 	bne	a9d8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0xd0>
    a9b8:	eb00072a 	bl	c668 <CDWHCITransferStageData::SetState(unsigned int)>
    a9bc:	e1a00004 	mov	r0, r4
    a9c0:	e1a01006 	mov	r1, r6
    a9c4:	ebfffee3 	bl	a558 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a9c8:	e3a07001 	mov	r7, #1
    a9cc:	e1a00007 	mov	r0, r7
    a9d0:	e28dd008 	add	sp, sp, #8
    a9d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a9d8:	eb00072a 	bl	c688 <CDWHCITransferStageData::BeginSplitCycle()>
    a9dc:	e2507000 	subs	r7, r0, #0
    a9e0:	1a00000c 	bne	aa18 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x110>
    a9e4:	e1a01005 	mov	r1, r5
    a9e8:	e1a00004 	mov	r0, r4
    a9ec:	ebfffdca 	bl	a11c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a9f0:	e1a00006 	mov	r0, r6
    a9f4:	eb00068b 	bl	c428 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a9f8:	e1a00006 	mov	r0, r6
    a9fc:	e3a01054 	mov	r1, #84	; 0x54
    aa00:	eb005d5d 	bl	21f7c <operator delete(void*, unsigned int)>
    aa04:	e58a7018 	str	r7, [sl, #24]
    aa08:	e1a01005 	mov	r1, r5
    aa0c:	e1a00004 	mov	r0, r4
    aa10:	ebffff96 	bl	a870 <CDWHCIDevice::FreeChannel(unsigned int)>
    aa14:	eaffffc9 	b	a940 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x38>
    aa18:	e1a00006 	mov	r0, r6
    aa1c:	e3a01001 	mov	r1, #1
    aa20:	eb000710 	bl	c668 <CDWHCITransferStageData::SetState(unsigned int)>
    aa24:	e3a01000 	mov	r1, #0
    aa28:	e1a00006 	mov	r0, r6
    aa2c:	eb0006ff 	bl	c630 <CDWHCITransferStageData::SetSplitComplete(int)>
    aa30:	e1a00006 	mov	r0, r6
    aa34:	eb0008d2 	bl	cd84 <CDWHCITransferStageData::GetFrameScheduler() const>
    aa38:	e5903000 	ldr	r3, [r0]
    aa3c:	e5933008 	ldr	r3, [r3, #8]
    aa40:	e12fff33 	blx	r3
    aa44:	eaffffdc 	b	a9bc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0xb4>
    aa48:	e30a1928 	movw	r1, #43304	; 0xa928
    aa4c:	e30a0a24 	movw	r0, #43556	; 0xaa24
    aa50:	e3401002 	movt	r1, #2
    aa54:	e3400002 	movt	r0, #2
    aa58:	e300225f 	movw	r2, #607	; 0x25f
    aa5c:	eb00684e 	bl	24b9c <assertion_failed>
    aa60:	eaffffaf 	b	a924 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)+0x1c>

0000aa64 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)>:
    aa64:	e92d4070 	push	{r4, r5, r6, lr}
    aa68:	e2514000 	subs	r4, r1, #0
    aa6c:	e1a05000 	mov	r5, r0
    aa70:	0a000025 	beq	ab0c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)+0xa8>
    aa74:	e1a00004 	mov	r0, r4
    aa78:	eb000e58 	bl	e3e0 <CUSBRequest::GetEndpoint() const>
    aa7c:	eb000d47 	bl	dfa0 <CUSBEndpoint::GetType() const>
    aa80:	e3500001 	cmp	r0, #1
    aa84:	0a00000a 	beq	aab4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)+0x50>
    aa88:	e1a00004 	mov	r0, r4
    aa8c:	eb000e53 	bl	e3e0 <CUSBRequest::GetEndpoint() const>
    aa90:	eb000d42 	bl	dfa0 <CUSBEndpoint::GetType() const>
    aa94:	e3500002 	cmp	r0, #2
    aa98:	0a000005 	beq	aab4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)+0x50>
    aa9c:	e30a1928 	movw	r1, #43304	; 0xa928
    aaa0:	e30a0a4c 	movw	r0, #43596	; 0xaa4c
    aaa4:	e3401002 	movt	r1, #2
    aaa8:	e3400002 	movt	r0, #2
    aaac:	e3a020dc 	mov	r2, #220	; 0xdc
    aab0:	eb006839 	bl	24b9c <assertion_failed>
    aab4:	e1a00004 	mov	r0, r4
    aab8:	eb000e96 	bl	e518 <CUSBRequest::GetBufLen() const>
    aabc:	e3500000 	cmp	r0, #0
    aac0:	1a000005 	bne	aadc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)+0x78>
    aac4:	e30a1928 	movw	r1, #43304	; 0xa928
    aac8:	e30a0ac0 	movw	r0, #43712	; 0xaac0
    aacc:	e3401002 	movt	r1, #2
    aad0:	e3400002 	movt	r0, #2
    aad4:	e3a020dd 	mov	r2, #221	; 0xdd
    aad8:	eb00682f 	bl	24b9c <assertion_failed>
    aadc:	e3a01000 	mov	r1, #0
    aae0:	e1a00004 	mov	r0, r4
    aae4:	eb000e4d 	bl	e420 <CUSBRequest::SetStatus(int)>
    aae8:	e1a00004 	mov	r0, r4
    aaec:	eb000e3b 	bl	e3e0 <CUSBRequest::GetEndpoint() const>
    aaf0:	eb000d2c 	bl	dfa8 <CUSBEndpoint::IsDirectionIn() const>
    aaf4:	e1a01004 	mov	r1, r4
    aaf8:	e3a03000 	mov	r3, #0
    aafc:	e1a02000 	mov	r2, r0
    ab00:	e1a00005 	mov	r0, r5
    ab04:	e8bd4070 	pop	{r4, r5, r6, lr}
    ab08:	eaffff7e 	b	a908 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)>
    ab0c:	e30a1928 	movw	r1, #43304	; 0xa928
    ab10:	e30a0a24 	movw	r0, #43556	; 0xaa24
    ab14:	e3401002 	movt	r1, #2
    ab18:	e3400002 	movt	r0, #2
    ab1c:	e3a020da 	mov	r2, #218	; 0xda
    ab20:	eb00681d 	bl	24b9c <assertion_failed>
    ab24:	eaffffd2 	b	aa74 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*)+0x10>

0000ab28 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    ab28:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ab2c:	e0807101 	add	r7, r0, r1, lsl #2
    ab30:	e24dd020 	sub	sp, sp, #32
    ab34:	e1a06001 	mov	r6, r1
    ab38:	e5974018 	ldr	r4, [r7, #24]
    ab3c:	e1a05000 	mov	r5, r0
    ab40:	e3540000 	cmp	r4, #0
    ab44:	0a0000d4 	beq	ae9c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x374>
    ab48:	e1a00004 	mov	r0, r4
    ab4c:	eb00087c 	bl	cd44 <CDWHCITransferStageData::GetURB() const>
    ab50:	e2508000 	subs	r8, r0, #0
    ab54:	0a0000d7 	beq	aeb8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x390>
    ab58:	e1a00004 	mov	r0, r4
    ab5c:	eb0006c7 	bl	c680 <CDWHCITransferStageData::GetSubState() const>
    ab60:	e3500000 	cmp	r0, #0
    ab64:	0a000061 	beq	acf0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1c8>
    ab68:	e3500001 	cmp	r0, #1
    ab6c:	0a000030 	beq	ac34 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x10c>
    ab70:	e30a1928 	movw	r1, #43304	; 0xa928
    ab74:	e30b0130 	movw	r0, #45360	; 0xb130
    ab78:	e3401002 	movt	r1, #2
    ab7c:	e3400002 	movt	r0, #2
    ab80:	e3a02fce 	mov	r2, #824	; 0x338
    ab84:	eb006804 	bl	24b9c <assertion_failed>
    ab88:	e1a00004 	mov	r0, r4
    ab8c:	eb0006b7 	bl	c670 <CDWHCITransferStageData::GetState() const>
    ab90:	e3500001 	cmp	r0, #1
    ab94:	e1a09000 	mov	r9, r0
    ab98:	0a00007b 	beq	ad8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x264>
    ab9c:	3a00006c 	bcc	ad54 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x22c>
    aba0:	e3500002 	cmp	r0, #2
    aba4:	1a000056 	bne	ad04 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1dc>
    aba8:	e1a00004 	mov	r0, r4
    abac:	eb00084b 	bl	cce0 <CDWHCITransferStageData::GetTransactionStatus() const>
    abb0:	e300378c 	movw	r3, #1932	; 0x78c
    abb4:	e1100003 	tst	r0, r3
    abb8:	e1a09000 	mov	r9, r0
    abbc:	0a000081 	beq	adc8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x2a0>
    abc0:	eb00697a 	bl	251b0 <CLogger::Get()>
    abc4:	e59f1418 	ldr	r1, [pc, #1048]	; afe4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4bc>
    abc8:	e58d9000 	str	r9, [sp]
    abcc:	e30a3b50 	movw	r3, #43856	; 0xab50
    abd0:	e3a02001 	mov	r2, #1
    abd4:	e3403002 	movt	r3, #2
    abd8:	eb006a50 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    abdc:	e3a01000 	mov	r1, #0
    abe0:	e1a00008 	mov	r0, r8
    abe4:	eb000e0d 	bl	e420 <CUSBRequest::SetStatus(int)>
    abe8:	e1a01006 	mov	r1, r6
    abec:	e1a00005 	mov	r0, r5
    abf0:	ebfffd49 	bl	a11c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    abf4:	e3540000 	cmp	r4, #0
    abf8:	0a000004 	beq	ac10 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe8>
    abfc:	e1a00004 	mov	r0, r4
    ac00:	eb000608 	bl	c428 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ac04:	e1a00004 	mov	r0, r4
    ac08:	e3a01054 	mov	r1, #84	; 0x54
    ac0c:	eb005cda 	bl	21f7c <operator delete(void*, unsigned int)>
    ac10:	e3a03000 	mov	r3, #0
    ac14:	e1a01006 	mov	r1, r6
    ac18:	e1a00005 	mov	r0, r5
    ac1c:	e5873018 	str	r3, [r7, #24]
    ac20:	ebffff12 	bl	a870 <CDWHCIDevice::FreeChannel(unsigned int)>
    ac24:	e1a00008 	mov	r0, r8
    ac28:	eb000e47 	bl	e54c <CUSBRequest::CallCompletionRoutine()>
    ac2c:	e28dd020 	add	sp, sp, #32
    ac30:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ac34:	e1a00004 	mov	r0, r4
    ac38:	eb0007c0 	bl	cb40 <CDWHCITransferStageData::GetDMAAddress() const>
    ac3c:	e1a09000 	mov	r9, r0
    ac40:	e1a00004 	mov	r0, r4
    ac44:	eb0007cd 	bl	cb80 <CDWHCITransferStageData::GetBytesToTransfer() const>
    ac48:	e1a01000 	mov	r1, r0
    ac4c:	e1a00009 	mov	r0, r9
    ac50:	eb007875 	bl	28e2c <CleanAndInvalidateDataCacheRange>
    ac54:	e1a09286 	lsl	r9, r6, #5
    ac58:	e3a01e51 	mov	r1, #1296	; 0x510
    ac5c:	e3431f98 	movt	r1, #16280	; 0x3f98
    ac60:	e0891001 	add	r1, r9, r1
    ac64:	e28d0008 	add	r0, sp, #8
    ac68:	eb000530 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ac6c:	e28d0008 	add	r0, sp, #8
    ac70:	eb000537 	bl	c154 <CDWHCIRegister::Read()>
    ac74:	e3001508 	movw	r1, #1288	; 0x508
    ac78:	e3431f98 	movt	r1, #16280	; 0x3f98
    ac7c:	e28d0014 	add	r0, sp, #20
    ac80:	e0891001 	add	r1, r9, r1
    ac84:	eb000529 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ac88:	e28d0014 	add	r0, sp, #20
    ac8c:	eb000530 	bl	c154 <CDWHCIRegister::Read()>
    ac90:	e3500002 	cmp	r0, #2
    ac94:	0a00008e 	beq	aed4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3ac>
    ac98:	e1a00004 	mov	r0, r4
    ac9c:	eb00067d 	bl	c698 <CDWHCITransferStageData::IsPeriodic() const>
    aca0:	e3500000 	cmp	r0, #0
    aca4:	1a00001e 	bne	ad24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1fc>
    aca8:	e28d0014 	add	r0, sp, #20
    acac:	eb000528 	bl	c154 <CDWHCIRegister::Read()>
    acb0:	e1a09000 	mov	r9, r0
    acb4:	e28d0008 	add	r0, sp, #8
    acb8:	eb00053b 	bl	c1ac <CDWHCIRegister::Get() const>
    acbc:	e1a0a000 	mov	sl, r0
    acc0:	e28d0008 	add	r0, sp, #8
    acc4:	eb000538 	bl	c1ac <CDWHCIRegister::Get() const>
    acc8:	e7e929da 	ubfx	r2, sl, #19, #10
    accc:	e1a01009 	mov	r1, r9
    acd0:	e7f23050 	ubfx	r3, r0, #0, #19
    acd4:	e1a00004 	mov	r0, r4
    acd8:	eb0005e3 	bl	c46c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    acdc:	e28d0014 	add	r0, sp, #20
    ace0:	eb00051a 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    ace4:	e28d0008 	add	r0, sp, #8
    ace8:	eb000518 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    acec:	eaffffa5 	b	ab88 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x60>
    acf0:	e1a01004 	mov	r1, r4
    acf4:	e1a00005 	mov	r0, r5
    acf8:	ebfffd24 	bl	a190 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    acfc:	e28dd020 	add	sp, sp, #32
    ad00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ad04:	e30023de 	movw	r2, #990	; 0x3de
    ad08:	e30a1928 	movw	r1, #43304	; 0xa928
    ad0c:	e30b0130 	movw	r0, #45360	; 0xb130
    ad10:	e3401002 	movt	r1, #2
    ad14:	e3400002 	movt	r0, #2
    ad18:	eb00679f 	bl	24b9c <assertion_failed>
    ad1c:	e28dd020 	add	sp, sp, #32
    ad20:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ad24:	e28d0008 	add	r0, sp, #8
    ad28:	eb00051f 	bl	c1ac <CDWHCIRegister::Get() const>
    ad2c:	e7e10ed0 	ubfx	r0, r0, #29, #2
    ad30:	e3500003 	cmp	r0, #3
    ad34:	1affffdb 	bne	aca8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x180>
    ad38:	e30a1928 	movw	r1, #43304	; 0xa928
    ad3c:	e30a0ad8 	movw	r0, #43736	; 0xaad8
    ad40:	e3401002 	movt	r1, #2
    ad44:	e3400002 	movt	r0, #2
    ad48:	e3a02e33 	mov	r2, #816	; 0x330
    ad4c:	eb006792 	bl	24b9c <assertion_failed>
    ad50:	eaffffd4 	b	aca8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x180>
    ad54:	e1a00004 	mov	r0, r4
    ad58:	eb0007e0 	bl	cce0 <CDWHCITransferStageData::GetTransactionStatus() const>
    ad5c:	e300378c 	movw	r3, #1932	; 0x78c
    ad60:	e1100003 	tst	r0, r3
    ad64:	e1a09000 	mov	r9, r0
    ad68:	1a00008c 	bne	afa0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x478>
    ad6c:	e3100050 	tst	r0, #80	; 0x50
    ad70:	1a000072 	bne	af40 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x418>
    ad74:	e1a00004 	mov	r0, r4
    ad78:	eb00076e 	bl	cb38 <CDWHCITransferStageData::IsStatusStage() const>
    ad7c:	e3500000 	cmp	r0, #0
    ad80:	0a000091 	beq	afcc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4a4>
    ad84:	e3a01001 	mov	r1, #1
    ad88:	eaffff94 	b	abe0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb8>
    ad8c:	e1a00004 	mov	r0, r4
    ad90:	eb0007d2 	bl	cce0 <CDWHCITransferStageData::GetTransactionStatus() const>
    ad94:	e30037dc 	movw	r3, #2012	; 0x7dc
    ad98:	e1100003 	tst	r0, r3
    ad9c:	e1a0a000 	mov	sl, r0
    ada0:	0a000030 	beq	ae68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x340>
    ada4:	eb006901 	bl	251b0 <CLogger::Get()>
    ada8:	e59f1234 	ldr	r1, [pc, #564]	; afe4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4bc>
    adac:	e58da000 	str	sl, [sp]
    adb0:	e1a02009 	mov	r2, r9
    adb4:	e30a3b50 	movw	r3, #43856	; 0xab50
    adb8:	e3403002 	movt	r3, #2
    adbc:	eb0069d7 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    adc0:	e3a01000 	mov	r1, #0
    adc4:	eaffff85 	b	abe0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb8>
    adc8:	e1a00004 	mov	r0, r4
    adcc:	eb0007ec 	bl	cd84 <CDWHCITransferStageData::GetFrameScheduler() const>
    add0:	e1a01009 	mov	r1, r9
    add4:	e5903000 	ldr	r3, [r0]
    add8:	e5933010 	ldr	r3, [r3, #16]
    addc:	e12fff33 	blx	r3
    ade0:	e1a00004 	mov	r0, r4
    ade4:	eb0007e6 	bl	cd84 <CDWHCITransferStageData::GetFrameScheduler() const>
    ade8:	e5903000 	ldr	r3, [r0]
    adec:	e593300c 	ldr	r3, [r3, #12]
    adf0:	e12fff33 	blx	r3
    adf4:	e3500000 	cmp	r0, #0
    adf8:	1a000016 	bne	ae58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x330>
    adfc:	e1a00004 	mov	r0, r4
    ae00:	eb0007c6 	bl	cd20 <CDWHCITransferStageData::IsStageComplete() const>
    ae04:	e3500000 	cmp	r0, #0
    ae08:	1a000039 	bne	aef4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3cc>
    ae0c:	e1a00004 	mov	r0, r4
    ae10:	eb00061c 	bl	c688 <CDWHCITransferStageData::BeginSplitCycle()>
    ae14:	e2501000 	subs	r1, r0, #0
    ae18:	0affff70 	beq	abe0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xb8>
    ae1c:	e1a00004 	mov	r0, r4
    ae20:	eb00061c 	bl	c698 <CDWHCITransferStageData::IsPeriodic() const>
    ae24:	e2506000 	subs	r6, r0, #0
    ae28:	1a000048 	bne	af50 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x428>
    ae2c:	e3a01001 	mov	r1, #1
    ae30:	e1a00004 	mov	r0, r4
    ae34:	eb00060b 	bl	c668 <CDWHCITransferStageData::SetState(unsigned int)>
    ae38:	e1a01006 	mov	r1, r6
    ae3c:	e1a00004 	mov	r0, r4
    ae40:	eb0005fa 	bl	c630 <CDWHCITransferStageData::SetSplitComplete(int)>
    ae44:	e1a00004 	mov	r0, r4
    ae48:	eb0007cd 	bl	cd84 <CDWHCITransferStageData::GetFrameScheduler() const>
    ae4c:	e5903000 	ldr	r3, [r0]
    ae50:	e5933008 	ldr	r3, [r3, #8]
    ae54:	e12fff33 	blx	r3
    ae58:	e1a01004 	mov	r1, r4
    ae5c:	e1a00005 	mov	r0, r5
    ae60:	ebfffdbc 	bl	a558 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    ae64:	eaffffa4 	b	acfc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1d4>
    ae68:	e1a00004 	mov	r0, r4
    ae6c:	eb0007c4 	bl	cd84 <CDWHCITransferStageData::GetFrameScheduler() const>
    ae70:	e1a0100a 	mov	r1, sl
    ae74:	e5903000 	ldr	r3, [r0]
    ae78:	e5933010 	ldr	r3, [r3, #16]
    ae7c:	e12fff33 	blx	r3
    ae80:	e1a00004 	mov	r0, r4
    ae84:	e3a01002 	mov	r1, #2
    ae88:	eb0005f6 	bl	c668 <CDWHCITransferStageData::SetState(unsigned int)>
    ae8c:	e1a01009 	mov	r1, r9
    ae90:	e1a00004 	mov	r0, r4
    ae94:	eb0005e5 	bl	c630 <CDWHCITransferStageData::SetSplitComplete(int)>
    ae98:	eaffffd0 	b	ade0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x2b8>
    ae9c:	e30a1928 	movw	r1, #43304	; 0xa928
    aea0:	e30a0998 	movw	r0, #43416	; 0xa998
    aea4:	e3401002 	movt	r1, #2
    aea8:	e3400002 	movt	r0, #2
    aeac:	e3002315 	movw	r2, #789	; 0x315
    aeb0:	eb006739 	bl	24b9c <assertion_failed>
    aeb4:	eaffff23 	b	ab48 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x20>
    aeb8:	e30a1928 	movw	r1, #43304	; 0xa928
    aebc:	e30a0a24 	movw	r0, #43556	; 0xaa24
    aec0:	e3401002 	movt	r1, #2
    aec4:	e3400002 	movt	r0, #2
    aec8:	e3002317 	movw	r2, #791	; 0x317
    aecc:	eb006732 	bl	24b9c <assertion_failed>
    aed0:	eaffff20 	b	ab58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x30>
    aed4:	e1a01004 	mov	r1, r4
    aed8:	e1a00005 	mov	r0, r5
    aedc:	ebfffd9d 	bl	a558 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    aee0:	e28d0014 	add	r0, sp, #20
    aee4:	eb000499 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    aee8:	e28d0008 	add	r0, sp, #8
    aeec:	eb000497 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    aef0:	eaffff81 	b	acfc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1d4>
    aef4:	e1a01006 	mov	r1, r6
    aef8:	e1a00005 	mov	r0, r5
    aefc:	ebfffc86 	bl	a11c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    af00:	e1a00004 	mov	r0, r4
    af04:	eb00070b 	bl	cb38 <CDWHCITransferStageData::IsStatusStage() const>
    af08:	e3500000 	cmp	r0, #0
    af0c:	0a000005 	beq	af28 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x400>
    af10:	e3a01001 	mov	r1, #1
    af14:	e1a00008 	mov	r0, r8
    af18:	eb000d40 	bl	e420 <CUSBRequest::SetStatus(int)>
    af1c:	e3540000 	cmp	r4, #0
    af20:	1affff35 	bne	abfc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xd4>
    af24:	eaffff39 	b	ac10 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xe8>
    af28:	e1a00004 	mov	r0, r4
    af2c:	eb00077f 	bl	cd30 <CDWHCITransferStageData::GetResultLen() const>
    af30:	e1a01000 	mov	r1, r0
    af34:	e1a00008 	mov	r0, r8
    af38:	eb000d3a 	bl	e428 <CUSBRequest::SetResultLen(unsigned int)>
    af3c:	eafffff3 	b	af10 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x3e8>
    af40:	e1a00004 	mov	r0, r4
    af44:	eb0005d3 	bl	c698 <CDWHCITransferStageData::IsPeriodic() const>
    af48:	e3500000 	cmp	r0, #0
    af4c:	0affff88 	beq	ad74 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x24c>
    af50:	e3a01003 	mov	r1, #3
    af54:	e1a00004 	mov	r0, r4
    af58:	eb0005c2 	bl	c668 <CDWHCITransferStageData::SetState(unsigned int)>
    af5c:	e1a00008 	mov	r0, r8
    af60:	eb000d1e 	bl	e3e0 <CUSBRequest::GetEndpoint() const>
    af64:	eb000c15 	bl	dfc0 <CUSBEndpoint::GetInterval() const>
    af68:	e3a01064 	mov	r1, #100	; 0x64
    af6c:	e1a03004 	mov	r3, r4
    af70:	e304cdd3 	movw	ip, #19923	; 0x4dd3
    af74:	e341c062 	movt	ip, #4194	; 0x1062
    af78:	e595e008 	ldr	lr, [r5, #8]
    af7c:	e58d5000 	str	r5, [sp]
    af80:	e30a272c 	movw	r2, #42796	; 0xa72c
    af84:	e3402000 	movt	r2, #0
    af88:	e0040091 	mul	r4, r1, r0
    af8c:	e1a0000e 	mov	r0, lr
    af90:	e0854c94 	umull	r4, r5, r4, ip
    af94:	e1a01325 	lsr	r1, r5, #6
    af98:	eb005d92 	bl	225e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    af9c:	eaffff56 	b	acfc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x1d4>
    afa0:	eb006882 	bl	251b0 <CLogger::Get()>
    afa4:	e58d9000 	str	r9, [sp]
    afa8:	e3a02001 	mov	r2, #1
    afac:	e59f1030 	ldr	r1, [pc, #48]	; afe4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x4bc>
    afb0:	e30a3b50 	movw	r3, #43856	; 0xab50
    afb4:	e3403002 	movt	r3, #2
    afb8:	eb006958 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    afbc:	e3a01000 	mov	r1, #0
    afc0:	e1a00008 	mov	r0, r8
    afc4:	eb000d15 	bl	e420 <CUSBRequest::SetStatus(int)>
    afc8:	eaffff06 	b	abe8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xc0>
    afcc:	e1a00004 	mov	r0, r4
    afd0:	eb000756 	bl	cd30 <CDWHCITransferStageData::GetResultLen() const>
    afd4:	e1a01000 	mov	r1, r0
    afd8:	e1a00008 	mov	r0, r8
    afdc:	eb000d11 	bl	e428 <CUSBRequest::SetResultLen(unsigned int)>
    afe0:	eaffff67 	b	ad84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0x25c>
    afe4:	0002a91c 	.word	0x0002a91c

0000afe8 <CDWHCIDevice::InterruptHandler()>:
    afe8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    afec:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    aff0:	e1a07000 	mov	r7, r0
    aff4:	e3a01014 	mov	r1, #20
    aff8:	e28d0004 	add	r0, sp, #4
    affc:	e3431f98 	movt	r1, #16280	; 0x3f98
    b000:	eb00044a 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b004:	e28d0004 	add	r0, sp, #4
    b008:	eb000451 	bl	c154 <CDWHCIRegister::Read()>
    b00c:	e28d0004 	add	r0, sp, #4
    b010:	eb000465 	bl	c1ac <CDWHCIRegister::Get() const>
    b014:	e3100402 	tst	r0, #33554432	; 0x2000000
    b018:	1a000005 	bne	b034 <CDWHCIDevice::InterruptHandler()+0x4c>
    b01c:	e28d0004 	add	r0, sp, #4
    b020:	eb000452 	bl	c170 <CDWHCIRegister::Write()>
    b024:	e28d0004 	add	r0, sp, #4
    b028:	eb000448 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    b02c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b030:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b034:	e3001414 	movw	r1, #1044	; 0x414
    b038:	e28d0010 	add	r0, sp, #16
    b03c:	e3431f98 	movt	r1, #16280	; 0x3f98
    b040:	eb00043a 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b044:	e28d0010 	add	r0, sp, #16
    b048:	eb000441 	bl	c154 <CDWHCIRegister::Read()>
    b04c:	e28d0010 	add	r0, sp, #16
    b050:	eb000446 	bl	c170 <CDWHCIRegister::Write()>
    b054:	e597300c 	ldr	r3, [r7, #12]
    b058:	e3530000 	cmp	r3, #0
    b05c:	1300650c 	movwne	r6, #1292	; 0x50c
    b060:	13a04000 	movne	r4, #0
    b064:	13436f98 	movtne	r6, #16280	; 0x3f98
    b068:	13a05001 	movne	r5, #1
    b06c:	1a000005 	bne	b088 <CDWHCIDevice::InterruptHandler()+0xa0>
    b070:	ea000015 	b	b0cc <CDWHCIDevice::InterruptHandler()+0xe4>
    b074:	e597300c 	ldr	r3, [r7, #12]
    b078:	e2844001 	add	r4, r4, #1
    b07c:	e2866020 	add	r6, r6, #32
    b080:	e1530004 	cmp	r3, r4
    b084:	9a000010 	bls	b0cc <CDWHCIDevice::InterruptHandler()+0xe4>
    b088:	e28d0010 	add	r0, sp, #16
    b08c:	eb000446 	bl	c1ac <CDWHCIRegister::Get() const>
    b090:	e1100005 	tst	r0, r5
    b094:	e1a05085 	lsl	r5, r5, #1
    b098:	0afffff5 	beq	b074 <CDWHCIDevice::InterruptHandler()+0x8c>
    b09c:	e3a02000 	mov	r2, #0
    b0a0:	e1a01006 	mov	r1, r6
    b0a4:	e28d001c 	add	r0, sp, #28
    b0a8:	eb000424 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b0ac:	e28d001c 	add	r0, sp, #28
    b0b0:	eb00042e 	bl	c170 <CDWHCIRegister::Write()>
    b0b4:	e1a00007 	mov	r0, r7
    b0b8:	e1a01004 	mov	r1, r4
    b0bc:	ebfffe99 	bl	ab28 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>
    b0c0:	e28d001c 	add	r0, sp, #28
    b0c4:	eb000421 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    b0c8:	eaffffe9 	b	b074 <CDWHCIDevice::InterruptHandler()+0x8c>
    b0cc:	e28d0010 	add	r0, sp, #16
    b0d0:	eb00041e 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    b0d4:	eaffffd0 	b	b01c <CDWHCIDevice::InterruptHandler()+0x34>

0000b0d8 <CDWHCIDevice::InterruptStub(void*)>:
    b0d8:	e92d4010 	push	{r4, lr}
    b0dc:	e2504000 	subs	r4, r0, #0
    b0e0:	0a000002 	beq	b0f0 <CDWHCIDevice::InterruptStub(void*)+0x18>
    b0e4:	e1a00004 	mov	r0, r4
    b0e8:	e8bd4010 	pop	{r4, lr}
    b0ec:	eaffffbd 	b	afe8 <CDWHCIDevice::InterruptHandler()>
    b0f0:	e30a1928 	movw	r1, #43304	; 0xa928
    b0f4:	e30a0938 	movw	r0, #43320	; 0xa938
    b0f8:	e3401002 	movt	r1, #2
    b0fc:	e3400002 	movt	r0, #2
    b100:	e300241b 	movw	r2, #1051	; 0x41b
    b104:	eb0066a4 	bl	24b9c <assertion_failed>
    b108:	e1a00004 	mov	r0, r4
    b10c:	e8bd4010 	pop	{r4, lr}
    b110:	eaffffb4 	b	afe8 <CDWHCIDevice::InterruptHandler()>

0000b114 <CDWHCIDevice::AllocateWaitBlock()>:
    b114:	e92d4070 	push	{r4, r5, r6, lr}
    b118:	e1a05000 	mov	r5, r0
    b11c:	e59000a0 	ldr	r0, [r0, #160]	; 0xa0
    b120:	e3500000 	cmp	r0, #0
    b124:	1a000014 	bne	b17c <CDWHCIDevice::AllocateWaitBlock()+0x68>
    b128:	e3a04000 	mov	r4, #0
    b12c:	e3a03001 	mov	r3, #1
    b130:	e595209c 	ldr	r2, [r5, #156]	; 0x9c
    b134:	e1120003 	tst	r2, r3
    b138:	0a000007 	beq	b15c <CDWHCIDevice::AllocateWaitBlock()+0x48>
    b13c:	e2844001 	add	r4, r4, #1
    b140:	e1a03083 	lsl	r3, r3, #1
    b144:	e3540010 	cmp	r4, #16
    b148:	1afffff8 	bne	b130 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    b14c:	e3500000 	cmp	r0, #0
    b150:	1a000006 	bne	b170 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    b154:	e1a00004 	mov	r0, r4
    b158:	e8bd8070 	pop	{r4, r5, r6, pc}
    b15c:	e595209c 	ldr	r2, [r5, #156]	; 0x9c
    b160:	e3500000 	cmp	r0, #0
    b164:	e1823003 	orr	r3, r2, r3
    b168:	e585309c 	str	r3, [r5, #156]	; 0x9c
    b16c:	0afffff8 	beq	b154 <CDWHCIDevice::AllocateWaitBlock()+0x40>
    b170:	eb005bb7 	bl	22054 <LeaveCritical>
    b174:	e1a00004 	mov	r0, r4
    b178:	e8bd8070 	pop	{r4, r5, r6, pc}
    b17c:	eb005b86 	bl	21f9c <EnterCritical>
    b180:	e59500a0 	ldr	r0, [r5, #160]	; 0xa0
    b184:	eaffffe7 	b	b128 <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000b188 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    b188:	e351000f 	cmp	r1, #15
    b18c:	e92d4070 	push	{r4, r5, r6, lr}
    b190:	e1a06001 	mov	r6, r1
    b194:	e1a04000 	mov	r4, r0
    b198:	8a000018 	bhi	b200 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x78>
    b19c:	e59400a0 	ldr	r0, [r4, #160]	; 0xa0
    b1a0:	e3a05001 	mov	r5, #1
    b1a4:	e1a05615 	lsl	r5, r5, r6
    b1a8:	e3500000 	cmp	r0, #0
    b1ac:	1a000011 	bne	b1f8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x70>
    b1b0:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
    b1b4:	e1150003 	tst	r5, r3
    b1b8:	0a000007 	beq	b1dc <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x54>
    b1bc:	e59420a0 	ldr	r2, [r4, #160]	; 0xa0
    b1c0:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
    b1c4:	e3520000 	cmp	r2, #0
    b1c8:	e1c35005 	bic	r5, r3, r5
    b1cc:	e584509c 	str	r5, [r4, #156]	; 0x9c
    b1d0:	08bd8070 	popeq	{r4, r5, r6, pc}
    b1d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    b1d8:	ea005b9d 	b	22054 <LeaveCritical>
    b1dc:	e30a1928 	movw	r1, #43304	; 0xa928
    b1e0:	e30a0b74 	movw	r0, #43892	; 0xab74
    b1e4:	e3401002 	movt	r1, #2
    b1e8:	e3400002 	movt	r0, #2
    b1ec:	e3002487 	movw	r2, #1159	; 0x487
    b1f0:	eb006669 	bl	24b9c <assertion_failed>
    b1f4:	eafffff0 	b	b1bc <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x34>
    b1f8:	eb005b67 	bl	21f9c <EnterCritical>
    b1fc:	eaffffeb 	b	b1b0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x28>
    b200:	e30a1928 	movw	r1, #43304	; 0xa928
    b204:	e30a0944 	movw	r0, #43332	; 0xa944
    b208:	e3401002 	movt	r1, #2
    b20c:	e3400002 	movt	r0, #2
    b210:	e3002482 	movw	r2, #1154	; 0x482
    b214:	eb006660 	bl	24b9c <assertion_failed>
    b218:	eaffffdf 	b	b19c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x14>

0000b21c <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>:
    b21c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b220:	e1a07001 	mov	r7, r1
    b224:	e1a08002 	mov	r8, r2
    b228:	e1a09003 	mov	r9, r3
    b22c:	e1a06000 	mov	r6, r0
    b230:	ebffffb7 	bl	b114 <CDWHCIDevice::AllocateWaitBlock()>
    b234:	e350000f 	cmp	r0, #15
    b238:	8a000022 	bhi	b2c8 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0xac>
    b23c:	e3570000 	cmp	r7, #0
    b240:	e1a05000 	mov	r5, r0
    b244:	0a000028 	beq	b2ec <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0xd0>
    b248:	e0864105 	add	r4, r6, r5, lsl #2
    b24c:	e1a03006 	mov	r3, r6
    b250:	e3091c8c 	movw	r1, #40076	; 0x9c8c
    b254:	e1a02005 	mov	r2, r5
    b258:	e3401000 	movt	r1, #0
    b25c:	e1a00007 	mov	r0, r7
    b260:	eb000cae 	bl	e520 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    b264:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b268:	e3530000 	cmp	r3, #0
    b26c:	1a000017 	bne	b2d0 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0xb4>
    b270:	e3a00001 	mov	r0, #1
    b274:	e1a03009 	mov	r3, r9
    b278:	e584005c 	str	r0, [r4, #92]	; 0x5c
    b27c:	e1a02008 	mov	r2, r8
    b280:	e1a01007 	mov	r1, r7
    b284:	e1a00006 	mov	r0, r6
    b288:	ebfffd9e 	bl	a908 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, int, int)>
    b28c:	e3500000 	cmp	r0, #0
    b290:	0a000008 	beq	b2b8 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0x9c>
    b294:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b298:	e3530000 	cmp	r3, #0
    b29c:	1afffffc 	bne	b294 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0x78>
    b2a0:	e1a00006 	mov	r0, r6
    b2a4:	e1a01005 	mov	r1, r5
    b2a8:	ebffffb6 	bl	b188 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b2ac:	e1a00007 	mov	r0, r7
    b2b0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b2b4:	ea000c5d 	b	e430 <CUSBRequest::GetStatus() const>
    b2b8:	e584005c 	str	r0, [r4, #92]	; 0x5c
    b2bc:	e1a01005 	mov	r1, r5
    b2c0:	e1a00006 	mov	r0, r6
    b2c4:	ebffffaf 	bl	b188 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b2c8:	e3a00000 	mov	r0, #0
    b2cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b2d0:	e30a1928 	movw	r1, #43304	; 0xa928
    b2d4:	e30a0b9c 	movw	r0, #43932	; 0xab9c
    b2d8:	e3401002 	movt	r1, #2
    b2dc:	e3400002 	movt	r0, #2
    b2e0:	e300223d 	movw	r2, #573	; 0x23d
    b2e4:	eb00662c 	bl	24b9c <assertion_failed>
    b2e8:	eaffffe0 	b	b270 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0x54>
    b2ec:	e30a1928 	movw	r1, #43304	; 0xa928
    b2f0:	e30a0a24 	movw	r0, #43556	; 0xaa24
    b2f4:	e3401002 	movt	r1, #2
    b2f8:	e3400002 	movt	r0, #2
    b2fc:	e300223a 	movw	r2, #570	; 0x23a
    b300:	eb006625 	bl	24b9c <assertion_failed>
    b304:	eaffffcf 	b	b248 <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)+0x2c>

0000b308 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)>:
    b308:	e92d4070 	push	{r4, r5, r6, lr}
    b30c:	e2514000 	subs	r4, r1, #0
    b310:	e1a05000 	mov	r5, r0
    b314:	0a000067 	beq	b4b8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x1b0>
    b318:	e3a01000 	mov	r1, #0
    b31c:	e1a00004 	mov	r0, r4
    b320:	eb000c3e 	bl	e420 <CUSBRequest::SetStatus(int)>
    b324:	e1a00004 	mov	r0, r4
    b328:	eb000c2c 	bl	e3e0 <CUSBRequest::GetEndpoint() const>
    b32c:	eb000b1b 	bl	dfa0 <CUSBEndpoint::GetType() const>
    b330:	e3500000 	cmp	r0, #0
    b334:	e1a00004 	mov	r0, r4
    b338:	1a000017 	bne	b39c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x94>
    b33c:	eb000c4a 	bl	e46c <CUSBRequest::GetSetupData()>
    b340:	e2506000 	subs	r6, r0, #0
    b344:	0a00006a 	beq	b4f4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x1ec>
    b348:	e1d630d0 	ldrsb	r3, [r6]
    b34c:	e1a00004 	mov	r0, r4
    b350:	e3530000 	cmp	r3, #0
    b354:	ba00003e 	blt	b454 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x14c>
    b358:	eb000c6e 	bl	e518 <CUSBRequest::GetBufLen() const>
    b35c:	e2503000 	subs	r3, r0, #0
    b360:	1a00002b 	bne	b414 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x10c>
    b364:	e1a02003 	mov	r2, r3
    b368:	e1a01004 	mov	r1, r4
    b36c:	e1a00005 	mov	r0, r5
    b370:	ebffffa9 	bl	b21c <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b374:	e3500000 	cmp	r0, #0
    b378:	0a00002c 	beq	b430 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x128>
    b37c:	e3a03001 	mov	r3, #1
    b380:	e1a01004 	mov	r1, r4
    b384:	e1a00005 	mov	r0, r5
    b388:	e1a02003 	mov	r2, r3
    b38c:	ebffffa2 	bl	b21c <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b390:	e2900000 	adds	r0, r0, #0
    b394:	13a00001 	movne	r0, #1
    b398:	e8bd8070 	pop	{r4, r5, r6, pc}
    b39c:	eb000c0f 	bl	e3e0 <CUSBRequest::GetEndpoint() const>
    b3a0:	eb000afe 	bl	dfa0 <CUSBEndpoint::GetType() const>
    b3a4:	e3500001 	cmp	r0, #1
    b3a8:	0a00000a 	beq	b3d8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0xd0>
    b3ac:	e1a00004 	mov	r0, r4
    b3b0:	eb000c0a 	bl	e3e0 <CUSBRequest::GetEndpoint() const>
    b3b4:	eb000af9 	bl	dfa0 <CUSBEndpoint::GetType() const>
    b3b8:	e3500002 	cmp	r0, #2
    b3bc:	0a000005 	beq	b3d8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0xd0>
    b3c0:	e30a1928 	movw	r1, #43304	; 0xa928
    b3c4:	e30a0a4c 	movw	r0, #43596	; 0xaa4c
    b3c8:	e3401002 	movt	r1, #2
    b3cc:	e3400002 	movt	r0, #2
    b3d0:	e3a020c8 	mov	r2, #200	; 0xc8
    b3d4:	eb0065f0 	bl	24b9c <assertion_failed>
    b3d8:	e1a00004 	mov	r0, r4
    b3dc:	eb000c4d 	bl	e518 <CUSBRequest::GetBufLen() const>
    b3e0:	e3500000 	cmp	r0, #0
    b3e4:	0a000013 	beq	b438 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x130>
    b3e8:	e1a00004 	mov	r0, r4
    b3ec:	eb000bfb 	bl	e3e0 <CUSBRequest::GetEndpoint() const>
    b3f0:	eb000aec 	bl	dfa8 <CUSBEndpoint::IsDirectionIn() const>
    b3f4:	e1a01004 	mov	r1, r4
    b3f8:	e3a03000 	mov	r3, #0
    b3fc:	e1a02000 	mov	r2, r0
    b400:	e1a00005 	mov	r0, r5
    b404:	ebffff84 	bl	b21c <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b408:	e2900000 	adds	r0, r0, #0
    b40c:	13a00001 	movne	r0, #1
    b410:	e8bd8070 	pop	{r4, r5, r6, pc}
    b414:	e3a03000 	mov	r3, #0
    b418:	e1a01004 	mov	r1, r4
    b41c:	e1a02003 	mov	r2, r3
    b420:	e1a00005 	mov	r0, r5
    b424:	ebffff7c 	bl	b21c <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b428:	e3500000 	cmp	r0, #0
    b42c:	1a000028 	bne	b4d4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x1cc>
    b430:	e3a00000 	mov	r0, #0
    b434:	e8bd8070 	pop	{r4, r5, r6, pc}
    b438:	e30a1928 	movw	r1, #43304	; 0xa928
    b43c:	e30a0ac0 	movw	r0, #43712	; 0xaac0
    b440:	e3401002 	movt	r1, #2
    b444:	e3400002 	movt	r0, #2
    b448:	e3a020c9 	mov	r2, #201	; 0xc9
    b44c:	eb0065d2 	bl	24b9c <assertion_failed>
    b450:	eaffffe4 	b	b3e8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0xe0>
    b454:	eb000c2f 	bl	e518 <CUSBRequest::GetBufLen() const>
    b458:	e3500000 	cmp	r0, #0
    b45c:	0a00002b 	beq	b510 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x208>
    b460:	e3a03000 	mov	r3, #0
    b464:	e1a01004 	mov	r1, r4
    b468:	e1a02003 	mov	r2, r3
    b46c:	e1a00005 	mov	r0, r5
    b470:	ebffff69 	bl	b21c <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b474:	e3500000 	cmp	r0, #0
    b478:	0affffec 	beq	b430 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x128>
    b47c:	e3a03000 	mov	r3, #0
    b480:	e3a02001 	mov	r2, #1
    b484:	e1a01004 	mov	r1, r4
    b488:	e1a00005 	mov	r0, r5
    b48c:	ebffff62 	bl	b21c <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b490:	e3500000 	cmp	r0, #0
    b494:	0affffe5 	beq	b430 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x128>
    b498:	e1a01004 	mov	r1, r4
    b49c:	e1a00005 	mov	r0, r5
    b4a0:	e3a03001 	mov	r3, #1
    b4a4:	e3a02000 	mov	r2, #0
    b4a8:	ebffff5b 	bl	b21c <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b4ac:	e2900000 	adds	r0, r0, #0
    b4b0:	13a00001 	movne	r0, #1
    b4b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    b4b8:	e30a1928 	movw	r1, #43304	; 0xa928
    b4bc:	e30a0a24 	movw	r0, #43556	; 0xaa24
    b4c0:	e3401002 	movt	r1, #2
    b4c4:	e3400002 	movt	r0, #2
    b4c8:	e3a0209c 	mov	r2, #156	; 0x9c
    b4cc:	eb0065b2 	bl	24b9c <assertion_failed>
    b4d0:	eaffff90 	b	b318 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x10>
    b4d4:	e3a03000 	mov	r3, #0
    b4d8:	e1a01004 	mov	r1, r4
    b4dc:	e1a02003 	mov	r2, r3
    b4e0:	e1a00005 	mov	r0, r5
    b4e4:	ebffff4c 	bl	b21c <CDWHCIDevice::TransferStage(CUSBRequest*, int, int)>
    b4e8:	e3500000 	cmp	r0, #0
    b4ec:	0affffcf 	beq	b430 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x128>
    b4f0:	eaffffa1 	b	b37c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x74>
    b4f4:	e30a1928 	movw	r1, #43304	; 0xa928
    b4f8:	e30a0bb4 	movw	r0, #43956	; 0xabb4
    b4fc:	e3401002 	movt	r1, #2
    b500:	e3400002 	movt	r0, #2
    b504:	e3a020a3 	mov	r2, #163	; 0xa3
    b508:	eb0065a3 	bl	24b9c <assertion_failed>
    b50c:	eaffff8d 	b	b348 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x40>
    b510:	e30a1928 	movw	r1, #43304	; 0xa928
    b514:	e30a0ac0 	movw	r0, #43712	; 0xaac0
    b518:	e3401002 	movt	r1, #2
    b51c:	e3400002 	movt	r0, #2
    b520:	e3a020a7 	mov	r2, #167	; 0xa7
    b524:	eb00659c 	bl	24b9c <assertion_failed>
    b528:	eaffffcc 	b	b460 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*)+0x158>

0000b52c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>:
    b52c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b530:	e2517000 	subs	r7, r1, #0
    b534:	e1a08000 	mov	r8, r0
    b538:	e1a06002 	mov	r6, r2
    b53c:	e1a05003 	mov	r5, r3
    b540:	e59d4020 	ldr	r4, [sp, #32]
    b544:	0a000033 	beq	b618 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0xec>
    b548:	e3560000 	cmp	r6, #0
    b54c:	0a00002a 	beq	b5fc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0xd0>
    b550:	e3540000 	cmp	r4, #0
    b554:	0a000021 	beq	b5e0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0xb4>
    b558:	e30aa928 	movw	sl, #43304	; 0xa928
    b55c:	e30a9988 	movw	r9, #43400	; 0xa988
    b560:	e340a002 	movt	sl, #2
    b564:	e3409002 	movt	r9, #2
    b568:	ea000003 	b	b57c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x50>
    b56c:	e3a00001 	mov	r0, #1
    b570:	eb005d96 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
    b574:	e2544001 	subs	r4, r4, #1
    b578:	0a000014 	beq	b5d0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0xa4>
    b57c:	e1a00007 	mov	r0, r7
    b580:	eb0002f3 	bl	c154 <CDWHCIRegister::Read()>
    b584:	e16f3f15 	clz	r3, r5
    b588:	e1a032a3 	lsr	r3, r3, #5
    b58c:	e1160000 	tst	r6, r0
    b590:	1a000001 	bne	b59c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x70>
    b594:	e2953000 	adds	r3, r5, #0
    b598:	13a03001 	movne	r3, #1
    b59c:	e3530000 	cmp	r3, #0
    b5a0:	0a00000c 	beq	b5d8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0xac>
    b5a4:	e5983008 	ldr	r3, [r8, #8]
    b5a8:	e3530000 	cmp	r3, #0
    b5ac:	1affffee 	bne	b56c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x40>
    b5b0:	e3002498 	movw	r2, #1176	; 0x498
    b5b4:	e1a0100a 	mov	r1, sl
    b5b8:	e1a00009 	mov	r0, r9
    b5bc:	eb006576 	bl	24b9c <assertion_failed>
    b5c0:	e3a00001 	mov	r0, #1
    b5c4:	eb005d81 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
    b5c8:	e2544001 	subs	r4, r4, #1
    b5cc:	1affffea 	bne	b57c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x50>
    b5d0:	e1a00004 	mov	r0, r4
    b5d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b5d8:	e3a00001 	mov	r0, #1
    b5dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b5e0:	e30a1928 	movw	r1, #43304	; 0xa928
    b5e4:	e30a0bdc 	movw	r0, #43996	; 0xabdc
    b5e8:	e3401002 	movt	r1, #2
    b5ec:	e3400002 	movt	r0, #2
    b5f0:	e3002494 	movw	r2, #1172	; 0x494
    b5f4:	eb006568 	bl	24b9c <assertion_failed>
    b5f8:	eaffffd6 	b	b558 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x2c>
    b5fc:	e30a1928 	movw	r1, #43304	; 0xa928
    b600:	e30a0bd0 	movw	r0, #43984	; 0xabd0
    b604:	e3401002 	movt	r1, #2
    b608:	e3400002 	movt	r0, #2
    b60c:	e3002493 	movw	r2, #1171	; 0x493
    b610:	eb006561 	bl	24b9c <assertion_failed>
    b614:	eaffffcd 	b	b550 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x24>
    b618:	e30a1928 	movw	r1, #43304	; 0xa928
    b61c:	e30a0bc0 	movw	r0, #43968	; 0xabc0
    b620:	e3401002 	movt	r1, #2
    b624:	e3400002 	movt	r0, #2
    b628:	e3002492 	movw	r2, #1170	; 0x492
    b62c:	eb00655a 	bl	24b9c <assertion_failed>
    b630:	eaffffc4 	b	b548 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)+0x1c>

0000b634 <CDWHCIDevice::EnableRootPort()>:
    b634:	e92d4030 	push	{r4, r5, lr}
    b638:	e24dd01c 	sub	sp, sp, #28
    b63c:	e1a04000 	mov	r4, r0
    b640:	e3a01d11 	mov	r1, #1088	; 0x440
    b644:	e28d000c 	add	r0, sp, #12
    b648:	e3431f98 	movt	r1, #16280	; 0x3f98
    b64c:	eb0002b7 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b650:	e3a03001 	mov	r3, #1
    b654:	e1a00004 	mov	r0, r4
    b658:	e3a05014 	mov	r5, #20
    b65c:	e28d100c 	add	r1, sp, #12
    b660:	e1a02003 	mov	r2, r3
    b664:	e58d5000 	str	r5, [sp]
    b668:	ebffffaf 	bl	b52c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>
    b66c:	e2504000 	subs	r4, r0, #0
    b670:	0a00001a 	beq	b6e0 <CDWHCIDevice::EnableRootPort()+0xac>
    b674:	e3a00064 	mov	r0, #100	; 0x64
    b678:	e3a04001 	mov	r4, #1
    b67c:	eb005d53 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
    b680:	e28d000c 	add	r0, sp, #12
    b684:	eb0002b2 	bl	c154 <CDWHCIRegister::Read()>
    b688:	e3e0102e 	mvn	r1, #46	; 0x2e
    b68c:	e28d000c 	add	r0, sp, #12
    b690:	eb0002e8 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b694:	e3a01c01 	mov	r1, #256	; 0x100
    b698:	e28d000c 	add	r0, sp, #12
    b69c:	eb0002f5 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    b6a0:	e28d000c 	add	r0, sp, #12
    b6a4:	eb0002b1 	bl	c170 <CDWHCIRegister::Write()>
    b6a8:	e3a00032 	mov	r0, #50	; 0x32
    b6ac:	eb005d47 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
    b6b0:	e28d000c 	add	r0, sp, #12
    b6b4:	eb0002a6 	bl	c154 <CDWHCIRegister::Read()>
    b6b8:	e3e0102e 	mvn	r1, #46	; 0x2e
    b6bc:	e28d000c 	add	r0, sp, #12
    b6c0:	eb0002dc 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b6c4:	e3e01c01 	mvn	r1, #256	; 0x100
    b6c8:	e28d000c 	add	r0, sp, #12
    b6cc:	eb0002d9 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b6d0:	e28d000c 	add	r0, sp, #12
    b6d4:	eb0002a5 	bl	c170 <CDWHCIRegister::Write()>
    b6d8:	e1a00005 	mov	r0, r5
    b6dc:	eb005d3b 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
    b6e0:	e28d000c 	add	r0, sp, #12
    b6e4:	eb000299 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    b6e8:	e1a00004 	mov	r0, r4
    b6ec:	e28dd01c 	add	sp, sp, #28
    b6f0:	e8bd8030 	pop	{r4, r5, pc}

0000b6f4 <CDWHCIDevice::Reset()>:
    b6f4:	e92d4030 	push	{r4, r5, lr}
    b6f8:	e24dd01c 	sub	sp, sp, #28
    b6fc:	e1a04000 	mov	r4, r0
    b700:	e3a02000 	mov	r2, #0
    b704:	e3a01010 	mov	r1, #16
    b708:	e28d000c 	add	r0, sp, #12
    b70c:	e3431f98 	movt	r1, #16280	; 0x3f98
    b710:	e3a05064 	mov	r5, #100	; 0x64
    b714:	eb000289 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b718:	e28d100c 	add	r1, sp, #12
    b71c:	e1a00004 	mov	r0, r4
    b720:	e58d5000 	str	r5, [sp]
    b724:	e3a03001 	mov	r3, #1
    b728:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    b72c:	ebffff7e 	bl	b52c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>
    b730:	e3500000 	cmp	r0, #0
    b734:	1a000005 	bne	b750 <CDWHCIDevice::Reset()+0x5c>
    b738:	e3a04000 	mov	r4, #0
    b73c:	e28d000c 	add	r0, sp, #12
    b740:	eb000282 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    b744:	e1a00004 	mov	r0, r4
    b748:	e28dd01c 	add	sp, sp, #28
    b74c:	e8bd8030 	pop	{r4, r5, pc}
    b750:	e3a01001 	mov	r1, #1
    b754:	e28d000c 	add	r0, sp, #12
    b758:	eb0002c6 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    b75c:	e28d000c 	add	r0, sp, #12
    b760:	eb000282 	bl	c170 <CDWHCIRegister::Write()>
    b764:	e3a0200a 	mov	r2, #10
    b768:	e1a00004 	mov	r0, r4
    b76c:	e58d2000 	str	r2, [sp]
    b770:	e3a03000 	mov	r3, #0
    b774:	e3a02001 	mov	r2, #1
    b778:	e28d100c 	add	r1, sp, #12
    b77c:	ebffff6a 	bl	b52c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>
    b780:	e3500000 	cmp	r0, #0
    b784:	0affffeb 	beq	b738 <CDWHCIDevice::Reset()+0x44>
    b788:	e1a00005 	mov	r0, r5
    b78c:	e3a04001 	mov	r4, #1
    b790:	eb005d0e 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
    b794:	eaffffe8 	b	b73c <CDWHCIDevice::Reset()+0x48>

0000b798 <CDWHCIDevice::InitCore()>:
    b798:	e92d4030 	push	{r4, r5, lr}
    b79c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b7a0:	e1a04000 	mov	r4, r0
    b7a4:	e3a0100c 	mov	r1, #12
    b7a8:	e28d0004 	add	r0, sp, #4
    b7ac:	e3431f98 	movt	r1, #16280	; 0x3f98
    b7b0:	eb00025e 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b7b4:	e28d0004 	add	r0, sp, #4
    b7b8:	eb000265 	bl	c154 <CDWHCIRegister::Read()>
    b7bc:	e28d0004 	add	r0, sp, #4
    b7c0:	e3e01601 	mvn	r1, #1048576	; 0x100000
    b7c4:	eb00029b 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b7c8:	e3e01501 	mvn	r1, #4194304	; 0x400000
    b7cc:	e28d0004 	add	r0, sp, #4
    b7d0:	eb000298 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b7d4:	e28d0004 	add	r0, sp, #4
    b7d8:	eb000264 	bl	c170 <CDWHCIRegister::Write()>
    b7dc:	e1a00004 	mov	r0, r4
    b7e0:	ebffffc3 	bl	b6f4 <CDWHCIDevice::Reset()>
    b7e4:	e2505000 	subs	r5, r0, #0
    b7e8:	0a00005b 	beq	b95c <CDWHCIDevice::InitCore()+0x1c4>
    b7ec:	e28d0004 	add	r0, sp, #4
    b7f0:	eb000257 	bl	c154 <CDWHCIRegister::Read()>
    b7f4:	e3e01010 	mvn	r1, #16
    b7f8:	e28d0004 	add	r0, sp, #4
    b7fc:	eb00028d 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b800:	e3e01008 	mvn	r1, #8
    b804:	e28d0004 	add	r0, sp, #4
    b808:	eb00028a 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b80c:	e28d0004 	add	r0, sp, #4
    b810:	eb000256 	bl	c170 <CDWHCIRegister::Write()>
    b814:	e28d0010 	add	r0, sp, #16
    b818:	e3a01048 	mov	r1, #72	; 0x48
    b81c:	e3431f98 	movt	r1, #16280	; 0x3f98
    b820:	eb000242 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b824:	e28d0010 	add	r0, sp, #16
    b828:	eb000249 	bl	c154 <CDWHCIRegister::Read()>
    b82c:	e28d0010 	add	r0, sp, #16
    b830:	eb00025d 	bl	c1ac <CDWHCIRegister::Get() const>
    b834:	e7e101d0 	ubfx	r0, r0, #3, #2
    b838:	e3500002 	cmp	r0, #2
    b83c:	0a000005 	beq	b858 <CDWHCIDevice::InitCore()+0xc0>
    b840:	e30a1928 	movw	r1, #43304	; 0xa928
    b844:	e30a0bfc 	movw	r0, #44028	; 0xabfc
    b848:	e3401002 	movt	r1, #2
    b84c:	e3400002 	movt	r0, #2
    b850:	e300212e 	movw	r2, #302	; 0x12e
    b854:	eb0064d0 	bl	24b9c <assertion_failed>
    b858:	e28d0004 	add	r0, sp, #4
    b85c:	eb00023c 	bl	c154 <CDWHCIRegister::Read()>
    b860:	e28d0010 	add	r0, sp, #16
    b864:	eb000250 	bl	c1ac <CDWHCIRegister::Get() const>
    b868:	e7e10350 	ubfx	r0, r0, #6, #2
    b86c:	e3500002 	cmp	r0, #2
    b870:	0a00004e 	beq	b9b0 <CDWHCIDevice::InitCore()+0x218>
    b874:	e3e01802 	mvn	r1, #131072	; 0x20000
    b878:	e28d0004 	add	r0, sp, #4
    b87c:	eb00026d 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b880:	e3e01702 	mvn	r1, #524288	; 0x80000
    b884:	e28d0004 	add	r0, sp, #4
    b888:	eb00026a 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b88c:	e28d0004 	add	r0, sp, #4
    b890:	eb000236 	bl	c170 <CDWHCIRegister::Write()>
    b894:	e594300c 	ldr	r3, [r4, #12]
    b898:	e3530000 	cmp	r3, #0
    b89c:	1a00003c 	bne	b994 <CDWHCIDevice::InitCore()+0x1fc>
    b8a0:	e28d0010 	add	r0, sp, #16
    b8a4:	eb000240 	bl	c1ac <CDWHCIRegister::Get() const>
    b8a8:	e7e30750 	ubfx	r0, r0, #14, #4
    b8ac:	e2403003 	sub	r3, r0, #3
    b8b0:	e2800001 	add	r0, r0, #1
    b8b4:	e353000c 	cmp	r3, #12
    b8b8:	e584000c 	str	r0, [r4, #12]
    b8bc:	8a00002d 	bhi	b978 <CDWHCIDevice::InitCore()+0x1e0>
    b8c0:	e3a01008 	mov	r1, #8
    b8c4:	e28d001c 	add	r0, sp, #28
    b8c8:	e3431f98 	movt	r1, #16280	; 0x3f98
    b8cc:	e3a05001 	mov	r5, #1
    b8d0:	eb000216 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b8d4:	e28d001c 	add	r0, sp, #28
    b8d8:	eb00021d 	bl	c154 <CDWHCIRegister::Read()>
    b8dc:	e28d001c 	add	r0, sp, #28
    b8e0:	e3a01020 	mov	r1, #32
    b8e4:	eb000263 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    b8e8:	e28d001c 	add	r0, sp, #28
    b8ec:	e3a01010 	mov	r1, #16
    b8f0:	eb000260 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    b8f4:	e3e01006 	mvn	r1, #6
    b8f8:	e28d001c 	add	r0, sp, #28
    b8fc:	eb00024d 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b900:	e28d001c 	add	r0, sp, #28
    b904:	eb000219 	bl	c170 <CDWHCIRegister::Write()>
    b908:	e28d0004 	add	r0, sp, #4
    b90c:	eb000210 	bl	c154 <CDWHCIRegister::Read()>
    b910:	e3e01c02 	mvn	r1, #512	; 0x200
    b914:	e28d0004 	add	r0, sp, #4
    b918:	eb000246 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b91c:	e3e01c01 	mvn	r1, #256	; 0x100
    b920:	e28d0004 	add	r0, sp, #4
    b924:	eb000243 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    b928:	e28d0004 	add	r0, sp, #4
    b92c:	eb00020f 	bl	c170 <CDWHCIRegister::Write()>
    b930:	e1a00004 	mov	r0, r4
    b934:	ebfff9b6 	bl	a014 <CDWHCIDevice::EnableCommonInterrupts()>
    b938:	e28d001c 	add	r0, sp, #28
    b93c:	eb000203 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    b940:	e28d0010 	add	r0, sp, #16
    b944:	eb000201 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    b948:	e28d0004 	add	r0, sp, #4
    b94c:	eb0001ff 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    b950:	e1a00005 	mov	r0, r5
    b954:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b958:	e8bd8030 	pop	{r4, r5, pc}
    b95c:	eb006613 	bl	251b0 <CLogger::Get()>
    b960:	e30a3bec 	movw	r3, #44012	; 0xabec
    b964:	e3a02001 	mov	r2, #1
    b968:	e3403002 	movt	r3, #2
    b96c:	e59f106c 	ldr	r1, [pc, #108]	; b9e0 <CDWHCIDevice::InitCore()+0x248>
    b970:	eb0066ea 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b974:	eafffff3 	b	b948 <CDWHCIDevice::InitCore()+0x1b0>
    b978:	e30a1928 	movw	r1, #43304	; 0xa928
    b97c:	e30a0c48 	movw	r0, #44104	; 0xac48
    b980:	e3401002 	movt	r1, #2
    b984:	e3400002 	movt	r0, #2
    b988:	e3a02d05 	mov	r2, #320	; 0x140
    b98c:	eb006482 	bl	24b9c <assertion_failed>
    b990:	eaffffca 	b	b8c0 <CDWHCIDevice::InitCore()+0x128>
    b994:	e30a1928 	movw	r1, #43304	; 0xa928
    b998:	e30a0c34 	movw	r0, #44084	; 0xac34
    b99c:	e3401002 	movt	r1, #2
    b9a0:	e3400002 	movt	r0, #2
    b9a4:	e300213e 	movw	r2, #318	; 0x13e
    b9a8:	eb00647b 	bl	24b9c <assertion_failed>
    b9ac:	eaffffbb 	b	b8a0 <CDWHCIDevice::InitCore()+0x108>
    b9b0:	e28d0010 	add	r0, sp, #16
    b9b4:	eb0001fc 	bl	c1ac <CDWHCIRegister::Get() const>
    b9b8:	e7e10450 	ubfx	r0, r0, #8, #2
    b9bc:	e3500001 	cmp	r0, #1
    b9c0:	1affffab 	bne	b874 <CDWHCIDevice::InitCore()+0xdc>
    b9c4:	e28d0004 	add	r0, sp, #4
    b9c8:	e3a01802 	mov	r1, #131072	; 0x20000
    b9cc:	eb000229 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    b9d0:	e3a01702 	mov	r1, #524288	; 0x80000
    b9d4:	e28d0004 	add	r0, sp, #4
    b9d8:	eb000226 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    b9dc:	eaffffaa 	b	b88c <CDWHCIDevice::InitCore()+0xf4>
    b9e0:	0002a91c 	.word	0x0002a91c

0000b9e4 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    b9e4:	e92d4030 	push	{r4, r5, lr}
    b9e8:	e24dd01c 	sub	sp, sp, #28
    b9ec:	e3a02000 	mov	r2, #0
    b9f0:	e1a05001 	mov	r5, r1
    b9f4:	e1a04000 	mov	r4, r0
    b9f8:	e3a01010 	mov	r1, #16
    b9fc:	e28d000c 	add	r0, sp, #12
    ba00:	e3431f98 	movt	r1, #16280	; 0x3f98
    ba04:	eb0001cd 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ba08:	e28d000c 	add	r0, sp, #12
    ba0c:	e3a01020 	mov	r1, #32
    ba10:	eb000218 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    ba14:	e28d000c 	add	r0, sp, #12
    ba18:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    ba1c:	eb000205 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    ba20:	e1a01305 	lsl	r1, r5, #6
    ba24:	e28d000c 	add	r0, sp, #12
    ba28:	eb000212 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    ba2c:	e28d000c 	add	r0, sp, #12
    ba30:	eb0001ce 	bl	c170 <CDWHCIRegister::Write()>
    ba34:	e3a0200a 	mov	r2, #10
    ba38:	e1a00004 	mov	r0, r4
    ba3c:	e58d2000 	str	r2, [sp]
    ba40:	e28d100c 	add	r1, sp, #12
    ba44:	e3a03000 	mov	r3, #0
    ba48:	e3a02020 	mov	r2, #32
    ba4c:	ebfffeb6 	bl	b52c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>
    ba50:	e3500000 	cmp	r0, #0
    ba54:	1a000003 	bne	ba68 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x84>
    ba58:	e28d000c 	add	r0, sp, #12
    ba5c:	eb0001bb 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    ba60:	e28dd01c 	add	sp, sp, #28
    ba64:	e8bd8030 	pop	{r4, r5, pc}
    ba68:	e3a00001 	mov	r0, #1
    ba6c:	eb005c67 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
    ba70:	e28d000c 	add	r0, sp, #12
    ba74:	eb0001b5 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    ba78:	e28dd01c 	add	sp, sp, #28
    ba7c:	e8bd8030 	pop	{r4, r5, pc}

0000ba80 <CDWHCIDevice::FlushRxFIFO()>:
    ba80:	e92d4010 	push	{r4, lr}
    ba84:	e24dd018 	sub	sp, sp, #24
    ba88:	e3a02000 	mov	r2, #0
    ba8c:	e1a04000 	mov	r4, r0
    ba90:	e3a01010 	mov	r1, #16
    ba94:	e28d000c 	add	r0, sp, #12
    ba98:	e3431f98 	movt	r1, #16280	; 0x3f98
    ba9c:	eb0001a7 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    baa0:	e3a01010 	mov	r1, #16
    baa4:	e28d000c 	add	r0, sp, #12
    baa8:	eb0001f2 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    baac:	e28d000c 	add	r0, sp, #12
    bab0:	eb0001ae 	bl	c170 <CDWHCIRegister::Write()>
    bab4:	e3a0200a 	mov	r2, #10
    bab8:	e1a00004 	mov	r0, r4
    babc:	e58d2000 	str	r2, [sp]
    bac0:	e28d100c 	add	r1, sp, #12
    bac4:	e3a03000 	mov	r3, #0
    bac8:	e3a02010 	mov	r2, #16
    bacc:	ebfffe96 	bl	b52c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, int, unsigned int)>
    bad0:	e3500000 	cmp	r0, #0
    bad4:	1a000003 	bne	bae8 <CDWHCIDevice::FlushRxFIFO()+0x68>
    bad8:	e28d000c 	add	r0, sp, #12
    badc:	eb00019b 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    bae0:	e28dd018 	add	sp, sp, #24
    bae4:	e8bd8010 	pop	{r4, pc}
    bae8:	e3a00001 	mov	r0, #1
    baec:	eb005c47 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
    baf0:	e28d000c 	add	r0, sp, #12
    baf4:	eb000195 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    baf8:	e28dd018 	add	sp, sp, #24
    bafc:	e8bd8010 	pop	{r4, pc}

0000bb00 <CDWHCIDevice::InitHost()>:
    bb00:	e92d4010 	push	{r4, lr}
    bb04:	e24dd068 	sub	sp, sp, #104	; 0x68
    bb08:	e3a02000 	mov	r2, #0
    bb0c:	e1a04000 	mov	r4, r0
    bb10:	e3a01c0e 	mov	r1, #3584	; 0xe00
    bb14:	e28d0008 	add	r0, sp, #8
    bb18:	e3431f98 	movt	r1, #16280	; 0x3f98
    bb1c:	eb000187 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bb20:	e28d0008 	add	r0, sp, #8
    bb24:	eb000191 	bl	c170 <CDWHCIRegister::Write()>
    bb28:	e28d0014 	add	r0, sp, #20
    bb2c:	e3a01b01 	mov	r1, #1024	; 0x400
    bb30:	e3431f98 	movt	r1, #16280	; 0x3f98
    bb34:	eb00017d 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb38:	e28d0014 	add	r0, sp, #20
    bb3c:	eb000184 	bl	c154 <CDWHCIRegister::Read()>
    bb40:	e28d0014 	add	r0, sp, #20
    bb44:	e3e01003 	mvn	r1, #3
    bb48:	eb0001ba 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    bb4c:	e28d0020 	add	r0, sp, #32
    bb50:	e3a01048 	mov	r1, #72	; 0x48
    bb54:	e3431f98 	movt	r1, #16280	; 0x3f98
    bb58:	eb000174 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb5c:	e28d002c 	add	r0, sp, #44	; 0x2c
    bb60:	e3a0100c 	mov	r1, #12
    bb64:	e3431f98 	movt	r1, #16280	; 0x3f98
    bb68:	eb000170 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb6c:	e28d0020 	add	r0, sp, #32
    bb70:	eb000177 	bl	c154 <CDWHCIRegister::Read()>
    bb74:	e7e10350 	ubfx	r0, r0, #6, #2
    bb78:	e3500002 	cmp	r0, #2
    bb7c:	0a000051 	beq	bcc8 <CDWHCIDevice::InitHost()+0x1c8>
    bb80:	e3a01000 	mov	r1, #0
    bb84:	e28d0014 	add	r0, sp, #20
    bb88:	eb0001ba 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    bb8c:	e28d0014 	add	r0, sp, #20
    bb90:	eb000176 	bl	c170 <CDWHCIRegister::Write()>
    bb94:	e3a02b01 	mov	r2, #1024	; 0x400
    bb98:	e28d0038 	add	r0, sp, #56	; 0x38
    bb9c:	e3a01024 	mov	r1, #36	; 0x24
    bba0:	e3431f98 	movt	r1, #16280	; 0x3f98
    bba4:	eb000165 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bba8:	e28d0038 	add	r0, sp, #56	; 0x38
    bbac:	eb00016f 	bl	c170 <CDWHCIRegister::Write()>
    bbb0:	e3a02000 	mov	r2, #0
    bbb4:	e28d0044 	add	r0, sp, #68	; 0x44
    bbb8:	e3a01028 	mov	r1, #40	; 0x28
    bbbc:	e3431f98 	movt	r1, #16280	; 0x3f98
    bbc0:	eb00015e 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bbc4:	e28d0044 	add	r0, sp, #68	; 0x44
    bbc8:	e3a01b01 	mov	r1, #1024	; 0x400
    bbcc:	eb0001a9 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    bbd0:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bbd4:	e28d0044 	add	r0, sp, #68	; 0x44
    bbd8:	eb0001a6 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    bbdc:	e28d0044 	add	r0, sp, #68	; 0x44
    bbe0:	eb000162 	bl	c170 <CDWHCIRegister::Write()>
    bbe4:	e3a02000 	mov	r2, #0
    bbe8:	e28d0050 	add	r0, sp, #80	; 0x50
    bbec:	e3a01c01 	mov	r1, #256	; 0x100
    bbf0:	e3431f98 	movt	r1, #16280	; 0x3f98
    bbf4:	eb000151 	bl	c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bbf8:	e28d0050 	add	r0, sp, #80	; 0x50
    bbfc:	e3a01b02 	mov	r1, #2048	; 0x800
    bc00:	eb00019c 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    bc04:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bc08:	e28d0050 	add	r0, sp, #80	; 0x50
    bc0c:	eb000199 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    bc10:	e28d0050 	add	r0, sp, #80	; 0x50
    bc14:	eb000155 	bl	c170 <CDWHCIRegister::Write()>
    bc18:	e3a01010 	mov	r1, #16
    bc1c:	e1a00004 	mov	r0, r4
    bc20:	ebffff6f 	bl	b9e4 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    bc24:	e1a00004 	mov	r0, r4
    bc28:	ebffff94 	bl	ba80 <CDWHCIDevice::FlushRxFIFO()>
    bc2c:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc30:	e3a01d11 	mov	r1, #1088	; 0x440
    bc34:	e3431f98 	movt	r1, #16280	; 0x3f98
    bc38:	eb00013c 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bc3c:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc40:	eb000143 	bl	c154 <CDWHCIRegister::Read()>
    bc44:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc48:	e3e0102e 	mvn	r1, #46	; 0x2e
    bc4c:	eb000179 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    bc50:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc54:	eb000154 	bl	c1ac <CDWHCIRegister::Get() const>
    bc58:	e3100a01 	tst	r0, #4096	; 0x1000
    bc5c:	1a000004 	bne	bc74 <CDWHCIDevice::InitHost()+0x174>
    bc60:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc64:	e3a01a01 	mov	r1, #4096	; 0x1000
    bc68:	eb000182 	bl	c278 <CDWHCIRegister::Or(unsigned int)>
    bc6c:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc70:	eb00013e 	bl	c170 <CDWHCIRegister::Write()>
    bc74:	e1a00004 	mov	r0, r4
    bc78:	ebfff8f3 	bl	a04c <CDWHCIDevice::EnableHostInterrupts()>
    bc7c:	e28d005c 	add	r0, sp, #92	; 0x5c
    bc80:	eb000132 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    bc84:	e28d0050 	add	r0, sp, #80	; 0x50
    bc88:	eb000130 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    bc8c:	e28d0044 	add	r0, sp, #68	; 0x44
    bc90:	eb00012e 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    bc94:	e28d0038 	add	r0, sp, #56	; 0x38
    bc98:	eb00012c 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    bc9c:	e28d002c 	add	r0, sp, #44	; 0x2c
    bca0:	eb00012a 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    bca4:	e28d0020 	add	r0, sp, #32
    bca8:	eb000128 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    bcac:	e28d0014 	add	r0, sp, #20
    bcb0:	eb000126 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    bcb4:	e28d0008 	add	r0, sp, #8
    bcb8:	eb000124 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    bcbc:	e3a00001 	mov	r0, #1
    bcc0:	e28dd068 	add	sp, sp, #104	; 0x68
    bcc4:	e8bd8010 	pop	{r4, pc}
    bcc8:	e28d0020 	add	r0, sp, #32
    bccc:	eb000136 	bl	c1ac <CDWHCIRegister::Get() const>
    bcd0:	e7e11450 	ubfx	r1, r0, #8, #2
    bcd4:	e3510001 	cmp	r1, #1
    bcd8:	1affffa8 	bne	bb80 <CDWHCIDevice::InitHost()+0x80>
    bcdc:	e28d002c 	add	r0, sp, #44	; 0x2c
    bce0:	e58d1004 	str	r1, [sp, #4]
    bce4:	eb00011a 	bl	c154 <CDWHCIRegister::Read()>
    bce8:	e59d1004 	ldr	r1, [sp, #4]
    bcec:	e3100802 	tst	r0, #131072	; 0x20000
    bcf0:	1affffa3 	bne	bb84 <CDWHCIDevice::InitHost()+0x84>
    bcf4:	eaffffa1 	b	bb80 <CDWHCIDevice::InitHost()+0x80>

0000bcf8 <CDWHCIDevice::Initialize()>:
    bcf8:	e5903004 	ldr	r3, [r0, #4]
    bcfc:	e92d4030 	push	{r4, r5, lr}
    bd00:	e3530000 	cmp	r3, #0
    bd04:	e24dd024 	sub	sp, sp, #36	; 0x24
    bd08:	e1a04000 	mov	r4, r0
    bd0c:	0a000055 	beq	be68 <CDWHCIDevice::Initialize()+0x170>
    bd10:	e5943008 	ldr	r3, [r4, #8]
    bd14:	e3530000 	cmp	r3, #0
    bd18:	0a000059 	beq	be84 <CDWHCIDevice::Initialize()+0x18c>
    bd1c:	e3a01040 	mov	r1, #64	; 0x40
    bd20:	e28d0008 	add	r0, sp, #8
    bd24:	e3431f98 	movt	r1, #16280	; 0x3f98
    bd28:	eb000100 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bd2c:	e28d0008 	add	r0, sp, #8
    bd30:	eb000107 	bl	c154 <CDWHCIRegister::Read()>
    bd34:	e302380a 	movw	r3, #10250	; 0x280a
    bd38:	e3443f54 	movt	r3, #20308	; 0x4f54
    bd3c:	e1500003 	cmp	r0, r3
    bd40:	0a000010 	beq	bd88 <CDWHCIDevice::Initialize()+0x90>
    bd44:	eb006519 	bl	251b0 <CLogger::Get()>
    bd48:	e3a05000 	mov	r5, #0
    bd4c:	e1a04000 	mov	r4, r0
    bd50:	e28d0008 	add	r0, sp, #8
    bd54:	eb000114 	bl	c1ac <CDWHCIRegister::Get() const>
    bd58:	e30a3c80 	movw	r3, #44160	; 0xac80
    bd5c:	e3a02001 	mov	r2, #1
    bd60:	e3403002 	movt	r3, #2
    bd64:	e59f11b8 	ldr	r1, [pc, #440]	; bf24 <CDWHCIDevice::Initialize()+0x22c>
    bd68:	e58d0000 	str	r0, [sp]
    bd6c:	e1a00004 	mov	r0, r4
    bd70:	eb0065ea 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bd74:	e28d0008 	add	r0, sp, #8
    bd78:	eb0000f4 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    bd7c:	e1a00005 	mov	r0, r5
    bd80:	e28dd024 	add	sp, sp, #36	; 0x24
    bd84:	e8bd8030 	pop	{r4, r5, pc}
    bd88:	e1a00004 	mov	r0, r4
    bd8c:	ebfff875 	bl	9f68 <CDWHCIDevice::PowerOn()>
    bd90:	e2505000 	subs	r5, r0, #0
    bd94:	0a00002c 	beq	be4c <CDWHCIDevice::Initialize()+0x154>
    bd98:	e3a01008 	mov	r1, #8
    bd9c:	e28d0014 	add	r0, sp, #20
    bda0:	e3431f98 	movt	r1, #16280	; 0x3f98
    bda4:	eb0000e1 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bda8:	e28d0014 	add	r0, sp, #20
    bdac:	eb0000e8 	bl	c154 <CDWHCIRegister::Read()>
    bdb0:	e28d0014 	add	r0, sp, #20
    bdb4:	e3e01001 	mvn	r1, #1
    bdb8:	eb00011e 	bl	c238 <CDWHCIRegister::And(unsigned int)>
    bdbc:	e28d0014 	add	r0, sp, #20
    bdc0:	eb0000ea 	bl	c170 <CDWHCIRegister::Write()>
    bdc4:	e5940004 	ldr	r0, [r4, #4]
    bdc8:	e3500000 	cmp	r0, #0
    bdcc:	0a00004c 	beq	bf04 <CDWHCIDevice::Initialize()+0x20c>
    bdd0:	e1a03004 	mov	r3, r4
    bdd4:	e3a01009 	mov	r1, #9
    bdd8:	e30b20d8 	movw	r2, #45272	; 0xb0d8
    bddc:	e3402000 	movt	r2, #0
    bde0:	eb006d4b 	bl	27314 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    bde4:	e1a00004 	mov	r0, r4
    bde8:	ebfffe6a 	bl	b798 <CDWHCIDevice::InitCore()>
    bdec:	e2505000 	subs	r5, r0, #0
    bdf0:	0a00000e 	beq	be30 <CDWHCIDevice::Initialize()+0x138>
    bdf4:	e1a00004 	mov	r0, r4
    bdf8:	ebfff874 	bl	9fd0 <CDWHCIDevice::EnableGlobalInterrupts()>
    bdfc:	e1a00004 	mov	r0, r4
    be00:	ebffff3e 	bl	bb00 <CDWHCIDevice::InitHost()>
    be04:	e2505000 	subs	r5, r0, #0
    be08:	1a000024 	bne	bea0 <CDWHCIDevice::Initialize()+0x1a8>
    be0c:	eb0064e7 	bl	251b0 <CLogger::Get()>
    be10:	e30a3cc0 	movw	r3, #44224	; 0xacc0
    be14:	e3a02001 	mov	r2, #1
    be18:	e3403002 	movt	r3, #2
    be1c:	e59f1100 	ldr	r1, [pc, #256]	; bf24 <CDWHCIDevice::Initialize()+0x22c>
    be20:	eb0065be 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    be24:	e28d0014 	add	r0, sp, #20
    be28:	eb0000c8 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    be2c:	eaffffd0 	b	bd74 <CDWHCIDevice::Initialize()+0x7c>
    be30:	eb0064de 	bl	251b0 <CLogger::Get()>
    be34:	e30a3ca8 	movw	r3, #44200	; 0xaca8
    be38:	e3a02001 	mov	r2, #1
    be3c:	e3403002 	movt	r3, #2
    be40:	e59f10dc 	ldr	r1, [pc, #220]	; bf24 <CDWHCIDevice::Initialize()+0x22c>
    be44:	eb0065b5 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    be48:	eafffff5 	b	be24 <CDWHCIDevice::Initialize()+0x12c>
    be4c:	eb0064d7 	bl	251b0 <CLogger::Get()>
    be50:	e30a3c98 	movw	r3, #44184	; 0xac98
    be54:	e3a02001 	mov	r2, #1
    be58:	e3403002 	movt	r3, #2
    be5c:	e59f10c0 	ldr	r1, [pc, #192]	; bf24 <CDWHCIDevice::Initialize()+0x22c>
    be60:	eb0065ae 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    be64:	eaffffc2 	b	bd74 <CDWHCIDevice::Initialize()+0x7c>
    be68:	e30a1928 	movw	r1, #43304	; 0xa928
    be6c:	e30a0970 	movw	r0, #43376	; 0xa970
    be70:	e3401002 	movt	r1, #2
    be74:	e3400002 	movt	r0, #2
    be78:	e3a0205d 	mov	r2, #93	; 0x5d
    be7c:	eb006346 	bl	24b9c <assertion_failed>
    be80:	eaffffa2 	b	bd10 <CDWHCIDevice::Initialize()+0x18>
    be84:	e30a1928 	movw	r1, #43304	; 0xa928
    be88:	e30a0988 	movw	r0, #43400	; 0xa988
    be8c:	e3401002 	movt	r1, #2
    be90:	e3400002 	movt	r0, #2
    be94:	e3a0205e 	mov	r2, #94	; 0x5e
    be98:	eb00633f 	bl	24b9c <assertion_failed>
    be9c:	eaffff9e 	b	bd1c <CDWHCIDevice::Initialize()+0x24>
    bea0:	e1a00004 	mov	r0, r4
    bea4:	ebfffde2 	bl	b634 <CDWHCIDevice::EnableRootPort()>
    bea8:	e3500000 	cmp	r0, #0
    beac:	0a00000c 	beq	bee4 <CDWHCIDevice::Initialize()+0x1ec>
    beb0:	e28400a4 	add	r0, r4, #164	; 0xa4
    beb4:	eb0012af 	bl	10978 <CDWHCIRootPort::Initialize()>
    beb8:	e3500000 	cmp	r0, #0
    bebc:	13a05001 	movne	r5, #1
    bec0:	1affffd7 	bne	be24 <CDWHCIDevice::Initialize()+0x12c>
    bec4:	eb0064b9 	bl	251b0 <CLogger::Get()>
    bec8:	e30a3cfc 	movw	r3, #44284	; 0xacfc
    becc:	e3a02002 	mov	r2, #2
    bed0:	e3403002 	movt	r3, #2
    bed4:	e59f1048 	ldr	r1, [pc, #72]	; bf24 <CDWHCIDevice::Initialize()+0x22c>
    bed8:	e3a05001 	mov	r5, #1
    bedc:	eb00658f 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bee0:	eaffffcf 	b	be24 <CDWHCIDevice::Initialize()+0x12c>
    bee4:	eb0064b1 	bl	251b0 <CLogger::Get()>
    bee8:	e30a3cd8 	movw	r3, #44248	; 0xacd8
    beec:	e3a02002 	mov	r2, #2
    bef0:	e3403002 	movt	r3, #2
    bef4:	e59f1028 	ldr	r1, [pc, #40]	; bf24 <CDWHCIDevice::Initialize()+0x22c>
    bef8:	e3a05001 	mov	r5, #1
    befc:	eb006587 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bf00:	eaffffc7 	b	be24 <CDWHCIDevice::Initialize()+0x12c>
    bf04:	e30a1928 	movw	r1, #43304	; 0xa928
    bf08:	e30a0970 	movw	r0, #43376	; 0xa970
    bf0c:	e3401002 	movt	r1, #2
    bf10:	e3400002 	movt	r0, #2
    bf14:	e3a02073 	mov	r2, #115	; 0x73
    bf18:	eb00631f 	bl	24b9c <assertion_failed>
    bf1c:	e5940004 	ldr	r0, [r4, #4]
    bf20:	eaffffaa 	b	bdd0 <CDWHCIDevice::Initialize()+0xd8>
    bf24:	0002a91c 	.word	0x0002a91c

0000bf28 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    bf28:	e92d4030 	push	{r4, r5, lr}
    bf2c:	e24dd01c 	sub	sp, sp, #28
    bf30:	e1a05001 	mov	r5, r1
    bf34:	e28d000c 	add	r0, sp, #12
    bf38:	e1a01002 	mov	r1, r2
    bf3c:	eb00007b 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bf40:	f57ff05f 	dmb	sy
    bf44:	eb006499 	bl	251b0 <CLogger::Get()>
    bf48:	e1a04000 	mov	r4, r0
    bf4c:	e28d000c 	add	r0, sp, #12
    bf50:	eb00007f 	bl	c154 <CDWHCIRegister::Read()>
    bf54:	e3a02004 	mov	r2, #4
    bf58:	e59f1024 	ldr	r1, [pc, #36]	; bf84 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    bf5c:	e30a3964 	movw	r3, #43364	; 0xa964
    bf60:	e58d5004 	str	r5, [sp, #4]
    bf64:	e3403002 	movt	r3, #2
    bf68:	e58d0000 	str	r0, [sp]
    bf6c:	e1a00004 	mov	r0, r4
    bf70:	eb00656a 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bf74:	e28d000c 	add	r0, sp, #12
    bf78:	eb000074 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
    bf7c:	e28dd01c 	add	sp, sp, #28
    bf80:	e8bd8030 	pop	{r4, r5, pc}
    bf84:	0002a91c 	.word	0x0002a91c

0000bf88 <CDWHCIDevice::DumpStatus(unsigned int)>:
    bf88:	e92d4070 	push	{r4, r5, r6, lr}
    bf8c:	e30a0d18 	movw	r0, #44312	; 0xad18
    bf90:	e1a05001 	mov	r5, r1
    bf94:	e3400002 	movt	r0, #2
    bf98:	e3a01000 	mov	r1, #0
    bf9c:	e3431f98 	movt	r1, #16280	; 0x3f98
    bfa0:	ebfff76e 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bfa4:	e3a01008 	mov	r1, #8
    bfa8:	e30a0d24 	movw	r0, #44324	; 0xad24
    bfac:	e3431f98 	movt	r1, #16280	; 0x3f98
    bfb0:	e3400002 	movt	r0, #2
    bfb4:	e30c4028 	movw	r4, #49192	; 0xc028
    bfb8:	ebfff768 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bfbc:	e3a0100c 	mov	r1, #12
    bfc0:	e30a0d2c 	movw	r0, #44332	; 0xad2c
    bfc4:	e3431f98 	movt	r1, #16280	; 0x3f98
    bfc8:	e3400002 	movt	r0, #2
    bfcc:	e34041fc 	movt	r4, #508	; 0x1fc
    bfd0:	ebfff762 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bfd4:	e3a01010 	mov	r1, #16
    bfd8:	e30a0d34 	movw	r0, #44340	; 0xad34
    bfdc:	e3431f98 	movt	r1, #16280	; 0x3f98
    bfe0:	e3400002 	movt	r0, #2
    bfe4:	e0854004 	add	r4, r5, r4
    bfe8:	ebfff75c 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    bfec:	e3a01014 	mov	r1, #20
    bff0:	e30a0d3c 	movw	r0, #44348	; 0xad3c
    bff4:	e3431f98 	movt	r1, #16280	; 0x3f98
    bff8:	e3400002 	movt	r0, #2
    bffc:	e1a04284 	lsl	r4, r4, #5
    c000:	ebfff756 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c004:	e3a01018 	mov	r1, #24
    c008:	e30a0d48 	movw	r0, #44360	; 0xad48
    c00c:	e3431f98 	movt	r1, #16280	; 0x3f98
    c010:	e3400002 	movt	r0, #2
    c014:	ebfff751 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c018:	e3a01024 	mov	r1, #36	; 0x24
    c01c:	e30a0d54 	movw	r0, #44372	; 0xad54
    c020:	e3431f98 	movt	r1, #16280	; 0x3f98
    c024:	e3400002 	movt	r0, #2
    c028:	ebfff74c 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c02c:	e3a01028 	mov	r1, #40	; 0x28
    c030:	e30a0d60 	movw	r0, #44384	; 0xad60
    c034:	e3431f98 	movt	r1, #16280	; 0x3f98
    c038:	e3400002 	movt	r0, #2
    c03c:	ebfff747 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c040:	e3a0102c 	mov	r1, #44	; 0x2c
    c044:	e30a0d74 	movw	r0, #44404	; 0xad74
    c048:	e3431f98 	movt	r1, #16280	; 0x3f98
    c04c:	e3400002 	movt	r0, #2
    c050:	ebfff742 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c054:	e3a01c01 	mov	r1, #256	; 0x100
    c058:	e30a0d84 	movw	r0, #44420	; 0xad84
    c05c:	e3431f98 	movt	r1, #16280	; 0x3f98
    c060:	e3400002 	movt	r0, #2
    c064:	ebfff73d 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c068:	e3a01b01 	mov	r1, #1024	; 0x400
    c06c:	e30a0d9c 	movw	r0, #44444	; 0xad9c
    c070:	e3431f98 	movt	r1, #16280	; 0x3f98
    c074:	e3400002 	movt	r0, #2
    c078:	ebfff738 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c07c:	e3a01e41 	mov	r1, #1040	; 0x410
    c080:	e30a0da8 	movw	r0, #44456	; 0xada8
    c084:	e3431f98 	movt	r1, #16280	; 0x3f98
    c088:	e3400002 	movt	r0, #2
    c08c:	ebfff733 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c090:	e3001414 	movw	r1, #1044	; 0x414
    c094:	e30a0dc0 	movw	r0, #44480	; 0xadc0
    c098:	e3431f98 	movt	r1, #16280	; 0x3f98
    c09c:	e3400002 	movt	r0, #2
    c0a0:	ebfff72e 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c0a4:	e3001418 	movw	r1, #1048	; 0x418
    c0a8:	e30a0dd4 	movw	r0, #44500	; 0xadd4
    c0ac:	e3431f98 	movt	r1, #16280	; 0x3f98
    c0b0:	e3400002 	movt	r0, #2
    c0b4:	ebfff729 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c0b8:	e3a01d11 	mov	r1, #1088	; 0x440
    c0bc:	e30a0dec 	movw	r0, #44524	; 0xadec
    c0c0:	e3431f98 	movt	r1, #16280	; 0x3f98
    c0c4:	e3400002 	movt	r0, #2
    c0c8:	ebfff724 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c0cc:	e1a01004 	mov	r1, r4
    c0d0:	e30a0df8 	movw	r0, #44536	; 0xadf8
    c0d4:	e3400002 	movt	r0, #2
    c0d8:	ebfff720 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c0dc:	e2841004 	add	r1, r4, #4
    c0e0:	e30a0e10 	movw	r0, #44560	; 0xae10
    c0e4:	e3400002 	movt	r0, #2
    c0e8:	ebfff71c 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c0ec:	e2841008 	add	r1, r4, #8
    c0f0:	e30a0e28 	movw	r0, #44584	; 0xae28
    c0f4:	e3400002 	movt	r0, #2
    c0f8:	ebfff718 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c0fc:	e284100c 	add	r1, r4, #12
    c100:	e30a0e3c 	movw	r0, #44604	; 0xae3c
    c104:	e3400002 	movt	r0, #2
    c108:	ebfff714 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c10c:	e2841010 	add	r1, r4, #16
    c110:	e30a0e54 	movw	r0, #44628	; 0xae54
    c114:	e3400002 	movt	r0, #2
    c118:	ebfff710 	bl	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>
    c11c:	e2841014 	add	r1, r4, #20
    c120:	e30a0e6c 	movw	r0, #44652	; 0xae6c
    c124:	e3400002 	movt	r0, #2
    c128:	e8bd4070 	pop	{r4, r5, r6, lr}
    c12c:	eafff70b 	b	9d60 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.4]>

0000c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    c130:	e3a02000 	mov	r2, #0
    c134:	e5801004 	str	r1, [r0, #4]
    c138:	e5802000 	str	r2, [r0]
    c13c:	e12fff1e 	bx	lr

0000c140 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    c140:	e3a0c001 	mov	ip, #1
    c144:	e9800006 	stmib	r0, {r1, r2}
    c148:	e580c000 	str	ip, [r0]
    c14c:	e12fff1e 	bx	lr

0000c150 <CDWHCIRegister::~CDWHCIRegister()>:
    c150:	e12fff1e 	bx	lr

0000c154 <CDWHCIRegister::Read()>:
    c154:	e5901004 	ldr	r1, [r0, #4]
    c158:	e1a03000 	mov	r3, r0
    c15c:	e3a02001 	mov	r2, #1
    c160:	e5910000 	ldr	r0, [r1]
    c164:	e5832000 	str	r2, [r3]
    c168:	e5830008 	str	r0, [r3, #8]
    c16c:	e12fff1e 	bx	lr

0000c170 <CDWHCIRegister::Write()>:
    c170:	e5903000 	ldr	r3, [r0]
    c174:	e92d4010 	push	{r4, lr}
    c178:	e3530000 	cmp	r3, #0
    c17c:	e1a04000 	mov	r4, r0
    c180:	1a000005 	bne	c19c <CDWHCIRegister::Write()+0x2c>
    c184:	e30a1e84 	movw	r1, #44676	; 0xae84
    c188:	e30a0e98 	movw	r0, #44696	; 0xae98
    c18c:	e3401002 	movt	r1, #2
    c190:	e3400002 	movt	r0, #2
    c194:	e3a02035 	mov	r2, #53	; 0x35
    c198:	eb00627f 	bl	24b9c <assertion_failed>
    c19c:	e5942008 	ldr	r2, [r4, #8]
    c1a0:	e5943004 	ldr	r3, [r4, #4]
    c1a4:	e5832000 	str	r2, [r3]
    c1a8:	e8bd8010 	pop	{r4, pc}

0000c1ac <CDWHCIRegister::Get() const>:
    c1ac:	e5903000 	ldr	r3, [r0]
    c1b0:	e92d4010 	push	{r4, lr}
    c1b4:	e3530000 	cmp	r3, #0
    c1b8:	e1a04000 	mov	r4, r0
    c1bc:	1a000005 	bne	c1d8 <CDWHCIRegister::Get() const+0x2c>
    c1c0:	e30a1e84 	movw	r1, #44676	; 0xae84
    c1c4:	e30a0e98 	movw	r0, #44696	; 0xae98
    c1c8:	e3401002 	movt	r1, #2
    c1cc:	e3400002 	movt	r0, #2
    c1d0:	e3a0203b 	mov	r2, #59	; 0x3b
    c1d4:	eb006270 	bl	24b9c <assertion_failed>
    c1d8:	e5940008 	ldr	r0, [r4, #8]
    c1dc:	e8bd8010 	pop	{r4, pc}

0000c1e0 <CDWHCIRegister::Set(unsigned int)>:
    c1e0:	e3a03001 	mov	r3, #1
    c1e4:	e5801008 	str	r1, [r0, #8]
    c1e8:	e5803000 	str	r3, [r0]
    c1ec:	e12fff1e 	bx	lr

0000c1f0 <CDWHCIRegister::IsSet(unsigned int) const>:
    c1f0:	e5903000 	ldr	r3, [r0]
    c1f4:	e92d4070 	push	{r4, r5, r6, lr}
    c1f8:	e3530000 	cmp	r3, #0
    c1fc:	e1a04000 	mov	r4, r0
    c200:	e1a05001 	mov	r5, r1
    c204:	0a000004 	beq	c21c <CDWHCIRegister::IsSet(unsigned int) const+0x2c>
    c208:	e5943008 	ldr	r3, [r4, #8]
    c20c:	e1150003 	tst	r5, r3
    c210:	13a00001 	movne	r0, #1
    c214:	03a00000 	moveq	r0, #0
    c218:	e8bd8070 	pop	{r4, r5, r6, pc}
    c21c:	e30a1e84 	movw	r1, #44676	; 0xae84
    c220:	e30a0e98 	movw	r0, #44696	; 0xae98
    c224:	e3401002 	movt	r1, #2
    c228:	e3400002 	movt	r0, #2
    c22c:	e3a02047 	mov	r2, #71	; 0x47
    c230:	eb006259 	bl	24b9c <assertion_failed>
    c234:	eafffff3 	b	c208 <CDWHCIRegister::IsSet(unsigned int) const+0x18>

0000c238 <CDWHCIRegister::And(unsigned int)>:
    c238:	e5903000 	ldr	r3, [r0]
    c23c:	e92d4070 	push	{r4, r5, r6, lr}
    c240:	e3530000 	cmp	r3, #0
    c244:	e1a04000 	mov	r4, r0
    c248:	e1a05001 	mov	r5, r1
    c24c:	1a000005 	bne	c268 <CDWHCIRegister::And(unsigned int)+0x30>
    c250:	e30a1e84 	movw	r1, #44676	; 0xae84
    c254:	e30a0e98 	movw	r0, #44696	; 0xae98
    c258:	e3401002 	movt	r1, #2
    c25c:	e3400002 	movt	r0, #2
    c260:	e3a0204d 	mov	r2, #77	; 0x4d
    c264:	eb00624c 	bl	24b9c <assertion_failed>
    c268:	e5941008 	ldr	r1, [r4, #8]
    c26c:	e0011005 	and	r1, r1, r5
    c270:	e5841008 	str	r1, [r4, #8]
    c274:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c278 <CDWHCIRegister::Or(unsigned int)>:
    c278:	e5903000 	ldr	r3, [r0]
    c27c:	e92d4070 	push	{r4, r5, r6, lr}
    c280:	e3530000 	cmp	r3, #0
    c284:	e1a04000 	mov	r4, r0
    c288:	e1a05001 	mov	r5, r1
    c28c:	1a000005 	bne	c2a8 <CDWHCIRegister::Or(unsigned int)+0x30>
    c290:	e30a1e84 	movw	r1, #44676	; 0xae84
    c294:	e30a0e98 	movw	r0, #44696	; 0xae98
    c298:	e3401002 	movt	r1, #2
    c29c:	e3400002 	movt	r0, #2
    c2a0:	e3a02053 	mov	r2, #83	; 0x53
    c2a4:	eb00623c 	bl	24b9c <assertion_failed>
    c2a8:	e5941008 	ldr	r1, [r4, #8]
    c2ac:	e1811005 	orr	r1, r1, r5
    c2b0:	e5841008 	str	r1, [r4, #8]
    c2b4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c2b8 <CDWHCIRegister::ClearBit(unsigned int)>:
    c2b8:	e5903000 	ldr	r3, [r0]
    c2bc:	e92d4070 	push	{r4, r5, r6, lr}
    c2c0:	e3530000 	cmp	r3, #0
    c2c4:	e1a04000 	mov	r4, r0
    c2c8:	e1a05001 	mov	r5, r1
    c2cc:	0a00000c 	beq	c304 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    c2d0:	e355001f 	cmp	r5, #31
    c2d4:	9a000005 	bls	c2f0 <CDWHCIRegister::ClearBit(unsigned int)+0x38>
    c2d8:	e30a1e84 	movw	r1, #44676	; 0xae84
    c2dc:	e30a0ea4 	movw	r0, #44708	; 0xaea4
    c2e0:	e3401002 	movt	r1, #2
    c2e4:	e3400002 	movt	r0, #2
    c2e8:	e3a0205a 	mov	r2, #90	; 0x5a
    c2ec:	eb00622a 	bl	24b9c <assertion_failed>
    c2f0:	e5941008 	ldr	r1, [r4, #8]
    c2f4:	e3a03001 	mov	r3, #1
    c2f8:	e1c11513 	bic	r1, r1, r3, lsl r5
    c2fc:	e5841008 	str	r1, [r4, #8]
    c300:	e8bd8070 	pop	{r4, r5, r6, pc}
    c304:	e30a1e84 	movw	r1, #44676	; 0xae84
    c308:	e30a0e98 	movw	r0, #44696	; 0xae98
    c30c:	e3401002 	movt	r1, #2
    c310:	e3400002 	movt	r0, #2
    c314:	e3a02059 	mov	r2, #89	; 0x59
    c318:	eb00621f 	bl	24b9c <assertion_failed>
    c31c:	eaffffeb 	b	c2d0 <CDWHCIRegister::ClearBit(unsigned int)+0x18>

0000c320 <CDWHCIRegister::SetBit(unsigned int)>:
    c320:	e5903000 	ldr	r3, [r0]
    c324:	e92d4070 	push	{r4, r5, r6, lr}
    c328:	e3530000 	cmp	r3, #0
    c32c:	e1a04000 	mov	r4, r0
    c330:	e1a05001 	mov	r5, r1
    c334:	0a00000c 	beq	c36c <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    c338:	e355001f 	cmp	r5, #31
    c33c:	9a000005 	bls	c358 <CDWHCIRegister::SetBit(unsigned int)+0x38>
    c340:	e30a1e84 	movw	r1, #44676	; 0xae84
    c344:	e30a0ea4 	movw	r0, #44708	; 0xaea4
    c348:	e3401002 	movt	r1, #2
    c34c:	e3400002 	movt	r0, #2
    c350:	e3a02061 	mov	r2, #97	; 0x61
    c354:	eb006210 	bl	24b9c <assertion_failed>
    c358:	e5941008 	ldr	r1, [r4, #8]
    c35c:	e3a03001 	mov	r3, #1
    c360:	e1811513 	orr	r1, r1, r3, lsl r5
    c364:	e5841008 	str	r1, [r4, #8]
    c368:	e8bd8070 	pop	{r4, r5, r6, pc}
    c36c:	e30a1e84 	movw	r1, #44676	; 0xae84
    c370:	e30a0e98 	movw	r0, #44696	; 0xae98
    c374:	e3401002 	movt	r1, #2
    c378:	e3400002 	movt	r0, #2
    c37c:	e3a02060 	mov	r2, #96	; 0x60
    c380:	eb006205 	bl	24b9c <assertion_failed>
    c384:	eaffffeb 	b	c338 <CDWHCIRegister::SetBit(unsigned int)+0x18>

0000c388 <CDWHCIRegister::ClearAll()>:
    c388:	e3a02000 	mov	r2, #0
    c38c:	e3a03001 	mov	r3, #1
    c390:	e5802008 	str	r2, [r0, #8]
    c394:	e5803000 	str	r3, [r0]
    c398:	e12fff1e 	bx	lr

0000c39c <CDWHCIRegister::SetAll()>:
    c39c:	e3e02000 	mvn	r2, #0
    c3a0:	e3a03001 	mov	r3, #1
    c3a4:	e5802008 	str	r2, [r0, #8]
    c3a8:	e5803000 	str	r3, [r0]
    c3ac:	e12fff1e 	bx	lr

0000c3b0 <CDWHCIRegister::Dump() const>:
    c3b0:	e5903000 	ldr	r3, [r0]
    c3b4:	e92d4010 	push	{r4, lr}
    c3b8:	e3530000 	cmp	r3, #0
    c3bc:	e24dd008 	sub	sp, sp, #8
    c3c0:	e1a04000 	mov	r4, r0
    c3c4:	1a00000b 	bne	c3f8 <CDWHCIRegister::Dump() const+0x48>
    c3c8:	eb006378 	bl	251b0 <CLogger::Get()>
    c3cc:	e5942004 	ldr	r2, [r4, #4]
    c3d0:	e30a3ee4 	movw	r3, #44772	; 0xaee4
    c3d4:	e30a1edc 	movw	r1, #44764	; 0xaedc
    c3d8:	e7eb2052 	ubfx	r2, r2, #0, #12
    c3dc:	e3403002 	movt	r3, #2
    c3e0:	e58d2000 	str	r2, [sp]
    c3e4:	e3401002 	movt	r1, #2
    c3e8:	e3a02004 	mov	r2, #4
    c3ec:	eb00644b 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c3f0:	e28dd008 	add	sp, sp, #8
    c3f4:	e8bd8010 	pop	{r4, pc}
    c3f8:	eb00636c 	bl	251b0 <CLogger::Get()>
    c3fc:	e9941004 	ldmib	r4, {r2, ip}
    c400:	e30a3ec0 	movw	r3, #44736	; 0xaec0
    c404:	e30a1edc 	movw	r1, #44764	; 0xaedc
    c408:	e3403002 	movt	r3, #2
    c40c:	e7eb2052 	ubfx	r2, r2, #0, #12
    c410:	e3401002 	movt	r1, #2
    c414:	e88d1004 	stm	sp, {r2, ip}
    c418:	e3a02004 	mov	r2, #4
    c41c:	eb00643f 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c420:	e28dd008 	add	sp, sp, #8
    c424:	e8bd8010 	pop	{r4, pc}

0000c428 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    c428:	e92d4010 	push	{r4, lr}
    c42c:	e1a04000 	mov	r4, r0
    c430:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    c434:	e3500000 	cmp	r0, #0
    c438:	0a000002 	beq	c448 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    c43c:	e5903000 	ldr	r3, [r0]
    c440:	e5933004 	ldr	r3, [r3, #4]
    c444:	e12fff33 	blx	r3
    c448:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    c44c:	e3a03000 	mov	r3, #0
    c450:	e5843050 	str	r3, [r4, #80]	; 0x50
    c454:	e1500003 	cmp	r0, r3
    c458:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c45c:	0a000000 	beq	c464 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    c460:	eb0056c4 	bl	21f78 <operator delete[](void*)>
    c464:	e1a00004 	mov	r0, r4
    c468:	e8bd8010 	pop	{r4, pc}

0000c46c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    c46c:	e300c7dc 	movw	ip, #2012	; 0x7dc
    c470:	e111000c 	tst	r1, ip
    c474:	e92d4070 	push	{r4, r5, r6, lr}
    c478:	e1a04000 	mov	r4, r0
    c47c:	e5801044 	str	r1, [r0, #68]	; 0x44
    c480:	0a000006 	beq	c4a0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x34>
    c484:	e3110010 	tst	r1, #16
    c488:	08bd8070 	popeq	{r4, r5, r6, pc}
    c48c:	e5900004 	ldr	r0, [r0, #4]
    c490:	eb000842 	bl	e5a0 <CUSBRequest::IsCompleteOnNAK() const>
    c494:	e3500000 	cmp	r0, #0
    c498:	1a000044 	bne	c5b0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
    c49c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c4a0:	e5901010 	ldr	r1, [r0, #16]
    c4a4:	e5905034 	ldr	r5, [r0, #52]	; 0x34
    c4a8:	e3510000 	cmp	r1, #0
    c4ac:	e5901030 	ldr	r1, [r0, #48]	; 0x30
    c4b0:	e0455002 	sub	r5, r5, r2
    c4b4:	e0413003 	sub	r3, r1, r3
    c4b8:	1a000018 	bne	c520 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb4>
    c4bc:	e5901038 	ldr	r1, [r0, #56]	; 0x38
    c4c0:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    c4c4:	e0811003 	add	r1, r1, r3
    c4c8:	e5801038 	str	r1, [r0, #56]	; 0x38
    c4cc:	e0823003 	add	r3, r2, r3
    c4d0:	e580304c 	str	r3, [r0, #76]	; 0x4c
    c4d4:	e594200c 	ldr	r2, [r4, #12]
    c4d8:	e1a01005 	mov	r1, r5
    c4dc:	e594001c 	ldr	r0, [r4, #28]
    c4e0:	eb0006d5 	bl	e03c <CUSBEndpoint::SkipPID(unsigned int, int)>
    c4e4:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    c4e8:	e1550002 	cmp	r5, r2
    c4ec:	8a000027 	bhi	c590 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x124>
    c4f0:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    c4f4:	e0422005 	sub	r2, r2, r5
    c4f8:	e5941038 	ldr	r1, [r4, #56]	; 0x38
    c4fc:	e594c030 	ldr	ip, [r4, #48]	; 0x30
    c500:	e0403001 	sub	r3, r0, r1
    c504:	e584202c 	str	r2, [r4, #44]	; 0x2c
    c508:	e153000c 	cmp	r3, ip
    c50c:	28bd8070 	popcs	{r4, r5, r6, pc}
    c510:	e1500001 	cmp	r0, r1
    c514:	3a00003b 	bcc	c608 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x19c>
    c518:	e5843030 	str	r3, [r4, #48]	; 0x30
    c51c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c520:	e5902014 	ldr	r2, [r0, #20]
    c524:	e2920000 	adds	r0, r2, #0
    c528:	13a00001 	movne	r0, #1
    c52c:	e3530000 	cmp	r3, #0
    c530:	13a00000 	movne	r0, #0
    c534:	e3500000 	cmp	r0, #0
    c538:	0a000009 	beq	c564 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf8>
    c53c:	e3510000 	cmp	r1, #0
    c540:	15941024 	ldrne	r1, [r4, #36]	; 0x24
    c544:	10010591 	mulne	r1, r1, r5
    c548:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    c54c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c550:	e0822001 	add	r2, r2, r1
    c554:	e5842038 	str	r2, [r4, #56]	; 0x38
    c558:	e0831001 	add	r1, r3, r1
    c55c:	e584104c 	str	r1, [r4, #76]	; 0x4c
    c560:	eaffffdb 	b	c4d4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x68>
    c564:	e5941038 	ldr	r1, [r4, #56]	; 0x38
    c568:	e3520000 	cmp	r2, #0
    c56c:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c570:	e0811003 	add	r1, r1, r3
    c574:	e5841038 	str	r1, [r4, #56]	; 0x38
    c578:	e0823003 	add	r3, r2, r3
    c57c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c580:	1affffd3 	bne	c4d4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x68>
    c584:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    c588:	e1550002 	cmp	r5, r2
    c58c:	9affffd7 	bls	c4f0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x84>
    c590:	e3a020c3 	mov	r2, #195	; 0xc3
    c594:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c598:	e30a0f50 	movw	r0, #44880	; 0xaf50
    c59c:	e3401002 	movt	r1, #2
    c5a0:	e3400002 	movt	r0, #2
    c5a4:	eb00617c 	bl	24b9c <assertion_failed>
    c5a8:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    c5ac:	eaffffcf 	b	c4f0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x84>
    c5b0:	e594001c 	ldr	r0, [r4, #28]
    c5b4:	eb000679 	bl	dfa0 <CUSBEndpoint::GetType() const>
    c5b8:	e3500001 	cmp	r0, #1
    c5bc:	0a000005 	beq	c5d8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x16c>
    c5c0:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c5c4:	e30a0f1c 	movw	r0, #44828	; 0xaf1c
    c5c8:	e3401002 	movt	r1, #2
    c5cc:	e3400002 	movt	r0, #2
    c5d0:	e3a020a6 	mov	r2, #166	; 0xa6
    c5d4:	eb006170 	bl	24b9c <assertion_failed>
    c5d8:	e5943008 	ldr	r3, [r4, #8]
    c5dc:	e3530000 	cmp	r3, #0
    c5e0:	1a000005 	bne	c5fc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x190>
    c5e4:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c5e8:	e30a0f48 	movw	r0, #44872	; 0xaf48
    c5ec:	e3401002 	movt	r1, #2
    c5f0:	e3400002 	movt	r0, #2
    c5f4:	e3a020a7 	mov	r2, #167	; 0xa7
    c5f8:	eb006167 	bl	24b9c <assertion_failed>
    c5fc:	e3a03000 	mov	r3, #0
    c600:	e584302c 	str	r3, [r4, #44]	; 0x2c
    c604:	e8bd8070 	pop	{r4, r5, r6, pc}
    c608:	e3a020c9 	mov	r2, #201	; 0xc9
    c60c:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c610:	e30a0f74 	movw	r0, #44916	; 0xaf74
    c614:	e3401002 	movt	r1, #2
    c618:	e3400002 	movt	r0, #2
    c61c:	eb00615e 	bl	24b9c <assertion_failed>
    c620:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c624:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    c628:	e0433002 	sub	r3, r3, r2
    c62c:	eaffffb9 	b	c518 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xac>

0000c630 <CDWHCITransferStageData::SetSplitComplete(int)>:
    c630:	e5903010 	ldr	r3, [r0, #16]
    c634:	e92d4070 	push	{r4, r5, r6, lr}
    c638:	e3530000 	cmp	r3, #0
    c63c:	e1a04000 	mov	r4, r0
    c640:	e1a05001 	mov	r5, r1
    c644:	1a000005 	bne	c660 <CDWHCITransferStageData::SetSplitComplete(int)+0x30>
    c648:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c64c:	e30a0fa0 	movw	r0, #44960	; 0xafa0
    c650:	e3401002 	movt	r1, #2
    c654:	e3400002 	movt	r0, #2
    c658:	e3a020d0 	mov	r2, #208	; 0xd0
    c65c:	eb00614e 	bl	24b9c <assertion_failed>
    c660:	e5845014 	str	r5, [r4, #20]
    c664:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c668 <CDWHCITransferStageData::SetState(unsigned int)>:
    c668:	e580103c 	str	r1, [r0, #60]	; 0x3c
    c66c:	e12fff1e 	bx	lr

0000c670 <CDWHCITransferStageData::GetState() const>:
    c670:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    c674:	e12fff1e 	bx	lr

0000c678 <CDWHCITransferStageData::SetSubState(unsigned int)>:
    c678:	e5801040 	str	r1, [r0, #64]	; 0x40
    c67c:	e12fff1e 	bx	lr

0000c680 <CDWHCITransferStageData::GetSubState() const>:
    c680:	e5900040 	ldr	r0, [r0, #64]	; 0x40
    c684:	e12fff1e 	bx	lr

0000c688 <CDWHCITransferStageData::BeginSplitCycle()>:
    c688:	e3a00001 	mov	r0, #1
    c68c:	e12fff1e 	bx	lr

0000c690 <CDWHCITransferStageData::GetChannelNumber() const>:
    c690:	e5900000 	ldr	r0, [r0]
    c694:	e12fff1e 	bx	lr

0000c698 <CDWHCITransferStageData::IsPeriodic() const>:
    c698:	e92d4010 	push	{r4, lr}
    c69c:	e1a04000 	mov	r4, r0
    c6a0:	e590001c 	ldr	r0, [r0, #28]
    c6a4:	e3500000 	cmp	r0, #0
    c6a8:	0a000006 	beq	c6c8 <CDWHCITransferStageData::IsPeriodic() const+0x30>
    c6ac:	eb00063b 	bl	dfa0 <CUSBEndpoint::GetType() const>
    c6b0:	e2400002 	sub	r0, r0, #2
    c6b4:	e6ef0070 	uxtb	r0, r0
    c6b8:	e3500001 	cmp	r0, #1
    c6bc:	83a00000 	movhi	r0, #0
    c6c0:	93a00001 	movls	r0, #1
    c6c4:	e8bd8010 	pop	{r4, pc}
    c6c8:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c6cc:	e30a0fb4 	movw	r0, #44980	; 0xafb4
    c6d0:	e3401002 	movt	r1, #2
    c6d4:	e3400002 	movt	r0, #2
    c6d8:	e3a020f5 	mov	r2, #245	; 0xf5
    c6dc:	eb00612e 	bl	24b9c <assertion_failed>
    c6e0:	e594001c 	ldr	r0, [r4, #28]
    c6e4:	eafffff0 	b	c6ac <CDWHCITransferStageData::IsPeriodic() const+0x14>

0000c6e8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)>:
    c6e8:	e92d4070 	push	{r4, r5, r6, lr}
    c6ec:	e2525000 	subs	r5, r2, #0
    c6f0:	e59d6010 	ldr	r6, [sp, #16]
    c6f4:	e3a02000 	mov	r2, #0
    c6f8:	e1a04000 	mov	r4, r0
    c6fc:	e5801000 	str	r1, [r0]
    c700:	e5805004 	str	r5, [r0, #4]
    c704:	e5803008 	str	r3, [r0, #8]
    c708:	e580600c 	str	r6, [r0, #12]
    c70c:	e5802014 	str	r2, [r0, #20]
    c710:	e5802038 	str	r2, [r0, #56]	; 0x38
    c714:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c718:	e5802040 	str	r2, [r0, #64]	; 0x40
    c71c:	e5802044 	str	r2, [r0, #68]	; 0x44
    c720:	e5802048 	str	r2, [r0, #72]	; 0x48
    c724:	e5802050 	str	r2, [r0, #80]	; 0x50
    c728:	0a000084 	beq	c940 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x258>
    c72c:	e1a00005 	mov	r0, r5
    c730:	eb00072a 	bl	e3e0 <CUSBRequest::GetEndpoint() const>
    c734:	e3500000 	cmp	r0, #0
    c738:	e584001c 	str	r0, [r4, #28]
    c73c:	0a000086 	beq	c95c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x274>
    c740:	eb000604 	bl	df58 <CUSBEndpoint::GetDevice() const>
    c744:	e3500000 	cmp	r0, #0
    c748:	e5840018 	str	r0, [r4, #24]
    c74c:	0a00008a 	beq	c97c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x294>
    c750:	eb0002a1 	bl	d1dc <CUSBDevice::GetSpeed() const>
    c754:	e5c40020 	strb	r0, [r4, #32]
    c758:	e594001c 	ldr	r0, [r4, #28]
    c75c:	eb000615 	bl	dfb8 <CUSBEndpoint::GetMaxPacketSize() const>
    c760:	e5840024 	str	r0, [r4, #36]	; 0x24
    c764:	e5940018 	ldr	r0, [r4, #24]
    c768:	eb00029d 	bl	d1e4 <CUSBDevice::IsSplit() const>
    c76c:	e3560000 	cmp	r6, #0
    c770:	e5840010 	str	r0, [r4, #16]
    c774:	0a000042 	beq	c884 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x19c>
    c778:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    c77c:	e3530000 	cmp	r3, #0
    c780:	0a000005 	beq	c79c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0xb4>
    c784:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c788:	e30a0fe4 	movw	r0, #45028	; 0xafe4
    c78c:	e3401002 	movt	r1, #2
    c790:	e3400002 	movt	r0, #2
    c794:	e3a0205c 	mov	r2, #92	; 0x5c
    c798:	eb0060ff 	bl	24b9c <assertion_failed>
    c79c:	e3a00004 	mov	r0, #4
    c7a0:	eb0055f2 	bl	21f70 <operator new[](unsigned int)>
    c7a4:	e3a02000 	mov	r2, #0
    c7a8:	e3a03001 	mov	r3, #1
    c7ac:	e5842028 	str	r2, [r4, #40]	; 0x28
    c7b0:	e5842030 	str	r2, [r4, #48]	; 0x30
    c7b4:	e584302c 	str	r3, [r4, #44]	; 0x2c
    c7b8:	e5843034 	str	r3, [r4, #52]	; 0x34
    c7bc:	e5840048 	str	r0, [r4, #72]	; 0x48
    c7c0:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c7c4:	e3100003 	tst	r0, #3
    c7c8:	1a000026 	bne	c868 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x180>
    c7cc:	e5943010 	ldr	r3, [r4, #16]
    c7d0:	e3530000 	cmp	r3, #0
    c7d4:	0a00000a 	beq	c804 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x11c>
    c7d8:	e1a00004 	mov	r0, r4
    c7dc:	ebffffad 	bl	c698 <CDWHCITransferStageData::IsPeriodic() const>
    c7e0:	e3500000 	cmp	r0, #0
    c7e4:	0a000018 	beq	c84c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x164>
    c7e8:	e3a00014 	mov	r0, #20
    c7ec:	eb0055de 	bl	21f6c <operator new(unsigned int)>
    c7f0:	e1a05000 	mov	r5, r0
    c7f4:	eb000f1e 	bl	10474 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    c7f8:	e5845050 	str	r5, [r4, #80]	; 0x50
    c7fc:	e1a00004 	mov	r0, r4
    c800:	e8bd8070 	pop	{r4, r5, r6, pc}
    c804:	e5940018 	ldr	r0, [r4, #24]
    c808:	eb000277 	bl	d1ec <CUSBDevice::GetHubAddress() const>
    c80c:	e3500000 	cmp	r0, #0
    c810:	1afffff9 	bne	c7fc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x114>
    c814:	e5d43020 	ldrb	r3, [r4, #32]
    c818:	e3530002 	cmp	r3, #2
    c81c:	0afffff6 	beq	c7fc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x114>
    c820:	e1a00004 	mov	r0, r4
    c824:	ebffff9b 	bl	c698 <CDWHCITransferStageData::IsPeriodic() const>
    c828:	e1a06000 	mov	r6, r0
    c82c:	e3a0000c 	mov	r0, #12
    c830:	eb0055cd 	bl	21f6c <operator new(unsigned int)>
    c834:	e1a01006 	mov	r1, r6
    c838:	e1a05000 	mov	r5, r0
    c83c:	eb001708 	bl	12464 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(int)>
    c840:	e5845050 	str	r5, [r4, #80]	; 0x50
    c844:	e1a00004 	mov	r0, r4
    c848:	e8bd8070 	pop	{r4, r5, r6, pc}
    c84c:	e3a00010 	mov	r0, #16
    c850:	eb0055c5 	bl	21f6c <operator new(unsigned int)>
    c854:	e1a05000 	mov	r5, r0
    c858:	eb000e56 	bl	101b8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    c85c:	e5845050 	str	r5, [r4, #80]	; 0x50
    c860:	e1a00004 	mov	r0, r4
    c864:	e8bd8070 	pop	{r4, r5, r6, pc}
    c868:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c86c:	e30b0010 	movw	r0, #45072	; 0xb010
    c870:	e3401002 	movt	r1, #2
    c874:	e3400002 	movt	r0, #2
    c878:	e3a02068 	mov	r2, #104	; 0x68
    c87c:	eb0060c6 	bl	24b9c <assertion_failed>
    c880:	eaffffd1 	b	c7cc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0xe4>
    c884:	e1a01006 	mov	r1, r6
    c888:	e594001c 	ldr	r0, [r4, #28]
    c88c:	eb0005d8 	bl	dff4 <CUSBEndpoint::GetNextPID(int)>
    c890:	e3500000 	cmp	r0, #0
    c894:	e1a00005 	mov	r0, r5
    c898:	0a00001e 	beq	c918 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x230>
    c89c:	eb00070a 	bl	e4cc <CUSBRequest::GetBuffer()>
    c8a0:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c8a4:	e1a00005 	mov	r0, r5
    c8a8:	eb00071a 	bl	e518 <CUSBRequest::GetBufLen() const>
    c8ac:	e1a06000 	mov	r6, r0
    c8b0:	e5840028 	str	r0, [r4, #40]	; 0x28
    c8b4:	e5945024 	ldr	r5, [r4, #36]	; 0x24
    c8b8:	e2450001 	sub	r0, r5, #1
    c8bc:	e0800006 	add	r0, r0, r6
    c8c0:	e1a01005 	mov	r1, r5
    c8c4:	eb0054fe 	bl	21cc4 <__aeabi_uidiv>
    c8c8:	e5943010 	ldr	r3, [r4, #16]
    c8cc:	e3530000 	cmp	r3, #0
    c8d0:	e584002c 	str	r0, [r4, #44]	; 0x2c
    c8d4:	0a000015 	beq	c930 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x248>
    c8d8:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
    c8dc:	e1550006 	cmp	r5, r6
    c8e0:	e3a03001 	mov	r3, #1
    c8e4:	e5843034 	str	r3, [r4, #52]	; 0x34
    c8e8:	21a05006 	movcs	r5, r6
    c8ec:	e5845030 	str	r5, [r4, #48]	; 0x30
    c8f0:	e3500000 	cmp	r0, #0
    c8f4:	1affffb2 	bne	c7c4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0xdc>
    c8f8:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c8fc:	e30a0ff8 	movw	r0, #45048	; 0xaff8
    c900:	e3401002 	movt	r1, #2
    c904:	e3400002 	movt	r0, #2
    c908:	e3a02067 	mov	r2, #103	; 0x67
    c90c:	eb0060a2 	bl	24b9c <assertion_failed>
    c910:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
    c914:	eaffffaa 	b	c7c4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0xdc>
    c918:	eb0006d3 	bl	e46c <CUSBRequest::GetSetupData()>
    c91c:	e3a03008 	mov	r3, #8
    c920:	e1a06003 	mov	r6, r3
    c924:	e5843028 	str	r3, [r4, #40]	; 0x28
    c928:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c92c:	eaffffe0 	b	c8b4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x1cc>
    c930:	e5840034 	str	r0, [r4, #52]	; 0x34
    c934:	e5846030 	str	r6, [r4, #48]	; 0x30
    c938:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
    c93c:	eaffffeb 	b	c8f0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x208>
    c940:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c944:	e30a0fc8 	movw	r0, #45000	; 0xafc8
    c948:	e3401002 	movt	r1, #2
    c94c:	e3400002 	movt	r0, #2
    c950:	e3a0202c 	mov	r2, #44	; 0x2c
    c954:	eb006090 	bl	24b9c <assertion_failed>
    c958:	eaffff73 	b	c72c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x44>
    c95c:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c960:	e30a0fb4 	movw	r0, #44980	; 0xafb4
    c964:	e3401002 	movt	r1, #2
    c968:	e3400002 	movt	r0, #2
    c96c:	e3a0202f 	mov	r2, #47	; 0x2f
    c970:	eb006089 	bl	24b9c <assertion_failed>
    c974:	e594001c 	ldr	r0, [r4, #28]
    c978:	eaffff70 	b	c740 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x58>
    c97c:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c980:	e30a0fd4 	movw	r0, #45012	; 0xafd4
    c984:	e3401002 	movt	r1, #2
    c988:	e3400002 	movt	r0, #2
    c98c:	e3a02031 	mov	r2, #49	; 0x31
    c990:	eb006081 	bl	24b9c <assertion_failed>
    c994:	e5940018 	ldr	r0, [r4, #24]
    c998:	eaffff6c 	b	c750 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, int, int)+0x68>

0000c99c <CDWHCITransferStageData::GetDeviceAddress() const>:
    c99c:	e5903018 	ldr	r3, [r0, #24]
    c9a0:	e3530000 	cmp	r3, #0
    c9a4:	0a000001 	beq	c9b0 <CDWHCITransferStageData::GetDeviceAddress() const+0x14>
    c9a8:	e1a00003 	mov	r0, r3
    c9ac:	ea000208 	b	d1d4 <CUSBDevice::GetAddress() const>
    c9b0:	e92d4010 	push	{r4, lr}
    c9b4:	e30a1f04 	movw	r1, #44804	; 0xaf04
    c9b8:	e1a04000 	mov	r4, r0
    c9bc:	e3401002 	movt	r1, #2
    c9c0:	e30a0fd4 	movw	r0, #45012	; 0xafd4
    c9c4:	e3a020fe 	mov	r2, #254	; 0xfe
    c9c8:	e3400002 	movt	r0, #2
    c9cc:	eb006072 	bl	24b9c <assertion_failed>
    c9d0:	e5943018 	ldr	r3, [r4, #24]
    c9d4:	e8bd4010 	pop	{r4, lr}
    c9d8:	e1a00003 	mov	r0, r3
    c9dc:	ea0001fc 	b	d1d4 <CUSBDevice::GetAddress() const>

0000c9e0 <CDWHCITransferStageData::GetEndpointType() const>:
    c9e0:	e92d4010 	push	{r4, lr}
    c9e4:	e1a04000 	mov	r4, r0
    c9e8:	e590001c 	ldr	r0, [r0, #28]
    c9ec:	e3500000 	cmp	r0, #0
    c9f0:	0a000011 	beq	ca3c <CDWHCITransferStageData::GetEndpointType() const+0x5c>
    c9f4:	eb000569 	bl	dfa0 <CUSBEndpoint::GetType() const>
    c9f8:	e3500001 	cmp	r0, #1
    c9fc:	0a00000c 	beq	ca34 <CDWHCITransferStageData::GetEndpointType() const+0x54>
    ca00:	3a000009 	bcc	ca2c <CDWHCITransferStageData::GetEndpointType() const+0x4c>
    ca04:	e3500002 	cmp	r0, #2
    ca08:	1a000001 	bne	ca14 <CDWHCITransferStageData::GetEndpointType() const+0x34>
    ca0c:	e3a00003 	mov	r0, #3
    ca10:	e8bd8010 	pop	{r4, pc}
    ca14:	e30a1f04 	movw	r1, #44804	; 0xaf04
    ca18:	e30b0130 	movw	r0, #45360	; 0xb130
    ca1c:	e3401002 	movt	r1, #2
    ca20:	e3400002 	movt	r0, #2
    ca24:	e3002117 	movw	r2, #279	; 0x117
    ca28:	eb00605b 	bl	24b9c <assertion_failed>
    ca2c:	e3a00000 	mov	r0, #0
    ca30:	e8bd8010 	pop	{r4, pc}
    ca34:	e3a00002 	mov	r0, #2
    ca38:	e8bd8010 	pop	{r4, pc}
    ca3c:	e30a1f04 	movw	r1, #44804	; 0xaf04
    ca40:	e30a0fb4 	movw	r0, #44980	; 0xafb4
    ca44:	e3401002 	movt	r1, #2
    ca48:	e3400002 	movt	r0, #2
    ca4c:	e3a02f41 	mov	r2, #260	; 0x104
    ca50:	eb006051 	bl	24b9c <assertion_failed>
    ca54:	e594001c 	ldr	r0, [r4, #28]
    ca58:	eaffffe5 	b	c9f4 <CDWHCITransferStageData::GetEndpointType() const+0x14>

0000ca5c <CDWHCITransferStageData::GetEndpointNumber() const>:
    ca5c:	e590301c 	ldr	r3, [r0, #28]
    ca60:	e3530000 	cmp	r3, #0
    ca64:	0a000001 	beq	ca70 <CDWHCITransferStageData::GetEndpointNumber() const+0x14>
    ca68:	e1a00003 	mov	r0, r3
    ca6c:	ea000549 	b	df98 <CUSBEndpoint::GetNumber() const>
    ca70:	e92d4010 	push	{r4, lr}
    ca74:	e30a1f04 	movw	r1, #44804	; 0xaf04
    ca78:	e1a04000 	mov	r4, r0
    ca7c:	e3401002 	movt	r1, #2
    ca80:	e30a0fb4 	movw	r0, #44980	; 0xafb4
    ca84:	e3a02e12 	mov	r2, #288	; 0x120
    ca88:	e3400002 	movt	r0, #2
    ca8c:	eb006042 	bl	24b9c <assertion_failed>
    ca90:	e594301c 	ldr	r3, [r4, #28]
    ca94:	e8bd4010 	pop	{r4, lr}
    ca98:	e1a00003 	mov	r0, r3
    ca9c:	ea00053d 	b	df98 <CUSBEndpoint::GetNumber() const>

0000caa0 <CDWHCITransferStageData::GetMaxPacketSize() const>:
    caa0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    caa4:	e12fff1e 	bx	lr

0000caa8 <CDWHCITransferStageData::GetSpeed() const>:
    caa8:	e5d00020 	ldrb	r0, [r0, #32]
    caac:	e12fff1e 	bx	lr

0000cab0 <CDWHCITransferStageData::GetPID() const>:
    cab0:	e92d4010 	push	{r4, lr}
    cab4:	e1a04000 	mov	r4, r0
    cab8:	e590001c 	ldr	r0, [r0, #28]
    cabc:	e3500000 	cmp	r0, #0
    cac0:	0a000012 	beq	cb10 <CDWHCITransferStageData::GetPID() const+0x60>
    cac4:	e594100c 	ldr	r1, [r4, #12]
    cac8:	eb000549 	bl	dff4 <CUSBEndpoint::GetNextPID(int)>
    cacc:	e3500001 	cmp	r0, #1
    cad0:	0a00000c 	beq	cb08 <CDWHCITransferStageData::GetPID() const+0x58>
    cad4:	3a000009 	bcc	cb00 <CDWHCITransferStageData::GetPID() const+0x50>
    cad8:	e3500002 	cmp	r0, #2
    cadc:	08bd8010 	popeq	{r4, pc}
    cae0:	e3002143 	movw	r2, #323	; 0x143
    cae4:	e30a1f04 	movw	r1, #44804	; 0xaf04
    cae8:	e30b0130 	movw	r0, #45360	; 0xb130
    caec:	e3401002 	movt	r1, #2
    caf0:	e3400002 	movt	r0, #2
    caf4:	eb006028 	bl	24b9c <assertion_failed>
    caf8:	e3a00000 	mov	r0, #0
    cafc:	e8bd8010 	pop	{r4, pc}
    cb00:	e3a00003 	mov	r0, #3
    cb04:	e8bd8010 	pop	{r4, pc}
    cb08:	e3a00000 	mov	r0, #0
    cb0c:	e8bd8010 	pop	{r4, pc}
    cb10:	e30a1f04 	movw	r1, #44804	; 0xaf04
    cb14:	e30a0fb4 	movw	r0, #44980	; 0xafb4
    cb18:	e3401002 	movt	r1, #2
    cb1c:	e3400002 	movt	r0, #2
    cb20:	e3a02e13 	mov	r2, #304	; 0x130
    cb24:	eb00601c 	bl	24b9c <assertion_failed>
    cb28:	e594001c 	ldr	r0, [r4, #28]
    cb2c:	eaffffe4 	b	cac4 <CDWHCITransferStageData::GetPID() const+0x14>

0000cb30 <CDWHCITransferStageData::IsDirectionIn() const>:
    cb30:	e5900008 	ldr	r0, [r0, #8]
    cb34:	e12fff1e 	bx	lr

0000cb38 <CDWHCITransferStageData::IsStatusStage() const>:
    cb38:	e590000c 	ldr	r0, [r0, #12]
    cb3c:	e12fff1e 	bx	lr

0000cb40 <CDWHCITransferStageData::GetDMAAddress() const>:
    cb40:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    cb44:	e3530000 	cmp	r3, #0
    cb48:	0a000001 	beq	cb54 <CDWHCITransferStageData::GetDMAAddress() const+0x14>
    cb4c:	e1a00003 	mov	r0, r3
    cb50:	e12fff1e 	bx	lr
    cb54:	e92d4010 	push	{r4, lr}
    cb58:	e3002156 	movw	r2, #342	; 0x156
    cb5c:	e1a04000 	mov	r4, r0
    cb60:	e30a1f04 	movw	r1, #44804	; 0xaf04
    cb64:	e30a0ff8 	movw	r0, #45048	; 0xaff8
    cb68:	e3401002 	movt	r1, #2
    cb6c:	e3400002 	movt	r0, #2
    cb70:	eb006009 	bl	24b9c <assertion_failed>
    cb74:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    cb78:	e1a00003 	mov	r0, r3
    cb7c:	e8bd8010 	pop	{r4, pc}

0000cb80 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    cb80:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    cb84:	e12fff1e 	bx	lr

0000cb88 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    cb88:	e5900034 	ldr	r0, [r0, #52]	; 0x34
    cb8c:	e12fff1e 	bx	lr

0000cb90 <CDWHCITransferStageData::IsSplit() const>:
    cb90:	e5900010 	ldr	r0, [r0, #16]
    cb94:	e12fff1e 	bx	lr

0000cb98 <CDWHCITransferStageData::IsSplitComplete() const>:
    cb98:	e5903010 	ldr	r3, [r0, #16]
    cb9c:	e92d4010 	push	{r4, lr}
    cba0:	e3530000 	cmp	r3, #0
    cba4:	e1a04000 	mov	r4, r0
    cba8:	1a000005 	bne	cbc4 <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    cbac:	e30a1f04 	movw	r1, #44804	; 0xaf04
    cbb0:	e30a0fa0 	movw	r0, #44960	; 0xafa0
    cbb4:	e3401002 	movt	r1, #2
    cbb8:	e3400002 	movt	r0, #2
    cbbc:	e3a02f5b 	mov	r2, #364	; 0x16c
    cbc0:	eb005ff5 	bl	24b9c <assertion_failed>
    cbc4:	e5940014 	ldr	r0, [r4, #20]
    cbc8:	e8bd8010 	pop	{r4, pc}

0000cbcc <CDWHCITransferStageData::GetHubAddress() const>:
    cbcc:	e5903010 	ldr	r3, [r0, #16]
    cbd0:	e92d4010 	push	{r4, lr}
    cbd4:	e3530000 	cmp	r3, #0
    cbd8:	e1a04000 	mov	r4, r0
    cbdc:	0a000004 	beq	cbf4 <CDWHCITransferStageData::GetHubAddress() const+0x28>
    cbe0:	e5940018 	ldr	r0, [r4, #24]
    cbe4:	e3500000 	cmp	r0, #0
    cbe8:	0a00000a 	beq	cc18 <CDWHCITransferStageData::GetHubAddress() const+0x4c>
    cbec:	e8bd4010 	pop	{r4, lr}
    cbf0:	ea00017d 	b	d1ec <CUSBDevice::GetHubAddress() const>
    cbf4:	e30a1f04 	movw	r1, #44804	; 0xaf04
    cbf8:	e30a0fa0 	movw	r0, #44960	; 0xafa0
    cbfc:	e3401002 	movt	r1, #2
    cc00:	e3400002 	movt	r0, #2
    cc04:	e3002173 	movw	r2, #371	; 0x173
    cc08:	eb005fe3 	bl	24b9c <assertion_failed>
    cc0c:	e5940018 	ldr	r0, [r4, #24]
    cc10:	e3500000 	cmp	r0, #0
    cc14:	1afffff4 	bne	cbec <CDWHCITransferStageData::GetHubAddress() const+0x20>
    cc18:	e30a1f04 	movw	r1, #44804	; 0xaf04
    cc1c:	e30a0fd4 	movw	r0, #45012	; 0xafd4
    cc20:	e3401002 	movt	r1, #2
    cc24:	e3400002 	movt	r0, #2
    cc28:	e3002175 	movw	r2, #373	; 0x175
    cc2c:	eb005fda 	bl	24b9c <assertion_failed>
    cc30:	e5940018 	ldr	r0, [r4, #24]
    cc34:	e8bd4010 	pop	{r4, lr}
    cc38:	ea00016b 	b	d1ec <CUSBDevice::GetHubAddress() const>

0000cc3c <CDWHCITransferStageData::GetHubPortAddress() const>:
    cc3c:	e5903010 	ldr	r3, [r0, #16]
    cc40:	e92d4010 	push	{r4, lr}
    cc44:	e3530000 	cmp	r3, #0
    cc48:	e1a04000 	mov	r4, r0
    cc4c:	0a000004 	beq	cc64 <CDWHCITransferStageData::GetHubPortAddress() const+0x28>
    cc50:	e5940018 	ldr	r0, [r4, #24]
    cc54:	e3500000 	cmp	r0, #0
    cc58:	0a00000a 	beq	cc88 <CDWHCITransferStageData::GetHubPortAddress() const+0x4c>
    cc5c:	e8bd4010 	pop	{r4, lr}
    cc60:	ea000163 	b	d1f4 <CUSBDevice::GetHubPortNumber() const>
    cc64:	e30a1f04 	movw	r1, #44804	; 0xaf04
    cc68:	e30a0fa0 	movw	r0, #44960	; 0xafa0
    cc6c:	e3401002 	movt	r1, #2
    cc70:	e3400002 	movt	r0, #2
    cc74:	e300217b 	movw	r2, #379	; 0x17b
    cc78:	eb005fc7 	bl	24b9c <assertion_failed>
    cc7c:	e5940018 	ldr	r0, [r4, #24]
    cc80:	e3500000 	cmp	r0, #0
    cc84:	1afffff4 	bne	cc5c <CDWHCITransferStageData::GetHubPortAddress() const+0x20>
    cc88:	e30a1f04 	movw	r1, #44804	; 0xaf04
    cc8c:	e30a0fd4 	movw	r0, #45012	; 0xafd4
    cc90:	e3401002 	movt	r1, #2
    cc94:	e3400002 	movt	r0, #2
    cc98:	e300217d 	movw	r2, #381	; 0x17d
    cc9c:	eb005fbe 	bl	24b9c <assertion_failed>
    cca0:	e5940018 	ldr	r0, [r4, #24]
    cca4:	e8bd4010 	pop	{r4, lr}
    cca8:	ea000151 	b	d1f4 <CUSBDevice::GetHubPortNumber() const>

0000ccac <CDWHCITransferStageData::GetSplitPosition() const>:
    ccac:	e3a00003 	mov	r0, #3
    ccb0:	e12fff1e 	bx	lr

0000ccb4 <CDWHCITransferStageData::GetStatusMask() const>:
    ccb4:	e5903010 	ldr	r3, [r0, #16]
    ccb8:	e3530000 	cmp	r3, #0
    ccbc:	0a000001 	beq	ccc8 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    ccc0:	e30007ff 	movw	r0, #2047	; 0x7ff
    ccc4:	e12fff1e 	bx	lr
    ccc8:	e92d4010 	push	{r4, lr}
    cccc:	ebfffe71 	bl	c698 <CDWHCITransferStageData::IsPeriodic() const>
    ccd0:	e3500000 	cmp	r0, #0
    ccd4:	0300078f 	movweq	r0, #1935	; 0x78f
    ccd8:	130007ff 	movwne	r0, #2047	; 0x7ff
    ccdc:	e8bd8010 	pop	{r4, pc}

0000cce0 <CDWHCITransferStageData::GetTransactionStatus() const>:
    cce0:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    cce4:	e3530000 	cmp	r3, #0
    cce8:	0a000001 	beq	ccf4 <CDWHCITransferStageData::GetTransactionStatus() const+0x14>
    ccec:	e1a00003 	mov	r0, r3
    ccf0:	e12fff1e 	bx	lr
    ccf4:	e92d4010 	push	{r4, lr}
    ccf8:	e300219a 	movw	r2, #410	; 0x19a
    ccfc:	e1a04000 	mov	r4, r0
    cd00:	e30a1f04 	movw	r1, #44804	; 0xaf04
    cd04:	e30b0034 	movw	r0, #45108	; 0xb034
    cd08:	e3401002 	movt	r1, #2
    cd0c:	e3400002 	movt	r0, #2
    cd10:	eb005fa1 	bl	24b9c <assertion_failed>
    cd14:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    cd18:	e1a00003 	mov	r0, r3
    cd1c:	e8bd8010 	pop	{r4, pc}

0000cd20 <CDWHCITransferStageData::IsStageComplete() const>:
    cd20:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cd24:	e16f0f10 	clz	r0, r0
    cd28:	e1a002a0 	lsr	r0, r0, #5
    cd2c:	e12fff1e 	bx	lr

0000cd30 <CDWHCITransferStageData::GetResultLen() const>:
    cd30:	e5902038 	ldr	r2, [r0, #56]	; 0x38
    cd34:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    cd38:	e1520000 	cmp	r2, r0
    cd3c:	31a00002 	movcc	r0, r2
    cd40:	e12fff1e 	bx	lr

0000cd44 <CDWHCITransferStageData::GetURB() const>:
    cd44:	e5903004 	ldr	r3, [r0, #4]
    cd48:	e3530000 	cmp	r3, #0
    cd4c:	0a000001 	beq	cd58 <CDWHCITransferStageData::GetURB() const+0x14>
    cd50:	e1a00003 	mov	r0, r3
    cd54:	e12fff1e 	bx	lr
    cd58:	e92d4010 	push	{r4, lr}
    cd5c:	e30021af 	movw	r2, #431	; 0x1af
    cd60:	e1a04000 	mov	r4, r0
    cd64:	e30a1f04 	movw	r1, #44804	; 0xaf04
    cd68:	e30a0fc8 	movw	r0, #45000	; 0xafc8
    cd6c:	e3401002 	movt	r1, #2
    cd70:	e3400002 	movt	r0, #2
    cd74:	eb005f88 	bl	24b9c <assertion_failed>
    cd78:	e5943004 	ldr	r3, [r4, #4]
    cd7c:	e1a00003 	mov	r0, r3
    cd80:	e8bd8010 	pop	{r4, pc}

0000cd84 <CDWHCITransferStageData::GetFrameScheduler() const>:
    cd84:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    cd88:	e12fff1e 	bx	lr

0000cd8c <CUSBDevice::~CUSBDevice()>:
    cd8c:	e59f30ac 	ldr	r3, [pc, #172]	; ce40 <CUSBDevice::~CUSBDevice()+0xb4>
    cd90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cd94:	e2806048 	add	r6, r0, #72	; 0x48
    cd98:	e1a04000 	mov	r4, r0
    cd9c:	e1a07000 	mov	r7, r0
    cda0:	e3a05000 	mov	r5, #0
    cda4:	e4843020 	str	r3, [r4], #32
    cda8:	e5943004 	ldr	r3, [r4, #4]
    cdac:	e3530000 	cmp	r3, #0
    cdb0:	e1a00003 	mov	r0, r3
    cdb4:	0a000002 	beq	cdc4 <CUSBDevice::~CUSBDevice()+0x38>
    cdb8:	e5933000 	ldr	r3, [r3]
    cdbc:	e5933004 	ldr	r3, [r3, #4]
    cdc0:	e12fff33 	blx	r3
    cdc4:	e5a45004 	str	r5, [r4, #4]!
    cdc8:	e1540006 	cmp	r4, r6
    cdcc:	1afffff5 	bne	cda8 <CUSBDevice::~CUSBDevice()+0x1c>
    cdd0:	e5974020 	ldr	r4, [r7, #32]
    cdd4:	e3540000 	cmp	r4, #0
    cdd8:	0a000004 	beq	cdf0 <CUSBDevice::~CUSBDevice()+0x64>
    cddc:	e1a00004 	mov	r0, r4
    cde0:	eb001bca 	bl	13d10 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    cde4:	e1a00004 	mov	r0, r4
    cde8:	e3a0101c 	mov	r1, #28
    cdec:	eb005462 	bl	21f7c <operator delete(void*, unsigned int)>
    cdf0:	e3a04000 	mov	r4, #0
    cdf4:	e3a01009 	mov	r1, #9
    cdf8:	e597001c 	ldr	r0, [r7, #28]
    cdfc:	e5874020 	str	r4, [r7, #32]
    ce00:	eb00545d 	bl	21f7c <operator delete(void*, unsigned int)>
    ce04:	e587401c 	str	r4, [r7, #28]
    ce08:	e3a01012 	mov	r1, #18
    ce0c:	e5970018 	ldr	r0, [r7, #24]
    ce10:	eb005459 	bl	21f7c <operator delete(void*, unsigned int)>
    ce14:	e597500c 	ldr	r5, [r7, #12]
    ce18:	e5874018 	str	r4, [r7, #24]
    ce1c:	e1550004 	cmp	r5, r4
    ce20:	0a000004 	beq	ce38 <CUSBDevice::~CUSBDevice()+0xac>
    ce24:	e1a00005 	mov	r0, r5
    ce28:	eb000449 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
    ce2c:	e1a00005 	mov	r0, r5
    ce30:	e3a01018 	mov	r1, #24
    ce34:	eb005450 	bl	21f7c <operator delete(void*, unsigned int)>
    ce38:	e1a00007 	mov	r0, r7
    ce3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ce40:	0002b058 	.word	0x0002b058

0000ce44 <CUSBDevice::~CUSBDevice()>:
    ce44:	e92d4010 	push	{r4, lr}
    ce48:	e1a04000 	mov	r4, r0
    ce4c:	ebffffce 	bl	cd8c <CUSBDevice::~CUSBDevice()>
    ce50:	e1a00004 	mov	r0, r4
    ce54:	e3a0104c 	mov	r1, #76	; 0x4c
    ce58:	eb005447 	bl	21f7c <operator delete(void*, unsigned int)>
    ce5c:	e1a00004 	mov	r0, r4
    ce60:	e8bd8010 	pop	{r4, pc}

0000ce64 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)>:
    ce64:	e92d4070 	push	{r4, r5, r6, lr}
    ce68:	e3510000 	cmp	r1, #0
    ce6c:	e59fe0d8 	ldr	lr, [pc, #216]	; cf4c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0xe8>
    ce70:	e1a04000 	mov	r4, r0
    ce74:	e5ddc010 	ldrb	ip, [sp, #16]
    ce78:	e5dd5014 	ldrb	r5, [sp, #20]
    ce7c:	e5801004 	str	r1, [r0, #4]
    ce80:	e3a01000 	mov	r1, #0
    ce84:	e5c02009 	strb	r2, [r0, #9]
    ce88:	e5803010 	str	r3, [r0, #16]
    ce8c:	e580e000 	str	lr, [r0]
    ce90:	e5c0c014 	strb	ip, [r0, #20]
    ce94:	e5c01008 	strb	r1, [r0, #8]
    ce98:	e580100c 	str	r1, [r0, #12]
    ce9c:	e5801018 	str	r1, [r0, #24]
    cea0:	e580101c 	str	r1, [r0, #28]
    cea4:	e5801020 	str	r1, [r0, #32]
    cea8:	e5c05015 	strb	r5, [r0, #21]
    ceac:	0a000016 	beq	cf0c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0xa8>
    ceb0:	e3a00018 	mov	r0, #24
    ceb4:	eb00542c 	bl	21f6c <operator new(unsigned int)>
    ceb8:	e1a01004 	mov	r1, r4
    cebc:	e1a06000 	mov	r6, r0
    cec0:	eb000378 	bl	dca8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    cec4:	e3550000 	cmp	r5, #0
    cec8:	e584600c 	str	r6, [r4, #12]
    cecc:	0a000007 	beq	cef0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0x8c>
    ced0:	e2843020 	add	r3, r4, #32
    ced4:	e2841048 	add	r1, r4, #72	; 0x48
    ced8:	e3a02000 	mov	r2, #0
    cedc:	e5a32004 	str	r2, [r3, #4]!
    cee0:	e1510003 	cmp	r1, r3
    cee4:	1afffffc 	bne	cedc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0x78>
    cee8:	e1a00004 	mov	r0, r4
    ceec:	e8bd8070 	pop	{r4, r5, r6, pc}
    cef0:	e30b1070 	movw	r1, #45168	; 0xb070
    cef4:	e30b00a4 	movw	r0, #45220	; 0xb0a4
    cef8:	e3401002 	movt	r1, #2
    cefc:	e3400002 	movt	r0, #2
    cf00:	e3a02037 	mov	r2, #55	; 0x37
    cf04:	eb005f24 	bl	24b9c <assertion_failed>
    cf08:	eafffff0 	b	ced0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0x6c>
    cf0c:	e30b1070 	movw	r1, #45168	; 0xb070
    cf10:	e30b0080 	movw	r0, #45184	; 0xb080
    cf14:	e3401002 	movt	r1, #2
    cf18:	e3400002 	movt	r0, #2
    cf1c:	e3a02031 	mov	r2, #49	; 0x31
    cf20:	eb005f1d 	bl	24b9c <assertion_failed>
    cf24:	e594300c 	ldr	r3, [r4, #12]
    cf28:	e3530000 	cmp	r3, #0
    cf2c:	0affffdf 	beq	ceb0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0x4c>
    cf30:	e30b1070 	movw	r1, #45168	; 0xb070
    cf34:	e30b0090 	movw	r0, #45200	; 0xb090
    cf38:	e3401002 	movt	r1, #2
    cf3c:	e3400002 	movt	r0, #2
    cf40:	e3a02033 	mov	r2, #51	; 0x33
    cf44:	eb005f14 	bl	24b9c <assertion_failed>
    cf48:	eaffffd8 	b	ceb0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)+0x4c>
    cf4c:	0002b058 	.word	0x0002b058

0000cf50 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    cf50:	e92d4070 	push	{r4, r5, r6, lr}
    cf54:	e1a06000 	mov	r6, r0
    cf58:	e24dd008 	sub	sp, sp, #8
    cf5c:	e3a00010 	mov	r0, #16
    cf60:	e1a05001 	mov	r5, r1
    cf64:	eb005400 	bl	21f6c <operator new(unsigned int)>
    cf68:	e1a04000 	mov	r4, r0
    cf6c:	eb006416 	bl	25fcc <CString::CString()>
    cf70:	e3550000 	cmp	r5, #0
    cf74:	0a00001e 	beq	cff4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xa4>
    cf78:	e3550001 	cmp	r5, #1
    cf7c:	0a00000c 	beq	cfb4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x64>
    cf80:	e30b1070 	movw	r1, #45168	; 0xb070
    cf84:	e30b0130 	movw	r0, #45360	; 0xb130
    cf88:	e3401002 	movt	r1, #2
    cf8c:	e3400002 	movt	r0, #2
    cf90:	e30021a1 	movw	r2, #417	; 0x1a1
    cf94:	eb005f00 	bl	24b9c <assertion_failed>
    cf98:	e30b10e8 	movw	r1, #45288	; 0xb0e8
    cf9c:	e1a00004 	mov	r0, r4
    cfa0:	e3401002 	movt	r1, #2
    cfa4:	eb006425 	bl	26040 <CString::operator=(char const*)>
    cfa8:	e1a00004 	mov	r0, r4
    cfac:	e28dd008 	add	sp, sp, #8
    cfb0:	e8bd8070 	pop	{r4, r5, r6, pc}
    cfb4:	e5961018 	ldr	r1, [r6, #24]
    cfb8:	e3510000 	cmp	r1, #0
    cfbc:	0a000020 	beq	d044 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf4>
    cfc0:	e5d12004 	ldrb	r2, [r1, #4]
    cfc4:	e2423001 	sub	r3, r2, #1
    cfc8:	e6ef3073 	uxtb	r3, r3
    cfcc:	e35300fd 	cmp	r3, #253	; 0xfd
    cfd0:	8afffff0 	bhi	cf98 <CUSBDevice::GetName(TDeviceNameSelector) const+0x48>
    cfd4:	e5d1c006 	ldrb	ip, [r1, #6]
    cfd8:	e1a00004 	mov	r0, r4
    cfdc:	e5d13005 	ldrb	r3, [r1, #5]
    cfe0:	e30b10dc 	movw	r1, #45276	; 0xb0dc
    cfe4:	e3401002 	movt	r1, #2
    cfe8:	e58dc000 	str	ip, [sp]
    cfec:	eb006755 	bl	26d48 <CString::Format(char const*, ...)>
    cff0:	eaffffec 	b	cfa8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x58>
    cff4:	e5962018 	ldr	r2, [r6, #24]
    cff8:	e3520000 	cmp	r2, #0
    cffc:	0a000008 	beq	d024 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd4>
    d000:	e1d230ba 	ldrh	r3, [r2, #10]
    d004:	e1a00004 	mov	r0, r4
    d008:	e1d220b8 	ldrh	r2, [r2, #8]
    d00c:	e30b10d0 	movw	r1, #45264	; 0xb0d0
    d010:	e3401002 	movt	r1, #2
    d014:	eb00674b 	bl	26d48 <CString::Format(char const*, ...)>
    d018:	e1a00004 	mov	r0, r4
    d01c:	e28dd008 	add	sp, sp, #8
    d020:	e8bd8070 	pop	{r4, r5, r6, pc}
    d024:	e300218d 	movw	r2, #397	; 0x18d
    d028:	e30b1070 	movw	r1, #45168	; 0xb070
    d02c:	e30b00bc 	movw	r0, #45244	; 0xb0bc
    d030:	e3401002 	movt	r1, #2
    d034:	e3400002 	movt	r0, #2
    d038:	eb005ed7 	bl	24b9c <assertion_failed>
    d03c:	e5962018 	ldr	r2, [r6, #24]
    d040:	eaffffee 	b	d000 <CUSBDevice::GetName(TDeviceNameSelector) const+0xb0>
    d044:	e30b1070 	movw	r1, #45168	; 0xb070
    d048:	e30b00bc 	movw	r0, #45244	; 0xb0bc
    d04c:	e3401002 	movt	r1, #2
    d050:	e3400002 	movt	r0, #2
    d054:	e3a02f65 	mov	r2, #404	; 0x194
    d058:	eb005ecf 	bl	24b9c <assertion_failed>
    d05c:	e5961018 	ldr	r1, [r6, #24]
    d060:	eaffffd6 	b	cfc0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x70>

0000d064 <CUSBDevice::GetNames() const>:
    d064:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d068:	e1a0a000 	mov	sl, r0
    d06c:	e3a00010 	mov	r0, #16
    d070:	e30b70e8 	movw	r7, #45288	; 0xb0e8
    d074:	eb0053bc 	bl	21f6c <operator new(unsigned int)>
    d078:	e30b80fc 	movw	r8, #45308	; 0xb0fc
    d07c:	e30b9070 	movw	r9, #45168	; 0xb070
    d080:	e3407002 	movt	r7, #2
    d084:	e3408002 	movt	r8, #2
    d088:	e3409002 	movt	r9, #2
    d08c:	e3a04000 	mov	r4, #0
    d090:	e1a06000 	mov	r6, r0
    d094:	eb0063cc 	bl	25fcc <CString::CString()>
    d098:	e6ef1074 	uxtb	r1, r4
    d09c:	e1a0000a 	mov	r0, sl
    d0a0:	ebffffaa 	bl	cf50 <CUSBDevice::GetName(TDeviceNameSelector) const>
    d0a4:	e2505000 	subs	r5, r0, #0
    d0a8:	0a000029 	beq	d154 <CUSBDevice::GetNames() const+0xf0>
    d0ac:	e1a01007 	mov	r1, r7
    d0b0:	eb006418 	bl	26118 <CString::Compare(char const*) const>
    d0b4:	e3500000 	cmp	r0, #0
    d0b8:	1a000010 	bne	d100 <CUSBDevice::GetNames() const+0x9c>
    d0bc:	e5953000 	ldr	r3, [r5]
    d0c0:	e1a00005 	mov	r0, r5
    d0c4:	e5933004 	ldr	r3, [r3, #4]
    d0c8:	e12fff33 	blx	r3
    d0cc:	e2844001 	add	r4, r4, #1
    d0d0:	e3540002 	cmp	r4, #2
    d0d4:	1affffef 	bne	d098 <CUSBDevice::GetNames() const+0x34>
    d0d8:	e1a00006 	mov	r0, r6
    d0dc:	eb0063e8 	bl	26084 <CString::GetLength() const>
    d0e0:	e3500000 	cmp	r0, #0
    d0e4:	1a000003 	bne	d0f8 <CUSBDevice::GetNames() const+0x94>
    d0e8:	e30b10e8 	movw	r1, #45288	; 0xb0e8
    d0ec:	e1a00006 	mov	r0, r6
    d0f0:	e3401002 	movt	r1, #2
    d0f4:	eb0063d1 	bl	26040 <CString::operator=(char const*)>
    d0f8:	e1a00006 	mov	r0, r6
    d0fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d100:	e1a00006 	mov	r0, r6
    d104:	eb0063de 	bl	26084 <CString::GetLength() const>
    d108:	e3500000 	cmp	r0, #0
    d10c:	0a00000a 	beq	d13c <CUSBDevice::GetNames() const+0xd8>
    d110:	e1a01008 	mov	r1, r8
    d114:	e1a00006 	mov	r0, r6
    d118:	eb0063dd 	bl	26094 <CString::Append(char const*)>
    d11c:	e1a00005 	mov	r0, r5
    d120:	eb0063c0 	bl	26028 <CString::operator char const*() const>
    d124:	e1a01000 	mov	r1, r0
    d128:	e1a00006 	mov	r0, r6
    d12c:	eb0063d8 	bl	26094 <CString::Append(char const*)>
    d130:	e3550000 	cmp	r5, #0
    d134:	0affffe4 	beq	d0cc <CUSBDevice::GetNames() const+0x68>
    d138:	eaffffdf 	b	d0bc <CUSBDevice::GetNames() const+0x58>
    d13c:	e1a00005 	mov	r0, r5
    d140:	eb0063b8 	bl	26028 <CString::operator char const*() const>
    d144:	e1a01000 	mov	r1, r0
    d148:	e1a00006 	mov	r0, r6
    d14c:	eb0063d0 	bl	26094 <CString::Append(char const*)>
    d150:	eaffffd9 	b	d0bc <CUSBDevice::GetNames() const+0x58>
    d154:	e30021b2 	movw	r2, #434	; 0x1b2
    d158:	e1a01009 	mov	r1, r9
    d15c:	e30b00f0 	movw	r0, #45296	; 0xb0f0
    d160:	e3400002 	movt	r0, #2
    d164:	eb005e8c 	bl	24b9c <assertion_failed>
    d168:	e1a01007 	mov	r1, r7
    d16c:	e1a00005 	mov	r0, r5
    d170:	eb0063e8 	bl	26118 <CString::Compare(char const*) const>
    d174:	e3500000 	cmp	r0, #0
    d178:	0affffd3 	beq	d0cc <CUSBDevice::GetNames() const+0x68>
    d17c:	e1a00006 	mov	r0, r6
    d180:	eb0063bf 	bl	26084 <CString::GetLength() const>
    d184:	e3500000 	cmp	r0, #0
    d188:	1affffe0 	bne	d110 <CUSBDevice::GetNames() const+0xac>
    d18c:	eb0063a5 	bl	26028 <CString::operator char const*() const>
    d190:	e1a01000 	mov	r1, r0
    d194:	e1a00006 	mov	r0, r6
    d198:	eb0063bd 	bl	26094 <CString::Append(char const*)>
    d19c:	eaffffca 	b	d0cc <CUSBDevice::GetNames() const+0x68>

0000d1a0 <CUSBDevice::SetAddress(unsigned char)>:
    d1a0:	e351007f 	cmp	r1, #127	; 0x7f
    d1a4:	e92d4070 	push	{r4, r5, r6, lr}
    d1a8:	e1a04001 	mov	r4, r1
    d1ac:	e1a05000 	mov	r5, r0
    d1b0:	da000005 	ble	d1cc <CUSBDevice::SetAddress(unsigned char)+0x2c>
    d1b4:	e30b1070 	movw	r1, #45168	; 0xb070
    d1b8:	e30b0100 	movw	r0, #45312	; 0xb100
    d1bc:	e3401002 	movt	r1, #2
    d1c0:	e3400002 	movt	r0, #2
    d1c4:	e30021cb 	movw	r2, #459	; 0x1cb
    d1c8:	eb005e73 	bl	24b9c <assertion_failed>
    d1cc:	e5c54008 	strb	r4, [r5, #8]
    d1d0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d1d4 <CUSBDevice::GetAddress() const>:
    d1d4:	e5d00008 	ldrb	r0, [r0, #8]
    d1d8:	e12fff1e 	bx	lr

0000d1dc <CUSBDevice::GetSpeed() const>:
    d1dc:	e5d00009 	ldrb	r0, [r0, #9]
    d1e0:	e12fff1e 	bx	lr

0000d1e4 <CUSBDevice::IsSplit() const>:
    d1e4:	e5900010 	ldr	r0, [r0, #16]
    d1e8:	e12fff1e 	bx	lr

0000d1ec <CUSBDevice::GetHubAddress() const>:
    d1ec:	e5d00014 	ldrb	r0, [r0, #20]
    d1f0:	e12fff1e 	bx	lr

0000d1f4 <CUSBDevice::GetHubPortNumber() const>:
    d1f4:	e5d00015 	ldrb	r0, [r0, #21]
    d1f8:	e12fff1e 	bx	lr

0000d1fc <CUSBDevice::GetEndpoint0() const>:
    d1fc:	e590300c 	ldr	r3, [r0, #12]
    d200:	e3530000 	cmp	r3, #0
    d204:	0a000001 	beq	d210 <CUSBDevice::GetEndpoint0() const+0x14>
    d208:	e1a00003 	mov	r0, r3
    d20c:	e12fff1e 	bx	lr
    d210:	e92d4010 	push	{r4, lr}
    d214:	e3a02f7b 	mov	r2, #492	; 0x1ec
    d218:	e1a04000 	mov	r4, r0
    d21c:	e30b1070 	movw	r1, #45168	; 0xb070
    d220:	e30b0120 	movw	r0, #45344	; 0xb120
    d224:	e3401002 	movt	r1, #2
    d228:	e3400002 	movt	r0, #2
    d22c:	eb005e5a 	bl	24b9c <assertion_failed>
    d230:	e594300c 	ldr	r3, [r4, #12]
    d234:	e1a00003 	mov	r0, r3
    d238:	e8bd8010 	pop	{r4, pc}

0000d23c <CUSBDevice::GetHost() const>:
    d23c:	e5903004 	ldr	r3, [r0, #4]
    d240:	e3530000 	cmp	r3, #0
    d244:	0a000001 	beq	d250 <CUSBDevice::GetHost() const+0x14>
    d248:	e1a00003 	mov	r0, r3
    d24c:	e12fff1e 	bx	lr
    d250:	e92d4010 	push	{r4, lr}
    d254:	e30021f2 	movw	r2, #498	; 0x1f2
    d258:	e1a04000 	mov	r4, r0
    d25c:	e30b1070 	movw	r1, #45168	; 0xb070
    d260:	e30b0080 	movw	r0, #45184	; 0xb080
    d264:	e3401002 	movt	r1, #2
    d268:	e3400002 	movt	r0, #2
    d26c:	eb005e4a 	bl	24b9c <assertion_failed>
    d270:	e5943004 	ldr	r3, [r4, #4]
    d274:	e1a00003 	mov	r0, r3
    d278:	e8bd8010 	pop	{r4, pc}

0000d27c <CUSBDevice::GetDeviceDescriptor() const>:
    d27c:	e5903018 	ldr	r3, [r0, #24]
    d280:	e3530000 	cmp	r3, #0
    d284:	0a000001 	beq	d290 <CUSBDevice::GetDeviceDescriptor() const+0x14>
    d288:	e1a00003 	mov	r0, r3
    d28c:	e12fff1e 	bx	lr
    d290:	e92d4010 	push	{r4, lr}
    d294:	e3a02f7e 	mov	r2, #504	; 0x1f8
    d298:	e1a04000 	mov	r4, r0
    d29c:	e30b1070 	movw	r1, #45168	; 0xb070
    d2a0:	e30b00bc 	movw	r0, #45244	; 0xb0bc
    d2a4:	e3401002 	movt	r1, #2
    d2a8:	e3400002 	movt	r0, #2
    d2ac:	eb005e3a 	bl	24b9c <assertion_failed>
    d2b0:	e5943018 	ldr	r3, [r4, #24]
    d2b4:	e1a00003 	mov	r0, r3
    d2b8:	e8bd8010 	pop	{r4, pc}

0000d2bc <CUSBDevice::GetConfigurationDescriptor() const>:
    d2bc:	e590301c 	ldr	r3, [r0, #28]
    d2c0:	e3530000 	cmp	r3, #0
    d2c4:	0a000001 	beq	d2d0 <CUSBDevice::GetConfigurationDescriptor() const+0x14>
    d2c8:	e1a00003 	mov	r0, r3
    d2cc:	e12fff1e 	bx	lr
    d2d0:	e92d4010 	push	{r4, lr}
    d2d4:	e30021fe 	movw	r2, #510	; 0x1fe
    d2d8:	e1a04000 	mov	r4, r0
    d2dc:	e30b1070 	movw	r1, #45168	; 0xb070
    d2e0:	e30b0134 	movw	r0, #45364	; 0xb134
    d2e4:	e3401002 	movt	r1, #2
    d2e8:	e3400002 	movt	r0, #2
    d2ec:	eb005e2a 	bl	24b9c <assertion_failed>
    d2f0:	e594301c 	ldr	r3, [r4, #28]
    d2f4:	e1a00003 	mov	r0, r3
    d2f8:	e8bd8010 	pop	{r4, pc}

0000d2fc <CUSBDevice::GetDescriptor(unsigned char)>:
    d2fc:	e92d4070 	push	{r4, r5, r6, lr}
    d300:	e1a04000 	mov	r4, r0
    d304:	e5900020 	ldr	r0, [r0, #32]
    d308:	e1a05001 	mov	r5, r1
    d30c:	e3500000 	cmp	r0, #0
    d310:	0a000002 	beq	d320 <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    d314:	e1a01005 	mov	r1, r5
    d318:	e8bd4070 	pop	{r4, r5, r6, lr}
    d31c:	ea001a7e 	b	13d1c <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d320:	e30b1070 	movw	r1, #45168	; 0xb070
    d324:	e30b0148 	movw	r0, #45384	; 0xb148
    d328:	e3401002 	movt	r1, #2
    d32c:	e3400002 	movt	r0, #2
    d330:	e3a02f81 	mov	r2, #516	; 0x204
    d334:	eb005e18 	bl	24b9c <assertion_failed>
    d338:	e5940020 	ldr	r0, [r4, #32]
    d33c:	e1a01005 	mov	r1, r5
    d340:	e8bd4070 	pop	{r4, r5, r6, lr}
    d344:	ea001a74 	b	13d1c <CUSBConfigurationParser::GetDescriptor(unsigned char)>

0000d348 <CUSBDevice::ConfigurationError(char const*) const>:
    d348:	e92d4070 	push	{r4, r5, r6, lr}
    d34c:	e1a04000 	mov	r4, r0
    d350:	e5900020 	ldr	r0, [r0, #32]
    d354:	e1a05001 	mov	r5, r1
    d358:	e3500000 	cmp	r0, #0
    d35c:	0a000002 	beq	d36c <CUSBDevice::ConfigurationError(char const*) const+0x24>
    d360:	e1a01005 	mov	r1, r5
    d364:	e8bd4070 	pop	{r4, r5, r6, lr}
    d368:	ea001aba 	b	13e58 <CUSBConfigurationParser::Error(char const*) const>
    d36c:	e30b1070 	movw	r1, #45168	; 0xb070
    d370:	e30b0148 	movw	r0, #45384	; 0xb148
    d374:	e3401002 	movt	r1, #2
    d378:	e3400002 	movt	r0, #2
    d37c:	e300220a 	movw	r2, #522	; 0x20a
    d380:	eb005e05 	bl	24b9c <assertion_failed>
    d384:	e5940020 	ldr	r0, [r4, #32]
    d388:	e1a01005 	mov	r1, r5
    d38c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d390:	ea001ab0 	b	13e58 <CUSBConfigurationParser::Error(char const*) const>

0000d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    d394:	e92d000c 	push	{r2, r3}
    d398:	e92d4070 	push	{r4, r5, r6, lr}
    d39c:	e24dd020 	sub	sp, sp, #32
    d3a0:	e1a05000 	mov	r5, r0
    d3a4:	e1a06001 	mov	r6, r1
    d3a8:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    d3ac:	e3540000 	cmp	r4, #0
    d3b0:	0a00001c 	beq	d428 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x94>
    d3b4:	e28d0010 	add	r0, sp, #16
    d3b8:	eb006303 	bl	25fcc <CString::CString()>
    d3bc:	e5d5c015 	ldrb	ip, [r5, #21]
    d3c0:	e5d53014 	ldrb	r3, [r5, #20]
    d3c4:	e28d0010 	add	r0, sp, #16
    d3c8:	e59f2074 	ldr	r2, [pc, #116]	; d444 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xb0>
    d3cc:	e30b1170 	movw	r1, #45424	; 0xb170
    d3d0:	e58dc000 	str	ip, [sp]
    d3d4:	e3401002 	movt	r1, #2
    d3d8:	eb00665a 	bl	26d48 <CString::Format(char const*, ...)>
    d3dc:	e28d3034 	add	r3, sp, #52	; 0x34
    d3e0:	e58d300c 	str	r3, [sp, #12]
    d3e4:	eb005f71 	bl	251b0 <CLogger::Get()>
    d3e8:	e1a05000 	mov	r5, r0
    d3ec:	e28d0010 	add	r0, sp, #16
    d3f0:	eb00630c 	bl	26028 <CString::operator char const*() const>
    d3f4:	e59d100c 	ldr	r1, [sp, #12]
    d3f8:	e1a03004 	mov	r3, r4
    d3fc:	e1a02006 	mov	r2, r6
    d400:	e58d1000 	str	r1, [sp]
    d404:	e1a01000 	mov	r1, r0
    d408:	e1a00005 	mov	r0, r5
    d40c:	eb005fc3 	bl	25320 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d410:	e28d0010 	add	r0, sp, #16
    d414:	eb0062b9 	bl	25f00 <CString::~CString()>
    d418:	e28dd020 	add	sp, sp, #32
    d41c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d420:	e28dd008 	add	sp, sp, #8
    d424:	e12fff1e 	bx	lr
    d428:	e30b1070 	movw	r1, #45168	; 0xb070
    d42c:	e30b0160 	movw	r0, #45408	; 0xb160
    d430:	e3401002 	movt	r1, #2
    d434:	e3400002 	movt	r0, #2
    d438:	e3a02e21 	mov	r2, #528	; 0x210
    d43c:	eb005dd6 	bl	24b9c <assertion_failed>
    d440:	eaffffdb 	b	d3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x20>
    d444:	0002b068 	.word	0x0002b068

0000d448 <CUSBDevice::Initialize()>:
    d448:	e5903018 	ldr	r3, [r0, #24]
    d44c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d450:	e3530000 	cmp	r3, #0
    d454:	e24dd014 	sub	sp, sp, #20
    d458:	e1a04000 	mov	r4, r0
    d45c:	0a000005 	beq	d478 <CUSBDevice::Initialize()+0x30>
    d460:	e30b1070 	movw	r1, #45168	; 0xb070
    d464:	e30b0178 	movw	r0, #45432	; 0xb178
    d468:	e3401002 	movt	r1, #2
    d46c:	e3400002 	movt	r0, #2
    d470:	e3a02061 	mov	r2, #97	; 0x61
    d474:	eb005dc8 	bl	24b9c <assertion_failed>
    d478:	e3a00012 	mov	r0, #18
    d47c:	eb0052ba 	bl	21f6c <operator new(unsigned int)>
    d480:	e5943004 	ldr	r3, [r4, #4]
    d484:	e3530000 	cmp	r3, #0
    d488:	e5840018 	str	r0, [r4, #24]
    d48c:	0a000086 	beq	d6ac <CUSBDevice::Initialize()+0x264>
    d490:	e594100c 	ldr	r1, [r4, #12]
    d494:	e3510000 	cmp	r1, #0
    d498:	0a00008a 	beq	d6c8 <CUSBDevice::Initialize()+0x280>
    d49c:	e5942018 	ldr	r2, [r4, #24]
    d4a0:	e3a05000 	mov	r5, #0
    d4a4:	e5940004 	ldr	r0, [r4, #4]
    d4a8:	e3a0c008 	mov	ip, #8
    d4ac:	e58d500c 	str	r5, [sp, #12]
    d4b0:	e1a03005 	mov	r3, r5
    d4b4:	e58d2000 	str	r2, [sp]
    d4b8:	e3a06080 	mov	r6, #128	; 0x80
    d4bc:	e3a02001 	mov	r2, #1
    d4c0:	e58d6008 	str	r6, [sp, #8]
    d4c4:	e58dc004 	str	ip, [sp, #4]
    d4c8:	eb000352 	bl	e218 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d4cc:	e3500008 	cmp	r0, #8
    d4d0:	1a000014 	bne	d528 <CUSBDevice::Initialize()+0xe0>
    d4d4:	e5943018 	ldr	r3, [r4, #24]
    d4d8:	e5d37000 	ldrb	r7, [r3]
    d4dc:	e3570012 	cmp	r7, #18
    d4e0:	1a000002 	bne	d4f0 <CUSBDevice::Initialize()+0xa8>
    d4e4:	e5d38001 	ldrb	r8, [r3, #1]
    d4e8:	e3580001 	cmp	r8, #1
    d4ec:	0a00001a 	beq	d55c <CUSBDevice::Initialize()+0x114>
    d4f0:	e3a01001 	mov	r1, #1
    d4f4:	e1a00004 	mov	r0, r4
    d4f8:	e30b21b4 	movw	r2, #45492	; 0xb1b4
    d4fc:	e3402002 	movt	r2, #2
    d500:	ebffffa3 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d504:	e3a01012 	mov	r1, #18
    d508:	e5940018 	ldr	r0, [r4, #24]
    d50c:	eb00529a 	bl	21f7c <operator delete(void*, unsigned int)>
    d510:	e3a03000 	mov	r3, #0
    d514:	e1a06003 	mov	r6, r3
    d518:	e5843018 	str	r3, [r4, #24]
    d51c:	e1a00006 	mov	r0, r6
    d520:	e28dd014 	add	sp, sp, #20
    d524:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d528:	e30b218c 	movw	r2, #45452	; 0xb18c
    d52c:	e3402002 	movt	r2, #2
    d530:	e3a01001 	mov	r1, #1
    d534:	e1a00004 	mov	r0, r4
    d538:	ebffff95 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d53c:	e5940018 	ldr	r0, [r4, #24]
    d540:	e3a01012 	mov	r1, #18
    d544:	e1a06005 	mov	r6, r5
    d548:	eb00528b 	bl	21f7c <operator delete(void*, unsigned int)>
    d54c:	e1a00006 	mov	r0, r6
    d550:	e5845018 	str	r5, [r4, #24]
    d554:	e28dd014 	add	sp, sp, #20
    d558:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d55c:	e5d31007 	ldrb	r1, [r3, #7]
    d560:	e594000c 	ldr	r0, [r4, #12]
    d564:	eb000291 	bl	dfb0 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    d568:	e594c018 	ldr	ip, [r4, #24]
    d56c:	e594100c 	ldr	r1, [r4, #12]
    d570:	e1a03005 	mov	r3, r5
    d574:	e5940004 	ldr	r0, [r4, #4]
    d578:	e1a02008 	mov	r2, r8
    d57c:	e58d500c 	str	r5, [sp, #12]
    d580:	e58d6008 	str	r6, [sp, #8]
    d584:	e58d7004 	str	r7, [sp, #4]
    d588:	e58dc000 	str	ip, [sp]
    d58c:	eb000321 	bl	e218 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d590:	e3500012 	cmp	r0, #18
    d594:	1a000053 	bne	d6e8 <CUSBDevice::Initialize()+0x2a0>
    d598:	e3012a08 	movw	r2, #6664	; 0x1a08
    d59c:	e3402003 	movt	r2, #3
    d5a0:	e5d27000 	ldrb	r7, [r2]
    d5a4:	e357007f 	cmp	r7, #127	; 0x7f
    d5a8:	e2873001 	add	r3, r7, #1
    d5ac:	e5c23000 	strb	r3, [r2]
    d5b0:	ca000051 	bgt	d6fc <CUSBDevice::Initialize()+0x2b4>
    d5b4:	e1a02007 	mov	r2, r7
    d5b8:	e594100c 	ldr	r1, [r4, #12]
    d5bc:	e5940004 	ldr	r0, [r4, #4]
    d5c0:	eb000321 	bl	e24c <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    d5c4:	e2506000 	subs	r6, r0, #0
    d5c8:	0a00005d 	beq	d744 <CUSBDevice::Initialize()+0x2fc>
    d5cc:	e594301c 	ldr	r3, [r4, #28]
    d5d0:	e5c47008 	strb	r7, [r4, #8]
    d5d4:	e3530000 	cmp	r3, #0
    d5d8:	0a000005 	beq	d5f4 <CUSBDevice::Initialize()+0x1ac>
    d5dc:	e30b1070 	movw	r1, #45168	; 0xb070
    d5e0:	e30b021c 	movw	r0, #45596	; 0xb21c
    d5e4:	e3401002 	movt	r1, #2
    d5e8:	e3400002 	movt	r0, #2
    d5ec:	e3a020a5 	mov	r2, #165	; 0xa5
    d5f0:	eb005d69 	bl	24b9c <assertion_failed>
    d5f4:	e3a00009 	mov	r0, #9
    d5f8:	e3a07009 	mov	r7, #9
    d5fc:	eb00525a 	bl	21f6c <operator new(unsigned int)>
    d600:	e5942018 	ldr	r2, [r4, #24]
    d604:	e3001525 	movw	r1, #1317	; 0x525
    d608:	e3a05000 	mov	r5, #0
    d60c:	e3a08080 	mov	r8, #128	; 0x80
    d610:	e584001c 	str	r0, [r4, #28]
    d614:	e1a03000 	mov	r3, r0
    d618:	e1d200b8 	ldrh	r0, [r2, #8]
    d61c:	e1500001 	cmp	r0, r1
    d620:	e594100c 	ldr	r1, [r4, #12]
    d624:	e5940004 	ldr	r0, [r4, #4]
    d628:	01d260ba 	ldrheq	r6, [r2, #10]
    d62c:	030a24a2 	movweq	r2, #42146	; 0xa4a2
    d630:	13a06000 	movne	r6, #0
    d634:	e58d3000 	str	r3, [sp]
    d638:	00466002 	subeq	r6, r6, r2
    d63c:	e58d500c 	str	r5, [sp, #12]
    d640:	016f6f16 	clzeq	r6, r6
    d644:	e98d0180 	stmib	sp, {r7, r8}
    d648:	e3a02002 	mov	r2, #2
    d64c:	01a062a6 	lsreq	r6, r6, #5
    d650:	e1a03006 	mov	r3, r6
    d654:	eb0002ef 	bl	e218 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d658:	e1500007 	cmp	r0, r7
    d65c:	1a00002d 	bne	d718 <CUSBDevice::Initialize()+0x2d0>
    d660:	e594001c 	ldr	r0, [r4, #28]
    d664:	e5d07000 	ldrb	r7, [r0]
    d668:	e3570009 	cmp	r7, #9
    d66c:	1a000002 	bne	d67c <CUSBDevice::Initialize()+0x234>
    d670:	e5d09001 	ldrb	r9, [r0, #1]
    d674:	e3590002 	cmp	r9, #2
    d678:	0a000038 	beq	d760 <CUSBDevice::Initialize()+0x318>
    d67c:	e3a01001 	mov	r1, #1
    d680:	e1a00004 	mov	r0, r4
    d684:	e30b225c 	movw	r2, #45660	; 0xb25c
    d688:	e3402002 	movt	r2, #2
    d68c:	ebffff40 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d690:	e3a01009 	mov	r1, #9
    d694:	e594001c 	ldr	r0, [r4, #28]
    d698:	eb005237 	bl	21f7c <operator delete(void*, unsigned int)>
    d69c:	e3a03000 	mov	r3, #0
    d6a0:	e1a06003 	mov	r6, r3
    d6a4:	e584301c 	str	r3, [r4, #28]
    d6a8:	eaffff9b 	b	d51c <CUSBDevice::Initialize()+0xd4>
    d6ac:	e30b1070 	movw	r1, #45168	; 0xb070
    d6b0:	e30b0080 	movw	r0, #45184	; 0xb080
    d6b4:	e3401002 	movt	r1, #2
    d6b8:	e3400002 	movt	r0, #2
    d6bc:	e3a02065 	mov	r2, #101	; 0x65
    d6c0:	eb005d35 	bl	24b9c <assertion_failed>
    d6c4:	eaffff71 	b	d490 <CUSBDevice::Initialize()+0x48>
    d6c8:	e30b1070 	movw	r1, #45168	; 0xb070
    d6cc:	e30b0120 	movw	r0, #45344	; 0xb120
    d6d0:	e3401002 	movt	r1, #2
    d6d4:	e3400002 	movt	r0, #2
    d6d8:	e3a02066 	mov	r2, #102	; 0x66
    d6dc:	eb005d2e 	bl	24b9c <assertion_failed>
    d6e0:	e594100c 	ldr	r1, [r4, #12]
    d6e4:	eaffff6c 	b	d49c <CUSBDevice::Initialize()+0x54>
    d6e8:	e30b21d0 	movw	r2, #45520	; 0xb1d0
    d6ec:	e1a01008 	mov	r1, r8
    d6f0:	e1a00004 	mov	r0, r4
    d6f4:	e3402002 	movt	r2, #2
    d6f8:	eaffff8e 	b	d538 <CUSBDevice::Initialize()+0xf0>
    d6fc:	e1a01008 	mov	r1, r8
    d700:	e1a00004 	mov	r0, r4
    d704:	e30b21f0 	movw	r2, #45552	; 0xb1f0
    d708:	e3402002 	movt	r2, #2
    d70c:	e1a06005 	mov	r6, r5
    d710:	ebffff1f 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d714:	eaffff80 	b	d51c <CUSBDevice::Initialize()+0xd4>
    d718:	e30b2230 	movw	r2, #45616	; 0xb230
    d71c:	e3402002 	movt	r2, #2
    d720:	e3a01001 	mov	r1, #1
    d724:	e1a00004 	mov	r0, r4
    d728:	e1a06005 	mov	r6, r5
    d72c:	ebffff18 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d730:	e1a01007 	mov	r1, r7
    d734:	e594001c 	ldr	r0, [r4, #28]
    d738:	eb00520f 	bl	21f7c <operator delete(void*, unsigned int)>
    d73c:	e584501c 	str	r5, [r4, #28]
    d740:	eaffff75 	b	d51c <CUSBDevice::Initialize()+0xd4>
    d744:	e1a03007 	mov	r3, r7
    d748:	e1a01008 	mov	r1, r8
    d74c:	e1a00004 	mov	r0, r4
    d750:	e30b2204 	movw	r2, #45572	; 0xb204
    d754:	e3402002 	movt	r2, #2
    d758:	ebffff0d 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d75c:	eaffff6e 	b	d51c <CUSBDevice::Initialize()+0xd4>
    d760:	e1d0a0b2 	ldrh	sl, [r0, #2]
    d764:	e35a0c02 	cmp	sl, #512	; 0x200
    d768:	caffffc3 	bgt	d67c <CUSBDevice::Initialize()+0x234>
    d76c:	e1a01007 	mov	r1, r7
    d770:	eb005201 	bl	21f7c <operator delete(void*, unsigned int)>
    d774:	e1a0000a 	mov	r0, sl
    d778:	eb0051fc 	bl	21f70 <operator new[](unsigned int)>
    d77c:	e594c004 	ldr	ip, [r4, #4]
    d780:	e594100c 	ldr	r1, [r4, #12]
    d784:	e1a03006 	mov	r3, r6
    d788:	e1a02009 	mov	r2, r9
    d78c:	e584001c 	str	r0, [r4, #28]
    d790:	e58d0000 	str	r0, [sp]
    d794:	e1a0000c 	mov	r0, ip
    d798:	e58d500c 	str	r5, [sp, #12]
    d79c:	e58d8008 	str	r8, [sp, #8]
    d7a0:	e58da004 	str	sl, [sp, #4]
    d7a4:	eb00029b 	bl	e218 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d7a8:	e15a0000 	cmp	sl, r0
    d7ac:	1a0000a3 	bne	da40 <CUSBDevice::Initialize()+0x5f8>
    d7b0:	e5943020 	ldr	r3, [r4, #32]
    d7b4:	e3530000 	cmp	r3, #0
    d7b8:	0a000005 	beq	d7d4 <CUSBDevice::Initialize()+0x38c>
    d7bc:	e30b1070 	movw	r1, #45168	; 0xb070
    d7c0:	e30b02a4 	movw	r0, #45732	; 0xb2a4
    d7c4:	e3401002 	movt	r1, #2
    d7c8:	e3400002 	movt	r0, #2
    d7cc:	e3a020e3 	mov	r2, #227	; 0xe3
    d7d0:	eb005cf1 	bl	24b9c <assertion_failed>
    d7d4:	e3a0001c 	mov	r0, #28
    d7d8:	eb0051e3 	bl	21f6c <operator new(unsigned int)>
    d7dc:	e1a0200a 	mov	r2, sl
    d7e0:	e594101c 	ldr	r1, [r4, #28]
    d7e4:	e1a05000 	mov	r5, r0
    d7e8:	eb0018da 	bl	13b58 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    d7ec:	e5845020 	str	r5, [r4, #32]
    d7f0:	e1a00005 	mov	r0, r5
    d7f4:	eb001946 	bl	13d14 <CUSBConfigurationParser::IsValid() const>
    d7f8:	e2506000 	subs	r6, r0, #0
    d7fc:	e1a00004 	mov	r0, r4
    d800:	0a0000a2 	beq	da90 <CUSBDevice::Initialize()+0x648>
    d804:	ebfffe16 	bl	d064 <CUSBDevice::GetNames() const>
    d808:	e2505000 	subs	r5, r0, #0
    d80c:	0a0000c6 	beq	db2c <CUSBDevice::Initialize()+0x6e4>
    d810:	eb006204 	bl	26028 <CString::operator char const*() const>
    d814:	e30b22c8 	movw	r2, #45768	; 0xb2c8
    d818:	e3a01003 	mov	r1, #3
    d81c:	e3402002 	movt	r2, #2
    d820:	e1a03000 	mov	r3, r0
    d824:	e1a00004 	mov	r0, r4
    d828:	ebfffed9 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d82c:	e5953000 	ldr	r3, [r5]
    d830:	e1a00005 	mov	r0, r5
    d834:	e5933004 	ldr	r3, [r3, #4]
    d838:	e12fff33 	blx	r3
    d83c:	e3a05000 	mov	r5, #0
    d840:	e30ba344 	movw	sl, #45892	; 0xb344
    d844:	e30b80e8 	movw	r8, #45288	; 0xb0e8
    d848:	e30b9330 	movw	r9, #45872	; 0xb330
    d84c:	e340a002 	movt	sl, #2
    d850:	e3408002 	movt	r8, #2
    d854:	e3409002 	movt	r9, #2
    d858:	e1a06005 	mov	r6, r5
    d85c:	e3a01004 	mov	r1, #4
    d860:	e5940020 	ldr	r0, [r4, #32]
    d864:	eb00192c 	bl	13d1c <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d868:	e2507000 	subs	r7, r0, #0
    d86c:	0a00007e 	beq	da6c <CUSBDevice::Initialize()+0x624>
    d870:	e5d73002 	ldrb	r3, [r7, #2]
    d874:	e1550003 	cmp	r5, r3
    d878:	0a00000c 	beq	d8b0 <CUSBDevice::Initialize()+0x468>
    d87c:	e285b001 	add	fp, r5, #1
    d880:	e153000b 	cmp	r3, fp
    d884:	0a000009 	beq	d8b0 <CUSBDevice::Initialize()+0x468>
    d888:	e5d73003 	ldrb	r3, [r7, #3]
    d88c:	e30b22d8 	movw	r2, #45784	; 0xb2d8
    d890:	e3a01004 	mov	r1, #4
    d894:	e3402002 	movt	r2, #2
    d898:	e1a00004 	mov	r0, r4
    d89c:	ebfffebc 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d8a0:	e5d73002 	ldrb	r3, [r7, #2]
    d8a4:	e15b0003 	cmp	fp, r3
    d8a8:	06ef507b 	uxtbeq	r5, fp
    d8ac:	eaffffea 	b	d85c <CUSBDevice::Initialize()+0x414>
    d8b0:	e5943020 	ldr	r3, [r4, #32]
    d8b4:	e3530000 	cmp	r3, #0
    d8b8:	0a000064 	beq	da50 <CUSBDevice::Initialize()+0x608>
    d8bc:	e0847106 	add	r7, r4, r6, lsl #2
    d8c0:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    d8c4:	e3530000 	cmp	r3, #0
    d8c8:	0a000044 	beq	d9e0 <CUSBDevice::Initialize()+0x598>
    d8cc:	e3a02f45 	mov	r2, #276	; 0x114
    d8d0:	e30b1070 	movw	r1, #45168	; 0xb070
    d8d4:	e30b02f8 	movw	r0, #45816	; 0xb2f8
    d8d8:	e3401002 	movt	r1, #2
    d8dc:	e3400002 	movt	r0, #2
    d8e0:	eb005cad 	bl	24b9c <assertion_failed>
    d8e4:	e3a00010 	mov	r0, #16
    d8e8:	eb00519f 	bl	21f6c <operator new(unsigned int)>
    d8ec:	e5942020 	ldr	r2, [r4, #32]
    d8f0:	e1a01004 	mov	r1, r4
    d8f4:	e1a0b000 	mov	fp, r0
    d8f8:	eb00113c 	bl	11df0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    d8fc:	e1a0000b 	mov	r0, fp
    d900:	e587b024 	str	fp, [r7, #36]	; 0x24
    d904:	e5903000 	ldr	r3, [r0]
    d908:	e5933014 	ldr	r3, [r3, #20]
    d90c:	e12fff33 	blx	r3
    d910:	e3500000 	cmp	r0, #0
    d914:	0a000023 	beq	d9a8 <CUSBDevice::Initialize()+0x560>
    d918:	e3560000 	cmp	r6, #0
    d91c:	0a000038 	beq	da04 <CUSBDevice::Initialize()+0x5bc>
    d920:	e5970024 	ldr	r0, [r7, #36]	; 0x24
    d924:	eb0011a8 	bl	11fcc <CUSBFunction::GetInterfaceName() const>
    d928:	e250b000 	subs	fp, r0, #0
    d92c:	0a00008d 	beq	db68 <CUSBDevice::Initialize()+0x720>
    d930:	e1a01008 	mov	r1, r8
    d934:	eb0061f7 	bl	26118 <CString::Compare(char const*) const>
    d938:	e3500000 	cmp	r0, #0
    d93c:	0a00006d 	beq	daf8 <CUSBDevice::Initialize()+0x6b0>
    d940:	e1a0000b 	mov	r0, fp
    d944:	eb0061b7 	bl	26028 <CString::operator char const*() const>
    d948:	e1a02009 	mov	r2, r9
    d94c:	e3a01003 	mov	r1, #3
    d950:	e1a03000 	mov	r3, r0
    d954:	e1a00004 	mov	r0, r4
    d958:	ebfffe8d 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d95c:	e1a0100b 	mov	r1, fp
    d960:	e5970024 	ldr	r0, [r7, #36]	; 0x24
    d964:	eb00030f 	bl	e5a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    d968:	e1a0b000 	mov	fp, r0
    d96c:	e5970024 	ldr	r0, [r7, #36]	; 0x24
    d970:	e3500000 	cmp	r0, #0
    d974:	0a000002 	beq	d984 <CUSBDevice::Initialize()+0x53c>
    d978:	e5903000 	ldr	r3, [r0]
    d97c:	e5933004 	ldr	r3, [r3, #4]
    d980:	e12fff33 	blx	r3
    d984:	e35b0000 	cmp	fp, #0
    d988:	0a000043 	beq	da9c <CUSBDevice::Initialize()+0x654>
    d98c:	e2866001 	add	r6, r6, #1
    d990:	e587b024 	str	fp, [r7, #36]	; 0x24
    d994:	e356000a 	cmp	r6, #10
    d998:	0a000045 	beq	dab4 <CUSBDevice::Initialize()+0x66c>
    d99c:	e2855001 	add	r5, r5, #1
    d9a0:	e6ef5075 	uxtb	r5, r5
    d9a4:	eaffffac 	b	d85c <CUSBDevice::Initialize()+0x414>
    d9a8:	e1a00004 	mov	r0, r4
    d9ac:	e30b2314 	movw	r2, #45844	; 0xb314
    d9b0:	e3a01001 	mov	r1, #1
    d9b4:	e3402002 	movt	r2, #2
    d9b8:	ebfffe75 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d9bc:	e5970024 	ldr	r0, [r7, #36]	; 0x24
    d9c0:	e3500000 	cmp	r0, #0
    d9c4:	0a000002 	beq	d9d4 <CUSBDevice::Initialize()+0x58c>
    d9c8:	e5903000 	ldr	r3, [r0]
    d9cc:	e5933004 	ldr	r3, [r3, #4]
    d9d0:	e12fff33 	blx	r3
    d9d4:	e3a03000 	mov	r3, #0
    d9d8:	e5873024 	str	r3, [r7, #36]	; 0x24
    d9dc:	eaffff9e 	b	d85c <CUSBDevice::Initialize()+0x414>
    d9e0:	e3a00010 	mov	r0, #16
    d9e4:	eb005160 	bl	21f6c <operator new(unsigned int)>
    d9e8:	e5942020 	ldr	r2, [r4, #32]
    d9ec:	e1a01004 	mov	r1, r4
    d9f0:	e1a0b000 	mov	fp, r0
    d9f4:	eb0010fd 	bl	11df0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    d9f8:	e587b024 	str	fp, [r7, #36]	; 0x24
    d9fc:	e1a0000b 	mov	r0, fp
    da00:	eaffffbf 	b	d904 <CUSBDevice::Initialize()+0x4bc>
    da04:	e1a01006 	mov	r1, r6
    da08:	e1a00004 	mov	r0, r4
    da0c:	e594b024 	ldr	fp, [r4, #36]	; 0x24
    da10:	ebfffd4e 	bl	cf50 <CUSBDevice::GetName(TDeviceNameSelector) const>
    da14:	e1a01000 	mov	r1, r0
    da18:	e1a0000b 	mov	r0, fp
    da1c:	eb0002e1 	bl	e5a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    da20:	e250b000 	subs	fp, r0, #0
    da24:	0a000029 	beq	dad0 <CUSBDevice::Initialize()+0x688>
    da28:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    da2c:	e3500000 	cmp	r0, #0
    da30:	1affffd0 	bne	d978 <CUSBDevice::Initialize()+0x530>
    da34:	e584b024 	str	fp, [r4, #36]	; 0x24
    da38:	e3a06001 	mov	r6, #1
    da3c:	eaffffd6 	b	d99c <CUSBDevice::Initialize()+0x554>
    da40:	e30b2280 	movw	r2, #45696	; 0xb280
    da44:	e3a01001 	mov	r1, #1
    da48:	e3402002 	movt	r2, #2
    da4c:	eaffff34 	b	d724 <CUSBDevice::Initialize()+0x2dc>
    da50:	e30b1070 	movw	r1, #45168	; 0xb070
    da54:	e30b0148 	movw	r0, #45384	; 0xb148
    da58:	e3401002 	movt	r1, #2
    da5c:	e3400002 	movt	r0, #2
    da60:	e3002113 	movw	r2, #275	; 0x113
    da64:	eb005c4c 	bl	24b9c <assertion_failed>
    da68:	eaffff93 	b	d8bc <CUSBDevice::Initialize()+0x474>
    da6c:	e3560000 	cmp	r6, #0
    da70:	13a06001 	movne	r6, #1
    da74:	1afffea8 	bne	d51c <CUSBDevice::Initialize()+0xd4>
    da78:	e1a00004 	mov	r0, r4
    da7c:	e30b2380 	movw	r2, #45952	; 0xb380
    da80:	e3a01002 	mov	r1, #2
    da84:	e3402002 	movt	r2, #2
    da88:	ebfffe41 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    da8c:	eafffea2 	b	d51c <CUSBDevice::Initialize()+0xd4>
    da90:	e59f1100 	ldr	r1, [pc, #256]	; db98 <CUSBDevice::Initialize()+0x750>
    da94:	ebfffe2b 	bl	d348 <CUSBDevice::ConfigurationError(char const*) const>
    da98:	eafffe9f 	b	d51c <CUSBDevice::Initialize()+0xd4>
    da9c:	e587b024 	str	fp, [r7, #36]	; 0x24
    daa0:	e1a0200a 	mov	r2, sl
    daa4:	e3a01002 	mov	r1, #2
    daa8:	e1a00004 	mov	r0, r4
    daac:	ebfffe38 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dab0:	eaffff69 	b	d85c <CUSBDevice::Initialize()+0x414>
    dab4:	e1a00004 	mov	r0, r4
    dab8:	e30b2360 	movw	r2, #45920	; 0xb360
    dabc:	e3a01002 	mov	r1, #2
    dac0:	e3402002 	movt	r2, #2
    dac4:	ebfffe32 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dac8:	e3a06001 	mov	r6, #1
    dacc:	eafffe92 	b	d51c <CUSBDevice::Initialize()+0xd4>
    dad0:	e3a01001 	mov	r1, #1
    dad4:	e1a00004 	mov	r0, r4
    dad8:	e594b024 	ldr	fp, [r4, #36]	; 0x24
    dadc:	ebfffd1b 	bl	cf50 <CUSBDevice::GetName(TDeviceNameSelector) const>
    dae0:	e1a01000 	mov	r1, r0
    dae4:	e1a0000b 	mov	r0, fp
    dae8:	eb0002ae 	bl	e5a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    daec:	e250b000 	subs	fp, r0, #0
    daf0:	0affff8a 	beq	d920 <CUSBDevice::Initialize()+0x4d8>
    daf4:	eaffffcb 	b	da28 <CUSBDevice::Initialize()+0x5e0>
    daf8:	e59b3000 	ldr	r3, [fp]
    dafc:	e1a0000b 	mov	r0, fp
    db00:	e5933004 	ldr	r3, [r3, #4]
    db04:	e12fff33 	blx	r3
    db08:	e5970024 	ldr	r0, [r7, #36]	; 0x24
    db0c:	e3500000 	cmp	r0, #0
    db10:	0affffe2 	beq	daa0 <CUSBDevice::Initialize()+0x658>
    db14:	e5903000 	ldr	r3, [r0]
    db18:	e5933004 	ldr	r3, [r3, #4]
    db1c:	e12fff33 	blx	r3
    db20:	e3a03000 	mov	r3, #0
    db24:	e5873024 	str	r3, [r7, #36]	; 0x24
    db28:	eaffffdc 	b	daa0 <CUSBDevice::Initialize()+0x658>
    db2c:	e3a020ef 	mov	r2, #239	; 0xef
    db30:	e30b1070 	movw	r1, #45168	; 0xb070
    db34:	e30b02bc 	movw	r0, #45756	; 0xb2bc
    db38:	e3401002 	movt	r1, #2
    db3c:	e3400002 	movt	r0, #2
    db40:	eb005c15 	bl	24b9c <assertion_failed>
    db44:	e1a00005 	mov	r0, r5
    db48:	eb006136 	bl	26028 <CString::operator char const*() const>
    db4c:	e30b22c8 	movw	r2, #45768	; 0xb2c8
    db50:	e3a01003 	mov	r1, #3
    db54:	e3402002 	movt	r2, #2
    db58:	e1a03000 	mov	r3, r0
    db5c:	e1a00004 	mov	r0, r4
    db60:	ebfffe0b 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    db64:	eaffff34 	b	d83c <CUSBDevice::Initialize()+0x3f4>
    db68:	e3a02e13 	mov	r2, #304	; 0x130
    db6c:	e30b1070 	movw	r1, #45168	; 0xb070
    db70:	e30b00f0 	movw	r0, #45296	; 0xb0f0
    db74:	e3401002 	movt	r1, #2
    db78:	e3400002 	movt	r0, #2
    db7c:	eb005c06 	bl	24b9c <assertion_failed>
    db80:	e1a01008 	mov	r1, r8
    db84:	e1a0000b 	mov	r0, fp
    db88:	eb006162 	bl	26118 <CString::Compare(char const*) const>
    db8c:	e3500000 	cmp	r0, #0
    db90:	0affffdc 	beq	db08 <CUSBDevice::Initialize()+0x6c0>
    db94:	eaffff69 	b	d940 <CUSBDevice::Initialize()+0x4f8>
    db98:	0002b068 	.word	0x0002b068

0000db9c <CUSBDevice::Configure()>:
    db9c:	e5903004 	ldr	r3, [r0, #4]
    dba0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dba4:	e3530000 	cmp	r3, #0
    dba8:	e1a05000 	mov	r5, r0
    dbac:	0a00002f 	beq	dc70 <CUSBDevice::Configure()+0xd4>
    dbb0:	e595300c 	ldr	r3, [r5, #12]
    dbb4:	e3530000 	cmp	r3, #0
    dbb8:	0a000033 	beq	dc8c <CUSBDevice::Configure()+0xf0>
    dbbc:	e595601c 	ldr	r6, [r5, #28]
    dbc0:	e3560000 	cmp	r6, #0
    dbc4:	0a00001e 	beq	dc44 <CUSBDevice::Configure()+0xa8>
    dbc8:	e5d62005 	ldrb	r2, [r6, #5]
    dbcc:	e595100c 	ldr	r1, [r5, #12]
    dbd0:	e5950004 	ldr	r0, [r5, #4]
    dbd4:	eb0001af 	bl	e298 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    dbd8:	e2506000 	subs	r6, r0, #0
    dbdc:	0a00001a 	beq	dc4c <CUSBDevice::Configure()+0xb0>
    dbe0:	e3a06000 	mov	r6, #0
    dbe4:	e2854024 	add	r4, r5, #36	; 0x24
    dbe8:	e285504c 	add	r5, r5, #76	; 0x4c
    dbec:	e1a07006 	mov	r7, r6
    dbf0:	e5943000 	ldr	r3, [r4]
    dbf4:	e3530000 	cmp	r3, #0
    dbf8:	e1a00003 	mov	r0, r3
    dbfc:	0a00000d 	beq	dc38 <CUSBDevice::Configure()+0x9c>
    dc00:	e5933000 	ldr	r3, [r3]
    dc04:	e5933018 	ldr	r3, [r3, #24]
    dc08:	e12fff33 	blx	r3
    dc0c:	e3500000 	cmp	r0, #0
    dc10:	13a06001 	movne	r6, #1
    dc14:	1a000007 	bne	dc38 <CUSBDevice::Configure()+0x9c>
    dc18:	e5943000 	ldr	r3, [r4]
    dc1c:	e3530000 	cmp	r3, #0
    dc20:	e1a00003 	mov	r0, r3
    dc24:	0a000002 	beq	dc34 <CUSBDevice::Configure()+0x98>
    dc28:	e5933000 	ldr	r3, [r3]
    dc2c:	e5933004 	ldr	r3, [r3, #4]
    dc30:	e12fff33 	blx	r3
    dc34:	e5847000 	str	r7, [r4]
    dc38:	e2844004 	add	r4, r4, #4
    dc3c:	e1550004 	cmp	r5, r4
    dc40:	1affffea 	bne	dbf0 <CUSBDevice::Configure()+0x54>
    dc44:	e1a00006 	mov	r0, r6
    dc48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dc4c:	e595301c 	ldr	r3, [r5, #28]
    dc50:	e1a00005 	mov	r0, r5
    dc54:	e3a01001 	mov	r1, #1
    dc58:	e30b23a4 	movw	r2, #45988	; 0xb3a4
    dc5c:	e3402002 	movt	r2, #2
    dc60:	e5d33005 	ldrb	r3, [r3, #5]
    dc64:	ebfffdca 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dc68:	e1a00006 	mov	r0, r6
    dc6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dc70:	e30b1070 	movw	r1, #45168	; 0xb070
    dc74:	e30b0080 	movw	r0, #45184	; 0xb080
    dc78:	e3401002 	movt	r1, #2
    dc7c:	e3400002 	movt	r0, #2
    dc80:	e300215f 	movw	r2, #351	; 0x15f
    dc84:	eb005bc4 	bl	24b9c <assertion_failed>
    dc88:	eaffffc8 	b	dbb0 <CUSBDevice::Configure()+0x14>
    dc8c:	e30b1070 	movw	r1, #45168	; 0xb070
    dc90:	e30b0120 	movw	r0, #45344	; 0xb120
    dc94:	e3401002 	movt	r1, #2
    dc98:	e3400002 	movt	r0, #2
    dc9c:	e3a02e16 	mov	r2, #352	; 0x160
    dca0:	eb005bbd 	bl	24b9c <assertion_failed>
    dca4:	eaffffc4 	b	dbbc <CUSBDevice::Configure()+0x20>

0000dca8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    dca8:	e3510000 	cmp	r1, #0
    dcac:	e3a03008 	mov	r3, #8
    dcb0:	e92d4010 	push	{r4, lr}
    dcb4:	e3a02001 	mov	r2, #1
    dcb8:	e580300c 	str	r3, [r0, #12]
    dcbc:	e1a04000 	mov	r4, r0
    dcc0:	e3a03000 	mov	r3, #0
    dcc4:	e5801000 	str	r1, [r0]
    dcc8:	e5802010 	str	r2, [r0, #16]
    dccc:	e5c03004 	strb	r3, [r0, #4]
    dcd0:	e5c03005 	strb	r3, [r0, #5]
    dcd4:	e5803008 	str	r3, [r0, #8]
    dcd8:	e5c03014 	strb	r3, [r0, #20]
    dcdc:	0a000001 	beq	dce8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x40>
    dce0:	e1a00004 	mov	r0, r4
    dce4:	e8bd8010 	pop	{r4, pc}
    dce8:	e3a02020 	mov	r2, #32
    dcec:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    dcf0:	e30a0fd4 	movw	r0, #45012	; 0xafd4
    dcf4:	e3401002 	movt	r1, #2
    dcf8:	e3400002 	movt	r0, #2
    dcfc:	eb005ba6 	bl	24b9c <assertion_failed>
    dd00:	e1a00004 	mov	r0, r4
    dd04:	e8bd8010 	pop	{r4, pc}

0000dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    dd08:	e3510000 	cmp	r1, #0
    dd0c:	e3a03001 	mov	r3, #1
    dd10:	e92d4070 	push	{r4, r5, r6, lr}
    dd14:	e1a04000 	mov	r4, r0
    dd18:	e1a05002 	mov	r5, r2
    dd1c:	e5801000 	str	r1, [r0]
    dd20:	e5803010 	str	r3, [r0, #16]
    dd24:	0a00005f 	beq	dea8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a0>
    dd28:	e3550000 	cmp	r5, #0
    dd2c:	0a000056 	beq	de8c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x184>
    dd30:	e5d53000 	ldrb	r3, [r5]
    dd34:	e3530006 	cmp	r3, #6
    dd38:	9a00003b 	bls	de2c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x124>
    dd3c:	e5d53001 	ldrb	r3, [r5, #1]
    dd40:	e3530005 	cmp	r3, #5
    dd44:	0a000005 	beq	dd60 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x58>
    dd48:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    dd4c:	e30b0400 	movw	r0, #46080	; 0xb400
    dd50:	e3401002 	movt	r1, #2
    dd54:	e3400002 	movt	r0, #2
    dd58:	e3a0202b 	mov	r2, #43	; 0x2b
    dd5c:	eb005b8e 	bl	24b9c <assertion_failed>
    dd60:	e5d53003 	ldrb	r3, [r5, #3]
    dd64:	e2033003 	and	r3, r3, #3
    dd68:	e3530002 	cmp	r3, #2
    dd6c:	0a000022 	beq	ddfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xf4>
    dd70:	e3530003 	cmp	r3, #3
    dd74:	1a000018 	bne	dddc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd4>
    dd78:	e3a03002 	mov	r3, #2
    dd7c:	e3a06001 	mov	r6, #1
    dd80:	e5c43005 	strb	r3, [r4, #5]
    dd84:	e5c46014 	strb	r6, [r4, #20]
    dd88:	e5d53002 	ldrb	r3, [r5, #2]
    dd8c:	e203200f 	and	r2, r3, #15
    dd90:	e5c42004 	strb	r2, [r4, #4]
    dd94:	e1a033a3 	lsr	r3, r3, #7
    dd98:	e5843008 	str	r3, [r4, #8]
    dd9c:	e1d530b4 	ldrh	r3, [r5, #4]
    dda0:	e584300c 	str	r3, [r4, #12]
    dda4:	e5d55006 	ldrb	r5, [r5, #6]
    dda8:	e3550000 	cmp	r5, #0
    ddac:	0a000030 	beq	de74 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x16c>
    ddb0:	e5940000 	ldr	r0, [r4]
    ddb4:	ebfffd08 	bl	d1dc <CUSBDevice::GetSpeed() const>
    ddb8:	e3500002 	cmp	r0, #2
    ddbc:	0a000021 	beq	de48 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x140>
    ddc0:	e5845010 	str	r5, [r4, #16]
    ddc4:	e3550013 	cmp	r5, #19
    ddc8:	8a000009 	bhi	ddf4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xec>
    ddcc:	e3a03014 	mov	r3, #20
    ddd0:	e1a00004 	mov	r0, r4
    ddd4:	e5843010 	str	r3, [r4, #16]
    ddd8:	e8bd8070 	pop	{r4, r5, r6, pc}
    dddc:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    dde0:	e30b0130 	movw	r0, #45360	; 0xb130
    dde4:	e3401002 	movt	r1, #2
    dde8:	e3400002 	movt	r0, #2
    ddec:	e3a0203a 	mov	r2, #58	; 0x3a
    ddf0:	eb005b69 	bl	24b9c <assertion_failed>
    ddf4:	e1a00004 	mov	r0, r4
    ddf8:	e8bd8070 	pop	{r4, r5, r6, pc}
    ddfc:	e3a03001 	mov	r3, #1
    de00:	e5c43005 	strb	r3, [r4, #5]
    de04:	e5c43014 	strb	r3, [r4, #20]
    de08:	e1a00004 	mov	r0, r4
    de0c:	e5d53002 	ldrb	r3, [r5, #2]
    de10:	e203200f 	and	r2, r3, #15
    de14:	e5c42004 	strb	r2, [r4, #4]
    de18:	e1a033a3 	lsr	r3, r3, #7
    de1c:	e5843008 	str	r3, [r4, #8]
    de20:	e1d530b4 	ldrh	r3, [r5, #4]
    de24:	e584300c 	str	r3, [r4, #12]
    de28:	e8bd8070 	pop	{r4, r5, r6, pc}
    de2c:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    de30:	e30b03e0 	movw	r0, #46048	; 0xb3e0
    de34:	e3401002 	movt	r1, #2
    de38:	e3400002 	movt	r0, #2
    de3c:	e3a0202a 	mov	r2, #42	; 0x2a
    de40:	eb005b55 	bl	24b9c <assertion_failed>
    de44:	eaffffbc 	b	dd3c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x34>
    de48:	e3550010 	cmp	r5, #16
    de4c:	c3a03a01 	movgt	r3, #4096	; 0x1000
    de50:	c5843010 	strgt	r3, [r4, #16]
    de54:	caffffe6 	bgt	ddf4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xec>
    de58:	e2453001 	sub	r3, r5, #1
    de5c:	e1a05316 	lsl	r5, r6, r3
    de60:	e1a051a5 	lsr	r5, r5, #3
    de64:	e5845010 	str	r5, [r4, #16]
    de68:	e3550000 	cmp	r5, #0
    de6c:	0affffd6 	beq	ddcc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc4>
    de70:	eaffffd3 	b	ddc4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xbc>
    de74:	e5940000 	ldr	r0, [r4]
    de78:	ebfffcd7 	bl	d1dc <CUSBDevice::GetSpeed() const>
    de7c:	e3500002 	cmp	r0, #2
    de80:	11a05006 	movne	r5, r6
    de84:	1affffcd 	bne	ddc0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xb8>
    de88:	eaffffcf 	b	ddcc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc4>
    de8c:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    de90:	e30b03d4 	movw	r0, #46036	; 0xb3d4
    de94:	e3401002 	movt	r1, #2
    de98:	e3400002 	movt	r0, #2
    de9c:	e3a02029 	mov	r2, #41	; 0x29
    dea0:	eb005b3d 	bl	24b9c <assertion_failed>
    dea4:	eaffffa1 	b	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x28>
    dea8:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    deac:	e30a0fd4 	movw	r0, #45012	; 0xafd4
    deb0:	e3401002 	movt	r1, #2
    deb4:	e3400002 	movt	r0, #2
    deb8:	e3a02027 	mov	r2, #39	; 0x27
    debc:	eb005b36 	bl	24b9c <assertion_failed>
    dec0:	eaffff98 	b	dd28 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x20>

0000dec4 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)>:
    dec4:	e92d4070 	push	{r4, r5, r6, lr}
    dec8:	e2515000 	subs	r5, r1, #0
    decc:	e1a04000 	mov	r4, r0
    ded0:	e1a06002 	mov	r6, r2
    ded4:	0a000017 	beq	df38 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x74>
    ded8:	e3560000 	cmp	r6, #0
    dedc:	e5846000 	str	r6, [r4]
    dee0:	0a00000d 	beq	df1c <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x58>
    dee4:	e5d53004 	ldrb	r3, [r5, #4]
    dee8:	e1a00004 	mov	r0, r4
    deec:	e5c43004 	strb	r3, [r4, #4]
    def0:	e5d5e005 	ldrb	lr, [r5, #5]
    def4:	e595c008 	ldr	ip, [r5, #8]
    def8:	e595100c 	ldr	r1, [r5, #12]
    defc:	e5952010 	ldr	r2, [r5, #16]
    df00:	e5d53014 	ldrb	r3, [r5, #20]
    df04:	e5c4e005 	strb	lr, [r4, #5]
    df08:	e584c008 	str	ip, [r4, #8]
    df0c:	e584100c 	str	r1, [r4, #12]
    df10:	e5842010 	str	r2, [r4, #16]
    df14:	e5c43014 	strb	r3, [r4, #20]
    df18:	e8bd8070 	pop	{r4, r5, r6, pc}
    df1c:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    df20:	e30a0fd4 	movw	r0, #45012	; 0xafd4
    df24:	e3401002 	movt	r1, #2
    df28:	e3400002 	movt	r0, #2
    df2c:	e3a0206d 	mov	r2, #109	; 0x6d
    df30:	eb005b19 	bl	24b9c <assertion_failed>
    df34:	eaffffea 	b	dee4 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x20>
    df38:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    df3c:	e30b0430 	movw	r0, #46128	; 0xb430
    df40:	e3401002 	movt	r1, #2
    df44:	e3400002 	movt	r0, #2
    df48:	e3a0206a 	mov	r2, #106	; 0x6a
    df4c:	eb005b12 	bl	24b9c <assertion_failed>
    df50:	eaffffe0 	b	ded8 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x14>

0000df54 <CUSBEndpoint::~CUSBEndpoint()>:
    df54:	e12fff1e 	bx	lr

0000df58 <CUSBEndpoint::GetDevice() const>:
    df58:	e5903000 	ldr	r3, [r0]
    df5c:	e3530000 	cmp	r3, #0
    df60:	0a000001 	beq	df6c <CUSBEndpoint::GetDevice() const+0x14>
    df64:	e1a00003 	mov	r0, r3
    df68:	e12fff1e 	bx	lr
    df6c:	e92d4010 	push	{r4, lr}
    df70:	e3a0207e 	mov	r2, #126	; 0x7e
    df74:	e1a04000 	mov	r4, r0
    df78:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    df7c:	e30a0fd4 	movw	r0, #45012	; 0xafd4
    df80:	e3401002 	movt	r1, #2
    df84:	e3400002 	movt	r0, #2
    df88:	eb005b03 	bl	24b9c <assertion_failed>
    df8c:	e5943000 	ldr	r3, [r4]
    df90:	e1a00003 	mov	r0, r3
    df94:	e8bd8010 	pop	{r4, pc}

0000df98 <CUSBEndpoint::GetNumber() const>:
    df98:	e5d00004 	ldrb	r0, [r0, #4]
    df9c:	e12fff1e 	bx	lr

0000dfa0 <CUSBEndpoint::GetType() const>:
    dfa0:	e5d00005 	ldrb	r0, [r0, #5]
    dfa4:	e12fff1e 	bx	lr

0000dfa8 <CUSBEndpoint::IsDirectionIn() const>:
    dfa8:	e5900008 	ldr	r0, [r0, #8]
    dfac:	e12fff1e 	bx	lr

0000dfb0 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    dfb0:	e580100c 	str	r1, [r0, #12]
    dfb4:	e12fff1e 	bx	lr

0000dfb8 <CUSBEndpoint::GetMaxPacketSize() const>:
    dfb8:	e590000c 	ldr	r0, [r0, #12]
    dfbc:	e12fff1e 	bx	lr

0000dfc0 <CUSBEndpoint::GetInterval() const>:
    dfc0:	e5d03005 	ldrb	r3, [r0, #5]
    dfc4:	e92d4010 	push	{r4, lr}
    dfc8:	e3530002 	cmp	r3, #2
    dfcc:	e1a04000 	mov	r4, r0
    dfd0:	0a000005 	beq	dfec <CUSBEndpoint::GetInterval() const+0x2c>
    dfd4:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    dfd8:	e30b0440 	movw	r0, #46144	; 0xb440
    dfdc:	e3401002 	movt	r1, #2
    dfe0:	e3400002 	movt	r0, #2
    dfe4:	e3a0209d 	mov	r2, #157	; 0x9d
    dfe8:	eb005aeb 	bl	24b9c <assertion_failed>
    dfec:	e5940010 	ldr	r0, [r4, #16]
    dff0:	e8bd8010 	pop	{r4, pc}

0000dff4 <CUSBEndpoint::GetNextPID(int)>:
    dff4:	e3510000 	cmp	r1, #0
    dff8:	0a000004 	beq	e010 <CUSBEndpoint::GetNextPID(int)+0x1c>
    dffc:	e5d03005 	ldrb	r3, [r0, #5]
    e000:	e3530000 	cmp	r3, #0
    e004:	1a000003 	bne	e018 <CUSBEndpoint::GetNextPID(int)+0x24>
    e008:	e3a00002 	mov	r0, #2
    e00c:	e12fff1e 	bx	lr
    e010:	e5d00014 	ldrb	r0, [r0, #20]
    e014:	e12fff1e 	bx	lr
    e018:	e92d4010 	push	{r4, lr}
    e01c:	e3a020a6 	mov	r2, #166	; 0xa6
    e020:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    e024:	e30b0460 	movw	r0, #46176	; 0xb460
    e028:	e3401002 	movt	r1, #2
    e02c:	e3400002 	movt	r0, #2
    e030:	eb005ad9 	bl	24b9c <assertion_failed>
    e034:	e3a00002 	mov	r0, #2
    e038:	e8bd8010 	pop	{r4, pc}

0000e03c <CUSBEndpoint::SkipPID(unsigned int, int)>:
    e03c:	e5d03005 	ldrb	r3, [r0, #5]
    e040:	e92d4070 	push	{r4, r5, r6, lr}
    e044:	e3530002 	cmp	r3, #2
    e048:	e1a04000 	mov	r4, r0
    e04c:	e1a06001 	mov	r6, r1
    e050:	e1a05002 	mov	r5, r2
    e054:	8a000011 	bhi	e0a0 <CUSBEndpoint::SkipPID(unsigned int, int)+0x64>
    e058:	e3550000 	cmp	r5, #0
    e05c:	1a000009 	bne	e088 <CUSBEndpoint::SkipPID(unsigned int, int)+0x4c>
    e060:	e5d43014 	ldrb	r3, [r4, #20]
    e064:	e3530001 	cmp	r3, #1
    e068:	0a000021 	beq	e0f4 <CUSBEndpoint::SkipPID(unsigned int, int)+0xb8>
    e06c:	3a000022 	bcc	e0fc <CUSBEndpoint::SkipPID(unsigned int, int)+0xc0>
    e070:	e3530002 	cmp	r3, #2
    e074:	1a000017 	bne	e0d8 <CUSBEndpoint::SkipPID(unsigned int, int)+0x9c>
    e078:	e3160001 	tst	r6, #1
    e07c:	13a03001 	movne	r3, #1
    e080:	15c43014 	strbne	r3, [r4, #20]
    e084:	e8bd8070 	pop	{r4, r5, r6, pc}
    e088:	e5d43005 	ldrb	r3, [r4, #5]
    e08c:	e3530000 	cmp	r3, #0
    e090:	1a000009 	bne	e0bc <CUSBEndpoint::SkipPID(unsigned int, int)+0x80>
    e094:	e3a03000 	mov	r3, #0
    e098:	e5c43014 	strb	r3, [r4, #20]
    e09c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0a0:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    e0a4:	e30b0480 	movw	r0, #46208	; 0xb480
    e0a8:	e3401002 	movt	r1, #2
    e0ac:	e3400002 	movt	r0, #2
    e0b0:	e3a020b2 	mov	r2, #178	; 0xb2
    e0b4:	eb005ab8 	bl	24b9c <assertion_failed>
    e0b8:	eaffffe6 	b	e058 <CUSBEndpoint::SkipPID(unsigned int, int)+0x1c>
    e0bc:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    e0c0:	e30b0460 	movw	r0, #46176	; 0xb460
    e0c4:	e3401002 	movt	r1, #2
    e0c8:	e3400002 	movt	r0, #2
    e0cc:	e3a020d1 	mov	r2, #209	; 0xd1
    e0d0:	eb005ab1 	bl	24b9c <assertion_failed>
    e0d4:	eaffffee 	b	e094 <CUSBEndpoint::SkipPID(unsigned int, int)+0x58>
    e0d8:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    e0dc:	e30b0130 	movw	r0, #45360	; 0xb130
    e0e0:	e3401002 	movt	r1, #2
    e0e4:	e3400002 	movt	r0, #2
    e0e8:	e3a020cb 	mov	r2, #203	; 0xcb
    e0ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    e0f0:	ea005aa9 	b	24b9c <assertion_failed>
    e0f4:	e3160001 	tst	r6, #1
    e0f8:	08bd8070 	popeq	{r4, r5, r6, pc}
    e0fc:	e3a03002 	mov	r3, #2
    e100:	e5c43014 	strb	r3, [r4, #20]
    e104:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e108 <CUSBEndpoint::ResetPID()>:
    e108:	e5d03005 	ldrb	r3, [r0, #5]
    e10c:	e92d4010 	push	{r4, lr}
    e110:	e3530001 	cmp	r3, #1
    e114:	e1a04000 	mov	r4, r0
    e118:	0a000005 	beq	e134 <CUSBEndpoint::ResetPID()+0x2c>
    e11c:	e30b13c4 	movw	r1, #46020	; 0xb3c4
    e120:	e30b04e0 	movw	r0, #46304	; 0xb4e0
    e124:	e3401002 	movt	r1, #2
    e128:	e3400002 	movt	r0, #2
    e12c:	e3a020d9 	mov	r2, #217	; 0xd9
    e130:	eb005a99 	bl	24b9c <assertion_failed>
    e134:	e3a03001 	mov	r3, #1
    e138:	e5c43014 	strb	r3, [r4, #20]
    e13c:	e8bd8010 	pop	{r4, pc}

0000e140 <CUSBHostController::CUSBHostController()>:
    e140:	e59f3004 	ldr	r3, [pc, #4]	; e14c <CUSBHostController::CUSBHostController()+0xc>
    e144:	e5803000 	str	r3, [r0]
    e148:	e12fff1e 	bx	lr
    e14c:	0002b504 	.word	0x0002b504

0000e150 <CUSBHostController::~CUSBHostController()>:
    e150:	e12fff1e 	bx	lr

0000e154 <CUSBHostController::~CUSBHostController()>:
    e154:	e92d4010 	push	{r4, lr}
    e158:	e3a01004 	mov	r1, #4
    e15c:	e1a04000 	mov	r4, r0
    e160:	eb004f85 	bl	21f7c <operator delete(void*, unsigned int)>
    e164:	e1a00004 	mov	r0, r4
    e168:	e8bd8010 	pop	{r4, pc}

0000e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
    e16c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e170:	e24dd034 	sub	sp, sp, #52	; 0x34
    e174:	e1a05000 	mov	r5, r0
    e178:	e3a00008 	mov	r0, #8
    e17c:	e1dd66b4 	ldrh	r6, [sp, #100]	; 0x64
    e180:	e1a0a002 	mov	sl, r2
    e184:	e1a09003 	mov	r9, r3
    e188:	e1dd85b8 	ldrh	r8, [sp, #88]	; 0x58
    e18c:	e1a0b001 	mov	fp, r1
    e190:	e1dd75bc 	ldrh	r7, [sp, #92]	; 0x5c
    e194:	eb004f74 	bl	21f6c <operator new(unsigned int)>
    e198:	e1a0100b 	mov	r1, fp
    e19c:	e1a03006 	mov	r3, r6
    e1a0:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
    e1a4:	e58d0000 	str	r0, [sp]
    e1a8:	e1a04000 	mov	r4, r0
    e1ac:	e5c0a000 	strb	sl, [r0]
    e1b0:	e5c09001 	strb	r9, [r0, #1]
    e1b4:	e1c080b2 	strh	r8, [r0, #2]
    e1b8:	e28d0008 	add	r0, sp, #8
    e1bc:	e1c470b4 	strh	r7, [r4, #4]
    e1c0:	e1c460b6 	strh	r6, [r4, #6]
    e1c4:	eb00005e 	bl	e344 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    e1c8:	e5953000 	ldr	r3, [r5]
    e1cc:	e1a00005 	mov	r0, r5
    e1d0:	e28d1008 	add	r1, sp, #8
    e1d4:	e5933008 	ldr	r3, [r3, #8]
    e1d8:	e12fff33 	blx	r3
    e1dc:	e3500000 	cmp	r0, #0
    e1e0:	0a00000a 	beq	e210 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa4>
    e1e4:	e28d0008 	add	r0, sp, #8
    e1e8:	eb000092 	bl	e438 <CUSBRequest::GetResultLength() const>
    e1ec:	e1a05000 	mov	r5, r0
    e1f0:	e1a00004 	mov	r0, r4
    e1f4:	e3a01008 	mov	r1, #8
    e1f8:	eb004f5f 	bl	21f7c <operator delete(void*, unsigned int)>
    e1fc:	e28d0008 	add	r0, sp, #8
    e200:	eb000075 	bl	e3dc <CUSBRequest::~CUSBRequest()>
    e204:	e1a00005 	mov	r0, r5
    e208:	e28dd034 	add	sp, sp, #52	; 0x34
    e20c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e210:	e3e05000 	mvn	r5, #0
    e214:	eafffff5 	b	e1f0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0x84>

0000e218 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
    e218:	e92d4030 	push	{r4, r5, lr}
    e21c:	e1835402 	orr	r5, r3, r2, lsl #8
    e220:	e59d400c 	ldr	r4, [sp, #12]
    e224:	e3a03006 	mov	r3, #6
    e228:	e1dde1b8 	ldrh	lr, [sp, #24]
    e22c:	e1ddc1b0 	ldrh	ip, [sp, #16]
    e230:	e5dd2014 	ldrb	r2, [sp, #20]
    e234:	e58d500c 	str	r5, [sp, #12]
    e238:	e58d4014 	str	r4, [sp, #20]
    e23c:	e58de010 	str	lr, [sp, #16]
    e240:	e58dc018 	str	ip, [sp, #24]
    e244:	e8bd4030 	pop	{r4, r5, lr}
    e248:	eaffffc7 	b	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

0000e24c <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
    e24c:	e92d4010 	push	{r4, lr}
    e250:	e24dd010 	sub	sp, sp, #16
    e254:	e3a04000 	mov	r4, #0
    e258:	e3a03005 	mov	r3, #5
    e25c:	e58d2000 	str	r2, [sp]
    e260:	e1a02004 	mov	r2, r4
    e264:	e58d400c 	str	r4, [sp, #12]
    e268:	e58d4008 	str	r4, [sp, #8]
    e26c:	e58d4004 	str	r4, [sp, #4]
    e270:	ebffffbd 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e274:	e1500004 	cmp	r0, r4
    e278:	b1a00004 	movlt	r0, r4
    e27c:	ba000003 	blt	e290 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
    e280:	eb00529f 	bl	22d04 <CTimer::Get()>
    e284:	e3a00032 	mov	r0, #50	; 0x32
    e288:	eb005250 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
    e28c:	e3a00001 	mov	r0, #1
    e290:	e28dd010 	add	sp, sp, #16
    e294:	e8bd8010 	pop	{r4, pc}

0000e298 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
    e298:	e92d4010 	push	{r4, lr}
    e29c:	e24dd010 	sub	sp, sp, #16
    e2a0:	e3a04000 	mov	r4, #0
    e2a4:	e3a03009 	mov	r3, #9
    e2a8:	e58d2000 	str	r2, [sp]
    e2ac:	e1a02004 	mov	r2, r4
    e2b0:	e58d400c 	str	r4, [sp, #12]
    e2b4:	e58d4008 	str	r4, [sp, #8]
    e2b8:	e58d4004 	str	r4, [sp, #4]
    e2bc:	ebffffaa 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e2c0:	e1500004 	cmp	r0, r4
    e2c4:	b1a00004 	movlt	r0, r4
    e2c8:	ba000003 	blt	e2dc <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
    e2cc:	eb00528c 	bl	22d04 <CTimer::Get()>
    e2d0:	e3a00032 	mov	r0, #50	; 0x32
    e2d4:	eb00523d 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
    e2d8:	e3a00001 	mov	r0, #1
    e2dc:	e28dd010 	add	sp, sp, #16
    e2e0:	e8bd8010 	pop	{r4, pc}

0000e2e4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>:
    e2e4:	e92d4010 	push	{r4, lr}
    e2e8:	e24dd030 	sub	sp, sp, #48	; 0x30
    e2ec:	e1a04000 	mov	r4, r0
    e2f0:	e3a00000 	mov	r0, #0
    e2f4:	e58d0000 	str	r0, [sp]
    e2f8:	e28d0008 	add	r0, sp, #8
    e2fc:	eb000010 	bl	e344 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    e300:	e5943000 	ldr	r3, [r4]
    e304:	e1a00004 	mov	r0, r4
    e308:	e28d1008 	add	r1, sp, #8
    e30c:	e5933008 	ldr	r3, [r3, #8]
    e310:	e12fff33 	blx	r3
    e314:	e3500000 	cmp	r0, #0
    e318:	0a000007 	beq	e33c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)+0x58>
    e31c:	e28d0008 	add	r0, sp, #8
    e320:	eb000044 	bl	e438 <CUSBRequest::GetResultLength() const>
    e324:	e1a04000 	mov	r4, r0
    e328:	e28d0008 	add	r0, sp, #8
    e32c:	eb00002a 	bl	e3dc <CUSBRequest::~CUSBRequest()>
    e330:	e1a00004 	mov	r0, r4
    e334:	e28dd030 	add	sp, sp, #48	; 0x30
    e338:	e8bd8010 	pop	{r4, pc}
    e33c:	e3e04000 	mvn	r4, #0
    e340:	eafffff8 	b	e328 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)+0x44>

0000e344 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
    e344:	e92d4010 	push	{r4, lr}
    e348:	e3510000 	cmp	r1, #0
    e34c:	e59dc008 	ldr	ip, [sp, #8]
    e350:	e1a04000 	mov	r4, r0
    e354:	e580300c 	str	r3, [r0, #12]
    e358:	e3a03000 	mov	r3, #0
    e35c:	e5801000 	str	r1, [r0]
    e360:	e5802008 	str	r2, [r0, #8]
    e364:	e580c004 	str	ip, [r0, #4]
    e368:	e5803010 	str	r3, [r0, #16]
    e36c:	e5803014 	str	r3, [r0, #20]
    e370:	e5803018 	str	r3, [r0, #24]
    e374:	e580301c 	str	r3, [r0, #28]
    e378:	e5803020 	str	r3, [r0, #32]
    e37c:	e5803024 	str	r3, [r0, #36]	; 0x24
    e380:	0a00000d 	beq	e3bc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
    e384:	e3520000 	cmp	r2, #0
    e388:	0a000001 	beq	e394 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x50>
    e38c:	e1a00004 	mov	r0, r4
    e390:	e8bd8010 	pop	{r4, pc}
    e394:	e594300c 	ldr	r3, [r4, #12]
    e398:	e3530000 	cmp	r3, #0
    e39c:	0afffffa 	beq	e38c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
    e3a0:	e30b1514 	movw	r1, #46356	; 0xb514
    e3a4:	e30b0524 	movw	r0, #46372	; 0xb524
    e3a8:	e3401002 	movt	r1, #2
    e3ac:	e3400002 	movt	r0, #2
    e3b0:	e3a02024 	mov	r2, #36	; 0x24
    e3b4:	eb0059f8 	bl	24b9c <assertion_failed>
    e3b8:	eafffff3 	b	e38c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
    e3bc:	e3a02023 	mov	r2, #35	; 0x23
    e3c0:	e30b1514 	movw	r1, #46356	; 0xb514
    e3c4:	e30a0fb4 	movw	r0, #44980	; 0xafb4
    e3c8:	e3401002 	movt	r1, #2
    e3cc:	e3400002 	movt	r0, #2
    e3d0:	eb0059f1 	bl	24b9c <assertion_failed>
    e3d4:	e5942008 	ldr	r2, [r4, #8]
    e3d8:	eaffffe9 	b	e384 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x40>

0000e3dc <CUSBRequest::~CUSBRequest()>:
    e3dc:	e12fff1e 	bx	lr

0000e3e0 <CUSBRequest::GetEndpoint() const>:
    e3e0:	e5903000 	ldr	r3, [r0]
    e3e4:	e3530000 	cmp	r3, #0
    e3e8:	0a000001 	beq	e3f4 <CUSBRequest::GetEndpoint() const+0x14>
    e3ec:	e1a00003 	mov	r0, r3
    e3f0:	e12fff1e 	bx	lr
    e3f4:	e92d4010 	push	{r4, lr}
    e3f8:	e3a02031 	mov	r2, #49	; 0x31
    e3fc:	e1a04000 	mov	r4, r0
    e400:	e30b1514 	movw	r1, #46356	; 0xb514
    e404:	e30a0fb4 	movw	r0, #44980	; 0xafb4
    e408:	e3401002 	movt	r1, #2
    e40c:	e3400002 	movt	r0, #2
    e410:	eb0059e1 	bl	24b9c <assertion_failed>
    e414:	e5943000 	ldr	r3, [r4]
    e418:	e1a00003 	mov	r0, r3
    e41c:	e8bd8010 	pop	{r4, pc}

0000e420 <CUSBRequest::SetStatus(int)>:
    e420:	e5801010 	str	r1, [r0, #16]
    e424:	e12fff1e 	bx	lr

0000e428 <CUSBRequest::SetResultLen(unsigned int)>:
    e428:	e5801014 	str	r1, [r0, #20]
    e42c:	e12fff1e 	bx	lr

0000e430 <CUSBRequest::GetStatus() const>:
    e430:	e5900010 	ldr	r0, [r0, #16]
    e434:	e12fff1e 	bx	lr

0000e438 <CUSBRequest::GetResultLength() const>:
    e438:	e5903010 	ldr	r3, [r0, #16]
    e43c:	e92d4010 	push	{r4, lr}
    e440:	e3530000 	cmp	r3, #0
    e444:	e1a04000 	mov	r4, r0
    e448:	1a000005 	bne	e464 <CUSBRequest::GetResultLength() const+0x2c>
    e44c:	e30b1514 	movw	r1, #46356	; 0xb514
    e450:	e30b0548 	movw	r0, #46408	; 0xb548
    e454:	e3401002 	movt	r1, #2
    e458:	e3400002 	movt	r0, #2
    e45c:	e3a02046 	mov	r2, #70	; 0x46
    e460:	eb0059cd 	bl	24b9c <assertion_failed>
    e464:	e5940014 	ldr	r0, [r4, #20]
    e468:	e8bd8010 	pop	{r4, pc}

0000e46c <CUSBRequest::GetSetupData()>:
    e46c:	e92d4010 	push	{r4, lr}
    e470:	e1a04000 	mov	r4, r0
    e474:	e5900000 	ldr	r0, [r0]
    e478:	ebfffec8 	bl	dfa0 <CUSBEndpoint::GetType() const>
    e47c:	e3500000 	cmp	r0, #0
    e480:	1a00000a 	bne	e4b0 <CUSBRequest::GetSetupData()+0x44>
    e484:	e5940004 	ldr	r0, [r4, #4]
    e488:	e3500000 	cmp	r0, #0
    e48c:	18bd8010 	popne	{r4, pc}
    e490:	e3a0204e 	mov	r2, #78	; 0x4e
    e494:	e30b1514 	movw	r1, #46356	; 0xb514
    e498:	e30b0584 	movw	r0, #46468	; 0xb584
    e49c:	e3401002 	movt	r1, #2
    e4a0:	e3400002 	movt	r0, #2
    e4a4:	eb0059bc 	bl	24b9c <assertion_failed>
    e4a8:	e5940004 	ldr	r0, [r4, #4]
    e4ac:	e8bd8010 	pop	{r4, pc}
    e4b0:	e30b1514 	movw	r1, #46356	; 0xb514
    e4b4:	e30b0554 	movw	r0, #46420	; 0xb554
    e4b8:	e3401002 	movt	r1, #2
    e4bc:	e3400002 	movt	r0, #2
    e4c0:	e3a0204d 	mov	r2, #77	; 0x4d
    e4c4:	eb0059b4 	bl	24b9c <assertion_failed>
    e4c8:	eaffffed 	b	e484 <CUSBRequest::GetSetupData()+0x18>

0000e4cc <CUSBRequest::GetBuffer()>:
    e4cc:	e5903008 	ldr	r3, [r0, #8]
    e4d0:	e3530000 	cmp	r3, #0
    e4d4:	0a000001 	beq	e4e0 <CUSBRequest::GetBuffer()+0x14>
    e4d8:	e1a00003 	mov	r0, r3
    e4dc:	e12fff1e 	bx	lr
    e4e0:	e590200c 	ldr	r2, [r0, #12]
    e4e4:	e3520000 	cmp	r2, #0
    e4e8:	0afffffa 	beq	e4d8 <CUSBRequest::GetBuffer()+0xc>
    e4ec:	e92d4010 	push	{r4, lr}
    e4f0:	e3a02056 	mov	r2, #86	; 0x56
    e4f4:	e1a04000 	mov	r4, r0
    e4f8:	e30b1514 	movw	r1, #46356	; 0xb514
    e4fc:	e30b0524 	movw	r0, #46372	; 0xb524
    e500:	e3401002 	movt	r1, #2
    e504:	e3400002 	movt	r0, #2
    e508:	eb0059a3 	bl	24b9c <assertion_failed>
    e50c:	e5943008 	ldr	r3, [r4, #8]
    e510:	e1a00003 	mov	r0, r3
    e514:	e8bd8010 	pop	{r4, pc}

0000e518 <CUSBRequest::GetBufLen() const>:
    e518:	e590000c 	ldr	r0, [r0, #12]
    e51c:	e12fff1e 	bx	lr

0000e520 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
    e520:	e3510000 	cmp	r1, #0
    e524:	e5801018 	str	r1, [r0, #24]
    e528:	e580201c 	str	r2, [r0, #28]
    e52c:	e5803020 	str	r3, [r0, #32]
    e530:	112fff1e 	bxne	lr
    e534:	e30b1514 	movw	r1, #46356	; 0xb514
    e538:	e30b0598 	movw	r0, #46488	; 0xb598
    e53c:	e3401002 	movt	r1, #2
    e540:	e3400002 	movt	r0, #2
    e544:	e3a02066 	mov	r2, #102	; 0x66
    e548:	ea005993 	b	24b9c <assertion_failed>

0000e54c <CUSBRequest::CallCompletionRoutine()>:
    e54c:	e5903018 	ldr	r3, [r0, #24]
    e550:	e92d4010 	push	{r4, lr}
    e554:	e3530000 	cmp	r3, #0
    e558:	e1a04000 	mov	r4, r0
    e55c:	0a000004 	beq	e574 <CUSBRequest::CallCompletionRoutine()+0x28>
    e560:	e5942020 	ldr	r2, [r4, #32]
    e564:	e1a00004 	mov	r0, r4
    e568:	e594101c 	ldr	r1, [r4, #28]
    e56c:	e8bd4010 	pop	{r4, lr}
    e570:	e12fff13 	bx	r3
    e574:	e30b1514 	movw	r1, #46356	; 0xb514
    e578:	e30b0598 	movw	r0, #46488	; 0xb598
    e57c:	e3401002 	movt	r1, #2
    e580:	e3400002 	movt	r0, #2
    e584:	e3a0206b 	mov	r2, #107	; 0x6b
    e588:	eb005983 	bl	24b9c <assertion_failed>
    e58c:	e5943018 	ldr	r3, [r4, #24]
    e590:	eafffff2 	b	e560 <CUSBRequest::CallCompletionRoutine()+0x14>

0000e594 <CUSBRequest::SetCompleteOnNAK()>:
    e594:	e3a03001 	mov	r3, #1
    e598:	e5803024 	str	r3, [r0, #36]	; 0x24
    e59c:	e12fff1e 	bx	lr

0000e5a0 <CUSBRequest::IsCompleteOnNAK() const>:
    e5a0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    e5a4:	e12fff1e 	bx	lr

0000e5a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    e5a8:	e92d4070 	push	{r4, r5, r6, lr}
    e5ac:	e2506000 	subs	r6, r0, #0
    e5b0:	e1a04001 	mov	r4, r1
    e5b4:	0a000049 	beq	e6e0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    e5b8:	e3540000 	cmp	r4, #0
    e5bc:	0a00004e 	beq	e6fc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x154>
    e5c0:	e30b15dc 	movw	r1, #46556	; 0xb5dc
    e5c4:	e1a00004 	mov	r0, r4
    e5c8:	e3401002 	movt	r1, #2
    e5cc:	eb005ed1 	bl	26118 <CString::Compare(char const*) const>
    e5d0:	e3500000 	cmp	r0, #0
    e5d4:	1a000017 	bne	e638 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x90>
    e5d8:	e3a00058 	mov	r0, #88	; 0x58
    e5dc:	eb004e62 	bl	21f6c <operator new(unsigned int)>
    e5e0:	e1a01006 	mov	r1, r6
    e5e4:	e1a05000 	mov	r5, r0
    e5e8:	eb0000d3 	bl	e93c <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    e5ec:	e1a00005 	mov	r0, r5
    e5f0:	eb000ea0 	bl	12078 <CUSBFunction::GetDevice() const>
    e5f4:	e1a06000 	mov	r6, r0
    e5f8:	e1a00004 	mov	r0, r4
    e5fc:	eb005e89 	bl	26028 <CString::operator char const*() const>
    e600:	e30b2684 	movw	r2, #46724	; 0xb684
    e604:	e3a01003 	mov	r1, #3
    e608:	e3402002 	movt	r2, #2
    e60c:	e1a03000 	mov	r3, r0
    e610:	e1a00006 	mov	r0, r6
    e614:	ebfffb5e 	bl	d394 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e618:	e3540000 	cmp	r4, #0
    e61c:	0a000003 	beq	e630 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x88>
    e620:	e5943000 	ldr	r3, [r4]
    e624:	e1a00004 	mov	r0, r4
    e628:	e5933004 	ldr	r3, [r3, #4]
    e62c:	e12fff33 	blx	r3
    e630:	e1a00005 	mov	r0, r5
    e634:	e8bd8070 	pop	{r4, r5, r6, pc}
    e638:	e30b15e8 	movw	r1, #46568	; 0xb5e8
    e63c:	e1a00004 	mov	r0, r4
    e640:	e3401002 	movt	r1, #2
    e644:	eb005eb3 	bl	26118 <CString::Compare(char const*) const>
    e648:	e3500000 	cmp	r0, #0
    e64c:	0affffe1 	beq	e5d8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x30>
    e650:	e30b1654 	movw	r1, #46676	; 0xb654
    e654:	e1a00004 	mov	r0, r4
    e658:	e3401002 	movt	r1, #2
    e65c:	eb005ead 	bl	26118 <CString::Compare(char const*) const>
    e660:	e3500000 	cmp	r0, #0
    e664:	1a000005 	bne	e680 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xd8>
    e668:	e3a00030 	mov	r0, #48	; 0x30
    e66c:	eb004e3e 	bl	21f6c <operator new(unsigned int)>
    e670:	e1a01006 	mov	r1, r6
    e674:	e1a05000 	mov	r5, r0
    e678:	eb000364 	bl	f410 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    e67c:	eaffffda 	b	e5ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e680:	e30b15f4 	movw	r1, #46580	; 0xb5f4
    e684:	e1a00004 	mov	r0, r4
    e688:	e3401002 	movt	r1, #2
    e68c:	eb005ea1 	bl	26118 <CString::Compare(char const*) const>
    e690:	e3500000 	cmp	r0, #0
    e694:	0a00000b 	beq	e6c8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x120>
    e698:	e30b1600 	movw	r1, #46592	; 0xb600
    e69c:	e1a00004 	mov	r0, r4
    e6a0:	e3401002 	movt	r1, #2
    e6a4:	eb005e9b 	bl	26118 <CString::Compare(char const*) const>
    e6a8:	e3500000 	cmp	r0, #0
    e6ac:	1a000019 	bne	e718 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x170>
    e6b0:	e3a00040 	mov	r0, #64	; 0x40
    e6b4:	eb004e2c 	bl	21f6c <operator new(unsigned int)>
    e6b8:	e1a01006 	mov	r1, r6
    e6bc:	e1a05000 	mov	r5, r0
    e6c0:	eb000a9b 	bl	11134 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    e6c4:	eaffffc8 	b	e5ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e6c8:	e3a00e45 	mov	r0, #1104	; 0x450
    e6cc:	eb004e26 	bl	21f6c <operator new(unsigned int)>
    e6d0:	e1a01006 	mov	r1, r6
    e6d4:	e1a05000 	mov	r5, r0
    e6d8:	eb0007f2 	bl	106a8 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    e6dc:	eaffffc2 	b	e5ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e6e0:	e30b15b4 	movw	r1, #46516	; 0xb5b4
    e6e4:	e30b05cc 	movw	r0, #46540	; 0xb5cc
    e6e8:	e3401002 	movt	r1, #2
    e6ec:	e3400002 	movt	r0, #2
    e6f0:	e3a02025 	mov	r2, #37	; 0x25
    e6f4:	eb005928 	bl	24b9c <assertion_failed>
    e6f8:	eaffffae 	b	e5b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x10>
    e6fc:	e30b15b4 	movw	r1, #46516	; 0xb5b4
    e700:	e30b00f0 	movw	r0, #45296	; 0xb0f0
    e704:	e3401002 	movt	r1, #2
    e708:	e3400002 	movt	r0, #2
    e70c:	e3a02026 	mov	r2, #38	; 0x26
    e710:	eb005921 	bl	24b9c <assertion_failed>
    e714:	eaffffa9 	b	e5c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x18>
    e718:	e30b160c 	movw	r1, #46604	; 0xb60c
    e71c:	e1a00004 	mov	r0, r4
    e720:	e3401002 	movt	r1, #2
    e724:	eb005e7b 	bl	26118 <CString::Compare(char const*) const>
    e728:	e3500000 	cmp	r0, #0
    e72c:	0a00000b 	beq	e760 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1b8>
    e730:	e30b1618 	movw	r1, #46616	; 0xb618
    e734:	e1a00004 	mov	r0, r4
    e738:	e3401002 	movt	r1, #2
    e73c:	eb005e75 	bl	26118 <CString::Compare(char const*) const>
    e740:	e3500000 	cmp	r0, #0
    e744:	1a00000b 	bne	e778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d0>
    e748:	e3a0001c 	mov	r0, #28
    e74c:	eb004e06 	bl	21f6c <operator new(unsigned int)>
    e750:	e1a01006 	mov	r1, r6
    e754:	e1a05000 	mov	r5, r0
    e758:	eb000f96 	bl	125b8 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    e75c:	eaffffa2 	b	e5ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e760:	e3a000a0 	mov	r0, #160	; 0xa0
    e764:	eb004e00 	bl	21f6c <operator new(unsigned int)>
    e768:	e1a01006 	mov	r1, r6
    e76c:	e1a05000 	mov	r5, r0
    e770:	eb000ade 	bl	112f0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
    e774:	eaffff9c 	b	e5ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e778:	e30b1624 	movw	r1, #46628	; 0xb624
    e77c:	e1a00004 	mov	r0, r4
    e780:	e3401002 	movt	r1, #2
    e784:	eb005e63 	bl	26118 <CString::Compare(char const*) const>
    e788:	e3500000 	cmp	r0, #0
    e78c:	0affffed 	beq	e748 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a0>
    e790:	e30b1660 	movw	r1, #46688	; 0xb660
    e794:	e1a00004 	mov	r0, r4
    e798:	e3401002 	movt	r1, #2
    e79c:	eb005e5d 	bl	26118 <CString::Compare(char const*) const>
    e7a0:	e3500000 	cmp	r0, #0
    e7a4:	1a000005 	bne	e7c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x218>
    e7a8:	e3a00028 	mov	r0, #40	; 0x28
    e7ac:	eb004dee 	bl	21f6c <operator new(unsigned int)>
    e7b0:	e1a01006 	mov	r1, r6
    e7b4:	e1a05000 	mov	r5, r0
    e7b8:	eb0017fc 	bl	147b0 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    e7bc:	eaffff8a 	b	e5ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e7c0:	e30b1630 	movw	r1, #46640	; 0xb630
    e7c4:	e1a00004 	mov	r0, r4
    e7c8:	e3401002 	movt	r1, #2
    e7cc:	eb005e51 	bl	26118 <CString::Compare(char const*) const>
    e7d0:	e3500000 	cmp	r0, #0
    e7d4:	1a000005 	bne	e7f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x248>
    e7d8:	e3a00028 	mov	r0, #40	; 0x28
    e7dc:	eb004de2 	bl	21f6c <operator new(unsigned int)>
    e7e0:	e1a01006 	mov	r1, r6
    e7e4:	e1a05000 	mov	r5, r0
    e7e8:	eb001036 	bl	128c8 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    e7ec:	eaffff7e 	b	e5ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e7f0:	e30b163c 	movw	r1, #46652	; 0xb63c
    e7f4:	e1a00004 	mov	r0, r4
    e7f8:	e3401002 	movt	r1, #2
    e7fc:	eb005e45 	bl	26118 <CString::Compare(char const*) const>
    e800:	e3500000 	cmp	r0, #0
    e804:	0afffff3 	beq	e7d8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x230>
    e808:	e30b166c 	movw	r1, #46700	; 0xb66c
    e80c:	e1a00004 	mov	r0, r4
    e810:	e3401002 	movt	r1, #2
    e814:	eb005e3f 	bl	26118 <CString::Compare(char const*) const>
    e818:	e3500000 	cmp	r0, #0
    e81c:	1a000005 	bne	e838 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x290>
    e820:	e3a00028 	mov	r0, #40	; 0x28
    e824:	eb004dd0 	bl	21f6c <operator new(unsigned int)>
    e828:	e1a01006 	mov	r1, r6
    e82c:	e1a05000 	mov	r5, r0
    e830:	eb0011b3 	bl	12f04 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    e834:	eaffff6c 	b	e5ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e838:	e30b1648 	movw	r1, #46664	; 0xb648
    e83c:	e1a00004 	mov	r0, r4
    e840:	e3401002 	movt	r1, #2
    e844:	eb005e33 	bl	26118 <CString::Compare(char const*) const>
    e848:	e3500000 	cmp	r0, #0
    e84c:	0afffff3 	beq	e820 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x278>
    e850:	e30b1678 	movw	r1, #46712	; 0xb678
    e854:	e1a00004 	mov	r0, r4
    e858:	e3401002 	movt	r1, #2
    e85c:	eb005e2d 	bl	26118 <CString::Compare(char const*) const>
    e860:	e3500000 	cmp	r0, #0
    e864:	13a05000 	movne	r5, #0
    e868:	1affff6a 	bne	e618 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x70>
    e86c:	e3a00024 	mov	r0, #36	; 0x24
    e870:	eb004dbd 	bl	21f6c <operator new(unsigned int)>
    e874:	e1a01006 	mov	r1, r6
    e878:	e1a05000 	mov	r5, r0
    e87c:	eb0013da 	bl	137ec <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    e880:	eaffff59 	b	e5ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>

0000e884 <CUSBStandardHub::~CUSBStandardHub()>:
    e884:	e5902014 	ldr	r2, [r0, #20]
    e888:	e59f3088 	ldr	r3, [pc, #136]	; e918 <CUSBStandardHub::~CUSBStandardHub()+0x94>
    e88c:	e3520000 	cmp	r2, #0
    e890:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e894:	e1a07000 	mov	r7, r0
    e898:	e5803000 	str	r3, [r0]
    e89c:	0a000013 	beq	e8f0 <CUSBStandardHub::~CUSBStandardHub()+0x6c>
    e8a0:	e3a04000 	mov	r4, #0
    e8a4:	e2805014 	add	r5, r0, #20
    e8a8:	e2806034 	add	r6, r0, #52	; 0x34
    e8ac:	e1a08004 	mov	r8, r4
    e8b0:	e5960004 	ldr	r0, [r6, #4]
    e8b4:	e3a01004 	mov	r1, #4
    e8b8:	eb004daf 	bl	21f7c <operator delete(void*, unsigned int)>
    e8bc:	e5953004 	ldr	r3, [r5, #4]
    e8c0:	e2844001 	add	r4, r4, #1
    e8c4:	e5a68004 	str	r8, [r6, #4]!
    e8c8:	e3530000 	cmp	r3, #0
    e8cc:	e1a00003 	mov	r0, r3
    e8d0:	0a000002 	beq	e8e0 <CUSBStandardHub::~CUSBStandardHub()+0x5c>
    e8d4:	e5933000 	ldr	r3, [r3]
    e8d8:	e5933004 	ldr	r3, [r3, #4]
    e8dc:	e12fff33 	blx	r3
    e8e0:	e5973014 	ldr	r3, [r7, #20]
    e8e4:	e5a58004 	str	r8, [r5, #4]!
    e8e8:	e1530004 	cmp	r3, r4
    e8ec:	8affffef 	bhi	e8b0 <CUSBStandardHub::~CUSBStandardHub()+0x2c>
    e8f0:	e3a04000 	mov	r4, #0
    e8f4:	e3a01009 	mov	r1, #9
    e8f8:	e5970010 	ldr	r0, [r7, #16]
    e8fc:	e5874014 	str	r4, [r7, #20]
    e900:	eb004d9d 	bl	21f7c <operator delete(void*, unsigned int)>
    e904:	e5874010 	str	r4, [r7, #16]
    e908:	e1a00007 	mov	r0, r7
    e90c:	eb000d19 	bl	11d78 <CUSBFunction::~CUSBFunction()>
    e910:	e1a00007 	mov	r0, r7
    e914:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e918:	0002b6a8 	.word	0x0002b6a8

0000e91c <CUSBStandardHub::~CUSBStandardHub()>:
    e91c:	e92d4010 	push	{r4, lr}
    e920:	e1a04000 	mov	r4, r0
    e924:	ebffffd6 	bl	e884 <CUSBStandardHub::~CUSBStandardHub()>
    e928:	e1a00004 	mov	r0, r4
    e92c:	e3a01058 	mov	r1, #88	; 0x58
    e930:	eb004d91 	bl	21f7c <operator delete(void*, unsigned int)>
    e934:	e1a00004 	mov	r0, r4
    e938:	e8bd8010 	pop	{r4, pc}

0000e93c <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
    e93c:	e92d4010 	push	{r4, lr}
    e940:	e1a04000 	mov	r4, r0
    e944:	eb000d5c 	bl	11ebc <CUSBFunction::CUSBFunction(CUSBFunction*)>
    e948:	e59fe034 	ldr	lr, [pc, #52]	; e984 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x48>
    e94c:	e2840038 	add	r0, r4, #56	; 0x38
    e950:	e3a0c000 	mov	ip, #0
    e954:	e2843018 	add	r3, r4, #24
    e958:	e1a01000 	mov	r1, r0
    e95c:	e1a0200c 	mov	r2, ip
    e960:	e584e000 	str	lr, [r4]
    e964:	e584c010 	str	ip, [r4, #16]
    e968:	e584c014 	str	ip, [r4, #20]
    e96c:	e4832004 	str	r2, [r3], #4
    e970:	e1530000 	cmp	r3, r0
    e974:	e4812004 	str	r2, [r1], #4
    e978:	1afffffb 	bne	e96c <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x30>
    e97c:	e1a00004 	mov	r0, r4
    e980:	e8bd8010 	pop	{r4, pc}
    e984:	0002b6a8 	.word	0x0002b6a8

0000e988 <CUSBStandardHub::EnumeratePorts()>:
    e988:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e98c:	e24dd034 	sub	sp, sp, #52	; 0x34
    e990:	e1a06000 	mov	r6, r0
    e994:	eb000dd8 	bl	120fc <CUSBFunction::GetHost() const>
    e998:	e250b000 	subs	fp, r0, #0
    e99c:	0a0001b2 	beq	f06c <CUSBStandardHub::EnumeratePorts()+0x6e4>
    e9a0:	e1a00006 	mov	r0, r6
    e9a4:	eb000dc3 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
    e9a8:	e250a000 	subs	sl, r0, #0
    e9ac:	0a0001b5 	beq	f088 <CUSBStandardHub::EnumeratePorts()+0x700>
    e9b0:	e5963014 	ldr	r3, [r6, #20]
    e9b4:	e3530000 	cmp	r3, #0
    e9b8:	0a00001f 	beq	ea3c <CUSBStandardHub::EnumeratePorts()+0xb4>
    e9bc:	e3a03000 	mov	r3, #0
    e9c0:	e3a07008 	mov	r7, #8
    e9c4:	e1a05003 	mov	r5, r3
    e9c8:	ea000002 	b	e9d8 <CUSBStandardHub::EnumeratePorts()+0x50>
    e9cc:	e5962014 	ldr	r2, [r6, #20]
    e9d0:	e1520004 	cmp	r2, r4
    e9d4:	9a000021 	bls	ea60 <CUSBStandardHub::EnumeratePorts()+0xd8>
    e9d8:	e2834001 	add	r4, r3, #1
    e9dc:	e58d500c 	str	r5, [sp, #12]
    e9e0:	e3a03003 	mov	r3, #3
    e9e4:	e58d5008 	str	r5, [sp, #8]
    e9e8:	e6ff1074 	uxth	r1, r4
    e9ec:	e58d7000 	str	r7, [sp]
    e9f0:	e58d1004 	str	r1, [sp, #4]
    e9f4:	e3a02023 	mov	r2, #35	; 0x23
    e9f8:	e1a0100a 	mov	r1, sl
    e9fc:	e1a0000b 	mov	r0, fp
    ea00:	ebfffdd9 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ea04:	e1a03004 	mov	r3, r4
    ea08:	e3500000 	cmp	r0, #0
    ea0c:	aaffffee 	bge	e9cc <CUSBStandardHub::EnumeratePorts()+0x44>
    ea10:	eb0059e6 	bl	251b0 <CLogger::Get()>
    ea14:	e58d4000 	str	r4, [sp]
    ea18:	e30b370c 	movw	r3, #46860	; 0xb70c
    ea1c:	e3a02001 	mov	r2, #1
    ea20:	e3403002 	movt	r3, #2
    ea24:	e59f16f0 	ldr	r1, [pc, #1776]	; f11c <CUSBStandardHub::EnumeratePorts()+0x794>
    ea28:	eb005abc 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ea2c:	e3a09000 	mov	r9, #0
    ea30:	e1a00009 	mov	r0, r9
    ea34:	e28dd034 	add	sp, sp, #52	; 0x34
    ea38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea3c:	e30b16cc 	movw	r1, #46796	; 0xb6cc
    ea40:	e30b06fc 	movw	r0, #46844	; 0xb6fc
    ea44:	e3401002 	movt	r1, #2
    ea48:	e3400002 	movt	r0, #2
    ea4c:	e3a02091 	mov	r2, #145	; 0x91
    ea50:	eb005851 	bl	24b9c <assertion_failed>
    ea54:	e5963014 	ldr	r3, [r6, #20]
    ea58:	e3530000 	cmp	r3, #0
    ea5c:	1affffd6 	bne	e9bc <CUSBStandardHub::EnumeratePorts()+0x34>
    ea60:	eb005222 	bl	232f0 <CKernelOptions::Get()>
    ea64:	e3500000 	cmp	r0, #0
    ea68:	0a00009b 	beq	ecdc <CUSBStandardHub::EnumeratePorts()+0x354>
    ea6c:	eb005219 	bl	232d8 <CKernelOptions::GetUSBPowerDelay() const>
    ea70:	e2504000 	subs	r4, r0, #0
    ea74:	0a000098 	beq	ecdc <CUSBStandardHub::EnumeratePorts()+0x354>
    ea78:	eb0050a1 	bl	22d04 <CTimer::Get()>
    ea7c:	e1a00004 	mov	r0, r4
    ea80:	eb005052 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
    ea84:	e5963014 	ldr	r3, [r6, #20]
    ea88:	e3530000 	cmp	r3, #0
    ea8c:	0a0000a4 	beq	ed24 <CUSBStandardHub::EnumeratePorts()+0x39c>
    ea90:	e2863018 	add	r3, r6, #24
    ea94:	e30b26cc 	movw	r2, #46796	; 0xb6cc
    ea98:	e30b1724 	movw	r1, #46884	; 0xb724
    ea9c:	e3402002 	movt	r2, #2
    eaa0:	e3401002 	movt	r1, #2
    eaa4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    eaa8:	e58d2014 	str	r2, [sp, #20]
    eaac:	e2865034 	add	r5, r6, #52	; 0x34
    eab0:	e58d1018 	str	r1, [sp, #24]
    eab4:	e1a09003 	mov	r9, r3
    eab8:	e3a04001 	mov	r4, #1
    eabc:	e3a08004 	mov	r8, #4
    eac0:	ea00000c 	b	eaf8 <CUSBStandardHub::EnumeratePorts()+0x170>
    eac4:	eb0059b9 	bl	251b0 <CLogger::Get()>
    eac8:	e30b373c 	movw	r3, #46908	; 0xb73c
    eacc:	e58d4000 	str	r4, [sp]
    ead0:	e3a02001 	mov	r2, #1
    ead4:	e3403002 	movt	r3, #2
    ead8:	e59f163c 	ldr	r1, [pc, #1596]	; f11c <CUSBStandardHub::EnumeratePorts()+0x794>
    eadc:	eb005a8f 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    eae0:	e5963014 	ldr	r3, [r6, #20]
    eae4:	e2899004 	add	r9, r9, #4
    eae8:	e2842001 	add	r2, r4, #1
    eaec:	e1530004 	cmp	r3, r4
    eaf0:	9a0000c0 	bls	edf8 <CUSBStandardHub::EnumeratePorts()+0x470>
    eaf4:	e1a04002 	mov	r4, r2
    eaf8:	e5953004 	ldr	r3, [r5, #4]
    eafc:	e3530000 	cmp	r3, #0
    eb00:	0a000003 	beq	eb14 <CUSBStandardHub::EnumeratePorts()+0x18c>
    eb04:	e3a020b1 	mov	r2, #177	; 0xb1
    eb08:	e59d1014 	ldr	r1, [sp, #20]
    eb0c:	e59d0018 	ldr	r0, [sp, #24]
    eb10:	eb005821 	bl	24b9c <assertion_failed>
    eb14:	e3a00004 	mov	r0, #4
    eb18:	e6ff7074 	uxth	r7, r4
    eb1c:	eb004d12 	bl	21f6c <operator new(unsigned int)>
    eb20:	e3a01000 	mov	r1, #0
    eb24:	e1a03001 	mov	r3, r1
    eb28:	e3a020a3 	mov	r2, #163	; 0xa3
    eb2c:	e5a50004 	str	r0, [r5, #4]!
    eb30:	e58d0008 	str	r0, [sp, #8]
    eb34:	e1a0000b 	mov	r0, fp
    eb38:	e58d1000 	str	r1, [sp]
    eb3c:	e1a0100a 	mov	r1, sl
    eb40:	e58d800c 	str	r8, [sp, #12]
    eb44:	e58d7004 	str	r7, [sp, #4]
    eb48:	ebfffd87 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    eb4c:	e3500004 	cmp	r0, #4
    eb50:	1affffdb 	bne	eac4 <CUSBStandardHub::EnumeratePorts()+0x13c>
    eb54:	e5953000 	ldr	r3, [r5]
    eb58:	e1d330b0 	ldrh	r3, [r3]
    eb5c:	e3130c01 	tst	r3, #256	; 0x100
    eb60:	0a00005f 	beq	ece4 <CUSBStandardHub::EnumeratePorts()+0x35c>
    eb64:	e3130001 	tst	r3, #1
    eb68:	0affffdc 	beq	eae0 <CUSBStandardHub::EnumeratePorts()+0x158>
    eb6c:	e3a02000 	mov	r2, #0
    eb70:	e3a01000 	mov	r1, #0
    eb74:	e58d200c 	str	r2, [sp, #12]
    eb78:	e3a03003 	mov	r3, #3
    eb7c:	e58d1008 	str	r1, [sp, #8]
    eb80:	e3a02023 	mov	r2, #35	; 0x23
    eb84:	e58d7004 	str	r7, [sp, #4]
    eb88:	e1a0100a 	mov	r1, sl
    eb8c:	e58d8000 	str	r8, [sp]
    eb90:	e1a0000b 	mov	r0, fp
    eb94:	ebfffd74 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    eb98:	e3500000 	cmp	r0, #0
    eb9c:	ba000058 	blt	ed04 <CUSBStandardHub::EnumeratePorts()+0x37c>
    eba0:	eb005057 	bl	22d04 <CTimer::Get()>
    eba4:	e3a00064 	mov	r0, #100	; 0x64
    eba8:	eb005008 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
    ebac:	e5950000 	ldr	r0, [r5]
    ebb0:	e3a03000 	mov	r3, #0
    ebb4:	e58d800c 	str	r8, [sp, #12]
    ebb8:	e58d7004 	str	r7, [sp, #4]
    ebbc:	e3a020a3 	mov	r2, #163	; 0xa3
    ebc0:	e58d0008 	str	r0, [sp, #8]
    ebc4:	e1a0100a 	mov	r1, sl
    ebc8:	e58d3000 	str	r3, [sp]
    ebcc:	e1a0000b 	mov	r0, fp
    ebd0:	ebfffd65 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ebd4:	e3500004 	cmp	r0, #4
    ebd8:	1a000137 	bne	f0bc <CUSBStandardHub::EnumeratePorts()+0x734>
    ebdc:	e5953000 	ldr	r3, [r5]
    ebe0:	e1d330b0 	ldrh	r3, [r3]
    ebe4:	e3130002 	tst	r3, #2
    ebe8:	0a0000b2 	beq	eeb8 <CUSBStandardHub::EnumeratePorts()+0x530>
    ebec:	e2132008 	ands	r2, r3, #8
    ebf0:	1a000133 	bne	f0c4 <CUSBStandardHub::EnumeratePorts()+0x73c>
    ebf4:	e3130c02 	tst	r3, #512	; 0x200
    ebf8:	158d2028 	strne	r2, [sp, #40]	; 0x28
    ebfc:	1a000003 	bne	ec10 <CUSBStandardHub::EnumeratePorts()+0x288>
    ec00:	e3130b01 	tst	r3, #1024	; 0x400
    ec04:	03a03001 	moveq	r3, #1
    ec08:	13a03002 	movne	r3, #2
    ec0c:	e58d3028 	str	r3, [sp, #40]	; 0x28
    ec10:	e1a00006 	mov	r0, r6
    ec14:	eb000d17 	bl	12078 <CUSBFunction::GetDevice() const>
    ec18:	e2507000 	subs	r7, r0, #0
    ec1c:	0a000120 	beq	f0a4 <CUSBStandardHub::EnumeratePorts()+0x71c>
    ec20:	e1a00007 	mov	r0, r7
    ec24:	ebfff96e 	bl	d1e4 <CUSBDevice::IsSplit() const>
    ec28:	e58d001c 	str	r0, [sp, #28]
    ec2c:	e1a00007 	mov	r0, r7
    ec30:	ebfff96d 	bl	d1ec <CUSBDevice::GetHubAddress() const>
    ec34:	e58d0020 	str	r0, [sp, #32]
    ec38:	e1a00007 	mov	r0, r7
    ec3c:	ebfff96c 	bl	d1f4 <CUSBDevice::GetHubPortNumber() const>
    ec40:	e59d301c 	ldr	r3, [sp, #28]
    ec44:	e3530000 	cmp	r3, #0
    ec48:	e58d0024 	str	r0, [sp, #36]	; 0x24
    ec4c:	0a0000a1 	beq	eed8 <CUSBStandardHub::EnumeratePorts()+0x550>
    ec50:	e5993000 	ldr	r3, [r9]
    ec54:	e3530000 	cmp	r3, #0
    ec58:	0a000004 	beq	ec70 <CUSBStandardHub::EnumeratePorts()+0x2e8>
    ec5c:	e30b07f4 	movw	r0, #47092	; 0xb7f4
    ec60:	e300210e 	movw	r2, #270	; 0x10e
    ec64:	e3400002 	movt	r0, #2
    ec68:	e59d1014 	ldr	r1, [sp, #20]
    ec6c:	eb0057ca 	bl	24b9c <assertion_failed>
    ec70:	e3a0004c 	mov	r0, #76	; 0x4c
    ec74:	eb004cbc 	bl	21f6c <operator new(unsigned int)>
    ec78:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    ec7c:	e59d2020 	ldr	r2, [sp, #32]
    ec80:	e1a0100b 	mov	r1, fp
    ec84:	e58d3004 	str	r3, [sp, #4]
    ec88:	e58d2000 	str	r2, [sp]
    ec8c:	e59d301c 	ldr	r3, [sp, #28]
    ec90:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    ec94:	e1a07000 	mov	r7, r0
    ec98:	ebfff871 	bl	ce64 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)>
    ec9c:	e1a00007 	mov	r0, r7
    eca0:	e5897000 	str	r7, [r9]
    eca4:	e5903000 	ldr	r3, [r0]
    eca8:	e5933008 	ldr	r3, [r3, #8]
    ecac:	e12fff33 	blx	r3
    ecb0:	e3500000 	cmp	r0, #0
    ecb4:	1affff89 	bne	eae0 <CUSBStandardHub::EnumeratePorts()+0x158>
    ecb8:	e5990000 	ldr	r0, [r9]
    ecbc:	e3500000 	cmp	r0, #0
    ecc0:	0a000002 	beq	ecd0 <CUSBStandardHub::EnumeratePorts()+0x348>
    ecc4:	e5903000 	ldr	r3, [r0]
    ecc8:	e5933004 	ldr	r3, [r3, #4]
    eccc:	e12fff33 	blx	r3
    ecd0:	e3a03000 	mov	r3, #0
    ecd4:	e5893000 	str	r3, [r9]
    ecd8:	eaffff80 	b	eae0 <CUSBStandardHub::EnumeratePorts()+0x158>
    ecdc:	e30041fe 	movw	r4, #510	; 0x1fe
    ece0:	eaffff64 	b	ea78 <CUSBStandardHub::EnumeratePorts()+0xf0>
    ece4:	e30b075c 	movw	r0, #46940	; 0xb75c
    ece8:	e3a020bf 	mov	r2, #191	; 0xbf
    ecec:	e3400002 	movt	r0, #2
    ecf0:	e59d1014 	ldr	r1, [sp, #20]
    ecf4:	eb0057a8 	bl	24b9c <assertion_failed>
    ecf8:	e5953000 	ldr	r3, [r5]
    ecfc:	e1d330b0 	ldrh	r3, [r3]
    ed00:	eaffff97 	b	eb64 <CUSBStandardHub::EnumeratePorts()+0x1dc>
    ed04:	eb005929 	bl	251b0 <CLogger::Get()>
    ed08:	e58d4000 	str	r4, [sp]
    ed0c:	e30b3790 	movw	r3, #46992	; 0xb790
    ed10:	e3a02001 	mov	r2, #1
    ed14:	e3403002 	movt	r3, #2
    ed18:	e59f13fc 	ldr	r1, [pc, #1020]	; f11c <CUSBStandardHub::EnumeratePorts()+0x794>
    ed1c:	eb0059ff 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ed20:	eaffff6e 	b	eae0 <CUSBStandardHub::EnumeratePorts()+0x158>
    ed24:	e3a00004 	mov	r0, #4
    ed28:	e3a09000 	mov	r9, #0
    ed2c:	eb004c8e 	bl	21f6c <operator new(unsigned int)>
    ed30:	e3a04004 	mov	r4, #4
    ed34:	e58d9004 	str	r9, [sp, #4]
    ed38:	e1a03009 	mov	r3, r9
    ed3c:	e58d9000 	str	r9, [sp]
    ed40:	e3a020a0 	mov	r2, #160	; 0xa0
    ed44:	e58d400c 	str	r4, [sp, #12]
    ed48:	e1a0100a 	mov	r1, sl
    ed4c:	e58d0008 	str	r0, [sp, #8]
    ed50:	e1a05000 	mov	r5, r0
    ed54:	e1a0000b 	mov	r0, fp
    ed58:	ebfffd03 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ed5c:	e1500004 	cmp	r0, r4
    ed60:	e1a07000 	mov	r7, r0
    ed64:	1a0000a6 	bne	f004 <CUSBStandardHub::EnumeratePorts()+0x67c>
    ed68:	e1d530b0 	ldrh	r3, [r5]
    ed6c:	e3130002 	tst	r3, #2
    ed70:	0a00006a 	beq	ef20 <CUSBStandardHub::EnumeratePorts()+0x598>
    ed74:	e5963014 	ldr	r3, [r6, #20]
    ed78:	e3530000 	cmp	r3, #0
    ed7c:	13a04001 	movne	r4, #1
    ed80:	13a07008 	movne	r7, #8
    ed84:	0a00000e 	beq	edc4 <CUSBStandardHub::EnumeratePorts()+0x43c>
    ed88:	e6ff1074 	uxth	r1, r4
    ed8c:	e3a03001 	mov	r3, #1
    ed90:	e3a02023 	mov	r2, #35	; 0x23
    ed94:	e58d1004 	str	r1, [sp, #4]
    ed98:	e58d900c 	str	r9, [sp, #12]
    ed9c:	e1a0100a 	mov	r1, sl
    eda0:	e58d9008 	str	r9, [sp, #8]
    eda4:	e1a0000b 	mov	r0, fp
    eda8:	e58d7000 	str	r7, [sp]
    edac:	ebfffcee 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    edb0:	e5962014 	ldr	r2, [r6, #20]
    edb4:	e2843001 	add	r3, r4, #1
    edb8:	e1540002 	cmp	r4, r2
    edbc:	e1a04003 	mov	r4, r3
    edc0:	3afffff0 	bcc	ed88 <CUSBStandardHub::EnumeratePorts()+0x400>
    edc4:	eb0058f9 	bl	251b0 <CLogger::Get()>
    edc8:	e3a02001 	mov	r2, #1
    edcc:	e59f1348 	ldr	r1, [pc, #840]	; f11c <CUSBStandardHub::EnumeratePorts()+0x794>
    edd0:	e30b3864 	movw	r3, #47204	; 0xb864
    edd4:	e3403002 	movt	r3, #2
    edd8:	e3a09000 	mov	r9, #0
    eddc:	eb0059cf 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ede0:	e1a00005 	mov	r0, r5
    ede4:	e3a01004 	mov	r1, #4
    ede8:	eb004c63 	bl	21f7c <operator delete(void*, unsigned int)>
    edec:	e1a00009 	mov	r0, r9
    edf0:	e28dd034 	add	sp, sp, #52	; 0x34
    edf4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edf8:	e3530000 	cmp	r3, #0
    edfc:	0affffc8 	beq	ed24 <CUSBStandardHub::EnumeratePorts()+0x39c>
    ee00:	e30b8830 	movw	r8, #47152	; 0xb830
    ee04:	e30b780c 	movw	r7, #47116	; 0xb80c
    ee08:	e3408002 	movt	r8, #2
    ee0c:	e3407002 	movt	r7, #2
    ee10:	e3a04001 	mov	r4, #1
    ee14:	e59f5300 	ldr	r5, [pc, #768]	; f11c <CUSBStandardHub::EnumeratePorts()+0x794>
    ee18:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    ee1c:	ea000014 	b	ee74 <CUSBStandardHub::EnumeratePorts()+0x4ec>
    ee20:	eb0058e2 	bl	251b0 <CLogger::Get()>
    ee24:	e1a03007 	mov	r3, r7
    ee28:	e58d4000 	str	r4, [sp]
    ee2c:	e3a02002 	mov	r2, #2
    ee30:	e1a01005 	mov	r1, r5
    ee34:	eb0059b9 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ee38:	e5993000 	ldr	r3, [r9]
    ee3c:	e3530000 	cmp	r3, #0
    ee40:	e1a00003 	mov	r0, r3
    ee44:	0a000002 	beq	ee54 <CUSBStandardHub::EnumeratePorts()+0x4cc>
    ee48:	e5933000 	ldr	r3, [r3]
    ee4c:	e5933004 	ldr	r3, [r3, #4]
    ee50:	e12fff33 	blx	r3
    ee54:	e3a03000 	mov	r3, #0
    ee58:	e5893000 	str	r3, [r9]
    ee5c:	e5963014 	ldr	r3, [r6, #20]
    ee60:	e2842001 	add	r2, r4, #1
    ee64:	e1530004 	cmp	r3, r4
    ee68:	e2899004 	add	r9, r9, #4
    ee6c:	e1a04002 	mov	r4, r2
    ee70:	9affffab 	bls	ed24 <CUSBStandardHub::EnumeratePorts()+0x39c>
    ee74:	e5992000 	ldr	r2, [r9]
    ee78:	e3520000 	cmp	r2, #0
    ee7c:	e1a00002 	mov	r0, r2
    ee80:	0afffff6 	beq	ee60 <CUSBStandardHub::EnumeratePorts()+0x4d8>
    ee84:	e5923000 	ldr	r3, [r2]
    ee88:	e593300c 	ldr	r3, [r3, #12]
    ee8c:	e12fff33 	blx	r3
    ee90:	e3500000 	cmp	r0, #0
    ee94:	0affffe1 	beq	ee20 <CUSBStandardHub::EnumeratePorts()+0x498>
    ee98:	eb0058c4 	bl	251b0 <CLogger::Get()>
    ee9c:	e1a03008 	mov	r3, r8
    eea0:	e58d4000 	str	r4, [sp]
    eea4:	e3a02004 	mov	r2, #4
    eea8:	e1a01005 	mov	r1, r5
    eeac:	eb00599b 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    eeb0:	e5963014 	ldr	r3, [r6, #20]
    eeb4:	eaffffe9 	b	ee60 <CUSBStandardHub::EnumeratePorts()+0x4d8>
    eeb8:	eb0058bc 	bl	251b0 <CLogger::Get()>
    eebc:	e58d4000 	str	r4, [sp]
    eec0:	e30b37a8 	movw	r3, #47016	; 0xb7a8
    eec4:	e3a02001 	mov	r2, #1
    eec8:	e3403002 	movt	r3, #2
    eecc:	e59f1248 	ldr	r1, [pc, #584]	; f11c <CUSBStandardHub::EnumeratePorts()+0x794>
    eed0:	eb005992 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    eed4:	eaffff01 	b	eae0 <CUSBStandardHub::EnumeratePorts()+0x158>
    eed8:	e1a00007 	mov	r0, r7
    eedc:	ebfff8be 	bl	d1dc <CUSBDevice::GetSpeed() const>
    eee0:	e3500002 	cmp	r0, #2
    eee4:	1affff59 	bne	ec50 <CUSBStandardHub::EnumeratePorts()+0x2c8>
    eee8:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    eeec:	e3530002 	cmp	r3, #2
    eef0:	0affff56 	beq	ec50 <CUSBStandardHub::EnumeratePorts()+0x2c8>
    eef4:	e1a00007 	mov	r0, r7
    eef8:	e6ef3074 	uxtb	r3, r4
    eefc:	e58d3024 	str	r3, [sp, #36]	; 0x24
    ef00:	ebfff8b3 	bl	d1d4 <CUSBDevice::GetAddress() const>
    ef04:	e5993000 	ldr	r3, [r9]
    ef08:	e3530000 	cmp	r3, #0
    ef0c:	e58d0020 	str	r0, [sp, #32]
    ef10:	0a000047 	beq	f034 <CUSBStandardHub::EnumeratePorts()+0x6ac>
    ef14:	e3a03001 	mov	r3, #1
    ef18:	e58d301c 	str	r3, [sp, #28]
    ef1c:	eaffff4e 	b	ec5c <CUSBStandardHub::EnumeratePorts()+0x2d4>
    ef20:	e1a00005 	mov	r0, r5
    ef24:	e1a01007 	mov	r1, r7
    ef28:	eb004c13 	bl	21f7c <operator delete(void*, unsigned int)>
    ef2c:	e5963014 	ldr	r3, [r6, #20]
    ef30:	e3530000 	cmp	r3, #0
    ef34:	0a000076 	beq	f114 <CUSBStandardHub::EnumeratePorts()+0x78c>
    ef38:	e3a04001 	mov	r4, #1
    ef3c:	e30b37c0 	movw	r3, #47040	; 0xb7c0
    ef40:	e58d7014 	str	r7, [sp, #20]
    ef44:	e3403002 	movt	r3, #2
    ef48:	e1a09004 	mov	r9, r4
    ef4c:	e2865038 	add	r5, r6, #56	; 0x38
    ef50:	e58d3018 	str	r3, [sp, #24]
    ef54:	ea000005 	b	ef70 <CUSBStandardHub::EnumeratePorts()+0x5e8>
    ef58:	e5962014 	ldr	r2, [r6, #20]
    ef5c:	e2843001 	add	r3, r4, #1
    ef60:	e2855004 	add	r5, r5, #4
    ef64:	e1520004 	cmp	r2, r4
    ef68:	e1a04003 	mov	r4, r3
    ef6c:	9afffeaf 	bls	ea30 <CUSBStandardHub::EnumeratePorts()+0xa8>
    ef70:	e5952000 	ldr	r2, [r5]
    ef74:	e3a07000 	mov	r7, #0
    ef78:	e59d3014 	ldr	r3, [sp, #20]
    ef7c:	e6ff8074 	uxth	r8, r4
    ef80:	e58d7000 	str	r7, [sp]
    ef84:	e1a0100a 	mov	r1, sl
    ef88:	e58d2008 	str	r2, [sp, #8]
    ef8c:	e1a0000b 	mov	r0, fp
    ef90:	e58d300c 	str	r3, [sp, #12]
    ef94:	e3a020a3 	mov	r2, #163	; 0xa3
    ef98:	e1a03007 	mov	r3, r7
    ef9c:	e58d8004 	str	r8, [sp, #4]
    efa0:	ebfffc71 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    efa4:	e3500004 	cmp	r0, #4
    efa8:	1affffea 	bne	ef58 <CUSBStandardHub::EnumeratePorts()+0x5d0>
    efac:	e5953000 	ldr	r3, [r5]
    efb0:	e1d330b0 	ldrh	r3, [r3]
    efb4:	e3130008 	tst	r3, #8
    efb8:	0affffe6 	beq	ef58 <CUSBStandardHub::EnumeratePorts()+0x5d0>
    efbc:	e3a03001 	mov	r3, #1
    efc0:	e3a02023 	mov	r2, #35	; 0x23
    efc4:	e58d700c 	str	r7, [sp, #12]
    efc8:	e3a01008 	mov	r1, #8
    efcc:	e58d7008 	str	r7, [sp, #8]
    efd0:	e1a0000b 	mov	r0, fp
    efd4:	e58d1000 	str	r1, [sp]
    efd8:	e1a0100a 	mov	r1, sl
    efdc:	e58d8004 	str	r8, [sp, #4]
    efe0:	e1a09007 	mov	r9, r7
    efe4:	ebfffc60 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    efe8:	eb005870 	bl	251b0 <CLogger::Get()>
    efec:	e58d4000 	str	r4, [sp]
    eff0:	e59d3018 	ldr	r3, [sp, #24]
    eff4:	e3a02001 	mov	r2, #1
    eff8:	e59f111c 	ldr	r1, [pc, #284]	; f11c <CUSBStandardHub::EnumeratePorts()+0x794>
    effc:	eb005947 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f000:	eaffffd4 	b	ef58 <CUSBStandardHub::EnumeratePorts()+0x5d0>
    f004:	eb005869 	bl	251b0 <CLogger::Get()>
    f008:	e3a02001 	mov	r2, #1
    f00c:	e59f1108 	ldr	r1, [pc, #264]	; f11c <CUSBStandardHub::EnumeratePorts()+0x794>
    f010:	e30b384c 	movw	r3, #47180	; 0xb84c
    f014:	e3403002 	movt	r3, #2
    f018:	eb005940 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f01c:	e1a00005 	mov	r0, r5
    f020:	e1a01004 	mov	r1, r4
    f024:	eb004bd4 	bl	21f7c <operator delete(void*, unsigned int)>
    f028:	e1a00009 	mov	r0, r9
    f02c:	e28dd034 	add	sp, sp, #52	; 0x34
    f030:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f034:	e3a0004c 	mov	r0, #76	; 0x4c
    f038:	eb004bcb 	bl	21f6c <operator new(unsigned int)>
    f03c:	e6ef3074 	uxtb	r3, r4
    f040:	e58d3004 	str	r3, [sp, #4]
    f044:	e1a0100b 	mov	r1, fp
    f048:	e59d3020 	ldr	r3, [sp, #32]
    f04c:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    f050:	e58d3000 	str	r3, [sp]
    f054:	e3a03001 	mov	r3, #1
    f058:	e1a07000 	mov	r7, r0
    f05c:	ebfff780 	bl	ce64 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)>
    f060:	e5897000 	str	r7, [r9]
    f064:	e1a00007 	mov	r0, r7
    f068:	eaffff0d 	b	eca4 <CUSBStandardHub::EnumeratePorts()+0x31c>
    f06c:	e30b16cc 	movw	r1, #46796	; 0xb6cc
    f070:	e30b06e0 	movw	r0, #46816	; 0xb6e0
    f074:	e3401002 	movt	r1, #2
    f078:	e3400002 	movt	r0, #2
    f07c:	e3a0208c 	mov	r2, #140	; 0x8c
    f080:	eb0056c5 	bl	24b9c <assertion_failed>
    f084:	eafffe45 	b	e9a0 <CUSBStandardHub::EnumeratePorts()+0x18>
    f088:	e30b16cc 	movw	r1, #46796	; 0xb6cc
    f08c:	e30b06ec 	movw	r0, #46828	; 0xb6ec
    f090:	e3401002 	movt	r1, #2
    f094:	e3400002 	movt	r0, #2
    f098:	e3a0208f 	mov	r2, #143	; 0x8f
    f09c:	eb0056be 	bl	24b9c <assertion_failed>
    f0a0:	eafffe42 	b	e9b0 <CUSBStandardHub::EnumeratePorts()+0x28>
    f0a4:	e30b07e4 	movw	r0, #47076	; 0xb7e4
    f0a8:	e3a020fd 	mov	r2, #253	; 0xfd
    f0ac:	e3400002 	movt	r0, #2
    f0b0:	e59d1014 	ldr	r1, [sp, #20]
    f0b4:	eb0056b8 	bl	24b9c <assertion_failed>
    f0b8:	eafffed8 	b	ec20 <CUSBStandardHub::EnumeratePorts()+0x298>
    f0bc:	e3a09000 	mov	r9, #0
    f0c0:	eafffe5a 	b	ea30 <CUSBStandardHub::EnumeratePorts()+0xa8>
    f0c4:	e1a0100a 	mov	r1, sl
    f0c8:	e3a03000 	mov	r3, #0
    f0cc:	e1a0000b 	mov	r0, fp
    f0d0:	e58d300c 	str	r3, [sp, #12]
    f0d4:	e58d3008 	str	r3, [sp, #8]
    f0d8:	e3a02008 	mov	r2, #8
    f0dc:	e3a03001 	mov	r3, #1
    f0e0:	e58d2000 	str	r2, [sp]
    f0e4:	e58d7004 	str	r7, [sp, #4]
    f0e8:	e3a02023 	mov	r2, #35	; 0x23
    f0ec:	ebfffc1e 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f0f0:	e3a09000 	mov	r9, #0
    f0f4:	eb00582d 	bl	251b0 <CLogger::Get()>
    f0f8:	e58d4000 	str	r4, [sp]
    f0fc:	e30b37c0 	movw	r3, #47040	; 0xb7c0
    f100:	e3a02001 	mov	r2, #1
    f104:	e3403002 	movt	r3, #2
    f108:	e59f100c 	ldr	r1, [pc, #12]	; f11c <CUSBStandardHub::EnumeratePorts()+0x794>
    f10c:	eb005903 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f110:	eafffe46 	b	ea30 <CUSBStandardHub::EnumeratePorts()+0xa8>
    f114:	e3a09001 	mov	r9, #1
    f118:	eafffe44 	b	ea30 <CUSBStandardHub::EnumeratePorts()+0xa8>
    f11c:	0002b6c4 	.word	0x0002b6c4

0000f120 <CUSBStandardHub::Configure()>:
    f120:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f124:	e24dd020 	sub	sp, sp, #32
    f128:	e1a04000 	mov	r4, r0
    f12c:	eb000bc1 	bl	12038 <CUSBFunction::GetNumEndpoints() const>
    f130:	e3500001 	cmp	r0, #1
    f134:	0a000006 	beq	f154 <CUSBStandardHub::Configure()+0x34>
    f138:	e1a00004 	mov	r0, r4
    f13c:	e59f11fc 	ldr	r1, [pc, #508]	; f340 <CUSBStandardHub::Configure()+0x220>
    f140:	eb000c42 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
    f144:	e3a05000 	mov	r5, #0
    f148:	e1a00005 	mov	r0, r5
    f14c:	e28dd020 	add	sp, sp, #32
    f150:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f154:	e1a06000 	mov	r6, r0
    f158:	e3a01005 	mov	r1, #5
    f15c:	e1a00004 	mov	r0, r4
    f160:	eb000c27 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
    f164:	e3500000 	cmp	r0, #0
    f168:	0afffff2 	beq	f138 <CUSBStandardHub::Configure()+0x18>
    f16c:	e1d030d2 	ldrsb	r3, [r0, #2]
    f170:	e3530000 	cmp	r3, #0
    f174:	aaffffef 	bge	f138 <CUSBStandardHub::Configure()+0x18>
    f178:	e5d03003 	ldrb	r3, [r0, #3]
    f17c:	e203303f 	and	r3, r3, #63	; 0x3f
    f180:	e3530003 	cmp	r3, #3
    f184:	1affffeb 	bne	f138 <CUSBStandardHub::Configure()+0x18>
    f188:	e1a00004 	mov	r0, r4
    f18c:	eb000beb 	bl	12140 <CUSBFunction::Configure()>
    f190:	e2505000 	subs	r5, r0, #0
    f194:	0a00004d 	beq	f2d0 <CUSBStandardHub::Configure()+0x1b0>
    f198:	e5943010 	ldr	r3, [r4, #16]
    f19c:	e3530000 	cmp	r3, #0
    f1a0:	0a000005 	beq	f1bc <CUSBStandardHub::Configure()+0x9c>
    f1a4:	e30b16cc 	movw	r1, #46796	; 0xb6cc
    f1a8:	e30b0898 	movw	r0, #47256	; 0xb898
    f1ac:	e3401002 	movt	r1, #2
    f1b0:	e3400002 	movt	r0, #2
    f1b4:	e3a0205a 	mov	r2, #90	; 0x5a
    f1b8:	eb005677 	bl	24b9c <assertion_failed>
    f1bc:	e3a00009 	mov	r0, #9
    f1c0:	e3a06000 	mov	r6, #0
    f1c4:	eb004b68 	bl	21f6c <operator new(unsigned int)>
    f1c8:	e3a07009 	mov	r7, #9
    f1cc:	e5840010 	str	r0, [r4, #16]
    f1d0:	e1a00004 	mov	r0, r4
    f1d4:	eb000bc8 	bl	120fc <CUSBFunction::GetHost() const>
    f1d8:	e1a05000 	mov	r5, r0
    f1dc:	e1a00004 	mov	r0, r4
    f1e0:	eb000bb4 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
    f1e4:	e5942010 	ldr	r2, [r4, #16]
    f1e8:	e3a010a0 	mov	r1, #160	; 0xa0
    f1ec:	e58d600c 	str	r6, [sp, #12]
    f1f0:	e58d1008 	str	r1, [sp, #8]
    f1f4:	e1a03006 	mov	r3, r6
    f1f8:	e58d2000 	str	r2, [sp]
    f1fc:	e3a02029 	mov	r2, #41	; 0x29
    f200:	e58d7004 	str	r7, [sp, #4]
    f204:	e1a01000 	mov	r1, r0
    f208:	e1a00005 	mov	r0, r5
    f20c:	ebfffc01 	bl	e218 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    f210:	e1500007 	cmp	r0, r7
    f214:	e1a08000 	mov	r8, r0
    f218:	1a000020 	bne	f2a0 <CUSBStandardHub::Configure()+0x180>
    f21c:	e5943010 	ldr	r3, [r4, #16]
    f220:	e5d33002 	ldrb	r3, [r3, #2]
    f224:	e3530008 	cmp	r3, #8
    f228:	e5843014 	str	r3, [r4, #20]
    f22c:	8a00002e 	bhi	f2ec <CUSBStandardHub::Configure()+0x1cc>
    f230:	e28d0010 	add	r0, sp, #16
    f234:	eb005b64 	bl	25fcc <CString::CString()>
    f238:	e3013a0c 	movw	r3, #6668	; 0x1a0c
    f23c:	e3403003 	movt	r3, #3
    f240:	e28d0010 	add	r0, sp, #16
    f244:	e30b18d8 	movw	r1, #47320	; 0xb8d8
    f248:	e3401002 	movt	r1, #2
    f24c:	e5932000 	ldr	r2, [r3]
    f250:	e282c001 	add	ip, r2, #1
    f254:	e583c000 	str	ip, [r3]
    f258:	eb005eba 	bl	26d48 <CString::Format(char const*, ...)>
    f25c:	eb0057a6 	bl	250fc <CDeviceNameService::Get()>
    f260:	e1a05000 	mov	r5, r0
    f264:	e28d0010 	add	r0, sp, #16
    f268:	eb005b6e 	bl	26028 <CString::operator char const*() const>
    f26c:	e1a03006 	mov	r3, r6
    f270:	e1a02004 	mov	r2, r4
    f274:	e1a01000 	mov	r1, r0
    f278:	e1a00005 	mov	r0, r5
    f27c:	eb00572a 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    f280:	e1a00004 	mov	r0, r4
    f284:	ebfffdbf 	bl	e988 <CUSBStandardHub::EnumeratePorts()>
    f288:	e2505000 	subs	r5, r0, #0
    f28c:	13a05001 	movne	r5, #1
    f290:	0a000023 	beq	f324 <CUSBStandardHub::Configure()+0x204>
    f294:	e28d0010 	add	r0, sp, #16
    f298:	eb005b18 	bl	25f00 <CString::~CString()>
    f29c:	eaffffa9 	b	f148 <CUSBStandardHub::Configure()+0x28>
    f2a0:	eb0057c2 	bl	251b0 <CLogger::Get()>
    f2a4:	e3a02001 	mov	r2, #1
    f2a8:	e59f1090 	ldr	r1, [pc, #144]	; f340 <CUSBStandardHub::Configure()+0x220>
    f2ac:	e30b38a8 	movw	r3, #47272	; 0xb8a8
    f2b0:	e3403002 	movt	r3, #2
    f2b4:	e1a05006 	mov	r5, r6
    f2b8:	eb005898 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f2bc:	e1a01007 	mov	r1, r7
    f2c0:	e5940010 	ldr	r0, [r4, #16]
    f2c4:	eb004b2c 	bl	21f7c <operator delete(void*, unsigned int)>
    f2c8:	e5846010 	str	r6, [r4, #16]
    f2cc:	eaffff9d 	b	f148 <CUSBStandardHub::Configure()+0x28>
    f2d0:	eb0057b6 	bl	251b0 <CLogger::Get()>
    f2d4:	e1a02006 	mov	r2, r6
    f2d8:	e30b3880 	movw	r3, #47232	; 0xb880
    f2dc:	e59f105c 	ldr	r1, [pc, #92]	; f340 <CUSBStandardHub::Configure()+0x220>
    f2e0:	e3403002 	movt	r3, #2
    f2e4:	eb00588d 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f2e8:	eaffff96 	b	f148 <CUSBStandardHub::Configure()+0x28>
    f2ec:	eb0057af 	bl	251b0 <CLogger::Get()>
    f2f0:	e594c014 	ldr	ip, [r4, #20]
    f2f4:	e3a02001 	mov	r2, #1
    f2f8:	e59f1040 	ldr	r1, [pc, #64]	; f340 <CUSBStandardHub::Configure()+0x220>
    f2fc:	e30b38c4 	movw	r3, #47300	; 0xb8c4
    f300:	e3403002 	movt	r3, #2
    f304:	e58dc000 	str	ip, [sp]
    f308:	e1a05006 	mov	r5, r6
    f30c:	eb005883 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f310:	e1a01008 	mov	r1, r8
    f314:	e5940010 	ldr	r0, [r4, #16]
    f318:	eb004b17 	bl	21f7c <operator delete(void*, unsigned int)>
    f31c:	e5846010 	str	r6, [r4, #16]
    f320:	eaffff88 	b	f148 <CUSBStandardHub::Configure()+0x28>
    f324:	eb0057a1 	bl	251b0 <CLogger::Get()>
    f328:	e30b38e0 	movw	r3, #47328	; 0xb8e0
    f32c:	e3a02001 	mov	r2, #1
    f330:	e3403002 	movt	r3, #2
    f334:	e59f1004 	ldr	r1, [pc, #4]	; f340 <CUSBStandardHub::Configure()+0x220>
    f338:	eb005878 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f33c:	eaffffd4 	b	f294 <CUSBStandardHub::Configure()+0x174>
    f340:	0002b6c4 	.word	0x0002b6c4

0000f344 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
    f344:	e1c022f0 	strd	r2, [r0, #32]
    f348:	e1a01003 	mov	r1, r3
    f34c:	e1a00002 	mov	r0, r2
    f350:	e12fff1e 	bx	lr

0000f354 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
    f354:	e92d4070 	push	{r4, r5, r6, lr}
    f358:	e1a04000 	mov	r4, r0
    f35c:	e5905028 	ldr	r5, [r0, #40]	; 0x28
    f360:	e59f3084 	ldr	r3, [pc, #132]	; f3ec <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x98>
    f364:	e3550000 	cmp	r5, #0
    f368:	e5803000 	str	r3, [r0]
    f36c:	0a000004 	beq	f384 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x30>
    f370:	e1a00005 	mov	r0, r5
    f374:	eb00426f 	bl	1fd38 <CPartitionManager::~CPartitionManager()>
    f378:	e1a00005 	mov	r0, r5
    f37c:	e3a01024 	mov	r1, #36	; 0x24
    f380:	eb004afd 	bl	21f7c <operator delete(void*, unsigned int)>
    f384:	e5945014 	ldr	r5, [r4, #20]
    f388:	e3a03000 	mov	r3, #0
    f38c:	e5843028 	str	r3, [r4, #40]	; 0x28
    f390:	e1550003 	cmp	r5, r3
    f394:	0a000004 	beq	f3ac <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x58>
    f398:	e1a00005 	mov	r0, r5
    f39c:	ebfffaec 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
    f3a0:	e1a00005 	mov	r0, r5
    f3a4:	e3a01018 	mov	r1, #24
    f3a8:	eb004af3 	bl	21f7c <operator delete(void*, unsigned int)>
    f3ac:	e5945010 	ldr	r5, [r4, #16]
    f3b0:	e3a03000 	mov	r3, #0
    f3b4:	e5843014 	str	r3, [r4, #20]
    f3b8:	e1550003 	cmp	r5, r3
    f3bc:	0a000004 	beq	f3d4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x80>
    f3c0:	e1a00005 	mov	r0, r5
    f3c4:	ebfffae2 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
    f3c8:	e1a00005 	mov	r0, r5
    f3cc:	e3a01018 	mov	r1, #24
    f3d0:	eb004ae9 	bl	21f7c <operator delete(void*, unsigned int)>
    f3d4:	e3a03000 	mov	r3, #0
    f3d8:	e1a00004 	mov	r0, r4
    f3dc:	e5843010 	str	r3, [r4, #16]
    f3e0:	eb000a64 	bl	11d78 <CUSBFunction::~CUSBFunction()>
    f3e4:	e1a00004 	mov	r0, r4
    f3e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f3ec:	0002b900 	.word	0x0002b900

0000f3f0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
    f3f0:	e92d4010 	push	{r4, lr}
    f3f4:	e1a04000 	mov	r4, r0
    f3f8:	ebffffd5 	bl	f354 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
    f3fc:	e1a00004 	mov	r0, r4
    f400:	e3a01030 	mov	r1, #48	; 0x30
    f404:	eb004adc 	bl	21f7c <operator delete(void*, unsigned int)>
    f408:	e1a00004 	mov	r0, r4
    f40c:	e8bd8010 	pop	{r4, pc}

0000f410 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
    f410:	e92d4010 	push	{r4, lr}
    f414:	e1a04000 	mov	r4, r0
    f418:	eb000aa7 	bl	11ebc <CUSBFunction::CUSBFunction(CUSBFunction*)>
    f41c:	e59f2028 	ldr	r2, [pc, #40]	; f44c <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x3c>
    f420:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    f424:	e3a03000 	mov	r3, #0
    f428:	e1a00004 	mov	r0, r4
    f42c:	e5843010 	str	r3, [r4, #16]
    f430:	e5842000 	str	r2, [r4]
    f434:	edc40b08 	vstr	d16, [r4, #32]
    f438:	e5843014 	str	r3, [r4, #20]
    f43c:	e5843018 	str	r3, [r4, #24]
    f440:	e584301c 	str	r3, [r4, #28]
    f444:	e5843028 	str	r3, [r4, #40]	; 0x28
    f448:	e8bd8010 	pop	{r4, pc}
    f44c:	0002b900 	.word	0x0002b900

0000f450 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
    f450:	e590001c 	ldr	r0, [r0, #28]
    f454:	e12fff1e 	bx	lr

0000f458 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>:
    f458:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    f45c:	e2519000 	subs	r9, r1, #0
    f460:	e24dd034 	sub	sp, sp, #52	; 0x34
    f464:	e1a04000 	mov	r4, r0
    f468:	e1a06002 	mov	r6, r2
    f46c:	e1a08003 	mov	r8, r3
    f470:	e59d5050 	ldr	r5, [sp, #80]	; 0x50
    f474:	e59d7054 	ldr	r7, [sp, #84]	; 0x54
    f478:	0a000067 	beq	f61c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x1c4>
    f47c:	e2463006 	sub	r3, r6, #6
    f480:	e353000a 	cmp	r3, #10
    f484:	8a00004f 	bhi	f5c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x170>
    f488:	e2983000 	adds	r3, r8, #0
    f48c:	13a03001 	movne	r3, #1
    f490:	e3550000 	cmp	r5, #0
    f494:	03833001 	orreq	r3, r3, #1
    f498:	e3530000 	cmp	r3, #0
    f49c:	0a000050 	beq	f5e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x18c>
    f4a0:	e3a0201f 	mov	r2, #31
    f4a4:	e3a01000 	mov	r1, #0
    f4a8:	e28d0010 	add	r0, sp, #16
    f4ac:	eb004e22 	bl	22d3c <memset>
    f4b0:	e3570000 	cmp	r7, #0
    f4b4:	e5943018 	ldr	r3, [r4, #24]
    f4b8:	e1a02006 	mov	r2, r6
    f4bc:	e5ddc01e 	ldrb	ip, [sp, #30]
    f4c0:	13a00080 	movne	r0, #128	; 0x80
    f4c4:	e5dde01d 	ldrb	lr, [sp, #29]
    f4c8:	03a00000 	moveq	r0, #0
    f4cc:	e2833001 	add	r3, r3, #1
    f4d0:	e1a01009 	mov	r1, r9
    f4d4:	e5843018 	str	r3, [r4, #24]
    f4d8:	e7c4c016 	bfi	ip, r6, #0, #5
    f4dc:	e7c3e01f 	bfc	lr, #0, #4
    f4e0:	e58d3014 	str	r3, [sp, #20]
    f4e4:	e5cde01d 	strb	lr, [sp, #29]
    f4e8:	e3053355 	movw	r3, #21333	; 0x5355
    f4ec:	e5cdc01e 	strb	ip, [sp, #30]
    f4f0:	e3443342 	movt	r3, #17218	; 0x4342
    f4f4:	e58d5018 	str	r5, [sp, #24]
    f4f8:	e58d3010 	str	r3, [sp, #16]
    f4fc:	e5cd001c 	strb	r0, [sp, #28]
    f500:	e28d001f 	add	r0, sp, #31
    f504:	eb004f24 	bl	2319c <memcpy>
    f508:	e1a00004 	mov	r0, r4
    f50c:	eb000afa 	bl	120fc <CUSBFunction::GetHost() const>
    f510:	e2506000 	subs	r6, r0, #0
    f514:	0a000039 	beq	f600 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x1a8>
    f518:	e28d2010 	add	r2, sp, #16
    f51c:	e3a0301f 	mov	r3, #31
    f520:	e5941014 	ldr	r1, [r4, #20]
    f524:	e1a00006 	mov	r0, r6
    f528:	ebfffb6d 	bl	e2e4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
    f52c:	e3500000 	cmp	r0, #0
    f530:	ba000062 	blt	f6c0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x268>
    f534:	e3550000 	cmp	r5, #0
    f538:	0a000009 	beq	f564 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x10c>
    f53c:	e594c010 	ldr	ip, [r4, #16]
    f540:	e3570000 	cmp	r7, #0
    f544:	e1a03005 	mov	r3, r5
    f548:	e5941014 	ldr	r1, [r4, #20]
    f54c:	e1a02008 	mov	r2, r8
    f550:	e1a00006 	mov	r0, r6
    f554:	11a0100c 	movne	r1, ip
    f558:	ebfffb61 	bl	e2e4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
    f55c:	e2505000 	subs	r5, r0, #0
    f560:	ba00005e 	blt	f6e0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x288>
    f564:	e1a00006 	mov	r0, r6
    f568:	e3a0300d 	mov	r3, #13
    f56c:	e1a0200d 	mov	r2, sp
    f570:	e5941010 	ldr	r1, [r4, #16]
    f574:	ebfffb5a 	bl	e2e4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
    f578:	e350000d 	cmp	r0, #13
    f57c:	1a00002d 	bne	f638 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x1e0>
    f580:	e59d2000 	ldr	r2, [sp]
    f584:	e3053355 	movw	r3, #21333	; 0x5355
    f588:	e3453342 	movt	r3, #21314	; 0x5342
    f58c:	e1520003 	cmp	r2, r3
    f590:	1a000030 	bne	f658 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x200>
    f594:	e5943018 	ldr	r3, [r4, #24]
    f598:	e59d2004 	ldr	r2, [sp, #4]
    f59c:	e1520003 	cmp	r2, r3
    f5a0:	1a000034 	bne	f678 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x220>
    f5a4:	e5dd300c 	ldrb	r3, [sp, #12]
    f5a8:	e3530000 	cmp	r3, #0
    f5ac:	1a000039 	bne	f698 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x240>
    f5b0:	e59d3008 	ldr	r3, [sp, #8]
    f5b4:	e3530000 	cmp	r3, #0
    f5b8:	1a000038 	bne	f6a0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x248>
    f5bc:	e1a00005 	mov	r0, r5
    f5c0:	e28dd034 	add	sp, sp, #52	; 0x34
    f5c4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    f5c8:	e30b1924 	movw	r1, #47396	; 0xb924
    f5cc:	e30b0948 	movw	r0, #47432	; 0xb948
    f5d0:	e3401002 	movt	r1, #2
    f5d4:	e3400002 	movt	r0, #2
    f5d8:	e3002216 	movw	r2, #534	; 0x216
    f5dc:	eb00556e 	bl	24b9c <assertion_failed>
    f5e0:	eaffffa8 	b	f488 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x30>
    f5e4:	e30b1924 	movw	r1, #47396	; 0xb924
    f5e8:	e30b096c 	movw	r0, #47468	; 0xb96c
    f5ec:	e3401002 	movt	r1, #2
    f5f0:	e3400002 	movt	r0, #2
    f5f4:	e3002217 	movw	r2, #535	; 0x217
    f5f8:	eb005567 	bl	24b9c <assertion_failed>
    f5fc:	eaffffa7 	b	f4a0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x48>
    f600:	e30b1924 	movw	r1, #47396	; 0xb924
    f604:	e30b06e0 	movw	r0, #46816	; 0xb6e0
    f608:	e3401002 	movt	r1, #2
    f60c:	e3400002 	movt	r0, #2
    f610:	e3002226 	movw	r2, #550	; 0x226
    f614:	eb005560 	bl	24b9c <assertion_failed>
    f618:	eaffffbe 	b	f518 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0xc0>
    f61c:	e30b1924 	movw	r1, #47396	; 0xb924
    f620:	e30b0938 	movw	r0, #47416	; 0xb938
    f624:	e3401002 	movt	r1, #2
    f628:	e3400002 	movt	r0, #2
    f62c:	e3002215 	movw	r2, #533	; 0x215
    f630:	eb005559 	bl	24b9c <assertion_failed>
    f634:	eaffff90 	b	f47c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x24>
    f638:	eb0056dc 	bl	251b0 <CLogger::Get()>
    f63c:	e30b39b8 	movw	r3, #47544	; 0xb9b8
    f640:	e3a02001 	mov	r2, #1
    f644:	e3403002 	movt	r3, #2
    f648:	e59f10b0 	ldr	r1, [pc, #176]	; f700 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f64c:	e3e05000 	mvn	r5, #0
    f650:	eb0057b2 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f654:	eaffffd8 	b	f5bc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f658:	eb0056d4 	bl	251b0 <CLogger::Get()>
    f65c:	e30b39cc 	movw	r3, #47564	; 0xb9cc
    f660:	e3a02001 	mov	r2, #1
    f664:	e3403002 	movt	r3, #2
    f668:	e59f1090 	ldr	r1, [pc, #144]	; f700 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f66c:	e3e05000 	mvn	r5, #0
    f670:	eb0057aa 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f674:	eaffffd0 	b	f5bc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f678:	eb0056cc 	bl	251b0 <CLogger::Get()>
    f67c:	e30b39e4 	movw	r3, #47588	; 0xb9e4
    f680:	e3a02001 	mov	r2, #1
    f684:	e3403002 	movt	r3, #2
    f688:	e59f1070 	ldr	r1, [pc, #112]	; f700 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f68c:	e3e05000 	mvn	r5, #0
    f690:	eb0057a2 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f694:	eaffffc8 	b	f5bc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f698:	e3e05000 	mvn	r5, #0
    f69c:	eaffffc6 	b	f5bc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f6a0:	eb0056c2 	bl	251b0 <CLogger::Get()>
    f6a4:	e30b39f8 	movw	r3, #47608	; 0xb9f8
    f6a8:	e3a02001 	mov	r2, #1
    f6ac:	e3403002 	movt	r3, #2
    f6b0:	e59f1048 	ldr	r1, [pc, #72]	; f700 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f6b4:	e3e05000 	mvn	r5, #0
    f6b8:	eb005798 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f6bc:	eaffffbe 	b	f5bc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f6c0:	eb0056ba 	bl	251b0 <CLogger::Get()>
    f6c4:	e30b398c 	movw	r3, #47500	; 0xb98c
    f6c8:	e3a02001 	mov	r2, #1
    f6cc:	e3403002 	movt	r3, #2
    f6d0:	e59f1028 	ldr	r1, [pc, #40]	; f700 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f6d4:	e3e05000 	mvn	r5, #0
    f6d8:	eb005790 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f6dc:	eaffffb6 	b	f5bc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f6e0:	eb0056b2 	bl	251b0 <CLogger::Get()>
    f6e4:	e30b39a0 	movw	r3, #47520	; 0xb9a0
    f6e8:	e3a02001 	mov	r2, #1
    f6ec:	e3403002 	movt	r3, #2
    f6f0:	e59f1008 	ldr	r1, [pc, #8]	; f700 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x2a8>
    f6f4:	e3e05000 	mvn	r5, #0
    f6f8:	eb005788 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f6fc:	eaffffae 	b	f5bc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)+0x164>
    f700:	0002b91c 	.word	0x0002b91c

0000f704 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
    f704:	e92d4370 	push	{r4, r5, r6, r8, r9, lr}
    f708:	e2516000 	subs	r6, r1, #0
    f70c:	e24dd018 	sub	sp, sp, #24
    f710:	e1a05000 	mov	r5, r0
    f714:	e1a04002 	mov	r4, r2
    f718:	0a00002e 	beq	f7d8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd4>
    f71c:	e1c522d0 	ldrd	r2, [r5, #32]
    f720:	e30001ff 	movw	r0, #511	; 0x1ff
    f724:	e3a01000 	mov	r1, #0
    f728:	e30091ff 	movw	r9, #511	; 0x1ff
    f72c:	e0011003 	and	r1, r1, r3
    f730:	e0000002 	and	r0, r0, r2
    f734:	e1901001 	orrs	r1, r0, r1
    f738:	e3e08000 	mvn	r8, #0
    f73c:	13a01001 	movne	r1, #1
    f740:	03a01000 	moveq	r1, #0
    f744:	e1530009 	cmp	r3, r9
    f748:	01520008 	cmpeq	r2, r8
    f74c:	83811001 	orrhi	r1, r1, #1
    f750:	e3510000 	cmp	r1, #0
    f754:	1a00001b 	bne	f7c8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc4>
    f758:	e7e8c054 	ubfx	ip, r4, #0, #9
    f75c:	e1a024a2 	lsr	r2, r2, #9
    f760:	e35c0000 	cmp	ip, #0
    f764:	e1822b83 	orr	r2, r2, r3, lsl #23
    f768:	1a000016 	bne	f7c8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc4>
    f76c:	e6bf1f32 	rev	r1, r2
    f770:	e1a00005 	mov	r0, r5
    f774:	e58d100e 	str	r1, [sp, #14]
    f778:	e1a03006 	mov	r3, r6
    f77c:	e58d4000 	str	r4, [sp]
    f780:	e1a0e4a4 	lsr	lr, r4, #9
    f784:	e3a05001 	mov	r5, #1
    f788:	e3a0200a 	mov	r2, #10
    f78c:	e58d5004 	str	r5, [sp, #4]
    f790:	e28d100c 	add	r1, sp, #12
    f794:	e5cdc00d 	strb	ip, [sp, #13]
    f798:	e6bfefbe 	rev16	lr, lr
    f79c:	e5cdc012 	strb	ip, [sp, #18]
    f7a0:	e5cdc015 	strb	ip, [sp, #21]
    f7a4:	e3a0c028 	mov	ip, #40	; 0x28
    f7a8:	e1cde1b3 	strh	lr, [sp, #19]
    f7ac:	e5cdc00c 	strb	ip, [sp, #12]
    f7b0:	ebffff28 	bl	f458 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    f7b4:	e1500004 	cmp	r0, r4
    f7b8:	1a00000d 	bne	f7f4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf0>
    f7bc:	e1a00004 	mov	r0, r4
    f7c0:	e28dd018 	add	sp, sp, #24
    f7c4:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    f7c8:	e3e04000 	mvn	r4, #0
    f7cc:	e1a00004 	mov	r0, r4
    f7d0:	e28dd018 	add	sp, sp, #24
    f7d4:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    f7d8:	e30b1924 	movw	r1, #47396	; 0xb924
    f7dc:	e30b097c 	movw	r0, #47484	; 0xb97c
    f7e0:	e3401002 	movt	r1, #2
    f7e4:	e3400002 	movt	r0, #2
    f7e8:	e30021ca 	movw	r2, #458	; 0x1ca
    f7ec:	eb0054ea 	bl	24b9c <assertion_failed>
    f7f0:	eaffffc9 	b	f71c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x18>
    f7f4:	eb00566d 	bl	251b0 <CLogger::Get()>
    f7f8:	e1a02005 	mov	r2, r5
    f7fc:	e30b3a10 	movw	r3, #47632	; 0xba10
    f800:	e59f100c 	ldr	r1, [pc, #12]	; f814 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x110>
    f804:	e3403002 	movt	r3, #2
    f808:	e3e04000 	mvn	r4, #0
    f80c:	eb005743 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f810:	eaffffe9 	b	f7bc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xb8>
    f814:	0002b91c 	.word	0x0002b91c

0000f818 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
    f818:	e92d4370 	push	{r4, r5, r6, r8, r9, lr}
    f81c:	e2516000 	subs	r6, r1, #0
    f820:	e24dd018 	sub	sp, sp, #24
    f824:	e1a05000 	mov	r5, r0
    f828:	e1a04002 	mov	r4, r2
    f82c:	0a00002d 	beq	f8e8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
    f830:	e1c522d0 	ldrd	r2, [r5, #32]
    f834:	e30001ff 	movw	r0, #511	; 0x1ff
    f838:	e3a01000 	mov	r1, #0
    f83c:	e30091ff 	movw	r9, #511	; 0x1ff
    f840:	e0011003 	and	r1, r1, r3
    f844:	e0000002 	and	r0, r0, r2
    f848:	e1901001 	orrs	r1, r0, r1
    f84c:	e3e08000 	mvn	r8, #0
    f850:	13a01001 	movne	r1, #1
    f854:	03a01000 	moveq	r1, #0
    f858:	e1530009 	cmp	r3, r9
    f85c:	01520008 	cmpeq	r2, r8
    f860:	83811001 	orrhi	r1, r1, #1
    f864:	e3510000 	cmp	r1, #0
    f868:	1a00001b 	bne	f8dc <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc4>
    f86c:	e7e8e054 	ubfx	lr, r4, #0, #9
    f870:	e1a084a2 	lsr	r8, r2, #9
    f874:	e35e0000 	cmp	lr, #0
    f878:	e1888b83 	orr	r8, r8, r3, lsl #23
    f87c:	1a000016 	bne	f8dc <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc4>
    f880:	e58de004 	str	lr, [sp, #4]
    f884:	e1a00005 	mov	r0, r5
    f888:	e1a03006 	mov	r3, r6
    f88c:	e58d4000 	str	r4, [sp]
    f890:	e1a0c4a4 	lsr	ip, r4, #9
    f894:	e3a0200a 	mov	r2, #10
    f898:	e28d100c 	add	r1, sp, #12
    f89c:	e6bfcfbc 	rev16	ip, ip
    f8a0:	e5cde012 	strb	lr, [sp, #18]
    f8a4:	e6bf8f38 	rev	r8, r8
    f8a8:	e5cde015 	strb	lr, [sp, #21]
    f8ac:	e3a0502a 	mov	r5, #42	; 0x2a
    f8b0:	e3a0e008 	mov	lr, #8
    f8b4:	e58d800e 	str	r8, [sp, #14]
    f8b8:	e1cdc1b3 	strh	ip, [sp, #19]
    f8bc:	e5cd500c 	strb	r5, [sp, #12]
    f8c0:	e5cde00d 	strb	lr, [sp, #13]
    f8c4:	ebfffee3 	bl	f458 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    f8c8:	e3500000 	cmp	r0, #0
    f8cc:	a1a00004 	movge	r0, r4
    f8d0:	ba00000b 	blt	f904 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xec>
    f8d4:	e28dd018 	add	sp, sp, #24
    f8d8:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    f8dc:	e3e00000 	mvn	r0, #0
    f8e0:	e28dd018 	add	sp, sp, #24
    f8e4:	e8bd8370 	pop	{r4, r5, r6, r8, r9, pc}
    f8e8:	e30b1924 	movw	r1, #47396	; 0xb924
    f8ec:	e30b097c 	movw	r0, #47484	; 0xb97c
    f8f0:	e3401002 	movt	r1, #2
    f8f4:	e3400002 	movt	r0, #2
    f8f8:	e30021ef 	movw	r2, #495	; 0x1ef
    f8fc:	eb0054a6 	bl	24b9c <assertion_failed>
    f900:	eaffffca 	b	f830 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x18>
    f904:	eb005629 	bl	251b0 <CLogger::Get()>
    f908:	e30b3a20 	movw	r3, #47648	; 0xba20
    f90c:	e3a02001 	mov	r2, #1
    f910:	e3403002 	movt	r3, #2
    f914:	e59f1008 	ldr	r1, [pc, #8]	; f924 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x10c>
    f918:	eb005700 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f91c:	e3e00000 	mvn	r0, #0
    f920:	eaffffeb 	b	f8d4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xbc>
    f924:	0002b91c 	.word	0x0002b91c

0000f928 <CUSBBulkOnlyMassStorageDevice::Reset()>:
    f928:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f92c:	e24dd014 	sub	sp, sp, #20
    f930:	e1a05000 	mov	r5, r0
    f934:	eb0009f0 	bl	120fc <CUSBFunction::GetHost() const>
    f938:	e2506000 	subs	r6, r0, #0
    f93c:	0a000030 	beq	fa04 <CUSBBulkOnlyMassStorageDevice::Reset()+0xdc>
    f940:	e1a00005 	mov	r0, r5
    f944:	e3a04000 	mov	r4, #0
    f948:	eb0009da 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
    f94c:	e58d400c 	str	r4, [sp, #12]
    f950:	e58d4008 	str	r4, [sp, #8]
    f954:	e3a030ff 	mov	r3, #255	; 0xff
    f958:	e58d4004 	str	r4, [sp, #4]
    f95c:	e3a02021 	mov	r2, #33	; 0x21
    f960:	e58d4000 	str	r4, [sp]
    f964:	e1a01000 	mov	r1, r0
    f968:	e1a00006 	mov	r0, r6
    f96c:	ebfff9fe 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f970:	e1500004 	cmp	r0, r4
    f974:	ba000029 	blt	fa20 <CUSBBulkOnlyMassStorageDevice::Reset()+0xf8>
    f978:	e1a00005 	mov	r0, r5
    f97c:	e3a07001 	mov	r7, #1
    f980:	eb0009cc 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
    f984:	e58d400c 	str	r4, [sp, #12]
    f988:	e58d4008 	str	r4, [sp, #8]
    f98c:	e1a03007 	mov	r3, r7
    f990:	e58d4000 	str	r4, [sp]
    f994:	e3a02002 	mov	r2, #2
    f998:	e58d7004 	str	r7, [sp, #4]
    f99c:	e1a01000 	mov	r1, r0
    f9a0:	e1a00006 	mov	r0, r6
    f9a4:	ebfff9f0 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f9a8:	e3500000 	cmp	r0, #0
    f9ac:	ba000023 	blt	fa40 <CUSBBulkOnlyMassStorageDevice::Reset()+0x118>
    f9b0:	e1a00005 	mov	r0, r5
    f9b4:	eb0009bf 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
    f9b8:	e3a01002 	mov	r1, #2
    f9bc:	e1a02001 	mov	r2, r1
    f9c0:	e58d1004 	str	r1, [sp, #4]
    f9c4:	e58d400c 	str	r4, [sp, #12]
    f9c8:	e1a03007 	mov	r3, r7
    f9cc:	e58d4008 	str	r4, [sp, #8]
    f9d0:	e58d4000 	str	r4, [sp]
    f9d4:	e1a01000 	mov	r1, r0
    f9d8:	e1a00006 	mov	r0, r6
    f9dc:	ebfff9e2 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f9e0:	e3500000 	cmp	r0, #0
    f9e4:	ba00001d 	blt	fa60 <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
    f9e8:	e5950010 	ldr	r0, [r5, #16]
    f9ec:	ebfff9c5 	bl	e108 <CUSBEndpoint::ResetPID()>
    f9f0:	e5950014 	ldr	r0, [r5, #20]
    f9f4:	ebfff9c3 	bl	e108 <CUSBEndpoint::ResetPID()>
    f9f8:	e1a00004 	mov	r0, r4
    f9fc:	e28dd014 	add	sp, sp, #20
    fa00:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fa04:	e30b1924 	movw	r1, #47396	; 0xb924
    fa08:	e30b06e0 	movw	r0, #46816	; 0xb6e0
    fa0c:	e3401002 	movt	r1, #2
    fa10:	e3400002 	movt	r0, #2
    fa14:	e3002265 	movw	r2, #613	; 0x265
    fa18:	eb00545f 	bl	24b9c <assertion_failed>
    fa1c:	eaffffc7 	b	f940 <CUSBBulkOnlyMassStorageDevice::Reset()+0x18>
    fa20:	eb0055e2 	bl	251b0 <CLogger::Get()>
    fa24:	e30b3a30 	movw	r3, #47664	; 0xba30
    fa28:	e3a02004 	mov	r2, #4
    fa2c:	e3403002 	movt	r3, #2
    fa30:	e59f1048 	ldr	r1, [pc, #72]	; fa80 <CUSBBulkOnlyMassStorageDevice::Reset()+0x158>
    fa34:	eb0056b9 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa38:	e3e00000 	mvn	r0, #0
    fa3c:	eaffffee 	b	f9fc <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
    fa40:	eb0055da 	bl	251b0 <CLogger::Get()>
    fa44:	e30b3a44 	movw	r3, #47684	; 0xba44
    fa48:	e3a02004 	mov	r2, #4
    fa4c:	e3403002 	movt	r3, #2
    fa50:	e59f1028 	ldr	r1, [pc, #40]	; fa80 <CUSBBulkOnlyMassStorageDevice::Reset()+0x158>
    fa54:	eb0056b1 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa58:	e3e00000 	mvn	r0, #0
    fa5c:	eaffffe6 	b	f9fc <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
    fa60:	eb0055d2 	bl	251b0 <CLogger::Get()>
    fa64:	e30b3a64 	movw	r3, #47716	; 0xba64
    fa68:	e3a02004 	mov	r2, #4
    fa6c:	e3403002 	movt	r3, #2
    fa70:	e59f1008 	ldr	r1, [pc, #8]	; fa80 <CUSBBulkOnlyMassStorageDevice::Reset()+0x158>
    fa74:	eb0056a9 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa78:	e3e00000 	mvn	r0, #0
    fa7c:	eaffffde 	b	f9fc <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
    fa80:	0002b91c 	.word	0x0002b91c

0000fa84 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
    fa84:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fa88:	e1a06002 	mov	r6, r2
    fa8c:	e1a07000 	mov	r7, r0
    fa90:	e1a08001 	mov	r8, r1
    fa94:	e1a09002 	mov	r9, r2
    fa98:	e3a05004 	mov	r5, #4
    fa9c:	e1a02006 	mov	r2, r6
    faa0:	e1a01008 	mov	r1, r8
    faa4:	e1a00007 	mov	r0, r7
    faa8:	ebffff15 	bl	f704 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
    faac:	e1a04000 	mov	r4, r0
    fab0:	e1540006 	cmp	r4, r6
    fab4:	e1a00007 	mov	r0, r7
    fab8:	1a000001 	bne	fac4 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x40>
    fabc:	e1a00009 	mov	r0, r9
    fac0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fac4:	ebffff97 	bl	f928 <CUSBBulkOnlyMassStorageDevice::Reset()>
    fac8:	e3500000 	cmp	r0, #0
    facc:	1a000004 	bne	fae4 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
    fad0:	e2555001 	subs	r5, r5, #1
    fad4:	1afffff0 	bne	fa9c <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
    fad8:	e1a09004 	mov	r9, r4
    fadc:	e1a00009 	mov	r0, r9
    fae0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fae4:	e1a09000 	mov	r9, r0
    fae8:	eafffff3 	b	fabc <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x38>

0000faec <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
    faec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    faf0:	e1a06002 	mov	r6, r2
    faf4:	e1a07000 	mov	r7, r0
    faf8:	e1a08001 	mov	r8, r1
    fafc:	e1a09002 	mov	r9, r2
    fb00:	e3a05004 	mov	r5, #4
    fb04:	e1a02006 	mov	r2, r6
    fb08:	e1a01008 	mov	r1, r8
    fb0c:	e1a00007 	mov	r0, r7
    fb10:	ebffff40 	bl	f818 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
    fb14:	e1a04000 	mov	r4, r0
    fb18:	e1540006 	cmp	r4, r6
    fb1c:	e1a00007 	mov	r0, r7
    fb20:	1a000001 	bne	fb2c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x40>
    fb24:	e1a00009 	mov	r0, r9
    fb28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fb2c:	ebffff7d 	bl	f928 <CUSBBulkOnlyMassStorageDevice::Reset()>
    fb30:	e3500000 	cmp	r0, #0
    fb34:	1a000004 	bne	fb4c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
    fb38:	e2555001 	subs	r5, r5, #1
    fb3c:	1afffff0 	bne	fb04 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
    fb40:	e1a09004 	mov	r9, r4
    fb44:	e1a00009 	mov	r0, r9
    fb48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fb4c:	e1a09000 	mov	r9, r0
    fb50:	eafffff3 	b	fb24 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x38>

0000fb54 <CUSBBulkOnlyMassStorageDevice::Configure()>:
    fb54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fb58:	e24dd060 	sub	sp, sp, #96	; 0x60
    fb5c:	e1a05000 	mov	r5, r0
    fb60:	eb000934 	bl	12038 <CUSBFunction::GetNumEndpoints() const>
    fb64:	e3500001 	cmp	r0, #1
    fb68:	ca000004 	bgt	fb80 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
    fb6c:	ea0000c6 	b	fe8c <CUSBBulkOnlyMassStorageDevice::Configure()+0x338>
    fb70:	e5d43003 	ldrb	r3, [r4, #3]
    fb74:	e203303f 	and	r3, r3, #63	; 0x3f
    fb78:	e3530002 	cmp	r3, #2
    fb7c:	0a000030 	beq	fc44 <CUSBBulkOnlyMassStorageDevice::Configure()+0xf0>
    fb80:	e3a01005 	mov	r1, #5
    fb84:	e1a00005 	mov	r0, r5
    fb88:	eb00099d 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
    fb8c:	e2504000 	subs	r4, r0, #0
    fb90:	1afffff6 	bne	fb70 <CUSBBulkOnlyMassStorageDevice::Configure()+0x1c>
    fb94:	e5953010 	ldr	r3, [r5, #16]
    fb98:	e1a00005 	mov	r0, r5
    fb9c:	e3530000 	cmp	r3, #0
    fba0:	0a0000ba 	beq	fe90 <CUSBBulkOnlyMassStorageDevice::Configure()+0x33c>
    fba4:	e5953014 	ldr	r3, [r5, #20]
    fba8:	e3530000 	cmp	r3, #0
    fbac:	0a0000b7 	beq	fe90 <CUSBBulkOnlyMassStorageDevice::Configure()+0x33c>
    fbb0:	eb000962 	bl	12140 <CUSBFunction::Configure()>
    fbb4:	e2506000 	subs	r6, r0, #0
    fbb8:	0a0000aa 	beq	fe68 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
    fbbc:	e3a0c024 	mov	ip, #36	; 0x24
    fbc0:	e3a06001 	mov	r6, #1
    fbc4:	e58dc000 	str	ip, [sp]
    fbc8:	e28d303c 	add	r3, sp, #60	; 0x3c
    fbcc:	e58d6004 	str	r6, [sp, #4]
    fbd0:	e3a02006 	mov	r2, #6
    fbd4:	e28d100c 	add	r1, sp, #12
    fbd8:	e1a00005 	mov	r0, r5
    fbdc:	e5cdc010 	strb	ip, [sp, #16]
    fbe0:	e3a0c012 	mov	ip, #18
    fbe4:	e5cd400d 	strb	r4, [sp, #13]
    fbe8:	e5cd400e 	strb	r4, [sp, #14]
    fbec:	e5cd400f 	strb	r4, [sp, #15]
    fbf0:	e5cd4011 	strb	r4, [sp, #17]
    fbf4:	e5cdc00c 	strb	ip, [sp, #12]
    fbf8:	ebfffe16 	bl	f458 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    fbfc:	e3500024 	cmp	r0, #36	; 0x24
    fc00:	1a0000b5 	bne	fedc <CUSBBulkOnlyMassStorageDevice::Configure()+0x388>
    fc04:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
    fc08:	e213301f 	ands	r3, r3, #31
    fc0c:	01a04003 	moveq	r4, r3
    fc10:	03a06063 	moveq	r6, #99	; 0x63
    fc14:	0a00002a 	beq	fcc4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x170>
    fc18:	eb005564 	bl	251b0 <CLogger::Get()>
    fc1c:	e5dd103c 	ldrb	r1, [sp, #60]	; 0x3c
    fc20:	e1a02006 	mov	r2, r6
    fc24:	e30b3a9c 	movw	r3, #47772	; 0xba9c
    fc28:	e201101f 	and	r1, r1, #31
    fc2c:	e3403002 	movt	r3, #2
    fc30:	e58d1000 	str	r1, [sp]
    fc34:	e1a06004 	mov	r6, r4
    fc38:	e59f139c 	ldr	r1, [pc, #924]	; ffdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    fc3c:	eb005637 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fc40:	ea00008e 	b	fe80 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    fc44:	e1d430d2 	ldrsb	r3, [r4, #2]
    fc48:	e1a00005 	mov	r0, r5
    fc4c:	e3530000 	cmp	r3, #0
    fc50:	ba000094 	blt	fea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x354>
    fc54:	e5953014 	ldr	r3, [r5, #20]
    fc58:	e3530000 	cmp	r3, #0
    fc5c:	1a00008a 	bne	fe8c <CUSBBulkOnlyMassStorageDevice::Configure()+0x338>
    fc60:	eb000904 	bl	12078 <CUSBFunction::GetDevice() const>
    fc64:	e1a07000 	mov	r7, r0
    fc68:	e3a00018 	mov	r0, #24
    fc6c:	eb0048be 	bl	21f6c <operator new(unsigned int)>
    fc70:	e1a02004 	mov	r2, r4
    fc74:	e1a01007 	mov	r1, r7
    fc78:	e1a06000 	mov	r6, r0
    fc7c:	ebfff821 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
    fc80:	e5856014 	str	r6, [r5, #20]
    fc84:	eaffffbd 	b	fb80 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
    fc88:	e5ddc01d 	ldrb	ip, [sp, #29]
    fc8c:	e58d7004 	str	r7, [sp, #4]
    fc90:	e7c0c014 	bfi	ip, r4, #0, #1
    fc94:	e58de000 	str	lr, [sp]
    fc98:	e7c7c094 	bfi	ip, r4, #1, #7
    fc9c:	e5cd801c 	strb	r8, [sp, #28]
    fca0:	e1cd41be 	strh	r4, [sp, #30]
    fca4:	e5cde020 	strb	lr, [sp, #32]
    fca8:	e5cd4021 	strb	r4, [sp, #33]	; 0x21
    fcac:	e5cdc01d 	strb	ip, [sp, #29]
    fcb0:	ebfffde8 	bl	f458 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    fcb4:	e3500000 	cmp	r0, #0
    fcb8:	ba000091 	blt	ff04 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3b0>
    fcbc:	e2566001 	subs	r6, r6, #1
    fcc0:	0a0000a0 	beq	ff48 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3f4>
    fcc4:	eb004c0e 	bl	22d04 <CTimer::Get()>
    fcc8:	e3a00064 	mov	r0, #100	; 0x64
    fccc:	eb004bbf 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
    fcd0:	e3a03000 	mov	r3, #0
    fcd4:	e3a02006 	mov	r2, #6
    fcd8:	e28d1014 	add	r1, sp, #20
    fcdc:	e58d4004 	str	r4, [sp, #4]
    fce0:	e1a00005 	mov	r0, r5
    fce4:	e58d4000 	str	r4, [sp]
    fce8:	e3a07001 	mov	r7, #1
    fcec:	e5cd4014 	strb	r4, [sp, #20]
    fcf0:	e3a08003 	mov	r8, #3
    fcf4:	e5cd4015 	strb	r4, [sp, #21]
    fcf8:	e5cd4016 	strb	r4, [sp, #22]
    fcfc:	e5cd4017 	strb	r4, [sp, #23]
    fd00:	e5cd4018 	strb	r4, [sp, #24]
    fd04:	e5cd4019 	strb	r4, [sp, #25]
    fd08:	ebfffdd2 	bl	f458 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    fd0c:	e3a0e012 	mov	lr, #18
    fd10:	e28d3028 	add	r3, sp, #40	; 0x28
    fd14:	e3a02006 	mov	r2, #6
    fd18:	e28d101c 	add	r1, sp, #28
    fd1c:	e3500000 	cmp	r0, #0
    fd20:	e1a00005 	mov	r0, r5
    fd24:	baffffd7 	blt	fc88 <CUSBBulkOnlyMassStorageDevice::Configure()+0x134>
    fd28:	e5dd001d 	ldrb	r0, [sp, #29]
    fd2c:	e3a02008 	mov	r2, #8
    fd30:	e5ddc024 	ldrb	ip, [sp, #36]	; 0x24
    fd34:	e28d3014 	add	r3, sp, #20
    fd38:	e7c00014 	bfi	r0, r4, #0, #1
    fd3c:	e58d2000 	str	r2, [sp]
    fd40:	e7c70094 	bfi	r0, r4, #1, #7
    fd44:	e28d101c 	add	r1, sp, #28
    fd48:	e5cd001d 	strb	r0, [sp, #29]
    fd4c:	e3a06001 	mov	r6, #1
    fd50:	e7c0c014 	bfi	ip, r4, #0, #1
    fd54:	e58d6004 	str	r6, [sp, #4]
    fd58:	e3a0200a 	mov	r2, #10
    fd5c:	e1a00005 	mov	r0, r5
    fd60:	e7c7c094 	bfi	ip, r4, #1, #7
    fd64:	e1cd41be 	strh	r4, [sp, #30]
    fd68:	e5cdc024 	strb	ip, [sp, #36]	; 0x24
    fd6c:	e3a0c025 	mov	ip, #37	; 0x25
    fd70:	e1cd42b0 	strh	r4, [sp, #32]
    fd74:	e1cd42b2 	strh	r4, [sp, #34]	; 0x22
    fd78:	e5cd4025 	strb	r4, [sp, #37]	; 0x25
    fd7c:	e5cdc01c 	strb	ip, [sp, #28]
    fd80:	ebfffdb4 	bl	f458 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, int)>
    fd84:	e3500008 	cmp	r0, #8
    fd88:	1a000075 	bne	ff64 <CUSBBulkOnlyMassStorageDevice::Configure()+0x410>
    fd8c:	e59d4018 	ldr	r4, [sp, #24]
    fd90:	e6bf4f34 	rev	r4, r4
    fd94:	e3540c02 	cmp	r4, #512	; 0x200
    fd98:	1a000061 	bne	ff24 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3d0>
    fd9c:	e59d3014 	ldr	r3, [sp, #20]
    fda0:	e6bf3f33 	rev	r3, r3
    fda4:	e585301c 	str	r3, [r5, #28]
    fda8:	e3730001 	cmn	r3, #1
    fdac:	0a000082 	beq	ffbc <CUSBBulkOnlyMassStorageDevice::Configure()+0x468>
    fdb0:	e2833001 	add	r3, r3, #1
    fdb4:	e585301c 	str	r3, [r5, #28]
    fdb8:	eb0054fc 	bl	251b0 <CLogger::Get()>
    fdbc:	e595c01c 	ldr	ip, [r5, #28]
    fdc0:	e3a02004 	mov	r2, #4
    fdc4:	e59f1210 	ldr	r1, [pc, #528]	; ffdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    fdc8:	e30b3b24 	movw	r3, #47908	; 0xbb24
    fdcc:	e3014a10 	movw	r4, #6672	; 0x1a10
    fdd0:	e3403002 	movt	r3, #2
    fdd4:	e1a0c5ac 	lsr	ip, ip, #11
    fdd8:	e3404003 	movt	r4, #3
    fddc:	e58dc000 	str	ip, [sp]
    fde0:	eb0055ce 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fde4:	e28d0028 	add	r0, sp, #40	; 0x28
    fde8:	eb005877 	bl	25fcc <CString::CString()>
    fdec:	e5942000 	ldr	r2, [r4]
    fdf0:	e28d0028 	add	r0, sp, #40	; 0x28
    fdf4:	e30b1b3c 	movw	r1, #47932	; 0xbb3c
    fdf8:	e3401002 	movt	r1, #2
    fdfc:	eb005bd1 	bl	26d48 <CString::Format(char const*, ...)>
    fe00:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    fe04:	e3530000 	cmp	r3, #0
    fe08:	0a000005 	beq	fe24 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d0>
    fe0c:	e30b1924 	movw	r1, #47396	; 0xb924
    fe10:	e30b0b44 	movw	r0, #47940	; 0xbb44
    fe14:	e3401002 	movt	r1, #2
    fe18:	e3400002 	movt	r0, #2
    fe1c:	e3a02f5f 	mov	r2, #380	; 0x17c
    fe20:	eb00535d 	bl	24b9c <assertion_failed>
    fe24:	e28d0028 	add	r0, sp, #40	; 0x28
    fe28:	eb00587e 	bl	26028 <CString::operator char const*() const>
    fe2c:	e1a07000 	mov	r7, r0
    fe30:	e3a00024 	mov	r0, #36	; 0x24
    fe34:	eb00484c 	bl	21f6c <operator new(unsigned int)>
    fe38:	e1a02007 	mov	r2, r7
    fe3c:	e1a01005 	mov	r1, r5
    fe40:	e1a06000 	mov	r6, r0
    fe44:	eb003faf 	bl	1fd08 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
    fe48:	e5856028 	str	r6, [r5, #40]	; 0x28
    fe4c:	e1a00006 	mov	r0, r6
    fe50:	eb003fcc 	bl	1fd88 <CPartitionManager::Initialize()>
    fe54:	e2506000 	subs	r6, r0, #0
    fe58:	1a000049 	bne	ff84 <CUSBBulkOnlyMassStorageDevice::Configure()+0x430>
    fe5c:	e28d0028 	add	r0, sp, #40	; 0x28
    fe60:	eb005826 	bl	25f00 <CString::~CString()>
    fe64:	ea000005 	b	fe80 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    fe68:	eb0054d0 	bl	251b0 <CLogger::Get()>
    fe6c:	e30b3880 	movw	r3, #47232	; 0xb880
    fe70:	e3a02001 	mov	r2, #1
    fe74:	e3403002 	movt	r3, #2
    fe78:	e59f115c 	ldr	r1, [pc, #348]	; ffdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    fe7c:	eb0055a7 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe80:	e1a00006 	mov	r0, r6
    fe84:	e28dd060 	add	sp, sp, #96	; 0x60
    fe88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fe8c:	e1a00005 	mov	r0, r5
    fe90:	e59f1144 	ldr	r1, [pc, #324]	; ffdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    fe94:	e3a06000 	mov	r6, #0
    fe98:	eb0008ec 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
    fe9c:	e1a00006 	mov	r0, r6
    fea0:	e28dd060 	add	sp, sp, #96	; 0x60
    fea4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fea8:	e5953010 	ldr	r3, [r5, #16]
    feac:	e3530000 	cmp	r3, #0
    feb0:	1afffff6 	bne	fe90 <CUSBBulkOnlyMassStorageDevice::Configure()+0x33c>
    feb4:	eb00086f 	bl	12078 <CUSBFunction::GetDevice() const>
    feb8:	e1a07000 	mov	r7, r0
    febc:	e3a00018 	mov	r0, #24
    fec0:	eb004829 	bl	21f6c <operator new(unsigned int)>
    fec4:	e1a02004 	mov	r2, r4
    fec8:	e1a01007 	mov	r1, r7
    fecc:	e1a06000 	mov	r6, r0
    fed0:	ebfff78c 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
    fed4:	e5856010 	str	r6, [r5, #16]
    fed8:	eaffff28 	b	fb80 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
    fedc:	eb0054b3 	bl	251b0 <CLogger::Get()>
    fee0:	e1a02006 	mov	r2, r6
    fee4:	e59f10f0 	ldr	r1, [pc, #240]	; ffdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    fee8:	e30b3a84 	movw	r3, #47748	; 0xba84
    feec:	e3403002 	movt	r3, #2
    fef0:	e1a06004 	mov	r6, r4
    fef4:	eb005589 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fef8:	e1a00006 	mov	r0, r6
    fefc:	e28dd060 	add	sp, sp, #96	; 0x60
    ff00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ff04:	eb0054a9 	bl	251b0 <CLogger::Get()>
    ff08:	e1a02007 	mov	r2, r7
    ff0c:	e30b3abc 	movw	r3, #47804	; 0xbabc
    ff10:	e59f10c4 	ldr	r1, [pc, #196]	; ffdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    ff14:	e3403002 	movt	r3, #2
    ff18:	e3a06000 	mov	r6, #0
    ff1c:	eb00557f 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff20:	eaffffd6 	b	fe80 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    ff24:	eb0054a1 	bl	251b0 <CLogger::Get()>
    ff28:	e1a02006 	mov	r2, r6
    ff2c:	e58d4000 	str	r4, [sp]
    ff30:	e30b3aec 	movw	r3, #47852	; 0xbaec
    ff34:	e59f10a0 	ldr	r1, [pc, #160]	; ffdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    ff38:	e3403002 	movt	r3, #2
    ff3c:	eb005577 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff40:	e3a06000 	mov	r6, #0
    ff44:	eaffffcd 	b	fe80 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    ff48:	eb005498 	bl	251b0 <CLogger::Get()>
    ff4c:	e1a02007 	mov	r2, r7
    ff50:	e30b3b60 	movw	r3, #47968	; 0xbb60
    ff54:	e59f1080 	ldr	r1, [pc, #128]	; ffdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    ff58:	e3403002 	movt	r3, #2
    ff5c:	eb00556f 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff60:	eaffffc6 	b	fe80 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    ff64:	eb005491 	bl	251b0 <CLogger::Get()>
    ff68:	e1a02006 	mov	r2, r6
    ff6c:	e30b3ad4 	movw	r3, #47828	; 0xbad4
    ff70:	e59f1064 	ldr	r1, [pc, #100]	; ffdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    ff74:	e3403002 	movt	r3, #2
    ff78:	e3a06000 	mov	r6, #0
    ff7c:	eb005567 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff80:	eaffffbe 	b	fe80 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    ff84:	eb00545c 	bl	250fc <CDeviceNameService::Get()>
    ff88:	e1a07000 	mov	r7, r0
    ff8c:	e28d0028 	add	r0, sp, #40	; 0x28
    ff90:	eb005824 	bl	26028 <CString::operator char const*() const>
    ff94:	e3a03001 	mov	r3, #1
    ff98:	e1a02005 	mov	r2, r5
    ff9c:	e1a06003 	mov	r6, r3
    ffa0:	e1a01000 	mov	r1, r0
    ffa4:	e1a00007 	mov	r0, r7
    ffa8:	eb0053df 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    ffac:	e5943000 	ldr	r3, [r4]
    ffb0:	e0833006 	add	r3, r3, r6
    ffb4:	e5843000 	str	r3, [r4]
    ffb8:	eaffffa7 	b	fe5c <CUSBBulkOnlyMassStorageDevice::Configure()+0x308>
    ffbc:	eb00547b 	bl	251b0 <CLogger::Get()>
    ffc0:	e1a02006 	mov	r2, r6
    ffc4:	e30b3b08 	movw	r3, #47880	; 0xbb08
    ffc8:	e59f100c 	ldr	r1, [pc, #12]	; ffdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
    ffcc:	e3403002 	movt	r3, #2
    ffd0:	e3a06000 	mov	r6, #0
    ffd4:	eb005551 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ffd8:	eaffffa8 	b	fe80 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    ffdc:	0002b91c 	.word	0x0002b91c

0000ffe0 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    ffe0:	e12fff1e 	bx	lr

0000ffe4 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    ffe4:	e3a03000 	mov	r3, #0
    ffe8:	e5803008 	str	r3, [r0, #8]
    ffec:	e12fff1e 	bx	lr

0000fff0 <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
    fff0:	e12fff1e 	bx	lr

0000fff4 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    fff4:	e3a00000 	mov	r0, #0
    fff8:	e12fff1e 	bx	lr

0000fffc <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    fffc:	e92d4010 	push	{r4, lr}
   10000:	e3a01010 	mov	r1, #16
   10004:	e1a04000 	mov	r4, r0
   10008:	eb0047db 	bl	21f7c <operator delete(void*, unsigned int)>
   1000c:	e1a00004 	mov	r0, r4
   10010:	e8bd8010 	pop	{r4, pc}

00010014 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
   10014:	e5903008 	ldr	r3, [r0, #8]
   10018:	e92d4010 	push	{r4, lr}
   1001c:	e2433001 	sub	r3, r3, #1
   10020:	e3530004 	cmp	r3, #4
   10024:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   10028:	ea000011 	b	10074 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x60>
   1002c:	00010058 	.word	0x00010058
   10030:	00010048 	.word	0x00010048
   10034:	00010048 	.word	0x00010048
   10038:	00010040 	.word	0x00010040
   1003c:	00010040 	.word	0x00010040
   10040:	e3a00000 	mov	r0, #0
   10044:	e8bd8010 	pop	{r4, pc}
   10048:	e3000271 	movw	r0, #625	; 0x271
   1004c:	eb004aef 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
   10050:	e3a00001 	mov	r0, #1
   10054:	e8bd8010 	pop	{r4, pc}
   10058:	e1a02000 	mov	r2, r0
   1005c:	e3a01002 	mov	r1, #2
   10060:	e3a03003 	mov	r3, #3
   10064:	e5801008 	str	r1, [r0, #8]
   10068:	e3a00001 	mov	r0, #1
   1006c:	e582300c 	str	r3, [r2, #12]
   10070:	e8bd8010 	pop	{r4, pc}
   10074:	e3a0204e 	mov	r2, #78	; 0x4e
   10078:	e30b1b98 	movw	r1, #48024	; 0xbb98
   1007c:	e30b0130 	movw	r0, #45360	; 0xb130
   10080:	e3401002 	movt	r1, #2
   10084:	e3400002 	movt	r0, #2
   10088:	eb0052c3 	bl	24b9c <assertion_failed>
   1008c:	e3a00000 	mov	r0, #0
   10090:	e8bd8010 	pop	{r4, pc}

00010094 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
   10094:	e5903008 	ldr	r3, [r0, #8]
   10098:	e92d4010 	push	{r4, lr}
   1009c:	e3530000 	cmp	r3, #0
   100a0:	e24dd010 	sub	sp, sp, #16
   100a4:	e1a04000 	mov	r4, r0
   100a8:	0a00001b 	beq	1011c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x88>
   100ac:	e2433002 	sub	r3, r3, #2
   100b0:	e3530001 	cmp	r3, #1
   100b4:	9a000007 	bls	100d8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x44>
   100b8:	e30b1b98 	movw	r1, #48024	; 0xbb98
   100bc:	e30b0130 	movw	r0, #45360	; 0xb130
   100c0:	e3401002 	movt	r1, #2
   100c4:	e3400002 	movt	r0, #2
   100c8:	e3a02083 	mov	r2, #131	; 0x83
   100cc:	e28dd010 	add	sp, sp, #16
   100d0:	e8bd4010 	pop	{r4, lr}
   100d4:	ea0052b0 	b	24b9c <assertion_failed>
   100d8:	e3110001 	tst	r1, #1
   100dc:	13a03004 	movne	r3, #4
   100e0:	15803008 	strne	r3, [r0, #8]
   100e4:	1a00000a 	bne	10114 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x80>
   100e8:	e3110060 	tst	r1, #96	; 0x60
   100ec:	1a000016 	bne	1014c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb8>
   100f0:	e3110010 	tst	r1, #16
   100f4:	0a00001f 	beq	10178 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xe4>
   100f8:	e590300c 	ldr	r3, [r0, #12]
   100fc:	e3530000 	cmp	r3, #0
   10100:	e2433001 	sub	r3, r3, #1
   10104:	e580300c 	str	r3, [r0, #12]
   10108:	0a000017 	beq	1016c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xd8>
   1010c:	e3a03003 	mov	r3, #3
   10110:	e5843008 	str	r3, [r4, #8]
   10114:	e28dd010 	add	sp, sp, #16
   10118:	e8bd8010 	pop	{r4, pc}
   1011c:	e3110020 	tst	r1, #32
   10120:	1a000005 	bne	1013c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xa8>
   10124:	e30b1b98 	movw	r1, #48024	; 0xbb98
   10128:	e30b0bb0 	movw	r0, #48048	; 0xbbb0
   1012c:	e3401002 	movt	r1, #2
   10130:	e3400002 	movt	r0, #2
   10134:	e3a0205a 	mov	r2, #90	; 0x5a
   10138:	eb005297 	bl	24b9c <assertion_failed>
   1013c:	e3a03001 	mov	r3, #1
   10140:	e5843008 	str	r3, [r4, #8]
   10144:	e28dd010 	add	sp, sp, #16
   10148:	e8bd8010 	pop	{r4, pc}
   1014c:	e590300c 	ldr	r3, [r0, #12]
   10150:	e3530000 	cmp	r3, #0
   10154:	e2433001 	sub	r3, r3, #1
   10158:	e580300c 	str	r3, [r0, #12]
   1015c:	1affffea 	bne	1010c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
   10160:	e3a03005 	mov	r3, #5
   10164:	e5843008 	str	r3, [r4, #8]
   10168:	eaffffe9 	b	10114 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x80>
   1016c:	e3000271 	movw	r0, #625	; 0x271
   10170:	eb004aa6 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
   10174:	eafffff9 	b	10160 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xcc>
   10178:	e58d100c 	str	r1, [sp, #12]
   1017c:	eb00540b 	bl	251b0 <CLogger::Get()>
   10180:	e59d100c 	ldr	r1, [sp, #12]
   10184:	e3a02001 	mov	r2, #1
   10188:	e30b3bd4 	movw	r3, #48084	; 0xbbd4
   1018c:	e3403002 	movt	r3, #2
   10190:	e58d1000 	str	r1, [sp]
   10194:	e30b1be8 	movw	r1, #48104	; 0xbbe8
   10198:	e3401002 	movt	r1, #2
   1019c:	eb0054df 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   101a0:	e30b1b98 	movw	r1, #48024	; 0xbb98
   101a4:	e30b0130 	movw	r0, #45360	; 0xb130
   101a8:	e3401002 	movt	r1, #2
   101ac:	e3400002 	movt	r0, #2
   101b0:	e3a0207e 	mov	r2, #126	; 0x7e
   101b4:	eaffffc4 	b	100cc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x38>

000101b8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
   101b8:	e59f3048 	ldr	r3, [pc, #72]	; 10208 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x50>
   101bc:	e92d4010 	push	{r4, lr}
   101c0:	e1a04000 	mov	r4, r0
   101c4:	e5803000 	str	r3, [r0]
   101c8:	eb004acd 	bl	22d04 <CTimer::Get()>
   101cc:	e3a03006 	mov	r3, #6
   101d0:	e5843008 	str	r3, [r4, #8]
   101d4:	e3500000 	cmp	r0, #0
   101d8:	e5840004 	str	r0, [r4, #4]
   101dc:	0a000001 	beq	101e8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x30>
   101e0:	e1a00004 	mov	r0, r4
   101e4:	e8bd8010 	pop	{r4, pc}
   101e8:	e3a0202a 	mov	r2, #42	; 0x2a
   101ec:	e30b1b98 	movw	r1, #48024	; 0xbb98
   101f0:	e30a0988 	movw	r0, #43400	; 0xa988
   101f4:	e3401002 	movt	r1, #2
   101f8:	e3400002 	movt	r0, #2
   101fc:	eb005266 	bl	24b9c <assertion_failed>
   10200:	e1a00004 	mov	r0, r4
   10204:	e8bd8010 	pop	{r4, pc}
   10208:	0002bb7c 	.word	0x0002bb7c

0001020c <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   1020c:	e12fff1e 	bx	lr

00010210 <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
   10210:	e3a02000 	mov	r2, #0
   10214:	e3a03008 	mov	r3, #8
   10218:	e5802008 	str	r2, [r0, #8]
   1021c:	e5803010 	str	r3, [r0, #16]
   10220:	e12fff1e 	bx	lr

00010224 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
   10224:	e5900010 	ldr	r0, [r0, #16]
   10228:	e2000001 	and	r0, r0, #1
   1022c:	e12fff1e 	bx	lr

00010230 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   10230:	e92d4010 	push	{r4, lr}
   10234:	e3a01014 	mov	r1, #20
   10238:	e1a04000 	mov	r4, r0
   1023c:	eb00474e 	bl	21f7c <operator delete(void*, unsigned int)>
   10240:	e1a00004 	mov	r0, r4
   10244:	e8bd8010 	pop	{r4, pc}

00010248 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
   10248:	e92d4010 	push	{r4, lr}
   1024c:	e24dd010 	sub	sp, sp, #16
   10250:	e1a04000 	mov	r4, r0
   10254:	e3001408 	movw	r1, #1032	; 0x408
   10258:	e28d0004 	add	r0, sp, #4
   1025c:	e3431f98 	movt	r1, #16280	; 0x3f98
   10260:	ebffefb2 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   10264:	e5943010 	ldr	r3, [r4, #16]
   10268:	e3530008 	cmp	r3, #8
   1026c:	0a000009 	beq	10298 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x50>
   10270:	e28d0004 	add	r0, sp, #4
   10274:	ebffefb6 	bl	c154 <CDWHCIRegister::Read()>
   10278:	e5943010 	ldr	r3, [r4, #16]
   1027c:	e2000007 	and	r0, r0, #7
   10280:	e1500003 	cmp	r0, r3
   10284:	1afffff9 	bne	10270 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x28>
   10288:	e28d0004 	add	r0, sp, #4
   1028c:	ebffefaf 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
   10290:	e28dd010 	add	sp, sp, #16
   10294:	e8bd8010 	pop	{r4, pc}
   10298:	e28d0004 	add	r0, sp, #4
   1029c:	ebffefac 	bl	c154 <CDWHCIRegister::Read()>
   102a0:	e2803001 	add	r3, r0, #1
   102a4:	e2033007 	and	r3, r3, #7
   102a8:	e3530006 	cmp	r3, #6
   102ac:	03a03007 	moveq	r3, #7
   102b0:	e5843010 	str	r3, [r4, #16]
   102b4:	eaffffed 	b	10270 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x28>

000102b8 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
   102b8:	e5903008 	ldr	r3, [r0, #8]
   102bc:	e1a02000 	mov	r2, r0
   102c0:	e2433001 	sub	r3, r3, #1
   102c4:	e3530004 	cmp	r3, #4
   102c8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   102cc:	ea000017 	b	10330 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x78>
   102d0:	00010304 	.word	0x00010304
   102d4:	00010330 	.word	0x00010330
   102d8:	000102ec 	.word	0x000102ec
   102dc:	000102e4 	.word	0x000102e4
   102e0:	000102e4 	.word	0x000102e4
   102e4:	e3a00000 	mov	r0, #0
   102e8:	e12fff1e 	bx	lr
   102ec:	e5903010 	ldr	r3, [r0, #16]
   102f0:	e3a00001 	mov	r0, #1
   102f4:	e0833000 	add	r3, r3, r0
   102f8:	e2033007 	and	r3, r3, #7
   102fc:	e5823010 	str	r3, [r2, #16]
   10300:	e12fff1e 	bx	lr
   10304:	e5903010 	ldr	r3, [r0, #16]
   10308:	e3a01002 	mov	r1, #2
   1030c:	e3a00001 	mov	r0, #1
   10310:	e5821008 	str	r1, [r2, #8]
   10314:	e3530005 	cmp	r3, #5
   10318:	e0833001 	add	r3, r3, r1
   1031c:	e2033007 	and	r3, r3, #7
   10320:	e5823010 	str	r3, [r2, #16]
   10324:	13a01003 	movne	r1, #3
   10328:	e582100c 	str	r1, [r2, #12]
   1032c:	e12fff1e 	bx	lr
   10330:	e92d4010 	push	{r4, lr}
   10334:	e3a02055 	mov	r2, #85	; 0x55
   10338:	e30b1c14 	movw	r1, #48148	; 0xbc14
   1033c:	e30b0130 	movw	r0, #45360	; 0xb130
   10340:	e3401002 	movt	r1, #2
   10344:	e3400002 	movt	r0, #2
   10348:	eb005213 	bl	24b9c <assertion_failed>
   1034c:	e3a00000 	mov	r0, #0
   10350:	e8bd8010 	pop	{r4, pc}

00010354 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
   10354:	e5903008 	ldr	r3, [r0, #8]
   10358:	e92d4010 	push	{r4, lr}
   1035c:	e3530000 	cmp	r3, #0
   10360:	e24dd010 	sub	sp, sp, #16
   10364:	e1a04000 	mov	r4, r0
   10368:	0a000018 	beq	103d0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x7c>
   1036c:	e2433002 	sub	r3, r3, #2
   10370:	e3530001 	cmp	r3, #1
   10374:	9a000007 	bls	10398 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x44>
   10378:	e30b1c14 	movw	r1, #48148	; 0xbc14
   1037c:	e30b0130 	movw	r0, #45360	; 0xb130
   10380:	e3401002 	movt	r1, #2
   10384:	e3400002 	movt	r0, #2
   10388:	e3a02085 	mov	r2, #133	; 0x85
   1038c:	e28dd010 	add	sp, sp, #16
   10390:	e8bd4010 	pop	{r4, lr}
   10394:	ea005200 	b	24b9c <assertion_failed>
   10398:	e3110001 	tst	r1, #1
   1039c:	13a03004 	movne	r3, #4
   103a0:	15803008 	strne	r3, [r0, #8]
   103a4:	1a000007 	bne	103c8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x74>
   103a8:	e3110060 	tst	r1, #96	; 0x60
   103ac:	1a000013 	bne	10400 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xac>
   103b0:	e3110010 	tst	r1, #16
   103b4:	0a00001e 	beq	10434 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xe0>
   103b8:	e3000271 	movw	r0, #625	; 0x271
   103bc:	eb004a13 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
   103c0:	e3a03005 	mov	r3, #5
   103c4:	e5843008 	str	r3, [r4, #8]
   103c8:	e28dd010 	add	sp, sp, #16
   103cc:	e8bd8010 	pop	{r4, pc}
   103d0:	e3110020 	tst	r1, #32
   103d4:	1a000005 	bne	103f0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x9c>
   103d8:	e30b1c14 	movw	r1, #48148	; 0xbc14
   103dc:	e30b0bb0 	movw	r0, #48048	; 0xbbb0
   103e0:	e3401002 	movt	r1, #2
   103e4:	e3400002 	movt	r0, #2
   103e8:	e3a02061 	mov	r2, #97	; 0x61
   103ec:	eb0051ea 	bl	24b9c <assertion_failed>
   103f0:	e3a03001 	mov	r3, #1
   103f4:	e5843008 	str	r3, [r4, #8]
   103f8:	e28dd010 	add	sp, sp, #16
   103fc:	e8bd8010 	pop	{r4, pc}
   10400:	e590300c 	ldr	r3, [r0, #12]
   10404:	e3530000 	cmp	r3, #0
   10408:	e2433001 	sub	r3, r3, #1
   1040c:	e580300c 	str	r3, [r0, #12]
   10410:	13a03003 	movne	r3, #3
   10414:	15803008 	strne	r3, [r0, #8]
   10418:	1affffea 	bne	103c8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x74>
   1041c:	e3a03005 	mov	r3, #5
   10420:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   10424:	e5843008 	str	r3, [r4, #8]
   10428:	e28dd010 	add	sp, sp, #16
   1042c:	e8bd4010 	pop	{r4, lr}
   10430:	ea0049f6 	b	22c10 <CTimer::SimpleusDelay(unsigned int)>
   10434:	e58d100c 	str	r1, [sp, #12]
   10438:	eb00535c 	bl	251b0 <CLogger::Get()>
   1043c:	e59d100c 	ldr	r1, [sp, #12]
   10440:	e3a02001 	mov	r2, #1
   10444:	e30b3bd4 	movw	r3, #48084	; 0xbbd4
   10448:	e3403002 	movt	r3, #2
   1044c:	e58d1000 	str	r1, [sp]
   10450:	e30b1be8 	movw	r1, #48104	; 0xbbe8
   10454:	e3401002 	movt	r1, #2
   10458:	eb005430 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1045c:	e30b1c14 	movw	r1, #48148	; 0xbc14
   10460:	e30b0130 	movw	r0, #45360	; 0xb130
   10464:	e3401002 	movt	r1, #2
   10468:	e3400002 	movt	r0, #2
   1046c:	e3a02080 	mov	r2, #128	; 0x80
   10470:	eaffffc5 	b	1038c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x38>

00010474 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
   10474:	e59f3050 	ldr	r3, [pc, #80]	; 104cc <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x58>
   10478:	e92d4010 	push	{r4, lr}
   1047c:	e1a04000 	mov	r4, r0
   10480:	e5803000 	str	r3, [r0]
   10484:	eb004a1e 	bl	22d04 <CTimer::Get()>
   10488:	e3a02006 	mov	r2, #6
   1048c:	e3a03008 	mov	r3, #8
   10490:	e5842008 	str	r2, [r4, #8]
   10494:	e5843010 	str	r3, [r4, #16]
   10498:	e3500000 	cmp	r0, #0
   1049c:	e5840004 	str	r0, [r4, #4]
   104a0:	0a000001 	beq	104ac <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x38>
   104a4:	e1a00004 	mov	r0, r4
   104a8:	e8bd8010 	pop	{r4, pc}
   104ac:	e3a0202e 	mov	r2, #46	; 0x2e
   104b0:	e30b1c14 	movw	r1, #48148	; 0xbc14
   104b4:	e30a0988 	movw	r0, #43400	; 0xa988
   104b8:	e3401002 	movt	r1, #2
   104bc:	e3400002 	movt	r0, #2
   104c0:	eb0051b5 	bl	24b9c <assertion_failed>
   104c4:	e1a00004 	mov	r0, r4
   104c8:	e8bd8010 	pop	{r4, pc}
   104cc:	0002bbf8 	.word	0x0002bbf8

000104d0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   104d0:	e59f3028 	ldr	r3, [pc, #40]	; 10500 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x30>
   104d4:	e3a02000 	mov	r2, #0
   104d8:	e92d4010 	push	{r4, lr}
   104dc:	e1a04000 	mov	r4, r0
   104e0:	e5842440 	str	r2, [r4, #1088]	; 0x440
   104e4:	e2800020 	add	r0, r0, #32
   104e8:	e5843000 	str	r3, [r4]
   104ec:	eb001320 	bl	15174 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   104f0:	e1a00004 	mov	r0, r4
   104f4:	eb000197 	bl	10b58 <CUSBHIDDevice::~CUSBHIDDevice()>
   104f8:	e1a00004 	mov	r0, r4
   104fc:	e8bd8010 	pop	{r4, pc}
   10500:	0002bc34 	.word	0x0002bc34

00010504 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   10504:	e59f3034 	ldr	r3, [pc, #52]	; 10540 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x3c>
   10508:	e3a02000 	mov	r2, #0
   1050c:	e92d4010 	push	{r4, lr}
   10510:	e1a04000 	mov	r4, r0
   10514:	e5842440 	str	r2, [r4, #1088]	; 0x440
   10518:	e2800020 	add	r0, r0, #32
   1051c:	e5843000 	str	r3, [r4]
   10520:	eb001313 	bl	15174 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   10524:	e1a00004 	mov	r0, r4
   10528:	eb00018a 	bl	10b58 <CUSBHIDDevice::~CUSBHIDDevice()>
   1052c:	e1a00004 	mov	r0, r4
   10530:	e3a01e45 	mov	r1, #1104	; 0x450
   10534:	eb004690 	bl	21f7c <operator delete(void*, unsigned int)>
   10538:	e1a00004 	mov	r0, r4
   1053c:	e8bd8010 	pop	{r4, pc}
   10540:	0002bc34 	.word	0x0002bc34

00010544 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)>:
   10544:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10548:	e2516000 	subs	r6, r1, #0
   1054c:	e24dd004 	sub	sp, sp, #4
   10550:	0a000052 	beq	106a0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x15c>
   10554:	e5903440 	ldr	r3, [r0, #1088]	; 0x440
   10558:	e3530000 	cmp	r3, #0
   1055c:	0a000004 	beq	10574 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x30>
   10560:	e2861002 	add	r1, r6, #2
   10564:	e5d60000 	ldrb	r0, [r6]
   10568:	e28dd004 	add	sp, sp, #4
   1056c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10570:	e12fff13 	bx	r3
   10574:	e1a07000 	mov	r7, r0
   10578:	e2808020 	add	r8, r0, #32
   1057c:	e1a04003 	mov	r4, r3
   10580:	e3a05080 	mov	r5, #128	; 0x80
   10584:	e3a09001 	mov	r9, #1
   10588:	ea000006 	b	105a8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x64>
   1058c:	e1120003 	tst	r2, r3
   10590:	1a00003e 	bne	10690 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x14c>
   10594:	e2844001 	add	r4, r4, #1
   10598:	e2855001 	add	r5, r5, #1
   1059c:	e3540008 	cmp	r4, #8
   105a0:	e6ef5075 	uxtb	r5, r5
   105a4:	0a00000a 	beq	105d4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x90>
   105a8:	e5d62000 	ldrb	r2, [r6]
   105ac:	e1a03419 	lsl	r3, r9, r4
   105b0:	e1120003 	tst	r2, r3
   105b4:	e5d72444 	ldrb	r2, [r7, #1092]	; 0x444
   105b8:	0afffff3 	beq	1058c <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x48>
   105bc:	e1120003 	tst	r2, r3
   105c0:	1afffff3 	bne	10594 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x50>
   105c4:	e1a01005 	mov	r1, r5
   105c8:	e1a00008 	mov	r0, r8
   105cc:	eb001356 	bl	1532c <CKeyboardBehaviour::KeyPressed(unsigned char)>
   105d0:	eaffffef 	b	10594 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x50>
   105d4:	e2874d11 	add	r4, r7, #1088	; 0x440
   105d8:	e2868002 	add	r8, r6, #2
   105dc:	e286b008 	add	fp, r6, #8
   105e0:	e2879020 	add	r9, r7, #32
   105e4:	e1a05004 	mov	r5, r4
   105e8:	e2844006 	add	r4, r4, #6
   105ec:	e285500c 	add	r5, r5, #12
   105f0:	e1a0a004 	mov	sl, r4
   105f4:	e4da1001 	ldrb	r1, [sl], #1
   105f8:	e3510000 	cmp	r1, #0
   105fc:	0a000007 	beq	10620 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xdc>
   10600:	e1a03008 	mov	r3, r8
   10604:	e4d32001 	ldrb	r2, [r3], #1
   10608:	e1520001 	cmp	r2, r1
   1060c:	0a000003 	beq	10620 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xdc>
   10610:	e153000b 	cmp	r3, fp
   10614:	1afffffa 	bne	10604 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xc0>
   10618:	e1a00009 	mov	r0, r9
   1061c:	eb001353 	bl	15370 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   10620:	e15a0005 	cmp	sl, r5
   10624:	1afffff2 	bne	105f4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xb0>
   10628:	e2869001 	add	r9, r6, #1
   1062c:	e286a007 	add	sl, r6, #7
   10630:	e2878020 	add	r8, r7, #32
   10634:	ea000001 	b	10640 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xfc>
   10638:	e159000a 	cmp	r9, sl
   1063c:	0a00000c 	beq	10674 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x130>
   10640:	e5f91001 	ldrb	r1, [r9, #1]!
   10644:	e3510000 	cmp	r1, #0
   10648:	11a03004 	movne	r3, r4
   1064c:	0afffff9 	beq	10638 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xf4>
   10650:	e4d32001 	ldrb	r2, [r3], #1
   10654:	e1520001 	cmp	r2, r1
   10658:	0afffff6 	beq	10638 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xf4>
   1065c:	e1530005 	cmp	r3, r5
   10660:	1afffffa 	bne	10650 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x10c>
   10664:	e1a00008 	mov	r0, r8
   10668:	eb00132f 	bl	1532c <CKeyboardBehaviour::KeyPressed(unsigned char)>
   1066c:	e159000a 	cmp	r9, sl
   10670:	1afffff2 	bne	10640 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0xfc>
   10674:	e2870d11 	add	r0, r7, #1088	; 0x440
   10678:	e1a01006 	mov	r1, r6
   1067c:	e2800004 	add	r0, r0, #4
   10680:	e3a02008 	mov	r2, #8
   10684:	e28dd004 	add	sp, sp, #4
   10688:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1068c:	ea004ac2 	b	2319c <memcpy>
   10690:	e1a01005 	mov	r1, r5
   10694:	e1a00008 	mov	r0, r8
   10698:	eb001334 	bl	15370 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   1069c:	eaffffbc 	b	10594 <CUSBKeyboardDevice::ReportHandler(unsigned char const*)+0x50>
   106a0:	e28dd004 	add	sp, sp, #4
   106a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000106a8 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   106a8:	e92d4010 	push	{r4, lr}
   106ac:	e3a02008 	mov	r2, #8
   106b0:	e1a04000 	mov	r4, r0
   106b4:	eb000114 	bl	10b0c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   106b8:	e59f3030 	ldr	r3, [pc, #48]	; 106f0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x48>
   106bc:	e1a00004 	mov	r0, r4
   106c0:	e4803020 	str	r3, [r0], #32
   106c4:	eb00129d 	bl	15140 <CKeyboardBehaviour::CKeyboardBehaviour()>
   106c8:	e2840d11 	add	r0, r4, #1088	; 0x440
   106cc:	e3a01000 	mov	r1, #0
   106d0:	e3e03000 	mvn	r3, #0
   106d4:	e5841440 	str	r1, [r4, #1088]	; 0x440
   106d8:	e3a02008 	mov	r2, #8
   106dc:	e5c4344c 	strb	r3, [r4, #1100]	; 0x44c
   106e0:	e2800004 	add	r0, r0, #4
   106e4:	eb004994 	bl	22d3c <memset>
   106e8:	e1a00004 	mov	r0, r4
   106ec:	e8bd8010 	pop	{r4, pc}
   106f0:	0002bc34 	.word	0x0002bc34

000106f4 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   106f4:	e2800020 	add	r0, r0, #32
   106f8:	ea0012a7 	b	1519c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

000106fc <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   106fc:	e2800020 	add	r0, r0, #32
   10700:	ea0012b3 	b	151d4 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

00010704 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   10704:	e2800020 	add	r0, r0, #32
   10708:	ea0012bf 	b	1520c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

0001070c <CUSBKeyboardDevice::GetLEDStatus() const>:
   1070c:	e92d4010 	push	{r4, lr}
   10710:	e2800020 	add	r0, r0, #32
   10714:	eb0012ca 	bl	15244 <CKeyboardBehaviour::GetLEDStatus() const>
   10718:	e2003001 	and	r3, r0, #1
   1071c:	e3100002 	tst	r0, #2
   10720:	13833002 	orrne	r3, r3, #2
   10724:	e3100004 	tst	r0, #4
   10728:	13833004 	orrne	r3, r3, #4
   1072c:	e1a00003 	mov	r0, r3
   10730:	e8bd8010 	pop	{r4, pc}

00010734 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
   10734:	e92d4070 	push	{r4, r5, r6, lr}
   10738:	e2515000 	subs	r5, r1, #0
   1073c:	e1a04000 	mov	r4, r0
   10740:	0a000001 	beq	1074c <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x18>
   10744:	e5845440 	str	r5, [r4, #1088]	; 0x440
   10748:	e8bd8070 	pop	{r4, r5, r6, pc}
   1074c:	e30b1c5c 	movw	r1, #48220	; 0xbc5c
   10750:	e30b0c6c 	movw	r0, #48236	; 0xbc6c
   10754:	e3401002 	movt	r1, #2
   10758:	e3400002 	movt	r0, #2
   1075c:	e3a02075 	mov	r2, #117	; 0x75
   10760:	eb00510d 	bl	24b9c <assertion_failed>
   10764:	e5845440 	str	r5, [r4, #1088]	; 0x440
   10768:	e8bd8070 	pop	{r4, r5, r6, pc}

0001076c <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   1076c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10770:	e24dd01c 	sub	sp, sp, #28
   10774:	e28d4018 	add	r4, sp, #24
   10778:	e1a05000 	mov	r5, r0
   1077c:	e5641004 	strb	r1, [r4, #-4]!
   10780:	eb00065d 	bl	120fc <CUSBFunction::GetHost() const>
   10784:	e1a06000 	mov	r6, r0
   10788:	e1a00005 	mov	r0, r5
   1078c:	eb000649 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
   10790:	e1a07000 	mov	r7, r0
   10794:	e1a00005 	mov	r0, r5
   10798:	eb0006c9 	bl	122c4 <CUSBFunction::GetInterfaceNumber() const>
   1079c:	e58d4008 	str	r4, [sp, #8]
   107a0:	e1a01007 	mov	r1, r7
   107a4:	e3a02001 	mov	r2, #1
   107a8:	e3a03c02 	mov	r3, #512	; 0x200
   107ac:	e58d200c 	str	r2, [sp, #12]
   107b0:	e58d3000 	str	r3, [sp]
   107b4:	e3a02021 	mov	r2, #33	; 0x21
   107b8:	e3a03009 	mov	r3, #9
   107bc:	e6ffc070 	uxth	ip, r0
   107c0:	e1a00006 	mov	r0, r6
   107c4:	e58dc004 	str	ip, [sp, #4]
   107c8:	ebfff667 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   107cc:	e1e00000 	mvn	r0, r0
   107d0:	e1a00fa0 	lsr	r0, r0, #31
   107d4:	e28dd01c 	add	sp, sp, #28
   107d8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000107dc <CUSBKeyboardDevice::UpdateLEDs()>:
   107dc:	e5902440 	ldr	r2, [r0, #1088]	; 0x440
   107e0:	e3520000 	cmp	r2, #0
   107e4:	112fff1e 	bxne	lr
   107e8:	e92d4010 	push	{r4, lr}
   107ec:	e1a04000 	mov	r4, r0
   107f0:	ebffffc5 	bl	1070c <CUSBKeyboardDevice::GetLEDStatus() const>
   107f4:	e5d4344c 	ldrb	r3, [r4, #1100]	; 0x44c
   107f8:	e1530000 	cmp	r3, r0
   107fc:	08bd8010 	popeq	{r4, pc}
   10800:	e5c4044c 	strb	r0, [r4, #1100]	; 0x44c
   10804:	e1a01000 	mov	r1, r0
   10808:	e1a00004 	mov	r0, r4
   1080c:	ebffffd6 	bl	1076c <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   10810:	e3500000 	cmp	r0, #0
   10814:	18bd8010 	popne	{r4, pc}
   10818:	eb005264 	bl	251b0 <CLogger::Get()>
   1081c:	e30b3c88 	movw	r3, #48264	; 0xbc88
   10820:	e3a02001 	mov	r2, #1
   10824:	e3403002 	movt	r3, #2
   10828:	e59f1004 	ldr	r1, [pc, #4]	; 10834 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
   1082c:	e8bd4010 	pop	{r4, lr}
   10830:	ea00533a 	b	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10834:	0002bc54 	.word	0x0002bc54

00010838 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   10838:	e0802002 	add	r2, r0, r2
   1083c:	ea000002 	b	1084c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
   10840:	e4d03001 	ldrb	r3, [r0], #1
   10844:	e1530001 	cmp	r3, r1
   10848:	0a000003 	beq	1085c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
   1084c:	e1500002 	cmp	r0, r2
   10850:	1afffffa 	bne	10840 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
   10854:	e3a00000 	mov	r0, #0
   10858:	e12fff1e 	bx	lr
   1085c:	e3a00001 	mov	r0, #1
   10860:	e12fff1e 	bx	lr

00010864 <CUSBKeyboardDevice::Configure()>:
   10864:	e92d4070 	push	{r4, r5, r6, lr}
   10868:	e3a01000 	mov	r1, #0
   1086c:	e24dd010 	sub	sp, sp, #16
   10870:	e1a05000 	mov	r5, r0
   10874:	eb000124 	bl	10d0c <CUSBHIDDevice::Configure(unsigned int)>
   10878:	e2504000 	subs	r4, r0, #0
   1087c:	0a000019 	beq	108e8 <CUSBKeyboardDevice::Configure()+0x84>
   10880:	e1a0000d 	mov	r0, sp
   10884:	e3a04001 	mov	r4, #1
   10888:	eb0055cf 	bl	25fcc <CString::CString()>
   1088c:	e3013a14 	movw	r3, #6676	; 0x1a14
   10890:	e3403003 	movt	r3, #3
   10894:	e1a0000d 	mov	r0, sp
   10898:	e30b1cbc 	movw	r1, #48316	; 0xbcbc
   1089c:	e3401002 	movt	r1, #2
   108a0:	e5932000 	ldr	r2, [r3]
   108a4:	e082c004 	add	ip, r2, r4
   108a8:	e583c000 	str	ip, [r3]
   108ac:	eb005925 	bl	26d48 <CString::Format(char const*, ...)>
   108b0:	eb005211 	bl	250fc <CDeviceNameService::Get()>
   108b4:	e1a06000 	mov	r6, r0
   108b8:	e1a0000d 	mov	r0, sp
   108bc:	eb0055d9 	bl	26028 <CString::operator char const*() const>
   108c0:	e1a02005 	mov	r2, r5
   108c4:	e3a03000 	mov	r3, #0
   108c8:	e1a01000 	mov	r1, r0
   108cc:	e1a00006 	mov	r0, r6
   108d0:	eb005195 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   108d4:	e1a0000d 	mov	r0, sp
   108d8:	eb005588 	bl	25f00 <CString::~CString()>
   108dc:	e1a00004 	mov	r0, r4
   108e0:	e28dd010 	add	sp, sp, #16
   108e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   108e8:	eb005230 	bl	251b0 <CLogger::Get()>
   108ec:	e3a02001 	mov	r2, #1
   108f0:	e59f1014 	ldr	r1, [pc, #20]	; 1090c <CUSBKeyboardDevice::Configure()+0xa8>
   108f4:	e30b3ca0 	movw	r3, #48288	; 0xbca0
   108f8:	e3403002 	movt	r3, #2
   108fc:	eb005307 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10900:	e1a00004 	mov	r0, r4
   10904:	e28dd010 	add	sp, sp, #16
   10908:	e8bd8070 	pop	{r4, r5, r6, pc}
   1090c:	0002bc54 	.word	0x0002bc54

00010910 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
   10910:	e3510000 	cmp	r1, #0
   10914:	e3a03000 	mov	r3, #0
   10918:	e92d4010 	push	{r4, lr}
   1091c:	e1a04000 	mov	r4, r0
   10920:	e880000a 	stm	r0, {r1, r3}
   10924:	0a000001 	beq	10930 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x20>
   10928:	e1a00004 	mov	r0, r4
   1092c:	e8bd8010 	pop	{r4, pc}
   10930:	e3a0201f 	mov	r2, #31
   10934:	e30b1ccc 	movw	r1, #48332	; 0xbccc
   10938:	e30b0080 	movw	r0, #45184	; 0xb080
   1093c:	e3401002 	movt	r1, #2
   10940:	e3400002 	movt	r0, #2
   10944:	eb005094 	bl	24b9c <assertion_failed>
   10948:	e1a00004 	mov	r0, r4
   1094c:	e8bd8010 	pop	{r4, pc}

00010950 <CDWHCIRootPort::~CDWHCIRootPort()>:
   10950:	e92d4010 	push	{r4, lr}
   10954:	e1a04000 	mov	r4, r0
   10958:	e5900004 	ldr	r0, [r0, #4]
   1095c:	e3500000 	cmp	r0, #0
   10960:	0a000002 	beq	10970 <CDWHCIRootPort::~CDWHCIRootPort()+0x20>
   10964:	e5903000 	ldr	r3, [r0]
   10968:	e5933004 	ldr	r3, [r3, #4]
   1096c:	e12fff33 	blx	r3
   10970:	e1a00004 	mov	r0, r4
   10974:	e8bd8010 	pop	{r4, pc}

00010978 <CDWHCIRootPort::Initialize()>:
   10978:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1097c:	e1a04000 	mov	r4, r0
   10980:	e5900000 	ldr	r0, [r0]
   10984:	e24dd00c 	sub	sp, sp, #12
   10988:	e3500000 	cmp	r0, #0
   1098c:	0a000056 	beq	10aec <CDWHCIRootPort::Initialize()+0x174>
   10990:	ebffe542 	bl	9ea0 <CDWHCIDevice::GetPortSpeed()>
   10994:	e3500003 	cmp	r0, #3
   10998:	e1a06000 	mov	r6, r0
   1099c:	0a000049 	beq	10ac8 <CDWHCIRootPort::Initialize()+0x150>
   109a0:	e5943004 	ldr	r3, [r4, #4]
   109a4:	e3530000 	cmp	r3, #0
   109a8:	0a000005 	beq	109c4 <CDWHCIRootPort::Initialize()+0x4c>
   109ac:	e30b1ccc 	movw	r1, #48332	; 0xbccc
   109b0:	e30b0cfc 	movw	r0, #48380	; 0xbcfc
   109b4:	e3401002 	movt	r1, #2
   109b8:	e3400002 	movt	r0, #2
   109bc:	e3a02036 	mov	r2, #54	; 0x36
   109c0:	eb005075 	bl	24b9c <assertion_failed>
   109c4:	e3a0004c 	mov	r0, #76	; 0x4c
   109c8:	e3a05001 	mov	r5, #1
   109cc:	eb004566 	bl	21f6c <operator new(unsigned int)>
   109d0:	e5941000 	ldr	r1, [r4]
   109d4:	e3a03000 	mov	r3, #0
   109d8:	e1a02006 	mov	r2, r6
   109dc:	e88d0028 	stm	sp, {r3, r5}
   109e0:	e1a07000 	mov	r7, r0
   109e4:	ebfff11e 	bl	ce64 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, int, unsigned char, unsigned char)>
   109e8:	e5847004 	str	r7, [r4, #4]
   109ec:	e1a00007 	mov	r0, r7
   109f0:	ebfff294 	bl	d448 <CUSBDevice::Initialize()>
   109f4:	e3500000 	cmp	r0, #0
   109f8:	e5940004 	ldr	r0, [r4, #4]
   109fc:	1a000008 	bne	10a24 <CDWHCIRootPort::Initialize()+0xac>
   10a00:	e3500000 	cmp	r0, #0
   10a04:	0a000002 	beq	10a14 <CDWHCIRootPort::Initialize()+0x9c>
   10a08:	e5903000 	ldr	r3, [r0]
   10a0c:	e5933004 	ldr	r3, [r3, #4]
   10a10:	e12fff33 	blx	r3
   10a14:	e3a00000 	mov	r0, #0
   10a18:	e5840004 	str	r0, [r4, #4]
   10a1c:	e28dd00c 	add	sp, sp, #12
   10a20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10a24:	e5903000 	ldr	r3, [r0]
   10a28:	e593300c 	ldr	r3, [r3, #12]
   10a2c:	e12fff33 	blx	r3
   10a30:	e3500000 	cmp	r0, #0
   10a34:	0a000018 	beq	10a9c <CDWHCIRootPort::Initialize()+0x124>
   10a38:	eb0051dc 	bl	251b0 <CLogger::Get()>
   10a3c:	e3a02004 	mov	r2, #4
   10a40:	e30b3d24 	movw	r3, #48420	; 0xbd24
   10a44:	e30b1cc4 	movw	r1, #48324	; 0xbcc4
   10a48:	e3403002 	movt	r3, #2
   10a4c:	e3401002 	movt	r1, #2
   10a50:	eb0052b2 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10a54:	e5940000 	ldr	r0, [r4]
   10a58:	ebffe523 	bl	9eec <CDWHCIDevice::OvercurrentDetected()>
   10a5c:	e3500000 	cmp	r0, #0
   10a60:	01a00005 	moveq	r0, r5
   10a64:	0affffec 	beq	10a1c <CDWHCIRootPort::Initialize()+0xa4>
   10a68:	eb0051d0 	bl	251b0 <CLogger::Get()>
   10a6c:	e1a02005 	mov	r2, r5
   10a70:	e30b3d38 	movw	r3, #48440	; 0xbd38
   10a74:	e30b1cc4 	movw	r1, #48324	; 0xbcc4
   10a78:	e3403002 	movt	r3, #2
   10a7c:	e3401002 	movt	r1, #2
   10a80:	eb0052a6 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10a84:	e5940000 	ldr	r0, [r4]
   10a88:	ebffe525 	bl	9f24 <CDWHCIDevice::DisableRootPort()>
   10a8c:	e5940004 	ldr	r0, [r4, #4]
   10a90:	e3500000 	cmp	r0, #0
   10a94:	1affffdb 	bne	10a08 <CDWHCIRootPort::Initialize()+0x90>
   10a98:	eaffffdd 	b	10a14 <CDWHCIRootPort::Initialize()+0x9c>
   10a9c:	eb0051c3 	bl	251b0 <CLogger::Get()>
   10aa0:	e30b3d0c 	movw	r3, #48396	; 0xbd0c
   10aa4:	e30b1cc4 	movw	r1, #48324	; 0xbcc4
   10aa8:	e3403002 	movt	r3, #2
   10aac:	e3401002 	movt	r1, #2
   10ab0:	e3a02002 	mov	r2, #2
   10ab4:	eb005299 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10ab8:	e5940004 	ldr	r0, [r4, #4]
   10abc:	e3500000 	cmp	r0, #0
   10ac0:	1affffd0 	bne	10a08 <CDWHCIRootPort::Initialize()+0x90>
   10ac4:	eaffffd2 	b	10a14 <CDWHCIRootPort::Initialize()+0x9c>
   10ac8:	eb0051b8 	bl	251b0 <CLogger::Get()>
   10acc:	e30b3ce0 	movw	r3, #48352	; 0xbce0
   10ad0:	e30b1cc4 	movw	r1, #48324	; 0xbcc4
   10ad4:	e3403002 	movt	r3, #2
   10ad8:	e3401002 	movt	r1, #2
   10adc:	e3a02001 	mov	r2, #1
   10ae0:	eb00528e 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10ae4:	e3a00000 	mov	r0, #0
   10ae8:	eaffffcb 	b	10a1c <CDWHCIRootPort::Initialize()+0xa4>
   10aec:	e30b1ccc 	movw	r1, #48332	; 0xbccc
   10af0:	e30b0080 	movw	r0, #45184	; 0xb080
   10af4:	e3401002 	movt	r1, #2
   10af8:	e3400002 	movt	r0, #2
   10afc:	e3a0202c 	mov	r2, #44	; 0x2c
   10b00:	eb005025 	bl	24b9c <assertion_failed>
   10b04:	e5940000 	ldr	r0, [r4]
   10b08:	eaffffa0 	b	10990 <CDWHCIRootPort::Initialize()+0x18>

00010b0c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   10b0c:	e92d4070 	push	{r4, r5, r6, lr}
   10b10:	e1a04000 	mov	r4, r0
   10b14:	e1a05002 	mov	r5, r2
   10b18:	eb0004e7 	bl	11ebc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   10b1c:	e59f2030 	ldr	r2, [pc, #48]	; 10b54 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x48>
   10b20:	e3550000 	cmp	r5, #0
   10b24:	e3a03000 	mov	r3, #0
   10b28:	e5845010 	str	r5, [r4, #16]
   10b2c:	e5843014 	str	r3, [r4, #20]
   10b30:	e5842000 	str	r2, [r4]
   10b34:	e5843018 	str	r3, [r4, #24]
   10b38:	e584301c 	str	r3, [r4, #28]
   10b3c:	0a000002 	beq	10b4c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x40>
   10b40:	e1a00005 	mov	r0, r5
   10b44:	eb004509 	bl	21f70 <operator new[](unsigned int)>
   10b48:	e584001c 	str	r0, [r4, #28]
   10b4c:	e1a00004 	mov	r0, r4
   10b50:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b54:	0002bd58 	.word	0x0002bd58

00010b58 <CUSBHIDDevice::~CUSBHIDDevice()>:
   10b58:	e92d4070 	push	{r4, r5, r6, lr}
   10b5c:	e1a04000 	mov	r4, r0
   10b60:	e590001c 	ldr	r0, [r0, #28]
   10b64:	e59f304c 	ldr	r3, [pc, #76]	; 10bb8 <CUSBHIDDevice::~CUSBHIDDevice()+0x60>
   10b68:	e3500000 	cmp	r0, #0
   10b6c:	e5843000 	str	r3, [r4]
   10b70:	0a000000 	beq	10b78 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   10b74:	eb0044ff 	bl	21f78 <operator delete[](void*)>
   10b78:	e5945014 	ldr	r5, [r4, #20]
   10b7c:	e3a03000 	mov	r3, #0
   10b80:	e584301c 	str	r3, [r4, #28]
   10b84:	e1550003 	cmp	r5, r3
   10b88:	0a000004 	beq	10ba0 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   10b8c:	e1a00005 	mov	r0, r5
   10b90:	ebfff4ef 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
   10b94:	e1a00005 	mov	r0, r5
   10b98:	e3a01018 	mov	r1, #24
   10b9c:	eb0044f6 	bl	21f7c <operator delete(void*, unsigned int)>
   10ba0:	e3a03000 	mov	r3, #0
   10ba4:	e1a00004 	mov	r0, r4
   10ba8:	e5843014 	str	r3, [r4, #20]
   10bac:	eb000471 	bl	11d78 <CUSBFunction::~CUSBFunction()>
   10bb0:	e1a00004 	mov	r0, r4
   10bb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   10bb8:	0002bd58 	.word	0x0002bd58

00010bbc <CUSBHIDDevice::~CUSBHIDDevice()>:
   10bbc:	e92d4010 	push	{r4, lr}
   10bc0:	e1a04000 	mov	r4, r0
   10bc4:	ebffffe3 	bl	10b58 <CUSBHIDDevice::~CUSBHIDDevice()>
   10bc8:	e1a00004 	mov	r0, r4
   10bcc:	e3a01020 	mov	r1, #32
   10bd0:	eb0044e9 	bl	21f7c <operator delete(void*, unsigned int)>
   10bd4:	e1a00004 	mov	r0, r4
   10bd8:	e8bd8010 	pop	{r4, pc}

00010bdc <CUSBHIDDevice::StartRequest()>:
   10bdc:	e5903014 	ldr	r3, [r0, #20]
   10be0:	e92d4070 	push	{r4, r5, r6, lr}
   10be4:	e3530000 	cmp	r3, #0
   10be8:	e24dd008 	sub	sp, sp, #8
   10bec:	e1a04000 	mov	r4, r0
   10bf0:	0a00003e 	beq	10cf0 <CUSBHIDDevice::StartRequest()+0x114>
   10bf4:	e594301c 	ldr	r3, [r4, #28]
   10bf8:	e3530000 	cmp	r3, #0
   10bfc:	0a000034 	beq	10cd4 <CUSBHIDDevice::StartRequest()+0xf8>
   10c00:	e5943018 	ldr	r3, [r4, #24]
   10c04:	e3530000 	cmp	r3, #0
   10c08:	0a000005 	beq	10c24 <CUSBHIDDevice::StartRequest()+0x48>
   10c0c:	e30b1d80 	movw	r1, #48512	; 0xbd80
   10c10:	e30b0dc4 	movw	r0, #48580	; 0xbdc4
   10c14:	e3401002 	movt	r1, #2
   10c18:	e3400002 	movt	r0, #2
   10c1c:	e3a02077 	mov	r2, #119	; 0x77
   10c20:	eb004fdd 	bl	24b9c <assertion_failed>
   10c24:	e5945010 	ldr	r5, [r4, #16]
   10c28:	e3550000 	cmp	r5, #0
   10c2c:	0a000017 	beq	10c90 <CUSBHIDDevice::StartRequest()+0xb4>
   10c30:	e3a00028 	mov	r0, #40	; 0x28
   10c34:	eb0044cc 	bl	21f6c <operator new(unsigned int)>
   10c38:	e5943010 	ldr	r3, [r4, #16]
   10c3c:	e3a0c000 	mov	ip, #0
   10c40:	e594201c 	ldr	r2, [r4, #28]
   10c44:	e5941014 	ldr	r1, [r4, #20]
   10c48:	e58dc000 	str	ip, [sp]
   10c4c:	e1a05000 	mov	r5, r0
   10c50:	ebfff5bb 	bl	e344 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   10c54:	e1a00005 	mov	r0, r5
   10c58:	e5845018 	str	r5, [r4, #24]
   10c5c:	e1a03004 	mov	r3, r4
   10c60:	e3a02000 	mov	r2, #0
   10c64:	e301101c 	movw	r1, #4124	; 0x101c
   10c68:	e3401001 	movt	r1, #1
   10c6c:	ebfff62b 	bl	e520 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   10c70:	e1a00004 	mov	r0, r4
   10c74:	eb000520 	bl	120fc <CUSBFunction::GetHost() const>
   10c78:	e5941018 	ldr	r1, [r4, #24]
   10c7c:	e5903000 	ldr	r3, [r0]
   10c80:	e593300c 	ldr	r3, [r3, #12]
   10c84:	e28dd008 	add	sp, sp, #8
   10c88:	e8bd4070 	pop	{r4, r5, r6, lr}
   10c8c:	e12fff13 	bx	r3
   10c90:	e3a02078 	mov	r2, #120	; 0x78
   10c94:	e30b1d80 	movw	r1, #48512	; 0xbd80
   10c98:	e30b0dd0 	movw	r0, #48592	; 0xbdd0
   10c9c:	e3401002 	movt	r1, #2
   10ca0:	e3400002 	movt	r0, #2
   10ca4:	eb004fbc 	bl	24b9c <assertion_failed>
   10ca8:	e3a00028 	mov	r0, #40	; 0x28
   10cac:	eb0044ae 	bl	21f6c <operator new(unsigned int)>
   10cb0:	e5943010 	ldr	r3, [r4, #16]
   10cb4:	e594201c 	ldr	r2, [r4, #28]
   10cb8:	e5941014 	ldr	r1, [r4, #20]
   10cbc:	e58d5000 	str	r5, [sp]
   10cc0:	e1a06000 	mov	r6, r0
   10cc4:	ebfff59e 	bl	e344 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   10cc8:	e1a00006 	mov	r0, r6
   10ccc:	e5846018 	str	r6, [r4, #24]
   10cd0:	eaffffe1 	b	10c5c <CUSBHIDDevice::StartRequest()+0x80>
   10cd4:	e30b1d80 	movw	r1, #48512	; 0xbd80
   10cd8:	e30b0dac 	movw	r0, #48556	; 0xbdac
   10cdc:	e3401002 	movt	r1, #2
   10ce0:	e3400002 	movt	r0, #2
   10ce4:	e3a02075 	mov	r2, #117	; 0x75
   10ce8:	eb004fab 	bl	24b9c <assertion_failed>
   10cec:	eaffffc3 	b	10c00 <CUSBHIDDevice::StartRequest()+0x24>
   10cf0:	e30b1d80 	movw	r1, #48512	; 0xbd80
   10cf4:	e30b0d94 	movw	r0, #48532	; 0xbd94
   10cf8:	e3401002 	movt	r1, #2
   10cfc:	e3400002 	movt	r0, #2
   10d00:	e3a02074 	mov	r2, #116	; 0x74
   10d04:	eb004fa4 	bl	24b9c <assertion_failed>
   10d08:	eaffffb9 	b	10bf4 <CUSBHIDDevice::StartRequest()+0x18>

00010d0c <CUSBHIDDevice::Configure(unsigned int)>:
   10d0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10d10:	e24dd010 	sub	sp, sp, #16
   10d14:	e1a07001 	mov	r7, r1
   10d18:	e1a05000 	mov	r5, r0
   10d1c:	eb0004c5 	bl	12038 <CUSBFunction::GetNumEndpoints() const>
   10d20:	e3500000 	cmp	r0, #0
   10d24:	0a000031 	beq	10df0 <CUSBHIDDevice::Configure(unsigned int)+0xe4>
   10d28:	e3a01005 	mov	r1, #5
   10d2c:	e1a00005 	mov	r0, r5
   10d30:	eb000533 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
   10d34:	e2504000 	subs	r4, r0, #0
   10d38:	0a00002c 	beq	10df0 <CUSBHIDDevice::Configure(unsigned int)+0xe4>
   10d3c:	e1d430d2 	ldrsb	r3, [r4, #2]
   10d40:	e3530000 	cmp	r3, #0
   10d44:	aafffff7 	bge	10d28 <CUSBHIDDevice::Configure(unsigned int)+0x1c>
   10d48:	e5d43003 	ldrb	r3, [r4, #3]
   10d4c:	e203303f 	and	r3, r3, #63	; 0x3f
   10d50:	e3530003 	cmp	r3, #3
   10d54:	1afffff3 	bne	10d28 <CUSBHIDDevice::Configure(unsigned int)+0x1c>
   10d58:	e5953014 	ldr	r3, [r5, #20]
   10d5c:	e3530000 	cmp	r3, #0
   10d60:	0a000005 	beq	10d7c <CUSBHIDDevice::Configure(unsigned int)+0x70>
   10d64:	e30b1d80 	movw	r1, #48512	; 0xbd80
   10d68:	e30b0de4 	movw	r0, #48612	; 0xbde4
   10d6c:	e3401002 	movt	r1, #2
   10d70:	e3400002 	movt	r0, #2
   10d74:	e3a0204d 	mov	r2, #77	; 0x4d
   10d78:	eb004f87 	bl	24b9c <assertion_failed>
   10d7c:	e1a00005 	mov	r0, r5
   10d80:	eb0004bc 	bl	12078 <CUSBFunction::GetDevice() const>
   10d84:	e1a08000 	mov	r8, r0
   10d88:	e3a00018 	mov	r0, #24
   10d8c:	eb004476 	bl	21f6c <operator new(unsigned int)>
   10d90:	e1a02004 	mov	r2, r4
   10d94:	e1a01008 	mov	r1, r8
   10d98:	e1a06000 	mov	r6, r0
   10d9c:	ebfff3d9 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   10da0:	e5856014 	str	r6, [r5, #20]
   10da4:	e1a00005 	mov	r0, r5
   10da8:	eb0004e4 	bl	12140 <CUSBFunction::Configure()>
   10dac:	e3500000 	cmp	r0, #0
   10db0:	0a000027 	beq	10e54 <CUSBHIDDevice::Configure(unsigned int)+0x148>
   10db4:	e1a00005 	mov	r0, r5
   10db8:	eb000551 	bl	12304 <CUSBFunction::GetInterfaceSubClass() const>
   10dbc:	e3500001 	cmp	r0, #1
   10dc0:	e1a04000 	mov	r4, r0
   10dc4:	0a000032 	beq	10e94 <CUSBHIDDevice::Configure(unsigned int)+0x188>
   10dc8:	e5953010 	ldr	r3, [r5, #16]
   10dcc:	e3530000 	cmp	r3, #0
   10dd0:	0a00000c 	beq	10e08 <CUSBHIDDevice::Configure(unsigned int)+0xfc>
   10dd4:	e595301c 	ldr	r3, [r5, #28]
   10dd8:	e3530000 	cmp	r3, #0
   10ddc:	0a000048 	beq	10f04 <CUSBHIDDevice::Configure(unsigned int)+0x1f8>
   10de0:	e1a00005 	mov	r0, r5
   10de4:	e28dd010 	add	sp, sp, #16
   10de8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   10dec:	eaffff7a 	b	10bdc <CUSBHIDDevice::StartRequest()>
   10df0:	e1a00005 	mov	r0, r5
   10df4:	e59f1124 	ldr	r1, [pc, #292]	; 10f20 <CUSBHIDDevice::Configure(unsigned int)+0x214>
   10df8:	eb000514 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   10dfc:	e3a00000 	mov	r0, #0
   10e00:	e28dd010 	add	sp, sp, #16
   10e04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10e08:	e3570000 	cmp	r7, #0
   10e0c:	e5857010 	str	r7, [r5, #16]
   10e10:	0a000018 	beq	10e78 <CUSBHIDDevice::Configure(unsigned int)+0x16c>
   10e14:	e595301c 	ldr	r3, [r5, #28]
   10e18:	e3530000 	cmp	r3, #0
   10e1c:	0a000005 	beq	10e38 <CUSBHIDDevice::Configure(unsigned int)+0x12c>
   10e20:	e30b1d80 	movw	r1, #48512	; 0xbd80
   10e24:	e30b0e18 	movw	r0, #48664	; 0xbe18
   10e28:	e3401002 	movt	r1, #2
   10e2c:	e3400002 	movt	r0, #2
   10e30:	e3a0206a 	mov	r2, #106	; 0x6a
   10e34:	eb004f58 	bl	24b9c <assertion_failed>
   10e38:	e5950010 	ldr	r0, [r5, #16]
   10e3c:	eb00444b 	bl	21f70 <operator new[](unsigned int)>
   10e40:	e585001c 	str	r0, [r5, #28]
   10e44:	e1a00005 	mov	r0, r5
   10e48:	e28dd010 	add	sp, sp, #16
   10e4c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   10e50:	eaffff61 	b	10bdc <CUSBHIDDevice::StartRequest()>
   10e54:	eb0050d5 	bl	251b0 <CLogger::Get()>
   10e58:	e3a02001 	mov	r2, #1
   10e5c:	e59f10bc 	ldr	r1, [pc, #188]	; 10f20 <CUSBHIDDevice::Configure(unsigned int)+0x214>
   10e60:	e30b3880 	movw	r3, #47232	; 0xb880
   10e64:	e3403002 	movt	r3, #2
   10e68:	eb0051ac 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10e6c:	e3a00000 	mov	r0, #0
   10e70:	e28dd010 	add	sp, sp, #16
   10e74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10e78:	e30b1d80 	movw	r1, #48512	; 0xbd80
   10e7c:	e30b0dd0 	movw	r0, #48592	; 0xbdd0
   10e80:	e3401002 	movt	r1, #2
   10e84:	e3400002 	movt	r0, #2
   10e88:	e3a02068 	mov	r2, #104	; 0x68
   10e8c:	eb004f42 	bl	24b9c <assertion_failed>
   10e90:	eaffffdf 	b	10e14 <CUSBHIDDevice::Configure(unsigned int)+0x108>
   10e94:	e1a00005 	mov	r0, r5
   10e98:	eb000497 	bl	120fc <CUSBFunction::GetHost() const>
   10e9c:	e1a06000 	mov	r6, r0
   10ea0:	e1a00005 	mov	r0, r5
   10ea4:	eb000483 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
   10ea8:	e1a08000 	mov	r8, r0
   10eac:	e1a00005 	mov	r0, r5
   10eb0:	eb000503 	bl	122c4 <CUSBFunction::GetInterfaceNumber() const>
   10eb4:	e3a02000 	mov	r2, #0
   10eb8:	e1a01008 	mov	r1, r8
   10ebc:	e58d200c 	str	r2, [sp, #12]
   10ec0:	e58d2008 	str	r2, [sp, #8]
   10ec4:	e3a0300b 	mov	r3, #11
   10ec8:	e58d2000 	str	r2, [sp]
   10ecc:	e3a02021 	mov	r2, #33	; 0x21
   10ed0:	e6ffc070 	uxth	ip, r0
   10ed4:	e1a00006 	mov	r0, r6
   10ed8:	e58dc004 	str	ip, [sp, #4]
   10edc:	ebfff4a2 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10ee0:	e3500000 	cmp	r0, #0
   10ee4:	aaffffb7 	bge	10dc8 <CUSBHIDDevice::Configure(unsigned int)+0xbc>
   10ee8:	eb0050b0 	bl	251b0 <CLogger::Get()>
   10eec:	e1a02004 	mov	r2, r4
   10ef0:	e30b3dfc 	movw	r3, #48636	; 0xbdfc
   10ef4:	e59f1024 	ldr	r1, [pc, #36]	; 10f20 <CUSBHIDDevice::Configure(unsigned int)+0x214>
   10ef8:	e3403002 	movt	r3, #2
   10efc:	eb005187 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10f00:	eaffffbd 	b	10dfc <CUSBHIDDevice::Configure(unsigned int)+0xf0>
   10f04:	e30b1d80 	movw	r1, #48512	; 0xbd80
   10f08:	e30b0dac 	movw	r0, #48556	; 0xbdac
   10f0c:	e3401002 	movt	r1, #2
   10f10:	e3400002 	movt	r0, #2
   10f14:	e3a0206d 	mov	r2, #109	; 0x6d
   10f18:	eb004f1f 	bl	24b9c <assertion_failed>
   10f1c:	eaffffaf 	b	10de0 <CUSBHIDDevice::Configure(unsigned int)+0xd4>
   10f20:	0002bd78 	.word	0x0002bd78

00010f24 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   10f24:	e92d4070 	push	{r4, r5, r6, lr}
   10f28:	e2515000 	subs	r5, r1, #0
   10f2c:	e1a04000 	mov	r4, r0
   10f30:	0a000031 	beq	10ffc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   10f34:	e5943018 	ldr	r3, [r4, #24]
   10f38:	e1550003 	cmp	r5, r3
   10f3c:	0a000005 	beq	10f58 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x34>
   10f40:	e30b1d80 	movw	r1, #48512	; 0xbd80
   10f44:	e30b0e30 	movw	r0, #48688	; 0xbe30
   10f48:	e3401002 	movt	r1, #2
   10f4c:	e3400002 	movt	r0, #2
   10f50:	e3a02083 	mov	r2, #131	; 0x83
   10f54:	eb004f10 	bl	24b9c <assertion_failed>
   10f58:	e1a00005 	mov	r0, r5
   10f5c:	ebfff533 	bl	e430 <CUSBRequest::GetStatus() const>
   10f60:	e3500000 	cmp	r0, #0
   10f64:	1a000019 	bne	10fd0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xac>
   10f68:	e5943000 	ldr	r3, [r4]
   10f6c:	e3a01000 	mov	r1, #0
   10f70:	e1a00004 	mov	r0, r4
   10f74:	e593301c 	ldr	r3, [r3, #28]
   10f78:	e12fff33 	blx	r3
   10f7c:	e5945018 	ldr	r5, [r4, #24]
   10f80:	e3550000 	cmp	r5, #0
   10f84:	0a000004 	beq	10f9c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x78>
   10f88:	e1a00005 	mov	r0, r5
   10f8c:	ebfff512 	bl	e3dc <CUSBRequest::~CUSBRequest()>
   10f90:	e1a00005 	mov	r0, r5
   10f94:	e3a01028 	mov	r1, #40	; 0x28
   10f98:	eb0043f7 	bl	21f7c <operator delete(void*, unsigned int)>
   10f9c:	e3a03000 	mov	r3, #0
   10fa0:	e1a00004 	mov	r0, r4
   10fa4:	e5843018 	str	r3, [r4, #24]
   10fa8:	ebffff0b 	bl	10bdc <CUSBHIDDevice::StartRequest()>
   10fac:	e3500000 	cmp	r0, #0
   10fb0:	18bd8070 	popne	{r4, r5, r6, pc}
   10fb4:	eb00507d 	bl	251b0 <CLogger::Get()>
   10fb8:	e30b3e40 	movw	r3, #48704	; 0xbe40
   10fbc:	e3a02001 	mov	r2, #1
   10fc0:	e3403002 	movt	r3, #2
   10fc4:	e59f104c 	ldr	r1, [pc, #76]	; 11018 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   10fc8:	e8bd4070 	pop	{r4, r5, r6, lr}
   10fcc:	ea005153 	b	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10fd0:	e1a00005 	mov	r0, r5
   10fd4:	ebfff517 	bl	e438 <CUSBRequest::GetResultLength() const>
   10fd8:	e5943010 	ldr	r3, [r4, #16]
   10fdc:	e1500003 	cmp	r0, r3
   10fe0:	1affffe0 	bne	10f68 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x44>
   10fe4:	e5943000 	ldr	r3, [r4]
   10fe8:	e1a00004 	mov	r0, r4
   10fec:	e594101c 	ldr	r1, [r4, #28]
   10ff0:	e593301c 	ldr	r3, [r3, #28]
   10ff4:	e12fff33 	blx	r3
   10ff8:	eaffffdf 	b	10f7c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x58>
   10ffc:	e30b1d80 	movw	r1, #48512	; 0xbd80
   11000:	e30a0a24 	movw	r0, #43556	; 0xaa24
   11004:	e3401002 	movt	r1, #2
   11008:	e3400002 	movt	r0, #2
   1100c:	e3a02082 	mov	r2, #130	; 0x82
   11010:	eb004ee1 	bl	24b9c <assertion_failed>
   11014:	eaffffc6 	b	10f34 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x10>
   11018:	0002bd78 	.word	0x0002bd78

0001101c <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1101c:	e92d4070 	push	{r4, r5, r6, lr}
   11020:	e2524000 	subs	r4, r2, #0
   11024:	e1a05000 	mov	r5, r0
   11028:	0a000003 	beq	1103c <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   1102c:	e1a01005 	mov	r1, r5
   11030:	e1a00004 	mov	r0, r4
   11034:	e8bd4070 	pop	{r4, r5, r6, lr}
   11038:	eaffffb9 	b	10f24 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   1103c:	e30b1d80 	movw	r1, #48512	; 0xbd80
   11040:	e30a0938 	movw	r0, #43320	; 0xa938
   11044:	e3401002 	movt	r1, #2
   11048:	e3400002 	movt	r0, #2
   1104c:	e3a0209b 	mov	r2, #155	; 0x9b
   11050:	eb004ed1 	bl	24b9c <assertion_failed>
   11054:	e1a01005 	mov	r1, r5
   11058:	e1a00004 	mov	r0, r4
   1105c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11060:	eaffffaf 	b	10f24 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>

00011064 <CUSBMouseDevice::~CUSBMouseDevice()>:
   11064:	e59f3028 	ldr	r3, [pc, #40]	; 11094 <CUSBMouseDevice::~CUSBMouseDevice()+0x30>
   11068:	e3a02000 	mov	r2, #0
   1106c:	e92d4010 	push	{r4, lr}
   11070:	e1a04000 	mov	r4, r0
   11074:	e584203c 	str	r2, [r4, #60]	; 0x3c
   11078:	e2800020 	add	r0, r0, #32
   1107c:	e5843000 	str	r3, [r4]
   11080:	eb001205 	bl	1589c <CMouseBehaviour::~CMouseBehaviour()>
   11084:	e1a00004 	mov	r0, r4
   11088:	ebfffeb2 	bl	10b58 <CUSBHIDDevice::~CUSBHIDDevice()>
   1108c:	e1a00004 	mov	r0, r4
   11090:	e8bd8010 	pop	{r4, pc}
   11094:	0002be60 	.word	0x0002be60

00011098 <CUSBMouseDevice::~CUSBMouseDevice()>:
   11098:	e59f3034 	ldr	r3, [pc, #52]	; 110d4 <CUSBMouseDevice::~CUSBMouseDevice()+0x3c>
   1109c:	e3a02000 	mov	r2, #0
   110a0:	e92d4010 	push	{r4, lr}
   110a4:	e1a04000 	mov	r4, r0
   110a8:	e584203c 	str	r2, [r4, #60]	; 0x3c
   110ac:	e2800020 	add	r0, r0, #32
   110b0:	e5843000 	str	r3, [r4]
   110b4:	eb0011f8 	bl	1589c <CMouseBehaviour::~CMouseBehaviour()>
   110b8:	e1a00004 	mov	r0, r4
   110bc:	ebfffea5 	bl	10b58 <CUSBHIDDevice::~CUSBHIDDevice()>
   110c0:	e1a00004 	mov	r0, r4
   110c4:	e3a01040 	mov	r1, #64	; 0x40
   110c8:	eb0043ab 	bl	21f7c <operator delete(void*, unsigned int)>
   110cc:	e1a00004 	mov	r0, r4
   110d0:	e8bd8010 	pop	{r4, pc}
   110d4:	0002be60 	.word	0x0002be60

000110d8 <CUSBMouseDevice::ReportHandler(unsigned char const*)>:
   110d8:	e92d4070 	push	{r4, r5, r6, lr}
   110dc:	e2514000 	subs	r4, r1, #0
   110e0:	08bd8070 	popeq	{r4, r5, r6, pc}
   110e4:	e5d43000 	ldrb	r3, [r4]
   110e8:	e1a05000 	mov	r5, r0
   110ec:	e1d420d1 	ldrsb	r2, [r4, #1]
   110f0:	e2800020 	add	r0, r0, #32
   110f4:	e2036001 	and	r6, r3, #1
   110f8:	e3130002 	tst	r3, #2
   110fc:	13866002 	orrne	r6, r6, #2
   11100:	e3130004 	tst	r3, #4
   11104:	13866004 	orrne	r6, r6, #4
   11108:	e1d430d2 	ldrsb	r3, [r4, #2]
   1110c:	e1a01006 	mov	r1, r6
   11110:	eb0012b8 	bl	15bf8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   11114:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   11118:	e3530000 	cmp	r3, #0
   1111c:	08bd8070 	popeq	{r4, r5, r6, pc}
   11120:	e1a00006 	mov	r0, r6
   11124:	e1d420d2 	ldrsb	r2, [r4, #2]
   11128:	e1d410d1 	ldrsb	r1, [r4, #1]
   1112c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11130:	e12fff13 	bx	r3

00011134 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   11134:	e92d4010 	push	{r4, lr}
   11138:	e3a02003 	mov	r2, #3
   1113c:	e1a04000 	mov	r4, r0
   11140:	ebfffe71 	bl	10b0c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   11144:	e59f3018 	ldr	r3, [pc, #24]	; 11164 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x30>
   11148:	e1a00004 	mov	r0, r4
   1114c:	e4803020 	str	r3, [r0], #32
   11150:	eb0011c8 	bl	15878 <CMouseBehaviour::CMouseBehaviour()>
   11154:	e3a03000 	mov	r3, #0
   11158:	e1a00004 	mov	r0, r4
   1115c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   11160:	e8bd8010 	pop	{r4, pc}
   11164:	0002be60 	.word	0x0002be60

00011168 <CUSBMouseDevice::Setup(unsigned int, unsigned int)>:
   11168:	e2800020 	add	r0, r0, #32
   1116c:	ea0011cb 	b	158a0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

00011170 <CUSBMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   11170:	e2800020 	add	r0, r0, #32
   11174:	ea001220 	b	159fc <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

00011178 <CUSBMouseDevice::SetCursor(unsigned int, unsigned int)>:
   11178:	e2800020 	add	r0, r0, #32
   1117c:	ea001252 	b	15acc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

00011180 <CUSBMouseDevice::ShowCursor(int)>:
   11180:	e2800020 	add	r0, r0, #32
   11184:	ea00127c 	b	15b7c <CMouseBehaviour::ShowCursor(int)>

00011188 <CUSBMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   11188:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   1118c:	e92d4070 	push	{r4, r5, r6, lr}
   11190:	e3530000 	cmp	r3, #0
   11194:	e1a04000 	mov	r4, r0
   11198:	e1a05001 	mov	r5, r1
   1119c:	0a000005 	beq	111b8 <CUSBMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x30>
   111a0:	e30b1e88 	movw	r1, #48776	; 0xbe88
   111a4:	e30b0e98 	movw	r0, #48792	; 0xbe98
   111a8:	e3401002 	movt	r1, #2
   111ac:	e3400002 	movt	r0, #2
   111b0:	e3a02051 	mov	r2, #81	; 0x51
   111b4:	eb004e78 	bl	24b9c <assertion_failed>
   111b8:	e3550000 	cmp	r5, #0
   111bc:	e584503c 	str	r5, [r4, #60]	; 0x3c
   111c0:	18bd8070 	popne	{r4, r5, r6, pc}
   111c4:	e30b1e88 	movw	r1, #48776	; 0xbe88
   111c8:	e30b0eb0 	movw	r0, #48816	; 0xbeb0
   111cc:	e3401002 	movt	r1, #2
   111d0:	e3400002 	movt	r0, #2
   111d4:	e3a02053 	mov	r2, #83	; 0x53
   111d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   111dc:	ea004e6e 	b	24b9c <assertion_failed>

000111e0 <CUSBMouseDevice::Configure()>:
   111e0:	e92d4070 	push	{r4, r5, r6, lr}
   111e4:	e3a01000 	mov	r1, #0
   111e8:	e24dd010 	sub	sp, sp, #16
   111ec:	e1a05000 	mov	r5, r0
   111f0:	ebfffec5 	bl	10d0c <CUSBHIDDevice::Configure(unsigned int)>
   111f4:	e2504000 	subs	r4, r0, #0
   111f8:	0a000019 	beq	11264 <CUSBMouseDevice::Configure()+0x84>
   111fc:	e1a0000d 	mov	r0, sp
   11200:	e3a04001 	mov	r4, #1
   11204:	eb005370 	bl	25fcc <CString::CString()>
   11208:	e3013a18 	movw	r3, #6680	; 0x1a18
   1120c:	e3403003 	movt	r3, #3
   11210:	e1a0000d 	mov	r0, sp
   11214:	e30b1ec8 	movw	r1, #48840	; 0xbec8
   11218:	e3401002 	movt	r1, #2
   1121c:	e5932000 	ldr	r2, [r3]
   11220:	e082c004 	add	ip, r2, r4
   11224:	e583c000 	str	ip, [r3]
   11228:	eb0056c6 	bl	26d48 <CString::Format(char const*, ...)>
   1122c:	eb004fb2 	bl	250fc <CDeviceNameService::Get()>
   11230:	e1a06000 	mov	r6, r0
   11234:	e1a0000d 	mov	r0, sp
   11238:	eb00537a 	bl	26028 <CString::operator char const*() const>
   1123c:	e1a02005 	mov	r2, r5
   11240:	e3a03000 	mov	r3, #0
   11244:	e1a01000 	mov	r1, r0
   11248:	e1a00006 	mov	r0, r6
   1124c:	eb004f36 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   11250:	e1a0000d 	mov	r0, sp
   11254:	eb005329 	bl	25f00 <CString::~CString()>
   11258:	e1a00004 	mov	r0, r4
   1125c:	e28dd010 	add	sp, sp, #16
   11260:	e8bd8070 	pop	{r4, r5, r6, pc}
   11264:	eb004fd1 	bl	251b0 <CLogger::Get()>
   11268:	e3a02001 	mov	r2, #1
   1126c:	e59f1014 	ldr	r1, [pc, #20]	; 11288 <CUSBMouseDevice::Configure()+0xa8>
   11270:	e30b3ca0 	movw	r3, #48288	; 0xbca0
   11274:	e3403002 	movt	r3, #2
   11278:	eb0050a8 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1127c:	e1a00004 	mov	r0, r4
   11280:	e28dd010 	add	sp, sp, #16
   11284:	e8bd8070 	pop	{r4, r5, r6, pc}
   11288:	0002be80 	.word	0x0002be80

0001128c <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   1128c:	e92d4010 	push	{r4, lr}
   11290:	e1a04000 	mov	r4, r0
   11294:	e5900094 	ldr	r0, [r0, #148]	; 0x94
   11298:	e3a02000 	mov	r2, #0
   1129c:	e59f3028 	ldr	r3, [pc, #40]	; 112cc <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   112a0:	e1500002 	cmp	r0, r2
   112a4:	e5842090 	str	r2, [r4, #144]	; 0x90
   112a8:	e5843000 	str	r3, [r4]
   112ac:	0a000000 	beq	112b4 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x28>
   112b0:	eb004330 	bl	21f78 <operator delete[](void*)>
   112b4:	e3a03000 	mov	r3, #0
   112b8:	e1a00004 	mov	r0, r4
   112bc:	e5843094 	str	r3, [r4, #148]	; 0x94
   112c0:	ebfffe24 	bl	10b58 <CUSBHIDDevice::~CUSBHIDDevice()>
   112c4:	e1a00004 	mov	r0, r4
   112c8:	e8bd8010 	pop	{r4, pc}
   112cc:	0002bedc 	.word	0x0002bedc

000112d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   112d0:	e92d4010 	push	{r4, lr}
   112d4:	e1a04000 	mov	r4, r0
   112d8:	ebffffeb 	bl	1128c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   112dc:	e1a00004 	mov	r0, r4
   112e0:	e3a010a0 	mov	r1, #160	; 0xa0
   112e4:	eb004324 	bl	21f7c <operator delete(void*, unsigned int)>
   112e8:	e1a00004 	mov	r0, r4
   112ec:	e8bd8010 	pop	{r4, pc}

000112f0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   112f0:	e92d4010 	push	{r4, lr}
   112f4:	e3a02000 	mov	r2, #0
   112f8:	e1a04000 	mov	r4, r0
   112fc:	ebfffe02 	bl	10b0c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   11300:	e59fc068 	ldr	ip, [pc, #104]	; 11370 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x80>
   11304:	e3a00000 	mov	r0, #0
   11308:	e2841048 	add	r1, r4, #72	; 0x48
   1130c:	e1a03004 	mov	r3, r4
   11310:	e1a02000 	mov	r2, r0
   11314:	e5840090 	str	r0, [r4, #144]	; 0x90
   11318:	e584c000 	str	ip, [r4]
   1131c:	e5840094 	str	r0, [r4, #148]	; 0x94
   11320:	e1c409b8 	strh	r0, [r4, #152]	; 0x98
   11324:	e1c409ba 	strh	r0, [r4, #154]	; 0x9a
   11328:	e5840020 	str	r0, [r4, #32]
   1132c:	e5832024 	str	r2, [r3, #36]	; 0x24
   11330:	e283300c 	add	r3, r3, #12
   11334:	e583201c 	str	r2, [r3, #28]
   11338:	e5832020 	str	r2, [r3, #32]
   1133c:	e1530001 	cmp	r3, r1
   11340:	1afffff9 	bne	1132c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x3c>
   11344:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11348:	e1a00004 	mov	r0, r4
   1134c:	e5842070 	str	r2, [r4, #112]	; 0x70
   11350:	e5842074 	str	r2, [r4, #116]	; 0x74
   11354:	e5842078 	str	r2, [r4, #120]	; 0x78
   11358:	e584207c 	str	r2, [r4, #124]	; 0x7c
   1135c:	e5842080 	str	r2, [r4, #128]	; 0x80
   11360:	e5842084 	str	r2, [r4, #132]	; 0x84
   11364:	e5842088 	str	r2, [r4, #136]	; 0x88
   11368:	e584208c 	str	r2, [r4, #140]	; 0x8c
   1136c:	e8bd8010 	pop	{r4, pc}
   11370:	0002bedc 	.word	0x0002bedc

00011374 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   11374:	e5903090 	ldr	r3, [r0, #144]	; 0x90
   11378:	e92d4070 	push	{r4, r5, r6, lr}
   1137c:	e3530000 	cmp	r3, #0
   11380:	e1a04000 	mov	r4, r0
   11384:	e1a05001 	mov	r5, r1
   11388:	0a000005 	beq	113a4 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x30>
   1138c:	e30b1f0c 	movw	r1, #48908	; 0xbf0c
   11390:	e30b0e98 	movw	r0, #48792	; 0xbe98
   11394:	e3401002 	movt	r1, #2
   11398:	e3400002 	movt	r0, #2
   1139c:	e3a020c8 	mov	r2, #200	; 0xc8
   113a0:	eb004dfd 	bl	24b9c <assertion_failed>
   113a4:	e3550000 	cmp	r5, #0
   113a8:	e5845090 	str	r5, [r4, #144]	; 0x90
   113ac:	18bd8070 	popne	{r4, r5, r6, pc}
   113b0:	e30b1f0c 	movw	r1, #48908	; 0xbf0c
   113b4:	e30b0eb0 	movw	r0, #48816	; 0xbeb0
   113b8:	e3401002 	movt	r1, #2
   113bc:	e3400002 	movt	r0, #2
   113c0:	e3a020ca 	mov	r2, #202	; 0xca
   113c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   113c8:	ea004df3 	b	24b9c <assertion_failed>

000113cc <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   113cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113d0:	e0814002 	add	r4, r1, r2
   113d4:	e2846007 	add	r6, r4, #7
   113d8:	e1a0e1a1 	lsr	lr, r1, #3
   113dc:	e24dd00c 	sub	sp, sp, #12
   113e0:	e1a061a6 	lsr	r6, r6, #3
   113e4:	e15e0006 	cmp	lr, r6
   113e8:	2a000036 	bcs	114c8 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xfc>
   113ec:	e2011007 	and	r1, r1, #7
   113f0:	e3a07001 	mov	r7, #1
   113f4:	e082c001 	add	ip, r2, r1
   113f8:	e1a03117 	lsl	r3, r7, r1
   113fc:	e1a07c17 	lsl	r7, r7, ip
   11400:	e2444001 	sub	r4, r4, #1
   11404:	e6ef3073 	uxtb	r3, r3
   11408:	e080c00e 	add	ip, r0, lr
   1140c:	e6ef7077 	uxtb	r7, r7
   11410:	e263a000 	rsb	sl, r3, #0
   11414:	e2470001 	sub	r0, r7, #1
   11418:	e0477003 	sub	r7, r7, r3
   1141c:	e3a05000 	mov	r5, #0
   11420:	e1a041a4 	lsr	r4, r4, #3
   11424:	e6ef3070 	uxtb	r3, r0
   11428:	e6efa07a 	uxtb	sl, sl
   1142c:	e58d3004 	str	r3, [sp, #4]
   11430:	e6ef7077 	uxtb	r7, r7
   11434:	e261b008 	rsb	fp, r1, #8
   11438:	e1a00005 	mov	r0, r5
   1143c:	e1a0300e 	mov	r3, lr
   11440:	ea00000e 	b	11480 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   11444:	e15e0003 	cmp	lr, r3
   11448:	0a000017 	beq	114ac <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe0>
   1144c:	e1530004 	cmp	r3, r4
   11450:	12855008 	addne	r5, r5, #8
   11454:	05dc8000 	ldrbeq	r8, [ip]
   11458:	10428005 	subne	r8, r2, r5
   1145c:	059d9004 	ldreq	r9, [sp, #4]
   11460:	15dc9000 	ldrbne	r9, [ip]
   11464:	00088009 	andeq	r8, r8, r9
   11468:	01800008 	orreq	r0, r0, r8
   1146c:	11800819 	orrne	r0, r0, r9, lsl r8
   11470:	e2833001 	add	r3, r3, #1
   11474:	e28cc001 	add	ip, ip, #1
   11478:	e1530006 	cmp	r3, r6
   1147c:	0a000008 	beq	114a4 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
   11480:	e15e0004 	cmp	lr, r4
   11484:	1affffee 	bne	11444 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   11488:	e5dc0000 	ldrb	r0, [ip]
   1148c:	e2833001 	add	r3, r3, #1
   11490:	e1530006 	cmp	r3, r6
   11494:	e28cc001 	add	ip, ip, #1
   11498:	e0000007 	and	r0, r0, r7
   1149c:	e1a00150 	asr	r0, r0, r1
   114a0:	1afffff6 	bne	11480 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   114a4:	e28dd00c 	add	sp, sp, #12
   114a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114ac:	e5dc0000 	ldrb	r0, [ip]
   114b0:	e085500b 	add	r5, r5, fp
   114b4:	e0428005 	sub	r8, r2, r5
   114b8:	e000000a 	and	r0, r0, sl
   114bc:	e1a00150 	asr	r0, r0, r1
   114c0:	e1a00810 	lsl	r0, r0, r8
   114c4:	eaffffe9 	b	11470 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   114c8:	e3a00000 	mov	r0, #0
   114cc:	eafffff4 	b	114a4 <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>

000114d0 <CUSBGamePadDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   114d0:	e92d4010 	push	{r4, lr}
   114d4:	e1a04002 	mov	r4, r2
   114d8:	ebffffbb 	bl	113cc <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   114dc:	e2423001 	sub	r3, r2, #1
   114e0:	e3a02001 	mov	r2, #1
   114e4:	e0103312 	ands	r3, r0, r2, lsl r3
   114e8:	11a02412 	lslne	r2, r2, r4
   114ec:	12622000 	rsbne	r2, r2, #0
   114f0:	11800002 	orrne	r0, r0, r2
   114f4:	e8bd8010 	pop	{r4, pc}

000114f8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)>:
   114f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114fc:	e24dd034 	sub	sp, sp, #52	; 0x34
   11500:	e5905094 	ldr	r5, [r0, #148]	; 0x94
   11504:	e1a0b001 	mov	fp, r1
   11508:	e58d0010 	str	r0, [sp, #16]
   1150c:	e3550000 	cmp	r5, #0
   11510:	0a000107 	beq	11934 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x43c>
   11514:	e59d3010 	ldr	r3, [sp, #16]
   11518:	e3a09000 	mov	r9, #0
   1151c:	e1a06009 	mov	r6, r9
   11520:	e1a0a009 	mov	sl, r9
   11524:	e30372eb 	movw	r7, #13035	; 0x32eb
   11528:	e58d901c 	str	r9, [sp, #28]
   1152c:	e1d349b8 	ldrh	r4, [r3, #152]	; 0x98
   11530:	e34f78a4 	movt	r7, #63652	; 0xf8a4
   11534:	e58d9018 	str	r9, [sp, #24]
   11538:	e58d700c 	str	r7, [sp, #12]
   1153c:	e58d7014 	str	r7, [sp, #20]
   11540:	e58d7008 	str	r7, [sp, #8]
   11544:	e58d9000 	str	r9, [sp]
   11548:	e58d9004 	str	r9, [sp, #4]
   1154c:	e3540000 	cmp	r4, #0
   11550:	0a000027 	beq	115f4 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0xfc>
   11554:	e1d530d0 	ldrsb	r3, [r5]
   11558:	e2038003 	and	r8, r3, #3
   1155c:	e3580001 	cmp	r8, #1
   11560:	0a000044 	beq	11678 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x180>
   11564:	e3580002 	cmp	r8, #2
   11568:	0a000047 	beq	1168c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x194>
   1156c:	e3580000 	cmp	r8, #0
   11570:	02444001 	subeq	r4, r4, #1
   11574:	02855001 	addeq	r5, r5, #1
   11578:	06ff4074 	uxtheq	r4, r4
   1157c:	0a00000a 	beq	115ac <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0xb4>
   11580:	e1d580d3 	ldrsb	r8, [r5, #3]
   11584:	e2444005 	sub	r4, r4, #5
   11588:	e1d500d2 	ldrsb	r0, [r5, #2]
   1158c:	e2855005 	add	r5, r5, #5
   11590:	e15510d4 	ldrsb	r1, [r5, #-4]
   11594:	e6ff4074 	uxth	r4, r4
   11598:	e15520d1 	ldrsb	r2, [r5, #-1]
   1159c:	e1a08808 	lsl	r8, r8, #16
   115a0:	e1888400 	orr	r8, r8, r0, lsl #8
   115a4:	e1888001 	orr	r8, r8, r1
   115a8:	e1888c02 	orr	r8, r8, r2, lsl #24
   115ac:	e20330fc 	and	r3, r3, #252	; 0xfc
   115b0:	e3530084 	cmp	r3, #132	; 0x84
   115b4:	0a000023 	beq	11648 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x150>
   115b8:	e3530034 	cmp	r3, #52	; 0x34
   115bc:	0a000039 	beq	116a8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1b0>
   115c0:	ca000015 	bgt	1161c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x124>
   115c4:	e3530008 	cmp	r3, #8
   115c8:	0a000038 	beq	116b0 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1b8>
   115cc:	da000047 	ble	116f0 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f8>
   115d0:	e3530014 	cmp	r3, #20
   115d4:	058d8014 	streq	r8, [sp, #20]
   115d8:	0affffdb 	beq	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   115dc:	e3530024 	cmp	r3, #36	; 0x24
   115e0:	e59d2008 	ldr	r2, [sp, #8]
   115e4:	01a02008 	moveq	r2, r8
   115e8:	e3540000 	cmp	r4, #0
   115ec:	e58d2008 	str	r2, [sp, #8]
   115f0:	1affffd7 	bne	11554 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x5c>
   115f4:	e59d2010 	ldr	r2, [sp, #16]
   115f8:	e28a3007 	add	r3, sl, #7
   115fc:	e59d1018 	ldr	r1, [sp, #24]
   11600:	e1a031a3 	lsr	r3, r3, #3
   11604:	e1c239ba 	strh	r3, [r2, #154]	; 0x9a
   11608:	e5821020 	str	r1, [r2, #32]
   1160c:	e59d101c 	ldr	r1, [sp, #28]
   11610:	e582106c 	str	r1, [r2, #108]	; 0x6c
   11614:	e28dd034 	add	sp, sp, #52	; 0x34
   11618:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1161c:	e3530074 	cmp	r3, #116	; 0x74
   11620:	058d8004 	streq	r8, [sp, #4]
   11624:	0affffc8 	beq	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11628:	da000037 	ble	1170c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x214>
   1162c:	e3530080 	cmp	r3, #128	; 0x80
   11630:	0a000026 	beq	116d0 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1d8>
   11634:	e59d2000 	ldr	r2, [sp]
   11638:	e3530094 	cmp	r3, #148	; 0x94
   1163c:	01a02008 	moveq	r2, r8
   11640:	e58d2000 	str	r2, [sp]
   11644:	eaffffc0 	b	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11648:	e3560000 	cmp	r6, #0
   1164c:	1affffe8 	bne	115f4 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0xfc>
   11650:	e1a01006 	mov	r1, r6
   11654:	e3a02008 	mov	r2, #8
   11658:	e1a0000b 	mov	r0, fp
   1165c:	ebffff5a 	bl	113cc <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11660:	e3500000 	cmp	r0, #0
   11664:	11500008 	cmpne	r0, r8
   11668:	1affffe9 	bne	11614 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x11c>
   1166c:	e1a06008 	mov	r6, r8
   11670:	e3a0a008 	mov	sl, #8
   11674:	eaffffb4 	b	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11678:	e2444002 	sub	r4, r4, #2
   1167c:	e1d580d1 	ldrsb	r8, [r5, #1]
   11680:	e2855002 	add	r5, r5, #2
   11684:	e6ff4074 	uxth	r4, r4
   11688:	eaffffc7 	b	115ac <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0xb4>
   1168c:	e1d520d2 	ldrsb	r2, [r5, #2]
   11690:	e2444003 	sub	r4, r4, #3
   11694:	e5d58001 	ldrb	r8, [r5, #1]
   11698:	e2855003 	add	r5, r5, #3
   1169c:	e6ff4074 	uxth	r4, r4
   116a0:	e1888402 	orr	r8, r8, r2, lsl #8
   116a4:	eaffffc0 	b	115ac <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0xb4>
   116a8:	e58d800c 	str	r8, [sp, #12]
   116ac:	eaffffa6 	b	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   116b0:	e3580036 	cmp	r8, #54	; 0x36
   116b4:	ca000017 	bgt	11718 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x220>
   116b8:	e3580030 	cmp	r8, #48	; 0x30
   116bc:	aa00002d 	bge	11778 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x280>
   116c0:	e2488004 	sub	r8, r8, #4
   116c4:	e3580001 	cmp	r8, #1
   116c8:	93a09001 	movls	r9, #1
   116cc:	eaffff9e 	b	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   116d0:	e2088003 	and	r8, r8, #3
   116d4:	e3580002 	cmp	r8, #2
   116d8:	0a000013 	beq	1172c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x234>
   116dc:	e59d3000 	ldr	r3, [sp]
   116e0:	e59d2004 	ldr	r2, [sp, #4]
   116e4:	e0080293 	mul	r8, r3, r2
   116e8:	e08aa008 	add	sl, sl, r8
   116ec:	eaffff96 	b	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   116f0:	e3530004 	cmp	r3, #4
   116f4:	1affff94 	bne	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   116f8:	e3580009 	cmp	r8, #9
   116fc:	1affff92 	bne	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11700:	e3590001 	cmp	r9, #1
   11704:	03a09002 	moveq	r9, #2
   11708:	eaffff8f 	b	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   1170c:	e3530044 	cmp	r3, #68	; 0x44
   11710:	01a07008 	moveq	r7, r8
   11714:	eaffff8c 	b	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11718:	e3580039 	cmp	r8, #57	; 0x39
   1171c:	1affff8a 	bne	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11720:	e3590001 	cmp	r9, #1
   11724:	03a09004 	moveq	r9, #4
   11728:	eaffff87 	b	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   1172c:	e3590003 	cmp	r9, #3
   11730:	0a000013 	beq	11784 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x28c>
   11734:	e3590004 	cmp	r9, #4
   11738:	0a000053 	beq	1188c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x394>
   1173c:	e59d3000 	ldr	r3, [sp]
   11740:	e3590002 	cmp	r9, #2
   11744:	e59d2004 	ldr	r2, [sp, #4]
   11748:	e0080293 	mul	r8, r3, r2
   1174c:	1affffe5 	bne	116e8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f0>
   11750:	e59d2010 	ldr	r2, [sp, #16]
   11754:	e1a0100a 	mov	r1, sl
   11758:	e1a0000b 	mov	r0, fp
   1175c:	e3a09001 	mov	r9, #1
   11760:	e5823088 	str	r3, [r2, #136]	; 0x88
   11764:	e1a02008 	mov	r2, r8
   11768:	ebffff17 	bl	113cc <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   1176c:	e59d2010 	ldr	r2, [sp, #16]
   11770:	e582008c 	str	r0, [r2, #140]	; 0x8c
   11774:	eaffffdb 	b	116e8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f0>
   11778:	e3590001 	cmp	r9, #1
   1177c:	03a09003 	moveq	r9, #3
   11780:	eaffff71 	b	1154c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x54>
   11784:	e59d3000 	ldr	r3, [sp]
   11788:	e3530000 	cmp	r3, #0
   1178c:	0a000071 	beq	11958 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x460>
   11790:	e59d0018 	ldr	r0, [sp, #24]
   11794:	e3a0200c 	mov	r2, #12
   11798:	e59d1010 	ldr	r1, [sp, #16]
   1179c:	e303c2eb 	movw	ip, #13035	; 0x32eb
   117a0:	e34fc8a4 	movt	ip, #63652	; 0xf8a4
   117a4:	e58da018 	str	sl, [sp, #24]
   117a8:	e58d7020 	str	r7, [sp, #32]
   117ac:	e3a09000 	mov	r9, #0
   117b0:	e0281092 	mla	r8, r2, r0, r1
   117b4:	e59d2014 	ldr	r2, [sp, #20]
   117b8:	e59d100c 	ldr	r1, [sp, #12]
   117bc:	e152000c 	cmp	r2, ip
   117c0:	e58d6024 	str	r6, [sp, #36]	; 0x24
   117c4:	e1a03002 	mov	r3, r2
   117c8:	e58d5028 	str	r5, [sp, #40]	; 0x28
   117cc:	01a03001 	moveq	r3, r1
   117d0:	e59d1008 	ldr	r1, [sp, #8]
   117d4:	e1a02003 	mov	r2, r3
   117d8:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   117dc:	e151000c 	cmp	r1, ip
   117e0:	e1a06000 	mov	r6, r0
   117e4:	e1a03001 	mov	r3, r1
   117e8:	e59d4004 	ldr	r4, [sp, #4]
   117ec:	01a03007 	moveq	r3, r7
   117f0:	e1a07002 	mov	r7, r2
   117f4:	e1a01003 	mov	r1, r3
   117f8:	e1a0300a 	mov	r3, sl
   117fc:	e1a05003 	mov	r5, r3
   11800:	e1a0a001 	mov	sl, r1
   11804:	ea00000d 	b	11840 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x348>
   11808:	ebfffeef 	bl	113cc <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   1180c:	e2899001 	add	r9, r9, #1
   11810:	e59d3000 	ldr	r3, [sp]
   11814:	e3590005 	cmp	r9, #5
   11818:	e5880024 	str	r0, [r8, #36]	; 0x24
   1181c:	e2866001 	add	r6, r6, #1
   11820:	e288800c 	add	r8, r8, #12
   11824:	93a02000 	movls	r2, #0
   11828:	83a02001 	movhi	r2, #1
   1182c:	e1530009 	cmp	r3, r9
   11830:	93822001 	orrls	r2, r2, #1
   11834:	e0855004 	add	r5, r5, r4
   11838:	e3520000 	cmp	r2, #0
   1183c:	1a000008 	bne	11864 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x36c>
   11840:	e3570000 	cmp	r7, #0
   11844:	e1a01005 	mov	r1, r5
   11848:	e1a02004 	mov	r2, r4
   1184c:	e1a0000b 	mov	r0, fp
   11850:	e5887028 	str	r7, [r8, #40]	; 0x28
   11854:	e588a02c 	str	sl, [r8, #44]	; 0x2c
   11858:	aaffffea 	bge	11808 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x310>
   1185c:	ebffff1b 	bl	114d0 <CUSBGamePadDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   11860:	eaffffe9 	b	1180c <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x314>
   11864:	e59d2004 	ldr	r2, [sp, #4]
   11868:	e3a09001 	mov	r9, #1
   1186c:	e59da018 	ldr	sl, [sp, #24]
   11870:	e59d7020 	ldr	r7, [sp, #32]
   11874:	e58d6018 	str	r6, [sp, #24]
   11878:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   1187c:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   11880:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   11884:	e0080293 	mul	r8, r3, r2
   11888:	eaffff96 	b	116e8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f0>
   1188c:	e59d2000 	ldr	r2, [sp]
   11890:	e3520000 	cmp	r2, #0
   11894:	0a00002f 	beq	11958 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x460>
   11898:	e59d101c 	ldr	r1, [sp, #28]
   1189c:	e1a0900a 	mov	r9, sl
   118a0:	e59d0010 	ldr	r0, [sp, #16]
   118a4:	e3a08000 	mov	r8, #0
   118a8:	e58d701c 	str	r7, [sp, #28]
   118ac:	e0803101 	add	r3, r0, r1, lsl #2
   118b0:	e59d7004 	ldr	r7, [sp, #4]
   118b4:	e283306c 	add	r3, r3, #108	; 0x6c
   118b8:	e58da020 	str	sl, [sp, #32]
   118bc:	e58d5024 	str	r5, [sp, #36]	; 0x24
   118c0:	e1a0a001 	mov	sl, r1
   118c4:	e58d4028 	str	r4, [sp, #40]	; 0x28
   118c8:	e1a05003 	mov	r5, r3
   118cc:	e1a04002 	mov	r4, r2
   118d0:	e1a02007 	mov	r2, r7
   118d4:	e1a01009 	mov	r1, r9
   118d8:	e1a0000b 	mov	r0, fp
   118dc:	e2888001 	add	r8, r8, #1
   118e0:	ebfffeb9 	bl	113cc <CUSBGamePadDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   118e4:	e3580005 	cmp	r8, #5
   118e8:	e28aa001 	add	sl, sl, #1
   118ec:	e0899007 	add	r9, r9, r7
   118f0:	93a02000 	movls	r2, #0
   118f4:	83a02001 	movhi	r2, #1
   118f8:	e1540008 	cmp	r4, r8
   118fc:	93822001 	orrls	r2, r2, #1
   11900:	e5a50004 	str	r0, [r5, #4]!
   11904:	e3520000 	cmp	r2, #0
   11908:	0afffff0 	beq	118d0 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x3d8>
   1190c:	e59d3000 	ldr	r3, [sp]
   11910:	e3a09001 	mov	r9, #1
   11914:	e59d2004 	ldr	r2, [sp, #4]
   11918:	e59d701c 	ldr	r7, [sp, #28]
   1191c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   11920:	e58da01c 	str	sl, [sp, #28]
   11924:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   11928:	e59da020 	ldr	sl, [sp, #32]
   1192c:	e0080293 	mul	r8, r3, r2
   11930:	eaffff6c 	b	116e8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f0>
   11934:	e30b1f0c 	movw	r1, #48908	; 0xbf0c
   11938:	e30b0f1c 	movw	r0, #48924	; 0xbf1c
   1193c:	e3401002 	movt	r1, #2
   11940:	e3400002 	movt	r0, #2
   11944:	e3a020ec 	mov	r2, #236	; 0xec
   11948:	eb004c93 	bl	24b9c <assertion_failed>
   1194c:	e59d3010 	ldr	r3, [sp, #16]
   11950:	e5935094 	ldr	r5, [r3, #148]	; 0x94
   11954:	eafffeee 	b	11514 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1c>
   11958:	e3a08000 	mov	r8, #0
   1195c:	e3a09001 	mov	r9, #1
   11960:	eaffff60 	b	116e8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)+0x1f0>

00011964 <CUSBGamePadDevice::GetReport()>:
   11964:	e92d4870 	push	{r4, r5, r6, fp, lr}
   11968:	e28db010 	add	fp, sp, #16
   1196c:	e24dd014 	sub	sp, sp, #20
   11970:	e1d039ba 	ldrh	r3, [r0, #154]	; 0x9a
   11974:	e1a04000 	mov	r4, r0
   11978:	e2432001 	sub	r2, r3, #1
   1197c:	e352003e 	cmp	r2, #62	; 0x3e
   11980:	8a00001f 	bhi	11a04 <CUSBGamePadDevice::GetReport()+0xa0>
   11984:	e2833007 	add	r3, r3, #7
   11988:	e1a00004 	mov	r0, r4
   1198c:	e3c33007 	bic	r3, r3, #7
   11990:	e04dd003 	sub	sp, sp, r3
   11994:	eb0001d8 	bl	120fc <CUSBFunction::GetHost() const>
   11998:	e1a06000 	mov	r6, r0
   1199c:	e1a00004 	mov	r0, r4
   119a0:	eb0001c4 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
   119a4:	e1a05000 	mov	r5, r0
   119a8:	e1a00004 	mov	r0, r4
   119ac:	eb000244 	bl	122c4 <CUSBFunction::GetInterfaceNumber() const>
   119b0:	e1d439ba 	ldrh	r3, [r4, #154]	; 0x9a
   119b4:	e1a01005 	mov	r1, r5
   119b8:	e3a02c01 	mov	r2, #256	; 0x100
   119bc:	e28d5010 	add	r5, sp, #16
   119c0:	e58d2000 	str	r2, [sp]
   119c4:	e58d300c 	str	r3, [sp, #12]
   119c8:	e3a020a1 	mov	r2, #161	; 0xa1
   119cc:	e3a03001 	mov	r3, #1
   119d0:	e58d5008 	str	r5, [sp, #8]
   119d4:	e6ffc070 	uxth	ip, r0
   119d8:	e1a00006 	mov	r0, r6
   119dc:	e58dc004 	str	ip, [sp, #4]
   119e0:	ebfff1e1 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   119e4:	e3500000 	cmp	r0, #0
   119e8:	da00000d 	ble	11a24 <CUSBGamePadDevice::GetReport()+0xc0>
   119ec:	e1a00004 	mov	r0, r4
   119f0:	e1a01005 	mov	r1, r5
   119f4:	ebfffebf 	bl	114f8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)>
   119f8:	e2840020 	add	r0, r4, #32
   119fc:	e24bd010 	sub	sp, fp, #16
   11a00:	e8bd8870 	pop	{r4, r5, r6, fp, pc}
   11a04:	e30b1f0c 	movw	r1, #48908	; 0xbf0c
   11a08:	e30b0f38 	movw	r0, #48952	; 0xbf38
   11a0c:	e3401002 	movt	r1, #2
   11a10:	e3400002 	movt	r0, #2
   11a14:	e3a020b6 	mov	r2, #182	; 0xb6
   11a18:	eb004c5f 	bl	24b9c <assertion_failed>
   11a1c:	e1d439ba 	ldrh	r3, [r4, #154]	; 0x9a
   11a20:	eaffffd7 	b	11984 <CUSBGamePadDevice::GetReport()+0x20>
   11a24:	e3a00000 	mov	r0, #0
   11a28:	eafffff3 	b	119fc <CUSBGamePadDevice::GetReport()+0x98>

00011a2c <CUSBGamePadDevice::ReportHandler(unsigned char const*)>:
   11a2c:	e3510000 	cmp	r1, #0
   11a30:	012fff1e 	bxeq	lr
   11a34:	e5903090 	ldr	r3, [r0, #144]	; 0x90
   11a38:	e92d4010 	push	{r4, lr}
   11a3c:	e3530000 	cmp	r3, #0
   11a40:	e1a04000 	mov	r4, r0
   11a44:	08bd8010 	popeq	{r4, pc}
   11a48:	ebfffeaa 	bl	114f8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)>
   11a4c:	e594009c 	ldr	r0, [r4, #156]	; 0x9c
   11a50:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   11a54:	e2841020 	add	r1, r4, #32
   11a58:	e2400001 	sub	r0, r0, #1
   11a5c:	e8bd4010 	pop	{r4, lr}
   11a60:	e12fff13 	bx	r3

00011a64 <CUSBGamePadDevice::PS3Configure()>:
   11a64:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11a68:	e24dd014 	sub	sp, sp, #20
   11a6c:	e1a05000 	mov	r5, r0
   11a70:	eb0001a1 	bl	120fc <CUSBFunction::GetHost() const>
   11a74:	e3014a1c 	movw	r4, #6684	; 0x1a1c
   11a78:	e3404003 	movt	r4, #3
   11a7c:	e1a06000 	mov	r6, r0
   11a80:	e1a00005 	mov	r0, r5
   11a84:	eb00018b 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
   11a88:	e1a07000 	mov	r7, r0
   11a8c:	e1a00005 	mov	r0, r5
   11a90:	eb00020b 	bl	122c4 <CUSBFunction::GetInterfaceNumber() const>
   11a94:	e1a01007 	mov	r1, r7
   11a98:	e58d4008 	str	r4, [sp, #8]
   11a9c:	e3a03004 	mov	r3, #4
   11aa0:	e3a02ffd 	mov	r2, #1012	; 0x3f4
   11aa4:	e58d300c 	str	r3, [sp, #12]
   11aa8:	e58d2000 	str	r2, [sp]
   11aac:	e3a03009 	mov	r3, #9
   11ab0:	e3a02021 	mov	r2, #33	; 0x21
   11ab4:	e2844004 	add	r4, r4, #4
   11ab8:	e6ffc070 	uxth	ip, r0
   11abc:	e1a00006 	mov	r0, r6
   11ac0:	e58dc004 	str	ip, [sp, #4]
   11ac4:	ebfff1a8 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11ac8:	e595209c 	ldr	r2, [r5, #156]	; 0x9c
   11acc:	e30b3ed4 	movw	r3, #48852	; 0xbed4
   11ad0:	e3403002 	movt	r3, #2
   11ad4:	e0833002 	add	r3, r3, r2
   11ad8:	e1a00005 	mov	r0, r5
   11adc:	e5d33028 	ldrb	r3, [r3, #40]	; 0x28
   11ae0:	e1a03083 	lsl	r3, r3, #1
   11ae4:	e5c43009 	strb	r3, [r4, #9]
   11ae8:	eb000183 	bl	120fc <CUSBFunction::GetHost() const>
   11aec:	e1a06000 	mov	r6, r0
   11af0:	e1a00005 	mov	r0, r5
   11af4:	eb00016f 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
   11af8:	e1a07000 	mov	r7, r0
   11afc:	e1a00005 	mov	r0, r5
   11b00:	eb0001ef 	bl	122c4 <CUSBFunction::GetInterfaceNumber() const>
   11b04:	e1a01007 	mov	r1, r7
   11b08:	e58d4008 	str	r4, [sp, #8]
   11b0c:	e3a03030 	mov	r3, #48	; 0x30
   11b10:	e3002201 	movw	r2, #513	; 0x201
   11b14:	e58d300c 	str	r3, [sp, #12]
   11b18:	e58d2000 	str	r2, [sp]
   11b1c:	e3a03009 	mov	r3, #9
   11b20:	e3a02021 	mov	r2, #33	; 0x21
   11b24:	e6ffc070 	uxth	ip, r0
   11b28:	e1a00006 	mov	r0, r6
   11b2c:	e58dc004 	str	ip, [sp, #4]
   11b30:	ebfff18d 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11b34:	e28dd014 	add	sp, sp, #20
   11b38:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00011b3c <CUSBGamePadDevice::Configure()>:
   11b3c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11b40:	e3a01021 	mov	r1, #33	; 0x21
   11b44:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   11b48:	e1a04000 	mov	r4, r0
   11b4c:	eb0001ac 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
   11b50:	e2505000 	subs	r5, r0, #0
   11b54:	0a000002 	beq	11b64 <CUSBGamePadDevice::Configure()+0x28>
   11b58:	e1d530b7 	ldrh	r3, [r5, #7]
   11b5c:	e2530000 	subs	r0, r3, #0
   11b60:	1a000006 	bne	11b80 <CUSBGamePadDevice::Configure()+0x44>
   11b64:	e1a00004 	mov	r0, r4
   11b68:	e59f11fc 	ldr	r1, [pc, #508]	; 11d6c <CUSBGamePadDevice::Configure()+0x230>
   11b6c:	eb0001b7 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   11b70:	e3a05000 	mov	r5, #0
   11b74:	e1a00005 	mov	r0, r5
   11b78:	e28dd02c 	add	sp, sp, #44	; 0x2c
   11b7c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11b80:	e1c439b8 	strh	r3, [r4, #152]	; 0x98
   11b84:	eb0040f9 	bl	21f70 <operator new[](unsigned int)>
   11b88:	e5840094 	str	r0, [r4, #148]	; 0x94
   11b8c:	e1a00004 	mov	r0, r4
   11b90:	eb000159 	bl	120fc <CUSBFunction::GetHost() const>
   11b94:	e1a06000 	mov	r6, r0
   11b98:	e1a00004 	mov	r0, r4
   11b9c:	eb000145 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
   11ba0:	e5d59006 	ldrb	r9, [r5, #6]
   11ba4:	e5947094 	ldr	r7, [r4, #148]	; 0x94
   11ba8:	e1d459b8 	ldrh	r5, [r4, #152]	; 0x98
   11bac:	e1a08000 	mov	r8, r0
   11bb0:	e1a00004 	mov	r0, r4
   11bb4:	eb0001c2 	bl	122c4 <CUSBFunction::GetInterfaceNumber() const>
   11bb8:	e3a0c081 	mov	ip, #129	; 0x81
   11bbc:	e3a03000 	mov	r3, #0
   11bc0:	e58dc008 	str	ip, [sp, #8]
   11bc4:	e1a02009 	mov	r2, r9
   11bc8:	e1a01008 	mov	r1, r8
   11bcc:	e58d7000 	str	r7, [sp]
   11bd0:	e58d5004 	str	r5, [sp, #4]
   11bd4:	e6ffc070 	uxth	ip, r0
   11bd8:	e1a00006 	mov	r0, r6
   11bdc:	e58dc00c 	str	ip, [sp, #12]
   11be0:	ebfff18c 	bl	e218 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   11be4:	e1d439b8 	ldrh	r3, [r4, #152]	; 0x98
   11be8:	e1500003 	cmp	r0, r3
   11bec:	0a000009 	beq	11c18 <CUSBGamePadDevice::Configure()+0xdc>
   11bf0:	eb004d6e 	bl	251b0 <CLogger::Get()>
   11bf4:	e3a02001 	mov	r2, #1
   11bf8:	e59f116c 	ldr	r1, [pc, #364]	; 11d6c <CUSBGamePadDevice::Configure()+0x230>
   11bfc:	e30b3f64 	movw	r3, #48996	; 0xbf64
   11c00:	e3403002 	movt	r3, #2
   11c04:	e3a05000 	mov	r5, #0
   11c08:	eb004e44 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c0c:	e1a00005 	mov	r0, r5
   11c10:	e28dd02c 	add	sp, sp, #44	; 0x2c
   11c14:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11c18:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   11c1c:	e28d1010 	add	r1, sp, #16
   11c20:	e1a00004 	mov	r0, r4
   11c24:	edcd0b04 	vstr	d16, [sp, #16]
   11c28:	ebfffe32 	bl	114f8 <CUSBGamePadDevice::DecodeReport(unsigned char const*)>
   11c2c:	e5943020 	ldr	r3, [r4, #32]
   11c30:	e3530000 	cmp	r3, #0
   11c34:	1a000002 	bne	11c44 <CUSBGamePadDevice::Configure()+0x108>
   11c38:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
   11c3c:	e3530000 	cmp	r3, #0
   11c40:	0a000029 	beq	11cec <CUSBGamePadDevice::Configure()+0x1b0>
   11c44:	e1d419ba 	ldrh	r1, [r4, #154]	; 0x9a
   11c48:	e3510000 	cmp	r1, #0
   11c4c:	0a000031 	beq	11d18 <CUSBGamePadDevice::Configure()+0x1dc>
   11c50:	e1a00004 	mov	r0, r4
   11c54:	ebfffc2c 	bl	10d0c <CUSBHIDDevice::Configure(unsigned int)>
   11c58:	e2505000 	subs	r5, r0, #0
   11c5c:	0a000026 	beq	11cfc <CUSBGamePadDevice::Configure()+0x1c0>
   11c60:	e1a00004 	mov	r0, r4
   11c64:	eb000103 	bl	12078 <CUSBFunction::GetDevice() const>
   11c68:	ebffed83 	bl	d27c <CUSBDevice::GetDeviceDescriptor() const>
   11c6c:	e2505000 	subs	r5, r0, #0
   11c70:	0a000036 	beq	11d50 <CUSBGamePadDevice::Configure()+0x214>
   11c74:	e1d520b8 	ldrh	r2, [r5, #8]
   11c78:	e300354c 	movw	r3, #1356	; 0x54c
   11c7c:	e1520003 	cmp	r2, r3
   11c80:	0a00002c 	beq	11d38 <CUSBGamePadDevice::Configure()+0x1fc>
   11c84:	e3013a1c 	movw	r3, #6684	; 0x1a1c
   11c88:	e3403003 	movt	r3, #3
   11c8c:	e28d0018 	add	r0, sp, #24
   11c90:	e3a05001 	mov	r5, #1
   11c94:	e5932034 	ldr	r2, [r3, #52]	; 0x34
   11c98:	e0821005 	add	r1, r2, r5
   11c9c:	e5831034 	str	r1, [r3, #52]	; 0x34
   11ca0:	e584209c 	str	r2, [r4, #156]	; 0x9c
   11ca4:	eb0050c8 	bl	25fcc <CString::CString()>
   11ca8:	e594209c 	ldr	r2, [r4, #156]	; 0x9c
   11cac:	e28d0018 	add	r0, sp, #24
   11cb0:	e30b1fb0 	movw	r1, #49072	; 0xbfb0
   11cb4:	e3401002 	movt	r1, #2
   11cb8:	eb005422 	bl	26d48 <CString::Format(char const*, ...)>
   11cbc:	eb004d0e 	bl	250fc <CDeviceNameService::Get()>
   11cc0:	e1a06000 	mov	r6, r0
   11cc4:	e28d0018 	add	r0, sp, #24
   11cc8:	eb0050d6 	bl	26028 <CString::operator char const*() const>
   11ccc:	e1a02004 	mov	r2, r4
   11cd0:	e3a03000 	mov	r3, #0
   11cd4:	e1a01000 	mov	r1, r0
   11cd8:	e1a00006 	mov	r0, r6
   11cdc:	eb004c92 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   11ce0:	e28d0018 	add	r0, sp, #24
   11ce4:	eb005085 	bl	25f00 <CString::~CString()>
   11ce8:	eaffffa1 	b	11b74 <CUSBGamePadDevice::Configure()+0x38>
   11cec:	e5945088 	ldr	r5, [r4, #136]	; 0x88
   11cf0:	e3550000 	cmp	r5, #0
   11cf4:	1affffd2 	bne	11c44 <CUSBGamePadDevice::Configure()+0x108>
   11cf8:	eaffff9d 	b	11b74 <CUSBGamePadDevice::Configure()+0x38>
   11cfc:	eb004d2b 	bl	251b0 <CLogger::Get()>
   11d00:	e30b3ca0 	movw	r3, #48288	; 0xbca0
   11d04:	e3a02001 	mov	r2, #1
   11d08:	e3403002 	movt	r3, #2
   11d0c:	e59f1058 	ldr	r1, [pc, #88]	; 11d6c <CUSBGamePadDevice::Configure()+0x230>
   11d10:	eb004e02 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11d14:	eaffff96 	b	11b74 <CUSBGamePadDevice::Configure()+0x38>
   11d18:	e30b1f0c 	movw	r1, #48908	; 0xbf0c
   11d1c:	e30b0f88 	movw	r0, #49032	; 0xbf88
   11d20:	e3401002 	movt	r1, #2
   11d24:	e3400002 	movt	r0, #2
   11d28:	e3a0209b 	mov	r2, #155	; 0x9b
   11d2c:	eb004b9a 	bl	24b9c <assertion_failed>
   11d30:	e1d419ba 	ldrh	r1, [r4, #154]	; 0x9a
   11d34:	eaffffc5 	b	11c50 <CUSBGamePadDevice::Configure()+0x114>
   11d38:	e1d530ba 	ldrh	r3, [r5, #10]
   11d3c:	e3530f9a 	cmp	r3, #616	; 0x268
   11d40:	1affffcf 	bne	11c84 <CUSBGamePadDevice::Configure()+0x148>
   11d44:	e1a00004 	mov	r0, r4
   11d48:	ebffff45 	bl	11a64 <CUSBGamePadDevice::PS3Configure()>
   11d4c:	eaffffcc 	b	11c84 <CUSBGamePadDevice::Configure()+0x148>
   11d50:	e30b1f0c 	movw	r1, #48908	; 0xbf0c
   11d54:	e30b0f9c 	movw	r0, #49052	; 0xbf9c
   11d58:	e3401002 	movt	r1, #2
   11d5c:	e3400002 	movt	r0, #2
   11d60:	e3a020a4 	mov	r2, #164	; 0xa4
   11d64:	eb004b8c 	bl	24b9c <assertion_failed>
   11d68:	eaffffc1 	b	11c74 <CUSBGamePadDevice::Configure()+0x138>
   11d6c:	0002bf04 	.word	0x0002bf04

00011d70 <CUSBFunction::Initialize()>:
   11d70:	e3a00001 	mov	r0, #1
   11d74:	e12fff1e 	bx	lr

00011d78 <CUSBFunction::~CUSBFunction()>:
   11d78:	e92d4070 	push	{r4, r5, r6, lr}
   11d7c:	e3a02000 	mov	r2, #0
   11d80:	e5905008 	ldr	r5, [r0, #8]
   11d84:	e1a04000 	mov	r4, r0
   11d88:	e59f303c 	ldr	r3, [pc, #60]	; 11dcc <CUSBFunction::~CUSBFunction()+0x54>
   11d8c:	e1550002 	cmp	r5, r2
   11d90:	e580200c 	str	r2, [r0, #12]
   11d94:	e5803000 	str	r3, [r0]
   11d98:	0a000004 	beq	11db0 <CUSBFunction::~CUSBFunction()+0x38>
   11d9c:	e1a00005 	mov	r0, r5
   11da0:	eb0007da 	bl	13d10 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   11da4:	e1a00005 	mov	r0, r5
   11da8:	e3a0101c 	mov	r1, #28
   11dac:	eb004072 	bl	21f7c <operator delete(void*, unsigned int)>
   11db0:	e3a03000 	mov	r3, #0
   11db4:	e1a00004 	mov	r0, r4
   11db8:	e5843008 	str	r3, [r4, #8]
   11dbc:	e5843004 	str	r3, [r4, #4]
   11dc0:	eb00450c 	bl	231f8 <CDevice::~CDevice()>
   11dc4:	e1a00004 	mov	r0, r4
   11dc8:	e8bd8070 	pop	{r4, r5, r6, pc}
   11dcc:	0002bfc0 	.word	0x0002bfc0

00011dd0 <CUSBFunction::~CUSBFunction()>:
   11dd0:	e92d4010 	push	{r4, lr}
   11dd4:	e1a04000 	mov	r4, r0
   11dd8:	ebffffe6 	bl	11d78 <CUSBFunction::~CUSBFunction()>
   11ddc:	e1a00004 	mov	r0, r4
   11de0:	e3a01010 	mov	r1, #16
   11de4:	eb004064 	bl	21f7c <operator delete(void*, unsigned int)>
   11de8:	e1a00004 	mov	r0, r4
   11dec:	e8bd8010 	pop	{r4, pc}

00011df0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   11df0:	e92d4070 	push	{r4, r5, r6, lr}
   11df4:	e1a04000 	mov	r4, r0
   11df8:	e1a05001 	mov	r5, r1
   11dfc:	e1a06002 	mov	r6, r2
   11e00:	eb004508 	bl	23228 <CDevice::CDevice()>
   11e04:	e59f20ac 	ldr	r2, [pc, #172]	; 11eb8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xc8>
   11e08:	e3550000 	cmp	r5, #0
   11e0c:	e3a03000 	mov	r3, #0
   11e10:	e5845004 	str	r5, [r4, #4]
   11e14:	e5843008 	str	r3, [r4, #8]
   11e18:	e5842000 	str	r2, [r4]
   11e1c:	e584300c 	str	r3, [r4, #12]
   11e20:	0a000016 	beq	11e80 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x90>
   11e24:	e3560000 	cmp	r6, #0
   11e28:	0a00001b 	beq	11e9c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
   11e2c:	e3a0001c 	mov	r0, #28
   11e30:	eb00404d 	bl	21f6c <operator new(unsigned int)>
   11e34:	e1a01006 	mov	r1, r6
   11e38:	e1a05000 	mov	r5, r0
   11e3c:	eb00079b 	bl	13cb0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   11e40:	e5845008 	str	r5, [r4, #8]
   11e44:	e1a00005 	mov	r0, r5
   11e48:	eb0007eb 	bl	13dfc <CUSBConfigurationParser::GetCurrentDescriptor()>
   11e4c:	e3500000 	cmp	r0, #0
   11e50:	e584000c 	str	r0, [r4, #12]
   11e54:	0a000001 	beq	11e60 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x70>
   11e58:	e1a00004 	mov	r0, r4
   11e5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11e60:	e3a02029 	mov	r2, #41	; 0x29
   11e64:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   11e68:	e30c0008 	movw	r0, #49160	; 0xc008
   11e6c:	e3401002 	movt	r1, #2
   11e70:	e3400002 	movt	r0, #2
   11e74:	eb004b48 	bl	24b9c <assertion_failed>
   11e78:	e1a00004 	mov	r0, r4
   11e7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11e80:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   11e84:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   11e88:	e3401002 	movt	r1, #2
   11e8c:	e3400002 	movt	r0, #2
   11e90:	e3a02022 	mov	r2, #34	; 0x22
   11e94:	eb004b40 	bl	24b9c <assertion_failed>
   11e98:	eaffffe1 	b	11e24 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x34>
   11e9c:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   11ea0:	e30b0ff4 	movw	r0, #49140	; 0xbff4
   11ea4:	e3401002 	movt	r1, #2
   11ea8:	e3400002 	movt	r0, #2
   11eac:	e3a02024 	mov	r2, #36	; 0x24
   11eb0:	eb004b39 	bl	24b9c <assertion_failed>
   11eb4:	eaffffdc 	b	11e2c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x3c>
   11eb8:	0002bfc0 	.word	0x0002bfc0

00011ebc <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   11ebc:	e92d4070 	push	{r4, r5, r6, lr}
   11ec0:	e1a04000 	mov	r4, r0
   11ec4:	e1a05001 	mov	r5, r1
   11ec8:	eb0044d6 	bl	23228 <CDevice::CDevice()>
   11ecc:	e59f20f4 	ldr	r2, [pc, #244]	; 11fc8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x10c>
   11ed0:	e3550000 	cmp	r5, #0
   11ed4:	e3a03000 	mov	r3, #0
   11ed8:	e5843008 	str	r3, [r4, #8]
   11edc:	e584300c 	str	r3, [r4, #12]
   11ee0:	e884000c 	stm	r4, {r2, r3}
   11ee4:	0a00001b 	beq	11f58 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
   11ee8:	e5953004 	ldr	r3, [r5, #4]
   11eec:	e3530000 	cmp	r3, #0
   11ef0:	e5843004 	str	r3, [r4, #4]
   11ef4:	0a00001e 	beq	11f74 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xb8>
   11ef8:	e5953008 	ldr	r3, [r5, #8]
   11efc:	e3530000 	cmp	r3, #0
   11f00:	0a000022 	beq	11f90 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xd4>
   11f04:	e3a0001c 	mov	r0, #28
   11f08:	eb004017 	bl	21f6c <operator new(unsigned int)>
   11f0c:	e5951008 	ldr	r1, [r5, #8]
   11f10:	e1a06000 	mov	r6, r0
   11f14:	eb000765 	bl	13cb0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   11f18:	e1a00006 	mov	r0, r6
   11f1c:	e5846008 	str	r6, [r4, #8]
   11f20:	eb0007b5 	bl	13dfc <CUSBConfigurationParser::GetCurrentDescriptor()>
   11f24:	e3500000 	cmp	r0, #0
   11f28:	e584000c 	str	r0, [r4, #12]
   11f2c:	0a000001 	beq	11f38 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
   11f30:	e1a00004 	mov	r0, r4
   11f34:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f38:	e3a0203a 	mov	r2, #58	; 0x3a
   11f3c:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   11f40:	e30c0008 	movw	r0, #49160	; 0xc008
   11f44:	e3401002 	movt	r1, #2
   11f48:	e3400002 	movt	r0, #2
   11f4c:	eb004b12 	bl	24b9c <assertion_failed>
   11f50:	e1a00004 	mov	r0, r4
   11f54:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f58:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   11f5c:	e30c0020 	movw	r0, #49184	; 0xc020
   11f60:	e3401002 	movt	r1, #2
   11f64:	e3400002 	movt	r0, #2
   11f68:	e3a02031 	mov	r2, #49	; 0x31
   11f6c:	eb004b0a 	bl	24b9c <assertion_failed>
   11f70:	eaffffdc 	b	11ee8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x2c>
   11f74:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   11f78:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   11f7c:	e3401002 	movt	r1, #2
   11f80:	e3400002 	movt	r0, #2
   11f84:	e3a02033 	mov	r2, #51	; 0x33
   11f88:	eb004b03 	bl	24b9c <assertion_failed>
   11f8c:	eaffffd9 	b	11ef8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x3c>
   11f90:	e3a02035 	mov	r2, #53	; 0x35
   11f94:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   11f98:	e30c0030 	movw	r0, #49200	; 0xc030
   11f9c:	e3401002 	movt	r1, #2
   11fa0:	e3400002 	movt	r0, #2
   11fa4:	eb004afc 	bl	24b9c <assertion_failed>
   11fa8:	e3a0001c 	mov	r0, #28
   11fac:	eb003fee 	bl	21f6c <operator new(unsigned int)>
   11fb0:	e5951008 	ldr	r1, [r5, #8]
   11fb4:	e1a06000 	mov	r6, r0
   11fb8:	eb00073c 	bl	13cb0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   11fbc:	e1a00006 	mov	r0, r6
   11fc0:	e5846008 	str	r6, [r4, #8]
   11fc4:	eaffffd5 	b	11f20 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x64>
   11fc8:	0002bfc0 	.word	0x0002bfc0

00011fcc <CUSBFunction::GetInterfaceName() const>:
   11fcc:	e92d4030 	push	{r4, r5, lr}
   11fd0:	e1a05000 	mov	r5, r0
   11fd4:	e24dd00c 	sub	sp, sp, #12
   11fd8:	e3a00010 	mov	r0, #16
   11fdc:	eb003fe2 	bl	21f6c <operator new(unsigned int)>
   11fe0:	e30b10e8 	movw	r1, #45288	; 0xb0e8
   11fe4:	e3401002 	movt	r1, #2
   11fe8:	e1a04000 	mov	r4, r0
   11fec:	eb004ffd 	bl	25fe8 <CString::CString(char const*)>
   11ff0:	e595100c 	ldr	r1, [r5, #12]
   11ff4:	e3510000 	cmp	r1, #0
   11ff8:	0a00000b 	beq	1202c <CUSBFunction::GetInterfaceName() const+0x60>
   11ffc:	e5d12005 	ldrb	r2, [r1, #5]
   12000:	e2423001 	sub	r3, r2, #1
   12004:	e6ef3073 	uxtb	r3, r3
   12008:	e35300fd 	cmp	r3, #253	; 0xfd
   1200c:	8a000006 	bhi	1202c <CUSBFunction::GetInterfaceName() const+0x60>
   12010:	e5d1c007 	ldrb	ip, [r1, #7]
   12014:	e1a00004 	mov	r0, r4
   12018:	e5d13006 	ldrb	r3, [r1, #6]
   1201c:	e30c1050 	movw	r1, #49232	; 0xc050
   12020:	e3401002 	movt	r1, #2
   12024:	e58dc000 	str	ip, [sp]
   12028:	eb005346 	bl	26d48 <CString::Format(char const*, ...)>
   1202c:	e1a00004 	mov	r0, r4
   12030:	e28dd00c 	add	sp, sp, #12
   12034:	e8bd8030 	pop	{r4, r5, pc}

00012038 <CUSBFunction::GetNumEndpoints() const>:
   12038:	e590300c 	ldr	r3, [r0, #12]
   1203c:	e3530000 	cmp	r3, #0
   12040:	0a000001 	beq	1204c <CUSBFunction::GetNumEndpoints() const+0x14>
   12044:	e5d30004 	ldrb	r0, [r3, #4]
   12048:	e12fff1e 	bx	lr
   1204c:	e92d4010 	push	{r4, lr}
   12050:	e3a02073 	mov	r2, #115	; 0x73
   12054:	e1a04000 	mov	r4, r0
   12058:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   1205c:	e30c0008 	movw	r0, #49160	; 0xc008
   12060:	e3401002 	movt	r1, #2
   12064:	e3400002 	movt	r0, #2
   12068:	eb004acb 	bl	24b9c <assertion_failed>
   1206c:	e594300c 	ldr	r3, [r4, #12]
   12070:	e5d30004 	ldrb	r0, [r3, #4]
   12074:	e8bd8010 	pop	{r4, pc}

00012078 <CUSBFunction::GetDevice() const>:
   12078:	e5903004 	ldr	r3, [r0, #4]
   1207c:	e3530000 	cmp	r3, #0
   12080:	0a000001 	beq	1208c <CUSBFunction::GetDevice() const+0x14>
   12084:	e1a00003 	mov	r0, r3
   12088:	e12fff1e 	bx	lr
   1208c:	e92d4010 	push	{r4, lr}
   12090:	e3a02079 	mov	r2, #121	; 0x79
   12094:	e1a04000 	mov	r4, r0
   12098:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   1209c:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   120a0:	e3401002 	movt	r1, #2
   120a4:	e3400002 	movt	r0, #2
   120a8:	eb004abb 	bl	24b9c <assertion_failed>
   120ac:	e5943004 	ldr	r3, [r4, #4]
   120b0:	e1a00003 	mov	r0, r3
   120b4:	e8bd8010 	pop	{r4, pc}

000120b8 <CUSBFunction::GetEndpoint0() const>:
   120b8:	e5903004 	ldr	r3, [r0, #4]
   120bc:	e3530000 	cmp	r3, #0
   120c0:	0a000001 	beq	120cc <CUSBFunction::GetEndpoint0() const+0x14>
   120c4:	e1a00003 	mov	r0, r3
   120c8:	eaffec4b 	b	d1fc <CUSBDevice::GetEndpoint0() const>
   120cc:	e92d4010 	push	{r4, lr}
   120d0:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   120d4:	e1a04000 	mov	r4, r0
   120d8:	e3401002 	movt	r1, #2
   120dc:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   120e0:	e3a0207f 	mov	r2, #127	; 0x7f
   120e4:	e3400002 	movt	r0, #2
   120e8:	eb004aab 	bl	24b9c <assertion_failed>
   120ec:	e5943004 	ldr	r3, [r4, #4]
   120f0:	e8bd4010 	pop	{r4, lr}
   120f4:	e1a00003 	mov	r0, r3
   120f8:	eaffec3f 	b	d1fc <CUSBDevice::GetEndpoint0() const>

000120fc <CUSBFunction::GetHost() const>:
   120fc:	e5903004 	ldr	r3, [r0, #4]
   12100:	e3530000 	cmp	r3, #0
   12104:	0a000001 	beq	12110 <CUSBFunction::GetHost() const+0x14>
   12108:	e1a00003 	mov	r0, r3
   1210c:	eaffec4a 	b	d23c <CUSBDevice::GetHost() const>
   12110:	e92d4010 	push	{r4, lr}
   12114:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   12118:	e1a04000 	mov	r4, r0
   1211c:	e3401002 	movt	r1, #2
   12120:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   12124:	e3a02085 	mov	r2, #133	; 0x85
   12128:	e3400002 	movt	r0, #2
   1212c:	eb004a9a 	bl	24b9c <assertion_failed>
   12130:	e5943004 	ldr	r3, [r4, #4]
   12134:	e8bd4010 	pop	{r4, lr}
   12138:	e1a00003 	mov	r0, r3
   1213c:	eaffec3e 	b	d23c <CUSBDevice::GetHost() const>

00012140 <CUSBFunction::Configure()>:
   12140:	e590300c 	ldr	r3, [r0, #12]
   12144:	e92d4070 	push	{r4, r5, r6, lr}
   12148:	e3530000 	cmp	r3, #0
   1214c:	e24dd010 	sub	sp, sp, #16
   12150:	e1a05000 	mov	r5, r0
   12154:	0a000021 	beq	121e0 <CUSBFunction::Configure()+0xa0>
   12158:	e5d33003 	ldrb	r3, [r3, #3]
   1215c:	e3530000 	cmp	r3, #0
   12160:	1a000002 	bne	12170 <CUSBFunction::Configure()+0x30>
   12164:	e3a00001 	mov	r0, #1
   12168:	e28dd010 	add	sp, sp, #16
   1216c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12170:	e1a00005 	mov	r0, r5
   12174:	e3a04000 	mov	r4, #0
   12178:	ebffffdf 	bl	120fc <CUSBFunction::GetHost() const>
   1217c:	e1a06000 	mov	r6, r0
   12180:	e1a00005 	mov	r0, r5
   12184:	ebffffcb 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
   12188:	e595100c 	ldr	r1, [r5, #12]
   1218c:	e58d400c 	str	r4, [sp, #12]
   12190:	e3a0300b 	mov	r3, #11
   12194:	e58d4008 	str	r4, [sp, #8]
   12198:	e3a02001 	mov	r2, #1
   1219c:	e5d1c002 	ldrb	ip, [r1, #2]
   121a0:	e58dc004 	str	ip, [sp, #4]
   121a4:	e5d11003 	ldrb	r1, [r1, #3]
   121a8:	e58d1000 	str	r1, [sp]
   121ac:	e1a01000 	mov	r1, r0
   121b0:	e1a00006 	mov	r0, r6
   121b4:	ebffefec 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   121b8:	e1500004 	cmp	r0, r4
   121bc:	aaffffe8 	bge	12164 <CUSBFunction::Configure()+0x24>
   121c0:	eb004bfa 	bl	251b0 <CLogger::Get()>
   121c4:	e30b3880 	movw	r3, #47232	; 0xb880
   121c8:	e3a02001 	mov	r2, #1
   121cc:	e3403002 	movt	r3, #2
   121d0:	e59f1028 	ldr	r1, [pc, #40]	; 12200 <CUSBFunction::Configure()+0xc0>
   121d4:	eb004cd1 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   121d8:	e1a00004 	mov	r0, r4
   121dc:	eaffffe1 	b	12168 <CUSBFunction::Configure()+0x28>
   121e0:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   121e4:	e30c0008 	movw	r0, #49160	; 0xc008
   121e8:	e3401002 	movt	r1, #2
   121ec:	e3400002 	movt	r0, #2
   121f0:	e3a0204e 	mov	r2, #78	; 0x4e
   121f4:	eb004a68 	bl	24b9c <assertion_failed>
   121f8:	e595300c 	ldr	r3, [r5, #12]
   121fc:	eaffffd5 	b	12158 <CUSBFunction::Configure()+0x18>
   12200:	0002bfdc 	.word	0x0002bfdc

00012204 <CUSBFunction::GetDescriptor(unsigned char)>:
   12204:	e92d4070 	push	{r4, r5, r6, lr}
   12208:	e1a04000 	mov	r4, r0
   1220c:	e5900008 	ldr	r0, [r0, #8]
   12210:	e1a05001 	mov	r5, r1
   12214:	e3500000 	cmp	r0, #0
   12218:	0a000002 	beq	12228 <CUSBFunction::GetDescriptor(unsigned char)+0x24>
   1221c:	e1a01005 	mov	r1, r5
   12220:	e8bd4070 	pop	{r4, r5, r6, lr}
   12224:	ea0006bc 	b	13d1c <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   12228:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   1222c:	e30b0148 	movw	r0, #45384	; 0xb148
   12230:	e3401002 	movt	r1, #2
   12234:	e3400002 	movt	r0, #2
   12238:	e3a0208b 	mov	r2, #139	; 0x8b
   1223c:	eb004a56 	bl	24b9c <assertion_failed>
   12240:	e5940008 	ldr	r0, [r4, #8]
   12244:	e1a01005 	mov	r1, r5
   12248:	e8bd4070 	pop	{r4, r5, r6, lr}
   1224c:	ea0006b2 	b	13d1c <CUSBConfigurationParser::GetDescriptor(unsigned char)>

00012250 <CUSBFunction::ConfigurationError(char const*) const>:
   12250:	e5903008 	ldr	r3, [r0, #8]
   12254:	e92d4070 	push	{r4, r5, r6, lr}
   12258:	e3530000 	cmp	r3, #0
   1225c:	e1a04000 	mov	r4, r0
   12260:	e1a05001 	mov	r5, r1
   12264:	0a00000f 	beq	122a8 <CUSBFunction::ConfigurationError(char const*) const+0x58>
   12268:	e3550000 	cmp	r5, #0
   1226c:	0a000003 	beq	12280 <CUSBFunction::ConfigurationError(char const*) const+0x30>
   12270:	e1a01005 	mov	r1, r5
   12274:	e5940008 	ldr	r0, [r4, #8]
   12278:	e8bd4070 	pop	{r4, r5, r6, lr}
   1227c:	ea0006f5 	b	13e58 <CUSBConfigurationParser::Error(char const*) const>
   12280:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   12284:	e30c005c 	movw	r0, #49244	; 0xc05c
   12288:	e3401002 	movt	r1, #2
   1228c:	e3400002 	movt	r0, #2
   12290:	e3a02092 	mov	r2, #146	; 0x92
   12294:	eb004a40 	bl	24b9c <assertion_failed>
   12298:	e1a01005 	mov	r1, r5
   1229c:	e5940008 	ldr	r0, [r4, #8]
   122a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   122a4:	ea0006eb 	b	13e58 <CUSBConfigurationParser::Error(char const*) const>
   122a8:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   122ac:	e30b0148 	movw	r0, #45384	; 0xb148
   122b0:	e3401002 	movt	r1, #2
   122b4:	e3400002 	movt	r0, #2
   122b8:	e3a02091 	mov	r2, #145	; 0x91
   122bc:	eb004a36 	bl	24b9c <assertion_failed>
   122c0:	eaffffe8 	b	12268 <CUSBFunction::ConfigurationError(char const*) const+0x18>

000122c4 <CUSBFunction::GetInterfaceNumber() const>:
   122c4:	e590300c 	ldr	r3, [r0, #12]
   122c8:	e3530000 	cmp	r3, #0
   122cc:	0a000001 	beq	122d8 <CUSBFunction::GetInterfaceNumber() const+0x14>
   122d0:	e5d30002 	ldrb	r0, [r3, #2]
   122d4:	e12fff1e 	bx	lr
   122d8:	e92d4010 	push	{r4, lr}
   122dc:	e3a02098 	mov	r2, #152	; 0x98
   122e0:	e1a04000 	mov	r4, r0
   122e4:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   122e8:	e30c0008 	movw	r0, #49160	; 0xc008
   122ec:	e3401002 	movt	r1, #2
   122f0:	e3400002 	movt	r0, #2
   122f4:	eb004a28 	bl	24b9c <assertion_failed>
   122f8:	e594300c 	ldr	r3, [r4, #12]
   122fc:	e5d30002 	ldrb	r0, [r3, #2]
   12300:	e8bd8010 	pop	{r4, pc}

00012304 <CUSBFunction::GetInterfaceSubClass() const>:
   12304:	e590300c 	ldr	r3, [r0, #12]
   12308:	e3530000 	cmp	r3, #0
   1230c:	0a000001 	beq	12318 <CUSBFunction::GetInterfaceSubClass() const+0x14>
   12310:	e5d30006 	ldrb	r0, [r3, #6]
   12314:	e12fff1e 	bx	lr
   12318:	e92d4010 	push	{r4, lr}
   1231c:	e3a0209e 	mov	r2, #158	; 0x9e
   12320:	e1a04000 	mov	r4, r0
   12324:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   12328:	e30c0008 	movw	r0, #49160	; 0xc008
   1232c:	e3401002 	movt	r1, #2
   12330:	e3400002 	movt	r0, #2
   12334:	eb004a18 	bl	24b9c <assertion_failed>
   12338:	e594300c 	ldr	r3, [r4, #12]
   1233c:	e5d30006 	ldrb	r0, [r3, #6]
   12340:	e8bd8010 	pop	{r4, pc}

00012344 <CUSBFunction::GetInterfaceProtocol() const>:
   12344:	e590300c 	ldr	r3, [r0, #12]
   12348:	e3530000 	cmp	r3, #0
   1234c:	0a000001 	beq	12358 <CUSBFunction::GetInterfaceProtocol() const+0x14>
   12350:	e5d30007 	ldrb	r0, [r3, #7]
   12354:	e12fff1e 	bx	lr
   12358:	e92d4010 	push	{r4, lr}
   1235c:	e3a020a4 	mov	r2, #164	; 0xa4
   12360:	e1a04000 	mov	r4, r0
   12364:	e30b1fe4 	movw	r1, #49124	; 0xbfe4
   12368:	e30c0008 	movw	r0, #49160	; 0xc008
   1236c:	e3401002 	movt	r1, #2
   12370:	e3400002 	movt	r0, #2
   12374:	eb004a08 	bl	24b9c <assertion_failed>
   12378:	e594300c 	ldr	r3, [r4, #12]
   1237c:	e5d30007 	ldrb	r0, [r3, #7]
   12380:	e8bd8010 	pop	{r4, pc}

00012384 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   12384:	e12fff1e 	bx	lr

00012388 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
   12388:	e5900008 	ldr	r0, [r0, #8]
   1238c:	e2000001 	and	r0, r0, #1
   12390:	e12fff1e 	bx	lr

00012394 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   12394:	e92d4010 	push	{r4, lr}
   12398:	e3a0100c 	mov	r1, #12
   1239c:	e1a04000 	mov	r4, r0
   123a0:	eb003ef5 	bl	21f7c <operator delete(void*, unsigned int)>
   123a4:	e1a00004 	mov	r0, r4
   123a8:	e8bd8010 	pop	{r4, pc}

000123ac <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
   123ac:	e30c1090 	movw	r1, #49296	; 0xc090
   123b0:	e30b0130 	movw	r0, #45360	; 0xb130
   123b4:	e3401002 	movt	r1, #2
   123b8:	e3400002 	movt	r0, #2
   123bc:	e3a02026 	mov	r2, #38	; 0x26
   123c0:	ea0049f5 	b	24b9c <assertion_failed>

000123c4 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
   123c4:	e92d4010 	push	{r4, lr}
   123c8:	e3a0202b 	mov	r2, #43	; 0x2b
   123cc:	e30c1090 	movw	r1, #49296	; 0xc090
   123d0:	e30b0130 	movw	r0, #45360	; 0xb130
   123d4:	e3401002 	movt	r1, #2
   123d8:	e3400002 	movt	r0, #2
   123dc:	eb0049ee 	bl	24b9c <assertion_failed>
   123e0:	e3a00000 	mov	r0, #0
   123e4:	e8bd8010 	pop	{r4, pc}

000123e8 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
   123e8:	e30c1090 	movw	r1, #49296	; 0xc090
   123ec:	e30b0130 	movw	r0, #45360	; 0xb130
   123f0:	e3401002 	movt	r1, #2
   123f4:	e3400002 	movt	r0, #2
   123f8:	e3a02031 	mov	r2, #49	; 0x31
   123fc:	ea0049e6 	b	24b9c <assertion_failed>

00012400 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
   12400:	e92d4010 	push	{r4, lr}
   12404:	e24dd010 	sub	sp, sp, #16
   12408:	e1a04000 	mov	r4, r0
   1240c:	e3001408 	movw	r1, #1032	; 0x408
   12410:	e28d0004 	add	r0, sp, #4
   12414:	e3431f98 	movt	r1, #16280	; 0x3f98
   12418:	ebffe744 	bl	c130 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   1241c:	e28d0004 	add	r0, sp, #4
   12420:	ebffe74b 	bl	c154 <CDWHCIRegister::Read()>
   12424:	e5943004 	ldr	r3, [r4, #4]
   12428:	e3530000 	cmp	r3, #0
   1242c:	e2800001 	add	r0, r0, #1
   12430:	e7ed0050 	ubfx	r0, r0, #0, #14
   12434:	e5840008 	str	r0, [r4, #8]
   12438:	1a000005 	bne	12454 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x54>
   1243c:	e28d0004 	add	r0, sp, #4
   12440:	ebffe743 	bl	c154 <CDWHCIRegister::Read()>
   12444:	e5943008 	ldr	r3, [r4, #8]
   12448:	e7ed0050 	ubfx	r0, r0, #0, #14
   1244c:	e1500003 	cmp	r0, r3
   12450:	1afffff9 	bne	1243c <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
   12454:	e28d0004 	add	r0, sp, #4
   12458:	ebffe73c 	bl	c150 <CDWHCIRegister::~CDWHCIRegister()>
   1245c:	e28dd010 	add	sp, sp, #16
   12460:	e8bd8010 	pop	{r4, pc}

00012464 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(int)>:
   12464:	e59f2010 	ldr	r2, [pc, #16]	; 1247c <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(int)+0x18>
   12468:	e5801004 	str	r1, [r0, #4]
   1246c:	e3a01901 	mov	r1, #16384	; 0x4000
   12470:	e5801008 	str	r1, [r0, #8]
   12474:	e5802000 	str	r2, [r0]
   12478:	e12fff1e 	bx	lr
   1247c:	0002c074 	.word	0x0002c074

00012480 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   12480:	e92d4070 	push	{r4, r5, r6, lr}
   12484:	e1a04000 	mov	r4, r0
   12488:	e5905018 	ldr	r5, [r0, #24]
   1248c:	e59f305c 	ldr	r3, [pc, #92]	; 124f0 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   12490:	e3550000 	cmp	r5, #0
   12494:	e5803000 	str	r3, [r0]
   12498:	0a000004 	beq	124b0 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   1249c:	e1a00005 	mov	r0, r5
   124a0:	ebffeeab 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
   124a4:	e1a00005 	mov	r0, r5
   124a8:	e3a01018 	mov	r1, #24
   124ac:	eb003eb2 	bl	21f7c <operator delete(void*, unsigned int)>
   124b0:	e5945014 	ldr	r5, [r4, #20]
   124b4:	e3a03000 	mov	r3, #0
   124b8:	e5843018 	str	r3, [r4, #24]
   124bc:	e1550003 	cmp	r5, r3
   124c0:	0a000004 	beq	124d8 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   124c4:	e1a00005 	mov	r0, r5
   124c8:	ebffeea1 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
   124cc:	e1a00005 	mov	r0, r5
   124d0:	e3a01018 	mov	r1, #24
   124d4:	eb003ea8 	bl	21f7c <operator delete(void*, unsigned int)>
   124d8:	e3a03000 	mov	r3, #0
   124dc:	e1a00004 	mov	r0, r4
   124e0:	e5843014 	str	r3, [r4, #20]
   124e4:	ebfffe23 	bl	11d78 <CUSBFunction::~CUSBFunction()>
   124e8:	e1a00004 	mov	r0, r4
   124ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   124f0:	0002c0b4 	.word	0x0002c0b4

000124f4 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   124f4:	e92d4010 	push	{r4, lr}
   124f8:	e1a04000 	mov	r4, r0
   124fc:	ebffffdf 	bl	12480 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   12500:	e1a00004 	mov	r0, r4
   12504:	e3a0101c 	mov	r1, #28
   12508:	eb003e9b 	bl	21f7c <operator delete(void*, unsigned int)>
   1250c:	e1a00004 	mov	r0, r4
   12510:	e8bd8010 	pop	{r4, pc}

00012514 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   12514:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12518:	e2517000 	subs	r7, r1, #0
   1251c:	e1a05000 	mov	r5, r0
   12520:	e1a04002 	mov	r4, r2
   12524:	0a000015 	beq	12580 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x6c>
   12528:	e3540000 	cmp	r4, #0
   1252c:	0a00000c 	beq	12564 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x50>
   12530:	e1a00005 	mov	r0, r5
   12534:	ebfffef0 	bl	120fc <CUSBFunction::GetHost() const>
   12538:	e2506000 	subs	r6, r0, #0
   1253c:	0a000016 	beq	1259c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   12540:	e1a02007 	mov	r2, r7
   12544:	e5951018 	ldr	r1, [r5, #24]
   12548:	e1a00006 	mov	r0, r6
   1254c:	e1a03004 	mov	r3, r4
   12550:	ebffef63 	bl	e2e4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
   12554:	e3500000 	cmp	r0, #0
   12558:	a1a00004 	movge	r0, r4
   1255c:	b3e00000 	mvnlt	r0, #0
   12560:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12564:	e30c10d8 	movw	r1, #49368	; 0xc0d8
   12568:	e30c00e8 	movw	r0, #49384	; 0xc0e8
   1256c:	e3401002 	movt	r1, #2
   12570:	e3400002 	movt	r0, #2
   12574:	e3a0207f 	mov	r2, #127	; 0x7f
   12578:	eb004987 	bl	24b9c <assertion_failed>
   1257c:	eaffffeb 	b	12530 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x1c>
   12580:	e30c10d8 	movw	r1, #49368	; 0xc0d8
   12584:	e30b097c 	movw	r0, #47484	; 0xb97c
   12588:	e3401002 	movt	r1, #2
   1258c:	e3400002 	movt	r0, #2
   12590:	e3a0207e 	mov	r2, #126	; 0x7e
   12594:	eb004980 	bl	24b9c <assertion_failed>
   12598:	eaffffe2 	b	12528 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x14>
   1259c:	e30c10d8 	movw	r1, #49368	; 0xc0d8
   125a0:	e30b06e0 	movw	r0, #46816	; 0xb6e0
   125a4:	e3401002 	movt	r1, #2
   125a8:	e3400002 	movt	r0, #2
   125ac:	e3a02082 	mov	r2, #130	; 0x82
   125b0:	eb004979 	bl	24b9c <assertion_failed>
   125b4:	eaffffe1 	b	12540 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x2c>

000125b8 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   125b8:	e92d4010 	push	{r4, lr}
   125bc:	e1a04000 	mov	r4, r0
   125c0:	ebfffe3d 	bl	11ebc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   125c4:	e59f2018 	ldr	r2, [pc, #24]	; 125e4 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   125c8:	e3a03000 	mov	r3, #0
   125cc:	e1a00004 	mov	r0, r4
   125d0:	e5c43010 	strb	r3, [r4, #16]
   125d4:	e5843014 	str	r3, [r4, #20]
   125d8:	e5842000 	str	r2, [r4]
   125dc:	e5843018 	str	r3, [r4, #24]
   125e0:	e8bd8010 	pop	{r4, pc}
   125e4:	0002c0b4 	.word	0x0002c0b4

000125e8 <CUSBPrinterDevice::Configure()>:
   125e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   125ec:	e24dd01c 	sub	sp, sp, #28
   125f0:	e1a05000 	mov	r5, r0
   125f4:	ebffff52 	bl	12344 <CUSBFunction::GetInterfaceProtocol() const>
   125f8:	e2403001 	sub	r3, r0, #1
   125fc:	e5c50010 	strb	r0, [r5, #16]
   12600:	e3530001 	cmp	r3, #1
   12604:	9a00000b 	bls	12638 <CUSBPrinterDevice::Configure()+0x50>
   12608:	eb004ae8 	bl	251b0 <CLogger::Get()>
   1260c:	e5d5c010 	ldrb	ip, [r5, #16]
   12610:	e30c30f4 	movw	r3, #49396	; 0xc0f4
   12614:	e3a02001 	mov	r2, #1
   12618:	e3403002 	movt	r3, #2
   1261c:	e59f11c4 	ldr	r1, [pc, #452]	; 127e8 <CUSBPrinterDevice::Configure()+0x200>
   12620:	e58dc000 	str	ip, [sp]
   12624:	e3a04000 	mov	r4, #0
   12628:	eb004bbc 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1262c:	e1a00004 	mov	r0, r4
   12630:	e28dd01c 	add	sp, sp, #28
   12634:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12638:	e1a00005 	mov	r0, r5
   1263c:	ebfffe7d 	bl	12038 <CUSBFunction::GetNumEndpoints() const>
   12640:	e5d53010 	ldrb	r3, [r5, #16]
   12644:	e3530001 	cmp	r3, #1
   12648:	03a03001 	moveq	r3, #1
   1264c:	13a03002 	movne	r3, #2
   12650:	e1530000 	cmp	r3, r0
   12654:	da000004 	ble	1266c <CUSBPrinterDevice::Configure()+0x84>
   12658:	ea000056 	b	127b8 <CUSBPrinterDevice::Configure()+0x1d0>
   1265c:	e5d43003 	ldrb	r3, [r4, #3]
   12660:	e203303f 	and	r3, r3, #63	; 0x3f
   12664:	e3530002 	cmp	r3, #2
   12668:	0a00002b 	beq	1271c <CUSBPrinterDevice::Configure()+0x134>
   1266c:	e3a01005 	mov	r1, #5
   12670:	e1a00005 	mov	r0, r5
   12674:	ebfffee2 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
   12678:	e2504000 	subs	r4, r0, #0
   1267c:	1afffff6 	bne	1265c <CUSBPrinterDevice::Configure()+0x74>
   12680:	e5954018 	ldr	r4, [r5, #24]
   12684:	e3540000 	cmp	r4, #0
   12688:	0a00004f 	beq	127cc <CUSBPrinterDevice::Configure()+0x1e4>
   1268c:	e5d53010 	ldrb	r3, [r5, #16]
   12690:	e1a00005 	mov	r0, r5
   12694:	e3530001 	cmp	r3, #1
   12698:	0a000002 	beq	126a8 <CUSBPrinterDevice::Configure()+0xc0>
   1269c:	e5954014 	ldr	r4, [r5, #20]
   126a0:	e3540000 	cmp	r4, #0
   126a4:	0a00004c 	beq	127dc <CUSBPrinterDevice::Configure()+0x1f4>
   126a8:	ebfffea4 	bl	12140 <CUSBFunction::Configure()>
   126ac:	e2504000 	subs	r4, r0, #0
   126b0:	0a00002a 	beq	12760 <CUSBPrinterDevice::Configure()+0x178>
   126b4:	e28d0008 	add	r0, sp, #8
   126b8:	e3a04001 	mov	r4, #1
   126bc:	eb004e42 	bl	25fcc <CString::CString()>
   126c0:	e3013a54 	movw	r3, #6740	; 0x1a54
   126c4:	e3403003 	movt	r3, #3
   126c8:	e28d0008 	add	r0, sp, #8
   126cc:	e30c1114 	movw	r1, #49428	; 0xc114
   126d0:	e3401002 	movt	r1, #2
   126d4:	e5932000 	ldr	r2, [r3]
   126d8:	e082c004 	add	ip, r2, r4
   126dc:	e583c000 	str	ip, [r3]
   126e0:	eb005198 	bl	26d48 <CString::Format(char const*, ...)>
   126e4:	eb004a84 	bl	250fc <CDeviceNameService::Get()>
   126e8:	e1a06000 	mov	r6, r0
   126ec:	e28d0008 	add	r0, sp, #8
   126f0:	eb004e4c 	bl	26028 <CString::operator char const*() const>
   126f4:	e1a02005 	mov	r2, r5
   126f8:	e3a03000 	mov	r3, #0
   126fc:	e1a01000 	mov	r1, r0
   12700:	e1a00006 	mov	r0, r6
   12704:	eb004a08 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   12708:	e28d0008 	add	r0, sp, #8
   1270c:	eb004dfb 	bl	25f00 <CString::~CString()>
   12710:	e1a00004 	mov	r0, r4
   12714:	e28dd01c 	add	sp, sp, #28
   12718:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1271c:	e1d430d2 	ldrsb	r3, [r4, #2]
   12720:	e1a00005 	mov	r0, r5
   12724:	e3530000 	cmp	r3, #0
   12728:	ba000015 	blt	12784 <CUSBPrinterDevice::Configure()+0x19c>
   1272c:	e5953018 	ldr	r3, [r5, #24]
   12730:	e3530000 	cmp	r3, #0
   12734:	1a00001f 	bne	127b8 <CUSBPrinterDevice::Configure()+0x1d0>
   12738:	ebfffe4e 	bl	12078 <CUSBFunction::GetDevice() const>
   1273c:	e1a07000 	mov	r7, r0
   12740:	e3a00018 	mov	r0, #24
   12744:	eb003e08 	bl	21f6c <operator new(unsigned int)>
   12748:	e1a02004 	mov	r2, r4
   1274c:	e1a01007 	mov	r1, r7
   12750:	e1a06000 	mov	r6, r0
   12754:	ebffed6b 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12758:	e5856018 	str	r6, [r5, #24]
   1275c:	eaffffc2 	b	1266c <CUSBPrinterDevice::Configure()+0x84>
   12760:	eb004a92 	bl	251b0 <CLogger::Get()>
   12764:	e3a02001 	mov	r2, #1
   12768:	e59f1078 	ldr	r1, [pc, #120]	; 127e8 <CUSBPrinterDevice::Configure()+0x200>
   1276c:	e30b3880 	movw	r3, #47232	; 0xb880
   12770:	e3403002 	movt	r3, #2
   12774:	eb004b69 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12778:	e1a00004 	mov	r0, r4
   1277c:	e28dd01c 	add	sp, sp, #28
   12780:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12784:	e5953014 	ldr	r3, [r5, #20]
   12788:	e3530000 	cmp	r3, #0
   1278c:	1a00000a 	bne	127bc <CUSBPrinterDevice::Configure()+0x1d4>
   12790:	ebfffe38 	bl	12078 <CUSBFunction::GetDevice() const>
   12794:	e1a07000 	mov	r7, r0
   12798:	e3a00018 	mov	r0, #24
   1279c:	eb003df2 	bl	21f6c <operator new(unsigned int)>
   127a0:	e1a02004 	mov	r2, r4
   127a4:	e1a01007 	mov	r1, r7
   127a8:	e1a06000 	mov	r6, r0
   127ac:	ebffed55 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   127b0:	e5856014 	str	r6, [r5, #20]
   127b4:	eaffffac 	b	1266c <CUSBPrinterDevice::Configure()+0x84>
   127b8:	e1a00005 	mov	r0, r5
   127bc:	e59f1024 	ldr	r1, [pc, #36]	; 127e8 <CUSBPrinterDevice::Configure()+0x200>
   127c0:	e3a04000 	mov	r4, #0
   127c4:	ebfffea1 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   127c8:	eaffff97 	b	1262c <CUSBPrinterDevice::Configure()+0x44>
   127cc:	e1a00005 	mov	r0, r5
   127d0:	e59f1010 	ldr	r1, [pc, #16]	; 127e8 <CUSBPrinterDevice::Configure()+0x200>
   127d4:	ebfffe9d 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   127d8:	eaffff93 	b	1262c <CUSBPrinterDevice::Configure()+0x44>
   127dc:	e59f1004 	ldr	r1, [pc, #4]	; 127e8 <CUSBPrinterDevice::Configure()+0x200>
   127e0:	ebfffe9a 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   127e4:	eaffff90 	b	1262c <CUSBPrinterDevice::Configure()+0x44>
   127e8:	0002c0d0 	.word	0x0002c0d0

000127ec <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   127ec:	e92d4070 	push	{r4, r5, r6, lr}
   127f0:	e1a04000 	mov	r4, r0
   127f4:	e5900020 	ldr	r0, [r0, #32]
   127f8:	e3a02000 	mov	r2, #0
   127fc:	e59f30a0 	ldr	r3, [pc, #160]	; 128a4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   12800:	e1500002 	cmp	r0, r2
   12804:	e5842024 	str	r2, [r4, #36]	; 0x24
   12808:	e5843000 	str	r3, [r4]
   1280c:	0a000000 	beq	12814 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   12810:	eb003dd8 	bl	21f78 <operator delete[](void*)>
   12814:	e5945018 	ldr	r5, [r4, #24]
   12818:	e3a03000 	mov	r3, #0
   1281c:	e5843020 	str	r3, [r4, #32]
   12820:	e1550003 	cmp	r5, r3
   12824:	0a000004 	beq	1283c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   12828:	e1a00005 	mov	r0, r5
   1282c:	ebffedc8 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
   12830:	e1a00005 	mov	r0, r5
   12834:	e3a01018 	mov	r1, #24
   12838:	eb003dcf 	bl	21f7c <operator delete(void*, unsigned int)>
   1283c:	e5945014 	ldr	r5, [r4, #20]
   12840:	e3a03000 	mov	r3, #0
   12844:	e5843018 	str	r3, [r4, #24]
   12848:	e1550003 	cmp	r5, r3
   1284c:	0a000004 	beq	12864 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   12850:	e1a00005 	mov	r0, r5
   12854:	ebffedbe 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
   12858:	e1a00005 	mov	r0, r5
   1285c:	e3a01018 	mov	r1, #24
   12860:	eb003dc5 	bl	21f7c <operator delete(void*, unsigned int)>
   12864:	e5945010 	ldr	r5, [r4, #16]
   12868:	e3a03000 	mov	r3, #0
   1286c:	e5843014 	str	r3, [r4, #20]
   12870:	e1550003 	cmp	r5, r3
   12874:	0a000004 	beq	1288c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   12878:	e1a00005 	mov	r0, r5
   1287c:	ebffedb4 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
   12880:	e1a00005 	mov	r0, r5
   12884:	e3a01018 	mov	r1, #24
   12888:	eb003dbb 	bl	21f7c <operator delete(void*, unsigned int)>
   1288c:	e3a03000 	mov	r3, #0
   12890:	e1a00004 	mov	r0, r4
   12894:	e5843010 	str	r3, [r4, #16]
   12898:	ebfffd36 	bl	11d78 <CUSBFunction::~CUSBFunction()>
   1289c:	e1a00004 	mov	r0, r4
   128a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   128a4:	0002c124 	.word	0x0002c124

000128a8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   128a8:	e92d4010 	push	{r4, lr}
   128ac:	e1a04000 	mov	r4, r0
   128b0:	ebffffcd 	bl	127ec <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   128b4:	e1a00004 	mov	r0, r4
   128b8:	e3a01028 	mov	r1, #40	; 0x28
   128bc:	eb003dae 	bl	21f7c <operator delete(void*, unsigned int)>
   128c0:	e1a00004 	mov	r0, r4
   128c4:	e8bd8010 	pop	{r4, pc}

000128c8 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   128c8:	e92d4010 	push	{r4, lr}
   128cc:	e1a04000 	mov	r4, r0
   128d0:	ebfffd79 	bl	11ebc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   128d4:	e59f2024 	ldr	r2, [pc, #36]	; 12900 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   128d8:	e3a03000 	mov	r3, #0
   128dc:	e1a00004 	mov	r0, r4
   128e0:	e5843010 	str	r3, [r4, #16]
   128e4:	e5843014 	str	r3, [r4, #20]
   128e8:	e5842000 	str	r2, [r4]
   128ec:	e5843018 	str	r3, [r4, #24]
   128f0:	e584301c 	str	r3, [r4, #28]
   128f4:	e5843020 	str	r3, [r4, #32]
   128f8:	e5843024 	str	r3, [r4, #36]	; 0x24
   128fc:	e8bd8010 	pop	{r4, pc}
   12900:	0002c124 	.word	0x0002c124

00012904 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   12904:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12908:	e24dd014 	sub	sp, sp, #20
   1290c:	e1a06001 	mov	r6, r1
   12910:	e1a04002 	mov	r4, r2
   12914:	e1a07000 	mov	r7, r0
   12918:	ebfffdf7 	bl	120fc <CUSBFunction::GetHost() const>
   1291c:	e6ff4074 	uxth	r4, r4
   12920:	e1a05000 	mov	r5, r0
   12924:	e1a00007 	mov	r0, r7
   12928:	ebfffde2 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
   1292c:	e3a0c000 	mov	ip, #0
   12930:	e58d6008 	str	r6, [sp, #8]
   12934:	e1a0300c 	mov	r3, ip
   12938:	e58dc004 	str	ip, [sp, #4]
   1293c:	e3a02020 	mov	r2, #32
   12940:	e58d400c 	str	r4, [sp, #12]
   12944:	e58dc000 	str	ip, [sp]
   12948:	e1a01000 	mov	r1, r0
   1294c:	e1a00005 	mov	r0, r5
   12950:	ebffee05 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12954:	e1e00000 	mvn	r0, r0
   12958:	e1a00fa0 	lsr	r0, r0, #31
   1295c:	e28dd014 	add	sp, sp, #20
   12960:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00012964 <CUSBBluetoothDevice::StartRequest()>:
   12964:	e5903010 	ldr	r3, [r0, #16]
   12968:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1296c:	e3530000 	cmp	r3, #0
   12970:	e24dd00c 	sub	sp, sp, #12
   12974:	e1a04000 	mov	r4, r0
   12978:	0a00003b 	beq	12a6c <CUSBBluetoothDevice::StartRequest()+0x108>
   1297c:	e5943020 	ldr	r3, [r4, #32]
   12980:	e3530000 	cmp	r3, #0
   12984:	0a000031 	beq	12a50 <CUSBBluetoothDevice::StartRequest()+0xec>
   12988:	e594601c 	ldr	r6, [r4, #28]
   1298c:	e3560000 	cmp	r6, #0
   12990:	0a000020 	beq	12a18 <CUSBBluetoothDevice::StartRequest()+0xb4>
   12994:	e3a020a6 	mov	r2, #166	; 0xa6
   12998:	e30c1148 	movw	r1, #49480	; 0xc148
   1299c:	e30b0dc4 	movw	r0, #48580	; 0xbdc4
   129a0:	e3401002 	movt	r1, #2
   129a4:	e3400002 	movt	r0, #2
   129a8:	eb00487b 	bl	24b9c <assertion_failed>
   129ac:	e5940010 	ldr	r0, [r4, #16]
   129b0:	ebffed80 	bl	dfb8 <CUSBEndpoint::GetMaxPacketSize() const>
   129b4:	e1a06000 	mov	r6, r0
   129b8:	e3a00028 	mov	r0, #40	; 0x28
   129bc:	eb003d6a 	bl	21f6c <operator new(unsigned int)>
   129c0:	e5942020 	ldr	r2, [r4, #32]
   129c4:	e5941010 	ldr	r1, [r4, #16]
   129c8:	e3a0c000 	mov	ip, #0
   129cc:	e1a03006 	mov	r3, r6
   129d0:	e58dc000 	str	ip, [sp]
   129d4:	e1a05000 	mov	r5, r0
   129d8:	ebffee59 	bl	e344 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   129dc:	e1a00005 	mov	r0, r5
   129e0:	e584501c 	str	r5, [r4, #28]
   129e4:	e1a03004 	mov	r3, r4
   129e8:	e3a02000 	mov	r2, #0
   129ec:	e3021c0c 	movw	r1, #11276	; 0x2c0c
   129f0:	e3401001 	movt	r1, #1
   129f4:	ebffeec9 	bl	e520 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   129f8:	e1a00004 	mov	r0, r4
   129fc:	ebfffdbe 	bl	120fc <CUSBFunction::GetHost() const>
   12a00:	e594101c 	ldr	r1, [r4, #28]
   12a04:	e5903000 	ldr	r3, [r0]
   12a08:	e593300c 	ldr	r3, [r3, #12]
   12a0c:	e28dd00c 	add	sp, sp, #12
   12a10:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   12a14:	e12fff13 	bx	r3
   12a18:	e5940010 	ldr	r0, [r4, #16]
   12a1c:	ebffed65 	bl	dfb8 <CUSBEndpoint::GetMaxPacketSize() const>
   12a20:	e1a07000 	mov	r7, r0
   12a24:	e3a00028 	mov	r0, #40	; 0x28
   12a28:	eb003d4f 	bl	21f6c <operator new(unsigned int)>
   12a2c:	e5942020 	ldr	r2, [r4, #32]
   12a30:	e5941010 	ldr	r1, [r4, #16]
   12a34:	e1a03007 	mov	r3, r7
   12a38:	e58d6000 	str	r6, [sp]
   12a3c:	e1a05000 	mov	r5, r0
   12a40:	ebffee3f 	bl	e344 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12a44:	e584501c 	str	r5, [r4, #28]
   12a48:	e1a00005 	mov	r0, r5
   12a4c:	eaffffe4 	b	129e4 <CUSBBluetoothDevice::StartRequest()+0x80>
   12a50:	e30c1148 	movw	r1, #49480	; 0xc148
   12a54:	e30c0178 	movw	r0, #49528	; 0xc178
   12a58:	e3401002 	movt	r1, #2
   12a5c:	e3400002 	movt	r0, #2
   12a60:	e3a020a4 	mov	r2, #164	; 0xa4
   12a64:	eb00484c 	bl	24b9c <assertion_failed>
   12a68:	eaffffc6 	b	12988 <CUSBBluetoothDevice::StartRequest()+0x24>
   12a6c:	e30c1148 	movw	r1, #49480	; 0xc148
   12a70:	e30c015c 	movw	r0, #49500	; 0xc15c
   12a74:	e3401002 	movt	r1, #2
   12a78:	e3400002 	movt	r0, #2
   12a7c:	e3a020a3 	mov	r2, #163	; 0xa3
   12a80:	eb004845 	bl	24b9c <assertion_failed>
   12a84:	eaffffbc 	b	1297c <CUSBBluetoothDevice::StartRequest()+0x18>

00012a88 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   12a88:	e3510000 	cmp	r1, #0
   12a8c:	e92d4010 	push	{r4, lr}
   12a90:	e1a04000 	mov	r4, r0
   12a94:	e5801024 	str	r1, [r0, #36]	; 0x24
   12a98:	0a000002 	beq	12aa8 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x20>
   12a9c:	e1a00004 	mov	r0, r4
   12aa0:	e8bd4010 	pop	{r4, lr}
   12aa4:	eaffffae 	b	12964 <CUSBBluetoothDevice::StartRequest()>
   12aa8:	e30c1148 	movw	r1, #49480	; 0xc148
   12aac:	e30c018c 	movw	r0, #49548	; 0xc18c
   12ab0:	e3401002 	movt	r1, #2
   12ab4:	e3400002 	movt	r0, #2
   12ab8:	e3a0209c 	mov	r2, #156	; 0x9c
   12abc:	eb004836 	bl	24b9c <assertion_failed>
   12ac0:	e1a00004 	mov	r0, r4
   12ac4:	e8bd4010 	pop	{r4, lr}
   12ac8:	eaffffa5 	b	12964 <CUSBBluetoothDevice::StartRequest()>

00012acc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   12acc:	e92d4070 	push	{r4, r5, r6, lr}
   12ad0:	e2515000 	subs	r5, r1, #0
   12ad4:	e1a04000 	mov	r4, r0
   12ad8:	0a00003b 	beq	12bcc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x100>
   12adc:	e594301c 	ldr	r3, [r4, #28]
   12ae0:	e1550003 	cmp	r5, r3
   12ae4:	0a000005 	beq	12b00 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x34>
   12ae8:	e30c1148 	movw	r1, #49480	; 0xc148
   12aec:	e30b0e30 	movw	r0, #48688	; 0xbe30
   12af0:	e3401002 	movt	r1, #2
   12af4:	e3400002 	movt	r0, #2
   12af8:	e3a020b3 	mov	r2, #179	; 0xb3
   12afc:	eb004826 	bl	24b9c <assertion_failed>
   12b00:	e5943020 	ldr	r3, [r4, #32]
   12b04:	e3530000 	cmp	r3, #0
   12b08:	0a000028 	beq	12bb0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   12b0c:	e1a00005 	mov	r0, r5
   12b10:	ebffee46 	bl	e430 <CUSBRequest::GetStatus() const>
   12b14:	e3500000 	cmp	r0, #0
   12b18:	0a00001d 	beq	12b94 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xc8>
   12b1c:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   12b20:	e3560000 	cmp	r6, #0
   12b24:	0a00002f 	beq	12be8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   12b28:	e1a00005 	mov	r0, r5
   12b2c:	e5945020 	ldr	r5, [r4, #32]
   12b30:	ebffee40 	bl	e438 <CUSBRequest::GetResultLength() const>
   12b34:	e1a01000 	mov	r1, r0
   12b38:	e1a00005 	mov	r0, r5
   12b3c:	e12fff36 	blx	r6
   12b40:	e594501c 	ldr	r5, [r4, #28]
   12b44:	e3550000 	cmp	r5, #0
   12b48:	0a000004 	beq	12b60 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x94>
   12b4c:	e1a00005 	mov	r0, r5
   12b50:	ebffee21 	bl	e3dc <CUSBRequest::~CUSBRequest()>
   12b54:	e1a00005 	mov	r0, r5
   12b58:	e3a01028 	mov	r1, #40	; 0x28
   12b5c:	eb003d06 	bl	21f7c <operator delete(void*, unsigned int)>
   12b60:	e3a03000 	mov	r3, #0
   12b64:	e1a00004 	mov	r0, r4
   12b68:	e584301c 	str	r3, [r4, #28]
   12b6c:	ebffff7c 	bl	12964 <CUSBBluetoothDevice::StartRequest()>
   12b70:	e3500000 	cmp	r0, #0
   12b74:	18bd8070 	popne	{r4, r5, r6, pc}
   12b78:	eb00498c 	bl	251b0 <CLogger::Get()>
   12b7c:	e30b3e40 	movw	r3, #48704	; 0xbe40
   12b80:	e3a02001 	mov	r2, #1
   12b84:	e3403002 	movt	r3, #2
   12b88:	e59f1078 	ldr	r1, [pc, #120]	; 12c08 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x13c>
   12b8c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12b90:	ea004a62 	b	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b94:	eb004985 	bl	251b0 <CLogger::Get()>
   12b98:	e30c31a4 	movw	r3, #49572	; 0xc1a4
   12b9c:	e3a02002 	mov	r2, #2
   12ba0:	e3403002 	movt	r3, #2
   12ba4:	e59f105c 	ldr	r1, [pc, #92]	; 12c08 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x13c>
   12ba8:	eb004a5c 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12bac:	eaffffe3 	b	12b40 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x74>
   12bb0:	e30c1148 	movw	r1, #49480	; 0xc148
   12bb4:	e30c0178 	movw	r0, #49528	; 0xc178
   12bb8:	e3401002 	movt	r1, #2
   12bbc:	e3400002 	movt	r0, #2
   12bc0:	e3a020b4 	mov	r2, #180	; 0xb4
   12bc4:	eb0047f4 	bl	24b9c <assertion_failed>
   12bc8:	eaffffcf 	b	12b0c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x40>
   12bcc:	e30c1148 	movw	r1, #49480	; 0xc148
   12bd0:	e30a0a24 	movw	r0, #43556	; 0xaa24
   12bd4:	e3401002 	movt	r1, #2
   12bd8:	e3400002 	movt	r0, #2
   12bdc:	e3a020b2 	mov	r2, #178	; 0xb2
   12be0:	eb0047ed 	bl	24b9c <assertion_failed>
   12be4:	eaffffbc 	b	12adc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10>
   12be8:	e30c1148 	movw	r1, #49480	; 0xc148
   12bec:	e30c018c 	movw	r0, #49548	; 0xc18c
   12bf0:	e3401002 	movt	r1, #2
   12bf4:	e3400002 	movt	r0, #2
   12bf8:	e3a020b8 	mov	r2, #184	; 0xb8
   12bfc:	eb0047e6 	bl	24b9c <assertion_failed>
   12c00:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   12c04:	eaffffc7 	b	12b28 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   12c08:	0002c140 	.word	0x0002c140

00012c0c <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   12c0c:	e92d4070 	push	{r4, r5, r6, lr}
   12c10:	e2524000 	subs	r4, r2, #0
   12c14:	e1a05000 	mov	r5, r0
   12c18:	0a000003 	beq	12c2c <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   12c1c:	e1a01005 	mov	r1, r5
   12c20:	e1a00004 	mov	r0, r4
   12c24:	e8bd4070 	pop	{r4, r5, r6, lr}
   12c28:	eaffffa7 	b	12acc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   12c2c:	e30c1148 	movw	r1, #49480	; 0xc148
   12c30:	e30a0938 	movw	r0, #43320	; 0xa938
   12c34:	e3401002 	movt	r1, #2
   12c38:	e3400002 	movt	r0, #2
   12c3c:	e3a020cc 	mov	r2, #204	; 0xcc
   12c40:	eb0047d5 	bl	24b9c <assertion_failed>
   12c44:	e1a01005 	mov	r1, r5
   12c48:	e1a00004 	mov	r0, r4
   12c4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12c50:	eaffff9d 	b	12acc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>

00012c54 <CUSBBluetoothDevice::Configure()>:
   12c54:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12c58:	e24dd014 	sub	sp, sp, #20
   12c5c:	e1a04000 	mov	r4, r0
   12c60:	ebfffd97 	bl	122c4 <CUSBFunction::GetInterfaceNumber() const>
   12c64:	e2506000 	subs	r6, r0, #0
   12c68:	1a000040 	bne	12d70 <CUSBBluetoothDevice::Configure()+0x11c>
   12c6c:	e1a00004 	mov	r0, r4
   12c70:	ebfffcf0 	bl	12038 <CUSBFunction::GetNumEndpoints() const>
   12c74:	e3500003 	cmp	r0, #3
   12c78:	1a000036 	bne	12d58 <CUSBBluetoothDevice::Configure()+0x104>
   12c7c:	e3a01005 	mov	r1, #5
   12c80:	e1a00004 	mov	r0, r4
   12c84:	ebfffd5e 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
   12c88:	e2505000 	subs	r5, r0, #0
   12c8c:	0a000041 	beq	12d98 <CUSBBluetoothDevice::Configure()+0x144>
   12c90:	e5d52003 	ldrb	r2, [r5, #3]
   12c94:	e202203f 	and	r2, r2, #63	; 0x3f
   12c98:	e3520002 	cmp	r2, #2
   12c9c:	0a00000f 	beq	12ce0 <CUSBBluetoothDevice::Configure()+0x8c>
   12ca0:	e3520003 	cmp	r2, #3
   12ca4:	1afffff4 	bne	12c7c <CUSBBluetoothDevice::Configure()+0x28>
   12ca8:	e5943010 	ldr	r3, [r4, #16]
   12cac:	e1a00004 	mov	r0, r4
   12cb0:	e3530000 	cmp	r3, #0
   12cb4:	1a000063 	bne	12e48 <CUSBBluetoothDevice::Configure()+0x1f4>
   12cb8:	ebfffcee 	bl	12078 <CUSBFunction::GetDevice() const>
   12cbc:	e1a07000 	mov	r7, r0
   12cc0:	e3a00018 	mov	r0, #24
   12cc4:	eb003ca8 	bl	21f6c <operator new(unsigned int)>
   12cc8:	e1a02005 	mov	r2, r5
   12ccc:	e1a01007 	mov	r1, r7
   12cd0:	e1a06000 	mov	r6, r0
   12cd4:	ebffec0b 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12cd8:	e5846010 	str	r6, [r4, #16]
   12cdc:	eaffffe6 	b	12c7c <CUSBBluetoothDevice::Configure()+0x28>
   12ce0:	e1d530d2 	ldrsb	r3, [r5, #2]
   12ce4:	e1a00004 	mov	r0, r4
   12ce8:	e3530000 	cmp	r3, #0
   12cec:	ba00000c 	blt	12d24 <CUSBBluetoothDevice::Configure()+0xd0>
   12cf0:	e5943018 	ldr	r3, [r4, #24]
   12cf4:	e3530000 	cmp	r3, #0
   12cf8:	1a000051 	bne	12e44 <CUSBBluetoothDevice::Configure()+0x1f0>
   12cfc:	ebfffcdd 	bl	12078 <CUSBFunction::GetDevice() const>
   12d00:	e1a07000 	mov	r7, r0
   12d04:	e3a00018 	mov	r0, #24
   12d08:	eb003c97 	bl	21f6c <operator new(unsigned int)>
   12d0c:	e1a02005 	mov	r2, r5
   12d10:	e1a01007 	mov	r1, r7
   12d14:	e1a06000 	mov	r6, r0
   12d18:	ebffebfa 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12d1c:	e5846018 	str	r6, [r4, #24]
   12d20:	eaffffd5 	b	12c7c <CUSBBluetoothDevice::Configure()+0x28>
   12d24:	e5943014 	ldr	r3, [r4, #20]
   12d28:	e3530000 	cmp	r3, #0
   12d2c:	1a000045 	bne	12e48 <CUSBBluetoothDevice::Configure()+0x1f4>
   12d30:	ebfffcd0 	bl	12078 <CUSBFunction::GetDevice() const>
   12d34:	e1a07000 	mov	r7, r0
   12d38:	e3a00018 	mov	r0, #24
   12d3c:	eb003c8a 	bl	21f6c <operator new(unsigned int)>
   12d40:	e1a02005 	mov	r2, r5
   12d44:	e1a01007 	mov	r1, r7
   12d48:	e1a06000 	mov	r6, r0
   12d4c:	ebffebed 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12d50:	e5846014 	str	r6, [r4, #20]
   12d54:	eaffffc8 	b	12c7c <CUSBBluetoothDevice::Configure()+0x28>
   12d58:	e1a00004 	mov	r0, r4
   12d5c:	e59f1118 	ldr	r1, [pc, #280]	; 12e7c <CUSBBluetoothDevice::Configure()+0x228>
   12d60:	ebfffd3a 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   12d64:	e1a00006 	mov	r0, r6
   12d68:	e28dd014 	add	sp, sp, #20
   12d6c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12d70:	eb00490e 	bl	251b0 <CLogger::Get()>
   12d74:	e3a02002 	mov	r2, #2
   12d78:	e59f10fc 	ldr	r1, [pc, #252]	; 12e7c <CUSBBluetoothDevice::Configure()+0x228>
   12d7c:	e30c31b4 	movw	r3, #49588	; 0xc1b4
   12d80:	e3403002 	movt	r3, #2
   12d84:	e3a06000 	mov	r6, #0
   12d88:	eb0049e4 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d8c:	e1a00006 	mov	r0, r6
   12d90:	e28dd014 	add	sp, sp, #20
   12d94:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12d98:	e5943014 	ldr	r3, [r4, #20]
   12d9c:	e3530000 	cmp	r3, #0
   12da0:	0a000027 	beq	12e44 <CUSBBluetoothDevice::Configure()+0x1f0>
   12da4:	e5943018 	ldr	r3, [r4, #24]
   12da8:	e3530000 	cmp	r3, #0
   12dac:	0a000024 	beq	12e44 <CUSBBluetoothDevice::Configure()+0x1f0>
   12db0:	e5943010 	ldr	r3, [r4, #16]
   12db4:	e3530000 	cmp	r3, #0
   12db8:	0a000021 	beq	12e44 <CUSBBluetoothDevice::Configure()+0x1f0>
   12dbc:	e1a00004 	mov	r0, r4
   12dc0:	ebfffcde 	bl	12140 <CUSBFunction::Configure()>
   12dc4:	e2506000 	subs	r6, r0, #0
   12dc8:	0a000024 	beq	12e60 <CUSBBluetoothDevice::Configure()+0x20c>
   12dcc:	e5940010 	ldr	r0, [r4, #16]
   12dd0:	e3a06001 	mov	r6, #1
   12dd4:	ebffec77 	bl	dfb8 <CUSBEndpoint::GetMaxPacketSize() const>
   12dd8:	eb003c64 	bl	21f70 <operator new[](unsigned int)>
   12ddc:	e5840020 	str	r0, [r4, #32]
   12de0:	e1a0000d 	mov	r0, sp
   12de4:	eb004c78 	bl	25fcc <CString::CString()>
   12de8:	e3013a58 	movw	r3, #6744	; 0x1a58
   12dec:	e3403003 	movt	r3, #3
   12df0:	e1a0000d 	mov	r0, sp
   12df4:	e30c11d8 	movw	r1, #49624	; 0xc1d8
   12df8:	e3401002 	movt	r1, #2
   12dfc:	e5932000 	ldr	r2, [r3]
   12e00:	e082c006 	add	ip, r2, r6
   12e04:	e583c000 	str	ip, [r3]
   12e08:	eb004fce 	bl	26d48 <CString::Format(char const*, ...)>
   12e0c:	eb0048ba 	bl	250fc <CDeviceNameService::Get()>
   12e10:	e1a07000 	mov	r7, r0
   12e14:	e1a0000d 	mov	r0, sp
   12e18:	eb004c82 	bl	26028 <CString::operator char const*() const>
   12e1c:	e1a03005 	mov	r3, r5
   12e20:	e1a02004 	mov	r2, r4
   12e24:	e1a01000 	mov	r1, r0
   12e28:	e1a00007 	mov	r0, r7
   12e2c:	eb00483e 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   12e30:	e1a0000d 	mov	r0, sp
   12e34:	eb004c31 	bl	25f00 <CString::~CString()>
   12e38:	e1a00006 	mov	r0, r6
   12e3c:	e28dd014 	add	sp, sp, #20
   12e40:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12e44:	e1a00004 	mov	r0, r4
   12e48:	e59f102c 	ldr	r1, [pc, #44]	; 12e7c <CUSBBluetoothDevice::Configure()+0x228>
   12e4c:	e3a06000 	mov	r6, #0
   12e50:	ebfffcfe 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   12e54:	e1a00006 	mov	r0, r6
   12e58:	e28dd014 	add	sp, sp, #20
   12e5c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12e60:	eb0048d2 	bl	251b0 <CLogger::Get()>
   12e64:	e30b3880 	movw	r3, #47232	; 0xb880
   12e68:	e3a02001 	mov	r2, #1
   12e6c:	e3403002 	movt	r3, #2
   12e70:	e59f1004 	ldr	r1, [pc, #4]	; 12e7c <CUSBBluetoothDevice::Configure()+0x228>
   12e74:	eb0049a9 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e78:	eaffffb9 	b	12d64 <CUSBBluetoothDevice::Configure()+0x110>
   12e7c:	0002c140 	.word	0x0002c140

00012e80 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   12e80:	e92d4070 	push	{r4, r5, r6, lr}
   12e84:	e1a04000 	mov	r4, r0
   12e88:	e5900020 	ldr	r0, [r0, #32]
   12e8c:	e59f304c 	ldr	r3, [pc, #76]	; 12ee0 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   12e90:	e3500000 	cmp	r0, #0
   12e94:	e5843000 	str	r3, [r4]
   12e98:	0a000002 	beq	12ea8 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   12e9c:	eb003c35 	bl	21f78 <operator delete[](void*)>
   12ea0:	e3a03000 	mov	r3, #0
   12ea4:	e5843020 	str	r3, [r4, #32]
   12ea8:	e5945010 	ldr	r5, [r4, #16]
   12eac:	e3550000 	cmp	r5, #0
   12eb0:	0a000006 	beq	12ed0 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   12eb4:	e1a00005 	mov	r0, r5
   12eb8:	ebffec25 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
   12ebc:	e1a00005 	mov	r0, r5
   12ec0:	e3a01018 	mov	r1, #24
   12ec4:	eb003c2c 	bl	21f7c <operator delete(void*, unsigned int)>
   12ec8:	e3a03000 	mov	r3, #0
   12ecc:	e5843010 	str	r3, [r4, #16]
   12ed0:	e1a00004 	mov	r0, r4
   12ed4:	ebfffba7 	bl	11d78 <CUSBFunction::~CUSBFunction()>
   12ed8:	e1a00004 	mov	r0, r4
   12edc:	e8bd8070 	pop	{r4, r5, r6, pc}
   12ee0:	0002c1e8 	.word	0x0002c1e8

00012ee4 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   12ee4:	e92d4010 	push	{r4, lr}
   12ee8:	e1a04000 	mov	r4, r0
   12eec:	ebffffe3 	bl	12e80 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   12ef0:	e1a00004 	mov	r0, r4
   12ef4:	e3a01028 	mov	r1, #40	; 0x28
   12ef8:	eb003c1f 	bl	21f7c <operator delete(void*, unsigned int)>
   12efc:	e1a00004 	mov	r0, r4
   12f00:	e8bd8010 	pop	{r4, pc}

00012f04 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   12f04:	e92d4010 	push	{r4, lr}
   12f08:	e1a04000 	mov	r4, r0
   12f0c:	ebfffbea 	bl	11ebc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   12f10:	e59f2020 	ldr	r2, [pc, #32]	; 12f38 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   12f14:	e3a03000 	mov	r3, #0
   12f18:	e1a00004 	mov	r0, r4
   12f1c:	e5843010 	str	r3, [r4, #16]
   12f20:	e5843014 	str	r3, [r4, #20]
   12f24:	e5842000 	str	r2, [r4]
   12f28:	e5843018 	str	r3, [r4, #24]
   12f2c:	e5843020 	str	r3, [r4, #32]
   12f30:	e5843024 	str	r3, [r4, #36]	; 0x24
   12f34:	e8bd8010 	pop	{r4, pc}
   12f38:	0002c1e8 	.word	0x0002c1e8

00012f3c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   12f3c:	e5903014 	ldr	r3, [r0, #20]
   12f40:	e92d4070 	push	{r4, r5, r6, lr}
   12f44:	e3530000 	cmp	r3, #0
   12f48:	e1a04000 	mov	r4, r0
   12f4c:	e1a05001 	mov	r5, r1
   12f50:	0a000005 	beq	12f6c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x30>
   12f54:	e30c124c 	movw	r1, #49740	; 0xc24c
   12f58:	e30c0258 	movw	r0, #49752	; 0xc258
   12f5c:	e3401002 	movt	r1, #2
   12f60:	e3400002 	movt	r0, #2
   12f64:	e3a0209a 	mov	r2, #154	; 0x9a
   12f68:	eb00470b 	bl	24b9c <assertion_failed>
   12f6c:	e3550000 	cmp	r5, #0
   12f70:	e5845014 	str	r5, [r4, #20]
   12f74:	18bd8070 	popne	{r4, r5, r6, pc}
   12f78:	e30c124c 	movw	r1, #49740	; 0xc24c
   12f7c:	e30c0270 	movw	r0, #49776	; 0xc270
   12f80:	e3401002 	movt	r1, #2
   12f84:	e3400002 	movt	r0, #2
   12f88:	e3a0209c 	mov	r2, #156	; 0x9c
   12f8c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12f90:	ea004701 	b	24b9c <assertion_failed>

00012f94 <CUSBMIDIDevice::StartRequest()>:
   12f94:	e5903010 	ldr	r3, [r0, #16]
   12f98:	e92d4070 	push	{r4, r5, r6, lr}
   12f9c:	e3530000 	cmp	r3, #0
   12fa0:	e24dd008 	sub	sp, sp, #8
   12fa4:	e1a04000 	mov	r4, r0
   12fa8:	0a000039 	beq	13094 <CUSBMIDIDevice::StartRequest()+0x100>
   12fac:	e5943020 	ldr	r3, [r4, #32]
   12fb0:	e3530000 	cmp	r3, #0
   12fb4:	0a00003d 	beq	130b0 <CUSBMIDIDevice::StartRequest()+0x11c>
   12fb8:	e5943018 	ldr	r3, [r4, #24]
   12fbc:	e3530000 	cmp	r3, #0
   12fc0:	0a000005 	beq	12fdc <CUSBMIDIDevice::StartRequest()+0x48>
   12fc4:	e30c124c 	movw	r1, #49740	; 0xc24c
   12fc8:	e30b0dc4 	movw	r0, #48580	; 0xbdc4
   12fcc:	e3401002 	movt	r1, #2
   12fd0:	e3400002 	movt	r0, #2
   12fd4:	e3a020a4 	mov	r2, #164	; 0xa4
   12fd8:	eb0046ef 	bl	24b9c <assertion_failed>
   12fdc:	e1d451bc 	ldrh	r5, [r4, #28]
   12fe0:	e3550000 	cmp	r5, #0
   12fe4:	0a000019 	beq	13050 <CUSBMIDIDevice::StartRequest()+0xbc>
   12fe8:	e3a00028 	mov	r0, #40	; 0x28
   12fec:	eb003bde 	bl	21f6c <operator new(unsigned int)>
   12ff0:	e1d431bc 	ldrh	r3, [r4, #28]
   12ff4:	e3a0c000 	mov	ip, #0
   12ff8:	e5942020 	ldr	r2, [r4, #32]
   12ffc:	e5941010 	ldr	r1, [r4, #16]
   13000:	e58dc000 	str	ip, [sp]
   13004:	e1a05000 	mov	r5, r0
   13008:	ebffeccd 	bl	e344 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1300c:	e1a00005 	mov	r0, r5
   13010:	e5845018 	str	r5, [r4, #24]
   13014:	e1a03004 	mov	r3, r4
   13018:	e3a02000 	mov	r2, #0
   1301c:	e30312a8 	movw	r1, #12968	; 0x32a8
   13020:	e3401001 	movt	r1, #1
   13024:	ebffed3d 	bl	e520 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   13028:	e5940018 	ldr	r0, [r4, #24]
   1302c:	ebffed58 	bl	e594 <CUSBRequest::SetCompleteOnNAK()>
   13030:	e1a00004 	mov	r0, r4
   13034:	ebfffc30 	bl	120fc <CUSBFunction::GetHost() const>
   13038:	e5941018 	ldr	r1, [r4, #24]
   1303c:	e5903000 	ldr	r3, [r0]
   13040:	e593300c 	ldr	r3, [r3, #12]
   13044:	e28dd008 	add	sp, sp, #8
   13048:	e8bd4070 	pop	{r4, r5, r6, lr}
   1304c:	e12fff13 	bx	r3
   13050:	e3a020a5 	mov	r2, #165	; 0xa5
   13054:	e30c124c 	movw	r1, #49740	; 0xc24c
   13058:	e30c02b4 	movw	r0, #49844	; 0xc2b4
   1305c:	e3401002 	movt	r1, #2
   13060:	e3400002 	movt	r0, #2
   13064:	eb0046cc 	bl	24b9c <assertion_failed>
   13068:	e3a00028 	mov	r0, #40	; 0x28
   1306c:	eb003bbe 	bl	21f6c <operator new(unsigned int)>
   13070:	e1d431bc 	ldrh	r3, [r4, #28]
   13074:	e5942020 	ldr	r2, [r4, #32]
   13078:	e5941010 	ldr	r1, [r4, #16]
   1307c:	e58d5000 	str	r5, [sp]
   13080:	e1a06000 	mov	r6, r0
   13084:	ebffecae 	bl	e344 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13088:	e1a00006 	mov	r0, r6
   1308c:	e5846018 	str	r6, [r4, #24]
   13090:	eaffffdf 	b	13014 <CUSBMIDIDevice::StartRequest()+0x80>
   13094:	e30c124c 	movw	r1, #49740	; 0xc24c
   13098:	e30c0288 	movw	r0, #49800	; 0xc288
   1309c:	e3401002 	movt	r1, #2
   130a0:	e3400002 	movt	r0, #2
   130a4:	e3a020a1 	mov	r2, #161	; 0xa1
   130a8:	eb0046bb 	bl	24b9c <assertion_failed>
   130ac:	eaffffbe 	b	12fac <CUSBMIDIDevice::StartRequest()+0x18>
   130b0:	e30c124c 	movw	r1, #49740	; 0xc24c
   130b4:	e30c029c 	movw	r0, #49820	; 0xc29c
   130b8:	e3401002 	movt	r1, #2
   130bc:	e3400002 	movt	r0, #2
   130c0:	e3a020a2 	mov	r2, #162	; 0xa2
   130c4:	eb0046b4 	bl	24b9c <assertion_failed>
   130c8:	eaffffba 	b	12fb8 <CUSBMIDIDevice::StartRequest()+0x24>

000130cc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   130cc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   130d0:	e2514000 	subs	r4, r1, #0
   130d4:	e24dd00c 	sub	sp, sp, #12
   130d8:	e1a05000 	mov	r5, r0
   130dc:	0a000062 	beq	1326c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a0>
   130e0:	e5953018 	ldr	r3, [r5, #24]
   130e4:	e1540003 	cmp	r4, r3
   130e8:	0a000005 	beq	13104 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x38>
   130ec:	e30c124c 	movw	r1, #49740	; 0xc24c
   130f0:	e30b0e30 	movw	r0, #48688	; 0xbe30
   130f4:	e3401002 	movt	r1, #2
   130f8:	e3400002 	movt	r0, #2
   130fc:	e3a020b2 	mov	r2, #178	; 0xb2
   13100:	eb0046a5 	bl	24b9c <assertion_failed>
   13104:	e1a00004 	mov	r0, r4
   13108:	ebffecc8 	bl	e430 <CUSBRequest::GetStatus() const>
   1310c:	e3500000 	cmp	r0, #0
   13110:	1a000023 	bne	131a4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   13114:	e5954018 	ldr	r4, [r5, #24]
   13118:	e3540000 	cmp	r4, #0
   1311c:	13a08000 	movne	r8, #0
   13120:	0a000008 	beq	13148 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   13124:	e1a00004 	mov	r0, r4
   13128:	ebffecab 	bl	e3dc <CUSBRequest::~CUSBRequest()>
   1312c:	e1a00004 	mov	r0, r4
   13130:	e3a01028 	mov	r1, #40	; 0x28
   13134:	eb003b90 	bl	21f7c <operator delete(void*, unsigned int)>
   13138:	e3580000 	cmp	r8, #0
   1313c:	e3a03000 	mov	r3, #0
   13140:	e5853018 	str	r3, [r5, #24]
   13144:	1a000044 	bne	1325c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x190>
   13148:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1314c:	e3530000 	cmp	r3, #0
   13150:	1a00003a 	bne	13240 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   13154:	eb003eea 	bl	22d04 <CTimer::Get()>
   13158:	e58d5000 	str	r5, [sp]
   1315c:	e3032330 	movw	r2, #13104	; 0x3330
   13160:	e3a03000 	mov	r3, #0
   13164:	e3402001 	movt	r2, #1
   13168:	e3a01001 	mov	r1, #1
   1316c:	eb003d1d 	bl	225e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   13170:	e3500000 	cmp	r0, #0
   13174:	e5850024 	str	r0, [r5, #36]	; 0x24
   13178:	0a000001 	beq	13184 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xb8>
   1317c:	e28dd00c 	add	sp, sp, #12
   13180:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13184:	e30c124c 	movw	r1, #49740	; 0xc24c
   13188:	e30c02d8 	movw	r0, #49880	; 0xc2d8
   1318c:	e3401002 	movt	r1, #2
   13190:	e3400002 	movt	r0, #2
   13194:	e3a020da 	mov	r2, #218	; 0xda
   13198:	e28dd00c 	add	sp, sp, #12
   1319c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   131a0:	ea00467d 	b	24b9c <assertion_failed>
   131a4:	e1a00004 	mov	r0, r4
   131a8:	ebffeca2 	bl	e438 <CUSBRequest::GetResultLength() const>
   131ac:	e3100003 	tst	r0, #3
   131b0:	1affffd7 	bne	13114 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x48>
   131b4:	e5956020 	ldr	r6, [r5, #32]
   131b8:	e3560000 	cmp	r6, #0
   131bc:	0a000031 	beq	13288 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1bc>
   131c0:	e1a00004 	mov	r0, r4
   131c4:	ebffec9b 	bl	e438 <CUSBRequest::GetResultLength() const>
   131c8:	e5954020 	ldr	r4, [r5, #32]
   131cc:	e0866000 	add	r6, r6, r0
   131d0:	e1560004 	cmp	r6, r4
   131d4:	9affffce 	bls	13114 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x48>
   131d8:	e30c71e0 	movw	r7, #49632	; 0xc1e0
   131dc:	e2844001 	add	r4, r4, #1
   131e0:	e3407002 	movt	r7, #2
   131e4:	e3a08000 	mov	r8, #0
   131e8:	e5540001 	ldrb	r0, [r4, #-1]
   131ec:	e3500000 	cmp	r0, #0
   131f0:	0a00000a 	beq	13220 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x154>
   131f4:	e5959014 	ldr	r9, [r5, #20]
   131f8:	e200300f 	and	r3, r0, #15
   131fc:	e3a08001 	mov	r8, #1
   13200:	e1a01004 	mov	r1, r4
   13204:	e3590000 	cmp	r9, #0
   13208:	e1a00220 	lsr	r0, r0, #4
   1320c:	e0873103 	add	r3, r7, r3, lsl #2
   13210:	03a08001 	moveq	r8, #1
   13214:	0a000001 	beq	13220 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x154>
   13218:	e5932024 	ldr	r2, [r3, #36]	; 0x24
   1321c:	e12fff39 	blx	r9
   13220:	e2843003 	add	r3, r4, #3
   13224:	e2844004 	add	r4, r4, #4
   13228:	e1560003 	cmp	r6, r3
   1322c:	8affffed 	bhi	131e8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   13230:	e5954018 	ldr	r4, [r5, #24]
   13234:	e3540000 	cmp	r4, #0
   13238:	1affffb9 	bne	13124 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   1323c:	eaffffbd 	b	13138 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x6c>
   13240:	e30c124c 	movw	r1, #49740	; 0xc24c
   13244:	e30c02c8 	movw	r0, #49864	; 0xc2c8
   13248:	e3401002 	movt	r1, #2
   1324c:	e3400002 	movt	r0, #2
   13250:	e3a020d8 	mov	r2, #216	; 0xd8
   13254:	eb004650 	bl	24b9c <assertion_failed>
   13258:	eaffffbd 	b	13154 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x88>
   1325c:	e1a00005 	mov	r0, r5
   13260:	e28dd00c 	add	sp, sp, #12
   13264:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   13268:	eaffff49 	b	12f94 <CUSBMIDIDevice::StartRequest()>
   1326c:	e30c124c 	movw	r1, #49740	; 0xc24c
   13270:	e30a0a24 	movw	r0, #43556	; 0xaa24
   13274:	e3401002 	movt	r1, #2
   13278:	e3400002 	movt	r0, #2
   1327c:	e3a020b1 	mov	r2, #177	; 0xb1
   13280:	eb004645 	bl	24b9c <assertion_failed>
   13284:	eaffff95 	b	130e0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x14>
   13288:	e30c124c 	movw	r1, #49740	; 0xc24c
   1328c:	e30c029c 	movw	r0, #49820	; 0xc29c
   13290:	e3401002 	movt	r1, #2
   13294:	e3400002 	movt	r0, #2
   13298:	e3a020b9 	mov	r2, #185	; 0xb9
   1329c:	eb00463e 	bl	24b9c <assertion_failed>
   132a0:	e5956020 	ldr	r6, [r5, #32]
   132a4:	eaffffc5 	b	131c0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xf4>

000132a8 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   132a8:	e92d4070 	push	{r4, r5, r6, lr}
   132ac:	e2524000 	subs	r4, r2, #0
   132b0:	e1a05000 	mov	r5, r0
   132b4:	0a000003 	beq	132c8 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   132b8:	e1a01005 	mov	r1, r5
   132bc:	e1a00004 	mov	r0, r4
   132c0:	e8bd4070 	pop	{r4, r5, r6, lr}
   132c4:	eaffff80 	b	130cc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   132c8:	e30c124c 	movw	r1, #49740	; 0xc24c
   132cc:	e30a0938 	movw	r0, #43320	; 0xa938
   132d0:	e3401002 	movt	r1, #2
   132d4:	e3400002 	movt	r0, #2
   132d8:	e3a020e1 	mov	r2, #225	; 0xe1
   132dc:	eb00462e 	bl	24b9c <assertion_failed>
   132e0:	e1a01005 	mov	r1, r5
   132e4:	e1a00004 	mov	r0, r4
   132e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   132ec:	eaffff76 	b	130cc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>

000132f0 <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   132f0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   132f4:	e92d4010 	push	{r4, lr}
   132f8:	e1530001 	cmp	r3, r1
   132fc:	e1a04000 	mov	r4, r0
   13300:	0a000005 	beq	1331c <CUSBMIDIDevice::TimerHandler(unsigned int)+0x2c>
   13304:	e30c124c 	movw	r1, #49740	; 0xc24c
   13308:	e30c02e8 	movw	r0, #49896	; 0xc2e8
   1330c:	e3401002 	movt	r1, #2
   13310:	e3400002 	movt	r0, #2
   13314:	e3a020e8 	mov	r2, #232	; 0xe8
   13318:	eb00461f 	bl	24b9c <assertion_failed>
   1331c:	e3a03000 	mov	r3, #0
   13320:	e1a00004 	mov	r0, r4
   13324:	e5843024 	str	r3, [r4, #36]	; 0x24
   13328:	e8bd4010 	pop	{r4, lr}
   1332c:	eaffff18 	b	12f94 <CUSBMIDIDevice::StartRequest()>

00013330 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   13330:	e92d4070 	push	{r4, r5, r6, lr}
   13334:	e2524000 	subs	r4, r2, #0
   13338:	e1a05000 	mov	r5, r0
   1333c:	0a000003 	beq	13350 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x20>
   13340:	e1a01005 	mov	r1, r5
   13344:	e1a00004 	mov	r0, r4
   13348:	e8bd4070 	pop	{r4, r5, r6, lr}
   1334c:	eaffffe7 	b	132f0 <CUSBMIDIDevice::TimerHandler(unsigned int)>
   13350:	e30c124c 	movw	r1, #49740	; 0xc24c
   13354:	e30a0938 	movw	r0, #43320	; 0xa938
   13358:	e3401002 	movt	r1, #2
   1335c:	e3400002 	movt	r0, #2
   13360:	e3a020f1 	mov	r2, #241	; 0xf1
   13364:	eb00460c 	bl	24b9c <assertion_failed>
   13368:	e1a01005 	mov	r1, r5
   1336c:	e1a00004 	mov	r0, r4
   13370:	e8bd4070 	pop	{r4, r5, r6, lr}
   13374:	eaffffdd 	b	132f0 <CUSBMIDIDevice::TimerHandler(unsigned int)>

00013378 <CUSBMIDIDevice::Configure()>:
   13378:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1337c:	e24dd010 	sub	sp, sp, #16
   13380:	e1a05000 	mov	r5, r0
   13384:	ebfffb2b 	bl	12038 <CUSBFunction::GetNumEndpoints() const>
   13388:	e2506000 	subs	r6, r0, #0
   1338c:	e1a00005 	mov	r0, r5
   13390:	0a000070 	beq	13558 <CUSBMIDIDevice::Configure()+0x1e0>
   13394:	ebfffb37 	bl	12078 <CUSBFunction::GetDevice() const>
   13398:	ebffe7b7 	bl	d27c <CUSBDevice::GetDeviceDescriptor() const>
   1339c:	e2504000 	subs	r4, r0, #0
   133a0:	0a000074 	beq	13578 <CUSBMIDIDevice::Configure()+0x200>
   133a4:	e1d420b8 	ldrh	r2, [r4, #8]
   133a8:	e3003582 	movw	r3, #1410	; 0x582
   133ac:	e30c724c 	movw	r7, #49740	; 0xc24c
   133b0:	e30c62fc 	movw	r6, #49916	; 0xc2fc
   133b4:	e1520003 	cmp	r2, r3
   133b8:	e3407002 	movt	r7, #2
   133bc:	e3406002 	movt	r6, #2
   133c0:	01d480ba 	ldrheq	r8, [r4, #10]
   133c4:	0300312a 	movweq	r3, #298	; 0x12a
   133c8:	13a08000 	movne	r8, #0
   133cc:	00488003 	subeq	r8, r8, r3
   133d0:	016f8f18 	clzeq	r8, r8
   133d4:	01a082a8 	lsreq	r8, r8, #5
   133d8:	e3a01005 	mov	r1, #5
   133dc:	e1a00005 	mov	r0, r5
   133e0:	ebfffb87 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
   133e4:	e2504000 	subs	r4, r0, #0
   133e8:	0a000024 	beq	13480 <CUSBMIDIDevice::Configure()+0x108>
   133ec:	e1d430d2 	ldrsb	r3, [r4, #2]
   133f0:	e3530000 	cmp	r3, #0
   133f4:	aafffff7 	bge	133d8 <CUSBMIDIDevice::Configure()+0x60>
   133f8:	e5d43003 	ldrb	r3, [r4, #3]
   133fc:	e203303f 	and	r3, r3, #63	; 0x3f
   13400:	e3530002 	cmp	r3, #2
   13404:	1afffff3 	bne	133d8 <CUSBMIDIDevice::Configure()+0x60>
   13408:	e3580000 	cmp	r8, #0
   1340c:	0a000047 	beq	13530 <CUSBMIDIDevice::Configure()+0x1b8>
   13410:	e5953010 	ldr	r3, [r5, #16]
   13414:	e3530000 	cmp	r3, #0
   13418:	1a00005d 	bne	13594 <CUSBMIDIDevice::Configure()+0x21c>
   1341c:	e1a00005 	mov	r0, r5
   13420:	ebfffb14 	bl	12078 <CUSBFunction::GetDevice() const>
   13424:	e1a0a000 	mov	sl, r0
   13428:	e3a00018 	mov	r0, #24
   1342c:	eb003ace 	bl	21f6c <operator new(unsigned int)>
   13430:	e1a02004 	mov	r2, r4
   13434:	e1a0100a 	mov	r1, sl
   13438:	e1a09000 	mov	r9, r0
   1343c:	ebffea31 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13440:	e5859010 	str	r9, [r5, #16]
   13444:	e5953020 	ldr	r3, [r5, #32]
   13448:	e1d400b4 	ldrh	r0, [r4, #4]
   1344c:	e3530000 	cmp	r3, #0
   13450:	e3c00003 	bic	r0, r0, #3
   13454:	e6ff0070 	uxth	r0, r0
   13458:	e1c501bc 	strh	r0, [r5, #28]
   1345c:	0a000042 	beq	1356c <CUSBMIDIDevice::Configure()+0x1f4>
   13460:	e3a0207e 	mov	r2, #126	; 0x7e
   13464:	e1a01007 	mov	r1, r7
   13468:	e1a00006 	mov	r0, r6
   1346c:	eb0045ca 	bl	24b9c <assertion_failed>
   13470:	e1d501bc 	ldrh	r0, [r5, #28]
   13474:	eb003abd 	bl	21f70 <operator new[](unsigned int)>
   13478:	e5850020 	str	r0, [r5, #32]
   1347c:	eaffffd5 	b	133d8 <CUSBMIDIDevice::Configure()+0x60>
   13480:	e5956010 	ldr	r6, [r5, #16]
   13484:	e1a00005 	mov	r0, r5
   13488:	e3560000 	cmp	r6, #0
   1348c:	0a000031 	beq	13558 <CUSBMIDIDevice::Configure()+0x1e0>
   13490:	ebfffb2a 	bl	12140 <CUSBFunction::Configure()>
   13494:	e2506000 	subs	r6, r0, #0
   13498:	0a00001b 	beq	1350c <CUSBMIDIDevice::Configure()+0x194>
   1349c:	e1a0000d 	mov	r0, sp
   134a0:	eb004ac9 	bl	25fcc <CString::CString()>
   134a4:	e3013a5c 	movw	r3, #6748	; 0x1a5c
   134a8:	e3403003 	movt	r3, #3
   134ac:	e1a0000d 	mov	r0, sp
   134b0:	e30c1314 	movw	r1, #49940	; 0xc314
   134b4:	e3401002 	movt	r1, #2
   134b8:	e5932000 	ldr	r2, [r3]
   134bc:	e282c001 	add	ip, r2, #1
   134c0:	e583c000 	str	ip, [r3]
   134c4:	eb004e1f 	bl	26d48 <CString::Format(char const*, ...)>
   134c8:	eb00470b 	bl	250fc <CDeviceNameService::Get()>
   134cc:	e1a06000 	mov	r6, r0
   134d0:	e1a0000d 	mov	r0, sp
   134d4:	eb004ad3 	bl	26028 <CString::operator char const*() const>
   134d8:	e1a03004 	mov	r3, r4
   134dc:	e1a02005 	mov	r2, r5
   134e0:	e1a01000 	mov	r1, r0
   134e4:	e1a00006 	mov	r0, r6
   134e8:	eb00468f 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   134ec:	e1a00005 	mov	r0, r5
   134f0:	ebfffea7 	bl	12f94 <CUSBMIDIDevice::StartRequest()>
   134f4:	e1a06000 	mov	r6, r0
   134f8:	e1a0000d 	mov	r0, sp
   134fc:	eb004a7f 	bl	25f00 <CString::~CString()>
   13500:	e1a00006 	mov	r0, r6
   13504:	e28dd010 	add	sp, sp, #16
   13508:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1350c:	eb004727 	bl	251b0 <CLogger::Get()>
   13510:	e3a02001 	mov	r2, #1
   13514:	e59f108c 	ldr	r1, [pc, #140]	; 135a8 <CUSBMIDIDevice::Configure()+0x230>
   13518:	e30b3880 	movw	r3, #47232	; 0xb880
   1351c:	e3403002 	movt	r3, #2
   13520:	eb0047fe 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13524:	e1a00006 	mov	r0, r6
   13528:	e28dd010 	add	sp, sp, #16
   1352c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13530:	e3a01025 	mov	r1, #37	; 0x25
   13534:	e1a00005 	mov	r0, r5
   13538:	ebfffb31 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
   1353c:	e3500000 	cmp	r0, #0
   13540:	0affffa4 	beq	133d8 <CUSBMIDIDevice::Configure()+0x60>
   13544:	e5d43000 	ldrb	r3, [r4]
   13548:	e0843003 	add	r3, r4, r3
   1354c:	e1500003 	cmp	r0, r3
   13550:	1affffa0 	bne	133d8 <CUSBMIDIDevice::Configure()+0x60>
   13554:	eaffffad 	b	13410 <CUSBMIDIDevice::Configure()+0x98>
   13558:	e59f1048 	ldr	r1, [pc, #72]	; 135a8 <CUSBMIDIDevice::Configure()+0x230>
   1355c:	ebfffb3b 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   13560:	e1a00006 	mov	r0, r6
   13564:	e28dd010 	add	sp, sp, #16
   13568:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1356c:	eb003a7f 	bl	21f70 <operator new[](unsigned int)>
   13570:	e5850020 	str	r0, [r5, #32]
   13574:	eaffff97 	b	133d8 <CUSBMIDIDevice::Configure()+0x60>
   13578:	e30c124c 	movw	r1, #49740	; 0xc24c
   1357c:	e30b0f9c 	movw	r0, #49052	; 0xbf9c
   13580:	e3401002 	movt	r1, #2
   13584:	e3400002 	movt	r0, #2
   13588:	e3a02052 	mov	r2, #82	; 0x52
   1358c:	eb004582 	bl	24b9c <assertion_failed>
   13590:	eaffff83 	b	133a4 <CUSBMIDIDevice::Configure()+0x2c>
   13594:	e1a00005 	mov	r0, r5
   13598:	e59f1008 	ldr	r1, [pc, #8]	; 135a8 <CUSBMIDIDevice::Configure()+0x230>
   1359c:	ebfffb2b 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   135a0:	e3a06000 	mov	r6, #0
   135a4:	eaffffd5 	b	13500 <CUSBMIDIDevice::Configure()+0x188>
   135a8:	0002c244 	.word	0x0002c244

000135ac <CUSBCDCEthernetDevice::GetMACAddress() const>:
   135ac:	e2800018 	add	r0, r0, #24
   135b0:	e12fff1e 	bx	lr

000135b4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   135b4:	e92d4070 	push	{r4, r5, r6, lr}
   135b8:	e1a04000 	mov	r4, r0
   135bc:	e5905014 	ldr	r5, [r0, #20]
   135c0:	e59f3064 	ldr	r3, [pc, #100]	; 1362c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x78>
   135c4:	e3550000 	cmp	r5, #0
   135c8:	e5803000 	str	r3, [r0]
   135cc:	0a000004 	beq	135e4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x30>
   135d0:	e1a00005 	mov	r0, r5
   135d4:	ebffea5e 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
   135d8:	e1a00005 	mov	r0, r5
   135dc:	e3a01018 	mov	r1, #24
   135e0:	eb003a65 	bl	21f7c <operator delete(void*, unsigned int)>
   135e4:	e5945010 	ldr	r5, [r4, #16]
   135e8:	e3a03000 	mov	r3, #0
   135ec:	e5843014 	str	r3, [r4, #20]
   135f0:	e1550003 	cmp	r5, r3
   135f4:	0a000004 	beq	1360c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x58>
   135f8:	e1a00005 	mov	r0, r5
   135fc:	ebffea54 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
   13600:	e1a00005 	mov	r0, r5
   13604:	e3a01018 	mov	r1, #24
   13608:	eb003a5b 	bl	21f7c <operator delete(void*, unsigned int)>
   1360c:	e3a03000 	mov	r3, #0
   13610:	e2840018 	add	r0, r4, #24
   13614:	e5843010 	str	r3, [r4, #16]
   13618:	eb0005e1 	bl	14da4 <CMACAddress::~CMACAddress()>
   1361c:	e1a00004 	mov	r0, r4
   13620:	eb000698 	bl	15088 <CNetDevice::~CNetDevice()>
   13624:	e1a00004 	mov	r0, r4
   13628:	e8bd8070 	pop	{r4, r5, r6, pc}
   1362c:	0002c324 	.word	0x0002c324

00013630 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   13630:	e92d4010 	push	{r4, lr}
   13634:	e1a04000 	mov	r4, r0
   13638:	ebffffdd 	bl	135b4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   1363c:	e1a00004 	mov	r0, r4
   13640:	e3a01024 	mov	r1, #36	; 0x24
   13644:	eb003a4c 	bl	21f7c <operator delete(void*, unsigned int)>
   13648:	e1a00004 	mov	r0, r4
   1364c:	e8bd8010 	pop	{r4, pc}

00013650 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   13650:	e5903014 	ldr	r3, [r0, #20]
   13654:	e92d4070 	push	{r4, r5, r6, lr}
   13658:	e3530000 	cmp	r3, #0
   1365c:	e1a04000 	mov	r4, r0
   13660:	e1a05001 	mov	r5, r1
   13664:	e1a06002 	mov	r6, r2
   13668:	0a000019 	beq	136d4 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x84>
   1366c:	e3550000 	cmp	r5, #0
   13670:	0a000010 	beq	136b8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x68>
   13674:	e3560d19 	cmp	r6, #1600	; 0x640
   13678:	9a000005 	bls	13694 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x44>
   1367c:	e30c1354 	movw	r1, #50004	; 0xc354
   13680:	e30c0380 	movw	r0, #50048	; 0xc380
   13684:	e3401002 	movt	r1, #2
   13688:	e3400002 	movt	r0, #2
   1368c:	e3a020ac 	mov	r2, #172	; 0xac
   13690:	eb004541 	bl	24b9c <assertion_failed>
   13694:	e1a00004 	mov	r0, r4
   13698:	ebfffa97 	bl	120fc <CUSBFunction::GetHost() const>
   1369c:	e1a03006 	mov	r3, r6
   136a0:	e1a02005 	mov	r2, r5
   136a4:	e5941014 	ldr	r1, [r4, #20]
   136a8:	ebffeb0d 	bl	e2e4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
   136ac:	e1e00000 	mvn	r0, r0
   136b0:	e1a00fa0 	lsr	r0, r0, #31
   136b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   136b8:	e30c1354 	movw	r1, #50004	; 0xc354
   136bc:	e30b097c 	movw	r0, #47484	; 0xb97c
   136c0:	e3401002 	movt	r1, #2
   136c4:	e3400002 	movt	r0, #2
   136c8:	e3a020ab 	mov	r2, #171	; 0xab
   136cc:	eb004532 	bl	24b9c <assertion_failed>
   136d0:	eaffffe7 	b	13674 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x24>
   136d4:	e30c1354 	movw	r1, #50004	; 0xc354
   136d8:	e30c0368 	movw	r0, #50024	; 0xc368
   136dc:	e3401002 	movt	r1, #2
   136e0:	e3400002 	movt	r0, #2
   136e4:	e3a020aa 	mov	r2, #170	; 0xaa
   136e8:	eb00452b 	bl	24b9c <assertion_failed>
   136ec:	eaffffde 	b	1366c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x1c>

000136f0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   136f0:	e5903010 	ldr	r3, [r0, #16]
   136f4:	e92d4070 	push	{r4, r5, r6, lr}
   136f8:	e3530000 	cmp	r3, #0
   136fc:	e24dd030 	sub	sp, sp, #48	; 0x30
   13700:	e1a04000 	mov	r4, r0
   13704:	e1a05001 	mov	r5, r1
   13708:	e1a06002 	mov	r6, r2
   1370c:	0a000028 	beq	137b4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc4>
   13710:	e3550000 	cmp	r5, #0
   13714:	0a00001f 	beq	13798 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa8>
   13718:	e5941010 	ldr	r1, [r4, #16]
   1371c:	e1a02005 	mov	r2, r5
   13720:	e3a03000 	mov	r3, #0
   13724:	e28d0008 	add	r0, sp, #8
   13728:	e58d3000 	str	r3, [sp]
   1372c:	e3a03d19 	mov	r3, #1600	; 0x640
   13730:	ebffeb03 	bl	e344 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13734:	e28d0008 	add	r0, sp, #8
   13738:	ebffeb95 	bl	e594 <CUSBRequest::SetCompleteOnNAK()>
   1373c:	e1a00004 	mov	r0, r4
   13740:	ebfffa6d 	bl	120fc <CUSBFunction::GetHost() const>
   13744:	e28d1008 	add	r1, sp, #8
   13748:	e5903000 	ldr	r3, [r0]
   1374c:	e5933008 	ldr	r3, [r3, #8]
   13750:	e12fff33 	blx	r3
   13754:	e3500000 	cmp	r0, #0
   13758:	1a000005 	bne	13774 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x84>
   1375c:	e3a04000 	mov	r4, #0
   13760:	e28d0008 	add	r0, sp, #8
   13764:	ebffeb1c 	bl	e3dc <CUSBRequest::~CUSBRequest()>
   13768:	e1a00004 	mov	r0, r4
   1376c:	e28dd030 	add	sp, sp, #48	; 0x30
   13770:	e8bd8070 	pop	{r4, r5, r6, pc}
   13774:	e28d0008 	add	r0, sp, #8
   13778:	ebffeb2e 	bl	e438 <CUSBRequest::GetResultLength() const>
   1377c:	e2505000 	subs	r5, r0, #0
   13780:	0afffff5 	beq	1375c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   13784:	e3560000 	cmp	r6, #0
   13788:	0a000010 	beq	137d0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe0>
   1378c:	e3a04001 	mov	r4, #1
   13790:	e5865000 	str	r5, [r6]
   13794:	eafffff1 	b	13760 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   13798:	e30c1354 	movw	r1, #50004	; 0xc354
   1379c:	e30b097c 	movw	r0, #47484	; 0xb97c
   137a0:	e3401002 	movt	r1, #2
   137a4:	e3400002 	movt	r0, #2
   137a8:	e3a020b3 	mov	r2, #179	; 0xb3
   137ac:	eb0044fa 	bl	24b9c <assertion_failed>
   137b0:	eaffffd8 	b	13718 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   137b4:	e30c1354 	movw	r1, #50004	; 0xc354
   137b8:	e30c03a0 	movw	r0, #50080	; 0xc3a0
   137bc:	e3401002 	movt	r1, #2
   137c0:	e3400002 	movt	r0, #2
   137c4:	e3a020b2 	mov	r2, #178	; 0xb2
   137c8:	eb0044f3 	bl	24b9c <assertion_failed>
   137cc:	eaffffcf 	b	13710 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x20>
   137d0:	e30c1354 	movw	r1, #50004	; 0xc354
   137d4:	e30c03b8 	movw	r0, #50104	; 0xc3b8
   137d8:	e3401002 	movt	r1, #2
   137dc:	e3400002 	movt	r0, #2
   137e0:	e3a020c3 	mov	r2, #195	; 0xc3
   137e4:	eb0044ec 	bl	24b9c <assertion_failed>
   137e8:	eaffffe7 	b	1378c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x9c>

000137ec <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   137ec:	e92d4010 	push	{r4, lr}
   137f0:	e1a04000 	mov	r4, r0
   137f4:	eb00061b 	bl	15068 <CNetDevice::CNetDevice(CUSBFunction*)>
   137f8:	e59f201c 	ldr	r2, [pc, #28]	; 1381c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x30>
   137fc:	e3a03000 	mov	r3, #0
   13800:	e2840018 	add	r0, r4, #24
   13804:	e5843010 	str	r3, [r4, #16]
   13808:	e5843014 	str	r3, [r4, #20]
   1380c:	e5842000 	str	r2, [r4]
   13810:	eb000560 	bl	14d98 <CMACAddress::CMACAddress()>
   13814:	e1a00004 	mov	r0, r4
   13818:	e8bd8010 	pop	{r4, pc}
   1381c:	0002c324 	.word	0x0002c324

00013820 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   13820:	e92d4030 	push	{r4, r5, lr}
   13824:	e24dd01c 	sub	sp, sp, #28
   13828:	e1a05001 	mov	r5, r1
   1382c:	e1a04000 	mov	r4, r0
   13830:	ebfffa10 	bl	12078 <CUSBFunction::GetDevice() const>
   13834:	e1a01000 	mov	r1, r0
   13838:	e28d000c 	add	r0, sp, #12
   1383c:	eb0001a0 	bl	13ec4 <CUSBString::CUSBString(CUSBDevice*)>
   13840:	e3550000 	cmp	r5, #0
   13844:	1a000005 	bne	13860 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   13848:	e3a04000 	mov	r4, #0
   1384c:	e28d000c 	add	r0, sp, #12
   13850:	eb0001f0 	bl	14018 <CUSBString::~CUSBString()>
   13854:	e1a00004 	mov	r0, r4
   13858:	e28dd01c 	add	sp, sp, #28
   1385c:	e8bd8030 	pop	{r4, r5, pc}
   13860:	e28d000c 	add	r0, sp, #12
   13864:	eb0002a6 	bl	14304 <CUSBString::GetLanguageID()>
   13868:	e1a01005 	mov	r1, r5
   1386c:	e1a02000 	mov	r2, r0
   13870:	e28d000c 	add	r0, sp, #12
   13874:	eb0001f7 	bl	14058 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   13878:	e3500000 	cmp	r0, #0
   1387c:	0afffff1 	beq	13848 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   13880:	e28d000c 	add	r0, sp, #12
   13884:	eb00029c 	bl	142fc <CUSBString::Get() const>
   13888:	e2505000 	subs	r5, r0, #0
   1388c:	0a00001c 	beq	13904 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe4>
   13890:	e2851002 	add	r1, r5, #2
   13894:	e285c00e 	add	ip, r5, #14
   13898:	e28d0004 	add	r0, sp, #4
   1389c:	e15130d2 	ldrsb	r3, [r1, #-2]
   138a0:	e2432007 	sub	r2, r3, #7
   138a4:	e3530039 	cmp	r3, #57	; 0x39
   138a8:	c6af3072 	sxtbgt	r3, r2
   138ac:	e2433030 	sub	r3, r3, #48	; 0x30
   138b0:	e6ef2073 	uxtb	r2, r3
   138b4:	e352000f 	cmp	r2, #15
   138b8:	8affffe2 	bhi	13848 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   138bc:	e15130d1 	ldrsb	r3, [r1, #-1]
   138c0:	e2811002 	add	r1, r1, #2
   138c4:	e243e007 	sub	lr, r3, #7
   138c8:	e3530039 	cmp	r3, #57	; 0x39
   138cc:	c6af307e 	sxtbgt	r3, lr
   138d0:	e2433030 	sub	r3, r3, #48	; 0x30
   138d4:	e6ef3073 	uxtb	r3, r3
   138d8:	e353000f 	cmp	r3, #15
   138dc:	e1833202 	orr	r3, r3, r2, lsl #4
   138e0:	8affffd8 	bhi	13848 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   138e4:	e15c0001 	cmp	ip, r1
   138e8:	e4c03001 	strb	r3, [r0], #1
   138ec:	1affffea 	bne	1389c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   138f0:	e2840018 	add	r0, r4, #24
   138f4:	e28d1004 	add	r1, sp, #4
   138f8:	eb000551 	bl	14e44 <CMACAddress::Set(unsigned char const*)>
   138fc:	e3a04001 	mov	r4, #1
   13900:	eaffffd1 	b	1384c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   13904:	e30c1354 	movw	r1, #50004	; 0xc354
   13908:	e30c03cc 	movw	r0, #50124	; 0xc3cc
   1390c:	e3401002 	movt	r1, #2
   13910:	e3400002 	movt	r0, #2
   13914:	e3a020d3 	mov	r2, #211	; 0xd3
   13918:	eb00449f 	bl	24b9c <assertion_failed>
   1391c:	eaffffdb 	b	13890 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x70>

00013920 <CUSBCDCEthernetDevice::Configure()>:
   13920:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13924:	e1a05000 	mov	r5, r0
   13928:	e24dd01c 	sub	sp, sp, #28
   1392c:	ea000002 	b	1393c <CUSBCDCEthernetDevice::Configure()+0x1c>
   13930:	e5d43002 	ldrb	r3, [r4, #2]
   13934:	e353000f 	cmp	r3, #15
   13938:	0a000013 	beq	1398c <CUSBCDCEthernetDevice::Configure()+0x6c>
   1393c:	e3a01024 	mov	r1, #36	; 0x24
   13940:	e1a00005 	mov	r0, r5
   13944:	ebfffa2e 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
   13948:	e2504000 	subs	r4, r0, #0
   1394c:	1afffff7 	bne	13930 <CUSBCDCEthernetDevice::Configure()+0x10>
   13950:	e1a00005 	mov	r0, r5
   13954:	e59f11f8 	ldr	r1, [pc, #504]	; 13b54 <CUSBCDCEthernetDevice::Configure()+0x234>
   13958:	ebfffa3c 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   1395c:	e1a00004 	mov	r0, r4
   13960:	e28dd01c 	add	sp, sp, #28
   13964:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13968:	e5d32006 	ldrb	r2, [r3, #6]
   1396c:	e3520000 	cmp	r2, #0
   13970:	1a000005 	bne	1398c <CUSBCDCEthernetDevice::Configure()+0x6c>
   13974:	e5d32007 	ldrb	r2, [r3, #7]
   13978:	e3520000 	cmp	r2, #0
   1397c:	1a000002 	bne	1398c <CUSBCDCEthernetDevice::Configure()+0x6c>
   13980:	e5d33004 	ldrb	r3, [r3, #4]
   13984:	e3530001 	cmp	r3, #1
   13988:	ca000008 	bgt	139b0 <CUSBCDCEthernetDevice::Configure()+0x90>
   1398c:	e3a01004 	mov	r1, #4
   13990:	e1a00005 	mov	r0, r5
   13994:	ebfffa1a 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
   13998:	e2503000 	subs	r3, r0, #0
   1399c:	0a000034 	beq	13a74 <CUSBCDCEthernetDevice::Configure()+0x154>
   139a0:	e5d32005 	ldrb	r2, [r3, #5]
   139a4:	e352000a 	cmp	r2, #10
   139a8:	1afffff7 	bne	1398c <CUSBCDCEthernetDevice::Configure()+0x6c>
   139ac:	eaffffed 	b	13968 <CUSBCDCEthernetDevice::Configure()+0x48>
   139b0:	e5d41003 	ldrb	r1, [r4, #3]
   139b4:	e1a00005 	mov	r0, r5
   139b8:	ebffff98 	bl	13820 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   139bc:	e2504000 	subs	r4, r0, #0
   139c0:	0a000043 	beq	13ad4 <CUSBCDCEthernetDevice::Configure()+0x1b4>
   139c4:	e28d0008 	add	r0, sp, #8
   139c8:	eb00497f 	bl	25fcc <CString::CString()>
   139cc:	e28d1008 	add	r1, sp, #8
   139d0:	e2850018 	add	r0, r5, #24
   139d4:	eb00057c 	bl	14fcc <CMACAddress::Format(CString*) const>
   139d8:	eb0045f4 	bl	251b0 <CLogger::Get()>
   139dc:	e1a04000 	mov	r4, r0
   139e0:	e28d0008 	add	r0, sp, #8
   139e4:	eb00498f 	bl	26028 <CString::operator char const*() const>
   139e8:	e30c33f4 	movw	r3, #50164	; 0xc3f4
   139ec:	e3a02004 	mov	r2, #4
   139f0:	e3403002 	movt	r3, #2
   139f4:	e59f1158 	ldr	r1, [pc, #344]	; 13b54 <CUSBCDCEthernetDevice::Configure()+0x234>
   139f8:	e58d0000 	str	r0, [sp]
   139fc:	e1a00004 	mov	r0, r4
   13a00:	eb0046c6 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13a04:	ea000003 	b	13a18 <CUSBCDCEthernetDevice::Configure()+0xf8>
   13a08:	e5d43003 	ldrb	r3, [r4, #3]
   13a0c:	e203303f 	and	r3, r3, #63	; 0x3f
   13a10:	e3530002 	cmp	r3, #2
   13a14:	0a00001d 	beq	13a90 <CUSBCDCEthernetDevice::Configure()+0x170>
   13a18:	e3a01005 	mov	r1, #5
   13a1c:	e1a00005 	mov	r0, r5
   13a20:	ebfff9f7 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
   13a24:	e2504000 	subs	r4, r0, #0
   13a28:	1afffff6 	bne	13a08 <CUSBCDCEthernetDevice::Configure()+0xe8>
   13a2c:	e5953010 	ldr	r3, [r5, #16]
   13a30:	e1a00005 	mov	r0, r5
   13a34:	e3530000 	cmp	r3, #0
   13a38:	0a000034 	beq	13b10 <CUSBCDCEthernetDevice::Configure()+0x1f0>
   13a3c:	e5953014 	ldr	r3, [r5, #20]
   13a40:	e3530000 	cmp	r3, #0
   13a44:	0a000031 	beq	13b10 <CUSBCDCEthernetDevice::Configure()+0x1f0>
   13a48:	ebfff9bc 	bl	12140 <CUSBFunction::Configure()>
   13a4c:	e2504000 	subs	r4, r0, #0
   13a50:	0a000026 	beq	13af0 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   13a54:	e1a00005 	mov	r0, r5
   13a58:	e3a04001 	mov	r4, #1
   13a5c:	eb00059c 	bl	150d4 <CNetDevice::AddNetDevice()>
   13a60:	e28d0008 	add	r0, sp, #8
   13a64:	eb004925 	bl	25f00 <CString::~CString()>
   13a68:	e1a00004 	mov	r0, r4
   13a6c:	e28dd01c 	add	sp, sp, #28
   13a70:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13a74:	e1a00005 	mov	r0, r5
   13a78:	e59f10d4 	ldr	r1, [pc, #212]	; 13b54 <CUSBCDCEthernetDevice::Configure()+0x234>
   13a7c:	e1a04003 	mov	r4, r3
   13a80:	ebfff9f2 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   13a84:	e1a00004 	mov	r0, r4
   13a88:	e28dd01c 	add	sp, sp, #28
   13a8c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13a90:	e1d430d2 	ldrsb	r3, [r4, #2]
   13a94:	e1a00005 	mov	r0, r5
   13a98:	e3530000 	cmp	r3, #0
   13a9c:	ba00001f 	blt	13b20 <CUSBCDCEthernetDevice::Configure()+0x200>
   13aa0:	e5953014 	ldr	r3, [r5, #20]
   13aa4:	e3530000 	cmp	r3, #0
   13aa8:	1a000017 	bne	13b0c <CUSBCDCEthernetDevice::Configure()+0x1ec>
   13aac:	ebfff971 	bl	12078 <CUSBFunction::GetDevice() const>
   13ab0:	e1a07000 	mov	r7, r0
   13ab4:	e3a00018 	mov	r0, #24
   13ab8:	eb00392b 	bl	21f6c <operator new(unsigned int)>
   13abc:	e1a02004 	mov	r2, r4
   13ac0:	e1a01007 	mov	r1, r7
   13ac4:	e1a06000 	mov	r6, r0
   13ac8:	ebffe88e 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13acc:	e5856014 	str	r6, [r5, #20]
   13ad0:	eaffffd0 	b	13a18 <CUSBCDCEthernetDevice::Configure()+0xf8>
   13ad4:	eb0045b5 	bl	251b0 <CLogger::Get()>
   13ad8:	e30c33dc 	movw	r3, #50140	; 0xc3dc
   13adc:	e3a02001 	mov	r2, #1
   13ae0:	e3403002 	movt	r3, #2
   13ae4:	e59f1068 	ldr	r1, [pc, #104]	; 13b54 <CUSBCDCEthernetDevice::Configure()+0x234>
   13ae8:	eb00468c 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13aec:	eaffff9a 	b	1395c <CUSBCDCEthernetDevice::Configure()+0x3c>
   13af0:	eb0045ae 	bl	251b0 <CLogger::Get()>
   13af4:	e30b3880 	movw	r3, #47232	; 0xb880
   13af8:	e3a02001 	mov	r2, #1
   13afc:	e3403002 	movt	r3, #2
   13b00:	e59f104c 	ldr	r1, [pc, #76]	; 13b54 <CUSBCDCEthernetDevice::Configure()+0x234>
   13b04:	eb004685 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13b08:	eaffffd4 	b	13a60 <CUSBCDCEthernetDevice::Configure()+0x140>
   13b0c:	e1a00005 	mov	r0, r5
   13b10:	e59f103c 	ldr	r1, [pc, #60]	; 13b54 <CUSBCDCEthernetDevice::Configure()+0x234>
   13b14:	e3a04000 	mov	r4, #0
   13b18:	ebfff9cc 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   13b1c:	eaffffcf 	b	13a60 <CUSBCDCEthernetDevice::Configure()+0x140>
   13b20:	e5953010 	ldr	r3, [r5, #16]
   13b24:	e3530000 	cmp	r3, #0
   13b28:	1afffff8 	bne	13b10 <CUSBCDCEthernetDevice::Configure()+0x1f0>
   13b2c:	ebfff951 	bl	12078 <CUSBFunction::GetDevice() const>
   13b30:	e1a07000 	mov	r7, r0
   13b34:	e3a00018 	mov	r0, #24
   13b38:	eb00390b 	bl	21f6c <operator new(unsigned int)>
   13b3c:	e1a02004 	mov	r2, r4
   13b40:	e1a01007 	mov	r1, r7
   13b44:	e1a06000 	mov	r6, r0
   13b48:	ebffe86e 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13b4c:	e5856010 	str	r6, [r5, #16]
   13b50:	eaffffb0 	b	13a18 <CUSBCDCEthernetDevice::Configure()+0xf8>
   13b54:	0002c34c 	.word	0x0002c34c

00013b58 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   13b58:	e3510000 	cmp	r1, #0
   13b5c:	e3a03000 	mov	r3, #0
   13b60:	e92d4070 	push	{r4, r5, r6, lr}
   13b64:	e1a05002 	mov	r5, r2
   13b68:	e5803008 	str	r3, [r0, #8]
   13b6c:	e0812002 	add	r2, r1, r2
   13b70:	e5803014 	str	r3, [r0, #20]
   13b74:	e1a04000 	mov	r4, r0
   13b78:	e5801000 	str	r1, [r0]
   13b7c:	11a03005 	movne	r3, r5
   13b80:	e5805004 	str	r5, [r0, #4]
   13b84:	e5801010 	str	r1, [r0, #16]
   13b88:	e5801018 	str	r1, [r0, #24]
   13b8c:	e580200c 	str	r2, [r0, #12]
   13b90:	0a000039 	beq	13c7c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x124>
   13b94:	e2433004 	sub	r3, r3, #4
   13b98:	e3530f7f 	cmp	r3, #508	; 0x1fc
   13b9c:	8a000003 	bhi	13bb0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x58>
   13ba0:	e5943000 	ldr	r3, [r4]
   13ba4:	e5d32000 	ldrb	r2, [r3]
   13ba8:	e3520009 	cmp	r2, #9
   13bac:	0a000001 	beq	13bb8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x60>
   13bb0:	e1a00004 	mov	r0, r4
   13bb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   13bb8:	e5d32001 	ldrb	r2, [r3, #1]
   13bbc:	e3520002 	cmp	r2, #2
   13bc0:	1afffffa 	bne	13bb0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x58>
   13bc4:	e1d3c0b2 	ldrh	ip, [r3, #2]
   13bc8:	e155000c 	cmp	r5, ip
   13bcc:	3afffff7 	bcc	13bb0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x58>
   13bd0:	e3a05000 	mov	r5, #0
   13bd4:	8083c00c 	addhi	ip, r3, ip
   13bd8:	9594c00c 	ldrls	ip, [r4, #12]
   13bdc:	e1a0e005 	mov	lr, r5
   13be0:	8584c00c 	strhi	ip, [r4, #12]
   13be4:	ea000005 	b	13c00 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xa8>
   13be8:	e3520005 	cmp	r2, #5
   13bec:	0a00001c 	beq	13c64 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x10c>
   13bf0:	e3520002 	cmp	r2, #2
   13bf4:	0a000016 	beq	13c54 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xfc>
   13bf8:	e1a03001 	mov	r3, r1
   13bfc:	e1a0e002 	mov	lr, r2
   13c00:	e2832002 	add	r2, r3, #2
   13c04:	e15c0002 	cmp	ip, r2
   13c08:	9a000023 	bls	13c9c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x144>
   13c0c:	e5d30000 	ldrb	r0, [r3]
   13c10:	e5d32001 	ldrb	r2, [r3, #1]
   13c14:	e0831000 	add	r1, r3, r0
   13c18:	e151000c 	cmp	r1, ip
   13c1c:	8a00000a 	bhi	13c4c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf4>
   13c20:	e3520004 	cmp	r2, #4
   13c24:	1affffef 	bne	13be8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x90>
   13c28:	e35e0000 	cmp	lr, #0
   13c2c:	0a000006 	beq	13c4c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf4>
   13c30:	e5d35005 	ldrb	r5, [r3, #5]
   13c34:	e3a0e009 	mov	lr, #9
   13c38:	e2455001 	sub	r5, r5, #1
   13c3c:	e16f5f15 	clz	r5, r5
   13c40:	e1a052a5 	lsr	r5, r5, #5
   13c44:	e150000e 	cmp	r0, lr
   13c48:	0affffea 	beq	13bf8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xa0>
   13c4c:	e5843018 	str	r3, [r4, #24]
   13c50:	eaffffd6 	b	13bb0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x58>
   13c54:	e35e0000 	cmp	lr, #0
   13c58:	1afffffb 	bne	13c4c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf4>
   13c5c:	e3a0e009 	mov	lr, #9
   13c60:	eafffff7 	b	13c44 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xec>
   13c64:	e31e00fd 	tst	lr, #253	; 0xfd
   13c68:	0afffff7 	beq	13c4c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf4>
   13c6c:	e3550000 	cmp	r5, #0
   13c70:	03a0e007 	moveq	lr, #7
   13c74:	13a0e009 	movne	lr, #9
   13c78:	eafffff1 	b	13c44 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xec>
   13c7c:	e30c1408 	movw	r1, #50184	; 0xc408
   13c80:	e30c041c 	movw	r0, #50204	; 0xc41c
   13c84:	e3401002 	movt	r1, #2
   13c88:	e3400002 	movt	r0, #2
   13c8c:	e3a02024 	mov	r2, #36	; 0x24
   13c90:	eb0043c1 	bl	24b9c <assertion_failed>
   13c94:	e5943004 	ldr	r3, [r4, #4]
   13c98:	eaffffbd 	b	13b94 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x3c>
   13c9c:	e153000c 	cmp	r3, ip
   13ca0:	1affffe9 	bne	13c4c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf4>
   13ca4:	e3a03001 	mov	r3, #1
   13ca8:	e5843008 	str	r3, [r4, #8]
   13cac:	eaffffbf 	b	13bb0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x58>

00013cb0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   13cb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13cb4:	e2515000 	subs	r5, r1, #0
   13cb8:	e1a04000 	mov	r4, r0
   13cbc:	0a00000c 	beq	13cf4 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x44>
   13cc0:	e2851010 	add	r1, r5, #16
   13cc4:	e5957000 	ldr	r7, [r5]
   13cc8:	e9954040 	ldmib	r5, {r6, lr}
   13ccc:	e1a00004 	mov	r0, r4
   13cd0:	e891000e 	ldm	r1, {r1, r2, r3}
   13cd4:	e595c00c 	ldr	ip, [r5, #12]
   13cd8:	e5847000 	str	r7, [r4]
   13cdc:	e9844040 	stmib	r4, {r6, lr}
   13ce0:	e584c00c 	str	ip, [r4, #12]
   13ce4:	e5841010 	str	r1, [r4, #16]
   13ce8:	e5842014 	str	r2, [r4, #20]
   13cec:	e5843018 	str	r3, [r4, #24]
   13cf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13cf4:	e30c1408 	movw	r1, #50184	; 0xc408
   13cf8:	e30c042c 	movw	r0, #50220	; 0xc42c
   13cfc:	e3401002 	movt	r1, #2
   13d00:	e3400002 	movt	r0, #2
   13d04:	e3a02082 	mov	r2, #130	; 0x82
   13d08:	eb0043a3 	bl	24b9c <assertion_failed>
   13d0c:	eaffffeb 	b	13cc0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x10>

00013d10 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   13d10:	e12fff1e 	bx	lr

00013d14 <CUSBConfigurationParser::IsValid() const>:
   13d14:	e5900008 	ldr	r0, [r0, #8]
   13d18:	e12fff1e 	bx	lr

00013d1c <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   13d1c:	e5903008 	ldr	r3, [r0, #8]
   13d20:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d24:	e3530000 	cmp	r3, #0
   13d28:	e1a06000 	mov	r6, r0
   13d2c:	e1a07001 	mov	r7, r1
   13d30:	0a00002a 	beq	13de0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xc4>
   13d34:	e5963010 	ldr	r3, [r6, #16]
   13d38:	e596200c 	ldr	r2, [r6, #12]
   13d3c:	e1530002 	cmp	r3, r2
   13d40:	2a00001d 	bcs	13dbc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa0>
   13d44:	e247a005 	sub	sl, r7, #5
   13d48:	e30c9408 	movw	r9, #50184	; 0xc408
   13d4c:	e16faf1a 	clz	sl, sl
   13d50:	e30c843c 	movw	r8, #50236	; 0xc43c
   13d54:	e3409002 	movt	r9, #2
   13d58:	e3408002 	movt	r8, #2
   13d5c:	e1a0a2aa 	lsr	sl, sl, #5
   13d60:	ea00000b 	b	13d94 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>
   13d64:	e3550004 	cmp	r5, #4
   13d68:	13a02000 	movne	r2, #0
   13d6c:	020a2001 	andeq	r2, sl, #1
   13d70:	e1a03004 	mov	r3, r4
   13d74:	e3520000 	cmp	r2, #0
   13d78:	1a00000f 	bne	13dbc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa0>
   13d7c:	e1550007 	cmp	r5, r7
   13d80:	0a000010 	beq	13dc8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xac>
   13d84:	e596200c 	ldr	r2, [r6, #12]
   13d88:	e5864010 	str	r4, [r6, #16]
   13d8c:	e1520004 	cmp	r2, r4
   13d90:	9a000009 	bls	13dbc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa0>
   13d94:	e5d34000 	ldrb	r4, [r3]
   13d98:	e5d35001 	ldrb	r5, [r3, #1]
   13d9c:	e0834004 	add	r4, r3, r4
   13da0:	e1540002 	cmp	r4, r2
   13da4:	9affffee 	bls	13d64 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x48>
   13da8:	e3a020a9 	mov	r2, #169	; 0xa9
   13dac:	e1a01009 	mov	r1, r9
   13db0:	e1a00008 	mov	r0, r8
   13db4:	eb004378 	bl	24b9c <assertion_failed>
   13db8:	eaffffe9 	b	13d64 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x48>
   13dbc:	e3a00000 	mov	r0, #0
   13dc0:	e5860014 	str	r0, [r6, #20]
   13dc4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13dc8:	e5960010 	ldr	r0, [r6, #16]
   13dcc:	e5864010 	str	r4, [r6, #16]
   13dd0:	e3500000 	cmp	r0, #0
   13dd4:	e5860014 	str	r0, [r6, #20]
   13dd8:	15860018 	strne	r0, [r6, #24]
   13ddc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13de0:	e30c1408 	movw	r1, #50184	; 0xc408
   13de4:	e30a0e98 	movw	r0, #44696	; 0xae98
   13de8:	e3401002 	movt	r1, #2
   13dec:	e3400002 	movt	r0, #2
   13df0:	e3a0209f 	mov	r2, #159	; 0x9f
   13df4:	eb004368 	bl	24b9c <assertion_failed>
   13df8:	eaffffcd 	b	13d34 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x18>

00013dfc <CUSBConfigurationParser::GetCurrentDescriptor()>:
   13dfc:	e5903008 	ldr	r3, [r0, #8]
   13e00:	e92d4010 	push	{r4, lr}
   13e04:	e3530000 	cmp	r3, #0
   13e08:	e1a04000 	mov	r4, r0
   13e0c:	0a00000a 	beq	13e3c <CUSBConfigurationParser::GetCurrentDescriptor()+0x40>
   13e10:	e5940014 	ldr	r0, [r4, #20]
   13e14:	e3500000 	cmp	r0, #0
   13e18:	18bd8010 	popne	{r4, pc}
   13e1c:	e3a020c8 	mov	r2, #200	; 0xc8
   13e20:	e30c1408 	movw	r1, #50184	; 0xc408
   13e24:	e30c0458 	movw	r0, #50264	; 0xc458
   13e28:	e3401002 	movt	r1, #2
   13e2c:	e3400002 	movt	r0, #2
   13e30:	eb004359 	bl	24b9c <assertion_failed>
   13e34:	e5940014 	ldr	r0, [r4, #20]
   13e38:	e8bd8010 	pop	{r4, pc}
   13e3c:	e30c1408 	movw	r1, #50184	; 0xc408
   13e40:	e30a0e98 	movw	r0, #44696	; 0xae98
   13e44:	e3401002 	movt	r1, #2
   13e48:	e3400002 	movt	r0, #2
   13e4c:	e3a020c7 	mov	r2, #199	; 0xc7
   13e50:	eb004351 	bl	24b9c <assertion_failed>
   13e54:	eaffffed 	b	13e10 <CUSBConfigurationParser::GetCurrentDescriptor()+0x14>

00013e58 <CUSBConfigurationParser::Error(char const*) const>:
   13e58:	e92d4030 	push	{r4, r5, lr}
   13e5c:	e2515000 	subs	r5, r1, #0
   13e60:	e24dd00c 	sub	sp, sp, #12
   13e64:	e1a04000 	mov	r4, r0
   13e68:	0a00000e 	beq	13ea8 <CUSBConfigurationParser::Error(char const*) const+0x50>
   13e6c:	eb0044cf 	bl	251b0 <CLogger::Get()>
   13e70:	e5941000 	ldr	r1, [r4]
   13e74:	e594c018 	ldr	ip, [r4, #24]
   13e78:	e3a02001 	mov	r2, #1
   13e7c:	e30c3474 	movw	r3, #50292	; 0xc474
   13e80:	e3403002 	movt	r3, #2
   13e84:	e04cc001 	sub	ip, ip, r1
   13e88:	e1a01005 	mov	r1, r5
   13e8c:	e58dc000 	str	ip, [sp]
   13e90:	eb0045a2 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13e94:	e1a02005 	mov	r2, r5
   13e98:	e8940003 	ldm	r4, {r0, r1}
   13e9c:	e28dd00c 	add	sp, sp, #12
   13ea0:	e8bd4030 	pop	{r4, r5, lr}
   13ea4:	ea00438a 	b	24cd4 <debug_hexdump(void const*, unsigned int, char const*)>
   13ea8:	e30c1408 	movw	r1, #50184	; 0xc408
   13eac:	e30c005c 	movw	r0, #49244	; 0xc05c
   13eb0:	e3401002 	movt	r1, #2
   13eb4:	e3400002 	movt	r0, #2
   13eb8:	e3a020cf 	mov	r2, #207	; 0xcf
   13ebc:	eb004336 	bl	24b9c <assertion_failed>
   13ec0:	eaffffe9 	b	13e6c <CUSBConfigurationParser::Error(char const*) const+0x14>

00013ec4 <CUSBString::CUSBString(CUSBDevice*)>:
   13ec4:	e92d4070 	push	{r4, r5, r6, lr}
   13ec8:	e1a04000 	mov	r4, r0
   13ecc:	e3a03000 	mov	r3, #0
   13ed0:	e5801000 	str	r1, [r0]
   13ed4:	e5843004 	str	r3, [r4, #4]
   13ed8:	e3a00010 	mov	r0, #16
   13edc:	eb003822 	bl	21f6c <operator new(unsigned int)>
   13ee0:	e1a05000 	mov	r5, r0
   13ee4:	eb004838 	bl	25fcc <CString::CString()>
   13ee8:	e5943000 	ldr	r3, [r4]
   13eec:	e5845008 	str	r5, [r4, #8]
   13ef0:	e3530000 	cmp	r3, #0
   13ef4:	0a000001 	beq	13f00 <CUSBString::CUSBString(CUSBDevice*)+0x3c>
   13ef8:	e1a00004 	mov	r0, r4
   13efc:	e8bd8070 	pop	{r4, r5, r6, pc}
   13f00:	e30c14a4 	movw	r1, #50340	; 0xc4a4
   13f04:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   13f08:	e3401002 	movt	r1, #2
   13f0c:	e3400002 	movt	r0, #2
   13f10:	e3a02023 	mov	r2, #35	; 0x23
   13f14:	eb004320 	bl	24b9c <assertion_failed>
   13f18:	e5943008 	ldr	r3, [r4, #8]
   13f1c:	e3530000 	cmp	r3, #0
   13f20:	1afffff4 	bne	13ef8 <CUSBString::CUSBString(CUSBDevice*)+0x34>
   13f24:	e3a02024 	mov	r2, #36	; 0x24
   13f28:	e30c14a4 	movw	r1, #50340	; 0xc4a4
   13f2c:	e30c04b4 	movw	r0, #50356	; 0xc4b4
   13f30:	e3401002 	movt	r1, #2
   13f34:	e3400002 	movt	r0, #2
   13f38:	eb004317 	bl	24b9c <assertion_failed>
   13f3c:	e1a00004 	mov	r0, r4
   13f40:	e8bd8070 	pop	{r4, r5, r6, pc}

00013f44 <CUSBString::CUSBString(CUSBString*)>:
   13f44:	e92d4070 	push	{r4, r5, r6, lr}
   13f48:	e1a04000 	mov	r4, r0
   13f4c:	e3a03000 	mov	r3, #0
   13f50:	e3a00010 	mov	r0, #16
   13f54:	e5843004 	str	r3, [r4, #4]
   13f58:	e1a05001 	mov	r5, r1
   13f5c:	eb003802 	bl	21f6c <operator new(unsigned int)>
   13f60:	e1a06000 	mov	r6, r0
   13f64:	eb004818 	bl	25fcc <CString::CString()>
   13f68:	e3550000 	cmp	r5, #0
   13f6c:	e5846008 	str	r6, [r4, #8]
   13f70:	0a00001a 	beq	13fe0 <CUSBString::CUSBString(CUSBString*)+0x9c>
   13f74:	e895000c 	ldm	r5, {r2, r3}
   13f78:	e3530000 	cmp	r3, #0
   13f7c:	e5842000 	str	r2, [r4]
   13f80:	0a000005 	beq	13f9c <CUSBString::CUSBString(CUSBString*)+0x58>
   13f84:	e5d30000 	ldrb	r0, [r3]
   13f88:	eb0037f8 	bl	21f70 <operator new[](unsigned int)>
   13f8c:	e5840004 	str	r0, [r4, #4]
   13f90:	e5951004 	ldr	r1, [r5, #4]
   13f94:	e5d12000 	ldrb	r2, [r1]
   13f98:	eb003c7f 	bl	2319c <memcpy>
   13f9c:	e5943008 	ldr	r3, [r4, #8]
   13fa0:	e3530000 	cmp	r3, #0
   13fa4:	0a000014 	beq	13ffc <CUSBString::CUSBString(CUSBString*)+0xb8>
   13fa8:	e5953008 	ldr	r3, [r5, #8]
   13fac:	e3530000 	cmp	r3, #0
   13fb0:	0a000002 	beq	13fc0 <CUSBString::CUSBString(CUSBString*)+0x7c>
   13fb4:	e5843008 	str	r3, [r4, #8]
   13fb8:	e1a00004 	mov	r0, r4
   13fbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   13fc0:	e30c14a4 	movw	r1, #50340	; 0xc4a4
   13fc4:	e30c04c4 	movw	r0, #50372	; 0xc4c4
   13fc8:	e3401002 	movt	r1, #2
   13fcc:	e3400002 	movt	r0, #2
   13fd0:	e3a02036 	mov	r2, #54	; 0x36
   13fd4:	eb0042f0 	bl	24b9c <assertion_failed>
   13fd8:	e5953008 	ldr	r3, [r5, #8]
   13fdc:	eafffff4 	b	13fb4 <CUSBString::CUSBString(CUSBString*)+0x70>
   13fe0:	e30c14a4 	movw	r1, #50340	; 0xc4a4
   13fe4:	e30b05cc 	movw	r0, #46540	; 0xb5cc
   13fe8:	e3401002 	movt	r1, #2
   13fec:	e3400002 	movt	r0, #2
   13ff0:	e3a0202b 	mov	r2, #43	; 0x2b
   13ff4:	eb0042e8 	bl	24b9c <assertion_failed>
   13ff8:	eaffffdd 	b	13f74 <CUSBString::CUSBString(CUSBString*)+0x30>
   13ffc:	e30c14a4 	movw	r1, #50340	; 0xc4a4
   14000:	e30c04b4 	movw	r0, #50356	; 0xc4b4
   14004:	e3401002 	movt	r1, #2
   14008:	e3400002 	movt	r0, #2
   1400c:	e3a02035 	mov	r2, #53	; 0x35
   14010:	eb0042e1 	bl	24b9c <assertion_failed>
   14014:	eaffffe3 	b	13fa8 <CUSBString::CUSBString(CUSBString*)+0x64>

00014018 <CUSBString::~CUSBString()>:
   14018:	e92d4010 	push	{r4, lr}
   1401c:	e1a04000 	mov	r4, r0
   14020:	e5900008 	ldr	r0, [r0, #8]
   14024:	e3500000 	cmp	r0, #0
   14028:	0a000002 	beq	14038 <CUSBString::~CUSBString()+0x20>
   1402c:	e5903000 	ldr	r3, [r0]
   14030:	e5933004 	ldr	r3, [r3, #4]
   14034:	e12fff33 	blx	r3
   14038:	e5940004 	ldr	r0, [r4, #4]
   1403c:	e3a03000 	mov	r3, #0
   14040:	e5843008 	str	r3, [r4, #8]
   14044:	e1500003 	cmp	r0, r3
   14048:	0a000000 	beq	14050 <CUSBString::~CUSBString()+0x38>
   1404c:	eb0037c9 	bl	21f78 <operator delete[](void*)>
   14050:	e1a00004 	mov	r0, r4
   14054:	e8bd8010 	pop	{r4, pc}

00014058 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   14058:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1405c:	e2516000 	subs	r6, r1, #0
   14060:	e28db020 	add	fp, sp, #32
   14064:	e1a04000 	mov	r4, r0
   14068:	e24dd01c 	sub	sp, sp, #28
   1406c:	e1a07002 	mov	r7, r2
   14070:	0a000053 	beq	141c4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x16c>
   14074:	e5940004 	ldr	r0, [r4, #4]
   14078:	e3500000 	cmp	r0, #0
   1407c:	0a000000 	beq	14084 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   14080:	eb0037bc 	bl	21f78 <operator delete[](void*)>
   14084:	e3a00004 	mov	r0, #4
   14088:	eb0037b8 	bl	21f70 <operator new[](unsigned int)>
   1408c:	e5840004 	str	r0, [r4, #4]
   14090:	e5940000 	ldr	r0, [r4]
   14094:	e3500000 	cmp	r0, #0
   14098:	0a000050 	beq	141e0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x188>
   1409c:	ebffe466 	bl	d23c <CUSBDevice::GetHost() const>
   140a0:	e3a08080 	mov	r8, #128	; 0x80
   140a4:	e1a05000 	mov	r5, r0
   140a8:	e5940000 	ldr	r0, [r4]
   140ac:	ebffe452 	bl	d1fc <CUSBDevice::GetEndpoint0() const>
   140b0:	e5942004 	ldr	r2, [r4, #4]
   140b4:	e3a01004 	mov	r1, #4
   140b8:	e58d700c 	str	r7, [sp, #12]
   140bc:	e58d1004 	str	r1, [sp, #4]
   140c0:	e1a03006 	mov	r3, r6
   140c4:	e58d2000 	str	r2, [sp]
   140c8:	e3a02003 	mov	r2, #3
   140cc:	e58d8008 	str	r8, [sp, #8]
   140d0:	e1a01000 	mov	r1, r0
   140d4:	e1a00005 	mov	r0, r5
   140d8:	ebffe84e 	bl	e218 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   140dc:	e3500000 	cmp	r0, #0
   140e0:	ba000009 	blt	1410c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   140e4:	e5940004 	ldr	r0, [r4, #4]
   140e8:	e5d05000 	ldrb	r5, [r0]
   140ec:	e3550001 	cmp	r5, #1
   140f0:	e1a03005 	mov	r3, r5
   140f4:	da000004 	ble	1410c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   140f8:	e2159001 	ands	r9, r5, #1
   140fc:	1a000002 	bne	1410c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   14100:	e5d02001 	ldrb	r2, [r0, #1]
   14104:	e3520003 	cmp	r2, #3
   14108:	0a000002 	beq	14118 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xc0>
   1410c:	e3a00000 	mov	r0, #0
   14110:	e24bd020 	sub	sp, fp, #32
   14114:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14118:	e3550004 	cmp	r5, #4
   1411c:	ca000037 	bgt	14200 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1a8>
   14120:	e3550002 	cmp	r5, #2
   14124:	0a00006a 	beq	142d4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x27c>
   14128:	e2435002 	sub	r5, r3, #2
   1412c:	e0855fa5 	add	r5, r5, r5, lsr #31
   14130:	e1a060c5 	asr	r6, r5, #1
   14134:	e356007e 	cmp	r6, #126	; 0x7e
   14138:	8a000059 	bhi	142a4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x24c>
   1413c:	e2863008 	add	r3, r6, #8
   14140:	e3560000 	cmp	r6, #0
   14144:	e3c33007 	bic	r3, r3, #7
   14148:	e04dd003 	sub	sp, sp, r3
   1414c:	e28d7010 	add	r7, sp, #16
   14150:	0a00000a 	beq	14180 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x128>
   14154:	e247c001 	sub	ip, r7, #1
   14158:	e3a02000 	mov	r2, #0
   1415c:	e0803082 	add	r3, r0, r2, lsl #1
   14160:	e2822001 	add	r2, r2, #1
   14164:	e1d330b2 	ldrh	r3, [r3, #2]
   14168:	e243e020 	sub	lr, r3, #32
   1416c:	e35e005e 	cmp	lr, #94	; 0x5e
   14170:	83a0305f 	movhi	r3, #95	; 0x5f
   14174:	e1560002 	cmp	r6, r2
   14178:	e5ec3001 	strb	r3, [ip, #1]!
   1417c:	1afffff6 	bne	1415c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x104>
   14180:	e5940008 	ldr	r0, [r4, #8]
   14184:	e3a03000 	mov	r3, #0
   14188:	e7c730c5 	strb	r3, [r7, r5, asr #1]
   1418c:	e1500003 	cmp	r0, r3
   14190:	0a000002 	beq	141a0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x148>
   14194:	e5903000 	ldr	r3, [r0]
   14198:	e5933004 	ldr	r3, [r3, #4]
   1419c:	e12fff33 	blx	r3
   141a0:	e3a00010 	mov	r0, #16
   141a4:	eb003770 	bl	21f6c <operator new(unsigned int)>
   141a8:	e1a01007 	mov	r1, r7
   141ac:	e1a05000 	mov	r5, r0
   141b0:	eb00478c 	bl	25fe8 <CString::CString(char const*)>
   141b4:	e3a00001 	mov	r0, #1
   141b8:	e5845008 	str	r5, [r4, #8]
   141bc:	e24bd020 	sub	sp, fp, #32
   141c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141c4:	e30c14a4 	movw	r1, #50340	; 0xc4a4
   141c8:	e30c04dc 	movw	r0, #50396	; 0xc4dc
   141cc:	e3401002 	movt	r1, #2
   141d0:	e3400002 	movt	r0, #2
   141d4:	e3a02047 	mov	r2, #71	; 0x47
   141d8:	eb00426f 	bl	24b9c <assertion_failed>
   141dc:	eaffffa4 	b	14074 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1c>
   141e0:	e30c14a4 	movw	r1, #50340	; 0xc4a4
   141e4:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   141e8:	e3401002 	movt	r1, #2
   141ec:	e3400002 	movt	r0, #2
   141f0:	e3a0204d 	mov	r2, #77	; 0x4d
   141f4:	eb004268 	bl	24b9c <assertion_failed>
   141f8:	e5940000 	ldr	r0, [r4]
   141fc:	eaffffa6 	b	1409c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x44>
   14200:	e3a01002 	mov	r1, #2
   14204:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   14208:	eb00375b 	bl	21f7c <operator delete(void*, unsigned int)>
   1420c:	e1a00005 	mov	r0, r5
   14210:	eb003756 	bl	21f70 <operator new[](unsigned int)>
   14214:	e5840004 	str	r0, [r4, #4]
   14218:	e5940000 	ldr	r0, [r4]
   1421c:	ebffe406 	bl	d23c <CUSBDevice::GetHost() const>
   14220:	e1a0a000 	mov	sl, r0
   14224:	e5940000 	ldr	r0, [r4]
   14228:	ebffe3f3 	bl	d1fc <CUSBDevice::GetEndpoint0() const>
   1422c:	e5941004 	ldr	r1, [r4, #4]
   14230:	e1a03006 	mov	r3, r6
   14234:	e58d700c 	str	r7, [sp, #12]
   14238:	e58d8008 	str	r8, [sp, #8]
   1423c:	e88d0022 	stm	sp, {r1, r5}
   14240:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   14244:	e1a01000 	mov	r1, r0
   14248:	e1a0000a 	mov	r0, sl
   1424c:	ebffe7f1 	bl	e218 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   14250:	e1550000 	cmp	r5, r0
   14254:	1affffac 	bne	1410c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   14258:	e5940004 	ldr	r0, [r4, #4]
   1425c:	e5d03000 	ldrb	r3, [r0]
   14260:	e1530005 	cmp	r3, r5
   14264:	1affffa8 	bne	1410c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   14268:	e5d03001 	ldrb	r3, [r0, #1]
   1426c:	e3530003 	cmp	r3, #3
   14270:	1affffa5 	bne	1410c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   14274:	e3590000 	cmp	r9, #0
   14278:	01a03005 	moveq	r3, r5
   1427c:	0affffa9 	beq	14128 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd0>
   14280:	e30c14a4 	movw	r1, #50340	; 0xc4a4
   14284:	e30c0504 	movw	r0, #50436	; 0xc504
   14288:	e3401002 	movt	r1, #2
   1428c:	e3400002 	movt	r0, #2
   14290:	e3a02076 	mov	r2, #118	; 0x76
   14294:	eb004240 	bl	24b9c <assertion_failed>
   14298:	e5940004 	ldr	r0, [r4, #4]
   1429c:	e5d03000 	ldrb	r3, [r0]
   142a0:	eaffffa0 	b	14128 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd0>
   142a4:	e30c14a4 	movw	r1, #50340	; 0xc4a4
   142a8:	e30c0528 	movw	r0, #50472	; 0xc528
   142ac:	e3401002 	movt	r1, #2
   142b0:	e3400002 	movt	r0, #2
   142b4:	e3a02079 	mov	r2, #121	; 0x79
   142b8:	eb004237 	bl	24b9c <assertion_failed>
   142bc:	e2863008 	add	r3, r6, #8
   142c0:	e3c33007 	bic	r3, r3, #7
   142c4:	e5940004 	ldr	r0, [r4, #4]
   142c8:	e04dd003 	sub	sp, sp, r3
   142cc:	e28d7010 	add	r7, sp, #16
   142d0:	eaffff9f 	b	14154 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xfc>
   142d4:	e30c14a4 	movw	r1, #50340	; 0xc4a4
   142d8:	e30c04e8 	movw	r0, #50408	; 0xc4e8
   142dc:	e3401002 	movt	r1, #2
   142e0:	e3400002 	movt	r0, #2
   142e4:	e3a02075 	mov	r2, #117	; 0x75
   142e8:	eb00422b 	bl	24b9c <assertion_failed>
   142ec:	e5940004 	ldr	r0, [r4, #4]
   142f0:	e5d05000 	ldrb	r5, [r0]
   142f4:	e2059001 	and	r9, r5, #1
   142f8:	eaffffdd 	b	14274 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x21c>

000142fc <CUSBString::Get() const>:
   142fc:	e5900008 	ldr	r0, [r0, #8]
   14300:	ea004748 	b	26028 <CString::operator char const*() const>

00014304 <CUSBString::GetLanguageID()>:
   14304:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14308:	e1a05000 	mov	r5, r0
   1430c:	e24dd010 	sub	sp, sp, #16
   14310:	e3a00004 	mov	r0, #4
   14314:	eb003715 	bl	21f70 <operator new[](unsigned int)>
   14318:	e1a04000 	mov	r4, r0
   1431c:	e5950000 	ldr	r0, [r5]
   14320:	e3500000 	cmp	r0, #0
   14324:	0a000033 	beq	143f8 <CUSBString::GetLanguageID()+0xf4>
   14328:	ebffe3c3 	bl	d23c <CUSBDevice::GetHost() const>
   1432c:	e3a07080 	mov	r7, #128	; 0x80
   14330:	e1a06000 	mov	r6, r0
   14334:	e5950000 	ldr	r0, [r5]
   14338:	ebffe3af 	bl	d1fc <CUSBDevice::GetEndpoint0() const>
   1433c:	e3a02000 	mov	r2, #0
   14340:	e1a03002 	mov	r3, r2
   14344:	e58d200c 	str	r2, [sp, #12]
   14348:	e3a01004 	mov	r1, #4
   1434c:	e58d4000 	str	r4, [sp]
   14350:	e58d1004 	str	r1, [sp, #4]
   14354:	e3a02003 	mov	r2, #3
   14358:	e58d7008 	str	r7, [sp, #8]
   1435c:	e1a01000 	mov	r1, r0
   14360:	e1a00006 	mov	r0, r6
   14364:	ebffe7ab 	bl	e218 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   14368:	e3500000 	cmp	r0, #0
   1436c:	ba000002 	blt	1437c <CUSBString::GetLanguageID()+0x78>
   14370:	e5d46000 	ldrb	r6, [r4]
   14374:	e3560003 	cmp	r6, #3
   14378:	ca000005 	bgt	14394 <CUSBString::GetLanguageID()+0x90>
   1437c:	e1a00004 	mov	r0, r4
   14380:	e3005409 	movw	r5, #1033	; 0x409
   14384:	eb0036fb 	bl	21f78 <operator delete[](void*)>
   14388:	e1a00005 	mov	r0, r5
   1438c:	e28dd010 	add	sp, sp, #16
   14390:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14394:	e2168001 	ands	r8, r6, #1
   14398:	1afffff7 	bne	1437c <CUSBString::GetLanguageID()+0x78>
   1439c:	e5d49001 	ldrb	r9, [r4, #1]
   143a0:	e3590003 	cmp	r9, #3
   143a4:	1afffff4 	bne	1437c <CUSBString::GetLanguageID()+0x78>
   143a8:	e3560004 	cmp	r6, #4
   143ac:	1a000019 	bne	14418 <CUSBString::GetLanguageID()+0x114>
   143b0:	e1d450b2 	ldrh	r5, [r4, #2]
   143b4:	e2466002 	sub	r6, r6, #2
   143b8:	e3001409 	movw	r1, #1033	; 0x409
   143bc:	e1550001 	cmp	r5, r1
   143c0:	e1a060c6 	asr	r6, r6, #1
   143c4:	0affffec 	beq	1437c <CUSBString::GetLanguageID()+0x78>
   143c8:	e3a03000 	mov	r3, #0
   143cc:	ea000002 	b	143dc <CUSBString::GetLanguageID()+0xd8>
   143d0:	e1d220b2 	ldrh	r2, [r2, #2]
   143d4:	e1520001 	cmp	r2, r1
   143d8:	0affffe7 	beq	1437c <CUSBString::GetLanguageID()+0x78>
   143dc:	e2833001 	add	r3, r3, #1
   143e0:	e1560003 	cmp	r6, r3
   143e4:	e0842083 	add	r2, r4, r3, lsl #1
   143e8:	1afffff8 	bne	143d0 <CUSBString::GetLanguageID()+0xcc>
   143ec:	e1a00004 	mov	r0, r4
   143f0:	eb0036e0 	bl	21f78 <operator delete[](void*)>
   143f4:	eaffffe3 	b	14388 <CUSBString::GetLanguageID()+0x84>
   143f8:	e30c14a4 	movw	r1, #50340	; 0xc4a4
   143fc:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   14400:	e3401002 	movt	r1, #2
   14404:	e3400002 	movt	r0, #2
   14408:	e3a0209a 	mov	r2, #154	; 0x9a
   1440c:	eb0041e2 	bl	24b9c <assertion_failed>
   14410:	e5950000 	ldr	r0, [r5]
   14414:	eaffffc3 	b	14328 <CUSBString::GetLanguageID()+0x24>
   14418:	e1a00004 	mov	r0, r4
   1441c:	eb0036d5 	bl	21f78 <operator delete[](void*)>
   14420:	e1a00006 	mov	r0, r6
   14424:	eb0036d1 	bl	21f70 <operator new[](unsigned int)>
   14428:	e1a04000 	mov	r4, r0
   1442c:	e5950000 	ldr	r0, [r5]
   14430:	ebffe381 	bl	d23c <CUSBDevice::GetHost() const>
   14434:	e1a0a000 	mov	sl, r0
   14438:	e5950000 	ldr	r0, [r5]
   1443c:	ebffe36e 	bl	d1fc <CUSBDevice::GetEndpoint0() const>
   14440:	e58d4000 	str	r4, [sp]
   14444:	e58d800c 	str	r8, [sp, #12]
   14448:	e1a03008 	mov	r3, r8
   1444c:	e58d7008 	str	r7, [sp, #8]
   14450:	e1a02009 	mov	r2, r9
   14454:	e58d6004 	str	r6, [sp, #4]
   14458:	e1a01000 	mov	r1, r0
   1445c:	e1a0000a 	mov	r0, sl
   14460:	ebffe76c 	bl	e218 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   14464:	e1560000 	cmp	r6, r0
   14468:	1affffc3 	bne	1437c <CUSBString::GetLanguageID()+0x78>
   1446c:	e5d43000 	ldrb	r3, [r4]
   14470:	e1530006 	cmp	r3, r6
   14474:	1affffc0 	bne	1437c <CUSBString::GetLanguageID()+0x78>
   14478:	e5d43001 	ldrb	r3, [r4, #1]
   1447c:	e3530003 	cmp	r3, #3
   14480:	1affffbd 	bne	1437c <CUSBString::GetLanguageID()+0x78>
   14484:	eaffffc9 	b	143b0 <CUSBString::GetLanguageID()+0xac>

00014488 <CSMSC951xDevice::GetMACAddress() const>:
   14488:	e2800018 	add	r0, r0, #24
   1448c:	e12fff1e 	bx	lr

00014490 <CSMSC951xDevice::~CSMSC951xDevice()>:
   14490:	e59f3084 	ldr	r3, [pc, #132]	; 1451c <CSMSC951xDevice::~CSMSC951xDevice()+0x8c>
   14494:	e3a01001 	mov	r1, #1
   14498:	e92d4070 	push	{r4, r5, r6, lr}
   1449c:	e1a04000 	mov	r4, r0
   144a0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   144a4:	e5843000 	str	r3, [r4]
   144a8:	eb0036b3 	bl	21f7c <operator delete(void*, unsigned int)>
   144ac:	e5945014 	ldr	r5, [r4, #20]
   144b0:	e3a03000 	mov	r3, #0
   144b4:	e5843024 	str	r3, [r4, #36]	; 0x24
   144b8:	e1550003 	cmp	r5, r3
   144bc:	0a000004 	beq	144d4 <CSMSC951xDevice::~CSMSC951xDevice()+0x44>
   144c0:	e1a00005 	mov	r0, r5
   144c4:	ebffe6a2 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
   144c8:	e1a00005 	mov	r0, r5
   144cc:	e3a01018 	mov	r1, #24
   144d0:	eb0036a9 	bl	21f7c <operator delete(void*, unsigned int)>
   144d4:	e5945010 	ldr	r5, [r4, #16]
   144d8:	e3a03000 	mov	r3, #0
   144dc:	e5843014 	str	r3, [r4, #20]
   144e0:	e1550003 	cmp	r5, r3
   144e4:	0a000004 	beq	144fc <CSMSC951xDevice::~CSMSC951xDevice()+0x6c>
   144e8:	e1a00005 	mov	r0, r5
   144ec:	ebffe698 	bl	df54 <CUSBEndpoint::~CUSBEndpoint()>
   144f0:	e1a00005 	mov	r0, r5
   144f4:	e3a01018 	mov	r1, #24
   144f8:	eb00369f 	bl	21f7c <operator delete(void*, unsigned int)>
   144fc:	e3a03000 	mov	r3, #0
   14500:	e2840018 	add	r0, r4, #24
   14504:	e5843010 	str	r3, [r4, #16]
   14508:	eb000225 	bl	14da4 <CMACAddress::~CMACAddress()>
   1450c:	e1a00004 	mov	r0, r4
   14510:	eb0002dc 	bl	15088 <CNetDevice::~CNetDevice()>
   14514:	e1a00004 	mov	r0, r4
   14518:	e8bd8070 	pop	{r4, r5, r6, pc}
   1451c:	0002c548 	.word	0x0002c548

00014520 <CSMSC951xDevice::~CSMSC951xDevice()>:
   14520:	e92d4010 	push	{r4, lr}
   14524:	e1a04000 	mov	r4, r0
   14528:	ebffffd8 	bl	14490 <CSMSC951xDevice::~CSMSC951xDevice()>
   1452c:	e1a00004 	mov	r0, r4
   14530:	e3a01028 	mov	r1, #40	; 0x28
   14534:	eb003690 	bl	21f7c <operator delete(void*, unsigned int)>
   14538:	e1a00004 	mov	r0, r4
   1453c:	e8bd8010 	pop	{r4, pc}

00014540 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   14540:	e5903010 	ldr	r3, [r0, #16]
   14544:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14548:	e3530000 	cmp	r3, #0
   1454c:	e24dd034 	sub	sp, sp, #52	; 0x34
   14550:	e1a04000 	mov	r4, r0
   14554:	e1a06001 	mov	r6, r1
   14558:	e1a07002 	mov	r7, r2
   1455c:	0a000036 	beq	1463c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xfc>
   14560:	e3560000 	cmp	r6, #0
   14564:	0a00003b 	beq	14658 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x118>
   14568:	e5941010 	ldr	r1, [r4, #16]
   1456c:	e3a03d19 	mov	r3, #1600	; 0x640
   14570:	e1a02006 	mov	r2, r6
   14574:	e3a05000 	mov	r5, #0
   14578:	e28d0008 	add	r0, sp, #8
   1457c:	e58d5000 	str	r5, [sp]
   14580:	ebffe76f 	bl	e344 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   14584:	e1a00004 	mov	r0, r4
   14588:	ebfff6db 	bl	120fc <CUSBFunction::GetHost() const>
   1458c:	e28d1008 	add	r1, sp, #8
   14590:	e5903000 	ldr	r3, [r0]
   14594:	e5933008 	ldr	r3, [r3, #8]
   14598:	e12fff33 	blx	r3
   1459c:	e1500005 	cmp	r0, r5
   145a0:	1a000005 	bne	145bc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x7c>
   145a4:	e3a05000 	mov	r5, #0
   145a8:	e28d0008 	add	r0, sp, #8
   145ac:	ebffe78a 	bl	e3dc <CUSBRequest::~CUSBRequest()>
   145b0:	e1a00005 	mov	r0, r5
   145b4:	e28dd034 	add	sp, sp, #52	; 0x34
   145b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   145bc:	e28d0008 	add	r0, sp, #8
   145c0:	ebffe79c 	bl	e438 <CUSBRequest::GetResultLength() const>
   145c4:	e3500003 	cmp	r0, #3
   145c8:	9afffff5 	bls	145a4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x64>
   145cc:	e5964000 	ldr	r4, [r6]
   145d0:	e30930de 	movw	r3, #37086	; 0x90de
   145d4:	e3443000 	movt	r3, #16384	; 0x4000
   145d8:	e0033004 	and	r3, r3, r4
   145dc:	e3530000 	cmp	r3, #0
   145e0:	1a00002b 	bne	14694 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x154>
   145e4:	e7ed4854 	ubfx	r4, r4, #16, #14
   145e8:	e2400004 	sub	r0, r0, #4
   145ec:	e1540000 	cmp	r4, r0
   145f0:	0a000005 	beq	1460c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xcc>
   145f4:	e30c157c 	movw	r1, #50556	; 0xc57c
   145f8:	e30c05a4 	movw	r0, #50596	; 0xc5a4
   145fc:	e3401002 	movt	r1, #2
   14600:	e3400002 	movt	r0, #2
   14604:	e3a02e13 	mov	r2, #304	; 0x130
   14608:	eb004163 	bl	24b9c <assertion_failed>
   1460c:	e3540004 	cmp	r4, #4
   14610:	9a000017 	bls	14674 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x134>
   14614:	e2444004 	sub	r4, r4, #4
   14618:	e2861004 	add	r1, r6, #4
   1461c:	e1a00006 	mov	r0, r6
   14620:	e1a02004 	mov	r2, r4
   14624:	eb003adc 	bl	2319c <memcpy>
   14628:	e3570000 	cmp	r7, #0
   1462c:	0a000020 	beq	146b4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   14630:	e3a05001 	mov	r5, #1
   14634:	e5874000 	str	r4, [r7]
   14638:	eaffffda 	b	145a8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   1463c:	e30c157c 	movw	r1, #50556	; 0xc57c
   14640:	e30c03a0 	movw	r0, #50080	; 0xc3a0
   14644:	e3401002 	movt	r1, #2
   14648:	e3400002 	movt	r0, #2
   1464c:	e3a02f46 	mov	r2, #280	; 0x118
   14650:	eb004151 	bl	24b9c <assertion_failed>
   14654:	eaffffc1 	b	14560 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x20>
   14658:	e30c157c 	movw	r1, #50556	; 0xc57c
   1465c:	e30b097c 	movw	r0, #47484	; 0xb97c
   14660:	e3401002 	movt	r1, #2
   14664:	e3400002 	movt	r0, #2
   14668:	e3002119 	movw	r2, #281	; 0x119
   1466c:	eb00414a 	bl	24b9c <assertion_failed>
   14670:	eaffffbc 	b	14568 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   14674:	e30c157c 	movw	r1, #50556	; 0xc57c
   14678:	e30c05c4 	movw	r0, #50628	; 0xc5c4
   1467c:	e3401002 	movt	r1, #2
   14680:	e3400002 	movt	r0, #2
   14684:	e3002131 	movw	r2, #305	; 0x131
   14688:	e3a05000 	mov	r5, #0
   1468c:	eb004142 	bl	24b9c <assertion_failed>
   14690:	eaffffc4 	b	145a8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   14694:	eb0042c5 	bl	251b0 <CLogger::Get()>
   14698:	e58d4000 	str	r4, [sp]
   1469c:	e30c358c 	movw	r3, #50572	; 0xc58c
   146a0:	e3a02002 	mov	r2, #2
   146a4:	e3403002 	movt	r3, #2
   146a8:	e59f1020 	ldr	r1, [pc, #32]	; 146d0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x190>
   146ac:	eb00439b 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   146b0:	eaffffbc 	b	145a8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   146b4:	e30c157c 	movw	r1, #50556	; 0xc57c
   146b8:	e30c03b8 	movw	r0, #50104	; 0xc3b8
   146bc:	e3401002 	movt	r1, #2
   146c0:	e3400002 	movt	r0, #2
   146c4:	e3a02f4f 	mov	r2, #316	; 0x13c
   146c8:	eb004133 	bl	24b9c <assertion_failed>
   146cc:	eaffffd7 	b	14630 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   146d0:	0002c570 	.word	0x0002c570

000146d4 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   146d4:	e3003637 	movw	r3, #1591	; 0x637
   146d8:	e1520003 	cmp	r2, r3
   146dc:	8a00001c 	bhi	14754 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x80>
   146e0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   146e4:	e92d4070 	push	{r4, r5, r6, lr}
   146e8:	e3530000 	cmp	r3, #0
   146ec:	e1a06001 	mov	r6, r1
   146f0:	e1a04000 	mov	r4, r0
   146f4:	e1a05002 	mov	r5, r2
   146f8:	0a000025 	beq	14794 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xc0>
   146fc:	e3560000 	cmp	r6, #0
   14700:	0a00001c 	beq	14778 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa4>
   14704:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   14708:	e1a01006 	mov	r1, r6
   1470c:	e1a02005 	mov	r2, r5
   14710:	e2800008 	add	r0, r0, #8
   14714:	eb003aa0 	bl	2319c <memcpy>
   14718:	e5941014 	ldr	r1, [r4, #20]
   1471c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14720:	e3852a03 	orr	r2, r5, #12288	; 0x3000
   14724:	e3510000 	cmp	r1, #0
   14728:	e8830024 	stm	r3, {r2, r5}
   1472c:	0a00000a 	beq	1475c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x88>
   14730:	e1a00004 	mov	r0, r4
   14734:	ebfff670 	bl	120fc <CUSBFunction::GetHost() const>
   14738:	e2853008 	add	r3, r5, #8
   1473c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   14740:	e5941014 	ldr	r1, [r4, #20]
   14744:	ebffe6e6 	bl	e2e4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int)>
   14748:	e1e00000 	mvn	r0, r0
   1474c:	e1a00fa0 	lsr	r0, r0, #31
   14750:	e8bd8070 	pop	{r4, r5, r6, pc}
   14754:	e3a00000 	mov	r0, #0
   14758:	e12fff1e 	bx	lr
   1475c:	e30c157c 	movw	r1, #50556	; 0xc57c
   14760:	e30c0368 	movw	r0, #50024	; 0xc368
   14764:	e3401002 	movt	r1, #2
   14768:	e3400002 	movt	r0, #2
   1476c:	e3002112 	movw	r2, #274	; 0x112
   14770:	eb004109 	bl	24b9c <assertion_failed>
   14774:	eaffffed 	b	14730 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x5c>
   14778:	e30c157c 	movw	r1, #50556	; 0xc57c
   1477c:	e30b097c 	movw	r0, #47484	; 0xb97c
   14780:	e3401002 	movt	r1, #2
   14784:	e3400002 	movt	r0, #2
   14788:	e3a02f43 	mov	r2, #268	; 0x10c
   1478c:	eb004102 	bl	24b9c <assertion_failed>
   14790:	eaffffdb 	b	14704 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x30>
   14794:	e30c157c 	movw	r1, #50556	; 0xc57c
   14798:	e30c05d8 	movw	r0, #50648	; 0xc5d8
   1479c:	e3401002 	movt	r1, #2
   147a0:	e3400002 	movt	r0, #2
   147a4:	e300210b 	movw	r2, #267	; 0x10b
   147a8:	eb0040fb 	bl	24b9c <assertion_failed>
   147ac:	eaffffd2 	b	146fc <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x28>

000147b0 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   147b0:	e92d4070 	push	{r4, r5, r6, lr}
   147b4:	e1a04000 	mov	r4, r0
   147b8:	eb00022a 	bl	15068 <CNetDevice::CNetDevice(CUSBFunction*)>
   147bc:	e59f302c 	ldr	r3, [pc, #44]	; 147f0 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x40>
   147c0:	e3a05000 	mov	r5, #0
   147c4:	e2840018 	add	r0, r4, #24
   147c8:	e5845010 	str	r5, [r4, #16]
   147cc:	e5845014 	str	r5, [r4, #20]
   147d0:	e5843000 	str	r3, [r4]
   147d4:	eb00016f 	bl	14d98 <CMACAddress::CMACAddress()>
   147d8:	e5845024 	str	r5, [r4, #36]	; 0x24
   147dc:	e3a00d19 	mov	r0, #1600	; 0x640
   147e0:	eb0035e2 	bl	21f70 <operator new[](unsigned int)>
   147e4:	e5840024 	str	r0, [r4, #36]	; 0x24
   147e8:	e1a00004 	mov	r0, r4
   147ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   147f0:	0002c548 	.word	0x0002c548

000147f4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   147f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   147f8:	e24dd01c 	sub	sp, sp, #28
   147fc:	e28d5018 	add	r5, sp, #24
   14800:	e1a04001 	mov	r4, r1
   14804:	e1a07000 	mov	r7, r0
   14808:	e6ff4074 	uxth	r4, r4
   1480c:	e5252004 	str	r2, [r5, #-4]!
   14810:	ebfff639 	bl	120fc <CUSBFunction::GetHost() const>
   14814:	e1a06000 	mov	r6, r0
   14818:	e1a00007 	mov	r0, r7
   1481c:	ebfff625 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
   14820:	e58d5008 	str	r5, [sp, #8]
   14824:	e3a03004 	mov	r3, #4
   14828:	e58d4004 	str	r4, [sp, #4]
   1482c:	e58d300c 	str	r3, [sp, #12]
   14830:	e3a02000 	mov	r2, #0
   14834:	e3a030a0 	mov	r3, #160	; 0xa0
   14838:	e58d2000 	str	r2, [sp]
   1483c:	e3a02040 	mov	r2, #64	; 0x40
   14840:	e1a01000 	mov	r1, r0
   14844:	e1a00006 	mov	r0, r6
   14848:	ebffe647 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1484c:	e1e00000 	mvn	r0, r0
   14850:	e1a00fa0 	lsr	r0, r0, #31
   14854:	e28dd01c 	add	sp, sp, #28
   14858:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001485c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   1485c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14860:	e24dd014 	sub	sp, sp, #20
   14864:	e1a06002 	mov	r6, r2
   14868:	e1a04001 	mov	r4, r1
   1486c:	e1a07000 	mov	r7, r0
   14870:	ebfff621 	bl	120fc <CUSBFunction::GetHost() const>
   14874:	e6ff4074 	uxth	r4, r4
   14878:	e1a05000 	mov	r5, r0
   1487c:	e1a00007 	mov	r0, r7
   14880:	ebfff60c 	bl	120b8 <CUSBFunction::GetEndpoint0() const>
   14884:	e58d6008 	str	r6, [sp, #8]
   14888:	e3a03004 	mov	r3, #4
   1488c:	e58d4004 	str	r4, [sp, #4]
   14890:	e58d300c 	str	r3, [sp, #12]
   14894:	e3a02000 	mov	r2, #0
   14898:	e3a030a1 	mov	r3, #161	; 0xa1
   1489c:	e58d2000 	str	r2, [sp]
   148a0:	e3a020c0 	mov	r2, #192	; 0xc0
   148a4:	e1a01000 	mov	r1, r0
   148a8:	e1a00005 	mov	r0, r5
   148ac:	ebffe62e 	bl	e16c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   148b0:	e2400004 	sub	r0, r0, #4
   148b4:	e16f0f10 	clz	r0, r0
   148b8:	e1a002a0 	lsr	r0, r0, #5
   148bc:	e28dd014 	add	sp, sp, #20
   148c0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   148c4:	e92d4030 	push	{r4, r5, lr}
   148c8:	e1a04002 	mov	r4, r2
   148cc:	e24dd014 	sub	sp, sp, #20
   148d0:	e1a05001 	mov	r5, r1
   148d4:	e28d200c 	add	r2, sp, #12
   148d8:	e1a01004 	mov	r1, r4
   148dc:	ebffffde 	bl	1485c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   148e0:	e3500000 	cmp	r0, #0
   148e4:	0a00000a 	beq	14914 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x50>
   148e8:	eb004230 	bl	251b0 <CLogger::Get()>
   148ec:	e59d100c 	ldr	r1, [sp, #12]
   148f0:	e58d5004 	str	r5, [sp, #4]
   148f4:	e3a02004 	mov	r2, #4
   148f8:	e30c3608 	movw	r3, #50696	; 0xc608
   148fc:	e3403002 	movt	r3, #2
   14900:	e58d1000 	str	r1, [sp]
   14904:	e59f102c 	ldr	r1, [pc, #44]	; 14938 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x74>
   14908:	eb004304 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1490c:	e28dd014 	add	sp, sp, #20
   14910:	e8bd8030 	pop	{r4, r5, pc}
   14914:	eb004225 	bl	251b0 <CLogger::Get()>
   14918:	e58d4000 	str	r4, [sp]
   1491c:	e3a02001 	mov	r2, #1
   14920:	e59f1010 	ldr	r1, [pc, #16]	; 14938 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x74>
   14924:	e30c35ec 	movw	r3, #50668	; 0xc5ec
   14928:	e3403002 	movt	r3, #2
   1492c:	eb0042fb 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14930:	e28dd014 	add	sp, sp, #20
   14934:	e8bd8030 	pop	{r4, r5, pc}
   14938:	0002c570 	.word	0x0002c570

0001493c <CSMSC951xDevice::DumpRegs()>:
   1493c:	e92d4010 	push	{r4, lr}
   14940:	e3a02000 	mov	r2, #0
   14944:	e1a04000 	mov	r4, r0
   14948:	e30c1610 	movw	r1, #50704	; 0xc610
   1494c:	e3401002 	movt	r1, #2
   14950:	ebffffdb 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14954:	e1a00004 	mov	r0, r4
   14958:	e3a02008 	mov	r2, #8
   1495c:	e30c1618 	movw	r1, #50712	; 0xc618
   14960:	e3401002 	movt	r1, #2
   14964:	ebffffd6 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14968:	e1a00004 	mov	r0, r4
   1496c:	e3a0200c 	mov	r2, #12
   14970:	e30c1620 	movw	r1, #50720	; 0xc620
   14974:	e3401002 	movt	r1, #2
   14978:	ebffffd1 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1497c:	e1a00004 	mov	r0, r4
   14980:	e3a02010 	mov	r2, #16
   14984:	e30c1628 	movw	r1, #50728	; 0xc628
   14988:	e3401002 	movt	r1, #2
   1498c:	ebffffcc 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14990:	e1a00004 	mov	r0, r4
   14994:	e3a02014 	mov	r2, #20
   14998:	e30c1630 	movw	r1, #50736	; 0xc630
   1499c:	e3401002 	movt	r1, #2
   149a0:	ebffffc7 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   149a4:	e1a00004 	mov	r0, r4
   149a8:	e3a02018 	mov	r2, #24
   149ac:	e30c1638 	movw	r1, #50744	; 0xc638
   149b0:	e3401002 	movt	r1, #2
   149b4:	ebffffc2 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   149b8:	e1a00004 	mov	r0, r4
   149bc:	e3a02020 	mov	r2, #32
   149c0:	e30c1644 	movw	r1, #50756	; 0xc644
   149c4:	e3401002 	movt	r1, #2
   149c8:	ebffffbd 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   149cc:	e1a00004 	mov	r0, r4
   149d0:	e3a02024 	mov	r2, #36	; 0x24
   149d4:	e30c164c 	movw	r1, #50764	; 0xc64c
   149d8:	e3401002 	movt	r1, #2
   149dc:	ebffffb8 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   149e0:	e1a00004 	mov	r0, r4
   149e4:	e3a02028 	mov	r2, #40	; 0x28
   149e8:	e30c1650 	movw	r1, #50768	; 0xc650
   149ec:	e3401002 	movt	r1, #2
   149f0:	ebffffb3 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   149f4:	e1a00004 	mov	r0, r4
   149f8:	e3a0202c 	mov	r2, #44	; 0x2c
   149fc:	e30c165c 	movw	r1, #50780	; 0xc65c
   14a00:	e3401002 	movt	r1, #2
   14a04:	ebffffae 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a08:	e1a00004 	mov	r0, r4
   14a0c:	e3a02038 	mov	r2, #56	; 0x38
   14a10:	e30c1664 	movw	r1, #50788	; 0xc664
   14a14:	e3401002 	movt	r1, #2
   14a18:	ebffffa9 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a1c:	e1a00004 	mov	r0, r4
   14a20:	e3a02068 	mov	r2, #104	; 0x68
   14a24:	e30c1670 	movw	r1, #50800	; 0xc670
   14a28:	e3401002 	movt	r1, #2
   14a2c:	ebffffa4 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a30:	e1a00004 	mov	r0, r4
   14a34:	e3a0206c 	mov	r2, #108	; 0x6c
   14a38:	e30c167c 	movw	r1, #50812	; 0xc67c
   14a3c:	e3401002 	movt	r1, #2
   14a40:	ebffff9f 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a44:	e1a00004 	mov	r0, r4
   14a48:	e3a02c01 	mov	r2, #256	; 0x100
   14a4c:	e30c1688 	movw	r1, #50824	; 0xc688
   14a50:	e3401002 	movt	r1, #2
   14a54:	ebffff9a 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a58:	e1a00004 	mov	r0, r4
   14a5c:	e3a02f41 	mov	r2, #260	; 0x104
   14a60:	e30c1690 	movw	r1, #50832	; 0xc690
   14a64:	e3401002 	movt	r1, #2
   14a68:	ebffff95 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a6c:	e1a00004 	mov	r0, r4
   14a70:	e3a02f42 	mov	r2, #264	; 0x108
   14a74:	e30c1698 	movw	r1, #50840	; 0xc698
   14a78:	e3401002 	movt	r1, #2
   14a7c:	ebffff90 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a80:	e1a00004 	mov	r0, r4
   14a84:	e3a02f43 	mov	r2, #268	; 0x10c
   14a88:	e30c16a0 	movw	r1, #50848	; 0xc6a0
   14a8c:	e3401002 	movt	r1, #2
   14a90:	ebffff8b 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14a94:	e1a00004 	mov	r0, r4
   14a98:	e3a02e11 	mov	r2, #272	; 0x110
   14a9c:	e30c16a8 	movw	r1, #50856	; 0xc6a8
   14aa0:	e3401002 	movt	r1, #2
   14aa4:	ebffff86 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14aa8:	e1a00004 	mov	r0, r4
   14aac:	e3a02f47 	mov	r2, #284	; 0x11c
   14ab0:	e30c16b0 	movw	r1, #50864	; 0xc6b0
   14ab4:	e3401002 	movt	r1, #2
   14ab8:	ebffff81 	bl	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   14abc:	e1a00004 	mov	r0, r4
   14ac0:	e30c16b8 	movw	r1, #50872	; 0xc6b8
   14ac4:	e3a02f4b 	mov	r2, #300	; 0x12c
   14ac8:	e3401002 	movt	r1, #2
   14acc:	e8bd4010 	pop	{r4, lr}
   14ad0:	eaffff7b 	b	148c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>

00014ad4 <CSMSC951xDevice::Configure()>:
   14ad4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14ad8:	e24dd040 	sub	sp, sp, #64	; 0x40
   14adc:	e1a05000 	mov	r5, r0
   14ae0:	e28d0014 	add	r0, sp, #20
   14ae4:	eb0030d8 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   14ae8:	e3a06000 	mov	r6, #0
   14aec:	e28d0014 	add	r0, sp, #20
   14af0:	e58d6000 	str	r6, [sp]
   14af4:	e3a01003 	mov	r1, #3
   14af8:	e3a03014 	mov	r3, #20
   14afc:	e3401001 	movt	r1, #1
   14b00:	e28d202c 	add	r2, sp, #44	; 0x2c
   14b04:	eb003118 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   14b08:	e2504000 	subs	r4, r0, #0
   14b0c:	0a00003c 	beq	14c04 <CSMSC951xDevice::Configure()+0x130>
   14b10:	e2857018 	add	r7, r5, #24
   14b14:	e28d1038 	add	r1, sp, #56	; 0x38
   14b18:	e1a00007 	mov	r0, r7
   14b1c:	eb0000c8 	bl	14e44 <CMACAddress::Set(unsigned char const*)>
   14b20:	e28d001c 	add	r0, sp, #28
   14b24:	eb004528 	bl	25fcc <CString::CString()>
   14b28:	e28d101c 	add	r1, sp, #28
   14b2c:	e1a00007 	mov	r0, r7
   14b30:	eb000125 	bl	14fcc <CMACAddress::Format(CString*) const>
   14b34:	eb00419d 	bl	251b0 <CLogger::Get()>
   14b38:	e1a04000 	mov	r4, r0
   14b3c:	e28d001c 	add	r0, sp, #28
   14b40:	eb004538 	bl	26028 <CString::operator char const*() const>
   14b44:	e3a02004 	mov	r2, #4
   14b48:	e59f1244 	ldr	r1, [pc, #580]	; 14d94 <CSMSC951xDevice::Configure()+0x2c0>
   14b4c:	e30c33f4 	movw	r3, #50164	; 0xc3f4
   14b50:	e3403002 	movt	r3, #2
   14b54:	e58d0000 	str	r0, [sp]
   14b58:	e1a00004 	mov	r0, r4
   14b5c:	eb00426f 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14b60:	e1a00005 	mov	r0, r5
   14b64:	ebfff533 	bl	12038 <CUSBFunction::GetNumEndpoints() const>
   14b68:	e3500003 	cmp	r0, #3
   14b6c:	0a00000e 	beq	14bac <CSMSC951xDevice::Configure()+0xd8>
   14b70:	e1a00005 	mov	r0, r5
   14b74:	e59f1218 	ldr	r1, [pc, #536]	; 14d94 <CSMSC951xDevice::Configure()+0x2c0>
   14b78:	e1a04006 	mov	r4, r6
   14b7c:	ebfff5b3 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   14b80:	e28d001c 	add	r0, sp, #28
   14b84:	eb0044dd 	bl	25f00 <CString::~CString()>
   14b88:	e28d0014 	add	r0, sp, #20
   14b8c:	eb0030b4 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   14b90:	e1a00004 	mov	r0, r4
   14b94:	e28dd040 	add	sp, sp, #64	; 0x40
   14b98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14b9c:	e5d43003 	ldrb	r3, [r4, #3]
   14ba0:	e203303f 	and	r3, r3, #63	; 0x3f
   14ba4:	e3530002 	cmp	r3, #2
   14ba8:	0a00001c 	beq	14c20 <CSMSC951xDevice::Configure()+0x14c>
   14bac:	e3a01005 	mov	r1, #5
   14bb0:	e1a00005 	mov	r0, r5
   14bb4:	ebfff592 	bl	12204 <CUSBFunction::GetDescriptor(unsigned char)>
   14bb8:	e2504000 	subs	r4, r0, #0
   14bbc:	1afffff6 	bne	14b9c <CSMSC951xDevice::Configure()+0xc8>
   14bc0:	e5953010 	ldr	r3, [r5, #16]
   14bc4:	e1a00005 	mov	r0, r5
   14bc8:	e3530000 	cmp	r3, #0
   14bcc:	0a000025 	beq	14c68 <CSMSC951xDevice::Configure()+0x194>
   14bd0:	e5953014 	ldr	r3, [r5, #20]
   14bd4:	e3530000 	cmp	r3, #0
   14bd8:	0a000022 	beq	14c68 <CSMSC951xDevice::Configure()+0x194>
   14bdc:	ebfff557 	bl	12140 <CUSBFunction::Configure()>
   14be0:	e2504000 	subs	r4, r0, #0
   14be4:	1a000023 	bne	14c78 <CSMSC951xDevice::Configure()+0x1a4>
   14be8:	eb004170 	bl	251b0 <CLogger::Get()>
   14bec:	e30b3880 	movw	r3, #47232	; 0xb880
   14bf0:	e3a02001 	mov	r2, #1
   14bf4:	e3403002 	movt	r3, #2
   14bf8:	e59f1194 	ldr	r1, [pc, #404]	; 14d94 <CSMSC951xDevice::Configure()+0x2c0>
   14bfc:	eb004247 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14c00:	eaffffde 	b	14b80 <CSMSC951xDevice::Configure()+0xac>
   14c04:	eb004169 	bl	251b0 <CLogger::Get()>
   14c08:	e30c33dc 	movw	r3, #50140	; 0xc3dc
   14c0c:	e3a02001 	mov	r2, #1
   14c10:	e3403002 	movt	r3, #2
   14c14:	e59f1178 	ldr	r1, [pc, #376]	; 14d94 <CSMSC951xDevice::Configure()+0x2c0>
   14c18:	eb004240 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14c1c:	eaffffd9 	b	14b88 <CSMSC951xDevice::Configure()+0xb4>
   14c20:	e1d430d2 	ldrsb	r3, [r4, #2]
   14c24:	e1a00005 	mov	r0, r5
   14c28:	e3530000 	cmp	r3, #0
   14c2c:	ba000025 	blt	14cc8 <CSMSC951xDevice::Configure()+0x1f4>
   14c30:	e5953014 	ldr	r3, [r5, #20]
   14c34:	e3530000 	cmp	r3, #0
   14c38:	1a000009 	bne	14c64 <CSMSC951xDevice::Configure()+0x190>
   14c3c:	ebfff50d 	bl	12078 <CUSBFunction::GetDevice() const>
   14c40:	e1a08000 	mov	r8, r0
   14c44:	e3a00018 	mov	r0, #24
   14c48:	eb0034c7 	bl	21f6c <operator new(unsigned int)>
   14c4c:	e1a02004 	mov	r2, r4
   14c50:	e1a01008 	mov	r1, r8
   14c54:	e1a06000 	mov	r6, r0
   14c58:	ebffe42a 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14c5c:	e5856014 	str	r6, [r5, #20]
   14c60:	eaffffd1 	b	14bac <CSMSC951xDevice::Configure()+0xd8>
   14c64:	e1a00005 	mov	r0, r5
   14c68:	e59f1124 	ldr	r1, [pc, #292]	; 14d94 <CSMSC951xDevice::Configure()+0x2c0>
   14c6c:	e3a04000 	mov	r4, #0
   14c70:	ebfff576 	bl	12250 <CUSBFunction::ConfigurationError(char const*) const>
   14c74:	eaffffc1 	b	14b80 <CSMSC951xDevice::Configure()+0xac>
   14c78:	e1a00007 	mov	r0, r7
   14c7c:	e28d100c 	add	r1, sp, #12
   14c80:	eb00009c 	bl	14ef8 <CMACAddress::CopyTo(unsigned char*) const>
   14c84:	e5dd2011 	ldrb	r2, [sp, #17]
   14c88:	e5dd3010 	ldrb	r3, [sp, #16]
   14c8c:	e3a01f41 	mov	r1, #260	; 0x104
   14c90:	e1a00005 	mov	r0, r5
   14c94:	e59d400c 	ldr	r4, [sp, #12]
   14c98:	e1832402 	orr	r2, r3, r2, lsl #8
   14c9c:	ebfffed4 	bl	147f4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   14ca0:	e3500000 	cmp	r0, #0
   14ca4:	1a000014 	bne	14cfc <CSMSC951xDevice::Configure()+0x228>
   14ca8:	eb004140 	bl	251b0 <CLogger::Get()>
   14cac:	e30c36c0 	movw	r3, #50880	; 0xc6c0
   14cb0:	e3a02001 	mov	r2, #1
   14cb4:	e3403002 	movt	r3, #2
   14cb8:	e59f10d4 	ldr	r1, [pc, #212]	; 14d94 <CSMSC951xDevice::Configure()+0x2c0>
   14cbc:	e3a04000 	mov	r4, #0
   14cc0:	eb004216 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14cc4:	eaffffad 	b	14b80 <CSMSC951xDevice::Configure()+0xac>
   14cc8:	e5953010 	ldr	r3, [r5, #16]
   14ccc:	e3530000 	cmp	r3, #0
   14cd0:	1affffe4 	bne	14c68 <CSMSC951xDevice::Configure()+0x194>
   14cd4:	ebfff4e7 	bl	12078 <CUSBFunction::GetDevice() const>
   14cd8:	e1a08000 	mov	r8, r0
   14cdc:	e3a00018 	mov	r0, #24
   14ce0:	eb0034a1 	bl	21f6c <operator new(unsigned int)>
   14ce4:	e1a02004 	mov	r2, r4
   14ce8:	e1a01008 	mov	r1, r8
   14cec:	e1a06000 	mov	r6, r0
   14cf0:	ebffe404 	bl	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14cf4:	e5856010 	str	r6, [r5, #16]
   14cf8:	eaffffab 	b	14bac <CSMSC951xDevice::Configure()+0xd8>
   14cfc:	e1a02004 	mov	r2, r4
   14d00:	e3a01f42 	mov	r1, #264	; 0x108
   14d04:	e1a00005 	mov	r0, r5
   14d08:	ebfffeb9 	bl	147f4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   14d0c:	e3500000 	cmp	r0, #0
   14d10:	0affffe4 	beq	14ca8 <CSMSC951xDevice::Configure()+0x1d4>
   14d14:	e3a02000 	mov	r2, #0
   14d18:	e3a01024 	mov	r1, #36	; 0x24
   14d1c:	e3402111 	movt	r2, #273	; 0x111
   14d20:	e1a00005 	mov	r0, r5
   14d24:	ebfffeb2 	bl	147f4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   14d28:	e3500000 	cmp	r0, #0
   14d2c:	1a000007 	bne	14d50 <CSMSC951xDevice::Configure()+0x27c>
   14d30:	eb00411e 	bl	251b0 <CLogger::Get()>
   14d34:	e30c36d8 	movw	r3, #50904	; 0xc6d8
   14d38:	e3a02001 	mov	r2, #1
   14d3c:	e3403002 	movt	r3, #2
   14d40:	e59f104c 	ldr	r1, [pc, #76]	; 14d94 <CSMSC951xDevice::Configure()+0x2c0>
   14d44:	e3a04000 	mov	r4, #0
   14d48:	eb0041f4 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14d4c:	eaffff8b 	b	14b80 <CSMSC951xDevice::Configure()+0xac>
   14d50:	e3a0200c 	mov	r2, #12
   14d54:	e3a01c01 	mov	r1, #256	; 0x100
   14d58:	e3402080 	movt	r2, #128	; 0x80
   14d5c:	e1a00005 	mov	r0, r5
   14d60:	ebfffea3 	bl	147f4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   14d64:	e3500000 	cmp	r0, #0
   14d68:	0afffff0 	beq	14d30 <CSMSC951xDevice::Configure()+0x25c>
   14d6c:	e3a02004 	mov	r2, #4
   14d70:	e3a01010 	mov	r1, #16
   14d74:	e1a00005 	mov	r0, r5
   14d78:	ebfffe9d 	bl	147f4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   14d7c:	e3500000 	cmp	r0, #0
   14d80:	0affffea 	beq	14d30 <CSMSC951xDevice::Configure()+0x25c>
   14d84:	e1a00005 	mov	r0, r5
   14d88:	e3a04001 	mov	r4, #1
   14d8c:	eb0000d0 	bl	150d4 <CNetDevice::AddNetDevice()>
   14d90:	eaffff7a 	b	14b80 <CSMSC951xDevice::Configure()+0xac>
   14d94:	0002c570 	.word	0x0002c570

00014d98 <CMACAddress::CMACAddress()>:
   14d98:	e3a02000 	mov	r2, #0
   14d9c:	e5802000 	str	r2, [r0]
   14da0:	e12fff1e 	bx	lr

00014da4 <CMACAddress::~CMACAddress()>:
   14da4:	e12fff1e 	bx	lr

00014da8 <CMACAddress::operator==(CMACAddress const&) const>:
   14da8:	e5903000 	ldr	r3, [r0]
   14dac:	e92d4070 	push	{r4, r5, r6, lr}
   14db0:	e3530000 	cmp	r3, #0
   14db4:	e1a04000 	mov	r4, r0
   14db8:	e1a05001 	mov	r5, r1
   14dbc:	0a00000a 	beq	14dec <CMACAddress::operator==(CMACAddress const&) const+0x44>
   14dc0:	e5953000 	ldr	r3, [r5]
   14dc4:	e2844004 	add	r4, r4, #4
   14dc8:	e3530000 	cmp	r3, #0
   14dcc:	0a000010 	beq	14e14 <CMACAddress::operator==(CMACAddress const&) const+0x6c>
   14dd0:	e2851004 	add	r1, r5, #4
   14dd4:	e1a00004 	mov	r0, r4
   14dd8:	e3a02006 	mov	r2, #6
   14ddc:	eb0037df 	bl	22d60 <memcmp>
   14de0:	e16f0f10 	clz	r0, r0
   14de4:	e1a002a0 	lsr	r0, r0, #5
   14de8:	e8bd8070 	pop	{r4, r5, r6, pc}
   14dec:	e30c16ec 	movw	r1, #50924	; 0xc6ec
   14df0:	e30a0e98 	movw	r0, #44696	; 0xae98
   14df4:	e3401002 	movt	r1, #2
   14df8:	e3400002 	movt	r0, #2
   14dfc:	e3a02029 	mov	r2, #41	; 0x29
   14e00:	e2844004 	add	r4, r4, #4
   14e04:	eb003f64 	bl	24b9c <assertion_failed>
   14e08:	e5953000 	ldr	r3, [r5]
   14e0c:	e3530000 	cmp	r3, #0
   14e10:	1affffee 	bne	14dd0 <CMACAddress::operator==(CMACAddress const&) const+0x28>
   14e14:	e30c16ec 	movw	r1, #50924	; 0xc6ec
   14e18:	e30a0e98 	movw	r0, #44696	; 0xae98
   14e1c:	e3401002 	movt	r1, #2
   14e20:	e3400002 	movt	r0, #2
   14e24:	e3a02041 	mov	r2, #65	; 0x41
   14e28:	eb003f5b 	bl	24b9c <assertion_failed>
   14e2c:	eaffffe7 	b	14dd0 <CMACAddress::operator==(CMACAddress const&) const+0x28>

00014e30 <CMACAddress::operator!=(CMACAddress const&) const>:
   14e30:	e92d4010 	push	{r4, lr}
   14e34:	ebffffdb 	bl	14da8 <CMACAddress::operator==(CMACAddress const&) const>
   14e38:	e16f0f10 	clz	r0, r0
   14e3c:	e1a002a0 	lsr	r0, r0, #5
   14e40:	e8bd8010 	pop	{r4, pc}

00014e44 <CMACAddress::Set(unsigned char const*)>:
   14e44:	e92d4070 	push	{r4, r5, r6, lr}
   14e48:	e2515000 	subs	r5, r1, #0
   14e4c:	e1a04000 	mov	r4, r0
   14e50:	0a000006 	beq	14e70 <CMACAddress::Set(unsigned char const*)+0x2c>
   14e54:	e1a01005 	mov	r1, r5
   14e58:	e3a02006 	mov	r2, #6
   14e5c:	e2840004 	add	r0, r4, #4
   14e60:	eb0038cd 	bl	2319c <memcpy>
   14e64:	e3a03001 	mov	r3, #1
   14e68:	e5843000 	str	r3, [r4]
   14e6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14e70:	e30c16ec 	movw	r1, #50924	; 0xc6ec
   14e74:	e30c06fc 	movw	r0, #50940	; 0xc6fc
   14e78:	e3401002 	movt	r1, #2
   14e7c:	e3400002 	movt	r0, #2
   14e80:	e3a02034 	mov	r2, #52	; 0x34
   14e84:	eb003f44 	bl	24b9c <assertion_failed>
   14e88:	eafffff1 	b	14e54 <CMACAddress::Set(unsigned char const*)+0x10>

00014e8c <CMACAddress::CMACAddress(unsigned char const*)>:
   14e8c:	e92d4010 	push	{r4, lr}
   14e90:	e1a04000 	mov	r4, r0
   14e94:	ebffffea 	bl	14e44 <CMACAddress::Set(unsigned char const*)>
   14e98:	e1a00004 	mov	r0, r4
   14e9c:	e8bd8010 	pop	{r4, pc}

00014ea0 <CMACAddress::SetBroadcast()>:
   14ea0:	e92d4010 	push	{r4, lr}
   14ea4:	e3a02006 	mov	r2, #6
   14ea8:	e1a04000 	mov	r4, r0
   14eac:	e3a010ff 	mov	r1, #255	; 0xff
   14eb0:	e2800004 	add	r0, r0, #4
   14eb4:	eb0037a0 	bl	22d3c <memset>
   14eb8:	e3a03001 	mov	r3, #1
   14ebc:	e5843000 	str	r3, [r4]
   14ec0:	e8bd8010 	pop	{r4, pc}

00014ec4 <CMACAddress::Get() const>:
   14ec4:	e5903000 	ldr	r3, [r0]
   14ec8:	e92d4010 	push	{r4, lr}
   14ecc:	e3530000 	cmp	r3, #0
   14ed0:	e1a04000 	mov	r4, r0
   14ed4:	1a000005 	bne	14ef0 <CMACAddress::Get() const+0x2c>
   14ed8:	e30c16ec 	movw	r1, #50924	; 0xc6ec
   14edc:	e30a0e98 	movw	r0, #44696	; 0xae98
   14ee0:	e3401002 	movt	r1, #2
   14ee4:	e3400002 	movt	r0, #2
   14ee8:	e3a02041 	mov	r2, #65	; 0x41
   14eec:	eb003f2a 	bl	24b9c <assertion_failed>
   14ef0:	e2840004 	add	r0, r4, #4
   14ef4:	e8bd8010 	pop	{r4, pc}

00014ef8 <CMACAddress::CopyTo(unsigned char*) const>:
   14ef8:	e5903000 	ldr	r3, [r0]
   14efc:	e92d4070 	push	{r4, r5, r6, lr}
   14f00:	e3530000 	cmp	r3, #0
   14f04:	e1a05000 	mov	r5, r0
   14f08:	e1a04001 	mov	r4, r1
   14f0c:	0a000006 	beq	14f2c <CMACAddress::CopyTo(unsigned char*) const+0x34>
   14f10:	e3540000 	cmp	r4, #0
   14f14:	0a00000c 	beq	14f4c <CMACAddress::CopyTo(unsigned char*) const+0x54>
   14f18:	e2851004 	add	r1, r5, #4
   14f1c:	e1a00004 	mov	r0, r4
   14f20:	e3a02006 	mov	r2, #6
   14f24:	e8bd4070 	pop	{r4, r5, r6, lr}
   14f28:	ea00389b 	b	2319c <memcpy>
   14f2c:	e30c16ec 	movw	r1, #50924	; 0xc6ec
   14f30:	e30a0e98 	movw	r0, #44696	; 0xae98
   14f34:	e3401002 	movt	r1, #2
   14f38:	e3400002 	movt	r0, #2
   14f3c:	e3a02047 	mov	r2, #71	; 0x47
   14f40:	eb003f15 	bl	24b9c <assertion_failed>
   14f44:	e3540000 	cmp	r4, #0
   14f48:	1afffff2 	bne	14f18 <CMACAddress::CopyTo(unsigned char*) const+0x20>
   14f4c:	e30c16ec 	movw	r1, #50924	; 0xc6ec
   14f50:	e30b097c 	movw	r0, #47484	; 0xb97c
   14f54:	e3401002 	movt	r1, #2
   14f58:	e3400002 	movt	r0, #2
   14f5c:	e3a02048 	mov	r2, #72	; 0x48
   14f60:	eb003f0d 	bl	24b9c <assertion_failed>
   14f64:	eaffffeb 	b	14f18 <CMACAddress::CopyTo(unsigned char*) const+0x20>

00014f68 <CMACAddress::IsBroadcast() const>:
   14f68:	e5903000 	ldr	r3, [r0]
   14f6c:	e92d4010 	push	{r4, lr}
   14f70:	e3530000 	cmp	r3, #0
   14f74:	e1a04000 	mov	r4, r0
   14f78:	0a000008 	beq	14fa0 <CMACAddress::IsBroadcast() const+0x38>
   14f7c:	e2843004 	add	r3, r4, #4
   14f80:	e284000a 	add	r0, r4, #10
   14f84:	e4d32001 	ldrb	r2, [r3], #1
   14f88:	e35200ff 	cmp	r2, #255	; 0xff
   14f8c:	1a00000a 	bne	14fbc <CMACAddress::IsBroadcast() const+0x54>
   14f90:	e1530000 	cmp	r3, r0
   14f94:	1afffffa 	bne	14f84 <CMACAddress::IsBroadcast() const+0x1c>
   14f98:	e3a00001 	mov	r0, #1
   14f9c:	e8bd8010 	pop	{r4, pc}
   14fa0:	e30c16ec 	movw	r1, #50924	; 0xc6ec
   14fa4:	e30a0e98 	movw	r0, #44696	; 0xae98
   14fa8:	e3401002 	movt	r1, #2
   14fac:	e3400002 	movt	r0, #2
   14fb0:	e3a0204e 	mov	r2, #78	; 0x4e
   14fb4:	eb003ef8 	bl	24b9c <assertion_failed>
   14fb8:	eaffffef 	b	14f7c <CMACAddress::IsBroadcast() const+0x14>
   14fbc:	e3a00000 	mov	r0, #0
   14fc0:	e8bd8010 	pop	{r4, pc}

00014fc4 <CMACAddress::GetSize() const>:
   14fc4:	e3a00006 	mov	r0, #6
   14fc8:	e12fff1e 	bx	lr

00014fcc <CMACAddress::Format(CString*) const>:
   14fcc:	e5903000 	ldr	r3, [r0]
   14fd0:	e92d4070 	push	{r4, r5, r6, lr}
   14fd4:	e3530000 	cmp	r3, #0
   14fd8:	e24dd010 	sub	sp, sp, #16
   14fdc:	e1a04000 	mov	r4, r0
   14fe0:	e1a05001 	mov	r5, r1
   14fe4:	0a000010 	beq	1502c <CMACAddress::Format(CString*) const+0x60>
   14fe8:	e3550000 	cmp	r5, #0
   14fec:	0a000016 	beq	1504c <CMACAddress::Format(CString*) const+0x80>
   14ff0:	e5d46009 	ldrb	r6, [r4, #9]
   14ff4:	e1a00005 	mov	r0, r5
   14ff8:	e5d4e007 	ldrb	lr, [r4, #7]
   14ffc:	e30c171c 	movw	r1, #50972	; 0xc71c
   15000:	e5d45008 	ldrb	r5, [r4, #8]
   15004:	e3401002 	movt	r1, #2
   15008:	e5d4c006 	ldrb	ip, [r4, #6]
   1500c:	e5d43005 	ldrb	r3, [r4, #5]
   15010:	e5d42004 	ldrb	r2, [r4, #4]
   15014:	e58d600c 	str	r6, [sp, #12]
   15018:	e58d5008 	str	r5, [sp, #8]
   1501c:	e88d5000 	stm	sp, {ip, lr}
   15020:	eb004748 	bl	26d48 <CString::Format(char const*, ...)>
   15024:	e28dd010 	add	sp, sp, #16
   15028:	e8bd8070 	pop	{r4, r5, r6, pc}
   1502c:	e30c16ec 	movw	r1, #50924	; 0xc6ec
   15030:	e30a0e98 	movw	r0, #44696	; 0xae98
   15034:	e3401002 	movt	r1, #2
   15038:	e3400002 	movt	r0, #2
   1503c:	e3a02062 	mov	r2, #98	; 0x62
   15040:	eb003ed5 	bl	24b9c <assertion_failed>
   15044:	e3550000 	cmp	r5, #0
   15048:	1affffe8 	bne	14ff0 <CMACAddress::Format(CString*) const+0x24>
   1504c:	e30c16ec 	movw	r1, #50924	; 0xc6ec
   15050:	e30c070c 	movw	r0, #50956	; 0xc70c
   15054:	e3401002 	movt	r1, #2
   15058:	e3400002 	movt	r0, #2
   1505c:	e3a02063 	mov	r2, #99	; 0x63
   15060:	eb003ecd 	bl	24b9c <assertion_failed>
   15064:	eaffffe1 	b	14ff0 <CMACAddress::Format(CString*) const+0x24>

00015068 <CNetDevice::CNetDevice(CUSBFunction*)>:
   15068:	e92d4010 	push	{r4, lr}
   1506c:	e1a04000 	mov	r4, r0
   15070:	ebfff391 	bl	11ebc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15074:	e59f3008 	ldr	r3, [pc, #8]	; 15084 <CNetDevice::CNetDevice(CUSBFunction*)+0x1c>
   15078:	e1a00004 	mov	r0, r4
   1507c:	e5843000 	str	r3, [r4]
   15080:	e8bd8010 	pop	{r4, pc}
   15084:	0002c744 	.word	0x0002c744

00015088 <CNetDevice::~CNetDevice()>:
   15088:	e59f3014 	ldr	r3, [pc, #20]	; 150a4 <CNetDevice::~CNetDevice()+0x1c>
   1508c:	e92d4010 	push	{r4, lr}
   15090:	e1a04000 	mov	r4, r0
   15094:	e5803000 	str	r3, [r0]
   15098:	ebfff336 	bl	11d78 <CUSBFunction::~CUSBFunction()>
   1509c:	e1a00004 	mov	r0, r4
   150a0:	e8bd8010 	pop	{r4, pc}
   150a4:	0002c744 	.word	0x0002c744

000150a8 <CNetDevice::~CNetDevice()>:
   150a8:	e59f3020 	ldr	r3, [pc, #32]	; 150d0 <CNetDevice::~CNetDevice()+0x28>
   150ac:	e92d4010 	push	{r4, lr}
   150b0:	e1a04000 	mov	r4, r0
   150b4:	e5803000 	str	r3, [r0]
   150b8:	ebfff32e 	bl	11d78 <CUSBFunction::~CUSBFunction()>
   150bc:	e1a00004 	mov	r0, r4
   150c0:	e3a01010 	mov	r1, #16
   150c4:	eb0033ac 	bl	21f7c <operator delete(void*, unsigned int)>
   150c8:	e1a00004 	mov	r0, r4
   150cc:	e8bd8010 	pop	{r4, pc}
   150d0:	0002c744 	.word	0x0002c744

000150d4 <CNetDevice::AddNetDevice()>:
   150d4:	e92d4030 	push	{r4, r5, lr}
   150d8:	e24dd014 	sub	sp, sp, #20
   150dc:	e1a05000 	mov	r5, r0
   150e0:	e1a0000d 	mov	r0, sp
   150e4:	eb0043b8 	bl	25fcc <CString::CString()>
   150e8:	e3023818 	movw	r3, #10264	; 0x2818
   150ec:	e3403143 	movt	r3, #323	; 0x143
   150f0:	e1a0000d 	mov	r0, sp
   150f4:	e30c176c 	movw	r1, #51052	; 0xc76c
   150f8:	e3401002 	movt	r1, #2
   150fc:	e5932000 	ldr	r2, [r3]
   15100:	e282c001 	add	ip, r2, #1
   15104:	e583c000 	str	ip, [r3]
   15108:	eb00470e 	bl	26d48 <CString::Format(char const*, ...)>
   1510c:	eb003ffa 	bl	250fc <CDeviceNameService::Get()>
   15110:	e1a04000 	mov	r4, r0
   15114:	e1a0000d 	mov	r0, sp
   15118:	eb0043c2 	bl	26028 <CString::operator char const*() const>
   1511c:	e1a02005 	mov	r2, r5
   15120:	e3a03000 	mov	r3, #0
   15124:	e1a01000 	mov	r1, r0
   15128:	e1a00004 	mov	r0, r4
   1512c:	eb003f7e 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   15130:	e1a0000d 	mov	r0, sp
   15134:	eb004371 	bl	25f00 <CString::~CString()>
   15138:	e28dd014 	add	sp, sp, #20
   1513c:	e8bd8030 	pop	{r4, r5, pc}

00015140 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   15140:	e92d4010 	push	{r4, lr}
   15144:	e1a04000 	mov	r4, r0
   15148:	e3a03000 	mov	r3, #0
   1514c:	e2800014 	add	r0, r0, #20
   15150:	e5843000 	str	r3, [r4]
   15154:	e5843004 	str	r3, [r4, #4]
   15158:	e5843008 	str	r3, [r4, #8]
   1515c:	e5c4300c 	strb	r3, [r4, #12]
   15160:	e5c4300d 	strb	r3, [r4, #13]
   15164:	e5843010 	str	r3, [r4, #16]
   15168:	eb000199 	bl	157d4 <CKeyMap::CKeyMap()>
   1516c:	e1a00004 	mov	r0, r4
   15170:	e8bd8010 	pop	{r4, pc}

00015174 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   15174:	e92d4010 	push	{r4, lr}
   15178:	e1a04000 	mov	r4, r0
   1517c:	e3a03000 	mov	r3, #0
   15180:	e2800014 	add	r0, r0, #20
   15184:	e5843000 	str	r3, [r4]
   15188:	e5843004 	str	r3, [r4, #4]
   1518c:	e5843008 	str	r3, [r4, #8]
   15190:	eb0000c7 	bl	154b4 <CKeyMap::~CKeyMap()>
   15194:	e1a00004 	mov	r0, r4
   15198:	e8bd8010 	pop	{r4, pc}

0001519c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   1519c:	e92d4070 	push	{r4, r5, r6, lr}
   151a0:	e2515000 	subs	r5, r1, #0
   151a4:	e1a04000 	mov	r4, r0
   151a8:	0a000001 	beq	151b4 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x18>
   151ac:	e5845000 	str	r5, [r4]
   151b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   151b4:	e30c1774 	movw	r1, #51060	; 0xc774
   151b8:	e30c078c 	movw	r0, #51084	; 0xc78c
   151bc:	e3401002 	movt	r1, #2
   151c0:	e3400002 	movt	r0, #2
   151c4:	e3a02030 	mov	r2, #48	; 0x30
   151c8:	eb003e73 	bl	24b9c <assertion_failed>
   151cc:	e5845000 	str	r5, [r4]
   151d0:	e8bd8070 	pop	{r4, r5, r6, pc}

000151d4 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   151d4:	e92d4070 	push	{r4, r5, r6, lr}
   151d8:	e2515000 	subs	r5, r1, #0
   151dc:	e1a04000 	mov	r4, r0
   151e0:	0a000001 	beq	151ec <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x18>
   151e4:	e5845004 	str	r5, [r4, #4]
   151e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   151ec:	e30c1774 	movw	r1, #51060	; 0xc774
   151f0:	e30c07a4 	movw	r0, #51108	; 0xc7a4
   151f4:	e3401002 	movt	r1, #2
   151f8:	e3400002 	movt	r0, #2
   151fc:	e3a02036 	mov	r2, #54	; 0x36
   15200:	eb003e65 	bl	24b9c <assertion_failed>
   15204:	e5845004 	str	r5, [r4, #4]
   15208:	e8bd8070 	pop	{r4, r5, r6, pc}

0001520c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   1520c:	e92d4070 	push	{r4, r5, r6, lr}
   15210:	e2515000 	subs	r5, r1, #0
   15214:	e1a04000 	mov	r4, r0
   15218:	0a000001 	beq	15224 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x18>
   1521c:	e5845008 	str	r5, [r4, #8]
   15220:	e8bd8070 	pop	{r4, r5, r6, pc}
   15224:	e30c1774 	movw	r1, #51060	; 0xc774
   15228:	e30c07c0 	movw	r0, #51136	; 0xc7c0
   1522c:	e3401002 	movt	r1, #2
   15230:	e3400002 	movt	r0, #2
   15234:	e3a0203c 	mov	r2, #60	; 0x3c
   15238:	eb003e57 	bl	24b9c <assertion_failed>
   1523c:	e5845008 	str	r5, [r4, #8]
   15240:	e8bd8070 	pop	{r4, r5, r6, pc}

00015244 <CKeyboardBehaviour::GetLEDStatus() const>:
   15244:	e2800014 	add	r0, r0, #20
   15248:	ea000131 	b	15714 <CKeyMap::GetLEDStatus() const>

0001524c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   1524c:	e92d4070 	push	{r4, r5, r6, lr}
   15250:	e2805014 	add	r5, r0, #20
   15254:	e5d0600c 	ldrb	r6, [r0, #12]
   15258:	e24dd008 	sub	sp, sp, #8
   1525c:	e1a04000 	mov	r4, r0
   15260:	e1a00005 	mov	r0, r5
   15264:	e1a02006 	mov	r2, r6
   15268:	eb0000b4 	bl	15540 <CKeyMap::Translate(unsigned char, unsigned char)>
   1526c:	e2403e13 	sub	r3, r0, #304	; 0x130
   15270:	e2433003 	sub	r3, r3, #3
   15274:	e353000f 	cmp	r3, #15
   15278:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1527c:	ea00001d 	b	152f8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   15280:	000152d8 	.word	0x000152d8
   15284:	000152d8 	.word	0x000152d8
   15288:	000152d8 	.word	0x000152d8
   1528c:	000152c0 	.word	0x000152c0
   15290:	000152c0 	.word	0x000152c0
   15294:	000152c0 	.word	0x000152c0
   15298:	000152c0 	.word	0x000152c0
   1529c:	000152c0 	.word	0x000152c0
   152a0:	000152c0 	.word	0x000152c0
   152a4:	000152c0 	.word	0x000152c0
   152a8:	000152c0 	.word	0x000152c0
   152ac:	000152c0 	.word	0x000152c0
   152b0:	000152c0 	.word	0x000152c0
   152b4:	000152c0 	.word	0x000152c0
   152b8:	000152c0 	.word	0x000152c0
   152bc:	000152e0 	.word	0x000152e0
   152c0:	e5943004 	ldr	r3, [r4, #4]
   152c4:	e3530000 	cmp	r3, #0
   152c8:	0a000002 	beq	152d8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   152cc:	e2400f4d 	sub	r0, r0, #308	; 0x134
   152d0:	e2400002 	sub	r0, r0, #2
   152d4:	e12fff33 	blx	r3
   152d8:	e28dd008 	add	sp, sp, #8
   152dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   152e0:	e5943008 	ldr	r3, [r4, #8]
   152e4:	e3530000 	cmp	r3, #0
   152e8:	0afffffa 	beq	152d8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   152ec:	e12fff33 	blx	r3
   152f0:	e28dd008 	add	sp, sp, #8
   152f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   152f8:	e1a01000 	mov	r1, r0
   152fc:	e1a02006 	mov	r2, r6
   15300:	e1a00005 	mov	r0, r5
   15304:	e28d3004 	add	r3, sp, #4
   15308:	eb0000d2 	bl	15658 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   1530c:	e3500000 	cmp	r0, #0
   15310:	0afffff0 	beq	152d8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   15314:	e5943000 	ldr	r3, [r4]
   15318:	e3530000 	cmp	r3, #0
   1531c:	0affffed 	beq	152d8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   15320:	e12fff33 	blx	r3
   15324:	e28dd008 	add	sp, sp, #8
   15328:	e8bd8070 	pop	{r4, r5, r6, pc}

0001532c <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   1532c:	e241c080 	sub	ip, r1, #128	; 0x80
   15330:	e1a03000 	mov	r3, r0
   15334:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15338:	e6efe07c 	uxtb	lr, ip
   1533c:	e35e0007 	cmp	lr, #7
   15340:	8a000004 	bhi	15358 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x2c>
   15344:	e5d0200c 	ldrb	r2, [r0, #12]
   15348:	e3a01001 	mov	r1, #1
   1534c:	e182cc11 	orr	ip, r2, r1, lsl ip
   15350:	e5c0c00c 	strb	ip, [r0, #12]
   15354:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   15358:	e5d0c00d 	ldrb	ip, [r0, #13]
   1535c:	e15c0001 	cmp	ip, r1
   15360:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   15364:	e5c3100d 	strb	r1, [r3, #13]
   15368:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1536c:	eaffffb6 	b	1524c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

00015370 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   15370:	e2413080 	sub	r3, r1, #128	; 0x80
   15374:	e6ef2073 	uxtb	r2, r3
   15378:	e3520007 	cmp	r2, #7
   1537c:	8a000004 	bhi	15394 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x24>
   15380:	e5d0200c 	ldrb	r2, [r0, #12]
   15384:	e3a01001 	mov	r1, #1
   15388:	e1c23311 	bic	r3, r2, r1, lsl r3
   1538c:	e5c0300c 	strb	r3, [r0, #12]
   15390:	e12fff1e 	bx	lr
   15394:	e5d0300d 	ldrb	r3, [r0, #13]
   15398:	e1530001 	cmp	r3, r1
   1539c:	112fff1e 	bxne	lr
   153a0:	e5903010 	ldr	r3, [r0, #16]
   153a4:	e92d4010 	push	{r4, lr}
   153a8:	e3530000 	cmp	r3, #0
   153ac:	e1a04000 	mov	r4, r0
   153b0:	1a000002 	bne	153c0 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   153b4:	e3a03000 	mov	r3, #0
   153b8:	e5c4300d 	strb	r3, [r4, #13]
   153bc:	e8bd8010 	pop	{r4, pc}
   153c0:	eb00364f 	bl	22d04 <CTimer::Get()>
   153c4:	e5941010 	ldr	r1, [r4, #16]
   153c8:	eb0034de 	bl	22748 <CTimer::CancelKernelTimer(unsigned int)>
   153cc:	e3a03000 	mov	r3, #0
   153d0:	e5843010 	str	r3, [r4, #16]
   153d4:	eafffff6 	b	153b4 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

000153d8 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   153d8:	e5903010 	ldr	r3, [r0, #16]
   153dc:	e92d4010 	push	{r4, lr}
   153e0:	e1530001 	cmp	r3, r1
   153e4:	e24dd008 	sub	sp, sp, #8
   153e8:	e1a04000 	mov	r4, r0
   153ec:	0a000005 	beq	15408 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x30>
   153f0:	e30c1774 	movw	r1, #51060	; 0xc774
   153f4:	e30c07d8 	movw	r0, #51160	; 0xc7d8
   153f8:	e3401002 	movt	r1, #2
   153fc:	e3400002 	movt	r0, #2
   15400:	e3a020b1 	mov	r2, #177	; 0xb1
   15404:	eb003de4 	bl	24b9c <assertion_failed>
   15408:	e5d4100d 	ldrb	r1, [r4, #13]
   1540c:	e3510000 	cmp	r1, #0
   15410:	1a000001 	bne	1541c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x44>
   15414:	e28dd008 	add	sp, sp, #8
   15418:	e8bd8010 	pop	{r4, pc}
   1541c:	e1a00004 	mov	r0, r4
   15420:	ebffff89 	bl	1524c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   15424:	eb003636 	bl	22d04 <CTimer::Get()>
   15428:	e58d4000 	str	r4, [sp]
   1542c:	e305246c 	movw	r2, #21612	; 0x546c
   15430:	e3a03000 	mov	r3, #0
   15434:	e3402001 	movt	r2, #1
   15438:	e3a01008 	mov	r1, #8
   1543c:	eb003469 	bl	225e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   15440:	e3500000 	cmp	r0, #0
   15444:	e5840010 	str	r0, [r4, #16]
   15448:	1afffff1 	bne	15414 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x3c>
   1544c:	e30c1774 	movw	r1, #51060	; 0xc774
   15450:	e30c02d8 	movw	r0, #49880	; 0xc2d8
   15454:	e3401002 	movt	r1, #2
   15458:	e3400002 	movt	r0, #2
   1545c:	e3a020b8 	mov	r2, #184	; 0xb8
   15460:	e28dd008 	add	sp, sp, #8
   15464:	e8bd4010 	pop	{r4, lr}
   15468:	ea003dcb 	b	24b9c <assertion_failed>

0001546c <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   1546c:	e92d4070 	push	{r4, r5, r6, lr}
   15470:	e2524000 	subs	r4, r2, #0
   15474:	e1a05000 	mov	r5, r0
   15478:	0a000003 	beq	1548c <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x20>
   1547c:	e1a01005 	mov	r1, r5
   15480:	e1a00004 	mov	r0, r4
   15484:	e8bd4070 	pop	{r4, r5, r6, lr}
   15488:	eaffffd2 	b	153d8 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   1548c:	e30c1774 	movw	r1, #51060	; 0xc774
   15490:	e30a0938 	movw	r0, #43320	; 0xa938
   15494:	e3401002 	movt	r1, #2
   15498:	e3400002 	movt	r0, #2
   1549c:	e3a020bf 	mov	r2, #191	; 0xbf
   154a0:	eb003dbd 	bl	24b9c <assertion_failed>
   154a4:	e1a01005 	mov	r1, r5
   154a8:	e1a00004 	mov	r0, r4
   154ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   154b0:	eaffffc8 	b	153d8 <CKeyboardBehaviour::TimerHandler(unsigned int)>

000154b4 <CKeyMap::~CKeyMap()>:
   154b4:	e12fff1e 	bx	lr

000154b8 <CKeyMap::ClearTable(unsigned char)>:
   154b8:	e3510003 	cmp	r1, #3
   154bc:	ca000009 	bgt	154e8 <CKeyMap::ClearTable(unsigned char)+0x30>
   154c0:	e1a03081 	lsl	r3, r1, #1
   154c4:	e3a01000 	mov	r1, #0
   154c8:	e2832b01 	add	r2, r3, #1024	; 0x400
   154cc:	e0803003 	add	r3, r0, r3
   154d0:	e0802002 	add	r2, r0, r2
   154d4:	e0c310b8 	strh	r1, [r3], #8
   154d8:	e1530002 	cmp	r3, r2
   154dc:	1afffffc 	bne	154d4 <CKeyMap::ClearTable(unsigned char)+0x1c>
   154e0:	e3a00001 	mov	r0, #1
   154e4:	e12fff1e 	bx	lr
   154e8:	e3a00000 	mov	r0, #0
   154ec:	e12fff1e 	bx	lr

000154f0 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   154f0:	e16fcf12 	clz	ip, r2
   154f4:	e1a0c2ac 	lsr	ip, ip, #5
   154f8:	e3510003 	cmp	r1, #3
   154fc:	c38cc001 	orrgt	ip, ip, #1
   15500:	e35c0000 	cmp	ip, #0
   15504:	1a00000a 	bne	15534 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   15508:	e352007f 	cmp	r2, #127	; 0x7f
   1550c:	ca000009 	bgt	15538 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   15510:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15514:	e300e132 	movw	lr, #306	; 0x132
   15518:	e153000e 	cmp	r3, lr
   1551c:	d0811102 	addle	r1, r1, r2, lsl #2
   15520:	d3a0c001 	movle	ip, #1
   15524:	d1a01c11 	lslle	r1, r1, ip
   15528:	d18030b1 	strhle	r3, [r0, r1]
   1552c:	e1a0000c 	mov	r0, ip
   15530:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   15534:	e3a0c000 	mov	ip, #0
   15538:	e1a0000c 	mov	r0, ip
   1553c:	e12fff1e 	bx	lr

00015540 <CKeyMap::Translate(unsigned char, unsigned char)>:
   15540:	e6af3071 	sxtb	r3, r1
   15544:	e3530000 	cmp	r3, #0
   15548:	da000025 	ble	155e4 <CKeyMap::Translate(unsigned char, unsigned char)+0xa4>
   1554c:	e1a03181 	lsl	r3, r1, #3
   15550:	e19030b3 	ldrh	r3, [r0, r3]
   15554:	e3530f42 	cmp	r3, #264	; 0x108
   15558:	0a000024 	beq	155f0 <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>
   1555c:	e243cf43 	sub	ip, r3, #268	; 0x10c
   15560:	e24cc003 	sub	ip, ip, #3
   15564:	e35c000b 	cmp	ip, #11
   15568:	8a000003 	bhi	1557c <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   1556c:	e3120004 	tst	r2, #4
   15570:	12833027 	addne	r3, r3, #39	; 0x27
   15574:	16ff3073 	uxthne	r3, r3
   15578:	1a00001a 	bne	155e8 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   1557c:	e312008c 	tst	r2, #140	; 0x8c
   15580:	1a000017 	bne	155e4 <CKeyMap::Translate(unsigned char, unsigned char)+0xa4>
   15584:	e2413053 	sub	r3, r1, #83	; 0x53
   15588:	e3530010 	cmp	r3, #16
   1558c:	9a00001d 	bls	15608 <CKeyMap::Translate(unsigned char, unsigned char)+0xc8>
   15590:	e3120040 	tst	r2, #64	; 0x40
   15594:	0a00002b 	beq	15648 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   15598:	e3120022 	tst	r2, #34	; 0x22
   1559c:	13a03003 	movne	r3, #3
   155a0:	03a03002 	moveq	r3, #2
   155a4:	e0831101 	add	r1, r3, r1, lsl #2
   155a8:	e300211e 	movw	r2, #286	; 0x11e
   155ac:	e1a01081 	lsl	r1, r1, #1
   155b0:	e19030b1 	ldrh	r3, [r0, r1]
   155b4:	e1530002 	cmp	r3, r2
   155b8:	0a00001c 	beq	15630 <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   155bc:	e3530e12 	cmp	r3, #288	; 0x120
   155c0:	0a000014 	beq	15618 <CKeyMap::Translate(unsigned char, unsigned char)+0xd8>
   155c4:	e3530f47 	cmp	r3, #284	; 0x11c
   155c8:	1a000006 	bne	155e8 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   155cc:	e5902400 	ldr	r2, [r0, #1024]	; 0x400
   155d0:	e3003133 	movw	r3, #307	; 0x133
   155d4:	e16f2f12 	clz	r2, r2
   155d8:	e1a022a2 	lsr	r2, r2, #5
   155dc:	e5802400 	str	r2, [r0, #1024]	; 0x400
   155e0:	ea000000 	b	155e8 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   155e4:	e3a03000 	mov	r3, #0
   155e8:	e1a00003 	mov	r0, r3
   155ec:	e12fff1e 	bx	lr
   155f0:	e3120011 	tst	r2, #17
   155f4:	0affffe0 	beq	1557c <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   155f8:	e3120004 	tst	r2, #4
   155fc:	13003142 	movwne	r3, #322	; 0x142
   15600:	1afffff8 	bne	155e8 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   15604:	eaffffdc 	b	1557c <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   15608:	e5903404 	ldr	r3, [r0, #1028]	; 0x404
   1560c:	e2933000 	adds	r3, r3, #0
   15610:	13a03001 	movne	r3, #1
   15614:	eaffffe2 	b	155a4 <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   15618:	e5902404 	ldr	r2, [r0, #1028]	; 0x404
   1561c:	e3a03f4d 	mov	r3, #308	; 0x134
   15620:	e16f2f12 	clz	r2, r2
   15624:	e1a022a2 	lsr	r2, r2, #5
   15628:	e5802404 	str	r2, [r0, #1028]	; 0x404
   1562c:	eaffffed 	b	155e8 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   15630:	e5902408 	ldr	r2, [r0, #1032]	; 0x408
   15634:	e3003135 	movw	r3, #309	; 0x135
   15638:	e16f2f12 	clz	r2, r2
   1563c:	e1a022a2 	lsr	r2, r2, #5
   15640:	e5802408 	str	r2, [r0, #1032]	; 0x408
   15644:	eaffffe7 	b	155e8 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   15648:	e3120022 	tst	r2, #34	; 0x22
   1564c:	13a03001 	movne	r3, #1
   15650:	03a03000 	moveq	r3, #0
   15654:	eaffffd2 	b	155a4 <CKeyMap::Translate(unsigned char, unsigned char)+0x64>

00015658 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   15658:	e241c021 	sub	ip, r1, #33	; 0x21
   1565c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15660:	e6ffc07c 	uxth	ip, ip
   15664:	e300e111 	movw	lr, #273	; 0x111
   15668:	e15c000e 	cmp	ip, lr
   1566c:	8a000026 	bhi	1570c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb4>
   15670:	e241cc01 	sub	ip, r1, #256	; 0x100
   15674:	e6ffe07c 	uxth	lr, ip
   15678:	e35e0032 	cmp	lr, #50	; 0x32
   1567c:	9a00001e 	bls	156fc <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   15680:	e3120011 	tst	r2, #17
   15684:	e6af2071 	sxtb	r2, r1
   15688:	0a000009 	beq	156b4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   1568c:	e6ef1071 	uxtb	r1, r1
   15690:	e2412061 	sub	r2, r1, #97	; 0x61
   15694:	e3520019 	cmp	r2, #25
   15698:	8a00001b 	bhi	1570c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb4>
   1569c:	e2411060 	sub	r1, r1, #96	; 0x60
   156a0:	e3a02000 	mov	r2, #0
   156a4:	e5c31000 	strb	r1, [r3]
   156a8:	e1a00003 	mov	r0, r3
   156ac:	e5c32001 	strb	r2, [r3, #1]
   156b0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   156b4:	e5900400 	ldr	r0, [r0, #1024]	; 0x400
   156b8:	e3500000 	cmp	r0, #0
   156bc:	0a000009 	beq	156e8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   156c0:	e6ef1071 	uxtb	r1, r1
   156c4:	e2410041 	sub	r0, r1, #65	; 0x41
   156c8:	e3500019 	cmp	r0, #25
   156cc:	92811020 	addls	r1, r1, #32
   156d0:	96af2071 	sxtbls	r2, r1
   156d4:	9a000003 	bls	156e8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   156d8:	e2410061 	sub	r0, r1, #97	; 0x61
   156dc:	e3500019 	cmp	r0, #25
   156e0:	92411020 	subls	r1, r1, #32
   156e4:	96af2071 	sxtbls	r2, r1
   156e8:	e5c32000 	strb	r2, [r3]
   156ec:	e1a00003 	mov	r0, r3
   156f0:	e3a02000 	mov	r2, #0
   156f4:	e5c32001 	strb	r2, [r3, #1]
   156f8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   156fc:	e3013a60 	movw	r3, #6752	; 0x1a60
   15700:	e3403003 	movt	r3, #3
   15704:	e793010c 	ldr	r0, [r3, ip, lsl #2]
   15708:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1570c:	e3a00000 	mov	r0, #0
   15710:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015714 <CKeyMap::GetLEDStatus() const>:
   15714:	e5903400 	ldr	r3, [r0, #1024]	; 0x400
   15718:	e5902404 	ldr	r2, [r0, #1028]	; 0x404
   1571c:	e3530000 	cmp	r3, #0
   15720:	13a03002 	movne	r3, #2
   15724:	03a03000 	moveq	r3, #0
   15728:	e3520000 	cmp	r2, #0
   1572c:	e5902408 	ldr	r2, [r0, #1032]	; 0x408
   15730:	13833001 	orrne	r3, r3, #1
   15734:	e3520000 	cmp	r2, #0
   15738:	13833004 	orrne	r3, r3, #4
   1573c:	e1a00003 	mov	r0, r3
   15740:	e12fff1e 	bx	lr

00015744 <CKeyMap::LookupDefaultMap(char const*)>:
   15744:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15748:	e3014a60 	movw	r4, #6752	; 0x1a60
   1574c:	e3404003 	movt	r4, #3
   15750:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   15754:	e3530000 	cmp	r3, #0
   15758:	0a000017 	beq	157bc <CKeyMap::LookupDefaultMap(char const*)+0x78>
   1575c:	e30d8fec 	movw	r8, #57324	; 0xdfec
   15760:	e30d7ff8 	movw	r7, #57336	; 0xdff8
   15764:	e1a05000 	mov	r5, r0
   15768:	e28440cc 	add	r4, r4, #204	; 0xcc
   1576c:	e3408002 	movt	r8, #2
   15770:	e3407002 	movt	r7, #2
   15774:	e3a06000 	mov	r6, #0
   15778:	ea000008 	b	157a0 <CKeyMap::LookupDefaultMap(char const*)+0x5c>
   1577c:	e1a01005 	mov	r1, r5
   15780:	e4940004 	ldr	r0, [r4], #4
   15784:	eb003596 	bl	22de4 <strcmp>
   15788:	e3500000 	cmp	r0, #0
   1578c:	0a00000c 	beq	157c4 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   15790:	e5943000 	ldr	r3, [r4]
   15794:	e2866001 	add	r6, r6, #1
   15798:	e3530000 	cmp	r3, #0
   1579c:	0a000006 	beq	157bc <CKeyMap::LookupDefaultMap(char const*)+0x78>
   157a0:	e3550000 	cmp	r5, #0
   157a4:	1afffff4 	bne	1577c <CKeyMap::LookupDefaultMap(char const*)+0x38>
   157a8:	e300213f 	movw	r2, #319	; 0x13f
   157ac:	e1a01008 	mov	r1, r8
   157b0:	e1a00007 	mov	r0, r7
   157b4:	eb003cf8 	bl	24b9c <assertion_failed>
   157b8:	eaffffef 	b	1577c <CKeyMap::LookupDefaultMap(char const*)+0x38>
   157bc:	e3a00000 	mov	r0, #0
   157c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   157c4:	e30c07ec 	movw	r0, #51180	; 0xc7ec
   157c8:	e3400002 	movt	r0, #2
   157cc:	e0800506 	add	r0, r0, r6, lsl #10
   157d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000157d4 <CKeyMap::CKeyMap()>:
   157d4:	e92d4070 	push	{r4, r5, r6, lr}
   157d8:	e3a03000 	mov	r3, #0
   157dc:	e3a02001 	mov	r2, #1
   157e0:	e5803400 	str	r3, [r0, #1024]	; 0x400
   157e4:	e5802404 	str	r2, [r0, #1028]	; 0x404
   157e8:	e1a04000 	mov	r4, r0
   157ec:	e5803408 	str	r3, [r0, #1032]	; 0x408
   157f0:	eb0036be 	bl	232f0 <CKernelOptions::Get()>
   157f4:	eb0036b5 	bl	232d0 <CKernelOptions::GetKeyMap() const>
   157f8:	e2505000 	subs	r5, r0, #0
   157fc:	0a000016 	beq	1585c <CKeyMap::CKeyMap()+0x88>
   15800:	e1a00005 	mov	r0, r5
   15804:	ebffffce 	bl	15744 <CKeyMap::LookupDefaultMap(char const*)>
   15808:	e2501000 	subs	r1, r0, #0
   1580c:	0a000004 	beq	15824 <CKeyMap::CKeyMap()+0x50>
   15810:	e3a02b01 	mov	r2, #1024	; 0x400
   15814:	e1a00004 	mov	r0, r4
   15818:	eb00365f 	bl	2319c <memcpy>
   1581c:	e1a00004 	mov	r0, r4
   15820:	e8bd8070 	pop	{r4, r5, r6, pc}
   15824:	e30e0008 	movw	r0, #57352	; 0xe008
   15828:	e3400002 	movt	r0, #2
   1582c:	ebffffc4 	bl	15744 <CKeyMap::LookupDefaultMap(char const*)>
   15830:	e2501000 	subs	r1, r0, #0
   15834:	1afffff5 	bne	15810 <CKeyMap::CKeyMap()+0x3c>
   15838:	e30d1fec 	movw	r1, #57324	; 0xdfec
   1583c:	e30e000c 	movw	r0, #57356	; 0xe00c
   15840:	e3401002 	movt	r1, #2
   15844:	e3400002 	movt	r0, #2
   15848:	e3a02080 	mov	r2, #128	; 0x80
   1584c:	eb003cd2 	bl	24b9c <assertion_failed>
   15850:	e30c17ec 	movw	r1, #51180	; 0xc7ec
   15854:	e3401002 	movt	r1, #2
   15858:	eaffffec 	b	15810 <CKeyMap::CKeyMap()+0x3c>
   1585c:	e30d1fec 	movw	r1, #57324	; 0xdfec
   15860:	e30d0ff8 	movw	r0, #57336	; 0xdff8
   15864:	e3401002 	movt	r1, #2
   15868:	e3400002 	movt	r0, #2
   1586c:	e3a0207a 	mov	r2, #122	; 0x7a
   15870:	eb003cc9 	bl	24b9c <assertion_failed>
   15874:	eaffffe1 	b	15800 <CKeyMap::CKeyMap()+0x2c>

00015878 <CMouseBehaviour::CMouseBehaviour()>:
   15878:	e3a02000 	mov	r2, #0
   1587c:	e5802000 	str	r2, [r0]
   15880:	e5802004 	str	r2, [r0, #4]
   15884:	e5802008 	str	r2, [r0, #8]
   15888:	e580200c 	str	r2, [r0, #12]
   1588c:	e5802010 	str	r2, [r0, #16]
   15890:	e5802014 	str	r2, [r0, #20]
   15894:	e5802018 	str	r2, [r0, #24]
   15898:	e12fff1e 	bx	lr

0001589c <CMouseBehaviour::~CMouseBehaviour()>:
   1589c:	e12fff1e 	bx	lr

000158a0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   158a0:	e5903000 	ldr	r3, [r0]
   158a4:	e92d4070 	push	{r4, r5, r6, lr}
   158a8:	e3530000 	cmp	r3, #0
   158ac:	e24dd038 	sub	sp, sp, #56	; 0x38
   158b0:	e1a04000 	mov	r4, r0
   158b4:	e1a06001 	mov	r6, r1
   158b8:	e1a05002 	mov	r5, r2
   158bc:	1a00002a 	bne	1596c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xcc>
   158c0:	e3560000 	cmp	r6, #0
   158c4:	e5846000 	str	r6, [r4]
   158c8:	0a000030 	beq	15990 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf0>
   158cc:	e5943004 	ldr	r3, [r4, #4]
   158d0:	e3530000 	cmp	r3, #0
   158d4:	1a000036 	bne	159b4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x114>
   158d8:	e3550000 	cmp	r5, #0
   158dc:	e5845004 	str	r5, [r4, #4]
   158e0:	0a00003c 	beq	159d8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x138>
   158e4:	e5943000 	ldr	r3, [r4]
   158e8:	e2855001 	add	r5, r5, #1
   158ec:	e28d000c 	add	r0, sp, #12
   158f0:	e2833001 	add	r3, r3, #1
   158f4:	e1a050a5 	lsr	r5, r5, #1
   158f8:	e584500c 	str	r5, [r4, #12]
   158fc:	e1a030a3 	lsr	r3, r3, #1
   15900:	e5843008 	str	r3, [r4, #8]
   15904:	eb002d50 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   15908:	e59fc0e8 	ldr	ip, [pc, #232]	; 159f8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x158>
   1590c:	e3a03024 	mov	r3, #36	; 0x24
   15910:	e3081010 	movw	r1, #32784	; 0x8010
   15914:	e28d000c 	add	r0, sp, #12
   15918:	e3a02018 	mov	r2, #24
   1591c:	e58d2000 	str	r2, [sp]
   15920:	e28d2014 	add	r2, sp, #20
   15924:	e3a0e010 	mov	lr, #16
   15928:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   1592c:	e58de020 	str	lr, [sp, #32]
   15930:	e3a0c000 	mov	ip, #0
   15934:	e58de024 	str	lr, [sp, #36]	; 0x24
   15938:	e58dc028 	str	ip, [sp, #40]	; 0x28
   1593c:	e58dc030 	str	ip, [sp, #48]	; 0x30
   15940:	e58dc034 	str	ip, [sp, #52]	; 0x34
   15944:	eb002d88 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15948:	e2504000 	subs	r4, r0, #0
   1594c:	e28d000c 	add	r0, sp, #12
   15950:	159d4020 	ldrne	r4, [sp, #32]
   15954:	116f4f14 	clzne	r4, r4
   15958:	11a042a4 	lsrne	r4, r4, #5
   1595c:	eb002d40 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   15960:	e1a00004 	mov	r0, r4
   15964:	e28dd038 	add	sp, sp, #56	; 0x38
   15968:	e8bd8070 	pop	{r4, r5, r6, pc}
   1596c:	e30e14e0 	movw	r1, #58592	; 0xe4e0
   15970:	e30e04f4 	movw	r0, #58612	; 0xe4f4
   15974:	e3401002 	movt	r1, #2
   15978:	e3400002 	movt	r0, #2
   1597c:	e3a0204b 	mov	r2, #75	; 0x4b
   15980:	eb003c85 	bl	24b9c <assertion_failed>
   15984:	e3560000 	cmp	r6, #0
   15988:	e5846000 	str	r6, [r4]
   1598c:	1affffce 	bne	158cc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x2c>
   15990:	e30e14e0 	movw	r1, #58592	; 0xe4e0
   15994:	e30e0508 	movw	r0, #58632	; 0xe508
   15998:	e3401002 	movt	r1, #2
   1599c:	e3400002 	movt	r0, #2
   159a0:	e3a0204d 	mov	r2, #77	; 0x4d
   159a4:	eb003c7c 	bl	24b9c <assertion_failed>
   159a8:	e5943004 	ldr	r3, [r4, #4]
   159ac:	e3530000 	cmp	r3, #0
   159b0:	0affffc8 	beq	158d8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x38>
   159b4:	e30e14e0 	movw	r1, #58592	; 0xe4e0
   159b8:	e30e051c 	movw	r0, #58652	; 0xe51c
   159bc:	e3401002 	movt	r1, #2
   159c0:	e3400002 	movt	r0, #2
   159c4:	e3a0204f 	mov	r2, #79	; 0x4f
   159c8:	eb003c73 	bl	24b9c <assertion_failed>
   159cc:	e3550000 	cmp	r5, #0
   159d0:	e5845004 	str	r5, [r4, #4]
   159d4:	1affffc2 	bne	158e4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>
   159d8:	e30e14e0 	movw	r1, #58592	; 0xe4e0
   159dc:	e30e0534 	movw	r0, #58676	; 0xe534
   159e0:	e3401002 	movt	r1, #2
   159e4:	e3400002 	movt	r0, #2
   159e8:	e3a02051 	mov	r2, #81	; 0x51
   159ec:	eb003c6a 	bl	24b9c <assertion_failed>
   159f0:	e5945004 	ldr	r5, [r4, #4]
   159f4:	eaffffba 	b	158e4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>
   159f8:	c002e0e0 	.word	0xc002e0e0

000159fc <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   159fc:	e5903018 	ldr	r3, [r0, #24]
   15a00:	e92d4070 	push	{r4, r5, r6, lr}
   15a04:	e3530000 	cmp	r3, #0
   15a08:	e1a04000 	mov	r4, r0
   15a0c:	e1a05001 	mov	r5, r1
   15a10:	0a000005 	beq	15a2c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x30>
   15a14:	e30e14e0 	movw	r1, #58592	; 0xe4e0
   15a18:	e30e0548 	movw	r0, #58696	; 0xe548
   15a1c:	e3401002 	movt	r1, #2
   15a20:	e3400002 	movt	r0, #2
   15a24:	e3a0206d 	mov	r2, #109	; 0x6d
   15a28:	eb003c5b 	bl	24b9c <assertion_failed>
   15a2c:	e3550000 	cmp	r5, #0
   15a30:	e5845018 	str	r5, [r4, #24]
   15a34:	18bd8070 	popne	{r4, r5, r6, pc}
   15a38:	e30e14e0 	movw	r1, #58592	; 0xe4e0
   15a3c:	e30c018c 	movw	r0, #49548	; 0xc18c
   15a40:	e3401002 	movt	r1, #2
   15a44:	e3400002 	movt	r0, #2
   15a48:	e3a0206f 	mov	r2, #111	; 0x6f
   15a4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15a50:	ea003c51 	b	24b9c <assertion_failed>

00015a54 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, int)>:
   15a54:	e92d4070 	push	{r4, r5, r6, lr}
   15a58:	e24dd030 	sub	sp, sp, #48	; 0x30
   15a5c:	e1a06000 	mov	r6, r0
   15a60:	e28d000c 	add	r0, sp, #12
   15a64:	e1a05001 	mov	r5, r1
   15a68:	e1a04002 	mov	r4, r2
   15a6c:	eb002cf6 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   15a70:	e2944000 	adds	r4, r4, #0
   15a74:	e3a0301c 	mov	r3, #28
   15a78:	e3081011 	movw	r1, #32785	; 0x8011
   15a7c:	e28d000c 	add	r0, sp, #12
   15a80:	e3a02010 	mov	r2, #16
   15a84:	e58d2000 	str	r2, [sp]
   15a88:	e28d2014 	add	r2, sp, #20
   15a8c:	e3a0c001 	mov	ip, #1
   15a90:	13a04001 	movne	r4, #1
   15a94:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   15a98:	e58d4020 	str	r4, [sp, #32]
   15a9c:	e58d6024 	str	r6, [sp, #36]	; 0x24
   15aa0:	e58d5028 	str	r5, [sp, #40]	; 0x28
   15aa4:	eb002d30 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15aa8:	e2504000 	subs	r4, r0, #0
   15aac:	e28d000c 	add	r0, sp, #12
   15ab0:	159d4020 	ldrne	r4, [sp, #32]
   15ab4:	116f4f14 	clzne	r4, r4
   15ab8:	11a042a4 	lsrne	r4, r4, #5
   15abc:	eb002ce8 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   15ac0:	e1a00004 	mov	r0, r4
   15ac4:	e28dd030 	add	sp, sp, #48	; 0x30
   15ac8:	e8bd8070 	pop	{r4, r5, r6, pc}

00015acc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   15acc:	e5903000 	ldr	r3, [r0]
   15ad0:	e92d4070 	push	{r4, r5, r6, lr}
   15ad4:	e3530000 	cmp	r3, #0
   15ad8:	e1a04000 	mov	r4, r0
   15adc:	e1a05001 	mov	r5, r1
   15ae0:	e1a06002 	mov	r6, r2
   15ae4:	0a000018 	beq	15b4c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x80>
   15ae8:	e5943004 	ldr	r3, [r4, #4]
   15aec:	e3530000 	cmp	r3, #0
   15af0:	0a00000e 	beq	15b30 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   15af4:	e5943000 	ldr	r3, [r4]
   15af8:	e1530005 	cmp	r3, r5
   15afc:	9a000009 	bls	15b28 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   15b00:	e5943004 	ldr	r3, [r4, #4]
   15b04:	e1530006 	cmp	r3, r6
   15b08:	9a000006 	bls	15b28 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   15b0c:	e5943010 	ldr	r3, [r4, #16]
   15b10:	e5845008 	str	r5, [r4, #8]
   15b14:	e3530000 	cmp	r3, #0
   15b18:	e584600c 	str	r6, [r4, #12]
   15b1c:	1a000011 	bne	15b68 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x9c>
   15b20:	e3a00001 	mov	r0, #1
   15b24:	e8bd8070 	pop	{r4, r5, r6, pc}
   15b28:	e3a00000 	mov	r0, #0
   15b2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15b30:	e30e14e0 	movw	r1, #58592	; 0xe4e0
   15b34:	e30e0534 	movw	r0, #58676	; 0xe534
   15b38:	e3401002 	movt	r1, #2
   15b3c:	e3400002 	movt	r0, #2
   15b40:	e3a02075 	mov	r2, #117	; 0x75
   15b44:	eb003c14 	bl	24b9c <assertion_failed>
   15b48:	eaffffe9 	b	15af4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x28>
   15b4c:	e30e14e0 	movw	r1, #58592	; 0xe4e0
   15b50:	e30e0508 	movw	r0, #58632	; 0xe508
   15b54:	e3401002 	movt	r1, #2
   15b58:	e3400002 	movt	r0, #2
   15b5c:	e3a02074 	mov	r2, #116	; 0x74
   15b60:	eb003c0d 	bl	24b9c <assertion_failed>
   15b64:	eaffffdf 	b	15ae8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x1c>
   15b68:	e1a01006 	mov	r1, r6
   15b6c:	e1a00005 	mov	r0, r5
   15b70:	e3a02001 	mov	r2, #1
   15b74:	e8bd4070 	pop	{r4, r5, r6, lr}
   15b78:	eaffffb5 	b	15a54 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, int)>

00015b7c <CMouseBehaviour::ShowCursor(int)>:
   15b7c:	e5902008 	ldr	r2, [r0, #8]
   15b80:	e5903000 	ldr	r3, [r0]
   15b84:	e92d4070 	push	{r4, r5, r6, lr}
   15b88:	e1520003 	cmp	r2, r3
   15b8c:	e5905010 	ldr	r5, [r0, #16]
   15b90:	e1a04000 	mov	r4, r0
   15b94:	e5801010 	str	r1, [r0, #16]
   15b98:	2a00000f 	bcs	15bdc <CMouseBehaviour::ShowCursor(int)+0x60>
   15b9c:	e594100c 	ldr	r1, [r4, #12]
   15ba0:	e5943004 	ldr	r3, [r4, #4]
   15ba4:	e1510003 	cmp	r1, r3
   15ba8:	3a000006 	bcc	15bc8 <CMouseBehaviour::ShowCursor(int)+0x4c>
   15bac:	e30e14e0 	movw	r1, #58592	; 0xe4e0
   15bb0:	e30e057c 	movw	r0, #58748	; 0xe57c
   15bb4:	e3401002 	movt	r1, #2
   15bb8:	e3400002 	movt	r0, #2
   15bbc:	e3a0208d 	mov	r2, #141	; 0x8d
   15bc0:	eb003bf5 	bl	24b9c <assertion_failed>
   15bc4:	e594100c 	ldr	r1, [r4, #12]
   15bc8:	e5942010 	ldr	r2, [r4, #16]
   15bcc:	e5940008 	ldr	r0, [r4, #8]
   15bd0:	ebffff9f 	bl	15a54 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, int)>
   15bd4:	e1a00005 	mov	r0, r5
   15bd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   15bdc:	e30e14e0 	movw	r1, #58592	; 0xe4e0
   15be0:	e30e0560 	movw	r0, #58720	; 0xe560
   15be4:	e3401002 	movt	r1, #2
   15be8:	e3400002 	movt	r0, #2
   15bec:	e3a0208c 	mov	r2, #140	; 0x8c
   15bf0:	eb003be9 	bl	24b9c <assertion_failed>
   15bf4:	eaffffe8 	b	15b9c <CMouseBehaviour::ShowCursor(int)+0x20>

00015bf8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   15bf8:	e590c000 	ldr	ip, [r0]
   15bfc:	e35c0000 	cmp	ip, #0
   15c00:	012fff1e 	bxeq	lr
   15c04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c08:	e590e004 	ldr	lr, [r0, #4]
   15c0c:	e35e0000 	cmp	lr, #0
   15c10:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c14:	e3a08012 	mov	r8, #18
   15c18:	e3069667 	movw	r9, #26215	; 0x6667
   15c1c:	e0020298 	mul	r2, r8, r2
   15c20:	e3469666 	movt	r9, #26214	; 0x6666
   15c24:	e0080398 	mul	r8, r8, r3
   15c28:	e5907008 	ldr	r7, [r0, #8]
   15c2c:	e590600c 	ldr	r6, [r0, #12]
   15c30:	e1a05001 	mov	r5, r1
   15c34:	e1a04000 	mov	r4, r0
   15c38:	e0c10992 	smull	r0, r1, r2, r9
   15c3c:	e1a00fc2 	asr	r0, r2, #31
   15c40:	e0c32998 	smull	r2, r3, r8, r9
   15c44:	e1a08fc8 	asr	r8, r8, #31
   15c48:	e0600141 	rsb	r0, r0, r1, asr #2
   15c4c:	e0800007 	add	r0, r0, r7
   15c50:	e15c0000 	cmp	ip, r0
   15c54:	e0683143 	rsb	r3, r8, r3, asr #2
   15c58:	e0863003 	add	r3, r6, r3
   15c5c:	9a00002d 	bls	15d18 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x120>
   15c60:	e15e0003 	cmp	lr, r3
   15c64:	e5840008 	str	r0, [r4, #8]
   15c68:	e584300c 	str	r3, [r4, #12]
   15c6c:	8a00003c 	bhi	15d64 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x16c>
   15c70:	e1570000 	cmp	r7, r0
   15c74:	e584600c 	str	r6, [r4, #12]
   15c78:	0a00000a 	beq	15ca8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xb0>
   15c7c:	e5943010 	ldr	r3, [r4, #16]
   15c80:	e3530000 	cmp	r3, #0
   15c84:	1a00002c 	bne	15d3c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x144>
   15c88:	e5946018 	ldr	r6, [r4, #24]
   15c8c:	e3560000 	cmp	r6, #0
   15c90:	0a000027 	beq	15d34 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   15c94:	e594300c 	ldr	r3, [r4, #12]
   15c98:	e1a01005 	mov	r1, r5
   15c9c:	e5942008 	ldr	r2, [r4, #8]
   15ca0:	e3a00000 	mov	r0, #0
   15ca4:	e12fff36 	blx	r6
   15ca8:	e5943014 	ldr	r3, [r4, #20]
   15cac:	e1550003 	cmp	r5, r3
   15cb0:	0a00001f 	beq	15d34 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   15cb4:	e5942018 	ldr	r2, [r4, #24]
   15cb8:	e3520000 	cmp	r2, #0
   15cbc:	0a00001c 	beq	15d34 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   15cc0:	e3a07001 	mov	r7, #1
   15cc4:	e3a06000 	mov	r6, #0
   15cc8:	e1a01617 	lsl	r1, r7, r6
   15ccc:	e1110003 	tst	r1, r3
   15cd0:	0a000008 	beq	15cf8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x100>
   15cd4:	e1150001 	tst	r5, r1
   15cd8:	0a00001b 	beq	15d4c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x154>
   15cdc:	e2866001 	add	r6, r6, #1
   15ce0:	e3560003 	cmp	r6, #3
   15ce4:	0a000012 	beq	15d34 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   15ce8:	e5943014 	ldr	r3, [r4, #20]
   15cec:	e1a01617 	lsl	r1, r7, r6
   15cf0:	e1110003 	tst	r1, r3
   15cf4:	1afffff6 	bne	15cd4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xdc>
   15cf8:	e1150001 	tst	r5, r1
   15cfc:	0afffff6 	beq	15cdc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe4>
   15d00:	e5948018 	ldr	r8, [r4, #24]
   15d04:	e3a00001 	mov	r0, #1
   15d08:	e594300c 	ldr	r3, [r4, #12]
   15d0c:	e5942008 	ldr	r2, [r4, #8]
   15d10:	e12fff38 	blx	r8
   15d14:	eafffff0 	b	15cdc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe4>
   15d18:	e15e0003 	cmp	lr, r3
   15d1c:	e584300c 	str	r3, [r4, #12]
   15d20:	9a000012 	bls	15d70 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x178>
   15d24:	e1560003 	cmp	r6, r3
   15d28:	11a00007 	movne	r0, r7
   15d2c:	1affffd2 	bne	15c7c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   15d30:	eaffffdc 	b	15ca8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xb0>
   15d34:	e5845014 	str	r5, [r4, #20]
   15d38:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d3c:	e3a02001 	mov	r2, #1
   15d40:	e594100c 	ldr	r1, [r4, #12]
   15d44:	ebffff42 	bl	15a54 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, int)>
   15d48:	eaffffce 	b	15c88 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x90>
   15d4c:	e5948018 	ldr	r8, [r4, #24]
   15d50:	e3a00002 	mov	r0, #2
   15d54:	e594300c 	ldr	r3, [r4, #12]
   15d58:	e5942008 	ldr	r2, [r4, #8]
   15d5c:	e12fff38 	blx	r8
   15d60:	eaffffdd 	b	15cdc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe4>
   15d64:	e1570000 	cmp	r7, r0
   15d68:	1affffc3 	bne	15c7c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   15d6c:	eaffffec 	b	15d24 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x12c>
   15d70:	e584600c 	str	r6, [r4, #12]
   15d74:	eaffffcb 	b	15ca8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xb0>

00015d78 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*)>:
   15d78:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15d7c:	e280702c 	add	r7, r0, #44	; 0x2c
   15d80:	e1a04000 	mov	r4, r0
   15d84:	e2806050 	add	r6, r0, #80	; 0x50
   15d88:	e1a09003 	mov	r9, r3
   15d8c:	e1a08001 	mov	r8, r1
   15d90:	e1a0a002 	mov	sl, r2
   15d94:	e2845078 	add	r5, r4, #120	; 0x78
   15d98:	eb001ec5 	bl	1d8b4 <CNetConfig::CNetConfig()>
   15d9c:	e1a01004 	mov	r1, r4
   15da0:	e1a00007 	mov	r0, r7
   15da4:	eb000b19 	bl	18a10 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*)>
   15da8:	e1a02007 	mov	r2, r7
   15dac:	e1a01004 	mov	r1, r4
   15db0:	e1a00006 	mov	r0, r6
   15db4:	eb0009a7 	bl	18458 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   15db8:	e1a02006 	mov	r2, r6
   15dbc:	e1a01004 	mov	r1, r4
   15dc0:	e1a00005 	mov	r0, r5
   15dc4:	eb00072b 	bl	17a78 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   15dc8:	e1a02005 	mov	r2, r5
   15dcc:	e1a01004 	mov	r1, r4
   15dd0:	e28400bc 	add	r0, r4, #188	; 0xbc
   15dd4:	eb000328 	bl	16a7c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   15dd8:	e16f1f18 	clz	r1, r8
   15ddc:	e3a03000 	mov	r3, #0
   15de0:	e1a00004 	mov	r0, r4
   15de4:	e1a012a1 	lsr	r1, r1, #5
   15de8:	e5843114 	str	r3, [r4, #276]	; 0x114
   15dec:	e5841110 	str	r1, [r4, #272]	; 0x110
   15df0:	eb001e76 	bl	1d7d0 <CNetConfig::SetDHCP(int)>
   15df4:	e5943110 	ldr	r3, [r4, #272]	; 0x110
   15df8:	e3530000 	cmp	r3, #0
   15dfc:	0a000001 	beq	15e08 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*)+0x90>
   15e00:	e1a00004 	mov	r0, r4
   15e04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e08:	e1a01008 	mov	r1, r8
   15e0c:	e1a00004 	mov	r0, r4
   15e10:	eb001ec6 	bl	1d930 <CNetConfig::SetIPAddress(unsigned char const*)>
   15e14:	e1a0100a 	mov	r1, sl
   15e18:	e1a00004 	mov	r0, r4
   15e1c:	eb001eca 	bl	1d94c <CNetConfig::SetNetMask(unsigned char const*)>
   15e20:	e3590000 	cmp	r9, #0
   15e24:	0a000002 	beq	15e34 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*)+0xbc>
   15e28:	e1a01009 	mov	r1, r9
   15e2c:	e1a00004 	mov	r0, r4
   15e30:	eb001e6c 	bl	1d7e8 <CNetConfig::SetDefaultGateway(unsigned char const*)>
   15e34:	e59d3020 	ldr	r3, [sp, #32]
   15e38:	e3530000 	cmp	r3, #0
   15e3c:	0affffef 	beq	15e00 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*)+0x88>
   15e40:	e1a00004 	mov	r0, r4
   15e44:	e1a01003 	mov	r1, r3
   15e48:	eb001e68 	bl	1d7f0 <CNetConfig::SetDNSServer(unsigned char const*)>
   15e4c:	e1a00004 	mov	r0, r4
   15e50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00015e54 <CNetSubSystem::~CNetSubSystem()>:
   15e54:	e92d4010 	push	{r4, lr}
   15e58:	e1a04000 	mov	r4, r0
   15e5c:	e5900114 	ldr	r0, [r0, #276]	; 0x114
   15e60:	e3500000 	cmp	r0, #0
   15e64:	0a000002 	beq	15e74 <CNetSubSystem::~CNetSubSystem()+0x20>
   15e68:	e5903000 	ldr	r3, [r0]
   15e6c:	e5933004 	ldr	r3, [r3, #4]
   15e70:	e12fff33 	blx	r3
   15e74:	e3a03000 	mov	r3, #0
   15e78:	e28400bc 	add	r0, r4, #188	; 0xbc
   15e7c:	e5843114 	str	r3, [r4, #276]	; 0x114
   15e80:	eb00060a 	bl	176b0 <CTransportLayer::~CTransportLayer()>
   15e84:	e2840078 	add	r0, r4, #120	; 0x78
   15e88:	eb00071f 	bl	17b0c <CNetworkLayer::~CNetworkLayer()>
   15e8c:	e2840050 	add	r0, r4, #80	; 0x50
   15e90:	eb000991 	bl	184dc <CLinkLayer::~CLinkLayer()>
   15e94:	e284002c 	add	r0, r4, #44	; 0x2c
   15e98:	eb000ae8 	bl	18a40 <CNetDeviceLayer::~CNetDeviceLayer()>
   15e9c:	e1a00004 	mov	r0, r4
   15ea0:	eb001e3c 	bl	1d798 <CNetConfig::~CNetConfig()>
   15ea4:	e1a00004 	mov	r0, r4
   15ea8:	e8bd8010 	pop	{r4, pc}

00015eac <CNetSubSystem::Initialize()>:
   15eac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15eb0:	e1a04000 	mov	r4, r0
   15eb4:	eb001e4f 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   15eb8:	eb001fa7 	bl	1dd5c <CIPAddress::IsNull() const>
   15ebc:	e1a01000 	mov	r1, r0
   15ec0:	e5840110 	str	r0, [r4, #272]	; 0x110
   15ec4:	e1a00004 	mov	r0, r4
   15ec8:	eb001e40 	bl	1d7d0 <CNetConfig::SetDHCP(int)>
   15ecc:	eb00338c 	bl	22d04 <CTimer::Get()>
   15ed0:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   15ed4:	eb00333d 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
   15ed8:	e284002c 	add	r0, r4, #44	; 0x2c
   15edc:	eb000ae7 	bl	18a80 <CNetDeviceLayer::Initialize()>
   15ee0:	e3500000 	cmp	r0, #0
   15ee4:	1a000001 	bne	15ef0 <CNetSubSystem::Initialize()+0x44>
   15ee8:	e3a00000 	mov	r0, #0
   15eec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15ef0:	e2840050 	add	r0, r4, #80	; 0x50
   15ef4:	eb000990 	bl	1853c <CLinkLayer::Initialize()>
   15ef8:	e3500000 	cmp	r0, #0
   15efc:	0afffff9 	beq	15ee8 <CNetSubSystem::Initialize()+0x3c>
   15f00:	e2840078 	add	r0, r4, #120	; 0x78
   15f04:	eb00071d 	bl	17b80 <CNetworkLayer::Initialize()>
   15f08:	e3500000 	cmp	r0, #0
   15f0c:	0afffff5 	beq	15ee8 <CNetSubSystem::Initialize()+0x3c>
   15f10:	e28400bc 	add	r0, r4, #188	; 0xbc
   15f14:	eb000303 	bl	16b28 <CTransportLayer::Initialize()>
   15f18:	e3500000 	cmp	r0, #0
   15f1c:	0afffff1 	beq	15ee8 <CNetSubSystem::Initialize()+0x3c>
   15f20:	e3a00054 	mov	r0, #84	; 0x54
   15f24:	eb003010 	bl	21f6c <operator new(unsigned int)>
   15f28:	e1a01004 	mov	r1, r4
   15f2c:	eb00007d 	bl	16128 <CNetTask::CNetTask(CNetSubSystem*)>
   15f30:	e5943110 	ldr	r3, [r4, #272]	; 0x110
   15f34:	e3530000 	cmp	r3, #0
   15f38:	0a000022 	beq	15fc8 <CNetSubSystem::Initialize()+0x11c>
   15f3c:	e5943114 	ldr	r3, [r4, #276]	; 0x114
   15f40:	e3530000 	cmp	r3, #0
   15f44:	0a000005 	beq	15f60 <CNetSubSystem::Initialize()+0xb4>
   15f48:	e30e1598 	movw	r1, #58776	; 0xe598
   15f4c:	e30e05ac 	movw	r0, #58796	; 0xe5ac
   15f50:	e3401002 	movt	r1, #2
   15f54:	e3400002 	movt	r0, #2
   15f58:	e3a0205c 	mov	r2, #92	; 0x5c
   15f5c:	eb003b0e 	bl	24b9c <assertion_failed>
   15f60:	e3a000bc 	mov	r0, #188	; 0xbc
   15f64:	eb003000 	bl	21f6c <operator new(unsigned int)>
   15f68:	e1a01004 	mov	r1, r4
   15f6c:	e1a05000 	mov	r5, r0
   15f70:	eb0022d9 	bl	1eadc <CDHCPClient::CDHCPClient(CNetSubSystem*)>
   15f74:	e5943110 	ldr	r3, [r4, #272]	; 0x110
   15f78:	e5845114 	str	r5, [r4, #276]	; 0x114
   15f7c:	e3530000 	cmp	r3, #0
   15f80:	0a000010 	beq	15fc8 <CNetSubSystem::Initialize()+0x11c>
   15f84:	e30e7598 	movw	r7, #58776	; 0xe598
   15f88:	e30e65c0 	movw	r6, #58816	; 0xe5c0
   15f8c:	e3407002 	movt	r7, #2
   15f90:	e3406002 	movt	r6, #2
   15f94:	e1a00005 	mov	r0, r5
   15f98:	ea000005 	b	15fb4 <CNetSubSystem::Initialize()+0x108>
   15f9c:	eb002ad7 	bl	20b00 <CScheduler::Get()>
   15fa0:	eb002a28 	bl	20848 <CScheduler::Yield()>
   15fa4:	e5943110 	ldr	r3, [r4, #272]	; 0x110
   15fa8:	e3530000 	cmp	r3, #0
   15fac:	0a000005 	beq	15fc8 <CNetSubSystem::Initialize()+0x11c>
   15fb0:	e5940114 	ldr	r0, [r4, #276]	; 0x114
   15fb4:	e3500000 	cmp	r0, #0
   15fb8:	0a000004 	beq	15fd0 <CNetSubSystem::Initialize()+0x124>
   15fbc:	eb0022ef 	bl	1eb80 <CDHCPClient::IsBound() const>
   15fc0:	e3500000 	cmp	r0, #0
   15fc4:	0afffff4 	beq	15f9c <CNetSubSystem::Initialize()+0xf0>
   15fc8:	e3a00001 	mov	r0, #1
   15fcc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15fd0:	e1a00006 	mov	r0, r6
   15fd4:	e3a0208a 	mov	r2, #138	; 0x8a
   15fd8:	e1a01007 	mov	r1, r7
   15fdc:	eb003aee 	bl	24b9c <assertion_failed>
   15fe0:	e5940114 	ldr	r0, [r4, #276]	; 0x114
   15fe4:	eafffff4 	b	15fbc <CNetSubSystem::Initialize()+0x110>

00015fe8 <CNetSubSystem::Process()>:
   15fe8:	e92d4010 	push	{r4, lr}
   15fec:	e1a04000 	mov	r4, r0
   15ff0:	e280002c 	add	r0, r0, #44	; 0x2c
   15ff4:	eb000acc 	bl	18b2c <CNetDeviceLayer::Process()>
   15ff8:	e2840050 	add	r0, r4, #80	; 0x50
   15ffc:	eb00096f 	bl	185c0 <CLinkLayer::Process()>
   16000:	e2840078 	add	r0, r4, #120	; 0x78
   16004:	eb000708 	bl	17c2c <CNetworkLayer::Process()>
   16008:	e28400bc 	add	r0, r4, #188	; 0xbc
   1600c:	e8bd4010 	pop	{r4, lr}
   16010:	ea0005cc 	b	17748 <CTransportLayer::Process()>

00016014 <CNetSubSystem::GetConfig()>:
   16014:	e12fff1e 	bx	lr

00016018 <CNetSubSystem::GetNetDeviceLayer()>:
   16018:	e280002c 	add	r0, r0, #44	; 0x2c
   1601c:	e12fff1e 	bx	lr

00016020 <CNetSubSystem::GetTransportLayer()>:
   16020:	e28000bc 	add	r0, r0, #188	; 0xbc
   16024:	e12fff1e 	bx	lr

00016028 <CNetSubSystem::IsRunning() const>:
   16028:	e5903110 	ldr	r3, [r0, #272]	; 0x110
   1602c:	e3530000 	cmp	r3, #0
   16030:	0a000004 	beq	16048 <CNetSubSystem::IsRunning() const+0x20>
   16034:	e5903114 	ldr	r3, [r0, #276]	; 0x114
   16038:	e3530000 	cmp	r3, #0
   1603c:	0a000003 	beq	16050 <CNetSubSystem::IsRunning() const+0x28>
   16040:	e1a00003 	mov	r0, r3
   16044:	ea0022cd 	b	1eb80 <CDHCPClient::IsBound() const>
   16048:	e3a00001 	mov	r0, #1
   1604c:	e12fff1e 	bx	lr
   16050:	e92d4010 	push	{r4, lr}
   16054:	e30e1598 	movw	r1, #58776	; 0xe598
   16058:	e1a04000 	mov	r4, r0
   1605c:	e3401002 	movt	r1, #2
   16060:	e30e05c0 	movw	r0, #58816	; 0xe5c0
   16064:	e3a0208a 	mov	r2, #138	; 0x8a
   16068:	e3400002 	movt	r0, #2
   1606c:	eb003aca 	bl	24b9c <assertion_failed>
   16070:	e5943114 	ldr	r3, [r4, #276]	; 0x114
   16074:	e8bd4010 	pop	{r4, lr}
   16078:	e1a00003 	mov	r0, r3
   1607c:	ea0022bf 	b	1eb80 <CDHCPClient::IsBound() const>

00016080 <CNetTask::~CNetTask()>:
   16080:	e59f301c 	ldr	r3, [pc, #28]	; 160a4 <CNetTask::~CNetTask()+0x24>
   16084:	e3a02000 	mov	r2, #0
   16088:	e92d4010 	push	{r4, lr}
   1608c:	e1a04000 	mov	r4, r0
   16090:	e5802050 	str	r2, [r0, #80]	; 0x50
   16094:	e5803000 	str	r3, [r0]
   16098:	eb00288b 	bl	202cc <CTask::~CTask()>
   1609c:	e1a00004 	mov	r0, r4
   160a0:	e8bd8010 	pop	{r4, pc}
   160a4:	0002e5dc 	.word	0x0002e5dc

000160a8 <CNetTask::~CNetTask()>:
   160a8:	e59f3028 	ldr	r3, [pc, #40]	; 160d8 <CNetTask::~CNetTask()+0x30>
   160ac:	e3a02000 	mov	r2, #0
   160b0:	e92d4010 	push	{r4, lr}
   160b4:	e1a04000 	mov	r4, r0
   160b8:	e5802050 	str	r2, [r0, #80]	; 0x50
   160bc:	e5803000 	str	r3, [r0]
   160c0:	eb002881 	bl	202cc <CTask::~CTask()>
   160c4:	e1a00004 	mov	r0, r4
   160c8:	e3a01054 	mov	r1, #84	; 0x54
   160cc:	eb002faa 	bl	21f7c <operator delete(void*, unsigned int)>
   160d0:	e1a00004 	mov	r0, r4
   160d4:	e8bd8010 	pop	{r4, pc}
   160d8:	0002e5dc 	.word	0x0002e5dc

000160dc <CNetTask::Run()>:
   160dc:	e92d4010 	push	{r4, lr}
   160e0:	e30e65e8 	movw	r6, #58856	; 0xe5e8
   160e4:	e30a56e8 	movw	r5, #42728	; 0xa6e8
   160e8:	e3406002 	movt	r6, #2
   160ec:	e3405002 	movt	r5, #2
   160f0:	e1a04000 	mov	r4, r0
   160f4:	ea000002 	b	16104 <CNetTask::Run()+0x28>
   160f8:	ebffffba 	bl	15fe8 <CNetSubSystem::Process()>
   160fc:	eb002a7f 	bl	20b00 <CScheduler::Get()>
   16100:	eb0029d0 	bl	20848 <CScheduler::Yield()>
   16104:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   16108:	e3500000 	cmp	r0, #0
   1610c:	1afffff9 	bne	160f8 <CNetTask::Run()+0x1c>
   16110:	e1a00005 	mov	r0, r5
   16114:	e3a02026 	mov	r2, #38	; 0x26
   16118:	e1a01006 	mov	r1, r6
   1611c:	eb003a9e 	bl	24b9c <assertion_failed>
   16120:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   16124:	eafffff3 	b	160f8 <CNetTask::Run()+0x1c>

00016128 <CNetTask::CNetTask(CNetSubSystem*)>:
   16128:	e92d4070 	push	{r4, r5, r6, lr}
   1612c:	e1a05001 	mov	r5, r1
   16130:	e3a01901 	mov	r1, #16384	; 0x4000
   16134:	e1a04000 	mov	r4, r0
   16138:	eb0028b3 	bl	2040c <CTask::CTask(unsigned int)>
   1613c:	e59f300c 	ldr	r3, [pc, #12]	; 16150 <CNetTask::CNetTask(CNetSubSystem*)+0x28>
   16140:	e1a00004 	mov	r0, r4
   16144:	e5845050 	str	r5, [r4, #80]	; 0x50
   16148:	e5843000 	str	r3, [r4]
   1614c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16150:	0002e5dc 	.word	0x0002e5dc

00016154 <CSocket::CSocket(CNetSubSystem*, int)>:
   16154:	e92d4070 	push	{r4, r5, r6, lr}
   16158:	e1a04000 	mov	r4, r0
   1615c:	e1a00001 	mov	r0, r1
   16160:	e1a05001 	mov	r5, r1
   16164:	e1a06002 	mov	r6, r2
   16168:	ebffffa9 	bl	16014 <CNetSubSystem::GetConfig()>
   1616c:	e5840000 	str	r0, [r4]
   16170:	e1a00005 	mov	r0, r5
   16174:	ebffffa9 	bl	16020 <CNetSubSystem::GetTransportLayer()>
   16178:	e594c000 	ldr	ip, [r4]
   1617c:	e3a03000 	mov	r3, #0
   16180:	e3e01000 	mvn	r1, #0
   16184:	e15c0003 	cmp	ip, r3
   16188:	e5846008 	str	r6, [r4, #8]
   1618c:	e5841010 	str	r1, [r4, #16]
   16190:	e1c430bc 	strh	r3, [r4, #12]
   16194:	e5843014 	str	r3, [r4, #20]
   16198:	e5840004 	str	r0, [r4, #4]
   1619c:	0a000011 	beq	161e8 <CSocket::CSocket(CNetSubSystem*, int)+0x94>
   161a0:	e3500000 	cmp	r0, #0
   161a4:	0a000004 	beq	161bc <CSocket::CSocket(CNetSubSystem*, int)+0x68>
   161a8:	e3a00d19 	mov	r0, #1600	; 0x640
   161ac:	eb002f6f 	bl	21f70 <operator new[](unsigned int)>
   161b0:	e5840014 	str	r0, [r4, #20]
   161b4:	e1a00004 	mov	r0, r4
   161b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   161bc:	e3a02026 	mov	r2, #38	; 0x26
   161c0:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   161c4:	e30e061c 	movw	r0, #58908	; 0xe61c
   161c8:	e3401002 	movt	r1, #2
   161cc:	e3400002 	movt	r0, #2
   161d0:	eb003a71 	bl	24b9c <assertion_failed>
   161d4:	e3a00d19 	mov	r0, #1600	; 0x640
   161d8:	eb002f64 	bl	21f70 <operator new[](unsigned int)>
   161dc:	e5840014 	str	r0, [r4, #20]
   161e0:	e1a00004 	mov	r0, r4
   161e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   161e8:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   161ec:	e30e0608 	movw	r0, #58888	; 0xe608
   161f0:	e3401002 	movt	r1, #2
   161f4:	e3400002 	movt	r0, #2
   161f8:	e3a02025 	mov	r2, #37	; 0x25
   161fc:	eb003a66 	bl	24b9c <assertion_failed>
   16200:	e5940004 	ldr	r0, [r4, #4]
   16204:	eaffffe5 	b	161a0 <CSocket::CSocket(CNetSubSystem*, int)+0x4c>

00016208 <CSocket::CSocket(CSocket&)>:
   16208:	e5912000 	ldr	r2, [r1]
   1620c:	e92d4010 	push	{r4, lr}
   16210:	e1a04000 	mov	r4, r0
   16214:	e9914008 	ldmib	r1, {r3, lr}
   16218:	e3a00000 	mov	r0, #0
   1621c:	e1d1c0bc 	ldrh	ip, [r1, #12]
   16220:	e1520000 	cmp	r2, r0
   16224:	e5911010 	ldr	r1, [r1, #16]
   16228:	e884400c 	stm	r4, {r2, r3, lr}
   1622c:	e1c4c0bc 	strh	ip, [r4, #12]
   16230:	e5841010 	str	r1, [r4, #16]
   16234:	e5840014 	str	r0, [r4, #20]
   16238:	0a000011 	beq	16284 <CSocket::CSocket(CSocket&)+0x7c>
   1623c:	e3530000 	cmp	r3, #0
   16240:	0a000004 	beq	16258 <CSocket::CSocket(CSocket&)+0x50>
   16244:	e3a00d19 	mov	r0, #1600	; 0x640
   16248:	eb002f48 	bl	21f70 <operator new[](unsigned int)>
   1624c:	e5840014 	str	r0, [r4, #20]
   16250:	e1a00004 	mov	r0, r4
   16254:	e8bd8010 	pop	{r4, pc}
   16258:	e3a02035 	mov	r2, #53	; 0x35
   1625c:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16260:	e30e061c 	movw	r0, #58908	; 0xe61c
   16264:	e3401002 	movt	r1, #2
   16268:	e3400002 	movt	r0, #2
   1626c:	eb003a4a 	bl	24b9c <assertion_failed>
   16270:	e3a00d19 	mov	r0, #1600	; 0x640
   16274:	eb002f3d 	bl	21f70 <operator new[](unsigned int)>
   16278:	e5840014 	str	r0, [r4, #20]
   1627c:	e1a00004 	mov	r0, r4
   16280:	e8bd8010 	pop	{r4, pc}
   16284:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16288:	e30e0608 	movw	r0, #58888	; 0xe608
   1628c:	e3401002 	movt	r1, #2
   16290:	e3400002 	movt	r0, #2
   16294:	e3a02034 	mov	r2, #52	; 0x34
   16298:	eb003a3f 	bl	24b9c <assertion_failed>
   1629c:	e5943004 	ldr	r3, [r4, #4]
   162a0:	eaffffe5 	b	1623c <CSocket::CSocket(CSocket&)+0x34>

000162a4 <CSocket::~CSocket()>:
   162a4:	e5901010 	ldr	r1, [r0, #16]
   162a8:	e92d4010 	push	{r4, lr}
   162ac:	e3510000 	cmp	r1, #0
   162b0:	e1a04000 	mov	r4, r0
   162b4:	ba000005 	blt	162d0 <CSocket::~CSocket()+0x2c>
   162b8:	e5900004 	ldr	r0, [r0, #4]
   162bc:	e3500000 	cmp	r0, #0
   162c0:	0a000007 	beq	162e4 <CSocket::~CSocket()+0x40>
   162c4:	eb0003c3 	bl	171d8 <CTransportLayer::Disconnect(int)>
   162c8:	e3e03000 	mvn	r3, #0
   162cc:	e5843010 	str	r3, [r4, #16]
   162d0:	e5940014 	ldr	r0, [r4, #20]
   162d4:	e3a01001 	mov	r1, #1
   162d8:	eb002f27 	bl	21f7c <operator delete(void*, unsigned int)>
   162dc:	e1a00004 	mov	r0, r4
   162e0:	e8bd8010 	pop	{r4, pc}
   162e4:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   162e8:	e30e061c 	movw	r0, #58908	; 0xe61c
   162ec:	e3401002 	movt	r1, #2
   162f0:	e3400002 	movt	r0, #2
   162f4:	e3a0203f 	mov	r2, #63	; 0x3f
   162f8:	eb003a27 	bl	24b9c <assertion_failed>
   162fc:	e5940004 	ldr	r0, [r4, #4]
   16300:	e5941010 	ldr	r1, [r4, #16]
   16304:	eaffffee 	b	162c4 <CSocket::~CSocket()+0x20>

00016308 <CSocket::Bind(unsigned short)>:
   16308:	e251c000 	subs	ip, r1, #0
   1630c:	0a00000b 	beq	16340 <CSocket::Bind(unsigned short)+0x38>
   16310:	e1d030bc 	ldrh	r3, [r0, #12]
   16314:	e3530000 	cmp	r3, #0
   16318:	1a000008 	bne	16340 <CSocket::Bind(unsigned short)+0x38>
   1631c:	e5902010 	ldr	r2, [r0, #16]
   16320:	e3520000 	cmp	r2, #0
   16324:	aa000005 	bge	16340 <CSocket::Bind(unsigned short)+0x38>
   16328:	e5902008 	ldr	r2, [r0, #8]
   1632c:	e1c0c0bc 	strh	ip, [r0, #12]
   16330:	e3520011 	cmp	r2, #17
   16334:	0a000003 	beq	16348 <CSocket::Bind(unsigned short)+0x40>
   16338:	e1a00003 	mov	r0, r3
   1633c:	e12fff1e 	bx	lr
   16340:	e3e00000 	mvn	r0, #0
   16344:	e12fff1e 	bx	lr
   16348:	e92d4010 	push	{r4, lr}
   1634c:	e1a04000 	mov	r4, r0
   16350:	e5900004 	ldr	r0, [r0, #4]
   16354:	eb000203 	bl	16b68 <CTransportLayer::Bind(unsigned short, int)>
   16358:	e1a03000 	mov	r3, r0
   1635c:	e0000fc0 	and	r0, r0, r0, asr #31
   16360:	e5843010 	str	r3, [r4, #16]
   16364:	e8bd8010 	pop	{r4, pc}

00016368 <CSocket::Connect(CIPAddress&, unsigned short)>:
   16368:	e92d4070 	push	{r4, r5, r6, lr}
   1636c:	e2525000 	subs	r5, r2, #0
   16370:	e24dd008 	sub	sp, sp, #8
   16374:	0a000024 	beq	1640c <CSocket::Connect(CIPAddress&, unsigned short)+0xa4>
   16378:	e5903004 	ldr	r3, [r0, #4]
   1637c:	e1a06001 	mov	r6, r1
   16380:	e1a04000 	mov	r4, r0
   16384:	e3530000 	cmp	r3, #0
   16388:	0a000027 	beq	1642c <CSocket::Connect(CIPAddress&, unsigned short)+0xc4>
   1638c:	e5941010 	ldr	r1, [r4, #16]
   16390:	e3510000 	cmp	r1, #0
   16394:	ba000006 	blt	163b4 <CSocket::Connect(CIPAddress&, unsigned short)+0x4c>
   16398:	e5943008 	ldr	r3, [r4, #8]
   1639c:	e3530011 	cmp	r3, #17
   163a0:	1a000019 	bne	1640c <CSocket::Connect(CIPAddress&, unsigned short)+0xa4>
   163a4:	e5940004 	ldr	r0, [r4, #4]
   163a8:	eb00038a 	bl	171d8 <CTransportLayer::Disconnect(int)>
   163ac:	e3e03000 	mvn	r3, #0
   163b0:	e5843010 	str	r3, [r4, #16]
   163b4:	e5940000 	ldr	r0, [r4]
   163b8:	e3500000 	cmp	r0, #0
   163bc:	0a000021 	beq	16448 <CSocket::Connect(CIPAddress&, unsigned short)+0xe0>
   163c0:	eb001d0c 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   163c4:	eb001e64 	bl	1dd5c <CIPAddress::IsNull() const>
   163c8:	e3500000 	cmp	r0, #0
   163cc:	1a00000b 	bne	16400 <CSocket::Connect(CIPAddress&, unsigned short)+0x98>
   163d0:	e594c008 	ldr	ip, [r4, #8]
   163d4:	e1a02005 	mov	r2, r5
   163d8:	e1d430bc 	ldrh	r3, [r4, #12]
   163dc:	e1a01006 	mov	r1, r6
   163e0:	e5940004 	ldr	r0, [r4, #4]
   163e4:	e58dc000 	str	ip, [sp]
   163e8:	eb00023e 	bl	16ce8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   163ec:	e1a03000 	mov	r3, r0
   163f0:	e0000fc0 	and	r0, r0, r0, asr #31
   163f4:	e5843010 	str	r3, [r4, #16]
   163f8:	e28dd008 	add	sp, sp, #8
   163fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   16400:	e5943008 	ldr	r3, [r4, #8]
   16404:	e3530011 	cmp	r3, #17
   16408:	0a000002 	beq	16418 <CSocket::Connect(CIPAddress&, unsigned short)+0xb0>
   1640c:	e3e00000 	mvn	r0, #0
   16410:	e28dd008 	add	sp, sp, #8
   16414:	e8bd8070 	pop	{r4, r5, r6, pc}
   16418:	e1a00006 	mov	r0, r6
   1641c:	eb001e5d 	bl	1dd98 <CIPAddress::IsBroadcast() const>
   16420:	e3500000 	cmp	r0, #0
   16424:	0afffff8 	beq	1640c <CSocket::Connect(CIPAddress&, unsigned short)+0xa4>
   16428:	eaffffe8 	b	163d0 <CSocket::Connect(CIPAddress&, unsigned short)+0x68>
   1642c:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16430:	e30e061c 	movw	r0, #58908	; 0xe61c
   16434:	e3401002 	movt	r1, #2
   16438:	e3400002 	movt	r0, #2
   1643c:	e3a02071 	mov	r2, #113	; 0x71
   16440:	eb0039d5 	bl	24b9c <assertion_failed>
   16444:	eaffffd0 	b	1638c <CSocket::Connect(CIPAddress&, unsigned short)+0x24>
   16448:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   1644c:	e30e0608 	movw	r0, #58888	; 0xe608
   16450:	e3401002 	movt	r1, #2
   16454:	e3400002 	movt	r0, #2
   16458:	e3a0207e 	mov	r2, #126	; 0x7e
   1645c:	eb0039ce 	bl	24b9c <assertion_failed>
   16460:	e5940000 	ldr	r0, [r4]
   16464:	eaffffd5 	b	163c0 <CSocket::Connect(CIPAddress&, unsigned short)+0x58>

00016468 <CSocket::Listen()>:
   16468:	e5902008 	ldr	r2, [r0, #8]
   1646c:	e3520006 	cmp	r2, #6
   16470:	1a00000f 	bne	164b4 <CSocket::Listen()+0x4c>
   16474:	e1d010bc 	ldrh	r1, [r0, #12]
   16478:	e3510000 	cmp	r1, #0
   1647c:	0a00000c 	beq	164b4 <CSocket::Listen()+0x4c>
   16480:	e5903010 	ldr	r3, [r0, #16]
   16484:	e3530000 	cmp	r3, #0
   16488:	aa000009 	bge	164b4 <CSocket::Listen()+0x4c>
   1648c:	e92d4010 	push	{r4, lr}
   16490:	e1a04000 	mov	r4, r0
   16494:	e5900004 	ldr	r0, [r0, #4]
   16498:	e3500000 	cmp	r0, #0
   1649c:	0a000006 	beq	164bc <CSocket::Listen()+0x54>
   164a0:	eb0002b8 	bl	16f88 <CTransportLayer::Listen(unsigned short, int)>
   164a4:	e1a03000 	mov	r3, r0
   164a8:	e0000fc0 	and	r0, r0, r0, asr #31
   164ac:	e5843010 	str	r3, [r4, #16]
   164b0:	e8bd8010 	pop	{r4, pc}
   164b4:	e3e00000 	mvn	r0, #0
   164b8:	e12fff1e 	bx	lr
   164bc:	e3a02098 	mov	r2, #152	; 0x98
   164c0:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   164c4:	e30e061c 	movw	r0, #58908	; 0xe61c
   164c8:	e3401002 	movt	r1, #2
   164cc:	e3400002 	movt	r0, #2
   164d0:	eb0039b1 	bl	24b9c <assertion_failed>
   164d4:	e5940004 	ldr	r0, [r4, #4]
   164d8:	e1d410bc 	ldrh	r1, [r4, #12]
   164dc:	e5942008 	ldr	r2, [r4, #8]
   164e0:	eaffffee 	b	164a0 <CSocket::Listen()+0x38>

000164e4 <CSocket::Accept(CIPAddress*, unsigned short*)>:
   164e4:	e5903010 	ldr	r3, [r0, #16]
   164e8:	e92d4070 	push	{r4, r5, r6, lr}
   164ec:	e3530000 	cmp	r3, #0
   164f0:	ba00002b 	blt	165a4 <CSocket::Accept(CIPAddress*, unsigned short*)+0xc0>
   164f4:	e1d030bc 	ldrh	r3, [r0, #12]
   164f8:	e3530000 	cmp	r3, #0
   164fc:	0a000028 	beq	165a4 <CSocket::Accept(CIPAddress*, unsigned short*)+0xc0>
   16500:	e3510000 	cmp	r1, #0
   16504:	e1a06002 	mov	r6, r2
   16508:	e1a05001 	mov	r5, r1
   1650c:	e1a04000 	mov	r4, r0
   16510:	0a00002e 	beq	165d0 <CSocket::Accept(CIPAddress*, unsigned short*)+0xec>
   16514:	e3560000 	cmp	r6, #0
   16518:	0a000033 	beq	165ec <CSocket::Accept(CIPAddress*, unsigned short*)+0x108>
   1651c:	e5940004 	ldr	r0, [r4, #4]
   16520:	e3500000 	cmp	r0, #0
   16524:	0a000021 	beq	165b0 <CSocket::Accept(CIPAddress*, unsigned short*)+0xcc>
   16528:	e1a01005 	mov	r1, r5
   1652c:	e1a02006 	mov	r2, r6
   16530:	e5943010 	ldr	r3, [r4, #16]
   16534:	eb0002f1 	bl	17100 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   16538:	e3500000 	cmp	r0, #0
   1653c:	b3a05000 	movlt	r5, #0
   16540:	aa000008 	bge	16568 <CSocket::Accept(CIPAddress*, unsigned short*)+0x84>
   16544:	e5942008 	ldr	r2, [r4, #8]
   16548:	e1d410bc 	ldrh	r1, [r4, #12]
   1654c:	e5940004 	ldr	r0, [r4, #4]
   16550:	eb00028c 	bl	16f88 <CTransportLayer::Listen(unsigned short, int)>
   16554:	e3500000 	cmp	r0, #0
   16558:	e5840010 	str	r0, [r4, #16]
   1655c:	ba000007 	blt	16580 <CSocket::Accept(CIPAddress*, unsigned short*)+0x9c>
   16560:	e1a00005 	mov	r0, r5
   16564:	e8bd8070 	pop	{r4, r5, r6, pc}
   16568:	e3a00018 	mov	r0, #24
   1656c:	eb002e7e 	bl	21f6c <operator new(unsigned int)>
   16570:	e1a01004 	mov	r1, r4
   16574:	e1a05000 	mov	r5, r0
   16578:	ebffff22 	bl	16208 <CSocket::CSocket(CSocket&)>
   1657c:	eafffff0 	b	16544 <CSocket::Accept(CIPAddress*, unsigned short*)+0x60>
   16580:	eb003b0a 	bl	251b0 <CLogger::Get()>
   16584:	e3a02000 	mov	r2, #0
   16588:	e30e3658 	movw	r3, #58968	; 0xe658
   1658c:	e30e15f4 	movw	r1, #58868	; 0xe5f4
   16590:	e3403002 	movt	r3, #2
   16594:	e3401002 	movt	r1, #2
   16598:	eb003be0 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1659c:	e1a00005 	mov	r0, r5
   165a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   165a4:	e3a05000 	mov	r5, #0
   165a8:	e1a00005 	mov	r0, r5
   165ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   165b0:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   165b4:	e30e061c 	movw	r0, #58908	; 0xe61c
   165b8:	e3401002 	movt	r1, #2
   165bc:	e3400002 	movt	r0, #2
   165c0:	e3a020aa 	mov	r2, #170	; 0xaa
   165c4:	eb003974 	bl	24b9c <assertion_failed>
   165c8:	e5940004 	ldr	r0, [r4, #4]
   165cc:	eaffffd5 	b	16528 <CSocket::Accept(CIPAddress*, unsigned short*)+0x44>
   165d0:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   165d4:	e30e0634 	movw	r0, #58932	; 0xe634
   165d8:	e3401002 	movt	r1, #2
   165dc:	e3400002 	movt	r0, #2
   165e0:	e3a020a8 	mov	r2, #168	; 0xa8
   165e4:	eb00396c 	bl	24b9c <assertion_failed>
   165e8:	eaffffc9 	b	16514 <CSocket::Accept(CIPAddress*, unsigned short*)+0x30>
   165ec:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   165f0:	e30e0644 	movw	r0, #58948	; 0xe644
   165f4:	e3401002 	movt	r1, #2
   165f8:	e3400002 	movt	r0, #2
   165fc:	e3a020a9 	mov	r2, #169	; 0xa9
   16600:	eb003965 	bl	24b9c <assertion_failed>
   16604:	eaffffc4 	b	1651c <CSocket::Accept(CIPAddress*, unsigned short*)+0x38>

00016608 <CSocket::Send(void const*, unsigned int, int)>:
   16608:	e92d4070 	push	{r4, r5, r6, lr}
   1660c:	e16fcf12 	clz	ip, r2
   16610:	e590e010 	ldr	lr, [r0, #16]
   16614:	e24dd010 	sub	sp, sp, #16
   16618:	e1a0c2ac 	lsr	ip, ip, #5
   1661c:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   16620:	1a000021 	bne	166ac <CSocket::Send(void const*, unsigned int, int)+0xa4>
   16624:	e1a06002 	mov	r6, r2
   16628:	e5902004 	ldr	r2, [r0, #4]
   1662c:	e1a05001 	mov	r5, r1
   16630:	e1a04000 	mov	r4, r0
   16634:	e3520000 	cmp	r2, #0
   16638:	0a000009 	beq	16664 <CSocket::Send(void const*, unsigned int, int)+0x5c>
   1663c:	e3550000 	cmp	r5, #0
   16640:	0a000010 	beq	16688 <CSocket::Send(void const*, unsigned int, int)+0x80>
   16644:	e594c010 	ldr	ip, [r4, #16]
   16648:	e1a02006 	mov	r2, r6
   1664c:	e5940004 	ldr	r0, [r4, #4]
   16650:	e1a01005 	mov	r1, r5
   16654:	e58dc000 	str	ip, [sp]
   16658:	eb0002fe 	bl	17258 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   1665c:	e28dd010 	add	sp, sp, #16
   16660:	e8bd8070 	pop	{r4, r5, r6, pc}
   16664:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16668:	e30e061c 	movw	r0, #58908	; 0xe61c
   1666c:	e3401002 	movt	r1, #2
   16670:	e3400002 	movt	r0, #2
   16674:	e3a020c7 	mov	r2, #199	; 0xc7
   16678:	e58d300c 	str	r3, [sp, #12]
   1667c:	eb003946 	bl	24b9c <assertion_failed>
   16680:	e59d300c 	ldr	r3, [sp, #12]
   16684:	eaffffec 	b	1663c <CSocket::Send(void const*, unsigned int, int)+0x34>
   16688:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   1668c:	e30b097c 	movw	r0, #47484	; 0xb97c
   16690:	e3401002 	movt	r1, #2
   16694:	e3400002 	movt	r0, #2
   16698:	e3a020c8 	mov	r2, #200	; 0xc8
   1669c:	e58d300c 	str	r3, [sp, #12]
   166a0:	eb00393d 	bl	24b9c <assertion_failed>
   166a4:	e59d300c 	ldr	r3, [sp, #12]
   166a8:	eaffffe5 	b	16644 <CSocket::Send(void const*, unsigned int, int)+0x3c>
   166ac:	e3e00000 	mvn	r0, #0
   166b0:	eaffffe9 	b	1665c <CSocket::Send(void const*, unsigned int, int)+0x54>

000166b4 <CSocket::Receive(void*, unsigned int, int)>:
   166b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   166b8:	e16fcf12 	clz	ip, r2
   166bc:	e590e010 	ldr	lr, [r0, #16]
   166c0:	e1a0c2ac 	lsr	ip, ip, #5
   166c4:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   166c8:	1a000033 	bne	1679c <CSocket::Receive(void*, unsigned int, int)+0xe8>
   166cc:	e1a05003 	mov	r5, r3
   166d0:	e5903004 	ldr	r3, [r0, #4]
   166d4:	e1a06002 	mov	r6, r2
   166d8:	e1a07001 	mov	r7, r1
   166dc:	e3530000 	cmp	r3, #0
   166e0:	e1a04000 	mov	r4, r0
   166e4:	0a000016 	beq	16744 <CSocket::Receive(void*, unsigned int, int)+0x90>
   166e8:	e5941014 	ldr	r1, [r4, #20]
   166ec:	e3510000 	cmp	r1, #0
   166f0:	0a00001a 	beq	16760 <CSocket::Receive(void*, unsigned int, int)+0xac>
   166f4:	e1a02005 	mov	r2, r5
   166f8:	e5943010 	ldr	r3, [r4, #16]
   166fc:	e5940004 	ldr	r0, [r4, #4]
   16700:	eb00030e 	bl	17340 <CTransportLayer::Receive(void*, int, int)>
   16704:	e2505000 	subs	r5, r0, #0
   16708:	ba00000b 	blt	1673c <CSocket::Receive(void*, unsigned int, int)+0x88>
   1670c:	e1560005 	cmp	r6, r5
   16710:	31a02006 	movcc	r2, r6
   16714:	21a02005 	movcs	r2, r5
   16718:	21a06005 	movcs	r6, r5
   1671c:	31a06002 	movcc	r6, r2
   16720:	e3570000 	cmp	r7, #0
   16724:	e1a05002 	mov	r5, r2
   16728:	0a000014 	beq	16780 <CSocket::Receive(void*, unsigned int, int)+0xcc>
   1672c:	e1a02006 	mov	r2, r6
   16730:	e5941014 	ldr	r1, [r4, #20]
   16734:	e1a00007 	mov	r0, r7
   16738:	eb003297 	bl	2319c <memcpy>
   1673c:	e1a00005 	mov	r0, r5
   16740:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16744:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16748:	e30e061c 	movw	r0, #58908	; 0xe61c
   1674c:	e3401002 	movt	r1, #2
   16750:	e3400002 	movt	r0, #2
   16754:	e3a020d8 	mov	r2, #216	; 0xd8
   16758:	eb00390f 	bl	24b9c <assertion_failed>
   1675c:	eaffffe1 	b	166e8 <CSocket::Receive(void*, unsigned int, int)+0x34>
   16760:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16764:	e30c041c 	movw	r0, #50204	; 0xc41c
   16768:	e3401002 	movt	r1, #2
   1676c:	e3400002 	movt	r0, #2
   16770:	e3a020d9 	mov	r2, #217	; 0xd9
   16774:	eb003908 	bl	24b9c <assertion_failed>
   16778:	e5941014 	ldr	r1, [r4, #20]
   1677c:	eaffffdc 	b	166f4 <CSocket::Receive(void*, unsigned int, int)+0x40>
   16780:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16784:	e30b097c 	movw	r0, #47484	; 0xb97c
   16788:	e3401002 	movt	r1, #2
   1678c:	e3400002 	movt	r0, #2
   16790:	e3a020e5 	mov	r2, #229	; 0xe5
   16794:	eb003900 	bl	24b9c <assertion_failed>
   16798:	eaffffe3 	b	1672c <CSocket::Receive(void*, unsigned int, int)+0x78>
   1679c:	e3e05000 	mvn	r5, #0
   167a0:	eaffffe5 	b	1673c <CSocket::Receive(void*, unsigned int, int)+0x88>

000167a4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   167a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   167a8:	e16fcf12 	clz	ip, r2
   167ac:	e590e010 	ldr	lr, [r0, #16]
   167b0:	e24dd010 	sub	sp, sp, #16
   167b4:	e1a0c2ac 	lsr	ip, ip, #5
   167b8:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   167bc:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   167c0:	1a000020 	bne	16848 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xa4>
   167c4:	e1a04000 	mov	r4, r0
   167c8:	e5900000 	ldr	r0, [r0]
   167cc:	e1a06002 	mov	r6, r2
   167d0:	e1a07003 	mov	r7, r3
   167d4:	e3500000 	cmp	r0, #0
   167d8:	e1a05001 	mov	r5, r1
   167dc:	0a00001b 	beq	16850 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xac>
   167e0:	eb001c04 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   167e4:	eb001d5c 	bl	1dd5c <CIPAddress::IsNull() const>
   167e8:	e16fcf18 	clz	ip, r8
   167ec:	e1a0c2ac 	lsr	ip, ip, #5
   167f0:	e3500000 	cmp	r0, #0
   167f4:	01a0000c 	moveq	r0, ip
   167f8:	138c0001 	orrne	r0, ip, #1
   167fc:	e3500000 	cmp	r0, #0
   16800:	1a000010 	bne	16848 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xa4>
   16804:	e5943004 	ldr	r3, [r4, #4]
   16808:	e3530000 	cmp	r3, #0
   1680c:	0a000017 	beq	16870 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xcc>
   16810:	e3550000 	cmp	r5, #0
   16814:	0a00001c 	beq	1688c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe8>
   16818:	e594c010 	ldr	ip, [r4, #16]
   1681c:	e1a03007 	mov	r3, r7
   16820:	e59de028 	ldr	lr, [sp, #40]	; 0x28
   16824:	e1a02006 	mov	r2, r6
   16828:	e5940004 	ldr	r0, [r4, #4]
   1682c:	e1a01005 	mov	r1, r5
   16830:	e58d8004 	str	r8, [sp, #4]
   16834:	e58de000 	str	lr, [sp]
   16838:	e58dc008 	str	ip, [sp, #8]
   1683c:	eb0002ec 	bl	173f4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   16840:	e28dd010 	add	sp, sp, #16
   16844:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16848:	e3e00000 	mvn	r0, #0
   1684c:	eafffffb 	b	16840 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x9c>
   16850:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16854:	e30e0608 	movw	r0, #58888	; 0xe608
   16858:	e3401002 	movt	r1, #2
   1685c:	e3400002 	movt	r0, #2
   16860:	e3a020f8 	mov	r2, #248	; 0xf8
   16864:	eb0038cc 	bl	24b9c <assertion_failed>
   16868:	e5940000 	ldr	r0, [r4]
   1686c:	eaffffdb 	b	167e0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x3c>
   16870:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16874:	e30e061c 	movw	r0, #58908	; 0xe61c
   16878:	e3401002 	movt	r1, #2
   1687c:	e3400002 	movt	r0, #2
   16880:	e3002103 	movw	r2, #259	; 0x103
   16884:	eb0038c4 	bl	24b9c <assertion_failed>
   16888:	eaffffe0 	b	16810 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x6c>
   1688c:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16890:	e30b097c 	movw	r0, #47484	; 0xb97c
   16894:	e3401002 	movt	r1, #2
   16898:	e3400002 	movt	r0, #2
   1689c:	e3a02f41 	mov	r2, #260	; 0x104
   168a0:	eb0038bd 	bl	24b9c <assertion_failed>
   168a4:	eaffffdb 	b	16818 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>

000168a8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   168a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   168ac:	e16fcf12 	clz	ip, r2
   168b0:	e590e010 	ldr	lr, [r0, #16]
   168b4:	e24dd00c 	sub	sp, sp, #12
   168b8:	e1a0c2ac 	lsr	ip, ip, #5
   168bc:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   168c0:	1a000038 	bne	169a8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x100>
   168c4:	e1a05003 	mov	r5, r3
   168c8:	e5903004 	ldr	r3, [r0, #4]
   168cc:	e1a06002 	mov	r6, r2
   168d0:	e1a07001 	mov	r7, r1
   168d4:	e3530000 	cmp	r3, #0
   168d8:	e1a04000 	mov	r4, r0
   168dc:	0a00001b 	beq	16950 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xa8>
   168e0:	e5941014 	ldr	r1, [r4, #20]
   168e4:	e3510000 	cmp	r1, #0
   168e8:	0a00001f 	beq	1696c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc4>
   168ec:	e594c010 	ldr	ip, [r4, #16]
   168f0:	e1a02005 	mov	r2, r5
   168f4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   168f8:	e5940004 	ldr	r0, [r4, #4]
   168fc:	e58dc004 	str	ip, [sp, #4]
   16900:	e58d3000 	str	r3, [sp]
   16904:	e59d3020 	ldr	r3, [sp, #32]
   16908:	eb0002f7 	bl	174ec <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   1690c:	e2505000 	subs	r5, r0, #0
   16910:	ba00000b 	blt	16944 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x9c>
   16914:	e1560005 	cmp	r6, r5
   16918:	31a02006 	movcc	r2, r6
   1691c:	21a02005 	movcs	r2, r5
   16920:	21a06005 	movcs	r6, r5
   16924:	31a06002 	movcc	r6, r2
   16928:	e3570000 	cmp	r7, #0
   1692c:	e1a05002 	mov	r5, r2
   16930:	0a000015 	beq	1698c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xe4>
   16934:	e1a02006 	mov	r2, r6
   16938:	e5941014 	ldr	r1, [r4, #20]
   1693c:	e1a00007 	mov	r0, r7
   16940:	eb003215 	bl	2319c <memcpy>
   16944:	e1a00005 	mov	r0, r5
   16948:	e28dd00c 	add	sp, sp, #12
   1694c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16950:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16954:	e30e061c 	movw	r0, #58908	; 0xe61c
   16958:	e3401002 	movt	r1, #2
   1695c:	e3400002 	movt	r0, #2
   16960:	e3002115 	movw	r2, #277	; 0x115
   16964:	eb00388c 	bl	24b9c <assertion_failed>
   16968:	eaffffdc 	b	168e0 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x38>
   1696c:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16970:	e30c041c 	movw	r0, #50204	; 0xc41c
   16974:	e3401002 	movt	r1, #2
   16978:	e3400002 	movt	r0, #2
   1697c:	e3002116 	movw	r2, #278	; 0x116
   16980:	eb003885 	bl	24b9c <assertion_failed>
   16984:	e5941014 	ldr	r1, [r4, #20]
   16988:	eaffffd7 	b	168ec <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x44>
   1698c:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16990:	e30b097c 	movw	r0, #47484	; 0xb97c
   16994:	e3401002 	movt	r1, #2
   16998:	e3400002 	movt	r0, #2
   1699c:	e3002123 	movw	r2, #291	; 0x123
   169a0:	eb00387d 	bl	24b9c <assertion_failed>
   169a4:	eaffffe2 	b	16934 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x8c>
   169a8:	e3e05000 	mvn	r5, #0
   169ac:	eaffffe4 	b	16944 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x9c>

000169b0 <CSocket::SetOptionBroadcast(int)>:
   169b0:	e5902010 	ldr	r2, [r0, #16]
   169b4:	e3520000 	cmp	r2, #0
   169b8:	ba000016 	blt	16a18 <CSocket::SetOptionBroadcast(int)+0x68>
   169bc:	e5903008 	ldr	r3, [r0, #8]
   169c0:	e3530011 	cmp	r3, #17
   169c4:	0a000001 	beq	169d0 <CSocket::SetOptionBroadcast(int)+0x20>
   169c8:	e3a00000 	mov	r0, #0
   169cc:	e12fff1e 	bx	lr
   169d0:	e92d4070 	push	{r4, r5, r6, lr}
   169d4:	e1a04000 	mov	r4, r0
   169d8:	e5900004 	ldr	r0, [r0, #4]
   169dc:	e1a05001 	mov	r5, r1
   169e0:	e3500000 	cmp	r0, #0
   169e4:	0a000002 	beq	169f4 <CSocket::SetOptionBroadcast(int)+0x44>
   169e8:	e1a01005 	mov	r1, r5
   169ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   169f0:	ea0002f0 	b	175b8 <CTransportLayer::SetOptionBroadcast(int, int)>
   169f4:	e3002135 	movw	r2, #309	; 0x135
   169f8:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   169fc:	e30e061c 	movw	r0, #58908	; 0xe61c
   16a00:	e3401002 	movt	r1, #2
   16a04:	e3400002 	movt	r0, #2
   16a08:	eb003863 	bl	24b9c <assertion_failed>
   16a0c:	e5940004 	ldr	r0, [r4, #4]
   16a10:	e5942010 	ldr	r2, [r4, #16]
   16a14:	eafffff3 	b	169e8 <CSocket::SetOptionBroadcast(int)+0x38>
   16a18:	e3e00000 	mvn	r0, #0
   16a1c:	e12fff1e 	bx	lr

00016a20 <CSocket::GetForeignIP() const>:
   16a20:	e5901010 	ldr	r1, [r0, #16]
   16a24:	e3510000 	cmp	r1, #0
   16a28:	ba000011 	blt	16a74 <CSocket::GetForeignIP() const+0x54>
   16a2c:	e5903004 	ldr	r3, [r0, #4]
   16a30:	e3530000 	cmp	r3, #0
   16a34:	0a000001 	beq	16a40 <CSocket::GetForeignIP() const+0x20>
   16a38:	e1a00003 	mov	r0, r3
   16a3c:	ea0002ff 	b	17640 <CTransportLayer::GetForeignIP(int) const>
   16a40:	e92d4010 	push	{r4, lr}
   16a44:	e30e15fc 	movw	r1, #58876	; 0xe5fc
   16a48:	e1a04000 	mov	r4, r0
   16a4c:	e3401002 	movt	r1, #2
   16a50:	e30e061c 	movw	r0, #58908	; 0xe61c
   16a54:	e3a02d05 	mov	r2, #320	; 0x140
   16a58:	e3400002 	movt	r0, #2
   16a5c:	eb00384e 	bl	24b9c <assertion_failed>
   16a60:	e5943004 	ldr	r3, [r4, #4]
   16a64:	e5941010 	ldr	r1, [r4, #16]
   16a68:	e8bd4010 	pop	{r4, lr}
   16a6c:	e1a00003 	mov	r0, r3
   16a70:	ea0002f2 	b	17640 <CTransportLayer::GetForeignIP(int) const>
   16a74:	e3a00000 	mov	r0, #0
   16a78:	e12fff1e 	bx	lr

00016a7c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   16a7c:	e92d4070 	push	{r4, r5, r6, lr}
   16a80:	e1a04000 	mov	r4, r0
   16a84:	e1a06002 	mov	r6, r2
   16a88:	e3a02064 	mov	r2, #100	; 0x64
   16a8c:	e5806004 	str	r6, [r0, #4]
   16a90:	e1a05001 	mov	r5, r1
   16a94:	e5841000 	str	r1, [r4]
   16a98:	e2800008 	add	r0, r0, #8
   16a9c:	e1a01002 	mov	r1, r2
   16aa0:	eb0048ef 	bl	28e64 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   16aa4:	e3a03000 	mov	r3, #0
   16aa8:	e1a02006 	mov	r2, r6
   16aac:	e584301c 	str	r3, [r4, #28]
   16ab0:	e5843020 	str	r3, [r4, #32]
   16ab4:	e1a01005 	mov	r1, r5
   16ab8:	e30eca60 	movw	ip, #60000	; 0xea60
   16abc:	e2840024 	add	r0, r4, #36	; 0x24
   16ac0:	e34fcfff 	movt	ip, #65535	; 0xffff
   16ac4:	e1c4c1b8 	strh	ip, [r4, #24]
   16ac8:	eb001a6b 	bl	1d47c <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   16acc:	e5943000 	ldr	r3, [r4]
   16ad0:	e3530000 	cmp	r3, #0
   16ad4:	0a00000c 	beq	16b0c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x90>
   16ad8:	e5943004 	ldr	r3, [r4, #4]
   16adc:	e3530000 	cmp	r3, #0
   16ae0:	0a000001 	beq	16aec <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x70>
   16ae4:	e1a00004 	mov	r0, r4
   16ae8:	e8bd8070 	pop	{r4, r5, r6, pc}
   16aec:	e3a02027 	mov	r2, #39	; 0x27
   16af0:	e30e1684 	movw	r1, #59012	; 0xe684
   16af4:	e30e0698 	movw	r0, #59032	; 0xe698
   16af8:	e3401002 	movt	r1, #2
   16afc:	e3400002 	movt	r0, #2
   16b00:	eb003825 	bl	24b9c <assertion_failed>
   16b04:	e1a00004 	mov	r0, r4
   16b08:	e8bd8070 	pop	{r4, r5, r6, pc}
   16b0c:	e30e1684 	movw	r1, #59012	; 0xe684
   16b10:	e30e0608 	movw	r0, #58888	; 0xe608
   16b14:	e3401002 	movt	r1, #2
   16b18:	e3400002 	movt	r0, #2
   16b1c:	e3a02026 	mov	r2, #38	; 0x26
   16b20:	eb00381d 	bl	24b9c <assertion_failed>
   16b24:	eaffffeb 	b	16ad8 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x5c>

00016b28 <CTransportLayer::Initialize()>:
   16b28:	e5903020 	ldr	r3, [r0, #32]
   16b2c:	e92d4010 	push	{r4, lr}
   16b30:	e3530000 	cmp	r3, #0
   16b34:	e1a04000 	mov	r4, r0
   16b38:	0a000005 	beq	16b54 <CTransportLayer::Initialize()+0x2c>
   16b3c:	e30e1684 	movw	r1, #59012	; 0xe684
   16b40:	e30e06b0 	movw	r0, #59056	; 0xe6b0
   16b44:	e3401002 	movt	r1, #2
   16b48:	e3400002 	movt	r0, #2
   16b4c:	e3a0203c 	mov	r2, #60	; 0x3c
   16b50:	eb003811 	bl	24b9c <assertion_failed>
   16b54:	e3a00d19 	mov	r0, #1600	; 0x640
   16b58:	eb002d04 	bl	21f70 <operator new[](unsigned int)>
   16b5c:	e5840020 	str	r0, [r4, #32]
   16b60:	e3a00001 	mov	r0, #1
   16b64:	e8bd8010 	pop	{r4, pc}

00016b68 <CTransportLayer::Bind(unsigned short, int)>:
   16b68:	e3520011 	cmp	r2, #17
   16b6c:	1a000046 	bne	16c8c <CTransportLayer::Bind(unsigned short, int)+0x124>
   16b70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16b74:	e1a06000 	mov	r6, r0
   16b78:	e590001c 	ldr	r0, [r0, #28]
   16b7c:	e1a07001 	mov	r7, r1
   16b80:	e3500000 	cmp	r0, #0
   16b84:	1a000038 	bne	16c6c <CTransportLayer::Bind(unsigned short, int)+0x104>
   16b88:	e2865008 	add	r5, r6, #8
   16b8c:	e3a04000 	mov	r4, #0
   16b90:	ea000004 	b	16ba8 <CTransportLayer::Bind(unsigned short, int)+0x40>
   16b94:	eb0048e6 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16b98:	e5903000 	ldr	r3, [r0]
   16b9c:	e3530000 	cmp	r3, #0
   16ba0:	0a000006 	beq	16bc0 <CTransportLayer::Bind(unsigned short, int)+0x58>
   16ba4:	e2844001 	add	r4, r4, #1
   16ba8:	e1a00005 	mov	r0, r5
   16bac:	eb0048de 	bl	28f2c <CPtrArray::GetCount() const>
   16bb0:	e1a01004 	mov	r1, r4
   16bb4:	e1540000 	cmp	r4, r0
   16bb8:	e1a00005 	mov	r0, r5
   16bbc:	3afffff4 	bcc	16b94 <CTransportLayer::Bind(unsigned short, int)+0x2c>
   16bc0:	e1a00005 	mov	r0, r5
   16bc4:	eb0048d8 	bl	28f2c <CPtrArray::GetCount() const>
   16bc8:	e1540000 	cmp	r4, r0
   16bcc:	2a000021 	bcs	16c58 <CTransportLayer::Bind(unsigned short, int)+0xf0>
   16bd0:	e3570000 	cmp	r7, #0
   16bd4:	0a00001a 	beq	16c44 <CTransportLayer::Bind(unsigned short, int)+0xdc>
   16bd8:	e5963000 	ldr	r3, [r6]
   16bdc:	e3530000 	cmp	r3, #0
   16be0:	0a00002b 	beq	16c94 <CTransportLayer::Bind(unsigned short, int)+0x12c>
   16be4:	e5963004 	ldr	r3, [r6, #4]
   16be8:	e3530000 	cmp	r3, #0
   16bec:	0a00002f 	beq	16cb0 <CTransportLayer::Bind(unsigned short, int)+0x148>
   16bf0:	e3a00050 	mov	r0, #80	; 0x50
   16bf4:	eb002cdc 	bl	21f6c <operator new(unsigned int)>
   16bf8:	e1a03007 	mov	r3, r7
   16bfc:	e8960006 	ldm	r6, {r1, r2}
   16c00:	e1a08000 	mov	r8, r0
   16c04:	eb000fc9 	bl	1ab30 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   16c08:	e1a01004 	mov	r1, r4
   16c0c:	e1a00005 	mov	r0, r5
   16c10:	eb0048c7 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16c14:	e1a01004 	mov	r1, r4
   16c18:	e5808000 	str	r8, [r0]
   16c1c:	e1a00005 	mov	r0, r5
   16c20:	eb0048c3 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16c24:	e5903000 	ldr	r3, [r0]
   16c28:	e3530000 	cmp	r3, #0
   16c2c:	0a000026 	beq	16ccc <CTransportLayer::Bind(unsigned short, int)+0x164>
   16c30:	e596301c 	ldr	r3, [r6, #28]
   16c34:	e3530000 	cmp	r3, #0
   16c38:	1a00000d 	bne	16c74 <CTransportLayer::Bind(unsigned short, int)+0x10c>
   16c3c:	e1a00004 	mov	r0, r4
   16c40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16c44:	e596301c 	ldr	r3, [r6, #28]
   16c48:	e3530000 	cmp	r3, #0
   16c4c:	1a00000b 	bne	16c80 <CTransportLayer::Bind(unsigned short, int)+0x118>
   16c50:	e3e00000 	mvn	r0, #0
   16c54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16c58:	e3a01000 	mov	r1, #0
   16c5c:	e1a00005 	mov	r0, r5
   16c60:	eb004907 	bl	29084 <CPtrArray::Append(void*)>
   16c64:	e1a04000 	mov	r4, r0
   16c68:	eaffffd8 	b	16bd0 <CTransportLayer::Bind(unsigned short, int)+0x68>
   16c6c:	eb002cca 	bl	21f9c <EnterCritical>
   16c70:	eaffffc4 	b	16b88 <CTransportLayer::Bind(unsigned short, int)+0x20>
   16c74:	eb002cf6 	bl	22054 <LeaveCritical>
   16c78:	e1a00004 	mov	r0, r4
   16c7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16c80:	eb002cf3 	bl	22054 <LeaveCritical>
   16c84:	e3e00000 	mvn	r0, #0
   16c88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16c8c:	e3e00000 	mvn	r0, #0
   16c90:	e12fff1e 	bx	lr
   16c94:	e30e1684 	movw	r1, #59012	; 0xe684
   16c98:	e30e0608 	movw	r0, #58888	; 0xe608
   16c9c:	e3401002 	movt	r1, #2
   16ca0:	e3400002 	movt	r0, #2
   16ca4:	e3a020bc 	mov	r2, #188	; 0xbc
   16ca8:	eb0037bb 	bl	24b9c <assertion_failed>
   16cac:	eaffffcc 	b	16be4 <CTransportLayer::Bind(unsigned short, int)+0x7c>
   16cb0:	e30e1684 	movw	r1, #59012	; 0xe684
   16cb4:	e30e0698 	movw	r0, #59032	; 0xe698
   16cb8:	e3401002 	movt	r1, #2
   16cbc:	e3400002 	movt	r0, #2
   16cc0:	e3a020bd 	mov	r2, #189	; 0xbd
   16cc4:	eb0037b4 	bl	24b9c <assertion_failed>
   16cc8:	eaffffc8 	b	16bf0 <CTransportLayer::Bind(unsigned short, int)+0x88>
   16ccc:	e30e1684 	movw	r1, #59012	; 0xe684
   16cd0:	e30e06c0 	movw	r0, #59072	; 0xe6c0
   16cd4:	e3401002 	movt	r1, #2
   16cd8:	e3400002 	movt	r0, #2
   16cdc:	e3a020bf 	mov	r2, #191	; 0xbf
   16ce0:	eb0037ad 	bl	24b9c <assertion_failed>
   16ce4:	eaffffd1 	b	16c30 <CTransportLayer::Bind(unsigned short, int)+0xc8>

00016ce8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   16ce8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cec:	e1a08000 	mov	r8, r0
   16cf0:	e590001c 	ldr	r0, [r0, #28]
   16cf4:	e24dd014 	sub	sp, sp, #20
   16cf8:	e1a06003 	mov	r6, r3
   16cfc:	e3500000 	cmp	r0, #0
   16d00:	e58d1008 	str	r1, [sp, #8]
   16d04:	e58d200c 	str	r2, [sp, #12]
   16d08:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   16d0c:	1a00007d 	bne	16f08 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x220>
   16d10:	e2885008 	add	r5, r8, #8
   16d14:	e3a07000 	mov	r7, #0
   16d18:	ea000004 	b	16d30 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x48>
   16d1c:	eb004884 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16d20:	e5903000 	ldr	r3, [r0]
   16d24:	e3530000 	cmp	r3, #0
   16d28:	0a000006 	beq	16d48 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   16d2c:	e2877001 	add	r7, r7, #1
   16d30:	e1a00005 	mov	r0, r5
   16d34:	eb00487c 	bl	28f2c <CPtrArray::GetCount() const>
   16d38:	e1a01007 	mov	r1, r7
   16d3c:	e1570000 	cmp	r7, r0
   16d40:	e1a00005 	mov	r0, r5
   16d44:	3afffff4 	bcc	16d1c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   16d48:	e1a00005 	mov	r0, r5
   16d4c:	eb004876 	bl	28f2c <CPtrArray::GetCount() const>
   16d50:	e1570000 	cmp	r7, r0
   16d54:	2a00006d 	bcs	16f10 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x228>
   16d58:	e3560000 	cmp	r6, #0
   16d5c:	1a000027 	bne	16e00 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x118>
   16d60:	e30eba60 	movw	fp, #60000	; 0xea60
   16d64:	e34fbfff 	movt	fp, #65535	; 0xffff
   16d68:	e30eae47 	movw	sl, #60999	; 0xee47
   16d6c:	e1d861b8 	ldrh	r6, [r8, #24]
   16d70:	e3a04000 	mov	r4, #0
   16d74:	e2863001 	add	r3, r6, #1
   16d78:	e6ff3073 	uxth	r3, r3
   16d7c:	e153000a 	cmp	r3, sl
   16d80:	91c831b8 	strhls	r3, [r8, #24]
   16d84:	81c8b1b8 	strhhi	fp, [r8, #24]
   16d88:	ea000000 	b	16d90 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa8>
   16d8c:	e2844001 	add	r4, r4, #1
   16d90:	e1a00005 	mov	r0, r5
   16d94:	eb004864 	bl	28f2c <CPtrArray::GetCount() const>
   16d98:	e1a01004 	mov	r1, r4
   16d9c:	e1540000 	cmp	r4, r0
   16da0:	e1a00005 	mov	r0, r5
   16da4:	2a000011 	bcs	16df0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x108>
   16da8:	eb004861 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16dac:	e1a01004 	mov	r1, r4
   16db0:	e5903000 	ldr	r3, [r0]
   16db4:	e1a00005 	mov	r0, r5
   16db8:	e3530000 	cmp	r3, #0
   16dbc:	0afffff2 	beq	16d8c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   16dc0:	eb00485b 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16dc4:	e5900000 	ldr	r0, [r0]
   16dc8:	eb000ccd 	bl	1a104 <CNetConnection::GetOwnPort() const>
   16dcc:	e1560000 	cmp	r6, r0
   16dd0:	1affffed 	bne	16d8c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   16dd4:	e1a01004 	mov	r1, r4
   16dd8:	e1a00005 	mov	r0, r5
   16ddc:	eb004854 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16de0:	e5900000 	ldr	r0, [r0]
   16de4:	eb000cd6 	bl	1a144 <CNetConnection::GetProtocol() const>
   16de8:	e1500009 	cmp	r0, r9
   16dec:	1affffe6 	bne	16d8c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   16df0:	e1a00005 	mov	r0, r5
   16df4:	eb00484c 	bl	28f2c <CPtrArray::GetCount() const>
   16df8:	e1540000 	cmp	r4, r0
   16dfc:	3affffda 	bcc	16d6c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x84>
   16e00:	e5983000 	ldr	r3, [r8]
   16e04:	e3530000 	cmp	r3, #0
   16e08:	0a000049 	beq	16f34 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x24c>
   16e0c:	e5983004 	ldr	r3, [r8, #4]
   16e10:	e3530000 	cmp	r3, #0
   16e14:	0a00004d 	beq	16f50 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x268>
   16e18:	e3590006 	cmp	r9, #6
   16e1c:	0a00002a 	beq	16ecc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1e4>
   16e20:	e3590011 	cmp	r9, #17
   16e24:	1a000022 	bne	16eb4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1cc>
   16e28:	e3a00050 	mov	r0, #80	; 0x50
   16e2c:	eb002c4e 	bl	21f6c <operator new(unsigned int)>
   16e30:	e59dc00c 	ldr	ip, [sp, #12]
   16e34:	e5982004 	ldr	r2, [r8, #4]
   16e38:	e5981000 	ldr	r1, [r8]
   16e3c:	e59d3008 	ldr	r3, [sp, #8]
   16e40:	e58dc000 	str	ip, [sp]
   16e44:	e58d6004 	str	r6, [sp, #4]
   16e48:	e1a04000 	mov	r4, r0
   16e4c:	eb000f1c 	bl	1aac4 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   16e50:	e1a01007 	mov	r1, r7
   16e54:	e1a00005 	mov	r0, r5
   16e58:	eb004835 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16e5c:	e5804000 	str	r4, [r0]
   16e60:	e1a01007 	mov	r1, r7
   16e64:	e1a00005 	mov	r0, r5
   16e68:	eb004831 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16e6c:	e5903000 	ldr	r3, [r0]
   16e70:	e3530000 	cmp	r3, #0
   16e74:	0a00003c 	beq	16f6c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x284>
   16e78:	e1a01007 	mov	r1, r7
   16e7c:	e1a00005 	mov	r0, r5
   16e80:	eb00482b 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16e84:	e5900000 	ldr	r0, [r0]
   16e88:	e5903000 	ldr	r3, [r0]
   16e8c:	e5933008 	ldr	r3, [r3, #8]
   16e90:	e12fff33 	blx	r3
   16e94:	e3500000 	cmp	r0, #0
   16e98:	ba000005 	blt	16eb4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1cc>
   16e9c:	e598301c 	ldr	r3, [r8, #28]
   16ea0:	e3530000 	cmp	r3, #0
   16ea4:	1a000020 	bne	16f2c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x244>
   16ea8:	e1a00007 	mov	r0, r7
   16eac:	e28dd014 	add	sp, sp, #20
   16eb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eb4:	e598301c 	ldr	r3, [r8, #28]
   16eb8:	e3530000 	cmp	r3, #0
   16ebc:	1a000018 	bne	16f24 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x23c>
   16ec0:	e3e00000 	mvn	r0, #0
   16ec4:	e28dd014 	add	sp, sp, #20
   16ec8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ecc:	e3a000f4 	mov	r0, #244	; 0xf4
   16ed0:	eb002c25 	bl	21f6c <operator new(unsigned int)>
   16ed4:	e59dc00c 	ldr	ip, [sp, #12]
   16ed8:	e5982004 	ldr	r2, [r8, #4]
   16edc:	e5981000 	ldr	r1, [r8]
   16ee0:	e59d3008 	ldr	r3, [sp, #8]
   16ee4:	e58dc000 	str	ip, [sp]
   16ee8:	e58d6004 	str	r6, [sp, #4]
   16eec:	e1a04000 	mov	r4, r0
   16ef0:	eb0011bd 	bl	1b5ec <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   16ef4:	e1a01007 	mov	r1, r7
   16ef8:	e1a00005 	mov	r0, r5
   16efc:	eb00480c 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16f00:	e5804000 	str	r4, [r0]
   16f04:	eaffffd5 	b	16e60 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x178>
   16f08:	eb002c23 	bl	21f9c <EnterCritical>
   16f0c:	eaffff7f 	b	16d10 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   16f10:	e3a01000 	mov	r1, #0
   16f14:	e1a00005 	mov	r0, r5
   16f18:	eb004859 	bl	29084 <CPtrArray::Append(void*)>
   16f1c:	e1a07000 	mov	r7, r0
   16f20:	eaffff8c 	b	16d58 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   16f24:	eb002c4a 	bl	22054 <LeaveCritical>
   16f28:	eaffffe4 	b	16ec0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d8>
   16f2c:	eb002c48 	bl	22054 <LeaveCritical>
   16f30:	eaffffdc 	b	16ea8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1c0>
   16f34:	e30e1684 	movw	r1, #59012	; 0xe684
   16f38:	e30e0608 	movw	r0, #58888	; 0xe608
   16f3c:	e3401002 	movt	r1, #2
   16f40:	e3400002 	movt	r0, #2
   16f44:	e3a020f0 	mov	r2, #240	; 0xf0
   16f48:	eb003713 	bl	24b9c <assertion_failed>
   16f4c:	eaffffae 	b	16e0c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x124>
   16f50:	e30e1684 	movw	r1, #59012	; 0xe684
   16f54:	e30e0698 	movw	r0, #59032	; 0xe698
   16f58:	e3401002 	movt	r1, #2
   16f5c:	e3400002 	movt	r0, #2
   16f60:	e3a020f1 	mov	r2, #241	; 0xf1
   16f64:	eb00370c 	bl	24b9c <assertion_failed>
   16f68:	eaffffaa 	b	16e18 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x130>
   16f6c:	e30e1684 	movw	r1, #59012	; 0xe684
   16f70:	e30e06c0 	movw	r0, #59072	; 0xe6c0
   16f74:	e3401002 	movt	r1, #2
   16f78:	e3400002 	movt	r0, #2
   16f7c:	e3a02c01 	mov	r2, #256	; 0x100
   16f80:	eb003705 	bl	24b9c <assertion_failed>
   16f84:	eaffffbb 	b	16e78 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x190>

00016f88 <CTransportLayer::Listen(unsigned short, int)>:
   16f88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16f8c:	e1a06000 	mov	r6, r0
   16f90:	e590001c 	ldr	r0, [r0, #28]
   16f94:	e1a07001 	mov	r7, r1
   16f98:	e1a08002 	mov	r8, r2
   16f9c:	e3500000 	cmp	r0, #0
   16fa0:	1a00001f 	bne	17024 <CTransportLayer::Listen(unsigned short, int)+0x9c>
   16fa4:	e2865008 	add	r5, r6, #8
   16fa8:	e3a04000 	mov	r4, #0
   16fac:	ea000004 	b	16fc4 <CTransportLayer::Listen(unsigned short, int)+0x3c>
   16fb0:	eb0047df 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   16fb4:	e5903000 	ldr	r3, [r0]
   16fb8:	e3530000 	cmp	r3, #0
   16fbc:	0a000006 	beq	16fdc <CTransportLayer::Listen(unsigned short, int)+0x54>
   16fc0:	e2844001 	add	r4, r4, #1
   16fc4:	e1a00005 	mov	r0, r5
   16fc8:	eb0047d7 	bl	28f2c <CPtrArray::GetCount() const>
   16fcc:	e1a01004 	mov	r1, r4
   16fd0:	e1540000 	cmp	r4, r0
   16fd4:	e1a00005 	mov	r0, r5
   16fd8:	3afffff4 	bcc	16fb0 <CTransportLayer::Listen(unsigned short, int)+0x28>
   16fdc:	e1a00005 	mov	r0, r5
   16fe0:	eb0047d1 	bl	28f2c <CPtrArray::GetCount() const>
   16fe4:	e1540000 	cmp	r4, r0
   16fe8:	2a000008 	bcs	17010 <CTransportLayer::Listen(unsigned short, int)+0x88>
   16fec:	e3570000 	cmp	r7, #0
   16ff0:	0a000001 	beq	16ffc <CTransportLayer::Listen(unsigned short, int)+0x74>
   16ff4:	e3580006 	cmp	r8, #6
   16ff8:	0a00000e 	beq	17038 <CTransportLayer::Listen(unsigned short, int)+0xb0>
   16ffc:	e596301c 	ldr	r3, [r6, #28]
   17000:	e3530000 	cmp	r3, #0
   17004:	1a000008 	bne	1702c <CTransportLayer::Listen(unsigned short, int)+0xa4>
   17008:	e3e00000 	mvn	r0, #0
   1700c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17010:	e3a01000 	mov	r1, #0
   17014:	e1a00005 	mov	r0, r5
   17018:	eb004819 	bl	29084 <CPtrArray::Append(void*)>
   1701c:	e1a04000 	mov	r4, r0
   17020:	eafffff1 	b	16fec <CTransportLayer::Listen(unsigned short, int)+0x64>
   17024:	eb002bdc 	bl	21f9c <EnterCritical>
   17028:	eaffffdd 	b	16fa4 <CTransportLayer::Listen(unsigned short, int)+0x1c>
   1702c:	eb002c08 	bl	22054 <LeaveCritical>
   17030:	e3e00000 	mvn	r0, #0
   17034:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17038:	e5963000 	ldr	r3, [r6]
   1703c:	e3530000 	cmp	r3, #0
   17040:	0a000027 	beq	170e4 <CTransportLayer::Listen(unsigned short, int)+0x15c>
   17044:	e5963004 	ldr	r3, [r6, #4]
   17048:	e3530000 	cmp	r3, #0
   1704c:	0a00001d 	beq	170c8 <CTransportLayer::Listen(unsigned short, int)+0x140>
   17050:	e3a000f4 	mov	r0, #244	; 0xf4
   17054:	eb002bc4 	bl	21f6c <operator new(unsigned int)>
   17058:	e1a03007 	mov	r3, r7
   1705c:	e8960006 	ldm	r6, {r1, r2}
   17060:	e1a08000 	mov	r8, r0
   17064:	eb000f8e 	bl	1aea4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   17068:	e1a01004 	mov	r1, r4
   1706c:	e1a00005 	mov	r0, r5
   17070:	eb0047af 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17074:	e1a01004 	mov	r1, r4
   17078:	e5808000 	str	r8, [r0]
   1707c:	e1a00005 	mov	r0, r5
   17080:	eb0047ab 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17084:	e5903000 	ldr	r3, [r0]
   17088:	e3530000 	cmp	r3, #0
   1708c:	0a000006 	beq	170ac <CTransportLayer::Listen(unsigned short, int)+0x124>
   17090:	e596301c 	ldr	r3, [r6, #28]
   17094:	e3530000 	cmp	r3, #0
   17098:	1a000001 	bne	170a4 <CTransportLayer::Listen(unsigned short, int)+0x11c>
   1709c:	e1a00004 	mov	r0, r4
   170a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   170a4:	eb002bea 	bl	22054 <LeaveCritical>
   170a8:	eafffffb 	b	1709c <CTransportLayer::Listen(unsigned short, int)+0x114>
   170ac:	e30e1684 	movw	r1, #59012	; 0xe684
   170b0:	e30e06c0 	movw	r0, #59072	; 0xe6c0
   170b4:	e3401002 	movt	r1, #2
   170b8:	e3400002 	movt	r0, #2
   170bc:	e3002132 	movw	r2, #306	; 0x132
   170c0:	eb0036b5 	bl	24b9c <assertion_failed>
   170c4:	eafffff1 	b	17090 <CTransportLayer::Listen(unsigned short, int)+0x108>
   170c8:	e30e1684 	movw	r1, #59012	; 0xe684
   170cc:	e30e0698 	movw	r0, #59032	; 0xe698
   170d0:	e3401002 	movt	r1, #2
   170d4:	e3400002 	movt	r0, #2
   170d8:	e3a02e13 	mov	r2, #304	; 0x130
   170dc:	eb0036ae 	bl	24b9c <assertion_failed>
   170e0:	eaffffda 	b	17050 <CTransportLayer::Listen(unsigned short, int)+0xc8>
   170e4:	e30e1684 	movw	r1, #59012	; 0xe684
   170e8:	e30e0608 	movw	r0, #58888	; 0xe608
   170ec:	e3401002 	movt	r1, #2
   170f0:	e3400002 	movt	r0, #2
   170f4:	e300212f 	movw	r2, #303	; 0x12f
   170f8:	eb0036a7 	bl	24b9c <assertion_failed>
   170fc:	eaffffd0 	b	17044 <CTransportLayer::Listen(unsigned short, int)+0xbc>

00017100 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   17100:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17104:	e2535000 	subs	r5, r3, #0
   17108:	e1a04000 	mov	r4, r0
   1710c:	e1a06001 	mov	r6, r1
   17110:	e1a07002 	mov	r7, r2
   17114:	ba00001a 	blt	17184 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x84>
   17118:	e2844008 	add	r4, r4, #8
   1711c:	e1a00004 	mov	r0, r4
   17120:	eb004781 	bl	28f2c <CPtrArray::GetCount() const>
   17124:	e1550000 	cmp	r5, r0
   17128:	ba000001 	blt	17134 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x34>
   1712c:	e3e00000 	mvn	r0, #0
   17130:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17134:	e1a01005 	mov	r1, r5
   17138:	e1a00004 	mov	r0, r4
   1713c:	eb00477c 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17140:	e5903000 	ldr	r3, [r0]
   17144:	e3530000 	cmp	r3, #0
   17148:	0afffff7 	beq	1712c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x2c>
   1714c:	e3560000 	cmp	r6, #0
   17150:	0a000019 	beq	171bc <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xbc>
   17154:	e3570000 	cmp	r7, #0
   17158:	0a000010 	beq	171a0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xa0>
   1715c:	e1a01005 	mov	r1, r5
   17160:	e1a00004 	mov	r0, r4
   17164:	eb004772 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17168:	e1a02007 	mov	r2, r7
   1716c:	e1a01006 	mov	r1, r6
   17170:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   17174:	e5900000 	ldr	r0, [r0]
   17178:	e5903000 	ldr	r3, [r0]
   1717c:	e593300c 	ldr	r3, [r3, #12]
   17180:	e12fff13 	bx	r3
   17184:	e30e1684 	movw	r1, #59012	; 0xe684
   17188:	e30e06d8 	movw	r0, #59096	; 0xe6d8
   1718c:	e3401002 	movt	r1, #2
   17190:	e3400002 	movt	r0, #2
   17194:	e300213b 	movw	r2, #315	; 0x13b
   17198:	eb00367f 	bl	24b9c <assertion_failed>
   1719c:	eaffffdd 	b	17118 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x18>
   171a0:	e30e1684 	movw	r1, #59012	; 0xe684
   171a4:	e30e0644 	movw	r0, #58948	; 0xe644
   171a8:	e3401002 	movt	r1, #2
   171ac:	e3400002 	movt	r0, #2
   171b0:	e3002143 	movw	r2, #323	; 0x143
   171b4:	eb003678 	bl	24b9c <assertion_failed>
   171b8:	eaffffe7 	b	1715c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x5c>
   171bc:	e30e1684 	movw	r1, #59012	; 0xe684
   171c0:	e30e0634 	movw	r0, #58932	; 0xe634
   171c4:	e3401002 	movt	r1, #2
   171c8:	e3400002 	movt	r0, #2
   171cc:	e3002142 	movw	r2, #322	; 0x142
   171d0:	eb003671 	bl	24b9c <assertion_failed>
   171d4:	eaffffde 	b	17154 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x54>

000171d8 <CTransportLayer::Disconnect(int)>:
   171d8:	e92d4070 	push	{r4, r5, r6, lr}
   171dc:	e2515000 	subs	r5, r1, #0
   171e0:	e1a04000 	mov	r4, r0
   171e4:	ba000014 	blt	1723c <CTransportLayer::Disconnect(int)+0x64>
   171e8:	e2844008 	add	r4, r4, #8
   171ec:	e1a00004 	mov	r0, r4
   171f0:	eb00474d 	bl	28f2c <CPtrArray::GetCount() const>
   171f4:	e1550000 	cmp	r5, r0
   171f8:	ba000001 	blt	17204 <CTransportLayer::Disconnect(int)+0x2c>
   171fc:	e3e00000 	mvn	r0, #0
   17200:	e8bd8070 	pop	{r4, r5, r6, pc}
   17204:	e1a01005 	mov	r1, r5
   17208:	e1a00004 	mov	r0, r4
   1720c:	eb004748 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17210:	e5903000 	ldr	r3, [r0]
   17214:	e3530000 	cmp	r3, #0
   17218:	0afffff7 	beq	171fc <CTransportLayer::Disconnect(int)+0x24>
   1721c:	e1a01005 	mov	r1, r5
   17220:	e1a00004 	mov	r0, r4
   17224:	eb004742 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17228:	e8bd4070 	pop	{r4, r5, r6, lr}
   1722c:	e5900000 	ldr	r0, [r0]
   17230:	e5903000 	ldr	r3, [r0]
   17234:	e5933010 	ldr	r3, [r3, #16]
   17238:	e12fff13 	bx	r3
   1723c:	e30e1684 	movw	r1, #59012	; 0xe684
   17240:	e30e06d8 	movw	r0, #59096	; 0xe6d8
   17244:	e3401002 	movt	r1, #2
   17248:	e3400002 	movt	r0, #2
   1724c:	e3002149 	movw	r2, #329	; 0x149
   17250:	eb003651 	bl	24b9c <assertion_failed>
   17254:	eaffffe3 	b	171e8 <CTransportLayer::Disconnect(int)+0x10>

00017258 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   17258:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1725c:	e1a04000 	mov	r4, r0
   17260:	e59d5018 	ldr	r5, [sp, #24]
   17264:	e1a06001 	mov	r6, r1
   17268:	e1a07002 	mov	r7, r2
   1726c:	e1a08003 	mov	r8, r3
   17270:	e3550000 	cmp	r5, #0
   17274:	ba000023 	blt	17308 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xb0>
   17278:	e2844008 	add	r4, r4, #8
   1727c:	e1a00004 	mov	r0, r4
   17280:	eb004729 	bl	28f2c <CPtrArray::GetCount() const>
   17284:	e1550000 	cmp	r5, r0
   17288:	ba000001 	blt	17294 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x3c>
   1728c:	e3e00000 	mvn	r0, #0
   17290:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17294:	e1a01005 	mov	r1, r5
   17298:	e1a00004 	mov	r0, r4
   1729c:	eb004724 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   172a0:	e5903000 	ldr	r3, [r0]
   172a4:	e3530000 	cmp	r3, #0
   172a8:	0afffff7 	beq	1728c <CTransportLayer::Send(void const*, unsigned int, int, int)+0x34>
   172ac:	e3560000 	cmp	r6, #0
   172b0:	0a00001b 	beq	17324 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xcc>
   172b4:	e3570000 	cmp	r7, #0
   172b8:	0a00000b 	beq	172ec <CTransportLayer::Send(void const*, unsigned int, int, int)+0x94>
   172bc:	e1a01005 	mov	r1, r5
   172c0:	e1a00004 	mov	r0, r4
   172c4:	eb00471a 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   172c8:	e1a03008 	mov	r3, r8
   172cc:	e1a02007 	mov	r2, r7
   172d0:	e1a01006 	mov	r1, r6
   172d4:	e5900000 	ldr	r0, [r0]
   172d8:	e590c000 	ldr	ip, [r0]
   172dc:	e59ce014 	ldr	lr, [ip, #20]
   172e0:	e1a0c00e 	mov	ip, lr
   172e4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   172e8:	e12fff1c 	bx	ip
   172ec:	e30e1684 	movw	r1, #59012	; 0xe684
   172f0:	e30e06f8 	movw	r0, #59128	; 0xe6f8
   172f4:	e3401002 	movt	r1, #2
   172f8:	e3400002 	movt	r0, #2
   172fc:	e300215d 	movw	r2, #349	; 0x15d
   17300:	eb003625 	bl	24b9c <assertion_failed>
   17304:	eaffffec 	b	172bc <CTransportLayer::Send(void const*, unsigned int, int, int)+0x64>
   17308:	e30e1684 	movw	r1, #59012	; 0xe684
   1730c:	e30e06d8 	movw	r0, #59096	; 0xe6d8
   17310:	e3401002 	movt	r1, #2
   17314:	e3400002 	movt	r0, #2
   17318:	e3002155 	movw	r2, #341	; 0x155
   1731c:	eb00361e 	bl	24b9c <assertion_failed>
   17320:	eaffffd4 	b	17278 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x20>
   17324:	e30e1684 	movw	r1, #59012	; 0xe684
   17328:	e30e06ec 	movw	r0, #59116	; 0xe6ec
   1732c:	e3401002 	movt	r1, #2
   17330:	e3400002 	movt	r0, #2
   17334:	e3a02f57 	mov	r2, #348	; 0x15c
   17338:	eb003617 	bl	24b9c <assertion_failed>
   1733c:	eaffffdc 	b	172b4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x5c>

00017340 <CTransportLayer::Receive(void*, int, int)>:
   17340:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17344:	e2535000 	subs	r5, r3, #0
   17348:	e1a04000 	mov	r4, r0
   1734c:	e1a06001 	mov	r6, r1
   17350:	e1a07002 	mov	r7, r2
   17354:	ba000018 	blt	173bc <CTransportLayer::Receive(void*, int, int)+0x7c>
   17358:	e2844008 	add	r4, r4, #8
   1735c:	e1a00004 	mov	r0, r4
   17360:	eb0046f1 	bl	28f2c <CPtrArray::GetCount() const>
   17364:	e1550000 	cmp	r5, r0
   17368:	ba000001 	blt	17374 <CTransportLayer::Receive(void*, int, int)+0x34>
   1736c:	e3e00000 	mvn	r0, #0
   17370:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17374:	e1a01005 	mov	r1, r5
   17378:	e1a00004 	mov	r0, r4
   1737c:	eb0046ec 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17380:	e5903000 	ldr	r3, [r0]
   17384:	e3530000 	cmp	r3, #0
   17388:	0afffff7 	beq	1736c <CTransportLayer::Receive(void*, int, int)+0x2c>
   1738c:	e3560000 	cmp	r6, #0
   17390:	0a000010 	beq	173d8 <CTransportLayer::Receive(void*, int, int)+0x98>
   17394:	e1a01005 	mov	r1, r5
   17398:	e1a00004 	mov	r0, r4
   1739c:	eb0046e4 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   173a0:	e1a02007 	mov	r2, r7
   173a4:	e1a01006 	mov	r1, r6
   173a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   173ac:	e5900000 	ldr	r0, [r0]
   173b0:	e5903000 	ldr	r3, [r0]
   173b4:	e5933018 	ldr	r3, [r3, #24]
   173b8:	e12fff13 	bx	r3
   173bc:	e30e1684 	movw	r1, #59012	; 0xe684
   173c0:	e30e06d8 	movw	r0, #59096	; 0xe6d8
   173c4:	e3401002 	movt	r1, #2
   173c8:	e3400002 	movt	r0, #2
   173cc:	e3002163 	movw	r2, #355	; 0x163
   173d0:	eb0035f1 	bl	24b9c <assertion_failed>
   173d4:	eaffffdf 	b	17358 <CTransportLayer::Receive(void*, int, int)+0x18>
   173d8:	e30e1684 	movw	r1, #59012	; 0xe684
   173dc:	e30b097c 	movw	r0, #47484	; 0xb97c
   173e0:	e3401002 	movt	r1, #2
   173e4:	e3400002 	movt	r0, #2
   173e8:	e300216a 	movw	r2, #362	; 0x16a
   173ec:	eb0035ea 	bl	24b9c <assertion_failed>
   173f0:	eaffffe7 	b	17394 <CTransportLayer::Receive(void*, int, int)+0x54>

000173f4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   173f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   173f8:	e1a04000 	mov	r4, r0
   173fc:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   17400:	e1a06001 	mov	r6, r1
   17404:	e1a07002 	mov	r7, r2
   17408:	e1a0a003 	mov	sl, r3
   1740c:	e3550000 	cmp	r5, #0
   17410:	e59d8020 	ldr	r8, [sp, #32]
   17414:	e1dd92b4 	ldrh	r9, [sp, #36]	; 0x24
   17418:	ba000025 	blt	174b4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xc0>
   1741c:	e2844008 	add	r4, r4, #8
   17420:	e1a00004 	mov	r0, r4
   17424:	eb0046c0 	bl	28f2c <CPtrArray::GetCount() const>
   17428:	e1550000 	cmp	r5, r0
   1742c:	ba000001 	blt	17438 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x44>
   17430:	e3e00000 	mvn	r0, #0
   17434:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17438:	e1a01005 	mov	r1, r5
   1743c:	e1a00004 	mov	r0, r4
   17440:	eb0046bb 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17444:	e5903000 	ldr	r3, [r0]
   17448:	e3530000 	cmp	r3, #0
   1744c:	0afffff7 	beq	17430 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x3c>
   17450:	e3560000 	cmp	r6, #0
   17454:	0a00001d 	beq	174d0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xdc>
   17458:	e3570000 	cmp	r7, #0
   1745c:	0a00000d 	beq	17498 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xa4>
   17460:	e1a01005 	mov	r1, r5
   17464:	e1a00004 	mov	r0, r4
   17468:	eb0046b1 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   1746c:	e1a0300a 	mov	r3, sl
   17470:	e1a02007 	mov	r2, r7
   17474:	e1a01006 	mov	r1, r6
   17478:	e5900000 	ldr	r0, [r0]
   1747c:	e590c000 	ldr	ip, [r0]
   17480:	e58d9024 	str	r9, [sp, #36]	; 0x24
   17484:	e58d8020 	str	r8, [sp, #32]
   17488:	e59ce01c 	ldr	lr, [ip, #28]
   1748c:	e1a0c00e 	mov	ip, lr
   17490:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   17494:	e12fff1c 	bx	ip
   17498:	e30e1684 	movw	r1, #59012	; 0xe684
   1749c:	e30e06f8 	movw	r0, #59128	; 0xe6f8
   174a0:	e3401002 	movt	r1, #2
   174a4:	e3400002 	movt	r0, #2
   174a8:	e3002179 	movw	r2, #377	; 0x179
   174ac:	eb0035ba 	bl	24b9c <assertion_failed>
   174b0:	eaffffea 	b	17460 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x6c>
   174b4:	e30e1684 	movw	r1, #59012	; 0xe684
   174b8:	e30e06d8 	movw	r0, #59096	; 0xe6d8
   174bc:	e3401002 	movt	r1, #2
   174c0:	e3400002 	movt	r0, #2
   174c4:	e3002171 	movw	r2, #369	; 0x171
   174c8:	eb0035b3 	bl	24b9c <assertion_failed>
   174cc:	eaffffd2 	b	1741c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x28>
   174d0:	e30e1684 	movw	r1, #59012	; 0xe684
   174d4:	e30e06ec 	movw	r0, #59116	; 0xe6ec
   174d8:	e3401002 	movt	r1, #2
   174dc:	e3400002 	movt	r0, #2
   174e0:	e3a02f5e 	mov	r2, #376	; 0x178
   174e4:	eb0035ac 	bl	24b9c <assertion_failed>
   174e8:	eaffffda 	b	17458 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x64>

000174ec <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   174ec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   174f0:	e1a04000 	mov	r4, r0
   174f4:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   174f8:	e1a06001 	mov	r6, r1
   174fc:	e1a07002 	mov	r7, r2
   17500:	e1a08003 	mov	r8, r3
   17504:	e3550000 	cmp	r5, #0
   17508:	e59d9020 	ldr	r9, [sp, #32]
   1750c:	ba00001b 	blt	17580 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x94>
   17510:	e2844008 	add	r4, r4, #8
   17514:	e1a00004 	mov	r0, r4
   17518:	eb004683 	bl	28f2c <CPtrArray::GetCount() const>
   1751c:	e1550000 	cmp	r5, r0
   17520:	ba000001 	blt	1752c <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x40>
   17524:	e3e00000 	mvn	r0, #0
   17528:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1752c:	e1a01005 	mov	r1, r5
   17530:	e1a00004 	mov	r0, r4
   17534:	eb00467e 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17538:	e5903000 	ldr	r3, [r0]
   1753c:	e3530000 	cmp	r3, #0
   17540:	0afffff7 	beq	17524 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x38>
   17544:	e3560000 	cmp	r6, #0
   17548:	0a000013 	beq	1759c <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb0>
   1754c:	e1a01005 	mov	r1, r5
   17550:	e1a00004 	mov	r0, r4
   17554:	eb004676 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17558:	e1a03008 	mov	r3, r8
   1755c:	e1a02007 	mov	r2, r7
   17560:	e1a01006 	mov	r1, r6
   17564:	e5900000 	ldr	r0, [r0]
   17568:	e590c000 	ldr	ip, [r0]
   1756c:	e58d9020 	str	r9, [sp, #32]
   17570:	e59ce020 	ldr	lr, [ip, #32]
   17574:	e1a0c00e 	mov	ip, lr
   17578:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1757c:	e12fff1c 	bx	ip
   17580:	e30e1684 	movw	r1, #59012	; 0xe684
   17584:	e30e06d8 	movw	r0, #59096	; 0xe6d8
   17588:	e3401002 	movt	r1, #2
   1758c:	e3400002 	movt	r0, #2
   17590:	e3002181 	movw	r2, #385	; 0x181
   17594:	eb003580 	bl	24b9c <assertion_failed>
   17598:	eaffffdc 	b	17510 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x24>
   1759c:	e30e1684 	movw	r1, #59012	; 0xe684
   175a0:	e30b097c 	movw	r0, #47484	; 0xb97c
   175a4:	e3401002 	movt	r1, #2
   175a8:	e3400002 	movt	r0, #2
   175ac:	e3a02f62 	mov	r2, #392	; 0x188
   175b0:	eb003579 	bl	24b9c <assertion_failed>
   175b4:	eaffffe4 	b	1754c <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x60>

000175b8 <CTransportLayer::SetOptionBroadcast(int, int)>:
   175b8:	e92d4070 	push	{r4, r5, r6, lr}
   175bc:	e2525000 	subs	r5, r2, #0
   175c0:	e1a04000 	mov	r4, r0
   175c4:	e1a06001 	mov	r6, r1
   175c8:	ba000015 	blt	17624 <CTransportLayer::SetOptionBroadcast(int, int)+0x6c>
   175cc:	e2844008 	add	r4, r4, #8
   175d0:	e1a00004 	mov	r0, r4
   175d4:	eb004654 	bl	28f2c <CPtrArray::GetCount() const>
   175d8:	e1550000 	cmp	r5, r0
   175dc:	ba000001 	blt	175e8 <CTransportLayer::SetOptionBroadcast(int, int)+0x30>
   175e0:	e3e00000 	mvn	r0, #0
   175e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   175e8:	e1a01005 	mov	r1, r5
   175ec:	e1a00004 	mov	r0, r4
   175f0:	eb00464f 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   175f4:	e5903000 	ldr	r3, [r0]
   175f8:	e3530000 	cmp	r3, #0
   175fc:	0afffff7 	beq	175e0 <CTransportLayer::SetOptionBroadcast(int, int)+0x28>
   17600:	e1a01005 	mov	r1, r5
   17604:	e1a00004 	mov	r0, r4
   17608:	eb004649 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   1760c:	e1a01006 	mov	r1, r6
   17610:	e8bd4070 	pop	{r4, r5, r6, lr}
   17614:	e5900000 	ldr	r0, [r0]
   17618:	e5903000 	ldr	r3, [r0]
   1761c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   17620:	e12fff13 	bx	r3
   17624:	e30e1684 	movw	r1, #59012	; 0xe684
   17628:	e30e06d8 	movw	r0, #59096	; 0xe6d8
   1762c:	e3401002 	movt	r1, #2
   17630:	e3400002 	movt	r0, #2
   17634:	e300218f 	movw	r2, #399	; 0x18f
   17638:	eb003557 	bl	24b9c <assertion_failed>
   1763c:	eaffffe2 	b	175cc <CTransportLayer::SetOptionBroadcast(int, int)+0x14>

00017640 <CTransportLayer::GetForeignIP(int) const>:
   17640:	e92d4070 	push	{r4, r5, r6, lr}
   17644:	e2515000 	subs	r5, r1, #0
   17648:	e1a04000 	mov	r4, r0
   1764c:	ba000010 	blt	17694 <CTransportLayer::GetForeignIP(int) const+0x54>
   17650:	e2844008 	add	r4, r4, #8
   17654:	e1a00004 	mov	r0, r4
   17658:	eb004633 	bl	28f2c <CPtrArray::GetCount() const>
   1765c:	e1550000 	cmp	r5, r0
   17660:	ba000001 	blt	1766c <CTransportLayer::GetForeignIP(int) const+0x2c>
   17664:	e3a00000 	mov	r0, #0
   17668:	e8bd8070 	pop	{r4, r5, r6, pc}
   1766c:	e1a01005 	mov	r1, r5
   17670:	e1a00004 	mov	r0, r4
   17674:	eb004658 	bl	28fdc <CPtrArray::operator[](unsigned int) const>
   17678:	e3500000 	cmp	r0, #0
   1767c:	0afffff8 	beq	17664 <CTransportLayer::GetForeignIP(int) const+0x24>
   17680:	e1a01005 	mov	r1, r5
   17684:	e1a00004 	mov	r0, r4
   17688:	eb004653 	bl	28fdc <CPtrArray::operator[](unsigned int) const>
   1768c:	e8bd4070 	pop	{r4, r5, r6, lr}
   17690:	ea000a99 	b	1a0fc <CNetConnection::GetForeignIP() const>
   17694:	e30e1684 	movw	r1, #59012	; 0xe684
   17698:	e30e06d8 	movw	r0, #59096	; 0xe6d8
   1769c:	e3401002 	movt	r1, #2
   176a0:	e3400002 	movt	r0, #2
   176a4:	e300219b 	movw	r2, #411	; 0x19b
   176a8:	eb00353b 	bl	24b9c <assertion_failed>
   176ac:	eaffffe7 	b	17650 <CTransportLayer::GetForeignIP(int) const+0x10>

000176b0 <CTransportLayer::~CTransportLayer()>:
   176b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   176b4:	e30e7684 	movw	r7, #59012	; 0xe684
   176b8:	e30e6704 	movw	r6, #59140	; 0xe704
   176bc:	e2805008 	add	r5, r0, #8
   176c0:	e3407002 	movt	r7, #2
   176c4:	e3406002 	movt	r6, #2
   176c8:	e1a08000 	mov	r8, r0
   176cc:	e3a04000 	mov	r4, #0
   176d0:	e1a00005 	mov	r0, r5
   176d4:	eb004614 	bl	28f2c <CPtrArray::GetCount() const>
   176d8:	e1a01004 	mov	r1, r4
   176dc:	e1540000 	cmp	r4, r0
   176e0:	e1a00005 	mov	r0, r5
   176e4:	e2844001 	add	r4, r4, #1
   176e8:	2a000008 	bcs	17710 <CTransportLayer::~CTransportLayer()+0x60>
   176ec:	eb004610 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   176f0:	e3a0202f 	mov	r2, #47	; 0x2f
   176f4:	e1a01007 	mov	r1, r7
   176f8:	e5903000 	ldr	r3, [r0]
   176fc:	e1a00006 	mov	r0, r6
   17700:	e3530000 	cmp	r3, #0
   17704:	0afffff1 	beq	176d0 <CTransportLayer::~CTransportLayer()+0x20>
   17708:	eb003523 	bl	24b9c <assertion_failed>
   1770c:	eaffffef 	b	176d0 <CTransportLayer::~CTransportLayer()+0x20>
   17710:	e5980020 	ldr	r0, [r8, #32]
   17714:	e3500000 	cmp	r0, #0
   17718:	0a000000 	beq	17720 <CTransportLayer::~CTransportLayer()+0x70>
   1771c:	eb002a15 	bl	21f78 <operator delete[](void*)>
   17720:	e1a00008 	mov	r0, r8
   17724:	e3a03000 	mov	r3, #0
   17728:	e5883020 	str	r3, [r8, #32]
   1772c:	e5883004 	str	r3, [r8, #4]
   17730:	e4803024 	str	r3, [r0], #36	; 0x24
   17734:	eb00173a 	bl	1d424 <CTCPRejector::~CTCPRejector()>
   17738:	e1a00005 	mov	r0, r5
   1773c:	eb0045ef 	bl	28f00 <CPtrArray::~CPtrArray()>
   17740:	e1a00008 	mov	r0, r8
   17744:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00017748 <CTransportLayer::Process()>:
   17748:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1774c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   17750:	e28d6030 	add	r6, sp, #48	; 0x30
   17754:	e1a07000 	mov	r7, r0
   17758:	e28d0028 	add	r0, sp, #40	; 0x28
   1775c:	eb001881 	bl	1d968 <CIPAddress::CIPAddress()>
   17760:	e1a00006 	mov	r0, r6
   17764:	eb00187f 	bl	1d968 <CIPAddress::CIPAddress()>
   17768:	e5973004 	ldr	r3, [r7, #4]
   1776c:	e3530000 	cmp	r3, #0
   17770:	0a0000b9 	beq	17a5c <CTransportLayer::Process()+0x314>
   17774:	e5971020 	ldr	r1, [r7, #32]
   17778:	e3510000 	cmp	r1, #0
   1777c:	0a0000ae 	beq	17a3c <CTransportLayer::Process()+0x2f4>
   17780:	e2874008 	add	r4, r7, #8
   17784:	e28d8024 	add	r8, sp, #36	; 0x24
   17788:	e2879024 	add	r9, r7, #36	; 0x24
   1778c:	e5970004 	ldr	r0, [r7, #4]
   17790:	e28d3028 	add	r3, sp, #40	; 0x28
   17794:	e58d8004 	str	r8, [sp, #4]
   17798:	e28d2020 	add	r2, sp, #32
   1779c:	e58d6000 	str	r6, [sp]
   177a0:	eb00025c 	bl	18118 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   177a4:	e3500000 	cmp	r0, #0
   177a8:	0a000020 	beq	17830 <CTransportLayer::Process()+0xe8>
   177ac:	e3a05000 	mov	r5, #0
   177b0:	ea000012 	b	17800 <CTransportLayer::Process()+0xb8>
   177b4:	eb0045de 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   177b8:	e1a01005 	mov	r1, r5
   177bc:	e5903000 	ldr	r3, [r0]
   177c0:	e1a00004 	mov	r0, r4
   177c4:	e3530000 	cmp	r3, #0
   177c8:	0a00000b 	beq	177fc <CTransportLayer::Process()+0xb4>
   177cc:	eb0045d8 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   177d0:	e59de024 	ldr	lr, [sp, #36]	; 0x24
   177d4:	e5971020 	ldr	r1, [r7, #32]
   177d8:	e28d3028 	add	r3, sp, #40	; 0x28
   177dc:	e59d2020 	ldr	r2, [sp, #32]
   177e0:	e5900000 	ldr	r0, [r0]
   177e4:	e590c000 	ldr	ip, [r0]
   177e8:	e88d4040 	stm	sp, {r6, lr}
   177ec:	e59ca030 	ldr	sl, [ip, #48]	; 0x30
   177f0:	e12fff3a 	blx	sl
   177f4:	e3500000 	cmp	r0, #0
   177f8:	1a000006 	bne	17818 <CTransportLayer::Process()+0xd0>
   177fc:	e2855001 	add	r5, r5, #1
   17800:	e1a00004 	mov	r0, r4
   17804:	eb0045c8 	bl	28f2c <CPtrArray::GetCount() const>
   17808:	e1a01005 	mov	r1, r5
   1780c:	e1550000 	cmp	r5, r0
   17810:	e1a00004 	mov	r0, r4
   17814:	3affffe6 	bcc	177b4 <CTransportLayer::Process()+0x6c>
   17818:	e1a00004 	mov	r0, r4
   1781c:	eb0045c2 	bl	28f2c <CPtrArray::GetCount() const>
   17820:	e1550000 	cmp	r5, r0
   17824:	2a00006b 	bcs	179d8 <CTransportLayer::Process()+0x290>
   17828:	e5971020 	ldr	r1, [r7, #32]
   1782c:	eaffffd6 	b	1778c <CTransportLayer::Process()+0x44>
   17830:	e28da01e 	add	sl, sp, #30
   17834:	e28d301c 	add	r3, sp, #28
   17838:	e58d3014 	str	r3, [sp, #20]
   1783c:	e59dc014 	ldr	ip, [sp, #20]
   17840:	e1a03006 	mov	r3, r6
   17844:	e5970004 	ldr	r0, [r7, #4]
   17848:	e28d2028 	add	r2, sp, #40	; 0x28
   1784c:	e58d8008 	str	r8, [sp, #8]
   17850:	e28d101b 	add	r1, sp, #27
   17854:	e58da004 	str	sl, [sp, #4]
   17858:	e58dc000 	str	ip, [sp]
   1785c:	eb000280 	bl	18264 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   17860:	e3500000 	cmp	r0, #0
   17864:	0a00001e 	beq	178e4 <CTransportLayer::Process()+0x19c>
   17868:	e3a05000 	mov	r5, #0
   1786c:	e1a00004 	mov	r0, r4
   17870:	eb0045ad 	bl	28f2c <CPtrArray::GetCount() const>
   17874:	e1a01005 	mov	r1, r5
   17878:	e1550000 	cmp	r5, r0
   1787c:	e1a00004 	mov	r0, r4
   17880:	2affffed 	bcs	1783c <CTransportLayer::Process()+0xf4>
   17884:	eb0045aa 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17888:	e1a01005 	mov	r1, r5
   1788c:	e2855001 	add	r5, r5, #1
   17890:	e5903000 	ldr	r3, [r0]
   17894:	e1a00004 	mov	r0, r4
   17898:	e3530000 	cmp	r3, #0
   1789c:	0afffff2 	beq	1786c <CTransportLayer::Process()+0x124>
   178a0:	eb0045a3 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   178a4:	e1ddb1be 	ldrh	fp, [sp, #30]
   178a8:	e1dde1bc 	ldrh	lr, [sp, #28]
   178ac:	e1a03006 	mov	r3, r6
   178b0:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
   178b4:	e28d2028 	add	r2, sp, #40	; 0x28
   178b8:	e5dd101b 	ldrb	r1, [sp, #27]
   178bc:	e5900000 	ldr	r0, [r0]
   178c0:	e590c000 	ldr	ip, [r0]
   178c4:	e58d9008 	str	r9, [sp, #8]
   178c8:	e58db004 	str	fp, [sp, #4]
   178cc:	e58de000 	str	lr, [sp]
   178d0:	e59cb034 	ldr	fp, [ip, #52]	; 0x34
   178d4:	e12fff3b 	blx	fp
   178d8:	e3500000 	cmp	r0, #0
   178dc:	0affffe2 	beq	1786c <CTransportLayer::Process()+0x124>
   178e0:	eaffffd5 	b	1783c <CTransportLayer::Process()+0xf4>
   178e4:	e1a05000 	mov	r5, r0
   178e8:	e1a08000 	mov	r8, r0
   178ec:	ea000005 	b	17908 <CTransportLayer::Process()+0x1c0>
   178f0:	eb00458f 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   178f4:	e5900000 	ldr	r0, [r0]
   178f8:	e5903000 	ldr	r3, [r0]
   178fc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   17900:	e12fff33 	blx	r3
   17904:	e2855001 	add	r5, r5, #1
   17908:	e1a00004 	mov	r0, r4
   1790c:	eb004586 	bl	28f2c <CPtrArray::GetCount() const>
   17910:	e1a01005 	mov	r1, r5
   17914:	e1550000 	cmp	r5, r0
   17918:	e1a00004 	mov	r0, r4
   1791c:	2a00001d 	bcs	17998 <CTransportLayer::Process()+0x250>
   17920:	eb004583 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17924:	e1a01005 	mov	r1, r5
   17928:	e5903000 	ldr	r3, [r0]
   1792c:	e1a00004 	mov	r0, r4
   17930:	e3530000 	cmp	r3, #0
   17934:	0afffff2 	beq	17904 <CTransportLayer::Process()+0x1bc>
   17938:	eb00457d 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   1793c:	e5900000 	ldr	r0, [r0]
   17940:	e5903000 	ldr	r3, [r0]
   17944:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   17948:	e12fff33 	blx	r3
   1794c:	e1a01005 	mov	r1, r5
   17950:	e3500000 	cmp	r0, #0
   17954:	e1a00004 	mov	r0, r4
   17958:	0affffe4 	beq	178f0 <CTransportLayer::Process()+0x1a8>
   1795c:	e1a01005 	mov	r1, r5
   17960:	e1a00004 	mov	r0, r4
   17964:	eb004572 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17968:	e5903000 	ldr	r3, [r0]
   1796c:	e3530000 	cmp	r3, #0
   17970:	e1a00003 	mov	r0, r3
   17974:	0a000002 	beq	17984 <CTransportLayer::Process()+0x23c>
   17978:	e5933000 	ldr	r3, [r3]
   1797c:	e5933004 	ldr	r3, [r3, #4]
   17980:	e12fff33 	blx	r3
   17984:	e1a01005 	mov	r1, r5
   17988:	e1a00004 	mov	r0, r4
   1798c:	eb004568 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17990:	e5808000 	str	r8, [r0]
   17994:	eaffffda 	b	17904 <CTransportLayer::Process()+0x1bc>
   17998:	e597001c 	ldr	r0, [r7, #28]
   1799c:	e3500000 	cmp	r0, #0
   179a0:	1a000023 	bne	17a34 <CTransportLayer::Process()+0x2ec>
   179a4:	e1a00004 	mov	r0, r4
   179a8:	eb00455f 	bl	28f2c <CPtrArray::GetCount() const>
   179ac:	e3500000 	cmp	r0, #0
   179b0:	1a000012 	bne	17a00 <CTransportLayer::Process()+0x2b8>
   179b4:	e597301c 	ldr	r3, [r7, #28]
   179b8:	e3530000 	cmp	r3, #0
   179bc:	1a00000d 	bne	179f8 <CTransportLayer::Process()+0x2b0>
   179c0:	e1a00006 	mov	r0, r6
   179c4:	eb001800 	bl	1d9cc <CIPAddress::~CIPAddress()>
   179c8:	e28d0028 	add	r0, sp, #40	; 0x28
   179cc:	eb0017fe 	bl	1d9cc <CIPAddress::~CIPAddress()>
   179d0:	e28dd03c 	add	sp, sp, #60	; 0x3c
   179d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179d8:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   179dc:	e28d3028 	add	r3, sp, #40	; 0x28
   179e0:	e5971020 	ldr	r1, [r7, #32]
   179e4:	e1a00009 	mov	r0, r9
   179e8:	e59d2020 	ldr	r2, [sp, #32]
   179ec:	e88d1040 	stm	sp, {r6, ip}
   179f0:	eb0016f9 	bl	1d5dc <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   179f4:	eaffff8b 	b	17828 <CTransportLayer::Process()+0xe0>
   179f8:	eb002995 	bl	22054 <LeaveCritical>
   179fc:	eaffffef 	b	179c0 <CTransportLayer::Process()+0x278>
   17a00:	e2405001 	sub	r5, r0, #1
   17a04:	e1a01005 	mov	r1, r5
   17a08:	e1a00004 	mov	r0, r4
   17a0c:	eb004548 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   17a10:	e5903000 	ldr	r3, [r0]
   17a14:	e3530000 	cmp	r3, #0
   17a18:	1affffe5 	bne	179b4 <CTransportLayer::Process()+0x26c>
   17a1c:	e2455001 	sub	r5, r5, #1
   17a20:	e1a00004 	mov	r0, r4
   17a24:	eb0045e6 	bl	291c4 <CPtrArray::RemoveLast()>
   17a28:	e3750001 	cmn	r5, #1
   17a2c:	0affffe0 	beq	179b4 <CTransportLayer::Process()+0x26c>
   17a30:	eafffff3 	b	17a04 <CTransportLayer::Process()+0x2bc>
   17a34:	eb002958 	bl	21f9c <EnterCritical>
   17a38:	eaffffd9 	b	179a4 <CTransportLayer::Process()+0x25c>
   17a3c:	e30e1684 	movw	r1, #59012	; 0xe684
   17a40:	e30c041c 	movw	r0, #50204	; 0xc41c
   17a44:	e3401002 	movt	r1, #2
   17a48:	e3400002 	movt	r0, #2
   17a4c:	e3a0204a 	mov	r2, #74	; 0x4a
   17a50:	eb003451 	bl	24b9c <assertion_failed>
   17a54:	e5971020 	ldr	r1, [r7, #32]
   17a58:	eaffff48 	b	17780 <CTransportLayer::Process()+0x38>
   17a5c:	e30e1684 	movw	r1, #59012	; 0xe684
   17a60:	e30e0698 	movw	r0, #59032	; 0xe698
   17a64:	e3401002 	movt	r1, #2
   17a68:	e3400002 	movt	r0, #2
   17a6c:	e3a02049 	mov	r2, #73	; 0x49
   17a70:	eb003449 	bl	24b9c <assertion_failed>
   17a74:	eaffff3e 	b	17774 <CTransportLayer::Process()+0x2c>

00017a78 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   17a78:	e92d4070 	push	{r4, r5, r6, lr}
   17a7c:	e1a04000 	mov	r4, r0
   17a80:	e5801000 	str	r1, [r0]
   17a84:	e3a05000 	mov	r5, #0
   17a88:	e280000c 	add	r0, r0, #12
   17a8c:	e9840024 	stmib	r4, {r2, r5}
   17a90:	eb00191f 	bl	1df14 <CNetQueue::CNetQueue()>
   17a94:	e2840018 	add	r0, r4, #24
   17a98:	eb00191d 	bl	1df14 <CNetQueue::CNetQueue()>
   17a9c:	e2840024 	add	r0, r4, #36	; 0x24
   17aa0:	eb00191b 	bl	1df14 <CNetQueue::CNetQueue()>
   17aa4:	e2840030 	add	r0, r4, #48	; 0x30
   17aa8:	eb000882 	bl	19cb8 <CRouteCache::CRouteCache()>
   17aac:	e5943000 	ldr	r3, [r4]
   17ab0:	e5845040 	str	r5, [r4, #64]	; 0x40
   17ab4:	e1530005 	cmp	r3, r5
   17ab8:	0a00000c 	beq	17af0 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x78>
   17abc:	e5943004 	ldr	r3, [r4, #4]
   17ac0:	e3530000 	cmp	r3, #0
   17ac4:	0a000001 	beq	17ad0 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x58>
   17ac8:	e1a00004 	mov	r0, r4
   17acc:	e8bd8070 	pop	{r4, r5, r6, pc}
   17ad0:	e3a02021 	mov	r2, #33	; 0x21
   17ad4:	e30e171c 	movw	r1, #59164	; 0xe71c
   17ad8:	e30e0730 	movw	r0, #59184	; 0xe730
   17adc:	e3401002 	movt	r1, #2
   17ae0:	e3400002 	movt	r0, #2
   17ae4:	eb00342c 	bl	24b9c <assertion_failed>
   17ae8:	e1a00004 	mov	r0, r4
   17aec:	e8bd8070 	pop	{r4, r5, r6, pc}
   17af0:	e30e171c 	movw	r1, #59164	; 0xe71c
   17af4:	e30e0608 	movw	r0, #58888	; 0xe608
   17af8:	e3401002 	movt	r1, #2
   17afc:	e3400002 	movt	r0, #2
   17b00:	e3a02020 	mov	r2, #32
   17b04:	eb003424 	bl	24b9c <assertion_failed>
   17b08:	eaffffeb 	b	17abc <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x44>

00017b0c <CNetworkLayer::~CNetworkLayer()>:
   17b0c:	e92d4070 	push	{r4, r5, r6, lr}
   17b10:	e3a01001 	mov	r1, #1
   17b14:	e1a04000 	mov	r4, r0
   17b18:	e5900040 	ldr	r0, [r0, #64]	; 0x40
   17b1c:	eb002916 	bl	21f7c <operator delete(void*, unsigned int)>
   17b20:	e5945008 	ldr	r5, [r4, #8]
   17b24:	e3a03000 	mov	r3, #0
   17b28:	e5843040 	str	r3, [r4, #64]	; 0x40
   17b2c:	e1550003 	cmp	r5, r3
   17b30:	0a000004 	beq	17b48 <CNetworkLayer::~CNetworkLayer()+0x3c>
   17b34:	e1a00005 	mov	r0, r5
   17b38:	eb00070d 	bl	19774 <CICMPHandler::~CICMPHandler()>
   17b3c:	e1a00005 	mov	r0, r5
   17b40:	e3a01014 	mov	r1, #20
   17b44:	eb00290c 	bl	21f7c <operator delete(void*, unsigned int)>
   17b48:	e1a00004 	mov	r0, r4
   17b4c:	e3a03000 	mov	r3, #0
   17b50:	e5843008 	str	r3, [r4, #8]
   17b54:	e5843004 	str	r3, [r4, #4]
   17b58:	e4803030 	str	r3, [r0], #48	; 0x30
   17b5c:	eb00086e 	bl	19d1c <CRouteCache::~CRouteCache()>
   17b60:	e2840024 	add	r0, r4, #36	; 0x24
   17b64:	eb00192e 	bl	1e024 <CNetQueue::~CNetQueue()>
   17b68:	e2840018 	add	r0, r4, #24
   17b6c:	eb00192c 	bl	1e024 <CNetQueue::~CNetQueue()>
   17b70:	e284000c 	add	r0, r4, #12
   17b74:	eb00192a 	bl	1e024 <CNetQueue::~CNetQueue()>
   17b78:	e1a00004 	mov	r0, r4
   17b7c:	e8bd8070 	pop	{r4, r5, r6, pc}

00017b80 <CNetworkLayer::Initialize()>:
   17b80:	e5903008 	ldr	r3, [r0, #8]
   17b84:	e92d4030 	push	{r4, r5, lr}
   17b88:	e3530000 	cmp	r3, #0
   17b8c:	e24dd00c 	sub	sp, sp, #12
   17b90:	e1a04000 	mov	r4, r0
   17b94:	0a000005 	beq	17bb0 <CNetworkLayer::Initialize()+0x30>
   17b98:	e30e171c 	movw	r1, #59164	; 0xe71c
   17b9c:	e30e0744 	movw	r0, #59204	; 0xe744
   17ba0:	e3401002 	movt	r1, #2
   17ba4:	e3400002 	movt	r0, #2
   17ba8:	e3a02032 	mov	r2, #50	; 0x32
   17bac:	eb0033fa 	bl	24b9c <assertion_failed>
   17bb0:	e3a00014 	mov	r0, #20
   17bb4:	eb0028ec 	bl	21f6c <operator new(unsigned int)>
   17bb8:	e1a0c004 	mov	ip, r4
   17bbc:	e49c1024 	ldr	r1, [ip], #36	; 0x24
   17bc0:	e2843018 	add	r3, r4, #24
   17bc4:	e1a02004 	mov	r2, r4
   17bc8:	e58dc000 	str	ip, [sp]
   17bcc:	e1a05000 	mov	r5, r0
   17bd0:	eb0006ae 	bl	19690 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   17bd4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   17bd8:	e5845008 	str	r5, [r4, #8]
   17bdc:	e3530000 	cmp	r3, #0
   17be0:	0a00000b 	beq	17c14 <CNetworkLayer::Initialize()+0x94>
   17be4:	e3a02036 	mov	r2, #54	; 0x36
   17be8:	e30e171c 	movw	r1, #59164	; 0xe71c
   17bec:	e30e06b0 	movw	r0, #59056	; 0xe6b0
   17bf0:	e3401002 	movt	r1, #2
   17bf4:	e3400002 	movt	r0, #2
   17bf8:	eb0033e7 	bl	24b9c <assertion_failed>
   17bfc:	e3a00d19 	mov	r0, #1600	; 0x640
   17c00:	eb0028da 	bl	21f70 <operator new[](unsigned int)>
   17c04:	e5840040 	str	r0, [r4, #64]	; 0x40
   17c08:	e3a00001 	mov	r0, #1
   17c0c:	e28dd00c 	add	sp, sp, #12
   17c10:	e8bd8030 	pop	{r4, r5, pc}
   17c14:	e3a00d19 	mov	r0, #1600	; 0x640
   17c18:	eb0028d4 	bl	21f70 <operator new[](unsigned int)>
   17c1c:	e5840040 	str	r0, [r4, #64]	; 0x40
   17c20:	e3a00001 	mov	r0, #1
   17c24:	e28dd00c 	add	sp, sp, #12
   17c28:	e8bd8030 	pop	{r4, r5, pc}

00017c2c <CNetworkLayer::Process()>:
   17c2c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   17c30:	e1a05000 	mov	r5, r0
   17c34:	e5900000 	ldr	r0, [r0]
   17c38:	e24dd014 	sub	sp, sp, #20
   17c3c:	e3500000 	cmp	r0, #0
   17c40:	0a000083 	beq	17e54 <CNetworkLayer::Process()+0x228>
   17c44:	eb0016eb 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   17c48:	e2506000 	subs	r6, r0, #0
   17c4c:	0a000072 	beq	17e1c <CNetworkLayer::Process()+0x1f0>
   17c50:	e5953040 	ldr	r3, [r5, #64]	; 0x40
   17c54:	e3530000 	cmp	r3, #0
   17c58:	0a000076 	beq	17e38 <CNetworkLayer::Process()+0x20c>
   17c5c:	e5950004 	ldr	r0, [r5, #4]
   17c60:	e3500000 	cmp	r0, #0
   17c64:	0a000064 	beq	17dfc <CNetworkLayer::Process()+0x1d0>
   17c68:	e5951040 	ldr	r1, [r5, #64]	; 0x40
   17c6c:	ea000007 	b	17c90 <CNetworkLayer::Process()+0x64>
   17c70:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   17c74:	e5d42000 	ldrb	r2, [r4]
   17c78:	e202200f 	and	r2, r2, #15
   17c7c:	e2421005 	sub	r1, r2, #5
   17c80:	e3510001 	cmp	r1, #1
   17c84:	9a00000a 	bls	17cb4 <CNetworkLayer::Process()+0x88>
   17c88:	e1a01004 	mov	r1, r4
   17c8c:	e5950004 	ldr	r0, [r5, #4]
   17c90:	e28d2004 	add	r2, sp, #4
   17c94:	eb000340 	bl	1899c <CLinkLayer::Receive(void*, unsigned int*)>
   17c98:	e3500000 	cmp	r0, #0
   17c9c:	0a000046 	beq	17dbc <CNetworkLayer::Process()+0x190>
   17ca0:	e59d3004 	ldr	r3, [sp, #4]
   17ca4:	e3530014 	cmp	r3, #20
   17ca8:	8afffff0 	bhi	17c70 <CNetworkLayer::Process()+0x44>
   17cac:	e5951040 	ldr	r1, [r5, #64]	; 0x40
   17cb0:	eafffff5 	b	17c8c <CNetworkLayer::Process()+0x60>
   17cb4:	e1a07102 	lsl	r7, r2, #2
   17cb8:	e1530007 	cmp	r3, r7
   17cbc:	9afffff1 	bls	17c88 <CNetworkLayer::Process()+0x5c>
   17cc0:	e1a01007 	mov	r1, r7
   17cc4:	e1a00004 	mov	r0, r4
   17cc8:	eb001a06 	bl	1e4e8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   17ccc:	e3500000 	cmp	r0, #0
   17cd0:	1afffff5 	bne	17cac <CNetworkLayer::Process()+0x80>
   17cd4:	e5d43000 	ldrb	r3, [r4]
   17cd8:	e1a03243 	asr	r3, r3, #4
   17cdc:	e3530004 	cmp	r3, #4
   17ce0:	1afffff1 	bne	17cac <CNetworkLayer::Process()+0x80>
   17ce4:	e2848010 	add	r8, r4, #16
   17ce8:	e28d0008 	add	r0, sp, #8
   17cec:	e1a01008 	mov	r1, r8
   17cf0:	eb0017ca 	bl	1dc20 <CIPAddress::CIPAddress(unsigned char const*)>
   17cf4:	e1a00006 	mov	r0, r6
   17cf8:	eb001817 	bl	1dd5c <CIPAddress::IsNull() const>
   17cfc:	e3500000 	cmp	r0, #0
   17d00:	1a00005b 	bne	17e74 <CNetworkLayer::Process()+0x248>
   17d04:	e28d1008 	add	r1, sp, #8
   17d08:	e1a00006 	mov	r0, r6
   17d0c:	eb00174b 	bl	1da40 <CIPAddress::operator!=(CIPAddress const&) const>
   17d10:	e3500000 	cmp	r0, #0
   17d14:	1a00005b 	bne	17e88 <CNetworkLayer::Process()+0x25c>
   17d18:	e1d430b6 	ldrh	r3, [r4, #6]
   17d1c:	e3130020 	tst	r3, #32
   17d20:	1a000021 	bne	17dac <CNetworkLayer::Process()+0x180>
   17d24:	e6bf3fb3 	rev16	r3, r3
   17d28:	e2033c1f 	and	r3, r3, #7936	; 0x1f00
   17d2c:	e3530000 	cmp	r3, #0
   17d30:	1a00001d 	bne	17dac <CNetworkLayer::Process()+0x180>
   17d34:	e1d430b2 	ldrh	r3, [r4, #2]
   17d38:	e59d2004 	ldr	r2, [sp, #4]
   17d3c:	e6bf3fb3 	rev16	r3, r3
   17d40:	e6ff3073 	uxth	r3, r3
   17d44:	e1530002 	cmp	r3, r2
   17d48:	8a000017 	bhi	17dac <CNetworkLayer::Process()+0x180>
   17d4c:	e3a00009 	mov	r0, #9
   17d50:	e58d3004 	str	r3, [sp, #4]
   17d54:	eb002884 	bl	21f6c <operator new(unsigned int)>
   17d58:	e5d43009 	ldrb	r3, [r4, #9]
   17d5c:	e3a02004 	mov	r2, #4
   17d60:	e284100c 	add	r1, r4, #12
   17d64:	e1a09000 	mov	r9, r0
   17d68:	e4c03001 	strb	r3, [r0], #1
   17d6c:	eb002d0a 	bl	2319c <memcpy>
   17d70:	e1a01008 	mov	r1, r8
   17d74:	e3a02004 	mov	r2, #4
   17d78:	e2890005 	add	r0, r9, #5
   17d7c:	eb002d06 	bl	2319c <memcpy>
   17d80:	e5d43009 	ldrb	r3, [r4, #9]
   17d84:	e59d2004 	ldr	r2, [sp, #4]
   17d88:	e5951040 	ldr	r1, [r5, #64]	; 0x40
   17d8c:	e3530001 	cmp	r3, #1
   17d90:	e0422007 	sub	r2, r2, r7
   17d94:	e1a03009 	mov	r3, r9
   17d98:	02850018 	addeq	r0, r5, #24
   17d9c:	1285000c 	addne	r0, r5, #12
   17da0:	e0811007 	add	r1, r1, r7
   17da4:	e58d2004 	str	r2, [sp, #4]
   17da8:	eb0018a2 	bl	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   17dac:	e28d0008 	add	r0, sp, #8
   17db0:	eb001705 	bl	1d9cc <CIPAddress::~CIPAddress()>
   17db4:	e5951040 	ldr	r1, [r5, #64]	; 0x40
   17db8:	eaffffb3 	b	17c8c <CNetworkLayer::Process()+0x60>
   17dbc:	e5950008 	ldr	r0, [r5, #8]
   17dc0:	e3500000 	cmp	r0, #0
   17dc4:	0a000002 	beq	17dd4 <CNetworkLayer::Process()+0x1a8>
   17dc8:	eb0006b4 	bl	198a0 <CICMPHandler::Process()>
   17dcc:	e28dd014 	add	sp, sp, #20
   17dd0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17dd4:	e3a02092 	mov	r2, #146	; 0x92
   17dd8:	e30e171c 	movw	r1, #59164	; 0xe71c
   17ddc:	e30e076c 	movw	r0, #59244	; 0xe76c
   17de0:	e3401002 	movt	r1, #2
   17de4:	e3400002 	movt	r0, #2
   17de8:	eb00336b 	bl	24b9c <assertion_failed>
   17dec:	e5950008 	ldr	r0, [r5, #8]
   17df0:	eb0006aa 	bl	198a0 <CICMPHandler::Process()>
   17df4:	e28dd014 	add	sp, sp, #20
   17df8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17dfc:	e30e171c 	movw	r1, #59164	; 0xe71c
   17e00:	e30e0730 	movw	r0, #59184	; 0xe730
   17e04:	e3401002 	movt	r1, #2
   17e08:	e3400002 	movt	r0, #2
   17e0c:	e3a02045 	mov	r2, #69	; 0x45
   17e10:	eb003361 	bl	24b9c <assertion_failed>
   17e14:	e5950004 	ldr	r0, [r5, #4]
   17e18:	eaffff92 	b	17c68 <CNetworkLayer::Process()+0x3c>
   17e1c:	e30e171c 	movw	r1, #59164	; 0xe71c
   17e20:	e30e0758 	movw	r0, #59224	; 0xe758
   17e24:	e3401002 	movt	r1, #2
   17e28:	e3400002 	movt	r0, #2
   17e2c:	e3a02041 	mov	r2, #65	; 0x41
   17e30:	eb003359 	bl	24b9c <assertion_failed>
   17e34:	eaffff85 	b	17c50 <CNetworkLayer::Process()+0x24>
   17e38:	e30e171c 	movw	r1, #59164	; 0xe71c
   17e3c:	e30c041c 	movw	r0, #50204	; 0xc41c
   17e40:	e3401002 	movt	r1, #2
   17e44:	e3400002 	movt	r0, #2
   17e48:	e3a02044 	mov	r2, #68	; 0x44
   17e4c:	eb003352 	bl	24b9c <assertion_failed>
   17e50:	eaffff81 	b	17c5c <CNetworkLayer::Process()+0x30>
   17e54:	e30e171c 	movw	r1, #59164	; 0xe71c
   17e58:	e30e0608 	movw	r0, #58888	; 0xe608
   17e5c:	e3401002 	movt	r1, #2
   17e60:	e3400002 	movt	r0, #2
   17e64:	e3a0203f 	mov	r2, #63	; 0x3f
   17e68:	eb00334b 	bl	24b9c <assertion_failed>
   17e6c:	e5950000 	ldr	r0, [r5]
   17e70:	eaffff73 	b	17c44 <CNetworkLayer::Process()+0x18>
   17e74:	e28d0008 	add	r0, sp, #8
   17e78:	eb0017c6 	bl	1dd98 <CIPAddress::IsBroadcast() const>
   17e7c:	e3500000 	cmp	r0, #0
   17e80:	0affffc9 	beq	17dac <CNetworkLayer::Process()+0x180>
   17e84:	eaffffa3 	b	17d18 <CNetworkLayer::Process()+0xec>
   17e88:	e28d0008 	add	r0, sp, #8
   17e8c:	eb0017c1 	bl	1dd98 <CIPAddress::IsBroadcast() const>
   17e90:	e3500000 	cmp	r0, #0
   17e94:	1affff9f 	bne	17d18 <CNetworkLayer::Process()+0xec>
   17e98:	e5950000 	ldr	r0, [r5]
   17e9c:	eb00165f 	bl	1d820 <CNetConfig::GetBroadcastAddress() const>
   17ea0:	e28d1008 	add	r1, sp, #8
   17ea4:	eb0016e5 	bl	1da40 <CIPAddress::operator!=(CIPAddress const&) const>
   17ea8:	e3500000 	cmp	r0, #0
   17eac:	1affffbe 	bne	17dac <CNetworkLayer::Process()+0x180>
   17eb0:	eaffff98 	b	17d18 <CNetworkLayer::Process()+0xec>

00017eb4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   17eb4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eb8:	e243e001 	sub	lr, r3, #1
   17ebc:	e300c62b 	movw	ip, #1579	; 0x62b
   17ec0:	e15e000c 	cmp	lr, ip
   17ec4:	e24dd00c 	sub	sp, sp, #12
   17ec8:	83a07000 	movhi	r7, #0
   17ecc:	9a000002 	bls	17edc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x28>
   17ed0:	e1a00007 	mov	r0, r7
   17ed4:	e28dd00c 	add	sp, sp, #12
   17ed8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17edc:	e283a014 	add	sl, r3, #20
   17ee0:	e1a09000 	mov	r9, r0
   17ee4:	e1a08002 	mov	r8, r2
   17ee8:	e1a05003 	mov	r5, r3
   17eec:	e1a0000a 	mov	r0, sl
   17ef0:	e1a06001 	mov	r6, r1
   17ef4:	eb00281d 	bl	21f70 <operator new[](unsigned int)>
   17ef8:	e5dd2030 	ldrb	r2, [sp, #48]	; 0x30
   17efc:	e3a03045 	mov	r3, #69	; 0x45
   17f00:	e1a04000 	mov	r4, r0
   17f04:	e5990000 	ldr	r0, [r9]
   17f08:	e5c43000 	strb	r3, [r4]
   17f0c:	e6bf3fba 	rev16	r3, sl
   17f10:	e3500000 	cmp	r0, #0
   17f14:	e1c430b2 	strh	r3, [r4, #2]
   17f18:	e5c42009 	strb	r2, [r4, #9]
   17f1c:	e3a03000 	mov	r3, #0
   17f20:	e5c43001 	strb	r3, [r4, #1]
   17f24:	e5c43004 	strb	r3, [r4, #4]
   17f28:	e5c43005 	strb	r3, [r4, #5]
   17f2c:	e5c43007 	strb	r3, [r4, #7]
   17f30:	e3a03040 	mov	r3, #64	; 0x40
   17f34:	e5c43006 	strb	r3, [r4, #6]
   17f38:	e5c43008 	strb	r3, [r4, #8]
   17f3c:	0a000046 	beq	1805c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1a8>
   17f40:	eb00162c 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   17f44:	e250b000 	subs	fp, r0, #0
   17f48:	0a00004b 	beq	1807c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c8>
   17f4c:	e1a0000b 	mov	r0, fp
   17f50:	eb001781 	bl	1dd5c <CIPAddress::IsNull() const>
   17f54:	e3500000 	cmp	r0, #0
   17f58:	1a00002b 	bne	1800c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x158>
   17f5c:	e284100c 	add	r1, r4, #12
   17f60:	e1a0000b 	mov	r0, fp
   17f64:	eb001760 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   17f68:	e2841010 	add	r1, r4, #16
   17f6c:	e1a00006 	mov	r0, r6
   17f70:	eb00175d 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   17f74:	e3a01014 	mov	r1, #20
   17f78:	e1a00004 	mov	r0, r4
   17f7c:	e3a03000 	mov	r3, #0
   17f80:	e5c4300a 	strb	r3, [r4, #10]
   17f84:	e5c4300b 	strb	r3, [r4, #11]
   17f88:	eb001956 	bl	1e4e8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   17f8c:	e3580000 	cmp	r8, #0
   17f90:	e1c400ba 	strh	r0, [r4, #10]
   17f94:	0a00003f 	beq	18098 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1e4>
   17f98:	e1a02005 	mov	r2, r5
   17f9c:	e1a01008 	mov	r1, r8
   17fa0:	e2840014 	add	r0, r4, #20
   17fa4:	eb002c7c 	bl	2319c <memcpy>
   17fa8:	e1a0000d 	mov	r0, sp
   17fac:	eb00166d 	bl	1d968 <CIPAddress::CIPAddress()>
   17fb0:	e5990000 	ldr	r0, [r9]
   17fb4:	eb001613 	bl	1d808 <CNetConfig::GetNetMask() const>
   17fb8:	e1a01006 	mov	r1, r6
   17fbc:	e1a02000 	mov	r2, r0
   17fc0:	e1a0000b 	mov	r0, fp
   17fc4:	eb00179e 	bl	1de44 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   17fc8:	e2507000 	subs	r7, r0, #0
   17fcc:	0a000017 	beq	18030 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x17c>
   17fd0:	e5990004 	ldr	r0, [r9, #4]
   17fd4:	e3500000 	cmp	r0, #0
   17fd8:	0a00003e 	beq	180d8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x224>
   17fdc:	e1a0300a 	mov	r3, sl
   17fe0:	e1a01006 	mov	r1, r6
   17fe4:	e1a02004 	mov	r2, r4
   17fe8:	eb0001f8 	bl	187d0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   17fec:	e1a07000 	mov	r7, r0
   17ff0:	e1a00004 	mov	r0, r4
   17ff4:	eb0027df 	bl	21f78 <operator delete[](void*)>
   17ff8:	e1a0000d 	mov	r0, sp
   17ffc:	eb001672 	bl	1d9cc <CIPAddress::~CIPAddress()>
   18000:	e1a00007 	mov	r0, r7
   18004:	e28dd00c 	add	sp, sp, #12
   18008:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1800c:	e1a00006 	mov	r0, r6
   18010:	eb001760 	bl	1dd98 <CIPAddress::IsBroadcast() const>
   18014:	e2507000 	subs	r7, r0, #0
   18018:	1affffcf 	bne	17f5c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0xa8>
   1801c:	e1a00004 	mov	r0, r4
   18020:	eb0027d4 	bl	21f78 <operator delete[](void*)>
   18024:	e1a00007 	mov	r0, r7
   18028:	e28dd00c 	add	sp, sp, #12
   1802c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18030:	e1a00006 	mov	r0, r6
   18034:	eb00171f 	bl	1dcb8 <CIPAddress::Get() const>
   18038:	e1a01000 	mov	r1, r0
   1803c:	e2890030 	add	r0, r9, #48	; 0x30
   18040:	eb00077f 	bl	19e44 <CRouteCache::GetRoute(unsigned char const*) const>
   18044:	e2501000 	subs	r1, r0, #0
   18048:	0a000019 	beq	180b4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x200>
   1804c:	e1a0000d 	mov	r0, sp
   18050:	e1a0600d 	mov	r6, sp
   18054:	eb0016df 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   18058:	eaffffdc 	b	17fd0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x11c>
   1805c:	e30e171c 	movw	r1, #59164	; 0xe71c
   18060:	e30e0608 	movw	r0, #58888	; 0xe608
   18064:	e3401002 	movt	r1, #2
   18068:	e3400002 	movt	r0, #2
   1806c:	e3a020ab 	mov	r2, #171	; 0xab
   18070:	eb0032c9 	bl	24b9c <assertion_failed>
   18074:	e5990000 	ldr	r0, [r9]
   18078:	eaffffb0 	b	17f40 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x8c>
   1807c:	e30e171c 	movw	r1, #59164	; 0xe71c
   18080:	e30e0758 	movw	r0, #59224	; 0xe758
   18084:	e3401002 	movt	r1, #2
   18088:	e3400002 	movt	r0, #2
   1808c:	e3a020ad 	mov	r2, #173	; 0xad
   18090:	eb0032c1 	bl	24b9c <assertion_failed>
   18094:	eaffffac 	b	17f4c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x98>
   18098:	e30e171c 	movw	r1, #59164	; 0xe71c
   1809c:	e30e0780 	movw	r0, #59264	; 0xe780
   180a0:	e3401002 	movt	r1, #2
   180a4:	e3400002 	movt	r0, #2
   180a8:	e3a020bf 	mov	r2, #191	; 0xbf
   180ac:	eb0032ba 	bl	24b9c <assertion_failed>
   180b0:	eaffffb8 	b	17f98 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0xe4>
   180b4:	e5990000 	ldr	r0, [r9]
   180b8:	eb0015d4 	bl	1d810 <CNetConfig::GetDefaultGateway() const>
   180bc:	e1a06000 	mov	r6, r0
   180c0:	eb001725 	bl	1dd5c <CIPAddress::IsNull() const>
   180c4:	e3500000 	cmp	r0, #0
   180c8:	1affffc8 	bne	17ff0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x13c>
   180cc:	e5993004 	ldr	r3, [r9, #4]
   180d0:	e3530000 	cmp	r3, #0
   180d4:	1a000005 	bne	180f0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x23c>
   180d8:	e30e171c 	movw	r1, #59164	; 0xe71c
   180dc:	e30e0730 	movw	r0, #59184	; 0xe730
   180e0:	e3401002 	movt	r1, #2
   180e4:	e3400002 	movt	r0, #2
   180e8:	e3a020db 	mov	r2, #219	; 0xdb
   180ec:	eb0032aa 	bl	24b9c <assertion_failed>
   180f0:	e3560000 	cmp	r6, #0
   180f4:	1a000005 	bne	18110 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x25c>
   180f8:	e30e171c 	movw	r1, #59164	; 0xe71c
   180fc:	e30e0790 	movw	r0, #59280	; 0xe790
   18100:	e3401002 	movt	r1, #2
   18104:	e3400002 	movt	r0, #2
   18108:	e3a020dc 	mov	r2, #220	; 0xdc
   1810c:	eb0032a2 	bl	24b9c <assertion_failed>
   18110:	e5990004 	ldr	r0, [r9, #4]
   18114:	eaffffb0 	b	17fdc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x128>

00018118 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   18118:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1811c:	e2518000 	subs	r8, r1, #0
   18120:	e24dd008 	sub	sp, sp, #8
   18124:	e1a07000 	mov	r7, r0
   18128:	e1a04002 	mov	r4, r2
   1812c:	e1a05003 	mov	r5, r3
   18130:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   18134:	0a000020 	beq	181bc <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa4>
   18138:	e3540000 	cmp	r4, #0
   1813c:	0a000025 	beq	181d8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xc0>
   18140:	e1a01008 	mov	r1, r8
   18144:	e287000c 	add	r0, r7, #12
   18148:	e28d2004 	add	r2, sp, #4
   1814c:	eb00180a 	bl	1e17c <CNetQueue::Dequeue(void*, void**)>
   18150:	e3500000 	cmp	r0, #0
   18154:	e5840000 	str	r0, [r4]
   18158:	0a000015 	beq	181b4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x9c>
   1815c:	e59d4004 	ldr	r4, [sp, #4]
   18160:	e3540000 	cmp	r4, #0
   18164:	0a000029 	beq	18210 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xf8>
   18168:	e3560000 	cmp	r6, #0
   1816c:	0a000020 	beq	181f4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xdc>
   18170:	e5d43000 	ldrb	r3, [r4]
   18174:	e3550000 	cmp	r5, #0
   18178:	e5863000 	str	r3, [r6]
   1817c:	0a00002a 	beq	1822c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x114>
   18180:	e1a00005 	mov	r0, r5
   18184:	e2841001 	add	r1, r4, #1
   18188:	eb001692 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   1818c:	e59d3020 	ldr	r3, [sp, #32]
   18190:	e3530000 	cmp	r3, #0
   18194:	0a00002b 	beq	18248 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x130>
   18198:	e2841005 	add	r1, r4, #5
   1819c:	e59d0020 	ldr	r0, [sp, #32]
   181a0:	eb00168c 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   181a4:	e1a00004 	mov	r0, r4
   181a8:	e3a01009 	mov	r1, #9
   181ac:	eb002772 	bl	21f7c <operator delete(void*, unsigned int)>
   181b0:	e3a00001 	mov	r0, #1
   181b4:	e28dd008 	add	sp, sp, #8
   181b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   181bc:	e30e171c 	movw	r1, #59164	; 0xe71c
   181c0:	e30b097c 	movw	r0, #47484	; 0xb97c
   181c4:	e3401002 	movt	r1, #2
   181c8:	e3400002 	movt	r0, #2
   181cc:	e3a020e9 	mov	r2, #233	; 0xe9
   181d0:	eb003271 	bl	24b9c <assertion_failed>
   181d4:	eaffffd7 	b	18138 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x20>
   181d8:	e30e171c 	movw	r1, #59164	; 0xe71c
   181dc:	e30c03b8 	movw	r0, #50104	; 0xc3b8
   181e0:	e3401002 	movt	r1, #2
   181e4:	e3400002 	movt	r0, #2
   181e8:	e3a020ea 	mov	r2, #234	; 0xea
   181ec:	eb00326a 	bl	24b9c <assertion_failed>
   181f0:	eaffffd2 	b	18140 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x28>
   181f4:	e30e171c 	movw	r1, #59164	; 0xe71c
   181f8:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   181fc:	e3401002 	movt	r1, #2
   18200:	e3400002 	movt	r0, #2
   18204:	e3a020f4 	mov	r2, #244	; 0xf4
   18208:	eb003263 	bl	24b9c <assertion_failed>
   1820c:	eaffffd7 	b	18170 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x58>
   18210:	e30e171c 	movw	r1, #59164	; 0xe71c
   18214:	e30e06ec 	movw	r0, #59116	; 0xe6ec
   18218:	e3401002 	movt	r1, #2
   1821c:	e3400002 	movt	r0, #2
   18220:	e3a020f2 	mov	r2, #242	; 0xf2
   18224:	eb00325c 	bl	24b9c <assertion_failed>
   18228:	eaffffce 	b	18168 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x50>
   1822c:	e30e171c 	movw	r1, #59164	; 0xe71c
   18230:	e30e07b0 	movw	r0, #59312	; 0xe7b0
   18234:	e3401002 	movt	r1, #2
   18238:	e3400002 	movt	r0, #2
   1823c:	e3a020f7 	mov	r2, #247	; 0xf7
   18240:	eb003255 	bl	24b9c <assertion_failed>
   18244:	eaffffcd 	b	18180 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x68>
   18248:	e30e171c 	movw	r1, #59164	; 0xe71c
   1824c:	e30e07c0 	movw	r0, #59328	; 0xe7c0
   18250:	e3401002 	movt	r1, #2
   18254:	e3400002 	movt	r0, #2
   18258:	e3a020fa 	mov	r2, #250	; 0xfa
   1825c:	eb00324e 	bl	24b9c <assertion_failed>
   18260:	eaffffcc 	b	18198 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x80>

00018264 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   18264:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   18268:	e24dd014 	sub	sp, sp, #20
   1826c:	e1a09001 	mov	r9, r1
   18270:	e1a07002 	mov	r7, r2
   18274:	e2800024 	add	r0, r0, #36	; 0x24
   18278:	e3a02000 	mov	r2, #0
   1827c:	e1a0100d 	mov	r1, sp
   18280:	e1a06003 	mov	r6, r3
   18284:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   18288:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
   1828c:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
   18290:	eb0017b9 	bl	1e17c <CNetQueue::Dequeue(void*, void**)>
   18294:	e3500000 	cmp	r0, #0
   18298:	0a000022 	beq	18328 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xc4>
   1829c:	e350000e 	cmp	r0, #14
   182a0:	0a000005 	beq	182bc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x58>
   182a4:	e30e171c 	movw	r1, #59164	; 0xe71c
   182a8:	e30e07d0 	movw	r0, #59344	; 0xe7d0
   182ac:	e3401002 	movt	r1, #2
   182b0:	e3400002 	movt	r0, #2
   182b4:	e300210e 	movw	r2, #270	; 0x10e
   182b8:	eb003237 	bl	24b9c <assertion_failed>
   182bc:	e3590000 	cmp	r9, #0
   182c0:	0a00003d 	beq	183bc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x158>
   182c4:	e5dd3000 	ldrb	r3, [sp]
   182c8:	e3580000 	cmp	r8, #0
   182cc:	e5c93000 	strb	r3, [r9]
   182d0:	0a000032 	beq	183a0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x13c>
   182d4:	e5dd3001 	ldrb	r3, [sp, #1]
   182d8:	e3570000 	cmp	r7, #0
   182dc:	e5883000 	str	r3, [r8]
   182e0:	0a000027 	beq	18384 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x120>
   182e4:	e1a00007 	mov	r0, r7
   182e8:	e28d1002 	add	r1, sp, #2
   182ec:	eb001639 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   182f0:	e3560000 	cmp	r6, #0
   182f4:	0a00001b 	beq	18368 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x104>
   182f8:	e1a00006 	mov	r0, r6
   182fc:	e28d1006 	add	r1, sp, #6
   18300:	eb001634 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   18304:	e3550000 	cmp	r5, #0
   18308:	0a00000f 	beq	1834c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xe8>
   1830c:	e1dd30ba 	ldrh	r3, [sp, #10]
   18310:	e3540000 	cmp	r4, #0
   18314:	e1c530b0 	strh	r3, [r5]
   18318:	0a000004 	beq	18330 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xcc>
   1831c:	e1dd30bc 	ldrh	r3, [sp, #12]
   18320:	e3a00001 	mov	r0, #1
   18324:	e1c430b0 	strh	r3, [r4]
   18328:	e28dd014 	add	sp, sp, #20
   1832c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18330:	e30e171c 	movw	r1, #59164	; 0xe71c
   18334:	e30e080c 	movw	r0, #59404	; 0xe80c
   18338:	e3401002 	movt	r1, #2
   1833c:	e3400002 	movt	r0, #2
   18340:	e300211f 	movw	r2, #287	; 0x11f
   18344:	eb003214 	bl	24b9c <assertion_failed>
   18348:	eafffff3 	b	1831c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb8>
   1834c:	e30e171c 	movw	r1, #59164	; 0xe71c
   18350:	e30e07fc 	movw	r0, #59388	; 0xe7fc
   18354:	e3401002 	movt	r1, #2
   18358:	e3400002 	movt	r0, #2
   1835c:	e3a02f47 	mov	r2, #284	; 0x11c
   18360:	eb00320d 	bl	24b9c <assertion_failed>
   18364:	eaffffe8 	b	1830c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xa8>
   18368:	e30e171c 	movw	r1, #59164	; 0xe71c
   1836c:	e30e07c0 	movw	r0, #59328	; 0xe7c0
   18370:	e3401002 	movt	r1, #2
   18374:	e3400002 	movt	r0, #2
   18378:	e3002119 	movw	r2, #281	; 0x119
   1837c:	eb003206 	bl	24b9c <assertion_failed>
   18380:	eaffffdc 	b	182f8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x94>
   18384:	e30e171c 	movw	r1, #59164	; 0xe71c
   18388:	e30e07b0 	movw	r0, #59312	; 0xe7b0
   1838c:	e3401002 	movt	r1, #2
   18390:	e3400002 	movt	r0, #2
   18394:	e3002116 	movw	r2, #278	; 0x116
   18398:	eb0031ff 	bl	24b9c <assertion_failed>
   1839c:	eaffffd0 	b	182e4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x80>
   183a0:	e30e171c 	movw	r1, #59164	; 0xe71c
   183a4:	e30e07a0 	movw	r0, #59296	; 0xe7a0
   183a8:	e3401002 	movt	r1, #2
   183ac:	e3400002 	movt	r0, #2
   183b0:	e3002113 	movw	r2, #275	; 0x113
   183b4:	eb0031f8 	bl	24b9c <assertion_failed>
   183b8:	eaffffc5 	b	182d4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x70>
   183bc:	e30e171c 	movw	r1, #59164	; 0xe71c
   183c0:	e30e07f0 	movw	r0, #59376	; 0xe7f0
   183c4:	e3401002 	movt	r1, #2
   183c8:	e3400002 	movt	r0, #2
   183cc:	e3a02e11 	mov	r2, #272	; 0x110
   183d0:	eb0031f1 	bl	24b9c <assertion_failed>
   183d4:	eaffffba 	b	182c4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x60>

000183d8 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   183d8:	e2800030 	add	r0, r0, #48	; 0x30
   183dc:	ea000655 	b	19d38 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

000183e0 <CNetworkLayer::GetGateway(unsigned char const*) const>:
   183e0:	e92d4010 	push	{r4, lr}
   183e4:	e1a04000 	mov	r4, r0
   183e8:	e2800030 	add	r0, r0, #48	; 0x30
   183ec:	eb000694 	bl	19e44 <CRouteCache::GetRoute(unsigned char const*) const>
   183f0:	e3500000 	cmp	r0, #0
   183f4:	18bd8010 	popne	{r4, pc}
   183f8:	e5940000 	ldr	r0, [r4]
   183fc:	e3500000 	cmp	r0, #0
   18400:	0a000005 	beq	1841c <CNetworkLayer::GetGateway(unsigned char const*) const+0x3c>
   18404:	eb001501 	bl	1d810 <CNetConfig::GetDefaultGateway() const>
   18408:	e2504000 	subs	r4, r0, #0
   1840c:	0a00000a 	beq	1843c <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   18410:	e1a00004 	mov	r0, r4
   18414:	e8bd4010 	pop	{r4, lr}
   18418:	ea001626 	b	1dcb8 <CIPAddress::Get() const>
   1841c:	e30e171c 	movw	r1, #59164	; 0xe71c
   18420:	e30e0608 	movw	r0, #58888	; 0xe608
   18424:	e3401002 	movt	r1, #2
   18428:	e3400002 	movt	r0, #2
   1842c:	e3002132 	movw	r2, #306	; 0x132
   18430:	eb0031d9 	bl	24b9c <assertion_failed>
   18434:	e5940000 	ldr	r0, [r4]
   18438:	eafffff1 	b	18404 <CNetworkLayer::GetGateway(unsigned char const*) const+0x24>
   1843c:	e30e171c 	movw	r1, #59164	; 0xe71c
   18440:	e30e0820 	movw	r0, #59424	; 0xe820
   18444:	e3401002 	movt	r1, #2
   18448:	e3400002 	movt	r0, #2
   1844c:	e3a02f4d 	mov	r2, #308	; 0x134
   18450:	eb0031d1 	bl	24b9c <assertion_failed>
   18454:	eaffffed 	b	18410 <CNetworkLayer::GetGateway(unsigned char const*) const+0x30>

00018458 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   18458:	e92d4070 	push	{r4, r5, r6, lr}
   1845c:	e1a04000 	mov	r4, r0
   18460:	e5801000 	str	r1, [r0]
   18464:	e3a05000 	mov	r5, #0
   18468:	e280000c 	add	r0, r0, #12
   1846c:	e9840024 	stmib	r4, {r2, r5}
   18470:	eb0016a7 	bl	1df14 <CNetQueue::CNetQueue()>
   18474:	e2840018 	add	r0, r4, #24
   18478:	eb0016a5 	bl	1df14 <CNetQueue::CNetQueue()>
   1847c:	e5943000 	ldr	r3, [r4]
   18480:	e5845024 	str	r5, [r4, #36]	; 0x24
   18484:	e1530005 	cmp	r3, r5
   18488:	0a00000c 	beq	184c0 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x68>
   1848c:	e5943004 	ldr	r3, [r4, #4]
   18490:	e3530000 	cmp	r3, #0
   18494:	0a000001 	beq	184a0 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x48>
   18498:	e1a00004 	mov	r0, r4
   1849c:	e8bd8070 	pop	{r4, r5, r6, pc}
   184a0:	e3a0201f 	mov	r2, #31
   184a4:	e30e1838 	movw	r1, #59448	; 0xe838
   184a8:	e30e0848 	movw	r0, #59464	; 0xe848
   184ac:	e3401002 	movt	r1, #2
   184b0:	e3400002 	movt	r0, #2
   184b4:	eb0031b8 	bl	24b9c <assertion_failed>
   184b8:	e1a00004 	mov	r0, r4
   184bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   184c0:	e30e1838 	movw	r1, #59448	; 0xe838
   184c4:	e30e0608 	movw	r0, #58888	; 0xe608
   184c8:	e3401002 	movt	r1, #2
   184cc:	e3400002 	movt	r0, #2
   184d0:	e3a0201e 	mov	r2, #30
   184d4:	eb0031b0 	bl	24b9c <assertion_failed>
   184d8:	eaffffeb 	b	1848c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x34>

000184dc <CLinkLayer::~CLinkLayer()>:
   184dc:	e92d4070 	push	{r4, r5, r6, lr}
   184e0:	e1a04000 	mov	r4, r0
   184e4:	e5905008 	ldr	r5, [r0, #8]
   184e8:	e3550000 	cmp	r5, #0
   184ec:	0a000004 	beq	18504 <CLinkLayer::~CLinkLayer()+0x28>
   184f0:	e1a00005 	mov	r0, r5
   184f4:	eb000269 	bl	18ea0 <CARPHandler::~CARPHandler()>
   184f8:	e1a00005 	mov	r0, r5
   184fc:	e3a01f69 	mov	r1, #420	; 0x1a4
   18500:	eb00269d 	bl	21f7c <operator delete(void*, unsigned int)>
   18504:	e3a05000 	mov	r5, #0
   18508:	e3a01001 	mov	r1, #1
   1850c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   18510:	e5845008 	str	r5, [r4, #8]
   18514:	eb002698 	bl	21f7c <operator delete(void*, unsigned int)>
   18518:	e1a00004 	mov	r0, r4
   1851c:	e5845024 	str	r5, [r4, #36]	; 0x24
   18520:	e5845004 	str	r5, [r4, #4]
   18524:	e4805018 	str	r5, [r0], #24
   18528:	eb0016bd 	bl	1e024 <CNetQueue::~CNetQueue()>
   1852c:	e284000c 	add	r0, r4, #12
   18530:	eb0016bb 	bl	1e024 <CNetQueue::~CNetQueue()>
   18534:	e1a00004 	mov	r0, r4
   18538:	e8bd8070 	pop	{r4, r5, r6, pc}

0001853c <CLinkLayer::Initialize()>:
   1853c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18540:	e92d4070 	push	{r4, r5, r6, lr}
   18544:	e3530000 	cmp	r3, #0
   18548:	e1a04000 	mov	r4, r0
   1854c:	0a000005 	beq	18568 <CLinkLayer::Initialize()+0x2c>
   18550:	e30e1838 	movw	r1, #59448	; 0xe838
   18554:	e30e06b0 	movw	r0, #59056	; 0xe6b0
   18558:	e3401002 	movt	r1, #2
   1855c:	e3400002 	movt	r0, #2
   18560:	e3a02030 	mov	r2, #48	; 0x30
   18564:	eb00318c 	bl	24b9c <assertion_failed>
   18568:	e3a00d19 	mov	r0, #1600	; 0x640
   1856c:	eb00267f 	bl	21f70 <operator new[](unsigned int)>
   18570:	e5943000 	ldr	r3, [r4]
   18574:	e3530000 	cmp	r3, #0
   18578:	e5840024 	str	r0, [r4, #36]	; 0x24
   1857c:	0a000008 	beq	185a4 <CLinkLayer::Initialize()+0x68>
   18580:	e3a00f69 	mov	r0, #420	; 0x1a4
   18584:	eb002678 	bl	21f6c <operator new(unsigned int)>
   18588:	e284300c 	add	r3, r4, #12
   1858c:	e8940006 	ldm	r4, {r1, r2}
   18590:	e1a05000 	mov	r5, r0
   18594:	eb00020e 	bl	18dd4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)>
   18598:	e5845008 	str	r5, [r4, #8]
   1859c:	e3a00001 	mov	r0, #1
   185a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   185a4:	e30e1838 	movw	r1, #59448	; 0xe838
   185a8:	e30e0608 	movw	r0, #58888	; 0xe608
   185ac:	e3401002 	movt	r1, #2
   185b0:	e3400002 	movt	r0, #2
   185b4:	e3a02034 	mov	r2, #52	; 0x34
   185b8:	eb003177 	bl	24b9c <assertion_failed>
   185bc:	eaffffef 	b	18580 <CLinkLayer::Initialize()+0x44>

000185c0 <CLinkLayer::Process()>:
   185c0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   185c4:	e1a04000 	mov	r4, r0
   185c8:	e5900004 	ldr	r0, [r0, #4]
   185cc:	e24dd014 	sub	sp, sp, #20
   185d0:	e3500000 	cmp	r0, #0
   185d4:	0a00005f 	beq	18758 <CLinkLayer::Process()+0x198>
   185d8:	eb00019f 	bl	18c5c <CNetDeviceLayer::GetMACAddress() const>
   185dc:	e2507000 	subs	r7, r0, #0
   185e0:	0a000064 	beq	18778 <CLinkLayer::Process()+0x1b8>
   185e4:	e5943004 	ldr	r3, [r4, #4]
   185e8:	e3530000 	cmp	r3, #0
   185ec:	0a000068 	beq	18794 <CLinkLayer::Process()+0x1d4>
   185f0:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   185f4:	e3510000 	cmp	r1, #0
   185f8:	0a00006c 	beq	187b0 <CLinkLayer::Process()+0x1f0>
   185fc:	e30e5838 	movw	r5, #59448	; 0xe838
   18600:	e30c6380 	movw	r6, #50048	; 0xc380
   18604:	e30e86f8 	movw	r8, #59128	; 0xe6f8
   18608:	e3405002 	movt	r5, #2
   1860c:	e3406002 	movt	r6, #2
   18610:	e3408002 	movt	r8, #2
   18614:	ea000002 	b	18624 <CLinkLayer::Process()+0x64>
   18618:	e353000e 	cmp	r3, #14
   1861c:	8a00000f 	bhi	18660 <CLinkLayer::Process()+0xa0>
   18620:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   18624:	e1a0200d 	mov	r2, sp
   18628:	e5940004 	ldr	r0, [r4, #4]
   1862c:	eb0001a2 	bl	18cbc <CNetDeviceLayer::Receive(void*, unsigned int*)>
   18630:	e3500000 	cmp	r0, #0
   18634:	0a000026 	beq	186d4 <CLinkLayer::Process()+0x114>
   18638:	e59d3000 	ldr	r3, [sp]
   1863c:	e3530d19 	cmp	r3, #1600	; 0x640
   18640:	9afffff4 	bls	18618 <CLinkLayer::Process()+0x58>
   18644:	e3a02046 	mov	r2, #70	; 0x46
   18648:	e1a01005 	mov	r1, r5
   1864c:	e1a00006 	mov	r0, r6
   18650:	eb003151 	bl	24b9c <assertion_failed>
   18654:	e59d3000 	ldr	r3, [sp]
   18658:	e353000e 	cmp	r3, #14
   1865c:	9affffef 	bls	18620 <CLinkLayer::Process()+0x60>
   18660:	e5949024 	ldr	r9, [r4, #36]	; 0x24
   18664:	e28d0004 	add	r0, sp, #4
   18668:	e1a01009 	mov	r1, r9
   1866c:	ebfff206 	bl	14e8c <CMACAddress::CMACAddress(unsigned char const*)>
   18670:	e1a01007 	mov	r1, r7
   18674:	e28d0004 	add	r0, sp, #4
   18678:	ebfff1ec 	bl	14e30 <CMACAddress::operator!=(CMACAddress const&) const>
   1867c:	e3500000 	cmp	r0, #0
   18680:	1a000019 	bne	186ec <CLinkLayer::Process()+0x12c>
   18684:	e59d3000 	ldr	r3, [sp]
   18688:	e243300e 	sub	r3, r3, #14
   1868c:	e58d3000 	str	r3, [sp]
   18690:	e3530000 	cmp	r3, #0
   18694:	0a000020 	beq	1871c <CLinkLayer::Process()+0x15c>
   18698:	e1d930bc 	ldrh	r3, [r9, #12]
   1869c:	e3530008 	cmp	r3, #8
   186a0:	0a000016 	beq	18700 <CLinkLayer::Process()+0x140>
   186a4:	e3002608 	movw	r2, #1544	; 0x608
   186a8:	e1530002 	cmp	r3, r2
   186ac:	1a000005 	bne	186c8 <CLinkLayer::Process()+0x108>
   186b0:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   186b4:	e3a03000 	mov	r3, #0
   186b8:	e59d2000 	ldr	r2, [sp]
   186bc:	e284000c 	add	r0, r4, #12
   186c0:	e281100e 	add	r1, r1, #14
   186c4:	eb00165b 	bl	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   186c8:	e28d0004 	add	r0, sp, #4
   186cc:	ebfff1b4 	bl	14da4 <CMACAddress::~CMACAddress()>
   186d0:	eaffffd2 	b	18620 <CLinkLayer::Process()+0x60>
   186d4:	e5940008 	ldr	r0, [r4, #8]
   186d8:	e3500000 	cmp	r0, #0
   186dc:	0a000013 	beq	18730 <CLinkLayer::Process()+0x170>
   186e0:	eb0002ae 	bl	191a0 <CARPHandler::Process()>
   186e4:	e28dd014 	add	sp, sp, #20
   186e8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   186ec:	e28d0004 	add	r0, sp, #4
   186f0:	ebfff21c 	bl	14f68 <CMACAddress::IsBroadcast() const>
   186f4:	e3500000 	cmp	r0, #0
   186f8:	0afffff2 	beq	186c8 <CLinkLayer::Process()+0x108>
   186fc:	eaffffe0 	b	18684 <CLinkLayer::Process()+0xc4>
   18700:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   18704:	e3a03000 	mov	r3, #0
   18708:	e59d2000 	ldr	r2, [sp]
   1870c:	e2840018 	add	r0, r4, #24
   18710:	e281100e 	add	r1, r1, #14
   18714:	eb001647 	bl	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   18718:	eaffffea 	b	186c8 <CLinkLayer::Process()+0x108>
   1871c:	e3a02055 	mov	r2, #85	; 0x55
   18720:	e1a01005 	mov	r1, r5
   18724:	e1a00008 	mov	r0, r8
   18728:	eb00311b 	bl	24b9c <assertion_failed>
   1872c:	eaffffd9 	b	18698 <CLinkLayer::Process()+0xd8>
   18730:	e3a02063 	mov	r2, #99	; 0x63
   18734:	e30e1838 	movw	r1, #59448	; 0xe838
   18738:	e30e0870 	movw	r0, #59504	; 0xe870
   1873c:	e3401002 	movt	r1, #2
   18740:	e3400002 	movt	r0, #2
   18744:	eb003114 	bl	24b9c <assertion_failed>
   18748:	e5940008 	ldr	r0, [r4, #8]
   1874c:	eb000293 	bl	191a0 <CARPHandler::Process()>
   18750:	e28dd014 	add	sp, sp, #20
   18754:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18758:	e30e1838 	movw	r1, #59448	; 0xe838
   1875c:	e30e0848 	movw	r0, #59464	; 0xe848
   18760:	e3401002 	movt	r1, #2
   18764:	e3400002 	movt	r0, #2
   18768:	e3a0203d 	mov	r2, #61	; 0x3d
   1876c:	eb00310a 	bl	24b9c <assertion_failed>
   18770:	e5940004 	ldr	r0, [r4, #4]
   18774:	eaffff97 	b	185d8 <CLinkLayer::Process()+0x18>
   18778:	e30e1838 	movw	r1, #59448	; 0xe838
   1877c:	e30e085c 	movw	r0, #59484	; 0xe85c
   18780:	e3401002 	movt	r1, #2
   18784:	e3400002 	movt	r0, #2
   18788:	e3a0203f 	mov	r2, #63	; 0x3f
   1878c:	eb003102 	bl	24b9c <assertion_failed>
   18790:	eaffff93 	b	185e4 <CLinkLayer::Process()+0x24>
   18794:	e30e1838 	movw	r1, #59448	; 0xe838
   18798:	e30e0848 	movw	r0, #59464	; 0xe848
   1879c:	e3401002 	movt	r1, #2
   187a0:	e3400002 	movt	r0, #2
   187a4:	e3a02041 	mov	r2, #65	; 0x41
   187a8:	eb0030fb 	bl	24b9c <assertion_failed>
   187ac:	eaffff8f 	b	185f0 <CLinkLayer::Process()+0x30>
   187b0:	e30e1838 	movw	r1, #59448	; 0xe838
   187b4:	e30c041c 	movw	r0, #50204	; 0xc41c
   187b8:	e3401002 	movt	r1, #2
   187bc:	e3400002 	movt	r0, #2
   187c0:	e3a02042 	mov	r2, #66	; 0x42
   187c4:	eb0030f4 	bl	24b9c <assertion_failed>
   187c8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   187cc:	eaffff8a 	b	185fc <CLinkLayer::Process()+0x3c>

000187d0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   187d0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   187d4:	e1a05001 	mov	r5, r1
   187d8:	e5901008 	ldr	r1, [r0, #8]
   187dc:	e24dd014 	sub	sp, sp, #20
   187e0:	e1a04000 	mov	r4, r0
   187e4:	e1a07002 	mov	r7, r2
   187e8:	e3510000 	cmp	r1, #0
   187ec:	e1a06003 	mov	r6, r3
   187f0:	0a000045 	beq	1890c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x13c>
   187f4:	e28d0004 	add	r0, sp, #4
   187f8:	ebfff166 	bl	14d98 <CMACAddress::CMACAddress()>
   187fc:	e5943000 	ldr	r3, [r4]
   18800:	e3530000 	cmp	r3, #0
   18804:	0a000047 	beq	18928 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x158>
   18808:	e1a00005 	mov	r0, r5
   1880c:	eb001561 	bl	1dd98 <CIPAddress::IsBroadcast() const>
   18810:	e3500000 	cmp	r0, #0
   18814:	0a00002d 	beq	188d0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x100>
   18818:	e28d0004 	add	r0, sp, #4
   1881c:	ebfff19f 	bl	14ea0 <CMACAddress::SetBroadcast()>
   18820:	e2462001 	sub	r2, r6, #1
   18824:	e3003631 	movw	r3, #1585	; 0x631
   18828:	e1520003 	cmp	r2, r3
   1882c:	83a06000 	movhi	r6, #0
   18830:	9a000004 	bls	18848 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x78>
   18834:	e28d0004 	add	r0, sp, #4
   18838:	ebfff159 	bl	14da4 <CMACAddress::~CMACAddress()>
   1883c:	e1a00006 	mov	r0, r6
   18840:	e28dd014 	add	sp, sp, #20
   18844:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18848:	e286800e 	add	r8, r6, #14
   1884c:	e1a00008 	mov	r0, r8
   18850:	eb0025c6 	bl	21f70 <operator new[](unsigned int)>
   18854:	e1a01000 	mov	r1, r0
   18858:	e1a05000 	mov	r5, r0
   1885c:	e28d0004 	add	r0, sp, #4
   18860:	ebfff1a4 	bl	14ef8 <CMACAddress::CopyTo(unsigned char*) const>
   18864:	e5940004 	ldr	r0, [r4, #4]
   18868:	e3500000 	cmp	r0, #0
   1886c:	0a00003b 	beq	18960 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   18870:	eb0000f9 	bl	18c5c <CNetDeviceLayer::GetMACAddress() const>
   18874:	e2509000 	subs	r9, r0, #0
   18878:	0a000040 	beq	18980 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1b0>
   1887c:	e1a00009 	mov	r0, r9
   18880:	e2851006 	add	r1, r5, #6
   18884:	ebfff19b 	bl	14ef8 <CMACAddress::CopyTo(unsigned char*) const>
   18888:	e3570000 	cmp	r7, #0
   1888c:	e3a02000 	mov	r2, #0
   18890:	e3a03008 	mov	r3, #8
   18894:	e5c5200d 	strb	r2, [r5, #13]
   18898:	e5c5300c 	strb	r3, [r5, #12]
   1889c:	0a000028 	beq	18944 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x174>
   188a0:	e1a02006 	mov	r2, r6
   188a4:	e1a01007 	mov	r1, r7
   188a8:	e285000e 	add	r0, r5, #14
   188ac:	e3a06001 	mov	r6, #1
   188b0:	eb002a39 	bl	2319c <memcpy>
   188b4:	e5940004 	ldr	r0, [r4, #4]
   188b8:	e1a02008 	mov	r2, r8
   188bc:	e1a01005 	mov	r1, r5
   188c0:	eb0000fa 	bl	18cb0 <CNetDeviceLayer::Send(void const*, unsigned int)>
   188c4:	e1a00005 	mov	r0, r5
   188c8:	eb0025aa 	bl	21f78 <operator delete[](void*)>
   188cc:	eaffffd8 	b	18834 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x64>
   188d0:	e5940000 	ldr	r0, [r4]
   188d4:	eb0013d1 	bl	1d820 <CNetConfig::GetBroadcastAddress() const>
   188d8:	e1a01000 	mov	r1, r0
   188dc:	e1a00005 	mov	r0, r5
   188e0:	eb00143a 	bl	1d9d0 <CIPAddress::operator==(CIPAddress const&) const>
   188e4:	e3500000 	cmp	r0, #0
   188e8:	1affffca 	bne	18818 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x48>
   188ec:	e1a01005 	mov	r1, r5
   188f0:	e28d2004 	add	r2, sp, #4
   188f4:	e5940008 	ldr	r0, [r4, #8]
   188f8:	eb0002c5 	bl	19414 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)>
   188fc:	e3500000 	cmp	r0, #0
   18900:	1affffc6 	bne	18820 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x50>
   18904:	e3a06001 	mov	r6, #1
   18908:	eaffffc9 	b	18834 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x64>
   1890c:	e30e1838 	movw	r1, #59448	; 0xe838
   18910:	e30e0870 	movw	r0, #59504	; 0xe870
   18914:	e3401002 	movt	r1, #2
   18918:	e3400002 	movt	r0, #2
   1891c:	e3a02069 	mov	r2, #105	; 0x69
   18920:	eb00309d 	bl	24b9c <assertion_failed>
   18924:	eaffffb2 	b	187f4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x24>
   18928:	e30e1838 	movw	r1, #59448	; 0xe838
   1892c:	e30e0608 	movw	r0, #58888	; 0xe608
   18930:	e3401002 	movt	r1, #2
   18934:	e3400002 	movt	r0, #2
   18938:	e3a0206c 	mov	r2, #108	; 0x6c
   1893c:	eb003096 	bl	24b9c <assertion_failed>
   18940:	eaffffb0 	b	18808 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x38>
   18944:	e30e1838 	movw	r1, #59448	; 0xe838
   18948:	e30e0884 	movw	r0, #59524	; 0xe884
   1894c:	e3401002 	movt	r1, #2
   18950:	e3400002 	movt	r0, #2
   18954:	e3a0208b 	mov	r2, #139	; 0x8b
   18958:	eb00308f 	bl	24b9c <assertion_failed>
   1895c:	eaffffcf 	b	188a0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xd0>
   18960:	e30e1838 	movw	r1, #59448	; 0xe838
   18964:	e30e0848 	movw	r0, #59464	; 0xe848
   18968:	e3401002 	movt	r1, #2
   1896c:	e3400002 	movt	r0, #2
   18970:	e3a02084 	mov	r2, #132	; 0x84
   18974:	eb003088 	bl	24b9c <assertion_failed>
   18978:	e5940004 	ldr	r0, [r4, #4]
   1897c:	eaffffbb 	b	18870 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xa0>
   18980:	e30e1838 	movw	r1, #59448	; 0xe838
   18984:	e30e085c 	movw	r0, #59484	; 0xe85c
   18988:	e3401002 	movt	r1, #2
   1898c:	e3400002 	movt	r0, #2
   18990:	e3a02086 	mov	r2, #134	; 0x86
   18994:	eb003080 	bl	24b9c <assertion_failed>
   18998:	eaffffb7 	b	1887c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xac>

0001899c <CLinkLayer::Receive(void*, unsigned int*)>:
   1899c:	e92d4070 	push	{r4, r5, r6, lr}
   189a0:	e2516000 	subs	r6, r1, #0
   189a4:	e1a05000 	mov	r5, r0
   189a8:	e1a04002 	mov	r4, r2
   189ac:	0a000009 	beq	189d8 <CLinkLayer::Receive(void*, unsigned int*)+0x3c>
   189b0:	e3540000 	cmp	r4, #0
   189b4:	0a00000e 	beq	189f4 <CLinkLayer::Receive(void*, unsigned int*)+0x58>
   189b8:	e1a01006 	mov	r1, r6
   189bc:	e2850018 	add	r0, r5, #24
   189c0:	e3a02000 	mov	r2, #0
   189c4:	eb0015ec 	bl	1e17c <CNetQueue::Dequeue(void*, void**)>
   189c8:	e5840000 	str	r0, [r4]
   189cc:	e2900000 	adds	r0, r0, #0
   189d0:	13a00001 	movne	r0, #1
   189d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   189d8:	e30e1838 	movw	r1, #59448	; 0xe838
   189dc:	e30b097c 	movw	r0, #47484	; 0xb97c
   189e0:	e3401002 	movt	r1, #2
   189e4:	e3400002 	movt	r0, #2
   189e8:	e3a02099 	mov	r2, #153	; 0x99
   189ec:	eb00306a 	bl	24b9c <assertion_failed>
   189f0:	eaffffee 	b	189b0 <CLinkLayer::Receive(void*, unsigned int*)+0x14>
   189f4:	e30e1838 	movw	r1, #59448	; 0xe838
   189f8:	e30c03b8 	movw	r0, #50104	; 0xc3b8
   189fc:	e3401002 	movt	r1, #2
   18a00:	e3400002 	movt	r0, #2
   18a04:	e3a0209a 	mov	r2, #154	; 0x9a
   18a08:	eb003063 	bl	24b9c <assertion_failed>
   18a0c:	eaffffe9 	b	189b8 <CLinkLayer::Receive(void*, unsigned int*)+0x1c>

00018a10 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*)>:
   18a10:	e92d4070 	push	{r4, r5, r6, lr}
   18a14:	e1a04000 	mov	r4, r0
   18a18:	e5801000 	str	r1, [r0]
   18a1c:	e3a05000 	mov	r5, #0
   18a20:	e2800008 	add	r0, r0, #8
   18a24:	e5845004 	str	r5, [r4, #4]
   18a28:	eb001539 	bl	1df14 <CNetQueue::CNetQueue()>
   18a2c:	e2840014 	add	r0, r4, #20
   18a30:	eb001537 	bl	1df14 <CNetQueue::CNetQueue()>
   18a34:	e5845020 	str	r5, [r4, #32]
   18a38:	e1a00004 	mov	r0, r4
   18a3c:	e8bd8070 	pop	{r4, r5, r6, pc}

00018a40 <CNetDeviceLayer::~CNetDeviceLayer()>:
   18a40:	e92d4010 	push	{r4, lr}
   18a44:	e1a04000 	mov	r4, r0
   18a48:	e5900020 	ldr	r0, [r0, #32]
   18a4c:	e3500000 	cmp	r0, #0
   18a50:	0a000000 	beq	18a58 <CNetDeviceLayer::~CNetDeviceLayer()+0x18>
   18a54:	eb002547 	bl	21f78 <operator delete[](void*)>
   18a58:	e1a00004 	mov	r0, r4
   18a5c:	e3a03000 	mov	r3, #0
   18a60:	e5843020 	str	r3, [r4, #32]
   18a64:	e5843004 	str	r3, [r4, #4]
   18a68:	e4803014 	str	r3, [r0], #20
   18a6c:	eb00156c 	bl	1e024 <CNetQueue::~CNetQueue()>
   18a70:	e2840008 	add	r0, r4, #8
   18a74:	eb00156a 	bl	1e024 <CNetQueue::~CNetQueue()>
   18a78:	e1a00004 	mov	r0, r4
   18a7c:	e8bd8010 	pop	{r4, pc}

00018a80 <CNetDeviceLayer::Initialize()>:
   18a80:	e5903004 	ldr	r3, [r0, #4]
   18a84:	e92d4070 	push	{r4, r5, r6, lr}
   18a88:	e3530000 	cmp	r3, #0
   18a8c:	e1a05000 	mov	r5, r0
   18a90:	0a000005 	beq	18aac <CNetDeviceLayer::Initialize()+0x2c>
   18a94:	e30e189c 	movw	r1, #59548	; 0xe89c
   18a98:	e30b0cfc 	movw	r0, #48380	; 0xbcfc
   18a9c:	e3401002 	movt	r1, #2
   18aa0:	e3400002 	movt	r0, #2
   18aa4:	e3a0202d 	mov	r2, #45	; 0x2d
   18aa8:	eb00303b 	bl	24b9c <assertion_failed>
   18aac:	eb003192 	bl	250fc <CDeviceNameService::Get()>
   18ab0:	e30e18ac 	movw	r1, #59564	; 0xe8ac
   18ab4:	e3a02000 	mov	r2, #0
   18ab8:	e3401002 	movt	r1, #2
   18abc:	eb00314a 	bl	24fec <CDeviceNameService::GetDevice(char const*, int)>
   18ac0:	e3500000 	cmp	r0, #0
   18ac4:	e1a04000 	mov	r4, r0
   18ac8:	e5850004 	str	r0, [r5, #4]
   18acc:	0a00000e 	beq	18b0c <CNetDeviceLayer::Initialize()+0x8c>
   18ad0:	e5953020 	ldr	r3, [r5, #32]
   18ad4:	e3530000 	cmp	r3, #0
   18ad8:	0a000005 	beq	18af4 <CNetDeviceLayer::Initialize()+0x74>
   18adc:	e30e189c 	movw	r1, #59548	; 0xe89c
   18ae0:	e30e06b0 	movw	r0, #59056	; 0xe6b0
   18ae4:	e3401002 	movt	r1, #2
   18ae8:	e3400002 	movt	r0, #2
   18aec:	e3a02036 	mov	r2, #54	; 0x36
   18af0:	eb003029 	bl	24b9c <assertion_failed>
   18af4:	e3a00d19 	mov	r0, #1600	; 0x640
   18af8:	e3a04001 	mov	r4, #1
   18afc:	eb00251b 	bl	21f70 <operator new[](unsigned int)>
   18b00:	e5850020 	str	r0, [r5, #32]
   18b04:	e1a00004 	mov	r0, r4
   18b08:	e8bd8070 	pop	{r4, r5, r6, pc}
   18b0c:	eb0031a7 	bl	251b0 <CLogger::Get()>
   18b10:	e30e38b4 	movw	r3, #59572	; 0xe8b4
   18b14:	e30e1894 	movw	r1, #59540	; 0xe894
   18b18:	e3403002 	movt	r3, #2
   18b1c:	e3401002 	movt	r1, #2
   18b20:	e3a02001 	mov	r2, #1
   18b24:	eb00327d 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18b28:	eafffff5 	b	18b04 <CNetDeviceLayer::Initialize()+0x84>

00018b2c <CNetDeviceLayer::Process()>:
   18b2c:	e5903004 	ldr	r3, [r0, #4]
   18b30:	e92d4070 	push	{r4, r5, r6, lr}
   18b34:	e3530000 	cmp	r3, #0
   18b38:	e24dd008 	sub	sp, sp, #8
   18b3c:	e1a04000 	mov	r4, r0
   18b40:	0a00003e 	beq	18c40 <CNetDeviceLayer::Process()+0x114>
   18b44:	e5941020 	ldr	r1, [r4, #32]
   18b48:	e3510000 	cmp	r1, #0
   18b4c:	0a000033 	beq	18c20 <CNetDeviceLayer::Process()+0xf4>
   18b50:	e2845008 	add	r5, r4, #8
   18b54:	ea000007 	b	18b78 <CNetDeviceLayer::Process()+0x4c>
   18b58:	e5940004 	ldr	r0, [r4, #4]
   18b5c:	e5941020 	ldr	r1, [r4, #32]
   18b60:	e5903000 	ldr	r3, [r0]
   18b64:	e5933020 	ldr	r3, [r3, #32]
   18b68:	e12fff33 	blx	r3
   18b6c:	e3500000 	cmp	r0, #0
   18b70:	0a000022 	beq	18c00 <CNetDeviceLayer::Process()+0xd4>
   18b74:	e5941020 	ldr	r1, [r4, #32]
   18b78:	e3a02000 	mov	r2, #0
   18b7c:	e1a00005 	mov	r0, r5
   18b80:	eb00157d 	bl	1e17c <CNetQueue::Dequeue(void*, void**)>
   18b84:	e2502000 	subs	r2, r0, #0
   18b88:	e58d0004 	str	r0, [sp, #4]
   18b8c:	1afffff1 	bne	18b58 <CNetDeviceLayer::Process()+0x2c>
   18b90:	e30e689c 	movw	r6, #59548	; 0xe89c
   18b94:	e30e56f8 	movw	r5, #59128	; 0xe6f8
   18b98:	e3406002 	movt	r6, #2
   18b9c:	e3405002 	movt	r5, #2
   18ba0:	ea000003 	b	18bb4 <CNetDeviceLayer::Process()+0x88>
   18ba4:	e3a03000 	mov	r3, #0
   18ba8:	e5941020 	ldr	r1, [r4, #32]
   18bac:	e2840014 	add	r0, r4, #20
   18bb0:	eb001520 	bl	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   18bb4:	e5940004 	ldr	r0, [r4, #4]
   18bb8:	e28d2004 	add	r2, sp, #4
   18bbc:	e5941020 	ldr	r1, [r4, #32]
   18bc0:	e5903000 	ldr	r3, [r0]
   18bc4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   18bc8:	e12fff33 	blx	r3
   18bcc:	e3500000 	cmp	r0, #0
   18bd0:	0a000008 	beq	18bf8 <CNetDeviceLayer::Process()+0xcc>
   18bd4:	e59d2004 	ldr	r2, [sp, #4]
   18bd8:	e3520000 	cmp	r2, #0
   18bdc:	1afffff0 	bne	18ba4 <CNetDeviceLayer::Process()+0x78>
   18be0:	e3a0204f 	mov	r2, #79	; 0x4f
   18be4:	e1a01006 	mov	r1, r6
   18be8:	e1a00005 	mov	r0, r5
   18bec:	eb002fea 	bl	24b9c <assertion_failed>
   18bf0:	e59d2004 	ldr	r2, [sp, #4]
   18bf4:	eaffffea 	b	18ba4 <CNetDeviceLayer::Process()+0x78>
   18bf8:	e28dd008 	add	sp, sp, #8
   18bfc:	e8bd8070 	pop	{r4, r5, r6, pc}
   18c00:	eb00316a 	bl	251b0 <CLogger::Get()>
   18c04:	e30e38d0 	movw	r3, #59600	; 0xe8d0
   18c08:	e30e1894 	movw	r1, #59540	; 0xe894
   18c0c:	e3403002 	movt	r3, #2
   18c10:	e3401002 	movt	r1, #2
   18c14:	e3a02002 	mov	r2, #2
   18c18:	eb003240 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18c1c:	eaffffdb 	b	18b90 <CNetDeviceLayer::Process()+0x64>
   18c20:	e30e189c 	movw	r1, #59548	; 0xe89c
   18c24:	e30c041c 	movw	r0, #50204	; 0xc41c
   18c28:	e3401002 	movt	r1, #2
   18c2c:	e3400002 	movt	r0, #2
   18c30:	e3a02040 	mov	r2, #64	; 0x40
   18c34:	eb002fd8 	bl	24b9c <assertion_failed>
   18c38:	e5941020 	ldr	r1, [r4, #32]
   18c3c:	eaffffc3 	b	18b50 <CNetDeviceLayer::Process()+0x24>
   18c40:	e30e189c 	movw	r1, #59548	; 0xe89c
   18c44:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   18c48:	e3401002 	movt	r1, #2
   18c4c:	e3400002 	movt	r0, #2
   18c50:	e3a0203f 	mov	r2, #63	; 0x3f
   18c54:	eb002fd0 	bl	24b9c <assertion_failed>
   18c58:	eaffffb9 	b	18b44 <CNetDeviceLayer::Process()+0x18>

00018c5c <CNetDeviceLayer::GetMACAddress() const>:
   18c5c:	e5903004 	ldr	r3, [r0, #4]
   18c60:	e3530000 	cmp	r3, #0
   18c64:	0a000003 	beq	18c78 <CNetDeviceLayer::GetMACAddress() const+0x1c>
   18c68:	e5932000 	ldr	r2, [r3]
   18c6c:	e1a00003 	mov	r0, r3
   18c70:	e592301c 	ldr	r3, [r2, #28]
   18c74:	e12fff13 	bx	r3
   18c78:	e92d4010 	push	{r4, lr}
   18c7c:	e3a02056 	mov	r2, #86	; 0x56
   18c80:	e1a04000 	mov	r4, r0
   18c84:	e30e189c 	movw	r1, #59548	; 0xe89c
   18c88:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   18c8c:	e3401002 	movt	r1, #2
   18c90:	e3400002 	movt	r0, #2
   18c94:	eb002fc0 	bl	24b9c <assertion_failed>
   18c98:	e5943004 	ldr	r3, [r4, #4]
   18c9c:	e8bd4010 	pop	{r4, lr}
   18ca0:	e5932000 	ldr	r2, [r3]
   18ca4:	e1a00003 	mov	r0, r3
   18ca8:	e592301c 	ldr	r3, [r2, #28]
   18cac:	e12fff13 	bx	r3

00018cb0 <CNetDeviceLayer::Send(void const*, unsigned int)>:
   18cb0:	e2800008 	add	r0, r0, #8
   18cb4:	e3a03000 	mov	r3, #0
   18cb8:	ea0014de 	b	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>

00018cbc <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   18cbc:	e92d4070 	push	{r4, r5, r6, lr}
   18cc0:	e2800014 	add	r0, r0, #20
   18cc4:	e1a05002 	mov	r5, r2
   18cc8:	e3a02000 	mov	r2, #0
   18ccc:	eb00152a 	bl	1e17c <CNetQueue::Dequeue(void*, void**)>
   18cd0:	e2504000 	subs	r4, r0, #0
   18cd4:	0a000004 	beq	18cec <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   18cd8:	e3550000 	cmp	r5, #0
   18cdc:	0a000004 	beq	18cf4 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x38>
   18ce0:	e5854000 	str	r4, [r5]
   18ce4:	e3a00001 	mov	r0, #1
   18ce8:	e8bd8070 	pop	{r4, r5, r6, pc}
   18cec:	e1a00004 	mov	r0, r4
   18cf0:	e8bd8070 	pop	{r4, r5, r6, pc}
   18cf4:	e30e189c 	movw	r1, #59548	; 0xe89c
   18cf8:	e30c03b8 	movw	r0, #50104	; 0xc3b8
   18cfc:	e3401002 	movt	r1, #2
   18d00:	e3400002 	movt	r0, #2
   18d04:	e3a02067 	mov	r2, #103	; 0x67
   18d08:	eb002fa3 	bl	24b9c <assertion_failed>
   18d0c:	eafffff3 	b	18ce0 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x24>

00018d10 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   18d10:	e92d4070 	push	{r4, r5, r6, lr}
   18d14:	e2524000 	subs	r4, r2, #0
   18d18:	e1a05001 	mov	r5, r1
   18d1c:	0a000025 	beq	18db8 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa8>
   18d20:	e3550013 	cmp	r5, #19
   18d24:	8a000008 	bhi	18d4c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x3c>
   18d28:	e594019c 	ldr	r0, [r4, #412]	; 0x19c
   18d2c:	e3500000 	cmp	r0, #0
   18d30:	1a00000e 	bne	18d70 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x60>
   18d34:	e3a03014 	mov	r3, #20
   18d38:	e0234395 	mla	r3, r5, r3, r4
   18d3c:	e5d3300c 	ldrb	r3, [r3, #12]
   18d40:	e3530001 	cmp	r3, #1
   18d44:	0a000014 	beq	18d9c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x8c>
   18d48:	e8bd8070 	pop	{r4, r5, r6, pc}
   18d4c:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   18d50:	e30e08f0 	movw	r0, #59632	; 0xe8f0
   18d54:	e3401002 	movt	r1, #2
   18d58:	e3400002 	movt	r0, #2
   18d5c:	e3a02e15 	mov	r2, #336	; 0x150
   18d60:	eb002f8d 	bl	24b9c <assertion_failed>
   18d64:	e594019c 	ldr	r0, [r4, #412]	; 0x19c
   18d68:	e3500000 	cmp	r0, #0
   18d6c:	0afffff0 	beq	18d34 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x24>
   18d70:	eb002489 	bl	21f9c <EnterCritical>
   18d74:	e3a03014 	mov	r3, #20
   18d78:	e0234395 	mla	r3, r5, r3, r4
   18d7c:	e594019c 	ldr	r0, [r4, #412]	; 0x19c
   18d80:	e5d3300c 	ldrb	r3, [r3, #12]
   18d84:	e3530001 	cmp	r3, #1
   18d88:	0a000003 	beq	18d9c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x8c>
   18d8c:	e3500000 	cmp	r0, #0
   18d90:	08bd8070 	popeq	{r4, r5, r6, pc}
   18d94:	e8bd4070 	pop	{r4, r5, r6, lr}
   18d98:	ea0024ad 	b	22054 <LeaveCritical>
   18d9c:	e3a03014 	mov	r3, #20
   18da0:	e3500000 	cmp	r0, #0
   18da4:	e0244395 	mla	r4, r5, r3, r4
   18da8:	e3a02000 	mov	r2, #0
   18dac:	e5c4200c 	strb	r2, [r4, #12]
   18db0:	1afffff7 	bne	18d94 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x84>
   18db4:	e8bd8070 	pop	{r4, r5, r6, pc}
   18db8:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   18dbc:	e30a0938 	movw	r0, #43320	; 0xa938
   18dc0:	e3401002 	movt	r1, #2
   18dc4:	e3400002 	movt	r0, #2
   18dc8:	e300214d 	movw	r2, #333	; 0x14d
   18dcc:	eb002f72 	bl	24b9c <assertion_failed>
   18dd0:	eaffffd2 	b	18d20 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x10>

00018dd4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)>:
   18dd4:	e3510000 	cmp	r1, #0
   18dd8:	e92d4010 	push	{r4, lr}
   18ddc:	e1a04000 	mov	r4, r0
   18de0:	e5801000 	str	r1, [r0]
   18de4:	e3a01001 	mov	r1, #1
   18de8:	e5803008 	str	r3, [r0, #8]
   18dec:	e3a03000 	mov	r3, #0
   18df0:	e5802004 	str	r2, [r0, #4]
   18df4:	e580119c 	str	r1, [r0, #412]	; 0x19c
   18df8:	e58031a0 	str	r3, [r0, #416]	; 0x1a0
   18dfc:	0a000011 	beq	18e48 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x74>
   18e00:	e3520000 	cmp	r2, #0
   18e04:	0a000017 	beq	18e68 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x94>
   18e08:	e5943008 	ldr	r3, [r4, #8]
   18e0c:	e3530000 	cmp	r3, #0
   18e10:	0a00001b 	beq	18e84 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0xb0>
   18e14:	e3a03000 	mov	r3, #0
   18e18:	e3a00014 	mov	r0, #20
   18e1c:	e1a01003 	mov	r1, r3
   18e20:	e0224390 	mla	r2, r0, r3, r4
   18e24:	e2833001 	add	r3, r3, #1
   18e28:	e3530014 	cmp	r3, #20
   18e2c:	e5c2100c 	strb	r1, [r2, #12]
   18e30:	1afffffa 	bne	18e20 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x4c>
   18e34:	e3a00d19 	mov	r0, #1600	; 0x640
   18e38:	eb00244c 	bl	21f70 <operator new[](unsigned int)>
   18e3c:	e58401a0 	str	r0, [r4, #416]	; 0x1a0
   18e40:	e1a00004 	mov	r0, r4
   18e44:	e8bd8010 	pop	{r4, pc}
   18e48:	e3a0203e 	mov	r2, #62	; 0x3e
   18e4c:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   18e50:	e30e0608 	movw	r0, #58888	; 0xe608
   18e54:	e3401002 	movt	r1, #2
   18e58:	e3400002 	movt	r0, #2
   18e5c:	eb002f4e 	bl	24b9c <assertion_failed>
   18e60:	e5942004 	ldr	r2, [r4, #4]
   18e64:	eaffffe5 	b	18e00 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x2c>
   18e68:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   18e6c:	e30e0848 	movw	r0, #59464	; 0xe848
   18e70:	e3401002 	movt	r1, #2
   18e74:	e3400002 	movt	r0, #2
   18e78:	e3a0203f 	mov	r2, #63	; 0x3f
   18e7c:	eb002f46 	bl	24b9c <assertion_failed>
   18e80:	eaffffe0 	b	18e08 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x34>
   18e84:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   18e88:	e30e090c 	movw	r0, #59660	; 0xe90c
   18e8c:	e3401002 	movt	r1, #2
   18e90:	e3400002 	movt	r0, #2
   18e94:	e3a02040 	mov	r2, #64	; 0x40
   18e98:	eb002f3f 	bl	24b9c <assertion_failed>
   18e9c:	eaffffdc 	b	18e14 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CNetQueue*)+0x40>

00018ea0 <CARPHandler::~CARPHandler()>:
   18ea0:	e92d4010 	push	{r4, lr}
   18ea4:	e1a04000 	mov	r4, r0
   18ea8:	e59001a0 	ldr	r0, [r0, #416]	; 0x1a0
   18eac:	e3500000 	cmp	r0, #0
   18eb0:	0a000000 	beq	18eb8 <CARPHandler::~CARPHandler()+0x18>
   18eb4:	eb00242f 	bl	21f78 <operator delete[](void*)>
   18eb8:	e1a00004 	mov	r0, r4
   18ebc:	e8bd8010 	pop	{r4, pc}

00018ec0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   18ec0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ec4:	e1a07000 	mov	r7, r0
   18ec8:	e590019c 	ldr	r0, [r0, #412]	; 0x19c
   18ecc:	e1a0a001 	mov	sl, r1
   18ed0:	e1a09002 	mov	r9, r2
   18ed4:	e3500000 	cmp	r0, #0
   18ed8:	1a000020 	bne	18f60 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xa0>
   18edc:	e3a06000 	mov	r6, #0
   18ee0:	e3a08014 	mov	r8, #20
   18ee4:	e1a04006 	mov	r4, r6
   18ee8:	ea000002 	b	18ef8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x38>
   18eec:	e3540014 	cmp	r4, #20
   18ef0:	e2866014 	add	r6, r6, #20
   18ef4:	0a000014 	beq	18f4c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x8c>
   18ef8:	e0257498 	mla	r5, r8, r4, r7
   18efc:	e2844001 	add	r4, r4, #1
   18f00:	e285b00c 	add	fp, r5, #12
   18f04:	e5d5300c 	ldrb	r3, [r5, #12]
   18f08:	e3530001 	cmp	r3, #1
   18f0c:	1afffff6 	bne	18eec <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x2c>
   18f10:	e286100d 	add	r1, r6, #13
   18f14:	e1a0000a 	mov	r0, sl
   18f18:	e0871001 	add	r1, r7, r1
   18f1c:	eb0012e2 	bl	1daac <CIPAddress::operator==(unsigned char const*) const>
   18f20:	e3500000 	cmp	r0, #0
   18f24:	0afffff0 	beq	18eec <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x2c>
   18f28:	eb002775 	bl	22d04 <CTimer::Get()>
   18f2c:	e5951018 	ldr	r1, [r5, #24]
   18f30:	eb002604 	bl	22748 <CTimer::CancelKernelTimer(unsigned int)>
   18f34:	e2861011 	add	r1, r6, #17
   18f38:	e0871001 	add	r1, r7, r1
   18f3c:	e1a00009 	mov	r0, r9
   18f40:	ebffefec 	bl	14ef8 <CMACAddress::CopyTo(unsigned char*) const>
   18f44:	e3a03002 	mov	r3, #2
   18f48:	e5c5300c 	strb	r3, [r5, #12]
   18f4c:	e597319c 	ldr	r3, [r7, #412]	; 0x19c
   18f50:	e3530000 	cmp	r3, #0
   18f54:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f58:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f5c:	ea00243c 	b	22054 <LeaveCritical>
   18f60:	eb00240d 	bl	21f9c <EnterCritical>
   18f64:	eaffffdc 	b	18edc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x1c>

00018f68 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   18f68:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f6c:	e1a07000 	mov	r7, r0
   18f70:	e590019c 	ldr	r0, [r0, #412]	; 0x19c
   18f74:	e1a08001 	mov	r8, r1
   18f78:	e1a09002 	mov	r9, r2
   18f7c:	e3500000 	cmp	r0, #0
   18f80:	1a00001e 	bne	19000 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x98>
   18f84:	e3a06014 	mov	r6, #20
   18f88:	e287500d 	add	r5, r7, #13
   18f8c:	e1a0a006 	mov	sl, r6
   18f90:	e3a04000 	mov	r4, #0
   18f94:	ea000005 	b	18fb0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x48>
   18f98:	e3560014 	cmp	r6, #20
   18f9c:	01a06004 	moveq	r6, r4
   18fa0:	e2844001 	add	r4, r4, #1
   18fa4:	e2855014 	add	r5, r5, #20
   18fa8:	e3540014 	cmp	r4, #20
   18fac:	0a00000d 	beq	18fe8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x80>
   18fb0:	e023749a 	mla	r3, sl, r4, r7
   18fb4:	e5d3300c 	ldrb	r3, [r3, #12]
   18fb8:	e3530000 	cmp	r3, #0
   18fbc:	0afffff5 	beq	18f98 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x30>
   18fc0:	e1a01005 	mov	r1, r5
   18fc4:	e1a00008 	mov	r0, r8
   18fc8:	eb0012b7 	bl	1daac <CIPAddress::operator==(unsigned char const*) const>
   18fcc:	e3500000 	cmp	r0, #0
   18fd0:	0afffff2 	beq	18fa0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x38>
   18fd4:	e597319c 	ldr	r3, [r7, #412]	; 0x19c
   18fd8:	e3530000 	cmp	r3, #0
   18fdc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18fe0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18fe4:	ea00241a 	b	22054 <LeaveCritical>
   18fe8:	e3560014 	cmp	r6, #20
   18fec:	1a000005 	bne	19008 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xa0>
   18ff0:	e597319c 	ldr	r3, [r7, #412]	; 0x19c
   18ff4:	e3530000 	cmp	r3, #0
   18ff8:	1afffff8 	bne	18fe0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x78>
   18ffc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19000:	eb0023e5 	bl	21f9c <EnterCritical>
   19004:	eaffffde 	b	18f84 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x1c>
   19008:	e0040694 	mul	r4, r4, r6
   1900c:	e1a00008 	mov	r0, r8
   19010:	e284100d 	add	r1, r4, #13
   19014:	e0871001 	add	r1, r7, r1
   19018:	eb001333 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   1901c:	e2841011 	add	r1, r4, #17
   19020:	e0871001 	add	r1, r7, r1
   19024:	e1a00009 	mov	r0, r9
   19028:	ebffefb2 	bl	14ef8 <CMACAddress::CopyTo(unsigned char*) const>
   1902c:	e0874004 	add	r4, r7, r4
   19030:	eb002733 	bl	22d04 <CTimer::Get()>
   19034:	eb0024e2 	bl	223c4 <CTimer::GetTicks() const>
   19038:	e3a03002 	mov	r3, #2
   1903c:	e5c4300c 	strb	r3, [r4, #12]
   19040:	e584001c 	str	r0, [r4, #28]
   19044:	eaffffe9 	b	18ff0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x88>

00019048 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)>:
   19048:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1904c:	e1a04000 	mov	r4, r0
   19050:	e5900000 	ldr	r0, [r0]
   19054:	e24dd034 	sub	sp, sp, #52	; 0x34
   19058:	e1a09001 	mov	r9, r1
   1905c:	e1a07002 	mov	r7, r2
   19060:	e3500000 	cmp	r0, #0
   19064:	e1a05003 	mov	r5, r3
   19068:	0a00002e 	beq	19128 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0xe0>
   1906c:	eb0011e1 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   19070:	e2508000 	subs	r8, r0, #0
   19074:	0a000033 	beq	19148 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x100>
   19078:	e5940004 	ldr	r0, [r4, #4]
   1907c:	e3500000 	cmp	r0, #0
   19080:	0a000037 	beq	19164 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x11c>
   19084:	ebfffef4 	bl	18c5c <CNetDeviceLayer::GetMACAddress() const>
   19088:	e2506000 	subs	r6, r0, #0
   1908c:	0a00003c 	beq	19184 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x13c>
   19090:	e1a00005 	mov	r0, r5
   19094:	e28d1004 	add	r1, sp, #4
   19098:	ebffef96 	bl	14ef8 <CMACAddress::CopyTo(unsigned char*) const>
   1909c:	e28d100a 	add	r1, sp, #10
   190a0:	e1a00006 	mov	r0, r6
   190a4:	ebffef93 	bl	14ef8 <CMACAddress::CopyTo(unsigned char*) const>
   190a8:	e3590000 	cmp	r9, #0
   190ac:	e1a00006 	mov	r0, r6
   190b0:	e28d101a 	add	r1, sp, #26
   190b4:	03a02c02 	moveq	r2, #512	; 0x200
   190b8:	13a02c01 	movne	r2, #256	; 0x100
   190bc:	e3003608 	movw	r3, #1544	; 0x608
   190c0:	e1cd31b0 	strh	r3, [sp, #16]
   190c4:	e3a03008 	mov	r3, #8
   190c8:	e1cd31b4 	strh	r3, [sp, #20]
   190cc:	e3a03004 	mov	r3, #4
   190d0:	e5cd3017 	strb	r3, [sp, #23]
   190d4:	e1cd21b8 	strh	r2, [sp, #24]
   190d8:	e3a02c01 	mov	r2, #256	; 0x100
   190dc:	e1cd21b2 	strh	r2, [sp, #18]
   190e0:	e3a02006 	mov	r2, #6
   190e4:	e5cd2016 	strb	r2, [sp, #22]
   190e8:	ebffef82 	bl	14ef8 <CMACAddress::CopyTo(unsigned char*) const>
   190ec:	e1a00008 	mov	r0, r8
   190f0:	e28d1020 	add	r1, sp, #32
   190f4:	eb0012fc 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   190f8:	e1a00005 	mov	r0, r5
   190fc:	e28d1024 	add	r1, sp, #36	; 0x24
   19100:	ebffef7c 	bl	14ef8 <CMACAddress::CopyTo(unsigned char*) const>
   19104:	e1a00007 	mov	r0, r7
   19108:	e28d102a 	add	r1, sp, #42	; 0x2a
   1910c:	eb0012f6 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   19110:	e28d1004 	add	r1, sp, #4
   19114:	e5940004 	ldr	r0, [r4, #4]
   19118:	e3a0202a 	mov	r2, #42	; 0x2a
   1911c:	ebfffee3 	bl	18cb0 <CNetDeviceLayer::Send(void const*, unsigned int)>
   19120:	e28dd034 	add	sp, sp, #52	; 0x34
   19124:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   19128:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   1912c:	e30e0608 	movw	r0, #58888	; 0xe608
   19130:	e3401002 	movt	r1, #2
   19134:	e3400002 	movt	r0, #2
   19138:	e300212e 	movw	r2, #302	; 0x12e
   1913c:	eb002e96 	bl	24b9c <assertion_failed>
   19140:	e5940000 	ldr	r0, [r4]
   19144:	eaffffc8 	b	1906c <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x24>
   19148:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   1914c:	e30e0758 	movw	r0, #59224	; 0xe758
   19150:	e3401002 	movt	r1, #2
   19154:	e3400002 	movt	r0, #2
   19158:	e3a02e13 	mov	r2, #304	; 0x130
   1915c:	eb002e8e 	bl	24b9c <assertion_failed>
   19160:	eaffffc4 	b	19078 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x30>
   19164:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   19168:	e30e0848 	movw	r0, #59464	; 0xe848
   1916c:	e3401002 	movt	r1, #2
   19170:	e3400002 	movt	r0, #2
   19174:	e3002132 	movw	r2, #306	; 0x132
   19178:	eb002e87 	bl	24b9c <assertion_failed>
   1917c:	e5940004 	ldr	r0, [r4, #4]
   19180:	eaffffbf 	b	19084 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x3c>
   19184:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   19188:	e30e085c 	movw	r0, #59484	; 0xe85c
   1918c:	e3401002 	movt	r1, #2
   19190:	e3400002 	movt	r0, #2
   19194:	e3a02f4d 	mov	r2, #308	; 0x134
   19198:	eb002e7f 	bl	24b9c <assertion_failed>
   1919c:	eaffffbb 	b	19090 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)+0x48>

000191a0 <CARPHandler::Process()>:
   191a0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   191a4:	e1a04000 	mov	r4, r0
   191a8:	e5900000 	ldr	r0, [r0]
   191ac:	e24dd01c 	sub	sp, sp, #28
   191b0:	e3500000 	cmp	r0, #0
   191b4:	0a00006e 	beq	19374 <CARPHandler::Process()+0x1d4>
   191b8:	eb00118e 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   191bc:	e2506000 	subs	r6, r0, #0
   191c0:	0a000073 	beq	19394 <CARPHandler::Process()+0x1f4>
   191c4:	e59451a0 	ldr	r5, [r4, #416]	; 0x1a0
   191c8:	e3550000 	cmp	r5, #0
   191cc:	0a000077 	beq	193b0 <CARPHandler::Process()+0x210>
   191d0:	e5940008 	ldr	r0, [r4, #8]
   191d4:	e3500000 	cmp	r0, #0
   191d8:	0a00007b 	beq	193cc <CARPHandler::Process()+0x22c>
   191dc:	e2858018 	add	r8, r5, #24
   191e0:	e2857008 	add	r7, r5, #8
   191e4:	ea000000 	b	191ec <CARPHandler::Process()+0x4c>
   191e8:	e5940008 	ldr	r0, [r4, #8]
   191ec:	e3a02000 	mov	r2, #0
   191f0:	e1a01005 	mov	r1, r5
   191f4:	eb0013e0 	bl	1e17c <CNetQueue::Dequeue(void*, void**)>
   191f8:	e3500000 	cmp	r0, #0
   191fc:	0a00002a 	beq	192ac <CARPHandler::Process()+0x10c>
   19200:	e350001b 	cmp	r0, #27
   19204:	9afffff7 	bls	191e8 <CARPHandler::Process()+0x48>
   19208:	e1d530b0 	ldrh	r3, [r5]
   1920c:	e3530c01 	cmp	r3, #256	; 0x100
   19210:	1afffff4 	bne	191e8 <CARPHandler::Process()+0x48>
   19214:	e1d530b2 	ldrh	r3, [r5, #2]
   19218:	e3530008 	cmp	r3, #8
   1921c:	1afffff1 	bne	191e8 <CARPHandler::Process()+0x48>
   19220:	e5d53004 	ldrb	r3, [r5, #4]
   19224:	e3530006 	cmp	r3, #6
   19228:	1affffee 	bne	191e8 <CARPHandler::Process()+0x48>
   1922c:	e5d53005 	ldrb	r3, [r5, #5]
   19230:	e3530004 	cmp	r3, #4
   19234:	1affffeb 	bne	191e8 <CARPHandler::Process()+0x48>
   19238:	e1a00006 	mov	r0, r6
   1923c:	eb0012c6 	bl	1dd5c <CIPAddress::IsNull() const>
   19240:	e3500000 	cmp	r0, #0
   19244:	1affffe7 	bne	191e8 <CARPHandler::Process()+0x48>
   19248:	e1a01008 	mov	r1, r8
   1924c:	e1a00006 	mov	r0, r6
   19250:	eb001232 	bl	1db20 <CIPAddress::operator!=(unsigned char const*) const>
   19254:	e2509000 	subs	r9, r0, #0
   19258:	1affffe2 	bne	191e8 <CARPHandler::Process()+0x48>
   1925c:	e1a01007 	mov	r1, r7
   19260:	e28d000c 	add	r0, sp, #12
   19264:	ebffef08 	bl	14e8c <CMACAddress::CMACAddress(unsigned char const*)>
   19268:	e28d0004 	add	r0, sp, #4
   1926c:	e285100e 	add	r1, r5, #14
   19270:	eb00126a 	bl	1dc20 <CIPAddress::CIPAddress(unsigned char const*)>
   19274:	e1d530b6 	ldrh	r3, [r5, #6]
   19278:	e3530c01 	cmp	r3, #256	; 0x100
   1927c:	0a00005a 	beq	193ec <CARPHandler::Process()+0x24c>
   19280:	e3530c02 	cmp	r3, #512	; 0x200
   19284:	1a000003 	bne	19298 <CARPHandler::Process()+0xf8>
   19288:	e28d200c 	add	r2, sp, #12
   1928c:	e28d1004 	add	r1, sp, #4
   19290:	e1a00004 	mov	r0, r4
   19294:	ebffff09 	bl	18ec0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   19298:	e28d0004 	add	r0, sp, #4
   1929c:	eb0011ca 	bl	1d9cc <CIPAddress::~CIPAddress()>
   192a0:	e28d000c 	add	r0, sp, #12
   192a4:	ebffeebe 	bl	14da4 <CMACAddress::~CMACAddress()>
   192a8:	eaffffce 	b	191e8 <CARPHandler::Process()+0x48>
   192ac:	eb002694 	bl	22d04 <CTimer::Get()>
   192b0:	eb002443 	bl	223c4 <CTimer::GetTicks() const>
   192b4:	e3082889 	movw	r2, #34953	; 0x8889
   192b8:	e3482888 	movt	r2, #34952	; 0x8888
   192bc:	e1a06000 	mov	r6, r0
   192c0:	e308051f 	movw	r0, #34079	; 0x851f
   192c4:	e34501eb 	movt	r0, #20971	; 0x51eb
   192c8:	e0810096 	umull	r0, r1, r6, r0
   192cc:	e3a0003c 	mov	r0, #60	; 0x3c
   192d0:	e1a012a1 	lsr	r1, r1, #5
   192d4:	e0832291 	umull	r2, r3, r1, r2
   192d8:	e1a032a3 	lsr	r3, r3, #5
   192dc:	e0631390 	mls	r3, r0, r3, r1
   192e0:	e3530000 	cmp	r3, #0
   192e4:	1a00001a 	bne	19354 <CARPHandler::Process()+0x1b4>
   192e8:	e594019c 	ldr	r0, [r4, #412]	; 0x19c
   192ec:	e3500000 	cmp	r0, #0
   192f0:	1a00001c 	bne	19368 <CARPHandler::Process()+0x1c8>
   192f4:	e3a03000 	mov	r3, #0
   192f8:	e1a01004 	mov	r1, r4
   192fc:	e1a05003 	mov	r5, r3
   19300:	e3a0e014 	mov	lr, #20
   19304:	e30e7a60 	movw	r7, #60000	; 0xea60
   19308:	ea000003 	b	1931c <CARPHandler::Process()+0x17c>
   1930c:	e2833001 	add	r3, r3, #1
   19310:	e2811014 	add	r1, r1, #20
   19314:	e3530014 	cmp	r3, #20
   19318:	0a00000b 	beq	1934c <CARPHandler::Process()+0x1ac>
   1931c:	e022439e 	mla	r2, lr, r3, r4
   19320:	e5d2c00c 	ldrb	ip, [r2, #12]
   19324:	e35c0002 	cmp	ip, #2
   19328:	1afffff7 	bne	1930c <CARPHandler::Process()+0x16c>
   1932c:	e591c01c 	ldr	ip, [r1, #28]
   19330:	e2833001 	add	r3, r3, #1
   19334:	e2811014 	add	r1, r1, #20
   19338:	e087c00c 	add	ip, r7, ip
   1933c:	e156000c 	cmp	r6, ip
   19340:	85c2500c 	strbhi	r5, [r2, #12]
   19344:	e3530014 	cmp	r3, #20
   19348:	1afffff3 	bne	1931c <CARPHandler::Process()+0x17c>
   1934c:	e3500000 	cmp	r0, #0
   19350:	1a000001 	bne	1935c <CARPHandler::Process()+0x1bc>
   19354:	e28dd01c 	add	sp, sp, #28
   19358:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1935c:	eb00233c 	bl	22054 <LeaveCritical>
   19360:	e28dd01c 	add	sp, sp, #28
   19364:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   19368:	eb00230b 	bl	21f9c <EnterCritical>
   1936c:	e594019c 	ldr	r0, [r4, #412]	; 0x19c
   19370:	eaffffdf 	b	192f4 <CARPHandler::Process()+0x154>
   19374:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   19378:	e30e0608 	movw	r0, #58888	; 0xe608
   1937c:	e3401002 	movt	r1, #2
   19380:	e3400002 	movt	r0, #2
   19384:	e3a02057 	mov	r2, #87	; 0x57
   19388:	eb002e03 	bl	24b9c <assertion_failed>
   1938c:	e5940000 	ldr	r0, [r4]
   19390:	eaffff88 	b	191b8 <CARPHandler::Process()+0x18>
   19394:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   19398:	e30e0758 	movw	r0, #59224	; 0xe758
   1939c:	e3401002 	movt	r1, #2
   193a0:	e3400002 	movt	r0, #2
   193a4:	e3a02059 	mov	r2, #89	; 0x59
   193a8:	eb002dfb 	bl	24b9c <assertion_failed>
   193ac:	eaffff84 	b	191c4 <CARPHandler::Process()+0x24>
   193b0:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   193b4:	e30e0780 	movw	r0, #59264	; 0xe780
   193b8:	e3401002 	movt	r1, #2
   193bc:	e3400002 	movt	r0, #2
   193c0:	e3a0205c 	mov	r2, #92	; 0x5c
   193c4:	eb002df4 	bl	24b9c <assertion_failed>
   193c8:	eaffff80 	b	191d0 <CARPHandler::Process()+0x30>
   193cc:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   193d0:	e30e090c 	movw	r0, #59660	; 0xe90c
   193d4:	e3401002 	movt	r1, #2
   193d8:	e3400002 	movt	r0, #2
   193dc:	e3a0205f 	mov	r2, #95	; 0x5f
   193e0:	eb002ded 	bl	24b9c <assertion_failed>
   193e4:	e5940008 	ldr	r0, [r4, #8]
   193e8:	eaffff7b 	b	191dc <CARPHandler::Process()+0x3c>
   193ec:	e1a01009 	mov	r1, r9
   193f0:	e28d2004 	add	r2, sp, #4
   193f4:	e1a00004 	mov	r0, r4
   193f8:	e28d300c 	add	r3, sp, #12
   193fc:	ebffff11 	bl	19048 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)>
   19400:	e28d200c 	add	r2, sp, #12
   19404:	e28d1004 	add	r1, sp, #4
   19408:	e1a00004 	mov	r0, r4
   1940c:	ebfffed5 	bl	18f68 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   19410:	eaffffa0 	b	19298 <CARPHandler::Process()+0xf8>

00019414 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)>:
   19414:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19418:	e1a06000 	mov	r6, r0
   1941c:	e590019c 	ldr	r0, [r0, #412]	; 0x19c
   19420:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   19424:	e1a09001 	mov	r9, r1
   19428:	e3500000 	cmp	r0, #0
   1942c:	e58d2014 	str	r2, [sp, #20]
   19430:	1a000067 	bne	195d4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1c0>
   19434:	e3e0a000 	mvn	sl, #0
   19438:	e3a08014 	mov	r8, #20
   1943c:	e30e38e0 	movw	r3, #59616	; 0xe8e0
   19440:	e30b2130 	movw	r2, #45360	; 0xb130
   19444:	e3403002 	movt	r3, #2
   19448:	e3402002 	movt	r2, #2
   1944c:	e58d300c 	str	r3, [sp, #12]
   19450:	e286500d 	add	r5, r6, #13
   19454:	e58d2010 	str	r2, [sp, #16]
   19458:	e1a0b00a 	mov	fp, sl
   1945c:	e1a07008 	mov	r7, r8
   19460:	e3a04000 	mov	r4, #0
   19464:	ea000013 	b	194b8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0xa4>
   19468:	3a000056 	bcc	195c8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1b4>
   1946c:	e35c0002 	cmp	ip, #2
   19470:	e0452006 	sub	r2, r5, r6
   19474:	e1a01005 	mov	r1, r5
   19478:	e1a00009 	mov	r0, r9
   1947c:	e242200d 	sub	r2, r2, #13
   19480:	1a000021 	bne	1950c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0xf8>
   19484:	e595c00f 	ldr	ip, [r5, #15]
   19488:	e58d2008 	str	r2, [sp, #8]
   1948c:	e15c000a 	cmp	ip, sl
   19490:	31a0a00c 	movcc	sl, ip
   19494:	31a0b004 	movcc	fp, r4
   19498:	eb001183 	bl	1daac <CIPAddress::operator==(unsigned char const*) const>
   1949c:	e59d2008 	ldr	r2, [sp, #8]
   194a0:	e3500000 	cmp	r0, #0
   194a4:	1a00005d 	bne	19620 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x20c>
   194a8:	e2844001 	add	r4, r4, #1
   194ac:	e2855014 	add	r5, r5, #20
   194b0:	e3540014 	cmp	r4, #20
   194b4:	0a00001c 	beq	1952c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x118>
   194b8:	e0226497 	mla	r2, r7, r4, r6
   194bc:	e5d2c00c 	ldrb	ip, [r2, #12]
   194c0:	e6efc07c 	uxtb	ip, ip
   194c4:	e35c0001 	cmp	ip, #1
   194c8:	1affffe6 	bne	19468 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x54>
   194cc:	e1a01005 	mov	r1, r5
   194d0:	e1a00009 	mov	r0, r9
   194d4:	e58d2008 	str	r2, [sp, #8]
   194d8:	eb001173 	bl	1daac <CIPAddress::operator==(unsigned char const*) const>
   194dc:	e3500000 	cmp	r0, #0
   194e0:	0afffff0 	beq	194a8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x94>
   194e4:	eb002606 	bl	22d04 <CTimer::Get()>
   194e8:	eb0023b5 	bl	223c4 <CTimer::GetTicks() const>
   194ec:	e596219c 	ldr	r2, [r6, #412]	; 0x19c
   194f0:	e59d3008 	ldr	r3, [sp, #8]
   194f4:	e3520000 	cmp	r2, #0
   194f8:	e583001c 	str	r0, [r3, #28]
   194fc:	0a00002e 	beq	195bc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1a8>
   19500:	eb0022d3 	bl	22054 <LeaveCritical>
   19504:	e3a00000 	mov	r0, #0
   19508:	ea00002c 	b	195c0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1ac>
   1950c:	e3a020ce 	mov	r2, #206	; 0xce
   19510:	e59d100c 	ldr	r1, [sp, #12]
   19514:	e59d0010 	ldr	r0, [sp, #16]
   19518:	e2844001 	add	r4, r4, #1
   1951c:	eb002d9e 	bl	24b9c <assertion_failed>
   19520:	e3540014 	cmp	r4, #20
   19524:	e2855014 	add	r5, r5, #20
   19528:	1affffe2 	bne	194b8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0xa4>
   1952c:	e3580014 	cmp	r8, #20
   19530:	0a00002b 	beq	195e4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1d0>
   19534:	e3a01014 	mov	r1, #20
   19538:	e3a03001 	mov	r3, #1
   1953c:	e0010891 	mul	r1, r1, r8
   19540:	e1a00009 	mov	r0, r9
   19544:	e0864001 	add	r4, r6, r1
   19548:	e281100d 	add	r1, r1, #13
   1954c:	e0861001 	add	r1, r6, r1
   19550:	e5c4300c 	strb	r3, [r4, #12]
   19554:	eb0011e4 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   19558:	eb0025e9 	bl	22d04 <CTimer::Get()>
   1955c:	eb002398 	bl	223c4 <CTimer::GetTicks() const>
   19560:	e584001c 	str	r0, [r4, #28]
   19564:	eb0025e6 	bl	22d04 <CTimer::Get()>
   19568:	e1a03008 	mov	r3, r8
   1956c:	e58d6000 	str	r6, [sp]
   19570:	e3082d10 	movw	r2, #36112	; 0x8d10
   19574:	e3a01032 	mov	r1, #50	; 0x32
   19578:	e3402001 	movt	r2, #1
   1957c:	eb002419 	bl	225e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   19580:	e596319c 	ldr	r3, [r6, #412]	; 0x19c
   19584:	e3530000 	cmp	r3, #0
   19588:	e5840018 	str	r0, [r4, #24]
   1958c:	1a000012 	bne	195dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1c8>
   19590:	e28d001c 	add	r0, sp, #28
   19594:	ebffedff 	bl	14d98 <CMACAddress::CMACAddress()>
   19598:	e28d001c 	add	r0, sp, #28
   1959c:	ebffee3f 	bl	14ea0 <CMACAddress::SetBroadcast()>
   195a0:	e1a00006 	mov	r0, r6
   195a4:	e28d301c 	add	r3, sp, #28
   195a8:	e1a02009 	mov	r2, r9
   195ac:	e3a01001 	mov	r1, #1
   195b0:	ebfffea4 	bl	19048 <CARPHandler::SendPacket(int, CIPAddress const&, CMACAddress const&)>
   195b4:	e28d001c 	add	r0, sp, #28
   195b8:	ebffedf9 	bl	14da4 <CMACAddress::~CMACAddress()>
   195bc:	e3a00000 	mov	r0, #0
   195c0:	e28dd02c 	add	sp, sp, #44	; 0x2c
   195c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195c8:	e3580014 	cmp	r8, #20
   195cc:	01a08004 	moveq	r8, r4
   195d0:	eaffffb4 	b	194a8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x94>
   195d4:	eb002270 	bl	21f9c <EnterCritical>
   195d8:	eaffff95 	b	19434 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x20>
   195dc:	eb00229c 	bl	22054 <LeaveCritical>
   195e0:	eaffffea 	b	19590 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x17c>
   195e4:	e35b0013 	cmp	fp, #19
   195e8:	8a000005 	bhi	19604 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1f0>
   195ec:	e3a03014 	mov	r3, #20
   195f0:	e1a0800b 	mov	r8, fp
   195f4:	e02b6b93 	mla	fp, r3, fp, r6
   195f8:	e3a03000 	mov	r3, #0
   195fc:	e5cb300c 	strb	r3, [fp, #12]
   19600:	eaffffcb 	b	19534 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x120>
   19604:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   19608:	e30e0930 	movw	r0, #59696	; 0xe930
   1960c:	e3401002 	movt	r1, #2
   19610:	e3400002 	movt	r0, #2
   19614:	e3a020d6 	mov	r2, #214	; 0xd6
   19618:	eb002d5f 	bl	24b9c <assertion_failed>
   1961c:	eafffff2 	b	195ec <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1d8>
   19620:	e1a03002 	mov	r3, r2
   19624:	e59d2014 	ldr	r2, [sp, #20]
   19628:	e3520000 	cmp	r2, #0
   1962c:	0a00000f 	beq	19670 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x25c>
   19630:	e2833011 	add	r3, r3, #17
   19634:	e59d0014 	ldr	r0, [sp, #20]
   19638:	e0861003 	add	r1, r6, r3
   1963c:	ebffee00 	bl	14e44 <CMACAddress::Set(unsigned char const*)>
   19640:	eb0025af 	bl	22d04 <CTimer::Get()>
   19644:	eb00235e 	bl	223c4 <CTimer::GetTicks() const>
   19648:	e3a03014 	mov	r3, #20
   1964c:	e0246493 	mla	r4, r3, r4, r6
   19650:	e596319c 	ldr	r3, [r6, #412]	; 0x19c
   19654:	e3530000 	cmp	r3, #0
   19658:	e584001c 	str	r0, [r4, #28]
   1965c:	03a00001 	moveq	r0, #1
   19660:	0affffd6 	beq	195c0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1ac>
   19664:	eb00227a 	bl	22054 <LeaveCritical>
   19668:	e3a00001 	mov	r0, #1
   1966c:	eaffffd3 	b	195c0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x1ac>
   19670:	e30e18e0 	movw	r1, #59616	; 0xe8e0
   19674:	e30e091c 	movw	r0, #59676	; 0xe91c
   19678:	e3401002 	movt	r1, #2
   1967c:	e3400002 	movt	r0, #2
   19680:	e3a020c3 	mov	r2, #195	; 0xc3
   19684:	eb002d44 	bl	24b9c <assertion_failed>
   19688:	e59d3008 	ldr	r3, [sp, #8]
   1968c:	eaffffe7 	b	19630 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*)+0x21c>

00019690 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   19690:	e92d4010 	push	{r4, lr}
   19694:	e3510000 	cmp	r1, #0
   19698:	e59dc008 	ldr	ip, [sp, #8]
   1969c:	e1a04000 	mov	r4, r0
   196a0:	e5803008 	str	r3, [r0, #8]
   196a4:	e3a03000 	mov	r3, #0
   196a8:	e5801000 	str	r1, [r0]
   196ac:	e5802004 	str	r2, [r0, #4]
   196b0:	e580c00c 	str	ip, [r0, #12]
   196b4:	e5803010 	str	r3, [r0, #16]
   196b8:	0a000017 	beq	1971c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x8c>
   196bc:	e3520000 	cmp	r2, #0
   196c0:	0a00001d 	beq	1973c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0xac>
   196c4:	e5943008 	ldr	r3, [r4, #8]
   196c8:	e3530000 	cmp	r3, #0
   196cc:	0a000021 	beq	19758 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0xc8>
   196d0:	e594300c 	ldr	r3, [r4, #12]
   196d4:	e3530000 	cmp	r3, #0
   196d8:	0a000004 	beq	196f0 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x60>
   196dc:	e3a00d19 	mov	r0, #1600	; 0x640
   196e0:	eb002222 	bl	21f70 <operator new[](unsigned int)>
   196e4:	e5840010 	str	r0, [r4, #16]
   196e8:	e1a00004 	mov	r0, r4
   196ec:	e8bd8010 	pop	{r4, pc}
   196f0:	e3a0205e 	mov	r2, #94	; 0x5e
   196f4:	e30e1958 	movw	r1, #59736	; 0xe958
   196f8:	e30e0968 	movw	r0, #59752	; 0xe968
   196fc:	e3401002 	movt	r1, #2
   19700:	e3400002 	movt	r0, #2
   19704:	eb002d24 	bl	24b9c <assertion_failed>
   19708:	e3a00d19 	mov	r0, #1600	; 0x640
   1970c:	eb002217 	bl	21f70 <operator new[](unsigned int)>
   19710:	e5840010 	str	r0, [r4, #16]
   19714:	e1a00004 	mov	r0, r4
   19718:	e8bd8010 	pop	{r4, pc}
   1971c:	e3a0205b 	mov	r2, #91	; 0x5b
   19720:	e30e1958 	movw	r1, #59736	; 0xe958
   19724:	e30e0608 	movw	r0, #58888	; 0xe608
   19728:	e3401002 	movt	r1, #2
   1972c:	e3400002 	movt	r0, #2
   19730:	eb002d19 	bl	24b9c <assertion_failed>
   19734:	e5942004 	ldr	r2, [r4, #4]
   19738:	eaffffdf 	b	196bc <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x2c>
   1973c:	e30e1958 	movw	r1, #59736	; 0xe958
   19740:	e30e0698 	movw	r0, #59032	; 0xe698
   19744:	e3401002 	movt	r1, #2
   19748:	e3400002 	movt	r0, #2
   1974c:	e3a0205c 	mov	r2, #92	; 0x5c
   19750:	eb002d11 	bl	24b9c <assertion_failed>
   19754:	eaffffda 	b	196c4 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x34>
   19758:	e30e1958 	movw	r1, #59736	; 0xe958
   1975c:	e30e090c 	movw	r0, #59660	; 0xe90c
   19760:	e3401002 	movt	r1, #2
   19764:	e3400002 	movt	r0, #2
   19768:	e3a0205d 	mov	r2, #93	; 0x5d
   1976c:	eb002d0a 	bl	24b9c <assertion_failed>
   19770:	eaffffd6 	b	196d0 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x40>

00019774 <CICMPHandler::~CICMPHandler()>:
   19774:	e92d4010 	push	{r4, lr}
   19778:	e1a04000 	mov	r4, r0
   1977c:	e5900010 	ldr	r0, [r0, #16]
   19780:	e3500000 	cmp	r0, #0
   19784:	0a000000 	beq	1978c <CICMPHandler::~CICMPHandler()+0x18>
   19788:	eb0021fa 	bl	21f78 <operator delete[](void*)>
   1978c:	e1a00004 	mov	r0, r4
   19790:	e8bd8010 	pop	{r4, pc}

00019794 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   19794:	e3510002 	cmp	r1, #2
   19798:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1979c:	e1a07001 	mov	r7, r1
   197a0:	e24dd014 	sub	sp, sp, #20
   197a4:	e1a06000 	mov	r6, r0
   197a8:	e1a04002 	mov	r4, r2
   197ac:	e1a05003 	mov	r5, r3
   197b0:	ca00001d 	bgt	1982c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x98>
   197b4:	e3540000 	cmp	r4, #0
   197b8:	e5cd7000 	strb	r7, [sp]
   197bc:	0a000029 	beq	19868 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xd4>
   197c0:	e5d43009 	ldrb	r3, [r4, #9]
   197c4:	e3a02004 	mov	r2, #4
   197c8:	e2841010 	add	r1, r4, #16
   197cc:	e28d0002 	add	r0, sp, #2
   197d0:	e5cd3001 	strb	r3, [sp, #1]
   197d4:	eb002670 	bl	2319c <memcpy>
   197d8:	e284100c 	add	r1, r4, #12
   197dc:	e3a02004 	mov	r2, #4
   197e0:	e28d0006 	add	r0, sp, #6
   197e4:	eb00266c 	bl	2319c <memcpy>
   197e8:	e3550000 	cmp	r5, #0
   197ec:	0a000024 	beq	19884 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf0>
   197f0:	e596000c 	ldr	r0, [r6, #12]
   197f4:	e1d520b2 	ldrh	r2, [r5, #2]
   197f8:	e1d530b0 	ldrh	r3, [r5]
   197fc:	e3500000 	cmp	r0, #0
   19800:	e6bf2fb2 	rev16	r2, r2
   19804:	e1cd20ba 	strh	r2, [sp, #10]
   19808:	e6bf3fb3 	rev16	r3, r3
   1980c:	e1cd30bc 	strh	r3, [sp, #12]
   19810:	0a00000c 	beq	19848 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xb4>
   19814:	e3a03000 	mov	r3, #0
   19818:	e3a0200e 	mov	r2, #14
   1981c:	e1a0100d 	mov	r1, sp
   19820:	eb001204 	bl	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   19824:	e28dd014 	add	sp, sp, #20
   19828:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1982c:	e30e1958 	movw	r1, #59736	; 0xe958
   19830:	e30e0984 	movw	r0, #59780	; 0xe984
   19834:	e3401002 	movt	r1, #2
   19838:	e3400002 	movt	r0, #2
   1983c:	e3a020f1 	mov	r2, #241	; 0xf1
   19840:	eb002cd5 	bl	24b9c <assertion_failed>
   19844:	eaffffda 	b	197b4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x20>
   19848:	e30e1958 	movw	r1, #59736	; 0xe958
   1984c:	e30e0968 	movw	r0, #59752	; 0xe968
   19850:	e3401002 	movt	r1, #2
   19854:	e3400002 	movt	r0, #2
   19858:	e3a020ff 	mov	r2, #255	; 0xff
   1985c:	eb002cce 	bl	24b9c <assertion_failed>
   19860:	e596000c 	ldr	r0, [r6, #12]
   19864:	eaffffea 	b	19814 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x80>
   19868:	e30e1958 	movw	r1, #59736	; 0xe958
   1986c:	e30e09a4 	movw	r0, #59812	; 0xe9a4
   19870:	e3401002 	movt	r1, #2
   19874:	e3400002 	movt	r0, #2
   19878:	e3a020f6 	mov	r2, #246	; 0xf6
   1987c:	eb002cc6 	bl	24b9c <assertion_failed>
   19880:	eaffffce 	b	197c0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x2c>
   19884:	e30e1958 	movw	r1, #59736	; 0xe958
   19888:	e30e09b4 	movw	r0, #59828	; 0xe9b4
   1988c:	e3401002 	movt	r1, #2
   19890:	e3400002 	movt	r0, #2
   19894:	e3a020fb 	mov	r2, #251	; 0xfb
   19898:	eb002cbf 	bl	24b9c <assertion_failed>
   1989c:	eaffffd3 	b	197f0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x5c>

000198a0 <CICMPHandler::Process()>:
   198a0:	e5903008 	ldr	r3, [r0, #8]
   198a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198a8:	e3530000 	cmp	r3, #0
   198ac:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   198b0:	e1a05000 	mov	r5, r0
   198b4:	0a000088 	beq	19adc <CICMPHandler::Process()+0x23c>
   198b8:	e5951010 	ldr	r1, [r5, #16]
   198bc:	e3510000 	cmp	r1, #0
   198c0:	0a00008c 	beq	19af8 <CICMPHandler::Process()+0x258>
   198c4:	e30e7958 	movw	r7, #59736	; 0xe958
   198c8:	e30e96ec 	movw	r9, #59116	; 0xe6ec
   198cc:	e30e89cc 	movw	r8, #59852	; 0xe9cc
   198d0:	e3407002 	movt	r7, #2
   198d4:	e3409002 	movt	r9, #2
   198d8:	e3408002 	movt	r8, #2
   198dc:	ea000004 	b	198f4 <CICMPHandler::Process()+0x54>
   198e0:	e28d0018 	add	r0, sp, #24
   198e4:	eb001038 	bl	1d9cc <CIPAddress::~CIPAddress()>
   198e8:	e28d0010 	add	r0, sp, #16
   198ec:	eb001036 	bl	1d9cc <CIPAddress::~CIPAddress()>
   198f0:	e5951010 	ldr	r1, [r5, #16]
   198f4:	e28d200c 	add	r2, sp, #12
   198f8:	e5950008 	ldr	r0, [r5, #8]
   198fc:	eb00121e 	bl	1e17c <CNetQueue::Dequeue(void*, void**)>
   19900:	e2506000 	subs	r6, r0, #0
   19904:	0a000051 	beq	19a50 <CICMPHandler::Process()+0x1b0>
   19908:	e59d400c 	ldr	r4, [sp, #12]
   1990c:	e3540000 	cmp	r4, #0
   19910:	0a000056 	beq	19a70 <CICMPHandler::Process()+0x1d0>
   19914:	e5d43000 	ldrb	r3, [r4]
   19918:	e3530001 	cmp	r3, #1
   1991c:	0a000003 	beq	19930 <CICMPHandler::Process()+0x90>
   19920:	e3a02079 	mov	r2, #121	; 0x79
   19924:	e1a01007 	mov	r1, r7
   19928:	e1a00008 	mov	r0, r8
   1992c:	eb002c9a 	bl	24b9c <assertion_failed>
   19930:	e2841001 	add	r1, r4, #1
   19934:	e28d0010 	add	r0, sp, #16
   19938:	eb0010b8 	bl	1dc20 <CIPAddress::CIPAddress(unsigned char const*)>
   1993c:	e2841005 	add	r1, r4, #5
   19940:	e28d0018 	add	r0, sp, #24
   19944:	eb0010b5 	bl	1dc20 <CIPAddress::CIPAddress(unsigned char const*)>
   19948:	e1a00004 	mov	r0, r4
   1994c:	e3a01009 	mov	r1, #9
   19950:	eb002189 	bl	21f7c <operator delete(void*, unsigned int)>
   19954:	e5953000 	ldr	r3, [r5]
   19958:	e3530000 	cmp	r3, #0
   1995c:	0a00003d 	beq	19a58 <CICMPHandler::Process()+0x1b8>
   19960:	e28d0018 	add	r0, sp, #24
   19964:	eb00110b 	bl	1dd98 <CIPAddress::IsBroadcast() const>
   19968:	e3500000 	cmp	r0, #0
   1996c:	1affffdb 	bne	198e0 <CICMPHandler::Process()+0x40>
   19970:	e5950000 	ldr	r0, [r5]
   19974:	eb000fa9 	bl	1d820 <CNetConfig::GetBroadcastAddress() const>
   19978:	e1a01000 	mov	r1, r0
   1997c:	e28d0018 	add	r0, sp, #24
   19980:	eb001012 	bl	1d9d0 <CIPAddress::operator==(CIPAddress const&) const>
   19984:	e3500000 	cmp	r0, #0
   19988:	1affffd4 	bne	198e0 <CICMPHandler::Process()+0x40>
   1998c:	e3560007 	cmp	r6, #7
   19990:	9affffd2 	bls	198e0 <CICMPHandler::Process()+0x40>
   19994:	e5954010 	ldr	r4, [r5, #16]
   19998:	e1a01006 	mov	r1, r6
   1999c:	e1a00004 	mov	r0, r4
   199a0:	eb0012d0 	bl	1e4e8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   199a4:	e3500000 	cmp	r0, #0
   199a8:	1affffcc 	bne	198e0 <CICMPHandler::Process()+0x40>
   199ac:	e5d43000 	ldrb	r3, [r4]
   199b0:	e3530008 	cmp	r3, #8
   199b4:	0a000032 	beq	19a84 <CICMPHandler::Process()+0x1e4>
   199b8:	e356001c 	cmp	r6, #28
   199bc:	9affffc7 	bls	198e0 <CICMPHandler::Process()+0x40>
   199c0:	e595a010 	ldr	sl, [r5, #16]
   199c4:	e5da3008 	ldrb	r3, [sl, #8]
   199c8:	e203b00f 	and	fp, r3, #15
   199cc:	e24b2005 	sub	r2, fp, #5
   199d0:	e3520001 	cmp	r2, #1
   199d4:	8affffc1 	bhi	198e0 <CICMPHandler::Process()+0x40>
   199d8:	e1a03243 	asr	r3, r3, #4
   199dc:	e3530004 	cmp	r3, #4
   199e0:	1affffbe 	bne	198e0 <CICMPHandler::Process()+0x40>
   199e4:	e5950000 	ldr	r0, [r5]
   199e8:	eb000f82 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   199ec:	e28a1014 	add	r1, sl, #20
   199f0:	eb00104a 	bl	1db20 <CIPAddress::operator!=(unsigned char const*) const>
   199f4:	e3500000 	cmp	r0, #0
   199f8:	1affffb8 	bne	198e0 <CICMPHandler::Process()+0x40>
   199fc:	e1a0b10b 	lsl	fp, fp, #2
   19a00:	e28b3010 	add	r3, fp, #16
   19a04:	e1560003 	cmp	r6, r3
   19a08:	3affffb4 	bcc	198e0 <CICMPHandler::Process()+0x40>
   19a0c:	e5d43000 	ldrb	r3, [r4]
   19a10:	e28a6008 	add	r6, sl, #8
   19a14:	e086b00b 	add	fp, r6, fp
   19a18:	e2433003 	sub	r3, r3, #3
   19a1c:	e3530009 	cmp	r3, #9
   19a20:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   19a24:	eaffffad 	b	198e0 <CICMPHandler::Process()+0x40>
   19a28:	00019be0 	.word	0x00019be0
   19a2c:	000198e0 	.word	0x000198e0
   19a30:	00019b90 	.word	0x00019b90
   19a34:	000198e0 	.word	0x000198e0
   19a38:	000198e0 	.word	0x000198e0
   19a3c:	000198e0 	.word	0x000198e0
   19a40:	000198e0 	.word	0x000198e0
   19a44:	000198e0 	.word	0x000198e0
   19a48:	00019b54 	.word	0x00019b54
   19a4c:	00019b18 	.word	0x00019b18
   19a50:	e28dd02c 	add	sp, sp, #44	; 0x2c
   19a54:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a58:	e30e0608 	movw	r0, #58888	; 0xe608
   19a5c:	e3a02081 	mov	r2, #129	; 0x81
   19a60:	e3400002 	movt	r0, #2
   19a64:	e1a01007 	mov	r1, r7
   19a68:	eb002c4b 	bl	24b9c <assertion_failed>
   19a6c:	eaffffbb 	b	19960 <CICMPHandler::Process()+0xc0>
   19a70:	e3a02078 	mov	r2, #120	; 0x78
   19a74:	e1a01007 	mov	r1, r7
   19a78:	e1a00009 	mov	r0, r9
   19a7c:	eb002c46 	bl	24b9c <assertion_failed>
   19a80:	eaffffa3 	b	19914 <CICMPHandler::Process()+0x74>
   19a84:	e5d43001 	ldrb	r3, [r4, #1]
   19a88:	e3530000 	cmp	r3, #0
   19a8c:	1affff93 	bne	198e0 <CICMPHandler::Process()+0x40>
   19a90:	e5c43000 	strb	r3, [r4]
   19a94:	e1a01006 	mov	r1, r6
   19a98:	e5c43001 	strb	r3, [r4, #1]
   19a9c:	e5c43002 	strb	r3, [r4, #2]
   19aa0:	e5c43003 	strb	r3, [r4, #3]
   19aa4:	e5950010 	ldr	r0, [r5, #16]
   19aa8:	eb00128e 	bl	1e4e8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   19aac:	e5951004 	ldr	r1, [r5, #4]
   19ab0:	e3510000 	cmp	r1, #0
   19ab4:	e1c400b2 	strh	r0, [r4, #2]
   19ab8:	0a000057 	beq	19c1c <CICMPHandler::Process()+0x37c>
   19abc:	e5952010 	ldr	r2, [r5, #16]
   19ac0:	e1a03006 	mov	r3, r6
   19ac4:	e1a00001 	mov	r0, r1
   19ac8:	e3a01001 	mov	r1, #1
   19acc:	e58d1000 	str	r1, [sp]
   19ad0:	e28d1010 	add	r1, sp, #16
   19ad4:	ebfff8f6 	bl	17eb4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   19ad8:	eaffff80 	b	198e0 <CICMPHandler::Process()+0x40>
   19adc:	e30e1958 	movw	r1, #59736	; 0xe958
   19ae0:	e30e090c 	movw	r0, #59660	; 0xe90c
   19ae4:	e3401002 	movt	r1, #2
   19ae8:	e3400002 	movt	r0, #2
   19aec:	e3a02073 	mov	r2, #115	; 0x73
   19af0:	eb002c29 	bl	24b9c <assertion_failed>
   19af4:	eaffff6f 	b	198b8 <CICMPHandler::Process()+0x18>
   19af8:	e30e1958 	movw	r1, #59736	; 0xe958
   19afc:	e30c041c 	movw	r0, #50204	; 0xc41c
   19b00:	e3401002 	movt	r1, #2
   19b04:	e3400002 	movt	r0, #2
   19b08:	e3a02074 	mov	r2, #116	; 0x74
   19b0c:	eb002c22 	bl	24b9c <assertion_failed>
   19b10:	e5951010 	ldr	r1, [r5, #16]
   19b14:	eaffff6a 	b	198c4 <CICMPHandler::Process()+0x24>
   19b18:	eb002da4 	bl	251b0 <CLogger::Get()>
   19b1c:	e5d42001 	ldrb	r2, [r4, #1]
   19b20:	e30e3a24 	movw	r3, #59940	; 0xea24
   19b24:	e30e1950 	movw	r1, #59728	; 0xe950
   19b28:	e3403002 	movt	r3, #2
   19b2c:	e3401002 	movt	r1, #2
   19b30:	e58d2000 	str	r2, [sp]
   19b34:	e3a02002 	mov	r2, #2
   19b38:	eb002e78 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19b3c:	e1a0300b 	mov	r3, fp
   19b40:	e1a02006 	mov	r2, r6
   19b44:	e3a01002 	mov	r1, #2
   19b48:	e1a00005 	mov	r0, r5
   19b4c:	ebffff10 	bl	19794 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   19b50:	eaffff62 	b	198e0 <CICMPHandler::Process()+0x40>
   19b54:	eb002d95 	bl	251b0 <CLogger::Get()>
   19b58:	e5d42001 	ldrb	r2, [r4, #1]
   19b5c:	e30e3a10 	movw	r3, #59920	; 0xea10
   19b60:	e30e1950 	movw	r1, #59728	; 0xe950
   19b64:	e3403002 	movt	r3, #2
   19b68:	e3401002 	movt	r1, #2
   19b6c:	e58d2000 	str	r2, [sp]
   19b70:	e3a02002 	mov	r2, #2
   19b74:	eb002e69 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19b78:	e1a0300b 	mov	r3, fp
   19b7c:	e1a02006 	mov	r2, r6
   19b80:	e3a01001 	mov	r1, #1
   19b84:	e1a00005 	mov	r0, r5
   19b88:	ebffff01 	bl	19794 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   19b8c:	eaffff53 	b	198e0 <CICMPHandler::Process()+0x40>
   19b90:	e2841004 	add	r1, r4, #4
   19b94:	e28d0020 	add	r0, sp, #32
   19b98:	eb001020 	bl	1dc20 <CIPAddress::CIPAddress(unsigned char const*)>
   19b9c:	e5953004 	ldr	r3, [r5, #4]
   19ba0:	e3530000 	cmp	r3, #0
   19ba4:	0a00003d 	beq	19ca0 <CICMPHandler::Process()+0x400>
   19ba8:	e5950000 	ldr	r0, [r5]
   19bac:	eb000f11 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   19bb0:	e1a06000 	mov	r6, r0
   19bb4:	e5950000 	ldr	r0, [r5]
   19bb8:	eb000f12 	bl	1d808 <CNetConfig::GetNetMask() const>
   19bbc:	e1a01006 	mov	r1, r6
   19bc0:	e1a02000 	mov	r2, r0
   19bc4:	e28d0020 	add	r0, sp, #32
   19bc8:	eb00109d 	bl	1de44 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   19bcc:	e3500000 	cmp	r0, #0
   19bd0:	1a000018 	bne	19c38 <CICMPHandler::Process()+0x398>
   19bd4:	e28d0020 	add	r0, sp, #32
   19bd8:	eb000f7b 	bl	1d9cc <CIPAddress::~CIPAddress()>
   19bdc:	eaffff3f 	b	198e0 <CICMPHandler::Process()+0x40>
   19be0:	eb002d72 	bl	251b0 <CLogger::Get()>
   19be4:	e5d42001 	ldrb	r2, [r4, #1]
   19be8:	e30e39f0 	movw	r3, #59888	; 0xe9f0
   19bec:	e30e1950 	movw	r1, #59728	; 0xe950
   19bf0:	e3403002 	movt	r3, #2
   19bf4:	e3401002 	movt	r1, #2
   19bf8:	e58d2000 	str	r2, [sp]
   19bfc:	e3a02004 	mov	r2, #4
   19c00:	eb002e46 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19c04:	e1a0300b 	mov	r3, fp
   19c08:	e1a02006 	mov	r2, r6
   19c0c:	e3a01000 	mov	r1, #0
   19c10:	e1a00005 	mov	r0, r5
   19c14:	ebfffede 	bl	19794 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   19c18:	eaffff30 	b	198e0 <CICMPHandler::Process()+0x40>
   19c1c:	e1a01007 	mov	r1, r7
   19c20:	e30e0698 	movw	r0, #59032	; 0xe698
   19c24:	e3a0209e 	mov	r2, #158	; 0x9e
   19c28:	e3400002 	movt	r0, #2
   19c2c:	eb002bda 	bl	24b9c <assertion_failed>
   19c30:	e5951004 	ldr	r1, [r5, #4]
   19c34:	eaffffa0 	b	19abc <CICMPHandler::Process()+0x21c>
   19c38:	e28aa018 	add	sl, sl, #24
   19c3c:	e5950004 	ldr	r0, [r5, #4]
   19c40:	e1a0100a 	mov	r1, sl
   19c44:	ebfff9e5 	bl	183e0 <CNetworkLayer::GetGateway(unsigned char const*) const>
   19c48:	e1a01000 	mov	r1, r0
   19c4c:	e28d0010 	add	r0, sp, #16
   19c50:	eb000fb2 	bl	1db20 <CIPAddress::operator!=(unsigned char const*) const>
   19c54:	e3500000 	cmp	r0, #0
   19c58:	1affffdd 	bne	19bd4 <CICMPHandler::Process()+0x334>
   19c5c:	eb002d53 	bl	251b0 <CLogger::Get()>
   19c60:	e5d42001 	ldrb	r2, [r4, #1]
   19c64:	e30e3a3c 	movw	r3, #59964	; 0xea3c
   19c68:	e30e1950 	movw	r1, #59728	; 0xe950
   19c6c:	e3403002 	movt	r3, #2
   19c70:	e3401002 	movt	r1, #2
   19c74:	e58d2000 	str	r2, [sp]
   19c78:	e3a02004 	mov	r2, #4
   19c7c:	eb002e27 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19c80:	e28d0020 	add	r0, sp, #32
   19c84:	e5954004 	ldr	r4, [r5, #4]
   19c88:	eb00100a 	bl	1dcb8 <CIPAddress::Get() const>
   19c8c:	e1a0100a 	mov	r1, sl
   19c90:	e1a02000 	mov	r2, r0
   19c94:	e1a00004 	mov	r0, r4
   19c98:	ebfff9ce 	bl	183d8 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   19c9c:	eaffffcc 	b	19bd4 <CICMPHandler::Process()+0x334>
   19ca0:	e30e0698 	movw	r0, #59032	; 0xe698
   19ca4:	e3a020cd 	mov	r2, #205	; 0xcd
   19ca8:	e3400002 	movt	r0, #2
   19cac:	e1a01007 	mov	r1, r7
   19cb0:	eb002bb9 	bl	24b9c <assertion_failed>
   19cb4:	eaffffbb 	b	19ba8 <CICMPHandler::Process()+0x308>

00019cb8 <CRouteCache::CRouteCache()>:
   19cb8:	e3a02064 	mov	r2, #100	; 0x64
   19cbc:	e92d4010 	push	{r4, lr}
   19cc0:	e1a01002 	mov	r1, r2
   19cc4:	e1a04000 	mov	r4, r0
   19cc8:	eb003c65 	bl	28e64 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   19ccc:	e1a00004 	mov	r0, r4
   19cd0:	e8bd8010 	pop	{r4, pc}

00019cd4 <CRouteCache::Flush()>:
   19cd4:	e92d4070 	push	{r4, r5, r6, lr}
   19cd8:	e1a05000 	mov	r5, r0
   19cdc:	eb003c92 	bl	28f2c <CPtrArray::GetCount() const>
   19ce0:	e3500000 	cmp	r0, #0
   19ce4:	08bd8070 	popeq	{r4, r5, r6, pc}
   19ce8:	e2404001 	sub	r4, r0, #1
   19cec:	e1a01004 	mov	r1, r4
   19cf0:	e1a00005 	mov	r0, r5
   19cf4:	eb003c8e 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   19cf8:	e3a01008 	mov	r1, #8
   19cfc:	e2444001 	sub	r4, r4, #1
   19d00:	e5900000 	ldr	r0, [r0]
   19d04:	eb00209c 	bl	21f7c <operator delete(void*, unsigned int)>
   19d08:	e1a00005 	mov	r0, r5
   19d0c:	eb003d2c 	bl	291c4 <CPtrArray::RemoveLast()>
   19d10:	e3740001 	cmn	r4, #1
   19d14:	1afffff4 	bne	19cec <CRouteCache::Flush()+0x18>
   19d18:	e8bd8070 	pop	{r4, r5, r6, pc}

00019d1c <CRouteCache::~CRouteCache()>:
   19d1c:	e92d4010 	push	{r4, lr}
   19d20:	e1a04000 	mov	r4, r0
   19d24:	ebffffea 	bl	19cd4 <CRouteCache::Flush()>
   19d28:	e1a00004 	mov	r0, r4
   19d2c:	eb003c73 	bl	28f00 <CPtrArray::~CPtrArray()>
   19d30:	e1a00004 	mov	r0, r4
   19d34:	e8bd8010 	pop	{r4, pc}

00019d38 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   19d38:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d3c:	e2517000 	subs	r7, r1, #0
   19d40:	e1a06000 	mov	r6, r0
   19d44:	e1a0b002 	mov	fp, r2
   19d48:	0a000036 	beq	19e28 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xf0>
   19d4c:	e35b0000 	cmp	fp, #0
   19d50:	0a00002d 	beq	19e0c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   19d54:	e1a00006 	mov	r0, r6
   19d58:	eb003c73 	bl	28f2c <CPtrArray::GetCount() const>
   19d5c:	e2508000 	subs	r8, r0, #0
   19d60:	0a00001b 	beq	19dd4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x9c>
   19d64:	e30eaa4c 	movw	sl, #59980	; 0xea4c
   19d68:	e30e9a7c 	movw	r9, #60028	; 0xea7c
   19d6c:	e340a002 	movt	sl, #2
   19d70:	e3409002 	movt	r9, #2
   19d74:	e3a04000 	mov	r4, #0
   19d78:	ea000007 	b	19d9c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x64>
   19d7c:	e3a02004 	mov	r2, #4
   19d80:	e1a01007 	mov	r1, r7
   19d84:	e1a00005 	mov	r0, r5
   19d88:	eb0023f4 	bl	22d60 <memcmp>
   19d8c:	e3500000 	cmp	r0, #0
   19d90:	0a00000d 	beq	19dcc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x94>
   19d94:	e1580004 	cmp	r8, r4
   19d98:	0a00000d 	beq	19dd4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x9c>
   19d9c:	e1a01004 	mov	r1, r4
   19da0:	e1a00006 	mov	r0, r6
   19da4:	eb003c62 	bl	28f34 <CPtrArray::operator[](unsigned int)>
   19da8:	e2844001 	add	r4, r4, #1
   19dac:	e5905000 	ldr	r5, [r0]
   19db0:	e3550000 	cmp	r5, #0
   19db4:	1afffff0 	bne	19d7c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x44>
   19db8:	e3a0203e 	mov	r2, #62	; 0x3e
   19dbc:	e1a0100a 	mov	r1, sl
   19dc0:	e1a00009 	mov	r0, r9
   19dc4:	eb002b74 	bl	24b9c <assertion_failed>
   19dc8:	eaffffeb 	b	19d7c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x44>
   19dcc:	e3550000 	cmp	r5, #0
   19dd0:	1a000008 	bne	19df8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xc0>
   19dd4:	e3a00008 	mov	r0, #8
   19dd8:	eb002063 	bl	21f6c <operator new(unsigned int)>
   19ddc:	e1a01007 	mov	r1, r7
   19de0:	e3a02004 	mov	r2, #4
   19de4:	e1a05000 	mov	r5, r0
   19de8:	eb0024eb 	bl	2319c <memcpy>
   19dec:	e1a01005 	mov	r1, r5
   19df0:	e1a00006 	mov	r0, r6
   19df4:	eb003ca2 	bl	29084 <CPtrArray::Append(void*)>
   19df8:	e1a0100b 	mov	r1, fp
   19dfc:	e2850004 	add	r0, r5, #4
   19e00:	e3a02004 	mov	r2, #4
   19e04:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e08:	ea0024e3 	b	2319c <memcpy>
   19e0c:	e30e1a4c 	movw	r1, #59980	; 0xea4c
   19e10:	e30e0a6c 	movw	r0, #60012	; 0xea6c
   19e14:	e3401002 	movt	r1, #2
   19e18:	e3400002 	movt	r0, #2
   19e1c:	e3a02036 	mov	r2, #54	; 0x36
   19e20:	eb002b5d 	bl	24b9c <assertion_failed>
   19e24:	eaffffca 	b	19d54 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x1c>
   19e28:	e30e1a4c 	movw	r1, #59980	; 0xea4c
   19e2c:	e30e0a5c 	movw	r0, #59996	; 0xea5c
   19e30:	e3401002 	movt	r1, #2
   19e34:	e3400002 	movt	r0, #2
   19e38:	e3a02035 	mov	r2, #53	; 0x35
   19e3c:	eb002b56 	bl	24b9c <assertion_failed>
   19e40:	eaffffc1 	b	19d4c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x14>

00019e44 <CRouteCache::GetRoute(unsigned char const*) const>:
   19e44:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e48:	e2517000 	subs	r7, r1, #0
   19e4c:	e1a06000 	mov	r6, r0
   19e50:	0a000022 	beq	19ee0 <CRouteCache::GetRoute(unsigned char const*) const+0x9c>
   19e54:	e1a00006 	mov	r0, r6
   19e58:	eb003c33 	bl	28f2c <CPtrArray::GetCount() const>
   19e5c:	e2508000 	subs	r8, r0, #0
   19e60:	0a000018 	beq	19ec8 <CRouteCache::GetRoute(unsigned char const*) const+0x84>
   19e64:	e30eaa4c 	movw	sl, #59980	; 0xea4c
   19e68:	e30e9a7c 	movw	r9, #60028	; 0xea7c
   19e6c:	e340a002 	movt	sl, #2
   19e70:	e3409002 	movt	r9, #2
   19e74:	e3a04000 	mov	r4, #0
   19e78:	ea000007 	b	19e9c <CRouteCache::GetRoute(unsigned char const*) const+0x58>
   19e7c:	e3a02004 	mov	r2, #4
   19e80:	e1a01007 	mov	r1, r7
   19e84:	e1a00005 	mov	r0, r5
   19e88:	eb0023b4 	bl	22d60 <memcmp>
   19e8c:	e3500000 	cmp	r0, #0
   19e90:	0a00000e 	beq	19ed0 <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   19e94:	e1580004 	cmp	r8, r4
   19e98:	0a00000a 	beq	19ec8 <CRouteCache::GetRoute(unsigned char const*) const+0x84>
   19e9c:	e1a01004 	mov	r1, r4
   19ea0:	e1a00006 	mov	r0, r6
   19ea4:	eb003c4c 	bl	28fdc <CPtrArray::operator[](unsigned int) const>
   19ea8:	e2844001 	add	r4, r4, #1
   19eac:	e2505000 	subs	r5, r0, #0
   19eb0:	1afffff1 	bne	19e7c <CRouteCache::GetRoute(unsigned char const*) const+0x38>
   19eb4:	e3a0205d 	mov	r2, #93	; 0x5d
   19eb8:	e1a0100a 	mov	r1, sl
   19ebc:	e1a00009 	mov	r0, r9
   19ec0:	eb002b35 	bl	24b9c <assertion_failed>
   19ec4:	eaffffec 	b	19e7c <CRouteCache::GetRoute(unsigned char const*) const+0x38>
   19ec8:	e3a00000 	mov	r0, #0
   19ecc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ed0:	e2955004 	adds	r5, r5, #4
   19ed4:	0a000008 	beq	19efc <CRouteCache::GetRoute(unsigned char const*) const+0xb8>
   19ed8:	e1a00005 	mov	r0, r5
   19edc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ee0:	e30e1a4c 	movw	r1, #59980	; 0xea4c
   19ee4:	e30e0a5c 	movw	r0, #59996	; 0xea5c
   19ee8:	e3401002 	movt	r1, #2
   19eec:	e3400002 	movt	r0, #2
   19ef0:	e3a02057 	mov	r2, #87	; 0x57
   19ef4:	eb002b28 	bl	24b9c <assertion_failed>
   19ef8:	eaffffd5 	b	19e54 <CRouteCache::GetRoute(unsigned char const*) const+0x10>
   19efc:	e3a02061 	mov	r2, #97	; 0x61
   19f00:	e30e1a4c 	movw	r1, #59980	; 0xea4c
   19f04:	e30e0a88 	movw	r0, #60040	; 0xea88
   19f08:	e3401002 	movt	r1, #2
   19f0c:	e3400002 	movt	r0, #2
   19f10:	eb002b21 	bl	24b9c <assertion_failed>
   19f14:	e1a00005 	mov	r0, r5
   19f18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00019f1c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   19f1c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f20:	e1a04000 	mov	r4, r0
   19f24:	e59fc0ac 	ldr	ip, [pc, #172]	; 19fd8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xbc>
   19f28:	e1a07001 	mov	r7, r1
   19f2c:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   19f30:	e1a01003 	mov	r1, r3
   19f34:	e1dd92b0 	ldrh	r9, [sp, #32]
   19f38:	e280000c 	add	r0, r0, #12
   19f3c:	e1dd82b4 	ldrh	r8, [sp, #36]	; 0x24
   19f40:	e1a05003 	mov	r5, r3
   19f44:	e5002004 	str	r2, [r0, #-4]
   19f48:	e584c000 	str	ip, [r4]
   19f4c:	e5847004 	str	r7, [r4, #4]
   19f50:	eb000e8b 	bl	1d984 <CIPAddress::CIPAddress(CIPAddress const&)>
   19f54:	e1c491b4 	strh	r9, [r4, #20]
   19f58:	e1c481b6 	strh	r8, [r4, #22]
   19f5c:	e1a00007 	mov	r0, r7
   19f60:	e5846018 	str	r6, [r4, #24]
   19f64:	eb000e23 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   19f68:	e1a03006 	mov	r3, r6
   19f6c:	e1a02005 	mov	r2, r5
   19f70:	e1a01000 	mov	r1, r0
   19f74:	e284001c 	add	r0, r4, #28
   19f78:	eb0010d9 	bl	1e2e4 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   19f7c:	e5943004 	ldr	r3, [r4, #4]
   19f80:	e3530000 	cmp	r3, #0
   19f84:	0a00000c 	beq	19fbc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19f88:	e5943008 	ldr	r3, [r4, #8]
   19f8c:	e3530000 	cmp	r3, #0
   19f90:	0a000001 	beq	19f9c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x80>
   19f94:	e1a00004 	mov	r0, r4
   19f98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f9c:	e3a02026 	mov	r2, #38	; 0x26
   19fa0:	e30e1ae0 	movw	r1, #60128	; 0xeae0
   19fa4:	e30e0698 	movw	r0, #59032	; 0xe698
   19fa8:	e3401002 	movt	r1, #2
   19fac:	e3400002 	movt	r0, #2
   19fb0:	eb002af9 	bl	24b9c <assertion_failed>
   19fb4:	e1a00004 	mov	r0, r4
   19fb8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19fbc:	e30e1ae0 	movw	r1, #60128	; 0xeae0
   19fc0:	e30e0608 	movw	r0, #58888	; 0xe608
   19fc4:	e3401002 	movt	r1, #2
   19fc8:	e3400002 	movt	r0, #2
   19fcc:	e3a02025 	mov	r2, #37	; 0x25
   19fd0:	eb002af1 	bl	24b9c <assertion_failed>
   19fd4:	eaffffeb 	b	19f88 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   19fd8:	0002eaa8 	.word	0x0002eaa8

00019fdc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   19fdc:	e59fc0a0 	ldr	ip, [pc, #160]	; 1a084 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0xa8>
   19fe0:	e92d4070 	push	{r4, r5, r6, lr}
   19fe4:	e1a04000 	mov	r4, r0
   19fe8:	e5802008 	str	r2, [r0, #8]
   19fec:	e1a05001 	mov	r5, r1
   19ff0:	e5841004 	str	r1, [r4, #4]
   19ff4:	e280000c 	add	r0, r0, #12
   19ff8:	e584c000 	str	ip, [r4]
   19ffc:	e1a06003 	mov	r6, r3
   1a000:	eb000e58 	bl	1d968 <CIPAddress::CIPAddress()>
   1a004:	e3a03000 	mov	r3, #0
   1a008:	e1c461b6 	strh	r6, [r4, #22]
   1a00c:	e1a00005 	mov	r0, r5
   1a010:	e1c431b4 	strh	r3, [r4, #20]
   1a014:	eb000df7 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   1a018:	e59d2010 	ldr	r2, [sp, #16]
   1a01c:	e1a01000 	mov	r1, r0
   1a020:	e284001c 	add	r0, r4, #28
   1a024:	eb0010a2 	bl	1e2b4 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   1a028:	e5943004 	ldr	r3, [r4, #4]
   1a02c:	e3530000 	cmp	r3, #0
   1a030:	0a00000c 	beq	1a068 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1a034:	e5943008 	ldr	r3, [r4, #8]
   1a038:	e3530000 	cmp	r3, #0
   1a03c:	0a000001 	beq	1a048 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x6c>
   1a040:	e1a00004 	mov	r0, r4
   1a044:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a048:	e3a02034 	mov	r2, #52	; 0x34
   1a04c:	e30e1ae0 	movw	r1, #60128	; 0xeae0
   1a050:	e30e0698 	movw	r0, #59032	; 0xe698
   1a054:	e3401002 	movt	r1, #2
   1a058:	e3400002 	movt	r0, #2
   1a05c:	eb002ace 	bl	24b9c <assertion_failed>
   1a060:	e1a00004 	mov	r0, r4
   1a064:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a068:	e30e1ae0 	movw	r1, #60128	; 0xeae0
   1a06c:	e30e0608 	movw	r0, #58888	; 0xe608
   1a070:	e3401002 	movt	r1, #2
   1a074:	e3400002 	movt	r0, #2
   1a078:	e3a02033 	mov	r2, #51	; 0x33
   1a07c:	eb002ac6 	bl	24b9c <assertion_failed>
   1a080:	eaffffeb 	b	1a034 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x58>
   1a084:	0002eaa8 	.word	0x0002eaa8

0001a088 <CNetConnection::~CNetConnection()>:
   1a088:	e59f2028 	ldr	r2, [pc, #40]	; 1a0b8 <CNetConnection::~CNetConnection()+0x30>
   1a08c:	e3a03000 	mov	r3, #0
   1a090:	e92d4010 	push	{r4, lr}
   1a094:	e1a04000 	mov	r4, r0
   1a098:	e5843008 	str	r3, [r4, #8]
   1a09c:	e280001c 	add	r0, r0, #28
   1a0a0:	e884000c 	stm	r4, {r2, r3}
   1a0a4:	eb00109f 	bl	1e328 <CChecksumCalculator::~CChecksumCalculator()>
   1a0a8:	e284000c 	add	r0, r4, #12
   1a0ac:	eb000e46 	bl	1d9cc <CIPAddress::~CIPAddress()>
   1a0b0:	e1a00004 	mov	r0, r4
   1a0b4:	e8bd8010 	pop	{r4, pc}
   1a0b8:	0002eaa8 	.word	0x0002eaa8

0001a0bc <CNetConnection::~CNetConnection()>:
   1a0bc:	e59f2034 	ldr	r2, [pc, #52]	; 1a0f8 <CNetConnection::~CNetConnection()+0x3c>
   1a0c0:	e3a03000 	mov	r3, #0
   1a0c4:	e92d4010 	push	{r4, lr}
   1a0c8:	e1a04000 	mov	r4, r0
   1a0cc:	e5843008 	str	r3, [r4, #8]
   1a0d0:	e280001c 	add	r0, r0, #28
   1a0d4:	e884000c 	stm	r4, {r2, r3}
   1a0d8:	eb001092 	bl	1e328 <CChecksumCalculator::~CChecksumCalculator()>
   1a0dc:	e284000c 	add	r0, r4, #12
   1a0e0:	eb000e39 	bl	1d9cc <CIPAddress::~CIPAddress()>
   1a0e4:	e1a00004 	mov	r0, r4
   1a0e8:	e3a0102c 	mov	r1, #44	; 0x2c
   1a0ec:	eb001fa2 	bl	21f7c <operator delete(void*, unsigned int)>
   1a0f0:	e1a00004 	mov	r0, r4
   1a0f4:	e8bd8010 	pop	{r4, pc}
   1a0f8:	0002eaa8 	.word	0x0002eaa8

0001a0fc <CNetConnection::GetForeignIP() const>:
   1a0fc:	e280000c 	add	r0, r0, #12
   1a100:	ea000eec 	b	1dcb8 <CIPAddress::Get() const>

0001a104 <CNetConnection::GetOwnPort() const>:
   1a104:	e1d031b6 	ldrh	r3, [r0, #22]
   1a108:	e3530000 	cmp	r3, #0
   1a10c:	0a000001 	beq	1a118 <CNetConnection::GetOwnPort() const+0x14>
   1a110:	e1a00003 	mov	r0, r3
   1a114:	e12fff1e 	bx	lr
   1a118:	e92d4010 	push	{r4, lr}
   1a11c:	e3a02044 	mov	r2, #68	; 0x44
   1a120:	e1a04000 	mov	r4, r0
   1a124:	e30e1ae0 	movw	r1, #60128	; 0xeae0
   1a128:	e30e0af4 	movw	r0, #60148	; 0xeaf4
   1a12c:	e3401002 	movt	r1, #2
   1a130:	e3400002 	movt	r0, #2
   1a134:	eb002a98 	bl	24b9c <assertion_failed>
   1a138:	e1d431b6 	ldrh	r3, [r4, #22]
   1a13c:	e1a00003 	mov	r0, r3
   1a140:	e8bd8010 	pop	{r4, pc}

0001a144 <CNetConnection::GetProtocol() const>:
   1a144:	e5900018 	ldr	r0, [r0, #24]
   1a148:	e12fff1e 	bx	lr

0001a14c <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   1a14c:	e3e00000 	mvn	r0, #0
   1a150:	e12fff1e 	bx	lr

0001a154 <CUDPConnection::Close()>:
   1a154:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1a158:	e3530000 	cmp	r3, #0
   1a15c:	13a03000 	movne	r3, #0
   1a160:	1580302c 	strne	r3, [r0, #44]	; 0x2c
   1a164:	11a00003 	movne	r0, r3
   1a168:	03e00000 	mvneq	r0, #0
   1a16c:	e12fff1e 	bx	lr

0001a170 <CUDPConnection::SetOptionBroadcast(int)>:
   1a170:	e5801048 	str	r1, [r0, #72]	; 0x48
   1a174:	e3a00000 	mov	r0, #0
   1a178:	e12fff1e 	bx	lr

0001a17c <CUDPConnection::IsTerminated() const>:
   1a17c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a180:	e16f0f10 	clz	r0, r0
   1a184:	e1a002a0 	lsr	r0, r0, #5
   1a188:	e12fff1e 	bx	lr

0001a18c <CUDPConnection::Process()>:
   1a18c:	e12fff1e 	bx	lr

0001a190 <CUDPConnection::~CUDPConnection()>:
   1a190:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   1a194:	e59f3048 	ldr	r3, [pc, #72]	; 1a1e4 <CUDPConnection::~CUDPConnection()+0x54>
   1a198:	e3520000 	cmp	r2, #0
   1a19c:	e92d4010 	push	{r4, lr}
   1a1a0:	e1a04000 	mov	r4, r0
   1a1a4:	e5803000 	str	r3, [r0]
   1a1a8:	0a000005 	beq	1a1c4 <CUDPConnection::~CUDPConnection()+0x34>
   1a1ac:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1a1b0:	e30e0b58 	movw	r0, #60248	; 0xeb58
   1a1b4:	e3401002 	movt	r1, #2
   1a1b8:	e3400002 	movt	r0, #2
   1a1bc:	e3a02044 	mov	r2, #68	; 0x44
   1a1c0:	eb002a75 	bl	24b9c <assertion_failed>
   1a1c4:	e2840040 	add	r0, r4, #64	; 0x40
   1a1c8:	eb001a61 	bl	20b54 <CSynchronizationEvent::~CSynchronizationEvent()>
   1a1cc:	e2840034 	add	r0, r4, #52	; 0x34
   1a1d0:	eb000f93 	bl	1e024 <CNetQueue::~CNetQueue()>
   1a1d4:	e1a00004 	mov	r0, r4
   1a1d8:	ebffffaa 	bl	1a088 <CNetConnection::~CNetConnection()>
   1a1dc:	e1a00004 	mov	r0, r4
   1a1e0:	e8bd8010 	pop	{r4, pc}
   1a1e4:	0002eb0c 	.word	0x0002eb0c

0001a1e8 <CUDPConnection::~CUDPConnection()>:
   1a1e8:	e92d4010 	push	{r4, lr}
   1a1ec:	e1a04000 	mov	r4, r0
   1a1f0:	ebffffe6 	bl	1a190 <CUDPConnection::~CUDPConnection()>
   1a1f4:	e1a00004 	mov	r0, r4
   1a1f8:	e3a01050 	mov	r1, #80	; 0x50
   1a1fc:	eb001f5e 	bl	21f7c <operator delete(void*, unsigned int)>
   1a200:	e1a00004 	mov	r0, r4
   1a204:	e8bd8010 	pop	{r4, pc}

0001a208 <CUDPConnection::Send(void const*, unsigned int, int)>:
   1a208:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1a20c:	e24dd00c 	sub	sp, sp, #12
   1a210:	e590704c 	ldr	r7, [r0, #76]	; 0x4c
   1a214:	e3570000 	cmp	r7, #0
   1a218:	b3a03000 	movlt	r3, #0
   1a21c:	b580304c 	strlt	r3, [r0, #76]	; 0x4c
   1a220:	ba000044 	blt	1a338 <CUDPConnection::Send(void const*, unsigned int, int)+0x130>
   1a224:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   1a228:	e35c0000 	cmp	ip, #0
   1a22c:	0a000048 	beq	1a354 <CUDPConnection::Send(void const*, unsigned int, int)+0x14c>
   1a230:	e3d33040 	bics	r3, r3, #64	; 0x40
   1a234:	1a000046 	bne	1a354 <CUDPConnection::Send(void const*, unsigned int, int)+0x14c>
   1a238:	e242c001 	sub	ip, r2, #1
   1a23c:	e3003637 	movw	r3, #1591	; 0x637
   1a240:	e15c0003 	cmp	ip, r3
   1a244:	e2828008 	add	r8, r2, #8
   1a248:	8a000041 	bhi	1a354 <CUDPConnection::Send(void const*, unsigned int, int)+0x14c>
   1a24c:	e5903004 	ldr	r3, [r0, #4]
   1a250:	e1a07002 	mov	r7, r2
   1a254:	e1a05001 	mov	r5, r1
   1a258:	e1a04000 	mov	r4, r0
   1a25c:	e3530000 	cmp	r3, #0
   1a260:	0a000051 	beq	1a3ac <CUDPConnection::Send(void const*, unsigned int, int)+0x1a4>
   1a264:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   1a268:	e284900c 	add	r9, r4, #12
   1a26c:	e3530000 	cmp	r3, #0
   1a270:	0a000033 	beq	1a344 <CUDPConnection::Send(void const*, unsigned int, int)+0x13c>
   1a274:	e1a00008 	mov	r0, r8
   1a278:	eb001f3c 	bl	21f70 <operator new[](unsigned int)>
   1a27c:	e1d421b6 	ldrh	r2, [r4, #22]
   1a280:	e1d431b4 	ldrh	r3, [r4, #20]
   1a284:	e3550000 	cmp	r5, #0
   1a288:	e6bf2fb2 	rev16	r2, r2
   1a28c:	e6bf3fb3 	rev16	r3, r3
   1a290:	e1a06000 	mov	r6, r0
   1a294:	e1c030b2 	strh	r3, [r0, #2]
   1a298:	e1c020b0 	strh	r2, [r0]
   1a29c:	e6bf3fb8 	rev16	r3, r8
   1a2a0:	e1c030b4 	strh	r3, [r0, #4]
   1a2a4:	e3a03000 	mov	r3, #0
   1a2a8:	e5c03006 	strb	r3, [r0, #6]
   1a2ac:	e5c03007 	strb	r3, [r0, #7]
   1a2b0:	0a000044 	beq	1a3c8 <CUDPConnection::Send(void const*, unsigned int, int)+0x1c0>
   1a2b4:	e1a02007 	mov	r2, r7
   1a2b8:	e1a01005 	mov	r1, r5
   1a2bc:	e2860008 	add	r0, r6, #8
   1a2c0:	e284501c 	add	r5, r4, #28
   1a2c4:	eb0023b4 	bl	2319c <memcpy>
   1a2c8:	e5940004 	ldr	r0, [r4, #4]
   1a2cc:	eb000d49 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   1a2d0:	e1a01000 	mov	r1, r0
   1a2d4:	e1a00005 	mov	r0, r5
   1a2d8:	eb001013 	bl	1e32c <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1a2dc:	e1a01009 	mov	r1, r9
   1a2e0:	e1a00005 	mov	r0, r5
   1a2e4:	eb001014 	bl	1e33c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1a2e8:	e1a02008 	mov	r2, r8
   1a2ec:	e1a01006 	mov	r1, r6
   1a2f0:	e1a00005 	mov	r0, r5
   1a2f4:	eb001045 	bl	1e410 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1a2f8:	e5942008 	ldr	r2, [r4, #8]
   1a2fc:	e3520000 	cmp	r2, #0
   1a300:	11a03008 	movne	r3, r8
   1a304:	11a01009 	movne	r1, r9
   1a308:	e1c600b6 	strh	r0, [r6, #6]
   1a30c:	11a00002 	movne	r0, r2
   1a310:	0a000013 	beq	1a364 <CUDPConnection::Send(void const*, unsigned int, int)+0x15c>
   1a314:	e3a0c011 	mov	ip, #17
   1a318:	e1a02006 	mov	r2, r6
   1a31c:	e58dc000 	str	ip, [sp]
   1a320:	ebfff6e3 	bl	17eb4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1a324:	e1a04000 	mov	r4, r0
   1a328:	e1a00006 	mov	r0, r6
   1a32c:	eb001f11 	bl	21f78 <operator delete[](void*)>
   1a330:	e3540000 	cmp	r4, #0
   1a334:	0a000006 	beq	1a354 <CUDPConnection::Send(void const*, unsigned int, int)+0x14c>
   1a338:	e1a00007 	mov	r0, r7
   1a33c:	e28dd00c 	add	sp, sp, #12
   1a340:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a344:	e1a00009 	mov	r0, r9
   1a348:	eb000e92 	bl	1dd98 <CIPAddress::IsBroadcast() const>
   1a34c:	e3500000 	cmp	r0, #0
   1a350:	0a00000d 	beq	1a38c <CUDPConnection::Send(void const*, unsigned int, int)+0x184>
   1a354:	e3e07000 	mvn	r7, #0
   1a358:	e1a00007 	mov	r0, r7
   1a35c:	e28dd00c 	add	sp, sp, #12
   1a360:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a364:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1a368:	e30e0698 	movw	r0, #59032	; 0xe698
   1a36c:	e3401002 	movt	r1, #2
   1a370:	e3400002 	movt	r0, #2
   1a374:	e3a02094 	mov	r2, #148	; 0x94
   1a378:	eb002a07 	bl	24b9c <assertion_failed>
   1a37c:	e5940008 	ldr	r0, [r4, #8]
   1a380:	e1a03008 	mov	r3, r8
   1a384:	e1a01009 	mov	r1, r9
   1a388:	eaffffe1 	b	1a314 <CUDPConnection::Send(void const*, unsigned int, int)+0x10c>
   1a38c:	e5940004 	ldr	r0, [r4, #4]
   1a390:	eb000d22 	bl	1d820 <CNetConfig::GetBroadcastAddress() const>
   1a394:	e1a01000 	mov	r1, r0
   1a398:	e1a00009 	mov	r0, r9
   1a39c:	eb000d8b 	bl	1d9d0 <CIPAddress::operator==(CIPAddress const&) const>
   1a3a0:	e3500000 	cmp	r0, #0
   1a3a4:	1affffea 	bne	1a354 <CUDPConnection::Send(void const*, unsigned int, int)+0x14c>
   1a3a8:	eaffffb1 	b	1a274 <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   1a3ac:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1a3b0:	e30e0608 	movw	r0, #58888	; 0xe608
   1a3b4:	e3401002 	movt	r1, #2
   1a3b8:	e3400002 	movt	r0, #2
   1a3bc:	e3a0207b 	mov	r2, #123	; 0x7b
   1a3c0:	eb0029f5 	bl	24b9c <assertion_failed>
   1a3c4:	eaffffa6 	b	1a264 <CUDPConnection::Send(void const*, unsigned int, int)+0x5c>
   1a3c8:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1a3cc:	e30e06ec 	movw	r0, #59116	; 0xe6ec
   1a3d0:	e3401002 	movt	r1, #2
   1a3d4:	e3400002 	movt	r0, #2
   1a3d8:	e3a0208c 	mov	r2, #140	; 0x8c
   1a3dc:	eb0029ee 	bl	24b9c <assertion_failed>
   1a3e0:	eaffffb3 	b	1a2b4 <CUDPConnection::Send(void const*, unsigned int, int)+0xac>

0001a3e4 <CUDPConnection::Receive(void*, int)>:
   1a3e4:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1a3e8:	e3530000 	cmp	r3, #0
   1a3ec:	ba00002e 	blt	1a4ac <CUDPConnection::Receive(void*, int)+0xc8>
   1a3f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3f4:	e30eab44 	movw	sl, #60228	; 0xeb44
   1a3f8:	e30b997c 	movw	r9, #47484	; 0xb97c
   1a3fc:	e24dd00c 	sub	sp, sp, #12
   1a400:	e340a002 	movt	sl, #2
   1a404:	e3409002 	movt	r9, #2
   1a408:	e2807034 	add	r7, r0, #52	; 0x34
   1a40c:	e1a08002 	mov	r8, r2
   1a410:	e1a05001 	mov	r5, r1
   1a414:	e1a06000 	mov	r6, r0
   1a418:	e3550000 	cmp	r5, #0
   1a41c:	e2864040 	add	r4, r6, #64	; 0x40
   1a420:	0a00001c 	beq	1a498 <CUDPConnection::Receive(void*, int)+0xb4>
   1a424:	e28d2004 	add	r2, sp, #4
   1a428:	e1a01005 	mov	r1, r5
   1a42c:	e1a00007 	mov	r0, r7
   1a430:	eb000f51 	bl	1e17c <CNetQueue::Dequeue(void*, void**)>
   1a434:	e250b000 	subs	fp, r0, #0
   1a438:	e1a00004 	mov	r0, r4
   1a43c:	1a00000b 	bne	1a470 <CUDPConnection::Receive(void*, int)+0x8c>
   1a440:	e3580040 	cmp	r8, #64	; 0x40
   1a444:	0a00001c 	beq	1a4bc <CUDPConnection::Receive(void*, int)+0xd8>
   1a448:	eb0019d0 	bl	20b90 <CSynchronizationEvent::Clear()>
   1a44c:	e1a00004 	mov	r0, r4
   1a450:	eb0019df 	bl	20bd4 <CSynchronizationEvent::Wait()>
   1a454:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
   1a458:	e3530000 	cmp	r3, #0
   1a45c:	aaffffed 	bge	1a418 <CUDPConnection::Receive(void*, int)+0x34>
   1a460:	e1a00003 	mov	r0, r3
   1a464:	e586b04c 	str	fp, [r6, #76]	; 0x4c
   1a468:	e28dd00c 	add	sp, sp, #12
   1a46c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a470:	e59d4004 	ldr	r4, [sp, #4]
   1a474:	e3540000 	cmp	r4, #0
   1a478:	0a000013 	beq	1a4cc <CUDPConnection::Receive(void*, int)+0xe8>
   1a47c:	e1a00004 	mov	r0, r4
   1a480:	e3a01006 	mov	r1, #6
   1a484:	eb001ebc 	bl	21f7c <operator delete(void*, unsigned int)>
   1a488:	e1a0300b 	mov	r3, fp
   1a48c:	e1a00003 	mov	r0, r3
   1a490:	e28dd00c 	add	sp, sp, #12
   1a494:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a498:	e3a020ab 	mov	r2, #171	; 0xab
   1a49c:	e1a0100a 	mov	r1, sl
   1a4a0:	e1a00009 	mov	r0, r9
   1a4a4:	eb0029bc 	bl	24b9c <assertion_failed>
   1a4a8:	eaffffdd 	b	1a424 <CUDPConnection::Receive(void*, int)+0x40>
   1a4ac:	e3a02000 	mov	r2, #0
   1a4b0:	e580204c 	str	r2, [r0, #76]	; 0x4c
   1a4b4:	e1a00003 	mov	r0, r3
   1a4b8:	e12fff1e 	bx	lr
   1a4bc:	e1a0300b 	mov	r3, fp
   1a4c0:	e1a00003 	mov	r0, r3
   1a4c4:	e28dd00c 	add	sp, sp, #12
   1a4c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4cc:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1a4d0:	e30e06ec 	movw	r0, #59116	; 0xe6ec
   1a4d4:	e3401002 	movt	r1, #2
   1a4d8:	e3400002 	movt	r0, #2
   1a4dc:	e3a020c3 	mov	r2, #195	; 0xc3
   1a4e0:	eb0029ad 	bl	24b9c <assertion_failed>
   1a4e4:	eaffffe4 	b	1a47c <CUDPConnection::Receive(void*, int)+0x98>

0001a4e8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1a4e8:	e590c04c 	ldr	ip, [r0, #76]	; 0x4c
   1a4ec:	e35c0000 	cmp	ip, #0
   1a4f0:	ba000034 	blt	1a5c8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xe0>
   1a4f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4f8:	e30eab44 	movw	sl, #60228	; 0xeb44
   1a4fc:	e24dd014 	sub	sp, sp, #20
   1a500:	e30b997c 	movw	r9, #47484	; 0xb97c
   1a504:	e340a002 	movt	sl, #2
   1a508:	e3409002 	movt	r9, #2
   1a50c:	e2807034 	add	r7, r0, #52	; 0x34
   1a510:	e1a08002 	mov	r8, r2
   1a514:	e1a05001 	mov	r5, r1
   1a518:	e1a06000 	mov	r6, r0
   1a51c:	e58d3004 	str	r3, [sp, #4]
   1a520:	e3550000 	cmp	r5, #0
   1a524:	e2864040 	add	r4, r6, #64	; 0x40
   1a528:	0a000021 	beq	1a5b4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xcc>
   1a52c:	e28d200c 	add	r2, sp, #12
   1a530:	e1a01005 	mov	r1, r5
   1a534:	e1a00007 	mov	r0, r7
   1a538:	eb000f0f 	bl	1e17c <CNetQueue::Dequeue(void*, void**)>
   1a53c:	e250b000 	subs	fp, r0, #0
   1a540:	e1a00004 	mov	r0, r4
   1a544:	1a00000b 	bne	1a578 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x90>
   1a548:	e3580040 	cmp	r8, #64	; 0x40
   1a54c:	0a000028 	beq	1a5f4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x10c>
   1a550:	eb00198e 	bl	20b90 <CSynchronizationEvent::Clear()>
   1a554:	e1a00004 	mov	r0, r4
   1a558:	eb00199d 	bl	20bd4 <CSynchronizationEvent::Wait()>
   1a55c:	e596c04c 	ldr	ip, [r6, #76]	; 0x4c
   1a560:	e35c0000 	cmp	ip, #0
   1a564:	aaffffed 	bge	1a520 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x38>
   1a568:	e1a0000c 	mov	r0, ip
   1a56c:	e586b04c 	str	fp, [r6, #76]	; 0x4c
   1a570:	e28dd014 	add	sp, sp, #20
   1a574:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a578:	e59d400c 	ldr	r4, [sp, #12]
   1a57c:	e3540000 	cmp	r4, #0
   1a580:	0a00001f 	beq	1a604 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x11c>
   1a584:	e59d3004 	ldr	r3, [sp, #4]
   1a588:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1a58c:	e3530000 	cmp	r3, #0
   1a590:	13520000 	cmpne	r2, #0
   1a594:	1a00000f 	bne	1a5d8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf0>
   1a598:	e1a00004 	mov	r0, r4
   1a59c:	e3a01006 	mov	r1, #6
   1a5a0:	eb001e75 	bl	21f7c <operator delete(void*, unsigned int)>
   1a5a4:	e1a0c00b 	mov	ip, fp
   1a5a8:	e1a0000c 	mov	r0, ip
   1a5ac:	e28dd014 	add	sp, sp, #20
   1a5b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5b4:	e3a02f46 	mov	r2, #280	; 0x118
   1a5b8:	e1a0100a 	mov	r1, sl
   1a5bc:	e1a00009 	mov	r0, r9
   1a5c0:	eb002975 	bl	24b9c <assertion_failed>
   1a5c4:	eaffffd8 	b	1a52c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x44>
   1a5c8:	e3a03000 	mov	r3, #0
   1a5cc:	e580304c 	str	r3, [r0, #76]	; 0x4c
   1a5d0:	e1a0000c 	mov	r0, ip
   1a5d4:	e12fff1e 	bx	lr
   1a5d8:	e1a00003 	mov	r0, r3
   1a5dc:	e1a01004 	mov	r1, r4
   1a5e0:	eb000d7c 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   1a5e4:	e1d420b4 	ldrh	r2, [r4, #4]
   1a5e8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1a5ec:	e1c320b0 	strh	r2, [r3]
   1a5f0:	eaffffe8 	b	1a598 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xb0>
   1a5f4:	e1a0c00b 	mov	ip, fp
   1a5f8:	e1a0000c 	mov	r0, ip
   1a5fc:	e28dd014 	add	sp, sp, #20
   1a600:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a604:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1a608:	e30e06ec 	movw	r0, #59116	; 0xe6ec
   1a60c:	e3401002 	movt	r1, #2
   1a610:	e3400002 	movt	r0, #2
   1a614:	e3a02e13 	mov	r2, #304	; 0x130
   1a618:	eb00295f 	bl	24b9c <assertion_failed>
   1a61c:	eaffffd8 	b	1a584 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x9c>

0001a620 <CUDPConnection::Connect()>:
   1a620:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1a624:	e3530000 	cmp	r3, #0
   1a628:	0a000001 	beq	1a634 <CUDPConnection::Connect()+0x14>
   1a62c:	e3a00000 	mov	r0, #0
   1a630:	e12fff1e 	bx	lr
   1a634:	e92d4010 	push	{r4, lr}
   1a638:	e3a02049 	mov	r2, #73	; 0x49
   1a63c:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1a640:	e30e0b64 	movw	r0, #60260	; 0xeb64
   1a644:	e3401002 	movt	r1, #2
   1a648:	e3400002 	movt	r0, #2
   1a64c:	eb002952 	bl	24b9c <assertion_failed>
   1a650:	e3a00000 	mov	r0, #0
   1a654:	e8bd8010 	pop	{r4, pc}

0001a658 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1a658:	e590c04c 	ldr	ip, [r0, #76]	; 0x4c
   1a65c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a660:	e35c0000 	cmp	ip, #0
   1a664:	e24dd008 	sub	sp, sp, #8
   1a668:	e1a04000 	mov	r4, r0
   1a66c:	b3a03000 	movlt	r3, #0
   1a670:	b580304c 	strlt	r3, [r0, #76]	; 0x4c
   1a674:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
   1a678:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   1a67c:	ba000043 	blt	1a790 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x138>
   1a680:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   1a684:	e35c0000 	cmp	ip, #0
   1a688:	1a000055 	bne	1a7e4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x18c>
   1a68c:	e1a0e003 	mov	lr, r3
   1a690:	e3de3040 	bics	r3, lr, #64	; 0x40
   1a694:	1a000044 	bne	1a7ac <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x154>
   1a698:	e1a06002 	mov	r6, r2
   1a69c:	e2422001 	sub	r2, r2, #1
   1a6a0:	e3003637 	movw	r3, #1591	; 0x637
   1a6a4:	e1520003 	cmp	r2, r3
   1a6a8:	e286a008 	add	sl, r6, #8
   1a6ac:	8a00003e 	bhi	1a7ac <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x154>
   1a6b0:	e5903004 	ldr	r3, [r0, #4]
   1a6b4:	e1a07001 	mov	r7, r1
   1a6b8:	e3530000 	cmp	r3, #0
   1a6bc:	0a000056 	beq	1a81c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1c4>
   1a6c0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   1a6c4:	e3530000 	cmp	r3, #0
   1a6c8:	0a000033 	beq	1a79c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x144>
   1a6cc:	e1a0000a 	mov	r0, sl
   1a6d0:	e6bf8fb8 	rev16	r8, r8
   1a6d4:	eb001e25 	bl	21f70 <operator new[](unsigned int)>
   1a6d8:	e1d431b6 	ldrh	r3, [r4, #22]
   1a6dc:	e3570000 	cmp	r7, #0
   1a6e0:	e6bf3fb3 	rev16	r3, r3
   1a6e4:	e1a05000 	mov	r5, r0
   1a6e8:	e1c030b0 	strh	r3, [r0]
   1a6ec:	e1c080b2 	strh	r8, [r0, #2]
   1a6f0:	e6bf3fba 	rev16	r3, sl
   1a6f4:	e1c030b4 	strh	r3, [r0, #4]
   1a6f8:	e3a03000 	mov	r3, #0
   1a6fc:	e5c03006 	strb	r3, [r0, #6]
   1a700:	e5c03007 	strb	r3, [r0, #7]
   1a704:	0a00004b 	beq	1a838 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1e0>
   1a708:	e1a02006 	mov	r2, r6
   1a70c:	e1a01007 	mov	r1, r7
   1a710:	e2850008 	add	r0, r5, #8
   1a714:	e284701c 	add	r7, r4, #28
   1a718:	eb00229f 	bl	2319c <memcpy>
   1a71c:	e5940004 	ldr	r0, [r4, #4]
   1a720:	eb000c34 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   1a724:	e1a01000 	mov	r1, r0
   1a728:	e1a00007 	mov	r0, r7
   1a72c:	eb000efe 	bl	1e32c <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1a730:	e1a01009 	mov	r1, r9
   1a734:	e1a00007 	mov	r0, r7
   1a738:	eb000eff 	bl	1e33c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1a73c:	e1a0200a 	mov	r2, sl
   1a740:	e1a01005 	mov	r1, r5
   1a744:	e1a00007 	mov	r0, r7
   1a748:	eb000f30 	bl	1e410 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1a74c:	e5942008 	ldr	r2, [r4, #8]
   1a750:	e3520000 	cmp	r2, #0
   1a754:	11a0300a 	movne	r3, sl
   1a758:	11a01009 	movne	r1, r9
   1a75c:	e1c500b6 	strh	r0, [r5, #6]
   1a760:	11a00002 	movne	r0, r2
   1a764:	0a000014 	beq	1a7bc <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x164>
   1a768:	e3a0c011 	mov	ip, #17
   1a76c:	e1a02005 	mov	r2, r5
   1a770:	e58dc000 	str	ip, [sp]
   1a774:	ebfff5ce 	bl	17eb4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1a778:	e1a04000 	mov	r4, r0
   1a77c:	e1a00005 	mov	r0, r5
   1a780:	eb001dfc 	bl	21f78 <operator delete[](void*)>
   1a784:	e3540000 	cmp	r4, #0
   1a788:	0a000007 	beq	1a7ac <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x154>
   1a78c:	e1a0c006 	mov	ip, r6
   1a790:	e1a0000c 	mov	r0, ip
   1a794:	e28dd008 	add	sp, sp, #8
   1a798:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a79c:	e1a00009 	mov	r0, r9
   1a7a0:	eb000d7c 	bl	1dd98 <CIPAddress::IsBroadcast() const>
   1a7a4:	e3500000 	cmp	r0, #0
   1a7a8:	0a000013 	beq	1a7fc <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1a4>
   1a7ac:	e3e0c000 	mvn	ip, #0
   1a7b0:	e1a0000c 	mov	r0, ip
   1a7b4:	e28dd008 	add	sp, sp, #8
   1a7b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7bc:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1a7c0:	e30e0698 	movw	r0, #59032	; 0xe698
   1a7c4:	e3401002 	movt	r1, #2
   1a7c8:	e3400002 	movt	r0, #2
   1a7cc:	e3002101 	movw	r2, #257	; 0x101
   1a7d0:	eb0028f1 	bl	24b9c <assertion_failed>
   1a7d4:	e5940008 	ldr	r0, [r4, #8]
   1a7d8:	e1a0300a 	mov	r3, sl
   1a7dc:	e1a01009 	mov	r1, r9
   1a7e0:	eaffffe0 	b	1a768 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x110>
   1a7e4:	e590c000 	ldr	ip, [r0]
   1a7e8:	e59ce014 	ldr	lr, [ip, #20]
   1a7ec:	e1a0c00e 	mov	ip, lr
   1a7f0:	e28dd008 	add	sp, sp, #8
   1a7f4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a7f8:	e12fff1c 	bx	ip
   1a7fc:	e5940004 	ldr	r0, [r4, #4]
   1a800:	eb000c06 	bl	1d820 <CNetConfig::GetBroadcastAddress() const>
   1a804:	e1a01000 	mov	r1, r0
   1a808:	e1a00009 	mov	r0, r9
   1a80c:	eb000c6f 	bl	1d9d0 <CIPAddress::operator==(CIPAddress const&) const>
   1a810:	e3500000 	cmp	r0, #0
   1a814:	1affffe4 	bne	1a7ac <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x154>
   1a818:	eaffffab 	b	1a6cc <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   1a81c:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1a820:	e30e0608 	movw	r0, #58888	; 0xe608
   1a824:	e3401002 	movt	r1, #2
   1a828:	e3400002 	movt	r0, #2
   1a82c:	e3a020e8 	mov	r2, #232	; 0xe8
   1a830:	eb0028d9 	bl	24b9c <assertion_failed>
   1a834:	eaffffa1 	b	1a6c0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x68>
   1a838:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1a83c:	e30e06ec 	movw	r0, #59116	; 0xe6ec
   1a840:	e3401002 	movt	r1, #2
   1a844:	e3400002 	movt	r0, #2
   1a848:	e3a020f9 	mov	r2, #249	; 0xf9
   1a84c:	eb0028d2 	bl	24b9c <assertion_failed>
   1a850:	eaffffac 	b	1a708 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb0>

0001a854 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1a854:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a858:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1a85c:	e35c0011 	cmp	ip, #17
   1a860:	0a000001 	beq	1a86c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1a864:	e3a00000 	mov	r0, #0
   1a868:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a86c:	e3520008 	cmp	r2, #8
   1a870:	9a00004e 	bls	1a9b0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x15c>
   1a874:	e1d1c0b2 	ldrh	ip, [r1, #2]
   1a878:	e1d0e1b6 	ldrh	lr, [r0, #22]
   1a87c:	e6bfcfbc 	rev16	ip, ip
   1a880:	e6ffc07c 	uxth	ip, ip
   1a884:	e15e000c 	cmp	lr, ip
   1a888:	1afffff5 	bne	1a864 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1a88c:	e1a06003 	mov	r6, r3
   1a890:	e5903004 	ldr	r3, [r0, #4]
   1a894:	e1a05002 	mov	r5, r2
   1a898:	e1a04001 	mov	r4, r1
   1a89c:	e3530000 	cmp	r3, #0
   1a8a0:	e1a07000 	mov	r7, r0
   1a8a4:	0a00004f 	beq	1a9e8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x194>
   1a8a8:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   1a8ac:	e1d480b0 	ldrh	r8, [r4]
   1a8b0:	e3530000 	cmp	r3, #0
   1a8b4:	e6bf8fb8 	rev16	r8, r8
   1a8b8:	e6ff3078 	uxth	r3, r8
   1a8bc:	0a000013 	beq	1a910 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   1a8c0:	e1d721b4 	ldrh	r2, [r7, #20]
   1a8c4:	e1520003 	cmp	r2, r3
   1a8c8:	1affffe5 	bne	1a864 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1a8cc:	e287900c 	add	r9, r7, #12
   1a8d0:	e1a01006 	mov	r1, r6
   1a8d4:	e1a00009 	mov	r0, r9
   1a8d8:	eb000c58 	bl	1da40 <CIPAddress::operator!=(CIPAddress const&) const>
   1a8dc:	e3500000 	cmp	r0, #0
   1a8e0:	0a00000a 	beq	1a910 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   1a8e4:	e1a00009 	mov	r0, r9
   1a8e8:	eb000d2a 	bl	1dd98 <CIPAddress::IsBroadcast() const>
   1a8ec:	e3500000 	cmp	r0, #0
   1a8f0:	1a000006 	bne	1a910 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   1a8f4:	e5970004 	ldr	r0, [r7, #4]
   1a8f8:	eb000bc8 	bl	1d820 <CNetConfig::GetBroadcastAddress() const>
   1a8fc:	e1a01000 	mov	r1, r0
   1a900:	e1a00009 	mov	r0, r9
   1a904:	eb000c4d 	bl	1da40 <CIPAddress::operator!=(CIPAddress const&) const>
   1a908:	e3500000 	cmp	r0, #0
   1a90c:	1affffd4 	bne	1a864 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1a910:	e1d430b4 	ldrh	r3, [r4, #4]
   1a914:	e6bf3fb3 	rev16	r3, r3
   1a918:	e6ff3073 	uxth	r3, r3
   1a91c:	e1550003 	cmp	r5, r3
   1a920:	3a000022 	bcc	1a9b0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x15c>
   1a924:	e1d430b6 	ldrh	r3, [r4, #6]
   1a928:	e3530000 	cmp	r3, #0
   1a92c:	1a000012 	bne	1a97c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x128>
   1a930:	e5973048 	ldr	r3, [r7, #72]	; 0x48
   1a934:	e3530000 	cmp	r3, #0
   1a938:	0a00001e 	beq	1a9b8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   1a93c:	e3a00006 	mov	r0, #6
   1a940:	eb001d89 	bl	21f6c <operator new(unsigned int)>
   1a944:	e1a09000 	mov	r9, r0
   1a948:	e1a01000 	mov	r1, r0
   1a94c:	e1a00006 	mov	r0, r6
   1a950:	eb000ce5 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   1a954:	e2870034 	add	r0, r7, #52	; 0x34
   1a958:	e1a03009 	mov	r3, r9
   1a95c:	e2452008 	sub	r2, r5, #8
   1a960:	e2841008 	add	r1, r4, #8
   1a964:	e1c980b4 	strh	r8, [r9, #4]
   1a968:	eb000db2 	bl	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1a96c:	e2870040 	add	r0, r7, #64	; 0x40
   1a970:	eb001889 	bl	20b9c <CSynchronizationEvent::Set()>
   1a974:	e3a00001 	mov	r0, #1
   1a978:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a97c:	e287901c 	add	r9, r7, #28
   1a980:	e1a01006 	mov	r1, r6
   1a984:	e1a00009 	mov	r0, r9
   1a988:	eb000e67 	bl	1e32c <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1a98c:	e59d1020 	ldr	r1, [sp, #32]
   1a990:	e1a00009 	mov	r0, r9
   1a994:	eb000e68 	bl	1e33c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1a998:	e1a02005 	mov	r2, r5
   1a99c:	e1a01004 	mov	r1, r4
   1a9a0:	e1a00009 	mov	r0, r9
   1a9a4:	eb000e99 	bl	1e410 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1a9a8:	e3500000 	cmp	r0, #0
   1a9ac:	0affffdf 	beq	1a930 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdc>
   1a9b0:	e3e00000 	mvn	r0, #0
   1a9b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a9b8:	e59d0020 	ldr	r0, [sp, #32]
   1a9bc:	eb000cf5 	bl	1dd98 <CIPAddress::IsBroadcast() const>
   1a9c0:	e3500000 	cmp	r0, #0
   1a9c4:	1affffea 	bne	1a974 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x120>
   1a9c8:	e5970004 	ldr	r0, [r7, #4]
   1a9cc:	eb000b93 	bl	1d820 <CNetConfig::GetBroadcastAddress() const>
   1a9d0:	e1a01000 	mov	r1, r0
   1a9d4:	e59d0020 	ldr	r0, [sp, #32]
   1a9d8:	eb000bfc 	bl	1d9d0 <CIPAddress::operator==(CIPAddress const&) const>
   1a9dc:	e3500000 	cmp	r0, #0
   1a9e0:	1affffe3 	bne	1a974 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x120>
   1a9e4:	eaffffd4 	b	1a93c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xe8>
   1a9e8:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1a9ec:	e30e0608 	movw	r0, #58888	; 0xe608
   1a9f0:	e3401002 	movt	r1, #2
   1a9f4:	e3400002 	movt	r0, #2
   1a9f8:	e3002161 	movw	r2, #353	; 0x161
   1a9fc:	eb002866 	bl	24b9c <assertion_failed>
   1aa00:	eaffffa8 	b	1a8a8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>

0001aa04 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1aa04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1aa08:	e59dc020 	ldr	ip, [sp, #32]
   1aa0c:	e1dd71b8 	ldrh	r7, [sp, #24]
   1aa10:	e35c0011 	cmp	ip, #17
   1aa14:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1aa18:	0a000001 	beq	1aa24 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1aa1c:	e3a00000 	mov	r0, #0
   1aa20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1aa24:	e1d011b6 	ldrh	r1, [r0, #22]
   1aa28:	e151000c 	cmp	r1, ip
   1aa2c:	1afffffa 	bne	1aa1c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1aa30:	e1a04000 	mov	r4, r0
   1aa34:	e5900004 	ldr	r0, [r0, #4]
   1aa38:	e1a05003 	mov	r5, r3
   1aa3c:	e1a06002 	mov	r6, r2
   1aa40:	e3500000 	cmp	r0, #0
   1aa44:	0a000016 	beq	1aaa4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1aa48:	eb000b6a 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   1aa4c:	e1a01000 	mov	r1, r0
   1aa50:	e1a00005 	mov	r0, r5
   1aa54:	eb000bf9 	bl	1da40 <CIPAddress::operator!=(CIPAddress const&) const>
   1aa58:	e3500000 	cmp	r0, #0
   1aa5c:	1affffee 	bne	1aa1c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1aa60:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   1aa64:	e3530000 	cmp	r3, #0
   1aa68:	0a000007 	beq	1aa8c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   1aa6c:	e1d431b4 	ldrh	r3, [r4, #20]
   1aa70:	e1530007 	cmp	r3, r7
   1aa74:	1affffe8 	bne	1aa1c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1aa78:	e1a01006 	mov	r1, r6
   1aa7c:	e284000c 	add	r0, r4, #12
   1aa80:	eb000bee 	bl	1da40 <CIPAddress::operator!=(CIPAddress const&) const>
   1aa84:	e3500000 	cmp	r0, #0
   1aa88:	1affffe3 	bne	1aa1c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1aa8c:	e3e03000 	mvn	r3, #0
   1aa90:	e2840040 	add	r0, r4, #64	; 0x40
   1aa94:	e584304c 	str	r3, [r4, #76]	; 0x4c
   1aa98:	eb00183f 	bl	20b9c <CSynchronizationEvent::Set()>
   1aa9c:	e3a00001 	mov	r0, #1
   1aaa0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1aaa4:	e30e1b44 	movw	r1, #60228	; 0xeb44
   1aaa8:	e30e0608 	movw	r0, #58888	; 0xe608
   1aaac:	e3401002 	movt	r1, #2
   1aab0:	e3400002 	movt	r0, #2
   1aab4:	e30021aa 	movw	r2, #426	; 0x1aa
   1aab8:	eb002837 	bl	24b9c <assertion_failed>
   1aabc:	e5940004 	ldr	r0, [r4, #4]
   1aac0:	eaffffe0 	b	1aa48 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x44>

0001aac4 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1aac4:	e92d4030 	push	{r4, r5, lr}
   1aac8:	e24dd014 	sub	sp, sp, #20
   1aacc:	e3a05011 	mov	r5, #17
   1aad0:	e1a04000 	mov	r4, r0
   1aad4:	e1dde2b0 	ldrh	lr, [sp, #32]
   1aad8:	e1ddc2b4 	ldrh	ip, [sp, #36]	; 0x24
   1aadc:	e58d5008 	str	r5, [sp, #8]
   1aae0:	e58de000 	str	lr, [sp]
   1aae4:	e58dc004 	str	ip, [sp, #4]
   1aae8:	ebfffd0b 	bl	19f1c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1aaec:	e59f2038 	ldr	r2, [pc, #56]	; 1ab2c <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x68>
   1aaf0:	e3a03001 	mov	r3, #1
   1aaf4:	e2840034 	add	r0, r4, #52	; 0x34
   1aaf8:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1aafc:	e5843030 	str	r3, [r4, #48]	; 0x30
   1ab00:	e5842000 	str	r2, [r4]
   1ab04:	eb000d02 	bl	1df14 <CNetQueue::CNetQueue()>
   1ab08:	e2840040 	add	r0, r4, #64	; 0x40
   1ab0c:	e3a01000 	mov	r1, #0
   1ab10:	eb00180b 	bl	20b44 <CSynchronizationEvent::CSynchronizationEvent(int)>
   1ab14:	e3a03000 	mov	r3, #0
   1ab18:	e1a00004 	mov	r0, r4
   1ab1c:	e5843048 	str	r3, [r4, #72]	; 0x48
   1ab20:	e584304c 	str	r3, [r4, #76]	; 0x4c
   1ab24:	e28dd014 	add	sp, sp, #20
   1ab28:	e8bd8030 	pop	{r4, r5, pc}
   1ab2c:	0002eb0c 	.word	0x0002eb0c

0001ab30 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1ab30:	e92d4030 	push	{r4, r5, lr}
   1ab34:	e24dd00c 	sub	sp, sp, #12
   1ab38:	e3a0c011 	mov	ip, #17
   1ab3c:	e1a04000 	mov	r4, r0
   1ab40:	e58dc000 	str	ip, [sp]
   1ab44:	e3a05000 	mov	r5, #0
   1ab48:	ebfffd23 	bl	19fdc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1ab4c:	e59f3034 	ldr	r3, [pc, #52]	; 1ab88 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x58>
   1ab50:	e3a02001 	mov	r2, #1
   1ab54:	e5845030 	str	r5, [r4, #48]	; 0x30
   1ab58:	e584202c 	str	r2, [r4, #44]	; 0x2c
   1ab5c:	e2840034 	add	r0, r4, #52	; 0x34
   1ab60:	e5843000 	str	r3, [r4]
   1ab64:	eb000cea 	bl	1df14 <CNetQueue::CNetQueue()>
   1ab68:	e1a01005 	mov	r1, r5
   1ab6c:	e2840040 	add	r0, r4, #64	; 0x40
   1ab70:	eb0017f3 	bl	20b44 <CSynchronizationEvent::CSynchronizationEvent(int)>
   1ab74:	e1a00004 	mov	r0, r4
   1ab78:	e5845048 	str	r5, [r4, #72]	; 0x48
   1ab7c:	e584504c 	str	r5, [r4, #76]	; 0x4c
   1ab80:	e28dd00c 	add	sp, sp, #12
   1ab84:	e8bd8030 	pop	{r4, r5, pc}
   1ab88:	0002eb0c 	.word	0x0002eb0c

0001ab8c <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1ab8c:	e590c000 	ldr	ip, [r0]
   1ab90:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1ab94:	e59ce014 	ldr	lr, [ip, #20]
   1ab98:	e1a0c00e 	mov	ip, lr
   1ab9c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1aba0:	e12fff1c 	bx	ip

0001aba4 <CTCPConnection::SetOptionBroadcast(int)>:
   1aba4:	e3a00000 	mov	r0, #0
   1aba8:	e12fff1e 	bx	lr

0001abac <CTCPConnection::IsTerminated() const>:
   1abac:	e5d00030 	ldrb	r0, [r0, #48]	; 0x30
   1abb0:	e16f0f10 	clz	r0, r0
   1abb4:	e1a002a0 	lsr	r0, r0, #5
   1abb8:	e12fff1e 	bx	lr

0001abbc <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1abbc:	e92d4070 	push	{r4, r5, r6, lr}
   1abc0:	e1a05003 	mov	r5, r3
   1abc4:	e5903000 	ldr	r3, [r0]
   1abc8:	e1a06000 	mov	r6, r0
   1abcc:	e59d4010 	ldr	r4, [sp, #16]
   1abd0:	e5933018 	ldr	r3, [r3, #24]
   1abd4:	e12fff33 	blx	r3
   1abd8:	e3500000 	cmp	r0, #0
   1abdc:	d8bd8070 	pople	{r4, r5, r6, pc}
   1abe0:	e3550000 	cmp	r5, #0
   1abe4:	13540000 	cmpne	r4, #0
   1abe8:	13a00001 	movne	r0, #1
   1abec:	03a00000 	moveq	r0, #0
   1abf0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1abf4:	e1a00005 	mov	r0, r5
   1abf8:	e286100c 	add	r1, r6, #12
   1abfc:	eb000c0c 	bl	1dc34 <CIPAddress::Set(CIPAddress const&)>
   1ac00:	e1d631b4 	ldrh	r3, [r6, #20]
   1ac04:	e3a00000 	mov	r0, #0
   1ac08:	e1c430b0 	strh	r3, [r4]
   1ac0c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ac10 <CTCPConnection::Send(void const*, unsigned int, int)>:
   1ac10:	e3d3c040 	bics	ip, r3, #64	; 0x40
   1ac14:	1a000041 	bne	1ad20 <CTCPConnection::Send(void const*, unsigned int, int)+0x110>
   1ac18:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ac1c:	e1a04001 	mov	r4, r1
   1ac20:	e5901034 	ldr	r1, [r0, #52]	; 0x34
   1ac24:	e3510000 	cmp	r1, #0
   1ac28:	ba00002e 	blt	1ace8 <CTCPConnection::Send(void const*, unsigned int, int)+0xd8>
   1ac2c:	e5d01030 	ldrb	r1, [r0, #48]	; 0x30
   1ac30:	e6ef1071 	uxtb	r1, r1
   1ac34:	e351000a 	cmp	r1, #10
   1ac38:	9a00001a 	bls	1aca8 <CTCPConnection::Send(void const*, unsigned int, int)+0x98>
   1ac3c:	e3540000 	cmp	r4, #0
   1ac40:	e1a07002 	mov	r7, r2
   1ac44:	e1a09000 	mov	r9, r0
   1ac48:	e1a08003 	mov	r8, r3
   1ac4c:	0a00002c 	beq	1ad04 <CTCPConnection::Send(void const*, unsigned int, int)+0xf4>
   1ac50:	e3570d19 	cmp	r7, #1600	; 0x640
   1ac54:	9a000025 	bls	1acf0 <CTCPConnection::Send(void const*, unsigned int, int)+0xe0>
   1ac58:	e2896038 	add	r6, r9, #56	; 0x38
   1ac5c:	e1a05007 	mov	r5, r7
   1ac60:	e3a02d19 	mov	r2, #1600	; 0x640
   1ac64:	e1a01004 	mov	r1, r4
   1ac68:	e2455d19 	sub	r5, r5, #1600	; 0x640
   1ac6c:	e3a03000 	mov	r3, #0
   1ac70:	e1a00006 	mov	r0, r6
   1ac74:	e0844002 	add	r4, r4, r2
   1ac78:	eb000cee 	bl	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ac7c:	e3550d19 	cmp	r5, #1600	; 0x640
   1ac80:	8afffff6 	bhi	1ac60 <CTCPConnection::Send(void const*, unsigned int, int)+0x50>
   1ac84:	e1a02005 	mov	r2, r5
   1ac88:	e1a01004 	mov	r1, r4
   1ac8c:	e1a00006 	mov	r0, r6
   1ac90:	e3a03000 	mov	r3, #0
   1ac94:	eb000ce7 	bl	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ac98:	e3180040 	tst	r8, #64	; 0x40
   1ac9c:	0a000007 	beq	1acc0 <CTCPConnection::Send(void const*, unsigned int, int)+0xb0>
   1aca0:	e1a00007 	mov	r0, r7
   1aca4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aca8:	e3a0e001 	mov	lr, #1
   1acac:	e300c763 	movw	ip, #1891	; 0x763
   1acb0:	e01c111e 	ands	r1, ip, lr, lsl r1
   1acb4:	0affffe0 	beq	1ac3c <CTCPConnection::Send(void const*, unsigned int, int)+0x2c>
   1acb8:	e3e00000 	mvn	r0, #0
   1acbc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1acc0:	e2894084 	add	r4, r9, #132	; 0x84
   1acc4:	e1a00004 	mov	r0, r4
   1acc8:	eb0017b0 	bl	20b90 <CSynchronizationEvent::Clear()>
   1accc:	e1a00004 	mov	r0, r4
   1acd0:	eb0017bf 	bl	20bd4 <CSynchronizationEvent::Wait()>
   1acd4:	e5993034 	ldr	r3, [r9, #52]	; 0x34
   1acd8:	e3530000 	cmp	r3, #0
   1acdc:	aaffffef 	bge	1aca0 <CTCPConnection::Send(void const*, unsigned int, int)+0x90>
   1ace0:	e5990034 	ldr	r0, [r9, #52]	; 0x34
   1ace4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ace8:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   1acec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1acf0:	e3570000 	cmp	r7, #0
   1acf4:	0affffe7 	beq	1ac98 <CTCPConnection::Send(void const*, unsigned int, int)+0x88>
   1acf8:	e2896038 	add	r6, r9, #56	; 0x38
   1acfc:	e1a05007 	mov	r5, r7
   1ad00:	eaffffdf 	b	1ac84 <CTCPConnection::Send(void const*, unsigned int, int)+0x74>
   1ad04:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1ad08:	e30e06ec 	movw	r0, #59116	; 0xe6ec
   1ad0c:	e3401002 	movt	r1, #2
   1ad10:	e3400002 	movt	r0, #2
   1ad14:	e3002182 	movw	r2, #386	; 0x182
   1ad18:	eb00279f 	bl	24b9c <assertion_failed>
   1ad1c:	eaffffcb 	b	1ac50 <CTCPConnection::Send(void const*, unsigned int, int)+0x40>
   1ad20:	e3e00000 	mvn	r0, #0
   1ad24:	e12fff1e 	bx	lr

0001ad28 <CTCPConnection::Receive(void*, int)>:
   1ad28:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad2c:	e3d2b040 	bics	fp, r2, #64	; 0x40
   1ad30:	1a000029 	bne	1addc <CTCPConnection::Receive(void*, int)+0xb4>
   1ad34:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1ad38:	e3530000 	cmp	r3, #0
   1ad3c:	b590b034 	ldrlt	fp, [r0, #52]	; 0x34
   1ad40:	ba000020 	blt	1adc8 <CTCPConnection::Receive(void*, int)+0xa0>
   1ad44:	e1a07001 	mov	r7, r1
   1ad48:	e1a04000 	mov	r4, r0
   1ad4c:	e1a06002 	mov	r6, r2
   1ad50:	e2808044 	add	r8, r0, #68	; 0x44
   1ad54:	e3a09001 	mov	r9, #1
   1ad58:	e300a763 	movw	sl, #1891	; 0x763
   1ad5c:	ea000010 	b	1ada4 <CTCPConnection::Receive(void*, int)+0x7c>
   1ad60:	e5d43030 	ldrb	r3, [r4, #48]	; 0x30
   1ad64:	e6ef3073 	uxtb	r3, r3
   1ad68:	e353000a 	cmp	r3, #10
   1ad6c:	e1a02319 	lsl	r2, r9, r3
   1ad70:	8a000003 	bhi	1ad84 <CTCPConnection::Receive(void*, int)+0x5c>
   1ad74:	e112000a 	tst	r2, sl
   1ad78:	1a000017 	bne	1addc <CTCPConnection::Receive(void*, int)+0xb4>
   1ad7c:	e3120080 	tst	r2, #128	; 0x80
   1ad80:	1a000010 	bne	1adc8 <CTCPConnection::Receive(void*, int)+0xa0>
   1ad84:	e3160040 	tst	r6, #64	; 0x40
   1ad88:	1a00000e 	bne	1adc8 <CTCPConnection::Receive(void*, int)+0xa0>
   1ad8c:	eb00177f 	bl	20b90 <CSynchronizationEvent::Clear()>
   1ad90:	e1a00005 	mov	r0, r5
   1ad94:	eb00178e 	bl	20bd4 <CSynchronizationEvent::Wait()>
   1ad98:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1ad9c:	e3530000 	cmp	r3, #0
   1ada0:	ba00000a 	blt	1add0 <CTCPConnection::Receive(void*, int)+0xa8>
   1ada4:	e3a02000 	mov	r2, #0
   1ada8:	e1a01007 	mov	r1, r7
   1adac:	e1a00008 	mov	r0, r8
   1adb0:	e2845084 	add	r5, r4, #132	; 0x84
   1adb4:	eb000cf0 	bl	1e17c <CNetQueue::Dequeue(void*, void**)>
   1adb8:	e2503000 	subs	r3, r0, #0
   1adbc:	e1a00005 	mov	r0, r5
   1adc0:	0affffe6 	beq	1ad60 <CTCPConnection::Receive(void*, int)+0x38>
   1adc4:	e1a0b003 	mov	fp, r3
   1adc8:	e1a0000b 	mov	r0, fp
   1adcc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1add0:	e594b034 	ldr	fp, [r4, #52]	; 0x34
   1add4:	e1a0000b 	mov	r0, fp
   1add8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1addc:	e3e0b000 	mvn	fp, #0
   1ade0:	e1a0000b 	mov	r0, fp
   1ade4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ade8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1ade8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1adec:	e59dc020 	ldr	ip, [sp, #32]
   1adf0:	e1dd61b8 	ldrh	r6, [sp, #24]
   1adf4:	e35c0006 	cmp	ip, #6
   1adf8:	e1dd71bc 	ldrh	r7, [sp, #28]
   1adfc:	0a000001 	beq	1ae08 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1ae00:	e3a00000 	mov	r0, #0
   1ae04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ae08:	e5d01030 	ldrb	r1, [r0, #48]	; 0x30
   1ae0c:	e3510001 	cmp	r1, #1
   1ae10:	dafffffa 	ble	1ae00 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ae14:	e1a01002 	mov	r1, r2
   1ae18:	e1a04000 	mov	r4, r0
   1ae1c:	e280000c 	add	r0, r0, #12
   1ae20:	e1a05003 	mov	r5, r3
   1ae24:	eb000b05 	bl	1da40 <CIPAddress::operator!=(CIPAddress const&) const>
   1ae28:	e3500000 	cmp	r0, #0
   1ae2c:	1afffff3 	bne	1ae00 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ae30:	e1d431b4 	ldrh	r3, [r4, #20]
   1ae34:	e1530006 	cmp	r3, r6
   1ae38:	1afffff0 	bne	1ae00 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ae3c:	e5940004 	ldr	r0, [r4, #4]
   1ae40:	e3500000 	cmp	r0, #0
   1ae44:	0a00000e 	beq	1ae84 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x9c>
   1ae48:	eb000a6a 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   1ae4c:	e1a01000 	mov	r1, r0
   1ae50:	e1a00005 	mov	r0, r5
   1ae54:	eb000af9 	bl	1da40 <CIPAddress::operator!=(CIPAddress const&) const>
   1ae58:	e3500000 	cmp	r0, #0
   1ae5c:	1affffe7 	bne	1ae00 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ae60:	e1d431b6 	ldrh	r3, [r4, #22]
   1ae64:	e1530007 	cmp	r3, r7
   1ae68:	1affffe4 	bne	1ae00 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ae6c:	e3e03000 	mvn	r3, #0
   1ae70:	e2840084 	add	r0, r4, #132	; 0x84
   1ae74:	e5843034 	str	r3, [r4, #52]	; 0x34
   1ae78:	eb001747 	bl	20b9c <CSynchronizationEvent::Set()>
   1ae7c:	e3a00001 	mov	r0, #1
   1ae80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ae84:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1ae88:	e30e0608 	movw	r0, #58888	; 0xe608
   1ae8c:	e3401002 	movt	r1, #2
   1ae90:	e3400002 	movt	r0, #2
   1ae94:	e3002522 	movw	r2, #1314	; 0x522
   1ae98:	eb00273f 	bl	24b9c <assertion_failed>
   1ae9c:	e5940004 	ldr	r0, [r4, #4]
   1aea0:	eaffffe8 	b	1ae48 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x60>

0001aea4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1aea4:	e92d4070 	push	{r4, r5, r6, lr}
   1aea8:	e24dd008 	sub	sp, sp, #8
   1aeac:	e3a0c006 	mov	ip, #6
   1aeb0:	e1a04000 	mov	r4, r0
   1aeb4:	e58dc000 	str	ip, [sp]
   1aeb8:	e3a05000 	mov	r5, #0
   1aebc:	ebfffc46 	bl	19fdc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1aec0:	e59f30b0 	ldr	r3, [pc, #176]	; 1af78 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xd4>
   1aec4:	e3a06001 	mov	r6, #1
   1aec8:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1aecc:	e5c46030 	strb	r6, [r4, #48]	; 0x30
   1aed0:	e2840038 	add	r0, r4, #56	; 0x38
   1aed4:	e5843000 	str	r3, [r4]
   1aed8:	e5845034 	str	r5, [r4, #52]	; 0x34
   1aedc:	eb000c0c 	bl	1df14 <CNetQueue::CNetQueue()>
   1aee0:	e2840044 	add	r0, r4, #68	; 0x44
   1aee4:	eb000c0a 	bl	1df14 <CNetQueue::CNetQueue()>
   1aee8:	e2840050 	add	r0, r4, #80	; 0x50
   1aeec:	e3a01801 	mov	r1, #65536	; 0x10000
   1aef0:	eb000767 	bl	1cc94 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1aef4:	e5845064 	str	r5, [r4, #100]	; 0x64
   1aef8:	e1a01005 	mov	r1, r5
   1aefc:	e5845068 	str	r5, [r4, #104]	; 0x68
   1af00:	e2840084 	add	r0, r4, #132	; 0x84
   1af04:	e584506c 	str	r5, [r4, #108]	; 0x6c
   1af08:	e5845074 	str	r5, [r4, #116]	; 0x74
   1af0c:	e5845078 	str	r5, [r4, #120]	; 0x78
   1af10:	eb00170b 	bl	20b44 <CSynchronizationEvent::CSynchronizationEvent(int)>
   1af14:	eb001f7a 	bl	22d04 <CTimer::Get()>
   1af18:	e3033908 	movw	r3, #14600	; 0x3908
   1af1c:	e3a02f86 	mov	r2, #536	; 0x218
   1af20:	e58430a8 	str	r3, [r4, #168]	; 0xa8
   1af24:	e1c42cb8 	strh	r2, [r4, #200]	; 0xc8
   1af28:	e58430c0 	str	r3, [r4, #192]	; 0xc0
   1af2c:	e584609c 	str	r6, [r4, #156]	; 0x9c
   1af30:	e1c45abc 	strh	r5, [r4, #172]	; 0xac
   1af34:	e58450bc 	str	r5, [r4, #188]	; 0xbc
   1af38:	e58450c4 	str	r5, [r4, #196]	; 0xc4
   1af3c:	e584008c 	str	r0, [r4, #140]	; 0x8c
   1af40:	e28400cc 	add	r0, r4, #204	; 0xcc
   1af44:	eb000873 	bl	1d118 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1af48:	e3a00d19 	mov	r0, #1600	; 0x640
   1af4c:	eb001c07 	bl	21f70 <operator new[](unsigned int)>
   1af50:	e584007c 	str	r0, [r4, #124]	; 0x7c
   1af54:	e3a00d19 	mov	r0, #1600	; 0x640
   1af58:	eb001c04 	bl	21f70 <operator new[](unsigned int)>
   1af5c:	e5845090 	str	r5, [r4, #144]	; 0x90
   1af60:	e5845094 	str	r5, [r4, #148]	; 0x94
   1af64:	e5845098 	str	r5, [r4, #152]	; 0x98
   1af68:	e5840080 	str	r0, [r4, #128]	; 0x80
   1af6c:	e1a00004 	mov	r0, r4
   1af70:	e28dd008 	add	sp, sp, #8
   1af74:	e8bd8070 	pop	{r4, r5, r6, pc}
   1af78:	0002eb74 	.word	0x0002eb74

0001af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   1af7c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af80:	e24dd014 	sub	sp, sp, #20
   1af84:	e201bc02 	and	fp, r1, #512	; 0x200
   1af88:	e1a07001 	mov	r7, r1
   1af8c:	e35b0000 	cmp	fp, #0
   1af90:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
   1af94:	e58d3008 	str	r3, [sp, #8]
   1af98:	e1a05000 	mov	r5, r0
   1af9c:	13a01060 	movne	r1, #96	; 0x60
   1afa0:	03a01050 	moveq	r1, #80	; 0x50
   1afa4:	13a08018 	movne	r8, #24
   1afa8:	03a08014 	moveq	r8, #20
   1afac:	e096a008 	adds	sl, r6, r8
   1afb0:	e58d1004 	str	r1, [sp, #4]
   1afb4:	e1a09002 	mov	r9, r2
   1afb8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1afbc:	2a00005b 	bcs	1b130 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x1b4>
   1afc0:	e595407c 	ldr	r4, [r5, #124]	; 0x7c
   1afc4:	e3540000 	cmp	r4, #0
   1afc8:	0a000044 	beq	1b0e0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1afcc:	e1d521b4 	ldrh	r2, [r5, #20]
   1afd0:	e2170a01 	ands	r0, r7, #4096	; 0x1000
   1afd4:	e1d511b6 	ldrh	r1, [r5, #22]
   1afd8:	e6bf9f39 	rev	r9, r9
   1afdc:	e6bf2fb2 	rev16	r2, r2
   1afe0:	e1c420b2 	strh	r2, [r4, #2]
   1afe4:	159d2008 	ldrne	r2, [sp, #8]
   1afe8:	e6bf1fb1 	rev16	r1, r1
   1afec:	e59dc004 	ldr	ip, [sp, #4]
   1aff0:	16bf0f32 	revne	r0, r2
   1aff4:	e1c410b0 	strh	r1, [r4]
   1aff8:	e1d52abc 	ldrh	r2, [r5, #172]	; 0xac
   1affc:	e35b0000 	cmp	fp, #0
   1b000:	e59510c0 	ldr	r1, [r5, #192]	; 0xc0
   1b004:	e18c7007 	orr	r7, ip, r7
   1b008:	e6bf2fb2 	rev16	r2, r2
   1b00c:	e5849004 	str	r9, [r4, #4]
   1b010:	e6bf1fb1 	rev16	r1, r1
   1b014:	e5840008 	str	r0, [r4, #8]
   1b018:	e1c470bc 	strh	r7, [r4, #12]
   1b01c:	e1c410be 	strh	r1, [r4, #14]
   1b020:	e1c421b2 	strh	r2, [r4, #18]
   1b024:	0a000007 	beq	1b048 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xcc>
   1b028:	e3a02002 	mov	r2, #2
   1b02c:	e5c42014 	strb	r2, [r4, #20]
   1b030:	e3a02004 	mov	r2, #4
   1b034:	e5c42015 	strb	r2, [r4, #21]
   1b038:	e3a02005 	mov	r2, #5
   1b03c:	e5c42016 	strb	r2, [r4, #22]
   1b040:	e3e0204b 	mvn	r2, #75	; 0x4b
   1b044:	e5c42017 	strb	r2, [r4, #23]
   1b048:	e3560000 	cmp	r6, #0
   1b04c:	01a01004 	moveq	r1, r4
   1b050:	0a000007 	beq	1b074 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xf8>
   1b054:	e3530000 	cmp	r3, #0
   1b058:	11a00004 	movne	r0, r4
   1b05c:	0a000029 	beq	1b108 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x18c>
   1b060:	e1a01003 	mov	r1, r3
   1b064:	e1a02006 	mov	r2, r6
   1b068:	e0800008 	add	r0, r0, r8
   1b06c:	eb00204a 	bl	2319c <memcpy>
   1b070:	e595107c 	ldr	r1, [r5, #124]	; 0x7c
   1b074:	e3a03000 	mov	r3, #0
   1b078:	e1a0200a 	mov	r2, sl
   1b07c:	e5c43010 	strb	r3, [r4, #16]
   1b080:	e285001c 	add	r0, r5, #28
   1b084:	e5c43011 	strb	r3, [r4, #17]
   1b088:	eb000ce0 	bl	1e410 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1b08c:	e5951008 	ldr	r1, [r5, #8]
   1b090:	e3510000 	cmp	r1, #0
   1b094:	e1c401b0 	strh	r0, [r4, #16]
   1b098:	0a000008 	beq	1b0c0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x144>
   1b09c:	e595207c 	ldr	r2, [r5, #124]	; 0x7c
   1b0a0:	e1a00001 	mov	r0, r1
   1b0a4:	e3a0c006 	mov	ip, #6
   1b0a8:	e1a0300a 	mov	r3, sl
   1b0ac:	e285100c 	add	r1, r5, #12
   1b0b0:	e58dc038 	str	ip, [sp, #56]	; 0x38
   1b0b4:	e28dd014 	add	sp, sp, #20
   1b0b8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0bc:	eafff37c 	b	17eb4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1b0c0:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b0c4:	e30e0698 	movw	r0, #59032	; 0xe698
   1b0c8:	e3401002 	movt	r1, #2
   1b0cc:	e3400002 	movt	r0, #2
   1b0d0:	e300256c 	movw	r2, #1388	; 0x56c
   1b0d4:	eb0026b0 	bl	24b9c <assertion_failed>
   1b0d8:	e5951008 	ldr	r1, [r5, #8]
   1b0dc:	eaffffee 	b	1b09c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x120>
   1b0e0:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b0e4:	e30c05d8 	movw	r0, #50648	; 0xc5d8
   1b0e8:	e3401002 	movt	r1, #2
   1b0ec:	e3400002 	movt	r0, #2
   1b0f0:	e300253f 	movw	r2, #1343	; 0x53f
   1b0f4:	e58d300c 	str	r3, [sp, #12]
   1b0f8:	eb0026a7 	bl	24b9c <assertion_failed>
   1b0fc:	e595407c 	ldr	r4, [r5, #124]	; 0x7c
   1b100:	e59d300c 	ldr	r3, [sp, #12]
   1b104:	eaffffb0 	b	1afcc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x50>
   1b108:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b10c:	e30e06ec 	movw	r0, #59116	; 0xe6ec
   1b110:	e3401002 	movt	r1, #2
   1b114:	e3400002 	movt	r0, #2
   1b118:	e3002556 	movw	r2, #1366	; 0x556
   1b11c:	e58d3004 	str	r3, [sp, #4]
   1b120:	eb00269d 	bl	24b9c <assertion_failed>
   1b124:	e595007c 	ldr	r0, [r5, #124]	; 0x7c
   1b128:	e59d3004 	ldr	r3, [sp, #4]
   1b12c:	eaffffcb 	b	1b060 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xe4>
   1b130:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b134:	e30e0bf0 	movw	r0, #60400	; 0xebf0
   1b138:	e3401002 	movt	r1, #2
   1b13c:	e3400002 	movt	r0, #2
   1b140:	e300253c 	movw	r2, #1340	; 0x53c
   1b144:	e58d300c 	str	r3, [sp, #12]
   1b148:	eb002693 	bl	24b9c <assertion_failed>
   1b14c:	e59d300c 	ldr	r3, [sp, #12]
   1b150:	eaffff9a 	b	1afc0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x44>

0001b154 <CTCPConnection::ScanOptions(TTCPHeader*)>:
   1b154:	e92d4070 	push	{r4, r5, r6, lr}
   1b158:	e2514000 	subs	r4, r1, #0
   1b15c:	e1a05000 	mov	r5, r0
   1b160:	0a000021 	beq	1b1ec <CTCPConnection::ScanOptions(TTCPHeader*)+0x98>
   1b164:	e1d420bc 	ldrh	r2, [r4, #12]
   1b168:	e2843014 	add	r3, r4, #20
   1b16c:	e300c5c8 	movw	ip, #1480	; 0x5c8
   1b170:	e7e32252 	ubfx	r2, r2, #4, #4
   1b174:	e0842102 	add	r2, r4, r2, lsl #2
   1b178:	e2831002 	add	r1, r3, #2
   1b17c:	e1520001 	cmp	r2, r1
   1b180:	38bd8070 	popcc	{r4, r5, r6, pc}
   1b184:	e5d31000 	ldrb	r1, [r3]
   1b188:	e3510001 	cmp	r1, #1
   1b18c:	0a000007 	beq	1b1b0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x5c>
   1b190:	38bd8070 	popcc	{r4, r5, r6, pc}
   1b194:	e3510002 	cmp	r1, #2
   1b198:	e5d31001 	ldrb	r1, [r3, #1]
   1b19c:	1a000001 	bne	1b1a8 <CTCPConnection::ScanOptions(TTCPHeader*)+0x54>
   1b1a0:	e3510004 	cmp	r1, #4
   1b1a4:	0a000003 	beq	1b1b8 <CTCPConnection::ScanOptions(TTCPHeader*)+0x64>
   1b1a8:	e0833001 	add	r3, r3, r1
   1b1ac:	eafffff1 	b	1b178 <CTCPConnection::ScanOptions(TTCPHeader*)+0x24>
   1b1b0:	e2833001 	add	r3, r3, #1
   1b1b4:	eaffffef 	b	1b178 <CTCPConnection::ScanOptions(TTCPHeader*)+0x24>
   1b1b8:	e2830004 	add	r0, r3, #4
   1b1bc:	e1520000 	cmp	r2, r0
   1b1c0:	3afffff8 	bcc	1b1a8 <CTCPConnection::ScanOptions(TTCPHeader*)+0x54>
   1b1c4:	e5d3e002 	ldrb	lr, [r3, #2]
   1b1c8:	e5d30003 	ldrb	r0, [r3, #3]
   1b1cc:	e180040e 	orr	r0, r0, lr, lsl #8
   1b1d0:	e2800014 	add	r0, r0, #20
   1b1d4:	e150000c 	cmp	r0, ip
   1b1d8:	21a0000c 	movcs	r0, ip
   1b1dc:	e2400014 	sub	r0, r0, #20
   1b1e0:	e3500009 	cmp	r0, #9
   1b1e4:	81c50cb8 	strhhi	r0, [r5, #200]	; 0xc8
   1b1e8:	eaffffee 	b	1b1a8 <CTCPConnection::ScanOptions(TTCPHeader*)+0x54>
   1b1ec:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b1f0:	e30e0c10 	movw	r0, #60432	; 0xec10
   1b1f4:	e3401002 	movt	r1, #2
   1b1f8:	e3400002 	movt	r0, #2
   1b1fc:	e3002572 	movw	r2, #1394	; 0x572
   1b200:	eb002665 	bl	24b9c <assertion_failed>
   1b204:	eaffffd6 	b	1b164 <CTCPConnection::ScanOptions(TTCPHeader*)+0x10>

0001b208 <CTCPConnection::CalculateISN()>:
   1b208:	e92d4070 	push	{r4, r5, r6, lr}
   1b20c:	e1a05000 	mov	r5, r0
   1b210:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
   1b214:	e3500000 	cmp	r0, #0
   1b218:	0a00000d 	beq	1b254 <CTCPConnection::CalculateISN()+0x4c>
   1b21c:	eb001c6c 	bl	223d4 <CTimer::GetTime() const>
   1b220:	e1a04000 	mov	r4, r0
   1b224:	e595008c 	ldr	r0, [r5, #140]	; 0x8c
   1b228:	eb001c65 	bl	223c4 <CTimer::GetTicks() const>
   1b22c:	e308251f 	movw	r2, #34079	; 0x851f
   1b230:	e34521eb 	movt	r2, #20971	; 0x51eb
   1b234:	e3a01064 	mov	r1, #100	; 0x64
   1b238:	e3a0c015 	mov	ip, #21
   1b23c:	e0832290 	umull	r2, r3, r0, r2
   1b240:	e1a032a3 	lsr	r3, r3, #5
   1b244:	e0630391 	mls	r3, r1, r3, r0
   1b248:	e0243491 	mla	r4, r1, r4, r3
   1b24c:	e000049c 	mul	r0, ip, r4
   1b250:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b254:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b258:	e30a0988 	movw	r0, #43400	; 0xa988
   1b25c:	e3401002 	movt	r1, #2
   1b260:	e3400002 	movt	r0, #2
   1b264:	e300259b 	movw	r2, #1435	; 0x59b
   1b268:	eb00264b 	bl	24b9c <assertion_failed>
   1b26c:	e595008c 	ldr	r0, [r5, #140]	; 0x8c
   1b270:	eaffffe9 	b	1b21c <CTCPConnection::CalculateISN()+0x14>

0001b274 <CTCPConnection::StopTimer(unsigned int)>:
   1b274:	e3510002 	cmp	r1, #2
   1b278:	e92d4070 	push	{r4, r5, r6, lr}
   1b27c:	e1a04001 	mov	r4, r1
   1b280:	e1a05000 	mov	r5, r0
   1b284:	8a00000a 	bhi	1b2b4 <CTCPConnection::StopTimer(unsigned int)+0x40>
   1b288:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1b28c:	e3530000 	cmp	r3, #0
   1b290:	0a00001b 	beq	1b304 <CTCPConnection::StopTimer(unsigned int)+0x90>
   1b294:	e595009c 	ldr	r0, [r5, #156]	; 0x9c
   1b298:	e2844024 	add	r4, r4, #36	; 0x24
   1b29c:	e3500000 	cmp	r0, #0
   1b2a0:	1a00000a 	bne	1b2d0 <CTCPConnection::StopTimer(unsigned int)+0x5c>
   1b2a4:	e7951104 	ldr	r1, [r5, r4, lsl #2]
   1b2a8:	e3510000 	cmp	r1, #0
   1b2ac:	1a00000b 	bne	1b2e0 <CTCPConnection::StopTimer(unsigned int)+0x6c>
   1b2b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b2b4:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b2b8:	e30e0c20 	movw	r0, #60448	; 0xec20
   1b2bc:	e3401002 	movt	r1, #2
   1b2c0:	e3400002 	movt	r0, #2
   1b2c4:	e30025ae 	movw	r2, #1454	; 0x5ae
   1b2c8:	eb002633 	bl	24b9c <assertion_failed>
   1b2cc:	eaffffed 	b	1b288 <CTCPConnection::StopTimer(unsigned int)+0x14>
   1b2d0:	eb001b31 	bl	21f9c <EnterCritical>
   1b2d4:	e7951104 	ldr	r1, [r5, r4, lsl #2]
   1b2d8:	e3510000 	cmp	r1, #0
   1b2dc:	0a000003 	beq	1b2f0 <CTCPConnection::StopTimer(unsigned int)+0x7c>
   1b2e0:	e595008c 	ldr	r0, [r5, #140]	; 0x8c
   1b2e4:	eb001d17 	bl	22748 <CTimer::CancelKernelTimer(unsigned int)>
   1b2e8:	e3a03000 	mov	r3, #0
   1b2ec:	e7853104 	str	r3, [r5, r4, lsl #2]
   1b2f0:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   1b2f4:	e3530000 	cmp	r3, #0
   1b2f8:	08bd8070 	popeq	{r4, r5, r6, pc}
   1b2fc:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b300:	ea001b53 	b	22054 <LeaveCritical>
   1b304:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b308:	e30a0988 	movw	r0, #43400	; 0xa988
   1b30c:	e3401002 	movt	r1, #2
   1b310:	e3400002 	movt	r0, #2
   1b314:	e30025af 	movw	r2, #1455	; 0x5af
   1b318:	eb00261f 	bl	24b9c <assertion_failed>
   1b31c:	eaffffdc 	b	1b294 <CTCPConnection::StopTimer(unsigned int)+0x20>

0001b320 <CTCPConnection::~CTCPConnection()>:
   1b320:	e5d02030 	ldrb	r2, [r0, #48]	; 0x30
   1b324:	e59f30ac 	ldr	r3, [pc, #172]	; 1b3d8 <CTCPConnection::~CTCPConnection()+0xb8>
   1b328:	e3520000 	cmp	r2, #0
   1b32c:	e92d4070 	push	{r4, r5, r6, lr}
   1b330:	e1a04000 	mov	r4, r0
   1b334:	e5803000 	str	r3, [r0]
   1b338:	1a00001f 	bne	1b3bc <CTCPConnection::~CTCPConnection()+0x9c>
   1b33c:	e1a00004 	mov	r0, r4
   1b340:	e3a01000 	mov	r1, #0
   1b344:	ebffffca 	bl	1b274 <CTCPConnection::StopTimer(unsigned int)>
   1b348:	e1a00004 	mov	r0, r4
   1b34c:	e3a01001 	mov	r1, #1
   1b350:	e3a05000 	mov	r5, #0
   1b354:	ebffffc6 	bl	1b274 <CTCPConnection::StopTimer(unsigned int)>
   1b358:	e1a00004 	mov	r0, r4
   1b35c:	e3a01002 	mov	r1, #2
   1b360:	ebffffc3 	bl	1b274 <CTCPConnection::StopTimer(unsigned int)>
   1b364:	e5940080 	ldr	r0, [r4, #128]	; 0x80
   1b368:	e3a01001 	mov	r1, #1
   1b36c:	eb001b02 	bl	21f7c <operator delete(void*, unsigned int)>
   1b370:	e3a01001 	mov	r1, #1
   1b374:	e594007c 	ldr	r0, [r4, #124]	; 0x7c
   1b378:	e5845080 	str	r5, [r4, #128]	; 0x80
   1b37c:	eb001afe 	bl	21f7c <operator delete(void*, unsigned int)>
   1b380:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1b384:	e28400cc 	add	r0, r4, #204	; 0xcc
   1b388:	eb00077b 	bl	1d17c <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   1b38c:	e2840084 	add	r0, r4, #132	; 0x84
   1b390:	eb0015ef 	bl	20b54 <CSynchronizationEvent::~CSynchronizationEvent()>
   1b394:	e2840050 	add	r0, r4, #80	; 0x50
   1b398:	eb000653 	bl	1ccec <CRetransmissionQueue::~CRetransmissionQueue()>
   1b39c:	e2840044 	add	r0, r4, #68	; 0x44
   1b3a0:	eb000b1f 	bl	1e024 <CNetQueue::~CNetQueue()>
   1b3a4:	e2840038 	add	r0, r4, #56	; 0x38
   1b3a8:	eb000b1d 	bl	1e024 <CNetQueue::~CNetQueue()>
   1b3ac:	e1a00004 	mov	r0, r4
   1b3b0:	ebfffb34 	bl	1a088 <CNetConnection::~CNetConnection()>
   1b3b4:	e1a00004 	mov	r0, r4
   1b3b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b3bc:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b3c0:	e30e0c3c 	movw	r0, #60476	; 0xec3c
   1b3c4:	e3401002 	movt	r1, #2
   1b3c8:	e3400002 	movt	r0, #2
   1b3cc:	e3a020d4 	mov	r2, #212	; 0xd4
   1b3d0:	eb0025f1 	bl	24b9c <assertion_failed>
   1b3d4:	eaffffd8 	b	1b33c <CTCPConnection::~CTCPConnection()+0x1c>
   1b3d8:	0002eb74 	.word	0x0002eb74

0001b3dc <CTCPConnection::~CTCPConnection()>:
   1b3dc:	e92d4010 	push	{r4, lr}
   1b3e0:	e1a04000 	mov	r4, r0
   1b3e4:	ebffffcd 	bl	1b320 <CTCPConnection::~CTCPConnection()>
   1b3e8:	e1a00004 	mov	r0, r4
   1b3ec:	e3a010f4 	mov	r1, #244	; 0xf4
   1b3f0:	eb001ae1 	bl	21f7c <operator delete(void*, unsigned int)>
   1b3f4:	e1a00004 	mov	r0, r4
   1b3f8:	e8bd8010 	pop	{r4, pc}

0001b3fc <CTCPConnection::Close()>:
   1b3fc:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1b400:	e3530000 	cmp	r3, #0
   1b404:	ba000036 	blt	1b4e4 <CTCPConnection::Close()+0xe8>
   1b408:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1b40c:	e92d4010 	push	{r4, lr}
   1b410:	e1a04000 	mov	r4, r0
   1b414:	e353000a 	cmp	r3, #10
   1b418:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1b41c:	ea000013 	b	1b470 <CTCPConnection::Close()+0x74>
   1b420:	0001b48c 	.word	0x0001b48c
   1b424:	0001b494 	.word	0x0001b494
   1b428:	0001b494 	.word	0x0001b494
   1b42c:	0001b4b4 	.word	0x0001b4b4
   1b430:	0001b4b4 	.word	0x0001b4b4
   1b434:	0001b470 	.word	0x0001b470
   1b438:	0001b470 	.word	0x0001b470
   1b43c:	0001b44c 	.word	0x0001b44c
   1b440:	0001b48c 	.word	0x0001b48c
   1b444:	0001b48c 	.word	0x0001b48c
   1b448:	0001b48c 	.word	0x0001b48c
   1b44c:	e590306c 	ldr	r3, [r0, #108]	; 0x6c
   1b450:	e3530000 	cmp	r3, #0
   1b454:	1a00002b 	bne	1b508 <CTCPConnection::Close()+0x10c>
   1b458:	e3a03005 	mov	r3, #5
   1b45c:	e3a02009 	mov	r2, #9
   1b460:	e5843074 	str	r3, [r4, #116]	; 0x74
   1b464:	e3a03001 	mov	r3, #1
   1b468:	e5c42070 	strb	r2, [r4, #112]	; 0x70
   1b46c:	e584306c 	str	r3, [r4, #108]	; 0x6c
   1b470:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1b474:	e3530000 	cmp	r3, #0
   1b478:	ba000001 	blt	1b484 <CTCPConnection::Close()+0x88>
   1b47c:	e3a00000 	mov	r0, #0
   1b480:	e8bd8010 	pop	{r4, pc}
   1b484:	e5940034 	ldr	r0, [r4, #52]	; 0x34
   1b488:	e8bd8010 	pop	{r4, pc}
   1b48c:	e3e00000 	mvn	r0, #0
   1b490:	e8bd8010 	pop	{r4, pc}
   1b494:	e3a01001 	mov	r1, #1
   1b498:	ebffff75 	bl	1b274 <CTCPConnection::StopTimer(unsigned int)>
   1b49c:	e3a03000 	mov	r3, #0
   1b4a0:	e5c43030 	strb	r3, [r4, #48]	; 0x30
   1b4a4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1b4a8:	e3530000 	cmp	r3, #0
   1b4ac:	aafffff2 	bge	1b47c <CTCPConnection::Close()+0x80>
   1b4b0:	eafffff3 	b	1b484 <CTCPConnection::Close()+0x88>
   1b4b4:	e590306c 	ldr	r3, [r0, #108]	; 0x6c
   1b4b8:	e3530000 	cmp	r3, #0
   1b4bc:	1a00000a 	bne	1b4ec <CTCPConnection::Close()+0xf0>
   1b4c0:	e3a03005 	mov	r3, #5
   1b4c4:	e3a02001 	mov	r2, #1
   1b4c8:	e5843074 	str	r3, [r4, #116]	; 0x74
   1b4cc:	e5c43070 	strb	r3, [r4, #112]	; 0x70
   1b4d0:	e584206c 	str	r2, [r4, #108]	; 0x6c
   1b4d4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1b4d8:	e3530000 	cmp	r3, #0
   1b4dc:	aaffffe6 	bge	1b47c <CTCPConnection::Close()+0x80>
   1b4e0:	eaffffe7 	b	1b484 <CTCPConnection::Close()+0x88>
   1b4e4:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   1b4e8:	e12fff1e 	bx	lr
   1b4ec:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b4f0:	e30e0c58 	movw	r0, #60504	; 0xec58
   1b4f4:	e3401002 	movt	r1, #2
   1b4f8:	e3400002 	movt	r0, #2
   1b4fc:	e3002142 	movw	r2, #322	; 0x142
   1b500:	eb0025a5 	bl	24b9c <assertion_failed>
   1b504:	eaffffed 	b	1b4c0 <CTCPConnection::Close()+0xc4>
   1b508:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b50c:	e30e0c58 	movw	r0, #60504	; 0xec58
   1b510:	e3401002 	movt	r1, #2
   1b514:	e3400002 	movt	r0, #2
   1b518:	e300214d 	movw	r2, #333	; 0x14d
   1b51c:	eb00259e 	bl	24b9c <assertion_failed>
   1b520:	eaffffcc 	b	1b458 <CTCPConnection::Close()+0x5c>

0001b524 <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   1b524:	e3510002 	cmp	r1, #2
   1b528:	e92d4070 	push	{r4, r5, r6, lr}
   1b52c:	e1a04001 	mov	r4, r1
   1b530:	e24dd008 	sub	sp, sp, #8
   1b534:	e1a05000 	mov	r5, r0
   1b538:	e1a06002 	mov	r6, r2
   1b53c:	8a000012 	bhi	1b58c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x68>
   1b540:	e3560000 	cmp	r6, #0
   1b544:	0a000018 	beq	1b5ac <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x88>
   1b548:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1b54c:	e3530000 	cmp	r3, #0
   1b550:	0a00001e 	beq	1b5d0 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xac>
   1b554:	e1a01004 	mov	r1, r4
   1b558:	e1a00005 	mov	r0, r5
   1b55c:	ebffff44 	bl	1b274 <CTCPConnection::StopTimer(unsigned int)>
   1b560:	e595008c 	ldr	r0, [r5, #140]	; 0x8c
   1b564:	e1a03004 	mov	r3, r4
   1b568:	e58d5000 	str	r5, [sp]
   1b56c:	e1a01006 	mov	r1, r6
   1b570:	e30c2c38 	movw	r2, #52280	; 0xcc38
   1b574:	e3402001 	movt	r2, #1
   1b578:	e2844024 	add	r4, r4, #36	; 0x24
   1b57c:	eb001c19 	bl	225e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1b580:	e7850104 	str	r0, [r5, r4, lsl #2]
   1b584:	e28dd008 	add	sp, sp, #8
   1b588:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b58c:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b590:	e30e0c20 	movw	r0, #60448	; 0xec20
   1b594:	e3401002 	movt	r1, #2
   1b598:	e3400002 	movt	r0, #2
   1b59c:	e30025a3 	movw	r2, #1443	; 0x5a3
   1b5a0:	eb00257d 	bl	24b9c <assertion_failed>
   1b5a4:	e3560000 	cmp	r6, #0
   1b5a8:	1affffe6 	bne	1b548 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x24>
   1b5ac:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b5b0:	e30e0c68 	movw	r0, #60520	; 0xec68
   1b5b4:	e3401002 	movt	r1, #2
   1b5b8:	e3400002 	movt	r0, #2
   1b5bc:	e30025a4 	movw	r2, #1444	; 0x5a4
   1b5c0:	eb002575 	bl	24b9c <assertion_failed>
   1b5c4:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1b5c8:	e3530000 	cmp	r3, #0
   1b5cc:	1affffe0 	bne	1b554 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x30>
   1b5d0:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1b5d4:	e30a0988 	movw	r0, #43400	; 0xa988
   1b5d8:	e3401002 	movt	r1, #2
   1b5dc:	e3400002 	movt	r0, #2
   1b5e0:	e30025a5 	movw	r2, #1445	; 0x5a5
   1b5e4:	eb00256c 	bl	24b9c <assertion_failed>
   1b5e8:	eaffffd9 	b	1b554 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x30>

0001b5ec <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1b5ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b5f0:	e24dd014 	sub	sp, sp, #20
   1b5f4:	e3a05006 	mov	r5, #6
   1b5f8:	e1a04000 	mov	r4, r0
   1b5fc:	e1dde2b8 	ldrh	lr, [sp, #40]	; 0x28
   1b600:	e28070cc 	add	r7, r0, #204	; 0xcc
   1b604:	e1ddc2bc 	ldrh	ip, [sp, #44]	; 0x2c
   1b608:	e3a06001 	mov	r6, #1
   1b60c:	e58d5008 	str	r5, [sp, #8]
   1b610:	e3a05000 	mov	r5, #0
   1b614:	e58de000 	str	lr, [sp]
   1b618:	e58dc004 	str	ip, [sp, #4]
   1b61c:	ebfffa3e 	bl	19f1c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1b620:	e59f312c 	ldr	r3, [pc, #300]	; 1b754 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x168>
   1b624:	e5c45030 	strb	r5, [r4, #48]	; 0x30
   1b628:	e2840038 	add	r0, r4, #56	; 0x38
   1b62c:	e5845034 	str	r5, [r4, #52]	; 0x34
   1b630:	e5843000 	str	r3, [r4]
   1b634:	e584602c 	str	r6, [r4, #44]	; 0x2c
   1b638:	eb000a35 	bl	1df14 <CNetQueue::CNetQueue()>
   1b63c:	e2840044 	add	r0, r4, #68	; 0x44
   1b640:	eb000a33 	bl	1df14 <CNetQueue::CNetQueue()>
   1b644:	e3a01801 	mov	r1, #65536	; 0x10000
   1b648:	e2840050 	add	r0, r4, #80	; 0x50
   1b64c:	eb000590 	bl	1cc94 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1b650:	e1a01005 	mov	r1, r5
   1b654:	e5845064 	str	r5, [r4, #100]	; 0x64
   1b658:	e2840084 	add	r0, r4, #132	; 0x84
   1b65c:	e5845068 	str	r5, [r4, #104]	; 0x68
   1b660:	e584506c 	str	r5, [r4, #108]	; 0x6c
   1b664:	e5845074 	str	r5, [r4, #116]	; 0x74
   1b668:	e5845078 	str	r5, [r4, #120]	; 0x78
   1b66c:	eb001534 	bl	20b44 <CSynchronizationEvent::CSynchronizationEvent(int)>
   1b670:	eb001da3 	bl	22d04 <CTimer::Get()>
   1b674:	e3033908 	movw	r3, #14600	; 0x3908
   1b678:	e3a02f86 	mov	r2, #536	; 0x218
   1b67c:	e58430a8 	str	r3, [r4, #168]	; 0xa8
   1b680:	e1c42cb8 	strh	r2, [r4, #200]	; 0xc8
   1b684:	e58430c0 	str	r3, [r4, #192]	; 0xc0
   1b688:	e584609c 	str	r6, [r4, #156]	; 0x9c
   1b68c:	e1c45abc 	strh	r5, [r4, #172]	; 0xac
   1b690:	e58450bc 	str	r5, [r4, #188]	; 0xbc
   1b694:	e58450c4 	str	r5, [r4, #196]	; 0xc4
   1b698:	e584008c 	str	r0, [r4, #140]	; 0x8c
   1b69c:	e1a00007 	mov	r0, r7
   1b6a0:	eb00069c 	bl	1d118 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1b6a4:	e3a00d19 	mov	r0, #1600	; 0x640
   1b6a8:	eb001a30 	bl	21f70 <operator new[](unsigned int)>
   1b6ac:	e584007c 	str	r0, [r4, #124]	; 0x7c
   1b6b0:	e3a00d19 	mov	r0, #1600	; 0x640
   1b6b4:	eb001a2d 	bl	21f70 <operator new[](unsigned int)>
   1b6b8:	e5845090 	str	r5, [r4, #144]	; 0x90
   1b6bc:	e5845094 	str	r5, [r4, #148]	; 0x94
   1b6c0:	e5845098 	str	r5, [r4, #152]	; 0x98
   1b6c4:	e5840080 	str	r0, [r4, #128]	; 0x80
   1b6c8:	e1a00004 	mov	r0, r4
   1b6cc:	ebfffecd 	bl	1b208 <CTCPConnection::CalculateISN()>
   1b6d0:	e1a01000 	mov	r1, r0
   1b6d4:	e58400b8 	str	r0, [r4, #184]	; 0xb8
   1b6d8:	e1a00007 	mov	r0, r7
   1b6dc:	eb0006a9 	bl	1d188 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1b6e0:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1b6e4:	e1a03005 	mov	r3, r5
   1b6e8:	e58d5004 	str	r5, [sp, #4]
   1b6ec:	e58d5000 	str	r5, [sp]
   1b6f0:	e0821006 	add	r1, r2, r6
   1b6f4:	e58420a0 	str	r2, [r4, #160]	; 0xa0
   1b6f8:	e1a00004 	mov	r0, r4
   1b6fc:	e58410a4 	str	r1, [r4, #164]	; 0xa4
   1b700:	e3a01c02 	mov	r1, #512	; 0x200
   1b704:	ebfffe1c 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1b708:	e1500005 	cmp	r0, r5
   1b70c:	0a00000d 	beq	1b748 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x15c>
   1b710:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
   1b714:	e1a02006 	mov	r2, r6
   1b718:	e1a00007 	mov	r0, r7
   1b71c:	eb0006b6 	bl	1d1fc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1b720:	e3a02002 	mov	r2, #2
   1b724:	e3a03005 	mov	r3, #5
   1b728:	e5c42030 	strb	r2, [r4, #48]	; 0x30
   1b72c:	e1a00007 	mov	r0, r7
   1b730:	e5843074 	str	r3, [r4, #116]	; 0x74
   1b734:	eb000691 	bl	1d180 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1b738:	e1a01006 	mov	r1, r6
   1b73c:	e1a02000 	mov	r2, r0
   1b740:	e1a00004 	mov	r0, r4
   1b744:	ebffff76 	bl	1b524 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1b748:	e1a00004 	mov	r0, r4
   1b74c:	e28dd014 	add	sp, sp, #20
   1b750:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b754:	0002eb74 	.word	0x0002eb74

0001b758 <CTCPConnection::Process()>:
   1b758:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1b75c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1b760:	e3530000 	cmp	r3, #0
   1b764:	e24dd00c 	sub	sp, sp, #12
   1b768:	e1a04000 	mov	r4, r0
   1b76c:	1a000080 	bne	1b974 <CTCPConnection::Process()+0x21c>
   1b770:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1b774:	e6ef3073 	uxtb	r3, r3
   1b778:	e353000a 	cmp	r3, #10
   1b77c:	9a000015 	bls	1b7d8 <CTCPConnection::Process()+0x80>
   1b780:	e2846050 	add	r6, r4, #80	; 0x50
   1b784:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   1b788:	e3530000 	cmp	r3, #0
   1b78c:	0a0000ac 	beq	1ba44 <CTCPConnection::Process()+0x2ec>
   1b790:	e2845038 	add	r5, r4, #56	; 0x38
   1b794:	e1a00006 	mov	r0, r6
   1b798:	eb000560 	bl	1cd20 <CRetransmissionQueue::GetFreeSpace() const>
   1b79c:	e3500d19 	cmp	r0, #1600	; 0x640
   1b7a0:	2a00005e 	bcs	1b920 <CTCPConnection::Process()+0x1c8>
   1b7a4:	e5943064 	ldr	r3, [r4, #100]	; 0x64
   1b7a8:	e3530000 	cmp	r3, #0
   1b7ac:	1a00009d 	bne	1ba28 <CTCPConnection::Process()+0x2d0>
   1b7b0:	e30e8bdc 	movw	r8, #60380	; 0xebdc
   1b7b4:	e30c7380 	movw	r7, #50048	; 0xc380
   1b7b8:	e3408002 	movt	r8, #2
   1b7bc:	e3407002 	movt	r7, #2
   1b7c0:	e1a00006 	mov	r0, r6
   1b7c4:	eb0005bd 	bl	1cec0 <CRetransmissionQueue::GetBytesAvailable() const>
   1b7c8:	e3500000 	cmp	r0, #0
   1b7cc:	1a000027 	bne	1b870 <CTCPConnection::Process()+0x118>
   1b7d0:	e28dd00c 	add	sp, sp, #12
   1b7d4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b7d8:	e3a07001 	mov	r7, #1
   1b7dc:	e3002443 	movw	r2, #1091	; 0x443
   1b7e0:	e1a03317 	lsl	r3, r7, r3
   1b7e4:	e0135002 	ands	r5, r3, r2
   1b7e8:	1afffff8 	bne	1b7d0 <CTCPConnection::Process()+0x78>
   1b7ec:	e213ce3b 	ands	ip, r3, #944	; 0x3b0
   1b7f0:	1a000067 	bne	1b994 <CTCPConnection::Process()+0x23c>
   1b7f4:	e313000c 	tst	r3, #12
   1b7f8:	0affffe0 	beq	1b780 <CTCPConnection::Process()+0x28>
   1b7fc:	e5903068 	ldr	r3, [r0, #104]	; 0x68
   1b800:	e3530000 	cmp	r3, #0
   1b804:	0afffff1 	beq	1b7d0 <CTCPConnection::Process()+0x78>
   1b808:	e580c068 	str	ip, [r0, #104]	; 0x68
   1b80c:	e28450cc 	add	r5, r4, #204	; 0xcc
   1b810:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1b814:	e3530002 	cmp	r3, #2
   1b818:	059020b8 	ldreq	r2, [r0, #184]	; 0xb8
   1b81c:	03a01c02 	moveq	r1, #512	; 0x200
   1b820:	159020b8 	ldrne	r2, [r0, #184]	; 0xb8
   1b824:	13a01c12 	movne	r1, #4608	; 0x1200
   1b828:	159030bc 	ldrne	r3, [r0, #188]	; 0xbc
   1b82c:	01a0300c 	moveq	r3, ip
   1b830:	058dc004 	streq	ip, [sp, #4]
   1b834:	158dc004 	strne	ip, [sp, #4]
   1b838:	e58dc000 	str	ip, [sp]
   1b83c:	ebfffdce 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1b840:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
   1b844:	e3a02001 	mov	r2, #1
   1b848:	e1a00005 	mov	r0, r5
   1b84c:	eb00066a 	bl	1d1fc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1b850:	e1a00005 	mov	r0, r5
   1b854:	eb000649 	bl	1d180 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1b858:	e3a01001 	mov	r1, #1
   1b85c:	e1a02000 	mov	r2, r0
   1b860:	e1a00004 	mov	r0, r4
   1b864:	e28dd00c 	add	sp, sp, #12
   1b868:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   1b86c:	eaffff2c 	b	1b524 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1b870:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
   1b874:	e59450a8 	ldr	r5, [r4, #168]	; 0xa8
   1b878:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1b87c:	e0835005 	add	r5, r3, r5
   1b880:	e0553002 	subs	r3, r5, r2
   1b884:	0affffd1 	beq	1b7d0 <CTCPConnection::Process()+0x78>
   1b888:	e1d45cb8 	ldrh	r5, [r4, #200]	; 0xc8
   1b88c:	e1550003 	cmp	r5, r3
   1b890:	21a05003 	movcs	r5, r3
   1b894:	e1550000 	cmp	r5, r0
   1b898:	21a05000 	movcs	r5, r0
   1b89c:	e3550d19 	cmp	r5, #1600	; 0x640
   1b8a0:	8a00002e 	bhi	1b960 <CTCPConnection::Process()+0x208>
   1b8a4:	e1a02005 	mov	r2, r5
   1b8a8:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   1b8ac:	e1a00006 	mov	r0, r6
   1b8b0:	eb0005ad 	bl	1cf6c <CRetransmissionQueue::Read(void*, unsigned int)>
   1b8b4:	e1a00006 	mov	r0, r6
   1b8b8:	eb000512 	bl	1cd08 <CRetransmissionQueue::IsEmpty() const>
   1b8bc:	e3500000 	cmp	r0, #0
   1b8c0:	1a000020 	bne	1b948 <CTCPConnection::Process()+0x1f0>
   1b8c4:	e3a01a01 	mov	r1, #4096	; 0x1000
   1b8c8:	e594c080 	ldr	ip, [r4, #128]	; 0x80
   1b8cc:	e28490cc 	add	r9, r4, #204	; 0xcc
   1b8d0:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1b8d4:	e1a00004 	mov	r0, r4
   1b8d8:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1b8dc:	e58dc000 	str	ip, [sp]
   1b8e0:	e58d5004 	str	r5, [sp, #4]
   1b8e4:	ebfffda4 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1b8e8:	e1a02005 	mov	r2, r5
   1b8ec:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1b8f0:	e1a00009 	mov	r0, r9
   1b8f4:	eb000640 	bl	1d1fc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1b8f8:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
   1b8fc:	e1a00009 	mov	r0, r9
   1b900:	e0835005 	add	r5, r3, r5
   1b904:	e58450a4 	str	r5, [r4, #164]	; 0xa4
   1b908:	eb00061c 	bl	1d180 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1b90c:	e3a01001 	mov	r1, #1
   1b910:	e1a02000 	mov	r2, r0
   1b914:	e1a00004 	mov	r0, r4
   1b918:	ebffff01 	bl	1b524 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1b91c:	eaffffa7 	b	1b7c0 <CTCPConnection::Process()+0x68>
   1b920:	e3a02000 	mov	r2, #0
   1b924:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   1b928:	e1a00005 	mov	r0, r5
   1b92c:	eb000a12 	bl	1e17c <CNetQueue::Dequeue(void*, void**)>
   1b930:	e2502000 	subs	r2, r0, #0
   1b934:	e1a00006 	mov	r0, r6
   1b938:	0affff99 	beq	1b7a4 <CTCPConnection::Process()+0x4c>
   1b93c:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   1b940:	eb000523 	bl	1cdd4 <CRetransmissionQueue::Write(void const*, unsigned int)>
   1b944:	eaffff92 	b	1b794 <CTCPConnection::Process()+0x3c>
   1b948:	e2840038 	add	r0, r4, #56	; 0x38
   1b94c:	eb000975 	bl	1df28 <CNetQueue::IsEmpty() const>
   1b950:	e3a01b06 	mov	r1, #6144	; 0x1800
   1b954:	e3500000 	cmp	r0, #0
   1b958:	0affffd9 	beq	1b8c4 <CTCPConnection::Process()+0x16c>
   1b95c:	eaffffd9 	b	1b8c8 <CTCPConnection::Process()+0x170>
   1b960:	e3002251 	movw	r2, #593	; 0x251
   1b964:	e1a01008 	mov	r1, r8
   1b968:	e1a00007 	mov	r0, r7
   1b96c:	eb00248a 	bl	24b9c <assertion_failed>
   1b970:	eaffffcb 	b	1b8a4 <CTCPConnection::Process()+0x14c>
   1b974:	e3e02000 	mvn	r2, #0
   1b978:	e3a03000 	mov	r3, #0
   1b97c:	e5802034 	str	r2, [r0, #52]	; 0x34
   1b980:	e2800084 	add	r0, r0, #132	; 0x84
   1b984:	e5c43030 	strb	r3, [r4, #48]	; 0x30
   1b988:	e28dd00c 	add	sp, sp, #12
   1b98c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   1b990:	ea001481 	b	20b9c <CSynchronizationEvent::Set()>
   1b994:	e2806050 	add	r6, r0, #80	; 0x50
   1b998:	e1a00006 	mov	r0, r6
   1b99c:	eb0004d9 	bl	1cd08 <CRetransmissionQueue::IsEmpty() const>
   1b9a0:	e3500000 	cmp	r0, #0
   1b9a4:	0affff76 	beq	1b784 <CTCPConnection::Process()+0x2c>
   1b9a8:	e2840038 	add	r0, r4, #56	; 0x38
   1b9ac:	eb00095d 	bl	1df28 <CNetQueue::IsEmpty() const>
   1b9b0:	e3500000 	cmp	r0, #0
   1b9b4:	0affff72 	beq	1b784 <CTCPConnection::Process()+0x2c>
   1b9b8:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
   1b9bc:	e3530000 	cmp	r3, #0
   1b9c0:	0affff6f 	beq	1b784 <CTCPConnection::Process()+0x2c>
   1b9c4:	e28480cc 	add	r8, r4, #204	; 0xcc
   1b9c8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   1b9cc:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1b9d0:	e3a01c11 	mov	r1, #4352	; 0x1100
   1b9d4:	e58d5004 	str	r5, [sp, #4]
   1b9d8:	e1a00004 	mov	r0, r4
   1b9dc:	e58d5000 	str	r5, [sp]
   1b9e0:	ebfffd65 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1b9e4:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1b9e8:	e1a00008 	mov	r0, r8
   1b9ec:	e1a02007 	mov	r2, r7
   1b9f0:	eb000601 	bl	1d1fc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1b9f4:	e5d42070 	ldrb	r2, [r4, #112]	; 0x70
   1b9f8:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
   1b9fc:	e1a00008 	mov	r0, r8
   1ba00:	e5c42030 	strb	r2, [r4, #48]	; 0x30
   1ba04:	e2833001 	add	r3, r3, #1
   1ba08:	e584506c 	str	r5, [r4, #108]	; 0x6c
   1ba0c:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   1ba10:	eb0005da 	bl	1d180 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ba14:	e1a01007 	mov	r1, r7
   1ba18:	e1a02000 	mov	r2, r0
   1ba1c:	e1a00004 	mov	r0, r4
   1ba20:	ebfffebf 	bl	1b524 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ba24:	eaffff56 	b	1b784 <CTCPConnection::Process()+0x2c>
   1ba28:	e3a03000 	mov	r3, #0
   1ba2c:	e1a00006 	mov	r0, r6
   1ba30:	e5843064 	str	r3, [r4, #100]	; 0x64
   1ba34:	eb0005af 	bl	1d0f8 <CRetransmissionQueue::Reset()>
   1ba38:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
   1ba3c:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   1ba40:	eaffff5a 	b	1b7b0 <CTCPConnection::Process()+0x58>
   1ba44:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1ba48:	e30e0c70 	movw	r0, #60528	; 0xec70
   1ba4c:	e3401002 	movt	r1, #2
   1ba50:	e3400002 	movt	r0, #2
   1ba54:	e300222f 	movw	r2, #559	; 0x22f
   1ba58:	eb00244f 	bl	24b9c <assertion_failed>
   1ba5c:	eaffff4b 	b	1b790 <CTCPConnection::Process()+0x38>

0001ba60 <CTCPConnection::DumpStatus()>:
   1ba60:	e92d4070 	push	{r4, r5, r6, lr}
   1ba64:	e1a04000 	mov	r4, r0
   1ba68:	e24dd020 	sub	sp, sp, #32
   1ba6c:	eb0025cf 	bl	251b0 <CLogger::Get()>
   1ba70:	e5d4c030 	ldrb	ip, [r4, #48]	; 0x30
   1ba74:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
   1ba78:	e30e3c84 	movw	r3, #60548	; 0xec84
   1ba7c:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1ba80:	e3403002 	movt	r3, #2
   1ba84:	e1d461b4 	ldrh	r6, [r4, #20]
   1ba88:	e59450c0 	ldr	r5, [r4, #192]	; 0xc0
   1ba8c:	e0422001 	sub	r2, r2, r1
   1ba90:	e594e0a8 	ldr	lr, [r4, #168]	; 0xa8
   1ba94:	e58d2008 	str	r2, [sp, #8]
   1ba98:	e3a02004 	mov	r2, #4
   1ba9c:	e58dc000 	str	ip, [sp]
   1baa0:	e594c0a0 	ldr	ip, [r4, #160]	; 0xa0
   1baa4:	e58d6018 	str	r6, [sp, #24]
   1baa8:	e04cc001 	sub	ip, ip, r1
   1baac:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
   1bab0:	e59440c4 	ldr	r4, [r4, #196]	; 0xc4
   1bab4:	e58dc004 	str	ip, [sp, #4]
   1bab8:	e0411004 	sub	r1, r1, r4
   1babc:	e58d5014 	str	r5, [sp, #20]
   1bac0:	e58d1010 	str	r1, [sp, #16]
   1bac4:	e58de00c 	str	lr, [sp, #12]
   1bac8:	e59f1008 	ldr	r1, [pc, #8]	; 1bad8 <CTCPConnection::DumpStatus()+0x78>
   1bacc:	eb002693 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bad0:	e28dd020 	add	sp, sp, #32
   1bad4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bad8:	0002ebac 	.word	0x0002ebac

0001badc <CTCPConnection::NewState(TTCPState, unsigned int)>:
   1badc:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1bae0:	e92d4070 	push	{r4, r5, r6, lr}
   1bae4:	e353000a 	cmp	r3, #10
   1bae8:	e24dd010 	sub	sp, sp, #16
   1baec:	e1a05000 	mov	r5, r0
   1baf0:	e1a04001 	mov	r4, r1
   1baf4:	e1a06002 	mov	r6, r2
   1baf8:	8a00001a 	bhi	1bb68 <CTCPConnection::NewState(TTCPState, unsigned int)+0x8c>
   1bafc:	e354000a 	cmp	r4, #10
   1bb00:	9a000005 	bls	1bb1c <CTCPConnection::NewState(TTCPState, unsigned int)+0x40>
   1bb04:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1bb08:	e30e0cf0 	movw	r0, #60656	; 0xecf0
   1bb0c:	e3401002 	movt	r1, #2
   1bb10:	e3400002 	movt	r0, #2
   1bb14:	e300262d 	movw	r2, #1581	; 0x62d
   1bb18:	eb00241f 	bl	24b9c <assertion_failed>
   1bb1c:	eb0025a3 	bl	251b0 <CLogger::Get()>
   1bb20:	e5d52030 	ldrb	r2, [r5, #48]	; 0x30
   1bb24:	e30e1b6c 	movw	r1, #60268	; 0xeb6c
   1bb28:	e3401002 	movt	r1, #2
   1bb2c:	e0813104 	add	r3, r1, r4, lsl #2
   1bb30:	e58d6008 	str	r6, [sp, #8]
   1bb34:	e0812102 	add	r2, r1, r2, lsl #2
   1bb38:	e2811040 	add	r1, r1, #64	; 0x40
   1bb3c:	e593e044 	ldr	lr, [r3, #68]	; 0x44
   1bb40:	e30e3d20 	movw	r3, #60704	; 0xed20
   1bb44:	e592c044 	ldr	ip, [r2, #68]	; 0x44
   1bb48:	e3403002 	movt	r3, #2
   1bb4c:	e3a02004 	mov	r2, #4
   1bb50:	e88d5000 	stm	sp, {ip, lr}
   1bb54:	eb002671 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bb58:	e1a00004 	mov	r0, r4
   1bb5c:	e5c54030 	strb	r4, [r5, #48]	; 0x30
   1bb60:	e28dd010 	add	sp, sp, #16
   1bb64:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bb68:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1bb6c:	e30e0cbc 	movw	r0, #60604	; 0xecbc
   1bb70:	e3401002 	movt	r1, #2
   1bb74:	e3400002 	movt	r0, #2
   1bb78:	e300262c 	movw	r2, #1580	; 0x62c
   1bb7c:	eb002406 	bl	24b9c <assertion_failed>
   1bb80:	eaffffdd 	b	1bafc <CTCPConnection::NewState(TTCPState, unsigned int)+0x20>

0001bb84 <CTCPConnection::UnexpectedState(unsigned int)>:
   1bb84:	e92d4030 	push	{r4, r5, lr}
   1bb88:	e1a05000 	mov	r5, r0
   1bb8c:	e24dd00c 	sub	sp, sp, #12
   1bb90:	e1a04001 	mov	r4, r1
   1bb94:	ebffffb1 	bl	1ba60 <CTCPConnection::DumpStatus()>
   1bb98:	eb002584 	bl	251b0 <CLogger::Get()>
   1bb9c:	e5d5c030 	ldrb	ip, [r5, #48]	; 0x30
   1bba0:	e3a02000 	mov	r2, #0
   1bba4:	e58d4004 	str	r4, [sp, #4]
   1bba8:	e59f1014 	ldr	r1, [pc, #20]	; 1bbc4 <CTCPConnection::UnexpectedState(unsigned int)+0x40>
   1bbac:	e30e3d3c 	movw	r3, #60732	; 0xed3c
   1bbb0:	e58dc000 	str	ip, [sp]
   1bbb4:	e3403002 	movt	r3, #2
   1bbb8:	eb002658 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bbbc:	e28dd00c 	add	sp, sp, #12
   1bbc0:	e8bd8030 	pop	{r4, r5, pc}
   1bbc4:	0002ebac 	.word	0x0002ebac

0001bbc8 <CTCPConnection::Connect()>:
   1bbc8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   1bbcc:	e92d4070 	push	{r4, r5, r6, lr}
   1bbd0:	e3520000 	cmp	r2, #0
   1bbd4:	e1a04000 	mov	r4, r0
   1bbd8:	ba00000c 	blt	1bc10 <CTCPConnection::Connect()+0x48>
   1bbdc:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1bbe0:	e6ef3073 	uxtb	r3, r3
   1bbe4:	e353000a 	cmp	r3, #10
   1bbe8:	8a000008 	bhi	1bc10 <CTCPConnection::Connect()+0x48>
   1bbec:	e3a02001 	mov	r2, #1
   1bbf0:	e30017e2 	movw	r1, #2018	; 0x7e2
   1bbf4:	e1a02312 	lsl	r2, r2, r3
   1bbf8:	e1120001 	tst	r2, r1
   1bbfc:	1a00000e 	bne	1bc3c <CTCPConnection::Connect()+0x74>
   1bc00:	e3530000 	cmp	r3, #0
   1bc04:	0a00000a 	beq	1bc34 <CTCPConnection::Connect()+0x6c>
   1bc08:	e312000c 	tst	r2, #12
   1bc0c:	1a000001 	bne	1bc18 <CTCPConnection::Connect()+0x50>
   1bc10:	e5940034 	ldr	r0, [r4, #52]	; 0x34
   1bc14:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bc18:	e2805084 	add	r5, r0, #132	; 0x84
   1bc1c:	e1a00005 	mov	r0, r5
   1bc20:	eb0013da 	bl	20b90 <CSynchronizationEvent::Clear()>
   1bc24:	e1a00005 	mov	r0, r5
   1bc28:	eb0013e9 	bl	20bd4 <CSynchronizationEvent::Wait()>
   1bc2c:	e5940034 	ldr	r0, [r4, #52]	; 0x34
   1bc30:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bc34:	e3e00000 	mvn	r0, #0
   1bc38:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bc3c:	e3a010fb 	mov	r1, #251	; 0xfb
   1bc40:	ebffffcf 	bl	1bb84 <CTCPConnection::UnexpectedState(unsigned int)>
   1bc44:	e3e00000 	mvn	r0, #0
   1bc48:	e8bd8070 	pop	{r4, r5, r6, pc}

0001bc4c <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   1bc4c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1bc50:	e3530000 	cmp	r3, #0
   1bc54:	ba000028 	blt	1bcfc <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb0>
   1bc58:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   1bc5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bc60:	e1a05002 	mov	r5, r2
   1bc64:	e1a06001 	mov	r6, r1
   1bc68:	e1a04000 	mov	r4, r0
   1bc6c:	e353000a 	cmp	r3, #10
   1bc70:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1bc74:	ea000015 	b	1bcd0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x84>
   1bc78:	0001bca4 	.word	0x0001bca4
   1bc7c:	0001bcbc 	.word	0x0001bcbc
   1bc80:	0001bcac 	.word	0x0001bcac
   1bc84:	0001bcd0 	.word	0x0001bcd0
   1bc88:	0001bcd0 	.word	0x0001bcd0
   1bc8c:	0001bca4 	.word	0x0001bca4
   1bc90:	0001bca4 	.word	0x0001bca4
   1bc94:	0001bca4 	.word	0x0001bca4
   1bc98:	0001bca4 	.word	0x0001bca4
   1bc9c:	0001bca4 	.word	0x0001bca4
   1bca0:	0001bca4 	.word	0x0001bca4
   1bca4:	e3e00000 	mvn	r0, #0
   1bca8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bcac:	e300110f 	movw	r1, #271	; 0x10f
   1bcb0:	ebffffb3 	bl	1bb84 <CTCPConnection::UnexpectedState(unsigned int)>
   1bcb4:	e3e00000 	mvn	r0, #0
   1bcb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bcbc:	e2807084 	add	r7, r0, #132	; 0x84
   1bcc0:	e1a00007 	mov	r0, r7
   1bcc4:	eb0013b1 	bl	20b90 <CSynchronizationEvent::Clear()>
   1bcc8:	e1a00007 	mov	r0, r7
   1bccc:	eb0013c0 	bl	20bd4 <CSynchronizationEvent::Wait()>
   1bcd0:	e3560000 	cmp	r6, #0
   1bcd4:	0a000011 	beq	1bd20 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xd4>
   1bcd8:	e1a00006 	mov	r0, r6
   1bcdc:	e284100c 	add	r1, r4, #12
   1bce0:	eb0007d3 	bl	1dc34 <CIPAddress::Set(CIPAddress const&)>
   1bce4:	e3550000 	cmp	r5, #0
   1bce8:	0a000005 	beq	1bd04 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb8>
   1bcec:	e1d431b4 	ldrh	r3, [r4, #20]
   1bcf0:	e5940034 	ldr	r0, [r4, #52]	; 0x34
   1bcf4:	e1c530b0 	strh	r3, [r5]
   1bcf8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bcfc:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   1bd00:	e12fff1e 	bx	lr
   1bd04:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1bd08:	e30e0644 	movw	r0, #58948	; 0xe644
   1bd0c:	e3401002 	movt	r1, #2
   1bd10:	e3400002 	movt	r0, #2
   1bd14:	e3a02f4a 	mov	r2, #296	; 0x128
   1bd18:	eb00239f 	bl	24b9c <assertion_failed>
   1bd1c:	eafffff2 	b	1bcec <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xa0>
   1bd20:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1bd24:	e30e0634 	movw	r0, #58932	; 0xe634
   1bd28:	e3401002 	movt	r1, #2
   1bd2c:	e3400002 	movt	r0, #2
   1bd30:	e3002125 	movw	r2, #293	; 0x125
   1bd34:	eb002398 	bl	24b9c <assertion_failed>
   1bd38:	eaffffe6 	b	1bcd8 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x8c>

0001bd3c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1bd3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd40:	e24dd024 	sub	sp, sp, #36	; 0x24
   1bd44:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1bd48:	e35c0006 	cmp	ip, #6
   1bd4c:	0a000002 	beq	1bd5c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x20>
   1bd50:	e3a00000 	mov	r0, #0
   1bd54:	e28dd024 	add	sp, sp, #36	; 0x24
   1bd58:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd5c:	e3520013 	cmp	r2, #19
   1bd60:	9a0000d1 	bls	1c0ac <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x370>
   1bd64:	e3510000 	cmp	r1, #0
   1bd68:	e1a07003 	mov	r7, r3
   1bd6c:	e1a06002 	mov	r6, r2
   1bd70:	e1a04001 	mov	r4, r1
   1bd74:	e1a05000 	mov	r5, r0
   1bd78:	0a0000c4 	beq	1c090 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x354>
   1bd7c:	e1d430b2 	ldrh	r3, [r4, #2]
   1bd80:	e1d521b6 	ldrh	r2, [r5, #22]
   1bd84:	e6bf3fb3 	rev16	r3, r3
   1bd88:	e6ff3073 	uxth	r3, r3
   1bd8c:	e1520003 	cmp	r2, r3
   1bd90:	1affffee 	bne	1bd50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1bd94:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1bd98:	e3530001 	cmp	r3, #1
   1bd9c:	0a000038 	beq	1be84 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x148>
   1bda0:	e1a01007 	mov	r1, r7
   1bda4:	e285000c 	add	r0, r5, #12
   1bda8:	eb000724 	bl	1da40 <CIPAddress::operator!=(CIPAddress const&) const>
   1bdac:	e3500000 	cmp	r0, #0
   1bdb0:	1affffe6 	bne	1bd50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1bdb4:	e1d430b0 	ldrh	r3, [r4]
   1bdb8:	e1d521b4 	ldrh	r2, [r5, #20]
   1bdbc:	e6bf3fb3 	rev16	r3, r3
   1bdc0:	e6ff3073 	uxth	r3, r3
   1bdc4:	e1520003 	cmp	r2, r3
   1bdc8:	0285a01c 	addeq	sl, r5, #28
   1bdcc:	1affffdf 	bne	1bd50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1bdd0:	e1a02006 	mov	r2, r6
   1bdd4:	e1a01004 	mov	r1, r4
   1bdd8:	e1a0000a 	mov	r0, sl
   1bddc:	eb00098b 	bl	1e410 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1bde0:	e3500000 	cmp	r0, #0
   1bde4:	1affffd9 	bne	1bd50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1bde8:	e1d480bc 	ldrh	r8, [r4, #12]
   1bdec:	e1a00005 	mov	r0, r5
   1bdf0:	e5942004 	ldr	r2, [r4, #4]
   1bdf4:	e7e33258 	ubfx	r3, r8, #4, #4
   1bdf8:	e2181c02 	ands	r1, r8, #512	; 0x200
   1bdfc:	e6bf2f32 	rev	r2, r2
   1be00:	e58d1014 	str	r1, [sp, #20]
   1be04:	e1a03103 	lsl	r3, r3, #2
   1be08:	e5949008 	ldr	r9, [r4, #8]
   1be0c:	e0466003 	sub	r6, r6, r3
   1be10:	e58d3018 	str	r3, [sp, #24]
   1be14:	e58d200c 	str	r2, [sp, #12]
   1be18:	1286b001 	addne	fp, r6, #1
   1be1c:	01a0b006 	moveq	fp, r6
   1be20:	e2183c01 	ands	r3, r8, #256	; 0x100
   1be24:	e58d301c 	str	r3, [sp, #28]
   1be28:	e1a01004 	mov	r1, r4
   1be2c:	e1d430be 	ldrh	r3, [r4, #14]
   1be30:	128bb001 	addne	fp, fp, #1
   1be34:	e6bf9f39 	rev	r9, r9
   1be38:	e6bf3fb3 	rev16	r3, r3
   1be3c:	e6ff3073 	uxth	r3, r3
   1be40:	e58d3010 	str	r3, [sp, #16]
   1be44:	ebfffcc2 	bl	1b154 <CTCPConnection::ScanOptions(TTCPHeader*)>
   1be48:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1be4c:	e353000a 	cmp	r3, #10
   1be50:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1be54:	ea000034 	b	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1be58:	0001c034 	.word	0x0001c034
   1be5c:	0001bf34 	.word	0x0001bf34
   1be60:	0001bf00 	.word	0x0001bf00
   1be64:	0001bea4 	.word	0x0001bea4
   1be68:	0001bea4 	.word	0x0001bea4
   1be6c:	0001bea4 	.word	0x0001bea4
   1be70:	0001bea4 	.word	0x0001bea4
   1be74:	0001bea4 	.word	0x0001bea4
   1be78:	0001bea4 	.word	0x0001bea4
   1be7c:	0001bea4 	.word	0x0001bea4
   1be80:	0001bea4 	.word	0x0001bea4
   1be84:	e1d430bc 	ldrh	r3, [r4, #12]
   1be88:	e3130c02 	tst	r3, #512	; 0x200
   1be8c:	0affffaf 	beq	1bd50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1be90:	e285a01c 	add	sl, r5, #28
   1be94:	e1a01007 	mov	r1, r7
   1be98:	e1a0000a 	mov	r0, sl
   1be9c:	eb000926 	bl	1e33c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1bea0:	eaffffca 	b	1bdd0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x94>
   1bea4:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
   1bea8:	e3530000 	cmp	r3, #0
   1beac:	0a000080 	beq	1c0b4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x378>
   1beb0:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   1beb4:	e35b0000 	cmp	fp, #0
   1beb8:	e59d100c 	ldr	r1, [sp, #12]
   1bebc:	e0421001 	sub	r1, r2, r1
   1bec0:	1a00010f 	bne	1c304 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5c8>
   1bec4:	e3510000 	cmp	r1, #0
   1bec8:	da0001ed 	ble	1c684 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x948>
   1becc:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1bed0:	e3530003 	cmp	r3, #3
   1bed4:	0a00007c 	beq	1c0cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x390>
   1bed8:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1bedc:	e3a0c000 	mov	ip, #0
   1bee0:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1bee4:	e1a00005 	mov	r0, r5
   1bee8:	e3a01a01 	mov	r1, #4096	; 0x1000
   1beec:	e58dc004 	str	ip, [sp, #4]
   1bef0:	e58dc000 	str	ip, [sp]
   1bef4:	ebfffc20 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1bef8:	e3a00001 	mov	r0, #1
   1befc:	eaffff94 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1bf00:	e3180a01 	tst	r8, #4096	; 0x1000
   1bf04:	0a0000a7 	beq	1c1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x46c>
   1bf08:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1bf0c:	e0433009 	sub	r3, r3, r9
   1bf10:	e3530000 	cmp	r3, #0
   1bf14:	ba0001b5 	blt	1c5f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8b4>
   1bf18:	e2188b01 	ands	r8, r8, #1024	; 0x400
   1bf1c:	058d8004 	streq	r8, [sp, #4]
   1bf20:	058d8000 	streq	r8, [sp]
   1bf24:	01a03008 	moveq	r3, r8
   1bf28:	0a000099 	beq	1c194 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x458>
   1bf2c:	e3a00001 	mov	r0, #1
   1bf30:	eaffff87 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1bf34:	e2183b01 	ands	r3, r8, #1024	; 0x400
   1bf38:	1afffffb 	bne	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1bf3c:	e3180a01 	tst	r8, #4096	; 0x1000
   1bf40:	1a000086 	bne	1c160 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x424>
   1bf44:	e59d3014 	ldr	r3, [sp, #20]
   1bf48:	e3530000 	cmp	r3, #0
   1bf4c:	0afffff6 	beq	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1bf50:	e59d300c 	ldr	r3, [sp, #12]
   1bf54:	e35b0000 	cmp	fp, #0
   1bf58:	e59d2010 	ldr	r2, [sp, #16]
   1bf5c:	e58590b4 	str	r9, [r5, #180]	; 0xb4
   1bf60:	e58530c4 	str	r3, [r5, #196]	; 0xc4
   1bf64:	e58520a8 	str	r2, [r5, #168]	; 0xa8
   1bf68:	e1a02003 	mov	r2, r3
   1bf6c:	e2833001 	add	r3, r3, #1
   1bf70:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1bf74:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1bf78:	0a0001b4 	beq	1c650 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x914>
   1bf7c:	e3560000 	cmp	r6, #0
   1bf80:	0a000005 	beq	1bf9c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x260>
   1bf84:	e59d3018 	ldr	r3, [sp, #24]
   1bf88:	e1a02006 	mov	r2, r6
   1bf8c:	e2850044 	add	r0, r5, #68	; 0x44
   1bf90:	e0841003 	add	r1, r4, r3
   1bf94:	e3a03000 	mov	r3, #0
   1bf98:	eb000826 	bl	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1bf9c:	e1a00005 	mov	r0, r5
   1bfa0:	e28560cc 	add	r6, r5, #204	; 0xcc
   1bfa4:	ebfffc97 	bl	1b208 <CTCPConnection::CalculateISN()>
   1bfa8:	e1a01000 	mov	r1, r0
   1bfac:	e58500b8 	str	r0, [r5, #184]	; 0xb8
   1bfb0:	e1a00006 	mov	r0, r6
   1bfb4:	eb000473 	bl	1d188 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1bfb8:	e1a01007 	mov	r1, r7
   1bfbc:	e285000c 	add	r0, r5, #12
   1bfc0:	eb00071b 	bl	1dc34 <CIPAddress::Set(CIPAddress const&)>
   1bfc4:	e1d430b0 	ldrh	r3, [r4]
   1bfc8:	e1a01007 	mov	r1, r7
   1bfcc:	e1a0000a 	mov	r0, sl
   1bfd0:	e6bf3fb3 	rev16	r3, r3
   1bfd4:	e1c531b4 	strh	r3, [r5, #20]
   1bfd8:	eb0008d7 	bl	1e33c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1bfdc:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1bfe0:	e59520b8 	ldr	r2, [r5, #184]	; 0xb8
   1bfe4:	e3a00000 	mov	r0, #0
   1bfe8:	e3a01c12 	mov	r1, #4608	; 0x1200
   1bfec:	e58d0004 	str	r0, [sp, #4]
   1bff0:	e58d0000 	str	r0, [sp]
   1bff4:	e1a00005 	mov	r0, r5
   1bff8:	ebfffbdf 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1bffc:	e1a00006 	mov	r0, r6
   1c000:	e3a02001 	mov	r2, #1
   1c004:	e59510b8 	ldr	r1, [r5, #184]	; 0xb8
   1c008:	eb00047b 	bl	1d1fc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1c00c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1c010:	e3a01003 	mov	r1, #3
   1c014:	e2850084 	add	r0, r5, #132	; 0x84
   1c018:	e2832001 	add	r2, r3, #1
   1c01c:	e5c51030 	strb	r1, [r5, #48]	; 0x30
   1c020:	e58530a0 	str	r3, [r5, #160]	; 0xa0
   1c024:	e58520a4 	str	r2, [r5, #164]	; 0xa4
   1c028:	eb0012db 	bl	20b9c <CSynchronizationEvent::Set()>
   1c02c:	e3a00001 	mov	r0, #1
   1c030:	eaffff47 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c034:	e2186b01 	ands	r6, r8, #1024	; 0x400
   1c038:	1affffbb 	bne	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c03c:	e2188a01 	ands	r8, r8, #4096	; 0x1000
   1c040:	e1a01007 	mov	r1, r7
   1c044:	e285000c 	add	r0, r5, #12
   1c048:	1a0000a2 	bne	1c2d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x59c>
   1c04c:	eb0006f8 	bl	1dc34 <CIPAddress::Set(CIPAddress const&)>
   1c050:	e1d430b0 	ldrh	r3, [r4]
   1c054:	e1a01007 	mov	r1, r7
   1c058:	e1a0000a 	mov	r0, sl
   1c05c:	e6bf3fb3 	rev16	r3, r3
   1c060:	e1c531b4 	strh	r3, [r5, #20]
   1c064:	eb0008b4 	bl	1e33c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1c068:	e59d300c 	ldr	r3, [sp, #12]
   1c06c:	e58d8004 	str	r8, [sp, #4]
   1c070:	e1a02008 	mov	r2, r8
   1c074:	e58d8000 	str	r8, [sp]
   1c078:	e083300b 	add	r3, r3, fp
   1c07c:	e1a00005 	mov	r0, r5
   1c080:	e3a01b05 	mov	r1, #5120	; 0x1400
   1c084:	ebfffbbc 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c088:	e3a00001 	mov	r0, #1
   1c08c:	eaffff30 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c090:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1c094:	e30e0780 	movw	r0, #59264	; 0xe780
   1c098:	e3401002 	movt	r1, #2
   1c09c:	e3400002 	movt	r0, #2
   1c0a0:	e3002272 	movw	r2, #626	; 0x272
   1c0a4:	eb0022bc 	bl	24b9c <assertion_failed>
   1c0a8:	eaffff33 	b	1bd7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x40>
   1c0ac:	e3e00000 	mvn	r0, #0
   1c0b0:	eaffff27 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c0b4:	e35b0000 	cmp	fp, #0
   1c0b8:	1affff83 	bne	1becc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1c0bc:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c0c0:	e59d200c 	ldr	r2, [sp, #12]
   1c0c4:	e1520003 	cmp	r2, r3
   1c0c8:	1affff7f 	bne	1becc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1c0cc:	e3180b01 	tst	r8, #1024	; 0x400
   1c0d0:	0a000066 	beq	1c270 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x534>
   1c0d4:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c0d8:	e2433003 	sub	r3, r3, #3
   1c0dc:	e3530007 	cmp	r3, #7
   1c0e0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c0e4:	ea000154 	b	1c63c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x900>
   1c0e8:	0001c140 	.word	0x0001c140
   1c0ec:	0001c108 	.word	0x0001c108
   1c0f0:	0001c108 	.word	0x0001c108
   1c0f4:	0001c108 	.word	0x0001c108
   1c0f8:	0001c108 	.word	0x0001c108
   1c0fc:	0001c128 	.word	0x0001c128
   1c100:	0001c128 	.word	0x0001c128
   1c104:	0001c128 	.word	0x0001c128
   1c108:	e3e03000 	mvn	r3, #0
   1c10c:	e2850050 	add	r0, r5, #80	; 0x50
   1c110:	e5853034 	str	r3, [r5, #52]	; 0x34
   1c114:	eb0003fa 	bl	1d104 <CRetransmissionQueue::Flush()>
   1c118:	e2850038 	add	r0, r5, #56	; 0x38
   1c11c:	eb000785 	bl	1df38 <CNetQueue::Flush()>
   1c120:	e2850044 	add	r0, r5, #68	; 0x44
   1c124:	eb000783 	bl	1df38 <CNetQueue::Flush()>
   1c128:	e3a03000 	mov	r3, #0
   1c12c:	e2850084 	add	r0, r5, #132	; 0x84
   1c130:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c134:	eb001298 	bl	20b9c <CSynchronizationEvent::Set()>
   1c138:	e3a00001 	mov	r0, #1
   1c13c:	eaffff04 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c140:	e2850050 	add	r0, r5, #80	; 0x50
   1c144:	eb0003ee 	bl	1d104 <CRetransmissionQueue::Flush()>
   1c148:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
   1c14c:	e3530000 	cmp	r3, #0
   1c150:	1a000180 	bne	1c758 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa1c>
   1c154:	e3a00001 	mov	r0, #1
   1c158:	e5c50030 	strb	r0, [r5, #48]	; 0x30
   1c15c:	eafffefc 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c160:	e1a01007 	mov	r1, r7
   1c164:	e285000c 	add	r0, r5, #12
   1c168:	e58d300c 	str	r3, [sp, #12]
   1c16c:	eb0006b0 	bl	1dc34 <CIPAddress::Set(CIPAddress const&)>
   1c170:	e1d420b0 	ldrh	r2, [r4]
   1c174:	e1a01007 	mov	r1, r7
   1c178:	e1a0000a 	mov	r0, sl
   1c17c:	e6bf2fb2 	rev16	r2, r2
   1c180:	e1c521b4 	strh	r2, [r5, #20]
   1c184:	eb00086c 	bl	1e33c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1c188:	e59d300c 	ldr	r3, [sp, #12]
   1c18c:	e58d3004 	str	r3, [sp, #4]
   1c190:	e58d3000 	str	r3, [sp]
   1c194:	e1a02009 	mov	r2, r9
   1c198:	e1a00005 	mov	r0, r5
   1c19c:	e3a01b01 	mov	r1, #1024	; 0x400
   1c1a0:	ebfffb75 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c1a4:	eaffff60 	b	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c1a8:	e3180b01 	tst	r8, #1024	; 0x400
   1c1ac:	1affff5e 	bne	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c1b0:	e2183c02 	ands	r3, r8, #512	; 0x200
   1c1b4:	e3530000 	cmp	r3, #0
   1c1b8:	0affff5b 	beq	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c1bc:	e59d300c 	ldr	r3, [sp, #12]
   1c1c0:	e58530c4 	str	r3, [r5, #196]	; 0xc4
   1c1c4:	e2833001 	add	r3, r3, #1
   1c1c8:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1c1cc:	e59520b8 	ldr	r2, [r5, #184]	; 0xb8
   1c1d0:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1c1d4:	e0423003 	sub	r3, r2, r3
   1c1d8:	e3530000 	cmp	r3, #0
   1c1dc:	ba00013d 	blt	1c6d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x99c>
   1c1e0:	e28580cc 	add	r8, r5, #204	; 0xcc
   1c1e4:	e3a07000 	mov	r7, #0
   1c1e8:	e3a03003 	mov	r3, #3
   1c1ec:	e3a01c12 	mov	r1, #4608	; 0x1200
   1c1f0:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c1f4:	e1a00005 	mov	r0, r5
   1c1f8:	e5857068 	str	r7, [r5, #104]	; 0x68
   1c1fc:	e58d7004 	str	r7, [sp, #4]
   1c200:	e58d7000 	str	r7, [sp]
   1c204:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c208:	ebfffb5b 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c20c:	e3a02001 	mov	r2, #1
   1c210:	e59510b8 	ldr	r1, [r5, #184]	; 0xb8
   1c214:	e1a00008 	mov	r0, r8
   1c218:	eb0003f7 	bl	1d1fc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1c21c:	e3a03005 	mov	r3, #5
   1c220:	e1a00008 	mov	r0, r8
   1c224:	e5853074 	str	r3, [r5, #116]	; 0x74
   1c228:	eb0003d4 	bl	1d180 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1c22c:	e3a01001 	mov	r1, #1
   1c230:	e1a02000 	mov	r2, r0
   1c234:	e1a00005 	mov	r0, r5
   1c238:	ebfffcb9 	bl	1b524 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1c23c:	e59d301c 	ldr	r3, [sp, #28]
   1c240:	e1530007 	cmp	r3, r7
   1c244:	1a000118 	bne	1c6ac <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x970>
   1c248:	e1560007 	cmp	r6, r7
   1c24c:	0affff36 	beq	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c250:	e59d3018 	ldr	r3, [sp, #24]
   1c254:	e2850044 	add	r0, r5, #68	; 0x44
   1c258:	e1a02006 	mov	r2, r6
   1c25c:	e0841003 	add	r1, r4, r3
   1c260:	e3a03000 	mov	r3, #0
   1c264:	eb000773 	bl	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c268:	e3a00001 	mov	r0, #1
   1c26c:	eafffeb8 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c270:	e2183c02 	ands	r3, r8, #512	; 0x200
   1c274:	e3530000 	cmp	r3, #0
   1c278:	0a00002e 	beq	1c338 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5fc>
   1c27c:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c280:	e3530003 	cmp	r3, #3
   1c284:	0a000104 	beq	1c69c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x960>
   1c288:	e3a04000 	mov	r4, #0
   1c28c:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c290:	e3a01b01 	mov	r1, #1024	; 0x400
   1c294:	e1a03004 	mov	r3, r4
   1c298:	e58d4004 	str	r4, [sp, #4]
   1c29c:	e1a00005 	mov	r0, r5
   1c2a0:	e58d4000 	str	r4, [sp]
   1c2a4:	ebfffb34 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c2a8:	e3e03000 	mvn	r3, #0
   1c2ac:	e2850050 	add	r0, r5, #80	; 0x50
   1c2b0:	e5853034 	str	r3, [r5, #52]	; 0x34
   1c2b4:	eb000392 	bl	1d104 <CRetransmissionQueue::Flush()>
   1c2b8:	e2850038 	add	r0, r5, #56	; 0x38
   1c2bc:	eb00071d 	bl	1df38 <CNetQueue::Flush()>
   1c2c0:	e2850044 	add	r0, r5, #68	; 0x44
   1c2c4:	eb00071b 	bl	1df38 <CNetQueue::Flush()>
   1c2c8:	e5c54030 	strb	r4, [r5, #48]	; 0x30
   1c2cc:	e2850084 	add	r0, r5, #132	; 0x84
   1c2d0:	eb001231 	bl	20b9c <CSynchronizationEvent::Set()>
   1c2d4:	eaffff14 	b	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c2d8:	eb000655 	bl	1dc34 <CIPAddress::Set(CIPAddress const&)>
   1c2dc:	e1d430b0 	ldrh	r3, [r4]
   1c2e0:	e1a01007 	mov	r1, r7
   1c2e4:	e1a0000a 	mov	r0, sl
   1c2e8:	e6bf3fb3 	rev16	r3, r3
   1c2ec:	e1c531b4 	strh	r3, [r5, #20]
   1c2f0:	eb000811 	bl	1e33c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1c2f4:	e58d6004 	str	r6, [sp, #4]
   1c2f8:	e58d6000 	str	r6, [sp]
   1c2fc:	e1a03006 	mov	r3, r6
   1c300:	eaffffa3 	b	1c194 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x458>
   1c304:	e3510000 	cmp	r1, #0
   1c308:	da0000d7 	ble	1c66c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x930>
   1c30c:	e59d100c 	ldr	r1, [sp, #12]
   1c310:	e081000b 	add	r0, r1, fp
   1c314:	e2821001 	add	r1, r2, #1
   1c318:	e0411000 	sub	r1, r1, r0
   1c31c:	e3510000 	cmp	r1, #0
   1c320:	cafffee9 	bgt	1becc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1c324:	e0833002 	add	r3, r3, r2
   1c328:	e1e03003 	mvn	r3, r3
   1c32c:	e1730000 	cmn	r3, r0
   1c330:	5afffee5 	bpl	1becc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1c334:	eaffff64 	b	1c0cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x390>
   1c338:	e3180a01 	tst	r8, #4096	; 0x1000
   1c33c:	0afffefa 	beq	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c340:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c344:	e2433003 	sub	r3, r3, #3
   1c348:	e3530007 	cmp	r3, #7
   1c34c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c350:	ea0000fc 	b	1c748 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa0c>
   1c354:	0001c4d4 	.word	0x0001c4d4
   1c358:	0001c508 	.word	0x0001c508
   1c35c:	0001c508 	.word	0x0001c508
   1c360:	0001c508 	.word	0x0001c508
   1c364:	0001c508 	.word	0x0001c508
   1c368:	0001c508 	.word	0x0001c508
   1c36c:	0001c4ac 	.word	0x0001c4ac
   1c370:	0001c374 	.word	0x0001c374
   1c374:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c378:	e1590003 	cmp	r9, r3
   1c37c:	0a00013a 	beq	1c86c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb30>
   1c380:	e35b0000 	cmp	fp, #0
   1c384:	0afffee8 	beq	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c388:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c38c:	e2433004 	sub	r3, r3, #4
   1c390:	e3530006 	cmp	r3, #6
   1c394:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c398:	ea0000f6 	b	1c778 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa3c>
   1c39c:	0001c3b8 	.word	0x0001c3b8
   1c3a0:	0001c3b8 	.word	0x0001c3b8
   1c3a4:	0001c3b8 	.word	0x0001c3b8
   1c3a8:	0001c420 	.word	0x0001c420
   1c3ac:	0001c420 	.word	0x0001c420
   1c3b0:	0001c420 	.word	0x0001c420
   1c3b4:	0001c420 	.word	0x0001c420
   1c3b8:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c3bc:	e59d200c 	ldr	r2, [sp, #12]
   1c3c0:	e1520003 	cmp	r2, r3
   1c3c4:	1a0000ef 	bne	1c788 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa4c>
   1c3c8:	e3560000 	cmp	r6, #0
   1c3cc:	0a000013 	beq	1c420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6e4>
   1c3d0:	e59d3018 	ldr	r3, [sp, #24]
   1c3d4:	e1a02006 	mov	r2, r6
   1c3d8:	e2850044 	add	r0, r5, #68	; 0x44
   1c3dc:	e0841003 	add	r1, r4, r3
   1c3e0:	e3a03000 	mov	r3, #0
   1c3e4:	eb000713 	bl	1e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c3e8:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c3ec:	e3a00000 	mov	r0, #0
   1c3f0:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c3f4:	e0863003 	add	r3, r6, r3
   1c3f8:	e58d0004 	str	r0, [sp, #4]
   1c3fc:	e3a01a01 	mov	r1, #4096	; 0x1000
   1c400:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1c404:	e58d0000 	str	r0, [sp]
   1c408:	e1a00005 	mov	r0, r5
   1c40c:	ebfffada 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c410:	e3180b02 	tst	r8, #2048	; 0x800
   1c414:	0a000001 	beq	1c420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6e4>
   1c418:	e2850084 	add	r0, r5, #132	; 0x84
   1c41c:	eb0011de 	bl	20b9c <CSynchronizationEvent::Set()>
   1c420:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c424:	e3530000 	cmp	r3, #0
   1c428:	0afffebf 	beq	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c42c:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c430:	e3530001 	cmp	r3, #1
   1c434:	0afffebc 	beq	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c438:	e5d52030 	ldrb	r2, [r5, #48]	; 0x30
   1c43c:	e59d301c 	ldr	r3, [sp, #28]
   1c440:	e3530000 	cmp	r3, #0
   1c444:	13520002 	cmpne	r2, #2
   1c448:	03a02001 	moveq	r2, #1
   1c44c:	13a02000 	movne	r2, #0
   1c450:	0afffeb5 	beq	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c454:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c458:	e3a01a01 	mov	r1, #4096	; 0x1000
   1c45c:	e58d2004 	str	r2, [sp, #4]
   1c460:	e1a00005 	mov	r0, r5
   1c464:	e2833001 	add	r3, r3, #1
   1c468:	e58d2000 	str	r2, [sp]
   1c46c:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1c470:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c474:	ebfffac0 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c478:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c47c:	e2433003 	sub	r3, r3, #3
   1c480:	e3530007 	cmp	r3, #7
   1c484:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c488:	ea000148 	b	1c9b0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc74>
   1c48c:	0001c998 	.word	0x0001c998
   1c490:	0001c998 	.word	0x0001c998
   1c494:	0001c970 	.word	0x0001c970
   1c498:	0001c938 	.word	0x0001c938
   1c49c:	0001bf2c 	.word	0x0001bf2c
   1c4a0:	0001bf2c 	.word	0x0001bf2c
   1c4a4:	0001bf2c 	.word	0x0001bf2c
   1c4a8:	0001c924 	.word	0x0001c924
   1c4ac:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c4b0:	e1590003 	cmp	r9, r3
   1c4b4:	1affffb1 	bne	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c4b8:	e3a03000 	mov	r3, #0
   1c4bc:	e2850084 	add	r0, r5, #132	; 0x84
   1c4c0:	e585306c 	str	r3, [r5, #108]	; 0x6c
   1c4c4:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c4c8:	eb0011b3 	bl	20b9c <CSynchronizationEvent::Set()>
   1c4cc:	e3a00001 	mov	r0, #1
   1c4d0:	eafffe1f 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c4d4:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1c4d8:	e0433009 	sub	r3, r3, r9
   1c4dc:	e3530000 	cmp	r3, #0
   1c4e0:	da0000b0 	ble	1c7a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa6c>
   1c4e4:	e3a01000 	mov	r1, #0
   1c4e8:	e1a02009 	mov	r2, r9
   1c4ec:	e58d1004 	str	r1, [sp, #4]
   1c4f0:	e1a03001 	mov	r3, r1
   1c4f4:	e58d1000 	str	r1, [sp]
   1c4f8:	e1a00005 	mov	r0, r5
   1c4fc:	e3a01b01 	mov	r1, #1024	; 0x400
   1c500:	ebfffa9d 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c504:	eaffff9d 	b	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c508:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1c50c:	e0532009 	subs	r2, r3, r9
   1c510:	4a0000cd 	bmi	1c84c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb10>
   1c514:	e0493003 	sub	r3, r9, r3
   1c518:	e3530000 	cmp	r3, #0
   1c51c:	c59520a4 	ldrgt	r2, [r5, #164]	; 0xa4
   1c520:	da0000b2 	ble	1c7f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xab4>
   1c524:	e0423009 	sub	r3, r2, r9
   1c528:	e3530000 	cmp	r3, #0
   1c52c:	ba000128 	blt	1c9d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc98>
   1c530:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c534:	e2433004 	sub	r3, r3, #4
   1c538:	e3530004 	cmp	r3, #4
   1c53c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c540:	ea00011f 	b	1c9c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc88>
   1c544:	0001c380 	.word	0x0001c380
   1c548:	0001c5a0 	.word	0x0001c5a0
   1c54c:	0001c5d4 	.word	0x0001c5d4
   1c550:	0001c380 	.word	0x0001c380
   1c554:	0001c558 	.word	0x0001c558
   1c558:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c55c:	e1590003 	cmp	r9, r3
   1c560:	1affff86 	bne	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c564:	e1a01009 	mov	r1, r9
   1c568:	e28500cc 	add	r0, r5, #204	; 0xcc
   1c56c:	eb000387 	bl	1d390 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1c570:	e3a03000 	mov	r3, #0
   1c574:	e1a00005 	mov	r0, r5
   1c578:	e585306c 	str	r3, [r5, #108]	; 0x6c
   1c57c:	e3a01001 	mov	r1, #1
   1c580:	ebfffb3b 	bl	1b274 <CTCPConnection::StopTimer(unsigned int)>
   1c584:	e3a0300a 	mov	r3, #10
   1c588:	e3012770 	movw	r2, #6000	; 0x1770
   1c58c:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c590:	e3a01002 	mov	r1, #2
   1c594:	e1a00005 	mov	r0, r5
   1c598:	ebfffbe1 	bl	1b524 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1c59c:	eaffff77 	b	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c5a0:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c5a4:	e1590003 	cmp	r9, r3
   1c5a8:	1affff74 	bne	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c5ac:	e1a01009 	mov	r1, r9
   1c5b0:	e28500cc 	add	r0, r5, #204	; 0xcc
   1c5b4:	eb000375 	bl	1d390 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1c5b8:	e3a03000 	mov	r3, #0
   1c5bc:	e3a01001 	mov	r1, #1
   1c5c0:	e585306c 	str	r3, [r5, #108]	; 0x6c
   1c5c4:	e1a00005 	mov	r0, r5
   1c5c8:	ebfffb29 	bl	1b274 <CTCPConnection::StopTimer(unsigned int)>
   1c5cc:	e3a03006 	mov	r3, #6
   1c5d0:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c5d4:	e2850050 	add	r0, r5, #80	; 0x50
   1c5d8:	eb0001ca 	bl	1cd08 <CRetransmissionQueue::IsEmpty() const>
   1c5dc:	e3500000 	cmp	r0, #0
   1c5e0:	0affff66 	beq	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c5e4:	e2850084 	add	r0, r5, #132	; 0x84
   1c5e8:	eb00116b 	bl	20b9c <CSynchronizationEvent::Set()>
   1c5ec:	eaffff63 	b	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c5f0:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c5f4:	e0493003 	sub	r3, r9, r3
   1c5f8:	e3530000 	cmp	r3, #0
   1c5fc:	cafffe45 	bgt	1bf18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1dc>
   1c600:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1c604:	e0433009 	sub	r3, r3, r9
   1c608:	e3530000 	cmp	r3, #0
   1c60c:	cafffe46 	bgt	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c610:	e3180b01 	tst	r8, #1024	; 0x400
   1c614:	0a0000f7 	beq	1c9f8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcbc>
   1c618:	e3a03000 	mov	r3, #0
   1c61c:	e3e02000 	mvn	r2, #0
   1c620:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c624:	e2850084 	add	r0, r5, #132	; 0x84
   1c628:	e5853068 	str	r3, [r5, #104]	; 0x68
   1c62c:	e5852034 	str	r2, [r5, #52]	; 0x34
   1c630:	eb001159 	bl	20b9c <CSynchronizationEvent::Set()>
   1c634:	e3a00001 	mov	r0, #1
   1c638:	eafffdc5 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c63c:	e1a00005 	mov	r0, r5
   1c640:	e3a01ff3 	mov	r1, #972	; 0x3cc
   1c644:	ebfffd4e 	bl	1bb84 <CTCPConnection::UnexpectedState(unsigned int)>
   1c648:	e3a00001 	mov	r0, #1
   1c64c:	eafffdc0 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c650:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1c654:	e30e0d5c 	movw	r0, #60764	; 0xed5c
   1c658:	e3401002 	movt	r1, #2
   1c65c:	e3400002 	movt	r0, #2
   1c660:	e3a02fbb 	mov	r2, #748	; 0x2ec
   1c664:	eb00214c 	bl	24b9c <assertion_failed>
   1c668:	eafffe43 	b	1bf7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x240>
   1c66c:	e59d000c 	ldr	r0, [sp, #12]
   1c670:	e0831002 	add	r1, r3, r2
   1c674:	e0401001 	sub	r1, r0, r1
   1c678:	e3510000 	cmp	r1, #0
   1c67c:	aaffff22 	bge	1c30c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5d0>
   1c680:	eafffe91 	b	1c0cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x390>
   1c684:	e0833002 	add	r3, r3, r2
   1c688:	e59d200c 	ldr	r2, [sp, #12]
   1c68c:	e0423003 	sub	r3, r2, r3
   1c690:	e3530000 	cmp	r3, #0
   1c694:	aafffe0c 	bge	1becc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1c698:	eafffe8b 	b	1c0cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x390>
   1c69c:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
   1c6a0:	e3530000 	cmp	r3, #0
   1c6a4:	0afffeaa 	beq	1c154 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x418>
   1c6a8:	eafffef6 	b	1c288 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54c>
   1c6ac:	e58d7004 	str	r7, [sp, #4]
   1c6b0:	e1a03007 	mov	r3, r7
   1c6b4:	e58d7000 	str	r7, [sp]
   1c6b8:	e3a01b01 	mov	r1, #1024	; 0x400
   1c6bc:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c6c0:	e1a00005 	mov	r0, r5
   1c6c4:	ebfffa2c 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c6c8:	e3560000 	cmp	r6, #0
   1c6cc:	e5c57030 	strb	r7, [r5, #48]	; 0x30
   1c6d0:	0afffe15 	beq	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c6d4:	eafffedd 	b	1c250 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x514>
   1c6d8:	e3a07000 	mov	r7, #0
   1c6dc:	e3a03004 	mov	r3, #4
   1c6e0:	e3a01001 	mov	r1, #1
   1c6e4:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c6e8:	e1a00005 	mov	r0, r5
   1c6ec:	e5857068 	str	r7, [r5, #104]	; 0x68
   1c6f0:	ebfffadf 	bl	1b274 <CTCPConnection::StopTimer(unsigned int)>
   1c6f4:	e3a03005 	mov	r3, #5
   1c6f8:	e2850084 	add	r0, r5, #132	; 0x84
   1c6fc:	e5853074 	str	r3, [r5, #116]	; 0x74
   1c700:	eb001125 	bl	20b9c <CSynchronizationEvent::Set()>
   1c704:	e59d3010 	ldr	r3, [sp, #16]
   1c708:	e58d7004 	str	r7, [sp, #4]
   1c70c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1c710:	e58d7000 	str	r7, [sp]
   1c714:	e1a00005 	mov	r0, r5
   1c718:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1c71c:	e59d300c 	ldr	r3, [sp, #12]
   1c720:	e58590b4 	str	r9, [r5, #180]	; 0xb4
   1c724:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c728:	e58530b0 	str	r3, [r5, #176]	; 0xb0
   1c72c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c730:	ebfffa11 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c734:	e2183c01 	ands	r3, r8, #256	; 0x100
   1c738:	e1560007 	cmp	r6, r7
   1c73c:	01530007 	cmpeq	r3, r7
   1c740:	1affff0e 	bne	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c744:	eafffdf8 	b	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c748:	e3001493 	movw	r1, #1171	; 0x493
   1c74c:	e1a00005 	mov	r0, r5
   1c750:	ebfffd0b 	bl	1bb84 <CTCPConnection::UnexpectedState(unsigned int)>
   1c754:	eaffff09 	b	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c758:	e3e02000 	mvn	r2, #0
   1c75c:	e3a03000 	mov	r3, #0
   1c760:	e5852034 	str	r2, [r5, #52]	; 0x34
   1c764:	e2850084 	add	r0, r5, #132	; 0x84
   1c768:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c76c:	eb00110a 	bl	20b9c <CSynchronizationEvent::Set()>
   1c770:	e3a00001 	mov	r0, #1
   1c774:	eafffd76 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c778:	e30014c5 	movw	r1, #1221	; 0x4c5
   1c77c:	e1a00005 	mov	r0, r5
   1c780:	ebfffcff 	bl	1bb84 <CTCPConnection::UnexpectedState(unsigned int)>
   1c784:	eaffff25 	b	1c420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6e4>
   1c788:	e3a0c000 	mov	ip, #0
   1c78c:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c790:	e3a01a01 	mov	r1, #4096	; 0x1000
   1c794:	e58dc004 	str	ip, [sp, #4]
   1c798:	e1a00005 	mov	r0, r5
   1c79c:	e58dc000 	str	ip, [sp]
   1c7a0:	ebfff9f5 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c7a4:	eaffff1d 	b	1c420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6e4>
   1c7a8:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c7ac:	e0493003 	sub	r3, r9, r3
   1c7b0:	e3530000 	cmp	r3, #0
   1c7b4:	caffff4a 	bgt	1c4e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7a8>
   1c7b8:	e59d3010 	ldr	r3, [sp, #16]
   1c7bc:	e1a01009 	mov	r1, r9
   1c7c0:	e28500cc 	add	r0, r5, #204	; 0xcc
   1c7c4:	e58590b4 	str	r9, [r5, #180]	; 0xb4
   1c7c8:	e58590a0 	str	r9, [r5, #160]	; 0xa0
   1c7cc:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1c7d0:	e59d300c 	ldr	r3, [sp, #12]
   1c7d4:	e58530b0 	str	r3, [r5, #176]	; 0xb0
   1c7d8:	eb0002ec 	bl	1d390 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1c7dc:	e3a02004 	mov	r2, #4
   1c7e0:	e3a03005 	mov	r3, #5
   1c7e4:	e5c52030 	strb	r2, [r5, #48]	; 0x30
   1c7e8:	e5853074 	str	r3, [r5, #116]	; 0x74
   1c7ec:	eafffee3 	b	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c7f0:	e3520000 	cmp	r2, #0
   1c7f4:	1affff4d 	bne	1c530 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c7f8:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c7fc:	e0493003 	sub	r3, r9, r3
   1c800:	e3530000 	cmp	r3, #0
   1c804:	caffff49 	bgt	1c530 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c808:	e59530b0 	ldr	r3, [r5, #176]	; 0xb0
   1c80c:	e59d100c 	ldr	r1, [sp, #12]
   1c810:	e0432001 	sub	r2, r3, r1
   1c814:	e3520000 	cmp	r2, #0
   1c818:	ba000005 	blt	1c834 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xaf8>
   1c81c:	e1510003 	cmp	r1, r3
   1c820:	1affff42 	bne	1c530 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c824:	e59530b4 	ldr	r3, [r5, #180]	; 0xb4
   1c828:	e0433009 	sub	r3, r3, r9
   1c82c:	e3530000 	cmp	r3, #0
   1c830:	caffff3e 	bgt	1c530 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c834:	e59d3010 	ldr	r3, [sp, #16]
   1c838:	e58590b4 	str	r9, [r5, #180]	; 0xb4
   1c83c:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1c840:	e59d300c 	ldr	r3, [sp, #12]
   1c844:	e58530b0 	str	r3, [r5, #176]	; 0xb0
   1c848:	eaffff38 	b	1c530 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c84c:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1c850:	e0491002 	sub	r1, r9, r2
   1c854:	e3510000 	cmp	r1, #0
   1c858:	da000011 	ble	1c8a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb68>
   1c85c:	e0493003 	sub	r3, r9, r3
   1c860:	e3530000 	cmp	r3, #0
   1c864:	caffff2e 	bgt	1c524 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7e8>
   1c868:	eaffff30 	b	1c530 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7f4>
   1c86c:	e3a00000 	mov	r0, #0
   1c870:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c874:	e585006c 	str	r0, [r5, #108]	; 0x6c
   1c878:	e1a02009 	mov	r2, r9
   1c87c:	e58d0004 	str	r0, [sp, #4]
   1c880:	e3a01a01 	mov	r1, #4096	; 0x1000
   1c884:	e58d0000 	str	r0, [sp]
   1c888:	e1a00005 	mov	r0, r5
   1c88c:	ebfff9ba 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c890:	e3012770 	movw	r2, #6000	; 0x1770
   1c894:	e3a01002 	mov	r1, #2
   1c898:	e1a00005 	mov	r0, r5
   1c89c:	ebfffb20 	bl	1b524 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1c8a0:	eafffeb6 	b	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c8a4:	e1a01009 	mov	r1, r9
   1c8a8:	e28500cc 	add	r0, r5, #204	; 0xcc
   1c8ac:	eb0002b7 	bl	1d390 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1c8b0:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c8b4:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   1c8b8:	e1590003 	cmp	r9, r3
   1c8bc:	e58590a0 	str	r9, [r5, #160]	; 0xa0
   1c8c0:	e0497007 	sub	r7, r9, r7
   1c8c4:	1a000006 	bne	1c8e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xba8>
   1c8c8:	e1a00005 	mov	r0, r5
   1c8cc:	e3a01001 	mov	r1, #1
   1c8d0:	ebfffa67 	bl	1b274 <CTCPConnection::StopTimer(unsigned int)>
   1c8d4:	e3a03005 	mov	r3, #5
   1c8d8:	e2850084 	add	r0, r5, #132	; 0x84
   1c8dc:	e5853074 	str	r3, [r5, #116]	; 0x74
   1c8e0:	eb0010ad 	bl	20b9c <CSynchronizationEvent::Set()>
   1c8e4:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c8e8:	e3530005 	cmp	r3, #5
   1c8ec:	0a000054 	beq	1ca44 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd08>
   1c8f0:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c8f4:	e3530008 	cmp	r3, #8
   1c8f8:	0a000051 	beq	1ca44 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd08>
   1c8fc:	e5d53030 	ldrb	r3, [r5, #48]	; 0x30
   1c900:	e3530004 	cmp	r3, #4
   1c904:	03570001 	cmpeq	r7, #1
   1c908:	0affffbe 	beq	1c808 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xacc>
   1c90c:	e3570000 	cmp	r7, #0
   1c910:	0affffbc 	beq	1c808 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xacc>
   1c914:	e1a01007 	mov	r1, r7
   1c918:	e2850050 	add	r0, r5, #80	; 0x50
   1c91c:	eb0001cd 	bl	1d058 <CRetransmissionQueue::Advance(unsigned int)>
   1c920:	eaffffb8 	b	1c808 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xacc>
   1c924:	e1a00005 	mov	r0, r5
   1c928:	e3012770 	movw	r2, #6000	; 0x1770
   1c92c:	e3a01002 	mov	r1, #2
   1c930:	ebfffafb 	bl	1b524 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1c934:	eafffd7c 	b	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1c938:	e3a01001 	mov	r1, #1
   1c93c:	e1a00005 	mov	r0, r5
   1c940:	ebfffa4b 	bl	1b274 <CTCPConnection::StopTimer(unsigned int)>
   1c944:	e3a01000 	mov	r1, #0
   1c948:	e1a00005 	mov	r0, r5
   1c94c:	ebfffa48 	bl	1b274 <CTCPConnection::StopTimer(unsigned int)>
   1c950:	e3a0300a 	mov	r3, #10
   1c954:	e1a00005 	mov	r0, r5
   1c958:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c95c:	e3012770 	movw	r2, #6000	; 0x1770
   1c960:	e3a01002 	mov	r1, #2
   1c964:	ebfffaee 	bl	1b524 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1c968:	e3a00001 	mov	r0, #1
   1c96c:	eafffcf8 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c970:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1c974:	e1590003 	cmp	r9, r3
   1c978:	03a04000 	moveq	r4, #0
   1c97c:	03a01001 	moveq	r1, #1
   1c980:	0585406c 	streq	r4, [r5, #108]	; 0x6c
   1c984:	0affffec 	beq	1c93c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc00>
   1c988:	e3a03008 	mov	r3, #8
   1c98c:	e3a00001 	mov	r0, #1
   1c990:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c994:	eafffcee 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c998:	e3a03007 	mov	r3, #7
   1c99c:	e2850084 	add	r0, r5, #132	; 0x84
   1c9a0:	e5c53030 	strb	r3, [r5, #48]	; 0x30
   1c9a4:	eb00107c 	bl	20b9c <CSynchronizationEvent::Set()>
   1c9a8:	e3a00001 	mov	r0, #1
   1c9ac:	eafffce8 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c9b0:	e1a00005 	mov	r0, r5
   1c9b4:	e3001502 	movw	r1, #1282	; 0x502
   1c9b8:	ebfffc71 	bl	1bb84 <CTCPConnection::UnexpectedState(unsigned int)>
   1c9bc:	e3a00001 	mov	r0, #1
   1c9c0:	eafffce3 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c9c4:	e300147a 	movw	r1, #1146	; 0x47a
   1c9c8:	e1a00005 	mov	r0, r5
   1c9cc:	ebfffc6c 	bl	1bb84 <CTCPConnection::UnexpectedState(unsigned int)>
   1c9d0:	eafffe6a 	b	1c380 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x644>
   1c9d4:	e3a0c000 	mov	ip, #0
   1c9d8:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   1c9dc:	e1a00005 	mov	r0, r5
   1c9e0:	e58dc004 	str	ip, [sp, #4]
   1c9e4:	e3a01a01 	mov	r1, #4096	; 0x1000
   1c9e8:	e58dc000 	str	ip, [sp]
   1c9ec:	ebfff962 	bl	1af7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1c9f0:	e3a00001 	mov	r0, #1
   1c9f4:	eafffcd6 	b	1bd54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1c9f8:	e2183c02 	ands	r3, r8, #512	; 0x200
   1c9fc:	e3530000 	cmp	r3, #0
   1ca00:	0afffd49 	beq	1bf2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f0>
   1ca04:	e59d300c 	ldr	r3, [sp, #12]
   1ca08:	e1a01009 	mov	r1, r9
   1ca0c:	e28500cc 	add	r0, r5, #204	; 0xcc
   1ca10:	e58530c4 	str	r3, [r5, #196]	; 0xc4
   1ca14:	e2833001 	add	r3, r3, #1
   1ca18:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   1ca1c:	eb00025b 	bl	1d390 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1ca20:	e59510a0 	ldr	r1, [r5, #160]	; 0xa0
   1ca24:	e0491001 	sub	r1, r9, r1
   1ca28:	e3510001 	cmp	r1, #1
   1ca2c:	9a000002 	bls	1ca3c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd00>
   1ca30:	e2411001 	sub	r1, r1, #1
   1ca34:	e2850050 	add	r0, r5, #80	; 0x50
   1ca38:	eb000186 	bl	1d058 <CRetransmissionQueue::Advance(unsigned int)>
   1ca3c:	e58590a0 	str	r9, [r5, #160]	; 0xa0
   1ca40:	eafffde1 	b	1c1cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x490>
   1ca44:	e3a03000 	mov	r3, #0
   1ca48:	e2477001 	sub	r7, r7, #1
   1ca4c:	e585306c 	str	r3, [r5, #108]	; 0x6c
   1ca50:	eaffffa9 	b	1c8fc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc0>

0001ca54 <CTCPConnection::TimerHandler(unsigned int)>:
   1ca54:	e3510002 	cmp	r1, #2
   1ca58:	e92d4070 	push	{r4, r5, r6, lr}
   1ca5c:	e1a05001 	mov	r5, r1
   1ca60:	e1a04000 	mov	r4, r0
   1ca64:	8a00001a 	bhi	1cad4 <CTCPConnection::TimerHandler(unsigned int)+0x80>
   1ca68:	e594009c 	ldr	r0, [r4, #156]	; 0x9c
   1ca6c:	e3500000 	cmp	r0, #0
   1ca70:	1a00000d 	bne	1caac <CTCPConnection::TimerHandler(unsigned int)+0x58>
   1ca74:	e2853024 	add	r3, r5, #36	; 0x24
   1ca78:	e7942103 	ldr	r2, [r4, r3, lsl #2]
   1ca7c:	e3520000 	cmp	r2, #0
   1ca80:	17840103 	strne	r0, [r4, r3, lsl #2]
   1ca84:	0a000007 	beq	1caa8 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   1ca88:	e3550003 	cmp	r5, #3
   1ca8c:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
   1ca90:	ea000003 	b	1caa4 <CTCPConnection::TimerHandler(unsigned int)+0x50>
   1ca94:	0001cafc 	.word	0x0001cafc
   1ca98:	0001cb18 	.word	0x0001cb18
   1ca9c:	0001caf0 	.word	0x0001caf0
   1caa0:	0001cafc 	.word	0x0001cafc
   1caa4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1caa8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1caac:	eb00153a 	bl	21f9c <EnterCritical>
   1cab0:	e2853024 	add	r3, r5, #36	; 0x24
   1cab4:	e7942103 	ldr	r2, [r4, r3, lsl #2]
   1cab8:	e3520000 	cmp	r2, #0
   1cabc:	1a00002b 	bne	1cb70 <CTCPConnection::TimerHandler(unsigned int)+0x11c>
   1cac0:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
   1cac4:	e3530000 	cmp	r3, #0
   1cac8:	08bd8070 	popeq	{r4, r5, r6, pc}
   1cacc:	e8bd4070 	pop	{r4, r5, r6, lr}
   1cad0:	ea00155f 	b	22054 <LeaveCritical>
   1cad4:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1cad8:	e30e0c20 	movw	r0, #60448	; 0xec20
   1cadc:	e3401002 	movt	r1, #2
   1cae0:	e3400002 	movt	r0, #2
   1cae4:	e30025be 	movw	r2, #1470	; 0x5be
   1cae8:	eb00202b 	bl	24b9c <assertion_failed>
   1caec:	eaffffdd 	b	1ca68 <CTCPConnection::TimerHandler(unsigned int)+0x14>
   1caf0:	e3a03000 	mov	r3, #0
   1caf4:	e5c43030 	strb	r3, [r4, #48]	; 0x30
   1caf8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cafc:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1cb00:	e30b0130 	movw	r0, #45360	; 0xb130
   1cb04:	e3401002 	movt	r1, #2
   1cb08:	e3400002 	movt	r0, #2
   1cb0c:	e30025fc 	movw	r2, #1532	; 0x5fc
   1cb10:	e8bd4070 	pop	{r4, r5, r6, lr}
   1cb14:	ea002020 	b	24b9c <assertion_failed>
   1cb18:	e28400cc 	add	r0, r4, #204	; 0xcc
   1cb1c:	eb0001de 	bl	1d29c <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   1cb20:	e5943074 	ldr	r3, [r4, #116]	; 0x74
   1cb24:	e3530000 	cmp	r3, #0
   1cb28:	e2433001 	sub	r3, r3, #1
   1cb2c:	e5843074 	str	r3, [r4, #116]	; 0x74
   1cb30:	0a00003d 	beq	1cc2c <CTCPConnection::TimerHandler(unsigned int)+0x1d8>
   1cb34:	e5d43030 	ldrb	r3, [r4, #48]	; 0x30
   1cb38:	e353000a 	cmp	r3, #10
   1cb3c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1cb40:	eaffffd7 	b	1caa4 <CTCPConnection::TimerHandler(unsigned int)+0x50>
   1cb44:	0001cc1c 	.word	0x0001cc1c
   1cb48:	0001cc1c 	.word	0x0001cc1c
   1cb4c:	0001cbec 	.word	0x0001cbec
   1cb50:	0001cbec 	.word	0x0001cbec
   1cb54:	0001cbbc 	.word	0x0001cbbc
   1cb58:	0001cb8c 	.word	0x0001cb8c
   1cb5c:	0001cc1c 	.word	0x0001cc1c
   1cb60:	0001cbbc 	.word	0x0001cbbc
   1cb64:	0001cb8c 	.word	0x0001cb8c
   1cb68:	0001cb8c 	.word	0x0001cb8c
   1cb6c:	0001cc1c 	.word	0x0001cc1c
   1cb70:	e594209c 	ldr	r2, [r4, #156]	; 0x9c
   1cb74:	e3a01000 	mov	r1, #0
   1cb78:	e7841103 	str	r1, [r4, r3, lsl #2]
   1cb7c:	e1520001 	cmp	r2, r1
   1cb80:	0affffc0 	beq	1ca88 <CTCPConnection::TimerHandler(unsigned int)+0x34>
   1cb84:	eb001532 	bl	22054 <LeaveCritical>
   1cb88:	eaffffbe 	b	1ca88 <CTCPConnection::TimerHandler(unsigned int)+0x34>
   1cb8c:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
   1cb90:	e3530000 	cmp	r3, #0
   1cb94:	0a000005 	beq	1cbb0 <CTCPConnection::TimerHandler(unsigned int)+0x15c>
   1cb98:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1cb9c:	e30e0c58 	movw	r0, #60504	; 0xec58
   1cba0:	e3401002 	movt	r1, #2
   1cba4:	e3400002 	movt	r0, #2
   1cba8:	e3a02e5f 	mov	r2, #1520	; 0x5f0
   1cbac:	eb001ffa 	bl	24b9c <assertion_failed>
   1cbb0:	e3a03001 	mov	r3, #1
   1cbb4:	e584306c 	str	r3, [r4, #108]	; 0x6c
   1cbb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cbbc:	e5943064 	ldr	r3, [r4, #100]	; 0x64
   1cbc0:	e3530000 	cmp	r3, #0
   1cbc4:	0a000005 	beq	1cbe0 <CTCPConnection::TimerHandler(unsigned int)+0x18c>
   1cbc8:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1cbcc:	e30e0d78 	movw	r0, #60792	; 0xed78
   1cbd0:	e3401002 	movt	r1, #2
   1cbd4:	e3400002 	movt	r0, #2
   1cbd8:	e30025e9 	movw	r2, #1513	; 0x5e9
   1cbdc:	eb001fee 	bl	24b9c <assertion_failed>
   1cbe0:	e3a03001 	mov	r3, #1
   1cbe4:	e5843064 	str	r3, [r4, #100]	; 0x64
   1cbe8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cbec:	e5943068 	ldr	r3, [r4, #104]	; 0x68
   1cbf0:	e3530000 	cmp	r3, #0
   1cbf4:	0a000005 	beq	1cc10 <CTCPConnection::TimerHandler(unsigned int)+0x1bc>
   1cbf8:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1cbfc:	e30e0d6c 	movw	r0, #60780	; 0xed6c
   1cc00:	e3401002 	movt	r1, #2
   1cc04:	e3400002 	movt	r0, #2
   1cc08:	e30025e3 	movw	r2, #1507	; 0x5e3
   1cc0c:	eb001fe2 	bl	24b9c <assertion_failed>
   1cc10:	e3a03001 	mov	r3, #1
   1cc14:	e5843068 	str	r3, [r4, #104]	; 0x68
   1cc18:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cc1c:	e1a00004 	mov	r0, r4
   1cc20:	e30015de 	movw	r1, #1502	; 0x5de
   1cc24:	e8bd4070 	pop	{r4, r5, r6, lr}
   1cc28:	eafffbd5 	b	1bb84 <CTCPConnection::UnexpectedState(unsigned int)>
   1cc2c:	e3a03001 	mov	r3, #1
   1cc30:	e5843078 	str	r3, [r4, #120]	; 0x78
   1cc34:	e8bd8070 	pop	{r4, r5, r6, pc}

0001cc38 <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   1cc38:	e92d4070 	push	{r4, r5, r6, lr}
   1cc3c:	e2525000 	subs	r5, r2, #0
   1cc40:	e1a04001 	mov	r4, r1
   1cc44:	0a00000b 	beq	1cc78 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   1cc48:	e3540002 	cmp	r4, #2
   1cc4c:	9a000005 	bls	1cc68 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x30>
   1cc50:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1cc54:	e30e0c20 	movw	r0, #60448	; 0xec20
   1cc58:	e3401002 	movt	r1, #2
   1cc5c:	e3400002 	movt	r0, #2
   1cc60:	e3002607 	movw	r2, #1543	; 0x607
   1cc64:	eb001fcc 	bl	24b9c <assertion_failed>
   1cc68:	e1a01004 	mov	r1, r4
   1cc6c:	e1a00005 	mov	r0, r5
   1cc70:	e8bd4070 	pop	{r4, r5, r6, lr}
   1cc74:	eaffff76 	b	1ca54 <CTCPConnection::TimerHandler(unsigned int)>
   1cc78:	e30e1bdc 	movw	r1, #60380	; 0xebdc
   1cc7c:	e30a0938 	movw	r0, #43320	; 0xa938
   1cc80:	e3401002 	movt	r1, #2
   1cc84:	e3400002 	movt	r0, #2
   1cc88:	e3002604 	movw	r2, #1540	; 0x604
   1cc8c:	eb001fc2 	bl	24b9c <assertion_failed>
   1cc90:	eaffffec 	b	1cc48 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x10>

0001cc94 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   1cc94:	e3510001 	cmp	r1, #1
   1cc98:	e3a03000 	mov	r3, #0
   1cc9c:	e92d4010 	push	{r4, lr}
   1cca0:	e1a04000 	mov	r4, r0
   1cca4:	e880000a 	stm	r0, {r1, r3}
   1cca8:	e5803008 	str	r3, [r0, #8]
   1ccac:	e580300c 	str	r3, [r0, #12]
   1ccb0:	e5803010 	str	r3, [r0, #16]
   1ccb4:	9a000004 	bls	1cccc <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x38>
   1ccb8:	e1a00001 	mov	r0, r1
   1ccbc:	eb0014ab 	bl	21f70 <operator new[](unsigned int)>
   1ccc0:	e5840004 	str	r0, [r4, #4]
   1ccc4:	e1a00004 	mov	r0, r4
   1ccc8:	e8bd8010 	pop	{r4, pc}
   1cccc:	e30e1e04 	movw	r1, #60932	; 0xee04
   1ccd0:	e30e0e1c 	movw	r0, #60956	; 0xee1c
   1ccd4:	e3401002 	movt	r1, #2
   1ccd8:	e3400002 	movt	r0, #2
   1ccdc:	e3a0201e 	mov	r2, #30
   1cce0:	eb001fad 	bl	24b9c <assertion_failed>
   1cce4:	e5941000 	ldr	r1, [r4]
   1cce8:	eafffff2 	b	1ccb8 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x24>

0001ccec <CRetransmissionQueue::~CRetransmissionQueue()>:
   1ccec:	e92d4010 	push	{r4, lr}
   1ccf0:	e3a01001 	mov	r1, #1
   1ccf4:	e1a04000 	mov	r4, r0
   1ccf8:	e5900004 	ldr	r0, [r0, #4]
   1ccfc:	eb00149e 	bl	21f7c <operator delete(void*, unsigned int)>
   1cd00:	e1a00004 	mov	r0, r4
   1cd04:	e8bd8010 	pop	{r4, pc}

0001cd08 <CRetransmissionQueue::IsEmpty() const>:
   1cd08:	e590200c 	ldr	r2, [r0, #12]
   1cd0c:	e5900008 	ldr	r0, [r0, #8]
   1cd10:	e0420000 	sub	r0, r2, r0
   1cd14:	e16f0f10 	clz	r0, r0
   1cd18:	e1a002a0 	lsr	r0, r0, #5
   1cd1c:	e12fff1e 	bx	lr

0001cd20 <CRetransmissionQueue::GetFreeSpace() const>:
   1cd20:	e5903000 	ldr	r3, [r0]
   1cd24:	e92d4010 	push	{r4, lr}
   1cd28:	e3530001 	cmp	r3, #1
   1cd2c:	e1a04000 	mov	r4, r0
   1cd30:	9a00001f 	bls	1cdb4 <CRetransmissionQueue::GetFreeSpace() const+0x94>
   1cd34:	e5942008 	ldr	r2, [r4, #8]
   1cd38:	e1520003 	cmp	r2, r3
   1cd3c:	2a00000a 	bcs	1cd6c <CRetransmissionQueue::GetFreeSpace() const+0x4c>
   1cd40:	e594000c 	ldr	r0, [r4, #12]
   1cd44:	e1500003 	cmp	r0, r3
   1cd48:	2a000011 	bcs	1cd94 <CRetransmissionQueue::GetFreeSpace() const+0x74>
   1cd4c:	e5943008 	ldr	r3, [r4, #8]
   1cd50:	e1530000 	cmp	r3, r0
   1cd54:	25942000 	ldrcs	r2, [r4]
   1cd58:	31e03003 	mvncc	r3, r3
   1cd5c:	22422001 	subcs	r2, r2, #1
   1cd60:	20423003 	subcs	r3, r2, r3
   1cd64:	e0830000 	add	r0, r3, r0
   1cd68:	e8bd8010 	pop	{r4, pc}
   1cd6c:	e30e1e04 	movw	r1, #60932	; 0xee04
   1cd70:	e30e0e28 	movw	r0, #60968	; 0xee28
   1cd74:	e3401002 	movt	r1, #2
   1cd78:	e3400002 	movt	r0, #2
   1cd7c:	e3a02034 	mov	r2, #52	; 0x34
   1cd80:	eb001f85 	bl	24b9c <assertion_failed>
   1cd84:	e5943000 	ldr	r3, [r4]
   1cd88:	e594000c 	ldr	r0, [r4, #12]
   1cd8c:	e1500003 	cmp	r0, r3
   1cd90:	3affffed 	bcc	1cd4c <CRetransmissionQueue::GetFreeSpace() const+0x2c>
   1cd94:	e30e1e04 	movw	r1, #60932	; 0xee04
   1cd98:	e30e0e3c 	movw	r0, #60988	; 0xee3c
   1cd9c:	e3401002 	movt	r1, #2
   1cda0:	e3400002 	movt	r0, #2
   1cda4:	e3a02035 	mov	r2, #53	; 0x35
   1cda8:	eb001f7b 	bl	24b9c <assertion_failed>
   1cdac:	e594000c 	ldr	r0, [r4, #12]
   1cdb0:	eaffffe5 	b	1cd4c <CRetransmissionQueue::GetFreeSpace() const+0x2c>
   1cdb4:	e30e1e04 	movw	r1, #60932	; 0xee04
   1cdb8:	e30e0e1c 	movw	r0, #60956	; 0xee1c
   1cdbc:	e3401002 	movt	r1, #2
   1cdc0:	e3400002 	movt	r0, #2
   1cdc4:	e3a02033 	mov	r2, #51	; 0x33
   1cdc8:	eb001f73 	bl	24b9c <assertion_failed>
   1cdcc:	e5943000 	ldr	r3, [r4]
   1cdd0:	eaffffd7 	b	1cd34 <CRetransmissionQueue::GetFreeSpace() const+0x14>

0001cdd4 <CRetransmissionQueue::Write(void const*, unsigned int)>:
   1cdd4:	e92d4070 	push	{r4, r5, r6, lr}
   1cdd8:	e2526000 	subs	r6, r2, #0
   1cddc:	e1a05001 	mov	r5, r1
   1cde0:	e1a04000 	mov	r4, r0
   1cde4:	0a00001e 	beq	1ce64 <CRetransmissionQueue::Write(void const*, unsigned int)+0x90>
   1cde8:	ebffffcc 	bl	1cd20 <CRetransmissionQueue::GetFreeSpace() const>
   1cdec:	e1560000 	cmp	r6, r0
   1cdf0:	8a000014 	bhi	1ce48 <CRetransmissionQueue::Write(void const*, unsigned int)+0x74>
   1cdf4:	e3550000 	cmp	r5, #0
   1cdf8:	0a000029 	beq	1cea4 <CRetransmissionQueue::Write(void const*, unsigned int)+0xd0>
   1cdfc:	e5943004 	ldr	r3, [r4, #4]
   1ce00:	e3530000 	cmp	r3, #0
   1ce04:	0a00001f 	beq	1ce88 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb4>
   1ce08:	e3560000 	cmp	r6, #0
   1ce0c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ce10:	e5941008 	ldr	r1, [r4, #8]
   1ce14:	e0856006 	add	r6, r5, r6
   1ce18:	e2812001 	add	r2, r1, #1
   1ce1c:	e5943004 	ldr	r3, [r4, #4]
   1ce20:	e5842008 	str	r2, [r4, #8]
   1ce24:	e4d52001 	ldrb	r2, [r5], #1
   1ce28:	e7c32001 	strb	r2, [r3, r1]
   1ce2c:	e5940008 	ldr	r0, [r4, #8]
   1ce30:	e5941000 	ldr	r1, [r4]
   1ce34:	eb0013a6 	bl	21cd4 <__aeabi_uidivmod>
   1ce38:	e1550006 	cmp	r5, r6
   1ce3c:	e5841008 	str	r1, [r4, #8]
   1ce40:	1afffff4 	bne	1ce18 <CRetransmissionQueue::Write(void const*, unsigned int)+0x44>
   1ce44:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ce48:	e30e1e04 	movw	r1, #60932	; 0xee04
   1ce4c:	e30e0e50 	movw	r0, #61008	; 0xee50
   1ce50:	e3401002 	movt	r1, #2
   1ce54:	e3400002 	movt	r0, #2
   1ce58:	e3a02042 	mov	r2, #66	; 0x42
   1ce5c:	eb001f4e 	bl	24b9c <assertion_failed>
   1ce60:	eaffffe3 	b	1cdf4 <CRetransmissionQueue::Write(void const*, unsigned int)+0x20>
   1ce64:	e3a02041 	mov	r2, #65	; 0x41
   1ce68:	e30e1e04 	movw	r1, #60932	; 0xee04
   1ce6c:	e30e06f8 	movw	r0, #59128	; 0xe6f8
   1ce70:	e3401002 	movt	r1, #2
   1ce74:	e3400002 	movt	r0, #2
   1ce78:	eb001f47 	bl	24b9c <assertion_failed>
   1ce7c:	e1a00004 	mov	r0, r4
   1ce80:	ebffffa6 	bl	1cd20 <CRetransmissionQueue::GetFreeSpace() const>
   1ce84:	eaffffda 	b	1cdf4 <CRetransmissionQueue::Write(void const*, unsigned int)+0x20>
   1ce88:	e30e1e04 	movw	r1, #60932	; 0xee04
   1ce8c:	e30c041c 	movw	r0, #50204	; 0xc41c
   1ce90:	e3401002 	movt	r1, #2
   1ce94:	e3400002 	movt	r0, #2
   1ce98:	e3a02046 	mov	r2, #70	; 0x46
   1ce9c:	eb001f3e 	bl	24b9c <assertion_failed>
   1cea0:	eaffffd8 	b	1ce08 <CRetransmissionQueue::Write(void const*, unsigned int)+0x34>
   1cea4:	e30e1e04 	movw	r1, #60932	; 0xee04
   1cea8:	e30e0e6c 	movw	r0, #61036	; 0xee6c
   1ceac:	e3401002 	movt	r1, #2
   1ceb0:	e3400002 	movt	r0, #2
   1ceb4:	e3a02045 	mov	r2, #69	; 0x45
   1ceb8:	eb001f37 	bl	24b9c <assertion_failed>
   1cebc:	eaffffce 	b	1cdfc <CRetransmissionQueue::Write(void const*, unsigned int)+0x28>

0001cec0 <CRetransmissionQueue::GetBytesAvailable() const>:
   1cec0:	e5903000 	ldr	r3, [r0]
   1cec4:	e92d4010 	push	{r4, lr}
   1cec8:	e3530001 	cmp	r3, #1
   1cecc:	e1a04000 	mov	r4, r0
   1ced0:	9a00001d 	bls	1cf4c <CRetransmissionQueue::GetBytesAvailable() const+0x8c>
   1ced4:	e5942008 	ldr	r2, [r4, #8]
   1ced8:	e1520003 	cmp	r2, r3
   1cedc:	2a000008 	bcs	1cf04 <CRetransmissionQueue::GetBytesAvailable() const+0x44>
   1cee0:	e5940010 	ldr	r0, [r4, #16]
   1cee4:	e1500003 	cmp	r0, r3
   1cee8:	2a00000f 	bcs	1cf2c <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   1ceec:	e5943008 	ldr	r3, [r4, #8]
   1cef0:	e1530000 	cmp	r3, r0
   1cef4:	35942000 	ldrcc	r2, [r4]
   1cef8:	30833002 	addcc	r3, r3, r2
   1cefc:	e0430000 	sub	r0, r3, r0
   1cf00:	e8bd8010 	pop	{r4, pc}
   1cf04:	e30e1e04 	movw	r1, #60932	; 0xee04
   1cf08:	e30e0e28 	movw	r0, #60968	; 0xee28
   1cf0c:	e3401002 	movt	r1, #2
   1cf10:	e3400002 	movt	r0, #2
   1cf14:	e3a02052 	mov	r2, #82	; 0x52
   1cf18:	eb001f1f 	bl	24b9c <assertion_failed>
   1cf1c:	e5943000 	ldr	r3, [r4]
   1cf20:	e5940010 	ldr	r0, [r4, #16]
   1cf24:	e1500003 	cmp	r0, r3
   1cf28:	3affffef 	bcc	1ceec <CRetransmissionQueue::GetBytesAvailable() const+0x2c>
   1cf2c:	e30e1e04 	movw	r1, #60932	; 0xee04
   1cf30:	e30e0e74 	movw	r0, #61044	; 0xee74
   1cf34:	e3401002 	movt	r1, #2
   1cf38:	e3400002 	movt	r0, #2
   1cf3c:	e3a02053 	mov	r2, #83	; 0x53
   1cf40:	eb001f15 	bl	24b9c <assertion_failed>
   1cf44:	e5940010 	ldr	r0, [r4, #16]
   1cf48:	eaffffe7 	b	1ceec <CRetransmissionQueue::GetBytesAvailable() const+0x2c>
   1cf4c:	e30e1e04 	movw	r1, #60932	; 0xee04
   1cf50:	e30e0e1c 	movw	r0, #60956	; 0xee1c
   1cf54:	e3401002 	movt	r1, #2
   1cf58:	e3400002 	movt	r0, #2
   1cf5c:	e3a02051 	mov	r2, #81	; 0x51
   1cf60:	eb001f0d 	bl	24b9c <assertion_failed>
   1cf64:	e5943000 	ldr	r3, [r4]
   1cf68:	eaffffd9 	b	1ced4 <CRetransmissionQueue::GetBytesAvailable() const+0x14>

0001cf6c <CRetransmissionQueue::Read(void*, unsigned int)>:
   1cf6c:	e92d4070 	push	{r4, r5, r6, lr}
   1cf70:	e2526000 	subs	r6, r2, #0
   1cf74:	e1a05001 	mov	r5, r1
   1cf78:	e1a04000 	mov	r4, r0
   1cf7c:	0a00001e 	beq	1cffc <CRetransmissionQueue::Read(void*, unsigned int)+0x90>
   1cf80:	ebffffce 	bl	1cec0 <CRetransmissionQueue::GetBytesAvailable() const>
   1cf84:	e1560000 	cmp	r6, r0
   1cf88:	8a000014 	bhi	1cfe0 <CRetransmissionQueue::Read(void*, unsigned int)+0x74>
   1cf8c:	e3550000 	cmp	r5, #0
   1cf90:	0a000029 	beq	1d03c <CRetransmissionQueue::Read(void*, unsigned int)+0xd0>
   1cf94:	e5943004 	ldr	r3, [r4, #4]
   1cf98:	e3530000 	cmp	r3, #0
   1cf9c:	0a00001f 	beq	1d020 <CRetransmissionQueue::Read(void*, unsigned int)+0xb4>
   1cfa0:	e3560000 	cmp	r6, #0
   1cfa4:	08bd8070 	popeq	{r4, r5, r6, pc}
   1cfa8:	e5941010 	ldr	r1, [r4, #16]
   1cfac:	e0856006 	add	r6, r5, r6
   1cfb0:	e5943004 	ldr	r3, [r4, #4]
   1cfb4:	e2812001 	add	r2, r1, #1
   1cfb8:	e5842010 	str	r2, [r4, #16]
   1cfbc:	e7d33001 	ldrb	r3, [r3, r1]
   1cfc0:	e4c53001 	strb	r3, [r5], #1
   1cfc4:	e5940010 	ldr	r0, [r4, #16]
   1cfc8:	e5941000 	ldr	r1, [r4]
   1cfcc:	eb001340 	bl	21cd4 <__aeabi_uidivmod>
   1cfd0:	e1550006 	cmp	r5, r6
   1cfd4:	e5841010 	str	r1, [r4, #16]
   1cfd8:	1afffff4 	bne	1cfb0 <CRetransmissionQueue::Read(void*, unsigned int)+0x44>
   1cfdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cfe0:	e30e1e04 	movw	r1, #60932	; 0xee04
   1cfe4:	e30e0e8c 	movw	r0, #61068	; 0xee8c
   1cfe8:	e3401002 	movt	r1, #2
   1cfec:	e3400002 	movt	r0, #2
   1cff0:	e3a02060 	mov	r2, #96	; 0x60
   1cff4:	eb001ee8 	bl	24b9c <assertion_failed>
   1cff8:	eaffffe3 	b	1cf8c <CRetransmissionQueue::Read(void*, unsigned int)+0x20>
   1cffc:	e3a0205f 	mov	r2, #95	; 0x5f
   1d000:	e30e1e04 	movw	r1, #60932	; 0xee04
   1d004:	e30e06f8 	movw	r0, #59128	; 0xe6f8
   1d008:	e3401002 	movt	r1, #2
   1d00c:	e3400002 	movt	r0, #2
   1d010:	eb001ee1 	bl	24b9c <assertion_failed>
   1d014:	e1a00004 	mov	r0, r4
   1d018:	ebffffa8 	bl	1cec0 <CRetransmissionQueue::GetBytesAvailable() const>
   1d01c:	eaffffda 	b	1cf8c <CRetransmissionQueue::Read(void*, unsigned int)+0x20>
   1d020:	e30e1e04 	movw	r1, #60932	; 0xee04
   1d024:	e30c041c 	movw	r0, #50204	; 0xc41c
   1d028:	e3401002 	movt	r1, #2
   1d02c:	e3400002 	movt	r0, #2
   1d030:	e3a02064 	mov	r2, #100	; 0x64
   1d034:	eb001ed8 	bl	24b9c <assertion_failed>
   1d038:	eaffffd8 	b	1cfa0 <CRetransmissionQueue::Read(void*, unsigned int)+0x34>
   1d03c:	e30e1e04 	movw	r1, #60932	; 0xee04
   1d040:	e30e0e6c 	movw	r0, #61036	; 0xee6c
   1d044:	e3401002 	movt	r1, #2
   1d048:	e3400002 	movt	r0, #2
   1d04c:	e3a02063 	mov	r2, #99	; 0x63
   1d050:	eb001ed1 	bl	24b9c <assertion_failed>
   1d054:	eaffffce 	b	1cf94 <CRetransmissionQueue::Read(void*, unsigned int)+0x28>

0001d058 <CRetransmissionQueue::Advance(unsigned int)>:
   1d058:	e92d4070 	push	{r4, r5, r6, lr}
   1d05c:	e1a05001 	mov	r5, r1
   1d060:	e5901000 	ldr	r1, [r0]
   1d064:	e1a04000 	mov	r4, r0
   1d068:	e3510001 	cmp	r1, #1
   1d06c:	9a000019 	bls	1d0d8 <CRetransmissionQueue::Advance(unsigned int)+0x80>
   1d070:	e594300c 	ldr	r3, [r4, #12]
   1d074:	e1530001 	cmp	r3, r1
   1d078:	2a00000e 	bcs	1d0b8 <CRetransmissionQueue::Advance(unsigned int)+0x60>
   1d07c:	e5943010 	ldr	r3, [r4, #16]
   1d080:	e1530001 	cmp	r3, r1
   1d084:	3a000006 	bcc	1d0a4 <CRetransmissionQueue::Advance(unsigned int)+0x4c>
   1d088:	e30e1e04 	movw	r1, #60932	; 0xee04
   1d08c:	e30e0e74 	movw	r0, #61044	; 0xee74
   1d090:	e3401002 	movt	r1, #2
   1d094:	e3400002 	movt	r0, #2
   1d098:	e3a02071 	mov	r2, #113	; 0x71
   1d09c:	eb001ebe 	bl	24b9c <assertion_failed>
   1d0a0:	e5941000 	ldr	r1, [r4]
   1d0a4:	e594000c 	ldr	r0, [r4, #12]
   1d0a8:	e0850000 	add	r0, r5, r0
   1d0ac:	eb001308 	bl	21cd4 <__aeabi_uidivmod>
   1d0b0:	e584100c 	str	r1, [r4, #12]
   1d0b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d0b8:	e30e1e04 	movw	r1, #60932	; 0xee04
   1d0bc:	e30e0e3c 	movw	r0, #60988	; 0xee3c
   1d0c0:	e3401002 	movt	r1, #2
   1d0c4:	e3400002 	movt	r0, #2
   1d0c8:	e3a02070 	mov	r2, #112	; 0x70
   1d0cc:	eb001eb2 	bl	24b9c <assertion_failed>
   1d0d0:	e5941000 	ldr	r1, [r4]
   1d0d4:	eaffffe8 	b	1d07c <CRetransmissionQueue::Advance(unsigned int)+0x24>
   1d0d8:	e30e1e04 	movw	r1, #60932	; 0xee04
   1d0dc:	e30e0e1c 	movw	r0, #60956	; 0xee1c
   1d0e0:	e3401002 	movt	r1, #2
   1d0e4:	e3400002 	movt	r0, #2
   1d0e8:	e3a0206f 	mov	r2, #111	; 0x6f
   1d0ec:	eb001eaa 	bl	24b9c <assertion_failed>
   1d0f0:	e5941000 	ldr	r1, [r4]
   1d0f4:	eaffffdd 	b	1d070 <CRetransmissionQueue::Advance(unsigned int)+0x18>

0001d0f8 <CRetransmissionQueue::Reset()>:
   1d0f8:	e590300c 	ldr	r3, [r0, #12]
   1d0fc:	e5803010 	str	r3, [r0, #16]
   1d100:	e12fff1e 	bx	lr

0001d104 <CRetransmissionQueue::Flush()>:
   1d104:	e3a03000 	mov	r3, #0
   1d108:	e5803008 	str	r3, [r0, #8]
   1d10c:	e580300c 	str	r3, [r0, #12]
   1d110:	e5803010 	str	r3, [r0, #16]
   1d114:	e12fff1e 	bx	lr

0001d118 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   1d118:	e92d4010 	push	{r4, lr}
   1d11c:	e1a04000 	mov	r4, r0
   1d120:	eb0016f7 	bl	22d04 <CTimer::Get()>
   1d124:	e3a03000 	mov	r3, #0
   1d128:	e3a02f4b 	mov	r2, #300	; 0x12c
   1d12c:	e5843004 	str	r3, [r4, #4]
   1d130:	e5842008 	str	r2, [r4, #8]
   1d134:	e3a02001 	mov	r2, #1
   1d138:	e5843018 	str	r3, [r4, #24]
   1d13c:	e5843020 	str	r3, [r4, #32]
   1d140:	e584200c 	str	r2, [r4, #12]
   1d144:	e5842024 	str	r2, [r4, #36]	; 0x24
   1d148:	e3500000 	cmp	r0, #0
   1d14c:	e5840000 	str	r0, [r4]
   1d150:	0a000001 	beq	1d15c <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x44>
   1d154:	e1a00004 	mov	r0, r4
   1d158:	e8bd8010 	pop	{r4, pc}
   1d15c:	e3a02033 	mov	r2, #51	; 0x33
   1d160:	e30e1eac 	movw	r1, #61100	; 0xeeac
   1d164:	e30a0988 	movw	r0, #43400	; 0xa988
   1d168:	e3401002 	movt	r1, #2
   1d16c:	e3400002 	movt	r0, #2
   1d170:	eb001e89 	bl	24b9c <assertion_failed>
   1d174:	e1a00004 	mov	r0, r4
   1d178:	e8bd8010 	pop	{r4, pc}

0001d17c <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   1d17c:	e12fff1e 	bx	lr

0001d180 <CRetransmissionTimeoutCalculator::GetRTO() const>:
   1d180:	e5900008 	ldr	r0, [r0, #8]
   1d184:	e12fff1e 	bx	lr

0001d188 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   1d188:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d18c:	e3530000 	cmp	r3, #0
   1d190:	1a000007 	bne	1d1b4 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x2c>
   1d194:	e5801004 	str	r1, [r0, #4]
   1d198:	e3a02001 	mov	r2, #1
   1d19c:	e3a01f4b 	mov	r1, #300	; 0x12c
   1d1a0:	e5803018 	str	r3, [r0, #24]
   1d1a4:	e5803020 	str	r3, [r0, #32]
   1d1a8:	e5801008 	str	r1, [r0, #8]
   1d1ac:	e580200c 	str	r2, [r0, #12]
   1d1b0:	e12fff1e 	bx	lr
   1d1b4:	e92d4070 	push	{r4, r5, r6, lr}
   1d1b8:	e1a04000 	mov	r4, r0
   1d1bc:	e1a00003 	mov	r0, r3
   1d1c0:	e1a05001 	mov	r5, r1
   1d1c4:	eb001374 	bl	21f9c <EnterCritical>
   1d1c8:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1d1cc:	e3a03f4b 	mov	r3, #300	; 0x12c
   1d1d0:	e5845004 	str	r5, [r4, #4]
   1d1d4:	e3520000 	cmp	r2, #0
   1d1d8:	e5843008 	str	r3, [r4, #8]
   1d1dc:	e3a02001 	mov	r2, #1
   1d1e0:	e3a03000 	mov	r3, #0
   1d1e4:	e584200c 	str	r2, [r4, #12]
   1d1e8:	e5843018 	str	r3, [r4, #24]
   1d1ec:	e5843020 	str	r3, [r4, #32]
   1d1f0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d1f4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d1f8:	ea001395 	b	22054 <LeaveCritical>

0001d1fc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   1d1fc:	e92d4010 	push	{r4, lr}
   1d200:	e1a04000 	mov	r4, r0
   1d204:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1d208:	e3500000 	cmp	r0, #0
   1d20c:	1a000012 	bne	1d25c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x60>
   1d210:	e5943018 	ldr	r3, [r4, #24]
   1d214:	e3530000 	cmp	r3, #0
   1d218:	1a00000e 	bne	1d258 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   1d21c:	e5943020 	ldr	r3, [r4, #32]
   1d220:	e3530000 	cmp	r3, #0
   1d224:	1a000006 	bne	1d244 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1d228:	e5940000 	ldr	r0, [r4]
   1d22c:	e3a03001 	mov	r3, #1
   1d230:	e5843018 	str	r3, [r4, #24]
   1d234:	e3500000 	cmp	r0, #0
   1d238:	0a00000f 	beq	1d27c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x80>
   1d23c:	eb001460 	bl	223c4 <CTimer::GetTicks() const>
   1d240:	e584001c 	str	r0, [r4, #28]
   1d244:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d248:	e3530000 	cmp	r3, #0
   1d24c:	08bd8010 	popeq	{r4, pc}
   1d250:	e8bd4010 	pop	{r4, lr}
   1d254:	ea00137e 	b	22054 <LeaveCritical>
   1d258:	e8bd8010 	pop	{r4, pc}
   1d25c:	eb00134e 	bl	21f9c <EnterCritical>
   1d260:	e5943018 	ldr	r3, [r4, #24]
   1d264:	e3530000 	cmp	r3, #0
   1d268:	1afffff5 	bne	1d244 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1d26c:	e5943020 	ldr	r3, [r4, #32]
   1d270:	e3530000 	cmp	r3, #0
   1d274:	1afffff2 	bne	1d244 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1d278:	eaffffea 	b	1d228 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   1d27c:	e30e1eac 	movw	r1, #61100	; 0xeeac
   1d280:	e30a0988 	movw	r0, #43400	; 0xa988
   1d284:	e3401002 	movt	r1, #2
   1d288:	e3400002 	movt	r0, #2
   1d28c:	e3a0205f 	mov	r2, #95	; 0x5f
   1d290:	eb001e41 	bl	24b9c <assertion_failed>
   1d294:	e5940000 	ldr	r0, [r4]
   1d298:	eaffffe7 	b	1d23c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x40>

0001d29c <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   1d29c:	e92d4010 	push	{r4, lr}
   1d2a0:	e1a04000 	mov	r4, r0
   1d2a4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1d2a8:	e3500000 	cmp	r0, #0
   1d2ac:	1a000011 	bne	1d2f8 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x5c>
   1d2b0:	e5943008 	ldr	r3, [r4, #8]
   1d2b4:	e3021ee0 	movw	r1, #12000	; 0x2ee0
   1d2b8:	e5942020 	ldr	r2, [r4, #32]
   1d2bc:	e1a03083 	lsl	r3, r3, #1
   1d2c0:	e2822001 	add	r2, r2, #1
   1d2c4:	e1530001 	cmp	r3, r1
   1d2c8:	e5842020 	str	r2, [r4, #32]
   1d2cc:	21a03001 	movcs	r3, r1
   1d2d0:	e3520002 	cmp	r2, #2
   1d2d4:	e5843008 	str	r3, [r4, #8]
   1d2d8:	83a03001 	movhi	r3, #1
   1d2dc:	8584300c 	strhi	r3, [r4, #12]
   1d2e0:	e3500000 	cmp	r0, #0
   1d2e4:	e3a03000 	mov	r3, #0
   1d2e8:	e5843018 	str	r3, [r4, #24]
   1d2ec:	08bd8010 	popeq	{r4, pc}
   1d2f0:	e8bd4010 	pop	{r4, lr}
   1d2f4:	ea001356 	b	22054 <LeaveCritical>
   1d2f8:	eb001327 	bl	21f9c <EnterCritical>
   1d2fc:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   1d300:	eaffffea 	b	1d2b0 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x14>

0001d304 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   1d304:	e590300c 	ldr	r3, [r0, #12]
   1d308:	e3530000 	cmp	r3, #0
   1d30c:	0a00000e 	beq	1d34c <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x48>
   1d310:	e3a02000 	mov	r2, #0
   1d314:	e1a030a1 	lsr	r3, r1, #1
   1d318:	e5801010 	str	r1, [r0, #16]
   1d31c:	e580200c 	str	r2, [r0, #12]
   1d320:	e5803014 	str	r3, [r0, #20]
   1d324:	e1b03103 	lsls	r3, r3, #2
   1d328:	03a03001 	moveq	r3, #1
   1d32c:	e0833001 	add	r3, r3, r1
   1d330:	e3530063 	cmp	r3, #99	; 0x63
   1d334:	9a000012 	bls	1d384 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x80>
   1d338:	e3021ee0 	movw	r1, #12000	; 0x2ee0
   1d33c:	e1530001 	cmp	r3, r1
   1d340:	21a03001 	movcs	r3, r1
   1d344:	e5803008 	str	r3, [r0, #8]
   1d348:	e12fff1e 	bx	lr
   1d34c:	e5903010 	ldr	r3, [r0, #16]
   1d350:	e5902014 	ldr	r2, [r0, #20]
   1d354:	e043c001 	sub	ip, r3, r1
   1d358:	e35c0000 	cmp	ip, #0
   1d35c:	e0633183 	rsb	r3, r3, r3, lsl #3
   1d360:	b26cc000 	rsblt	ip, ip, #0
   1d364:	e0822082 	add	r2, r2, r2, lsl #1
   1d368:	e0833001 	add	r3, r3, r1
   1d36c:	e082200c 	add	r2, r2, ip
   1d370:	e1a011a3 	lsr	r1, r3, #3
   1d374:	e1a03122 	lsr	r3, r2, #2
   1d378:	e5801010 	str	r1, [r0, #16]
   1d37c:	e5803014 	str	r3, [r0, #20]
   1d380:	eaffffe7 	b	1d324 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x20>
   1d384:	e3a03064 	mov	r3, #100	; 0x64
   1d388:	e5803008 	str	r3, [r0, #8]
   1d38c:	e12fff1e 	bx	lr

0001d390 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   1d390:	e92d4010 	push	{r4, lr}
   1d394:	e1a04000 	mov	r4, r0
   1d398:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1d39c:	e3500000 	cmp	r0, #0
   1d3a0:	1a000015 	bne	1d3fc <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x6c>
   1d3a4:	e5943018 	ldr	r3, [r4, #24]
   1d3a8:	e3530000 	cmp	r3, #0
   1d3ac:	0a00000a 	beq	1d3dc <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   1d3b0:	e5943020 	ldr	r3, [r4, #32]
   1d3b4:	e3530000 	cmp	r3, #0
   1d3b8:	1a000007 	bne	1d3dc <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   1d3bc:	e5940000 	ldr	r0, [r4]
   1d3c0:	e3500000 	cmp	r0, #0
   1d3c4:	0a00000e 	beq	1d404 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x74>
   1d3c8:	eb0013fd 	bl	223c4 <CTimer::GetTicks() const>
   1d3cc:	e594101c 	ldr	r1, [r4, #28]
   1d3d0:	e0401001 	sub	r1, r0, r1
   1d3d4:	e1a00004 	mov	r0, r4
   1d3d8:	ebffffc9 	bl	1d304 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   1d3dc:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1d3e0:	e3a03000 	mov	r3, #0
   1d3e4:	e5843018 	str	r3, [r4, #24]
   1d3e8:	e1520003 	cmp	r2, r3
   1d3ec:	e5843020 	str	r3, [r4, #32]
   1d3f0:	08bd8010 	popeq	{r4, pc}
   1d3f4:	e8bd4010 	pop	{r4, lr}
   1d3f8:	ea001315 	b	22054 <LeaveCritical>
   1d3fc:	eb0012e6 	bl	21f9c <EnterCritical>
   1d400:	eaffffe7 	b	1d3a4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   1d404:	e30e1eac 	movw	r1, #61100	; 0xeeac
   1d408:	e30a0988 	movw	r0, #43400	; 0xa988
   1d40c:	e3401002 	movt	r1, #2
   1d410:	e3400002 	movt	r0, #2
   1d414:	e3a02074 	mov	r2, #116	; 0x74
   1d418:	eb001ddf 	bl	24b9c <assertion_failed>
   1d41c:	e5940000 	ldr	r0, [r4]
   1d420:	eaffffe8 	b	1d3c8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x38>

0001d424 <CTCPRejector::~CTCPRejector()>:
   1d424:	e59f302c 	ldr	r3, [pc, #44]	; 1d458 <CTCPRejector::~CTCPRejector()+0x34>
   1d428:	e3a01001 	mov	r1, #1
   1d42c:	e92d4010 	push	{r4, lr}
   1d430:	e1a04000 	mov	r4, r0
   1d434:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d438:	e5843000 	str	r3, [r4]
   1d43c:	eb0012ce 	bl	21f7c <operator delete(void*, unsigned int)>
   1d440:	e3a03000 	mov	r3, #0
   1d444:	e1a00004 	mov	r0, r4
   1d448:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1d44c:	ebfff30d 	bl	1a088 <CNetConnection::~CNetConnection()>
   1d450:	e1a00004 	mov	r0, r4
   1d454:	e8bd8010 	pop	{r4, pc}
   1d458:	0002eecc 	.word	0x0002eecc

0001d45c <CTCPRejector::~CTCPRejector()>:
   1d45c:	e92d4010 	push	{r4, lr}
   1d460:	e1a04000 	mov	r4, r0
   1d464:	ebffffee 	bl	1d424 <CTCPRejector::~CTCPRejector()>
   1d468:	e1a00004 	mov	r0, r4
   1d46c:	e3a01030 	mov	r1, #48	; 0x30
   1d470:	eb0012c1 	bl	21f7c <operator delete(void*, unsigned int)>
   1d474:	e1a00004 	mov	r0, r4
   1d478:	e8bd8010 	pop	{r4, pc}

0001d47c <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   1d47c:	e92d4010 	push	{r4, lr}
   1d480:	e24dd008 	sub	sp, sp, #8
   1d484:	e3a0c006 	mov	ip, #6
   1d488:	e3a03000 	mov	r3, #0
   1d48c:	e58dc000 	str	ip, [sp]
   1d490:	e1a04000 	mov	r4, r0
   1d494:	ebfff2d0 	bl	19fdc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1d498:	e59f3018 	ldr	r3, [pc, #24]	; 1d4b8 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x3c>
   1d49c:	e3a00d19 	mov	r0, #1600	; 0x640
   1d4a0:	e5843000 	str	r3, [r4]
   1d4a4:	eb0012b1 	bl	21f70 <operator new[](unsigned int)>
   1d4a8:	e584002c 	str	r0, [r4, #44]	; 0x2c
   1d4ac:	e1a00004 	mov	r0, r4
   1d4b0:	e28dd008 	add	sp, sp, #8
   1d4b4:	e8bd8010 	pop	{r4, pc}
   1d4b8:	0002eecc 	.word	0x0002eecc

0001d4bc <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   1d4bc:	e3110c02 	tst	r1, #512	; 0x200
   1d4c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d4c4:	e1a06001 	mov	r6, r1
   1d4c8:	e24dd008 	sub	sp, sp, #8
   1d4cc:	e1a05000 	mov	r5, r0
   1d4d0:	e1a07002 	mov	r7, r2
   1d4d4:	e1a08003 	mov	r8, r3
   1d4d8:	1a000028 	bne	1d580 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc4>
   1d4dc:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
   1d4e0:	e3540000 	cmp	r4, #0
   1d4e4:	0a000034 	beq	1d5bc <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0x100>
   1d4e8:	e1d511b6 	ldrh	r1, [r5, #22]
   1d4ec:	e2163a01 	ands	r3, r6, #4096	; 0x1000
   1d4f0:	e1d521b4 	ldrh	r2, [r5, #20]
   1d4f4:	16bf8f38 	revne	r8, r8
   1d4f8:	01a08003 	moveq	r8, r3
   1d4fc:	e6bf1fb1 	rev16	r1, r1
   1d500:	e3a03000 	mov	r3, #0
   1d504:	e1c410b0 	strh	r1, [r4]
   1d508:	e6bf2fb2 	rev16	r2, r2
   1d50c:	e5c4300e 	strb	r3, [r4, #14]
   1d510:	e1c420b2 	strh	r2, [r4, #2]
   1d514:	e6bf7f37 	rev	r7, r7
   1d518:	e5c4300f 	strb	r3, [r4, #15]
   1d51c:	e3866050 	orr	r6, r6, #80	; 0x50
   1d520:	e5c43012 	strb	r3, [r4, #18]
   1d524:	e3a02014 	mov	r2, #20
   1d528:	e5c43013 	strb	r3, [r4, #19]
   1d52c:	e1a01004 	mov	r1, r4
   1d530:	e5c43010 	strb	r3, [r4, #16]
   1d534:	e285001c 	add	r0, r5, #28
   1d538:	e5c43011 	strb	r3, [r4, #17]
   1d53c:	e5847004 	str	r7, [r4, #4]
   1d540:	e5848008 	str	r8, [r4, #8]
   1d544:	e1c460bc 	strh	r6, [r4, #12]
   1d548:	eb0003b0 	bl	1e410 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d54c:	e5953008 	ldr	r3, [r5, #8]
   1d550:	e3530000 	cmp	r3, #0
   1d554:	e1c401b0 	strh	r0, [r4, #16]
   1d558:	0a00000f 	beq	1d59c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xe0>
   1d55c:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   1d560:	e3a0c006 	mov	ip, #6
   1d564:	e1a00003 	mov	r0, r3
   1d568:	e285100c 	add	r1, r5, #12
   1d56c:	e3a03014 	mov	r3, #20
   1d570:	e58dc000 	str	ip, [sp]
   1d574:	ebffea4e 	bl	17eb4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d578:	e28dd008 	add	sp, sp, #8
   1d57c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d580:	e30e1f04 	movw	r1, #61188	; 0xef04
   1d584:	e30e0f14 	movw	r0, #61204	; 0xef14
   1d588:	e3401002 	movt	r1, #2
   1d58c:	e3400002 	movt	r0, #2
   1d590:	e3a020a5 	mov	r2, #165	; 0xa5
   1d594:	eb001d80 	bl	24b9c <assertion_failed>
   1d598:	eaffffcf 	b	1d4dc <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0x20>
   1d59c:	e30e1f04 	movw	r1, #61188	; 0xef04
   1d5a0:	e30e0698 	movw	r0, #59032	; 0xe698
   1d5a4:	e3401002 	movt	r1, #2
   1d5a8:	e3400002 	movt	r0, #2
   1d5ac:	e3a020cb 	mov	r2, #203	; 0xcb
   1d5b0:	eb001d79 	bl	24b9c <assertion_failed>
   1d5b4:	e5953008 	ldr	r3, [r5, #8]
   1d5b8:	eaffffe7 	b	1d55c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xa0>
   1d5bc:	e30e1f04 	movw	r1, #61188	; 0xef04
   1d5c0:	e30c05d8 	movw	r0, #50648	; 0xc5d8
   1d5c4:	e3401002 	movt	r1, #2
   1d5c8:	e3400002 	movt	r0, #2
   1d5cc:	e3a020ae 	mov	r2, #174	; 0xae
   1d5d0:	eb001d71 	bl	24b9c <assertion_failed>
   1d5d4:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
   1d5d8:	eaffffc2 	b	1d4e8 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0x2c>

0001d5dc <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1d5dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d5e0:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1d5e4:	e35c0006 	cmp	ip, #6
   1d5e8:	0a000001 	beq	1d5f4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1d5ec:	e3a00000 	mov	r0, #0
   1d5f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d5f4:	e3520013 	cmp	r2, #19
   1d5f8:	9a000040 	bls	1d700 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x124>
   1d5fc:	e3510000 	cmp	r1, #0
   1d600:	e1a06003 	mov	r6, r3
   1d604:	e1a07002 	mov	r7, r2
   1d608:	e1a05001 	mov	r5, r1
   1d60c:	e1a04000 	mov	r4, r0
   1d610:	0a00003c 	beq	1d708 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x12c>
   1d614:	e1d500b2 	ldrh	r0, [r5, #2]
   1d618:	e6bf0fb0 	rev16	r0, r0
   1d61c:	e1c401b6 	strh	r0, [r4, #22]
   1d620:	e6ff0070 	uxth	r0, r0
   1d624:	e3500000 	cmp	r0, #0
   1d628:	0a000034 	beq	1d700 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x124>
   1d62c:	e5940004 	ldr	r0, [r4, #4]
   1d630:	e3500000 	cmp	r0, #0
   1d634:	0a00003a 	beq	1d724 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x148>
   1d638:	eb00006e 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   1d63c:	eb0001c6 	bl	1dd5c <CIPAddress::IsNull() const>
   1d640:	e3500000 	cmp	r0, #0
   1d644:	1affffe8 	bne	1d5ec <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1d648:	e5940004 	ldr	r0, [r4, #4]
   1d64c:	e284801c 	add	r8, r4, #28
   1d650:	eb000068 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   1d654:	e1a01000 	mov	r1, r0
   1d658:	e1a00008 	mov	r0, r8
   1d65c:	eb000332 	bl	1e32c <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d660:	e1a01006 	mov	r1, r6
   1d664:	e1a00008 	mov	r0, r8
   1d668:	eb000333 	bl	1e33c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d66c:	e1a02007 	mov	r2, r7
   1d670:	e1a01005 	mov	r1, r5
   1d674:	e1a00008 	mov	r0, r8
   1d678:	eb000364 	bl	1e410 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d67c:	e3500000 	cmp	r0, #0
   1d680:	1affffd9 	bne	1d5ec <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1d684:	e1d580bc 	ldrh	r8, [r5, #12]
   1d688:	e1a01006 	mov	r1, r6
   1d68c:	e284000c 	add	r0, r4, #12
   1d690:	e5959004 	ldr	r9, [r5, #4]
   1d694:	e7e32258 	ubfx	r2, r8, #4, #4
   1d698:	e3180c02 	tst	r8, #512	; 0x200
   1d69c:	e595a008 	ldr	sl, [r5, #8]
   1d6a0:	e6bf9f39 	rev	r9, r9
   1d6a4:	e0477102 	sub	r7, r7, r2, lsl #2
   1d6a8:	12877001 	addne	r7, r7, #1
   1d6ac:	e3180c01 	tst	r8, #256	; 0x100
   1d6b0:	12877001 	addne	r7, r7, #1
   1d6b4:	eb00015e 	bl	1dc34 <CIPAddress::Set(CIPAddress const&)>
   1d6b8:	e1d520b0 	ldrh	r2, [r5]
   1d6bc:	e2183b01 	ands	r3, r8, #1024	; 0x400
   1d6c0:	e6bfaf3a 	rev	sl, sl
   1d6c4:	e6bf2fb2 	rev16	r2, r2
   1d6c8:	e1c421b4 	strh	r2, [r4, #20]
   1d6cc:	1a000009 	bne	1d6f8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x11c>
   1d6d0:	e2182a01 	ands	r2, r8, #4096	; 0x1000
   1d6d4:	00893007 	addeq	r3, r9, r7
   1d6d8:	01a00004 	moveq	r0, r4
   1d6dc:	03a01b05 	moveq	r1, #5120	; 0x1400
   1d6e0:	11a0200a 	movne	r2, sl
   1d6e4:	11a00004 	movne	r0, r4
   1d6e8:	13a01b01 	movne	r1, #1024	; 0x400
   1d6ec:	ebffff72 	bl	1d4bc <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   1d6f0:	e3a00001 	mov	r0, #1
   1d6f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d6f8:	e3a00001 	mov	r0, #1
   1d6fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d700:	e3e00000 	mvn	r0, #0
   1d704:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d708:	e30e1f04 	movw	r1, #61188	; 0xef04
   1d70c:	e30e0780 	movw	r0, #59264	; 0xe780
   1d710:	e3401002 	movt	r1, #2
   1d714:	e3400002 	movt	r0, #2
   1d718:	e3a02056 	mov	r2, #86	; 0x56
   1d71c:	eb001d1e 	bl	24b9c <assertion_failed>
   1d720:	eaffffbb 	b	1d614 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x38>
   1d724:	e30e1f04 	movw	r1, #61188	; 0xef04
   1d728:	e30e0608 	movw	r0, #58888	; 0xe608
   1d72c:	e3401002 	movt	r1, #2
   1d730:	e3400002 	movt	r0, #2
   1d734:	e3a0205f 	mov	r2, #95	; 0x5f
   1d738:	eb001d17 	bl	24b9c <assertion_failed>
   1d73c:	e5940004 	ldr	r0, [r4, #4]
   1d740:	eaffffbc 	b	1d638 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5c>

0001d744 <CTCPRejector::Connect()>:
   1d744:	e3e00000 	mvn	r0, #0
   1d748:	e12fff1e 	bx	lr

0001d74c <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   1d74c:	e3e00000 	mvn	r0, #0
   1d750:	e12fff1e 	bx	lr

0001d754 <CTCPRejector::Close()>:
   1d754:	e3e00000 	mvn	r0, #0
   1d758:	e12fff1e 	bx	lr

0001d75c <CTCPRejector::Send(void const*, unsigned int, int)>:
   1d75c:	e3e00000 	mvn	r0, #0
   1d760:	e12fff1e 	bx	lr

0001d764 <CTCPRejector::Receive(void*, int)>:
   1d764:	e3e00000 	mvn	r0, #0
   1d768:	e12fff1e 	bx	lr

0001d76c <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1d76c:	e3e00000 	mvn	r0, #0
   1d770:	e12fff1e 	bx	lr

0001d774 <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1d774:	e3e00000 	mvn	r0, #0
   1d778:	e12fff1e 	bx	lr

0001d77c <CTCPRejector::SetOptionBroadcast(int)>:
   1d77c:	e3e00000 	mvn	r0, #0
   1d780:	e12fff1e 	bx	lr

0001d784 <CTCPRejector::IsTerminated() const>:
   1d784:	e3a00000 	mov	r0, #0
   1d788:	e12fff1e 	bx	lr

0001d78c <CTCPRejector::Process()>:
   1d78c:	e12fff1e 	bx	lr

0001d790 <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1d790:	e3a00000 	mov	r0, #0
   1d794:	e12fff1e 	bx	lr

0001d798 <CNetConfig::~CNetConfig()>:
   1d798:	e92d4010 	push	{r4, lr}
   1d79c:	e1a04000 	mov	r4, r0
   1d7a0:	e2800024 	add	r0, r0, #36	; 0x24
   1d7a4:	eb000088 	bl	1d9cc <CIPAddress::~CIPAddress()>
   1d7a8:	e284001c 	add	r0, r4, #28
   1d7ac:	eb000086 	bl	1d9cc <CIPAddress::~CIPAddress()>
   1d7b0:	e2840014 	add	r0, r4, #20
   1d7b4:	eb000084 	bl	1d9cc <CIPAddress::~CIPAddress()>
   1d7b8:	e284000c 	add	r0, r4, #12
   1d7bc:	eb000082 	bl	1d9cc <CIPAddress::~CIPAddress()>
   1d7c0:	e2840004 	add	r0, r4, #4
   1d7c4:	eb000080 	bl	1d9cc <CIPAddress::~CIPAddress()>
   1d7c8:	e1a00004 	mov	r0, r4
   1d7cc:	e8bd8010 	pop	{r4, pc}

0001d7d0 <CNetConfig::SetDHCP(int)>:
   1d7d0:	e5801000 	str	r1, [r0]
   1d7d4:	e12fff1e 	bx	lr

0001d7d8 <CNetConfig::SetDefaultGateway(unsigned int)>:
   1d7d8:	e2800014 	add	r0, r0, #20
   1d7dc:	ea0000f9 	b	1dbc8 <CIPAddress::Set(unsigned int)>

0001d7e0 <CNetConfig::SetDNSServer(unsigned int)>:
   1d7e0:	e280001c 	add	r0, r0, #28
   1d7e4:	ea0000f7 	b	1dbc8 <CIPAddress::Set(unsigned int)>

0001d7e8 <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   1d7e8:	e2800014 	add	r0, r0, #20
   1d7ec:	ea0000f9 	b	1dbd8 <CIPAddress::Set(unsigned char const*)>

0001d7f0 <CNetConfig::SetDNSServer(unsigned char const*)>:
   1d7f0:	e280001c 	add	r0, r0, #28
   1d7f4:	ea0000f7 	b	1dbd8 <CIPAddress::Set(unsigned char const*)>

0001d7f8 <CNetConfig::GetIPAddress() const>:
   1d7f8:	e2800004 	add	r0, r0, #4
   1d7fc:	e12fff1e 	bx	lr

0001d800 <CNetConfig::IsDHCPUsed() const>:
   1d800:	e5900000 	ldr	r0, [r0]
   1d804:	e12fff1e 	bx	lr

0001d808 <CNetConfig::GetNetMask() const>:
   1d808:	e280000c 	add	r0, r0, #12
   1d80c:	ea000129 	b	1dcb8 <CIPAddress::Get() const>

0001d810 <CNetConfig::GetDefaultGateway() const>:
   1d810:	e2800014 	add	r0, r0, #20
   1d814:	e12fff1e 	bx	lr

0001d818 <CNetConfig::GetDNSServer() const>:
   1d818:	e280001c 	add	r0, r0, #28
   1d81c:	e12fff1e 	bx	lr

0001d820 <CNetConfig::GetBroadcastAddress() const>:
   1d820:	e2800024 	add	r0, r0, #36	; 0x24
   1d824:	e12fff1e 	bx	lr

0001d828 <CNetConfig::UpdateBroadcastAddress()>:
   1d828:	e92d4010 	push	{r4, lr}
   1d82c:	e24dd008 	sub	sp, sp, #8
   1d830:	e1a04000 	mov	r4, r0
   1d834:	e2800004 	add	r0, r0, #4
   1d838:	e1a0100d 	mov	r1, sp
   1d83c:	eb00012a 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   1d840:	e284000c 	add	r0, r4, #12
   1d844:	e28d1004 	add	r1, sp, #4
   1d848:	eb000127 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   1d84c:	e89d000a 	ldm	sp, {r1, r3}
   1d850:	e2840024 	add	r0, r4, #36	; 0x24
   1d854:	e1e03003 	mvn	r3, r3
   1d858:	e1831001 	orr	r1, r3, r1
   1d85c:	eb0000d9 	bl	1dbc8 <CIPAddress::Set(unsigned int)>
   1d860:	e28dd008 	add	sp, sp, #8
   1d864:	e8bd8010 	pop	{r4, pc}

0001d868 <CNetConfig::Reset()>:
   1d868:	e92d4070 	push	{r4, r5, r6, lr}
   1d86c:	e30e4f30 	movw	r4, #61232	; 0xef30
   1d870:	e3404002 	movt	r4, #2
   1d874:	e1a05000 	mov	r5, r0
   1d878:	e2800004 	add	r0, r0, #4
   1d87c:	e1a01004 	mov	r1, r4
   1d880:	eb0000d4 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   1d884:	e1a01004 	mov	r1, r4
   1d888:	e285000c 	add	r0, r5, #12
   1d88c:	eb0000d1 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   1d890:	e1a01004 	mov	r1, r4
   1d894:	e2850014 	add	r0, r5, #20
   1d898:	eb0000ce 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   1d89c:	e285001c 	add	r0, r5, #28
   1d8a0:	e1a01004 	mov	r1, r4
   1d8a4:	eb0000cb 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   1d8a8:	e1a00005 	mov	r0, r5
   1d8ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d8b0:	eaffffdc 	b	1d828 <CNetConfig::UpdateBroadcastAddress()>

0001d8b4 <CNetConfig::CNetConfig()>:
   1d8b4:	e92d4010 	push	{r4, lr}
   1d8b8:	e3a03001 	mov	r3, #1
   1d8bc:	e1a04000 	mov	r4, r0
   1d8c0:	e4803004 	str	r3, [r0], #4
   1d8c4:	eb000027 	bl	1d968 <CIPAddress::CIPAddress()>
   1d8c8:	e284000c 	add	r0, r4, #12
   1d8cc:	eb000025 	bl	1d968 <CIPAddress::CIPAddress()>
   1d8d0:	e2840014 	add	r0, r4, #20
   1d8d4:	eb000023 	bl	1d968 <CIPAddress::CIPAddress()>
   1d8d8:	e284001c 	add	r0, r4, #28
   1d8dc:	eb000021 	bl	1d968 <CIPAddress::CIPAddress()>
   1d8e0:	e2840024 	add	r0, r4, #36	; 0x24
   1d8e4:	eb00001f 	bl	1d968 <CIPAddress::CIPAddress()>
   1d8e8:	e1a00004 	mov	r0, r4
   1d8ec:	ebffffdd 	bl	1d868 <CNetConfig::Reset()>
   1d8f0:	e1a00004 	mov	r0, r4
   1d8f4:	e8bd8010 	pop	{r4, pc}

0001d8f8 <CNetConfig::SetIPAddress(unsigned int)>:
   1d8f8:	e92d4010 	push	{r4, lr}
   1d8fc:	e1a04000 	mov	r4, r0
   1d900:	e2800004 	add	r0, r0, #4
   1d904:	eb0000af 	bl	1dbc8 <CIPAddress::Set(unsigned int)>
   1d908:	e1a00004 	mov	r0, r4
   1d90c:	e8bd4010 	pop	{r4, lr}
   1d910:	eaffffc4 	b	1d828 <CNetConfig::UpdateBroadcastAddress()>

0001d914 <CNetConfig::SetNetMask(unsigned int)>:
   1d914:	e92d4010 	push	{r4, lr}
   1d918:	e1a04000 	mov	r4, r0
   1d91c:	e280000c 	add	r0, r0, #12
   1d920:	eb0000a8 	bl	1dbc8 <CIPAddress::Set(unsigned int)>
   1d924:	e1a00004 	mov	r0, r4
   1d928:	e8bd4010 	pop	{r4, lr}
   1d92c:	eaffffbd 	b	1d828 <CNetConfig::UpdateBroadcastAddress()>

0001d930 <CNetConfig::SetIPAddress(unsigned char const*)>:
   1d930:	e92d4010 	push	{r4, lr}
   1d934:	e1a04000 	mov	r4, r0
   1d938:	e2800004 	add	r0, r0, #4
   1d93c:	eb0000a5 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   1d940:	e1a00004 	mov	r0, r4
   1d944:	e8bd4010 	pop	{r4, lr}
   1d948:	eaffffb6 	b	1d828 <CNetConfig::UpdateBroadcastAddress()>

0001d94c <CNetConfig::SetNetMask(unsigned char const*)>:
   1d94c:	e92d4010 	push	{r4, lr}
   1d950:	e1a04000 	mov	r4, r0
   1d954:	e280000c 	add	r0, r0, #12
   1d958:	eb00009e 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   1d95c:	e1a00004 	mov	r0, r4
   1d960:	e8bd4010 	pop	{r4, lr}
   1d964:	eaffffaf 	b	1d828 <CNetConfig::UpdateBroadcastAddress()>

0001d968 <CIPAddress::CIPAddress()>:
   1d968:	e3a02000 	mov	r2, #0
   1d96c:	e5802000 	str	r2, [r0]
   1d970:	e12fff1e 	bx	lr

0001d974 <CIPAddress::CIPAddress(unsigned int)>:
   1d974:	e3a02001 	mov	r2, #1
   1d978:	e5801004 	str	r1, [r0, #4]
   1d97c:	e5802000 	str	r2, [r0]
   1d980:	e12fff1e 	bx	lr

0001d984 <CIPAddress::CIPAddress(CIPAddress const&)>:
   1d984:	e5913000 	ldr	r3, [r1]
   1d988:	e92d4070 	push	{r4, r5, r6, lr}
   1d98c:	e1a05001 	mov	r5, r1
   1d990:	e3530000 	cmp	r3, #0
   1d994:	e1a04000 	mov	r4, r0
   1d998:	1a000005 	bne	1d9b4 <CIPAddress::CIPAddress(CIPAddress const&)+0x30>
   1d99c:	e30e1f34 	movw	r1, #61236	; 0xef34
   1d9a0:	e3401002 	movt	r1, #2
   1d9a4:	e30e0f44 	movw	r0, #61252	; 0xef44
   1d9a8:	e3400002 	movt	r0, #2
   1d9ac:	e3a0202e 	mov	r2, #46	; 0x2e
   1d9b0:	eb001c79 	bl	24b9c <assertion_failed>
   1d9b4:	e5953004 	ldr	r3, [r5, #4]
   1d9b8:	e3a02001 	mov	r2, #1
   1d9bc:	e5842000 	str	r2, [r4]
   1d9c0:	e1a00004 	mov	r0, r4
   1d9c4:	e5843004 	str	r3, [r4, #4]
   1d9c8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d9cc <CIPAddress::~CIPAddress()>:
   1d9cc:	e12fff1e 	bx	lr

0001d9d0 <CIPAddress::operator==(CIPAddress const&) const>:
   1d9d0:	e5903000 	ldr	r3, [r0]
   1d9d4:	e92d4070 	push	{r4, r5, r6, lr}
   1d9d8:	e1a05000 	mov	r5, r0
   1d9dc:	e3530000 	cmp	r3, #0
   1d9e0:	e1a04001 	mov	r4, r1
   1d9e4:	0a00000e 	beq	1da24 <CIPAddress::operator==(CIPAddress const&) const+0x54>
   1d9e8:	e5943000 	ldr	r3, [r4]
   1d9ec:	e3530000 	cmp	r3, #0
   1d9f0:	1a000005 	bne	1da0c <CIPAddress::operator==(CIPAddress const&) const+0x3c>
   1d9f4:	e30e1f34 	movw	r1, #61236	; 0xef34
   1d9f8:	e3401002 	movt	r1, #2
   1d9fc:	e30e0f58 	movw	r0, #61272	; 0xef58
   1da00:	e3400002 	movt	r0, #2
   1da04:	e3a0203f 	mov	r2, #63	; 0x3f
   1da08:	eb001c63 	bl	24b9c <assertion_failed>
   1da0c:	e5950004 	ldr	r0, [r5, #4]
   1da10:	e5943004 	ldr	r3, [r4, #4]
   1da14:	e0400003 	sub	r0, r0, r3
   1da18:	e16f0f10 	clz	r0, r0
   1da1c:	e1a002a0 	lsr	r0, r0, #5
   1da20:	e8bd8070 	pop	{r4, r5, r6, pc}
   1da24:	e30e1f34 	movw	r1, #61236	; 0xef34
   1da28:	e3401002 	movt	r1, #2
   1da2c:	e30a0e98 	movw	r0, #44696	; 0xae98
   1da30:	e3400002 	movt	r0, #2
   1da34:	e3a0203e 	mov	r2, #62	; 0x3e
   1da38:	eb001c57 	bl	24b9c <assertion_failed>
   1da3c:	eaffffe9 	b	1d9e8 <CIPAddress::operator==(CIPAddress const&) const+0x18>

0001da40 <CIPAddress::operator!=(CIPAddress const&) const>:
   1da40:	e5903000 	ldr	r3, [r0]
   1da44:	e92d4070 	push	{r4, r5, r6, lr}
   1da48:	e1a05000 	mov	r5, r0
   1da4c:	e3530000 	cmp	r3, #0
   1da50:	e1a04001 	mov	r4, r1
   1da54:	0a00000d 	beq	1da90 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   1da58:	e5943000 	ldr	r3, [r4]
   1da5c:	e3530000 	cmp	r3, #0
   1da60:	1a000005 	bne	1da7c <CIPAddress::operator!=(CIPAddress const&) const+0x3c>
   1da64:	e30e1f34 	movw	r1, #61236	; 0xef34
   1da68:	e3401002 	movt	r1, #2
   1da6c:	e30e0f58 	movw	r0, #61272	; 0xef58
   1da70:	e3400002 	movt	r0, #2
   1da74:	e3a02046 	mov	r2, #70	; 0x46
   1da78:	eb001c47 	bl	24b9c <assertion_failed>
   1da7c:	e5950004 	ldr	r0, [r5, #4]
   1da80:	e5943004 	ldr	r3, [r4, #4]
   1da84:	e0500003 	subs	r0, r0, r3
   1da88:	13a00001 	movne	r0, #1
   1da8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1da90:	e30e1f34 	movw	r1, #61236	; 0xef34
   1da94:	e3401002 	movt	r1, #2
   1da98:	e30a0e98 	movw	r0, #44696	; 0xae98
   1da9c:	e3400002 	movt	r0, #2
   1daa0:	e3a02045 	mov	r2, #69	; 0x45
   1daa4:	eb001c3c 	bl	24b9c <assertion_failed>
   1daa8:	eaffffea 	b	1da58 <CIPAddress::operator!=(CIPAddress const&) const+0x18>

0001daac <CIPAddress::operator==(unsigned char const*) const>:
   1daac:	e5903000 	ldr	r3, [r0]
   1dab0:	e92d4070 	push	{r4, r5, r6, lr}
   1dab4:	e1a04000 	mov	r4, r0
   1dab8:	e3530000 	cmp	r3, #0
   1dabc:	e1a05001 	mov	r5, r1
   1dac0:	0a000008 	beq	1dae8 <CIPAddress::operator==(unsigned char const*) const+0x3c>
   1dac4:	e3550000 	cmp	r5, #0
   1dac8:	0a00000d 	beq	1db04 <CIPAddress::operator==(unsigned char const*) const+0x58>
   1dacc:	e1a01005 	mov	r1, r5
   1dad0:	e2840004 	add	r0, r4, #4
   1dad4:	e3a02004 	mov	r2, #4
   1dad8:	eb0014a0 	bl	22d60 <memcmp>
   1dadc:	e16f0f10 	clz	r0, r0
   1dae0:	e1a002a0 	lsr	r0, r0, #5
   1dae4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dae8:	e30e1f34 	movw	r1, #61236	; 0xef34
   1daec:	e3401002 	movt	r1, #2
   1daf0:	e30a0e98 	movw	r0, #44696	; 0xae98
   1daf4:	e3400002 	movt	r0, #2
   1daf8:	e3a0204c 	mov	r2, #76	; 0x4c
   1dafc:	eb001c26 	bl	24b9c <assertion_failed>
   1db00:	eaffffef 	b	1dac4 <CIPAddress::operator==(unsigned char const*) const+0x18>
   1db04:	e30e1f34 	movw	r1, #61236	; 0xef34
   1db08:	e3401002 	movt	r1, #2
   1db0c:	e30e0f6c 	movw	r0, #61292	; 0xef6c
   1db10:	e3400002 	movt	r0, #2
   1db14:	e3a0204d 	mov	r2, #77	; 0x4d
   1db18:	eb001c1f 	bl	24b9c <assertion_failed>
   1db1c:	eaffffea 	b	1dacc <CIPAddress::operator==(unsigned char const*) const+0x20>

0001db20 <CIPAddress::operator!=(unsigned char const*) const>:
   1db20:	e92d4010 	push	{r4, lr}
   1db24:	ebffffe0 	bl	1daac <CIPAddress::operator==(unsigned char const*) const>
   1db28:	e16f0f10 	clz	r0, r0
   1db2c:	e1a002a0 	lsr	r0, r0, #5
   1db30:	e8bd8010 	pop	{r4, pc}

0001db34 <CIPAddress::operator==(unsigned int) const>:
   1db34:	e5903000 	ldr	r3, [r0]
   1db38:	e92d4070 	push	{r4, r5, r6, lr}
   1db3c:	e1a04000 	mov	r4, r0
   1db40:	e3530000 	cmp	r3, #0
   1db44:	e1a05001 	mov	r5, r1
   1db48:	1a000005 	bne	1db64 <CIPAddress::operator==(unsigned int) const+0x30>
   1db4c:	e30e1f34 	movw	r1, #61236	; 0xef34
   1db50:	e3401002 	movt	r1, #2
   1db54:	e30a0e98 	movw	r0, #44696	; 0xae98
   1db58:	e3400002 	movt	r0, #2
   1db5c:	e3a02058 	mov	r2, #88	; 0x58
   1db60:	eb001c0d 	bl	24b9c <assertion_failed>
   1db64:	e5940004 	ldr	r0, [r4, #4]
   1db68:	e0400005 	sub	r0, r0, r5
   1db6c:	e16f0f10 	clz	r0, r0
   1db70:	e1a002a0 	lsr	r0, r0, #5
   1db74:	e8bd8070 	pop	{r4, r5, r6, pc}

0001db78 <CIPAddress::operator!=(unsigned int) const>:
   1db78:	e5903000 	ldr	r3, [r0]
   1db7c:	e92d4070 	push	{r4, r5, r6, lr}
   1db80:	e1a04000 	mov	r4, r0
   1db84:	e3530000 	cmp	r3, #0
   1db88:	e1a05001 	mov	r5, r1
   1db8c:	1a000005 	bne	1dba8 <CIPAddress::operator!=(unsigned int) const+0x30>
   1db90:	e30e1f34 	movw	r1, #61236	; 0xef34
   1db94:	e3401002 	movt	r1, #2
   1db98:	e30a0e98 	movw	r0, #44696	; 0xae98
   1db9c:	e3400002 	movt	r0, #2
   1dba0:	e3a0205e 	mov	r2, #94	; 0x5e
   1dba4:	eb001bfc 	bl	24b9c <assertion_failed>
   1dba8:	e5940004 	ldr	r0, [r4, #4]
   1dbac:	e0500005 	subs	r0, r0, r5
   1dbb0:	13a00001 	movne	r0, #1
   1dbb4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dbb8 <CIPAddress::operator=(unsigned int)>:
   1dbb8:	e3a02001 	mov	r2, #1
   1dbbc:	e5801004 	str	r1, [r0, #4]
   1dbc0:	e5802000 	str	r2, [r0]
   1dbc4:	e12fff1e 	bx	lr

0001dbc8 <CIPAddress::Set(unsigned int)>:
   1dbc8:	e3a03001 	mov	r3, #1
   1dbcc:	e5801004 	str	r1, [r0, #4]
   1dbd0:	e5803000 	str	r3, [r0]
   1dbd4:	e12fff1e 	bx	lr

0001dbd8 <CIPAddress::Set(unsigned char const*)>:
   1dbd8:	e92d4070 	push	{r4, r5, r6, lr}
   1dbdc:	e2515000 	subs	r5, r1, #0
   1dbe0:	e1a04000 	mov	r4, r0
   1dbe4:	0a000006 	beq	1dc04 <CIPAddress::Set(unsigned char const*)+0x2c>
   1dbe8:	e3a02004 	mov	r2, #4
   1dbec:	e1a01005 	mov	r1, r5
   1dbf0:	e0840002 	add	r0, r4, r2
   1dbf4:	eb001568 	bl	2319c <memcpy>
   1dbf8:	e3a03001 	mov	r3, #1
   1dbfc:	e5843000 	str	r3, [r4]
   1dc00:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dc04:	e30e1f34 	movw	r1, #61236	; 0xef34
   1dc08:	e3401002 	movt	r1, #2
   1dc0c:	e30c06fc 	movw	r0, #50940	; 0xc6fc
   1dc10:	e3400002 	movt	r0, #2
   1dc14:	e3a02075 	mov	r2, #117	; 0x75
   1dc18:	eb001bdf 	bl	24b9c <assertion_failed>
   1dc1c:	eafffff1 	b	1dbe8 <CIPAddress::Set(unsigned char const*)+0x10>

0001dc20 <CIPAddress::CIPAddress(unsigned char const*)>:
   1dc20:	e92d4010 	push	{r4, lr}
   1dc24:	e1a04000 	mov	r4, r0
   1dc28:	ebffffea 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   1dc2c:	e1a00004 	mov	r0, r4
   1dc30:	e8bd8010 	pop	{r4, pc}

0001dc34 <CIPAddress::Set(CIPAddress const&)>:
   1dc34:	e5913000 	ldr	r3, [r1]
   1dc38:	e92d4070 	push	{r4, r5, r6, lr}
   1dc3c:	e1a05001 	mov	r5, r1
   1dc40:	e3530000 	cmp	r3, #0
   1dc44:	e1a04000 	mov	r4, r0
   1dc48:	1a000005 	bne	1dc64 <CIPAddress::Set(CIPAddress const&)+0x30>
   1dc4c:	e30e1f34 	movw	r1, #61236	; 0xef34
   1dc50:	e3401002 	movt	r1, #2
   1dc54:	e30e0f44 	movw	r0, #61252	; 0xef44
   1dc58:	e3400002 	movt	r0, #2
   1dc5c:	e3a0207e 	mov	r2, #126	; 0x7e
   1dc60:	eb001bcd 	bl	24b9c <assertion_failed>
   1dc64:	e5953004 	ldr	r3, [r5, #4]
   1dc68:	e3a02001 	mov	r2, #1
   1dc6c:	e884000c 	stm	r4, {r2, r3}
   1dc70:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dc74 <CIPAddress::SetBroadcast()>:
   1dc74:	e3e03000 	mvn	r3, #0
   1dc78:	e3a02001 	mov	r2, #1
   1dc7c:	e880000c 	stm	r0, {r2, r3}
   1dc80:	e12fff1e 	bx	lr

0001dc84 <CIPAddress::operator unsigned int() const>:
   1dc84:	e5903000 	ldr	r3, [r0]
   1dc88:	e92d4010 	push	{r4, lr}
   1dc8c:	e1a04000 	mov	r4, r0
   1dc90:	e3530000 	cmp	r3, #0
   1dc94:	1a000005 	bne	1dcb0 <CIPAddress::operator unsigned int() const+0x2c>
   1dc98:	e30e1f34 	movw	r1, #61236	; 0xef34
   1dc9c:	e3401002 	movt	r1, #2
   1dca0:	e30a0e98 	movw	r0, #44696	; 0xae98
   1dca4:	e3400002 	movt	r0, #2
   1dca8:	e3a0208f 	mov	r2, #143	; 0x8f
   1dcac:	eb001bba 	bl	24b9c <assertion_failed>
   1dcb0:	e5940004 	ldr	r0, [r4, #4]
   1dcb4:	e8bd8010 	pop	{r4, pc}

0001dcb8 <CIPAddress::Get() const>:
   1dcb8:	e5903000 	ldr	r3, [r0]
   1dcbc:	e92d4010 	push	{r4, lr}
   1dcc0:	e1a04000 	mov	r4, r0
   1dcc4:	e3530000 	cmp	r3, #0
   1dcc8:	1a000005 	bne	1dce4 <CIPAddress::Get() const+0x2c>
   1dccc:	e30e1f34 	movw	r1, #61236	; 0xef34
   1dcd0:	e3401002 	movt	r1, #2
   1dcd4:	e30a0e98 	movw	r0, #44696	; 0xae98
   1dcd8:	e3400002 	movt	r0, #2
   1dcdc:	e3a02095 	mov	r2, #149	; 0x95
   1dce0:	eb001bad 	bl	24b9c <assertion_failed>
   1dce4:	e2840004 	add	r0, r4, #4
   1dce8:	e8bd8010 	pop	{r4, pc}

0001dcec <CIPAddress::CopyTo(unsigned char*) const>:
   1dcec:	e5903000 	ldr	r3, [r0]
   1dcf0:	e92d4070 	push	{r4, r5, r6, lr}
   1dcf4:	e1a05000 	mov	r5, r0
   1dcf8:	e3530000 	cmp	r3, #0
   1dcfc:	e1a04001 	mov	r4, r1
   1dd00:	0a000006 	beq	1dd20 <CIPAddress::CopyTo(unsigned char*) const+0x34>
   1dd04:	e3540000 	cmp	r4, #0
   1dd08:	0a00000c 	beq	1dd40 <CIPAddress::CopyTo(unsigned char*) const+0x54>
   1dd0c:	e2851004 	add	r1, r5, #4
   1dd10:	e1a00004 	mov	r0, r4
   1dd14:	e3a02004 	mov	r2, #4
   1dd18:	e8bd4070 	pop	{r4, r5, r6, lr}
   1dd1c:	ea00151e 	b	2319c <memcpy>
   1dd20:	e30e1f34 	movw	r1, #61236	; 0xef34
   1dd24:	e3401002 	movt	r1, #2
   1dd28:	e30a0e98 	movw	r0, #44696	; 0xae98
   1dd2c:	e3400002 	movt	r0, #2
   1dd30:	e3a0209b 	mov	r2, #155	; 0x9b
   1dd34:	eb001b98 	bl	24b9c <assertion_failed>
   1dd38:	e3540000 	cmp	r4, #0
   1dd3c:	1afffff2 	bne	1dd0c <CIPAddress::CopyTo(unsigned char*) const+0x20>
   1dd40:	e30e1f34 	movw	r1, #61236	; 0xef34
   1dd44:	e3401002 	movt	r1, #2
   1dd48:	e30b097c 	movw	r0, #47484	; 0xb97c
   1dd4c:	e3400002 	movt	r0, #2
   1dd50:	e3a0209c 	mov	r2, #156	; 0x9c
   1dd54:	eb001b90 	bl	24b9c <assertion_failed>
   1dd58:	eaffffeb 	b	1dd0c <CIPAddress::CopyTo(unsigned char*) const+0x20>

0001dd5c <CIPAddress::IsNull() const>:
   1dd5c:	e5903000 	ldr	r3, [r0]
   1dd60:	e92d4010 	push	{r4, lr}
   1dd64:	e1a04000 	mov	r4, r0
   1dd68:	e3530000 	cmp	r3, #0
   1dd6c:	1a000005 	bne	1dd88 <CIPAddress::IsNull() const+0x2c>
   1dd70:	e30e1f34 	movw	r1, #61236	; 0xef34
   1dd74:	e3401002 	movt	r1, #2
   1dd78:	e30a0e98 	movw	r0, #44696	; 0xae98
   1dd7c:	e3400002 	movt	r0, #2
   1dd80:	e3a020a2 	mov	r2, #162	; 0xa2
   1dd84:	eb001b84 	bl	24b9c <assertion_failed>
   1dd88:	e5940004 	ldr	r0, [r4, #4]
   1dd8c:	e16f0f10 	clz	r0, r0
   1dd90:	e1a002a0 	lsr	r0, r0, #5
   1dd94:	e8bd8010 	pop	{r4, pc}

0001dd98 <CIPAddress::IsBroadcast() const>:
   1dd98:	e5903000 	ldr	r3, [r0]
   1dd9c:	e92d4010 	push	{r4, lr}
   1dda0:	e1a04000 	mov	r4, r0
   1dda4:	e3530000 	cmp	r3, #0
   1dda8:	1a000005 	bne	1ddc4 <CIPAddress::IsBroadcast() const+0x2c>
   1ddac:	e30e1f34 	movw	r1, #61236	; 0xef34
   1ddb0:	e3401002 	movt	r1, #2
   1ddb4:	e30a0e98 	movw	r0, #44696	; 0xae98
   1ddb8:	e3400002 	movt	r0, #2
   1ddbc:	e3a020a8 	mov	r2, #168	; 0xa8
   1ddc0:	eb001b75 	bl	24b9c <assertion_failed>
   1ddc4:	e5940004 	ldr	r0, [r4, #4]
   1ddc8:	e3700001 	cmn	r0, #1
   1ddcc:	13a00000 	movne	r0, #0
   1ddd0:	03a00001 	moveq	r0, #1
   1ddd4:	e8bd8010 	pop	{r4, pc}

0001ddd8 <CIPAddress::GetSize() const>:
   1ddd8:	e3a00004 	mov	r0, #4
   1dddc:	e12fff1e 	bx	lr

0001dde0 <CIPAddress::Format(CString*) const>:
   1dde0:	e92d4030 	push	{r4, r5, lr}
   1dde4:	e2514000 	subs	r4, r1, #0
   1dde8:	e1a05000 	mov	r5, r0
   1ddec:	e24dd00c 	sub	sp, sp, #12
   1ddf0:	0a00000c 	beq	1de28 <CIPAddress::Format(CString*) const+0x48>
   1ddf4:	e5952004 	ldr	r2, [r5, #4]
   1ddf8:	e1a00004 	mov	r0, r4
   1ddfc:	e30e1f7c 	movw	r1, #61308	; 0xef7c
   1de00:	e3401002 	movt	r1, #2
   1de04:	e7e7e852 	ubfx	lr, r2, #16, #8
   1de08:	e7e73452 	ubfx	r3, r2, #8, #8
   1de0c:	e1a0cc22 	lsr	ip, r2, #24
   1de10:	e58de000 	str	lr, [sp]
   1de14:	e58dc004 	str	ip, [sp, #4]
   1de18:	e6ef2072 	uxtb	r2, r2
   1de1c:	eb0023c9 	bl	26d48 <CString::Format(char const*, ...)>
   1de20:	e28dd00c 	add	sp, sp, #12
   1de24:	e8bd8030 	pop	{r4, r5, pc}
   1de28:	e30e1f34 	movw	r1, #61236	; 0xef34
   1de2c:	e3401002 	movt	r1, #2
   1de30:	e30c070c 	movw	r0, #50956	; 0xc70c
   1de34:	e3400002 	movt	r0, #2
   1de38:	e3a020b4 	mov	r2, #180	; 0xb4
   1de3c:	eb001b56 	bl	24b9c <assertion_failed>
   1de40:	eaffffeb 	b	1ddf4 <CIPAddress::Format(CString*) const+0x14>

0001de44 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   1de44:	e5913000 	ldr	r3, [r1]
   1de48:	e92d4070 	push	{r4, r5, r6, lr}
   1de4c:	e1a04001 	mov	r4, r1
   1de50:	e3530000 	cmp	r3, #0
   1de54:	e24dd008 	sub	sp, sp, #8
   1de58:	e1a05000 	mov	r5, r0
   1de5c:	e1a06002 	mov	r6, r2
   1de60:	0a000016 	beq	1dec0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x7c>
   1de64:	e5943004 	ldr	r3, [r4, #4]
   1de68:	e3730001 	cmn	r3, #1
   1de6c:	03a00001 	moveq	r0, #1
   1de70:	0a000010 	beq	1deb8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x74>
   1de74:	e3560000 	cmp	r6, #0
   1de78:	0a00001e 	beq	1def8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xb4>
   1de7c:	e3a02004 	mov	r2, #4
   1de80:	e1a01006 	mov	r1, r6
   1de84:	e08d0002 	add	r0, sp, r2
   1de88:	eb0014c3 	bl	2319c <memcpy>
   1de8c:	e5953000 	ldr	r3, [r5]
   1de90:	e3530000 	cmp	r3, #0
   1de94:	0a000010 	beq	1dedc <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x98>
   1de98:	e59d3004 	ldr	r3, [sp, #4]
   1de9c:	e5950004 	ldr	r0, [r5, #4]
   1dea0:	e5942004 	ldr	r2, [r4, #4]
   1dea4:	e0000003 	and	r0, r0, r3
   1dea8:	e0033002 	and	r3, r3, r2
   1deac:	e0400003 	sub	r0, r0, r3
   1deb0:	e16f0f10 	clz	r0, r0
   1deb4:	e1a002a0 	lsr	r0, r0, #5
   1deb8:	e28dd008 	add	sp, sp, #8
   1debc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dec0:	e30e1f34 	movw	r1, #61236	; 0xef34
   1dec4:	e3401002 	movt	r1, #2
   1dec8:	e30a0e98 	movw	r0, #44696	; 0xae98
   1decc:	e3400002 	movt	r0, #2
   1ded0:	e3a020a8 	mov	r2, #168	; 0xa8
   1ded4:	eb001b30 	bl	24b9c <assertion_failed>
   1ded8:	eaffffe1 	b	1de64 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x20>
   1dedc:	e30e1f34 	movw	r1, #61236	; 0xef34
   1dee0:	e3401002 	movt	r1, #2
   1dee4:	e30a0e98 	movw	r0, #44696	; 0xae98
   1dee8:	e3400002 	movt	r0, #2
   1deec:	e3a020c5 	mov	r2, #197	; 0xc5
   1def0:	eb001b29 	bl	24b9c <assertion_failed>
   1def4:	eaffffe7 	b	1de98 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x54>
   1def8:	e30e1f34 	movw	r1, #61236	; 0xef34
   1defc:	e3401002 	movt	r1, #2
   1df00:	e30e0f88 	movw	r0, #61320	; 0xef88
   1df04:	e3400002 	movt	r0, #2
   1df08:	e3a020c1 	mov	r2, #193	; 0xc1
   1df0c:	eb001b22 	bl	24b9c <assertion_failed>
   1df10:	eaffffd9 	b	1de7c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x38>

0001df14 <CNetQueue::CNetQueue()>:
   1df14:	e3a02000 	mov	r2, #0
   1df18:	e5802000 	str	r2, [r0]
   1df1c:	e5802004 	str	r2, [r0, #4]
   1df20:	e5802008 	str	r2, [r0, #8]
   1df24:	e12fff1e 	bx	lr

0001df28 <CNetQueue::IsEmpty() const>:
   1df28:	e5900000 	ldr	r0, [r0]
   1df2c:	e16f0f10 	clz	r0, r0
   1df30:	e1a002a0 	lsr	r0, r0, #5
   1df34:	e12fff1e 	bx	lr

0001df38 <CNetQueue::Flush()>:
   1df38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1df3c:	e5904000 	ldr	r4, [r0]
   1df40:	e3540000 	cmp	r4, #0
   1df44:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1df48:	e30e6f98 	movw	r6, #61336	; 0xef98
   1df4c:	e30e8a7c 	movw	r8, #60028	; 0xea7c
   1df50:	e30e7fa8 	movw	r7, #61352	; 0xefa8
   1df54:	e1a05000 	mov	r5, r0
   1df58:	e3406002 	movt	r6, #2
   1df5c:	e3408002 	movt	r8, #2
   1df60:	e3407002 	movt	r7, #2
   1df64:	ea000010 	b	1dfac <CNetQueue::Flush()+0x74>
   1df68:	e3540000 	cmp	r4, #0
   1df6c:	0a000015 	beq	1dfc8 <CNetQueue::Flush()+0x90>
   1df70:	e5943004 	ldr	r3, [r4, #4]
   1df74:	e3530000 	cmp	r3, #0
   1df78:	e5853000 	str	r3, [r5]
   1df7c:	0a000019 	beq	1dfe8 <CNetQueue::Flush()+0xb0>
   1df80:	e3a02000 	mov	r2, #0
   1df84:	e5832000 	str	r2, [r3]
   1df88:	e5953008 	ldr	r3, [r5, #8]
   1df8c:	e3530000 	cmp	r3, #0
   1df90:	1a000020 	bne	1e018 <CNetQueue::Flush()+0xe0>
   1df94:	e1a00004 	mov	r0, r4
   1df98:	e3a01e65 	mov	r1, #1616	; 0x650
   1df9c:	eb000ff6 	bl	21f7c <operator delete(void*, unsigned int)>
   1dfa0:	e5954000 	ldr	r4, [r5]
   1dfa4:	e3540000 	cmp	r4, #0
   1dfa8:	0a00001c 	beq	1e020 <CNetQueue::Flush()+0xe8>
   1dfac:	e5950008 	ldr	r0, [r5, #8]
   1dfb0:	e3500000 	cmp	r0, #0
   1dfb4:	0affffeb 	beq	1df68 <CNetQueue::Flush()+0x30>
   1dfb8:	eb000ff7 	bl	21f9c <EnterCritical>
   1dfbc:	e5954000 	ldr	r4, [r5]
   1dfc0:	e3540000 	cmp	r4, #0
   1dfc4:	1affffe9 	bne	1df70 <CNetQueue::Flush()+0x38>
   1dfc8:	e3a0203a 	mov	r2, #58	; 0x3a
   1dfcc:	e1a01006 	mov	r1, r6
   1dfd0:	e1a00008 	mov	r0, r8
   1dfd4:	eb001af0 	bl	24b9c <assertion_failed>
   1dfd8:	e5943004 	ldr	r3, [r4, #4]
   1dfdc:	e3530000 	cmp	r3, #0
   1dfe0:	e5853000 	str	r3, [r5]
   1dfe4:	1affffe5 	bne	1df80 <CNetQueue::Flush()+0x48>
   1dfe8:	e5953004 	ldr	r3, [r5, #4]
   1dfec:	e1540003 	cmp	r4, r3
   1dff0:	0a000003 	beq	1e004 <CNetQueue::Flush()+0xcc>
   1dff4:	e3a02043 	mov	r2, #67	; 0x43
   1dff8:	e1a01006 	mov	r1, r6
   1dffc:	e1a00007 	mov	r0, r7
   1e000:	eb001ae5 	bl	24b9c <assertion_failed>
   1e004:	e3a03000 	mov	r3, #0
   1e008:	e5853004 	str	r3, [r5, #4]
   1e00c:	e5953008 	ldr	r3, [r5, #8]
   1e010:	e3530000 	cmp	r3, #0
   1e014:	0affffde 	beq	1df94 <CNetQueue::Flush()+0x5c>
   1e018:	eb00100d 	bl	22054 <LeaveCritical>
   1e01c:	eaffffdc 	b	1df94 <CNetQueue::Flush()+0x5c>
   1e020:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001e024 <CNetQueue::~CNetQueue()>:
   1e024:	e92d4010 	push	{r4, lr}
   1e028:	e1a04000 	mov	r4, r0
   1e02c:	ebffffc1 	bl	1df38 <CNetQueue::Flush()>
   1e030:	e1a00004 	mov	r0, r4
   1e034:	e8bd8010 	pop	{r4, pc}

0001e038 <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   1e038:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e03c:	e1a05000 	mov	r5, r0
   1e040:	e3a00e65 	mov	r0, #1616	; 0x650
   1e044:	e1a06002 	mov	r6, r2
   1e048:	e1a07001 	mov	r7, r1
   1e04c:	e1a08003 	mov	r8, r3
   1e050:	eb000fc5 	bl	21f6c <operator new(unsigned int)>
   1e054:	e3560000 	cmp	r6, #0
   1e058:	e1a04000 	mov	r4, r0
   1e05c:	0a00002e 	beq	1e11c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe4>
   1e060:	e3560d19 	cmp	r6, #1600	; 0x640
   1e064:	8a000025 	bhi	1e100 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xc8>
   1e068:	e3570000 	cmp	r7, #0
   1e06c:	e5846008 	str	r6, [r4, #8]
   1e070:	0a000032 	beq	1e140 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x108>
   1e074:	e1a02006 	mov	r2, r6
   1e078:	e1a01007 	mov	r1, r7
   1e07c:	e284000c 	add	r0, r4, #12
   1e080:	eb001445 	bl	2319c <memcpy>
   1e084:	e5950008 	ldr	r0, [r5, #8]
   1e088:	e584864c 	str	r8, [r4, #1612]	; 0x64c
   1e08c:	e3500000 	cmp	r0, #0
   1e090:	1a000028 	bne	1e138 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   1e094:	e5951000 	ldr	r1, [r5]
   1e098:	e3a02000 	mov	r2, #0
   1e09c:	e5953004 	ldr	r3, [r5, #4]
   1e0a0:	e1510002 	cmp	r1, r2
   1e0a4:	e5842004 	str	r2, [r4, #4]
   1e0a8:	05854000 	streq	r4, [r5]
   1e0ac:	e5843000 	str	r3, [r4]
   1e0b0:	0a00000c 	beq	1e0e8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb0>
   1e0b4:	e3530000 	cmp	r3, #0
   1e0b8:	0a000027 	beq	1e15c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x124>
   1e0bc:	e5932004 	ldr	r2, [r3, #4]
   1e0c0:	e3520000 	cmp	r2, #0
   1e0c4:	0a000006 	beq	1e0e4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xac>
   1e0c8:	e30e1f98 	movw	r1, #61336	; 0xef98
   1e0cc:	e30e0fcc 	movw	r0, #61388	; 0xefcc
   1e0d0:	e3401002 	movt	r1, #2
   1e0d4:	e3400002 	movt	r0, #2
   1e0d8:	e3a02067 	mov	r2, #103	; 0x67
   1e0dc:	eb001aae 	bl	24b9c <assertion_failed>
   1e0e0:	e5953004 	ldr	r3, [r5, #4]
   1e0e4:	e5834004 	str	r4, [r3, #4]
   1e0e8:	e5953008 	ldr	r3, [r5, #8]
   1e0ec:	e5854004 	str	r4, [r5, #4]
   1e0f0:	e3530000 	cmp	r3, #0
   1e0f4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1e0f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1e0fc:	ea000fd4 	b	22054 <LeaveCritical>
   1e100:	e30e1f98 	movw	r1, #61336	; 0xef98
   1e104:	e30c0380 	movw	r0, #50048	; 0xc380
   1e108:	e3401002 	movt	r1, #2
   1e10c:	e3400002 	movt	r0, #2
   1e110:	e3a02053 	mov	r2, #83	; 0x53
   1e114:	eb001aa0 	bl	24b9c <assertion_failed>
   1e118:	eaffffd2 	b	1e068 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x30>
   1e11c:	e30e1f98 	movw	r1, #61336	; 0xef98
   1e120:	e30e06f8 	movw	r0, #59128	; 0xe6f8
   1e124:	e3401002 	movt	r1, #2
   1e128:	e3400002 	movt	r0, #2
   1e12c:	e3a02052 	mov	r2, #82	; 0x52
   1e130:	eb001a99 	bl	24b9c <assertion_failed>
   1e134:	eaffffcb 	b	1e068 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x30>
   1e138:	eb000f97 	bl	21f9c <EnterCritical>
   1e13c:	eaffffd4 	b	1e094 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   1e140:	e30e1f98 	movw	r1, #61336	; 0xef98
   1e144:	e30b097c 	movw	r0, #47484	; 0xb97c
   1e148:	e3401002 	movt	r1, #2
   1e14c:	e3400002 	movt	r0, #2
   1e150:	e3a02056 	mov	r2, #86	; 0x56
   1e154:	eb001a90 	bl	24b9c <assertion_failed>
   1e158:	eaffffc5 	b	1e074 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x3c>
   1e15c:	e30e1f98 	movw	r1, #61336	; 0xef98
   1e160:	e30e0fbc 	movw	r0, #61372	; 0xefbc
   1e164:	e3401002 	movt	r1, #2
   1e168:	e3400002 	movt	r0, #2
   1e16c:	e3a02066 	mov	r2, #102	; 0x66
   1e170:	eb001a89 	bl	24b9c <assertion_failed>
   1e174:	e5953004 	ldr	r3, [r5, #4]
   1e178:	eaffffcf 	b	1e0bc <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x84>

0001e17c <CNetQueue::Dequeue(void*, void**)>:
   1e17c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e180:	e5904000 	ldr	r4, [r0]
   1e184:	e3540000 	cmp	r4, #0
   1e188:	0a000046 	beq	1e2a8 <CNetQueue::Dequeue(void*, void**)+0x12c>
   1e18c:	e1a05000 	mov	r5, r0
   1e190:	e5900008 	ldr	r0, [r0, #8]
   1e194:	e1a06002 	mov	r6, r2
   1e198:	e1a07001 	mov	r7, r1
   1e19c:	e3500000 	cmp	r0, #0
   1e1a0:	1a000029 	bne	1e24c <CNetQueue::Dequeue(void*, void**)+0xd0>
   1e1a4:	e5943004 	ldr	r3, [r4, #4]
   1e1a8:	e3530000 	cmp	r3, #0
   1e1ac:	e5853000 	str	r3, [r5]
   1e1b0:	0a000030 	beq	1e278 <CNetQueue::Dequeue(void*, void**)+0xfc>
   1e1b4:	e3a02000 	mov	r2, #0
   1e1b8:	e5832000 	str	r2, [r3]
   1e1bc:	e5953008 	ldr	r3, [r5, #8]
   1e1c0:	e3530000 	cmp	r3, #0
   1e1c4:	1a00001e 	bne	1e244 <CNetQueue::Dequeue(void*, void**)+0xc8>
   1e1c8:	e5945008 	ldr	r5, [r4, #8]
   1e1cc:	e3550000 	cmp	r5, #0
   1e1d0:	0a000014 	beq	1e228 <CNetQueue::Dequeue(void*, void**)+0xac>
   1e1d4:	e3550d19 	cmp	r5, #1600	; 0x640
   1e1d8:	8a00000b 	bhi	1e20c <CNetQueue::Dequeue(void*, void**)+0x90>
   1e1dc:	e1a02005 	mov	r2, r5
   1e1e0:	e284100c 	add	r1, r4, #12
   1e1e4:	e1a00007 	mov	r0, r7
   1e1e8:	eb0013eb 	bl	2319c <memcpy>
   1e1ec:	e3560000 	cmp	r6, #0
   1e1f0:	e1a00004 	mov	r0, r4
   1e1f4:	e3a01e65 	mov	r1, #1616	; 0x650
   1e1f8:	1594364c 	ldrne	r3, [r4, #1612]	; 0x64c
   1e1fc:	15863000 	strne	r3, [r6]
   1e200:	eb000f5d 	bl	21f7c <operator delete(void*, unsigned int)>
   1e204:	e1a00005 	mov	r0, r5
   1e208:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e20c:	e30e1f98 	movw	r1, #61336	; 0xef98
   1e210:	e30e0fec 	movw	r0, #61420	; 0xefec
   1e214:	e3401002 	movt	r1, #2
   1e218:	e3400002 	movt	r0, #2
   1e21c:	e3a02089 	mov	r2, #137	; 0x89
   1e220:	eb001a5d 	bl	24b9c <assertion_failed>
   1e224:	eaffffec 	b	1e1dc <CNetQueue::Dequeue(void*, void**)+0x60>
   1e228:	e30e1f98 	movw	r1, #61336	; 0xef98
   1e22c:	e30e0fe0 	movw	r0, #61408	; 0xefe0
   1e230:	e3401002 	movt	r1, #2
   1e234:	e3400002 	movt	r0, #2
   1e238:	e3a02088 	mov	r2, #136	; 0x88
   1e23c:	eb001a56 	bl	24b9c <assertion_failed>
   1e240:	eaffffe5 	b	1e1dc <CNetQueue::Dequeue(void*, void**)+0x60>
   1e244:	eb000f82 	bl	22054 <LeaveCritical>
   1e248:	eaffffde 	b	1e1c8 <CNetQueue::Dequeue(void*, void**)+0x4c>
   1e24c:	eb000f52 	bl	21f9c <EnterCritical>
   1e250:	e5954000 	ldr	r4, [r5]
   1e254:	e3540000 	cmp	r4, #0
   1e258:	1affffd1 	bne	1e1a4 <CNetQueue::Dequeue(void*, void**)+0x28>
   1e25c:	e30e1f98 	movw	r1, #61336	; 0xef98
   1e260:	e30e0a7c 	movw	r0, #60028	; 0xea7c
   1e264:	e3401002 	movt	r1, #2
   1e268:	e3400002 	movt	r0, #2
   1e26c:	e3a02078 	mov	r2, #120	; 0x78
   1e270:	eb001a49 	bl	24b9c <assertion_failed>
   1e274:	eaffffca 	b	1e1a4 <CNetQueue::Dequeue(void*, void**)+0x28>
   1e278:	e5953004 	ldr	r3, [r5, #4]
   1e27c:	e1530004 	cmp	r3, r4
   1e280:	0a000005 	beq	1e29c <CNetQueue::Dequeue(void*, void**)+0x120>
   1e284:	e30e1f98 	movw	r1, #61336	; 0xef98
   1e288:	e30e0fa8 	movw	r0, #61352	; 0xefa8
   1e28c:	e3401002 	movt	r1, #2
   1e290:	e3400002 	movt	r0, #2
   1e294:	e3a02081 	mov	r2, #129	; 0x81
   1e298:	eb001a3f 	bl	24b9c <assertion_failed>
   1e29c:	e3a03000 	mov	r3, #0
   1e2a0:	e5853004 	str	r3, [r5, #4]
   1e2a4:	eaffffc4 	b	1e1bc <CNetQueue::Dequeue(void*, void**)+0x40>
   1e2a8:	e1a05004 	mov	r5, r4
   1e2ac:	e1a00005 	mov	r0, r5
   1e2b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001e2b4 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   1e2b4:	e92d4070 	push	{r4, r5, r6, lr}
   1e2b8:	e1a04000 	mov	r4, r0
   1e2bc:	e3a05000 	mov	r5, #0
   1e2c0:	e1a00001 	mov	r0, r1
   1e2c4:	e584500c 	str	r5, [r4, #12]
   1e2c8:	e1a01004 	mov	r1, r4
   1e2cc:	e1a06002 	mov	r6, r2
   1e2d0:	ebfffe85 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   1e2d4:	e5c45008 	strb	r5, [r4, #8]
   1e2d8:	e1a00004 	mov	r0, r4
   1e2dc:	e5c46009 	strb	r6, [r4, #9]
   1e2e0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e2e4 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   1e2e4:	e92d4070 	push	{r4, r5, r6, lr}
   1e2e8:	e1a04000 	mov	r4, r0
   1e2ec:	e1a06002 	mov	r6, r2
   1e2f0:	e1a00001 	mov	r0, r1
   1e2f4:	e3a02001 	mov	r2, #1
   1e2f8:	e1a01004 	mov	r1, r4
   1e2fc:	e584200c 	str	r2, [r4, #12]
   1e300:	e1a05003 	mov	r5, r3
   1e304:	ebfffe78 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   1e308:	e1a00006 	mov	r0, r6
   1e30c:	e2841004 	add	r1, r4, #4
   1e310:	ebfffe75 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   1e314:	e3a03000 	mov	r3, #0
   1e318:	e5c45009 	strb	r5, [r4, #9]
   1e31c:	e1a00004 	mov	r0, r4
   1e320:	e5c43008 	strb	r3, [r4, #8]
   1e324:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e328 <CChecksumCalculator::~CChecksumCalculator()>:
   1e328:	e12fff1e 	bx	lr

0001e32c <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   1e32c:	e1a03001 	mov	r3, r1
   1e330:	e1a01000 	mov	r1, r0
   1e334:	e1a00003 	mov	r0, r3
   1e338:	eafffe6b 	b	1dcec <CIPAddress::CopyTo(unsigned char*) const>

0001e33c <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   1e33c:	e92d4010 	push	{r4, lr}
   1e340:	e1a04000 	mov	r4, r0
   1e344:	e1a00001 	mov	r0, r1
   1e348:	e2841004 	add	r1, r4, #4
   1e34c:	ebfffe66 	bl	1dcec <CIPAddress::CopyTo(unsigned char*) const>
   1e350:	e3a03001 	mov	r3, #1
   1e354:	e584300c 	str	r3, [r4, #12]
   1e358:	e8bd8010 	pop	{r4, pc}

0001e35c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   1e35c:	e92d4070 	push	{r4, r5, r6, lr}
   1e360:	e2505000 	subs	r5, r0, #0
   1e364:	e1a06001 	mov	r6, r1
   1e368:	e1a04002 	mov	r4, r2
   1e36c:	0a00001e 	beq	1e3ec <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x90>
   1e370:	e3560000 	cmp	r6, #0
   1e374:	0a000012 	beq	1e3c4 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x68>
   1e378:	e3560001 	cmp	r6, #1
   1e37c:	9a000021 	bls	1e408 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0xac>
   1e380:	e2460002 	sub	r0, r6, #2
   1e384:	e1a03005 	mov	r3, r5
   1e388:	e3c01001 	bic	r1, r0, #1
   1e38c:	e2811002 	add	r1, r1, #2
   1e390:	e0851001 	add	r1, r5, r1
   1e394:	e0d320b2 	ldrh	r2, [r3], #2
   1e398:	e1530001 	cmp	r3, r1
   1e39c:	e0844002 	add	r4, r4, r2
   1e3a0:	1afffffb 	bne	1e394 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x38>
   1e3a4:	e3c00001 	bic	r0, r0, #1
   1e3a8:	e3160001 	tst	r6, #1
   1e3ac:	e2800002 	add	r0, r0, #2
   1e3b0:	e0850000 	add	r0, r5, r0
   1e3b4:	0a00000a 	beq	1e3e4 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x88>
   1e3b8:	e5d00000 	ldrb	r0, [r0]
   1e3bc:	e0800004 	add	r0, r0, r4
   1e3c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e3c4:	e3a02055 	mov	r2, #85	; 0x55
   1e3c8:	e30f100c 	movw	r1, #61452	; 0xf00c
   1e3cc:	e30e06f8 	movw	r0, #59128	; 0xe6f8
   1e3d0:	e3401002 	movt	r1, #2
   1e3d4:	e3400002 	movt	r0, #2
   1e3d8:	eb0019ef 	bl	24b9c <assertion_failed>
   1e3dc:	e1a00004 	mov	r0, r4
   1e3e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e3e4:	e1a00004 	mov	r0, r4
   1e3e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e3ec:	e30f100c 	movw	r1, #61452	; 0xf00c
   1e3f0:	e30f0024 	movw	r0, #61476	; 0xf024
   1e3f4:	e3401002 	movt	r1, #2
   1e3f8:	e3400002 	movt	r0, #2
   1e3fc:	e3a02054 	mov	r2, #84	; 0x54
   1e400:	eb0019e5 	bl	24b9c <assertion_failed>
   1e404:	eaffffd9 	b	1e370 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x14>
   1e408:	e1a00005 	mov	r0, r5
   1e40c:	eaffffe9 	b	1e3b8 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x5c>

0001e410 <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   1e410:	e590300c 	ldr	r3, [r0, #12]
   1e414:	e92d4070 	push	{r4, r5, r6, lr}
   1e418:	e3530000 	cmp	r3, #0
   1e41c:	e1a05000 	mov	r5, r0
   1e420:	e1a06001 	mov	r6, r1
   1e424:	e1a04002 	mov	r4, r2
   1e428:	0a000019 	beq	1e494 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x84>
   1e42c:	e6bf3fb4 	rev16	r3, r4
   1e430:	e1a00005 	mov	r0, r5
   1e434:	e1c530ba 	strh	r3, [r5, #10]
   1e438:	e3a02000 	mov	r2, #0
   1e43c:	e3a0100c 	mov	r1, #12
   1e440:	ebffffc5 	bl	1e35c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   1e444:	e3560000 	cmp	r6, #0
   1e448:	e1a05000 	mov	r5, r0
   1e44c:	0a00001e 	beq	1e4cc <CChecksumCalculator::Calculate(void const*, unsigned int)+0xbc>
   1e450:	e3540000 	cmp	r4, #0
   1e454:	0a000015 	beq	1e4b0 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa0>
   1e458:	e1a02005 	mov	r2, r5
   1e45c:	e1a01004 	mov	r1, r4
   1e460:	e1a00006 	mov	r0, r6
   1e464:	ebffffbc 	bl	1e35c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   1e468:	e1a03820 	lsr	r3, r0, #16
   1e46c:	e3530000 	cmp	r3, #0
   1e470:	e6ff3073 	uxth	r3, r3
   1e474:	0a000003 	beq	1e488 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x78>
   1e478:	e6f30070 	uxtah	r0, r3, r0
   1e47c:	e3a03001 	mov	r3, #1
   1e480:	e1b02820 	lsrs	r2, r0, #16
   1e484:	1afffffb 	bne	1e478 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x68>
   1e488:	e1e00000 	mvn	r0, r0
   1e48c:	e6ff0070 	uxth	r0, r0
   1e490:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e494:	e30f100c 	movw	r1, #61452	; 0xf00c
   1e498:	e30f0034 	movw	r0, #61492	; 0xf034
   1e49c:	e3401002 	movt	r1, #2
   1e4a0:	e3400002 	movt	r0, #2
   1e4a4:	e3a0203c 	mov	r2, #60	; 0x3c
   1e4a8:	eb0019bb 	bl	24b9c <assertion_failed>
   1e4ac:	eaffffde 	b	1e42c <CChecksumCalculator::Calculate(void const*, unsigned int)+0x1c>
   1e4b0:	e30f100c 	movw	r1, #61452	; 0xf00c
   1e4b4:	e30e06f8 	movw	r0, #59128	; 0xe6f8
   1e4b8:	e3401002 	movt	r1, #2
   1e4bc:	e3400002 	movt	r0, #2
   1e4c0:	e3a02042 	mov	r2, #66	; 0x42
   1e4c4:	eb0019b4 	bl	24b9c <assertion_failed>
   1e4c8:	eaffffe2 	b	1e458 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x48>
   1e4cc:	e30f100c 	movw	r1, #61452	; 0xf00c
   1e4d0:	e30b097c 	movw	r0, #47484	; 0xb97c
   1e4d4:	e3401002 	movt	r1, #2
   1e4d8:	e3400002 	movt	r0, #2
   1e4dc:	e3a02041 	mov	r2, #65	; 0x41
   1e4e0:	eb0019ad 	bl	24b9c <assertion_failed>
   1e4e4:	eaffffd9 	b	1e450 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x40>

0001e4e8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   1e4e8:	e92d4070 	push	{r4, r5, r6, lr}
   1e4ec:	e2505000 	subs	r5, r0, #0
   1e4f0:	e1a04001 	mov	r4, r1
   1e4f4:	0a000017 	beq	1e558 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x70>
   1e4f8:	e3540000 	cmp	r4, #0
   1e4fc:	0a00000e 	beq	1e53c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x54>
   1e500:	e1a01004 	mov	r1, r4
   1e504:	e1a00005 	mov	r0, r5
   1e508:	e3a02000 	mov	r2, #0
   1e50c:	ebffff92 	bl	1e35c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   1e510:	e1a03820 	lsr	r3, r0, #16
   1e514:	e3530000 	cmp	r3, #0
   1e518:	e6ff3073 	uxth	r3, r3
   1e51c:	0a000003 	beq	1e530 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x48>
   1e520:	e6f30070 	uxtah	r0, r3, r0
   1e524:	e3a03001 	mov	r3, #1
   1e528:	e1b02820 	lsrs	r2, r0, #16
   1e52c:	1afffffb 	bne	1e520 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x38>
   1e530:	e1e00000 	mvn	r0, r0
   1e534:	e6ff0070 	uxth	r0, r0
   1e538:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e53c:	e30f100c 	movw	r1, #61452	; 0xf00c
   1e540:	e30e06f8 	movw	r0, #59128	; 0xe6f8
   1e544:	e3401002 	movt	r1, #2
   1e548:	e3400002 	movt	r0, #2
   1e54c:	e3a0204b 	mov	r2, #75	; 0x4b
   1e550:	eb001991 	bl	24b9c <assertion_failed>
   1e554:	eaffffe9 	b	1e500 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x18>
   1e558:	e30f100c 	movw	r1, #61452	; 0xf00c
   1e55c:	e30b097c 	movw	r0, #47484	; 0xb97c
   1e560:	e3401002 	movt	r1, #2
   1e564:	e3400002 	movt	r0, #2
   1e568:	e3a0204a 	mov	r2, #74	; 0x4a
   1e56c:	eb00198a 	bl	24b9c <assertion_failed>
   1e570:	eaffffe0 	b	1e4f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x10>

0001e574 <CChecksumCalculator::FoldResult(unsigned int)>:
   1e574:	e1a03820 	lsr	r3, r0, #16
   1e578:	e3530000 	cmp	r3, #0
   1e57c:	e6ff3073 	uxth	r3, r3
   1e580:	0a000003 	beq	1e594 <CChecksumCalculator::FoldResult(unsigned int)+0x20>
   1e584:	e6f30070 	uxtah	r0, r3, r0
   1e588:	e3a03001 	mov	r3, #1
   1e58c:	e1b02820 	lsrs	r2, r0, #16
   1e590:	1afffffb 	bne	1e584 <CChecksumCalculator::FoldResult(unsigned int)+0x10>
   1e594:	e6ff0070 	uxth	r0, r0
   1e598:	e12fff1e 	bx	lr

0001e59c <CDNSClient::CDNSClient(CNetSubSystem*)>:
   1e59c:	e3510000 	cmp	r1, #0
   1e5a0:	e92d4010 	push	{r4, lr}
   1e5a4:	e1a04000 	mov	r4, r0
   1e5a8:	e5801000 	str	r1, [r0]
   1e5ac:	0a000001 	beq	1e5b8 <CDNSClient::CDNSClient(CNetSubSystem*)+0x1c>
   1e5b0:	e1a00004 	mov	r0, r4
   1e5b4:	e8bd8010 	pop	{r4, pc}
   1e5b8:	e3a02057 	mov	r2, #87	; 0x57
   1e5bc:	e30f1048 	movw	r1, #61512	; 0xf048
   1e5c0:	e3401002 	movt	r1, #2
   1e5c4:	e30a06e8 	movw	r0, #42728	; 0xa6e8
   1e5c8:	e3400002 	movt	r0, #2
   1e5cc:	eb001972 	bl	24b9c <assertion_failed>
   1e5d0:	e1a00004 	mov	r0, r4
   1e5d4:	e8bd8010 	pop	{r4, pc}

0001e5d8 <CDNSClient::~CDNSClient()>:
   1e5d8:	e12fff1e 	bx	lr

0001e5dc <CDNSClient::Resolve(char const*, CIPAddress*)>:
   1e5dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5e0:	e2515000 	subs	r5, r1, #0
   1e5e4:	e1a06000 	mov	r6, r0
   1e5e8:	e24ddd15 	sub	sp, sp, #1344	; 0x540
   1e5ec:	e1a07002 	mov	r7, r2
   1e5f0:	e24dd00c 	sub	sp, sp, #12
   1e5f4:	0a00002c 	beq	1e6ac <CDNSClient::Resolve(char const*, CIPAddress*)+0xd0>
   1e5f8:	eb001aec 	bl	251b0 <CLogger::Get()>
   1e5fc:	e30f3068 	movw	r3, #61544	; 0xf068
   1e600:	e3403002 	movt	r3, #2
   1e604:	e30f1078 	movw	r1, #61560	; 0xf078
   1e608:	e3401002 	movt	r1, #2
   1e60c:	e3a02004 	mov	r2, #4
   1e610:	eb001bc2 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e614:	e5d53000 	ldrb	r3, [r5]
   1e618:	e2433031 	sub	r3, r3, #49	; 0x31
   1e61c:	e3530008 	cmp	r3, #8
   1e620:	93a04000 	movls	r4, #0
   1e624:	9a00000f 	bls	1e668 <CDNSClient::Resolve(char const*, CIPAddress*)+0x8c>
   1e628:	e5960000 	ldr	r0, [r6]
   1e62c:	e3500000 	cmp	r0, #0
   1e630:	0a00009c 	beq	1e8a8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2cc>
   1e634:	ebffde76 	bl	16014 <CNetSubSystem::GetConfig()>
   1e638:	ebfffc76 	bl	1d818 <CNetConfig::GetDNSServer() const>
   1e63c:	ebfffd9d 	bl	1dcb8 <CIPAddress::Get() const>
   1e640:	e1a01000 	mov	r1, r0
   1e644:	e28d0018 	add	r0, sp, #24
   1e648:	ebfffd74 	bl	1dc20 <CIPAddress::CIPAddress(unsigned char const*)>
   1e64c:	e28d0018 	add	r0, sp, #24
   1e650:	ebfffdc1 	bl	1dd5c <CIPAddress::IsNull() const>
   1e654:	e2504000 	subs	r4, r0, #0
   1e658:	13a04000 	movne	r4, #0
   1e65c:	0a000005 	beq	1e678 <CDNSClient::Resolve(char const*, CIPAddress*)+0x9c>
   1e660:	e28d0018 	add	r0, sp, #24
   1e664:	ebfffcd8 	bl	1d9cc <CIPAddress::~CIPAddress()>
   1e668:	e1a00004 	mov	r0, r4
   1e66c:	e28ddd15 	add	sp, sp, #1344	; 0x540
   1e670:	e28dd00c 	add	sp, sp, #12
   1e674:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e678:	e5961000 	ldr	r1, [r6]
   1e67c:	e3a02011 	mov	r2, #17
   1e680:	e28d0030 	add	r0, sp, #48	; 0x30
   1e684:	ebffdeb2 	bl	16154 <CSocket::CSocket(CNetSubSystem*, int)>
   1e688:	e28d0030 	add	r0, sp, #48	; 0x30
   1e68c:	e3a02035 	mov	r2, #53	; 0x35
   1e690:	e28d1018 	add	r1, sp, #24
   1e694:	ebffdf33 	bl	16368 <CSocket::Connect(CIPAddress&, unsigned short)>
   1e698:	e3500000 	cmp	r0, #0
   1e69c:	0a000009 	beq	1e6c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0xec>
   1e6a0:	e28d0030 	add	r0, sp, #48	; 0x30
   1e6a4:	ebffdefe 	bl	162a4 <CSocket::~CSocket()>
   1e6a8:	eaffffec 	b	1e660 <CDNSClient::Resolve(char const*, CIPAddress*)+0x84>
   1e6ac:	e30f1048 	movw	r1, #61512	; 0xf048
   1e6b0:	e3401002 	movt	r1, #2
   1e6b4:	e30f0058 	movw	r0, #61528	; 0xf058
   1e6b8:	e3400002 	movt	r0, #2
   1e6bc:	e3a02061 	mov	r2, #97	; 0x61
   1e6c0:	eb001935 	bl	24b9c <assertion_failed>
   1e6c4:	eaffffcb 	b	1e5f8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c>
   1e6c8:	e28d6f52 	add	r6, sp, #328	; 0x148
   1e6cc:	e3a02c02 	mov	r2, #512	; 0x200
   1e6d0:	e1a01004 	mov	r1, r4
   1e6d4:	e1a00006 	mov	r0, r6
   1e6d8:	eb001197 	bl	22d3c <memset>
   1e6dc:	e301cb48 	movw	ip, #6984	; 0x1b48
   1e6e0:	e340c003 	movt	ip, #3
   1e6e4:	e3a0ec01 	mov	lr, #256	; 0x100
   1e6e8:	e3a02001 	mov	r2, #1
   1e6ec:	e1c6e0b4 	strh	lr, [r6, #4]
   1e6f0:	e1a01005 	mov	r1, r5
   1e6f4:	e1dc30b0 	ldrh	r3, [ip]
   1e6f8:	e28d0048 	add	r0, sp, #72	; 0x48
   1e6fc:	e1c620b2 	strh	r2, [r6, #2]
   1e700:	e3a020ff 	mov	r2, #255	; 0xff
   1e704:	e283e001 	add	lr, r3, #1
   1e708:	e6bf3fb3 	rev16	r3, r3
   1e70c:	e1c630b0 	strh	r3, [r6]
   1e710:	e6ff3073 	uxth	r3, r3
   1e714:	e1cce0b0 	strh	lr, [ip]
   1e718:	e58d3004 	str	r3, [sp, #4]
   1e71c:	eb0011d6 	bl	22e7c <strncpy>
   1e720:	e28d0048 	add	r0, sp, #72	; 0x48
   1e724:	e28d2010 	add	r2, sp, #16
   1e728:	e30f10d8 	movw	r1, #61656	; 0xf0d8
   1e72c:	e3401002 	movt	r1, #2
   1e730:	e5cd4147 	strb	r4, [sp, #327]	; 0x147
   1e734:	eb001204 	bl	22f4c <strtok_r>
   1e738:	e250b000 	subs	fp, r0, #0
   1e73c:	01a0a006 	moveq	sl, r6
   1e740:	028d5f55 	addeq	r5, sp, #340	; 0x154
   1e744:	0a000019 	beq	1e7b0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1d4>
   1e748:	e30f80d8 	movw	r8, #61656	; 0xf0d8
   1e74c:	e3408002 	movt	r8, #2
   1e750:	e28d5f55 	add	r5, sp, #340	; 0x154
   1e754:	e1a0000b 	mov	r0, fp
   1e758:	e2859001 	add	r9, r5, #1
   1e75c:	eb001196 	bl	22dbc <strlen>
   1e760:	e1a02000 	mov	r2, r0
   1e764:	e35200ff 	cmp	r2, #255	; 0xff
   1e768:	e0453006 	sub	r3, r5, r6
   1e76c:	e1a0100b 	mov	r1, fp
   1e770:	e1a00009 	mov	r0, r9
   1e774:	e2633c02 	rsb	r3, r3, #512	; 0x200
   1e778:	e282c002 	add	ip, r2, #2
   1e77c:	e1a0a006 	mov	sl, r6
   1e780:	8affffc6 	bhi	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e784:	e15c0003 	cmp	ip, r3
   1e788:	aaffffc4 	bge	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e78c:	e5c52000 	strb	r2, [r5]
   1e790:	e0895002 	add	r5, r9, r2
   1e794:	eb0011ad 	bl	22e50 <strcpy>
   1e798:	e28d2010 	add	r2, sp, #16
   1e79c:	e1a01008 	mov	r1, r8
   1e7a0:	e3a00000 	mov	r0, #0
   1e7a4:	eb0011e8 	bl	22f4c <strtok_r>
   1e7a8:	e250b000 	subs	fp, r0, #0
   1e7ac:	1affffe8 	bne	1e754 <CDNSClient::Resolve(char const*, CIPAddress*)+0x178>
   1e7b0:	e2850001 	add	r0, r5, #1
   1e7b4:	e28d1014 	add	r1, sp, #20
   1e7b8:	e040300a 	sub	r3, r0, sl
   1e7bc:	e3a02c01 	mov	r2, #256	; 0x100
   1e7c0:	e2633c02 	rsb	r3, r3, #512	; 0x200
   1e7c4:	e1cd21b4 	strh	r2, [sp, #20]
   1e7c8:	e3530003 	cmp	r3, #3
   1e7cc:	e3a03000 	mov	r3, #0
   1e7d0:	e1c120b2 	strh	r2, [r1, #2]
   1e7d4:	e5c53000 	strb	r3, [r5]
   1e7d8:	daffffb0 	ble	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e7dc:	e3a02004 	mov	r2, #4
   1e7e0:	e2855005 	add	r5, r5, #5
   1e7e4:	eb00126c 	bl	2319c <memcpy>
   1e7e8:	e045300a 	sub	r3, r5, sl
   1e7ec:	e3530c02 	cmp	r3, #512	; 0x200
   1e7f0:	e1a0a003 	mov	sl, r3
   1e7f4:	ca00007e 	bgt	1e9f4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x418>
   1e7f8:	e30fb0a4 	movw	fp, #61604	; 0xf0a4
   1e7fc:	e340b002 	movt	fp, #2
   1e800:	e30f9078 	movw	r9, #61560	; 0xf078
   1e804:	e3409002 	movt	r9, #2
   1e808:	e30f50c0 	movw	r5, #61632	; 0xf0c0
   1e80c:	e3405002 	movt	r5, #2
   1e810:	e58d700c 	str	r7, [sp, #12]
   1e814:	e3a08003 	mov	r8, #3
   1e818:	e1a0700a 	mov	r7, sl
   1e81c:	e3a03000 	mov	r3, #0
   1e820:	e1a02007 	mov	r2, r7
   1e824:	e1a01006 	mov	r1, r6
   1e828:	e28d0030 	add	r0, sp, #48	; 0x30
   1e82c:	ebffdf75 	bl	16608 <CSocket::Send(void const*, unsigned int, int)>
   1e830:	e1570000 	cmp	r7, r0
   1e834:	1affff99 	bne	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e838:	eb001a5c 	bl	251b0 <CLogger::Get()>
   1e83c:	e1a0300b 	mov	r3, fp
   1e840:	e3a02004 	mov	r2, #4
   1e844:	e1a01009 	mov	r1, r9
   1e848:	eb001b34 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e84c:	e28dafd2 	add	sl, sp, #840	; 0x348
   1e850:	eb0008aa 	bl	20b00 <CScheduler::Get()>
   1e854:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   1e858:	eb00087a 	bl	20a48 <CScheduler::MsSleep(unsigned int)>
   1e85c:	eb001a53 	bl	251b0 <CLogger::Get()>
   1e860:	e1a03005 	mov	r3, r5
   1e864:	e3a02004 	mov	r2, #4
   1e868:	e1a01009 	mov	r1, r9
   1e86c:	eb001b2b 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e870:	e1a0100a 	mov	r1, sl
   1e874:	e3a03040 	mov	r3, #64	; 0x40
   1e878:	e3a02c02 	mov	r2, #512	; 0x200
   1e87c:	e28d0030 	add	r0, sp, #48	; 0x30
   1e880:	ebffdf8b 	bl	166b4 <CSocket::Receive(void*, unsigned int, int)>
   1e884:	e3500c02 	cmp	r0, #512	; 0x200
   1e888:	aa00000e 	bge	1e8c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2ec>
   1e88c:	e3500000 	cmp	r0, #0
   1e890:	baffff82 	blt	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e894:	e3500019 	cmp	r0, #25
   1e898:	ca00005c 	bgt	1ea10 <CDNSClient::Resolve(char const*, CIPAddress*)+0x434>
   1e89c:	e2588001 	subs	r8, r8, #1
   1e8a0:	0affff7e 	beq	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e8a4:	eaffffdc 	b	1e81c <CDNSClient::Resolve(char const*, CIPAddress*)+0x240>
   1e8a8:	e30f1048 	movw	r1, #61512	; 0xf048
   1e8ac:	e3401002 	movt	r1, #2
   1e8b0:	e30a06e8 	movw	r0, #42728	; 0xa6e8
   1e8b4:	e3400002 	movt	r0, #2
   1e8b8:	e3a02068 	mov	r2, #104	; 0x68
   1e8bc:	eb0018b6 	bl	24b9c <assertion_failed>
   1e8c0:	e5960000 	ldr	r0, [r6]
   1e8c4:	eaffff5a 	b	1e634 <CDNSClient::Resolve(char const*, CIPAddress*)+0x58>
   1e8c8:	e58d0008 	str	r0, [sp, #8]
   1e8cc:	e30f1048 	movw	r1, #61512	; 0xf048
   1e8d0:	e3401002 	movt	r1, #2
   1e8d4:	e30f00dc 	movw	r0, #61660	; 0xf0dc
   1e8d8:	e3400002 	movt	r0, #2
   1e8dc:	e3a020b8 	mov	r2, #184	; 0xb8
   1e8e0:	e59d700c 	ldr	r7, [sp, #12]
   1e8e4:	eb0018ac 	bl	24b9c <assertion_failed>
   1e8e8:	e59d3008 	ldr	r3, [sp, #8]
   1e8ec:	e1da20b0 	ldrh	r2, [sl]
   1e8f0:	e59d1004 	ldr	r1, [sp, #4]
   1e8f4:	e1520001 	cmp	r2, r1
   1e8f8:	1affff68 	bne	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e8fc:	e1da10b2 	ldrh	r1, [sl, #2]
   1e900:	e3002ffa 	movw	r2, #4090	; 0xffa
   1e904:	e0022001 	and	r2, r2, r1
   1e908:	e3520080 	cmp	r2, #128	; 0x80
   1e90c:	1affff63 	bne	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e910:	e1da20b4 	ldrh	r2, [sl, #4]
   1e914:	e3520c01 	cmp	r2, #256	; 0x100
   1e918:	1affff60 	bne	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e91c:	e1da20b6 	ldrh	r2, [sl, #6]
   1e920:	e3520000 	cmp	r2, #0
   1e924:	0affff5d 	beq	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e928:	e28d2fd5 	add	r2, sp, #852	; 0x354
   1e92c:	ea000003 	b	1e940 <CDNSClient::Resolve(char const*, CIPAddress*)+0x364>
   1e930:	e0822000 	add	r2, r2, r0
   1e934:	e042100a 	sub	r1, r2, sl
   1e938:	e1530001 	cmp	r3, r1
   1e93c:	daffff57 	ble	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e940:	e5d21000 	ldrb	r1, [r2]
   1e944:	e3510000 	cmp	r1, #0
   1e948:	e2810001 	add	r0, r1, #1
   1e94c:	1afffff7 	bne	1e930 <CDNSClient::Resolve(char const*, CIPAddress*)+0x354>
   1e950:	e2822005 	add	r2, r2, #5
   1e954:	e042100a 	sub	r1, r2, sl
   1e958:	e1530001 	cmp	r3, r1
   1e95c:	daffff4f 	ble	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e960:	e243800e 	sub	r8, r3, #14
   1e964:	e28d6020 	add	r6, sp, #32
   1e968:	e1a09003 	mov	r9, r3
   1e96c:	e5d21000 	ldrb	r1, [r2]
   1e970:	e2823001 	add	r3, r2, #1
   1e974:	e20110c0 	and	r1, r1, #192	; 0xc0
   1e978:	e35100c0 	cmp	r1, #192	; 0xc0
   1e97c:	02825002 	addeq	r5, r2, #2
   1e980:	0a000008 	beq	1e9a8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3cc>
   1e984:	e043200a 	sub	r2, r3, sl
   1e988:	e1590002 	cmp	r9, r2
   1e98c:	daffff43 	ble	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e990:	e5d32000 	ldrb	r2, [r3]
   1e994:	e2835001 	add	r5, r3, #1
   1e998:	e3520000 	cmp	r2, #0
   1e99c:	e0853002 	add	r3, r5, r2
   1e9a0:	e043200a 	sub	r2, r3, sl
   1e9a4:	1afffff7 	bne	1e988 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3ac>
   1e9a8:	e045300a 	sub	r3, r5, sl
   1e9ac:	e1530008 	cmp	r3, r8
   1e9b0:	caffff3a 	bgt	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e9b4:	e3a0200e 	mov	r2, #14
   1e9b8:	e1a01005 	mov	r1, r5
   1e9bc:	e1a00006 	mov	r0, r6
   1e9c0:	eb0011f5 	bl	2319c <memcpy>
   1e9c4:	e1d630b0 	ldrh	r3, [r6]
   1e9c8:	e3530c01 	cmp	r3, #256	; 0x100
   1e9cc:	0a000012 	beq	1ea1c <CDNSClient::Resolve(char const*, CIPAddress*)+0x440>
   1e9d0:	e1d620b8 	ldrh	r2, [r6, #8]
   1e9d4:	e6bf2fb2 	rev16	r2, r2
   1e9d8:	e6ff2072 	uxth	r2, r2
   1e9dc:	e282200a 	add	r2, r2, #10
   1e9e0:	e0852002 	add	r2, r5, r2
   1e9e4:	e042300a 	sub	r3, r2, sl
   1e9e8:	e1590003 	cmp	r9, r3
   1e9ec:	caffffde 	bgt	1e96c <CDNSClient::Resolve(char const*, CIPAddress*)+0x390>
   1e9f0:	eaffff2a 	b	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>
   1e9f4:	e30f1048 	movw	r1, #61512	; 0xf048
   1e9f8:	e3401002 	movt	r1, #2
   1e9fc:	e30f0084 	movw	r0, #61572	; 0xf084
   1ea00:	e3400002 	movt	r0, #2
   1ea04:	e3a020a7 	mov	r2, #167	; 0xa7
   1ea08:	eb001863 	bl	24b9c <assertion_failed>
   1ea0c:	eaffff79 	b	1e7f8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x21c>
   1ea10:	e1a03000 	mov	r3, r0
   1ea14:	e59d700c 	ldr	r7, [sp, #12]
   1ea18:	eaffffb3 	b	1e8ec <CDNSClient::Resolve(char const*, CIPAddress*)+0x310>
   1ea1c:	e1d630b2 	ldrh	r3, [r6, #2]
   1ea20:	e3530c01 	cmp	r3, #256	; 0x100
   1ea24:	1affffe9 	bne	1e9d0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f4>
   1ea28:	e1d630b8 	ldrh	r3, [r6, #8]
   1ea2c:	e3530b01 	cmp	r3, #1024	; 0x400
   1ea30:	1affffe6 	bne	1e9d0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f4>
   1ea34:	e3570000 	cmp	r7, #0
   1ea38:	1a000005 	bne	1ea54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x478>
   1ea3c:	e30f1048 	movw	r1, #61512	; 0xf048
   1ea40:	e3401002 	movt	r1, #2
   1ea44:	e30f0100 	movw	r0, #61696	; 0xf100
   1ea48:	e3400002 	movt	r0, #2
   1ea4c:	e300210f 	movw	r2, #271	; 0x10f
   1ea50:	eb001851 	bl	24b9c <assertion_failed>
   1ea54:	e28d102a 	add	r1, sp, #42	; 0x2a
   1ea58:	e1a00007 	mov	r0, r7
   1ea5c:	e3a04001 	mov	r4, #1
   1ea60:	ebfffc5c 	bl	1dbd8 <CIPAddress::Set(unsigned char const*)>
   1ea64:	eaffff0d 	b	1e6a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0xc4>

0001ea68 <CDHCPClient::~CDHCPClient()>:
   1ea68:	e59f3028 	ldr	r3, [pc, #40]	; 1ea98 <CDHCPClient::~CDHCPClient()+0x30>
   1ea6c:	e3a02000 	mov	r2, #0
   1ea70:	e92d4010 	push	{r4, lr}
   1ea74:	e1a04000 	mov	r4, r0
   1ea78:	e5842050 	str	r2, [r4, #80]	; 0x50
   1ea7c:	e2800058 	add	r0, r0, #88	; 0x58
   1ea80:	e5843000 	str	r3, [r4]
   1ea84:	ebffde06 	bl	162a4 <CSocket::~CSocket()>
   1ea88:	e1a00004 	mov	r0, r4
   1ea8c:	eb00060e 	bl	202cc <CTask::~CTask()>
   1ea90:	e1a00004 	mov	r0, r4
   1ea94:	e8bd8010 	pop	{r4, pc}
   1ea98:	0002f118 	.word	0x0002f118

0001ea9c <CDHCPClient::~CDHCPClient()>:
   1ea9c:	e59f3034 	ldr	r3, [pc, #52]	; 1ead8 <CDHCPClient::~CDHCPClient()+0x3c>
   1eaa0:	e3a02000 	mov	r2, #0
   1eaa4:	e92d4010 	push	{r4, lr}
   1eaa8:	e1a04000 	mov	r4, r0
   1eaac:	e5842050 	str	r2, [r4, #80]	; 0x50
   1eab0:	e2800058 	add	r0, r0, #88	; 0x58
   1eab4:	e5843000 	str	r3, [r4]
   1eab8:	ebffddf9 	bl	162a4 <CSocket::~CSocket()>
   1eabc:	e1a00004 	mov	r0, r4
   1eac0:	eb000601 	bl	202cc <CTask::~CTask()>
   1eac4:	e1a00004 	mov	r0, r4
   1eac8:	e3a010bc 	mov	r1, #188	; 0xbc
   1eacc:	eb000d2a 	bl	21f7c <operator delete(void*, unsigned int)>
   1ead0:	e1a00004 	mov	r0, r4
   1ead4:	e8bd8010 	pop	{r4, pc}
   1ead8:	0002f118 	.word	0x0002f118

0001eadc <CDHCPClient::CDHCPClient(CNetSubSystem*)>:
   1eadc:	e92d4070 	push	{r4, r5, r6, lr}
   1eae0:	e1a05001 	mov	r5, r1
   1eae4:	e3a01901 	mov	r1, #16384	; 0x4000
   1eae8:	e1a04000 	mov	r4, r0
   1eaec:	eb000646 	bl	2040c <CTask::CTask(unsigned int)>
   1eaf0:	e59f3084 	ldr	r3, [pc, #132]	; 1eb7c <CDHCPClient::CDHCPClient(CNetSubSystem*)+0xa0>
   1eaf4:	e1a00005 	mov	r0, r5
   1eaf8:	e5845050 	str	r5, [r4, #80]	; 0x50
   1eafc:	e5843000 	str	r3, [r4]
   1eb00:	ebffdd43 	bl	16014 <CNetSubSystem::GetConfig()>
   1eb04:	e3a02011 	mov	r2, #17
   1eb08:	e1a01005 	mov	r1, r5
   1eb0c:	e5840054 	str	r0, [r4, #84]	; 0x54
   1eb10:	e2840058 	add	r0, r4, #88	; 0x58
   1eb14:	ebffdd8e 	bl	16154 <CSocket::CSocket(CNetSubSystem*, int)>
   1eb18:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   1eb1c:	e3a02000 	mov	r2, #0
   1eb20:	e5842070 	str	r2, [r4, #112]	; 0x70
   1eb24:	e1530002 	cmp	r3, r2
   1eb28:	0a00000c 	beq	1eb60 <CDHCPClient::CDHCPClient(CNetSubSystem*)+0x84>
   1eb2c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   1eb30:	e3530000 	cmp	r3, #0
   1eb34:	0a000001 	beq	1eb40 <CDHCPClient::CDHCPClient(CNetSubSystem*)+0x64>
   1eb38:	e1a00004 	mov	r0, r4
   1eb3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1eb40:	e3a02072 	mov	r2, #114	; 0x72
   1eb44:	e30f1154 	movw	r1, #61780	; 0xf154
   1eb48:	e30e0608 	movw	r0, #58888	; 0xe608
   1eb4c:	e3401002 	movt	r1, #2
   1eb50:	e3400002 	movt	r0, #2
   1eb54:	eb001810 	bl	24b9c <assertion_failed>
   1eb58:	e1a00004 	mov	r0, r4
   1eb5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1eb60:	e30f1154 	movw	r1, #61780	; 0xf154
   1eb64:	e30a06e8 	movw	r0, #42728	; 0xa6e8
   1eb68:	e3401002 	movt	r1, #2
   1eb6c:	e3400002 	movt	r0, #2
   1eb70:	e3a02071 	mov	r2, #113	; 0x71
   1eb74:	eb001808 	bl	24b9c <assertion_failed>
   1eb78:	eaffffeb 	b	1eb2c <CDHCPClient::CDHCPClient(CNetSubSystem*)+0x50>
   1eb7c:	0002f118 	.word	0x0002f118

0001eb80 <CDHCPClient::IsBound() const>:
   1eb80:	e5900070 	ldr	r0, [r0, #112]	; 0x70
   1eb84:	e12fff1e 	bx	lr

0001eb88 <CDHCPClient::HaltNetwork()>:
   1eb88:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   1eb8c:	e3a02000 	mov	r2, #0
   1eb90:	e5802070 	str	r2, [r0, #112]	; 0x70
   1eb94:	e1530002 	cmp	r3, r2
   1eb98:	0a000001 	beq	1eba4 <CDHCPClient::HaltNetwork()+0x1c>
   1eb9c:	e1a00003 	mov	r0, r3
   1eba0:	eafffb30 	b	1d868 <CNetConfig::Reset()>
   1eba4:	e92d4010 	push	{r4, lr}
   1eba8:	e30f1154 	movw	r1, #61780	; 0xf154
   1ebac:	e1a04000 	mov	r4, r0
   1ebb0:	e3401002 	movt	r1, #2
   1ebb4:	e30e0608 	movw	r0, #58888	; 0xe608
   1ebb8:	e30021aa 	movw	r2, #426	; 0x1aa
   1ebbc:	e3400002 	movt	r0, #2
   1ebc0:	eb0017f5 	bl	24b9c <assertion_failed>
   1ebc4:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   1ebc8:	e8bd4010 	pop	{r4, lr}
   1ebcc:	e1a00003 	mov	r0, r3
   1ebd0:	eafffb24 	b	1d868 <CNetConfig::Reset()>

0001ebd4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   1ebd4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ebd8:	e24ddf8b 	sub	sp, sp, #556	; 0x22c
   1ebdc:	e1a04000 	mov	r4, r0
   1ebe0:	e1a05001 	mov	r5, r1
   1ebe4:	e1a06002 	mov	r6, r2
   1ebe8:	e3a01000 	mov	r1, #0
   1ebec:	e3a02f89 	mov	r2, #548	; 0x224
   1ebf0:	e28d0004 	add	r0, sp, #4
   1ebf4:	eb001050 	bl	22d3c <memset>
   1ebf8:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   1ebfc:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   1ec00:	e3082263 	movw	r2, #33379	; 0x8263
   1ec04:	e3530000 	cmp	r3, #0
   1ec08:	e5941094 	ldr	r1, [r4, #148]	; 0x94
   1ec0c:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   1ec10:	e3462353 	movt	r2, #25427	; 0x6353
   1ec14:	03a0c000 	moveq	ip, #0
   1ec18:	13a0c080 	movne	ip, #128	; 0x80
   1ec1c:	e3500000 	cmp	r0, #0
   1ec20:	e58d1010 	str	r1, [sp, #16]
   1ec24:	e58d3008 	str	r3, [sp, #8]
   1ec28:	e3a01006 	mov	r1, #6
   1ec2c:	e3a03001 	mov	r3, #1
   1ec30:	e58d20f0 	str	r2, [sp, #240]	; 0xf0
   1ec34:	e5cd3004 	strb	r3, [sp, #4]
   1ec38:	e5cd3005 	strb	r3, [sp, #5]
   1ec3c:	e5cd1006 	strb	r1, [sp, #6]
   1ec40:	e1cdc0be 	strh	ip, [sp, #14]
   1ec44:	0a000025 	beq	1ece0 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x10c>
   1ec48:	ebffdcf2 	bl	16018 <CNetSubSystem::GetNetDeviceLayer()>
   1ec4c:	ebffe802 	bl	18c5c <CNetDeviceLayer::GetMACAddress() const>
   1ec50:	e2507000 	subs	r7, r0, #0
   1ec54:	0a000029 	beq	1ed00 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x12c>
   1ec58:	e1a00007 	mov	r0, r7
   1ec5c:	e28d1020 	add	r1, sp, #32
   1ec60:	ebffd8a4 	bl	14ef8 <CMACAddress::CopyTo(unsigned char*) const>
   1ec64:	e3550000 	cmp	r5, #0
   1ec68:	0a000015 	beq	1ecc4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xf0>
   1ec6c:	e3560f4d 	cmp	r6, #308	; 0x134
   1ec70:	9a000005 	bls	1ec8c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xb8>
   1ec74:	e30f1154 	movw	r1, #61780	; 0xf154
   1ec78:	e30f0174 	movw	r0, #61812	; 0xf174
   1ec7c:	e3401002 	movt	r1, #2
   1ec80:	e3400002 	movt	r0, #2
   1ec84:	e300223d 	movw	r2, #573	; 0x23d
   1ec88:	eb0017c3 	bl	24b9c <assertion_failed>
   1ec8c:	e1a02006 	mov	r2, r6
   1ec90:	e1a01005 	mov	r1, r5
   1ec94:	e28d00f4 	add	r0, sp, #244	; 0xf4
   1ec98:	eb00113f 	bl	2319c <memcpy>
   1ec9c:	e28d1004 	add	r1, sp, #4
   1eca0:	e2840058 	add	r0, r4, #88	; 0x58
   1eca4:	e3a03000 	mov	r3, #0
   1eca8:	e3a02f89 	mov	r2, #548	; 0x224
   1ecac:	ebffde55 	bl	16608 <CSocket::Send(void const*, unsigned int, int)>
   1ecb0:	e2400f89 	sub	r0, r0, #548	; 0x224
   1ecb4:	e16f0f10 	clz	r0, r0
   1ecb8:	e1a002a0 	lsr	r0, r0, #5
   1ecbc:	e28ddf8b 	add	sp, sp, #556	; 0x22c
   1ecc0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ecc4:	e30f1154 	movw	r1, #61780	; 0xf154
   1ecc8:	e30f0164 	movw	r0, #61796	; 0xf164
   1eccc:	e3401002 	movt	r1, #2
   1ecd0:	e3400002 	movt	r0, #2
   1ecd4:	e3a02f8f 	mov	r2, #572	; 0x23c
   1ecd8:	eb0017af 	bl	24b9c <assertion_failed>
   1ecdc:	eaffffe2 	b	1ec6c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x98>
   1ece0:	e30f1154 	movw	r1, #61780	; 0xf154
   1ece4:	e30a06e8 	movw	r0, #42728	; 0xa6e8
   1ece8:	e3401002 	movt	r1, #2
   1ecec:	e3400002 	movt	r0, #2
   1ecf0:	e3002237 	movw	r2, #567	; 0x237
   1ecf4:	eb0017a8 	bl	24b9c <assertion_failed>
   1ecf8:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   1ecfc:	eaffffd1 	b	1ec48 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x74>
   1ed00:	e30f1154 	movw	r1, #61780	; 0xf154
   1ed04:	e30e091c 	movw	r0, #59676	; 0xe91c
   1ed08:	e3401002 	movt	r1, #2
   1ed0c:	e3400002 	movt	r0, #2
   1ed10:	e3002239 	movw	r2, #569	; 0x239
   1ed14:	eb0017a0 	bl	24b9c <assertion_failed>
   1ed18:	eaffffce 	b	1ec58 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x84>

0001ed1c <CDHCPClient::SendDiscover()>:
   1ed1c:	e3a01000 	mov	r1, #0
   1ed20:	e3a0200c 	mov	r2, #12
   1ed24:	e5801094 	str	r1, [r0, #148]	; 0x94
   1ed28:	e59f1000 	ldr	r1, [pc]	; 1ed30 <CDHCPClient::SendDiscover()+0x14>
   1ed2c:	eaffffa8 	b	1ebd4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   1ed30:	0002f124 	.word	0x0002f124

0001ed34 <CDHCPClient::CheckConfig()>:
   1ed34:	e5903098 	ldr	r3, [r0, #152]	; 0x98
   1ed38:	e92d4030 	push	{r4, r5, lr}
   1ed3c:	e3530000 	cmp	r3, #0
   1ed40:	e24dd014 	sub	sp, sp, #20
   1ed44:	e1a04000 	mov	r4, r0
   1ed48:	0a00002f 	beq	1ee0c <CDHCPClient::CheckConfig()+0xd8>
   1ed4c:	e590209c 	ldr	r2, [r0, #156]	; 0x9c
   1ed50:	e3520000 	cmp	r2, #0
   1ed54:	0a00002c 	beq	1ee0c <CDHCPClient::CheckConfig()+0xd8>
   1ed58:	e59010a0 	ldr	r1, [r0, #160]	; 0xa0
   1ed5c:	e3510000 	cmp	r1, #0
   1ed60:	0a000029 	beq	1ee0c <CDHCPClient::CheckConfig()+0xd8>
   1ed64:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
   1ed68:	e3500000 	cmp	r0, #0
   1ed6c:	0a000026 	beq	1ee0c <CDHCPClient::CheckConfig()+0xd8>
   1ed70:	e0233001 	eor	r3, r3, r1
   1ed74:	e1130002 	tst	r3, r2
   1ed78:	1a000037 	bne	1ee5c <CDHCPClient::CheckConfig()+0x128>
   1ed7c:	e59450a8 	ldr	r5, [r4, #168]	; 0xa8
   1ed80:	e3550000 	cmp	r5, #0
   1ed84:	0a00003b 	beq	1ee78 <CDHCPClient::CheckConfig()+0x144>
   1ed88:	e59420b4 	ldr	r2, [r4, #180]	; 0xb4
   1ed8c:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   1ed90:	e3520000 	cmp	r2, #0
   1ed94:	1a00002b 	bne	1ee48 <CDHCPClient::CheckConfig()+0x114>
   1ed98:	e3530000 	cmp	r3, #0
   1ed9c:	01a020a5 	lsreq	r2, r5, #1
   1eda0:	004531a5 	subeq	r3, r5, r5, lsr #3
   1eda4:	10652083 	rsbne	r2, r5, r3, lsl #1
   1eda8:	058420b4 	streq	r2, [r4, #180]	; 0xb4
   1edac:	058430b8 	streq	r3, [r4, #184]	; 0xb8
   1edb0:	158420b4 	strne	r2, [r4, #180]	; 0xb4
   1edb4:	e1550003 	cmp	r5, r3
   1edb8:	23a00000 	movcs	r0, #0
   1edbc:	33a00001 	movcc	r0, #1
   1edc0:	e1520003 	cmp	r2, r3
   1edc4:	83800001 	orrhi	r0, r0, #1
   1edc8:	e3500000 	cmp	r0, #0
   1edcc:	03a00001 	moveq	r0, #1
   1edd0:	0a00001a 	beq	1ee40 <CDHCPClient::CheckConfig()+0x10c>
   1edd4:	eb0018f5 	bl	251b0 <CLogger::Get()>
   1edd8:	e59420a8 	ldr	r2, [r4, #168]	; 0xa8
   1eddc:	e594c0b8 	ldr	ip, [r4, #184]	; 0xb8
   1ede0:	e30f3210 	movw	r3, #61968	; 0xf210
   1ede4:	e59410b4 	ldr	r1, [r4, #180]	; 0xb4
   1ede8:	e3403002 	movt	r3, #2
   1edec:	e58d2008 	str	r2, [sp, #8]
   1edf0:	e3a02002 	mov	r2, #2
   1edf4:	e88d1002 	stm	sp, {r1, ip}
   1edf8:	e59f1098 	ldr	r1, [pc, #152]	; 1ee98 <CDHCPClient::CheckConfig()+0x164>
   1edfc:	eb0019c7 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ee00:	e3a00000 	mov	r0, #0
   1ee04:	e28dd014 	add	sp, sp, #20
   1ee08:	e8bd8030 	pop	{r4, r5, pc}
   1ee0c:	eb0018e7 	bl	251b0 <CLogger::Get()>
   1ee10:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   1ee14:	e59450a4 	ldr	r5, [r4, #164]	; 0xa4
   1ee18:	e30f319c 	movw	r3, #61852	; 0xf19c
   1ee1c:	e594e0a0 	ldr	lr, [r4, #160]	; 0xa0
   1ee20:	e3403002 	movt	r3, #2
   1ee24:	e594c09c 	ldr	ip, [r4, #156]	; 0x9c
   1ee28:	e3a02002 	mov	r2, #2
   1ee2c:	e58d500c 	str	r5, [sp, #12]
   1ee30:	e88d5002 	stm	sp, {r1, ip, lr}
   1ee34:	e59f105c 	ldr	r1, [pc, #92]	; 1ee98 <CDHCPClient::CheckConfig()+0x164>
   1ee38:	eb0019b8 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ee3c:	e3a00000 	mov	r0, #0
   1ee40:	e28dd014 	add	sp, sp, #20
   1ee44:	e8bd8030 	pop	{r4, r5, pc}
   1ee48:	e3530000 	cmp	r3, #0
   1ee4c:	00453002 	subeq	r3, r5, r2
   1ee50:	008230a3 	addeq	r3, r2, r3, lsr #1
   1ee54:	058430b8 	streq	r3, [r4, #184]	; 0xb8
   1ee58:	eaffffd5 	b	1edb4 <CDHCPClient::CheckConfig()+0x80>
   1ee5c:	eb0018d3 	bl	251b0 <CLogger::Get()>
   1ee60:	e30f31cc 	movw	r3, #61900	; 0xf1cc
   1ee64:	e594209c 	ldr	r2, [r4, #156]	; 0x9c
   1ee68:	e3403002 	movt	r3, #2
   1ee6c:	e594c0a0 	ldr	ip, [r4, #160]	; 0xa0
   1ee70:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   1ee74:	eaffffdc 	b	1edec <CDHCPClient::CheckConfig()+0xb8>
   1ee78:	eb0018cc 	bl	251b0 <CLogger::Get()>
   1ee7c:	e30f31f8 	movw	r3, #61944	; 0xf1f8
   1ee80:	e3a02002 	mov	r2, #2
   1ee84:	e3403002 	movt	r3, #2
   1ee88:	e59f1008 	ldr	r1, [pc, #8]	; 1ee98 <CDHCPClient::CheckConfig()+0x164>
   1ee8c:	eb0019a3 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ee90:	e1a00005 	mov	r0, r5
   1ee94:	eaffffe9 	b	1ee40 <CDHCPClient::CheckConfig()+0x10c>
   1ee98:	0002f130 	.word	0x0002f130

0001ee9c <CDHCPClient::GetUnaligned(void const*)>:
   1ee9c:	e92d4010 	push	{r4, lr}
   1eea0:	e2504000 	subs	r4, r0, #0
   1eea4:	0a000001 	beq	1eeb0 <CDHCPClient::GetUnaligned(void const*)+0x14>
   1eea8:	e5940000 	ldr	r0, [r4]
   1eeac:	e8bd8010 	pop	{r4, pc}
   1eeb0:	e300233f 	movw	r2, #831	; 0x33f
   1eeb4:	e30f1154 	movw	r1, #61780	; 0xf154
   1eeb8:	e30f0230 	movw	r0, #62000	; 0xf230
   1eebc:	e3401002 	movt	r1, #2
   1eec0:	e3400002 	movt	r0, #2
   1eec4:	eb001734 	bl	24b9c <assertion_failed>
   1eec8:	e5940000 	ldr	r0, [r4]
   1eecc:	e8bd8010 	pop	{r4, pc}

0001eed0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   1eed0:	e92d4070 	push	{r4, r5, r6, lr}
   1eed4:	e2514000 	subs	r4, r1, #0
   1eed8:	e1a06000 	mov	r6, r0
   1eedc:	e1a05002 	mov	r5, r2
   1eee0:	0a000080 	beq	1f0e8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x218>
   1eee4:	e0845005 	add	r5, r4, r5
   1eee8:	e2840002 	add	r0, r4, #2
   1eeec:	e1550000 	cmp	r5, r0
   1eef0:	38bd8070 	popcc	{r4, r5, r6, pc}
   1eef4:	e5d43000 	ldrb	r3, [r4]
   1eef8:	e3530034 	cmp	r3, #52	; 0x34
   1eefc:	0a000036 	beq	1efdc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x10c>
   1ef00:	8a00000d 	bhi	1ef3c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x6c>
   1ef04:	e3530003 	cmp	r3, #3
   1ef08:	0a000045 	beq	1f024 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x154>
   1ef0c:	8a00001b 	bhi	1ef80 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xb0>
   1ef10:	e3530000 	cmp	r3, #0
   1ef14:	02844001 	addeq	r4, r4, #1
   1ef18:	0afffff2 	beq	1eee8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   1ef1c:	e3530001 	cmp	r3, #1
   1ef20:	1a000029 	bne	1efcc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xfc>
   1ef24:	e5d43001 	ldrb	r3, [r4, #1]
   1ef28:	e3530004 	cmp	r3, #4
   1ef2c:	0a000066 	beq	1f0cc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1fc>
   1ef30:	e2833002 	add	r3, r3, #2
   1ef34:	e0844003 	add	r4, r4, r3
   1ef38:	eaffffea 	b	1eee8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   1ef3c:	e353003a 	cmp	r3, #58	; 0x3a
   1ef40:	0a00004c 	beq	1f078 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1a8>
   1ef44:	8a00001c 	bhi	1efbc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xec>
   1ef48:	e3530035 	cmp	r3, #53	; 0x35
   1ef4c:	0a000041 	beq	1f058 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x188>
   1ef50:	e3530036 	cmp	r3, #54	; 0x36
   1ef54:	1a00001c 	bne	1efcc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xfc>
   1ef58:	e5d43001 	ldrb	r3, [r4, #1]
   1ef5c:	e3530004 	cmp	r3, #4
   1ef60:	1afffff2 	bne	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1ef64:	e2842006 	add	r2, r4, #6
   1ef68:	e1550002 	cmp	r5, r2
   1ef6c:	3affffef 	bcc	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1ef70:	ebffffc9 	bl	1ee9c <CDHCPClient::GetUnaligned(void const*)>
   1ef74:	e58600b0 	str	r0, [r6, #176]	; 0xb0
   1ef78:	e5d43001 	ldrb	r3, [r4, #1]
   1ef7c:	eaffffeb 	b	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1ef80:	e3530006 	cmp	r3, #6
   1ef84:	0a000046 	beq	1f0a4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1d4>
   1ef88:	e3530033 	cmp	r3, #51	; 0x33
   1ef8c:	1a00000e 	bne	1efcc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xfc>
   1ef90:	e5d43001 	ldrb	r3, [r4, #1]
   1ef94:	e3530004 	cmp	r3, #4
   1ef98:	1affffe4 	bne	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1ef9c:	e2842006 	add	r2, r4, #6
   1efa0:	e1550002 	cmp	r5, r2
   1efa4:	3affffe1 	bcc	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1efa8:	ebffffbb 	bl	1ee9c <CDHCPClient::GetUnaligned(void const*)>
   1efac:	e6bf0f30 	rev	r0, r0
   1efb0:	e58600a8 	str	r0, [r6, #168]	; 0xa8
   1efb4:	e5d43001 	ldrb	r3, [r4, #1]
   1efb8:	eaffffdc 	b	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1efbc:	e353003b 	cmp	r3, #59	; 0x3b
   1efc0:	0a00000d 	beq	1effc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   1efc4:	e35300ff 	cmp	r3, #255	; 0xff
   1efc8:	08bd8070 	popeq	{r4, r5, r6, pc}
   1efcc:	e5d43001 	ldrb	r3, [r4, #1]
   1efd0:	e2833002 	add	r3, r3, #2
   1efd4:	e0844003 	add	r4, r4, r3
   1efd8:	eaffffc2 	b	1eee8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   1efdc:	e5d43001 	ldrb	r3, [r4, #1]
   1efe0:	e3530001 	cmp	r3, #1
   1efe4:	1affffd1 	bne	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1efe8:	e2842003 	add	r2, r4, #3
   1efec:	e1550002 	cmp	r5, r2
   1eff0:	25d42002 	ldrbcs	r2, [r4, #2]
   1eff4:	25c620ac 	strbcs	r2, [r6, #172]	; 0xac
   1eff8:	eaffffcc 	b	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1effc:	e5d43001 	ldrb	r3, [r4, #1]
   1f000:	e3530004 	cmp	r3, #4
   1f004:	1affffc9 	bne	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f008:	e2842006 	add	r2, r4, #6
   1f00c:	e1550002 	cmp	r5, r2
   1f010:	3affffc6 	bcc	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f014:	ebffffa0 	bl	1ee9c <CDHCPClient::GetUnaligned(void const*)>
   1f018:	e6bf0f30 	rev	r0, r0
   1f01c:	e58600b8 	str	r0, [r6, #184]	; 0xb8
   1f020:	eaffffe9 	b	1efcc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xfc>
   1f024:	e5d43001 	ldrb	r3, [r4, #1]
   1f028:	e3530003 	cmp	r3, #3
   1f02c:	daffffbf 	ble	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f030:	e2842006 	add	r2, r4, #6
   1f034:	e1550002 	cmp	r5, r2
   1f038:	3affffbc 	bcc	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f03c:	e59620a0 	ldr	r2, [r6, #160]	; 0xa0
   1f040:	e3520000 	cmp	r2, #0
   1f044:	1affffb9 	bne	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f048:	ebffff93 	bl	1ee9c <CDHCPClient::GetUnaligned(void const*)>
   1f04c:	e58600a0 	str	r0, [r6, #160]	; 0xa0
   1f050:	e5d43001 	ldrb	r3, [r4, #1]
   1f054:	eaffffb5 	b	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f058:	e5d43001 	ldrb	r3, [r4, #1]
   1f05c:	e3530001 	cmp	r3, #1
   1f060:	1affffb2 	bne	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f064:	e2842003 	add	r2, r4, #3
   1f068:	e1550002 	cmp	r5, r2
   1f06c:	25d42002 	ldrbcs	r2, [r4, #2]
   1f070:	25c620ad 	strbcs	r2, [r6, #173]	; 0xad
   1f074:	eaffffad 	b	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f078:	e5d43001 	ldrb	r3, [r4, #1]
   1f07c:	e3530004 	cmp	r3, #4
   1f080:	1affffaa 	bne	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f084:	e2842006 	add	r2, r4, #6
   1f088:	e1550002 	cmp	r5, r2
   1f08c:	3affffa7 	bcc	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f090:	ebffff81 	bl	1ee9c <CDHCPClient::GetUnaligned(void const*)>
   1f094:	e6bf0f30 	rev	r0, r0
   1f098:	e58600b4 	str	r0, [r6, #180]	; 0xb4
   1f09c:	e5d43001 	ldrb	r3, [r4, #1]
   1f0a0:	eaffffa2 	b	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0a4:	e5d43001 	ldrb	r3, [r4, #1]
   1f0a8:	e3530003 	cmp	r3, #3
   1f0ac:	daffff9f 	ble	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0b0:	e2842006 	add	r2, r4, #6
   1f0b4:	e1550002 	cmp	r5, r2
   1f0b8:	3affff9c 	bcc	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0bc:	ebffff76 	bl	1ee9c <CDHCPClient::GetUnaligned(void const*)>
   1f0c0:	e58600a4 	str	r0, [r6, #164]	; 0xa4
   1f0c4:	e5d43001 	ldrb	r3, [r4, #1]
   1f0c8:	eaffff98 	b	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0cc:	e2842006 	add	r2, r4, #6
   1f0d0:	e1550002 	cmp	r5, r2
   1f0d4:	3affff95 	bcc	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0d8:	ebffff6f 	bl	1ee9c <CDHCPClient::GetUnaligned(void const*)>
   1f0dc:	e586009c 	str	r0, [r6, #156]	; 0x9c
   1f0e0:	e5d43001 	ldrb	r3, [r4, #1]
   1f0e4:	eaffff91 	b	1ef30 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   1f0e8:	e30f1154 	movw	r1, #61780	; 0xf154
   1f0ec:	e30f0164 	movw	r0, #61796	; 0xf164
   1f0f0:	e3401002 	movt	r1, #2
   1f0f4:	e3400002 	movt	r0, #2
   1f0f8:	e3a02fa3 	mov	r2, #652	; 0x28c
   1f0fc:	eb0016a6 	bl	24b9c <assertion_failed>
   1f100:	eaffff77 	b	1eee4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14>

0001f104 <CDHCPClient::ReceiveMessage()>:
   1f104:	e92d4070 	push	{r4, r5, r6, lr}
   1f108:	e24dde23 	sub	sp, sp, #560	; 0x230
   1f10c:	e1a04000 	mov	r4, r0
   1f110:	e3a03040 	mov	r3, #64	; 0x40
   1f114:	e2800058 	add	r0, r0, #88	; 0x58
   1f118:	e3a02f89 	mov	r2, #548	; 0x224
   1f11c:	e28d100c 	add	r1, sp, #12
   1f120:	ebffdd63 	bl	166b4 <CSocket::Receive(void*, unsigned int, int)>
   1f124:	e35000ef 	cmp	r0, #239	; 0xef
   1f128:	da000002 	ble	1f138 <CDHCPClient::ReceiveMessage()+0x34>
   1f12c:	e5dd300c 	ldrb	r3, [sp, #12]
   1f130:	e3530002 	cmp	r3, #2
   1f134:	0a000003 	beq	1f148 <CDHCPClient::ReceiveMessage()+0x44>
   1f138:	e3a05000 	mov	r5, #0
   1f13c:	e1a00005 	mov	r0, r5
   1f140:	e28dde23 	add	sp, sp, #560	; 0x230
   1f144:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f148:	e5dd300d 	ldrb	r3, [sp, #13]
   1f14c:	e3530001 	cmp	r3, #1
   1f150:	1afffff8 	bne	1f138 <CDHCPClient::ReceiveMessage()+0x34>
   1f154:	e5dd300e 	ldrb	r3, [sp, #14]
   1f158:	e3530006 	cmp	r3, #6
   1f15c:	1afffff5 	bne	1f138 <CDHCPClient::ReceiveMessage()+0x34>
   1f160:	e59d2010 	ldr	r2, [sp, #16]
   1f164:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   1f168:	e1520003 	cmp	r2, r3
   1f16c:	1afffff1 	bne	1f138 <CDHCPClient::ReceiveMessage()+0x34>
   1f170:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   1f174:	e3083263 	movw	r3, #33379	; 0x8263
   1f178:	e3463353 	movt	r3, #25427	; 0x6353
   1f17c:	e1520003 	cmp	r2, r3
   1f180:	1affffec 	bne	1f138 <CDHCPClient::ReceiveMessage()+0x34>
   1f184:	e1a05000 	mov	r5, r0
   1f188:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   1f18c:	e3500000 	cmp	r0, #0
   1f190:	0a000032 	beq	1f260 <CDHCPClient::ReceiveMessage()+0x15c>
   1f194:	ebffdb9f 	bl	16018 <CNetSubSystem::GetNetDeviceLayer()>
   1f198:	ebffe6af 	bl	18c5c <CNetDeviceLayer::GetMACAddress() const>
   1f19c:	e2506000 	subs	r6, r0, #0
   1f1a0:	0a000027 	beq	1f244 <CDHCPClient::ReceiveMessage()+0x140>
   1f1a4:	e28d1028 	add	r1, sp, #40	; 0x28
   1f1a8:	e1a0000d 	mov	r0, sp
   1f1ac:	ebffd736 	bl	14e8c <CMACAddress::CMACAddress(unsigned char const*)>
   1f1b0:	e1a01006 	mov	r1, r6
   1f1b4:	e1a0000d 	mov	r0, sp
   1f1b8:	ebffd71c 	bl	14e30 <CMACAddress::operator!=(CMACAddress const&) const>
   1f1bc:	e2503000 	subs	r3, r0, #0
   1f1c0:	13a05000 	movne	r5, #0
   1f1c4:	0a000002 	beq	1f1d4 <CDHCPClient::ReceiveMessage()+0xd0>
   1f1c8:	e1a0000d 	mov	r0, sp
   1f1cc:	ebffd6f4 	bl	14da4 <CMACAddress::~CMACAddress()>
   1f1d0:	eaffffd9 	b	1f13c <CDHCPClient::ReceiveMessage()+0x38>
   1f1d4:	e59dc01c 	ldr	ip, [sp, #28]
   1f1d8:	e24520f0 	sub	r2, r5, #240	; 0xf0
   1f1dc:	e584309c 	str	r3, [r4, #156]	; 0x9c
   1f1e0:	e28d10fc 	add	r1, sp, #252	; 0xfc
   1f1e4:	e58430a0 	str	r3, [r4, #160]	; 0xa0
   1f1e8:	e1a00004 	mov	r0, r4
   1f1ec:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   1f1f0:	e58430a8 	str	r3, [r4, #168]	; 0xa8
   1f1f4:	e5c430ac 	strb	r3, [r4, #172]	; 0xac
   1f1f8:	e5c430ad 	strb	r3, [r4, #173]	; 0xad
   1f1fc:	e58430b0 	str	r3, [r4, #176]	; 0xb0
   1f200:	e58430b4 	str	r3, [r4, #180]	; 0xb4
   1f204:	e58430b8 	str	r3, [r4, #184]	; 0xb8
   1f208:	e584c098 	str	ip, [r4, #152]	; 0x98
   1f20c:	ebffff2f 	bl	1eed0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   1f210:	e5d450ac 	ldrb	r5, [r4, #172]	; 0xac
   1f214:	e3550002 	cmp	r5, #2
   1f218:	0a000022 	beq	1f2a8 <CDHCPClient::ReceiveMessage()+0x1a4>
   1f21c:	e3550003 	cmp	r5, #3
   1f220:	0a000016 	beq	1f280 <CDHCPClient::ReceiveMessage()+0x17c>
   1f224:	e3550001 	cmp	r5, #1
   1f228:	13a05001 	movne	r5, #1
   1f22c:	1affffe5 	bne	1f1c8 <CDHCPClient::ReceiveMessage()+0xc4>
   1f230:	e1a00004 	mov	r0, r4
   1f234:	e3a02080 	mov	r2, #128	; 0x80
   1f238:	e28d1078 	add	r1, sp, #120	; 0x78
   1f23c:	ebffff23 	bl	1eed0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   1f240:	eaffffe0 	b	1f1c8 <CDHCPClient::ReceiveMessage()+0xc4>
   1f244:	e30f1154 	movw	r1, #61780	; 0xf154
   1f248:	e30e085c 	movw	r0, #59484	; 0xe85c
   1f24c:	e3401002 	movt	r1, #2
   1f250:	e3400002 	movt	r0, #2
   1f254:	e3a02f97 	mov	r2, #604	; 0x25c
   1f258:	eb00164f 	bl	24b9c <assertion_failed>
   1f25c:	eaffffd0 	b	1f1a4 <CDHCPClient::ReceiveMessage()+0xa0>
   1f260:	e30f1154 	movw	r1, #61780	; 0xf154
   1f264:	e30a06e8 	movw	r0, #42728	; 0xa6e8
   1f268:	e3401002 	movt	r1, #2
   1f26c:	e3400002 	movt	r0, #2
   1f270:	e300225a 	movw	r2, #602	; 0x25a
   1f274:	eb001648 	bl	24b9c <assertion_failed>
   1f278:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   1f27c:	eaffffc4 	b	1f194 <CDHCPClient::ReceiveMessage()+0x90>
   1f280:	e28d1078 	add	r1, sp, #120	; 0x78
   1f284:	e1a00004 	mov	r0, r4
   1f288:	e3a02080 	mov	r2, #128	; 0x80
   1f28c:	e3a05001 	mov	r5, #1
   1f290:	ebffff0e 	bl	1eed0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   1f294:	e1a00004 	mov	r0, r4
   1f298:	e3a02040 	mov	r2, #64	; 0x40
   1f29c:	e28d1038 	add	r1, sp, #56	; 0x38
   1f2a0:	ebffff0a 	bl	1eed0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   1f2a4:	eaffffc7 	b	1f1c8 <CDHCPClient::ReceiveMessage()+0xc4>
   1f2a8:	e1a00004 	mov	r0, r4
   1f2ac:	e3a02040 	mov	r2, #64	; 0x40
   1f2b0:	e28d1038 	add	r1, sp, #56	; 0x38
   1f2b4:	e3a05001 	mov	r5, #1
   1f2b8:	ebffff04 	bl	1eed0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   1f2bc:	eaffffc1 	b	1f1c8 <CDHCPClient::ReceiveMessage()+0xc4>

0001f2c0 <CDHCPClient::GetXID() const>:
   1f2c0:	e92d4010 	push	{r4, lr}
   1f2c4:	e1a04000 	mov	r4, r0
   1f2c8:	e5900050 	ldr	r0, [r0, #80]	; 0x50
   1f2cc:	e3500000 	cmp	r0, #0
   1f2d0:	0a000012 	beq	1f320 <CDHCPClient::GetXID() const+0x60>
   1f2d4:	ebffdb4f 	bl	16018 <CNetSubSystem::GetNetDeviceLayer()>
   1f2d8:	ebffe65f 	bl	18c5c <CNetDeviceLayer::GetMACAddress() const>
   1f2dc:	ebffd6f8 	bl	14ec4 <CMACAddress::Get() const>
   1f2e0:	e2504000 	subs	r4, r0, #0
   1f2e4:	0a000006 	beq	1f304 <CDHCPClient::GetXID() const+0x44>
   1f2e8:	eb000e85 	bl	22d04 <CTimer::Get()>
   1f2ec:	e2840002 	add	r0, r4, #2
   1f2f0:	ebfffee9 	bl	1ee9c <CDHCPClient::GetUnaligned(void const*)>
   1f2f4:	e1a04000 	mov	r4, r0
   1f2f8:	eb000c2d 	bl	223b4 <CTimer::GetClockTicks()>
   1f2fc:	e0840000 	add	r0, r4, r0
   1f300:	e8bd8010 	pop	{r4, pc}
   1f304:	e30f1154 	movw	r1, #61780	; 0xf154
   1f308:	e30e091c 	movw	r0, #59676	; 0xe91c
   1f30c:	e3401002 	movt	r1, #2
   1f310:	e3400002 	movt	r0, #2
   1f314:	e3002337 	movw	r2, #823	; 0x337
   1f318:	eb00161f 	bl	24b9c <assertion_failed>
   1f31c:	eafffff1 	b	1f2e8 <CDHCPClient::GetXID() const+0x28>
   1f320:	e30f1154 	movw	r1, #61780	; 0xf154
   1f324:	e30a06e8 	movw	r0, #42728	; 0xa6e8
   1f328:	e3401002 	movt	r1, #2
   1f32c:	e3400002 	movt	r0, #2
   1f330:	e3002335 	movw	r2, #821	; 0x335
   1f334:	eb001618 	bl	24b9c <assertion_failed>
   1f338:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   1f33c:	eaffffe4 	b	1f2d4 <CDHCPClient::GetXID() const+0x14>

0001f340 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   1f340:	e92d4070 	push	{r4, r5, r6, lr}
   1f344:	e2505000 	subs	r5, r0, #0
   1f348:	e1a04001 	mov	r4, r1
   1f34c:	0a000007 	beq	1f370 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x30>
   1f350:	e1a02424 	lsr	r2, r4, #8
   1f354:	e1a03824 	lsr	r3, r4, #16
   1f358:	e5c54000 	strb	r4, [r5]
   1f35c:	e1a04c24 	lsr	r4, r4, #24
   1f360:	e5c52001 	strb	r2, [r5, #1]
   1f364:	e5c53002 	strb	r3, [r5, #2]
   1f368:	e5c54003 	strb	r4, [r5, #3]
   1f36c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f370:	e30f1154 	movw	r1, #61780	; 0xf154
   1f374:	e30f0230 	movw	r0, #62000	; 0xf230
   1f378:	e3401002 	movt	r1, #2
   1f37c:	e3400002 	movt	r0, #2
   1f380:	e3a02fd3 	mov	r2, #844	; 0x34c
   1f384:	eb001604 	bl	24b9c <assertion_failed>
   1f388:	eafffff0 	b	1f350 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x10>

0001f38c <CDHCPClient::SendRequest(unsigned int)>:
   1f38c:	e3510000 	cmp	r1, #0
   1f390:	e5801094 	str	r1, [r0, #148]	; 0x94
   1f394:	0a000002 	beq	1f3a4 <CDHCPClient::SendRequest(unsigned int)+0x18>
   1f398:	e3a0200c 	mov	r2, #12
   1f39c:	e59f1038 	ldr	r1, [pc, #56]	; 1f3dc <CDHCPClient::SendRequest(unsigned int)+0x50>
   1f3a0:	eafffe0b 	b	1ebd4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   1f3a4:	e92d4010 	push	{r4, lr}
   1f3a8:	e1a04000 	mov	r4, r0
   1f3ac:	e590107c 	ldr	r1, [r0, #124]	; 0x7c
   1f3b0:	e59f0028 	ldr	r0, [pc, #40]	; 1f3e0 <CDHCPClient::SendRequest(unsigned int)+0x54>
   1f3b4:	ebffffe1 	bl	1f340 <CDHCPClient::SetUnaligned(void*, unsigned int)>
   1f3b8:	e5941078 	ldr	r1, [r4, #120]	; 0x78
   1f3bc:	e59f0020 	ldr	r0, [pc, #32]	; 1f3e4 <CDHCPClient::SendRequest(unsigned int)+0x58>
   1f3c0:	ebffffde 	bl	1f340 <CDHCPClient::SetUnaligned(void*, unsigned int)>
   1f3c4:	e1a00004 	mov	r0, r4
   1f3c8:	e3011b4c 	movw	r1, #6988	; 0x1b4c
   1f3cc:	e3a02018 	mov	r2, #24
   1f3d0:	e3401003 	movt	r1, #3
   1f3d4:	e8bd4010 	pop	{r4, lr}
   1f3d8:	eafffdfd 	b	1ebd4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   1f3dc:	0002f138 	.word	0x0002f138
   1f3e0:	00031b51 	.word	0x00031b51
   1f3e4:	00031b57 	.word	0x00031b57

0001f3e8 <CDHCPClient::SendAndReceive(int, unsigned int)>:
   1f3e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3ec:	e30f9274 	movw	r9, #62068	; 0xf274
   1f3f0:	e59f817c 	ldr	r8, [pc, #380]	; 1f574 <CDHCPClient::SendAndReceive(int, unsigned int)+0x18c>
   1f3f4:	e24dd014 	sub	sp, sp, #20
   1f3f8:	e3409002 	movt	r9, #2
   1f3fc:	e1a04000 	mov	r4, r0
   1f400:	e288a010 	add	sl, r8, #16
   1f404:	e248b014 	sub	fp, r8, #20
   1f408:	e1a07001 	mov	r7, r1
   1f40c:	e58d200c 	str	r2, [sp, #12]
   1f410:	e3570000 	cmp	r7, #0
   1f414:	0a00003f 	beq	1f518 <CDHCPClient::SendAndReceive(int, unsigned int)+0x130>
   1f418:	e59d100c 	ldr	r1, [sp, #12]
   1f41c:	e1a00004 	mov	r0, r4
   1f420:	ebffffd9 	bl	1f38c <CDHCPClient::SendRequest(unsigned int)>
   1f424:	e16f0f10 	clz	r0, r0
   1f428:	e1a002a0 	lsr	r0, r0, #5
   1f42c:	e3500000 	cmp	r0, #0
   1f430:	1a000040 	bne	1f538 <CDHCPClient::SendAndReceive(int, unsigned int)+0x150>
   1f434:	eb000e32 	bl	22d04 <CTimer::Get()>
   1f438:	eb000be1 	bl	223c4 <CTimer::GetTicks() const>
   1f43c:	e4985004 	ldr	r5, [r8], #4
   1f440:	e1a06000 	mov	r6, r0
   1f444:	ea000004 	b	1f45c <CDHCPClient::SendAndReceive(int, unsigned int)+0x74>
   1f448:	e2433005 	sub	r3, r3, #5
   1f44c:	e3530001 	cmp	r3, #1
   1f450:	9a000016 	bls	1f4b0 <CDHCPClient::SendAndReceive(int, unsigned int)+0xc8>
   1f454:	eb0005a9 	bl	20b00 <CScheduler::Get()>
   1f458:	eb0004fa 	bl	20848 <CScheduler::Yield()>
   1f45c:	eb000e28 	bl	22d04 <CTimer::Get()>
   1f460:	eb000bd7 	bl	223c4 <CTimer::GetTicks() const>
   1f464:	e0403006 	sub	r3, r0, r6
   1f468:	e1a00004 	mov	r0, r4
   1f46c:	e1550003 	cmp	r5, r3
   1f470:	9a000011 	bls	1f4bc <CDHCPClient::SendAndReceive(int, unsigned int)+0xd4>
   1f474:	ebffff22 	bl	1f104 <CDHCPClient::ReceiveMessage()>
   1f478:	e3500000 	cmp	r0, #0
   1f47c:	0afffff4 	beq	1f454 <CDHCPClient::SendAndReceive(int, unsigned int)+0x6c>
   1f480:	e3570000 	cmp	r7, #0
   1f484:	e5d430ad 	ldrb	r3, [r4, #173]	; 0xad
   1f488:	1affffee 	bne	1f448 <CDHCPClient::SendAndReceive(int, unsigned int)+0x60>
   1f48c:	e3530002 	cmp	r3, #2
   1f490:	1affffef 	bne	1f454 <CDHCPClient::SendAndReceive(int, unsigned int)+0x6c>
   1f494:	e1a00004 	mov	r0, r4
   1f498:	ebfffe25 	bl	1ed34 <CDHCPClient::CheckConfig()>
   1f49c:	e3500000 	cmp	r0, #0
   1f4a0:	0affffeb 	beq	1f454 <CDHCPClient::SendAndReceive(int, unsigned int)+0x6c>
   1f4a4:	e59430b0 	ldr	r3, [r4, #176]	; 0xb0
   1f4a8:	e3530000 	cmp	r3, #0
   1f4ac:	0affffe8 	beq	1f454 <CDHCPClient::SendAndReceive(int, unsigned int)+0x6c>
   1f4b0:	e3a00001 	mov	r0, #1
   1f4b4:	e28dd014 	add	sp, sp, #20
   1f4b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4bc:	eb00173b 	bl	251b0 <CLogger::Get()>
   1f4c0:	e1a03009 	mov	r3, r9
   1f4c4:	e3a02002 	mov	r2, #2
   1f4c8:	e1a0100b 	mov	r1, fp
   1f4cc:	eb001813 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f4d0:	e15a0008 	cmp	sl, r8
   1f4d4:	1affffcd 	bne	1f410 <CDHCPClient::SendAndReceive(int, unsigned int)+0x28>
   1f4d8:	eb001734 	bl	251b0 <CLogger::Get()>
   1f4dc:	e3570000 	cmp	r7, #0
   1f4e0:	e30f1250 	movw	r1, #62032	; 0xf250
   1f4e4:	e3401002 	movt	r1, #2
   1f4e8:	e30f225c 	movw	r2, #62044	; 0xf25c
   1f4ec:	e30f3298 	movw	r3, #62104	; 0xf298
   1f4f0:	e3402002 	movt	r2, #2
   1f4f4:	e3403002 	movt	r3, #2
   1f4f8:	11a02001 	movne	r2, r1
   1f4fc:	e59f1074 	ldr	r1, [pc, #116]	; 1f578 <CDHCPClient::SendAndReceive(int, unsigned int)+0x190>
   1f500:	e58d2000 	str	r2, [sp]
   1f504:	e3a02002 	mov	r2, #2
   1f508:	eb001804 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f50c:	e3a00000 	mov	r0, #0
   1f510:	e28dd014 	add	sp, sp, #20
   1f514:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f518:	e5847094 	str	r7, [r4, #148]	; 0x94
   1f51c:	e3a0200c 	mov	r2, #12
   1f520:	e59f1054 	ldr	r1, [pc, #84]	; 1f57c <CDHCPClient::SendAndReceive(int, unsigned int)+0x194>
   1f524:	e1a00004 	mov	r0, r4
   1f528:	ebfffda9 	bl	1ebd4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   1f52c:	e16f0f10 	clz	r0, r0
   1f530:	e1a002a0 	lsr	r0, r0, #5
   1f534:	eaffffbc 	b	1f42c <CDHCPClient::SendAndReceive(int, unsigned int)+0x44>
   1f538:	eb00171c 	bl	251b0 <CLogger::Get()>
   1f53c:	e3570000 	cmp	r7, #0
   1f540:	e30f123c 	movw	r1, #62012	; 0xf23c
   1f544:	e3401002 	movt	r1, #2
   1f548:	e30f2244 	movw	r2, #62020	; 0xf244
   1f54c:	e30f3264 	movw	r3, #62052	; 0xf264
   1f550:	e3402002 	movt	r2, #2
   1f554:	e3403002 	movt	r3, #2
   1f558:	11a02001 	movne	r2, r1
   1f55c:	e59f1014 	ldr	r1, [pc, #20]	; 1f578 <CDHCPClient::SendAndReceive(int, unsigned int)+0x190>
   1f560:	e58d2000 	str	r2, [sp]
   1f564:	e3a02001 	mov	r2, #1
   1f568:	eb0017ec 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f56c:	e3a00000 	mov	r0, #0
   1f570:	eaffffe6 	b	1f510 <CDHCPClient::SendAndReceive(int, unsigned int)+0x128>
   1f574:	0002f144 	.word	0x0002f144
   1f578:	0002f130 	.word	0x0002f130
   1f57c:	0002f124 	.word	0x0002f124

0001f580 <CDHCPClient::RenewOrRebind(int, unsigned int)>:
   1f580:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f584:	e24dd010 	sub	sp, sp, #16
   1f588:	e1a05002 	mov	r5, r2
   1f58c:	e1a04000 	mov	r4, r0
   1f590:	e1a06001 	mov	r6, r1
   1f594:	eb000dda 	bl	22d04 <CTimer::Get()>
   1f598:	eb000b8b 	bl	223cc <CTimer::GetUptime() const>
   1f59c:	e5943074 	ldr	r3, [r4, #116]	; 0x74
   1f5a0:	e0400003 	sub	r0, r0, r3
   1f5a4:	e1500005 	cmp	r0, r5
   1f5a8:	23a05002 	movcs	r5, #2
   1f5ac:	3a000002 	bcc	1f5bc <CDHCPClient::RenewOrRebind(int, unsigned int)+0x3c>
   1f5b0:	e1a00005 	mov	r0, r5
   1f5b4:	e28dd010 	add	sp, sp, #16
   1f5b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f5bc:	eb0016fb 	bl	251b0 <CLogger::Get()>
   1f5c0:	e3560000 	cmp	r6, #0
   1f5c4:	0a00003e 	beq	1f6c4 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x144>
   1f5c8:	e28d8008 	add	r8, sp, #8
   1f5cc:	e59f12ec 	ldr	r1, [pc, #748]	; 1f8c0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f5d0:	e3a02004 	mov	r2, #4
   1f5d4:	e30f72ac 	movw	r7, #62124	; 0xf2ac
   1f5d8:	e30f334c 	movw	r3, #62284	; 0xf34c
   1f5dc:	e3407002 	movt	r7, #2
   1f5e0:	e3403002 	movt	r3, #2
   1f5e4:	e58d7000 	str	r7, [sp]
   1f5e8:	eb0017cc 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f5ec:	e1a00008 	mov	r0, r8
   1f5f0:	ebfff8dc 	bl	1d968 <CIPAddress::CIPAddress()>
   1f5f4:	e3a03000 	mov	r3, #0
   1f5f8:	e1a00008 	mov	r0, r8
   1f5fc:	e594107c 	ldr	r1, [r4, #124]	; 0x7c
   1f600:	e584308c 	str	r3, [r4, #140]	; 0x8c
   1f604:	ebfff96f 	bl	1dbc8 <CIPAddress::Set(unsigned int)>
   1f608:	e2846058 	add	r6, r4, #88	; 0x58
   1f60c:	e3a02043 	mov	r2, #67	; 0x43
   1f610:	e1a01008 	mov	r1, r8
   1f614:	e1a00006 	mov	r0, r6
   1f618:	ebffdb52 	bl	16368 <CSocket::Connect(CIPAddress&, unsigned short)>
   1f61c:	e3500000 	cmp	r0, #0
   1f620:	ba000037 	blt	1f704 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x184>
   1f624:	e1a00006 	mov	r0, r6
   1f628:	e594108c 	ldr	r1, [r4, #140]	; 0x8c
   1f62c:	ebffdcdf 	bl	169b0 <CSocket::SetOptionBroadcast(int)>
   1f630:	e3500000 	cmp	r0, #0
   1f634:	0a000015 	beq	1f690 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x110>
   1f638:	ea000043 	b	1f74c <CDHCPClient::RenewOrRebind(int, unsigned int)+0x1cc>
   1f63c:	ebffff1f 	bl	1f2c0 <CDHCPClient::GetXID() const>
   1f640:	e5942078 	ldr	r2, [r4, #120]	; 0x78
   1f644:	e3a01001 	mov	r1, #1
   1f648:	e5840090 	str	r0, [r4, #144]	; 0x90
   1f64c:	e1a00004 	mov	r0, r4
   1f650:	ebffff64 	bl	1f3e8 <CDHCPClient::SendAndReceive(int, unsigned int)>
   1f654:	e3500000 	cmp	r0, #0
   1f658:	1a000043 	bne	1f76c <CDHCPClient::RenewOrRebind(int, unsigned int)+0x1ec>
   1f65c:	eb000da8 	bl	22d04 <CTimer::Get()>
   1f660:	eb000b59 	bl	223cc <CTimer::GetUptime() const>
   1f664:	e5943074 	ldr	r3, [r4, #116]	; 0x74
   1f668:	e0400003 	sub	r0, r0, r3
   1f66c:	e0456000 	sub	r6, r5, r0
   1f670:	e1550000 	cmp	r5, r0
   1f674:	e1a060a6 	lsr	r6, r6, #1
   1f678:	9a00000b 	bls	1f6ac <CDHCPClient::RenewOrRebind(int, unsigned int)+0x12c>
   1f67c:	eb00051f 	bl	20b00 <CScheduler::Get()>
   1f680:	e356003c 	cmp	r6, #60	; 0x3c
   1f684:	21a01006 	movcs	r1, r6
   1f688:	33a0103c 	movcc	r1, #60	; 0x3c
   1f68c:	eb0004d6 	bl	209ec <CScheduler::Sleep(unsigned int)>
   1f690:	eb000d9b 	bl	22d04 <CTimer::Get()>
   1f694:	eb000b4c 	bl	223cc <CTimer::GetUptime() const>
   1f698:	e5943074 	ldr	r3, [r4, #116]	; 0x74
   1f69c:	e0403003 	sub	r3, r0, r3
   1f6a0:	e1a00004 	mov	r0, r4
   1f6a4:	e1550003 	cmp	r5, r3
   1f6a8:	8affffe3 	bhi	1f63c <CDHCPClient::RenewOrRebind(int, unsigned int)+0xbc>
   1f6ac:	e3a05002 	mov	r5, #2
   1f6b0:	e1a00008 	mov	r0, r8
   1f6b4:	ebfff8c4 	bl	1d9cc <CIPAddress::~CIPAddress()>
   1f6b8:	e1a00005 	mov	r0, r5
   1f6bc:	e28dd010 	add	sp, sp, #16
   1f6c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f6c4:	e28d8008 	add	r8, sp, #8
   1f6c8:	e3a02004 	mov	r2, #4
   1f6cc:	e59f11ec 	ldr	r1, [pc, #492]	; 1f8c0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f6d0:	e30f72b8 	movw	r7, #62136	; 0xf2b8
   1f6d4:	e30f334c 	movw	r3, #62284	; 0xf34c
   1f6d8:	e3407002 	movt	r7, #2
   1f6dc:	e3403002 	movt	r3, #2
   1f6e0:	e58d7000 	str	r7, [sp]
   1f6e4:	eb00178d 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f6e8:	e1a00008 	mov	r0, r8
   1f6ec:	ebfff89d 	bl	1d968 <CIPAddress::CIPAddress()>
   1f6f0:	e3a03001 	mov	r3, #1
   1f6f4:	e1a00008 	mov	r0, r8
   1f6f8:	e584308c 	str	r3, [r4, #140]	; 0x8c
   1f6fc:	ebfff95c 	bl	1dc74 <CIPAddress::SetBroadcast()>
   1f700:	eaffffc0 	b	1f608 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x88>
   1f704:	eb0016a9 	bl	251b0 <CLogger::Get()>
   1f708:	e594108c 	ldr	r1, [r4, #140]	; 0x8c
   1f70c:	e30f22c4 	movw	r2, #62148	; 0xf2c4
   1f710:	e3402002 	movt	r2, #2
   1f714:	e3510000 	cmp	r1, #0
   1f718:	e30f32cc 	movw	r3, #62156	; 0xf2cc
   1f71c:	e59f119c 	ldr	r1, [pc, #412]	; 1f8c0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f720:	e3403002 	movt	r3, #2
   1f724:	11a03002 	movne	r3, r2
   1f728:	e3a02043 	mov	r2, #67	; 0x43
   1f72c:	e58d3000 	str	r3, [sp]
   1f730:	e30f32d0 	movw	r3, #62160	; 0xf2d0
   1f734:	e58d2004 	str	r2, [sp, #4]
   1f738:	e3403002 	movt	r3, #2
   1f73c:	e3a02001 	mov	r2, #1
   1f740:	e3a05001 	mov	r5, #1
   1f744:	eb001775 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f748:	eaffffd8 	b	1f6b0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f74c:	eb001697 	bl	251b0 <CLogger::Get()>
   1f750:	e3a02001 	mov	r2, #1
   1f754:	e30f32f4 	movw	r3, #62196	; 0xf2f4
   1f758:	e59f1160 	ldr	r1, [pc, #352]	; 1f8c0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f75c:	e3403002 	movt	r3, #2
   1f760:	e1a05002 	mov	r5, r2
   1f764:	eb00176d 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f768:	eaffffd0 	b	1f6b0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f76c:	e5d430ad 	ldrb	r3, [r4, #173]	; 0xad
   1f770:	e3530006 	cmp	r3, #6
   1f774:	0a00001f 	beq	1f7f8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x278>
   1f778:	e1a00004 	mov	r0, r4
   1f77c:	ebfffd6c 	bl	1ed34 <CDHCPClient::CheckConfig()>
   1f780:	e3500000 	cmp	r0, #0
   1f784:	03a05004 	moveq	r5, #4
   1f788:	0affffc8 	beq	1f6b0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f78c:	e59430b0 	ldr	r3, [r4, #176]	; 0xb0
   1f790:	e3530000 	cmp	r3, #0
   1f794:	e584307c 	str	r3, [r4, #124]	; 0x7c
   1f798:	0a00001e 	beq	1f818 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x298>
   1f79c:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1f7a0:	e3500000 	cmp	r0, #0
   1f7a4:	0a00003d 	beq	1f8a0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x320>
   1f7a8:	ebfff812 	bl	1d7f8 <CNetConfig::GetIPAddress() const>
   1f7ac:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   1f7b0:	ebfff8f0 	bl	1db78 <CIPAddress::operator!=(unsigned int) const>
   1f7b4:	e3500000 	cmp	r0, #0
   1f7b8:	1a00001e 	bne	1f838 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x2b8>
   1f7bc:	e59410a8 	ldr	r1, [r4, #168]	; 0xa8
   1f7c0:	e3a05000 	mov	r5, #0
   1f7c4:	e59420b4 	ldr	r2, [r4, #180]	; 0xb4
   1f7c8:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
   1f7cc:	e5841080 	str	r1, [r4, #128]	; 0x80
   1f7d0:	e5842084 	str	r2, [r4, #132]	; 0x84
   1f7d4:	e5843088 	str	r3, [r4, #136]	; 0x88
   1f7d8:	eb001674 	bl	251b0 <CLogger::Get()>
   1f7dc:	e58d7000 	str	r7, [sp]
   1f7e0:	e30f337c 	movw	r3, #62332	; 0xf37c
   1f7e4:	e3a02004 	mov	r2, #4
   1f7e8:	e3403002 	movt	r3, #2
   1f7ec:	e59f10cc 	ldr	r1, [pc, #204]	; 1f8c0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f7f0:	eb00174a 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f7f4:	eaffffad 	b	1f6b0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f7f8:	eb00166c 	bl	251b0 <CLogger::Get()>
   1f7fc:	e30f3310 	movw	r3, #62224	; 0xf310
   1f800:	e3a02002 	mov	r2, #2
   1f804:	e3403002 	movt	r3, #2
   1f808:	e59f10b0 	ldr	r1, [pc, #176]	; 1f8c0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f80c:	e3a05003 	mov	r5, #3
   1f810:	eb001742 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f814:	eaffffa5 	b	1f6b0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f818:	eb001664 	bl	251b0 <CLogger::Get()>
   1f81c:	e30f332c 	movw	r3, #62252	; 0xf32c
   1f820:	e3a02002 	mov	r2, #2
   1f824:	e3403002 	movt	r3, #2
   1f828:	e59f1090 	ldr	r1, [pc, #144]	; 1f8c0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f82c:	e3a05004 	mov	r5, #4
   1f830:	eb00173a 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f834:	eaffff9d 	b	1f6b0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f838:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1f83c:	ebfff7f1 	bl	1d808 <CNetConfig::GetNetMask() const>
   1f840:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
   1f844:	e5902000 	ldr	r2, [r0]
   1f848:	e1520003 	cmp	r2, r3
   1f84c:	0affffda 	beq	1f7bc <CDHCPClient::RenewOrRebind(int, unsigned int)+0x23c>
   1f850:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1f854:	ebfff7ed 	bl	1d810 <CNetConfig::GetDefaultGateway() const>
   1f858:	e59410a0 	ldr	r1, [r4, #160]	; 0xa0
   1f85c:	ebfff8c5 	bl	1db78 <CIPAddress::operator!=(unsigned int) const>
   1f860:	e3500000 	cmp	r0, #0
   1f864:	0affffd4 	beq	1f7bc <CDHCPClient::RenewOrRebind(int, unsigned int)+0x23c>
   1f868:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1f86c:	ebfff7e9 	bl	1d818 <CNetConfig::GetDNSServer() const>
   1f870:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1f874:	ebfff8bf 	bl	1db78 <CIPAddress::operator!=(unsigned int) const>
   1f878:	e3500000 	cmp	r0, #0
   1f87c:	0affffce 	beq	1f7bc <CDHCPClient::RenewOrRebind(int, unsigned int)+0x23c>
   1f880:	eb00164a 	bl	251b0 <CLogger::Get()>
   1f884:	e30f3358 	movw	r3, #62296	; 0xf358
   1f888:	e3a02002 	mov	r2, #2
   1f88c:	e3403002 	movt	r3, #2
   1f890:	e59f1028 	ldr	r1, [pc, #40]	; 1f8c0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x340>
   1f894:	e3a05005 	mov	r5, #5
   1f898:	eb001720 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f89c:	eaffff83 	b	1f6b0 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x130>
   1f8a0:	e30f1154 	movw	r1, #61780	; 0xf154
   1f8a4:	e30e0608 	movw	r0, #58888	; 0xe608
   1f8a8:	e3401002 	movt	r1, #2
   1f8ac:	e3400002 	movt	r0, #2
   1f8b0:	e3002191 	movw	r2, #401	; 0x191
   1f8b4:	eb0014b8 	bl	24b9c <assertion_failed>
   1f8b8:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1f8bc:	eaffffb9 	b	1f7a8 <CDHCPClient::RenewOrRebind(int, unsigned int)+0x228>
   1f8c0:	0002f130 	.word	0x0002f130

0001f8c4 <CDHCPClient::SelectAndRequest()>:
   1f8c4:	e92d4070 	push	{r4, r5, r6, lr}
   1f8c8:	e24dd028 	sub	sp, sp, #40	; 0x28
   1f8cc:	e2806058 	add	r6, r0, #88	; 0x58
   1f8d0:	e1a04000 	mov	r4, r0
   1f8d4:	e3a05001 	mov	r5, #1
   1f8d8:	e580508c 	str	r5, [r0, #140]	; 0x8c
   1f8dc:	e28d0008 	add	r0, sp, #8
   1f8e0:	ebfff820 	bl	1d968 <CIPAddress::CIPAddress()>
   1f8e4:	e28d0008 	add	r0, sp, #8
   1f8e8:	ebfff8e1 	bl	1dc74 <CIPAddress::SetBroadcast()>
   1f8ec:	e1a00006 	mov	r0, r6
   1f8f0:	e28d1008 	add	r1, sp, #8
   1f8f4:	e3a02043 	mov	r2, #67	; 0x43
   1f8f8:	ebffda9a 	bl	16368 <CSocket::Connect(CIPAddress&, unsigned short)>
   1f8fc:	e3500000 	cmp	r0, #0
   1f900:	ba00001a 	blt	1f970 <CDHCPClient::SelectAndRequest()+0xac>
   1f904:	e1a00006 	mov	r0, r6
   1f908:	e1a01005 	mov	r1, r5
   1f90c:	ebffdc27 	bl	169b0 <CSocket::SetOptionBroadcast(int)>
   1f910:	e2506000 	subs	r6, r0, #0
   1f914:	1a00000e 	bne	1f954 <CDHCPClient::SelectAndRequest()+0x90>
   1f918:	e1a00004 	mov	r0, r4
   1f91c:	ebfffe67 	bl	1f2c0 <CDHCPClient::GetXID() const>
   1f920:	e1a02006 	mov	r2, r6
   1f924:	e1a01006 	mov	r1, r6
   1f928:	e5840090 	str	r0, [r4, #144]	; 0x90
   1f92c:	e1a00004 	mov	r0, r4
   1f930:	ebfffeac 	bl	1f3e8 <CDHCPClient::SendAndReceive(int, unsigned int)>
   1f934:	e3500000 	cmp	r0, #0
   1f938:	1a000015 	bne	1f994 <CDHCPClient::SelectAndRequest()+0xd0>
   1f93c:	e3a05002 	mov	r5, #2
   1f940:	e28d0008 	add	r0, sp, #8
   1f944:	ebfff820 	bl	1d9cc <CIPAddress::~CIPAddress()>
   1f948:	e1a00005 	mov	r0, r5
   1f94c:	e28dd028 	add	sp, sp, #40	; 0x28
   1f950:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f954:	eb001615 	bl	251b0 <CLogger::Get()>
   1f958:	e30f32f4 	movw	r3, #62196	; 0xf2f4
   1f95c:	e1a02005 	mov	r2, r5
   1f960:	e3403002 	movt	r3, #2
   1f964:	e59f121c 	ldr	r1, [pc, #540]	; 1fb88 <CDHCPClient::SelectAndRequest()+0x2c4>
   1f968:	eb0016ec 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f96c:	eafffff3 	b	1f940 <CDHCPClient::SelectAndRequest()+0x7c>
   1f970:	eb00160e 	bl	251b0 <CLogger::Get()>
   1f974:	e3a02043 	mov	r2, #67	; 0x43
   1f978:	e30f338c 	movw	r3, #62348	; 0xf38c
   1f97c:	e58d2000 	str	r2, [sp]
   1f980:	e3403002 	movt	r3, #2
   1f984:	e1a02005 	mov	r2, r5
   1f988:	e59f11f8 	ldr	r1, [pc, #504]	; 1fb88 <CDHCPClient::SelectAndRequest()+0x2c4>
   1f98c:	eb0016e3 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f990:	eaffffea 	b	1f940 <CDHCPClient::SelectAndRequest()+0x7c>
   1f994:	e5943098 	ldr	r3, [r4, #152]	; 0x98
   1f998:	e3530000 	cmp	r3, #0
   1f99c:	e5843078 	str	r3, [r4, #120]	; 0x78
   1f9a0:	0a00002c 	beq	1fa58 <CDHCPClient::SelectAndRequest()+0x194>
   1f9a4:	e59430b0 	ldr	r3, [r4, #176]	; 0xb0
   1f9a8:	e3530000 	cmp	r3, #0
   1f9ac:	e584307c 	str	r3, [r4, #124]	; 0x7c
   1f9b0:	0a000021 	beq	1fa3c <CDHCPClient::SelectAndRequest()+0x178>
   1f9b4:	e3a02000 	mov	r2, #0
   1f9b8:	e3a01001 	mov	r1, #1
   1f9bc:	e1a00004 	mov	r0, r4
   1f9c0:	ebfffe88 	bl	1f3e8 <CDHCPClient::SendAndReceive(int, unsigned int)>
   1f9c4:	e3500000 	cmp	r0, #0
   1f9c8:	0affffdb 	beq	1f93c <CDHCPClient::SelectAndRequest()+0x78>
   1f9cc:	e5d430ad 	ldrb	r3, [r4, #173]	; 0xad
   1f9d0:	e3530006 	cmp	r3, #6
   1f9d4:	0a000010 	beq	1fa1c <CDHCPClient::SelectAndRequest()+0x158>
   1f9d8:	e1a00004 	mov	r0, r4
   1f9dc:	ebfffcd4 	bl	1ed34 <CDHCPClient::CheckConfig()>
   1f9e0:	e3500000 	cmp	r0, #0
   1f9e4:	03a05004 	moveq	r5, #4
   1f9e8:	0affffd4 	beq	1f940 <CDHCPClient::SelectAndRequest()+0x7c>
   1f9ec:	e5942078 	ldr	r2, [r4, #120]	; 0x78
   1f9f0:	e5943098 	ldr	r3, [r4, #152]	; 0x98
   1f9f4:	e1520003 	cmp	r2, r3
   1f9f8:	0a00001d 	beq	1fa74 <CDHCPClient::SelectAndRequest()+0x1b0>
   1f9fc:	eb0015eb 	bl	251b0 <CLogger::Get()>
   1fa00:	e30f33e4 	movw	r3, #62436	; 0xf3e4
   1fa04:	e3a02002 	mov	r2, #2
   1fa08:	e3403002 	movt	r3, #2
   1fa0c:	e59f1174 	ldr	r1, [pc, #372]	; 1fb88 <CDHCPClient::SelectAndRequest()+0x2c4>
   1fa10:	e3a05005 	mov	r5, #5
   1fa14:	eb0016c1 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fa18:	eaffffc8 	b	1f940 <CDHCPClient::SelectAndRequest()+0x7c>
   1fa1c:	eb0015e3 	bl	251b0 <CLogger::Get()>
   1fa20:	e30f3310 	movw	r3, #62224	; 0xf310
   1fa24:	e3a02002 	mov	r2, #2
   1fa28:	e3403002 	movt	r3, #2
   1fa2c:	e59f1154 	ldr	r1, [pc, #340]	; 1fb88 <CDHCPClient::SelectAndRequest()+0x2c4>
   1fa30:	e3a05003 	mov	r5, #3
   1fa34:	eb0016b9 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fa38:	eaffffc0 	b	1f940 <CDHCPClient::SelectAndRequest()+0x7c>
   1fa3c:	e30f1154 	movw	r1, #61780	; 0xf154
   1fa40:	e30f03c8 	movw	r0, #62408	; 0xf3c8
   1fa44:	e3401002 	movt	r1, #2
   1fa48:	e3400002 	movt	r0, #2
   1fa4c:	e3a020f8 	mov	r2, #248	; 0xf8
   1fa50:	eb001451 	bl	24b9c <assertion_failed>
   1fa54:	eaffffd6 	b	1f9b4 <CDHCPClient::SelectAndRequest()+0xf0>
   1fa58:	e30f1154 	movw	r1, #61780	; 0xf154
   1fa5c:	e30f03b0 	movw	r0, #62384	; 0xf3b0
   1fa60:	e3401002 	movt	r1, #2
   1fa64:	e3400002 	movt	r0, #2
   1fa68:	e3a020f5 	mov	r2, #245	; 0xf5
   1fa6c:	eb00144a 	bl	24b9c <assertion_failed>
   1fa70:	eaffffcb 	b	1f9a4 <CDHCPClient::SelectAndRequest()+0xe0>
   1fa74:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
   1fa78:	e59430b0 	ldr	r3, [r4, #176]	; 0xb0
   1fa7c:	e1520003 	cmp	r2, r3
   1fa80:	0a000007 	beq	1faa4 <CDHCPClient::SelectAndRequest()+0x1e0>
   1fa84:	eb0015c9 	bl	251b0 <CLogger::Get()>
   1fa88:	e30f33fc 	movw	r3, #62460	; 0xf3fc
   1fa8c:	e3a02002 	mov	r2, #2
   1fa90:	e3403002 	movt	r3, #2
   1fa94:	e59f10ec 	ldr	r1, [pc, #236]	; 1fb88 <CDHCPClient::SelectAndRequest()+0x2c4>
   1fa98:	e3a05005 	mov	r5, #5
   1fa9c:	eb00169f 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1faa0:	eaffffa6 	b	1f940 <CDHCPClient::SelectAndRequest()+0x7c>
   1faa4:	e28d0010 	add	r0, sp, #16
   1faa8:	ebfff7ae 	bl	1d968 <CIPAddress::CIPAddress()>
   1faac:	e5941078 	ldr	r1, [r4, #120]	; 0x78
   1fab0:	e28d0010 	add	r0, sp, #16
   1fab4:	ebfff843 	bl	1dbc8 <CIPAddress::Set(unsigned int)>
   1fab8:	e28d0018 	add	r0, sp, #24
   1fabc:	eb001942 	bl	25fcc <CString::CString()>
   1fac0:	e28d1018 	add	r1, sp, #24
   1fac4:	e28d0010 	add	r0, sp, #16
   1fac8:	ebfff8c4 	bl	1dde0 <CIPAddress::Format(CString*) const>
   1facc:	eb0015b7 	bl	251b0 <CLogger::Get()>
   1fad0:	e1a05000 	mov	r5, r0
   1fad4:	e28d0018 	add	r0, sp, #24
   1fad8:	eb001952 	bl	26028 <CString::operator char const*() const>
   1fadc:	e30f341c 	movw	r3, #62492	; 0xf41c
   1fae0:	e3a02003 	mov	r2, #3
   1fae4:	e3403002 	movt	r3, #2
   1fae8:	e59f1098 	ldr	r1, [pc, #152]	; 1fb88 <CDHCPClient::SelectAndRequest()+0x2c4>
   1faec:	e58d0000 	str	r0, [sp]
   1faf0:	e1a00005 	mov	r0, r5
   1faf4:	eb001689 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1faf8:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   1fafc:	e3530000 	cmp	r3, #0
   1fb00:	0a000019 	beq	1fb6c <CDHCPClient::SelectAndRequest()+0x2a8>
   1fb04:	e5941078 	ldr	r1, [r4, #120]	; 0x78
   1fb08:	e3a05000 	mov	r5, #0
   1fb0c:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1fb10:	ebfff778 	bl	1d8f8 <CNetConfig::SetIPAddress(unsigned int)>
   1fb14:	e594109c 	ldr	r1, [r4, #156]	; 0x9c
   1fb18:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1fb1c:	ebfff77c 	bl	1d914 <CNetConfig::SetNetMask(unsigned int)>
   1fb20:	e59410a0 	ldr	r1, [r4, #160]	; 0xa0
   1fb24:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1fb28:	ebfff72a 	bl	1d7d8 <CNetConfig::SetDefaultGateway(unsigned int)>
   1fb2c:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1fb30:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   1fb34:	ebfff729 	bl	1d7e0 <CNetConfig::SetDNSServer(unsigned int)>
   1fb38:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1fb3c:	e59410b4 	ldr	r1, [r4, #180]	; 0xb4
   1fb40:	e28d0018 	add	r0, sp, #24
   1fb44:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
   1fb48:	e5843080 	str	r3, [r4, #128]	; 0x80
   1fb4c:	e3a03001 	mov	r3, #1
   1fb50:	e5841084 	str	r1, [r4, #132]	; 0x84
   1fb54:	e5842088 	str	r2, [r4, #136]	; 0x88
   1fb58:	e5843070 	str	r3, [r4, #112]	; 0x70
   1fb5c:	eb0018e7 	bl	25f00 <CString::~CString()>
   1fb60:	e28d0010 	add	r0, sp, #16
   1fb64:	ebfff798 	bl	1d9cc <CIPAddress::~CIPAddress()>
   1fb68:	eaffff74 	b	1f940 <CDHCPClient::SelectAndRequest()+0x7c>
   1fb6c:	e30f1154 	movw	r1, #61780	; 0xf154
   1fb70:	e30e0608 	movw	r0, #58888	; 0xe608
   1fb74:	e3401002 	movt	r1, #2
   1fb78:	e3400002 	movt	r0, #2
   1fb7c:	e3002122 	movw	r2, #290	; 0x122
   1fb80:	eb001405 	bl	24b9c <assertion_failed>
   1fb84:	eaffffde 	b	1fb04 <CDHCPClient::SelectAndRequest()+0x240>
   1fb88:	0002f130 	.word	0x0002f130

0001fb8c <CDHCPClient::Run()>:
   1fb8c:	e92d4030 	push	{r4, r5, lr}
   1fb90:	e2804058 	add	r4, r0, #88	; 0x58
   1fb94:	e24ddf8d 	sub	sp, sp, #564	; 0x234
   1fb98:	e1a05000 	mov	r5, r0
   1fb9c:	e3a01044 	mov	r1, #68	; 0x44
   1fba0:	e1a00004 	mov	r0, r4
   1fba4:	ebffd9d7 	bl	16308 <CSocket::Bind(unsigned short)>
   1fba8:	e3500000 	cmp	r0, #0
   1fbac:	ba00004a 	blt	1fcdc <CDHCPClient::Run()+0x150>
   1fbb0:	e1a00005 	mov	r0, r5
   1fbb4:	ebffff42 	bl	1f8c4 <CDHCPClient::SelectAndRequest()>
   1fbb8:	e3500001 	cmp	r0, #1
   1fbbc:	0a000009 	beq	1fbe8 <CDHCPClient::Run()+0x5c>
   1fbc0:	3a00000a 	bcc	1fbf0 <CDHCPClient::Run()+0x64>
   1fbc4:	e3500005 	cmp	r0, #5
   1fbc8:	8a000008 	bhi	1fbf0 <CDHCPClient::Run()+0x64>
   1fbcc:	eb0003cb 	bl	20b00 <CScheduler::Get()>
   1fbd0:	e3a0103c 	mov	r1, #60	; 0x3c
   1fbd4:	eb000384 	bl	209ec <CScheduler::Sleep(unsigned int)>
   1fbd8:	e1a00005 	mov	r0, r5
   1fbdc:	ebffff38 	bl	1f8c4 <CDHCPClient::SelectAndRequest()>
   1fbe0:	e3500001 	cmp	r0, #1
   1fbe4:	1afffff5 	bne	1fbc0 <CDHCPClient::Run()+0x34>
   1fbe8:	e28ddf8d 	add	sp, sp, #564	; 0x234
   1fbec:	e8bd8030 	pop	{r4, r5, pc}
   1fbf0:	eb000c43 	bl	22d04 <CTimer::Get()>
   1fbf4:	eb0009f4 	bl	223cc <CTimer::GetUptime() const>
   1fbf8:	e5850074 	str	r0, [r5, #116]	; 0x74
   1fbfc:	eb000c40 	bl	22d04 <CTimer::Get()>
   1fc00:	eb0009f1 	bl	223cc <CTimer::GetUptime() const>
   1fc04:	e5953074 	ldr	r3, [r5, #116]	; 0x74
   1fc08:	e5952084 	ldr	r2, [r5, #132]	; 0x84
   1fc0c:	e0400003 	sub	r0, r0, r3
   1fc10:	e1500002 	cmp	r0, r2
   1fc14:	3a000002 	bcc	1fc24 <CDHCPClient::Run()+0x98>
   1fc18:	ea00000c 	b	1fc50 <CDHCPClient::Run()+0xc4>
   1fc1c:	eb0003b7 	bl	20b00 <CScheduler::Get()>
   1fc20:	eb000308 	bl	20848 <CScheduler::Yield()>
   1fc24:	e3a03040 	mov	r3, #64	; 0x40
   1fc28:	e3a02f89 	mov	r2, #548	; 0x224
   1fc2c:	e28d100c 	add	r1, sp, #12
   1fc30:	e1a00004 	mov	r0, r4
   1fc34:	ebffda9e 	bl	166b4 <CSocket::Receive(void*, unsigned int, int)>
   1fc38:	e3500000 	cmp	r0, #0
   1fc3c:	cafffff6 	bgt	1fc1c <CDHCPClient::Run()+0x90>
   1fc40:	eb0003ae 	bl	20b00 <CScheduler::Get()>
   1fc44:	e3a0100a 	mov	r1, #10
   1fc48:	eb000367 	bl	209ec <CScheduler::Sleep(unsigned int)>
   1fc4c:	eaffffea 	b	1fbfc <CDHCPClient::Run()+0x70>
   1fc50:	e5952088 	ldr	r2, [r5, #136]	; 0x88
   1fc54:	e3a01001 	mov	r1, #1
   1fc58:	e1a00005 	mov	r0, r5
   1fc5c:	ebfffe47 	bl	1f580 <CDHCPClient::RenewOrRebind(int, unsigned int)>
   1fc60:	e3500005 	cmp	r0, #5
   1fc64:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   1fc68:	ea00000e 	b	1fca8 <CDHCPClient::Run()+0x11c>
   1fc6c:	0001fbf0 	.word	0x0001fbf0
   1fc70:	0001fbe8 	.word	0x0001fbe8
   1fc74:	0001fca8 	.word	0x0001fca8
   1fc78:	0001fc9c 	.word	0x0001fc9c
   1fc7c:	0001fc9c 	.word	0x0001fc9c
   1fc80:	0001fc9c 	.word	0x0001fc9c
   1fc84:	eb001549 	bl	251b0 <CLogger::Get()>
   1fc88:	e30f3448 	movw	r3, #62536	; 0xf448
   1fc8c:	e3a02001 	mov	r2, #1
   1fc90:	e3403002 	movt	r3, #2
   1fc94:	e59f1068 	ldr	r1, [pc, #104]	; 1fd04 <CDHCPClient::Run()+0x178>
   1fc98:	eb001620 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fc9c:	e1a00005 	mov	r0, r5
   1fca0:	ebfffbb8 	bl	1eb88 <CDHCPClient::HaltNetwork()>
   1fca4:	eaffffc1 	b	1fbb0 <CDHCPClient::Run()+0x24>
   1fca8:	e5952080 	ldr	r2, [r5, #128]	; 0x80
   1fcac:	e3a01000 	mov	r1, #0
   1fcb0:	e1a00005 	mov	r0, r5
   1fcb4:	ebfffe31 	bl	1f580 <CDHCPClient::RenewOrRebind(int, unsigned int)>
   1fcb8:	e3500005 	cmp	r0, #5
   1fcbc:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   1fcc0:	eaffffef 	b	1fc84 <CDHCPClient::Run()+0xf8>
   1fcc4:	0001fbf0 	.word	0x0001fbf0
   1fcc8:	0001fbe8 	.word	0x0001fbe8
   1fccc:	0001fc84 	.word	0x0001fc84
   1fcd0:	0001fc9c 	.word	0x0001fc9c
   1fcd4:	0001fc9c 	.word	0x0001fc9c
   1fcd8:	0001fc9c 	.word	0x0001fc9c
   1fcdc:	eb001533 	bl	251b0 <CLogger::Get()>
   1fce0:	e3a02044 	mov	r2, #68	; 0x44
   1fce4:	e59f1018 	ldr	r1, [pc, #24]	; 1fd04 <CDHCPClient::Run()+0x178>
   1fce8:	e30f3430 	movw	r3, #62512	; 0xf430
   1fcec:	e58d2000 	str	r2, [sp]
   1fcf0:	e3403002 	movt	r3, #2
   1fcf4:	e3a02001 	mov	r2, #1
   1fcf8:	eb001608 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fcfc:	e28ddf8d 	add	sp, sp, #564	; 0x234
   1fd00:	e8bd8030 	pop	{r4, r5, pc}
   1fd04:	0002f130 	.word	0x0002f130

0001fd08 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   1fd08:	e92d4010 	push	{r4, lr}
   1fd0c:	e1a04000 	mov	r4, r0
   1fd10:	e4801004 	str	r1, [r0], #4
   1fd14:	e1a01002 	mov	r1, r2
   1fd18:	eb0018b2 	bl	25fe8 <CString::CString(char const*)>
   1fd1c:	e3a03000 	mov	r3, #0
   1fd20:	e1a00004 	mov	r0, r4
   1fd24:	e5843014 	str	r3, [r4, #20]
   1fd28:	e5843018 	str	r3, [r4, #24]
   1fd2c:	e584301c 	str	r3, [r4, #28]
   1fd30:	e5843020 	str	r3, [r4, #32]
   1fd34:	e8bd8010 	pop	{r4, pc}

0001fd38 <CPartitionManager::~CPartitionManager()>:
   1fd38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1fd3c:	e2804014 	add	r4, r0, #20
   1fd40:	e2807024 	add	r7, r0, #36	; 0x24
   1fd44:	e1a06000 	mov	r6, r0
   1fd48:	e3a05000 	mov	r5, #0
   1fd4c:	e5943000 	ldr	r3, [r4]
   1fd50:	e3530000 	cmp	r3, #0
   1fd54:	e1a00003 	mov	r0, r3
   1fd58:	0a000002 	beq	1fd68 <CPartitionManager::~CPartitionManager()+0x30>
   1fd5c:	e5933000 	ldr	r3, [r3]
   1fd60:	e5933004 	ldr	r3, [r3, #4]
   1fd64:	e12fff33 	blx	r3
   1fd68:	e4845004 	str	r5, [r4], #4
   1fd6c:	e1540007 	cmp	r4, r7
   1fd70:	1afffff5 	bne	1fd4c <CPartitionManager::~CPartitionManager()+0x14>
   1fd74:	e1a00006 	mov	r0, r6
   1fd78:	e4805004 	str	r5, [r0], #4
   1fd7c:	eb00185f 	bl	25f00 <CString::~CString()>
   1fd80:	e1a00006 	mov	r0, r6
   1fd84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001fd88 <CPartitionManager::Initialize()>:
   1fd88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd8c:	e1a07000 	mov	r7, r0
   1fd90:	e5900000 	ldr	r0, [r0]
   1fd94:	e3a03000 	mov	r3, #0
   1fd98:	e24ddf89 	sub	sp, sp, #548	; 0x224
   1fd9c:	e3a02000 	mov	r2, #0
   1fda0:	e5901000 	ldr	r1, [r0]
   1fda4:	e5911010 	ldr	r1, [r1, #16]
   1fda8:	e12fff31 	blx	r1
   1fdac:	e1903001 	orrs	r3, r0, r1
   1fdb0:	0a000009 	beq	1fddc <CPartitionManager::Initialize()+0x54>
   1fdb4:	eb0014fd 	bl	251b0 <CLogger::Get()>
   1fdb8:	e30f34d0 	movw	r3, #62672	; 0xf4d0
   1fdbc:	e30f1458 	movw	r1, #62552	; 0xf458
   1fdc0:	e3403002 	movt	r3, #2
   1fdc4:	e3401002 	movt	r1, #2
   1fdc8:	e3a02001 	mov	r2, #1
   1fdcc:	eb0015d3 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fdd0:	e3a00000 	mov	r0, #0
   1fdd4:	e28ddf89 	add	sp, sp, #548	; 0x224
   1fdd8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fddc:	e5970000 	ldr	r0, [r7]
   1fde0:	e3a02c02 	mov	r2, #512	; 0x200
   1fde4:	e28d1020 	add	r1, sp, #32
   1fde8:	e5903000 	ldr	r3, [r0]
   1fdec:	e5933008 	ldr	r3, [r3, #8]
   1fdf0:	e12fff33 	blx	r3
   1fdf4:	e3500c02 	cmp	r0, #512	; 0x200
   1fdf8:	1affffed 	bne	1fdb4 <CPartitionManager::Initialize()+0x2c>
   1fdfc:	e28d3f87 	add	r3, sp, #540	; 0x21c
   1fe00:	e2833002 	add	r3, r3, #2
   1fe04:	e1d320b0 	ldrh	r2, [r3]
   1fe08:	e30a3a55 	movw	r3, #43605	; 0xaa55
   1fe0c:	e1520003 	cmp	r2, r3
   1fe10:	1a00005c 	bne	1ff88 <CPartitionManager::Initialize()+0x200>
   1fe14:	e3a04000 	mov	r4, #0
   1fe18:	e30fa4a4 	movw	sl, #62628	; 0xf4a4
   1fe1c:	e30f9474 	movw	r9, #62580	; 0xf474
   1fe20:	e340a002 	movt	sl, #2
   1fe24:	e3409002 	movt	r9, #2
   1fe28:	e2876014 	add	r6, r7, #20
   1fe2c:	e28d5020 	add	r5, sp, #32
   1fe30:	e1a0b004 	mov	fp, r4
   1fe34:	e30f848c 	movw	r8, #62604	; 0xf48c
   1fe38:	e3408002 	movt	r8, #2
   1fe3c:	e58d8004 	str	r8, [sp, #4]
   1fe40:	e5d511c2 	ldrb	r1, [r5, #450]	; 0x1c2
   1fe44:	e3083021 	movw	r3, #32801	; 0x8021
   1fe48:	e3a02000 	mov	r2, #0
   1fe4c:	e2855010 	add	r5, r5, #16
   1fe50:	e351000f 	cmp	r1, #15
   1fe54:	e1e03133 	mvn	r3, r3, lsr r1
   1fe58:	e2033001 	and	r3, r3, #1
   1fe5c:	92232001 	eorls	r2, r3, #1
   1fe60:	e284301c 	add	r3, r4, #28
   1fe64:	e35100ef 	cmp	r1, #239	; 0xef
   1fe68:	03822001 	orreq	r2, r2, #1
   1fe6c:	e2844001 	add	r4, r4, #1
   1fe70:	e3520000 	cmp	r2, #0
   1fe74:	e28d2e22 	add	r2, sp, #544	; 0x220
   1fe78:	e0822203 	add	r2, r2, r3, lsl #4
   1fe7c:	1a000031 	bne	1ff48 <CPartitionManager::Initialize()+0x1c0>
   1fe80:	e51211fa 	ldr	r1, [r2, #-506]	; 0xfffffe06
   1fe84:	e3510000 	cmp	r1, #0
   1fe88:	0a00002e 	beq	1ff48 <CPartitionManager::Initialize()+0x1c0>
   1fe8c:	e51221f6 	ldr	r2, [r2, #-502]	; 0xfffffe0a
   1fe90:	e1a08007 	mov	r8, r7
   1fe94:	e3520000 	cmp	r2, #0
   1fe98:	0a00002a 	beq	1ff48 <CPartitionManager::Initialize()+0x1c0>
   1fe9c:	e596c000 	ldr	ip, [r6]
   1fea0:	e28bb001 	add	fp, fp, #1
   1fea4:	e3a02070 	mov	r2, #112	; 0x70
   1fea8:	e1a01009 	mov	r1, r9
   1feac:	e35c0000 	cmp	ip, #0
   1feb0:	e59d0004 	ldr	r0, [sp, #4]
   1feb4:	0a000002 	beq	1fec4 <CPartitionManager::Initialize()+0x13c>
   1feb8:	e58d3008 	str	r3, [sp, #8]
   1febc:	eb001336 	bl	24b9c <assertion_failed>
   1fec0:	e59d3008 	ldr	r3, [sp, #8]
   1fec4:	e3a00020 	mov	r0, #32
   1fec8:	e58d300c 	str	r3, [sp, #12]
   1fecc:	eb000826 	bl	21f6c <operator new(unsigned int)>
   1fed0:	e59d300c 	ldr	r3, [sp, #12]
   1fed4:	e28d2e22 	add	r2, sp, #544	; 0x220
   1fed8:	e4981004 	ldr	r1, [r8], #4
   1fedc:	e0822203 	add	r2, r2, r3, lsl #4
   1fee0:	e58d0008 	str	r0, [sp, #8]
   1fee4:	e51231f6 	ldr	r3, [r2, #-502]	; 0xfffffe0a
   1fee8:	e51221fa 	ldr	r2, [r2, #-506]	; 0xfffffe06
   1feec:	eb0000d4 	bl	20244 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   1fef0:	e59d3008 	ldr	r3, [sp, #8]
   1fef4:	e28d0010 	add	r0, sp, #16
   1fef8:	e5863000 	str	r3, [r6]
   1fefc:	eb001832 	bl	25fcc <CString::CString()>
   1ff00:	e1a00008 	mov	r0, r8
   1ff04:	eb001847 	bl	26028 <CString::operator char const*() const>
   1ff08:	e1a0300b 	mov	r3, fp
   1ff0c:	e1a0100a 	mov	r1, sl
   1ff10:	e1a02000 	mov	r2, r0
   1ff14:	e28d0010 	add	r0, sp, #16
   1ff18:	eb001b8a 	bl	26d48 <CString::Format(char const*, ...)>
   1ff1c:	eb001476 	bl	250fc <CDeviceNameService::Get()>
   1ff20:	e1a08000 	mov	r8, r0
   1ff24:	e28d0010 	add	r0, sp, #16
   1ff28:	eb00183e 	bl	26028 <CString::operator char const*() const>
   1ff2c:	e3a03001 	mov	r3, #1
   1ff30:	e5962000 	ldr	r2, [r6]
   1ff34:	e1a01000 	mov	r1, r0
   1ff38:	e1a00008 	mov	r0, r8
   1ff3c:	eb0013fa 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   1ff40:	e28d0010 	add	r0, sp, #16
   1ff44:	eb0017ed 	bl	25f00 <CString::~CString()>
   1ff48:	e3540004 	cmp	r4, #4
   1ff4c:	e2866004 	add	r6, r6, #4
   1ff50:	1affffba 	bne	1fe40 <CPartitionManager::Initialize()+0xb8>
   1ff54:	e35b0000 	cmp	fp, #0
   1ff58:	13a00001 	movne	r0, #1
   1ff5c:	1affff9c 	bne	1fdd4 <CPartitionManager::Initialize()+0x4c>
   1ff60:	eb001492 	bl	251b0 <CLogger::Get()>
   1ff64:	e3a02002 	mov	r2, #2
   1ff68:	e30f34ac 	movw	r3, #62636	; 0xf4ac
   1ff6c:	e30f1458 	movw	r1, #62552	; 0xf458
   1ff70:	e3403002 	movt	r3, #2
   1ff74:	e3401002 	movt	r1, #2
   1ff78:	eb001568 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ff7c:	e3a00001 	mov	r0, #1
   1ff80:	e28ddf89 	add	sp, sp, #548	; 0x224
   1ff84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff88:	eb001488 	bl	251b0 <CLogger::Get()>
   1ff8c:	e3a02002 	mov	r2, #2
   1ff90:	e30f3460 	movw	r3, #62560	; 0xf460
   1ff94:	e30f1458 	movw	r1, #62552	; 0xf458
   1ff98:	e3403002 	movt	r3, #2
   1ff9c:	e3401002 	movt	r1, #2
   1ffa0:	eb00155e 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ffa4:	e3a00001 	mov	r0, #1
   1ffa8:	e28ddf89 	add	sp, sp, #548	; 0x224
   1ffac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ffb0 <CPartition::Read(void*, unsigned int)>:
   1ffb0:	e5903018 	ldr	r3, [r0, #24]
   1ffb4:	e3530000 	cmp	r3, #0
   1ffb8:	1a000026 	bne	20058 <CPartition::Read(void*, unsigned int)+0xa8>
   1ffbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ffc0:	e30041ff 	movw	r4, #511	; 0x1ff
   1ffc4:	e1c061d0 	ldrd	r6, [r0, #16]
   1ffc8:	e0944002 	adds	r4, r4, r2
   1ffcc:	e3a05000 	mov	r5, #0
   1ffd0:	e2a55000 	adc	r5, r5, #0
   1ffd4:	e0944006 	adds	r4, r4, r6
   1ffd8:	e590300c 	ldr	r3, [r0, #12]
   1ffdc:	e0a55007 	adc	r5, r5, r7
   1ffe0:	e3a07000 	mov	r7, #0
   1ffe4:	e1a044a4 	lsr	r4, r4, #9
   1ffe8:	e1844b85 	orr	r4, r4, r5, lsl #23
   1ffec:	e1a054a5 	lsr	r5, r5, #9
   1fff0:	e1550007 	cmp	r5, r7
   1fff4:	e1a06003 	mov	r6, r3
   1fff8:	01540003 	cmpeq	r4, r3
   1fffc:	8a00000b 	bhi	20030 <CPartition::Read(void*, unsigned int)+0x80>
   20000:	e1a04000 	mov	r4, r0
   20004:	e5900004 	ldr	r0, [r0, #4]
   20008:	e1a05002 	mov	r5, r2
   2000c:	e1a06001 	mov	r6, r1
   20010:	e3500000 	cmp	r0, #0
   20014:	0a000007 	beq	20038 <CPartition::Read(void*, unsigned int)+0x88>
   20018:	e5903000 	ldr	r3, [r0]
   2001c:	e1a02005 	mov	r2, r5
   20020:	e1a01006 	mov	r1, r6
   20024:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   20028:	e5933008 	ldr	r3, [r3, #8]
   2002c:	e12fff13 	bx	r3
   20030:	e3e00000 	mvn	r0, #0
   20034:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20038:	e30f14fc 	movw	r1, #62716	; 0xf4fc
   2003c:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   20040:	e3401002 	movt	r1, #2
   20044:	e3400002 	movt	r0, #2
   20048:	e3a02035 	mov	r2, #53	; 0x35
   2004c:	eb0012d2 	bl	24b9c <assertion_failed>
   20050:	e5940004 	ldr	r0, [r4, #4]
   20054:	eaffffef 	b	20018 <CPartition::Read(void*, unsigned int)+0x68>
   20058:	e3e00000 	mvn	r0, #0
   2005c:	e12fff1e 	bx	lr

00020060 <CPartition::Write(void const*, unsigned int)>:
   20060:	e5903018 	ldr	r3, [r0, #24]
   20064:	e3530000 	cmp	r3, #0
   20068:	1a000026 	bne	20108 <CPartition::Write(void const*, unsigned int)+0xa8>
   2006c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20070:	e30041ff 	movw	r4, #511	; 0x1ff
   20074:	e1c061d0 	ldrd	r6, [r0, #16]
   20078:	e0944002 	adds	r4, r4, r2
   2007c:	e3a05000 	mov	r5, #0
   20080:	e2a55000 	adc	r5, r5, #0
   20084:	e0944006 	adds	r4, r4, r6
   20088:	e590300c 	ldr	r3, [r0, #12]
   2008c:	e0a55007 	adc	r5, r5, r7
   20090:	e3a07000 	mov	r7, #0
   20094:	e1a044a4 	lsr	r4, r4, #9
   20098:	e1844b85 	orr	r4, r4, r5, lsl #23
   2009c:	e1a054a5 	lsr	r5, r5, #9
   200a0:	e1550007 	cmp	r5, r7
   200a4:	e1a06003 	mov	r6, r3
   200a8:	01540003 	cmpeq	r4, r3
   200ac:	8a00000b 	bhi	200e0 <CPartition::Write(void const*, unsigned int)+0x80>
   200b0:	e1a04000 	mov	r4, r0
   200b4:	e5900004 	ldr	r0, [r0, #4]
   200b8:	e1a05002 	mov	r5, r2
   200bc:	e1a06001 	mov	r6, r1
   200c0:	e3500000 	cmp	r0, #0
   200c4:	0a000007 	beq	200e8 <CPartition::Write(void const*, unsigned int)+0x88>
   200c8:	e5903000 	ldr	r3, [r0]
   200cc:	e1a02005 	mov	r2, r5
   200d0:	e1a01006 	mov	r1, r6
   200d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   200d8:	e593300c 	ldr	r3, [r3, #12]
   200dc:	e12fff13 	bx	r3
   200e0:	e3e00000 	mvn	r0, #0
   200e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   200e8:	e30f14fc 	movw	r1, #62716	; 0xf4fc
   200ec:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   200f0:	e3401002 	movt	r1, #2
   200f4:	e3400002 	movt	r0, #2
   200f8:	e3a02047 	mov	r2, #71	; 0x47
   200fc:	eb0012a6 	bl	24b9c <assertion_failed>
   20100:	e5940004 	ldr	r0, [r4, #4]
   20104:	eaffffef 	b	200c8 <CPartition::Write(void const*, unsigned int)+0x68>
   20108:	e3e00000 	mvn	r0, #0
   2010c:	e12fff1e 	bx	lr

00020110 <CPartition::~CPartition()>:
   20110:	e59f301c 	ldr	r3, [pc, #28]	; 20134 <CPartition::~CPartition()+0x24>
   20114:	e3a02000 	mov	r2, #0
   20118:	e92d4010 	push	{r4, lr}
   2011c:	e1a04000 	mov	r4, r0
   20120:	e5802004 	str	r2, [r0, #4]
   20124:	e5803000 	str	r3, [r0]
   20128:	eb000c32 	bl	231f8 <CDevice::~CDevice()>
   2012c:	e1a00004 	mov	r0, r4
   20130:	e8bd8010 	pop	{r4, pc}
   20134:	0002f4e8 	.word	0x0002f4e8

00020138 <CPartition::~CPartition()>:
   20138:	e59f3028 	ldr	r3, [pc, #40]	; 20168 <CPartition::~CPartition()+0x30>
   2013c:	e3a02000 	mov	r2, #0
   20140:	e92d4010 	push	{r4, lr}
   20144:	e1a04000 	mov	r4, r0
   20148:	e5802004 	str	r2, [r0, #4]
   2014c:	e5803000 	str	r3, [r0]
   20150:	eb000c28 	bl	231f8 <CDevice::~CDevice()>
   20154:	e1a00004 	mov	r0, r4
   20158:	e3a01020 	mov	r1, #32
   2015c:	eb000786 	bl	21f7c <operator delete(void*, unsigned int)>
   20160:	e1a00004 	mov	r0, r4
   20164:	e8bd8010 	pop	{r4, pc}
   20168:	0002f4e8 	.word	0x0002f4e8

0002016c <CPartition::Seek(unsigned long long)>:
   2016c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20170:	e30041ff 	movw	r4, #511	; 0x1ff
   20174:	e3a05000 	mov	r5, #0
   20178:	e0044002 	and	r4, r4, r2
   2017c:	e0055003 	and	r5, r5, r3
   20180:	e1941005 	orrs	r1, r4, r5
   20184:	e3a01001 	mov	r1, #1
   20188:	e5801018 	str	r1, [r0, #24]
   2018c:	0a000002 	beq	2019c <CPartition::Seek(unsigned long long)+0x30>
   20190:	e3e00000 	mvn	r0, #0
   20194:	e1a01000 	mov	r1, r0
   20198:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2019c:	e590400c 	ldr	r4, [r0, #12]
   201a0:	e1a064a2 	lsr	r6, r2, #9
   201a4:	e1a074a3 	lsr	r7, r3, #9
   201a8:	e1866b83 	orr	r6, r6, r3, lsl #23
   201ac:	e3a05000 	mov	r5, #0
   201b0:	e1570005 	cmp	r7, r5
   201b4:	01560004 	cmpeq	r6, r4
   201b8:	2afffff4 	bcs	20190 <CPartition::Seek(unsigned long long)+0x24>
   201bc:	e1a07003 	mov	r7, r3
   201c0:	e1a04000 	mov	r4, r0
   201c4:	e9900009 	ldmib	r0, {r0, r3}
   201c8:	e1a06002 	mov	r6, r2
   201cc:	ee803b90 	vdup.32	d16, r3
   201d0:	f3e000b0 	vshr.u64	d16, d16, #32
   201d4:	f2c915b0 	vshl.s64	d17, d16, #9
   201d8:	ec598b31 	vmov	r8, r9, d17
   201dc:	e0988002 	adds	r8, r8, r2
   201e0:	e0a99007 	adc	r9, r9, r7
   201e4:	e3500000 	cmp	r0, #0
   201e8:	0a00000d 	beq	20224 <CPartition::Seek(unsigned long long)+0xb8>
   201ec:	e5901000 	ldr	r1, [r0]
   201f0:	e1a02008 	mov	r2, r8
   201f4:	e1a03009 	mov	r3, r9
   201f8:	e5911010 	ldr	r1, [r1, #16]
   201fc:	e12fff31 	blx	r1
   20200:	e1590001 	cmp	r9, r1
   20204:	01580000 	cmpeq	r8, r0
   20208:	1affffe0 	bne	20190 <CPartition::Seek(unsigned long long)+0x24>
   2020c:	e3a03000 	mov	r3, #0
   20210:	e1a00006 	mov	r0, r6
   20214:	e1a01007 	mov	r1, r7
   20218:	e1c461f0 	strd	r6, [r4, #16]
   2021c:	e5843018 	str	r3, [r4, #24]
   20220:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20224:	e30f14fc 	movw	r1, #62716	; 0xf4fc
   20228:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   2022c:	e3401002 	movt	r1, #2
   20230:	e3400002 	movt	r0, #2
   20234:	e3a02059 	mov	r2, #89	; 0x59
   20238:	eb001257 	bl	24b9c <assertion_failed>
   2023c:	e5940004 	ldr	r0, [r4, #4]
   20240:	eaffffe9 	b	201ec <CPartition::Seek(unsigned long long)+0x80>

00020244 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   20244:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20248:	e1a04000 	mov	r4, r0
   2024c:	e1a05001 	mov	r5, r1
   20250:	e1a07002 	mov	r7, r2
   20254:	e1a06003 	mov	r6, r3
   20258:	eb000bf2 	bl	23228 <CDevice::CDevice()>
   2025c:	e59f104c 	ldr	r1, [pc, #76]	; 202b0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x6c>
   20260:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   20264:	e3550000 	cmp	r5, #0
   20268:	e3a02001 	mov	r2, #1
   2026c:	e5847008 	str	r7, [r4, #8]
   20270:	e5845004 	str	r5, [r4, #4]
   20274:	e584600c 	str	r6, [r4, #12]
   20278:	e5841000 	str	r1, [r4]
   2027c:	edc40b04 	vstr	d16, [r4, #16]
   20280:	e5842018 	str	r2, [r4, #24]
   20284:	0a000001 	beq	20290 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   20288:	e1a00004 	mov	r0, r4
   2028c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20290:	e3a0201f 	mov	r2, #31
   20294:	e30f14fc 	movw	r1, #62716	; 0xf4fc
   20298:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   2029c:	e3401002 	movt	r1, #2
   202a0:	e3400002 	movt	r0, #2
   202a4:	eb00123c 	bl	24b9c <assertion_failed>
   202a8:	e1a00004 	mov	r0, r4
   202ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   202b0:	0002f4e8 	.word	0x0002f4e8

000202b4 <CTask::Run()>:
   202b4:	e30f1520 	movw	r1, #62752	; 0xf520
   202b8:	e3401002 	movt	r1, #2
   202bc:	e30b0130 	movw	r0, #45360	; 0xb130
   202c0:	e3400002 	movt	r0, #2
   202c4:	e3a02036 	mov	r2, #54	; 0x36
   202c8:	ea001233 	b	24b9c <assertion_failed>

000202cc <CTask::~CTask()>:
   202cc:	e5d03004 	ldrb	r3, [r0, #4]
   202d0:	e59f2048 	ldr	r2, [pc, #72]	; 20320 <CTask::~CTask()+0x54>
   202d4:	e92d4010 	push	{r4, lr}
   202d8:	e3530003 	cmp	r3, #3
   202dc:	e1a04000 	mov	r4, r0
   202e0:	e5802000 	str	r2, [r0]
   202e4:	0a000005 	beq	20300 <CTask::~CTask()+0x34>
   202e8:	e30f1520 	movw	r1, #62752	; 0xf520
   202ec:	e3401002 	movt	r1, #2
   202f0:	e30f052c 	movw	r0, #62764	; 0xf52c
   202f4:	e3400002 	movt	r0, #2
   202f8:	e3a0202d 	mov	r2, #45	; 0x2d
   202fc:	eb001226 	bl	24b9c <assertion_failed>
   20300:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
   20304:	e3a03004 	mov	r3, #4
   20308:	e5c43004 	strb	r3, [r4, #4]
   2030c:	e3500000 	cmp	r0, #0
   20310:	0a000000 	beq	20318 <CTask::~CTask()+0x4c>
   20314:	eb000717 	bl	21f78 <operator delete[](void*)>
   20318:	e1a00004 	mov	r0, r4
   2031c:	e8bd8010 	pop	{r4, pc}
   20320:	0002f514 	.word	0x0002f514

00020324 <CTask::~CTask()>:
   20324:	e92d4010 	push	{r4, lr}
   20328:	e1a04000 	mov	r4, r0
   2032c:	ebffffe6 	bl	202cc <CTask::~CTask()>
   20330:	e1a00004 	mov	r0, r4
   20334:	e3a01050 	mov	r1, #80	; 0x50
   20338:	eb00070f 	bl	21f7c <operator delete(void*, unsigned int)>
   2033c:	e1a00004 	mov	r0, r4
   20340:	e8bd8010 	pop	{r4, pc}

00020344 <CTask::TaskEntry(void*)>:
   20344:	e92d4010 	push	{r4, lr}
   20348:	e2504000 	subs	r4, r0, #0
   2034c:	0a00000e 	beq	2038c <CTask::TaskEntry(void*)+0x48>
   20350:	e5943000 	ldr	r3, [r4]
   20354:	e1a00004 	mov	r0, r4
   20358:	e5933008 	ldr	r3, [r3, #8]
   2035c:	e12fff33 	blx	r3
   20360:	e3a03003 	mov	r3, #3
   20364:	e5c43004 	strb	r3, [r4, #4]
   20368:	eb0001e4 	bl	20b00 <CScheduler::Get()>
   2036c:	eb000135 	bl	20848 <CScheduler::Yield()>
   20370:	e30f1520 	movw	r1, #62752	; 0xf520
   20374:	e3401002 	movt	r1, #2
   20378:	e30b0130 	movw	r0, #45360	; 0xb130
   2037c:	e3400002 	movt	r0, #2
   20380:	e3a0204f 	mov	r2, #79	; 0x4f
   20384:	e8bd4010 	pop	{r4, lr}
   20388:	ea001203 	b	24b9c <assertion_failed>
   2038c:	e30f1520 	movw	r1, #62752	; 0xf520
   20390:	e3401002 	movt	r1, #2
   20394:	e30a0938 	movw	r0, #43320	; 0xa938
   20398:	e3400002 	movt	r0, #2
   2039c:	e3a02048 	mov	r2, #72	; 0x48
   203a0:	eb0011fd 	bl	24b9c <assertion_failed>
   203a4:	eaffffe9 	b	20350 <CTask::TaskEntry(void*)+0xc>

000203a8 <CTask::InitializeRegs()>:
   203a8:	e92d4010 	push	{r4, lr}
   203ac:	e1a04000 	mov	r4, r0
   203b0:	e3a0203c 	mov	r2, #60	; 0x3c
   203b4:	e280000c 	add	r0, r0, #12
   203b8:	e3a01000 	mov	r1, #0
   203bc:	eb000a5e 	bl	22d3c <memset>
   203c0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   203c4:	e584400c 	str	r4, [r4, #12]
   203c8:	e3530000 	cmp	r3, #0
   203cc:	0a000006 	beq	203ec <CTask::InitializeRegs()+0x44>
   203d0:	e5941048 	ldr	r1, [r4, #72]	; 0x48
   203d4:	e3002344 	movw	r2, #836	; 0x344
   203d8:	e3402002 	movt	r2, #2
   203dc:	e5842044 	str	r2, [r4, #68]	; 0x44
   203e0:	e0833001 	add	r3, r3, r1
   203e4:	e5843040 	str	r3, [r4, #64]	; 0x40
   203e8:	e8bd8010 	pop	{r4, pc}
   203ec:	e30f1520 	movw	r1, #62752	; 0xf520
   203f0:	e3401002 	movt	r1, #2
   203f4:	e30f054c 	movw	r0, #62796	; 0xf54c
   203f8:	e3400002 	movt	r0, #2
   203fc:	e3a0203f 	mov	r2, #63	; 0x3f
   20400:	eb0011e5 	bl	24b9c <assertion_failed>
   20404:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   20408:	eafffff0 	b	203d0 <CTask::InitializeRegs()+0x28>

0002040c <CTask::CTask(unsigned int)>:
   2040c:	e59f20a4 	ldr	r2, [pc, #164]	; 204b8 <CTask::CTask(unsigned int)+0xac>
   20410:	e3a03000 	mov	r3, #0
   20414:	e92d4010 	push	{r4, lr}
   20418:	e3510000 	cmp	r1, #0
   2041c:	e1a04000 	mov	r4, r0
   20420:	e5801048 	str	r1, [r0, #72]	; 0x48
   20424:	e5802000 	str	r2, [r0]
   20428:	e5c03004 	strb	r3, [r0, #4]
   2042c:	e580304c 	str	r3, [r0, #76]	; 0x4c
   20430:	0a000008 	beq	20458 <CTask::CTask(unsigned int)+0x4c>
   20434:	e3510b01 	cmp	r1, #1024	; 0x400
   20438:	3a00000b 	bcc	2046c <CTask::CTask(unsigned int)+0x60>
   2043c:	e3110003 	tst	r1, #3
   20440:	1a000012 	bne	20490 <CTask::CTask(unsigned int)+0x84>
   20444:	e1a00001 	mov	r0, r1
   20448:	eb0006c8 	bl	21f70 <operator new[](unsigned int)>
   2044c:	e584004c 	str	r0, [r4, #76]	; 0x4c
   20450:	e1a00004 	mov	r0, r4
   20454:	ebffffd3 	bl	203a8 <CTask::InitializeRegs()>
   20458:	eb0001a8 	bl	20b00 <CScheduler::Get()>
   2045c:	e1a01004 	mov	r1, r4
   20460:	eb00002f 	bl	20524 <CScheduler::AddTask(CTask*)>
   20464:	e1a00004 	mov	r0, r4
   20468:	e8bd8010 	pop	{r4, pc}
   2046c:	e30f1520 	movw	r1, #62752	; 0xf520
   20470:	e3401002 	movt	r1, #2
   20474:	e30f055c 	movw	r0, #62812	; 0xf55c
   20478:	e3400002 	movt	r0, #2
   2047c:	e3a02020 	mov	r2, #32
   20480:	eb0011c5 	bl	24b9c <assertion_failed>
   20484:	e5941048 	ldr	r1, [r4, #72]	; 0x48
   20488:	e3110003 	tst	r1, #3
   2048c:	0affffec 	beq	20444 <CTask::CTask(unsigned int)+0x38>
   20490:	e3a02021 	mov	r2, #33	; 0x21
   20494:	e30f1520 	movw	r1, #62752	; 0xf520
   20498:	e3401002 	movt	r1, #2
   2049c:	e30f0574 	movw	r0, #62836	; 0xf574
   204a0:	e3400002 	movt	r0, #2
   204a4:	eb0011bc 	bl	24b9c <assertion_failed>
   204a8:	e5940048 	ldr	r0, [r4, #72]	; 0x48
   204ac:	eb0006af 	bl	21f70 <operator new[](unsigned int)>
   204b0:	e584004c 	str	r0, [r4, #76]	; 0x4c
   204b4:	eaffffe5 	b	20450 <CTask::CTask(unsigned int)+0x44>
   204b8:	0002f514 	.word	0x0002f514

000204bc <CScheduler::CScheduler()>:
   204bc:	e92d4070 	push	{r4, r5, r6, lr}
   204c0:	e302581c 	movw	r5, #10268	; 0x281c
   204c4:	e3405143 	movt	r5, #323	; 0x143
   204c8:	e3a03000 	mov	r3, #0
   204cc:	e1a04000 	mov	r4, r0
   204d0:	e5803050 	str	r3, [r0, #80]	; 0x50
   204d4:	e5952000 	ldr	r2, [r5]
   204d8:	e5803054 	str	r3, [r0, #84]	; 0x54
   204dc:	e1520003 	cmp	r2, r3
   204e0:	e5803058 	str	r3, [r0, #88]	; 0x58
   204e4:	0a000005 	beq	20500 <CScheduler::CScheduler()+0x44>
   204e8:	e30f1594 	movw	r1, #62868	; 0xf594
   204ec:	e3401002 	movt	r1, #2
   204f0:	e30f05a4 	movw	r0, #62884	; 0xf5a4
   204f4:	e3400002 	movt	r0, #2
   204f8:	e3a02022 	mov	r2, #34	; 0x22
   204fc:	eb0011a6 	bl	24b9c <assertion_failed>
   20500:	e3a00050 	mov	r0, #80	; 0x50
   20504:	e5854000 	str	r4, [r5]
   20508:	eb000697 	bl	21f6c <operator new(unsigned int)>
   2050c:	e3a01000 	mov	r1, #0
   20510:	e1a05000 	mov	r5, r0
   20514:	ebffffbc 	bl	2040c <CTask::CTask(unsigned int)>
   20518:	e5845054 	str	r5, [r4, #84]	; 0x54
   2051c:	e1a00004 	mov	r0, r4
   20520:	e8bd8070 	pop	{r4, r5, r6, pc}

00020524 <CScheduler::AddTask(CTask*)>:
   20524:	e92d4070 	push	{r4, r5, r6, lr}
   20528:	e1a04000 	mov	r4, r0
   2052c:	e2515000 	subs	r5, r1, #0
   20530:	0a00001d 	beq	205ac <CScheduler::AddTask(CTask*)+0x88>
   20534:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   20538:	e3500000 	cmp	r0, #0
   2053c:	0a000021 	beq	205c8 <CScheduler::AddTask(CTask*)+0xa4>
   20540:	e5943000 	ldr	r3, [r4]
   20544:	e3530000 	cmp	r3, #0
   20548:	11a02004 	movne	r2, r4
   2054c:	13a03000 	movne	r3, #0
   20550:	1a000003 	bne	20564 <CScheduler::AddTask(CTask*)+0x40>
   20554:	ea000009 	b	20580 <CScheduler::AddTask(CTask*)+0x5c>
   20558:	e5b21004 	ldr	r1, [r2, #4]!
   2055c:	e3510000 	cmp	r1, #0
   20560:	0a000006 	beq	20580 <CScheduler::AddTask(CTask*)+0x5c>
   20564:	e2833001 	add	r3, r3, #1
   20568:	e1530000 	cmp	r3, r0
   2056c:	1afffff9 	bne	20558 <CScheduler::AddTask(CTask*)+0x34>
   20570:	e3530014 	cmp	r3, #20
   20574:	0a000003 	beq	20588 <CScheduler::AddTask(CTask*)+0x64>
   20578:	e2832001 	add	r2, r3, #1
   2057c:	e5842050 	str	r2, [r4, #80]	; 0x50
   20580:	e7845103 	str	r5, [r4, r3, lsl #2]
   20584:	e8bd8070 	pop	{r4, r5, r6, pc}
   20588:	eb001308 	bl	251b0 <CLogger::Get()>
   2058c:	e30f35c0 	movw	r3, #62912	; 0xf5c0
   20590:	e3403002 	movt	r3, #2
   20594:	e30f158c 	movw	r1, #62860	; 0xf58c
   20598:	e3401002 	movt	r1, #2
   2059c:	e3a02000 	mov	r2, #0
   205a0:	eb0013de 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   205a4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   205a8:	eafffff2 	b	20578 <CScheduler::AddTask(CTask*)+0x54>
   205ac:	e30f1594 	movw	r1, #62868	; 0xf594
   205b0:	e3401002 	movt	r1, #2
   205b4:	e30f05b4 	movw	r0, #62900	; 0xf5b4
   205b8:	e3400002 	movt	r0, #2
   205bc:	e3a02075 	mov	r2, #117	; 0x75
   205c0:	eb001175 	bl	24b9c <assertion_failed>
   205c4:	eaffffda 	b	20534 <CScheduler::AddTask(CTask*)+0x10>
   205c8:	e1a03000 	mov	r3, r0
   205cc:	eaffffe9 	b	20578 <CScheduler::AddTask(CTask*)+0x54>

000205d0 <CScheduler::RemoveTask(CTask*)>:
   205d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   205d4:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   205d8:	e35e0000 	cmp	lr, #0
   205dc:	0a00000b 	beq	20610 <CScheduler::RemoveTask(CTask*)+0x40>
   205e0:	e5903000 	ldr	r3, [r0]
   205e4:	e1510003 	cmp	r1, r3
   205e8:	11a02000 	movne	r2, r0
   205ec:	13a03000 	movne	r3, #0
   205f0:	1a000003 	bne	20604 <CScheduler::RemoveTask(CTask*)+0x34>
   205f4:	ea00000c 	b	2062c <CScheduler::RemoveTask(CTask*)+0x5c>
   205f8:	e5b2c004 	ldr	ip, [r2, #4]!
   205fc:	e15c0001 	cmp	ip, r1
   20600:	0a00000a 	beq	20630 <CScheduler::RemoveTask(CTask*)+0x60>
   20604:	e2833001 	add	r3, r3, #1
   20608:	e153000e 	cmp	r3, lr
   2060c:	1afffff9 	bne	205f8 <CScheduler::RemoveTask(CTask*)+0x28>
   20610:	e30f1594 	movw	r1, #62868	; 0xf594
   20614:	e3401002 	movt	r1, #2
   20618:	e30b0130 	movw	r0, #45360	; 0xb130
   2061c:	e3400002 	movt	r0, #2
   20620:	e3a0209b 	mov	r2, #155	; 0x9b
   20624:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   20628:	ea00115b 	b	24b9c <assertion_failed>
   2062c:	e3a03000 	mov	r3, #0
   20630:	e24ee001 	sub	lr, lr, #1
   20634:	e3a02000 	mov	r2, #0
   20638:	e15e0003 	cmp	lr, r3
   2063c:	e7802103 	str	r2, [r0, r3, lsl #2]
   20640:	05803050 	streq	r3, [r0, #80]	; 0x50
   20644:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00020648 <CScheduler::~CScheduler()>:
   20648:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   2064c:	e92d4010 	push	{r4, lr}
   20650:	e1a04000 	mov	r4, r0
   20654:	e3530001 	cmp	r3, #1
   20658:	0a000005 	beq	20674 <CScheduler::~CScheduler()+0x2c>
   2065c:	e30f1594 	movw	r1, #62868	; 0xf594
   20660:	e3401002 	movt	r1, #2
   20664:	e30f05e0 	movw	r0, #62944	; 0xf5e0
   20668:	e3400002 	movt	r0, #2
   2066c:	e3a0202b 	mov	r2, #43	; 0x2b
   20670:	eb001149 	bl	24b9c <assertion_failed>
   20674:	e5941054 	ldr	r1, [r4, #84]	; 0x54
   20678:	e5943000 	ldr	r3, [r4]
   2067c:	e1530001 	cmp	r3, r1
   20680:	0a000006 	beq	206a0 <CScheduler::~CScheduler()+0x58>
   20684:	e30f1594 	movw	r1, #62868	; 0xf594
   20688:	e3401002 	movt	r1, #2
   2068c:	e30f05f0 	movw	r0, #62960	; 0xf5f0
   20690:	e3400002 	movt	r0, #2
   20694:	e3a0202c 	mov	r2, #44	; 0x2c
   20698:	eb00113f 	bl	24b9c <assertion_failed>
   2069c:	e5941054 	ldr	r1, [r4, #84]	; 0x54
   206a0:	e1a00004 	mov	r0, r4
   206a4:	ebffffc9 	bl	205d0 <CScheduler::RemoveTask(CTask*)>
   206a8:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   206ac:	e3500000 	cmp	r0, #0
   206b0:	0a000002 	beq	206c0 <CScheduler::~CScheduler()+0x78>
   206b4:	e5903000 	ldr	r3, [r0]
   206b8:	e5933004 	ldr	r3, [r3, #4]
   206bc:	e12fff33 	blx	r3
   206c0:	e302381c 	movw	r3, #10268	; 0x281c
   206c4:	e3403143 	movt	r3, #323	; 0x143
   206c8:	e3a02000 	mov	r2, #0
   206cc:	e1a00004 	mov	r0, r4
   206d0:	e5832000 	str	r2, [r3]
   206d4:	e8bd8010 	pop	{r4, pc}

000206d8 <CScheduler::WakeTask(CTask**)>:
   206d8:	e92d4070 	push	{r4, r5, r6, lr}
   206dc:	e2515000 	subs	r5, r1, #0
   206e0:	0a000010 	beq	20728 <CScheduler::WakeTask(CTask**)+0x50>
   206e4:	e5954000 	ldr	r4, [r5]
   206e8:	e3a03000 	mov	r3, #0
   206ec:	e5853000 	str	r3, [r5]
   206f0:	e1540003 	cmp	r4, r3
   206f4:	0a000012 	beq	20744 <CScheduler::WakeTask(CTask**)+0x6c>
   206f8:	e5d43004 	ldrb	r3, [r4, #4]
   206fc:	e3530001 	cmp	r3, #1
   20700:	0a000005 	beq	2071c <CScheduler::WakeTask(CTask**)+0x44>
   20704:	e30f1594 	movw	r1, #62868	; 0xf594
   20708:	e3401002 	movt	r1, #2
   2070c:	e30f0618 	movw	r0, #63000	; 0xf618
   20710:	e3400002 	movt	r0, #2
   20714:	e3a020b9 	mov	r2, #185	; 0xb9
   20718:	eb00111f 	bl	24b9c <assertion_failed>
   2071c:	e3a03000 	mov	r3, #0
   20720:	e5c43004 	strb	r3, [r4, #4]
   20724:	e8bd8070 	pop	{r4, r5, r6, pc}
   20728:	e30f1594 	movw	r1, #62868	; 0xf594
   2072c:	e3401002 	movt	r1, #2
   20730:	e30f060c 	movw	r0, #62988	; 0xf60c
   20734:	e3400002 	movt	r0, #2
   20738:	e3a020ac 	mov	r2, #172	; 0xac
   2073c:	eb001116 	bl	24b9c <assertion_failed>
   20740:	eaffffe7 	b	206e4 <CScheduler::WakeTask(CTask**)+0xc>
   20744:	e30f1594 	movw	r1, #62868	; 0xf594
   20748:	e3401002 	movt	r1, #2
   2074c:	e30f05b4 	movw	r0, #62900	; 0xf5b4
   20750:	e3400002 	movt	r0, #2
   20754:	e3a020b8 	mov	r2, #184	; 0xb8
   20758:	eb00110f 	bl	24b9c <assertion_failed>
   2075c:	eaffffe5 	b	206f8 <CScheduler::WakeTask(CTask**)+0x20>

00020760 <CScheduler::GetNextTask()>:
   20760:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20764:	e1a07000 	mov	r7, r0
   20768:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   2076c:	e3540014 	cmp	r4, #20
   20770:	23a04000 	movcs	r4, #0
   20774:	eb000962 	bl	22d04 <CTimer::Get()>
   20778:	eb00070d 	bl	223b4 <CTimer::GetClockTicks()>
   2077c:	e5973050 	ldr	r3, [r7, #80]	; 0x50
   20780:	e3530000 	cmp	r3, #0
   20784:	0a00001b 	beq	207f8 <CScheduler::GetNextTask()+0x98>
   20788:	e30f9594 	movw	r9, #62868	; 0xf594
   2078c:	e3409002 	movt	r9, #2
   20790:	e30b8130 	movw	r8, #45360	; 0xb130
   20794:	e3408002 	movt	r8, #2
   20798:	e1a0a000 	mov	sl, r0
   2079c:	e3a06001 	mov	r6, #1
   207a0:	e2844001 	add	r4, r4, #1
   207a4:	e2866001 	add	r6, r6, #1
   207a8:	e1540003 	cmp	r4, r3
   207ac:	23a04000 	movcs	r4, #0
   207b0:	e7975104 	ldr	r5, [r7, r4, lsl #2]
   207b4:	e3550000 	cmp	r5, #0
   207b8:	0a00000c 	beq	207f0 <CScheduler::GetNextTask()+0x90>
   207bc:	e5d52004 	ldrb	r2, [r5, #4]
   207c0:	e3520003 	cmp	r2, #3
   207c4:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   207c8:	ea000003 	b	207dc <CScheduler::GetNextTask()+0x7c>
   207cc:	000207fc 	.word	0x000207fc
   207d0:	000207f0 	.word	0x000207f0
   207d4:	0002082c 	.word	0x0002082c
   207d8:	00020804 	.word	0x00020804
   207dc:	e3a020e8 	mov	r2, #232	; 0xe8
   207e0:	e1a01009 	mov	r1, r9
   207e4:	e1a00008 	mov	r0, r8
   207e8:	eb0010eb 	bl	24b9c <assertion_failed>
   207ec:	e5973050 	ldr	r3, [r7, #80]	; 0x50
   207f0:	e1530006 	cmp	r3, r6
   207f4:	2affffe9 	bcs	207a0 <CScheduler::GetNextTask()+0x40>
   207f8:	e3a04014 	mov	r4, #20
   207fc:	e1a00004 	mov	r0, r4
   20800:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20804:	e1a00007 	mov	r0, r7
   20808:	e1a01005 	mov	r1, r5
   2080c:	ebffff6f 	bl	205d0 <CScheduler::RemoveTask(CTask*)>
   20810:	e5953000 	ldr	r3, [r5]
   20814:	e1a00005 	mov	r0, r5
   20818:	e3a04014 	mov	r4, #20
   2081c:	e5933004 	ldr	r3, [r3, #4]
   20820:	e12fff33 	blx	r3
   20824:	e1a00004 	mov	r0, r4
   20828:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2082c:	e5952008 	ldr	r2, [r5, #8]
   20830:	e042200a 	sub	r2, r2, sl
   20834:	e3520000 	cmp	r2, #0
   20838:	caffffec 	bgt	207f0 <CScheduler::GetNextTask()+0x90>
   2083c:	e3a03000 	mov	r3, #0
   20840:	e5c53004 	strb	r3, [r5, #4]
   20844:	eaffffec 	b	207fc <CScheduler::GetNextTask()+0x9c>

00020848 <CScheduler::Yield()>:
   20848:	e92d4070 	push	{r4, r5, r6, lr}
   2084c:	e30f6594 	movw	r6, #62868	; 0xf594
   20850:	e3406002 	movt	r6, #2
   20854:	e30f5640 	movw	r5, #63040	; 0xf640
   20858:	e3405002 	movt	r5, #2
   2085c:	e1a04000 	mov	r4, r0
   20860:	ea000002 	b	20870 <CScheduler::Yield()+0x28>
   20864:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   20868:	e3530000 	cmp	r3, #0
   2086c:	0a000016 	beq	208cc <CScheduler::Yield()+0x84>
   20870:	e1a00004 	mov	r0, r4
   20874:	ebffffb9 	bl	20760 <CScheduler::GetNextTask()>
   20878:	e3500014 	cmp	r0, #20
   2087c:	e5840058 	str	r0, [r4, #88]	; 0x58
   20880:	0afffff7 	beq	20864 <CScheduler::Yield()+0x1c>
   20884:	e3500013 	cmp	r0, #19
   20888:	8a000014 	bhi	208e0 <CScheduler::Yield()+0x98>
   2088c:	e7945100 	ldr	r5, [r4, r0, lsl #2]
   20890:	e3550000 	cmp	r5, #0
   20894:	0a000019 	beq	20900 <CScheduler::Yield()+0xb8>
   20898:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   2089c:	e1550000 	cmp	r5, r0
   208a0:	08bd8070 	popeq	{r4, r5, r6, pc}
   208a4:	e5845054 	str	r5, [r4, #84]	; 0x54
   208a8:	e285500c 	add	r5, r5, #12
   208ac:	e290400c 	adds	r4, r0, #12
   208b0:	0a000019 	beq	2091c <CScheduler::Yield()+0xd4>
   208b4:	e3550000 	cmp	r5, #0
   208b8:	0a00001e 	beq	20938 <CScheduler::Yield()+0xf0>
   208bc:	e1a01005 	mov	r1, r5
   208c0:	e1a00004 	mov	r0, r4
   208c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   208c8:	ea00009a 	b	20b38 <TaskSwitch>
   208cc:	e3a02038 	mov	r2, #56	; 0x38
   208d0:	e1a01006 	mov	r1, r6
   208d4:	e1a00005 	mov	r0, r5
   208d8:	eb0010af 	bl	24b9c <assertion_failed>
   208dc:	eaffffe3 	b	20870 <CScheduler::Yield()+0x28>
   208e0:	e30f1594 	movw	r1, #62868	; 0xf594
   208e4:	e3401002 	movt	r1, #2
   208e8:	e30f0650 	movw	r0, #63056	; 0xf650
   208ec:	e3400002 	movt	r0, #2
   208f0:	e3a0203b 	mov	r2, #59	; 0x3b
   208f4:	eb0010a8 	bl	24b9c <assertion_failed>
   208f8:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   208fc:	eaffffe2 	b	2088c <CScheduler::Yield()+0x44>
   20900:	e30f1594 	movw	r1, #62868	; 0xf594
   20904:	e3401002 	movt	r1, #2
   20908:	e30f0668 	movw	r0, #63080	; 0xf668
   2090c:	e3400002 	movt	r0, #2
   20910:	e3a0203d 	mov	r2, #61	; 0x3d
   20914:	eb0010a0 	bl	24b9c <assertion_failed>
   20918:	eaffffde 	b	20898 <CScheduler::Yield()+0x50>
   2091c:	e30f1594 	movw	r1, #62868	; 0xf594
   20920:	e3401002 	movt	r1, #2
   20924:	e30f0674 	movw	r0, #63092	; 0xf674
   20928:	e3400002 	movt	r0, #2
   2092c:	e3a02047 	mov	r2, #71	; 0x47
   20930:	eb001099 	bl	24b9c <assertion_failed>
   20934:	eaffffde 	b	208b4 <CScheduler::Yield()+0x6c>
   20938:	e30f1594 	movw	r1, #62868	; 0xf594
   2093c:	e3401002 	movt	r1, #2
   20940:	e30f0684 	movw	r0, #63108	; 0xf684
   20944:	e3400002 	movt	r0, #2
   20948:	e3a02048 	mov	r2, #72	; 0x48
   2094c:	eb001092 	bl	24b9c <assertion_failed>
   20950:	eaffffd9 	b	208bc <CScheduler::Yield()+0x74>

00020954 <CScheduler::usSleep(unsigned int) [clone .part.2]>:
   20954:	e92d4070 	push	{r4, r5, r6, lr}
   20958:	e1a05000 	mov	r5, r0
   2095c:	e1a06001 	mov	r6, r1
   20960:	eb0008e7 	bl	22d04 <CTimer::Get()>
   20964:	eb000692 	bl	223b4 <CTimer::GetClockTicks()>
   20968:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   2096c:	e1a04000 	mov	r4, r0
   20970:	e3530000 	cmp	r3, #0
   20974:	0a000011 	beq	209c0 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x6c>
   20978:	e5d32004 	ldrb	r2, [r3, #4]
   2097c:	e3520000 	cmp	r2, #0
   20980:	1a000006 	bne	209a0 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x4c>
   20984:	e0844006 	add	r4, r4, r6
   20988:	e1a00005 	mov	r0, r5
   2098c:	e5834008 	str	r4, [r3, #8]
   20990:	e3a02002 	mov	r2, #2
   20994:	e8bd4070 	pop	{r4, r5, r6, lr}
   20998:	e5c32004 	strb	r2, [r3, #4]
   2099c:	eaffffa9 	b	20848 <CScheduler::Yield()>
   209a0:	e30f1594 	movw	r1, #62868	; 0xf594
   209a4:	e3401002 	movt	r1, #2
   209a8:	e30f06a4 	movw	r0, #63140	; 0xf6a4
   209ac:	e3400002 	movt	r0, #2
   209b0:	e3a0206b 	mov	r2, #107	; 0x6b
   209b4:	eb001078 	bl	24b9c <assertion_failed>
   209b8:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   209bc:	eafffff0 	b	20984 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x30>
   209c0:	e30f1594 	movw	r1, #62868	; 0xf594
   209c4:	e3401002 	movt	r1, #2
   209c8:	e30f0694 	movw	r0, #63124	; 0xf694
   209cc:	e3400002 	movt	r0, #2
   209d0:	e3a0206a 	mov	r2, #106	; 0x6a
   209d4:	eb001070 	bl	24b9c <assertion_failed>
   209d8:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   209dc:	eaffffe5 	b	20978 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x24>

000209e0 <CScheduler::usSleep(unsigned int)>:
   209e0:	e3510000 	cmp	r1, #0
   209e4:	012fff1e 	bxeq	lr
   209e8:	eaffffd9 	b	20954 <CScheduler::usSleep(unsigned int) [clone .part.2]>

000209ec <CScheduler::Sleep(unsigned int)>:
   209ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   209f0:	e3005708 	movw	r5, #1800	; 0x708
   209f4:	e1a04001 	mov	r4, r1
   209f8:	e1a07000 	mov	r7, r0
   209fc:	e1510005 	cmp	r1, r5
   20a00:	9a000008 	bls	20a28 <CScheduler::Sleep(unsigned int)+0x3c>
   20a04:	e3a06cd2 	mov	r6, #53760	; 0xd200
   20a08:	e3466b49 	movt	r6, #27465	; 0x6b49
   20a0c:	e2444c07 	sub	r4, r4, #1792	; 0x700
   20a10:	e1a01006 	mov	r1, r6
   20a14:	e2444008 	sub	r4, r4, #8
   20a18:	e1a00007 	mov	r0, r7
   20a1c:	ebffffcc 	bl	20954 <CScheduler::usSleep(unsigned int) [clone .part.2]>
   20a20:	e1540005 	cmp	r4, r5
   20a24:	8afffff8 	bhi	20a0c <CScheduler::Sleep(unsigned int)+0x20>
   20a28:	e3041240 	movw	r1, #16960	; 0x4240
   20a2c:	e340100f 	movt	r1, #15
   20a30:	e0010491 	mul	r1, r1, r4
   20a34:	e3510000 	cmp	r1, #0
   20a38:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20a3c:	e1a00007 	mov	r0, r7
   20a40:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   20a44:	eaffffc2 	b	20954 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00020a48 <CScheduler::MsSleep(unsigned int)>:
   20a48:	e3510000 	cmp	r1, #0
   20a4c:	012fff1e 	bxeq	lr
   20a50:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   20a54:	e0010193 	mul	r1, r3, r1
   20a58:	e3510000 	cmp	r1, #0
   20a5c:	012fff1e 	bxeq	lr
   20a60:	eaffffbb 	b	20954 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00020a64 <CScheduler::BlockTask(CTask**)>:
   20a64:	e92d4070 	push	{r4, r5, r6, lr}
   20a68:	e1a04000 	mov	r4, r0
   20a6c:	e2515000 	subs	r5, r1, #0
   20a70:	0a00001b 	beq	20ae4 <CScheduler::BlockTask(CTask**)+0x80>
   20a74:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   20a78:	e5853000 	str	r3, [r5]
   20a7c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   20a80:	e3530000 	cmp	r3, #0
   20a84:	0a00000e 	beq	20ac4 <CScheduler::BlockTask(CTask**)+0x60>
   20a88:	e5d32004 	ldrb	r2, [r3, #4]
   20a8c:	e3520000 	cmp	r2, #0
   20a90:	0a000006 	beq	20ab0 <CScheduler::BlockTask(CTask**)+0x4c>
   20a94:	e30f1594 	movw	r1, #62868	; 0xf594
   20a98:	e3401002 	movt	r1, #2
   20a9c:	e30f06a4 	movw	r0, #63140	; 0xf6a4
   20aa0:	e3400002 	movt	r0, #2
   20aa4:	e3a020a4 	mov	r2, #164	; 0xa4
   20aa8:	eb00103b 	bl	24b9c <assertion_failed>
   20aac:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   20ab0:	e1a00004 	mov	r0, r4
   20ab4:	e3a02001 	mov	r2, #1
   20ab8:	e8bd4070 	pop	{r4, r5, r6, lr}
   20abc:	e5c32004 	strb	r2, [r3, #4]
   20ac0:	eaffff60 	b	20848 <CScheduler::Yield()>
   20ac4:	e30f1594 	movw	r1, #62868	; 0xf594
   20ac8:	e3401002 	movt	r1, #2
   20acc:	e30f0694 	movw	r0, #63124	; 0xf694
   20ad0:	e3400002 	movt	r0, #2
   20ad4:	e3a020a3 	mov	r2, #163	; 0xa3
   20ad8:	eb00102f 	bl	24b9c <assertion_failed>
   20adc:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   20ae0:	eaffffe8 	b	20a88 <CScheduler::BlockTask(CTask**)+0x24>
   20ae4:	e30f1594 	movw	r1, #62868	; 0xf594
   20ae8:	e3401002 	movt	r1, #2
   20aec:	e30f060c 	movw	r0, #62988	; 0xf60c
   20af0:	e3400002 	movt	r0, #2
   20af4:	e3a020a0 	mov	r2, #160	; 0xa0
   20af8:	eb001027 	bl	24b9c <assertion_failed>
   20afc:	eaffffdc 	b	20a74 <CScheduler::BlockTask(CTask**)+0x10>

00020b00 <CScheduler::Get()>:
   20b00:	e92d4010 	push	{r4, lr}
   20b04:	e302481c 	movw	r4, #10268	; 0x281c
   20b08:	e3404143 	movt	r4, #323	; 0x143
   20b0c:	e5940000 	ldr	r0, [r4]
   20b10:	e3500000 	cmp	r0, #0
   20b14:	18bd8010 	popne	{r4, pc}
   20b18:	e3a020f2 	mov	r2, #242	; 0xf2
   20b1c:	e30f1594 	movw	r1, #62868	; 0xf594
   20b20:	e3401002 	movt	r1, #2
   20b24:	e30a045c 	movw	r0, #42076	; 0xa45c
   20b28:	e3400002 	movt	r0, #2
   20b2c:	eb00101a 	bl	24b9c <assertion_failed>
   20b30:	e5940000 	ldr	r0, [r4]
   20b34:	e8bd8010 	pop	{r4, pc}

00020b38 <TaskSwitch>:
   20b38:	e8807fff 	stm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   20b3c:	e8917fff 	ldm	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   20b40:	e12fff1e 	bx	lr

00020b44 <CSynchronizationEvent::CSynchronizationEvent(int)>:
   20b44:	e3a02000 	mov	r2, #0
   20b48:	e5801000 	str	r1, [r0]
   20b4c:	e5802004 	str	r2, [r0, #4]
   20b50:	e12fff1e 	bx	lr

00020b54 <CSynchronizationEvent::~CSynchronizationEvent()>:
   20b54:	e5903004 	ldr	r3, [r0, #4]
   20b58:	e92d4010 	push	{r4, lr}
   20b5c:	e1a04000 	mov	r4, r0
   20b60:	e3530000 	cmp	r3, #0
   20b64:	0a000005 	beq	20b80 <CSynchronizationEvent::~CSynchronizationEvent()+0x2c>
   20b68:	e30f16d0 	movw	r1, #63184	; 0xf6d0
   20b6c:	e3401002 	movt	r1, #2
   20b70:	e30f06ec 	movw	r0, #63212	; 0xf6ec
   20b74:	e3400002 	movt	r0, #2
   20b78:	e3a02020 	mov	r2, #32
   20b7c:	eb001006 	bl	24b9c <assertion_failed>
   20b80:	e1a00004 	mov	r0, r4
   20b84:	e8bd8010 	pop	{r4, pc}

00020b88 <CSynchronizationEvent::GetState()>:
   20b88:	e5900000 	ldr	r0, [r0]
   20b8c:	e12fff1e 	bx	lr

00020b90 <CSynchronizationEvent::Clear()>:
   20b90:	e3a03000 	mov	r3, #0
   20b94:	e5803000 	str	r3, [r0]
   20b98:	e12fff1e 	bx	lr

00020b9c <CSynchronizationEvent::Set()>:
   20b9c:	e5903000 	ldr	r3, [r0]
   20ba0:	e3530000 	cmp	r3, #0
   20ba4:	112fff1e 	bxne	lr
   20ba8:	e5903004 	ldr	r3, [r0, #4]
   20bac:	e3a02001 	mov	r2, #1
   20bb0:	e5802000 	str	r2, [r0]
   20bb4:	e3530000 	cmp	r3, #0
   20bb8:	012fff1e 	bxeq	lr
   20bbc:	e92d4010 	push	{r4, lr}
   20bc0:	e1a04000 	mov	r4, r0
   20bc4:	ebffffcd 	bl	20b00 <CScheduler::Get()>
   20bc8:	e2841004 	add	r1, r4, #4
   20bcc:	e8bd4010 	pop	{r4, lr}
   20bd0:	eafffec0 	b	206d8 <CScheduler::WakeTask(CTask**)>

00020bd4 <CSynchronizationEvent::Wait()>:
   20bd4:	e5903000 	ldr	r3, [r0]
   20bd8:	e3530000 	cmp	r3, #0
   20bdc:	112fff1e 	bxne	lr
   20be0:	e5903004 	ldr	r3, [r0, #4]
   20be4:	e92d4010 	push	{r4, lr}
   20be8:	e1a04000 	mov	r4, r0
   20bec:	e3530000 	cmp	r3, #0
   20bf0:	0a000005 	beq	20c0c <CSynchronizationEvent::Wait()+0x38>
   20bf4:	e30f16d0 	movw	r1, #63184	; 0xf6d0
   20bf8:	e3401002 	movt	r1, #2
   20bfc:	e30f06ec 	movw	r0, #63212	; 0xf6ec
   20c00:	e3400002 	movt	r0, #2
   20c04:	e3a0203e 	mov	r2, #62	; 0x3e
   20c08:	eb000fe3 	bl	24b9c <assertion_failed>
   20c0c:	ebffffbb 	bl	20b00 <CScheduler::Get()>
   20c10:	e2841004 	add	r1, r4, #4
   20c14:	ebffff92 	bl	20a64 <CScheduler::BlockTask(CTask**)>
   20c18:	e5943000 	ldr	r3, [r4]
   20c1c:	e3530000 	cmp	r3, #0
   20c20:	18bd8010 	popne	{r4, pc}
   20c24:	e30f16d0 	movw	r1, #63184	; 0xf6d0
   20c28:	e3401002 	movt	r1, #2
   20c2c:	e30f0700 	movw	r0, #63232	; 0xf700
   20c30:	e3400002 	movt	r0, #2
   20c34:	e3a02041 	mov	r2, #65	; 0x41
   20c38:	e8bd4010 	pop	{r4, lr}
   20c3c:	ea000fd6 	b	24b9c <assertion_failed>

00020c40 <CActLED::~CActLED()>:
   20c40:	e3023820 	movw	r3, #10272	; 0x2820
   20c44:	e3403143 	movt	r3, #323	; 0x143
   20c48:	e3a02000 	mov	r2, #0
   20c4c:	e5832000 	str	r2, [r3]
   20c50:	e12fff1e 	bx	lr

00020c54 <CActLED::On()>:
   20c54:	e5903000 	ldr	r3, [r0]
   20c58:	e3530000 	cmp	r3, #0
   20c5c:	0a000004 	beq	20c74 <CActLED::On()+0x20>
   20c60:	e5901008 	ldr	r1, [r0, #8]
   20c64:	e1a00003 	mov	r0, r3
   20c68:	e2911000 	adds	r1, r1, #0
   20c6c:	13a01001 	movne	r1, #1
   20c70:	ea0000f0 	b	21038 <CGPIOPin::Write(unsigned int)>
   20c74:	e5903004 	ldr	r3, [r0, #4]
   20c78:	e3530000 	cmp	r3, #0
   20c7c:	012fff1e 	bxeq	lr
   20c80:	e5901008 	ldr	r1, [r0, #8]
   20c84:	e1a00003 	mov	r0, r3
   20c88:	e2911000 	adds	r1, r1, #0
   20c8c:	13a01001 	movne	r1, #1
   20c90:	ea001ee2 	b	28820 <CVirtualGPIOPin::Write(unsigned int)>

00020c94 <CActLED::Off()>:
   20c94:	e5903000 	ldr	r3, [r0]
   20c98:	e3530000 	cmp	r3, #0
   20c9c:	0a000004 	beq	20cb4 <CActLED::Off()+0x20>
   20ca0:	e5901008 	ldr	r1, [r0, #8]
   20ca4:	e1a00003 	mov	r0, r3
   20ca8:	e16f1f11 	clz	r1, r1
   20cac:	e1a012a1 	lsr	r1, r1, #5
   20cb0:	ea0000e0 	b	21038 <CGPIOPin::Write(unsigned int)>
   20cb4:	e5903004 	ldr	r3, [r0, #4]
   20cb8:	e3530000 	cmp	r3, #0
   20cbc:	012fff1e 	bxeq	lr
   20cc0:	e5901008 	ldr	r1, [r0, #8]
   20cc4:	e1a00003 	mov	r0, r3
   20cc8:	e16f1f11 	clz	r1, r1
   20ccc:	e1a012a1 	lsr	r1, r1, #5
   20cd0:	ea001ed2 	b	28820 <CVirtualGPIOPin::Write(unsigned int)>

00020cd4 <CActLED::CActLED()>:
   20cd4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   20cd8:	e3023820 	movw	r3, #10272	; 0x2820
   20cdc:	e24dd024 	sub	sp, sp, #36	; 0x24
   20ce0:	e1a04000 	mov	r4, r0
   20ce4:	e3403143 	movt	r3, #323	; 0x143
   20ce8:	e3a05000 	mov	r5, #0
   20cec:	e28d0008 	add	r0, sp, #8
   20cf0:	e5845000 	str	r5, [r4]
   20cf4:	e5845004 	str	r5, [r4, #4]
   20cf8:	e5834000 	str	r4, [r3]
   20cfc:	eb000052 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   20d00:	e3a03010 	mov	r3, #16
   20d04:	e58d5000 	str	r5, [sp]
   20d08:	e28d0008 	add	r0, sp, #8
   20d0c:	e3a01002 	mov	r1, #2
   20d10:	e08d2003 	add	r2, sp, r3
   20d14:	e3401001 	movt	r1, #1
   20d18:	eb000093 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   20d1c:	e1500005 	cmp	r0, r5
   20d20:	0a000011 	beq	20d6c <CActLED::CActLED()+0x98>
   20d24:	e59d301c 	ldr	r3, [sp, #28]
   20d28:	e3130502 	tst	r3, #8388608	; 0x800000
   20d2c:	1a000013 	bne	20d80 <CActLED::CActLED()+0xac>
   20d30:	e6ff3073 	uxth	r3, r3
   20d34:	e353000f 	cmp	r3, #15
   20d38:	83a06001 	movhi	r6, #1
   20d3c:	9a000020 	bls	20dc4 <CActLED::CActLED()+0xf0>
   20d40:	e3a00028 	mov	r0, #40	; 0x28
   20d44:	eb000488 	bl	21f6c <operator new(unsigned int)>
   20d48:	e3a03000 	mov	r3, #0
   20d4c:	e3a02001 	mov	r2, #1
   20d50:	e3a0102f 	mov	r1, #47	; 0x2f
   20d54:	e1a05000 	mov	r5, r0
   20d58:	eb00034c 	bl	21a90 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   20d5c:	e5845000 	str	r5, [r4]
   20d60:	e5846008 	str	r6, [r4, #8]
   20d64:	e1a00004 	mov	r0, r4
   20d68:	ebffffc9 	bl	20c94 <CActLED::Off()>
   20d6c:	e28d0008 	add	r0, sp, #8
   20d70:	eb00003b 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   20d74:	e1a00004 	mov	r0, r4
   20d78:	e28dd024 	add	sp, sp, #36	; 0x24
   20d7c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   20d80:	e7e73253 	ubfx	r3, r3, #4, #8
   20d84:	e3530001 	cmp	r3, #1
   20d88:	9a00000d 	bls	20dc4 <CActLED::CActLED()+0xf0>
   20d8c:	e353000c 	cmp	r3, #12
   20d90:	13530009 	cmpne	r3, #9
   20d94:	03a06001 	moveq	r6, #1
   20d98:	13a06000 	movne	r6, #0
   20d9c:	e3530008 	cmp	r3, #8
   20da0:	e2266001 	eor	r6, r6, #1
   20da4:	1affffe5 	bne	20d40 <CActLED::CActLED()+0x6c>
   20da8:	e3a00010 	mov	r0, #16
   20dac:	eb00046e 	bl	21f6c <operator new(unsigned int)>
   20db0:	e1a01005 	mov	r1, r5
   20db4:	e1a07000 	mov	r7, r0
   20db8:	eb001e5c 	bl	28730 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
   20dbc:	e5847004 	str	r7, [r4, #4]
   20dc0:	eaffffe6 	b	20d60 <CActLED::CActLED()+0x8c>
   20dc4:	e3a00028 	mov	r0, #40	; 0x28
   20dc8:	eb000467 	bl	21f6c <operator new(unsigned int)>
   20dcc:	e3a03000 	mov	r3, #0
   20dd0:	e3a02001 	mov	r2, #1
   20dd4:	e3a01010 	mov	r1, #16
   20dd8:	e1a05000 	mov	r5, r0
   20ddc:	eb00032b 	bl	21a90 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   20de0:	e3a03000 	mov	r3, #0
   20de4:	e5845000 	str	r5, [r4]
   20de8:	e5843008 	str	r3, [r4, #8]
   20dec:	eaffffdc 	b	20d64 <CActLED::CActLED()+0x90>

00020df0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   20df0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20df4:	e2516000 	subs	r6, r1, #0
   20df8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20dfc:	e1a08003 	mov	r8, r3
   20e00:	e1a07002 	mov	r7, r2
   20e04:	e1a05000 	mov	r5, r0
   20e08:	e3a04001 	mov	r4, #1
   20e0c:	e1a00005 	mov	r0, r5
   20e10:	e2844001 	add	r4, r4, #1
   20e14:	ebffff8e 	bl	20c54 <CActLED::On()>
   20e18:	e1a00007 	mov	r0, r7
   20e1c:	eb00076b 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
   20e20:	e1a00005 	mov	r0, r5
   20e24:	ebffff9a 	bl	20c94 <CActLED::Off()>
   20e28:	e1a00008 	mov	r0, r8
   20e2c:	eb000767 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
   20e30:	e1560004 	cmp	r6, r4
   20e34:	2afffff4 	bcs	20e0c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   20e38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00020e3c <CActLED::Get()>:
   20e3c:	e3023820 	movw	r3, #10272	; 0x2820
   20e40:	e3403143 	movt	r3, #323	; 0x143
   20e44:	e5930000 	ldr	r0, [r3]
   20e48:	e12fff1e 	bx	lr

00020e4c <CBcmPropertyTags::CBcmPropertyTags()>:
   20e4c:	e92d4010 	push	{r4, lr}
   20e50:	e3a01008 	mov	r1, #8
   20e54:	e1a04000 	mov	r4, r0
   20e58:	eb00232f 	bl	29b1c <CBcmMailBox::CBcmMailBox(unsigned int)>
   20e5c:	e1a00004 	mov	r0, r4
   20e60:	e8bd8010 	pop	{r4, pc}

00020e64 <CBcmPropertyTags::~CBcmPropertyTags()>:
   20e64:	e92d4010 	push	{r4, lr}
   20e68:	e1a04000 	mov	r4, r0
   20e6c:	eb00232d 	bl	29b28 <CBcmMailBox::~CBcmMailBox()>
   20e70:	e1a00004 	mov	r0, r4
   20e74:	e8bd8010 	pop	{r4, pc}

00020e78 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   20e78:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20e7c:	e2519000 	subs	r9, r1, #0
   20e80:	e1a0a000 	mov	sl, r0
   20e84:	e1a04002 	mov	r4, r2
   20e88:	0a000030 	beq	20f50 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
   20e8c:	e354000f 	cmp	r4, #15
   20e90:	9a000027 	bls	20f34 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
   20e94:	e284800c 	add	r8, r4, #12
   20e98:	e3180003 	tst	r8, #3
   20e9c:	1a00001d 	bne	20f18 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   20ea0:	e3a05008 	mov	r5, #8
   20ea4:	e3405040 	movt	r5, #64	; 0x40
   20ea8:	e3a06501 	mov	r6, #4194304	; 0x400000
   20eac:	e3a07000 	mov	r7, #0
   20eb0:	e1a00005 	mov	r0, r5
   20eb4:	e5868000 	str	r8, [r6]
   20eb8:	e5867004 	str	r7, [r6, #4]
   20ebc:	e1a02004 	mov	r2, r4
   20ec0:	e1a01009 	mov	r1, r9
   20ec4:	eb0008b4 	bl	2319c <memcpy>
   20ec8:	e7857004 	str	r7, [r5, r4]
   20ecc:	f57ff04f 	dsb	sy
   20ed0:	e1a01007 	mov	r1, r7
   20ed4:	e1a0000a 	mov	r0, sl
   20ed8:	e34c1040 	movt	r1, #49216	; 0xc040
   20edc:	eb002341 	bl	29be8 <CBcmMailBox::WriteRead(unsigned int)>
   20ee0:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
   20ee4:	0a000001 	beq	20ef0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
   20ee8:	e3a00000 	mov	r0, #0
   20eec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20ef0:	f57ff05f 	dmb	sy
   20ef4:	e5963004 	ldr	r3, [r6, #4]
   20ef8:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   20efc:	1afffff9 	bne	20ee8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
   20f00:	e1a02004 	mov	r2, r4
   20f04:	e1a01005 	mov	r1, r5
   20f08:	e1a00009 	mov	r0, r9
   20f0c:	eb0008a2 	bl	2319c <memcpy>
   20f10:	e3a00001 	mov	r0, #1
   20f14:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20f18:	e30f170c 	movw	r1, #63244	; 0xf70c
   20f1c:	e30f0758 	movw	r0, #63320	; 0xf758
   20f20:	e3401002 	movt	r1, #2
   20f24:	e3400002 	movt	r0, #2
   20f28:	e3a02051 	mov	r2, #81	; 0x51
   20f2c:	eb000f1a 	bl	24b9c <assertion_failed>
   20f30:	eaffffda 	b	20ea0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
   20f34:	e30f170c 	movw	r1, #63244	; 0xf70c
   20f38:	e30f072c 	movw	r0, #63276	; 0xf72c
   20f3c:	e3401002 	movt	r1, #2
   20f40:	e3400002 	movt	r0, #2
   20f44:	e3a0204f 	mov	r2, #79	; 0x4f
   20f48:	eb000f13 	bl	24b9c <assertion_failed>
   20f4c:	eaffffd0 	b	20e94 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
   20f50:	e30f170c 	movw	r1, #63244	; 0xf70c
   20f54:	e30f0720 	movw	r0, #63264	; 0xf720
   20f58:	e3401002 	movt	r1, #2
   20f5c:	e3400002 	movt	r0, #2
   20f60:	e3a0204e 	mov	r2, #78	; 0x4e
   20f64:	eb000f0c 	bl	24b9c <assertion_failed>
   20f68:	eaffffc7 	b	20e8c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00020f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   20f6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20f70:	e2524000 	subs	r4, r2, #0
   20f74:	e1a07000 	mov	r7, r0
   20f78:	e1a08001 	mov	r8, r1
   20f7c:	e1a05003 	mov	r5, r3
   20f80:	e59d6018 	ldr	r6, [sp, #24]
   20f84:	0a00001d 	beq	21000 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
   20f88:	e355000f 	cmp	r5, #15
   20f8c:	9a000014 	bls	20fe4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
   20f90:	e245300c 	sub	r3, r5, #12
   20f94:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
   20f98:	e5848000 	str	r8, [r4]
   20f9c:	e1a00007 	mov	r0, r7
   20fa0:	e5846008 	str	r6, [r4, #8]
   20fa4:	e1a02005 	mov	r2, r5
   20fa8:	e5843004 	str	r3, [r4, #4]
   20fac:	e1a01004 	mov	r1, r4
   20fb0:	ebffffb0 	bl	20e78 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   20fb4:	e3500000 	cmp	r0, #0
   20fb8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20fbc:	e5940008 	ldr	r0, [r4, #8]
   20fc0:	e3500000 	cmp	r0, #0
   20fc4:	ba000001 	blt	20fd0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
   20fc8:	e3a00000 	mov	r0, #0
   20fcc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20fd0:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   20fd4:	e5840008 	str	r0, [r4, #8]
   20fd8:	e2900000 	adds	r0, r0, #0
   20fdc:	13a00001 	movne	r0, #1
   20fe0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20fe4:	e30f170c 	movw	r1, #63244	; 0xf70c
   20fe8:	e30f077c 	movw	r0, #63356	; 0xf77c
   20fec:	e3401002 	movt	r1, #2
   20ff0:	e3400002 	movt	r0, #2
   20ff4:	e3a02032 	mov	r2, #50	; 0x32
   20ff8:	eb000ee7 	bl	24b9c <assertion_failed>
   20ffc:	eaffffe3 	b	20f90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
   21000:	e30f170c 	movw	r1, #63244	; 0xf70c
   21004:	e30f0770 	movw	r0, #63344	; 0xf770
   21008:	e3401002 	movt	r1, #2
   2100c:	e3400002 	movt	r0, #2
   21010:	e3a02031 	mov	r2, #49	; 0x31
   21014:	eb000ee0 	bl	24b9c <assertion_failed>
   21018:	eaffffda 	b	20f88 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

0002101c <CGPIOPin::~CGPIOPin()>:
   2101c:	e12fff1e 	bx	lr

00021020 <CGPIOPin::~CGPIOPin()>:
   21020:	e92d4010 	push	{r4, lr}
   21024:	e3a01028 	mov	r1, #40	; 0x28
   21028:	e1a04000 	mov	r4, r0
   2102c:	eb0003d2 	bl	21f7c <operator delete(void*, unsigned int)>
   21030:	e1a00004 	mov	r0, r4
   21034:	e8bd8010 	pop	{r4, pc}

00021038 <CGPIOPin::Write(unsigned int)>:
   21038:	e5d03010 	ldrb	r3, [r0, #16]
   2103c:	e92d4070 	push	{r4, r5, r6, lr}
   21040:	e3530003 	cmp	r3, #3
   21044:	e1a04000 	mov	r4, r0
   21048:	e1a05001 	mov	r5, r1
   2104c:	ca000016 	bgt	210ac <CGPIOPin::Write(unsigned int)+0x74>
   21050:	e3550001 	cmp	r5, #1
   21054:	9a00000c 	bls	2108c <CGPIOPin::Write(unsigned int)+0x54>
   21058:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   2105c:	e30f07fc 	movw	r0, #63484	; 0xf7fc
   21060:	e3401002 	movt	r1, #2
   21064:	e3400002 	movt	r0, #2
   21068:	e3a02084 	mov	r2, #132	; 0x84
   2106c:	eb000eca 	bl	24b9c <assertion_failed>
   21070:	e3a0301c 	mov	r3, #28
   21074:	e3433f20 	movt	r3, #16160	; 0x3f20
   21078:	e5845014 	str	r5, [r4, #20]
   2107c:	e594100c 	ldr	r1, [r4, #12]
   21080:	e5942008 	ldr	r2, [r4, #8]
   21084:	e7831002 	str	r1, [r3, r2]
   21088:	e8bd8070 	pop	{r4, r5, r6, pc}
   2108c:	e3a02028 	mov	r2, #40	; 0x28
   21090:	e3550000 	cmp	r5, #0
   21094:	e3432f20 	movt	r2, #16160	; 0x3f20
   21098:	e3a0301c 	mov	r3, #28
   2109c:	e5845014 	str	r5, [r4, #20]
   210a0:	e3433f20 	movt	r3, #16160	; 0x3f20
   210a4:	01a03002 	moveq	r3, r2
   210a8:	eafffff3 	b	2107c <CGPIOPin::Write(unsigned int)+0x44>
   210ac:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   210b0:	e30f07d8 	movw	r0, #63448	; 0xf7d8
   210b4:	e3401002 	movt	r1, #2
   210b8:	e3400002 	movt	r0, #2
   210bc:	e3a02080 	mov	r2, #128	; 0x80
   210c0:	eb000eb5 	bl	24b9c <assertion_failed>
   210c4:	eaffffe1 	b	21050 <CGPIOPin::Write(unsigned int)+0x18>

000210c8 <CGPIOPin::Read() const>:
   210c8:	e5d03010 	ldrb	r3, [r0, #16]
   210cc:	e92d4010 	push	{r4, lr}
   210d0:	e2432002 	sub	r2, r3, #2
   210d4:	e3530000 	cmp	r3, #0
   210d8:	13520001 	cmpne	r2, #1
   210dc:	e1a04000 	mov	r4, r0
   210e0:	9a000005 	bls	210fc <CGPIOPin::Read() const+0x34>
   210e4:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   210e8:	e30f081c 	movw	r0, #63516	; 0xf81c
   210ec:	e3401002 	movt	r1, #2
   210f0:	e3400002 	movt	r0, #2
   210f4:	e3a02092 	mov	r2, #146	; 0x92
   210f8:	eb000ea7 	bl	24b9c <assertion_failed>
   210fc:	e5941008 	ldr	r1, [r4, #8]
   21100:	e3a03034 	mov	r3, #52	; 0x34
   21104:	e3433f20 	movt	r3, #16160	; 0x3f20
   21108:	e594200c 	ldr	r2, [r4, #12]
   2110c:	e7913003 	ldr	r3, [r1, r3]
   21110:	e1130002 	tst	r3, r2
   21114:	13a00001 	movne	r0, #1
   21118:	03a00000 	moveq	r0, #0
   2111c:	e8bd8010 	pop	{r4, pc}

00021120 <CGPIOPin::Invert()>:
   21120:	e5d03010 	ldrb	r3, [r0, #16]
   21124:	e92d4010 	push	{r4, lr}
   21128:	e3530001 	cmp	r3, #1
   2112c:	e1a04000 	mov	r4, r0
   21130:	0a000005 	beq	2114c <CGPIOPin::Invert()+0x2c>
   21134:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21138:	e30f0878 	movw	r0, #63608	; 0xf878
   2113c:	e3401002 	movt	r1, #2
   21140:	e3400002 	movt	r0, #2
   21144:	e3a0209f 	mov	r2, #159	; 0x9f
   21148:	eb000e93 	bl	24b9c <assertion_failed>
   2114c:	e5941014 	ldr	r1, [r4, #20]
   21150:	e1a00004 	mov	r0, r4
   21154:	e8bd4010 	pop	{r4, lr}
   21158:	e2211001 	eor	r1, r1, #1
   2115c:	eaffffb5 	b	21038 <CGPIOPin::Write(unsigned int)>

00021160 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
   21160:	e5d03010 	ldrb	r3, [r0, #16]
   21164:	e92d4070 	push	{r4, r5, r6, lr}
   21168:	e1a06002 	mov	r6, r2
   2116c:	e2432002 	sub	r2, r3, #2
   21170:	e1a04000 	mov	r4, r0
   21174:	e3530000 	cmp	r3, #0
   21178:	13520001 	cmpne	r2, #1
   2117c:	e1a05001 	mov	r5, r1
   21180:	9a000005 	bls	2119c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
   21184:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21188:	e30f081c 	movw	r0, #63516	; 0xf81c
   2118c:	e3401002 	movt	r1, #2
   21190:	e3400002 	movt	r0, #2
   21194:	e3a020a8 	mov	r2, #168	; 0xa8
   21198:	eb000e7f 	bl	24b9c <assertion_failed>
   2119c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   211a0:	e3530006 	cmp	r3, #6
   211a4:	0a000005 	beq	211c0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
   211a8:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   211ac:	e30f0894 	movw	r0, #63636	; 0xf894
   211b0:	e3401002 	movt	r1, #2
   211b4:	e3400002 	movt	r0, #2
   211b8:	e3a020aa 	mov	r2, #170	; 0xaa
   211bc:	eb000e76 	bl	24b9c <assertion_failed>
   211c0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   211c4:	e3530006 	cmp	r3, #6
   211c8:	0a000005 	beq	211e4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
   211cc:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   211d0:	e30f08b8 	movw	r0, #63672	; 0xf8b8
   211d4:	e3401002 	movt	r1, #2
   211d8:	e3400002 	movt	r0, #2
   211dc:	e3a020ab 	mov	r2, #171	; 0xab
   211e0:	eb000e6d 	bl	24b9c <assertion_failed>
   211e4:	e3550000 	cmp	r5, #0
   211e8:	0a00001a 	beq	21258 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
   211ec:	e594301c 	ldr	r3, [r4, #28]
   211f0:	e3530000 	cmp	r3, #0
   211f4:	0a000005 	beq	21210 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
   211f8:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   211fc:	e30f08e0 	movw	r0, #63712	; 0xf8e0
   21200:	e3401002 	movt	r1, #2
   21204:	e3400002 	movt	r0, #2
   21208:	e3a020ae 	mov	r2, #174	; 0xae
   2120c:	eb000e62 	bl	24b9c <assertion_failed>
   21210:	e5940018 	ldr	r0, [r4, #24]
   21214:	e584501c 	str	r5, [r4, #28]
   21218:	e3500000 	cmp	r0, #0
   2121c:	e5846020 	str	r6, [r4, #32]
   21220:	0a000002 	beq	21230 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
   21224:	e1a01004 	mov	r1, r4
   21228:	e8bd4070 	pop	{r4, r5, r6, lr}
   2122c:	ea00194d 	b	27768 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   21230:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21234:	e30f08f0 	movw	r0, #63728	; 0xf8f0
   21238:	e3401002 	movt	r1, #2
   2123c:	e3400002 	movt	r0, #2
   21240:	e3a020b3 	mov	r2, #179	; 0xb3
   21244:	eb000e54 	bl	24b9c <assertion_failed>
   21248:	e5940018 	ldr	r0, [r4, #24]
   2124c:	e1a01004 	mov	r1, r4
   21250:	e8bd4070 	pop	{r4, r5, r6, lr}
   21254:	ea001943 	b	27768 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   21258:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   2125c:	e3000f24 	movw	r0, #3876	; 0xf24
   21260:	e3401002 	movt	r1, #2
   21264:	e3400003 	movt	r0, #3
   21268:	e3a020ad 	mov	r2, #173	; 0xad
   2126c:	eb000e4a 	bl	24b9c <assertion_failed>
   21270:	eaffffdd 	b	211ec <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

00021274 <CGPIOPin::DisconnectInterrupt()>:
   21274:	e5d03010 	ldrb	r3, [r0, #16]
   21278:	e92d4010 	push	{r4, lr}
   2127c:	e2432002 	sub	r2, r3, #2
   21280:	e3530000 	cmp	r3, #0
   21284:	13520001 	cmpne	r2, #1
   21288:	e1a04000 	mov	r4, r0
   2128c:	9a000005 	bls	212a8 <CGPIOPin::DisconnectInterrupt()+0x34>
   21290:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21294:	e30f081c 	movw	r0, #63516	; 0xf81c
   21298:	e3401002 	movt	r1, #2
   2129c:	e3400002 	movt	r0, #2
   212a0:	e3a020bb 	mov	r2, #187	; 0xbb
   212a4:	eb000e3c 	bl	24b9c <assertion_failed>
   212a8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   212ac:	e3530006 	cmp	r3, #6
   212b0:	0a000005 	beq	212cc <CGPIOPin::DisconnectInterrupt()+0x58>
   212b4:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   212b8:	e30f0894 	movw	r0, #63636	; 0xf894
   212bc:	e3401002 	movt	r1, #2
   212c0:	e3400002 	movt	r0, #2
   212c4:	e3a020bd 	mov	r2, #189	; 0xbd
   212c8:	eb000e33 	bl	24b9c <assertion_failed>
   212cc:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   212d0:	e3530006 	cmp	r3, #6
   212d4:	0a000005 	beq	212f0 <CGPIOPin::DisconnectInterrupt()+0x7c>
   212d8:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   212dc:	e30f08b8 	movw	r0, #63672	; 0xf8b8
   212e0:	e3401002 	movt	r1, #2
   212e4:	e3400002 	movt	r0, #2
   212e8:	e3a020be 	mov	r2, #190	; 0xbe
   212ec:	eb000e2a 	bl	24b9c <assertion_failed>
   212f0:	e594301c 	ldr	r3, [r4, #28]
   212f4:	e3530000 	cmp	r3, #0
   212f8:	0a000011 	beq	21344 <CGPIOPin::DisconnectInterrupt()+0xd0>
   212fc:	e5940018 	ldr	r0, [r4, #24]
   21300:	e3a03000 	mov	r3, #0
   21304:	e584301c 	str	r3, [r4, #28]
   21308:	e1500003 	cmp	r0, r3
   2130c:	0a000002 	beq	2131c <CGPIOPin::DisconnectInterrupt()+0xa8>
   21310:	e1a01004 	mov	r1, r4
   21314:	e8bd4010 	pop	{r4, lr}
   21318:	ea00193e 	b	27818 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   2131c:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21320:	e30f08f0 	movw	r0, #63728	; 0xf8f0
   21324:	e3401002 	movt	r1, #2
   21328:	e3400002 	movt	r0, #2
   2132c:	e3a020c3 	mov	r2, #195	; 0xc3
   21330:	eb000e19 	bl	24b9c <assertion_failed>
   21334:	e5940018 	ldr	r0, [r4, #24]
   21338:	e1a01004 	mov	r1, r4
   2133c:	e8bd4010 	pop	{r4, lr}
   21340:	ea001934 	b	27818 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   21344:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21348:	e30f0900 	movw	r0, #63744	; 0xf900
   2134c:	e3401002 	movt	r1, #2
   21350:	e3400002 	movt	r0, #2
   21354:	e3a020c0 	mov	r2, #192	; 0xc0
   21358:	eb000e0f 	bl	24b9c <assertion_failed>
   2135c:	eaffffe6 	b	212fc <CGPIOPin::DisconnectInterrupt()+0x88>

00021360 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   21360:	e5d03010 	ldrb	r3, [r0, #16]
   21364:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21368:	e2432002 	sub	r2, r3, #2
   2136c:	e3530000 	cmp	r3, #0
   21370:	13520001 	cmpne	r2, #1
   21374:	e1a04000 	mov	r4, r0
   21378:	e1a08001 	mov	r8, r1
   2137c:	9a000005 	bls	21398 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
   21380:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21384:	e30f081c 	movw	r0, #63516	; 0xf81c
   21388:	e3401002 	movt	r1, #2
   2138c:	e3400002 	movt	r0, #2
   21390:	e3a020cb 	mov	r2, #203	; 0xcb
   21394:	eb000e00 	bl	24b9c <assertion_failed>
   21398:	e594301c 	ldr	r3, [r4, #28]
   2139c:	e3530000 	cmp	r3, #0
   213a0:	0a000034 	beq	21478 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
   213a4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   213a8:	e3530006 	cmp	r3, #6
   213ac:	0a000005 	beq	213c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x68>
   213b0:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   213b4:	e30f0894 	movw	r0, #63636	; 0xf894
   213b8:	e3401002 	movt	r1, #2
   213bc:	e3400002 	movt	r0, #2
   213c0:	e3a020ce 	mov	r2, #206	; 0xce
   213c4:	eb000df4 	bl	24b9c <assertion_failed>
   213c8:	e3580005 	cmp	r8, #5
   213cc:	ca000019 	bgt	21438 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd8>
   213d0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   213d4:	e1530008 	cmp	r3, r8
   213d8:	0a00001f 	beq	2145c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xfc>
   213dc:	e3026824 	movw	r6, #10276	; 0x2824
   213e0:	e3406143 	movt	r6, #323	; 0x143
   213e4:	e5943008 	ldr	r3, [r4, #8]
   213e8:	e3a0504c 	mov	r5, #76	; 0x4c
   213ec:	e5960000 	ldr	r0, [r6]
   213f0:	e3435f20 	movt	r5, #16160	; 0x3f20
   213f4:	e3a0700c 	mov	r7, #12
   213f8:	e5c48024 	strb	r8, [r4, #36]	; 0x24
   213fc:	e3500000 	cmp	r0, #0
   21400:	e0835005 	add	r5, r3, r5
   21404:	e0070897 	mul	r7, r7, r8
   21408:	1a000008 	bne	21430 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd0>
   2140c:	e594200c 	ldr	r2, [r4, #12]
   21410:	e7953007 	ldr	r3, [r5, r7]
   21414:	e1833002 	orr	r3, r3, r2
   21418:	e7853007 	str	r3, [r5, r7]
   2141c:	e5963000 	ldr	r3, [r6]
   21420:	e3530000 	cmp	r3, #0
   21424:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21428:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2142c:	ea000308 	b	22054 <LeaveCritical>
   21430:	eb0002d9 	bl	21f9c <EnterCritical>
   21434:	eafffff4 	b	2140c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
   21438:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   2143c:	e30f0910 	movw	r0, #63760	; 0xf910
   21440:	e3401002 	movt	r1, #2
   21444:	e3400002 	movt	r0, #2
   21448:	e3a020cf 	mov	r2, #207	; 0xcf
   2144c:	eb000dd2 	bl	24b9c <assertion_failed>
   21450:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   21454:	e1530008 	cmp	r3, r8
   21458:	1affffdf 	bne	213dc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
   2145c:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21460:	e30f0934 	movw	r0, #63796	; 0xf934
   21464:	e3401002 	movt	r1, #2
   21468:	e3400002 	movt	r0, #2
   2146c:	e3a020d0 	mov	r2, #208	; 0xd0
   21470:	eb000dc9 	bl	24b9c <assertion_failed>
   21474:	eaffffd8 	b	213dc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
   21478:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   2147c:	e30f0900 	movw	r0, #63744	; 0xf900
   21480:	e3401002 	movt	r1, #2
   21484:	e3400002 	movt	r0, #2
   21488:	e3a020cc 	mov	r2, #204	; 0xcc
   2148c:	eb000dc2 	bl	24b9c <assertion_failed>
   21490:	eaffffc3 	b	213a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>

00021494 <CGPIOPin::DisableInterrupt()>:
   21494:	e5d03010 	ldrb	r3, [r0, #16]
   21498:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2149c:	e2432002 	sub	r2, r3, #2
   214a0:	e3530000 	cmp	r3, #0
   214a4:	13520001 	cmpne	r2, #1
   214a8:	e1a04000 	mov	r4, r0
   214ac:	9a000005 	bls	214c8 <CGPIOPin::DisableInterrupt()+0x34>
   214b0:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   214b4:	e30f081c 	movw	r0, #63516	; 0xf81c
   214b8:	e3401002 	movt	r1, #2
   214bc:	e3400002 	movt	r0, #2
   214c0:	e3a020e1 	mov	r2, #225	; 0xe1
   214c4:	eb000db4 	bl	24b9c <assertion_failed>
   214c8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   214cc:	e3530005 	cmp	r3, #5
   214d0:	ca000017 	bgt	21534 <CGPIOPin::DisableInterrupt()+0xa0>
   214d4:	e3026824 	movw	r6, #10276	; 0x2824
   214d8:	e3406143 	movt	r6, #323	; 0x143
   214dc:	e5942008 	ldr	r2, [r4, #8]
   214e0:	e3a0504c 	mov	r5, #76	; 0x4c
   214e4:	e5960000 	ldr	r0, [r6]
   214e8:	e3435f20 	movt	r5, #16160	; 0x3f20
   214ec:	e3a0700c 	mov	r7, #12
   214f0:	e0825005 	add	r5, r2, r5
   214f4:	e3500000 	cmp	r0, #0
   214f8:	e0070397 	mul	r7, r7, r3
   214fc:	1a00000a 	bne	2152c <CGPIOPin::DisableInterrupt()+0x98>
   21500:	e7953007 	ldr	r3, [r5, r7]
   21504:	e594200c 	ldr	r2, [r4, #12]
   21508:	e1c33002 	bic	r3, r3, r2
   2150c:	e7853007 	str	r3, [r5, r7]
   21510:	e5963000 	ldr	r3, [r6]
   21514:	e3530000 	cmp	r3, #0
   21518:	0a000000 	beq	21520 <CGPIOPin::DisableInterrupt()+0x8c>
   2151c:	eb0002cc 	bl	22054 <LeaveCritical>
   21520:	e3a03006 	mov	r3, #6
   21524:	e5c43024 	strb	r3, [r4, #36]	; 0x24
   21528:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2152c:	eb00029a 	bl	21f9c <EnterCritical>
   21530:	eafffff2 	b	21500 <CGPIOPin::DisableInterrupt()+0x6c>
   21534:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21538:	e30f0950 	movw	r0, #63824	; 0xf950
   2153c:	e3401002 	movt	r1, #2
   21540:	e3400002 	movt	r0, #2
   21544:	e3a020e3 	mov	r2, #227	; 0xe3
   21548:	eb000d93 	bl	24b9c <assertion_failed>
   2154c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   21550:	eaffffdf 	b	214d4 <CGPIOPin::DisableInterrupt()+0x40>

00021554 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   21554:	e5d03010 	ldrb	r3, [r0, #16]
   21558:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2155c:	e2432002 	sub	r2, r3, #2
   21560:	e3530000 	cmp	r3, #0
   21564:	13520001 	cmpne	r2, #1
   21568:	e1a04000 	mov	r4, r0
   2156c:	e1a08001 	mov	r8, r1
   21570:	9a000005 	bls	2158c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
   21574:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21578:	e30f081c 	movw	r0, #63516	; 0xf81c
   2157c:	e3401002 	movt	r1, #2
   21580:	e3400002 	movt	r0, #2
   21584:	e3a020f4 	mov	r2, #244	; 0xf4
   21588:	eb000d83 	bl	24b9c <assertion_failed>
   2158c:	e594301c 	ldr	r3, [r4, #28]
   21590:	e3530000 	cmp	r3, #0
   21594:	0a000034 	beq	2166c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
   21598:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   2159c:	e3530006 	cmp	r3, #6
   215a0:	0a000005 	beq	215bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x68>
   215a4:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   215a8:	e30f08b8 	movw	r0, #63672	; 0xf8b8
   215ac:	e3401002 	movt	r1, #2
   215b0:	e3400002 	movt	r0, #2
   215b4:	e3a020f7 	mov	r2, #247	; 0xf7
   215b8:	eb000d77 	bl	24b9c <assertion_failed>
   215bc:	e3580005 	cmp	r8, #5
   215c0:	ca000019 	bgt	2162c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd8>
   215c4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   215c8:	e1530008 	cmp	r3, r8
   215cc:	0a00001f 	beq	21650 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
   215d0:	e3026824 	movw	r6, #10276	; 0x2824
   215d4:	e3406143 	movt	r6, #323	; 0x143
   215d8:	e5943008 	ldr	r3, [r4, #8]
   215dc:	e3a0504c 	mov	r5, #76	; 0x4c
   215e0:	e5960000 	ldr	r0, [r6]
   215e4:	e3435f20 	movt	r5, #16160	; 0x3f20
   215e8:	e3a0700c 	mov	r7, #12
   215ec:	e5c48025 	strb	r8, [r4, #37]	; 0x25
   215f0:	e3500000 	cmp	r0, #0
   215f4:	e0835005 	add	r5, r3, r5
   215f8:	e0070897 	mul	r7, r7, r8
   215fc:	1a000008 	bne	21624 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd0>
   21600:	e594200c 	ldr	r2, [r4, #12]
   21604:	e7953007 	ldr	r3, [r5, r7]
   21608:	e1833002 	orr	r3, r3, r2
   2160c:	e7853007 	str	r3, [r5, r7]
   21610:	e5963000 	ldr	r3, [r6]
   21614:	e3530000 	cmp	r3, #0
   21618:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2161c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21620:	ea00028b 	b	22054 <LeaveCritical>
   21624:	eb00025c 	bl	21f9c <EnterCritical>
   21628:	eafffff4 	b	21600 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
   2162c:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21630:	e30f0910 	movw	r0, #63760	; 0xf910
   21634:	e3401002 	movt	r1, #2
   21638:	e3400002 	movt	r0, #2
   2163c:	e3a020f8 	mov	r2, #248	; 0xf8
   21640:	eb000d55 	bl	24b9c <assertion_failed>
   21644:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   21648:	e1530008 	cmp	r3, r8
   2164c:	1affffdf 	bne	215d0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
   21650:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21654:	e30f0974 	movw	r0, #63860	; 0xf974
   21658:	e3401002 	movt	r1, #2
   2165c:	e3400002 	movt	r0, #2
   21660:	e3a020f9 	mov	r2, #249	; 0xf9
   21664:	eb000d4c 	bl	24b9c <assertion_failed>
   21668:	eaffffd8 	b	215d0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
   2166c:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21670:	e30f0900 	movw	r0, #63744	; 0xf900
   21674:	e3401002 	movt	r1, #2
   21678:	e3400002 	movt	r0, #2
   2167c:	e3a020f5 	mov	r2, #245	; 0xf5
   21680:	eb000d45 	bl	24b9c <assertion_failed>
   21684:	eaffffc3 	b	21598 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>

00021688 <CGPIOPin::DisableInterrupt2()>:
   21688:	e5d03010 	ldrb	r3, [r0, #16]
   2168c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21690:	e2432002 	sub	r2, r3, #2
   21694:	e3530000 	cmp	r3, #0
   21698:	13520001 	cmpne	r2, #1
   2169c:	e1a04000 	mov	r4, r0
   216a0:	9a000005 	bls	216bc <CGPIOPin::DisableInterrupt2()+0x34>
   216a4:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   216a8:	e30f081c 	movw	r0, #63516	; 0xf81c
   216ac:	e3401002 	movt	r1, #2
   216b0:	e3400002 	movt	r0, #2
   216b4:	e300210a 	movw	r2, #266	; 0x10a
   216b8:	eb000d37 	bl	24b9c <assertion_failed>
   216bc:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   216c0:	e3530005 	cmp	r3, #5
   216c4:	ca000017 	bgt	21728 <CGPIOPin::DisableInterrupt2()+0xa0>
   216c8:	e3026824 	movw	r6, #10276	; 0x2824
   216cc:	e3406143 	movt	r6, #323	; 0x143
   216d0:	e5942008 	ldr	r2, [r4, #8]
   216d4:	e3a0504c 	mov	r5, #76	; 0x4c
   216d8:	e5960000 	ldr	r0, [r6]
   216dc:	e3435f20 	movt	r5, #16160	; 0x3f20
   216e0:	e3a0700c 	mov	r7, #12
   216e4:	e0825005 	add	r5, r2, r5
   216e8:	e3500000 	cmp	r0, #0
   216ec:	e0070397 	mul	r7, r7, r3
   216f0:	1a00000a 	bne	21720 <CGPIOPin::DisableInterrupt2()+0x98>
   216f4:	e7953007 	ldr	r3, [r5, r7]
   216f8:	e594200c 	ldr	r2, [r4, #12]
   216fc:	e1c33002 	bic	r3, r3, r2
   21700:	e7853007 	str	r3, [r5, r7]
   21704:	e5963000 	ldr	r3, [r6]
   21708:	e3530000 	cmp	r3, #0
   2170c:	0a000000 	beq	21714 <CGPIOPin::DisableInterrupt2()+0x8c>
   21710:	eb00024f 	bl	22054 <LeaveCritical>
   21714:	e3a03006 	mov	r3, #6
   21718:	e5c43025 	strb	r3, [r4, #37]	; 0x25
   2171c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21720:	eb00021d 	bl	21f9c <EnterCritical>
   21724:	eafffff2 	b	216f4 <CGPIOPin::DisableInterrupt2()+0x6c>
   21728:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   2172c:	e30f0990 	movw	r0, #63888	; 0xf990
   21730:	e3401002 	movt	r1, #2
   21734:	e3400002 	movt	r0, #2
   21738:	e3a02f43 	mov	r2, #268	; 0x10c
   2173c:	eb000d16 	bl	24b9c <assertion_failed>
   21740:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   21744:	eaffffdf 	b	216c8 <CGPIOPin::DisableInterrupt2()+0x40>

00021748 <CGPIOPin::ReadAll()>:
   21748:	e3a03000 	mov	r3, #0
   2174c:	e3433f20 	movt	r3, #16160	; 0x3f20
   21750:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   21754:	e12fff1e 	bx	lr

00021758 <CGPIOPin::SetPullUpMode(unsigned int)>:
   21758:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2175c:	e3025824 	movw	r5, #10276	; 0x2824
   21760:	e3405143 	movt	r5, #323	; 0x143
   21764:	e1a07000 	mov	r7, r0
   21768:	e5973008 	ldr	r3, [r7, #8]
   2176c:	e3a04098 	mov	r4, #152	; 0x98
   21770:	e5950000 	ldr	r0, [r5]
   21774:	e3434f20 	movt	r4, #16160	; 0x3f20
   21778:	e1a08001 	mov	r8, r1
   2177c:	e0834004 	add	r4, r3, r4
   21780:	e3500000 	cmp	r0, #0
   21784:	1a000019 	bne	217f0 <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
   21788:	e3580002 	cmp	r8, #2
   2178c:	8a000010 	bhi	217d4 <CGPIOPin::SetPullUpMode(unsigned int)+0x7c>
   21790:	e3a06000 	mov	r6, #0
   21794:	e3436f20 	movt	r6, #16160	; 0x3f20
   21798:	e3a00005 	mov	r0, #5
   2179c:	e5868094 	str	r8, [r6, #148]	; 0x94
   217a0:	eb00051a 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
   217a4:	e597300c 	ldr	r3, [r7, #12]
   217a8:	e3a00005 	mov	r0, #5
   217ac:	e5843000 	str	r3, [r4]
   217b0:	eb000516 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
   217b4:	e3a03000 	mov	r3, #0
   217b8:	e5863094 	str	r3, [r6, #148]	; 0x94
   217bc:	e5843000 	str	r3, [r4]
   217c0:	e5953000 	ldr	r3, [r5]
   217c4:	e3530000 	cmp	r3, #0
   217c8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   217cc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   217d0:	ea00021f 	b	22054 <LeaveCritical>
   217d4:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   217d8:	e30f09b4 	movw	r0, #63924	; 0xf9b4
   217dc:	e3401002 	movt	r1, #2
   217e0:	e3400002 	movt	r0, #2
   217e4:	e3002125 	movw	r2, #293	; 0x125
   217e8:	eb000ceb 	bl	24b9c <assertion_failed>
   217ec:	eaffffe7 	b	21790 <CGPIOPin::SetPullUpMode(unsigned int)+0x38>
   217f0:	eb0001e9 	bl	21f9c <EnterCritical>
   217f4:	eaffffe3 	b	21788 <CGPIOPin::SetPullUpMode(unsigned int)+0x30>

000217f8 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   217f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   217fc:	e1a06001 	mov	r6, r1
   21800:	e5901004 	ldr	r1, [r0, #4]
   21804:	e3510035 	cmp	r1, #53	; 0x35
   21808:	8a000026 	bhi	218a8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   2180c:	e30c2ccd 	movw	r2, #52429	; 0xcccd
   21810:	e34c2ccc 	movt	r2, #52428	; 0xcccc
   21814:	e3a0000a 	mov	r0, #10
   21818:	e3560005 	cmp	r6, #5
   2181c:	e0832291 	umull	r2, r3, r1, r2
   21820:	e1a041a3 	lsr	r4, r3, #3
   21824:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
   21828:	e0641490 	mls	r4, r0, r4, r1
   2182c:	e2833702 	add	r3, r3, #524288	; 0x80000
   21830:	e1a07103 	lsl	r7, r3, #2
   21834:	e0844084 	add	r4, r4, r4, lsl #1
   21838:	8a000013 	bhi	2188c <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
   2183c:	e3025824 	movw	r5, #10276	; 0x2824
   21840:	e3405143 	movt	r5, #323	; 0x143
   21844:	e5950000 	ldr	r0, [r5]
   21848:	e3500000 	cmp	r0, #0
   2184c:	1a00000c 	bne	21884 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   21850:	e30f27a4 	movw	r2, #63396	; 0xf7a4
   21854:	e3402002 	movt	r2, #2
   21858:	e5973000 	ldr	r3, [r7]
   2185c:	e3a01007 	mov	r1, #7
   21860:	e7922106 	ldr	r2, [r2, r6, lsl #2]
   21864:	e1c33411 	bic	r3, r3, r1, lsl r4
   21868:	e1834412 	orr	r4, r3, r2, lsl r4
   2186c:	e5874000 	str	r4, [r7]
   21870:	e5953000 	ldr	r3, [r5]
   21874:	e3530000 	cmp	r3, #0
   21878:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2187c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21880:	ea0001f3 	b	22054 <LeaveCritical>
   21884:	eb0001c4 	bl	21f9c <EnterCritical>
   21888:	eafffff0 	b	21850 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
   2188c:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21890:	e30f09d4 	movw	r0, #63956	; 0xf9d4
   21894:	e3401002 	movt	r1, #2
   21898:	e3400002 	movt	r0, #2
   2189c:	e3002136 	movw	r2, #310	; 0x136
   218a0:	eb000cbd 	bl	24b9c <assertion_failed>
   218a4:	eaffffe4 	b	2183c <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
   218a8:	e1a04000 	mov	r4, r0
   218ac:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   218b0:	e30f09c0 	movw	r0, #63936	; 0xf9c0
   218b4:	e3401002 	movt	r1, #2
   218b8:	e3400002 	movt	r0, #2
   218bc:	e3002132 	movw	r2, #306	; 0x132
   218c0:	eb000cb5 	bl	24b9c <assertion_failed>
   218c4:	e5941004 	ldr	r1, [r4, #4]
   218c8:	eaffffcf 	b	2180c <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

000218cc <CGPIOPin::SetMode(TGPIOMode, int)>:
   218cc:	e3510009 	cmp	r1, #9
   218d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   218d4:	e1a04001 	mov	r4, r1
   218d8:	e1a05000 	mov	r5, r0
   218dc:	e1a06002 	mov	r6, r2
   218e0:	e1a07001 	mov	r7, r1
   218e4:	ca000037 	bgt	219c8 <CGPIOPin::SetMode(TGPIOMode, int)+0xfc>
   218e8:	e2443004 	sub	r3, r4, #4
   218ec:	e5c54010 	strb	r4, [r5, #16]
   218f0:	e3530005 	cmp	r3, #5
   218f4:	9a00002d 	bls	219b0 <CGPIOPin::SetMode(TGPIOMode, int)+0xe4>
   218f8:	e2963000 	adds	r3, r6, #0
   218fc:	13a03001 	movne	r3, #1
   21900:	e3540001 	cmp	r4, #1
   21904:	13a03000 	movne	r3, #0
   21908:	e3530000 	cmp	r3, #0
   2190c:	1a00005b 	bne	21a80 <CGPIOPin::SetMode(TGPIOMode, int)+0x1b4>
   21910:	e5951004 	ldr	r1, [r5, #4]
   21914:	e3510035 	cmp	r1, #53	; 0x35
   21918:	8a00003a 	bhi	21a08 <CGPIOPin::SetMode(TGPIOMode, int)+0x13c>
   2191c:	e30c2ccd 	movw	r2, #52429	; 0xcccd
   21920:	e34c2ccc 	movt	r2, #52428	; 0xcccc
   21924:	e3a0c00a 	mov	ip, #10
   21928:	e3027824 	movw	r7, #10276	; 0x2824
   2192c:	e0832291 	umull	r2, r3, r1, r2
   21930:	e3407143 	movt	r7, #323	; 0x143
   21934:	e5970000 	ldr	r0, [r7]
   21938:	e3500000 	cmp	r0, #0
   2193c:	e1a041a3 	lsr	r4, r3, #3
   21940:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
   21944:	e064149c 	mls	r4, ip, r4, r1
   21948:	e2833702 	add	r3, r3, #524288	; 0x80000
   2194c:	e1a08103 	lsl	r8, r3, #2
   21950:	e0844084 	add	r4, r4, r4, lsl #1
   21954:	1a000033 	bne	21a28 <CGPIOPin::SetMode(TGPIOMode, int)+0x15c>
   21958:	e5d52010 	ldrb	r2, [r5, #16]
   2195c:	e3a01007 	mov	r1, #7
   21960:	e5983000 	ldr	r3, [r8]
   21964:	e2422001 	sub	r2, r2, #1
   21968:	e16f2f12 	clz	r2, r2
   2196c:	e1c33411 	bic	r3, r3, r1, lsl r4
   21970:	e1a022a2 	lsr	r2, r2, #5
   21974:	e1834412 	orr	r4, r3, r2, lsl r4
   21978:	e5884000 	str	r4, [r8]
   2197c:	e5973000 	ldr	r3, [r7]
   21980:	e3530000 	cmp	r3, #0
   21984:	1a000029 	bne	21a30 <CGPIOPin::SetMode(TGPIOMode, int)+0x164>
   21988:	e3560000 	cmp	r6, #0
   2198c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21990:	e5d53010 	ldrb	r3, [r5, #16]
   21994:	e3530003 	cmp	r3, #3
   21998:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2199c:	ea000010 	b	219e4 <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
   219a0:	00021a70 	.word	0x00021a70
   219a4:	00021a60 	.word	0x00021a60
   219a8:	00021a50 	.word	0x00021a50
   219ac:	00021a40 	.word	0x00021a40
   219b0:	e3560000 	cmp	r6, #0
   219b4:	1a00000b 	bne	219e8 <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
   219b8:	e2471004 	sub	r1, r7, #4
   219bc:	e1a00005 	mov	r0, r5
   219c0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   219c4:	eaffff8b 	b	217f8 <CGPIOPin::SetAlternateFunction(unsigned int)>
   219c8:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   219cc:	e30f09e4 	movw	r0, #63972	; 0xf9e4
   219d0:	e3401002 	movt	r1, #2
   219d4:	e3400002 	movt	r0, #2
   219d8:	e3a0203d 	mov	r2, #61	; 0x3d
   219dc:	eb000c6e 	bl	24b9c <assertion_failed>
   219e0:	eaffffc0 	b	218e8 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c>
   219e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   219e8:	e1a00005 	mov	r0, r5
   219ec:	e3a01000 	mov	r1, #0
   219f0:	ebffff58 	bl	21758 <CGPIOPin::SetPullUpMode(unsigned int)>
   219f4:	e5d57010 	ldrb	r7, [r5, #16]
   219f8:	e1a00005 	mov	r0, r5
   219fc:	e2471004 	sub	r1, r7, #4
   21a00:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21a04:	eaffff7b 	b	217f8 <CGPIOPin::SetAlternateFunction(unsigned int)>
   21a08:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21a0c:	e30f09c0 	movw	r0, #63936	; 0xf9c0
   21a10:	e3401002 	movt	r1, #2
   21a14:	e3400002 	movt	r0, #2
   21a18:	e3a02056 	mov	r2, #86	; 0x56
   21a1c:	eb000c5e 	bl	24b9c <assertion_failed>
   21a20:	e5951004 	ldr	r1, [r5, #4]
   21a24:	eaffffbc 	b	2191c <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
   21a28:	eb00015b 	bl	21f9c <EnterCritical>
   21a2c:	eaffffc9 	b	21958 <CGPIOPin::SetMode(TGPIOMode, int)+0x8c>
   21a30:	eb000187 	bl	22054 <LeaveCritical>
   21a34:	e3560000 	cmp	r6, #0
   21a38:	1affffd4 	bne	21990 <CGPIOPin::SetMode(TGPIOMode, int)+0xc4>
   21a3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21a40:	e1a00005 	mov	r0, r5
   21a44:	e3a01001 	mov	r1, #1
   21a48:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21a4c:	eaffff41 	b	21758 <CGPIOPin::SetPullUpMode(unsigned int)>
   21a50:	e1a00005 	mov	r0, r5
   21a54:	e3a01002 	mov	r1, #2
   21a58:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21a5c:	eaffff3d 	b	21758 <CGPIOPin::SetPullUpMode(unsigned int)>
   21a60:	e1a00005 	mov	r0, r5
   21a64:	e3a01000 	mov	r1, #0
   21a68:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21a6c:	eafffd71 	b	21038 <CGPIOPin::Write(unsigned int)>
   21a70:	e1a00005 	mov	r0, r5
   21a74:	e3a01000 	mov	r1, #0
   21a78:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21a7c:	eaffff35 	b	21758 <CGPIOPin::SetPullUpMode(unsigned int)>
   21a80:	e3a01000 	mov	r1, #0
   21a84:	e1a00005 	mov	r0, r5
   21a88:	ebffff32 	bl	21758 <CGPIOPin::SetPullUpMode(unsigned int)>
   21a8c:	eaffff9f 	b	21910 <CGPIOPin::SetMode(TGPIOMode, int)+0x44>

00021a90 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   21a90:	e59fc0a8 	ldr	ip, [pc, #168]	; 21b40 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xb0>
   21a94:	e3510035 	cmp	r1, #53	; 0x35
   21a98:	e92d4070 	push	{r4, r5, r6, lr}
   21a9c:	e1a06002 	mov	r6, r2
   21aa0:	e5803018 	str	r3, [r0, #24]
   21aa4:	e3a02000 	mov	r2, #0
   21aa8:	e3a0300a 	mov	r3, #10
   21aac:	e1a05001 	mov	r5, r1
   21ab0:	e5c03010 	strb	r3, [r0, #16]
   21ab4:	e1a04000 	mov	r4, r0
   21ab8:	e3a03006 	mov	r3, #6
   21abc:	e5801004 	str	r1, [r0, #4]
   21ac0:	e580c000 	str	ip, [r0]
   21ac4:	e580201c 	str	r2, [r0, #28]
   21ac8:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   21acc:	e5c03025 	strb	r3, [r0, #37]	; 0x25
   21ad0:	8a00000b 	bhi	21b04 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
   21ad4:	e1a032a5 	lsr	r3, r5, #5
   21ad8:	e3a02001 	mov	r2, #1
   21adc:	e205501f 	and	r5, r5, #31
   21ae0:	e1a00004 	mov	r0, r4
   21ae4:	e1a03103 	lsl	r3, r3, #2
   21ae8:	e1a05512 	lsl	r5, r2, r5
   21aec:	e1a01006 	mov	r1, r6
   21af0:	e5843008 	str	r3, [r4, #8]
   21af4:	e584500c 	str	r5, [r4, #12]
   21af8:	ebffff73 	bl	218cc <CGPIOPin::SetMode(TGPIOMode, int)>
   21afc:	e1a00004 	mov	r0, r4
   21b00:	e8bd8070 	pop	{r4, r5, r6, pc}
   21b04:	eb001c4b 	bl	28c38 <CMachineInfo::Get()>
   21b08:	e6ef1075 	uxtb	r1, r5
   21b0c:	eb001c1e 	bl	28b8c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   21b10:	e3500035 	cmp	r0, #53	; 0x35
   21b14:	e1a05000 	mov	r5, r0
   21b18:	e5840004 	str	r0, [r4, #4]
   21b1c:	9affffec 	bls	21ad4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
   21b20:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21b24:	e30f09c0 	movw	r0, #63936	; 0xf9c0
   21b28:	e3401002 	movt	r1, #2
   21b2c:	e3400002 	movt	r0, #2
   21b30:	e3a0202b 	mov	r2, #43	; 0x2b
   21b34:	eb000c18 	bl	24b9c <assertion_failed>
   21b38:	e5945004 	ldr	r5, [r4, #4]
   21b3c:	eaffffe4 	b	21ad4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
   21b40:	0002f7c4 	.word	0x0002f7c4

00021b44 <CGPIOPin::InterruptHandler()>:
   21b44:	e5d03010 	ldrb	r3, [r0, #16]
   21b48:	e92d4010 	push	{r4, lr}
   21b4c:	e2432002 	sub	r2, r3, #2
   21b50:	e3530000 	cmp	r3, #0
   21b54:	13520001 	cmpne	r2, #1
   21b58:	e1a04000 	mov	r4, r0
   21b5c:	9a000005 	bls	21b78 <CGPIOPin::InterruptHandler()+0x34>
   21b60:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21b64:	e30f081c 	movw	r0, #63516	; 0xf81c
   21b68:	e3401002 	movt	r1, #2
   21b6c:	e3400002 	movt	r0, #2
   21b70:	e3002145 	movw	r2, #325	; 0x145
   21b74:	eb000c08 	bl	24b9c <assertion_failed>
   21b78:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   21b7c:	e3530005 	cmp	r3, #5
   21b80:	da000002 	ble	21b90 <CGPIOPin::InterruptHandler()+0x4c>
   21b84:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   21b88:	e3530005 	cmp	r3, #5
   21b8c:	ca000005 	bgt	21ba8 <CGPIOPin::InterruptHandler()+0x64>
   21b90:	e594301c 	ldr	r3, [r4, #28]
   21b94:	e3530000 	cmp	r3, #0
   21b98:	0a00000b 	beq	21bcc <CGPIOPin::InterruptHandler()+0x88>
   21b9c:	e5940020 	ldr	r0, [r4, #32]
   21ba0:	e8bd4010 	pop	{r4, lr}
   21ba4:	e12fff13 	bx	r3
   21ba8:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21bac:	e30f09fc 	movw	r0, #63996	; 0xf9fc
   21bb0:	e3401002 	movt	r1, #2
   21bb4:	e3400002 	movt	r0, #2
   21bb8:	e3002147 	movw	r2, #327	; 0x147
   21bbc:	eb000bf6 	bl	24b9c <assertion_failed>
   21bc0:	e594301c 	ldr	r3, [r4, #28]
   21bc4:	e3530000 	cmp	r3, #0
   21bc8:	1afffff3 	bne	21b9c <CGPIOPin::InterruptHandler()+0x58>
   21bcc:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21bd0:	e30f0900 	movw	r0, #63744	; 0xf900
   21bd4:	e3401002 	movt	r1, #2
   21bd8:	e3400002 	movt	r0, #2
   21bdc:	e3002149 	movw	r2, #329	; 0x149
   21be0:	eb000bed 	bl	24b9c <assertion_failed>
   21be4:	e594301c 	ldr	r3, [r4, #28]
   21be8:	e5940020 	ldr	r0, [r4, #32]
   21bec:	e8bd4010 	pop	{r4, lr}
   21bf0:	e12fff13 	bx	r3

00021bf4 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   21bf4:	e3500035 	cmp	r0, #53	; 0x35
   21bf8:	e92d4070 	push	{r4, r5, r6, lr}
   21bfc:	e1a05000 	mov	r5, r0
   21c00:	8a000023 	bhi	21c94 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
   21c04:	e3026824 	movw	r6, #10276	; 0x2824
   21c08:	e3406143 	movt	r6, #323	; 0x143
   21c0c:	e3a04013 	mov	r4, #19
   21c10:	e3404fc8 	movt	r4, #4040	; 0xfc8
   21c14:	e5960000 	ldr	r0, [r6]
   21c18:	e08442a5 	add	r4, r4, r5, lsr #5
   21c1c:	e3a02001 	mov	r2, #1
   21c20:	e205501f 	and	r5, r5, #31
   21c24:	e3500000 	cmp	r0, #0
   21c28:	e1a04104 	lsl	r4, r4, #2
   21c2c:	e1a05512 	lsl	r5, r2, r5
   21c30:	1a000011 	bne	21c7c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   21c34:	e3a0308b 	mov	r3, #139	; 0x8b
   21c38:	e3433f20 	movt	r3, #16160	; 0x3f20
   21c3c:	e1540003 	cmp	r4, r3
   21c40:	8a00000c 	bhi	21c78 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   21c44:	e3a0108b 	mov	r1, #139	; 0x8b
   21c48:	e3431f20 	movt	r1, #16160	; 0x3f20
   21c4c:	e1e02005 	mvn	r2, r5
   21c50:	e5943000 	ldr	r3, [r4]
   21c54:	e0033002 	and	r3, r3, r2
   21c58:	e484300c 	str	r3, [r4], #12
   21c5c:	e1540001 	cmp	r4, r1
   21c60:	9afffffa 	bls	21c50 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x5c>
   21c64:	e5963000 	ldr	r3, [r6]
   21c68:	e3530000 	cmp	r3, #0
   21c6c:	08bd8070 	popeq	{r4, r5, r6, pc}
   21c70:	e8bd4070 	pop	{r4, r5, r6, lr}
   21c74:	ea0000f6 	b	22054 <LeaveCritical>
   21c78:	e8bd8070 	pop	{r4, r5, r6, pc}
   21c7c:	eb0000c6 	bl	21f9c <EnterCritical>
   21c80:	e3a0308b 	mov	r3, #139	; 0x8b
   21c84:	e3433f20 	movt	r3, #16160	; 0x3f20
   21c88:	e1540003 	cmp	r4, r3
   21c8c:	9affffec 	bls	21c44 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
   21c90:	eafffff3 	b	21c64 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   21c94:	e30f17cc 	movw	r1, #63436	; 0xf7cc
   21c98:	e30f0a48 	movw	r0, #64072	; 0xfa48
   21c9c:	e3401002 	movt	r1, #2
   21ca0:	e3400002 	movt	r0, #2
   21ca4:	e300214f 	movw	r2, #335	; 0x14f
   21ca8:	eb000bbb 	bl	24b9c <assertion_failed>
   21cac:	eaffffd4 	b	21c04 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

00021cb0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   21cb0:	e3023824 	movw	r3, #10276	; 0x2824
   21cb4:	e3403143 	movt	r3, #323	; 0x143
   21cb8:	e3a02001 	mov	r2, #1
   21cbc:	e5832000 	str	r2, [r3]
   21cc0:	e12fff1e 	bx	lr

00021cc4 <__aeabi_uidiv>:
   21cc4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   21cc8:	e3a02000 	mov	r2, #0
   21ccc:	eb001fec 	bl	29c84 <__Divide>
   21cd0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00021cd4 <__aeabi_uidivmod>:
   21cd4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   21cd8:	e24dd00c 	sub	sp, sp, #12
   21cdc:	e28d2004 	add	r2, sp, #4
   21ce0:	eb001fe7 	bl	29c84 <__Divide>
   21ce4:	e59d1004 	ldr	r1, [sp, #4]
   21ce8:	e28dd00c 	add	sp, sp, #12
   21cec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00021cf0 <__aeabi_idiv>:
   21cf0:	ea002016 	b	29d50 <__DivideInteger>

00021cf4 <CMemorySystem::~CMemorySystem()>:
   21cf4:	e5903000 	ldr	r3, [r0]
   21cf8:	e92d4070 	push	{r4, r5, r6, lr}
   21cfc:	e3530000 	cmp	r3, #0
   21d00:	e1a04000 	mov	r4, r0
   21d04:	0a000005 	beq	21d20 <CMemorySystem::~CMemorySystem()+0x2c>
   21d08:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   21d0c:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
   21d10:	e3c33005 	bic	r3, r3, #5
   21d14:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   21d18:	e3a03000 	mov	r3, #0
   21d1c:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   21d20:	e594500c 	ldr	r5, [r4, #12]
   21d24:	e3550000 	cmp	r5, #0
   21d28:	0a000004 	beq	21d40 <CMemorySystem::~CMemorySystem()+0x4c>
   21d2c:	e1a00005 	mov	r0, r5
   21d30:	eb000701 	bl	2393c <CPageTable::~CPageTable()>
   21d34:	e1a00005 	mov	r0, r5
   21d38:	e3a01008 	mov	r1, #8
   21d3c:	eb00008e 	bl	21f7c <operator delete(void*, unsigned int)>
   21d40:	e5945008 	ldr	r5, [r4, #8]
   21d44:	e3a03000 	mov	r3, #0
   21d48:	e584300c 	str	r3, [r4, #12]
   21d4c:	e1550003 	cmp	r5, r3
   21d50:	0a000004 	beq	21d68 <CMemorySystem::~CMemorySystem()+0x74>
   21d54:	e1a00005 	mov	r0, r5
   21d58:	eb0006f7 	bl	2393c <CPageTable::~CPageTable()>
   21d5c:	e1a00005 	mov	r0, r5
   21d60:	e3a01008 	mov	r1, #8
   21d64:	eb000084 	bl	21f7c <operator delete(void*, unsigned int)>
   21d68:	e1a00004 	mov	r0, r4
   21d6c:	e8bd8070 	pop	{r4, r5, r6, pc}

00021d70 <CMemorySystem::GetMemSize() const>:
   21d70:	e5900004 	ldr	r0, [r0, #4]
   21d74:	e12fff1e 	bx	lr

00021d78 <CMemorySystem::EnableMMU()>:
   21d78:	e5903000 	ldr	r3, [r0]
   21d7c:	e92d4010 	push	{r4, lr}
   21d80:	e3530000 	cmp	r3, #0
   21d84:	e1a04000 	mov	r4, r0
   21d88:	0a00001f 	beq	21e0c <CMemorySystem::EnableMMU()+0x94>
   21d8c:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   21d90:	e3833040 	orr	r3, r3, #64	; 0x40
   21d94:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   21d98:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   21d9c:	e3130001 	tst	r3, #1
   21da0:	1a000020 	bne	21e28 <CMemorySystem::EnableMMU()+0xb0>
   21da4:	e3a03002 	mov	r3, #2
   21da8:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   21dac:	e5940008 	ldr	r0, [r4, #8]
   21db0:	e3500000 	cmp	r0, #0
   21db4:	0a00002a 	beq	21e64 <CMemorySystem::EnableMMU()+0xec>
   21db8:	eb0006e8 	bl	23960 <CPageTable::GetBaseAddress() const>
   21dbc:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   21dc0:	e594000c 	ldr	r0, [r4, #12]
   21dc4:	e3500000 	cmp	r0, #0
   21dc8:	0a00001d 	beq	21e44 <CMemorySystem::EnableMMU()+0xcc>
   21dcc:	eb0006e3 	bl	23960 <CPageTable::GetBaseAddress() const>
   21dd0:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
   21dd4:	e3a03005 	mov	r3, #5
   21dd8:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   21ddc:	eb001bbe 	bl	28cdc <InvalidateDataCache>
   21de0:	e3a03000 	mov	r3, #0
   21de4:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   21de8:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   21dec:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   21df0:	f57ff04f 	dsb	sy
   21df4:	f57ff06f 	isb	sy
   21df8:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   21dfc:	e3833b06 	orr	r3, r3, #6144	; 0x1800
   21e00:	e3833005 	orr	r3, r3, #5
   21e04:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   21e08:	e8bd8010 	pop	{r4, pc}
   21e0c:	e30f1a5c 	movw	r1, #64092	; 0xfa5c
   21e10:	e30f0a68 	movw	r0, #64104	; 0xfa68
   21e14:	e3401002 	movt	r1, #2
   21e18:	e3400002 	movt	r0, #2
   21e1c:	e3a020c0 	mov	r2, #192	; 0xc0
   21e20:	eb000b5d 	bl	24b9c <assertion_failed>
   21e24:	eaffffd8 	b	21d8c <CMemorySystem::EnableMMU()+0x14>
   21e28:	e30f1a5c 	movw	r1, #64092	; 0xfa5c
   21e2c:	e30f0a78 	movw	r0, #64120	; 0xfa78
   21e30:	e3401002 	movt	r1, #2
   21e34:	e3400002 	movt	r0, #2
   21e38:	e3a020cd 	mov	r2, #205	; 0xcd
   21e3c:	eb000b56 	bl	24b9c <assertion_failed>
   21e40:	eaffffd7 	b	21da4 <CMemorySystem::EnableMMU()+0x2c>
   21e44:	e30f1a5c 	movw	r1, #64092	; 0xfa5c
   21e48:	e30f0ac0 	movw	r0, #64192	; 0xfac0
   21e4c:	e3401002 	movt	r1, #2
   21e50:	e3400002 	movt	r0, #2
   21e54:	e3a020d7 	mov	r2, #215	; 0xd7
   21e58:	eb000b4f 	bl	24b9c <assertion_failed>
   21e5c:	e594000c 	ldr	r0, [r4, #12]
   21e60:	eaffffd9 	b	21dcc <CMemorySystem::EnableMMU()+0x54>
   21e64:	e30f1a5c 	movw	r1, #64092	; 0xfa5c
   21e68:	e30f0aa4 	movw	r0, #64164	; 0xfaa4
   21e6c:	e3401002 	movt	r1, #2
   21e70:	e3400002 	movt	r0, #2
   21e74:	e3a020d3 	mov	r2, #211	; 0xd3
   21e78:	eb000b47 	bl	24b9c <assertion_failed>
   21e7c:	e5940008 	ldr	r0, [r4, #8]
   21e80:	eaffffcc 	b	21db8 <CMemorySystem::EnableMMU()+0x40>

00021e84 <CMemorySystem::CMemorySystem(int)>:
   21e84:	e92d4030 	push	{r4, r5, lr}
   21e88:	e1a04000 	mov	r4, r0
   21e8c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   21e90:	e5801000 	str	r1, [r0]
   21e94:	e3a05000 	mov	r5, #0
   21e98:	e28d000c 	add	r0, sp, #12
   21e9c:	e5845004 	str	r5, [r4, #4]
   21ea0:	e5845008 	str	r5, [r4, #8]
   21ea4:	e584500c 	str	r5, [r4, #12]
   21ea8:	ebfffbe7 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   21eac:	e3a03014 	mov	r3, #20
   21eb0:	e58d5000 	str	r5, [sp]
   21eb4:	e28d000c 	add	r0, sp, #12
   21eb8:	e3a01005 	mov	r1, #5
   21ebc:	e08d2003 	add	r2, sp, r3
   21ec0:	e3401001 	movt	r1, #1
   21ec4:	ebfffc28 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   21ec8:	e3500000 	cmp	r0, #0
   21ecc:	1a000019 	bne	21f38 <CMemorySystem::CMemorySystem(int)+0xb4>
   21ed0:	e3a01303 	mov	r1, #201326592	; 0xc000000
   21ed4:	e58d0020 	str	r0, [sp, #32]
   21ed8:	e58d1024 	str	r1, [sp, #36]	; 0x24
   21edc:	e5841004 	str	r1, [r4, #4]
   21ee0:	eb001e09 	bl	2970c <mem_init>
   21ee4:	e5943000 	ldr	r3, [r4]
   21ee8:	e3530000 	cmp	r3, #0
   21eec:	0a00000c 	beq	21f24 <CMemorySystem::CMemorySystem(int)+0xa0>
   21ef0:	e3a00008 	mov	r0, #8
   21ef4:	eb00001c 	bl	21f6c <operator new(unsigned int)>
   21ef8:	e5941004 	ldr	r1, [r4, #4]
   21efc:	e1a05000 	mov	r5, r0
   21f00:	eb00063d 	bl	237fc <CPageTable::CPageTable(unsigned int)>
   21f04:	e5845008 	str	r5, [r4, #8]
   21f08:	e3a00008 	mov	r0, #8
   21f0c:	eb000016 	bl	21f6c <operator new(unsigned int)>
   21f10:	e1a05000 	mov	r5, r0
   21f14:	eb00060c 	bl	2374c <CPageTable::CPageTable()>
   21f18:	e584500c 	str	r5, [r4, #12]
   21f1c:	e1a00004 	mov	r0, r4
   21f20:	ebffff94 	bl	21d78 <CMemorySystem::EnableMMU()>
   21f24:	e28d000c 	add	r0, sp, #12
   21f28:	ebfffbcd 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   21f2c:	e1a00004 	mov	r0, r4
   21f30:	e28dd02c 	add	sp, sp, #44	; 0x2c
   21f34:	e8bd8030 	pop	{r4, r5, pc}
   21f38:	e59d0020 	ldr	r0, [sp, #32]
   21f3c:	e3500000 	cmp	r0, #0
   21f40:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
   21f44:	0affffe4 	beq	21edc <CMemorySystem::CMemorySystem(int)+0x58>
   21f48:	e30f1a5c 	movw	r1, #64092	; 0xfa5c
   21f4c:	e30f0ad4 	movw	r0, #64212	; 0xfad4
   21f50:	e3401002 	movt	r1, #2
   21f54:	e3400002 	movt	r0, #2
   21f58:	e3a02042 	mov	r2, #66	; 0x42
   21f5c:	eb000b0e 	bl	24b9c <assertion_failed>
   21f60:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   21f64:	e59d0020 	ldr	r0, [sp, #32]
   21f68:	eaffffdb 	b	21edc <CMemorySystem::CMemorySystem(int)+0x58>

00021f6c <operator new(unsigned int)>:
   21f6c:	ea001dfe 	b	2976c <malloc>

00021f70 <operator new[](unsigned int)>:
   21f70:	ea001dfd 	b	2976c <malloc>

00021f74 <operator delete(void*)>:
   21f74:	ea001e5e 	b	298f4 <free>

00021f78 <operator delete[](void*)>:
   21f78:	ea001e5d 	b	298f4 <free>

00021f7c <operator delete(void*, unsigned int)>:
   21f7c:	ea001e5c 	b	298f4 <free>

00021f80 <operator delete[](void*, unsigned int)>:
   21f80:	ea001e5b 	b	298f4 <free>

00021f84 <__cxa_pure_virtual>:
   21f84:	e30f1af0 	movw	r1, #64240	; 0xfaf0
   21f88:	e30b0130 	movw	r0, #45360	; 0xb130
   21f8c:	e3401002 	movt	r1, #2
   21f90:	e3400002 	movt	r0, #2
   21f94:	e3a02018 	mov	r2, #24
   21f98:	ea000aff 	b	24b9c <assertion_failed>

00021f9c <EnterCritical>:
   21f9c:	e2403001 	sub	r3, r0, #1
   21fa0:	e3530001 	cmp	r3, #1
   21fa4:	e92d4070 	push	{r4, r5, r6, lr}
   21fa8:	e1a04000 	mov	r4, r0
   21fac:	9a000005 	bls	21fc8 <EnterCritical+0x2c>
   21fb0:	e30f1b00 	movw	r1, #64256	; 0xfb00
   21fb4:	e30f0b10 	movw	r0, #64272	; 0xfb10
   21fb8:	e3401002 	movt	r1, #2
   21fbc:	e3400002 	movt	r0, #2
   21fc0:	e3a0204f 	mov	r2, #79	; 0x4f
   21fc4:	eb000af4 	bl	24b9c <assertion_failed>
   21fc8:	e10f5000 	mrs	r5, CPSR
   21fcc:	e3540002 	cmp	r4, #2
   21fd0:	0a000001 	beq	21fdc <EnterCritical+0x40>
   21fd4:	e3150040 	tst	r5, #64	; 0x40
   21fd8:	1a000016 	bne	22038 <EnterCritical+0x9c>
   21fdc:	f10c0080 	cpsid	i
   21fe0:	e3540002 	cmp	r4, #2
   21fe4:	0a000011 	beq	22030 <EnterCritical+0x94>
   21fe8:	e3024828 	movw	r4, #10280	; 0x2828
   21fec:	e3404143 	movt	r4, #323	; 0x143
   21ff0:	e5943000 	ldr	r3, [r4]
   21ff4:	e3530013 	cmp	r3, #19
   21ff8:	9a000005 	bls	22014 <EnterCritical+0x78>
   21ffc:	e30f1b00 	movw	r1, #64256	; 0xfb00
   22000:	e30f0b78 	movw	r0, #64376	; 0xfb78
   22004:	e3401002 	movt	r1, #2
   22008:	e3400002 	movt	r0, #2
   2200c:	e3a0205d 	mov	r2, #93	; 0x5d
   22010:	eb000ae1 	bl	24b9c <assertion_failed>
   22014:	e5943000 	ldr	r3, [r4]
   22018:	e2832001 	add	r2, r3, #1
   2201c:	e5842000 	str	r2, [r4]
   22020:	e0844103 	add	r4, r4, r3, lsl #2
   22024:	e5845004 	str	r5, [r4, #4]
   22028:	f57ff05f 	dmb	sy
   2202c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22030:	f10c0040 	cpsid	f
   22034:	eaffffeb 	b	21fe8 <EnterCritical+0x4c>
   22038:	e30f1b00 	movw	r1, #64256	; 0xfb00
   2203c:	e30f0b48 	movw	r0, #64328	; 0xfb48
   22040:	e3401002 	movt	r1, #2
   22044:	e3400002 	movt	r0, #2
   22048:	e3a02055 	mov	r2, #85	; 0x55
   2204c:	eb000ad2 	bl	24b9c <assertion_failed>
   22050:	eaffffe1 	b	21fdc <EnterCritical+0x40>

00022054 <LeaveCritical>:
   22054:	e92d4010 	push	{r4, lr}
   22058:	f57ff05f 	dmb	sy
   2205c:	e3024828 	movw	r4, #10280	; 0x2828
   22060:	e3404143 	movt	r4, #323	; 0x143
   22064:	e5943000 	ldr	r3, [r4]
   22068:	e3530000 	cmp	r3, #0
   2206c:	1a000005 	bne	22088 <LeaveCritical+0x34>
   22070:	e30f1b00 	movw	r1, #64256	; 0xfb00
   22074:	e30f0ba0 	movw	r0, #64416	; 0xfba0
   22078:	e3401002 	movt	r1, #2
   2207c:	e3400002 	movt	r0, #2
   22080:	e3a02067 	mov	r2, #103	; 0x67
   22084:	eb000ac4 	bl	24b9c <assertion_failed>
   22088:	e5943000 	ldr	r3, [r4]
   2208c:	e2433001 	sub	r3, r3, #1
   22090:	e5843000 	str	r3, [r4]
   22094:	e0844103 	add	r4, r4, r3, lsl #2
   22098:	e5943004 	ldr	r3, [r4, #4]
   2209c:	e121f003 	msr	CPSR_c, r3
   220a0:	e8bd8010 	pop	{r4, pc}

000220a4 <SyncDataAndInstructionCache>:
   220a4:	e92d4010 	push	{r4, lr}
   220a8:	eb001b35 	bl	28d84 <CleanDataCache>
   220ac:	e3a03000 	mov	r3, #0
   220b0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   220b4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   220b8:	f57ff04f 	dsb	sy
   220bc:	f57ff06f 	isb	sy
   220c0:	e8bd8010 	pop	{r4, pc}

000220c4 <__aeabi_atexit>:
   220c4:	e12fff1e 	bx	lr

000220c8 <halt>:
   220c8:	f57ff04f 	dsb	sy
   220cc:	e320f003 	wfi
   220d0:	eafffffc 	b	220c8 <halt>

000220d4 <reboot>:
   220d4:	e3a03000 	mov	r3, #0
   220d8:	e3433f10 	movt	r3, #16144	; 0x3f10
   220dc:	e3a01001 	mov	r1, #1
   220e0:	e3451a00 	movt	r1, #23040	; 0x5a00
   220e4:	e3a02020 	mov	r2, #32
   220e8:	e3452a00 	movt	r2, #23040	; 0x5a00
   220ec:	e5831024 	str	r1, [r3, #36]	; 0x24
   220f0:	e583201c 	str	r2, [r3, #28]
   220f4:	eafffffe 	b	220f4 <reboot+0x20>

000220f8 <sysinit>:
   220f8:	e92d4030 	push	{r4, r5, lr}
   220fc:	e24dd01c 	sub	sp, sp, #28
   22100:	f1080040 	cpsie	f
   22104:	eb001ad9 	bl	28c70 <InvalidateDataCacheL1Only>
   22108:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   2210c:	e3083064 	movw	r3, #32868	; 0x8064
   22110:	e3403000 	movt	r3, #0
   22114:	e582309c 	str	r3, [r2, #156]	; 0x9c
   22118:	e58230ac 	str	r3, [r2, #172]	; 0xac
   2211c:	e58230bc 	str	r3, [r2, #188]	; 0xbc
   22120:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   22124:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   22128:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   2212c:	f57ff06f 	isb	sy
   22130:	eee82a10 	vmsr	fpexc, r2
   22134:	e3a01000 	mov	r1, #0
   22138:	eee11a10 	vmsr	fpscr, r1
   2213c:	e3013c54 	movw	r3, #7252	; 0x1c54
   22140:	e3403003 	movt	r3, #3
   22144:	e30228c0 	movw	r2, #10432	; 0x28c0
   22148:	e3402143 	movt	r2, #323	; 0x143
   2214c:	e1530002 	cmp	r3, r2
   22150:	2a000002 	bcs	22160 <sysinit+0x68>
   22154:	e4c31001 	strb	r1, [r3], #1
   22158:	e1530002 	cmp	r3, r2
   2215c:	1afffffc 	bne	22154 <sysinit+0x5c>
   22160:	e1a0000d 	mov	r0, sp
   22164:	e3015a08 	movw	r5, #6664	; 0x1a08
   22168:	e3405003 	movt	r5, #3
   2216c:	e30149fc 	movw	r4, #6652	; 0x19fc
   22170:	e3404003 	movt	r4, #3
   22174:	eb0019c0 	bl	2887c <CMachineInfo::CMachineInfo()>
   22178:	e1540005 	cmp	r4, r5
   2217c:	2a000003 	bcs	22190 <sysinit+0x98>
   22180:	e4943004 	ldr	r3, [r4], #4
   22184:	e12fff33 	blx	r3
   22188:	e1540005 	cmp	r4, r5
   2218c:	3afffffb 	bcc	22180 <sysinit+0x88>
   22190:	ebff97b6 	bl	8070 <main>
   22194:	e3500001 	cmp	r0, #1
   22198:	0a000000 	beq	221a0 <sysinit+0xa8>
   2219c:	ebffffc9 	bl	220c8 <halt>
   221a0:	ebffffcb 	bl	220d4 <reboot>

000221a4 <CTimer::CTimer(CInterruptSystem*)>:
   221a4:	e92d4070 	push	{r4, r5, r6, lr}
   221a8:	e1a04000 	mov	r4, r0
   221ac:	e3025880 	movw	r5, #10368	; 0x2880
   221b0:	e3405143 	movt	r5, #323	; 0x143
   221b4:	e3a03000 	mov	r3, #0
   221b8:	e3a06001 	mov	r6, #1
   221bc:	e5801000 	str	r1, [r0]
   221c0:	e2800018 	add	r0, r0, #24
   221c4:	e5843004 	str	r3, [r4, #4]
   221c8:	e5843014 	str	r3, [r4, #20]
   221cc:	e5843008 	str	r3, [r4, #8]
   221d0:	e5846010 	str	r6, [r4, #16]
   221d4:	e584300c 	str	r3, [r4, #12]
   221d8:	eb001c08 	bl	29200 <CPtrList::CPtrList()>
   221dc:	e5951000 	ldr	r1, [r5]
   221e0:	e300215e 	movw	r2, #350	; 0x15e
   221e4:	e3053730 	movw	r3, #22320	; 0x5730
   221e8:	e3403005 	movt	r3, #5
   221ec:	e3510000 	cmp	r1, #0
   221f0:	e584601c 	str	r6, [r4, #28]
   221f4:	e5843020 	str	r3, [r4, #32]
   221f8:	e5842024 	str	r2, [r4, #36]	; 0x24
   221fc:	0a000005 	beq	22218 <CTimer::CTimer(CInterruptSystem*)+0x74>
   22200:	e30f1bf0 	movw	r1, #64496	; 0xfbf0
   22204:	e3401002 	movt	r1, #2
   22208:	e30f05a4 	movw	r0, #62884	; 0xf5a4
   2220c:	e3400002 	movt	r0, #2
   22210:	e3a0203b 	mov	r2, #59	; 0x3b
   22214:	eb000a60 	bl	24b9c <assertion_failed>
   22218:	e5854000 	str	r4, [r5]
   2221c:	e1a00004 	mov	r0, r4
   22220:	e8bd8070 	pop	{r4, r5, r6, pc}

00022224 <CTimer::~CTimer()>:
   22224:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22228:	e1a09000 	mov	r9, r0
   2222c:	e5900000 	ldr	r0, [r0]
   22230:	e3500000 	cmp	r0, #0
   22234:	0a00002c 	beq	222ec <CTimer::~CTimer()+0xc8>
   22238:	e3a01003 	mov	r1, #3
   2223c:	e30f7bf0 	movw	r7, #64496	; 0xfbf0
   22240:	e3407002 	movt	r7, #2
   22244:	e30fabfc 	movw	sl, #64508	; 0xfbfc
   22248:	e340a002 	movt	sl, #2
   2224c:	e3048d43 	movw	r8, #19779	; 0x4d43
   22250:	e3448b54 	movt	r8, #19284	; 0x4b54
   22254:	e2894018 	add	r4, r9, #24
   22258:	eb001466 	bl	273f8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2225c:	ea000010 	b	222a4 <CTimer::~CTimer()+0x80>
   22260:	eb001c0f 	bl	292a4 <CPtrList::GetPtr(TPtrListElement*)>
   22264:	e2506000 	subs	r6, r0, #0
   22268:	0a00001a 	beq	222d8 <CTimer::~CTimer()+0xb4>
   2226c:	e5963000 	ldr	r3, [r6]
   22270:	e30f0c08 	movw	r0, #64520	; 0xfc08
   22274:	e3400002 	movt	r0, #2
   22278:	e1530008 	cmp	r3, r8
   2227c:	e3a02049 	mov	r2, #73	; 0x49
   22280:	e1a01007 	mov	r1, r7
   22284:	0a000000 	beq	2228c <CTimer::~CTimer()+0x68>
   22288:	eb000a43 	bl	24b9c <assertion_failed>
   2228c:	e1a01005 	mov	r1, r5
   22290:	e1a00004 	mov	r0, r4
   22294:	eb001ca2 	bl	29524 <CPtrList::Remove(TPtrListElement*)>
   22298:	e1a00006 	mov	r0, r6
   2229c:	e3a01014 	mov	r1, #20
   222a0:	ebffff35 	bl	21f7c <operator delete(void*, unsigned int)>
   222a4:	e1a00004 	mov	r0, r4
   222a8:	eb001be4 	bl	29240 <CPtrList::GetFirst()>
   222ac:	e2505000 	subs	r5, r0, #0
   222b0:	e1a01005 	mov	r1, r5
   222b4:	e1a00004 	mov	r0, r4
   222b8:	1affffe8 	bne	22260 <CTimer::~CTimer()+0x3c>
   222bc:	e3023880 	movw	r3, #10368	; 0x2880
   222c0:	e3403143 	movt	r3, #323	; 0x143
   222c4:	e1a00004 	mov	r0, r4
   222c8:	e5835000 	str	r5, [r3]
   222cc:	eb001bce 	bl	2920c <CPtrList::~CPtrList()>
   222d0:	e1a00009 	mov	r0, r9
   222d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   222d8:	e3a02048 	mov	r2, #72	; 0x48
   222dc:	e1a01007 	mov	r1, r7
   222e0:	e1a0000a 	mov	r0, sl
   222e4:	eb000a2c 	bl	24b9c <assertion_failed>
   222e8:	eaffffdf 	b	2226c <CTimer::~CTimer()+0x48>
   222ec:	e30f1bf0 	movw	r1, #64496	; 0xfbf0
   222f0:	e3401002 	movt	r1, #2
   222f4:	e30a0970 	movw	r0, #43376	; 0xa970
   222f8:	e3400002 	movt	r0, #2
   222fc:	e3a02041 	mov	r2, #65	; 0x41
   22300:	eb000a25 	bl	24b9c <assertion_failed>
   22304:	e5990000 	ldr	r0, [r9]
   22308:	eaffffca 	b	22238 <CTimer::~CTimer()+0x14>

0002230c <CTimer::SetTimeZone(int)>:
   2230c:	e2813e59 	add	r3, r1, #1424	; 0x590
   22310:	e3002b3e 	movw	r2, #2878	; 0xb3e
   22314:	e283300f 	add	r3, r3, #15
   22318:	e1530002 	cmp	r3, r2
   2231c:	95801014 	strls	r1, [r0, #20]
   22320:	93a00001 	movls	r0, #1
   22324:	83a00000 	movhi	r0, #0
   22328:	e12fff1e 	bx	lr

0002232c <CTimer::GetTimeZone() const>:
   2232c:	e5900014 	ldr	r0, [r0, #20]
   22330:	e12fff1e 	bx	lr

00022334 <CTimer::SetTime(unsigned int, int)>:
   22334:	e3520000 	cmp	r2, #0
   22338:	e92d4070 	push	{r4, r5, r6, lr}
   2233c:	e1a04000 	mov	r4, r0
   22340:	e1a05001 	mov	r5, r1
   22344:	1a000005 	bne	22360 <CTimer::SetTime(unsigned int, int)+0x2c>
   22348:	e5901014 	ldr	r1, [r0, #20]
   2234c:	e3a0303c 	mov	r3, #60	; 0x3c
   22350:	e0030193 	mul	r3, r3, r1
   22354:	e3530000 	cmp	r3, #0
   22358:	ba00000e 	blt	22398 <CTimer::SetTime(unsigned int, int)+0x64>
   2235c:	e0855003 	add	r5, r5, r3
   22360:	e5940010 	ldr	r0, [r4, #16]
   22364:	e3500000 	cmp	r0, #0
   22368:	1a000002 	bne	22378 <CTimer::SetTime(unsigned int, int)+0x44>
   2236c:	e3a00001 	mov	r0, #1
   22370:	e584500c 	str	r5, [r4, #12]
   22374:	e8bd8070 	pop	{r4, r5, r6, pc}
   22378:	ebffff07 	bl	21f9c <EnterCritical>
   2237c:	e5943010 	ldr	r3, [r4, #16]
   22380:	e584500c 	str	r5, [r4, #12]
   22384:	e3530000 	cmp	r3, #0
   22388:	0a000007 	beq	223ac <CTimer::SetTime(unsigned int, int)+0x78>
   2238c:	ebffff30 	bl	22054 <LeaveCritical>
   22390:	e3a00001 	mov	r0, #1
   22394:	e8bd8070 	pop	{r4, r5, r6, pc}
   22398:	e2631000 	rsb	r1, r3, #0
   2239c:	e1510005 	cmp	r1, r5
   223a0:	daffffed 	ble	2235c <CTimer::SetTime(unsigned int, int)+0x28>
   223a4:	e1a00002 	mov	r0, r2
   223a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   223ac:	e3a00001 	mov	r0, #1
   223b0:	e8bd8070 	pop	{r4, r5, r6, pc}

000223b4 <CTimer::GetClockTicks()>:
   223b4:	e3a03a03 	mov	r3, #12288	; 0x3000
   223b8:	e3433f00 	movt	r3, #16128	; 0x3f00
   223bc:	e5930004 	ldr	r0, [r3, #4]
   223c0:	e12fff1e 	bx	lr

000223c4 <CTimer::GetTicks() const>:
   223c4:	e5900004 	ldr	r0, [r0, #4]
   223c8:	e12fff1e 	bx	lr

000223cc <CTimer::GetUptime() const>:
   223cc:	e5900008 	ldr	r0, [r0, #8]
   223d0:	e12fff1e 	bx	lr

000223d4 <CTimer::GetTime() const>:
   223d4:	e590000c 	ldr	r0, [r0, #12]
   223d8:	e12fff1e 	bx	lr

000223dc <CTimer::GetUniversalTime() const>:
   223dc:	e5902014 	ldr	r2, [r0, #20]
   223e0:	e3a0303c 	mov	r3, #60	; 0x3c
   223e4:	e590000c 	ldr	r0, [r0, #12]
   223e8:	e0030293 	mul	r3, r3, r2
   223ec:	e1530000 	cmp	r3, r0
   223f0:	d0400003 	suble	r0, r0, r3
   223f4:	c3a00000 	movgt	r0, #0
   223f8:	e12fff1e 	bx	lr

000223fc <CTimer::GetTimeString()>:
   223fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22400:	e1a04000 	mov	r4, r0
   22404:	e5900010 	ldr	r0, [r0, #16]
   22408:	e24dd014 	sub	sp, sp, #20
   2240c:	e3500000 	cmp	r0, #0
   22410:	1a00006c 	bne	225c8 <CTimer::GetTimeString()+0x1cc>
   22414:	e594500c 	ldr	r5, [r4, #12]
   22418:	e5949004 	ldr	r9, [r4, #4]
   2241c:	e1950009 	orrs	r0, r5, r9
   22420:	0a000051 	beq	2256c <CTimer::GetTimeString()+0x170>
   22424:	e3086889 	movw	r6, #34953	; 0x8889
   22428:	e3486888 	movt	r6, #34952	; 0x8888
   2242c:	e30b73c5 	movw	r7, #46021	; 0xb3c5
   22430:	e34971a2 	movt	r7, #37282	; 0x91a2
   22434:	e3044507 	movw	r4, #17671	; 0x4507
   22438:	e34c422e 	movt	r4, #49710	; 0xc22e
   2243c:	e0813596 	umull	r3, r1, r6, r5
   22440:	e3a0003c 	mov	r0, #60	; 0x3c
   22444:	e0832695 	umull	r2, r3, r5, r6
   22448:	e308c51f 	movw	ip, #34079	; 0x851f
   2244c:	e345c1eb 	movt	ip, #20971	; 0x51eb
   22450:	e1a012a1 	lsr	r1, r1, #5
   22454:	e1a082a3 	lsr	r8, r3, #5
   22458:	e0873597 	umull	r3, r7, r7, r5
   2245c:	e3a0a064 	mov	sl, #100	; 0x64
   22460:	e0843594 	umull	r3, r4, r4, r5
   22464:	e3a0ee19 	mov	lr, #400	; 0x190
   22468:	e0863196 	umull	r3, r6, r6, r1
   2246c:	e1a075a7 	lsr	r7, r7, #11
   22470:	e0685890 	mls	r8, r0, r8, r5
   22474:	e1a04824 	lsr	r4, r4, #16
   22478:	e1a062a6 	lsr	r6, r6, #5
   2247c:	e30057b2 	movw	r5, #1970	; 0x7b2
   22480:	e300216d 	movw	r2, #365	; 0x16d
   22484:	e300316e 	movw	r3, #366	; 0x16e
   22488:	e0661690 	mls	r6, r0, r6, r1
   2248c:	ea000001 	b	22498 <CTimer::GetTimeString()+0x9c>
   22490:	e0444000 	sub	r4, r4, r0
   22494:	e2855001 	add	r5, r5, #1
   22498:	e0810c95 	umull	r0, r1, r5, ip
   2249c:	e1a002a1 	lsr	r0, r1, #5
   224a0:	e1a013a1 	lsr	r1, r1, #7
   224a4:	e060509a 	mls	r0, sl, r0, r5
   224a8:	e061519e 	mls	r1, lr, r1, r5
   224ac:	e3500000 	cmp	r0, #0
   224b0:	e16f1f11 	clz	r1, r1
   224b4:	01a012a1 	lsreq	r1, r1, #5
   224b8:	0a000002 	beq	224c8 <CTimer::GetTimeString()+0xcc>
   224bc:	e3150003 	tst	r5, #3
   224c0:	03a01001 	moveq	r1, #1
   224c4:	13a01000 	movne	r1, #0
   224c8:	e3510000 	cmp	r1, #0
   224cc:	01a00002 	moveq	r0, r2
   224d0:	11a00003 	movne	r0, r3
   224d4:	e1540000 	cmp	r4, r0
   224d8:	2affffec 	bcs	22490 <CTimer::GetTimeString()+0x94>
   224dc:	e30f0bb8 	movw	r0, #64440	; 0xfbb8
   224e0:	e3400002 	movt	r0, #2
   224e4:	e3a0a000 	mov	sl, #0
   224e8:	ea000001 	b	224f4 <CTimer::GetTimeString()+0xf8>
   224ec:	e0444003 	sub	r4, r4, r3
   224f0:	e28aa001 	add	sl, sl, #1
   224f4:	e35a0001 	cmp	sl, #1
   224f8:	13a02000 	movne	r2, #0
   224fc:	02012001 	andeq	r2, r1, #1
   22500:	e3a0301d 	mov	r3, #29
   22504:	e3520000 	cmp	r2, #0
   22508:	0790310a 	ldreq	r3, [r0, sl, lsl #2]
   2250c:	e1540003 	cmp	r4, r3
   22510:	2afffff5 	bcs	224ec <CTimer::GetTimeString()+0xf0>
   22514:	e308251f 	movw	r2, #34079	; 0x851f
   22518:	e34521eb 	movt	r2, #20971	; 0x51eb
   2251c:	e3a01064 	mov	r1, #100	; 0x64
   22520:	e3a00010 	mov	r0, #16
   22524:	e0832299 	umull	r2, r3, r9, r2
   22528:	e1a0b2a3 	lsr	fp, r3, #5
   2252c:	e06b9b91 	mls	fp, r1, fp, r9
   22530:	ebfffe8d 	bl	21f6c <operator new(unsigned int)>
   22534:	e1a09000 	mov	r9, r0
   22538:	eb000ea3 	bl	25fcc <CString::CString()>
   2253c:	e30037b7 	movw	r3, #1975	; 0x7b7
   22540:	e1550003 	cmp	r5, r3
   22544:	8a00000a 	bhi	22574 <CTimer::GetTimeString()+0x178>
   22548:	e1a00009 	mov	r0, r9
   2254c:	e58db004 	str	fp, [sp, #4]
   22550:	e1a03006 	mov	r3, r6
   22554:	e58d8000 	str	r8, [sp]
   22558:	e1a02007 	mov	r2, r7
   2255c:	e30f1c4c 	movw	r1, #64588	; 0xfc4c
   22560:	e3401002 	movt	r1, #2
   22564:	eb0011f7 	bl	26d48 <CString::Format(char const*, ...)>
   22568:	e1a00009 	mov	r0, r9
   2256c:	e28dd014 	add	sp, sp, #20
   22570:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22574:	e30a0aab 	movw	r0, #43691	; 0xaaab
   22578:	e34a0aaa 	movt	r0, #43690	; 0xaaaa
   2257c:	e3a0c018 	mov	ip, #24
   22580:	e3012b64 	movw	r2, #7012	; 0x1b64
   22584:	e3402003 	movt	r2, #3
   22588:	e0810097 	umull	r0, r1, r7, r0
   2258c:	e58db00c 	str	fp, [sp, #12]
   22590:	e58d8008 	str	r8, [sp, #8]
   22594:	e2843001 	add	r3, r4, #1
   22598:	e1a00221 	lsr	r0, r1, #4
   2259c:	e30f1c30 	movw	r1, #64560	; 0xfc30
   225a0:	e3401002 	movt	r1, #2
   225a4:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   225a8:	e067709c 	mls	r7, ip, r0, r7
   225ac:	e58d6004 	str	r6, [sp, #4]
   225b0:	e1a00009 	mov	r0, r9
   225b4:	e58d7000 	str	r7, [sp]
   225b8:	eb0011e2 	bl	26d48 <CString::Format(char const*, ...)>
   225bc:	e1a00009 	mov	r0, r9
   225c0:	e28dd014 	add	sp, sp, #20
   225c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225c8:	ebfffe73 	bl	21f9c <EnterCritical>
   225cc:	e5943010 	ldr	r3, [r4, #16]
   225d0:	e594500c 	ldr	r5, [r4, #12]
   225d4:	e3530000 	cmp	r3, #0
   225d8:	e5949004 	ldr	r9, [r4, #4]
   225dc:	0affff8e 	beq	2241c <CTimer::GetTimeString()+0x20>
   225e0:	ebfffe9b 	bl	22054 <LeaveCritical>
   225e4:	eaffff8c 	b	2241c <CTimer::GetTimeString()+0x20>

000225e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   225e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225ec:	e1a0a000 	mov	sl, r0
   225f0:	e1a04002 	mov	r4, r2
   225f4:	e24dd00c 	sub	sp, sp, #12
   225f8:	e3a00014 	mov	r0, #20
   225fc:	e1a06001 	mov	r6, r1
   22600:	e1a07003 	mov	r7, r3
   22604:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   22608:	ebfffe57 	bl	21f6c <operator new(unsigned int)>
   2260c:	e3540000 	cmp	r4, #0
   22610:	e59a1004 	ldr	r1, [sl, #4]
   22614:	e1a09000 	mov	r9, r0
   22618:	e0816006 	add	r6, r1, r6
   2261c:	0a000042 	beq	2272c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
   22620:	e59a001c 	ldr	r0, [sl, #28]
   22624:	e3042d43 	movw	r2, #19779	; 0x4d43
   22628:	e3442b54 	movt	r2, #19284	; 0x4b54
   2262c:	e3500000 	cmp	r0, #0
   22630:	e98900d0 	stmib	r9, {r4, r6, r7}
   22634:	e5895010 	str	r5, [r9, #16]
   22638:	e5892000 	str	r2, [r9]
   2263c:	1a000038 	bne	22724 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
   22640:	e28a5018 	add	r5, sl, #24
   22644:	e1a00005 	mov	r0, r5
   22648:	eb001afc 	bl	29240 <CPtrList::GetFirst()>
   2264c:	e2504000 	subs	r4, r0, #0
   22650:	0a00002e 	beq	22710 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   22654:	e30f3c60 	movw	r3, #64608	; 0xfc60
   22658:	e3403002 	movt	r3, #2
   2265c:	e30f7bf0 	movw	r7, #64496	; 0xfbf0
   22660:	e3407002 	movt	r7, #2
   22664:	e3048d43 	movw	r8, #19779	; 0x4d43
   22668:	e3448b54 	movt	r8, #19284	; 0x4b54
   2266c:	e58d3004 	str	r3, [sp, #4]
   22670:	ea000011 	b	226bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
   22674:	e59bc000 	ldr	ip, [fp]
   22678:	e30f0c70 	movw	r0, #64624	; 0xfc70
   2267c:	e3400002 	movt	r0, #2
   22680:	e15c0008 	cmp	ip, r8
   22684:	e3002116 	movw	r2, #278	; 0x116
   22688:	e1a01007 	mov	r1, r7
   2268c:	0a000000 	beq	22694 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xac>
   22690:	eb000941 	bl	24b9c <assertion_failed>
   22694:	e59b3008 	ldr	r3, [fp, #8]
   22698:	e1a01004 	mov	r1, r4
   2269c:	e1a00005 	mov	r0, r5
   226a0:	e0433006 	sub	r3, r3, r6
   226a4:	e3530000 	cmp	r3, #0
   226a8:	ca00000d 	bgt	226e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
   226ac:	eb001ae5 	bl	29248 <CPtrList::GetNext(TPtrListElement*)>
   226b0:	e3500000 	cmp	r0, #0
   226b4:	0a000015 	beq	22710 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   226b8:	e1a04000 	mov	r4, r0
   226bc:	e1a01004 	mov	r1, r4
   226c0:	e1a00005 	mov	r0, r5
   226c4:	eb001af6 	bl	292a4 <CPtrList::GetPtr(TPtrListElement*)>
   226c8:	e250b000 	subs	fp, r0, #0
   226cc:	1affffe8 	bne	22674 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
   226d0:	e3002115 	movw	r2, #277	; 0x115
   226d4:	e1a01007 	mov	r1, r7
   226d8:	e59d0004 	ldr	r0, [sp, #4]
   226dc:	eb00092e 	bl	24b9c <assertion_failed>
   226e0:	eaffffe3 	b	22674 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
   226e4:	e1a01004 	mov	r1, r4
   226e8:	e1a00005 	mov	r0, r5
   226ec:	e1a02009 	mov	r2, r9
   226f0:	eb001b02 	bl	29300 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   226f4:	e59a301c 	ldr	r3, [sl, #28]
   226f8:	e3530000 	cmp	r3, #0
   226fc:	0a000000 	beq	22704 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x11c>
   22700:	ebfffe53 	bl	22054 <LeaveCritical>
   22704:	e1a00009 	mov	r0, r9
   22708:	e28dd00c 	add	sp, sp, #12
   2270c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22710:	e1a01004 	mov	r1, r4
   22714:	e1a00005 	mov	r0, r5
   22718:	e1a02009 	mov	r2, r9
   2271c:	eb001b3d 	bl	29418 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   22720:	eafffff3 	b	226f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   22724:	ebfffe1c 	bl	21f9c <EnterCritical>
   22728:	eaffffc4 	b	22640 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
   2272c:	e30f1bf0 	movw	r1, #64496	; 0xfbf0
   22730:	e3401002 	movt	r1, #2
   22734:	e3000f24 	movw	r0, #3876	; 0xf24
   22738:	e3400003 	movt	r0, #3
   2273c:	e3002105 	movw	r2, #261	; 0x105
   22740:	eb000915 	bl	24b9c <assertion_failed>
   22744:	eaffffb5 	b	22620 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

00022748 <CTimer::CancelKernelTimer(unsigned int)>:
   22748:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2274c:	e2514000 	subs	r4, r1, #0
   22750:	e1a05000 	mov	r5, r0
   22754:	0a000022 	beq	227e4 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   22758:	e595001c 	ldr	r0, [r5, #28]
   2275c:	e3500000 	cmp	r0, #0
   22760:	1a00001d 	bne	227dc <CTimer::CancelKernelTimer(unsigned int)+0x94>
   22764:	e2856018 	add	r6, r5, #24
   22768:	e1a01004 	mov	r1, r4
   2276c:	e1a00006 	mov	r0, r6
   22770:	eb001bc7 	bl	29694 <CPtrList::Find(void*)>
   22774:	e2507000 	subs	r7, r0, #0
   22778:	0a000012 	beq	227c8 <CTimer::CancelKernelTimer(unsigned int)+0x80>
   2277c:	e5942000 	ldr	r2, [r4]
   22780:	e3043d43 	movw	r3, #19779	; 0x4d43
   22784:	e3443b54 	movt	r3, #19284	; 0x4b54
   22788:	e1520003 	cmp	r2, r3
   2278c:	0a000005 	beq	227a8 <CTimer::CancelKernelTimer(unsigned int)+0x60>
   22790:	e30f1bf0 	movw	r1, #64496	; 0xfbf0
   22794:	e3401002 	movt	r1, #2
   22798:	e30f0c08 	movw	r0, #64520	; 0xfc08
   2279c:	e3400002 	movt	r0, #2
   227a0:	e3002139 	movw	r2, #313	; 0x139
   227a4:	eb0008fc 	bl	24b9c <assertion_failed>
   227a8:	e1a01007 	mov	r1, r7
   227ac:	e1a00006 	mov	r0, r6
   227b0:	eb001b5b 	bl	29524 <CPtrList::Remove(TPtrListElement*)>
   227b4:	e3a03000 	mov	r3, #0
   227b8:	e5843000 	str	r3, [r4]
   227bc:	e1a00004 	mov	r0, r4
   227c0:	e3a01014 	mov	r1, #20
   227c4:	ebfffdec 	bl	21f7c <operator delete(void*, unsigned int)>
   227c8:	e595301c 	ldr	r3, [r5, #28]
   227cc:	e3530000 	cmp	r3, #0
   227d0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   227d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   227d8:	eafffe1d 	b	22054 <LeaveCritical>
   227dc:	ebfffdee 	bl	21f9c <EnterCritical>
   227e0:	eaffffdf 	b	22764 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   227e4:	e30f1bf0 	movw	r1, #64496	; 0xfbf0
   227e8:	e3401002 	movt	r1, #2
   227ec:	e30f0bfc 	movw	r0, #64508	; 0xfbfc
   227f0:	e3400002 	movt	r0, #2
   227f4:	e3002132 	movw	r2, #306	; 0x132
   227f8:	eb0008e7 	bl	24b9c <assertion_failed>
   227fc:	eaffffd5 	b	22758 <CTimer::CancelKernelTimer(unsigned int)+0x10>

00022800 <CTimer::PollKernelTimers()>:
   22800:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22804:	e1a06000 	mov	r6, r0
   22808:	e590001c 	ldr	r0, [r0, #28]
   2280c:	e3500000 	cmp	r0, #0
   22810:	1a00004f 	bne	22954 <CTimer::PollKernelTimers()+0x154>
   22814:	e2867018 	add	r7, r6, #24
   22818:	e1a00007 	mov	r0, r7
   2281c:	eb001a87 	bl	29240 <CPtrList::GetFirst()>
   22820:	e2505000 	subs	r5, r0, #0
   22824:	0a000040 	beq	2292c <CTimer::PollKernelTimers()+0x12c>
   22828:	e30f9bf0 	movw	r9, #64496	; 0xfbf0
   2282c:	e3409002 	movt	r9, #2
   22830:	e30fabfc 	movw	sl, #64508	; 0xfbfc
   22834:	e340a002 	movt	sl, #2
   22838:	e3048d43 	movw	r8, #19779	; 0x4d43
   2283c:	e3448b54 	movt	r8, #19284	; 0x4b54
   22840:	ea000010 	b	22888 <CTimer::PollKernelTimers()+0x88>
   22844:	e5945004 	ldr	r5, [r4, #4]
   22848:	e3550000 	cmp	r5, #0
   2284c:	0a00002d 	beq	22908 <CTimer::PollKernelTimers()+0x108>
   22850:	e5942010 	ldr	r2, [r4, #16]
   22854:	e1a00004 	mov	r0, r4
   22858:	e594100c 	ldr	r1, [r4, #12]
   2285c:	e12fff35 	blx	r5
   22860:	e3a03000 	mov	r3, #0
   22864:	e1a00004 	mov	r0, r4
   22868:	e5843000 	str	r3, [r4]
   2286c:	e3a01014 	mov	r1, #20
   22870:	ebfffdc1 	bl	21f7c <operator delete(void*, unsigned int)>
   22874:	e596001c 	ldr	r0, [r6, #28]
   22878:	e3500000 	cmp	r0, #0
   2287c:	1a000027 	bne	22920 <CTimer::PollKernelTimers()+0x120>
   22880:	e25b5000 	subs	r5, fp, #0
   22884:	0a000028 	beq	2292c <CTimer::PollKernelTimers()+0x12c>
   22888:	e1a01005 	mov	r1, r5
   2288c:	e1a00007 	mov	r0, r7
   22890:	eb001a83 	bl	292a4 <CPtrList::GetPtr(TPtrListElement*)>
   22894:	e2504000 	subs	r4, r0, #0
   22898:	0a000028 	beq	22940 <CTimer::PollKernelTimers()+0x140>
   2289c:	e5943000 	ldr	r3, [r4]
   228a0:	e1530008 	cmp	r3, r8
   228a4:	0a000004 	beq	228bc <CTimer::PollKernelTimers()+0xbc>
   228a8:	e30f0c08 	movw	r0, #64520	; 0xfc08
   228ac:	e3400002 	movt	r0, #2
   228b0:	e300214f 	movw	r2, #335	; 0x14f
   228b4:	e1a01009 	mov	r1, r9
   228b8:	eb0008b7 	bl	24b9c <assertion_failed>
   228bc:	e5962004 	ldr	r2, [r6, #4]
   228c0:	e5943008 	ldr	r3, [r4, #8]
   228c4:	e0433002 	sub	r3, r3, r2
   228c8:	e3530000 	cmp	r3, #0
   228cc:	ca000016 	bgt	2292c <CTimer::PollKernelTimers()+0x12c>
   228d0:	e1a01005 	mov	r1, r5
   228d4:	e1a00007 	mov	r0, r7
   228d8:	eb001a5a 	bl	29248 <CPtrList::GetNext(TPtrListElement*)>
   228dc:	e1a01005 	mov	r1, r5
   228e0:	e1a0b000 	mov	fp, r0
   228e4:	e1a00007 	mov	r0, r7
   228e8:	eb001b0d 	bl	29524 <CPtrList::Remove(TPtrListElement*)>
   228ec:	e596301c 	ldr	r3, [r6, #28]
   228f0:	e3530000 	cmp	r3, #0
   228f4:	0affffd2 	beq	22844 <CTimer::PollKernelTimers()+0x44>
   228f8:	ebfffdd5 	bl	22054 <LeaveCritical>
   228fc:	e5945004 	ldr	r5, [r4, #4]
   22900:	e3550000 	cmp	r5, #0
   22904:	1affffd1 	bne	22850 <CTimer::PollKernelTimers()+0x50>
   22908:	e3000f24 	movw	r0, #3876	; 0xf24
   2290c:	e3400003 	movt	r0, #3
   22910:	e300215d 	movw	r2, #349	; 0x15d
   22914:	e1a01009 	mov	r1, r9
   22918:	eb00089f 	bl	24b9c <assertion_failed>
   2291c:	eaffffcb 	b	22850 <CTimer::PollKernelTimers()+0x50>
   22920:	ebfffd9d 	bl	21f9c <EnterCritical>
   22924:	e25b5000 	subs	r5, fp, #0
   22928:	1affffd6 	bne	22888 <CTimer::PollKernelTimers()+0x88>
   2292c:	e596301c 	ldr	r3, [r6, #28]
   22930:	e3530000 	cmp	r3, #0
   22934:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22938:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2293c:	eafffdc4 	b	22054 <LeaveCritical>
   22940:	e300214e 	movw	r2, #334	; 0x14e
   22944:	e1a01009 	mov	r1, r9
   22948:	e1a0000a 	mov	r0, sl
   2294c:	eb000892 	bl	24b9c <assertion_failed>
   22950:	eaffffd1 	b	2289c <CTimer::PollKernelTimers()+0x9c>
   22954:	ebfffd90 	bl	21f9c <EnterCritical>
   22958:	eaffffad 	b	22814 <CTimer::PollKernelTimers()+0x14>

0002295c <CTimer::InterruptHandler()>:
   2295c:	e3a03a03 	mov	r3, #12288	; 0x3000
   22960:	e3433f00 	movt	r3, #16128	; 0x3f00
   22964:	e92d4010 	push	{r4, lr}
   22968:	e1a04000 	mov	r4, r0
   2296c:	e5933000 	ldr	r3, [r3]
   22970:	e3130008 	tst	r3, #8
   22974:	0a000036 	beq	22a54 <CTimer::InterruptHandler()+0xf8>
   22978:	e3a03a03 	mov	r3, #12288	; 0x3000
   2297c:	e3433f00 	movt	r3, #16128	; 0x3f00
   22980:	e3021710 	movw	r1, #10000	; 0x2710
   22984:	e5932018 	ldr	r2, [r3, #24]
   22988:	e0822001 	add	r2, r2, r1
   2298c:	e5832018 	str	r2, [r3, #24]
   22990:	e5930004 	ldr	r0, [r3, #4]
   22994:	e1520000 	cmp	r2, r0
   22998:	35932004 	ldrcc	r2, [r3, #4]
   2299c:	30821001 	addcc	r1, r2, r1
   229a0:	e3a02008 	mov	r2, #8
   229a4:	35831018 	strcc	r1, [r3, #24]
   229a8:	e3a03a03 	mov	r3, #12288	; 0x3000
   229ac:	e3433f00 	movt	r3, #16128	; 0x3f00
   229b0:	e5832000 	str	r2, [r3]
   229b4:	e5940010 	ldr	r0, [r4, #16]
   229b8:	e3500000 	cmp	r0, #0
   229bc:	1a000016 	bne	22a1c <CTimer::InterruptHandler()+0xc0>
   229c0:	e5943004 	ldr	r3, [r4, #4]
   229c4:	e308051f 	movw	r0, #34079	; 0x851f
   229c8:	e34501eb 	movt	r0, #20971	; 0x51eb
   229cc:	e2833001 	add	r3, r3, #1
   229d0:	e3a0c064 	mov	ip, #100	; 0x64
   229d4:	e5843004 	str	r3, [r4, #4]
   229d8:	e0810093 	umull	r0, r1, r3, r0
   229dc:	e1a022a1 	lsr	r2, r1, #5
   229e0:	e062329c 	mls	r2, ip, r2, r3
   229e4:	e3520000 	cmp	r2, #0
   229e8:	1a000008 	bne	22a10 <CTimer::InterruptHandler()+0xb4>
   229ec:	e5943008 	ldr	r3, [r4, #8]
   229f0:	e2833001 	add	r3, r3, #1
   229f4:	e5843008 	str	r3, [r4, #8]
   229f8:	e594300c 	ldr	r3, [r4, #12]
   229fc:	e2833001 	add	r3, r3, #1
   22a00:	e584300c 	str	r3, [r4, #12]
   22a04:	e3520000 	cmp	r2, #0
   22a08:	0a000000 	beq	22a10 <CTimer::InterruptHandler()+0xb4>
   22a0c:	ebfffd90 	bl	22054 <LeaveCritical>
   22a10:	e1a00004 	mov	r0, r4
   22a14:	e8bd4010 	pop	{r4, lr}
   22a18:	eaffff78 	b	22800 <CTimer::PollKernelTimers()>
   22a1c:	ebfffd5e 	bl	21f9c <EnterCritical>
   22a20:	e5943004 	ldr	r3, [r4, #4]
   22a24:	e308051f 	movw	r0, #34079	; 0x851f
   22a28:	e34501eb 	movt	r0, #20971	; 0x51eb
   22a2c:	e2833001 	add	r3, r3, #1
   22a30:	e3a0c064 	mov	ip, #100	; 0x64
   22a34:	e5843004 	str	r3, [r4, #4]
   22a38:	e5942010 	ldr	r2, [r4, #16]
   22a3c:	e0810093 	umull	r0, r1, r3, r0
   22a40:	e1a012a1 	lsr	r1, r1, #5
   22a44:	e063319c 	mls	r3, ip, r1, r3
   22a48:	e3530000 	cmp	r3, #0
   22a4c:	1affffec 	bne	22a04 <CTimer::InterruptHandler()+0xa8>
   22a50:	eaffffe5 	b	229ec <CTimer::InterruptHandler()+0x90>
   22a54:	e30f1bf0 	movw	r1, #64496	; 0xfbf0
   22a58:	e3401002 	movt	r1, #2
   22a5c:	e30f0c98 	movw	r0, #64664	; 0xfc98
   22a60:	e3400002 	movt	r0, #2
   22a64:	e300216f 	movw	r2, #367	; 0x16f
   22a68:	eb00084b 	bl	24b9c <assertion_failed>
   22a6c:	eaffffc1 	b	22978 <CTimer::InterruptHandler()+0x1c>

00022a70 <CTimer::InterruptHandler(void*)>:
   22a70:	e92d4010 	push	{r4, lr}
   22a74:	e2504000 	subs	r4, r0, #0
   22a78:	0a000002 	beq	22a88 <CTimer::InterruptHandler(void*)+0x18>
   22a7c:	e1a00004 	mov	r0, r4
   22a80:	e8bd4010 	pop	{r4, lr}
   22a84:	eaffffb4 	b	2295c <CTimer::InterruptHandler()>
   22a88:	e30f1bf0 	movw	r1, #64496	; 0xfbf0
   22a8c:	e3401002 	movt	r1, #2
   22a90:	e30a0938 	movw	r0, #43320	; 0xa938
   22a94:	e3400002 	movt	r0, #2
   22a98:	e3002191 	movw	r2, #401	; 0x191
   22a9c:	eb00083e 	bl	24b9c <assertion_failed>
   22aa0:	e1a00004 	mov	r0, r4
   22aa4:	e8bd4010 	pop	{r4, lr}
   22aa8:	eaffffab 	b	2295c <CTimer::InterruptHandler()>

00022aac <CTimer::TuneMsDelay()>:
   22aac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   22ab0:	e1a06000 	mov	r6, r0
   22ab4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   22ab8:	e24dd00c 	sub	sp, sp, #12
   22abc:	e3025710 	movw	r5, #10000	; 0x2710
   22ac0:	e5963020 	ldr	r3, [r6, #32]
   22ac4:	e308451f 	movw	r4, #34079	; 0x851f
   22ac8:	e34541eb 	movt	r4, #20971	; 0x51eb
   22acc:	e5967004 	ldr	r7, [r6, #4]
   22ad0:	e0000390 	mul	r0, r0, r3
   22ad4:	eb0010a7 	bl	26d78 <DelayLoop>
   22ad8:	e5962004 	ldr	r2, [r6, #4]
   22adc:	e5963020 	ldr	r3, [r6, #32]
   22ae0:	e3041dd3 	movw	r1, #19923	; 0x4dd3
   22ae4:	e3411062 	movt	r1, #4194	; 0x1062
   22ae8:	e0422007 	sub	r2, r2, r7
   22aec:	e735f215 	udiv	r5, r5, r2
   22af0:	e0030593 	mul	r3, r3, r5
   22af4:	e0832394 	umull	r2, r3, r4, r3
   22af8:	e1a032a3 	lsr	r3, r3, #5
   22afc:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   22b00:	e5863020 	str	r3, [r6, #32]
   22b04:	e0832291 	umull	r2, r3, r1, r2
   22b08:	e1a03323 	lsr	r3, r3, #6
   22b0c:	e5863024 	str	r3, [r6, #36]	; 0x24
   22b10:	eb0009a6 	bl	251b0 <CLogger::Get()>
   22b14:	e0832495 	umull	r2, r3, r5, r4
   22b18:	e3a0c064 	mov	ip, #100	; 0x64
   22b1c:	e0841594 	umull	r1, r4, r4, r5
   22b20:	e1a012a3 	lsr	r1, r3, #5
   22b24:	e3a02003 	mov	r2, #3
   22b28:	e1a042a4 	lsr	r4, r4, #5
   22b2c:	e30f3cbc 	movw	r3, #64700	; 0xfcbc
   22b30:	e3403002 	movt	r3, #2
   22b34:	e065519c 	mls	r5, ip, r1, r5
   22b38:	e58d4000 	str	r4, [sp]
   22b3c:	e59f100c 	ldr	r1, [pc, #12]	; 22b50 <CTimer::TuneMsDelay()+0xa4>
   22b40:	e58d5004 	str	r5, [sp, #4]
   22b44:	eb000a75 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22b48:	e28dd00c 	add	sp, sp, #12
   22b4c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22b50:	0002fbe8 	.word	0x0002fbe8

00022b54 <CTimer::Initialize()>:
   22b54:	e92d4010 	push	{r4, lr}
   22b58:	e1a04000 	mov	r4, r0
   22b5c:	e5900000 	ldr	r0, [r0]
   22b60:	e3500000 	cmp	r0, #0
   22b64:	0a000011 	beq	22bb0 <CTimer::Initialize()+0x5c>
   22b68:	e1a03004 	mov	r3, r4
   22b6c:	e3a01003 	mov	r1, #3
   22b70:	e3022a70 	movw	r2, #10864	; 0x2a70
   22b74:	e3402002 	movt	r2, #2
   22b78:	eb0011e5 	bl	27314 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   22b7c:	e3a02a03 	mov	r2, #12288	; 0x3000
   22b80:	e3432f00 	movt	r2, #16128	; 0x3f00
   22b84:	e3a03df2 	mov	r3, #15488	; 0x3c80
   22b88:	e34f3e36 	movt	r3, #65078	; 0xfe36
   22b8c:	e1a00004 	mov	r0, r4
   22b90:	e5823004 	str	r3, [r2, #4]
   22b94:	e5923004 	ldr	r3, [r2, #4]
   22b98:	e2833c27 	add	r3, r3, #9984	; 0x2700
   22b9c:	e2833010 	add	r3, r3, #16
   22ba0:	e5823018 	str	r3, [r2, #24]
   22ba4:	ebffffc0 	bl	22aac <CTimer::TuneMsDelay()>
   22ba8:	e3a00001 	mov	r0, #1
   22bac:	e8bd8010 	pop	{r4, pc}
   22bb0:	e30f1bf0 	movw	r1, #64496	; 0xfbf0
   22bb4:	e3401002 	movt	r1, #2
   22bb8:	e30a0970 	movw	r0, #43376	; 0xa970
   22bbc:	e3400002 	movt	r0, #2
   22bc0:	e3a02055 	mov	r2, #85	; 0x55
   22bc4:	eb0007f4 	bl	24b9c <assertion_failed>
   22bc8:	e5940000 	ldr	r0, [r4]
   22bcc:	eaffffe5 	b	22b68 <CTimer::Initialize()+0x14>

00022bd0 <CTimer::SimpleMsDelay(unsigned int)>:
   22bd0:	e2503000 	subs	r3, r0, #0
   22bd4:	012fff1e 	bxeq	lr
   22bd8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   22bdc:	e0000390 	mul	r0, r0, r3
   22be0:	e3500000 	cmp	r0, #0
   22be4:	012fff1e 	bxeq	lr
   22be8:	e3a03a03 	mov	r3, #12288	; 0x3000
   22bec:	e3433f00 	movt	r3, #16128	; 0x3f00
   22bf0:	e2800001 	add	r0, r0, #1
   22bf4:	e1a01003 	mov	r1, r3
   22bf8:	e5932004 	ldr	r2, [r3, #4]
   22bfc:	e5913004 	ldr	r3, [r1, #4]
   22c00:	e0433002 	sub	r3, r3, r2
   22c04:	e1500003 	cmp	r0, r3
   22c08:	8afffffb 	bhi	22bfc <CTimer::SimpleMsDelay(unsigned int)+0x2c>
   22c0c:	e12fff1e 	bx	lr

00022c10 <CTimer::SimpleusDelay(unsigned int)>:
   22c10:	e3500000 	cmp	r0, #0
   22c14:	012fff1e 	bxeq	lr
   22c18:	e3a03a03 	mov	r3, #12288	; 0x3000
   22c1c:	e3433f00 	movt	r3, #16128	; 0x3f00
   22c20:	e2800001 	add	r0, r0, #1
   22c24:	e1a01003 	mov	r1, r3
   22c28:	e5932004 	ldr	r2, [r3, #4]
   22c2c:	e5913004 	ldr	r3, [r1, #4]
   22c30:	e0433002 	sub	r3, r3, r2
   22c34:	e1500003 	cmp	r0, r3
   22c38:	8afffffb 	bhi	22c2c <CTimer::SimpleusDelay(unsigned int)+0x1c>
   22c3c:	e12fff1e 	bx	lr

00022c40 <CTimer::IsLeapYear(unsigned int)>:
   22c40:	e308251f 	movw	r2, #34079	; 0x851f
   22c44:	e34521eb 	movt	r2, #20971	; 0x51eb
   22c48:	e3a01064 	mov	r1, #100	; 0x64
   22c4c:	e083c092 	umull	ip, r3, r2, r0
   22c50:	e1a032a3 	lsr	r3, r3, #5
   22c54:	e0630391 	mls	r3, r1, r3, r0
   22c58:	e3530000 	cmp	r3, #0
   22c5c:	0a000003 	beq	22c70 <CTimer::IsLeapYear(unsigned int)+0x30>
   22c60:	e3100003 	tst	r0, #3
   22c64:	03a00001 	moveq	r0, #1
   22c68:	13a00000 	movne	r0, #0
   22c6c:	e12fff1e 	bx	lr
   22c70:	e0832290 	umull	r2, r3, r0, r2
   22c74:	e3a02e19 	mov	r2, #400	; 0x190
   22c78:	e1a033a3 	lsr	r3, r3, #7
   22c7c:	e0600392 	mls	r0, r2, r3, r0
   22c80:	e16f0f10 	clz	r0, r0
   22c84:	e1a002a0 	lsr	r0, r0, #5
   22c88:	e12fff1e 	bx	lr

00022c8c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   22c8c:	e3500001 	cmp	r0, #1
   22c90:	0a000003 	beq	22ca4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
   22c94:	e30f3bb8 	movw	r3, #64440	; 0xfbb8
   22c98:	e3403002 	movt	r3, #2
   22c9c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   22ca0:	e12fff1e 	bx	lr
   22ca4:	e308251f 	movw	r2, #34079	; 0x851f
   22ca8:	e34521eb 	movt	r2, #20971	; 0x51eb
   22cac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   22cb0:	e3a0e064 	mov	lr, #100	; 0x64
   22cb4:	e0832291 	umull	r2, r3, r1, r2
   22cb8:	e1a0c2a3 	lsr	ip, r3, #5
   22cbc:	e06c1c9e 	mls	ip, lr, ip, r1
   22cc0:	e35c0000 	cmp	ip, #0
   22cc4:	0a000008 	beq	22cec <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
   22cc8:	e3110003 	tst	r1, #3
   22ccc:	03a01001 	moveq	r1, #1
   22cd0:	13a01000 	movne	r1, #0
   22cd4:	e3510000 	cmp	r1, #0
   22cd8:	13a0001d 	movne	r0, #29
   22cdc:	030f3bb8 	movweq	r3, #64440	; 0xfbb8
   22ce0:	03403002 	movteq	r3, #2
   22ce4:	07930100 	ldreq	r0, [r3, r0, lsl #2]
   22ce8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   22cec:	e1a033a3 	lsr	r3, r3, #7
   22cf0:	e3a02e19 	mov	r2, #400	; 0x190
   22cf4:	e0611392 	mls	r1, r2, r3, r1
   22cf8:	e16f1f11 	clz	r1, r1
   22cfc:	e1a012a1 	lsr	r1, r1, #5
   22d00:	eafffff3 	b	22cd4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

00022d04 <CTimer::Get()>:
   22d04:	e92d4010 	push	{r4, lr}
   22d08:	e3024880 	movw	r4, #10368	; 0x2880
   22d0c:	e3404143 	movt	r4, #323	; 0x143
   22d10:	e5940000 	ldr	r0, [r4]
   22d14:	e3500000 	cmp	r0, #0
   22d18:	18bd8010 	popne	{r4, pc}
   22d1c:	e30021d6 	movw	r2, #470	; 0x1d6
   22d20:	e30f1bf0 	movw	r1, #64496	; 0xfbf0
   22d24:	e3401002 	movt	r1, #2
   22d28:	e30a045c 	movw	r0, #42076	; 0xa45c
   22d2c:	e3400002 	movt	r0, #2
   22d30:	eb000799 	bl	24b9c <assertion_failed>
   22d34:	e5940000 	ldr	r0, [r4]
   22d38:	e8bd8010 	pop	{r4, pc}

00022d3c <memset>:
   22d3c:	e3520000 	cmp	r2, #0
   22d40:	012fff1e 	bxeq	lr
   22d44:	e6af1071 	sxtb	r1, r1
   22d48:	e0802002 	add	r2, r0, r2
   22d4c:	e1a03000 	mov	r3, r0
   22d50:	e4c31001 	strb	r1, [r3], #1
   22d54:	e1530002 	cmp	r3, r2
   22d58:	1afffffc 	bne	22d50 <memset+0x14>
   22d5c:	e12fff1e 	bx	lr

00022d60 <memcmp>:
   22d60:	e3520000 	cmp	r2, #0
   22d64:	0a00000e 	beq	22da4 <memcmp+0x44>
   22d68:	e5d0c000 	ldrb	ip, [r0]
   22d6c:	e5d13000 	ldrb	r3, [r1]
   22d70:	e15c0003 	cmp	ip, r3
   22d74:	ca00000c 	bgt	22dac <memcmp+0x4c>
   22d78:	ba00000d 	blt	22db4 <memcmp+0x54>
   22d7c:	e0812002 	add	r2, r1, r2
   22d80:	e2811001 	add	r1, r1, #1
   22d84:	ea000004 	b	22d9c <memcmp+0x3c>
   22d88:	e5f0c001 	ldrb	ip, [r0, #1]!
   22d8c:	e4d13001 	ldrb	r3, [r1], #1
   22d90:	e15c0003 	cmp	ip, r3
   22d94:	ca000004 	bgt	22dac <memcmp+0x4c>
   22d98:	ba000005 	blt	22db4 <memcmp+0x54>
   22d9c:	e1510002 	cmp	r1, r2
   22da0:	1afffff8 	bne	22d88 <memcmp+0x28>
   22da4:	e3a00000 	mov	r0, #0
   22da8:	e12fff1e 	bx	lr
   22dac:	e3a00001 	mov	r0, #1
   22db0:	e12fff1e 	bx	lr
   22db4:	e3e00000 	mvn	r0, #0
   22db8:	e12fff1e 	bx	lr

00022dbc <strlen>:
   22dbc:	e1d010d0 	ldrsb	r1, [r0]
   22dc0:	e2803001 	add	r3, r0, #1
   22dc4:	e3510000 	cmp	r1, #0
   22dc8:	0a000003 	beq	22ddc <strlen+0x20>
   22dcc:	e0431000 	sub	r1, r3, r0
   22dd0:	e0d320d1 	ldrsb	r2, [r3], #1
   22dd4:	e3520000 	cmp	r2, #0
   22dd8:	1afffffb 	bne	22dcc <strlen+0x10>
   22ddc:	e1a00001 	mov	r0, r1
   22de0:	e12fff1e 	bx	lr

00022de4 <strcmp>:
   22de4:	e1d030d0 	ldrsb	r3, [r0]
   22de8:	e1d120d0 	ldrsb	r2, [r1]
   22dec:	e3530000 	cmp	r3, #0
   22df0:	1a000007 	bne	22e14 <strcmp+0x30>
   22df4:	ea000008 	b	22e1c <strcmp+0x38>
   22df8:	e1530002 	cmp	r3, r2
   22dfc:	ca00000b 	bgt	22e30 <strcmp+0x4c>
   22e00:	ba00000c 	blt	22e38 <strcmp+0x54>
   22e04:	e1f030d1 	ldrsb	r3, [r0, #1]!
   22e08:	e3530000 	cmp	r3, #0
   22e0c:	0a00000b 	beq	22e40 <strcmp+0x5c>
   22e10:	e1f120d1 	ldrsb	r2, [r1, #1]!
   22e14:	e3520000 	cmp	r2, #0
   22e18:	1afffff6 	bne	22df8 <strcmp+0x14>
   22e1c:	e1530002 	cmp	r3, r2
   22e20:	ca000002 	bgt	22e30 <strcmp+0x4c>
   22e24:	b3e00000 	mvnlt	r0, #0
   22e28:	a3a00000 	movge	r0, #0
   22e2c:	e12fff1e 	bx	lr
   22e30:	e3a00001 	mov	r0, #1
   22e34:	e12fff1e 	bx	lr
   22e38:	e3e00000 	mvn	r0, #0
   22e3c:	e12fff1e 	bx	lr
   22e40:	e1d120d1 	ldrsb	r2, [r1, #1]
   22e44:	e1530002 	cmp	r3, r2
   22e48:	dafffff5 	ble	22e24 <strcmp+0x40>
   22e4c:	eafffff7 	b	22e30 <strcmp+0x4c>

00022e50 <strcpy>:
   22e50:	e1d130d0 	ldrsb	r3, [r1]
   22e54:	e1a02000 	mov	r2, r0
   22e58:	e3530000 	cmp	r3, #0
   22e5c:	0a000003 	beq	22e70 <strcpy+0x20>
   22e60:	e4c23001 	strb	r3, [r2], #1
   22e64:	e1f130d1 	ldrsb	r3, [r1, #1]!
   22e68:	e3530000 	cmp	r3, #0
   22e6c:	1afffffb 	bne	22e60 <strcpy+0x10>
   22e70:	e3a03000 	mov	r3, #0
   22e74:	e5c23000 	strb	r3, [r2]
   22e78:	e12fff1e 	bx	lr

00022e7c <strncpy>:
   22e7c:	e3520000 	cmp	r2, #0
   22e80:	012fff1e 	bxeq	lr
   22e84:	e1d1c0d0 	ldrsb	ip, [r1]
   22e88:	e35c0000 	cmp	ip, #0
   22e8c:	0a000009 	beq	22eb8 <strncpy+0x3c>
   22e90:	e0802002 	add	r2, r0, r2
   22e94:	e1a03000 	mov	r3, r0
   22e98:	ea000002 	b	22ea8 <strncpy+0x2c>
   22e9c:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   22ea0:	e35c0000 	cmp	ip, #0
   22ea4:	0a000004 	beq	22ebc <strncpy+0x40>
   22ea8:	e4c3c001 	strb	ip, [r3], #1
   22eac:	e1530002 	cmp	r3, r2
   22eb0:	1afffff9 	bne	22e9c <strncpy+0x20>
   22eb4:	e12fff1e 	bx	lr
   22eb8:	e1a03000 	mov	r3, r0
   22ebc:	e3a02000 	mov	r2, #0
   22ec0:	e5c32000 	strb	r2, [r3]
   22ec4:	e12fff1e 	bx	lr

00022ec8 <strcat>:
   22ec8:	e1d030d0 	ldrsb	r3, [r0]
   22ecc:	e3530000 	cmp	r3, #0
   22ed0:	e1a03000 	mov	r3, r0
   22ed4:	0a000002 	beq	22ee4 <strcat+0x1c>
   22ed8:	e1f320d1 	ldrsb	r2, [r3, #1]!
   22edc:	e3520000 	cmp	r2, #0
   22ee0:	1afffffc 	bne	22ed8 <strcat+0x10>
   22ee4:	e1d120d0 	ldrsb	r2, [r1]
   22ee8:	e3520000 	cmp	r2, #0
   22eec:	0a000003 	beq	22f00 <strcat+0x38>
   22ef0:	e4c32001 	strb	r2, [r3], #1
   22ef4:	e1f120d1 	ldrsb	r2, [r1, #1]!
   22ef8:	e3520000 	cmp	r2, #0
   22efc:	1afffffb 	bne	22ef0 <strcat+0x28>
   22f00:	e3a02000 	mov	r2, #0
   22f04:	e5c32000 	strb	r2, [r3]
   22f08:	e12fff1e 	bx	lr

00022f0c <strchr>:
   22f0c:	e1d020d0 	ldrsb	r2, [r0]
   22f10:	e3520000 	cmp	r2, #0
   22f14:	0a000009 	beq	22f40 <strchr+0x34>
   22f18:	e1510002 	cmp	r1, r2
   22f1c:	1a000002 	bne	22f2c <strchr+0x20>
   22f20:	ea000008 	b	22f48 <strchr+0x3c>
   22f24:	e1530001 	cmp	r3, r1
   22f28:	012fff1e 	bxeq	lr
   22f2c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   22f30:	e3530000 	cmp	r3, #0
   22f34:	1afffffa 	bne	22f24 <strchr+0x18>
   22f38:	e1a00003 	mov	r0, r3
   22f3c:	e12fff1e 	bx	lr
   22f40:	e1a00002 	mov	r0, r2
   22f44:	e12fff1e 	bx	lr
   22f48:	e12fff1e 	bx	lr

00022f4c <strtok_r>:
   22f4c:	e3500000 	cmp	r0, #0
   22f50:	0a00002c 	beq	23008 <strtok_r+0xbc>
   22f54:	e92d4030 	push	{r4, r5, lr}
   22f58:	e1d0e0d0 	ldrsb	lr, [r0]
   22f5c:	e35e0000 	cmp	lr, #0
   22f60:	11d140d0 	ldrsbne	r4, [r1]
   22f64:	0a000024 	beq	22ffc <strtok_r+0xb0>
   22f68:	e3540000 	cmp	r4, #0
   22f6c:	0a000008 	beq	22f94 <strtok_r+0x48>
   22f70:	e15e0004 	cmp	lr, r4
   22f74:	0a000019 	beq	22fe0 <strtok_r+0x94>
   22f78:	e1a0c001 	mov	ip, r1
   22f7c:	ea000001 	b	22f88 <strtok_r+0x3c>
   22f80:	e15e0003 	cmp	lr, r3
   22f84:	0a000015 	beq	22fe0 <strtok_r+0x94>
   22f88:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   22f8c:	e3530000 	cmp	r3, #0
   22f90:	1afffffa 	bne	22f80 <strtok_r+0x34>
   22f94:	e35e0000 	cmp	lr, #0
   22f98:	0a000017 	beq	22ffc <strtok_r+0xb0>
   22f9c:	e1a05000 	mov	r5, r0
   22fa0:	e3540000 	cmp	r4, #0
   22fa4:	0a000008 	beq	22fcc <strtok_r+0x80>
   22fa8:	e15e0004 	cmp	lr, r4
   22fac:	0a00000d 	beq	22fe8 <strtok_r+0x9c>
   22fb0:	e1a0c001 	mov	ip, r1
   22fb4:	ea000001 	b	22fc0 <strtok_r+0x74>
   22fb8:	e15e0003 	cmp	lr, r3
   22fbc:	0a000009 	beq	22fe8 <strtok_r+0x9c>
   22fc0:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   22fc4:	e3530000 	cmp	r3, #0
   22fc8:	1afffffa 	bne	22fb8 <strtok_r+0x6c>
   22fcc:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   22fd0:	e35e0000 	cmp	lr, #0
   22fd4:	1afffff1 	bne	22fa0 <strtok_r+0x54>
   22fd8:	e5825000 	str	r5, [r2]
   22fdc:	e8bd8030 	pop	{r4, r5, pc}
   22fe0:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   22fe4:	eaffffdf 	b	22f68 <strtok_r+0x1c>
   22fe8:	e3a03000 	mov	r3, #0
   22fec:	e2855001 	add	r5, r5, #1
   22ff0:	e5453001 	strb	r3, [r5, #-1]
   22ff4:	e5825000 	str	r5, [r2]
   22ff8:	e8bd8030 	pop	{r4, r5, pc}
   22ffc:	e3a00000 	mov	r0, #0
   23000:	e5820000 	str	r0, [r2]
   23004:	e8bd8030 	pop	{r4, r5, pc}
   23008:	e5920000 	ldr	r0, [r2]
   2300c:	e3500000 	cmp	r0, #0
   23010:	1affffcf 	bne	22f54 <strtok_r+0x8>
   23014:	e12fff1e 	bx	lr

00023018 <strtoul>:
   23018:	e3510000 	cmp	r1, #0
   2301c:	e92d4070 	push	{r4, r5, r6, lr}
   23020:	e2425002 	sub	r5, r2, #2
   23024:	15810000 	strne	r0, [r1]
   23028:	e3520000 	cmp	r2, #0
   2302c:	13550022 	cmpne	r5, #34	; 0x22
   23030:	e3c2e010 	bic	lr, r2, #16
   23034:	83a05001 	movhi	r5, #1
   23038:	93a05000 	movls	r5, #0
   2303c:	8a000036 	bhi	2311c <strtoul+0x104>
   23040:	e1d0c0d0 	ldrsb	ip, [r0]
   23044:	e1a04000 	mov	r4, r0
   23048:	e2800001 	add	r0, r0, #1
   2304c:	e24c3009 	sub	r3, ip, #9
   23050:	e35c0020 	cmp	ip, #32
   23054:	e6ef3073 	uxtb	r3, r3
   23058:	0afffff8 	beq	23040 <strtoul+0x28>
   2305c:	e3530004 	cmp	r3, #4
   23060:	9afffff6 	bls	23040 <strtoul+0x28>
   23064:	e35c002b 	cmp	ip, #43	; 0x2b
   23068:	0a00002d 	beq	23124 <strtoul+0x10c>
   2306c:	e35c002d 	cmp	ip, #45	; 0x2d
   23070:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   23074:	03a06001 	moveq	r6, #1
   23078:	01a04000 	moveq	r4, r0
   2307c:	13a06000 	movne	r6, #0
   23080:	e35c0030 	cmp	ip, #48	; 0x30
   23084:	0a00002b 	beq	23138 <strtoul+0x120>
   23088:	e3520000 	cmp	r2, #0
   2308c:	03a0200a 	moveq	r2, #10
   23090:	e35c002f 	cmp	ip, #47	; 0x2f
   23094:	e1a0300c 	mov	r3, ip
   23098:	da00001c 	ble	23110 <strtoul+0xf8>
   2309c:	e3a05001 	mov	r5, #1
   230a0:	e3a0e000 	mov	lr, #0
   230a4:	ea000007 	b	230c8 <strtoul+0xb0>
   230a8:	e150000e 	cmp	r0, lr
   230ac:	e3a05000 	mov	r5, #0
   230b0:	e1a0e000 	mov	lr, r0
   230b4:	3a000028 	bcc	2315c <strtoul+0x144>
   230b8:	e1f430d1 	ldrsb	r3, [r4, #1]!
   230bc:	e353002f 	cmp	r3, #47	; 0x2f
   230c0:	e1a0c003 	mov	ip, r3
   230c4:	da000029 	ble	23170 <strtoul+0x158>
   230c8:	e24cc061 	sub	ip, ip, #97	; 0x61
   230cc:	e35c0019 	cmp	ip, #25
   230d0:	92433020 	subls	r3, r3, #32
   230d4:	e3530040 	cmp	r3, #64	; 0x40
   230d8:	c2433007 	subgt	r3, r3, #7
   230dc:	e2433030 	sub	r3, r3, #48	; 0x30
   230e0:	e1520003 	cmp	r2, r3
   230e4:	e020329e 	mla	r0, lr, r2, r3
   230e8:	caffffee 	bgt	230a8 <strtoul+0x90>
   230ec:	e2255001 	eor	r5, r5, #1
   230f0:	e1a0000e 	mov	r0, lr
   230f4:	e3510000 	cmp	r1, #0
   230f8:	e0055006 	and	r5, r5, r6
   230fc:	0a000000 	beq	23104 <strtoul+0xec>
   23100:	e5814000 	str	r4, [r1]
   23104:	e3550000 	cmp	r5, #0
   23108:	12600000 	rsbne	r0, r0, #0
   2310c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23110:	e3510000 	cmp	r1, #0
   23114:	13a00000 	movne	r0, #0
   23118:	1afffff8 	bne	23100 <strtoul+0xe8>
   2311c:	e3a00000 	mov	r0, #0
   23120:	e8bd8070 	pop	{r4, r5, r6, pc}
   23124:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   23128:	e3a06000 	mov	r6, #0
   2312c:	e1a04000 	mov	r4, r0
   23130:	e35c0030 	cmp	ip, #48	; 0x30
   23134:	1affffd3 	bne	23088 <strtoul+0x70>
   23138:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   2313c:	e2840001 	add	r0, r4, #1
   23140:	e3cc3020 	bic	r3, ip, #32
   23144:	e3530058 	cmp	r3, #88	; 0x58
   23148:	0a00000a 	beq	23178 <strtoul+0x160>
   2314c:	e3520000 	cmp	r2, #0
   23150:	e1a04000 	mov	r4, r0
   23154:	03a02008 	moveq	r2, #8
   23158:	eaffffcc 	b	23090 <strtoul+0x78>
   2315c:	e1510005 	cmp	r1, r5
   23160:	0a00000a 	beq	23190 <strtoul+0x178>
   23164:	e5814000 	str	r4, [r1]
   23168:	e3e00000 	mvn	r0, #0
   2316c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23170:	e3a05001 	mov	r5, #1
   23174:	eaffffde 	b	230f4 <strtoul+0xdc>
   23178:	e35e0000 	cmp	lr, #0
   2317c:	1affffe6 	bne	2311c <strtoul+0x104>
   23180:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   23184:	e3a02010 	mov	r2, #16
   23188:	e2844002 	add	r4, r4, #2
   2318c:	eaffffbf 	b	23090 <strtoul+0x78>
   23190:	e3e00000 	mvn	r0, #0
   23194:	e8bd8070 	pop	{r4, r5, r6, pc}

00023198 <char2int>:
   23198:	e12fff1e 	bx	lr

0002319c <memcpy>:
   2319c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   231a0:	e352007f 	cmp	r2, #127	; 0x7f
   231a4:	9a00000b 	bls	231d8 <memcpy+0x3c>
   231a8:	e3110003 	tst	r1, #3
   231ac:	1a000009 	bne	231d8 <memcpy+0x3c>
   231b0:	e3100003 	tst	r0, #3
   231b4:	1a000007 	bne	231d8 <memcpy+0x3c>
   231b8:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   231bc:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   231c0:	e2422020 	sub	r2, r2, #32
   231c4:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   231c8:	f5d1f040 	pld	[r1, #64]	; 0x40
   231cc:	e352001f 	cmp	r2, #31
   231d0:	8afffff9 	bhi	231bc <memcpy+0x20>
   231d4:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   231d8:	e3520000 	cmp	r2, #0
   231dc:	0a000003 	beq	231f0 <memcpy+0x54>
   231e0:	e4d13001 	ldrb	r3, [r1], #1
   231e4:	e2522001 	subs	r2, r2, #1
   231e8:	e4c03001 	strb	r3, [r0], #1
   231ec:	1afffffb 	bne	231e0 <memcpy+0x44>
   231f0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   231f4:	e12fff1e 	bx	lr

000231f8 <CDevice::~CDevice()>:
   231f8:	e12fff1e 	bx	lr

000231fc <CDevice::Read(void*, unsigned int)>:
   231fc:	e3e00000 	mvn	r0, #0
   23200:	e12fff1e 	bx	lr

00023204 <CDevice::Seek(unsigned long long)>:
   23204:	e3e00000 	mvn	r0, #0
   23208:	e3e01000 	mvn	r1, #0
   2320c:	e12fff1e 	bx	lr

00023210 <CDevice::~CDevice()>:
   23210:	e92d4010 	push	{r4, lr}
   23214:	e3a01004 	mov	r1, #4
   23218:	e1a04000 	mov	r4, r0
   2321c:	ebfffb56 	bl	21f7c <operator delete(void*, unsigned int)>
   23220:	e1a00004 	mov	r0, r4
   23224:	e8bd8010 	pop	{r4, pc}

00023228 <CDevice::CDevice()>:
   23228:	e59f3004 	ldr	r3, [pc, #4]	; 23234 <CDevice::CDevice()+0xc>
   2322c:	e5803000 	str	r3, [r0]
   23230:	e12fff1e 	bx	lr
   23234:	0002fd0c 	.word	0x0002fd0c

00023238 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   23238:	e3a01000 	mov	r1, #0
   2323c:	e3a0c00a 	mov	ip, #10
   23240:	ea000009 	b	2326c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   23244:	e3530009 	cmp	r3, #9
   23248:	8a00000f 	bhi	2328c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
   2324c:	e3720001 	cmn	r2, #1
   23250:	13a03000 	movne	r3, #0
   23254:	03a03001 	moveq	r3, #1
   23258:	e1510002 	cmp	r1, r2
   2325c:	83833001 	orrhi	r3, r3, #1
   23260:	e1a01002 	mov	r1, r2
   23264:	e3530000 	cmp	r3, #0
   23268:	1a000007 	bne	2328c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
   2326c:	e0d020d1 	ldrsb	r2, [r0], #1
   23270:	e3520000 	cmp	r2, #0
   23274:	e2423030 	sub	r3, r2, #48	; 0x30
   23278:	e022319c 	mla	r2, ip, r1, r3
   2327c:	e6ef3073 	uxtb	r3, r3
   23280:	1affffef 	bne	23244 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
   23284:	e1a00001 	mov	r0, r1
   23288:	e12fff1e 	bx	lr
   2328c:	e3e01000 	mvn	r1, #0
   23290:	e1a00001 	mov	r0, r1
   23294:	e12fff1e 	bx	lr

00023298 <CKernelOptions::~CKernelOptions()>:
   23298:	e3023884 	movw	r3, #10372	; 0x2884
   2329c:	e3403143 	movt	r3, #323	; 0x143
   232a0:	e3a02000 	mov	r2, #0
   232a4:	e5832000 	str	r2, [r3]
   232a8:	e12fff1e 	bx	lr

000232ac <CKernelOptions::GetWidth() const>:
   232ac:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   232b0:	e12fff1e 	bx	lr

000232b4 <CKernelOptions::GetHeight() const>:
   232b4:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   232b8:	e12fff1e 	bx	lr

000232bc <CKernelOptions::GetLogDevice() const>:
   232bc:	e2800e81 	add	r0, r0, #2064	; 0x810
   232c0:	e2800008 	add	r0, r0, #8
   232c4:	e12fff1e 	bx	lr

000232c8 <CKernelOptions::GetLogLevel() const>:
   232c8:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   232cc:	e12fff1e 	bx	lr

000232d0 <CKernelOptions::GetKeyMap() const>:
   232d0:	e2800e83 	add	r0, r0, #2096	; 0x830
   232d4:	e12fff1e 	bx	lr

000232d8 <CKernelOptions::GetUSBPowerDelay() const>:
   232d8:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   232dc:	e12fff1e 	bx	lr

000232e0 <CKernelOptions::GetCPUSpeed() const>:
   232e0:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
   232e4:	e12fff1e 	bx	lr

000232e8 <CKernelOptions::GetSoCMaxTemp() const>:
   232e8:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
   232ec:	e12fff1e 	bx	lr

000232f0 <CKernelOptions::Get()>:
   232f0:	e3023884 	movw	r3, #10372	; 0x2884
   232f4:	e3403143 	movt	r3, #323	; 0x143
   232f8:	e5930000 	ldr	r0, [r3]
   232fc:	e12fff1e 	bx	lr

00023300 <CKernelOptions::GetToken()>:
   23300:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
   23304:	e1d320d0 	ldrsb	r2, [r3]
   23308:	e3520000 	cmp	r2, #0
   2330c:	1a000005 	bne	23328 <CKernelOptions::GetToken()+0x28>
   23310:	ea000016 	b	23370 <CKernelOptions::GetToken()+0x70>
   23314:	e2833001 	add	r3, r3, #1
   23318:	e580380c 	str	r3, [r0, #2060]	; 0x80c
   2331c:	e1d320d0 	ldrsb	r2, [r3]
   23320:	e3520000 	cmp	r2, #0
   23324:	0a000011 	beq	23370 <CKernelOptions::GetToken()+0x70>
   23328:	e3520020 	cmp	r2, #32
   2332c:	0afffff8 	beq	23314 <CKernelOptions::GetToken()+0x14>
   23330:	e1a02003 	mov	r2, r3
   23334:	ea000000 	b	2333c <CKernelOptions::GetToken()+0x3c>
   23338:	e1a02001 	mov	r2, r1
   2333c:	e2821001 	add	r1, r2, #1
   23340:	e580180c 	str	r1, [r0, #2060]	; 0x80c
   23344:	e1d2c0d1 	ldrsb	ip, [r2, #1]
   23348:	e35c0000 	cmp	ip, #0
   2334c:	0a000008 	beq	23374 <CKernelOptions::GetToken()+0x74>
   23350:	e35c0020 	cmp	ip, #32
   23354:	1afffff7 	bne	23338 <CKernelOptions::GetToken()+0x38>
   23358:	e2822002 	add	r2, r2, #2
   2335c:	e3a0c000 	mov	ip, #0
   23360:	e580280c 	str	r2, [r0, #2060]	; 0x80c
   23364:	e1a00003 	mov	r0, r3
   23368:	e5c1c000 	strb	ip, [r1]
   2336c:	e12fff1e 	bx	lr
   23370:	e3a03000 	mov	r3, #0
   23374:	e1a00003 	mov	r0, r3
   23378:	e12fff1e 	bx	lr

0002337c <CKernelOptions::CKernelOptions()>:
   2337c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23380:	e1a05000 	mov	r5, r0
   23384:	e2807e81 	add	r7, r0, #2064	; 0x810
   23388:	e3a04000 	mov	r4, #0
   2338c:	e3a02004 	mov	r2, #4
   23390:	e3a0303c 	mov	r3, #60	; 0x3c
   23394:	e2877008 	add	r7, r7, #8
   23398:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   2339c:	e24dd01c 	sub	sp, sp, #28
   233a0:	e585383c 	str	r3, [r5, #2108]	; 0x83c
   233a4:	e1a00007 	mov	r0, r7
   233a8:	e30f1d20 	movw	r1, #64800	; 0xfd20
   233ac:	e3401002 	movt	r1, #2
   233b0:	e5854810 	str	r4, [r5, #2064]	; 0x810
   233b4:	e2859e83 	add	r9, r5, #2096	; 0x830
   233b8:	e5854814 	str	r4, [r5, #2068]	; 0x814
   233bc:	e5854834 	str	r4, [r5, #2100]	; 0x834
   233c0:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
   233c4:	ebfffea1 	bl	22e50 <strcpy>
   233c8:	e1a00009 	mov	r0, r9
   233cc:	e30e1028 	movw	r1, #57384	; 0xe028
   233d0:	e3401002 	movt	r1, #2
   233d4:	ebfffe9d 	bl	22e50 <strcpy>
   233d8:	e3023884 	movw	r3, #10372	; 0x2884
   233dc:	e3403143 	movt	r3, #323	; 0x143
   233e0:	e28d0010 	add	r0, sp, #16
   233e4:	e5835000 	str	r5, [r3]
   233e8:	ebfff697 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   233ec:	e58d4000 	str	r4, [sp]
   233f0:	e1a02005 	mov	r2, r5
   233f4:	e28d0010 	add	r0, sp, #16
   233f8:	e3a01001 	mov	r1, #1
   233fc:	e3401005 	movt	r1, #5
   23400:	e300380c 	movw	r3, #2060	; 0x80c
   23404:	ebfff6d8 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   23408:	e1500004 	cmp	r0, r4
   2340c:	0a000040 	beq	23514 <CKernelOptions::CKernelOptions()+0x198>
   23410:	e5953008 	ldr	r3, [r5, #8]
   23414:	e3530b02 	cmp	r3, #2048	; 0x800
   23418:	2a00003d 	bcs	23514 <CKernelOptions::CKernelOptions()+0x198>
   2341c:	e0853003 	add	r3, r5, r3
   23420:	e285200c 	add	r2, r5, #12
   23424:	e30f6d78 	movw	r6, #64888	; 0xfd78
   23428:	e3406002 	movt	r6, #2
   2342c:	e30f8d28 	movw	r8, #64808	; 0xfd28
   23430:	e3408002 	movt	r8, #2
   23434:	e30fad30 	movw	sl, #64816	; 0xfd30
   23438:	e340a002 	movt	sl, #2
   2343c:	e5c3400c 	strb	r4, [r3, #12]
   23440:	e585280c 	str	r2, [r5, #2060]	; 0x80c
   23444:	e1a00005 	mov	r0, r5
   23448:	ebffffac 	bl	23300 <CKernelOptions::GetToken()>
   2344c:	e250b000 	subs	fp, r0, #0
   23450:	0a00002f 	beq	23514 <CKernelOptions::CKernelOptions()+0x198>
   23454:	e1db30d0 	ldrsb	r3, [fp]
   23458:	e3530000 	cmp	r3, #0
   2345c:	0a000008 	beq	23484 <CKernelOptions::CKernelOptions()+0x108>
   23460:	e353003d 	cmp	r3, #61	; 0x3d
   23464:	e1a0400b 	mov	r4, fp
   23468:	1a000002 	bne	23478 <CKernelOptions::CKernelOptions()+0xfc>
   2346c:	ea00002d 	b	23528 <CKernelOptions::CKernelOptions()+0x1ac>
   23470:	e353003d 	cmp	r3, #61	; 0x3d
   23474:	0a00002b 	beq	23528 <CKernelOptions::CKernelOptions()+0x1ac>
   23478:	e1f430d1 	ldrsb	r3, [r4, #1]!
   2347c:	e3530000 	cmp	r3, #0
   23480:	1afffffa 	bne	23470 <CKernelOptions::CKernelOptions()+0xf4>
   23484:	e1a01006 	mov	r1, r6
   23488:	e1a0000b 	mov	r0, fp
   2348c:	ebfffe54 	bl	22de4 <strcmp>
   23490:	e3500000 	cmp	r0, #0
   23494:	0affffea 	beq	23444 <CKernelOptions::CKernelOptions()+0xc8>
   23498:	e1a01008 	mov	r1, r8
   2349c:	e1a0000b 	mov	r0, fp
   234a0:	ebfffe4f 	bl	22de4 <strcmp>
   234a4:	e3500000 	cmp	r0, #0
   234a8:	13a03000 	movne	r3, #0
   234ac:	0affffe4 	beq	23444 <CKernelOptions::CKernelOptions()+0xc8>
   234b0:	e1a0100a 	mov	r1, sl
   234b4:	e1a0000b 	mov	r0, fp
   234b8:	e58d300c 	str	r3, [sp, #12]
   234bc:	ebfffe48 	bl	22de4 <strcmp>
   234c0:	e2504000 	subs	r4, r0, #0
   234c4:	e59d300c 	ldr	r3, [sp, #12]
   234c8:	0a00002a 	beq	23578 <CKernelOptions::CKernelOptions()+0x1fc>
   234cc:	e30f1d38 	movw	r1, #64824	; 0xfd38
   234d0:	e3401002 	movt	r1, #2
   234d4:	e1a0000b 	mov	r0, fp
   234d8:	e58d300c 	str	r3, [sp, #12]
   234dc:	ebfffe40 	bl	22de4 <strcmp>
   234e0:	e3500000 	cmp	r0, #0
   234e4:	e59d300c 	ldr	r3, [sp, #12]
   234e8:	1a000028 	bne	23590 <CKernelOptions::CKernelOptions()+0x214>
   234ec:	e3530000 	cmp	r3, #0
   234f0:	0affffd3 	beq	23444 <CKernelOptions::CKernelOptions()+0xc8>
   234f4:	e1d320d0 	ldrsb	r2, [r3]
   234f8:	e3520000 	cmp	r2, #0
   234fc:	0affffd0 	beq	23444 <CKernelOptions::CKernelOptions()+0xc8>
   23500:	e1a00003 	mov	r0, r3
   23504:	ebffff4b 	bl	23238 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   23508:	e3500004 	cmp	r0, #4
   2350c:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
   23510:	eaffffcb 	b	23444 <CKernelOptions::CKernelOptions()+0xc8>
   23514:	e28d0010 	add	r0, sp, #16
   23518:	ebfff651 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   2351c:	e1a00005 	mov	r0, r5
   23520:	e28dd01c 	add	sp, sp, #28
   23524:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23528:	e3a03000 	mov	r3, #0
   2352c:	e1a01006 	mov	r1, r6
   23530:	e5c43000 	strb	r3, [r4]
   23534:	e1a0000b 	mov	r0, fp
   23538:	ebfffe29 	bl	22de4 <strcmp>
   2353c:	e3500000 	cmp	r0, #0
   23540:	e2843001 	add	r3, r4, #1
   23544:	1a000058 	bne	236ac <CKernelOptions::CKernelOptions()+0x330>
   23548:	e3530000 	cmp	r3, #0
   2354c:	0affffbc 	beq	23444 <CKernelOptions::CKernelOptions()+0xc8>
   23550:	e1d420d1 	ldrsb	r2, [r4, #1]
   23554:	e3520000 	cmp	r2, #0
   23558:	0affffb9 	beq	23444 <CKernelOptions::CKernelOptions()+0xc8>
   2355c:	e1a00003 	mov	r0, r3
   23560:	ebffff34 	bl	23238 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   23564:	e300353c 	movw	r3, #1340	; 0x53c
   23568:	e2402d0a 	sub	r2, r0, #640	; 0x280
   2356c:	e1520003 	cmp	r2, r3
   23570:	95850810 	strls	r0, [r5, #2064]	; 0x810
   23574:	eaffffb2 	b	23444 <CKernelOptions::CKernelOptions()+0xc8>
   23578:	e1a01003 	mov	r1, r3
   2357c:	e3a02013 	mov	r2, #19
   23580:	e1a00007 	mov	r0, r7
   23584:	ebfffe3c 	bl	22e7c <strncpy>
   23588:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
   2358c:	eaffffac 	b	23444 <CKernelOptions::CKernelOptions()+0xc8>
   23590:	e30f1d44 	movw	r1, #64836	; 0xfd44
   23594:	e3401002 	movt	r1, #2
   23598:	e1a0000b 	mov	r0, fp
   2359c:	e58d300c 	str	r3, [sp, #12]
   235a0:	ebfffe0f 	bl	22de4 <strcmp>
   235a4:	e2504000 	subs	r4, r0, #0
   235a8:	e59d300c 	ldr	r3, [sp, #12]
   235ac:	1a000005 	bne	235c8 <CKernelOptions::CKernelOptions()+0x24c>
   235b0:	e1a01003 	mov	r1, r3
   235b4:	e3a02002 	mov	r2, #2
   235b8:	e1a00009 	mov	r0, r9
   235bc:	ebfffe2e 	bl	22e7c <strncpy>
   235c0:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
   235c4:	eaffff9e 	b	23444 <CKernelOptions::CKernelOptions()+0xc8>
   235c8:	e30f1d4c 	movw	r1, #64844	; 0xfd4c
   235cc:	e3401002 	movt	r1, #2
   235d0:	e1a0000b 	mov	r0, fp
   235d4:	e58d300c 	str	r3, [sp, #12]
   235d8:	ebfffe01 	bl	22de4 <strcmp>
   235dc:	e3500000 	cmp	r0, #0
   235e0:	e59d300c 	ldr	r3, [sp, #12]
   235e4:	1a00000b 	bne	23618 <CKernelOptions::CKernelOptions()+0x29c>
   235e8:	e3530000 	cmp	r3, #0
   235ec:	0affff94 	beq	23444 <CKernelOptions::CKernelOptions()+0xc8>
   235f0:	e1d320d0 	ldrsb	r2, [r3]
   235f4:	e3520000 	cmp	r2, #0
   235f8:	0affff91 	beq	23444 <CKernelOptions::CKernelOptions()+0xc8>
   235fc:	e1a00003 	mov	r0, r3
   23600:	ebffff0c 	bl	23238 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   23604:	e3013e78 	movw	r3, #7800	; 0x1e78
   23608:	e24020c8 	sub	r2, r0, #200	; 0xc8
   2360c:	e1520003 	cmp	r2, r3
   23610:	95850834 	strls	r0, [r5, #2100]	; 0x834
   23614:	eaffff8a 	b	23444 <CKernelOptions::CKernelOptions()+0xc8>
   23618:	e30f1d5c 	movw	r1, #64860	; 0xfd5c
   2361c:	e3401002 	movt	r1, #2
   23620:	e1a0000b 	mov	r0, fp
   23624:	e58d300c 	str	r3, [sp, #12]
   23628:	ebfffded 	bl	22de4 <strcmp>
   2362c:	e3500000 	cmp	r0, #0
   23630:	e59d300c 	ldr	r3, [sp, #12]
   23634:	1a000007 	bne	23658 <CKernelOptions::CKernelOptions()+0x2dc>
   23638:	e1a00003 	mov	r0, r3
   2363c:	e30f1d64 	movw	r1, #64868	; 0xfd64
   23640:	e3401002 	movt	r1, #2
   23644:	ebfffde6 	bl	22de4 <strcmp>
   23648:	e3500000 	cmp	r0, #0
   2364c:	03a03001 	moveq	r3, #1
   23650:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
   23654:	eaffff7a 	b	23444 <CKernelOptions::CKernelOptions()+0xc8>
   23658:	e1a0000b 	mov	r0, fp
   2365c:	e30f1d6c 	movw	r1, #64876	; 0xfd6c
   23660:	e3401002 	movt	r1, #2
   23664:	e58d300c 	str	r3, [sp, #12]
   23668:	ebfffddd 	bl	22de4 <strcmp>
   2366c:	e59d300c 	ldr	r3, [sp, #12]
   23670:	e2902000 	adds	r2, r0, #0
   23674:	13a02001 	movne	r2, #1
   23678:	e3530000 	cmp	r3, #0
   2367c:	03822001 	orreq	r2, r2, #1
   23680:	e3520000 	cmp	r2, #0
   23684:	1affff6e 	bne	23444 <CKernelOptions::CKernelOptions()+0xc8>
   23688:	e1d320d0 	ldrsb	r2, [r3]
   2368c:	e3520000 	cmp	r2, #0
   23690:	0affff6b 	beq	23444 <CKernelOptions::CKernelOptions()+0xc8>
   23694:	e1a00003 	mov	r0, r3
   23698:	ebfffee6 	bl	23238 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   2369c:	e2403028 	sub	r3, r0, #40	; 0x28
   236a0:	e3530026 	cmp	r3, #38	; 0x26
   236a4:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
   236a8:	eaffff65 	b	23444 <CKernelOptions::CKernelOptions()+0xc8>
   236ac:	e1a01008 	mov	r1, r8
   236b0:	e1a0000b 	mov	r0, fp
   236b4:	e58d300c 	str	r3, [sp, #12]
   236b8:	ebfffdc9 	bl	22de4 <strcmp>
   236bc:	e3500000 	cmp	r0, #0
   236c0:	e59d300c 	ldr	r3, [sp, #12]
   236c4:	1affff79 	bne	234b0 <CKernelOptions::CKernelOptions()+0x134>
   236c8:	e3530000 	cmp	r3, #0
   236cc:	0affff5c 	beq	23444 <CKernelOptions::CKernelOptions()+0xc8>
   236d0:	e1d420d1 	ldrsb	r2, [r4, #1]
   236d4:	e3520000 	cmp	r2, #0
   236d8:	0affff59 	beq	23444 <CKernelOptions::CKernelOptions()+0xc8>
   236dc:	e1a00003 	mov	r0, r3
   236e0:	ebfffed4 	bl	23238 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   236e4:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   236e8:	e3530f96 	cmp	r3, #600	; 0x258
   236ec:	95850814 	strls	r0, [r5, #2068]	; 0x814
   236f0:	eaffff53 	b	23444 <CKernelOptions::CKernelOptions()+0xc8>

000236f4 <CKernelOptions::GetOptionValue(char*)>:
   236f4:	e1d030d0 	ldrsb	r3, [r0]
   236f8:	e3530000 	cmp	r3, #0
   236fc:	1a000003 	bne	23710 <CKernelOptions::GetOptionValue(char*)+0x1c>
   23700:	ea000007 	b	23724 <CKernelOptions::GetOptionValue(char*)+0x30>
   23704:	e1f030d1 	ldrsb	r3, [r0, #1]!
   23708:	e3530000 	cmp	r3, #0
   2370c:	0a000004 	beq	23724 <CKernelOptions::GetOptionValue(char*)+0x30>
   23710:	e353003d 	cmp	r3, #61	; 0x3d
   23714:	1afffffa 	bne	23704 <CKernelOptions::GetOptionValue(char*)+0x10>
   23718:	e3a02000 	mov	r2, #0
   2371c:	e2803001 	add	r3, r0, #1
   23720:	e5c02000 	strb	r2, [r0]
   23724:	e1a00003 	mov	r0, r3
   23728:	e12fff1e 	bx	lr

0002372c <CKernelOptions::GetDecimal(char*)>:
   2372c:	e2503000 	subs	r3, r0, #0
   23730:	0a000002 	beq	23740 <CKernelOptions::GetDecimal(char*)+0x14>
   23734:	e1d330d0 	ldrsb	r3, [r3]
   23738:	e3530000 	cmp	r3, #0
   2373c:	1a000001 	bne	23748 <CKernelOptions::GetDecimal(char*)+0x1c>
   23740:	e3e00000 	mvn	r0, #0
   23744:	e12fff1e 	bx	lr
   23748:	eafffeba 	b	23238 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0002374c <CPageTable::CPageTable()>:
   2374c:	e3a01000 	mov	r1, #0
   23750:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
   23754:	e92d4010 	push	{r4, lr}
   23758:	e1a0c001 	mov	ip, r1
   2375c:	e1a04000 	mov	r4, r0
   23760:	e1a03002 	mov	r3, r2
   23764:	e3a0e002 	mov	lr, #2
   23768:	e3a00001 	mov	r0, #1
   2376c:	e8840006 	stm	r4, {r1, r2}
   23770:	e5d32000 	ldrb	r2, [r3]
   23774:	e35c0b01 	cmp	ip, #1024	; 0x400
   23778:	e5d31002 	ldrb	r1, [r3, #2]
   2377c:	e2833004 	add	r3, r3, #4
   23780:	e7c1201e 	bfi	r2, lr, #0, #2
   23784:	e3811001 	orr	r1, r1, #1
   23788:	e6ef2072 	uxtb	r2, r2
   2378c:	e20110f9 	and	r1, r1, #249	; 0xf9
   23790:	e3822004 	orr	r2, r2, #4
   23794:	e7c3119f 	bfc	r1, #3, #1
   23798:	e20220f7 	and	r2, r2, #247	; 0xf7
   2379c:	e5431002 	strb	r1, [r3, #-2]
   237a0:	e7c4221f 	bfc	r2, #4, #1
   237a4:	e5432004 	strb	r2, [r3, #-4]
   237a8:	e15320b4 	ldrh	r2, [r3, #-4]
   237ac:	e15310b2 	ldrh	r1, [r3, #-2]
   237b0:	e7c8229f 	bfc	r2, #5, #4
   237b4:	e14320b4 	strh	r2, [r3, #-4]
   237b8:	e7cf121c 	bfi	r1, ip, #4, #12
   237bc:	e28cc001 	add	ip, ip, #1
   237c0:	e1a02422 	lsr	r2, r2, #8
   237c4:	e14310b2 	strh	r1, [r3, #-2]
   237c8:	e20220fd 	and	r2, r2, #253	; 0xfd
   237cc:	e7c32110 	bfi	r2, r0, #2, #2
   237d0:	e202208f 	and	r2, r2, #143	; 0x8f
   237d4:	e7c7239f 	bfc	r2, #7, #1
   237d8:	e5432003 	strb	r2, [r3, #-3]
   237dc:	25532004 	ldrbcs	r2, [r3, #-4]
   237e0:	23822010 	orrcs	r2, r2, #16
   237e4:	25432004 	strbcs	r2, [r3, #-4]
   237e8:	e35c0a01 	cmp	ip, #4096	; 0x1000
   237ec:	1affffdf 	bne	23770 <CPageTable::CPageTable()+0x24>
   237f0:	eb001563 	bl	28d84 <CleanDataCache>
   237f4:	e1a00004 	mov	r0, r4
   237f8:	e8bd8010 	pop	{r4, pc}

000237fc <CPageTable::CPageTable(unsigned int)>:
   237fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23800:	e3a03001 	mov	r3, #1
   23804:	e5803000 	str	r3, [r0]
   23808:	e1a04000 	mov	r4, r0
   2380c:	e1a05001 	mov	r5, r1
   23810:	eb001866 	bl	299b0 <palloc>
   23814:	e3500000 	cmp	r0, #0
   23818:	e5840004 	str	r0, [r4, #4]
   2381c:	0a00003e 	beq	2391c <CPageTable::CPageTable(unsigned int)+0x120>
   23820:	e7eb3050 	ubfx	r3, r0, #0, #12
   23824:	e3530000 	cmp	r3, #0
   23828:	1a000033 	bne	238fc <CPageTable::CPageTable(unsigned int)+0x100>
   2382c:	e3a02000 	mov	r2, #0
   23830:	e30ac330 	movw	ip, #41776	; 0xa330
   23834:	e1a07002 	mov	r7, r2
   23838:	e340c002 	movt	ip, #2
   2383c:	e3a06002 	mov	r6, #2
   23840:	e3a0e001 	mov	lr, #1
   23844:	ea000009 	b	23870 <CPageTable::CPageTable(unsigned int)+0x74>
   23848:	e6ef1073 	uxtb	r1, r3
   2384c:	e5d03002 	ldrb	r3, [r0, #2]
   23850:	e7c31197 	bfi	r1, r7, #3, #1
   23854:	e5c01000 	strb	r1, [r0]
   23858:	e3833001 	orr	r3, r3, #1
   2385c:	e5c03002 	strb	r3, [r0, #2]
   23860:	e2822601 	add	r2, r2, #1048576	; 0x100000
   23864:	e2800004 	add	r0, r0, #4
   23868:	e3520101 	cmp	r2, #1073741824	; 0x40000000
   2386c:	0a00001f 	beq	238f0 <CPageTable::CPageTable(unsigned int)+0xf4>
   23870:	e5d03001 	ldrb	r3, [r0, #1]
   23874:	e7e31a52 	ubfx	r1, r2, #20, #4
   23878:	e152000c 	cmp	r2, ip
   2387c:	e386800c 	orr	r8, r6, #12
   23880:	e20330fc 	and	r3, r3, #252	; 0xfc
   23884:	e1a01201 	lsl	r1, r1, #4
   23888:	e7c3311e 	bfi	r3, lr, #2, #2
   2388c:	e5c01002 	strb	r1, [r0, #2]
   23890:	e203308f 	and	r3, r3, #143	; 0x8f
   23894:	e1a01c22 	lsr	r1, r2, #24
   23898:	e7c7339f 	bfc	r3, #7, #1
   2389c:	e5c08000 	strb	r8, [r0]
   238a0:	e5c03001 	strb	r3, [r0, #1]
   238a4:	e5c01003 	strb	r1, [r0, #3]
   238a8:	3affffec 	bcc	23860 <CPageTable::CPageTable(unsigned int)+0x64>
   238ac:	e1520005 	cmp	r2, r5
   238b0:	e6ef3078 	uxtb	r3, r8
   238b4:	e3833010 	orr	r3, r3, #16
   238b8:	e5c03000 	strb	r3, [r0]
   238bc:	2affffe1 	bcs	23848 <CPageTable::CPageTable(unsigned int)+0x4c>
   238c0:	e3520501 	cmp	r2, #4194304	; 0x400000
   238c4:	1affffe5 	bne	23860 <CPageTable::CPageTable(unsigned int)+0x64>
   238c8:	e5d03000 	ldrb	r3, [r0]
   238cc:	e3a02605 	mov	r2, #5242880	; 0x500000
   238d0:	e5d01002 	ldrb	r1, [r0, #2]
   238d4:	e2800004 	add	r0, r0, #4
   238d8:	e20330fb 	and	r3, r3, #251	; 0xfb
   238dc:	e7c33197 	bfi	r3, r7, #3, #1
   238e0:	e3811001 	orr	r1, r1, #1
   238e4:	e5403004 	strb	r3, [r0, #-4]
   238e8:	e5401002 	strb	r1, [r0, #-2]
   238ec:	eaffffdf 	b	23870 <CPageTable::CPageTable(unsigned int)+0x74>
   238f0:	eb001523 	bl	28d84 <CleanDataCache>
   238f4:	e1a00004 	mov	r0, r4
   238f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   238fc:	e30f1d80 	movw	r1, #64896	; 0xfd80
   23900:	e30f0da0 	movw	r0, #64928	; 0xfda0
   23904:	e3401002 	movt	r1, #2
   23908:	e3400002 	movt	r0, #2
   2390c:	e3a02051 	mov	r2, #81	; 0x51
   23910:	eb0004a1 	bl	24b9c <assertion_failed>
   23914:	e5940004 	ldr	r0, [r4, #4]
   23918:	eaffffc3 	b	2382c <CPageTable::CPageTable(unsigned int)+0x30>
   2391c:	e30f1d80 	movw	r1, #64896	; 0xfd80
   23920:	e30f0d90 	movw	r0, #64912	; 0xfd90
   23924:	e3401002 	movt	r1, #2
   23928:	e3400002 	movt	r0, #2
   2392c:	e3a02050 	mov	r2, #80	; 0x50
   23930:	eb000499 	bl	24b9c <assertion_failed>
   23934:	e5940004 	ldr	r0, [r4, #4]
   23938:	eaffffb8 	b	23820 <CPageTable::CPageTable(unsigned int)+0x24>

0002393c <CPageTable::~CPageTable()>:
   2393c:	e5903000 	ldr	r3, [r0]
   23940:	e92d4010 	push	{r4, lr}
   23944:	e3530000 	cmp	r3, #0
   23948:	e1a04000 	mov	r4, r0
   2394c:	0a000001 	beq	23958 <CPageTable::~CPageTable()+0x1c>
   23950:	e5900004 	ldr	r0, [r0, #4]
   23954:	eb00184f 	bl	29a98 <pfree>
   23958:	e1a00004 	mov	r0, r4
   2395c:	e8bd8010 	pop	{r4, pc}

00023960 <CPageTable::GetBaseAddress() const>:
   23960:	e5900004 	ldr	r0, [r0, #4]
   23964:	e3800059 	orr	r0, r0, #89	; 0x59
   23968:	e12fff1e 	bx	lr

0002396c <CScreenDevice::~CScreenDevice()>:
   2396c:	e590200c 	ldr	r2, [r0, #12]
   23970:	e59f3068 	ldr	r3, [pc, #104]	; 239e0 <CScreenDevice::~CScreenDevice()+0x74>
   23974:	e3520000 	cmp	r2, #0
   23978:	e92d4070 	push	{r4, r5, r6, lr}
   2397c:	e1a04000 	mov	r4, r0
   23980:	e5803000 	str	r3, [r0]
   23984:	0a000003 	beq	23998 <CScreenDevice::~CScreenDevice()+0x2c>
   23988:	e5900018 	ldr	r0, [r0, #24]
   2398c:	e3500000 	cmp	r0, #0
   23990:	0a000000 	beq	23998 <CScreenDevice::~CScreenDevice()+0x2c>
   23994:	ebfff977 	bl	21f78 <operator delete[](void*)>
   23998:	e5945010 	ldr	r5, [r4, #16]
   2399c:	e3a03000 	mov	r3, #0
   239a0:	e5843018 	str	r3, [r4, #24]
   239a4:	e1550003 	cmp	r5, r3
   239a8:	0a000004 	beq	239c0 <CScreenDevice::~CScreenDevice()+0x54>
   239ac:	e1a00005 	mov	r0, r5
   239b0:	eb00196e 	bl	29f70 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   239b4:	e1a00005 	mov	r0, r5
   239b8:	e3a01024 	mov	r1, #36	; 0x24
   239bc:	ebfff96e 	bl	21f7c <operator delete(void*, unsigned int)>
   239c0:	e3a03000 	mov	r3, #0
   239c4:	e2840014 	add	r0, r4, #20
   239c8:	e5843010 	str	r3, [r4, #16]
   239cc:	eb000499 	bl	24c38 <CCharGenerator::~CCharGenerator()>
   239d0:	e1a00004 	mov	r0, r4
   239d4:	ebfffe07 	bl	231f8 <CDevice::~CDevice()>
   239d8:	e1a00004 	mov	r0, r4
   239dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   239e0:	0002fdc8 	.word	0x0002fdc8

000239e4 <CScreenDevice::~CScreenDevice()>:
   239e4:	e92d4010 	push	{r4, lr}
   239e8:	e1a04000 	mov	r4, r0
   239ec:	ebffffde 	bl	2396c <CScreenDevice::~CScreenDevice()>
   239f0:	e1a00004 	mov	r0, r4
   239f4:	e3a01060 	mov	r1, #96	; 0x60
   239f8:	ebfff95f 	bl	21f7c <operator delete(void*, unsigned int)>
   239fc:	e1a00004 	mov	r0, r4
   23a00:	e8bd8010 	pop	{r4, pc}

00023a04 <CScreenDevice::InvertCursor() [clone .part.6]>:
   23a04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23a08:	e2806014 	add	r6, r0, #20
   23a0c:	e1a05000 	mov	r5, r0
   23a10:	e3a08000 	mov	r8, #0
   23a14:	e1a00006 	mov	r0, r6
   23a18:	eb00048b 	bl	24c4c <CCharGenerator::GetUnderline() const>
   23a1c:	e1a07000 	mov	r7, r0
   23a20:	e1a00006 	mov	r0, r6
   23a24:	eb000486 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   23a28:	e1500007 	cmp	r0, r7
   23a2c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   23a30:	e3a04000 	mov	r4, #0
   23a34:	ea000013 	b	23a88 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
   23a38:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   23a3c:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   23a40:	e0843003 	add	r3, r4, r3
   23a44:	e1530002 	cmp	r3, r2
   23a48:	2a00000d 	bcs	23a84 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   23a4c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   23a50:	e5951028 	ldr	r1, [r5, #40]	; 0x28
   23a54:	e0872002 	add	r2, r7, r2
   23a58:	e1520001 	cmp	r2, r1
   23a5c:	2a000008 	bcs	23a84 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   23a60:	e5950020 	ldr	r0, [r5, #32]
   23a64:	e5951018 	ldr	r1, [r5, #24]
   23a68:	e0233290 	mla	r3, r0, r2, r3
   23a6c:	e1a03083 	lsl	r3, r3, #1
   23a70:	e19120b3 	ldrh	r2, [r1, r3]
   23a74:	e3520000 	cmp	r2, #0
   23a78:	118180b3 	strhne	r8, [r1, r3]
   23a7c:	01d524b8 	ldrheq	r2, [r5, #72]	; 0x48
   23a80:	018120b3 	strheq	r2, [r1, r3]
   23a84:	e2844001 	add	r4, r4, #1
   23a88:	e1a00006 	mov	r0, r6
   23a8c:	eb00046a 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   23a90:	e1500004 	cmp	r0, r4
   23a94:	8affffe7 	bhi	23a38 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
   23a98:	e2877001 	add	r7, r7, #1
   23a9c:	eaffffdf 	b	23a20 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

00023aa0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
   23aa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23aa4:	e1a04000 	mov	r4, r0
   23aa8:	e1a05001 	mov	r5, r1
   23aac:	e1a07002 	mov	r7, r2
   23ab0:	e1a06003 	mov	r6, r3
   23ab4:	ebfffddb 	bl	23228 <CDevice::CDevice()>
   23ab8:	e59fc054 	ldr	ip, [pc, #84]	; 23b14 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x74>
   23abc:	e2840014 	add	r0, r4, #20
   23ac0:	e5845004 	str	r5, [r4, #4]
   23ac4:	e3a05000 	mov	r5, #0
   23ac8:	e5847008 	str	r7, [r4, #8]
   23acc:	e584600c 	str	r6, [r4, #12]
   23ad0:	e584c000 	str	ip, [r4]
   23ad4:	e5845010 	str	r5, [r4, #16]
   23ad8:	eb000453 	bl	24c2c <CCharGenerator::CCharGenerator()>
   23adc:	e3a03001 	mov	r3, #1
   23ae0:	e3e02020 	mvn	r2, #32
   23ae4:	e5845018 	str	r5, [r4, #24]
   23ae8:	e5845030 	str	r5, [r4, #48]	; 0x30
   23aec:	e1a00004 	mov	r0, r4
   23af0:	e5845034 	str	r5, [r4, #52]	; 0x34
   23af4:	e584503c 	str	r5, [r4, #60]	; 0x3c
   23af8:	e5845040 	str	r5, [r4, #64]	; 0x40
   23afc:	e584504c 	str	r5, [r4, #76]	; 0x4c
   23b00:	e5845058 	str	r5, [r4, #88]	; 0x58
   23b04:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
   23b08:	e5843044 	str	r3, [r4, #68]	; 0x44
   23b0c:	e584305c 	str	r3, [r4, #92]	; 0x5c
   23b10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23b14:	0002fdc8 	.word	0x0002fdc8

00023b18 <CScreenDevice::GetWidth() const>:
   23b18:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   23b1c:	e12fff1e 	bx	lr

00023b20 <CScreenDevice::GetHeight() const>:
   23b20:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   23b24:	e12fff1e 	bx	lr

00023b28 <CScreenDevice::GetColumns() const>:
   23b28:	e1a03000 	mov	r3, r0
   23b2c:	e2800014 	add	r0, r0, #20
   23b30:	e92d4010 	push	{r4, lr}
   23b34:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   23b38:	eb00043f 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   23b3c:	e1a01000 	mov	r1, r0
   23b40:	e1a00004 	mov	r0, r4
   23b44:	ebfff85e 	bl	21cc4 <__aeabi_uidiv>
   23b48:	e8bd8010 	pop	{r4, pc}

00023b4c <CScreenDevice::GetRows() const>:
   23b4c:	e1a03000 	mov	r3, r0
   23b50:	e2800014 	add	r0, r0, #20
   23b54:	e92d4010 	push	{r4, lr}
   23b58:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
   23b5c:	eb000438 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   23b60:	e1a01000 	mov	r1, r0
   23b64:	e1a00004 	mov	r0, r4
   23b68:	ebfff855 	bl	21cc4 <__aeabi_uidiv>
   23b6c:	e8bd8010 	pop	{r4, pc}

00023b70 <CScreenDevice::GetStatus()>:
   23b70:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   23b74:	e591c038 	ldr	ip, [r1, #56]	; 0x38
   23b78:	e5916018 	ldr	r6, [r1, #24]
   23b7c:	e591501c 	ldr	r5, [r1, #28]
   23b80:	e5914030 	ldr	r4, [r1, #48]	; 0x30
   23b84:	e591e034 	ldr	lr, [r1, #52]	; 0x34
   23b88:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
   23b8c:	e5806000 	str	r6, [r0]
   23b90:	e5917040 	ldr	r7, [r1, #64]	; 0x40
   23b94:	e5805004 	str	r5, [r0, #4]
   23b98:	e5916044 	ldr	r6, [r1, #68]	; 0x44
   23b9c:	e5804008 	str	r4, [r0, #8]
   23ba0:	e1d154b8 	ldrh	r5, [r1, #72]	; 0x48
   23ba4:	e580e00c 	str	lr, [r0, #12]
   23ba8:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
   23bac:	e580c010 	str	ip, [r0, #16]
   23bb0:	e591e050 	ldr	lr, [r1, #80]	; 0x50
   23bb4:	e5802014 	str	r2, [r0, #20]
   23bb8:	e591c054 	ldr	ip, [r1, #84]	; 0x54
   23bbc:	e5912058 	ldr	r2, [r1, #88]	; 0x58
   23bc0:	e5807018 	str	r7, [r0, #24]
   23bc4:	e580601c 	str	r6, [r0, #28]
   23bc8:	e1c052b0 	strh	r5, [r0, #32]
   23bcc:	e5804024 	str	r4, [r0, #36]	; 0x24
   23bd0:	e580e028 	str	lr, [r0, #40]	; 0x28
   23bd4:	e580c02c 	str	ip, [r0, #44]	; 0x2c
   23bd8:	e5802030 	str	r2, [r0, #48]	; 0x30
   23bdc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00023be0 <CScreenDevice::SetStatus(TScreenStatus)>:
   23be0:	e24dd010 	sub	sp, sp, #16
   23be4:	e92d4070 	push	{r4, r5, r6, lr}
   23be8:	e28dc014 	add	ip, sp, #20
   23bec:	e590e01c 	ldr	lr, [r0, #28]
   23bf0:	e88c000e 	stm	ip, {r1, r2, r3}
   23bf4:	e59d3018 	ldr	r3, [sp, #24]
   23bf8:	e15e0003 	cmp	lr, r3
   23bfc:	0a000003 	beq	23c10 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
   23c00:	e3a00000 	mov	r0, #0
   23c04:	e8bd4070 	pop	{r4, r5, r6, lr}
   23c08:	e28dd010 	add	sp, sp, #16
   23c0c:	e12fff1e 	bx	lr
   23c10:	e5902020 	ldr	r2, [r0, #32]
   23c14:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   23c18:	e1520003 	cmp	r2, r3
   23c1c:	1afffff7 	bne	23c00 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
   23c20:	e1a04000 	mov	r4, r0
   23c24:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
   23c28:	e3500000 	cmp	r0, #0
   23c2c:	1a000023 	bne	23cc0 <CScreenDevice::SetStatus(TScreenStatus)+0xe0>
   23c30:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   23c34:	e3530000 	cmp	r3, #0
   23c38:	1afffff0 	bne	23c00 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
   23c3c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
   23c40:	e3530000 	cmp	r3, #0
   23c44:	1affffed 	bne	23c00 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
   23c48:	e1a0200e 	mov	r2, lr
   23c4c:	e59d1014 	ldr	r1, [sp, #20]
   23c50:	e5940018 	ldr	r0, [r4, #24]
   23c54:	ebfffd50 	bl	2319c <memcpy>
   23c58:	e59d201c 	ldr	r2, [sp, #28]
   23c5c:	e59d3020 	ldr	r3, [sp, #32]
   23c60:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
   23c64:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   23c68:	e3510000 	cmp	r1, #0
   23c6c:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   23c70:	e59de02c 	ldr	lr, [sp, #44]	; 0x2c
   23c74:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   23c78:	e1dd03b4 	ldrh	r0, [sp, #52]	; 0x34
   23c7c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   23c80:	e5842030 	str	r2, [r4, #48]	; 0x30
   23c84:	e5843034 	str	r3, [r4, #52]	; 0x34
   23c88:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
   23c8c:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   23c90:	e5846038 	str	r6, [r4, #56]	; 0x38
   23c94:	e584503c 	str	r5, [r4, #60]	; 0x3c
   23c98:	e584e040 	str	lr, [r4, #64]	; 0x40
   23c9c:	e584c044 	str	ip, [r4, #68]	; 0x44
   23ca0:	e1c404b8 	strh	r0, [r4, #72]	; 0x48
   23ca4:	e584104c 	str	r1, [r4, #76]	; 0x4c
   23ca8:	e5842050 	str	r2, [r4, #80]	; 0x50
   23cac:	e5843054 	str	r3, [r4, #84]	; 0x54
   23cb0:	1a00000f 	bne	23cf4 <CScreenDevice::SetStatus(TScreenStatus)+0x114>
   23cb4:	f57ff05f 	dmb	sy
   23cb8:	e3a00001 	mov	r0, #1
   23cbc:	eaffffd0 	b	23c04 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
   23cc0:	ebfff8b5 	bl	21f9c <EnterCritical>
   23cc4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   23cc8:	e3530000 	cmp	r3, #0
   23ccc:	1a000003 	bne	23ce0 <CScreenDevice::SetStatus(TScreenStatus)+0x100>
   23cd0:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
   23cd4:	e3530000 	cmp	r3, #0
   23cd8:	0594e01c 	ldreq	lr, [r4, #28]
   23cdc:	0affffd9 	beq	23c48 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
   23ce0:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   23ce4:	e3530000 	cmp	r3, #0
   23ce8:	0affffc4 	beq	23c00 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
   23cec:	ebfff8d8 	bl	22054 <LeaveCritical>
   23cf0:	eaffffc2 	b	23c00 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
   23cf4:	ebfff8d6 	bl	22054 <LeaveCritical>
   23cf8:	eaffffed 	b	23cb4 <CScreenDevice::SetStatus(TScreenStatus)+0xd4>

00023cfc <CScreenDevice::CarriageReturn()>:
   23cfc:	e3a03000 	mov	r3, #0
   23d00:	e580303c 	str	r3, [r0, #60]	; 0x3c
   23d04:	e12fff1e 	bx	lr

00023d08 <CScreenDevice::CursorHome()>:
   23d08:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   23d0c:	e3a02000 	mov	r2, #0
   23d10:	e580203c 	str	r2, [r0, #60]	; 0x3c
   23d14:	e5803040 	str	r3, [r0, #64]	; 0x40
   23d18:	e12fff1e 	bx	lr

00023d1c <CScreenDevice::CursorLeft()>:
   23d1c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   23d20:	e92d4070 	push	{r4, r5, r6, lr}
   23d24:	e3530000 	cmp	r3, #0
   23d28:	e1a04000 	mov	r4, r0
   23d2c:	1a00000f 	bne	23d70 <CScreenDevice::CursorLeft()+0x54>
   23d30:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   23d34:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   23d38:	e1520003 	cmp	r2, r3
   23d3c:	98bd8070 	popls	{r4, r5, r6, pc}
   23d40:	e2806014 	add	r6, r0, #20
   23d44:	e5905024 	ldr	r5, [r0, #36]	; 0x24
   23d48:	e1a00006 	mov	r0, r6
   23d4c:	eb0003ba 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   23d50:	e0455000 	sub	r5, r5, r0
   23d54:	e1a00006 	mov	r0, r6
   23d58:	e584503c 	str	r5, [r4, #60]	; 0x3c
   23d5c:	eb0003b8 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   23d60:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   23d64:	e0430000 	sub	r0, r3, r0
   23d68:	e5840040 	str	r0, [r4, #64]	; 0x40
   23d6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23d70:	e2800014 	add	r0, r0, #20
   23d74:	eb0003b0 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   23d78:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   23d7c:	e0430000 	sub	r0, r3, r0
   23d80:	e584003c 	str	r0, [r4, #60]	; 0x3c
   23d84:	e8bd8070 	pop	{r4, r5, r6, pc}

00023d88 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   23d88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23d8c:	e2806014 	add	r6, r0, #20
   23d90:	e1a05000 	mov	r5, r0
   23d94:	e1a04002 	mov	r4, r2
   23d98:	e1a00006 	mov	r0, r6
   23d9c:	e1a07001 	mov	r7, r1
   23da0:	eb0003a5 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   23da4:	e2444001 	sub	r4, r4, #1
   23da8:	e0040490 	mul	r4, r0, r4
   23dac:	e1a00006 	mov	r0, r6
   23db0:	eb0003a3 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   23db4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   23db8:	e1540003 	cmp	r4, r3
   23dbc:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   23dc0:	e2477001 	sub	r7, r7, #1
   23dc4:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   23dc8:	e0000790 	mul	r0, r0, r7
   23dcc:	e1500003 	cmp	r0, r3
   23dd0:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   23dd4:	e5953038 	ldr	r3, [r5, #56]	; 0x38
   23dd8:	e1500003 	cmp	r0, r3
   23ddc:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
   23de0:	35850040 	strcc	r0, [r5, #64]	; 0x40
   23de4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00023de8 <CScreenDevice::CursorUp()>:
   23de8:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   23dec:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   23df0:	e1520003 	cmp	r2, r3
   23df4:	912fff1e 	bxls	lr
   23df8:	e92d4010 	push	{r4, lr}
   23dfc:	e1a04000 	mov	r4, r0
   23e00:	e2800014 	add	r0, r0, #20
   23e04:	eb00038e 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   23e08:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   23e0c:	e0430000 	sub	r0, r3, r0
   23e10:	e5840040 	str	r0, [r4, #64]	; 0x40
   23e14:	e8bd8010 	pop	{r4, pc}

00023e18 <CScreenDevice::DeleteChars(unsigned int)>:
   23e18:	e12fff1e 	bx	lr

00023e1c <CScreenDevice::DeleteLines(unsigned int)>:
   23e1c:	e12fff1e 	bx	lr

00023e20 <CScreenDevice::InsertLines(unsigned int)>:
   23e20:	e12fff1e 	bx	lr

00023e24 <CScreenDevice::InsertMode(int)>:
   23e24:	e580104c 	str	r1, [r0, #76]	; 0x4c
   23e28:	e12fff1e 	bx	lr

00023e2c <CScreenDevice::ReverseScroll()>:
   23e2c:	e12fff1e 	bx	lr

00023e30 <CScreenDevice::SetCursorMode(int)>:
   23e30:	e5801044 	str	r1, [r0, #68]	; 0x44
   23e34:	e12fff1e 	bx	lr

00023e38 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   23e38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23e3c:	e2807014 	add	r7, r0, #20
   23e40:	e1a06000 	mov	r6, r0
   23e44:	e1a05002 	mov	r5, r2
   23e48:	e1a00007 	mov	r0, r7
   23e4c:	e1a04001 	mov	r4, r1
   23e50:	eb00037b 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   23e54:	e2444001 	sub	r4, r4, #1
   23e58:	e0040490 	mul	r4, r0, r4
   23e5c:	e1a00007 	mov	r0, r7
   23e60:	eb000377 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   23e64:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
   23e68:	e0000095 	mul	r0, r5, r0
   23e6c:	e3500000 	cmp	r0, #0
   23e70:	11540002 	cmpne	r4, r2
   23e74:	33a03001 	movcc	r3, #1
   23e78:	23a03000 	movcs	r3, #0
   23e7c:	e1500002 	cmp	r0, r2
   23e80:	83a03000 	movhi	r3, #0
   23e84:	92033001 	andls	r3, r3, #1
   23e88:	e1540000 	cmp	r4, r0
   23e8c:	23a03000 	movcs	r3, #0
   23e90:	32033001 	andcc	r3, r3, #1
   23e94:	e3530000 	cmp	r3, #0
   23e98:	e3a03000 	mov	r3, #0
   23e9c:	15864034 	strne	r4, [r6, #52]	; 0x34
   23ea0:	05964034 	ldreq	r4, [r6, #52]	; 0x34
   23ea4:	15860038 	strne	r0, [r6, #56]	; 0x38
   23ea8:	e586303c 	str	r3, [r6, #60]	; 0x3c
   23eac:	e5864040 	str	r4, [r6, #64]	; 0x40
   23eb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00023eb4 <CScreenDevice::SetStandoutMode(unsigned int)>:
   23eb4:	e351001b 	cmp	r1, #27
   23eb8:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   23ebc:	ea00001d 	b	23f38 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
   23ec0:	00023f48 	.word	0x00023f48
   23ec4:	00023f3c 	.word	0x00023f3c
   23ec8:	00023f30 	.word	0x00023f30
   23ecc:	00023f38 	.word	0x00023f38
   23ed0:	00023f38 	.word	0x00023f38
   23ed4:	00023f38 	.word	0x00023f38
   23ed8:	00023f38 	.word	0x00023f38
   23edc:	00023f38 	.word	0x00023f38
   23ee0:	00023f38 	.word	0x00023f38
   23ee4:	00023f38 	.word	0x00023f38
   23ee8:	00023f38 	.word	0x00023f38
   23eec:	00023f38 	.word	0x00023f38
   23ef0:	00023f38 	.word	0x00023f38
   23ef4:	00023f38 	.word	0x00023f38
   23ef8:	00023f38 	.word	0x00023f38
   23efc:	00023f38 	.word	0x00023f38
   23f00:	00023f38 	.word	0x00023f38
   23f04:	00023f38 	.word	0x00023f38
   23f08:	00023f38 	.word	0x00023f38
   23f0c:	00023f38 	.word	0x00023f38
   23f10:	00023f38 	.word	0x00023f38
   23f14:	00023f38 	.word	0x00023f38
   23f18:	00023f38 	.word	0x00023f38
   23f1c:	00023f38 	.word	0x00023f38
   23f20:	00023f38 	.word	0x00023f38
   23f24:	00023f38 	.word	0x00023f38
   23f28:	00023f38 	.word	0x00023f38
   23f2c:	00023f48 	.word	0x00023f48
   23f30:	e3a0301f 	mov	r3, #31
   23f34:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   23f38:	e12fff1e 	bx	lr
   23f3c:	e3a03b3e 	mov	r3, #63488	; 0xf800
   23f40:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   23f44:	e12fff1e 	bx	lr
   23f48:	e3e03020 	mvn	r3, #32
   23f4c:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   23f50:	e12fff1e 	bx	lr

00023f54 <CScreenDevice::Scroll()>:
   23f54:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23f58:	e1a07000 	mov	r7, r0
   23f5c:	e2800014 	add	r0, r0, #20
   23f60:	eb000337 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   23f64:	e5973034 	ldr	r3, [r7, #52]	; 0x34
   23f68:	e5975020 	ldr	r5, [r7, #32]
   23f6c:	e5974038 	ldr	r4, [r7, #56]	; 0x38
   23f70:	e5978018 	ldr	r8, [r7, #24]
   23f74:	e0444003 	sub	r4, r4, r3
   23f78:	e1a02085 	lsl	r2, r5, #1
   23f7c:	e0050395 	mul	r5, r5, r3
   23f80:	e0885085 	add	r5, r8, r5, lsl #1
   23f84:	e0444000 	sub	r4, r4, r0
   23f88:	e1a06000 	mov	r6, r0
   23f8c:	e0040492 	mul	r4, r2, r4
   23f90:	e3540000 	cmp	r4, #0
   23f94:	1a000007 	bne	23fb8 <CScreenDevice::Scroll()+0x64>
   23f98:	e0020692 	mul	r2, r2, r6
   23f9c:	e1b02122 	lsrs	r2, r2, #2
   23fa0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   23fa4:	e1a00005 	mov	r0, r5
   23fa8:	e1a02102 	lsl	r2, r2, #2
   23fac:	e3a01000 	mov	r1, #0
   23fb0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   23fb4:	eafffb60 	b	22d3c <memset>
   23fb8:	e0803003 	add	r3, r0, r3
   23fbc:	e3c4900f 	bic	r9, r4, #15
   23fc0:	e1a00005 	mov	r0, r5
   23fc4:	e0288392 	mla	r8, r2, r3, r8
   23fc8:	e1a02009 	mov	r2, r9
   23fcc:	e1a01008 	mov	r1, r8
   23fd0:	ebfffc71 	bl	2319c <memcpy>
   23fd4:	e204200e 	and	r2, r4, #14
   23fd8:	e0850009 	add	r0, r5, r9
   23fdc:	e0881009 	add	r1, r8, r9
   23fe0:	ebfffc6d 	bl	2319c <memcpy>
   23fe4:	e5972020 	ldr	r2, [r7, #32]
   23fe8:	e3c44003 	bic	r4, r4, #3
   23fec:	e0855004 	add	r5, r5, r4
   23ff0:	e1a02082 	lsl	r2, r2, #1
   23ff4:	eaffffe7 	b	23f98 <CScreenDevice::Scroll()+0x44>

00023ff8 <CScreenDevice::CursorDown()>:
   23ff8:	e92d4070 	push	{r4, r5, r6, lr}
   23ffc:	e2805014 	add	r5, r0, #20
   24000:	e1a04000 	mov	r4, r0
   24004:	e1a00005 	mov	r0, r5
   24008:	eb00030d 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   2400c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   24010:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   24014:	e0800003 	add	r0, r0, r3
   24018:	e5840040 	str	r0, [r4, #64]	; 0x40
   2401c:	e1500002 	cmp	r0, r2
   24020:	38bd8070 	popcc	{r4, r5, r6, pc}
   24024:	e1a00004 	mov	r0, r4
   24028:	ebffffc9 	bl	23f54 <CScreenDevice::Scroll()>
   2402c:	e1a00005 	mov	r0, r5
   24030:	eb000303 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   24034:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   24038:	e0430000 	sub	r0, r3, r0
   2403c:	e5840040 	str	r0, [r4, #64]	; 0x40
   24040:	e8bd8070 	pop	{r4, r5, r6, pc}

00024044 <CScreenDevice::NewLine()>:
   24044:	e3a02000 	mov	r2, #0
   24048:	e580203c 	str	r2, [r0, #60]	; 0x3c
   2404c:	eaffffe9 	b	23ff8 <CScreenDevice::CursorDown()>

00024050 <CScreenDevice::CursorRight()>:
   24050:	e92d4010 	push	{r4, lr}
   24054:	e1a04000 	mov	r4, r0
   24058:	e2800014 	add	r0, r0, #20
   2405c:	eb0002f6 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   24060:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   24064:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   24068:	e0800003 	add	r0, r0, r3
   2406c:	e584003c 	str	r0, [r4, #60]	; 0x3c
   24070:	e1500002 	cmp	r0, r2
   24074:	38bd8010 	popcc	{r4, pc}
   24078:	e3a03000 	mov	r3, #0
   2407c:	e1a00004 	mov	r0, r4
   24080:	e584303c 	str	r3, [r4, #60]	; 0x3c
   24084:	e8bd4010 	pop	{r4, lr}
   24088:	eaffffda 	b	23ff8 <CScreenDevice::CursorDown()>

0002408c <CScreenDevice::Tabulator()>:
   2408c:	e92d4070 	push	{r4, r5, r6, lr}
   24090:	e1a05000 	mov	r5, r0
   24094:	e2800014 	add	r0, r0, #20
   24098:	eb0002e7 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   2409c:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   240a0:	e1a04180 	lsl	r4, r0, #3
   240a4:	e0840003 	add	r0, r4, r3
   240a8:	e1a01004 	mov	r1, r4
   240ac:	ebfff704 	bl	21cc4 <__aeabi_uidiv>
   240b0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   240b4:	e0000094 	mul	r0, r4, r0
   240b8:	e1500003 	cmp	r0, r3
   240bc:	e585003c 	str	r0, [r5, #60]	; 0x3c
   240c0:	38bd8070 	popcc	{r4, r5, r6, pc}
   240c4:	e3a03000 	mov	r3, #0
   240c8:	e1a00005 	mov	r0, r5
   240cc:	e585303c 	str	r3, [r5, #60]	; 0x3c
   240d0:	e8bd4070 	pop	{r4, r5, r6, lr}
   240d4:	eaffffc7 	b	23ff8 <CScreenDevice::CursorDown()>

000240d8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   240d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   240dc:	e2806014 	add	r6, r0, #20
   240e0:	e24dd00c 	sub	sp, sp, #12
   240e4:	e1a07000 	mov	r7, r0
   240e8:	e1a00006 	mov	r0, r6
   240ec:	e1a0a001 	mov	sl, r1
   240f0:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
   240f4:	e1a09002 	mov	r9, r2
   240f8:	e58d3004 	str	r3, [sp, #4]
   240fc:	eb0002d0 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   24100:	e3a08000 	mov	r8, #0
   24104:	e1580000 	cmp	r8, r0
   24108:	2a000024 	bcs	241a0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
   2410c:	e59d3004 	ldr	r3, [sp, #4]
   24110:	e3a04000 	mov	r4, #0
   24114:	e0883003 	add	r3, r8, r3
   24118:	e58d3000 	str	r3, [sp]
   2411c:	e1a00006 	mov	r0, r6
   24120:	e0845009 	add	r5, r4, r9
   24124:	eb0002c4 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   24128:	e1a02004 	mov	r2, r4
   2412c:	e1a03008 	mov	r3, r8
   24130:	e1a0100a 	mov	r1, sl
   24134:	e1540000 	cmp	r4, r0
   24138:	e1a00006 	mov	r0, r6
   2413c:	e2844001 	add	r4, r4, #1
   24140:	2a000011 	bcs	2418c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>
   24144:	eb0002c2 	bl	24c54 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   24148:	e5973024 	ldr	r3, [r7, #36]	; 0x24
   2414c:	e3500000 	cmp	r0, #0
   24150:	11a0200b 	movne	r2, fp
   24154:	03a02000 	moveq	r2, #0
   24158:	e1550003 	cmp	r5, r3
   2415c:	2affffee 	bcs	2411c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
   24160:	e5973028 	ldr	r3, [r7, #40]	; 0x28
   24164:	e59d1000 	ldr	r1, [sp]
   24168:	e1510003 	cmp	r1, r3
   2416c:	2affffea 	bcs	2411c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
   24170:	e5973020 	ldr	r3, [r7, #32]
   24174:	e59d0000 	ldr	r0, [sp]
   24178:	e5971018 	ldr	r1, [r7, #24]
   2417c:	e0255093 	mla	r5, r3, r0, r5
   24180:	e1a05085 	lsl	r5, r5, #1
   24184:	e18120b5 	strh	r2, [r1, r5]
   24188:	eaffffe3 	b	2411c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
   2418c:	e1a00006 	mov	r0, r6
   24190:	e2888001 	add	r8, r8, #1
   24194:	eb0002aa 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   24198:	e1580000 	cmp	r8, r0
   2419c:	3affffda 	bcc	2410c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
   241a0:	e28dd00c 	add	sp, sp, #12
   241a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000241a8 <CScreenDevice::DisplayChar(char)>:
   241a8:	e6ef3071 	uxtb	r3, r1
   241ac:	e353001f 	cmp	r3, #31
   241b0:	912fff1e 	bxls	lr
   241b4:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
   241b8:	e92d4010 	push	{r4, lr}
   241bc:	e24dd008 	sub	sp, sp, #8
   241c0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   241c4:	e1a04000 	mov	r4, r0
   241c8:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   241cc:	e58dc000 	str	ip, [sp]
   241d0:	ebffffc0 	bl	240d8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   241d4:	e1a00004 	mov	r0, r4
   241d8:	e28dd008 	add	sp, sp, #8
   241dc:	e8bd4010 	pop	{r4, lr}
   241e0:	eaffff9a 	b	24050 <CScreenDevice::CursorRight()>

000241e4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   241e4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241e8:	e3a08000 	mov	r8, #0
   241ec:	e2805014 	add	r5, r0, #20
   241f0:	e1a0b000 	mov	fp, r0
   241f4:	e1a06001 	mov	r6, r1
   241f8:	e1a0a002 	mov	sl, r2
   241fc:	e1a09008 	mov	r9, r8
   24200:	e1a00005 	mov	r0, r5
   24204:	eb00028e 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   24208:	e1580000 	cmp	r8, r0
   2420c:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24210:	e088700a 	add	r7, r8, sl
   24214:	e3a04000 	mov	r4, #0
   24218:	e1a00005 	mov	r0, r5
   2421c:	eb000286 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   24220:	e0843006 	add	r3, r4, r6
   24224:	e1540000 	cmp	r4, r0
   24228:	e2844001 	add	r4, r4, #1
   2422c:	2a00000b 	bcs	24260 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
   24230:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
   24234:	e1530002 	cmp	r3, r2
   24238:	2afffff6 	bcs	24218 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   2423c:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
   24240:	e1570002 	cmp	r7, r2
   24244:	2afffff3 	bcs	24218 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   24248:	e59b2020 	ldr	r2, [fp, #32]
   2424c:	e59b1018 	ldr	r1, [fp, #24]
   24250:	e0233792 	mla	r3, r2, r7, r3
   24254:	e1a03083 	lsl	r3, r3, #1
   24258:	e18190b3 	strh	r9, [r1, r3]
   2425c:	eaffffed 	b	24218 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   24260:	e2888001 	add	r8, r8, #1
   24264:	eaffffe5 	b	24200 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

00024268 <CScreenDevice::ClearLineEnd()>:
   24268:	e92d4070 	push	{r4, r5, r6, lr}
   2426c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   24270:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   24274:	e1540003 	cmp	r4, r3
   24278:	28bd8070 	popcs	{r4, r5, r6, pc}
   2427c:	e2806014 	add	r6, r0, #20
   24280:	e1a05000 	mov	r5, r0
   24284:	e1a01004 	mov	r1, r4
   24288:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   2428c:	e1a00005 	mov	r0, r5
   24290:	ebffffd3 	bl	241e4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   24294:	e1a00006 	mov	r0, r6
   24298:	eb000267 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   2429c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   242a0:	e0844000 	add	r4, r4, r0
   242a4:	e1530004 	cmp	r3, r4
   242a8:	8afffff5 	bhi	24284 <CScreenDevice::ClearLineEnd()+0x1c>
   242ac:	e8bd8070 	pop	{r4, r5, r6, pc}

000242b0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
   242b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   242b4:	e2807014 	add	r7, r0, #20
   242b8:	e1a05000 	mov	r5, r0
   242bc:	e590803c 	ldr	r8, [r0, #60]	; 0x3c
   242c0:	e1a00007 	mov	r0, r7
   242c4:	e1a06001 	mov	r6, r1
   242c8:	eb00025b 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   242cc:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   242d0:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   242d4:	e0268096 	mla	r6, r6, r0, r8
   242d8:	e1560003 	cmp	r6, r3
   242dc:	21a06003 	movcs	r6, r3
   242e0:	e1540006 	cmp	r4, r6
   242e4:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   242e8:	e1a01004 	mov	r1, r4
   242ec:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   242f0:	e1a00005 	mov	r0, r5
   242f4:	ebffffba 	bl	241e4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   242f8:	e1a00007 	mov	r0, r7
   242fc:	eb00024e 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   24300:	e0844000 	add	r4, r4, r0
   24304:	e1540006 	cmp	r4, r6
   24308:	3afffff6 	bcc	242e8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
   2430c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00024310 <CScreenDevice::EraseChars(unsigned int)>:
   24310:	e3510000 	cmp	r1, #0
   24314:	012fff1e 	bxeq	lr
   24318:	eaffffe4 	b	242b0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0002431c <CScreenDevice::ClearDisplayEnd()>:
   2431c:	e92d4070 	push	{r4, r5, r6, lr}
   24320:	e1a05000 	mov	r5, r0
   24324:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   24328:	e2806014 	add	r6, r0, #20
   2432c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   24330:	e1540003 	cmp	r4, r3
   24334:	2a000009 	bcs	24360 <CScreenDevice::ClearDisplayEnd()+0x44>
   24338:	e1a01004 	mov	r1, r4
   2433c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   24340:	e1a00005 	mov	r0, r5
   24344:	ebffffa6 	bl	241e4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   24348:	e1a00006 	mov	r0, r6
   2434c:	eb00023a 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   24350:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   24354:	e0844000 	add	r4, r4, r0
   24358:	e1530004 	cmp	r3, r4
   2435c:	8afffff5 	bhi	24338 <CScreenDevice::ClearDisplayEnd()+0x1c>
   24360:	e1a00006 	mov	r0, r6
   24364:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   24368:	eb000235 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   2436c:	e2851018 	add	r1, r5, #24
   24370:	e891000e 	ldm	r1, {r1, r2, r3}
   24374:	e0840000 	add	r0, r4, r0
   24378:	e0000093 	mul	r0, r3, r0
   2437c:	e07020a2 	rsbs	r2, r0, r2, lsr #1
   24380:	0a000004 	beq	24398 <CScreenDevice::ClearDisplayEnd()+0x7c>
   24384:	e0810080 	add	r0, r1, r0, lsl #1
   24388:	e1a02082 	lsl	r2, r2, #1
   2438c:	e3a01000 	mov	r1, #0
   24390:	e8bd4070 	pop	{r4, r5, r6, lr}
   24394:	eafffa68 	b	22d3c <memset>
   24398:	e8bd8070 	pop	{r4, r5, r6, pc}

0002439c <CScreenDevice::Write(char)>:
   2439c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   243a0:	e92d4010 	push	{r4, lr}
   243a4:	e1a04000 	mov	r4, r0
   243a8:	e24dd008 	sub	sp, sp, #8
   243ac:	e3530007 	cmp	r3, #7
   243b0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   243b4:	ea000010 	b	243fc <CScreenDevice::Write(char)+0x60>
   243b8:	00024448 	.word	0x00024448
   243bc:	000244a8 	.word	0x000244a8
   243c0:	000244c4 	.word	0x000244c4
   243c4:	0002451c 	.word	0x0002451c
   243c8:	000245f8 	.word	0x000245f8
   243cc:	00024618 	.word	0x00024618
   243d0:	00024638 	.word	0x00024638
   243d4:	0002440c 	.word	0x0002440c
   243d8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   243dc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   243e0:	e1520003 	cmp	r2, r3
   243e4:	2a000004 	bcs	243fc <CScreenDevice::Write(char)+0x60>
   243e8:	e2800014 	add	r0, r0, #20
   243ec:	eb000214 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   243f0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   243f4:	e0433000 	sub	r3, r3, r0
   243f8:	e5843040 	str	r3, [r4, #64]	; 0x40
   243fc:	e3a03000 	mov	r3, #0
   24400:	e5843030 	str	r3, [r4, #48]	; 0x30
   24404:	e28dd008 	add	sp, sp, #8
   24408:	e8bd8010 	pop	{r4, pc}
   2440c:	e3510068 	cmp	r1, #104	; 0x68
   24410:	0a000097 	beq	24674 <CScreenDevice::Write(char)+0x2d8>
   24414:	e351006c 	cmp	r1, #108	; 0x6c
   24418:	0a000095 	beq	24674 <CScreenDevice::Write(char)+0x2d8>
   2441c:	e2411030 	sub	r1, r1, #48	; 0x30
   24420:	e6ef3071 	uxtb	r3, r1
   24424:	e3530009 	cmp	r3, #9
   24428:	8afffff3 	bhi	243fc <CScreenDevice::Write(char)+0x60>
   2442c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   24430:	e3a0200a 	mov	r2, #10
   24434:	e0211392 	mla	r1, r2, r3, r1
   24438:	e3510063 	cmp	r1, #99	; 0x63
   2443c:	e5841050 	str	r1, [r4, #80]	; 0x50
   24440:	8affffed 	bhi	243fc <CScreenDevice::Write(char)+0x60>
   24444:	eaffffee 	b	24404 <CScreenDevice::Write(char)+0x68>
   24448:	e2413008 	sub	r3, r1, #8
   2444c:	e3530013 	cmp	r3, #19
   24450:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   24454:	ea0000ec 	b	2480c <CScreenDevice::Write(char)+0x470>
   24458:	000246e0 	.word	0x000246e0
   2445c:	000246d4 	.word	0x000246d4
   24460:	000246c0 	.word	0x000246c0
   24464:	0002480c 	.word	0x0002480c
   24468:	0002480c 	.word	0x0002480c
   2446c:	000246b4 	.word	0x000246b4
   24470:	0002480c 	.word	0x0002480c
   24474:	0002480c 	.word	0x0002480c
   24478:	0002480c 	.word	0x0002480c
   2447c:	0002480c 	.word	0x0002480c
   24480:	0002480c 	.word	0x0002480c
   24484:	0002480c 	.word	0x0002480c
   24488:	0002480c 	.word	0x0002480c
   2448c:	0002480c 	.word	0x0002480c
   24490:	0002480c 	.word	0x0002480c
   24494:	0002480c 	.word	0x0002480c
   24498:	0002480c 	.word	0x0002480c
   2449c:	0002480c 	.word	0x0002480c
   244a0:	0002480c 	.word	0x0002480c
   244a4:	000246a8 	.word	0x000246a8
   244a8:	e351004d 	cmp	r1, #77	; 0x4d
   244ac:	0affffd2 	beq	243fc <CScreenDevice::Write(char)+0x60>
   244b0:	e351005b 	cmp	r1, #91	; 0x5b
   244b4:	03a03002 	moveq	r3, #2
   244b8:	05803030 	streq	r3, [r0, #48]	; 0x30
   244bc:	0affffd0 	beq	24404 <CScreenDevice::Write(char)+0x68>
   244c0:	eaffffcd 	b	243fc <CScreenDevice::Write(char)+0x60>
   244c4:	e241303f 	sub	r3, r1, #63	; 0x3f
   244c8:	e3530011 	cmp	r3, #17
   244cc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   244d0:	ea0000d9 	b	2483c <CScreenDevice::Write(char)+0x4a0>
   244d4:	000247c8 	.word	0x000247c8
   244d8:	0002483c 	.word	0x0002483c
   244dc:	000243d8 	.word	0x000243d8
   244e0:	000247fc 	.word	0x000247fc
   244e4:	000247ec 	.word	0x000247ec
   244e8:	0002483c 	.word	0x0002483c
   244ec:	0002483c 	.word	0x0002483c
   244f0:	0002483c 	.word	0x0002483c
   244f4:	0002483c 	.word	0x0002483c
   244f8:	000247d4 	.word	0x000247d4
   244fc:	0002483c 	.word	0x0002483c
   24500:	000247b8 	.word	0x000247b8
   24504:	000247a8 	.word	0x000247a8
   24508:	000243fc 	.word	0x000243fc
   2450c:	000243fc 	.word	0x000243fc
   24510:	0002483c 	.word	0x0002483c
   24514:	0002483c 	.word	0x0002483c
   24518:	000243fc 	.word	0x000243fc
   2451c:	e241303b 	sub	r3, r1, #59	; 0x3b
   24520:	e3530032 	cmp	r3, #50	; 0x32
   24524:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   24528:	eaffffbb 	b	2441c <CScreenDevice::Write(char)+0x80>
   2452c:	0002479c 	.word	0x0002479c
   24530:	0002441c 	.word	0x0002441c
   24534:	0002441c 	.word	0x0002441c
   24538:	0002441c 	.word	0x0002441c
   2453c:	0002441c 	.word	0x0002441c
   24540:	0002441c 	.word	0x0002441c
   24544:	0002441c 	.word	0x0002441c
   24548:	0002441c 	.word	0x0002441c
   2454c:	0002441c 	.word	0x0002441c
   24550:	0002441c 	.word	0x0002441c
   24554:	0002441c 	.word	0x0002441c
   24558:	0002441c 	.word	0x0002441c
   2455c:	0002441c 	.word	0x0002441c
   24560:	0002441c 	.word	0x0002441c
   24564:	0002441c 	.word	0x0002441c
   24568:	0002441c 	.word	0x0002441c
   2456c:	0002441c 	.word	0x0002441c
   24570:	000243fc 	.word	0x000243fc
   24574:	000243fc 	.word	0x000243fc
   24578:	0002441c 	.word	0x0002441c
   2457c:	0002441c 	.word	0x0002441c
   24580:	000243fc 	.word	0x000243fc
   24584:	0002441c 	.word	0x0002441c
   24588:	0002441c 	.word	0x0002441c
   2458c:	0002441c 	.word	0x0002441c
   24590:	0002441c 	.word	0x0002441c
   24594:	0002441c 	.word	0x0002441c
   24598:	0002441c 	.word	0x0002441c
   2459c:	0002441c 	.word	0x0002441c
   245a0:	000246ec 	.word	0x000246ec
   245a4:	0002441c 	.word	0x0002441c
   245a8:	0002441c 	.word	0x0002441c
   245ac:	0002441c 	.word	0x0002441c
   245b0:	0002441c 	.word	0x0002441c
   245b4:	0002441c 	.word	0x0002441c
   245b8:	0002441c 	.word	0x0002441c
   245bc:	0002441c 	.word	0x0002441c
   245c0:	0002441c 	.word	0x0002441c
   245c4:	0002441c 	.word	0x0002441c
   245c8:	0002441c 	.word	0x0002441c
   245cc:	0002441c 	.word	0x0002441c
   245d0:	0002441c 	.word	0x0002441c
   245d4:	0002441c 	.word	0x0002441c
   245d8:	0002441c 	.word	0x0002441c
   245dc:	0002441c 	.word	0x0002441c
   245e0:	00024700 	.word	0x00024700
   245e4:	0002441c 	.word	0x0002441c
   245e8:	0002441c 	.word	0x0002441c
   245ec:	0002441c 	.word	0x0002441c
   245f0:	00024700 	.word	0x00024700
   245f4:	0002471c 	.word	0x0002471c
   245f8:	e2411030 	sub	r1, r1, #48	; 0x30
   245fc:	e6ef3071 	uxtb	r3, r1
   24600:	e3530009 	cmp	r3, #9
   24604:	8affff7c 	bhi	243fc <CScreenDevice::Write(char)+0x60>
   24608:	e3a03007 	mov	r3, #7
   2460c:	e5801050 	str	r1, [r0, #80]	; 0x50
   24610:	e5803030 	str	r3, [r0, #48]	; 0x30
   24614:	eaffff7a 	b	24404 <CScreenDevice::Write(char)+0x68>
   24618:	e2411030 	sub	r1, r1, #48	; 0x30
   2461c:	e6ef3071 	uxtb	r3, r1
   24620:	e3530009 	cmp	r3, #9
   24624:	8affff74 	bhi	243fc <CScreenDevice::Write(char)+0x60>
   24628:	e3a03006 	mov	r3, #6
   2462c:	e5801054 	str	r1, [r0, #84]	; 0x54
   24630:	e5803030 	str	r3, [r0, #48]	; 0x30
   24634:	eaffff72 	b	24404 <CScreenDevice::Write(char)+0x68>
   24638:	e3510048 	cmp	r1, #72	; 0x48
   2463c:	0a00008f 	beq	24880 <CScreenDevice::Write(char)+0x4e4>
   24640:	e3510072 	cmp	r1, #114	; 0x72
   24644:	0a000011 	beq	24690 <CScreenDevice::Write(char)+0x2f4>
   24648:	e2411030 	sub	r1, r1, #48	; 0x30
   2464c:	e6ef3071 	uxtb	r3, r1
   24650:	e3530009 	cmp	r3, #9
   24654:	8affff68 	bhi	243fc <CScreenDevice::Write(char)+0x60>
   24658:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   2465c:	e3a0200a 	mov	r2, #10
   24660:	e0211392 	mla	r1, r2, r3, r1
   24664:	e35100c7 	cmp	r1, #199	; 0xc7
   24668:	e5801054 	str	r1, [r0, #84]	; 0x54
   2466c:	8affff62 	bhi	243fc <CScreenDevice::Write(char)+0x60>
   24670:	eaffff63 	b	24404 <CScreenDevice::Write(char)+0x68>
   24674:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   24678:	e3530019 	cmp	r3, #25
   2467c:	02411068 	subeq	r1, r1, #104	; 0x68
   24680:	016f1f11 	clzeq	r1, r1
   24684:	01a012a1 	lsreq	r1, r1, #5
   24688:	05841044 	streq	r1, [r4, #68]	; 0x44
   2468c:	eaffff5a 	b	243fc <CScreenDevice::Write(char)+0x60>
   24690:	e5902054 	ldr	r2, [r0, #84]	; 0x54
   24694:	e5901050 	ldr	r1, [r0, #80]	; 0x50
   24698:	ebfffde6 	bl	23e38 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   2469c:	e3a03000 	mov	r3, #0
   246a0:	e5843030 	str	r3, [r4, #48]	; 0x30
   246a4:	eaffff56 	b	24404 <CScreenDevice::Write(char)+0x68>
   246a8:	e3a03001 	mov	r3, #1
   246ac:	e5803030 	str	r3, [r0, #48]	; 0x30
   246b0:	eaffff53 	b	24404 <CScreenDevice::Write(char)+0x68>
   246b4:	e3a03000 	mov	r3, #0
   246b8:	e580303c 	str	r3, [r0, #60]	; 0x3c
   246bc:	eaffff50 	b	24404 <CScreenDevice::Write(char)+0x68>
   246c0:	e3a03000 	mov	r3, #0
   246c4:	e580303c 	str	r3, [r0, #60]	; 0x3c
   246c8:	e28dd008 	add	sp, sp, #8
   246cc:	e8bd4010 	pop	{r4, lr}
   246d0:	eafffe48 	b	23ff8 <CScreenDevice::CursorDown()>
   246d4:	e28dd008 	add	sp, sp, #8
   246d8:	e8bd4010 	pop	{r4, lr}
   246dc:	eafffe6a 	b	2408c <CScreenDevice::Tabulator()>
   246e0:	e28dd008 	add	sp, sp, #8
   246e4:	e8bd4010 	pop	{r4, lr}
   246e8:	eafffd8b 	b	23d1c <CScreenDevice::CursorLeft()>
   246ec:	e5901050 	ldr	r1, [r0, #80]	; 0x50
   246f0:	e3510000 	cmp	r1, #0
   246f4:	0affff40 	beq	243fc <CScreenDevice::Write(char)+0x60>
   246f8:	ebfffeec 	bl	242b0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
   246fc:	eaffff3e 	b	243fc <CScreenDevice::Write(char)+0x60>
   24700:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   24704:	e3530004 	cmp	r3, #4
   24708:	02411068 	subeq	r1, r1, #104	; 0x68
   2470c:	016f1f11 	clzeq	r1, r1
   24710:	01a012a1 	lsreq	r1, r1, #5
   24714:	0580104c 	streq	r1, [r0, #76]	; 0x4c
   24718:	eaffff37 	b	243fc <CScreenDevice::Write(char)+0x60>
   2471c:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   24720:	e353001b 	cmp	r3, #27
   24724:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   24728:	eaffff33 	b	243fc <CScreenDevice::Write(char)+0x60>
   2472c:	00024874 	.word	0x00024874
   24730:	00024868 	.word	0x00024868
   24734:	0002485c 	.word	0x0002485c
   24738:	000243fc 	.word	0x000243fc
   2473c:	000243fc 	.word	0x000243fc
   24740:	000243fc 	.word	0x000243fc
   24744:	000243fc 	.word	0x000243fc
   24748:	000243fc 	.word	0x000243fc
   2474c:	000243fc 	.word	0x000243fc
   24750:	000243fc 	.word	0x000243fc
   24754:	000243fc 	.word	0x000243fc
   24758:	000243fc 	.word	0x000243fc
   2475c:	000243fc 	.word	0x000243fc
   24760:	000243fc 	.word	0x000243fc
   24764:	000243fc 	.word	0x000243fc
   24768:	000243fc 	.word	0x000243fc
   2476c:	000243fc 	.word	0x000243fc
   24770:	000243fc 	.word	0x000243fc
   24774:	000243fc 	.word	0x000243fc
   24778:	000243fc 	.word	0x000243fc
   2477c:	000243fc 	.word	0x000243fc
   24780:	000243fc 	.word	0x000243fc
   24784:	000243fc 	.word	0x000243fc
   24788:	000243fc 	.word	0x000243fc
   2478c:	000243fc 	.word	0x000243fc
   24790:	000243fc 	.word	0x000243fc
   24794:	000243fc 	.word	0x000243fc
   24798:	00024874 	.word	0x00024874
   2479c:	e3a03005 	mov	r3, #5
   247a0:	e5803030 	str	r3, [r0, #48]	; 0x30
   247a4:	eaffff16 	b	24404 <CScreenDevice::Write(char)+0x68>
   247a8:	ebfffeae 	bl	24268 <CScreenDevice::ClearLineEnd()>
   247ac:	e3a03000 	mov	r3, #0
   247b0:	e5843030 	str	r3, [r4, #48]	; 0x30
   247b4:	eaffff12 	b	24404 <CScreenDevice::Write(char)+0x68>
   247b8:	ebfffed7 	bl	2431c <CScreenDevice::ClearDisplayEnd()>
   247bc:	e3a03000 	mov	r3, #0
   247c0:	e5843030 	str	r3, [r4, #48]	; 0x30
   247c4:	eaffff0e 	b	24404 <CScreenDevice::Write(char)+0x68>
   247c8:	e3a03004 	mov	r3, #4
   247cc:	e5803030 	str	r3, [r0, #48]	; 0x30
   247d0:	eaffff0b 	b	24404 <CScreenDevice::Write(char)+0x68>
   247d4:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   247d8:	e3a03000 	mov	r3, #0
   247dc:	e580303c 	str	r3, [r0, #60]	; 0x3c
   247e0:	e5803030 	str	r3, [r0, #48]	; 0x30
   247e4:	e5802040 	str	r2, [r0, #64]	; 0x40
   247e8:	eaffff05 	b	24404 <CScreenDevice::Write(char)+0x68>
   247ec:	ebfffe17 	bl	24050 <CScreenDevice::CursorRight()>
   247f0:	e3a03000 	mov	r3, #0
   247f4:	e5843030 	str	r3, [r4, #48]	; 0x30
   247f8:	eaffff01 	b	24404 <CScreenDevice::Write(char)+0x68>
   247fc:	ebfffdfd 	bl	23ff8 <CScreenDevice::CursorDown()>
   24800:	e3a03000 	mov	r3, #0
   24804:	e5843030 	str	r3, [r4, #48]	; 0x30
   24808:	eafffefd 	b	24404 <CScreenDevice::Write(char)+0x68>
   2480c:	e6ef3071 	uxtb	r3, r1
   24810:	e353001f 	cmp	r3, #31
   24814:	9afffefa 	bls	24404 <CScreenDevice::Write(char)+0x68>
   24818:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
   2481c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   24820:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   24824:	e58dc000 	str	ip, [sp]
   24828:	ebfffe2a 	bl	240d8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   2482c:	e1a00004 	mov	r0, r4
   24830:	e28dd008 	add	sp, sp, #8
   24834:	e8bd4010 	pop	{r4, lr}
   24838:	eafffe04 	b	24050 <CScreenDevice::CursorRight()>
   2483c:	e2411030 	sub	r1, r1, #48	; 0x30
   24840:	e6ef3071 	uxtb	r3, r1
   24844:	e3530009 	cmp	r3, #9
   24848:	8afffeeb 	bhi	243fc <CScreenDevice::Write(char)+0x60>
   2484c:	e3a03003 	mov	r3, #3
   24850:	e5801050 	str	r1, [r0, #80]	; 0x50
   24854:	e5803030 	str	r3, [r0, #48]	; 0x30
   24858:	eafffee9 	b	24404 <CScreenDevice::Write(char)+0x68>
   2485c:	e3a0301f 	mov	r3, #31
   24860:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   24864:	eafffee4 	b	243fc <CScreenDevice::Write(char)+0x60>
   24868:	e3a03b3e 	mov	r3, #63488	; 0xf800
   2486c:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   24870:	eafffee1 	b	243fc <CScreenDevice::Write(char)+0x60>
   24874:	e3e03020 	mvn	r3, #32
   24878:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
   2487c:	eafffede 	b	243fc <CScreenDevice::Write(char)+0x60>
   24880:	e5902054 	ldr	r2, [r0, #84]	; 0x54
   24884:	e5901050 	ldr	r1, [r0, #80]	; 0x50
   24888:	ebfffd3e 	bl	23d88 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   2488c:	e3a03000 	mov	r3, #0
   24890:	e5843030 	str	r3, [r4, #48]	; 0x30
   24894:	eafffeda 	b	24404 <CScreenDevice::Write(char)+0x68>

00024898 <CScreenDevice::Write(void const*, unsigned int)>:
   24898:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2489c:	e1a05000 	mov	r5, r0
   248a0:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
   248a4:	e1a06001 	mov	r6, r1
   248a8:	e1a08002 	mov	r8, r2
   248ac:	e3500000 	cmp	r0, #0
   248b0:	1a000026 	bne	24950 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
   248b4:	e5954044 	ldr	r4, [r5, #68]	; 0x44
   248b8:	e3a03001 	mov	r3, #1
   248bc:	e5853058 	str	r3, [r5, #88]	; 0x58
   248c0:	e3540000 	cmp	r4, #0
   248c4:	1a00001a 	bne	24934 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
   248c8:	e3580000 	cmp	r8, #0
   248cc:	e2487001 	sub	r7, r8, #1
   248d0:	0a00000b 	beq	24904 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
   248d4:	e1a04006 	mov	r4, r6
   248d8:	e0d410d1 	ldrsb	r1, [r4], #1
   248dc:	e1a00005 	mov	r0, r5
   248e0:	ebfffead 	bl	2439c <CScreenDevice::Write(char)>
   248e4:	e2643001 	rsb	r3, r4, #1
   248e8:	e0833007 	add	r3, r3, r7
   248ec:	e1760003 	cmn	r6, r3
   248f0:	1afffff8 	bne	248d8 <CScreenDevice::Write(void const*, unsigned int)+0x40>
   248f4:	e2874001 	add	r4, r7, #1
   248f8:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   248fc:	e3530000 	cmp	r3, #0
   24900:	1a000008 	bne	24928 <CScreenDevice::Write(void const*, unsigned int)+0x90>
   24904:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
   24908:	e3a02000 	mov	r2, #0
   2490c:	e5852058 	str	r2, [r5, #88]	; 0x58
   24910:	e1530002 	cmp	r3, r2
   24914:	0a000000 	beq	2491c <CScreenDevice::Write(void const*, unsigned int)+0x84>
   24918:	ebfff5cd 	bl	22054 <LeaveCritical>
   2491c:	f57ff05f 	dmb	sy
   24920:	e1a00004 	mov	r0, r4
   24924:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24928:	e1a00005 	mov	r0, r5
   2492c:	ebfffc34 	bl	23a04 <CScreenDevice::InvertCursor() [clone .part.6]>
   24930:	eafffff3 	b	24904 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
   24934:	e1a00005 	mov	r0, r5
   24938:	e2487001 	sub	r7, r8, #1
   2493c:	ebfffc30 	bl	23a04 <CScreenDevice::InvertCursor() [clone .part.6]>
   24940:	e3580000 	cmp	r8, #0
   24944:	1affffe2 	bne	248d4 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
   24948:	e1a04008 	mov	r4, r8
   2494c:	eaffffe9 	b	248f8 <CScreenDevice::Write(void const*, unsigned int)+0x60>
   24950:	ebfff591 	bl	21f9c <EnterCritical>
   24954:	eaffffd6 	b	248b4 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

00024958 <CScreenDevice::Initialize()>:
   24958:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2495c:	e1a04000 	mov	r4, r0
   24960:	e590500c 	ldr	r5, [r0, #12]
   24964:	e24dd00c 	sub	sp, sp, #12
   24968:	e3550000 	cmp	r5, #0
   2496c:	0a00002b 	beq	24a20 <CScreenDevice::Initialize()+0xc8>
   24970:	e5903004 	ldr	r3, [r0, #4]
   24974:	e5902008 	ldr	r2, [r0, #8]
   24978:	e5803024 	str	r3, [r0, #36]	; 0x24
   2497c:	e0000392 	mul	r0, r2, r3
   24980:	e5843020 	str	r3, [r4, #32]
   24984:	e5842028 	str	r2, [r4, #40]	; 0x28
   24988:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
   2498c:	e1a00080 	lsl	r0, r0, #1
   24990:	e584001c 	str	r0, [r4, #28]
   24994:	23e00000 	mvncs	r0, #0
   24998:	ebfff574 	bl	21f70 <operator new[](unsigned int)>
   2499c:	e5947028 	ldr	r7, [r4, #40]	; 0x28
   249a0:	e5840018 	str	r0, [r4, #24]
   249a4:	e2846014 	add	r6, r4, #20
   249a8:	e1a00006 	mov	r0, r6
   249ac:	eb0000a4 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   249b0:	e1a01000 	mov	r1, r0
   249b4:	e1a00007 	mov	r0, r7
   249b8:	ebfff4c1 	bl	21cc4 <__aeabi_uidiv>
   249bc:	e1a05000 	mov	r5, r0
   249c0:	e1a00006 	mov	r0, r6
   249c4:	eb00009e 	bl	24c44 <CCharGenerator::GetCharHeight() const>
   249c8:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   249cc:	e3a02000 	mov	r2, #0
   249d0:	e584203c 	str	r2, [r4, #60]	; 0x3c
   249d4:	e5843040 	str	r3, [r4, #64]	; 0x40
   249d8:	e0050590 	mul	r5, r0, r5
   249dc:	e1a00004 	mov	r0, r4
   249e0:	e584502c 	str	r5, [r4, #44]	; 0x2c
   249e4:	e5845038 	str	r5, [r4, #56]	; 0x38
   249e8:	ebfffe4b 	bl	2431c <CScreenDevice::ClearDisplayEnd()>
   249ec:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   249f0:	e3530000 	cmp	r3, #0
   249f4:	1a000031 	bne	24ac0 <CScreenDevice::Initialize()+0x168>
   249f8:	eb0001bf 	bl	250fc <CDeviceNameService::Get()>
   249fc:	e30f1d20 	movw	r1, #64800	; 0xfd20
   24a00:	e1a02004 	mov	r2, r4
   24a04:	e3a03000 	mov	r3, #0
   24a08:	e3401002 	movt	r1, #2
   24a0c:	e3a05001 	mov	r5, #1
   24a10:	eb000145 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   24a14:	e1a00005 	mov	r0, r5
   24a18:	e28dd00c 	add	sp, sp, #12
   24a1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24a20:	e3a00024 	mov	r0, #36	; 0x24
   24a24:	ebfff550 	bl	21f6c <operator new(unsigned int)>
   24a28:	e5942008 	ldr	r2, [r4, #8]
   24a2c:	e5941004 	ldr	r1, [r4, #4]
   24a30:	e3a03010 	mov	r3, #16
   24a34:	e58d5004 	str	r5, [sp, #4]
   24a38:	e58d5000 	str	r5, [sp]
   24a3c:	e1a06000 	mov	r6, r0
   24a40:	eb0014fc 	bl	29e38 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   24a44:	e5846010 	str	r6, [r4, #16]
   24a48:	e1a00006 	mov	r0, r6
   24a4c:	eb001563 	bl	29fe0 <CBcmFrameBuffer::Initialize()>
   24a50:	e3500000 	cmp	r0, #0
   24a54:	0affffee 	beq	24a14 <CScreenDevice::Initialize()+0xbc>
   24a58:	e5940010 	ldr	r0, [r4, #16]
   24a5c:	eb00159a 	bl	2a0cc <CBcmFrameBuffer::GetDepth() const>
   24a60:	e3500010 	cmp	r0, #16
   24a64:	1affffea 	bne	24a14 <CScreenDevice::Initialize()+0xbc>
   24a68:	e5940010 	ldr	r0, [r4, #16]
   24a6c:	eb001598 	bl	2a0d4 <CBcmFrameBuffer::GetBuffer() const>
   24a70:	e5840018 	str	r0, [r4, #24]
   24a74:	e5940010 	ldr	r0, [r4, #16]
   24a78:	eb001597 	bl	2a0dc <CBcmFrameBuffer::GetSize() const>
   24a7c:	e584001c 	str	r0, [r4, #28]
   24a80:	e5940010 	ldr	r0, [r4, #16]
   24a84:	eb00158e 	bl	2a0c4 <CBcmFrameBuffer::GetPitch() const>
   24a88:	e5840020 	str	r0, [r4, #32]
   24a8c:	e5940010 	ldr	r0, [r4, #16]
   24a90:	eb001583 	bl	2a0a4 <CBcmFrameBuffer::GetWidth() const>
   24a94:	e5840024 	str	r0, [r4, #36]	; 0x24
   24a98:	e5940010 	ldr	r0, [r4, #16]
   24a9c:	eb001582 	bl	2a0ac <CBcmFrameBuffer::GetHeight() const>
   24aa0:	e5943020 	ldr	r3, [r4, #32]
   24aa4:	e3130003 	tst	r3, #3
   24aa8:	01a030a3 	lsreq	r3, r3, #1
   24aac:	05843020 	streq	r3, [r4, #32]
   24ab0:	e1a07000 	mov	r7, r0
   24ab4:	e5840028 	str	r0, [r4, #40]	; 0x28
   24ab8:	0affffb9 	beq	249a4 <CScreenDevice::Initialize()+0x4c>
   24abc:	eaffffd4 	b	24a14 <CScreenDevice::Initialize()+0xbc>
   24ac0:	e1a00004 	mov	r0, r4
   24ac4:	ebfffbce 	bl	23a04 <CScreenDevice::InvertCursor() [clone .part.6]>
   24ac8:	eaffffca 	b	249f8 <CScreenDevice::Initialize()+0xa0>

00024acc <CScreenDevice::InvertCursor()>:
   24acc:	e5903044 	ldr	r3, [r0, #68]	; 0x44
   24ad0:	e3530000 	cmp	r3, #0
   24ad4:	012fff1e 	bxeq	lr
   24ad8:	eafffbc9 	b	23a04 <CScreenDevice::InvertCursor() [clone .part.6]>

00024adc <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   24adc:	e590c024 	ldr	ip, [r0, #36]	; 0x24
   24ae0:	e15c0001 	cmp	ip, r1
   24ae4:	912fff1e 	bxls	lr
   24ae8:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   24aec:	e15c0002 	cmp	ip, r2
   24af0:	8590c020 	ldrhi	ip, [r0, #32]
   24af4:	85900018 	ldrhi	r0, [r0, #24]
   24af8:	8022129c 	mlahi	r2, ip, r2, r1
   24afc:	81a02082 	lslhi	r2, r2, #1
   24b00:	818030b2 	strhhi	r3, [r0, r2]
   24b04:	e12fff1e 	bx	lr

00024b08 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   24b08:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   24b0c:	e1530001 	cmp	r3, r1
   24b10:	9a000008 	bls	24b38 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   24b14:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   24b18:	e1530002 	cmp	r3, r2
   24b1c:	9a000005 	bls	24b38 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   24b20:	e590c020 	ldr	ip, [r0, #32]
   24b24:	e5903018 	ldr	r3, [r0, #24]
   24b28:	e022129c 	mla	r2, ip, r2, r1
   24b2c:	e1a02082 	lsl	r2, r2, #1
   24b30:	e19300b2 	ldrh	r0, [r3, r2]
   24b34:	e12fff1e 	bx	lr
   24b38:	e3a00000 	mov	r0, #0
   24b3c:	e12fff1e 	bx	lr

00024b40 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   24b40:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   24b44:	e1a05000 	mov	r5, r0
   24b48:	e24dd00c 	sub	sp, sp, #12
   24b4c:	e2800014 	add	r0, r0, #20
   24b50:	e1a06002 	mov	r6, r2
   24b54:	e1a04001 	mov	r4, r1
   24b58:	e5957024 	ldr	r7, [r5, #36]	; 0x24
   24b5c:	eb000036 	bl	24c3c <CCharGenerator::GetCharWidth() const>
   24b60:	e2044003 	and	r4, r4, #3
   24b64:	e2061003 	and	r1, r6, #3
   24b68:	e30f3dc0 	movw	r3, #64960	; 0xfdc0
   24b6c:	e3403002 	movt	r3, #2
   24b70:	e0831001 	add	r1, r3, r1
   24b74:	e3a02b3e 	mov	r2, #63488	; 0xf800
   24b78:	e3a03000 	mov	r3, #0
   24b7c:	e58d2000 	str	r2, [sp]
   24b80:	e1d111dc 	ldrsb	r1, [r1, #28]
   24b84:	e0240094 	mla	r4, r4, r0, r0
   24b88:	e1a00005 	mov	r0, r5
   24b8c:	e0472004 	sub	r2, r7, r4
   24b90:	ebfffd50 	bl	240d8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   24b94:	e28dd00c 	add	sp, sp, #12
   24b98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00024b9c <assertion_failed>:
   24b9c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   24ba0:	e1a05000 	mov	r5, r0
   24ba4:	e24dd01c 	sub	sp, sp, #28
   24ba8:	e1a06001 	mov	r6, r1
   24bac:	e1a07002 	mov	r7, r2
   24bb0:	e1a0400d 	mov	r4, sp
   24bb4:	eb000a3e 	bl	274b4 <CInterruptSystem::DisableFIQ()>
   24bb8:	f1080040 	cpsie	f
   24bbc:	e28d0008 	add	r0, sp, #8
   24bc0:	eb000501 	bl	25fcc <CString::CString()>
   24bc4:	e1a03007 	mov	r3, r7
   24bc8:	e1a02006 	mov	r2, r6
   24bcc:	e28d0008 	add	r0, sp, #8
   24bd0:	e30f1de4 	movw	r1, #64996	; 0xfde4
   24bd4:	e3401002 	movt	r1, #2
   24bd8:	eb00085a 	bl	26d48 <CString::Format(char const*, ...)>
   24bdc:	e28d0008 	add	r0, sp, #8
   24be0:	eb000510 	bl	26028 <CString::operator char const*() const>
   24be4:	e1a01000 	mov	r1, r0
   24be8:	e1a00004 	mov	r0, r4
   24bec:	eb00007d 	bl	24de8 <debug_stacktrace(unsigned int const*, char const*)>
   24bf0:	eb00016e 	bl	251b0 <CLogger::Get()>
   24bf4:	e1a04000 	mov	r4, r0
   24bf8:	e28d0008 	add	r0, sp, #8
   24bfc:	eb000509 	bl	26028 <CString::operator char const*() const>
   24c00:	e3a02000 	mov	r2, #0
   24c04:	e58d5000 	str	r5, [sp]
   24c08:	e30f3dec 	movw	r3, #65004	; 0xfdec
   24c0c:	e3403002 	movt	r3, #2
   24c10:	e1a01000 	mov	r1, r0
   24c14:	e1a00004 	mov	r0, r4
   24c18:	eb000240 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24c1c:	e28d0008 	add	r0, sp, #8
   24c20:	eb0004b6 	bl	25f00 <CString::~CString()>
   24c24:	e28dd01c 	add	sp, sp, #28
   24c28:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00024c2c <CCharGenerator::CCharGenerator()>:
   24c2c:	e3a03008 	mov	r3, #8
   24c30:	e5803000 	str	r3, [r0]
   24c34:	e12fff1e 	bx	lr

00024c38 <CCharGenerator::~CCharGenerator()>:
   24c38:	e12fff1e 	bx	lr

00024c3c <CCharGenerator::GetCharWidth() const>:
   24c3c:	e5900000 	ldr	r0, [r0]
   24c40:	e12fff1e 	bx	lr

00024c44 <CCharGenerator::GetCharHeight() const>:
   24c44:	e3a00013 	mov	r0, #19
   24c48:	e12fff1e 	bx	lr

00024c4c <CCharGenerator::GetUnderline() const>:
   24c4c:	e3a00010 	mov	r0, #16
   24c50:	e12fff1e 	bx	lr

00024c54 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   24c54:	e6ef1071 	uxtb	r1, r1
   24c58:	e92d4070 	push	{r4, r5, r6, lr}
   24c5c:	e2414021 	sub	r4, r1, #33	; 0x21
   24c60:	e35400de 	cmp	r4, #222	; 0xde
   24c64:	8a00000f 	bhi	24ca8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
   24c68:	e1a06003 	mov	r6, r3
   24c6c:	e5903000 	ldr	r3, [r0]
   24c70:	e1a05002 	mov	r5, r2
   24c74:	e1530002 	cmp	r3, r2
   24c78:	9a00000c 	bls	24cb0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
   24c7c:	e356000f 	cmp	r6, #15
   24c80:	8a000008 	bhi	24ca8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
   24c84:	e30f1e04 	movw	r1, #65028	; 0xfe04
   24c88:	e3401002 	movt	r1, #2
   24c8c:	e0811204 	add	r1, r1, r4, lsl #4
   24c90:	e3a02080 	mov	r2, #128	; 0x80
   24c94:	e7d13006 	ldrb	r3, [r1, r6]
   24c98:	e0133552 	ands	r3, r3, r2, asr r5
   24c9c:	13a00001 	movne	r0, #1
   24ca0:	03a00000 	moveq	r0, #0
   24ca4:	e8bd8070 	pop	{r4, r5, r6, pc}
   24ca8:	e3a00000 	mov	r0, #0
   24cac:	e8bd8070 	pop	{r4, r5, r6, pc}
   24cb0:	e3001bf4 	movw	r1, #3060	; 0xbf4
   24cb4:	e3000c08 	movw	r0, #3080	; 0xc08
   24cb8:	e3401003 	movt	r1, #3
   24cbc:	e3400003 	movt	r0, #3
   24cc0:	e3a0204e 	mov	r2, #78	; 0x4e
   24cc4:	ebffffb4 	bl	24b9c <assertion_failed>
   24cc8:	e356000f 	cmp	r6, #15
   24ccc:	9affffec 	bls	24c84 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   24cd0:	eafffff4 	b	24ca8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

00024cd4 <debug_hexdump(void const*, unsigned int, char const*)>:
   24cd4:	e3520000 	cmp	r2, #0
   24cd8:	e3003c20 	movw	r3, #3104	; 0xc20
   24cdc:	e3403003 	movt	r3, #3
   24ce0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ce4:	11a03002 	movne	r3, r2
   24ce8:	e24dd054 	sub	sp, sp, #84	; 0x54
   24cec:	e1a06003 	mov	r6, r3
   24cf0:	e1a05001 	mov	r5, r1
   24cf4:	e1a04000 	mov	r4, r0
   24cf8:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   24cfc:	eb00012b 	bl	251b0 <CLogger::Get()>
   24d00:	e58d4004 	str	r4, [sp, #4]
   24d04:	e1a01006 	mov	r1, r6
   24d08:	e58d5000 	str	r5, [sp]
   24d0c:	e3003c28 	movw	r3, #3112	; 0xc28
   24d10:	e3a02004 	mov	r2, #4
   24d14:	e3403003 	movt	r3, #3
   24d18:	eb000200 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24d1c:	e3550000 	cmp	r5, #0
   24d20:	0a00002a 	beq	24dd0 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
   24d24:	e3009c4c 	movw	r9, #3148	; 0xc4c
   24d28:	e3409003 	movt	r9, #3
   24d2c:	eb00011f 	bl	251b0 <CLogger::Get()>
   24d30:	e5d4800f 	ldrb	r8, [r4, #15]
   24d34:	e5d4700e 	ldrb	r7, [r4, #14]
   24d38:	e6ffc074 	uxth	ip, r4
   24d3c:	e5d4600d 	ldrb	r6, [r4, #13]
   24d40:	e1a03009 	mov	r3, r9
   24d44:	e5d4e00c 	ldrb	lr, [r4, #12]
   24d48:	e3a02004 	mov	r2, #4
   24d4c:	e5d4b00b 	ldrb	fp, [r4, #11]
   24d50:	e2844010 	add	r4, r4, #16
   24d54:	e554a006 	ldrb	sl, [r4, #-6]
   24d58:	e58d8040 	str	r8, [sp, #64]	; 0x40
   24d5c:	e5548007 	ldrb	r8, [r4, #-7]
   24d60:	e58d703c 	str	r7, [sp, #60]	; 0x3c
   24d64:	e5547008 	ldrb	r7, [r4, #-8]
   24d68:	e58d6038 	str	r6, [sp, #56]	; 0x38
   24d6c:	e5546009 	ldrb	r6, [r4, #-9]
   24d70:	e58de034 	str	lr, [sp, #52]	; 0x34
   24d74:	e554e00a 	ldrb	lr, [r4, #-10]
   24d78:	e58db030 	str	fp, [sp, #48]	; 0x30
   24d7c:	e554b00b 	ldrb	fp, [r4, #-11]
   24d80:	e58da02c 	str	sl, [sp, #44]	; 0x2c
   24d84:	e554a00c 	ldrb	sl, [r4, #-12]
   24d88:	e58d8028 	str	r8, [sp, #40]	; 0x28
   24d8c:	e554800d 	ldrb	r8, [r4, #-13]
   24d90:	e58d7024 	str	r7, [sp, #36]	; 0x24
   24d94:	e554700e 	ldrb	r7, [r4, #-14]
   24d98:	e58d6020 	str	r6, [sp, #32]
   24d9c:	e554600f 	ldrb	r6, [r4, #-15]
   24da0:	e58de01c 	str	lr, [sp, #28]
   24da4:	e554e010 	ldrb	lr, [r4, #-16]
   24da8:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   24dac:	e58db018 	str	fp, [sp, #24]
   24db0:	e58da014 	str	sl, [sp, #20]
   24db4:	e58d8010 	str	r8, [sp, #16]
   24db8:	e58d700c 	str	r7, [sp, #12]
   24dbc:	e58d6008 	str	r6, [sp, #8]
   24dc0:	e88d5000 	stm	sp, {ip, lr}
   24dc4:	eb0001d5 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24dc8:	e355000f 	cmp	r5, #15
   24dcc:	8a000001 	bhi	24dd8 <debug_hexdump(void const*, unsigned int, char const*)+0x104>
   24dd0:	e28dd054 	add	sp, sp, #84	; 0x54
   24dd4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24dd8:	e2555010 	subs	r5, r5, #16
   24ddc:	1affffd2 	bne	24d2c <debug_hexdump(void const*, unsigned int, char const*)+0x58>
   24de0:	e28dd054 	add	sp, sp, #84	; 0x54
   24de4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024de8 <debug_stacktrace(unsigned int const*, char const*)>:
   24de8:	e3510000 	cmp	r1, #0
   24dec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24df0:	e3007c20 	movw	r7, #3104	; 0xc20
   24df4:	e30a6330 	movw	r6, #41776	; 0xa330
   24df8:	e3407003 	movt	r7, #3
   24dfc:	e3008ca4 	movw	r8, #3236	; 0xca4
   24e00:	e24dd008 	sub	sp, sp, #8
   24e04:	11a07001 	movne	r7, r1
   24e08:	e3406002 	movt	r6, #2
   24e0c:	e3408003 	movt	r8, #3
   24e10:	e1a05000 	mov	r5, r0
   24e14:	e3a04000 	mov	r4, #0
   24e18:	ea000003 	b	24e2c <debug_stacktrace(unsigned int const*, char const*)+0x44>
   24e1c:	e2844001 	add	r4, r4, #1
   24e20:	e2855004 	add	r5, r5, #4
   24e24:	e3540040 	cmp	r4, #64	; 0x40
   24e28:	0a000010 	beq	24e70 <debug_stacktrace(unsigned int const*, char const*)+0x88>
   24e2c:	e5953000 	ldr	r3, [r5]
   24e30:	e3530902 	cmp	r3, #32768	; 0x8000
   24e34:	3afffff8 	bcc	24e1c <debug_stacktrace(unsigned int const*, char const*)+0x34>
   24e38:	e1530006 	cmp	r3, r6
   24e3c:	2afffff6 	bcs	24e1c <debug_stacktrace(unsigned int const*, char const*)+0x34>
   24e40:	eb0000da 	bl	251b0 <CLogger::Get()>
   24e44:	e595c000 	ldr	ip, [r5]
   24e48:	e1a03008 	mov	r3, r8
   24e4c:	e58d4000 	str	r4, [sp]
   24e50:	e3a02004 	mov	r2, #4
   24e54:	e1a01007 	mov	r1, r7
   24e58:	e58dc004 	str	ip, [sp, #4]
   24e5c:	e2844001 	add	r4, r4, #1
   24e60:	eb0001ae 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24e64:	e3540040 	cmp	r4, #64	; 0x40
   24e68:	e2855004 	add	r5, r5, #4
   24e6c:	1affffee 	bne	24e2c <debug_stacktrace(unsigned int const*, char const*)+0x44>
   24e70:	e28dd008 	add	sp, sp, #8
   24e74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00024e78 <CDeviceNameService::CDeviceNameService()>:
   24e78:	e92d4070 	push	{r4, r5, r6, lr}
   24e7c:	e3025888 	movw	r5, #10376	; 0x2888
   24e80:	e3405143 	movt	r5, #323	; 0x143
   24e84:	e3a03000 	mov	r3, #0
   24e88:	e1a04000 	mov	r4, r0
   24e8c:	e5803004 	str	r3, [r0, #4]
   24e90:	e5952000 	ldr	r2, [r5]
   24e94:	e5803000 	str	r3, [r0]
   24e98:	e1520003 	cmp	r2, r3
   24e9c:	0a000005 	beq	24eb8 <CDeviceNameService::CDeviceNameService()+0x40>
   24ea0:	e3001cb8 	movw	r1, #3256	; 0xcb8
   24ea4:	e3000cd0 	movw	r0, #3280	; 0xcd0
   24ea8:	e3401003 	movt	r1, #3
   24eac:	e3400003 	movt	r0, #3
   24eb0:	e3a0201e 	mov	r2, #30
   24eb4:	ebffff38 	bl	24b9c <assertion_failed>
   24eb8:	e5854000 	str	r4, [r5]
   24ebc:	e1a00004 	mov	r0, r4
   24ec0:	e8bd8070 	pop	{r4, r5, r6, pc}

00024ec4 <CDeviceNameService::~CDeviceNameService()>:
   24ec4:	e5903000 	ldr	r3, [r0]
   24ec8:	e92d4070 	push	{r4, r5, r6, lr}
   24ecc:	e3530000 	cmp	r3, #0
   24ed0:	e1a05000 	mov	r5, r0
   24ed4:	0a00000e 	beq	24f14 <CDeviceNameService::~CDeviceNameService()+0x50>
   24ed8:	e3a06000 	mov	r6, #0
   24edc:	e5930004 	ldr	r0, [r3, #4]
   24ee0:	e5934000 	ldr	r4, [r3]
   24ee4:	e3500000 	cmp	r0, #0
   24ee8:	0a000000 	beq	24ef0 <CDeviceNameService::~CDeviceNameService()+0x2c>
   24eec:	ebfff421 	bl	21f78 <operator delete[](void*)>
   24ef0:	e5953000 	ldr	r3, [r5]
   24ef4:	e3a01010 	mov	r1, #16
   24ef8:	e5836004 	str	r6, [r3, #4]
   24efc:	e1a00003 	mov	r0, r3
   24f00:	e5836008 	str	r6, [r3, #8]
   24f04:	ebfff41c 	bl	21f7c <operator delete(void*, unsigned int)>
   24f08:	e2543000 	subs	r3, r4, #0
   24f0c:	e5854000 	str	r4, [r5]
   24f10:	1afffff1 	bne	24edc <CDeviceNameService::~CDeviceNameService()+0x18>
   24f14:	e3023888 	movw	r3, #10376	; 0x2888
   24f18:	e3403143 	movt	r3, #323	; 0x143
   24f1c:	e3a02000 	mov	r2, #0
   24f20:	e1a00005 	mov	r0, r5
   24f24:	e5832000 	str	r2, [r3]
   24f28:	e8bd8070 	pop	{r4, r5, r6, pc}

00024f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
   24f2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24f30:	e1a05000 	mov	r5, r0
   24f34:	e5900004 	ldr	r0, [r0, #4]
   24f38:	e1a06001 	mov	r6, r1
   24f3c:	e1a07002 	mov	r7, r2
   24f40:	e1a08003 	mov	r8, r3
   24f44:	e3500000 	cmp	r0, #0
   24f48:	1a000017 	bne	24fac <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x80>
   24f4c:	e3a00010 	mov	r0, #16
   24f50:	ebfff405 	bl	21f6c <operator new(unsigned int)>
   24f54:	e3560000 	cmp	r6, #0
   24f58:	e1a04000 	mov	r4, r0
   24f5c:	0a00001b 	beq	24fd0 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xa4>
   24f60:	e1a00006 	mov	r0, r6
   24f64:	ebfff794 	bl	22dbc <strlen>
   24f68:	e2800001 	add	r0, r0, #1
   24f6c:	ebfff3ff 	bl	21f70 <operator new[](unsigned int)>
   24f70:	e1a01006 	mov	r1, r6
   24f74:	e5840004 	str	r0, [r4, #4]
   24f78:	ebfff7b4 	bl	22e50 <strcpy>
   24f7c:	e3570000 	cmp	r7, #0
   24f80:	0a00000b 	beq	24fb4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x88>
   24f84:	e5952004 	ldr	r2, [r5, #4]
   24f88:	e5953000 	ldr	r3, [r5]
   24f8c:	e3520000 	cmp	r2, #0
   24f90:	e5847008 	str	r7, [r4, #8]
   24f94:	e584800c 	str	r8, [r4, #12]
   24f98:	e5843000 	str	r3, [r4]
   24f9c:	e5854000 	str	r4, [r5]
   24fa0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24fa4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24fa8:	eafff429 	b	22054 <LeaveCritical>
   24fac:	ebfff3fa 	bl	21f9c <EnterCritical>
   24fb0:	eaffffe5 	b	24f4c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
   24fb4:	e3001cb8 	movw	r1, #3256	; 0xcb8
   24fb8:	e3000cdc 	movw	r0, #3292	; 0xcdc
   24fbc:	e3401003 	movt	r1, #3
   24fc0:	e3400003 	movt	r0, #3
   24fc4:	e3a0203f 	mov	r2, #63	; 0x3f
   24fc8:	ebfffef3 	bl	24b9c <assertion_failed>
   24fcc:	eaffffec 	b	24f84 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
   24fd0:	e3001cb8 	movw	r1, #3256	; 0xcb8
   24fd4:	e30b00f0 	movw	r0, #45296	; 0xb0f0
   24fd8:	e3401003 	movt	r1, #3
   24fdc:	e3400002 	movt	r0, #2
   24fe0:	e3a0203a 	mov	r2, #58	; 0x3a
   24fe4:	ebfffeec 	bl	24b9c <assertion_failed>
   24fe8:	eaffffdc 	b	24f60 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

00024fec <CDeviceNameService::GetDevice(char const*, int)>:
   24fec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24ff0:	e2515000 	subs	r5, r1, #0
   24ff4:	e1a07000 	mov	r7, r0
   24ff8:	e1a06002 	mov	r6, r2
   24ffc:	0a000037 	beq	250e0 <CDeviceNameService::GetDevice(char const*, int)+0xf4>
   25000:	e5970004 	ldr	r0, [r7, #4]
   25004:	e3500000 	cmp	r0, #0
   25008:	1a00001a 	bne	25078 <CDeviceNameService::GetDevice(char const*, int)+0x8c>
   2500c:	e5974000 	ldr	r4, [r7]
   25010:	e3540000 	cmp	r4, #0
   25014:	0a00001f 	beq	25098 <CDeviceNameService::GetDevice(char const*, int)+0xac>
   25018:	e3009cb8 	movw	r9, #3256	; 0xcb8
   2501c:	e3008cec 	movw	r8, #3308	; 0xcec
   25020:	e3409003 	movt	r9, #3
   25024:	e3408003 	movt	r8, #3
   25028:	ea000009 	b	25054 <CDeviceNameService::GetDevice(char const*, int)+0x68>
   2502c:	e1a00005 	mov	r0, r5
   25030:	ebfff76b 	bl	22de4 <strcmp>
   25034:	e3500000 	cmp	r0, #0
   25038:	1a000002 	bne	25048 <CDeviceNameService::GetDevice(char const*, int)+0x5c>
   2503c:	e594300c 	ldr	r3, [r4, #12]
   25040:	e1530006 	cmp	r3, r6
   25044:	0a000016 	beq	250a4 <CDeviceNameService::GetDevice(char const*, int)+0xb8>
   25048:	e5944000 	ldr	r4, [r4]
   2504c:	e3540000 	cmp	r4, #0
   25050:	0a00000c 	beq	25088 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
   25054:	e5941004 	ldr	r1, [r4, #4]
   25058:	e3510000 	cmp	r1, #0
   2505c:	1afffff2 	bne	2502c <CDeviceNameService::GetDevice(char const*, int)+0x40>
   25060:	e1a01009 	mov	r1, r9
   25064:	e3a02053 	mov	r2, #83	; 0x53
   25068:	e1a00008 	mov	r0, r8
   2506c:	ebfffeca 	bl	24b9c <assertion_failed>
   25070:	e5941004 	ldr	r1, [r4, #4]
   25074:	eaffffec 	b	2502c <CDeviceNameService::GetDevice(char const*, int)+0x40>
   25078:	ebfff3c7 	bl	21f9c <EnterCritical>
   2507c:	e5974000 	ldr	r4, [r7]
   25080:	e3540000 	cmp	r4, #0
   25084:	1affffe3 	bne	25018 <CDeviceNameService::GetDevice(char const*, int)+0x2c>
   25088:	e5973004 	ldr	r3, [r7, #4]
   2508c:	e3530000 	cmp	r3, #0
   25090:	0a000000 	beq	25098 <CDeviceNameService::GetDevice(char const*, int)+0xac>
   25094:	ebfff3ee 	bl	22054 <LeaveCritical>
   25098:	e3a04000 	mov	r4, #0
   2509c:	e1a00004 	mov	r0, r4
   250a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   250a4:	e5973004 	ldr	r3, [r7, #4]
   250a8:	e5944008 	ldr	r4, [r4, #8]
   250ac:	e3530000 	cmp	r3, #0
   250b0:	1a000008 	bne	250d8 <CDeviceNameService::GetDevice(char const*, int)+0xec>
   250b4:	e3540000 	cmp	r4, #0
   250b8:	1afffff7 	bne	2509c <CDeviceNameService::GetDevice(char const*, int)+0xb0>
   250bc:	e3001cb8 	movw	r1, #3256	; 0xcb8
   250c0:	e3000d00 	movw	r0, #3328	; 0xd00
   250c4:	e3401003 	movt	r1, #3
   250c8:	e3400003 	movt	r0, #3
   250cc:	e3a0205b 	mov	r2, #91	; 0x5b
   250d0:	ebfffeb1 	bl	24b9c <assertion_failed>
   250d4:	eafffff0 	b	2509c <CDeviceNameService::GetDevice(char const*, int)+0xb0>
   250d8:	ebfff3dd 	bl	22054 <LeaveCritical>
   250dc:	eafffff4 	b	250b4 <CDeviceNameService::GetDevice(char const*, int)+0xc8>
   250e0:	e3001cb8 	movw	r1, #3256	; 0xcb8
   250e4:	e30b00f0 	movw	r0, #45296	; 0xb0f0
   250e8:	e3401003 	movt	r1, #3
   250ec:	e3400002 	movt	r0, #2
   250f0:	e3a0204c 	mov	r2, #76	; 0x4c
   250f4:	ebfffea8 	bl	24b9c <assertion_failed>
   250f8:	eaffffc0 	b	25000 <CDeviceNameService::GetDevice(char const*, int)+0x14>

000250fc <CDeviceNameService::Get()>:
   250fc:	e92d4010 	push	{r4, lr}
   25100:	e3024888 	movw	r4, #10376	; 0x2888
   25104:	e3404143 	movt	r4, #323	; 0x143
   25108:	e5940000 	ldr	r0, [r4]
   2510c:	e3500000 	cmp	r0, #0
   25110:	18bd8010 	popne	{r4, pc}
   25114:	e3a02069 	mov	r2, #105	; 0x69
   25118:	e3001cb8 	movw	r1, #3256	; 0xcb8
   2511c:	e3000d10 	movw	r0, #3344	; 0xd10
   25120:	e3401003 	movt	r1, #3
   25124:	e3400003 	movt	r0, #3
   25128:	ebfffe9b 	bl	24b9c <assertion_failed>
   2512c:	e5940000 	ldr	r0, [r4]
   25130:	e8bd8010 	pop	{r4, pc}

00025134 <CLogger::CLogger(unsigned int, CTimer*)>:
   25134:	e92d4010 	push	{r4, lr}
   25138:	e1a04000 	mov	r4, r0
   2513c:	e5801000 	str	r1, [r0]
   25140:	e3a03000 	mov	r3, #0
   25144:	e5802004 	str	r2, [r0, #4]
   25148:	e3a0c001 	mov	ip, #1
   2514c:	e5843008 	str	r3, [r4, #8]
   25150:	e3a00901 	mov	r0, #16384	; 0x4000
   25154:	e584300c 	str	r3, [r4, #12]
   25158:	e5843010 	str	r3, [r4, #16]
   2515c:	e5843014 	str	r3, [r4, #20]
   25160:	e584c018 	str	ip, [r4, #24]
   25164:	ebfff381 	bl	21f70 <operator new[](unsigned int)>
   25168:	e302388c 	movw	r3, #10380	; 0x288c
   2516c:	e3403143 	movt	r3, #323	; 0x143
   25170:	e5834000 	str	r4, [r3]
   25174:	e584000c 	str	r0, [r4, #12]
   25178:	e1a00004 	mov	r0, r4
   2517c:	e8bd8010 	pop	{r4, pc}

00025180 <CLogger::~CLogger()>:
   25180:	e92d4010 	push	{r4, lr}
   25184:	e1a04000 	mov	r4, r0
   25188:	e590000c 	ldr	r0, [r0, #12]
   2518c:	e3a02000 	mov	r2, #0
   25190:	e302388c 	movw	r3, #10380	; 0x288c
   25194:	e3403143 	movt	r3, #323	; 0x143
   25198:	e1500002 	cmp	r0, r2
   2519c:	e5832000 	str	r2, [r3]
   251a0:	0a000000 	beq	251a8 <CLogger::~CLogger()+0x28>
   251a4:	ebfff373 	bl	21f78 <operator delete[](void*)>
   251a8:	e1a00004 	mov	r0, r4
   251ac:	e8bd8010 	pop	{r4, pc}

000251b0 <CLogger::Get()>:
   251b0:	e302388c 	movw	r3, #10380	; 0x288c
   251b4:	e3403143 	movt	r3, #323	; 0x143
   251b8:	e5930000 	ldr	r0, [r3]
   251bc:	e12fff1e 	bx	lr

000251c0 <CLogger::Write(char const*)>:
   251c0:	e92d4070 	push	{r4, r5, r6, lr}
   251c4:	e1a04000 	mov	r4, r0
   251c8:	e1a00001 	mov	r0, r1
   251cc:	e1a05001 	mov	r5, r1
   251d0:	ebfff6f9 	bl	22dbc <strlen>
   251d4:	e1a01005 	mov	r1, r5
   251d8:	e1a06000 	mov	r6, r0
   251dc:	e5940008 	ldr	r0, [r4, #8]
   251e0:	e1a02006 	mov	r2, r6
   251e4:	e5903000 	ldr	r3, [r0]
   251e8:	e593300c 	ldr	r3, [r3, #12]
   251ec:	e12fff33 	blx	r3
   251f0:	e5940018 	ldr	r0, [r4, #24]
   251f4:	e3500000 	cmp	r0, #0
   251f8:	1a000017 	bne	2525c <CLogger::Write(char const*)+0x9c>
   251fc:	e0850006 	add	r0, r5, r6
   25200:	e1550000 	cmp	r5, r0
   25204:	0a00000f 	beq	25248 <CLogger::Write(char const*)+0x88>
   25208:	e0d530d1 	ldrsb	r3, [r5], #1
   2520c:	e353000d 	cmp	r3, #13
   25210:	0afffffa 	beq	25200 <CLogger::Write(char const*)+0x40>
   25214:	e5941010 	ldr	r1, [r4, #16]
   25218:	e594c00c 	ldr	ip, [r4, #12]
   2521c:	e7cc3001 	strb	r3, [ip, r1]
   25220:	e5943010 	ldr	r3, [r4, #16]
   25224:	e5941014 	ldr	r1, [r4, #20]
   25228:	e2833001 	add	r3, r3, #1
   2522c:	e7ed3053 	ubfx	r3, r3, #0, #14
   25230:	e5843010 	str	r3, [r4, #16]
   25234:	e1530001 	cmp	r3, r1
   25238:	1afffff0 	bne	25200 <CLogger::Write(char const*)+0x40>
   2523c:	e2433001 	sub	r3, r3, #1
   25240:	e7ed3053 	ubfx	r3, r3, #0, #14
   25244:	e5843010 	str	r3, [r4, #16]
   25248:	e5943018 	ldr	r3, [r4, #24]
   2524c:	e3530000 	cmp	r3, #0
   25250:	08bd8070 	popeq	{r4, r5, r6, pc}
   25254:	e8bd4070 	pop	{r4, r5, r6, lr}
   25258:	eafff37d 	b	22054 <LeaveCritical>
   2525c:	ebfff34e 	bl	21f9c <EnterCritical>
   25260:	eaffffe5 	b	251fc <CLogger::Write(char const*)+0x3c>

00025264 <CLogger::Read(void*, unsigned int)>:
   25264:	e92d4070 	push	{r4, r5, r6, lr}
   25268:	e1a04000 	mov	r4, r0
   2526c:	e5900018 	ldr	r0, [r0, #24]
   25270:	e1a05001 	mov	r5, r1
   25274:	e1a06002 	mov	r6, r2
   25278:	e3500000 	cmp	r0, #0
   2527c:	1a00001b 	bne	252f0 <CLogger::Read(void*, unsigned int)+0x8c>
   25280:	e5942010 	ldr	r2, [r4, #16]
   25284:	e5943014 	ldr	r3, [r4, #20]
   25288:	e1520003 	cmp	r2, r3
   2528c:	0a000020 	beq	25314 <CLogger::Read(void*, unsigned int)+0xb0>
   25290:	e1a01005 	mov	r1, r5
   25294:	e3a05000 	mov	r5, #0
   25298:	ea00000a 	b	252c8 <CLogger::Read(void*, unsigned int)+0x64>
   2529c:	e594000c 	ldr	r0, [r4, #12]
   252a0:	e2855001 	add	r5, r5, #1
   252a4:	e19030d3 	ldrsb	r3, [r0, r3]
   252a8:	e4c13001 	strb	r3, [r1], #1
   252ac:	e5943014 	ldr	r3, [r4, #20]
   252b0:	e5940010 	ldr	r0, [r4, #16]
   252b4:	e2833001 	add	r3, r3, #1
   252b8:	e7ed3053 	ubfx	r3, r3, #0, #14
   252bc:	e5843014 	str	r3, [r4, #20]
   252c0:	e1530000 	cmp	r3, r0
   252c4:	0a000001 	beq	252d0 <CLogger::Read(void*, unsigned int)+0x6c>
   252c8:	e1550006 	cmp	r5, r6
   252cc:	1afffff2 	bne	2529c <CLogger::Read(void*, unsigned int)+0x38>
   252d0:	e5943018 	ldr	r3, [r4, #24]
   252d4:	e3530000 	cmp	r3, #0
   252d8:	1a000001 	bne	252e4 <CLogger::Read(void*, unsigned int)+0x80>
   252dc:	e1a00005 	mov	r0, r5
   252e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   252e4:	ebfff35a 	bl	22054 <LeaveCritical>
   252e8:	e1a00005 	mov	r0, r5
   252ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   252f0:	ebfff329 	bl	21f9c <EnterCritical>
   252f4:	e5942010 	ldr	r2, [r4, #16]
   252f8:	e5943014 	ldr	r3, [r4, #20]
   252fc:	e1520003 	cmp	r2, r3
   25300:	1affffe2 	bne	25290 <CLogger::Read(void*, unsigned int)+0x2c>
   25304:	e5943018 	ldr	r3, [r4, #24]
   25308:	e3530000 	cmp	r3, #0
   2530c:	0a000000 	beq	25314 <CLogger::Read(void*, unsigned int)+0xb0>
   25310:	ebfff34f 	bl	22054 <LeaveCritical>
   25314:	e3e05000 	mvn	r5, #0
   25318:	e1a00005 	mov	r0, r5
   2531c:	e8bd8070 	pop	{r4, r5, r6, pc}

00025320 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   25320:	e590c000 	ldr	ip, [r0]
   25324:	e152000c 	cmp	r2, ip
   25328:	812fff1e 	bxhi	lr
   2532c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25330:	e24dd020 	sub	sp, sp, #32
   25334:	e1a04000 	mov	r4, r0
   25338:	e1a05002 	mov	r5, r2
   2533c:	e1a0000d 	mov	r0, sp
   25340:	e1a07003 	mov	r7, r3
   25344:	e1a06001 	mov	r6, r1
   25348:	eb00031f 	bl	25fcc <CString::CString()>
   2534c:	e3550000 	cmp	r5, #0
   25350:	0a000049 	beq	2547c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
   25354:	e5940004 	ldr	r0, [r4, #4]
   25358:	e3500000 	cmp	r0, #0
   2535c:	0a000032 	beq	2542c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
   25360:	ebfff425 	bl	223fc <CTimer::GetTimeString()>
   25364:	e2508000 	subs	r8, r0, #0
   25368:	0a00000b 	beq	2539c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
   2536c:	eb00032d 	bl	26028 <CString::operator char const*() const>
   25370:	e1a01000 	mov	r1, r0
   25374:	e1a0000d 	mov	r0, sp
   25378:	eb000345 	bl	26094 <CString::Append(char const*)>
   2537c:	e1a0000d 	mov	r0, sp
   25380:	e30a13c8 	movw	r1, #41928	; 0xa3c8
   25384:	e3401002 	movt	r1, #2
   25388:	eb000341 	bl	26094 <CString::Append(char const*)>
   2538c:	e5983000 	ldr	r3, [r8]
   25390:	e1a00008 	mov	r0, r8
   25394:	e5933004 	ldr	r3, [r3, #4]
   25398:	e12fff33 	blx	r3
   2539c:	e1a01006 	mov	r1, r6
   253a0:	e1a0000d 	mov	r0, sp
   253a4:	e28d6010 	add	r6, sp, #16
   253a8:	eb000339 	bl	26094 <CString::Append(char const*)>
   253ac:	e1a0000d 	mov	r0, sp
   253b0:	e3001d24 	movw	r1, #3364	; 0xd24
   253b4:	e3401003 	movt	r1, #3
   253b8:	eb000335 	bl	26094 <CString::Append(char const*)>
   253bc:	e1a00006 	mov	r0, r6
   253c0:	eb000301 	bl	25fcc <CString::CString()>
   253c4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   253c8:	e1a01007 	mov	r1, r7
   253cc:	e1a00006 	mov	r0, r6
   253d0:	eb000454 	bl	26528 <CString::FormatV(char const*, std::__va_list)>
   253d4:	e1a00006 	mov	r0, r6
   253d8:	eb000312 	bl	26028 <CString::operator char const*() const>
   253dc:	e1a01000 	mov	r1, r0
   253e0:	e1a0000d 	mov	r0, sp
   253e4:	eb00032a 	bl	26094 <CString::Append(char const*)>
   253e8:	e3550000 	cmp	r5, #0
   253ec:	0a00003c 	beq	254e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
   253f0:	e1a0000d 	mov	r0, sp
   253f4:	e30a17ac 	movw	r1, #42924	; 0xa7ac
   253f8:	e3401002 	movt	r1, #2
   253fc:	eb000324 	bl	26094 <CString::Append(char const*)>
   25400:	e1a0000d 	mov	r0, sp
   25404:	eb000307 	bl	26028 <CString::operator char const*() const>
   25408:	e1a01000 	mov	r1, r0
   2540c:	e1a00004 	mov	r0, r4
   25410:	ebffff6a 	bl	251c0 <CLogger::Write(char const*)>
   25414:	e1a00006 	mov	r0, r6
   25418:	eb0002b8 	bl	25f00 <CString::~CString()>
   2541c:	e1a0000d 	mov	r0, sp
   25420:	eb0002b6 	bl	25f00 <CString::~CString()>
   25424:	e28dd020 	add	sp, sp, #32
   25428:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2542c:	e1a01006 	mov	r1, r6
   25430:	e1a0000d 	mov	r0, sp
   25434:	e28d6010 	add	r6, sp, #16
   25438:	eb000315 	bl	26094 <CString::Append(char const*)>
   2543c:	e1a0000d 	mov	r0, sp
   25440:	e3001d24 	movw	r1, #3364	; 0xd24
   25444:	e3401003 	movt	r1, #3
   25448:	eb000311 	bl	26094 <CString::Append(char const*)>
   2544c:	e1a00006 	mov	r0, r6
   25450:	eb0002dd 	bl	25fcc <CString::CString()>
   25454:	e1a01007 	mov	r1, r7
   25458:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   2545c:	e1a00006 	mov	r0, r6
   25460:	eb000430 	bl	26528 <CString::FormatV(char const*, std::__va_list)>
   25464:	e1a00006 	mov	r0, r6
   25468:	eb0002ee 	bl	26028 <CString::operator char const*() const>
   2546c:	e1a01000 	mov	r1, r0
   25470:	e1a0000d 	mov	r0, sp
   25474:	eb000306 	bl	26094 <CString::Append(char const*)>
   25478:	eaffffdc 	b	253f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
   2547c:	e3001d1c 	movw	r1, #3356	; 0xd1c
   25480:	e1a0000d 	mov	r0, sp
   25484:	e3401003 	movt	r1, #3
   25488:	eb0002ec 	bl	26040 <CString::operator=(char const*)>
   2548c:	e5940004 	ldr	r0, [r4, #4]
   25490:	e3500000 	cmp	r0, #0
   25494:	1affffb1 	bne	25360 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
   25498:	e1a01006 	mov	r1, r6
   2549c:	e1a0000d 	mov	r0, sp
   254a0:	e28d6010 	add	r6, sp, #16
   254a4:	eb0002fa 	bl	26094 <CString::Append(char const*)>
   254a8:	e1a0000d 	mov	r0, sp
   254ac:	e3001d24 	movw	r1, #3364	; 0xd24
   254b0:	e3401003 	movt	r1, #3
   254b4:	eb0002f6 	bl	26094 <CString::Append(char const*)>
   254b8:	e1a00006 	mov	r0, r6
   254bc:	eb0002c2 	bl	25fcc <CString::CString()>
   254c0:	e1a01007 	mov	r1, r7
   254c4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   254c8:	e1a00006 	mov	r0, r6
   254cc:	eb000415 	bl	26528 <CString::FormatV(char const*, std::__va_list)>
   254d0:	e1a00006 	mov	r0, r6
   254d4:	eb0002d3 	bl	26028 <CString::operator char const*() const>
   254d8:	e1a01000 	mov	r1, r0
   254dc:	e1a0000d 	mov	r0, sp
   254e0:	eb0002eb 	bl	26094 <CString::Append(char const*)>
   254e4:	e1a0000d 	mov	r0, sp
   254e8:	e3001d28 	movw	r1, #3368	; 0xd28
   254ec:	e3401003 	movt	r1, #3
   254f0:	eb0002e7 	bl	26094 <CString::Append(char const*)>
   254f4:	e1a0000d 	mov	r0, sp
   254f8:	e30a17ac 	movw	r1, #42924	; 0xa7ac
   254fc:	e3401002 	movt	r1, #2
   25500:	eb0002e3 	bl	26094 <CString::Append(char const*)>
   25504:	e1a0000d 	mov	r0, sp
   25508:	eb0002c6 	bl	26028 <CString::operator char const*() const>
   2550c:	e1a01000 	mov	r1, r0
   25510:	e1a00004 	mov	r0, r4
   25514:	ebffff29 	bl	251c0 <CLogger::Write(char const*)>
   25518:	ebfff2ea 	bl	220c8 <halt>
   2551c:	eaffffbc 	b	25414 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

00025520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   25520:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   25524:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   25528:	e24dd010 	sub	sp, sp, #16
   2552c:	e28dc018 	add	ip, sp, #24
   25530:	e59d3014 	ldr	r3, [sp, #20]
   25534:	e58dc000 	str	ip, [sp]
   25538:	e58dc00c 	str	ip, [sp, #12]
   2553c:	ebffff77 	bl	25320 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   25540:	e28dd010 	add	sp, sp, #16
   25544:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   25548:	e28dd004 	add	sp, sp, #4
   2554c:	e12fff1e 	bx	lr

00025550 <CLogger::Initialize(CDevice*)>:
   25550:	e92d4010 	push	{r4, lr}
   25554:	e24dd008 	sub	sp, sp, #8
   25558:	e5801008 	str	r1, [r0, #8]
   2555c:	e1a04000 	mov	r4, r0
   25560:	eb000db4 	bl	28c38 <CMachineInfo::Get()>
   25564:	eb000d41 	bl	28a70 <CMachineInfo::GetMachineName() const>
   25568:	e3a02003 	mov	r2, #3
   2556c:	e3003d30 	movw	r3, #3376	; 0xd30
   25570:	e3001d48 	movw	r1, #3400	; 0xd48
   25574:	e3403003 	movt	r3, #3
   25578:	e3401003 	movt	r1, #3
   2557c:	e58d0000 	str	r0, [sp]
   25580:	e1a00004 	mov	r0, r4
   25584:	ebffffe5 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   25588:	e3a00001 	mov	r0, #1
   2558c:	e28dd008 	add	sp, sp, #8
   25590:	e8bd8010 	pop	{r4, pc}

00025594 <CSerialDevice::Read(void*, unsigned int)>:
   25594:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25598:	e2515000 	subs	r5, r1, #0
   2559c:	e1a04000 	mov	r4, r0
   255a0:	e1a07002 	mov	r7, r2
   255a4:	0a000055 	beq	25700 <CSerialDevice::Read(void*, unsigned int)+0x16c>
   255a8:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
   255ac:	e3530000 	cmp	r3, #0
   255b0:	0a000031 	beq	2567c <CSerialDevice::Read(void*, unsigned int)+0xe8>
   255b4:	e2846a01 	add	r6, r4, #4096	; 0x1000
   255b8:	e59600c8 	ldr	r0, [r6, #200]	; 0xc8
   255bc:	e3500000 	cmp	r0, #0
   255c0:	1a000020 	bne	25648 <CSerialDevice::Read(void*, unsigned int)+0xb4>
   255c4:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   255c8:	e3530000 	cmp	r3, #0
   255cc:	ba000021 	blt	25658 <CSerialDevice::Read(void*, unsigned int)+0xc4>
   255d0:	e3570000 	cmp	r7, #0
   255d4:	0a000016 	beq	25634 <CSerialDevice::Read(void*, unsigned int)+0xa0>
   255d8:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   255dc:	e59428b4 	ldr	r2, [r4, #2228]	; 0x8b4
   255e0:	e1520003 	cmp	r2, r3
   255e4:	0a000050 	beq	2572c <CSerialDevice::Read(void*, unsigned int)+0x198>
   255e8:	e0852007 	add	r2, r5, r7
   255ec:	e1a01005 	mov	r1, r5
   255f0:	ea000003 	b	25604 <CSerialDevice::Read(void*, unsigned int)+0x70>
   255f4:	e594c8b0 	ldr	ip, [r4, #2224]	; 0x8b0
   255f8:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   255fc:	e15c0003 	cmp	ip, r3
   25600:	0a00000b 	beq	25634 <CSerialDevice::Read(void*, unsigned int)+0xa0>
   25604:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   25608:	e0840003 	add	r0, r4, r3
   2560c:	e2833001 	add	r3, r3, #1
   25610:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   25614:	e5d030b0 	ldrb	r3, [r0, #176]	; 0xb0
   25618:	e4c13001 	strb	r3, [r1], #1
   2561c:	e1510002 	cmp	r1, r2
   25620:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   25624:	e0417005 	sub	r7, r1, r5
   25628:	e7ea3053 	ubfx	r3, r3, #0, #11
   2562c:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   25630:	1affffef 	bne	255f4 <CSerialDevice::Read(void*, unsigned int)+0x60>
   25634:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   25638:	e3530000 	cmp	r3, #0
   2563c:	1a00000b 	bne	25670 <CSerialDevice::Read(void*, unsigned int)+0xdc>
   25640:	e1a00007 	mov	r0, r7
   25644:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25648:	ebfff253 	bl	21f9c <EnterCritical>
   2564c:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   25650:	e3530000 	cmp	r3, #0
   25654:	aaffffdd 	bge	255d0 <CSerialDevice::Read(void*, unsigned int)+0x3c>
   25658:	e3a03000 	mov	r3, #0
   2565c:	e59478b8 	ldr	r7, [r4, #2232]	; 0x8b8
   25660:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
   25664:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   25668:	e3530000 	cmp	r3, #0
   2566c:	0afffff3 	beq	25640 <CSerialDevice::Read(void*, unsigned int)+0xac>
   25670:	ebfff277 	bl	22054 <LeaveCritical>
   25674:	e1a00007 	mov	r0, r7
   25678:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2567c:	e3570000 	cmp	r7, #0
   25680:	0affffee 	beq	25640 <CSerialDevice::Read(void*, unsigned int)+0xac>
   25684:	e3a0ca01 	mov	ip, #4096	; 0x1000
   25688:	e343cf20 	movt	ip, #16160	; 0x3f20
   2568c:	e59c2018 	ldr	r2, [ip, #24]
   25690:	e3120010 	tst	r2, #16
   25694:	1a000026 	bne	25734 <CSerialDevice::Read(void*, unsigned int)+0x1a0>
   25698:	e59c3000 	ldr	r3, [ip]
   2569c:	e3130b01 	tst	r3, #1024	; 0x400
   256a0:	1a000014 	bne	256f8 <CSerialDevice::Read(void*, unsigned int)+0x164>
   256a4:	e3130b02 	tst	r3, #2048	; 0x800
   256a8:	1a00001b 	bne	2571c <CSerialDevice::Read(void*, unsigned int)+0x188>
   256ac:	e3130c01 	tst	r3, #256	; 0x100
   256b0:	1a00001b 	bne	25724 <CSerialDevice::Read(void*, unsigned int)+0x190>
   256b4:	e0852007 	add	r2, r5, r7
   256b8:	e1a01005 	mov	r1, r5
   256bc:	ea000003 	b	256d0 <CSerialDevice::Read(void*, unsigned int)+0x13c>
   256c0:	e3130b02 	tst	r3, #2048	; 0x800
   256c4:	1a000014 	bne	2571c <CSerialDevice::Read(void*, unsigned int)+0x188>
   256c8:	e3130c01 	tst	r3, #256	; 0x100
   256cc:	1a000014 	bne	25724 <CSerialDevice::Read(void*, unsigned int)+0x190>
   256d0:	e4c13001 	strb	r3, [r1], #1
   256d4:	e1520001 	cmp	r2, r1
   256d8:	e0417005 	sub	r7, r1, r5
   256dc:	0affffd7 	beq	25640 <CSerialDevice::Read(void*, unsigned int)+0xac>
   256e0:	e59c3018 	ldr	r3, [ip, #24]
   256e4:	e3130010 	tst	r3, #16
   256e8:	1affffd4 	bne	25640 <CSerialDevice::Read(void*, unsigned int)+0xac>
   256ec:	e59c3000 	ldr	r3, [ip]
   256f0:	e3130b01 	tst	r3, #1024	; 0x400
   256f4:	0afffff1 	beq	256c0 <CSerialDevice::Read(void*, unsigned int)+0x12c>
   256f8:	e3e07000 	mvn	r7, #0
   256fc:	eaffffcf 	b	25640 <CSerialDevice::Read(void*, unsigned int)+0xac>
   25700:	e3001d6c 	movw	r1, #3436	; 0xd6c
   25704:	e3000d78 	movw	r0, #3448	; 0xd78
   25708:	e3401003 	movt	r1, #3
   2570c:	e3400003 	movt	r0, #3
   25710:	e3a02c01 	mov	r2, #256	; 0x100
   25714:	ebfffd20 	bl	24b9c <assertion_failed>
   25718:	eaffffa2 	b	255a8 <CSerialDevice::Read(void*, unsigned int)+0x14>
   2571c:	e3e07001 	mvn	r7, #1
   25720:	eaffffc6 	b	25640 <CSerialDevice::Read(void*, unsigned int)+0xac>
   25724:	e3e07002 	mvn	r7, #2
   25728:	eaffffc4 	b	25640 <CSerialDevice::Read(void*, unsigned int)+0xac>
   2572c:	e3a07000 	mov	r7, #0
   25730:	eaffffbf 	b	25634 <CSerialDevice::Read(void*, unsigned int)+0xa0>
   25734:	e1a07003 	mov	r7, r3
   25738:	eaffffc0 	b	25640 <CSerialDevice::Read(void*, unsigned int)+0xac>

0002573c <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>:
   2573c:	e92d4070 	push	{r4, r5, r6, lr}
   25740:	e1a04000 	mov	r4, r0
   25744:	e1a05002 	mov	r5, r2
   25748:	e1a06001 	mov	r6, r1
   2574c:	ebfff6b5 	bl	23228 <CDevice::CDevice()>
   25750:	e59fc09c 	ldr	ip, [pc, #156]	; 257f4 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)+0xb8>
   25754:	e1a00004 	mov	r0, r4
   25758:	e3a03000 	mov	r3, #0
   2575c:	e1a02003 	mov	r2, r3
   25760:	e3a01020 	mov	r1, #32
   25764:	e480c004 	str	ip, [r0], #4
   25768:	ebfff0c8 	bl	21a90 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   2576c:	e3a03000 	mov	r3, #0
   25770:	e1a02003 	mov	r2, r3
   25774:	e284002c 	add	r0, r4, #44	; 0x2c
   25778:	e3a01021 	mov	r1, #33	; 0x21
   2577c:	ebfff0c3 	bl	21a90 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   25780:	e2840054 	add	r0, r4, #84	; 0x54
   25784:	e3a03000 	mov	r3, #0
   25788:	e3a02004 	mov	r2, #4
   2578c:	e3a0100e 	mov	r1, #14
   25790:	ebfff0be 	bl	21a90 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   25794:	e284007c 	add	r0, r4, #124	; 0x7c
   25798:	e3a03000 	mov	r3, #0
   2579c:	e3a02004 	mov	r2, #4
   257a0:	e3a0100f 	mov	r1, #15
   257a4:	ebfff0b9 	bl	21a90 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   257a8:	e2842a01 	add	r2, r4, #4096	; 0x1000
   257ac:	e3550000 	cmp	r5, #0
   257b0:	e3a03000 	mov	r3, #0
   257b4:	e58460a4 	str	r6, [r4, #164]	; 0xa4
   257b8:	e3a01001 	mov	r1, #1
   257bc:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   257c0:	13a0c002 	movne	ip, #2
   257c4:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   257c8:	03a0c001 	moveq	ip, #1
   257cc:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   257d0:	e1a00004 	mov	r0, r4
   257d4:	e58430ac 	str	r3, [r4, #172]	; 0xac
   257d8:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
   257dc:	e58230bc 	str	r3, [r2, #188]	; 0xbc
   257e0:	e58210c4 	str	r1, [r2, #196]	; 0xc4
   257e4:	e58230c0 	str	r3, [r2, #192]	; 0xc0
   257e8:	e58210cc 	str	r1, [r2, #204]	; 0xcc
   257ec:	e582c0c8 	str	ip, [r2, #200]	; 0xc8
   257f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   257f4:	00030d58 	.word	0x00030d58

000257f8 <CSerialDevice::Initialize(unsigned int)>:
   257f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   257fc:	e1a07001 	mov	r7, r1
   25800:	e1a04000 	mov	r4, r0
   25804:	eb000d0b 	bl	28c38 <CMachineInfo::Get()>
   25808:	e3a01002 	mov	r1, #2
   2580c:	eb000cad 	bl	28ac8 <CMachineInfo::GetClockRate(unsigned int) const>
   25810:	e2508000 	subs	r8, r0, #0
   25814:	0a000066 	beq	259b4 <CSerialDevice::Initialize(unsigned int)+0x1bc>
   25818:	e30037d4 	movw	r3, #2004	; 0x7d4
   2581c:	e2472f4b 	sub	r2, r7, #300	; 0x12c
   25820:	e340303d 	movt	r3, #61	; 0x3d
   25824:	e1520003 	cmp	r2, r3
   25828:	8a00005a 	bhi	25998 <CSerialDevice::Initialize(unsigned int)+0x1a0>
   2582c:	e1a05207 	lsl	r5, r7, #4
   25830:	e1a00008 	mov	r0, r8
   25834:	e1a01005 	mov	r1, r5
   25838:	ebfff121 	bl	21cc4 <__aeabi_uidiv>
   2583c:	e30f3ffe 	movw	r3, #65534	; 0xfffe
   25840:	e2402001 	sub	r2, r0, #1
   25844:	e1a06000 	mov	r6, r0
   25848:	e1520003 	cmp	r2, r3
   2584c:	8a00004a 	bhi	2597c <CSerialDevice::Initialize(unsigned int)+0x184>
   25850:	e1a01005 	mov	r1, r5
   25854:	e1a00008 	mov	r0, r8
   25858:	ebfff11d 	bl	21cd4 <__aeabi_uidivmod>
   2585c:	e1a00181 	lsl	r0, r1, #3
   25860:	e1a01007 	mov	r1, r7
   25864:	ebfff116 	bl	21cc4 <__aeabi_uidiv>
   25868:	e2005001 	and	r5, r0, #1
   2586c:	e08550a0 	add	r5, r5, r0, lsr #1
   25870:	e355003f 	cmp	r5, #63	; 0x3f
   25874:	8a00002b 	bhi	25928 <CSerialDevice::Initialize(unsigned int)+0x130>
   25878:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   2587c:	e3500000 	cmp	r0, #0
   25880:	0a000031 	beq	2594c <CSerialDevice::Initialize(unsigned int)+0x154>
   25884:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   25888:	e3052df0 	movw	r2, #24048	; 0x5df0
   2588c:	e3a01039 	mov	r1, #57	; 0x39
   25890:	e3402002 	movt	r2, #2
   25894:	e3530000 	cmp	r3, #0
   25898:	e1a03004 	mov	r3, r4
   2589c:	0a00001f 	beq	25920 <CSerialDevice::Initialize(unsigned int)+0x128>
   258a0:	eb00063c 	bl	27198 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   258a4:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   258a8:	e3a03a01 	mov	r3, #4096	; 0x1000
   258ac:	e3433f20 	movt	r3, #16160	; 0x3f20
   258b0:	e3a02001 	mov	r2, #1
   258b4:	e3510000 	cmp	r1, #0
   258b8:	e58420ac 	str	r2, [r4, #172]	; 0xac
   258bc:	e3a01000 	mov	r1, #0
   258c0:	e30027ff 	movw	r2, #2047	; 0x7ff
   258c4:	e5831038 	str	r1, [r3, #56]	; 0x38
   258c8:	e5832044 	str	r2, [r3, #68]	; 0x44
   258cc:	e5836024 	str	r6, [r3, #36]	; 0x24
   258d0:	e5835028 	str	r5, [r3, #40]	; 0x28
   258d4:	0a000023 	beq	25968 <CSerialDevice::Initialize(unsigned int)+0x170>
   258d8:	e3a02009 	mov	r2, #9
   258dc:	e3a01070 	mov	r1, #112	; 0x70
   258e0:	e5832034 	str	r2, [r3, #52]	; 0x34
   258e4:	e3a02e45 	mov	r2, #1104	; 0x450
   258e8:	e583102c 	str	r1, [r3, #44]	; 0x2c
   258ec:	e5832038 	str	r2, [r3, #56]	; 0x38
   258f0:	e3a03a01 	mov	r3, #4096	; 0x1000
   258f4:	e3433f20 	movt	r3, #16160	; 0x3f20
   258f8:	e3002301 	movw	r2, #769	; 0x301
   258fc:	e5832030 	str	r2, [r3, #48]	; 0x30
   25900:	ebfffdfd 	bl	250fc <CDeviceNameService::Get()>
   25904:	e1a02004 	mov	r2, r4
   25908:	e3a03000 	mov	r3, #0
   2590c:	e3001df8 	movw	r1, #3576	; 0xdf8
   25910:	e3401003 	movt	r1, #3
   25914:	ebfffd84 	bl	24f2c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
   25918:	e3a00001 	mov	r0, #1
   2591c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25920:	eb00067b 	bl	27314 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   25924:	eaffffde 	b	258a4 <CSerialDevice::Initialize(unsigned int)+0xac>
   25928:	e3001d6c 	movw	r1, #3436	; 0xd6c
   2592c:	e3000de4 	movw	r0, #3556	; 0xde4
   25930:	e3401003 	movt	r1, #3
   25934:	e3400003 	movt	r0, #3
   25938:	e3a02091 	mov	r2, #145	; 0x91
   2593c:	ebfffc96 	bl	24b9c <assertion_failed>
   25940:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   25944:	e3500000 	cmp	r0, #0
   25948:	1affffcd 	bne	25884 <CSerialDevice::Initialize(unsigned int)+0x8c>
   2594c:	e3a03a01 	mov	r3, #4096	; 0x1000
   25950:	e3433f20 	movt	r3, #16160	; 0x3f20
   25954:	e30027ff 	movw	r2, #2047	; 0x7ff
   25958:	e5830038 	str	r0, [r3, #56]	; 0x38
   2595c:	e5832044 	str	r2, [r3, #68]	; 0x44
   25960:	e5836024 	str	r6, [r3, #36]	; 0x24
   25964:	e5835028 	str	r5, [r3, #40]	; 0x28
   25968:	e3a03a01 	mov	r3, #4096	; 0x1000
   2596c:	e3433f20 	movt	r3, #16160	; 0x3f20
   25970:	e3a02060 	mov	r2, #96	; 0x60
   25974:	e583202c 	str	r2, [r3, #44]	; 0x2c
   25978:	eaffffdc 	b	258f0 <CSerialDevice::Initialize(unsigned int)+0xf8>
   2597c:	e3001d6c 	movw	r1, #3436	; 0xd6c
   25980:	e3000dc0 	movw	r0, #3520	; 0xdc0
   25984:	e3401003 	movt	r1, #3
   25988:	e3400003 	movt	r0, #3
   2598c:	e3a0208e 	mov	r2, #142	; 0x8e
   25990:	ebfffc81 	bl	24b9c <assertion_failed>
   25994:	eaffffad 	b	25850 <CSerialDevice::Initialize(unsigned int)+0x58>
   25998:	e3001d6c 	movw	r1, #3436	; 0xd6c
   2599c:	e3000d94 	movw	r0, #3476	; 0xd94
   259a0:	e3401003 	movt	r1, #3
   259a4:	e3400003 	movt	r0, #3
   259a8:	e3a0208b 	mov	r2, #139	; 0x8b
   259ac:	ebfffc7a 	bl	24b9c <assertion_failed>
   259b0:	eaffff9d 	b	2582c <CSerialDevice::Initialize(unsigned int)+0x34>
   259b4:	e3001d6c 	movw	r1, #3436	; 0xd6c
   259b8:	e3000d84 	movw	r0, #3460	; 0xd84
   259bc:	e3401003 	movt	r1, #3
   259c0:	e3400003 	movt	r0, #3
   259c4:	e3a02089 	mov	r2, #137	; 0x89
   259c8:	ebfffc73 	bl	24b9c <assertion_failed>
   259cc:	eaffff91 	b	25818 <CSerialDevice::Initialize(unsigned int)+0x20>

000259d0 <CSerialDevice::GetOptions() const>:
   259d0:	e2800a01 	add	r0, r0, #4096	; 0x1000
   259d4:	e59000c4 	ldr	r0, [r0, #196]	; 0xc4
   259d8:	e12fff1e 	bx	lr

000259dc <CSerialDevice::SetOptions(unsigned int)>:
   259dc:	e2800a01 	add	r0, r0, #4096	; 0x1000
   259e0:	e58010c4 	str	r1, [r0, #196]	; 0xc4
   259e4:	e12fff1e 	bx	lr

000259e8 <CSerialDevice::Write(unsigned char)>:
   259e8:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   259ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   259f0:	e3530000 	cmp	r3, #0
   259f4:	03a02a01 	moveq	r2, #4096	; 0x1000
   259f8:	03432f20 	movteq	r2, #16160	; 0x3f20
   259fc:	0a000018 	beq	25a64 <CSerialDevice::Write(unsigned char)+0x7c>
   25a00:	e2805a01 	add	r5, r0, #4096	; 0x1000
   25a04:	e1a06001 	mov	r6, r1
   25a08:	e1a04000 	mov	r4, r0
   25a0c:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
   25a10:	e3520000 	cmp	r2, #0
   25a14:	1a00001c 	bne	25a8c <CSerialDevice::Write(unsigned char)+0xa4>
   25a18:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   25a1c:	e59510c0 	ldr	r1, [r5, #192]	; 0xc0
   25a20:	e2833001 	add	r3, r3, #1
   25a24:	e7ea3053 	ubfx	r3, r3, #0, #11
   25a28:	e1530001 	cmp	r3, r1
   25a2c:	0a000021 	beq	25ab8 <CSerialDevice::Write(unsigned char)+0xd0>
   25a30:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   25a34:	e3a07001 	mov	r7, #1
   25a38:	e0840003 	add	r0, r4, r3
   25a3c:	e0833007 	add	r3, r3, r7
   25a40:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   25a44:	e5c068bc 	strb	r6, [r0, #2236]	; 0x8bc
   25a48:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   25a4c:	e7ea3053 	ubfx	r3, r3, #0, #11
   25a50:	e58530bc 	str	r3, [r5, #188]	; 0xbc
   25a54:	e3520000 	cmp	r2, #0
   25a58:	1a000008 	bne	25a80 <CSerialDevice::Write(unsigned char)+0x98>
   25a5c:	e1a00007 	mov	r0, r7
   25a60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25a64:	e5923018 	ldr	r3, [r2, #24]
   25a68:	e3130020 	tst	r3, #32
   25a6c:	1afffffc 	bne	25a64 <CSerialDevice::Write(unsigned char)+0x7c>
   25a70:	e3a07001 	mov	r7, #1
   25a74:	e5821000 	str	r1, [r2]
   25a78:	e1a00007 	mov	r0, r7
   25a7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25a80:	ebfff173 	bl	22054 <LeaveCritical>
   25a84:	e1a00007 	mov	r0, r7
   25a88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25a8c:	e1a00002 	mov	r0, r2
   25a90:	ebfff141 	bl	21f9c <EnterCritical>
   25a94:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   25a98:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
   25a9c:	e2833001 	add	r3, r3, #1
   25aa0:	e7ea3053 	ubfx	r3, r3, #0, #11
   25aa4:	e1530002 	cmp	r3, r2
   25aa8:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
   25aac:	03a07000 	moveq	r7, #0
   25ab0:	1affffde 	bne	25a30 <CSerialDevice::Write(unsigned char)+0x48>
   25ab4:	eaffffe6 	b	25a54 <CSerialDevice::Write(unsigned char)+0x6c>
   25ab8:	e1a07002 	mov	r7, r2
   25abc:	e1a00007 	mov	r0, r7
   25ac0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00025ac4 <CSerialDevice::Write(void const*, unsigned int)>:
   25ac4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25ac8:	e2804a01 	add	r4, r0, #4096	; 0x1000
   25acc:	e1a07000 	mov	r7, r0
   25ad0:	e1a05001 	mov	r5, r1
   25ad4:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   25ad8:	e1a08002 	mov	r8, r2
   25adc:	e3500000 	cmp	r0, #0
   25ae0:	1a000052 	bne	25c30 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
   25ae4:	e3550000 	cmp	r5, #0
   25ae8:	0a000058 	beq	25c50 <CSerialDevice::Write(void const*, unsigned int)+0x18c>
   25aec:	e3580000 	cmp	r8, #0
   25af0:	0a00005d 	beq	25c6c <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
   25af4:	e3a06000 	mov	r6, #0
   25af8:	ea000002 	b	25b08 <CSerialDevice::Write(void const*, unsigned int)+0x44>
   25afc:	e2866001 	add	r6, r6, #1
   25b00:	e1560008 	cmp	r6, r8
   25b04:	0a00000f 	beq	25b48 <CSerialDevice::Write(void const*, unsigned int)+0x84>
   25b08:	e5d51000 	ldrb	r1, [r5]
   25b0c:	e1a00007 	mov	r0, r7
   25b10:	ebffffb4 	bl	259e8 <CSerialDevice::Write(unsigned char)>
   25b14:	e3500000 	cmp	r0, #0
   25b18:	0a00000a 	beq	25b48 <CSerialDevice::Write(void const*, unsigned int)+0x84>
   25b1c:	e4d53001 	ldrb	r3, [r5], #1
   25b20:	e353000a 	cmp	r3, #10
   25b24:	1afffff4 	bne	25afc <CSerialDevice::Write(void const*, unsigned int)+0x38>
   25b28:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
   25b2c:	e3130001 	tst	r3, #1
   25b30:	0afffff1 	beq	25afc <CSerialDevice::Write(void const*, unsigned int)+0x38>
   25b34:	e3a0100d 	mov	r1, #13
   25b38:	e1a00007 	mov	r0, r7
   25b3c:	ebffffa9 	bl	259e8 <CSerialDevice::Write(unsigned char)>
   25b40:	e3500000 	cmp	r0, #0
   25b44:	1affffec 	bne	25afc <CSerialDevice::Write(void const*, unsigned int)+0x38>
   25b48:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   25b4c:	e3530000 	cmp	r3, #0
   25b50:	1a000034 	bne	25c28 <CSerialDevice::Write(void const*, unsigned int)+0x164>
   25b54:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
   25b58:	e3530000 	cmp	r3, #0
   25b5c:	0a000023 	beq	25bf0 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   25b60:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
   25b64:	e3500000 	cmp	r0, #0
   25b68:	1a000032 	bne	25c38 <CSerialDevice::Write(void const*, unsigned int)+0x174>
   25b6c:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   25b70:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   25b74:	e1520003 	cmp	r2, r3
   25b78:	0a00001c 	beq	25bf0 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   25b7c:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
   25b80:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
   25b84:	e1520003 	cmp	r2, r3
   25b88:	0a000015 	beq	25be4 <CSerialDevice::Write(void const*, unsigned int)+0x120>
   25b8c:	e3a02a01 	mov	r2, #4096	; 0x1000
   25b90:	e3432f20 	movt	r2, #16160	; 0x3f20
   25b94:	e5923018 	ldr	r3, [r2, #24]
   25b98:	e3130020 	tst	r3, #32
   25b9c:	0a000003 	beq	25bb0 <CSerialDevice::Write(void const*, unsigned int)+0xec>
   25ba0:	ea000017 	b	25c04 <CSerialDevice::Write(void const*, unsigned int)+0x140>
   25ba4:	e5923018 	ldr	r3, [r2, #24]
   25ba8:	e3130020 	tst	r3, #32
   25bac:	1a000014 	bne	25c04 <CSerialDevice::Write(void const*, unsigned int)+0x140>
   25bb0:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   25bb4:	e0871003 	add	r1, r7, r3
   25bb8:	e2833001 	add	r3, r3, #1
   25bbc:	e58430c0 	str	r3, [r4, #192]	; 0xc0
   25bc0:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
   25bc4:	e5823000 	str	r3, [r2]
   25bc8:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   25bcc:	e7ea3053 	ubfx	r3, r3, #0, #11
   25bd0:	e58430c0 	str	r3, [r4, #192]	; 0xc0
   25bd4:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
   25bd8:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   25bdc:	e1510003 	cmp	r1, r3
   25be0:	1affffef 	bne	25ba4 <CSerialDevice::Write(void const*, unsigned int)+0xe0>
   25be4:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   25be8:	e3530000 	cmp	r3, #0
   25bec:	1a000001 	bne	25bf8 <CSerialDevice::Write(void const*, unsigned int)+0x134>
   25bf0:	e1a00006 	mov	r0, r6
   25bf4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25bf8:	ebfff115 	bl	22054 <LeaveCritical>
   25bfc:	e1a00006 	mov	r0, r6
   25c00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25c04:	e3a03a01 	mov	r3, #4096	; 0x1000
   25c08:	e3433f20 	movt	r3, #16160	; 0x3f20
   25c0c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   25c10:	e3822020 	orr	r2, r2, #32
   25c14:	e5832038 	str	r2, [r3, #56]	; 0x38
   25c18:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   25c1c:	e3530000 	cmp	r3, #0
   25c20:	0afffff2 	beq	25bf0 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   25c24:	eafffff3 	b	25bf8 <CSerialDevice::Write(void const*, unsigned int)+0x134>
   25c28:	ebfff109 	bl	22054 <LeaveCritical>
   25c2c:	eaffffc8 	b	25b54 <CSerialDevice::Write(void const*, unsigned int)+0x90>
   25c30:	ebfff0d9 	bl	21f9c <EnterCritical>
   25c34:	eaffffaa 	b	25ae4 <CSerialDevice::Write(void const*, unsigned int)+0x20>
   25c38:	ebfff0d7 	bl	21f9c <EnterCritical>
   25c3c:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   25c40:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   25c44:	e1520003 	cmp	r2, r3
   25c48:	1affffcb 	bne	25b7c <CSerialDevice::Write(void const*, unsigned int)+0xb8>
   25c4c:	eaffffe4 	b	25be4 <CSerialDevice::Write(void const*, unsigned int)+0x120>
   25c50:	e3001d6c 	movw	r1, #3436	; 0xd6c
   25c54:	e3000d78 	movw	r0, #3448	; 0xd78
   25c58:	e3401003 	movt	r1, #3
   25c5c:	e3400003 	movt	r0, #3
   25c60:	e3a020c2 	mov	r2, #194	; 0xc2
   25c64:	ebfffbcc 	bl	24b9c <assertion_failed>
   25c68:	eaffff9f 	b	25aec <CSerialDevice::Write(void const*, unsigned int)+0x28>
   25c6c:	e1a06008 	mov	r6, r8
   25c70:	eaffffb4 	b	25b48 <CSerialDevice::Write(void const*, unsigned int)+0x84>

00025c74 <CSerialDevice::InterruptHandler()>:
   25c74:	e92d4070 	push	{r4, r5, r6, lr}
   25c78:	e2805a01 	add	r5, r0, #4096	; 0x1000
   25c7c:	e1a04000 	mov	r4, r0
   25c80:	e59500c8 	ldr	r0, [r5, #200]	; 0xc8
   25c84:	e3500000 	cmp	r0, #0
   25c88:	1a000056 	bne	25de8 <CSerialDevice::InterruptHandler()+0x174>
   25c8c:	e3a03a01 	mov	r3, #4096	; 0x1000
   25c90:	e3433f20 	movt	r3, #16160	; 0x3f20
   25c94:	e3e0e002 	mvn	lr, #2
   25c98:	e3e00001 	mvn	r0, #1
   25c9c:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   25ca0:	e1a01003 	mov	r1, r3
   25ca4:	e3e0c000 	mvn	ip, #0
   25ca8:	e5832044 	str	r2, [r3, #68]	; 0x44
   25cac:	e5913018 	ldr	r3, [r1, #24]
   25cb0:	e3130010 	tst	r3, #16
   25cb4:	1a000016 	bne	25d14 <CSerialDevice::InterruptHandler()+0xa0>
   25cb8:	e5912000 	ldr	r2, [r1]
   25cbc:	e3120b01 	tst	r2, #1024	; 0x400
   25cc0:	0a000032 	beq	25d90 <CSerialDevice::InterruptHandler()+0x11c>
   25cc4:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   25cc8:	e3530000 	cmp	r3, #0
   25ccc:	0584c8b8 	streq	ip, [r4, #2232]	; 0x8b8
   25cd0:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   25cd4:	e59468b4 	ldr	r6, [r4, #2228]	; 0x8b4
   25cd8:	e2833001 	add	r3, r3, #1
   25cdc:	e7ea3053 	ubfx	r3, r3, #0, #11
   25ce0:	e1530006 	cmp	r3, r6
   25ce4:	0a00002f 	beq	25da8 <CSerialDevice::InterruptHandler()+0x134>
   25ce8:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   25cec:	e0846003 	add	r6, r4, r3
   25cf0:	e2833001 	add	r3, r3, #1
   25cf4:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   25cf8:	e5c620b0 	strb	r2, [r6, #176]	; 0xb0
   25cfc:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   25d00:	e7ea3053 	ubfx	r3, r3, #0, #11
   25d04:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   25d08:	e5913018 	ldr	r3, [r1, #24]
   25d0c:	e3130010 	tst	r3, #16
   25d10:	0affffe8 	beq	25cb8 <CSerialDevice::InterruptHandler()+0x44>
   25d14:	e5913018 	ldr	r3, [r1, #24]
   25d18:	e3130020 	tst	r3, #32
   25d1c:	1a000016 	bne	25d7c <CSerialDevice::InterruptHandler()+0x108>
   25d20:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   25d24:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
   25d28:	e1520003 	cmp	r2, r3
   25d2c:	13a02a01 	movne	r2, #4096	; 0x1000
   25d30:	13432f20 	movtne	r2, #16160	; 0x3f20
   25d34:	1a000004 	bne	25d4c <CSerialDevice::InterruptHandler()+0xd8>
   25d38:	ea000024 	b	25dd0 <CSerialDevice::InterruptHandler()+0x15c>
   25d3c:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
   25d40:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
   25d44:	e1510003 	cmp	r1, r3
   25d48:	0a000020 	beq	25dd0 <CSerialDevice::InterruptHandler()+0x15c>
   25d4c:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
   25d50:	e0841003 	add	r1, r4, r3
   25d54:	e2833001 	add	r3, r3, #1
   25d58:	e58530c0 	str	r3, [r5, #192]	; 0xc0
   25d5c:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
   25d60:	e5823000 	str	r3, [r2]
   25d64:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
   25d68:	e7ea3053 	ubfx	r3, r3, #0, #11
   25d6c:	e58530c0 	str	r3, [r5, #192]	; 0xc0
   25d70:	e5923018 	ldr	r3, [r2, #24]
   25d74:	e3130020 	tst	r3, #32
   25d78:	0affffef 	beq	25d3c <CSerialDevice::InterruptHandler()+0xc8>
   25d7c:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
   25d80:	e3530000 	cmp	r3, #0
   25d84:	08bd8070 	popeq	{r4, r5, r6, pc}
   25d88:	e8bd4070 	pop	{r4, r5, r6, lr}
   25d8c:	eafff0b0 	b	22054 <LeaveCritical>
   25d90:	e3120b02 	tst	r2, #2048	; 0x800
   25d94:	0a000007 	beq	25db8 <CSerialDevice::InterruptHandler()+0x144>
   25d98:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   25d9c:	e3530000 	cmp	r3, #0
   25da0:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
   25da4:	eaffffc9 	b	25cd0 <CSerialDevice::InterruptHandler()+0x5c>
   25da8:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   25dac:	e3530000 	cmp	r3, #0
   25db0:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
   25db4:	eaffffbc 	b	25cac <CSerialDevice::InterruptHandler()+0x38>
   25db8:	e3120c01 	tst	r2, #256	; 0x100
   25dbc:	0affffc3 	beq	25cd0 <CSerialDevice::InterruptHandler()+0x5c>
   25dc0:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   25dc4:	e3530000 	cmp	r3, #0
   25dc8:	0584e8b8 	streq	lr, [r4, #2232]	; 0x8b8
   25dcc:	eaffffbf 	b	25cd0 <CSerialDevice::InterruptHandler()+0x5c>
   25dd0:	e3a03a01 	mov	r3, #4096	; 0x1000
   25dd4:	e3433f20 	movt	r3, #16160	; 0x3f20
   25dd8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   25ddc:	e3c22020 	bic	r2, r2, #32
   25de0:	e5832038 	str	r2, [r3, #56]	; 0x38
   25de4:	eaffffe4 	b	25d7c <CSerialDevice::InterruptHandler()+0x108>
   25de8:	ebfff06b 	bl	21f9c <EnterCritical>
   25dec:	eaffffa6 	b	25c8c <CSerialDevice::InterruptHandler()+0x18>

00025df0 <CSerialDevice::InterruptStub(void*)>:
   25df0:	e92d4010 	push	{r4, lr}
   25df4:	e2504000 	subs	r4, r0, #0
   25df8:	0a000002 	beq	25e08 <CSerialDevice::InterruptStub(void*)+0x18>
   25dfc:	e1a00004 	mov	r0, r4
   25e00:	e8bd4010 	pop	{r4, lr}
   25e04:	eaffff9a 	b	25c74 <CSerialDevice::InterruptHandler()>
   25e08:	e3001d6c 	movw	r1, #3436	; 0xd6c
   25e0c:	e30a0938 	movw	r0, #43320	; 0xa938
   25e10:	e3401003 	movt	r1, #3
   25e14:	e3400002 	movt	r0, #2
   25e18:	e30021c1 	movw	r2, #449	; 0x1c1
   25e1c:	ebfffb5e 	bl	24b9c <assertion_failed>
   25e20:	e1a00004 	mov	r0, r4
   25e24:	e8bd4010 	pop	{r4, lr}
   25e28:	eaffff91 	b	25c74 <CSerialDevice::InterruptHandler()>

00025e2c <CSerialDevice::~CSerialDevice()>:
   25e2c:	e59f10a8 	ldr	r1, [pc, #168]	; 25edc <CSerialDevice::~CSerialDevice()+0xb0>
   25e30:	e3a03a01 	mov	r3, #4096	; 0x1000
   25e34:	e3433f20 	movt	r3, #16160	; 0x3f20
   25e38:	e3a02000 	mov	r2, #0
   25e3c:	e92d4010 	push	{r4, lr}
   25e40:	e1a04000 	mov	r4, r0
   25e44:	e5801000 	str	r1, [r0]
   25e48:	e5832038 	str	r2, [r3, #56]	; 0x38
   25e4c:	e5832030 	str	r2, [r3, #48]	; 0x30
   25e50:	e59030ac 	ldr	r3, [r0, #172]	; 0xac
   25e54:	e1530002 	cmp	r3, r2
   25e58:	0a000006 	beq	25e78 <CSerialDevice::~CSerialDevice()+0x4c>
   25e5c:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
   25e60:	e1500002 	cmp	r0, r2
   25e64:	0a000014 	beq	25ebc <CSerialDevice::~CSerialDevice()+0x90>
   25e68:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   25e6c:	e3530000 	cmp	r3, #0
   25e70:	0a00000e 	beq	25eb0 <CSerialDevice::~CSerialDevice()+0x84>
   25e74:	eb0004f6 	bl	27254 <CInterruptSystem::DisconnectFIQ()>
   25e78:	e3a03000 	mov	r3, #0
   25e7c:	e284007c 	add	r0, r4, #124	; 0x7c
   25e80:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   25e84:	ebffec64 	bl	2101c <CGPIOPin::~CGPIOPin()>
   25e88:	e2840054 	add	r0, r4, #84	; 0x54
   25e8c:	ebffec62 	bl	2101c <CGPIOPin::~CGPIOPin()>
   25e90:	e284002c 	add	r0, r4, #44	; 0x2c
   25e94:	ebffec60 	bl	2101c <CGPIOPin::~CGPIOPin()>
   25e98:	e2840004 	add	r0, r4, #4
   25e9c:	ebffec5e 	bl	2101c <CGPIOPin::~CGPIOPin()>
   25ea0:	e1a00004 	mov	r0, r4
   25ea4:	ebfff4d3 	bl	231f8 <CDevice::~CDevice()>
   25ea8:	e1a00004 	mov	r0, r4
   25eac:	e8bd8010 	pop	{r4, pc}
   25eb0:	e3a01039 	mov	r1, #57	; 0x39
   25eb4:	eb00054f 	bl	273f8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   25eb8:	eaffffee 	b	25e78 <CSerialDevice::~CSerialDevice()+0x4c>
   25ebc:	e3001d6c 	movw	r1, #3436	; 0xd6c
   25ec0:	e30a0970 	movw	r0, #43376	; 0xa970
   25ec4:	e3401003 	movt	r1, #3
   25ec8:	e3400002 	movt	r0, #2
   25ecc:	e3a02078 	mov	r2, #120	; 0x78
   25ed0:	ebfffb31 	bl	24b9c <assertion_failed>
   25ed4:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   25ed8:	eaffffe2 	b	25e68 <CSerialDevice::~CSerialDevice()+0x3c>
   25edc:	00030d58 	.word	0x00030d58

00025ee0 <CSerialDevice::~CSerialDevice()>:
   25ee0:	e92d4010 	push	{r4, lr}
   25ee4:	e1a04000 	mov	r4, r0
   25ee8:	ebffffcf 	bl	25e2c <CSerialDevice::~CSerialDevice()>
   25eec:	e1a00004 	mov	r0, r4
   25ef0:	e30110d0 	movw	r1, #4304	; 0x10d0
   25ef4:	ebfff020 	bl	21f7c <operator delete(void*, unsigned int)>
   25ef8:	e1a00004 	mov	r0, r4
   25efc:	e8bd8010 	pop	{r4, pc}

00025f00 <CString::~CString()>:
   25f00:	e92d4010 	push	{r4, lr}
   25f04:	e1a04000 	mov	r4, r0
   25f08:	e5900004 	ldr	r0, [r0, #4]
   25f0c:	e59f3014 	ldr	r3, [pc, #20]	; 25f28 <CString::~CString()+0x28>
   25f10:	e3500000 	cmp	r0, #0
   25f14:	e5843000 	str	r3, [r4]
   25f18:	0a000000 	beq	25f20 <CString::~CString()+0x20>
   25f1c:	ebfff015 	bl	21f78 <operator delete[](void*)>
   25f20:	e1a00004 	mov	r0, r4
   25f24:	e8bd8010 	pop	{r4, pc}
   25f28:	00030e08 	.word	0x00030e08

00025f2c <CString::~CString()>:
   25f2c:	e92d4010 	push	{r4, lr}
   25f30:	e1a04000 	mov	r4, r0
   25f34:	e5900004 	ldr	r0, [r0, #4]
   25f38:	e59f3020 	ldr	r3, [pc, #32]	; 25f60 <CString::~CString()+0x34>
   25f3c:	e3500000 	cmp	r0, #0
   25f40:	e5843000 	str	r3, [r4]
   25f44:	0a000000 	beq	25f4c <CString::~CString()+0x20>
   25f48:	ebfff00a 	bl	21f78 <operator delete[](void*)>
   25f4c:	e1a00004 	mov	r0, r4
   25f50:	e3a01010 	mov	r1, #16
   25f54:	ebfff008 	bl	21f7c <operator delete(void*, unsigned int)>
   25f58:	e1a00004 	mov	r0, r4
   25f5c:	e8bd8010 	pop	{r4, pc}
   25f60:	00030e08 	.word	0x00030e08

00025f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   25f64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25f68:	e990002c 	ldmib	r0, {r2, r3, r5}
   25f6c:	e0455002 	sub	r5, r5, r2
   25f70:	e0851001 	add	r1, r5, r1
   25f74:	e2812001 	add	r2, r1, #1
   25f78:	e1520003 	cmp	r2, r3
   25f7c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   25f80:	e2816041 	add	r6, r1, #65	; 0x41
   25f84:	e1a04000 	mov	r4, r0
   25f88:	e1a00006 	mov	r0, r6
   25f8c:	ebffeff7 	bl	21f70 <operator new[](unsigned int)>
   25f90:	e594300c 	ldr	r3, [r4, #12]
   25f94:	e3a02000 	mov	r2, #0
   25f98:	e5c32000 	strb	r2, [r3]
   25f9c:	e5941004 	ldr	r1, [r4, #4]
   25fa0:	e1a07000 	mov	r7, r0
   25fa4:	ebfff3a9 	bl	22e50 <strcpy>
   25fa8:	e5940004 	ldr	r0, [r4, #4]
   25fac:	e3500000 	cmp	r0, #0
   25fb0:	0a000000 	beq	25fb8 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   25fb4:	ebffefef 	bl	21f78 <operator delete[](void*)>
   25fb8:	e0875005 	add	r5, r7, r5
   25fbc:	e5847004 	str	r7, [r4, #4]
   25fc0:	e584500c 	str	r5, [r4, #12]
   25fc4:	e5846008 	str	r6, [r4, #8]
   25fc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00025fcc <CString::CString()>:
   25fcc:	e59f1010 	ldr	r1, [pc, #16]	; 25fe4 <CString::CString()+0x18>
   25fd0:	e3a02000 	mov	r2, #0
   25fd4:	e5802004 	str	r2, [r0, #4]
   25fd8:	e5802008 	str	r2, [r0, #8]
   25fdc:	e5801000 	str	r1, [r0]
   25fe0:	e12fff1e 	bx	lr
   25fe4:	00030e08 	.word	0x00030e08

00025fe8 <CString::CString(char const*)>:
   25fe8:	e59f3034 	ldr	r3, [pc, #52]	; 26024 <CString::CString(char const*)+0x3c>
   25fec:	e92d4070 	push	{r4, r5, r6, lr}
   25ff0:	e1a04000 	mov	r4, r0
   25ff4:	e5843000 	str	r3, [r4]
   25ff8:	e1a00001 	mov	r0, r1
   25ffc:	e1a05001 	mov	r5, r1
   26000:	ebfff36d 	bl	22dbc <strlen>
   26004:	e2800001 	add	r0, r0, #1
   26008:	e5840008 	str	r0, [r4, #8]
   2600c:	ebffefd7 	bl	21f70 <operator new[](unsigned int)>
   26010:	e1a01005 	mov	r1, r5
   26014:	e5840004 	str	r0, [r4, #4]
   26018:	ebfff38c 	bl	22e50 <strcpy>
   2601c:	e1a00004 	mov	r0, r4
   26020:	e8bd8070 	pop	{r4, r5, r6, pc}
   26024:	00030e08 	.word	0x00030e08

00026028 <CString::operator char const*() const>:
   26028:	e5900004 	ldr	r0, [r0, #4]
   2602c:	e30a37f0 	movw	r3, #42992	; 0xa7f0
   26030:	e3403002 	movt	r3, #2
   26034:	e3500000 	cmp	r0, #0
   26038:	01a00003 	moveq	r0, r3
   2603c:	e12fff1e 	bx	lr

00026040 <CString::operator=(char const*)>:
   26040:	e92d4070 	push	{r4, r5, r6, lr}
   26044:	e1a04000 	mov	r4, r0
   26048:	e5900004 	ldr	r0, [r0, #4]
   2604c:	e1a05001 	mov	r5, r1
   26050:	e3500000 	cmp	r0, #0
   26054:	0a000000 	beq	2605c <CString::operator=(char const*)+0x1c>
   26058:	ebffefc6 	bl	21f78 <operator delete[](void*)>
   2605c:	e1a00005 	mov	r0, r5
   26060:	ebfff355 	bl	22dbc <strlen>
   26064:	e2800001 	add	r0, r0, #1
   26068:	e5840008 	str	r0, [r4, #8]
   2606c:	ebffefbf 	bl	21f70 <operator new[](unsigned int)>
   26070:	e1a01005 	mov	r1, r5
   26074:	e5840004 	str	r0, [r4, #4]
   26078:	ebfff374 	bl	22e50 <strcpy>
   2607c:	e5940004 	ldr	r0, [r4, #4]
   26080:	e8bd8070 	pop	{r4, r5, r6, pc}

00026084 <CString::GetLength() const>:
   26084:	e5900004 	ldr	r0, [r0, #4]
   26088:	e3500000 	cmp	r0, #0
   2608c:	012fff1e 	bxeq	lr
   26090:	eafff349 	b	22dbc <strlen>

00026094 <CString::Append(char const*)>:
   26094:	e92d4070 	push	{r4, r5, r6, lr}
   26098:	e1a04000 	mov	r4, r0
   2609c:	e5900004 	ldr	r0, [r0, #4]
   260a0:	e3a03001 	mov	r3, #1
   260a4:	e1a06001 	mov	r6, r1
   260a8:	e5843008 	str	r3, [r4, #8]
   260ac:	e3500000 	cmp	r0, #0
   260b0:	0a000003 	beq	260c4 <CString::Append(char const*)+0x30>
   260b4:	ebfff340 	bl	22dbc <strlen>
   260b8:	e5943008 	ldr	r3, [r4, #8]
   260bc:	e0830000 	add	r0, r3, r0
   260c0:	e5840008 	str	r0, [r4, #8]
   260c4:	e1a00006 	mov	r0, r6
   260c8:	ebfff33b 	bl	22dbc <strlen>
   260cc:	e5943008 	ldr	r3, [r4, #8]
   260d0:	e0800003 	add	r0, r0, r3
   260d4:	e5840008 	str	r0, [r4, #8]
   260d8:	ebffefa4 	bl	21f70 <operator new[](unsigned int)>
   260dc:	e5941004 	ldr	r1, [r4, #4]
   260e0:	e3510000 	cmp	r1, #0
   260e4:	e1a05000 	mov	r5, r0
   260e8:	05c01000 	strbeq	r1, [r0]
   260ec:	0a000004 	beq	26104 <CString::Append(char const*)+0x70>
   260f0:	ebfff356 	bl	22e50 <strcpy>
   260f4:	e5940004 	ldr	r0, [r4, #4]
   260f8:	e3500000 	cmp	r0, #0
   260fc:	0a000000 	beq	26104 <CString::Append(char const*)+0x70>
   26100:	ebffef9c 	bl	21f78 <operator delete[](void*)>
   26104:	e1a01006 	mov	r1, r6
   26108:	e1a00005 	mov	r0, r5
   2610c:	ebfff36d 	bl	22ec8 <strcat>
   26110:	e5845004 	str	r5, [r4, #4]
   26114:	e8bd8070 	pop	{r4, r5, r6, pc}

00026118 <CString::Compare(char const*) const>:
   26118:	e5900004 	ldr	r0, [r0, #4]
   2611c:	eafff330 	b	22de4 <strcmp>

00026120 <CString::Find(char) const>:
   26120:	e5902004 	ldr	r2, [r0, #4]
   26124:	e1d230d0 	ldrsb	r3, [r2]
   26128:	e3530000 	cmp	r3, #0
   2612c:	0a000009 	beq	26158 <CString::Find(char) const+0x38>
   26130:	e1510003 	cmp	r1, r3
   26134:	e3a00000 	mov	r0, #0
   26138:	1a000002 	bne	26148 <CString::Find(char) const+0x28>
   2613c:	ea000007 	b	26160 <CString::Find(char) const+0x40>
   26140:	e1530001 	cmp	r3, r1
   26144:	012fff1e 	bxeq	lr
   26148:	e1f230d1 	ldrsb	r3, [r2, #1]!
   2614c:	e2800001 	add	r0, r0, #1
   26150:	e3530000 	cmp	r3, #0
   26154:	1afffff9 	bne	26140 <CString::Find(char) const+0x20>
   26158:	e3e00000 	mvn	r0, #0
   2615c:	e12fff1e 	bx	lr
   26160:	e12fff1e 	bx	lr

00026164 <CString::PutChar(char, unsigned int)>:
   26164:	e92d4070 	push	{r4, r5, r6, lr}
   26168:	e2524000 	subs	r4, r2, #0
   2616c:	08bd8070 	popeq	{r4, r5, r6, pc}
   26170:	e1a06001 	mov	r6, r1
   26174:	e1a01004 	mov	r1, r4
   26178:	e1a05000 	mov	r5, r0
   2617c:	ebffff78 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26180:	e2443001 	sub	r3, r4, #1
   26184:	e595200c 	ldr	r2, [r5, #12]
   26188:	e2433001 	sub	r3, r3, #1
   2618c:	e3730001 	cmn	r3, #1
   26190:	e2820001 	add	r0, r2, #1
   26194:	e585000c 	str	r0, [r5, #12]
   26198:	e5c26000 	strb	r6, [r2]
   2619c:	1afffff8 	bne	26184 <CString::PutChar(char, unsigned int)+0x20>
   261a0:	e8bd8070 	pop	{r4, r5, r6, pc}

000261a4 <CString::PutString(char const*)>:
   261a4:	e92d4070 	push	{r4, r5, r6, lr}
   261a8:	e1a04000 	mov	r4, r0
   261ac:	e1a00001 	mov	r0, r1
   261b0:	e1a05001 	mov	r5, r1
   261b4:	ebfff300 	bl	22dbc <strlen>
   261b8:	e2506000 	subs	r6, r0, #0
   261bc:	0a000002 	beq	261cc <CString::PutString(char const*)+0x28>
   261c0:	e1a01006 	mov	r1, r6
   261c4:	e1a00004 	mov	r0, r4
   261c8:	ebffff65 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   261cc:	e1a01005 	mov	r1, r5
   261d0:	e594000c 	ldr	r0, [r4, #12]
   261d4:	ebfff31d 	bl	22e50 <strcpy>
   261d8:	e594100c 	ldr	r1, [r4, #12]
   261dc:	e0811006 	add	r1, r1, r6
   261e0:	e584100c 	str	r1, [r4, #12]
   261e4:	e8bd8070 	pop	{r4, r5, r6, pc}

000261e8 <CString::ReserveSpace(unsigned int)>:
   261e8:	e3510000 	cmp	r1, #0
   261ec:	012fff1e 	bxeq	lr
   261f0:	eaffff5b 	b	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>

000261f4 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
   261f4:	e1510002 	cmp	r1, r2
   261f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   261fc:	e1a06001 	mov	r6, r1
   26200:	e1a08002 	mov	r8, r2
   26204:	e1a0a000 	mov	sl, r0
   26208:	e1a07003 	mov	r7, r3
   2620c:	23a05001 	movcs	r5, #1
   26210:	3a000022 	bcc	262a0 <CString::ntoa(char*, unsigned long, unsigned int, int)+0xac>
   26214:	e0050598 	mul	r5, r8, r5
   26218:	e1a00006 	mov	r0, r6
   2621c:	e1a01005 	mov	r1, r5
   26220:	ebffeea7 	bl	21cc4 <__aeabi_uidiv>
   26224:	e1500008 	cmp	r0, r8
   26228:	e1a04000 	mov	r4, r0
   2622c:	2afffff8 	bcs	26214 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x20>
   26230:	e3570000 	cmp	r7, #0
   26234:	e1a0700a 	mov	r7, sl
   26238:	13a09037 	movne	r9, #55	; 0x37
   2623c:	03a09057 	moveq	r9, #87	; 0x57
   26240:	ea000001 	b	2624c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x58>
   26244:	ebffee9e 	bl	21cc4 <__aeabi_uidiv>
   26248:	e1a04000 	mov	r4, r0
   2624c:	e1a00006 	mov	r0, r6
   26250:	e1a01005 	mov	r1, r5
   26254:	ebffee9e 	bl	21cd4 <__aeabi_uidivmod>
   26258:	e2877001 	add	r7, r7, #1
   2625c:	e3540009 	cmp	r4, #9
   26260:	e0893004 	add	r3, r9, r4
   26264:	e2844030 	add	r4, r4, #48	; 0x30
   26268:	e1a00005 	mov	r0, r5
   2626c:	e6af3073 	sxtb	r3, r3
   26270:	96af3074 	sxtbls	r3, r4
   26274:	e5473001 	strb	r3, [r7, #-1]
   26278:	e1a06001 	mov	r6, r1
   2627c:	e1a01008 	mov	r1, r8
   26280:	ebffee8f 	bl	21cc4 <__aeabi_uidiv>
   26284:	e2505000 	subs	r5, r0, #0
   26288:	e1a00006 	mov	r0, r6
   2628c:	e1a01005 	mov	r1, r5
   26290:	1affffeb 	bne	26244 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x50>
   26294:	e5c75000 	strb	r5, [r7]
   26298:	e1a0000a 	mov	r0, sl
   2629c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   262a0:	e1a04001 	mov	r4, r1
   262a4:	e3a05001 	mov	r5, #1
   262a8:	eaffffe0 	b	26230 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x3c>

000262ac <CString::ftoa(char*, double, unsigned int)>:
   262ac:	eeb50bc0 	vcmpe.f64	d0, #0.0
   262b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262b4:	e1a08000 	mov	r8, r0
   262b8:	ed2d8b02 	vpush	{d8}
   262bc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   262c0:	43a0302d 	movmi	r3, #45	; 0x2d
   262c4:	42809001 	addmi	r9, r0, #1
   262c8:	45c03000 	strbmi	r3, [r0]
   262cc:	eeb08b40 	vmov.f64	d8, d0
   262d0:	51a09000 	movpl	r9, r0
   262d4:	eddf0b91 	vldr	d16, [pc, #580]	; 26520 <CString::ftoa(char*, double, unsigned int)+0x274>
   262d8:	e24dd01c 	sub	sp, sp, #28
   262dc:	e58d1004 	str	r1, [sp, #4]
   262e0:	4eb18b40 	vnegmi.f64	d8, d0
   262e4:	eeb48be0 	vcmpe.f64	d8, d16
   262e8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   262ec:	ca00007b 	bgt	264e0 <CString::ftoa(char*, double, unsigned int)+0x234>
   262f0:	eefc7bc8 	vcvt.u32.f64	s15, d8
   262f4:	ee175a90 	vmov	r5, s15
   262f8:	e3550009 	cmp	r5, #9
   262fc:	83a07001 	movhi	r7, #1
   26300:	83a0400a 	movhi	r4, #10
   26304:	9a00007d 	bls	26500 <CString::ftoa(char*, double, unsigned int)+0x254>
   26308:	e0070794 	mul	r7, r4, r7
   2630c:	e1a00005 	mov	r0, r5
   26310:	e1a01007 	mov	r1, r7
   26314:	ebffee6a 	bl	21cc4 <__aeabi_uidiv>
   26318:	e3500009 	cmp	r0, #9
   2631c:	e1a0a000 	mov	sl, r0
   26320:	8afffff8 	bhi	26308 <CString::ftoa(char*, double, unsigned int)+0x5c>
   26324:	e30c6ccd 	movw	r6, #52429	; 0xcccd
   26328:	e1a04009 	mov	r4, r9
   2632c:	e34c6ccc 	movt	r6, #52428	; 0xcccc
   26330:	e1a0b005 	mov	fp, r5
   26334:	ea000001 	b	26340 <CString::ftoa(char*, double, unsigned int)+0x94>
   26338:	ebffee61 	bl	21cc4 <__aeabi_uidiv>
   2633c:	e1a0a000 	mov	sl, r0
   26340:	e1a0000b 	mov	r0, fp
   26344:	e1a01007 	mov	r1, r7
   26348:	ebffee61 	bl	21cd4 <__aeabi_uidivmod>
   2634c:	e0832697 	umull	r2, r3, r7, r6
   26350:	e35a0009 	cmp	sl, #9
   26354:	e2844001 	add	r4, r4, #1
   26358:	e1a0b001 	mov	fp, r1
   2635c:	e28a1057 	add	r1, sl, #87	; 0x57
   26360:	e28aa030 	add	sl, sl, #48	; 0x30
   26364:	e1a0000b 	mov	r0, fp
   26368:	e6af1071 	sxtb	r1, r1
   2636c:	96af107a 	sxtbls	r1, sl
   26370:	e1b071a3 	lsrs	r7, r3, #3
   26374:	e5441001 	strb	r1, [r4, #-1]
   26378:	e1a01007 	mov	r1, r7
   2637c:	1affffed 	bne	26338 <CString::ftoa(char*, double, unsigned int)+0x8c>
   26380:	e59d3004 	ldr	r3, [sp, #4]
   26384:	e5c47000 	strb	r7, [r4]
   26388:	e3530000 	cmp	r3, #0
   2638c:	1a000003 	bne	263a0 <CString::ftoa(char*, double, unsigned int)+0xf4>
   26390:	e1a00008 	mov	r0, r8
   26394:	e28dd01c 	add	sp, sp, #28
   26398:	ecbd8b02 	vpop	{d8}
   2639c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   263a0:	e1a00009 	mov	r0, r9
   263a4:	ebfff284 	bl	22dbc <strlen>
   263a8:	e59d3004 	ldr	r3, [sp, #4]
   263ac:	e3530009 	cmp	r3, #9
   263b0:	31a07003 	movcc	r7, r3
   263b4:	23a07009 	movcs	r7, #9
   263b8:	e3570001 	cmp	r7, #1
   263bc:	e3a0302e 	mov	r3, #46	; 0x2e
   263c0:	e0892000 	add	r2, r9, r0
   263c4:	e7c93000 	strb	r3, [r9, r0]
   263c8:	e58d2004 	str	r2, [sp, #4]
   263cc:	e2829001 	add	r9, r2, #1
   263d0:	0a000050 	beq	26518 <CString::ftoa(char*, double, unsigned int)+0x26c>
   263d4:	e3a0200a 	mov	r2, #10
   263d8:	e3a03002 	mov	r3, #2
   263dc:	e1a01002 	mov	r1, r2
   263e0:	e2833001 	add	r3, r3, #1
   263e4:	e1530007 	cmp	r3, r7
   263e8:	e0020291 	mul	r2, r1, r2
   263ec:	9afffffb 	bls	263e0 <CString::ftoa(char*, double, unsigned int)+0x134>
   263f0:	ee072a90 	vmov	s15, r2
   263f4:	eef81b67 	vcvt.f64.u32	d17, s15
   263f8:	ee075a90 	vmov	s15, r5
   263fc:	eef80b67 	vcvt.f64.u32	d16, s15
   26400:	ee388b60 	vsub.f64	d8, d8, d16
   26404:	ee288b21 	vmul.f64	d8, d8, d17
   26408:	eefc7bc8 	vcvt.u32.f64	s15, d8
   2640c:	ee17ba90 	vmov	fp, s15
   26410:	e35b0009 	cmp	fp, #9
   26414:	83a06001 	movhi	r6, #1
   26418:	83a0400a 	movhi	r4, #10
   2641c:	9a00003a 	bls	2650c <CString::ftoa(char*, double, unsigned int)+0x260>
   26420:	e0060694 	mul	r6, r4, r6
   26424:	e1a0000b 	mov	r0, fp
   26428:	e1a01006 	mov	r1, r6
   2642c:	ebffee24 	bl	21cc4 <__aeabi_uidiv>
   26430:	e3500009 	cmp	r0, #9
   26434:	e1a0a000 	mov	sl, r0
   26438:	8afffff8 	bhi	26420 <CString::ftoa(char*, double, unsigned int)+0x174>
   2643c:	e30c5ccd 	movw	r5, #52429	; 0xcccd
   26440:	e28d400c 	add	r4, sp, #12
   26444:	e34c5ccc 	movt	r5, #52428	; 0xcccc
   26448:	ea000001 	b	26454 <CString::ftoa(char*, double, unsigned int)+0x1a8>
   2644c:	ebffee1c 	bl	21cc4 <__aeabi_uidiv>
   26450:	e1a0a000 	mov	sl, r0
   26454:	e1a0000b 	mov	r0, fp
   26458:	e1a01006 	mov	r1, r6
   2645c:	ebffee1c 	bl	21cd4 <__aeabi_uidivmod>
   26460:	e0832596 	umull	r2, r3, r6, r5
   26464:	e35a0009 	cmp	sl, #9
   26468:	e2844001 	add	r4, r4, #1
   2646c:	e1a0b001 	mov	fp, r1
   26470:	e28a1057 	add	r1, sl, #87	; 0x57
   26474:	e28aa030 	add	sl, sl, #48	; 0x30
   26478:	e1a0000b 	mov	r0, fp
   2647c:	e6af1071 	sxtb	r1, r1
   26480:	96af107a 	sxtbls	r1, sl
   26484:	e1b061a3 	lsrs	r6, r3, #3
   26488:	e5441001 	strb	r1, [r4, #-1]
   2648c:	e1a01006 	mov	r1, r6
   26490:	1affffed 	bne	2644c <CString::ftoa(char*, double, unsigned int)+0x1a0>
   26494:	e28d000c 	add	r0, sp, #12
   26498:	e5c46000 	strb	r6, [r4]
   2649c:	ebfff246 	bl	22dbc <strlen>
   264a0:	e0577000 	subs	r7, r7, r0
   264a4:	0a000006 	beq	264c4 <CString::ftoa(char*, double, unsigned int)+0x218>
   264a8:	e59d6004 	ldr	r6, [sp, #4]
   264ac:	e3a03030 	mov	r3, #48	; 0x30
   264b0:	e0862007 	add	r2, r6, r7
   264b4:	e5e63001 	strb	r3, [r6, #1]!
   264b8:	e1560002 	cmp	r6, r2
   264bc:	1afffffc 	bne	264b4 <CString::ftoa(char*, double, unsigned int)+0x208>
   264c0:	e0899007 	add	r9, r9, r7
   264c4:	e28d100c 	add	r1, sp, #12
   264c8:	e1a00009 	mov	r0, r9
   264cc:	ebfff25f 	bl	22e50 <strcpy>
   264d0:	e1a00008 	mov	r0, r8
   264d4:	e28dd01c 	add	sp, sp, #28
   264d8:	ecbd8b02 	vpop	{d8}
   264dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264e0:	e1a00009 	mov	r0, r9
   264e4:	e3001e10 	movw	r1, #3600	; 0xe10
   264e8:	e3401003 	movt	r1, #3
   264ec:	ebfff257 	bl	22e50 <strcpy>
   264f0:	e1a00008 	mov	r0, r8
   264f4:	e28dd01c 	add	sp, sp, #28
   264f8:	ecbd8b02 	vpop	{d8}
   264fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26500:	ee17aa90 	vmov	sl, s15
   26504:	e3a07001 	mov	r7, #1
   26508:	eaffff85 	b	26324 <CString::ftoa(char*, double, unsigned int)+0x78>
   2650c:	ee17aa90 	vmov	sl, s15
   26510:	e3a06001 	mov	r6, #1
   26514:	eaffffc8 	b	2643c <CString::ftoa(char*, double, unsigned int)+0x190>
   26518:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
   2651c:	eaffffb5 	b	263f8 <CString::ftoa(char*, double, unsigned int)+0x14c>
   26520:	ffe00000 	.word	0xffe00000
   26524:	41efffff 	.word	0x41efffff

00026528 <CString::FormatV(char const*, std::__va_list)>:
   26528:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2652c:	e1a0b000 	mov	fp, r0
   26530:	e5900004 	ldr	r0, [r0, #4]
   26534:	e24dd034 	sub	sp, sp, #52	; 0x34
   26538:	e1a05001 	mov	r5, r1
   2653c:	e3500000 	cmp	r0, #0
   26540:	e58d2000 	str	r2, [sp]
   26544:	0a000000 	beq	2654c <CString::FormatV(char const*, std::__va_list)+0x24>
   26548:	ebffee8a 	bl	21f78 <operator delete[](void*)>
   2654c:	e3a00040 	mov	r0, #64	; 0x40
   26550:	e58b0008 	str	r0, [fp, #8]
   26554:	e30c3ccd 	movw	r3, #52429	; 0xcccd
   26558:	e34c3ccc 	movt	r3, #52428	; 0xcccc
   2655c:	e58d3014 	str	r3, [sp, #20]
   26560:	ebffee82 	bl	21f70 <operator new[](unsigned int)>
   26564:	e58b0004 	str	r0, [fp, #4]
   26568:	e58b000c 	str	r0, [fp, #12]
   2656c:	e1d540d0 	ldrsb	r4, [r5]
   26570:	e3540000 	cmp	r4, #0
   26574:	0a0000a2 	beq	26804 <CString::FormatV(char const*, std::__va_list)+0x2dc>
   26578:	e3540025 	cmp	r4, #37	; 0x25
   2657c:	13a01001 	movne	r1, #1
   26580:	11a0000b 	movne	r0, fp
   26584:	1a000156 	bne	26ae4 <CString::FormatV(char const*, std::__va_list)+0x5bc>
   26588:	e1d560d1 	ldrsb	r6, [r5, #1]
   2658c:	e3560025 	cmp	r6, #37	; 0x25
   26590:	0a000169 	beq	26b3c <CString::FormatV(char const*, std::__va_list)+0x614>
   26594:	e356002d 	cmp	r6, #45	; 0x2d
   26598:	e3a04000 	mov	r4, #0
   2659c:	12855001 	addne	r5, r5, #1
   265a0:	01d560d2 	ldrsbeq	r6, [r5, #2]
   265a4:	03a03001 	moveq	r3, #1
   265a8:	13a03000 	movne	r3, #0
   265ac:	02855002 	addeq	r5, r5, #2
   265b0:	e3560030 	cmp	r6, #48	; 0x30
   265b4:	e58d3004 	str	r3, [sp, #4]
   265b8:	01d560d1 	ldrsbeq	r6, [r5, #1]
   265bc:	03a03001 	moveq	r3, #1
   265c0:	13a03000 	movne	r3, #0
   265c4:	058d300c 	streq	r3, [sp, #12]
   265c8:	00855003 	addeq	r5, r5, r3
   265cc:	158d300c 	strne	r3, [sp, #12]
   265d0:	e2463030 	sub	r3, r6, #48	; 0x30
   265d4:	e6ef3073 	uxtb	r3, r3
   265d8:	e3530009 	cmp	r3, #9
   265dc:	8a000007 	bhi	26600 <CString::FormatV(char const*, std::__va_list)+0xd8>
   265e0:	e3a0200a 	mov	r2, #10
   265e4:	e0246492 	mla	r4, r2, r4, r6
   265e8:	e1f560d1 	ldrsb	r6, [r5, #1]!
   265ec:	e2463030 	sub	r3, r6, #48	; 0x30
   265f0:	e2444030 	sub	r4, r4, #48	; 0x30
   265f4:	e6ef3073 	uxtb	r3, r3
   265f8:	e3530009 	cmp	r3, #9
   265fc:	9afffff8 	bls	265e4 <CString::FormatV(char const*, std::__va_list)+0xbc>
   26600:	e356002e 	cmp	r6, #46	; 0x2e
   26604:	0a00013c 	beq	26afc <CString::FormatV(char const*, std::__va_list)+0x5d4>
   26608:	e1d570d0 	ldrsb	r7, [r5]
   2660c:	e3a01006 	mov	r1, #6
   26610:	e357006c 	cmp	r7, #108	; 0x6c
   26614:	01d570d1 	ldrsbeq	r7, [r5, #1]
   26618:	03a02001 	moveq	r2, #1
   2661c:	13a02000 	movne	r2, #0
   26620:	00855002 	addeq	r5, r5, r2
   26624:	e2473058 	sub	r3, r7, #88	; 0x58
   26628:	e3530020 	cmp	r3, #32
   2662c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   26630:	ea000120 	b	26ab8 <CString::FormatV(char const*, std::__va_list)+0x590>
   26634:	00026a34 	.word	0x00026a34
   26638:	00026ab8 	.word	0x00026ab8
   2663c:	00026ab8 	.word	0x00026ab8
   26640:	00026ab8 	.word	0x00026ab8
   26644:	00026ab8 	.word	0x00026ab8
   26648:	00026ab8 	.word	0x00026ab8
   2664c:	00026ab8 	.word	0x00026ab8
   26650:	00026ab8 	.word	0x00026ab8
   26654:	00026ab8 	.word	0x00026ab8
   26658:	00026ab8 	.word	0x00026ab8
   2665c:	00026ab8 	.word	0x00026ab8
   26660:	000269c0 	.word	0x000269c0
   26664:	00026894 	.word	0x00026894
   26668:	00026ab8 	.word	0x00026ab8
   2666c:	00026814 	.word	0x00026814
   26670:	00026ab8 	.word	0x00026ab8
   26674:	00026ab8 	.word	0x00026ab8
   26678:	00026ab8 	.word	0x00026ab8
   2667c:	00026ab8 	.word	0x00026ab8
   26680:	00026ab8 	.word	0x00026ab8
   26684:	00026ab8 	.word	0x00026ab8
   26688:	00026ab8 	.word	0x00026ab8
   2668c:	00026ab8 	.word	0x00026ab8
   26690:	000266b8 	.word	0x000266b8
   26694:	00026ab8 	.word	0x00026ab8
   26698:	00026ab8 	.word	0x00026ab8
   2669c:	00026ab8 	.word	0x00026ab8
   266a0:	00026a44 	.word	0x00026a44
   266a4:	00026ab8 	.word	0x00026ab8
   266a8:	00026a3c 	.word	0x00026a3c
   266ac:	00026ab8 	.word	0x00026ab8
   266b0:	00026ab8 	.word	0x00026ab8
   266b4:	00026a34 	.word	0x00026a34
   266b8:	e3a08008 	mov	r8, #8
   266bc:	e59d3000 	ldr	r3, [sp]
   266c0:	e2833004 	add	r3, r3, #4
   266c4:	e5136004 	ldr	r6, [r3, #-4]
   266c8:	e58d3000 	str	r3, [sp]
   266cc:	e1560008 	cmp	r6, r8
   266d0:	23a0a001 	movcs	sl, #1
   266d4:	3a000198 	bcc	26d3c <CString::FormatV(char const*, std::__va_list)+0x814>
   266d8:	e00a0a98 	mul	sl, r8, sl
   266dc:	e1a00006 	mov	r0, r6
   266e0:	e1a0100a 	mov	r1, sl
   266e4:	ebffed76 	bl	21cc4 <__aeabi_uidiv>
   266e8:	e1580000 	cmp	r8, r0
   266ec:	9afffff9 	bls	266d8 <CString::FormatV(char const*, std::__va_list)+0x1b0>
   266f0:	e1a09000 	mov	r9, r0
   266f4:	e28d3018 	add	r3, sp, #24
   266f8:	e3570058 	cmp	r7, #88	; 0x58
   266fc:	e58d3008 	str	r3, [sp, #8]
   26700:	13a02057 	movne	r2, #87	; 0x57
   26704:	03a02037 	moveq	r2, #55	; 0x37
   26708:	e1a07003 	mov	r7, r3
   2670c:	e1a03005 	mov	r3, r5
   26710:	e58d4010 	str	r4, [sp, #16]
   26714:	e1a0500a 	mov	r5, sl
   26718:	e1a04002 	mov	r4, r2
   2671c:	e1a0a003 	mov	sl, r3
   26720:	ea000001 	b	2672c <CString::FormatV(char const*, std::__va_list)+0x204>
   26724:	ebffed66 	bl	21cc4 <__aeabi_uidiv>
   26728:	e1a09000 	mov	r9, r0
   2672c:	e1a00006 	mov	r0, r6
   26730:	e1a01005 	mov	r1, r5
   26734:	ebffed66 	bl	21cd4 <__aeabi_uidivmod>
   26738:	e2877001 	add	r7, r7, #1
   2673c:	e3590009 	cmp	r9, #9
   26740:	e0842009 	add	r2, r4, r9
   26744:	e2899030 	add	r9, r9, #48	; 0x30
   26748:	e1a00005 	mov	r0, r5
   2674c:	e6af2072 	sxtb	r2, r2
   26750:	96af2079 	sxtbls	r2, r9
   26754:	e5472001 	strb	r2, [r7, #-1]
   26758:	e1a06001 	mov	r6, r1
   2675c:	e1a01008 	mov	r1, r8
   26760:	ebffed57 	bl	21cc4 <__aeabi_uidiv>
   26764:	e2505000 	subs	r5, r0, #0
   26768:	e1a00006 	mov	r0, r6
   2676c:	e1a01005 	mov	r1, r5
   26770:	1affffeb 	bne	26724 <CString::FormatV(char const*, std::__va_list)+0x1fc>
   26774:	e1a0300a 	mov	r3, sl
   26778:	e59d0008 	ldr	r0, [sp, #8]
   2677c:	e5c71000 	strb	r1, [r7]
   26780:	e1a0a005 	mov	sl, r5
   26784:	e59d4010 	ldr	r4, [sp, #16]
   26788:	e1a05003 	mov	r5, r3
   2678c:	ebfff18a 	bl	22dbc <strlen>
   26790:	e59d3004 	ldr	r3, [sp, #4]
   26794:	e3530000 	cmp	r3, #0
   26798:	e1a06000 	mov	r6, r0
   2679c:	1a0000ef 	bne	26b60 <CString::FormatV(char const*, std::__va_list)+0x638>
   267a0:	e1500004 	cmp	r0, r4
   267a4:	2a00000f 	bcs	267e8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   267a8:	e59d300c 	ldr	r3, [sp, #12]
   267ac:	e0444000 	sub	r4, r4, r0
   267b0:	e1a0000b 	mov	r0, fp
   267b4:	e3530000 	cmp	r3, #0
   267b8:	e1a01004 	mov	r1, r4
   267bc:	03a06020 	moveq	r6, #32
   267c0:	13a06030 	movne	r6, #48	; 0x30
   267c4:	ebfffde6 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   267c8:	e2443001 	sub	r3, r4, #1
   267cc:	e59b200c 	ldr	r2, [fp, #12]
   267d0:	e2433001 	sub	r3, r3, #1
   267d4:	e3730001 	cmn	r3, #1
   267d8:	e2821001 	add	r1, r2, #1
   267dc:	e58b100c 	str	r1, [fp, #12]
   267e0:	e5c26000 	strb	r6, [r2]
   267e4:	1afffff8 	bne	267cc <CString::FormatV(char const*, std::__va_list)+0x2a4>
   267e8:	e59d1008 	ldr	r1, [sp, #8]
   267ec:	e1a0000b 	mov	r0, fp
   267f0:	ebfffe6b 	bl	261a4 <CString::PutString(char const*)>
   267f4:	e2855001 	add	r5, r5, #1
   267f8:	e1d540d0 	ldrsb	r4, [r5]
   267fc:	e3540000 	cmp	r4, #0
   26800:	1affff5c 	bne	26578 <CString::FormatV(char const*, std::__va_list)+0x50>
   26804:	e59b300c 	ldr	r3, [fp, #12]
   26808:	e5c34000 	strb	r4, [r3]
   2680c:	e28dd034 	add	sp, sp, #52	; 0x34
   26810:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26814:	e59d3000 	ldr	r3, [sp]
   26818:	e28d6018 	add	r6, sp, #24
   2681c:	e58d6008 	str	r6, [sp, #8]
   26820:	e2833007 	add	r3, r3, #7
   26824:	e1a00006 	mov	r0, r6
   26828:	e3c33007 	bic	r3, r3, #7
   2682c:	e2832008 	add	r2, r3, #8
   26830:	e58d2000 	str	r2, [sp]
   26834:	ed930b00 	vldr	d0, [r3]
   26838:	ebfffe9b 	bl	262ac <CString::ftoa(char*, double, unsigned int)>
   2683c:	e1a00006 	mov	r0, r6
   26840:	ebfff15d 	bl	22dbc <strlen>
   26844:	e59d3004 	ldr	r3, [sp, #4]
   26848:	e3530000 	cmp	r3, #0
   2684c:	e1a06000 	mov	r6, r0
   26850:	1a000107 	bne	26c74 <CString::FormatV(char const*, std::__va_list)+0x74c>
   26854:	e1500004 	cmp	r0, r4
   26858:	2affffe2 	bcs	267e8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   2685c:	e0444000 	sub	r4, r4, r0
   26860:	e1a0000b 	mov	r0, fp
   26864:	e1a01004 	mov	r1, r4
   26868:	ebfffdbd 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2686c:	e2443001 	sub	r3, r4, #1
   26870:	e3a00020 	mov	r0, #32
   26874:	e59b200c 	ldr	r2, [fp, #12]
   26878:	e2433001 	sub	r3, r3, #1
   2687c:	e3730001 	cmn	r3, #1
   26880:	e2821001 	add	r1, r2, #1
   26884:	e58b100c 	str	r1, [fp, #12]
   26888:	e5c20000 	strb	r0, [r2]
   2688c:	1afffff8 	bne	26874 <CString::FormatV(char const*, std::__va_list)+0x34c>
   26890:	eaffffd4 	b	267e8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   26894:	e59d3000 	ldr	r3, [sp]
   26898:	e2833004 	add	r3, r3, #4
   2689c:	e5137004 	ldr	r7, [r3, #-4]
   268a0:	e58d3000 	str	r3, [sp]
   268a4:	e3570000 	cmp	r7, #0
   268a8:	b2677000 	rsblt	r7, r7, #0
   268ac:	b3a03001 	movlt	r3, #1
   268b0:	a3a03000 	movge	r3, #0
   268b4:	b58d300c 	strlt	r3, [sp, #12]
   268b8:	e1a06007 	mov	r6, r7
   268bc:	a58d300c 	strge	r3, [sp, #12]
   268c0:	e3570009 	cmp	r7, #9
   268c4:	e58d3010 	str	r3, [sp, #16]
   268c8:	c3a0a001 	movgt	sl, #1
   268cc:	c3a0900a 	movgt	r9, #10
   268d0:	da000116 	ble	26d30 <CString::FormatV(char const*, std::__va_list)+0x808>
   268d4:	e00a0a99 	mul	sl, r9, sl
   268d8:	e1a00007 	mov	r0, r7
   268dc:	e1a0100a 	mov	r1, sl
   268e0:	ebffecf7 	bl	21cc4 <__aeabi_uidiv>
   268e4:	e3500009 	cmp	r0, #9
   268e8:	8afffff9 	bhi	268d4 <CString::FormatV(char const*, std::__va_list)+0x3ac>
   268ec:	e1a08000 	mov	r8, r0
   268f0:	e28d7018 	add	r7, sp, #24
   268f4:	e59d9014 	ldr	r9, [sp, #20]
   268f8:	e58d7008 	str	r7, [sp, #8]
   268fc:	ea000001 	b	26908 <CString::FormatV(char const*, std::__va_list)+0x3e0>
   26900:	ebffecef 	bl	21cc4 <__aeabi_uidiv>
   26904:	e1a08000 	mov	r8, r0
   26908:	e1a00006 	mov	r0, r6
   2690c:	e1a0100a 	mov	r1, sl
   26910:	ebffecef 	bl	21cd4 <__aeabi_uidivmod>
   26914:	e083299a 	umull	r2, r3, sl, r9
   26918:	e3580009 	cmp	r8, #9
   2691c:	e2877001 	add	r7, r7, #1
   26920:	e1a06001 	mov	r6, r1
   26924:	e2881057 	add	r1, r8, #87	; 0x57
   26928:	e2888030 	add	r8, r8, #48	; 0x30
   2692c:	e1a00006 	mov	r0, r6
   26930:	e6af1071 	sxtb	r1, r1
   26934:	96af1078 	sxtbls	r1, r8
   26938:	e1b0a1a3 	lsrs	sl, r3, #3
   2693c:	e5471001 	strb	r1, [r7, #-1]
   26940:	e1a0100a 	mov	r1, sl
   26944:	1affffed 	bne	26900 <CString::FormatV(char const*, std::__va_list)+0x3d8>
   26948:	e59d0008 	ldr	r0, [sp, #8]
   2694c:	e5c7a000 	strb	sl, [r7]
   26950:	ebfff119 	bl	22dbc <strlen>
   26954:	e59d3004 	ldr	r3, [sp, #4]
   26958:	e3530000 	cmp	r3, #0
   2695c:	e59d300c 	ldr	r3, [sp, #12]
   26960:	e0808003 	add	r8, r0, r3
   26964:	0a000090 	beq	26bac <CString::FormatV(char const*, std::__va_list)+0x684>
   26968:	e59d3010 	ldr	r3, [sp, #16]
   2696c:	e3530000 	cmp	r3, #0
   26970:	1a0000e5 	bne	26d0c <CString::FormatV(char const*, std::__va_list)+0x7e4>
   26974:	e59d1008 	ldr	r1, [sp, #8]
   26978:	e1a0000b 	mov	r0, fp
   2697c:	ebfffe08 	bl	261a4 <CString::PutString(char const*)>
   26980:	e1580004 	cmp	r8, r4
   26984:	2affff9a 	bcs	267f4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   26988:	e0448008 	sub	r8, r4, r8
   2698c:	e1a0000b 	mov	r0, fp
   26990:	e1a01008 	mov	r1, r8
   26994:	ebfffd72 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26998:	e2483001 	sub	r3, r8, #1
   2699c:	e3a00020 	mov	r0, #32
   269a0:	e59b200c 	ldr	r2, [fp, #12]
   269a4:	e2433001 	sub	r3, r3, #1
   269a8:	e3730001 	cmn	r3, #1
   269ac:	e2821001 	add	r1, r2, #1
   269b0:	e58b100c 	str	r1, [fp, #12]
   269b4:	e5c20000 	strb	r0, [r2]
   269b8:	1afffff8 	bne	269a0 <CString::FormatV(char const*, std::__va_list)+0x478>
   269bc:	eaffff8c 	b	267f4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   269c0:	e59d3004 	ldr	r3, [sp, #4]
   269c4:	e3530000 	cmp	r3, #0
   269c8:	e59d3000 	ldr	r3, [sp]
   269cc:	e2836004 	add	r6, r3, #4
   269d0:	e1d370d0 	ldrsb	r7, [r3]
   269d4:	1a00008f 	bne	26c18 <CString::FormatV(char const*, std::__va_list)+0x6f0>
   269d8:	e3540001 	cmp	r4, #1
   269dc:	9a00000b 	bls	26a10 <CString::FormatV(char const*, std::__va_list)+0x4e8>
   269e0:	e2441001 	sub	r1, r4, #1
   269e4:	e1a0000b 	mov	r0, fp
   269e8:	e2444002 	sub	r4, r4, #2
   269ec:	ebfffd5c 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   269f0:	e3a01020 	mov	r1, #32
   269f4:	e59b300c 	ldr	r3, [fp, #12]
   269f8:	e2444001 	sub	r4, r4, #1
   269fc:	e3740001 	cmn	r4, #1
   26a00:	e2832001 	add	r2, r3, #1
   26a04:	e58b200c 	str	r2, [fp, #12]
   26a08:	e5c31000 	strb	r1, [r3]
   26a0c:	1afffff8 	bne	269f4 <CString::FormatV(char const*, std::__va_list)+0x4cc>
   26a10:	e3a01001 	mov	r1, #1
   26a14:	e1a0000b 	mov	r0, fp
   26a18:	ebfffd51 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26a1c:	e59b300c 	ldr	r3, [fp, #12]
   26a20:	e58d6000 	str	r6, [sp]
   26a24:	e2832001 	add	r2, r3, #1
   26a28:	e58b200c 	str	r2, [fp, #12]
   26a2c:	e5c37000 	strb	r7, [r3]
   26a30:	eaffff6f 	b	267f4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   26a34:	e3a08010 	mov	r8, #16
   26a38:	eaffff1f 	b	266bc <CString::FormatV(char const*, std::__va_list)+0x194>
   26a3c:	e3a0800a 	mov	r8, #10
   26a40:	eaffff1d 	b	266bc <CString::FormatV(char const*, std::__va_list)+0x194>
   26a44:	e59d3000 	ldr	r3, [sp]
   26a48:	e2836004 	add	r6, r3, #4
   26a4c:	e5938000 	ldr	r8, [r3]
   26a50:	e1a00008 	mov	r0, r8
   26a54:	ebfff0d8 	bl	22dbc <strlen>
   26a58:	e59d3004 	ldr	r3, [sp, #4]
   26a5c:	e3530000 	cmp	r3, #0
   26a60:	e1a07000 	mov	r7, r0
   26a64:	1a000095 	bne	26cc0 <CString::FormatV(char const*, std::__va_list)+0x798>
   26a68:	e1500004 	cmp	r0, r4
   26a6c:	2a00000c 	bcs	26aa4 <CString::FormatV(char const*, std::__va_list)+0x57c>
   26a70:	e0444000 	sub	r4, r4, r0
   26a74:	e1a0000b 	mov	r0, fp
   26a78:	e1a01004 	mov	r1, r4
   26a7c:	ebfffd38 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26a80:	e2443001 	sub	r3, r4, #1
   26a84:	e3a00020 	mov	r0, #32
   26a88:	e59b200c 	ldr	r2, [fp, #12]
   26a8c:	e2433001 	sub	r3, r3, #1
   26a90:	e3730001 	cmn	r3, #1
   26a94:	e2821001 	add	r1, r2, #1
   26a98:	e58b100c 	str	r1, [fp, #12]
   26a9c:	e5c20000 	strb	r0, [r2]
   26aa0:	1afffff8 	bne	26a88 <CString::FormatV(char const*, std::__va_list)+0x560>
   26aa4:	e1a01008 	mov	r1, r8
   26aa8:	e1a0000b 	mov	r0, fp
   26aac:	e58d6000 	str	r6, [sp]
   26ab0:	ebfffdbb 	bl	261a4 <CString::PutString(char const*)>
   26ab4:	eaffff4e 	b	267f4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   26ab8:	e3a01001 	mov	r1, #1
   26abc:	e1a0000b 	mov	r0, fp
   26ac0:	ebfffd27 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26ac4:	e59b300c 	ldr	r3, [fp, #12]
   26ac8:	e3a02025 	mov	r2, #37	; 0x25
   26acc:	e3a01001 	mov	r1, #1
   26ad0:	e0830001 	add	r0, r3, r1
   26ad4:	e58b000c 	str	r0, [fp, #12]
   26ad8:	e5c32000 	strb	r2, [r3]
   26adc:	e1a0000b 	mov	r0, fp
   26ae0:	e1d540d0 	ldrsb	r4, [r5]
   26ae4:	ebfffd1e 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26ae8:	e59b300c 	ldr	r3, [fp, #12]
   26aec:	e2832001 	add	r2, r3, #1
   26af0:	e58b200c 	str	r2, [fp, #12]
   26af4:	e5c34000 	strb	r4, [r3]
   26af8:	eaffff3d 	b	267f4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   26afc:	e1d570d1 	ldrsb	r7, [r5, #1]
   26b00:	e3a01000 	mov	r1, #0
   26b04:	e2855001 	add	r5, r5, #1
   26b08:	e2473030 	sub	r3, r7, #48	; 0x30
   26b0c:	e6ef3073 	uxtb	r3, r3
   26b10:	e3530009 	cmp	r3, #9
   26b14:	8afffebd 	bhi	26610 <CString::FormatV(char const*, std::__va_list)+0xe8>
   26b18:	e3a0200a 	mov	r2, #10
   26b1c:	e0217192 	mla	r1, r2, r1, r7
   26b20:	e1f570d1 	ldrsb	r7, [r5, #1]!
   26b24:	e2473030 	sub	r3, r7, #48	; 0x30
   26b28:	e2411030 	sub	r1, r1, #48	; 0x30
   26b2c:	e6ef3073 	uxtb	r3, r3
   26b30:	e3530009 	cmp	r3, #9
   26b34:	9afffff8 	bls	26b1c <CString::FormatV(char const*, std::__va_list)+0x5f4>
   26b38:	eafffeb4 	b	26610 <CString::FormatV(char const*, std::__va_list)+0xe8>
   26b3c:	e3a01001 	mov	r1, #1
   26b40:	e1a0000b 	mov	r0, fp
   26b44:	ebfffd06 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26b48:	e59b300c 	ldr	r3, [fp, #12]
   26b4c:	e2855002 	add	r5, r5, #2
   26b50:	e2832001 	add	r2, r3, #1
   26b54:	e58b200c 	str	r2, [fp, #12]
   26b58:	e5c36000 	strb	r6, [r3]
   26b5c:	eafffe82 	b	2656c <CString::FormatV(char const*, std::__va_list)+0x44>
   26b60:	e59d1008 	ldr	r1, [sp, #8]
   26b64:	e1a0000b 	mov	r0, fp
   26b68:	ebfffd8d 	bl	261a4 <CString::PutString(char const*)>
   26b6c:	e1560004 	cmp	r6, r4
   26b70:	2affff1f 	bcs	267f4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   26b74:	e0444006 	sub	r4, r4, r6
   26b78:	e1a0000b 	mov	r0, fp
   26b7c:	e1a01004 	mov	r1, r4
   26b80:	ebfffcf7 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26b84:	e2443001 	sub	r3, r4, #1
   26b88:	e3a00020 	mov	r0, #32
   26b8c:	e59b200c 	ldr	r2, [fp, #12]
   26b90:	e2433001 	sub	r3, r3, #1
   26b94:	e3730001 	cmn	r3, #1
   26b98:	e2821001 	add	r1, r2, #1
   26b9c:	e58b100c 	str	r1, [fp, #12]
   26ba0:	e5c20000 	strb	r0, [r2]
   26ba4:	1afffff8 	bne	26b8c <CString::FormatV(char const*, std::__va_list)+0x664>
   26ba8:	eaffff11 	b	267f4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   26bac:	e1580004 	cmp	r8, r4
   26bb0:	2a00000c 	bcs	26be8 <CString::FormatV(char const*, std::__va_list)+0x6c0>
   26bb4:	e0448008 	sub	r8, r4, r8
   26bb8:	e1a0000b 	mov	r0, fp
   26bbc:	e1a01008 	mov	r1, r8
   26bc0:	ebfffce7 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26bc4:	e2483001 	sub	r3, r8, #1
   26bc8:	e3a00020 	mov	r0, #32
   26bcc:	e59b200c 	ldr	r2, [fp, #12]
   26bd0:	e2433001 	sub	r3, r3, #1
   26bd4:	e3730001 	cmn	r3, #1
   26bd8:	e2821001 	add	r1, r2, #1
   26bdc:	e58b100c 	str	r1, [fp, #12]
   26be0:	e5c20000 	strb	r0, [r2]
   26be4:	1afffff8 	bne	26bcc <CString::FormatV(char const*, std::__va_list)+0x6a4>
   26be8:	e59d3010 	ldr	r3, [sp, #16]
   26bec:	e3530000 	cmp	r3, #0
   26bf0:	0afffefc 	beq	267e8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   26bf4:	e3a01001 	mov	r1, #1
   26bf8:	e1a0000b 	mov	r0, fp
   26bfc:	ebfffcd8 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26c00:	e59b300c 	ldr	r3, [fp, #12]
   26c04:	e3a0202d 	mov	r2, #45	; 0x2d
   26c08:	e2831001 	add	r1, r3, #1
   26c0c:	e58b100c 	str	r1, [fp, #12]
   26c10:	e5c32000 	strb	r2, [r3]
   26c14:	eafffef3 	b	267e8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   26c18:	e3a01001 	mov	r1, #1
   26c1c:	e1a0000b 	mov	r0, fp
   26c20:	ebfffccf 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26c24:	e59b300c 	ldr	r3, [fp, #12]
   26c28:	e3540001 	cmp	r4, #1
   26c2c:	e2832001 	add	r2, r3, #1
   26c30:	e58b200c 	str	r2, [fp, #12]
   26c34:	e5c37000 	strb	r7, [r3]
   26c38:	9a00000b 	bls	26c6c <CString::FormatV(char const*, std::__va_list)+0x744>
   26c3c:	e2441001 	sub	r1, r4, #1
   26c40:	e1a0000b 	mov	r0, fp
   26c44:	e2444002 	sub	r4, r4, #2
   26c48:	ebfffcc5 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26c4c:	e3a01020 	mov	r1, #32
   26c50:	e59b300c 	ldr	r3, [fp, #12]
   26c54:	e2444001 	sub	r4, r4, #1
   26c58:	e3740001 	cmn	r4, #1
   26c5c:	e2832001 	add	r2, r3, #1
   26c60:	e58b200c 	str	r2, [fp, #12]
   26c64:	e5c31000 	strb	r1, [r3]
   26c68:	1afffff8 	bne	26c50 <CString::FormatV(char const*, std::__va_list)+0x728>
   26c6c:	e58d6000 	str	r6, [sp]
   26c70:	eafffedf 	b	267f4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   26c74:	e59d1008 	ldr	r1, [sp, #8]
   26c78:	e1a0000b 	mov	r0, fp
   26c7c:	ebfffd48 	bl	261a4 <CString::PutString(char const*)>
   26c80:	e1560004 	cmp	r6, r4
   26c84:	2afffeda 	bcs	267f4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   26c88:	e0444006 	sub	r4, r4, r6
   26c8c:	e1a0000b 	mov	r0, fp
   26c90:	e1a01004 	mov	r1, r4
   26c94:	ebfffcb2 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26c98:	e2443001 	sub	r3, r4, #1
   26c9c:	e3a00020 	mov	r0, #32
   26ca0:	e59b200c 	ldr	r2, [fp, #12]
   26ca4:	e2433001 	sub	r3, r3, #1
   26ca8:	e3730001 	cmn	r3, #1
   26cac:	e2821001 	add	r1, r2, #1
   26cb0:	e58b100c 	str	r1, [fp, #12]
   26cb4:	e5c20000 	strb	r0, [r2]
   26cb8:	1afffff8 	bne	26ca0 <CString::FormatV(char const*, std::__va_list)+0x778>
   26cbc:	eafffecc 	b	267f4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   26cc0:	e1a01008 	mov	r1, r8
   26cc4:	e1a0000b 	mov	r0, fp
   26cc8:	ebfffd35 	bl	261a4 <CString::PutString(char const*)>
   26ccc:	e1570004 	cmp	r7, r4
   26cd0:	2affffe5 	bcs	26c6c <CString::FormatV(char const*, std::__va_list)+0x744>
   26cd4:	e0444007 	sub	r4, r4, r7
   26cd8:	e1a0000b 	mov	r0, fp
   26cdc:	e1a01004 	mov	r1, r4
   26ce0:	ebfffc9f 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26ce4:	e2443001 	sub	r3, r4, #1
   26ce8:	e3a00020 	mov	r0, #32
   26cec:	e59b200c 	ldr	r2, [fp, #12]
   26cf0:	e2433001 	sub	r3, r3, #1
   26cf4:	e3730001 	cmn	r3, #1
   26cf8:	e2821001 	add	r1, r2, #1
   26cfc:	e58b100c 	str	r1, [fp, #12]
   26d00:	e5c20000 	strb	r0, [r2]
   26d04:	1afffff8 	bne	26cec <CString::FormatV(char const*, std::__va_list)+0x7c4>
   26d08:	eaffffd7 	b	26c6c <CString::FormatV(char const*, std::__va_list)+0x744>
   26d0c:	e3a01001 	mov	r1, #1
   26d10:	e1a0000b 	mov	r0, fp
   26d14:	ebfffc92 	bl	25f64 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26d18:	e59b300c 	ldr	r3, [fp, #12]
   26d1c:	e3a0202d 	mov	r2, #45	; 0x2d
   26d20:	e2831001 	add	r1, r3, #1
   26d24:	e58b100c 	str	r1, [fp, #12]
   26d28:	e5c32000 	strb	r2, [r3]
   26d2c:	eaffff10 	b	26974 <CString::FormatV(char const*, std::__va_list)+0x44c>
   26d30:	e1a08007 	mov	r8, r7
   26d34:	e3a0a001 	mov	sl, #1
   26d38:	eafffeec 	b	268f0 <CString::FormatV(char const*, std::__va_list)+0x3c8>
   26d3c:	e1a09006 	mov	r9, r6
   26d40:	e3a0a001 	mov	sl, #1
   26d44:	eafffe6a 	b	266f4 <CString::FormatV(char const*, std::__va_list)+0x1cc>

00026d48 <CString::Format(char const*, ...)>:
   26d48:	e92d000e 	push	{r1, r2, r3}
   26d4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   26d50:	e24dd008 	sub	sp, sp, #8
   26d54:	e28d2010 	add	r2, sp, #16
   26d58:	e59d100c 	ldr	r1, [sp, #12]
   26d5c:	e58d2004 	str	r2, [sp, #4]
   26d60:	ebfffdf0 	bl	26528 <CString::FormatV(char const*, std::__va_list)>
   26d64:	e28dd008 	add	sp, sp, #8
   26d68:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   26d6c:	e28dd00c 	add	sp, sp, #12
   26d70:	e12fff1e 	bx	lr
   26d74:	00000000 	andeq	r0, r0, r0

00026d78 <DelayLoop>:
   26d78:	e2500001 	subs	r0, r0, #1
   26d7c:	8afffffd 	bhi	26d78 <DelayLoop>
   26d80:	e1a0f00e 	mov	pc, lr

00026d84 <CExceptionHandler::CExceptionHandler()>:
   26d84:	e92d4070 	push	{r4, r5, r6, lr}
   26d88:	e3025890 	movw	r5, #10384	; 0x2890
   26d8c:	e3405143 	movt	r5, #323	; 0x143
   26d90:	e1a04000 	mov	r4, r0
   26d94:	e5953000 	ldr	r3, [r5]
   26d98:	e3530000 	cmp	r3, #0
   26d9c:	0a000005 	beq	26db8 <CExceptionHandler::CExceptionHandler()+0x34>
   26da0:	e3001e24 	movw	r1, #3620	; 0xe24
   26da4:	e30f05a4 	movw	r0, #62884	; 0xf5a4
   26da8:	e3401003 	movt	r1, #3
   26dac:	e3400002 	movt	r0, #2
   26db0:	e3a0202e 	mov	r2, #46	; 0x2e
   26db4:	ebfff778 	bl	24b9c <assertion_failed>
   26db8:	e59f1048 	ldr	r1, [pc, #72]	; 26e08 <CExceptionHandler::CExceptionHandler()+0x84>
   26dbc:	e3a00000 	mov	r0, #0
   26dc0:	e59f2044 	ldr	r2, [pc, #68]	; 26e0c <CExceptionHandler::CExceptionHandler()+0x88>
   26dc4:	e59f3044 	ldr	r3, [pc, #68]	; 26e10 <CExceptionHandler::CExceptionHandler()+0x8c>
   26dc8:	e1a01141 	asr	r1, r1, #2
   26dcc:	e5854000 	str	r4, [r5]
   26dd0:	e1a02142 	asr	r2, r2, #2
   26dd4:	e2411002 	sub	r1, r1, #2
   26dd8:	e1a03143 	asr	r3, r3, #2
   26ddc:	e2422002 	sub	r2, r2, #2
   26de0:	e2433002 	sub	r3, r3, #2
   26de4:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   26de8:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   26dec:	e5801004 	str	r1, [r0, #4]
   26df0:	e580200c 	str	r2, [r0, #12]
   26df4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   26df8:	e5803010 	str	r3, [r0, #16]
   26dfc:	ebffeca8 	bl	220a4 <SyncDataAndInstructionCache>
   26e00:	e1a00004 	mov	r0, r4
   26e04:	e8bd8070 	pop	{r4, r5, r6, pc}
   26e08:	00026fd8 	.word	0x00026fd8
   26e0c:	00027010 	.word	0x00027010
   26e10:	0002704c 	.word	0x0002704c

00026e14 <CExceptionHandler::~CExceptionHandler()>:
   26e14:	e3023890 	movw	r3, #10384	; 0x2890
   26e18:	e3403143 	movt	r3, #323	; 0x143
   26e1c:	e3a02000 	mov	r2, #0
   26e20:	e5832000 	str	r2, [r3]
   26e24:	e12fff1e 	bx	lr

00026e28 <CExceptionHandler::Throw(unsigned int)>:
   26e28:	e92d4010 	push	{r4, lr}
   26e2c:	e24dd008 	sub	sp, sp, #8
   26e30:	e1a04001 	mov	r4, r1
   26e34:	ebfff8dd 	bl	251b0 <CLogger::Get()>
   26e38:	e3012b94 	movw	r2, #7060	; 0x1b94
   26e3c:	e3402003 	movt	r2, #3
   26e40:	e3003e3c 	movw	r3, #3644	; 0xe3c
   26e44:	e3001e1c 	movw	r1, #3612	; 0xe1c
   26e48:	e792c104 	ldr	ip, [r2, r4, lsl #2]
   26e4c:	e3403003 	movt	r3, #3
   26e50:	e3401003 	movt	r1, #3
   26e54:	e3a02000 	mov	r2, #0
   26e58:	e58dc000 	str	ip, [sp]
   26e5c:	ebfff9af 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26e60:	e28dd008 	add	sp, sp, #8
   26e64:	e8bd8010 	pop	{r4, pc}

00026e68 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   26e68:	e3510002 	cmp	r1, #2
   26e6c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   26e70:	e1a05001 	mov	r5, r1
   26e74:	e24dd024 	sub	sp, sp, #36	; 0x24
   26e78:	e1a04002 	mov	r4, r2
   26e7c:	0a000027 	beq	26f20 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb8>
   26e80:	e3510003 	cmp	r1, #3
   26e84:	0a000022 	beq	26f14 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
   26e88:	e3a07000 	mov	r7, #0
   26e8c:	e1a08007 	mov	r8, r7
   26e90:	e3540000 	cmp	r4, #0
   26e94:	0a000024 	beq	26f2c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   26e98:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   26e9c:	e3001e1c 	movw	r1, #3612	; 0xe1c
   26ea0:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
   26ea4:	e3401003 	movt	r1, #3
   26ea8:	e203301f 	and	r3, r3, #31
   26eac:	e5949040 	ldr	r9, [r4, #64]	; 0x40
   26eb0:	e3530012 	cmp	r3, #18
   26eb4:	08940240 	ldmeq	r4, {r6, r9}
   26eb8:	e1a00006 	mov	r0, r6
   26ebc:	ebfff7c9 	bl	24de8 <debug_stacktrace(unsigned int const*, char const*)>
   26ec0:	ebfff8ba 	bl	251b0 <CLogger::Get()>
   26ec4:	e3013b94 	movw	r3, #7060	; 0x1b94
   26ec8:	e3403003 	movt	r3, #3
   26ecc:	e594e044 	ldr	lr, [r4, #68]	; 0x44
   26ed0:	e594c048 	ldr	ip, [r4, #72]	; 0x48
   26ed4:	e3a02000 	mov	r2, #0
   26ed8:	e7934105 	ldr	r4, [r3, r5, lsl #2]
   26edc:	e3001e1c 	movw	r1, #3612	; 0xe1c
   26ee0:	e58d9014 	str	r9, [sp, #20]
   26ee4:	e3401003 	movt	r1, #3
   26ee8:	e58d6010 	str	r6, [sp, #16]
   26eec:	e3003e58 	movw	r3, #3672	; 0xe58
   26ef0:	e58d700c 	str	r7, [sp, #12]
   26ef4:	e3403003 	movt	r3, #3
   26ef8:	e58d8008 	str	r8, [sp, #8]
   26efc:	e58d4000 	str	r4, [sp]
   26f00:	e58de018 	str	lr, [sp, #24]
   26f04:	e58dc004 	str	ip, [sp, #4]
   26f08:	ebfff984 	bl	25520 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26f0c:	e28dd024 	add	sp, sp, #36	; 0x24
   26f10:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   26f14:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
   26f18:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   26f1c:	eaffffdb 	b	26e90 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   26f20:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
   26f24:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   26f28:	eaffffd8 	b	26e90 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   26f2c:	e3001e24 	movw	r1, #3620	; 0xe24
   26f30:	e3000e4c 	movw	r0, #3660	; 0xe4c
   26f34:	e3401003 	movt	r1, #3
   26f38:	e3400003 	movt	r0, #3
   26f3c:	e3a02067 	mov	r2, #103	; 0x67
   26f40:	ebfff715 	bl	24b9c <assertion_failed>
   26f44:	eaffffd3 	b	26e98 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>

00026f48 <CExceptionHandler::Get()>:
   26f48:	e92d4010 	push	{r4, lr}
   26f4c:	e3024890 	movw	r4, #10384	; 0x2890
   26f50:	e3404143 	movt	r4, #323	; 0x143
   26f54:	e5940000 	ldr	r0, [r4]
   26f58:	e3500000 	cmp	r0, #0
   26f5c:	18bd8010 	popne	{r4, pc}
   26f60:	e3a0207e 	mov	r2, #126	; 0x7e
   26f64:	e3001e24 	movw	r1, #3620	; 0xe24
   26f68:	e30a045c 	movw	r0, #42076	; 0xa45c
   26f6c:	e3401003 	movt	r1, #3
   26f70:	e3400002 	movt	r0, #2
   26f74:	ebfff708 	bl	24b9c <assertion_failed>
   26f78:	e5940000 	ldr	r0, [r4]
   26f7c:	e8bd8010 	pop	{r4, pc}

00026f80 <ExceptionHandler>:
   26f80:	e92d4070 	push	{r4, r5, r6, lr}
   26f84:	e3024890 	movw	r4, #10384	; 0x2890
   26f88:	e3404143 	movt	r4, #323	; 0x143
   26f8c:	e1a05000 	mov	r5, r0
   26f90:	e1a06001 	mov	r6, r1
   26f94:	e5940000 	ldr	r0, [r4]
   26f98:	e3500000 	cmp	r0, #0
   26f9c:	0a000003 	beq	26fb0 <ExceptionHandler+0x30>
   26fa0:	e1a02006 	mov	r2, r6
   26fa4:	e1a01005 	mov	r1, r5
   26fa8:	e8bd4070 	pop	{r4, r5, r6, lr}
   26fac:	eaffffad 	b	26e68 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   26fb0:	e3a0207e 	mov	r2, #126	; 0x7e
   26fb4:	e3001e24 	movw	r1, #3620	; 0xe24
   26fb8:	e30a045c 	movw	r0, #42076	; 0xa45c
   26fbc:	e3401003 	movt	r1, #3
   26fc0:	e3400002 	movt	r0, #2
   26fc4:	ebfff6f4 	bl	24b9c <assertion_failed>
   26fc8:	e5940000 	ldr	r0, [r4]
   26fcc:	e1a02006 	mov	r2, r6
   26fd0:	e1a01005 	mov	r1, r5
   26fd4:	e8bd4070 	pop	{r4, r5, r6, lr}
   26fd8:	eaffffa2 	b	26e68 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

00026fdc <UndefinedInstructionStub>:
   26fdc:	e24ee004 	sub	lr, lr, #4
   26fe0:	e92d4000 	stmfd	sp!, {lr}
   26fe4:	e14fe000 	mrs	lr, SPSR
   26fe8:	e92d4000 	stmfd	sp!, {lr}
   26fec:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   26ff0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   26ff4:	e1a0100d 	mov	r1, sp
   26ff8:	f1020012 	cps	#18
   26ffc:	e1a0200d 	mov	r2, sp
   27000:	e1a0300e 	mov	r3, lr
   27004:	f102001f 	cps	#31
   27008:	e1a0d001 	mov	sp, r1
   2700c:	e92d000c 	push	{r2, r3}
   27010:	e1a0100d 	mov	r1, sp
   27014:	e3a00001 	mov	r0, #1
   27018:	eaffffd8 	b	26f80 <ExceptionHandler>

0002701c <PrefetchAbortStub>:
   2701c:	e24ee004 	sub	lr, lr, #4
   27020:	e92d4000 	stmfd	sp!, {lr}
   27024:	e14fe000 	mrs	lr, SPSR
   27028:	e92d4000 	stmfd	sp!, {lr}
   2702c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   27030:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   27034:	e1a0100d 	mov	r1, sp
   27038:	f1020012 	cps	#18
   2703c:	e1a0200d 	mov	r2, sp
   27040:	e1a0300e 	mov	r3, lr
   27044:	f102001f 	cps	#31
   27048:	e1a0d001 	mov	sp, r1
   2704c:	e92d000c 	push	{r2, r3}
   27050:	e1a0100d 	mov	r1, sp
   27054:	e3a00002 	mov	r0, #2
   27058:	eaffffc8 	b	26f80 <ExceptionHandler>

0002705c <DataAbortStub>:
   2705c:	e24ee008 	sub	lr, lr, #8
   27060:	e92d4000 	stmfd	sp!, {lr}
   27064:	e14fe000 	mrs	lr, SPSR
   27068:	e92d4000 	stmfd	sp!, {lr}
   2706c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   27070:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   27074:	e1a0100d 	mov	r1, sp
   27078:	f1020012 	cps	#18
   2707c:	e1a0200d 	mov	r2, sp
   27080:	e1a0300e 	mov	r3, lr
   27084:	f102001f 	cps	#31
   27088:	e1a0d001 	mov	sp, r1
   2708c:	e92d000c 	push	{r2, r3}
   27090:	e1a0100d 	mov	r1, sp
   27094:	e3a00003 	mov	r0, #3
   27098:	eaffffb8 	b	26f80 <ExceptionHandler>

0002709c <IRQStub>:
   2709c:	e24ee004 	sub	lr, lr, #4
   270a0:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   270a4:	eb00015e 	bl	27624 <InterruptHandler>
   270a8:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

000270ac <FIQStub>:
   270ac:	e24ee004 	sub	lr, lr, #4
   270b0:	e92d400f 	push	{r0, r1, r2, r3, lr}
   270b4:	e59f2024 	ldr	r2, [pc, #36]	; 270e0 <FIQStub+0x34>
   270b8:	e5921000 	ldr	r1, [r2]
   270bc:	e3510000 	cmp	r1, #0
   270c0:	0a000002 	beq	270d0 <FIQStub+0x24>
   270c4:	e5920004 	ldr	r0, [r2, #4]
   270c8:	e12fff31 	blx	r1
   270cc:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
   270d0:	e59f100c 	ldr	r1, [pc, #12]	; 270e4 <FIQStub+0x38>
   270d4:	e3a00000 	mov	r0, #0
   270d8:	e5810000 	str	r0, [r1]
   270dc:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
   270e0:	00031ba4 	.word	0x00031ba4
   270e4:	3f00b20c 	.word	0x3f00b20c

000270e8 <CInterruptSystem::CInterruptSystem()>:
   270e8:	e2802f47 	add	r2, r0, #284	; 0x11c
   270ec:	e1a0c000 	mov	ip, r0
   270f0:	e2403004 	sub	r3, r0, #4
   270f4:	e3a01000 	mov	r1, #0
   270f8:	e1a00002 	mov	r0, r2
   270fc:	e5a31004 	str	r1, [r3, #4]!
   27100:	e5a21004 	str	r1, [r2, #4]!
   27104:	e1530000 	cmp	r3, r0
   27108:	1afffffb 	bne	270fc <CInterruptSystem::CInterruptSystem()+0x14>
   2710c:	e3023894 	movw	r3, #10388	; 0x2894
   27110:	e3403143 	movt	r3, #323	; 0x143
   27114:	e1a0000c 	mov	r0, ip
   27118:	e583c000 	str	ip, [r3]
   2711c:	e12fff1e 	bx	lr

00027120 <CInterruptSystem::~CInterruptSystem()>:
   27120:	e3023894 	movw	r3, #10388	; 0x2894
   27124:	e3403143 	movt	r3, #323	; 0x143
   27128:	e3a02000 	mov	r2, #0
   2712c:	e5832000 	str	r2, [r3]
   27130:	e12fff1e 	bx	lr

00027134 <CInterruptSystem::Initialize()>:
   27134:	e59f2054 	ldr	r2, [pc, #84]	; 27190 <CInterruptSystem::Initialize()+0x5c>
   27138:	e59f3054 	ldr	r3, [pc, #84]	; 27194 <CInterruptSystem::Initialize()+0x60>
   2713c:	e92d4010 	push	{r4, lr}
   27140:	e3a04000 	mov	r4, #0
   27144:	e1a02142 	asr	r2, r2, #2
   27148:	e1a03143 	asr	r3, r3, #2
   2714c:	e2422002 	sub	r2, r2, #2
   27150:	e2433002 	sub	r3, r3, #2
   27154:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   27158:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2715c:	e5842018 	str	r2, [r4, #24]
   27160:	e584301c 	str	r3, [r4, #28]
   27164:	ebffebce 	bl	220a4 <SyncDataAndInstructionCache>
   27168:	e3a03a0b 	mov	r3, #45056	; 0xb000
   2716c:	e3433f00 	movt	r3, #16128	; 0x3f00
   27170:	e3e02000 	mvn	r2, #0
   27174:	e583420c 	str	r4, [r3, #524]	; 0x20c
   27178:	e583221c 	str	r2, [r3, #540]	; 0x21c
   2717c:	e5832220 	str	r2, [r3, #544]	; 0x220
   27180:	e5832224 	str	r2, [r3, #548]	; 0x224
   27184:	f1080080 	cpsie	i
   27188:	e3a00001 	mov	r0, #1
   2718c:	e8bd8010 	pop	{r4, pc}
   27190:	00027084 	.word	0x00027084
   27194:	00027090 	.word	0x00027090

00027198 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   27198:	e3510047 	cmp	r1, #71	; 0x47
   2719c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   271a0:	e1a04001 	mov	r4, r1
   271a4:	e1a06002 	mov	r6, r2
   271a8:	e1a07003 	mov	r7, r3
   271ac:	8a00001a 	bhi	2721c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x84>
   271b0:	e3560000 	cmp	r6, #0
   271b4:	0a00001f 	beq	27238 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
   271b8:	e3015ba4 	movw	r5, #7076	; 0x1ba4
   271bc:	e3405003 	movt	r5, #3
   271c0:	e5953000 	ldr	r3, [r5]
   271c4:	e3530000 	cmp	r3, #0
   271c8:	0a000005 	beq	271e4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>
   271cc:	e3001ee0 	movw	r1, #3808	; 0xee0
   271d0:	e3401003 	movt	r1, #3
   271d4:	e3000f04 	movw	r0, #3844	; 0xf04
   271d8:	e3400003 	movt	r0, #3
   271dc:	e3a0207a 	mov	r2, #122	; 0x7a
   271e0:	ebfff66d 	bl	24b9c <assertion_failed>
   271e4:	e3540047 	cmp	r4, #71	; 0x47
   271e8:	e88500c0 	stm	r5, {r6, r7}
   271ec:	9a000005 	bls	27208 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x70>
   271f0:	e3001ee0 	movw	r1, #3808	; 0xee0
   271f4:	e3401003 	movt	r1, #3
   271f8:	e3000ef0 	movw	r0, #3824	; 0xef0
   271fc:	e3400003 	movt	r0, #3
   27200:	e3a020a6 	mov	r2, #166	; 0xa6
   27204:	ebfff664 	bl	24b9c <assertion_failed>
   27208:	e3a03a0b 	mov	r3, #45056	; 0xb000
   2720c:	e3433f00 	movt	r3, #16128	; 0x3f00
   27210:	e3844080 	orr	r4, r4, #128	; 0x80
   27214:	e583420c 	str	r4, [r3, #524]	; 0x20c
   27218:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2721c:	e3001ee0 	movw	r1, #3808	; 0xee0
   27220:	e3401003 	movt	r1, #3
   27224:	e3000ef0 	movw	r0, #3824	; 0xef0
   27228:	e3400003 	movt	r0, #3
   2722c:	e3a02078 	mov	r2, #120	; 0x78
   27230:	ebfff659 	bl	24b9c <assertion_failed>
   27234:	eaffffdd 	b	271b0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
   27238:	e3001ee0 	movw	r1, #3808	; 0xee0
   2723c:	e3401003 	movt	r1, #3
   27240:	e3000f24 	movw	r0, #3876	; 0xf24
   27244:	e3400003 	movt	r0, #3
   27248:	e3a02079 	mov	r2, #121	; 0x79
   2724c:	ebfff652 	bl	24b9c <assertion_failed>
   27250:	eaffffd8 	b	271b8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>

00027254 <CInterruptSystem::DisconnectFIQ()>:
   27254:	e92d4010 	push	{r4, lr}
   27258:	e3014ba4 	movw	r4, #7076	; 0x1ba4
   2725c:	e3404003 	movt	r4, #3
   27260:	e5943000 	ldr	r3, [r4]
   27264:	e3530000 	cmp	r3, #0
   27268:	0a000006 	beq	27288 <CInterruptSystem::DisconnectFIQ()+0x34>
   2726c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   27270:	e3432f00 	movt	r2, #16128	; 0x3f00
   27274:	e3a03000 	mov	r3, #0
   27278:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2727c:	e5843000 	str	r3, [r4]
   27280:	e5843004 	str	r3, [r4, #4]
   27284:	e8bd8010 	pop	{r4, pc}
   27288:	e3001ee0 	movw	r1, #3808	; 0xee0
   2728c:	e3401003 	movt	r1, #3
   27290:	e3000f1c 	movw	r0, #3868	; 0xf1c
   27294:	e3400003 	movt	r0, #3
   27298:	e3a02084 	mov	r2, #132	; 0x84
   2729c:	ebfff63e 	bl	24b9c <assertion_failed>
   272a0:	eafffff1 	b	2726c <CInterruptSystem::DisconnectFIQ()+0x18>

000272a4 <CInterruptSystem::EnableIRQ(unsigned int)>:
   272a4:	e3500047 	cmp	r0, #71	; 0x47
   272a8:	e92d4010 	push	{r4, lr}
   272ac:	e1a04000 	mov	r4, r0
   272b0:	8a00000e 	bhi	272f0 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   272b4:	e350001f 	cmp	r0, #31
   272b8:	930b2210 	movwls	r2, #45584	; 0xb210
   272bc:	93432f00 	movtls	r2, #16128	; 0x3f00
   272c0:	8a000004 	bhi	272d8 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
   272c4:	e204401f 	and	r4, r4, #31
   272c8:	e3a03001 	mov	r3, #1
   272cc:	e1a04413 	lsl	r4, r3, r4
   272d0:	e5824000 	str	r4, [r2]
   272d4:	e8bd8010 	pop	{r4, pc}
   272d8:	e350003f 	cmp	r0, #63	; 0x3f
   272dc:	930b2214 	movwls	r2, #45588	; 0xb214
   272e0:	93432f00 	movtls	r2, #16128	; 0x3f00
   272e4:	830b2218 	movwhi	r2, #45592	; 0xb218
   272e8:	83432f00 	movthi	r2, #16128	; 0x3f00
   272ec:	eafffff4 	b	272c4 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
   272f0:	e3a02090 	mov	r2, #144	; 0x90
   272f4:	e3001ee0 	movw	r1, #3808	; 0xee0
   272f8:	e3401003 	movt	r1, #3
   272fc:	e3000f34 	movw	r0, #3892	; 0xf34
   27300:	e3400003 	movt	r0, #3
   27304:	ebfff624 	bl	24b9c <assertion_failed>
   27308:	e30b2218 	movw	r2, #45592	; 0xb218
   2730c:	e3432f00 	movt	r2, #16128	; 0x3f00
   27310:	eaffffeb 	b	272c4 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

00027314 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   27314:	e3510047 	cmp	r1, #71	; 0x47
   27318:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2731c:	e1a04001 	mov	r4, r1
   27320:	e1a05000 	mov	r5, r0
   27324:	e1a08002 	mov	r8, r2
   27328:	e1a07003 	mov	r7, r3
   2732c:	8a00000e 	bhi	2736c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   27330:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   27334:	e0856104 	add	r6, r5, r4, lsl #2
   27338:	e3530000 	cmp	r3, #0
   2733c:	0a000005 	beq	27358 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
   27340:	e3001ee0 	movw	r1, #3808	; 0xee0
   27344:	e3401003 	movt	r1, #3
   27348:	e3000f48 	movw	r0, #3912	; 0xf48
   2734c:	e3400003 	movt	r0, #3
   27350:	e3a02060 	mov	r2, #96	; 0x60
   27354:	ebfff610 	bl	24b9c <assertion_failed>
   27358:	e7858104 	str	r8, [r5, r4, lsl #2]
   2735c:	e1a00004 	mov	r0, r4
   27360:	e5867120 	str	r7, [r6, #288]	; 0x120
   27364:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   27368:	eaffffcd 	b	272a4 <CInterruptSystem::EnableIRQ(unsigned int)>
   2736c:	e3001ee0 	movw	r1, #3808	; 0xee0
   27370:	e3401003 	movt	r1, #3
   27374:	e3000f34 	movw	r0, #3892	; 0xf34
   27378:	e3400003 	movt	r0, #3
   2737c:	e3a0205f 	mov	r2, #95	; 0x5f
   27380:	ebfff605 	bl	24b9c <assertion_failed>
   27384:	eaffffe9 	b	27330 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

00027388 <CInterruptSystem::DisableIRQ(unsigned int)>:
   27388:	e3500047 	cmp	r0, #71	; 0x47
   2738c:	e92d4010 	push	{r4, lr}
   27390:	e1a04000 	mov	r4, r0
   27394:	8a00000e 	bhi	273d4 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   27398:	e350001f 	cmp	r0, #31
   2739c:	930b221c 	movwls	r2, #45596	; 0xb21c
   273a0:	93432f00 	movtls	r2, #16128	; 0x3f00
   273a4:	8a000004 	bhi	273bc <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
   273a8:	e204401f 	and	r4, r4, #31
   273ac:	e3a03001 	mov	r3, #1
   273b0:	e1a04413 	lsl	r4, r3, r4
   273b4:	e5824000 	str	r4, [r2]
   273b8:	e8bd8010 	pop	{r4, pc}
   273bc:	e350003f 	cmp	r0, #63	; 0x3f
   273c0:	930b2220 	movwls	r2, #45600	; 0xb220
   273c4:	93432f00 	movtls	r2, #16128	; 0x3f00
   273c8:	830b2224 	movwhi	r2, #45604	; 0xb224
   273cc:	83432f00 	movthi	r2, #16128	; 0x3f00
   273d0:	eafffff4 	b	273a8 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
   273d4:	e3a0209b 	mov	r2, #155	; 0x9b
   273d8:	e3001ee0 	movw	r1, #3808	; 0xee0
   273dc:	e3401003 	movt	r1, #3
   273e0:	e3000f34 	movw	r0, #3892	; 0xf34
   273e4:	e3400003 	movt	r0, #3
   273e8:	ebfff5eb 	bl	24b9c <assertion_failed>
   273ec:	e30b2224 	movw	r2, #45604	; 0xb224
   273f0:	e3432f00 	movt	r2, #16128	; 0x3f00
   273f4:	eaffffeb 	b	273a8 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

000273f8 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   273f8:	e3510047 	cmp	r1, #71	; 0x47
   273fc:	e92d4070 	push	{r4, r5, r6, lr}
   27400:	e1a04001 	mov	r4, r1
   27404:	e1a05000 	mov	r5, r0
   27408:	8a000009 	bhi	27434 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   2740c:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   27410:	e0856104 	add	r6, r5, r4, lsl #2
   27414:	e3530000 	cmp	r3, #0
   27418:	0a00000f 	beq	2745c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   2741c:	e1a00004 	mov	r0, r4
   27420:	ebffffd8 	bl	27388 <CInterruptSystem::DisableIRQ(unsigned int)>
   27424:	e3a03000 	mov	r3, #0
   27428:	e7853104 	str	r3, [r5, r4, lsl #2]
   2742c:	e5863120 	str	r3, [r6, #288]	; 0x120
   27430:	e8bd8070 	pop	{r4, r5, r6, pc}
   27434:	e3001ee0 	movw	r1, #3808	; 0xee0
   27438:	e3401003 	movt	r1, #3
   2743c:	e3000f34 	movw	r0, #3892	; 0xf34
   27440:	e3400003 	movt	r0, #3
   27444:	e3a0206a 	mov	r2, #106	; 0x6a
   27448:	e0856104 	add	r6, r5, r4, lsl #2
   2744c:	ebfff5d2 	bl	24b9c <assertion_failed>
   27450:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   27454:	e3530000 	cmp	r3, #0
   27458:	1affffef 	bne	2741c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   2745c:	e3001ee0 	movw	r1, #3808	; 0xee0
   27460:	e3401003 	movt	r1, #3
   27464:	e3000f64 	movw	r0, #3940	; 0xf64
   27468:	e3400003 	movt	r0, #3
   2746c:	e3a0206b 	mov	r2, #107	; 0x6b
   27470:	ebfff5c9 	bl	24b9c <assertion_failed>
   27474:	eaffffe8 	b	2741c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

00027478 <CInterruptSystem::EnableFIQ(unsigned int)>:
   27478:	e3500047 	cmp	r0, #71	; 0x47
   2747c:	e92d4010 	push	{r4, lr}
   27480:	e1a04000 	mov	r4, r0
   27484:	9a000005 	bls	274a0 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
   27488:	e3001ee0 	movw	r1, #3808	; 0xee0
   2748c:	e3401003 	movt	r1, #3
   27490:	e3000ef0 	movw	r0, #3824	; 0xef0
   27494:	e3400003 	movt	r0, #3
   27498:	e3a020a6 	mov	r2, #166	; 0xa6
   2749c:	ebfff5be 	bl	24b9c <assertion_failed>
   274a0:	e3a03a0b 	mov	r3, #45056	; 0xb000
   274a4:	e3433f00 	movt	r3, #16128	; 0x3f00
   274a8:	e3844080 	orr	r4, r4, #128	; 0x80
   274ac:	e583420c 	str	r4, [r3, #524]	; 0x20c
   274b0:	e8bd8010 	pop	{r4, pc}

000274b4 <CInterruptSystem::DisableFIQ()>:
   274b4:	e3a03a0b 	mov	r3, #45056	; 0xb000
   274b8:	e3433f00 	movt	r3, #16128	; 0x3f00
   274bc:	e3a02000 	mov	r2, #0
   274c0:	e583220c 	str	r2, [r3, #524]	; 0x20c
   274c4:	e12fff1e 	bx	lr

000274c8 <CInterruptSystem::Get()>:
   274c8:	e92d4010 	push	{r4, lr}
   274cc:	e3024894 	movw	r4, #10388	; 0x2894
   274d0:	e3404143 	movt	r4, #323	; 0x143
   274d4:	e5940000 	ldr	r0, [r4]
   274d8:	e3500000 	cmp	r0, #0
   274dc:	18bd8010 	popne	{r4, pc}
   274e0:	e3a020b8 	mov	r2, #184	; 0xb8
   274e4:	e3001ee0 	movw	r1, #3808	; 0xee0
   274e8:	e3401003 	movt	r1, #3
   274ec:	e30a045c 	movw	r0, #42076	; 0xa45c
   274f0:	e3400002 	movt	r0, #2
   274f4:	ebfff5a8 	bl	24b9c <assertion_failed>
   274f8:	e5940000 	ldr	r0, [r4]
   274fc:	e8bd8010 	pop	{r4, pc}

00027500 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   27500:	e3510047 	cmp	r1, #71	; 0x47
   27504:	e92d4070 	push	{r4, r5, r6, lr}
   27508:	e1a06001 	mov	r6, r1
   2750c:	e1a05000 	mov	r5, r0
   27510:	8a000007 	bhi	27534 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
   27514:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   27518:	e0855106 	add	r5, r5, r6, lsl #2
   2751c:	e3540000 	cmp	r4, #0
   27520:	0a00000d 	beq	2755c <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
   27524:	e5950120 	ldr	r0, [r5, #288]	; 0x120
   27528:	e12fff34 	blx	r4
   2752c:	e3a00001 	mov	r0, #1
   27530:	e8bd8070 	pop	{r4, r5, r6, pc}
   27534:	e3001ee0 	movw	r1, #3808	; 0xee0
   27538:	e3401003 	movt	r1, #3
   2753c:	e3000f34 	movw	r0, #3892	; 0xf34
   27540:	e3400003 	movt	r0, #3
   27544:	e3a020be 	mov	r2, #190	; 0xbe
   27548:	ebfff593 	bl	24b9c <assertion_failed>
   2754c:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   27550:	e0855106 	add	r5, r5, r6, lsl #2
   27554:	e3540000 	cmp	r4, #0
   27558:	1afffff1 	bne	27524 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
   2755c:	e1a00006 	mov	r0, r6
   27560:	ebffff88 	bl	27388 <CInterruptSystem::DisableIRQ(unsigned int)>
   27564:	e1a00004 	mov	r0, r4
   27568:	e8bd8070 	pop	{r4, r5, r6, pc}

0002756c <CInterruptSystem::InterruptHandler()>:
   2756c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27570:	e3026894 	movw	r6, #10388	; 0x2894
   27574:	e3406143 	movt	r6, #323	; 0x143
   27578:	e24dd010 	sub	sp, sp, #16
   2757c:	e5963000 	ldr	r3, [r6]
   27580:	e3530000 	cmp	r3, #0
   27584:	0a00001f 	beq	27608 <CInterruptSystem::InterruptHandler()+0x9c>
   27588:	e3a03a0b 	mov	r3, #45056	; 0xb000
   2758c:	e3433f00 	movt	r3, #16128	; 0x3f00
   27590:	e28d8008 	add	r8, sp, #8
   27594:	e3a07000 	mov	r7, #0
   27598:	e5934204 	ldr	r4, [r3, #516]	; 0x204
   2759c:	e58d4004 	str	r4, [sp, #4]
   275a0:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   275a4:	e58d2008 	str	r2, [sp, #8]
   275a8:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   275ac:	e6ef3073 	uxtb	r3, r3
   275b0:	e58d300c 	str	r3, [sp, #12]
   275b4:	e3540000 	cmp	r4, #0
   275b8:	0a00000d 	beq	275f4 <CInterruptSystem::InterruptHandler()+0x88>
   275bc:	e1a05007 	mov	r5, r7
   275c0:	ea000002 	b	275d0 <CInterruptSystem::InterruptHandler()+0x64>
   275c4:	e1b040a4 	lsrs	r4, r4, #1
   275c8:	e2855001 	add	r5, r5, #1
   275cc:	0a000008 	beq	275f4 <CInterruptSystem::InterruptHandler()+0x88>
   275d0:	e3140001 	tst	r4, #1
   275d4:	0afffffa 	beq	275c4 <CInterruptSystem::InterruptHandler()+0x58>
   275d8:	e1a01005 	mov	r1, r5
   275dc:	e5960000 	ldr	r0, [r6]
   275e0:	ebffffc6 	bl	27500 <CInterruptSystem::CallIRQHandler(unsigned int)>
   275e4:	e3500000 	cmp	r0, #0
   275e8:	0afffff5 	beq	275c4 <CInterruptSystem::InterruptHandler()+0x58>
   275ec:	e28dd010 	add	sp, sp, #16
   275f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   275f4:	e2877020 	add	r7, r7, #32
   275f8:	e3570060 	cmp	r7, #96	; 0x60
   275fc:	0afffffa 	beq	275ec <CInterruptSystem::InterruptHandler()+0x80>
   27600:	e4984004 	ldr	r4, [r8], #4
   27604:	eaffffea 	b	275b4 <CInterruptSystem::InterruptHandler()+0x48>
   27608:	e3001ee0 	movw	r1, #3808	; 0xee0
   2760c:	e3401003 	movt	r1, #3
   27610:	e30a045c 	movw	r0, #42076	; 0xa45c
   27614:	e3400002 	movt	r0, #2
   27618:	e3a020d1 	mov	r2, #209	; 0xd1
   2761c:	ebfff55e 	bl	24b9c <assertion_failed>
   27620:	eaffffd8 	b	27588 <CInterruptSystem::InterruptHandler()+0x1c>

00027624 <InterruptHandler>:
   27624:	eaffffd0 	b	2756c <CInterruptSystem::InterruptHandler()>

00027628 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   27628:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2762c:	e280c0dc 	add	ip, r0, #220	; 0xdc
   27630:	e3a0e000 	mov	lr, #0
   27634:	e1a03000 	mov	r3, r0
   27638:	e1a0200e 	mov	r2, lr
   2763c:	e5801000 	str	r1, [r0]
   27640:	e5a3e004 	str	lr, [r3, #4]!
   27644:	e5a32004 	str	r2, [r3, #4]!
   27648:	e153000c 	cmp	r3, ip
   2764c:	1afffffc 	bne	27644 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   27650:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00027654 <CGPIOManager::~CGPIOManager()>:
   27654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27658:	e3006f80 	movw	r6, #3968	; 0xf80
   2765c:	e3005f90 	movw	r5, #3984	; 0xf90
   27660:	e2804004 	add	r4, r0, #4
   27664:	e28070dc 	add	r7, r0, #220	; 0xdc
   27668:	e3406003 	movt	r6, #3
   2766c:	e3405003 	movt	r5, #3
   27670:	e1a08000 	mov	r8, r0
   27674:	e5b43004 	ldr	r3, [r4, #4]!
   27678:	e3a0202c 	mov	r2, #44	; 0x2c
   2767c:	e1a01006 	mov	r1, r6
   27680:	e1a00005 	mov	r0, r5
   27684:	e3530000 	cmp	r3, #0
   27688:	0a000000 	beq	27690 <CGPIOManager::~CGPIOManager()+0x3c>
   2768c:	ebfff542 	bl	24b9c <assertion_failed>
   27690:	e1540007 	cmp	r4, r7
   27694:	1afffff6 	bne	27674 <CGPIOManager::~CGPIOManager()+0x20>
   27698:	e5983004 	ldr	r3, [r8, #4]
   2769c:	e3530000 	cmp	r3, #0
   276a0:	0a000004 	beq	276b8 <CGPIOManager::~CGPIOManager()+0x64>
   276a4:	e5980000 	ldr	r0, [r8]
   276a8:	e3500000 	cmp	r0, #0
   276ac:	0a000003 	beq	276c0 <CGPIOManager::~CGPIOManager()+0x6c>
   276b0:	e3a01034 	mov	r1, #52	; 0x34
   276b4:	ebffff4f 	bl	273f8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   276b8:	e1a00008 	mov	r0, r8
   276bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   276c0:	e3001f80 	movw	r1, #3968	; 0xf80
   276c4:	e3000fa4 	movw	r0, #4004	; 0xfa4
   276c8:	e3401003 	movt	r1, #3
   276cc:	e3400003 	movt	r0, #3
   276d0:	e3a02032 	mov	r2, #50	; 0x32
   276d4:	ebfff530 	bl	24b9c <assertion_failed>
   276d8:	e5980000 	ldr	r0, [r8]
   276dc:	eafffff3 	b	276b0 <CGPIOManager::~CGPIOManager()+0x5c>

000276e0 <CGPIOManager::Initialize()>:
   276e0:	e5903004 	ldr	r3, [r0, #4]
   276e4:	e92d4010 	push	{r4, lr}
   276e8:	e3530000 	cmp	r3, #0
   276ec:	e1a04000 	mov	r4, r0
   276f0:	1a00000b 	bne	27724 <CGPIOManager::Initialize()+0x44>
   276f4:	e5940000 	ldr	r0, [r4]
   276f8:	e3500000 	cmp	r0, #0
   276fc:	0a000011 	beq	27748 <CGPIOManager::Initialize()+0x68>
   27700:	e1a03004 	mov	r3, r4
   27704:	e3a01034 	mov	r1, #52	; 0x34
   27708:	e3072984 	movw	r2, #31108	; 0x7984
   2770c:	e3402002 	movt	r2, #2
   27710:	ebfffeff 	bl	27314 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   27714:	e3a03001 	mov	r3, #1
   27718:	e1a00003 	mov	r0, r3
   2771c:	e5843004 	str	r3, [r4, #4]
   27720:	e8bd8010 	pop	{r4, pc}
   27724:	e3001f80 	movw	r1, #3968	; 0xf80
   27728:	e3000fb8 	movw	r0, #4024	; 0xfb8
   2772c:	e3401003 	movt	r1, #3
   27730:	e3400003 	movt	r0, #3
   27734:	e3a0203b 	mov	r2, #59	; 0x3b
   27738:	ebfff517 	bl	24b9c <assertion_failed>
   2773c:	e5940000 	ldr	r0, [r4]
   27740:	e3500000 	cmp	r0, #0
   27744:	1affffed 	bne	27700 <CGPIOManager::Initialize()+0x20>
   27748:	e3001f80 	movw	r1, #3968	; 0xf80
   2774c:	e3000fa4 	movw	r0, #4004	; 0xfa4
   27750:	e3401003 	movt	r1, #3
   27754:	e3400003 	movt	r0, #3
   27758:	e3a0203c 	mov	r2, #60	; 0x3c
   2775c:	ebfff50e 	bl	24b9c <assertion_failed>
   27760:	e5940000 	ldr	r0, [r4]
   27764:	eaffffe5 	b	27700 <CGPIOManager::Initialize()+0x20>

00027768 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   27768:	e5903004 	ldr	r3, [r0, #4]
   2776c:	e92d4070 	push	{r4, r5, r6, lr}
   27770:	e3530000 	cmp	r3, #0
   27774:	e1a04000 	mov	r4, r0
   27778:	e1a05001 	mov	r5, r1
   2777c:	0a000010 	beq	277c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   27780:	e3550000 	cmp	r5, #0
   27784:	0a00001c 	beq	277fc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
   27788:	e5956004 	ldr	r6, [r5, #4]
   2778c:	e3560035 	cmp	r6, #53	; 0x35
   27790:	8a000012 	bhi	277e0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
   27794:	e0844106 	add	r4, r4, r6, lsl #2
   27798:	e5943008 	ldr	r3, [r4, #8]
   2779c:	e3530000 	cmp	r3, #0
   277a0:	0a000005 	beq	277bc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   277a4:	e3001f80 	movw	r1, #3968	; 0xf80
   277a8:	e3000f90 	movw	r0, #3984	; 0xf90
   277ac:	e3401003 	movt	r1, #3
   277b0:	e3400003 	movt	r0, #3
   277b4:	e3a0204b 	mov	r2, #75	; 0x4b
   277b8:	ebfff4f7 	bl	24b9c <assertion_failed>
   277bc:	e5845008 	str	r5, [r4, #8]
   277c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   277c4:	e3001f80 	movw	r1, #3968	; 0xf80
   277c8:	e3000fcc 	movw	r0, #4044	; 0xfcc
   277cc:	e3401003 	movt	r1, #3
   277d0:	e3400003 	movt	r0, #3
   277d4:	e3a02045 	mov	r2, #69	; 0x45
   277d8:	ebfff4ef 	bl	24b9c <assertion_failed>
   277dc:	eaffffe7 	b	27780 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
   277e0:	e3001f80 	movw	r1, #3968	; 0xf80
   277e4:	e30f0a48 	movw	r0, #64072	; 0xfa48
   277e8:	e3401003 	movt	r1, #3
   277ec:	e3400002 	movt	r0, #2
   277f0:	e3a02049 	mov	r2, #73	; 0x49
   277f4:	ebfff4e8 	bl	24b9c <assertion_failed>
   277f8:	eaffffe5 	b	27794 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   277fc:	e3001f80 	movw	r1, #3968	; 0xf80
   27800:	e3000fdc 	movw	r0, #4060	; 0xfdc
   27804:	e3401003 	movt	r1, #3
   27808:	e3400003 	movt	r0, #3
   2780c:	e3a02047 	mov	r2, #71	; 0x47
   27810:	ebfff4e1 	bl	24b9c <assertion_failed>
   27814:	eaffffdb 	b	27788 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

00027818 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   27818:	e5903004 	ldr	r3, [r0, #4]
   2781c:	e92d4070 	push	{r4, r5, r6, lr}
   27820:	e3530000 	cmp	r3, #0
   27824:	e1a04000 	mov	r4, r0
   27828:	e1a05001 	mov	r5, r1
   2782c:	0a00000b 	beq	27860 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   27830:	e3550000 	cmp	r5, #0
   27834:	0a000021 	beq	278c0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
   27838:	e5955004 	ldr	r5, [r5, #4]
   2783c:	e3550035 	cmp	r5, #53	; 0x35
   27840:	8a00000d 	bhi	2787c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
   27844:	e0844105 	add	r4, r4, r5, lsl #2
   27848:	e5943008 	ldr	r3, [r4, #8]
   2784c:	e3530000 	cmp	r3, #0
   27850:	0a000013 	beq	278a4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   27854:	e3a03000 	mov	r3, #0
   27858:	e5843008 	str	r3, [r4, #8]
   2785c:	e8bd8070 	pop	{r4, r5, r6, pc}
   27860:	e3001f80 	movw	r1, #3968	; 0xf80
   27864:	e3000fcc 	movw	r0, #4044	; 0xfcc
   27868:	e3401003 	movt	r1, #3
   2786c:	e3400003 	movt	r0, #3
   27870:	e3a02052 	mov	r2, #82	; 0x52
   27874:	ebfff4c8 	bl	24b9c <assertion_failed>
   27878:	eaffffec 	b	27830 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
   2787c:	e0844105 	add	r4, r4, r5, lsl #2
   27880:	e3001f80 	movw	r1, #3968	; 0xf80
   27884:	e30f0a48 	movw	r0, #64072	; 0xfa48
   27888:	e3401003 	movt	r1, #3
   2788c:	e3400002 	movt	r0, #2
   27890:	e3a02056 	mov	r2, #86	; 0x56
   27894:	ebfff4c0 	bl	24b9c <assertion_failed>
   27898:	e5943008 	ldr	r3, [r4, #8]
   2789c:	e3530000 	cmp	r3, #0
   278a0:	1affffeb 	bne	27854 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   278a4:	e3001f80 	movw	r1, #3968	; 0xf80
   278a8:	e3000fe8 	movw	r0, #4072	; 0xfe8
   278ac:	e3401003 	movt	r1, #3
   278b0:	e3400003 	movt	r0, #3
   278b4:	e3a02058 	mov	r2, #88	; 0x58
   278b8:	ebfff4b7 	bl	24b9c <assertion_failed>
   278bc:	eaffffe4 	b	27854 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   278c0:	e3001f80 	movw	r1, #3968	; 0xf80
   278c4:	e3000fdc 	movw	r0, #4060	; 0xfdc
   278c8:	e3401003 	movt	r1, #3
   278cc:	e3400003 	movt	r0, #3
   278d0:	e3a02054 	mov	r2, #84	; 0x54
   278d4:	ebfff4b0 	bl	24b9c <assertion_failed>
   278d8:	eaffffd6 	b	27838 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

000278dc <CGPIOManager::InterruptHandler()>:
   278dc:	e5903004 	ldr	r3, [r0, #4]
   278e0:	e92d4070 	push	{r4, r5, r6, lr}
   278e4:	e3530000 	cmp	r3, #0
   278e8:	e1a06000 	mov	r6, r0
   278ec:	0a00001a 	beq	2795c <CGPIOManager::InterruptHandler()+0x80>
   278f0:	e3a02000 	mov	r2, #0
   278f4:	e3432f20 	movt	r2, #16160	; 0x3f20
   278f8:	e3a04000 	mov	r4, #0
   278fc:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   27900:	ea000004 	b	27918 <CGPIOManager::InterruptHandler()+0x3c>
   27904:	e2844001 	add	r4, r4, #1
   27908:	e314001f 	tst	r4, #31
   2790c:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   27910:	e3540036 	cmp	r4, #54	; 0x36
   27914:	08bd8070 	popeq	{r4, r5, r6, pc}
   27918:	e3130001 	tst	r3, #1
   2791c:	e1a030a3 	lsr	r3, r3, #1
   27920:	0afffff7 	beq	27904 <CGPIOManager::InterruptHandler()+0x28>
   27924:	e2843002 	add	r3, r4, #2
   27928:	e204501f 	and	r5, r4, #31
   2792c:	e3a02001 	mov	r2, #1
   27930:	e7960103 	ldr	r0, [r6, r3, lsl #2]
   27934:	e1a05512 	lsl	r5, r2, r5
   27938:	e3500000 	cmp	r0, #0
   2793c:	0a00000d 	beq	27978 <CGPIOManager::InterruptHandler()+0x9c>
   27940:	ebffe87f 	bl	21b44 <CGPIOPin::InterruptHandler()>
   27944:	e3a03010 	mov	r3, #16
   27948:	e3403fc8 	movt	r3, #4040	; 0xfc8
   2794c:	e08332a4 	add	r3, r3, r4, lsr #5
   27950:	e1a03103 	lsl	r3, r3, #2
   27954:	e5835000 	str	r5, [r3]
   27958:	e8bd8070 	pop	{r4, r5, r6, pc}
   2795c:	e3001f80 	movw	r1, #3968	; 0xf80
   27960:	e3000fcc 	movw	r0, #4044	; 0xfcc
   27964:	e3401003 	movt	r1, #3
   27968:	e3400003 	movt	r0, #3
   2796c:	e3a0205e 	mov	r2, #94	; 0x5e
   27970:	ebfff489 	bl	24b9c <assertion_failed>
   27974:	eaffffdd 	b	278f0 <CGPIOManager::InterruptHandler()+0x14>
   27978:	e1a00004 	mov	r0, r4
   2797c:	ebffe89c 	bl	21bf4 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   27980:	eaffffef 	b	27944 <CGPIOManager::InterruptHandler()+0x68>

00027984 <CGPIOManager::InterruptStub(void*)>:
   27984:	e92d4010 	push	{r4, lr}
   27988:	e2504000 	subs	r4, r0, #0
   2798c:	0a000002 	beq	2799c <CGPIOManager::InterruptStub(void*)+0x18>
   27990:	e1a00004 	mov	r0, r4
   27994:	e8bd4010 	pop	{r4, lr}
   27998:	eaffffcf 	b	278dc <CGPIOManager::InterruptHandler()>
   2799c:	e3001f80 	movw	r1, #3968	; 0xf80
   279a0:	e30a09f4 	movw	r0, #43508	; 0xa9f4
   279a4:	e3401003 	movt	r1, #3
   279a8:	e3400002 	movt	r0, #2
   279ac:	e3a0208a 	mov	r2, #138	; 0x8a
   279b0:	ebfff479 	bl	24b9c <assertion_failed>
   279b4:	e1a00004 	mov	r0, r4
   279b8:	e8bd4010 	pop	{r4, lr}
   279bc:	eaffffc6 	b	278dc <CGPIOManager::InterruptHandler()>

000279c0 <CPWMSoundDevice::~CPWMSoundDevice()>:
   279c0:	e59f3014 	ldr	r3, [pc, #20]	; 279dc <CPWMSoundDevice::~CPWMSoundDevice()+0x1c>
   279c4:	e92d4010 	push	{r4, lr}
   279c8:	e1a04000 	mov	r4, r0
   279cc:	e5803000 	str	r3, [r0]
   279d0:	eb0002d8 	bl	28538 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>
   279d4:	e1a00004 	mov	r0, r4
   279d8:	e8bd8010 	pop	{r4, pc}
   279dc:	00031004 	.word	0x00031004

000279e0 <CPWMSoundDevice::~CPWMSoundDevice()>:
   279e0:	e59f3020 	ldr	r3, [pc, #32]	; 27a08 <CPWMSoundDevice::~CPWMSoundDevice()+0x28>
   279e4:	e92d4010 	push	{r4, lr}
   279e8:	e1a04000 	mov	r4, r0
   279ec:	e5803000 	str	r3, [r0]
   279f0:	eb0002d0 	bl	28538 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>
   279f4:	e1a00004 	mov	r0, r4
   279f8:	e3a0109c 	mov	r1, #156	; 0x9c
   279fc:	ebffe95e 	bl	21f7c <operator delete(void*, unsigned int)>
   27a00:	e1a00004 	mov	r0, r4
   27a04:	e8bd8010 	pop	{r4, pc}
   27a08:	00031004 	.word	0x00031004

00027a0c <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)>:
   27a0c:	e92d4070 	push	{r4, r5, r6, lr}
   27a10:	e2515000 	subs	r5, r1, #0
   27a14:	e1a04000 	mov	r4, r0
   27a18:	e1a06002 	mov	r6, r2
   27a1c:	0a000069 	beq	27bc8 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x1bc>
   27a20:	e3560000 	cmp	r6, #0
   27a24:	0a000059 	beq	27b90 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x184>
   27a28:	e3160001 	tst	r6, #1
   27a2c:	1a000050 	bne	27b74 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x168>
   27a30:	e5940090 	ldr	r0, [r4, #144]	; 0x90
   27a34:	e3500000 	cmp	r0, #0
   27a38:	08bd8070 	popeq	{r4, r5, r6, pc}
   27a3c:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   27a40:	e3530000 	cmp	r3, #0
   27a44:	0a000066 	beq	27be4 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x1d8>
   27a48:	e5943094 	ldr	r3, [r4, #148]	; 0x94
   27a4c:	e2433001 	sub	r3, r3, #1
   27a50:	e3530001 	cmp	r3, #1
   27a54:	9a000005 	bls	27a70 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x64>
   27a58:	e3011010 	movw	r1, #4112	; 0x1010
   27a5c:	e3010060 	movw	r0, #4192	; 0x1060
   27a60:	e3401003 	movt	r1, #3
   27a64:	e3400003 	movt	r0, #3
   27a68:	e3a0204f 	mov	r2, #79	; 0x4f
   27a6c:	ebfff44a 	bl	24b9c <assertion_failed>
   27a70:	e5943098 	ldr	r3, [r4, #152]	; 0x98
   27a74:	e2433008 	sub	r3, r3, #8
   27a78:	e3d33008 	bics	r3, r3, #8
   27a7c:	1a00004a 	bne	27bac <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x1a0>
   27a80:	e1a020a6 	lsr	r2, r6, #1
   27a84:	e1a0c005 	mov	ip, r5
   27a88:	e3a00000 	mov	r0, #0
   27a8c:	ea000014 	b	27ae4 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0xd8>
   27a90:	e28e6002 	add	r6, lr, #2
   27a94:	e584608c 	str	r6, [r4, #140]	; 0x8c
   27a98:	e5dee001 	ldrb	lr, [lr, #1]
   27a9c:	e351000b 	cmp	r1, #11
   27aa0:	e183340e 	orr	r3, r3, lr, lsl #8
   27aa4:	e2233902 	eor	r3, r3, #32768	; 0x8000
   27aa8:	9a000016 	bls	27b08 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0xfc>
   27aac:	e241100c 	sub	r1, r1, #12
   27ab0:	e1a03133 	lsr	r3, r3, r1
   27ab4:	e7853100 	str	r3, [r5, r0, lsl #2]
   27ab8:	e5941094 	ldr	r1, [r4, #148]	; 0x94
   27abc:	e3510002 	cmp	r1, #2
   27ac0:	0a000016 	beq	27b20 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x114>
   27ac4:	e58c3004 	str	r3, [ip, #4]
   27ac8:	e2800002 	add	r0, r0, #2
   27acc:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   27ad0:	e28cc008 	add	ip, ip, #8
   27ad4:	e2433001 	sub	r3, r3, #1
   27ad8:	e5843090 	str	r3, [r4, #144]	; 0x90
   27adc:	e3530000 	cmp	r3, #0
   27ae0:	0a00001f 	beq	27b64 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x158>
   27ae4:	e1500002 	cmp	r0, r2
   27ae8:	28bd8070 	popcs	{r4, r5, r6, pc}
   27aec:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   27af0:	e594e08c 	ldr	lr, [r4, #140]	; 0x8c
   27af4:	e3510008 	cmp	r1, #8
   27af8:	e28e3001 	add	r3, lr, #1
   27afc:	e584308c 	str	r3, [r4, #140]	; 0x8c
   27b00:	e5de3000 	ldrb	r3, [lr]
   27b04:	8affffe1 	bhi	27a90 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x84>
   27b08:	e261100c 	rsb	r1, r1, #12
   27b0c:	e1a03113 	lsl	r3, r3, r1
   27b10:	e7853100 	str	r3, [r5, r0, lsl #2]
   27b14:	e5941094 	ldr	r1, [r4, #148]	; 0x94
   27b18:	e3510002 	cmp	r1, #2
   27b1c:	1affffe8 	bne	27ac4 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0xb8>
   27b20:	e5941098 	ldr	r1, [r4, #152]	; 0x98
   27b24:	e594e08c 	ldr	lr, [r4, #140]	; 0x8c
   27b28:	e3510008 	cmp	r1, #8
   27b2c:	e28e3001 	add	r3, lr, #1
   27b30:	e584308c 	str	r3, [r4, #140]	; 0x8c
   27b34:	e5de3000 	ldrb	r3, [lr]
   27b38:	9a00000a 	bls	27b68 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x15c>
   27b3c:	e28e6002 	add	r6, lr, #2
   27b40:	e584608c 	str	r6, [r4, #140]	; 0x8c
   27b44:	e5dee001 	ldrb	lr, [lr, #1]
   27b48:	e351000b 	cmp	r1, #11
   27b4c:	e183340e 	orr	r3, r3, lr, lsl #8
   27b50:	e2233902 	eor	r3, r3, #32768	; 0x8000
   27b54:	9a000003 	bls	27b68 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x15c>
   27b58:	e241100c 	sub	r1, r1, #12
   27b5c:	e1a03133 	lsr	r3, r3, r1
   27b60:	eaffffd7 	b	27ac4 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0xb8>
   27b64:	e8bd8070 	pop	{r4, r5, r6, pc}
   27b68:	e261100c 	rsb	r1, r1, #12
   27b6c:	e1a03113 	lsl	r3, r3, r1
   27b70:	eaffffd3 	b	27ac4 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0xb8>
   27b74:	e3011010 	movw	r1, #4112	; 0x1010
   27b78:	e3010034 	movw	r0, #4148	; 0x1034
   27b7c:	e3401003 	movt	r1, #3
   27b80:	e3400003 	movt	r0, #3
   27b84:	e3a02045 	mov	r2, #69	; 0x45
   27b88:	ebfff403 	bl	24b9c <assertion_failed>
   27b8c:	eaffffa7 	b	27a30 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x24>
   27b90:	e3011010 	movw	r1, #4112	; 0x1010
   27b94:	e3010024 	movw	r0, #4132	; 0x1024
   27b98:	e3401003 	movt	r1, #3
   27b9c:	e3400003 	movt	r0, #3
   27ba0:	e3a02044 	mov	r2, #68	; 0x44
   27ba4:	ebfff3fc 	bl	24b9c <assertion_failed>
   27ba8:	eaffffa0 	b	27a30 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x24>
   27bac:	e3011010 	movw	r1, #4112	; 0x1010
   27bb0:	e3010088 	movw	r0, #4232	; 0x1088
   27bb4:	e3401003 	movt	r1, #3
   27bb8:	e3400003 	movt	r0, #3
   27bbc:	e3a02050 	mov	r2, #80	; 0x50
   27bc0:	ebfff3f5 	bl	24b9c <assertion_failed>
   27bc4:	eaffffad 	b	27a80 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x74>
   27bc8:	e3011010 	movw	r1, #4112	; 0x1010
   27bcc:	e30b097c 	movw	r0, #47484	; 0xb97c
   27bd0:	e3401003 	movt	r1, #3
   27bd4:	e3400002 	movt	r0, #2
   27bd8:	e3a02043 	mov	r2, #67	; 0x43
   27bdc:	ebfff3ee 	bl	24b9c <assertion_failed>
   27be0:	eaffff8e 	b	27a20 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x14>
   27be4:	e3011010 	movw	r1, #4112	; 0x1010
   27be8:	e301004c 	movw	r0, #4172	; 0x104c
   27bec:	e3401003 	movt	r1, #3
   27bf0:	e3400003 	movt	r0, #3
   27bf4:	e3a0204e 	mov	r2, #78	; 0x4e
   27bf8:	ebfff3e7 	bl	24b9c <assertion_failed>
   27bfc:	eaffff91 	b	27a48 <CPWMSoundDevice::GetChunk(unsigned int*, unsigned int)+0x3c>

00027c00 <CPWMSoundDevice::CPWMSoundDevice(CInterruptSystem*)>:
   27c00:	e92d4010 	push	{r4, lr}
   27c04:	e3a03b02 	mov	r3, #2048	; 0x800
   27c08:	e30a2c44 	movw	r2, #44100	; 0xac44
   27c0c:	e1a04000 	mov	r4, r0
   27c10:	eb0001e0 	bl	28398 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>
   27c14:	e59f3048 	ldr	r3, [pc, #72]	; 27c64 <CPWMSoundDevice::CPWMSoundDevice(CInterruptSystem*)+0x64>
   27c18:	e3a02000 	mov	r2, #0
   27c1c:	e1a00004 	mov	r0, r4
   27c20:	e584208c 	str	r2, [r4, #140]	; 0x8c
   27c24:	e5843000 	str	r3, [r4]
   27c28:	eb000042 	bl	27d38 <CPWMSoundBaseDevice::GetRange() const>
   27c2c:	e3500a01 	cmp	r0, #4096	; 0x1000
   27c30:	3a000003 	bcc	27c44 <CPWMSoundDevice::CPWMSoundDevice(CInterruptSystem*)+0x44>
   27c34:	e1a00004 	mov	r0, r4
   27c38:	eb00003e 	bl	27d38 <CPWMSoundBaseDevice::GetRange() const>
   27c3c:	e3500a02 	cmp	r0, #8192	; 0x2000
   27c40:	3a000005 	bcc	27c5c <CPWMSoundDevice::CPWMSoundDevice(CInterruptSystem*)+0x5c>
   27c44:	e3011010 	movw	r1, #4112	; 0x1010
   27c48:	e30100b8 	movw	r0, #4280	; 0x10b8
   27c4c:	e3401003 	movt	r1, #3
   27c50:	e3400003 	movt	r0, #3
   27c54:	e3a02020 	mov	r2, #32
   27c58:	ebfff3cf 	bl	24b9c <assertion_failed>
   27c5c:	e1a00004 	mov	r0, r4
   27c60:	e8bd8010 	pop	{r4, pc}
   27c64:	00031004 	.word	0x00031004

00027c68 <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)>:
   27c68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27c6c:	e1a07001 	mov	r7, r1
   27c70:	e1a08002 	mov	r8, r2
   27c74:	e1a06003 	mov	r6, r3
   27c78:	e1a04000 	mov	r4, r0
   27c7c:	e59d5018 	ldr	r5, [sp, #24]
   27c80:	eb000045 	bl	27d9c <CPWMSoundBaseDevice::IsActive() const>
   27c84:	e3500000 	cmp	r0, #0
   27c88:	1a00001a 	bne	27cf8 <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0x90>
   27c8c:	e3570000 	cmp	r7, #0
   27c90:	0a00001f 	beq	27d14 <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0xac>
   27c94:	e2463001 	sub	r3, r6, #1
   27c98:	e3530001 	cmp	r3, #1
   27c9c:	9a000005 	bls	27cb8 <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0x50>
   27ca0:	e3011010 	movw	r1, #4112	; 0x1010
   27ca4:	e301010c 	movw	r0, #4364	; 0x110c
   27ca8:	e3401003 	movt	r1, #3
   27cac:	e3400003 	movt	r0, #3
   27cb0:	e3a0202c 	mov	r2, #44	; 0x2c
   27cb4:	ebfff3b8 	bl	24b9c <assertion_failed>
   27cb8:	e2453008 	sub	r3, r5, #8
   27cbc:	e3d33008 	bics	r3, r3, #8
   27cc0:	0a000005 	beq	27cdc <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0x74>
   27cc4:	e3011010 	movw	r1, #4112	; 0x1010
   27cc8:	e3010130 	movw	r0, #4400	; 0x1130
   27ccc:	e3401003 	movt	r1, #3
   27cd0:	e3400003 	movt	r0, #3
   27cd4:	e3a0202d 	mov	r2, #45	; 0x2d
   27cd8:	ebfff3af 	bl	24b9c <assertion_failed>
   27cdc:	e584708c 	str	r7, [r4, #140]	; 0x8c
   27ce0:	e1a00004 	mov	r0, r4
   27ce4:	e5848090 	str	r8, [r4, #144]	; 0x90
   27ce8:	e5846094 	str	r6, [r4, #148]	; 0x94
   27cec:	e5845098 	str	r5, [r4, #152]	; 0x98
   27cf0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   27cf4:	ea00006c 	b	27eac <CPWMSoundBaseDevice::Start()>
   27cf8:	e3011010 	movw	r1, #4112	; 0x1010
   27cfc:	e30100ec 	movw	r0, #4332	; 0x10ec
   27d00:	e3401003 	movt	r1, #3
   27d04:	e3400003 	movt	r0, #3
   27d08:	e3a02029 	mov	r2, #41	; 0x29
   27d0c:	ebfff3a2 	bl	24b9c <assertion_failed>
   27d10:	eaffffdd 	b	27c8c <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0x24>
   27d14:	e3011010 	movw	r1, #4112	; 0x1010
   27d18:	e30100fc 	movw	r0, #4348	; 0x10fc
   27d1c:	e3401003 	movt	r1, #3
   27d20:	e3400003 	movt	r0, #3
   27d24:	e3a0202b 	mov	r2, #43	; 0x2b
   27d28:	ebfff39b 	bl	24b9c <assertion_failed>
   27d2c:	eaffffd8 	b	27c94 <CPWMSoundDevice::Playback(void*, unsigned int, unsigned int, unsigned int)+0x2c>

00027d30 <CPWMSoundDevice::PlaybackActive() const>:
   27d30:	ea000019 	b	27d9c <CPWMSoundBaseDevice::IsActive() const>

00027d34 <CPWMSoundDevice::CancelPlayback()>:
   27d34:	ea000001 	b	27d40 <CPWMSoundBaseDevice::Cancel()>

00027d38 <CPWMSoundBaseDevice::GetRange() const>:
   27d38:	e590000c 	ldr	r0, [r0, #12]
   27d3c:	e12fff1e 	bx	lr

00027d40 <CPWMSoundBaseDevice::Cancel()>:
   27d40:	e92d4010 	push	{r4, lr}
   27d44:	e1a04000 	mov	r4, r0
   27d48:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   27d4c:	e3500000 	cmp	r0, #0
   27d50:	1a000003 	bne	27d64 <CPWMSoundBaseDevice::Cancel()+0x24>
   27d54:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   27d58:	e3530001 	cmp	r3, #1
   27d5c:	0a000009 	beq	27d88 <CPWMSoundBaseDevice::Cancel()+0x48>
   27d60:	e8bd8010 	pop	{r4, pc}
   27d64:	ebffe88c 	bl	21f9c <EnterCritical>
   27d68:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   27d6c:	e5940088 	ldr	r0, [r4, #136]	; 0x88
   27d70:	e3530001 	cmp	r3, #1
   27d74:	0a000003 	beq	27d88 <CPWMSoundBaseDevice::Cancel()+0x48>
   27d78:	e3500000 	cmp	r0, #0
   27d7c:	08bd8010 	popeq	{r4, pc}
   27d80:	e8bd4010 	pop	{r4, lr}
   27d84:	eaffe8b2 	b	22054 <LeaveCritical>
   27d88:	e3500000 	cmp	r0, #0
   27d8c:	e3a03002 	mov	r3, #2
   27d90:	e5c43068 	strb	r3, [r4, #104]	; 0x68
   27d94:	1afffff9 	bne	27d80 <CPWMSoundBaseDevice::Cancel()+0x40>
   27d98:	e8bd8010 	pop	{r4, pc}

00027d9c <CPWMSoundBaseDevice::IsActive() const>:
   27d9c:	e5d00068 	ldrb	r0, [r0, #104]	; 0x68
   27da0:	e2900000 	adds	r0, r0, #0
   27da4:	13a00001 	movne	r0, #1
   27da8:	e12fff1e 	bx	lr

00027dac <CPWMSoundBaseDevice::GetNextChunk()>:
   27dac:	e5903084 	ldr	r3, [r0, #132]	; 0x84
   27db0:	e92d4070 	push	{r4, r5, r6, lr}
   27db4:	e1a04000 	mov	r4, r0
   27db8:	e0803103 	add	r3, r0, r3, lsl #2
   27dbc:	e593106c 	ldr	r1, [r3, #108]	; 0x6c
   27dc0:	e3510000 	cmp	r1, #0
   27dc4:	0a000024 	beq	27e5c <CPWMSoundBaseDevice::GetNextChunk()+0xb0>
   27dc8:	e5943000 	ldr	r3, [r4]
   27dcc:	e1a00004 	mov	r0, r4
   27dd0:	e5942008 	ldr	r2, [r4, #8]
   27dd4:	e5933008 	ldr	r3, [r3, #8]
   27dd8:	e12fff33 	blx	r3
   27ddc:	e3500000 	cmp	r0, #0
   27de0:	08bd8070 	popeq	{r4, r5, r6, pc}
   27de4:	e1a05100 	lsl	r5, r0, #2
   27de8:	e3750107 	cmn	r5, #-1073741823	; 0xc0000001
   27dec:	8a000013 	bhi	27e40 <CPWMSoundBaseDevice::GetNextChunk()+0x94>
   27df0:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   27df4:	e0842103 	add	r2, r4, r3, lsl #2
   27df8:	e592207c 	ldr	r2, [r2, #124]	; 0x7c
   27dfc:	e3520000 	cmp	r2, #0
   27e00:	0a00001f 	beq	27e84 <CPWMSoundBaseDevice::GetNextChunk()+0xd8>
   27e04:	e0843103 	add	r3, r4, r3, lsl #2
   27e08:	e582500c 	str	r5, [r2, #12]
   27e0c:	e1a01005 	mov	r1, r5
   27e10:	e593006c 	ldr	r0, [r3, #108]	; 0x6c
   27e14:	eb000404 	bl	28e2c <CleanAndInvalidateDataCacheRange>
   27e18:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   27e1c:	e3a01020 	mov	r1, #32
   27e20:	e0843103 	add	r3, r4, r3, lsl #2
   27e24:	e593007c 	ldr	r0, [r3, #124]	; 0x7c
   27e28:	eb0003ff 	bl	28e2c <CleanAndInvalidateDataCacheRange>
   27e2c:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   27e30:	e3a00001 	mov	r0, #1
   27e34:	e0233000 	eor	r3, r3, r0
   27e38:	e5843084 	str	r3, [r4, #132]	; 0x84
   27e3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   27e40:	e3011170 	movw	r1, #4464	; 0x1170
   27e44:	e30101ac 	movw	r0, #4524	; 0x11ac
   27e48:	e3401003 	movt	r1, #3
   27e4c:	e3400003 	movt	r0, #3
   27e50:	e300212a 	movw	r2, #298	; 0x12a
   27e54:	ebfff350 	bl	24b9c <assertion_failed>
   27e58:	eaffffe4 	b	27df0 <CPWMSoundBaseDevice::GetNextChunk()+0x44>
   27e5c:	e3011170 	movw	r1, #4464	; 0x1170
   27e60:	e3010188 	movw	r0, #4488	; 0x1188
   27e64:	e3401003 	movt	r1, #3
   27e68:	e3400003 	movt	r0, #3
   27e6c:	e3002122 	movw	r2, #290	; 0x122
   27e70:	ebfff349 	bl	24b9c <assertion_failed>
   27e74:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   27e78:	e0843103 	add	r3, r4, r3, lsl #2
   27e7c:	e593106c 	ldr	r1, [r3, #108]	; 0x6c
   27e80:	eaffffd0 	b	27dc8 <CPWMSoundBaseDevice::GetNextChunk()+0x1c>
   27e84:	e3a02f4b 	mov	r2, #300	; 0x12c
   27e88:	e3011170 	movw	r1, #4464	; 0x1170
   27e8c:	e30101cc 	movw	r0, #4556	; 0x11cc
   27e90:	e3401003 	movt	r1, #3
   27e94:	e3400003 	movt	r0, #3
   27e98:	ebfff33f 	bl	24b9c <assertion_failed>
   27e9c:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   27ea0:	e0842103 	add	r2, r4, r3, lsl #2
   27ea4:	e592207c 	ldr	r2, [r2, #124]	; 0x7c
   27ea8:	eaffffd5 	b	27e04 <CPWMSoundBaseDevice::GetNextChunk()+0x58>

00027eac <CPWMSoundBaseDevice::Start()>:
   27eac:	e5d03068 	ldrb	r3, [r0, #104]	; 0x68
   27eb0:	e92d4010 	push	{r4, lr}
   27eb4:	e3530000 	cmp	r3, #0
   27eb8:	e1a04000 	mov	r4, r0
   27ebc:	1a00003c 	bne	27fb4 <CPWMSoundBaseDevice::Start()+0x108>
   27ec0:	e3a03000 	mov	r3, #0
   27ec4:	e1a00004 	mov	r0, r4
   27ec8:	e5843084 	str	r3, [r4, #132]	; 0x84
   27ecc:	ebffffb6 	bl	27dac <CPWMSoundBaseDevice::GetNextChunk()>
   27ed0:	e3500000 	cmp	r0, #0
   27ed4:	08bd8010 	popeq	{r4, pc}
   27ed8:	e5943064 	ldr	r3, [r4, #100]	; 0x64
   27edc:	e3a02001 	mov	r2, #1
   27ee0:	e5c42068 	strb	r2, [r4, #104]	; 0x68
   27ee4:	e3530000 	cmp	r3, #0
   27ee8:	1a000009 	bne	27f14 <CPWMSoundBaseDevice::Start()+0x68>
   27eec:	e5940004 	ldr	r0, [r4, #4]
   27ef0:	e3500000 	cmp	r0, #0
   27ef4:	0a00005a 	beq	28064 <CPWMSoundBaseDevice::Start()+0x1b8>
   27ef8:	e1a03004 	mov	r3, r4
   27efc:	e30822ac 	movw	r2, #33452	; 0x82ac
   27f00:	e3a01010 	mov	r1, #16
   27f04:	e3402002 	movt	r2, #2
   27f08:	ebfffd01 	bl	27314 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   27f0c:	e3a03001 	mov	r3, #1
   27f10:	e5843064 	str	r3, [r4, #100]	; 0x64
   27f14:	e3a02903 	mov	r2, #49152	; 0xc000
   27f18:	e3432f20 	movt	r2, #16160	; 0x3f20
   27f1c:	e3003707 	movw	r3, #1799	; 0x707
   27f20:	e3483000 	movt	r3, #32768	; 0x8000
   27f24:	e5823008 	str	r3, [r2, #8]
   27f28:	e3a01a07 	mov	r1, #28672	; 0x7000
   27f2c:	e5923000 	ldr	r3, [r2]
   27f30:	e3431f00 	movt	r1, #16128	; 0x3f00
   27f34:	e3c33b01 	bic	r3, r3, #1024	; 0x400
   27f38:	e3c33004 	bic	r3, r3, #4
   27f3c:	e5823000 	str	r3, [r2]
   27f40:	e5913000 	ldr	r3, [r1]
   27f44:	e3130004 	tst	r3, #4
   27f48:	1a000027 	bne	27fec <CPWMSoundBaseDevice::Start()+0x140>
   27f4c:	e3a03a07 	mov	r3, #28672	; 0x7000
   27f50:	e3433f00 	movt	r3, #16128	; 0x3f00
   27f54:	e5933fe0 	ldr	r3, [r3, #4064]	; 0xfe0
   27f58:	e3130001 	tst	r3, #1
   27f5c:	1a00001b 	bne	27fd0 <CPWMSoundBaseDevice::Start()+0x124>
   27f60:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   27f64:	e3530000 	cmp	r3, #0
   27f68:	0a000035 	beq	28044 <CPWMSoundBaseDevice::Start()+0x198>
   27f6c:	e3a02a07 	mov	r2, #28672	; 0x7000
   27f70:	e3432f00 	movt	r2, #16128	; 0x3f00
   27f74:	e2833103 	add	r3, r3, #-1073741824	; 0xc0000000
   27f78:	e3a01001 	mov	r1, #1
   27f7c:	e5823004 	str	r3, [r2, #4]
   27f80:	e34110f1 	movt	r1, #4337	; 0x10f1
   27f84:	e1a00004 	mov	r0, r4
   27f88:	e5821000 	str	r1, [r2]
   27f8c:	ebffff86 	bl	27dac <CPWMSoundBaseDevice::GetNextChunk()>
   27f90:	e3500000 	cmp	r0, #0
   27f94:	18bd8010 	popne	{r4, pc}
   27f98:	e5940088 	ldr	r0, [r4, #136]	; 0x88
   27f9c:	e3500000 	cmp	r0, #0
   27fa0:	1a000018 	bne	28008 <CPWMSoundBaseDevice::Start()+0x15c>
   27fa4:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   27fa8:	e3530001 	cmp	r3, #1
   27fac:	0a000019 	beq	28018 <CPWMSoundBaseDevice::Start()+0x16c>
   27fb0:	e8bd8010 	pop	{r4, pc}
   27fb4:	e3011170 	movw	r1, #4464	; 0x1170
   27fb8:	e30101f0 	movw	r0, #4592	; 0x11f0
   27fbc:	e3401003 	movt	r1, #3
   27fc0:	e3400003 	movt	r0, #3
   27fc4:	e3a020cb 	mov	r2, #203	; 0xcb
   27fc8:	ebfff2f3 	bl	24b9c <assertion_failed>
   27fcc:	eaffffbb 	b	27ec0 <CPWMSoundBaseDevice::Start()+0x14>
   27fd0:	e3011170 	movw	r1, #4464	; 0x1170
   27fd4:	e3010240 	movw	r0, #4672	; 0x1240
   27fd8:	e3401003 	movt	r1, #3
   27fdc:	e3400003 	movt	r0, #3
   27fe0:	e3a020f0 	mov	r2, #240	; 0xf0
   27fe4:	ebfff2ec 	bl	24b9c <assertion_failed>
   27fe8:	eaffffdc 	b	27f60 <CPWMSoundBaseDevice::Start()+0xb4>
   27fec:	e3011170 	movw	r1, #4464	; 0x1170
   27ff0:	e3010208 	movw	r0, #4616	; 0x1208
   27ff4:	e3401003 	movt	r1, #3
   27ff8:	e3400003 	movt	r0, #3
   27ffc:	e3a020ef 	mov	r2, #239	; 0xef
   28000:	ebfff2e5 	bl	24b9c <assertion_failed>
   28004:	eaffffd0 	b	27f4c <CPWMSoundBaseDevice::Start()+0xa0>
   28008:	ebffe7e3 	bl	21f9c <EnterCritical>
   2800c:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   28010:	e3530001 	cmp	r3, #1
   28014:	1a000005 	bne	28030 <CPWMSoundBaseDevice::Start()+0x184>
   28018:	e3a03a07 	mov	r3, #28672	; 0x7000
   2801c:	e3433f00 	movt	r3, #16128	; 0x3f00
   28020:	e3a01000 	mov	r1, #0
   28024:	e3a02003 	mov	r2, #3
   28028:	e583101c 	str	r1, [r3, #28]
   2802c:	e5c42068 	strb	r2, [r4, #104]	; 0x68
   28030:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   28034:	e3530000 	cmp	r3, #0
   28038:	08bd8010 	popeq	{r4, pc}
   2803c:	e8bd4010 	pop	{r4, lr}
   28040:	eaffe803 	b	22054 <LeaveCritical>
   28044:	e3011170 	movw	r1, #4464	; 0x1170
   28048:	e3010278 	movw	r0, #4728	; 0x1278
   2804c:	e3401003 	movt	r1, #3
   28050:	e3400003 	movt	r0, #3
   28054:	e3a020f2 	mov	r2, #242	; 0xf2
   28058:	ebfff2cf 	bl	24b9c <assertion_failed>
   2805c:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   28060:	eaffffc1 	b	27f6c <CPWMSoundBaseDevice::Start()+0xc0>
   28064:	e3011170 	movw	r1, #4464	; 0x1170
   28068:	e30a0970 	movw	r0, #43376	; 0xa970
   2806c:	e3401003 	movt	r1, #3
   28070:	e3400002 	movt	r0, #2
   28074:	e3a020da 	mov	r2, #218	; 0xda
   28078:	ebfff2c7 	bl	24b9c <assertion_failed>
   2807c:	e5940004 	ldr	r0, [r4, #4]
   28080:	eaffff9c 	b	27ef8 <CPWMSoundBaseDevice::Start()+0x4c>

00028084 <CPWMSoundBaseDevice::RunPWM()>:
   28084:	e3a03000 	mov	r3, #0
   28088:	e3a01002 	mov	r1, #2
   2808c:	e1a02003 	mov	r2, r3
   28090:	e92d4010 	push	{r4, lr}
   28094:	e1a04000 	mov	r4, r0
   28098:	e2800060 	add	r0, r0, #96	; 0x60
   2809c:	eb000858 	bl	2a204 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>
   280a0:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   280a4:	ebffead9 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
   280a8:	e594200c 	ldr	r2, [r4, #12]
   280ac:	e2423c01 	sub	r3, r2, #256	; 0x100
   280b0:	e3530cff 	cmp	r3, #65280	; 0xff00
   280b4:	3a000006 	bcc	280d4 <CPWMSoundBaseDevice::RunPWM()+0x50>
   280b8:	e300213e 	movw	r2, #318	; 0x13e
   280bc:	e3011170 	movw	r1, #4464	; 0x1170
   280c0:	e3010290 	movw	r0, #4752	; 0x1290
   280c4:	e3401003 	movt	r1, #3
   280c8:	e3400003 	movt	r0, #3
   280cc:	ebfff2b2 	bl	24b9c <assertion_failed>
   280d0:	e594200c 	ldr	r2, [r4, #12]
   280d4:	e3a03903 	mov	r3, #49152	; 0xc000
   280d8:	e3433f20 	movt	r3, #16160	; 0x3f20
   280dc:	e3021161 	movw	r1, #8545	; 0x2161
   280e0:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   280e4:	e5832010 	str	r2, [r3, #16]
   280e8:	e594200c 	ldr	r2, [r4, #12]
   280ec:	e8bd4010 	pop	{r4, lr}
   280f0:	e5832020 	str	r2, [r3, #32]
   280f4:	e5831000 	str	r1, [r3]
   280f8:	eaffeac4 	b	22c10 <CTimer::SimpleusDelay(unsigned int)>

000280fc <CPWMSoundBaseDevice::StopPWM()>:
   280fc:	e3a03903 	mov	r3, #49152	; 0xc000
   28100:	e3433f20 	movt	r3, #16160	; 0x3f20
   28104:	e92d4010 	push	{r4, lr}
   28108:	e3a02000 	mov	r2, #0
   2810c:	e1a04000 	mov	r4, r0
   28110:	e5832008 	str	r2, [r3, #8]
   28114:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   28118:	e5832000 	str	r2, [r3]
   2811c:	ebffeabb 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
   28120:	e2840060 	add	r0, r4, #96	; 0x60
   28124:	eb000875 	bl	2a300 <CGPIOClock::Stop()>
   28128:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   2812c:	e8bd4010 	pop	{r4, lr}
   28130:	eaffeab6 	b	22c10 <CTimer::SimpleusDelay(unsigned int)>

00028134 <CPWMSoundBaseDevice::InterruptHandler()>:
   28134:	e5d03068 	ldrb	r3, [r0, #104]	; 0x68
   28138:	e92d4070 	push	{r4, r5, r6, lr}
   2813c:	e3530000 	cmp	r3, #0
   28140:	e1a04000 	mov	r4, r0
   28144:	0a000048 	beq	2826c <CPWMSoundBaseDevice::InterruptHandler()+0x138>
   28148:	e3a03a07 	mov	r3, #28672	; 0x7000
   2814c:	e3433f00 	movt	r3, #16128	; 0x3f00
   28150:	e5933fe0 	ldr	r3, [r3, #4064]	; 0xfe0
   28154:	e3130001 	tst	r3, #1
   28158:	0a00003c 	beq	28250 <CPWMSoundBaseDevice::InterruptHandler()+0x11c>
   2815c:	e3a03a07 	mov	r3, #28672	; 0x7000
   28160:	e3433f00 	movt	r3, #16128	; 0x3f00
   28164:	e3a02001 	mov	r2, #1
   28168:	e5832fe0 	str	r2, [r3, #4064]	; 0xfe0
   2816c:	e5935000 	ldr	r5, [r3]
   28170:	e3150004 	tst	r5, #4
   28174:	0a00002e 	beq	28234 <CPWMSoundBaseDevice::InterruptHandler()+0x100>
   28178:	e3a03a07 	mov	r3, #28672	; 0x7000
   2817c:	e3150c01 	tst	r5, #256	; 0x100
   28180:	e3433f00 	movt	r3, #16128	; 0x3f00
   28184:	e5835000 	str	r5, [r3]
   28188:	1a000026 	bne	28228 <CPWMSoundBaseDevice::InterruptHandler()+0xf4>
   2818c:	e5940088 	ldr	r0, [r4, #136]	; 0x88
   28190:	e3500000 	cmp	r0, #0
   28194:	1a00003b 	bne	28288 <CPWMSoundBaseDevice::InterruptHandler()+0x154>
   28198:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   2819c:	e6ef3073 	uxtb	r3, r3
   281a0:	e3530002 	cmp	r3, #2
   281a4:	0a000012 	beq	281f4 <CPWMSoundBaseDevice::InterruptHandler()+0xc0>
   281a8:	e3530003 	cmp	r3, #3
   281ac:	0a00003b 	beq	282a0 <CPWMSoundBaseDevice::InterruptHandler()+0x16c>
   281b0:	e3530001 	cmp	r3, #1
   281b4:	0a00000a 	beq	281e4 <CPWMSoundBaseDevice::InterruptHandler()+0xb0>
   281b8:	e3011170 	movw	r1, #4464	; 0x1170
   281bc:	e30b0130 	movw	r0, #45360	; 0xb130
   281c0:	e3401003 	movt	r1, #3
   281c4:	e3400002 	movt	r0, #2
   281c8:	e300218f 	movw	r2, #399	; 0x18f
   281cc:	ebfff272 	bl	24b9c <assertion_failed>
   281d0:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   281d4:	e3530000 	cmp	r3, #0
   281d8:	08bd8070 	popeq	{r4, r5, r6, pc}
   281dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   281e0:	eaffe79b 	b	22054 <LeaveCritical>
   281e4:	e1a00004 	mov	r0, r4
   281e8:	ebfffeef 	bl	27dac <CPWMSoundBaseDevice::GetNextChunk()>
   281ec:	e3500000 	cmp	r0, #0
   281f0:	1afffff6 	bne	281d0 <CPWMSoundBaseDevice::InterruptHandler()+0x9c>
   281f4:	e3a03a07 	mov	r3, #28672	; 0x7000
   281f8:	e3a02903 	mov	r2, #49152	; 0xc000
   281fc:	e3433f00 	movt	r3, #16128	; 0x3f00
   28200:	e3432f20 	movt	r2, #16160	; 0x3f20
   28204:	e3a00000 	mov	r0, #0
   28208:	e3a01003 	mov	r1, #3
   2820c:	e583001c 	str	r0, [r3, #28]
   28210:	e5923000 	ldr	r3, [r2]
   28214:	e3833b01 	orr	r3, r3, #1024	; 0x400
   28218:	e3833004 	orr	r3, r3, #4
   2821c:	e5823000 	str	r3, [r2]
   28220:	e5c41068 	strb	r1, [r4, #104]	; 0x68
   28224:	eaffffe9 	b	281d0 <CPWMSoundBaseDevice::InterruptHandler()+0x9c>
   28228:	e3a03004 	mov	r3, #4
   2822c:	e5c43068 	strb	r3, [r4, #104]	; 0x68
   28230:	e8bd8070 	pop	{r4, r5, r6, pc}
   28234:	e3011170 	movw	r1, #4464	; 0x1170
   28238:	e30102f0 	movw	r0, #4848	; 0x12f0
   2823c:	e3401003 	movt	r1, #3
   28240:	e3400003 	movt	r0, #3
   28244:	e3002166 	movw	r2, #358	; 0x166
   28248:	ebfff253 	bl	24b9c <assertion_failed>
   2824c:	eaffffc9 	b	28178 <CPWMSoundBaseDevice::InterruptHandler()+0x44>
   28250:	e3011170 	movw	r1, #4464	; 0x1170
   28254:	e30102d8 	movw	r0, #4824	; 0x12d8
   28258:	e3401003 	movt	r1, #3
   2825c:	e3400003 	movt	r0, #3
   28260:	e3002162 	movw	r2, #354	; 0x162
   28264:	ebfff24c 	bl	24b9c <assertion_failed>
   28268:	eaffffbb 	b	2815c <CPWMSoundBaseDevice::InterruptHandler()+0x28>
   2826c:	e3011170 	movw	r1, #4464	; 0x1170
   28270:	e30102c0 	movw	r0, #4800	; 0x12c0
   28274:	e3401003 	movt	r1, #3
   28278:	e3400003 	movt	r0, #3
   2827c:	e300215a 	movw	r2, #346	; 0x15a
   28280:	ebfff245 	bl	24b9c <assertion_failed>
   28284:	eaffffaf 	b	28148 <CPWMSoundBaseDevice::InterruptHandler()+0x14>
   28288:	ebffe743 	bl	21f9c <EnterCritical>
   2828c:	e5d43068 	ldrb	r3, [r4, #104]	; 0x68
   28290:	e6ef3073 	uxtb	r3, r3
   28294:	e3530002 	cmp	r3, #2
   28298:	1affffc2 	bne	281a8 <CPWMSoundBaseDevice::InterruptHandler()+0x74>
   2829c:	eaffffd4 	b	281f4 <CPWMSoundBaseDevice::InterruptHandler()+0xc0>
   282a0:	e3a03000 	mov	r3, #0
   282a4:	e5c43068 	strb	r3, [r4, #104]	; 0x68
   282a8:	eaffffc8 	b	281d0 <CPWMSoundBaseDevice::InterruptHandler()+0x9c>

000282ac <CPWMSoundBaseDevice::InterruptStub(void*)>:
   282ac:	e92d4010 	push	{r4, lr}
   282b0:	e2504000 	subs	r4, r0, #0
   282b4:	0a000002 	beq	282c4 <CPWMSoundBaseDevice::InterruptStub(void*)+0x18>
   282b8:	e1a00004 	mov	r0, r4
   282bc:	e8bd4010 	pop	{r4, lr}
   282c0:	eaffff9b 	b	28134 <CPWMSoundBaseDevice::InterruptHandler()>
   282c4:	e3011170 	movw	r1, #4464	; 0x1170
   282c8:	e30a0938 	movw	r0, #43320	; 0xa938
   282cc:	e3401003 	movt	r1, #3
   282d0:	e3400002 	movt	r0, #2
   282d4:	e3002199 	movw	r2, #409	; 0x199
   282d8:	ebfff22f 	bl	24b9c <assertion_failed>
   282dc:	e1a00004 	mov	r0, r4
   282e0:	e8bd4010 	pop	{r4, lr}
   282e4:	eaffff92 	b	28134 <CPWMSoundBaseDevice::InterruptHandler()>

000282e8 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>:
   282e8:	e3510001 	cmp	r1, #1
   282ec:	e92d4070 	push	{r4, r5, r6, lr}
   282f0:	e1a05001 	mov	r5, r1
   282f4:	e1a04000 	mov	r4, r0
   282f8:	9a000005 	bls	28314 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x2c>
   282fc:	e3011170 	movw	r1, #4464	; 0x1170
   28300:	e3010300 	movw	r0, #4864	; 0x1300
   28304:	e3401003 	movt	r1, #3
   28308:	e3400003 	movt	r0, #3
   2830c:	e3a02e1a 	mov	r2, #416	; 0x1a0
   28310:	ebfff221 	bl	24b9c <assertion_failed>
   28314:	e5940008 	ldr	r0, [r4, #8]
   28318:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   2831c:	8a000018 	bhi	28384 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x9c>
   28320:	e1a00100 	lsl	r0, r0, #2
   28324:	ebffe711 	bl	21f70 <operator new[](unsigned int)>
   28328:	e0843105 	add	r3, r4, r5, lsl #2
   2832c:	e583006c 	str	r0, [r3, #108]	; 0x6c
   28330:	e3a0003f 	mov	r0, #63	; 0x3f
   28334:	e0844105 	add	r4, r4, r5, lsl #2
   28338:	ebffe70c 	bl	21f70 <operator new[](unsigned int)>
   2833c:	e300c349 	movw	ip, #841	; 0x349
   28340:	e594206c 	ldr	r2, [r4, #108]	; 0x6c
   28344:	e340c005 	movt	ip, #5
   28348:	e30c1018 	movw	r1, #49176	; 0xc018
   2834c:	e3471e20 	movt	r1, #32288	; 0x7e20
   28350:	e2822103 	add	r2, r2, #-1073741824	; 0xc0000000
   28354:	e280301f 	add	r3, r0, #31
   28358:	e5840074 	str	r0, [r4, #116]	; 0x74
   2835c:	e3c3301f 	bic	r3, r3, #31
   28360:	e584307c 	str	r3, [r4, #124]	; 0x7c
   28364:	e5832004 	str	r2, [r3, #4]
   28368:	e3a02000 	mov	r2, #0
   2836c:	e583c000 	str	ip, [r3]
   28370:	e5831008 	str	r1, [r3, #8]
   28374:	e5832010 	str	r2, [r3, #16]
   28378:	e5832018 	str	r2, [r3, #24]
   2837c:	e583201c 	str	r2, [r3, #28]
   28380:	e8bd8070 	pop	{r4, r5, r6, pc}
   28384:	e3e00000 	mvn	r0, #0
   28388:	ebffe6f8 	bl	21f70 <operator new[](unsigned int)>
   2838c:	e0843105 	add	r3, r4, r5, lsl #2
   28390:	e583006c 	str	r0, [r3, #108]	; 0x6c
   28394:	eaffffe5 	b	28330 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x48>

00028398 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>:
   28398:	e59fc194 	ldr	ip, [pc, #404]	; 28534 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x19c>
   2839c:	e92d4070 	push	{r4, r5, r6, lr}
   283a0:	e1a04000 	mov	r4, r0
   283a4:	e30b0280 	movw	r0, #45696	; 0xb280
   283a8:	e3400ee6 	movt	r0, #3814	; 0xee6
   283ac:	e584c000 	str	ip, [r4]
   283b0:	e08000a2 	add	r0, r0, r2, lsr #1
   283b4:	e984000a 	stmib	r4, {r1, r3}
   283b8:	e1a01002 	mov	r1, r2
   283bc:	ebffe640 	bl	21cc4 <__aeabi_uidiv>
   283c0:	e3a03000 	mov	r3, #0
   283c4:	e3a02004 	mov	r2, #4
   283c8:	e3a01036 	mov	r1, #54	; 0x36
   283cc:	e584000c 	str	r0, [r4, #12]
   283d0:	e2840010 	add	r0, r4, #16
   283d4:	ebffe5ad 	bl	21a90 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   283d8:	e3a03000 	mov	r3, #0
   283dc:	e3a02004 	mov	r2, #4
   283e0:	e3a01037 	mov	r1, #55	; 0x37
   283e4:	e2840038 	add	r0, r4, #56	; 0x38
   283e8:	ebffe5a8 	bl	21a90 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   283ec:	e3a02006 	mov	r2, #6
   283f0:	e1a01002 	mov	r1, r2
   283f4:	e2840060 	add	r0, r4, #96	; 0x60
   283f8:	eb00075d 	bl	2a174 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>
   283fc:	e5941004 	ldr	r1, [r4, #4]
   28400:	e3a03000 	mov	r3, #0
   28404:	e3a02001 	mov	r2, #1
   28408:	e1510003 	cmp	r1, r3
   2840c:	e5842088 	str	r2, [r4, #136]	; 0x88
   28410:	e5843064 	str	r3, [r4, #100]	; 0x64
   28414:	e5c43068 	strb	r3, [r4, #104]	; 0x68
   28418:	0a00003e 	beq	28518 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x180>
   2841c:	e5943008 	ldr	r3, [r4, #8]
   28420:	e3530000 	cmp	r3, #0
   28424:	0a000024 	beq	284bc <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x124>
   28428:	e3130001 	tst	r3, #1
   2842c:	1a00002b 	bne	284e0 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x148>
   28430:	e3a01000 	mov	r1, #0
   28434:	e1a00004 	mov	r0, r4
   28438:	ebffffaa 	bl	282e8 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>
   2843c:	e3a01001 	mov	r1, #1
   28440:	e1a00004 	mov	r0, r4
   28444:	ebffffa7 	bl	282e8 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>
   28448:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   2844c:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
   28450:	e1a00004 	mov	r0, r4
   28454:	e283c103 	add	ip, r3, #-1073741824	; 0xc0000000
   28458:	e2821103 	add	r1, r2, #-1073741824	; 0xc0000000
   2845c:	e582c014 	str	ip, [r2, #20]
   28460:	e5831014 	str	r1, [r3, #20]
   28464:	ebffff06 	bl	28084 <CPWMSoundBaseDevice::RunPWM()>
   28468:	e3a03a07 	mov	r3, #28672	; 0x7000
   2846c:	e3433f00 	movt	r3, #16128	; 0x3f00
   28470:	e5933020 	ldr	r3, [r3, #32]
   28474:	e3130201 	tst	r3, #268435456	; 0x10000000
   28478:	1a00001f 	bne	284fc <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x164>
   2847c:	e3a05a07 	mov	r5, #28672	; 0x7000
   28480:	e3435f00 	movt	r5, #16128	; 0x3f00
   28484:	e5953ff0 	ldr	r3, [r5, #4080]	; 0xff0
   28488:	e3833001 	orr	r3, r3, #1
   2848c:	e5853ff0 	str	r3, [r5, #4080]	; 0xff0
   28490:	ebffea1b 	bl	22d04 <CTimer::Get()>
   28494:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   28498:	ebffe9dc 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
   2849c:	e1a02005 	mov	r2, r5
   284a0:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   284a4:	e5853000 	str	r3, [r5]
   284a8:	e5923000 	ldr	r3, [r2]
   284ac:	e3530000 	cmp	r3, #0
   284b0:	bafffffc 	blt	284a8 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x110>
   284b4:	e1a00004 	mov	r0, r4
   284b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   284bc:	e3011170 	movw	r1, #4464	; 0x1170
   284c0:	e301030c 	movw	r0, #4876	; 0x130c
   284c4:	e3401003 	movt	r1, #3
   284c8:	e3400003 	movt	r0, #3
   284cc:	e3a02089 	mov	r2, #137	; 0x89
   284d0:	ebfff1b1 	bl	24b9c <assertion_failed>
   284d4:	e5943008 	ldr	r3, [r4, #8]
   284d8:	e3130001 	tst	r3, #1
   284dc:	0affffd3 	beq	28430 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x98>
   284e0:	e3011170 	movw	r1, #4464	; 0x1170
   284e4:	e3010320 	movw	r0, #4896	; 0x1320
   284e8:	e3401003 	movt	r1, #3
   284ec:	e3400003 	movt	r0, #3
   284f0:	e3a0208a 	mov	r2, #138	; 0x8a
   284f4:	ebfff1a8 	bl	24b9c <assertion_failed>
   284f8:	eaffffcc 	b	28430 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x98>
   284fc:	e3011170 	movw	r1, #4464	; 0x1170
   28500:	e3010338 	movw	r0, #4920	; 0x1338
   28504:	e3401003 	movt	r1, #3
   28508:	e3400003 	movt	r0, #3
   2850c:	e3a02098 	mov	r2, #152	; 0x98
   28510:	ebfff1a1 	bl	24b9c <assertion_failed>
   28514:	eaffffd8 	b	2847c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0xe4>
   28518:	e3011170 	movw	r1, #4464	; 0x1170
   2851c:	e30a0970 	movw	r0, #43376	; 0xa970
   28520:	e3401003 	movt	r1, #3
   28524:	e3400002 	movt	r0, #2
   28528:	e3a02088 	mov	r2, #136	; 0x88
   2852c:	ebfff19a 	bl	24b9c <assertion_failed>
   28530:	eaffffb9 	b	2841c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x84>
   28534:	00031164 	.word	0x00031164

00028538 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>:
   28538:	e5d02068 	ldrb	r2, [r0, #104]	; 0x68
   2853c:	e59f3108 	ldr	r3, [pc, #264]	; 2864c <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x114>
   28540:	e3520000 	cmp	r2, #0
   28544:	e92d4010 	push	{r4, lr}
   28548:	e1a04000 	mov	r4, r0
   2854c:	e5803000 	str	r3, [r0]
   28550:	1a00002b 	bne	28604 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xcc>
   28554:	e1a00004 	mov	r0, r4
   28558:	ebfffee7 	bl	280fc <CPWMSoundBaseDevice::StopPWM()>
   2855c:	e5943004 	ldr	r3, [r4, #4]
   28560:	e3530000 	cmp	r3, #0
   28564:	0a000031 	beq	28630 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xf8>
   28568:	e5943064 	ldr	r3, [r4, #100]	; 0x64
   2856c:	e3530000 	cmp	r3, #0
   28570:	1a00002a 	bne	28620 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xe8>
   28574:	e5940074 	ldr	r0, [r4, #116]	; 0x74
   28578:	e3a03000 	mov	r3, #0
   2857c:	e5843004 	str	r3, [r4, #4]
   28580:	e1500003 	cmp	r0, r3
   28584:	e584307c 	str	r3, [r4, #124]	; 0x7c
   28588:	e5843080 	str	r3, [r4, #128]	; 0x80
   2858c:	0a000000 	beq	28594 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x5c>
   28590:	ebffe678 	bl	21f78 <operator delete[](void*)>
   28594:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   28598:	e3a03000 	mov	r3, #0
   2859c:	e5843074 	str	r3, [r4, #116]	; 0x74
   285a0:	e1500003 	cmp	r0, r3
   285a4:	0a000000 	beq	285ac <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x74>
   285a8:	ebffe672 	bl	21f78 <operator delete[](void*)>
   285ac:	e594006c 	ldr	r0, [r4, #108]	; 0x6c
   285b0:	e3a03000 	mov	r3, #0
   285b4:	e5843078 	str	r3, [r4, #120]	; 0x78
   285b8:	e1500003 	cmp	r0, r3
   285bc:	0a000000 	beq	285c4 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x8c>
   285c0:	ebffe66c 	bl	21f78 <operator delete[](void*)>
   285c4:	e5940070 	ldr	r0, [r4, #112]	; 0x70
   285c8:	e3a03000 	mov	r3, #0
   285cc:	e584306c 	str	r3, [r4, #108]	; 0x6c
   285d0:	e1500003 	cmp	r0, r3
   285d4:	0a000000 	beq	285dc <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xa4>
   285d8:	ebffe666 	bl	21f78 <operator delete[](void*)>
   285dc:	e3a03000 	mov	r3, #0
   285e0:	e2840060 	add	r0, r4, #96	; 0x60
   285e4:	e5843070 	str	r3, [r4, #112]	; 0x70
   285e8:	eb0006f9 	bl	2a1d4 <CGPIOClock::~CGPIOClock()>
   285ec:	e2840038 	add	r0, r4, #56	; 0x38
   285f0:	ebffe289 	bl	2101c <CGPIOPin::~CGPIOPin()>
   285f4:	e2840010 	add	r0, r4, #16
   285f8:	ebffe287 	bl	2101c <CGPIOPin::~CGPIOPin()>
   285fc:	e1a00004 	mov	r0, r4
   28600:	e8bd8010 	pop	{r4, pc}
   28604:	e3011170 	movw	r1, #4464	; 0x1170
   28608:	e30101f0 	movw	r0, #4592	; 0x11f0
   2860c:	e3401003 	movt	r1, #3
   28610:	e3400003 	movt	r0, #3
   28614:	e3a020a8 	mov	r2, #168	; 0xa8
   28618:	ebfff15f 	bl	24b9c <assertion_failed>
   2861c:	eaffffcc 	b	28554 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x1c>
   28620:	e3a01010 	mov	r1, #16
   28624:	e5940004 	ldr	r0, [r4, #4]
   28628:	ebfffb72 	bl	273f8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2862c:	eaffffd0 	b	28574 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x3c>
   28630:	e3011170 	movw	r1, #4464	; 0x1170
   28634:	e30a0970 	movw	r0, #43376	; 0xa970
   28638:	e3401003 	movt	r1, #3
   2863c:	e3400002 	movt	r0, #2
   28640:	e3a020ae 	mov	r2, #174	; 0xae
   28644:	ebfff154 	bl	24b9c <assertion_failed>
   28648:	eaffffc6 	b	28568 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x30>
   2864c:	00031164 	.word	0x00031164

00028650 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>:
   28650:	e92d4010 	push	{r4, lr}
   28654:	e1a04000 	mov	r4, r0
   28658:	ebffffb6 	bl	28538 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>
   2865c:	e1a00004 	mov	r0, r4
   28660:	e3a0108c 	mov	r1, #140	; 0x8c
   28664:	ebffe644 	bl	21f7c <operator delete(void*, unsigned int)>
   28668:	e1a00004 	mov	r0, r4
   2866c:	e8bd8010 	pop	{r4, pc}

00028670 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   28670:	e12fff1e 	bx	lr

00028674 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   28674:	e92d4010 	push	{r4, lr}
   28678:	e3a01010 	mov	r1, #16
   2867c:	e1a04000 	mov	r4, r0
   28680:	ebffe63d 	bl	21f7c <operator delete(void*, unsigned int)>
   28684:	e1a00004 	mov	r0, r4
   28688:	e8bd8010 	pop	{r4, pc}

0002868c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
   2868c:	e92d4070 	push	{r4, r5, r6, lr}
   28690:	e3024898 	movw	r4, #10392	; 0x2898
   28694:	e3404143 	movt	r4, #323	; 0x143
   28698:	e1a05000 	mov	r5, r0
   2869c:	e1a06001 	mov	r6, r1
   286a0:	e5940000 	ldr	r0, [r4]
   286a4:	e3500000 	cmp	r0, #0
   286a8:	1a00001a 	bne	28718 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
   286ac:	e1d500bc 	ldrh	r0, [r5, #12]
   286b0:	e1d530be 	ldrh	r3, [r5, #14]
   286b4:	e5856008 	str	r6, [r5, #8]
   286b8:	e0402003 	sub	r2, r0, r3
   286bc:	e6bf2072 	sxth	r2, r2
   286c0:	e3520000 	cmp	r2, #0
   286c4:	da00000c 	ble	286fc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
   286c8:	e3560000 	cmp	r6, #0
   286cc:	1a00000c 	bne	28704 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
   286d0:	e2833001 	add	r3, r3, #1
   286d4:	e6ff3073 	uxth	r3, r3
   286d8:	e1c530be 	strh	r3, [r5, #14]
   286dc:	e5951004 	ldr	r1, [r5, #4]
   286e0:	e1833800 	orr	r3, r3, r0, lsl #16
   286e4:	e5942004 	ldr	r2, [r4, #4]
   286e8:	e7823101 	str	r3, [r2, r1, lsl #2]
   286ec:	e5943000 	ldr	r3, [r4]
   286f0:	e3530000 	cmp	r3, #0
   286f4:	1a000005 	bne	28710 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
   286f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   286fc:	e3560000 	cmp	r6, #0
   28700:	1a000006 	bne	28720 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
   28704:	e5943000 	ldr	r3, [r4]
   28708:	e3530000 	cmp	r3, #0
   2870c:	08bd8070 	popeq	{r4, r5, r6, pc}
   28710:	e8bd4070 	pop	{r4, r5, r6, lr}
   28714:	eaffe64e 	b	22054 <LeaveCritical>
   28718:	ebffe61f 	bl	21f9c <EnterCritical>
   2871c:	eaffffe2 	b	286ac <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
   28720:	e2800001 	add	r0, r0, #1
   28724:	e6ff0070 	uxth	r0, r0
   28728:	e1c500bc 	strh	r0, [r5, #12]
   2872c:	eaffffea 	b	286dc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

00028730 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
   28730:	e59f20e4 	ldr	r2, [pc, #228]	; 2881c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
   28734:	e3510001 	cmp	r1, #1
   28738:	e92d4030 	push	{r4, r5, lr}
   2873c:	e3a03000 	mov	r3, #0
   28740:	e24dd024 	sub	sp, sp, #36	; 0x24
   28744:	e1a04000 	mov	r4, r0
   28748:	e5801004 	str	r1, [r0, #4]
   2874c:	e5802000 	str	r2, [r0]
   28750:	e1c030bc 	strh	r3, [r0, #12]
   28754:	e1c030be 	strh	r3, [r0, #14]
   28758:	9a000002 	bls	28768 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
   2875c:	e1a00004 	mov	r0, r4
   28760:	e28dd024 	add	sp, sp, #36	; 0x24
   28764:	e8bd8030 	pop	{r4, r5, pc}
   28768:	e3025898 	movw	r5, #10392	; 0x2898
   2876c:	e3405143 	movt	r5, #323	; 0x143
   28770:	e5950000 	ldr	r0, [r5]
   28774:	e1500003 	cmp	r0, r3
   28778:	1a000009 	bne	287a4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
   2877c:	e5953004 	ldr	r3, [r5, #4]
   28780:	e3530000 	cmp	r3, #0
   28784:	0a00000a 	beq	287b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
   28788:	e5953004 	ldr	r3, [r5, #4]
   2878c:	e3530000 	cmp	r3, #0
   28790:	0afffff1 	beq	2875c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   28794:	e3a01000 	mov	r1, #0
   28798:	e1a00004 	mov	r0, r4
   2879c:	ebffffba 	bl	2868c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
   287a0:	eaffffed 	b	2875c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
   287a4:	ebffe5fc 	bl	21f9c <EnterCritical>
   287a8:	e5953004 	ldr	r3, [r5, #4]
   287ac:	e3530000 	cmp	r3, #0
   287b0:	1a00000f 	bne	287f4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
   287b4:	e28d0008 	add	r0, sp, #8
   287b8:	ebffe1a3 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   287bc:	e3a03000 	mov	r3, #0
   287c0:	e28d0008 	add	r0, sp, #8
   287c4:	e58d3000 	str	r3, [sp]
   287c8:	e3a01010 	mov	r1, #16
   287cc:	e3a03010 	mov	r3, #16
   287d0:	e3401004 	movt	r1, #4
   287d4:	e08d2003 	add	r2, sp, r3
   287d8:	ebffe1e3 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   287dc:	e3500000 	cmp	r0, #0
   287e0:	e28d0008 	add	r0, sp, #8
   287e4:	159d301c 	ldrne	r3, [sp, #28]
   287e8:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   287ec:	15853004 	strne	r3, [r5, #4]
   287f0:	ebffe19b 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   287f4:	e5953000 	ldr	r3, [r5]
   287f8:	e3530000 	cmp	r3, #0
   287fc:	0a000000 	beq	28804 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
   28800:	ebffe613 	bl	22054 <LeaveCritical>
   28804:	e5943004 	ldr	r3, [r4, #4]
   28808:	e3530001 	cmp	r3, #1
   2880c:	9affffdd 	bls	28788 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
   28810:	e1a00004 	mov	r0, r4
   28814:	e28dd024 	add	sp, sp, #36	; 0x24
   28818:	e8bd8030 	pop	{r4, r5, pc}
   2881c:	00031380 	.word	0x00031380

00028820 <CVirtualGPIOPin::Write(unsigned int)>:
   28820:	e5902004 	ldr	r2, [r0, #4]
   28824:	e1a03001 	mov	r3, r1
   28828:	e3520001 	cmp	r2, #1
   2882c:	812fff1e 	bxhi	lr
   28830:	e3022898 	movw	r2, #10392	; 0x2898
   28834:	e3402143 	movt	r2, #323	; 0x143
   28838:	e3510001 	cmp	r1, #1
   2883c:	e5922004 	ldr	r2, [r2, #4]
   28840:	93a03000 	movls	r3, #0
   28844:	83a03001 	movhi	r3, #1
   28848:	e3520000 	cmp	r2, #0
   2884c:	03833001 	orreq	r3, r3, #1
   28850:	e3530000 	cmp	r3, #0
   28854:	112fff1e 	bxne	lr
   28858:	eaffff8b 	b	2868c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0002885c <CVirtualGPIOPin::Invert()>:
   2885c:	e5901008 	ldr	r1, [r0, #8]
   28860:	e2211001 	eor	r1, r1, #1
   28864:	eaffffed 	b	28820 <CVirtualGPIOPin::Write(unsigned int)>

00028868 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   28868:	e3023898 	movw	r3, #10392	; 0x2898
   2886c:	e3403143 	movt	r3, #323	; 0x143
   28870:	e3a02000 	mov	r2, #0
   28874:	e5832000 	str	r2, [r3]
   28878:	e12fff1e 	bx	lr

0002887c <CMachineInfo::CMachineInfo()>:
   2887c:	e30228a0 	movw	r2, #10400	; 0x28a0
   28880:	e3402143 	movt	r2, #323	; 0x143
   28884:	e92d4030 	push	{r4, r5, lr}
   28888:	e3a0300c 	mov	r3, #12
   2888c:	e5925000 	ldr	r5, [r2]
   28890:	e3a01003 	mov	r1, #3
   28894:	e5c03004 	strb	r3, [r0, #4]
   28898:	e3a03000 	mov	r3, #0
   2889c:	e1550003 	cmp	r5, r3
   288a0:	e24dd024 	sub	sp, sp, #36	; 0x24
   288a4:	e1a04000 	mov	r4, r0
   288a8:	e5c01010 	strb	r1, [r0, #16]
   288ac:	e5803000 	str	r3, [r0]
   288b0:	e5803008 	str	r3, [r0, #8]
   288b4:	e580300c 	str	r3, [r0, #12]
   288b8:	e5803014 	str	r3, [r0, #20]
   288bc:	0a00000e 	beq	288fc <CMachineInfo::CMachineInfo()+0x80>
   288c0:	e595e000 	ldr	lr, [r5]
   288c4:	e5d5c004 	ldrb	ip, [r5, #4]
   288c8:	e5950008 	ldr	r0, [r5, #8]
   288cc:	e595100c 	ldr	r1, [r5, #12]
   288d0:	e5d52010 	ldrb	r2, [r5, #16]
   288d4:	e5953014 	ldr	r3, [r5, #20]
   288d8:	e584e000 	str	lr, [r4]
   288dc:	e5c4c004 	strb	ip, [r4, #4]
   288e0:	e5840008 	str	r0, [r4, #8]
   288e4:	e584100c 	str	r1, [r4, #12]
   288e8:	e5c42010 	strb	r2, [r4, #16]
   288ec:	e5843014 	str	r3, [r4, #20]
   288f0:	e1a00004 	mov	r0, r4
   288f4:	e28dd024 	add	sp, sp, #36	; 0x24
   288f8:	e8bd8030 	pop	{r4, r5, pc}
   288fc:	e5820000 	str	r0, [r2]
   28900:	e28d0008 	add	r0, sp, #8
   28904:	ebffe150 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   28908:	e3a03010 	mov	r3, #16
   2890c:	e58d5000 	str	r5, [sp]
   28910:	e28d0008 	add	r0, sp, #8
   28914:	e3a01002 	mov	r1, #2
   28918:	e08d2003 	add	r2, sp, r3
   2891c:	e3401001 	movt	r1, #1
   28920:	ebffe191 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   28924:	e3500000 	cmp	r0, #0
   28928:	0a00000c 	beq	28960 <CMachineInfo::CMachineInfo()+0xe4>
   2892c:	e59d201c 	ldr	r2, [sp, #28]
   28930:	e2123502 	ands	r3, r2, #8388608	; 0x800000
   28934:	e5842000 	str	r2, [r4]
   28938:	1a00000b 	bne	2896c <CMachineInfo::CMachineInfo()+0xf0>
   2893c:	e3a01002 	mov	r1, #2
   28940:	e59f00f8 	ldr	r0, [pc, #248]	; 28a40 <CMachineInfo::CMachineInfo()+0x1c4>
   28944:	ea000000 	b	2894c <CMachineInfo::CMachineInfo()+0xd0>
   28948:	e7901203 	ldr	r1, [r0, r3, lsl #4]
   2894c:	e1520001 	cmp	r2, r1
   28950:	0a000012 	beq	289a0 <CMachineInfo::CMachineInfo()+0x124>
   28954:	e2833001 	add	r3, r3, #1
   28958:	e3530011 	cmp	r3, #17
   2895c:	1afffff9 	bne	28948 <CMachineInfo::CMachineInfo()+0xcc>
   28960:	e28d0008 	add	r0, sp, #8
   28964:	ebffe13e 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   28968:	eaffffe0 	b	288f0 <CMachineInfo::CMachineInfo()+0x74>
   2896c:	e301c388 	movw	ip, #5000	; 0x1388
   28970:	e340c003 	movt	ip, #3
   28974:	e7e70252 	ubfx	r0, r2, #4, #8
   28978:	e1a03005 	mov	r3, r5
   2897c:	e1a0100c 	mov	r1, ip
   28980:	ea000000 	b	28988 <CMachineInfo::CMachineInfo()+0x10c>
   28984:	e5b1500c 	ldr	r5, [r1, #12]!
   28988:	e1550000 	cmp	r5, r0
   2898c:	0a000011 	beq	289d8 <CMachineInfo::CMachineInfo()+0x15c>
   28990:	e2833001 	add	r3, r3, #1
   28994:	e353000a 	cmp	r3, #10
   28998:	1afffff9 	bne	28984 <CMachineInfo::CMachineInfo()+0x108>
   2899c:	eaffffef 	b	28960 <CMachineInfo::CMachineInfo()+0xe4>
   289a0:	e3012388 	movw	r2, #5000	; 0x1388
   289a4:	e3402003 	movt	r2, #3
   289a8:	e0823203 	add	r3, r2, r3, lsl #4
   289ac:	e3a01001 	mov	r1, #1
   289b0:	e5841008 	str	r1, [r4, #8]
   289b4:	e3a02000 	mov	r2, #0
   289b8:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
   289bc:	e5931080 	ldr	r1, [r3, #128]	; 0x80
   289c0:	e5933084 	ldr	r3, [r3, #132]	; 0x84
   289c4:	e5c40004 	strb	r0, [r4, #4]
   289c8:	e584100c 	str	r1, [r4, #12]
   289cc:	e5843014 	str	r3, [r4, #20]
   289d0:	e5c42010 	strb	r2, [r4, #16]
   289d4:	eaffffe1 	b	28960 <CMachineInfo::CMachineInfo()+0xe4>
   289d8:	e3a0100c 	mov	r1, #12
   289dc:	e7e3e652 	ubfx	lr, r2, #12, #4
   289e0:	e023c391 	mla	r3, r1, r3, ip
   289e4:	e35e0002 	cmp	lr, #2
   289e8:	e202100f 	and	r1, r2, #15
   289ec:	e7e22a52 	ubfx	r2, r2, #20, #3
   289f0:	e5c4e010 	strb	lr, [r4, #16]
   289f4:	e3a00c01 	mov	r0, #256	; 0x100
   289f8:	e2811001 	add	r1, r1, #1
   289fc:	e1a00210 	lsl	r0, r0, r2
   28a00:	e584100c 	str	r1, [r4, #12]
   28a04:	e5d3c004 	ldrb	ip, [r3, #4]
   28a08:	e5933008 	ldr	r3, [r3, #8]
   28a0c:	e5840014 	str	r0, [r4, #20]
   28a10:	e5c4c004 	strb	ip, [r4, #4]
   28a14:	e5843008 	str	r3, [r4, #8]
   28a18:	83a03003 	movhi	r3, #3
   28a1c:	85c43010 	strbhi	r3, [r4, #16]
   28a20:	e3520000 	cmp	r2, #0
   28a24:	035c0003 	cmpeq	ip, #3
   28a28:	1affffcc 	bne	28960 <CMachineInfo::CMachineInfo()+0xe4>
   28a2c:	e3510001 	cmp	r1, #1
   28a30:	13a03002 	movne	r3, #2
   28a34:	03a03001 	moveq	r3, #1
   28a38:	e5c43004 	strb	r3, [r4, #4]
   28a3c:	eaffffc7 	b	28960 <CMachineInfo::CMachineInfo()+0xe4>
   28a40:	00031400 	.word	0x00031400

00028a44 <CMachineInfo::~CMachineInfo()>:
   28a44:	e30238a0 	movw	r3, #10400	; 0x28a0
   28a48:	e3403143 	movt	r3, #323	; 0x143
   28a4c:	e3a0100c 	mov	r1, #12
   28a50:	e5c01004 	strb	r1, [r0, #4]
   28a54:	e5932000 	ldr	r2, [r3]
   28a58:	e1500002 	cmp	r0, r2
   28a5c:	03a02000 	moveq	r2, #0
   28a60:	05832000 	streq	r2, [r3]
   28a64:	e12fff1e 	bx	lr

00028a68 <CMachineInfo::GetMachineModel() const>:
   28a68:	e5d00004 	ldrb	r0, [r0, #4]
   28a6c:	e12fff1e 	bx	lr

00028a70 <CMachineInfo::GetMachineName() const>:
   28a70:	e5d02004 	ldrb	r2, [r0, #4]
   28a74:	e3013388 	movw	r3, #5000	; 0x1388
   28a78:	e3403003 	movt	r3, #3
   28a7c:	e0833102 	add	r3, r3, r2, lsl #2
   28a80:	e5930188 	ldr	r0, [r3, #392]	; 0x188
   28a84:	e12fff1e 	bx	lr

00028a88 <CMachineInfo::GetModelMajor() const>:
   28a88:	e5900008 	ldr	r0, [r0, #8]
   28a8c:	e12fff1e 	bx	lr

00028a90 <CMachineInfo::GetModelRevision() const>:
   28a90:	e590000c 	ldr	r0, [r0, #12]
   28a94:	e12fff1e 	bx	lr

00028a98 <CMachineInfo::GetSoCType() const>:
   28a98:	e5d00010 	ldrb	r0, [r0, #16]
   28a9c:	e12fff1e 	bx	lr

00028aa0 <CMachineInfo::GetRAMSize() const>:
   28aa0:	e5900014 	ldr	r0, [r0, #20]
   28aa4:	e12fff1e 	bx	lr

00028aa8 <CMachineInfo::GetSoCName() const>:
   28aa8:	e5d02010 	ldrb	r2, [r0, #16]
   28aac:	e3013388 	movw	r3, #5000	; 0x1388
   28ab0:	e3403003 	movt	r3, #3
   28ab4:	e0833102 	add	r3, r3, r2, lsl #2
   28ab8:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
   28abc:	e12fff1e 	bx	lr

00028ac0 <CMachineInfo::GetRevisionRaw() const>:
   28ac0:	e5900000 	ldr	r0, [r0]
   28ac4:	e12fff1e 	bx	lr

00028ac8 <CMachineInfo::GetClockRate(unsigned int) const>:
   28ac8:	e92d4070 	push	{r4, r5, r6, lr}
   28acc:	e24dd028 	sub	sp, sp, #40	; 0x28
   28ad0:	e1a06000 	mov	r6, r0
   28ad4:	e28d000c 	add	r0, sp, #12
   28ad8:	e1a05001 	mov	r5, r1
   28adc:	ebffe0da 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   28ae0:	e3a03004 	mov	r3, #4
   28ae4:	e28d000c 	add	r0, sp, #12
   28ae8:	e58d3000 	str	r3, [sp]
   28aec:	e3a01002 	mov	r1, #2
   28af0:	e3a03014 	mov	r3, #20
   28af4:	e3401003 	movt	r1, #3
   28af8:	e08d2003 	add	r2, sp, r3
   28afc:	e58d5020 	str	r5, [sp, #32]
   28b00:	ebffe119 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   28b04:	e2504000 	subs	r4, r0, #0
   28b08:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   28b0c:	1a00000b 	bne	28b40 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   28b10:	e3550002 	cmp	r5, #2
   28b14:	0a00000e 	beq	28b54 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   28b18:	e3550004 	cmp	r5, #4
   28b1c:	0a000012 	beq	28b6c <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
   28b20:	e3550001 	cmp	r5, #1
   28b24:	0a00000d 	beq	28b60 <CMachineInfo::GetClockRate(unsigned int) const+0x98>
   28b28:	e3011554 	movw	r1, #5460	; 0x1554
   28b2c:	e30b0130 	movw	r0, #45360	; 0xb130
   28b30:	e3401003 	movt	r1, #3
   28b34:	e3400002 	movt	r0, #2
   28b38:	e3a02e11 	mov	r2, #272	; 0x110
   28b3c:	ebfff016 	bl	24b9c <assertion_failed>
   28b40:	e28d000c 	add	r0, sp, #12
   28b44:	ebffe0c6 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   28b48:	e1a00004 	mov	r0, r4
   28b4c:	e28dd028 	add	sp, sp, #40	; 0x28
   28b50:	e8bd8070 	pop	{r4, r5, r6, pc}
   28b54:	e3a04b1b 	mov	r4, #27648	; 0x6c00
   28b58:	e34042dc 	movt	r4, #732	; 0x2dc
   28b5c:	eafffff7 	b	28b40 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   28b60:	e3a04ce1 	mov	r4, #57600	; 0xe100
   28b64:	e34045f5 	movt	r4, #1525	; 0x5f5
   28b68:	eafffff4 	b	28b40 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   28b6c:	e5962008 	ldr	r2, [r6, #8]
   28b70:	e3a03ca3 	mov	r3, #41728	; 0xa300
   28b74:	e34131e1 	movt	r3, #4577	; 0x11e1
   28b78:	e30b4280 	movw	r4, #45696	; 0xb280
   28b7c:	e3520002 	cmp	r2, #2
   28b80:	e3404ee6 	movt	r4, #3814	; 0xee6
   28b84:	81a04003 	movhi	r4, r3
   28b88:	eaffffec 	b	28b40 <CMachineInfo::GetClockRate(unsigned int) const+0x78>

00028b8c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   28b8c:	e3510036 	cmp	r1, #54	; 0x36
   28b90:	0a00000f 	beq	28bd4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
   28b94:	e3510037 	cmp	r1, #55	; 0x37
   28b98:	1a000004 	bne	28bb0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   28b9c:	e5d03004 	ldrb	r3, [r0, #4]
   28ba0:	e3530003 	cmp	r3, #3
   28ba4:	c3a00028 	movgt	r0, #40	; 0x28
   28ba8:	d3a0002d 	movle	r0, #45	; 0x2d
   28bac:	e12fff1e 	bx	lr
   28bb0:	e92d4010 	push	{r4, lr}
   28bb4:	e300213b 	movw	r2, #315	; 0x13b
   28bb8:	e3011554 	movw	r1, #5460	; 0x1554
   28bbc:	e30b0130 	movw	r0, #45360	; 0xb130
   28bc0:	e3401003 	movt	r1, #3
   28bc4:	e3400002 	movt	r0, #2
   28bc8:	ebffeff3 	bl	24b9c <assertion_failed>
   28bcc:	e3a00000 	mov	r0, #0
   28bd0:	e8bd8010 	pop	{r4, pc}
   28bd4:	e5d03004 	ldrb	r3, [r0, #4]
   28bd8:	e3530003 	cmp	r3, #3
   28bdc:	ca000001 	bgt	28be8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
   28be0:	e3a00028 	mov	r0, #40	; 0x28
   28be4:	e12fff1e 	bx	lr
   28be8:	e5903008 	ldr	r3, [r0, #8]
   28bec:	e3530003 	cmp	r3, #3
   28bf0:	33a0002d 	movcc	r0, #45	; 0x2d
   28bf4:	23a00029 	movcs	r0, #41	; 0x29
   28bf8:	e12fff1e 	bx	lr

00028bfc <CMachineInfo::GetDevice(TDeviceId) const>:
   28bfc:	e3510000 	cmp	r1, #0
   28c00:	1a000003 	bne	28c14 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   28c04:	e5d00004 	ldrb	r0, [r0, #4]
   28c08:	e2500001 	subs	r0, r0, #1
   28c0c:	13a00001 	movne	r0, #1
   28c10:	e12fff1e 	bx	lr
   28c14:	e92d4010 	push	{r4, lr}
   28c18:	e3a02f55 	mov	r2, #340	; 0x154
   28c1c:	e3011554 	movw	r1, #5460	; 0x1554
   28c20:	e30b0130 	movw	r0, #45360	; 0xb130
   28c24:	e3401003 	movt	r1, #3
   28c28:	e3400002 	movt	r0, #2
   28c2c:	ebffefda 	bl	24b9c <assertion_failed>
   28c30:	e3a00000 	mov	r0, #0
   28c34:	e8bd8010 	pop	{r4, pc}

00028c38 <CMachineInfo::Get()>:
   28c38:	e92d4010 	push	{r4, lr}
   28c3c:	e30248a0 	movw	r4, #10400	; 0x28a0
   28c40:	e3404143 	movt	r4, #323	; 0x143
   28c44:	e5940000 	ldr	r0, [r4]
   28c48:	e3500000 	cmp	r0, #0
   28c4c:	18bd8010 	popne	{r4, pc}
   28c50:	e300215d 	movw	r2, #349	; 0x15d
   28c54:	e3011554 	movw	r1, #5460	; 0x1554
   28c58:	e30a045c 	movw	r0, #42076	; 0xa45c
   28c5c:	e3401003 	movt	r1, #3
   28c60:	e3400002 	movt	r0, #2
   28c64:	ebffefcc 	bl	24b9c <assertion_failed>
   28c68:	e5940000 	ldr	r0, [r4]
   28c6c:	e8bd8010 	pop	{r4, pc}

00028c70 <InvalidateDataCacheL1Only>:
   28c70:	e92d0070 	push	{r4, r5, r6}
   28c74:	e3a00000 	mov	r0, #0
   28c78:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   28c7c:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   28c80:	e3071fff 	movw	r1, #32767	; 0x7fff
   28c84:	e00126a0 	and	r2, r1, r0, lsr #13
   28c88:	e30013ff 	movw	r1, #1023	; 0x3ff
   28c8c:	e00131a0 	and	r3, r1, r0, lsr #3
   28c90:	e2822001 	add	r2, r2, #1
   28c94:	e2000007 	and	r0, r0, #7
   28c98:	e2800004 	add	r0, r0, #4
   28c9c:	e16f1f13 	clz	r1, r3
   28ca0:	e2834001 	add	r4, r3, #1
   28ca4:	e2422001 	sub	r2, r2, #1
   28ca8:	e1a03004 	mov	r3, r4
   28cac:	e2533001 	subs	r3, r3, #1
   28cb0:	e1a05113 	lsl	r5, r3, r1
   28cb4:	e1a06012 	lsl	r6, r2, r0
   28cb8:	e1855006 	orr	r5, r5, r6
   28cbc:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   28cc0:	cafffff9 	bgt	28cac <InvalidateDataCacheL1Only+0x3c>
   28cc4:	e3520000 	cmp	r2, #0
   28cc8:	cafffff5 	bgt	28ca4 <InvalidateDataCacheL1Only+0x34>
   28ccc:	f57ff04e 	dsb	st
   28cd0:	f57ff06f 	isb	sy
   28cd4:	e8bd0070 	pop	{r4, r5, r6}
   28cd8:	e12fff1e 	bx	lr

00028cdc <InvalidateDataCache>:
   28cdc:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   28ce0:	f57ff05f 	dmb	sy
   28ce4:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   28ce8:	e1a03ba0 	lsr	r3, r0, #23
   28cec:	e213300e 	ands	r3, r3, #14
   28cf0:	0a00001d 	beq	28d6c <InvalidateDataCache+0x90>
   28cf4:	e3a0a000 	mov	sl, #0
   28cf8:	e08a20aa 	add	r2, sl, sl, lsr #1
   28cfc:	e1a01230 	lsr	r1, r0, r2
   28d00:	e2011007 	and	r1, r1, #7
   28d04:	e3510002 	cmp	r1, #2
   28d08:	ba000014 	blt	28d60 <InvalidateDataCache+0x84>
   28d0c:	e10f9000 	mrs	r9, CPSR
   28d10:	f10c0080 	cpsid	i
   28d14:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   28d18:	f57ff06f 	isb	sy
   28d1c:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   28d20:	e121f009 	msr	CPSR_c, r9
   28d24:	e2012007 	and	r2, r1, #7
   28d28:	e2822004 	add	r2, r2, #4
   28d2c:	e30043ff 	movw	r4, #1023	; 0x3ff
   28d30:	e01441a1 	ands	r4, r4, r1, lsr #3
   28d34:	e16f5f14 	clz	r5, r4
   28d38:	e3077fff 	movw	r7, #32767	; 0x7fff
   28d3c:	e01776a1 	ands	r7, r7, r1, lsr #13
   28d40:	e1a09007 	mov	r9, r7
   28d44:	e18ab514 	orr	fp, sl, r4, lsl r5
   28d48:	e18bb219 	orr	fp, fp, r9, lsl r2
   28d4c:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   28d50:	e2599001 	subs	r9, r9, #1
   28d54:	aafffffa 	bge	28d44 <InvalidateDataCache+0x68>
   28d58:	e2544001 	subs	r4, r4, #1
   28d5c:	aafffff7 	bge	28d40 <InvalidateDataCache+0x64>
   28d60:	e28aa002 	add	sl, sl, #2
   28d64:	e153000a 	cmp	r3, sl
   28d68:	caffffe2 	bgt	28cf8 <InvalidateDataCache+0x1c>
   28d6c:	e3a0a000 	mov	sl, #0
   28d70:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   28d74:	f57ff04e 	dsb	st
   28d78:	f57ff06f 	isb	sy
   28d7c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   28d80:	e12fff1e 	bx	lr

00028d84 <CleanDataCache>:
   28d84:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   28d88:	f57ff05f 	dmb	sy
   28d8c:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   28d90:	e1a03ba0 	lsr	r3, r0, #23
   28d94:	e213300e 	ands	r3, r3, #14
   28d98:	0a00001d 	beq	28e14 <CleanDataCache+0x90>
   28d9c:	e3a0a000 	mov	sl, #0
   28da0:	e08a20aa 	add	r2, sl, sl, lsr #1
   28da4:	e1a01230 	lsr	r1, r0, r2
   28da8:	e2011007 	and	r1, r1, #7
   28dac:	e3510002 	cmp	r1, #2
   28db0:	ba000014 	blt	28e08 <CleanDataCache+0x84>
   28db4:	e10f9000 	mrs	r9, CPSR
   28db8:	f10c0080 	cpsid	i
   28dbc:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   28dc0:	f57ff06f 	isb	sy
   28dc4:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   28dc8:	e121f009 	msr	CPSR_c, r9
   28dcc:	e2012007 	and	r2, r1, #7
   28dd0:	e2822004 	add	r2, r2, #4
   28dd4:	e30043ff 	movw	r4, #1023	; 0x3ff
   28dd8:	e01441a1 	ands	r4, r4, r1, lsr #3
   28ddc:	e16f5f14 	clz	r5, r4
   28de0:	e3077fff 	movw	r7, #32767	; 0x7fff
   28de4:	e01776a1 	ands	r7, r7, r1, lsr #13
   28de8:	e1a09007 	mov	r9, r7
   28dec:	e18ab514 	orr	fp, sl, r4, lsl r5
   28df0:	e18bb219 	orr	fp, fp, r9, lsl r2
   28df4:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   28df8:	e2599001 	subs	r9, r9, #1
   28dfc:	aafffffa 	bge	28dec <CleanDataCache+0x68>
   28e00:	e2544001 	subs	r4, r4, #1
   28e04:	aafffff7 	bge	28de8 <CleanDataCache+0x64>
   28e08:	e28aa002 	add	sl, sl, #2
   28e0c:	e153000a 	cmp	r3, sl
   28e10:	caffffe2 	bgt	28da0 <CleanDataCache+0x1c>
   28e14:	e3a0a000 	mov	sl, #0
   28e18:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   28e1c:	f57ff04e 	dsb	st
   28e20:	f57ff06f 	isb	sy
   28e24:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   28e28:	e12fff1e 	bx	lr

00028e2c <CleanAndInvalidateDataCacheRange>:
   28e2c:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   28e30:	e1a03823 	lsr	r3, r3, #16
   28e34:	e203300f 	and	r3, r3, #15
   28e38:	e3a02004 	mov	r2, #4
   28e3c:	e1a02312 	lsl	r2, r2, r3
   28e40:	e0801001 	add	r1, r0, r1
   28e44:	e2423001 	sub	r3, r2, #1
   28e48:	e1c00003 	bic	r0, r0, r3
   28e4c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   28e50:	e0800002 	add	r0, r0, r2
   28e54:	e1500001 	cmp	r0, r1
   28e58:	3afffffb 	bcc	28e4c <CleanAndInvalidateDataCacheRange+0x20>
   28e5c:	f57ff04e 	dsb	st
   28e60:	e12fff1e 	bx	lr

00028e64 <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   28e64:	e3510000 	cmp	r1, #0
   28e68:	e3a03000 	mov	r3, #0
   28e6c:	e92d4010 	push	{r4, lr}
   28e70:	e1a04000 	mov	r4, r0
   28e74:	e5801000 	str	r1, [r0]
   28e78:	e980000c 	stmib	r0, {r2, r3}
   28e7c:	e580300c 	str	r3, [r0, #12]
   28e80:	0a00000e 	beq	28ec0 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x5c>
   28e84:	e3520000 	cmp	r2, #0
   28e88:	0a000015 	beq	28ee4 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x80>
   28e8c:	e5940000 	ldr	r0, [r4]
   28e90:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   28e94:	8a000004 	bhi	28eac <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x48>
   28e98:	e1a00100 	lsl	r0, r0, #2
   28e9c:	ebffe433 	bl	21f70 <operator new[](unsigned int)>
   28ea0:	e584000c 	str	r0, [r4, #12]
   28ea4:	e1a00004 	mov	r0, r4
   28ea8:	e8bd8010 	pop	{r4, pc}
   28eac:	e3e00000 	mvn	r0, #0
   28eb0:	ebffe42e 	bl	21f70 <operator new[](unsigned int)>
   28eb4:	e584000c 	str	r0, [r4, #12]
   28eb8:	e1a00004 	mov	r0, r4
   28ebc:	e8bd8010 	pop	{r4, pc}
   28ec0:	e3a0201e 	mov	r2, #30
   28ec4:	e3011670 	movw	r1, #5744	; 0x1670
   28ec8:	e3010680 	movw	r0, #5760	; 0x1680
   28ecc:	e3401003 	movt	r1, #3
   28ed0:	e3400003 	movt	r0, #3
   28ed4:	ebffef30 	bl	24b9c <assertion_failed>
   28ed8:	e5942004 	ldr	r2, [r4, #4]
   28edc:	e3520000 	cmp	r2, #0
   28ee0:	1affffe9 	bne	28e8c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x28>
   28ee4:	e3011670 	movw	r1, #5744	; 0x1670
   28ee8:	e3010694 	movw	r0, #5780	; 0x1694
   28eec:	e3401003 	movt	r1, #3
   28ef0:	e3400003 	movt	r0, #3
   28ef4:	e3a0201f 	mov	r2, #31
   28ef8:	ebffef27 	bl	24b9c <assertion_failed>
   28efc:	eaffffe2 	b	28e8c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x28>

00028f00 <CPtrArray::~CPtrArray()>:
   28f00:	e92d4010 	push	{r4, lr}
   28f04:	e1a04000 	mov	r4, r0
   28f08:	e590000c 	ldr	r0, [r0, #12]
   28f0c:	e3a03000 	mov	r3, #0
   28f10:	e5843000 	str	r3, [r4]
   28f14:	e1500003 	cmp	r0, r3
   28f18:	e5843004 	str	r3, [r4, #4]
   28f1c:	0a000000 	beq	28f24 <CPtrArray::~CPtrArray()+0x24>
   28f20:	ebffe414 	bl	21f78 <operator delete[](void*)>
   28f24:	e1a00004 	mov	r0, r4
   28f28:	e8bd8010 	pop	{r4, pc}

00028f2c <CPtrArray::GetCount() const>:
   28f2c:	e5900008 	ldr	r0, [r0, #8]
   28f30:	e12fff1e 	bx	lr

00028f34 <CPtrArray::operator[](unsigned int)>:
   28f34:	e5903008 	ldr	r3, [r0, #8]
   28f38:	e92d4070 	push	{r4, r5, r6, lr}
   28f3c:	e1530001 	cmp	r3, r1
   28f40:	e1a04000 	mov	r4, r0
   28f44:	e1a05001 	mov	r5, r1
   28f48:	9a000007 	bls	28f6c <CPtrArray::operator[](unsigned int)+0x38>
   28f4c:	e5942000 	ldr	r2, [r4]
   28f50:	e1520003 	cmp	r2, r3
   28f54:	3a00000e 	bcc	28f94 <CPtrArray::operator[](unsigned int)+0x60>
   28f58:	e594000c 	ldr	r0, [r4, #12]
   28f5c:	e3500000 	cmp	r0, #0
   28f60:	0a000014 	beq	28fb8 <CPtrArray::operator[](unsigned int)+0x84>
   28f64:	e0800105 	add	r0, r0, r5, lsl #2
   28f68:	e8bd8070 	pop	{r4, r5, r6, pc}
   28f6c:	e3a02035 	mov	r2, #53	; 0x35
   28f70:	e3011670 	movw	r1, #5744	; 0x1670
   28f74:	e30106ac 	movw	r0, #5804	; 0x16ac
   28f78:	e3401003 	movt	r1, #3
   28f7c:	e3400003 	movt	r0, #3
   28f80:	ebffef05 	bl	24b9c <assertion_failed>
   28f84:	e5943008 	ldr	r3, [r4, #8]
   28f88:	e5942000 	ldr	r2, [r4]
   28f8c:	e1520003 	cmp	r2, r3
   28f90:	2afffff0 	bcs	28f58 <CPtrArray::operator[](unsigned int)+0x24>
   28f94:	e3011670 	movw	r1, #5744	; 0x1670
   28f98:	e30106c4 	movw	r0, #5828	; 0x16c4
   28f9c:	e3401003 	movt	r1, #3
   28fa0:	e3400003 	movt	r0, #3
   28fa4:	e3a02036 	mov	r2, #54	; 0x36
   28fa8:	ebffeefb 	bl	24b9c <assertion_failed>
   28fac:	e594000c 	ldr	r0, [r4, #12]
   28fb0:	e3500000 	cmp	r0, #0
   28fb4:	1affffea 	bne	28f64 <CPtrArray::operator[](unsigned int)+0x30>
   28fb8:	e3a02037 	mov	r2, #55	; 0x37
   28fbc:	e3011670 	movw	r1, #5744	; 0x1670
   28fc0:	e30106e4 	movw	r0, #5860	; 0x16e4
   28fc4:	e3401003 	movt	r1, #3
   28fc8:	e3400003 	movt	r0, #3
   28fcc:	ebffeef2 	bl	24b9c <assertion_failed>
   28fd0:	e594000c 	ldr	r0, [r4, #12]
   28fd4:	e0800105 	add	r0, r0, r5, lsl #2
   28fd8:	e8bd8070 	pop	{r4, r5, r6, pc}

00028fdc <CPtrArray::operator[](unsigned int) const>:
   28fdc:	e5903008 	ldr	r3, [r0, #8]
   28fe0:	e92d4070 	push	{r4, r5, r6, lr}
   28fe4:	e1530001 	cmp	r3, r1
   28fe8:	e1a04000 	mov	r4, r0
   28fec:	e1a05001 	mov	r5, r1
   28ff0:	9a000007 	bls	29014 <CPtrArray::operator[](unsigned int) const+0x38>
   28ff4:	e5942000 	ldr	r2, [r4]
   28ff8:	e1520003 	cmp	r2, r3
   28ffc:	3a00000e 	bcc	2903c <CPtrArray::operator[](unsigned int) const+0x60>
   29000:	e594300c 	ldr	r3, [r4, #12]
   29004:	e3530000 	cmp	r3, #0
   29008:	0a000014 	beq	29060 <CPtrArray::operator[](unsigned int) const+0x84>
   2900c:	e7930105 	ldr	r0, [r3, r5, lsl #2]
   29010:	e8bd8070 	pop	{r4, r5, r6, pc}
   29014:	e3a0203e 	mov	r2, #62	; 0x3e
   29018:	e3011670 	movw	r1, #5744	; 0x1670
   2901c:	e30106ac 	movw	r0, #5804	; 0x16ac
   29020:	e3401003 	movt	r1, #3
   29024:	e3400003 	movt	r0, #3
   29028:	ebffeedb 	bl	24b9c <assertion_failed>
   2902c:	e5943008 	ldr	r3, [r4, #8]
   29030:	e5942000 	ldr	r2, [r4]
   29034:	e1520003 	cmp	r2, r3
   29038:	2afffff0 	bcs	29000 <CPtrArray::operator[](unsigned int) const+0x24>
   2903c:	e3011670 	movw	r1, #5744	; 0x1670
   29040:	e30106c4 	movw	r0, #5828	; 0x16c4
   29044:	e3401003 	movt	r1, #3
   29048:	e3400003 	movt	r0, #3
   2904c:	e3a0203f 	mov	r2, #63	; 0x3f
   29050:	ebffeed1 	bl	24b9c <assertion_failed>
   29054:	e594300c 	ldr	r3, [r4, #12]
   29058:	e3530000 	cmp	r3, #0
   2905c:	1affffea 	bne	2900c <CPtrArray::operator[](unsigned int) const+0x30>
   29060:	e3a02040 	mov	r2, #64	; 0x40
   29064:	e3011670 	movw	r1, #5744	; 0x1670
   29068:	e30106e4 	movw	r0, #5860	; 0x16e4
   2906c:	e3401003 	movt	r1, #3
   29070:	e3400003 	movt	r0, #3
   29074:	ebffeec8 	bl	24b9c <assertion_failed>
   29078:	e594300c 	ldr	r3, [r4, #12]
   2907c:	e7930105 	ldr	r0, [r3, r5, lsl #2]
   29080:	e8bd8070 	pop	{r4, r5, r6, pc}

00029084 <CPtrArray::Append(void*)>:
   29084:	e5903000 	ldr	r3, [r0]
   29088:	e92d4070 	push	{r4, r5, r6, lr}
   2908c:	e3530000 	cmp	r3, #0
   29090:	e1a04000 	mov	r4, r0
   29094:	e1a06001 	mov	r6, r1
   29098:	0a00002f 	beq	2915c <CPtrArray::Append(void*)+0xd8>
   2909c:	e594300c 	ldr	r3, [r4, #12]
   290a0:	e3530000 	cmp	r3, #0
   290a4:	0a00003f 	beq	291a8 <CPtrArray::Append(void*)+0x124>
   290a8:	e5940008 	ldr	r0, [r4, #8]
   290ac:	e5943000 	ldr	r3, [r4]
   290b0:	e1500003 	cmp	r0, r3
   290b4:	8a00001f 	bhi	29138 <CPtrArray::Append(void*)+0xb4>
   290b8:	e1500003 	cmp	r0, r3
   290bc:	1594500c 	ldrne	r5, [r4, #12]
   290c0:	0a000003 	beq	290d4 <CPtrArray::Append(void*)+0x50>
   290c4:	e7856100 	str	r6, [r5, r0, lsl #2]
   290c8:	e2803001 	add	r3, r0, #1
   290cc:	e5843008 	str	r3, [r4, #8]
   290d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   290d4:	e5943004 	ldr	r3, [r4, #4]
   290d8:	e3530000 	cmp	r3, #0
   290dc:	0a000029 	beq	29188 <CPtrArray::Append(void*)+0x104>
   290e0:	e0800003 	add	r0, r0, r3
   290e4:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   290e8:	9a000022 	bls	29178 <CPtrArray::Append(void*)+0xf4>
   290ec:	e3e00000 	mvn	r0, #0
   290f0:	ebffe39e 	bl	21f70 <operator new[](unsigned int)>
   290f4:	e1a05000 	mov	r5, r0
   290f8:	e5942000 	ldr	r2, [r4]
   290fc:	e1a00005 	mov	r0, r5
   29100:	e594100c 	ldr	r1, [r4, #12]
   29104:	e1a02102 	lsl	r2, r2, #2
   29108:	ebffe823 	bl	2319c <memcpy>
   2910c:	e594000c 	ldr	r0, [r4, #12]
   29110:	e3500000 	cmp	r0, #0
   29114:	0a000000 	beq	2911c <CPtrArray::Append(void*)+0x98>
   29118:	ebffe396 	bl	21f78 <operator delete[](void*)>
   2911c:	e5943000 	ldr	r3, [r4]
   29120:	e5942004 	ldr	r2, [r4, #4]
   29124:	e5940008 	ldr	r0, [r4, #8]
   29128:	e0833002 	add	r3, r3, r2
   2912c:	e584500c 	str	r5, [r4, #12]
   29130:	e5843000 	str	r3, [r4]
   29134:	eaffffe2 	b	290c4 <CPtrArray::Append(void*)+0x40>
   29138:	e3011670 	movw	r1, #5744	; 0x1670
   2913c:	e30106c4 	movw	r0, #5828	; 0x16c4
   29140:	e3401003 	movt	r1, #3
   29144:	e3400003 	movt	r0, #3
   29148:	e3a0204a 	mov	r2, #74	; 0x4a
   2914c:	ebffee92 	bl	24b9c <assertion_failed>
   29150:	e5940008 	ldr	r0, [r4, #8]
   29154:	e5943000 	ldr	r3, [r4]
   29158:	eaffffd6 	b	290b8 <CPtrArray::Append(void*)+0x34>
   2915c:	e3011670 	movw	r1, #5744	; 0x1670
   29160:	e3010680 	movw	r0, #5760	; 0x1680
   29164:	e3401003 	movt	r1, #3
   29168:	e3400003 	movt	r0, #3
   2916c:	e3a02047 	mov	r2, #71	; 0x47
   29170:	ebffee89 	bl	24b9c <assertion_failed>
   29174:	eaffffc8 	b	2909c <CPtrArray::Append(void*)+0x18>
   29178:	e1a00100 	lsl	r0, r0, #2
   2917c:	ebffe37b 	bl	21f70 <operator new[](unsigned int)>
   29180:	e1a05000 	mov	r5, r0
   29184:	eaffffdb 	b	290f8 <CPtrArray::Append(void*)+0x74>
   29188:	e3011670 	movw	r1, #5744	; 0x1670
   2918c:	e3010694 	movw	r0, #5780	; 0x1694
   29190:	e3401003 	movt	r1, #3
   29194:	e3400003 	movt	r0, #3
   29198:	e3a0204d 	mov	r2, #77	; 0x4d
   2919c:	ebffee7e 	bl	24b9c <assertion_failed>
   291a0:	e8940009 	ldm	r4, {r0, r3}
   291a4:	eaffffcd 	b	290e0 <CPtrArray::Append(void*)+0x5c>
   291a8:	e3011670 	movw	r1, #5744	; 0x1670
   291ac:	e30106e4 	movw	r0, #5860	; 0x16e4
   291b0:	e3401003 	movt	r1, #3
   291b4:	e3400003 	movt	r0, #3
   291b8:	e3a02048 	mov	r2, #72	; 0x48
   291bc:	ebffee76 	bl	24b9c <assertion_failed>
   291c0:	eaffffb8 	b	290a8 <CPtrArray::Append(void*)+0x24>

000291c4 <CPtrArray::RemoveLast()>:
   291c4:	e5903008 	ldr	r3, [r0, #8]
   291c8:	e92d4010 	push	{r4, lr}
   291cc:	e3530000 	cmp	r3, #0
   291d0:	e1a04000 	mov	r4, r0
   291d4:	1a000006 	bne	291f4 <CPtrArray::RemoveLast()+0x30>
   291d8:	e3011670 	movw	r1, #5744	; 0x1670
   291dc:	e30106f4 	movw	r0, #5876	; 0x16f4
   291e0:	e3401003 	movt	r1, #3
   291e4:	e3400003 	movt	r0, #3
   291e8:	e3a02060 	mov	r2, #96	; 0x60
   291ec:	ebffee6a 	bl	24b9c <assertion_failed>
   291f0:	e5943008 	ldr	r3, [r4, #8]
   291f4:	e2433001 	sub	r3, r3, #1
   291f8:	e5843008 	str	r3, [r4, #8]
   291fc:	e8bd8010 	pop	{r4, pc}

00029200 <CPtrList::CPtrList()>:
   29200:	e3a02000 	mov	r2, #0
   29204:	e5802000 	str	r2, [r0]
   29208:	e12fff1e 	bx	lr

0002920c <CPtrList::~CPtrList()>:
   2920c:	e5903000 	ldr	r3, [r0]
   29210:	e92d4010 	push	{r4, lr}
   29214:	e3530000 	cmp	r3, #0
   29218:	e1a04000 	mov	r4, r0
   2921c:	0a000005 	beq	29238 <CPtrList::~CPtrList()+0x2c>
   29220:	e3011708 	movw	r1, #5896	; 0x1708
   29224:	e3010714 	movw	r0, #5908	; 0x1714
   29228:	e3401003 	movt	r1, #3
   2922c:	e3400003 	movt	r0, #3
   29230:	e3a0202a 	mov	r2, #42	; 0x2a
   29234:	ebffee58 	bl	24b9c <assertion_failed>
   29238:	e1a00004 	mov	r0, r4
   2923c:	e8bd8010 	pop	{r4, pc}

00029240 <CPtrList::GetFirst()>:
   29240:	e5900000 	ldr	r0, [r0]
   29244:	e12fff1e 	bx	lr

00029248 <CPtrList::GetNext(TPtrListElement*)>:
   29248:	e92d4010 	push	{r4, lr}
   2924c:	e2514000 	subs	r4, r1, #0
   29250:	0a00000c 	beq	29288 <CPtrList::GetNext(TPtrListElement*)+0x40>
   29254:	e5942000 	ldr	r2, [r4]
   29258:	e3043d43 	movw	r3, #19779	; 0x4d43
   2925c:	e345304c 	movt	r3, #20556	; 0x504c
   29260:	e1520003 	cmp	r2, r3
   29264:	0a000005 	beq	29280 <CPtrList::GetNext(TPtrListElement*)+0x38>
   29268:	e3011708 	movw	r1, #5896	; 0x1708
   2926c:	e3010734 	movw	r0, #5940	; 0x1734
   29270:	e3401003 	movt	r1, #3
   29274:	e3400003 	movt	r0, #3
   29278:	e3a02035 	mov	r2, #53	; 0x35
   2927c:	ebffee46 	bl	24b9c <assertion_failed>
   29280:	e5940008 	ldr	r0, [r4, #8]
   29284:	e8bd8010 	pop	{r4, pc}
   29288:	e3011708 	movw	r1, #5896	; 0x1708
   2928c:	e3010724 	movw	r0, #5924	; 0x1724
   29290:	e3401003 	movt	r1, #3
   29294:	e3400003 	movt	r0, #3
   29298:	e3a02034 	mov	r2, #52	; 0x34
   2929c:	ebffee3e 	bl	24b9c <assertion_failed>
   292a0:	eaffffeb 	b	29254 <CPtrList::GetNext(TPtrListElement*)+0xc>

000292a4 <CPtrList::GetPtr(TPtrListElement*)>:
   292a4:	e92d4010 	push	{r4, lr}
   292a8:	e2514000 	subs	r4, r1, #0
   292ac:	0a00000c 	beq	292e4 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   292b0:	e5942000 	ldr	r2, [r4]
   292b4:	e3043d43 	movw	r3, #19779	; 0x4d43
   292b8:	e345304c 	movt	r3, #20556	; 0x504c
   292bc:	e1520003 	cmp	r2, r3
   292c0:	0a000005 	beq	292dc <CPtrList::GetPtr(TPtrListElement*)+0x38>
   292c4:	e3011708 	movw	r1, #5896	; 0x1708
   292c8:	e3010734 	movw	r0, #5940	; 0x1734
   292cc:	e3401003 	movt	r1, #3
   292d0:	e3400003 	movt	r0, #3
   292d4:	e3a0203d 	mov	r2, #61	; 0x3d
   292d8:	ebffee2f 	bl	24b9c <assertion_failed>
   292dc:	e594000c 	ldr	r0, [r4, #12]
   292e0:	e8bd8010 	pop	{r4, pc}
   292e4:	e3011708 	movw	r1, #5896	; 0x1708
   292e8:	e3010724 	movw	r0, #5924	; 0x1724
   292ec:	e3401003 	movt	r1, #3
   292f0:	e3400003 	movt	r0, #3
   292f4:	e3a0203c 	mov	r2, #60	; 0x3c
   292f8:	ebffee27 	bl	24b9c <assertion_failed>
   292fc:	eaffffeb 	b	292b0 <CPtrList::GetPtr(TPtrListElement*)+0xc>

00029300 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   29300:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29304:	e1a06000 	mov	r6, r0
   29308:	e3a00010 	mov	r0, #16
   2930c:	e1a04001 	mov	r4, r1
   29310:	e1a07002 	mov	r7, r2
   29314:	ebffe314 	bl	21f6c <operator new(unsigned int)>
   29318:	e5961000 	ldr	r1, [r6]
   2931c:	e3043d43 	movw	r3, #19779	; 0x4d43
   29320:	e345304c 	movt	r3, #20556	; 0x504c
   29324:	e3510000 	cmp	r1, #0
   29328:	e1a05000 	mov	r5, r0
   2932c:	e580700c 	str	r7, [r0, #12]
   29330:	e5803000 	str	r3, [r0]
   29334:	0a000029 	beq	293e0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   29338:	e3540000 	cmp	r4, #0
   2933c:	0a00002e 	beq	293fc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   29340:	e5942000 	ldr	r2, [r4]
   29344:	e3043d43 	movw	r3, #19779	; 0x4d43
   29348:	e345304c 	movt	r3, #20556	; 0x504c
   2934c:	e1520003 	cmp	r2, r3
   29350:	0a000005 	beq	2936c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
   29354:	e3011708 	movw	r1, #5896	; 0x1708
   29358:	e3010774 	movw	r0, #6004	; 0x1774
   2935c:	e3401003 	movt	r1, #3
   29360:	e3400003 	movt	r0, #3
   29364:	e3a0204e 	mov	r2, #78	; 0x4e
   29368:	ebffee0b 	bl	24b9c <assertion_failed>
   2936c:	e5963000 	ldr	r3, [r6]
   29370:	e1540003 	cmp	r4, r3
   29374:	0a000013 	beq	293c8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
   29378:	e5943004 	ldr	r3, [r4, #4]
   2937c:	e5854008 	str	r4, [r5, #8]
   29380:	e3530000 	cmp	r3, #0
   29384:	e5853004 	str	r3, [r5, #4]
   29388:	0a00000c 	beq	293c0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   2938c:	e5931000 	ldr	r1, [r3]
   29390:	e3042d43 	movw	r2, #19779	; 0x4d43
   29394:	e345204c 	movt	r2, #20556	; 0x504c
   29398:	e1510002 	cmp	r1, r2
   2939c:	0a000006 	beq	293bc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
   293a0:	e3011708 	movw	r1, #5896	; 0x1708
   293a4:	e3010798 	movw	r0, #6040	; 0x1798
   293a8:	e3401003 	movt	r1, #3
   293ac:	e3400003 	movt	r0, #3
   293b0:	e3a02060 	mov	r2, #96	; 0x60
   293b4:	ebffedf8 	bl	24b9c <assertion_failed>
   293b8:	e5943004 	ldr	r3, [r4, #4]
   293bc:	e5835008 	str	r5, [r3, #8]
   293c0:	e5845004 	str	r5, [r4, #4]
   293c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   293c8:	e5845004 	str	r5, [r4, #4]
   293cc:	e3a03000 	mov	r3, #0
   293d0:	e5854008 	str	r4, [r5, #8]
   293d4:	e5865000 	str	r5, [r6]
   293d8:	e5853004 	str	r3, [r5, #4]
   293dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   293e0:	e3011708 	movw	r1, #5896	; 0x1708
   293e4:	e3010758 	movw	r0, #5976	; 0x1758
   293e8:	e3401003 	movt	r1, #3
   293ec:	e3400003 	movt	r0, #3
   293f0:	e3a0204c 	mov	r2, #76	; 0x4c
   293f4:	ebffede8 	bl	24b9c <assertion_failed>
   293f8:	eaffffce 	b	29338 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
   293fc:	e3011708 	movw	r1, #5896	; 0x1708
   29400:	e3010768 	movw	r0, #5992	; 0x1768
   29404:	e3401003 	movt	r1, #3
   29408:	e3400003 	movt	r0, #3
   2940c:	e3a0204d 	mov	r2, #77	; 0x4d
   29410:	ebffede1 	bl	24b9c <assertion_failed>
   29414:	eaffffc9 	b	29340 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

00029418 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   29418:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2941c:	e1a06000 	mov	r6, r0
   29420:	e3a00010 	mov	r0, #16
   29424:	e1a05001 	mov	r5, r1
   29428:	e1a07002 	mov	r7, r2
   2942c:	ebffe2ce 	bl	21f6c <operator new(unsigned int)>
   29430:	e3550000 	cmp	r5, #0
   29434:	e3043d43 	movw	r3, #19779	; 0x4d43
   29438:	e345304c 	movt	r3, #20556	; 0x504c
   2943c:	e1a04000 	mov	r4, r0
   29440:	e5803000 	str	r3, [r0]
   29444:	e580700c 	str	r7, [r0, #12]
   29448:	e5963000 	ldr	r3, [r6]
   2944c:	0a000020 	beq	294d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   29450:	e3530000 	cmp	r3, #0
   29454:	0a00002b 	beq	29508 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   29458:	e5952000 	ldr	r2, [r5]
   2945c:	e3043d43 	movw	r3, #19779	; 0x4d43
   29460:	e345304c 	movt	r3, #20556	; 0x504c
   29464:	e1520003 	cmp	r2, r3
   29468:	0a000005 	beq	29484 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   2946c:	e3011708 	movw	r1, #5896	; 0x1708
   29470:	e30107c0 	movw	r0, #6080	; 0x17c0
   29474:	e3401003 	movt	r1, #3
   29478:	e3400003 	movt	r0, #3
   2947c:	e3a0207e 	mov	r2, #126	; 0x7e
   29480:	ebffedc5 	bl	24b9c <assertion_failed>
   29484:	e5953008 	ldr	r3, [r5, #8]
   29488:	e5845004 	str	r5, [r4, #4]
   2948c:	e3530000 	cmp	r3, #0
   29490:	e5843008 	str	r3, [r4, #8]
   29494:	0a00000c 	beq	294cc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
   29498:	e5931000 	ldr	r1, [r3]
   2949c:	e3042d43 	movw	r2, #19779	; 0x4d43
   294a0:	e345204c 	movt	r2, #20556	; 0x504c
   294a4:	e1510002 	cmp	r1, r2
   294a8:	0a000006 	beq	294c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
   294ac:	e3011708 	movw	r1, #5896	; 0x1708
   294b0:	e30107e4 	movw	r0, #6116	; 0x17e4
   294b4:	e3401003 	movt	r1, #3
   294b8:	e3400003 	movt	r0, #3
   294bc:	e3a02085 	mov	r2, #133	; 0x85
   294c0:	ebffedb5 	bl	24b9c <assertion_failed>
   294c4:	e5953008 	ldr	r3, [r5, #8]
   294c8:	e5834004 	str	r4, [r3, #4]
   294cc:	e5854008 	str	r4, [r5, #8]
   294d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   294d4:	e3530000 	cmp	r3, #0
   294d8:	0a000005 	beq	294f4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   294dc:	e3011708 	movw	r1, #5896	; 0x1708
   294e0:	e3010714 	movw	r0, #5908	; 0x1714
   294e4:	e3401003 	movt	r1, #3
   294e8:	e3400003 	movt	r0, #3
   294ec:	e3a02074 	mov	r2, #116	; 0x74
   294f0:	ebffeda9 	bl	24b9c <assertion_failed>
   294f4:	e3a03000 	mov	r3, #0
   294f8:	e5864000 	str	r4, [r6]
   294fc:	e5843004 	str	r3, [r4, #4]
   29500:	e5843008 	str	r3, [r4, #8]
   29504:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29508:	e3011708 	movw	r1, #5896	; 0x1708
   2950c:	e3010758 	movw	r0, #5976	; 0x1758
   29510:	e3401003 	movt	r1, #3
   29514:	e3400003 	movt	r0, #3
   29518:	e3a0207d 	mov	r2, #125	; 0x7d
   2951c:	ebffed9e 	bl	24b9c <assertion_failed>
   29520:	eaffffcc 	b	29458 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

00029524 <CPtrList::Remove(TPtrListElement*)>:
   29524:	e92d4070 	push	{r4, r5, r6, lr}
   29528:	e2514000 	subs	r4, r1, #0
   2952c:	e1a05000 	mov	r5, r0
   29530:	0a000048 	beq	29658 <CPtrList::Remove(TPtrListElement*)+0x134>
   29534:	e5942000 	ldr	r2, [r4]
   29538:	e3043d43 	movw	r3, #19779	; 0x4d43
   2953c:	e345304c 	movt	r3, #20556	; 0x504c
   29540:	e1520003 	cmp	r2, r3
   29544:	0a000005 	beq	29560 <CPtrList::Remove(TPtrListElement*)+0x3c>
   29548:	e3011708 	movw	r1, #5896	; 0x1708
   2954c:	e3010734 	movw	r0, #5940	; 0x1734
   29550:	e3401003 	movt	r1, #3
   29554:	e3400003 	movt	r0, #3
   29558:	e3a02090 	mov	r2, #144	; 0x90
   2955c:	ebffed8e 	bl	24b9c <assertion_failed>
   29560:	e5953000 	ldr	r3, [r5]
   29564:	e1540003 	cmp	r4, r3
   29568:	0a000027 	beq	2960c <CPtrList::Remove(TPtrListElement*)+0xe8>
   2956c:	e5943004 	ldr	r3, [r4, #4]
   29570:	e3530000 	cmp	r3, #0
   29574:	0a00003e 	beq	29674 <CPtrList::Remove(TPtrListElement*)+0x150>
   29578:	e5931000 	ldr	r1, [r3]
   2957c:	e3042d43 	movw	r2, #19779	; 0x4d43
   29580:	e345204c 	movt	r2, #20556	; 0x504c
   29584:	e1510002 	cmp	r1, r2
   29588:	0a000006 	beq	295a8 <CPtrList::Remove(TPtrListElement*)+0x84>
   2958c:	e3011708 	movw	r1, #5896	; 0x1708
   29590:	e3010854 	movw	r0, #6228	; 0x1854
   29594:	e3401003 	movt	r1, #3
   29598:	e3400003 	movt	r0, #3
   2959c:	e3a0209f 	mov	r2, #159	; 0x9f
   295a0:	ebffed7d 	bl	24b9c <assertion_failed>
   295a4:	e5943004 	ldr	r3, [r4, #4]
   295a8:	e5942008 	ldr	r2, [r4, #8]
   295ac:	e5832008 	str	r2, [r3, #8]
   295b0:	e5942008 	ldr	r2, [r4, #8]
   295b4:	e3520000 	cmp	r2, #0
   295b8:	0a00000d 	beq	295f4 <CPtrList::Remove(TPtrListElement*)+0xd0>
   295bc:	e5920000 	ldr	r0, [r2]
   295c0:	e3041d43 	movw	r1, #19779	; 0x4d43
   295c4:	e345104c 	movt	r1, #20556	; 0x504c
   295c8:	e1500001 	cmp	r0, r1
   295cc:	0a000007 	beq	295f0 <CPtrList::Remove(TPtrListElement*)+0xcc>
   295d0:	e3a020a4 	mov	r2, #164	; 0xa4
   295d4:	e3011708 	movw	r1, #5896	; 0x1708
   295d8:	e3010810 	movw	r0, #6160	; 0x1810
   295dc:	e3401003 	movt	r1, #3
   295e0:	e3400003 	movt	r0, #3
   295e4:	ebffed6c 	bl	24b9c <assertion_failed>
   295e8:	e5942008 	ldr	r2, [r4, #8]
   295ec:	e5943004 	ldr	r3, [r4, #4]
   295f0:	e5823004 	str	r3, [r2, #4]
   295f4:	e3a03000 	mov	r3, #0
   295f8:	e1a00004 	mov	r0, r4
   295fc:	e5843000 	str	r3, [r4]
   29600:	e3a01010 	mov	r1, #16
   29604:	e8bd4070 	pop	{r4, r5, r6, lr}
   29608:	eaffe25b 	b	21f7c <operator delete(void*, unsigned int)>
   2960c:	e5943008 	ldr	r3, [r4, #8]
   29610:	e3530000 	cmp	r3, #0
   29614:	e5853000 	str	r3, [r5]
   29618:	0afffff5 	beq	295f4 <CPtrList::Remove(TPtrListElement*)+0xd0>
   2961c:	e5931000 	ldr	r1, [r3]
   29620:	e3042d43 	movw	r2, #19779	; 0x4d43
   29624:	e345204c 	movt	r2, #20556	; 0x504c
   29628:	e1510002 	cmp	r1, r2
   2962c:	0a000006 	beq	2964c <CPtrList::Remove(TPtrListElement*)+0x128>
   29630:	e3011708 	movw	r1, #5896	; 0x1708
   29634:	e3010810 	movw	r0, #6160	; 0x1810
   29638:	e3401003 	movt	r1, #3
   2963c:	e3400003 	movt	r0, #3
   29640:	e3a02098 	mov	r2, #152	; 0x98
   29644:	ebffed54 	bl	24b9c <assertion_failed>
   29648:	e5943008 	ldr	r3, [r4, #8]
   2964c:	e3a02000 	mov	r2, #0
   29650:	e5832004 	str	r2, [r3, #4]
   29654:	eaffffe6 	b	295f4 <CPtrList::Remove(TPtrListElement*)+0xd0>
   29658:	e3011708 	movw	r1, #5896	; 0x1708
   2965c:	e3010724 	movw	r0, #5924	; 0x1724
   29660:	e3401003 	movt	r1, #3
   29664:	e3400003 	movt	r0, #3
   29668:	e3a0208f 	mov	r2, #143	; 0x8f
   2966c:	ebffed4a 	bl	24b9c <assertion_failed>
   29670:	eaffffaf 	b	29534 <CPtrList::Remove(TPtrListElement*)+0x10>
   29674:	e3011708 	movw	r1, #5896	; 0x1708
   29678:	e301083c 	movw	r0, #6204	; 0x183c
   2967c:	e3401003 	movt	r1, #3
   29680:	e3400003 	movt	r0, #3
   29684:	e3a0209e 	mov	r2, #158	; 0x9e
   29688:	ebffed43 	bl	24b9c <assertion_failed>
   2968c:	e5943004 	ldr	r3, [r4, #4]
   29690:	eaffffb8 	b	29578 <CPtrList::Remove(TPtrListElement*)+0x54>

00029694 <CPtrList::Find(void*)>:
   29694:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29698:	e5904000 	ldr	r4, [r0]
   2969c:	e3540000 	cmp	r4, #0
   296a0:	0a000016 	beq	29700 <CPtrList::Find(void*)+0x6c>
   296a4:	e3048d43 	movw	r8, #19779	; 0x4d43
   296a8:	e3017708 	movw	r7, #5896	; 0x1708
   296ac:	e3016734 	movw	r6, #5940	; 0x1734
   296b0:	e1a05001 	mov	r5, r1
   296b4:	e345804c 	movt	r8, #20556	; 0x504c
   296b8:	e3407003 	movt	r7, #3
   296bc:	e3406003 	movt	r6, #3
   296c0:	ea000002 	b	296d0 <CPtrList::Find(void*)+0x3c>
   296c4:	e5944008 	ldr	r4, [r4, #8]
   296c8:	e3540000 	cmp	r4, #0
   296cc:	0a00000b 	beq	29700 <CPtrList::Find(void*)+0x6c>
   296d0:	e5943000 	ldr	r3, [r4]
   296d4:	e3a020b3 	mov	r2, #179	; 0xb3
   296d8:	e1a01007 	mov	r1, r7
   296dc:	e1a00006 	mov	r0, r6
   296e0:	e1530008 	cmp	r3, r8
   296e4:	0a000000 	beq	296ec <CPtrList::Find(void*)+0x58>
   296e8:	ebffed2b 	bl	24b9c <assertion_failed>
   296ec:	e594300c 	ldr	r3, [r4, #12]
   296f0:	e1530005 	cmp	r3, r5
   296f4:	1afffff2 	bne	296c4 <CPtrList::Find(void*)+0x30>
   296f8:	e1a00004 	mov	r0, r4
   296fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29700:	e3a04000 	mov	r4, #0
   29704:	e1a00004 	mov	r0, r4
   29708:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002970c <mem_init>:
   2970c:	e0801001 	add	r1, r0, r1
   29710:	e30228a4 	movw	r2, #10404	; 0x28a4
   29714:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   29718:	e3402143 	movt	r2, #323	; 0x143
   2971c:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   29720:	e3500605 	cmp	r0, #5242880	; 0x500000
   29724:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   29728:	e582100c 	str	r1, [r2, #12]
   2972c:	33a00605 	movcc	r0, #5242880	; 0x500000
   29730:	e2411501 	sub	r1, r1, #4194304	; 0x400000
   29734:	e3c3300f 	bic	r3, r3, #15
   29738:	e5820000 	str	r0, [r2]
   2973c:	e982000a 	stmib	r2, {r1, r3}
   29740:	e12fff1e 	bx	lr

00029744 <mem_get_size>:
   29744:	e30238a4 	movw	r3, #10404	; 0x28a4
   29748:	e3403143 	movt	r3, #323	; 0x143
   2974c:	e5930004 	ldr	r0, [r3, #4]
   29750:	e5931000 	ldr	r1, [r3]
   29754:	e593200c 	ldr	r2, [r3, #12]
   29758:	e5933008 	ldr	r3, [r3, #8]
   2975c:	e0400001 	sub	r0, r0, r1
   29760:	e0423003 	sub	r3, r2, r3
   29764:	e0800003 	add	r0, r0, r3
   29768:	e12fff1e 	bx	lr

0002976c <malloc>:
   2976c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29770:	e30278a4 	movw	r7, #10404	; 0x28a4
   29774:	e3407143 	movt	r7, #323	; 0x143
   29778:	e1a05000 	mov	r5, r0
   2977c:	e5973000 	ldr	r3, [r7]
   29780:	e3530000 	cmp	r3, #0
   29784:	0a000053 	beq	298d8 <malloc+0x16c>
   29788:	e5970010 	ldr	r0, [r7, #16]
   2978c:	e3500000 	cmp	r0, #0
   29790:	1a00004b 	bne	298c4 <malloc+0x158>
   29794:	e3014bac 	movw	r4, #7084	; 0x1bac
   29798:	e3404003 	movt	r4, #3
   2979c:	e5943000 	ldr	r3, [r4]
   297a0:	e3530000 	cmp	r3, #0
   297a4:	0a000007 	beq	297c8 <malloc+0x5c>
   297a8:	e1550003 	cmp	r5, r3
   297ac:	8a000002 	bhi	297bc <malloc+0x50>
   297b0:	ea000011 	b	297fc <malloc+0x90>
   297b4:	e1530005 	cmp	r3, r5
   297b8:	2a00000f 	bcs	297fc <malloc+0x90>
   297bc:	e5b43008 	ldr	r3, [r4, #8]!
   297c0:	e3530000 	cmp	r3, #0
   297c4:	1afffffa 	bne	297b4 <malloc+0x48>
   297c8:	e5976000 	ldr	r6, [r7]
   297cc:	e285301f 	add	r3, r5, #31
   297d0:	e3c3300f 	bic	r3, r3, #15
   297d4:	e5972004 	ldr	r2, [r7, #4]
   297d8:	e0863003 	add	r3, r6, r3
   297dc:	e5873000 	str	r3, [r7]
   297e0:	e1530002 	cmp	r3, r2
   297e4:	9a000028 	bls	2988c <malloc+0x120>
   297e8:	e5974010 	ldr	r4, [r7, #16]
   297ec:	e3540000 	cmp	r4, #0
   297f0:	1a000035 	bne	298cc <malloc+0x160>
   297f4:	e1a00004 	mov	r0, r4
   297f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   297fc:	e5946004 	ldr	r6, [r4, #4]
   29800:	e3560000 	cmp	r6, #0
   29804:	01a05003 	moveq	r5, r3
   29808:	0affffee 	beq	297c8 <malloc+0x5c>
   2980c:	e5962000 	ldr	r2, [r6]
   29810:	e3043d43 	movw	r3, #19779	; 0x4d43
   29814:	e344324c 	movt	r3, #16972	; 0x424c
   29818:	e1520003 	cmp	r2, r3
   2981c:	0a000005 	beq	29838 <malloc+0xcc>
   29820:	e3011880 	movw	r1, #6272	; 0x1880
   29824:	e30108a0 	movw	r0, #6304	; 0x18a0
   29828:	e3401003 	movt	r1, #3
   2982c:	e3400003 	movt	r0, #3
   29830:	e3a02089 	mov	r2, #137	; 0x89
   29834:	ebffecd8 	bl	24b9c <assertion_failed>
   29838:	e5963008 	ldr	r3, [r6, #8]
   2983c:	e5843004 	str	r3, [r4, #4]
   29840:	e5973010 	ldr	r3, [r7, #16]
   29844:	e3530000 	cmp	r3, #0
   29848:	1a00001b 	bne	298bc <malloc+0x150>
   2984c:	e2864010 	add	r4, r6, #16
   29850:	e3a03000 	mov	r3, #0
   29854:	e314000f 	tst	r4, #15
   29858:	e5c63008 	strb	r3, [r6, #8]
   2985c:	e5c63009 	strb	r3, [r6, #9]
   29860:	e5c6300a 	strb	r3, [r6, #10]
   29864:	e5c6300b 	strb	r3, [r6, #11]
   29868:	0affffe1 	beq	297f4 <malloc+0x88>
   2986c:	e3a020a1 	mov	r2, #161	; 0xa1
   29870:	e3011880 	movw	r1, #6272	; 0x1880
   29874:	e30108c4 	movw	r0, #6340	; 0x18c4
   29878:	e3401003 	movt	r1, #3
   2987c:	e3400003 	movt	r0, #3
   29880:	ebffecc5 	bl	24b9c <assertion_failed>
   29884:	e1a00004 	mov	r0, r4
   29888:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2988c:	e3a0304d 	mov	r3, #77	; 0x4d
   29890:	e5c63001 	strb	r3, [r6, #1]
   29894:	e3a03042 	mov	r3, #66	; 0x42
   29898:	e5c63003 	strb	r3, [r6, #3]
   2989c:	e5973010 	ldr	r3, [r7, #16]
   298a0:	e3a02043 	mov	r2, #67	; 0x43
   298a4:	e5865004 	str	r5, [r6, #4]
   298a8:	e3530000 	cmp	r3, #0
   298ac:	e5c62000 	strb	r2, [r6]
   298b0:	e3a0204c 	mov	r2, #76	; 0x4c
   298b4:	e5c62002 	strb	r2, [r6, #2]
   298b8:	0affffe3 	beq	2984c <malloc+0xe0>
   298bc:	ebffe1e4 	bl	22054 <LeaveCritical>
   298c0:	eaffffe1 	b	2984c <malloc+0xe0>
   298c4:	ebffe1b4 	bl	21f9c <EnterCritical>
   298c8:	eaffffb1 	b	29794 <malloc+0x28>
   298cc:	ebffe1e0 	bl	22054 <LeaveCritical>
   298d0:	e3a04000 	mov	r4, #0
   298d4:	eaffffc6 	b	297f4 <malloc+0x88>
   298d8:	e3011880 	movw	r1, #6272	; 0x1880
   298dc:	e301088c 	movw	r0, #6284	; 0x188c
   298e0:	e3401003 	movt	r1, #3
   298e4:	e3400003 	movt	r0, #3
   298e8:	e3a0206f 	mov	r2, #111	; 0x6f
   298ec:	ebffecaa 	bl	24b9c <assertion_failed>
   298f0:	eaffffa4 	b	29788 <malloc+0x1c>

000298f4 <free>:
   298f4:	e92d4070 	push	{r4, r5, r6, lr}
   298f8:	e2505000 	subs	r5, r0, #0
   298fc:	08bd8070 	popeq	{r4, r5, r6, pc}
   29900:	e5352010 	ldr	r2, [r5, #-16]!
   29904:	e3043d43 	movw	r3, #19779	; 0x4d43
   29908:	e344324c 	movt	r3, #16972	; 0x424c
   2990c:	e1520003 	cmp	r2, r3
   29910:	0a000005 	beq	2992c <free+0x38>
   29914:	e3011880 	movw	r1, #6272	; 0x1880
   29918:	e30108a0 	movw	r0, #6304	; 0x18a0
   2991c:	e3401003 	movt	r1, #3
   29920:	e3400003 	movt	r0, #3
   29924:	e3a020ae 	mov	r2, #174	; 0xae
   29928:	ebffec9b 	bl	24b9c <assertion_failed>
   2992c:	e3014bac 	movw	r4, #7084	; 0x1bac
   29930:	e3404003 	movt	r4, #3
   29934:	e5943000 	ldr	r3, [r4]
   29938:	e3530000 	cmp	r3, #0
   2993c:	08bd8070 	popeq	{r4, r5, r6, pc}
   29940:	e5952004 	ldr	r2, [r5, #4]
   29944:	e1520003 	cmp	r2, r3
   29948:	1a000002 	bne	29958 <free+0x64>
   2994c:	ea000005 	b	29968 <free+0x74>
   29950:	e1530002 	cmp	r3, r2
   29954:	0a000003 	beq	29968 <free+0x74>
   29958:	e5b43008 	ldr	r3, [r4, #8]!
   2995c:	e3530000 	cmp	r3, #0
   29960:	1afffffa 	bne	29950 <free+0x5c>
   29964:	e8bd8070 	pop	{r4, r5, r6, pc}
   29968:	e30268a4 	movw	r6, #10404	; 0x28a4
   2996c:	e3406143 	movt	r6, #323	; 0x143
   29970:	e5960010 	ldr	r0, [r6, #16]
   29974:	e3500000 	cmp	r0, #0
   29978:	1a000003 	bne	2998c <free+0x98>
   2997c:	e5943004 	ldr	r3, [r4, #4]
   29980:	e5853008 	str	r3, [r5, #8]
   29984:	e5845004 	str	r5, [r4, #4]
   29988:	e8bd8070 	pop	{r4, r5, r6, pc}
   2998c:	ebffe182 	bl	21f9c <EnterCritical>
   29990:	e5962010 	ldr	r2, [r6, #16]
   29994:	e5943004 	ldr	r3, [r4, #4]
   29998:	e3520000 	cmp	r2, #0
   2999c:	e5853008 	str	r3, [r5, #8]
   299a0:	e5845004 	str	r5, [r4, #4]
   299a4:	08bd8070 	popeq	{r4, r5, r6, pc}
   299a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   299ac:	eaffe1a8 	b	22054 <LeaveCritical>

000299b0 <palloc>:
   299b0:	e92d4070 	push	{r4, r5, r6, lr}
   299b4:	e30248a4 	movw	r4, #10404	; 0x28a4
   299b8:	e3404143 	movt	r4, #323	; 0x143
   299bc:	e5943008 	ldr	r3, [r4, #8]
   299c0:	e3530000 	cmp	r3, #0
   299c4:	0a00002c 	beq	29a7c <palloc+0xcc>
   299c8:	e5940014 	ldr	r0, [r4, #20]
   299cc:	e3500000 	cmp	r0, #0
   299d0:	1a000019 	bne	29a3c <palloc+0x8c>
   299d4:	e5945018 	ldr	r5, [r4, #24]
   299d8:	e3550000 	cmp	r5, #0
   299dc:	0a00001a 	beq	29a4c <palloc+0x9c>
   299e0:	e5952000 	ldr	r2, [r5]
   299e4:	e3043d43 	movw	r3, #19779	; 0x4d43
   299e8:	e3453047 	movt	r3, #20551	; 0x5047
   299ec:	e1520003 	cmp	r2, r3
   299f0:	0a000005 	beq	29a0c <palloc+0x5c>
   299f4:	e3011880 	movw	r1, #6272	; 0x1880
   299f8:	e3010904 	movw	r0, #6404	; 0x1904
   299fc:	e3401003 	movt	r1, #3
   29a00:	e3400003 	movt	r0, #3
   29a04:	e3a020d4 	mov	r2, #212	; 0xd4
   29a08:	ebffec63 	bl	24b9c <assertion_failed>
   29a0c:	e5953004 	ldr	r3, [r5, #4]
   29a10:	e3a02000 	mov	r2, #0
   29a14:	e5852000 	str	r2, [r5]
   29a18:	e5843018 	str	r3, [r4, #24]
   29a1c:	e5943014 	ldr	r3, [r4, #20]
   29a20:	e3530000 	cmp	r3, #0
   29a24:	1a000001 	bne	29a30 <palloc+0x80>
   29a28:	e1a00005 	mov	r0, r5
   29a2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   29a30:	ebffe187 	bl	22054 <LeaveCritical>
   29a34:	e1a00005 	mov	r0, r5
   29a38:	e8bd8070 	pop	{r4, r5, r6, pc}
   29a3c:	ebffe156 	bl	21f9c <EnterCritical>
   29a40:	e5945018 	ldr	r5, [r4, #24]
   29a44:	e3550000 	cmp	r5, #0
   29a48:	1affffe4 	bne	299e0 <palloc+0x30>
   29a4c:	e5945008 	ldr	r5, [r4, #8]
   29a50:	e594200c 	ldr	r2, [r4, #12]
   29a54:	e2853a01 	add	r3, r5, #4096	; 0x1000
   29a58:	e5843008 	str	r3, [r4, #8]
   29a5c:	e1530002 	cmp	r3, r2
   29a60:	9affffed 	bls	29a1c <palloc+0x6c>
   29a64:	e5945014 	ldr	r5, [r4, #20]
   29a68:	e3550000 	cmp	r5, #0
   29a6c:	0affffed 	beq	29a28 <palloc+0x78>
   29a70:	ebffe177 	bl	22054 <LeaveCritical>
   29a74:	e3a00000 	mov	r0, #0
   29a78:	e8bd8070 	pop	{r4, r5, r6, pc}
   29a7c:	e3011880 	movw	r1, #6272	; 0x1880
   29a80:	e30108f0 	movw	r0, #6384	; 0x18f0
   29a84:	e3401003 	movt	r1, #3
   29a88:	e3400003 	movt	r0, #3
   29a8c:	e3a020c6 	mov	r2, #198	; 0xc6
   29a90:	ebffec41 	bl	24b9c <assertion_failed>
   29a94:	eaffffcb 	b	299c8 <palloc+0x18>

00029a98 <pfree>:
   29a98:	e92d4070 	push	{r4, r5, r6, lr}
   29a9c:	e2505000 	subs	r5, r0, #0
   29aa0:	08bd8070 	popeq	{r4, r5, r6, pc}
   29aa4:	e30248a4 	movw	r4, #10404	; 0x28a4
   29aa8:	e3404143 	movt	r4, #323	; 0x143
   29aac:	e5940014 	ldr	r0, [r4, #20]
   29ab0:	e3500000 	cmp	r0, #0
   29ab4:	1a000006 	bne	29ad4 <pfree+0x3c>
   29ab8:	e5941018 	ldr	r1, [r4, #24]
   29abc:	e3042d43 	movw	r2, #19779	; 0x4d43
   29ac0:	e5845018 	str	r5, [r4, #24]
   29ac4:	e3452047 	movt	r2, #20551	; 0x5047
   29ac8:	e5852000 	str	r2, [r5]
   29acc:	e5851004 	str	r1, [r5, #4]
   29ad0:	e8bd8070 	pop	{r4, r5, r6, pc}
   29ad4:	ebffe130 	bl	21f9c <EnterCritical>
   29ad8:	e5941014 	ldr	r1, [r4, #20]
   29adc:	e5942018 	ldr	r2, [r4, #24]
   29ae0:	e3043d43 	movw	r3, #19779	; 0x4d43
   29ae4:	e3510000 	cmp	r1, #0
   29ae8:	e3453047 	movt	r3, #20551	; 0x5047
   29aec:	e5845018 	str	r5, [r4, #24]
   29af0:	e5853000 	str	r3, [r5]
   29af4:	e5852004 	str	r2, [r5, #4]
   29af8:	08bd8070 	popeq	{r4, r5, r6, pc}
   29afc:	e8bd4070 	pop	{r4, r5, r6, lr}
   29b00:	eaffe153 	b	22054 <LeaveCritical>

00029b04 <_GLOBAL__sub_I_mem_init>:
   29b04:	e30238a4 	movw	r3, #10404	; 0x28a4
   29b08:	e3403143 	movt	r3, #323	; 0x143
   29b0c:	e3a02001 	mov	r2, #1
   29b10:	e5832010 	str	r2, [r3, #16]
   29b14:	e5832014 	str	r2, [r3, #20]
   29b18:	e12fff1e 	bx	lr

00029b1c <CBcmMailBox::CBcmMailBox(unsigned int)>:
   29b1c:	e3a02000 	mov	r2, #0
   29b20:	e8800006 	stm	r0, {r1, r2}
   29b24:	e12fff1e 	bx	lr

00029b28 <CBcmMailBox::~CBcmMailBox()>:
   29b28:	e12fff1e 	bx	lr

00029b2c <CBcmMailBox::Flush()>:
   29b2c:	e92d4010 	push	{r4, lr}
   29b30:	e3a04a0b 	mov	r4, #45056	; 0xb000
   29b34:	e3434f00 	movt	r4, #16128	; 0x3f00
   29b38:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   29b3c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29b40:	18bd8010 	popne	{r4, pc}
   29b44:	e3a00014 	mov	r0, #20
   29b48:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   29b4c:	ebffe41f 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
   29b50:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   29b54:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29b58:	0afffff9 	beq	29b44 <CBcmMailBox::Flush()+0x18>
   29b5c:	e8bd8010 	pop	{r4, pc}

00029b60 <CBcmMailBox::Read()>:
   29b60:	e5901000 	ldr	r1, [r0]
   29b64:	e3a02a0b 	mov	r2, #45056	; 0xb000
   29b68:	e3432f00 	movt	r2, #16128	; 0x3f00
   29b6c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   29b70:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29b74:	1afffffc 	bne	29b6c <CBcmMailBox::Read()+0xc>
   29b78:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   29b7c:	e200300f 	and	r3, r0, #15
   29b80:	e1510003 	cmp	r1, r3
   29b84:	1afffff8 	bne	29b6c <CBcmMailBox::Read()+0xc>
   29b88:	e3c0000f 	bic	r0, r0, #15
   29b8c:	e12fff1e 	bx	lr

00029b90 <CBcmMailBox::Write(unsigned int)>:
   29b90:	e3a02a0b 	mov	r2, #45056	; 0xb000
   29b94:	e3432f00 	movt	r2, #16128	; 0x3f00
   29b98:	e92d4070 	push	{r4, r5, r6, lr}
   29b9c:	e1a05000 	mov	r5, r0
   29ba0:	e1a04001 	mov	r4, r1
   29ba4:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   29ba8:	e3530000 	cmp	r3, #0
   29bac:	bafffffc 	blt	29ba4 <CBcmMailBox::Write(unsigned int)+0x14>
   29bb0:	e314000f 	tst	r4, #15
   29bb4:	0a000005 	beq	29bd0 <CBcmMailBox::Write(unsigned int)+0x40>
   29bb8:	e3011928 	movw	r1, #6440	; 0x1928
   29bbc:	e3010938 	movw	r0, #6456	; 0x1938
   29bc0:	e3401003 	movt	r1, #3
   29bc4:	e3400003 	movt	r0, #3
   29bc8:	e3a0205a 	mov	r2, #90	; 0x5a
   29bcc:	ebffebf2 	bl	24b9c <assertion_failed>
   29bd0:	e5952000 	ldr	r2, [r5]
   29bd4:	e3a03a0b 	mov	r3, #45056	; 0xb000
   29bd8:	e3433f00 	movt	r3, #16128	; 0x3f00
   29bdc:	e1844002 	orr	r4, r4, r2
   29be0:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   29be4:	e8bd8070 	pop	{r4, r5, r6, pc}

00029be8 <CBcmMailBox::WriteRead(unsigned int)>:
   29be8:	e92d4070 	push	{r4, r5, r6, lr}
   29bec:	e1a05000 	mov	r5, r0
   29bf0:	e5900004 	ldr	r0, [r0, #4]
   29bf4:	e1a06001 	mov	r6, r1
   29bf8:	e3500000 	cmp	r0, #0
   29bfc:	1a00001e 	bne	29c7c <CBcmMailBox::WriteRead(unsigned int)+0x94>
   29c00:	e3a04a0b 	mov	r4, #45056	; 0xb000
   29c04:	e3434f00 	movt	r4, #16128	; 0x3f00
   29c08:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   29c0c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29c10:	1a000005 	bne	29c2c <CBcmMailBox::WriteRead(unsigned int)+0x44>
   29c14:	e3a00014 	mov	r0, #20
   29c18:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   29c1c:	ebffe3eb 	bl	22bd0 <CTimer::SimpleMsDelay(unsigned int)>
   29c20:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   29c24:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29c28:	0afffff9 	beq	29c14 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   29c2c:	e1a00005 	mov	r0, r5
   29c30:	e1a01006 	mov	r1, r6
   29c34:	ebffffd5 	bl	29b90 <CBcmMailBox::Write(unsigned int)>
   29c38:	e5950000 	ldr	r0, [r5]
   29c3c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   29c40:	e3432f00 	movt	r2, #16128	; 0x3f00
   29c44:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   29c48:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29c4c:	1afffffc 	bne	29c44 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   29c50:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   29c54:	e203100f 	and	r1, r3, #15
   29c58:	e1510000 	cmp	r1, r0
   29c5c:	1afffff8 	bne	29c44 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   29c60:	e5952004 	ldr	r2, [r5, #4]
   29c64:	e3c3400f 	bic	r4, r3, #15
   29c68:	e3520000 	cmp	r2, #0
   29c6c:	0a000000 	beq	29c74 <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   29c70:	ebffe0f7 	bl	22054 <LeaveCritical>
   29c74:	e1a00004 	mov	r0, r4
   29c78:	e8bd8070 	pop	{r4, r5, r6, pc}
   29c7c:	ebffe0c6 	bl	21f9c <EnterCritical>
   29c80:	eaffffde 	b	29c00 <CBcmMailBox::WriteRead(unsigned int)+0x18>

00029c84 <__Divide>:
   29c84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29c88:	e2514000 	subs	r4, r1, #0
   29c8c:	e1a06000 	mov	r6, r0
   29c90:	e1a07002 	mov	r7, r2
   29c94:	0a000021 	beq	29d20 <__Divide+0x9c>
   29c98:	e3a03000 	mov	r3, #0
   29c9c:	e3a05000 	mov	r5, #0
   29ca0:	e1530005 	cmp	r3, r5
   29ca4:	e1a02004 	mov	r2, r4
   29ca8:	01520006 	cmpeq	r2, r6
   29cac:	e1a04006 	mov	r4, r6
   29cb0:	2a000024 	bcs	29d48 <__Divide+0xc4>
   29cb4:	e3a01001 	mov	r1, #1
   29cb8:	ea000000 	b	29cc0 <__Divide+0x3c>
   29cbc:	e1a01000 	mov	r1, r0
   29cc0:	e0922002 	adds	r2, r2, r2
   29cc4:	e2810001 	add	r0, r1, #1
   29cc8:	e0a33003 	adc	r3, r3, r3
   29ccc:	e1530005 	cmp	r3, r5
   29cd0:	01520004 	cmpeq	r2, r4
   29cd4:	3afffff8 	bcc	29cbc <__Divide+0x38>
   29cd8:	e3500000 	cmp	r0, #0
   29cdc:	0a00000c 	beq	29d14 <__Divide+0x90>
   29ce0:	e3a00000 	mov	r0, #0
   29ce4:	e1550003 	cmp	r5, r3
   29ce8:	e2411001 	sub	r1, r1, #1
   29cec:	01540002 	cmpeq	r4, r2
   29cf0:	e1a00080 	lsl	r0, r0, #1
   29cf4:	20466002 	subcs	r6, r6, r2
   29cf8:	23800001 	orrcs	r0, r0, #1
   29cfc:	e1b030a3 	lsrs	r3, r3, #1
   29d00:	e1a02062 	rrx	r2, r2
   29d04:	e3710001 	cmn	r1, #1
   29d08:	e1a04006 	mov	r4, r6
   29d0c:	e3a05000 	mov	r5, #0
   29d10:	1afffff3 	bne	29ce4 <__Divide+0x60>
   29d14:	e3570000 	cmp	r7, #0
   29d18:	15876000 	strne	r6, [r7]
   29d1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29d20:	e3a0201f 	mov	r2, #31
   29d24:	e301194c 	movw	r1, #6476	; 0x194c
   29d28:	e30b0130 	movw	r0, #45360	; 0xb130
   29d2c:	e3401003 	movt	r1, #3
   29d30:	e3400002 	movt	r0, #2
   29d34:	ebffeb98 	bl	24b9c <assertion_failed>
   29d38:	ebfff482 	bl	26f48 <CExceptionHandler::Get()>
   29d3c:	e1a01004 	mov	r1, r4
   29d40:	ebfff438 	bl	26e28 <CExceptionHandler::Throw(unsigned int)>
   29d44:	eaffffd3 	b	29c98 <__Divide+0x14>
   29d48:	e3a01000 	mov	r1, #0
   29d4c:	eaffffe3 	b	29ce0 <__Divide+0x5c>

00029d50 <__DivideInteger>:
   29d50:	e2502000 	subs	r2, r0, #0
   29d54:	e92d4010 	push	{r4, lr}
   29d58:	ba000004 	blt	29d70 <__DivideInteger+0x20>
   29d5c:	e3510000 	cmp	r1, #0
   29d60:	ba00000e 	blt	29da0 <__DivideInteger+0x50>
   29d64:	e3a02000 	mov	r2, #0
   29d68:	e8bd4010 	pop	{r4, lr}
   29d6c:	eaffffc4 	b	29c84 <__Divide>
   29d70:	e3510000 	cmp	r1, #0
   29d74:	ba000004 	blt	29d8c <__DivideInteger+0x3c>
   29d78:	e2620000 	rsb	r0, r2, #0
   29d7c:	e3a02000 	mov	r2, #0
   29d80:	ebffffbf 	bl	29c84 <__Divide>
   29d84:	e2600000 	rsb	r0, r0, #0
   29d88:	e8bd8010 	pop	{r4, pc}
   29d8c:	e2620000 	rsb	r0, r2, #0
   29d90:	e2611000 	rsb	r1, r1, #0
   29d94:	e3a02000 	mov	r2, #0
   29d98:	e8bd4010 	pop	{r4, lr}
   29d9c:	eaffffb8 	b	29c84 <__Divide>
   29da0:	e2611000 	rsb	r1, r1, #0
   29da4:	e3a02000 	mov	r2, #0
   29da8:	ebffffb5 	bl	29c84 <__Divide>
   29dac:	e2600000 	rsb	r0, r0, #0
   29db0:	e8bd8010 	pop	{r4, pc}

00029db4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   29db4:	e5903020 	ldr	r3, [r0, #32]
   29db8:	e3a01000 	mov	r1, #0
   29dbc:	e92d4010 	push	{r4, lr}
   29dc0:	e24dd010 	sub	sp, sp, #16
   29dc4:	e3a02c01 	mov	r2, #256	; 0x100
   29dc8:	e583100c 	str	r1, [r3, #12]
   29dcc:	e5832010 	str	r2, [r3, #16]
   29dd0:	e1a04000 	mov	r4, r0
   29dd4:	e28d0008 	add	r0, sp, #8
   29dd8:	ebffdc1b 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   29ddc:	e5942020 	ldr	r2, [r4, #32]
   29de0:	e3003408 	movw	r3, #1032	; 0x408
   29de4:	e28d0008 	add	r0, sp, #8
   29de8:	e58d3000 	str	r3, [sp]
   29dec:	e308100b 	movw	r1, #32779	; 0x800b
   29df0:	e3003414 	movw	r3, #1044	; 0x414
   29df4:	e3401004 	movt	r1, #4
   29df8:	ebffdc5b 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   29dfc:	e3500000 	cmp	r0, #0
   29e00:	e28d0008 	add	r0, sp, #8
   29e04:	0a000003 	beq	29e18 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
   29e08:	e5943020 	ldr	r3, [r4, #32]
   29e0c:	e593300c 	ldr	r3, [r3, #12]
   29e10:	e3530000 	cmp	r3, #0
   29e14:	0a000003 	beq	29e28 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
   29e18:	ebffdc11 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   29e1c:	e3a00000 	mov	r0, #0
   29e20:	e28dd010 	add	sp, sp, #16
   29e24:	e8bd8010 	pop	{r4, pc}
   29e28:	ebffdc0d 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   29e2c:	e3a00001 	mov	r0, #1
   29e30:	e28dd010 	add	sp, sp, #16
   29e34:	e8bd8010 	pop	{r4, pc}

00029e38 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   29e38:	e92d4030 	push	{r4, r5, lr}
   29e3c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   29e40:	e3510000 	cmp	r1, #0
   29e44:	13520000 	cmpne	r2, #0
   29e48:	e3a05000 	mov	r5, #0
   29e4c:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
   29e50:	e1a04000 	mov	r4, r0
   29e54:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   29e58:	e8800006 	stm	r0, {r1, r2}
   29e5c:	e5803010 	str	r3, [r0, #16]
   29e60:	e580e00c 	str	lr, [r0, #12]
   29e64:	e580c008 	str	ip, [r0, #8]
   29e68:	e5805014 	str	r5, [r0, #20]
   29e6c:	e5805018 	str	r5, [r0, #24]
   29e70:	e580501c 	str	r5, [r0, #28]
   29e74:	e5805020 	str	r5, [r0, #32]
   29e78:	1a000011 	bne	29ec4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   29e7c:	e28d000c 	add	r0, sp, #12
   29e80:	ebffdbf1 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   29e84:	e3a03014 	mov	r3, #20
   29e88:	e58d5000 	str	r5, [sp]
   29e8c:	e28d000c 	add	r0, sp, #12
   29e90:	e3a01003 	mov	r1, #3
   29e94:	e08d2003 	add	r2, sp, r3
   29e98:	e3401004 	movt	r1, #4
   29e9c:	ebffdc32 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   29ea0:	e1500005 	cmp	r0, r5
   29ea4:	1a000027 	bne	29f48 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   29ea8:	e3a02d0a 	mov	r2, #640	; 0x280
   29eac:	e3a03e1e 	mov	r3, #480	; 0x1e0
   29eb0:	e884000c 	stm	r4, {r2, r3}
   29eb4:	e28d000c 	add	r0, sp, #12
   29eb8:	ebffdbe9 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   29ebc:	e594c008 	ldr	ip, [r4, #8]
   29ec0:	e5943010 	ldr	r3, [r4, #16]
   29ec4:	e35c0000 	cmp	ip, #0
   29ec8:	0a00001a 	beq	29f38 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   29ecc:	e594200c 	ldr	r2, [r4, #12]
   29ed0:	e3520000 	cmp	r2, #0
   29ed4:	0a000017 	beq	29f38 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   29ed8:	e3530008 	cmp	r3, #8
   29edc:	8a000007 	bhi	29f00 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
   29ee0:	e3000414 	movw	r0, #1044	; 0x414
   29ee4:	ebffe021 	bl	21f70 <operator new[](unsigned int)>
   29ee8:	e3a02b01 	mov	r2, #1024	; 0x400
   29eec:	e3a01000 	mov	r1, #0
   29ef0:	e5840020 	str	r0, [r4, #32]
   29ef4:	e2800014 	add	r0, r0, #20
   29ef8:	ebffe38f 	bl	22d3c <memset>
   29efc:	e5943010 	ldr	r3, [r4, #16]
   29f00:	e5945000 	ldr	r5, [r4]
   29f04:	e3012be4 	movw	r2, #7140	; 0x1be4
   29f08:	e594e004 	ldr	lr, [r4, #4]
   29f0c:	e3402003 	movt	r2, #3
   29f10:	e594c008 	ldr	ip, [r4, #8]
   29f14:	e1a00004 	mov	r0, r4
   29f18:	e594100c 	ldr	r1, [r4, #12]
   29f1c:	e582500c 	str	r5, [r2, #12]
   29f20:	e582e010 	str	lr, [r2, #16]
   29f24:	e582c020 	str	ip, [r2, #32]
   29f28:	e5821024 	str	r1, [r2, #36]	; 0x24
   29f2c:	e5823034 	str	r3, [r2, #52]	; 0x34
   29f30:	e28dd02c 	add	sp, sp, #44	; 0x2c
   29f34:	e8bd8030 	pop	{r4, r5, pc}
   29f38:	e8940006 	ldm	r4, {r1, r2}
   29f3c:	e5841008 	str	r1, [r4, #8]
   29f40:	e584200c 	str	r2, [r4, #12]
   29f44:	eaffffe3 	b	29ed8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   29f48:	e59d2020 	ldr	r2, [sp, #32]
   29f4c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   29f50:	e2420d0a 	sub	r0, r2, #640	; 0x280
   29f54:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   29f58:	e5842000 	str	r2, [r4]
   29f5c:	e3510f96 	cmp	r1, #600	; 0x258
   29f60:	93500c05 	cmpls	r0, #1280	; 0x500
   29f64:	e5843004 	str	r3, [r4, #4]
   29f68:	9affffd1 	bls	29eb4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   29f6c:	eaffffcd 	b	29ea8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

00029f70 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   29f70:	e92d4010 	push	{r4, lr}
   29f74:	e3a01014 	mov	r1, #20
   29f78:	e1a04000 	mov	r4, r0
   29f7c:	e5900020 	ldr	r0, [r0, #32]
   29f80:	ebffdffd 	bl	21f7c <operator delete(void*, unsigned int)>
   29f84:	e1a00004 	mov	r0, r4
   29f88:	e8bd8010 	pop	{r4, pc}

00029f8c <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   29f8c:	e5903010 	ldr	r3, [r0, #16]
   29f90:	e3530008 	cmp	r3, #8
   29f94:	812fff1e 	bxhi	lr
   29f98:	e5900020 	ldr	r0, [r0, #32]
   29f9c:	e1a03982 	lsl	r3, r2, #19
   29fa0:	e1a0c5a2 	lsr	ip, r2, #11
   29fa4:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   29fa8:	e0801101 	add	r1, r0, r1, lsl #2
   29fac:	e1a02282 	lsl	r2, r2, #5
   29fb0:	e183318c 	orr	r3, r3, ip, lsl #3
   29fb4:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   29fb8:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   29fbc:	e1822003 	orr	r2, r2, r3
   29fc0:	e5812014 	str	r2, [r1, #20]
   29fc4:	e12fff1e 	bx	lr

00029fc8 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   29fc8:	e5903010 	ldr	r3, [r0, #16]
   29fcc:	e3530008 	cmp	r3, #8
   29fd0:	95903020 	ldrls	r3, [r0, #32]
   29fd4:	90831101 	addls	r1, r3, r1, lsl #2
   29fd8:	95812014 	strls	r2, [r1, #20]
   29fdc:	e12fff1e 	bx	lr

00029fe0 <CBcmFrameBuffer::Initialize()>:
   29fe0:	e92d4070 	push	{r4, r5, r6, lr}
   29fe4:	e24dd008 	sub	sp, sp, #8
   29fe8:	e3016be4 	movw	r6, #7140	; 0x1be4
   29fec:	e3406003 	movt	r6, #3
   29ff0:	e1a05000 	mov	r5, r0
   29ff4:	e1a0000d 	mov	r0, sp
   29ff8:	ebffdb93 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   29ffc:	e1a01006 	mov	r1, r6
   2a000:	e1a0000d 	mov	r0, sp
   2a004:	e3a02070 	mov	r2, #112	; 0x70
   2a008:	ebffdb9a 	bl	20e78 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   2a00c:	e2504000 	subs	r4, r0, #0
   2a010:	0a00001e 	beq	2a090 <CBcmFrameBuffer::Initialize()+0xb0>
   2a014:	e596400c 	ldr	r4, [r6, #12]
   2a018:	e3540000 	cmp	r4, #0
   2a01c:	0a00001b 	beq	2a090 <CBcmFrameBuffer::Initialize()+0xb0>
   2a020:	e5964010 	ldr	r4, [r6, #16]
   2a024:	e3540000 	cmp	r4, #0
   2a028:	0a000018 	beq	2a090 <CBcmFrameBuffer::Initialize()+0xb0>
   2a02c:	e5964020 	ldr	r4, [r6, #32]
   2a030:	e3540000 	cmp	r4, #0
   2a034:	0a000015 	beq	2a090 <CBcmFrameBuffer::Initialize()+0xb0>
   2a038:	e5964024 	ldr	r4, [r6, #36]	; 0x24
   2a03c:	e3540000 	cmp	r4, #0
   2a040:	0a000012 	beq	2a090 <CBcmFrameBuffer::Initialize()+0xb0>
   2a044:	e5964034 	ldr	r4, [r6, #52]	; 0x34
   2a048:	e3540000 	cmp	r4, #0
   2a04c:	0a00000f 	beq	2a090 <CBcmFrameBuffer::Initialize()+0xb0>
   2a050:	e5964058 	ldr	r4, [r6, #88]	; 0x58
   2a054:	e3540000 	cmp	r4, #0
   2a058:	0a00000c 	beq	2a090 <CBcmFrameBuffer::Initialize()+0xb0>
   2a05c:	e5951010 	ldr	r1, [r5, #16]
   2a060:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   2a064:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
   2a068:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
   2a06c:	e3510008 	cmp	r1, #8
   2a070:	e5854014 	str	r4, [r5, #20]
   2a074:	e5852018 	str	r2, [r5, #24]
   2a078:	83a04001 	movhi	r4, #1
   2a07c:	e585301c 	str	r3, [r5, #28]
   2a080:	8a000002 	bhi	2a090 <CBcmFrameBuffer::Initialize()+0xb0>
   2a084:	e1a00005 	mov	r0, r5
   2a088:	ebffff49 	bl	29db4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   2a08c:	e1a04000 	mov	r4, r0
   2a090:	e1a0000d 	mov	r0, sp
   2a094:	ebffdb72 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   2a098:	e1a00004 	mov	r0, r4
   2a09c:	e28dd008 	add	sp, sp, #8
   2a0a0:	e8bd8070 	pop	{r4, r5, r6, pc}

0002a0a4 <CBcmFrameBuffer::GetWidth() const>:
   2a0a4:	e5900000 	ldr	r0, [r0]
   2a0a8:	e12fff1e 	bx	lr

0002a0ac <CBcmFrameBuffer::GetHeight() const>:
   2a0ac:	e5900004 	ldr	r0, [r0, #4]
   2a0b0:	e12fff1e 	bx	lr

0002a0b4 <CBcmFrameBuffer::GetVirtWidth() const>:
   2a0b4:	e5900008 	ldr	r0, [r0, #8]
   2a0b8:	e12fff1e 	bx	lr

0002a0bc <CBcmFrameBuffer::GetVirtHeight() const>:
   2a0bc:	e590000c 	ldr	r0, [r0, #12]
   2a0c0:	e12fff1e 	bx	lr

0002a0c4 <CBcmFrameBuffer::GetPitch() const>:
   2a0c4:	e590001c 	ldr	r0, [r0, #28]
   2a0c8:	e12fff1e 	bx	lr

0002a0cc <CBcmFrameBuffer::GetDepth() const>:
   2a0cc:	e5900010 	ldr	r0, [r0, #16]
   2a0d0:	e12fff1e 	bx	lr

0002a0d4 <CBcmFrameBuffer::GetBuffer() const>:
   2a0d4:	e5900014 	ldr	r0, [r0, #20]
   2a0d8:	e12fff1e 	bx	lr

0002a0dc <CBcmFrameBuffer::GetSize() const>:
   2a0dc:	e5900018 	ldr	r0, [r0, #24]
   2a0e0:	e12fff1e 	bx	lr

0002a0e4 <CBcmFrameBuffer::UpdatePalette()>:
   2a0e4:	e5903010 	ldr	r3, [r0, #16]
   2a0e8:	e3530008 	cmp	r3, #8
   2a0ec:	9a000001 	bls	2a0f8 <CBcmFrameBuffer::UpdatePalette()+0x14>
   2a0f0:	e3a00001 	mov	r0, #1
   2a0f4:	e12fff1e 	bx	lr
   2a0f8:	eaffff2d 	b	29db4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0002a0fc <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   2a0fc:	e92d4070 	push	{r4, r5, r6, lr}
   2a100:	e24dd028 	sub	sp, sp, #40	; 0x28
   2a104:	e28d000c 	add	r0, sp, #12
   2a108:	e1a05001 	mov	r5, r1
   2a10c:	e1a06002 	mov	r6, r2
   2a110:	ebffdb4d 	bl	20e4c <CBcmPropertyTags::CBcmPropertyTags()>
   2a114:	e3a03008 	mov	r3, #8
   2a118:	e28d000c 	add	r0, sp, #12
   2a11c:	e58d3000 	str	r3, [sp]
   2a120:	e3081009 	movw	r1, #32777	; 0x8009
   2a124:	e3a03014 	mov	r3, #20
   2a128:	e3401004 	movt	r1, #4
   2a12c:	e08d2003 	add	r2, sp, r3
   2a130:	e58d5020 	str	r5, [sp, #32]
   2a134:	e58d6024 	str	r6, [sp, #36]	; 0x24
   2a138:	ebffdb8b 	bl	20f6c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a13c:	e2504000 	subs	r4, r0, #0
   2a140:	0a000006 	beq	2a160 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   2a144:	e59d3020 	ldr	r3, [sp, #32]
   2a148:	e1550003 	cmp	r5, r3
   2a14c:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   2a150:	13a04000 	movne	r4, #0
   2a154:	00444006 	subeq	r4, r4, r6
   2a158:	016f4f14 	clzeq	r4, r4
   2a15c:	01a042a4 	lsreq	r4, r4, #5
   2a160:	e28d000c 	add	r0, sp, #12
   2a164:	ebffdb3e 	bl	20e64 <CBcmPropertyTags::~CBcmPropertyTags()>
   2a168:	e1a00004 	mov	r0, r4
   2a16c:	e28dd028 	add	sp, sp, #40	; 0x28
   2a170:	e8bd8070 	pop	{r4, r5, r6, pc}

0002a174 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>:
   2a174:	e3510006 	cmp	r1, #6
   2a178:	e92d4010 	push	{r4, lr}
   2a17c:	e1a04000 	mov	r4, r0
   2a180:	e5c01000 	strb	r1, [r0]
   2a184:	e5c02001 	strb	r2, [r0, #1]
   2a188:	ca000009 	bgt	2a1b4 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x40>
   2a18c:	e3520007 	cmp	r2, #7
   2a190:	da000005 	ble	2a1ac <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x38>
   2a194:	e301196c 	movw	r1, #6508	; 0x196c
   2a198:	e3010994 	movw	r0, #6548	; 0x1994
   2a19c:	e3401003 	movt	r1, #3
   2a1a0:	e3400003 	movt	r0, #3
   2a1a4:	e3a0201e 	mov	r2, #30
   2a1a8:	ebffea7b 	bl	24b9c <assertion_failed>
   2a1ac:	e1a00004 	mov	r0, r4
   2a1b0:	e8bd8010 	pop	{r4, pc}
   2a1b4:	e3a0201d 	mov	r2, #29
   2a1b8:	e301196c 	movw	r1, #6508	; 0x196c
   2a1bc:	e301097c 	movw	r0, #6524	; 0x197c
   2a1c0:	e3401003 	movt	r1, #3
   2a1c4:	e3400003 	movt	r0, #3
   2a1c8:	ebffea73 	bl	24b9c <assertion_failed>
   2a1cc:	e5d42001 	ldrb	r2, [r4, #1]
   2a1d0:	eaffffed 	b	2a18c <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x18>

0002a1d4 <CGPIOClock::~CGPIOClock()>:
   2a1d4:	e5d01000 	ldrb	r1, [r0]
   2a1d8:	e300220e 	movw	r2, #526	; 0x20e
   2a1dc:	e34027e2 	movt	r2, #2018	; 0x7e2
   2a1e0:	e3a03020 	mov	r3, #32
   2a1e4:	e0812002 	add	r2, r1, r2
   2a1e8:	e3453a00 	movt	r3, #23040	; 0x5a00
   2a1ec:	e1a02182 	lsl	r2, r2, #3
   2a1f0:	e5823000 	str	r3, [r2]
   2a1f4:	e5923000 	ldr	r3, [r2]
   2a1f8:	e3130080 	tst	r3, #128	; 0x80
   2a1fc:	1afffffc 	bne	2a1f4 <CGPIOClock::~CGPIOClock()+0x20>
   2a200:	e12fff1e 	bx	lr

0002a204 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>:
   2a204:	e3530003 	cmp	r3, #3
   2a208:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2a20c:	e1a05003 	mov	r5, r3
   2a210:	e1a07000 	mov	r7, r0
   2a214:	e1a08001 	mov	r8, r1
   2a218:	e1a06002 	mov	r6, r2
   2a21c:	8a000029 	bhi	2a2c8 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xc4>
   2a220:	e301395c 	movw	r3, #6492	; 0x195c
   2a224:	e3403003 	movt	r3, #3
   2a228:	e7933105 	ldr	r3, [r3, r5, lsl #2]
   2a22c:	e1530008 	cmp	r3, r8
   2a230:	93580a01 	cmpls	r8, #4096	; 0x1000
   2a234:	3a000005 	bcc	2a250 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x4c>
   2a238:	e301196c 	movw	r1, #6508	; 0x196c
   2a23c:	e30109c0 	movw	r0, #6592	; 0x19c0
   2a240:	e3401003 	movt	r1, #3
   2a244:	e3400003 	movt	r0, #3
   2a248:	e3a0202c 	mov	r2, #44	; 0x2c
   2a24c:	ebffea52 	bl	24b9c <assertion_failed>
   2a250:	e3560a01 	cmp	r6, #4096	; 0x1000
   2a254:	2a000022 	bcs	2a2e4 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xe0>
   2a258:	e5d72000 	ldrb	r2, [r7]
   2a25c:	e300420e 	movw	r4, #526	; 0x20e
   2a260:	e34047e2 	movt	r4, #2018	; 0x7e2
   2a264:	e3a03020 	mov	r3, #32
   2a268:	e0824004 	add	r4, r2, r4
   2a26c:	e3453a00 	movt	r3, #23040	; 0x5a00
   2a270:	e1a04184 	lsl	r4, r4, #3
   2a274:	e5843000 	str	r3, [r4]
   2a278:	e5943000 	ldr	r3, [r4]
   2a27c:	e3130080 	tst	r3, #128	; 0x80
   2a280:	1afffffc 	bne	2a278 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x74>
   2a284:	e386645a 	orr	r6, r6, #1509949440	; 0x5a000000
   2a288:	e3a0000a 	mov	r0, #10
   2a28c:	e1866608 	orr	r6, r6, r8, lsl #12
   2a290:	e5846004 	str	r6, [r4, #4]
   2a294:	ebffe25d 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
   2a298:	e1a05485 	lsl	r5, r5, #9
   2a29c:	e5d73001 	ldrb	r3, [r7, #1]
   2a2a0:	e385545a 	orr	r5, r5, #1509949440	; 0x5a000000
   2a2a4:	e3a0000a 	mov	r0, #10
   2a2a8:	e1855003 	orr	r5, r5, r3
   2a2ac:	e5845000 	str	r5, [r4]
   2a2b0:	ebffe256 	bl	22c10 <CTimer::SimpleusDelay(unsigned int)>
   2a2b4:	e5943000 	ldr	r3, [r4]
   2a2b8:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   2a2bc:	e3833010 	orr	r3, r3, #16
   2a2c0:	e5843000 	str	r3, [r4]
   2a2c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2a2c8:	e301196c 	movw	r1, #6508	; 0x196c
   2a2cc:	e30109b4 	movw	r0, #6580	; 0x19b4
   2a2d0:	e3401003 	movt	r1, #3
   2a2d4:	e3400003 	movt	r0, #3
   2a2d8:	e3a0202b 	mov	r2, #43	; 0x2b
   2a2dc:	ebffea2e 	bl	24b9c <assertion_failed>
   2a2e0:	eaffffce 	b	2a220 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x1c>
   2a2e4:	e301196c 	movw	r1, #6508	; 0x196c
   2a2e8:	e30109ec 	movw	r0, #6636	; 0x19ec
   2a2ec:	e3401003 	movt	r1, #3
   2a2f0:	e3400003 	movt	r0, #3
   2a2f4:	e3a0202d 	mov	r2, #45	; 0x2d
   2a2f8:	ebffea27 	bl	24b9c <assertion_failed>
   2a2fc:	eaffffd5 	b	2a258 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x54>

0002a300 <CGPIOClock::Stop()>:
   2a300:	e5d01000 	ldrb	r1, [r0]
   2a304:	e300220e 	movw	r2, #526	; 0x20e
   2a308:	e34027e2 	movt	r2, #2018	; 0x7e2
   2a30c:	e3a03020 	mov	r3, #32
   2a310:	e0812002 	add	r2, r1, r2
   2a314:	e3453a00 	movt	r3, #23040	; 0x5a00
   2a318:	e1a02182 	lsl	r2, r2, #3
   2a31c:	e5823000 	str	r3, [r2]
   2a320:	e5923000 	ldr	r3, [r2]
   2a324:	e3130080 	tst	r3, #128	; 0x80
   2a328:	1afffffc 	bne	2a320 <CGPIOClock::Stop()+0x20>
   2a32c:	e12fff1e 	bx	lr
