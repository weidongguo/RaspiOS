
kernel7.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea0003b4 	b	8f38 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

00008070 <main>:
    8070:	e92d4010 	push	{r4, lr}
    8074:	e24ddd23 	sub	sp, sp, #2240	; 0x8c0
    8078:	e24dd008 	sub	sp, sp, #8
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb000014 	bl	80d8 <CKernel::CKernel()>
    8084:	e28d0004 	add	r0, sp, #4
    8088:	eb00002b 	bl	813c <CKernel::Initialize()>
    808c:	e2504000 	subs	r4, r0, #0
    8090:	0a00000e 	beq	80d0 <main+0x60>
    8094:	e28d0004 	add	r0, sp, #4
    8098:	eb00002a 	bl	8148 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	0a000007 	beq	80c4 <main+0x54>
    80a4:	eb000395 	bl	8f00 <halt>
    80a8:	e3a04000 	mov	r4, #0
    80ac:	e28d0004 	add	r0, sp, #4
    80b0:	eb00008b 	bl	82e4 <CKernel::~CKernel()>
    80b4:	e1a00004 	mov	r0, r4
    80b8:	e28ddd23 	add	sp, sp, #2240	; 0x8c0
    80bc:	e28dd008 	add	sp, sp, #8
    80c0:	e8bd8010 	pop	{r4, pc}
    80c4:	eb000392 	bl	8f14 <reboot>
    80c8:	e3a04001 	mov	r4, #1
    80cc:	eafffff6 	b	80ac <main+0x3c>
    80d0:	eb00038a 	bl	8f00 <halt>
    80d4:	eafffff4 	b	80ac <main+0x3c>

000080d8 <CKernel::CKernel()>:
    80d8:	e92d4070 	push	{r4, r5, r6, lr}
    80dc:	e3a01000 	mov	r1, #0
    80e0:	e280501c 	add	r5, r0, #28
    80e4:	e1a04000 	mov	r4, r0
    80e8:	eb00032d 	bl	8da4 <CMemorySystem::CMemorySystem(int)>
    80ec:	e2840010 	add	r0, r4, #16
    80f0:	eb0000b0 	bl	83b8 <CActLED::CActLED()>
    80f4:	e1a00005 	mov	r0, r5
    80f8:	eb00065b 	bl	9a6c <CKernelOptions::CKernelOptions()>
    80fc:	e2840e85 	add	r0, r4, #2128	; 0x850
    8100:	e280000c 	add	r0, r0, #12
    8104:	eb000c66 	bl	b2a4 <CDeviceNameService::CDeviceNameService()>
    8108:	e1a00005 	mov	r0, r5
    810c:	eb000622 	bl	999c <CKernelOptions::GetWidth() const>
    8110:	e1a06000 	mov	r6, r0
    8114:	e1a00005 	mov	r0, r5
    8118:	eb000621 	bl	99a4 <CKernelOptions::GetHeight() const>
    811c:	e1a01006 	mov	r1, r6
    8120:	e3a03000 	mov	r3, #0
    8124:	e1a02000 	mov	r2, r0
    8128:	e2840e86 	add	r0, r4, #2144	; 0x860
    812c:	e2800004 	add	r0, r0, #4
    8130:	eb000802 	bl	a140 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8134:	e1a00004 	mov	r0, r4
    8138:	e8bd8070 	pop	{r4, r5, r6, pc}

0000813c <CKernel::Initialize()>:
    813c:	e2800e86 	add	r0, r0, #2144	; 0x860
    8140:	e2800004 	add	r0, r0, #4
    8144:	ea000bab 	b	aff8 <CScreenDevice::Initialize()>

00008148 <CKernel::Run()>:
    8148:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    814c:	e2804e86 	add	r4, r0, #2144	; 0x860
    8150:	e24dd00c 	sub	sp, sp, #12
    8154:	e2844004 	add	r4, r4, #4
    8158:	e1a05000 	mov	r5, r0
    815c:	e3a06000 	mov	r6, #0
    8160:	e1a00004 	mov	r0, r4
    8164:	eb000813 	bl	a1b8 <CScreenDevice::GetWidth() const>
    8168:	e1a01006 	mov	r1, r6
    816c:	e30f3fdf 	movw	r3, #65503	; 0xffdf
    8170:	e3a02000 	mov	r2, #0
    8174:	e1560000 	cmp	r6, r0
    8178:	e1a00004 	mov	r0, r4
    817c:	2a000009 	bcs	81a8 <CKernel::Run()+0x60>
    8180:	eb000bfd 	bl	b17c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    8184:	e1a00004 	mov	r0, r4
    8188:	eb00080c 	bl	a1c0 <CScreenDevice::GetHeight() const>
    818c:	e1a01006 	mov	r1, r6
    8190:	e30f3fdf 	movw	r3, #65503	; 0xffdf
    8194:	e2866001 	add	r6, r6, #1
    8198:	e2402001 	sub	r2, r0, #1
    819c:	e1a00004 	mov	r0, r4
    81a0:	eb000bf5 	bl	b17c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    81a4:	eaffffed 	b	8160 <CKernel::Run()+0x18>
    81a8:	e1a06002 	mov	r6, r2
    81ac:	e1a00004 	mov	r0, r4
    81b0:	eb000802 	bl	a1c0 <CScreenDevice::GetHeight() const>
    81b4:	e1a02006 	mov	r2, r6
    81b8:	e30f3fdf 	movw	r3, #65503	; 0xffdf
    81bc:	e3a01000 	mov	r1, #0
    81c0:	e1560000 	cmp	r6, r0
    81c4:	e1a00004 	mov	r0, r4
    81c8:	2a000009 	bcs	81f4 <CKernel::Run()+0xac>
    81cc:	eb000bea 	bl	b17c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    81d0:	e1a00004 	mov	r0, r4
    81d4:	eb0007f7 	bl	a1b8 <CScreenDevice::GetWidth() const>
    81d8:	e1a02006 	mov	r2, r6
    81dc:	e30f3fdf 	movw	r3, #65503	; 0xffdf
    81e0:	e2866001 	add	r6, r6, #1
    81e4:	e2401001 	sub	r1, r0, #1
    81e8:	e1a00004 	mov	r0, r4
    81ec:	eb000be2 	bl	b17c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    81f0:	eaffffed 	b	81ac <CKernel::Run()+0x64>
    81f4:	e1a06001 	mov	r6, r1
    81f8:	e1a00004 	mov	r0, r4
    81fc:	eb0007ed 	bl	a1b8 <CScreenDevice::GetWidth() const>
    8200:	e1560000 	cmp	r6, r0
    8204:	e1a00004 	mov	r0, r4
    8208:	2a000016 	bcs	8268 <CKernel::Run()+0x120>
    820c:	eb0007eb 	bl	a1c0 <CScreenDevice::GetHeight() const>
    8210:	e0070690 	mul	r7, r0, r6
    8214:	e1a00004 	mov	r0, r4
    8218:	eb0007e6 	bl	a1b8 <CScreenDevice::GetWidth() const>
    821c:	e1a01000 	mov	r1, r0
    8220:	e1a00007 	mov	r0, r7
    8224:	eb000295 	bl	8c80 <__aeabi_uidiv>
    8228:	e1a01006 	mov	r1, r6
    822c:	e30f3fdf 	movw	r3, #65503	; 0xffdf
    8230:	e1a02000 	mov	r2, r0
    8234:	e1a07000 	mov	r7, r0
    8238:	e1a00004 	mov	r0, r4
    823c:	eb000bce 	bl	b17c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    8240:	e1a00004 	mov	r0, r4
    8244:	eb0007db 	bl	a1b8 <CScreenDevice::GetWidth() const>
    8248:	e1e01006 	mvn	r1, r6
    824c:	e1a02007 	mov	r2, r7
    8250:	e30f3fdf 	movw	r3, #65503	; 0xffdf
    8254:	e2866001 	add	r6, r6, #1
    8258:	e0811000 	add	r1, r1, r0
    825c:	e1a00004 	mov	r0, r4
    8260:	eb000bc5 	bl	b17c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    8264:	eaffffe3 	b	81f8 <CKernel::Run()+0xb0>
    8268:	e3047b40 	movw	r7, #19264	; 0x4b40
    826c:	e3094680 	movw	r4, #38528	; 0x9680
    8270:	e2855010 	add	r5, r5, #16
    8274:	e340704c 	movt	r7, #76	; 0x4c
    8278:	e3404098 	movt	r4, #152	; 0x98
    827c:	e3a06001 	mov	r6, #1
    8280:	e1a00005 	mov	r0, r5
    8284:	eb00002b 	bl	8338 <CActLED::On()>
    8288:	e58d6000 	str	r6, [sp]
    828c:	e59d3000 	ldr	r3, [sp]
    8290:	e1530007 	cmp	r3, r7
    8294:	8a000005 	bhi	82b0 <CKernel::Run()+0x168>
    8298:	e59d3000 	ldr	r3, [sp]
    829c:	e2833001 	add	r3, r3, #1
    82a0:	e58d3000 	str	r3, [sp]
    82a4:	e59d3000 	ldr	r3, [sp]
    82a8:	e1530007 	cmp	r3, r7
    82ac:	9afffff9 	bls	8298 <CKernel::Run()+0x150>
    82b0:	e1a00005 	mov	r0, r5
    82b4:	eb00002f 	bl	8378 <CActLED::Off()>
    82b8:	e58d6004 	str	r6, [sp, #4]
    82bc:	e59d3004 	ldr	r3, [sp, #4]
    82c0:	e1530004 	cmp	r3, r4
    82c4:	8affffed 	bhi	8280 <CKernel::Run()+0x138>
    82c8:	e59d3004 	ldr	r3, [sp, #4]
    82cc:	e2833001 	add	r3, r3, #1
    82d0:	e58d3004 	str	r3, [sp, #4]
    82d4:	e59d3004 	ldr	r3, [sp, #4]
    82d8:	e1530004 	cmp	r3, r4
    82dc:	9afffff9 	bls	82c8 <CKernel::Run()+0x180>
    82e0:	eaffffe6 	b	8280 <CKernel::Run()+0x138>

000082e4 <CKernel::~CKernel()>:
    82e4:	e92d4010 	push	{r4, lr}
    82e8:	e1a04000 	mov	r4, r0
    82ec:	e2800e86 	add	r0, r0, #2144	; 0x860
    82f0:	e2800004 	add	r0, r0, #4
    82f4:	eb000744 	bl	a00c <CScreenDevice::~CScreenDevice()>
    82f8:	e2840e85 	add	r0, r4, #2128	; 0x850
    82fc:	e280000c 	add	r0, r0, #12
    8300:	eb000bee 	bl	b2c0 <CDeviceNameService::~CDeviceNameService()>
    8304:	e284001c 	add	r0, r4, #28
    8308:	eb00059e 	bl	9988 <CKernelOptions::~CKernelOptions()>
    830c:	e2840010 	add	r0, r4, #16
    8310:	eb000003 	bl	8324 <CActLED::~CActLED()>
    8314:	e1a00004 	mov	r0, r4
    8318:	eb000264 	bl	8cb0 <CMemorySystem::~CMemorySystem()>
    831c:	e1a00004 	mov	r0, r4
    8320:	e8bd8010 	pop	{r4, pc}

00008324 <CActLED::~CActLED()>:
    8324:	e30f3bd4 	movw	r3, #64468	; 0xfbd4
    8328:	e3403000 	movt	r3, #0
    832c:	e3a02000 	mov	r2, #0
    8330:	e5832000 	str	r2, [r3]
    8334:	e12fff1e 	bx	lr

00008338 <CActLED::On()>:
    8338:	e5903000 	ldr	r3, [r0]
    833c:	e3530000 	cmp	r3, #0
    8340:	0a000004 	beq	8358 <CActLED::On()+0x20>
    8344:	e5901008 	ldr	r1, [r0, #8]
    8348:	e1a00003 	mov	r0, r3
    834c:	e2911000 	adds	r1, r1, #0
    8350:	13a01001 	movne	r1, #1
    8354:	ea0000bf 	b	8658 <CGPIOPin::Write(unsigned int)>
    8358:	e5903004 	ldr	r3, [r0, #4]
    835c:	e3530000 	cmp	r3, #0
    8360:	012fff1e 	bxeq	lr
    8364:	e5901008 	ldr	r1, [r0, #8]
    8368:	e1a00003 	mov	r0, r3
    836c:	e2911000 	adds	r1, r1, #0
    8370:	13a01001 	movne	r1, #1
    8374:	ea001287 	b	cd98 <CVirtualGPIOPin::Write(unsigned int)>

00008378 <CActLED::Off()>:
    8378:	e5903000 	ldr	r3, [r0]
    837c:	e3530000 	cmp	r3, #0
    8380:	0a000004 	beq	8398 <CActLED::Off()+0x20>
    8384:	e5901008 	ldr	r1, [r0, #8]
    8388:	e1a00003 	mov	r0, r3
    838c:	e16f1f11 	clz	r1, r1
    8390:	e1a012a1 	lsr	r1, r1, #5
    8394:	ea0000af 	b	8658 <CGPIOPin::Write(unsigned int)>
    8398:	e5903004 	ldr	r3, [r0, #4]
    839c:	e3530000 	cmp	r3, #0
    83a0:	012fff1e 	bxeq	lr
    83a4:	e5901008 	ldr	r1, [r0, #8]
    83a8:	e1a00003 	mov	r0, r3
    83ac:	e16f1f11 	clz	r1, r1
    83b0:	e1a012a1 	lsr	r1, r1, #5
    83b4:	ea001277 	b	cd98 <CVirtualGPIOPin::Write(unsigned int)>

000083b8 <CActLED::CActLED()>:
    83b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    83bc:	e30f3bd4 	movw	r3, #64468	; 0xfbd4
    83c0:	e24dd024 	sub	sp, sp, #36	; 0x24
    83c4:	e1a04000 	mov	r4, r0
    83c8:	e3403000 	movt	r3, #0
    83cc:	e3a05000 	mov	r5, #0
    83d0:	e28d0008 	add	r0, sp, #8
    83d4:	e5845000 	str	r5, [r4]
    83d8:	e5845004 	str	r5, [r4, #4]
    83dc:	e5834000 	str	r4, [r3]
    83e0:	eb000052 	bl	8530 <CBcmPropertyTags::CBcmPropertyTags()>
    83e4:	e3a03010 	mov	r3, #16
    83e8:	e58d5000 	str	r5, [sp]
    83ec:	e28d0008 	add	r0, sp, #8
    83f0:	e3a01002 	mov	r1, #2
    83f4:	e08d2003 	add	r2, sp, r3
    83f8:	e3401001 	movt	r1, #1
    83fc:	eb000077 	bl	85e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8400:	e1500005 	cmp	r0, r5
    8404:	0a000011 	beq	8450 <CActLED::CActLED()+0x98>
    8408:	e59d301c 	ldr	r3, [sp, #28]
    840c:	e3130502 	tst	r3, #8388608	; 0x800000
    8410:	1a000013 	bne	8464 <CActLED::CActLED()+0xac>
    8414:	e6ff3073 	uxth	r3, r3
    8418:	e353000f 	cmp	r3, #15
    841c:	83a06001 	movhi	r6, #1
    8420:	9a000020 	bls	84a8 <CActLED::CActLED()+0xf0>
    8424:	e3a00028 	mov	r0, #40	; 0x28
    8428:	eb00028d 	bl	8e64 <operator new(unsigned int)>
    842c:	e3a03000 	mov	r3, #0
    8430:	e3a02001 	mov	r2, #1
    8434:	e3a0102f 	mov	r1, #47	; 0x2f
    8438:	e1a05000 	mov	r5, r0
    843c:	eb0001be 	bl	8b3c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8440:	e5845000 	str	r5, [r4]
    8444:	e5846008 	str	r6, [r4, #8]
    8448:	e1a00004 	mov	r0, r4
    844c:	ebffffc9 	bl	8378 <CActLED::Off()>
    8450:	e28d0008 	add	r0, sp, #8
    8454:	eb00003b 	bl	8548 <CBcmPropertyTags::~CBcmPropertyTags()>
    8458:	e1a00004 	mov	r0, r4
    845c:	e28dd024 	add	sp, sp, #36	; 0x24
    8460:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8464:	e7e73253 	ubfx	r3, r3, #4, #8
    8468:	e3530001 	cmp	r3, #1
    846c:	9a00000d 	bls	84a8 <CActLED::CActLED()+0xf0>
    8470:	e353000c 	cmp	r3, #12
    8474:	13530009 	cmpne	r3, #9
    8478:	03a06001 	moveq	r6, #1
    847c:	13a06000 	movne	r6, #0
    8480:	e3530008 	cmp	r3, #8
    8484:	e2266001 	eor	r6, r6, #1
    8488:	1affffe5 	bne	8424 <CActLED::CActLED()+0x6c>
    848c:	e3a00010 	mov	r0, #16
    8490:	eb000273 	bl	8e64 <operator new(unsigned int)>
    8494:	e1a01005 	mov	r1, r5
    8498:	e1a07000 	mov	r7, r0
    849c:	eb001201 	bl	cca8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    84a0:	e5847004 	str	r7, [r4, #4]
    84a4:	eaffffe6 	b	8444 <CActLED::CActLED()+0x8c>
    84a8:	e3a00028 	mov	r0, #40	; 0x28
    84ac:	eb00026c 	bl	8e64 <operator new(unsigned int)>
    84b0:	e3a03000 	mov	r3, #0
    84b4:	e3a02001 	mov	r2, #1
    84b8:	e3a01010 	mov	r1, #16
    84bc:	e1a05000 	mov	r5, r0
    84c0:	eb00019d 	bl	8b3c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    84c4:	e3a03000 	mov	r3, #0
    84c8:	e5845000 	str	r5, [r4]
    84cc:	e5843008 	str	r3, [r4, #8]
    84d0:	eaffffdc 	b	8448 <CActLED::CActLED()+0x90>

000084d4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    84d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    84d8:	e2516000 	subs	r6, r1, #0
    84dc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    84e0:	e1a08003 	mov	r8, r3
    84e4:	e1a07002 	mov	r7, r2
    84e8:	e1a05000 	mov	r5, r0
    84ec:	e3a04001 	mov	r4, #1
    84f0:	e1a00005 	mov	r0, r5
    84f4:	e2844001 	add	r4, r4, #1
    84f8:	ebffff8e 	bl	8338 <CActLED::On()>
    84fc:	e1a00007 	mov	r0, r7
    8500:	eb0004a5 	bl	979c <CTimer::SimpleMsDelay(unsigned int)>
    8504:	e1a00005 	mov	r0, r5
    8508:	ebffff9a 	bl	8378 <CActLED::Off()>
    850c:	e1a00008 	mov	r0, r8
    8510:	eb0004a1 	bl	979c <CTimer::SimpleMsDelay(unsigned int)>
    8514:	e1560004 	cmp	r6, r4
    8518:	2afffff4 	bcs	84f0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    851c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008520 <CActLED::Get()>:
    8520:	e30f3bd4 	movw	r3, #64468	; 0xfbd4
    8524:	e3403000 	movt	r3, #0
    8528:	e5930000 	ldr	r0, [r3]
    852c:	e12fff1e 	bx	lr

00008530 <CBcmPropertyTags::CBcmPropertyTags()>:
    8530:	e92d4010 	push	{r4, lr}
    8534:	e3a01008 	mov	r1, #8
    8538:	e1a04000 	mov	r4, r0
    853c:	eb0014a6 	bl	d7dc <CBcmMailBox::CBcmMailBox(unsigned int)>
    8540:	e1a00004 	mov	r0, r4
    8544:	e8bd8010 	pop	{r4, pc}

00008548 <CBcmPropertyTags::~CBcmPropertyTags()>:
    8548:	e92d4010 	push	{r4, lr}
    854c:	e1a04000 	mov	r4, r0
    8550:	eb0014a4 	bl	d7e8 <CBcmMailBox::~CBcmMailBox()>
    8554:	e1a00004 	mov	r0, r4
    8558:	e8bd8010 	pop	{r4, pc}

0000855c <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    855c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8560:	e3a04008 	mov	r4, #8
    8564:	e3404040 	movt	r4, #64	; 0x40
    8568:	e3a05501 	mov	r5, #4194304	; 0x400000
    856c:	e1a06002 	mov	r6, r2
    8570:	e282300c 	add	r3, r2, #12
    8574:	e3a07000 	mov	r7, #0
    8578:	e1a08000 	mov	r8, r0
    857c:	e5853000 	str	r3, [r5]
    8580:	e1a00004 	mov	r0, r4
    8584:	e5857004 	str	r7, [r5, #4]
    8588:	e1a09001 	mov	r9, r1
    858c:	eb0004d0 	bl	98d4 <memcpy>
    8590:	e7847006 	str	r7, [r4, r6]
    8594:	f57ff04f 	dsb	sy
    8598:	e1a01007 	mov	r1, r7
    859c:	e1a00008 	mov	r0, r8
    85a0:	e34c1040 	movt	r1, #49216	; 0xc040
    85a4:	eb001490 	bl	d7ec <CBcmMailBox::WriteRead(unsigned int)>
    85a8:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    85ac:	0a000001 	beq	85b8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x5c>
    85b0:	e3a00000 	mov	r0, #0
    85b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    85b8:	f57ff05f 	dmb	sy
    85bc:	e5953004 	ldr	r3, [r5, #4]
    85c0:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    85c4:	1afffff9 	bne	85b0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x54>
    85c8:	e1a02006 	mov	r2, r6
    85cc:	e1a01004 	mov	r1, r4
    85d0:	e1a00009 	mov	r0, r9
    85d4:	eb0004be 	bl	98d4 <memcpy>
    85d8:	e3a00001 	mov	r0, #1
    85dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000085e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    85e0:	e92d4010 	push	{r4, lr}
    85e4:	e1a04002 	mov	r4, r2
    85e8:	e59dc008 	ldr	ip, [sp, #8]
    85ec:	e5821000 	str	r1, [r2]
    85f0:	e243100c 	sub	r1, r3, #12
    85f4:	e3ccc102 	bic	ip, ip, #-2147483648	; 0x80000000
    85f8:	e5841004 	str	r1, [r4, #4]
    85fc:	e1a02003 	mov	r2, r3
    8600:	e1a01004 	mov	r1, r4
    8604:	e584c008 	str	ip, [r4, #8]
    8608:	ebffffd3 	bl	855c <CBcmPropertyTags::GetTags(void*, unsigned int)>
    860c:	e3500000 	cmp	r0, #0
    8610:	08bd8010 	popeq	{r4, pc}
    8614:	e5940008 	ldr	r0, [r4, #8]
    8618:	e3500000 	cmp	r0, #0
    861c:	ba000001 	blt	8628 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x48>
    8620:	e3a00000 	mov	r0, #0
    8624:	e8bd8010 	pop	{r4, pc}
    8628:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    862c:	e5840008 	str	r0, [r4, #8]
    8630:	e2900000 	adds	r0, r0, #0
    8634:	13a00001 	movne	r0, #1
    8638:	e8bd8010 	pop	{r4, pc}

0000863c <CGPIOPin::~CGPIOPin()>:
    863c:	e12fff1e 	bx	lr

00008640 <CGPIOPin::~CGPIOPin()>:
    8640:	e92d4010 	push	{r4, lr}
    8644:	e3a01028 	mov	r1, #40	; 0x28
    8648:	e1a04000 	mov	r4, r0
    864c:	eb000208 	bl	8e74 <operator delete(void*, unsigned int)>
    8650:	e1a00004 	mov	r0, r4
    8654:	e8bd8010 	pop	{r4, pc}

00008658 <CGPIOPin::Write(unsigned int)>:
    8658:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    865c:	e3a02028 	mov	r2, #40	; 0x28
    8660:	e590e00c 	ldr	lr, [r0, #12]
    8664:	e3432f20 	movt	r2, #16160	; 0x3f20
    8668:	e590c008 	ldr	ip, [r0, #8]
    866c:	e3510000 	cmp	r1, #0
    8670:	e3a0301c 	mov	r3, #28
    8674:	e3433f20 	movt	r3, #16160	; 0x3f20
    8678:	01a03002 	moveq	r3, r2
    867c:	e5801014 	str	r1, [r0, #20]
    8680:	e783e00c 	str	lr, [r3, ip]
    8684:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008688 <CGPIOPin::Read() const>:
    8688:	e5901008 	ldr	r1, [r0, #8]
    868c:	e3a03034 	mov	r3, #52	; 0x34
    8690:	e3433f20 	movt	r3, #16160	; 0x3f20
    8694:	e590200c 	ldr	r2, [r0, #12]
    8698:	e7913003 	ldr	r3, [r1, r3]
    869c:	e1130002 	tst	r3, r2
    86a0:	13a00001 	movne	r0, #1
    86a4:	03a00000 	moveq	r0, #0
    86a8:	e12fff1e 	bx	lr

000086ac <CGPIOPin::Invert()>:
    86ac:	e5902014 	ldr	r2, [r0, #20]
    86b0:	e3a01028 	mov	r1, #40	; 0x28
    86b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    86b8:	e3520001 	cmp	r2, #1
    86bc:	e590e00c 	ldr	lr, [r0, #12]
    86c0:	e3431f20 	movt	r1, #16160	; 0x3f20
    86c4:	e590c008 	ldr	ip, [r0, #8]
    86c8:	e3a0301c 	mov	r3, #28
    86cc:	e3433f20 	movt	r3, #16160	; 0x3f20
    86d0:	01a03001 	moveq	r3, r1
    86d4:	e2222001 	eor	r2, r2, #1
    86d8:	e5802014 	str	r2, [r0, #20]
    86dc:	e783e00c 	str	lr, [r3, ip]
    86e0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000086e4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    86e4:	e580101c 	str	r1, [r0, #28]
    86e8:	e1a01000 	mov	r1, r0
    86ec:	e5802020 	str	r2, [r0, #32]
    86f0:	e5900018 	ldr	r0, [r0, #24]
    86f4:	ea001112 	b	cb44 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>

000086f8 <CGPIOPin::DisconnectInterrupt()>:
    86f8:	e1a01000 	mov	r1, r0
    86fc:	e3a03000 	mov	r3, #0
    8700:	e580301c 	str	r3, [r0, #28]
    8704:	e5900018 	ldr	r0, [r0, #24]
    8708:	ea001111 	b	cb54 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>

0000870c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    870c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8710:	e30f5bd8 	movw	r5, #64472	; 0xfbd8
    8714:	e3405000 	movt	r5, #0
    8718:	e1a07000 	mov	r7, r0
    871c:	e5973008 	ldr	r3, [r7, #8]
    8720:	e3a0600c 	mov	r6, #12
    8724:	e5950000 	ldr	r0, [r5]
    8728:	e3a0404c 	mov	r4, #76	; 0x4c
    872c:	e3434f20 	movt	r4, #16160	; 0x3f20
    8730:	e5c71024 	strb	r1, [r7, #36]	; 0x24
    8734:	e3500000 	cmp	r0, #0
    8738:	e0834004 	add	r4, r3, r4
    873c:	e0060196 	mul	r6, r6, r1
    8740:	1a000008 	bne	8768 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x5c>
    8744:	e597200c 	ldr	r2, [r7, #12]
    8748:	e7943006 	ldr	r3, [r4, r6]
    874c:	e1833002 	orr	r3, r3, r2
    8750:	e7843006 	str	r3, [r4, r6]
    8754:	e5953000 	ldr	r3, [r5]
    8758:	e3530000 	cmp	r3, #0
    875c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8760:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8764:	ea0001d2 	b	8eb4 <LeaveCritical>
    8768:	eb0001c3 	bl	8e7c <EnterCritical>
    876c:	eafffff4 	b	8744 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>

00008770 <CGPIOPin::DisableInterrupt()>:
    8770:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8774:	e30f6bd8 	movw	r6, #64472	; 0xfbd8
    8778:	e3406000 	movt	r6, #0
    877c:	e1a05000 	mov	r5, r0
    8780:	e5d52024 	ldrb	r2, [r5, #36]	; 0x24
    8784:	e3a0700c 	mov	r7, #12
    8788:	e5960000 	ldr	r0, [r6]
    878c:	e3a0404c 	mov	r4, #76	; 0x4c
    8790:	e5953008 	ldr	r3, [r5, #8]
    8794:	e3434f20 	movt	r4, #16160	; 0x3f20
    8798:	e3500000 	cmp	r0, #0
    879c:	e0070297 	mul	r7, r7, r2
    87a0:	e0834004 	add	r4, r3, r4
    87a4:	1a00000a 	bne	87d4 <CGPIOPin::DisableInterrupt()+0x64>
    87a8:	e7973004 	ldr	r3, [r7, r4]
    87ac:	e595200c 	ldr	r2, [r5, #12]
    87b0:	e1c33002 	bic	r3, r3, r2
    87b4:	e7873004 	str	r3, [r7, r4]
    87b8:	e5963000 	ldr	r3, [r6]
    87bc:	e3530000 	cmp	r3, #0
    87c0:	0a000000 	beq	87c8 <CGPIOPin::DisableInterrupt()+0x58>
    87c4:	eb0001ba 	bl	8eb4 <LeaveCritical>
    87c8:	e3a03006 	mov	r3, #6
    87cc:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    87d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    87d4:	eb0001a8 	bl	8e7c <EnterCritical>
    87d8:	eafffff2 	b	87a8 <CGPIOPin::DisableInterrupt()+0x38>

000087dc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    87dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    87e0:	e30f5bd8 	movw	r5, #64472	; 0xfbd8
    87e4:	e3405000 	movt	r5, #0
    87e8:	e1a07000 	mov	r7, r0
    87ec:	e5973008 	ldr	r3, [r7, #8]
    87f0:	e3a0600c 	mov	r6, #12
    87f4:	e5950000 	ldr	r0, [r5]
    87f8:	e3a0404c 	mov	r4, #76	; 0x4c
    87fc:	e3434f20 	movt	r4, #16160	; 0x3f20
    8800:	e5c71025 	strb	r1, [r7, #37]	; 0x25
    8804:	e3500000 	cmp	r0, #0
    8808:	e0834004 	add	r4, r3, r4
    880c:	e0060196 	mul	r6, r6, r1
    8810:	1a000008 	bne	8838 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x5c>
    8814:	e597200c 	ldr	r2, [r7, #12]
    8818:	e7943006 	ldr	r3, [r4, r6]
    881c:	e1833002 	orr	r3, r3, r2
    8820:	e7843006 	str	r3, [r4, r6]
    8824:	e5953000 	ldr	r3, [r5]
    8828:	e3530000 	cmp	r3, #0
    882c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8830:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8834:	ea00019e 	b	8eb4 <LeaveCritical>
    8838:	eb00018f 	bl	8e7c <EnterCritical>
    883c:	eafffff4 	b	8814 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>

00008840 <CGPIOPin::DisableInterrupt2()>:
    8840:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8844:	e30f6bd8 	movw	r6, #64472	; 0xfbd8
    8848:	e3406000 	movt	r6, #0
    884c:	e1a05000 	mov	r5, r0
    8850:	e5d52025 	ldrb	r2, [r5, #37]	; 0x25
    8854:	e3a0700c 	mov	r7, #12
    8858:	e5960000 	ldr	r0, [r6]
    885c:	e3a0404c 	mov	r4, #76	; 0x4c
    8860:	e5953008 	ldr	r3, [r5, #8]
    8864:	e3434f20 	movt	r4, #16160	; 0x3f20
    8868:	e3500000 	cmp	r0, #0
    886c:	e0070297 	mul	r7, r7, r2
    8870:	e0834004 	add	r4, r3, r4
    8874:	1a00000a 	bne	88a4 <CGPIOPin::DisableInterrupt2()+0x64>
    8878:	e7973004 	ldr	r3, [r7, r4]
    887c:	e595200c 	ldr	r2, [r5, #12]
    8880:	e1c33002 	bic	r3, r3, r2
    8884:	e7873004 	str	r3, [r7, r4]
    8888:	e5963000 	ldr	r3, [r6]
    888c:	e3530000 	cmp	r3, #0
    8890:	0a000000 	beq	8898 <CGPIOPin::DisableInterrupt2()+0x58>
    8894:	eb000186 	bl	8eb4 <LeaveCritical>
    8898:	e3a03006 	mov	r3, #6
    889c:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    88a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    88a4:	eb000174 	bl	8e7c <EnterCritical>
    88a8:	eafffff2 	b	8878 <CGPIOPin::DisableInterrupt2()+0x38>

000088ac <CGPIOPin::ReadAll()>:
    88ac:	e3a03000 	mov	r3, #0
    88b0:	e3433f20 	movt	r3, #16160	; 0x3f20
    88b4:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    88b8:	e12fff1e 	bx	lr

000088bc <CGPIOPin::SetPullUpMode(unsigned int)>:
    88bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    88c0:	e30f5bd8 	movw	r5, #64472	; 0xfbd8
    88c4:	e3405000 	movt	r5, #0
    88c8:	e1a07000 	mov	r7, r0
    88cc:	e5973008 	ldr	r3, [r7, #8]
    88d0:	e3a04098 	mov	r4, #152	; 0x98
    88d4:	e5950000 	ldr	r0, [r5]
    88d8:	e3434f20 	movt	r4, #16160	; 0x3f20
    88dc:	e1a08001 	mov	r8, r1
    88e0:	e0834004 	add	r4, r3, r4
    88e4:	e3500000 	cmp	r0, #0
    88e8:	1a000010 	bne	8930 <CGPIOPin::SetPullUpMode(unsigned int)+0x74>
    88ec:	e3a06000 	mov	r6, #0
    88f0:	e3436f20 	movt	r6, #16160	; 0x3f20
    88f4:	e3a00005 	mov	r0, #5
    88f8:	e5868094 	str	r8, [r6, #148]	; 0x94
    88fc:	eb0003b5 	bl	97d8 <CTimer::SimpleusDelay(unsigned int)>
    8900:	e597300c 	ldr	r3, [r7, #12]
    8904:	e3a00005 	mov	r0, #5
    8908:	e5843000 	str	r3, [r4]
    890c:	eb0003b1 	bl	97d8 <CTimer::SimpleusDelay(unsigned int)>
    8910:	e3a03000 	mov	r3, #0
    8914:	e5863094 	str	r3, [r6, #148]	; 0x94
    8918:	e5843000 	str	r3, [r4]
    891c:	e5953000 	ldr	r3, [r5]
    8920:	e3530000 	cmp	r3, #0
    8924:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8928:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    892c:	ea000160 	b	8eb4 <LeaveCritical>
    8930:	eb000151 	bl	8e7c <EnterCritical>
    8934:	eaffffec 	b	88ec <CGPIOPin::SetPullUpMode(unsigned int)+0x30>

00008938 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    8938:	e590c004 	ldr	ip, [r0, #4]
    893c:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    8940:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    8944:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8948:	e3a0e00a 	mov	lr, #10
    894c:	e083229c 	umull	r2, r3, ip, r2
    8950:	e30f5bd8 	movw	r5, #64472	; 0xfbd8
    8954:	e3405000 	movt	r5, #0
    8958:	e1a07001 	mov	r7, r1
    895c:	e5950000 	ldr	r0, [r5]
    8960:	e1a041a3 	lsr	r4, r3, #3
    8964:	e3500000 	cmp	r0, #0
    8968:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    896c:	e064c49e 	mls	r4, lr, r4, ip
    8970:	e2833702 	add	r3, r3, #524288	; 0x80000
    8974:	e1a06103 	lsl	r6, r3, #2
    8978:	e0844084 	add	r4, r4, r4, lsl #1
    897c:	1a00000c 	bne	89b4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x7c>
    8980:	e30e26ec 	movw	r2, #59116	; 0xe6ec
    8984:	e3402000 	movt	r2, #0
    8988:	e5963000 	ldr	r3, [r6]
    898c:	e3a01007 	mov	r1, #7
    8990:	e7922107 	ldr	r2, [r2, r7, lsl #2]
    8994:	e1c33411 	bic	r3, r3, r1, lsl r4
    8998:	e1834412 	orr	r4, r3, r2, lsl r4
    899c:	e5864000 	str	r4, [r6]
    89a0:	e5953000 	ldr	r3, [r5]
    89a4:	e3530000 	cmp	r3, #0
    89a8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    89ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    89b0:	ea00013f 	b	8eb4 <LeaveCritical>
    89b4:	eb000130 	bl	8e7c <EnterCritical>
    89b8:	eafffff0 	b	8980 <CGPIOPin::SetAlternateFunction(unsigned int)+0x48>

000089bc <CGPIOPin::SetMode(TGPIOMode, int)>:
    89bc:	e2413004 	sub	r3, r1, #4
    89c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    89c4:	e1a06002 	mov	r6, r2
    89c8:	e6ef2073 	uxtb	r2, r3
    89cc:	e1a05000 	mov	r5, r0
    89d0:	e3520005 	cmp	r2, #5
    89d4:	e5c01010 	strb	r1, [r0, #16]
    89d8:	9a00002b 	bls	8a8c <CGPIOPin::SetMode(TGPIOMode, int)+0xd0>
    89dc:	e2963000 	adds	r3, r6, #0
    89e0:	13a03001 	movne	r3, #1
    89e4:	e3510001 	cmp	r1, #1
    89e8:	13a03000 	movne	r3, #0
    89ec:	e3530000 	cmp	r3, #0
    89f0:	1a00004e 	bne	8b30 <CGPIOPin::SetMode(TGPIOMode, int)+0x174>
    89f4:	e5951004 	ldr	r1, [r5, #4]
    89f8:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    89fc:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    8a00:	e3a0c00a 	mov	ip, #10
    8a04:	e30f7bd8 	movw	r7, #64472	; 0xfbd8
    8a08:	e3407000 	movt	r7, #0
    8a0c:	e0832291 	umull	r2, r3, r1, r2
    8a10:	e5970000 	ldr	r0, [r7]
    8a14:	e3500000 	cmp	r0, #0
    8a18:	e1a041a3 	lsr	r4, r3, #3
    8a1c:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    8a20:	e064149c 	mls	r4, ip, r4, r1
    8a24:	e2833702 	add	r3, r3, #524288	; 0x80000
    8a28:	e1a08103 	lsl	r8, r3, #2
    8a2c:	e0844084 	add	r4, r4, r4, lsl #1
    8a30:	1a000024 	bne	8ac8 <CGPIOPin::SetMode(TGPIOMode, int)+0x10c>
    8a34:	e5d52010 	ldrb	r2, [r5, #16]
    8a38:	e3a01007 	mov	r1, #7
    8a3c:	e5983000 	ldr	r3, [r8]
    8a40:	e2422001 	sub	r2, r2, #1
    8a44:	e16f2f12 	clz	r2, r2
    8a48:	e1c33411 	bic	r3, r3, r1, lsl r4
    8a4c:	e1a022a2 	lsr	r2, r2, #5
    8a50:	e1834412 	orr	r4, r3, r2, lsl r4
    8a54:	e5884000 	str	r4, [r8]
    8a58:	e5973000 	ldr	r3, [r7]
    8a5c:	e3530000 	cmp	r3, #0
    8a60:	1a00001a 	bne	8ad0 <CGPIOPin::SetMode(TGPIOMode, int)+0x114>
    8a64:	e3560000 	cmp	r6, #0
    8a68:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8a6c:	e5d53010 	ldrb	r3, [r5, #16]
    8a70:	e3530003 	cmp	r3, #3
    8a74:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8a78:	ea000009 	b	8aa4 <CGPIOPin::SetMode(TGPIOMode, int)+0xe8>
    8a7c:	00008b20 	.word	0x00008b20
    8a80:	00008b00 	.word	0x00008b00
    8a84:	00008af0 	.word	0x00008af0
    8a88:	00008ae0 	.word	0x00008ae0
    8a8c:	e3560000 	cmp	r6, #0
    8a90:	1a000004 	bne	8aa8 <CGPIOPin::SetMode(TGPIOMode, int)+0xec>
    8a94:	e1a00005 	mov	r0, r5
    8a98:	e1a01003 	mov	r1, r3
    8a9c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8aa0:	eaffffa4 	b	8938 <CGPIOPin::SetAlternateFunction(unsigned int)>
    8aa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8aa8:	e3a01000 	mov	r1, #0
    8aac:	ebffff82 	bl	88bc <CGPIOPin::SetPullUpMode(unsigned int)>
    8ab0:	e5d51010 	ldrb	r1, [r5, #16]
    8ab4:	e1a00005 	mov	r0, r5
    8ab8:	e2413004 	sub	r3, r1, #4
    8abc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8ac0:	e1a01003 	mov	r1, r3
    8ac4:	eaffff9b 	b	8938 <CGPIOPin::SetAlternateFunction(unsigned int)>
    8ac8:	eb0000eb 	bl	8e7c <EnterCritical>
    8acc:	eaffffd8 	b	8a34 <CGPIOPin::SetMode(TGPIOMode, int)+0x78>
    8ad0:	eb0000f7 	bl	8eb4 <LeaveCritical>
    8ad4:	e3560000 	cmp	r6, #0
    8ad8:	1affffe3 	bne	8a6c <CGPIOPin::SetMode(TGPIOMode, int)+0xb0>
    8adc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8ae0:	e1a00005 	mov	r0, r5
    8ae4:	e3a01001 	mov	r1, #1
    8ae8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8aec:	eaffff72 	b	88bc <CGPIOPin::SetPullUpMode(unsigned int)>
    8af0:	e1a00005 	mov	r0, r5
    8af4:	e3a01002 	mov	r1, #2
    8af8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8afc:	eaffff6e 	b	88bc <CGPIOPin::SetPullUpMode(unsigned int)>
    8b00:	e595100c 	ldr	r1, [r5, #12]
    8b04:	e3a03028 	mov	r3, #40	; 0x28
    8b08:	e5952008 	ldr	r2, [r5, #8]
    8b0c:	e3433f20 	movt	r3, #16160	; 0x3f20
    8b10:	e3a00000 	mov	r0, #0
    8b14:	e5850014 	str	r0, [r5, #20]
    8b18:	e7821003 	str	r1, [r2, r3]
    8b1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b20:	e1a00005 	mov	r0, r5
    8b24:	e3a01000 	mov	r1, #0
    8b28:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b2c:	eaffff62 	b	88bc <CGPIOPin::SetPullUpMode(unsigned int)>
    8b30:	e3a01000 	mov	r1, #0
    8b34:	ebffff60 	bl	88bc <CGPIOPin::SetPullUpMode(unsigned int)>
    8b38:	eaffffad 	b	89f4 <CGPIOPin::SetMode(TGPIOMode, int)+0x38>

00008b3c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    8b3c:	e59fc080 	ldr	ip, [pc, #128]	; 8bc4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x88>
    8b40:	e3510035 	cmp	r1, #53	; 0x35
    8b44:	e92d4070 	push	{r4, r5, r6, lr}
    8b48:	e1a06002 	mov	r6, r2
    8b4c:	e5803018 	str	r3, [r0, #24]
    8b50:	e3a02000 	mov	r2, #0
    8b54:	e3a0300a 	mov	r3, #10
    8b58:	e1a05001 	mov	r5, r1
    8b5c:	e5c03010 	strb	r3, [r0, #16]
    8b60:	e1a04000 	mov	r4, r0
    8b64:	e3a03006 	mov	r3, #6
    8b68:	e5801004 	str	r1, [r0, #4]
    8b6c:	e580c000 	str	ip, [r0]
    8b70:	e580201c 	str	r2, [r0, #28]
    8b74:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    8b78:	e5c03025 	strb	r3, [r0, #37]	; 0x25
    8b7c:	9a000004 	bls	8b94 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x58>
    8b80:	eb001175 	bl	d15c <CMachineInfo::Get()>
    8b84:	e6ef1075 	uxtb	r1, r5
    8b88:	eb001156 	bl	d0e8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    8b8c:	e1a05000 	mov	r5, r0
    8b90:	e5840004 	str	r0, [r4, #4]
    8b94:	e1a032a5 	lsr	r3, r5, #5
    8b98:	e3a02001 	mov	r2, #1
    8b9c:	e205501f 	and	r5, r5, #31
    8ba0:	e1a00004 	mov	r0, r4
    8ba4:	e1a03103 	lsl	r3, r3, #2
    8ba8:	e1a05512 	lsl	r5, r2, r5
    8bac:	e1a01006 	mov	r1, r6
    8bb0:	e5843008 	str	r3, [r4, #8]
    8bb4:	e584500c 	str	r5, [r4, #12]
    8bb8:	ebffff7f 	bl	89bc <CGPIOPin::SetMode(TGPIOMode, int)>
    8bbc:	e1a00004 	mov	r0, r4
    8bc0:	e8bd8070 	pop	{r4, r5, r6, pc}
    8bc4:	0000e70c 	.word	0x0000e70c

00008bc8 <CGPIOPin::InterruptHandler()>:
    8bc8:	e590301c 	ldr	r3, [r0, #28]
    8bcc:	e5900020 	ldr	r0, [r0, #32]
    8bd0:	e12fff13 	bx	r3

00008bd4 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    8bd4:	e92d4070 	push	{r4, r5, r6, lr}
    8bd8:	e30f6bd8 	movw	r6, #64472	; 0xfbd8
    8bdc:	e3406000 	movt	r6, #0
    8be0:	e3a04013 	mov	r4, #19
    8be4:	e3404fc8 	movt	r4, #4040	; 0xfc8
    8be8:	e200501f 	and	r5, r0, #31
    8bec:	e5963000 	ldr	r3, [r6]
    8bf0:	e08442a0 	add	r4, r4, r0, lsr #5
    8bf4:	e3a02001 	mov	r2, #1
    8bf8:	e3530000 	cmp	r3, #0
    8bfc:	e1a04104 	lsl	r4, r4, #2
    8c00:	e1a05512 	lsl	r5, r2, r5
    8c04:	1a000011 	bne	8c50 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
    8c08:	e3a0308b 	mov	r3, #139	; 0x8b
    8c0c:	e3433f20 	movt	r3, #16160	; 0x3f20
    8c10:	e1540003 	cmp	r4, r3
    8c14:	8a00000c 	bhi	8c4c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    8c18:	e3a0108b 	mov	r1, #139	; 0x8b
    8c1c:	e3431f20 	movt	r1, #16160	; 0x3f20
    8c20:	e1e02005 	mvn	r2, r5
    8c24:	e5943000 	ldr	r3, [r4]
    8c28:	e0033002 	and	r3, r3, r2
    8c2c:	e484300c 	str	r3, [r4], #12
    8c30:	e1540001 	cmp	r4, r1
    8c34:	9afffffa 	bls	8c24 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    8c38:	e5963000 	ldr	r3, [r6]
    8c3c:	e3530000 	cmp	r3, #0
    8c40:	08bd8070 	popeq	{r4, r5, r6, pc}
    8c44:	e8bd4070 	pop	{r4, r5, r6, lr}
    8c48:	ea000099 	b	8eb4 <LeaveCritical>
    8c4c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8c50:	e1a00003 	mov	r0, r3
    8c54:	eb000088 	bl	8e7c <EnterCritical>
    8c58:	e3a0308b 	mov	r3, #139	; 0x8b
    8c5c:	e3433f20 	movt	r3, #16160	; 0x3f20
    8c60:	e1540003 	cmp	r4, r3
    8c64:	9affffeb 	bls	8c18 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
    8c68:	eafffff2 	b	8c38 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>

00008c6c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    8c6c:	e30f3bd8 	movw	r3, #64472	; 0xfbd8
    8c70:	e3403000 	movt	r3, #0
    8c74:	e3a02001 	mov	r2, #1
    8c78:	e5832000 	str	r2, [r3]
    8c7c:	e12fff1e 	bx	lr

00008c80 <__aeabi_uidiv>:
    8c80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8c84:	e3a02000 	mov	r2, #0
    8c88:	eb001325 	bl	d924 <__Divide>
    8c8c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008c90 <__aeabi_uidivmod>:
    8c90:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8c94:	e24dd00c 	sub	sp, sp, #12
    8c98:	e28d2004 	add	r2, sp, #4
    8c9c:	eb001320 	bl	d924 <__Divide>
    8ca0:	e59d1004 	ldr	r1, [sp, #4]
    8ca4:	e28dd00c 	add	sp, sp, #12
    8ca8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008cac <__aeabi_idiv>:
    8cac:	ea001348 	b	d9d4 <__DivideInteger>

00008cb0 <CMemorySystem::~CMemorySystem()>:
    8cb0:	e5903000 	ldr	r3, [r0]
    8cb4:	e92d4070 	push	{r4, r5, r6, lr}
    8cb8:	e3530000 	cmp	r3, #0
    8cbc:	e1a04000 	mov	r4, r0
    8cc0:	0a000005 	beq	8cdc <CMemorySystem::~CMemorySystem()+0x2c>
    8cc4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    8cc8:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    8ccc:	e3c33005 	bic	r3, r3, #5
    8cd0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8cd4:	e3a03000 	mov	r3, #0
    8cd8:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    8cdc:	e594500c 	ldr	r5, [r4, #12]
    8ce0:	e3550000 	cmp	r5, #0
    8ce4:	0a000004 	beq	8cfc <CMemorySystem::~CMemorySystem()+0x4c>
    8ce8:	e1a00005 	mov	r0, r5
    8cec:	eb0004ba 	bl	9fdc <CPageTable::~CPageTable()>
    8cf0:	e1a00005 	mov	r0, r5
    8cf4:	e3a01008 	mov	r1, #8
    8cf8:	eb00005d 	bl	8e74 <operator delete(void*, unsigned int)>
    8cfc:	e5945008 	ldr	r5, [r4, #8]
    8d00:	e3a03000 	mov	r3, #0
    8d04:	e584300c 	str	r3, [r4, #12]
    8d08:	e1550003 	cmp	r5, r3
    8d0c:	0a000004 	beq	8d24 <CMemorySystem::~CMemorySystem()+0x74>
    8d10:	e1a00005 	mov	r0, r5
    8d14:	eb0004b0 	bl	9fdc <CPageTable::~CPageTable()>
    8d18:	e1a00005 	mov	r0, r5
    8d1c:	e3a01008 	mov	r1, #8
    8d20:	eb000053 	bl	8e74 <operator delete(void*, unsigned int)>
    8d24:	e1a00004 	mov	r0, r4
    8d28:	e8bd8070 	pop	{r4, r5, r6, pc}

00008d2c <CMemorySystem::GetMemSize() const>:
    8d2c:	e5900004 	ldr	r0, [r0, #4]
    8d30:	e12fff1e 	bx	lr

00008d34 <CMemorySystem::EnableMMU()>:
    8d34:	e92d4010 	push	{r4, lr}
    8d38:	e1a04000 	mov	r4, r0
    8d3c:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    8d40:	e3833040 	orr	r3, r3, #64	; 0x40
    8d44:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    8d48:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    8d4c:	e3a03002 	mov	r3, #2
    8d50:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    8d54:	e5900008 	ldr	r0, [r0, #8]
    8d58:	eb0004a8 	bl	a000 <CPageTable::GetBaseAddress() const>
    8d5c:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    8d60:	e594000c 	ldr	r0, [r4, #12]
    8d64:	eb0004a5 	bl	a000 <CPageTable::GetBaseAddress() const>
    8d68:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    8d6c:	e3a03005 	mov	r3, #5
    8d70:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    8d74:	eb001117 	bl	d1d8 <InvalidateDataCache>
    8d78:	e3a03000 	mov	r3, #0
    8d7c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    8d80:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    8d84:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    8d88:	f57ff04f 	dsb	sy
    8d8c:	f57ff06f 	isb	sy
    8d90:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    8d94:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    8d98:	e3833005 	orr	r3, r3, #5
    8d9c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8da0:	e8bd8010 	pop	{r4, pc}

00008da4 <CMemorySystem::CMemorySystem(int)>:
    8da4:	e92d4030 	push	{r4, r5, lr}
    8da8:	e1a04000 	mov	r4, r0
    8dac:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    8db0:	e5801000 	str	r1, [r0]
    8db4:	e3a05000 	mov	r5, #0
    8db8:	e28d000c 	add	r0, sp, #12
    8dbc:	e5845004 	str	r5, [r4, #4]
    8dc0:	e5845008 	str	r5, [r4, #8]
    8dc4:	e584500c 	str	r5, [r4, #12]
    8dc8:	ebfffdd8 	bl	8530 <CBcmPropertyTags::CBcmPropertyTags()>
    8dcc:	e3a03014 	mov	r3, #20
    8dd0:	e58d5000 	str	r5, [sp]
    8dd4:	e08d2003 	add	r2, sp, r3
    8dd8:	e28d000c 	add	r0, sp, #12
    8ddc:	e3a01005 	mov	r1, #5
    8de0:	e3401001 	movt	r1, #1
    8de4:	ebfffdfd 	bl	85e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8de8:	e2503000 	subs	r3, r0, #0
    8dec:	058d3020 	streq	r3, [sp, #32]
    8df0:	159d1024 	ldrne	r1, [sp, #36]	; 0x24
    8df4:	03a02303 	moveq	r2, #201326592	; 0xc000000
    8df8:	01a00003 	moveq	r0, r3
    8dfc:	01a01002 	moveq	r1, r2
    8e00:	159d0020 	ldrne	r0, [sp, #32]
    8e04:	e5841004 	str	r1, [r4, #4]
    8e08:	058d2024 	streq	r2, [sp, #36]	; 0x24
    8e0c:	eb0011b0 	bl	d4d4 <mem_init>
    8e10:	e5943000 	ldr	r3, [r4]
    8e14:	e3530000 	cmp	r3, #0
    8e18:	0a00000c 	beq	8e50 <CMemorySystem::CMemorySystem(int)+0xac>
    8e1c:	e3a00008 	mov	r0, #8
    8e20:	eb00000f 	bl	8e64 <operator new(unsigned int)>
    8e24:	e5941004 	ldr	r1, [r4, #4]
    8e28:	e1a05000 	mov	r5, r0
    8e2c:	eb00042e 	bl	9eec <CPageTable::CPageTable(unsigned int)>
    8e30:	e5845008 	str	r5, [r4, #8]
    8e34:	e3a00008 	mov	r0, #8
    8e38:	eb000009 	bl	8e64 <operator new(unsigned int)>
    8e3c:	e1a05000 	mov	r5, r0
    8e40:	eb0003fd 	bl	9e3c <CPageTable::CPageTable()>
    8e44:	e584500c 	str	r5, [r4, #12]
    8e48:	e1a00004 	mov	r0, r4
    8e4c:	ebffffb8 	bl	8d34 <CMemorySystem::EnableMMU()>
    8e50:	e28d000c 	add	r0, sp, #12
    8e54:	ebfffdbb 	bl	8548 <CBcmPropertyTags::~CBcmPropertyTags()>
    8e58:	e1a00004 	mov	r0, r4
    8e5c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    8e60:	e8bd8030 	pop	{r4, r5, pc}

00008e64 <operator new(unsigned int)>:
    8e64:	ea0011b2 	b	d534 <malloc>

00008e68 <operator new[](unsigned int)>:
    8e68:	ea0011b1 	b	d534 <malloc>

00008e6c <operator delete(void*)>:
    8e6c:	ea0011f0 	b	d634 <free>

00008e70 <operator delete[](void*)>:
    8e70:	ea0011ef 	b	d634 <free>

00008e74 <operator delete(void*, unsigned int)>:
    8e74:	ea0011ee 	b	d634 <free>

00008e78 <operator delete[](void*, unsigned int)>:
    8e78:	ea0011ed 	b	d634 <free>

00008e7c <EnterCritical>:
    8e7c:	e10f1000 	mrs	r1, CPSR
    8e80:	f10c0080 	cpsid	i
    8e84:	e3500002 	cmp	r0, #2
    8e88:	1a000000 	bne	8e90 <EnterCritical+0x14>
    8e8c:	f10c0040 	cpsid	f
    8e90:	e30f3bdc 	movw	r3, #64476	; 0xfbdc
    8e94:	e3403000 	movt	r3, #0
    8e98:	e5932000 	ldr	r2, [r3]
    8e9c:	e2820001 	add	r0, r2, #1
    8ea0:	e5830000 	str	r0, [r3]
    8ea4:	e0833102 	add	r3, r3, r2, lsl #2
    8ea8:	e5831004 	str	r1, [r3, #4]
    8eac:	f57ff05f 	dmb	sy
    8eb0:	e12fff1e 	bx	lr

00008eb4 <LeaveCritical>:
    8eb4:	f57ff05f 	dmb	sy
    8eb8:	e30f3bdc 	movw	r3, #64476	; 0xfbdc
    8ebc:	e3403000 	movt	r3, #0
    8ec0:	e5932000 	ldr	r2, [r3]
    8ec4:	e2422001 	sub	r2, r2, #1
    8ec8:	e5832000 	str	r2, [r3]
    8ecc:	e0833102 	add	r3, r3, r2, lsl #2
    8ed0:	e5933004 	ldr	r3, [r3, #4]
    8ed4:	e121f003 	msr	CPSR_c, r3
    8ed8:	e12fff1e 	bx	lr

00008edc <SyncDataAndInstructionCache>:
    8edc:	e92d4010 	push	{r4, lr}
    8ee0:	eb0010e6 	bl	d280 <CleanDataCache>
    8ee4:	e3a03000 	mov	r3, #0
    8ee8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    8eec:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    8ef0:	f57ff04f 	dsb	sy
    8ef4:	f57ff06f 	isb	sy
    8ef8:	e8bd8010 	pop	{r4, pc}

00008efc <__aeabi_atexit>:
    8efc:	e12fff1e 	bx	lr

00008f00 <halt>:
    8f00:	f10c0080 	cpsid	i
    8f04:	f10c0040 	cpsid	f
    8f08:	f57ff04f 	dsb	sy
    8f0c:	e320f003 	wfi
    8f10:	eafffffc 	b	8f08 <halt+0x8>

00008f14 <reboot>:
    8f14:	e3a03000 	mov	r3, #0
    8f18:	e3433f10 	movt	r3, #16144	; 0x3f10
    8f1c:	e3a01001 	mov	r1, #1
    8f20:	e3a02020 	mov	r2, #32
    8f24:	e3451a00 	movt	r1, #23040	; 0x5a00
    8f28:	e3452a00 	movt	r2, #23040	; 0x5a00
    8f2c:	e5831024 	str	r1, [r3, #36]	; 0x24
    8f30:	e583201c 	str	r2, [r3, #28]
    8f34:	eafffffe 	b	8f34 <reboot+0x20>

00008f38 <sysinit>:
    8f38:	e92d4030 	push	{r4, r5, lr}
    8f3c:	e24dd01c 	sub	sp, sp, #28
    8f40:	f1080040 	cpsie	f
    8f44:	eb001088 	bl	d16c <InvalidateDataCacheL1Only>
    8f48:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    8f4c:	e3083064 	movw	r3, #32868	; 0x8064
    8f50:	e3403000 	movt	r3, #0
    8f54:	e582309c 	str	r3, [r2, #156]	; 0x9c
    8f58:	e58230ac 	str	r3, [r2, #172]	; 0xac
    8f5c:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    8f60:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    8f64:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    8f68:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    8f6c:	f57ff06f 	isb	sy
    8f70:	eee82a10 	vmsr	fpexc, r2
    8f74:	e3a01000 	mov	r1, #0
    8f78:	eee11a10 	vmsr	fpscr, r1
    8f7c:	e30f3bd4 	movw	r3, #64468	; 0xfbd4
    8f80:	e30f2c74 	movw	r2, #64628	; 0xfc74
    8f84:	e3403000 	movt	r3, #0
    8f88:	e3402000 	movt	r2, #0
    8f8c:	e1530002 	cmp	r3, r2
    8f90:	2a000002 	bcs	8fa0 <sysinit+0x68>
    8f94:	e4c31001 	strb	r1, [r3], #1
    8f98:	e1530002 	cmp	r3, r2
    8f9c:	1afffffc 	bne	8f94 <sysinit+0x5c>
    8fa0:	e1a0000d 	mov	r0, sp
    8fa4:	e30f5ae4 	movw	r5, #64228	; 0xfae4
    8fa8:	e30f4ad8 	movw	r4, #64216	; 0xfad8
    8fac:	e3405000 	movt	r5, #0
    8fb0:	e3404000 	movt	r4, #0
    8fb4:	eb000f8e 	bl	cdf4 <CMachineInfo::CMachineInfo()>
    8fb8:	e1540005 	cmp	r4, r5
    8fbc:	2a000003 	bcs	8fd0 <sysinit+0x98>
    8fc0:	e4943004 	ldr	r3, [r4], #4
    8fc4:	e12fff33 	blx	r3
    8fc8:	e1540005 	cmp	r4, r5
    8fcc:	3afffffb 	bcc	8fc0 <sysinit+0x88>
    8fd0:	ebfffc26 	bl	8070 <main>
    8fd4:	e3500001 	cmp	r0, #1
    8fd8:	0a000000 	beq	8fe0 <sysinit+0xa8>
    8fdc:	ebffffc7 	bl	8f00 <halt>
    8fe0:	ebffffcb 	bl	8f14 <reboot>

00008fe4 <CTimer::CTimer(CInterruptSystem*)>:
    8fe4:	e92d4070 	push	{r4, r5, r6, lr}
    8fe8:	e1a04000 	mov	r4, r0
    8fec:	e5801000 	str	r1, [r0]
    8ff0:	e3a03000 	mov	r3, #0
    8ff4:	e3a05001 	mov	r5, #1
    8ff8:	e5803004 	str	r3, [r0, #4]
    8ffc:	e5843008 	str	r3, [r4, #8]
    9000:	e2800018 	add	r0, r0, #24
    9004:	e5843014 	str	r3, [r4, #20]
    9008:	e584300c 	str	r3, [r4, #12]
    900c:	e5845010 	str	r5, [r4, #16]
    9010:	eb0010d2 	bl	d360 <CPtrList::CPtrList()>
    9014:	e30f3c34 	movw	r3, #64564	; 0xfc34
    9018:	e3403000 	movt	r3, #0
    901c:	e300115e 	movw	r1, #350	; 0x15e
    9020:	e584501c 	str	r5, [r4, #28]
    9024:	e3052730 	movw	r2, #22320	; 0x5730
    9028:	e5841024 	str	r1, [r4, #36]	; 0x24
    902c:	e3402005 	movt	r2, #5
    9030:	e1a00004 	mov	r0, r4
    9034:	e5842020 	str	r2, [r4, #32]
    9038:	e5834000 	str	r4, [r3]
    903c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009040 <CTimer::~CTimer()>:
    9040:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9044:	e1a04000 	mov	r4, r0
    9048:	e1a07000 	mov	r7, r0
    904c:	e3a01003 	mov	r1, #3
    9050:	e4940018 	ldr	r0, [r4], #24
    9054:	eb000df8 	bl	c83c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9058:	ea000007 	b	907c <CTimer::~CTimer()+0x3c>
    905c:	eb0010c7 	bl	d380 <CPtrList::GetPtr(TPtrListElement*)>
    9060:	e1a01005 	mov	r1, r5
    9064:	e1a06000 	mov	r6, r0
    9068:	e1a00004 	mov	r0, r4
    906c:	eb0010f6 	bl	d44c <CPtrList::Remove(TPtrListElement*)>
    9070:	e1a00006 	mov	r0, r6
    9074:	e3a01014 	mov	r1, #20
    9078:	ebffff7d 	bl	8e74 <operator delete(void*, unsigned int)>
    907c:	e1a00004 	mov	r0, r4
    9080:	eb0010ba 	bl	d370 <CPtrList::GetFirst()>
    9084:	e2505000 	subs	r5, r0, #0
    9088:	e1a00004 	mov	r0, r4
    908c:	e1a01005 	mov	r1, r5
    9090:	1afffff1 	bne	905c <CTimer::~CTimer()+0x1c>
    9094:	e30f3c34 	movw	r3, #64564	; 0xfc34
    9098:	e3403000 	movt	r3, #0
    909c:	e1a00004 	mov	r0, r4
    90a0:	e5835000 	str	r5, [r3]
    90a4:	eb0010b0 	bl	d36c <CPtrList::~CPtrList()>
    90a8:	e1a00007 	mov	r0, r7
    90ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000090b0 <CTimer::SetTimeZone(int)>:
    90b0:	e2813e59 	add	r3, r1, #1424	; 0x590
    90b4:	e3002b3e 	movw	r2, #2878	; 0xb3e
    90b8:	e283300f 	add	r3, r3, #15
    90bc:	e1530002 	cmp	r3, r2
    90c0:	95801014 	strls	r1, [r0, #20]
    90c4:	93a00001 	movls	r0, #1
    90c8:	83a00000 	movhi	r0, #0
    90cc:	e12fff1e 	bx	lr

000090d0 <CTimer::GetTimeZone() const>:
    90d0:	e5900014 	ldr	r0, [r0, #20]
    90d4:	e12fff1e 	bx	lr

000090d8 <CTimer::SetTime(unsigned int, int)>:
    90d8:	e3520000 	cmp	r2, #0
    90dc:	e92d4070 	push	{r4, r5, r6, lr}
    90e0:	e1a04000 	mov	r4, r0
    90e4:	e1a05001 	mov	r5, r1
    90e8:	1a000005 	bne	9104 <CTimer::SetTime(unsigned int, int)+0x2c>
    90ec:	e5901014 	ldr	r1, [r0, #20]
    90f0:	e3a0303c 	mov	r3, #60	; 0x3c
    90f4:	e0030193 	mul	r3, r3, r1
    90f8:	e3530000 	cmp	r3, #0
    90fc:	ba00000e 	blt	913c <CTimer::SetTime(unsigned int, int)+0x64>
    9100:	e0855003 	add	r5, r5, r3
    9104:	e5940010 	ldr	r0, [r4, #16]
    9108:	e3500000 	cmp	r0, #0
    910c:	1a000002 	bne	911c <CTimer::SetTime(unsigned int, int)+0x44>
    9110:	e3a00001 	mov	r0, #1
    9114:	e584500c 	str	r5, [r4, #12]
    9118:	e8bd8070 	pop	{r4, r5, r6, pc}
    911c:	ebffff56 	bl	8e7c <EnterCritical>
    9120:	e5943010 	ldr	r3, [r4, #16]
    9124:	e584500c 	str	r5, [r4, #12]
    9128:	e3530000 	cmp	r3, #0
    912c:	0a000007 	beq	9150 <CTimer::SetTime(unsigned int, int)+0x78>
    9130:	ebffff5f 	bl	8eb4 <LeaveCritical>
    9134:	e3a00001 	mov	r0, #1
    9138:	e8bd8070 	pop	{r4, r5, r6, pc}
    913c:	e2631000 	rsb	r1, r3, #0
    9140:	e1510005 	cmp	r1, r5
    9144:	daffffed 	ble	9100 <CTimer::SetTime(unsigned int, int)+0x28>
    9148:	e1a00002 	mov	r0, r2
    914c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9150:	e3a00001 	mov	r0, #1
    9154:	e8bd8070 	pop	{r4, r5, r6, pc}

00009158 <CTimer::GetClockTicks()>:
    9158:	e3a03a03 	mov	r3, #12288	; 0x3000
    915c:	e3433f00 	movt	r3, #16128	; 0x3f00
    9160:	e5930004 	ldr	r0, [r3, #4]
    9164:	e12fff1e 	bx	lr

00009168 <CTimer::GetTicks() const>:
    9168:	e5900004 	ldr	r0, [r0, #4]
    916c:	e12fff1e 	bx	lr

00009170 <CTimer::GetUptime() const>:
    9170:	e5900008 	ldr	r0, [r0, #8]
    9174:	e12fff1e 	bx	lr

00009178 <CTimer::GetTime() const>:
    9178:	e590000c 	ldr	r0, [r0, #12]
    917c:	e12fff1e 	bx	lr

00009180 <CTimer::GetUniversalTime() const>:
    9180:	e5902014 	ldr	r2, [r0, #20]
    9184:	e3a0303c 	mov	r3, #60	; 0x3c
    9188:	e590000c 	ldr	r0, [r0, #12]
    918c:	e0030293 	mul	r3, r3, r2
    9190:	e1530000 	cmp	r3, r0
    9194:	d0400003 	suble	r0, r0, r3
    9198:	c3a00000 	movgt	r0, #0
    919c:	e12fff1e 	bx	lr

000091a0 <CTimer::GetTimeString()>:
    91a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91a4:	e1a05000 	mov	r5, r0
    91a8:	e5900010 	ldr	r0, [r0, #16]
    91ac:	e24dd01c 	sub	sp, sp, #28
    91b0:	e3500000 	cmp	r0, #0
    91b4:	1a00006c 	bne	936c <CTimer::GetTimeString()+0x1cc>
    91b8:	e595400c 	ldr	r4, [r5, #12]
    91bc:	e5959004 	ldr	r9, [r5, #4]
    91c0:	e1940009 	orrs	r0, r4, r9
    91c4:	0a00004f 	beq	9308 <CTimer::GetTimeString()+0x168>
    91c8:	e308a889 	movw	sl, #34953	; 0x8889
    91cc:	e348a888 	movt	sl, #34952	; 0x8888
    91d0:	e30b23c5 	movw	r2, #46021	; 0xb3c5
    91d4:	e34921a2 	movt	r2, #37282	; 0x91a2
    91d8:	e0876a94 	umull	r6, r7, r4, sl
    91dc:	e304e507 	movw	lr, #17671	; 0x4507
    91e0:	e0832294 	umull	r2, r3, r4, r2
    91e4:	e34ce22e 	movt	lr, #49710	; 0xc22e
    91e8:	e3a0003c 	mov	r0, #60	; 0x3c
    91ec:	e308151f 	movw	r1, #34079	; 0x851f
    91f0:	e1a0c2a7 	lsr	ip, r7, #5
    91f4:	e34511eb 	movt	r1, #20971	; 0x51eb
    91f8:	e30057b2 	movw	r5, #1970	; 0x7b2
    91fc:	e08baa9c 	umull	sl, fp, ip, sl
    9200:	e1a065a3 	lsr	r6, r3, #11
    9204:	e0832e94 	umull	r2, r3, r4, lr
    9208:	e3a0a064 	mov	sl, #100	; 0x64
    920c:	e0674c90 	mls	r7, r0, ip, r4
    9210:	e1a082ab 	lsr	r8, fp, #5
    9214:	e3a0ee19 	mov	lr, #400	; 0x190
    9218:	e068c890 	mls	r8, r0, r8, ip
    921c:	e1a04823 	lsr	r4, r3, #16
    9220:	e300c16d 	movw	ip, #365	; 0x16d
    9224:	e300016e 	movw	r0, #366	; 0x16e
    9228:	ea000001 	b	9234 <CTimer::GetTimeString()+0x94>
    922c:	e0444002 	sub	r4, r4, r2
    9230:	e2855001 	add	r5, r5, #1
    9234:	e0832195 	umull	r2, r3, r5, r1
    9238:	e1a022a3 	lsr	r2, r3, #5
    923c:	e1a033a3 	lsr	r3, r3, #7
    9240:	e062529a 	mls	r2, sl, r2, r5
    9244:	e063539e 	mls	r3, lr, r3, r5
    9248:	e3520000 	cmp	r2, #0
    924c:	e16f3f13 	clz	r3, r3
    9250:	01a032a3 	lsreq	r3, r3, #5
    9254:	0a000002 	beq	9264 <CTimer::GetTimeString()+0xc4>
    9258:	e3150003 	tst	r5, #3
    925c:	03a03001 	moveq	r3, #1
    9260:	13a03000 	movne	r3, #0
    9264:	e3530000 	cmp	r3, #0
    9268:	01a0200c 	moveq	r2, ip
    926c:	11a02000 	movne	r2, r0
    9270:	e1540002 	cmp	r4, r2
    9274:	2affffec 	bcs	922c <CTimer::GetTimeString()+0x8c>
    9278:	e30e0714 	movw	r0, #59156	; 0xe714
    927c:	e3a0a000 	mov	sl, #0
    9280:	e3400000 	movt	r0, #0
    9284:	ea000001 	b	9290 <CTimer::GetTimeString()+0xf0>
    9288:	e0444002 	sub	r4, r4, r2
    928c:	e28aa001 	add	sl, sl, #1
    9290:	e35a0001 	cmp	sl, #1
    9294:	13a01000 	movne	r1, #0
    9298:	02031001 	andeq	r1, r3, #1
    929c:	e3a0201d 	mov	r2, #29
    92a0:	e3510000 	cmp	r1, #0
    92a4:	0790210a 	ldreq	r2, [r0, sl, lsl #2]
    92a8:	e1540002 	cmp	r4, r2
    92ac:	2afffff5 	bcs	9288 <CTimer::GetTimeString()+0xe8>
    92b0:	e308251f 	movw	r2, #34079	; 0x851f
    92b4:	e34521eb 	movt	r2, #20971	; 0x51eb
    92b8:	e3a01064 	mov	r1, #100	; 0x64
    92bc:	e3a00010 	mov	r0, #16
    92c0:	e0832299 	umull	r2, r3, r9, r2
    92c4:	e1a0b2a3 	lsr	fp, r3, #5
    92c8:	e06b9b91 	mls	fp, r1, fp, r9
    92cc:	ebfffee4 	bl	8e64 <operator new(unsigned int)>
    92d0:	e1a09000 	mov	r9, r0
    92d4:	eb0009ac 	bl	b98c <CString::CString()>
    92d8:	e30037b7 	movw	r3, #1975	; 0x7b7
    92dc:	e1550003 	cmp	r5, r3
    92e0:	8a00000a 	bhi	9310 <CTimer::GetTimeString()+0x170>
    92e4:	e1a00009 	mov	r0, r9
    92e8:	e58db004 	str	fp, [sp, #4]
    92ec:	e1a03008 	mov	r3, r8
    92f0:	e58d7000 	str	r7, [sp]
    92f4:	e1a02006 	mov	r2, r6
    92f8:	e30e1768 	movw	r1, #59240	; 0xe768
    92fc:	e3401000 	movt	r1, #0
    9300:	eb000d00 	bl	c708 <CString::Format(char const*, ...)>
    9304:	e1a00009 	mov	r0, r9
    9308:	e28dd01c 	add	sp, sp, #28
    930c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9310:	e30a3aab 	movw	r3, #43691	; 0xaaab
    9314:	e34a3aaa 	movt	r3, #43690	; 0xaaaa
    9318:	e3a0c018 	mov	ip, #24
    931c:	e30f2ae4 	movw	r2, #64228	; 0xfae4
    9320:	e0810396 	umull	r0, r1, r6, r3
    9324:	e3402000 	movt	r2, #0
    9328:	e58db00c 	str	fp, [sp, #12]
    932c:	e2843001 	add	r3, r4, #1
    9330:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    9334:	e58d7008 	str	r7, [sp, #8]
    9338:	e58d8004 	str	r8, [sp, #4]
    933c:	e1cd01f0 	strd	r0, [sp, #16]
    9340:	e30e174c 	movw	r1, #59212	; 0xe74c
    9344:	e59d0014 	ldr	r0, [sp, #20]
    9348:	e3401000 	movt	r1, #0
    934c:	e1a0e220 	lsr	lr, r0, #4
    9350:	e1a00009 	mov	r0, r9
    9354:	e0666e9c 	mls	r6, ip, lr, r6
    9358:	e58d6000 	str	r6, [sp]
    935c:	eb000ce9 	bl	c708 <CString::Format(char const*, ...)>
    9360:	e1a00009 	mov	r0, r9
    9364:	e28dd01c 	add	sp, sp, #28
    9368:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    936c:	ebfffec2 	bl	8e7c <EnterCritical>
    9370:	e5953010 	ldr	r3, [r5, #16]
    9374:	e595400c 	ldr	r4, [r5, #12]
    9378:	e3530000 	cmp	r3, #0
    937c:	e5959004 	ldr	r9, [r5, #4]
    9380:	0affff8e 	beq	91c0 <CTimer::GetTimeString()+0x20>
    9384:	ebfffeca 	bl	8eb4 <LeaveCritical>
    9388:	eaffff8c 	b	91c0 <CTimer::GetTimeString()+0x20>

0000938c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    938c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9390:	e1a08000 	mov	r8, r0
    9394:	e3a00014 	mov	r0, #20
    9398:	e1a06002 	mov	r6, r2
    939c:	e1a04001 	mov	r4, r1
    93a0:	e1a09003 	mov	r9, r3
    93a4:	e59d5020 	ldr	r5, [sp, #32]
    93a8:	ebfffead 	bl	8e64 <operator new(unsigned int)>
    93ac:	e304cd43 	movw	ip, #19779	; 0x4d43
    93b0:	e344cb54 	movt	ip, #19284	; 0x4b54
    93b4:	e1a07000 	mov	r7, r0
    93b8:	e598001c 	ldr	r0, [r8, #28]
    93bc:	e5876004 	str	r6, [r7, #4]
    93c0:	e3500000 	cmp	r0, #0
    93c4:	e5986004 	ldr	r6, [r8, #4]
    93c8:	e587900c 	str	r9, [r7, #12]
    93cc:	e0866004 	add	r6, r6, r4
    93d0:	e5875010 	str	r5, [r7, #16]
    93d4:	e587c000 	str	ip, [r7]
    93d8:	e5876008 	str	r6, [r7, #8]
    93dc:	1a000021 	bne	9468 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    93e0:	e2885018 	add	r5, r8, #24
    93e4:	e1a00005 	mov	r0, r5
    93e8:	eb000fe0 	bl	d370 <CPtrList::GetFirst()>
    93ec:	e2504000 	subs	r4, r0, #0
    93f0:	1a000004 	bne	9408 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x7c>
    93f4:	ea000016 	b	9454 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
    93f8:	eb000fde 	bl	d378 <CPtrList::GetNext(TPtrListElement*)>
    93fc:	e3500000 	cmp	r0, #0
    9400:	0a000013 	beq	9454 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
    9404:	e1a04000 	mov	r4, r0
    9408:	e1a01004 	mov	r1, r4
    940c:	e1a00005 	mov	r0, r5
    9410:	eb000fda 	bl	d380 <CPtrList::GetPtr(TPtrListElement*)>
    9414:	e1a01004 	mov	r1, r4
    9418:	e5903008 	ldr	r3, [r0, #8]
    941c:	e1a00005 	mov	r0, r5
    9420:	e0433006 	sub	r3, r3, r6
    9424:	e3530000 	cmp	r3, #0
    9428:	dafffff2 	ble	93f8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x6c>
    942c:	e1a01004 	mov	r1, r4
    9430:	e1a00005 	mov	r0, r5
    9434:	e1a02007 	mov	r2, r7
    9438:	eb000fd2 	bl	d388 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    943c:	e598301c 	ldr	r3, [r8, #28]
    9440:	e3530000 	cmp	r3, #0
    9444:	0a000000 	beq	944c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc0>
    9448:	ebfffe99 	bl	8eb4 <LeaveCritical>
    944c:	e1a00007 	mov	r0, r7
    9450:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9454:	e1a01004 	mov	r1, r4
    9458:	e1a00005 	mov	r0, r5
    945c:	e1a02007 	mov	r2, r7
    9460:	eb000fe2 	bl	d3f0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    9464:	eafffff4 	b	943c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb0>
    9468:	ebfffe83 	bl	8e7c <EnterCritical>
    946c:	eaffffdb 	b	93e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x54>

00009470 <CTimer::CancelKernelTimer(unsigned int)>:
    9470:	e92d4070 	push	{r4, r5, r6, lr}
    9474:	e1a04000 	mov	r4, r0
    9478:	e590001c 	ldr	r0, [r0, #28]
    947c:	e1a05001 	mov	r5, r1
    9480:	e3500000 	cmp	r0, #0
    9484:	1a000011 	bne	94d0 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    9488:	e2846018 	add	r6, r4, #24
    948c:	e1a01005 	mov	r1, r5
    9490:	e1a00006 	mov	r0, r6
    9494:	eb000fff 	bl	d498 <CPtrList::Find(void*)>
    9498:	e2501000 	subs	r1, r0, #0
    949c:	0a000006 	beq	94bc <CTimer::CancelKernelTimer(unsigned int)+0x4c>
    94a0:	e1a00006 	mov	r0, r6
    94a4:	eb000fe8 	bl	d44c <CPtrList::Remove(TPtrListElement*)>
    94a8:	e3a03000 	mov	r3, #0
    94ac:	e1a00005 	mov	r0, r5
    94b0:	e5853000 	str	r3, [r5]
    94b4:	e3a01014 	mov	r1, #20
    94b8:	ebfffe6d 	bl	8e74 <operator delete(void*, unsigned int)>
    94bc:	e594301c 	ldr	r3, [r4, #28]
    94c0:	e3530000 	cmp	r3, #0
    94c4:	08bd8070 	popeq	{r4, r5, r6, pc}
    94c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    94cc:	eafffe78 	b	8eb4 <LeaveCritical>
    94d0:	ebfffe69 	bl	8e7c <EnterCritical>
    94d4:	eaffffeb 	b	9488 <CTimer::CancelKernelTimer(unsigned int)+0x18>

000094d8 <CTimer::PollKernelTimers()>:
    94d8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    94dc:	e1a06000 	mov	r6, r0
    94e0:	e590001c 	ldr	r0, [r0, #28]
    94e4:	e3500000 	cmp	r0, #0
    94e8:	1a000031 	bne	95b4 <CTimer::PollKernelTimers()+0xdc>
    94ec:	e2867018 	add	r7, r6, #24
    94f0:	e1a00007 	mov	r0, r7
    94f4:	eb000f9d 	bl	d370 <CPtrList::GetFirst()>
    94f8:	e2505000 	subs	r5, r0, #0
    94fc:	13a09000 	movne	r9, #0
    9500:	1a00000e 	bne	9540 <CTimer::PollKernelTimers()+0x68>
    9504:	ea000025 	b	95a0 <CTimer::PollKernelTimers()+0xc8>
    9508:	e5943004 	ldr	r3, [r4, #4]
    950c:	e1a00004 	mov	r0, r4
    9510:	e5942010 	ldr	r2, [r4, #16]
    9514:	e594100c 	ldr	r1, [r4, #12]
    9518:	e12fff33 	blx	r3
    951c:	e1a00004 	mov	r0, r4
    9520:	e5849000 	str	r9, [r4]
    9524:	e3a01014 	mov	r1, #20
    9528:	ebfffe51 	bl	8e74 <operator delete(void*, unsigned int)>
    952c:	e596001c 	ldr	r0, [r6, #28]
    9530:	e3500000 	cmp	r0, #0
    9534:	1a000016 	bne	9594 <CTimer::PollKernelTimers()+0xbc>
    9538:	e2585000 	subs	r5, r8, #0
    953c:	0a000017 	beq	95a0 <CTimer::PollKernelTimers()+0xc8>
    9540:	e1a01005 	mov	r1, r5
    9544:	e1a00007 	mov	r0, r7
    9548:	eb000f8c 	bl	d380 <CPtrList::GetPtr(TPtrListElement*)>
    954c:	e5962004 	ldr	r2, [r6, #4]
    9550:	e1a01005 	mov	r1, r5
    9554:	e1a04000 	mov	r4, r0
    9558:	e1a00007 	mov	r0, r7
    955c:	e5943008 	ldr	r3, [r4, #8]
    9560:	e0433002 	sub	r3, r3, r2
    9564:	e3530000 	cmp	r3, #0
    9568:	ca00000c 	bgt	95a0 <CTimer::PollKernelTimers()+0xc8>
    956c:	eb000f81 	bl	d378 <CPtrList::GetNext(TPtrListElement*)>
    9570:	e1a01005 	mov	r1, r5
    9574:	e1a08000 	mov	r8, r0
    9578:	e1a00007 	mov	r0, r7
    957c:	eb000fb2 	bl	d44c <CPtrList::Remove(TPtrListElement*)>
    9580:	e596301c 	ldr	r3, [r6, #28]
    9584:	e3530000 	cmp	r3, #0
    9588:	0affffde 	beq	9508 <CTimer::PollKernelTimers()+0x30>
    958c:	ebfffe48 	bl	8eb4 <LeaveCritical>
    9590:	eaffffdc 	b	9508 <CTimer::PollKernelTimers()+0x30>
    9594:	ebfffe38 	bl	8e7c <EnterCritical>
    9598:	e2585000 	subs	r5, r8, #0
    959c:	1affffe7 	bne	9540 <CTimer::PollKernelTimers()+0x68>
    95a0:	e596301c 	ldr	r3, [r6, #28]
    95a4:	e3530000 	cmp	r3, #0
    95a8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    95ac:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    95b0:	eafffe3f 	b	8eb4 <LeaveCritical>
    95b4:	ebfffe30 	bl	8e7c <EnterCritical>
    95b8:	eaffffcb 	b	94ec <CTimer::PollKernelTimers()+0x14>

000095bc <CTimer::InterruptHandler()>:
    95bc:	e3a03a03 	mov	r3, #12288	; 0x3000
    95c0:	e3433f00 	movt	r3, #16128	; 0x3f00
    95c4:	e92d4010 	push	{r4, lr}
    95c8:	e3021710 	movw	r1, #10000	; 0x2710
    95cc:	e5932018 	ldr	r2, [r3, #24]
    95d0:	e1a04000 	mov	r4, r0
    95d4:	e0822001 	add	r2, r2, r1
    95d8:	e5832018 	str	r2, [r3, #24]
    95dc:	e5930004 	ldr	r0, [r3, #4]
    95e0:	e1520000 	cmp	r2, r0
    95e4:	35932004 	ldrcc	r2, [r3, #4]
    95e8:	30821001 	addcc	r1, r2, r1
    95ec:	35831018 	strcc	r1, [r3, #24]
    95f0:	e3a03a03 	mov	r3, #12288	; 0x3000
    95f4:	e3433f00 	movt	r3, #16128	; 0x3f00
    95f8:	e3a02008 	mov	r2, #8
    95fc:	e5832000 	str	r2, [r3]
    9600:	e5940010 	ldr	r0, [r4, #16]
    9604:	e3500000 	cmp	r0, #0
    9608:	1a000016 	bne	9668 <CTimer::InterruptHandler()+0xac>
    960c:	e5943004 	ldr	r3, [r4, #4]
    9610:	e308051f 	movw	r0, #34079	; 0x851f
    9614:	e34501eb 	movt	r0, #20971	; 0x51eb
    9618:	e3a0c064 	mov	ip, #100	; 0x64
    961c:	e2833001 	add	r3, r3, #1
    9620:	e5843004 	str	r3, [r4, #4]
    9624:	e0810093 	umull	r0, r1, r3, r0
    9628:	e1a022a1 	lsr	r2, r1, #5
    962c:	e062329c 	mls	r2, ip, r2, r3
    9630:	e3520000 	cmp	r2, #0
    9634:	1a000008 	bne	965c <CTimer::InterruptHandler()+0xa0>
    9638:	e5943008 	ldr	r3, [r4, #8]
    963c:	e2833001 	add	r3, r3, #1
    9640:	e5843008 	str	r3, [r4, #8]
    9644:	e594300c 	ldr	r3, [r4, #12]
    9648:	e2833001 	add	r3, r3, #1
    964c:	e584300c 	str	r3, [r4, #12]
    9650:	e3520000 	cmp	r2, #0
    9654:	0a000000 	beq	965c <CTimer::InterruptHandler()+0xa0>
    9658:	ebfffe15 	bl	8eb4 <LeaveCritical>
    965c:	e1a00004 	mov	r0, r4
    9660:	e8bd4010 	pop	{r4, lr}
    9664:	eaffff9b 	b	94d8 <CTimer::PollKernelTimers()>
    9668:	ebfffe03 	bl	8e7c <EnterCritical>
    966c:	e5943004 	ldr	r3, [r4, #4]
    9670:	e308051f 	movw	r0, #34079	; 0x851f
    9674:	e34501eb 	movt	r0, #20971	; 0x51eb
    9678:	e2833001 	add	r3, r3, #1
    967c:	e3a0c064 	mov	ip, #100	; 0x64
    9680:	e5843004 	str	r3, [r4, #4]
    9684:	e0810093 	umull	r0, r1, r3, r0
    9688:	e5942010 	ldr	r2, [r4, #16]
    968c:	e1a012a1 	lsr	r1, r1, #5
    9690:	e063319c 	mls	r3, ip, r1, r3
    9694:	e3530000 	cmp	r3, #0
    9698:	1affffec 	bne	9650 <CTimer::InterruptHandler()+0x94>
    969c:	eaffffe5 	b	9638 <CTimer::InterruptHandler()+0x7c>

000096a0 <CTimer::InterruptHandler(void*)>:
    96a0:	eaffffc5 	b	95bc <CTimer::InterruptHandler()>

000096a4 <CTimer::TuneMsDelay()>:
    96a4:	e92d4070 	push	{r4, r5, r6, lr}
    96a8:	e1a04000 	mov	r4, r0
    96ac:	e5943020 	ldr	r3, [r4, #32]
    96b0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    96b4:	e24dd008 	sub	sp, sp, #8
    96b8:	e5946004 	ldr	r6, [r4, #4]
    96bc:	e308551f 	movw	r5, #34079	; 0x851f
    96c0:	e34551eb 	movt	r5, #20971	; 0x51eb
    96c4:	e0000390 	mul	r0, r0, r3
    96c8:	eb000c1a 	bl	c738 <DelayLoop>
    96cc:	e5941004 	ldr	r1, [r4, #4]
    96d0:	e3020710 	movw	r0, #10000	; 0x2710
    96d4:	e0411006 	sub	r1, r1, r6
    96d8:	ebfffd68 	bl	8c80 <__aeabi_uidiv>
    96dc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    96e0:	e3413062 	movt	r3, #4194	; 0x1062
    96e4:	e1a06000 	mov	r6, r0
    96e8:	e5940020 	ldr	r0, [r4, #32]
    96ec:	e0000690 	mul	r0, r0, r6
    96f0:	e0810590 	umull	r0, r1, r0, r5
    96f4:	e1a022a1 	lsr	r2, r1, #5
    96f8:	e5842020 	str	r2, [r4, #32]
    96fc:	e2822f7d 	add	r2, r2, #500	; 0x1f4
    9700:	e0832392 	umull	r2, r3, r2, r3
    9704:	e1a03323 	lsr	r3, r3, #6
    9708:	e5843024 	str	r3, [r4, #36]	; 0x24
    970c:	e0854596 	umull	r4, r5, r6, r5
    9710:	eb000770 	bl	b4d8 <CLogger::Get()>
    9714:	e3a0e064 	mov	lr, #100	; 0x64
    9718:	e3a02003 	mov	r2, #3
    971c:	e59f1020 	ldr	r1, [pc, #32]	; 9744 <CTimer::TuneMsDelay()+0xa0>
    9720:	e30e377c 	movw	r3, #59260	; 0xe77c
    9724:	e3403000 	movt	r3, #0
    9728:	e1a0c2a5 	lsr	ip, r5, #5
    972c:	e58dc000 	str	ip, [sp]
    9730:	e0666c9e 	mls	r6, lr, ip, r6
    9734:	e58d6004 	str	r6, [sp, #4]
    9738:	eb000842 	bl	b848 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    973c:	e28dd008 	add	sp, sp, #8
    9740:	e8bd8070 	pop	{r4, r5, r6, pc}
    9744:	0000e744 	.word	0x0000e744

00009748 <CTimer::Initialize()>:
    9748:	e92d4010 	push	{r4, lr}
    974c:	e1a03000 	mov	r3, r0
    9750:	e1a04000 	mov	r4, r0
    9754:	e3a01003 	mov	r1, #3
    9758:	e5900000 	ldr	r0, [r0]
    975c:	e30926a0 	movw	r2, #38560	; 0x96a0
    9760:	e3402000 	movt	r2, #0
    9764:	eb000c22 	bl	c7f4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    9768:	e3a02a03 	mov	r2, #12288	; 0x3000
    976c:	e3432f00 	movt	r2, #16128	; 0x3f00
    9770:	e3a03df2 	mov	r3, #15488	; 0x3c80
    9774:	e34f3e36 	movt	r3, #65078	; 0xfe36
    9778:	e1a00004 	mov	r0, r4
    977c:	e5823004 	str	r3, [r2, #4]
    9780:	e5923004 	ldr	r3, [r2, #4]
    9784:	e2833c27 	add	r3, r3, #9984	; 0x2700
    9788:	e2833010 	add	r3, r3, #16
    978c:	e5823018 	str	r3, [r2, #24]
    9790:	ebffffc3 	bl	96a4 <CTimer::TuneMsDelay()>
    9794:	e3a00001 	mov	r0, #1
    9798:	e8bd8010 	pop	{r4, pc}

0000979c <CTimer::SimpleMsDelay(unsigned int)>:
    979c:	e2503000 	subs	r3, r0, #0
    97a0:	012fff1e 	bxeq	lr
    97a4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    97a8:	e0000390 	mul	r0, r0, r3
    97ac:	e3500000 	cmp	r0, #0
    97b0:	012fff1e 	bxeq	lr
    97b4:	e3a02a03 	mov	r2, #12288	; 0x3000
    97b8:	e3432f00 	movt	r2, #16128	; 0x3f00
    97bc:	e2800001 	add	r0, r0, #1
    97c0:	e5921004 	ldr	r1, [r2, #4]
    97c4:	e5923004 	ldr	r3, [r2, #4]
    97c8:	e0433001 	sub	r3, r3, r1
    97cc:	e1500003 	cmp	r0, r3
    97d0:	8afffffb 	bhi	97c4 <CTimer::SimpleMsDelay(unsigned int)+0x28>
    97d4:	e12fff1e 	bx	lr

000097d8 <CTimer::SimpleusDelay(unsigned int)>:
    97d8:	e3500000 	cmp	r0, #0
    97dc:	012fff1e 	bxeq	lr
    97e0:	e3a02a03 	mov	r2, #12288	; 0x3000
    97e4:	e3432f00 	movt	r2, #16128	; 0x3f00
    97e8:	e2800001 	add	r0, r0, #1
    97ec:	e5921004 	ldr	r1, [r2, #4]
    97f0:	e5923004 	ldr	r3, [r2, #4]
    97f4:	e0433001 	sub	r3, r3, r1
    97f8:	e1500003 	cmp	r0, r3
    97fc:	8afffffb 	bhi	97f0 <CTimer::SimpleusDelay(unsigned int)+0x18>
    9800:	e12fff1e 	bx	lr

00009804 <CTimer::IsLeapYear(unsigned int)>:
    9804:	e308251f 	movw	r2, #34079	; 0x851f
    9808:	e34521eb 	movt	r2, #20971	; 0x51eb
    980c:	e3a0c064 	mov	ip, #100	; 0x64
    9810:	e0832290 	umull	r2, r3, r0, r2
    9814:	e1a012a3 	lsr	r1, r3, #5
    9818:	e061019c 	mls	r1, ip, r1, r0
    981c:	e3510000 	cmp	r1, #0
    9820:	0a000003 	beq	9834 <CTimer::IsLeapYear(unsigned int)+0x30>
    9824:	e3100003 	tst	r0, #3
    9828:	03a00001 	moveq	r0, #1
    982c:	13a00000 	movne	r0, #0
    9830:	e12fff1e 	bx	lr
    9834:	e1a033a3 	lsr	r3, r3, #7
    9838:	e3a02e19 	mov	r2, #400	; 0x190
    983c:	e0600392 	mls	r0, r2, r3, r0
    9840:	e16f0f10 	clz	r0, r0
    9844:	e1a002a0 	lsr	r0, r0, #5
    9848:	e12fff1e 	bx	lr

0000984c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    984c:	e3500001 	cmp	r0, #1
    9850:	0a000003 	beq	9864 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    9854:	e30e3714 	movw	r3, #59156	; 0xe714
    9858:	e3403000 	movt	r3, #0
    985c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    9860:	e12fff1e 	bx	lr
    9864:	e308251f 	movw	r2, #34079	; 0x851f
    9868:	e34521eb 	movt	r2, #20971	; 0x51eb
    986c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9870:	e3a0e064 	mov	lr, #100	; 0x64
    9874:	e0832291 	umull	r2, r3, r1, r2
    9878:	e1a0c2a3 	lsr	ip, r3, #5
    987c:	e06c1c9e 	mls	ip, lr, ip, r1
    9880:	e35c0000 	cmp	ip, #0
    9884:	0a000008 	beq	98ac <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    9888:	e3110003 	tst	r1, #3
    988c:	03a01001 	moveq	r1, #1
    9890:	13a01000 	movne	r1, #0
    9894:	e3510000 	cmp	r1, #0
    9898:	030e3714 	movweq	r3, #59156	; 0xe714
    989c:	03403000 	movteq	r3, #0
    98a0:	13a0001d 	movne	r0, #29
    98a4:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    98a8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    98ac:	e1a033a3 	lsr	r3, r3, #7
    98b0:	e3a02e19 	mov	r2, #400	; 0x190
    98b4:	e0611392 	mls	r1, r2, r3, r1
    98b8:	e16f1f11 	clz	r1, r1
    98bc:	e1a012a1 	lsr	r1, r1, #5
    98c0:	eafffff3 	b	9894 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

000098c4 <CTimer::Get()>:
    98c4:	e30f3c34 	movw	r3, #64564	; 0xfc34
    98c8:	e3403000 	movt	r3, #0
    98cc:	e5930000 	ldr	r0, [r3]
    98d0:	e12fff1e 	bx	lr

000098d4 <memcpy>:
    98d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    98d8:	e352007f 	cmp	r2, #127	; 0x7f
    98dc:	9a00000b 	bls	9910 <memcpy+0x3c>
    98e0:	e3110003 	tst	r1, #3
    98e4:	1a000009 	bne	9910 <memcpy+0x3c>
    98e8:	e3100003 	tst	r0, #3
    98ec:	1a000007 	bne	9910 <memcpy+0x3c>
    98f0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    98f4:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    98f8:	e2422020 	sub	r2, r2, #32
    98fc:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    9900:	f5d1f040 	pld	[r1, #64]	; 0x40
    9904:	e352001f 	cmp	r2, #31
    9908:	8afffff9 	bhi	98f4 <memcpy+0x20>
    990c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    9910:	e3520000 	cmp	r2, #0
    9914:	0a000003 	beq	9928 <memcpy+0x54>
    9918:	e4d13001 	ldrb	r3, [r1], #1
    991c:	e2522001 	subs	r2, r2, #1
    9920:	e4c03001 	strb	r3, [r0], #1
    9924:	1afffffb 	bne	9918 <memcpy+0x44>
    9928:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    992c:	e12fff1e 	bx	lr

00009930 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    9930:	e1a01000 	mov	r1, r0
    9934:	e3a0c00a 	mov	ip, #10
    9938:	e3a00000 	mov	r0, #0
    993c:	ea000007 	b	9960 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x30>
    9940:	e3720001 	cmn	r2, #1
    9944:	13a03000 	movne	r3, #0
    9948:	03a03001 	moveq	r3, #1
    994c:	e1500002 	cmp	r0, r2
    9950:	83833001 	orrhi	r3, r3, #1
    9954:	e1a00002 	mov	r0, r2
    9958:	e3530000 	cmp	r3, #0
    995c:	1a000007 	bne	9980 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x50>
    9960:	e0d120d1 	ldrsb	r2, [r1], #1
    9964:	e2423030 	sub	r3, r2, #48	; 0x30
    9968:	e3520000 	cmp	r2, #0
    996c:	e022309c 	mla	r2, ip, r0, r3
    9970:	e6ef3073 	uxtb	r3, r3
    9974:	012fff1e 	bxeq	lr
    9978:	e3530009 	cmp	r3, #9
    997c:	9affffef 	bls	9940 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x10>
    9980:	e3e00000 	mvn	r0, #0
    9984:	e12fff1e 	bx	lr

00009988 <CKernelOptions::~CKernelOptions()>:
    9988:	e30f3c38 	movw	r3, #64568	; 0xfc38
    998c:	e3403000 	movt	r3, #0
    9990:	e3a02000 	mov	r2, #0
    9994:	e5832000 	str	r2, [r3]
    9998:	e12fff1e 	bx	lr

0000999c <CKernelOptions::GetWidth() const>:
    999c:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    99a0:	e12fff1e 	bx	lr

000099a4 <CKernelOptions::GetHeight() const>:
    99a4:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    99a8:	e12fff1e 	bx	lr

000099ac <CKernelOptions::GetLogDevice() const>:
    99ac:	e2800e81 	add	r0, r0, #2064	; 0x810
    99b0:	e2800008 	add	r0, r0, #8
    99b4:	e12fff1e 	bx	lr

000099b8 <CKernelOptions::GetLogLevel() const>:
    99b8:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    99bc:	e12fff1e 	bx	lr

000099c0 <CKernelOptions::GetKeyMap() const>:
    99c0:	e2800e83 	add	r0, r0, #2096	; 0x830
    99c4:	e12fff1e 	bx	lr

000099c8 <CKernelOptions::GetUSBPowerDelay() const>:
    99c8:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    99cc:	e12fff1e 	bx	lr

000099d0 <CKernelOptions::GetCPUSpeed() const>:
    99d0:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    99d4:	e12fff1e 	bx	lr

000099d8 <CKernelOptions::GetSoCMaxTemp() const>:
    99d8:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    99dc:	e12fff1e 	bx	lr

000099e0 <CKernelOptions::Get()>:
    99e0:	e30f3c38 	movw	r3, #64568	; 0xfc38
    99e4:	e3403000 	movt	r3, #0
    99e8:	e5930000 	ldr	r0, [r3]
    99ec:	e12fff1e 	bx	lr

000099f0 <CKernelOptions::GetToken()>:
    99f0:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    99f4:	e1d320d0 	ldrsb	r2, [r3]
    99f8:	e3520000 	cmp	r2, #0
    99fc:	1a000005 	bne	9a18 <CKernelOptions::GetToken()+0x28>
    9a00:	ea000016 	b	9a60 <CKernelOptions::GetToken()+0x70>
    9a04:	e2833001 	add	r3, r3, #1
    9a08:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    9a0c:	e1d320d0 	ldrsb	r2, [r3]
    9a10:	e3520000 	cmp	r2, #0
    9a14:	0a000011 	beq	9a60 <CKernelOptions::GetToken()+0x70>
    9a18:	e3520020 	cmp	r2, #32
    9a1c:	0afffff8 	beq	9a04 <CKernelOptions::GetToken()+0x14>
    9a20:	e1a02003 	mov	r2, r3
    9a24:	ea000000 	b	9a2c <CKernelOptions::GetToken()+0x3c>
    9a28:	e1a02001 	mov	r2, r1
    9a2c:	e2821001 	add	r1, r2, #1
    9a30:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    9a34:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    9a38:	e35c0000 	cmp	ip, #0
    9a3c:	0a000008 	beq	9a64 <CKernelOptions::GetToken()+0x74>
    9a40:	e35c0020 	cmp	ip, #32
    9a44:	1afffff7 	bne	9a28 <CKernelOptions::GetToken()+0x38>
    9a48:	e2822002 	add	r2, r2, #2
    9a4c:	e3a0c000 	mov	ip, #0
    9a50:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    9a54:	e1a00003 	mov	r0, r3
    9a58:	e5c1c000 	strb	ip, [r1]
    9a5c:	e12fff1e 	bx	lr
    9a60:	e3a03000 	mov	r3, #0
    9a64:	e1a00003 	mov	r0, r3
    9a68:	e12fff1e 	bx	lr

00009a6c <CKernelOptions::CKernelOptions()>:
    9a6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a70:	e2807e81 	add	r7, r0, #2064	; 0x810
    9a74:	e2877008 	add	r7, r7, #8
    9a78:	e1a05000 	mov	r5, r0
    9a7c:	e2809e83 	add	r9, r0, #2096	; 0x830
    9a80:	e24dd01c 	sub	sp, sp, #28
    9a84:	e3a04000 	mov	r4, #0
    9a88:	e3a02004 	mov	r2, #4
    9a8c:	e3a0303c 	mov	r3, #60	; 0x3c
    9a90:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    9a94:	e30e17c4 	movw	r1, #59332	; 0xe7c4
    9a98:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    9a9c:	e3401000 	movt	r1, #0
    9aa0:	e1a00007 	mov	r0, r7
    9aa4:	e5854810 	str	r4, [r5, #2064]	; 0x810
    9aa8:	e5854814 	str	r4, [r5, #2068]	; 0x814
    9aac:	e5854834 	str	r4, [r5, #2100]	; 0x834
    9ab0:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    9ab4:	eb001024 	bl	db4c <strcpy>
    9ab8:	e1a00009 	mov	r0, r9
    9abc:	e30e17cc 	movw	r1, #59340	; 0xe7cc
    9ac0:	e3401000 	movt	r1, #0
    9ac4:	eb001020 	bl	db4c <strcpy>
    9ac8:	e30f3c38 	movw	r3, #64568	; 0xfc38
    9acc:	e3403000 	movt	r3, #0
    9ad0:	e28d0010 	add	r0, sp, #16
    9ad4:	e5835000 	str	r5, [r3]
    9ad8:	ebfffa94 	bl	8530 <CBcmPropertyTags::CBcmPropertyTags()>
    9adc:	e58d4000 	str	r4, [sp]
    9ae0:	e1a02005 	mov	r2, r5
    9ae4:	e28d0010 	add	r0, sp, #16
    9ae8:	e3a01001 	mov	r1, #1
    9aec:	e300380c 	movw	r3, #2060	; 0x80c
    9af0:	e3401005 	movt	r1, #5
    9af4:	ebfffab9 	bl	85e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9af8:	e1500004 	cmp	r0, r4
    9afc:	0a000040 	beq	9c04 <CKernelOptions::CKernelOptions()+0x198>
    9b00:	e5953008 	ldr	r3, [r5, #8]
    9b04:	e3530b02 	cmp	r3, #2048	; 0x800
    9b08:	2a00003d 	bcs	9c04 <CKernelOptions::CKernelOptions()+0x198>
    9b0c:	e0853003 	add	r3, r5, r3
    9b10:	e30e6820 	movw	r6, #59424	; 0xe820
    9b14:	e30e87d0 	movw	r8, #59344	; 0xe7d0
    9b18:	e30ea7d8 	movw	sl, #59352	; 0xe7d8
    9b1c:	e3406000 	movt	r6, #0
    9b20:	e3408000 	movt	r8, #0
    9b24:	e340a000 	movt	sl, #0
    9b28:	e5c3400c 	strb	r4, [r3, #12]
    9b2c:	e285300c 	add	r3, r5, #12
    9b30:	e585380c 	str	r3, [r5, #2060]	; 0x80c
    9b34:	e1a00005 	mov	r0, r5
    9b38:	ebffffac 	bl	99f0 <CKernelOptions::GetToken()>
    9b3c:	e250b000 	subs	fp, r0, #0
    9b40:	0a00002f 	beq	9c04 <CKernelOptions::CKernelOptions()+0x198>
    9b44:	e1db30d0 	ldrsb	r3, [fp]
    9b48:	e3530000 	cmp	r3, #0
    9b4c:	0a000008 	beq	9b74 <CKernelOptions::CKernelOptions()+0x108>
    9b50:	e353003d 	cmp	r3, #61	; 0x3d
    9b54:	e1a0400b 	mov	r4, fp
    9b58:	1a000002 	bne	9b68 <CKernelOptions::CKernelOptions()+0xfc>
    9b5c:	ea00002d 	b	9c18 <CKernelOptions::CKernelOptions()+0x1ac>
    9b60:	e353003d 	cmp	r3, #61	; 0x3d
    9b64:	0a00002b 	beq	9c18 <CKernelOptions::CKernelOptions()+0x1ac>
    9b68:	e1f430d1 	ldrsb	r3, [r4, #1]!
    9b6c:	e3530000 	cmp	r3, #0
    9b70:	1afffffa 	bne	9b60 <CKernelOptions::CKernelOptions()+0xf4>
    9b74:	e1a01006 	mov	r1, r6
    9b78:	e1a0000b 	mov	r0, fp
    9b7c:	eb000fd7 	bl	dae0 <strcmp>
    9b80:	e3500000 	cmp	r0, #0
    9b84:	0affffea 	beq	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9b88:	e1a01008 	mov	r1, r8
    9b8c:	e1a0000b 	mov	r0, fp
    9b90:	eb000fd2 	bl	dae0 <strcmp>
    9b94:	e3500000 	cmp	r0, #0
    9b98:	13a03000 	movne	r3, #0
    9b9c:	0affffe4 	beq	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9ba0:	e1a0100a 	mov	r1, sl
    9ba4:	e1a0000b 	mov	r0, fp
    9ba8:	e58d300c 	str	r3, [sp, #12]
    9bac:	eb000fcb 	bl	dae0 <strcmp>
    9bb0:	e59d300c 	ldr	r3, [sp, #12]
    9bb4:	e2504000 	subs	r4, r0, #0
    9bb8:	0a00002a 	beq	9c68 <CKernelOptions::CKernelOptions()+0x1fc>
    9bbc:	e30e17e0 	movw	r1, #59360	; 0xe7e0
    9bc0:	e1a0000b 	mov	r0, fp
    9bc4:	e3401000 	movt	r1, #0
    9bc8:	e58d300c 	str	r3, [sp, #12]
    9bcc:	eb000fc3 	bl	dae0 <strcmp>
    9bd0:	e59d300c 	ldr	r3, [sp, #12]
    9bd4:	e3500000 	cmp	r0, #0
    9bd8:	1a000028 	bne	9c80 <CKernelOptions::CKernelOptions()+0x214>
    9bdc:	e3530000 	cmp	r3, #0
    9be0:	0affffd3 	beq	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9be4:	e1d320d0 	ldrsb	r2, [r3]
    9be8:	e3520000 	cmp	r2, #0
    9bec:	0affffd0 	beq	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9bf0:	e1a00003 	mov	r0, r3
    9bf4:	ebffff4d 	bl	9930 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9bf8:	e3500004 	cmp	r0, #4
    9bfc:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    9c00:	eaffffcb 	b	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9c04:	e28d0010 	add	r0, sp, #16
    9c08:	ebfffa4e 	bl	8548 <CBcmPropertyTags::~CBcmPropertyTags()>
    9c0c:	e1a00005 	mov	r0, r5
    9c10:	e28dd01c 	add	sp, sp, #28
    9c14:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c18:	e3a03000 	mov	r3, #0
    9c1c:	e1a01006 	mov	r1, r6
    9c20:	e5c43000 	strb	r3, [r4]
    9c24:	e1a0000b 	mov	r0, fp
    9c28:	eb000fac 	bl	dae0 <strcmp>
    9c2c:	e2843001 	add	r3, r4, #1
    9c30:	e3500000 	cmp	r0, #0
    9c34:	1a000058 	bne	9d9c <CKernelOptions::CKernelOptions()+0x330>
    9c38:	e3530000 	cmp	r3, #0
    9c3c:	0affffbc 	beq	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9c40:	e1d420d1 	ldrsb	r2, [r4, #1]
    9c44:	e3520000 	cmp	r2, #0
    9c48:	0affffb9 	beq	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9c4c:	e1a00003 	mov	r0, r3
    9c50:	ebffff36 	bl	9930 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9c54:	e300353c 	movw	r3, #1340	; 0x53c
    9c58:	e2402d0a 	sub	r2, r0, #640	; 0x280
    9c5c:	e1520003 	cmp	r2, r3
    9c60:	95850810 	strls	r0, [r5, #2064]	; 0x810
    9c64:	eaffffb2 	b	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9c68:	e1a01003 	mov	r1, r3
    9c6c:	e3a02013 	mov	r2, #19
    9c70:	e1a00007 	mov	r0, r7
    9c74:	eb000fbf 	bl	db78 <strncpy>
    9c78:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    9c7c:	eaffffac 	b	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9c80:	e30e17ec 	movw	r1, #59372	; 0xe7ec
    9c84:	e1a0000b 	mov	r0, fp
    9c88:	e3401000 	movt	r1, #0
    9c8c:	e58d300c 	str	r3, [sp, #12]
    9c90:	eb000f92 	bl	dae0 <strcmp>
    9c94:	e59d300c 	ldr	r3, [sp, #12]
    9c98:	e2504000 	subs	r4, r0, #0
    9c9c:	1a000005 	bne	9cb8 <CKernelOptions::CKernelOptions()+0x24c>
    9ca0:	e1a01003 	mov	r1, r3
    9ca4:	e3a02002 	mov	r2, #2
    9ca8:	e1a00009 	mov	r0, r9
    9cac:	eb000fb1 	bl	db78 <strncpy>
    9cb0:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    9cb4:	eaffff9e 	b	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9cb8:	e30e17f4 	movw	r1, #59380	; 0xe7f4
    9cbc:	e1a0000b 	mov	r0, fp
    9cc0:	e3401000 	movt	r1, #0
    9cc4:	e58d300c 	str	r3, [sp, #12]
    9cc8:	eb000f84 	bl	dae0 <strcmp>
    9ccc:	e59d300c 	ldr	r3, [sp, #12]
    9cd0:	e3500000 	cmp	r0, #0
    9cd4:	1a00000b 	bne	9d08 <CKernelOptions::CKernelOptions()+0x29c>
    9cd8:	e3530000 	cmp	r3, #0
    9cdc:	0affff94 	beq	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9ce0:	e1d320d0 	ldrsb	r2, [r3]
    9ce4:	e3520000 	cmp	r2, #0
    9ce8:	0affff91 	beq	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9cec:	e1a00003 	mov	r0, r3
    9cf0:	ebffff0e 	bl	9930 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9cf4:	e3013e78 	movw	r3, #7800	; 0x1e78
    9cf8:	e24020c8 	sub	r2, r0, #200	; 0xc8
    9cfc:	e1520003 	cmp	r2, r3
    9d00:	95850834 	strls	r0, [r5, #2100]	; 0x834
    9d04:	eaffff8a 	b	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9d08:	e30e1804 	movw	r1, #59396	; 0xe804
    9d0c:	e1a0000b 	mov	r0, fp
    9d10:	e3401000 	movt	r1, #0
    9d14:	e58d300c 	str	r3, [sp, #12]
    9d18:	eb000f70 	bl	dae0 <strcmp>
    9d1c:	e59d300c 	ldr	r3, [sp, #12]
    9d20:	e3500000 	cmp	r0, #0
    9d24:	1a000007 	bne	9d48 <CKernelOptions::CKernelOptions()+0x2dc>
    9d28:	e1a00003 	mov	r0, r3
    9d2c:	e30e180c 	movw	r1, #59404	; 0xe80c
    9d30:	e3401000 	movt	r1, #0
    9d34:	eb000f69 	bl	dae0 <strcmp>
    9d38:	e3500000 	cmp	r0, #0
    9d3c:	03a03001 	moveq	r3, #1
    9d40:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    9d44:	eaffff7a 	b	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9d48:	e1a0000b 	mov	r0, fp
    9d4c:	e30e1814 	movw	r1, #59412	; 0xe814
    9d50:	e3401000 	movt	r1, #0
    9d54:	e58d300c 	str	r3, [sp, #12]
    9d58:	eb000f60 	bl	dae0 <strcmp>
    9d5c:	e59d300c 	ldr	r3, [sp, #12]
    9d60:	e2902000 	adds	r2, r0, #0
    9d64:	13a02001 	movne	r2, #1
    9d68:	e3530000 	cmp	r3, #0
    9d6c:	03822001 	orreq	r2, r2, #1
    9d70:	e3520000 	cmp	r2, #0
    9d74:	1affff6e 	bne	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9d78:	e1d320d0 	ldrsb	r2, [r3]
    9d7c:	e3520000 	cmp	r2, #0
    9d80:	0affff6b 	beq	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9d84:	e1a00003 	mov	r0, r3
    9d88:	ebfffee8 	bl	9930 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9d8c:	e2403028 	sub	r3, r0, #40	; 0x28
    9d90:	e3530026 	cmp	r3, #38	; 0x26
    9d94:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    9d98:	eaffff65 	b	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9d9c:	e1a01008 	mov	r1, r8
    9da0:	e1a0000b 	mov	r0, fp
    9da4:	e58d300c 	str	r3, [sp, #12]
    9da8:	eb000f4c 	bl	dae0 <strcmp>
    9dac:	e59d300c 	ldr	r3, [sp, #12]
    9db0:	e3500000 	cmp	r0, #0
    9db4:	1affff79 	bne	9ba0 <CKernelOptions::CKernelOptions()+0x134>
    9db8:	e3530000 	cmp	r3, #0
    9dbc:	0affff5c 	beq	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9dc0:	e1d420d1 	ldrsb	r2, [r4, #1]
    9dc4:	e3520000 	cmp	r2, #0
    9dc8:	0affff59 	beq	9b34 <CKernelOptions::CKernelOptions()+0xc8>
    9dcc:	e1a00003 	mov	r0, r3
    9dd0:	ebfffed6 	bl	9930 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9dd4:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    9dd8:	e3530f96 	cmp	r3, #600	; 0x258
    9ddc:	95850814 	strls	r0, [r5, #2068]	; 0x814
    9de0:	eaffff53 	b	9b34 <CKernelOptions::CKernelOptions()+0xc8>

00009de4 <CKernelOptions::GetOptionValue(char*)>:
    9de4:	e1d030d0 	ldrsb	r3, [r0]
    9de8:	e3530000 	cmp	r3, #0
    9dec:	1a000003 	bne	9e00 <CKernelOptions::GetOptionValue(char*)+0x1c>
    9df0:	ea000007 	b	9e14 <CKernelOptions::GetOptionValue(char*)+0x30>
    9df4:	e1f030d1 	ldrsb	r3, [r0, #1]!
    9df8:	e3530000 	cmp	r3, #0
    9dfc:	0a000004 	beq	9e14 <CKernelOptions::GetOptionValue(char*)+0x30>
    9e00:	e353003d 	cmp	r3, #61	; 0x3d
    9e04:	1afffffa 	bne	9df4 <CKernelOptions::GetOptionValue(char*)+0x10>
    9e08:	e2803001 	add	r3, r0, #1
    9e0c:	e3a02000 	mov	r2, #0
    9e10:	e5c02000 	strb	r2, [r0]
    9e14:	e1a00003 	mov	r0, r3
    9e18:	e12fff1e 	bx	lr

00009e1c <CKernelOptions::GetDecimal(char*)>:
    9e1c:	e2503000 	subs	r3, r0, #0
    9e20:	0a000002 	beq	9e30 <CKernelOptions::GetDecimal(char*)+0x14>
    9e24:	e1d330d0 	ldrsb	r3, [r3]
    9e28:	e3530000 	cmp	r3, #0
    9e2c:	1a000001 	bne	9e38 <CKernelOptions::GetDecimal(char*)+0x1c>
    9e30:	e3e00000 	mvn	r0, #0
    9e34:	e12fff1e 	bx	lr
    9e38:	eafffebc 	b	9930 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

00009e3c <CPageTable::CPageTable()>:
    9e3c:	e3a01000 	mov	r1, #0
    9e40:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
    9e44:	e92d4010 	push	{r4, lr}
    9e48:	e1a0c001 	mov	ip, r1
    9e4c:	e1a04000 	mov	r4, r0
    9e50:	e1a03002 	mov	r3, r2
    9e54:	e3a0e002 	mov	lr, #2
    9e58:	e3a00001 	mov	r0, #1
    9e5c:	e8840006 	stm	r4, {r1, r2}
    9e60:	e5d32000 	ldrb	r2, [r3]
    9e64:	e35c0b01 	cmp	ip, #1024	; 0x400
    9e68:	e5d31002 	ldrb	r1, [r3, #2]
    9e6c:	e2833004 	add	r3, r3, #4
    9e70:	e7c1201e 	bfi	r2, lr, #0, #2
    9e74:	e3811001 	orr	r1, r1, #1
    9e78:	e6ef2072 	uxtb	r2, r2
    9e7c:	e20110f9 	and	r1, r1, #249	; 0xf9
    9e80:	e3822004 	orr	r2, r2, #4
    9e84:	e7c3119f 	bfc	r1, #3, #1
    9e88:	e20220f7 	and	r2, r2, #247	; 0xf7
    9e8c:	e5431002 	strb	r1, [r3, #-2]
    9e90:	e7c4221f 	bfc	r2, #4, #1
    9e94:	e5432004 	strb	r2, [r3, #-4]
    9e98:	e15320b4 	ldrh	r2, [r3, #-4]
    9e9c:	e15310b2 	ldrh	r1, [r3, #-2]
    9ea0:	e7c8229f 	bfc	r2, #5, #4
    9ea4:	e14320b4 	strh	r2, [r3, #-4]
    9ea8:	e7cf121c 	bfi	r1, ip, #4, #12
    9eac:	e28cc001 	add	ip, ip, #1
    9eb0:	e1a02422 	lsr	r2, r2, #8
    9eb4:	e14310b2 	strh	r1, [r3, #-2]
    9eb8:	e20220fd 	and	r2, r2, #253	; 0xfd
    9ebc:	e7c32110 	bfi	r2, r0, #2, #2
    9ec0:	e202208f 	and	r2, r2, #143	; 0x8f
    9ec4:	e7c7239f 	bfc	r2, #7, #1
    9ec8:	e5432003 	strb	r2, [r3, #-3]
    9ecc:	25532004 	ldrbcs	r2, [r3, #-4]
    9ed0:	23822010 	orrcs	r2, r2, #16
    9ed4:	25432004 	strbcs	r2, [r3, #-4]
    9ed8:	e35c0a01 	cmp	ip, #4096	; 0x1000
    9edc:	1affffdf 	bne	9e60 <CPageTable::CPageTable()+0x24>
    9ee0:	eb000ce6 	bl	d280 <CleanDataCache>
    9ee4:	e1a00004 	mov	r0, r4
    9ee8:	e8bd8010 	pop	{r4, pc}

00009eec <CPageTable::CPageTable(unsigned int)>:
    9eec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9ef0:	e3a06001 	mov	r6, #1
    9ef4:	e5806000 	str	r6, [r0]
    9ef8:	e1a04000 	mov	r4, r0
    9efc:	e1a05001 	mov	r5, r1
    9f00:	eb000df0 	bl	d6c8 <palloc>
    9f04:	e3a0c000 	mov	ip, #0
    9f08:	e30e16ec 	movw	r1, #59116	; 0xe6ec
    9f0c:	e1a0e006 	mov	lr, r6
    9f10:	e3401000 	movt	r1, #0
    9f14:	e1a0700c 	mov	r7, ip
    9f18:	e3a06002 	mov	r6, #2
    9f1c:	e1a03000 	mov	r3, r0
    9f20:	e5840004 	str	r0, [r4, #4]
    9f24:	ea000009 	b	9f50 <CPageTable::CPageTable(unsigned int)+0x64>
    9f28:	e6ef0072 	uxtb	r0, r2
    9f2c:	e5d32002 	ldrb	r2, [r3, #2]
    9f30:	e7c30197 	bfi	r0, r7, #3, #1
    9f34:	e5c30000 	strb	r0, [r3]
    9f38:	e3822001 	orr	r2, r2, #1
    9f3c:	e5c32002 	strb	r2, [r3, #2]
    9f40:	e28cc601 	add	ip, ip, #1048576	; 0x100000
    9f44:	e2833004 	add	r3, r3, #4
    9f48:	e35c0101 	cmp	ip, #1073741824	; 0x40000000
    9f4c:	0a00001f 	beq	9fd0 <CPageTable::CPageTable(unsigned int)+0xe4>
    9f50:	e5d32001 	ldrb	r2, [r3, #1]
    9f54:	e7e30a5c 	ubfx	r0, ip, #20, #4
    9f58:	e15c0001 	cmp	ip, r1
    9f5c:	e386800c 	orr	r8, r6, #12
    9f60:	e20220fc 	and	r2, r2, #252	; 0xfc
    9f64:	e1a00200 	lsl	r0, r0, #4
    9f68:	e7c3211e 	bfi	r2, lr, #2, #2
    9f6c:	e5c30002 	strb	r0, [r3, #2]
    9f70:	e202208f 	and	r2, r2, #143	; 0x8f
    9f74:	e1a00c2c 	lsr	r0, ip, #24
    9f78:	e7c7239f 	bfc	r2, #7, #1
    9f7c:	e5c38000 	strb	r8, [r3]
    9f80:	e5c32001 	strb	r2, [r3, #1]
    9f84:	e5c30003 	strb	r0, [r3, #3]
    9f88:	3affffec 	bcc	9f40 <CPageTable::CPageTable(unsigned int)+0x54>
    9f8c:	e155000c 	cmp	r5, ip
    9f90:	e6ef2078 	uxtb	r2, r8
    9f94:	e3822010 	orr	r2, r2, #16
    9f98:	e5c32000 	strb	r2, [r3]
    9f9c:	9affffe1 	bls	9f28 <CPageTable::CPageTable(unsigned int)+0x3c>
    9fa0:	e35c0501 	cmp	ip, #4194304	; 0x400000
    9fa4:	1affffe5 	bne	9f40 <CPageTable::CPageTable(unsigned int)+0x54>
    9fa8:	e5d32000 	ldrb	r2, [r3]
    9fac:	e3a0c605 	mov	ip, #5242880	; 0x500000
    9fb0:	e5d30002 	ldrb	r0, [r3, #2]
    9fb4:	e2833004 	add	r3, r3, #4
    9fb8:	e20220fb 	and	r2, r2, #251	; 0xfb
    9fbc:	e7c32197 	bfi	r2, r7, #3, #1
    9fc0:	e3800001 	orr	r0, r0, #1
    9fc4:	e5432004 	strb	r2, [r3, #-4]
    9fc8:	e5430002 	strb	r0, [r3, #-2]
    9fcc:	eaffffdf 	b	9f50 <CPageTable::CPageTable(unsigned int)+0x64>
    9fd0:	eb000caa 	bl	d280 <CleanDataCache>
    9fd4:	e1a00004 	mov	r0, r4
    9fd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009fdc <CPageTable::~CPageTable()>:
    9fdc:	e5903000 	ldr	r3, [r0]
    9fe0:	e92d4010 	push	{r4, lr}
    9fe4:	e3530000 	cmp	r3, #0
    9fe8:	e1a04000 	mov	r4, r0
    9fec:	0a000001 	beq	9ff8 <CPageTable::~CPageTable()+0x1c>
    9ff0:	e5900004 	ldr	r0, [r0, #4]
    9ff4:	eb000dd7 	bl	d758 <pfree>
    9ff8:	e1a00004 	mov	r0, r4
    9ffc:	e8bd8010 	pop	{r4, pc}

0000a000 <CPageTable::GetBaseAddress() const>:
    a000:	e5900004 	ldr	r0, [r0, #4]
    a004:	e3800059 	orr	r0, r0, #89	; 0x59
    a008:	e12fff1e 	bx	lr

0000a00c <CScreenDevice::~CScreenDevice()>:
    a00c:	e590200c 	ldr	r2, [r0, #12]
    a010:	e59f3068 	ldr	r3, [pc, #104]	; a080 <CScreenDevice::~CScreenDevice()+0x74>
    a014:	e3520000 	cmp	r2, #0
    a018:	e92d4070 	push	{r4, r5, r6, lr}
    a01c:	e1a04000 	mov	r4, r0
    a020:	e5803000 	str	r3, [r0]
    a024:	0a000003 	beq	a038 <CScreenDevice::~CScreenDevice()+0x2c>
    a028:	e5900018 	ldr	r0, [r0, #24]
    a02c:	e3500000 	cmp	r0, #0
    a030:	0a000000 	beq	a038 <CScreenDevice::~CScreenDevice()+0x2c>
    a034:	ebfffb8d 	bl	8e70 <operator delete[](void*)>
    a038:	e5945010 	ldr	r5, [r4, #16]
    a03c:	e3a03000 	mov	r3, #0
    a040:	e5843018 	str	r3, [r4, #24]
    a044:	e1550003 	cmp	r5, r3
    a048:	0a000004 	beq	a060 <CScreenDevice::~CScreenDevice()+0x54>
    a04c:	e1a00005 	mov	r0, r5
    a050:	eb000fff 	bl	e054 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    a054:	e1a00005 	mov	r0, r5
    a058:	e3a01024 	mov	r1, #36	; 0x24
    a05c:	ebfffb84 	bl	8e74 <operator delete(void*, unsigned int)>
    a060:	e3a03000 	mov	r3, #0
    a064:	e2840014 	add	r0, r4, #20
    a068:	e5843010 	str	r3, [r4, #16]
    a06c:	eb000475 	bl	b248 <CCharGenerator::~CCharGenerator()>
    a070:	e1a00004 	mov	r0, r4
    a074:	eb001077 	bl	e258 <CDevice::~CDevice()>
    a078:	e1a00004 	mov	r0, r4
    a07c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a080:	0000e830 	.word	0x0000e830

0000a084 <CScreenDevice::~CScreenDevice()>:
    a084:	e92d4010 	push	{r4, lr}
    a088:	e1a04000 	mov	r4, r0
    a08c:	ebffffde 	bl	a00c <CScreenDevice::~CScreenDevice()>
    a090:	e1a00004 	mov	r0, r4
    a094:	e3a01060 	mov	r1, #96	; 0x60
    a098:	ebfffb75 	bl	8e74 <operator delete(void*, unsigned int)>
    a09c:	e1a00004 	mov	r0, r4
    a0a0:	e8bd8010 	pop	{r4, pc}

0000a0a4 <CScreenDevice::InvertCursor() [clone .part.6]>:
    a0a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a0a8:	e2806014 	add	r6, r0, #20
    a0ac:	e1a05000 	mov	r5, r0
    a0b0:	e3a08000 	mov	r8, #0
    a0b4:	e1a00006 	mov	r0, r6
    a0b8:	eb000467 	bl	b25c <CCharGenerator::GetUnderline() const>
    a0bc:	e1a07000 	mov	r7, r0
    a0c0:	e1a00006 	mov	r0, r6
    a0c4:	eb000462 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a0c8:	e1500007 	cmp	r0, r7
    a0cc:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    a0d0:	e3a04000 	mov	r4, #0
    a0d4:	ea000013 	b	a128 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    a0d8:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    a0dc:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    a0e0:	e0843003 	add	r3, r4, r3
    a0e4:	e1530002 	cmp	r3, r2
    a0e8:	2a00000d 	bcs	a124 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    a0ec:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    a0f0:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    a0f4:	e0872002 	add	r2, r7, r2
    a0f8:	e1520001 	cmp	r2, r1
    a0fc:	2a000008 	bcs	a124 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    a100:	e5950020 	ldr	r0, [r5, #32]
    a104:	e5951018 	ldr	r1, [r5, #24]
    a108:	e0233290 	mla	r3, r0, r2, r3
    a10c:	e1a03083 	lsl	r3, r3, #1
    a110:	e19120b3 	ldrh	r2, [r1, r3]
    a114:	e3520000 	cmp	r2, #0
    a118:	118180b3 	strhne	r8, [r1, r3]
    a11c:	01d524b8 	ldrheq	r2, [r5, #72]	; 0x48
    a120:	018120b3 	strheq	r2, [r1, r3]
    a124:	e2844001 	add	r4, r4, #1
    a128:	e1a00006 	mov	r0, r6
    a12c:	eb000446 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a130:	e1500004 	cmp	r0, r4
    a134:	8affffe7 	bhi	a0d8 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    a138:	e2877001 	add	r7, r7, #1
    a13c:	eaffffdf 	b	a0c0 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000a140 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    a140:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a144:	e1a04000 	mov	r4, r0
    a148:	e1a05001 	mov	r5, r1
    a14c:	e1a07002 	mov	r7, r2
    a150:	e1a06003 	mov	r6, r3
    a154:	eb00104b 	bl	e288 <CDevice::CDevice()>
    a158:	e59fc054 	ldr	ip, [pc, #84]	; a1b4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x74>
    a15c:	e2840014 	add	r0, r4, #20
    a160:	e5845004 	str	r5, [r4, #4]
    a164:	e3a05000 	mov	r5, #0
    a168:	e5847008 	str	r7, [r4, #8]
    a16c:	e584600c 	str	r6, [r4, #12]
    a170:	e584c000 	str	ip, [r4]
    a174:	e5845010 	str	r5, [r4, #16]
    a178:	eb00042f 	bl	b23c <CCharGenerator::CCharGenerator()>
    a17c:	e3a03001 	mov	r3, #1
    a180:	e3e02020 	mvn	r2, #32
    a184:	e5845018 	str	r5, [r4, #24]
    a188:	e5845030 	str	r5, [r4, #48]	; 0x30
    a18c:	e1a00004 	mov	r0, r4
    a190:	e5845034 	str	r5, [r4, #52]	; 0x34
    a194:	e584503c 	str	r5, [r4, #60]	; 0x3c
    a198:	e5845040 	str	r5, [r4, #64]	; 0x40
    a19c:	e584504c 	str	r5, [r4, #76]	; 0x4c
    a1a0:	e5845058 	str	r5, [r4, #88]	; 0x58
    a1a4:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
    a1a8:	e5843044 	str	r3, [r4, #68]	; 0x44
    a1ac:	e584305c 	str	r3, [r4, #92]	; 0x5c
    a1b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a1b4:	0000e830 	.word	0x0000e830

0000a1b8 <CScreenDevice::GetWidth() const>:
    a1b8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    a1bc:	e12fff1e 	bx	lr

0000a1c0 <CScreenDevice::GetHeight() const>:
    a1c0:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    a1c4:	e12fff1e 	bx	lr

0000a1c8 <CScreenDevice::GetColumns() const>:
    a1c8:	e1a03000 	mov	r3, r0
    a1cc:	e2800014 	add	r0, r0, #20
    a1d0:	e92d4010 	push	{r4, lr}
    a1d4:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    a1d8:	eb00041b 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a1dc:	e1a01000 	mov	r1, r0
    a1e0:	e1a00004 	mov	r0, r4
    a1e4:	ebfffaa5 	bl	8c80 <__aeabi_uidiv>
    a1e8:	e8bd8010 	pop	{r4, pc}

0000a1ec <CScreenDevice::GetRows() const>:
    a1ec:	e1a03000 	mov	r3, r0
    a1f0:	e2800014 	add	r0, r0, #20
    a1f4:	e92d4010 	push	{r4, lr}
    a1f8:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    a1fc:	eb000414 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a200:	e1a01000 	mov	r1, r0
    a204:	e1a00004 	mov	r0, r4
    a208:	ebfffa9c 	bl	8c80 <__aeabi_uidiv>
    a20c:	e8bd8010 	pop	{r4, pc}

0000a210 <CScreenDevice::GetStatus()>:
    a210:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a214:	e591c038 	ldr	ip, [r1, #56]	; 0x38
    a218:	e5916018 	ldr	r6, [r1, #24]
    a21c:	e591501c 	ldr	r5, [r1, #28]
    a220:	e5914030 	ldr	r4, [r1, #48]	; 0x30
    a224:	e591e034 	ldr	lr, [r1, #52]	; 0x34
    a228:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
    a22c:	e5806000 	str	r6, [r0]
    a230:	e5917040 	ldr	r7, [r1, #64]	; 0x40
    a234:	e5805004 	str	r5, [r0, #4]
    a238:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    a23c:	e5804008 	str	r4, [r0, #8]
    a240:	e1d154b8 	ldrh	r5, [r1, #72]	; 0x48
    a244:	e580e00c 	str	lr, [r0, #12]
    a248:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    a24c:	e580c010 	str	ip, [r0, #16]
    a250:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    a254:	e5802014 	str	r2, [r0, #20]
    a258:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    a25c:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    a260:	e5807018 	str	r7, [r0, #24]
    a264:	e580601c 	str	r6, [r0, #28]
    a268:	e1c052b0 	strh	r5, [r0, #32]
    a26c:	e5804024 	str	r4, [r0, #36]	; 0x24
    a270:	e580e028 	str	lr, [r0, #40]	; 0x28
    a274:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    a278:	e5802030 	str	r2, [r0, #48]	; 0x30
    a27c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000a280 <CScreenDevice::SetStatus(TScreenStatus)>:
    a280:	e24dd010 	sub	sp, sp, #16
    a284:	e92d4070 	push	{r4, r5, r6, lr}
    a288:	e28dc014 	add	ip, sp, #20
    a28c:	e590e01c 	ldr	lr, [r0, #28]
    a290:	e88c000e 	stm	ip, {r1, r2, r3}
    a294:	e59d3018 	ldr	r3, [sp, #24]
    a298:	e15e0003 	cmp	lr, r3
    a29c:	0a000003 	beq	a2b0 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    a2a0:	e3a00000 	mov	r0, #0
    a2a4:	e8bd4070 	pop	{r4, r5, r6, lr}
    a2a8:	e28dd010 	add	sp, sp, #16
    a2ac:	e12fff1e 	bx	lr
    a2b0:	e5902020 	ldr	r2, [r0, #32]
    a2b4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a2b8:	e1520003 	cmp	r2, r3
    a2bc:	1afffff7 	bne	a2a0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a2c0:	e1a04000 	mov	r4, r0
    a2c4:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    a2c8:	e3500000 	cmp	r0, #0
    a2cc:	1a000023 	bne	a360 <CScreenDevice::SetStatus(TScreenStatus)+0xe0>
    a2d0:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a2d4:	e3530000 	cmp	r3, #0
    a2d8:	1afffff0 	bne	a2a0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a2dc:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    a2e0:	e3530000 	cmp	r3, #0
    a2e4:	1affffed 	bne	a2a0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a2e8:	e1a0200e 	mov	r2, lr
    a2ec:	e59d1014 	ldr	r1, [sp, #20]
    a2f0:	e5940018 	ldr	r0, [r4, #24]
    a2f4:	ebfffd76 	bl	98d4 <memcpy>
    a2f8:	e59d201c 	ldr	r2, [sp, #28]
    a2fc:	e59d3020 	ldr	r3, [sp, #32]
    a300:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
    a304:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
    a308:	e3510000 	cmp	r1, #0
    a30c:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    a310:	e59de02c 	ldr	lr, [sp, #44]	; 0x2c
    a314:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    a318:	e1dd03b4 	ldrh	r0, [sp, #52]	; 0x34
    a31c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    a320:	e5842030 	str	r2, [r4, #48]	; 0x30
    a324:	e5843034 	str	r3, [r4, #52]	; 0x34
    a328:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    a32c:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    a330:	e5846038 	str	r6, [r4, #56]	; 0x38
    a334:	e584503c 	str	r5, [r4, #60]	; 0x3c
    a338:	e584e040 	str	lr, [r4, #64]	; 0x40
    a33c:	e584c044 	str	ip, [r4, #68]	; 0x44
    a340:	e1c404b8 	strh	r0, [r4, #72]	; 0x48
    a344:	e584104c 	str	r1, [r4, #76]	; 0x4c
    a348:	e5842050 	str	r2, [r4, #80]	; 0x50
    a34c:	e5843054 	str	r3, [r4, #84]	; 0x54
    a350:	1a00000f 	bne	a394 <CScreenDevice::SetStatus(TScreenStatus)+0x114>
    a354:	f57ff05f 	dmb	sy
    a358:	e3a00001 	mov	r0, #1
    a35c:	eaffffd0 	b	a2a4 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    a360:	ebfffac5 	bl	8e7c <EnterCritical>
    a364:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a368:	e3530000 	cmp	r3, #0
    a36c:	1a000003 	bne	a380 <CScreenDevice::SetStatus(TScreenStatus)+0x100>
    a370:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    a374:	e3530000 	cmp	r3, #0
    a378:	0594e01c 	ldreq	lr, [r4, #28]
    a37c:	0affffd9 	beq	a2e8 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    a380:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    a384:	e3530000 	cmp	r3, #0
    a388:	0affffc4 	beq	a2a0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a38c:	ebfffac8 	bl	8eb4 <LeaveCritical>
    a390:	eaffffc2 	b	a2a0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a394:	ebfffac6 	bl	8eb4 <LeaveCritical>
    a398:	eaffffed 	b	a354 <CScreenDevice::SetStatus(TScreenStatus)+0xd4>

0000a39c <CScreenDevice::CarriageReturn()>:
    a39c:	e3a03000 	mov	r3, #0
    a3a0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    a3a4:	e12fff1e 	bx	lr

0000a3a8 <CScreenDevice::CursorHome()>:
    a3a8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    a3ac:	e3a02000 	mov	r2, #0
    a3b0:	e580203c 	str	r2, [r0, #60]	; 0x3c
    a3b4:	e5803040 	str	r3, [r0, #64]	; 0x40
    a3b8:	e12fff1e 	bx	lr

0000a3bc <CScreenDevice::CursorLeft()>:
    a3bc:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    a3c0:	e92d4070 	push	{r4, r5, r6, lr}
    a3c4:	e3530000 	cmp	r3, #0
    a3c8:	e1a04000 	mov	r4, r0
    a3cc:	1a00000f 	bne	a410 <CScreenDevice::CursorLeft()+0x54>
    a3d0:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    a3d4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    a3d8:	e1520003 	cmp	r2, r3
    a3dc:	98bd8070 	popls	{r4, r5, r6, pc}
    a3e0:	e2806014 	add	r6, r0, #20
    a3e4:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    a3e8:	e1a00006 	mov	r0, r6
    a3ec:	eb000396 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a3f0:	e0455000 	sub	r5, r5, r0
    a3f4:	e1a00006 	mov	r0, r6
    a3f8:	e584503c 	str	r5, [r4, #60]	; 0x3c
    a3fc:	eb000394 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a400:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a404:	e0430000 	sub	r0, r3, r0
    a408:	e5840040 	str	r0, [r4, #64]	; 0x40
    a40c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a410:	e2800014 	add	r0, r0, #20
    a414:	eb00038c 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a418:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a41c:	e0430000 	sub	r0, r3, r0
    a420:	e584003c 	str	r0, [r4, #60]	; 0x3c
    a424:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a428 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    a428:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a42c:	e2806014 	add	r6, r0, #20
    a430:	e1a05000 	mov	r5, r0
    a434:	e1a04002 	mov	r4, r2
    a438:	e1a00006 	mov	r0, r6
    a43c:	e1a07001 	mov	r7, r1
    a440:	eb000381 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a444:	e2444001 	sub	r4, r4, #1
    a448:	e0040490 	mul	r4, r0, r4
    a44c:	e1a00006 	mov	r0, r6
    a450:	eb00037f 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a454:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a458:	e1540003 	cmp	r4, r3
    a45c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    a460:	e2477001 	sub	r7, r7, #1
    a464:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    a468:	e0000790 	mul	r0, r0, r7
    a46c:	e1500003 	cmp	r0, r3
    a470:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    a474:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    a478:	e1500003 	cmp	r0, r3
    a47c:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    a480:	35850040 	strcc	r0, [r5, #64]	; 0x40
    a484:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a488 <CScreenDevice::CursorUp()>:
    a488:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    a48c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    a490:	e1520003 	cmp	r2, r3
    a494:	912fff1e 	bxls	lr
    a498:	e92d4010 	push	{r4, lr}
    a49c:	e1a04000 	mov	r4, r0
    a4a0:	e2800014 	add	r0, r0, #20
    a4a4:	eb00036a 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a4a8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a4ac:	e0430000 	sub	r0, r3, r0
    a4b0:	e5840040 	str	r0, [r4, #64]	; 0x40
    a4b4:	e8bd8010 	pop	{r4, pc}

0000a4b8 <CScreenDevice::DeleteChars(unsigned int)>:
    a4b8:	e12fff1e 	bx	lr

0000a4bc <CScreenDevice::DeleteLines(unsigned int)>:
    a4bc:	e12fff1e 	bx	lr

0000a4c0 <CScreenDevice::InsertLines(unsigned int)>:
    a4c0:	e12fff1e 	bx	lr

0000a4c4 <CScreenDevice::InsertMode(int)>:
    a4c4:	e580104c 	str	r1, [r0, #76]	; 0x4c
    a4c8:	e12fff1e 	bx	lr

0000a4cc <CScreenDevice::ReverseScroll()>:
    a4cc:	e12fff1e 	bx	lr

0000a4d0 <CScreenDevice::SetCursorMode(int)>:
    a4d0:	e5801044 	str	r1, [r0, #68]	; 0x44
    a4d4:	e12fff1e 	bx	lr

0000a4d8 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    a4d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a4dc:	e2807014 	add	r7, r0, #20
    a4e0:	e1a06000 	mov	r6, r0
    a4e4:	e1a05002 	mov	r5, r2
    a4e8:	e1a00007 	mov	r0, r7
    a4ec:	e1a04001 	mov	r4, r1
    a4f0:	eb000357 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a4f4:	e2444001 	sub	r4, r4, #1
    a4f8:	e0040490 	mul	r4, r0, r4
    a4fc:	e1a00007 	mov	r0, r7
    a500:	eb000353 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a504:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    a508:	e0000095 	mul	r0, r5, r0
    a50c:	e3500000 	cmp	r0, #0
    a510:	11540002 	cmpne	r4, r2
    a514:	33a03001 	movcc	r3, #1
    a518:	23a03000 	movcs	r3, #0
    a51c:	e1500002 	cmp	r0, r2
    a520:	83a03000 	movhi	r3, #0
    a524:	92033001 	andls	r3, r3, #1
    a528:	e1540000 	cmp	r4, r0
    a52c:	23a03000 	movcs	r3, #0
    a530:	32033001 	andcc	r3, r3, #1
    a534:	e3530000 	cmp	r3, #0
    a538:	e3a03000 	mov	r3, #0
    a53c:	15864034 	strne	r4, [r6, #52]	; 0x34
    a540:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    a544:	15860038 	strne	r0, [r6, #56]	; 0x38
    a548:	e586303c 	str	r3, [r6, #60]	; 0x3c
    a54c:	e5864040 	str	r4, [r6, #64]	; 0x40
    a550:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a554 <CScreenDevice::SetStandoutMode(unsigned int)>:
    a554:	e351001b 	cmp	r1, #27
    a558:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    a55c:	ea00001d 	b	a5d8 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    a560:	0000a5e8 	.word	0x0000a5e8
    a564:	0000a5dc 	.word	0x0000a5dc
    a568:	0000a5d0 	.word	0x0000a5d0
    a56c:	0000a5d8 	.word	0x0000a5d8
    a570:	0000a5d8 	.word	0x0000a5d8
    a574:	0000a5d8 	.word	0x0000a5d8
    a578:	0000a5d8 	.word	0x0000a5d8
    a57c:	0000a5d8 	.word	0x0000a5d8
    a580:	0000a5d8 	.word	0x0000a5d8
    a584:	0000a5d8 	.word	0x0000a5d8
    a588:	0000a5d8 	.word	0x0000a5d8
    a58c:	0000a5d8 	.word	0x0000a5d8
    a590:	0000a5d8 	.word	0x0000a5d8
    a594:	0000a5d8 	.word	0x0000a5d8
    a598:	0000a5d8 	.word	0x0000a5d8
    a59c:	0000a5d8 	.word	0x0000a5d8
    a5a0:	0000a5d8 	.word	0x0000a5d8
    a5a4:	0000a5d8 	.word	0x0000a5d8
    a5a8:	0000a5d8 	.word	0x0000a5d8
    a5ac:	0000a5d8 	.word	0x0000a5d8
    a5b0:	0000a5d8 	.word	0x0000a5d8
    a5b4:	0000a5d8 	.word	0x0000a5d8
    a5b8:	0000a5d8 	.word	0x0000a5d8
    a5bc:	0000a5d8 	.word	0x0000a5d8
    a5c0:	0000a5d8 	.word	0x0000a5d8
    a5c4:	0000a5d8 	.word	0x0000a5d8
    a5c8:	0000a5d8 	.word	0x0000a5d8
    a5cc:	0000a5e8 	.word	0x0000a5e8
    a5d0:	e3a0301f 	mov	r3, #31
    a5d4:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    a5d8:	e12fff1e 	bx	lr
    a5dc:	e3a03b3e 	mov	r3, #63488	; 0xf800
    a5e0:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    a5e4:	e12fff1e 	bx	lr
    a5e8:	e3e03020 	mvn	r3, #32
    a5ec:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    a5f0:	e12fff1e 	bx	lr

0000a5f4 <CScreenDevice::Scroll()>:
    a5f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a5f8:	e1a07000 	mov	r7, r0
    a5fc:	e2800014 	add	r0, r0, #20
    a600:	eb000313 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a604:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    a608:	e5975020 	ldr	r5, [r7, #32]
    a60c:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    a610:	e5978018 	ldr	r8, [r7, #24]
    a614:	e0444003 	sub	r4, r4, r3
    a618:	e1a02085 	lsl	r2, r5, #1
    a61c:	e0050395 	mul	r5, r5, r3
    a620:	e0885085 	add	r5, r8, r5, lsl #1
    a624:	e0444000 	sub	r4, r4, r0
    a628:	e1a06000 	mov	r6, r0
    a62c:	e0040492 	mul	r4, r2, r4
    a630:	e3540000 	cmp	r4, #0
    a634:	1a000007 	bne	a658 <CScreenDevice::Scroll()+0x64>
    a638:	e0020692 	mul	r2, r2, r6
    a63c:	e1b02122 	lsrs	r2, r2, #2
    a640:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a644:	e1a00005 	mov	r0, r5
    a648:	e1a02102 	lsl	r2, r2, #2
    a64c:	e3a01000 	mov	r1, #0
    a650:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    a654:	ea000cf7 	b	da38 <memset>
    a658:	e0803003 	add	r3, r0, r3
    a65c:	e3c4900f 	bic	r9, r4, #15
    a660:	e1a00005 	mov	r0, r5
    a664:	e0288392 	mla	r8, r2, r3, r8
    a668:	e1a02009 	mov	r2, r9
    a66c:	e1a01008 	mov	r1, r8
    a670:	ebfffc97 	bl	98d4 <memcpy>
    a674:	e204200e 	and	r2, r4, #14
    a678:	e0850009 	add	r0, r5, r9
    a67c:	e0881009 	add	r1, r8, r9
    a680:	ebfffc93 	bl	98d4 <memcpy>
    a684:	e5972020 	ldr	r2, [r7, #32]
    a688:	e3c44003 	bic	r4, r4, #3
    a68c:	e0855004 	add	r5, r5, r4
    a690:	e1a02082 	lsl	r2, r2, #1
    a694:	eaffffe7 	b	a638 <CScreenDevice::Scroll()+0x44>

0000a698 <CScreenDevice::CursorDown()>:
    a698:	e92d4070 	push	{r4, r5, r6, lr}
    a69c:	e2805014 	add	r5, r0, #20
    a6a0:	e1a04000 	mov	r4, r0
    a6a4:	e1a00005 	mov	r0, r5
    a6a8:	eb0002e9 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a6ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a6b0:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    a6b4:	e0800003 	add	r0, r0, r3
    a6b8:	e5840040 	str	r0, [r4, #64]	; 0x40
    a6bc:	e1500002 	cmp	r0, r2
    a6c0:	38bd8070 	popcc	{r4, r5, r6, pc}
    a6c4:	e1a00004 	mov	r0, r4
    a6c8:	ebffffc9 	bl	a5f4 <CScreenDevice::Scroll()>
    a6cc:	e1a00005 	mov	r0, r5
    a6d0:	eb0002df 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a6d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a6d8:	e0430000 	sub	r0, r3, r0
    a6dc:	e5840040 	str	r0, [r4, #64]	; 0x40
    a6e0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a6e4 <CScreenDevice::NewLine()>:
    a6e4:	e3a02000 	mov	r2, #0
    a6e8:	e580203c 	str	r2, [r0, #60]	; 0x3c
    a6ec:	eaffffe9 	b	a698 <CScreenDevice::CursorDown()>

0000a6f0 <CScreenDevice::CursorRight()>:
    a6f0:	e92d4010 	push	{r4, lr}
    a6f4:	e1a04000 	mov	r4, r0
    a6f8:	e2800014 	add	r0, r0, #20
    a6fc:	eb0002d2 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a700:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a704:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    a708:	e0800003 	add	r0, r0, r3
    a70c:	e584003c 	str	r0, [r4, #60]	; 0x3c
    a710:	e1500002 	cmp	r0, r2
    a714:	38bd8010 	popcc	{r4, pc}
    a718:	e3a03000 	mov	r3, #0
    a71c:	e1a00004 	mov	r0, r4
    a720:	e584303c 	str	r3, [r4, #60]	; 0x3c
    a724:	e8bd4010 	pop	{r4, lr}
    a728:	eaffffda 	b	a698 <CScreenDevice::CursorDown()>

0000a72c <CScreenDevice::Tabulator()>:
    a72c:	e92d4070 	push	{r4, r5, r6, lr}
    a730:	e1a05000 	mov	r5, r0
    a734:	e2800014 	add	r0, r0, #20
    a738:	eb0002c3 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a73c:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    a740:	e1a04180 	lsl	r4, r0, #3
    a744:	e0840003 	add	r0, r4, r3
    a748:	e1a01004 	mov	r1, r4
    a74c:	ebfff94b 	bl	8c80 <__aeabi_uidiv>
    a750:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a754:	e0000094 	mul	r0, r4, r0
    a758:	e1500003 	cmp	r0, r3
    a75c:	e585003c 	str	r0, [r5, #60]	; 0x3c
    a760:	38bd8070 	popcc	{r4, r5, r6, pc}
    a764:	e3a03000 	mov	r3, #0
    a768:	e1a00005 	mov	r0, r5
    a76c:	e585303c 	str	r3, [r5, #60]	; 0x3c
    a770:	e8bd4070 	pop	{r4, r5, r6, lr}
    a774:	eaffffc7 	b	a698 <CScreenDevice::CursorDown()>

0000a778 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    a778:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a77c:	e2806014 	add	r6, r0, #20
    a780:	e24dd00c 	sub	sp, sp, #12
    a784:	e1a07000 	mov	r7, r0
    a788:	e1a00006 	mov	r0, r6
    a78c:	e1a0a001 	mov	sl, r1
    a790:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    a794:	e1a09002 	mov	r9, r2
    a798:	e58d3004 	str	r3, [sp, #4]
    a79c:	eb0002ac 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a7a0:	e3a08000 	mov	r8, #0
    a7a4:	e1580000 	cmp	r8, r0
    a7a8:	2a000024 	bcs	a840 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
    a7ac:	e59d3004 	ldr	r3, [sp, #4]
    a7b0:	e3a04000 	mov	r4, #0
    a7b4:	e0883003 	add	r3, r8, r3
    a7b8:	e58d3000 	str	r3, [sp]
    a7bc:	e1a00006 	mov	r0, r6
    a7c0:	e0845009 	add	r5, r4, r9
    a7c4:	eb0002a0 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a7c8:	e1a02004 	mov	r2, r4
    a7cc:	e1a03008 	mov	r3, r8
    a7d0:	e1a0100a 	mov	r1, sl
    a7d4:	e1540000 	cmp	r4, r0
    a7d8:	e1a00006 	mov	r0, r6
    a7dc:	e2844001 	add	r4, r4, #1
    a7e0:	2a000011 	bcs	a82c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>
    a7e4:	eb00029e 	bl	b264 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    a7e8:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    a7ec:	e3500000 	cmp	r0, #0
    a7f0:	11a0200b 	movne	r2, fp
    a7f4:	03a02000 	moveq	r2, #0
    a7f8:	e1550003 	cmp	r5, r3
    a7fc:	2affffee 	bcs	a7bc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    a800:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    a804:	e59d1000 	ldr	r1, [sp]
    a808:	e1510003 	cmp	r1, r3
    a80c:	2affffea 	bcs	a7bc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    a810:	e5973020 	ldr	r3, [r7, #32]
    a814:	e59d0000 	ldr	r0, [sp]
    a818:	e5971018 	ldr	r1, [r7, #24]
    a81c:	e0255093 	mla	r5, r3, r0, r5
    a820:	e1a05085 	lsl	r5, r5, #1
    a824:	e18120b5 	strh	r2, [r1, r5]
    a828:	eaffffe3 	b	a7bc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    a82c:	e1a00006 	mov	r0, r6
    a830:	e2888001 	add	r8, r8, #1
    a834:	eb000286 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a838:	e1580000 	cmp	r8, r0
    a83c:	3affffda 	bcc	a7ac <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    a840:	e28dd00c 	add	sp, sp, #12
    a844:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a848 <CScreenDevice::DisplayChar(char)>:
    a848:	e6ef3071 	uxtb	r3, r1
    a84c:	e353001f 	cmp	r3, #31
    a850:	912fff1e 	bxls	lr
    a854:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    a858:	e92d4010 	push	{r4, lr}
    a85c:	e24dd008 	sub	sp, sp, #8
    a860:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    a864:	e1a04000 	mov	r4, r0
    a868:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    a86c:	e58dc000 	str	ip, [sp]
    a870:	ebffffc0 	bl	a778 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    a874:	e1a00004 	mov	r0, r4
    a878:	e28dd008 	add	sp, sp, #8
    a87c:	e8bd4010 	pop	{r4, lr}
    a880:	eaffff9a 	b	a6f0 <CScreenDevice::CursorRight()>

0000a884 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    a884:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a888:	e3a08000 	mov	r8, #0
    a88c:	e2805014 	add	r5, r0, #20
    a890:	e1a0b000 	mov	fp, r0
    a894:	e1a06001 	mov	r6, r1
    a898:	e1a0a002 	mov	sl, r2
    a89c:	e1a09008 	mov	r9, r8
    a8a0:	e1a00005 	mov	r0, r5
    a8a4:	eb00026a 	bl	b254 <CCharGenerator::GetCharHeight() const>
    a8a8:	e1580000 	cmp	r8, r0
    a8ac:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8b0:	e088700a 	add	r7, r8, sl
    a8b4:	e3a04000 	mov	r4, #0
    a8b8:	e1a00005 	mov	r0, r5
    a8bc:	eb000262 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a8c0:	e0843006 	add	r3, r4, r6
    a8c4:	e1540000 	cmp	r4, r0
    a8c8:	e2844001 	add	r4, r4, #1
    a8cc:	2a00000b 	bcs	a900 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    a8d0:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    a8d4:	e1530002 	cmp	r3, r2
    a8d8:	2afffff6 	bcs	a8b8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    a8dc:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    a8e0:	e1570002 	cmp	r7, r2
    a8e4:	2afffff3 	bcs	a8b8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    a8e8:	e59b2020 	ldr	r2, [fp, #32]
    a8ec:	e59b1018 	ldr	r1, [fp, #24]
    a8f0:	e0233792 	mla	r3, r2, r7, r3
    a8f4:	e1a03083 	lsl	r3, r3, #1
    a8f8:	e18190b3 	strh	r9, [r1, r3]
    a8fc:	eaffffed 	b	a8b8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    a900:	e2888001 	add	r8, r8, #1
    a904:	eaffffe5 	b	a8a0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000a908 <CScreenDevice::ClearLineEnd()>:
    a908:	e92d4070 	push	{r4, r5, r6, lr}
    a90c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a910:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    a914:	e1540003 	cmp	r4, r3
    a918:	28bd8070 	popcs	{r4, r5, r6, pc}
    a91c:	e2806014 	add	r6, r0, #20
    a920:	e1a05000 	mov	r5, r0
    a924:	e1a01004 	mov	r1, r4
    a928:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    a92c:	e1a00005 	mov	r0, r5
    a930:	ebffffd3 	bl	a884 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    a934:	e1a00006 	mov	r0, r6
    a938:	eb000243 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a93c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a940:	e0844000 	add	r4, r4, r0
    a944:	e1530004 	cmp	r3, r4
    a948:	8afffff5 	bhi	a924 <CScreenDevice::ClearLineEnd()+0x1c>
    a94c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a950 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    a950:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a954:	e2807014 	add	r7, r0, #20
    a958:	e1a05000 	mov	r5, r0
    a95c:	e590803c 	ldr	r8, [r0, #60]	; 0x3c
    a960:	e1a00007 	mov	r0, r7
    a964:	e1a06001 	mov	r6, r1
    a968:	eb000237 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a96c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a970:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    a974:	e0268096 	mla	r6, r6, r0, r8
    a978:	e1560003 	cmp	r6, r3
    a97c:	21a06003 	movcs	r6, r3
    a980:	e1540006 	cmp	r4, r6
    a984:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    a988:	e1a01004 	mov	r1, r4
    a98c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    a990:	e1a00005 	mov	r0, r5
    a994:	ebffffba 	bl	a884 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    a998:	e1a00007 	mov	r0, r7
    a99c:	eb00022a 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a9a0:	e0844000 	add	r4, r4, r0
    a9a4:	e1540006 	cmp	r4, r6
    a9a8:	3afffff6 	bcc	a988 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    a9ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a9b0 <CScreenDevice::EraseChars(unsigned int)>:
    a9b0:	e3510000 	cmp	r1, #0
    a9b4:	012fff1e 	bxeq	lr
    a9b8:	eaffffe4 	b	a950 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000a9bc <CScreenDevice::ClearDisplayEnd()>:
    a9bc:	e92d4070 	push	{r4, r5, r6, lr}
    a9c0:	e1a05000 	mov	r5, r0
    a9c4:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    a9c8:	e2806014 	add	r6, r0, #20
    a9cc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a9d0:	e1540003 	cmp	r4, r3
    a9d4:	2a000009 	bcs	aa00 <CScreenDevice::ClearDisplayEnd()+0x44>
    a9d8:	e1a01004 	mov	r1, r4
    a9dc:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    a9e0:	e1a00005 	mov	r0, r5
    a9e4:	ebffffa6 	bl	a884 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    a9e8:	e1a00006 	mov	r0, r6
    a9ec:	eb000216 	bl	b24c <CCharGenerator::GetCharWidth() const>
    a9f0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a9f4:	e0844000 	add	r4, r4, r0
    a9f8:	e1530004 	cmp	r3, r4
    a9fc:	8afffff5 	bhi	a9d8 <CScreenDevice::ClearDisplayEnd()+0x1c>
    aa00:	e1a00006 	mov	r0, r6
    aa04:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    aa08:	eb000211 	bl	b254 <CCharGenerator::GetCharHeight() const>
    aa0c:	e2851018 	add	r1, r5, #24
    aa10:	e891000e 	ldm	r1, {r1, r2, r3}
    aa14:	e0840000 	add	r0, r4, r0
    aa18:	e0000093 	mul	r0, r3, r0
    aa1c:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    aa20:	0a000004 	beq	aa38 <CScreenDevice::ClearDisplayEnd()+0x7c>
    aa24:	e0810080 	add	r0, r1, r0, lsl #1
    aa28:	e1a02082 	lsl	r2, r2, #1
    aa2c:	e3a01000 	mov	r1, #0
    aa30:	e8bd4070 	pop	{r4, r5, r6, lr}
    aa34:	ea000bff 	b	da38 <memset>
    aa38:	e8bd8070 	pop	{r4, r5, r6, pc}

0000aa3c <CScreenDevice::Write(char)>:
    aa3c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    aa40:	e92d4010 	push	{r4, lr}
    aa44:	e1a04000 	mov	r4, r0
    aa48:	e24dd008 	sub	sp, sp, #8
    aa4c:	e3530007 	cmp	r3, #7
    aa50:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    aa54:	ea000010 	b	aa9c <CScreenDevice::Write(char)+0x60>
    aa58:	0000aae8 	.word	0x0000aae8
    aa5c:	0000ab48 	.word	0x0000ab48
    aa60:	0000ab64 	.word	0x0000ab64
    aa64:	0000abbc 	.word	0x0000abbc
    aa68:	0000ac98 	.word	0x0000ac98
    aa6c:	0000acb8 	.word	0x0000acb8
    aa70:	0000acd8 	.word	0x0000acd8
    aa74:	0000aaac 	.word	0x0000aaac
    aa78:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    aa7c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    aa80:	e1520003 	cmp	r2, r3
    aa84:	2a000004 	bcs	aa9c <CScreenDevice::Write(char)+0x60>
    aa88:	e2800014 	add	r0, r0, #20
    aa8c:	eb0001f0 	bl	b254 <CCharGenerator::GetCharHeight() const>
    aa90:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    aa94:	e0433000 	sub	r3, r3, r0
    aa98:	e5843040 	str	r3, [r4, #64]	; 0x40
    aa9c:	e3a03000 	mov	r3, #0
    aaa0:	e5843030 	str	r3, [r4, #48]	; 0x30
    aaa4:	e28dd008 	add	sp, sp, #8
    aaa8:	e8bd8010 	pop	{r4, pc}
    aaac:	e3510068 	cmp	r1, #104	; 0x68
    aab0:	0a000097 	beq	ad14 <CScreenDevice::Write(char)+0x2d8>
    aab4:	e351006c 	cmp	r1, #108	; 0x6c
    aab8:	0a000095 	beq	ad14 <CScreenDevice::Write(char)+0x2d8>
    aabc:	e2411030 	sub	r1, r1, #48	; 0x30
    aac0:	e6ef3071 	uxtb	r3, r1
    aac4:	e3530009 	cmp	r3, #9
    aac8:	8afffff3 	bhi	aa9c <CScreenDevice::Write(char)+0x60>
    aacc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    aad0:	e3a0200a 	mov	r2, #10
    aad4:	e0211392 	mla	r1, r2, r3, r1
    aad8:	e3510063 	cmp	r1, #99	; 0x63
    aadc:	e5841050 	str	r1, [r4, #80]	; 0x50
    aae0:	8affffed 	bhi	aa9c <CScreenDevice::Write(char)+0x60>
    aae4:	eaffffee 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    aae8:	e2413008 	sub	r3, r1, #8
    aaec:	e3530013 	cmp	r3, #19
    aaf0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    aaf4:	ea0000ec 	b	aeac <CScreenDevice::Write(char)+0x470>
    aaf8:	0000ad80 	.word	0x0000ad80
    aafc:	0000ad74 	.word	0x0000ad74
    ab00:	0000ad60 	.word	0x0000ad60
    ab04:	0000aeac 	.word	0x0000aeac
    ab08:	0000aeac 	.word	0x0000aeac
    ab0c:	0000ad54 	.word	0x0000ad54
    ab10:	0000aeac 	.word	0x0000aeac
    ab14:	0000aeac 	.word	0x0000aeac
    ab18:	0000aeac 	.word	0x0000aeac
    ab1c:	0000aeac 	.word	0x0000aeac
    ab20:	0000aeac 	.word	0x0000aeac
    ab24:	0000aeac 	.word	0x0000aeac
    ab28:	0000aeac 	.word	0x0000aeac
    ab2c:	0000aeac 	.word	0x0000aeac
    ab30:	0000aeac 	.word	0x0000aeac
    ab34:	0000aeac 	.word	0x0000aeac
    ab38:	0000aeac 	.word	0x0000aeac
    ab3c:	0000aeac 	.word	0x0000aeac
    ab40:	0000aeac 	.word	0x0000aeac
    ab44:	0000ad48 	.word	0x0000ad48
    ab48:	e351004d 	cmp	r1, #77	; 0x4d
    ab4c:	0affffd2 	beq	aa9c <CScreenDevice::Write(char)+0x60>
    ab50:	e351005b 	cmp	r1, #91	; 0x5b
    ab54:	03a03002 	moveq	r3, #2
    ab58:	05803030 	streq	r3, [r0, #48]	; 0x30
    ab5c:	0affffd0 	beq	aaa4 <CScreenDevice::Write(char)+0x68>
    ab60:	eaffffcd 	b	aa9c <CScreenDevice::Write(char)+0x60>
    ab64:	e241303f 	sub	r3, r1, #63	; 0x3f
    ab68:	e3530011 	cmp	r3, #17
    ab6c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ab70:	ea0000d9 	b	aedc <CScreenDevice::Write(char)+0x4a0>
    ab74:	0000ae68 	.word	0x0000ae68
    ab78:	0000aedc 	.word	0x0000aedc
    ab7c:	0000aa78 	.word	0x0000aa78
    ab80:	0000ae9c 	.word	0x0000ae9c
    ab84:	0000ae8c 	.word	0x0000ae8c
    ab88:	0000aedc 	.word	0x0000aedc
    ab8c:	0000aedc 	.word	0x0000aedc
    ab90:	0000aedc 	.word	0x0000aedc
    ab94:	0000aedc 	.word	0x0000aedc
    ab98:	0000ae74 	.word	0x0000ae74
    ab9c:	0000aedc 	.word	0x0000aedc
    aba0:	0000ae58 	.word	0x0000ae58
    aba4:	0000ae48 	.word	0x0000ae48
    aba8:	0000aa9c 	.word	0x0000aa9c
    abac:	0000aa9c 	.word	0x0000aa9c
    abb0:	0000aedc 	.word	0x0000aedc
    abb4:	0000aedc 	.word	0x0000aedc
    abb8:	0000aa9c 	.word	0x0000aa9c
    abbc:	e241303b 	sub	r3, r1, #59	; 0x3b
    abc0:	e3530032 	cmp	r3, #50	; 0x32
    abc4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    abc8:	eaffffbb 	b	aabc <CScreenDevice::Write(char)+0x80>
    abcc:	0000ae3c 	.word	0x0000ae3c
    abd0:	0000aabc 	.word	0x0000aabc
    abd4:	0000aabc 	.word	0x0000aabc
    abd8:	0000aabc 	.word	0x0000aabc
    abdc:	0000aabc 	.word	0x0000aabc
    abe0:	0000aabc 	.word	0x0000aabc
    abe4:	0000aabc 	.word	0x0000aabc
    abe8:	0000aabc 	.word	0x0000aabc
    abec:	0000aabc 	.word	0x0000aabc
    abf0:	0000aabc 	.word	0x0000aabc
    abf4:	0000aabc 	.word	0x0000aabc
    abf8:	0000aabc 	.word	0x0000aabc
    abfc:	0000aabc 	.word	0x0000aabc
    ac00:	0000aabc 	.word	0x0000aabc
    ac04:	0000aabc 	.word	0x0000aabc
    ac08:	0000aabc 	.word	0x0000aabc
    ac0c:	0000aabc 	.word	0x0000aabc
    ac10:	0000aa9c 	.word	0x0000aa9c
    ac14:	0000aa9c 	.word	0x0000aa9c
    ac18:	0000aabc 	.word	0x0000aabc
    ac1c:	0000aabc 	.word	0x0000aabc
    ac20:	0000aa9c 	.word	0x0000aa9c
    ac24:	0000aabc 	.word	0x0000aabc
    ac28:	0000aabc 	.word	0x0000aabc
    ac2c:	0000aabc 	.word	0x0000aabc
    ac30:	0000aabc 	.word	0x0000aabc
    ac34:	0000aabc 	.word	0x0000aabc
    ac38:	0000aabc 	.word	0x0000aabc
    ac3c:	0000aabc 	.word	0x0000aabc
    ac40:	0000ad8c 	.word	0x0000ad8c
    ac44:	0000aabc 	.word	0x0000aabc
    ac48:	0000aabc 	.word	0x0000aabc
    ac4c:	0000aabc 	.word	0x0000aabc
    ac50:	0000aabc 	.word	0x0000aabc
    ac54:	0000aabc 	.word	0x0000aabc
    ac58:	0000aabc 	.word	0x0000aabc
    ac5c:	0000aabc 	.word	0x0000aabc
    ac60:	0000aabc 	.word	0x0000aabc
    ac64:	0000aabc 	.word	0x0000aabc
    ac68:	0000aabc 	.word	0x0000aabc
    ac6c:	0000aabc 	.word	0x0000aabc
    ac70:	0000aabc 	.word	0x0000aabc
    ac74:	0000aabc 	.word	0x0000aabc
    ac78:	0000aabc 	.word	0x0000aabc
    ac7c:	0000aabc 	.word	0x0000aabc
    ac80:	0000ada0 	.word	0x0000ada0
    ac84:	0000aabc 	.word	0x0000aabc
    ac88:	0000aabc 	.word	0x0000aabc
    ac8c:	0000aabc 	.word	0x0000aabc
    ac90:	0000ada0 	.word	0x0000ada0
    ac94:	0000adbc 	.word	0x0000adbc
    ac98:	e2411030 	sub	r1, r1, #48	; 0x30
    ac9c:	e6ef3071 	uxtb	r3, r1
    aca0:	e3530009 	cmp	r3, #9
    aca4:	8affff7c 	bhi	aa9c <CScreenDevice::Write(char)+0x60>
    aca8:	e3a03007 	mov	r3, #7
    acac:	e5801050 	str	r1, [r0, #80]	; 0x50
    acb0:	e5803030 	str	r3, [r0, #48]	; 0x30
    acb4:	eaffff7a 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    acb8:	e2411030 	sub	r1, r1, #48	; 0x30
    acbc:	e6ef3071 	uxtb	r3, r1
    acc0:	e3530009 	cmp	r3, #9
    acc4:	8affff74 	bhi	aa9c <CScreenDevice::Write(char)+0x60>
    acc8:	e3a03006 	mov	r3, #6
    accc:	e5801054 	str	r1, [r0, #84]	; 0x54
    acd0:	e5803030 	str	r3, [r0, #48]	; 0x30
    acd4:	eaffff72 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    acd8:	e3510048 	cmp	r1, #72	; 0x48
    acdc:	0a00008f 	beq	af20 <CScreenDevice::Write(char)+0x4e4>
    ace0:	e3510072 	cmp	r1, #114	; 0x72
    ace4:	0a000011 	beq	ad30 <CScreenDevice::Write(char)+0x2f4>
    ace8:	e2411030 	sub	r1, r1, #48	; 0x30
    acec:	e6ef3071 	uxtb	r3, r1
    acf0:	e3530009 	cmp	r3, #9
    acf4:	8affff68 	bhi	aa9c <CScreenDevice::Write(char)+0x60>
    acf8:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    acfc:	e3a0200a 	mov	r2, #10
    ad00:	e0211392 	mla	r1, r2, r3, r1
    ad04:	e35100c7 	cmp	r1, #199	; 0xc7
    ad08:	e5801054 	str	r1, [r0, #84]	; 0x54
    ad0c:	8affff62 	bhi	aa9c <CScreenDevice::Write(char)+0x60>
    ad10:	eaffff63 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    ad14:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    ad18:	e3530019 	cmp	r3, #25
    ad1c:	02411068 	subeq	r1, r1, #104	; 0x68
    ad20:	016f1f11 	clzeq	r1, r1
    ad24:	01a012a1 	lsreq	r1, r1, #5
    ad28:	05841044 	streq	r1, [r4, #68]	; 0x44
    ad2c:	eaffff5a 	b	aa9c <CScreenDevice::Write(char)+0x60>
    ad30:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    ad34:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    ad38:	ebfffde6 	bl	a4d8 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    ad3c:	e3a03000 	mov	r3, #0
    ad40:	e5843030 	str	r3, [r4, #48]	; 0x30
    ad44:	eaffff56 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    ad48:	e3a03001 	mov	r3, #1
    ad4c:	e5803030 	str	r3, [r0, #48]	; 0x30
    ad50:	eaffff53 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    ad54:	e3a03000 	mov	r3, #0
    ad58:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ad5c:	eaffff50 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    ad60:	e3a03000 	mov	r3, #0
    ad64:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ad68:	e28dd008 	add	sp, sp, #8
    ad6c:	e8bd4010 	pop	{r4, lr}
    ad70:	eafffe48 	b	a698 <CScreenDevice::CursorDown()>
    ad74:	e28dd008 	add	sp, sp, #8
    ad78:	e8bd4010 	pop	{r4, lr}
    ad7c:	eafffe6a 	b	a72c <CScreenDevice::Tabulator()>
    ad80:	e28dd008 	add	sp, sp, #8
    ad84:	e8bd4010 	pop	{r4, lr}
    ad88:	eafffd8b 	b	a3bc <CScreenDevice::CursorLeft()>
    ad8c:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    ad90:	e3510000 	cmp	r1, #0
    ad94:	0affff40 	beq	aa9c <CScreenDevice::Write(char)+0x60>
    ad98:	ebfffeec 	bl	a950 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    ad9c:	eaffff3e 	b	aa9c <CScreenDevice::Write(char)+0x60>
    ada0:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    ada4:	e3530004 	cmp	r3, #4
    ada8:	02411068 	subeq	r1, r1, #104	; 0x68
    adac:	016f1f11 	clzeq	r1, r1
    adb0:	01a012a1 	lsreq	r1, r1, #5
    adb4:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    adb8:	eaffff37 	b	aa9c <CScreenDevice::Write(char)+0x60>
    adbc:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    adc0:	e353001b 	cmp	r3, #27
    adc4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    adc8:	eaffff33 	b	aa9c <CScreenDevice::Write(char)+0x60>
    adcc:	0000af14 	.word	0x0000af14
    add0:	0000af08 	.word	0x0000af08
    add4:	0000aefc 	.word	0x0000aefc
    add8:	0000aa9c 	.word	0x0000aa9c
    addc:	0000aa9c 	.word	0x0000aa9c
    ade0:	0000aa9c 	.word	0x0000aa9c
    ade4:	0000aa9c 	.word	0x0000aa9c
    ade8:	0000aa9c 	.word	0x0000aa9c
    adec:	0000aa9c 	.word	0x0000aa9c
    adf0:	0000aa9c 	.word	0x0000aa9c
    adf4:	0000aa9c 	.word	0x0000aa9c
    adf8:	0000aa9c 	.word	0x0000aa9c
    adfc:	0000aa9c 	.word	0x0000aa9c
    ae00:	0000aa9c 	.word	0x0000aa9c
    ae04:	0000aa9c 	.word	0x0000aa9c
    ae08:	0000aa9c 	.word	0x0000aa9c
    ae0c:	0000aa9c 	.word	0x0000aa9c
    ae10:	0000aa9c 	.word	0x0000aa9c
    ae14:	0000aa9c 	.word	0x0000aa9c
    ae18:	0000aa9c 	.word	0x0000aa9c
    ae1c:	0000aa9c 	.word	0x0000aa9c
    ae20:	0000aa9c 	.word	0x0000aa9c
    ae24:	0000aa9c 	.word	0x0000aa9c
    ae28:	0000aa9c 	.word	0x0000aa9c
    ae2c:	0000aa9c 	.word	0x0000aa9c
    ae30:	0000aa9c 	.word	0x0000aa9c
    ae34:	0000aa9c 	.word	0x0000aa9c
    ae38:	0000af14 	.word	0x0000af14
    ae3c:	e3a03005 	mov	r3, #5
    ae40:	e5803030 	str	r3, [r0, #48]	; 0x30
    ae44:	eaffff16 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    ae48:	ebfffeae 	bl	a908 <CScreenDevice::ClearLineEnd()>
    ae4c:	e3a03000 	mov	r3, #0
    ae50:	e5843030 	str	r3, [r4, #48]	; 0x30
    ae54:	eaffff12 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    ae58:	ebfffed7 	bl	a9bc <CScreenDevice::ClearDisplayEnd()>
    ae5c:	e3a03000 	mov	r3, #0
    ae60:	e5843030 	str	r3, [r4, #48]	; 0x30
    ae64:	eaffff0e 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    ae68:	e3a03004 	mov	r3, #4
    ae6c:	e5803030 	str	r3, [r0, #48]	; 0x30
    ae70:	eaffff0b 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    ae74:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    ae78:	e3a03000 	mov	r3, #0
    ae7c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ae80:	e5803030 	str	r3, [r0, #48]	; 0x30
    ae84:	e5802040 	str	r2, [r0, #64]	; 0x40
    ae88:	eaffff05 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    ae8c:	ebfffe17 	bl	a6f0 <CScreenDevice::CursorRight()>
    ae90:	e3a03000 	mov	r3, #0
    ae94:	e5843030 	str	r3, [r4, #48]	; 0x30
    ae98:	eaffff01 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    ae9c:	ebfffdfd 	bl	a698 <CScreenDevice::CursorDown()>
    aea0:	e3a03000 	mov	r3, #0
    aea4:	e5843030 	str	r3, [r4, #48]	; 0x30
    aea8:	eafffefd 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    aeac:	e6ef3071 	uxtb	r3, r1
    aeb0:	e353001f 	cmp	r3, #31
    aeb4:	9afffefa 	bls	aaa4 <CScreenDevice::Write(char)+0x68>
    aeb8:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    aebc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    aec0:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    aec4:	e58dc000 	str	ip, [sp]
    aec8:	ebfffe2a 	bl	a778 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    aecc:	e1a00004 	mov	r0, r4
    aed0:	e28dd008 	add	sp, sp, #8
    aed4:	e8bd4010 	pop	{r4, lr}
    aed8:	eafffe04 	b	a6f0 <CScreenDevice::CursorRight()>
    aedc:	e2411030 	sub	r1, r1, #48	; 0x30
    aee0:	e6ef3071 	uxtb	r3, r1
    aee4:	e3530009 	cmp	r3, #9
    aee8:	8afffeeb 	bhi	aa9c <CScreenDevice::Write(char)+0x60>
    aeec:	e3a03003 	mov	r3, #3
    aef0:	e5801050 	str	r1, [r0, #80]	; 0x50
    aef4:	e5803030 	str	r3, [r0, #48]	; 0x30
    aef8:	eafffee9 	b	aaa4 <CScreenDevice::Write(char)+0x68>
    aefc:	e3a0301f 	mov	r3, #31
    af00:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    af04:	eafffee4 	b	aa9c <CScreenDevice::Write(char)+0x60>
    af08:	e3a03b3e 	mov	r3, #63488	; 0xf800
    af0c:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    af10:	eafffee1 	b	aa9c <CScreenDevice::Write(char)+0x60>
    af14:	e3e03020 	mvn	r3, #32
    af18:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    af1c:	eafffede 	b	aa9c <CScreenDevice::Write(char)+0x60>
    af20:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    af24:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    af28:	ebfffd3e 	bl	a428 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    af2c:	e3a03000 	mov	r3, #0
    af30:	e5843030 	str	r3, [r4, #48]	; 0x30
    af34:	eafffeda 	b	aaa4 <CScreenDevice::Write(char)+0x68>

0000af38 <CScreenDevice::Write(void const*, unsigned int)>:
    af38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    af3c:	e1a05000 	mov	r5, r0
    af40:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    af44:	e1a06001 	mov	r6, r1
    af48:	e1a08002 	mov	r8, r2
    af4c:	e3500000 	cmp	r0, #0
    af50:	1a000026 	bne	aff0 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    af54:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    af58:	e3a03001 	mov	r3, #1
    af5c:	e5853058 	str	r3, [r5, #88]	; 0x58
    af60:	e3540000 	cmp	r4, #0
    af64:	1a00001a 	bne	afd4 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    af68:	e3580000 	cmp	r8, #0
    af6c:	e2487001 	sub	r7, r8, #1
    af70:	0a00000b 	beq	afa4 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    af74:	e1a04006 	mov	r4, r6
    af78:	e0d410d1 	ldrsb	r1, [r4], #1
    af7c:	e1a00005 	mov	r0, r5
    af80:	ebfffead 	bl	aa3c <CScreenDevice::Write(char)>
    af84:	e2643001 	rsb	r3, r4, #1
    af88:	e0833007 	add	r3, r3, r7
    af8c:	e1760003 	cmn	r6, r3
    af90:	1afffff8 	bne	af78 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    af94:	e2874001 	add	r4, r7, #1
    af98:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    af9c:	e3530000 	cmp	r3, #0
    afa0:	1a000008 	bne	afc8 <CScreenDevice::Write(void const*, unsigned int)+0x90>
    afa4:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    afa8:	e3a02000 	mov	r2, #0
    afac:	e5852058 	str	r2, [r5, #88]	; 0x58
    afb0:	e1530002 	cmp	r3, r2
    afb4:	0a000000 	beq	afbc <CScreenDevice::Write(void const*, unsigned int)+0x84>
    afb8:	ebfff7bd 	bl	8eb4 <LeaveCritical>
    afbc:	f57ff05f 	dmb	sy
    afc0:	e1a00004 	mov	r0, r4
    afc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    afc8:	e1a00005 	mov	r0, r5
    afcc:	ebfffc34 	bl	a0a4 <CScreenDevice::InvertCursor() [clone .part.6]>
    afd0:	eafffff3 	b	afa4 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    afd4:	e1a00005 	mov	r0, r5
    afd8:	e2487001 	sub	r7, r8, #1
    afdc:	ebfffc30 	bl	a0a4 <CScreenDevice::InvertCursor() [clone .part.6]>
    afe0:	e3580000 	cmp	r8, #0
    afe4:	1affffe2 	bne	af74 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    afe8:	e1a04008 	mov	r4, r8
    afec:	eaffffe9 	b	af98 <CScreenDevice::Write(void const*, unsigned int)+0x60>
    aff0:	ebfff7a1 	bl	8e7c <EnterCritical>
    aff4:	eaffffd6 	b	af54 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000aff8 <CScreenDevice::Initialize()>:
    aff8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    affc:	e1a04000 	mov	r4, r0
    b000:	e590500c 	ldr	r5, [r0, #12]
    b004:	e24dd00c 	sub	sp, sp, #12
    b008:	e3550000 	cmp	r5, #0
    b00c:	0a00002b 	beq	b0c0 <CScreenDevice::Initialize()+0xc8>
    b010:	e5903004 	ldr	r3, [r0, #4]
    b014:	e5902008 	ldr	r2, [r0, #8]
    b018:	e5803024 	str	r3, [r0, #36]	; 0x24
    b01c:	e0000392 	mul	r0, r2, r3
    b020:	e5843020 	str	r3, [r4, #32]
    b024:	e5842028 	str	r2, [r4, #40]	; 0x28
    b028:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    b02c:	e1a00080 	lsl	r0, r0, #1
    b030:	e584001c 	str	r0, [r4, #28]
    b034:	23e00000 	mvncs	r0, #0
    b038:	ebfff78a 	bl	8e68 <operator new[](unsigned int)>
    b03c:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    b040:	e5840018 	str	r0, [r4, #24]
    b044:	e2846014 	add	r6, r4, #20
    b048:	e1a00006 	mov	r0, r6
    b04c:	eb000080 	bl	b254 <CCharGenerator::GetCharHeight() const>
    b050:	e1a01000 	mov	r1, r0
    b054:	e1a00007 	mov	r0, r7
    b058:	ebfff708 	bl	8c80 <__aeabi_uidiv>
    b05c:	e1a05000 	mov	r5, r0
    b060:	e1a00006 	mov	r0, r6
    b064:	eb00007a 	bl	b254 <CCharGenerator::GetCharHeight() const>
    b068:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    b06c:	e3a02000 	mov	r2, #0
    b070:	e584203c 	str	r2, [r4, #60]	; 0x3c
    b074:	e5843040 	str	r3, [r4, #64]	; 0x40
    b078:	e0050590 	mul	r5, r0, r5
    b07c:	e1a00004 	mov	r0, r4
    b080:	e584502c 	str	r5, [r4, #44]	; 0x2c
    b084:	e5845038 	str	r5, [r4, #56]	; 0x38
    b088:	ebfffe4b 	bl	a9bc <CScreenDevice::ClearDisplayEnd()>
    b08c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    b090:	e3530000 	cmp	r3, #0
    b094:	1a000031 	bne	b160 <CScreenDevice::Initialize()+0x168>
    b098:	eb0000eb 	bl	b44c <CDeviceNameService::Get()>
    b09c:	e30e17c4 	movw	r1, #59332	; 0xe7c4
    b0a0:	e1a02004 	mov	r2, r4
    b0a4:	e3a03000 	mov	r3, #0
    b0a8:	e3401000 	movt	r1, #0
    b0ac:	e3a05001 	mov	r5, #1
    b0b0:	eb00009c 	bl	b328 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    b0b4:	e1a00005 	mov	r0, r5
    b0b8:	e28dd00c 	add	sp, sp, #12
    b0bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b0c0:	e3a00024 	mov	r0, #36	; 0x24
    b0c4:	ebfff766 	bl	8e64 <operator new(unsigned int)>
    b0c8:	e5942008 	ldr	r2, [r4, #8]
    b0cc:	e5941004 	ldr	r1, [r4, #4]
    b0d0:	e3a03010 	mov	r3, #16
    b0d4:	e58d5004 	str	r5, [sp, #4]
    b0d8:	e58d5000 	str	r5, [sp]
    b0dc:	e1a06000 	mov	r6, r0
    b0e0:	eb000b8d 	bl	df1c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b0e4:	e5846010 	str	r6, [r4, #16]
    b0e8:	e1a00006 	mov	r0, r6
    b0ec:	eb000bf4 	bl	e0c4 <CBcmFrameBuffer::Initialize()>
    b0f0:	e3500000 	cmp	r0, #0
    b0f4:	0affffee 	beq	b0b4 <CScreenDevice::Initialize()+0xbc>
    b0f8:	e5940010 	ldr	r0, [r4, #16]
    b0fc:	eb000c2b 	bl	e1b0 <CBcmFrameBuffer::GetDepth() const>
    b100:	e3500010 	cmp	r0, #16
    b104:	1affffea 	bne	b0b4 <CScreenDevice::Initialize()+0xbc>
    b108:	e5940010 	ldr	r0, [r4, #16]
    b10c:	eb000c29 	bl	e1b8 <CBcmFrameBuffer::GetBuffer() const>
    b110:	e5840018 	str	r0, [r4, #24]
    b114:	e5940010 	ldr	r0, [r4, #16]
    b118:	eb000c28 	bl	e1c0 <CBcmFrameBuffer::GetSize() const>
    b11c:	e584001c 	str	r0, [r4, #28]
    b120:	e5940010 	ldr	r0, [r4, #16]
    b124:	eb000c1f 	bl	e1a8 <CBcmFrameBuffer::GetPitch() const>
    b128:	e5840020 	str	r0, [r4, #32]
    b12c:	e5940010 	ldr	r0, [r4, #16]
    b130:	eb000c14 	bl	e188 <CBcmFrameBuffer::GetWidth() const>
    b134:	e5840024 	str	r0, [r4, #36]	; 0x24
    b138:	e5940010 	ldr	r0, [r4, #16]
    b13c:	eb000c13 	bl	e190 <CBcmFrameBuffer::GetHeight() const>
    b140:	e5943020 	ldr	r3, [r4, #32]
    b144:	e3130003 	tst	r3, #3
    b148:	01a030a3 	lsreq	r3, r3, #1
    b14c:	05843020 	streq	r3, [r4, #32]
    b150:	e1a07000 	mov	r7, r0
    b154:	e5840028 	str	r0, [r4, #40]	; 0x28
    b158:	0affffb9 	beq	b044 <CScreenDevice::Initialize()+0x4c>
    b15c:	eaffffd4 	b	b0b4 <CScreenDevice::Initialize()+0xbc>
    b160:	e1a00004 	mov	r0, r4
    b164:	ebfffbce 	bl	a0a4 <CScreenDevice::InvertCursor() [clone .part.6]>
    b168:	eaffffca 	b	b098 <CScreenDevice::Initialize()+0xa0>

0000b16c <CScreenDevice::InvertCursor()>:
    b16c:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    b170:	e3530000 	cmp	r3, #0
    b174:	012fff1e 	bxeq	lr
    b178:	eafffbc9 	b	a0a4 <CScreenDevice::InvertCursor() [clone .part.6]>

0000b17c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    b17c:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    b180:	e15c0001 	cmp	ip, r1
    b184:	912fff1e 	bxls	lr
    b188:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    b18c:	e15c0002 	cmp	ip, r2
    b190:	8590c020 	ldrhi	ip, [r0, #32]
    b194:	85900018 	ldrhi	r0, [r0, #24]
    b198:	8022129c 	mlahi	r2, ip, r2, r1
    b19c:	81a02082 	lslhi	r2, r2, #1
    b1a0:	818030b2 	strhhi	r3, [r0, r2]
    b1a4:	e12fff1e 	bx	lr

0000b1a8 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    b1a8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b1ac:	e1530001 	cmp	r3, r1
    b1b0:	9a000008 	bls	b1d8 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    b1b4:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    b1b8:	e1530002 	cmp	r3, r2
    b1bc:	9a000005 	bls	b1d8 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    b1c0:	e590c020 	ldr	ip, [r0, #32]
    b1c4:	e5903018 	ldr	r3, [r0, #24]
    b1c8:	e022129c 	mla	r2, ip, r2, r1
    b1cc:	e1a02082 	lsl	r2, r2, #1
    b1d0:	e19300b2 	ldrh	r0, [r3, r2]
    b1d4:	e12fff1e 	bx	lr
    b1d8:	e3a00000 	mov	r0, #0
    b1dc:	e12fff1e 	bx	lr

0000b1e0 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    b1e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b1e4:	e1a05000 	mov	r5, r0
    b1e8:	e24dd00c 	sub	sp, sp, #12
    b1ec:	e2800014 	add	r0, r0, #20
    b1f0:	e1a06002 	mov	r6, r2
    b1f4:	e1a04001 	mov	r4, r1
    b1f8:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    b1fc:	eb000012 	bl	b24c <CCharGenerator::GetCharWidth() const>
    b200:	e2044003 	and	r4, r4, #3
    b204:	e2061003 	and	r1, r6, #3
    b208:	e30e3828 	movw	r3, #59432	; 0xe828
    b20c:	e3403000 	movt	r3, #0
    b210:	e0831001 	add	r1, r3, r1
    b214:	e3a02b3e 	mov	r2, #63488	; 0xf800
    b218:	e3a03000 	mov	r3, #0
    b21c:	e58d2000 	str	r2, [sp]
    b220:	e1d111dc 	ldrsb	r1, [r1, #28]
    b224:	e0240094 	mla	r4, r4, r0, r0
    b228:	e1a00005 	mov	r0, r5
    b22c:	e0472004 	sub	r2, r7, r4
    b230:	ebfffd50 	bl	a778 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    b234:	e28dd00c 	add	sp, sp, #12
    b238:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000b23c <CCharGenerator::CCharGenerator()>:
    b23c:	e3a03008 	mov	r3, #8
    b240:	e5803000 	str	r3, [r0]
    b244:	e12fff1e 	bx	lr

0000b248 <CCharGenerator::~CCharGenerator()>:
    b248:	e12fff1e 	bx	lr

0000b24c <CCharGenerator::GetCharWidth() const>:
    b24c:	e5900000 	ldr	r0, [r0]
    b250:	e12fff1e 	bx	lr

0000b254 <CCharGenerator::GetCharHeight() const>:
    b254:	e3a00013 	mov	r0, #19
    b258:	e12fff1e 	bx	lr

0000b25c <CCharGenerator::GetUnderline() const>:
    b25c:	e3a00010 	mov	r0, #16
    b260:	e12fff1e 	bx	lr

0000b264 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    b264:	e6ef1071 	uxtb	r1, r1
    b268:	e2411021 	sub	r1, r1, #33	; 0x21
    b26c:	e353000f 	cmp	r3, #15
    b270:	935100de 	cmpls	r1, #222	; 0xde
    b274:	8a000008 	bhi	b29c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x38>
    b278:	e30e084c 	movw	r0, #59468	; 0xe84c
    b27c:	e3400000 	movt	r0, #0
    b280:	e0801201 	add	r1, r0, r1, lsl #4
    b284:	e3a00080 	mov	r0, #128	; 0x80
    b288:	e7d13003 	ldrb	r3, [r1, r3]
    b28c:	e0133250 	ands	r3, r3, r0, asr r2
    b290:	13a00001 	movne	r0, #1
    b294:	03a00000 	moveq	r0, #0
    b298:	e12fff1e 	bx	lr
    b29c:	e3a00000 	mov	r0, #0
    b2a0:	e12fff1e 	bx	lr

0000b2a4 <CDeviceNameService::CDeviceNameService()>:
    b2a4:	e30f3c3c 	movw	r3, #64572	; 0xfc3c
    b2a8:	e3403000 	movt	r3, #0
    b2ac:	e3a01000 	mov	r1, #0
    b2b0:	e5801000 	str	r1, [r0]
    b2b4:	e5801004 	str	r1, [r0, #4]
    b2b8:	e5830000 	str	r0, [r3]
    b2bc:	e12fff1e 	bx	lr

0000b2c0 <CDeviceNameService::~CDeviceNameService()>:
    b2c0:	e5903000 	ldr	r3, [r0]
    b2c4:	e92d4070 	push	{r4, r5, r6, lr}
    b2c8:	e3530000 	cmp	r3, #0
    b2cc:	e1a05000 	mov	r5, r0
    b2d0:	0a00000e 	beq	b310 <CDeviceNameService::~CDeviceNameService()+0x50>
    b2d4:	e3a06000 	mov	r6, #0
    b2d8:	e5930004 	ldr	r0, [r3, #4]
    b2dc:	e5934000 	ldr	r4, [r3]
    b2e0:	e3500000 	cmp	r0, #0
    b2e4:	0a000000 	beq	b2ec <CDeviceNameService::~CDeviceNameService()+0x2c>
    b2e8:	ebfff6e0 	bl	8e70 <operator delete[](void*)>
    b2ec:	e5953000 	ldr	r3, [r5]
    b2f0:	e3a01010 	mov	r1, #16
    b2f4:	e5836004 	str	r6, [r3, #4]
    b2f8:	e1a00003 	mov	r0, r3
    b2fc:	e5836008 	str	r6, [r3, #8]
    b300:	ebfff6db 	bl	8e74 <operator delete(void*, unsigned int)>
    b304:	e2543000 	subs	r3, r4, #0
    b308:	e5854000 	str	r4, [r5]
    b30c:	1afffff1 	bne	b2d8 <CDeviceNameService::~CDeviceNameService()+0x18>
    b310:	e30f3c3c 	movw	r3, #64572	; 0xfc3c
    b314:	e3403000 	movt	r3, #0
    b318:	e3a02000 	mov	r2, #0
    b31c:	e1a00005 	mov	r0, r5
    b320:	e5832000 	str	r2, [r3]
    b324:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b328 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    b328:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b32c:	e1a05000 	mov	r5, r0
    b330:	e5900004 	ldr	r0, [r0, #4]
    b334:	e1a06001 	mov	r6, r1
    b338:	e1a08002 	mov	r8, r2
    b33c:	e1a07003 	mov	r7, r3
    b340:	e3500000 	cmp	r0, #0
    b344:	1a000013 	bne	b398 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x70>
    b348:	e3a00010 	mov	r0, #16
    b34c:	ebfff6c4 	bl	8e64 <operator new(unsigned int)>
    b350:	e1a04000 	mov	r4, r0
    b354:	e1a00006 	mov	r0, r6
    b358:	eb0009d6 	bl	dab8 <strlen>
    b35c:	e2800001 	add	r0, r0, #1
    b360:	ebfff6c0 	bl	8e68 <operator new[](unsigned int)>
    b364:	e1a01006 	mov	r1, r6
    b368:	e5840004 	str	r0, [r4, #4]
    b36c:	eb0009f6 	bl	db4c <strcpy>
    b370:	e5952004 	ldr	r2, [r5, #4]
    b374:	e5953000 	ldr	r3, [r5]
    b378:	e3520000 	cmp	r2, #0
    b37c:	e5848008 	str	r8, [r4, #8]
    b380:	e584700c 	str	r7, [r4, #12]
    b384:	e5843000 	str	r3, [r4]
    b388:	e5854000 	str	r4, [r5]
    b38c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b390:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b394:	eafff6c6 	b	8eb4 <LeaveCritical>
    b398:	ebfff6b7 	bl	8e7c <EnterCritical>
    b39c:	eaffffe9 	b	b348 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>

0000b3a0 <CDeviceNameService::GetDevice(char const*, int)>:
    b3a0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b3a4:	e1a07000 	mov	r7, r0
    b3a8:	e5900004 	ldr	r0, [r0, #4]
    b3ac:	e24dd00c 	sub	sp, sp, #12
    b3b0:	e1a05001 	mov	r5, r1
    b3b4:	e1a06002 	mov	r6, r2
    b3b8:	e3500000 	cmp	r0, #0
    b3bc:	1a000017 	bne	b420 <CDeviceNameService::GetDevice(char const*, int)+0x80>
    b3c0:	e5974000 	ldr	r4, [r7]
    b3c4:	e3540000 	cmp	r4, #0
    b3c8:	1a000003 	bne	b3dc <CDeviceNameService::GetDevice(char const*, int)+0x3c>
    b3cc:	ea00001b 	b	b440 <CDeviceNameService::GetDevice(char const*, int)+0xa0>
    b3d0:	e5944000 	ldr	r4, [r4]
    b3d4:	e3540000 	cmp	r4, #0
    b3d8:	0a000014 	beq	b430 <CDeviceNameService::GetDevice(char const*, int)+0x90>
    b3dc:	e5941004 	ldr	r1, [r4, #4]
    b3e0:	e1a00005 	mov	r0, r5
    b3e4:	eb0009bd 	bl	dae0 <strcmp>
    b3e8:	e3500000 	cmp	r0, #0
    b3ec:	1afffff7 	bne	b3d0 <CDeviceNameService::GetDevice(char const*, int)+0x30>
    b3f0:	e594300c 	ldr	r3, [r4, #12]
    b3f4:	e1530006 	cmp	r3, r6
    b3f8:	1afffff4 	bne	b3d0 <CDeviceNameService::GetDevice(char const*, int)+0x30>
    b3fc:	e5973004 	ldr	r3, [r7, #4]
    b400:	e5940008 	ldr	r0, [r4, #8]
    b404:	e3530000 	cmp	r3, #0
    b408:	0a00000d 	beq	b444 <CDeviceNameService::GetDevice(char const*, int)+0xa4>
    b40c:	e58d0004 	str	r0, [sp, #4]
    b410:	ebfff6a7 	bl	8eb4 <LeaveCritical>
    b414:	e59d0004 	ldr	r0, [sp, #4]
    b418:	e28dd00c 	add	sp, sp, #12
    b41c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b420:	ebfff695 	bl	8e7c <EnterCritical>
    b424:	e5974000 	ldr	r4, [r7]
    b428:	e3540000 	cmp	r4, #0
    b42c:	1affffea 	bne	b3dc <CDeviceNameService::GetDevice(char const*, int)+0x3c>
    b430:	e5973004 	ldr	r3, [r7, #4]
    b434:	e3530000 	cmp	r3, #0
    b438:	0a000000 	beq	b440 <CDeviceNameService::GetDevice(char const*, int)+0xa0>
    b43c:	ebfff69c 	bl	8eb4 <LeaveCritical>
    b440:	e3a00000 	mov	r0, #0
    b444:	e28dd00c 	add	sp, sp, #12
    b448:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000b44c <CDeviceNameService::Get()>:
    b44c:	e30f3c3c 	movw	r3, #64572	; 0xfc3c
    b450:	e3403000 	movt	r3, #0
    b454:	e5930000 	ldr	r0, [r3]
    b458:	e12fff1e 	bx	lr

0000b45c <CLogger::CLogger(unsigned int, CTimer*)>:
    b45c:	e92d4010 	push	{r4, lr}
    b460:	e1a04000 	mov	r4, r0
    b464:	e5801000 	str	r1, [r0]
    b468:	e3a03000 	mov	r3, #0
    b46c:	e5802004 	str	r2, [r0, #4]
    b470:	e3a0c001 	mov	ip, #1
    b474:	e5843008 	str	r3, [r4, #8]
    b478:	e3a00901 	mov	r0, #16384	; 0x4000
    b47c:	e584300c 	str	r3, [r4, #12]
    b480:	e5843010 	str	r3, [r4, #16]
    b484:	e5843014 	str	r3, [r4, #20]
    b488:	e584c018 	str	ip, [r4, #24]
    b48c:	ebfff675 	bl	8e68 <operator new[](unsigned int)>
    b490:	e30f3c40 	movw	r3, #64576	; 0xfc40
    b494:	e3403000 	movt	r3, #0
    b498:	e5834000 	str	r4, [r3]
    b49c:	e584000c 	str	r0, [r4, #12]
    b4a0:	e1a00004 	mov	r0, r4
    b4a4:	e8bd8010 	pop	{r4, pc}

0000b4a8 <CLogger::~CLogger()>:
    b4a8:	e92d4010 	push	{r4, lr}
    b4ac:	e1a04000 	mov	r4, r0
    b4b0:	e590000c 	ldr	r0, [r0, #12]
    b4b4:	e3a02000 	mov	r2, #0
    b4b8:	e30f3c40 	movw	r3, #64576	; 0xfc40
    b4bc:	e3403000 	movt	r3, #0
    b4c0:	e1500002 	cmp	r0, r2
    b4c4:	e5832000 	str	r2, [r3]
    b4c8:	0a000000 	beq	b4d0 <CLogger::~CLogger()+0x28>
    b4cc:	ebfff667 	bl	8e70 <operator delete[](void*)>
    b4d0:	e1a00004 	mov	r0, r4
    b4d4:	e8bd8010 	pop	{r4, pc}

0000b4d8 <CLogger::Get()>:
    b4d8:	e30f3c40 	movw	r3, #64576	; 0xfc40
    b4dc:	e3403000 	movt	r3, #0
    b4e0:	e5930000 	ldr	r0, [r3]
    b4e4:	e12fff1e 	bx	lr

0000b4e8 <CLogger::Write(char const*)>:
    b4e8:	e92d4070 	push	{r4, r5, r6, lr}
    b4ec:	e1a04000 	mov	r4, r0
    b4f0:	e1a00001 	mov	r0, r1
    b4f4:	e1a05001 	mov	r5, r1
    b4f8:	eb00096e 	bl	dab8 <strlen>
    b4fc:	e1a01005 	mov	r1, r5
    b500:	e1a06000 	mov	r6, r0
    b504:	e5940008 	ldr	r0, [r4, #8]
    b508:	e1a02006 	mov	r2, r6
    b50c:	e5903000 	ldr	r3, [r0]
    b510:	e593300c 	ldr	r3, [r3, #12]
    b514:	e12fff33 	blx	r3
    b518:	e5940018 	ldr	r0, [r4, #24]
    b51c:	e3500000 	cmp	r0, #0
    b520:	1a000017 	bne	b584 <CLogger::Write(char const*)+0x9c>
    b524:	e0850006 	add	r0, r5, r6
    b528:	e1550000 	cmp	r5, r0
    b52c:	0a00000f 	beq	b570 <CLogger::Write(char const*)+0x88>
    b530:	e0d530d1 	ldrsb	r3, [r5], #1
    b534:	e353000d 	cmp	r3, #13
    b538:	0afffffa 	beq	b528 <CLogger::Write(char const*)+0x40>
    b53c:	e5941010 	ldr	r1, [r4, #16]
    b540:	e594c00c 	ldr	ip, [r4, #12]
    b544:	e7cc3001 	strb	r3, [ip, r1]
    b548:	e5943010 	ldr	r3, [r4, #16]
    b54c:	e5941014 	ldr	r1, [r4, #20]
    b550:	e2833001 	add	r3, r3, #1
    b554:	e7ed3053 	ubfx	r3, r3, #0, #14
    b558:	e5843010 	str	r3, [r4, #16]
    b55c:	e1530001 	cmp	r3, r1
    b560:	1afffff0 	bne	b528 <CLogger::Write(char const*)+0x40>
    b564:	e2433001 	sub	r3, r3, #1
    b568:	e7ed3053 	ubfx	r3, r3, #0, #14
    b56c:	e5843010 	str	r3, [r4, #16]
    b570:	e5943018 	ldr	r3, [r4, #24]
    b574:	e3530000 	cmp	r3, #0
    b578:	08bd8070 	popeq	{r4, r5, r6, pc}
    b57c:	e8bd4070 	pop	{r4, r5, r6, lr}
    b580:	eafff64b 	b	8eb4 <LeaveCritical>
    b584:	ebfff63c 	bl	8e7c <EnterCritical>
    b588:	eaffffe5 	b	b524 <CLogger::Write(char const*)+0x3c>

0000b58c <CLogger::Read(void*, unsigned int)>:
    b58c:	e92d4070 	push	{r4, r5, r6, lr}
    b590:	e1a04000 	mov	r4, r0
    b594:	e5900018 	ldr	r0, [r0, #24]
    b598:	e1a05001 	mov	r5, r1
    b59c:	e1a06002 	mov	r6, r2
    b5a0:	e3500000 	cmp	r0, #0
    b5a4:	1a00001b 	bne	b618 <CLogger::Read(void*, unsigned int)+0x8c>
    b5a8:	e5942010 	ldr	r2, [r4, #16]
    b5ac:	e5943014 	ldr	r3, [r4, #20]
    b5b0:	e1520003 	cmp	r2, r3
    b5b4:	0a000020 	beq	b63c <CLogger::Read(void*, unsigned int)+0xb0>
    b5b8:	e1a01005 	mov	r1, r5
    b5bc:	e3a05000 	mov	r5, #0
    b5c0:	ea00000a 	b	b5f0 <CLogger::Read(void*, unsigned int)+0x64>
    b5c4:	e594000c 	ldr	r0, [r4, #12]
    b5c8:	e2855001 	add	r5, r5, #1
    b5cc:	e19030d3 	ldrsb	r3, [r0, r3]
    b5d0:	e4c13001 	strb	r3, [r1], #1
    b5d4:	e5943014 	ldr	r3, [r4, #20]
    b5d8:	e5940010 	ldr	r0, [r4, #16]
    b5dc:	e2833001 	add	r3, r3, #1
    b5e0:	e7ed3053 	ubfx	r3, r3, #0, #14
    b5e4:	e5843014 	str	r3, [r4, #20]
    b5e8:	e1530000 	cmp	r3, r0
    b5ec:	0a000001 	beq	b5f8 <CLogger::Read(void*, unsigned int)+0x6c>
    b5f0:	e1550006 	cmp	r5, r6
    b5f4:	1afffff2 	bne	b5c4 <CLogger::Read(void*, unsigned int)+0x38>
    b5f8:	e5943018 	ldr	r3, [r4, #24]
    b5fc:	e3530000 	cmp	r3, #0
    b600:	1a000001 	bne	b60c <CLogger::Read(void*, unsigned int)+0x80>
    b604:	e1a00005 	mov	r0, r5
    b608:	e8bd8070 	pop	{r4, r5, r6, pc}
    b60c:	ebfff628 	bl	8eb4 <LeaveCritical>
    b610:	e1a00005 	mov	r0, r5
    b614:	e8bd8070 	pop	{r4, r5, r6, pc}
    b618:	ebfff617 	bl	8e7c <EnterCritical>
    b61c:	e5942010 	ldr	r2, [r4, #16]
    b620:	e5943014 	ldr	r3, [r4, #20]
    b624:	e1520003 	cmp	r2, r3
    b628:	1affffe2 	bne	b5b8 <CLogger::Read(void*, unsigned int)+0x2c>
    b62c:	e5943018 	ldr	r3, [r4, #24]
    b630:	e3530000 	cmp	r3, #0
    b634:	0a000000 	beq	b63c <CLogger::Read(void*, unsigned int)+0xb0>
    b638:	ebfff61d 	bl	8eb4 <LeaveCritical>
    b63c:	e3e05000 	mvn	r5, #0
    b640:	e1a00005 	mov	r0, r5
    b644:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b648 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    b648:	e590c000 	ldr	ip, [r0]
    b64c:	e152000c 	cmp	r2, ip
    b650:	812fff1e 	bxhi	lr
    b654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b658:	e24dd020 	sub	sp, sp, #32
    b65c:	e1a04000 	mov	r4, r0
    b660:	e1a05002 	mov	r5, r2
    b664:	e1a0000d 	mov	r0, sp
    b668:	e1a07003 	mov	r7, r3
    b66c:	e1a06001 	mov	r6, r1
    b670:	eb0000c5 	bl	b98c <CString::CString()>
    b674:	e3550000 	cmp	r5, #0
    b678:	0a000049 	beq	b7a4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    b67c:	e5940004 	ldr	r0, [r4, #4]
    b680:	e3500000 	cmp	r0, #0
    b684:	0a000032 	beq	b754 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    b688:	ebfff6c4 	bl	91a0 <CTimer::GetTimeString()>
    b68c:	e2508000 	subs	r8, r0, #0
    b690:	0a00000b 	beq	b6c4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    b694:	eb0000d3 	bl	b9e8 <CString::operator char const*() const>
    b698:	e1a01000 	mov	r1, r0
    b69c:	e1a0000d 	mov	r0, sp
    b6a0:	eb0000eb 	bl	ba54 <CString::Append(char const*)>
    b6a4:	e1a0000d 	mov	r0, sp
    b6a8:	e30f1644 	movw	r1, #63044	; 0xf644
    b6ac:	e3401000 	movt	r1, #0
    b6b0:	eb0000e7 	bl	ba54 <CString::Append(char const*)>
    b6b4:	e5983000 	ldr	r3, [r8]
    b6b8:	e1a00008 	mov	r0, r8
    b6bc:	e5933004 	ldr	r3, [r3, #4]
    b6c0:	e12fff33 	blx	r3
    b6c4:	e1a01006 	mov	r1, r6
    b6c8:	e1a0000d 	mov	r0, sp
    b6cc:	e28d6010 	add	r6, sp, #16
    b6d0:	eb0000df 	bl	ba54 <CString::Append(char const*)>
    b6d4:	e1a0000d 	mov	r0, sp
    b6d8:	e30f1648 	movw	r1, #63048	; 0xf648
    b6dc:	e3401000 	movt	r1, #0
    b6e0:	eb0000db 	bl	ba54 <CString::Append(char const*)>
    b6e4:	e1a00006 	mov	r0, r6
    b6e8:	eb0000a7 	bl	b98c <CString::CString()>
    b6ec:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    b6f0:	e1a01007 	mov	r1, r7
    b6f4:	e1a00006 	mov	r0, r6
    b6f8:	eb0001fa 	bl	bee8 <CString::FormatV(char const*, std::__va_list)>
    b6fc:	e1a00006 	mov	r0, r6
    b700:	eb0000b8 	bl	b9e8 <CString::operator char const*() const>
    b704:	e1a01000 	mov	r1, r0
    b708:	e1a0000d 	mov	r0, sp
    b70c:	eb0000d0 	bl	ba54 <CString::Append(char const*)>
    b710:	e3550000 	cmp	r5, #0
    b714:	0a00003c 	beq	b80c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    b718:	e1a0000d 	mov	r0, sp
    b71c:	e30f1654 	movw	r1, #63060	; 0xf654
    b720:	e3401000 	movt	r1, #0
    b724:	eb0000ca 	bl	ba54 <CString::Append(char const*)>
    b728:	e1a0000d 	mov	r0, sp
    b72c:	eb0000ad 	bl	b9e8 <CString::operator char const*() const>
    b730:	e1a01000 	mov	r1, r0
    b734:	e1a00004 	mov	r0, r4
    b738:	ebffff6a 	bl	b4e8 <CLogger::Write(char const*)>
    b73c:	e1a00006 	mov	r0, r6
    b740:	eb00005e 	bl	b8c0 <CString::~CString()>
    b744:	e1a0000d 	mov	r0, sp
    b748:	eb00005c 	bl	b8c0 <CString::~CString()>
    b74c:	e28dd020 	add	sp, sp, #32
    b750:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b754:	e1a01006 	mov	r1, r6
    b758:	e1a0000d 	mov	r0, sp
    b75c:	e28d6010 	add	r6, sp, #16
    b760:	eb0000bb 	bl	ba54 <CString::Append(char const*)>
    b764:	e1a0000d 	mov	r0, sp
    b768:	e30f1648 	movw	r1, #63048	; 0xf648
    b76c:	e3401000 	movt	r1, #0
    b770:	eb0000b7 	bl	ba54 <CString::Append(char const*)>
    b774:	e1a00006 	mov	r0, r6
    b778:	eb000083 	bl	b98c <CString::CString()>
    b77c:	e1a01007 	mov	r1, r7
    b780:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    b784:	e1a00006 	mov	r0, r6
    b788:	eb0001d6 	bl	bee8 <CString::FormatV(char const*, std::__va_list)>
    b78c:	e1a00006 	mov	r0, r6
    b790:	eb000094 	bl	b9e8 <CString::operator char const*() const>
    b794:	e1a01000 	mov	r1, r0
    b798:	e1a0000d 	mov	r0, sp
    b79c:	eb0000ac 	bl	ba54 <CString::Append(char const*)>
    b7a0:	eaffffdc 	b	b718 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    b7a4:	e30f163c 	movw	r1, #63036	; 0xf63c
    b7a8:	e1a0000d 	mov	r0, sp
    b7ac:	e3401000 	movt	r1, #0
    b7b0:	eb000092 	bl	ba00 <CString::operator=(char const*)>
    b7b4:	e5940004 	ldr	r0, [r4, #4]
    b7b8:	e3500000 	cmp	r0, #0
    b7bc:	1affffb1 	bne	b688 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    b7c0:	e1a01006 	mov	r1, r6
    b7c4:	e1a0000d 	mov	r0, sp
    b7c8:	e28d6010 	add	r6, sp, #16
    b7cc:	eb0000a0 	bl	ba54 <CString::Append(char const*)>
    b7d0:	e1a0000d 	mov	r0, sp
    b7d4:	e30f1648 	movw	r1, #63048	; 0xf648
    b7d8:	e3401000 	movt	r1, #0
    b7dc:	eb00009c 	bl	ba54 <CString::Append(char const*)>
    b7e0:	e1a00006 	mov	r0, r6
    b7e4:	eb000068 	bl	b98c <CString::CString()>
    b7e8:	e1a01007 	mov	r1, r7
    b7ec:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    b7f0:	e1a00006 	mov	r0, r6
    b7f4:	eb0001bb 	bl	bee8 <CString::FormatV(char const*, std::__va_list)>
    b7f8:	e1a00006 	mov	r0, r6
    b7fc:	eb000079 	bl	b9e8 <CString::operator char const*() const>
    b800:	e1a01000 	mov	r1, r0
    b804:	e1a0000d 	mov	r0, sp
    b808:	eb000091 	bl	ba54 <CString::Append(char const*)>
    b80c:	e1a0000d 	mov	r0, sp
    b810:	e30f164c 	movw	r1, #63052	; 0xf64c
    b814:	e3401000 	movt	r1, #0
    b818:	eb00008d 	bl	ba54 <CString::Append(char const*)>
    b81c:	e1a0000d 	mov	r0, sp
    b820:	e30f1654 	movw	r1, #63060	; 0xf654
    b824:	e3401000 	movt	r1, #0
    b828:	eb000089 	bl	ba54 <CString::Append(char const*)>
    b82c:	e1a0000d 	mov	r0, sp
    b830:	eb00006c 	bl	b9e8 <CString::operator char const*() const>
    b834:	e1a01000 	mov	r1, r0
    b838:	e1a00004 	mov	r0, r4
    b83c:	ebffff29 	bl	b4e8 <CLogger::Write(char const*)>
    b840:	ebfff5ae 	bl	8f00 <halt>
    b844:	eaffffbc 	b	b73c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000b848 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    b848:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    b84c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b850:	e24dd010 	sub	sp, sp, #16
    b854:	e28dc018 	add	ip, sp, #24
    b858:	e59d3014 	ldr	r3, [sp, #20]
    b85c:	e58dc000 	str	ip, [sp]
    b860:	e58dc00c 	str	ip, [sp, #12]
    b864:	ebffff77 	bl	b648 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    b868:	e28dd010 	add	sp, sp, #16
    b86c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b870:	e28dd004 	add	sp, sp, #4
    b874:	e12fff1e 	bx	lr

0000b878 <CLogger::Initialize(CDevice*)>:
    b878:	e92d4010 	push	{r4, lr}
    b87c:	e24dd008 	sub	sp, sp, #8
    b880:	e5801008 	str	r1, [r0, #8]
    b884:	e1a04000 	mov	r4, r0
    b888:	eb000633 	bl	d15c <CMachineInfo::Get()>
    b88c:	eb0005d5 	bl	cfe8 <CMachineInfo::GetMachineName() const>
    b890:	e3a02003 	mov	r2, #3
    b894:	e30f3658 	movw	r3, #63064	; 0xf658
    b898:	e30f1670 	movw	r1, #63088	; 0xf670
    b89c:	e3403000 	movt	r3, #0
    b8a0:	e3401000 	movt	r1, #0
    b8a4:	e58d0000 	str	r0, [sp]
    b8a8:	e1a00004 	mov	r0, r4
    b8ac:	ebffffe5 	bl	b848 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b8b0:	e3a00001 	mov	r0, #1
    b8b4:	e28dd008 	add	sp, sp, #8
    b8b8:	e8bd8010 	pop	{r4, pc}
    b8bc:	00000000 	andeq	r0, r0, r0

0000b8c0 <CString::~CString()>:
    b8c0:	e92d4010 	push	{r4, lr}
    b8c4:	e1a04000 	mov	r4, r0
    b8c8:	e5900004 	ldr	r0, [r0, #4]
    b8cc:	e59f3014 	ldr	r3, [pc, #20]	; b8e8 <CString::~CString()+0x28>
    b8d0:	e3500000 	cmp	r0, #0
    b8d4:	e5843000 	str	r3, [r4]
    b8d8:	0a000000 	beq	b8e0 <CString::~CString()+0x20>
    b8dc:	ebfff563 	bl	8e70 <operator delete[](void*)>
    b8e0:	e1a00004 	mov	r0, r4
    b8e4:	e8bd8010 	pop	{r4, pc}
    b8e8:	0000f680 	.word	0x0000f680

0000b8ec <CString::~CString()>:
    b8ec:	e92d4010 	push	{r4, lr}
    b8f0:	e1a04000 	mov	r4, r0
    b8f4:	e5900004 	ldr	r0, [r0, #4]
    b8f8:	e59f3020 	ldr	r3, [pc, #32]	; b920 <CString::~CString()+0x34>
    b8fc:	e3500000 	cmp	r0, #0
    b900:	e5843000 	str	r3, [r4]
    b904:	0a000000 	beq	b90c <CString::~CString()+0x20>
    b908:	ebfff558 	bl	8e70 <operator delete[](void*)>
    b90c:	e1a00004 	mov	r0, r4
    b910:	e3a01010 	mov	r1, #16
    b914:	ebfff556 	bl	8e74 <operator delete(void*, unsigned int)>
    b918:	e1a00004 	mov	r0, r4
    b91c:	e8bd8010 	pop	{r4, pc}
    b920:	0000f680 	.word	0x0000f680

0000b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    b924:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b928:	e990002c 	ldmib	r0, {r2, r3, r5}
    b92c:	e0455002 	sub	r5, r5, r2
    b930:	e0851001 	add	r1, r5, r1
    b934:	e2812001 	add	r2, r1, #1
    b938:	e1520003 	cmp	r2, r3
    b93c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    b940:	e2816041 	add	r6, r1, #65	; 0x41
    b944:	e1a04000 	mov	r4, r0
    b948:	e1a00006 	mov	r0, r6
    b94c:	ebfff545 	bl	8e68 <operator new[](unsigned int)>
    b950:	e594300c 	ldr	r3, [r4, #12]
    b954:	e3a02000 	mov	r2, #0
    b958:	e5c32000 	strb	r2, [r3]
    b95c:	e5941004 	ldr	r1, [r4, #4]
    b960:	e1a07000 	mov	r7, r0
    b964:	eb000878 	bl	db4c <strcpy>
    b968:	e5940004 	ldr	r0, [r4, #4]
    b96c:	e3500000 	cmp	r0, #0
    b970:	0a000000 	beq	b978 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    b974:	ebfff53d 	bl	8e70 <operator delete[](void*)>
    b978:	e0875005 	add	r5, r7, r5
    b97c:	e5847004 	str	r7, [r4, #4]
    b980:	e584500c 	str	r5, [r4, #12]
    b984:	e5846008 	str	r6, [r4, #8]
    b988:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b98c <CString::CString()>:
    b98c:	e59f1010 	ldr	r1, [pc, #16]	; b9a4 <CString::CString()+0x18>
    b990:	e3a02000 	mov	r2, #0
    b994:	e5802004 	str	r2, [r0, #4]
    b998:	e5802008 	str	r2, [r0, #8]
    b99c:	e5801000 	str	r1, [r0]
    b9a0:	e12fff1e 	bx	lr
    b9a4:	0000f680 	.word	0x0000f680

0000b9a8 <CString::CString(char const*)>:
    b9a8:	e59f3034 	ldr	r3, [pc, #52]	; b9e4 <CString::CString(char const*)+0x3c>
    b9ac:	e92d4070 	push	{r4, r5, r6, lr}
    b9b0:	e1a04000 	mov	r4, r0
    b9b4:	e5843000 	str	r3, [r4]
    b9b8:	e1a00001 	mov	r0, r1
    b9bc:	e1a05001 	mov	r5, r1
    b9c0:	eb00083c 	bl	dab8 <strlen>
    b9c4:	e2800001 	add	r0, r0, #1
    b9c8:	e5840008 	str	r0, [r4, #8]
    b9cc:	ebfff525 	bl	8e68 <operator new[](unsigned int)>
    b9d0:	e1a01005 	mov	r1, r5
    b9d4:	e5840004 	str	r0, [r4, #4]
    b9d8:	eb00085b 	bl	db4c <strcpy>
    b9dc:	e1a00004 	mov	r0, r4
    b9e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    b9e4:	0000f680 	.word	0x0000f680

0000b9e8 <CString::operator char const*() const>:
    b9e8:	e5900004 	ldr	r0, [r0, #4]
    b9ec:	e30f39f4 	movw	r3, #63988	; 0xf9f4
    b9f0:	e3403000 	movt	r3, #0
    b9f4:	e3500000 	cmp	r0, #0
    b9f8:	01a00003 	moveq	r0, r3
    b9fc:	e12fff1e 	bx	lr

0000ba00 <CString::operator=(char const*)>:
    ba00:	e92d4070 	push	{r4, r5, r6, lr}
    ba04:	e1a04000 	mov	r4, r0
    ba08:	e5900004 	ldr	r0, [r0, #4]
    ba0c:	e1a05001 	mov	r5, r1
    ba10:	e3500000 	cmp	r0, #0
    ba14:	0a000000 	beq	ba1c <CString::operator=(char const*)+0x1c>
    ba18:	ebfff514 	bl	8e70 <operator delete[](void*)>
    ba1c:	e1a00005 	mov	r0, r5
    ba20:	eb000824 	bl	dab8 <strlen>
    ba24:	e2800001 	add	r0, r0, #1
    ba28:	e5840008 	str	r0, [r4, #8]
    ba2c:	ebfff50d 	bl	8e68 <operator new[](unsigned int)>
    ba30:	e1a01005 	mov	r1, r5
    ba34:	e5840004 	str	r0, [r4, #4]
    ba38:	eb000843 	bl	db4c <strcpy>
    ba3c:	e5940004 	ldr	r0, [r4, #4]
    ba40:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ba44 <CString::GetLength() const>:
    ba44:	e5900004 	ldr	r0, [r0, #4]
    ba48:	e3500000 	cmp	r0, #0
    ba4c:	012fff1e 	bxeq	lr
    ba50:	ea000818 	b	dab8 <strlen>

0000ba54 <CString::Append(char const*)>:
    ba54:	e92d4070 	push	{r4, r5, r6, lr}
    ba58:	e1a04000 	mov	r4, r0
    ba5c:	e5900004 	ldr	r0, [r0, #4]
    ba60:	e3a03001 	mov	r3, #1
    ba64:	e1a06001 	mov	r6, r1
    ba68:	e5843008 	str	r3, [r4, #8]
    ba6c:	e3500000 	cmp	r0, #0
    ba70:	0a000003 	beq	ba84 <CString::Append(char const*)+0x30>
    ba74:	eb00080f 	bl	dab8 <strlen>
    ba78:	e5943008 	ldr	r3, [r4, #8]
    ba7c:	e0830000 	add	r0, r3, r0
    ba80:	e5840008 	str	r0, [r4, #8]
    ba84:	e1a00006 	mov	r0, r6
    ba88:	eb00080a 	bl	dab8 <strlen>
    ba8c:	e5943008 	ldr	r3, [r4, #8]
    ba90:	e0800003 	add	r0, r0, r3
    ba94:	e5840008 	str	r0, [r4, #8]
    ba98:	ebfff4f2 	bl	8e68 <operator new[](unsigned int)>
    ba9c:	e5941004 	ldr	r1, [r4, #4]
    baa0:	e3510000 	cmp	r1, #0
    baa4:	e1a05000 	mov	r5, r0
    baa8:	05c01000 	strbeq	r1, [r0]
    baac:	0a000004 	beq	bac4 <CString::Append(char const*)+0x70>
    bab0:	eb000825 	bl	db4c <strcpy>
    bab4:	e5940004 	ldr	r0, [r4, #4]
    bab8:	e3500000 	cmp	r0, #0
    babc:	0a000000 	beq	bac4 <CString::Append(char const*)+0x70>
    bac0:	ebfff4ea 	bl	8e70 <operator delete[](void*)>
    bac4:	e1a01006 	mov	r1, r6
    bac8:	e1a00005 	mov	r0, r5
    bacc:	eb00083c 	bl	dbc4 <strcat>
    bad0:	e5845004 	str	r5, [r4, #4]
    bad4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bad8 <CString::Compare(char const*) const>:
    bad8:	e5900004 	ldr	r0, [r0, #4]
    badc:	ea0007ff 	b	dae0 <strcmp>

0000bae0 <CString::Find(char) const>:
    bae0:	e5902004 	ldr	r2, [r0, #4]
    bae4:	e1d230d0 	ldrsb	r3, [r2]
    bae8:	e3530000 	cmp	r3, #0
    baec:	0a000009 	beq	bb18 <CString::Find(char) const+0x38>
    baf0:	e1510003 	cmp	r1, r3
    baf4:	e3a00000 	mov	r0, #0
    baf8:	1a000002 	bne	bb08 <CString::Find(char) const+0x28>
    bafc:	ea000007 	b	bb20 <CString::Find(char) const+0x40>
    bb00:	e1530001 	cmp	r3, r1
    bb04:	012fff1e 	bxeq	lr
    bb08:	e1f230d1 	ldrsb	r3, [r2, #1]!
    bb0c:	e2800001 	add	r0, r0, #1
    bb10:	e3530000 	cmp	r3, #0
    bb14:	1afffff9 	bne	bb00 <CString::Find(char) const+0x20>
    bb18:	e3e00000 	mvn	r0, #0
    bb1c:	e12fff1e 	bx	lr
    bb20:	e12fff1e 	bx	lr

0000bb24 <CString::PutChar(char, unsigned int)>:
    bb24:	e92d4070 	push	{r4, r5, r6, lr}
    bb28:	e2524000 	subs	r4, r2, #0
    bb2c:	08bd8070 	popeq	{r4, r5, r6, pc}
    bb30:	e1a06001 	mov	r6, r1
    bb34:	e1a01004 	mov	r1, r4
    bb38:	e1a05000 	mov	r5, r0
    bb3c:	ebffff78 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    bb40:	e2443001 	sub	r3, r4, #1
    bb44:	e595200c 	ldr	r2, [r5, #12]
    bb48:	e2433001 	sub	r3, r3, #1
    bb4c:	e3730001 	cmn	r3, #1
    bb50:	e2820001 	add	r0, r2, #1
    bb54:	e585000c 	str	r0, [r5, #12]
    bb58:	e5c26000 	strb	r6, [r2]
    bb5c:	1afffff8 	bne	bb44 <CString::PutChar(char, unsigned int)+0x20>
    bb60:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bb64 <CString::PutString(char const*)>:
    bb64:	e92d4070 	push	{r4, r5, r6, lr}
    bb68:	e1a04000 	mov	r4, r0
    bb6c:	e1a00001 	mov	r0, r1
    bb70:	e1a05001 	mov	r5, r1
    bb74:	eb0007cf 	bl	dab8 <strlen>
    bb78:	e2506000 	subs	r6, r0, #0
    bb7c:	0a000002 	beq	bb8c <CString::PutString(char const*)+0x28>
    bb80:	e1a01006 	mov	r1, r6
    bb84:	e1a00004 	mov	r0, r4
    bb88:	ebffff65 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    bb8c:	e1a01005 	mov	r1, r5
    bb90:	e594000c 	ldr	r0, [r4, #12]
    bb94:	eb0007ec 	bl	db4c <strcpy>
    bb98:	e594100c 	ldr	r1, [r4, #12]
    bb9c:	e0811006 	add	r1, r1, r6
    bba0:	e584100c 	str	r1, [r4, #12]
    bba4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bba8 <CString::ReserveSpace(unsigned int)>:
    bba8:	e3510000 	cmp	r1, #0
    bbac:	012fff1e 	bxeq	lr
    bbb0:	eaffff5b 	b	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000bbb4 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    bbb4:	e1510002 	cmp	r1, r2
    bbb8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bbbc:	e1a06001 	mov	r6, r1
    bbc0:	e1a08002 	mov	r8, r2
    bbc4:	e1a0a000 	mov	sl, r0
    bbc8:	e1a07003 	mov	r7, r3
    bbcc:	23a05001 	movcs	r5, #1
    bbd0:	3a000022 	bcc	bc60 <CString::ntoa(char*, unsigned long, unsigned int, int)+0xac>
    bbd4:	e0050598 	mul	r5, r8, r5
    bbd8:	e1a00006 	mov	r0, r6
    bbdc:	e1a01005 	mov	r1, r5
    bbe0:	ebfff426 	bl	8c80 <__aeabi_uidiv>
    bbe4:	e1500008 	cmp	r0, r8
    bbe8:	e1a04000 	mov	r4, r0
    bbec:	2afffff8 	bcs	bbd4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x20>
    bbf0:	e3570000 	cmp	r7, #0
    bbf4:	e1a0700a 	mov	r7, sl
    bbf8:	13a09037 	movne	r9, #55	; 0x37
    bbfc:	03a09057 	moveq	r9, #87	; 0x57
    bc00:	ea000001 	b	bc0c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x58>
    bc04:	ebfff41d 	bl	8c80 <__aeabi_uidiv>
    bc08:	e1a04000 	mov	r4, r0
    bc0c:	e1a00006 	mov	r0, r6
    bc10:	e1a01005 	mov	r1, r5
    bc14:	ebfff41d 	bl	8c90 <__aeabi_uidivmod>
    bc18:	e2877001 	add	r7, r7, #1
    bc1c:	e3540009 	cmp	r4, #9
    bc20:	e0893004 	add	r3, r9, r4
    bc24:	e2844030 	add	r4, r4, #48	; 0x30
    bc28:	e1a00005 	mov	r0, r5
    bc2c:	e6af3073 	sxtb	r3, r3
    bc30:	96af3074 	sxtbls	r3, r4
    bc34:	e5473001 	strb	r3, [r7, #-1]
    bc38:	e1a06001 	mov	r6, r1
    bc3c:	e1a01008 	mov	r1, r8
    bc40:	ebfff40e 	bl	8c80 <__aeabi_uidiv>
    bc44:	e2505000 	subs	r5, r0, #0
    bc48:	e1a00006 	mov	r0, r6
    bc4c:	e1a01005 	mov	r1, r5
    bc50:	1affffeb 	bne	bc04 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x50>
    bc54:	e5c75000 	strb	r5, [r7]
    bc58:	e1a0000a 	mov	r0, sl
    bc5c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    bc60:	e1a04001 	mov	r4, r1
    bc64:	e3a05001 	mov	r5, #1
    bc68:	eaffffe0 	b	bbf0 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x3c>

0000bc6c <CString::ftoa(char*, double, unsigned int)>:
    bc6c:	eeb50bc0 	vcmpe.f64	d0, #0.0
    bc70:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc74:	e1a08000 	mov	r8, r0
    bc78:	ed2d8b02 	vpush	{d8}
    bc7c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    bc80:	43a0302d 	movmi	r3, #45	; 0x2d
    bc84:	42809001 	addmi	r9, r0, #1
    bc88:	45c03000 	strbmi	r3, [r0]
    bc8c:	eeb08b40 	vmov.f64	d8, d0
    bc90:	51a09000 	movpl	r9, r0
    bc94:	eddf0b91 	vldr	d16, [pc, #580]	; bee0 <CString::ftoa(char*, double, unsigned int)+0x274>
    bc98:	e24dd01c 	sub	sp, sp, #28
    bc9c:	e58d1004 	str	r1, [sp, #4]
    bca0:	4eb18b40 	vnegmi.f64	d8, d0
    bca4:	eeb48be0 	vcmpe.f64	d8, d16
    bca8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    bcac:	ca00007b 	bgt	bea0 <CString::ftoa(char*, double, unsigned int)+0x234>
    bcb0:	eefc7bc8 	vcvt.u32.f64	s15, d8
    bcb4:	ee175a90 	vmov	r5, s15
    bcb8:	e3550009 	cmp	r5, #9
    bcbc:	83a07001 	movhi	r7, #1
    bcc0:	83a0400a 	movhi	r4, #10
    bcc4:	9a00007d 	bls	bec0 <CString::ftoa(char*, double, unsigned int)+0x254>
    bcc8:	e0070794 	mul	r7, r4, r7
    bccc:	e1a00005 	mov	r0, r5
    bcd0:	e1a01007 	mov	r1, r7
    bcd4:	ebfff3e9 	bl	8c80 <__aeabi_uidiv>
    bcd8:	e3500009 	cmp	r0, #9
    bcdc:	e1a0a000 	mov	sl, r0
    bce0:	8afffff8 	bhi	bcc8 <CString::ftoa(char*, double, unsigned int)+0x5c>
    bce4:	e30c6ccd 	movw	r6, #52429	; 0xcccd
    bce8:	e1a04009 	mov	r4, r9
    bcec:	e34c6ccc 	movt	r6, #52428	; 0xcccc
    bcf0:	e1a0b005 	mov	fp, r5
    bcf4:	ea000001 	b	bd00 <CString::ftoa(char*, double, unsigned int)+0x94>
    bcf8:	ebfff3e0 	bl	8c80 <__aeabi_uidiv>
    bcfc:	e1a0a000 	mov	sl, r0
    bd00:	e1a0000b 	mov	r0, fp
    bd04:	e1a01007 	mov	r1, r7
    bd08:	ebfff3e0 	bl	8c90 <__aeabi_uidivmod>
    bd0c:	e0832697 	umull	r2, r3, r7, r6
    bd10:	e35a0009 	cmp	sl, #9
    bd14:	e2844001 	add	r4, r4, #1
    bd18:	e1a0b001 	mov	fp, r1
    bd1c:	e28a1057 	add	r1, sl, #87	; 0x57
    bd20:	e28aa030 	add	sl, sl, #48	; 0x30
    bd24:	e1a0000b 	mov	r0, fp
    bd28:	e6af1071 	sxtb	r1, r1
    bd2c:	96af107a 	sxtbls	r1, sl
    bd30:	e1b071a3 	lsrs	r7, r3, #3
    bd34:	e5441001 	strb	r1, [r4, #-1]
    bd38:	e1a01007 	mov	r1, r7
    bd3c:	1affffed 	bne	bcf8 <CString::ftoa(char*, double, unsigned int)+0x8c>
    bd40:	e59d3004 	ldr	r3, [sp, #4]
    bd44:	e5c47000 	strb	r7, [r4]
    bd48:	e3530000 	cmp	r3, #0
    bd4c:	1a000003 	bne	bd60 <CString::ftoa(char*, double, unsigned int)+0xf4>
    bd50:	e1a00008 	mov	r0, r8
    bd54:	e28dd01c 	add	sp, sp, #28
    bd58:	ecbd8b02 	vpop	{d8}
    bd5c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd60:	e1a00009 	mov	r0, r9
    bd64:	eb000753 	bl	dab8 <strlen>
    bd68:	e59d3004 	ldr	r3, [sp, #4]
    bd6c:	e3530009 	cmp	r3, #9
    bd70:	31a07003 	movcc	r7, r3
    bd74:	23a07009 	movcs	r7, #9
    bd78:	e3570001 	cmp	r7, #1
    bd7c:	e3a0302e 	mov	r3, #46	; 0x2e
    bd80:	e0892000 	add	r2, r9, r0
    bd84:	e7c93000 	strb	r3, [r9, r0]
    bd88:	e58d2004 	str	r2, [sp, #4]
    bd8c:	e2829001 	add	r9, r2, #1
    bd90:	0a000050 	beq	bed8 <CString::ftoa(char*, double, unsigned int)+0x26c>
    bd94:	e3a0200a 	mov	r2, #10
    bd98:	e3a03002 	mov	r3, #2
    bd9c:	e1a01002 	mov	r1, r2
    bda0:	e2833001 	add	r3, r3, #1
    bda4:	e1530007 	cmp	r3, r7
    bda8:	e0020291 	mul	r2, r1, r2
    bdac:	9afffffb 	bls	bda0 <CString::ftoa(char*, double, unsigned int)+0x134>
    bdb0:	ee072a90 	vmov	s15, r2
    bdb4:	eef81b67 	vcvt.f64.u32	d17, s15
    bdb8:	ee075a90 	vmov	s15, r5
    bdbc:	eef80b67 	vcvt.f64.u32	d16, s15
    bdc0:	ee388b60 	vsub.f64	d8, d8, d16
    bdc4:	ee288b21 	vmul.f64	d8, d8, d17
    bdc8:	eefc7bc8 	vcvt.u32.f64	s15, d8
    bdcc:	ee17ba90 	vmov	fp, s15
    bdd0:	e35b0009 	cmp	fp, #9
    bdd4:	83a06001 	movhi	r6, #1
    bdd8:	83a0400a 	movhi	r4, #10
    bddc:	9a00003a 	bls	becc <CString::ftoa(char*, double, unsigned int)+0x260>
    bde0:	e0060694 	mul	r6, r4, r6
    bde4:	e1a0000b 	mov	r0, fp
    bde8:	e1a01006 	mov	r1, r6
    bdec:	ebfff3a3 	bl	8c80 <__aeabi_uidiv>
    bdf0:	e3500009 	cmp	r0, #9
    bdf4:	e1a0a000 	mov	sl, r0
    bdf8:	8afffff8 	bhi	bde0 <CString::ftoa(char*, double, unsigned int)+0x174>
    bdfc:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    be00:	e28d400c 	add	r4, sp, #12
    be04:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    be08:	ea000001 	b	be14 <CString::ftoa(char*, double, unsigned int)+0x1a8>
    be0c:	ebfff39b 	bl	8c80 <__aeabi_uidiv>
    be10:	e1a0a000 	mov	sl, r0
    be14:	e1a0000b 	mov	r0, fp
    be18:	e1a01006 	mov	r1, r6
    be1c:	ebfff39b 	bl	8c90 <__aeabi_uidivmod>
    be20:	e0832596 	umull	r2, r3, r6, r5
    be24:	e35a0009 	cmp	sl, #9
    be28:	e2844001 	add	r4, r4, #1
    be2c:	e1a0b001 	mov	fp, r1
    be30:	e28a1057 	add	r1, sl, #87	; 0x57
    be34:	e28aa030 	add	sl, sl, #48	; 0x30
    be38:	e1a0000b 	mov	r0, fp
    be3c:	e6af1071 	sxtb	r1, r1
    be40:	96af107a 	sxtbls	r1, sl
    be44:	e1b061a3 	lsrs	r6, r3, #3
    be48:	e5441001 	strb	r1, [r4, #-1]
    be4c:	e1a01006 	mov	r1, r6
    be50:	1affffed 	bne	be0c <CString::ftoa(char*, double, unsigned int)+0x1a0>
    be54:	e28d000c 	add	r0, sp, #12
    be58:	e5c46000 	strb	r6, [r4]
    be5c:	eb000715 	bl	dab8 <strlen>
    be60:	e0577000 	subs	r7, r7, r0
    be64:	0a000006 	beq	be84 <CString::ftoa(char*, double, unsigned int)+0x218>
    be68:	e59d6004 	ldr	r6, [sp, #4]
    be6c:	e3a03030 	mov	r3, #48	; 0x30
    be70:	e0862007 	add	r2, r6, r7
    be74:	e5e63001 	strb	r3, [r6, #1]!
    be78:	e1560002 	cmp	r6, r2
    be7c:	1afffffc 	bne	be74 <CString::ftoa(char*, double, unsigned int)+0x208>
    be80:	e0899007 	add	r9, r9, r7
    be84:	e28d100c 	add	r1, sp, #12
    be88:	e1a00009 	mov	r0, r9
    be8c:	eb00072e 	bl	db4c <strcpy>
    be90:	e1a00008 	mov	r0, r8
    be94:	e28dd01c 	add	sp, sp, #28
    be98:	ecbd8b02 	vpop	{d8}
    be9c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bea0:	e1a00009 	mov	r0, r9
    bea4:	e30f1688 	movw	r1, #63112	; 0xf688
    bea8:	e3401000 	movt	r1, #0
    beac:	eb000726 	bl	db4c <strcpy>
    beb0:	e1a00008 	mov	r0, r8
    beb4:	e28dd01c 	add	sp, sp, #28
    beb8:	ecbd8b02 	vpop	{d8}
    bebc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bec0:	ee17aa90 	vmov	sl, s15
    bec4:	e3a07001 	mov	r7, #1
    bec8:	eaffff85 	b	bce4 <CString::ftoa(char*, double, unsigned int)+0x78>
    becc:	ee17aa90 	vmov	sl, s15
    bed0:	e3a06001 	mov	r6, #1
    bed4:	eaffffc8 	b	bdfc <CString::ftoa(char*, double, unsigned int)+0x190>
    bed8:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    bedc:	eaffffb5 	b	bdb8 <CString::ftoa(char*, double, unsigned int)+0x14c>
    bee0:	ffe00000 	.word	0xffe00000
    bee4:	41efffff 	.word	0x41efffff

0000bee8 <CString::FormatV(char const*, std::__va_list)>:
    bee8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    beec:	e1a0b000 	mov	fp, r0
    bef0:	e5900004 	ldr	r0, [r0, #4]
    bef4:	e24dd034 	sub	sp, sp, #52	; 0x34
    bef8:	e1a05001 	mov	r5, r1
    befc:	e3500000 	cmp	r0, #0
    bf00:	e58d2000 	str	r2, [sp]
    bf04:	0a000000 	beq	bf0c <CString::FormatV(char const*, std::__va_list)+0x24>
    bf08:	ebfff3d8 	bl	8e70 <operator delete[](void*)>
    bf0c:	e3a00040 	mov	r0, #64	; 0x40
    bf10:	e58b0008 	str	r0, [fp, #8]
    bf14:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    bf18:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    bf1c:	e58d3014 	str	r3, [sp, #20]
    bf20:	ebfff3d0 	bl	8e68 <operator new[](unsigned int)>
    bf24:	e58b0004 	str	r0, [fp, #4]
    bf28:	e58b000c 	str	r0, [fp, #12]
    bf2c:	e1d540d0 	ldrsb	r4, [r5]
    bf30:	e3540000 	cmp	r4, #0
    bf34:	0a0000a2 	beq	c1c4 <CString::FormatV(char const*, std::__va_list)+0x2dc>
    bf38:	e3540025 	cmp	r4, #37	; 0x25
    bf3c:	13a01001 	movne	r1, #1
    bf40:	11a0000b 	movne	r0, fp
    bf44:	1a000156 	bne	c4a4 <CString::FormatV(char const*, std::__va_list)+0x5bc>
    bf48:	e1d560d1 	ldrsb	r6, [r5, #1]
    bf4c:	e3560025 	cmp	r6, #37	; 0x25
    bf50:	0a000169 	beq	c4fc <CString::FormatV(char const*, std::__va_list)+0x614>
    bf54:	e356002d 	cmp	r6, #45	; 0x2d
    bf58:	e3a04000 	mov	r4, #0
    bf5c:	12855001 	addne	r5, r5, #1
    bf60:	01d560d2 	ldrsbeq	r6, [r5, #2]
    bf64:	03a03001 	moveq	r3, #1
    bf68:	13a03000 	movne	r3, #0
    bf6c:	02855002 	addeq	r5, r5, #2
    bf70:	e3560030 	cmp	r6, #48	; 0x30
    bf74:	e58d3004 	str	r3, [sp, #4]
    bf78:	01d560d1 	ldrsbeq	r6, [r5, #1]
    bf7c:	03a03001 	moveq	r3, #1
    bf80:	13a03000 	movne	r3, #0
    bf84:	058d300c 	streq	r3, [sp, #12]
    bf88:	00855003 	addeq	r5, r5, r3
    bf8c:	158d300c 	strne	r3, [sp, #12]
    bf90:	e2463030 	sub	r3, r6, #48	; 0x30
    bf94:	e6ef3073 	uxtb	r3, r3
    bf98:	e3530009 	cmp	r3, #9
    bf9c:	8a000007 	bhi	bfc0 <CString::FormatV(char const*, std::__va_list)+0xd8>
    bfa0:	e3a0200a 	mov	r2, #10
    bfa4:	e0246492 	mla	r4, r2, r4, r6
    bfa8:	e1f560d1 	ldrsb	r6, [r5, #1]!
    bfac:	e2463030 	sub	r3, r6, #48	; 0x30
    bfb0:	e2444030 	sub	r4, r4, #48	; 0x30
    bfb4:	e6ef3073 	uxtb	r3, r3
    bfb8:	e3530009 	cmp	r3, #9
    bfbc:	9afffff8 	bls	bfa4 <CString::FormatV(char const*, std::__va_list)+0xbc>
    bfc0:	e356002e 	cmp	r6, #46	; 0x2e
    bfc4:	0a00013c 	beq	c4bc <CString::FormatV(char const*, std::__va_list)+0x5d4>
    bfc8:	e1d570d0 	ldrsb	r7, [r5]
    bfcc:	e3a01006 	mov	r1, #6
    bfd0:	e357006c 	cmp	r7, #108	; 0x6c
    bfd4:	01d570d1 	ldrsbeq	r7, [r5, #1]
    bfd8:	03a02001 	moveq	r2, #1
    bfdc:	13a02000 	movne	r2, #0
    bfe0:	00855002 	addeq	r5, r5, r2
    bfe4:	e2473058 	sub	r3, r7, #88	; 0x58
    bfe8:	e3530020 	cmp	r3, #32
    bfec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bff0:	ea000120 	b	c478 <CString::FormatV(char const*, std::__va_list)+0x590>
    bff4:	0000c3f4 	.word	0x0000c3f4
    bff8:	0000c478 	.word	0x0000c478
    bffc:	0000c478 	.word	0x0000c478
    c000:	0000c478 	.word	0x0000c478
    c004:	0000c478 	.word	0x0000c478
    c008:	0000c478 	.word	0x0000c478
    c00c:	0000c478 	.word	0x0000c478
    c010:	0000c478 	.word	0x0000c478
    c014:	0000c478 	.word	0x0000c478
    c018:	0000c478 	.word	0x0000c478
    c01c:	0000c478 	.word	0x0000c478
    c020:	0000c380 	.word	0x0000c380
    c024:	0000c254 	.word	0x0000c254
    c028:	0000c478 	.word	0x0000c478
    c02c:	0000c1d4 	.word	0x0000c1d4
    c030:	0000c478 	.word	0x0000c478
    c034:	0000c478 	.word	0x0000c478
    c038:	0000c478 	.word	0x0000c478
    c03c:	0000c478 	.word	0x0000c478
    c040:	0000c478 	.word	0x0000c478
    c044:	0000c478 	.word	0x0000c478
    c048:	0000c478 	.word	0x0000c478
    c04c:	0000c478 	.word	0x0000c478
    c050:	0000c078 	.word	0x0000c078
    c054:	0000c478 	.word	0x0000c478
    c058:	0000c478 	.word	0x0000c478
    c05c:	0000c478 	.word	0x0000c478
    c060:	0000c404 	.word	0x0000c404
    c064:	0000c478 	.word	0x0000c478
    c068:	0000c3fc 	.word	0x0000c3fc
    c06c:	0000c478 	.word	0x0000c478
    c070:	0000c478 	.word	0x0000c478
    c074:	0000c3f4 	.word	0x0000c3f4
    c078:	e3a08008 	mov	r8, #8
    c07c:	e59d3000 	ldr	r3, [sp]
    c080:	e2833004 	add	r3, r3, #4
    c084:	e5136004 	ldr	r6, [r3, #-4]
    c088:	e58d3000 	str	r3, [sp]
    c08c:	e1560008 	cmp	r6, r8
    c090:	23a0a001 	movcs	sl, #1
    c094:	3a000198 	bcc	c6fc <CString::FormatV(char const*, std::__va_list)+0x814>
    c098:	e00a0a98 	mul	sl, r8, sl
    c09c:	e1a00006 	mov	r0, r6
    c0a0:	e1a0100a 	mov	r1, sl
    c0a4:	ebfff2f5 	bl	8c80 <__aeabi_uidiv>
    c0a8:	e1580000 	cmp	r8, r0
    c0ac:	9afffff9 	bls	c098 <CString::FormatV(char const*, std::__va_list)+0x1b0>
    c0b0:	e1a09000 	mov	r9, r0
    c0b4:	e28d3018 	add	r3, sp, #24
    c0b8:	e3570058 	cmp	r7, #88	; 0x58
    c0bc:	e58d3008 	str	r3, [sp, #8]
    c0c0:	13a02057 	movne	r2, #87	; 0x57
    c0c4:	03a02037 	moveq	r2, #55	; 0x37
    c0c8:	e1a07003 	mov	r7, r3
    c0cc:	e1a03005 	mov	r3, r5
    c0d0:	e58d4010 	str	r4, [sp, #16]
    c0d4:	e1a0500a 	mov	r5, sl
    c0d8:	e1a04002 	mov	r4, r2
    c0dc:	e1a0a003 	mov	sl, r3
    c0e0:	ea000001 	b	c0ec <CString::FormatV(char const*, std::__va_list)+0x204>
    c0e4:	ebfff2e5 	bl	8c80 <__aeabi_uidiv>
    c0e8:	e1a09000 	mov	r9, r0
    c0ec:	e1a00006 	mov	r0, r6
    c0f0:	e1a01005 	mov	r1, r5
    c0f4:	ebfff2e5 	bl	8c90 <__aeabi_uidivmod>
    c0f8:	e2877001 	add	r7, r7, #1
    c0fc:	e3590009 	cmp	r9, #9
    c100:	e0842009 	add	r2, r4, r9
    c104:	e2899030 	add	r9, r9, #48	; 0x30
    c108:	e1a00005 	mov	r0, r5
    c10c:	e6af2072 	sxtb	r2, r2
    c110:	96af2079 	sxtbls	r2, r9
    c114:	e5472001 	strb	r2, [r7, #-1]
    c118:	e1a06001 	mov	r6, r1
    c11c:	e1a01008 	mov	r1, r8
    c120:	ebfff2d6 	bl	8c80 <__aeabi_uidiv>
    c124:	e2505000 	subs	r5, r0, #0
    c128:	e1a00006 	mov	r0, r6
    c12c:	e1a01005 	mov	r1, r5
    c130:	1affffeb 	bne	c0e4 <CString::FormatV(char const*, std::__va_list)+0x1fc>
    c134:	e1a0300a 	mov	r3, sl
    c138:	e59d0008 	ldr	r0, [sp, #8]
    c13c:	e5c71000 	strb	r1, [r7]
    c140:	e1a0a005 	mov	sl, r5
    c144:	e59d4010 	ldr	r4, [sp, #16]
    c148:	e1a05003 	mov	r5, r3
    c14c:	eb000659 	bl	dab8 <strlen>
    c150:	e59d3004 	ldr	r3, [sp, #4]
    c154:	e3530000 	cmp	r3, #0
    c158:	e1a06000 	mov	r6, r0
    c15c:	1a0000ef 	bne	c520 <CString::FormatV(char const*, std::__va_list)+0x638>
    c160:	e1500004 	cmp	r0, r4
    c164:	2a00000f 	bcs	c1a8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    c168:	e59d300c 	ldr	r3, [sp, #12]
    c16c:	e0444000 	sub	r4, r4, r0
    c170:	e1a0000b 	mov	r0, fp
    c174:	e3530000 	cmp	r3, #0
    c178:	e1a01004 	mov	r1, r4
    c17c:	03a06020 	moveq	r6, #32
    c180:	13a06030 	movne	r6, #48	; 0x30
    c184:	ebfffde6 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c188:	e2443001 	sub	r3, r4, #1
    c18c:	e59b200c 	ldr	r2, [fp, #12]
    c190:	e2433001 	sub	r3, r3, #1
    c194:	e3730001 	cmn	r3, #1
    c198:	e2821001 	add	r1, r2, #1
    c19c:	e58b100c 	str	r1, [fp, #12]
    c1a0:	e5c26000 	strb	r6, [r2]
    c1a4:	1afffff8 	bne	c18c <CString::FormatV(char const*, std::__va_list)+0x2a4>
    c1a8:	e59d1008 	ldr	r1, [sp, #8]
    c1ac:	e1a0000b 	mov	r0, fp
    c1b0:	ebfffe6b 	bl	bb64 <CString::PutString(char const*)>
    c1b4:	e2855001 	add	r5, r5, #1
    c1b8:	e1d540d0 	ldrsb	r4, [r5]
    c1bc:	e3540000 	cmp	r4, #0
    c1c0:	1affff5c 	bne	bf38 <CString::FormatV(char const*, std::__va_list)+0x50>
    c1c4:	e59b300c 	ldr	r3, [fp, #12]
    c1c8:	e5c34000 	strb	r4, [r3]
    c1cc:	e28dd034 	add	sp, sp, #52	; 0x34
    c1d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1d4:	e59d3000 	ldr	r3, [sp]
    c1d8:	e28d6018 	add	r6, sp, #24
    c1dc:	e58d6008 	str	r6, [sp, #8]
    c1e0:	e2833007 	add	r3, r3, #7
    c1e4:	e1a00006 	mov	r0, r6
    c1e8:	e3c33007 	bic	r3, r3, #7
    c1ec:	e2832008 	add	r2, r3, #8
    c1f0:	e58d2000 	str	r2, [sp]
    c1f4:	ed930b00 	vldr	d0, [r3]
    c1f8:	ebfffe9b 	bl	bc6c <CString::ftoa(char*, double, unsigned int)>
    c1fc:	e1a00006 	mov	r0, r6
    c200:	eb00062c 	bl	dab8 <strlen>
    c204:	e59d3004 	ldr	r3, [sp, #4]
    c208:	e3530000 	cmp	r3, #0
    c20c:	e1a06000 	mov	r6, r0
    c210:	1a000107 	bne	c634 <CString::FormatV(char const*, std::__va_list)+0x74c>
    c214:	e1500004 	cmp	r0, r4
    c218:	2affffe2 	bcs	c1a8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    c21c:	e0444000 	sub	r4, r4, r0
    c220:	e1a0000b 	mov	r0, fp
    c224:	e1a01004 	mov	r1, r4
    c228:	ebfffdbd 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c22c:	e2443001 	sub	r3, r4, #1
    c230:	e3a00020 	mov	r0, #32
    c234:	e59b200c 	ldr	r2, [fp, #12]
    c238:	e2433001 	sub	r3, r3, #1
    c23c:	e3730001 	cmn	r3, #1
    c240:	e2821001 	add	r1, r2, #1
    c244:	e58b100c 	str	r1, [fp, #12]
    c248:	e5c20000 	strb	r0, [r2]
    c24c:	1afffff8 	bne	c234 <CString::FormatV(char const*, std::__va_list)+0x34c>
    c250:	eaffffd4 	b	c1a8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    c254:	e59d3000 	ldr	r3, [sp]
    c258:	e2833004 	add	r3, r3, #4
    c25c:	e5137004 	ldr	r7, [r3, #-4]
    c260:	e58d3000 	str	r3, [sp]
    c264:	e3570000 	cmp	r7, #0
    c268:	b2677000 	rsblt	r7, r7, #0
    c26c:	b3a03001 	movlt	r3, #1
    c270:	a3a03000 	movge	r3, #0
    c274:	b58d300c 	strlt	r3, [sp, #12]
    c278:	e1a06007 	mov	r6, r7
    c27c:	a58d300c 	strge	r3, [sp, #12]
    c280:	e3570009 	cmp	r7, #9
    c284:	e58d3010 	str	r3, [sp, #16]
    c288:	c3a0a001 	movgt	sl, #1
    c28c:	c3a0900a 	movgt	r9, #10
    c290:	da000116 	ble	c6f0 <CString::FormatV(char const*, std::__va_list)+0x808>
    c294:	e00a0a99 	mul	sl, r9, sl
    c298:	e1a00007 	mov	r0, r7
    c29c:	e1a0100a 	mov	r1, sl
    c2a0:	ebfff276 	bl	8c80 <__aeabi_uidiv>
    c2a4:	e3500009 	cmp	r0, #9
    c2a8:	8afffff9 	bhi	c294 <CString::FormatV(char const*, std::__va_list)+0x3ac>
    c2ac:	e1a08000 	mov	r8, r0
    c2b0:	e28d7018 	add	r7, sp, #24
    c2b4:	e59d9014 	ldr	r9, [sp, #20]
    c2b8:	e58d7008 	str	r7, [sp, #8]
    c2bc:	ea000001 	b	c2c8 <CString::FormatV(char const*, std::__va_list)+0x3e0>
    c2c0:	ebfff26e 	bl	8c80 <__aeabi_uidiv>
    c2c4:	e1a08000 	mov	r8, r0
    c2c8:	e1a00006 	mov	r0, r6
    c2cc:	e1a0100a 	mov	r1, sl
    c2d0:	ebfff26e 	bl	8c90 <__aeabi_uidivmod>
    c2d4:	e083299a 	umull	r2, r3, sl, r9
    c2d8:	e3580009 	cmp	r8, #9
    c2dc:	e2877001 	add	r7, r7, #1
    c2e0:	e1a06001 	mov	r6, r1
    c2e4:	e2881057 	add	r1, r8, #87	; 0x57
    c2e8:	e2888030 	add	r8, r8, #48	; 0x30
    c2ec:	e1a00006 	mov	r0, r6
    c2f0:	e6af1071 	sxtb	r1, r1
    c2f4:	96af1078 	sxtbls	r1, r8
    c2f8:	e1b0a1a3 	lsrs	sl, r3, #3
    c2fc:	e5471001 	strb	r1, [r7, #-1]
    c300:	e1a0100a 	mov	r1, sl
    c304:	1affffed 	bne	c2c0 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    c308:	e59d0008 	ldr	r0, [sp, #8]
    c30c:	e5c7a000 	strb	sl, [r7]
    c310:	eb0005e8 	bl	dab8 <strlen>
    c314:	e59d3004 	ldr	r3, [sp, #4]
    c318:	e3530000 	cmp	r3, #0
    c31c:	e59d300c 	ldr	r3, [sp, #12]
    c320:	e0808003 	add	r8, r0, r3
    c324:	0a000090 	beq	c56c <CString::FormatV(char const*, std::__va_list)+0x684>
    c328:	e59d3010 	ldr	r3, [sp, #16]
    c32c:	e3530000 	cmp	r3, #0
    c330:	1a0000e5 	bne	c6cc <CString::FormatV(char const*, std::__va_list)+0x7e4>
    c334:	e59d1008 	ldr	r1, [sp, #8]
    c338:	e1a0000b 	mov	r0, fp
    c33c:	ebfffe08 	bl	bb64 <CString::PutString(char const*)>
    c340:	e1580004 	cmp	r8, r4
    c344:	2affff9a 	bcs	c1b4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    c348:	e0448008 	sub	r8, r4, r8
    c34c:	e1a0000b 	mov	r0, fp
    c350:	e1a01008 	mov	r1, r8
    c354:	ebfffd72 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c358:	e2483001 	sub	r3, r8, #1
    c35c:	e3a00020 	mov	r0, #32
    c360:	e59b200c 	ldr	r2, [fp, #12]
    c364:	e2433001 	sub	r3, r3, #1
    c368:	e3730001 	cmn	r3, #1
    c36c:	e2821001 	add	r1, r2, #1
    c370:	e58b100c 	str	r1, [fp, #12]
    c374:	e5c20000 	strb	r0, [r2]
    c378:	1afffff8 	bne	c360 <CString::FormatV(char const*, std::__va_list)+0x478>
    c37c:	eaffff8c 	b	c1b4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    c380:	e59d3004 	ldr	r3, [sp, #4]
    c384:	e3530000 	cmp	r3, #0
    c388:	e59d3000 	ldr	r3, [sp]
    c38c:	e2836004 	add	r6, r3, #4
    c390:	e1d370d0 	ldrsb	r7, [r3]
    c394:	1a00008f 	bne	c5d8 <CString::FormatV(char const*, std::__va_list)+0x6f0>
    c398:	e3540001 	cmp	r4, #1
    c39c:	9a00000b 	bls	c3d0 <CString::FormatV(char const*, std::__va_list)+0x4e8>
    c3a0:	e2441001 	sub	r1, r4, #1
    c3a4:	e1a0000b 	mov	r0, fp
    c3a8:	e2444002 	sub	r4, r4, #2
    c3ac:	ebfffd5c 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c3b0:	e3a01020 	mov	r1, #32
    c3b4:	e59b300c 	ldr	r3, [fp, #12]
    c3b8:	e2444001 	sub	r4, r4, #1
    c3bc:	e3740001 	cmn	r4, #1
    c3c0:	e2832001 	add	r2, r3, #1
    c3c4:	e58b200c 	str	r2, [fp, #12]
    c3c8:	e5c31000 	strb	r1, [r3]
    c3cc:	1afffff8 	bne	c3b4 <CString::FormatV(char const*, std::__va_list)+0x4cc>
    c3d0:	e3a01001 	mov	r1, #1
    c3d4:	e1a0000b 	mov	r0, fp
    c3d8:	ebfffd51 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c3dc:	e59b300c 	ldr	r3, [fp, #12]
    c3e0:	e58d6000 	str	r6, [sp]
    c3e4:	e2832001 	add	r2, r3, #1
    c3e8:	e58b200c 	str	r2, [fp, #12]
    c3ec:	e5c37000 	strb	r7, [r3]
    c3f0:	eaffff6f 	b	c1b4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    c3f4:	e3a08010 	mov	r8, #16
    c3f8:	eaffff1f 	b	c07c <CString::FormatV(char const*, std::__va_list)+0x194>
    c3fc:	e3a0800a 	mov	r8, #10
    c400:	eaffff1d 	b	c07c <CString::FormatV(char const*, std::__va_list)+0x194>
    c404:	e59d3000 	ldr	r3, [sp]
    c408:	e2836004 	add	r6, r3, #4
    c40c:	e5938000 	ldr	r8, [r3]
    c410:	e1a00008 	mov	r0, r8
    c414:	eb0005a7 	bl	dab8 <strlen>
    c418:	e59d3004 	ldr	r3, [sp, #4]
    c41c:	e3530000 	cmp	r3, #0
    c420:	e1a07000 	mov	r7, r0
    c424:	1a000095 	bne	c680 <CString::FormatV(char const*, std::__va_list)+0x798>
    c428:	e1500004 	cmp	r0, r4
    c42c:	2a00000c 	bcs	c464 <CString::FormatV(char const*, std::__va_list)+0x57c>
    c430:	e0444000 	sub	r4, r4, r0
    c434:	e1a0000b 	mov	r0, fp
    c438:	e1a01004 	mov	r1, r4
    c43c:	ebfffd38 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c440:	e2443001 	sub	r3, r4, #1
    c444:	e3a00020 	mov	r0, #32
    c448:	e59b200c 	ldr	r2, [fp, #12]
    c44c:	e2433001 	sub	r3, r3, #1
    c450:	e3730001 	cmn	r3, #1
    c454:	e2821001 	add	r1, r2, #1
    c458:	e58b100c 	str	r1, [fp, #12]
    c45c:	e5c20000 	strb	r0, [r2]
    c460:	1afffff8 	bne	c448 <CString::FormatV(char const*, std::__va_list)+0x560>
    c464:	e1a01008 	mov	r1, r8
    c468:	e1a0000b 	mov	r0, fp
    c46c:	e58d6000 	str	r6, [sp]
    c470:	ebfffdbb 	bl	bb64 <CString::PutString(char const*)>
    c474:	eaffff4e 	b	c1b4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    c478:	e3a01001 	mov	r1, #1
    c47c:	e1a0000b 	mov	r0, fp
    c480:	ebfffd27 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c484:	e59b300c 	ldr	r3, [fp, #12]
    c488:	e3a02025 	mov	r2, #37	; 0x25
    c48c:	e3a01001 	mov	r1, #1
    c490:	e0830001 	add	r0, r3, r1
    c494:	e58b000c 	str	r0, [fp, #12]
    c498:	e5c32000 	strb	r2, [r3]
    c49c:	e1a0000b 	mov	r0, fp
    c4a0:	e1d540d0 	ldrsb	r4, [r5]
    c4a4:	ebfffd1e 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c4a8:	e59b300c 	ldr	r3, [fp, #12]
    c4ac:	e2832001 	add	r2, r3, #1
    c4b0:	e58b200c 	str	r2, [fp, #12]
    c4b4:	e5c34000 	strb	r4, [r3]
    c4b8:	eaffff3d 	b	c1b4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    c4bc:	e1d570d1 	ldrsb	r7, [r5, #1]
    c4c0:	e3a01000 	mov	r1, #0
    c4c4:	e2855001 	add	r5, r5, #1
    c4c8:	e2473030 	sub	r3, r7, #48	; 0x30
    c4cc:	e6ef3073 	uxtb	r3, r3
    c4d0:	e3530009 	cmp	r3, #9
    c4d4:	8afffebd 	bhi	bfd0 <CString::FormatV(char const*, std::__va_list)+0xe8>
    c4d8:	e3a0200a 	mov	r2, #10
    c4dc:	e0217192 	mla	r1, r2, r1, r7
    c4e0:	e1f570d1 	ldrsb	r7, [r5, #1]!
    c4e4:	e2473030 	sub	r3, r7, #48	; 0x30
    c4e8:	e2411030 	sub	r1, r1, #48	; 0x30
    c4ec:	e6ef3073 	uxtb	r3, r3
    c4f0:	e3530009 	cmp	r3, #9
    c4f4:	9afffff8 	bls	c4dc <CString::FormatV(char const*, std::__va_list)+0x5f4>
    c4f8:	eafffeb4 	b	bfd0 <CString::FormatV(char const*, std::__va_list)+0xe8>
    c4fc:	e3a01001 	mov	r1, #1
    c500:	e1a0000b 	mov	r0, fp
    c504:	ebfffd06 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c508:	e59b300c 	ldr	r3, [fp, #12]
    c50c:	e2855002 	add	r5, r5, #2
    c510:	e2832001 	add	r2, r3, #1
    c514:	e58b200c 	str	r2, [fp, #12]
    c518:	e5c36000 	strb	r6, [r3]
    c51c:	eafffe82 	b	bf2c <CString::FormatV(char const*, std::__va_list)+0x44>
    c520:	e59d1008 	ldr	r1, [sp, #8]
    c524:	e1a0000b 	mov	r0, fp
    c528:	ebfffd8d 	bl	bb64 <CString::PutString(char const*)>
    c52c:	e1560004 	cmp	r6, r4
    c530:	2affff1f 	bcs	c1b4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    c534:	e0444006 	sub	r4, r4, r6
    c538:	e1a0000b 	mov	r0, fp
    c53c:	e1a01004 	mov	r1, r4
    c540:	ebfffcf7 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c544:	e2443001 	sub	r3, r4, #1
    c548:	e3a00020 	mov	r0, #32
    c54c:	e59b200c 	ldr	r2, [fp, #12]
    c550:	e2433001 	sub	r3, r3, #1
    c554:	e3730001 	cmn	r3, #1
    c558:	e2821001 	add	r1, r2, #1
    c55c:	e58b100c 	str	r1, [fp, #12]
    c560:	e5c20000 	strb	r0, [r2]
    c564:	1afffff8 	bne	c54c <CString::FormatV(char const*, std::__va_list)+0x664>
    c568:	eaffff11 	b	c1b4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    c56c:	e1580004 	cmp	r8, r4
    c570:	2a00000c 	bcs	c5a8 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    c574:	e0448008 	sub	r8, r4, r8
    c578:	e1a0000b 	mov	r0, fp
    c57c:	e1a01008 	mov	r1, r8
    c580:	ebfffce7 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c584:	e2483001 	sub	r3, r8, #1
    c588:	e3a00020 	mov	r0, #32
    c58c:	e59b200c 	ldr	r2, [fp, #12]
    c590:	e2433001 	sub	r3, r3, #1
    c594:	e3730001 	cmn	r3, #1
    c598:	e2821001 	add	r1, r2, #1
    c59c:	e58b100c 	str	r1, [fp, #12]
    c5a0:	e5c20000 	strb	r0, [r2]
    c5a4:	1afffff8 	bne	c58c <CString::FormatV(char const*, std::__va_list)+0x6a4>
    c5a8:	e59d3010 	ldr	r3, [sp, #16]
    c5ac:	e3530000 	cmp	r3, #0
    c5b0:	0afffefc 	beq	c1a8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    c5b4:	e3a01001 	mov	r1, #1
    c5b8:	e1a0000b 	mov	r0, fp
    c5bc:	ebfffcd8 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c5c0:	e59b300c 	ldr	r3, [fp, #12]
    c5c4:	e3a0202d 	mov	r2, #45	; 0x2d
    c5c8:	e2831001 	add	r1, r3, #1
    c5cc:	e58b100c 	str	r1, [fp, #12]
    c5d0:	e5c32000 	strb	r2, [r3]
    c5d4:	eafffef3 	b	c1a8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    c5d8:	e3a01001 	mov	r1, #1
    c5dc:	e1a0000b 	mov	r0, fp
    c5e0:	ebfffccf 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c5e4:	e59b300c 	ldr	r3, [fp, #12]
    c5e8:	e3540001 	cmp	r4, #1
    c5ec:	e2832001 	add	r2, r3, #1
    c5f0:	e58b200c 	str	r2, [fp, #12]
    c5f4:	e5c37000 	strb	r7, [r3]
    c5f8:	9a00000b 	bls	c62c <CString::FormatV(char const*, std::__va_list)+0x744>
    c5fc:	e2441001 	sub	r1, r4, #1
    c600:	e1a0000b 	mov	r0, fp
    c604:	e2444002 	sub	r4, r4, #2
    c608:	ebfffcc5 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c60c:	e3a01020 	mov	r1, #32
    c610:	e59b300c 	ldr	r3, [fp, #12]
    c614:	e2444001 	sub	r4, r4, #1
    c618:	e3740001 	cmn	r4, #1
    c61c:	e2832001 	add	r2, r3, #1
    c620:	e58b200c 	str	r2, [fp, #12]
    c624:	e5c31000 	strb	r1, [r3]
    c628:	1afffff8 	bne	c610 <CString::FormatV(char const*, std::__va_list)+0x728>
    c62c:	e58d6000 	str	r6, [sp]
    c630:	eafffedf 	b	c1b4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    c634:	e59d1008 	ldr	r1, [sp, #8]
    c638:	e1a0000b 	mov	r0, fp
    c63c:	ebfffd48 	bl	bb64 <CString::PutString(char const*)>
    c640:	e1560004 	cmp	r6, r4
    c644:	2afffeda 	bcs	c1b4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    c648:	e0444006 	sub	r4, r4, r6
    c64c:	e1a0000b 	mov	r0, fp
    c650:	e1a01004 	mov	r1, r4
    c654:	ebfffcb2 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c658:	e2443001 	sub	r3, r4, #1
    c65c:	e3a00020 	mov	r0, #32
    c660:	e59b200c 	ldr	r2, [fp, #12]
    c664:	e2433001 	sub	r3, r3, #1
    c668:	e3730001 	cmn	r3, #1
    c66c:	e2821001 	add	r1, r2, #1
    c670:	e58b100c 	str	r1, [fp, #12]
    c674:	e5c20000 	strb	r0, [r2]
    c678:	1afffff8 	bne	c660 <CString::FormatV(char const*, std::__va_list)+0x778>
    c67c:	eafffecc 	b	c1b4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    c680:	e1a01008 	mov	r1, r8
    c684:	e1a0000b 	mov	r0, fp
    c688:	ebfffd35 	bl	bb64 <CString::PutString(char const*)>
    c68c:	e1570004 	cmp	r7, r4
    c690:	2affffe5 	bcs	c62c <CString::FormatV(char const*, std::__va_list)+0x744>
    c694:	e0444007 	sub	r4, r4, r7
    c698:	e1a0000b 	mov	r0, fp
    c69c:	e1a01004 	mov	r1, r4
    c6a0:	ebfffc9f 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c6a4:	e2443001 	sub	r3, r4, #1
    c6a8:	e3a00020 	mov	r0, #32
    c6ac:	e59b200c 	ldr	r2, [fp, #12]
    c6b0:	e2433001 	sub	r3, r3, #1
    c6b4:	e3730001 	cmn	r3, #1
    c6b8:	e2821001 	add	r1, r2, #1
    c6bc:	e58b100c 	str	r1, [fp, #12]
    c6c0:	e5c20000 	strb	r0, [r2]
    c6c4:	1afffff8 	bne	c6ac <CString::FormatV(char const*, std::__va_list)+0x7c4>
    c6c8:	eaffffd7 	b	c62c <CString::FormatV(char const*, std::__va_list)+0x744>
    c6cc:	e3a01001 	mov	r1, #1
    c6d0:	e1a0000b 	mov	r0, fp
    c6d4:	ebfffc92 	bl	b924 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c6d8:	e59b300c 	ldr	r3, [fp, #12]
    c6dc:	e3a0202d 	mov	r2, #45	; 0x2d
    c6e0:	e2831001 	add	r1, r3, #1
    c6e4:	e58b100c 	str	r1, [fp, #12]
    c6e8:	e5c32000 	strb	r2, [r3]
    c6ec:	eaffff10 	b	c334 <CString::FormatV(char const*, std::__va_list)+0x44c>
    c6f0:	e1a08007 	mov	r8, r7
    c6f4:	e3a0a001 	mov	sl, #1
    c6f8:	eafffeec 	b	c2b0 <CString::FormatV(char const*, std::__va_list)+0x3c8>
    c6fc:	e1a09006 	mov	r9, r6
    c700:	e3a0a001 	mov	sl, #1
    c704:	eafffe6a 	b	c0b4 <CString::FormatV(char const*, std::__va_list)+0x1cc>

0000c708 <CString::Format(char const*, ...)>:
    c708:	e92d000e 	push	{r1, r2, r3}
    c70c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c710:	e24dd008 	sub	sp, sp, #8
    c714:	e28d2010 	add	r2, sp, #16
    c718:	e59d100c 	ldr	r1, [sp, #12]
    c71c:	e58d2004 	str	r2, [sp, #4]
    c720:	ebfffdf0 	bl	bee8 <CString::FormatV(char const*, std::__va_list)>
    c724:	e28dd008 	add	sp, sp, #8
    c728:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c72c:	e28dd00c 	add	sp, sp, #12
    c730:	e12fff1e 	bx	lr
    c734:	00000000 	andeq	r0, r0, r0

0000c738 <DelayLoop>:
    c738:	e2500001 	subs	r0, r0, #1
    c73c:	8afffffd 	bhi	c738 <DelayLoop>
    c740:	e1a0f00e 	mov	pc, lr

0000c744 <CInterruptSystem::CInterruptSystem()>:
    c744:	e2802f47 	add	r2, r0, #284	; 0x11c
    c748:	e1a0c000 	mov	ip, r0
    c74c:	e2403004 	sub	r3, r0, #4
    c750:	e3a01000 	mov	r1, #0
    c754:	e1a00002 	mov	r0, r2
    c758:	e5a31004 	str	r1, [r3, #4]!
    c75c:	e1530000 	cmp	r3, r0
    c760:	e5a21004 	str	r1, [r2, #4]!
    c764:	1afffffb 	bne	c758 <CInterruptSystem::CInterruptSystem()+0x14>
    c768:	e30f3c44 	movw	r3, #64580	; 0xfc44
    c76c:	e3403000 	movt	r3, #0
    c770:	e1a0000c 	mov	r0, ip
    c774:	e583c000 	str	ip, [r3]
    c778:	e12fff1e 	bx	lr

0000c77c <CInterruptSystem::~CInterruptSystem()>:
    c77c:	e30f3c44 	movw	r3, #64580	; 0xfc44
    c780:	e3403000 	movt	r3, #0
    c784:	e3a02000 	mov	r2, #0
    c788:	e5832000 	str	r2, [r3]
    c78c:	e12fff1e 	bx	lr

0000c790 <CInterruptSystem::Initialize()>:
    c790:	e59f2054 	ldr	r2, [pc, #84]	; c7ec <CInterruptSystem::Initialize()+0x5c>
    c794:	e59f3054 	ldr	r3, [pc, #84]	; c7f0 <CInterruptSystem::Initialize()+0x60>
    c798:	e92d4010 	push	{r4, lr}
    c79c:	e1a02142 	asr	r2, r2, #2
    c7a0:	e1a03143 	asr	r3, r3, #2
    c7a4:	e3a04000 	mov	r4, #0
    c7a8:	e2422002 	sub	r2, r2, #2
    c7ac:	e2433002 	sub	r3, r3, #2
    c7b0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    c7b4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    c7b8:	e5842018 	str	r2, [r4, #24]
    c7bc:	e584301c 	str	r3, [r4, #28]
    c7c0:	ebfff1c5 	bl	8edc <SyncDataAndInstructionCache>
    c7c4:	e3a03a0b 	mov	r3, #45056	; 0xb000
    c7c8:	e3433f00 	movt	r3, #16128	; 0x3f00
    c7cc:	e3e02000 	mvn	r2, #0
    c7d0:	e583420c 	str	r4, [r3, #524]	; 0x20c
    c7d4:	e583221c 	str	r2, [r3, #540]	; 0x21c
    c7d8:	e5832220 	str	r2, [r3, #544]	; 0x220
    c7dc:	e5832224 	str	r2, [r3, #548]	; 0x224
    c7e0:	f1080080 	cpsie	i
    c7e4:	e3a00001 	mov	r0, #1
    c7e8:	e8bd8010 	pop	{r4, pc}
    c7ec:	0000e4e4 	.word	0x0000e4e4
    c7f0:	0000e4f0 	.word	0x0000e4f0

0000c7f4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    c7f4:	e351001f 	cmp	r1, #31
    c7f8:	e080c101 	add	ip, r0, r1, lsl #2
    c7fc:	e7802101 	str	r2, [r0, r1, lsl #2]
    c800:	e58c3120 	str	r3, [ip, #288]	; 0x120
    c804:	930b3210 	movwls	r3, #45584	; 0xb210
    c808:	93433f00 	movtls	r3, #16128	; 0x3f00
    c80c:	9a000005 	bls	c828 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x34>
    c810:	e30b2214 	movw	r2, #45588	; 0xb214
    c814:	e351003f 	cmp	r1, #63	; 0x3f
    c818:	e3432f00 	movt	r2, #16128	; 0x3f00
    c81c:	e30b3218 	movw	r3, #45592	; 0xb218
    c820:	e3433f00 	movt	r3, #16128	; 0x3f00
    c824:	91a03002 	movls	r3, r2
    c828:	e201101f 	and	r1, r1, #31
    c82c:	e3a02001 	mov	r2, #1
    c830:	e1a01112 	lsl	r1, r2, r1
    c834:	e5831000 	str	r1, [r3]
    c838:	e12fff1e 	bx	lr

0000c83c <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    c83c:	e351001f 	cmp	r1, #31
    c840:	e92d4010 	push	{r4, lr}
    c844:	930b321c 	movwls	r3, #45596	; 0xb21c
    c848:	93433f00 	movtls	r3, #16128	; 0x3f00
    c84c:	9a000005 	bls	c868 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x2c>
    c850:	e30b2220 	movw	r2, #45600	; 0xb220
    c854:	e351003f 	cmp	r1, #63	; 0x3f
    c858:	e3432f00 	movt	r2, #16128	; 0x3f00
    c85c:	e30b3224 	movw	r3, #45604	; 0xb224
    c860:	e3433f00 	movt	r3, #16128	; 0x3f00
    c864:	91a03002 	movls	r3, r2
    c868:	e080e101 	add	lr, r0, r1, lsl #2
    c86c:	e201401f 	and	r4, r1, #31
    c870:	e3a02001 	mov	r2, #1
    c874:	e3a0c000 	mov	ip, #0
    c878:	e1a02412 	lsl	r2, r2, r4
    c87c:	e5832000 	str	r2, [r3]
    c880:	e780c101 	str	ip, [r0, r1, lsl #2]
    c884:	e58ec120 	str	ip, [lr, #288]	; 0x120
    c888:	e8bd8010 	pop	{r4, pc}

0000c88c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    c88c:	e30f0bcc 	movw	r0, #64460	; 0xfbcc
    c890:	e3a0ca0b 	mov	ip, #45056	; 0xb000
    c894:	e3400000 	movt	r0, #0
    c898:	e343cf00 	movt	ip, #16128	; 0x3f00
    c89c:	e3811080 	orr	r1, r1, #128	; 0x80
    c8a0:	e880000c 	stm	r0, {r2, r3}
    c8a4:	e58c120c 	str	r1, [ip, #524]	; 0x20c
    c8a8:	e12fff1e 	bx	lr

0000c8ac <CInterruptSystem::DisconnectFIQ()>:
    c8ac:	e3a01a0b 	mov	r1, #45056	; 0xb000
    c8b0:	e30f3bcc 	movw	r3, #64460	; 0xfbcc
    c8b4:	e3431f00 	movt	r1, #16128	; 0x3f00
    c8b8:	e3403000 	movt	r3, #0
    c8bc:	e3a02000 	mov	r2, #0
    c8c0:	e581220c 	str	r2, [r1, #524]	; 0x20c
    c8c4:	e5832000 	str	r2, [r3]
    c8c8:	e5832004 	str	r2, [r3, #4]
    c8cc:	e12fff1e 	bx	lr

0000c8d0 <CInterruptSystem::EnableIRQ(unsigned int)>:
    c8d0:	e350001f 	cmp	r0, #31
    c8d4:	930b3210 	movwls	r3, #45584	; 0xb210
    c8d8:	93433f00 	movtls	r3, #16128	; 0x3f00
    c8dc:	9a000005 	bls	c8f8 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>
    c8e0:	e30b2214 	movw	r2, #45588	; 0xb214
    c8e4:	e350003f 	cmp	r0, #63	; 0x3f
    c8e8:	e3432f00 	movt	r2, #16128	; 0x3f00
    c8ec:	e30b3218 	movw	r3, #45592	; 0xb218
    c8f0:	e3433f00 	movt	r3, #16128	; 0x3f00
    c8f4:	91a03002 	movls	r3, r2
    c8f8:	e200001f 	and	r0, r0, #31
    c8fc:	e3a02001 	mov	r2, #1
    c900:	e1a00012 	lsl	r0, r2, r0
    c904:	e5830000 	str	r0, [r3]
    c908:	e12fff1e 	bx	lr

0000c90c <CInterruptSystem::DisableIRQ(unsigned int)>:
    c90c:	e350001f 	cmp	r0, #31
    c910:	930b321c 	movwls	r3, #45596	; 0xb21c
    c914:	93433f00 	movtls	r3, #16128	; 0x3f00
    c918:	9a000005 	bls	c934 <CInterruptSystem::DisableIRQ(unsigned int)+0x28>
    c91c:	e30b2220 	movw	r2, #45600	; 0xb220
    c920:	e350003f 	cmp	r0, #63	; 0x3f
    c924:	e3432f00 	movt	r2, #16128	; 0x3f00
    c928:	e30b3224 	movw	r3, #45604	; 0xb224
    c92c:	e3433f00 	movt	r3, #16128	; 0x3f00
    c930:	91a03002 	movls	r3, r2
    c934:	e200001f 	and	r0, r0, #31
    c938:	e3a02001 	mov	r2, #1
    c93c:	e1a00012 	lsl	r0, r2, r0
    c940:	e5830000 	str	r0, [r3]
    c944:	e12fff1e 	bx	lr

0000c948 <CInterruptSystem::EnableFIQ(unsigned int)>:
    c948:	e3a03a0b 	mov	r3, #45056	; 0xb000
    c94c:	e3433f00 	movt	r3, #16128	; 0x3f00
    c950:	e3800080 	orr	r0, r0, #128	; 0x80
    c954:	e583020c 	str	r0, [r3, #524]	; 0x20c
    c958:	e12fff1e 	bx	lr

0000c95c <CInterruptSystem::DisableFIQ()>:
    c95c:	e3a03a0b 	mov	r3, #45056	; 0xb000
    c960:	e3433f00 	movt	r3, #16128	; 0x3f00
    c964:	e3a02000 	mov	r2, #0
    c968:	e583220c 	str	r2, [r3, #524]	; 0x20c
    c96c:	e12fff1e 	bx	lr

0000c970 <CInterruptSystem::Get()>:
    c970:	e30f3c44 	movw	r3, #64580	; 0xfc44
    c974:	e3403000 	movt	r3, #0
    c978:	e5930000 	ldr	r0, [r3]
    c97c:	e12fff1e 	bx	lr

0000c980 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    c980:	e7903101 	ldr	r3, [r0, r1, lsl #2]
    c984:	e0800101 	add	r0, r0, r1, lsl #2
    c988:	e3530000 	cmp	r3, #0
    c98c:	0a000004 	beq	c9a4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    c990:	e92d4010 	push	{r4, lr}
    c994:	e5900120 	ldr	r0, [r0, #288]	; 0x120
    c998:	e12fff33 	blx	r3
    c99c:	e3a00001 	mov	r0, #1
    c9a0:	e8bd8010 	pop	{r4, pc}
    c9a4:	e351001f 	cmp	r1, #31
    c9a8:	930b221c 	movwls	r2, #45596	; 0xb21c
    c9ac:	93432f00 	movtls	r2, #16128	; 0x3f00
    c9b0:	9a000005 	bls	c9cc <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
    c9b4:	e30b3220 	movw	r3, #45600	; 0xb220
    c9b8:	e351003f 	cmp	r1, #63	; 0x3f
    c9bc:	e3433f00 	movt	r3, #16128	; 0x3f00
    c9c0:	e30b2224 	movw	r2, #45604	; 0xb224
    c9c4:	e3432f00 	movt	r2, #16128	; 0x3f00
    c9c8:	91a02003 	movls	r2, r3
    c9cc:	e3a03001 	mov	r3, #1
    c9d0:	e201101f 	and	r1, r1, #31
    c9d4:	e1a01113 	lsl	r1, r3, r1
    c9d8:	e3a00000 	mov	r0, #0
    c9dc:	e5821000 	str	r1, [r2]
    c9e0:	e12fff1e 	bx	lr

0000c9e4 <CInterruptSystem::InterruptHandler()>:
    c9e4:	e3a02a0b 	mov	r2, #45056	; 0xb000
    c9e8:	e3432f00 	movt	r2, #16128	; 0x3f00
    c9ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c9f0:	e30f1c44 	movw	r1, #64580	; 0xfc44
    c9f4:	e5923204 	ldr	r3, [r2, #516]	; 0x204
    c9f8:	e24dd010 	sub	sp, sp, #16
    c9fc:	e3401000 	movt	r1, #0
    ca00:	e30be21c 	movw	lr, #45596	; 0xb21c
    ca04:	e30b6224 	movw	r6, #45604	; 0xb224
    ca08:	e30b5220 	movw	r5, #45600	; 0xb220
    ca0c:	e58d3004 	str	r3, [sp, #4]
    ca10:	e343ef00 	movt	lr, #16128	; 0x3f00
    ca14:	e5910000 	ldr	r0, [r1]
    ca18:	e3436f00 	movt	r6, #16128	; 0x3f00
    ca1c:	e5921208 	ldr	r1, [r2, #520]	; 0x208
    ca20:	e3435f00 	movt	r5, #16128	; 0x3f00
    ca24:	e28d4008 	add	r4, sp, #8
    ca28:	e3a0c000 	mov	ip, #0
    ca2c:	e3a07001 	mov	r7, #1
    ca30:	e58d1008 	str	r1, [sp, #8]
    ca34:	e5922200 	ldr	r2, [r2, #512]	; 0x200
    ca38:	e6ef2072 	uxtb	r2, r2
    ca3c:	e58d200c 	str	r2, [sp, #12]
    ca40:	e3530000 	cmp	r3, #0
    ca44:	0a000016 	beq	caa4 <CInterruptSystem::InterruptHandler()+0xc0>
    ca48:	e1a0200c 	mov	r2, ip
    ca4c:	e3130001 	tst	r3, #1
    ca50:	0a000010 	beq	ca98 <CInterruptSystem::InterruptHandler()+0xb4>
    ca54:	e7901102 	ldr	r1, [r0, r2, lsl #2]
    ca58:	e3510000 	cmp	r1, #0
    ca5c:	0a000004 	beq	ca74 <CInterruptSystem::InterruptHandler()+0x90>
    ca60:	e2822048 	add	r2, r2, #72	; 0x48
    ca64:	e7900102 	ldr	r0, [r0, r2, lsl #2]
    ca68:	e28dd010 	add	sp, sp, #16
    ca6c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    ca70:	e12fff11 	bx	r1
    ca74:	e352001f 	cmp	r2, #31
    ca78:	e1a0800e 	mov	r8, lr
    ca7c:	9a000002 	bls	ca8c <CInterruptSystem::InterruptHandler()+0xa8>
    ca80:	e352003f 	cmp	r2, #63	; 0x3f
    ca84:	81a08006 	movhi	r8, r6
    ca88:	91a08005 	movls	r8, r5
    ca8c:	e202101f 	and	r1, r2, #31
    ca90:	e1a01117 	lsl	r1, r7, r1
    ca94:	e5881000 	str	r1, [r8]
    ca98:	e1b030a3 	lsrs	r3, r3, #1
    ca9c:	e2822001 	add	r2, r2, #1
    caa0:	1affffe9 	bne	ca4c <CInterruptSystem::InterruptHandler()+0x68>
    caa4:	e28cc020 	add	ip, ip, #32
    caa8:	e35c0060 	cmp	ip, #96	; 0x60
    caac:	14943004 	ldrne	r3, [r4], #4
    cab0:	1affffe2 	bne	ca40 <CInterruptSystem::InterruptHandler()+0x5c>
    cab4:	e28dd010 	add	sp, sp, #16
    cab8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000cabc <InterruptHandler>:
    cabc:	eaffffc8 	b	c9e4 <CInterruptSystem::InterruptHandler()>

0000cac0 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    cac0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    cac4:	e280c0dc 	add	ip, r0, #220	; 0xdc
    cac8:	e3a0e000 	mov	lr, #0
    cacc:	e1a03000 	mov	r3, r0
    cad0:	e1a0200e 	mov	r2, lr
    cad4:	e5801000 	str	r1, [r0]
    cad8:	e5a3e004 	str	lr, [r3, #4]!
    cadc:	e5a32004 	str	r2, [r3, #4]!
    cae0:	e153000c 	cmp	r3, ip
    cae4:	1afffffc 	bne	cadc <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    cae8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000caec <CGPIOManager::~CGPIOManager()>:
    caec:	e5903004 	ldr	r3, [r0, #4]
    caf0:	e92d4010 	push	{r4, lr}
    caf4:	e3530000 	cmp	r3, #0
    caf8:	e1a04000 	mov	r4, r0
    cafc:	0a000002 	beq	cb0c <CGPIOManager::~CGPIOManager()+0x20>
    cb00:	e3a01034 	mov	r1, #52	; 0x34
    cb04:	e5900000 	ldr	r0, [r0]
    cb08:	ebffff4b 	bl	c83c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    cb0c:	e1a00004 	mov	r0, r4
    cb10:	e8bd8010 	pop	{r4, pc}

0000cb14 <CGPIOManager::Initialize()>:
    cb14:	e92d4010 	push	{r4, lr}
    cb18:	e1a03000 	mov	r3, r0
    cb1c:	e1a04000 	mov	r4, r0
    cb20:	e3a01034 	mov	r1, #52	; 0x34
    cb24:	e5900000 	ldr	r0, [r0]
    cb28:	e30c2be4 	movw	r2, #52196	; 0xcbe4
    cb2c:	e3402000 	movt	r2, #0
    cb30:	ebffff2f 	bl	c7f4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    cb34:	e3a03001 	mov	r3, #1
    cb38:	e1a00003 	mov	r0, r3
    cb3c:	e5843004 	str	r3, [r4, #4]
    cb40:	e8bd8010 	pop	{r4, pc}

0000cb44 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    cb44:	e5913004 	ldr	r3, [r1, #4]
    cb48:	e2833002 	add	r3, r3, #2
    cb4c:	e7801103 	str	r1, [r0, r3, lsl #2]
    cb50:	e12fff1e 	bx	lr

0000cb54 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    cb54:	e5913004 	ldr	r3, [r1, #4]
    cb58:	e3a02000 	mov	r2, #0
    cb5c:	e2833002 	add	r3, r3, #2
    cb60:	e7802103 	str	r2, [r0, r3, lsl #2]
    cb64:	e12fff1e 	bx	lr

0000cb68 <CGPIOManager::InterruptHandler()>:
    cb68:	e3a02000 	mov	r2, #0
    cb6c:	e3432f20 	movt	r2, #16160	; 0x3f20
    cb70:	e92d4070 	push	{r4, r5, r6, lr}
    cb74:	e3a04000 	mov	r4, #0
    cb78:	e5923040 	ldr	r3, [r2, #64]	; 0x40
    cb7c:	ea000004 	b	cb94 <CGPIOManager::InterruptHandler()+0x2c>
    cb80:	e2844001 	add	r4, r4, #1
    cb84:	e314001f 	tst	r4, #31
    cb88:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    cb8c:	e3540036 	cmp	r4, #54	; 0x36
    cb90:	08bd8070 	popeq	{r4, r5, r6, pc}
    cb94:	e3130001 	tst	r3, #1
    cb98:	e1a030a3 	lsr	r3, r3, #1
    cb9c:	0afffff7 	beq	cb80 <CGPIOManager::InterruptHandler()+0x18>
    cba0:	e2843002 	add	r3, r4, #2
    cba4:	e204501f 	and	r5, r4, #31
    cba8:	e3a02001 	mov	r2, #1
    cbac:	e7900103 	ldr	r0, [r0, r3, lsl #2]
    cbb0:	e1a05512 	lsl	r5, r2, r5
    cbb4:	e3500000 	cmp	r0, #0
    cbb8:	0a000006 	beq	cbd8 <CGPIOManager::InterruptHandler()+0x70>
    cbbc:	ebfff001 	bl	8bc8 <CGPIOPin::InterruptHandler()>
    cbc0:	e3a03010 	mov	r3, #16
    cbc4:	e3403fc8 	movt	r3, #4040	; 0xfc8
    cbc8:	e08332a4 	add	r3, r3, r4, lsr #5
    cbcc:	e1a03103 	lsl	r3, r3, #2
    cbd0:	e5835000 	str	r5, [r3]
    cbd4:	e8bd8070 	pop	{r4, r5, r6, pc}
    cbd8:	e1a00004 	mov	r0, r4
    cbdc:	ebffeffc 	bl	8bd4 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    cbe0:	eafffff6 	b	cbc0 <CGPIOManager::InterruptHandler()+0x58>

0000cbe4 <CGPIOManager::InterruptStub(void*)>:
    cbe4:	eaffffdf 	b	cb68 <CGPIOManager::InterruptHandler()>

0000cbe8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    cbe8:	e12fff1e 	bx	lr

0000cbec <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    cbec:	e92d4010 	push	{r4, lr}
    cbf0:	e3a01010 	mov	r1, #16
    cbf4:	e1a04000 	mov	r4, r0
    cbf8:	ebfff09d 	bl	8e74 <operator delete(void*, unsigned int)>
    cbfc:	e1a00004 	mov	r0, r4
    cc00:	e8bd8010 	pop	{r4, pc}

0000cc04 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    cc04:	e92d4070 	push	{r4, r5, r6, lr}
    cc08:	e30f4c48 	movw	r4, #64584	; 0xfc48
    cc0c:	e3404000 	movt	r4, #0
    cc10:	e1a05000 	mov	r5, r0
    cc14:	e1a06001 	mov	r6, r1
    cc18:	e5940000 	ldr	r0, [r4]
    cc1c:	e3500000 	cmp	r0, #0
    cc20:	1a00001a 	bne	cc90 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    cc24:	e1d500bc 	ldrh	r0, [r5, #12]
    cc28:	e1d530be 	ldrh	r3, [r5, #14]
    cc2c:	e5856008 	str	r6, [r5, #8]
    cc30:	e0402003 	sub	r2, r0, r3
    cc34:	e6bf2072 	sxth	r2, r2
    cc38:	e3520000 	cmp	r2, #0
    cc3c:	da00000c 	ble	cc74 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    cc40:	e3560000 	cmp	r6, #0
    cc44:	1a00000c 	bne	cc7c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    cc48:	e2833001 	add	r3, r3, #1
    cc4c:	e6ff3073 	uxth	r3, r3
    cc50:	e1c530be 	strh	r3, [r5, #14]
    cc54:	e5951004 	ldr	r1, [r5, #4]
    cc58:	e1833800 	orr	r3, r3, r0, lsl #16
    cc5c:	e5942004 	ldr	r2, [r4, #4]
    cc60:	e7823101 	str	r3, [r2, r1, lsl #2]
    cc64:	e5943000 	ldr	r3, [r4]
    cc68:	e3530000 	cmp	r3, #0
    cc6c:	1a000005 	bne	cc88 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    cc70:	e8bd8070 	pop	{r4, r5, r6, pc}
    cc74:	e3560000 	cmp	r6, #0
    cc78:	1a000006 	bne	cc98 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    cc7c:	e5943000 	ldr	r3, [r4]
    cc80:	e3530000 	cmp	r3, #0
    cc84:	08bd8070 	popeq	{r4, r5, r6, pc}
    cc88:	e8bd4070 	pop	{r4, r5, r6, lr}
    cc8c:	eafff088 	b	8eb4 <LeaveCritical>
    cc90:	ebfff079 	bl	8e7c <EnterCritical>
    cc94:	eaffffe2 	b	cc24 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    cc98:	e2800001 	add	r0, r0, #1
    cc9c:	e6ff0070 	uxth	r0, r0
    cca0:	e1c500bc 	strh	r0, [r5, #12]
    cca4:	eaffffea 	b	cc54 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000cca8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    cca8:	e59f20e4 	ldr	r2, [pc, #228]	; cd94 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    ccac:	e3510001 	cmp	r1, #1
    ccb0:	e92d4030 	push	{r4, r5, lr}
    ccb4:	e3a03000 	mov	r3, #0
    ccb8:	e24dd024 	sub	sp, sp, #36	; 0x24
    ccbc:	e1a04000 	mov	r4, r0
    ccc0:	e5801004 	str	r1, [r0, #4]
    ccc4:	e5802000 	str	r2, [r0]
    ccc8:	e1c030bc 	strh	r3, [r0, #12]
    cccc:	e1c030be 	strh	r3, [r0, #14]
    ccd0:	9a000002 	bls	cce0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    ccd4:	e1a00004 	mov	r0, r4
    ccd8:	e28dd024 	add	sp, sp, #36	; 0x24
    ccdc:	e8bd8030 	pop	{r4, r5, pc}
    cce0:	e30f5c48 	movw	r5, #64584	; 0xfc48
    cce4:	e3405000 	movt	r5, #0
    cce8:	e5950000 	ldr	r0, [r5]
    ccec:	e1500003 	cmp	r0, r3
    ccf0:	1a000009 	bne	cd1c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    ccf4:	e5953004 	ldr	r3, [r5, #4]
    ccf8:	e3530000 	cmp	r3, #0
    ccfc:	0a00000a 	beq	cd2c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    cd00:	e5953004 	ldr	r3, [r5, #4]
    cd04:	e3530000 	cmp	r3, #0
    cd08:	0afffff1 	beq	ccd4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    cd0c:	e3a01000 	mov	r1, #0
    cd10:	e1a00004 	mov	r0, r4
    cd14:	ebffffba 	bl	cc04 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    cd18:	eaffffed 	b	ccd4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    cd1c:	ebfff056 	bl	8e7c <EnterCritical>
    cd20:	e5953004 	ldr	r3, [r5, #4]
    cd24:	e3530000 	cmp	r3, #0
    cd28:	1a00000f 	bne	cd6c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    cd2c:	e28d0008 	add	r0, sp, #8
    cd30:	ebffedfe 	bl	8530 <CBcmPropertyTags::CBcmPropertyTags()>
    cd34:	e3a03000 	mov	r3, #0
    cd38:	e28d0008 	add	r0, sp, #8
    cd3c:	e58d3000 	str	r3, [sp]
    cd40:	e3a01010 	mov	r1, #16
    cd44:	e3a03010 	mov	r3, #16
    cd48:	e3401004 	movt	r1, #4
    cd4c:	e08d2003 	add	r2, sp, r3
    cd50:	ebffee22 	bl	85e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    cd54:	e3500000 	cmp	r0, #0
    cd58:	e28d0008 	add	r0, sp, #8
    cd5c:	159d301c 	ldrne	r3, [sp, #28]
    cd60:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    cd64:	15853004 	strne	r3, [r5, #4]
    cd68:	ebffedf6 	bl	8548 <CBcmPropertyTags::~CBcmPropertyTags()>
    cd6c:	e5953000 	ldr	r3, [r5]
    cd70:	e3530000 	cmp	r3, #0
    cd74:	0a000000 	beq	cd7c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
    cd78:	ebfff04d 	bl	8eb4 <LeaveCritical>
    cd7c:	e5943004 	ldr	r3, [r4, #4]
    cd80:	e3530001 	cmp	r3, #1
    cd84:	9affffdd 	bls	cd00 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
    cd88:	e1a00004 	mov	r0, r4
    cd8c:	e28dd024 	add	sp, sp, #36	; 0x24
    cd90:	e8bd8030 	pop	{r4, r5, pc}
    cd94:	0000f69c 	.word	0x0000f69c

0000cd98 <CVirtualGPIOPin::Write(unsigned int)>:
    cd98:	e5902004 	ldr	r2, [r0, #4]
    cd9c:	e1a03001 	mov	r3, r1
    cda0:	e3520001 	cmp	r2, #1
    cda4:	812fff1e 	bxhi	lr
    cda8:	e30f2c48 	movw	r2, #64584	; 0xfc48
    cdac:	e3402000 	movt	r2, #0
    cdb0:	e3510001 	cmp	r1, #1
    cdb4:	e5922004 	ldr	r2, [r2, #4]
    cdb8:	93a03000 	movls	r3, #0
    cdbc:	83a03001 	movhi	r3, #1
    cdc0:	e3520000 	cmp	r2, #0
    cdc4:	03833001 	orreq	r3, r3, #1
    cdc8:	e3530000 	cmp	r3, #0
    cdcc:	112fff1e 	bxne	lr
    cdd0:	eaffff8b 	b	cc04 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0000cdd4 <CVirtualGPIOPin::Invert()>:
    cdd4:	e5901008 	ldr	r1, [r0, #8]
    cdd8:	e2211001 	eor	r1, r1, #1
    cddc:	eaffffed 	b	cd98 <CVirtualGPIOPin::Write(unsigned int)>

0000cde0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    cde0:	e30f3c48 	movw	r3, #64584	; 0xfc48
    cde4:	e3403000 	movt	r3, #0
    cde8:	e3a02000 	mov	r2, #0
    cdec:	e5832000 	str	r2, [r3]
    cdf0:	e12fff1e 	bx	lr

0000cdf4 <CMachineInfo::CMachineInfo()>:
    cdf4:	e30f2c50 	movw	r2, #64592	; 0xfc50
    cdf8:	e3402000 	movt	r2, #0
    cdfc:	e92d4030 	push	{r4, r5, lr}
    ce00:	e3a0300c 	mov	r3, #12
    ce04:	e5925000 	ldr	r5, [r2]
    ce08:	e3a01003 	mov	r1, #3
    ce0c:	e5c03004 	strb	r3, [r0, #4]
    ce10:	e3a03000 	mov	r3, #0
    ce14:	e1550003 	cmp	r5, r3
    ce18:	e24dd024 	sub	sp, sp, #36	; 0x24
    ce1c:	e1a04000 	mov	r4, r0
    ce20:	e5c01010 	strb	r1, [r0, #16]
    ce24:	e5803000 	str	r3, [r0]
    ce28:	e5803008 	str	r3, [r0, #8]
    ce2c:	e580300c 	str	r3, [r0, #12]
    ce30:	e5803014 	str	r3, [r0, #20]
    ce34:	0a00000e 	beq	ce74 <CMachineInfo::CMachineInfo()+0x80>
    ce38:	e595e000 	ldr	lr, [r5]
    ce3c:	e5d5c004 	ldrb	ip, [r5, #4]
    ce40:	e5950008 	ldr	r0, [r5, #8]
    ce44:	e595100c 	ldr	r1, [r5, #12]
    ce48:	e5d52010 	ldrb	r2, [r5, #16]
    ce4c:	e5953014 	ldr	r3, [r5, #20]
    ce50:	e584e000 	str	lr, [r4]
    ce54:	e5c4c004 	strb	ip, [r4, #4]
    ce58:	e5840008 	str	r0, [r4, #8]
    ce5c:	e584100c 	str	r1, [r4, #12]
    ce60:	e5c42010 	strb	r2, [r4, #16]
    ce64:	e5843014 	str	r3, [r4, #20]
    ce68:	e1a00004 	mov	r0, r4
    ce6c:	e28dd024 	add	sp, sp, #36	; 0x24
    ce70:	e8bd8030 	pop	{r4, r5, pc}
    ce74:	e5820000 	str	r0, [r2]
    ce78:	e28d0008 	add	r0, sp, #8
    ce7c:	ebffedab 	bl	8530 <CBcmPropertyTags::CBcmPropertyTags()>
    ce80:	e3a03010 	mov	r3, #16
    ce84:	e58d5000 	str	r5, [sp]
    ce88:	e28d0008 	add	r0, sp, #8
    ce8c:	e3a01002 	mov	r1, #2
    ce90:	e08d2003 	add	r2, sp, r3
    ce94:	e3401001 	movt	r1, #1
    ce98:	ebffedd0 	bl	85e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ce9c:	e3500000 	cmp	r0, #0
    cea0:	0a00000c 	beq	ced8 <CMachineInfo::CMachineInfo()+0xe4>
    cea4:	e59d201c 	ldr	r2, [sp, #28]
    cea8:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    ceac:	e5842000 	str	r2, [r4]
    ceb0:	1a00000b 	bne	cee4 <CMachineInfo::CMachineInfo()+0xf0>
    ceb4:	e3a01002 	mov	r1, #2
    ceb8:	e59f00f8 	ldr	r0, [pc, #248]	; cfb8 <CMachineInfo::CMachineInfo()+0x1c4>
    cebc:	ea000000 	b	cec4 <CMachineInfo::CMachineInfo()+0xd0>
    cec0:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    cec4:	e1520001 	cmp	r2, r1
    cec8:	0a000012 	beq	cf18 <CMachineInfo::CMachineInfo()+0x124>
    cecc:	e2833001 	add	r3, r3, #1
    ced0:	e3530011 	cmp	r3, #17
    ced4:	1afffff9 	bne	cec0 <CMachineInfo::CMachineInfo()+0xcc>
    ced8:	e28d0008 	add	r0, sp, #8
    cedc:	ebffed99 	bl	8548 <CBcmPropertyTags::~CBcmPropertyTags()>
    cee0:	eaffffe0 	b	ce68 <CMachineInfo::CMachineInfo()+0x74>
    cee4:	e30fc6a4 	movw	ip, #63140	; 0xf6a4
    cee8:	e340c000 	movt	ip, #0
    ceec:	e7e70252 	ubfx	r0, r2, #4, #8
    cef0:	e1a03005 	mov	r3, r5
    cef4:	e1a0100c 	mov	r1, ip
    cef8:	ea000000 	b	cf00 <CMachineInfo::CMachineInfo()+0x10c>
    cefc:	e5b1500c 	ldr	r5, [r1, #12]!
    cf00:	e1550000 	cmp	r5, r0
    cf04:	0a000011 	beq	cf50 <CMachineInfo::CMachineInfo()+0x15c>
    cf08:	e2833001 	add	r3, r3, #1
    cf0c:	e353000a 	cmp	r3, #10
    cf10:	1afffff9 	bne	cefc <CMachineInfo::CMachineInfo()+0x108>
    cf14:	eaffffef 	b	ced8 <CMachineInfo::CMachineInfo()+0xe4>
    cf18:	e30f26a4 	movw	r2, #63140	; 0xf6a4
    cf1c:	e3402000 	movt	r2, #0
    cf20:	e0823203 	add	r3, r2, r3, lsl #4
    cf24:	e3a01001 	mov	r1, #1
    cf28:	e5841008 	str	r1, [r4, #8]
    cf2c:	e3a02000 	mov	r2, #0
    cf30:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
    cf34:	e5931080 	ldr	r1, [r3, #128]	; 0x80
    cf38:	e5933084 	ldr	r3, [r3, #132]	; 0x84
    cf3c:	e5c40004 	strb	r0, [r4, #4]
    cf40:	e584100c 	str	r1, [r4, #12]
    cf44:	e5843014 	str	r3, [r4, #20]
    cf48:	e5c42010 	strb	r2, [r4, #16]
    cf4c:	eaffffe1 	b	ced8 <CMachineInfo::CMachineInfo()+0xe4>
    cf50:	e3a0100c 	mov	r1, #12
    cf54:	e7e3e652 	ubfx	lr, r2, #12, #4
    cf58:	e023c391 	mla	r3, r1, r3, ip
    cf5c:	e35e0002 	cmp	lr, #2
    cf60:	e202100f 	and	r1, r2, #15
    cf64:	e7e22a52 	ubfx	r2, r2, #20, #3
    cf68:	e5c4e010 	strb	lr, [r4, #16]
    cf6c:	e3a00c01 	mov	r0, #256	; 0x100
    cf70:	e2811001 	add	r1, r1, #1
    cf74:	e1a00210 	lsl	r0, r0, r2
    cf78:	e584100c 	str	r1, [r4, #12]
    cf7c:	e5d3c004 	ldrb	ip, [r3, #4]
    cf80:	e5933008 	ldr	r3, [r3, #8]
    cf84:	e5840014 	str	r0, [r4, #20]
    cf88:	e5c4c004 	strb	ip, [r4, #4]
    cf8c:	e5843008 	str	r3, [r4, #8]
    cf90:	83a03003 	movhi	r3, #3
    cf94:	85c43010 	strbhi	r3, [r4, #16]
    cf98:	e3520000 	cmp	r2, #0
    cf9c:	035c0003 	cmpeq	ip, #3
    cfa0:	1affffcc 	bne	ced8 <CMachineInfo::CMachineInfo()+0xe4>
    cfa4:	e3510001 	cmp	r1, #1
    cfa8:	13a03002 	movne	r3, #2
    cfac:	03a03001 	moveq	r3, #1
    cfb0:	e5c43004 	strb	r3, [r4, #4]
    cfb4:	eaffffc7 	b	ced8 <CMachineInfo::CMachineInfo()+0xe4>
    cfb8:	0000f71c 	.word	0x0000f71c

0000cfbc <CMachineInfo::~CMachineInfo()>:
    cfbc:	e30f3c50 	movw	r3, #64592	; 0xfc50
    cfc0:	e3403000 	movt	r3, #0
    cfc4:	e3a0100c 	mov	r1, #12
    cfc8:	e5c01004 	strb	r1, [r0, #4]
    cfcc:	e5932000 	ldr	r2, [r3]
    cfd0:	e1500002 	cmp	r0, r2
    cfd4:	03a02000 	moveq	r2, #0
    cfd8:	05832000 	streq	r2, [r3]
    cfdc:	e12fff1e 	bx	lr

0000cfe0 <CMachineInfo::GetMachineModel() const>:
    cfe0:	e5d00004 	ldrb	r0, [r0, #4]
    cfe4:	e12fff1e 	bx	lr

0000cfe8 <CMachineInfo::GetMachineName() const>:
    cfe8:	e5d02004 	ldrb	r2, [r0, #4]
    cfec:	e30f36a4 	movw	r3, #63140	; 0xf6a4
    cff0:	e3403000 	movt	r3, #0
    cff4:	e0833102 	add	r3, r3, r2, lsl #2
    cff8:	e5930188 	ldr	r0, [r3, #392]	; 0x188
    cffc:	e12fff1e 	bx	lr

0000d000 <CMachineInfo::GetModelMajor() const>:
    d000:	e5900008 	ldr	r0, [r0, #8]
    d004:	e12fff1e 	bx	lr

0000d008 <CMachineInfo::GetModelRevision() const>:
    d008:	e590000c 	ldr	r0, [r0, #12]
    d00c:	e12fff1e 	bx	lr

0000d010 <CMachineInfo::GetSoCType() const>:
    d010:	e5d00010 	ldrb	r0, [r0, #16]
    d014:	e12fff1e 	bx	lr

0000d018 <CMachineInfo::GetRAMSize() const>:
    d018:	e5900014 	ldr	r0, [r0, #20]
    d01c:	e12fff1e 	bx	lr

0000d020 <CMachineInfo::GetSoCName() const>:
    d020:	e5d02010 	ldrb	r2, [r0, #16]
    d024:	e30f36a4 	movw	r3, #63140	; 0xf6a4
    d028:	e3403000 	movt	r3, #0
    d02c:	e0833102 	add	r3, r3, r2, lsl #2
    d030:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
    d034:	e12fff1e 	bx	lr

0000d038 <CMachineInfo::GetRevisionRaw() const>:
    d038:	e5900000 	ldr	r0, [r0]
    d03c:	e12fff1e 	bx	lr

0000d040 <CMachineInfo::GetClockRate(unsigned int) const>:
    d040:	e92d4030 	push	{r4, r5, lr}
    d044:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    d048:	e1a05000 	mov	r5, r0
    d04c:	e28d000c 	add	r0, sp, #12
    d050:	e1a04001 	mov	r4, r1
    d054:	ebffed35 	bl	8530 <CBcmPropertyTags::CBcmPropertyTags()>
    d058:	e3a03004 	mov	r3, #4
    d05c:	e28d000c 	add	r0, sp, #12
    d060:	e58d3000 	str	r3, [sp]
    d064:	e3a01002 	mov	r1, #2
    d068:	e3a03014 	mov	r3, #20
    d06c:	e3401003 	movt	r1, #3
    d070:	e08d2003 	add	r2, sp, r3
    d074:	e58d4020 	str	r4, [sp, #32]
    d078:	ebffed58 	bl	85e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    d07c:	e3500000 	cmp	r0, #0
    d080:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    d084:	1a000007 	bne	d0a8 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d088:	e3540002 	cmp	r4, #2
    d08c:	0a00000a 	beq	d0bc <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    d090:	e3540004 	cmp	r4, #4
    d094:	0a00000b 	beq	d0c8 <CMachineInfo::GetClockRate(unsigned int) const+0x88>
    d098:	e3540001 	cmp	r4, #1
    d09c:	e3a04ce1 	mov	r4, #57600	; 0xe100
    d0a0:	e34045f5 	movt	r4, #1525	; 0x5f5
    d0a4:	13a04000 	movne	r4, #0
    d0a8:	e28d000c 	add	r0, sp, #12
    d0ac:	ebffed25 	bl	8548 <CBcmPropertyTags::~CBcmPropertyTags()>
    d0b0:	e1a00004 	mov	r0, r4
    d0b4:	e28dd02c 	add	sp, sp, #44	; 0x2c
    d0b8:	e8bd8030 	pop	{r4, r5, pc}
    d0bc:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    d0c0:	e34042dc 	movt	r4, #732	; 0x2dc
    d0c4:	eafffff7 	b	d0a8 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    d0c8:	e5952008 	ldr	r2, [r5, #8]
    d0cc:	e3a03ca3 	mov	r3, #41728	; 0xa300
    d0d0:	e34131e1 	movt	r3, #4577	; 0x11e1
    d0d4:	e30b4280 	movw	r4, #45696	; 0xb280
    d0d8:	e3520002 	cmp	r2, #2
    d0dc:	e3404ee6 	movt	r4, #3814	; 0xee6
    d0e0:	81a04003 	movhi	r4, r3
    d0e4:	eaffffef 	b	d0a8 <CMachineInfo::GetClockRate(unsigned int) const+0x68>

0000d0e8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    d0e8:	e3510036 	cmp	r1, #54	; 0x36
    d0ec:	0a000008 	beq	d114 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x2c>
    d0f0:	e3510037 	cmp	r1, #55	; 0x37
    d0f4:	1a000004 	bne	d10c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    d0f8:	e5d03004 	ldrb	r3, [r0, #4]
    d0fc:	e3530003 	cmp	r3, #3
    d100:	c3a00028 	movgt	r0, #40	; 0x28
    d104:	d3a0002d 	movle	r0, #45	; 0x2d
    d108:	e12fff1e 	bx	lr
    d10c:	e3a00000 	mov	r0, #0
    d110:	e12fff1e 	bx	lr
    d114:	e5d03004 	ldrb	r3, [r0, #4]
    d118:	e3530003 	cmp	r3, #3
    d11c:	ca000001 	bgt	d128 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    d120:	e3a00028 	mov	r0, #40	; 0x28
    d124:	e12fff1e 	bx	lr
    d128:	e5903008 	ldr	r3, [r0, #8]
    d12c:	e3530003 	cmp	r3, #3
    d130:	33a0002d 	movcc	r0, #45	; 0x2d
    d134:	23a00029 	movcs	r0, #41	; 0x29
    d138:	e12fff1e 	bx	lr

0000d13c <CMachineInfo::GetDevice(TDeviceId) const>:
    d13c:	e3510000 	cmp	r1, #0
    d140:	1a000003 	bne	d154 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    d144:	e5d00004 	ldrb	r0, [r0, #4]
    d148:	e2500001 	subs	r0, r0, #1
    d14c:	13a00001 	movne	r0, #1
    d150:	e12fff1e 	bx	lr
    d154:	e3a00000 	mov	r0, #0
    d158:	e12fff1e 	bx	lr

0000d15c <CMachineInfo::Get()>:
    d15c:	e30f3c50 	movw	r3, #64592	; 0xfc50
    d160:	e3403000 	movt	r3, #0
    d164:	e5930000 	ldr	r0, [r3]
    d168:	e12fff1e 	bx	lr

0000d16c <InvalidateDataCacheL1Only>:
    d16c:	e92d0070 	push	{r4, r5, r6}
    d170:	e3a00000 	mov	r0, #0
    d174:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    d178:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    d17c:	e3071fff 	movw	r1, #32767	; 0x7fff
    d180:	e00126a0 	and	r2, r1, r0, lsr #13
    d184:	e30013ff 	movw	r1, #1023	; 0x3ff
    d188:	e00131a0 	and	r3, r1, r0, lsr #3
    d18c:	e2822001 	add	r2, r2, #1
    d190:	e2000007 	and	r0, r0, #7
    d194:	e2800004 	add	r0, r0, #4
    d198:	e16f1f13 	clz	r1, r3
    d19c:	e2834001 	add	r4, r3, #1
    d1a0:	e2422001 	sub	r2, r2, #1
    d1a4:	e1a03004 	mov	r3, r4
    d1a8:	e2533001 	subs	r3, r3, #1
    d1ac:	e1a05113 	lsl	r5, r3, r1
    d1b0:	e1a06012 	lsl	r6, r2, r0
    d1b4:	e1855006 	orr	r5, r5, r6
    d1b8:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    d1bc:	cafffff9 	bgt	d1a8 <InvalidateDataCacheL1Only+0x3c>
    d1c0:	e3520000 	cmp	r2, #0
    d1c4:	cafffff5 	bgt	d1a0 <InvalidateDataCacheL1Only+0x34>
    d1c8:	f57ff04e 	dsb	st
    d1cc:	f57ff06f 	isb	sy
    d1d0:	e8bd0070 	pop	{r4, r5, r6}
    d1d4:	e12fff1e 	bx	lr

0000d1d8 <InvalidateDataCache>:
    d1d8:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    d1dc:	f57ff05f 	dmb	sy
    d1e0:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    d1e4:	e1a03ba0 	lsr	r3, r0, #23
    d1e8:	e213300e 	ands	r3, r3, #14
    d1ec:	0a00001d 	beq	d268 <InvalidateDataCache+0x90>
    d1f0:	e3a0a000 	mov	sl, #0
    d1f4:	e08a20aa 	add	r2, sl, sl, lsr #1
    d1f8:	e1a01230 	lsr	r1, r0, r2
    d1fc:	e2011007 	and	r1, r1, #7
    d200:	e3510002 	cmp	r1, #2
    d204:	ba000014 	blt	d25c <InvalidateDataCache+0x84>
    d208:	e10f9000 	mrs	r9, CPSR
    d20c:	f10c0080 	cpsid	i
    d210:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    d214:	f57ff06f 	isb	sy
    d218:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    d21c:	e121f009 	msr	CPSR_c, r9
    d220:	e2012007 	and	r2, r1, #7
    d224:	e2822004 	add	r2, r2, #4
    d228:	e30043ff 	movw	r4, #1023	; 0x3ff
    d22c:	e01441a1 	ands	r4, r4, r1, lsr #3
    d230:	e16f5f14 	clz	r5, r4
    d234:	e3077fff 	movw	r7, #32767	; 0x7fff
    d238:	e01776a1 	ands	r7, r7, r1, lsr #13
    d23c:	e1a09007 	mov	r9, r7
    d240:	e18ab514 	orr	fp, sl, r4, lsl r5
    d244:	e18bb219 	orr	fp, fp, r9, lsl r2
    d248:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    d24c:	e2599001 	subs	r9, r9, #1
    d250:	aafffffa 	bge	d240 <InvalidateDataCache+0x68>
    d254:	e2544001 	subs	r4, r4, #1
    d258:	aafffff7 	bge	d23c <InvalidateDataCache+0x64>
    d25c:	e28aa002 	add	sl, sl, #2
    d260:	e153000a 	cmp	r3, sl
    d264:	caffffe2 	bgt	d1f4 <InvalidateDataCache+0x1c>
    d268:	e3a0a000 	mov	sl, #0
    d26c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    d270:	f57ff04e 	dsb	st
    d274:	f57ff06f 	isb	sy
    d278:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    d27c:	e12fff1e 	bx	lr

0000d280 <CleanDataCache>:
    d280:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    d284:	f57ff05f 	dmb	sy
    d288:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    d28c:	e1a03ba0 	lsr	r3, r0, #23
    d290:	e213300e 	ands	r3, r3, #14
    d294:	0a00001d 	beq	d310 <CleanDataCache+0x90>
    d298:	e3a0a000 	mov	sl, #0
    d29c:	e08a20aa 	add	r2, sl, sl, lsr #1
    d2a0:	e1a01230 	lsr	r1, r0, r2
    d2a4:	e2011007 	and	r1, r1, #7
    d2a8:	e3510002 	cmp	r1, #2
    d2ac:	ba000014 	blt	d304 <CleanDataCache+0x84>
    d2b0:	e10f9000 	mrs	r9, CPSR
    d2b4:	f10c0080 	cpsid	i
    d2b8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    d2bc:	f57ff06f 	isb	sy
    d2c0:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    d2c4:	e121f009 	msr	CPSR_c, r9
    d2c8:	e2012007 	and	r2, r1, #7
    d2cc:	e2822004 	add	r2, r2, #4
    d2d0:	e30043ff 	movw	r4, #1023	; 0x3ff
    d2d4:	e01441a1 	ands	r4, r4, r1, lsr #3
    d2d8:	e16f5f14 	clz	r5, r4
    d2dc:	e3077fff 	movw	r7, #32767	; 0x7fff
    d2e0:	e01776a1 	ands	r7, r7, r1, lsr #13
    d2e4:	e1a09007 	mov	r9, r7
    d2e8:	e18ab514 	orr	fp, sl, r4, lsl r5
    d2ec:	e18bb219 	orr	fp, fp, r9, lsl r2
    d2f0:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    d2f4:	e2599001 	subs	r9, r9, #1
    d2f8:	aafffffa 	bge	d2e8 <CleanDataCache+0x68>
    d2fc:	e2544001 	subs	r4, r4, #1
    d300:	aafffff7 	bge	d2e4 <CleanDataCache+0x64>
    d304:	e28aa002 	add	sl, sl, #2
    d308:	e153000a 	cmp	r3, sl
    d30c:	caffffe2 	bgt	d29c <CleanDataCache+0x1c>
    d310:	e3a0a000 	mov	sl, #0
    d314:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    d318:	f57ff04e 	dsb	st
    d31c:	f57ff06f 	isb	sy
    d320:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    d324:	e12fff1e 	bx	lr

0000d328 <CleanAndInvalidateDataCacheRange>:
    d328:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    d32c:	e1a03823 	lsr	r3, r3, #16
    d330:	e203300f 	and	r3, r3, #15
    d334:	e3a02004 	mov	r2, #4
    d338:	e1a02312 	lsl	r2, r2, r3
    d33c:	e0801001 	add	r1, r0, r1
    d340:	e2423001 	sub	r3, r2, #1
    d344:	e1c00003 	bic	r0, r0, r3
    d348:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    d34c:	e0800002 	add	r0, r0, r2
    d350:	e1500001 	cmp	r0, r1
    d354:	3afffffb 	bcc	d348 <CleanAndInvalidateDataCacheRange+0x20>
    d358:	f57ff04e 	dsb	st
    d35c:	e12fff1e 	bx	lr

0000d360 <CPtrList::CPtrList()>:
    d360:	e3a02000 	mov	r2, #0
    d364:	e5802000 	str	r2, [r0]
    d368:	e12fff1e 	bx	lr

0000d36c <CPtrList::~CPtrList()>:
    d36c:	e12fff1e 	bx	lr

0000d370 <CPtrList::GetFirst()>:
    d370:	e5900000 	ldr	r0, [r0]
    d374:	e12fff1e 	bx	lr

0000d378 <CPtrList::GetNext(TPtrListElement*)>:
    d378:	e5910008 	ldr	r0, [r1, #8]
    d37c:	e12fff1e 	bx	lr

0000d380 <CPtrList::GetPtr(TPtrListElement*)>:
    d380:	e591000c 	ldr	r0, [r1, #12]
    d384:	e12fff1e 	bx	lr

0000d388 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    d388:	e92d4070 	push	{r4, r5, r6, lr}
    d38c:	e1a05000 	mov	r5, r0
    d390:	e3a00010 	mov	r0, #16
    d394:	e1a04001 	mov	r4, r1
    d398:	e1a06002 	mov	r6, r2
    d39c:	ebffeeb0 	bl	8e64 <operator new(unsigned int)>
    d3a0:	e5951000 	ldr	r1, [r5]
    d3a4:	e3043d43 	movw	r3, #19779	; 0x4d43
    d3a8:	e345304c 	movt	r3, #20556	; 0x504c
    d3ac:	e1510004 	cmp	r1, r4
    d3b0:	e580600c 	str	r6, [r0, #12]
    d3b4:	e5803000 	str	r3, [r0]
    d3b8:	0a000006 	beq	d3d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x50>
    d3bc:	e5943004 	ldr	r3, [r4, #4]
    d3c0:	e5804008 	str	r4, [r0, #8]
    d3c4:	e3530000 	cmp	r3, #0
    d3c8:	e5803004 	str	r3, [r0, #4]
    d3cc:	15830008 	strne	r0, [r3, #8]
    d3d0:	e5840004 	str	r0, [r4, #4]
    d3d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d3d8:	e5801008 	str	r1, [r0, #8]
    d3dc:	e3a03000 	mov	r3, #0
    d3e0:	e5803004 	str	r3, [r0, #4]
    d3e4:	e5810004 	str	r0, [r1, #4]
    d3e8:	e5850000 	str	r0, [r5]
    d3ec:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d3f0 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    d3f0:	e92d4070 	push	{r4, r5, r6, lr}
    d3f4:	e1a06000 	mov	r6, r0
    d3f8:	e3a00010 	mov	r0, #16
    d3fc:	e1a04001 	mov	r4, r1
    d400:	e1a05002 	mov	r5, r2
    d404:	ebffee96 	bl	8e64 <operator new(unsigned int)>
    d408:	e3540000 	cmp	r4, #0
    d40c:	e3043d43 	movw	r3, #19779	; 0x4d43
    d410:	e345304c 	movt	r3, #20556	; 0x504c
    d414:	e580500c 	str	r5, [r0, #12]
    d418:	e5803000 	str	r3, [r0]
    d41c:	0a000006 	beq	d43c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x4c>
    d420:	e5943008 	ldr	r3, [r4, #8]
    d424:	e5804004 	str	r4, [r0, #4]
    d428:	e3530000 	cmp	r3, #0
    d42c:	e5803008 	str	r3, [r0, #8]
    d430:	15830004 	strne	r0, [r3, #4]
    d434:	e5840008 	str	r0, [r4, #8]
    d438:	e8bd8070 	pop	{r4, r5, r6, pc}
    d43c:	e5804004 	str	r4, [r0, #4]
    d440:	e5804008 	str	r4, [r0, #8]
    d444:	e5860000 	str	r0, [r6]
    d448:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d44c <CPtrList::Remove(TPtrListElement*)>:
    d44c:	e5903000 	ldr	r3, [r0]
    d450:	e1530001 	cmp	r3, r1
    d454:	0a000009 	beq	d480 <CPtrList::Remove(TPtrListElement*)+0x34>
    d458:	e991000c 	ldmib	r1, {r2, r3}
    d45c:	e5823008 	str	r3, [r2, #8]
    d460:	e5913008 	ldr	r3, [r1, #8]
    d464:	e3530000 	cmp	r3, #0
    d468:	15832004 	strne	r2, [r3, #4]
    d46c:	e3a03000 	mov	r3, #0
    d470:	e1a00001 	mov	r0, r1
    d474:	e5813000 	str	r3, [r1]
    d478:	e3a01010 	mov	r1, #16
    d47c:	eaffee7c 	b	8e74 <operator delete(void*, unsigned int)>
    d480:	e5913008 	ldr	r3, [r1, #8]
    d484:	e3530000 	cmp	r3, #0
    d488:	e5803000 	str	r3, [r0]
    d48c:	13a02000 	movne	r2, #0
    d490:	15832004 	strne	r2, [r3, #4]
    d494:	eafffff4 	b	d46c <CPtrList::Remove(TPtrListElement*)+0x20>

0000d498 <CPtrList::Find(void*)>:
    d498:	e5900000 	ldr	r0, [r0]
    d49c:	e3500000 	cmp	r0, #0
    d4a0:	012fff1e 	bxeq	lr
    d4a4:	e590300c 	ldr	r3, [r0, #12]
    d4a8:	e1510003 	cmp	r1, r3
    d4ac:	1a000003 	bne	d4c0 <CPtrList::Find(void*)+0x28>
    d4b0:	ea000006 	b	d4d0 <CPtrList::Find(void*)+0x38>
    d4b4:	e590300c 	ldr	r3, [r0, #12]
    d4b8:	e1530001 	cmp	r3, r1
    d4bc:	012fff1e 	bxeq	lr
    d4c0:	e5900008 	ldr	r0, [r0, #8]
    d4c4:	e3500000 	cmp	r0, #0
    d4c8:	1afffff9 	bne	d4b4 <CPtrList::Find(void*)+0x1c>
    d4cc:	e12fff1e 	bx	lr
    d4d0:	e12fff1e 	bx	lr

0000d4d4 <mem_init>:
    d4d4:	e0801001 	add	r1, r0, r1
    d4d8:	e30f2c54 	movw	r2, #64596	; 0xfc54
    d4dc:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    d4e0:	e3402000 	movt	r2, #0
    d4e4:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    d4e8:	e3500605 	cmp	r0, #5242880	; 0x500000
    d4ec:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    d4f0:	e582100c 	str	r1, [r2, #12]
    d4f4:	33a00605 	movcc	r0, #5242880	; 0x500000
    d4f8:	e2411501 	sub	r1, r1, #4194304	; 0x400000
    d4fc:	e3c3300f 	bic	r3, r3, #15
    d500:	e5820000 	str	r0, [r2]
    d504:	e982000a 	stmib	r2, {r1, r3}
    d508:	e12fff1e 	bx	lr

0000d50c <mem_get_size>:
    d50c:	e30f3c54 	movw	r3, #64596	; 0xfc54
    d510:	e3403000 	movt	r3, #0
    d514:	e5930004 	ldr	r0, [r3, #4]
    d518:	e5931000 	ldr	r1, [r3]
    d51c:	e593200c 	ldr	r2, [r3, #12]
    d520:	e5933008 	ldr	r3, [r3, #8]
    d524:	e0400001 	sub	r0, r0, r1
    d528:	e0423003 	sub	r3, r2, r3
    d52c:	e0800003 	add	r0, r0, r3
    d530:	e12fff1e 	bx	lr

0000d534 <malloc>:
    d534:	e92d4070 	push	{r4, r5, r6, lr}
    d538:	e30f6c54 	movw	r6, #64596	; 0xfc54
    d53c:	e3406000 	movt	r6, #0
    d540:	e1a04000 	mov	r4, r0
    d544:	e5960010 	ldr	r0, [r6, #16]
    d548:	e3500000 	cmp	r0, #0
    d54c:	1a000035 	bne	d628 <malloc+0xf4>
    d550:	e30f2b14 	movw	r2, #64276	; 0xfb14
    d554:	e3402000 	movt	r2, #0
    d558:	e5923000 	ldr	r3, [r2]
    d55c:	e3530000 	cmp	r3, #0
    d560:	0a000007 	beq	d584 <malloc+0x50>
    d564:	e1540003 	cmp	r4, r3
    d568:	8a000002 	bhi	d578 <malloc+0x44>
    d56c:	ea000011 	b	d5b8 <malloc+0x84>
    d570:	e1530004 	cmp	r3, r4
    d574:	2a00000f 	bcs	d5b8 <malloc+0x84>
    d578:	e5b23008 	ldr	r3, [r2, #8]!
    d57c:	e3530000 	cmp	r3, #0
    d580:	1afffffa 	bne	d570 <malloc+0x3c>
    d584:	e5965000 	ldr	r5, [r6]
    d588:	e284301f 	add	r3, r4, #31
    d58c:	e3c3300f 	bic	r3, r3, #15
    d590:	e5962004 	ldr	r2, [r6, #4]
    d594:	e0853003 	add	r3, r5, r3
    d598:	e5863000 	str	r3, [r6]
    d59c:	e1530002 	cmp	r3, r2
    d5a0:	9a000013 	bls	d5f4 <malloc+0xc0>
    d5a4:	e3500000 	cmp	r0, #0
    d5a8:	08bd8070 	popeq	{r4, r5, r6, pc}
    d5ac:	ebffee40 	bl	8eb4 <LeaveCritical>
    d5b0:	e3a00000 	mov	r0, #0
    d5b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d5b8:	e5925004 	ldr	r5, [r2, #4]
    d5bc:	e3550000 	cmp	r5, #0
    d5c0:	01a04003 	moveq	r4, r3
    d5c4:	0affffee 	beq	d584 <malloc+0x50>
    d5c8:	e5953008 	ldr	r3, [r5, #8]
    d5cc:	e3500000 	cmp	r0, #0
    d5d0:	e5823004 	str	r3, [r2, #4]
    d5d4:	1a000011 	bne	d620 <malloc+0xec>
    d5d8:	e3a03000 	mov	r3, #0
    d5dc:	e2850010 	add	r0, r5, #16
    d5e0:	e5c53008 	strb	r3, [r5, #8]
    d5e4:	e5c53009 	strb	r3, [r5, #9]
    d5e8:	e5c5300a 	strb	r3, [r5, #10]
    d5ec:	e5c5300b 	strb	r3, [r5, #11]
    d5f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d5f4:	e3500000 	cmp	r0, #0
    d5f8:	e3a02043 	mov	r2, #67	; 0x43
    d5fc:	e3a0304d 	mov	r3, #77	; 0x4d
    d600:	e5c52000 	strb	r2, [r5]
    d604:	e5c53001 	strb	r3, [r5, #1]
    d608:	e3a0204c 	mov	r2, #76	; 0x4c
    d60c:	e3a03042 	mov	r3, #66	; 0x42
    d610:	e5854004 	str	r4, [r5, #4]
    d614:	e5c52002 	strb	r2, [r5, #2]
    d618:	e5c53003 	strb	r3, [r5, #3]
    d61c:	0affffed 	beq	d5d8 <malloc+0xa4>
    d620:	ebffee23 	bl	8eb4 <LeaveCritical>
    d624:	eaffffeb 	b	d5d8 <malloc+0xa4>
    d628:	ebffee13 	bl	8e7c <EnterCritical>
    d62c:	e5960010 	ldr	r0, [r6, #16]
    d630:	eaffffc6 	b	d550 <malloc+0x1c>

0000d634 <free>:
    d634:	e3500000 	cmp	r0, #0
    d638:	012fff1e 	bxeq	lr
    d63c:	e92d4070 	push	{r4, r5, r6, lr}
    d640:	e30f4b14 	movw	r4, #64276	; 0xfb14
    d644:	e3404000 	movt	r4, #0
    d648:	e2405010 	sub	r5, r0, #16
    d64c:	e5943000 	ldr	r3, [r4]
    d650:	e3530000 	cmp	r3, #0
    d654:	08bd8070 	popeq	{r4, r5, r6, pc}
    d658:	e5952004 	ldr	r2, [r5, #4]
    d65c:	e1520003 	cmp	r2, r3
    d660:	1a000002 	bne	d670 <free+0x3c>
    d664:	ea000005 	b	d680 <free+0x4c>
    d668:	e1530002 	cmp	r3, r2
    d66c:	0a000003 	beq	d680 <free+0x4c>
    d670:	e5b43008 	ldr	r3, [r4, #8]!
    d674:	e3530000 	cmp	r3, #0
    d678:	1afffffa 	bne	d668 <free+0x34>
    d67c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d680:	e30f6c54 	movw	r6, #64596	; 0xfc54
    d684:	e3406000 	movt	r6, #0
    d688:	e5960010 	ldr	r0, [r6, #16]
    d68c:	e3500000 	cmp	r0, #0
    d690:	1a000003 	bne	d6a4 <free+0x70>
    d694:	e5943004 	ldr	r3, [r4, #4]
    d698:	e5853008 	str	r3, [r5, #8]
    d69c:	e5845004 	str	r5, [r4, #4]
    d6a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d6a4:	ebffedf4 	bl	8e7c <EnterCritical>
    d6a8:	e5962010 	ldr	r2, [r6, #16]
    d6ac:	e5943004 	ldr	r3, [r4, #4]
    d6b0:	e3520000 	cmp	r2, #0
    d6b4:	e5853008 	str	r3, [r5, #8]
    d6b8:	e5845004 	str	r5, [r4, #4]
    d6bc:	08bd8070 	popeq	{r4, r5, r6, pc}
    d6c0:	e8bd4070 	pop	{r4, r5, r6, lr}
    d6c4:	eaffedfa 	b	8eb4 <LeaveCritical>

0000d6c8 <palloc>:
    d6c8:	e92d4070 	push	{r4, r5, r6, lr}
    d6cc:	e30f5c54 	movw	r5, #64596	; 0xfc54
    d6d0:	e3405000 	movt	r5, #0
    d6d4:	e5950014 	ldr	r0, [r5, #20]
    d6d8:	e3500000 	cmp	r0, #0
    d6dc:	1a00000d 	bne	d718 <palloc+0x50>
    d6e0:	e5954018 	ldr	r4, [r5, #24]
    d6e4:	e3540000 	cmp	r4, #0
    d6e8:	0a00000f 	beq	d72c <palloc+0x64>
    d6ec:	e5943004 	ldr	r3, [r4, #4]
    d6f0:	e3a02000 	mov	r2, #0
    d6f4:	e5842000 	str	r2, [r4]
    d6f8:	e5853018 	str	r3, [r5, #24]
    d6fc:	e3500000 	cmp	r0, #0
    d700:	1a000001 	bne	d70c <palloc+0x44>
    d704:	e1a00004 	mov	r0, r4
    d708:	e8bd8070 	pop	{r4, r5, r6, pc}
    d70c:	ebffede8 	bl	8eb4 <LeaveCritical>
    d710:	e1a00004 	mov	r0, r4
    d714:	e8bd8070 	pop	{r4, r5, r6, pc}
    d718:	ebffedd7 	bl	8e7c <EnterCritical>
    d71c:	e5954018 	ldr	r4, [r5, #24]
    d720:	e5950014 	ldr	r0, [r5, #20]
    d724:	e3540000 	cmp	r4, #0
    d728:	1affffef 	bne	d6ec <palloc+0x24>
    d72c:	e5954008 	ldr	r4, [r5, #8]
    d730:	e595200c 	ldr	r2, [r5, #12]
    d734:	e2843a01 	add	r3, r4, #4096	; 0x1000
    d738:	e5853008 	str	r3, [r5, #8]
    d73c:	e1530002 	cmp	r3, r2
    d740:	9affffed 	bls	d6fc <palloc+0x34>
    d744:	e3500000 	cmp	r0, #0
    d748:	08bd8070 	popeq	{r4, r5, r6, pc}
    d74c:	ebffedd8 	bl	8eb4 <LeaveCritical>
    d750:	e3a00000 	mov	r0, #0
    d754:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d758 <pfree>:
    d758:	e92d4070 	push	{r4, r5, r6, lr}
    d75c:	e2505000 	subs	r5, r0, #0
    d760:	08bd8070 	popeq	{r4, r5, r6, pc}
    d764:	e30f4c54 	movw	r4, #64596	; 0xfc54
    d768:	e3404000 	movt	r4, #0
    d76c:	e5940014 	ldr	r0, [r4, #20]
    d770:	e3500000 	cmp	r0, #0
    d774:	1a000006 	bne	d794 <pfree+0x3c>
    d778:	e5941018 	ldr	r1, [r4, #24]
    d77c:	e3042d43 	movw	r2, #19779	; 0x4d43
    d780:	e5845018 	str	r5, [r4, #24]
    d784:	e3452047 	movt	r2, #20551	; 0x5047
    d788:	e5852000 	str	r2, [r5]
    d78c:	e5851004 	str	r1, [r5, #4]
    d790:	e8bd8070 	pop	{r4, r5, r6, pc}
    d794:	ebffedb8 	bl	8e7c <EnterCritical>
    d798:	e5941014 	ldr	r1, [r4, #20]
    d79c:	e5942018 	ldr	r2, [r4, #24]
    d7a0:	e3043d43 	movw	r3, #19779	; 0x4d43
    d7a4:	e3510000 	cmp	r1, #0
    d7a8:	e3453047 	movt	r3, #20551	; 0x5047
    d7ac:	e5845018 	str	r5, [r4, #24]
    d7b0:	e5853000 	str	r3, [r5]
    d7b4:	e5852004 	str	r2, [r5, #4]
    d7b8:	08bd8070 	popeq	{r4, r5, r6, pc}
    d7bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    d7c0:	eaffedbb 	b	8eb4 <LeaveCritical>

0000d7c4 <_GLOBAL__sub_I_mem_init>:
    d7c4:	e30f3c54 	movw	r3, #64596	; 0xfc54
    d7c8:	e3403000 	movt	r3, #0
    d7cc:	e3a02001 	mov	r2, #1
    d7d0:	e5832010 	str	r2, [r3, #16]
    d7d4:	e5832014 	str	r2, [r3, #20]
    d7d8:	e12fff1e 	bx	lr

0000d7dc <CBcmMailBox::CBcmMailBox(unsigned int)>:
    d7dc:	e3a02000 	mov	r2, #0
    d7e0:	e8800006 	stm	r0, {r1, r2}
    d7e4:	e12fff1e 	bx	lr

0000d7e8 <CBcmMailBox::~CBcmMailBox()>:
    d7e8:	e12fff1e 	bx	lr

0000d7ec <CBcmMailBox::WriteRead(unsigned int)>:
    d7ec:	e92d4070 	push	{r4, r5, r6, lr}
    d7f0:	e1a05000 	mov	r5, r0
    d7f4:	e5900004 	ldr	r0, [r0, #4]
    d7f8:	e1a06001 	mov	r6, r1
    d7fc:	e3500000 	cmp	r0, #0
    d800:	1a000023 	bne	d894 <CBcmMailBox::WriteRead(unsigned int)+0xa8>
    d804:	e3a04a0b 	mov	r4, #45056	; 0xb000
    d808:	e3434f00 	movt	r4, #16128	; 0x3f00
    d80c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    d810:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d814:	1a000005 	bne	d830 <CBcmMailBox::WriteRead(unsigned int)+0x44>
    d818:	e3a00014 	mov	r0, #20
    d81c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    d820:	ebffefdd 	bl	979c <CTimer::SimpleMsDelay(unsigned int)>
    d824:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    d828:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d82c:	0afffff9 	beq	d818 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
    d830:	e3a01a0b 	mov	r1, #45056	; 0xb000
    d834:	e3431f00 	movt	r1, #16128	; 0x3f00
    d838:	e59138b8 	ldr	r3, [r1, #2232]	; 0x8b8
    d83c:	e3530000 	cmp	r3, #0
    d840:	bafffffc 	blt	d838 <CBcmMailBox::WriteRead(unsigned int)+0x4c>
    d844:	e5953000 	ldr	r3, [r5]
    d848:	e3a02a0b 	mov	r2, #45056	; 0xb000
    d84c:	e3432f00 	movt	r2, #16128	; 0x3f00
    d850:	e1866003 	orr	r6, r6, r3
    d854:	e58168a0 	str	r6, [r1, #2208]	; 0x8a0
    d858:	e5950000 	ldr	r0, [r5]
    d85c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    d860:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d864:	1afffffc 	bne	d85c <CBcmMailBox::WriteRead(unsigned int)+0x70>
    d868:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    d86c:	e203100f 	and	r1, r3, #15
    d870:	e1510000 	cmp	r1, r0
    d874:	1afffff8 	bne	d85c <CBcmMailBox::WriteRead(unsigned int)+0x70>
    d878:	e5952004 	ldr	r2, [r5, #4]
    d87c:	e3c3400f 	bic	r4, r3, #15
    d880:	e3520000 	cmp	r2, #0
    d884:	0a000000 	beq	d88c <CBcmMailBox::WriteRead(unsigned int)+0xa0>
    d888:	ebffed89 	bl	8eb4 <LeaveCritical>
    d88c:	e1a00004 	mov	r0, r4
    d890:	e8bd8070 	pop	{r4, r5, r6, pc}
    d894:	ebffed78 	bl	8e7c <EnterCritical>
    d898:	eaffffd9 	b	d804 <CBcmMailBox::WriteRead(unsigned int)+0x18>

0000d89c <CBcmMailBox::Flush()>:
    d89c:	e92d4010 	push	{r4, lr}
    d8a0:	e3a04a0b 	mov	r4, #45056	; 0xb000
    d8a4:	e3434f00 	movt	r4, #16128	; 0x3f00
    d8a8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    d8ac:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d8b0:	18bd8010 	popne	{r4, pc}
    d8b4:	e3a00014 	mov	r0, #20
    d8b8:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    d8bc:	ebffefb6 	bl	979c <CTimer::SimpleMsDelay(unsigned int)>
    d8c0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    d8c4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d8c8:	0afffff9 	beq	d8b4 <CBcmMailBox::Flush()+0x18>
    d8cc:	e8bd8010 	pop	{r4, pc}

0000d8d0 <CBcmMailBox::Read()>:
    d8d0:	e5901000 	ldr	r1, [r0]
    d8d4:	e3a02a0b 	mov	r2, #45056	; 0xb000
    d8d8:	e3432f00 	movt	r2, #16128	; 0x3f00
    d8dc:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    d8e0:	e3130101 	tst	r3, #1073741824	; 0x40000000
    d8e4:	1afffffc 	bne	d8dc <CBcmMailBox::Read()+0xc>
    d8e8:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    d8ec:	e200300f 	and	r3, r0, #15
    d8f0:	e1510003 	cmp	r1, r3
    d8f4:	1afffff8 	bne	d8dc <CBcmMailBox::Read()+0xc>
    d8f8:	e3c0000f 	bic	r0, r0, #15
    d8fc:	e12fff1e 	bx	lr

0000d900 <CBcmMailBox::Write(unsigned int)>:
    d900:	e3a02a0b 	mov	r2, #45056	; 0xb000
    d904:	e3432f00 	movt	r2, #16128	; 0x3f00
    d908:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    d90c:	e3530000 	cmp	r3, #0
    d910:	bafffffc 	blt	d908 <CBcmMailBox::Write(unsigned int)+0x8>
    d914:	e5903000 	ldr	r3, [r0]
    d918:	e1811003 	orr	r1, r1, r3
    d91c:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
    d920:	e12fff1e 	bx	lr

0000d924 <__Divide>:
    d924:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d928:	e2514000 	subs	r4, r1, #0
    d92c:	e1a08000 	mov	r8, r0
    d930:	e1a09002 	mov	r9, r2
    d934:	0a000020 	beq	d9bc <__Divide+0x98>
    d938:	e3a05000 	mov	r5, #0
    d93c:	e3a07000 	mov	r7, #0
    d940:	e1550007 	cmp	r5, r7
    d944:	e1a06008 	mov	r6, r8
    d948:	01540008 	cmpeq	r4, r8
    d94c:	2a00001e 	bcs	d9cc <__Divide+0xa8>
    d950:	e3a03001 	mov	r3, #1
    d954:	ea000000 	b	d95c <__Divide+0x38>
    d958:	e1a03000 	mov	r3, r0
    d95c:	e0944004 	adds	r4, r4, r4
    d960:	e2830001 	add	r0, r3, #1
    d964:	e0a55005 	adc	r5, r5, r5
    d968:	e1550007 	cmp	r5, r7
    d96c:	01540006 	cmpeq	r4, r6
    d970:	3afffff8 	bcc	d958 <__Divide+0x34>
    d974:	e3500000 	cmp	r0, #0
    d978:	0a00000c 	beq	d9b0 <__Divide+0x8c>
    d97c:	e3a00000 	mov	r0, #0
    d980:	e1570005 	cmp	r7, r5
    d984:	e2433001 	sub	r3, r3, #1
    d988:	01560004 	cmpeq	r6, r4
    d98c:	e1a00080 	lsl	r0, r0, #1
    d990:	20488004 	subcs	r8, r8, r4
    d994:	23800001 	orrcs	r0, r0, #1
    d998:	e1b050a5 	lsrs	r5, r5, #1
    d99c:	e1a04064 	rrx	r4, r4
    d9a0:	e3730001 	cmn	r3, #1
    d9a4:	e1a06008 	mov	r6, r8
    d9a8:	e3a07000 	mov	r7, #0
    d9ac:	1afffff3 	bne	d980 <__Divide+0x5c>
    d9b0:	e3590000 	cmp	r9, #0
    d9b4:	15898000 	strne	r8, [r9]
    d9b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d9bc:	eb000294 	bl	e414 <CExceptionHandler::Get()>
    d9c0:	e1a01004 	mov	r1, r4
    d9c4:	eb000253 	bl	e318 <CExceptionHandler::Throw(unsigned int)>
    d9c8:	eaffffda 	b	d938 <__Divide+0x14>
    d9cc:	e3a03000 	mov	r3, #0
    d9d0:	eaffffe9 	b	d97c <__Divide+0x58>

0000d9d4 <__DivideInteger>:
    d9d4:	e2502000 	subs	r2, r0, #0
    d9d8:	e92d4010 	push	{r4, lr}
    d9dc:	ba000004 	blt	d9f4 <__DivideInteger+0x20>
    d9e0:	e3510000 	cmp	r1, #0
    d9e4:	ba00000e 	blt	da24 <__DivideInteger+0x50>
    d9e8:	e3a02000 	mov	r2, #0
    d9ec:	e8bd4010 	pop	{r4, lr}
    d9f0:	eaffffcb 	b	d924 <__Divide>
    d9f4:	e3510000 	cmp	r1, #0
    d9f8:	ba000004 	blt	da10 <__DivideInteger+0x3c>
    d9fc:	e2620000 	rsb	r0, r2, #0
    da00:	e3a02000 	mov	r2, #0
    da04:	ebffffc6 	bl	d924 <__Divide>
    da08:	e2600000 	rsb	r0, r0, #0
    da0c:	e8bd8010 	pop	{r4, pc}
    da10:	e2620000 	rsb	r0, r2, #0
    da14:	e2611000 	rsb	r1, r1, #0
    da18:	e3a02000 	mov	r2, #0
    da1c:	e8bd4010 	pop	{r4, lr}
    da20:	eaffffbf 	b	d924 <__Divide>
    da24:	e2611000 	rsb	r1, r1, #0
    da28:	e3a02000 	mov	r2, #0
    da2c:	ebffffbc 	bl	d924 <__Divide>
    da30:	e2600000 	rsb	r0, r0, #0
    da34:	e8bd8010 	pop	{r4, pc}

0000da38 <memset>:
    da38:	e3520000 	cmp	r2, #0
    da3c:	012fff1e 	bxeq	lr
    da40:	e6af1071 	sxtb	r1, r1
    da44:	e0802002 	add	r2, r0, r2
    da48:	e1a03000 	mov	r3, r0
    da4c:	e4c31001 	strb	r1, [r3], #1
    da50:	e1530002 	cmp	r3, r2
    da54:	1afffffc 	bne	da4c <memset+0x14>
    da58:	e12fff1e 	bx	lr

0000da5c <memcmp>:
    da5c:	e3520000 	cmp	r2, #0
    da60:	0a00000e 	beq	daa0 <memcmp+0x44>
    da64:	e5d0c000 	ldrb	ip, [r0]
    da68:	e5d13000 	ldrb	r3, [r1]
    da6c:	e15c0003 	cmp	ip, r3
    da70:	ca00000c 	bgt	daa8 <memcmp+0x4c>
    da74:	ba00000d 	blt	dab0 <memcmp+0x54>
    da78:	e0812002 	add	r2, r1, r2
    da7c:	e2811001 	add	r1, r1, #1
    da80:	ea000004 	b	da98 <memcmp+0x3c>
    da84:	e5f0c001 	ldrb	ip, [r0, #1]!
    da88:	e4d13001 	ldrb	r3, [r1], #1
    da8c:	e15c0003 	cmp	ip, r3
    da90:	ca000004 	bgt	daa8 <memcmp+0x4c>
    da94:	ba000005 	blt	dab0 <memcmp+0x54>
    da98:	e1510002 	cmp	r1, r2
    da9c:	1afffff8 	bne	da84 <memcmp+0x28>
    daa0:	e3a00000 	mov	r0, #0
    daa4:	e12fff1e 	bx	lr
    daa8:	e3a00001 	mov	r0, #1
    daac:	e12fff1e 	bx	lr
    dab0:	e3e00000 	mvn	r0, #0
    dab4:	e12fff1e 	bx	lr

0000dab8 <strlen>:
    dab8:	e1d010d0 	ldrsb	r1, [r0]
    dabc:	e2803001 	add	r3, r0, #1
    dac0:	e3510000 	cmp	r1, #0
    dac4:	0a000003 	beq	dad8 <strlen+0x20>
    dac8:	e0431000 	sub	r1, r3, r0
    dacc:	e0d320d1 	ldrsb	r2, [r3], #1
    dad0:	e3520000 	cmp	r2, #0
    dad4:	1afffffb 	bne	dac8 <strlen+0x10>
    dad8:	e1a00001 	mov	r0, r1
    dadc:	e12fff1e 	bx	lr

0000dae0 <strcmp>:
    dae0:	e1d030d0 	ldrsb	r3, [r0]
    dae4:	e1d120d0 	ldrsb	r2, [r1]
    dae8:	e3530000 	cmp	r3, #0
    daec:	1a000007 	bne	db10 <strcmp+0x30>
    daf0:	ea000008 	b	db18 <strcmp+0x38>
    daf4:	e1530002 	cmp	r3, r2
    daf8:	ca00000b 	bgt	db2c <strcmp+0x4c>
    dafc:	ba00000c 	blt	db34 <strcmp+0x54>
    db00:	e1f030d1 	ldrsb	r3, [r0, #1]!
    db04:	e3530000 	cmp	r3, #0
    db08:	0a00000b 	beq	db3c <strcmp+0x5c>
    db0c:	e1f120d1 	ldrsb	r2, [r1, #1]!
    db10:	e3520000 	cmp	r2, #0
    db14:	1afffff6 	bne	daf4 <strcmp+0x14>
    db18:	e1530002 	cmp	r3, r2
    db1c:	ca000002 	bgt	db2c <strcmp+0x4c>
    db20:	b3e00000 	mvnlt	r0, #0
    db24:	a3a00000 	movge	r0, #0
    db28:	e12fff1e 	bx	lr
    db2c:	e3a00001 	mov	r0, #1
    db30:	e12fff1e 	bx	lr
    db34:	e3e00000 	mvn	r0, #0
    db38:	e12fff1e 	bx	lr
    db3c:	e1d120d1 	ldrsb	r2, [r1, #1]
    db40:	e1530002 	cmp	r3, r2
    db44:	dafffff5 	ble	db20 <strcmp+0x40>
    db48:	eafffff7 	b	db2c <strcmp+0x4c>

0000db4c <strcpy>:
    db4c:	e1d130d0 	ldrsb	r3, [r1]
    db50:	e1a02000 	mov	r2, r0
    db54:	e3530000 	cmp	r3, #0
    db58:	0a000003 	beq	db6c <strcpy+0x20>
    db5c:	e4c23001 	strb	r3, [r2], #1
    db60:	e1f130d1 	ldrsb	r3, [r1, #1]!
    db64:	e3530000 	cmp	r3, #0
    db68:	1afffffb 	bne	db5c <strcpy+0x10>
    db6c:	e3a03000 	mov	r3, #0
    db70:	e5c23000 	strb	r3, [r2]
    db74:	e12fff1e 	bx	lr

0000db78 <strncpy>:
    db78:	e3520000 	cmp	r2, #0
    db7c:	012fff1e 	bxeq	lr
    db80:	e1d1c0d0 	ldrsb	ip, [r1]
    db84:	e35c0000 	cmp	ip, #0
    db88:	0a000009 	beq	dbb4 <strncpy+0x3c>
    db8c:	e0802002 	add	r2, r0, r2
    db90:	e1a03000 	mov	r3, r0
    db94:	ea000002 	b	dba4 <strncpy+0x2c>
    db98:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    db9c:	e35c0000 	cmp	ip, #0
    dba0:	0a000004 	beq	dbb8 <strncpy+0x40>
    dba4:	e4c3c001 	strb	ip, [r3], #1
    dba8:	e1530002 	cmp	r3, r2
    dbac:	1afffff9 	bne	db98 <strncpy+0x20>
    dbb0:	e12fff1e 	bx	lr
    dbb4:	e1a03000 	mov	r3, r0
    dbb8:	e3a02000 	mov	r2, #0
    dbbc:	e5c32000 	strb	r2, [r3]
    dbc0:	e12fff1e 	bx	lr

0000dbc4 <strcat>:
    dbc4:	e1d030d0 	ldrsb	r3, [r0]
    dbc8:	e3530000 	cmp	r3, #0
    dbcc:	e1a03000 	mov	r3, r0
    dbd0:	0a000002 	beq	dbe0 <strcat+0x1c>
    dbd4:	e1f320d1 	ldrsb	r2, [r3, #1]!
    dbd8:	e3520000 	cmp	r2, #0
    dbdc:	1afffffc 	bne	dbd4 <strcat+0x10>
    dbe0:	e1d120d0 	ldrsb	r2, [r1]
    dbe4:	e3520000 	cmp	r2, #0
    dbe8:	0a000003 	beq	dbfc <strcat+0x38>
    dbec:	e4c32001 	strb	r2, [r3], #1
    dbf0:	e1f120d1 	ldrsb	r2, [r1, #1]!
    dbf4:	e3520000 	cmp	r2, #0
    dbf8:	1afffffb 	bne	dbec <strcat+0x28>
    dbfc:	e3a02000 	mov	r2, #0
    dc00:	e5c32000 	strb	r2, [r3]
    dc04:	e12fff1e 	bx	lr

0000dc08 <strchr>:
    dc08:	e1d020d0 	ldrsb	r2, [r0]
    dc0c:	e3520000 	cmp	r2, #0
    dc10:	0a000009 	beq	dc3c <strchr+0x34>
    dc14:	e1510002 	cmp	r1, r2
    dc18:	1a000002 	bne	dc28 <strchr+0x20>
    dc1c:	ea000008 	b	dc44 <strchr+0x3c>
    dc20:	e1530001 	cmp	r3, r1
    dc24:	012fff1e 	bxeq	lr
    dc28:	e1f030d1 	ldrsb	r3, [r0, #1]!
    dc2c:	e3530000 	cmp	r3, #0
    dc30:	1afffffa 	bne	dc20 <strchr+0x18>
    dc34:	e1a00003 	mov	r0, r3
    dc38:	e12fff1e 	bx	lr
    dc3c:	e1a00002 	mov	r0, r2
    dc40:	e12fff1e 	bx	lr
    dc44:	e12fff1e 	bx	lr

0000dc48 <strtok_r>:
    dc48:	e3500000 	cmp	r0, #0
    dc4c:	0a00002c 	beq	dd04 <strtok_r+0xbc>
    dc50:	e92d4030 	push	{r4, r5, lr}
    dc54:	e1d0e0d0 	ldrsb	lr, [r0]
    dc58:	e35e0000 	cmp	lr, #0
    dc5c:	11d140d0 	ldrsbne	r4, [r1]
    dc60:	0a000024 	beq	dcf8 <strtok_r+0xb0>
    dc64:	e3540000 	cmp	r4, #0
    dc68:	0a000008 	beq	dc90 <strtok_r+0x48>
    dc6c:	e15e0004 	cmp	lr, r4
    dc70:	0a000019 	beq	dcdc <strtok_r+0x94>
    dc74:	e1a0c001 	mov	ip, r1
    dc78:	ea000001 	b	dc84 <strtok_r+0x3c>
    dc7c:	e15e0003 	cmp	lr, r3
    dc80:	0a000015 	beq	dcdc <strtok_r+0x94>
    dc84:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    dc88:	e3530000 	cmp	r3, #0
    dc8c:	1afffffa 	bne	dc7c <strtok_r+0x34>
    dc90:	e35e0000 	cmp	lr, #0
    dc94:	0a000017 	beq	dcf8 <strtok_r+0xb0>
    dc98:	e1a05000 	mov	r5, r0
    dc9c:	e3540000 	cmp	r4, #0
    dca0:	0a000008 	beq	dcc8 <strtok_r+0x80>
    dca4:	e15e0004 	cmp	lr, r4
    dca8:	0a00000d 	beq	dce4 <strtok_r+0x9c>
    dcac:	e1a0c001 	mov	ip, r1
    dcb0:	ea000001 	b	dcbc <strtok_r+0x74>
    dcb4:	e15e0003 	cmp	lr, r3
    dcb8:	0a000009 	beq	dce4 <strtok_r+0x9c>
    dcbc:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    dcc0:	e3530000 	cmp	r3, #0
    dcc4:	1afffffa 	bne	dcb4 <strtok_r+0x6c>
    dcc8:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    dccc:	e35e0000 	cmp	lr, #0
    dcd0:	1afffff1 	bne	dc9c <strtok_r+0x54>
    dcd4:	e5825000 	str	r5, [r2]
    dcd8:	e8bd8030 	pop	{r4, r5, pc}
    dcdc:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    dce0:	eaffffdf 	b	dc64 <strtok_r+0x1c>
    dce4:	e3a03000 	mov	r3, #0
    dce8:	e2855001 	add	r5, r5, #1
    dcec:	e5453001 	strb	r3, [r5, #-1]
    dcf0:	e5825000 	str	r5, [r2]
    dcf4:	e8bd8030 	pop	{r4, r5, pc}
    dcf8:	e3a00000 	mov	r0, #0
    dcfc:	e5820000 	str	r0, [r2]
    dd00:	e8bd8030 	pop	{r4, r5, pc}
    dd04:	e5920000 	ldr	r0, [r2]
    dd08:	e3500000 	cmp	r0, #0
    dd0c:	1affffcf 	bne	dc50 <strtok_r+0x8>
    dd10:	e12fff1e 	bx	lr

0000dd14 <strtoul>:
    dd14:	e3510000 	cmp	r1, #0
    dd18:	e92d4070 	push	{r4, r5, r6, lr}
    dd1c:	e2425002 	sub	r5, r2, #2
    dd20:	15810000 	strne	r0, [r1]
    dd24:	e3520000 	cmp	r2, #0
    dd28:	13550022 	cmpne	r5, #34	; 0x22
    dd2c:	e3c2e010 	bic	lr, r2, #16
    dd30:	83a05001 	movhi	r5, #1
    dd34:	93a05000 	movls	r5, #0
    dd38:	8a000036 	bhi	de18 <strtoul+0x104>
    dd3c:	e1d0c0d0 	ldrsb	ip, [r0]
    dd40:	e1a04000 	mov	r4, r0
    dd44:	e2800001 	add	r0, r0, #1
    dd48:	e24c3009 	sub	r3, ip, #9
    dd4c:	e35c0020 	cmp	ip, #32
    dd50:	e6ef3073 	uxtb	r3, r3
    dd54:	0afffff8 	beq	dd3c <strtoul+0x28>
    dd58:	e3530004 	cmp	r3, #4
    dd5c:	9afffff6 	bls	dd3c <strtoul+0x28>
    dd60:	e35c002b 	cmp	ip, #43	; 0x2b
    dd64:	0a00002d 	beq	de20 <strtoul+0x10c>
    dd68:	e35c002d 	cmp	ip, #45	; 0x2d
    dd6c:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
    dd70:	03a06001 	moveq	r6, #1
    dd74:	01a04000 	moveq	r4, r0
    dd78:	13a06000 	movne	r6, #0
    dd7c:	e35c0030 	cmp	ip, #48	; 0x30
    dd80:	0a00002b 	beq	de34 <strtoul+0x120>
    dd84:	e3520000 	cmp	r2, #0
    dd88:	03a0200a 	moveq	r2, #10
    dd8c:	e35c002f 	cmp	ip, #47	; 0x2f
    dd90:	e1a0300c 	mov	r3, ip
    dd94:	da00001c 	ble	de0c <strtoul+0xf8>
    dd98:	e3a05001 	mov	r5, #1
    dd9c:	e3a0e000 	mov	lr, #0
    dda0:	ea000007 	b	ddc4 <strtoul+0xb0>
    dda4:	e150000e 	cmp	r0, lr
    dda8:	e3a05000 	mov	r5, #0
    ddac:	e1a0e000 	mov	lr, r0
    ddb0:	3a000028 	bcc	de58 <strtoul+0x144>
    ddb4:	e1f430d1 	ldrsb	r3, [r4, #1]!
    ddb8:	e353002f 	cmp	r3, #47	; 0x2f
    ddbc:	e1a0c003 	mov	ip, r3
    ddc0:	da000029 	ble	de6c <strtoul+0x158>
    ddc4:	e24cc061 	sub	ip, ip, #97	; 0x61
    ddc8:	e35c0019 	cmp	ip, #25
    ddcc:	92433020 	subls	r3, r3, #32
    ddd0:	e3530040 	cmp	r3, #64	; 0x40
    ddd4:	c2433007 	subgt	r3, r3, #7
    ddd8:	e2433030 	sub	r3, r3, #48	; 0x30
    dddc:	e1520003 	cmp	r2, r3
    dde0:	e020329e 	mla	r0, lr, r2, r3
    dde4:	caffffee 	bgt	dda4 <strtoul+0x90>
    dde8:	e2255001 	eor	r5, r5, #1
    ddec:	e1a0000e 	mov	r0, lr
    ddf0:	e3510000 	cmp	r1, #0
    ddf4:	e0055006 	and	r5, r5, r6
    ddf8:	0a000000 	beq	de00 <strtoul+0xec>
    ddfc:	e5814000 	str	r4, [r1]
    de00:	e3550000 	cmp	r5, #0
    de04:	12600000 	rsbne	r0, r0, #0
    de08:	e8bd8070 	pop	{r4, r5, r6, pc}
    de0c:	e3510000 	cmp	r1, #0
    de10:	13a00000 	movne	r0, #0
    de14:	1afffff8 	bne	ddfc <strtoul+0xe8>
    de18:	e3a00000 	mov	r0, #0
    de1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    de20:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    de24:	e3a06000 	mov	r6, #0
    de28:	e1a04000 	mov	r4, r0
    de2c:	e35c0030 	cmp	ip, #48	; 0x30
    de30:	1affffd3 	bne	dd84 <strtoul+0x70>
    de34:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    de38:	e2840001 	add	r0, r4, #1
    de3c:	e3cc3020 	bic	r3, ip, #32
    de40:	e3530058 	cmp	r3, #88	; 0x58
    de44:	0a00000a 	beq	de74 <strtoul+0x160>
    de48:	e3520000 	cmp	r2, #0
    de4c:	e1a04000 	mov	r4, r0
    de50:	03a02008 	moveq	r2, #8
    de54:	eaffffcc 	b	dd8c <strtoul+0x78>
    de58:	e1510005 	cmp	r1, r5
    de5c:	0a00000a 	beq	de8c <strtoul+0x178>
    de60:	e5814000 	str	r4, [r1]
    de64:	e3e00000 	mvn	r0, #0
    de68:	e8bd8070 	pop	{r4, r5, r6, pc}
    de6c:	e3a05001 	mov	r5, #1
    de70:	eaffffde 	b	ddf0 <strtoul+0xdc>
    de74:	e35e0000 	cmp	lr, #0
    de78:	1affffe6 	bne	de18 <strtoul+0x104>
    de7c:	e1d4c0d2 	ldrsb	ip, [r4, #2]
    de80:	e3a02010 	mov	r2, #16
    de84:	e2844002 	add	r4, r4, #2
    de88:	eaffffbf 	b	dd8c <strtoul+0x78>
    de8c:	e3e00000 	mvn	r0, #0
    de90:	e8bd8070 	pop	{r4, r5, r6, pc}

0000de94 <char2int>:
    de94:	e12fff1e 	bx	lr

0000de98 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
    de98:	e5903020 	ldr	r3, [r0, #32]
    de9c:	e3a01000 	mov	r1, #0
    dea0:	e92d4010 	push	{r4, lr}
    dea4:	e24dd010 	sub	sp, sp, #16
    dea8:	e3a02c01 	mov	r2, #256	; 0x100
    deac:	e583100c 	str	r1, [r3, #12]
    deb0:	e5832010 	str	r2, [r3, #16]
    deb4:	e1a04000 	mov	r4, r0
    deb8:	e28d0008 	add	r0, sp, #8
    debc:	ebffe99b 	bl	8530 <CBcmPropertyTags::CBcmPropertyTags()>
    dec0:	e5942020 	ldr	r2, [r4, #32]
    dec4:	e3003408 	movw	r3, #1032	; 0x408
    dec8:	e28d0008 	add	r0, sp, #8
    decc:	e58d3000 	str	r3, [sp]
    ded0:	e308100b 	movw	r1, #32779	; 0x800b
    ded4:	e3003414 	movw	r3, #1044	; 0x414
    ded8:	e3401004 	movt	r1, #4
    dedc:	ebffe9bf 	bl	85e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    dee0:	e3500000 	cmp	r0, #0
    dee4:	e28d0008 	add	r0, sp, #8
    dee8:	0a000003 	beq	defc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
    deec:	e5943020 	ldr	r3, [r4, #32]
    def0:	e593300c 	ldr	r3, [r3, #12]
    def4:	e3530000 	cmp	r3, #0
    def8:	0a000003 	beq	df0c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
    defc:	ebffe991 	bl	8548 <CBcmPropertyTags::~CBcmPropertyTags()>
    df00:	e3a00000 	mov	r0, #0
    df04:	e28dd010 	add	sp, sp, #16
    df08:	e8bd8010 	pop	{r4, pc}
    df0c:	ebffe98d 	bl	8548 <CBcmPropertyTags::~CBcmPropertyTags()>
    df10:	e3a00001 	mov	r0, #1
    df14:	e28dd010 	add	sp, sp, #16
    df18:	e8bd8010 	pop	{r4, pc}

0000df1c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
    df1c:	e92d4030 	push	{r4, r5, lr}
    df20:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    df24:	e3510000 	cmp	r1, #0
    df28:	13520000 	cmpne	r2, #0
    df2c:	e3a05000 	mov	r5, #0
    df30:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
    df34:	e1a04000 	mov	r4, r0
    df38:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
    df3c:	e8800006 	stm	r0, {r1, r2}
    df40:	e5803010 	str	r3, [r0, #16]
    df44:	e580e00c 	str	lr, [r0, #12]
    df48:	e580c008 	str	ip, [r0, #8]
    df4c:	e5805014 	str	r5, [r0, #20]
    df50:	e5805018 	str	r5, [r0, #24]
    df54:	e580501c 	str	r5, [r0, #28]
    df58:	e5805020 	str	r5, [r0, #32]
    df5c:	1a000011 	bne	dfa8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
    df60:	e28d000c 	add	r0, sp, #12
    df64:	ebffe971 	bl	8530 <CBcmPropertyTags::CBcmPropertyTags()>
    df68:	e3a03014 	mov	r3, #20
    df6c:	e58d5000 	str	r5, [sp]
    df70:	e28d000c 	add	r0, sp, #12
    df74:	e3a01003 	mov	r1, #3
    df78:	e08d2003 	add	r2, sp, r3
    df7c:	e3401004 	movt	r1, #4
    df80:	ebffe996 	bl	85e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    df84:	e1500005 	cmp	r0, r5
    df88:	1a000027 	bne	e02c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
    df8c:	e3a02d0a 	mov	r2, #640	; 0x280
    df90:	e3a03e1e 	mov	r3, #480	; 0x1e0
    df94:	e884000c 	stm	r4, {r2, r3}
    df98:	e28d000c 	add	r0, sp, #12
    df9c:	ebffe969 	bl	8548 <CBcmPropertyTags::~CBcmPropertyTags()>
    dfa0:	e594c008 	ldr	ip, [r4, #8]
    dfa4:	e5943010 	ldr	r3, [r4, #16]
    dfa8:	e35c0000 	cmp	ip, #0
    dfac:	0a00001a 	beq	e01c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
    dfb0:	e594200c 	ldr	r2, [r4, #12]
    dfb4:	e3520000 	cmp	r2, #0
    dfb8:	0a000017 	beq	e01c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
    dfbc:	e3530008 	cmp	r3, #8
    dfc0:	8a000007 	bhi	dfe4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
    dfc4:	e3000414 	movw	r0, #1044	; 0x414
    dfc8:	ebffeba6 	bl	8e68 <operator new[](unsigned int)>
    dfcc:	e3a02b01 	mov	r2, #1024	; 0x400
    dfd0:	e3a01000 	mov	r1, #0
    dfd4:	e5840020 	str	r0, [r4, #32]
    dfd8:	e2800014 	add	r0, r0, #20
    dfdc:	ebfffe95 	bl	da38 <memset>
    dfe0:	e5943010 	ldr	r3, [r4, #16]
    dfe4:	e5945000 	ldr	r5, [r4]
    dfe8:	e30f2b4c 	movw	r2, #64332	; 0xfb4c
    dfec:	e594e004 	ldr	lr, [r4, #4]
    dff0:	e3402000 	movt	r2, #0
    dff4:	e594c008 	ldr	ip, [r4, #8]
    dff8:	e1a00004 	mov	r0, r4
    dffc:	e594100c 	ldr	r1, [r4, #12]
    e000:	e582500c 	str	r5, [r2, #12]
    e004:	e582e010 	str	lr, [r2, #16]
    e008:	e582c020 	str	ip, [r2, #32]
    e00c:	e5821024 	str	r1, [r2, #36]	; 0x24
    e010:	e5823034 	str	r3, [r2, #52]	; 0x34
    e014:	e28dd02c 	add	sp, sp, #44	; 0x2c
    e018:	e8bd8030 	pop	{r4, r5, pc}
    e01c:	e8940006 	ldm	r4, {r1, r2}
    e020:	e5841008 	str	r1, [r4, #8]
    e024:	e584200c 	str	r2, [r4, #12]
    e028:	eaffffe3 	b	dfbc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
    e02c:	e59d2020 	ldr	r2, [sp, #32]
    e030:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    e034:	e2420d0a 	sub	r0, r2, #640	; 0x280
    e038:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
    e03c:	e5842000 	str	r2, [r4]
    e040:	e3510f96 	cmp	r1, #600	; 0x258
    e044:	93500c05 	cmpls	r0, #1280	; 0x500
    e048:	e5843004 	str	r3, [r4, #4]
    e04c:	9affffd1 	bls	df98 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
    e050:	eaffffcd 	b	df8c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

0000e054 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
    e054:	e92d4010 	push	{r4, lr}
    e058:	e3a01014 	mov	r1, #20
    e05c:	e1a04000 	mov	r4, r0
    e060:	e5900020 	ldr	r0, [r0, #32]
    e064:	ebffeb82 	bl	8e74 <operator delete(void*, unsigned int)>
    e068:	e1a00004 	mov	r0, r4
    e06c:	e8bd8010 	pop	{r4, pc}

0000e070 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
    e070:	e5903010 	ldr	r3, [r0, #16]
    e074:	e3530008 	cmp	r3, #8
    e078:	812fff1e 	bxhi	lr
    e07c:	e5900020 	ldr	r0, [r0, #32]
    e080:	e1a03982 	lsl	r3, r2, #19
    e084:	e1a0c5a2 	lsr	ip, r2, #11
    e088:	e203373e 	and	r3, r3, #16252928	; 0xf80000
    e08c:	e0801101 	add	r1, r0, r1, lsl #2
    e090:	e1a02282 	lsl	r2, r2, #5
    e094:	e183318c 	orr	r3, r3, ip, lsl #3
    e098:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
    e09c:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
    e0a0:	e1822003 	orr	r2, r2, r3
    e0a4:	e5812014 	str	r2, [r1, #20]
    e0a8:	e12fff1e 	bx	lr

0000e0ac <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
    e0ac:	e5903010 	ldr	r3, [r0, #16]
    e0b0:	e3530008 	cmp	r3, #8
    e0b4:	95903020 	ldrls	r3, [r0, #32]
    e0b8:	90831101 	addls	r1, r3, r1, lsl #2
    e0bc:	95812014 	strls	r2, [r1, #20]
    e0c0:	e12fff1e 	bx	lr

0000e0c4 <CBcmFrameBuffer::Initialize()>:
    e0c4:	e92d4070 	push	{r4, r5, r6, lr}
    e0c8:	e24dd008 	sub	sp, sp, #8
    e0cc:	e30f6b4c 	movw	r6, #64332	; 0xfb4c
    e0d0:	e3406000 	movt	r6, #0
    e0d4:	e1a05000 	mov	r5, r0
    e0d8:	e1a0000d 	mov	r0, sp
    e0dc:	ebffe913 	bl	8530 <CBcmPropertyTags::CBcmPropertyTags()>
    e0e0:	e1a01006 	mov	r1, r6
    e0e4:	e1a0000d 	mov	r0, sp
    e0e8:	e3a02070 	mov	r2, #112	; 0x70
    e0ec:	ebffe91a 	bl	855c <CBcmPropertyTags::GetTags(void*, unsigned int)>
    e0f0:	e2504000 	subs	r4, r0, #0
    e0f4:	0a00001e 	beq	e174 <CBcmFrameBuffer::Initialize()+0xb0>
    e0f8:	e596400c 	ldr	r4, [r6, #12]
    e0fc:	e3540000 	cmp	r4, #0
    e100:	0a00001b 	beq	e174 <CBcmFrameBuffer::Initialize()+0xb0>
    e104:	e5964010 	ldr	r4, [r6, #16]
    e108:	e3540000 	cmp	r4, #0
    e10c:	0a000018 	beq	e174 <CBcmFrameBuffer::Initialize()+0xb0>
    e110:	e5964020 	ldr	r4, [r6, #32]
    e114:	e3540000 	cmp	r4, #0
    e118:	0a000015 	beq	e174 <CBcmFrameBuffer::Initialize()+0xb0>
    e11c:	e5964024 	ldr	r4, [r6, #36]	; 0x24
    e120:	e3540000 	cmp	r4, #0
    e124:	0a000012 	beq	e174 <CBcmFrameBuffer::Initialize()+0xb0>
    e128:	e5964034 	ldr	r4, [r6, #52]	; 0x34
    e12c:	e3540000 	cmp	r4, #0
    e130:	0a00000f 	beq	e174 <CBcmFrameBuffer::Initialize()+0xb0>
    e134:	e5964058 	ldr	r4, [r6, #88]	; 0x58
    e138:	e3540000 	cmp	r4, #0
    e13c:	0a00000c 	beq	e174 <CBcmFrameBuffer::Initialize()+0xb0>
    e140:	e5951010 	ldr	r1, [r5, #16]
    e144:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
    e148:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
    e14c:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
    e150:	e3510008 	cmp	r1, #8
    e154:	e5854014 	str	r4, [r5, #20]
    e158:	e5852018 	str	r2, [r5, #24]
    e15c:	83a04001 	movhi	r4, #1
    e160:	e585301c 	str	r3, [r5, #28]
    e164:	8a000002 	bhi	e174 <CBcmFrameBuffer::Initialize()+0xb0>
    e168:	e1a00005 	mov	r0, r5
    e16c:	ebffff49 	bl	de98 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
    e170:	e1a04000 	mov	r4, r0
    e174:	e1a0000d 	mov	r0, sp
    e178:	ebffe8f2 	bl	8548 <CBcmPropertyTags::~CBcmPropertyTags()>
    e17c:	e1a00004 	mov	r0, r4
    e180:	e28dd008 	add	sp, sp, #8
    e184:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e188 <CBcmFrameBuffer::GetWidth() const>:
    e188:	e5900000 	ldr	r0, [r0]
    e18c:	e12fff1e 	bx	lr

0000e190 <CBcmFrameBuffer::GetHeight() const>:
    e190:	e5900004 	ldr	r0, [r0, #4]
    e194:	e12fff1e 	bx	lr

0000e198 <CBcmFrameBuffer::GetVirtWidth() const>:
    e198:	e5900008 	ldr	r0, [r0, #8]
    e19c:	e12fff1e 	bx	lr

0000e1a0 <CBcmFrameBuffer::GetVirtHeight() const>:
    e1a0:	e590000c 	ldr	r0, [r0, #12]
    e1a4:	e12fff1e 	bx	lr

0000e1a8 <CBcmFrameBuffer::GetPitch() const>:
    e1a8:	e590001c 	ldr	r0, [r0, #28]
    e1ac:	e12fff1e 	bx	lr

0000e1b0 <CBcmFrameBuffer::GetDepth() const>:
    e1b0:	e5900010 	ldr	r0, [r0, #16]
    e1b4:	e12fff1e 	bx	lr

0000e1b8 <CBcmFrameBuffer::GetBuffer() const>:
    e1b8:	e5900014 	ldr	r0, [r0, #20]
    e1bc:	e12fff1e 	bx	lr

0000e1c0 <CBcmFrameBuffer::GetSize() const>:
    e1c0:	e5900018 	ldr	r0, [r0, #24]
    e1c4:	e12fff1e 	bx	lr

0000e1c8 <CBcmFrameBuffer::UpdatePalette()>:
    e1c8:	e5903010 	ldr	r3, [r0, #16]
    e1cc:	e3530008 	cmp	r3, #8
    e1d0:	9a000001 	bls	e1dc <CBcmFrameBuffer::UpdatePalette()+0x14>
    e1d4:	e3a00001 	mov	r0, #1
    e1d8:	e12fff1e 	bx	lr
    e1dc:	eaffff2d 	b	de98 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0000e1e0 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
    e1e0:	e92d4070 	push	{r4, r5, r6, lr}
    e1e4:	e24dd028 	sub	sp, sp, #40	; 0x28
    e1e8:	e28d000c 	add	r0, sp, #12
    e1ec:	e1a05001 	mov	r5, r1
    e1f0:	e1a06002 	mov	r6, r2
    e1f4:	ebffe8cd 	bl	8530 <CBcmPropertyTags::CBcmPropertyTags()>
    e1f8:	e3a03008 	mov	r3, #8
    e1fc:	e28d000c 	add	r0, sp, #12
    e200:	e58d3000 	str	r3, [sp]
    e204:	e3081009 	movw	r1, #32777	; 0x8009
    e208:	e3a03014 	mov	r3, #20
    e20c:	e3401004 	movt	r1, #4
    e210:	e08d2003 	add	r2, sp, r3
    e214:	e58d5020 	str	r5, [sp, #32]
    e218:	e58d6024 	str	r6, [sp, #36]	; 0x24
    e21c:	ebffe8ef 	bl	85e0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e220:	e2504000 	subs	r4, r0, #0
    e224:	0a000006 	beq	e244 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
    e228:	e59d3020 	ldr	r3, [sp, #32]
    e22c:	e1550003 	cmp	r5, r3
    e230:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
    e234:	13a04000 	movne	r4, #0
    e238:	00444006 	subeq	r4, r4, r6
    e23c:	016f4f14 	clzeq	r4, r4
    e240:	01a042a4 	lsreq	r4, r4, #5
    e244:	e28d000c 	add	r0, sp, #12
    e248:	ebffe8be 	bl	8548 <CBcmPropertyTags::~CBcmPropertyTags()>
    e24c:	e1a00004 	mov	r0, r4
    e250:	e28dd028 	add	sp, sp, #40	; 0x28
    e254:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e258 <CDevice::~CDevice()>:
    e258:	e12fff1e 	bx	lr

0000e25c <CDevice::Read(void*, unsigned int)>:
    e25c:	e3e00000 	mvn	r0, #0
    e260:	e12fff1e 	bx	lr

0000e264 <CDevice::Seek(unsigned long long)>:
    e264:	e3e00000 	mvn	r0, #0
    e268:	e3e01000 	mvn	r1, #0
    e26c:	e12fff1e 	bx	lr

0000e270 <CDevice::~CDevice()>:
    e270:	e92d4010 	push	{r4, lr}
    e274:	e3a01004 	mov	r1, #4
    e278:	e1a04000 	mov	r4, r0
    e27c:	ebffeafc 	bl	8e74 <operator delete(void*, unsigned int)>
    e280:	e1a00004 	mov	r0, r4
    e284:	e8bd8010 	pop	{r4, pc}

0000e288 <CDevice::CDevice()>:
    e288:	e59f3004 	ldr	r3, [pc, #4]	; e294 <CDevice::CDevice()+0xc>
    e28c:	e5803000 	str	r3, [r0]
    e290:	e12fff1e 	bx	lr
    e294:	0000f98c 	.word	0x0000f98c

0000e298 <CExceptionHandler::CExceptionHandler()>:
    e298:	e59f1058 	ldr	r1, [pc, #88]	; e2f8 <CExceptionHandler::CExceptionHandler()+0x60>
    e29c:	e3a0c000 	mov	ip, #0
    e2a0:	e59f2054 	ldr	r2, [pc, #84]	; e2fc <CExceptionHandler::CExceptionHandler()+0x64>
    e2a4:	e59f3054 	ldr	r3, [pc, #84]	; e300 <CExceptionHandler::CExceptionHandler()+0x68>
    e2a8:	e92d4010 	push	{r4, lr}
    e2ac:	e1a01141 	asr	r1, r1, #2
    e2b0:	e30fec70 	movw	lr, #64624	; 0xfc70
    e2b4:	e1a02142 	asr	r2, r2, #2
    e2b8:	e340e000 	movt	lr, #0
    e2bc:	e1a03143 	asr	r3, r3, #2
    e2c0:	e2411002 	sub	r1, r1, #2
    e2c4:	e2422002 	sub	r2, r2, #2
    e2c8:	e2433002 	sub	r3, r3, #2
    e2cc:	e58e0000 	str	r0, [lr]
    e2d0:	e1a04000 	mov	r4, r0
    e2d4:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    e2d8:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    e2dc:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e2e0:	e58c1004 	str	r1, [ip, #4]
    e2e4:	e58c200c 	str	r2, [ip, #12]
    e2e8:	e58c3010 	str	r3, [ip, #16]
    e2ec:	ebffeafa 	bl	8edc <SyncDataAndInstructionCache>
    e2f0:	e1a00004 	mov	r0, r4
    e2f4:	e8bd8010 	pop	{r4, pc}
    e2f8:	0000e438 	.word	0x0000e438
    e2fc:	0000e470 	.word	0x0000e470
    e300:	0000e4ac 	.word	0x0000e4ac

0000e304 <CExceptionHandler::~CExceptionHandler()>:
    e304:	e30f3c70 	movw	r3, #64624	; 0xfc70
    e308:	e3403000 	movt	r3, #0
    e30c:	e3a02000 	mov	r2, #0
    e310:	e5832000 	str	r2, [r3]
    e314:	e12fff1e 	bx	lr

0000e318 <CExceptionHandler::Throw(unsigned int)>:
    e318:	e92d4010 	push	{r4, lr}
    e31c:	e24dd008 	sub	sp, sp, #8
    e320:	e1a04001 	mov	r4, r1
    e324:	ebfff46b 	bl	b4d8 <CLogger::Get()>
    e328:	e30f2bbc 	movw	r2, #64444	; 0xfbbc
    e32c:	e3402000 	movt	r2, #0
    e330:	e30f39a8 	movw	r3, #63912	; 0xf9a8
    e334:	e30f19a0 	movw	r1, #63904	; 0xf9a0
    e338:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    e33c:	e3403000 	movt	r3, #0
    e340:	e3401000 	movt	r1, #0
    e344:	e3a02000 	mov	r2, #0
    e348:	e58dc000 	str	ip, [sp]
    e34c:	ebfff53d 	bl	b848 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e350:	e28dd008 	add	sp, sp, #8
    e354:	e8bd8010 	pop	{r4, pc}

0000e358 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    e358:	e3510002 	cmp	r1, #2
    e35c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    e360:	e1a05001 	mov	r5, r1
    e364:	e24dd024 	sub	sp, sp, #36	; 0x24
    e368:	e1a04002 	mov	r4, r2
    e36c:	0a000025 	beq	e408 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
    e370:	e3510003 	cmp	r1, #3
    e374:	0a000020 	beq	e3fc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
    e378:	e3a08000 	mov	r8, #0
    e37c:	e1a09008 	mov	r9, r8
    e380:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    e384:	e30f19a0 	movw	r1, #63904	; 0xf9a0
    e388:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    e38c:	e3401000 	movt	r1, #0
    e390:	e203301f 	and	r3, r3, #31
    e394:	e5947040 	ldr	r7, [r4, #64]	; 0x40
    e398:	e3530012 	cmp	r3, #18
    e39c:	089400c0 	ldmeq	r4, {r6, r7}
    e3a0:	e1a00006 	mov	r0, r6
    e3a4:	eb0000ac 	bl	e65c <debug_stacktrace(unsigned int const*, char const*)>
    e3a8:	ebfff44a 	bl	b4d8 <CLogger::Get()>
    e3ac:	e30f3bbc 	movw	r3, #64444	; 0xfbbc
    e3b0:	e3403000 	movt	r3, #0
    e3b4:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    e3b8:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    e3bc:	e3a02000 	mov	r2, #0
    e3c0:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    e3c4:	e30f19a0 	movw	r1, #63904	; 0xf9a0
    e3c8:	e58d7014 	str	r7, [sp, #20]
    e3cc:	e3401000 	movt	r1, #0
    e3d0:	e58d6010 	str	r6, [sp, #16]
    e3d4:	e30f39b8 	movw	r3, #63928	; 0xf9b8
    e3d8:	e58d800c 	str	r8, [sp, #12]
    e3dc:	e3403000 	movt	r3, #0
    e3e0:	e58d9008 	str	r9, [sp, #8]
    e3e4:	e58d4000 	str	r4, [sp]
    e3e8:	e58de018 	str	lr, [sp, #24]
    e3ec:	e58dc004 	str	ip, [sp, #4]
    e3f0:	ebfff514 	bl	b848 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e3f4:	e28dd024 	add	sp, sp, #36	; 0x24
    e3f8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    e3fc:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
    e400:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
    e404:	eaffffdd 	b	e380 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    e408:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
    e40c:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
    e410:	eaffffda 	b	e380 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>

0000e414 <CExceptionHandler::Get()>:
    e414:	e30f3c70 	movw	r3, #64624	; 0xfc70
    e418:	e3403000 	movt	r3, #0
    e41c:	e5930000 	ldr	r0, [r3]
    e420:	e12fff1e 	bx	lr

0000e424 <ExceptionHandler>:
    e424:	e30f3c70 	movw	r3, #64624	; 0xfc70
    e428:	e3403000 	movt	r3, #0
    e42c:	e1a02001 	mov	r2, r1
    e430:	e1a01000 	mov	r1, r0
    e434:	e5930000 	ldr	r0, [r3]
    e438:	eaffffc6 	b	e358 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000e43c <UndefinedInstructionStub>:
    e43c:	e24ee004 	sub	lr, lr, #4
    e440:	e92d4000 	stmfd	sp!, {lr}
    e444:	e14fe000 	mrs	lr, SPSR
    e448:	e92d4000 	stmfd	sp!, {lr}
    e44c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e450:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e454:	e1a0100d 	mov	r1, sp
    e458:	f1020012 	cps	#18
    e45c:	e1a0200d 	mov	r2, sp
    e460:	e1a0300e 	mov	r3, lr
    e464:	f102001f 	cps	#31
    e468:	e1a0d001 	mov	sp, r1
    e46c:	e92d000c 	push	{r2, r3}
    e470:	e1a0100d 	mov	r1, sp
    e474:	e3a00001 	mov	r0, #1
    e478:	eaffffe9 	b	e424 <ExceptionHandler>

0000e47c <PrefetchAbortStub>:
    e47c:	e24ee004 	sub	lr, lr, #4
    e480:	e92d4000 	stmfd	sp!, {lr}
    e484:	e14fe000 	mrs	lr, SPSR
    e488:	e92d4000 	stmfd	sp!, {lr}
    e48c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e490:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e494:	e1a0100d 	mov	r1, sp
    e498:	f1020012 	cps	#18
    e49c:	e1a0200d 	mov	r2, sp
    e4a0:	e1a0300e 	mov	r3, lr
    e4a4:	f102001f 	cps	#31
    e4a8:	e1a0d001 	mov	sp, r1
    e4ac:	e92d000c 	push	{r2, r3}
    e4b0:	e1a0100d 	mov	r1, sp
    e4b4:	e3a00002 	mov	r0, #2
    e4b8:	eaffffd9 	b	e424 <ExceptionHandler>

0000e4bc <DataAbortStub>:
    e4bc:	e24ee008 	sub	lr, lr, #8
    e4c0:	e92d4000 	stmfd	sp!, {lr}
    e4c4:	e14fe000 	mrs	lr, SPSR
    e4c8:	e92d4000 	stmfd	sp!, {lr}
    e4cc:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e4d0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e4d4:	e1a0100d 	mov	r1, sp
    e4d8:	f1020012 	cps	#18
    e4dc:	e1a0200d 	mov	r2, sp
    e4e0:	e1a0300e 	mov	r3, lr
    e4e4:	f102001f 	cps	#31
    e4e8:	e1a0d001 	mov	sp, r1
    e4ec:	e92d000c 	push	{r2, r3}
    e4f0:	e1a0100d 	mov	r1, sp
    e4f4:	e3a00003 	mov	r0, #3
    e4f8:	eaffffc9 	b	e424 <ExceptionHandler>

0000e4fc <IRQStub>:
    e4fc:	e24ee004 	sub	lr, lr, #4
    e500:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e504:	ebfff96c 	bl	cabc <InterruptHandler>
    e508:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000e50c <FIQStub>:
    e50c:	e24ee004 	sub	lr, lr, #4
    e510:	e92d400f 	push	{r0, r1, r2, r3, lr}
    e514:	e59f2024 	ldr	r2, [pc, #36]	; e540 <FIQStub+0x34>
    e518:	e5921000 	ldr	r1, [r2]
    e51c:	e3510000 	cmp	r1, #0
    e520:	0a000002 	beq	e530 <FIQStub+0x24>
    e524:	e5920004 	ldr	r0, [r2, #4]
    e528:	e12fff31 	blx	r1
    e52c:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    e530:	e59f100c 	ldr	r1, [pc, #12]	; e544 <FIQStub+0x38>
    e534:	e3a00000 	mov	r0, #0
    e538:	e5810000 	str	r0, [r1]
    e53c:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    e540:	0000fbcc 	.word	0x0000fbcc
    e544:	3f00b20c 	.word	0x3f00b20c

0000e548 <debug_hexdump(void const*, unsigned int, char const*)>:
    e548:	e3520000 	cmp	r2, #0
    e54c:	e30f3a40 	movw	r3, #64064	; 0xfa40
    e550:	e3403000 	movt	r3, #0
    e554:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e558:	11a03002 	movne	r3, r2
    e55c:	e24dd054 	sub	sp, sp, #84	; 0x54
    e560:	e1a06003 	mov	r6, r3
    e564:	e1a05001 	mov	r5, r1
    e568:	e1a04000 	mov	r4, r0
    e56c:	e58d304c 	str	r3, [sp, #76]	; 0x4c
    e570:	ebfff3d8 	bl	b4d8 <CLogger::Get()>
    e574:	e58d4004 	str	r4, [sp, #4]
    e578:	e1a01006 	mov	r1, r6
    e57c:	e58d5000 	str	r5, [sp]
    e580:	e30f3a48 	movw	r3, #64072	; 0xfa48
    e584:	e3a02004 	mov	r2, #4
    e588:	e3403000 	movt	r3, #0
    e58c:	ebfff4ad 	bl	b848 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e590:	e3550000 	cmp	r5, #0
    e594:	0a00002a 	beq	e644 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    e598:	e30f9a6c 	movw	r9, #64108	; 0xfa6c
    e59c:	e3409000 	movt	r9, #0
    e5a0:	ebfff3cc 	bl	b4d8 <CLogger::Get()>
    e5a4:	e5d4800f 	ldrb	r8, [r4, #15]
    e5a8:	e5d4700e 	ldrb	r7, [r4, #14]
    e5ac:	e6ffc074 	uxth	ip, r4
    e5b0:	e5d4600d 	ldrb	r6, [r4, #13]
    e5b4:	e1a03009 	mov	r3, r9
    e5b8:	e5d4e00c 	ldrb	lr, [r4, #12]
    e5bc:	e3a02004 	mov	r2, #4
    e5c0:	e5d4b00b 	ldrb	fp, [r4, #11]
    e5c4:	e2844010 	add	r4, r4, #16
    e5c8:	e554a006 	ldrb	sl, [r4, #-6]
    e5cc:	e58d8040 	str	r8, [sp, #64]	; 0x40
    e5d0:	e5548007 	ldrb	r8, [r4, #-7]
    e5d4:	e58d703c 	str	r7, [sp, #60]	; 0x3c
    e5d8:	e5547008 	ldrb	r7, [r4, #-8]
    e5dc:	e58d6038 	str	r6, [sp, #56]	; 0x38
    e5e0:	e5546009 	ldrb	r6, [r4, #-9]
    e5e4:	e58de034 	str	lr, [sp, #52]	; 0x34
    e5e8:	e554e00a 	ldrb	lr, [r4, #-10]
    e5ec:	e58db030 	str	fp, [sp, #48]	; 0x30
    e5f0:	e554b00b 	ldrb	fp, [r4, #-11]
    e5f4:	e58da02c 	str	sl, [sp, #44]	; 0x2c
    e5f8:	e554a00c 	ldrb	sl, [r4, #-12]
    e5fc:	e58d8028 	str	r8, [sp, #40]	; 0x28
    e600:	e554800d 	ldrb	r8, [r4, #-13]
    e604:	e58d7024 	str	r7, [sp, #36]	; 0x24
    e608:	e554700e 	ldrb	r7, [r4, #-14]
    e60c:	e58d6020 	str	r6, [sp, #32]
    e610:	e554600f 	ldrb	r6, [r4, #-15]
    e614:	e58de01c 	str	lr, [sp, #28]
    e618:	e554e010 	ldrb	lr, [r4, #-16]
    e61c:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
    e620:	e58db018 	str	fp, [sp, #24]
    e624:	e58da014 	str	sl, [sp, #20]
    e628:	e58d8010 	str	r8, [sp, #16]
    e62c:	e58d700c 	str	r7, [sp, #12]
    e630:	e58d6008 	str	r6, [sp, #8]
    e634:	e88d5000 	stm	sp, {ip, lr}
    e638:	ebfff482 	bl	b848 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e63c:	e355000f 	cmp	r5, #15
    e640:	8a000001 	bhi	e64c <debug_hexdump(void const*, unsigned int, char const*)+0x104>
    e644:	e28dd054 	add	sp, sp, #84	; 0x54
    e648:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e64c:	e2555010 	subs	r5, r5, #16
    e650:	1affffd2 	bne	e5a0 <debug_hexdump(void const*, unsigned int, char const*)+0x58>
    e654:	e28dd054 	add	sp, sp, #84	; 0x54
    e658:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e65c <debug_stacktrace(unsigned int const*, char const*)>:
    e65c:	e3510000 	cmp	r1, #0
    e660:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e664:	e30f7a40 	movw	r7, #64064	; 0xfa40
    e668:	e30e66ec 	movw	r6, #59116	; 0xe6ec
    e66c:	e3407000 	movt	r7, #0
    e670:	e30f8ac4 	movw	r8, #64196	; 0xfac4
    e674:	e24dd008 	sub	sp, sp, #8
    e678:	11a07001 	movne	r7, r1
    e67c:	e3406000 	movt	r6, #0
    e680:	e3408000 	movt	r8, #0
    e684:	e1a05000 	mov	r5, r0
    e688:	e3a04000 	mov	r4, #0
    e68c:	ea000003 	b	e6a0 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    e690:	e2844001 	add	r4, r4, #1
    e694:	e2855004 	add	r5, r5, #4
    e698:	e3540040 	cmp	r4, #64	; 0x40
    e69c:	0a000010 	beq	e6e4 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    e6a0:	e5953000 	ldr	r3, [r5]
    e6a4:	e3530902 	cmp	r3, #32768	; 0x8000
    e6a8:	3afffff8 	bcc	e690 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    e6ac:	e1530006 	cmp	r3, r6
    e6b0:	2afffff6 	bcs	e690 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    e6b4:	ebfff387 	bl	b4d8 <CLogger::Get()>
    e6b8:	e595c000 	ldr	ip, [r5]
    e6bc:	e1a03008 	mov	r3, r8
    e6c0:	e58d4000 	str	r4, [sp]
    e6c4:	e3a02004 	mov	r2, #4
    e6c8:	e1a01007 	mov	r1, r7
    e6cc:	e58dc004 	str	ip, [sp, #4]
    e6d0:	e2844001 	add	r4, r4, #1
    e6d4:	ebfff45b 	bl	b848 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e6d8:	e3540040 	cmp	r4, #64	; 0x40
    e6dc:	e2855004 	add	r5, r5, #4
    e6e0:	1affffee 	bne	e6a0 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    e6e4:	e28dd008 	add	sp, sp, #8
    e6e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
