
kernel7.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea000349 	b	8d8c <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

00008070 <main>:
    8070:	e92d4010 	push	{r4, lr}
    8074:	e24dd020 	sub	sp, sp, #32
    8078:	e28d0004 	add	r0, sp, #4
    807c:	eb000013 	bl	80d0 <CKernel::CKernel()>
    8080:	e28d0004 	add	r0, sp, #4
    8084:	eb000021 	bl	8110 <CKernel::Initialize()>
    8088:	e2504000 	subs	r4, r0, #0
    808c:	0a00000d 	beq	80c8 <main+0x58>
    8090:	e28d0004 	add	r0, sp, #4
    8094:	eb00001f 	bl	8118 <CKernel::Run()>
    8098:	e3500002 	cmp	r0, #2
    809c:	0a000006 	beq	80bc <main+0x4c>
    80a0:	eb00032b 	bl	8d54 <halt>
    80a4:	e3a04000 	mov	r4, #0
    80a8:	e28d0004 	add	r0, sp, #4
    80ac:	eb00000f 	bl	80f0 <CKernel::~CKernel()>
    80b0:	e1a00004 	mov	r0, r4
    80b4:	e28dd020 	add	sp, sp, #32
    80b8:	e8bd8010 	pop	{r4, pc}
    80bc:	eb000329 	bl	8d68 <reboot>
    80c0:	e3a04001 	mov	r4, #1
    80c4:	eafffff7 	b	80a8 <main+0x38>
    80c8:	eb000321 	bl	8d54 <halt>
    80cc:	eafffff5 	b	80a8 <main+0x38>

000080d0 <CKernel::CKernel()>:
    80d0:	e92d4010 	push	{r4, lr}
    80d4:	e3a01001 	mov	r1, #1
    80d8:	e1a04000 	mov	r4, r0
    80dc:	eb0002c5 	bl	8bf8 <CMemorySystem::CMemorySystem(int)>
    80e0:	e2840010 	add	r0, r4, #16
    80e4:	eb000054 	bl	823c <CActLED::CActLED()>
    80e8:	e1a00004 	mov	r0, r4
    80ec:	e8bd8010 	pop	{r4, pc}

000080f0 <CKernel::~CKernel()>:
    80f0:	e92d4010 	push	{r4, lr}
    80f4:	e1a04000 	mov	r4, r0
    80f8:	e2800010 	add	r0, r0, #16
    80fc:	eb000029 	bl	81a8 <CActLED::~CActLED()>
    8100:	e1a00004 	mov	r0, r4
    8104:	eb00027e 	bl	8b04 <CMemorySystem::~CMemorySystem()>
    8108:	e1a00004 	mov	r0, r4
    810c:	e8bd8010 	pop	{r4, pc}

00008110 <CKernel::Initialize()>:
    8110:	e3a00001 	mov	r0, #1
    8114:	e12fff1e 	bx	lr

00008118 <CKernel::Run()>:
    8118:	e92d4030 	push	{r4, r5, lr}
    811c:	e24dd054 	sub	sp, sp, #84	; 0x54
    8120:	e1a05000 	mov	r5, r0
    8124:	e3a03000 	mov	r3, #0
    8128:	e3a02001 	mov	r2, #1
    812c:	e3a01036 	mov	r1, #54	; 0x36
    8130:	e1a0000d 	mov	r0, sp
    8134:	e2855010 	add	r5, r5, #16
    8138:	eb000220 	bl	89c0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    813c:	e28d0028 	add	r0, sp, #40	; 0x28
    8140:	e3a03000 	mov	r3, #0
    8144:	e3a02001 	mov	r2, #1
    8148:	e3a01037 	mov	r1, #55	; 0x37
    814c:	e3a0400a 	mov	r4, #10
    8150:	eb00021a 	bl	89c0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8154:	e1a00005 	mov	r0, r5
    8158:	eb000017 	bl	81bc <CActLED::On()>
    815c:	e1a0000d 	mov	r0, sp
    8160:	eb0000f2 	bl	8530 <CGPIOPin::Invert()>
    8164:	e28d0028 	add	r0, sp, #40	; 0x28
    8168:	eb0000f0 	bl	8530 <CGPIOPin::Invert()>
    816c:	e3a000c8 	mov	r0, #200	; 0xc8
    8170:	eb00051e 	bl	95f0 <CTimer::SimpleMsDelay(unsigned int)>
    8174:	e1a00005 	mov	r0, r5
    8178:	eb00001f 	bl	81fc <CActLED::Off()>
    817c:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8180:	eb00051a 	bl	95f0 <CTimer::SimpleMsDelay(unsigned int)>
    8184:	e2544001 	subs	r4, r4, #1
    8188:	1afffff1 	bne	8154 <CKernel::Run()+0x3c>
    818c:	e28d0028 	add	r0, sp, #40	; 0x28
    8190:	eb0000ca 	bl	84c0 <CGPIOPin::~CGPIOPin()>
    8194:	e1a0000d 	mov	r0, sp
    8198:	eb0000c8 	bl	84c0 <CGPIOPin::~CGPIOPin()>
    819c:	e3a00002 	mov	r0, #2
    81a0:	e28dd054 	add	sp, sp, #84	; 0x54
    81a4:	e8bd8030 	pop	{r4, r5, pc}

000081a8 <CActLED::~CActLED()>:
    81a8:	e30c3df8 	movw	r3, #52728	; 0xcdf8
    81ac:	e3403000 	movt	r3, #0
    81b0:	e3a02000 	mov	r2, #0
    81b4:	e5832000 	str	r2, [r3]
    81b8:	e12fff1e 	bx	lr

000081bc <CActLED::On()>:
    81bc:	e5903000 	ldr	r3, [r0]
    81c0:	e3530000 	cmp	r3, #0
    81c4:	0a000004 	beq	81dc <CActLED::On()+0x20>
    81c8:	e5901008 	ldr	r1, [r0, #8]
    81cc:	e1a00003 	mov	r0, r3
    81d0:	e2911000 	adds	r1, r1, #0
    81d4:	13a01001 	movne	r1, #1
    81d8:	ea0000bf 	b	84dc <CGPIOPin::Write(unsigned int)>
    81dc:	e5903004 	ldr	r3, [r0, #4]
    81e0:	e3530000 	cmp	r3, #0
    81e4:	012fff1e 	bxeq	lr
    81e8:	e5901008 	ldr	r1, [r0, #8]
    81ec:	e1a00003 	mov	r0, r3
    81f0:	e2911000 	adds	r1, r1, #0
    81f4:	13a01001 	movne	r1, #1
    81f8:	ea000c24 	b	b290 <CVirtualGPIOPin::Write(unsigned int)>

000081fc <CActLED::Off()>:
    81fc:	e5903000 	ldr	r3, [r0]
    8200:	e3530000 	cmp	r3, #0
    8204:	0a000004 	beq	821c <CActLED::Off()+0x20>
    8208:	e5901008 	ldr	r1, [r0, #8]
    820c:	e1a00003 	mov	r0, r3
    8210:	e16f1f11 	clz	r1, r1
    8214:	e1a012a1 	lsr	r1, r1, #5
    8218:	ea0000af 	b	84dc <CGPIOPin::Write(unsigned int)>
    821c:	e5903004 	ldr	r3, [r0, #4]
    8220:	e3530000 	cmp	r3, #0
    8224:	012fff1e 	bxeq	lr
    8228:	e5901008 	ldr	r1, [r0, #8]
    822c:	e1a00003 	mov	r0, r3
    8230:	e16f1f11 	clz	r1, r1
    8234:	e1a012a1 	lsr	r1, r1, #5
    8238:	ea000c14 	b	b290 <CVirtualGPIOPin::Write(unsigned int)>

0000823c <CActLED::CActLED()>:
    823c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8240:	e30c3df8 	movw	r3, #52728	; 0xcdf8
    8244:	e24dd024 	sub	sp, sp, #36	; 0x24
    8248:	e1a04000 	mov	r4, r0
    824c:	e3403000 	movt	r3, #0
    8250:	e3a05000 	mov	r5, #0
    8254:	e28d0008 	add	r0, sp, #8
    8258:	e5845000 	str	r5, [r4]
    825c:	e5845004 	str	r5, [r4, #4]
    8260:	e5834000 	str	r4, [r3]
    8264:	eb000052 	bl	83b4 <CBcmPropertyTags::CBcmPropertyTags()>
    8268:	e3a03010 	mov	r3, #16
    826c:	e58d5000 	str	r5, [sp]
    8270:	e28d0008 	add	r0, sp, #8
    8274:	e3a01002 	mov	r1, #2
    8278:	e08d2003 	add	r2, sp, r3
    827c:	e3401001 	movt	r1, #1
    8280:	eb000077 	bl	8464 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8284:	e1500005 	cmp	r0, r5
    8288:	0a000011 	beq	82d4 <CActLED::CActLED()+0x98>
    828c:	e59d301c 	ldr	r3, [sp, #28]
    8290:	e3130502 	tst	r3, #8388608	; 0x800000
    8294:	1a000013 	bne	82e8 <CActLED::CActLED()+0xac>
    8298:	e6ff3073 	uxth	r3, r3
    829c:	e353000f 	cmp	r3, #15
    82a0:	83a06001 	movhi	r6, #1
    82a4:	9a000020 	bls	832c <CActLED::CActLED()+0xf0>
    82a8:	e3a00028 	mov	r0, #40	; 0x28
    82ac:	eb000281 	bl	8cb8 <operator new(unsigned int)>
    82b0:	e3a03000 	mov	r3, #0
    82b4:	e3a02001 	mov	r2, #1
    82b8:	e3a0102f 	mov	r1, #47	; 0x2f
    82bc:	e1a05000 	mov	r5, r0
    82c0:	eb0001be 	bl	89c0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    82c4:	e5845000 	str	r5, [r4]
    82c8:	e5846008 	str	r6, [r4, #8]
    82cc:	e1a00004 	mov	r0, r4
    82d0:	ebffffc9 	bl	81fc <CActLED::Off()>
    82d4:	e28d0008 	add	r0, sp, #8
    82d8:	eb00003b 	bl	83cc <CBcmPropertyTags::~CBcmPropertyTags()>
    82dc:	e1a00004 	mov	r0, r4
    82e0:	e28dd024 	add	sp, sp, #36	; 0x24
    82e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    82e8:	e7e73253 	ubfx	r3, r3, #4, #8
    82ec:	e3530001 	cmp	r3, #1
    82f0:	9a00000d 	bls	832c <CActLED::CActLED()+0xf0>
    82f4:	e353000c 	cmp	r3, #12
    82f8:	13530009 	cmpne	r3, #9
    82fc:	03a06001 	moveq	r6, #1
    8300:	13a06000 	movne	r6, #0
    8304:	e3530008 	cmp	r3, #8
    8308:	e2266001 	eor	r6, r6, #1
    830c:	1affffe5 	bne	82a8 <CActLED::CActLED()+0x6c>
    8310:	e3a00010 	mov	r0, #16
    8314:	eb000267 	bl	8cb8 <operator new(unsigned int)>
    8318:	e1a01005 	mov	r1, r5
    831c:	e1a07000 	mov	r7, r0
    8320:	eb000b9e 	bl	b1a0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    8324:	e5847004 	str	r7, [r4, #4]
    8328:	eaffffe6 	b	82c8 <CActLED::CActLED()+0x8c>
    832c:	e3a00028 	mov	r0, #40	; 0x28
    8330:	eb000260 	bl	8cb8 <operator new(unsigned int)>
    8334:	e3a03000 	mov	r3, #0
    8338:	e3a02001 	mov	r2, #1
    833c:	e3a01010 	mov	r1, #16
    8340:	e1a05000 	mov	r5, r0
    8344:	eb00019d 	bl	89c0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8348:	e3a03000 	mov	r3, #0
    834c:	e5845000 	str	r5, [r4]
    8350:	e5843008 	str	r3, [r4, #8]
    8354:	eaffffdc 	b	82cc <CActLED::CActLED()+0x90>

00008358 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8358:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    835c:	e2516000 	subs	r6, r1, #0
    8360:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8364:	e1a08003 	mov	r8, r3
    8368:	e1a07002 	mov	r7, r2
    836c:	e1a05000 	mov	r5, r0
    8370:	e3a04001 	mov	r4, #1
    8374:	e1a00005 	mov	r0, r5
    8378:	e2844001 	add	r4, r4, #1
    837c:	ebffff8e 	bl	81bc <CActLED::On()>
    8380:	e1a00007 	mov	r0, r7
    8384:	eb000499 	bl	95f0 <CTimer::SimpleMsDelay(unsigned int)>
    8388:	e1a00005 	mov	r0, r5
    838c:	ebffff9a 	bl	81fc <CActLED::Off()>
    8390:	e1a00008 	mov	r0, r8
    8394:	eb000495 	bl	95f0 <CTimer::SimpleMsDelay(unsigned int)>
    8398:	e1560004 	cmp	r6, r4
    839c:	2afffff4 	bcs	8374 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    83a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000083a4 <CActLED::Get()>:
    83a4:	e30c3df8 	movw	r3, #52728	; 0xcdf8
    83a8:	e3403000 	movt	r3, #0
    83ac:	e5930000 	ldr	r0, [r3]
    83b0:	e12fff1e 	bx	lr

000083b4 <CBcmPropertyTags::CBcmPropertyTags()>:
    83b4:	e92d4010 	push	{r4, lr}
    83b8:	e3a01008 	mov	r1, #8
    83bc:	e1a04000 	mov	r4, r0
    83c0:	eb000e43 	bl	bcd4 <CBcmMailBox::CBcmMailBox(unsigned int)>
    83c4:	e1a00004 	mov	r0, r4
    83c8:	e8bd8010 	pop	{r4, pc}

000083cc <CBcmPropertyTags::~CBcmPropertyTags()>:
    83cc:	e92d4010 	push	{r4, lr}
    83d0:	e1a04000 	mov	r4, r0
    83d4:	eb000e41 	bl	bce0 <CBcmMailBox::~CBcmMailBox()>
    83d8:	e1a00004 	mov	r0, r4
    83dc:	e8bd8010 	pop	{r4, pc}

000083e0 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    83e0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    83e4:	e3a04008 	mov	r4, #8
    83e8:	e3404040 	movt	r4, #64	; 0x40
    83ec:	e3a05501 	mov	r5, #4194304	; 0x400000
    83f0:	e1a06002 	mov	r6, r2
    83f4:	e282300c 	add	r3, r2, #12
    83f8:	e3a07000 	mov	r7, #0
    83fc:	e1a08000 	mov	r8, r0
    8400:	e5853000 	str	r3, [r5]
    8404:	e1a00004 	mov	r0, r4
    8408:	e5857004 	str	r7, [r5, #4]
    840c:	e1a09001 	mov	r9, r1
    8410:	eb0004c4 	bl	9728 <memcpy>
    8414:	e7847006 	str	r7, [r4, r6]
    8418:	f57ff04f 	dsb	sy
    841c:	e1a01007 	mov	r1, r7
    8420:	e1a00008 	mov	r0, r8
    8424:	e34c1040 	movt	r1, #49216	; 0xc040
    8428:	eb000e2d 	bl	bce4 <CBcmMailBox::WriteRead(unsigned int)>
    842c:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    8430:	0a000001 	beq	843c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x5c>
    8434:	e3a00000 	mov	r0, #0
    8438:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    843c:	f57ff05f 	dmb	sy
    8440:	e5953004 	ldr	r3, [r5, #4]
    8444:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    8448:	1afffff9 	bne	8434 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x54>
    844c:	e1a02006 	mov	r2, r6
    8450:	e1a01004 	mov	r1, r4
    8454:	e1a00009 	mov	r0, r9
    8458:	eb0004b2 	bl	9728 <memcpy>
    845c:	e3a00001 	mov	r0, #1
    8460:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00008464 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    8464:	e92d4010 	push	{r4, lr}
    8468:	e1a04002 	mov	r4, r2
    846c:	e59dc008 	ldr	ip, [sp, #8]
    8470:	e5821000 	str	r1, [r2]
    8474:	e243100c 	sub	r1, r3, #12
    8478:	e3ccc102 	bic	ip, ip, #-2147483648	; 0x80000000
    847c:	e5841004 	str	r1, [r4, #4]
    8480:	e1a02003 	mov	r2, r3
    8484:	e1a01004 	mov	r1, r4
    8488:	e584c008 	str	ip, [r4, #8]
    848c:	ebffffd3 	bl	83e0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    8490:	e3500000 	cmp	r0, #0
    8494:	08bd8010 	popeq	{r4, pc}
    8498:	e5940008 	ldr	r0, [r4, #8]
    849c:	e3500000 	cmp	r0, #0
    84a0:	ba000001 	blt	84ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x48>
    84a4:	e3a00000 	mov	r0, #0
    84a8:	e8bd8010 	pop	{r4, pc}
    84ac:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    84b0:	e5840008 	str	r0, [r4, #8]
    84b4:	e2900000 	adds	r0, r0, #0
    84b8:	13a00001 	movne	r0, #1
    84bc:	e8bd8010 	pop	{r4, pc}

000084c0 <CGPIOPin::~CGPIOPin()>:
    84c0:	e12fff1e 	bx	lr

000084c4 <CGPIOPin::~CGPIOPin()>:
    84c4:	e92d4010 	push	{r4, lr}
    84c8:	e3a01028 	mov	r1, #40	; 0x28
    84cc:	e1a04000 	mov	r4, r0
    84d0:	eb0001fc 	bl	8cc8 <operator delete(void*, unsigned int)>
    84d4:	e1a00004 	mov	r0, r4
    84d8:	e8bd8010 	pop	{r4, pc}

000084dc <CGPIOPin::Write(unsigned int)>:
    84dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    84e0:	e3a02028 	mov	r2, #40	; 0x28
    84e4:	e590e00c 	ldr	lr, [r0, #12]
    84e8:	e3432f20 	movt	r2, #16160	; 0x3f20
    84ec:	e590c008 	ldr	ip, [r0, #8]
    84f0:	e3510000 	cmp	r1, #0
    84f4:	e3a0301c 	mov	r3, #28
    84f8:	e3433f20 	movt	r3, #16160	; 0x3f20
    84fc:	01a03002 	moveq	r3, r2
    8500:	e5801014 	str	r1, [r0, #20]
    8504:	e783e00c 	str	lr, [r3, ip]
    8508:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000850c <CGPIOPin::Read() const>:
    850c:	e5901008 	ldr	r1, [r0, #8]
    8510:	e3a03034 	mov	r3, #52	; 0x34
    8514:	e3433f20 	movt	r3, #16160	; 0x3f20
    8518:	e590200c 	ldr	r2, [r0, #12]
    851c:	e7913003 	ldr	r3, [r1, r3]
    8520:	e1130002 	tst	r3, r2
    8524:	13a00001 	movne	r0, #1
    8528:	03a00000 	moveq	r0, #0
    852c:	e12fff1e 	bx	lr

00008530 <CGPIOPin::Invert()>:
    8530:	e5902014 	ldr	r2, [r0, #20]
    8534:	e3a01028 	mov	r1, #40	; 0x28
    8538:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    853c:	e3520001 	cmp	r2, #1
    8540:	e590e00c 	ldr	lr, [r0, #12]
    8544:	e3431f20 	movt	r1, #16160	; 0x3f20
    8548:	e590c008 	ldr	ip, [r0, #8]
    854c:	e3a0301c 	mov	r3, #28
    8550:	e3433f20 	movt	r3, #16160	; 0x3f20
    8554:	01a03001 	moveq	r3, r1
    8558:	e2222001 	eor	r2, r2, #1
    855c:	e5802014 	str	r2, [r0, #20]
    8560:	e783e00c 	str	lr, [r3, ip]
    8564:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008568 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    8568:	e580101c 	str	r1, [r0, #28]
    856c:	e1a01000 	mov	r1, r0
    8570:	e5802020 	str	r2, [r0, #32]
    8574:	e5900018 	ldr	r0, [r0, #24]
    8578:	ea000aaf 	b	b03c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>

0000857c <CGPIOPin::DisconnectInterrupt()>:
    857c:	e1a01000 	mov	r1, r0
    8580:	e3a03000 	mov	r3, #0
    8584:	e580301c 	str	r3, [r0, #28]
    8588:	e5900018 	ldr	r0, [r0, #24]
    858c:	ea000aae 	b	b04c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>

00008590 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    8590:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8594:	e30c5dfc 	movw	r5, #52732	; 0xcdfc
    8598:	e3405000 	movt	r5, #0
    859c:	e1a07000 	mov	r7, r0
    85a0:	e5973008 	ldr	r3, [r7, #8]
    85a4:	e3a0600c 	mov	r6, #12
    85a8:	e5950000 	ldr	r0, [r5]
    85ac:	e3a0404c 	mov	r4, #76	; 0x4c
    85b0:	e3434f20 	movt	r4, #16160	; 0x3f20
    85b4:	e5c71024 	strb	r1, [r7, #36]	; 0x24
    85b8:	e3500000 	cmp	r0, #0
    85bc:	e0834004 	add	r4, r3, r4
    85c0:	e0060196 	mul	r6, r6, r1
    85c4:	1a000008 	bne	85ec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x5c>
    85c8:	e597200c 	ldr	r2, [r7, #12]
    85cc:	e7943006 	ldr	r3, [r4, r6]
    85d0:	e1833002 	orr	r3, r3, r2
    85d4:	e7843006 	str	r3, [r4, r6]
    85d8:	e5953000 	ldr	r3, [r5]
    85dc:	e3530000 	cmp	r3, #0
    85e0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    85e4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    85e8:	ea0001c6 	b	8d08 <LeaveCritical>
    85ec:	eb0001b7 	bl	8cd0 <EnterCritical>
    85f0:	eafffff4 	b	85c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>

000085f4 <CGPIOPin::DisableInterrupt()>:
    85f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    85f8:	e30c6dfc 	movw	r6, #52732	; 0xcdfc
    85fc:	e3406000 	movt	r6, #0
    8600:	e1a05000 	mov	r5, r0
    8604:	e5d52024 	ldrb	r2, [r5, #36]	; 0x24
    8608:	e3a0700c 	mov	r7, #12
    860c:	e5960000 	ldr	r0, [r6]
    8610:	e3a0404c 	mov	r4, #76	; 0x4c
    8614:	e5953008 	ldr	r3, [r5, #8]
    8618:	e3434f20 	movt	r4, #16160	; 0x3f20
    861c:	e3500000 	cmp	r0, #0
    8620:	e0070297 	mul	r7, r7, r2
    8624:	e0834004 	add	r4, r3, r4
    8628:	1a00000a 	bne	8658 <CGPIOPin::DisableInterrupt()+0x64>
    862c:	e7973004 	ldr	r3, [r7, r4]
    8630:	e595200c 	ldr	r2, [r5, #12]
    8634:	e1c33002 	bic	r3, r3, r2
    8638:	e7873004 	str	r3, [r7, r4]
    863c:	e5963000 	ldr	r3, [r6]
    8640:	e3530000 	cmp	r3, #0
    8644:	0a000000 	beq	864c <CGPIOPin::DisableInterrupt()+0x58>
    8648:	eb0001ae 	bl	8d08 <LeaveCritical>
    864c:	e3a03006 	mov	r3, #6
    8650:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    8654:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8658:	eb00019c 	bl	8cd0 <EnterCritical>
    865c:	eafffff2 	b	862c <CGPIOPin::DisableInterrupt()+0x38>

00008660 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    8660:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8664:	e30c5dfc 	movw	r5, #52732	; 0xcdfc
    8668:	e3405000 	movt	r5, #0
    866c:	e1a07000 	mov	r7, r0
    8670:	e5973008 	ldr	r3, [r7, #8]
    8674:	e3a0600c 	mov	r6, #12
    8678:	e5950000 	ldr	r0, [r5]
    867c:	e3a0404c 	mov	r4, #76	; 0x4c
    8680:	e3434f20 	movt	r4, #16160	; 0x3f20
    8684:	e5c71025 	strb	r1, [r7, #37]	; 0x25
    8688:	e3500000 	cmp	r0, #0
    868c:	e0834004 	add	r4, r3, r4
    8690:	e0060196 	mul	r6, r6, r1
    8694:	1a000008 	bne	86bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x5c>
    8698:	e597200c 	ldr	r2, [r7, #12]
    869c:	e7943006 	ldr	r3, [r4, r6]
    86a0:	e1833002 	orr	r3, r3, r2
    86a4:	e7843006 	str	r3, [r4, r6]
    86a8:	e5953000 	ldr	r3, [r5]
    86ac:	e3530000 	cmp	r3, #0
    86b0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    86b4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    86b8:	ea000192 	b	8d08 <LeaveCritical>
    86bc:	eb000183 	bl	8cd0 <EnterCritical>
    86c0:	eafffff4 	b	8698 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>

000086c4 <CGPIOPin::DisableInterrupt2()>:
    86c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    86c8:	e30c6dfc 	movw	r6, #52732	; 0xcdfc
    86cc:	e3406000 	movt	r6, #0
    86d0:	e1a05000 	mov	r5, r0
    86d4:	e5d52025 	ldrb	r2, [r5, #37]	; 0x25
    86d8:	e3a0700c 	mov	r7, #12
    86dc:	e5960000 	ldr	r0, [r6]
    86e0:	e3a0404c 	mov	r4, #76	; 0x4c
    86e4:	e5953008 	ldr	r3, [r5, #8]
    86e8:	e3434f20 	movt	r4, #16160	; 0x3f20
    86ec:	e3500000 	cmp	r0, #0
    86f0:	e0070297 	mul	r7, r7, r2
    86f4:	e0834004 	add	r4, r3, r4
    86f8:	1a00000a 	bne	8728 <CGPIOPin::DisableInterrupt2()+0x64>
    86fc:	e7973004 	ldr	r3, [r7, r4]
    8700:	e595200c 	ldr	r2, [r5, #12]
    8704:	e1c33002 	bic	r3, r3, r2
    8708:	e7873004 	str	r3, [r7, r4]
    870c:	e5963000 	ldr	r3, [r6]
    8710:	e3530000 	cmp	r3, #0
    8714:	0a000000 	beq	871c <CGPIOPin::DisableInterrupt2()+0x58>
    8718:	eb00017a 	bl	8d08 <LeaveCritical>
    871c:	e3a03006 	mov	r3, #6
    8720:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    8724:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8728:	eb000168 	bl	8cd0 <EnterCritical>
    872c:	eafffff2 	b	86fc <CGPIOPin::DisableInterrupt2()+0x38>

00008730 <CGPIOPin::ReadAll()>:
    8730:	e3a03000 	mov	r3, #0
    8734:	e3433f20 	movt	r3, #16160	; 0x3f20
    8738:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    873c:	e12fff1e 	bx	lr

00008740 <CGPIOPin::SetPullUpMode(unsigned int)>:
    8740:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8744:	e30c5dfc 	movw	r5, #52732	; 0xcdfc
    8748:	e3405000 	movt	r5, #0
    874c:	e1a07000 	mov	r7, r0
    8750:	e5973008 	ldr	r3, [r7, #8]
    8754:	e3a04098 	mov	r4, #152	; 0x98
    8758:	e5950000 	ldr	r0, [r5]
    875c:	e3434f20 	movt	r4, #16160	; 0x3f20
    8760:	e1a08001 	mov	r8, r1
    8764:	e0834004 	add	r4, r3, r4
    8768:	e3500000 	cmp	r0, #0
    876c:	1a000010 	bne	87b4 <CGPIOPin::SetPullUpMode(unsigned int)+0x74>
    8770:	e3a06000 	mov	r6, #0
    8774:	e3436f20 	movt	r6, #16160	; 0x3f20
    8778:	e3a00005 	mov	r0, #5
    877c:	e5868094 	str	r8, [r6, #148]	; 0x94
    8780:	eb0003a9 	bl	962c <CTimer::SimpleusDelay(unsigned int)>
    8784:	e597300c 	ldr	r3, [r7, #12]
    8788:	e3a00005 	mov	r0, #5
    878c:	e5843000 	str	r3, [r4]
    8790:	eb0003a5 	bl	962c <CTimer::SimpleusDelay(unsigned int)>
    8794:	e3a03000 	mov	r3, #0
    8798:	e5863094 	str	r3, [r6, #148]	; 0x94
    879c:	e5843000 	str	r3, [r4]
    87a0:	e5953000 	ldr	r3, [r5]
    87a4:	e3530000 	cmp	r3, #0
    87a8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    87ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    87b0:	ea000154 	b	8d08 <LeaveCritical>
    87b4:	eb000145 	bl	8cd0 <EnterCritical>
    87b8:	eaffffec 	b	8770 <CGPIOPin::SetPullUpMode(unsigned int)+0x30>

000087bc <CGPIOPin::SetAlternateFunction(unsigned int)>:
    87bc:	e590c004 	ldr	ip, [r0, #4]
    87c0:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    87c4:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    87c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    87cc:	e3a0e00a 	mov	lr, #10
    87d0:	e083229c 	umull	r2, r3, ip, r2
    87d4:	e30c5dfc 	movw	r5, #52732	; 0xcdfc
    87d8:	e3405000 	movt	r5, #0
    87dc:	e1a07001 	mov	r7, r1
    87e0:	e5950000 	ldr	r0, [r5]
    87e4:	e1a041a3 	lsr	r4, r3, #3
    87e8:	e3500000 	cmp	r0, #0
    87ec:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    87f0:	e064c49e 	mls	r4, lr, r4, ip
    87f4:	e2833702 	add	r3, r3, #524288	; 0x80000
    87f8:	e1a06103 	lsl	r6, r3, #2
    87fc:	e0844084 	add	r4, r4, r4, lsl #1
    8800:	1a00000c 	bne	8838 <CGPIOPin::SetAlternateFunction(unsigned int)+0x7c>
    8804:	e30c2814 	movw	r2, #51220	; 0xc814
    8808:	e3402000 	movt	r2, #0
    880c:	e5963000 	ldr	r3, [r6]
    8810:	e3a01007 	mov	r1, #7
    8814:	e7922107 	ldr	r2, [r2, r7, lsl #2]
    8818:	e1c33411 	bic	r3, r3, r1, lsl r4
    881c:	e1834412 	orr	r4, r3, r2, lsl r4
    8820:	e5864000 	str	r4, [r6]
    8824:	e5953000 	ldr	r3, [r5]
    8828:	e3530000 	cmp	r3, #0
    882c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8830:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8834:	ea000133 	b	8d08 <LeaveCritical>
    8838:	eb000124 	bl	8cd0 <EnterCritical>
    883c:	eafffff0 	b	8804 <CGPIOPin::SetAlternateFunction(unsigned int)+0x48>

00008840 <CGPIOPin::SetMode(TGPIOMode, int)>:
    8840:	e2413004 	sub	r3, r1, #4
    8844:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8848:	e1a06002 	mov	r6, r2
    884c:	e6ef2073 	uxtb	r2, r3
    8850:	e1a05000 	mov	r5, r0
    8854:	e3520005 	cmp	r2, #5
    8858:	e5c01010 	strb	r1, [r0, #16]
    885c:	9a00002b 	bls	8910 <CGPIOPin::SetMode(TGPIOMode, int)+0xd0>
    8860:	e2963000 	adds	r3, r6, #0
    8864:	13a03001 	movne	r3, #1
    8868:	e3510001 	cmp	r1, #1
    886c:	13a03000 	movne	r3, #0
    8870:	e3530000 	cmp	r3, #0
    8874:	1a00004e 	bne	89b4 <CGPIOPin::SetMode(TGPIOMode, int)+0x174>
    8878:	e5951004 	ldr	r1, [r5, #4]
    887c:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    8880:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    8884:	e3a0c00a 	mov	ip, #10
    8888:	e30c7dfc 	movw	r7, #52732	; 0xcdfc
    888c:	e3407000 	movt	r7, #0
    8890:	e0832291 	umull	r2, r3, r1, r2
    8894:	e5970000 	ldr	r0, [r7]
    8898:	e3500000 	cmp	r0, #0
    889c:	e1a041a3 	lsr	r4, r3, #3
    88a0:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    88a4:	e064149c 	mls	r4, ip, r4, r1
    88a8:	e2833702 	add	r3, r3, #524288	; 0x80000
    88ac:	e1a08103 	lsl	r8, r3, #2
    88b0:	e0844084 	add	r4, r4, r4, lsl #1
    88b4:	1a000024 	bne	894c <CGPIOPin::SetMode(TGPIOMode, int)+0x10c>
    88b8:	e5d52010 	ldrb	r2, [r5, #16]
    88bc:	e3a01007 	mov	r1, #7
    88c0:	e5983000 	ldr	r3, [r8]
    88c4:	e2422001 	sub	r2, r2, #1
    88c8:	e16f2f12 	clz	r2, r2
    88cc:	e1c33411 	bic	r3, r3, r1, lsl r4
    88d0:	e1a022a2 	lsr	r2, r2, #5
    88d4:	e1834412 	orr	r4, r3, r2, lsl r4
    88d8:	e5884000 	str	r4, [r8]
    88dc:	e5973000 	ldr	r3, [r7]
    88e0:	e3530000 	cmp	r3, #0
    88e4:	1a00001a 	bne	8954 <CGPIOPin::SetMode(TGPIOMode, int)+0x114>
    88e8:	e3560000 	cmp	r6, #0
    88ec:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    88f0:	e5d53010 	ldrb	r3, [r5, #16]
    88f4:	e3530003 	cmp	r3, #3
    88f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    88fc:	ea000009 	b	8928 <CGPIOPin::SetMode(TGPIOMode, int)+0xe8>
    8900:	000089a4 	.word	0x000089a4
    8904:	00008984 	.word	0x00008984
    8908:	00008974 	.word	0x00008974
    890c:	00008964 	.word	0x00008964
    8910:	e3560000 	cmp	r6, #0
    8914:	1a000004 	bne	892c <CGPIOPin::SetMode(TGPIOMode, int)+0xec>
    8918:	e1a00005 	mov	r0, r5
    891c:	e1a01003 	mov	r1, r3
    8920:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8924:	eaffffa4 	b	87bc <CGPIOPin::SetAlternateFunction(unsigned int)>
    8928:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    892c:	e3a01000 	mov	r1, #0
    8930:	ebffff82 	bl	8740 <CGPIOPin::SetPullUpMode(unsigned int)>
    8934:	e5d51010 	ldrb	r1, [r5, #16]
    8938:	e1a00005 	mov	r0, r5
    893c:	e2413004 	sub	r3, r1, #4
    8940:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8944:	e1a01003 	mov	r1, r3
    8948:	eaffff9b 	b	87bc <CGPIOPin::SetAlternateFunction(unsigned int)>
    894c:	eb0000df 	bl	8cd0 <EnterCritical>
    8950:	eaffffd8 	b	88b8 <CGPIOPin::SetMode(TGPIOMode, int)+0x78>
    8954:	eb0000eb 	bl	8d08 <LeaveCritical>
    8958:	e3560000 	cmp	r6, #0
    895c:	1affffe3 	bne	88f0 <CGPIOPin::SetMode(TGPIOMode, int)+0xb0>
    8960:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8964:	e1a00005 	mov	r0, r5
    8968:	e3a01001 	mov	r1, #1
    896c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8970:	eaffff72 	b	8740 <CGPIOPin::SetPullUpMode(unsigned int)>
    8974:	e1a00005 	mov	r0, r5
    8978:	e3a01002 	mov	r1, #2
    897c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8980:	eaffff6e 	b	8740 <CGPIOPin::SetPullUpMode(unsigned int)>
    8984:	e595100c 	ldr	r1, [r5, #12]
    8988:	e3a03028 	mov	r3, #40	; 0x28
    898c:	e5952008 	ldr	r2, [r5, #8]
    8990:	e3433f20 	movt	r3, #16160	; 0x3f20
    8994:	e3a00000 	mov	r0, #0
    8998:	e5850014 	str	r0, [r5, #20]
    899c:	e7821003 	str	r1, [r2, r3]
    89a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    89a4:	e1a00005 	mov	r0, r5
    89a8:	e3a01000 	mov	r1, #0
    89ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    89b0:	eaffff62 	b	8740 <CGPIOPin::SetPullUpMode(unsigned int)>
    89b4:	e3a01000 	mov	r1, #0
    89b8:	ebffff60 	bl	8740 <CGPIOPin::SetPullUpMode(unsigned int)>
    89bc:	eaffffad 	b	8878 <CGPIOPin::SetMode(TGPIOMode, int)+0x38>

000089c0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    89c0:	e59fc080 	ldr	ip, [pc, #128]	; 8a48 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x88>
    89c4:	e3510035 	cmp	r1, #53	; 0x35
    89c8:	e92d4070 	push	{r4, r5, r6, lr}
    89cc:	e1a06002 	mov	r6, r2
    89d0:	e5803018 	str	r3, [r0, #24]
    89d4:	e3a02000 	mov	r2, #0
    89d8:	e3a0300a 	mov	r3, #10
    89dc:	e1a05001 	mov	r5, r1
    89e0:	e5c03010 	strb	r3, [r0, #16]
    89e4:	e1a04000 	mov	r4, r0
    89e8:	e3a03006 	mov	r3, #6
    89ec:	e5801004 	str	r1, [r0, #4]
    89f0:	e580c000 	str	ip, [r0]
    89f4:	e580201c 	str	r2, [r0, #28]
    89f8:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    89fc:	e5c03025 	strb	r3, [r0, #37]	; 0x25
    8a00:	9a000004 	bls	8a18 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x58>
    8a04:	eb000b12 	bl	b654 <CMachineInfo::Get()>
    8a08:	e6ef1075 	uxtb	r1, r5
    8a0c:	eb000af3 	bl	b5e0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    8a10:	e1a05000 	mov	r5, r0
    8a14:	e5840004 	str	r0, [r4, #4]
    8a18:	e1a032a5 	lsr	r3, r5, #5
    8a1c:	e3a02001 	mov	r2, #1
    8a20:	e205501f 	and	r5, r5, #31
    8a24:	e1a00004 	mov	r0, r4
    8a28:	e1a03103 	lsl	r3, r3, #2
    8a2c:	e1a05512 	lsl	r5, r2, r5
    8a30:	e1a01006 	mov	r1, r6
    8a34:	e5843008 	str	r3, [r4, #8]
    8a38:	e584500c 	str	r5, [r4, #12]
    8a3c:	ebffff7f 	bl	8840 <CGPIOPin::SetMode(TGPIOMode, int)>
    8a40:	e1a00004 	mov	r0, r4
    8a44:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a48:	0000c834 	.word	0x0000c834

00008a4c <CGPIOPin::InterruptHandler()>:
    8a4c:	e590301c 	ldr	r3, [r0, #28]
    8a50:	e5900020 	ldr	r0, [r0, #32]
    8a54:	e12fff13 	bx	r3

00008a58 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    8a58:	e92d4070 	push	{r4, r5, r6, lr}
    8a5c:	e30c6dfc 	movw	r6, #52732	; 0xcdfc
    8a60:	e3406000 	movt	r6, #0
    8a64:	e3a04013 	mov	r4, #19
    8a68:	e3404fc8 	movt	r4, #4040	; 0xfc8
    8a6c:	e200501f 	and	r5, r0, #31
    8a70:	e5963000 	ldr	r3, [r6]
    8a74:	e08442a0 	add	r4, r4, r0, lsr #5
    8a78:	e3a02001 	mov	r2, #1
    8a7c:	e3530000 	cmp	r3, #0
    8a80:	e1a04104 	lsl	r4, r4, #2
    8a84:	e1a05512 	lsl	r5, r2, r5
    8a88:	1a000011 	bne	8ad4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
    8a8c:	e3a0308b 	mov	r3, #139	; 0x8b
    8a90:	e3433f20 	movt	r3, #16160	; 0x3f20
    8a94:	e1540003 	cmp	r4, r3
    8a98:	8a00000c 	bhi	8ad0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    8a9c:	e3a0108b 	mov	r1, #139	; 0x8b
    8aa0:	e3431f20 	movt	r1, #16160	; 0x3f20
    8aa4:	e1e02005 	mvn	r2, r5
    8aa8:	e5943000 	ldr	r3, [r4]
    8aac:	e0033002 	and	r3, r3, r2
    8ab0:	e484300c 	str	r3, [r4], #12
    8ab4:	e1540001 	cmp	r4, r1
    8ab8:	9afffffa 	bls	8aa8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    8abc:	e5963000 	ldr	r3, [r6]
    8ac0:	e3530000 	cmp	r3, #0
    8ac4:	08bd8070 	popeq	{r4, r5, r6, pc}
    8ac8:	e8bd4070 	pop	{r4, r5, r6, lr}
    8acc:	ea00008d 	b	8d08 <LeaveCritical>
    8ad0:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ad4:	e1a00003 	mov	r0, r3
    8ad8:	eb00007c 	bl	8cd0 <EnterCritical>
    8adc:	e3a0308b 	mov	r3, #139	; 0x8b
    8ae0:	e3433f20 	movt	r3, #16160	; 0x3f20
    8ae4:	e1540003 	cmp	r4, r3
    8ae8:	9affffeb 	bls	8a9c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
    8aec:	eafffff2 	b	8abc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>

00008af0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    8af0:	e30c3dfc 	movw	r3, #52732	; 0xcdfc
    8af4:	e3403000 	movt	r3, #0
    8af8:	e3a02001 	mov	r2, #1
    8afc:	e5832000 	str	r2, [r3]
    8b00:	e12fff1e 	bx	lr

00008b04 <CMemorySystem::~CMemorySystem()>:
    8b04:	e5903000 	ldr	r3, [r0]
    8b08:	e92d4070 	push	{r4, r5, r6, lr}
    8b0c:	e3530000 	cmp	r3, #0
    8b10:	e1a04000 	mov	r4, r0
    8b14:	0a000005 	beq	8b30 <CMemorySystem::~CMemorySystem()+0x2c>
    8b18:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    8b1c:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    8b20:	e3c33005 	bic	r3, r3, #5
    8b24:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8b28:	e3a03000 	mov	r3, #0
    8b2c:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    8b30:	e594500c 	ldr	r5, [r4, #12]
    8b34:	e3550000 	cmp	r5, #0
    8b38:	0a000004 	beq	8b50 <CMemorySystem::~CMemorySystem()+0x4c>
    8b3c:	e1a00005 	mov	r0, r5
    8b40:	eb000377 	bl	9924 <CPageTable::~CPageTable()>
    8b44:	e1a00005 	mov	r0, r5
    8b48:	e3a01008 	mov	r1, #8
    8b4c:	eb00005d 	bl	8cc8 <operator delete(void*, unsigned int)>
    8b50:	e5945008 	ldr	r5, [r4, #8]
    8b54:	e3a03000 	mov	r3, #0
    8b58:	e584300c 	str	r3, [r4, #12]
    8b5c:	e1550003 	cmp	r5, r3
    8b60:	0a000004 	beq	8b78 <CMemorySystem::~CMemorySystem()+0x74>
    8b64:	e1a00005 	mov	r0, r5
    8b68:	eb00036d 	bl	9924 <CPageTable::~CPageTable()>
    8b6c:	e1a00005 	mov	r0, r5
    8b70:	e3a01008 	mov	r1, #8
    8b74:	eb000053 	bl	8cc8 <operator delete(void*, unsigned int)>
    8b78:	e1a00004 	mov	r0, r4
    8b7c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008b80 <CMemorySystem::GetMemSize() const>:
    8b80:	e5900004 	ldr	r0, [r0, #4]
    8b84:	e12fff1e 	bx	lr

00008b88 <CMemorySystem::EnableMMU()>:
    8b88:	e92d4010 	push	{r4, lr}
    8b8c:	e1a04000 	mov	r4, r0
    8b90:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    8b94:	e3833040 	orr	r3, r3, #64	; 0x40
    8b98:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    8b9c:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    8ba0:	e3a03002 	mov	r3, #2
    8ba4:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    8ba8:	e5900008 	ldr	r0, [r0, #8]
    8bac:	eb000365 	bl	9948 <CPageTable::GetBaseAddress() const>
    8bb0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    8bb4:	e594000c 	ldr	r0, [r4, #12]
    8bb8:	eb000362 	bl	9948 <CPageTable::GetBaseAddress() const>
    8bbc:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    8bc0:	e3a03005 	mov	r3, #5
    8bc4:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    8bc8:	eb000ac0 	bl	b6d0 <InvalidateDataCache>
    8bcc:	e3a03000 	mov	r3, #0
    8bd0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    8bd4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    8bd8:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    8bdc:	f57ff04f 	dsb	sy
    8be0:	f57ff06f 	isb	sy
    8be4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    8be8:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    8bec:	e3833005 	orr	r3, r3, #5
    8bf0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8bf4:	e8bd8010 	pop	{r4, pc}

00008bf8 <CMemorySystem::CMemorySystem(int)>:
    8bf8:	e92d4030 	push	{r4, r5, lr}
    8bfc:	e1a04000 	mov	r4, r0
    8c00:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    8c04:	e5801000 	str	r1, [r0]
    8c08:	e3a05000 	mov	r5, #0
    8c0c:	e28d000c 	add	r0, sp, #12
    8c10:	e5845004 	str	r5, [r4, #4]
    8c14:	e5845008 	str	r5, [r4, #8]
    8c18:	e584500c 	str	r5, [r4, #12]
    8c1c:	ebfffde4 	bl	83b4 <CBcmPropertyTags::CBcmPropertyTags()>
    8c20:	e3a03014 	mov	r3, #20
    8c24:	e58d5000 	str	r5, [sp]
    8c28:	e08d2003 	add	r2, sp, r3
    8c2c:	e28d000c 	add	r0, sp, #12
    8c30:	e3a01005 	mov	r1, #5
    8c34:	e3401001 	movt	r1, #1
    8c38:	ebfffe09 	bl	8464 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8c3c:	e2503000 	subs	r3, r0, #0
    8c40:	058d3020 	streq	r3, [sp, #32]
    8c44:	159d1024 	ldrne	r1, [sp, #36]	; 0x24
    8c48:	03a02303 	moveq	r2, #201326592	; 0xc000000
    8c4c:	01a00003 	moveq	r0, r3
    8c50:	01a01002 	moveq	r1, r2
    8c54:	159d0020 	ldrne	r0, [sp, #32]
    8c58:	e5841004 	str	r1, [r4, #4]
    8c5c:	058d2024 	streq	r2, [sp, #36]	; 0x24
    8c60:	eb000b59 	bl	b9cc <mem_init>
    8c64:	e5943000 	ldr	r3, [r4]
    8c68:	e3530000 	cmp	r3, #0
    8c6c:	0a00000c 	beq	8ca4 <CMemorySystem::CMemorySystem(int)+0xac>
    8c70:	e3a00008 	mov	r0, #8
    8c74:	eb00000f 	bl	8cb8 <operator new(unsigned int)>
    8c78:	e5941004 	ldr	r1, [r4, #4]
    8c7c:	e1a05000 	mov	r5, r0
    8c80:	eb0002eb 	bl	9834 <CPageTable::CPageTable(unsigned int)>
    8c84:	e5845008 	str	r5, [r4, #8]
    8c88:	e3a00008 	mov	r0, #8
    8c8c:	eb000009 	bl	8cb8 <operator new(unsigned int)>
    8c90:	e1a05000 	mov	r5, r0
    8c94:	eb0002ba 	bl	9784 <CPageTable::CPageTable()>
    8c98:	e584500c 	str	r5, [r4, #12]
    8c9c:	e1a00004 	mov	r0, r4
    8ca0:	ebffffb8 	bl	8b88 <CMemorySystem::EnableMMU()>
    8ca4:	e28d000c 	add	r0, sp, #12
    8ca8:	ebfffdc7 	bl	83cc <CBcmPropertyTags::~CBcmPropertyTags()>
    8cac:	e1a00004 	mov	r0, r4
    8cb0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    8cb4:	e8bd8030 	pop	{r4, r5, pc}

00008cb8 <operator new(unsigned int)>:
    8cb8:	ea000b5b 	b	ba2c <malloc>

00008cbc <operator new[](unsigned int)>:
    8cbc:	ea000b5a 	b	ba2c <malloc>

00008cc0 <operator delete(void*)>:
    8cc0:	ea000b99 	b	bb2c <free>

00008cc4 <operator delete[](void*)>:
    8cc4:	ea000b98 	b	bb2c <free>

00008cc8 <operator delete(void*, unsigned int)>:
    8cc8:	ea000b97 	b	bb2c <free>

00008ccc <operator delete[](void*, unsigned int)>:
    8ccc:	ea000b96 	b	bb2c <free>

00008cd0 <EnterCritical>:
    8cd0:	e10f1000 	mrs	r1, CPSR
    8cd4:	f10c0080 	cpsid	i
    8cd8:	e3500002 	cmp	r0, #2
    8cdc:	1a000000 	bne	8ce4 <EnterCritical+0x14>
    8ce0:	f10c0040 	cpsid	f
    8ce4:	e30c3e00 	movw	r3, #52736	; 0xce00
    8ce8:	e3403000 	movt	r3, #0
    8cec:	e5932000 	ldr	r2, [r3]
    8cf0:	e2820001 	add	r0, r2, #1
    8cf4:	e5830000 	str	r0, [r3]
    8cf8:	e0833102 	add	r3, r3, r2, lsl #2
    8cfc:	e5831004 	str	r1, [r3, #4]
    8d00:	f57ff05f 	dmb	sy
    8d04:	e12fff1e 	bx	lr

00008d08 <LeaveCritical>:
    8d08:	f57ff05f 	dmb	sy
    8d0c:	e30c3e00 	movw	r3, #52736	; 0xce00
    8d10:	e3403000 	movt	r3, #0
    8d14:	e5932000 	ldr	r2, [r3]
    8d18:	e2422001 	sub	r2, r2, #1
    8d1c:	e5832000 	str	r2, [r3]
    8d20:	e0833102 	add	r3, r3, r2, lsl #2
    8d24:	e5933004 	ldr	r3, [r3, #4]
    8d28:	e121f003 	msr	CPSR_c, r3
    8d2c:	e12fff1e 	bx	lr

00008d30 <SyncDataAndInstructionCache>:
    8d30:	e92d4010 	push	{r4, lr}
    8d34:	eb000a8f 	bl	b778 <CleanDataCache>
    8d38:	e3a03000 	mov	r3, #0
    8d3c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    8d40:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    8d44:	f57ff04f 	dsb	sy
    8d48:	f57ff06f 	isb	sy
    8d4c:	e8bd8010 	pop	{r4, pc}

00008d50 <__aeabi_atexit>:
    8d50:	e12fff1e 	bx	lr

00008d54 <halt>:
    8d54:	f10c0080 	cpsid	i
    8d58:	f10c0040 	cpsid	f
    8d5c:	f57ff04f 	dsb	sy
    8d60:	e320f003 	wfi
    8d64:	eafffffc 	b	8d5c <halt+0x8>

00008d68 <reboot>:
    8d68:	e3a03000 	mov	r3, #0
    8d6c:	e3433f10 	movt	r3, #16144	; 0x3f10
    8d70:	e3a01001 	mov	r1, #1
    8d74:	e3a02020 	mov	r2, #32
    8d78:	e3451a00 	movt	r1, #23040	; 0x5a00
    8d7c:	e3452a00 	movt	r2, #23040	; 0x5a00
    8d80:	e5831024 	str	r1, [r3, #36]	; 0x24
    8d84:	e583201c 	str	r2, [r3, #28]
    8d88:	eafffffe 	b	8d88 <reboot+0x20>

00008d8c <sysinit>:
    8d8c:	e92d4030 	push	{r4, r5, lr}
    8d90:	e24dd01c 	sub	sp, sp, #28
    8d94:	f1080040 	cpsie	f
    8d98:	eb000a31 	bl	b664 <InvalidateDataCacheL1Only>
    8d9c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    8da0:	e3083064 	movw	r3, #32868	; 0x8064
    8da4:	e3403000 	movt	r3, #0
    8da8:	e582309c 	str	r3, [r2, #156]	; 0x9c
    8dac:	e58230ac 	str	r3, [r2, #172]	; 0xac
    8db0:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    8db4:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    8db8:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    8dbc:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    8dc0:	f57ff06f 	isb	sy
    8dc4:	eee82a10 	vmsr	fpexc, r2
    8dc8:	e3a01000 	mov	r1, #0
    8dcc:	eee11a10 	vmsr	fpscr, r1
    8dd0:	e30c3df8 	movw	r3, #52728	; 0xcdf8
    8dd4:	e30c2e90 	movw	r2, #52880	; 0xce90
    8dd8:	e3403000 	movt	r3, #0
    8ddc:	e3402000 	movt	r2, #0
    8de0:	e1530002 	cmp	r3, r2
    8de4:	2a000002 	bcs	8df4 <sysinit+0x68>
    8de8:	e4c31001 	strb	r1, [r3], #1
    8dec:	e1530002 	cmp	r3, r2
    8df0:	1afffffc 	bne	8de8 <sysinit+0x5c>
    8df4:	e1a0000d 	mov	r0, sp
    8df8:	e30c5d78 	movw	r5, #52600	; 0xcd78
    8dfc:	e30c4d6c 	movw	r4, #52588	; 0xcd6c
    8e00:	e3405000 	movt	r5, #0
    8e04:	e3404000 	movt	r4, #0
    8e08:	eb000937 	bl	b2ec <CMachineInfo::CMachineInfo()>
    8e0c:	e1540005 	cmp	r4, r5
    8e10:	2a000003 	bcs	8e24 <sysinit+0x98>
    8e14:	e4943004 	ldr	r3, [r4], #4
    8e18:	e12fff33 	blx	r3
    8e1c:	e1540005 	cmp	r4, r5
    8e20:	3afffffb 	bcc	8e14 <sysinit+0x88>
    8e24:	ebfffc91 	bl	8070 <main>
    8e28:	e3500001 	cmp	r0, #1
    8e2c:	0a000000 	beq	8e34 <sysinit+0xa8>
    8e30:	ebffffc7 	bl	8d54 <halt>
    8e34:	ebffffcb 	bl	8d68 <reboot>

00008e38 <CTimer::CTimer(CInterruptSystem*)>:
    8e38:	e92d4070 	push	{r4, r5, r6, lr}
    8e3c:	e1a04000 	mov	r4, r0
    8e40:	e5801000 	str	r1, [r0]
    8e44:	e3a03000 	mov	r3, #0
    8e48:	e3a05001 	mov	r5, #1
    8e4c:	e5803004 	str	r3, [r0, #4]
    8e50:	e5843008 	str	r3, [r4, #8]
    8e54:	e2800018 	add	r0, r0, #24
    8e58:	e5843014 	str	r3, [r4, #20]
    8e5c:	e584300c 	str	r3, [r4, #12]
    8e60:	e5845010 	str	r5, [r4, #16]
    8e64:	eb000a7b 	bl	b858 <CPtrList::CPtrList()>
    8e68:	e30c3e58 	movw	r3, #52824	; 0xce58
    8e6c:	e3403000 	movt	r3, #0
    8e70:	e300115e 	movw	r1, #350	; 0x15e
    8e74:	e584501c 	str	r5, [r4, #28]
    8e78:	e3052730 	movw	r2, #22320	; 0x5730
    8e7c:	e5841024 	str	r1, [r4, #36]	; 0x24
    8e80:	e3402005 	movt	r2, #5
    8e84:	e1a00004 	mov	r0, r4
    8e88:	e5842020 	str	r2, [r4, #32]
    8e8c:	e5834000 	str	r4, [r3]
    8e90:	e8bd8070 	pop	{r4, r5, r6, pc}

00008e94 <CTimer::~CTimer()>:
    8e94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8e98:	e1a04000 	mov	r4, r0
    8e9c:	e1a07000 	mov	r7, r0
    8ea0:	e3a01003 	mov	r1, #3
    8ea4:	e4940018 	ldr	r0, [r4], #24
    8ea8:	eb0007a1 	bl	ad34 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    8eac:	ea000007 	b	8ed0 <CTimer::~CTimer()+0x3c>
    8eb0:	eb000a70 	bl	b878 <CPtrList::GetPtr(TPtrListElement*)>
    8eb4:	e1a01005 	mov	r1, r5
    8eb8:	e1a06000 	mov	r6, r0
    8ebc:	e1a00004 	mov	r0, r4
    8ec0:	eb000a9f 	bl	b944 <CPtrList::Remove(TPtrListElement*)>
    8ec4:	e1a00006 	mov	r0, r6
    8ec8:	e3a01014 	mov	r1, #20
    8ecc:	ebffff7d 	bl	8cc8 <operator delete(void*, unsigned int)>
    8ed0:	e1a00004 	mov	r0, r4
    8ed4:	eb000a63 	bl	b868 <CPtrList::GetFirst()>
    8ed8:	e2505000 	subs	r5, r0, #0
    8edc:	e1a00004 	mov	r0, r4
    8ee0:	e1a01005 	mov	r1, r5
    8ee4:	1afffff1 	bne	8eb0 <CTimer::~CTimer()+0x1c>
    8ee8:	e30c3e58 	movw	r3, #52824	; 0xce58
    8eec:	e3403000 	movt	r3, #0
    8ef0:	e1a00004 	mov	r0, r4
    8ef4:	e5835000 	str	r5, [r3]
    8ef8:	eb000a59 	bl	b864 <CPtrList::~CPtrList()>
    8efc:	e1a00007 	mov	r0, r7
    8f00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008f04 <CTimer::SetTimeZone(int)>:
    8f04:	e2813e59 	add	r3, r1, #1424	; 0x590
    8f08:	e3002b3e 	movw	r2, #2878	; 0xb3e
    8f0c:	e283300f 	add	r3, r3, #15
    8f10:	e1530002 	cmp	r3, r2
    8f14:	95801014 	strls	r1, [r0, #20]
    8f18:	93a00001 	movls	r0, #1
    8f1c:	83a00000 	movhi	r0, #0
    8f20:	e12fff1e 	bx	lr

00008f24 <CTimer::GetTimeZone() const>:
    8f24:	e5900014 	ldr	r0, [r0, #20]
    8f28:	e12fff1e 	bx	lr

00008f2c <CTimer::SetTime(unsigned int, int)>:
    8f2c:	e3520000 	cmp	r2, #0
    8f30:	e92d4070 	push	{r4, r5, r6, lr}
    8f34:	e1a04000 	mov	r4, r0
    8f38:	e1a05001 	mov	r5, r1
    8f3c:	1a000005 	bne	8f58 <CTimer::SetTime(unsigned int, int)+0x2c>
    8f40:	e5901014 	ldr	r1, [r0, #20]
    8f44:	e3a0303c 	mov	r3, #60	; 0x3c
    8f48:	e0030193 	mul	r3, r3, r1
    8f4c:	e3530000 	cmp	r3, #0
    8f50:	ba00000e 	blt	8f90 <CTimer::SetTime(unsigned int, int)+0x64>
    8f54:	e0855003 	add	r5, r5, r3
    8f58:	e5940010 	ldr	r0, [r4, #16]
    8f5c:	e3500000 	cmp	r0, #0
    8f60:	1a000002 	bne	8f70 <CTimer::SetTime(unsigned int, int)+0x44>
    8f64:	e3a00001 	mov	r0, #1
    8f68:	e584500c 	str	r5, [r4, #12]
    8f6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8f70:	ebffff56 	bl	8cd0 <EnterCritical>
    8f74:	e5943010 	ldr	r3, [r4, #16]
    8f78:	e584500c 	str	r5, [r4, #12]
    8f7c:	e3530000 	cmp	r3, #0
    8f80:	0a000007 	beq	8fa4 <CTimer::SetTime(unsigned int, int)+0x78>
    8f84:	ebffff5f 	bl	8d08 <LeaveCritical>
    8f88:	e3a00001 	mov	r0, #1
    8f8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8f90:	e2631000 	rsb	r1, r3, #0
    8f94:	e1510005 	cmp	r1, r5
    8f98:	daffffed 	ble	8f54 <CTimer::SetTime(unsigned int, int)+0x28>
    8f9c:	e1a00002 	mov	r0, r2
    8fa0:	e8bd8070 	pop	{r4, r5, r6, pc}
    8fa4:	e3a00001 	mov	r0, #1
    8fa8:	e8bd8070 	pop	{r4, r5, r6, pc}

00008fac <CTimer::GetClockTicks()>:
    8fac:	e3a03a03 	mov	r3, #12288	; 0x3000
    8fb0:	e3433f00 	movt	r3, #16128	; 0x3f00
    8fb4:	e5930004 	ldr	r0, [r3, #4]
    8fb8:	e12fff1e 	bx	lr

00008fbc <CTimer::GetTicks() const>:
    8fbc:	e5900004 	ldr	r0, [r0, #4]
    8fc0:	e12fff1e 	bx	lr

00008fc4 <CTimer::GetUptime() const>:
    8fc4:	e5900008 	ldr	r0, [r0, #8]
    8fc8:	e12fff1e 	bx	lr

00008fcc <CTimer::GetTime() const>:
    8fcc:	e590000c 	ldr	r0, [r0, #12]
    8fd0:	e12fff1e 	bx	lr

00008fd4 <CTimer::GetUniversalTime() const>:
    8fd4:	e5902014 	ldr	r2, [r0, #20]
    8fd8:	e3a0303c 	mov	r3, #60	; 0x3c
    8fdc:	e590000c 	ldr	r0, [r0, #12]
    8fe0:	e0030293 	mul	r3, r3, r2
    8fe4:	e1530000 	cmp	r3, r0
    8fe8:	d0400003 	suble	r0, r0, r3
    8fec:	c3a00000 	movgt	r0, #0
    8ff0:	e12fff1e 	bx	lr

00008ff4 <CTimer::GetTimeString()>:
    8ff4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ff8:	e1a05000 	mov	r5, r0
    8ffc:	e5900010 	ldr	r0, [r0, #16]
    9000:	e24dd01c 	sub	sp, sp, #28
    9004:	e3500000 	cmp	r0, #0
    9008:	1a00006c 	bne	91c0 <CTimer::GetTimeString()+0x1cc>
    900c:	e595400c 	ldr	r4, [r5, #12]
    9010:	e5959004 	ldr	r9, [r5, #4]
    9014:	e1940009 	orrs	r0, r4, r9
    9018:	0a00004f 	beq	915c <CTimer::GetTimeString()+0x168>
    901c:	e308a889 	movw	sl, #34953	; 0x8889
    9020:	e348a888 	movt	sl, #34952	; 0x8888
    9024:	e30b23c5 	movw	r2, #46021	; 0xb3c5
    9028:	e34921a2 	movt	r2, #37282	; 0x91a2
    902c:	e0876a94 	umull	r6, r7, r4, sl
    9030:	e304e507 	movw	lr, #17671	; 0x4507
    9034:	e0832294 	umull	r2, r3, r4, r2
    9038:	e34ce22e 	movt	lr, #49710	; 0xc22e
    903c:	e3a0003c 	mov	r0, #60	; 0x3c
    9040:	e308151f 	movw	r1, #34079	; 0x851f
    9044:	e1a0c2a7 	lsr	ip, r7, #5
    9048:	e34511eb 	movt	r1, #20971	; 0x51eb
    904c:	e30057b2 	movw	r5, #1970	; 0x7b2
    9050:	e08baa9c 	umull	sl, fp, ip, sl
    9054:	e1a065a3 	lsr	r6, r3, #11
    9058:	e0832e94 	umull	r2, r3, r4, lr
    905c:	e3a0a064 	mov	sl, #100	; 0x64
    9060:	e0674c90 	mls	r7, r0, ip, r4
    9064:	e1a082ab 	lsr	r8, fp, #5
    9068:	e3a0ee19 	mov	lr, #400	; 0x190
    906c:	e068c890 	mls	r8, r0, r8, ip
    9070:	e1a04823 	lsr	r4, r3, #16
    9074:	e300c16d 	movw	ip, #365	; 0x16d
    9078:	e300016e 	movw	r0, #366	; 0x16e
    907c:	ea000001 	b	9088 <CTimer::GetTimeString()+0x94>
    9080:	e0444002 	sub	r4, r4, r2
    9084:	e2855001 	add	r5, r5, #1
    9088:	e0832195 	umull	r2, r3, r5, r1
    908c:	e1a022a3 	lsr	r2, r3, #5
    9090:	e1a033a3 	lsr	r3, r3, #7
    9094:	e062529a 	mls	r2, sl, r2, r5
    9098:	e063539e 	mls	r3, lr, r3, r5
    909c:	e3520000 	cmp	r2, #0
    90a0:	e16f3f13 	clz	r3, r3
    90a4:	01a032a3 	lsreq	r3, r3, #5
    90a8:	0a000002 	beq	90b8 <CTimer::GetTimeString()+0xc4>
    90ac:	e3150003 	tst	r5, #3
    90b0:	03a03001 	moveq	r3, #1
    90b4:	13a03000 	movne	r3, #0
    90b8:	e3530000 	cmp	r3, #0
    90bc:	01a0200c 	moveq	r2, ip
    90c0:	11a02000 	movne	r2, r0
    90c4:	e1540002 	cmp	r4, r2
    90c8:	2affffec 	bcs	9080 <CTimer::GetTimeString()+0x8c>
    90cc:	e30c083c 	movw	r0, #51260	; 0xc83c
    90d0:	e3a0a000 	mov	sl, #0
    90d4:	e3400000 	movt	r0, #0
    90d8:	ea000001 	b	90e4 <CTimer::GetTimeString()+0xf0>
    90dc:	e0444002 	sub	r4, r4, r2
    90e0:	e28aa001 	add	sl, sl, #1
    90e4:	e35a0001 	cmp	sl, #1
    90e8:	13a01000 	movne	r1, #0
    90ec:	02031001 	andeq	r1, r3, #1
    90f0:	e3a0201d 	mov	r2, #29
    90f4:	e3510000 	cmp	r1, #0
    90f8:	0790210a 	ldreq	r2, [r0, sl, lsl #2]
    90fc:	e1540002 	cmp	r4, r2
    9100:	2afffff5 	bcs	90dc <CTimer::GetTimeString()+0xe8>
    9104:	e308251f 	movw	r2, #34079	; 0x851f
    9108:	e34521eb 	movt	r2, #20971	; 0x51eb
    910c:	e3a01064 	mov	r1, #100	; 0x64
    9110:	e3a00010 	mov	r0, #16
    9114:	e0832299 	umull	r2, r3, r9, r2
    9118:	e1a0b2a3 	lsr	fp, r3, #5
    911c:	e06b9b91 	mls	fp, r1, fp, r9
    9120:	ebfffee4 	bl	8cb8 <operator new(unsigned int)>
    9124:	e1a09000 	mov	r9, r0
    9128:	eb000355 	bl	9e84 <CString::CString()>
    912c:	e30037b7 	movw	r3, #1975	; 0x7b7
    9130:	e1550003 	cmp	r5, r3
    9134:	8a00000a 	bhi	9164 <CTimer::GetTimeString()+0x170>
    9138:	e1a00009 	mov	r0, r9
    913c:	e58db004 	str	fp, [sp, #4]
    9140:	e1a03008 	mov	r3, r8
    9144:	e58d7000 	str	r7, [sp]
    9148:	e1a02006 	mov	r2, r6
    914c:	e30c1890 	movw	r1, #51344	; 0xc890
    9150:	e3401000 	movt	r1, #0
    9154:	eb0006a9 	bl	ac00 <CString::Format(char const*, ...)>
    9158:	e1a00009 	mov	r0, r9
    915c:	e28dd01c 	add	sp, sp, #28
    9160:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9164:	e30a3aab 	movw	r3, #43691	; 0xaaab
    9168:	e34a3aaa 	movt	r3, #43690	; 0xaaaa
    916c:	e3a0c018 	mov	ip, #24
    9170:	e30c2d78 	movw	r2, #52600	; 0xcd78
    9174:	e0810396 	umull	r0, r1, r6, r3
    9178:	e3402000 	movt	r2, #0
    917c:	e58db00c 	str	fp, [sp, #12]
    9180:	e2843001 	add	r3, r4, #1
    9184:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    9188:	e58d7008 	str	r7, [sp, #8]
    918c:	e58d8004 	str	r8, [sp, #4]
    9190:	e1cd01f0 	strd	r0, [sp, #16]
    9194:	e30c1874 	movw	r1, #51316	; 0xc874
    9198:	e59d0014 	ldr	r0, [sp, #20]
    919c:	e3401000 	movt	r1, #0
    91a0:	e1a0e220 	lsr	lr, r0, #4
    91a4:	e1a00009 	mov	r0, r9
    91a8:	e0666e9c 	mls	r6, ip, lr, r6
    91ac:	e58d6000 	str	r6, [sp]
    91b0:	eb000692 	bl	ac00 <CString::Format(char const*, ...)>
    91b4:	e1a00009 	mov	r0, r9
    91b8:	e28dd01c 	add	sp, sp, #28
    91bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91c0:	ebfffec2 	bl	8cd0 <EnterCritical>
    91c4:	e5953010 	ldr	r3, [r5, #16]
    91c8:	e595400c 	ldr	r4, [r5, #12]
    91cc:	e3530000 	cmp	r3, #0
    91d0:	e5959004 	ldr	r9, [r5, #4]
    91d4:	0affff8e 	beq	9014 <CTimer::GetTimeString()+0x20>
    91d8:	ebfffeca 	bl	8d08 <LeaveCritical>
    91dc:	eaffff8c 	b	9014 <CTimer::GetTimeString()+0x20>

000091e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    91e0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    91e4:	e1a08000 	mov	r8, r0
    91e8:	e3a00014 	mov	r0, #20
    91ec:	e1a06002 	mov	r6, r2
    91f0:	e1a04001 	mov	r4, r1
    91f4:	e1a09003 	mov	r9, r3
    91f8:	e59d5020 	ldr	r5, [sp, #32]
    91fc:	ebfffead 	bl	8cb8 <operator new(unsigned int)>
    9200:	e304cd43 	movw	ip, #19779	; 0x4d43
    9204:	e344cb54 	movt	ip, #19284	; 0x4b54
    9208:	e1a07000 	mov	r7, r0
    920c:	e598001c 	ldr	r0, [r8, #28]
    9210:	e5876004 	str	r6, [r7, #4]
    9214:	e3500000 	cmp	r0, #0
    9218:	e5986004 	ldr	r6, [r8, #4]
    921c:	e587900c 	str	r9, [r7, #12]
    9220:	e0866004 	add	r6, r6, r4
    9224:	e5875010 	str	r5, [r7, #16]
    9228:	e587c000 	str	ip, [r7]
    922c:	e5876008 	str	r6, [r7, #8]
    9230:	1a000021 	bne	92bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    9234:	e2885018 	add	r5, r8, #24
    9238:	e1a00005 	mov	r0, r5
    923c:	eb000989 	bl	b868 <CPtrList::GetFirst()>
    9240:	e2504000 	subs	r4, r0, #0
    9244:	1a000004 	bne	925c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x7c>
    9248:	ea000016 	b	92a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
    924c:	eb000987 	bl	b870 <CPtrList::GetNext(TPtrListElement*)>
    9250:	e3500000 	cmp	r0, #0
    9254:	0a000013 	beq	92a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
    9258:	e1a04000 	mov	r4, r0
    925c:	e1a01004 	mov	r1, r4
    9260:	e1a00005 	mov	r0, r5
    9264:	eb000983 	bl	b878 <CPtrList::GetPtr(TPtrListElement*)>
    9268:	e1a01004 	mov	r1, r4
    926c:	e5903008 	ldr	r3, [r0, #8]
    9270:	e1a00005 	mov	r0, r5
    9274:	e0433006 	sub	r3, r3, r6
    9278:	e3530000 	cmp	r3, #0
    927c:	dafffff2 	ble	924c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x6c>
    9280:	e1a01004 	mov	r1, r4
    9284:	e1a00005 	mov	r0, r5
    9288:	e1a02007 	mov	r2, r7
    928c:	eb00097b 	bl	b880 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    9290:	e598301c 	ldr	r3, [r8, #28]
    9294:	e3530000 	cmp	r3, #0
    9298:	0a000000 	beq	92a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc0>
    929c:	ebfffe99 	bl	8d08 <LeaveCritical>
    92a0:	e1a00007 	mov	r0, r7
    92a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    92a8:	e1a01004 	mov	r1, r4
    92ac:	e1a00005 	mov	r0, r5
    92b0:	e1a02007 	mov	r2, r7
    92b4:	eb00098b 	bl	b8e8 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    92b8:	eafffff4 	b	9290 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb0>
    92bc:	ebfffe83 	bl	8cd0 <EnterCritical>
    92c0:	eaffffdb 	b	9234 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x54>

000092c4 <CTimer::CancelKernelTimer(unsigned int)>:
    92c4:	e92d4070 	push	{r4, r5, r6, lr}
    92c8:	e1a04000 	mov	r4, r0
    92cc:	e590001c 	ldr	r0, [r0, #28]
    92d0:	e1a05001 	mov	r5, r1
    92d4:	e3500000 	cmp	r0, #0
    92d8:	1a000011 	bne	9324 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    92dc:	e2846018 	add	r6, r4, #24
    92e0:	e1a01005 	mov	r1, r5
    92e4:	e1a00006 	mov	r0, r6
    92e8:	eb0009a8 	bl	b990 <CPtrList::Find(void*)>
    92ec:	e2501000 	subs	r1, r0, #0
    92f0:	0a000006 	beq	9310 <CTimer::CancelKernelTimer(unsigned int)+0x4c>
    92f4:	e1a00006 	mov	r0, r6
    92f8:	eb000991 	bl	b944 <CPtrList::Remove(TPtrListElement*)>
    92fc:	e3a03000 	mov	r3, #0
    9300:	e1a00005 	mov	r0, r5
    9304:	e5853000 	str	r3, [r5]
    9308:	e3a01014 	mov	r1, #20
    930c:	ebfffe6d 	bl	8cc8 <operator delete(void*, unsigned int)>
    9310:	e594301c 	ldr	r3, [r4, #28]
    9314:	e3530000 	cmp	r3, #0
    9318:	08bd8070 	popeq	{r4, r5, r6, pc}
    931c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9320:	eafffe78 	b	8d08 <LeaveCritical>
    9324:	ebfffe69 	bl	8cd0 <EnterCritical>
    9328:	eaffffeb 	b	92dc <CTimer::CancelKernelTimer(unsigned int)+0x18>

0000932c <CTimer::PollKernelTimers()>:
    932c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9330:	e1a06000 	mov	r6, r0
    9334:	e590001c 	ldr	r0, [r0, #28]
    9338:	e3500000 	cmp	r0, #0
    933c:	1a000031 	bne	9408 <CTimer::PollKernelTimers()+0xdc>
    9340:	e2867018 	add	r7, r6, #24
    9344:	e1a00007 	mov	r0, r7
    9348:	eb000946 	bl	b868 <CPtrList::GetFirst()>
    934c:	e2505000 	subs	r5, r0, #0
    9350:	13a09000 	movne	r9, #0
    9354:	1a00000e 	bne	9394 <CTimer::PollKernelTimers()+0x68>
    9358:	ea000025 	b	93f4 <CTimer::PollKernelTimers()+0xc8>
    935c:	e5943004 	ldr	r3, [r4, #4]
    9360:	e1a00004 	mov	r0, r4
    9364:	e5942010 	ldr	r2, [r4, #16]
    9368:	e594100c 	ldr	r1, [r4, #12]
    936c:	e12fff33 	blx	r3
    9370:	e1a00004 	mov	r0, r4
    9374:	e5849000 	str	r9, [r4]
    9378:	e3a01014 	mov	r1, #20
    937c:	ebfffe51 	bl	8cc8 <operator delete(void*, unsigned int)>
    9380:	e596001c 	ldr	r0, [r6, #28]
    9384:	e3500000 	cmp	r0, #0
    9388:	1a000016 	bne	93e8 <CTimer::PollKernelTimers()+0xbc>
    938c:	e2585000 	subs	r5, r8, #0
    9390:	0a000017 	beq	93f4 <CTimer::PollKernelTimers()+0xc8>
    9394:	e1a01005 	mov	r1, r5
    9398:	e1a00007 	mov	r0, r7
    939c:	eb000935 	bl	b878 <CPtrList::GetPtr(TPtrListElement*)>
    93a0:	e5962004 	ldr	r2, [r6, #4]
    93a4:	e1a01005 	mov	r1, r5
    93a8:	e1a04000 	mov	r4, r0
    93ac:	e1a00007 	mov	r0, r7
    93b0:	e5943008 	ldr	r3, [r4, #8]
    93b4:	e0433002 	sub	r3, r3, r2
    93b8:	e3530000 	cmp	r3, #0
    93bc:	ca00000c 	bgt	93f4 <CTimer::PollKernelTimers()+0xc8>
    93c0:	eb00092a 	bl	b870 <CPtrList::GetNext(TPtrListElement*)>
    93c4:	e1a01005 	mov	r1, r5
    93c8:	e1a08000 	mov	r8, r0
    93cc:	e1a00007 	mov	r0, r7
    93d0:	eb00095b 	bl	b944 <CPtrList::Remove(TPtrListElement*)>
    93d4:	e596301c 	ldr	r3, [r6, #28]
    93d8:	e3530000 	cmp	r3, #0
    93dc:	0affffde 	beq	935c <CTimer::PollKernelTimers()+0x30>
    93e0:	ebfffe48 	bl	8d08 <LeaveCritical>
    93e4:	eaffffdc 	b	935c <CTimer::PollKernelTimers()+0x30>
    93e8:	ebfffe38 	bl	8cd0 <EnterCritical>
    93ec:	e2585000 	subs	r5, r8, #0
    93f0:	1affffe7 	bne	9394 <CTimer::PollKernelTimers()+0x68>
    93f4:	e596301c 	ldr	r3, [r6, #28]
    93f8:	e3530000 	cmp	r3, #0
    93fc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9400:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    9404:	eafffe3f 	b	8d08 <LeaveCritical>
    9408:	ebfffe30 	bl	8cd0 <EnterCritical>
    940c:	eaffffcb 	b	9340 <CTimer::PollKernelTimers()+0x14>

00009410 <CTimer::InterruptHandler()>:
    9410:	e3a03a03 	mov	r3, #12288	; 0x3000
    9414:	e3433f00 	movt	r3, #16128	; 0x3f00
    9418:	e92d4010 	push	{r4, lr}
    941c:	e3021710 	movw	r1, #10000	; 0x2710
    9420:	e5932018 	ldr	r2, [r3, #24]
    9424:	e1a04000 	mov	r4, r0
    9428:	e0822001 	add	r2, r2, r1
    942c:	e5832018 	str	r2, [r3, #24]
    9430:	e5930004 	ldr	r0, [r3, #4]
    9434:	e1520000 	cmp	r2, r0
    9438:	35932004 	ldrcc	r2, [r3, #4]
    943c:	30821001 	addcc	r1, r2, r1
    9440:	35831018 	strcc	r1, [r3, #24]
    9444:	e3a03a03 	mov	r3, #12288	; 0x3000
    9448:	e3433f00 	movt	r3, #16128	; 0x3f00
    944c:	e3a02008 	mov	r2, #8
    9450:	e5832000 	str	r2, [r3]
    9454:	e5940010 	ldr	r0, [r4, #16]
    9458:	e3500000 	cmp	r0, #0
    945c:	1a000016 	bne	94bc <CTimer::InterruptHandler()+0xac>
    9460:	e5943004 	ldr	r3, [r4, #4]
    9464:	e308051f 	movw	r0, #34079	; 0x851f
    9468:	e34501eb 	movt	r0, #20971	; 0x51eb
    946c:	e3a0c064 	mov	ip, #100	; 0x64
    9470:	e2833001 	add	r3, r3, #1
    9474:	e5843004 	str	r3, [r4, #4]
    9478:	e0810093 	umull	r0, r1, r3, r0
    947c:	e1a022a1 	lsr	r2, r1, #5
    9480:	e062329c 	mls	r2, ip, r2, r3
    9484:	e3520000 	cmp	r2, #0
    9488:	1a000008 	bne	94b0 <CTimer::InterruptHandler()+0xa0>
    948c:	e5943008 	ldr	r3, [r4, #8]
    9490:	e2833001 	add	r3, r3, #1
    9494:	e5843008 	str	r3, [r4, #8]
    9498:	e594300c 	ldr	r3, [r4, #12]
    949c:	e2833001 	add	r3, r3, #1
    94a0:	e584300c 	str	r3, [r4, #12]
    94a4:	e3520000 	cmp	r2, #0
    94a8:	0a000000 	beq	94b0 <CTimer::InterruptHandler()+0xa0>
    94ac:	ebfffe15 	bl	8d08 <LeaveCritical>
    94b0:	e1a00004 	mov	r0, r4
    94b4:	e8bd4010 	pop	{r4, lr}
    94b8:	eaffff9b 	b	932c <CTimer::PollKernelTimers()>
    94bc:	ebfffe03 	bl	8cd0 <EnterCritical>
    94c0:	e5943004 	ldr	r3, [r4, #4]
    94c4:	e308051f 	movw	r0, #34079	; 0x851f
    94c8:	e34501eb 	movt	r0, #20971	; 0x51eb
    94cc:	e2833001 	add	r3, r3, #1
    94d0:	e3a0c064 	mov	ip, #100	; 0x64
    94d4:	e5843004 	str	r3, [r4, #4]
    94d8:	e0810093 	umull	r0, r1, r3, r0
    94dc:	e5942010 	ldr	r2, [r4, #16]
    94e0:	e1a012a1 	lsr	r1, r1, #5
    94e4:	e063319c 	mls	r3, ip, r1, r3
    94e8:	e3530000 	cmp	r3, #0
    94ec:	1affffec 	bne	94a4 <CTimer::InterruptHandler()+0x94>
    94f0:	eaffffe5 	b	948c <CTimer::InterruptHandler()+0x7c>

000094f4 <CTimer::InterruptHandler(void*)>:
    94f4:	eaffffc5 	b	9410 <CTimer::InterruptHandler()>

000094f8 <CTimer::TuneMsDelay()>:
    94f8:	e92d4070 	push	{r4, r5, r6, lr}
    94fc:	e1a04000 	mov	r4, r0
    9500:	e5943020 	ldr	r3, [r4, #32]
    9504:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    9508:	e24dd008 	sub	sp, sp, #8
    950c:	e5946004 	ldr	r6, [r4, #4]
    9510:	e308551f 	movw	r5, #34079	; 0x851f
    9514:	e34551eb 	movt	r5, #20971	; 0x51eb
    9518:	e0000390 	mul	r0, r0, r3
    951c:	eb0005c3 	bl	ac30 <DelayLoop>
    9520:	e5941004 	ldr	r1, [r4, #4]
    9524:	e3020710 	movw	r0, #10000	; 0x2710
    9528:	e0411006 	sub	r1, r1, r6
    952c:	eb000a3a 	bl	be1c <__aeabi_uidiv>
    9530:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    9534:	e3413062 	movt	r3, #4194	; 0x1062
    9538:	e1a06000 	mov	r6, r0
    953c:	e5940020 	ldr	r0, [r4, #32]
    9540:	e0000690 	mul	r0, r0, r6
    9544:	e0810590 	umull	r0, r1, r0, r5
    9548:	e1a022a1 	lsr	r2, r1, #5
    954c:	e5842020 	str	r2, [r4, #32]
    9550:	e2822f7d 	add	r2, r2, #500	; 0x1f4
    9554:	e0832392 	umull	r2, r3, r2, r3
    9558:	e1a03323 	lsr	r3, r3, #6
    955c:	e5843024 	str	r3, [r4, #36]	; 0x24
    9560:	e0854596 	umull	r4, r5, r6, r5
    9564:	eb000119 	bl	99d0 <CLogger::Get()>
    9568:	e3a0e064 	mov	lr, #100	; 0x64
    956c:	e3a02003 	mov	r2, #3
    9570:	e59f1020 	ldr	r1, [pc, #32]	; 9598 <CTimer::TuneMsDelay()+0xa0>
    9574:	e30c38a4 	movw	r3, #51364	; 0xc8a4
    9578:	e3403000 	movt	r3, #0
    957c:	e1a0c2a5 	lsr	ip, r5, #5
    9580:	e58dc000 	str	ip, [sp]
    9584:	e0666c9e 	mls	r6, lr, ip, r6
    9588:	e58d6004 	str	r6, [sp, #4]
    958c:	eb0001eb 	bl	9d40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9590:	e28dd008 	add	sp, sp, #8
    9594:	e8bd8070 	pop	{r4, r5, r6, pc}
    9598:	0000c86c 	.word	0x0000c86c

0000959c <CTimer::Initialize()>:
    959c:	e92d4010 	push	{r4, lr}
    95a0:	e1a03000 	mov	r3, r0
    95a4:	e1a04000 	mov	r4, r0
    95a8:	e3a01003 	mov	r1, #3
    95ac:	e5900000 	ldr	r0, [r0]
    95b0:	e30924f4 	movw	r2, #38132	; 0x94f4
    95b4:	e3402000 	movt	r2, #0
    95b8:	eb0005cb 	bl	acec <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    95bc:	e3a02a03 	mov	r2, #12288	; 0x3000
    95c0:	e3432f00 	movt	r2, #16128	; 0x3f00
    95c4:	e3a03df2 	mov	r3, #15488	; 0x3c80
    95c8:	e34f3e36 	movt	r3, #65078	; 0xfe36
    95cc:	e1a00004 	mov	r0, r4
    95d0:	e5823004 	str	r3, [r2, #4]
    95d4:	e5923004 	ldr	r3, [r2, #4]
    95d8:	e2833c27 	add	r3, r3, #9984	; 0x2700
    95dc:	e2833010 	add	r3, r3, #16
    95e0:	e5823018 	str	r3, [r2, #24]
    95e4:	ebffffc3 	bl	94f8 <CTimer::TuneMsDelay()>
    95e8:	e3a00001 	mov	r0, #1
    95ec:	e8bd8010 	pop	{r4, pc}

000095f0 <CTimer::SimpleMsDelay(unsigned int)>:
    95f0:	e2503000 	subs	r3, r0, #0
    95f4:	012fff1e 	bxeq	lr
    95f8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    95fc:	e0000390 	mul	r0, r0, r3
    9600:	e3500000 	cmp	r0, #0
    9604:	012fff1e 	bxeq	lr
    9608:	e3a02a03 	mov	r2, #12288	; 0x3000
    960c:	e3432f00 	movt	r2, #16128	; 0x3f00
    9610:	e2800001 	add	r0, r0, #1
    9614:	e5921004 	ldr	r1, [r2, #4]
    9618:	e5923004 	ldr	r3, [r2, #4]
    961c:	e0433001 	sub	r3, r3, r1
    9620:	e1500003 	cmp	r0, r3
    9624:	8afffffb 	bhi	9618 <CTimer::SimpleMsDelay(unsigned int)+0x28>
    9628:	e12fff1e 	bx	lr

0000962c <CTimer::SimpleusDelay(unsigned int)>:
    962c:	e3500000 	cmp	r0, #0
    9630:	012fff1e 	bxeq	lr
    9634:	e3a02a03 	mov	r2, #12288	; 0x3000
    9638:	e3432f00 	movt	r2, #16128	; 0x3f00
    963c:	e2800001 	add	r0, r0, #1
    9640:	e5921004 	ldr	r1, [r2, #4]
    9644:	e5923004 	ldr	r3, [r2, #4]
    9648:	e0433001 	sub	r3, r3, r1
    964c:	e1500003 	cmp	r0, r3
    9650:	8afffffb 	bhi	9644 <CTimer::SimpleusDelay(unsigned int)+0x18>
    9654:	e12fff1e 	bx	lr

00009658 <CTimer::IsLeapYear(unsigned int)>:
    9658:	e308251f 	movw	r2, #34079	; 0x851f
    965c:	e34521eb 	movt	r2, #20971	; 0x51eb
    9660:	e3a0c064 	mov	ip, #100	; 0x64
    9664:	e0832290 	umull	r2, r3, r0, r2
    9668:	e1a012a3 	lsr	r1, r3, #5
    966c:	e061019c 	mls	r1, ip, r1, r0
    9670:	e3510000 	cmp	r1, #0
    9674:	0a000003 	beq	9688 <CTimer::IsLeapYear(unsigned int)+0x30>
    9678:	e3100003 	tst	r0, #3
    967c:	03a00001 	moveq	r0, #1
    9680:	13a00000 	movne	r0, #0
    9684:	e12fff1e 	bx	lr
    9688:	e1a033a3 	lsr	r3, r3, #7
    968c:	e3a02e19 	mov	r2, #400	; 0x190
    9690:	e0600392 	mls	r0, r2, r3, r0
    9694:	e16f0f10 	clz	r0, r0
    9698:	e1a002a0 	lsr	r0, r0, #5
    969c:	e12fff1e 	bx	lr

000096a0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    96a0:	e3500001 	cmp	r0, #1
    96a4:	0a000003 	beq	96b8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    96a8:	e30c383c 	movw	r3, #51260	; 0xc83c
    96ac:	e3403000 	movt	r3, #0
    96b0:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    96b4:	e12fff1e 	bx	lr
    96b8:	e308251f 	movw	r2, #34079	; 0x851f
    96bc:	e34521eb 	movt	r2, #20971	; 0x51eb
    96c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    96c4:	e3a0e064 	mov	lr, #100	; 0x64
    96c8:	e0832291 	umull	r2, r3, r1, r2
    96cc:	e1a0c2a3 	lsr	ip, r3, #5
    96d0:	e06c1c9e 	mls	ip, lr, ip, r1
    96d4:	e35c0000 	cmp	ip, #0
    96d8:	0a000008 	beq	9700 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    96dc:	e3110003 	tst	r1, #3
    96e0:	03a01001 	moveq	r1, #1
    96e4:	13a01000 	movne	r1, #0
    96e8:	e3510000 	cmp	r1, #0
    96ec:	030c383c 	movweq	r3, #51260	; 0xc83c
    96f0:	03403000 	movteq	r3, #0
    96f4:	13a0001d 	movne	r0, #29
    96f8:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    96fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9700:	e1a033a3 	lsr	r3, r3, #7
    9704:	e3a02e19 	mov	r2, #400	; 0x190
    9708:	e0611392 	mls	r1, r2, r3, r1
    970c:	e16f1f11 	clz	r1, r1
    9710:	e1a012a1 	lsr	r1, r1, #5
    9714:	eafffff3 	b	96e8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

00009718 <CTimer::Get()>:
    9718:	e30c3e58 	movw	r3, #52824	; 0xce58
    971c:	e3403000 	movt	r3, #0
    9720:	e5930000 	ldr	r0, [r3]
    9724:	e12fff1e 	bx	lr

00009728 <memcpy>:
    9728:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    972c:	e352007f 	cmp	r2, #127	; 0x7f
    9730:	9a00000b 	bls	9764 <memcpy+0x3c>
    9734:	e3110003 	tst	r1, #3
    9738:	1a000009 	bne	9764 <memcpy+0x3c>
    973c:	e3100003 	tst	r0, #3
    9740:	1a000007 	bne	9764 <memcpy+0x3c>
    9744:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    9748:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    974c:	e2422020 	sub	r2, r2, #32
    9750:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    9754:	f5d1f040 	pld	[r1, #64]	; 0x40
    9758:	e352001f 	cmp	r2, #31
    975c:	8afffff9 	bhi	9748 <memcpy+0x20>
    9760:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    9764:	e3520000 	cmp	r2, #0
    9768:	0a000003 	beq	977c <memcpy+0x54>
    976c:	e4d13001 	ldrb	r3, [r1], #1
    9770:	e2522001 	subs	r2, r2, #1
    9774:	e4c03001 	strb	r3, [r0], #1
    9778:	1afffffb 	bne	976c <memcpy+0x44>
    977c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    9780:	e12fff1e 	bx	lr

00009784 <CPageTable::CPageTable()>:
    9784:	e3a01000 	mov	r1, #0
    9788:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
    978c:	e92d4010 	push	{r4, lr}
    9790:	e1a0c001 	mov	ip, r1
    9794:	e1a04000 	mov	r4, r0
    9798:	e1a03002 	mov	r3, r2
    979c:	e3a0e002 	mov	lr, #2
    97a0:	e3a00001 	mov	r0, #1
    97a4:	e8840006 	stm	r4, {r1, r2}
    97a8:	e5d32000 	ldrb	r2, [r3]
    97ac:	e35c0b01 	cmp	ip, #1024	; 0x400
    97b0:	e5d31002 	ldrb	r1, [r3, #2]
    97b4:	e2833004 	add	r3, r3, #4
    97b8:	e7c1201e 	bfi	r2, lr, #0, #2
    97bc:	e3811001 	orr	r1, r1, #1
    97c0:	e6ef2072 	uxtb	r2, r2
    97c4:	e20110f9 	and	r1, r1, #249	; 0xf9
    97c8:	e3822004 	orr	r2, r2, #4
    97cc:	e7c3119f 	bfc	r1, #3, #1
    97d0:	e20220f7 	and	r2, r2, #247	; 0xf7
    97d4:	e5431002 	strb	r1, [r3, #-2]
    97d8:	e7c4221f 	bfc	r2, #4, #1
    97dc:	e5432004 	strb	r2, [r3, #-4]
    97e0:	e15320b4 	ldrh	r2, [r3, #-4]
    97e4:	e15310b2 	ldrh	r1, [r3, #-2]
    97e8:	e7c8229f 	bfc	r2, #5, #4
    97ec:	e14320b4 	strh	r2, [r3, #-4]
    97f0:	e7cf121c 	bfi	r1, ip, #4, #12
    97f4:	e28cc001 	add	ip, ip, #1
    97f8:	e1a02422 	lsr	r2, r2, #8
    97fc:	e14310b2 	strh	r1, [r3, #-2]
    9800:	e20220fd 	and	r2, r2, #253	; 0xfd
    9804:	e7c32110 	bfi	r2, r0, #2, #2
    9808:	e202208f 	and	r2, r2, #143	; 0x8f
    980c:	e7c7239f 	bfc	r2, #7, #1
    9810:	e5432003 	strb	r2, [r3, #-3]
    9814:	25532004 	ldrbcs	r2, [r3, #-4]
    9818:	23822010 	orrcs	r2, r2, #16
    981c:	25432004 	strbcs	r2, [r3, #-4]
    9820:	e35c0a01 	cmp	ip, #4096	; 0x1000
    9824:	1affffdf 	bne	97a8 <CPageTable::CPageTable()+0x24>
    9828:	eb0007d2 	bl	b778 <CleanDataCache>
    982c:	e1a00004 	mov	r0, r4
    9830:	e8bd8010 	pop	{r4, pc}

00009834 <CPageTable::CPageTable(unsigned int)>:
    9834:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9838:	e3a06001 	mov	r6, #1
    983c:	e5806000 	str	r6, [r0]
    9840:	e1a04000 	mov	r4, r0
    9844:	e1a05001 	mov	r5, r1
    9848:	eb0008dc 	bl	bbc0 <palloc>
    984c:	e3a0c000 	mov	ip, #0
    9850:	e30c1814 	movw	r1, #51220	; 0xc814
    9854:	e1a0e006 	mov	lr, r6
    9858:	e3401000 	movt	r1, #0
    985c:	e1a0700c 	mov	r7, ip
    9860:	e3a06002 	mov	r6, #2
    9864:	e1a03000 	mov	r3, r0
    9868:	e5840004 	str	r0, [r4, #4]
    986c:	ea000009 	b	9898 <CPageTable::CPageTable(unsigned int)+0x64>
    9870:	e6ef0072 	uxtb	r0, r2
    9874:	e5d32002 	ldrb	r2, [r3, #2]
    9878:	e7c30197 	bfi	r0, r7, #3, #1
    987c:	e5c30000 	strb	r0, [r3]
    9880:	e3822001 	orr	r2, r2, #1
    9884:	e5c32002 	strb	r2, [r3, #2]
    9888:	e28cc601 	add	ip, ip, #1048576	; 0x100000
    988c:	e2833004 	add	r3, r3, #4
    9890:	e35c0101 	cmp	ip, #1073741824	; 0x40000000
    9894:	0a00001f 	beq	9918 <CPageTable::CPageTable(unsigned int)+0xe4>
    9898:	e5d32001 	ldrb	r2, [r3, #1]
    989c:	e7e30a5c 	ubfx	r0, ip, #20, #4
    98a0:	e15c0001 	cmp	ip, r1
    98a4:	e386800c 	orr	r8, r6, #12
    98a8:	e20220fc 	and	r2, r2, #252	; 0xfc
    98ac:	e1a00200 	lsl	r0, r0, #4
    98b0:	e7c3211e 	bfi	r2, lr, #2, #2
    98b4:	e5c30002 	strb	r0, [r3, #2]
    98b8:	e202208f 	and	r2, r2, #143	; 0x8f
    98bc:	e1a00c2c 	lsr	r0, ip, #24
    98c0:	e7c7239f 	bfc	r2, #7, #1
    98c4:	e5c38000 	strb	r8, [r3]
    98c8:	e5c32001 	strb	r2, [r3, #1]
    98cc:	e5c30003 	strb	r0, [r3, #3]
    98d0:	3affffec 	bcc	9888 <CPageTable::CPageTable(unsigned int)+0x54>
    98d4:	e155000c 	cmp	r5, ip
    98d8:	e6ef2078 	uxtb	r2, r8
    98dc:	e3822010 	orr	r2, r2, #16
    98e0:	e5c32000 	strb	r2, [r3]
    98e4:	9affffe1 	bls	9870 <CPageTable::CPageTable(unsigned int)+0x3c>
    98e8:	e35c0501 	cmp	ip, #4194304	; 0x400000
    98ec:	1affffe5 	bne	9888 <CPageTable::CPageTable(unsigned int)+0x54>
    98f0:	e5d32000 	ldrb	r2, [r3]
    98f4:	e3a0c605 	mov	ip, #5242880	; 0x500000
    98f8:	e5d30002 	ldrb	r0, [r3, #2]
    98fc:	e2833004 	add	r3, r3, #4
    9900:	e20220fb 	and	r2, r2, #251	; 0xfb
    9904:	e7c32197 	bfi	r2, r7, #3, #1
    9908:	e3800001 	orr	r0, r0, #1
    990c:	e5432004 	strb	r2, [r3, #-4]
    9910:	e5430002 	strb	r0, [r3, #-2]
    9914:	eaffffdf 	b	9898 <CPageTable::CPageTable(unsigned int)+0x64>
    9918:	eb000796 	bl	b778 <CleanDataCache>
    991c:	e1a00004 	mov	r0, r4
    9920:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009924 <CPageTable::~CPageTable()>:
    9924:	e5903000 	ldr	r3, [r0]
    9928:	e92d4010 	push	{r4, lr}
    992c:	e3530000 	cmp	r3, #0
    9930:	e1a04000 	mov	r4, r0
    9934:	0a000001 	beq	9940 <CPageTable::~CPageTable()+0x1c>
    9938:	e5900004 	ldr	r0, [r0, #4]
    993c:	eb0008c3 	bl	bc50 <pfree>
    9940:	e1a00004 	mov	r0, r4
    9944:	e8bd8010 	pop	{r4, pc}

00009948 <CPageTable::GetBaseAddress() const>:
    9948:	e5900004 	ldr	r0, [r0, #4]
    994c:	e3800059 	orr	r0, r0, #89	; 0x59
    9950:	e12fff1e 	bx	lr

00009954 <CLogger::CLogger(unsigned int, CTimer*)>:
    9954:	e92d4010 	push	{r4, lr}
    9958:	e1a04000 	mov	r4, r0
    995c:	e5801000 	str	r1, [r0]
    9960:	e3a03000 	mov	r3, #0
    9964:	e5802004 	str	r2, [r0, #4]
    9968:	e3a0c001 	mov	ip, #1
    996c:	e5843008 	str	r3, [r4, #8]
    9970:	e3a00901 	mov	r0, #16384	; 0x4000
    9974:	e584300c 	str	r3, [r4, #12]
    9978:	e5843010 	str	r3, [r4, #16]
    997c:	e5843014 	str	r3, [r4, #20]
    9980:	e584c018 	str	ip, [r4, #24]
    9984:	ebfffccc 	bl	8cbc <operator new[](unsigned int)>
    9988:	e30c3e5c 	movw	r3, #52828	; 0xce5c
    998c:	e3403000 	movt	r3, #0
    9990:	e5834000 	str	r4, [r3]
    9994:	e584000c 	str	r0, [r4, #12]
    9998:	e1a00004 	mov	r0, r4
    999c:	e8bd8010 	pop	{r4, pc}

000099a0 <CLogger::~CLogger()>:
    99a0:	e92d4010 	push	{r4, lr}
    99a4:	e1a04000 	mov	r4, r0
    99a8:	e590000c 	ldr	r0, [r0, #12]
    99ac:	e3a02000 	mov	r2, #0
    99b0:	e30c3e5c 	movw	r3, #52828	; 0xce5c
    99b4:	e3403000 	movt	r3, #0
    99b8:	e1500002 	cmp	r0, r2
    99bc:	e5832000 	str	r2, [r3]
    99c0:	0a000000 	beq	99c8 <CLogger::~CLogger()+0x28>
    99c4:	ebfffcbe 	bl	8cc4 <operator delete[](void*)>
    99c8:	e1a00004 	mov	r0, r4
    99cc:	e8bd8010 	pop	{r4, pc}

000099d0 <CLogger::Get()>:
    99d0:	e30c3e5c 	movw	r3, #52828	; 0xce5c
    99d4:	e3403000 	movt	r3, #0
    99d8:	e5930000 	ldr	r0, [r3]
    99dc:	e12fff1e 	bx	lr

000099e0 <CLogger::Write(char const*)>:
    99e0:	e92d4070 	push	{r4, r5, r6, lr}
    99e4:	e1a04000 	mov	r4, r0
    99e8:	e1a00001 	mov	r0, r1
    99ec:	e1a05001 	mov	r5, r1
    99f0:	eb000935 	bl	becc <strlen>
    99f4:	e1a01005 	mov	r1, r5
    99f8:	e1a06000 	mov	r6, r0
    99fc:	e5940008 	ldr	r0, [r4, #8]
    9a00:	e1a02006 	mov	r2, r6
    9a04:	e5903000 	ldr	r3, [r0]
    9a08:	e593300c 	ldr	r3, [r3, #12]
    9a0c:	e12fff33 	blx	r3
    9a10:	e5940018 	ldr	r0, [r4, #24]
    9a14:	e3500000 	cmp	r0, #0
    9a18:	1a000017 	bne	9a7c <CLogger::Write(char const*)+0x9c>
    9a1c:	e0850006 	add	r0, r5, r6
    9a20:	e1550000 	cmp	r5, r0
    9a24:	0a00000f 	beq	9a68 <CLogger::Write(char const*)+0x88>
    9a28:	e0d530d1 	ldrsb	r3, [r5], #1
    9a2c:	e353000d 	cmp	r3, #13
    9a30:	0afffffa 	beq	9a20 <CLogger::Write(char const*)+0x40>
    9a34:	e5941010 	ldr	r1, [r4, #16]
    9a38:	e594c00c 	ldr	ip, [r4, #12]
    9a3c:	e7cc3001 	strb	r3, [ip, r1]
    9a40:	e5943010 	ldr	r3, [r4, #16]
    9a44:	e5941014 	ldr	r1, [r4, #20]
    9a48:	e2833001 	add	r3, r3, #1
    9a4c:	e7ed3053 	ubfx	r3, r3, #0, #14
    9a50:	e5843010 	str	r3, [r4, #16]
    9a54:	e1530001 	cmp	r3, r1
    9a58:	1afffff0 	bne	9a20 <CLogger::Write(char const*)+0x40>
    9a5c:	e2433001 	sub	r3, r3, #1
    9a60:	e7ed3053 	ubfx	r3, r3, #0, #14
    9a64:	e5843010 	str	r3, [r4, #16]
    9a68:	e5943018 	ldr	r3, [r4, #24]
    9a6c:	e3530000 	cmp	r3, #0
    9a70:	08bd8070 	popeq	{r4, r5, r6, pc}
    9a74:	e8bd4070 	pop	{r4, r5, r6, lr}
    9a78:	eafffca2 	b	8d08 <LeaveCritical>
    9a7c:	ebfffc93 	bl	8cd0 <EnterCritical>
    9a80:	eaffffe5 	b	9a1c <CLogger::Write(char const*)+0x3c>

00009a84 <CLogger::Read(void*, unsigned int)>:
    9a84:	e92d4070 	push	{r4, r5, r6, lr}
    9a88:	e1a04000 	mov	r4, r0
    9a8c:	e5900018 	ldr	r0, [r0, #24]
    9a90:	e1a05001 	mov	r5, r1
    9a94:	e1a06002 	mov	r6, r2
    9a98:	e3500000 	cmp	r0, #0
    9a9c:	1a00001b 	bne	9b10 <CLogger::Read(void*, unsigned int)+0x8c>
    9aa0:	e5942010 	ldr	r2, [r4, #16]
    9aa4:	e5943014 	ldr	r3, [r4, #20]
    9aa8:	e1520003 	cmp	r2, r3
    9aac:	0a000020 	beq	9b34 <CLogger::Read(void*, unsigned int)+0xb0>
    9ab0:	e1a01005 	mov	r1, r5
    9ab4:	e3a05000 	mov	r5, #0
    9ab8:	ea00000a 	b	9ae8 <CLogger::Read(void*, unsigned int)+0x64>
    9abc:	e594000c 	ldr	r0, [r4, #12]
    9ac0:	e2855001 	add	r5, r5, #1
    9ac4:	e19030d3 	ldrsb	r3, [r0, r3]
    9ac8:	e4c13001 	strb	r3, [r1], #1
    9acc:	e5943014 	ldr	r3, [r4, #20]
    9ad0:	e5940010 	ldr	r0, [r4, #16]
    9ad4:	e2833001 	add	r3, r3, #1
    9ad8:	e7ed3053 	ubfx	r3, r3, #0, #14
    9adc:	e5843014 	str	r3, [r4, #20]
    9ae0:	e1530000 	cmp	r3, r0
    9ae4:	0a000001 	beq	9af0 <CLogger::Read(void*, unsigned int)+0x6c>
    9ae8:	e1550006 	cmp	r5, r6
    9aec:	1afffff2 	bne	9abc <CLogger::Read(void*, unsigned int)+0x38>
    9af0:	e5943018 	ldr	r3, [r4, #24]
    9af4:	e3530000 	cmp	r3, #0
    9af8:	1a000001 	bne	9b04 <CLogger::Read(void*, unsigned int)+0x80>
    9afc:	e1a00005 	mov	r0, r5
    9b00:	e8bd8070 	pop	{r4, r5, r6, pc}
    9b04:	ebfffc7f 	bl	8d08 <LeaveCritical>
    9b08:	e1a00005 	mov	r0, r5
    9b0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9b10:	ebfffc6e 	bl	8cd0 <EnterCritical>
    9b14:	e5942010 	ldr	r2, [r4, #16]
    9b18:	e5943014 	ldr	r3, [r4, #20]
    9b1c:	e1520003 	cmp	r2, r3
    9b20:	1affffe2 	bne	9ab0 <CLogger::Read(void*, unsigned int)+0x2c>
    9b24:	e5943018 	ldr	r3, [r4, #24]
    9b28:	e3530000 	cmp	r3, #0
    9b2c:	0a000000 	beq	9b34 <CLogger::Read(void*, unsigned int)+0xb0>
    9b30:	ebfffc74 	bl	8d08 <LeaveCritical>
    9b34:	e3e05000 	mvn	r5, #0
    9b38:	e1a00005 	mov	r0, r5
    9b3c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009b40 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    9b40:	e590c000 	ldr	ip, [r0]
    9b44:	e152000c 	cmp	r2, ip
    9b48:	812fff1e 	bxhi	lr
    9b4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9b50:	e24dd020 	sub	sp, sp, #32
    9b54:	e1a04000 	mov	r4, r0
    9b58:	e1a05002 	mov	r5, r2
    9b5c:	e1a0000d 	mov	r0, sp
    9b60:	e1a07003 	mov	r7, r3
    9b64:	e1a06001 	mov	r6, r1
    9b68:	eb0000c5 	bl	9e84 <CString::CString()>
    9b6c:	e3550000 	cmp	r5, #0
    9b70:	0a000049 	beq	9c9c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    9b74:	e5940004 	ldr	r0, [r4, #4]
    9b78:	e3500000 	cmp	r0, #0
    9b7c:	0a000032 	beq	9c4c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    9b80:	ebfffd1b 	bl	8ff4 <CTimer::GetTimeString()>
    9b84:	e2508000 	subs	r8, r0, #0
    9b88:	0a00000b 	beq	9bbc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    9b8c:	eb0000d3 	bl	9ee0 <CString::operator char const*() const>
    9b90:	e1a01000 	mov	r1, r0
    9b94:	e1a0000d 	mov	r0, sp
    9b98:	eb0000eb 	bl	9f4c <CString::Append(char const*)>
    9b9c:	e1a0000d 	mov	r0, sp
    9ba0:	e30c18f4 	movw	r1, #51444	; 0xc8f4
    9ba4:	e3401000 	movt	r1, #0
    9ba8:	eb0000e7 	bl	9f4c <CString::Append(char const*)>
    9bac:	e5983000 	ldr	r3, [r8]
    9bb0:	e1a00008 	mov	r0, r8
    9bb4:	e5933004 	ldr	r3, [r3, #4]
    9bb8:	e12fff33 	blx	r3
    9bbc:	e1a01006 	mov	r1, r6
    9bc0:	e1a0000d 	mov	r0, sp
    9bc4:	e28d6010 	add	r6, sp, #16
    9bc8:	eb0000df 	bl	9f4c <CString::Append(char const*)>
    9bcc:	e1a0000d 	mov	r0, sp
    9bd0:	e30c18f8 	movw	r1, #51448	; 0xc8f8
    9bd4:	e3401000 	movt	r1, #0
    9bd8:	eb0000db 	bl	9f4c <CString::Append(char const*)>
    9bdc:	e1a00006 	mov	r0, r6
    9be0:	eb0000a7 	bl	9e84 <CString::CString()>
    9be4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    9be8:	e1a01007 	mov	r1, r7
    9bec:	e1a00006 	mov	r0, r6
    9bf0:	eb0001fa 	bl	a3e0 <CString::FormatV(char const*, std::__va_list)>
    9bf4:	e1a00006 	mov	r0, r6
    9bf8:	eb0000b8 	bl	9ee0 <CString::operator char const*() const>
    9bfc:	e1a01000 	mov	r1, r0
    9c00:	e1a0000d 	mov	r0, sp
    9c04:	eb0000d0 	bl	9f4c <CString::Append(char const*)>
    9c08:	e3550000 	cmp	r5, #0
    9c0c:	0a00003c 	beq	9d04 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    9c10:	e1a0000d 	mov	r0, sp
    9c14:	e30c1904 	movw	r1, #51460	; 0xc904
    9c18:	e3401000 	movt	r1, #0
    9c1c:	eb0000ca 	bl	9f4c <CString::Append(char const*)>
    9c20:	e1a0000d 	mov	r0, sp
    9c24:	eb0000ad 	bl	9ee0 <CString::operator char const*() const>
    9c28:	e1a01000 	mov	r1, r0
    9c2c:	e1a00004 	mov	r0, r4
    9c30:	ebffff6a 	bl	99e0 <CLogger::Write(char const*)>
    9c34:	e1a00006 	mov	r0, r6
    9c38:	eb00005e 	bl	9db8 <CString::~CString()>
    9c3c:	e1a0000d 	mov	r0, sp
    9c40:	eb00005c 	bl	9db8 <CString::~CString()>
    9c44:	e28dd020 	add	sp, sp, #32
    9c48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9c4c:	e1a01006 	mov	r1, r6
    9c50:	e1a0000d 	mov	r0, sp
    9c54:	e28d6010 	add	r6, sp, #16
    9c58:	eb0000bb 	bl	9f4c <CString::Append(char const*)>
    9c5c:	e1a0000d 	mov	r0, sp
    9c60:	e30c18f8 	movw	r1, #51448	; 0xc8f8
    9c64:	e3401000 	movt	r1, #0
    9c68:	eb0000b7 	bl	9f4c <CString::Append(char const*)>
    9c6c:	e1a00006 	mov	r0, r6
    9c70:	eb000083 	bl	9e84 <CString::CString()>
    9c74:	e1a01007 	mov	r1, r7
    9c78:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    9c7c:	e1a00006 	mov	r0, r6
    9c80:	eb0001d6 	bl	a3e0 <CString::FormatV(char const*, std::__va_list)>
    9c84:	e1a00006 	mov	r0, r6
    9c88:	eb000094 	bl	9ee0 <CString::operator char const*() const>
    9c8c:	e1a01000 	mov	r1, r0
    9c90:	e1a0000d 	mov	r0, sp
    9c94:	eb0000ac 	bl	9f4c <CString::Append(char const*)>
    9c98:	eaffffdc 	b	9c10 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    9c9c:	e30c18ec 	movw	r1, #51436	; 0xc8ec
    9ca0:	e1a0000d 	mov	r0, sp
    9ca4:	e3401000 	movt	r1, #0
    9ca8:	eb000092 	bl	9ef8 <CString::operator=(char const*)>
    9cac:	e5940004 	ldr	r0, [r4, #4]
    9cb0:	e3500000 	cmp	r0, #0
    9cb4:	1affffb1 	bne	9b80 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    9cb8:	e1a01006 	mov	r1, r6
    9cbc:	e1a0000d 	mov	r0, sp
    9cc0:	e28d6010 	add	r6, sp, #16
    9cc4:	eb0000a0 	bl	9f4c <CString::Append(char const*)>
    9cc8:	e1a0000d 	mov	r0, sp
    9ccc:	e30c18f8 	movw	r1, #51448	; 0xc8f8
    9cd0:	e3401000 	movt	r1, #0
    9cd4:	eb00009c 	bl	9f4c <CString::Append(char const*)>
    9cd8:	e1a00006 	mov	r0, r6
    9cdc:	eb000068 	bl	9e84 <CString::CString()>
    9ce0:	e1a01007 	mov	r1, r7
    9ce4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    9ce8:	e1a00006 	mov	r0, r6
    9cec:	eb0001bb 	bl	a3e0 <CString::FormatV(char const*, std::__va_list)>
    9cf0:	e1a00006 	mov	r0, r6
    9cf4:	eb000079 	bl	9ee0 <CString::operator char const*() const>
    9cf8:	e1a01000 	mov	r1, r0
    9cfc:	e1a0000d 	mov	r0, sp
    9d00:	eb000091 	bl	9f4c <CString::Append(char const*)>
    9d04:	e1a0000d 	mov	r0, sp
    9d08:	e30c18fc 	movw	r1, #51452	; 0xc8fc
    9d0c:	e3401000 	movt	r1, #0
    9d10:	eb00008d 	bl	9f4c <CString::Append(char const*)>
    9d14:	e1a0000d 	mov	r0, sp
    9d18:	e30c1904 	movw	r1, #51460	; 0xc904
    9d1c:	e3401000 	movt	r1, #0
    9d20:	eb000089 	bl	9f4c <CString::Append(char const*)>
    9d24:	e1a0000d 	mov	r0, sp
    9d28:	eb00006c 	bl	9ee0 <CString::operator char const*() const>
    9d2c:	e1a01000 	mov	r1, r0
    9d30:	e1a00004 	mov	r0, r4
    9d34:	ebffff29 	bl	99e0 <CLogger::Write(char const*)>
    9d38:	ebfffc05 	bl	8d54 <halt>
    9d3c:	eaffffbc 	b	9c34 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

00009d40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    9d40:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    9d44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9d48:	e24dd010 	sub	sp, sp, #16
    9d4c:	e28dc018 	add	ip, sp, #24
    9d50:	e59d3014 	ldr	r3, [sp, #20]
    9d54:	e58dc000 	str	ip, [sp]
    9d58:	e58dc00c 	str	ip, [sp, #12]
    9d5c:	ebffff77 	bl	9b40 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    9d60:	e28dd010 	add	sp, sp, #16
    9d64:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    9d68:	e28dd004 	add	sp, sp, #4
    9d6c:	e12fff1e 	bx	lr

00009d70 <CLogger::Initialize(CDevice*)>:
    9d70:	e92d4010 	push	{r4, lr}
    9d74:	e24dd008 	sub	sp, sp, #8
    9d78:	e5801008 	str	r1, [r0, #8]
    9d7c:	e1a04000 	mov	r4, r0
    9d80:	eb000633 	bl	b654 <CMachineInfo::Get()>
    9d84:	eb0005d5 	bl	b4e0 <CMachineInfo::GetMachineName() const>
    9d88:	e3a02003 	mov	r2, #3
    9d8c:	e30c3908 	movw	r3, #51464	; 0xc908
    9d90:	e30c1920 	movw	r1, #51488	; 0xc920
    9d94:	e3403000 	movt	r3, #0
    9d98:	e3401000 	movt	r1, #0
    9d9c:	e58d0000 	str	r0, [sp]
    9da0:	e1a00004 	mov	r0, r4
    9da4:	ebffffe5 	bl	9d40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9da8:	e3a00001 	mov	r0, #1
    9dac:	e28dd008 	add	sp, sp, #8
    9db0:	e8bd8010 	pop	{r4, pc}
    9db4:	00000000 	andeq	r0, r0, r0

00009db8 <CString::~CString()>:
    9db8:	e92d4010 	push	{r4, lr}
    9dbc:	e1a04000 	mov	r4, r0
    9dc0:	e5900004 	ldr	r0, [r0, #4]
    9dc4:	e59f3014 	ldr	r3, [pc, #20]	; 9de0 <CString::~CString()+0x28>
    9dc8:	e3500000 	cmp	r0, #0
    9dcc:	e5843000 	str	r3, [r4]
    9dd0:	0a000000 	beq	9dd8 <CString::~CString()+0x20>
    9dd4:	ebfffbba 	bl	8cc4 <operator delete[](void*)>
    9dd8:	e1a00004 	mov	r0, r4
    9ddc:	e8bd8010 	pop	{r4, pc}
    9de0:	0000c930 	.word	0x0000c930

00009de4 <CString::~CString()>:
    9de4:	e92d4010 	push	{r4, lr}
    9de8:	e1a04000 	mov	r4, r0
    9dec:	e5900004 	ldr	r0, [r0, #4]
    9df0:	e59f3020 	ldr	r3, [pc, #32]	; 9e18 <CString::~CString()+0x34>
    9df4:	e3500000 	cmp	r0, #0
    9df8:	e5843000 	str	r3, [r4]
    9dfc:	0a000000 	beq	9e04 <CString::~CString()+0x20>
    9e00:	ebfffbaf 	bl	8cc4 <operator delete[](void*)>
    9e04:	e1a00004 	mov	r0, r4
    9e08:	e3a01010 	mov	r1, #16
    9e0c:	ebfffbad 	bl	8cc8 <operator delete(void*, unsigned int)>
    9e10:	e1a00004 	mov	r0, r4
    9e14:	e8bd8010 	pop	{r4, pc}
    9e18:	0000c930 	.word	0x0000c930

00009e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    9e1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9e20:	e990002c 	ldmib	r0, {r2, r3, r5}
    9e24:	e0455002 	sub	r5, r5, r2
    9e28:	e0851001 	add	r1, r5, r1
    9e2c:	e2812001 	add	r2, r1, #1
    9e30:	e1520003 	cmp	r2, r3
    9e34:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    9e38:	e2816041 	add	r6, r1, #65	; 0x41
    9e3c:	e1a04000 	mov	r4, r0
    9e40:	e1a00006 	mov	r0, r6
    9e44:	ebfffb9c 	bl	8cbc <operator new[](unsigned int)>
    9e48:	e594300c 	ldr	r3, [r4, #12]
    9e4c:	e3a02000 	mov	r2, #0
    9e50:	e5c32000 	strb	r2, [r3]
    9e54:	e5941004 	ldr	r1, [r4, #4]
    9e58:	e1a07000 	mov	r7, r0
    9e5c:	eb00083f 	bl	bf60 <strcpy>
    9e60:	e5940004 	ldr	r0, [r4, #4]
    9e64:	e3500000 	cmp	r0, #0
    9e68:	0a000000 	beq	9e70 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    9e6c:	ebfffb94 	bl	8cc4 <operator delete[](void*)>
    9e70:	e0875005 	add	r5, r7, r5
    9e74:	e5847004 	str	r7, [r4, #4]
    9e78:	e584500c 	str	r5, [r4, #12]
    9e7c:	e5846008 	str	r6, [r4, #8]
    9e80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009e84 <CString::CString()>:
    9e84:	e59f1010 	ldr	r1, [pc, #16]	; 9e9c <CString::CString()+0x18>
    9e88:	e3a02000 	mov	r2, #0
    9e8c:	e5802004 	str	r2, [r0, #4]
    9e90:	e5802008 	str	r2, [r0, #8]
    9e94:	e5801000 	str	r1, [r0]
    9e98:	e12fff1e 	bx	lr
    9e9c:	0000c930 	.word	0x0000c930

00009ea0 <CString::CString(char const*)>:
    9ea0:	e59f3034 	ldr	r3, [pc, #52]	; 9edc <CString::CString(char const*)+0x3c>
    9ea4:	e92d4070 	push	{r4, r5, r6, lr}
    9ea8:	e1a04000 	mov	r4, r0
    9eac:	e5843000 	str	r3, [r4]
    9eb0:	e1a00001 	mov	r0, r1
    9eb4:	e1a05001 	mov	r5, r1
    9eb8:	eb000803 	bl	becc <strlen>
    9ebc:	e2800001 	add	r0, r0, #1
    9ec0:	e5840008 	str	r0, [r4, #8]
    9ec4:	ebfffb7c 	bl	8cbc <operator new[](unsigned int)>
    9ec8:	e1a01005 	mov	r1, r5
    9ecc:	e5840004 	str	r0, [r4, #4]
    9ed0:	eb000822 	bl	bf60 <strcpy>
    9ed4:	e1a00004 	mov	r0, r4
    9ed8:	e8bd8070 	pop	{r4, r5, r6, pc}
    9edc:	0000c930 	.word	0x0000c930

00009ee0 <CString::operator char const*() const>:
    9ee0:	e5900004 	ldr	r0, [r0, #4]
    9ee4:	e30c3c88 	movw	r3, #52360	; 0xcc88
    9ee8:	e3403000 	movt	r3, #0
    9eec:	e3500000 	cmp	r0, #0
    9ef0:	01a00003 	moveq	r0, r3
    9ef4:	e12fff1e 	bx	lr

00009ef8 <CString::operator=(char const*)>:
    9ef8:	e92d4070 	push	{r4, r5, r6, lr}
    9efc:	e1a04000 	mov	r4, r0
    9f00:	e5900004 	ldr	r0, [r0, #4]
    9f04:	e1a05001 	mov	r5, r1
    9f08:	e3500000 	cmp	r0, #0
    9f0c:	0a000000 	beq	9f14 <CString::operator=(char const*)+0x1c>
    9f10:	ebfffb6b 	bl	8cc4 <operator delete[](void*)>
    9f14:	e1a00005 	mov	r0, r5
    9f18:	eb0007eb 	bl	becc <strlen>
    9f1c:	e2800001 	add	r0, r0, #1
    9f20:	e5840008 	str	r0, [r4, #8]
    9f24:	ebfffb64 	bl	8cbc <operator new[](unsigned int)>
    9f28:	e1a01005 	mov	r1, r5
    9f2c:	e5840004 	str	r0, [r4, #4]
    9f30:	eb00080a 	bl	bf60 <strcpy>
    9f34:	e5940004 	ldr	r0, [r4, #4]
    9f38:	e8bd8070 	pop	{r4, r5, r6, pc}

00009f3c <CString::GetLength() const>:
    9f3c:	e5900004 	ldr	r0, [r0, #4]
    9f40:	e3500000 	cmp	r0, #0
    9f44:	012fff1e 	bxeq	lr
    9f48:	ea0007df 	b	becc <strlen>

00009f4c <CString::Append(char const*)>:
    9f4c:	e92d4070 	push	{r4, r5, r6, lr}
    9f50:	e1a04000 	mov	r4, r0
    9f54:	e5900004 	ldr	r0, [r0, #4]
    9f58:	e3a03001 	mov	r3, #1
    9f5c:	e1a06001 	mov	r6, r1
    9f60:	e5843008 	str	r3, [r4, #8]
    9f64:	e3500000 	cmp	r0, #0
    9f68:	0a000003 	beq	9f7c <CString::Append(char const*)+0x30>
    9f6c:	eb0007d6 	bl	becc <strlen>
    9f70:	e5943008 	ldr	r3, [r4, #8]
    9f74:	e0830000 	add	r0, r3, r0
    9f78:	e5840008 	str	r0, [r4, #8]
    9f7c:	e1a00006 	mov	r0, r6
    9f80:	eb0007d1 	bl	becc <strlen>
    9f84:	e5943008 	ldr	r3, [r4, #8]
    9f88:	e0800003 	add	r0, r0, r3
    9f8c:	e5840008 	str	r0, [r4, #8]
    9f90:	ebfffb49 	bl	8cbc <operator new[](unsigned int)>
    9f94:	e5941004 	ldr	r1, [r4, #4]
    9f98:	e3510000 	cmp	r1, #0
    9f9c:	e1a05000 	mov	r5, r0
    9fa0:	05c01000 	strbeq	r1, [r0]
    9fa4:	0a000004 	beq	9fbc <CString::Append(char const*)+0x70>
    9fa8:	eb0007ec 	bl	bf60 <strcpy>
    9fac:	e5940004 	ldr	r0, [r4, #4]
    9fb0:	e3500000 	cmp	r0, #0
    9fb4:	0a000000 	beq	9fbc <CString::Append(char const*)+0x70>
    9fb8:	ebfffb41 	bl	8cc4 <operator delete[](void*)>
    9fbc:	e1a01006 	mov	r1, r6
    9fc0:	e1a00005 	mov	r0, r5
    9fc4:	eb000803 	bl	bfd8 <strcat>
    9fc8:	e5845004 	str	r5, [r4, #4]
    9fcc:	e8bd8070 	pop	{r4, r5, r6, pc}

00009fd0 <CString::Compare(char const*) const>:
    9fd0:	e5900004 	ldr	r0, [r0, #4]
    9fd4:	ea0007c6 	b	bef4 <strcmp>

00009fd8 <CString::Find(char) const>:
    9fd8:	e5902004 	ldr	r2, [r0, #4]
    9fdc:	e1d230d0 	ldrsb	r3, [r2]
    9fe0:	e3530000 	cmp	r3, #0
    9fe4:	0a000009 	beq	a010 <CString::Find(char) const+0x38>
    9fe8:	e1510003 	cmp	r1, r3
    9fec:	e3a00000 	mov	r0, #0
    9ff0:	1a000002 	bne	a000 <CString::Find(char) const+0x28>
    9ff4:	ea000007 	b	a018 <CString::Find(char) const+0x40>
    9ff8:	e1530001 	cmp	r3, r1
    9ffc:	012fff1e 	bxeq	lr
    a000:	e1f230d1 	ldrsb	r3, [r2, #1]!
    a004:	e2800001 	add	r0, r0, #1
    a008:	e3530000 	cmp	r3, #0
    a00c:	1afffff9 	bne	9ff8 <CString::Find(char) const+0x20>
    a010:	e3e00000 	mvn	r0, #0
    a014:	e12fff1e 	bx	lr
    a018:	e12fff1e 	bx	lr

0000a01c <CString::PutChar(char, unsigned int)>:
    a01c:	e92d4070 	push	{r4, r5, r6, lr}
    a020:	e2524000 	subs	r4, r2, #0
    a024:	08bd8070 	popeq	{r4, r5, r6, pc}
    a028:	e1a06001 	mov	r6, r1
    a02c:	e1a01004 	mov	r1, r4
    a030:	e1a05000 	mov	r5, r0
    a034:	ebffff78 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a038:	e2443001 	sub	r3, r4, #1
    a03c:	e595200c 	ldr	r2, [r5, #12]
    a040:	e2433001 	sub	r3, r3, #1
    a044:	e3730001 	cmn	r3, #1
    a048:	e2820001 	add	r0, r2, #1
    a04c:	e585000c 	str	r0, [r5, #12]
    a050:	e5c26000 	strb	r6, [r2]
    a054:	1afffff8 	bne	a03c <CString::PutChar(char, unsigned int)+0x20>
    a058:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a05c <CString::PutString(char const*)>:
    a05c:	e92d4070 	push	{r4, r5, r6, lr}
    a060:	e1a04000 	mov	r4, r0
    a064:	e1a00001 	mov	r0, r1
    a068:	e1a05001 	mov	r5, r1
    a06c:	eb000796 	bl	becc <strlen>
    a070:	e2506000 	subs	r6, r0, #0
    a074:	0a000002 	beq	a084 <CString::PutString(char const*)+0x28>
    a078:	e1a01006 	mov	r1, r6
    a07c:	e1a00004 	mov	r0, r4
    a080:	ebffff65 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a084:	e1a01005 	mov	r1, r5
    a088:	e594000c 	ldr	r0, [r4, #12]
    a08c:	eb0007b3 	bl	bf60 <strcpy>
    a090:	e594100c 	ldr	r1, [r4, #12]
    a094:	e0811006 	add	r1, r1, r6
    a098:	e584100c 	str	r1, [r4, #12]
    a09c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a0a0 <CString::ReserveSpace(unsigned int)>:
    a0a0:	e3510000 	cmp	r1, #0
    a0a4:	012fff1e 	bxeq	lr
    a0a8:	eaffff5b 	b	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000a0ac <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    a0ac:	e1510002 	cmp	r1, r2
    a0b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a0b4:	e1a06001 	mov	r6, r1
    a0b8:	e1a08002 	mov	r8, r2
    a0bc:	e1a0a000 	mov	sl, r0
    a0c0:	e1a07003 	mov	r7, r3
    a0c4:	23a05001 	movcs	r5, #1
    a0c8:	3a000022 	bcc	a158 <CString::ntoa(char*, unsigned long, unsigned int, int)+0xac>
    a0cc:	e0050598 	mul	r5, r8, r5
    a0d0:	e1a00006 	mov	r0, r6
    a0d4:	e1a01005 	mov	r1, r5
    a0d8:	eb00074f 	bl	be1c <__aeabi_uidiv>
    a0dc:	e1500008 	cmp	r0, r8
    a0e0:	e1a04000 	mov	r4, r0
    a0e4:	2afffff8 	bcs	a0cc <CString::ntoa(char*, unsigned long, unsigned int, int)+0x20>
    a0e8:	e3570000 	cmp	r7, #0
    a0ec:	e1a0700a 	mov	r7, sl
    a0f0:	13a09037 	movne	r9, #55	; 0x37
    a0f4:	03a09057 	moveq	r9, #87	; 0x57
    a0f8:	ea000001 	b	a104 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x58>
    a0fc:	eb000746 	bl	be1c <__aeabi_uidiv>
    a100:	e1a04000 	mov	r4, r0
    a104:	e1a00006 	mov	r0, r6
    a108:	e1a01005 	mov	r1, r5
    a10c:	eb000746 	bl	be2c <__aeabi_uidivmod>
    a110:	e2877001 	add	r7, r7, #1
    a114:	e3540009 	cmp	r4, #9
    a118:	e0893004 	add	r3, r9, r4
    a11c:	e2844030 	add	r4, r4, #48	; 0x30
    a120:	e1a00005 	mov	r0, r5
    a124:	e6af3073 	sxtb	r3, r3
    a128:	96af3074 	sxtbls	r3, r4
    a12c:	e5473001 	strb	r3, [r7, #-1]
    a130:	e1a06001 	mov	r6, r1
    a134:	e1a01008 	mov	r1, r8
    a138:	eb000737 	bl	be1c <__aeabi_uidiv>
    a13c:	e2505000 	subs	r5, r0, #0
    a140:	e1a00006 	mov	r0, r6
    a144:	e1a01005 	mov	r1, r5
    a148:	1affffeb 	bne	a0fc <CString::ntoa(char*, unsigned long, unsigned int, int)+0x50>
    a14c:	e5c75000 	strb	r5, [r7]
    a150:	e1a0000a 	mov	r0, sl
    a154:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a158:	e1a04001 	mov	r4, r1
    a15c:	e3a05001 	mov	r5, #1
    a160:	eaffffe0 	b	a0e8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x3c>

0000a164 <CString::ftoa(char*, double, unsigned int)>:
    a164:	eeb50bc0 	vcmpe.f64	d0, #0.0
    a168:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a16c:	e1a08000 	mov	r8, r0
    a170:	ed2d8b02 	vpush	{d8}
    a174:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    a178:	43a0302d 	movmi	r3, #45	; 0x2d
    a17c:	42809001 	addmi	r9, r0, #1
    a180:	45c03000 	strbmi	r3, [r0]
    a184:	eeb08b40 	vmov.f64	d8, d0
    a188:	51a09000 	movpl	r9, r0
    a18c:	eddf0b91 	vldr	d16, [pc, #580]	; a3d8 <CString::ftoa(char*, double, unsigned int)+0x274>
    a190:	e24dd01c 	sub	sp, sp, #28
    a194:	e58d1004 	str	r1, [sp, #4]
    a198:	4eb18b40 	vnegmi.f64	d8, d0
    a19c:	eeb48be0 	vcmpe.f64	d8, d16
    a1a0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    a1a4:	ca00007b 	bgt	a398 <CString::ftoa(char*, double, unsigned int)+0x234>
    a1a8:	eefc7bc8 	vcvt.u32.f64	s15, d8
    a1ac:	ee175a90 	vmov	r5, s15
    a1b0:	e3550009 	cmp	r5, #9
    a1b4:	83a07001 	movhi	r7, #1
    a1b8:	83a0400a 	movhi	r4, #10
    a1bc:	9a00007d 	bls	a3b8 <CString::ftoa(char*, double, unsigned int)+0x254>
    a1c0:	e0070794 	mul	r7, r4, r7
    a1c4:	e1a00005 	mov	r0, r5
    a1c8:	e1a01007 	mov	r1, r7
    a1cc:	eb000712 	bl	be1c <__aeabi_uidiv>
    a1d0:	e3500009 	cmp	r0, #9
    a1d4:	e1a0a000 	mov	sl, r0
    a1d8:	8afffff8 	bhi	a1c0 <CString::ftoa(char*, double, unsigned int)+0x5c>
    a1dc:	e30c6ccd 	movw	r6, #52429	; 0xcccd
    a1e0:	e1a04009 	mov	r4, r9
    a1e4:	e34c6ccc 	movt	r6, #52428	; 0xcccc
    a1e8:	e1a0b005 	mov	fp, r5
    a1ec:	ea000001 	b	a1f8 <CString::ftoa(char*, double, unsigned int)+0x94>
    a1f0:	eb000709 	bl	be1c <__aeabi_uidiv>
    a1f4:	e1a0a000 	mov	sl, r0
    a1f8:	e1a0000b 	mov	r0, fp
    a1fc:	e1a01007 	mov	r1, r7
    a200:	eb000709 	bl	be2c <__aeabi_uidivmod>
    a204:	e0832697 	umull	r2, r3, r7, r6
    a208:	e35a0009 	cmp	sl, #9
    a20c:	e2844001 	add	r4, r4, #1
    a210:	e1a0b001 	mov	fp, r1
    a214:	e28a1057 	add	r1, sl, #87	; 0x57
    a218:	e28aa030 	add	sl, sl, #48	; 0x30
    a21c:	e1a0000b 	mov	r0, fp
    a220:	e6af1071 	sxtb	r1, r1
    a224:	96af107a 	sxtbls	r1, sl
    a228:	e1b071a3 	lsrs	r7, r3, #3
    a22c:	e5441001 	strb	r1, [r4, #-1]
    a230:	e1a01007 	mov	r1, r7
    a234:	1affffed 	bne	a1f0 <CString::ftoa(char*, double, unsigned int)+0x8c>
    a238:	e59d3004 	ldr	r3, [sp, #4]
    a23c:	e5c47000 	strb	r7, [r4]
    a240:	e3530000 	cmp	r3, #0
    a244:	1a000003 	bne	a258 <CString::ftoa(char*, double, unsigned int)+0xf4>
    a248:	e1a00008 	mov	r0, r8
    a24c:	e28dd01c 	add	sp, sp, #28
    a250:	ecbd8b02 	vpop	{d8}
    a254:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a258:	e1a00009 	mov	r0, r9
    a25c:	eb00071a 	bl	becc <strlen>
    a260:	e59d3004 	ldr	r3, [sp, #4]
    a264:	e3530009 	cmp	r3, #9
    a268:	31a07003 	movcc	r7, r3
    a26c:	23a07009 	movcs	r7, #9
    a270:	e3570001 	cmp	r7, #1
    a274:	e3a0302e 	mov	r3, #46	; 0x2e
    a278:	e0892000 	add	r2, r9, r0
    a27c:	e7c93000 	strb	r3, [r9, r0]
    a280:	e58d2004 	str	r2, [sp, #4]
    a284:	e2829001 	add	r9, r2, #1
    a288:	0a000050 	beq	a3d0 <CString::ftoa(char*, double, unsigned int)+0x26c>
    a28c:	e3a0200a 	mov	r2, #10
    a290:	e3a03002 	mov	r3, #2
    a294:	e1a01002 	mov	r1, r2
    a298:	e2833001 	add	r3, r3, #1
    a29c:	e1530007 	cmp	r3, r7
    a2a0:	e0020291 	mul	r2, r1, r2
    a2a4:	9afffffb 	bls	a298 <CString::ftoa(char*, double, unsigned int)+0x134>
    a2a8:	ee072a90 	vmov	s15, r2
    a2ac:	eef81b67 	vcvt.f64.u32	d17, s15
    a2b0:	ee075a90 	vmov	s15, r5
    a2b4:	eef80b67 	vcvt.f64.u32	d16, s15
    a2b8:	ee388b60 	vsub.f64	d8, d8, d16
    a2bc:	ee288b21 	vmul.f64	d8, d8, d17
    a2c0:	eefc7bc8 	vcvt.u32.f64	s15, d8
    a2c4:	ee17ba90 	vmov	fp, s15
    a2c8:	e35b0009 	cmp	fp, #9
    a2cc:	83a06001 	movhi	r6, #1
    a2d0:	83a0400a 	movhi	r4, #10
    a2d4:	9a00003a 	bls	a3c4 <CString::ftoa(char*, double, unsigned int)+0x260>
    a2d8:	e0060694 	mul	r6, r4, r6
    a2dc:	e1a0000b 	mov	r0, fp
    a2e0:	e1a01006 	mov	r1, r6
    a2e4:	eb0006cc 	bl	be1c <__aeabi_uidiv>
    a2e8:	e3500009 	cmp	r0, #9
    a2ec:	e1a0a000 	mov	sl, r0
    a2f0:	8afffff8 	bhi	a2d8 <CString::ftoa(char*, double, unsigned int)+0x174>
    a2f4:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    a2f8:	e28d400c 	add	r4, sp, #12
    a2fc:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    a300:	ea000001 	b	a30c <CString::ftoa(char*, double, unsigned int)+0x1a8>
    a304:	eb0006c4 	bl	be1c <__aeabi_uidiv>
    a308:	e1a0a000 	mov	sl, r0
    a30c:	e1a0000b 	mov	r0, fp
    a310:	e1a01006 	mov	r1, r6
    a314:	eb0006c4 	bl	be2c <__aeabi_uidivmod>
    a318:	e0832596 	umull	r2, r3, r6, r5
    a31c:	e35a0009 	cmp	sl, #9
    a320:	e2844001 	add	r4, r4, #1
    a324:	e1a0b001 	mov	fp, r1
    a328:	e28a1057 	add	r1, sl, #87	; 0x57
    a32c:	e28aa030 	add	sl, sl, #48	; 0x30
    a330:	e1a0000b 	mov	r0, fp
    a334:	e6af1071 	sxtb	r1, r1
    a338:	96af107a 	sxtbls	r1, sl
    a33c:	e1b061a3 	lsrs	r6, r3, #3
    a340:	e5441001 	strb	r1, [r4, #-1]
    a344:	e1a01006 	mov	r1, r6
    a348:	1affffed 	bne	a304 <CString::ftoa(char*, double, unsigned int)+0x1a0>
    a34c:	e28d000c 	add	r0, sp, #12
    a350:	e5c46000 	strb	r6, [r4]
    a354:	eb0006dc 	bl	becc <strlen>
    a358:	e0577000 	subs	r7, r7, r0
    a35c:	0a000006 	beq	a37c <CString::ftoa(char*, double, unsigned int)+0x218>
    a360:	e59d6004 	ldr	r6, [sp, #4]
    a364:	e3a03030 	mov	r3, #48	; 0x30
    a368:	e0862007 	add	r2, r6, r7
    a36c:	e5e63001 	strb	r3, [r6, #1]!
    a370:	e1560002 	cmp	r6, r2
    a374:	1afffffc 	bne	a36c <CString::ftoa(char*, double, unsigned int)+0x208>
    a378:	e0899007 	add	r9, r9, r7
    a37c:	e28d100c 	add	r1, sp, #12
    a380:	e1a00009 	mov	r0, r9
    a384:	eb0006f5 	bl	bf60 <strcpy>
    a388:	e1a00008 	mov	r0, r8
    a38c:	e28dd01c 	add	sp, sp, #28
    a390:	ecbd8b02 	vpop	{d8}
    a394:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a398:	e1a00009 	mov	r0, r9
    a39c:	e30c1938 	movw	r1, #51512	; 0xc938
    a3a0:	e3401000 	movt	r1, #0
    a3a4:	eb0006ed 	bl	bf60 <strcpy>
    a3a8:	e1a00008 	mov	r0, r8
    a3ac:	e28dd01c 	add	sp, sp, #28
    a3b0:	ecbd8b02 	vpop	{d8}
    a3b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a3b8:	ee17aa90 	vmov	sl, s15
    a3bc:	e3a07001 	mov	r7, #1
    a3c0:	eaffff85 	b	a1dc <CString::ftoa(char*, double, unsigned int)+0x78>
    a3c4:	ee17aa90 	vmov	sl, s15
    a3c8:	e3a06001 	mov	r6, #1
    a3cc:	eaffffc8 	b	a2f4 <CString::ftoa(char*, double, unsigned int)+0x190>
    a3d0:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    a3d4:	eaffffb5 	b	a2b0 <CString::ftoa(char*, double, unsigned int)+0x14c>
    a3d8:	ffe00000 	.word	0xffe00000
    a3dc:	41efffff 	.word	0x41efffff

0000a3e0 <CString::FormatV(char const*, std::__va_list)>:
    a3e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3e4:	e1a0b000 	mov	fp, r0
    a3e8:	e5900004 	ldr	r0, [r0, #4]
    a3ec:	e24dd034 	sub	sp, sp, #52	; 0x34
    a3f0:	e1a05001 	mov	r5, r1
    a3f4:	e3500000 	cmp	r0, #0
    a3f8:	e58d2000 	str	r2, [sp]
    a3fc:	0a000000 	beq	a404 <CString::FormatV(char const*, std::__va_list)+0x24>
    a400:	ebfffa2f 	bl	8cc4 <operator delete[](void*)>
    a404:	e3a00040 	mov	r0, #64	; 0x40
    a408:	e58b0008 	str	r0, [fp, #8]
    a40c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    a410:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    a414:	e58d3014 	str	r3, [sp, #20]
    a418:	ebfffa27 	bl	8cbc <operator new[](unsigned int)>
    a41c:	e58b0004 	str	r0, [fp, #4]
    a420:	e58b000c 	str	r0, [fp, #12]
    a424:	e1d540d0 	ldrsb	r4, [r5]
    a428:	e3540000 	cmp	r4, #0
    a42c:	0a0000a2 	beq	a6bc <CString::FormatV(char const*, std::__va_list)+0x2dc>
    a430:	e3540025 	cmp	r4, #37	; 0x25
    a434:	13a01001 	movne	r1, #1
    a438:	11a0000b 	movne	r0, fp
    a43c:	1a000156 	bne	a99c <CString::FormatV(char const*, std::__va_list)+0x5bc>
    a440:	e1d560d1 	ldrsb	r6, [r5, #1]
    a444:	e3560025 	cmp	r6, #37	; 0x25
    a448:	0a000169 	beq	a9f4 <CString::FormatV(char const*, std::__va_list)+0x614>
    a44c:	e356002d 	cmp	r6, #45	; 0x2d
    a450:	e3a04000 	mov	r4, #0
    a454:	12855001 	addne	r5, r5, #1
    a458:	01d560d2 	ldrsbeq	r6, [r5, #2]
    a45c:	03a03001 	moveq	r3, #1
    a460:	13a03000 	movne	r3, #0
    a464:	02855002 	addeq	r5, r5, #2
    a468:	e3560030 	cmp	r6, #48	; 0x30
    a46c:	e58d3004 	str	r3, [sp, #4]
    a470:	01d560d1 	ldrsbeq	r6, [r5, #1]
    a474:	03a03001 	moveq	r3, #1
    a478:	13a03000 	movne	r3, #0
    a47c:	058d300c 	streq	r3, [sp, #12]
    a480:	00855003 	addeq	r5, r5, r3
    a484:	158d300c 	strne	r3, [sp, #12]
    a488:	e2463030 	sub	r3, r6, #48	; 0x30
    a48c:	e6ef3073 	uxtb	r3, r3
    a490:	e3530009 	cmp	r3, #9
    a494:	8a000007 	bhi	a4b8 <CString::FormatV(char const*, std::__va_list)+0xd8>
    a498:	e3a0200a 	mov	r2, #10
    a49c:	e0246492 	mla	r4, r2, r4, r6
    a4a0:	e1f560d1 	ldrsb	r6, [r5, #1]!
    a4a4:	e2463030 	sub	r3, r6, #48	; 0x30
    a4a8:	e2444030 	sub	r4, r4, #48	; 0x30
    a4ac:	e6ef3073 	uxtb	r3, r3
    a4b0:	e3530009 	cmp	r3, #9
    a4b4:	9afffff8 	bls	a49c <CString::FormatV(char const*, std::__va_list)+0xbc>
    a4b8:	e356002e 	cmp	r6, #46	; 0x2e
    a4bc:	0a00013c 	beq	a9b4 <CString::FormatV(char const*, std::__va_list)+0x5d4>
    a4c0:	e1d570d0 	ldrsb	r7, [r5]
    a4c4:	e3a01006 	mov	r1, #6
    a4c8:	e357006c 	cmp	r7, #108	; 0x6c
    a4cc:	01d570d1 	ldrsbeq	r7, [r5, #1]
    a4d0:	03a02001 	moveq	r2, #1
    a4d4:	13a02000 	movne	r2, #0
    a4d8:	00855002 	addeq	r5, r5, r2
    a4dc:	e2473058 	sub	r3, r7, #88	; 0x58
    a4e0:	e3530020 	cmp	r3, #32
    a4e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a4e8:	ea000120 	b	a970 <CString::FormatV(char const*, std::__va_list)+0x590>
    a4ec:	0000a8ec 	.word	0x0000a8ec
    a4f0:	0000a970 	.word	0x0000a970
    a4f4:	0000a970 	.word	0x0000a970
    a4f8:	0000a970 	.word	0x0000a970
    a4fc:	0000a970 	.word	0x0000a970
    a500:	0000a970 	.word	0x0000a970
    a504:	0000a970 	.word	0x0000a970
    a508:	0000a970 	.word	0x0000a970
    a50c:	0000a970 	.word	0x0000a970
    a510:	0000a970 	.word	0x0000a970
    a514:	0000a970 	.word	0x0000a970
    a518:	0000a878 	.word	0x0000a878
    a51c:	0000a74c 	.word	0x0000a74c
    a520:	0000a970 	.word	0x0000a970
    a524:	0000a6cc 	.word	0x0000a6cc
    a528:	0000a970 	.word	0x0000a970
    a52c:	0000a970 	.word	0x0000a970
    a530:	0000a970 	.word	0x0000a970
    a534:	0000a970 	.word	0x0000a970
    a538:	0000a970 	.word	0x0000a970
    a53c:	0000a970 	.word	0x0000a970
    a540:	0000a970 	.word	0x0000a970
    a544:	0000a970 	.word	0x0000a970
    a548:	0000a570 	.word	0x0000a570
    a54c:	0000a970 	.word	0x0000a970
    a550:	0000a970 	.word	0x0000a970
    a554:	0000a970 	.word	0x0000a970
    a558:	0000a8fc 	.word	0x0000a8fc
    a55c:	0000a970 	.word	0x0000a970
    a560:	0000a8f4 	.word	0x0000a8f4
    a564:	0000a970 	.word	0x0000a970
    a568:	0000a970 	.word	0x0000a970
    a56c:	0000a8ec 	.word	0x0000a8ec
    a570:	e3a08008 	mov	r8, #8
    a574:	e59d3000 	ldr	r3, [sp]
    a578:	e2833004 	add	r3, r3, #4
    a57c:	e5136004 	ldr	r6, [r3, #-4]
    a580:	e58d3000 	str	r3, [sp]
    a584:	e1560008 	cmp	r6, r8
    a588:	23a0a001 	movcs	sl, #1
    a58c:	3a000198 	bcc	abf4 <CString::FormatV(char const*, std::__va_list)+0x814>
    a590:	e00a0a98 	mul	sl, r8, sl
    a594:	e1a00006 	mov	r0, r6
    a598:	e1a0100a 	mov	r1, sl
    a59c:	eb00061e 	bl	be1c <__aeabi_uidiv>
    a5a0:	e1580000 	cmp	r8, r0
    a5a4:	9afffff9 	bls	a590 <CString::FormatV(char const*, std::__va_list)+0x1b0>
    a5a8:	e1a09000 	mov	r9, r0
    a5ac:	e28d3018 	add	r3, sp, #24
    a5b0:	e3570058 	cmp	r7, #88	; 0x58
    a5b4:	e58d3008 	str	r3, [sp, #8]
    a5b8:	13a02057 	movne	r2, #87	; 0x57
    a5bc:	03a02037 	moveq	r2, #55	; 0x37
    a5c0:	e1a07003 	mov	r7, r3
    a5c4:	e1a03005 	mov	r3, r5
    a5c8:	e58d4010 	str	r4, [sp, #16]
    a5cc:	e1a0500a 	mov	r5, sl
    a5d0:	e1a04002 	mov	r4, r2
    a5d4:	e1a0a003 	mov	sl, r3
    a5d8:	ea000001 	b	a5e4 <CString::FormatV(char const*, std::__va_list)+0x204>
    a5dc:	eb00060e 	bl	be1c <__aeabi_uidiv>
    a5e0:	e1a09000 	mov	r9, r0
    a5e4:	e1a00006 	mov	r0, r6
    a5e8:	e1a01005 	mov	r1, r5
    a5ec:	eb00060e 	bl	be2c <__aeabi_uidivmod>
    a5f0:	e2877001 	add	r7, r7, #1
    a5f4:	e3590009 	cmp	r9, #9
    a5f8:	e0842009 	add	r2, r4, r9
    a5fc:	e2899030 	add	r9, r9, #48	; 0x30
    a600:	e1a00005 	mov	r0, r5
    a604:	e6af2072 	sxtb	r2, r2
    a608:	96af2079 	sxtbls	r2, r9
    a60c:	e5472001 	strb	r2, [r7, #-1]
    a610:	e1a06001 	mov	r6, r1
    a614:	e1a01008 	mov	r1, r8
    a618:	eb0005ff 	bl	be1c <__aeabi_uidiv>
    a61c:	e2505000 	subs	r5, r0, #0
    a620:	e1a00006 	mov	r0, r6
    a624:	e1a01005 	mov	r1, r5
    a628:	1affffeb 	bne	a5dc <CString::FormatV(char const*, std::__va_list)+0x1fc>
    a62c:	e1a0300a 	mov	r3, sl
    a630:	e59d0008 	ldr	r0, [sp, #8]
    a634:	e5c71000 	strb	r1, [r7]
    a638:	e1a0a005 	mov	sl, r5
    a63c:	e59d4010 	ldr	r4, [sp, #16]
    a640:	e1a05003 	mov	r5, r3
    a644:	eb000620 	bl	becc <strlen>
    a648:	e59d3004 	ldr	r3, [sp, #4]
    a64c:	e3530000 	cmp	r3, #0
    a650:	e1a06000 	mov	r6, r0
    a654:	1a0000ef 	bne	aa18 <CString::FormatV(char const*, std::__va_list)+0x638>
    a658:	e1500004 	cmp	r0, r4
    a65c:	2a00000f 	bcs	a6a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    a660:	e59d300c 	ldr	r3, [sp, #12]
    a664:	e0444000 	sub	r4, r4, r0
    a668:	e1a0000b 	mov	r0, fp
    a66c:	e3530000 	cmp	r3, #0
    a670:	e1a01004 	mov	r1, r4
    a674:	03a06020 	moveq	r6, #32
    a678:	13a06030 	movne	r6, #48	; 0x30
    a67c:	ebfffde6 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a680:	e2443001 	sub	r3, r4, #1
    a684:	e59b200c 	ldr	r2, [fp, #12]
    a688:	e2433001 	sub	r3, r3, #1
    a68c:	e3730001 	cmn	r3, #1
    a690:	e2821001 	add	r1, r2, #1
    a694:	e58b100c 	str	r1, [fp, #12]
    a698:	e5c26000 	strb	r6, [r2]
    a69c:	1afffff8 	bne	a684 <CString::FormatV(char const*, std::__va_list)+0x2a4>
    a6a0:	e59d1008 	ldr	r1, [sp, #8]
    a6a4:	e1a0000b 	mov	r0, fp
    a6a8:	ebfffe6b 	bl	a05c <CString::PutString(char const*)>
    a6ac:	e2855001 	add	r5, r5, #1
    a6b0:	e1d540d0 	ldrsb	r4, [r5]
    a6b4:	e3540000 	cmp	r4, #0
    a6b8:	1affff5c 	bne	a430 <CString::FormatV(char const*, std::__va_list)+0x50>
    a6bc:	e59b300c 	ldr	r3, [fp, #12]
    a6c0:	e5c34000 	strb	r4, [r3]
    a6c4:	e28dd034 	add	sp, sp, #52	; 0x34
    a6c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6cc:	e59d3000 	ldr	r3, [sp]
    a6d0:	e28d6018 	add	r6, sp, #24
    a6d4:	e58d6008 	str	r6, [sp, #8]
    a6d8:	e2833007 	add	r3, r3, #7
    a6dc:	e1a00006 	mov	r0, r6
    a6e0:	e3c33007 	bic	r3, r3, #7
    a6e4:	e2832008 	add	r2, r3, #8
    a6e8:	e58d2000 	str	r2, [sp]
    a6ec:	ed930b00 	vldr	d0, [r3]
    a6f0:	ebfffe9b 	bl	a164 <CString::ftoa(char*, double, unsigned int)>
    a6f4:	e1a00006 	mov	r0, r6
    a6f8:	eb0005f3 	bl	becc <strlen>
    a6fc:	e59d3004 	ldr	r3, [sp, #4]
    a700:	e3530000 	cmp	r3, #0
    a704:	e1a06000 	mov	r6, r0
    a708:	1a000107 	bne	ab2c <CString::FormatV(char const*, std::__va_list)+0x74c>
    a70c:	e1500004 	cmp	r0, r4
    a710:	2affffe2 	bcs	a6a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    a714:	e0444000 	sub	r4, r4, r0
    a718:	e1a0000b 	mov	r0, fp
    a71c:	e1a01004 	mov	r1, r4
    a720:	ebfffdbd 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a724:	e2443001 	sub	r3, r4, #1
    a728:	e3a00020 	mov	r0, #32
    a72c:	e59b200c 	ldr	r2, [fp, #12]
    a730:	e2433001 	sub	r3, r3, #1
    a734:	e3730001 	cmn	r3, #1
    a738:	e2821001 	add	r1, r2, #1
    a73c:	e58b100c 	str	r1, [fp, #12]
    a740:	e5c20000 	strb	r0, [r2]
    a744:	1afffff8 	bne	a72c <CString::FormatV(char const*, std::__va_list)+0x34c>
    a748:	eaffffd4 	b	a6a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    a74c:	e59d3000 	ldr	r3, [sp]
    a750:	e2833004 	add	r3, r3, #4
    a754:	e5137004 	ldr	r7, [r3, #-4]
    a758:	e58d3000 	str	r3, [sp]
    a75c:	e3570000 	cmp	r7, #0
    a760:	b2677000 	rsblt	r7, r7, #0
    a764:	b3a03001 	movlt	r3, #1
    a768:	a3a03000 	movge	r3, #0
    a76c:	b58d300c 	strlt	r3, [sp, #12]
    a770:	e1a06007 	mov	r6, r7
    a774:	a58d300c 	strge	r3, [sp, #12]
    a778:	e3570009 	cmp	r7, #9
    a77c:	e58d3010 	str	r3, [sp, #16]
    a780:	c3a0a001 	movgt	sl, #1
    a784:	c3a0900a 	movgt	r9, #10
    a788:	da000116 	ble	abe8 <CString::FormatV(char const*, std::__va_list)+0x808>
    a78c:	e00a0a99 	mul	sl, r9, sl
    a790:	e1a00007 	mov	r0, r7
    a794:	e1a0100a 	mov	r1, sl
    a798:	eb00059f 	bl	be1c <__aeabi_uidiv>
    a79c:	e3500009 	cmp	r0, #9
    a7a0:	8afffff9 	bhi	a78c <CString::FormatV(char const*, std::__va_list)+0x3ac>
    a7a4:	e1a08000 	mov	r8, r0
    a7a8:	e28d7018 	add	r7, sp, #24
    a7ac:	e59d9014 	ldr	r9, [sp, #20]
    a7b0:	e58d7008 	str	r7, [sp, #8]
    a7b4:	ea000001 	b	a7c0 <CString::FormatV(char const*, std::__va_list)+0x3e0>
    a7b8:	eb000597 	bl	be1c <__aeabi_uidiv>
    a7bc:	e1a08000 	mov	r8, r0
    a7c0:	e1a00006 	mov	r0, r6
    a7c4:	e1a0100a 	mov	r1, sl
    a7c8:	eb000597 	bl	be2c <__aeabi_uidivmod>
    a7cc:	e083299a 	umull	r2, r3, sl, r9
    a7d0:	e3580009 	cmp	r8, #9
    a7d4:	e2877001 	add	r7, r7, #1
    a7d8:	e1a06001 	mov	r6, r1
    a7dc:	e2881057 	add	r1, r8, #87	; 0x57
    a7e0:	e2888030 	add	r8, r8, #48	; 0x30
    a7e4:	e1a00006 	mov	r0, r6
    a7e8:	e6af1071 	sxtb	r1, r1
    a7ec:	96af1078 	sxtbls	r1, r8
    a7f0:	e1b0a1a3 	lsrs	sl, r3, #3
    a7f4:	e5471001 	strb	r1, [r7, #-1]
    a7f8:	e1a0100a 	mov	r1, sl
    a7fc:	1affffed 	bne	a7b8 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    a800:	e59d0008 	ldr	r0, [sp, #8]
    a804:	e5c7a000 	strb	sl, [r7]
    a808:	eb0005af 	bl	becc <strlen>
    a80c:	e59d3004 	ldr	r3, [sp, #4]
    a810:	e3530000 	cmp	r3, #0
    a814:	e59d300c 	ldr	r3, [sp, #12]
    a818:	e0808003 	add	r8, r0, r3
    a81c:	0a000090 	beq	aa64 <CString::FormatV(char const*, std::__va_list)+0x684>
    a820:	e59d3010 	ldr	r3, [sp, #16]
    a824:	e3530000 	cmp	r3, #0
    a828:	1a0000e5 	bne	abc4 <CString::FormatV(char const*, std::__va_list)+0x7e4>
    a82c:	e59d1008 	ldr	r1, [sp, #8]
    a830:	e1a0000b 	mov	r0, fp
    a834:	ebfffe08 	bl	a05c <CString::PutString(char const*)>
    a838:	e1580004 	cmp	r8, r4
    a83c:	2affff9a 	bcs	a6ac <CString::FormatV(char const*, std::__va_list)+0x2cc>
    a840:	e0448008 	sub	r8, r4, r8
    a844:	e1a0000b 	mov	r0, fp
    a848:	e1a01008 	mov	r1, r8
    a84c:	ebfffd72 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a850:	e2483001 	sub	r3, r8, #1
    a854:	e3a00020 	mov	r0, #32
    a858:	e59b200c 	ldr	r2, [fp, #12]
    a85c:	e2433001 	sub	r3, r3, #1
    a860:	e3730001 	cmn	r3, #1
    a864:	e2821001 	add	r1, r2, #1
    a868:	e58b100c 	str	r1, [fp, #12]
    a86c:	e5c20000 	strb	r0, [r2]
    a870:	1afffff8 	bne	a858 <CString::FormatV(char const*, std::__va_list)+0x478>
    a874:	eaffff8c 	b	a6ac <CString::FormatV(char const*, std::__va_list)+0x2cc>
    a878:	e59d3004 	ldr	r3, [sp, #4]
    a87c:	e3530000 	cmp	r3, #0
    a880:	e59d3000 	ldr	r3, [sp]
    a884:	e2836004 	add	r6, r3, #4
    a888:	e1d370d0 	ldrsb	r7, [r3]
    a88c:	1a00008f 	bne	aad0 <CString::FormatV(char const*, std::__va_list)+0x6f0>
    a890:	e3540001 	cmp	r4, #1
    a894:	9a00000b 	bls	a8c8 <CString::FormatV(char const*, std::__va_list)+0x4e8>
    a898:	e2441001 	sub	r1, r4, #1
    a89c:	e1a0000b 	mov	r0, fp
    a8a0:	e2444002 	sub	r4, r4, #2
    a8a4:	ebfffd5c 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a8a8:	e3a01020 	mov	r1, #32
    a8ac:	e59b300c 	ldr	r3, [fp, #12]
    a8b0:	e2444001 	sub	r4, r4, #1
    a8b4:	e3740001 	cmn	r4, #1
    a8b8:	e2832001 	add	r2, r3, #1
    a8bc:	e58b200c 	str	r2, [fp, #12]
    a8c0:	e5c31000 	strb	r1, [r3]
    a8c4:	1afffff8 	bne	a8ac <CString::FormatV(char const*, std::__va_list)+0x4cc>
    a8c8:	e3a01001 	mov	r1, #1
    a8cc:	e1a0000b 	mov	r0, fp
    a8d0:	ebfffd51 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a8d4:	e59b300c 	ldr	r3, [fp, #12]
    a8d8:	e58d6000 	str	r6, [sp]
    a8dc:	e2832001 	add	r2, r3, #1
    a8e0:	e58b200c 	str	r2, [fp, #12]
    a8e4:	e5c37000 	strb	r7, [r3]
    a8e8:	eaffff6f 	b	a6ac <CString::FormatV(char const*, std::__va_list)+0x2cc>
    a8ec:	e3a08010 	mov	r8, #16
    a8f0:	eaffff1f 	b	a574 <CString::FormatV(char const*, std::__va_list)+0x194>
    a8f4:	e3a0800a 	mov	r8, #10
    a8f8:	eaffff1d 	b	a574 <CString::FormatV(char const*, std::__va_list)+0x194>
    a8fc:	e59d3000 	ldr	r3, [sp]
    a900:	e2836004 	add	r6, r3, #4
    a904:	e5938000 	ldr	r8, [r3]
    a908:	e1a00008 	mov	r0, r8
    a90c:	eb00056e 	bl	becc <strlen>
    a910:	e59d3004 	ldr	r3, [sp, #4]
    a914:	e3530000 	cmp	r3, #0
    a918:	e1a07000 	mov	r7, r0
    a91c:	1a000095 	bne	ab78 <CString::FormatV(char const*, std::__va_list)+0x798>
    a920:	e1500004 	cmp	r0, r4
    a924:	2a00000c 	bcs	a95c <CString::FormatV(char const*, std::__va_list)+0x57c>
    a928:	e0444000 	sub	r4, r4, r0
    a92c:	e1a0000b 	mov	r0, fp
    a930:	e1a01004 	mov	r1, r4
    a934:	ebfffd38 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a938:	e2443001 	sub	r3, r4, #1
    a93c:	e3a00020 	mov	r0, #32
    a940:	e59b200c 	ldr	r2, [fp, #12]
    a944:	e2433001 	sub	r3, r3, #1
    a948:	e3730001 	cmn	r3, #1
    a94c:	e2821001 	add	r1, r2, #1
    a950:	e58b100c 	str	r1, [fp, #12]
    a954:	e5c20000 	strb	r0, [r2]
    a958:	1afffff8 	bne	a940 <CString::FormatV(char const*, std::__va_list)+0x560>
    a95c:	e1a01008 	mov	r1, r8
    a960:	e1a0000b 	mov	r0, fp
    a964:	e58d6000 	str	r6, [sp]
    a968:	ebfffdbb 	bl	a05c <CString::PutString(char const*)>
    a96c:	eaffff4e 	b	a6ac <CString::FormatV(char const*, std::__va_list)+0x2cc>
    a970:	e3a01001 	mov	r1, #1
    a974:	e1a0000b 	mov	r0, fp
    a978:	ebfffd27 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a97c:	e59b300c 	ldr	r3, [fp, #12]
    a980:	e3a02025 	mov	r2, #37	; 0x25
    a984:	e3a01001 	mov	r1, #1
    a988:	e0830001 	add	r0, r3, r1
    a98c:	e58b000c 	str	r0, [fp, #12]
    a990:	e5c32000 	strb	r2, [r3]
    a994:	e1a0000b 	mov	r0, fp
    a998:	e1d540d0 	ldrsb	r4, [r5]
    a99c:	ebfffd1e 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    a9a0:	e59b300c 	ldr	r3, [fp, #12]
    a9a4:	e2832001 	add	r2, r3, #1
    a9a8:	e58b200c 	str	r2, [fp, #12]
    a9ac:	e5c34000 	strb	r4, [r3]
    a9b0:	eaffff3d 	b	a6ac <CString::FormatV(char const*, std::__va_list)+0x2cc>
    a9b4:	e1d570d1 	ldrsb	r7, [r5, #1]
    a9b8:	e3a01000 	mov	r1, #0
    a9bc:	e2855001 	add	r5, r5, #1
    a9c0:	e2473030 	sub	r3, r7, #48	; 0x30
    a9c4:	e6ef3073 	uxtb	r3, r3
    a9c8:	e3530009 	cmp	r3, #9
    a9cc:	8afffebd 	bhi	a4c8 <CString::FormatV(char const*, std::__va_list)+0xe8>
    a9d0:	e3a0200a 	mov	r2, #10
    a9d4:	e0217192 	mla	r1, r2, r1, r7
    a9d8:	e1f570d1 	ldrsb	r7, [r5, #1]!
    a9dc:	e2473030 	sub	r3, r7, #48	; 0x30
    a9e0:	e2411030 	sub	r1, r1, #48	; 0x30
    a9e4:	e6ef3073 	uxtb	r3, r3
    a9e8:	e3530009 	cmp	r3, #9
    a9ec:	9afffff8 	bls	a9d4 <CString::FormatV(char const*, std::__va_list)+0x5f4>
    a9f0:	eafffeb4 	b	a4c8 <CString::FormatV(char const*, std::__va_list)+0xe8>
    a9f4:	e3a01001 	mov	r1, #1
    a9f8:	e1a0000b 	mov	r0, fp
    a9fc:	ebfffd06 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    aa00:	e59b300c 	ldr	r3, [fp, #12]
    aa04:	e2855002 	add	r5, r5, #2
    aa08:	e2832001 	add	r2, r3, #1
    aa0c:	e58b200c 	str	r2, [fp, #12]
    aa10:	e5c36000 	strb	r6, [r3]
    aa14:	eafffe82 	b	a424 <CString::FormatV(char const*, std::__va_list)+0x44>
    aa18:	e59d1008 	ldr	r1, [sp, #8]
    aa1c:	e1a0000b 	mov	r0, fp
    aa20:	ebfffd8d 	bl	a05c <CString::PutString(char const*)>
    aa24:	e1560004 	cmp	r6, r4
    aa28:	2affff1f 	bcs	a6ac <CString::FormatV(char const*, std::__va_list)+0x2cc>
    aa2c:	e0444006 	sub	r4, r4, r6
    aa30:	e1a0000b 	mov	r0, fp
    aa34:	e1a01004 	mov	r1, r4
    aa38:	ebfffcf7 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    aa3c:	e2443001 	sub	r3, r4, #1
    aa40:	e3a00020 	mov	r0, #32
    aa44:	e59b200c 	ldr	r2, [fp, #12]
    aa48:	e2433001 	sub	r3, r3, #1
    aa4c:	e3730001 	cmn	r3, #1
    aa50:	e2821001 	add	r1, r2, #1
    aa54:	e58b100c 	str	r1, [fp, #12]
    aa58:	e5c20000 	strb	r0, [r2]
    aa5c:	1afffff8 	bne	aa44 <CString::FormatV(char const*, std::__va_list)+0x664>
    aa60:	eaffff11 	b	a6ac <CString::FormatV(char const*, std::__va_list)+0x2cc>
    aa64:	e1580004 	cmp	r8, r4
    aa68:	2a00000c 	bcs	aaa0 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    aa6c:	e0448008 	sub	r8, r4, r8
    aa70:	e1a0000b 	mov	r0, fp
    aa74:	e1a01008 	mov	r1, r8
    aa78:	ebfffce7 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    aa7c:	e2483001 	sub	r3, r8, #1
    aa80:	e3a00020 	mov	r0, #32
    aa84:	e59b200c 	ldr	r2, [fp, #12]
    aa88:	e2433001 	sub	r3, r3, #1
    aa8c:	e3730001 	cmn	r3, #1
    aa90:	e2821001 	add	r1, r2, #1
    aa94:	e58b100c 	str	r1, [fp, #12]
    aa98:	e5c20000 	strb	r0, [r2]
    aa9c:	1afffff8 	bne	aa84 <CString::FormatV(char const*, std::__va_list)+0x6a4>
    aaa0:	e59d3010 	ldr	r3, [sp, #16]
    aaa4:	e3530000 	cmp	r3, #0
    aaa8:	0afffefc 	beq	a6a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    aaac:	e3a01001 	mov	r1, #1
    aab0:	e1a0000b 	mov	r0, fp
    aab4:	ebfffcd8 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    aab8:	e59b300c 	ldr	r3, [fp, #12]
    aabc:	e3a0202d 	mov	r2, #45	; 0x2d
    aac0:	e2831001 	add	r1, r3, #1
    aac4:	e58b100c 	str	r1, [fp, #12]
    aac8:	e5c32000 	strb	r2, [r3]
    aacc:	eafffef3 	b	a6a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    aad0:	e3a01001 	mov	r1, #1
    aad4:	e1a0000b 	mov	r0, fp
    aad8:	ebfffccf 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    aadc:	e59b300c 	ldr	r3, [fp, #12]
    aae0:	e3540001 	cmp	r4, #1
    aae4:	e2832001 	add	r2, r3, #1
    aae8:	e58b200c 	str	r2, [fp, #12]
    aaec:	e5c37000 	strb	r7, [r3]
    aaf0:	9a00000b 	bls	ab24 <CString::FormatV(char const*, std::__va_list)+0x744>
    aaf4:	e2441001 	sub	r1, r4, #1
    aaf8:	e1a0000b 	mov	r0, fp
    aafc:	e2444002 	sub	r4, r4, #2
    ab00:	ebfffcc5 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ab04:	e3a01020 	mov	r1, #32
    ab08:	e59b300c 	ldr	r3, [fp, #12]
    ab0c:	e2444001 	sub	r4, r4, #1
    ab10:	e3740001 	cmn	r4, #1
    ab14:	e2832001 	add	r2, r3, #1
    ab18:	e58b200c 	str	r2, [fp, #12]
    ab1c:	e5c31000 	strb	r1, [r3]
    ab20:	1afffff8 	bne	ab08 <CString::FormatV(char const*, std::__va_list)+0x728>
    ab24:	e58d6000 	str	r6, [sp]
    ab28:	eafffedf 	b	a6ac <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ab2c:	e59d1008 	ldr	r1, [sp, #8]
    ab30:	e1a0000b 	mov	r0, fp
    ab34:	ebfffd48 	bl	a05c <CString::PutString(char const*)>
    ab38:	e1560004 	cmp	r6, r4
    ab3c:	2afffeda 	bcs	a6ac <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ab40:	e0444006 	sub	r4, r4, r6
    ab44:	e1a0000b 	mov	r0, fp
    ab48:	e1a01004 	mov	r1, r4
    ab4c:	ebfffcb2 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ab50:	e2443001 	sub	r3, r4, #1
    ab54:	e3a00020 	mov	r0, #32
    ab58:	e59b200c 	ldr	r2, [fp, #12]
    ab5c:	e2433001 	sub	r3, r3, #1
    ab60:	e3730001 	cmn	r3, #1
    ab64:	e2821001 	add	r1, r2, #1
    ab68:	e58b100c 	str	r1, [fp, #12]
    ab6c:	e5c20000 	strb	r0, [r2]
    ab70:	1afffff8 	bne	ab58 <CString::FormatV(char const*, std::__va_list)+0x778>
    ab74:	eafffecc 	b	a6ac <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ab78:	e1a01008 	mov	r1, r8
    ab7c:	e1a0000b 	mov	r0, fp
    ab80:	ebfffd35 	bl	a05c <CString::PutString(char const*)>
    ab84:	e1570004 	cmp	r7, r4
    ab88:	2affffe5 	bcs	ab24 <CString::FormatV(char const*, std::__va_list)+0x744>
    ab8c:	e0444007 	sub	r4, r4, r7
    ab90:	e1a0000b 	mov	r0, fp
    ab94:	e1a01004 	mov	r1, r4
    ab98:	ebfffc9f 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ab9c:	e2443001 	sub	r3, r4, #1
    aba0:	e3a00020 	mov	r0, #32
    aba4:	e59b200c 	ldr	r2, [fp, #12]
    aba8:	e2433001 	sub	r3, r3, #1
    abac:	e3730001 	cmn	r3, #1
    abb0:	e2821001 	add	r1, r2, #1
    abb4:	e58b100c 	str	r1, [fp, #12]
    abb8:	e5c20000 	strb	r0, [r2]
    abbc:	1afffff8 	bne	aba4 <CString::FormatV(char const*, std::__va_list)+0x7c4>
    abc0:	eaffffd7 	b	ab24 <CString::FormatV(char const*, std::__va_list)+0x744>
    abc4:	e3a01001 	mov	r1, #1
    abc8:	e1a0000b 	mov	r0, fp
    abcc:	ebfffc92 	bl	9e1c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    abd0:	e59b300c 	ldr	r3, [fp, #12]
    abd4:	e3a0202d 	mov	r2, #45	; 0x2d
    abd8:	e2831001 	add	r1, r3, #1
    abdc:	e58b100c 	str	r1, [fp, #12]
    abe0:	e5c32000 	strb	r2, [r3]
    abe4:	eaffff10 	b	a82c <CString::FormatV(char const*, std::__va_list)+0x44c>
    abe8:	e1a08007 	mov	r8, r7
    abec:	e3a0a001 	mov	sl, #1
    abf0:	eafffeec 	b	a7a8 <CString::FormatV(char const*, std::__va_list)+0x3c8>
    abf4:	e1a09006 	mov	r9, r6
    abf8:	e3a0a001 	mov	sl, #1
    abfc:	eafffe6a 	b	a5ac <CString::FormatV(char const*, std::__va_list)+0x1cc>

0000ac00 <CString::Format(char const*, ...)>:
    ac00:	e92d000e 	push	{r1, r2, r3}
    ac04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ac08:	e24dd008 	sub	sp, sp, #8
    ac0c:	e28d2010 	add	r2, sp, #16
    ac10:	e59d100c 	ldr	r1, [sp, #12]
    ac14:	e58d2004 	str	r2, [sp, #4]
    ac18:	ebfffdf0 	bl	a3e0 <CString::FormatV(char const*, std::__va_list)>
    ac1c:	e28dd008 	add	sp, sp, #8
    ac20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ac24:	e28dd00c 	add	sp, sp, #12
    ac28:	e12fff1e 	bx	lr
    ac2c:	00000000 	andeq	r0, r0, r0

0000ac30 <DelayLoop>:
    ac30:	e2500001 	subs	r0, r0, #1
    ac34:	8afffffd 	bhi	ac30 <DelayLoop>
    ac38:	e1a0f00e 	mov	pc, lr

0000ac3c <CInterruptSystem::CInterruptSystem()>:
    ac3c:	e2802f47 	add	r2, r0, #284	; 0x11c
    ac40:	e1a0c000 	mov	ip, r0
    ac44:	e2403004 	sub	r3, r0, #4
    ac48:	e3a01000 	mov	r1, #0
    ac4c:	e1a00002 	mov	r0, r2
    ac50:	e5a31004 	str	r1, [r3, #4]!
    ac54:	e1530000 	cmp	r3, r0
    ac58:	e5a21004 	str	r1, [r2, #4]!
    ac5c:	1afffffb 	bne	ac50 <CInterruptSystem::CInterruptSystem()+0x14>
    ac60:	e30c3e60 	movw	r3, #52832	; 0xce60
    ac64:	e3403000 	movt	r3, #0
    ac68:	e1a0000c 	mov	r0, ip
    ac6c:	e583c000 	str	ip, [r3]
    ac70:	e12fff1e 	bx	lr

0000ac74 <CInterruptSystem::~CInterruptSystem()>:
    ac74:	e30c3e60 	movw	r3, #52832	; 0xce60
    ac78:	e3403000 	movt	r3, #0
    ac7c:	e3a02000 	mov	r2, #0
    ac80:	e5832000 	str	r2, [r3]
    ac84:	e12fff1e 	bx	lr

0000ac88 <CInterruptSystem::Initialize()>:
    ac88:	e59f2054 	ldr	r2, [pc, #84]	; ace4 <CInterruptSystem::Initialize()+0x5c>
    ac8c:	e59f3054 	ldr	r3, [pc, #84]	; ace8 <CInterruptSystem::Initialize()+0x60>
    ac90:	e92d4010 	push	{r4, lr}
    ac94:	e1a02142 	asr	r2, r2, #2
    ac98:	e1a03143 	asr	r3, r3, #2
    ac9c:	e3a04000 	mov	r4, #0
    aca0:	e2422002 	sub	r2, r2, #2
    aca4:	e2433002 	sub	r3, r3, #2
    aca8:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    acac:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    acb0:	e5842018 	str	r2, [r4, #24]
    acb4:	e584301c 	str	r3, [r4, #28]
    acb8:	ebfff81c 	bl	8d30 <SyncDataAndInstructionCache>
    acbc:	e3a03a0b 	mov	r3, #45056	; 0xb000
    acc0:	e3433f00 	movt	r3, #16128	; 0x3f00
    acc4:	e3e02000 	mvn	r2, #0
    acc8:	e583420c 	str	r4, [r3, #524]	; 0x20c
    accc:	e583221c 	str	r2, [r3, #540]	; 0x21c
    acd0:	e5832220 	str	r2, [r3, #544]	; 0x220
    acd4:	e5832224 	str	r2, [r3, #548]	; 0x224
    acd8:	f1080080 	cpsie	i
    acdc:	e3a00001 	mov	r0, #1
    ace0:	e8bd8010 	pop	{r4, pc}
    ace4:	0000c354 	.word	0x0000c354
    ace8:	0000c360 	.word	0x0000c360

0000acec <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    acec:	e351001f 	cmp	r1, #31
    acf0:	e080c101 	add	ip, r0, r1, lsl #2
    acf4:	e7802101 	str	r2, [r0, r1, lsl #2]
    acf8:	e58c3120 	str	r3, [ip, #288]	; 0x120
    acfc:	930b3210 	movwls	r3, #45584	; 0xb210
    ad00:	93433f00 	movtls	r3, #16128	; 0x3f00
    ad04:	9a000005 	bls	ad20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x34>
    ad08:	e30b2214 	movw	r2, #45588	; 0xb214
    ad0c:	e351003f 	cmp	r1, #63	; 0x3f
    ad10:	e3432f00 	movt	r2, #16128	; 0x3f00
    ad14:	e30b3218 	movw	r3, #45592	; 0xb218
    ad18:	e3433f00 	movt	r3, #16128	; 0x3f00
    ad1c:	91a03002 	movls	r3, r2
    ad20:	e201101f 	and	r1, r1, #31
    ad24:	e3a02001 	mov	r2, #1
    ad28:	e1a01112 	lsl	r1, r2, r1
    ad2c:	e5831000 	str	r1, [r3]
    ad30:	e12fff1e 	bx	lr

0000ad34 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    ad34:	e351001f 	cmp	r1, #31
    ad38:	e92d4010 	push	{r4, lr}
    ad3c:	930b321c 	movwls	r3, #45596	; 0xb21c
    ad40:	93433f00 	movtls	r3, #16128	; 0x3f00
    ad44:	9a000005 	bls	ad60 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x2c>
    ad48:	e30b2220 	movw	r2, #45600	; 0xb220
    ad4c:	e351003f 	cmp	r1, #63	; 0x3f
    ad50:	e3432f00 	movt	r2, #16128	; 0x3f00
    ad54:	e30b3224 	movw	r3, #45604	; 0xb224
    ad58:	e3433f00 	movt	r3, #16128	; 0x3f00
    ad5c:	91a03002 	movls	r3, r2
    ad60:	e080e101 	add	lr, r0, r1, lsl #2
    ad64:	e201401f 	and	r4, r1, #31
    ad68:	e3a02001 	mov	r2, #1
    ad6c:	e3a0c000 	mov	ip, #0
    ad70:	e1a02412 	lsl	r2, r2, r4
    ad74:	e5832000 	str	r2, [r3]
    ad78:	e780c101 	str	ip, [r0, r1, lsl #2]
    ad7c:	e58ec120 	str	ip, [lr, #288]	; 0x120
    ad80:	e8bd8010 	pop	{r4, pc}

0000ad84 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    ad84:	e30c0de0 	movw	r0, #52704	; 0xcde0
    ad88:	e3a0ca0b 	mov	ip, #45056	; 0xb000
    ad8c:	e3400000 	movt	r0, #0
    ad90:	e343cf00 	movt	ip, #16128	; 0x3f00
    ad94:	e3811080 	orr	r1, r1, #128	; 0x80
    ad98:	e880000c 	stm	r0, {r2, r3}
    ad9c:	e58c120c 	str	r1, [ip, #524]	; 0x20c
    ada0:	e12fff1e 	bx	lr

0000ada4 <CInterruptSystem::DisconnectFIQ()>:
    ada4:	e3a01a0b 	mov	r1, #45056	; 0xb000
    ada8:	e30c3de0 	movw	r3, #52704	; 0xcde0
    adac:	e3431f00 	movt	r1, #16128	; 0x3f00
    adb0:	e3403000 	movt	r3, #0
    adb4:	e3a02000 	mov	r2, #0
    adb8:	e581220c 	str	r2, [r1, #524]	; 0x20c
    adbc:	e5832000 	str	r2, [r3]
    adc0:	e5832004 	str	r2, [r3, #4]
    adc4:	e12fff1e 	bx	lr

0000adc8 <CInterruptSystem::EnableIRQ(unsigned int)>:
    adc8:	e350001f 	cmp	r0, #31
    adcc:	930b3210 	movwls	r3, #45584	; 0xb210
    add0:	93433f00 	movtls	r3, #16128	; 0x3f00
    add4:	9a000005 	bls	adf0 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>
    add8:	e30b2214 	movw	r2, #45588	; 0xb214
    addc:	e350003f 	cmp	r0, #63	; 0x3f
    ade0:	e3432f00 	movt	r2, #16128	; 0x3f00
    ade4:	e30b3218 	movw	r3, #45592	; 0xb218
    ade8:	e3433f00 	movt	r3, #16128	; 0x3f00
    adec:	91a03002 	movls	r3, r2
    adf0:	e200001f 	and	r0, r0, #31
    adf4:	e3a02001 	mov	r2, #1
    adf8:	e1a00012 	lsl	r0, r2, r0
    adfc:	e5830000 	str	r0, [r3]
    ae00:	e12fff1e 	bx	lr

0000ae04 <CInterruptSystem::DisableIRQ(unsigned int)>:
    ae04:	e350001f 	cmp	r0, #31
    ae08:	930b321c 	movwls	r3, #45596	; 0xb21c
    ae0c:	93433f00 	movtls	r3, #16128	; 0x3f00
    ae10:	9a000005 	bls	ae2c <CInterruptSystem::DisableIRQ(unsigned int)+0x28>
    ae14:	e30b2220 	movw	r2, #45600	; 0xb220
    ae18:	e350003f 	cmp	r0, #63	; 0x3f
    ae1c:	e3432f00 	movt	r2, #16128	; 0x3f00
    ae20:	e30b3224 	movw	r3, #45604	; 0xb224
    ae24:	e3433f00 	movt	r3, #16128	; 0x3f00
    ae28:	91a03002 	movls	r3, r2
    ae2c:	e200001f 	and	r0, r0, #31
    ae30:	e3a02001 	mov	r2, #1
    ae34:	e1a00012 	lsl	r0, r2, r0
    ae38:	e5830000 	str	r0, [r3]
    ae3c:	e12fff1e 	bx	lr

0000ae40 <CInterruptSystem::EnableFIQ(unsigned int)>:
    ae40:	e3a03a0b 	mov	r3, #45056	; 0xb000
    ae44:	e3433f00 	movt	r3, #16128	; 0x3f00
    ae48:	e3800080 	orr	r0, r0, #128	; 0x80
    ae4c:	e583020c 	str	r0, [r3, #524]	; 0x20c
    ae50:	e12fff1e 	bx	lr

0000ae54 <CInterruptSystem::DisableFIQ()>:
    ae54:	e3a03a0b 	mov	r3, #45056	; 0xb000
    ae58:	e3433f00 	movt	r3, #16128	; 0x3f00
    ae5c:	e3a02000 	mov	r2, #0
    ae60:	e583220c 	str	r2, [r3, #524]	; 0x20c
    ae64:	e12fff1e 	bx	lr

0000ae68 <CInterruptSystem::Get()>:
    ae68:	e30c3e60 	movw	r3, #52832	; 0xce60
    ae6c:	e3403000 	movt	r3, #0
    ae70:	e5930000 	ldr	r0, [r3]
    ae74:	e12fff1e 	bx	lr

0000ae78 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    ae78:	e7903101 	ldr	r3, [r0, r1, lsl #2]
    ae7c:	e0800101 	add	r0, r0, r1, lsl #2
    ae80:	e3530000 	cmp	r3, #0
    ae84:	0a000004 	beq	ae9c <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    ae88:	e92d4010 	push	{r4, lr}
    ae8c:	e5900120 	ldr	r0, [r0, #288]	; 0x120
    ae90:	e12fff33 	blx	r3
    ae94:	e3a00001 	mov	r0, #1
    ae98:	e8bd8010 	pop	{r4, pc}
    ae9c:	e351001f 	cmp	r1, #31
    aea0:	930b221c 	movwls	r2, #45596	; 0xb21c
    aea4:	93432f00 	movtls	r2, #16128	; 0x3f00
    aea8:	9a000005 	bls	aec4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
    aeac:	e30b3220 	movw	r3, #45600	; 0xb220
    aeb0:	e351003f 	cmp	r1, #63	; 0x3f
    aeb4:	e3433f00 	movt	r3, #16128	; 0x3f00
    aeb8:	e30b2224 	movw	r2, #45604	; 0xb224
    aebc:	e3432f00 	movt	r2, #16128	; 0x3f00
    aec0:	91a02003 	movls	r2, r3
    aec4:	e3a03001 	mov	r3, #1
    aec8:	e201101f 	and	r1, r1, #31
    aecc:	e1a01113 	lsl	r1, r3, r1
    aed0:	e3a00000 	mov	r0, #0
    aed4:	e5821000 	str	r1, [r2]
    aed8:	e12fff1e 	bx	lr

0000aedc <CInterruptSystem::InterruptHandler()>:
    aedc:	e3a02a0b 	mov	r2, #45056	; 0xb000
    aee0:	e3432f00 	movt	r2, #16128	; 0x3f00
    aee4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aee8:	e30c1e60 	movw	r1, #52832	; 0xce60
    aeec:	e5923204 	ldr	r3, [r2, #516]	; 0x204
    aef0:	e24dd010 	sub	sp, sp, #16
    aef4:	e3401000 	movt	r1, #0
    aef8:	e30be21c 	movw	lr, #45596	; 0xb21c
    aefc:	e30b6224 	movw	r6, #45604	; 0xb224
    af00:	e30b5220 	movw	r5, #45600	; 0xb220
    af04:	e58d3004 	str	r3, [sp, #4]
    af08:	e343ef00 	movt	lr, #16128	; 0x3f00
    af0c:	e5910000 	ldr	r0, [r1]
    af10:	e3436f00 	movt	r6, #16128	; 0x3f00
    af14:	e5921208 	ldr	r1, [r2, #520]	; 0x208
    af18:	e3435f00 	movt	r5, #16128	; 0x3f00
    af1c:	e28d4008 	add	r4, sp, #8
    af20:	e3a0c000 	mov	ip, #0
    af24:	e3a07001 	mov	r7, #1
    af28:	e58d1008 	str	r1, [sp, #8]
    af2c:	e5922200 	ldr	r2, [r2, #512]	; 0x200
    af30:	e6ef2072 	uxtb	r2, r2
    af34:	e58d200c 	str	r2, [sp, #12]
    af38:	e3530000 	cmp	r3, #0
    af3c:	0a000016 	beq	af9c <CInterruptSystem::InterruptHandler()+0xc0>
    af40:	e1a0200c 	mov	r2, ip
    af44:	e3130001 	tst	r3, #1
    af48:	0a000010 	beq	af90 <CInterruptSystem::InterruptHandler()+0xb4>
    af4c:	e7901102 	ldr	r1, [r0, r2, lsl #2]
    af50:	e3510000 	cmp	r1, #0
    af54:	0a000004 	beq	af6c <CInterruptSystem::InterruptHandler()+0x90>
    af58:	e2822048 	add	r2, r2, #72	; 0x48
    af5c:	e7900102 	ldr	r0, [r0, r2, lsl #2]
    af60:	e28dd010 	add	sp, sp, #16
    af64:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    af68:	e12fff11 	bx	r1
    af6c:	e352001f 	cmp	r2, #31
    af70:	e1a0800e 	mov	r8, lr
    af74:	9a000002 	bls	af84 <CInterruptSystem::InterruptHandler()+0xa8>
    af78:	e352003f 	cmp	r2, #63	; 0x3f
    af7c:	81a08006 	movhi	r8, r6
    af80:	91a08005 	movls	r8, r5
    af84:	e202101f 	and	r1, r2, #31
    af88:	e1a01117 	lsl	r1, r7, r1
    af8c:	e5881000 	str	r1, [r8]
    af90:	e1b030a3 	lsrs	r3, r3, #1
    af94:	e2822001 	add	r2, r2, #1
    af98:	1affffe9 	bne	af44 <CInterruptSystem::InterruptHandler()+0x68>
    af9c:	e28cc020 	add	ip, ip, #32
    afa0:	e35c0060 	cmp	ip, #96	; 0x60
    afa4:	14943004 	ldrne	r3, [r4], #4
    afa8:	1affffe2 	bne	af38 <CInterruptSystem::InterruptHandler()+0x5c>
    afac:	e28dd010 	add	sp, sp, #16
    afb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000afb4 <InterruptHandler>:
    afb4:	eaffffc8 	b	aedc <CInterruptSystem::InterruptHandler()>

0000afb8 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    afb8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    afbc:	e280c0dc 	add	ip, r0, #220	; 0xdc
    afc0:	e3a0e000 	mov	lr, #0
    afc4:	e1a03000 	mov	r3, r0
    afc8:	e1a0200e 	mov	r2, lr
    afcc:	e5801000 	str	r1, [r0]
    afd0:	e5a3e004 	str	lr, [r3, #4]!
    afd4:	e5a32004 	str	r2, [r3, #4]!
    afd8:	e153000c 	cmp	r3, ip
    afdc:	1afffffc 	bne	afd4 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    afe0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000afe4 <CGPIOManager::~CGPIOManager()>:
    afe4:	e5903004 	ldr	r3, [r0, #4]
    afe8:	e92d4010 	push	{r4, lr}
    afec:	e3530000 	cmp	r3, #0
    aff0:	e1a04000 	mov	r4, r0
    aff4:	0a000002 	beq	b004 <CGPIOManager::~CGPIOManager()+0x20>
    aff8:	e3a01034 	mov	r1, #52	; 0x34
    affc:	e5900000 	ldr	r0, [r0]
    b000:	ebffff4b 	bl	ad34 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    b004:	e1a00004 	mov	r0, r4
    b008:	e8bd8010 	pop	{r4, pc}

0000b00c <CGPIOManager::Initialize()>:
    b00c:	e92d4010 	push	{r4, lr}
    b010:	e1a03000 	mov	r3, r0
    b014:	e1a04000 	mov	r4, r0
    b018:	e3a01034 	mov	r1, #52	; 0x34
    b01c:	e5900000 	ldr	r0, [r0]
    b020:	e30b20dc 	movw	r2, #45276	; 0xb0dc
    b024:	e3402000 	movt	r2, #0
    b028:	ebffff2f 	bl	acec <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    b02c:	e3a03001 	mov	r3, #1
    b030:	e1a00003 	mov	r0, r3
    b034:	e5843004 	str	r3, [r4, #4]
    b038:	e8bd8010 	pop	{r4, pc}

0000b03c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    b03c:	e5913004 	ldr	r3, [r1, #4]
    b040:	e2833002 	add	r3, r3, #2
    b044:	e7801103 	str	r1, [r0, r3, lsl #2]
    b048:	e12fff1e 	bx	lr

0000b04c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    b04c:	e5913004 	ldr	r3, [r1, #4]
    b050:	e3a02000 	mov	r2, #0
    b054:	e2833002 	add	r3, r3, #2
    b058:	e7802103 	str	r2, [r0, r3, lsl #2]
    b05c:	e12fff1e 	bx	lr

0000b060 <CGPIOManager::InterruptHandler()>:
    b060:	e3a02000 	mov	r2, #0
    b064:	e3432f20 	movt	r2, #16160	; 0x3f20
    b068:	e92d4070 	push	{r4, r5, r6, lr}
    b06c:	e3a04000 	mov	r4, #0
    b070:	e5923040 	ldr	r3, [r2, #64]	; 0x40
    b074:	ea000004 	b	b08c <CGPIOManager::InterruptHandler()+0x2c>
    b078:	e2844001 	add	r4, r4, #1
    b07c:	e314001f 	tst	r4, #31
    b080:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    b084:	e3540036 	cmp	r4, #54	; 0x36
    b088:	08bd8070 	popeq	{r4, r5, r6, pc}
    b08c:	e3130001 	tst	r3, #1
    b090:	e1a030a3 	lsr	r3, r3, #1
    b094:	0afffff7 	beq	b078 <CGPIOManager::InterruptHandler()+0x18>
    b098:	e2843002 	add	r3, r4, #2
    b09c:	e204501f 	and	r5, r4, #31
    b0a0:	e3a02001 	mov	r2, #1
    b0a4:	e7900103 	ldr	r0, [r0, r3, lsl #2]
    b0a8:	e1a05512 	lsl	r5, r2, r5
    b0ac:	e3500000 	cmp	r0, #0
    b0b0:	0a000006 	beq	b0d0 <CGPIOManager::InterruptHandler()+0x70>
    b0b4:	ebfff664 	bl	8a4c <CGPIOPin::InterruptHandler()>
    b0b8:	e3a03010 	mov	r3, #16
    b0bc:	e3403fc8 	movt	r3, #4040	; 0xfc8
    b0c0:	e08332a4 	add	r3, r3, r4, lsr #5
    b0c4:	e1a03103 	lsl	r3, r3, #2
    b0c8:	e5835000 	str	r5, [r3]
    b0cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    b0d0:	e1a00004 	mov	r0, r4
    b0d4:	ebfff65f 	bl	8a58 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    b0d8:	eafffff6 	b	b0b8 <CGPIOManager::InterruptHandler()+0x58>

0000b0dc <CGPIOManager::InterruptStub(void*)>:
    b0dc:	eaffffdf 	b	b060 <CGPIOManager::InterruptHandler()>

0000b0e0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    b0e0:	e12fff1e 	bx	lr

0000b0e4 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    b0e4:	e92d4010 	push	{r4, lr}
    b0e8:	e3a01010 	mov	r1, #16
    b0ec:	e1a04000 	mov	r4, r0
    b0f0:	ebfff6f4 	bl	8cc8 <operator delete(void*, unsigned int)>
    b0f4:	e1a00004 	mov	r0, r4
    b0f8:	e8bd8010 	pop	{r4, pc}

0000b0fc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    b0fc:	e92d4070 	push	{r4, r5, r6, lr}
    b100:	e30c4e64 	movw	r4, #52836	; 0xce64
    b104:	e3404000 	movt	r4, #0
    b108:	e1a05000 	mov	r5, r0
    b10c:	e1a06001 	mov	r6, r1
    b110:	e5940000 	ldr	r0, [r4]
    b114:	e3500000 	cmp	r0, #0
    b118:	1a00001a 	bne	b188 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    b11c:	e1d500bc 	ldrh	r0, [r5, #12]
    b120:	e1d530be 	ldrh	r3, [r5, #14]
    b124:	e5856008 	str	r6, [r5, #8]
    b128:	e0402003 	sub	r2, r0, r3
    b12c:	e6bf2072 	sxth	r2, r2
    b130:	e3520000 	cmp	r2, #0
    b134:	da00000c 	ble	b16c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    b138:	e3560000 	cmp	r6, #0
    b13c:	1a00000c 	bne	b174 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    b140:	e2833001 	add	r3, r3, #1
    b144:	e6ff3073 	uxth	r3, r3
    b148:	e1c530be 	strh	r3, [r5, #14]
    b14c:	e5951004 	ldr	r1, [r5, #4]
    b150:	e1833800 	orr	r3, r3, r0, lsl #16
    b154:	e5942004 	ldr	r2, [r4, #4]
    b158:	e7823101 	str	r3, [r2, r1, lsl #2]
    b15c:	e5943000 	ldr	r3, [r4]
    b160:	e3530000 	cmp	r3, #0
    b164:	1a000005 	bne	b180 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    b168:	e8bd8070 	pop	{r4, r5, r6, pc}
    b16c:	e3560000 	cmp	r6, #0
    b170:	1a000006 	bne	b190 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    b174:	e5943000 	ldr	r3, [r4]
    b178:	e3530000 	cmp	r3, #0
    b17c:	08bd8070 	popeq	{r4, r5, r6, pc}
    b180:	e8bd4070 	pop	{r4, r5, r6, lr}
    b184:	eafff6df 	b	8d08 <LeaveCritical>
    b188:	ebfff6d0 	bl	8cd0 <EnterCritical>
    b18c:	eaffffe2 	b	b11c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    b190:	e2800001 	add	r0, r0, #1
    b194:	e6ff0070 	uxth	r0, r0
    b198:	e1c500bc 	strh	r0, [r5, #12]
    b19c:	eaffffea 	b	b14c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000b1a0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    b1a0:	e59f20e4 	ldr	r2, [pc, #228]	; b28c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    b1a4:	e3510001 	cmp	r1, #1
    b1a8:	e92d4030 	push	{r4, r5, lr}
    b1ac:	e3a03000 	mov	r3, #0
    b1b0:	e24dd024 	sub	sp, sp, #36	; 0x24
    b1b4:	e1a04000 	mov	r4, r0
    b1b8:	e5801004 	str	r1, [r0, #4]
    b1bc:	e5802000 	str	r2, [r0]
    b1c0:	e1c030bc 	strh	r3, [r0, #12]
    b1c4:	e1c030be 	strh	r3, [r0, #14]
    b1c8:	9a000002 	bls	b1d8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    b1cc:	e1a00004 	mov	r0, r4
    b1d0:	e28dd024 	add	sp, sp, #36	; 0x24
    b1d4:	e8bd8030 	pop	{r4, r5, pc}
    b1d8:	e30c5e64 	movw	r5, #52836	; 0xce64
    b1dc:	e3405000 	movt	r5, #0
    b1e0:	e5950000 	ldr	r0, [r5]
    b1e4:	e1500003 	cmp	r0, r3
    b1e8:	1a000009 	bne	b214 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    b1ec:	e5953004 	ldr	r3, [r5, #4]
    b1f0:	e3530000 	cmp	r3, #0
    b1f4:	0a00000a 	beq	b224 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    b1f8:	e5953004 	ldr	r3, [r5, #4]
    b1fc:	e3530000 	cmp	r3, #0
    b200:	0afffff1 	beq	b1cc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    b204:	e3a01000 	mov	r1, #0
    b208:	e1a00004 	mov	r0, r4
    b20c:	ebffffba 	bl	b0fc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    b210:	eaffffed 	b	b1cc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    b214:	ebfff6ad 	bl	8cd0 <EnterCritical>
    b218:	e5953004 	ldr	r3, [r5, #4]
    b21c:	e3530000 	cmp	r3, #0
    b220:	1a00000f 	bne	b264 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    b224:	e28d0008 	add	r0, sp, #8
    b228:	ebfff461 	bl	83b4 <CBcmPropertyTags::CBcmPropertyTags()>
    b22c:	e3a03000 	mov	r3, #0
    b230:	e28d0008 	add	r0, sp, #8
    b234:	e58d3000 	str	r3, [sp]
    b238:	e3a01010 	mov	r1, #16
    b23c:	e3a03010 	mov	r3, #16
    b240:	e3401004 	movt	r1, #4
    b244:	e08d2003 	add	r2, sp, r3
    b248:	ebfff485 	bl	8464 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b24c:	e3500000 	cmp	r0, #0
    b250:	e28d0008 	add	r0, sp, #8
    b254:	159d301c 	ldrne	r3, [sp, #28]
    b258:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    b25c:	15853004 	strne	r3, [r5, #4]
    b260:	ebfff459 	bl	83cc <CBcmPropertyTags::~CBcmPropertyTags()>
    b264:	e5953000 	ldr	r3, [r5]
    b268:	e3530000 	cmp	r3, #0
    b26c:	0a000000 	beq	b274 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
    b270:	ebfff6a4 	bl	8d08 <LeaveCritical>
    b274:	e5943004 	ldr	r3, [r4, #4]
    b278:	e3530001 	cmp	r3, #1
    b27c:	9affffdd 	bls	b1f8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
    b280:	e1a00004 	mov	r0, r4
    b284:	e28dd024 	add	sp, sp, #36	; 0x24
    b288:	e8bd8030 	pop	{r4, r5, pc}
    b28c:	0000c94c 	.word	0x0000c94c

0000b290 <CVirtualGPIOPin::Write(unsigned int)>:
    b290:	e5902004 	ldr	r2, [r0, #4]
    b294:	e1a03001 	mov	r3, r1
    b298:	e3520001 	cmp	r2, #1
    b29c:	812fff1e 	bxhi	lr
    b2a0:	e30c2e64 	movw	r2, #52836	; 0xce64
    b2a4:	e3402000 	movt	r2, #0
    b2a8:	e3510001 	cmp	r1, #1
    b2ac:	e5922004 	ldr	r2, [r2, #4]
    b2b0:	93a03000 	movls	r3, #0
    b2b4:	83a03001 	movhi	r3, #1
    b2b8:	e3520000 	cmp	r2, #0
    b2bc:	03833001 	orreq	r3, r3, #1
    b2c0:	e3530000 	cmp	r3, #0
    b2c4:	112fff1e 	bxne	lr
    b2c8:	eaffff8b 	b	b0fc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0000b2cc <CVirtualGPIOPin::Invert()>:
    b2cc:	e5901008 	ldr	r1, [r0, #8]
    b2d0:	e2211001 	eor	r1, r1, #1
    b2d4:	eaffffed 	b	b290 <CVirtualGPIOPin::Write(unsigned int)>

0000b2d8 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    b2d8:	e30c3e64 	movw	r3, #52836	; 0xce64
    b2dc:	e3403000 	movt	r3, #0
    b2e0:	e3a02000 	mov	r2, #0
    b2e4:	e5832000 	str	r2, [r3]
    b2e8:	e12fff1e 	bx	lr

0000b2ec <CMachineInfo::CMachineInfo()>:
    b2ec:	e30c2e6c 	movw	r2, #52844	; 0xce6c
    b2f0:	e3402000 	movt	r2, #0
    b2f4:	e92d4030 	push	{r4, r5, lr}
    b2f8:	e3a0300c 	mov	r3, #12
    b2fc:	e5925000 	ldr	r5, [r2]
    b300:	e3a01003 	mov	r1, #3
    b304:	e5c03004 	strb	r3, [r0, #4]
    b308:	e3a03000 	mov	r3, #0
    b30c:	e1550003 	cmp	r5, r3
    b310:	e24dd024 	sub	sp, sp, #36	; 0x24
    b314:	e1a04000 	mov	r4, r0
    b318:	e5c01010 	strb	r1, [r0, #16]
    b31c:	e5803000 	str	r3, [r0]
    b320:	e5803008 	str	r3, [r0, #8]
    b324:	e580300c 	str	r3, [r0, #12]
    b328:	e5803014 	str	r3, [r0, #20]
    b32c:	0a00000e 	beq	b36c <CMachineInfo::CMachineInfo()+0x80>
    b330:	e595e000 	ldr	lr, [r5]
    b334:	e5d5c004 	ldrb	ip, [r5, #4]
    b338:	e5950008 	ldr	r0, [r5, #8]
    b33c:	e595100c 	ldr	r1, [r5, #12]
    b340:	e5d52010 	ldrb	r2, [r5, #16]
    b344:	e5953014 	ldr	r3, [r5, #20]
    b348:	e584e000 	str	lr, [r4]
    b34c:	e5c4c004 	strb	ip, [r4, #4]
    b350:	e5840008 	str	r0, [r4, #8]
    b354:	e584100c 	str	r1, [r4, #12]
    b358:	e5c42010 	strb	r2, [r4, #16]
    b35c:	e5843014 	str	r3, [r4, #20]
    b360:	e1a00004 	mov	r0, r4
    b364:	e28dd024 	add	sp, sp, #36	; 0x24
    b368:	e8bd8030 	pop	{r4, r5, pc}
    b36c:	e5820000 	str	r0, [r2]
    b370:	e28d0008 	add	r0, sp, #8
    b374:	ebfff40e 	bl	83b4 <CBcmPropertyTags::CBcmPropertyTags()>
    b378:	e3a03010 	mov	r3, #16
    b37c:	e58d5000 	str	r5, [sp]
    b380:	e28d0008 	add	r0, sp, #8
    b384:	e3a01002 	mov	r1, #2
    b388:	e08d2003 	add	r2, sp, r3
    b38c:	e3401001 	movt	r1, #1
    b390:	ebfff433 	bl	8464 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b394:	e3500000 	cmp	r0, #0
    b398:	0a00000c 	beq	b3d0 <CMachineInfo::CMachineInfo()+0xe4>
    b39c:	e59d201c 	ldr	r2, [sp, #28]
    b3a0:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    b3a4:	e5842000 	str	r2, [r4]
    b3a8:	1a00000b 	bne	b3dc <CMachineInfo::CMachineInfo()+0xf0>
    b3ac:	e3a01002 	mov	r1, #2
    b3b0:	e59f00f8 	ldr	r0, [pc, #248]	; b4b0 <CMachineInfo::CMachineInfo()+0x1c4>
    b3b4:	ea000000 	b	b3bc <CMachineInfo::CMachineInfo()+0xd0>
    b3b8:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    b3bc:	e1520001 	cmp	r2, r1
    b3c0:	0a000012 	beq	b410 <CMachineInfo::CMachineInfo()+0x124>
    b3c4:	e2833001 	add	r3, r3, #1
    b3c8:	e3530011 	cmp	r3, #17
    b3cc:	1afffff9 	bne	b3b8 <CMachineInfo::CMachineInfo()+0xcc>
    b3d0:	e28d0008 	add	r0, sp, #8
    b3d4:	ebfff3fc 	bl	83cc <CBcmPropertyTags::~CBcmPropertyTags()>
    b3d8:	eaffffe0 	b	b360 <CMachineInfo::CMachineInfo()+0x74>
    b3dc:	e30cc954 	movw	ip, #51540	; 0xc954
    b3e0:	e340c000 	movt	ip, #0
    b3e4:	e7e70252 	ubfx	r0, r2, #4, #8
    b3e8:	e1a03005 	mov	r3, r5
    b3ec:	e1a0100c 	mov	r1, ip
    b3f0:	ea000000 	b	b3f8 <CMachineInfo::CMachineInfo()+0x10c>
    b3f4:	e5b1500c 	ldr	r5, [r1, #12]!
    b3f8:	e1550000 	cmp	r5, r0
    b3fc:	0a000011 	beq	b448 <CMachineInfo::CMachineInfo()+0x15c>
    b400:	e2833001 	add	r3, r3, #1
    b404:	e353000a 	cmp	r3, #10
    b408:	1afffff9 	bne	b3f4 <CMachineInfo::CMachineInfo()+0x108>
    b40c:	eaffffef 	b	b3d0 <CMachineInfo::CMachineInfo()+0xe4>
    b410:	e30c2954 	movw	r2, #51540	; 0xc954
    b414:	e3402000 	movt	r2, #0
    b418:	e0823203 	add	r3, r2, r3, lsl #4
    b41c:	e3a01001 	mov	r1, #1
    b420:	e5841008 	str	r1, [r4, #8]
    b424:	e3a02000 	mov	r2, #0
    b428:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
    b42c:	e5931080 	ldr	r1, [r3, #128]	; 0x80
    b430:	e5933084 	ldr	r3, [r3, #132]	; 0x84
    b434:	e5c40004 	strb	r0, [r4, #4]
    b438:	e584100c 	str	r1, [r4, #12]
    b43c:	e5843014 	str	r3, [r4, #20]
    b440:	e5c42010 	strb	r2, [r4, #16]
    b444:	eaffffe1 	b	b3d0 <CMachineInfo::CMachineInfo()+0xe4>
    b448:	e3a0100c 	mov	r1, #12
    b44c:	e7e3e652 	ubfx	lr, r2, #12, #4
    b450:	e023c391 	mla	r3, r1, r3, ip
    b454:	e35e0002 	cmp	lr, #2
    b458:	e202100f 	and	r1, r2, #15
    b45c:	e7e22a52 	ubfx	r2, r2, #20, #3
    b460:	e5c4e010 	strb	lr, [r4, #16]
    b464:	e3a00c01 	mov	r0, #256	; 0x100
    b468:	e2811001 	add	r1, r1, #1
    b46c:	e1a00210 	lsl	r0, r0, r2
    b470:	e584100c 	str	r1, [r4, #12]
    b474:	e5d3c004 	ldrb	ip, [r3, #4]
    b478:	e5933008 	ldr	r3, [r3, #8]
    b47c:	e5840014 	str	r0, [r4, #20]
    b480:	e5c4c004 	strb	ip, [r4, #4]
    b484:	e5843008 	str	r3, [r4, #8]
    b488:	83a03003 	movhi	r3, #3
    b48c:	85c43010 	strbhi	r3, [r4, #16]
    b490:	e3520000 	cmp	r2, #0
    b494:	035c0003 	cmpeq	ip, #3
    b498:	1affffcc 	bne	b3d0 <CMachineInfo::CMachineInfo()+0xe4>
    b49c:	e3510001 	cmp	r1, #1
    b4a0:	13a03002 	movne	r3, #2
    b4a4:	03a03001 	moveq	r3, #1
    b4a8:	e5c43004 	strb	r3, [r4, #4]
    b4ac:	eaffffc7 	b	b3d0 <CMachineInfo::CMachineInfo()+0xe4>
    b4b0:	0000c9cc 	.word	0x0000c9cc

0000b4b4 <CMachineInfo::~CMachineInfo()>:
    b4b4:	e30c3e6c 	movw	r3, #52844	; 0xce6c
    b4b8:	e3403000 	movt	r3, #0
    b4bc:	e3a0100c 	mov	r1, #12
    b4c0:	e5c01004 	strb	r1, [r0, #4]
    b4c4:	e5932000 	ldr	r2, [r3]
    b4c8:	e1500002 	cmp	r0, r2
    b4cc:	03a02000 	moveq	r2, #0
    b4d0:	05832000 	streq	r2, [r3]
    b4d4:	e12fff1e 	bx	lr

0000b4d8 <CMachineInfo::GetMachineModel() const>:
    b4d8:	e5d00004 	ldrb	r0, [r0, #4]
    b4dc:	e12fff1e 	bx	lr

0000b4e0 <CMachineInfo::GetMachineName() const>:
    b4e0:	e5d02004 	ldrb	r2, [r0, #4]
    b4e4:	e30c3954 	movw	r3, #51540	; 0xc954
    b4e8:	e3403000 	movt	r3, #0
    b4ec:	e0833102 	add	r3, r3, r2, lsl #2
    b4f0:	e5930188 	ldr	r0, [r3, #392]	; 0x188
    b4f4:	e12fff1e 	bx	lr

0000b4f8 <CMachineInfo::GetModelMajor() const>:
    b4f8:	e5900008 	ldr	r0, [r0, #8]
    b4fc:	e12fff1e 	bx	lr

0000b500 <CMachineInfo::GetModelRevision() const>:
    b500:	e590000c 	ldr	r0, [r0, #12]
    b504:	e12fff1e 	bx	lr

0000b508 <CMachineInfo::GetSoCType() const>:
    b508:	e5d00010 	ldrb	r0, [r0, #16]
    b50c:	e12fff1e 	bx	lr

0000b510 <CMachineInfo::GetRAMSize() const>:
    b510:	e5900014 	ldr	r0, [r0, #20]
    b514:	e12fff1e 	bx	lr

0000b518 <CMachineInfo::GetSoCName() const>:
    b518:	e5d02010 	ldrb	r2, [r0, #16]
    b51c:	e30c3954 	movw	r3, #51540	; 0xc954
    b520:	e3403000 	movt	r3, #0
    b524:	e0833102 	add	r3, r3, r2, lsl #2
    b528:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
    b52c:	e12fff1e 	bx	lr

0000b530 <CMachineInfo::GetRevisionRaw() const>:
    b530:	e5900000 	ldr	r0, [r0]
    b534:	e12fff1e 	bx	lr

0000b538 <CMachineInfo::GetClockRate(unsigned int) const>:
    b538:	e92d4030 	push	{r4, r5, lr}
    b53c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b540:	e1a05000 	mov	r5, r0
    b544:	e28d000c 	add	r0, sp, #12
    b548:	e1a04001 	mov	r4, r1
    b54c:	ebfff398 	bl	83b4 <CBcmPropertyTags::CBcmPropertyTags()>
    b550:	e3a03004 	mov	r3, #4
    b554:	e28d000c 	add	r0, sp, #12
    b558:	e58d3000 	str	r3, [sp]
    b55c:	e3a01002 	mov	r1, #2
    b560:	e3a03014 	mov	r3, #20
    b564:	e3401003 	movt	r1, #3
    b568:	e08d2003 	add	r2, sp, r3
    b56c:	e58d4020 	str	r4, [sp, #32]
    b570:	ebfff3bb 	bl	8464 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b574:	e3500000 	cmp	r0, #0
    b578:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    b57c:	1a000007 	bne	b5a0 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    b580:	e3540002 	cmp	r4, #2
    b584:	0a00000a 	beq	b5b4 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    b588:	e3540004 	cmp	r4, #4
    b58c:	0a00000b 	beq	b5c0 <CMachineInfo::GetClockRate(unsigned int) const+0x88>
    b590:	e3540001 	cmp	r4, #1
    b594:	e3a04ce1 	mov	r4, #57600	; 0xe100
    b598:	e34045f5 	movt	r4, #1525	; 0x5f5
    b59c:	13a04000 	movne	r4, #0
    b5a0:	e28d000c 	add	r0, sp, #12
    b5a4:	ebfff388 	bl	83cc <CBcmPropertyTags::~CBcmPropertyTags()>
    b5a8:	e1a00004 	mov	r0, r4
    b5ac:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b5b0:	e8bd8030 	pop	{r4, r5, pc}
    b5b4:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    b5b8:	e34042dc 	movt	r4, #732	; 0x2dc
    b5bc:	eafffff7 	b	b5a0 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    b5c0:	e5952008 	ldr	r2, [r5, #8]
    b5c4:	e3a03ca3 	mov	r3, #41728	; 0xa300
    b5c8:	e34131e1 	movt	r3, #4577	; 0x11e1
    b5cc:	e30b4280 	movw	r4, #45696	; 0xb280
    b5d0:	e3520002 	cmp	r2, #2
    b5d4:	e3404ee6 	movt	r4, #3814	; 0xee6
    b5d8:	81a04003 	movhi	r4, r3
    b5dc:	eaffffef 	b	b5a0 <CMachineInfo::GetClockRate(unsigned int) const+0x68>

0000b5e0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    b5e0:	e3510036 	cmp	r1, #54	; 0x36
    b5e4:	0a000008 	beq	b60c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x2c>
    b5e8:	e3510037 	cmp	r1, #55	; 0x37
    b5ec:	1a000004 	bne	b604 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    b5f0:	e5d03004 	ldrb	r3, [r0, #4]
    b5f4:	e3530003 	cmp	r3, #3
    b5f8:	c3a00028 	movgt	r0, #40	; 0x28
    b5fc:	d3a0002d 	movle	r0, #45	; 0x2d
    b600:	e12fff1e 	bx	lr
    b604:	e3a00000 	mov	r0, #0
    b608:	e12fff1e 	bx	lr
    b60c:	e5d03004 	ldrb	r3, [r0, #4]
    b610:	e3530003 	cmp	r3, #3
    b614:	ca000001 	bgt	b620 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    b618:	e3a00028 	mov	r0, #40	; 0x28
    b61c:	e12fff1e 	bx	lr
    b620:	e5903008 	ldr	r3, [r0, #8]
    b624:	e3530003 	cmp	r3, #3
    b628:	33a0002d 	movcc	r0, #45	; 0x2d
    b62c:	23a00029 	movcs	r0, #41	; 0x29
    b630:	e12fff1e 	bx	lr

0000b634 <CMachineInfo::GetDevice(TDeviceId) const>:
    b634:	e3510000 	cmp	r1, #0
    b638:	1a000003 	bne	b64c <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    b63c:	e5d00004 	ldrb	r0, [r0, #4]
    b640:	e2500001 	subs	r0, r0, #1
    b644:	13a00001 	movne	r0, #1
    b648:	e12fff1e 	bx	lr
    b64c:	e3a00000 	mov	r0, #0
    b650:	e12fff1e 	bx	lr

0000b654 <CMachineInfo::Get()>:
    b654:	e30c3e6c 	movw	r3, #52844	; 0xce6c
    b658:	e3403000 	movt	r3, #0
    b65c:	e5930000 	ldr	r0, [r3]
    b660:	e12fff1e 	bx	lr

0000b664 <InvalidateDataCacheL1Only>:
    b664:	e92d0070 	push	{r4, r5, r6}
    b668:	e3a00000 	mov	r0, #0
    b66c:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    b670:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    b674:	e3071fff 	movw	r1, #32767	; 0x7fff
    b678:	e00126a0 	and	r2, r1, r0, lsr #13
    b67c:	e30013ff 	movw	r1, #1023	; 0x3ff
    b680:	e00131a0 	and	r3, r1, r0, lsr #3
    b684:	e2822001 	add	r2, r2, #1
    b688:	e2000007 	and	r0, r0, #7
    b68c:	e2800004 	add	r0, r0, #4
    b690:	e16f1f13 	clz	r1, r3
    b694:	e2834001 	add	r4, r3, #1
    b698:	e2422001 	sub	r2, r2, #1
    b69c:	e1a03004 	mov	r3, r4
    b6a0:	e2533001 	subs	r3, r3, #1
    b6a4:	e1a05113 	lsl	r5, r3, r1
    b6a8:	e1a06012 	lsl	r6, r2, r0
    b6ac:	e1855006 	orr	r5, r5, r6
    b6b0:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    b6b4:	cafffff9 	bgt	b6a0 <InvalidateDataCacheL1Only+0x3c>
    b6b8:	e3520000 	cmp	r2, #0
    b6bc:	cafffff5 	bgt	b698 <InvalidateDataCacheL1Only+0x34>
    b6c0:	f57ff04e 	dsb	st
    b6c4:	f57ff06f 	isb	sy
    b6c8:	e8bd0070 	pop	{r4, r5, r6}
    b6cc:	e12fff1e 	bx	lr

0000b6d0 <InvalidateDataCache>:
    b6d0:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    b6d4:	f57ff05f 	dmb	sy
    b6d8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    b6dc:	e1a03ba0 	lsr	r3, r0, #23
    b6e0:	e213300e 	ands	r3, r3, #14
    b6e4:	0a00001d 	beq	b760 <InvalidateDataCache+0x90>
    b6e8:	e3a0a000 	mov	sl, #0
    b6ec:	e08a20aa 	add	r2, sl, sl, lsr #1
    b6f0:	e1a01230 	lsr	r1, r0, r2
    b6f4:	e2011007 	and	r1, r1, #7
    b6f8:	e3510002 	cmp	r1, #2
    b6fc:	ba000014 	blt	b754 <InvalidateDataCache+0x84>
    b700:	e10f9000 	mrs	r9, CPSR
    b704:	f10c0080 	cpsid	i
    b708:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    b70c:	f57ff06f 	isb	sy
    b710:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    b714:	e121f009 	msr	CPSR_c, r9
    b718:	e2012007 	and	r2, r1, #7
    b71c:	e2822004 	add	r2, r2, #4
    b720:	e30043ff 	movw	r4, #1023	; 0x3ff
    b724:	e01441a1 	ands	r4, r4, r1, lsr #3
    b728:	e16f5f14 	clz	r5, r4
    b72c:	e3077fff 	movw	r7, #32767	; 0x7fff
    b730:	e01776a1 	ands	r7, r7, r1, lsr #13
    b734:	e1a09007 	mov	r9, r7
    b738:	e18ab514 	orr	fp, sl, r4, lsl r5
    b73c:	e18bb219 	orr	fp, fp, r9, lsl r2
    b740:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    b744:	e2599001 	subs	r9, r9, #1
    b748:	aafffffa 	bge	b738 <InvalidateDataCache+0x68>
    b74c:	e2544001 	subs	r4, r4, #1
    b750:	aafffff7 	bge	b734 <InvalidateDataCache+0x64>
    b754:	e28aa002 	add	sl, sl, #2
    b758:	e153000a 	cmp	r3, sl
    b75c:	caffffe2 	bgt	b6ec <InvalidateDataCache+0x1c>
    b760:	e3a0a000 	mov	sl, #0
    b764:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    b768:	f57ff04e 	dsb	st
    b76c:	f57ff06f 	isb	sy
    b770:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    b774:	e12fff1e 	bx	lr

0000b778 <CleanDataCache>:
    b778:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    b77c:	f57ff05f 	dmb	sy
    b780:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    b784:	e1a03ba0 	lsr	r3, r0, #23
    b788:	e213300e 	ands	r3, r3, #14
    b78c:	0a00001d 	beq	b808 <CleanDataCache+0x90>
    b790:	e3a0a000 	mov	sl, #0
    b794:	e08a20aa 	add	r2, sl, sl, lsr #1
    b798:	e1a01230 	lsr	r1, r0, r2
    b79c:	e2011007 	and	r1, r1, #7
    b7a0:	e3510002 	cmp	r1, #2
    b7a4:	ba000014 	blt	b7fc <CleanDataCache+0x84>
    b7a8:	e10f9000 	mrs	r9, CPSR
    b7ac:	f10c0080 	cpsid	i
    b7b0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    b7b4:	f57ff06f 	isb	sy
    b7b8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    b7bc:	e121f009 	msr	CPSR_c, r9
    b7c0:	e2012007 	and	r2, r1, #7
    b7c4:	e2822004 	add	r2, r2, #4
    b7c8:	e30043ff 	movw	r4, #1023	; 0x3ff
    b7cc:	e01441a1 	ands	r4, r4, r1, lsr #3
    b7d0:	e16f5f14 	clz	r5, r4
    b7d4:	e3077fff 	movw	r7, #32767	; 0x7fff
    b7d8:	e01776a1 	ands	r7, r7, r1, lsr #13
    b7dc:	e1a09007 	mov	r9, r7
    b7e0:	e18ab514 	orr	fp, sl, r4, lsl r5
    b7e4:	e18bb219 	orr	fp, fp, r9, lsl r2
    b7e8:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    b7ec:	e2599001 	subs	r9, r9, #1
    b7f0:	aafffffa 	bge	b7e0 <CleanDataCache+0x68>
    b7f4:	e2544001 	subs	r4, r4, #1
    b7f8:	aafffff7 	bge	b7dc <CleanDataCache+0x64>
    b7fc:	e28aa002 	add	sl, sl, #2
    b800:	e153000a 	cmp	r3, sl
    b804:	caffffe2 	bgt	b794 <CleanDataCache+0x1c>
    b808:	e3a0a000 	mov	sl, #0
    b80c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    b810:	f57ff04e 	dsb	st
    b814:	f57ff06f 	isb	sy
    b818:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    b81c:	e12fff1e 	bx	lr

0000b820 <CleanAndInvalidateDataCacheRange>:
    b820:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    b824:	e1a03823 	lsr	r3, r3, #16
    b828:	e203300f 	and	r3, r3, #15
    b82c:	e3a02004 	mov	r2, #4
    b830:	e1a02312 	lsl	r2, r2, r3
    b834:	e0801001 	add	r1, r0, r1
    b838:	e2423001 	sub	r3, r2, #1
    b83c:	e1c00003 	bic	r0, r0, r3
    b840:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    b844:	e0800002 	add	r0, r0, r2
    b848:	e1500001 	cmp	r0, r1
    b84c:	3afffffb 	bcc	b840 <CleanAndInvalidateDataCacheRange+0x20>
    b850:	f57ff04e 	dsb	st
    b854:	e12fff1e 	bx	lr

0000b858 <CPtrList::CPtrList()>:
    b858:	e3a02000 	mov	r2, #0
    b85c:	e5802000 	str	r2, [r0]
    b860:	e12fff1e 	bx	lr

0000b864 <CPtrList::~CPtrList()>:
    b864:	e12fff1e 	bx	lr

0000b868 <CPtrList::GetFirst()>:
    b868:	e5900000 	ldr	r0, [r0]
    b86c:	e12fff1e 	bx	lr

0000b870 <CPtrList::GetNext(TPtrListElement*)>:
    b870:	e5910008 	ldr	r0, [r1, #8]
    b874:	e12fff1e 	bx	lr

0000b878 <CPtrList::GetPtr(TPtrListElement*)>:
    b878:	e591000c 	ldr	r0, [r1, #12]
    b87c:	e12fff1e 	bx	lr

0000b880 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    b880:	e92d4070 	push	{r4, r5, r6, lr}
    b884:	e1a05000 	mov	r5, r0
    b888:	e3a00010 	mov	r0, #16
    b88c:	e1a04001 	mov	r4, r1
    b890:	e1a06002 	mov	r6, r2
    b894:	ebfff507 	bl	8cb8 <operator new(unsigned int)>
    b898:	e5951000 	ldr	r1, [r5]
    b89c:	e3043d43 	movw	r3, #19779	; 0x4d43
    b8a0:	e345304c 	movt	r3, #20556	; 0x504c
    b8a4:	e1510004 	cmp	r1, r4
    b8a8:	e580600c 	str	r6, [r0, #12]
    b8ac:	e5803000 	str	r3, [r0]
    b8b0:	0a000006 	beq	b8d0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x50>
    b8b4:	e5943004 	ldr	r3, [r4, #4]
    b8b8:	e5804008 	str	r4, [r0, #8]
    b8bc:	e3530000 	cmp	r3, #0
    b8c0:	e5803004 	str	r3, [r0, #4]
    b8c4:	15830008 	strne	r0, [r3, #8]
    b8c8:	e5840004 	str	r0, [r4, #4]
    b8cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    b8d0:	e5801008 	str	r1, [r0, #8]
    b8d4:	e3a03000 	mov	r3, #0
    b8d8:	e5803004 	str	r3, [r0, #4]
    b8dc:	e5810004 	str	r0, [r1, #4]
    b8e0:	e5850000 	str	r0, [r5]
    b8e4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b8e8 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    b8e8:	e92d4070 	push	{r4, r5, r6, lr}
    b8ec:	e1a06000 	mov	r6, r0
    b8f0:	e3a00010 	mov	r0, #16
    b8f4:	e1a04001 	mov	r4, r1
    b8f8:	e1a05002 	mov	r5, r2
    b8fc:	ebfff4ed 	bl	8cb8 <operator new(unsigned int)>
    b900:	e3540000 	cmp	r4, #0
    b904:	e3043d43 	movw	r3, #19779	; 0x4d43
    b908:	e345304c 	movt	r3, #20556	; 0x504c
    b90c:	e580500c 	str	r5, [r0, #12]
    b910:	e5803000 	str	r3, [r0]
    b914:	0a000006 	beq	b934 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x4c>
    b918:	e5943008 	ldr	r3, [r4, #8]
    b91c:	e5804004 	str	r4, [r0, #4]
    b920:	e3530000 	cmp	r3, #0
    b924:	e5803008 	str	r3, [r0, #8]
    b928:	15830004 	strne	r0, [r3, #4]
    b92c:	e5840008 	str	r0, [r4, #8]
    b930:	e8bd8070 	pop	{r4, r5, r6, pc}
    b934:	e5804004 	str	r4, [r0, #4]
    b938:	e5804008 	str	r4, [r0, #8]
    b93c:	e5860000 	str	r0, [r6]
    b940:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b944 <CPtrList::Remove(TPtrListElement*)>:
    b944:	e5903000 	ldr	r3, [r0]
    b948:	e1530001 	cmp	r3, r1
    b94c:	0a000009 	beq	b978 <CPtrList::Remove(TPtrListElement*)+0x34>
    b950:	e991000c 	ldmib	r1, {r2, r3}
    b954:	e5823008 	str	r3, [r2, #8]
    b958:	e5913008 	ldr	r3, [r1, #8]
    b95c:	e3530000 	cmp	r3, #0
    b960:	15832004 	strne	r2, [r3, #4]
    b964:	e3a03000 	mov	r3, #0
    b968:	e1a00001 	mov	r0, r1
    b96c:	e5813000 	str	r3, [r1]
    b970:	e3a01010 	mov	r1, #16
    b974:	eafff4d3 	b	8cc8 <operator delete(void*, unsigned int)>
    b978:	e5913008 	ldr	r3, [r1, #8]
    b97c:	e3530000 	cmp	r3, #0
    b980:	e5803000 	str	r3, [r0]
    b984:	13a02000 	movne	r2, #0
    b988:	15832004 	strne	r2, [r3, #4]
    b98c:	eafffff4 	b	b964 <CPtrList::Remove(TPtrListElement*)+0x20>

0000b990 <CPtrList::Find(void*)>:
    b990:	e5900000 	ldr	r0, [r0]
    b994:	e3500000 	cmp	r0, #0
    b998:	012fff1e 	bxeq	lr
    b99c:	e590300c 	ldr	r3, [r0, #12]
    b9a0:	e1510003 	cmp	r1, r3
    b9a4:	1a000003 	bne	b9b8 <CPtrList::Find(void*)+0x28>
    b9a8:	ea000006 	b	b9c8 <CPtrList::Find(void*)+0x38>
    b9ac:	e590300c 	ldr	r3, [r0, #12]
    b9b0:	e1530001 	cmp	r3, r1
    b9b4:	012fff1e 	bxeq	lr
    b9b8:	e5900008 	ldr	r0, [r0, #8]
    b9bc:	e3500000 	cmp	r0, #0
    b9c0:	1afffff9 	bne	b9ac <CPtrList::Find(void*)+0x1c>
    b9c4:	e12fff1e 	bx	lr
    b9c8:	e12fff1e 	bx	lr

0000b9cc <mem_init>:
    b9cc:	e0801001 	add	r1, r0, r1
    b9d0:	e30c2e70 	movw	r2, #52848	; 0xce70
    b9d4:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    b9d8:	e3402000 	movt	r2, #0
    b9dc:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    b9e0:	e3500605 	cmp	r0, #5242880	; 0x500000
    b9e4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    b9e8:	e582100c 	str	r1, [r2, #12]
    b9ec:	33a00605 	movcc	r0, #5242880	; 0x500000
    b9f0:	e2411501 	sub	r1, r1, #4194304	; 0x400000
    b9f4:	e3c3300f 	bic	r3, r3, #15
    b9f8:	e5820000 	str	r0, [r2]
    b9fc:	e982000a 	stmib	r2, {r1, r3}
    ba00:	e12fff1e 	bx	lr

0000ba04 <mem_get_size>:
    ba04:	e30c3e70 	movw	r3, #52848	; 0xce70
    ba08:	e3403000 	movt	r3, #0
    ba0c:	e5930004 	ldr	r0, [r3, #4]
    ba10:	e5931000 	ldr	r1, [r3]
    ba14:	e593200c 	ldr	r2, [r3, #12]
    ba18:	e5933008 	ldr	r3, [r3, #8]
    ba1c:	e0400001 	sub	r0, r0, r1
    ba20:	e0423003 	sub	r3, r2, r3
    ba24:	e0800003 	add	r0, r0, r3
    ba28:	e12fff1e 	bx	lr

0000ba2c <malloc>:
    ba2c:	e92d4070 	push	{r4, r5, r6, lr}
    ba30:	e30c6e70 	movw	r6, #52848	; 0xce70
    ba34:	e3406000 	movt	r6, #0
    ba38:	e1a04000 	mov	r4, r0
    ba3c:	e5960010 	ldr	r0, [r6, #16]
    ba40:	e3500000 	cmp	r0, #0
    ba44:	1a000035 	bne	bb20 <malloc+0xf4>
    ba48:	e30c2da8 	movw	r2, #52648	; 0xcda8
    ba4c:	e3402000 	movt	r2, #0
    ba50:	e5923000 	ldr	r3, [r2]
    ba54:	e3530000 	cmp	r3, #0
    ba58:	0a000007 	beq	ba7c <malloc+0x50>
    ba5c:	e1540003 	cmp	r4, r3
    ba60:	8a000002 	bhi	ba70 <malloc+0x44>
    ba64:	ea000011 	b	bab0 <malloc+0x84>
    ba68:	e1530004 	cmp	r3, r4
    ba6c:	2a00000f 	bcs	bab0 <malloc+0x84>
    ba70:	e5b23008 	ldr	r3, [r2, #8]!
    ba74:	e3530000 	cmp	r3, #0
    ba78:	1afffffa 	bne	ba68 <malloc+0x3c>
    ba7c:	e5965000 	ldr	r5, [r6]
    ba80:	e284301f 	add	r3, r4, #31
    ba84:	e3c3300f 	bic	r3, r3, #15
    ba88:	e5962004 	ldr	r2, [r6, #4]
    ba8c:	e0853003 	add	r3, r5, r3
    ba90:	e5863000 	str	r3, [r6]
    ba94:	e1530002 	cmp	r3, r2
    ba98:	9a000013 	bls	baec <malloc+0xc0>
    ba9c:	e3500000 	cmp	r0, #0
    baa0:	08bd8070 	popeq	{r4, r5, r6, pc}
    baa4:	ebfff497 	bl	8d08 <LeaveCritical>
    baa8:	e3a00000 	mov	r0, #0
    baac:	e8bd8070 	pop	{r4, r5, r6, pc}
    bab0:	e5925004 	ldr	r5, [r2, #4]
    bab4:	e3550000 	cmp	r5, #0
    bab8:	01a04003 	moveq	r4, r3
    babc:	0affffee 	beq	ba7c <malloc+0x50>
    bac0:	e5953008 	ldr	r3, [r5, #8]
    bac4:	e3500000 	cmp	r0, #0
    bac8:	e5823004 	str	r3, [r2, #4]
    bacc:	1a000011 	bne	bb18 <malloc+0xec>
    bad0:	e3a03000 	mov	r3, #0
    bad4:	e2850010 	add	r0, r5, #16
    bad8:	e5c53008 	strb	r3, [r5, #8]
    badc:	e5c53009 	strb	r3, [r5, #9]
    bae0:	e5c5300a 	strb	r3, [r5, #10]
    bae4:	e5c5300b 	strb	r3, [r5, #11]
    bae8:	e8bd8070 	pop	{r4, r5, r6, pc}
    baec:	e3500000 	cmp	r0, #0
    baf0:	e3a02043 	mov	r2, #67	; 0x43
    baf4:	e3a0304d 	mov	r3, #77	; 0x4d
    baf8:	e5c52000 	strb	r2, [r5]
    bafc:	e5c53001 	strb	r3, [r5, #1]
    bb00:	e3a0204c 	mov	r2, #76	; 0x4c
    bb04:	e3a03042 	mov	r3, #66	; 0x42
    bb08:	e5854004 	str	r4, [r5, #4]
    bb0c:	e5c52002 	strb	r2, [r5, #2]
    bb10:	e5c53003 	strb	r3, [r5, #3]
    bb14:	0affffed 	beq	bad0 <malloc+0xa4>
    bb18:	ebfff47a 	bl	8d08 <LeaveCritical>
    bb1c:	eaffffeb 	b	bad0 <malloc+0xa4>
    bb20:	ebfff46a 	bl	8cd0 <EnterCritical>
    bb24:	e5960010 	ldr	r0, [r6, #16]
    bb28:	eaffffc6 	b	ba48 <malloc+0x1c>

0000bb2c <free>:
    bb2c:	e3500000 	cmp	r0, #0
    bb30:	012fff1e 	bxeq	lr
    bb34:	e92d4070 	push	{r4, r5, r6, lr}
    bb38:	e30c4da8 	movw	r4, #52648	; 0xcda8
    bb3c:	e3404000 	movt	r4, #0
    bb40:	e2405010 	sub	r5, r0, #16
    bb44:	e5943000 	ldr	r3, [r4]
    bb48:	e3530000 	cmp	r3, #0
    bb4c:	08bd8070 	popeq	{r4, r5, r6, pc}
    bb50:	e5952004 	ldr	r2, [r5, #4]
    bb54:	e1520003 	cmp	r2, r3
    bb58:	1a000002 	bne	bb68 <free+0x3c>
    bb5c:	ea000005 	b	bb78 <free+0x4c>
    bb60:	e1530002 	cmp	r3, r2
    bb64:	0a000003 	beq	bb78 <free+0x4c>
    bb68:	e5b43008 	ldr	r3, [r4, #8]!
    bb6c:	e3530000 	cmp	r3, #0
    bb70:	1afffffa 	bne	bb60 <free+0x34>
    bb74:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb78:	e30c6e70 	movw	r6, #52848	; 0xce70
    bb7c:	e3406000 	movt	r6, #0
    bb80:	e5960010 	ldr	r0, [r6, #16]
    bb84:	e3500000 	cmp	r0, #0
    bb88:	1a000003 	bne	bb9c <free+0x70>
    bb8c:	e5943004 	ldr	r3, [r4, #4]
    bb90:	e5853008 	str	r3, [r5, #8]
    bb94:	e5845004 	str	r5, [r4, #4]
    bb98:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb9c:	ebfff44b 	bl	8cd0 <EnterCritical>
    bba0:	e5962010 	ldr	r2, [r6, #16]
    bba4:	e5943004 	ldr	r3, [r4, #4]
    bba8:	e3520000 	cmp	r2, #0
    bbac:	e5853008 	str	r3, [r5, #8]
    bbb0:	e5845004 	str	r5, [r4, #4]
    bbb4:	08bd8070 	popeq	{r4, r5, r6, pc}
    bbb8:	e8bd4070 	pop	{r4, r5, r6, lr}
    bbbc:	eafff451 	b	8d08 <LeaveCritical>

0000bbc0 <palloc>:
    bbc0:	e92d4070 	push	{r4, r5, r6, lr}
    bbc4:	e30c5e70 	movw	r5, #52848	; 0xce70
    bbc8:	e3405000 	movt	r5, #0
    bbcc:	e5950014 	ldr	r0, [r5, #20]
    bbd0:	e3500000 	cmp	r0, #0
    bbd4:	1a00000d 	bne	bc10 <palloc+0x50>
    bbd8:	e5954018 	ldr	r4, [r5, #24]
    bbdc:	e3540000 	cmp	r4, #0
    bbe0:	0a00000f 	beq	bc24 <palloc+0x64>
    bbe4:	e5943004 	ldr	r3, [r4, #4]
    bbe8:	e3a02000 	mov	r2, #0
    bbec:	e5842000 	str	r2, [r4]
    bbf0:	e5853018 	str	r3, [r5, #24]
    bbf4:	e3500000 	cmp	r0, #0
    bbf8:	1a000001 	bne	bc04 <palloc+0x44>
    bbfc:	e1a00004 	mov	r0, r4
    bc00:	e8bd8070 	pop	{r4, r5, r6, pc}
    bc04:	ebfff43f 	bl	8d08 <LeaveCritical>
    bc08:	e1a00004 	mov	r0, r4
    bc0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    bc10:	ebfff42e 	bl	8cd0 <EnterCritical>
    bc14:	e5954018 	ldr	r4, [r5, #24]
    bc18:	e5950014 	ldr	r0, [r5, #20]
    bc1c:	e3540000 	cmp	r4, #0
    bc20:	1affffef 	bne	bbe4 <palloc+0x24>
    bc24:	e5954008 	ldr	r4, [r5, #8]
    bc28:	e595200c 	ldr	r2, [r5, #12]
    bc2c:	e2843a01 	add	r3, r4, #4096	; 0x1000
    bc30:	e5853008 	str	r3, [r5, #8]
    bc34:	e1530002 	cmp	r3, r2
    bc38:	9affffed 	bls	bbf4 <palloc+0x34>
    bc3c:	e3500000 	cmp	r0, #0
    bc40:	08bd8070 	popeq	{r4, r5, r6, pc}
    bc44:	ebfff42f 	bl	8d08 <LeaveCritical>
    bc48:	e3a00000 	mov	r0, #0
    bc4c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bc50 <pfree>:
    bc50:	e92d4070 	push	{r4, r5, r6, lr}
    bc54:	e2505000 	subs	r5, r0, #0
    bc58:	08bd8070 	popeq	{r4, r5, r6, pc}
    bc5c:	e30c4e70 	movw	r4, #52848	; 0xce70
    bc60:	e3404000 	movt	r4, #0
    bc64:	e5940014 	ldr	r0, [r4, #20]
    bc68:	e3500000 	cmp	r0, #0
    bc6c:	1a000006 	bne	bc8c <pfree+0x3c>
    bc70:	e5941018 	ldr	r1, [r4, #24]
    bc74:	e3042d43 	movw	r2, #19779	; 0x4d43
    bc78:	e5845018 	str	r5, [r4, #24]
    bc7c:	e3452047 	movt	r2, #20551	; 0x5047
    bc80:	e5852000 	str	r2, [r5]
    bc84:	e5851004 	str	r1, [r5, #4]
    bc88:	e8bd8070 	pop	{r4, r5, r6, pc}
    bc8c:	ebfff40f 	bl	8cd0 <EnterCritical>
    bc90:	e5941014 	ldr	r1, [r4, #20]
    bc94:	e5942018 	ldr	r2, [r4, #24]
    bc98:	e3043d43 	movw	r3, #19779	; 0x4d43
    bc9c:	e3510000 	cmp	r1, #0
    bca0:	e3453047 	movt	r3, #20551	; 0x5047
    bca4:	e5845018 	str	r5, [r4, #24]
    bca8:	e5853000 	str	r3, [r5]
    bcac:	e5852004 	str	r2, [r5, #4]
    bcb0:	08bd8070 	popeq	{r4, r5, r6, pc}
    bcb4:	e8bd4070 	pop	{r4, r5, r6, lr}
    bcb8:	eafff412 	b	8d08 <LeaveCritical>

0000bcbc <_GLOBAL__sub_I_mem_init>:
    bcbc:	e30c3e70 	movw	r3, #52848	; 0xce70
    bcc0:	e3403000 	movt	r3, #0
    bcc4:	e3a02001 	mov	r2, #1
    bcc8:	e5832010 	str	r2, [r3, #16]
    bccc:	e5832014 	str	r2, [r3, #20]
    bcd0:	e12fff1e 	bx	lr

0000bcd4 <CBcmMailBox::CBcmMailBox(unsigned int)>:
    bcd4:	e3a02000 	mov	r2, #0
    bcd8:	e8800006 	stm	r0, {r1, r2}
    bcdc:	e12fff1e 	bx	lr

0000bce0 <CBcmMailBox::~CBcmMailBox()>:
    bce0:	e12fff1e 	bx	lr

0000bce4 <CBcmMailBox::WriteRead(unsigned int)>:
    bce4:	e92d4070 	push	{r4, r5, r6, lr}
    bce8:	e1a05000 	mov	r5, r0
    bcec:	e5900004 	ldr	r0, [r0, #4]
    bcf0:	e1a06001 	mov	r6, r1
    bcf4:	e3500000 	cmp	r0, #0
    bcf8:	1a000023 	bne	bd8c <CBcmMailBox::WriteRead(unsigned int)+0xa8>
    bcfc:	e3a04a0b 	mov	r4, #45056	; 0xb000
    bd00:	e3434f00 	movt	r4, #16128	; 0x3f00
    bd04:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    bd08:	e3130101 	tst	r3, #1073741824	; 0x40000000
    bd0c:	1a000005 	bne	bd28 <CBcmMailBox::WriteRead(unsigned int)+0x44>
    bd10:	e3a00014 	mov	r0, #20
    bd14:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    bd18:	ebfff634 	bl	95f0 <CTimer::SimpleMsDelay(unsigned int)>
    bd1c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    bd20:	e3130101 	tst	r3, #1073741824	; 0x40000000
    bd24:	0afffff9 	beq	bd10 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
    bd28:	e3a01a0b 	mov	r1, #45056	; 0xb000
    bd2c:	e3431f00 	movt	r1, #16128	; 0x3f00
    bd30:	e59138b8 	ldr	r3, [r1, #2232]	; 0x8b8
    bd34:	e3530000 	cmp	r3, #0
    bd38:	bafffffc 	blt	bd30 <CBcmMailBox::WriteRead(unsigned int)+0x4c>
    bd3c:	e5953000 	ldr	r3, [r5]
    bd40:	e3a02a0b 	mov	r2, #45056	; 0xb000
    bd44:	e3432f00 	movt	r2, #16128	; 0x3f00
    bd48:	e1866003 	orr	r6, r6, r3
    bd4c:	e58168a0 	str	r6, [r1, #2208]	; 0x8a0
    bd50:	e5950000 	ldr	r0, [r5]
    bd54:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    bd58:	e3130101 	tst	r3, #1073741824	; 0x40000000
    bd5c:	1afffffc 	bne	bd54 <CBcmMailBox::WriteRead(unsigned int)+0x70>
    bd60:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    bd64:	e203100f 	and	r1, r3, #15
    bd68:	e1510000 	cmp	r1, r0
    bd6c:	1afffff8 	bne	bd54 <CBcmMailBox::WriteRead(unsigned int)+0x70>
    bd70:	e5952004 	ldr	r2, [r5, #4]
    bd74:	e3c3400f 	bic	r4, r3, #15
    bd78:	e3520000 	cmp	r2, #0
    bd7c:	0a000000 	beq	bd84 <CBcmMailBox::WriteRead(unsigned int)+0xa0>
    bd80:	ebfff3e0 	bl	8d08 <LeaveCritical>
    bd84:	e1a00004 	mov	r0, r4
    bd88:	e8bd8070 	pop	{r4, r5, r6, pc}
    bd8c:	ebfff3cf 	bl	8cd0 <EnterCritical>
    bd90:	eaffffd9 	b	bcfc <CBcmMailBox::WriteRead(unsigned int)+0x18>

0000bd94 <CBcmMailBox::Flush()>:
    bd94:	e92d4010 	push	{r4, lr}
    bd98:	e3a04a0b 	mov	r4, #45056	; 0xb000
    bd9c:	e3434f00 	movt	r4, #16128	; 0x3f00
    bda0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    bda4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    bda8:	18bd8010 	popne	{r4, pc}
    bdac:	e3a00014 	mov	r0, #20
    bdb0:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    bdb4:	ebfff60d 	bl	95f0 <CTimer::SimpleMsDelay(unsigned int)>
    bdb8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    bdbc:	e3130101 	tst	r3, #1073741824	; 0x40000000
    bdc0:	0afffff9 	beq	bdac <CBcmMailBox::Flush()+0x18>
    bdc4:	e8bd8010 	pop	{r4, pc}

0000bdc8 <CBcmMailBox::Read()>:
    bdc8:	e5901000 	ldr	r1, [r0]
    bdcc:	e3a02a0b 	mov	r2, #45056	; 0xb000
    bdd0:	e3432f00 	movt	r2, #16128	; 0x3f00
    bdd4:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    bdd8:	e3130101 	tst	r3, #1073741824	; 0x40000000
    bddc:	1afffffc 	bne	bdd4 <CBcmMailBox::Read()+0xc>
    bde0:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    bde4:	e200300f 	and	r3, r0, #15
    bde8:	e1510003 	cmp	r1, r3
    bdec:	1afffff8 	bne	bdd4 <CBcmMailBox::Read()+0xc>
    bdf0:	e3c0000f 	bic	r0, r0, #15
    bdf4:	e12fff1e 	bx	lr

0000bdf8 <CBcmMailBox::Write(unsigned int)>:
    bdf8:	e3a02a0b 	mov	r2, #45056	; 0xb000
    bdfc:	e3432f00 	movt	r2, #16128	; 0x3f00
    be00:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    be04:	e3530000 	cmp	r3, #0
    be08:	bafffffc 	blt	be00 <CBcmMailBox::Write(unsigned int)+0x8>
    be0c:	e5903000 	ldr	r3, [r0]
    be10:	e1811003 	orr	r1, r1, r3
    be14:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
    be18:	e12fff1e 	bx	lr

0000be1c <__aeabi_uidiv>:
    be1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    be20:	e3a02000 	mov	r2, #0
    be24:	eb000163 	bl	c3b8 <__Divide>
    be28:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000be2c <__aeabi_uidivmod>:
    be2c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    be30:	e24dd00c 	sub	sp, sp, #12
    be34:	e28d2004 	add	r2, sp, #4
    be38:	eb00015e 	bl	c3b8 <__Divide>
    be3c:	e59d1004 	ldr	r1, [sp, #4]
    be40:	e28dd00c 	add	sp, sp, #12
    be44:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000be48 <__aeabi_idiv>:
    be48:	ea000186 	b	c468 <__DivideInteger>

0000be4c <memset>:
    be4c:	e3520000 	cmp	r2, #0
    be50:	012fff1e 	bxeq	lr
    be54:	e6af1071 	sxtb	r1, r1
    be58:	e0802002 	add	r2, r0, r2
    be5c:	e1a03000 	mov	r3, r0
    be60:	e4c31001 	strb	r1, [r3], #1
    be64:	e1530002 	cmp	r3, r2
    be68:	1afffffc 	bne	be60 <memset+0x14>
    be6c:	e12fff1e 	bx	lr

0000be70 <memcmp>:
    be70:	e3520000 	cmp	r2, #0
    be74:	0a00000e 	beq	beb4 <memcmp+0x44>
    be78:	e5d0c000 	ldrb	ip, [r0]
    be7c:	e5d13000 	ldrb	r3, [r1]
    be80:	e15c0003 	cmp	ip, r3
    be84:	ca00000c 	bgt	bebc <memcmp+0x4c>
    be88:	ba00000d 	blt	bec4 <memcmp+0x54>
    be8c:	e0812002 	add	r2, r1, r2
    be90:	e2811001 	add	r1, r1, #1
    be94:	ea000004 	b	beac <memcmp+0x3c>
    be98:	e5f0c001 	ldrb	ip, [r0, #1]!
    be9c:	e4d13001 	ldrb	r3, [r1], #1
    bea0:	e15c0003 	cmp	ip, r3
    bea4:	ca000004 	bgt	bebc <memcmp+0x4c>
    bea8:	ba000005 	blt	bec4 <memcmp+0x54>
    beac:	e1510002 	cmp	r1, r2
    beb0:	1afffff8 	bne	be98 <memcmp+0x28>
    beb4:	e3a00000 	mov	r0, #0
    beb8:	e12fff1e 	bx	lr
    bebc:	e3a00001 	mov	r0, #1
    bec0:	e12fff1e 	bx	lr
    bec4:	e3e00000 	mvn	r0, #0
    bec8:	e12fff1e 	bx	lr

0000becc <strlen>:
    becc:	e1d010d0 	ldrsb	r1, [r0]
    bed0:	e2803001 	add	r3, r0, #1
    bed4:	e3510000 	cmp	r1, #0
    bed8:	0a000003 	beq	beec <strlen+0x20>
    bedc:	e0431000 	sub	r1, r3, r0
    bee0:	e0d320d1 	ldrsb	r2, [r3], #1
    bee4:	e3520000 	cmp	r2, #0
    bee8:	1afffffb 	bne	bedc <strlen+0x10>
    beec:	e1a00001 	mov	r0, r1
    bef0:	e12fff1e 	bx	lr

0000bef4 <strcmp>:
    bef4:	e1d030d0 	ldrsb	r3, [r0]
    bef8:	e1d120d0 	ldrsb	r2, [r1]
    befc:	e3530000 	cmp	r3, #0
    bf00:	1a000007 	bne	bf24 <strcmp+0x30>
    bf04:	ea000008 	b	bf2c <strcmp+0x38>
    bf08:	e1530002 	cmp	r3, r2
    bf0c:	ca00000b 	bgt	bf40 <strcmp+0x4c>
    bf10:	ba00000c 	blt	bf48 <strcmp+0x54>
    bf14:	e1f030d1 	ldrsb	r3, [r0, #1]!
    bf18:	e3530000 	cmp	r3, #0
    bf1c:	0a00000b 	beq	bf50 <strcmp+0x5c>
    bf20:	e1f120d1 	ldrsb	r2, [r1, #1]!
    bf24:	e3520000 	cmp	r2, #0
    bf28:	1afffff6 	bne	bf08 <strcmp+0x14>
    bf2c:	e1530002 	cmp	r3, r2
    bf30:	ca000002 	bgt	bf40 <strcmp+0x4c>
    bf34:	b3e00000 	mvnlt	r0, #0
    bf38:	a3a00000 	movge	r0, #0
    bf3c:	e12fff1e 	bx	lr
    bf40:	e3a00001 	mov	r0, #1
    bf44:	e12fff1e 	bx	lr
    bf48:	e3e00000 	mvn	r0, #0
    bf4c:	e12fff1e 	bx	lr
    bf50:	e1d120d1 	ldrsb	r2, [r1, #1]
    bf54:	e1530002 	cmp	r3, r2
    bf58:	dafffff5 	ble	bf34 <strcmp+0x40>
    bf5c:	eafffff7 	b	bf40 <strcmp+0x4c>

0000bf60 <strcpy>:
    bf60:	e1d130d0 	ldrsb	r3, [r1]
    bf64:	e1a02000 	mov	r2, r0
    bf68:	e3530000 	cmp	r3, #0
    bf6c:	0a000003 	beq	bf80 <strcpy+0x20>
    bf70:	e4c23001 	strb	r3, [r2], #1
    bf74:	e1f130d1 	ldrsb	r3, [r1, #1]!
    bf78:	e3530000 	cmp	r3, #0
    bf7c:	1afffffb 	bne	bf70 <strcpy+0x10>
    bf80:	e3a03000 	mov	r3, #0
    bf84:	e5c23000 	strb	r3, [r2]
    bf88:	e12fff1e 	bx	lr

0000bf8c <strncpy>:
    bf8c:	e3520000 	cmp	r2, #0
    bf90:	012fff1e 	bxeq	lr
    bf94:	e1d1c0d0 	ldrsb	ip, [r1]
    bf98:	e35c0000 	cmp	ip, #0
    bf9c:	0a000009 	beq	bfc8 <strncpy+0x3c>
    bfa0:	e0802002 	add	r2, r0, r2
    bfa4:	e1a03000 	mov	r3, r0
    bfa8:	ea000002 	b	bfb8 <strncpy+0x2c>
    bfac:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    bfb0:	e35c0000 	cmp	ip, #0
    bfb4:	0a000004 	beq	bfcc <strncpy+0x40>
    bfb8:	e4c3c001 	strb	ip, [r3], #1
    bfbc:	e1530002 	cmp	r3, r2
    bfc0:	1afffff9 	bne	bfac <strncpy+0x20>
    bfc4:	e12fff1e 	bx	lr
    bfc8:	e1a03000 	mov	r3, r0
    bfcc:	e3a02000 	mov	r2, #0
    bfd0:	e5c32000 	strb	r2, [r3]
    bfd4:	e12fff1e 	bx	lr

0000bfd8 <strcat>:
    bfd8:	e1d030d0 	ldrsb	r3, [r0]
    bfdc:	e3530000 	cmp	r3, #0
    bfe0:	e1a03000 	mov	r3, r0
    bfe4:	0a000002 	beq	bff4 <strcat+0x1c>
    bfe8:	e1f320d1 	ldrsb	r2, [r3, #1]!
    bfec:	e3520000 	cmp	r2, #0
    bff0:	1afffffc 	bne	bfe8 <strcat+0x10>
    bff4:	e1d120d0 	ldrsb	r2, [r1]
    bff8:	e3520000 	cmp	r2, #0
    bffc:	0a000003 	beq	c010 <strcat+0x38>
    c000:	e4c32001 	strb	r2, [r3], #1
    c004:	e1f120d1 	ldrsb	r2, [r1, #1]!
    c008:	e3520000 	cmp	r2, #0
    c00c:	1afffffb 	bne	c000 <strcat+0x28>
    c010:	e3a02000 	mov	r2, #0
    c014:	e5c32000 	strb	r2, [r3]
    c018:	e12fff1e 	bx	lr

0000c01c <strchr>:
    c01c:	e1d020d0 	ldrsb	r2, [r0]
    c020:	e3520000 	cmp	r2, #0
    c024:	0a000009 	beq	c050 <strchr+0x34>
    c028:	e1510002 	cmp	r1, r2
    c02c:	1a000002 	bne	c03c <strchr+0x20>
    c030:	ea000008 	b	c058 <strchr+0x3c>
    c034:	e1530001 	cmp	r3, r1
    c038:	012fff1e 	bxeq	lr
    c03c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    c040:	e3530000 	cmp	r3, #0
    c044:	1afffffa 	bne	c034 <strchr+0x18>
    c048:	e1a00003 	mov	r0, r3
    c04c:	e12fff1e 	bx	lr
    c050:	e1a00002 	mov	r0, r2
    c054:	e12fff1e 	bx	lr
    c058:	e12fff1e 	bx	lr

0000c05c <strtok_r>:
    c05c:	e3500000 	cmp	r0, #0
    c060:	0a00002c 	beq	c118 <strtok_r+0xbc>
    c064:	e92d4030 	push	{r4, r5, lr}
    c068:	e1d0e0d0 	ldrsb	lr, [r0]
    c06c:	e35e0000 	cmp	lr, #0
    c070:	11d140d0 	ldrsbne	r4, [r1]
    c074:	0a000024 	beq	c10c <strtok_r+0xb0>
    c078:	e3540000 	cmp	r4, #0
    c07c:	0a000008 	beq	c0a4 <strtok_r+0x48>
    c080:	e15e0004 	cmp	lr, r4
    c084:	0a000019 	beq	c0f0 <strtok_r+0x94>
    c088:	e1a0c001 	mov	ip, r1
    c08c:	ea000001 	b	c098 <strtok_r+0x3c>
    c090:	e15e0003 	cmp	lr, r3
    c094:	0a000015 	beq	c0f0 <strtok_r+0x94>
    c098:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    c09c:	e3530000 	cmp	r3, #0
    c0a0:	1afffffa 	bne	c090 <strtok_r+0x34>
    c0a4:	e35e0000 	cmp	lr, #0
    c0a8:	0a000017 	beq	c10c <strtok_r+0xb0>
    c0ac:	e1a05000 	mov	r5, r0
    c0b0:	e3540000 	cmp	r4, #0
    c0b4:	0a000008 	beq	c0dc <strtok_r+0x80>
    c0b8:	e15e0004 	cmp	lr, r4
    c0bc:	0a00000d 	beq	c0f8 <strtok_r+0x9c>
    c0c0:	e1a0c001 	mov	ip, r1
    c0c4:	ea000001 	b	c0d0 <strtok_r+0x74>
    c0c8:	e15e0003 	cmp	lr, r3
    c0cc:	0a000009 	beq	c0f8 <strtok_r+0x9c>
    c0d0:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    c0d4:	e3530000 	cmp	r3, #0
    c0d8:	1afffffa 	bne	c0c8 <strtok_r+0x6c>
    c0dc:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    c0e0:	e35e0000 	cmp	lr, #0
    c0e4:	1afffff1 	bne	c0b0 <strtok_r+0x54>
    c0e8:	e5825000 	str	r5, [r2]
    c0ec:	e8bd8030 	pop	{r4, r5, pc}
    c0f0:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    c0f4:	eaffffdf 	b	c078 <strtok_r+0x1c>
    c0f8:	e3a03000 	mov	r3, #0
    c0fc:	e2855001 	add	r5, r5, #1
    c100:	e5453001 	strb	r3, [r5, #-1]
    c104:	e5825000 	str	r5, [r2]
    c108:	e8bd8030 	pop	{r4, r5, pc}
    c10c:	e3a00000 	mov	r0, #0
    c110:	e5820000 	str	r0, [r2]
    c114:	e8bd8030 	pop	{r4, r5, pc}
    c118:	e5920000 	ldr	r0, [r2]
    c11c:	e3500000 	cmp	r0, #0
    c120:	1affffcf 	bne	c064 <strtok_r+0x8>
    c124:	e12fff1e 	bx	lr

0000c128 <strtoul>:
    c128:	e3510000 	cmp	r1, #0
    c12c:	e92d4070 	push	{r4, r5, r6, lr}
    c130:	e2425002 	sub	r5, r2, #2
    c134:	15810000 	strne	r0, [r1]
    c138:	e3520000 	cmp	r2, #0
    c13c:	13550022 	cmpne	r5, #34	; 0x22
    c140:	e3c2e010 	bic	lr, r2, #16
    c144:	83a05001 	movhi	r5, #1
    c148:	93a05000 	movls	r5, #0
    c14c:	8a000036 	bhi	c22c <strtoul+0x104>
    c150:	e1d0c0d0 	ldrsb	ip, [r0]
    c154:	e1a04000 	mov	r4, r0
    c158:	e2800001 	add	r0, r0, #1
    c15c:	e24c3009 	sub	r3, ip, #9
    c160:	e35c0020 	cmp	ip, #32
    c164:	e6ef3073 	uxtb	r3, r3
    c168:	0afffff8 	beq	c150 <strtoul+0x28>
    c16c:	e3530004 	cmp	r3, #4
    c170:	9afffff6 	bls	c150 <strtoul+0x28>
    c174:	e35c002b 	cmp	ip, #43	; 0x2b
    c178:	0a00002d 	beq	c234 <strtoul+0x10c>
    c17c:	e35c002d 	cmp	ip, #45	; 0x2d
    c180:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
    c184:	03a06001 	moveq	r6, #1
    c188:	01a04000 	moveq	r4, r0
    c18c:	13a06000 	movne	r6, #0
    c190:	e35c0030 	cmp	ip, #48	; 0x30
    c194:	0a00002b 	beq	c248 <strtoul+0x120>
    c198:	e3520000 	cmp	r2, #0
    c19c:	03a0200a 	moveq	r2, #10
    c1a0:	e35c002f 	cmp	ip, #47	; 0x2f
    c1a4:	e1a0300c 	mov	r3, ip
    c1a8:	da00001c 	ble	c220 <strtoul+0xf8>
    c1ac:	e3a05001 	mov	r5, #1
    c1b0:	e3a0e000 	mov	lr, #0
    c1b4:	ea000007 	b	c1d8 <strtoul+0xb0>
    c1b8:	e150000e 	cmp	r0, lr
    c1bc:	e3a05000 	mov	r5, #0
    c1c0:	e1a0e000 	mov	lr, r0
    c1c4:	3a000028 	bcc	c26c <strtoul+0x144>
    c1c8:	e1f430d1 	ldrsb	r3, [r4, #1]!
    c1cc:	e353002f 	cmp	r3, #47	; 0x2f
    c1d0:	e1a0c003 	mov	ip, r3
    c1d4:	da000029 	ble	c280 <strtoul+0x158>
    c1d8:	e24cc061 	sub	ip, ip, #97	; 0x61
    c1dc:	e35c0019 	cmp	ip, #25
    c1e0:	92433020 	subls	r3, r3, #32
    c1e4:	e3530040 	cmp	r3, #64	; 0x40
    c1e8:	c2433007 	subgt	r3, r3, #7
    c1ec:	e2433030 	sub	r3, r3, #48	; 0x30
    c1f0:	e1520003 	cmp	r2, r3
    c1f4:	e020329e 	mla	r0, lr, r2, r3
    c1f8:	caffffee 	bgt	c1b8 <strtoul+0x90>
    c1fc:	e2255001 	eor	r5, r5, #1
    c200:	e1a0000e 	mov	r0, lr
    c204:	e3510000 	cmp	r1, #0
    c208:	e0055006 	and	r5, r5, r6
    c20c:	0a000000 	beq	c214 <strtoul+0xec>
    c210:	e5814000 	str	r4, [r1]
    c214:	e3550000 	cmp	r5, #0
    c218:	12600000 	rsbne	r0, r0, #0
    c21c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c220:	e3510000 	cmp	r1, #0
    c224:	13a00000 	movne	r0, #0
    c228:	1afffff8 	bne	c210 <strtoul+0xe8>
    c22c:	e3a00000 	mov	r0, #0
    c230:	e8bd8070 	pop	{r4, r5, r6, pc}
    c234:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    c238:	e3a06000 	mov	r6, #0
    c23c:	e1a04000 	mov	r4, r0
    c240:	e35c0030 	cmp	ip, #48	; 0x30
    c244:	1affffd3 	bne	c198 <strtoul+0x70>
    c248:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    c24c:	e2840001 	add	r0, r4, #1
    c250:	e3cc3020 	bic	r3, ip, #32
    c254:	e3530058 	cmp	r3, #88	; 0x58
    c258:	0a00000a 	beq	c288 <strtoul+0x160>
    c25c:	e3520000 	cmp	r2, #0
    c260:	e1a04000 	mov	r4, r0
    c264:	03a02008 	moveq	r2, #8
    c268:	eaffffcc 	b	c1a0 <strtoul+0x78>
    c26c:	e1510005 	cmp	r1, r5
    c270:	0a00000a 	beq	c2a0 <strtoul+0x178>
    c274:	e5814000 	str	r4, [r1]
    c278:	e3e00000 	mvn	r0, #0
    c27c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c280:	e3a05001 	mov	r5, #1
    c284:	eaffffde 	b	c204 <strtoul+0xdc>
    c288:	e35e0000 	cmp	lr, #0
    c28c:	1affffe6 	bne	c22c <strtoul+0x104>
    c290:	e1d4c0d2 	ldrsb	ip, [r4, #2]
    c294:	e3a02010 	mov	r2, #16
    c298:	e2844002 	add	r4, r4, #2
    c29c:	eaffffbf 	b	c1a0 <strtoul+0x78>
    c2a0:	e3e00000 	mvn	r0, #0
    c2a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c2a8 <char2int>:
    c2a8:	e12fff1e 	bx	lr

0000c2ac <UndefinedInstructionStub>:
    c2ac:	e24ee004 	sub	lr, lr, #4
    c2b0:	e92d4000 	stmfd	sp!, {lr}
    c2b4:	e14fe000 	mrs	lr, SPSR
    c2b8:	e92d4000 	stmfd	sp!, {lr}
    c2bc:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    c2c0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    c2c4:	e1a0100d 	mov	r1, sp
    c2c8:	f1020012 	cps	#18
    c2cc:	e1a0200d 	mov	r2, sp
    c2d0:	e1a0300e 	mov	r3, lr
    c2d4:	f102001f 	cps	#31
    c2d8:	e1a0d001 	mov	sp, r1
    c2dc:	e92d000c 	push	{r2, r3}
    c2e0:	e1a0100d 	mov	r1, sp
    c2e4:	e3a00001 	mov	r0, #1
    c2e8:	ea0000da 	b	c658 <ExceptionHandler>

0000c2ec <PrefetchAbortStub>:
    c2ec:	e24ee004 	sub	lr, lr, #4
    c2f0:	e92d4000 	stmfd	sp!, {lr}
    c2f4:	e14fe000 	mrs	lr, SPSR
    c2f8:	e92d4000 	stmfd	sp!, {lr}
    c2fc:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    c300:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    c304:	e1a0100d 	mov	r1, sp
    c308:	f1020012 	cps	#18
    c30c:	e1a0200d 	mov	r2, sp
    c310:	e1a0300e 	mov	r3, lr
    c314:	f102001f 	cps	#31
    c318:	e1a0d001 	mov	sp, r1
    c31c:	e92d000c 	push	{r2, r3}
    c320:	e1a0100d 	mov	r1, sp
    c324:	e3a00002 	mov	r0, #2
    c328:	ea0000ca 	b	c658 <ExceptionHandler>

0000c32c <DataAbortStub>:
    c32c:	e24ee008 	sub	lr, lr, #8
    c330:	e92d4000 	stmfd	sp!, {lr}
    c334:	e14fe000 	mrs	lr, SPSR
    c338:	e92d4000 	stmfd	sp!, {lr}
    c33c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    c340:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    c344:	e1a0100d 	mov	r1, sp
    c348:	f1020012 	cps	#18
    c34c:	e1a0200d 	mov	r2, sp
    c350:	e1a0300e 	mov	r3, lr
    c354:	f102001f 	cps	#31
    c358:	e1a0d001 	mov	sp, r1
    c35c:	e92d000c 	push	{r2, r3}
    c360:	e1a0100d 	mov	r1, sp
    c364:	e3a00003 	mov	r0, #3
    c368:	ea0000ba 	b	c658 <ExceptionHandler>

0000c36c <IRQStub>:
    c36c:	e24ee004 	sub	lr, lr, #4
    c370:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    c374:	ebfffb0e 	bl	afb4 <InterruptHandler>
    c378:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000c37c <FIQStub>:
    c37c:	e24ee004 	sub	lr, lr, #4
    c380:	e92d400f 	push	{r0, r1, r2, r3, lr}
    c384:	e59f2024 	ldr	r2, [pc, #36]	; c3b0 <FIQStub+0x34>
    c388:	e5921000 	ldr	r1, [r2]
    c38c:	e3510000 	cmp	r1, #0
    c390:	0a000002 	beq	c3a0 <FIQStub+0x24>
    c394:	e5920004 	ldr	r0, [r2, #4]
    c398:	e12fff31 	blx	r1
    c39c:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    c3a0:	e59f100c 	ldr	r1, [pc, #12]	; c3b4 <FIQStub+0x38>
    c3a4:	e3a00000 	mov	r0, #0
    c3a8:	e5810000 	str	r0, [r1]
    c3ac:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    c3b0:	0000cde0 	.word	0x0000cde0
    c3b4:	3f00b20c 	.word	0x3f00b20c

0000c3b8 <__Divide>:
    c3b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c3bc:	e2514000 	subs	r4, r1, #0
    c3c0:	e1a08000 	mov	r8, r0
    c3c4:	e1a09002 	mov	r9, r2
    c3c8:	0a000020 	beq	c450 <__Divide+0x98>
    c3cc:	e3a05000 	mov	r5, #0
    c3d0:	e3a07000 	mov	r7, #0
    c3d4:	e1550007 	cmp	r5, r7
    c3d8:	e1a06008 	mov	r6, r8
    c3dc:	01540008 	cmpeq	r4, r8
    c3e0:	2a00001e 	bcs	c460 <__Divide+0xa8>
    c3e4:	e3a03001 	mov	r3, #1
    c3e8:	ea000000 	b	c3f0 <__Divide+0x38>
    c3ec:	e1a03000 	mov	r3, r0
    c3f0:	e0944004 	adds	r4, r4, r4
    c3f4:	e2830001 	add	r0, r3, #1
    c3f8:	e0a55005 	adc	r5, r5, r5
    c3fc:	e1550007 	cmp	r5, r7
    c400:	01540006 	cmpeq	r4, r6
    c404:	3afffff8 	bcc	c3ec <__Divide+0x34>
    c408:	e3500000 	cmp	r0, #0
    c40c:	0a00000c 	beq	c444 <__Divide+0x8c>
    c410:	e3a00000 	mov	r0, #0
    c414:	e1570005 	cmp	r7, r5
    c418:	e2433001 	sub	r3, r3, #1
    c41c:	01560004 	cmpeq	r6, r4
    c420:	e1a00080 	lsl	r0, r0, #1
    c424:	20488004 	subcs	r8, r8, r4
    c428:	23800001 	orrcs	r0, r0, #1
    c42c:	e1b050a5 	lsrs	r5, r5, #1
    c430:	e1a04064 	rrx	r4, r4
    c434:	e3730001 	cmn	r3, #1
    c438:	e1a06008 	mov	r6, r8
    c43c:	e3a07000 	mov	r7, #0
    c440:	1afffff3 	bne	c414 <__Divide+0x5c>
    c444:	e3590000 	cmp	r9, #0
    c448:	15898000 	strne	r8, [r9]
    c44c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c450:	eb00007c 	bl	c648 <CExceptionHandler::Get()>
    c454:	e1a01004 	mov	r1, r4
    c458:	eb00003b 	bl	c54c <CExceptionHandler::Throw(unsigned int)>
    c45c:	eaffffda 	b	c3cc <__Divide+0x14>
    c460:	e3a03000 	mov	r3, #0
    c464:	eaffffe9 	b	c410 <__Divide+0x58>

0000c468 <__DivideInteger>:
    c468:	e2502000 	subs	r2, r0, #0
    c46c:	e92d4010 	push	{r4, lr}
    c470:	ba000004 	blt	c488 <__DivideInteger+0x20>
    c474:	e3510000 	cmp	r1, #0
    c478:	ba00000e 	blt	c4b8 <__DivideInteger+0x50>
    c47c:	e3a02000 	mov	r2, #0
    c480:	e8bd4010 	pop	{r4, lr}
    c484:	eaffffcb 	b	c3b8 <__Divide>
    c488:	e3510000 	cmp	r1, #0
    c48c:	ba000004 	blt	c4a4 <__DivideInteger+0x3c>
    c490:	e2620000 	rsb	r0, r2, #0
    c494:	e3a02000 	mov	r2, #0
    c498:	ebffffc6 	bl	c3b8 <__Divide>
    c49c:	e2600000 	rsb	r0, r0, #0
    c4a0:	e8bd8010 	pop	{r4, pc}
    c4a4:	e2620000 	rsb	r0, r2, #0
    c4a8:	e2611000 	rsb	r1, r1, #0
    c4ac:	e3a02000 	mov	r2, #0
    c4b0:	e8bd4010 	pop	{r4, lr}
    c4b4:	eaffffbf 	b	c3b8 <__Divide>
    c4b8:	e2611000 	rsb	r1, r1, #0
    c4bc:	e3a02000 	mov	r2, #0
    c4c0:	ebffffbc 	bl	c3b8 <__Divide>
    c4c4:	e2600000 	rsb	r0, r0, #0
    c4c8:	e8bd8010 	pop	{r4, pc}

0000c4cc <CExceptionHandler::CExceptionHandler()>:
    c4cc:	e59f1058 	ldr	r1, [pc, #88]	; c52c <CExceptionHandler::CExceptionHandler()+0x60>
    c4d0:	e3a0c000 	mov	ip, #0
    c4d4:	e59f2054 	ldr	r2, [pc, #84]	; c530 <CExceptionHandler::CExceptionHandler()+0x64>
    c4d8:	e59f3054 	ldr	r3, [pc, #84]	; c534 <CExceptionHandler::CExceptionHandler()+0x68>
    c4dc:	e92d4010 	push	{r4, lr}
    c4e0:	e1a01141 	asr	r1, r1, #2
    c4e4:	e30cee8c 	movw	lr, #52876	; 0xce8c
    c4e8:	e1a02142 	asr	r2, r2, #2
    c4ec:	e340e000 	movt	lr, #0
    c4f0:	e1a03143 	asr	r3, r3, #2
    c4f4:	e2411002 	sub	r1, r1, #2
    c4f8:	e2422002 	sub	r2, r2, #2
    c4fc:	e2433002 	sub	r3, r3, #2
    c500:	e58e0000 	str	r0, [lr]
    c504:	e1a04000 	mov	r4, r0
    c508:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    c50c:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    c510:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    c514:	e58c1004 	str	r1, [ip, #4]
    c518:	e58c200c 	str	r2, [ip, #12]
    c51c:	e58c3010 	str	r3, [ip, #16]
    c520:	ebfff202 	bl	8d30 <SyncDataAndInstructionCache>
    c524:	e1a00004 	mov	r0, r4
    c528:	e8bd8010 	pop	{r4, pc}
    c52c:	0000c2a8 	.word	0x0000c2a8
    c530:	0000c2e0 	.word	0x0000c2e0
    c534:	0000c31c 	.word	0x0000c31c

0000c538 <CExceptionHandler::~CExceptionHandler()>:
    c538:	e30c3e8c 	movw	r3, #52876	; 0xce8c
    c53c:	e3403000 	movt	r3, #0
    c540:	e3a02000 	mov	r2, #0
    c544:	e5832000 	str	r2, [r3]
    c548:	e12fff1e 	bx	lr

0000c54c <CExceptionHandler::Throw(unsigned int)>:
    c54c:	e92d4010 	push	{r4, lr}
    c550:	e24dd008 	sub	sp, sp, #8
    c554:	e1a04001 	mov	r4, r1
    c558:	ebfff51c 	bl	99d0 <CLogger::Get()>
    c55c:	e30c2de8 	movw	r2, #52712	; 0xcde8
    c560:	e3402000 	movt	r2, #0
    c564:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
    c568:	e30c1c34 	movw	r1, #52276	; 0xcc34
    c56c:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    c570:	e3403000 	movt	r3, #0
    c574:	e3401000 	movt	r1, #0
    c578:	e3a02000 	mov	r2, #0
    c57c:	e58dc000 	str	ip, [sp]
    c580:	ebfff5ee 	bl	9d40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c584:	e28dd008 	add	sp, sp, #8
    c588:	e8bd8010 	pop	{r4, pc}

0000c58c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    c58c:	e3510002 	cmp	r1, #2
    c590:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    c594:	e1a05001 	mov	r5, r1
    c598:	e24dd024 	sub	sp, sp, #36	; 0x24
    c59c:	e1a04002 	mov	r4, r2
    c5a0:	0a000025 	beq	c63c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
    c5a4:	e3510003 	cmp	r1, #3
    c5a8:	0a000020 	beq	c630 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
    c5ac:	e3a08000 	mov	r8, #0
    c5b0:	e1a09008 	mov	r9, r8
    c5b4:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c5b8:	e30c1c34 	movw	r1, #52276	; 0xcc34
    c5bc:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    c5c0:	e3401000 	movt	r1, #0
    c5c4:	e203301f 	and	r3, r3, #31
    c5c8:	e5947040 	ldr	r7, [r4, #64]	; 0x40
    c5cc:	e3530012 	cmp	r3, #18
    c5d0:	089400c0 	ldmeq	r4, {r6, r7}
    c5d4:	e1a00006 	mov	r0, r6
    c5d8:	eb000069 	bl	c784 <debug_stacktrace(unsigned int const*, char const*)>
    c5dc:	ebfff4fb 	bl	99d0 <CLogger::Get()>
    c5e0:	e30c3de8 	movw	r3, #52712	; 0xcde8
    c5e4:	e3403000 	movt	r3, #0
    c5e8:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    c5ec:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    c5f0:	e3a02000 	mov	r2, #0
    c5f4:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    c5f8:	e30c1c34 	movw	r1, #52276	; 0xcc34
    c5fc:	e58d7014 	str	r7, [sp, #20]
    c600:	e3401000 	movt	r1, #0
    c604:	e58d6010 	str	r6, [sp, #16]
    c608:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
    c60c:	e58d800c 	str	r8, [sp, #12]
    c610:	e3403000 	movt	r3, #0
    c614:	e58d9008 	str	r9, [sp, #8]
    c618:	e58d4000 	str	r4, [sp]
    c61c:	e58de018 	str	lr, [sp, #24]
    c620:	e58dc004 	str	ip, [sp, #4]
    c624:	ebfff5c5 	bl	9d40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c628:	e28dd024 	add	sp, sp, #36	; 0x24
    c62c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    c630:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
    c634:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
    c638:	eaffffdd 	b	c5b4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    c63c:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
    c640:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
    c644:	eaffffda 	b	c5b4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>

0000c648 <CExceptionHandler::Get()>:
    c648:	e30c3e8c 	movw	r3, #52876	; 0xce8c
    c64c:	e3403000 	movt	r3, #0
    c650:	e5930000 	ldr	r0, [r3]
    c654:	e12fff1e 	bx	lr

0000c658 <ExceptionHandler>:
    c658:	e30c3e8c 	movw	r3, #52876	; 0xce8c
    c65c:	e3403000 	movt	r3, #0
    c660:	e1a02001 	mov	r2, r1
    c664:	e1a01000 	mov	r1, r0
    c668:	e5930000 	ldr	r0, [r3]
    c66c:	eaffffc6 	b	c58c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000c670 <debug_hexdump(void const*, unsigned int, char const*)>:
    c670:	e3520000 	cmp	r2, #0
    c674:	e30c3cd4 	movw	r3, #52436	; 0xccd4
    c678:	e3403000 	movt	r3, #0
    c67c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c680:	11a03002 	movne	r3, r2
    c684:	e24dd054 	sub	sp, sp, #84	; 0x54
    c688:	e1a06003 	mov	r6, r3
    c68c:	e1a05001 	mov	r5, r1
    c690:	e1a04000 	mov	r4, r0
    c694:	e58d304c 	str	r3, [sp, #76]	; 0x4c
    c698:	ebfff4cc 	bl	99d0 <CLogger::Get()>
    c69c:	e58d4004 	str	r4, [sp, #4]
    c6a0:	e1a01006 	mov	r1, r6
    c6a4:	e58d5000 	str	r5, [sp]
    c6a8:	e30c3cdc 	movw	r3, #52444	; 0xccdc
    c6ac:	e3a02004 	mov	r2, #4
    c6b0:	e3403000 	movt	r3, #0
    c6b4:	ebfff5a1 	bl	9d40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c6b8:	e3550000 	cmp	r5, #0
    c6bc:	0a00002a 	beq	c76c <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    c6c0:	e30c9d00 	movw	r9, #52480	; 0xcd00
    c6c4:	e3409000 	movt	r9, #0
    c6c8:	ebfff4c0 	bl	99d0 <CLogger::Get()>
    c6cc:	e5d4800f 	ldrb	r8, [r4, #15]
    c6d0:	e5d4700e 	ldrb	r7, [r4, #14]
    c6d4:	e6ffc074 	uxth	ip, r4
    c6d8:	e5d4600d 	ldrb	r6, [r4, #13]
    c6dc:	e1a03009 	mov	r3, r9
    c6e0:	e5d4e00c 	ldrb	lr, [r4, #12]
    c6e4:	e3a02004 	mov	r2, #4
    c6e8:	e5d4b00b 	ldrb	fp, [r4, #11]
    c6ec:	e2844010 	add	r4, r4, #16
    c6f0:	e554a006 	ldrb	sl, [r4, #-6]
    c6f4:	e58d8040 	str	r8, [sp, #64]	; 0x40
    c6f8:	e5548007 	ldrb	r8, [r4, #-7]
    c6fc:	e58d703c 	str	r7, [sp, #60]	; 0x3c
    c700:	e5547008 	ldrb	r7, [r4, #-8]
    c704:	e58d6038 	str	r6, [sp, #56]	; 0x38
    c708:	e5546009 	ldrb	r6, [r4, #-9]
    c70c:	e58de034 	str	lr, [sp, #52]	; 0x34
    c710:	e554e00a 	ldrb	lr, [r4, #-10]
    c714:	e58db030 	str	fp, [sp, #48]	; 0x30
    c718:	e554b00b 	ldrb	fp, [r4, #-11]
    c71c:	e58da02c 	str	sl, [sp, #44]	; 0x2c
    c720:	e554a00c 	ldrb	sl, [r4, #-12]
    c724:	e58d8028 	str	r8, [sp, #40]	; 0x28
    c728:	e554800d 	ldrb	r8, [r4, #-13]
    c72c:	e58d7024 	str	r7, [sp, #36]	; 0x24
    c730:	e554700e 	ldrb	r7, [r4, #-14]
    c734:	e58d6020 	str	r6, [sp, #32]
    c738:	e554600f 	ldrb	r6, [r4, #-15]
    c73c:	e58de01c 	str	lr, [sp, #28]
    c740:	e554e010 	ldrb	lr, [r4, #-16]
    c744:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
    c748:	e58db018 	str	fp, [sp, #24]
    c74c:	e58da014 	str	sl, [sp, #20]
    c750:	e58d8010 	str	r8, [sp, #16]
    c754:	e58d700c 	str	r7, [sp, #12]
    c758:	e58d6008 	str	r6, [sp, #8]
    c75c:	e88d5000 	stm	sp, {ip, lr}
    c760:	ebfff576 	bl	9d40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c764:	e355000f 	cmp	r5, #15
    c768:	8a000001 	bhi	c774 <debug_hexdump(void const*, unsigned int, char const*)+0x104>
    c76c:	e28dd054 	add	sp, sp, #84	; 0x54
    c770:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c774:	e2555010 	subs	r5, r5, #16
    c778:	1affffd2 	bne	c6c8 <debug_hexdump(void const*, unsigned int, char const*)+0x58>
    c77c:	e28dd054 	add	sp, sp, #84	; 0x54
    c780:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c784 <debug_stacktrace(unsigned int const*, char const*)>:
    c784:	e3510000 	cmp	r1, #0
    c788:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c78c:	e30c7cd4 	movw	r7, #52436	; 0xccd4
    c790:	e30c6814 	movw	r6, #51220	; 0xc814
    c794:	e3407000 	movt	r7, #0
    c798:	e30c8d58 	movw	r8, #52568	; 0xcd58
    c79c:	e24dd008 	sub	sp, sp, #8
    c7a0:	11a07001 	movne	r7, r1
    c7a4:	e3406000 	movt	r6, #0
    c7a8:	e3408000 	movt	r8, #0
    c7ac:	e1a05000 	mov	r5, r0
    c7b0:	e3a04000 	mov	r4, #0
    c7b4:	ea000003 	b	c7c8 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    c7b8:	e2844001 	add	r4, r4, #1
    c7bc:	e2855004 	add	r5, r5, #4
    c7c0:	e3540040 	cmp	r4, #64	; 0x40
    c7c4:	0a000010 	beq	c80c <debug_stacktrace(unsigned int const*, char const*)+0x88>
    c7c8:	e5953000 	ldr	r3, [r5]
    c7cc:	e3530902 	cmp	r3, #32768	; 0x8000
    c7d0:	3afffff8 	bcc	c7b8 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c7d4:	e1530006 	cmp	r3, r6
    c7d8:	2afffff6 	bcs	c7b8 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c7dc:	ebfff47b 	bl	99d0 <CLogger::Get()>
    c7e0:	e595c000 	ldr	ip, [r5]
    c7e4:	e1a03008 	mov	r3, r8
    c7e8:	e58d4000 	str	r4, [sp]
    c7ec:	e3a02004 	mov	r2, #4
    c7f0:	e1a01007 	mov	r1, r7
    c7f4:	e58dc004 	str	ip, [sp, #4]
    c7f8:	e2844001 	add	r4, r4, #1
    c7fc:	ebfff54f 	bl	9d40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c800:	e3540040 	cmp	r4, #64	; 0x40
    c804:	e2855004 	add	r5, r5, #4
    c808:	1affffee 	bne	c7c8 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    c80c:	e28dd008 	add	sp, sp, #8
    c810:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
