
kernel7.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea0003c0 	b	8f68 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

00008070 <main>:
    8070:	e92d4010 	push	{r4, lr}
    8074:	e24ddd66 	sub	sp, sp, #6528	; 0x1980
    8078:	e24dd030 	sub	sp, sp, #48	; 0x30
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb000014 	bl	80d8 <CKernel::CKernel()>
    8084:	e1a0000d 	mov	r0, sp
    8088:	eb00003d 	bl	8184 <CKernel::Initialize()>
    808c:	e2504000 	subs	r4, r0, #0
    8090:	0a00000e 	beq	80d0 <main+0x60>
    8094:	e1a0000d 	mov	r0, sp
    8098:	eb00006e 	bl	8258 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	0a000007 	beq	80c4 <main+0x54>
    80a4:	eb0003a1 	bl	8f30 <halt>
    80a8:	e3a04000 	mov	r4, #0
    80ac:	e1a0000d 	mov	r0, sp
    80b0:	eb000052 	bl	8200 <CKernel::~CKernel()>
    80b4:	e1a00004 	mov	r0, r4
    80b8:	e28ddd66 	add	sp, sp, #6528	; 0x1980
    80bc:	e28dd030 	add	sp, sp, #48	; 0x30
    80c0:	e8bd8010 	pop	{r4, pc}
    80c4:	eb00039e 	bl	8f44 <reboot>
    80c8:	e3a04001 	mov	r4, #1
    80cc:	eafffff6 	b	80ac <main+0x3c>
    80d0:	eb000396 	bl	8f30 <halt>
    80d4:	eafffff4 	b	80ac <main+0x3c>

000080d8 <CKernel::CKernel()>:
    80d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80dc:	e2806010 	add	r6, r0, #16
    80e0:	e3a01001 	mov	r1, #1
    80e4:	e280501c 	add	r5, r0, #28
    80e8:	e1a04000 	mov	r4, r0
    80ec:	eb000338 	bl	8dd4 <CMemorySystem::CMemorySystem(int)>
    80f0:	e1a00006 	mov	r0, r6
    80f4:	eb0000c7 	bl	8418 <CActLED::CActLED()>
    80f8:	e1a00005 	mov	r0, r5
    80fc:	eb000666 	bl	9a9c <CKernelOptions::CKernelOptions()>
    8100:	e2840e85 	add	r0, r4, #2128	; 0x850
    8104:	e280000c 	add	r0, r0, #12
    8108:	eb000cda 	bl	b478 <CDeviceNameService::CDeviceNameService()>
    810c:	e1a00005 	mov	r0, r5
    8110:	eb00062d 	bl	99cc <CKernelOptions::GetWidth() const>
    8114:	e1a07000 	mov	r7, r0
    8118:	e1a00005 	mov	r0, r5
    811c:	eb00062c 	bl	99d4 <CKernelOptions::GetHeight() const>
    8120:	e3a03000 	mov	r3, #0
    8124:	e1a01007 	mov	r1, r7
    8128:	e1a02000 	mov	r2, r0
    812c:	e2840e86 	add	r0, r4, #2144	; 0x860
    8130:	e2800004 	add	r0, r0, #4
    8134:	eb00080d 	bl	a170 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8138:	e3a02000 	mov	r2, #0
    813c:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8140:	e1a01002 	mov	r1, r2
    8144:	e2800004 	add	r0, r0, #4
    8148:	eb000eb2 	bl	bc18 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>
    814c:	e1a00005 	mov	r0, r5
    8150:	eb000624 	bl	99e8 <CKernelOptions::GetLogLevel() const>
    8154:	e3a02000 	mov	r2, #0
    8158:	e1a01000 	mov	r1, r0
    815c:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8160:	e2800014 	add	r0, r0, #20
    8164:	eb000d31 	bl	b630 <CLogger::CLogger(unsigned int, CTimer*)>
    8168:	e1a00006 	mov	r0, r6
    816c:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8170:	e3a020c8 	mov	r2, #200	; 0xc8
    8174:	e3a01005 	mov	r1, #5
    8178:	eb0000ed 	bl	8534 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    817c:	e1a00004 	mov	r0, r4
    8180:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008184 <CKernel::Initialize()>:
    8184:	e92d4070 	push	{r4, r5, r6, lr}
    8188:	e2804e86 	add	r4, r0, #2144	; 0x860
    818c:	e2844004 	add	r4, r4, #4
    8190:	e1a05000 	mov	r5, r0
    8194:	e1a00004 	mov	r0, r4
    8198:	eb000ba2 	bl	b028 <CScreenDevice::Initialize()>
    819c:	e3500000 	cmp	r0, #0
    81a0:	1a000001 	bne	81ac <CKernel::Initialize()+0x28>
    81a4:	e3a00000 	mov	r0, #0
    81a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    81ac:	e2850d23 	add	r0, r5, #2240	; 0x8c0
    81b0:	e3a01cc2 	mov	r1, #49664	; 0xc200
    81b4:	e2800004 	add	r0, r0, #4
    81b8:	e3401001 	movt	r1, #1
    81bc:	eb000ec4 	bl	bcd4 <CSerialDevice::Initialize(unsigned int)>
    81c0:	e3500000 	cmp	r0, #0
    81c4:	0afffff6 	beq	81a4 <CKernel::Initialize()+0x20>
    81c8:	e285001c 	add	r0, r5, #28
    81cc:	eb000602 	bl	99dc <CKernelOptions::GetLogDevice() const>
    81d0:	e3a02000 	mov	r2, #0
    81d4:	e1a01000 	mov	r1, r0
    81d8:	e2850e85 	add	r0, r5, #2128	; 0x850
    81dc:	e280000c 	add	r0, r0, #12
    81e0:	eb000ce3 	bl	b574 <CDeviceNameService::GetDevice(char const*, int)>
    81e4:	e3500000 	cmp	r0, #0
    81e8:	11a01000 	movne	r1, r0
    81ec:	e2850d66 	add	r0, r5, #6528	; 0x1980
    81f0:	01a01004 	moveq	r1, r4
    81f4:	e2800014 	add	r0, r0, #20
    81f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    81fc:	ea000e12 	b	ba4c <CLogger::Initialize(CDevice*)>

00008200 <CKernel::~CKernel()>:
    8200:	e92d4010 	push	{r4, lr}
    8204:	e1a04000 	mov	r4, r0
    8208:	e2800d66 	add	r0, r0, #6528	; 0x1980
    820c:	e2800014 	add	r0, r0, #20
    8210:	eb000d19 	bl	b67c <CLogger::~CLogger()>
    8214:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8218:	e2800004 	add	r0, r0, #4
    821c:	eb000ffb 	bl	c210 <CSerialDevice::~CSerialDevice()>
    8220:	e2840e86 	add	r0, r4, #2144	; 0x860
    8224:	e2800004 	add	r0, r0, #4
    8228:	eb000783 	bl	a03c <CScreenDevice::~CScreenDevice()>
    822c:	e2840e85 	add	r0, r4, #2128	; 0x850
    8230:	e280000c 	add	r0, r0, #12
    8234:	eb000c96 	bl	b494 <CDeviceNameService::~CDeviceNameService()>
    8238:	e284001c 	add	r0, r4, #28
    823c:	eb0005dd 	bl	99b8 <CKernelOptions::~CKernelOptions()>
    8240:	e2840010 	add	r0, r4, #16
    8244:	eb00004e 	bl	8384 <CActLED::~CActLED()>
    8248:	e1a00004 	mov	r0, r4
    824c:	eb0002a3 	bl	8ce0 <CMemorySystem::~CMemorySystem()>
    8250:	e1a00004 	mov	r0, r4
    8254:	e8bd8010 	pop	{r4, pc}

00008258 <CKernel::Run()>:
    8258:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    825c:	e2809d66 	add	r9, r0, #6528	; 0x1980
    8260:	e2899014 	add	r9, r9, #20
    8264:	e1a06000 	mov	r6, r0
    8268:	e24dd014 	sub	sp, sp, #20
    826c:	e30e3f80 	movw	r3, #61312	; 0xef80
    8270:	e30e1f78 	movw	r1, #61304	; 0xef78
    8274:	e3403000 	movt	r3, #0
    8278:	e1a00009 	mov	r0, r9
    827c:	e3401000 	movt	r1, #0
    8280:	e3a02003 	mov	r2, #3
    8284:	e2866e86 	add	r6, r6, #2144	; 0x860
    8288:	e30e8fa4 	movw	r8, #61348	; 0xefa4
    828c:	e30e7fa8 	movw	r7, #61352	; 0xefa8
    8290:	eb000de1 	bl	ba1c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8294:	e2866004 	add	r6, r6, #4
    8298:	e3408000 	movt	r8, #0
    829c:	e3407000 	movt	r7, #0
    82a0:	e3a04020 	mov	r4, #32
    82a4:	ea000014 	b	82fc <CKernel::Run()+0xa4>
    82a8:	e1a0000d 	mov	r0, sp
    82ac:	eb001036 	bl	c38c <CString::CString()>
    82b0:	e1a03004 	mov	r3, r4
    82b4:	e1a02004 	mov	r2, r4
    82b8:	e1a01007 	mov	r1, r7
    82bc:	e1a0000d 	mov	r0, sp
    82c0:	e2844001 	add	r4, r4, #1
    82c4:	eb00138f 	bl	d108 <CString::Format(char const*, ...)>
    82c8:	e1a0000d 	mov	r0, sp
    82cc:	eb001045 	bl	c3e8 <CString::operator char const*() const>
    82d0:	e1a05000 	mov	r5, r0
    82d4:	e1a0000d 	mov	r0, sp
    82d8:	eb001059 	bl	c444 <CString::GetLength() const>
    82dc:	e1a01005 	mov	r1, r5
    82e0:	e1a02000 	mov	r2, r0
    82e4:	e1a00006 	mov	r0, r6
    82e8:	eb000b1e 	bl	af68 <CScreenDevice::Write(void const*, unsigned int)>
    82ec:	e1a0000d 	mov	r0, sp
    82f0:	eb000ff2 	bl	c2c0 <CString::~CString()>
    82f4:	e354007f 	cmp	r4, #127	; 0x7f
    82f8:	0a000006 	beq	8318 <CKernel::Run()+0xc0>
    82fc:	e3140007 	tst	r4, #7
    8300:	1affffe8 	bne	82a8 <CKernel::Run()+0x50>
    8304:	e3a02001 	mov	r2, #1
    8308:	e1a01008 	mov	r1, r8
    830c:	e1a00006 	mov	r0, r6
    8310:	eb000b14 	bl	af68 <CScreenDevice::Write(void const*, unsigned int)>
    8314:	eaffffe3 	b	82a8 <CKernel::Run()+0x50>
    8318:	e1a00006 	mov	r0, r6
    831c:	e3a02001 	mov	r2, #1
    8320:	e30e1fa4 	movw	r1, #61348	; 0xefa4
    8324:	e3401000 	movt	r1, #0
    8328:	eb000b0e 	bl	af68 <CScreenDevice::Write(void const*, unsigned int)>
    832c:	e1a00009 	mov	r0, r9
    8330:	e3a02004 	mov	r2, #4
    8334:	e30e3fb4 	movw	r3, #61364	; 0xefb4
    8338:	e30e1f78 	movw	r1, #61304	; 0xef78
    833c:	e3403000 	movt	r3, #0
    8340:	e3401000 	movt	r1, #0
    8344:	eb000db4 	bl	ba1c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8348:	e3a01080 	mov	r1, #128	; 0x80
    834c:	e3a00c01 	mov	r0, #256	; 0x100
    8350:	e30e2f78 	movw	r2, #61304	; 0xef78
    8354:	e3402000 	movt	r2, #0
    8358:	eb000bdd 	bl	b2d4 <debug_hexdump(void const*, unsigned int, char const*)>
    835c:	e1a00009 	mov	r0, r9
    8360:	e3a02003 	mov	r2, #3
    8364:	e30e3fd4 	movw	r3, #61396	; 0xefd4
    8368:	e30e1f78 	movw	r1, #61304	; 0xef78
    836c:	e3403000 	movt	r3, #0
    8370:	e3401000 	movt	r1, #0
    8374:	eb000da8 	bl	ba1c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8378:	e3a00001 	mov	r0, #1
    837c:	e28dd014 	add	sp, sp, #20
    8380:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

00008384 <CActLED::~CActLED()>:
    8384:	e3003500 	movw	r3, #1280	; 0x500
    8388:	e3403001 	movt	r3, #1
    838c:	e3a02000 	mov	r2, #0
    8390:	e5832000 	str	r2, [r3]
    8394:	e12fff1e 	bx	lr

00008398 <CActLED::On()>:
    8398:	e5903000 	ldr	r3, [r0]
    839c:	e3530000 	cmp	r3, #0
    83a0:	0a000004 	beq	83b8 <CActLED::On()+0x20>
    83a4:	e5901008 	ldr	r1, [r0, #8]
    83a8:	e1a00003 	mov	r0, r3
    83ac:	e2911000 	adds	r1, r1, #0
    83b0:	13a01001 	movne	r1, #1
    83b4:	ea0000bf 	b	86b8 <CGPIOPin::Write(unsigned int)>
    83b8:	e5903004 	ldr	r3, [r0, #4]
    83bc:	e3530000 	cmp	r3, #0
    83c0:	012fff1e 	bxeq	lr
    83c4:	e5901008 	ldr	r1, [r0, #8]
    83c8:	e1a00003 	mov	r0, r3
    83cc:	e2911000 	adds	r1, r1, #0
    83d0:	13a01001 	movne	r1, #1
    83d4:	ea0014ef 	b	d798 <CVirtualGPIOPin::Write(unsigned int)>

000083d8 <CActLED::Off()>:
    83d8:	e5903000 	ldr	r3, [r0]
    83dc:	e3530000 	cmp	r3, #0
    83e0:	0a000004 	beq	83f8 <CActLED::Off()+0x20>
    83e4:	e5901008 	ldr	r1, [r0, #8]
    83e8:	e1a00003 	mov	r0, r3
    83ec:	e16f1f11 	clz	r1, r1
    83f0:	e1a012a1 	lsr	r1, r1, #5
    83f4:	ea0000af 	b	86b8 <CGPIOPin::Write(unsigned int)>
    83f8:	e5903004 	ldr	r3, [r0, #4]
    83fc:	e3530000 	cmp	r3, #0
    8400:	012fff1e 	bxeq	lr
    8404:	e5901008 	ldr	r1, [r0, #8]
    8408:	e1a00003 	mov	r0, r3
    840c:	e16f1f11 	clz	r1, r1
    8410:	e1a012a1 	lsr	r1, r1, #5
    8414:	ea0014df 	b	d798 <CVirtualGPIOPin::Write(unsigned int)>

00008418 <CActLED::CActLED()>:
    8418:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    841c:	e3003500 	movw	r3, #1280	; 0x500
    8420:	e24dd024 	sub	sp, sp, #36	; 0x24
    8424:	e1a04000 	mov	r4, r0
    8428:	e3403001 	movt	r3, #1
    842c:	e3a05000 	mov	r5, #0
    8430:	e28d0008 	add	r0, sp, #8
    8434:	e5845000 	str	r5, [r4]
    8438:	e5845004 	str	r5, [r4, #4]
    843c:	e5834000 	str	r4, [r3]
    8440:	eb000052 	bl	8590 <CBcmPropertyTags::CBcmPropertyTags()>
    8444:	e3a03010 	mov	r3, #16
    8448:	e58d5000 	str	r5, [sp]
    844c:	e28d0008 	add	r0, sp, #8
    8450:	e3a01002 	mov	r1, #2
    8454:	e08d2003 	add	r2, sp, r3
    8458:	e3401001 	movt	r1, #1
    845c:	eb000077 	bl	8640 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8460:	e1500005 	cmp	r0, r5
    8464:	0a000011 	beq	84b0 <CActLED::CActLED()+0x98>
    8468:	e59d301c 	ldr	r3, [sp, #28]
    846c:	e3130502 	tst	r3, #8388608	; 0x800000
    8470:	1a000013 	bne	84c4 <CActLED::CActLED()+0xac>
    8474:	e6ff3073 	uxth	r3, r3
    8478:	e353000f 	cmp	r3, #15
    847c:	83a06001 	movhi	r6, #1
    8480:	9a000020 	bls	8508 <CActLED::CActLED()+0xf0>
    8484:	e3a00028 	mov	r0, #40	; 0x28
    8488:	eb000281 	bl	8e94 <operator new(unsigned int)>
    848c:	e3a03000 	mov	r3, #0
    8490:	e3a02001 	mov	r2, #1
    8494:	e3a0102f 	mov	r1, #47	; 0x2f
    8498:	e1a05000 	mov	r5, r0
    849c:	eb0001be 	bl	8b9c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    84a0:	e5845000 	str	r5, [r4]
    84a4:	e5846008 	str	r6, [r4, #8]
    84a8:	e1a00004 	mov	r0, r4
    84ac:	ebffffc9 	bl	83d8 <CActLED::Off()>
    84b0:	e28d0008 	add	r0, sp, #8
    84b4:	eb00003b 	bl	85a8 <CBcmPropertyTags::~CBcmPropertyTags()>
    84b8:	e1a00004 	mov	r0, r4
    84bc:	e28dd024 	add	sp, sp, #36	; 0x24
    84c0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    84c4:	e7e73253 	ubfx	r3, r3, #4, #8
    84c8:	e3530001 	cmp	r3, #1
    84cc:	9a00000d 	bls	8508 <CActLED::CActLED()+0xf0>
    84d0:	e353000c 	cmp	r3, #12
    84d4:	13530009 	cmpne	r3, #9
    84d8:	03a06001 	moveq	r6, #1
    84dc:	13a06000 	movne	r6, #0
    84e0:	e3530008 	cmp	r3, #8
    84e4:	e2266001 	eor	r6, r6, #1
    84e8:	1affffe5 	bne	8484 <CActLED::CActLED()+0x6c>
    84ec:	e3a00010 	mov	r0, #16
    84f0:	eb000267 	bl	8e94 <operator new(unsigned int)>
    84f4:	e1a01005 	mov	r1, r5
    84f8:	e1a07000 	mov	r7, r0
    84fc:	eb001469 	bl	d6a8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    8500:	e5847004 	str	r7, [r4, #4]
    8504:	eaffffe6 	b	84a4 <CActLED::CActLED()+0x8c>
    8508:	e3a00028 	mov	r0, #40	; 0x28
    850c:	eb000260 	bl	8e94 <operator new(unsigned int)>
    8510:	e3a03000 	mov	r3, #0
    8514:	e3a02001 	mov	r2, #1
    8518:	e3a01010 	mov	r1, #16
    851c:	e1a05000 	mov	r5, r0
    8520:	eb00019d 	bl	8b9c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8524:	e3a03000 	mov	r3, #0
    8528:	e5845000 	str	r5, [r4]
    852c:	e5843008 	str	r3, [r4, #8]
    8530:	eaffffdc 	b	84a8 <CActLED::CActLED()+0x90>

00008534 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8534:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8538:	e2516000 	subs	r6, r1, #0
    853c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8540:	e1a08003 	mov	r8, r3
    8544:	e1a07002 	mov	r7, r2
    8548:	e1a05000 	mov	r5, r0
    854c:	e3a04001 	mov	r4, #1
    8550:	e1a00005 	mov	r0, r5
    8554:	e2844001 	add	r4, r4, #1
    8558:	ebffff8e 	bl	8398 <CActLED::On()>
    855c:	e1a00007 	mov	r0, r7
    8560:	eb000499 	bl	97cc <CTimer::SimpleMsDelay(unsigned int)>
    8564:	e1a00005 	mov	r0, r5
    8568:	ebffff9a 	bl	83d8 <CActLED::Off()>
    856c:	e1a00008 	mov	r0, r8
    8570:	eb000495 	bl	97cc <CTimer::SimpleMsDelay(unsigned int)>
    8574:	e1560004 	cmp	r6, r4
    8578:	2afffff4 	bcs	8550 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    857c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008580 <CActLED::Get()>:
    8580:	e3003500 	movw	r3, #1280	; 0x500
    8584:	e3403001 	movt	r3, #1
    8588:	e5930000 	ldr	r0, [r3]
    858c:	e12fff1e 	bx	lr

00008590 <CBcmPropertyTags::CBcmPropertyTags()>:
    8590:	e92d4010 	push	{r4, lr}
    8594:	e3a01008 	mov	r1, #8
    8598:	e1a04000 	mov	r4, r0
    859c:	eb00170e 	bl	e1dc <CBcmMailBox::CBcmMailBox(unsigned int)>
    85a0:	e1a00004 	mov	r0, r4
    85a4:	e8bd8010 	pop	{r4, pc}

000085a8 <CBcmPropertyTags::~CBcmPropertyTags()>:
    85a8:	e92d4010 	push	{r4, lr}
    85ac:	e1a04000 	mov	r4, r0
    85b0:	eb00170c 	bl	e1e8 <CBcmMailBox::~CBcmMailBox()>
    85b4:	e1a00004 	mov	r0, r4
    85b8:	e8bd8010 	pop	{r4, pc}

000085bc <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    85bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    85c0:	e3a04008 	mov	r4, #8
    85c4:	e3404040 	movt	r4, #64	; 0x40
    85c8:	e3a05501 	mov	r5, #4194304	; 0x400000
    85cc:	e1a06002 	mov	r6, r2
    85d0:	e282300c 	add	r3, r2, #12
    85d4:	e3a07000 	mov	r7, #0
    85d8:	e1a08000 	mov	r8, r0
    85dc:	e5853000 	str	r3, [r5]
    85e0:	e1a00004 	mov	r0, r4
    85e4:	e5857004 	str	r7, [r5, #4]
    85e8:	e1a09001 	mov	r9, r1
    85ec:	eb0004c4 	bl	9904 <memcpy>
    85f0:	e7847006 	str	r7, [r4, r6]
    85f4:	f57ff04f 	dsb	sy
    85f8:	e1a01007 	mov	r1, r7
    85fc:	e1a00008 	mov	r0, r8
    8600:	e34c1040 	movt	r1, #49216	; 0xc040
    8604:	eb0016f8 	bl	e1ec <CBcmMailBox::WriteRead(unsigned int)>
    8608:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    860c:	0a000001 	beq	8618 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x5c>
    8610:	e3a00000 	mov	r0, #0
    8614:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8618:	f57ff05f 	dmb	sy
    861c:	e5953004 	ldr	r3, [r5, #4]
    8620:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    8624:	1afffff9 	bne	8610 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x54>
    8628:	e1a02006 	mov	r2, r6
    862c:	e1a01004 	mov	r1, r4
    8630:	e1a00009 	mov	r0, r9
    8634:	eb0004b2 	bl	9904 <memcpy>
    8638:	e3a00001 	mov	r0, #1
    863c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00008640 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    8640:	e92d4010 	push	{r4, lr}
    8644:	e1a04002 	mov	r4, r2
    8648:	e59dc008 	ldr	ip, [sp, #8]
    864c:	e5821000 	str	r1, [r2]
    8650:	e243100c 	sub	r1, r3, #12
    8654:	e3ccc102 	bic	ip, ip, #-2147483648	; 0x80000000
    8658:	e5841004 	str	r1, [r4, #4]
    865c:	e1a02003 	mov	r2, r3
    8660:	e1a01004 	mov	r1, r4
    8664:	e584c008 	str	ip, [r4, #8]
    8668:	ebffffd3 	bl	85bc <CBcmPropertyTags::GetTags(void*, unsigned int)>
    866c:	e3500000 	cmp	r0, #0
    8670:	08bd8010 	popeq	{r4, pc}
    8674:	e5940008 	ldr	r0, [r4, #8]
    8678:	e3500000 	cmp	r0, #0
    867c:	ba000001 	blt	8688 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x48>
    8680:	e3a00000 	mov	r0, #0
    8684:	e8bd8010 	pop	{r4, pc}
    8688:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    868c:	e5840008 	str	r0, [r4, #8]
    8690:	e2900000 	adds	r0, r0, #0
    8694:	13a00001 	movne	r0, #1
    8698:	e8bd8010 	pop	{r4, pc}

0000869c <CGPIOPin::~CGPIOPin()>:
    869c:	e12fff1e 	bx	lr

000086a0 <CGPIOPin::~CGPIOPin()>:
    86a0:	e92d4010 	push	{r4, lr}
    86a4:	e3a01028 	mov	r1, #40	; 0x28
    86a8:	e1a04000 	mov	r4, r0
    86ac:	eb0001fc 	bl	8ea4 <operator delete(void*, unsigned int)>
    86b0:	e1a00004 	mov	r0, r4
    86b4:	e8bd8010 	pop	{r4, pc}

000086b8 <CGPIOPin::Write(unsigned int)>:
    86b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    86bc:	e3a02028 	mov	r2, #40	; 0x28
    86c0:	e590e00c 	ldr	lr, [r0, #12]
    86c4:	e3432f20 	movt	r2, #16160	; 0x3f20
    86c8:	e590c008 	ldr	ip, [r0, #8]
    86cc:	e3510000 	cmp	r1, #0
    86d0:	e3a0301c 	mov	r3, #28
    86d4:	e3433f20 	movt	r3, #16160	; 0x3f20
    86d8:	01a03002 	moveq	r3, r2
    86dc:	e5801014 	str	r1, [r0, #20]
    86e0:	e783e00c 	str	lr, [r3, ip]
    86e4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000086e8 <CGPIOPin::Read() const>:
    86e8:	e5901008 	ldr	r1, [r0, #8]
    86ec:	e3a03034 	mov	r3, #52	; 0x34
    86f0:	e3433f20 	movt	r3, #16160	; 0x3f20
    86f4:	e590200c 	ldr	r2, [r0, #12]
    86f8:	e7913003 	ldr	r3, [r1, r3]
    86fc:	e1130002 	tst	r3, r2
    8700:	13a00001 	movne	r0, #1
    8704:	03a00000 	moveq	r0, #0
    8708:	e12fff1e 	bx	lr

0000870c <CGPIOPin::Invert()>:
    870c:	e5902014 	ldr	r2, [r0, #20]
    8710:	e3a01028 	mov	r1, #40	; 0x28
    8714:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8718:	e3520001 	cmp	r2, #1
    871c:	e590e00c 	ldr	lr, [r0, #12]
    8720:	e3431f20 	movt	r1, #16160	; 0x3f20
    8724:	e590c008 	ldr	ip, [r0, #8]
    8728:	e3a0301c 	mov	r3, #28
    872c:	e3433f20 	movt	r3, #16160	; 0x3f20
    8730:	01a03001 	moveq	r3, r1
    8734:	e2222001 	eor	r2, r2, #1
    8738:	e5802014 	str	r2, [r0, #20]
    873c:	e783e00c 	str	lr, [r3, ip]
    8740:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008744 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    8744:	e580101c 	str	r1, [r0, #28]
    8748:	e1a01000 	mov	r1, r0
    874c:	e5802020 	str	r2, [r0, #32]
    8750:	e5900018 	ldr	r0, [r0, #24]
    8754:	ea00137a 	b	d544 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>

00008758 <CGPIOPin::DisconnectInterrupt()>:
    8758:	e1a01000 	mov	r1, r0
    875c:	e3a03000 	mov	r3, #0
    8760:	e580301c 	str	r3, [r0, #28]
    8764:	e5900018 	ldr	r0, [r0, #24]
    8768:	ea001379 	b	d554 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>

0000876c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    876c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8770:	e3005504 	movw	r5, #1284	; 0x504
    8774:	e3405001 	movt	r5, #1
    8778:	e1a07000 	mov	r7, r0
    877c:	e5973008 	ldr	r3, [r7, #8]
    8780:	e3a0600c 	mov	r6, #12
    8784:	e5950000 	ldr	r0, [r5]
    8788:	e3a0404c 	mov	r4, #76	; 0x4c
    878c:	e3434f20 	movt	r4, #16160	; 0x3f20
    8790:	e5c71024 	strb	r1, [r7, #36]	; 0x24
    8794:	e3500000 	cmp	r0, #0
    8798:	e0834004 	add	r4, r3, r4
    879c:	e0060196 	mul	r6, r6, r1
    87a0:	1a000008 	bne	87c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x5c>
    87a4:	e597200c 	ldr	r2, [r7, #12]
    87a8:	e7943006 	ldr	r3, [r4, r6]
    87ac:	e1833002 	orr	r3, r3, r2
    87b0:	e7843006 	str	r3, [r4, r6]
    87b4:	e5953000 	ldr	r3, [r5]
    87b8:	e3530000 	cmp	r3, #0
    87bc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    87c0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    87c4:	ea0001c6 	b	8ee4 <LeaveCritical>
    87c8:	eb0001b7 	bl	8eac <EnterCritical>
    87cc:	eafffff4 	b	87a4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>

000087d0 <CGPIOPin::DisableInterrupt()>:
    87d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    87d4:	e3006504 	movw	r6, #1284	; 0x504
    87d8:	e3406001 	movt	r6, #1
    87dc:	e1a05000 	mov	r5, r0
    87e0:	e5d52024 	ldrb	r2, [r5, #36]	; 0x24
    87e4:	e3a0700c 	mov	r7, #12
    87e8:	e5960000 	ldr	r0, [r6]
    87ec:	e3a0404c 	mov	r4, #76	; 0x4c
    87f0:	e5953008 	ldr	r3, [r5, #8]
    87f4:	e3434f20 	movt	r4, #16160	; 0x3f20
    87f8:	e3500000 	cmp	r0, #0
    87fc:	e0070297 	mul	r7, r7, r2
    8800:	e0834004 	add	r4, r3, r4
    8804:	1a00000a 	bne	8834 <CGPIOPin::DisableInterrupt()+0x64>
    8808:	e7973004 	ldr	r3, [r7, r4]
    880c:	e595200c 	ldr	r2, [r5, #12]
    8810:	e1c33002 	bic	r3, r3, r2
    8814:	e7873004 	str	r3, [r7, r4]
    8818:	e5963000 	ldr	r3, [r6]
    881c:	e3530000 	cmp	r3, #0
    8820:	0a000000 	beq	8828 <CGPIOPin::DisableInterrupt()+0x58>
    8824:	eb0001ae 	bl	8ee4 <LeaveCritical>
    8828:	e3a03006 	mov	r3, #6
    882c:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    8830:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8834:	eb00019c 	bl	8eac <EnterCritical>
    8838:	eafffff2 	b	8808 <CGPIOPin::DisableInterrupt()+0x38>

0000883c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    883c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8840:	e3005504 	movw	r5, #1284	; 0x504
    8844:	e3405001 	movt	r5, #1
    8848:	e1a07000 	mov	r7, r0
    884c:	e5973008 	ldr	r3, [r7, #8]
    8850:	e3a0600c 	mov	r6, #12
    8854:	e5950000 	ldr	r0, [r5]
    8858:	e3a0404c 	mov	r4, #76	; 0x4c
    885c:	e3434f20 	movt	r4, #16160	; 0x3f20
    8860:	e5c71025 	strb	r1, [r7, #37]	; 0x25
    8864:	e3500000 	cmp	r0, #0
    8868:	e0834004 	add	r4, r3, r4
    886c:	e0060196 	mul	r6, r6, r1
    8870:	1a000008 	bne	8898 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x5c>
    8874:	e597200c 	ldr	r2, [r7, #12]
    8878:	e7943006 	ldr	r3, [r4, r6]
    887c:	e1833002 	orr	r3, r3, r2
    8880:	e7843006 	str	r3, [r4, r6]
    8884:	e5953000 	ldr	r3, [r5]
    8888:	e3530000 	cmp	r3, #0
    888c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8890:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8894:	ea000192 	b	8ee4 <LeaveCritical>
    8898:	eb000183 	bl	8eac <EnterCritical>
    889c:	eafffff4 	b	8874 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>

000088a0 <CGPIOPin::DisableInterrupt2()>:
    88a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    88a4:	e3006504 	movw	r6, #1284	; 0x504
    88a8:	e3406001 	movt	r6, #1
    88ac:	e1a05000 	mov	r5, r0
    88b0:	e5d52025 	ldrb	r2, [r5, #37]	; 0x25
    88b4:	e3a0700c 	mov	r7, #12
    88b8:	e5960000 	ldr	r0, [r6]
    88bc:	e3a0404c 	mov	r4, #76	; 0x4c
    88c0:	e5953008 	ldr	r3, [r5, #8]
    88c4:	e3434f20 	movt	r4, #16160	; 0x3f20
    88c8:	e3500000 	cmp	r0, #0
    88cc:	e0070297 	mul	r7, r7, r2
    88d0:	e0834004 	add	r4, r3, r4
    88d4:	1a00000a 	bne	8904 <CGPIOPin::DisableInterrupt2()+0x64>
    88d8:	e7973004 	ldr	r3, [r7, r4]
    88dc:	e595200c 	ldr	r2, [r5, #12]
    88e0:	e1c33002 	bic	r3, r3, r2
    88e4:	e7873004 	str	r3, [r7, r4]
    88e8:	e5963000 	ldr	r3, [r6]
    88ec:	e3530000 	cmp	r3, #0
    88f0:	0a000000 	beq	88f8 <CGPIOPin::DisableInterrupt2()+0x58>
    88f4:	eb00017a 	bl	8ee4 <LeaveCritical>
    88f8:	e3a03006 	mov	r3, #6
    88fc:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    8900:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8904:	eb000168 	bl	8eac <EnterCritical>
    8908:	eafffff2 	b	88d8 <CGPIOPin::DisableInterrupt2()+0x38>

0000890c <CGPIOPin::ReadAll()>:
    890c:	e3a03000 	mov	r3, #0
    8910:	e3433f20 	movt	r3, #16160	; 0x3f20
    8914:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    8918:	e12fff1e 	bx	lr

0000891c <CGPIOPin::SetPullUpMode(unsigned int)>:
    891c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8920:	e3005504 	movw	r5, #1284	; 0x504
    8924:	e3405001 	movt	r5, #1
    8928:	e1a07000 	mov	r7, r0
    892c:	e5973008 	ldr	r3, [r7, #8]
    8930:	e3a04098 	mov	r4, #152	; 0x98
    8934:	e5950000 	ldr	r0, [r5]
    8938:	e3434f20 	movt	r4, #16160	; 0x3f20
    893c:	e1a08001 	mov	r8, r1
    8940:	e0834004 	add	r4, r3, r4
    8944:	e3500000 	cmp	r0, #0
    8948:	1a000010 	bne	8990 <CGPIOPin::SetPullUpMode(unsigned int)+0x74>
    894c:	e3a06000 	mov	r6, #0
    8950:	e3436f20 	movt	r6, #16160	; 0x3f20
    8954:	e3a00005 	mov	r0, #5
    8958:	e5868094 	str	r8, [r6, #148]	; 0x94
    895c:	eb0003a9 	bl	9808 <CTimer::SimpleusDelay(unsigned int)>
    8960:	e597300c 	ldr	r3, [r7, #12]
    8964:	e3a00005 	mov	r0, #5
    8968:	e5843000 	str	r3, [r4]
    896c:	eb0003a5 	bl	9808 <CTimer::SimpleusDelay(unsigned int)>
    8970:	e3a03000 	mov	r3, #0
    8974:	e5863094 	str	r3, [r6, #148]	; 0x94
    8978:	e5843000 	str	r3, [r4]
    897c:	e5953000 	ldr	r3, [r5]
    8980:	e3530000 	cmp	r3, #0
    8984:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8988:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    898c:	ea000154 	b	8ee4 <LeaveCritical>
    8990:	eb000145 	bl	8eac <EnterCritical>
    8994:	eaffffec 	b	894c <CGPIOPin::SetPullUpMode(unsigned int)+0x30>

00008998 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    8998:	e590c004 	ldr	ip, [r0, #4]
    899c:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    89a0:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    89a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    89a8:	e3a0e00a 	mov	lr, #10
    89ac:	e083229c 	umull	r2, r3, ip, r2
    89b0:	e3005504 	movw	r5, #1284	; 0x504
    89b4:	e3405001 	movt	r5, #1
    89b8:	e1a07001 	mov	r7, r1
    89bc:	e5950000 	ldr	r0, [r5]
    89c0:	e1a041a3 	lsr	r4, r3, #3
    89c4:	e3500000 	cmp	r0, #0
    89c8:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    89cc:	e064c49e 	mls	r4, lr, r4, ip
    89d0:	e2833702 	add	r3, r3, #524288	; 0x80000
    89d4:	e1a06103 	lsl	r6, r3, #2
    89d8:	e0844084 	add	r4, r4, r4, lsl #1
    89dc:	1a00000c 	bne	8a14 <CGPIOPin::SetAlternateFunction(unsigned int)+0x7c>
    89e0:	e30e2ff8 	movw	r2, #61432	; 0xeff8
    89e4:	e3402000 	movt	r2, #0
    89e8:	e5963000 	ldr	r3, [r6]
    89ec:	e3a01007 	mov	r1, #7
    89f0:	e7922107 	ldr	r2, [r2, r7, lsl #2]
    89f4:	e1c33411 	bic	r3, r3, r1, lsl r4
    89f8:	e1834412 	orr	r4, r3, r2, lsl r4
    89fc:	e5864000 	str	r4, [r6]
    8a00:	e5953000 	ldr	r3, [r5]
    8a04:	e3530000 	cmp	r3, #0
    8a08:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8a0c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8a10:	ea000133 	b	8ee4 <LeaveCritical>
    8a14:	eb000124 	bl	8eac <EnterCritical>
    8a18:	eafffff0 	b	89e0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x48>

00008a1c <CGPIOPin::SetMode(TGPIOMode, int)>:
    8a1c:	e2413004 	sub	r3, r1, #4
    8a20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a24:	e1a06002 	mov	r6, r2
    8a28:	e6ef2073 	uxtb	r2, r3
    8a2c:	e1a05000 	mov	r5, r0
    8a30:	e3520005 	cmp	r2, #5
    8a34:	e5c01010 	strb	r1, [r0, #16]
    8a38:	9a00002b 	bls	8aec <CGPIOPin::SetMode(TGPIOMode, int)+0xd0>
    8a3c:	e2963000 	adds	r3, r6, #0
    8a40:	13a03001 	movne	r3, #1
    8a44:	e3510001 	cmp	r1, #1
    8a48:	13a03000 	movne	r3, #0
    8a4c:	e3530000 	cmp	r3, #0
    8a50:	1a00004e 	bne	8b90 <CGPIOPin::SetMode(TGPIOMode, int)+0x174>
    8a54:	e5951004 	ldr	r1, [r5, #4]
    8a58:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    8a5c:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    8a60:	e3a0c00a 	mov	ip, #10
    8a64:	e3007504 	movw	r7, #1284	; 0x504
    8a68:	e3407001 	movt	r7, #1
    8a6c:	e0832291 	umull	r2, r3, r1, r2
    8a70:	e5970000 	ldr	r0, [r7]
    8a74:	e3500000 	cmp	r0, #0
    8a78:	e1a041a3 	lsr	r4, r3, #3
    8a7c:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    8a80:	e064149c 	mls	r4, ip, r4, r1
    8a84:	e2833702 	add	r3, r3, #524288	; 0x80000
    8a88:	e1a08103 	lsl	r8, r3, #2
    8a8c:	e0844084 	add	r4, r4, r4, lsl #1
    8a90:	1a000024 	bne	8b28 <CGPIOPin::SetMode(TGPIOMode, int)+0x10c>
    8a94:	e5d52010 	ldrb	r2, [r5, #16]
    8a98:	e3a01007 	mov	r1, #7
    8a9c:	e5983000 	ldr	r3, [r8]
    8aa0:	e2422001 	sub	r2, r2, #1
    8aa4:	e16f2f12 	clz	r2, r2
    8aa8:	e1c33411 	bic	r3, r3, r1, lsl r4
    8aac:	e1a022a2 	lsr	r2, r2, #5
    8ab0:	e1834412 	orr	r4, r3, r2, lsl r4
    8ab4:	e5884000 	str	r4, [r8]
    8ab8:	e5973000 	ldr	r3, [r7]
    8abc:	e3530000 	cmp	r3, #0
    8ac0:	1a00001a 	bne	8b30 <CGPIOPin::SetMode(TGPIOMode, int)+0x114>
    8ac4:	e3560000 	cmp	r6, #0
    8ac8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8acc:	e5d53010 	ldrb	r3, [r5, #16]
    8ad0:	e3530003 	cmp	r3, #3
    8ad4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8ad8:	ea000009 	b	8b04 <CGPIOPin::SetMode(TGPIOMode, int)+0xe8>
    8adc:	00008b80 	.word	0x00008b80
    8ae0:	00008b60 	.word	0x00008b60
    8ae4:	00008b50 	.word	0x00008b50
    8ae8:	00008b40 	.word	0x00008b40
    8aec:	e3560000 	cmp	r6, #0
    8af0:	1a000004 	bne	8b08 <CGPIOPin::SetMode(TGPIOMode, int)+0xec>
    8af4:	e1a00005 	mov	r0, r5
    8af8:	e1a01003 	mov	r1, r3
    8afc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b00:	eaffffa4 	b	8998 <CGPIOPin::SetAlternateFunction(unsigned int)>
    8b04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b08:	e3a01000 	mov	r1, #0
    8b0c:	ebffff82 	bl	891c <CGPIOPin::SetPullUpMode(unsigned int)>
    8b10:	e5d51010 	ldrb	r1, [r5, #16]
    8b14:	e1a00005 	mov	r0, r5
    8b18:	e2413004 	sub	r3, r1, #4
    8b1c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b20:	e1a01003 	mov	r1, r3
    8b24:	eaffff9b 	b	8998 <CGPIOPin::SetAlternateFunction(unsigned int)>
    8b28:	eb0000df 	bl	8eac <EnterCritical>
    8b2c:	eaffffd8 	b	8a94 <CGPIOPin::SetMode(TGPIOMode, int)+0x78>
    8b30:	eb0000eb 	bl	8ee4 <LeaveCritical>
    8b34:	e3560000 	cmp	r6, #0
    8b38:	1affffe3 	bne	8acc <CGPIOPin::SetMode(TGPIOMode, int)+0xb0>
    8b3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b40:	e1a00005 	mov	r0, r5
    8b44:	e3a01001 	mov	r1, #1
    8b48:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b4c:	eaffff72 	b	891c <CGPIOPin::SetPullUpMode(unsigned int)>
    8b50:	e1a00005 	mov	r0, r5
    8b54:	e3a01002 	mov	r1, #2
    8b58:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b5c:	eaffff6e 	b	891c <CGPIOPin::SetPullUpMode(unsigned int)>
    8b60:	e595100c 	ldr	r1, [r5, #12]
    8b64:	e3a03028 	mov	r3, #40	; 0x28
    8b68:	e5952008 	ldr	r2, [r5, #8]
    8b6c:	e3433f20 	movt	r3, #16160	; 0x3f20
    8b70:	e3a00000 	mov	r0, #0
    8b74:	e5850014 	str	r0, [r5, #20]
    8b78:	e7821003 	str	r1, [r2, r3]
    8b7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b80:	e1a00005 	mov	r0, r5
    8b84:	e3a01000 	mov	r1, #0
    8b88:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b8c:	eaffff62 	b	891c <CGPIOPin::SetPullUpMode(unsigned int)>
    8b90:	e3a01000 	mov	r1, #0
    8b94:	ebffff60 	bl	891c <CGPIOPin::SetPullUpMode(unsigned int)>
    8b98:	eaffffad 	b	8a54 <CGPIOPin::SetMode(TGPIOMode, int)+0x38>

00008b9c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    8b9c:	e59fc080 	ldr	ip, [pc, #128]	; 8c24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x88>
    8ba0:	e3510035 	cmp	r1, #53	; 0x35
    8ba4:	e92d4070 	push	{r4, r5, r6, lr}
    8ba8:	e1a06002 	mov	r6, r2
    8bac:	e5803018 	str	r3, [r0, #24]
    8bb0:	e3a02000 	mov	r2, #0
    8bb4:	e3a0300a 	mov	r3, #10
    8bb8:	e1a05001 	mov	r5, r1
    8bbc:	e5c03010 	strb	r3, [r0, #16]
    8bc0:	e1a04000 	mov	r4, r0
    8bc4:	e3a03006 	mov	r3, #6
    8bc8:	e5801004 	str	r1, [r0, #4]
    8bcc:	e580c000 	str	ip, [r0]
    8bd0:	e580201c 	str	r2, [r0, #28]
    8bd4:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    8bd8:	e5c03025 	strb	r3, [r0, #37]	; 0x25
    8bdc:	9a000004 	bls	8bf4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x58>
    8be0:	eb0013dd 	bl	db5c <CMachineInfo::Get()>
    8be4:	e6ef1075 	uxtb	r1, r5
    8be8:	eb0013be 	bl	dae8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    8bec:	e1a05000 	mov	r5, r0
    8bf0:	e5840004 	str	r0, [r4, #4]
    8bf4:	e1a032a5 	lsr	r3, r5, #5
    8bf8:	e3a02001 	mov	r2, #1
    8bfc:	e205501f 	and	r5, r5, #31
    8c00:	e1a00004 	mov	r0, r4
    8c04:	e1a03103 	lsl	r3, r3, #2
    8c08:	e1a05512 	lsl	r5, r2, r5
    8c0c:	e1a01006 	mov	r1, r6
    8c10:	e5843008 	str	r3, [r4, #8]
    8c14:	e584500c 	str	r5, [r4, #12]
    8c18:	ebffff7f 	bl	8a1c <CGPIOPin::SetMode(TGPIOMode, int)>
    8c1c:	e1a00004 	mov	r0, r4
    8c20:	e8bd8070 	pop	{r4, r5, r6, pc}
    8c24:	0000f018 	.word	0x0000f018

00008c28 <CGPIOPin::InterruptHandler()>:
    8c28:	e590301c 	ldr	r3, [r0, #28]
    8c2c:	e5900020 	ldr	r0, [r0, #32]
    8c30:	e12fff13 	bx	r3

00008c34 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    8c34:	e92d4070 	push	{r4, r5, r6, lr}
    8c38:	e3006504 	movw	r6, #1284	; 0x504
    8c3c:	e3406001 	movt	r6, #1
    8c40:	e3a04013 	mov	r4, #19
    8c44:	e3404fc8 	movt	r4, #4040	; 0xfc8
    8c48:	e200501f 	and	r5, r0, #31
    8c4c:	e5963000 	ldr	r3, [r6]
    8c50:	e08442a0 	add	r4, r4, r0, lsr #5
    8c54:	e3a02001 	mov	r2, #1
    8c58:	e3530000 	cmp	r3, #0
    8c5c:	e1a04104 	lsl	r4, r4, #2
    8c60:	e1a05512 	lsl	r5, r2, r5
    8c64:	1a000011 	bne	8cb0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
    8c68:	e3a0308b 	mov	r3, #139	; 0x8b
    8c6c:	e3433f20 	movt	r3, #16160	; 0x3f20
    8c70:	e1540003 	cmp	r4, r3
    8c74:	8a00000c 	bhi	8cac <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    8c78:	e3a0108b 	mov	r1, #139	; 0x8b
    8c7c:	e3431f20 	movt	r1, #16160	; 0x3f20
    8c80:	e1e02005 	mvn	r2, r5
    8c84:	e5943000 	ldr	r3, [r4]
    8c88:	e0033002 	and	r3, r3, r2
    8c8c:	e484300c 	str	r3, [r4], #12
    8c90:	e1540001 	cmp	r4, r1
    8c94:	9afffffa 	bls	8c84 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    8c98:	e5963000 	ldr	r3, [r6]
    8c9c:	e3530000 	cmp	r3, #0
    8ca0:	08bd8070 	popeq	{r4, r5, r6, pc}
    8ca4:	e8bd4070 	pop	{r4, r5, r6, lr}
    8ca8:	ea00008d 	b	8ee4 <LeaveCritical>
    8cac:	e8bd8070 	pop	{r4, r5, r6, pc}
    8cb0:	e1a00003 	mov	r0, r3
    8cb4:	eb00007c 	bl	8eac <EnterCritical>
    8cb8:	e3a0308b 	mov	r3, #139	; 0x8b
    8cbc:	e3433f20 	movt	r3, #16160	; 0x3f20
    8cc0:	e1540003 	cmp	r4, r3
    8cc4:	9affffeb 	bls	8c78 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
    8cc8:	eafffff2 	b	8c98 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>

00008ccc <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    8ccc:	e3003504 	movw	r3, #1284	; 0x504
    8cd0:	e3403001 	movt	r3, #1
    8cd4:	e3a02001 	mov	r2, #1
    8cd8:	e5832000 	str	r2, [r3]
    8cdc:	e12fff1e 	bx	lr

00008ce0 <CMemorySystem::~CMemorySystem()>:
    8ce0:	e5903000 	ldr	r3, [r0]
    8ce4:	e92d4070 	push	{r4, r5, r6, lr}
    8ce8:	e3530000 	cmp	r3, #0
    8cec:	e1a04000 	mov	r4, r0
    8cf0:	0a000005 	beq	8d0c <CMemorySystem::~CMemorySystem()+0x2c>
    8cf4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    8cf8:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    8cfc:	e3c33005 	bic	r3, r3, #5
    8d00:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8d04:	e3a03000 	mov	r3, #0
    8d08:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    8d0c:	e594500c 	ldr	r5, [r4, #12]
    8d10:	e3550000 	cmp	r5, #0
    8d14:	0a000004 	beq	8d2c <CMemorySystem::~CMemorySystem()+0x4c>
    8d18:	e1a00005 	mov	r0, r5
    8d1c:	eb0004ba 	bl	a00c <CPageTable::~CPageTable()>
    8d20:	e1a00005 	mov	r0, r5
    8d24:	e3a01008 	mov	r1, #8
    8d28:	eb00005d 	bl	8ea4 <operator delete(void*, unsigned int)>
    8d2c:	e5945008 	ldr	r5, [r4, #8]
    8d30:	e3a03000 	mov	r3, #0
    8d34:	e584300c 	str	r3, [r4, #12]
    8d38:	e1550003 	cmp	r5, r3
    8d3c:	0a000004 	beq	8d54 <CMemorySystem::~CMemorySystem()+0x74>
    8d40:	e1a00005 	mov	r0, r5
    8d44:	eb0004b0 	bl	a00c <CPageTable::~CPageTable()>
    8d48:	e1a00005 	mov	r0, r5
    8d4c:	e3a01008 	mov	r1, #8
    8d50:	eb000053 	bl	8ea4 <operator delete(void*, unsigned int)>
    8d54:	e1a00004 	mov	r0, r4
    8d58:	e8bd8070 	pop	{r4, r5, r6, pc}

00008d5c <CMemorySystem::GetMemSize() const>:
    8d5c:	e5900004 	ldr	r0, [r0, #4]
    8d60:	e12fff1e 	bx	lr

00008d64 <CMemorySystem::EnableMMU()>:
    8d64:	e92d4010 	push	{r4, lr}
    8d68:	e1a04000 	mov	r4, r0
    8d6c:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    8d70:	e3833040 	orr	r3, r3, #64	; 0x40
    8d74:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    8d78:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    8d7c:	e3a03002 	mov	r3, #2
    8d80:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    8d84:	e5900008 	ldr	r0, [r0, #8]
    8d88:	eb0004a8 	bl	a030 <CPageTable::GetBaseAddress() const>
    8d8c:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    8d90:	e594000c 	ldr	r0, [r4, #12]
    8d94:	eb0004a5 	bl	a030 <CPageTable::GetBaseAddress() const>
    8d98:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    8d9c:	e3a03005 	mov	r3, #5
    8da0:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    8da4:	eb00138b 	bl	dbd8 <InvalidateDataCache>
    8da8:	e3a03000 	mov	r3, #0
    8dac:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    8db0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    8db4:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    8db8:	f57ff04f 	dsb	sy
    8dbc:	f57ff06f 	isb	sy
    8dc0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    8dc4:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    8dc8:	e3833005 	orr	r3, r3, #5
    8dcc:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8dd0:	e8bd8010 	pop	{r4, pc}

00008dd4 <CMemorySystem::CMemorySystem(int)>:
    8dd4:	e92d4030 	push	{r4, r5, lr}
    8dd8:	e1a04000 	mov	r4, r0
    8ddc:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    8de0:	e5801000 	str	r1, [r0]
    8de4:	e3a05000 	mov	r5, #0
    8de8:	e28d000c 	add	r0, sp, #12
    8dec:	e5845004 	str	r5, [r4, #4]
    8df0:	e5845008 	str	r5, [r4, #8]
    8df4:	e584500c 	str	r5, [r4, #12]
    8df8:	ebfffde4 	bl	8590 <CBcmPropertyTags::CBcmPropertyTags()>
    8dfc:	e3a03014 	mov	r3, #20
    8e00:	e58d5000 	str	r5, [sp]
    8e04:	e08d2003 	add	r2, sp, r3
    8e08:	e28d000c 	add	r0, sp, #12
    8e0c:	e3a01005 	mov	r1, #5
    8e10:	e3401001 	movt	r1, #1
    8e14:	ebfffe09 	bl	8640 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8e18:	e2503000 	subs	r3, r0, #0
    8e1c:	058d3020 	streq	r3, [sp, #32]
    8e20:	159d1024 	ldrne	r1, [sp, #36]	; 0x24
    8e24:	03a02303 	moveq	r2, #201326592	; 0xc000000
    8e28:	01a00003 	moveq	r0, r3
    8e2c:	01a01002 	moveq	r1, r2
    8e30:	159d0020 	ldrne	r0, [sp, #32]
    8e34:	e5841004 	str	r1, [r4, #4]
    8e38:	058d2024 	streq	r2, [sp, #36]	; 0x24
    8e3c:	eb001424 	bl	ded4 <mem_init>
    8e40:	e5943000 	ldr	r3, [r4]
    8e44:	e3530000 	cmp	r3, #0
    8e48:	0a00000c 	beq	8e80 <CMemorySystem::CMemorySystem(int)+0xac>
    8e4c:	e3a00008 	mov	r0, #8
    8e50:	eb00000f 	bl	8e94 <operator new(unsigned int)>
    8e54:	e5941004 	ldr	r1, [r4, #4]
    8e58:	e1a05000 	mov	r5, r0
    8e5c:	eb00042e 	bl	9f1c <CPageTable::CPageTable(unsigned int)>
    8e60:	e5845008 	str	r5, [r4, #8]
    8e64:	e3a00008 	mov	r0, #8
    8e68:	eb000009 	bl	8e94 <operator new(unsigned int)>
    8e6c:	e1a05000 	mov	r5, r0
    8e70:	eb0003fd 	bl	9e6c <CPageTable::CPageTable()>
    8e74:	e584500c 	str	r5, [r4, #12]
    8e78:	e1a00004 	mov	r0, r4
    8e7c:	ebffffb8 	bl	8d64 <CMemorySystem::EnableMMU()>
    8e80:	e28d000c 	add	r0, sp, #12
    8e84:	ebfffdc7 	bl	85a8 <CBcmPropertyTags::~CBcmPropertyTags()>
    8e88:	e1a00004 	mov	r0, r4
    8e8c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    8e90:	e8bd8030 	pop	{r4, r5, pc}

00008e94 <operator new(unsigned int)>:
    8e94:	ea001426 	b	df34 <malloc>

00008e98 <operator new[](unsigned int)>:
    8e98:	ea001425 	b	df34 <malloc>

00008e9c <operator delete(void*)>:
    8e9c:	ea001464 	b	e034 <free>

00008ea0 <operator delete[](void*)>:
    8ea0:	ea001463 	b	e034 <free>

00008ea4 <operator delete(void*, unsigned int)>:
    8ea4:	ea001462 	b	e034 <free>

00008ea8 <operator delete[](void*, unsigned int)>:
    8ea8:	ea001461 	b	e034 <free>

00008eac <EnterCritical>:
    8eac:	e10f1000 	mrs	r1, CPSR
    8eb0:	f10c0080 	cpsid	i
    8eb4:	e3500002 	cmp	r0, #2
    8eb8:	1a000000 	bne	8ec0 <EnterCritical+0x14>
    8ebc:	f10c0040 	cpsid	f
    8ec0:	e3003508 	movw	r3, #1288	; 0x508
    8ec4:	e3403001 	movt	r3, #1
    8ec8:	e5932000 	ldr	r2, [r3]
    8ecc:	e2820001 	add	r0, r2, #1
    8ed0:	e5830000 	str	r0, [r3]
    8ed4:	e0833102 	add	r3, r3, r2, lsl #2
    8ed8:	e5831004 	str	r1, [r3, #4]
    8edc:	f57ff05f 	dmb	sy
    8ee0:	e12fff1e 	bx	lr

00008ee4 <LeaveCritical>:
    8ee4:	f57ff05f 	dmb	sy
    8ee8:	e3003508 	movw	r3, #1288	; 0x508
    8eec:	e3403001 	movt	r3, #1
    8ef0:	e5932000 	ldr	r2, [r3]
    8ef4:	e2422001 	sub	r2, r2, #1
    8ef8:	e5832000 	str	r2, [r3]
    8efc:	e0833102 	add	r3, r3, r2, lsl #2
    8f00:	e5933004 	ldr	r3, [r3, #4]
    8f04:	e121f003 	msr	CPSR_c, r3
    8f08:	e12fff1e 	bx	lr

00008f0c <SyncDataAndInstructionCache>:
    8f0c:	e92d4010 	push	{r4, lr}
    8f10:	eb00135a 	bl	dc80 <CleanDataCache>
    8f14:	e3a03000 	mov	r3, #0
    8f18:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    8f1c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    8f20:	f57ff04f 	dsb	sy
    8f24:	f57ff06f 	isb	sy
    8f28:	e8bd8010 	pop	{r4, pc}

00008f2c <__aeabi_atexit>:
    8f2c:	e12fff1e 	bx	lr

00008f30 <halt>:
    8f30:	f10c0080 	cpsid	i
    8f34:	f10c0040 	cpsid	f
    8f38:	f57ff04f 	dsb	sy
    8f3c:	e320f003 	wfi
    8f40:	eafffffc 	b	8f38 <halt+0x8>

00008f44 <reboot>:
    8f44:	e3a03000 	mov	r3, #0
    8f48:	e3433f10 	movt	r3, #16144	; 0x3f10
    8f4c:	e3a01001 	mov	r1, #1
    8f50:	e3a02020 	mov	r2, #32
    8f54:	e3451a00 	movt	r1, #23040	; 0x5a00
    8f58:	e3452a00 	movt	r2, #23040	; 0x5a00
    8f5c:	e5831024 	str	r1, [r3, #36]	; 0x24
    8f60:	e583201c 	str	r2, [r3, #28]
    8f64:	eafffffe 	b	8f64 <reboot+0x20>

00008f68 <sysinit>:
    8f68:	e92d4030 	push	{r4, r5, lr}
    8f6c:	e24dd01c 	sub	sp, sp, #28
    8f70:	f1080040 	cpsie	f
    8f74:	eb0012fc 	bl	db6c <InvalidateDataCacheL1Only>
    8f78:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    8f7c:	e3083064 	movw	r3, #32868	; 0x8064
    8f80:	e3403000 	movt	r3, #0
    8f84:	e582309c 	str	r3, [r2, #156]	; 0x9c
    8f88:	e58230ac 	str	r3, [r2, #172]	; 0xac
    8f8c:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    8f90:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    8f94:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    8f98:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    8f9c:	f57ff06f 	isb	sy
    8fa0:	eee82a10 	vmsr	fpexc, r2
    8fa4:	e3a01000 	mov	r1, #0
    8fa8:	eee11a10 	vmsr	fpscr, r1
    8fac:	e3003500 	movw	r3, #1280	; 0x500
    8fb0:	e30025a0 	movw	r2, #1440	; 0x5a0
    8fb4:	e3403001 	movt	r3, #1
    8fb8:	e3402001 	movt	r2, #1
    8fbc:	e1530002 	cmp	r3, r2
    8fc0:	2a000002 	bcs	8fd0 <sysinit+0x68>
    8fc4:	e4c31001 	strb	r1, [r3], #1
    8fc8:	e1530002 	cmp	r3, r2
    8fcc:	1afffffc 	bne	8fc4 <sysinit+0x5c>
    8fd0:	e1a0000d 	mov	r0, sp
    8fd4:	e3005410 	movw	r5, #1040	; 0x410
    8fd8:	e3004404 	movw	r4, #1028	; 0x404
    8fdc:	e3405001 	movt	r5, #1
    8fe0:	e3404001 	movt	r4, #1
    8fe4:	eb001202 	bl	d7f4 <CMachineInfo::CMachineInfo()>
    8fe8:	e1540005 	cmp	r4, r5
    8fec:	2a000003 	bcs	9000 <sysinit+0x98>
    8ff0:	e4943004 	ldr	r3, [r4], #4
    8ff4:	e12fff33 	blx	r3
    8ff8:	e1540005 	cmp	r4, r5
    8ffc:	3afffffb 	bcc	8ff0 <sysinit+0x88>
    9000:	ebfffc1a 	bl	8070 <main>
    9004:	e3500001 	cmp	r0, #1
    9008:	0a000000 	beq	9010 <sysinit+0xa8>
    900c:	ebffffc7 	bl	8f30 <halt>
    9010:	ebffffcb 	bl	8f44 <reboot>

00009014 <CTimer::CTimer(CInterruptSystem*)>:
    9014:	e92d4070 	push	{r4, r5, r6, lr}
    9018:	e1a04000 	mov	r4, r0
    901c:	e5801000 	str	r1, [r0]
    9020:	e3a03000 	mov	r3, #0
    9024:	e3a05001 	mov	r5, #1
    9028:	e5803004 	str	r3, [r0, #4]
    902c:	e5843008 	str	r3, [r4, #8]
    9030:	e2800018 	add	r0, r0, #24
    9034:	e5843014 	str	r3, [r4, #20]
    9038:	e584300c 	str	r3, [r4, #12]
    903c:	e5845010 	str	r5, [r4, #16]
    9040:	eb001346 	bl	dd60 <CPtrList::CPtrList()>
    9044:	e3003560 	movw	r3, #1376	; 0x560
    9048:	e3403001 	movt	r3, #1
    904c:	e300115e 	movw	r1, #350	; 0x15e
    9050:	e584501c 	str	r5, [r4, #28]
    9054:	e3052730 	movw	r2, #22320	; 0x5730
    9058:	e5841024 	str	r1, [r4, #36]	; 0x24
    905c:	e3402005 	movt	r2, #5
    9060:	e1a00004 	mov	r0, r4
    9064:	e5842020 	str	r2, [r4, #32]
    9068:	e5834000 	str	r4, [r3]
    906c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009070 <CTimer::~CTimer()>:
    9070:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9074:	e1a04000 	mov	r4, r0
    9078:	e1a07000 	mov	r7, r0
    907c:	e3a01003 	mov	r1, #3
    9080:	e4940018 	ldr	r0, [r4], #24
    9084:	eb00106c 	bl	d23c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9088:	ea000007 	b	90ac <CTimer::~CTimer()+0x3c>
    908c:	eb00133b 	bl	dd80 <CPtrList::GetPtr(TPtrListElement*)>
    9090:	e1a01005 	mov	r1, r5
    9094:	e1a06000 	mov	r6, r0
    9098:	e1a00004 	mov	r0, r4
    909c:	eb00136a 	bl	de4c <CPtrList::Remove(TPtrListElement*)>
    90a0:	e1a00006 	mov	r0, r6
    90a4:	e3a01014 	mov	r1, #20
    90a8:	ebffff7d 	bl	8ea4 <operator delete(void*, unsigned int)>
    90ac:	e1a00004 	mov	r0, r4
    90b0:	eb00132e 	bl	dd70 <CPtrList::GetFirst()>
    90b4:	e2505000 	subs	r5, r0, #0
    90b8:	e1a00004 	mov	r0, r4
    90bc:	e1a01005 	mov	r1, r5
    90c0:	1afffff1 	bne	908c <CTimer::~CTimer()+0x1c>
    90c4:	e3003560 	movw	r3, #1376	; 0x560
    90c8:	e3403001 	movt	r3, #1
    90cc:	e1a00004 	mov	r0, r4
    90d0:	e5835000 	str	r5, [r3]
    90d4:	eb001324 	bl	dd6c <CPtrList::~CPtrList()>
    90d8:	e1a00007 	mov	r0, r7
    90dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000090e0 <CTimer::SetTimeZone(int)>:
    90e0:	e2813e59 	add	r3, r1, #1424	; 0x590
    90e4:	e3002b3e 	movw	r2, #2878	; 0xb3e
    90e8:	e283300f 	add	r3, r3, #15
    90ec:	e1530002 	cmp	r3, r2
    90f0:	95801014 	strls	r1, [r0, #20]
    90f4:	93a00001 	movls	r0, #1
    90f8:	83a00000 	movhi	r0, #0
    90fc:	e12fff1e 	bx	lr

00009100 <CTimer::GetTimeZone() const>:
    9100:	e5900014 	ldr	r0, [r0, #20]
    9104:	e12fff1e 	bx	lr

00009108 <CTimer::SetTime(unsigned int, int)>:
    9108:	e3520000 	cmp	r2, #0
    910c:	e92d4070 	push	{r4, r5, r6, lr}
    9110:	e1a04000 	mov	r4, r0
    9114:	e1a05001 	mov	r5, r1
    9118:	1a000005 	bne	9134 <CTimer::SetTime(unsigned int, int)+0x2c>
    911c:	e5901014 	ldr	r1, [r0, #20]
    9120:	e3a0303c 	mov	r3, #60	; 0x3c
    9124:	e0030193 	mul	r3, r3, r1
    9128:	e3530000 	cmp	r3, #0
    912c:	ba00000e 	blt	916c <CTimer::SetTime(unsigned int, int)+0x64>
    9130:	e0855003 	add	r5, r5, r3
    9134:	e5940010 	ldr	r0, [r4, #16]
    9138:	e3500000 	cmp	r0, #0
    913c:	1a000002 	bne	914c <CTimer::SetTime(unsigned int, int)+0x44>
    9140:	e3a00001 	mov	r0, #1
    9144:	e584500c 	str	r5, [r4, #12]
    9148:	e8bd8070 	pop	{r4, r5, r6, pc}
    914c:	ebffff56 	bl	8eac <EnterCritical>
    9150:	e5943010 	ldr	r3, [r4, #16]
    9154:	e584500c 	str	r5, [r4, #12]
    9158:	e3530000 	cmp	r3, #0
    915c:	0a000007 	beq	9180 <CTimer::SetTime(unsigned int, int)+0x78>
    9160:	ebffff5f 	bl	8ee4 <LeaveCritical>
    9164:	e3a00001 	mov	r0, #1
    9168:	e8bd8070 	pop	{r4, r5, r6, pc}
    916c:	e2631000 	rsb	r1, r3, #0
    9170:	e1510005 	cmp	r1, r5
    9174:	daffffed 	ble	9130 <CTimer::SetTime(unsigned int, int)+0x28>
    9178:	e1a00002 	mov	r0, r2
    917c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9180:	e3a00001 	mov	r0, #1
    9184:	e8bd8070 	pop	{r4, r5, r6, pc}

00009188 <CTimer::GetClockTicks()>:
    9188:	e3a03a03 	mov	r3, #12288	; 0x3000
    918c:	e3433f00 	movt	r3, #16128	; 0x3f00
    9190:	e5930004 	ldr	r0, [r3, #4]
    9194:	e12fff1e 	bx	lr

00009198 <CTimer::GetTicks() const>:
    9198:	e5900004 	ldr	r0, [r0, #4]
    919c:	e12fff1e 	bx	lr

000091a0 <CTimer::GetUptime() const>:
    91a0:	e5900008 	ldr	r0, [r0, #8]
    91a4:	e12fff1e 	bx	lr

000091a8 <CTimer::GetTime() const>:
    91a8:	e590000c 	ldr	r0, [r0, #12]
    91ac:	e12fff1e 	bx	lr

000091b0 <CTimer::GetUniversalTime() const>:
    91b0:	e5902014 	ldr	r2, [r0, #20]
    91b4:	e3a0303c 	mov	r3, #60	; 0x3c
    91b8:	e590000c 	ldr	r0, [r0, #12]
    91bc:	e0030293 	mul	r3, r3, r2
    91c0:	e1530000 	cmp	r3, r0
    91c4:	d0400003 	suble	r0, r0, r3
    91c8:	c3a00000 	movgt	r0, #0
    91cc:	e12fff1e 	bx	lr

000091d0 <CTimer::GetTimeString()>:
    91d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91d4:	e1a05000 	mov	r5, r0
    91d8:	e5900010 	ldr	r0, [r0, #16]
    91dc:	e24dd01c 	sub	sp, sp, #28
    91e0:	e3500000 	cmp	r0, #0
    91e4:	1a00006c 	bne	939c <CTimer::GetTimeString()+0x1cc>
    91e8:	e595400c 	ldr	r4, [r5, #12]
    91ec:	e5959004 	ldr	r9, [r5, #4]
    91f0:	e1940009 	orrs	r0, r4, r9
    91f4:	0a00004f 	beq	9338 <CTimer::GetTimeString()+0x168>
    91f8:	e308a889 	movw	sl, #34953	; 0x8889
    91fc:	e348a888 	movt	sl, #34952	; 0x8888
    9200:	e30b23c5 	movw	r2, #46021	; 0xb3c5
    9204:	e34921a2 	movt	r2, #37282	; 0x91a2
    9208:	e0876a94 	umull	r6, r7, r4, sl
    920c:	e304e507 	movw	lr, #17671	; 0x4507
    9210:	e0832294 	umull	r2, r3, r4, r2
    9214:	e34ce22e 	movt	lr, #49710	; 0xc22e
    9218:	e3a0003c 	mov	r0, #60	; 0x3c
    921c:	e308151f 	movw	r1, #34079	; 0x851f
    9220:	e1a0c2a7 	lsr	ip, r7, #5
    9224:	e34511eb 	movt	r1, #20971	; 0x51eb
    9228:	e30057b2 	movw	r5, #1970	; 0x7b2
    922c:	e08baa9c 	umull	sl, fp, ip, sl
    9230:	e1a065a3 	lsr	r6, r3, #11
    9234:	e0832e94 	umull	r2, r3, r4, lr
    9238:	e3a0a064 	mov	sl, #100	; 0x64
    923c:	e0674c90 	mls	r7, r0, ip, r4
    9240:	e1a082ab 	lsr	r8, fp, #5
    9244:	e3a0ee19 	mov	lr, #400	; 0x190
    9248:	e068c890 	mls	r8, r0, r8, ip
    924c:	e1a04823 	lsr	r4, r3, #16
    9250:	e300c16d 	movw	ip, #365	; 0x16d
    9254:	e300016e 	movw	r0, #366	; 0x16e
    9258:	ea000001 	b	9264 <CTimer::GetTimeString()+0x94>
    925c:	e0444002 	sub	r4, r4, r2
    9260:	e2855001 	add	r5, r5, #1
    9264:	e0832195 	umull	r2, r3, r5, r1
    9268:	e1a022a3 	lsr	r2, r3, #5
    926c:	e1a033a3 	lsr	r3, r3, #7
    9270:	e062529a 	mls	r2, sl, r2, r5
    9274:	e063539e 	mls	r3, lr, r3, r5
    9278:	e3520000 	cmp	r2, #0
    927c:	e16f3f13 	clz	r3, r3
    9280:	01a032a3 	lsreq	r3, r3, #5
    9284:	0a000002 	beq	9294 <CTimer::GetTimeString()+0xc4>
    9288:	e3150003 	tst	r5, #3
    928c:	03a03001 	moveq	r3, #1
    9290:	13a03000 	movne	r3, #0
    9294:	e3530000 	cmp	r3, #0
    9298:	01a0200c 	moveq	r2, ip
    929c:	11a02000 	movne	r2, r0
    92a0:	e1540002 	cmp	r4, r2
    92a4:	2affffec 	bcs	925c <CTimer::GetTimeString()+0x8c>
    92a8:	e30f0020 	movw	r0, #61472	; 0xf020
    92ac:	e3a0a000 	mov	sl, #0
    92b0:	e3400000 	movt	r0, #0
    92b4:	ea000001 	b	92c0 <CTimer::GetTimeString()+0xf0>
    92b8:	e0444002 	sub	r4, r4, r2
    92bc:	e28aa001 	add	sl, sl, #1
    92c0:	e35a0001 	cmp	sl, #1
    92c4:	13a01000 	movne	r1, #0
    92c8:	02031001 	andeq	r1, r3, #1
    92cc:	e3a0201d 	mov	r2, #29
    92d0:	e3510000 	cmp	r1, #0
    92d4:	0790210a 	ldreq	r2, [r0, sl, lsl #2]
    92d8:	e1540002 	cmp	r4, r2
    92dc:	2afffff5 	bcs	92b8 <CTimer::GetTimeString()+0xe8>
    92e0:	e308251f 	movw	r2, #34079	; 0x851f
    92e4:	e34521eb 	movt	r2, #20971	; 0x51eb
    92e8:	e3a01064 	mov	r1, #100	; 0x64
    92ec:	e3a00010 	mov	r0, #16
    92f0:	e0832299 	umull	r2, r3, r9, r2
    92f4:	e1a0b2a3 	lsr	fp, r3, #5
    92f8:	e06b9b91 	mls	fp, r1, fp, r9
    92fc:	ebfffee4 	bl	8e94 <operator new(unsigned int)>
    9300:	e1a09000 	mov	r9, r0
    9304:	eb000c20 	bl	c38c <CString::CString()>
    9308:	e30037b7 	movw	r3, #1975	; 0x7b7
    930c:	e1550003 	cmp	r5, r3
    9310:	8a00000a 	bhi	9340 <CTimer::GetTimeString()+0x170>
    9314:	e1a00009 	mov	r0, r9
    9318:	e58db004 	str	fp, [sp, #4]
    931c:	e1a03008 	mov	r3, r8
    9320:	e58d7000 	str	r7, [sp]
    9324:	e1a02006 	mov	r2, r6
    9328:	e30f1074 	movw	r1, #61556	; 0xf074
    932c:	e3401000 	movt	r1, #0
    9330:	eb000f74 	bl	d108 <CString::Format(char const*, ...)>
    9334:	e1a00009 	mov	r0, r9
    9338:	e28dd01c 	add	sp, sp, #28
    933c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9340:	e30a3aab 	movw	r3, #43691	; 0xaaab
    9344:	e34a3aaa 	movt	r3, #43690	; 0xaaaa
    9348:	e3a0c018 	mov	ip, #24
    934c:	e3002410 	movw	r2, #1040	; 0x410
    9350:	e0810396 	umull	r0, r1, r6, r3
    9354:	e3402001 	movt	r2, #1
    9358:	e58db00c 	str	fp, [sp, #12]
    935c:	e2843001 	add	r3, r4, #1
    9360:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    9364:	e58d7008 	str	r7, [sp, #8]
    9368:	e58d8004 	str	r8, [sp, #4]
    936c:	e1cd01f0 	strd	r0, [sp, #16]
    9370:	e30f1058 	movw	r1, #61528	; 0xf058
    9374:	e59d0014 	ldr	r0, [sp, #20]
    9378:	e3401000 	movt	r1, #0
    937c:	e1a0e220 	lsr	lr, r0, #4
    9380:	e1a00009 	mov	r0, r9
    9384:	e0666e9c 	mls	r6, ip, lr, r6
    9388:	e58d6000 	str	r6, [sp]
    938c:	eb000f5d 	bl	d108 <CString::Format(char const*, ...)>
    9390:	e1a00009 	mov	r0, r9
    9394:	e28dd01c 	add	sp, sp, #28
    9398:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    939c:	ebfffec2 	bl	8eac <EnterCritical>
    93a0:	e5953010 	ldr	r3, [r5, #16]
    93a4:	e595400c 	ldr	r4, [r5, #12]
    93a8:	e3530000 	cmp	r3, #0
    93ac:	e5959004 	ldr	r9, [r5, #4]
    93b0:	0affff8e 	beq	91f0 <CTimer::GetTimeString()+0x20>
    93b4:	ebfffeca 	bl	8ee4 <LeaveCritical>
    93b8:	eaffff8c 	b	91f0 <CTimer::GetTimeString()+0x20>

000093bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    93bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    93c0:	e1a08000 	mov	r8, r0
    93c4:	e3a00014 	mov	r0, #20
    93c8:	e1a06002 	mov	r6, r2
    93cc:	e1a04001 	mov	r4, r1
    93d0:	e1a09003 	mov	r9, r3
    93d4:	e59d5020 	ldr	r5, [sp, #32]
    93d8:	ebfffead 	bl	8e94 <operator new(unsigned int)>
    93dc:	e304cd43 	movw	ip, #19779	; 0x4d43
    93e0:	e344cb54 	movt	ip, #19284	; 0x4b54
    93e4:	e1a07000 	mov	r7, r0
    93e8:	e598001c 	ldr	r0, [r8, #28]
    93ec:	e5876004 	str	r6, [r7, #4]
    93f0:	e3500000 	cmp	r0, #0
    93f4:	e5986004 	ldr	r6, [r8, #4]
    93f8:	e587900c 	str	r9, [r7, #12]
    93fc:	e0866004 	add	r6, r6, r4
    9400:	e5875010 	str	r5, [r7, #16]
    9404:	e587c000 	str	ip, [r7]
    9408:	e5876008 	str	r6, [r7, #8]
    940c:	1a000021 	bne	9498 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    9410:	e2885018 	add	r5, r8, #24
    9414:	e1a00005 	mov	r0, r5
    9418:	eb001254 	bl	dd70 <CPtrList::GetFirst()>
    941c:	e2504000 	subs	r4, r0, #0
    9420:	1a000004 	bne	9438 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x7c>
    9424:	ea000016 	b	9484 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
    9428:	eb001252 	bl	dd78 <CPtrList::GetNext(TPtrListElement*)>
    942c:	e3500000 	cmp	r0, #0
    9430:	0a000013 	beq	9484 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
    9434:	e1a04000 	mov	r4, r0
    9438:	e1a01004 	mov	r1, r4
    943c:	e1a00005 	mov	r0, r5
    9440:	eb00124e 	bl	dd80 <CPtrList::GetPtr(TPtrListElement*)>
    9444:	e1a01004 	mov	r1, r4
    9448:	e5903008 	ldr	r3, [r0, #8]
    944c:	e1a00005 	mov	r0, r5
    9450:	e0433006 	sub	r3, r3, r6
    9454:	e3530000 	cmp	r3, #0
    9458:	dafffff2 	ble	9428 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x6c>
    945c:	e1a01004 	mov	r1, r4
    9460:	e1a00005 	mov	r0, r5
    9464:	e1a02007 	mov	r2, r7
    9468:	eb001246 	bl	dd88 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    946c:	e598301c 	ldr	r3, [r8, #28]
    9470:	e3530000 	cmp	r3, #0
    9474:	0a000000 	beq	947c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc0>
    9478:	ebfffe99 	bl	8ee4 <LeaveCritical>
    947c:	e1a00007 	mov	r0, r7
    9480:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9484:	e1a01004 	mov	r1, r4
    9488:	e1a00005 	mov	r0, r5
    948c:	e1a02007 	mov	r2, r7
    9490:	eb001256 	bl	ddf0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    9494:	eafffff4 	b	946c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb0>
    9498:	ebfffe83 	bl	8eac <EnterCritical>
    949c:	eaffffdb 	b	9410 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x54>

000094a0 <CTimer::CancelKernelTimer(unsigned int)>:
    94a0:	e92d4070 	push	{r4, r5, r6, lr}
    94a4:	e1a04000 	mov	r4, r0
    94a8:	e590001c 	ldr	r0, [r0, #28]
    94ac:	e1a05001 	mov	r5, r1
    94b0:	e3500000 	cmp	r0, #0
    94b4:	1a000011 	bne	9500 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    94b8:	e2846018 	add	r6, r4, #24
    94bc:	e1a01005 	mov	r1, r5
    94c0:	e1a00006 	mov	r0, r6
    94c4:	eb001273 	bl	de98 <CPtrList::Find(void*)>
    94c8:	e2501000 	subs	r1, r0, #0
    94cc:	0a000006 	beq	94ec <CTimer::CancelKernelTimer(unsigned int)+0x4c>
    94d0:	e1a00006 	mov	r0, r6
    94d4:	eb00125c 	bl	de4c <CPtrList::Remove(TPtrListElement*)>
    94d8:	e3a03000 	mov	r3, #0
    94dc:	e1a00005 	mov	r0, r5
    94e0:	e5853000 	str	r3, [r5]
    94e4:	e3a01014 	mov	r1, #20
    94e8:	ebfffe6d 	bl	8ea4 <operator delete(void*, unsigned int)>
    94ec:	e594301c 	ldr	r3, [r4, #28]
    94f0:	e3530000 	cmp	r3, #0
    94f4:	08bd8070 	popeq	{r4, r5, r6, pc}
    94f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    94fc:	eafffe78 	b	8ee4 <LeaveCritical>
    9500:	ebfffe69 	bl	8eac <EnterCritical>
    9504:	eaffffeb 	b	94b8 <CTimer::CancelKernelTimer(unsigned int)+0x18>

00009508 <CTimer::PollKernelTimers()>:
    9508:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    950c:	e1a06000 	mov	r6, r0
    9510:	e590001c 	ldr	r0, [r0, #28]
    9514:	e3500000 	cmp	r0, #0
    9518:	1a000031 	bne	95e4 <CTimer::PollKernelTimers()+0xdc>
    951c:	e2867018 	add	r7, r6, #24
    9520:	e1a00007 	mov	r0, r7
    9524:	eb001211 	bl	dd70 <CPtrList::GetFirst()>
    9528:	e2505000 	subs	r5, r0, #0
    952c:	13a09000 	movne	r9, #0
    9530:	1a00000e 	bne	9570 <CTimer::PollKernelTimers()+0x68>
    9534:	ea000025 	b	95d0 <CTimer::PollKernelTimers()+0xc8>
    9538:	e5943004 	ldr	r3, [r4, #4]
    953c:	e1a00004 	mov	r0, r4
    9540:	e5942010 	ldr	r2, [r4, #16]
    9544:	e594100c 	ldr	r1, [r4, #12]
    9548:	e12fff33 	blx	r3
    954c:	e1a00004 	mov	r0, r4
    9550:	e5849000 	str	r9, [r4]
    9554:	e3a01014 	mov	r1, #20
    9558:	ebfffe51 	bl	8ea4 <operator delete(void*, unsigned int)>
    955c:	e596001c 	ldr	r0, [r6, #28]
    9560:	e3500000 	cmp	r0, #0
    9564:	1a000016 	bne	95c4 <CTimer::PollKernelTimers()+0xbc>
    9568:	e2585000 	subs	r5, r8, #0
    956c:	0a000017 	beq	95d0 <CTimer::PollKernelTimers()+0xc8>
    9570:	e1a01005 	mov	r1, r5
    9574:	e1a00007 	mov	r0, r7
    9578:	eb001200 	bl	dd80 <CPtrList::GetPtr(TPtrListElement*)>
    957c:	e5962004 	ldr	r2, [r6, #4]
    9580:	e1a01005 	mov	r1, r5
    9584:	e1a04000 	mov	r4, r0
    9588:	e1a00007 	mov	r0, r7
    958c:	e5943008 	ldr	r3, [r4, #8]
    9590:	e0433002 	sub	r3, r3, r2
    9594:	e3530000 	cmp	r3, #0
    9598:	ca00000c 	bgt	95d0 <CTimer::PollKernelTimers()+0xc8>
    959c:	eb0011f5 	bl	dd78 <CPtrList::GetNext(TPtrListElement*)>
    95a0:	e1a01005 	mov	r1, r5
    95a4:	e1a08000 	mov	r8, r0
    95a8:	e1a00007 	mov	r0, r7
    95ac:	eb001226 	bl	de4c <CPtrList::Remove(TPtrListElement*)>
    95b0:	e596301c 	ldr	r3, [r6, #28]
    95b4:	e3530000 	cmp	r3, #0
    95b8:	0affffde 	beq	9538 <CTimer::PollKernelTimers()+0x30>
    95bc:	ebfffe48 	bl	8ee4 <LeaveCritical>
    95c0:	eaffffdc 	b	9538 <CTimer::PollKernelTimers()+0x30>
    95c4:	ebfffe38 	bl	8eac <EnterCritical>
    95c8:	e2585000 	subs	r5, r8, #0
    95cc:	1affffe7 	bne	9570 <CTimer::PollKernelTimers()+0x68>
    95d0:	e596301c 	ldr	r3, [r6, #28]
    95d4:	e3530000 	cmp	r3, #0
    95d8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    95dc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    95e0:	eafffe3f 	b	8ee4 <LeaveCritical>
    95e4:	ebfffe30 	bl	8eac <EnterCritical>
    95e8:	eaffffcb 	b	951c <CTimer::PollKernelTimers()+0x14>

000095ec <CTimer::InterruptHandler()>:
    95ec:	e3a03a03 	mov	r3, #12288	; 0x3000
    95f0:	e3433f00 	movt	r3, #16128	; 0x3f00
    95f4:	e92d4010 	push	{r4, lr}
    95f8:	e3021710 	movw	r1, #10000	; 0x2710
    95fc:	e5932018 	ldr	r2, [r3, #24]
    9600:	e1a04000 	mov	r4, r0
    9604:	e0822001 	add	r2, r2, r1
    9608:	e5832018 	str	r2, [r3, #24]
    960c:	e5930004 	ldr	r0, [r3, #4]
    9610:	e1520000 	cmp	r2, r0
    9614:	35932004 	ldrcc	r2, [r3, #4]
    9618:	30821001 	addcc	r1, r2, r1
    961c:	35831018 	strcc	r1, [r3, #24]
    9620:	e3a03a03 	mov	r3, #12288	; 0x3000
    9624:	e3433f00 	movt	r3, #16128	; 0x3f00
    9628:	e3a02008 	mov	r2, #8
    962c:	e5832000 	str	r2, [r3]
    9630:	e5940010 	ldr	r0, [r4, #16]
    9634:	e3500000 	cmp	r0, #0
    9638:	1a000016 	bne	9698 <CTimer::InterruptHandler()+0xac>
    963c:	e5943004 	ldr	r3, [r4, #4]
    9640:	e308051f 	movw	r0, #34079	; 0x851f
    9644:	e34501eb 	movt	r0, #20971	; 0x51eb
    9648:	e3a0c064 	mov	ip, #100	; 0x64
    964c:	e2833001 	add	r3, r3, #1
    9650:	e5843004 	str	r3, [r4, #4]
    9654:	e0810093 	umull	r0, r1, r3, r0
    9658:	e1a022a1 	lsr	r2, r1, #5
    965c:	e062329c 	mls	r2, ip, r2, r3
    9660:	e3520000 	cmp	r2, #0
    9664:	1a000008 	bne	968c <CTimer::InterruptHandler()+0xa0>
    9668:	e5943008 	ldr	r3, [r4, #8]
    966c:	e2833001 	add	r3, r3, #1
    9670:	e5843008 	str	r3, [r4, #8]
    9674:	e594300c 	ldr	r3, [r4, #12]
    9678:	e2833001 	add	r3, r3, #1
    967c:	e584300c 	str	r3, [r4, #12]
    9680:	e3520000 	cmp	r2, #0
    9684:	0a000000 	beq	968c <CTimer::InterruptHandler()+0xa0>
    9688:	ebfffe15 	bl	8ee4 <LeaveCritical>
    968c:	e1a00004 	mov	r0, r4
    9690:	e8bd4010 	pop	{r4, lr}
    9694:	eaffff9b 	b	9508 <CTimer::PollKernelTimers()>
    9698:	ebfffe03 	bl	8eac <EnterCritical>
    969c:	e5943004 	ldr	r3, [r4, #4]
    96a0:	e308051f 	movw	r0, #34079	; 0x851f
    96a4:	e34501eb 	movt	r0, #20971	; 0x51eb
    96a8:	e2833001 	add	r3, r3, #1
    96ac:	e3a0c064 	mov	ip, #100	; 0x64
    96b0:	e5843004 	str	r3, [r4, #4]
    96b4:	e0810093 	umull	r0, r1, r3, r0
    96b8:	e5942010 	ldr	r2, [r4, #16]
    96bc:	e1a012a1 	lsr	r1, r1, #5
    96c0:	e063319c 	mls	r3, ip, r1, r3
    96c4:	e3530000 	cmp	r3, #0
    96c8:	1affffec 	bne	9680 <CTimer::InterruptHandler()+0x94>
    96cc:	eaffffe5 	b	9668 <CTimer::InterruptHandler()+0x7c>

000096d0 <CTimer::InterruptHandler(void*)>:
    96d0:	eaffffc5 	b	95ec <CTimer::InterruptHandler()>

000096d4 <CTimer::TuneMsDelay()>:
    96d4:	e92d4070 	push	{r4, r5, r6, lr}
    96d8:	e1a04000 	mov	r4, r0
    96dc:	e5943020 	ldr	r3, [r4, #32]
    96e0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    96e4:	e24dd008 	sub	sp, sp, #8
    96e8:	e5946004 	ldr	r6, [r4, #4]
    96ec:	e308551f 	movw	r5, #34079	; 0x851f
    96f0:	e34551eb 	movt	r5, #20971	; 0x51eb
    96f4:	e0000390 	mul	r0, r0, r3
    96f8:	eb000e8e 	bl	d138 <DelayLoop>
    96fc:	e5941004 	ldr	r1, [r4, #4]
    9700:	e3020710 	movw	r0, #10000	; 0x2710
    9704:	e0411006 	sub	r1, r1, r6
    9708:	eb001305 	bl	e324 <__aeabi_uidiv>
    970c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    9710:	e3413062 	movt	r3, #4194	; 0x1062
    9714:	e1a06000 	mov	r6, r0
    9718:	e5940020 	ldr	r0, [r4, #32]
    971c:	e0000690 	mul	r0, r0, r6
    9720:	e0810590 	umull	r0, r1, r0, r5
    9724:	e1a022a1 	lsr	r2, r1, #5
    9728:	e5842020 	str	r2, [r4, #32]
    972c:	e2822f7d 	add	r2, r2, #500	; 0x1f4
    9730:	e0832392 	umull	r2, r3, r2, r3
    9734:	e1a03323 	lsr	r3, r3, #6
    9738:	e5843024 	str	r3, [r4, #36]	; 0x24
    973c:	e0854596 	umull	r4, r5, r6, r5
    9740:	eb0007d9 	bl	b6ac <CLogger::Get()>
    9744:	e3a0e064 	mov	lr, #100	; 0x64
    9748:	e3a02003 	mov	r2, #3
    974c:	e59f1020 	ldr	r1, [pc, #32]	; 9774 <CTimer::TuneMsDelay()+0xa0>
    9750:	e30f3088 	movw	r3, #61576	; 0xf088
    9754:	e3403000 	movt	r3, #0
    9758:	e1a0c2a5 	lsr	ip, r5, #5
    975c:	e58dc000 	str	ip, [sp]
    9760:	e0666c9e 	mls	r6, lr, ip, r6
    9764:	e58d6004 	str	r6, [sp, #4]
    9768:	eb0008ab 	bl	ba1c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    976c:	e28dd008 	add	sp, sp, #8
    9770:	e8bd8070 	pop	{r4, r5, r6, pc}
    9774:	0000f050 	.word	0x0000f050

00009778 <CTimer::Initialize()>:
    9778:	e92d4010 	push	{r4, lr}
    977c:	e1a03000 	mov	r3, r0
    9780:	e1a04000 	mov	r4, r0
    9784:	e3a01003 	mov	r1, #3
    9788:	e5900000 	ldr	r0, [r0]
    978c:	e30926d0 	movw	r2, #38608	; 0x96d0
    9790:	e3402000 	movt	r2, #0
    9794:	eb000e96 	bl	d1f4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    9798:	e3a02a03 	mov	r2, #12288	; 0x3000
    979c:	e3432f00 	movt	r2, #16128	; 0x3f00
    97a0:	e3a03df2 	mov	r3, #15488	; 0x3c80
    97a4:	e34f3e36 	movt	r3, #65078	; 0xfe36
    97a8:	e1a00004 	mov	r0, r4
    97ac:	e5823004 	str	r3, [r2, #4]
    97b0:	e5923004 	ldr	r3, [r2, #4]
    97b4:	e2833c27 	add	r3, r3, #9984	; 0x2700
    97b8:	e2833010 	add	r3, r3, #16
    97bc:	e5823018 	str	r3, [r2, #24]
    97c0:	ebffffc3 	bl	96d4 <CTimer::TuneMsDelay()>
    97c4:	e3a00001 	mov	r0, #1
    97c8:	e8bd8010 	pop	{r4, pc}

000097cc <CTimer::SimpleMsDelay(unsigned int)>:
    97cc:	e2503000 	subs	r3, r0, #0
    97d0:	012fff1e 	bxeq	lr
    97d4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    97d8:	e0000390 	mul	r0, r0, r3
    97dc:	e3500000 	cmp	r0, #0
    97e0:	012fff1e 	bxeq	lr
    97e4:	e3a02a03 	mov	r2, #12288	; 0x3000
    97e8:	e3432f00 	movt	r2, #16128	; 0x3f00
    97ec:	e2800001 	add	r0, r0, #1
    97f0:	e5921004 	ldr	r1, [r2, #4]
    97f4:	e5923004 	ldr	r3, [r2, #4]
    97f8:	e0433001 	sub	r3, r3, r1
    97fc:	e1500003 	cmp	r0, r3
    9800:	8afffffb 	bhi	97f4 <CTimer::SimpleMsDelay(unsigned int)+0x28>
    9804:	e12fff1e 	bx	lr

00009808 <CTimer::SimpleusDelay(unsigned int)>:
    9808:	e3500000 	cmp	r0, #0
    980c:	012fff1e 	bxeq	lr
    9810:	e3a02a03 	mov	r2, #12288	; 0x3000
    9814:	e3432f00 	movt	r2, #16128	; 0x3f00
    9818:	e2800001 	add	r0, r0, #1
    981c:	e5921004 	ldr	r1, [r2, #4]
    9820:	e5923004 	ldr	r3, [r2, #4]
    9824:	e0433001 	sub	r3, r3, r1
    9828:	e1500003 	cmp	r0, r3
    982c:	8afffffb 	bhi	9820 <CTimer::SimpleusDelay(unsigned int)+0x18>
    9830:	e12fff1e 	bx	lr

00009834 <CTimer::IsLeapYear(unsigned int)>:
    9834:	e308251f 	movw	r2, #34079	; 0x851f
    9838:	e34521eb 	movt	r2, #20971	; 0x51eb
    983c:	e3a0c064 	mov	ip, #100	; 0x64
    9840:	e0832290 	umull	r2, r3, r0, r2
    9844:	e1a012a3 	lsr	r1, r3, #5
    9848:	e061019c 	mls	r1, ip, r1, r0
    984c:	e3510000 	cmp	r1, #0
    9850:	0a000003 	beq	9864 <CTimer::IsLeapYear(unsigned int)+0x30>
    9854:	e3100003 	tst	r0, #3
    9858:	03a00001 	moveq	r0, #1
    985c:	13a00000 	movne	r0, #0
    9860:	e12fff1e 	bx	lr
    9864:	e1a033a3 	lsr	r3, r3, #7
    9868:	e3a02e19 	mov	r2, #400	; 0x190
    986c:	e0600392 	mls	r0, r2, r3, r0
    9870:	e16f0f10 	clz	r0, r0
    9874:	e1a002a0 	lsr	r0, r0, #5
    9878:	e12fff1e 	bx	lr

0000987c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    987c:	e3500001 	cmp	r0, #1
    9880:	0a000003 	beq	9894 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    9884:	e30f3020 	movw	r3, #61472	; 0xf020
    9888:	e3403000 	movt	r3, #0
    988c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    9890:	e12fff1e 	bx	lr
    9894:	e308251f 	movw	r2, #34079	; 0x851f
    9898:	e34521eb 	movt	r2, #20971	; 0x51eb
    989c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    98a0:	e3a0e064 	mov	lr, #100	; 0x64
    98a4:	e0832291 	umull	r2, r3, r1, r2
    98a8:	e1a0c2a3 	lsr	ip, r3, #5
    98ac:	e06c1c9e 	mls	ip, lr, ip, r1
    98b0:	e35c0000 	cmp	ip, #0
    98b4:	0a000008 	beq	98dc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    98b8:	e3110003 	tst	r1, #3
    98bc:	03a01001 	moveq	r1, #1
    98c0:	13a01000 	movne	r1, #0
    98c4:	e3510000 	cmp	r1, #0
    98c8:	030f3020 	movweq	r3, #61472	; 0xf020
    98cc:	03403000 	movteq	r3, #0
    98d0:	13a0001d 	movne	r0, #29
    98d4:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    98d8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    98dc:	e1a033a3 	lsr	r3, r3, #7
    98e0:	e3a02e19 	mov	r2, #400	; 0x190
    98e4:	e0611392 	mls	r1, r2, r3, r1
    98e8:	e16f1f11 	clz	r1, r1
    98ec:	e1a012a1 	lsr	r1, r1, #5
    98f0:	eafffff3 	b	98c4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

000098f4 <CTimer::Get()>:
    98f4:	e3003560 	movw	r3, #1376	; 0x560
    98f8:	e3403001 	movt	r3, #1
    98fc:	e5930000 	ldr	r0, [r3]
    9900:	e12fff1e 	bx	lr

00009904 <memcpy>:
    9904:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9908:	e352007f 	cmp	r2, #127	; 0x7f
    990c:	9a00000b 	bls	9940 <memcpy+0x3c>
    9910:	e3110003 	tst	r1, #3
    9914:	1a000009 	bne	9940 <memcpy+0x3c>
    9918:	e3100003 	tst	r0, #3
    991c:	1a000007 	bne	9940 <memcpy+0x3c>
    9920:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    9924:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    9928:	e2422020 	sub	r2, r2, #32
    992c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    9930:	f5d1f040 	pld	[r1, #64]	; 0x40
    9934:	e352001f 	cmp	r2, #31
    9938:	8afffff9 	bhi	9924 <memcpy+0x20>
    993c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    9940:	e3520000 	cmp	r2, #0
    9944:	0a000003 	beq	9958 <memcpy+0x54>
    9948:	e4d13001 	ldrb	r3, [r1], #1
    994c:	e2522001 	subs	r2, r2, #1
    9950:	e4c03001 	strb	r3, [r0], #1
    9954:	1afffffb 	bne	9948 <memcpy+0x44>
    9958:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    995c:	e12fff1e 	bx	lr

00009960 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    9960:	e1a01000 	mov	r1, r0
    9964:	e3a0c00a 	mov	ip, #10
    9968:	e3a00000 	mov	r0, #0
    996c:	ea000007 	b	9990 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x30>
    9970:	e3720001 	cmn	r2, #1
    9974:	13a03000 	movne	r3, #0
    9978:	03a03001 	moveq	r3, #1
    997c:	e1500002 	cmp	r0, r2
    9980:	83833001 	orrhi	r3, r3, #1
    9984:	e1a00002 	mov	r0, r2
    9988:	e3530000 	cmp	r3, #0
    998c:	1a000007 	bne	99b0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x50>
    9990:	e0d120d1 	ldrsb	r2, [r1], #1
    9994:	e2423030 	sub	r3, r2, #48	; 0x30
    9998:	e3520000 	cmp	r2, #0
    999c:	e022309c 	mla	r2, ip, r0, r3
    99a0:	e6ef3073 	uxtb	r3, r3
    99a4:	012fff1e 	bxeq	lr
    99a8:	e3530009 	cmp	r3, #9
    99ac:	9affffef 	bls	9970 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x10>
    99b0:	e3e00000 	mvn	r0, #0
    99b4:	e12fff1e 	bx	lr

000099b8 <CKernelOptions::~CKernelOptions()>:
    99b8:	e3003564 	movw	r3, #1380	; 0x564
    99bc:	e3403001 	movt	r3, #1
    99c0:	e3a02000 	mov	r2, #0
    99c4:	e5832000 	str	r2, [r3]
    99c8:	e12fff1e 	bx	lr

000099cc <CKernelOptions::GetWidth() const>:
    99cc:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    99d0:	e12fff1e 	bx	lr

000099d4 <CKernelOptions::GetHeight() const>:
    99d4:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    99d8:	e12fff1e 	bx	lr

000099dc <CKernelOptions::GetLogDevice() const>:
    99dc:	e2800e81 	add	r0, r0, #2064	; 0x810
    99e0:	e2800008 	add	r0, r0, #8
    99e4:	e12fff1e 	bx	lr

000099e8 <CKernelOptions::GetLogLevel() const>:
    99e8:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    99ec:	e12fff1e 	bx	lr

000099f0 <CKernelOptions::GetKeyMap() const>:
    99f0:	e2800e83 	add	r0, r0, #2096	; 0x830
    99f4:	e12fff1e 	bx	lr

000099f8 <CKernelOptions::GetUSBPowerDelay() const>:
    99f8:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    99fc:	e12fff1e 	bx	lr

00009a00 <CKernelOptions::GetCPUSpeed() const>:
    9a00:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    9a04:	e12fff1e 	bx	lr

00009a08 <CKernelOptions::GetSoCMaxTemp() const>:
    9a08:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    9a0c:	e12fff1e 	bx	lr

00009a10 <CKernelOptions::Get()>:
    9a10:	e3003564 	movw	r3, #1380	; 0x564
    9a14:	e3403001 	movt	r3, #1
    9a18:	e5930000 	ldr	r0, [r3]
    9a1c:	e12fff1e 	bx	lr

00009a20 <CKernelOptions::GetToken()>:
    9a20:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    9a24:	e1d320d0 	ldrsb	r2, [r3]
    9a28:	e3520000 	cmp	r2, #0
    9a2c:	1a000005 	bne	9a48 <CKernelOptions::GetToken()+0x28>
    9a30:	ea000016 	b	9a90 <CKernelOptions::GetToken()+0x70>
    9a34:	e2833001 	add	r3, r3, #1
    9a38:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    9a3c:	e1d320d0 	ldrsb	r2, [r3]
    9a40:	e3520000 	cmp	r2, #0
    9a44:	0a000011 	beq	9a90 <CKernelOptions::GetToken()+0x70>
    9a48:	e3520020 	cmp	r2, #32
    9a4c:	0afffff8 	beq	9a34 <CKernelOptions::GetToken()+0x14>
    9a50:	e1a02003 	mov	r2, r3
    9a54:	ea000000 	b	9a5c <CKernelOptions::GetToken()+0x3c>
    9a58:	e1a02001 	mov	r2, r1
    9a5c:	e2821001 	add	r1, r2, #1
    9a60:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    9a64:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    9a68:	e35c0000 	cmp	ip, #0
    9a6c:	0a000008 	beq	9a94 <CKernelOptions::GetToken()+0x74>
    9a70:	e35c0020 	cmp	ip, #32
    9a74:	1afffff7 	bne	9a58 <CKernelOptions::GetToken()+0x38>
    9a78:	e2822002 	add	r2, r2, #2
    9a7c:	e3a0c000 	mov	ip, #0
    9a80:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    9a84:	e1a00003 	mov	r0, r3
    9a88:	e5c1c000 	strb	ip, [r1]
    9a8c:	e12fff1e 	bx	lr
    9a90:	e3a03000 	mov	r3, #0
    9a94:	e1a00003 	mov	r0, r3
    9a98:	e12fff1e 	bx	lr

00009a9c <CKernelOptions::CKernelOptions()>:
    9a9c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9aa0:	e2807e81 	add	r7, r0, #2064	; 0x810
    9aa4:	e2877008 	add	r7, r7, #8
    9aa8:	e1a05000 	mov	r5, r0
    9aac:	e2809e83 	add	r9, r0, #2096	; 0x830
    9ab0:	e24dd01c 	sub	sp, sp, #28
    9ab4:	e3a04000 	mov	r4, #0
    9ab8:	e3a02004 	mov	r2, #4
    9abc:	e3a0303c 	mov	r3, #60	; 0x3c
    9ac0:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    9ac4:	e30f10d0 	movw	r1, #61648	; 0xf0d0
    9ac8:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    9acc:	e3401000 	movt	r1, #0
    9ad0:	e1a00007 	mov	r0, r7
    9ad4:	e5854810 	str	r4, [r5, #2064]	; 0x810
    9ad8:	e5854814 	str	r4, [r5, #2068]	; 0x814
    9adc:	e5854834 	str	r4, [r5, #2100]	; 0x834
    9ae0:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    9ae4:	eb00125f 	bl	e468 <strcpy>
    9ae8:	e1a00009 	mov	r0, r9
    9aec:	e30f10d8 	movw	r1, #61656	; 0xf0d8
    9af0:	e3401000 	movt	r1, #0
    9af4:	eb00125b 	bl	e468 <strcpy>
    9af8:	e3003564 	movw	r3, #1380	; 0x564
    9afc:	e3403001 	movt	r3, #1
    9b00:	e28d0010 	add	r0, sp, #16
    9b04:	e5835000 	str	r5, [r3]
    9b08:	ebfffaa0 	bl	8590 <CBcmPropertyTags::CBcmPropertyTags()>
    9b0c:	e58d4000 	str	r4, [sp]
    9b10:	e1a02005 	mov	r2, r5
    9b14:	e28d0010 	add	r0, sp, #16
    9b18:	e3a01001 	mov	r1, #1
    9b1c:	e300380c 	movw	r3, #2060	; 0x80c
    9b20:	e3401005 	movt	r1, #5
    9b24:	ebfffac5 	bl	8640 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9b28:	e1500004 	cmp	r0, r4
    9b2c:	0a000040 	beq	9c34 <CKernelOptions::CKernelOptions()+0x198>
    9b30:	e5953008 	ldr	r3, [r5, #8]
    9b34:	e3530b02 	cmp	r3, #2048	; 0x800
    9b38:	2a00003d 	bcs	9c34 <CKernelOptions::CKernelOptions()+0x198>
    9b3c:	e0853003 	add	r3, r5, r3
    9b40:	e30f612c 	movw	r6, #61740	; 0xf12c
    9b44:	e30f80dc 	movw	r8, #61660	; 0xf0dc
    9b48:	e30fa0e4 	movw	sl, #61668	; 0xf0e4
    9b4c:	e3406000 	movt	r6, #0
    9b50:	e3408000 	movt	r8, #0
    9b54:	e340a000 	movt	sl, #0
    9b58:	e5c3400c 	strb	r4, [r3, #12]
    9b5c:	e285300c 	add	r3, r5, #12
    9b60:	e585380c 	str	r3, [r5, #2060]	; 0x80c
    9b64:	e1a00005 	mov	r0, r5
    9b68:	ebffffac 	bl	9a20 <CKernelOptions::GetToken()>
    9b6c:	e250b000 	subs	fp, r0, #0
    9b70:	0a00002f 	beq	9c34 <CKernelOptions::CKernelOptions()+0x198>
    9b74:	e1db30d0 	ldrsb	r3, [fp]
    9b78:	e3530000 	cmp	r3, #0
    9b7c:	0a000008 	beq	9ba4 <CKernelOptions::CKernelOptions()+0x108>
    9b80:	e353003d 	cmp	r3, #61	; 0x3d
    9b84:	e1a0400b 	mov	r4, fp
    9b88:	1a000002 	bne	9b98 <CKernelOptions::CKernelOptions()+0xfc>
    9b8c:	ea00002d 	b	9c48 <CKernelOptions::CKernelOptions()+0x1ac>
    9b90:	e353003d 	cmp	r3, #61	; 0x3d
    9b94:	0a00002b 	beq	9c48 <CKernelOptions::CKernelOptions()+0x1ac>
    9b98:	e1f430d1 	ldrsb	r3, [r4, #1]!
    9b9c:	e3530000 	cmp	r3, #0
    9ba0:	1afffffa 	bne	9b90 <CKernelOptions::CKernelOptions()+0xf4>
    9ba4:	e1a01006 	mov	r1, r6
    9ba8:	e1a0000b 	mov	r0, fp
    9bac:	eb001212 	bl	e3fc <strcmp>
    9bb0:	e3500000 	cmp	r0, #0
    9bb4:	0affffea 	beq	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9bb8:	e1a01008 	mov	r1, r8
    9bbc:	e1a0000b 	mov	r0, fp
    9bc0:	eb00120d 	bl	e3fc <strcmp>
    9bc4:	e3500000 	cmp	r0, #0
    9bc8:	13a03000 	movne	r3, #0
    9bcc:	0affffe4 	beq	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9bd0:	e1a0100a 	mov	r1, sl
    9bd4:	e1a0000b 	mov	r0, fp
    9bd8:	e58d300c 	str	r3, [sp, #12]
    9bdc:	eb001206 	bl	e3fc <strcmp>
    9be0:	e59d300c 	ldr	r3, [sp, #12]
    9be4:	e2504000 	subs	r4, r0, #0
    9be8:	0a00002a 	beq	9c98 <CKernelOptions::CKernelOptions()+0x1fc>
    9bec:	e30f10ec 	movw	r1, #61676	; 0xf0ec
    9bf0:	e1a0000b 	mov	r0, fp
    9bf4:	e3401000 	movt	r1, #0
    9bf8:	e58d300c 	str	r3, [sp, #12]
    9bfc:	eb0011fe 	bl	e3fc <strcmp>
    9c00:	e59d300c 	ldr	r3, [sp, #12]
    9c04:	e3500000 	cmp	r0, #0
    9c08:	1a000028 	bne	9cb0 <CKernelOptions::CKernelOptions()+0x214>
    9c0c:	e3530000 	cmp	r3, #0
    9c10:	0affffd3 	beq	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9c14:	e1d320d0 	ldrsb	r2, [r3]
    9c18:	e3520000 	cmp	r2, #0
    9c1c:	0affffd0 	beq	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9c20:	e1a00003 	mov	r0, r3
    9c24:	ebffff4d 	bl	9960 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9c28:	e3500004 	cmp	r0, #4
    9c2c:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    9c30:	eaffffcb 	b	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9c34:	e28d0010 	add	r0, sp, #16
    9c38:	ebfffa5a 	bl	85a8 <CBcmPropertyTags::~CBcmPropertyTags()>
    9c3c:	e1a00005 	mov	r0, r5
    9c40:	e28dd01c 	add	sp, sp, #28
    9c44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c48:	e3a03000 	mov	r3, #0
    9c4c:	e1a01006 	mov	r1, r6
    9c50:	e5c43000 	strb	r3, [r4]
    9c54:	e1a0000b 	mov	r0, fp
    9c58:	eb0011e7 	bl	e3fc <strcmp>
    9c5c:	e2843001 	add	r3, r4, #1
    9c60:	e3500000 	cmp	r0, #0
    9c64:	1a000058 	bne	9dcc <CKernelOptions::CKernelOptions()+0x330>
    9c68:	e3530000 	cmp	r3, #0
    9c6c:	0affffbc 	beq	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9c70:	e1d420d1 	ldrsb	r2, [r4, #1]
    9c74:	e3520000 	cmp	r2, #0
    9c78:	0affffb9 	beq	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9c7c:	e1a00003 	mov	r0, r3
    9c80:	ebffff36 	bl	9960 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9c84:	e300353c 	movw	r3, #1340	; 0x53c
    9c88:	e2402d0a 	sub	r2, r0, #640	; 0x280
    9c8c:	e1520003 	cmp	r2, r3
    9c90:	95850810 	strls	r0, [r5, #2064]	; 0x810
    9c94:	eaffffb2 	b	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9c98:	e1a01003 	mov	r1, r3
    9c9c:	e3a02013 	mov	r2, #19
    9ca0:	e1a00007 	mov	r0, r7
    9ca4:	eb0011fa 	bl	e494 <strncpy>
    9ca8:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    9cac:	eaffffac 	b	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9cb0:	e30f10f8 	movw	r1, #61688	; 0xf0f8
    9cb4:	e1a0000b 	mov	r0, fp
    9cb8:	e3401000 	movt	r1, #0
    9cbc:	e58d300c 	str	r3, [sp, #12]
    9cc0:	eb0011cd 	bl	e3fc <strcmp>
    9cc4:	e59d300c 	ldr	r3, [sp, #12]
    9cc8:	e2504000 	subs	r4, r0, #0
    9ccc:	1a000005 	bne	9ce8 <CKernelOptions::CKernelOptions()+0x24c>
    9cd0:	e1a01003 	mov	r1, r3
    9cd4:	e3a02002 	mov	r2, #2
    9cd8:	e1a00009 	mov	r0, r9
    9cdc:	eb0011ec 	bl	e494 <strncpy>
    9ce0:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    9ce4:	eaffff9e 	b	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9ce8:	e30f1100 	movw	r1, #61696	; 0xf100
    9cec:	e1a0000b 	mov	r0, fp
    9cf0:	e3401000 	movt	r1, #0
    9cf4:	e58d300c 	str	r3, [sp, #12]
    9cf8:	eb0011bf 	bl	e3fc <strcmp>
    9cfc:	e59d300c 	ldr	r3, [sp, #12]
    9d00:	e3500000 	cmp	r0, #0
    9d04:	1a00000b 	bne	9d38 <CKernelOptions::CKernelOptions()+0x29c>
    9d08:	e3530000 	cmp	r3, #0
    9d0c:	0affff94 	beq	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9d10:	e1d320d0 	ldrsb	r2, [r3]
    9d14:	e3520000 	cmp	r2, #0
    9d18:	0affff91 	beq	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9d1c:	e1a00003 	mov	r0, r3
    9d20:	ebffff0e 	bl	9960 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9d24:	e3013e78 	movw	r3, #7800	; 0x1e78
    9d28:	e24020c8 	sub	r2, r0, #200	; 0xc8
    9d2c:	e1520003 	cmp	r2, r3
    9d30:	95850834 	strls	r0, [r5, #2100]	; 0x834
    9d34:	eaffff8a 	b	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9d38:	e30f1110 	movw	r1, #61712	; 0xf110
    9d3c:	e1a0000b 	mov	r0, fp
    9d40:	e3401000 	movt	r1, #0
    9d44:	e58d300c 	str	r3, [sp, #12]
    9d48:	eb0011ab 	bl	e3fc <strcmp>
    9d4c:	e59d300c 	ldr	r3, [sp, #12]
    9d50:	e3500000 	cmp	r0, #0
    9d54:	1a000007 	bne	9d78 <CKernelOptions::CKernelOptions()+0x2dc>
    9d58:	e1a00003 	mov	r0, r3
    9d5c:	e30f1118 	movw	r1, #61720	; 0xf118
    9d60:	e3401000 	movt	r1, #0
    9d64:	eb0011a4 	bl	e3fc <strcmp>
    9d68:	e3500000 	cmp	r0, #0
    9d6c:	03a03001 	moveq	r3, #1
    9d70:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    9d74:	eaffff7a 	b	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9d78:	e1a0000b 	mov	r0, fp
    9d7c:	e30f1120 	movw	r1, #61728	; 0xf120
    9d80:	e3401000 	movt	r1, #0
    9d84:	e58d300c 	str	r3, [sp, #12]
    9d88:	eb00119b 	bl	e3fc <strcmp>
    9d8c:	e59d300c 	ldr	r3, [sp, #12]
    9d90:	e2902000 	adds	r2, r0, #0
    9d94:	13a02001 	movne	r2, #1
    9d98:	e3530000 	cmp	r3, #0
    9d9c:	03822001 	orreq	r2, r2, #1
    9da0:	e3520000 	cmp	r2, #0
    9da4:	1affff6e 	bne	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9da8:	e1d320d0 	ldrsb	r2, [r3]
    9dac:	e3520000 	cmp	r2, #0
    9db0:	0affff6b 	beq	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9db4:	e1a00003 	mov	r0, r3
    9db8:	ebfffee8 	bl	9960 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9dbc:	e2403028 	sub	r3, r0, #40	; 0x28
    9dc0:	e3530026 	cmp	r3, #38	; 0x26
    9dc4:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    9dc8:	eaffff65 	b	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9dcc:	e1a01008 	mov	r1, r8
    9dd0:	e1a0000b 	mov	r0, fp
    9dd4:	e58d300c 	str	r3, [sp, #12]
    9dd8:	eb001187 	bl	e3fc <strcmp>
    9ddc:	e59d300c 	ldr	r3, [sp, #12]
    9de0:	e3500000 	cmp	r0, #0
    9de4:	1affff79 	bne	9bd0 <CKernelOptions::CKernelOptions()+0x134>
    9de8:	e3530000 	cmp	r3, #0
    9dec:	0affff5c 	beq	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9df0:	e1d420d1 	ldrsb	r2, [r4, #1]
    9df4:	e3520000 	cmp	r2, #0
    9df8:	0affff59 	beq	9b64 <CKernelOptions::CKernelOptions()+0xc8>
    9dfc:	e1a00003 	mov	r0, r3
    9e00:	ebfffed6 	bl	9960 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9e04:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    9e08:	e3530f96 	cmp	r3, #600	; 0x258
    9e0c:	95850814 	strls	r0, [r5, #2068]	; 0x814
    9e10:	eaffff53 	b	9b64 <CKernelOptions::CKernelOptions()+0xc8>

00009e14 <CKernelOptions::GetOptionValue(char*)>:
    9e14:	e1d030d0 	ldrsb	r3, [r0]
    9e18:	e3530000 	cmp	r3, #0
    9e1c:	1a000003 	bne	9e30 <CKernelOptions::GetOptionValue(char*)+0x1c>
    9e20:	ea000007 	b	9e44 <CKernelOptions::GetOptionValue(char*)+0x30>
    9e24:	e1f030d1 	ldrsb	r3, [r0, #1]!
    9e28:	e3530000 	cmp	r3, #0
    9e2c:	0a000004 	beq	9e44 <CKernelOptions::GetOptionValue(char*)+0x30>
    9e30:	e353003d 	cmp	r3, #61	; 0x3d
    9e34:	1afffffa 	bne	9e24 <CKernelOptions::GetOptionValue(char*)+0x10>
    9e38:	e2803001 	add	r3, r0, #1
    9e3c:	e3a02000 	mov	r2, #0
    9e40:	e5c02000 	strb	r2, [r0]
    9e44:	e1a00003 	mov	r0, r3
    9e48:	e12fff1e 	bx	lr

00009e4c <CKernelOptions::GetDecimal(char*)>:
    9e4c:	e2503000 	subs	r3, r0, #0
    9e50:	0a000002 	beq	9e60 <CKernelOptions::GetDecimal(char*)+0x14>
    9e54:	e1d330d0 	ldrsb	r3, [r3]
    9e58:	e3530000 	cmp	r3, #0
    9e5c:	1a000001 	bne	9e68 <CKernelOptions::GetDecimal(char*)+0x1c>
    9e60:	e3e00000 	mvn	r0, #0
    9e64:	e12fff1e 	bx	lr
    9e68:	eafffebc 	b	9960 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

00009e6c <CPageTable::CPageTable()>:
    9e6c:	e3a01000 	mov	r1, #0
    9e70:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
    9e74:	e92d4010 	push	{r4, lr}
    9e78:	e1a0c001 	mov	ip, r1
    9e7c:	e1a04000 	mov	r4, r0
    9e80:	e1a03002 	mov	r3, r2
    9e84:	e3a0e002 	mov	lr, #2
    9e88:	e3a00001 	mov	r0, #1
    9e8c:	e8840006 	stm	r4, {r1, r2}
    9e90:	e5d32000 	ldrb	r2, [r3]
    9e94:	e35c0b01 	cmp	ip, #1024	; 0x400
    9e98:	e5d31002 	ldrb	r1, [r3, #2]
    9e9c:	e2833004 	add	r3, r3, #4
    9ea0:	e7c1201e 	bfi	r2, lr, #0, #2
    9ea4:	e3811001 	orr	r1, r1, #1
    9ea8:	e6ef2072 	uxtb	r2, r2
    9eac:	e20110f9 	and	r1, r1, #249	; 0xf9
    9eb0:	e3822004 	orr	r2, r2, #4
    9eb4:	e7c3119f 	bfc	r1, #3, #1
    9eb8:	e20220f7 	and	r2, r2, #247	; 0xf7
    9ebc:	e5431002 	strb	r1, [r3, #-2]
    9ec0:	e7c4221f 	bfc	r2, #4, #1
    9ec4:	e5432004 	strb	r2, [r3, #-4]
    9ec8:	e15320b4 	ldrh	r2, [r3, #-4]
    9ecc:	e15310b2 	ldrh	r1, [r3, #-2]
    9ed0:	e7c8229f 	bfc	r2, #5, #4
    9ed4:	e14320b4 	strh	r2, [r3, #-4]
    9ed8:	e7cf121c 	bfi	r1, ip, #4, #12
    9edc:	e28cc001 	add	ip, ip, #1
    9ee0:	e1a02422 	lsr	r2, r2, #8
    9ee4:	e14310b2 	strh	r1, [r3, #-2]
    9ee8:	e20220fd 	and	r2, r2, #253	; 0xfd
    9eec:	e7c32110 	bfi	r2, r0, #2, #2
    9ef0:	e202208f 	and	r2, r2, #143	; 0x8f
    9ef4:	e7c7239f 	bfc	r2, #7, #1
    9ef8:	e5432003 	strb	r2, [r3, #-3]
    9efc:	25532004 	ldrbcs	r2, [r3, #-4]
    9f00:	23822010 	orrcs	r2, r2, #16
    9f04:	25432004 	strbcs	r2, [r3, #-4]
    9f08:	e35c0a01 	cmp	ip, #4096	; 0x1000
    9f0c:	1affffdf 	bne	9e90 <CPageTable::CPageTable()+0x24>
    9f10:	eb000f5a 	bl	dc80 <CleanDataCache>
    9f14:	e1a00004 	mov	r0, r4
    9f18:	e8bd8010 	pop	{r4, pc}

00009f1c <CPageTable::CPageTable(unsigned int)>:
    9f1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9f20:	e3a06001 	mov	r6, #1
    9f24:	e5806000 	str	r6, [r0]
    9f28:	e1a04000 	mov	r4, r0
    9f2c:	e1a05001 	mov	r5, r1
    9f30:	eb001064 	bl	e0c8 <palloc>
    9f34:	e3a0c000 	mov	ip, #0
    9f38:	e30e1f78 	movw	r1, #61304	; 0xef78
    9f3c:	e1a0e006 	mov	lr, r6
    9f40:	e3401000 	movt	r1, #0
    9f44:	e1a0700c 	mov	r7, ip
    9f48:	e3a06002 	mov	r6, #2
    9f4c:	e1a03000 	mov	r3, r0
    9f50:	e5840004 	str	r0, [r4, #4]
    9f54:	ea000009 	b	9f80 <CPageTable::CPageTable(unsigned int)+0x64>
    9f58:	e6ef0072 	uxtb	r0, r2
    9f5c:	e5d32002 	ldrb	r2, [r3, #2]
    9f60:	e7c30197 	bfi	r0, r7, #3, #1
    9f64:	e5c30000 	strb	r0, [r3]
    9f68:	e3822001 	orr	r2, r2, #1
    9f6c:	e5c32002 	strb	r2, [r3, #2]
    9f70:	e28cc601 	add	ip, ip, #1048576	; 0x100000
    9f74:	e2833004 	add	r3, r3, #4
    9f78:	e35c0101 	cmp	ip, #1073741824	; 0x40000000
    9f7c:	0a00001f 	beq	a000 <CPageTable::CPageTable(unsigned int)+0xe4>
    9f80:	e5d32001 	ldrb	r2, [r3, #1]
    9f84:	e7e30a5c 	ubfx	r0, ip, #20, #4
    9f88:	e15c0001 	cmp	ip, r1
    9f8c:	e386800c 	orr	r8, r6, #12
    9f90:	e20220fc 	and	r2, r2, #252	; 0xfc
    9f94:	e1a00200 	lsl	r0, r0, #4
    9f98:	e7c3211e 	bfi	r2, lr, #2, #2
    9f9c:	e5c30002 	strb	r0, [r3, #2]
    9fa0:	e202208f 	and	r2, r2, #143	; 0x8f
    9fa4:	e1a00c2c 	lsr	r0, ip, #24
    9fa8:	e7c7239f 	bfc	r2, #7, #1
    9fac:	e5c38000 	strb	r8, [r3]
    9fb0:	e5c32001 	strb	r2, [r3, #1]
    9fb4:	e5c30003 	strb	r0, [r3, #3]
    9fb8:	3affffec 	bcc	9f70 <CPageTable::CPageTable(unsigned int)+0x54>
    9fbc:	e155000c 	cmp	r5, ip
    9fc0:	e6ef2078 	uxtb	r2, r8
    9fc4:	e3822010 	orr	r2, r2, #16
    9fc8:	e5c32000 	strb	r2, [r3]
    9fcc:	9affffe1 	bls	9f58 <CPageTable::CPageTable(unsigned int)+0x3c>
    9fd0:	e35c0501 	cmp	ip, #4194304	; 0x400000
    9fd4:	1affffe5 	bne	9f70 <CPageTable::CPageTable(unsigned int)+0x54>
    9fd8:	e5d32000 	ldrb	r2, [r3]
    9fdc:	e3a0c605 	mov	ip, #5242880	; 0x500000
    9fe0:	e5d30002 	ldrb	r0, [r3, #2]
    9fe4:	e2833004 	add	r3, r3, #4
    9fe8:	e20220fb 	and	r2, r2, #251	; 0xfb
    9fec:	e7c32197 	bfi	r2, r7, #3, #1
    9ff0:	e3800001 	orr	r0, r0, #1
    9ff4:	e5432004 	strb	r2, [r3, #-4]
    9ff8:	e5430002 	strb	r0, [r3, #-2]
    9ffc:	eaffffdf 	b	9f80 <CPageTable::CPageTable(unsigned int)+0x64>
    a000:	eb000f1e 	bl	dc80 <CleanDataCache>
    a004:	e1a00004 	mov	r0, r4
    a008:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a00c <CPageTable::~CPageTable()>:
    a00c:	e5903000 	ldr	r3, [r0]
    a010:	e92d4010 	push	{r4, lr}
    a014:	e3530000 	cmp	r3, #0
    a018:	e1a04000 	mov	r4, r0
    a01c:	0a000001 	beq	a028 <CPageTable::~CPageTable()+0x1c>
    a020:	e5900004 	ldr	r0, [r0, #4]
    a024:	eb00104b 	bl	e158 <pfree>
    a028:	e1a00004 	mov	r0, r4
    a02c:	e8bd8010 	pop	{r4, pc}

0000a030 <CPageTable::GetBaseAddress() const>:
    a030:	e5900004 	ldr	r0, [r0, #4]
    a034:	e3800059 	orr	r0, r0, #89	; 0x59
    a038:	e12fff1e 	bx	lr

0000a03c <CScreenDevice::~CScreenDevice()>:
    a03c:	e590200c 	ldr	r2, [r0, #12]
    a040:	e59f3068 	ldr	r3, [pc, #104]	; a0b0 <CScreenDevice::~CScreenDevice()+0x74>
    a044:	e3520000 	cmp	r2, #0
    a048:	e92d4070 	push	{r4, r5, r6, lr}
    a04c:	e1a04000 	mov	r4, r0
    a050:	e5803000 	str	r3, [r0]
    a054:	0a000003 	beq	a068 <CScreenDevice::~CScreenDevice()+0x2c>
    a058:	e5900018 	ldr	r0, [r0, #24]
    a05c:	e3500000 	cmp	r0, #0
    a060:	0a000000 	beq	a068 <CScreenDevice::~CScreenDevice()+0x2c>
    a064:	ebfffb8d 	bl	8ea0 <operator delete[](void*)>
    a068:	e5945010 	ldr	r5, [r4, #16]
    a06c:	e3a03000 	mov	r3, #0
    a070:	e5843018 	str	r3, [r4, #24]
    a074:	e1550003 	cmp	r5, r3
    a078:	0a000004 	beq	a090 <CScreenDevice::~CScreenDevice()+0x54>
    a07c:	e1a00005 	mov	r0, r5
    a080:	eb00123a 	bl	e970 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    a084:	e1a00005 	mov	r0, r5
    a088:	e3a01024 	mov	r1, #36	; 0x24
    a08c:	ebfffb84 	bl	8ea4 <operator delete(void*, unsigned int)>
    a090:	e3a03000 	mov	r3, #0
    a094:	e2840014 	add	r0, r4, #20
    a098:	e5843010 	str	r3, [r4, #16]
    a09c:	eb000475 	bl	b278 <CCharGenerator::~CCharGenerator()>
    a0a0:	e1a00004 	mov	r0, r4
    a0a4:	eb0012b2 	bl	eb74 <CDevice::~CDevice()>
    a0a8:	e1a00004 	mov	r0, r4
    a0ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    a0b0:	0000f13c 	.word	0x0000f13c

0000a0b4 <CScreenDevice::~CScreenDevice()>:
    a0b4:	e92d4010 	push	{r4, lr}
    a0b8:	e1a04000 	mov	r4, r0
    a0bc:	ebffffde 	bl	a03c <CScreenDevice::~CScreenDevice()>
    a0c0:	e1a00004 	mov	r0, r4
    a0c4:	e3a01060 	mov	r1, #96	; 0x60
    a0c8:	ebfffb75 	bl	8ea4 <operator delete(void*, unsigned int)>
    a0cc:	e1a00004 	mov	r0, r4
    a0d0:	e8bd8010 	pop	{r4, pc}

0000a0d4 <CScreenDevice::InvertCursor() [clone .part.6]>:
    a0d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a0d8:	e2806014 	add	r6, r0, #20
    a0dc:	e1a05000 	mov	r5, r0
    a0e0:	e3a08000 	mov	r8, #0
    a0e4:	e1a00006 	mov	r0, r6
    a0e8:	eb000467 	bl	b28c <CCharGenerator::GetUnderline() const>
    a0ec:	e1a07000 	mov	r7, r0
    a0f0:	e1a00006 	mov	r0, r6
    a0f4:	eb000462 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a0f8:	e1500007 	cmp	r0, r7
    a0fc:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    a100:	e3a04000 	mov	r4, #0
    a104:	ea000013 	b	a158 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    a108:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    a10c:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    a110:	e0843003 	add	r3, r4, r3
    a114:	e1530002 	cmp	r3, r2
    a118:	2a00000d 	bcs	a154 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    a11c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    a120:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    a124:	e0872002 	add	r2, r7, r2
    a128:	e1520001 	cmp	r2, r1
    a12c:	2a000008 	bcs	a154 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    a130:	e5950020 	ldr	r0, [r5, #32]
    a134:	e5951018 	ldr	r1, [r5, #24]
    a138:	e0233290 	mla	r3, r0, r2, r3
    a13c:	e1a03083 	lsl	r3, r3, #1
    a140:	e19120b3 	ldrh	r2, [r1, r3]
    a144:	e3520000 	cmp	r2, #0
    a148:	118180b3 	strhne	r8, [r1, r3]
    a14c:	01d524b8 	ldrheq	r2, [r5, #72]	; 0x48
    a150:	018120b3 	strheq	r2, [r1, r3]
    a154:	e2844001 	add	r4, r4, #1
    a158:	e1a00006 	mov	r0, r6
    a15c:	eb000446 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a160:	e1500004 	cmp	r0, r4
    a164:	8affffe7 	bhi	a108 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    a168:	e2877001 	add	r7, r7, #1
    a16c:	eaffffdf 	b	a0f0 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000a170 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    a170:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a174:	e1a04000 	mov	r4, r0
    a178:	e1a05001 	mov	r5, r1
    a17c:	e1a07002 	mov	r7, r2
    a180:	e1a06003 	mov	r6, r3
    a184:	eb001286 	bl	eba4 <CDevice::CDevice()>
    a188:	e59fc054 	ldr	ip, [pc, #84]	; a1e4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x74>
    a18c:	e2840014 	add	r0, r4, #20
    a190:	e5845004 	str	r5, [r4, #4]
    a194:	e3a05000 	mov	r5, #0
    a198:	e5847008 	str	r7, [r4, #8]
    a19c:	e584600c 	str	r6, [r4, #12]
    a1a0:	e584c000 	str	ip, [r4]
    a1a4:	e5845010 	str	r5, [r4, #16]
    a1a8:	eb00042f 	bl	b26c <CCharGenerator::CCharGenerator()>
    a1ac:	e3a03001 	mov	r3, #1
    a1b0:	e3e02020 	mvn	r2, #32
    a1b4:	e5845018 	str	r5, [r4, #24]
    a1b8:	e5845030 	str	r5, [r4, #48]	; 0x30
    a1bc:	e1a00004 	mov	r0, r4
    a1c0:	e5845034 	str	r5, [r4, #52]	; 0x34
    a1c4:	e584503c 	str	r5, [r4, #60]	; 0x3c
    a1c8:	e5845040 	str	r5, [r4, #64]	; 0x40
    a1cc:	e584504c 	str	r5, [r4, #76]	; 0x4c
    a1d0:	e5845058 	str	r5, [r4, #88]	; 0x58
    a1d4:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
    a1d8:	e5843044 	str	r3, [r4, #68]	; 0x44
    a1dc:	e584305c 	str	r3, [r4, #92]	; 0x5c
    a1e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a1e4:	0000f13c 	.word	0x0000f13c

0000a1e8 <CScreenDevice::GetWidth() const>:
    a1e8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    a1ec:	e12fff1e 	bx	lr

0000a1f0 <CScreenDevice::GetHeight() const>:
    a1f0:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    a1f4:	e12fff1e 	bx	lr

0000a1f8 <CScreenDevice::GetColumns() const>:
    a1f8:	e1a03000 	mov	r3, r0
    a1fc:	e2800014 	add	r0, r0, #20
    a200:	e92d4010 	push	{r4, lr}
    a204:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    a208:	eb00041b 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a20c:	e1a01000 	mov	r1, r0
    a210:	e1a00004 	mov	r0, r4
    a214:	eb001042 	bl	e324 <__aeabi_uidiv>
    a218:	e8bd8010 	pop	{r4, pc}

0000a21c <CScreenDevice::GetRows() const>:
    a21c:	e1a03000 	mov	r3, r0
    a220:	e2800014 	add	r0, r0, #20
    a224:	e92d4010 	push	{r4, lr}
    a228:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    a22c:	eb000414 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a230:	e1a01000 	mov	r1, r0
    a234:	e1a00004 	mov	r0, r4
    a238:	eb001039 	bl	e324 <__aeabi_uidiv>
    a23c:	e8bd8010 	pop	{r4, pc}

0000a240 <CScreenDevice::GetStatus()>:
    a240:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a244:	e591c038 	ldr	ip, [r1, #56]	; 0x38
    a248:	e5916018 	ldr	r6, [r1, #24]
    a24c:	e591501c 	ldr	r5, [r1, #28]
    a250:	e5914030 	ldr	r4, [r1, #48]	; 0x30
    a254:	e591e034 	ldr	lr, [r1, #52]	; 0x34
    a258:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
    a25c:	e5806000 	str	r6, [r0]
    a260:	e5917040 	ldr	r7, [r1, #64]	; 0x40
    a264:	e5805004 	str	r5, [r0, #4]
    a268:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    a26c:	e5804008 	str	r4, [r0, #8]
    a270:	e1d154b8 	ldrh	r5, [r1, #72]	; 0x48
    a274:	e580e00c 	str	lr, [r0, #12]
    a278:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    a27c:	e580c010 	str	ip, [r0, #16]
    a280:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    a284:	e5802014 	str	r2, [r0, #20]
    a288:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    a28c:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    a290:	e5807018 	str	r7, [r0, #24]
    a294:	e580601c 	str	r6, [r0, #28]
    a298:	e1c052b0 	strh	r5, [r0, #32]
    a29c:	e5804024 	str	r4, [r0, #36]	; 0x24
    a2a0:	e580e028 	str	lr, [r0, #40]	; 0x28
    a2a4:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    a2a8:	e5802030 	str	r2, [r0, #48]	; 0x30
    a2ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000a2b0 <CScreenDevice::SetStatus(TScreenStatus)>:
    a2b0:	e24dd010 	sub	sp, sp, #16
    a2b4:	e92d4070 	push	{r4, r5, r6, lr}
    a2b8:	e28dc014 	add	ip, sp, #20
    a2bc:	e590e01c 	ldr	lr, [r0, #28]
    a2c0:	e88c000e 	stm	ip, {r1, r2, r3}
    a2c4:	e59d3018 	ldr	r3, [sp, #24]
    a2c8:	e15e0003 	cmp	lr, r3
    a2cc:	0a000003 	beq	a2e0 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    a2d0:	e3a00000 	mov	r0, #0
    a2d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    a2d8:	e28dd010 	add	sp, sp, #16
    a2dc:	e12fff1e 	bx	lr
    a2e0:	e5902020 	ldr	r2, [r0, #32]
    a2e4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a2e8:	e1520003 	cmp	r2, r3
    a2ec:	1afffff7 	bne	a2d0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a2f0:	e1a04000 	mov	r4, r0
    a2f4:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    a2f8:	e3500000 	cmp	r0, #0
    a2fc:	1a000023 	bne	a390 <CScreenDevice::SetStatus(TScreenStatus)+0xe0>
    a300:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a304:	e3530000 	cmp	r3, #0
    a308:	1afffff0 	bne	a2d0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a30c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    a310:	e3530000 	cmp	r3, #0
    a314:	1affffed 	bne	a2d0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a318:	e1a0200e 	mov	r2, lr
    a31c:	e59d1014 	ldr	r1, [sp, #20]
    a320:	e5940018 	ldr	r0, [r4, #24]
    a324:	ebfffd76 	bl	9904 <memcpy>
    a328:	e59d201c 	ldr	r2, [sp, #28]
    a32c:	e59d3020 	ldr	r3, [sp, #32]
    a330:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
    a334:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
    a338:	e3510000 	cmp	r1, #0
    a33c:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    a340:	e59de02c 	ldr	lr, [sp, #44]	; 0x2c
    a344:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    a348:	e1dd03b4 	ldrh	r0, [sp, #52]	; 0x34
    a34c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    a350:	e5842030 	str	r2, [r4, #48]	; 0x30
    a354:	e5843034 	str	r3, [r4, #52]	; 0x34
    a358:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    a35c:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    a360:	e5846038 	str	r6, [r4, #56]	; 0x38
    a364:	e584503c 	str	r5, [r4, #60]	; 0x3c
    a368:	e584e040 	str	lr, [r4, #64]	; 0x40
    a36c:	e584c044 	str	ip, [r4, #68]	; 0x44
    a370:	e1c404b8 	strh	r0, [r4, #72]	; 0x48
    a374:	e584104c 	str	r1, [r4, #76]	; 0x4c
    a378:	e5842050 	str	r2, [r4, #80]	; 0x50
    a37c:	e5843054 	str	r3, [r4, #84]	; 0x54
    a380:	1a00000f 	bne	a3c4 <CScreenDevice::SetStatus(TScreenStatus)+0x114>
    a384:	f57ff05f 	dmb	sy
    a388:	e3a00001 	mov	r0, #1
    a38c:	eaffffd0 	b	a2d4 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    a390:	ebfffac5 	bl	8eac <EnterCritical>
    a394:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a398:	e3530000 	cmp	r3, #0
    a39c:	1a000003 	bne	a3b0 <CScreenDevice::SetStatus(TScreenStatus)+0x100>
    a3a0:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    a3a4:	e3530000 	cmp	r3, #0
    a3a8:	0594e01c 	ldreq	lr, [r4, #28]
    a3ac:	0affffd9 	beq	a318 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    a3b0:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    a3b4:	e3530000 	cmp	r3, #0
    a3b8:	0affffc4 	beq	a2d0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a3bc:	ebfffac8 	bl	8ee4 <LeaveCritical>
    a3c0:	eaffffc2 	b	a2d0 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a3c4:	ebfffac6 	bl	8ee4 <LeaveCritical>
    a3c8:	eaffffed 	b	a384 <CScreenDevice::SetStatus(TScreenStatus)+0xd4>

0000a3cc <CScreenDevice::CarriageReturn()>:
    a3cc:	e3a03000 	mov	r3, #0
    a3d0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    a3d4:	e12fff1e 	bx	lr

0000a3d8 <CScreenDevice::CursorHome()>:
    a3d8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    a3dc:	e3a02000 	mov	r2, #0
    a3e0:	e580203c 	str	r2, [r0, #60]	; 0x3c
    a3e4:	e5803040 	str	r3, [r0, #64]	; 0x40
    a3e8:	e12fff1e 	bx	lr

0000a3ec <CScreenDevice::CursorLeft()>:
    a3ec:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    a3f0:	e92d4070 	push	{r4, r5, r6, lr}
    a3f4:	e3530000 	cmp	r3, #0
    a3f8:	e1a04000 	mov	r4, r0
    a3fc:	1a00000f 	bne	a440 <CScreenDevice::CursorLeft()+0x54>
    a400:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    a404:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    a408:	e1520003 	cmp	r2, r3
    a40c:	98bd8070 	popls	{r4, r5, r6, pc}
    a410:	e2806014 	add	r6, r0, #20
    a414:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    a418:	e1a00006 	mov	r0, r6
    a41c:	eb000396 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a420:	e0455000 	sub	r5, r5, r0
    a424:	e1a00006 	mov	r0, r6
    a428:	e584503c 	str	r5, [r4, #60]	; 0x3c
    a42c:	eb000394 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a430:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a434:	e0430000 	sub	r0, r3, r0
    a438:	e5840040 	str	r0, [r4, #64]	; 0x40
    a43c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a440:	e2800014 	add	r0, r0, #20
    a444:	eb00038c 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a448:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a44c:	e0430000 	sub	r0, r3, r0
    a450:	e584003c 	str	r0, [r4, #60]	; 0x3c
    a454:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a458 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    a458:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a45c:	e2806014 	add	r6, r0, #20
    a460:	e1a05000 	mov	r5, r0
    a464:	e1a04002 	mov	r4, r2
    a468:	e1a00006 	mov	r0, r6
    a46c:	e1a07001 	mov	r7, r1
    a470:	eb000381 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a474:	e2444001 	sub	r4, r4, #1
    a478:	e0040490 	mul	r4, r0, r4
    a47c:	e1a00006 	mov	r0, r6
    a480:	eb00037f 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a484:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a488:	e1540003 	cmp	r4, r3
    a48c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    a490:	e2477001 	sub	r7, r7, #1
    a494:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    a498:	e0000790 	mul	r0, r0, r7
    a49c:	e1500003 	cmp	r0, r3
    a4a0:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    a4a4:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    a4a8:	e1500003 	cmp	r0, r3
    a4ac:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    a4b0:	35850040 	strcc	r0, [r5, #64]	; 0x40
    a4b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a4b8 <CScreenDevice::CursorUp()>:
    a4b8:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    a4bc:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    a4c0:	e1520003 	cmp	r2, r3
    a4c4:	912fff1e 	bxls	lr
    a4c8:	e92d4010 	push	{r4, lr}
    a4cc:	e1a04000 	mov	r4, r0
    a4d0:	e2800014 	add	r0, r0, #20
    a4d4:	eb00036a 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a4d8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a4dc:	e0430000 	sub	r0, r3, r0
    a4e0:	e5840040 	str	r0, [r4, #64]	; 0x40
    a4e4:	e8bd8010 	pop	{r4, pc}

0000a4e8 <CScreenDevice::DeleteChars(unsigned int)>:
    a4e8:	e12fff1e 	bx	lr

0000a4ec <CScreenDevice::DeleteLines(unsigned int)>:
    a4ec:	e12fff1e 	bx	lr

0000a4f0 <CScreenDevice::InsertLines(unsigned int)>:
    a4f0:	e12fff1e 	bx	lr

0000a4f4 <CScreenDevice::InsertMode(int)>:
    a4f4:	e580104c 	str	r1, [r0, #76]	; 0x4c
    a4f8:	e12fff1e 	bx	lr

0000a4fc <CScreenDevice::ReverseScroll()>:
    a4fc:	e12fff1e 	bx	lr

0000a500 <CScreenDevice::SetCursorMode(int)>:
    a500:	e5801044 	str	r1, [r0, #68]	; 0x44
    a504:	e12fff1e 	bx	lr

0000a508 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    a508:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a50c:	e2807014 	add	r7, r0, #20
    a510:	e1a06000 	mov	r6, r0
    a514:	e1a05002 	mov	r5, r2
    a518:	e1a00007 	mov	r0, r7
    a51c:	e1a04001 	mov	r4, r1
    a520:	eb000357 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a524:	e2444001 	sub	r4, r4, #1
    a528:	e0040490 	mul	r4, r0, r4
    a52c:	e1a00007 	mov	r0, r7
    a530:	eb000353 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a534:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    a538:	e0000095 	mul	r0, r5, r0
    a53c:	e3500000 	cmp	r0, #0
    a540:	11540002 	cmpne	r4, r2
    a544:	33a03001 	movcc	r3, #1
    a548:	23a03000 	movcs	r3, #0
    a54c:	e1500002 	cmp	r0, r2
    a550:	83a03000 	movhi	r3, #0
    a554:	92033001 	andls	r3, r3, #1
    a558:	e1540000 	cmp	r4, r0
    a55c:	23a03000 	movcs	r3, #0
    a560:	32033001 	andcc	r3, r3, #1
    a564:	e3530000 	cmp	r3, #0
    a568:	e3a03000 	mov	r3, #0
    a56c:	15864034 	strne	r4, [r6, #52]	; 0x34
    a570:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    a574:	15860038 	strne	r0, [r6, #56]	; 0x38
    a578:	e586303c 	str	r3, [r6, #60]	; 0x3c
    a57c:	e5864040 	str	r4, [r6, #64]	; 0x40
    a580:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a584 <CScreenDevice::SetStandoutMode(unsigned int)>:
    a584:	e351001b 	cmp	r1, #27
    a588:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    a58c:	ea00001d 	b	a608 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    a590:	0000a618 	.word	0x0000a618
    a594:	0000a60c 	.word	0x0000a60c
    a598:	0000a600 	.word	0x0000a600
    a59c:	0000a608 	.word	0x0000a608
    a5a0:	0000a608 	.word	0x0000a608
    a5a4:	0000a608 	.word	0x0000a608
    a5a8:	0000a608 	.word	0x0000a608
    a5ac:	0000a608 	.word	0x0000a608
    a5b0:	0000a608 	.word	0x0000a608
    a5b4:	0000a608 	.word	0x0000a608
    a5b8:	0000a608 	.word	0x0000a608
    a5bc:	0000a608 	.word	0x0000a608
    a5c0:	0000a608 	.word	0x0000a608
    a5c4:	0000a608 	.word	0x0000a608
    a5c8:	0000a608 	.word	0x0000a608
    a5cc:	0000a608 	.word	0x0000a608
    a5d0:	0000a608 	.word	0x0000a608
    a5d4:	0000a608 	.word	0x0000a608
    a5d8:	0000a608 	.word	0x0000a608
    a5dc:	0000a608 	.word	0x0000a608
    a5e0:	0000a608 	.word	0x0000a608
    a5e4:	0000a608 	.word	0x0000a608
    a5e8:	0000a608 	.word	0x0000a608
    a5ec:	0000a608 	.word	0x0000a608
    a5f0:	0000a608 	.word	0x0000a608
    a5f4:	0000a608 	.word	0x0000a608
    a5f8:	0000a608 	.word	0x0000a608
    a5fc:	0000a618 	.word	0x0000a618
    a600:	e3a0301f 	mov	r3, #31
    a604:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    a608:	e12fff1e 	bx	lr
    a60c:	e3a03b3e 	mov	r3, #63488	; 0xf800
    a610:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    a614:	e12fff1e 	bx	lr
    a618:	e3e03020 	mvn	r3, #32
    a61c:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    a620:	e12fff1e 	bx	lr

0000a624 <CScreenDevice::Scroll()>:
    a624:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a628:	e1a07000 	mov	r7, r0
    a62c:	e2800014 	add	r0, r0, #20
    a630:	eb000313 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a634:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    a638:	e5975020 	ldr	r5, [r7, #32]
    a63c:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    a640:	e5978018 	ldr	r8, [r7, #24]
    a644:	e0444003 	sub	r4, r4, r3
    a648:	e1a02085 	lsl	r2, r5, #1
    a64c:	e0050395 	mul	r5, r5, r3
    a650:	e0885085 	add	r5, r8, r5, lsl #1
    a654:	e0444000 	sub	r4, r4, r0
    a658:	e1a06000 	mov	r6, r0
    a65c:	e0040492 	mul	r4, r2, r4
    a660:	e3540000 	cmp	r4, #0
    a664:	1a000007 	bne	a688 <CScreenDevice::Scroll()+0x64>
    a668:	e0020692 	mul	r2, r2, r6
    a66c:	e1b02122 	lsrs	r2, r2, #2
    a670:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a674:	e1a00005 	mov	r0, r5
    a678:	e1a02102 	lsl	r2, r2, #2
    a67c:	e3a01000 	mov	r1, #0
    a680:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    a684:	ea000f32 	b	e354 <memset>
    a688:	e0803003 	add	r3, r0, r3
    a68c:	e3c4900f 	bic	r9, r4, #15
    a690:	e1a00005 	mov	r0, r5
    a694:	e0288392 	mla	r8, r2, r3, r8
    a698:	e1a02009 	mov	r2, r9
    a69c:	e1a01008 	mov	r1, r8
    a6a0:	ebfffc97 	bl	9904 <memcpy>
    a6a4:	e204200e 	and	r2, r4, #14
    a6a8:	e0850009 	add	r0, r5, r9
    a6ac:	e0881009 	add	r1, r8, r9
    a6b0:	ebfffc93 	bl	9904 <memcpy>
    a6b4:	e5972020 	ldr	r2, [r7, #32]
    a6b8:	e3c44003 	bic	r4, r4, #3
    a6bc:	e0855004 	add	r5, r5, r4
    a6c0:	e1a02082 	lsl	r2, r2, #1
    a6c4:	eaffffe7 	b	a668 <CScreenDevice::Scroll()+0x44>

0000a6c8 <CScreenDevice::CursorDown()>:
    a6c8:	e92d4070 	push	{r4, r5, r6, lr}
    a6cc:	e2805014 	add	r5, r0, #20
    a6d0:	e1a04000 	mov	r4, r0
    a6d4:	e1a00005 	mov	r0, r5
    a6d8:	eb0002e9 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a6dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a6e0:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    a6e4:	e0800003 	add	r0, r0, r3
    a6e8:	e5840040 	str	r0, [r4, #64]	; 0x40
    a6ec:	e1500002 	cmp	r0, r2
    a6f0:	38bd8070 	popcc	{r4, r5, r6, pc}
    a6f4:	e1a00004 	mov	r0, r4
    a6f8:	ebffffc9 	bl	a624 <CScreenDevice::Scroll()>
    a6fc:	e1a00005 	mov	r0, r5
    a700:	eb0002df 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a704:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a708:	e0430000 	sub	r0, r3, r0
    a70c:	e5840040 	str	r0, [r4, #64]	; 0x40
    a710:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a714 <CScreenDevice::NewLine()>:
    a714:	e3a02000 	mov	r2, #0
    a718:	e580203c 	str	r2, [r0, #60]	; 0x3c
    a71c:	eaffffe9 	b	a6c8 <CScreenDevice::CursorDown()>

0000a720 <CScreenDevice::CursorRight()>:
    a720:	e92d4010 	push	{r4, lr}
    a724:	e1a04000 	mov	r4, r0
    a728:	e2800014 	add	r0, r0, #20
    a72c:	eb0002d2 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a730:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a734:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    a738:	e0800003 	add	r0, r0, r3
    a73c:	e584003c 	str	r0, [r4, #60]	; 0x3c
    a740:	e1500002 	cmp	r0, r2
    a744:	38bd8010 	popcc	{r4, pc}
    a748:	e3a03000 	mov	r3, #0
    a74c:	e1a00004 	mov	r0, r4
    a750:	e584303c 	str	r3, [r4, #60]	; 0x3c
    a754:	e8bd4010 	pop	{r4, lr}
    a758:	eaffffda 	b	a6c8 <CScreenDevice::CursorDown()>

0000a75c <CScreenDevice::Tabulator()>:
    a75c:	e92d4070 	push	{r4, r5, r6, lr}
    a760:	e1a05000 	mov	r5, r0
    a764:	e2800014 	add	r0, r0, #20
    a768:	eb0002c3 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a76c:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    a770:	e1a04180 	lsl	r4, r0, #3
    a774:	e0840003 	add	r0, r4, r3
    a778:	e1a01004 	mov	r1, r4
    a77c:	eb000ee8 	bl	e324 <__aeabi_uidiv>
    a780:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a784:	e0000094 	mul	r0, r4, r0
    a788:	e1500003 	cmp	r0, r3
    a78c:	e585003c 	str	r0, [r5, #60]	; 0x3c
    a790:	38bd8070 	popcc	{r4, r5, r6, pc}
    a794:	e3a03000 	mov	r3, #0
    a798:	e1a00005 	mov	r0, r5
    a79c:	e585303c 	str	r3, [r5, #60]	; 0x3c
    a7a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    a7a4:	eaffffc7 	b	a6c8 <CScreenDevice::CursorDown()>

0000a7a8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    a7a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7ac:	e2806014 	add	r6, r0, #20
    a7b0:	e24dd00c 	sub	sp, sp, #12
    a7b4:	e1a07000 	mov	r7, r0
    a7b8:	e1a00006 	mov	r0, r6
    a7bc:	e1a0a001 	mov	sl, r1
    a7c0:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    a7c4:	e1a09002 	mov	r9, r2
    a7c8:	e58d3004 	str	r3, [sp, #4]
    a7cc:	eb0002ac 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a7d0:	e3a08000 	mov	r8, #0
    a7d4:	e1580000 	cmp	r8, r0
    a7d8:	2a000024 	bcs	a870 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
    a7dc:	e59d3004 	ldr	r3, [sp, #4]
    a7e0:	e3a04000 	mov	r4, #0
    a7e4:	e0883003 	add	r3, r8, r3
    a7e8:	e58d3000 	str	r3, [sp]
    a7ec:	e1a00006 	mov	r0, r6
    a7f0:	e0845009 	add	r5, r4, r9
    a7f4:	eb0002a0 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a7f8:	e1a02004 	mov	r2, r4
    a7fc:	e1a03008 	mov	r3, r8
    a800:	e1a0100a 	mov	r1, sl
    a804:	e1540000 	cmp	r4, r0
    a808:	e1a00006 	mov	r0, r6
    a80c:	e2844001 	add	r4, r4, #1
    a810:	2a000011 	bcs	a85c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>
    a814:	eb00029e 	bl	b294 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    a818:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    a81c:	e3500000 	cmp	r0, #0
    a820:	11a0200b 	movne	r2, fp
    a824:	03a02000 	moveq	r2, #0
    a828:	e1550003 	cmp	r5, r3
    a82c:	2affffee 	bcs	a7ec <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    a830:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    a834:	e59d1000 	ldr	r1, [sp]
    a838:	e1510003 	cmp	r1, r3
    a83c:	2affffea 	bcs	a7ec <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    a840:	e5973020 	ldr	r3, [r7, #32]
    a844:	e59d0000 	ldr	r0, [sp]
    a848:	e5971018 	ldr	r1, [r7, #24]
    a84c:	e0255093 	mla	r5, r3, r0, r5
    a850:	e1a05085 	lsl	r5, r5, #1
    a854:	e18120b5 	strh	r2, [r1, r5]
    a858:	eaffffe3 	b	a7ec <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    a85c:	e1a00006 	mov	r0, r6
    a860:	e2888001 	add	r8, r8, #1
    a864:	eb000286 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a868:	e1580000 	cmp	r8, r0
    a86c:	3affffda 	bcc	a7dc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    a870:	e28dd00c 	add	sp, sp, #12
    a874:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a878 <CScreenDevice::DisplayChar(char)>:
    a878:	e6ef3071 	uxtb	r3, r1
    a87c:	e353001f 	cmp	r3, #31
    a880:	912fff1e 	bxls	lr
    a884:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    a888:	e92d4010 	push	{r4, lr}
    a88c:	e24dd008 	sub	sp, sp, #8
    a890:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    a894:	e1a04000 	mov	r4, r0
    a898:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    a89c:	e58dc000 	str	ip, [sp]
    a8a0:	ebffffc0 	bl	a7a8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    a8a4:	e1a00004 	mov	r0, r4
    a8a8:	e28dd008 	add	sp, sp, #8
    a8ac:	e8bd4010 	pop	{r4, lr}
    a8b0:	eaffff9a 	b	a720 <CScreenDevice::CursorRight()>

0000a8b4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    a8b4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8b8:	e3a08000 	mov	r8, #0
    a8bc:	e2805014 	add	r5, r0, #20
    a8c0:	e1a0b000 	mov	fp, r0
    a8c4:	e1a06001 	mov	r6, r1
    a8c8:	e1a0a002 	mov	sl, r2
    a8cc:	e1a09008 	mov	r9, r8
    a8d0:	e1a00005 	mov	r0, r5
    a8d4:	eb00026a 	bl	b284 <CCharGenerator::GetCharHeight() const>
    a8d8:	e1580000 	cmp	r8, r0
    a8dc:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8e0:	e088700a 	add	r7, r8, sl
    a8e4:	e3a04000 	mov	r4, #0
    a8e8:	e1a00005 	mov	r0, r5
    a8ec:	eb000262 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a8f0:	e0843006 	add	r3, r4, r6
    a8f4:	e1540000 	cmp	r4, r0
    a8f8:	e2844001 	add	r4, r4, #1
    a8fc:	2a00000b 	bcs	a930 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    a900:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    a904:	e1530002 	cmp	r3, r2
    a908:	2afffff6 	bcs	a8e8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    a90c:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    a910:	e1570002 	cmp	r7, r2
    a914:	2afffff3 	bcs	a8e8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    a918:	e59b2020 	ldr	r2, [fp, #32]
    a91c:	e59b1018 	ldr	r1, [fp, #24]
    a920:	e0233792 	mla	r3, r2, r7, r3
    a924:	e1a03083 	lsl	r3, r3, #1
    a928:	e18190b3 	strh	r9, [r1, r3]
    a92c:	eaffffed 	b	a8e8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    a930:	e2888001 	add	r8, r8, #1
    a934:	eaffffe5 	b	a8d0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000a938 <CScreenDevice::ClearLineEnd()>:
    a938:	e92d4070 	push	{r4, r5, r6, lr}
    a93c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a940:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    a944:	e1540003 	cmp	r4, r3
    a948:	28bd8070 	popcs	{r4, r5, r6, pc}
    a94c:	e2806014 	add	r6, r0, #20
    a950:	e1a05000 	mov	r5, r0
    a954:	e1a01004 	mov	r1, r4
    a958:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    a95c:	e1a00005 	mov	r0, r5
    a960:	ebffffd3 	bl	a8b4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    a964:	e1a00006 	mov	r0, r6
    a968:	eb000243 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a96c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a970:	e0844000 	add	r4, r4, r0
    a974:	e1530004 	cmp	r3, r4
    a978:	8afffff5 	bhi	a954 <CScreenDevice::ClearLineEnd()+0x1c>
    a97c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a980 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    a980:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a984:	e2807014 	add	r7, r0, #20
    a988:	e1a05000 	mov	r5, r0
    a98c:	e590803c 	ldr	r8, [r0, #60]	; 0x3c
    a990:	e1a00007 	mov	r0, r7
    a994:	e1a06001 	mov	r6, r1
    a998:	eb000237 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a99c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a9a0:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    a9a4:	e0268096 	mla	r6, r6, r0, r8
    a9a8:	e1560003 	cmp	r6, r3
    a9ac:	21a06003 	movcs	r6, r3
    a9b0:	e1540006 	cmp	r4, r6
    a9b4:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    a9b8:	e1a01004 	mov	r1, r4
    a9bc:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    a9c0:	e1a00005 	mov	r0, r5
    a9c4:	ebffffba 	bl	a8b4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    a9c8:	e1a00007 	mov	r0, r7
    a9cc:	eb00022a 	bl	b27c <CCharGenerator::GetCharWidth() const>
    a9d0:	e0844000 	add	r4, r4, r0
    a9d4:	e1540006 	cmp	r4, r6
    a9d8:	3afffff6 	bcc	a9b8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    a9dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a9e0 <CScreenDevice::EraseChars(unsigned int)>:
    a9e0:	e3510000 	cmp	r1, #0
    a9e4:	012fff1e 	bxeq	lr
    a9e8:	eaffffe4 	b	a980 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000a9ec <CScreenDevice::ClearDisplayEnd()>:
    a9ec:	e92d4070 	push	{r4, r5, r6, lr}
    a9f0:	e1a05000 	mov	r5, r0
    a9f4:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    a9f8:	e2806014 	add	r6, r0, #20
    a9fc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    aa00:	e1540003 	cmp	r4, r3
    aa04:	2a000009 	bcs	aa30 <CScreenDevice::ClearDisplayEnd()+0x44>
    aa08:	e1a01004 	mov	r1, r4
    aa0c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    aa10:	e1a00005 	mov	r0, r5
    aa14:	ebffffa6 	bl	a8b4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    aa18:	e1a00006 	mov	r0, r6
    aa1c:	eb000216 	bl	b27c <CCharGenerator::GetCharWidth() const>
    aa20:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    aa24:	e0844000 	add	r4, r4, r0
    aa28:	e1530004 	cmp	r3, r4
    aa2c:	8afffff5 	bhi	aa08 <CScreenDevice::ClearDisplayEnd()+0x1c>
    aa30:	e1a00006 	mov	r0, r6
    aa34:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    aa38:	eb000211 	bl	b284 <CCharGenerator::GetCharHeight() const>
    aa3c:	e2851018 	add	r1, r5, #24
    aa40:	e891000e 	ldm	r1, {r1, r2, r3}
    aa44:	e0840000 	add	r0, r4, r0
    aa48:	e0000093 	mul	r0, r3, r0
    aa4c:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    aa50:	0a000004 	beq	aa68 <CScreenDevice::ClearDisplayEnd()+0x7c>
    aa54:	e0810080 	add	r0, r1, r0, lsl #1
    aa58:	e1a02082 	lsl	r2, r2, #1
    aa5c:	e3a01000 	mov	r1, #0
    aa60:	e8bd4070 	pop	{r4, r5, r6, lr}
    aa64:	ea000e3a 	b	e354 <memset>
    aa68:	e8bd8070 	pop	{r4, r5, r6, pc}

0000aa6c <CScreenDevice::Write(char)>:
    aa6c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    aa70:	e92d4010 	push	{r4, lr}
    aa74:	e1a04000 	mov	r4, r0
    aa78:	e24dd008 	sub	sp, sp, #8
    aa7c:	e3530007 	cmp	r3, #7
    aa80:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    aa84:	ea000010 	b	aacc <CScreenDevice::Write(char)+0x60>
    aa88:	0000ab18 	.word	0x0000ab18
    aa8c:	0000ab78 	.word	0x0000ab78
    aa90:	0000ab94 	.word	0x0000ab94
    aa94:	0000abec 	.word	0x0000abec
    aa98:	0000acc8 	.word	0x0000acc8
    aa9c:	0000ace8 	.word	0x0000ace8
    aaa0:	0000ad08 	.word	0x0000ad08
    aaa4:	0000aadc 	.word	0x0000aadc
    aaa8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    aaac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    aab0:	e1520003 	cmp	r2, r3
    aab4:	2a000004 	bcs	aacc <CScreenDevice::Write(char)+0x60>
    aab8:	e2800014 	add	r0, r0, #20
    aabc:	eb0001f0 	bl	b284 <CCharGenerator::GetCharHeight() const>
    aac0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    aac4:	e0433000 	sub	r3, r3, r0
    aac8:	e5843040 	str	r3, [r4, #64]	; 0x40
    aacc:	e3a03000 	mov	r3, #0
    aad0:	e5843030 	str	r3, [r4, #48]	; 0x30
    aad4:	e28dd008 	add	sp, sp, #8
    aad8:	e8bd8010 	pop	{r4, pc}
    aadc:	e3510068 	cmp	r1, #104	; 0x68
    aae0:	0a000097 	beq	ad44 <CScreenDevice::Write(char)+0x2d8>
    aae4:	e351006c 	cmp	r1, #108	; 0x6c
    aae8:	0a000095 	beq	ad44 <CScreenDevice::Write(char)+0x2d8>
    aaec:	e2411030 	sub	r1, r1, #48	; 0x30
    aaf0:	e6ef3071 	uxtb	r3, r1
    aaf4:	e3530009 	cmp	r3, #9
    aaf8:	8afffff3 	bhi	aacc <CScreenDevice::Write(char)+0x60>
    aafc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    ab00:	e3a0200a 	mov	r2, #10
    ab04:	e0211392 	mla	r1, r2, r3, r1
    ab08:	e3510063 	cmp	r1, #99	; 0x63
    ab0c:	e5841050 	str	r1, [r4, #80]	; 0x50
    ab10:	8affffed 	bhi	aacc <CScreenDevice::Write(char)+0x60>
    ab14:	eaffffee 	b	aad4 <CScreenDevice::Write(char)+0x68>
    ab18:	e2413008 	sub	r3, r1, #8
    ab1c:	e3530013 	cmp	r3, #19
    ab20:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ab24:	ea0000ec 	b	aedc <CScreenDevice::Write(char)+0x470>
    ab28:	0000adb0 	.word	0x0000adb0
    ab2c:	0000ada4 	.word	0x0000ada4
    ab30:	0000ad90 	.word	0x0000ad90
    ab34:	0000aedc 	.word	0x0000aedc
    ab38:	0000aedc 	.word	0x0000aedc
    ab3c:	0000ad84 	.word	0x0000ad84
    ab40:	0000aedc 	.word	0x0000aedc
    ab44:	0000aedc 	.word	0x0000aedc
    ab48:	0000aedc 	.word	0x0000aedc
    ab4c:	0000aedc 	.word	0x0000aedc
    ab50:	0000aedc 	.word	0x0000aedc
    ab54:	0000aedc 	.word	0x0000aedc
    ab58:	0000aedc 	.word	0x0000aedc
    ab5c:	0000aedc 	.word	0x0000aedc
    ab60:	0000aedc 	.word	0x0000aedc
    ab64:	0000aedc 	.word	0x0000aedc
    ab68:	0000aedc 	.word	0x0000aedc
    ab6c:	0000aedc 	.word	0x0000aedc
    ab70:	0000aedc 	.word	0x0000aedc
    ab74:	0000ad78 	.word	0x0000ad78
    ab78:	e351004d 	cmp	r1, #77	; 0x4d
    ab7c:	0affffd2 	beq	aacc <CScreenDevice::Write(char)+0x60>
    ab80:	e351005b 	cmp	r1, #91	; 0x5b
    ab84:	03a03002 	moveq	r3, #2
    ab88:	05803030 	streq	r3, [r0, #48]	; 0x30
    ab8c:	0affffd0 	beq	aad4 <CScreenDevice::Write(char)+0x68>
    ab90:	eaffffcd 	b	aacc <CScreenDevice::Write(char)+0x60>
    ab94:	e241303f 	sub	r3, r1, #63	; 0x3f
    ab98:	e3530011 	cmp	r3, #17
    ab9c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    aba0:	ea0000d9 	b	af0c <CScreenDevice::Write(char)+0x4a0>
    aba4:	0000ae98 	.word	0x0000ae98
    aba8:	0000af0c 	.word	0x0000af0c
    abac:	0000aaa8 	.word	0x0000aaa8
    abb0:	0000aecc 	.word	0x0000aecc
    abb4:	0000aebc 	.word	0x0000aebc
    abb8:	0000af0c 	.word	0x0000af0c
    abbc:	0000af0c 	.word	0x0000af0c
    abc0:	0000af0c 	.word	0x0000af0c
    abc4:	0000af0c 	.word	0x0000af0c
    abc8:	0000aea4 	.word	0x0000aea4
    abcc:	0000af0c 	.word	0x0000af0c
    abd0:	0000ae88 	.word	0x0000ae88
    abd4:	0000ae78 	.word	0x0000ae78
    abd8:	0000aacc 	.word	0x0000aacc
    abdc:	0000aacc 	.word	0x0000aacc
    abe0:	0000af0c 	.word	0x0000af0c
    abe4:	0000af0c 	.word	0x0000af0c
    abe8:	0000aacc 	.word	0x0000aacc
    abec:	e241303b 	sub	r3, r1, #59	; 0x3b
    abf0:	e3530032 	cmp	r3, #50	; 0x32
    abf4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    abf8:	eaffffbb 	b	aaec <CScreenDevice::Write(char)+0x80>
    abfc:	0000ae6c 	.word	0x0000ae6c
    ac00:	0000aaec 	.word	0x0000aaec
    ac04:	0000aaec 	.word	0x0000aaec
    ac08:	0000aaec 	.word	0x0000aaec
    ac0c:	0000aaec 	.word	0x0000aaec
    ac10:	0000aaec 	.word	0x0000aaec
    ac14:	0000aaec 	.word	0x0000aaec
    ac18:	0000aaec 	.word	0x0000aaec
    ac1c:	0000aaec 	.word	0x0000aaec
    ac20:	0000aaec 	.word	0x0000aaec
    ac24:	0000aaec 	.word	0x0000aaec
    ac28:	0000aaec 	.word	0x0000aaec
    ac2c:	0000aaec 	.word	0x0000aaec
    ac30:	0000aaec 	.word	0x0000aaec
    ac34:	0000aaec 	.word	0x0000aaec
    ac38:	0000aaec 	.word	0x0000aaec
    ac3c:	0000aaec 	.word	0x0000aaec
    ac40:	0000aacc 	.word	0x0000aacc
    ac44:	0000aacc 	.word	0x0000aacc
    ac48:	0000aaec 	.word	0x0000aaec
    ac4c:	0000aaec 	.word	0x0000aaec
    ac50:	0000aacc 	.word	0x0000aacc
    ac54:	0000aaec 	.word	0x0000aaec
    ac58:	0000aaec 	.word	0x0000aaec
    ac5c:	0000aaec 	.word	0x0000aaec
    ac60:	0000aaec 	.word	0x0000aaec
    ac64:	0000aaec 	.word	0x0000aaec
    ac68:	0000aaec 	.word	0x0000aaec
    ac6c:	0000aaec 	.word	0x0000aaec
    ac70:	0000adbc 	.word	0x0000adbc
    ac74:	0000aaec 	.word	0x0000aaec
    ac78:	0000aaec 	.word	0x0000aaec
    ac7c:	0000aaec 	.word	0x0000aaec
    ac80:	0000aaec 	.word	0x0000aaec
    ac84:	0000aaec 	.word	0x0000aaec
    ac88:	0000aaec 	.word	0x0000aaec
    ac8c:	0000aaec 	.word	0x0000aaec
    ac90:	0000aaec 	.word	0x0000aaec
    ac94:	0000aaec 	.word	0x0000aaec
    ac98:	0000aaec 	.word	0x0000aaec
    ac9c:	0000aaec 	.word	0x0000aaec
    aca0:	0000aaec 	.word	0x0000aaec
    aca4:	0000aaec 	.word	0x0000aaec
    aca8:	0000aaec 	.word	0x0000aaec
    acac:	0000aaec 	.word	0x0000aaec
    acb0:	0000add0 	.word	0x0000add0
    acb4:	0000aaec 	.word	0x0000aaec
    acb8:	0000aaec 	.word	0x0000aaec
    acbc:	0000aaec 	.word	0x0000aaec
    acc0:	0000add0 	.word	0x0000add0
    acc4:	0000adec 	.word	0x0000adec
    acc8:	e2411030 	sub	r1, r1, #48	; 0x30
    accc:	e6ef3071 	uxtb	r3, r1
    acd0:	e3530009 	cmp	r3, #9
    acd4:	8affff7c 	bhi	aacc <CScreenDevice::Write(char)+0x60>
    acd8:	e3a03007 	mov	r3, #7
    acdc:	e5801050 	str	r1, [r0, #80]	; 0x50
    ace0:	e5803030 	str	r3, [r0, #48]	; 0x30
    ace4:	eaffff7a 	b	aad4 <CScreenDevice::Write(char)+0x68>
    ace8:	e2411030 	sub	r1, r1, #48	; 0x30
    acec:	e6ef3071 	uxtb	r3, r1
    acf0:	e3530009 	cmp	r3, #9
    acf4:	8affff74 	bhi	aacc <CScreenDevice::Write(char)+0x60>
    acf8:	e3a03006 	mov	r3, #6
    acfc:	e5801054 	str	r1, [r0, #84]	; 0x54
    ad00:	e5803030 	str	r3, [r0, #48]	; 0x30
    ad04:	eaffff72 	b	aad4 <CScreenDevice::Write(char)+0x68>
    ad08:	e3510048 	cmp	r1, #72	; 0x48
    ad0c:	0a00008f 	beq	af50 <CScreenDevice::Write(char)+0x4e4>
    ad10:	e3510072 	cmp	r1, #114	; 0x72
    ad14:	0a000011 	beq	ad60 <CScreenDevice::Write(char)+0x2f4>
    ad18:	e2411030 	sub	r1, r1, #48	; 0x30
    ad1c:	e6ef3071 	uxtb	r3, r1
    ad20:	e3530009 	cmp	r3, #9
    ad24:	8affff68 	bhi	aacc <CScreenDevice::Write(char)+0x60>
    ad28:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    ad2c:	e3a0200a 	mov	r2, #10
    ad30:	e0211392 	mla	r1, r2, r3, r1
    ad34:	e35100c7 	cmp	r1, #199	; 0xc7
    ad38:	e5801054 	str	r1, [r0, #84]	; 0x54
    ad3c:	8affff62 	bhi	aacc <CScreenDevice::Write(char)+0x60>
    ad40:	eaffff63 	b	aad4 <CScreenDevice::Write(char)+0x68>
    ad44:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    ad48:	e3530019 	cmp	r3, #25
    ad4c:	02411068 	subeq	r1, r1, #104	; 0x68
    ad50:	016f1f11 	clzeq	r1, r1
    ad54:	01a012a1 	lsreq	r1, r1, #5
    ad58:	05841044 	streq	r1, [r4, #68]	; 0x44
    ad5c:	eaffff5a 	b	aacc <CScreenDevice::Write(char)+0x60>
    ad60:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    ad64:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    ad68:	ebfffde6 	bl	a508 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    ad6c:	e3a03000 	mov	r3, #0
    ad70:	e5843030 	str	r3, [r4, #48]	; 0x30
    ad74:	eaffff56 	b	aad4 <CScreenDevice::Write(char)+0x68>
    ad78:	e3a03001 	mov	r3, #1
    ad7c:	e5803030 	str	r3, [r0, #48]	; 0x30
    ad80:	eaffff53 	b	aad4 <CScreenDevice::Write(char)+0x68>
    ad84:	e3a03000 	mov	r3, #0
    ad88:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ad8c:	eaffff50 	b	aad4 <CScreenDevice::Write(char)+0x68>
    ad90:	e3a03000 	mov	r3, #0
    ad94:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ad98:	e28dd008 	add	sp, sp, #8
    ad9c:	e8bd4010 	pop	{r4, lr}
    ada0:	eafffe48 	b	a6c8 <CScreenDevice::CursorDown()>
    ada4:	e28dd008 	add	sp, sp, #8
    ada8:	e8bd4010 	pop	{r4, lr}
    adac:	eafffe6a 	b	a75c <CScreenDevice::Tabulator()>
    adb0:	e28dd008 	add	sp, sp, #8
    adb4:	e8bd4010 	pop	{r4, lr}
    adb8:	eafffd8b 	b	a3ec <CScreenDevice::CursorLeft()>
    adbc:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    adc0:	e3510000 	cmp	r1, #0
    adc4:	0affff40 	beq	aacc <CScreenDevice::Write(char)+0x60>
    adc8:	ebfffeec 	bl	a980 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    adcc:	eaffff3e 	b	aacc <CScreenDevice::Write(char)+0x60>
    add0:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    add4:	e3530004 	cmp	r3, #4
    add8:	02411068 	subeq	r1, r1, #104	; 0x68
    addc:	016f1f11 	clzeq	r1, r1
    ade0:	01a012a1 	lsreq	r1, r1, #5
    ade4:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    ade8:	eaffff37 	b	aacc <CScreenDevice::Write(char)+0x60>
    adec:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    adf0:	e353001b 	cmp	r3, #27
    adf4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    adf8:	eaffff33 	b	aacc <CScreenDevice::Write(char)+0x60>
    adfc:	0000af44 	.word	0x0000af44
    ae00:	0000af38 	.word	0x0000af38
    ae04:	0000af2c 	.word	0x0000af2c
    ae08:	0000aacc 	.word	0x0000aacc
    ae0c:	0000aacc 	.word	0x0000aacc
    ae10:	0000aacc 	.word	0x0000aacc
    ae14:	0000aacc 	.word	0x0000aacc
    ae18:	0000aacc 	.word	0x0000aacc
    ae1c:	0000aacc 	.word	0x0000aacc
    ae20:	0000aacc 	.word	0x0000aacc
    ae24:	0000aacc 	.word	0x0000aacc
    ae28:	0000aacc 	.word	0x0000aacc
    ae2c:	0000aacc 	.word	0x0000aacc
    ae30:	0000aacc 	.word	0x0000aacc
    ae34:	0000aacc 	.word	0x0000aacc
    ae38:	0000aacc 	.word	0x0000aacc
    ae3c:	0000aacc 	.word	0x0000aacc
    ae40:	0000aacc 	.word	0x0000aacc
    ae44:	0000aacc 	.word	0x0000aacc
    ae48:	0000aacc 	.word	0x0000aacc
    ae4c:	0000aacc 	.word	0x0000aacc
    ae50:	0000aacc 	.word	0x0000aacc
    ae54:	0000aacc 	.word	0x0000aacc
    ae58:	0000aacc 	.word	0x0000aacc
    ae5c:	0000aacc 	.word	0x0000aacc
    ae60:	0000aacc 	.word	0x0000aacc
    ae64:	0000aacc 	.word	0x0000aacc
    ae68:	0000af44 	.word	0x0000af44
    ae6c:	e3a03005 	mov	r3, #5
    ae70:	e5803030 	str	r3, [r0, #48]	; 0x30
    ae74:	eaffff16 	b	aad4 <CScreenDevice::Write(char)+0x68>
    ae78:	ebfffeae 	bl	a938 <CScreenDevice::ClearLineEnd()>
    ae7c:	e3a03000 	mov	r3, #0
    ae80:	e5843030 	str	r3, [r4, #48]	; 0x30
    ae84:	eaffff12 	b	aad4 <CScreenDevice::Write(char)+0x68>
    ae88:	ebfffed7 	bl	a9ec <CScreenDevice::ClearDisplayEnd()>
    ae8c:	e3a03000 	mov	r3, #0
    ae90:	e5843030 	str	r3, [r4, #48]	; 0x30
    ae94:	eaffff0e 	b	aad4 <CScreenDevice::Write(char)+0x68>
    ae98:	e3a03004 	mov	r3, #4
    ae9c:	e5803030 	str	r3, [r0, #48]	; 0x30
    aea0:	eaffff0b 	b	aad4 <CScreenDevice::Write(char)+0x68>
    aea4:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    aea8:	e3a03000 	mov	r3, #0
    aeac:	e580303c 	str	r3, [r0, #60]	; 0x3c
    aeb0:	e5803030 	str	r3, [r0, #48]	; 0x30
    aeb4:	e5802040 	str	r2, [r0, #64]	; 0x40
    aeb8:	eaffff05 	b	aad4 <CScreenDevice::Write(char)+0x68>
    aebc:	ebfffe17 	bl	a720 <CScreenDevice::CursorRight()>
    aec0:	e3a03000 	mov	r3, #0
    aec4:	e5843030 	str	r3, [r4, #48]	; 0x30
    aec8:	eaffff01 	b	aad4 <CScreenDevice::Write(char)+0x68>
    aecc:	ebfffdfd 	bl	a6c8 <CScreenDevice::CursorDown()>
    aed0:	e3a03000 	mov	r3, #0
    aed4:	e5843030 	str	r3, [r4, #48]	; 0x30
    aed8:	eafffefd 	b	aad4 <CScreenDevice::Write(char)+0x68>
    aedc:	e6ef3071 	uxtb	r3, r1
    aee0:	e353001f 	cmp	r3, #31
    aee4:	9afffefa 	bls	aad4 <CScreenDevice::Write(char)+0x68>
    aee8:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    aeec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    aef0:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    aef4:	e58dc000 	str	ip, [sp]
    aef8:	ebfffe2a 	bl	a7a8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    aefc:	e1a00004 	mov	r0, r4
    af00:	e28dd008 	add	sp, sp, #8
    af04:	e8bd4010 	pop	{r4, lr}
    af08:	eafffe04 	b	a720 <CScreenDevice::CursorRight()>
    af0c:	e2411030 	sub	r1, r1, #48	; 0x30
    af10:	e6ef3071 	uxtb	r3, r1
    af14:	e3530009 	cmp	r3, #9
    af18:	8afffeeb 	bhi	aacc <CScreenDevice::Write(char)+0x60>
    af1c:	e3a03003 	mov	r3, #3
    af20:	e5801050 	str	r1, [r0, #80]	; 0x50
    af24:	e5803030 	str	r3, [r0, #48]	; 0x30
    af28:	eafffee9 	b	aad4 <CScreenDevice::Write(char)+0x68>
    af2c:	e3a0301f 	mov	r3, #31
    af30:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    af34:	eafffee4 	b	aacc <CScreenDevice::Write(char)+0x60>
    af38:	e3a03b3e 	mov	r3, #63488	; 0xf800
    af3c:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    af40:	eafffee1 	b	aacc <CScreenDevice::Write(char)+0x60>
    af44:	e3e03020 	mvn	r3, #32
    af48:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    af4c:	eafffede 	b	aacc <CScreenDevice::Write(char)+0x60>
    af50:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    af54:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    af58:	ebfffd3e 	bl	a458 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    af5c:	e3a03000 	mov	r3, #0
    af60:	e5843030 	str	r3, [r4, #48]	; 0x30
    af64:	eafffeda 	b	aad4 <CScreenDevice::Write(char)+0x68>

0000af68 <CScreenDevice::Write(void const*, unsigned int)>:
    af68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    af6c:	e1a05000 	mov	r5, r0
    af70:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    af74:	e1a06001 	mov	r6, r1
    af78:	e1a08002 	mov	r8, r2
    af7c:	e3500000 	cmp	r0, #0
    af80:	1a000026 	bne	b020 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    af84:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    af88:	e3a03001 	mov	r3, #1
    af8c:	e5853058 	str	r3, [r5, #88]	; 0x58
    af90:	e3540000 	cmp	r4, #0
    af94:	1a00001a 	bne	b004 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    af98:	e3580000 	cmp	r8, #0
    af9c:	e2487001 	sub	r7, r8, #1
    afa0:	0a00000b 	beq	afd4 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    afa4:	e1a04006 	mov	r4, r6
    afa8:	e0d410d1 	ldrsb	r1, [r4], #1
    afac:	e1a00005 	mov	r0, r5
    afb0:	ebfffead 	bl	aa6c <CScreenDevice::Write(char)>
    afb4:	e2643001 	rsb	r3, r4, #1
    afb8:	e0833007 	add	r3, r3, r7
    afbc:	e1760003 	cmn	r6, r3
    afc0:	1afffff8 	bne	afa8 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    afc4:	e2874001 	add	r4, r7, #1
    afc8:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    afcc:	e3530000 	cmp	r3, #0
    afd0:	1a000008 	bne	aff8 <CScreenDevice::Write(void const*, unsigned int)+0x90>
    afd4:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    afd8:	e3a02000 	mov	r2, #0
    afdc:	e5852058 	str	r2, [r5, #88]	; 0x58
    afe0:	e1530002 	cmp	r3, r2
    afe4:	0a000000 	beq	afec <CScreenDevice::Write(void const*, unsigned int)+0x84>
    afe8:	ebfff7bd 	bl	8ee4 <LeaveCritical>
    afec:	f57ff05f 	dmb	sy
    aff0:	e1a00004 	mov	r0, r4
    aff4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    aff8:	e1a00005 	mov	r0, r5
    affc:	ebfffc34 	bl	a0d4 <CScreenDevice::InvertCursor() [clone .part.6]>
    b000:	eafffff3 	b	afd4 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    b004:	e1a00005 	mov	r0, r5
    b008:	e2487001 	sub	r7, r8, #1
    b00c:	ebfffc30 	bl	a0d4 <CScreenDevice::InvertCursor() [clone .part.6]>
    b010:	e3580000 	cmp	r8, #0
    b014:	1affffe2 	bne	afa4 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    b018:	e1a04008 	mov	r4, r8
    b01c:	eaffffe9 	b	afc8 <CScreenDevice::Write(void const*, unsigned int)+0x60>
    b020:	ebfff7a1 	bl	8eac <EnterCritical>
    b024:	eaffffd6 	b	af84 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000b028 <CScreenDevice::Initialize()>:
    b028:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b02c:	e1a04000 	mov	r4, r0
    b030:	e590500c 	ldr	r5, [r0, #12]
    b034:	e24dd00c 	sub	sp, sp, #12
    b038:	e3550000 	cmp	r5, #0
    b03c:	0a00002b 	beq	b0f0 <CScreenDevice::Initialize()+0xc8>
    b040:	e5903004 	ldr	r3, [r0, #4]
    b044:	e5902008 	ldr	r2, [r0, #8]
    b048:	e5803024 	str	r3, [r0, #36]	; 0x24
    b04c:	e0000392 	mul	r0, r2, r3
    b050:	e5843020 	str	r3, [r4, #32]
    b054:	e5842028 	str	r2, [r4, #40]	; 0x28
    b058:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    b05c:	e1a00080 	lsl	r0, r0, #1
    b060:	e584001c 	str	r0, [r4, #28]
    b064:	23e00000 	mvncs	r0, #0
    b068:	ebfff78a 	bl	8e98 <operator new[](unsigned int)>
    b06c:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    b070:	e5840018 	str	r0, [r4, #24]
    b074:	e2846014 	add	r6, r4, #20
    b078:	e1a00006 	mov	r0, r6
    b07c:	eb000080 	bl	b284 <CCharGenerator::GetCharHeight() const>
    b080:	e1a01000 	mov	r1, r0
    b084:	e1a00007 	mov	r0, r7
    b088:	eb000ca5 	bl	e324 <__aeabi_uidiv>
    b08c:	e1a05000 	mov	r5, r0
    b090:	e1a00006 	mov	r0, r6
    b094:	eb00007a 	bl	b284 <CCharGenerator::GetCharHeight() const>
    b098:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    b09c:	e3a02000 	mov	r2, #0
    b0a0:	e584203c 	str	r2, [r4, #60]	; 0x3c
    b0a4:	e5843040 	str	r3, [r4, #64]	; 0x40
    b0a8:	e0050590 	mul	r5, r0, r5
    b0ac:	e1a00004 	mov	r0, r4
    b0b0:	e584502c 	str	r5, [r4, #44]	; 0x2c
    b0b4:	e5845038 	str	r5, [r4, #56]	; 0x38
    b0b8:	ebfffe4b 	bl	a9ec <CScreenDevice::ClearDisplayEnd()>
    b0bc:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    b0c0:	e3530000 	cmp	r3, #0
    b0c4:	1a000031 	bne	b190 <CScreenDevice::Initialize()+0x168>
    b0c8:	eb000154 	bl	b620 <CDeviceNameService::Get()>
    b0cc:	e30f10d0 	movw	r1, #61648	; 0xf0d0
    b0d0:	e1a02004 	mov	r2, r4
    b0d4:	e3a03000 	mov	r3, #0
    b0d8:	e3401000 	movt	r1, #0
    b0dc:	e3a05001 	mov	r5, #1
    b0e0:	eb000105 	bl	b4fc <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    b0e4:	e1a00005 	mov	r0, r5
    b0e8:	e28dd00c 	add	sp, sp, #12
    b0ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b0f0:	e3a00024 	mov	r0, #36	; 0x24
    b0f4:	ebfff766 	bl	8e94 <operator new(unsigned int)>
    b0f8:	e5942008 	ldr	r2, [r4, #8]
    b0fc:	e5941004 	ldr	r1, [r4, #4]
    b100:	e3a03010 	mov	r3, #16
    b104:	e58d5004 	str	r5, [sp, #4]
    b108:	e58d5000 	str	r5, [sp]
    b10c:	e1a06000 	mov	r6, r0
    b110:	eb000dc8 	bl	e838 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b114:	e5846010 	str	r6, [r4, #16]
    b118:	e1a00006 	mov	r0, r6
    b11c:	eb000e2f 	bl	e9e0 <CBcmFrameBuffer::Initialize()>
    b120:	e3500000 	cmp	r0, #0
    b124:	0affffee 	beq	b0e4 <CScreenDevice::Initialize()+0xbc>
    b128:	e5940010 	ldr	r0, [r4, #16]
    b12c:	eb000e66 	bl	eacc <CBcmFrameBuffer::GetDepth() const>
    b130:	e3500010 	cmp	r0, #16
    b134:	1affffea 	bne	b0e4 <CScreenDevice::Initialize()+0xbc>
    b138:	e5940010 	ldr	r0, [r4, #16]
    b13c:	eb000e64 	bl	ead4 <CBcmFrameBuffer::GetBuffer() const>
    b140:	e5840018 	str	r0, [r4, #24]
    b144:	e5940010 	ldr	r0, [r4, #16]
    b148:	eb000e63 	bl	eadc <CBcmFrameBuffer::GetSize() const>
    b14c:	e584001c 	str	r0, [r4, #28]
    b150:	e5940010 	ldr	r0, [r4, #16]
    b154:	eb000e5a 	bl	eac4 <CBcmFrameBuffer::GetPitch() const>
    b158:	e5840020 	str	r0, [r4, #32]
    b15c:	e5940010 	ldr	r0, [r4, #16]
    b160:	eb000e4f 	bl	eaa4 <CBcmFrameBuffer::GetWidth() const>
    b164:	e5840024 	str	r0, [r4, #36]	; 0x24
    b168:	e5940010 	ldr	r0, [r4, #16]
    b16c:	eb000e4e 	bl	eaac <CBcmFrameBuffer::GetHeight() const>
    b170:	e5943020 	ldr	r3, [r4, #32]
    b174:	e3130003 	tst	r3, #3
    b178:	01a030a3 	lsreq	r3, r3, #1
    b17c:	05843020 	streq	r3, [r4, #32]
    b180:	e1a07000 	mov	r7, r0
    b184:	e5840028 	str	r0, [r4, #40]	; 0x28
    b188:	0affffb9 	beq	b074 <CScreenDevice::Initialize()+0x4c>
    b18c:	eaffffd4 	b	b0e4 <CScreenDevice::Initialize()+0xbc>
    b190:	e1a00004 	mov	r0, r4
    b194:	ebfffbce 	bl	a0d4 <CScreenDevice::InvertCursor() [clone .part.6]>
    b198:	eaffffca 	b	b0c8 <CScreenDevice::Initialize()+0xa0>

0000b19c <CScreenDevice::InvertCursor()>:
    b19c:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    b1a0:	e3530000 	cmp	r3, #0
    b1a4:	012fff1e 	bxeq	lr
    b1a8:	eafffbc9 	b	a0d4 <CScreenDevice::InvertCursor() [clone .part.6]>

0000b1ac <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    b1ac:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    b1b0:	e15c0001 	cmp	ip, r1
    b1b4:	912fff1e 	bxls	lr
    b1b8:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    b1bc:	e15c0002 	cmp	ip, r2
    b1c0:	8590c020 	ldrhi	ip, [r0, #32]
    b1c4:	85900018 	ldrhi	r0, [r0, #24]
    b1c8:	8022129c 	mlahi	r2, ip, r2, r1
    b1cc:	81a02082 	lslhi	r2, r2, #1
    b1d0:	818030b2 	strhhi	r3, [r0, r2]
    b1d4:	e12fff1e 	bx	lr

0000b1d8 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    b1d8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b1dc:	e1530001 	cmp	r3, r1
    b1e0:	9a000008 	bls	b208 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    b1e4:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    b1e8:	e1530002 	cmp	r3, r2
    b1ec:	9a000005 	bls	b208 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    b1f0:	e590c020 	ldr	ip, [r0, #32]
    b1f4:	e5903018 	ldr	r3, [r0, #24]
    b1f8:	e022129c 	mla	r2, ip, r2, r1
    b1fc:	e1a02082 	lsl	r2, r2, #1
    b200:	e19300b2 	ldrh	r0, [r3, r2]
    b204:	e12fff1e 	bx	lr
    b208:	e3a00000 	mov	r0, #0
    b20c:	e12fff1e 	bx	lr

0000b210 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    b210:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b214:	e1a05000 	mov	r5, r0
    b218:	e24dd00c 	sub	sp, sp, #12
    b21c:	e2800014 	add	r0, r0, #20
    b220:	e1a06002 	mov	r6, r2
    b224:	e1a04001 	mov	r4, r1
    b228:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    b22c:	eb000012 	bl	b27c <CCharGenerator::GetCharWidth() const>
    b230:	e2044003 	and	r4, r4, #3
    b234:	e2061003 	and	r1, r6, #3
    b238:	e30f3134 	movw	r3, #61748	; 0xf134
    b23c:	e3403000 	movt	r3, #0
    b240:	e0831001 	add	r1, r3, r1
    b244:	e3a02b3e 	mov	r2, #63488	; 0xf800
    b248:	e3a03000 	mov	r3, #0
    b24c:	e58d2000 	str	r2, [sp]
    b250:	e1d111dc 	ldrsb	r1, [r1, #28]
    b254:	e0240094 	mla	r4, r4, r0, r0
    b258:	e1a00005 	mov	r0, r5
    b25c:	e0472004 	sub	r2, r7, r4
    b260:	ebfffd50 	bl	a7a8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    b264:	e28dd00c 	add	sp, sp, #12
    b268:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000b26c <CCharGenerator::CCharGenerator()>:
    b26c:	e3a03008 	mov	r3, #8
    b270:	e5803000 	str	r3, [r0]
    b274:	e12fff1e 	bx	lr

0000b278 <CCharGenerator::~CCharGenerator()>:
    b278:	e12fff1e 	bx	lr

0000b27c <CCharGenerator::GetCharWidth() const>:
    b27c:	e5900000 	ldr	r0, [r0]
    b280:	e12fff1e 	bx	lr

0000b284 <CCharGenerator::GetCharHeight() const>:
    b284:	e3a00013 	mov	r0, #19
    b288:	e12fff1e 	bx	lr

0000b28c <CCharGenerator::GetUnderline() const>:
    b28c:	e3a00010 	mov	r0, #16
    b290:	e12fff1e 	bx	lr

0000b294 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    b294:	e6ef1071 	uxtb	r1, r1
    b298:	e2411021 	sub	r1, r1, #33	; 0x21
    b29c:	e353000f 	cmp	r3, #15
    b2a0:	935100de 	cmpls	r1, #222	; 0xde
    b2a4:	8a000008 	bhi	b2cc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x38>
    b2a8:	e30f0158 	movw	r0, #61784	; 0xf158
    b2ac:	e3400000 	movt	r0, #0
    b2b0:	e0801201 	add	r1, r0, r1, lsl #4
    b2b4:	e3a00080 	mov	r0, #128	; 0x80
    b2b8:	e7d13003 	ldrb	r3, [r1, r3]
    b2bc:	e0133250 	ands	r3, r3, r0, asr r2
    b2c0:	13a00001 	movne	r0, #1
    b2c4:	03a00000 	moveq	r0, #0
    b2c8:	e12fff1e 	bx	lr
    b2cc:	e3a00000 	mov	r0, #0
    b2d0:	e12fff1e 	bx	lr

0000b2d4 <debug_hexdump(void const*, unsigned int, char const*)>:
    b2d4:	e3520000 	cmp	r2, #0
    b2d8:	e30f3f48 	movw	r3, #65352	; 0xff48
    b2dc:	e3403000 	movt	r3, #0
    b2e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2e4:	11a03002 	movne	r3, r2
    b2e8:	e24dd054 	sub	sp, sp, #84	; 0x54
    b2ec:	e1a06003 	mov	r6, r3
    b2f0:	e1a05001 	mov	r5, r1
    b2f4:	e1a04000 	mov	r4, r0
    b2f8:	e58d304c 	str	r3, [sp, #76]	; 0x4c
    b2fc:	eb0000ea 	bl	b6ac <CLogger::Get()>
    b300:	e58d4004 	str	r4, [sp, #4]
    b304:	e1a01006 	mov	r1, r6
    b308:	e58d5000 	str	r5, [sp]
    b30c:	e30f3f50 	movw	r3, #65360	; 0xff50
    b310:	e3a02004 	mov	r2, #4
    b314:	e3403000 	movt	r3, #0
    b318:	eb0001bf 	bl	ba1c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b31c:	e3550000 	cmp	r5, #0
    b320:	0a00002a 	beq	b3d0 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    b324:	e30f9f74 	movw	r9, #65396	; 0xff74
    b328:	e3409000 	movt	r9, #0
    b32c:	eb0000de 	bl	b6ac <CLogger::Get()>
    b330:	e5d4800f 	ldrb	r8, [r4, #15]
    b334:	e5d4700e 	ldrb	r7, [r4, #14]
    b338:	e6ffc074 	uxth	ip, r4
    b33c:	e5d4600d 	ldrb	r6, [r4, #13]
    b340:	e1a03009 	mov	r3, r9
    b344:	e5d4e00c 	ldrb	lr, [r4, #12]
    b348:	e3a02004 	mov	r2, #4
    b34c:	e5d4b00b 	ldrb	fp, [r4, #11]
    b350:	e2844010 	add	r4, r4, #16
    b354:	e554a006 	ldrb	sl, [r4, #-6]
    b358:	e58d8040 	str	r8, [sp, #64]	; 0x40
    b35c:	e5548007 	ldrb	r8, [r4, #-7]
    b360:	e58d703c 	str	r7, [sp, #60]	; 0x3c
    b364:	e5547008 	ldrb	r7, [r4, #-8]
    b368:	e58d6038 	str	r6, [sp, #56]	; 0x38
    b36c:	e5546009 	ldrb	r6, [r4, #-9]
    b370:	e58de034 	str	lr, [sp, #52]	; 0x34
    b374:	e554e00a 	ldrb	lr, [r4, #-10]
    b378:	e58db030 	str	fp, [sp, #48]	; 0x30
    b37c:	e554b00b 	ldrb	fp, [r4, #-11]
    b380:	e58da02c 	str	sl, [sp, #44]	; 0x2c
    b384:	e554a00c 	ldrb	sl, [r4, #-12]
    b388:	e58d8028 	str	r8, [sp, #40]	; 0x28
    b38c:	e554800d 	ldrb	r8, [r4, #-13]
    b390:	e58d7024 	str	r7, [sp, #36]	; 0x24
    b394:	e554700e 	ldrb	r7, [r4, #-14]
    b398:	e58d6020 	str	r6, [sp, #32]
    b39c:	e554600f 	ldrb	r6, [r4, #-15]
    b3a0:	e58de01c 	str	lr, [sp, #28]
    b3a4:	e554e010 	ldrb	lr, [r4, #-16]
    b3a8:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
    b3ac:	e58db018 	str	fp, [sp, #24]
    b3b0:	e58da014 	str	sl, [sp, #20]
    b3b4:	e58d8010 	str	r8, [sp, #16]
    b3b8:	e58d700c 	str	r7, [sp, #12]
    b3bc:	e58d6008 	str	r6, [sp, #8]
    b3c0:	e88d5000 	stm	sp, {ip, lr}
    b3c4:	eb000194 	bl	ba1c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b3c8:	e355000f 	cmp	r5, #15
    b3cc:	8a000001 	bhi	b3d8 <debug_hexdump(void const*, unsigned int, char const*)+0x104>
    b3d0:	e28dd054 	add	sp, sp, #84	; 0x54
    b3d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3d8:	e2555010 	subs	r5, r5, #16
    b3dc:	1affffd2 	bne	b32c <debug_hexdump(void const*, unsigned int, char const*)+0x58>
    b3e0:	e28dd054 	add	sp, sp, #84	; 0x54
    b3e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b3e8 <debug_stacktrace(unsigned int const*, char const*)>:
    b3e8:	e3510000 	cmp	r1, #0
    b3ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b3f0:	e30f7f48 	movw	r7, #65352	; 0xff48
    b3f4:	e30e6f78 	movw	r6, #61304	; 0xef78
    b3f8:	e3407000 	movt	r7, #0
    b3fc:	e30f8fcc 	movw	r8, #65484	; 0xffcc
    b400:	e24dd008 	sub	sp, sp, #8
    b404:	11a07001 	movne	r7, r1
    b408:	e3406000 	movt	r6, #0
    b40c:	e3408000 	movt	r8, #0
    b410:	e1a05000 	mov	r5, r0
    b414:	e3a04000 	mov	r4, #0
    b418:	ea000003 	b	b42c <debug_stacktrace(unsigned int const*, char const*)+0x44>
    b41c:	e2844001 	add	r4, r4, #1
    b420:	e2855004 	add	r5, r5, #4
    b424:	e3540040 	cmp	r4, #64	; 0x40
    b428:	0a000010 	beq	b470 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    b42c:	e5953000 	ldr	r3, [r5]
    b430:	e3530902 	cmp	r3, #32768	; 0x8000
    b434:	3afffff8 	bcc	b41c <debug_stacktrace(unsigned int const*, char const*)+0x34>
    b438:	e1530006 	cmp	r3, r6
    b43c:	2afffff6 	bcs	b41c <debug_stacktrace(unsigned int const*, char const*)+0x34>
    b440:	eb000099 	bl	b6ac <CLogger::Get()>
    b444:	e595c000 	ldr	ip, [r5]
    b448:	e1a03008 	mov	r3, r8
    b44c:	e58d4000 	str	r4, [sp]
    b450:	e3a02004 	mov	r2, #4
    b454:	e1a01007 	mov	r1, r7
    b458:	e58dc004 	str	ip, [sp, #4]
    b45c:	e2844001 	add	r4, r4, #1
    b460:	eb00016d 	bl	ba1c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b464:	e3540040 	cmp	r4, #64	; 0x40
    b468:	e2855004 	add	r5, r5, #4
    b46c:	1affffee 	bne	b42c <debug_stacktrace(unsigned int const*, char const*)+0x44>
    b470:	e28dd008 	add	sp, sp, #8
    b474:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b478 <CDeviceNameService::CDeviceNameService()>:
    b478:	e3003568 	movw	r3, #1384	; 0x568
    b47c:	e3403001 	movt	r3, #1
    b480:	e3a01000 	mov	r1, #0
    b484:	e5801000 	str	r1, [r0]
    b488:	e5801004 	str	r1, [r0, #4]
    b48c:	e5830000 	str	r0, [r3]
    b490:	e12fff1e 	bx	lr

0000b494 <CDeviceNameService::~CDeviceNameService()>:
    b494:	e5903000 	ldr	r3, [r0]
    b498:	e92d4070 	push	{r4, r5, r6, lr}
    b49c:	e3530000 	cmp	r3, #0
    b4a0:	e1a05000 	mov	r5, r0
    b4a4:	0a00000e 	beq	b4e4 <CDeviceNameService::~CDeviceNameService()+0x50>
    b4a8:	e3a06000 	mov	r6, #0
    b4ac:	e5930004 	ldr	r0, [r3, #4]
    b4b0:	e5934000 	ldr	r4, [r3]
    b4b4:	e3500000 	cmp	r0, #0
    b4b8:	0a000000 	beq	b4c0 <CDeviceNameService::~CDeviceNameService()+0x2c>
    b4bc:	ebfff677 	bl	8ea0 <operator delete[](void*)>
    b4c0:	e5953000 	ldr	r3, [r5]
    b4c4:	e3a01010 	mov	r1, #16
    b4c8:	e5836004 	str	r6, [r3, #4]
    b4cc:	e1a00003 	mov	r0, r3
    b4d0:	e5836008 	str	r6, [r3, #8]
    b4d4:	ebfff672 	bl	8ea4 <operator delete(void*, unsigned int)>
    b4d8:	e2543000 	subs	r3, r4, #0
    b4dc:	e5854000 	str	r4, [r5]
    b4e0:	1afffff1 	bne	b4ac <CDeviceNameService::~CDeviceNameService()+0x18>
    b4e4:	e3003568 	movw	r3, #1384	; 0x568
    b4e8:	e3403001 	movt	r3, #1
    b4ec:	e3a02000 	mov	r2, #0
    b4f0:	e1a00005 	mov	r0, r5
    b4f4:	e5832000 	str	r2, [r3]
    b4f8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b4fc <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    b4fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b500:	e1a05000 	mov	r5, r0
    b504:	e5900004 	ldr	r0, [r0, #4]
    b508:	e1a06001 	mov	r6, r1
    b50c:	e1a08002 	mov	r8, r2
    b510:	e1a07003 	mov	r7, r3
    b514:	e3500000 	cmp	r0, #0
    b518:	1a000013 	bne	b56c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x70>
    b51c:	e3a00010 	mov	r0, #16
    b520:	ebfff65b 	bl	8e94 <operator new(unsigned int)>
    b524:	e1a04000 	mov	r4, r0
    b528:	e1a00006 	mov	r0, r6
    b52c:	eb000ba8 	bl	e3d4 <strlen>
    b530:	e2800001 	add	r0, r0, #1
    b534:	ebfff657 	bl	8e98 <operator new[](unsigned int)>
    b538:	e1a01006 	mov	r1, r6
    b53c:	e5840004 	str	r0, [r4, #4]
    b540:	eb000bc8 	bl	e468 <strcpy>
    b544:	e5952004 	ldr	r2, [r5, #4]
    b548:	e5953000 	ldr	r3, [r5]
    b54c:	e3520000 	cmp	r2, #0
    b550:	e5848008 	str	r8, [r4, #8]
    b554:	e584700c 	str	r7, [r4, #12]
    b558:	e5843000 	str	r3, [r4]
    b55c:	e5854000 	str	r4, [r5]
    b560:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b564:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b568:	eafff65d 	b	8ee4 <LeaveCritical>
    b56c:	ebfff64e 	bl	8eac <EnterCritical>
    b570:	eaffffe9 	b	b51c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>

0000b574 <CDeviceNameService::GetDevice(char const*, int)>:
    b574:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b578:	e1a07000 	mov	r7, r0
    b57c:	e5900004 	ldr	r0, [r0, #4]
    b580:	e24dd00c 	sub	sp, sp, #12
    b584:	e1a05001 	mov	r5, r1
    b588:	e1a06002 	mov	r6, r2
    b58c:	e3500000 	cmp	r0, #0
    b590:	1a000017 	bne	b5f4 <CDeviceNameService::GetDevice(char const*, int)+0x80>
    b594:	e5974000 	ldr	r4, [r7]
    b598:	e3540000 	cmp	r4, #0
    b59c:	1a000003 	bne	b5b0 <CDeviceNameService::GetDevice(char const*, int)+0x3c>
    b5a0:	ea00001b 	b	b614 <CDeviceNameService::GetDevice(char const*, int)+0xa0>
    b5a4:	e5944000 	ldr	r4, [r4]
    b5a8:	e3540000 	cmp	r4, #0
    b5ac:	0a000014 	beq	b604 <CDeviceNameService::GetDevice(char const*, int)+0x90>
    b5b0:	e5941004 	ldr	r1, [r4, #4]
    b5b4:	e1a00005 	mov	r0, r5
    b5b8:	eb000b8f 	bl	e3fc <strcmp>
    b5bc:	e3500000 	cmp	r0, #0
    b5c0:	1afffff7 	bne	b5a4 <CDeviceNameService::GetDevice(char const*, int)+0x30>
    b5c4:	e594300c 	ldr	r3, [r4, #12]
    b5c8:	e1530006 	cmp	r3, r6
    b5cc:	1afffff4 	bne	b5a4 <CDeviceNameService::GetDevice(char const*, int)+0x30>
    b5d0:	e5973004 	ldr	r3, [r7, #4]
    b5d4:	e5940008 	ldr	r0, [r4, #8]
    b5d8:	e3530000 	cmp	r3, #0
    b5dc:	0a00000d 	beq	b618 <CDeviceNameService::GetDevice(char const*, int)+0xa4>
    b5e0:	e58d0004 	str	r0, [sp, #4]
    b5e4:	ebfff63e 	bl	8ee4 <LeaveCritical>
    b5e8:	e59d0004 	ldr	r0, [sp, #4]
    b5ec:	e28dd00c 	add	sp, sp, #12
    b5f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b5f4:	ebfff62c 	bl	8eac <EnterCritical>
    b5f8:	e5974000 	ldr	r4, [r7]
    b5fc:	e3540000 	cmp	r4, #0
    b600:	1affffea 	bne	b5b0 <CDeviceNameService::GetDevice(char const*, int)+0x3c>
    b604:	e5973004 	ldr	r3, [r7, #4]
    b608:	e3530000 	cmp	r3, #0
    b60c:	0a000000 	beq	b614 <CDeviceNameService::GetDevice(char const*, int)+0xa0>
    b610:	ebfff633 	bl	8ee4 <LeaveCritical>
    b614:	e3a00000 	mov	r0, #0
    b618:	e28dd00c 	add	sp, sp, #12
    b61c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000b620 <CDeviceNameService::Get()>:
    b620:	e3003568 	movw	r3, #1384	; 0x568
    b624:	e3403001 	movt	r3, #1
    b628:	e5930000 	ldr	r0, [r3]
    b62c:	e12fff1e 	bx	lr

0000b630 <CLogger::CLogger(unsigned int, CTimer*)>:
    b630:	e92d4010 	push	{r4, lr}
    b634:	e1a04000 	mov	r4, r0
    b638:	e5801000 	str	r1, [r0]
    b63c:	e3a03000 	mov	r3, #0
    b640:	e5802004 	str	r2, [r0, #4]
    b644:	e3a0c001 	mov	ip, #1
    b648:	e5843008 	str	r3, [r4, #8]
    b64c:	e3a00901 	mov	r0, #16384	; 0x4000
    b650:	e584300c 	str	r3, [r4, #12]
    b654:	e5843010 	str	r3, [r4, #16]
    b658:	e5843014 	str	r3, [r4, #20]
    b65c:	e584c018 	str	ip, [r4, #24]
    b660:	ebfff60c 	bl	8e98 <operator new[](unsigned int)>
    b664:	e300356c 	movw	r3, #1388	; 0x56c
    b668:	e3403001 	movt	r3, #1
    b66c:	e5834000 	str	r4, [r3]
    b670:	e584000c 	str	r0, [r4, #12]
    b674:	e1a00004 	mov	r0, r4
    b678:	e8bd8010 	pop	{r4, pc}

0000b67c <CLogger::~CLogger()>:
    b67c:	e92d4010 	push	{r4, lr}
    b680:	e1a04000 	mov	r4, r0
    b684:	e590000c 	ldr	r0, [r0, #12]
    b688:	e3a02000 	mov	r2, #0
    b68c:	e300356c 	movw	r3, #1388	; 0x56c
    b690:	e3403001 	movt	r3, #1
    b694:	e1500002 	cmp	r0, r2
    b698:	e5832000 	str	r2, [r3]
    b69c:	0a000000 	beq	b6a4 <CLogger::~CLogger()+0x28>
    b6a0:	ebfff5fe 	bl	8ea0 <operator delete[](void*)>
    b6a4:	e1a00004 	mov	r0, r4
    b6a8:	e8bd8010 	pop	{r4, pc}

0000b6ac <CLogger::Get()>:
    b6ac:	e300356c 	movw	r3, #1388	; 0x56c
    b6b0:	e3403001 	movt	r3, #1
    b6b4:	e5930000 	ldr	r0, [r3]
    b6b8:	e12fff1e 	bx	lr

0000b6bc <CLogger::Write(char const*)>:
    b6bc:	e92d4070 	push	{r4, r5, r6, lr}
    b6c0:	e1a04000 	mov	r4, r0
    b6c4:	e1a00001 	mov	r0, r1
    b6c8:	e1a05001 	mov	r5, r1
    b6cc:	eb000b40 	bl	e3d4 <strlen>
    b6d0:	e1a01005 	mov	r1, r5
    b6d4:	e1a06000 	mov	r6, r0
    b6d8:	e5940008 	ldr	r0, [r4, #8]
    b6dc:	e1a02006 	mov	r2, r6
    b6e0:	e5903000 	ldr	r3, [r0]
    b6e4:	e593300c 	ldr	r3, [r3, #12]
    b6e8:	e12fff33 	blx	r3
    b6ec:	e5940018 	ldr	r0, [r4, #24]
    b6f0:	e3500000 	cmp	r0, #0
    b6f4:	1a000017 	bne	b758 <CLogger::Write(char const*)+0x9c>
    b6f8:	e0850006 	add	r0, r5, r6
    b6fc:	e1550000 	cmp	r5, r0
    b700:	0a00000f 	beq	b744 <CLogger::Write(char const*)+0x88>
    b704:	e0d530d1 	ldrsb	r3, [r5], #1
    b708:	e353000d 	cmp	r3, #13
    b70c:	0afffffa 	beq	b6fc <CLogger::Write(char const*)+0x40>
    b710:	e5941010 	ldr	r1, [r4, #16]
    b714:	e594c00c 	ldr	ip, [r4, #12]
    b718:	e7cc3001 	strb	r3, [ip, r1]
    b71c:	e5943010 	ldr	r3, [r4, #16]
    b720:	e5941014 	ldr	r1, [r4, #20]
    b724:	e2833001 	add	r3, r3, #1
    b728:	e7ed3053 	ubfx	r3, r3, #0, #14
    b72c:	e5843010 	str	r3, [r4, #16]
    b730:	e1530001 	cmp	r3, r1
    b734:	1afffff0 	bne	b6fc <CLogger::Write(char const*)+0x40>
    b738:	e2433001 	sub	r3, r3, #1
    b73c:	e7ed3053 	ubfx	r3, r3, #0, #14
    b740:	e5843010 	str	r3, [r4, #16]
    b744:	e5943018 	ldr	r3, [r4, #24]
    b748:	e3530000 	cmp	r3, #0
    b74c:	08bd8070 	popeq	{r4, r5, r6, pc}
    b750:	e8bd4070 	pop	{r4, r5, r6, lr}
    b754:	eafff5e2 	b	8ee4 <LeaveCritical>
    b758:	ebfff5d3 	bl	8eac <EnterCritical>
    b75c:	eaffffe5 	b	b6f8 <CLogger::Write(char const*)+0x3c>

0000b760 <CLogger::Read(void*, unsigned int)>:
    b760:	e92d4070 	push	{r4, r5, r6, lr}
    b764:	e1a04000 	mov	r4, r0
    b768:	e5900018 	ldr	r0, [r0, #24]
    b76c:	e1a05001 	mov	r5, r1
    b770:	e1a06002 	mov	r6, r2
    b774:	e3500000 	cmp	r0, #0
    b778:	1a00001b 	bne	b7ec <CLogger::Read(void*, unsigned int)+0x8c>
    b77c:	e5942010 	ldr	r2, [r4, #16]
    b780:	e5943014 	ldr	r3, [r4, #20]
    b784:	e1520003 	cmp	r2, r3
    b788:	0a000020 	beq	b810 <CLogger::Read(void*, unsigned int)+0xb0>
    b78c:	e1a01005 	mov	r1, r5
    b790:	e3a05000 	mov	r5, #0
    b794:	ea00000a 	b	b7c4 <CLogger::Read(void*, unsigned int)+0x64>
    b798:	e594000c 	ldr	r0, [r4, #12]
    b79c:	e2855001 	add	r5, r5, #1
    b7a0:	e19030d3 	ldrsb	r3, [r0, r3]
    b7a4:	e4c13001 	strb	r3, [r1], #1
    b7a8:	e5943014 	ldr	r3, [r4, #20]
    b7ac:	e5940010 	ldr	r0, [r4, #16]
    b7b0:	e2833001 	add	r3, r3, #1
    b7b4:	e7ed3053 	ubfx	r3, r3, #0, #14
    b7b8:	e5843014 	str	r3, [r4, #20]
    b7bc:	e1530000 	cmp	r3, r0
    b7c0:	0a000001 	beq	b7cc <CLogger::Read(void*, unsigned int)+0x6c>
    b7c4:	e1550006 	cmp	r5, r6
    b7c8:	1afffff2 	bne	b798 <CLogger::Read(void*, unsigned int)+0x38>
    b7cc:	e5943018 	ldr	r3, [r4, #24]
    b7d0:	e3530000 	cmp	r3, #0
    b7d4:	1a000001 	bne	b7e0 <CLogger::Read(void*, unsigned int)+0x80>
    b7d8:	e1a00005 	mov	r0, r5
    b7dc:	e8bd8070 	pop	{r4, r5, r6, pc}
    b7e0:	ebfff5bf 	bl	8ee4 <LeaveCritical>
    b7e4:	e1a00005 	mov	r0, r5
    b7e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b7ec:	ebfff5ae 	bl	8eac <EnterCritical>
    b7f0:	e5942010 	ldr	r2, [r4, #16]
    b7f4:	e5943014 	ldr	r3, [r4, #20]
    b7f8:	e1520003 	cmp	r2, r3
    b7fc:	1affffe2 	bne	b78c <CLogger::Read(void*, unsigned int)+0x2c>
    b800:	e5943018 	ldr	r3, [r4, #24]
    b804:	e3530000 	cmp	r3, #0
    b808:	0a000000 	beq	b810 <CLogger::Read(void*, unsigned int)+0xb0>
    b80c:	ebfff5b4 	bl	8ee4 <LeaveCritical>
    b810:	e3e05000 	mvn	r5, #0
    b814:	e1a00005 	mov	r0, r5
    b818:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b81c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    b81c:	e590c000 	ldr	ip, [r0]
    b820:	e152000c 	cmp	r2, ip
    b824:	812fff1e 	bxhi	lr
    b828:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b82c:	e24dd020 	sub	sp, sp, #32
    b830:	e1a04000 	mov	r4, r0
    b834:	e1a05002 	mov	r5, r2
    b838:	e1a0000d 	mov	r0, sp
    b83c:	e1a07003 	mov	r7, r3
    b840:	e1a06001 	mov	r6, r1
    b844:	eb0002d0 	bl	c38c <CString::CString()>
    b848:	e3550000 	cmp	r5, #0
    b84c:	0a000049 	beq	b978 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    b850:	e5940004 	ldr	r0, [r4, #4]
    b854:	e3500000 	cmp	r0, #0
    b858:	0a000032 	beq	b928 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    b85c:	ebfff65b 	bl	91d0 <CTimer::GetTimeString()>
    b860:	e2508000 	subs	r8, r0, #0
    b864:	0a00000b 	beq	b898 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    b868:	eb0002de 	bl	c3e8 <CString::operator char const*() const>
    b86c:	e1a01000 	mov	r1, r0
    b870:	e1a0000d 	mov	r0, sp
    b874:	eb0002f6 	bl	c454 <CString::Append(char const*)>
    b878:	e1a0000d 	mov	r0, sp
    b87c:	e30f1fe8 	movw	r1, #65512	; 0xffe8
    b880:	e3401000 	movt	r1, #0
    b884:	eb0002f2 	bl	c454 <CString::Append(char const*)>
    b888:	e5983000 	ldr	r3, [r8]
    b88c:	e1a00008 	mov	r0, r8
    b890:	e5933004 	ldr	r3, [r3, #4]
    b894:	e12fff33 	blx	r3
    b898:	e1a01006 	mov	r1, r6
    b89c:	e1a0000d 	mov	r0, sp
    b8a0:	e28d6010 	add	r6, sp, #16
    b8a4:	eb0002ea 	bl	c454 <CString::Append(char const*)>
    b8a8:	e1a0000d 	mov	r0, sp
    b8ac:	e30f1fec 	movw	r1, #65516	; 0xffec
    b8b0:	e3401000 	movt	r1, #0
    b8b4:	eb0002e6 	bl	c454 <CString::Append(char const*)>
    b8b8:	e1a00006 	mov	r0, r6
    b8bc:	eb0002b2 	bl	c38c <CString::CString()>
    b8c0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    b8c4:	e1a01007 	mov	r1, r7
    b8c8:	e1a00006 	mov	r0, r6
    b8cc:	eb000405 	bl	c8e8 <CString::FormatV(char const*, std::__va_list)>
    b8d0:	e1a00006 	mov	r0, r6
    b8d4:	eb0002c3 	bl	c3e8 <CString::operator char const*() const>
    b8d8:	e1a01000 	mov	r1, r0
    b8dc:	e1a0000d 	mov	r0, sp
    b8e0:	eb0002db 	bl	c454 <CString::Append(char const*)>
    b8e4:	e3550000 	cmp	r5, #0
    b8e8:	0a00003c 	beq	b9e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    b8ec:	e1a0000d 	mov	r0, sp
    b8f0:	e30e1fa4 	movw	r1, #61348	; 0xefa4
    b8f4:	e3401000 	movt	r1, #0
    b8f8:	eb0002d5 	bl	c454 <CString::Append(char const*)>
    b8fc:	e1a0000d 	mov	r0, sp
    b900:	eb0002b8 	bl	c3e8 <CString::operator char const*() const>
    b904:	e1a01000 	mov	r1, r0
    b908:	e1a00004 	mov	r0, r4
    b90c:	ebffff6a 	bl	b6bc <CLogger::Write(char const*)>
    b910:	e1a00006 	mov	r0, r6
    b914:	eb000269 	bl	c2c0 <CString::~CString()>
    b918:	e1a0000d 	mov	r0, sp
    b91c:	eb000267 	bl	c2c0 <CString::~CString()>
    b920:	e28dd020 	add	sp, sp, #32
    b924:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b928:	e1a01006 	mov	r1, r6
    b92c:	e1a0000d 	mov	r0, sp
    b930:	e28d6010 	add	r6, sp, #16
    b934:	eb0002c6 	bl	c454 <CString::Append(char const*)>
    b938:	e1a0000d 	mov	r0, sp
    b93c:	e30f1fec 	movw	r1, #65516	; 0xffec
    b940:	e3401000 	movt	r1, #0
    b944:	eb0002c2 	bl	c454 <CString::Append(char const*)>
    b948:	e1a00006 	mov	r0, r6
    b94c:	eb00028e 	bl	c38c <CString::CString()>
    b950:	e1a01007 	mov	r1, r7
    b954:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    b958:	e1a00006 	mov	r0, r6
    b95c:	eb0003e1 	bl	c8e8 <CString::FormatV(char const*, std::__va_list)>
    b960:	e1a00006 	mov	r0, r6
    b964:	eb00029f 	bl	c3e8 <CString::operator char const*() const>
    b968:	e1a01000 	mov	r1, r0
    b96c:	e1a0000d 	mov	r0, sp
    b970:	eb0002b7 	bl	c454 <CString::Append(char const*)>
    b974:	eaffffdc 	b	b8ec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    b978:	e30f1fe0 	movw	r1, #65504	; 0xffe0
    b97c:	e1a0000d 	mov	r0, sp
    b980:	e3401000 	movt	r1, #0
    b984:	eb00029d 	bl	c400 <CString::operator=(char const*)>
    b988:	e5940004 	ldr	r0, [r4, #4]
    b98c:	e3500000 	cmp	r0, #0
    b990:	1affffb1 	bne	b85c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    b994:	e1a01006 	mov	r1, r6
    b998:	e1a0000d 	mov	r0, sp
    b99c:	e28d6010 	add	r6, sp, #16
    b9a0:	eb0002ab 	bl	c454 <CString::Append(char const*)>
    b9a4:	e1a0000d 	mov	r0, sp
    b9a8:	e30f1fec 	movw	r1, #65516	; 0xffec
    b9ac:	e3401000 	movt	r1, #0
    b9b0:	eb0002a7 	bl	c454 <CString::Append(char const*)>
    b9b4:	e1a00006 	mov	r0, r6
    b9b8:	eb000273 	bl	c38c <CString::CString()>
    b9bc:	e1a01007 	mov	r1, r7
    b9c0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    b9c4:	e1a00006 	mov	r0, r6
    b9c8:	eb0003c6 	bl	c8e8 <CString::FormatV(char const*, std::__va_list)>
    b9cc:	e1a00006 	mov	r0, r6
    b9d0:	eb000284 	bl	c3e8 <CString::operator char const*() const>
    b9d4:	e1a01000 	mov	r1, r0
    b9d8:	e1a0000d 	mov	r0, sp
    b9dc:	eb00029c 	bl	c454 <CString::Append(char const*)>
    b9e0:	e1a0000d 	mov	r0, sp
    b9e4:	e30f1ff0 	movw	r1, #65520	; 0xfff0
    b9e8:	e3401000 	movt	r1, #0
    b9ec:	eb000298 	bl	c454 <CString::Append(char const*)>
    b9f0:	e1a0000d 	mov	r0, sp
    b9f4:	e30e1fa4 	movw	r1, #61348	; 0xefa4
    b9f8:	e3401000 	movt	r1, #0
    b9fc:	eb000294 	bl	c454 <CString::Append(char const*)>
    ba00:	e1a0000d 	mov	r0, sp
    ba04:	eb000277 	bl	c3e8 <CString::operator char const*() const>
    ba08:	e1a01000 	mov	r1, r0
    ba0c:	e1a00004 	mov	r0, r4
    ba10:	ebffff29 	bl	b6bc <CLogger::Write(char const*)>
    ba14:	ebfff545 	bl	8f30 <halt>
    ba18:	eaffffbc 	b	b910 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000ba1c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    ba1c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    ba20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ba24:	e24dd010 	sub	sp, sp, #16
    ba28:	e28dc018 	add	ip, sp, #24
    ba2c:	e59d3014 	ldr	r3, [sp, #20]
    ba30:	e58dc000 	str	ip, [sp]
    ba34:	e58dc00c 	str	ip, [sp, #12]
    ba38:	ebffff77 	bl	b81c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    ba3c:	e28dd010 	add	sp, sp, #16
    ba40:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ba44:	e28dd004 	add	sp, sp, #4
    ba48:	e12fff1e 	bx	lr

0000ba4c <CLogger::Initialize(CDevice*)>:
    ba4c:	e92d4010 	push	{r4, lr}
    ba50:	e24dd008 	sub	sp, sp, #8
    ba54:	e5801008 	str	r1, [r0, #8]
    ba58:	e1a04000 	mov	r4, r0
    ba5c:	eb00083e 	bl	db5c <CMachineInfo::Get()>
    ba60:	eb0007e0 	bl	d9e8 <CMachineInfo::GetMachineName() const>
    ba64:	e3a02003 	mov	r2, #3
    ba68:	e30f3ff8 	movw	r3, #65528	; 0xfff8
    ba6c:	e3001010 	movw	r1, #16
    ba70:	e3403000 	movt	r3, #0
    ba74:	e3401001 	movt	r1, #1
    ba78:	e58d0000 	str	r0, [sp]
    ba7c:	e1a00004 	mov	r0, r4
    ba80:	ebffffe5 	bl	ba1c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ba84:	e3a00001 	mov	r0, #1
    ba88:	e28dd008 	add	sp, sp, #8
    ba8c:	e8bd8010 	pop	{r4, pc}

0000ba90 <CSerialDevice::Read(void*, unsigned int)>:
    ba90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ba94:	e59070a4 	ldr	r7, [r0, #164]	; 0xa4
    ba98:	e3570000 	cmp	r7, #0
    ba9c:	0a000034 	beq	bb74 <CSerialDevice::Read(void*, unsigned int)+0xe4>
    baa0:	e2806a01 	add	r6, r0, #4096	; 0x1000
    baa4:	e1a04000 	mov	r4, r0
    baa8:	e1a07002 	mov	r7, r2
    baac:	e1a05001 	mov	r5, r1
    bab0:	e59600c8 	ldr	r0, [r6, #200]	; 0xc8
    bab4:	e3500000 	cmp	r0, #0
    bab8:	1a000020 	bne	bb40 <CSerialDevice::Read(void*, unsigned int)+0xb0>
    babc:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    bac0:	e3530000 	cmp	r3, #0
    bac4:	ba000021 	blt	bb50 <CSerialDevice::Read(void*, unsigned int)+0xc0>
    bac8:	e3570000 	cmp	r7, #0
    bacc:	0a000016 	beq	bb2c <CSerialDevice::Read(void*, unsigned int)+0x9c>
    bad0:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    bad4:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    bad8:	e1520003 	cmp	r2, r3
    badc:	0a000049 	beq	bc08 <CSerialDevice::Read(void*, unsigned int)+0x178>
    bae0:	e085c007 	add	ip, r5, r7
    bae4:	e1a02005 	mov	r2, r5
    bae8:	ea000003 	b	bafc <CSerialDevice::Read(void*, unsigned int)+0x6c>
    baec:	e59418b0 	ldr	r1, [r4, #2224]	; 0x8b0
    baf0:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    baf4:	e1510003 	cmp	r1, r3
    baf8:	0a00000b 	beq	bb2c <CSerialDevice::Read(void*, unsigned int)+0x9c>
    bafc:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    bb00:	e0840003 	add	r0, r4, r3
    bb04:	e2833001 	add	r3, r3, #1
    bb08:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    bb0c:	e5d030b0 	ldrb	r3, [r0, #176]	; 0xb0
    bb10:	e4c23001 	strb	r3, [r2], #1
    bb14:	e152000c 	cmp	r2, ip
    bb18:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    bb1c:	e0427005 	sub	r7, r2, r5
    bb20:	e7ea3053 	ubfx	r3, r3, #0, #11
    bb24:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    bb28:	1affffef 	bne	baec <CSerialDevice::Read(void*, unsigned int)+0x5c>
    bb2c:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    bb30:	e3530000 	cmp	r3, #0
    bb34:	1a00000b 	bne	bb68 <CSerialDevice::Read(void*, unsigned int)+0xd8>
    bb38:	e1a00007 	mov	r0, r7
    bb3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bb40:	ebfff4d9 	bl	8eac <EnterCritical>
    bb44:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    bb48:	e3530000 	cmp	r3, #0
    bb4c:	aaffffdd 	bge	bac8 <CSerialDevice::Read(void*, unsigned int)+0x38>
    bb50:	e3a03000 	mov	r3, #0
    bb54:	e59478b8 	ldr	r7, [r4, #2232]	; 0x8b8
    bb58:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    bb5c:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    bb60:	e3530000 	cmp	r3, #0
    bb64:	0afffff3 	beq	bb38 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    bb68:	ebfff4dd 	bl	8ee4 <LeaveCritical>
    bb6c:	e1a00007 	mov	r0, r7
    bb70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bb74:	e3520000 	cmp	r2, #0
    bb78:	0a000024 	beq	bc10 <CSerialDevice::Read(void*, unsigned int)+0x180>
    bb7c:	e3a0ca01 	mov	ip, #4096	; 0x1000
    bb80:	e343cf20 	movt	ip, #16160	; 0x3f20
    bb84:	e59c3018 	ldr	r3, [ip, #24]
    bb88:	e3130010 	tst	r3, #16
    bb8c:	1affffe9 	bne	bb38 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    bb90:	e59c3000 	ldr	r3, [ip]
    bb94:	e3130b01 	tst	r3, #1024	; 0x400
    bb98:	1a000014 	bne	bbf0 <CSerialDevice::Read(void*, unsigned int)+0x160>
    bb9c:	e3130b02 	tst	r3, #2048	; 0x800
    bba0:	1a000014 	bne	bbf8 <CSerialDevice::Read(void*, unsigned int)+0x168>
    bba4:	e3130c01 	tst	r3, #256	; 0x100
    bba8:	1a000014 	bne	bc00 <CSerialDevice::Read(void*, unsigned int)+0x170>
    bbac:	e0812002 	add	r2, r1, r2
    bbb0:	e1a00001 	mov	r0, r1
    bbb4:	ea000003 	b	bbc8 <CSerialDevice::Read(void*, unsigned int)+0x138>
    bbb8:	e3130b02 	tst	r3, #2048	; 0x800
    bbbc:	1a00000d 	bne	bbf8 <CSerialDevice::Read(void*, unsigned int)+0x168>
    bbc0:	e3130c01 	tst	r3, #256	; 0x100
    bbc4:	1a00000d 	bne	bc00 <CSerialDevice::Read(void*, unsigned int)+0x170>
    bbc8:	e4c03001 	strb	r3, [r0], #1
    bbcc:	e1520000 	cmp	r2, r0
    bbd0:	e0407001 	sub	r7, r0, r1
    bbd4:	0affffd7 	beq	bb38 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    bbd8:	e59c3018 	ldr	r3, [ip, #24]
    bbdc:	e3130010 	tst	r3, #16
    bbe0:	1affffd4 	bne	bb38 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    bbe4:	e59c3000 	ldr	r3, [ip]
    bbe8:	e3130b01 	tst	r3, #1024	; 0x400
    bbec:	0afffff1 	beq	bbb8 <CSerialDevice::Read(void*, unsigned int)+0x128>
    bbf0:	e3e07000 	mvn	r7, #0
    bbf4:	eaffffcf 	b	bb38 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    bbf8:	e3e07001 	mvn	r7, #1
    bbfc:	eaffffcd 	b	bb38 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    bc00:	e3e07002 	mvn	r7, #2
    bc04:	eaffffcb 	b	bb38 <CSerialDevice::Read(void*, unsigned int)+0xa8>
    bc08:	e3a07000 	mov	r7, #0
    bc0c:	eaffffc6 	b	bb2c <CSerialDevice::Read(void*, unsigned int)+0x9c>
    bc10:	e1a07002 	mov	r7, r2
    bc14:	eaffffc7 	b	bb38 <CSerialDevice::Read(void*, unsigned int)+0xa8>

0000bc18 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>:
    bc18:	e92d4070 	push	{r4, r5, r6, lr}
    bc1c:	e1a04000 	mov	r4, r0
    bc20:	e1a05002 	mov	r5, r2
    bc24:	e1a06001 	mov	r6, r1
    bc28:	eb000bdd 	bl	eba4 <CDevice::CDevice()>
    bc2c:	e59fc09c 	ldr	ip, [pc, #156]	; bcd0 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)+0xb8>
    bc30:	e1a00004 	mov	r0, r4
    bc34:	e3a03000 	mov	r3, #0
    bc38:	e1a02003 	mov	r2, r3
    bc3c:	e3a01020 	mov	r1, #32
    bc40:	e480c004 	str	ip, [r0], #4
    bc44:	ebfff3d4 	bl	8b9c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    bc48:	e3a03000 	mov	r3, #0
    bc4c:	e1a02003 	mov	r2, r3
    bc50:	e284002c 	add	r0, r4, #44	; 0x2c
    bc54:	e3a01021 	mov	r1, #33	; 0x21
    bc58:	ebfff3cf 	bl	8b9c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    bc5c:	e2840054 	add	r0, r4, #84	; 0x54
    bc60:	e3a03000 	mov	r3, #0
    bc64:	e3a02004 	mov	r2, #4
    bc68:	e3a0100e 	mov	r1, #14
    bc6c:	ebfff3ca 	bl	8b9c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    bc70:	e284007c 	add	r0, r4, #124	; 0x7c
    bc74:	e3a03000 	mov	r3, #0
    bc78:	e3a02004 	mov	r2, #4
    bc7c:	e3a0100f 	mov	r1, #15
    bc80:	ebfff3c5 	bl	8b9c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    bc84:	e2842a01 	add	r2, r4, #4096	; 0x1000
    bc88:	e3550000 	cmp	r5, #0
    bc8c:	e3a03000 	mov	r3, #0
    bc90:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    bc94:	e3a01001 	mov	r1, #1
    bc98:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    bc9c:	13a0c002 	movne	ip, #2
    bca0:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    bca4:	03a0c001 	moveq	ip, #1
    bca8:	e58450a8 	str	r5, [r4, #168]	; 0xa8
    bcac:	e1a00004 	mov	r0, r4
    bcb0:	e58430ac 	str	r3, [r4, #172]	; 0xac
    bcb4:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    bcb8:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    bcbc:	e58210c4 	str	r1, [r2, #196]	; 0xc4
    bcc0:	e58230c0 	str	r3, [r2, #192]	; 0xc0
    bcc4:	e58210cc 	str	r1, [r2, #204]	; 0xcc
    bcc8:	e582c0c8 	str	ip, [r2, #200]	; 0xc8
    bccc:	e8bd8070 	pop	{r4, r5, r6, pc}
    bcd0:	00010020 	.word	0x00010020

0000bcd4 <CSerialDevice::Initialize(unsigned int)>:
    bcd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bcd8:	e1a05001 	mov	r5, r1
    bcdc:	e1a06201 	lsl	r6, r1, #4
    bce0:	e1a04000 	mov	r4, r0
    bce4:	eb00079c 	bl	db5c <CMachineInfo::Get()>
    bce8:	e3a01002 	mov	r1, #2
    bcec:	eb000753 	bl	da40 <CMachineInfo::GetClockRate(unsigned int) const>
    bcf0:	e1a01006 	mov	r1, r6
    bcf4:	e1a08000 	mov	r8, r0
    bcf8:	eb000989 	bl	e324 <__aeabi_uidiv>
    bcfc:	e1a01006 	mov	r1, r6
    bd00:	e1a07000 	mov	r7, r0
    bd04:	e1a00008 	mov	r0, r8
    bd08:	eb000989 	bl	e334 <__aeabi_uidivmod>
    bd0c:	e1a00181 	lsl	r0, r1, #3
    bd10:	e1a01005 	mov	r1, r5
    bd14:	eb000982 	bl	e324 <__aeabi_uidiv>
    bd18:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    bd1c:	e3530000 	cmp	r3, #0
    bd20:	e2005001 	and	r5, r0, #1
    bd24:	e08550a0 	add	r5, r5, r0, lsr #1
    bd28:	0a000029 	beq	bdd4 <CSerialDevice::Initialize(unsigned int)+0x100>
    bd2c:	e59420a8 	ldr	r2, [r4, #168]	; 0xa8
    bd30:	e1a00003 	mov	r0, r3
    bd34:	e3a01039 	mov	r1, #57	; 0x39
    bd38:	e1a03004 	mov	r3, r4
    bd3c:	e3520000 	cmp	r2, #0
    bd40:	e30c220c 	movw	r2, #49676	; 0xc20c
    bd44:	e3402000 	movt	r2, #0
    bd48:	0a00001f 	beq	bdcc <CSerialDevice::Initialize(unsigned int)+0xf8>
    bd4c:	eb00054e 	bl	d28c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    bd50:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
    bd54:	e3a03a01 	mov	r3, #4096	; 0x1000
    bd58:	e3433f20 	movt	r3, #16160	; 0x3f20
    bd5c:	e3a02001 	mov	r2, #1
    bd60:	e3510000 	cmp	r1, #0
    bd64:	e58420ac 	str	r2, [r4, #172]	; 0xac
    bd68:	e3a01000 	mov	r1, #0
    bd6c:	e30027ff 	movw	r2, #2047	; 0x7ff
    bd70:	e5831038 	str	r1, [r3, #56]	; 0x38
    bd74:	e5832044 	str	r2, [r3, #68]	; 0x44
    bd78:	e5837024 	str	r7, [r3, #36]	; 0x24
    bd7c:	e5835028 	str	r5, [r3, #40]	; 0x28
    bd80:	0a00001a 	beq	bdf0 <CSerialDevice::Initialize(unsigned int)+0x11c>
    bd84:	e3a02009 	mov	r2, #9
    bd88:	e3a01070 	mov	r1, #112	; 0x70
    bd8c:	e5832034 	str	r2, [r3, #52]	; 0x34
    bd90:	e3a02e45 	mov	r2, #1104	; 0x450
    bd94:	e583102c 	str	r1, [r3, #44]	; 0x2c
    bd98:	e5832038 	str	r2, [r3, #56]	; 0x38
    bd9c:	e3a03a01 	mov	r3, #4096	; 0x1000
    bda0:	e3433f20 	movt	r3, #16160	; 0x3f20
    bda4:	e3002301 	movw	r2, #769	; 0x301
    bda8:	e5832030 	str	r2, [r3, #48]	; 0x30
    bdac:	ebfffe1b 	bl	b620 <CDeviceNameService::Get()>
    bdb0:	e1a02004 	mov	r2, r4
    bdb4:	e3a03000 	mov	r3, #0
    bdb8:	e3001034 	movw	r1, #52	; 0x34
    bdbc:	e3401001 	movt	r1, #1
    bdc0:	ebfffdcd 	bl	b4fc <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    bdc4:	e3a00001 	mov	r0, #1
    bdc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bdcc:	eb000508 	bl	d1f4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    bdd0:	eaffffde 	b	bd50 <CSerialDevice::Initialize(unsigned int)+0x7c>
    bdd4:	e3a02a01 	mov	r2, #4096	; 0x1000
    bdd8:	e3432f20 	movt	r2, #16160	; 0x3f20
    bddc:	e30017ff 	movw	r1, #2047	; 0x7ff
    bde0:	e5823038 	str	r3, [r2, #56]	; 0x38
    bde4:	e5821044 	str	r1, [r2, #68]	; 0x44
    bde8:	e5827024 	str	r7, [r2, #36]	; 0x24
    bdec:	e5825028 	str	r5, [r2, #40]	; 0x28
    bdf0:	e3a03a01 	mov	r3, #4096	; 0x1000
    bdf4:	e3433f20 	movt	r3, #16160	; 0x3f20
    bdf8:	e3a02060 	mov	r2, #96	; 0x60
    bdfc:	e583202c 	str	r2, [r3, #44]	; 0x2c
    be00:	eaffffe5 	b	bd9c <CSerialDevice::Initialize(unsigned int)+0xc8>

0000be04 <CSerialDevice::GetOptions() const>:
    be04:	e2800a01 	add	r0, r0, #4096	; 0x1000
    be08:	e59000c4 	ldr	r0, [r0, #196]	; 0xc4
    be0c:	e12fff1e 	bx	lr

0000be10 <CSerialDevice::SetOptions(unsigned int)>:
    be10:	e2800a01 	add	r0, r0, #4096	; 0x1000
    be14:	e58010c4 	str	r1, [r0, #196]	; 0xc4
    be18:	e12fff1e 	bx	lr

0000be1c <CSerialDevice::Write(unsigned char)>:
    be1c:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    be20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    be24:	e3530000 	cmp	r3, #0
    be28:	03a02a01 	moveq	r2, #4096	; 0x1000
    be2c:	03432f20 	movteq	r2, #16160	; 0x3f20
    be30:	0a000018 	beq	be98 <CSerialDevice::Write(unsigned char)+0x7c>
    be34:	e2805a01 	add	r5, r0, #4096	; 0x1000
    be38:	e1a06001 	mov	r6, r1
    be3c:	e1a04000 	mov	r4, r0
    be40:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
    be44:	e3520000 	cmp	r2, #0
    be48:	1a00001c 	bne	bec0 <CSerialDevice::Write(unsigned char)+0xa4>
    be4c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    be50:	e59510c0 	ldr	r1, [r5, #192]	; 0xc0
    be54:	e2833001 	add	r3, r3, #1
    be58:	e7ea3053 	ubfx	r3, r3, #0, #11
    be5c:	e1530001 	cmp	r3, r1
    be60:	0a000021 	beq	beec <CSerialDevice::Write(unsigned char)+0xd0>
    be64:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    be68:	e3a07001 	mov	r7, #1
    be6c:	e0840003 	add	r0, r4, r3
    be70:	e0833007 	add	r3, r3, r7
    be74:	e58530bc 	str	r3, [r5, #188]	; 0xbc
    be78:	e5c068bc 	strb	r6, [r0, #2236]	; 0x8bc
    be7c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    be80:	e7ea3053 	ubfx	r3, r3, #0, #11
    be84:	e58530bc 	str	r3, [r5, #188]	; 0xbc
    be88:	e3520000 	cmp	r2, #0
    be8c:	1a000008 	bne	beb4 <CSerialDevice::Write(unsigned char)+0x98>
    be90:	e1a00007 	mov	r0, r7
    be94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    be98:	e5923018 	ldr	r3, [r2, #24]
    be9c:	e3130020 	tst	r3, #32
    bea0:	1afffffc 	bne	be98 <CSerialDevice::Write(unsigned char)+0x7c>
    bea4:	e3a07001 	mov	r7, #1
    bea8:	e5821000 	str	r1, [r2]
    beac:	e1a00007 	mov	r0, r7
    beb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    beb4:	ebfff40a 	bl	8ee4 <LeaveCritical>
    beb8:	e1a00007 	mov	r0, r7
    bebc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bec0:	e1a00002 	mov	r0, r2
    bec4:	ebfff3f8 	bl	8eac <EnterCritical>
    bec8:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    becc:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
    bed0:	e2833001 	add	r3, r3, #1
    bed4:	e7ea3053 	ubfx	r3, r3, #0, #11
    bed8:	e1530002 	cmp	r3, r2
    bedc:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
    bee0:	03a07000 	moveq	r7, #0
    bee4:	1affffde 	bne	be64 <CSerialDevice::Write(unsigned char)+0x48>
    bee8:	eaffffe6 	b	be88 <CSerialDevice::Write(unsigned char)+0x6c>
    beec:	e1a07002 	mov	r7, r2
    bef0:	e1a00007 	mov	r0, r7
    bef4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bef8 <CSerialDevice::Write(void const*, unsigned int)>:
    bef8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    befc:	e2804a01 	add	r4, r0, #4096	; 0x1000
    bf00:	e1a07000 	mov	r7, r0
    bf04:	e1a06001 	mov	r6, r1
    bf08:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
    bf0c:	e1a05002 	mov	r5, r2
    bf10:	e3500000 	cmp	r0, #0
    bf14:	1a000052 	bne	c064 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    bf18:	e3520000 	cmp	r2, #0
    bf1c:	e2428001 	sub	r8, r2, #1
    bf20:	0a000018 	beq	bf88 <CSerialDevice::Write(void const*, unsigned int)+0x90>
    bf24:	e2888001 	add	r8, r8, #1
    bf28:	e3a05000 	mov	r5, #0
    bf2c:	ea000002 	b	bf3c <CSerialDevice::Write(void const*, unsigned int)+0x44>
    bf30:	e2855001 	add	r5, r5, #1
    bf34:	e1580005 	cmp	r8, r5
    bf38:	0a00000f 	beq	bf7c <CSerialDevice::Write(void const*, unsigned int)+0x84>
    bf3c:	e5d61000 	ldrb	r1, [r6]
    bf40:	e1a00007 	mov	r0, r7
    bf44:	ebffffb4 	bl	be1c <CSerialDevice::Write(unsigned char)>
    bf48:	e3500000 	cmp	r0, #0
    bf4c:	0a00000a 	beq	bf7c <CSerialDevice::Write(void const*, unsigned int)+0x84>
    bf50:	e4d63001 	ldrb	r3, [r6], #1
    bf54:	e353000a 	cmp	r3, #10
    bf58:	1afffff4 	bne	bf30 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    bf5c:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    bf60:	e3130001 	tst	r3, #1
    bf64:	0afffff1 	beq	bf30 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    bf68:	e3a0100d 	mov	r1, #13
    bf6c:	e1a00007 	mov	r0, r7
    bf70:	ebffffa9 	bl	be1c <CSerialDevice::Write(unsigned char)>
    bf74:	e3500000 	cmp	r0, #0
    bf78:	1affffec 	bne	bf30 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    bf7c:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    bf80:	e3530000 	cmp	r3, #0
    bf84:	1a000034 	bne	c05c <CSerialDevice::Write(void const*, unsigned int)+0x164>
    bf88:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    bf8c:	e3530000 	cmp	r3, #0
    bf90:	0a000023 	beq	c024 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    bf94:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
    bf98:	e3500000 	cmp	r0, #0
    bf9c:	1a000035 	bne	c078 <CSerialDevice::Write(void const*, unsigned int)+0x180>
    bfa0:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    bfa4:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    bfa8:	e1520003 	cmp	r2, r3
    bfac:	0a00001c 	beq	c024 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    bfb0:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    bfb4:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
    bfb8:	e1520003 	cmp	r2, r3
    bfbc:	0a000015 	beq	c018 <CSerialDevice::Write(void const*, unsigned int)+0x120>
    bfc0:	e3a02a01 	mov	r2, #4096	; 0x1000
    bfc4:	e3432f20 	movt	r2, #16160	; 0x3f20
    bfc8:	e5923018 	ldr	r3, [r2, #24]
    bfcc:	e3130020 	tst	r3, #32
    bfd0:	0a000003 	beq	bfe4 <CSerialDevice::Write(void const*, unsigned int)+0xec>
    bfd4:	ea000017 	b	c038 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    bfd8:	e5923018 	ldr	r3, [r2, #24]
    bfdc:	e3130020 	tst	r3, #32
    bfe0:	1a000014 	bne	c038 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    bfe4:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    bfe8:	e0871003 	add	r1, r7, r3
    bfec:	e2833001 	add	r3, r3, #1
    bff0:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    bff4:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
    bff8:	e5823000 	str	r3, [r2]
    bffc:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    c000:	e7ea3053 	ubfx	r3, r3, #0, #11
    c004:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    c008:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
    c00c:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    c010:	e1510003 	cmp	r1, r3
    c014:	1affffef 	bne	bfd8 <CSerialDevice::Write(void const*, unsigned int)+0xe0>
    c018:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    c01c:	e3530000 	cmp	r3, #0
    c020:	1a000001 	bne	c02c <CSerialDevice::Write(void const*, unsigned int)+0x134>
    c024:	e1a00005 	mov	r0, r5
    c028:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c02c:	ebfff3ac 	bl	8ee4 <LeaveCritical>
    c030:	e1a00005 	mov	r0, r5
    c034:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c038:	e3a03a01 	mov	r3, #4096	; 0x1000
    c03c:	e3433f20 	movt	r3, #16160	; 0x3f20
    c040:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    c044:	e3822020 	orr	r2, r2, #32
    c048:	e5832038 	str	r2, [r3, #56]	; 0x38
    c04c:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    c050:	e3530000 	cmp	r3, #0
    c054:	0afffff2 	beq	c024 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    c058:	eafffff3 	b	c02c <CSerialDevice::Write(void const*, unsigned int)+0x134>
    c05c:	ebfff3a0 	bl	8ee4 <LeaveCritical>
    c060:	eaffffc8 	b	bf88 <CSerialDevice::Write(void const*, unsigned int)+0x90>
    c064:	ebfff390 	bl	8eac <EnterCritical>
    c068:	e3550000 	cmp	r5, #0
    c06c:	e2458001 	sub	r8, r5, #1
    c070:	1affffab 	bne	bf24 <CSerialDevice::Write(void const*, unsigned int)+0x2c>
    c074:	eaffffc0 	b	bf7c <CSerialDevice::Write(void const*, unsigned int)+0x84>
    c078:	ebfff38b 	bl	8eac <EnterCritical>
    c07c:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    c080:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    c084:	e1520003 	cmp	r2, r3
    c088:	1affffc8 	bne	bfb0 <CSerialDevice::Write(void const*, unsigned int)+0xb8>
    c08c:	eaffffe1 	b	c018 <CSerialDevice::Write(void const*, unsigned int)+0x120>

0000c090 <CSerialDevice::InterruptHandler()>:
    c090:	e92d4070 	push	{r4, r5, r6, lr}
    c094:	e2805a01 	add	r5, r0, #4096	; 0x1000
    c098:	e1a04000 	mov	r4, r0
    c09c:	e59500c8 	ldr	r0, [r5, #200]	; 0xc8
    c0a0:	e3500000 	cmp	r0, #0
    c0a4:	1a000056 	bne	c204 <CSerialDevice::InterruptHandler()+0x174>
    c0a8:	e3a03a01 	mov	r3, #4096	; 0x1000
    c0ac:	e3433f20 	movt	r3, #16160	; 0x3f20
    c0b0:	e3e0e002 	mvn	lr, #2
    c0b4:	e3e00001 	mvn	r0, #1
    c0b8:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    c0bc:	e1a01003 	mov	r1, r3
    c0c0:	e3e0c000 	mvn	ip, #0
    c0c4:	e5832044 	str	r2, [r3, #68]	; 0x44
    c0c8:	e5913018 	ldr	r3, [r1, #24]
    c0cc:	e3130010 	tst	r3, #16
    c0d0:	1a000016 	bne	c130 <CSerialDevice::InterruptHandler()+0xa0>
    c0d4:	e5912000 	ldr	r2, [r1]
    c0d8:	e3120b01 	tst	r2, #1024	; 0x400
    c0dc:	0a000032 	beq	c1ac <CSerialDevice::InterruptHandler()+0x11c>
    c0e0:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    c0e4:	e3530000 	cmp	r3, #0
    c0e8:	0584c8b8 	streq	ip, [r4, #2232]	; 0x8b8
    c0ec:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    c0f0:	e59468b4 	ldr	r6, [r4, #2228]	; 0x8b4
    c0f4:	e2833001 	add	r3, r3, #1
    c0f8:	e7ea3053 	ubfx	r3, r3, #0, #11
    c0fc:	e1530006 	cmp	r3, r6
    c100:	0a00002f 	beq	c1c4 <CSerialDevice::InterruptHandler()+0x134>
    c104:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    c108:	e0846003 	add	r6, r4, r3
    c10c:	e2833001 	add	r3, r3, #1
    c110:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    c114:	e5c620b0 	strb	r2, [r6, #176]	; 0xb0
    c118:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    c11c:	e7ea3053 	ubfx	r3, r3, #0, #11
    c120:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    c124:	e5913018 	ldr	r3, [r1, #24]
    c128:	e3130010 	tst	r3, #16
    c12c:	0affffe8 	beq	c0d4 <CSerialDevice::InterruptHandler()+0x44>
    c130:	e5913018 	ldr	r3, [r1, #24]
    c134:	e3130020 	tst	r3, #32
    c138:	1a000016 	bne	c198 <CSerialDevice::InterruptHandler()+0x108>
    c13c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    c140:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
    c144:	e1520003 	cmp	r2, r3
    c148:	13a02a01 	movne	r2, #4096	; 0x1000
    c14c:	13432f20 	movtne	r2, #16160	; 0x3f20
    c150:	1a000004 	bne	c168 <CSerialDevice::InterruptHandler()+0xd8>
    c154:	ea000024 	b	c1ec <CSerialDevice::InterruptHandler()+0x15c>
    c158:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    c15c:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    c160:	e1510003 	cmp	r1, r3
    c164:	0a000020 	beq	c1ec <CSerialDevice::InterruptHandler()+0x15c>
    c168:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    c16c:	e0841003 	add	r1, r4, r3
    c170:	e2833001 	add	r3, r3, #1
    c174:	e58530c0 	str	r3, [r5, #192]	; 0xc0
    c178:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
    c17c:	e5823000 	str	r3, [r2]
    c180:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    c184:	e7ea3053 	ubfx	r3, r3, #0, #11
    c188:	e58530c0 	str	r3, [r5, #192]	; 0xc0
    c18c:	e5923018 	ldr	r3, [r2, #24]
    c190:	e3130020 	tst	r3, #32
    c194:	0affffef 	beq	c158 <CSerialDevice::InterruptHandler()+0xc8>
    c198:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    c19c:	e3530000 	cmp	r3, #0
    c1a0:	08bd8070 	popeq	{r4, r5, r6, pc}
    c1a4:	e8bd4070 	pop	{r4, r5, r6, lr}
    c1a8:	eafff34d 	b	8ee4 <LeaveCritical>
    c1ac:	e3120b02 	tst	r2, #2048	; 0x800
    c1b0:	0a000007 	beq	c1d4 <CSerialDevice::InterruptHandler()+0x144>
    c1b4:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    c1b8:	e3530000 	cmp	r3, #0
    c1bc:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    c1c0:	eaffffc9 	b	c0ec <CSerialDevice::InterruptHandler()+0x5c>
    c1c4:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    c1c8:	e3530000 	cmp	r3, #0
    c1cc:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    c1d0:	eaffffbc 	b	c0c8 <CSerialDevice::InterruptHandler()+0x38>
    c1d4:	e3120c01 	tst	r2, #256	; 0x100
    c1d8:	0affffc3 	beq	c0ec <CSerialDevice::InterruptHandler()+0x5c>
    c1dc:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    c1e0:	e3530000 	cmp	r3, #0
    c1e4:	0584e8b8 	streq	lr, [r4, #2232]	; 0x8b8
    c1e8:	eaffffbf 	b	c0ec <CSerialDevice::InterruptHandler()+0x5c>
    c1ec:	e3a03a01 	mov	r3, #4096	; 0x1000
    c1f0:	e3433f20 	movt	r3, #16160	; 0x3f20
    c1f4:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    c1f8:	e3c22020 	bic	r2, r2, #32
    c1fc:	e5832038 	str	r2, [r3, #56]	; 0x38
    c200:	eaffffe4 	b	c198 <CSerialDevice::InterruptHandler()+0x108>
    c204:	ebfff328 	bl	8eac <EnterCritical>
    c208:	eaffffa6 	b	c0a8 <CSerialDevice::InterruptHandler()+0x18>

0000c20c <CSerialDevice::InterruptStub(void*)>:
    c20c:	eaffff9f 	b	c090 <CSerialDevice::InterruptHandler()>

0000c210 <CSerialDevice::~CSerialDevice()>:
    c210:	e59f1084 	ldr	r1, [pc, #132]	; c29c <CSerialDevice::~CSerialDevice()+0x8c>
    c214:	e3a03a01 	mov	r3, #4096	; 0x1000
    c218:	e3433f20 	movt	r3, #16160	; 0x3f20
    c21c:	e3a02000 	mov	r2, #0
    c220:	e92d4010 	push	{r4, lr}
    c224:	e1a04000 	mov	r4, r0
    c228:	e5801000 	str	r1, [r0]
    c22c:	e5832038 	str	r2, [r3, #56]	; 0x38
    c230:	e5832030 	str	r2, [r3, #48]	; 0x30
    c234:	e59030ac 	ldr	r3, [r0, #172]	; 0xac
    c238:	e1530002 	cmp	r3, r2
    c23c:	0a000004 	beq	c254 <CSerialDevice::~CSerialDevice()+0x44>
    c240:	e59030a8 	ldr	r3, [r0, #168]	; 0xa8
    c244:	e1530002 	cmp	r3, r2
    c248:	0a00000f 	beq	c28c <CSerialDevice::~CSerialDevice()+0x7c>
    c24c:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    c250:	eb000415 	bl	d2ac <CInterruptSystem::DisconnectFIQ()>
    c254:	e3a03000 	mov	r3, #0
    c258:	e284007c 	add	r0, r4, #124	; 0x7c
    c25c:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    c260:	ebfff10d 	bl	869c <CGPIOPin::~CGPIOPin()>
    c264:	e2840054 	add	r0, r4, #84	; 0x54
    c268:	ebfff10b 	bl	869c <CGPIOPin::~CGPIOPin()>
    c26c:	e284002c 	add	r0, r4, #44	; 0x2c
    c270:	ebfff109 	bl	869c <CGPIOPin::~CGPIOPin()>
    c274:	e2840004 	add	r0, r4, #4
    c278:	ebfff107 	bl	869c <CGPIOPin::~CGPIOPin()>
    c27c:	e1a00004 	mov	r0, r4
    c280:	eb000a3b 	bl	eb74 <CDevice::~CDevice()>
    c284:	e1a00004 	mov	r0, r4
    c288:	e8bd8010 	pop	{r4, pc}
    c28c:	e3a01039 	mov	r1, #57	; 0x39
    c290:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    c294:	eb0003e8 	bl	d23c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    c298:	eaffffed 	b	c254 <CSerialDevice::~CSerialDevice()+0x44>
    c29c:	00010020 	.word	0x00010020

0000c2a0 <CSerialDevice::~CSerialDevice()>:
    c2a0:	e92d4010 	push	{r4, lr}
    c2a4:	e1a04000 	mov	r4, r0
    c2a8:	ebffffd8 	bl	c210 <CSerialDevice::~CSerialDevice()>
    c2ac:	e1a00004 	mov	r0, r4
    c2b0:	e30110d0 	movw	r1, #4304	; 0x10d0
    c2b4:	ebfff2fa 	bl	8ea4 <operator delete(void*, unsigned int)>
    c2b8:	e1a00004 	mov	r0, r4
    c2bc:	e8bd8010 	pop	{r4, pc}

0000c2c0 <CString::~CString()>:
    c2c0:	e92d4010 	push	{r4, lr}
    c2c4:	e1a04000 	mov	r4, r0
    c2c8:	e5900004 	ldr	r0, [r0, #4]
    c2cc:	e59f3014 	ldr	r3, [pc, #20]	; c2e8 <CString::~CString()+0x28>
    c2d0:	e3500000 	cmp	r0, #0
    c2d4:	e5843000 	str	r3, [r4]
    c2d8:	0a000000 	beq	c2e0 <CString::~CString()+0x20>
    c2dc:	ebfff2ef 	bl	8ea0 <operator delete[](void*)>
    c2e0:	e1a00004 	mov	r0, r4
    c2e4:	e8bd8010 	pop	{r4, pc}
    c2e8:	00010044 	.word	0x00010044

0000c2ec <CString::~CString()>:
    c2ec:	e92d4010 	push	{r4, lr}
    c2f0:	e1a04000 	mov	r4, r0
    c2f4:	e5900004 	ldr	r0, [r0, #4]
    c2f8:	e59f3020 	ldr	r3, [pc, #32]	; c320 <CString::~CString()+0x34>
    c2fc:	e3500000 	cmp	r0, #0
    c300:	e5843000 	str	r3, [r4]
    c304:	0a000000 	beq	c30c <CString::~CString()+0x20>
    c308:	ebfff2e4 	bl	8ea0 <operator delete[](void*)>
    c30c:	e1a00004 	mov	r0, r4
    c310:	e3a01010 	mov	r1, #16
    c314:	ebfff2e2 	bl	8ea4 <operator delete(void*, unsigned int)>
    c318:	e1a00004 	mov	r0, r4
    c31c:	e8bd8010 	pop	{r4, pc}
    c320:	00010044 	.word	0x00010044

0000c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    c324:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c328:	e990002c 	ldmib	r0, {r2, r3, r5}
    c32c:	e0455002 	sub	r5, r5, r2
    c330:	e0851001 	add	r1, r5, r1
    c334:	e2812001 	add	r2, r1, #1
    c338:	e1520003 	cmp	r2, r3
    c33c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    c340:	e2816041 	add	r6, r1, #65	; 0x41
    c344:	e1a04000 	mov	r4, r0
    c348:	e1a00006 	mov	r0, r6
    c34c:	ebfff2d1 	bl	8e98 <operator new[](unsigned int)>
    c350:	e594300c 	ldr	r3, [r4, #12]
    c354:	e3a02000 	mov	r2, #0
    c358:	e5c32000 	strb	r2, [r3]
    c35c:	e5941004 	ldr	r1, [r4, #4]
    c360:	e1a07000 	mov	r7, r0
    c364:	eb00083f 	bl	e468 <strcpy>
    c368:	e5940004 	ldr	r0, [r4, #4]
    c36c:	e3500000 	cmp	r0, #0
    c370:	0a000000 	beq	c378 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    c374:	ebfff2c9 	bl	8ea0 <operator delete[](void*)>
    c378:	e0875005 	add	r5, r7, r5
    c37c:	e5847004 	str	r7, [r4, #4]
    c380:	e584500c 	str	r5, [r4, #12]
    c384:	e5846008 	str	r6, [r4, #8]
    c388:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c38c <CString::CString()>:
    c38c:	e59f1010 	ldr	r1, [pc, #16]	; c3a4 <CString::CString()+0x18>
    c390:	e3a02000 	mov	r2, #0
    c394:	e5802004 	str	r2, [r0, #4]
    c398:	e5802008 	str	r2, [r0, #8]
    c39c:	e5801000 	str	r1, [r0]
    c3a0:	e12fff1e 	bx	lr
    c3a4:	00010044 	.word	0x00010044

0000c3a8 <CString::CString(char const*)>:
    c3a8:	e59f3034 	ldr	r3, [pc, #52]	; c3e4 <CString::CString(char const*)+0x3c>
    c3ac:	e92d4070 	push	{r4, r5, r6, lr}
    c3b0:	e1a04000 	mov	r4, r0
    c3b4:	e5843000 	str	r3, [r4]
    c3b8:	e1a00001 	mov	r0, r1
    c3bc:	e1a05001 	mov	r5, r1
    c3c0:	eb000803 	bl	e3d4 <strlen>
    c3c4:	e2800001 	add	r0, r0, #1
    c3c8:	e5840008 	str	r0, [r4, #8]
    c3cc:	ebfff2b1 	bl	8e98 <operator new[](unsigned int)>
    c3d0:	e1a01005 	mov	r1, r5
    c3d4:	e5840004 	str	r0, [r4, #4]
    c3d8:	eb000822 	bl	e468 <strcpy>
    c3dc:	e1a00004 	mov	r0, r4
    c3e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c3e4:	00010044 	.word	0x00010044

0000c3e8 <CString::operator char const*() const>:
    c3e8:	e5900004 	ldr	r0, [r0, #4]
    c3ec:	e30033b8 	movw	r3, #952	; 0x3b8
    c3f0:	e3403001 	movt	r3, #1
    c3f4:	e3500000 	cmp	r0, #0
    c3f8:	01a00003 	moveq	r0, r3
    c3fc:	e12fff1e 	bx	lr

0000c400 <CString::operator=(char const*)>:
    c400:	e92d4070 	push	{r4, r5, r6, lr}
    c404:	e1a04000 	mov	r4, r0
    c408:	e5900004 	ldr	r0, [r0, #4]
    c40c:	e1a05001 	mov	r5, r1
    c410:	e3500000 	cmp	r0, #0
    c414:	0a000000 	beq	c41c <CString::operator=(char const*)+0x1c>
    c418:	ebfff2a0 	bl	8ea0 <operator delete[](void*)>
    c41c:	e1a00005 	mov	r0, r5
    c420:	eb0007eb 	bl	e3d4 <strlen>
    c424:	e2800001 	add	r0, r0, #1
    c428:	e5840008 	str	r0, [r4, #8]
    c42c:	ebfff299 	bl	8e98 <operator new[](unsigned int)>
    c430:	e1a01005 	mov	r1, r5
    c434:	e5840004 	str	r0, [r4, #4]
    c438:	eb00080a 	bl	e468 <strcpy>
    c43c:	e5940004 	ldr	r0, [r4, #4]
    c440:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c444 <CString::GetLength() const>:
    c444:	e5900004 	ldr	r0, [r0, #4]
    c448:	e3500000 	cmp	r0, #0
    c44c:	012fff1e 	bxeq	lr
    c450:	ea0007df 	b	e3d4 <strlen>

0000c454 <CString::Append(char const*)>:
    c454:	e92d4070 	push	{r4, r5, r6, lr}
    c458:	e1a04000 	mov	r4, r0
    c45c:	e5900004 	ldr	r0, [r0, #4]
    c460:	e3a03001 	mov	r3, #1
    c464:	e1a06001 	mov	r6, r1
    c468:	e5843008 	str	r3, [r4, #8]
    c46c:	e3500000 	cmp	r0, #0
    c470:	0a000003 	beq	c484 <CString::Append(char const*)+0x30>
    c474:	eb0007d6 	bl	e3d4 <strlen>
    c478:	e5943008 	ldr	r3, [r4, #8]
    c47c:	e0830000 	add	r0, r3, r0
    c480:	e5840008 	str	r0, [r4, #8]
    c484:	e1a00006 	mov	r0, r6
    c488:	eb0007d1 	bl	e3d4 <strlen>
    c48c:	e5943008 	ldr	r3, [r4, #8]
    c490:	e0800003 	add	r0, r0, r3
    c494:	e5840008 	str	r0, [r4, #8]
    c498:	ebfff27e 	bl	8e98 <operator new[](unsigned int)>
    c49c:	e5941004 	ldr	r1, [r4, #4]
    c4a0:	e3510000 	cmp	r1, #0
    c4a4:	e1a05000 	mov	r5, r0
    c4a8:	05c01000 	strbeq	r1, [r0]
    c4ac:	0a000004 	beq	c4c4 <CString::Append(char const*)+0x70>
    c4b0:	eb0007ec 	bl	e468 <strcpy>
    c4b4:	e5940004 	ldr	r0, [r4, #4]
    c4b8:	e3500000 	cmp	r0, #0
    c4bc:	0a000000 	beq	c4c4 <CString::Append(char const*)+0x70>
    c4c0:	ebfff276 	bl	8ea0 <operator delete[](void*)>
    c4c4:	e1a01006 	mov	r1, r6
    c4c8:	e1a00005 	mov	r0, r5
    c4cc:	eb000803 	bl	e4e0 <strcat>
    c4d0:	e5845004 	str	r5, [r4, #4]
    c4d4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c4d8 <CString::Compare(char const*) const>:
    c4d8:	e5900004 	ldr	r0, [r0, #4]
    c4dc:	ea0007c6 	b	e3fc <strcmp>

0000c4e0 <CString::Find(char) const>:
    c4e0:	e5902004 	ldr	r2, [r0, #4]
    c4e4:	e1d230d0 	ldrsb	r3, [r2]
    c4e8:	e3530000 	cmp	r3, #0
    c4ec:	0a000009 	beq	c518 <CString::Find(char) const+0x38>
    c4f0:	e1510003 	cmp	r1, r3
    c4f4:	e3a00000 	mov	r0, #0
    c4f8:	1a000002 	bne	c508 <CString::Find(char) const+0x28>
    c4fc:	ea000007 	b	c520 <CString::Find(char) const+0x40>
    c500:	e1530001 	cmp	r3, r1
    c504:	012fff1e 	bxeq	lr
    c508:	e1f230d1 	ldrsb	r3, [r2, #1]!
    c50c:	e2800001 	add	r0, r0, #1
    c510:	e3530000 	cmp	r3, #0
    c514:	1afffff9 	bne	c500 <CString::Find(char) const+0x20>
    c518:	e3e00000 	mvn	r0, #0
    c51c:	e12fff1e 	bx	lr
    c520:	e12fff1e 	bx	lr

0000c524 <CString::PutChar(char, unsigned int)>:
    c524:	e92d4070 	push	{r4, r5, r6, lr}
    c528:	e2524000 	subs	r4, r2, #0
    c52c:	08bd8070 	popeq	{r4, r5, r6, pc}
    c530:	e1a06001 	mov	r6, r1
    c534:	e1a01004 	mov	r1, r4
    c538:	e1a05000 	mov	r5, r0
    c53c:	ebffff78 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c540:	e2443001 	sub	r3, r4, #1
    c544:	e595200c 	ldr	r2, [r5, #12]
    c548:	e2433001 	sub	r3, r3, #1
    c54c:	e3730001 	cmn	r3, #1
    c550:	e2820001 	add	r0, r2, #1
    c554:	e585000c 	str	r0, [r5, #12]
    c558:	e5c26000 	strb	r6, [r2]
    c55c:	1afffff8 	bne	c544 <CString::PutChar(char, unsigned int)+0x20>
    c560:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c564 <CString::PutString(char const*)>:
    c564:	e92d4070 	push	{r4, r5, r6, lr}
    c568:	e1a04000 	mov	r4, r0
    c56c:	e1a00001 	mov	r0, r1
    c570:	e1a05001 	mov	r5, r1
    c574:	eb000796 	bl	e3d4 <strlen>
    c578:	e2506000 	subs	r6, r0, #0
    c57c:	0a000002 	beq	c58c <CString::PutString(char const*)+0x28>
    c580:	e1a01006 	mov	r1, r6
    c584:	e1a00004 	mov	r0, r4
    c588:	ebffff65 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c58c:	e1a01005 	mov	r1, r5
    c590:	e594000c 	ldr	r0, [r4, #12]
    c594:	eb0007b3 	bl	e468 <strcpy>
    c598:	e594100c 	ldr	r1, [r4, #12]
    c59c:	e0811006 	add	r1, r1, r6
    c5a0:	e584100c 	str	r1, [r4, #12]
    c5a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c5a8 <CString::ReserveSpace(unsigned int)>:
    c5a8:	e3510000 	cmp	r1, #0
    c5ac:	012fff1e 	bxeq	lr
    c5b0:	eaffff5b 	b	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000c5b4 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    c5b4:	e1510002 	cmp	r1, r2
    c5b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c5bc:	e1a06001 	mov	r6, r1
    c5c0:	e1a08002 	mov	r8, r2
    c5c4:	e1a0a000 	mov	sl, r0
    c5c8:	e1a07003 	mov	r7, r3
    c5cc:	23a05001 	movcs	r5, #1
    c5d0:	3a000022 	bcc	c660 <CString::ntoa(char*, unsigned long, unsigned int, int)+0xac>
    c5d4:	e0050598 	mul	r5, r8, r5
    c5d8:	e1a00006 	mov	r0, r6
    c5dc:	e1a01005 	mov	r1, r5
    c5e0:	eb00074f 	bl	e324 <__aeabi_uidiv>
    c5e4:	e1500008 	cmp	r0, r8
    c5e8:	e1a04000 	mov	r4, r0
    c5ec:	2afffff8 	bcs	c5d4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x20>
    c5f0:	e3570000 	cmp	r7, #0
    c5f4:	e1a0700a 	mov	r7, sl
    c5f8:	13a09037 	movne	r9, #55	; 0x37
    c5fc:	03a09057 	moveq	r9, #87	; 0x57
    c600:	ea000001 	b	c60c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x58>
    c604:	eb000746 	bl	e324 <__aeabi_uidiv>
    c608:	e1a04000 	mov	r4, r0
    c60c:	e1a00006 	mov	r0, r6
    c610:	e1a01005 	mov	r1, r5
    c614:	eb000746 	bl	e334 <__aeabi_uidivmod>
    c618:	e2877001 	add	r7, r7, #1
    c61c:	e3540009 	cmp	r4, #9
    c620:	e0893004 	add	r3, r9, r4
    c624:	e2844030 	add	r4, r4, #48	; 0x30
    c628:	e1a00005 	mov	r0, r5
    c62c:	e6af3073 	sxtb	r3, r3
    c630:	96af3074 	sxtbls	r3, r4
    c634:	e5473001 	strb	r3, [r7, #-1]
    c638:	e1a06001 	mov	r6, r1
    c63c:	e1a01008 	mov	r1, r8
    c640:	eb000737 	bl	e324 <__aeabi_uidiv>
    c644:	e2505000 	subs	r5, r0, #0
    c648:	e1a00006 	mov	r0, r6
    c64c:	e1a01005 	mov	r1, r5
    c650:	1affffeb 	bne	c604 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x50>
    c654:	e5c75000 	strb	r5, [r7]
    c658:	e1a0000a 	mov	r0, sl
    c65c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c660:	e1a04001 	mov	r4, r1
    c664:	e3a05001 	mov	r5, #1
    c668:	eaffffe0 	b	c5f0 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x3c>

0000c66c <CString::ftoa(char*, double, unsigned int)>:
    c66c:	eeb50bc0 	vcmpe.f64	d0, #0.0
    c670:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c674:	e1a08000 	mov	r8, r0
    c678:	ed2d8b02 	vpush	{d8}
    c67c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    c680:	43a0302d 	movmi	r3, #45	; 0x2d
    c684:	42809001 	addmi	r9, r0, #1
    c688:	45c03000 	strbmi	r3, [r0]
    c68c:	eeb08b40 	vmov.f64	d8, d0
    c690:	51a09000 	movpl	r9, r0
    c694:	eddf0b91 	vldr	d16, [pc, #580]	; c8e0 <CString::ftoa(char*, double, unsigned int)+0x274>
    c698:	e24dd01c 	sub	sp, sp, #28
    c69c:	e58d1004 	str	r1, [sp, #4]
    c6a0:	4eb18b40 	vnegmi.f64	d8, d0
    c6a4:	eeb48be0 	vcmpe.f64	d8, d16
    c6a8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    c6ac:	ca00007b 	bgt	c8a0 <CString::ftoa(char*, double, unsigned int)+0x234>
    c6b0:	eefc7bc8 	vcvt.u32.f64	s15, d8
    c6b4:	ee175a90 	vmov	r5, s15
    c6b8:	e3550009 	cmp	r5, #9
    c6bc:	83a07001 	movhi	r7, #1
    c6c0:	83a0400a 	movhi	r4, #10
    c6c4:	9a00007d 	bls	c8c0 <CString::ftoa(char*, double, unsigned int)+0x254>
    c6c8:	e0070794 	mul	r7, r4, r7
    c6cc:	e1a00005 	mov	r0, r5
    c6d0:	e1a01007 	mov	r1, r7
    c6d4:	eb000712 	bl	e324 <__aeabi_uidiv>
    c6d8:	e3500009 	cmp	r0, #9
    c6dc:	e1a0a000 	mov	sl, r0
    c6e0:	8afffff8 	bhi	c6c8 <CString::ftoa(char*, double, unsigned int)+0x5c>
    c6e4:	e30c6ccd 	movw	r6, #52429	; 0xcccd
    c6e8:	e1a04009 	mov	r4, r9
    c6ec:	e34c6ccc 	movt	r6, #52428	; 0xcccc
    c6f0:	e1a0b005 	mov	fp, r5
    c6f4:	ea000001 	b	c700 <CString::ftoa(char*, double, unsigned int)+0x94>
    c6f8:	eb000709 	bl	e324 <__aeabi_uidiv>
    c6fc:	e1a0a000 	mov	sl, r0
    c700:	e1a0000b 	mov	r0, fp
    c704:	e1a01007 	mov	r1, r7
    c708:	eb000709 	bl	e334 <__aeabi_uidivmod>
    c70c:	e0832697 	umull	r2, r3, r7, r6
    c710:	e35a0009 	cmp	sl, #9
    c714:	e2844001 	add	r4, r4, #1
    c718:	e1a0b001 	mov	fp, r1
    c71c:	e28a1057 	add	r1, sl, #87	; 0x57
    c720:	e28aa030 	add	sl, sl, #48	; 0x30
    c724:	e1a0000b 	mov	r0, fp
    c728:	e6af1071 	sxtb	r1, r1
    c72c:	96af107a 	sxtbls	r1, sl
    c730:	e1b071a3 	lsrs	r7, r3, #3
    c734:	e5441001 	strb	r1, [r4, #-1]
    c738:	e1a01007 	mov	r1, r7
    c73c:	1affffed 	bne	c6f8 <CString::ftoa(char*, double, unsigned int)+0x8c>
    c740:	e59d3004 	ldr	r3, [sp, #4]
    c744:	e5c47000 	strb	r7, [r4]
    c748:	e3530000 	cmp	r3, #0
    c74c:	1a000003 	bne	c760 <CString::ftoa(char*, double, unsigned int)+0xf4>
    c750:	e1a00008 	mov	r0, r8
    c754:	e28dd01c 	add	sp, sp, #28
    c758:	ecbd8b02 	vpop	{d8}
    c75c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c760:	e1a00009 	mov	r0, r9
    c764:	eb00071a 	bl	e3d4 <strlen>
    c768:	e59d3004 	ldr	r3, [sp, #4]
    c76c:	e3530009 	cmp	r3, #9
    c770:	31a07003 	movcc	r7, r3
    c774:	23a07009 	movcs	r7, #9
    c778:	e3570001 	cmp	r7, #1
    c77c:	e3a0302e 	mov	r3, #46	; 0x2e
    c780:	e0892000 	add	r2, r9, r0
    c784:	e7c93000 	strb	r3, [r9, r0]
    c788:	e58d2004 	str	r2, [sp, #4]
    c78c:	e2829001 	add	r9, r2, #1
    c790:	0a000050 	beq	c8d8 <CString::ftoa(char*, double, unsigned int)+0x26c>
    c794:	e3a0200a 	mov	r2, #10
    c798:	e3a03002 	mov	r3, #2
    c79c:	e1a01002 	mov	r1, r2
    c7a0:	e2833001 	add	r3, r3, #1
    c7a4:	e1530007 	cmp	r3, r7
    c7a8:	e0020291 	mul	r2, r1, r2
    c7ac:	9afffffb 	bls	c7a0 <CString::ftoa(char*, double, unsigned int)+0x134>
    c7b0:	ee072a90 	vmov	s15, r2
    c7b4:	eef81b67 	vcvt.f64.u32	d17, s15
    c7b8:	ee075a90 	vmov	s15, r5
    c7bc:	eef80b67 	vcvt.f64.u32	d16, s15
    c7c0:	ee388b60 	vsub.f64	d8, d8, d16
    c7c4:	ee288b21 	vmul.f64	d8, d8, d17
    c7c8:	eefc7bc8 	vcvt.u32.f64	s15, d8
    c7cc:	ee17ba90 	vmov	fp, s15
    c7d0:	e35b0009 	cmp	fp, #9
    c7d4:	83a06001 	movhi	r6, #1
    c7d8:	83a0400a 	movhi	r4, #10
    c7dc:	9a00003a 	bls	c8cc <CString::ftoa(char*, double, unsigned int)+0x260>
    c7e0:	e0060694 	mul	r6, r4, r6
    c7e4:	e1a0000b 	mov	r0, fp
    c7e8:	e1a01006 	mov	r1, r6
    c7ec:	eb0006cc 	bl	e324 <__aeabi_uidiv>
    c7f0:	e3500009 	cmp	r0, #9
    c7f4:	e1a0a000 	mov	sl, r0
    c7f8:	8afffff8 	bhi	c7e0 <CString::ftoa(char*, double, unsigned int)+0x174>
    c7fc:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    c800:	e28d400c 	add	r4, sp, #12
    c804:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    c808:	ea000001 	b	c814 <CString::ftoa(char*, double, unsigned int)+0x1a8>
    c80c:	eb0006c4 	bl	e324 <__aeabi_uidiv>
    c810:	e1a0a000 	mov	sl, r0
    c814:	e1a0000b 	mov	r0, fp
    c818:	e1a01006 	mov	r1, r6
    c81c:	eb0006c4 	bl	e334 <__aeabi_uidivmod>
    c820:	e0832596 	umull	r2, r3, r6, r5
    c824:	e35a0009 	cmp	sl, #9
    c828:	e2844001 	add	r4, r4, #1
    c82c:	e1a0b001 	mov	fp, r1
    c830:	e28a1057 	add	r1, sl, #87	; 0x57
    c834:	e28aa030 	add	sl, sl, #48	; 0x30
    c838:	e1a0000b 	mov	r0, fp
    c83c:	e6af1071 	sxtb	r1, r1
    c840:	96af107a 	sxtbls	r1, sl
    c844:	e1b061a3 	lsrs	r6, r3, #3
    c848:	e5441001 	strb	r1, [r4, #-1]
    c84c:	e1a01006 	mov	r1, r6
    c850:	1affffed 	bne	c80c <CString::ftoa(char*, double, unsigned int)+0x1a0>
    c854:	e28d000c 	add	r0, sp, #12
    c858:	e5c46000 	strb	r6, [r4]
    c85c:	eb0006dc 	bl	e3d4 <strlen>
    c860:	e0577000 	subs	r7, r7, r0
    c864:	0a000006 	beq	c884 <CString::ftoa(char*, double, unsigned int)+0x218>
    c868:	e59d6004 	ldr	r6, [sp, #4]
    c86c:	e3a03030 	mov	r3, #48	; 0x30
    c870:	e0862007 	add	r2, r6, r7
    c874:	e5e63001 	strb	r3, [r6, #1]!
    c878:	e1560002 	cmp	r6, r2
    c87c:	1afffffc 	bne	c874 <CString::ftoa(char*, double, unsigned int)+0x208>
    c880:	e0899007 	add	r9, r9, r7
    c884:	e28d100c 	add	r1, sp, #12
    c888:	e1a00009 	mov	r0, r9
    c88c:	eb0006f5 	bl	e468 <strcpy>
    c890:	e1a00008 	mov	r0, r8
    c894:	e28dd01c 	add	sp, sp, #28
    c898:	ecbd8b02 	vpop	{d8}
    c89c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8a0:	e1a00009 	mov	r0, r9
    c8a4:	e300104c 	movw	r1, #76	; 0x4c
    c8a8:	e3401001 	movt	r1, #1
    c8ac:	eb0006ed 	bl	e468 <strcpy>
    c8b0:	e1a00008 	mov	r0, r8
    c8b4:	e28dd01c 	add	sp, sp, #28
    c8b8:	ecbd8b02 	vpop	{d8}
    c8bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8c0:	ee17aa90 	vmov	sl, s15
    c8c4:	e3a07001 	mov	r7, #1
    c8c8:	eaffff85 	b	c6e4 <CString::ftoa(char*, double, unsigned int)+0x78>
    c8cc:	ee17aa90 	vmov	sl, s15
    c8d0:	e3a06001 	mov	r6, #1
    c8d4:	eaffffc8 	b	c7fc <CString::ftoa(char*, double, unsigned int)+0x190>
    c8d8:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    c8dc:	eaffffb5 	b	c7b8 <CString::ftoa(char*, double, unsigned int)+0x14c>
    c8e0:	ffe00000 	.word	0xffe00000
    c8e4:	41efffff 	.word	0x41efffff

0000c8e8 <CString::FormatV(char const*, std::__va_list)>:
    c8e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8ec:	e1a0b000 	mov	fp, r0
    c8f0:	e5900004 	ldr	r0, [r0, #4]
    c8f4:	e24dd034 	sub	sp, sp, #52	; 0x34
    c8f8:	e1a05001 	mov	r5, r1
    c8fc:	e3500000 	cmp	r0, #0
    c900:	e58d2000 	str	r2, [sp]
    c904:	0a000000 	beq	c90c <CString::FormatV(char const*, std::__va_list)+0x24>
    c908:	ebfff164 	bl	8ea0 <operator delete[](void*)>
    c90c:	e3a00040 	mov	r0, #64	; 0x40
    c910:	e58b0008 	str	r0, [fp, #8]
    c914:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    c918:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    c91c:	e58d3014 	str	r3, [sp, #20]
    c920:	ebfff15c 	bl	8e98 <operator new[](unsigned int)>
    c924:	e58b0004 	str	r0, [fp, #4]
    c928:	e58b000c 	str	r0, [fp, #12]
    c92c:	e1d540d0 	ldrsb	r4, [r5]
    c930:	e3540000 	cmp	r4, #0
    c934:	0a0000a2 	beq	cbc4 <CString::FormatV(char const*, std::__va_list)+0x2dc>
    c938:	e3540025 	cmp	r4, #37	; 0x25
    c93c:	13a01001 	movne	r1, #1
    c940:	11a0000b 	movne	r0, fp
    c944:	1a000156 	bne	cea4 <CString::FormatV(char const*, std::__va_list)+0x5bc>
    c948:	e1d560d1 	ldrsb	r6, [r5, #1]
    c94c:	e3560025 	cmp	r6, #37	; 0x25
    c950:	0a000169 	beq	cefc <CString::FormatV(char const*, std::__va_list)+0x614>
    c954:	e356002d 	cmp	r6, #45	; 0x2d
    c958:	e3a04000 	mov	r4, #0
    c95c:	12855001 	addne	r5, r5, #1
    c960:	01d560d2 	ldrsbeq	r6, [r5, #2]
    c964:	03a03001 	moveq	r3, #1
    c968:	13a03000 	movne	r3, #0
    c96c:	02855002 	addeq	r5, r5, #2
    c970:	e3560030 	cmp	r6, #48	; 0x30
    c974:	e58d3004 	str	r3, [sp, #4]
    c978:	01d560d1 	ldrsbeq	r6, [r5, #1]
    c97c:	03a03001 	moveq	r3, #1
    c980:	13a03000 	movne	r3, #0
    c984:	058d300c 	streq	r3, [sp, #12]
    c988:	00855003 	addeq	r5, r5, r3
    c98c:	158d300c 	strne	r3, [sp, #12]
    c990:	e2463030 	sub	r3, r6, #48	; 0x30
    c994:	e6ef3073 	uxtb	r3, r3
    c998:	e3530009 	cmp	r3, #9
    c99c:	8a000007 	bhi	c9c0 <CString::FormatV(char const*, std::__va_list)+0xd8>
    c9a0:	e3a0200a 	mov	r2, #10
    c9a4:	e0246492 	mla	r4, r2, r4, r6
    c9a8:	e1f560d1 	ldrsb	r6, [r5, #1]!
    c9ac:	e2463030 	sub	r3, r6, #48	; 0x30
    c9b0:	e2444030 	sub	r4, r4, #48	; 0x30
    c9b4:	e6ef3073 	uxtb	r3, r3
    c9b8:	e3530009 	cmp	r3, #9
    c9bc:	9afffff8 	bls	c9a4 <CString::FormatV(char const*, std::__va_list)+0xbc>
    c9c0:	e356002e 	cmp	r6, #46	; 0x2e
    c9c4:	0a00013c 	beq	cebc <CString::FormatV(char const*, std::__va_list)+0x5d4>
    c9c8:	e1d570d0 	ldrsb	r7, [r5]
    c9cc:	e3a01006 	mov	r1, #6
    c9d0:	e357006c 	cmp	r7, #108	; 0x6c
    c9d4:	01d570d1 	ldrsbeq	r7, [r5, #1]
    c9d8:	03a02001 	moveq	r2, #1
    c9dc:	13a02000 	movne	r2, #0
    c9e0:	00855002 	addeq	r5, r5, r2
    c9e4:	e2473058 	sub	r3, r7, #88	; 0x58
    c9e8:	e3530020 	cmp	r3, #32
    c9ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c9f0:	ea000120 	b	ce78 <CString::FormatV(char const*, std::__va_list)+0x590>
    c9f4:	0000cdf4 	.word	0x0000cdf4
    c9f8:	0000ce78 	.word	0x0000ce78
    c9fc:	0000ce78 	.word	0x0000ce78
    ca00:	0000ce78 	.word	0x0000ce78
    ca04:	0000ce78 	.word	0x0000ce78
    ca08:	0000ce78 	.word	0x0000ce78
    ca0c:	0000ce78 	.word	0x0000ce78
    ca10:	0000ce78 	.word	0x0000ce78
    ca14:	0000ce78 	.word	0x0000ce78
    ca18:	0000ce78 	.word	0x0000ce78
    ca1c:	0000ce78 	.word	0x0000ce78
    ca20:	0000cd80 	.word	0x0000cd80
    ca24:	0000cc54 	.word	0x0000cc54
    ca28:	0000ce78 	.word	0x0000ce78
    ca2c:	0000cbd4 	.word	0x0000cbd4
    ca30:	0000ce78 	.word	0x0000ce78
    ca34:	0000ce78 	.word	0x0000ce78
    ca38:	0000ce78 	.word	0x0000ce78
    ca3c:	0000ce78 	.word	0x0000ce78
    ca40:	0000ce78 	.word	0x0000ce78
    ca44:	0000ce78 	.word	0x0000ce78
    ca48:	0000ce78 	.word	0x0000ce78
    ca4c:	0000ce78 	.word	0x0000ce78
    ca50:	0000ca78 	.word	0x0000ca78
    ca54:	0000ce78 	.word	0x0000ce78
    ca58:	0000ce78 	.word	0x0000ce78
    ca5c:	0000ce78 	.word	0x0000ce78
    ca60:	0000ce04 	.word	0x0000ce04
    ca64:	0000ce78 	.word	0x0000ce78
    ca68:	0000cdfc 	.word	0x0000cdfc
    ca6c:	0000ce78 	.word	0x0000ce78
    ca70:	0000ce78 	.word	0x0000ce78
    ca74:	0000cdf4 	.word	0x0000cdf4
    ca78:	e3a08008 	mov	r8, #8
    ca7c:	e59d3000 	ldr	r3, [sp]
    ca80:	e2833004 	add	r3, r3, #4
    ca84:	e5136004 	ldr	r6, [r3, #-4]
    ca88:	e58d3000 	str	r3, [sp]
    ca8c:	e1560008 	cmp	r6, r8
    ca90:	23a0a001 	movcs	sl, #1
    ca94:	3a000198 	bcc	d0fc <CString::FormatV(char const*, std::__va_list)+0x814>
    ca98:	e00a0a98 	mul	sl, r8, sl
    ca9c:	e1a00006 	mov	r0, r6
    caa0:	e1a0100a 	mov	r1, sl
    caa4:	eb00061e 	bl	e324 <__aeabi_uidiv>
    caa8:	e1580000 	cmp	r8, r0
    caac:	9afffff9 	bls	ca98 <CString::FormatV(char const*, std::__va_list)+0x1b0>
    cab0:	e1a09000 	mov	r9, r0
    cab4:	e28d3018 	add	r3, sp, #24
    cab8:	e3570058 	cmp	r7, #88	; 0x58
    cabc:	e58d3008 	str	r3, [sp, #8]
    cac0:	13a02057 	movne	r2, #87	; 0x57
    cac4:	03a02037 	moveq	r2, #55	; 0x37
    cac8:	e1a07003 	mov	r7, r3
    cacc:	e1a03005 	mov	r3, r5
    cad0:	e58d4010 	str	r4, [sp, #16]
    cad4:	e1a0500a 	mov	r5, sl
    cad8:	e1a04002 	mov	r4, r2
    cadc:	e1a0a003 	mov	sl, r3
    cae0:	ea000001 	b	caec <CString::FormatV(char const*, std::__va_list)+0x204>
    cae4:	eb00060e 	bl	e324 <__aeabi_uidiv>
    cae8:	e1a09000 	mov	r9, r0
    caec:	e1a00006 	mov	r0, r6
    caf0:	e1a01005 	mov	r1, r5
    caf4:	eb00060e 	bl	e334 <__aeabi_uidivmod>
    caf8:	e2877001 	add	r7, r7, #1
    cafc:	e3590009 	cmp	r9, #9
    cb00:	e0842009 	add	r2, r4, r9
    cb04:	e2899030 	add	r9, r9, #48	; 0x30
    cb08:	e1a00005 	mov	r0, r5
    cb0c:	e6af2072 	sxtb	r2, r2
    cb10:	96af2079 	sxtbls	r2, r9
    cb14:	e5472001 	strb	r2, [r7, #-1]
    cb18:	e1a06001 	mov	r6, r1
    cb1c:	e1a01008 	mov	r1, r8
    cb20:	eb0005ff 	bl	e324 <__aeabi_uidiv>
    cb24:	e2505000 	subs	r5, r0, #0
    cb28:	e1a00006 	mov	r0, r6
    cb2c:	e1a01005 	mov	r1, r5
    cb30:	1affffeb 	bne	cae4 <CString::FormatV(char const*, std::__va_list)+0x1fc>
    cb34:	e1a0300a 	mov	r3, sl
    cb38:	e59d0008 	ldr	r0, [sp, #8]
    cb3c:	e5c71000 	strb	r1, [r7]
    cb40:	e1a0a005 	mov	sl, r5
    cb44:	e59d4010 	ldr	r4, [sp, #16]
    cb48:	e1a05003 	mov	r5, r3
    cb4c:	eb000620 	bl	e3d4 <strlen>
    cb50:	e59d3004 	ldr	r3, [sp, #4]
    cb54:	e3530000 	cmp	r3, #0
    cb58:	e1a06000 	mov	r6, r0
    cb5c:	1a0000ef 	bne	cf20 <CString::FormatV(char const*, std::__va_list)+0x638>
    cb60:	e1500004 	cmp	r0, r4
    cb64:	2a00000f 	bcs	cba8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    cb68:	e59d300c 	ldr	r3, [sp, #12]
    cb6c:	e0444000 	sub	r4, r4, r0
    cb70:	e1a0000b 	mov	r0, fp
    cb74:	e3530000 	cmp	r3, #0
    cb78:	e1a01004 	mov	r1, r4
    cb7c:	03a06020 	moveq	r6, #32
    cb80:	13a06030 	movne	r6, #48	; 0x30
    cb84:	ebfffde6 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cb88:	e2443001 	sub	r3, r4, #1
    cb8c:	e59b200c 	ldr	r2, [fp, #12]
    cb90:	e2433001 	sub	r3, r3, #1
    cb94:	e3730001 	cmn	r3, #1
    cb98:	e2821001 	add	r1, r2, #1
    cb9c:	e58b100c 	str	r1, [fp, #12]
    cba0:	e5c26000 	strb	r6, [r2]
    cba4:	1afffff8 	bne	cb8c <CString::FormatV(char const*, std::__va_list)+0x2a4>
    cba8:	e59d1008 	ldr	r1, [sp, #8]
    cbac:	e1a0000b 	mov	r0, fp
    cbb0:	ebfffe6b 	bl	c564 <CString::PutString(char const*)>
    cbb4:	e2855001 	add	r5, r5, #1
    cbb8:	e1d540d0 	ldrsb	r4, [r5]
    cbbc:	e3540000 	cmp	r4, #0
    cbc0:	1affff5c 	bne	c938 <CString::FormatV(char const*, std::__va_list)+0x50>
    cbc4:	e59b300c 	ldr	r3, [fp, #12]
    cbc8:	e5c34000 	strb	r4, [r3]
    cbcc:	e28dd034 	add	sp, sp, #52	; 0x34
    cbd0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbd4:	e59d3000 	ldr	r3, [sp]
    cbd8:	e28d6018 	add	r6, sp, #24
    cbdc:	e58d6008 	str	r6, [sp, #8]
    cbe0:	e2833007 	add	r3, r3, #7
    cbe4:	e1a00006 	mov	r0, r6
    cbe8:	e3c33007 	bic	r3, r3, #7
    cbec:	e2832008 	add	r2, r3, #8
    cbf0:	e58d2000 	str	r2, [sp]
    cbf4:	ed930b00 	vldr	d0, [r3]
    cbf8:	ebfffe9b 	bl	c66c <CString::ftoa(char*, double, unsigned int)>
    cbfc:	e1a00006 	mov	r0, r6
    cc00:	eb0005f3 	bl	e3d4 <strlen>
    cc04:	e59d3004 	ldr	r3, [sp, #4]
    cc08:	e3530000 	cmp	r3, #0
    cc0c:	e1a06000 	mov	r6, r0
    cc10:	1a000107 	bne	d034 <CString::FormatV(char const*, std::__va_list)+0x74c>
    cc14:	e1500004 	cmp	r0, r4
    cc18:	2affffe2 	bcs	cba8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    cc1c:	e0444000 	sub	r4, r4, r0
    cc20:	e1a0000b 	mov	r0, fp
    cc24:	e1a01004 	mov	r1, r4
    cc28:	ebfffdbd 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cc2c:	e2443001 	sub	r3, r4, #1
    cc30:	e3a00020 	mov	r0, #32
    cc34:	e59b200c 	ldr	r2, [fp, #12]
    cc38:	e2433001 	sub	r3, r3, #1
    cc3c:	e3730001 	cmn	r3, #1
    cc40:	e2821001 	add	r1, r2, #1
    cc44:	e58b100c 	str	r1, [fp, #12]
    cc48:	e5c20000 	strb	r0, [r2]
    cc4c:	1afffff8 	bne	cc34 <CString::FormatV(char const*, std::__va_list)+0x34c>
    cc50:	eaffffd4 	b	cba8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    cc54:	e59d3000 	ldr	r3, [sp]
    cc58:	e2833004 	add	r3, r3, #4
    cc5c:	e5137004 	ldr	r7, [r3, #-4]
    cc60:	e58d3000 	str	r3, [sp]
    cc64:	e3570000 	cmp	r7, #0
    cc68:	b2677000 	rsblt	r7, r7, #0
    cc6c:	b3a03001 	movlt	r3, #1
    cc70:	a3a03000 	movge	r3, #0
    cc74:	b58d300c 	strlt	r3, [sp, #12]
    cc78:	e1a06007 	mov	r6, r7
    cc7c:	a58d300c 	strge	r3, [sp, #12]
    cc80:	e3570009 	cmp	r7, #9
    cc84:	e58d3010 	str	r3, [sp, #16]
    cc88:	c3a0a001 	movgt	sl, #1
    cc8c:	c3a0900a 	movgt	r9, #10
    cc90:	da000116 	ble	d0f0 <CString::FormatV(char const*, std::__va_list)+0x808>
    cc94:	e00a0a99 	mul	sl, r9, sl
    cc98:	e1a00007 	mov	r0, r7
    cc9c:	e1a0100a 	mov	r1, sl
    cca0:	eb00059f 	bl	e324 <__aeabi_uidiv>
    cca4:	e3500009 	cmp	r0, #9
    cca8:	8afffff9 	bhi	cc94 <CString::FormatV(char const*, std::__va_list)+0x3ac>
    ccac:	e1a08000 	mov	r8, r0
    ccb0:	e28d7018 	add	r7, sp, #24
    ccb4:	e59d9014 	ldr	r9, [sp, #20]
    ccb8:	e58d7008 	str	r7, [sp, #8]
    ccbc:	ea000001 	b	ccc8 <CString::FormatV(char const*, std::__va_list)+0x3e0>
    ccc0:	eb000597 	bl	e324 <__aeabi_uidiv>
    ccc4:	e1a08000 	mov	r8, r0
    ccc8:	e1a00006 	mov	r0, r6
    cccc:	e1a0100a 	mov	r1, sl
    ccd0:	eb000597 	bl	e334 <__aeabi_uidivmod>
    ccd4:	e083299a 	umull	r2, r3, sl, r9
    ccd8:	e3580009 	cmp	r8, #9
    ccdc:	e2877001 	add	r7, r7, #1
    cce0:	e1a06001 	mov	r6, r1
    cce4:	e2881057 	add	r1, r8, #87	; 0x57
    cce8:	e2888030 	add	r8, r8, #48	; 0x30
    ccec:	e1a00006 	mov	r0, r6
    ccf0:	e6af1071 	sxtb	r1, r1
    ccf4:	96af1078 	sxtbls	r1, r8
    ccf8:	e1b0a1a3 	lsrs	sl, r3, #3
    ccfc:	e5471001 	strb	r1, [r7, #-1]
    cd00:	e1a0100a 	mov	r1, sl
    cd04:	1affffed 	bne	ccc0 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    cd08:	e59d0008 	ldr	r0, [sp, #8]
    cd0c:	e5c7a000 	strb	sl, [r7]
    cd10:	eb0005af 	bl	e3d4 <strlen>
    cd14:	e59d3004 	ldr	r3, [sp, #4]
    cd18:	e3530000 	cmp	r3, #0
    cd1c:	e59d300c 	ldr	r3, [sp, #12]
    cd20:	e0808003 	add	r8, r0, r3
    cd24:	0a000090 	beq	cf6c <CString::FormatV(char const*, std::__va_list)+0x684>
    cd28:	e59d3010 	ldr	r3, [sp, #16]
    cd2c:	e3530000 	cmp	r3, #0
    cd30:	1a0000e5 	bne	d0cc <CString::FormatV(char const*, std::__va_list)+0x7e4>
    cd34:	e59d1008 	ldr	r1, [sp, #8]
    cd38:	e1a0000b 	mov	r0, fp
    cd3c:	ebfffe08 	bl	c564 <CString::PutString(char const*)>
    cd40:	e1580004 	cmp	r8, r4
    cd44:	2affff9a 	bcs	cbb4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cd48:	e0448008 	sub	r8, r4, r8
    cd4c:	e1a0000b 	mov	r0, fp
    cd50:	e1a01008 	mov	r1, r8
    cd54:	ebfffd72 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cd58:	e2483001 	sub	r3, r8, #1
    cd5c:	e3a00020 	mov	r0, #32
    cd60:	e59b200c 	ldr	r2, [fp, #12]
    cd64:	e2433001 	sub	r3, r3, #1
    cd68:	e3730001 	cmn	r3, #1
    cd6c:	e2821001 	add	r1, r2, #1
    cd70:	e58b100c 	str	r1, [fp, #12]
    cd74:	e5c20000 	strb	r0, [r2]
    cd78:	1afffff8 	bne	cd60 <CString::FormatV(char const*, std::__va_list)+0x478>
    cd7c:	eaffff8c 	b	cbb4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cd80:	e59d3004 	ldr	r3, [sp, #4]
    cd84:	e3530000 	cmp	r3, #0
    cd88:	e59d3000 	ldr	r3, [sp]
    cd8c:	e2836004 	add	r6, r3, #4
    cd90:	e1d370d0 	ldrsb	r7, [r3]
    cd94:	1a00008f 	bne	cfd8 <CString::FormatV(char const*, std::__va_list)+0x6f0>
    cd98:	e3540001 	cmp	r4, #1
    cd9c:	9a00000b 	bls	cdd0 <CString::FormatV(char const*, std::__va_list)+0x4e8>
    cda0:	e2441001 	sub	r1, r4, #1
    cda4:	e1a0000b 	mov	r0, fp
    cda8:	e2444002 	sub	r4, r4, #2
    cdac:	ebfffd5c 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cdb0:	e3a01020 	mov	r1, #32
    cdb4:	e59b300c 	ldr	r3, [fp, #12]
    cdb8:	e2444001 	sub	r4, r4, #1
    cdbc:	e3740001 	cmn	r4, #1
    cdc0:	e2832001 	add	r2, r3, #1
    cdc4:	e58b200c 	str	r2, [fp, #12]
    cdc8:	e5c31000 	strb	r1, [r3]
    cdcc:	1afffff8 	bne	cdb4 <CString::FormatV(char const*, std::__va_list)+0x4cc>
    cdd0:	e3a01001 	mov	r1, #1
    cdd4:	e1a0000b 	mov	r0, fp
    cdd8:	ebfffd51 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cddc:	e59b300c 	ldr	r3, [fp, #12]
    cde0:	e58d6000 	str	r6, [sp]
    cde4:	e2832001 	add	r2, r3, #1
    cde8:	e58b200c 	str	r2, [fp, #12]
    cdec:	e5c37000 	strb	r7, [r3]
    cdf0:	eaffff6f 	b	cbb4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cdf4:	e3a08010 	mov	r8, #16
    cdf8:	eaffff1f 	b	ca7c <CString::FormatV(char const*, std::__va_list)+0x194>
    cdfc:	e3a0800a 	mov	r8, #10
    ce00:	eaffff1d 	b	ca7c <CString::FormatV(char const*, std::__va_list)+0x194>
    ce04:	e59d3000 	ldr	r3, [sp]
    ce08:	e2836004 	add	r6, r3, #4
    ce0c:	e5938000 	ldr	r8, [r3]
    ce10:	e1a00008 	mov	r0, r8
    ce14:	eb00056e 	bl	e3d4 <strlen>
    ce18:	e59d3004 	ldr	r3, [sp, #4]
    ce1c:	e3530000 	cmp	r3, #0
    ce20:	e1a07000 	mov	r7, r0
    ce24:	1a000095 	bne	d080 <CString::FormatV(char const*, std::__va_list)+0x798>
    ce28:	e1500004 	cmp	r0, r4
    ce2c:	2a00000c 	bcs	ce64 <CString::FormatV(char const*, std::__va_list)+0x57c>
    ce30:	e0444000 	sub	r4, r4, r0
    ce34:	e1a0000b 	mov	r0, fp
    ce38:	e1a01004 	mov	r1, r4
    ce3c:	ebfffd38 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ce40:	e2443001 	sub	r3, r4, #1
    ce44:	e3a00020 	mov	r0, #32
    ce48:	e59b200c 	ldr	r2, [fp, #12]
    ce4c:	e2433001 	sub	r3, r3, #1
    ce50:	e3730001 	cmn	r3, #1
    ce54:	e2821001 	add	r1, r2, #1
    ce58:	e58b100c 	str	r1, [fp, #12]
    ce5c:	e5c20000 	strb	r0, [r2]
    ce60:	1afffff8 	bne	ce48 <CString::FormatV(char const*, std::__va_list)+0x560>
    ce64:	e1a01008 	mov	r1, r8
    ce68:	e1a0000b 	mov	r0, fp
    ce6c:	e58d6000 	str	r6, [sp]
    ce70:	ebfffdbb 	bl	c564 <CString::PutString(char const*)>
    ce74:	eaffff4e 	b	cbb4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ce78:	e3a01001 	mov	r1, #1
    ce7c:	e1a0000b 	mov	r0, fp
    ce80:	ebfffd27 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ce84:	e59b300c 	ldr	r3, [fp, #12]
    ce88:	e3a02025 	mov	r2, #37	; 0x25
    ce8c:	e3a01001 	mov	r1, #1
    ce90:	e0830001 	add	r0, r3, r1
    ce94:	e58b000c 	str	r0, [fp, #12]
    ce98:	e5c32000 	strb	r2, [r3]
    ce9c:	e1a0000b 	mov	r0, fp
    cea0:	e1d540d0 	ldrsb	r4, [r5]
    cea4:	ebfffd1e 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cea8:	e59b300c 	ldr	r3, [fp, #12]
    ceac:	e2832001 	add	r2, r3, #1
    ceb0:	e58b200c 	str	r2, [fp, #12]
    ceb4:	e5c34000 	strb	r4, [r3]
    ceb8:	eaffff3d 	b	cbb4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cebc:	e1d570d1 	ldrsb	r7, [r5, #1]
    cec0:	e3a01000 	mov	r1, #0
    cec4:	e2855001 	add	r5, r5, #1
    cec8:	e2473030 	sub	r3, r7, #48	; 0x30
    cecc:	e6ef3073 	uxtb	r3, r3
    ced0:	e3530009 	cmp	r3, #9
    ced4:	8afffebd 	bhi	c9d0 <CString::FormatV(char const*, std::__va_list)+0xe8>
    ced8:	e3a0200a 	mov	r2, #10
    cedc:	e0217192 	mla	r1, r2, r1, r7
    cee0:	e1f570d1 	ldrsb	r7, [r5, #1]!
    cee4:	e2473030 	sub	r3, r7, #48	; 0x30
    cee8:	e2411030 	sub	r1, r1, #48	; 0x30
    ceec:	e6ef3073 	uxtb	r3, r3
    cef0:	e3530009 	cmp	r3, #9
    cef4:	9afffff8 	bls	cedc <CString::FormatV(char const*, std::__va_list)+0x5f4>
    cef8:	eafffeb4 	b	c9d0 <CString::FormatV(char const*, std::__va_list)+0xe8>
    cefc:	e3a01001 	mov	r1, #1
    cf00:	e1a0000b 	mov	r0, fp
    cf04:	ebfffd06 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cf08:	e59b300c 	ldr	r3, [fp, #12]
    cf0c:	e2855002 	add	r5, r5, #2
    cf10:	e2832001 	add	r2, r3, #1
    cf14:	e58b200c 	str	r2, [fp, #12]
    cf18:	e5c36000 	strb	r6, [r3]
    cf1c:	eafffe82 	b	c92c <CString::FormatV(char const*, std::__va_list)+0x44>
    cf20:	e59d1008 	ldr	r1, [sp, #8]
    cf24:	e1a0000b 	mov	r0, fp
    cf28:	ebfffd8d 	bl	c564 <CString::PutString(char const*)>
    cf2c:	e1560004 	cmp	r6, r4
    cf30:	2affff1f 	bcs	cbb4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cf34:	e0444006 	sub	r4, r4, r6
    cf38:	e1a0000b 	mov	r0, fp
    cf3c:	e1a01004 	mov	r1, r4
    cf40:	ebfffcf7 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cf44:	e2443001 	sub	r3, r4, #1
    cf48:	e3a00020 	mov	r0, #32
    cf4c:	e59b200c 	ldr	r2, [fp, #12]
    cf50:	e2433001 	sub	r3, r3, #1
    cf54:	e3730001 	cmn	r3, #1
    cf58:	e2821001 	add	r1, r2, #1
    cf5c:	e58b100c 	str	r1, [fp, #12]
    cf60:	e5c20000 	strb	r0, [r2]
    cf64:	1afffff8 	bne	cf4c <CString::FormatV(char const*, std::__va_list)+0x664>
    cf68:	eaffff11 	b	cbb4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cf6c:	e1580004 	cmp	r8, r4
    cf70:	2a00000c 	bcs	cfa8 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    cf74:	e0448008 	sub	r8, r4, r8
    cf78:	e1a0000b 	mov	r0, fp
    cf7c:	e1a01008 	mov	r1, r8
    cf80:	ebfffce7 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cf84:	e2483001 	sub	r3, r8, #1
    cf88:	e3a00020 	mov	r0, #32
    cf8c:	e59b200c 	ldr	r2, [fp, #12]
    cf90:	e2433001 	sub	r3, r3, #1
    cf94:	e3730001 	cmn	r3, #1
    cf98:	e2821001 	add	r1, r2, #1
    cf9c:	e58b100c 	str	r1, [fp, #12]
    cfa0:	e5c20000 	strb	r0, [r2]
    cfa4:	1afffff8 	bne	cf8c <CString::FormatV(char const*, std::__va_list)+0x6a4>
    cfa8:	e59d3010 	ldr	r3, [sp, #16]
    cfac:	e3530000 	cmp	r3, #0
    cfb0:	0afffefc 	beq	cba8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    cfb4:	e3a01001 	mov	r1, #1
    cfb8:	e1a0000b 	mov	r0, fp
    cfbc:	ebfffcd8 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cfc0:	e59b300c 	ldr	r3, [fp, #12]
    cfc4:	e3a0202d 	mov	r2, #45	; 0x2d
    cfc8:	e2831001 	add	r1, r3, #1
    cfcc:	e58b100c 	str	r1, [fp, #12]
    cfd0:	e5c32000 	strb	r2, [r3]
    cfd4:	eafffef3 	b	cba8 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    cfd8:	e3a01001 	mov	r1, #1
    cfdc:	e1a0000b 	mov	r0, fp
    cfe0:	ebfffccf 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cfe4:	e59b300c 	ldr	r3, [fp, #12]
    cfe8:	e3540001 	cmp	r4, #1
    cfec:	e2832001 	add	r2, r3, #1
    cff0:	e58b200c 	str	r2, [fp, #12]
    cff4:	e5c37000 	strb	r7, [r3]
    cff8:	9a00000b 	bls	d02c <CString::FormatV(char const*, std::__va_list)+0x744>
    cffc:	e2441001 	sub	r1, r4, #1
    d000:	e1a0000b 	mov	r0, fp
    d004:	e2444002 	sub	r4, r4, #2
    d008:	ebfffcc5 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d00c:	e3a01020 	mov	r1, #32
    d010:	e59b300c 	ldr	r3, [fp, #12]
    d014:	e2444001 	sub	r4, r4, #1
    d018:	e3740001 	cmn	r4, #1
    d01c:	e2832001 	add	r2, r3, #1
    d020:	e58b200c 	str	r2, [fp, #12]
    d024:	e5c31000 	strb	r1, [r3]
    d028:	1afffff8 	bne	d010 <CString::FormatV(char const*, std::__va_list)+0x728>
    d02c:	e58d6000 	str	r6, [sp]
    d030:	eafffedf 	b	cbb4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    d034:	e59d1008 	ldr	r1, [sp, #8]
    d038:	e1a0000b 	mov	r0, fp
    d03c:	ebfffd48 	bl	c564 <CString::PutString(char const*)>
    d040:	e1560004 	cmp	r6, r4
    d044:	2afffeda 	bcs	cbb4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    d048:	e0444006 	sub	r4, r4, r6
    d04c:	e1a0000b 	mov	r0, fp
    d050:	e1a01004 	mov	r1, r4
    d054:	ebfffcb2 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d058:	e2443001 	sub	r3, r4, #1
    d05c:	e3a00020 	mov	r0, #32
    d060:	e59b200c 	ldr	r2, [fp, #12]
    d064:	e2433001 	sub	r3, r3, #1
    d068:	e3730001 	cmn	r3, #1
    d06c:	e2821001 	add	r1, r2, #1
    d070:	e58b100c 	str	r1, [fp, #12]
    d074:	e5c20000 	strb	r0, [r2]
    d078:	1afffff8 	bne	d060 <CString::FormatV(char const*, std::__va_list)+0x778>
    d07c:	eafffecc 	b	cbb4 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    d080:	e1a01008 	mov	r1, r8
    d084:	e1a0000b 	mov	r0, fp
    d088:	ebfffd35 	bl	c564 <CString::PutString(char const*)>
    d08c:	e1570004 	cmp	r7, r4
    d090:	2affffe5 	bcs	d02c <CString::FormatV(char const*, std::__va_list)+0x744>
    d094:	e0444007 	sub	r4, r4, r7
    d098:	e1a0000b 	mov	r0, fp
    d09c:	e1a01004 	mov	r1, r4
    d0a0:	ebfffc9f 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d0a4:	e2443001 	sub	r3, r4, #1
    d0a8:	e3a00020 	mov	r0, #32
    d0ac:	e59b200c 	ldr	r2, [fp, #12]
    d0b0:	e2433001 	sub	r3, r3, #1
    d0b4:	e3730001 	cmn	r3, #1
    d0b8:	e2821001 	add	r1, r2, #1
    d0bc:	e58b100c 	str	r1, [fp, #12]
    d0c0:	e5c20000 	strb	r0, [r2]
    d0c4:	1afffff8 	bne	d0ac <CString::FormatV(char const*, std::__va_list)+0x7c4>
    d0c8:	eaffffd7 	b	d02c <CString::FormatV(char const*, std::__va_list)+0x744>
    d0cc:	e3a01001 	mov	r1, #1
    d0d0:	e1a0000b 	mov	r0, fp
    d0d4:	ebfffc92 	bl	c324 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d0d8:	e59b300c 	ldr	r3, [fp, #12]
    d0dc:	e3a0202d 	mov	r2, #45	; 0x2d
    d0e0:	e2831001 	add	r1, r3, #1
    d0e4:	e58b100c 	str	r1, [fp, #12]
    d0e8:	e5c32000 	strb	r2, [r3]
    d0ec:	eaffff10 	b	cd34 <CString::FormatV(char const*, std::__va_list)+0x44c>
    d0f0:	e1a08007 	mov	r8, r7
    d0f4:	e3a0a001 	mov	sl, #1
    d0f8:	eafffeec 	b	ccb0 <CString::FormatV(char const*, std::__va_list)+0x3c8>
    d0fc:	e1a09006 	mov	r9, r6
    d100:	e3a0a001 	mov	sl, #1
    d104:	eafffe6a 	b	cab4 <CString::FormatV(char const*, std::__va_list)+0x1cc>

0000d108 <CString::Format(char const*, ...)>:
    d108:	e92d000e 	push	{r1, r2, r3}
    d10c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d110:	e24dd008 	sub	sp, sp, #8
    d114:	e28d2010 	add	r2, sp, #16
    d118:	e59d100c 	ldr	r1, [sp, #12]
    d11c:	e58d2004 	str	r2, [sp, #4]
    d120:	ebfffdf0 	bl	c8e8 <CString::FormatV(char const*, std::__va_list)>
    d124:	e28dd008 	add	sp, sp, #8
    d128:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    d12c:	e28dd00c 	add	sp, sp, #12
    d130:	e12fff1e 	bx	lr
    d134:	00000000 	andeq	r0, r0, r0

0000d138 <DelayLoop>:
    d138:	e2500001 	subs	r0, r0, #1
    d13c:	8afffffd 	bhi	d138 <DelayLoop>
    d140:	e1a0f00e 	mov	pc, lr

0000d144 <CInterruptSystem::CInterruptSystem()>:
    d144:	e2802f47 	add	r2, r0, #284	; 0x11c
    d148:	e1a0c000 	mov	ip, r0
    d14c:	e2403004 	sub	r3, r0, #4
    d150:	e3a01000 	mov	r1, #0
    d154:	e1a00002 	mov	r0, r2
    d158:	e5a31004 	str	r1, [r3, #4]!
    d15c:	e1530000 	cmp	r3, r0
    d160:	e5a21004 	str	r1, [r2, #4]!
    d164:	1afffffb 	bne	d158 <CInterruptSystem::CInterruptSystem()+0x14>
    d168:	e3003570 	movw	r3, #1392	; 0x570
    d16c:	e3403001 	movt	r3, #1
    d170:	e1a0000c 	mov	r0, ip
    d174:	e583c000 	str	ip, [r3]
    d178:	e12fff1e 	bx	lr

0000d17c <CInterruptSystem::~CInterruptSystem()>:
    d17c:	e3003570 	movw	r3, #1392	; 0x570
    d180:	e3403001 	movt	r3, #1
    d184:	e3a02000 	mov	r2, #0
    d188:	e5832000 	str	r2, [r3]
    d18c:	e12fff1e 	bx	lr

0000d190 <CInterruptSystem::Initialize()>:
    d190:	e59f2054 	ldr	r2, [pc, #84]	; d1ec <CInterruptSystem::Initialize()+0x5c>
    d194:	e59f3054 	ldr	r3, [pc, #84]	; d1f0 <CInterruptSystem::Initialize()+0x60>
    d198:	e92d4010 	push	{r4, lr}
    d19c:	e1a02142 	asr	r2, r2, #2
    d1a0:	e1a03143 	asr	r3, r3, #2
    d1a4:	e3a04000 	mov	r4, #0
    d1a8:	e2422002 	sub	r2, r2, #2
    d1ac:	e2433002 	sub	r3, r3, #2
    d1b0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    d1b4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    d1b8:	e5842018 	str	r2, [r4, #24]
    d1bc:	e584301c 	str	r3, [r4, #28]
    d1c0:	ebffef51 	bl	8f0c <SyncDataAndInstructionCache>
    d1c4:	e3a03a0b 	mov	r3, #45056	; 0xb000
    d1c8:	e3433f00 	movt	r3, #16128	; 0x3f00
    d1cc:	e3e02000 	mvn	r2, #0
    d1d0:	e583420c 	str	r4, [r3, #524]	; 0x20c
    d1d4:	e583221c 	str	r2, [r3, #540]	; 0x21c
    d1d8:	e5832220 	str	r2, [r3, #544]	; 0x220
    d1dc:	e5832224 	str	r2, [r3, #548]	; 0x224
    d1e0:	f1080080 	cpsie	i
    d1e4:	e3a00001 	mov	r0, #1
    d1e8:	e8bd8010 	pop	{r4, pc}
    d1ec:	0000ec5c 	.word	0x0000ec5c
    d1f0:	0000ec68 	.word	0x0000ec68

0000d1f4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    d1f4:	e351001f 	cmp	r1, #31
    d1f8:	e080c101 	add	ip, r0, r1, lsl #2
    d1fc:	e7802101 	str	r2, [r0, r1, lsl #2]
    d200:	e58c3120 	str	r3, [ip, #288]	; 0x120
    d204:	930b3210 	movwls	r3, #45584	; 0xb210
    d208:	93433f00 	movtls	r3, #16128	; 0x3f00
    d20c:	9a000005 	bls	d228 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x34>
    d210:	e30b2214 	movw	r2, #45588	; 0xb214
    d214:	e351003f 	cmp	r1, #63	; 0x3f
    d218:	e3432f00 	movt	r2, #16128	; 0x3f00
    d21c:	e30b3218 	movw	r3, #45592	; 0xb218
    d220:	e3433f00 	movt	r3, #16128	; 0x3f00
    d224:	91a03002 	movls	r3, r2
    d228:	e201101f 	and	r1, r1, #31
    d22c:	e3a02001 	mov	r2, #1
    d230:	e1a01112 	lsl	r1, r2, r1
    d234:	e5831000 	str	r1, [r3]
    d238:	e12fff1e 	bx	lr

0000d23c <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    d23c:	e351001f 	cmp	r1, #31
    d240:	e92d4010 	push	{r4, lr}
    d244:	930b321c 	movwls	r3, #45596	; 0xb21c
    d248:	93433f00 	movtls	r3, #16128	; 0x3f00
    d24c:	9a000005 	bls	d268 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x2c>
    d250:	e30b2220 	movw	r2, #45600	; 0xb220
    d254:	e351003f 	cmp	r1, #63	; 0x3f
    d258:	e3432f00 	movt	r2, #16128	; 0x3f00
    d25c:	e30b3224 	movw	r3, #45604	; 0xb224
    d260:	e3433f00 	movt	r3, #16128	; 0x3f00
    d264:	91a03002 	movls	r3, r2
    d268:	e080e101 	add	lr, r0, r1, lsl #2
    d26c:	e201401f 	and	r4, r1, #31
    d270:	e3a02001 	mov	r2, #1
    d274:	e3a0c000 	mov	ip, #0
    d278:	e1a02412 	lsl	r2, r2, r4
    d27c:	e5832000 	str	r2, [r3]
    d280:	e780c101 	str	ip, [r0, r1, lsl #2]
    d284:	e58ec120 	str	ip, [lr, #288]	; 0x120
    d288:	e8bd8010 	pop	{r4, pc}

0000d28c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    d28c:	e30004e8 	movw	r0, #1256	; 0x4e8
    d290:	e3a0ca0b 	mov	ip, #45056	; 0xb000
    d294:	e3400001 	movt	r0, #1
    d298:	e343cf00 	movt	ip, #16128	; 0x3f00
    d29c:	e3811080 	orr	r1, r1, #128	; 0x80
    d2a0:	e880000c 	stm	r0, {r2, r3}
    d2a4:	e58c120c 	str	r1, [ip, #524]	; 0x20c
    d2a8:	e12fff1e 	bx	lr

0000d2ac <CInterruptSystem::DisconnectFIQ()>:
    d2ac:	e3a01a0b 	mov	r1, #45056	; 0xb000
    d2b0:	e30034e8 	movw	r3, #1256	; 0x4e8
    d2b4:	e3431f00 	movt	r1, #16128	; 0x3f00
    d2b8:	e3403001 	movt	r3, #1
    d2bc:	e3a02000 	mov	r2, #0
    d2c0:	e581220c 	str	r2, [r1, #524]	; 0x20c
    d2c4:	e5832000 	str	r2, [r3]
    d2c8:	e5832004 	str	r2, [r3, #4]
    d2cc:	e12fff1e 	bx	lr

0000d2d0 <CInterruptSystem::EnableIRQ(unsigned int)>:
    d2d0:	e350001f 	cmp	r0, #31
    d2d4:	930b3210 	movwls	r3, #45584	; 0xb210
    d2d8:	93433f00 	movtls	r3, #16128	; 0x3f00
    d2dc:	9a000005 	bls	d2f8 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>
    d2e0:	e30b2214 	movw	r2, #45588	; 0xb214
    d2e4:	e350003f 	cmp	r0, #63	; 0x3f
    d2e8:	e3432f00 	movt	r2, #16128	; 0x3f00
    d2ec:	e30b3218 	movw	r3, #45592	; 0xb218
    d2f0:	e3433f00 	movt	r3, #16128	; 0x3f00
    d2f4:	91a03002 	movls	r3, r2
    d2f8:	e200001f 	and	r0, r0, #31
    d2fc:	e3a02001 	mov	r2, #1
    d300:	e1a00012 	lsl	r0, r2, r0
    d304:	e5830000 	str	r0, [r3]
    d308:	e12fff1e 	bx	lr

0000d30c <CInterruptSystem::DisableIRQ(unsigned int)>:
    d30c:	e350001f 	cmp	r0, #31
    d310:	930b321c 	movwls	r3, #45596	; 0xb21c
    d314:	93433f00 	movtls	r3, #16128	; 0x3f00
    d318:	9a000005 	bls	d334 <CInterruptSystem::DisableIRQ(unsigned int)+0x28>
    d31c:	e30b2220 	movw	r2, #45600	; 0xb220
    d320:	e350003f 	cmp	r0, #63	; 0x3f
    d324:	e3432f00 	movt	r2, #16128	; 0x3f00
    d328:	e30b3224 	movw	r3, #45604	; 0xb224
    d32c:	e3433f00 	movt	r3, #16128	; 0x3f00
    d330:	91a03002 	movls	r3, r2
    d334:	e200001f 	and	r0, r0, #31
    d338:	e3a02001 	mov	r2, #1
    d33c:	e1a00012 	lsl	r0, r2, r0
    d340:	e5830000 	str	r0, [r3]
    d344:	e12fff1e 	bx	lr

0000d348 <CInterruptSystem::EnableFIQ(unsigned int)>:
    d348:	e3a03a0b 	mov	r3, #45056	; 0xb000
    d34c:	e3433f00 	movt	r3, #16128	; 0x3f00
    d350:	e3800080 	orr	r0, r0, #128	; 0x80
    d354:	e583020c 	str	r0, [r3, #524]	; 0x20c
    d358:	e12fff1e 	bx	lr

0000d35c <CInterruptSystem::DisableFIQ()>:
    d35c:	e3a03a0b 	mov	r3, #45056	; 0xb000
    d360:	e3433f00 	movt	r3, #16128	; 0x3f00
    d364:	e3a02000 	mov	r2, #0
    d368:	e583220c 	str	r2, [r3, #524]	; 0x20c
    d36c:	e12fff1e 	bx	lr

0000d370 <CInterruptSystem::Get()>:
    d370:	e3003570 	movw	r3, #1392	; 0x570
    d374:	e3403001 	movt	r3, #1
    d378:	e5930000 	ldr	r0, [r3]
    d37c:	e12fff1e 	bx	lr

0000d380 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    d380:	e7903101 	ldr	r3, [r0, r1, lsl #2]
    d384:	e0800101 	add	r0, r0, r1, lsl #2
    d388:	e3530000 	cmp	r3, #0
    d38c:	0a000004 	beq	d3a4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    d390:	e92d4010 	push	{r4, lr}
    d394:	e5900120 	ldr	r0, [r0, #288]	; 0x120
    d398:	e12fff33 	blx	r3
    d39c:	e3a00001 	mov	r0, #1
    d3a0:	e8bd8010 	pop	{r4, pc}
    d3a4:	e351001f 	cmp	r1, #31
    d3a8:	930b221c 	movwls	r2, #45596	; 0xb21c
    d3ac:	93432f00 	movtls	r2, #16128	; 0x3f00
    d3b0:	9a000005 	bls	d3cc <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
    d3b4:	e30b3220 	movw	r3, #45600	; 0xb220
    d3b8:	e351003f 	cmp	r1, #63	; 0x3f
    d3bc:	e3433f00 	movt	r3, #16128	; 0x3f00
    d3c0:	e30b2224 	movw	r2, #45604	; 0xb224
    d3c4:	e3432f00 	movt	r2, #16128	; 0x3f00
    d3c8:	91a02003 	movls	r2, r3
    d3cc:	e3a03001 	mov	r3, #1
    d3d0:	e201101f 	and	r1, r1, #31
    d3d4:	e1a01113 	lsl	r1, r3, r1
    d3d8:	e3a00000 	mov	r0, #0
    d3dc:	e5821000 	str	r1, [r2]
    d3e0:	e12fff1e 	bx	lr

0000d3e4 <CInterruptSystem::InterruptHandler()>:
    d3e4:	e3a02a0b 	mov	r2, #45056	; 0xb000
    d3e8:	e3432f00 	movt	r2, #16128	; 0x3f00
    d3ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d3f0:	e3001570 	movw	r1, #1392	; 0x570
    d3f4:	e5923204 	ldr	r3, [r2, #516]	; 0x204
    d3f8:	e24dd010 	sub	sp, sp, #16
    d3fc:	e3401001 	movt	r1, #1
    d400:	e30be21c 	movw	lr, #45596	; 0xb21c
    d404:	e30b6224 	movw	r6, #45604	; 0xb224
    d408:	e30b5220 	movw	r5, #45600	; 0xb220
    d40c:	e58d3004 	str	r3, [sp, #4]
    d410:	e343ef00 	movt	lr, #16128	; 0x3f00
    d414:	e5910000 	ldr	r0, [r1]
    d418:	e3436f00 	movt	r6, #16128	; 0x3f00
    d41c:	e5921208 	ldr	r1, [r2, #520]	; 0x208
    d420:	e3435f00 	movt	r5, #16128	; 0x3f00
    d424:	e28d4008 	add	r4, sp, #8
    d428:	e3a0c000 	mov	ip, #0
    d42c:	e3a07001 	mov	r7, #1
    d430:	e58d1008 	str	r1, [sp, #8]
    d434:	e5922200 	ldr	r2, [r2, #512]	; 0x200
    d438:	e6ef2072 	uxtb	r2, r2
    d43c:	e58d200c 	str	r2, [sp, #12]
    d440:	e3530000 	cmp	r3, #0
    d444:	0a000016 	beq	d4a4 <CInterruptSystem::InterruptHandler()+0xc0>
    d448:	e1a0200c 	mov	r2, ip
    d44c:	e3130001 	tst	r3, #1
    d450:	0a000010 	beq	d498 <CInterruptSystem::InterruptHandler()+0xb4>
    d454:	e7901102 	ldr	r1, [r0, r2, lsl #2]
    d458:	e3510000 	cmp	r1, #0
    d45c:	0a000004 	beq	d474 <CInterruptSystem::InterruptHandler()+0x90>
    d460:	e2822048 	add	r2, r2, #72	; 0x48
    d464:	e7900102 	ldr	r0, [r0, r2, lsl #2]
    d468:	e28dd010 	add	sp, sp, #16
    d46c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    d470:	e12fff11 	bx	r1
    d474:	e352001f 	cmp	r2, #31
    d478:	e1a0800e 	mov	r8, lr
    d47c:	9a000002 	bls	d48c <CInterruptSystem::InterruptHandler()+0xa8>
    d480:	e352003f 	cmp	r2, #63	; 0x3f
    d484:	81a08006 	movhi	r8, r6
    d488:	91a08005 	movls	r8, r5
    d48c:	e202101f 	and	r1, r2, #31
    d490:	e1a01117 	lsl	r1, r7, r1
    d494:	e5881000 	str	r1, [r8]
    d498:	e1b030a3 	lsrs	r3, r3, #1
    d49c:	e2822001 	add	r2, r2, #1
    d4a0:	1affffe9 	bne	d44c <CInterruptSystem::InterruptHandler()+0x68>
    d4a4:	e28cc020 	add	ip, ip, #32
    d4a8:	e35c0060 	cmp	ip, #96	; 0x60
    d4ac:	14943004 	ldrne	r3, [r4], #4
    d4b0:	1affffe2 	bne	d440 <CInterruptSystem::InterruptHandler()+0x5c>
    d4b4:	e28dd010 	add	sp, sp, #16
    d4b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d4bc <InterruptHandler>:
    d4bc:	eaffffc8 	b	d3e4 <CInterruptSystem::InterruptHandler()>

0000d4c0 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    d4c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d4c4:	e280c0dc 	add	ip, r0, #220	; 0xdc
    d4c8:	e3a0e000 	mov	lr, #0
    d4cc:	e1a03000 	mov	r3, r0
    d4d0:	e1a0200e 	mov	r2, lr
    d4d4:	e5801000 	str	r1, [r0]
    d4d8:	e5a3e004 	str	lr, [r3, #4]!
    d4dc:	e5a32004 	str	r2, [r3, #4]!
    d4e0:	e153000c 	cmp	r3, ip
    d4e4:	1afffffc 	bne	d4dc <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    d4e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000d4ec <CGPIOManager::~CGPIOManager()>:
    d4ec:	e5903004 	ldr	r3, [r0, #4]
    d4f0:	e92d4010 	push	{r4, lr}
    d4f4:	e3530000 	cmp	r3, #0
    d4f8:	e1a04000 	mov	r4, r0
    d4fc:	0a000002 	beq	d50c <CGPIOManager::~CGPIOManager()+0x20>
    d500:	e3a01034 	mov	r1, #52	; 0x34
    d504:	e5900000 	ldr	r0, [r0]
    d508:	ebffff4b 	bl	d23c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    d50c:	e1a00004 	mov	r0, r4
    d510:	e8bd8010 	pop	{r4, pc}

0000d514 <CGPIOManager::Initialize()>:
    d514:	e92d4010 	push	{r4, lr}
    d518:	e1a03000 	mov	r3, r0
    d51c:	e1a04000 	mov	r4, r0
    d520:	e3a01034 	mov	r1, #52	; 0x34
    d524:	e5900000 	ldr	r0, [r0]
    d528:	e30d25e4 	movw	r2, #54756	; 0xd5e4
    d52c:	e3402000 	movt	r2, #0
    d530:	ebffff2f 	bl	d1f4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    d534:	e3a03001 	mov	r3, #1
    d538:	e1a00003 	mov	r0, r3
    d53c:	e5843004 	str	r3, [r4, #4]
    d540:	e8bd8010 	pop	{r4, pc}

0000d544 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    d544:	e5913004 	ldr	r3, [r1, #4]
    d548:	e2833002 	add	r3, r3, #2
    d54c:	e7801103 	str	r1, [r0, r3, lsl #2]
    d550:	e12fff1e 	bx	lr

0000d554 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    d554:	e5913004 	ldr	r3, [r1, #4]
    d558:	e3a02000 	mov	r2, #0
    d55c:	e2833002 	add	r3, r3, #2
    d560:	e7802103 	str	r2, [r0, r3, lsl #2]
    d564:	e12fff1e 	bx	lr

0000d568 <CGPIOManager::InterruptHandler()>:
    d568:	e3a02000 	mov	r2, #0
    d56c:	e3432f20 	movt	r2, #16160	; 0x3f20
    d570:	e92d4070 	push	{r4, r5, r6, lr}
    d574:	e3a04000 	mov	r4, #0
    d578:	e5923040 	ldr	r3, [r2, #64]	; 0x40
    d57c:	ea000004 	b	d594 <CGPIOManager::InterruptHandler()+0x2c>
    d580:	e2844001 	add	r4, r4, #1
    d584:	e314001f 	tst	r4, #31
    d588:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    d58c:	e3540036 	cmp	r4, #54	; 0x36
    d590:	08bd8070 	popeq	{r4, r5, r6, pc}
    d594:	e3130001 	tst	r3, #1
    d598:	e1a030a3 	lsr	r3, r3, #1
    d59c:	0afffff7 	beq	d580 <CGPIOManager::InterruptHandler()+0x18>
    d5a0:	e2843002 	add	r3, r4, #2
    d5a4:	e204501f 	and	r5, r4, #31
    d5a8:	e3a02001 	mov	r2, #1
    d5ac:	e7900103 	ldr	r0, [r0, r3, lsl #2]
    d5b0:	e1a05512 	lsl	r5, r2, r5
    d5b4:	e3500000 	cmp	r0, #0
    d5b8:	0a000006 	beq	d5d8 <CGPIOManager::InterruptHandler()+0x70>
    d5bc:	ebffed99 	bl	8c28 <CGPIOPin::InterruptHandler()>
    d5c0:	e3a03010 	mov	r3, #16
    d5c4:	e3403fc8 	movt	r3, #4040	; 0xfc8
    d5c8:	e08332a4 	add	r3, r3, r4, lsr #5
    d5cc:	e1a03103 	lsl	r3, r3, #2
    d5d0:	e5835000 	str	r5, [r3]
    d5d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d5d8:	e1a00004 	mov	r0, r4
    d5dc:	ebffed94 	bl	8c34 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    d5e0:	eafffff6 	b	d5c0 <CGPIOManager::InterruptHandler()+0x58>

0000d5e4 <CGPIOManager::InterruptStub(void*)>:
    d5e4:	eaffffdf 	b	d568 <CGPIOManager::InterruptHandler()>

0000d5e8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    d5e8:	e12fff1e 	bx	lr

0000d5ec <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    d5ec:	e92d4010 	push	{r4, lr}
    d5f0:	e3a01010 	mov	r1, #16
    d5f4:	e1a04000 	mov	r4, r0
    d5f8:	ebffee29 	bl	8ea4 <operator delete(void*, unsigned int)>
    d5fc:	e1a00004 	mov	r0, r4
    d600:	e8bd8010 	pop	{r4, pc}

0000d604 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    d604:	e92d4070 	push	{r4, r5, r6, lr}
    d608:	e3004574 	movw	r4, #1396	; 0x574
    d60c:	e3404001 	movt	r4, #1
    d610:	e1a05000 	mov	r5, r0
    d614:	e1a06001 	mov	r6, r1
    d618:	e5940000 	ldr	r0, [r4]
    d61c:	e3500000 	cmp	r0, #0
    d620:	1a00001a 	bne	d690 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    d624:	e1d500bc 	ldrh	r0, [r5, #12]
    d628:	e1d530be 	ldrh	r3, [r5, #14]
    d62c:	e5856008 	str	r6, [r5, #8]
    d630:	e0402003 	sub	r2, r0, r3
    d634:	e6bf2072 	sxth	r2, r2
    d638:	e3520000 	cmp	r2, #0
    d63c:	da00000c 	ble	d674 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    d640:	e3560000 	cmp	r6, #0
    d644:	1a00000c 	bne	d67c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    d648:	e2833001 	add	r3, r3, #1
    d64c:	e6ff3073 	uxth	r3, r3
    d650:	e1c530be 	strh	r3, [r5, #14]
    d654:	e5951004 	ldr	r1, [r5, #4]
    d658:	e1833800 	orr	r3, r3, r0, lsl #16
    d65c:	e5942004 	ldr	r2, [r4, #4]
    d660:	e7823101 	str	r3, [r2, r1, lsl #2]
    d664:	e5943000 	ldr	r3, [r4]
    d668:	e3530000 	cmp	r3, #0
    d66c:	1a000005 	bne	d688 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    d670:	e8bd8070 	pop	{r4, r5, r6, pc}
    d674:	e3560000 	cmp	r6, #0
    d678:	1a000006 	bne	d698 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    d67c:	e5943000 	ldr	r3, [r4]
    d680:	e3530000 	cmp	r3, #0
    d684:	08bd8070 	popeq	{r4, r5, r6, pc}
    d688:	e8bd4070 	pop	{r4, r5, r6, lr}
    d68c:	eaffee14 	b	8ee4 <LeaveCritical>
    d690:	ebffee05 	bl	8eac <EnterCritical>
    d694:	eaffffe2 	b	d624 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    d698:	e2800001 	add	r0, r0, #1
    d69c:	e6ff0070 	uxth	r0, r0
    d6a0:	e1c500bc 	strh	r0, [r5, #12]
    d6a4:	eaffffea 	b	d654 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000d6a8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    d6a8:	e59f20e4 	ldr	r2, [pc, #228]	; d794 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    d6ac:	e3510001 	cmp	r1, #1
    d6b0:	e92d4030 	push	{r4, r5, lr}
    d6b4:	e3a03000 	mov	r3, #0
    d6b8:	e24dd024 	sub	sp, sp, #36	; 0x24
    d6bc:	e1a04000 	mov	r4, r0
    d6c0:	e5801004 	str	r1, [r0, #4]
    d6c4:	e5802000 	str	r2, [r0]
    d6c8:	e1c030bc 	strh	r3, [r0, #12]
    d6cc:	e1c030be 	strh	r3, [r0, #14]
    d6d0:	9a000002 	bls	d6e0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    d6d4:	e1a00004 	mov	r0, r4
    d6d8:	e28dd024 	add	sp, sp, #36	; 0x24
    d6dc:	e8bd8030 	pop	{r4, r5, pc}
    d6e0:	e3005574 	movw	r5, #1396	; 0x574
    d6e4:	e3405001 	movt	r5, #1
    d6e8:	e5950000 	ldr	r0, [r5]
    d6ec:	e1500003 	cmp	r0, r3
    d6f0:	1a000009 	bne	d71c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    d6f4:	e5953004 	ldr	r3, [r5, #4]
    d6f8:	e3530000 	cmp	r3, #0
    d6fc:	0a00000a 	beq	d72c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    d700:	e5953004 	ldr	r3, [r5, #4]
    d704:	e3530000 	cmp	r3, #0
    d708:	0afffff1 	beq	d6d4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    d70c:	e3a01000 	mov	r1, #0
    d710:	e1a00004 	mov	r0, r4
    d714:	ebffffba 	bl	d604 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    d718:	eaffffed 	b	d6d4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    d71c:	ebffede2 	bl	8eac <EnterCritical>
    d720:	e5953004 	ldr	r3, [r5, #4]
    d724:	e3530000 	cmp	r3, #0
    d728:	1a00000f 	bne	d76c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    d72c:	e28d0008 	add	r0, sp, #8
    d730:	ebffeb96 	bl	8590 <CBcmPropertyTags::CBcmPropertyTags()>
    d734:	e3a03000 	mov	r3, #0
    d738:	e28d0008 	add	r0, sp, #8
    d73c:	e58d3000 	str	r3, [sp]
    d740:	e3a01010 	mov	r1, #16
    d744:	e3a03010 	mov	r3, #16
    d748:	e3401004 	movt	r1, #4
    d74c:	e08d2003 	add	r2, sp, r3
    d750:	ebffebba 	bl	8640 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    d754:	e3500000 	cmp	r0, #0
    d758:	e28d0008 	add	r0, sp, #8
    d75c:	159d301c 	ldrne	r3, [sp, #28]
    d760:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    d764:	15853004 	strne	r3, [r5, #4]
    d768:	ebffeb8e 	bl	85a8 <CBcmPropertyTags::~CBcmPropertyTags()>
    d76c:	e5953000 	ldr	r3, [r5]
    d770:	e3530000 	cmp	r3, #0
    d774:	0a000000 	beq	d77c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
    d778:	ebffedd9 	bl	8ee4 <LeaveCritical>
    d77c:	e5943004 	ldr	r3, [r4, #4]
    d780:	e3530001 	cmp	r3, #1
    d784:	9affffdd 	bls	d700 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
    d788:	e1a00004 	mov	r0, r4
    d78c:	e28dd024 	add	sp, sp, #36	; 0x24
    d790:	e8bd8030 	pop	{r4, r5, pc}
    d794:	00010060 	.word	0x00010060

0000d798 <CVirtualGPIOPin::Write(unsigned int)>:
    d798:	e5902004 	ldr	r2, [r0, #4]
    d79c:	e1a03001 	mov	r3, r1
    d7a0:	e3520001 	cmp	r2, #1
    d7a4:	812fff1e 	bxhi	lr
    d7a8:	e3002574 	movw	r2, #1396	; 0x574
    d7ac:	e3402001 	movt	r2, #1
    d7b0:	e3510001 	cmp	r1, #1
    d7b4:	e5922004 	ldr	r2, [r2, #4]
    d7b8:	93a03000 	movls	r3, #0
    d7bc:	83a03001 	movhi	r3, #1
    d7c0:	e3520000 	cmp	r2, #0
    d7c4:	03833001 	orreq	r3, r3, #1
    d7c8:	e3530000 	cmp	r3, #0
    d7cc:	112fff1e 	bxne	lr
    d7d0:	eaffff8b 	b	d604 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0000d7d4 <CVirtualGPIOPin::Invert()>:
    d7d4:	e5901008 	ldr	r1, [r0, #8]
    d7d8:	e2211001 	eor	r1, r1, #1
    d7dc:	eaffffed 	b	d798 <CVirtualGPIOPin::Write(unsigned int)>

0000d7e0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    d7e0:	e3003574 	movw	r3, #1396	; 0x574
    d7e4:	e3403001 	movt	r3, #1
    d7e8:	e3a02000 	mov	r2, #0
    d7ec:	e5832000 	str	r2, [r3]
    d7f0:	e12fff1e 	bx	lr

0000d7f4 <CMachineInfo::CMachineInfo()>:
    d7f4:	e300257c 	movw	r2, #1404	; 0x57c
    d7f8:	e3402001 	movt	r2, #1
    d7fc:	e92d4030 	push	{r4, r5, lr}
    d800:	e3a0300c 	mov	r3, #12
    d804:	e5925000 	ldr	r5, [r2]
    d808:	e3a01003 	mov	r1, #3
    d80c:	e5c03004 	strb	r3, [r0, #4]
    d810:	e3a03000 	mov	r3, #0
    d814:	e1550003 	cmp	r5, r3
    d818:	e24dd024 	sub	sp, sp, #36	; 0x24
    d81c:	e1a04000 	mov	r4, r0
    d820:	e5c01010 	strb	r1, [r0, #16]
    d824:	e5803000 	str	r3, [r0]
    d828:	e5803008 	str	r3, [r0, #8]
    d82c:	e580300c 	str	r3, [r0, #12]
    d830:	e5803014 	str	r3, [r0, #20]
    d834:	0a00000e 	beq	d874 <CMachineInfo::CMachineInfo()+0x80>
    d838:	e595e000 	ldr	lr, [r5]
    d83c:	e5d5c004 	ldrb	ip, [r5, #4]
    d840:	e5950008 	ldr	r0, [r5, #8]
    d844:	e595100c 	ldr	r1, [r5, #12]
    d848:	e5d52010 	ldrb	r2, [r5, #16]
    d84c:	e5953014 	ldr	r3, [r5, #20]
    d850:	e584e000 	str	lr, [r4]
    d854:	e5c4c004 	strb	ip, [r4, #4]
    d858:	e5840008 	str	r0, [r4, #8]
    d85c:	e584100c 	str	r1, [r4, #12]
    d860:	e5c42010 	strb	r2, [r4, #16]
    d864:	e5843014 	str	r3, [r4, #20]
    d868:	e1a00004 	mov	r0, r4
    d86c:	e28dd024 	add	sp, sp, #36	; 0x24
    d870:	e8bd8030 	pop	{r4, r5, pc}
    d874:	e5820000 	str	r0, [r2]
    d878:	e28d0008 	add	r0, sp, #8
    d87c:	ebffeb43 	bl	8590 <CBcmPropertyTags::CBcmPropertyTags()>
    d880:	e3a03010 	mov	r3, #16
    d884:	e58d5000 	str	r5, [sp]
    d888:	e28d0008 	add	r0, sp, #8
    d88c:	e3a01002 	mov	r1, #2
    d890:	e08d2003 	add	r2, sp, r3
    d894:	e3401001 	movt	r1, #1
    d898:	ebffeb68 	bl	8640 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    d89c:	e3500000 	cmp	r0, #0
    d8a0:	0a00000c 	beq	d8d8 <CMachineInfo::CMachineInfo()+0xe4>
    d8a4:	e59d201c 	ldr	r2, [sp, #28]
    d8a8:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    d8ac:	e5842000 	str	r2, [r4]
    d8b0:	1a00000b 	bne	d8e4 <CMachineInfo::CMachineInfo()+0xf0>
    d8b4:	e3a01002 	mov	r1, #2
    d8b8:	e59f00f8 	ldr	r0, [pc, #248]	; d9b8 <CMachineInfo::CMachineInfo()+0x1c4>
    d8bc:	ea000000 	b	d8c4 <CMachineInfo::CMachineInfo()+0xd0>
    d8c0:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    d8c4:	e1520001 	cmp	r2, r1
    d8c8:	0a000012 	beq	d918 <CMachineInfo::CMachineInfo()+0x124>
    d8cc:	e2833001 	add	r3, r3, #1
    d8d0:	e3530011 	cmp	r3, #17
    d8d4:	1afffff9 	bne	d8c0 <CMachineInfo::CMachineInfo()+0xcc>
    d8d8:	e28d0008 	add	r0, sp, #8
    d8dc:	ebffeb31 	bl	85a8 <CBcmPropertyTags::~CBcmPropertyTags()>
    d8e0:	eaffffe0 	b	d868 <CMachineInfo::CMachineInfo()+0x74>
    d8e4:	e300c068 	movw	ip, #104	; 0x68
    d8e8:	e340c001 	movt	ip, #1
    d8ec:	e7e70252 	ubfx	r0, r2, #4, #8
    d8f0:	e1a03005 	mov	r3, r5
    d8f4:	e1a0100c 	mov	r1, ip
    d8f8:	ea000000 	b	d900 <CMachineInfo::CMachineInfo()+0x10c>
    d8fc:	e5b1500c 	ldr	r5, [r1, #12]!
    d900:	e1550000 	cmp	r5, r0
    d904:	0a000011 	beq	d950 <CMachineInfo::CMachineInfo()+0x15c>
    d908:	e2833001 	add	r3, r3, #1
    d90c:	e353000a 	cmp	r3, #10
    d910:	1afffff9 	bne	d8fc <CMachineInfo::CMachineInfo()+0x108>
    d914:	eaffffef 	b	d8d8 <CMachineInfo::CMachineInfo()+0xe4>
    d918:	e3002068 	movw	r2, #104	; 0x68
    d91c:	e3402001 	movt	r2, #1
    d920:	e0823203 	add	r3, r2, r3, lsl #4
    d924:	e3a01001 	mov	r1, #1
    d928:	e5841008 	str	r1, [r4, #8]
    d92c:	e3a02000 	mov	r2, #0
    d930:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
    d934:	e5931080 	ldr	r1, [r3, #128]	; 0x80
    d938:	e5933084 	ldr	r3, [r3, #132]	; 0x84
    d93c:	e5c40004 	strb	r0, [r4, #4]
    d940:	e584100c 	str	r1, [r4, #12]
    d944:	e5843014 	str	r3, [r4, #20]
    d948:	e5c42010 	strb	r2, [r4, #16]
    d94c:	eaffffe1 	b	d8d8 <CMachineInfo::CMachineInfo()+0xe4>
    d950:	e3a0100c 	mov	r1, #12
    d954:	e7e3e652 	ubfx	lr, r2, #12, #4
    d958:	e023c391 	mla	r3, r1, r3, ip
    d95c:	e35e0002 	cmp	lr, #2
    d960:	e202100f 	and	r1, r2, #15
    d964:	e7e22a52 	ubfx	r2, r2, #20, #3
    d968:	e5c4e010 	strb	lr, [r4, #16]
    d96c:	e3a00c01 	mov	r0, #256	; 0x100
    d970:	e2811001 	add	r1, r1, #1
    d974:	e1a00210 	lsl	r0, r0, r2
    d978:	e584100c 	str	r1, [r4, #12]
    d97c:	e5d3c004 	ldrb	ip, [r3, #4]
    d980:	e5933008 	ldr	r3, [r3, #8]
    d984:	e5840014 	str	r0, [r4, #20]
    d988:	e5c4c004 	strb	ip, [r4, #4]
    d98c:	e5843008 	str	r3, [r4, #8]
    d990:	83a03003 	movhi	r3, #3
    d994:	85c43010 	strbhi	r3, [r4, #16]
    d998:	e3520000 	cmp	r2, #0
    d99c:	035c0003 	cmpeq	ip, #3
    d9a0:	1affffcc 	bne	d8d8 <CMachineInfo::CMachineInfo()+0xe4>
    d9a4:	e3510001 	cmp	r1, #1
    d9a8:	13a03002 	movne	r3, #2
    d9ac:	03a03001 	moveq	r3, #1
    d9b0:	e5c43004 	strb	r3, [r4, #4]
    d9b4:	eaffffc7 	b	d8d8 <CMachineInfo::CMachineInfo()+0xe4>
    d9b8:	000100e0 	.word	0x000100e0

0000d9bc <CMachineInfo::~CMachineInfo()>:
    d9bc:	e300357c 	movw	r3, #1404	; 0x57c
    d9c0:	e3403001 	movt	r3, #1
    d9c4:	e3a0100c 	mov	r1, #12
    d9c8:	e5c01004 	strb	r1, [r0, #4]
    d9cc:	e5932000 	ldr	r2, [r3]
    d9d0:	e1500002 	cmp	r0, r2
    d9d4:	03a02000 	moveq	r2, #0
    d9d8:	05832000 	streq	r2, [r3]
    d9dc:	e12fff1e 	bx	lr

0000d9e0 <CMachineInfo::GetMachineModel() const>:
    d9e0:	e5d00004 	ldrb	r0, [r0, #4]
    d9e4:	e12fff1e 	bx	lr

0000d9e8 <CMachineInfo::GetMachineName() const>:
    d9e8:	e5d02004 	ldrb	r2, [r0, #4]
    d9ec:	e3003068 	movw	r3, #104	; 0x68
    d9f0:	e3403001 	movt	r3, #1
    d9f4:	e0833102 	add	r3, r3, r2, lsl #2
    d9f8:	e5930188 	ldr	r0, [r3, #392]	; 0x188
    d9fc:	e12fff1e 	bx	lr

0000da00 <CMachineInfo::GetModelMajor() const>:
    da00:	e5900008 	ldr	r0, [r0, #8]
    da04:	e12fff1e 	bx	lr

0000da08 <CMachineInfo::GetModelRevision() const>:
    da08:	e590000c 	ldr	r0, [r0, #12]
    da0c:	e12fff1e 	bx	lr

0000da10 <CMachineInfo::GetSoCType() const>:
    da10:	e5d00010 	ldrb	r0, [r0, #16]
    da14:	e12fff1e 	bx	lr

0000da18 <CMachineInfo::GetRAMSize() const>:
    da18:	e5900014 	ldr	r0, [r0, #20]
    da1c:	e12fff1e 	bx	lr

0000da20 <CMachineInfo::GetSoCName() const>:
    da20:	e5d02010 	ldrb	r2, [r0, #16]
    da24:	e3003068 	movw	r3, #104	; 0x68
    da28:	e3403001 	movt	r3, #1
    da2c:	e0833102 	add	r3, r3, r2, lsl #2
    da30:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
    da34:	e12fff1e 	bx	lr

0000da38 <CMachineInfo::GetRevisionRaw() const>:
    da38:	e5900000 	ldr	r0, [r0]
    da3c:	e12fff1e 	bx	lr

0000da40 <CMachineInfo::GetClockRate(unsigned int) const>:
    da40:	e92d4030 	push	{r4, r5, lr}
    da44:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    da48:	e1a05000 	mov	r5, r0
    da4c:	e28d000c 	add	r0, sp, #12
    da50:	e1a04001 	mov	r4, r1
    da54:	ebffeacd 	bl	8590 <CBcmPropertyTags::CBcmPropertyTags()>
    da58:	e3a03004 	mov	r3, #4
    da5c:	e28d000c 	add	r0, sp, #12
    da60:	e58d3000 	str	r3, [sp]
    da64:	e3a01002 	mov	r1, #2
    da68:	e3a03014 	mov	r3, #20
    da6c:	e3401003 	movt	r1, #3
    da70:	e08d2003 	add	r2, sp, r3
    da74:	e58d4020 	str	r4, [sp, #32]
    da78:	ebffeaf0 	bl	8640 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    da7c:	e3500000 	cmp	r0, #0
    da80:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    da84:	1a000007 	bne	daa8 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    da88:	e3540002 	cmp	r4, #2
    da8c:	0a00000a 	beq	dabc <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    da90:	e3540004 	cmp	r4, #4
    da94:	0a00000b 	beq	dac8 <CMachineInfo::GetClockRate(unsigned int) const+0x88>
    da98:	e3540001 	cmp	r4, #1
    da9c:	e3a04ce1 	mov	r4, #57600	; 0xe100
    daa0:	e34045f5 	movt	r4, #1525	; 0x5f5
    daa4:	13a04000 	movne	r4, #0
    daa8:	e28d000c 	add	r0, sp, #12
    daac:	ebffeabd 	bl	85a8 <CBcmPropertyTags::~CBcmPropertyTags()>
    dab0:	e1a00004 	mov	r0, r4
    dab4:	e28dd02c 	add	sp, sp, #44	; 0x2c
    dab8:	e8bd8030 	pop	{r4, r5, pc}
    dabc:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    dac0:	e34042dc 	movt	r4, #732	; 0x2dc
    dac4:	eafffff7 	b	daa8 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    dac8:	e5952008 	ldr	r2, [r5, #8]
    dacc:	e3a03ca3 	mov	r3, #41728	; 0xa300
    dad0:	e34131e1 	movt	r3, #4577	; 0x11e1
    dad4:	e30b4280 	movw	r4, #45696	; 0xb280
    dad8:	e3520002 	cmp	r2, #2
    dadc:	e3404ee6 	movt	r4, #3814	; 0xee6
    dae0:	81a04003 	movhi	r4, r3
    dae4:	eaffffef 	b	daa8 <CMachineInfo::GetClockRate(unsigned int) const+0x68>

0000dae8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    dae8:	e3510036 	cmp	r1, #54	; 0x36
    daec:	0a000008 	beq	db14 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x2c>
    daf0:	e3510037 	cmp	r1, #55	; 0x37
    daf4:	1a000004 	bne	db0c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    daf8:	e5d03004 	ldrb	r3, [r0, #4]
    dafc:	e3530003 	cmp	r3, #3
    db00:	c3a00028 	movgt	r0, #40	; 0x28
    db04:	d3a0002d 	movle	r0, #45	; 0x2d
    db08:	e12fff1e 	bx	lr
    db0c:	e3a00000 	mov	r0, #0
    db10:	e12fff1e 	bx	lr
    db14:	e5d03004 	ldrb	r3, [r0, #4]
    db18:	e3530003 	cmp	r3, #3
    db1c:	ca000001 	bgt	db28 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    db20:	e3a00028 	mov	r0, #40	; 0x28
    db24:	e12fff1e 	bx	lr
    db28:	e5903008 	ldr	r3, [r0, #8]
    db2c:	e3530003 	cmp	r3, #3
    db30:	33a0002d 	movcc	r0, #45	; 0x2d
    db34:	23a00029 	movcs	r0, #41	; 0x29
    db38:	e12fff1e 	bx	lr

0000db3c <CMachineInfo::GetDevice(TDeviceId) const>:
    db3c:	e3510000 	cmp	r1, #0
    db40:	1a000003 	bne	db54 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    db44:	e5d00004 	ldrb	r0, [r0, #4]
    db48:	e2500001 	subs	r0, r0, #1
    db4c:	13a00001 	movne	r0, #1
    db50:	e12fff1e 	bx	lr
    db54:	e3a00000 	mov	r0, #0
    db58:	e12fff1e 	bx	lr

0000db5c <CMachineInfo::Get()>:
    db5c:	e300357c 	movw	r3, #1404	; 0x57c
    db60:	e3403001 	movt	r3, #1
    db64:	e5930000 	ldr	r0, [r3]
    db68:	e12fff1e 	bx	lr

0000db6c <InvalidateDataCacheL1Only>:
    db6c:	e92d0070 	push	{r4, r5, r6}
    db70:	e3a00000 	mov	r0, #0
    db74:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    db78:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    db7c:	e3071fff 	movw	r1, #32767	; 0x7fff
    db80:	e00126a0 	and	r2, r1, r0, lsr #13
    db84:	e30013ff 	movw	r1, #1023	; 0x3ff
    db88:	e00131a0 	and	r3, r1, r0, lsr #3
    db8c:	e2822001 	add	r2, r2, #1
    db90:	e2000007 	and	r0, r0, #7
    db94:	e2800004 	add	r0, r0, #4
    db98:	e16f1f13 	clz	r1, r3
    db9c:	e2834001 	add	r4, r3, #1
    dba0:	e2422001 	sub	r2, r2, #1
    dba4:	e1a03004 	mov	r3, r4
    dba8:	e2533001 	subs	r3, r3, #1
    dbac:	e1a05113 	lsl	r5, r3, r1
    dbb0:	e1a06012 	lsl	r6, r2, r0
    dbb4:	e1855006 	orr	r5, r5, r6
    dbb8:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    dbbc:	cafffff9 	bgt	dba8 <InvalidateDataCacheL1Only+0x3c>
    dbc0:	e3520000 	cmp	r2, #0
    dbc4:	cafffff5 	bgt	dba0 <InvalidateDataCacheL1Only+0x34>
    dbc8:	f57ff04e 	dsb	st
    dbcc:	f57ff06f 	isb	sy
    dbd0:	e8bd0070 	pop	{r4, r5, r6}
    dbd4:	e12fff1e 	bx	lr

0000dbd8 <InvalidateDataCache>:
    dbd8:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    dbdc:	f57ff05f 	dmb	sy
    dbe0:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    dbe4:	e1a03ba0 	lsr	r3, r0, #23
    dbe8:	e213300e 	ands	r3, r3, #14
    dbec:	0a00001d 	beq	dc68 <InvalidateDataCache+0x90>
    dbf0:	e3a0a000 	mov	sl, #0
    dbf4:	e08a20aa 	add	r2, sl, sl, lsr #1
    dbf8:	e1a01230 	lsr	r1, r0, r2
    dbfc:	e2011007 	and	r1, r1, #7
    dc00:	e3510002 	cmp	r1, #2
    dc04:	ba000014 	blt	dc5c <InvalidateDataCache+0x84>
    dc08:	e10f9000 	mrs	r9, CPSR
    dc0c:	f10c0080 	cpsid	i
    dc10:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    dc14:	f57ff06f 	isb	sy
    dc18:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    dc1c:	e121f009 	msr	CPSR_c, r9
    dc20:	e2012007 	and	r2, r1, #7
    dc24:	e2822004 	add	r2, r2, #4
    dc28:	e30043ff 	movw	r4, #1023	; 0x3ff
    dc2c:	e01441a1 	ands	r4, r4, r1, lsr #3
    dc30:	e16f5f14 	clz	r5, r4
    dc34:	e3077fff 	movw	r7, #32767	; 0x7fff
    dc38:	e01776a1 	ands	r7, r7, r1, lsr #13
    dc3c:	e1a09007 	mov	r9, r7
    dc40:	e18ab514 	orr	fp, sl, r4, lsl r5
    dc44:	e18bb219 	orr	fp, fp, r9, lsl r2
    dc48:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    dc4c:	e2599001 	subs	r9, r9, #1
    dc50:	aafffffa 	bge	dc40 <InvalidateDataCache+0x68>
    dc54:	e2544001 	subs	r4, r4, #1
    dc58:	aafffff7 	bge	dc3c <InvalidateDataCache+0x64>
    dc5c:	e28aa002 	add	sl, sl, #2
    dc60:	e153000a 	cmp	r3, sl
    dc64:	caffffe2 	bgt	dbf4 <InvalidateDataCache+0x1c>
    dc68:	e3a0a000 	mov	sl, #0
    dc6c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    dc70:	f57ff04e 	dsb	st
    dc74:	f57ff06f 	isb	sy
    dc78:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    dc7c:	e12fff1e 	bx	lr

0000dc80 <CleanDataCache>:
    dc80:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    dc84:	f57ff05f 	dmb	sy
    dc88:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    dc8c:	e1a03ba0 	lsr	r3, r0, #23
    dc90:	e213300e 	ands	r3, r3, #14
    dc94:	0a00001d 	beq	dd10 <CleanDataCache+0x90>
    dc98:	e3a0a000 	mov	sl, #0
    dc9c:	e08a20aa 	add	r2, sl, sl, lsr #1
    dca0:	e1a01230 	lsr	r1, r0, r2
    dca4:	e2011007 	and	r1, r1, #7
    dca8:	e3510002 	cmp	r1, #2
    dcac:	ba000014 	blt	dd04 <CleanDataCache+0x84>
    dcb0:	e10f9000 	mrs	r9, CPSR
    dcb4:	f10c0080 	cpsid	i
    dcb8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    dcbc:	f57ff06f 	isb	sy
    dcc0:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    dcc4:	e121f009 	msr	CPSR_c, r9
    dcc8:	e2012007 	and	r2, r1, #7
    dccc:	e2822004 	add	r2, r2, #4
    dcd0:	e30043ff 	movw	r4, #1023	; 0x3ff
    dcd4:	e01441a1 	ands	r4, r4, r1, lsr #3
    dcd8:	e16f5f14 	clz	r5, r4
    dcdc:	e3077fff 	movw	r7, #32767	; 0x7fff
    dce0:	e01776a1 	ands	r7, r7, r1, lsr #13
    dce4:	e1a09007 	mov	r9, r7
    dce8:	e18ab514 	orr	fp, sl, r4, lsl r5
    dcec:	e18bb219 	orr	fp, fp, r9, lsl r2
    dcf0:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    dcf4:	e2599001 	subs	r9, r9, #1
    dcf8:	aafffffa 	bge	dce8 <CleanDataCache+0x68>
    dcfc:	e2544001 	subs	r4, r4, #1
    dd00:	aafffff7 	bge	dce4 <CleanDataCache+0x64>
    dd04:	e28aa002 	add	sl, sl, #2
    dd08:	e153000a 	cmp	r3, sl
    dd0c:	caffffe2 	bgt	dc9c <CleanDataCache+0x1c>
    dd10:	e3a0a000 	mov	sl, #0
    dd14:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    dd18:	f57ff04e 	dsb	st
    dd1c:	f57ff06f 	isb	sy
    dd20:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    dd24:	e12fff1e 	bx	lr

0000dd28 <CleanAndInvalidateDataCacheRange>:
    dd28:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    dd2c:	e1a03823 	lsr	r3, r3, #16
    dd30:	e203300f 	and	r3, r3, #15
    dd34:	e3a02004 	mov	r2, #4
    dd38:	e1a02312 	lsl	r2, r2, r3
    dd3c:	e0801001 	add	r1, r0, r1
    dd40:	e2423001 	sub	r3, r2, #1
    dd44:	e1c00003 	bic	r0, r0, r3
    dd48:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    dd4c:	e0800002 	add	r0, r0, r2
    dd50:	e1500001 	cmp	r0, r1
    dd54:	3afffffb 	bcc	dd48 <CleanAndInvalidateDataCacheRange+0x20>
    dd58:	f57ff04e 	dsb	st
    dd5c:	e12fff1e 	bx	lr

0000dd60 <CPtrList::CPtrList()>:
    dd60:	e3a02000 	mov	r2, #0
    dd64:	e5802000 	str	r2, [r0]
    dd68:	e12fff1e 	bx	lr

0000dd6c <CPtrList::~CPtrList()>:
    dd6c:	e12fff1e 	bx	lr

0000dd70 <CPtrList::GetFirst()>:
    dd70:	e5900000 	ldr	r0, [r0]
    dd74:	e12fff1e 	bx	lr

0000dd78 <CPtrList::GetNext(TPtrListElement*)>:
    dd78:	e5910008 	ldr	r0, [r1, #8]
    dd7c:	e12fff1e 	bx	lr

0000dd80 <CPtrList::GetPtr(TPtrListElement*)>:
    dd80:	e591000c 	ldr	r0, [r1, #12]
    dd84:	e12fff1e 	bx	lr

0000dd88 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    dd88:	e92d4070 	push	{r4, r5, r6, lr}
    dd8c:	e1a05000 	mov	r5, r0
    dd90:	e3a00010 	mov	r0, #16
    dd94:	e1a04001 	mov	r4, r1
    dd98:	e1a06002 	mov	r6, r2
    dd9c:	ebffec3c 	bl	8e94 <operator new(unsigned int)>
    dda0:	e5951000 	ldr	r1, [r5]
    dda4:	e3043d43 	movw	r3, #19779	; 0x4d43
    dda8:	e345304c 	movt	r3, #20556	; 0x504c
    ddac:	e1510004 	cmp	r1, r4
    ddb0:	e580600c 	str	r6, [r0, #12]
    ddb4:	e5803000 	str	r3, [r0]
    ddb8:	0a000006 	beq	ddd8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x50>
    ddbc:	e5943004 	ldr	r3, [r4, #4]
    ddc0:	e5804008 	str	r4, [r0, #8]
    ddc4:	e3530000 	cmp	r3, #0
    ddc8:	e5803004 	str	r3, [r0, #4]
    ddcc:	15830008 	strne	r0, [r3, #8]
    ddd0:	e5840004 	str	r0, [r4, #4]
    ddd4:	e8bd8070 	pop	{r4, r5, r6, pc}
    ddd8:	e5801008 	str	r1, [r0, #8]
    dddc:	e3a03000 	mov	r3, #0
    dde0:	e5803004 	str	r3, [r0, #4]
    dde4:	e5810004 	str	r0, [r1, #4]
    dde8:	e5850000 	str	r0, [r5]
    ddec:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ddf0 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    ddf0:	e92d4070 	push	{r4, r5, r6, lr}
    ddf4:	e1a06000 	mov	r6, r0
    ddf8:	e3a00010 	mov	r0, #16
    ddfc:	e1a04001 	mov	r4, r1
    de00:	e1a05002 	mov	r5, r2
    de04:	ebffec22 	bl	8e94 <operator new(unsigned int)>
    de08:	e3540000 	cmp	r4, #0
    de0c:	e3043d43 	movw	r3, #19779	; 0x4d43
    de10:	e345304c 	movt	r3, #20556	; 0x504c
    de14:	e580500c 	str	r5, [r0, #12]
    de18:	e5803000 	str	r3, [r0]
    de1c:	0a000006 	beq	de3c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x4c>
    de20:	e5943008 	ldr	r3, [r4, #8]
    de24:	e5804004 	str	r4, [r0, #4]
    de28:	e3530000 	cmp	r3, #0
    de2c:	e5803008 	str	r3, [r0, #8]
    de30:	15830004 	strne	r0, [r3, #4]
    de34:	e5840008 	str	r0, [r4, #8]
    de38:	e8bd8070 	pop	{r4, r5, r6, pc}
    de3c:	e5804004 	str	r4, [r0, #4]
    de40:	e5804008 	str	r4, [r0, #8]
    de44:	e5860000 	str	r0, [r6]
    de48:	e8bd8070 	pop	{r4, r5, r6, pc}

0000de4c <CPtrList::Remove(TPtrListElement*)>:
    de4c:	e5903000 	ldr	r3, [r0]
    de50:	e1530001 	cmp	r3, r1
    de54:	0a000009 	beq	de80 <CPtrList::Remove(TPtrListElement*)+0x34>
    de58:	e991000c 	ldmib	r1, {r2, r3}
    de5c:	e5823008 	str	r3, [r2, #8]
    de60:	e5913008 	ldr	r3, [r1, #8]
    de64:	e3530000 	cmp	r3, #0
    de68:	15832004 	strne	r2, [r3, #4]
    de6c:	e3a03000 	mov	r3, #0
    de70:	e1a00001 	mov	r0, r1
    de74:	e5813000 	str	r3, [r1]
    de78:	e3a01010 	mov	r1, #16
    de7c:	eaffec08 	b	8ea4 <operator delete(void*, unsigned int)>
    de80:	e5913008 	ldr	r3, [r1, #8]
    de84:	e3530000 	cmp	r3, #0
    de88:	e5803000 	str	r3, [r0]
    de8c:	13a02000 	movne	r2, #0
    de90:	15832004 	strne	r2, [r3, #4]
    de94:	eafffff4 	b	de6c <CPtrList::Remove(TPtrListElement*)+0x20>

0000de98 <CPtrList::Find(void*)>:
    de98:	e5900000 	ldr	r0, [r0]
    de9c:	e3500000 	cmp	r0, #0
    dea0:	012fff1e 	bxeq	lr
    dea4:	e590300c 	ldr	r3, [r0, #12]
    dea8:	e1510003 	cmp	r1, r3
    deac:	1a000003 	bne	dec0 <CPtrList::Find(void*)+0x28>
    deb0:	ea000006 	b	ded0 <CPtrList::Find(void*)+0x38>
    deb4:	e590300c 	ldr	r3, [r0, #12]
    deb8:	e1530001 	cmp	r3, r1
    debc:	012fff1e 	bxeq	lr
    dec0:	e5900008 	ldr	r0, [r0, #8]
    dec4:	e3500000 	cmp	r0, #0
    dec8:	1afffff9 	bne	deb4 <CPtrList::Find(void*)+0x1c>
    decc:	e12fff1e 	bx	lr
    ded0:	e12fff1e 	bx	lr

0000ded4 <mem_init>:
    ded4:	e0801001 	add	r1, r0, r1
    ded8:	e3002580 	movw	r2, #1408	; 0x580
    dedc:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    dee0:	e3402001 	movt	r2, #1
    dee4:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    dee8:	e3500605 	cmp	r0, #5242880	; 0x500000
    deec:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    def0:	e582100c 	str	r1, [r2, #12]
    def4:	33a00605 	movcc	r0, #5242880	; 0x500000
    def8:	e2411501 	sub	r1, r1, #4194304	; 0x400000
    defc:	e3c3300f 	bic	r3, r3, #15
    df00:	e5820000 	str	r0, [r2]
    df04:	e982000a 	stmib	r2, {r1, r3}
    df08:	e12fff1e 	bx	lr

0000df0c <mem_get_size>:
    df0c:	e3003580 	movw	r3, #1408	; 0x580
    df10:	e3403001 	movt	r3, #1
    df14:	e5930004 	ldr	r0, [r3, #4]
    df18:	e5931000 	ldr	r1, [r3]
    df1c:	e593200c 	ldr	r2, [r3, #12]
    df20:	e5933008 	ldr	r3, [r3, #8]
    df24:	e0400001 	sub	r0, r0, r1
    df28:	e0423003 	sub	r3, r2, r3
    df2c:	e0800003 	add	r0, r0, r3
    df30:	e12fff1e 	bx	lr

0000df34 <malloc>:
    df34:	e92d4070 	push	{r4, r5, r6, lr}
    df38:	e3006580 	movw	r6, #1408	; 0x580
    df3c:	e3406001 	movt	r6, #1
    df40:	e1a04000 	mov	r4, r0
    df44:	e5960010 	ldr	r0, [r6, #16]
    df48:	e3500000 	cmp	r0, #0
    df4c:	1a000035 	bne	e028 <malloc+0xf4>
    df50:	e3002440 	movw	r2, #1088	; 0x440
    df54:	e3402001 	movt	r2, #1
    df58:	e5923000 	ldr	r3, [r2]
    df5c:	e3530000 	cmp	r3, #0
    df60:	0a000007 	beq	df84 <malloc+0x50>
    df64:	e1540003 	cmp	r4, r3
    df68:	8a000002 	bhi	df78 <malloc+0x44>
    df6c:	ea000011 	b	dfb8 <malloc+0x84>
    df70:	e1530004 	cmp	r3, r4
    df74:	2a00000f 	bcs	dfb8 <malloc+0x84>
    df78:	e5b23008 	ldr	r3, [r2, #8]!
    df7c:	e3530000 	cmp	r3, #0
    df80:	1afffffa 	bne	df70 <malloc+0x3c>
    df84:	e5965000 	ldr	r5, [r6]
    df88:	e284301f 	add	r3, r4, #31
    df8c:	e3c3300f 	bic	r3, r3, #15
    df90:	e5962004 	ldr	r2, [r6, #4]
    df94:	e0853003 	add	r3, r5, r3
    df98:	e5863000 	str	r3, [r6]
    df9c:	e1530002 	cmp	r3, r2
    dfa0:	9a000013 	bls	dff4 <malloc+0xc0>
    dfa4:	e3500000 	cmp	r0, #0
    dfa8:	08bd8070 	popeq	{r4, r5, r6, pc}
    dfac:	ebffebcc 	bl	8ee4 <LeaveCritical>
    dfb0:	e3a00000 	mov	r0, #0
    dfb4:	e8bd8070 	pop	{r4, r5, r6, pc}
    dfb8:	e5925004 	ldr	r5, [r2, #4]
    dfbc:	e3550000 	cmp	r5, #0
    dfc0:	01a04003 	moveq	r4, r3
    dfc4:	0affffee 	beq	df84 <malloc+0x50>
    dfc8:	e5953008 	ldr	r3, [r5, #8]
    dfcc:	e3500000 	cmp	r0, #0
    dfd0:	e5823004 	str	r3, [r2, #4]
    dfd4:	1a000011 	bne	e020 <malloc+0xec>
    dfd8:	e3a03000 	mov	r3, #0
    dfdc:	e2850010 	add	r0, r5, #16
    dfe0:	e5c53008 	strb	r3, [r5, #8]
    dfe4:	e5c53009 	strb	r3, [r5, #9]
    dfe8:	e5c5300a 	strb	r3, [r5, #10]
    dfec:	e5c5300b 	strb	r3, [r5, #11]
    dff0:	e8bd8070 	pop	{r4, r5, r6, pc}
    dff4:	e3500000 	cmp	r0, #0
    dff8:	e3a02043 	mov	r2, #67	; 0x43
    dffc:	e3a0304d 	mov	r3, #77	; 0x4d
    e000:	e5c52000 	strb	r2, [r5]
    e004:	e5c53001 	strb	r3, [r5, #1]
    e008:	e3a0204c 	mov	r2, #76	; 0x4c
    e00c:	e3a03042 	mov	r3, #66	; 0x42
    e010:	e5854004 	str	r4, [r5, #4]
    e014:	e5c52002 	strb	r2, [r5, #2]
    e018:	e5c53003 	strb	r3, [r5, #3]
    e01c:	0affffed 	beq	dfd8 <malloc+0xa4>
    e020:	ebffebaf 	bl	8ee4 <LeaveCritical>
    e024:	eaffffeb 	b	dfd8 <malloc+0xa4>
    e028:	ebffeb9f 	bl	8eac <EnterCritical>
    e02c:	e5960010 	ldr	r0, [r6, #16]
    e030:	eaffffc6 	b	df50 <malloc+0x1c>

0000e034 <free>:
    e034:	e3500000 	cmp	r0, #0
    e038:	012fff1e 	bxeq	lr
    e03c:	e92d4070 	push	{r4, r5, r6, lr}
    e040:	e3004440 	movw	r4, #1088	; 0x440
    e044:	e3404001 	movt	r4, #1
    e048:	e2405010 	sub	r5, r0, #16
    e04c:	e5943000 	ldr	r3, [r4]
    e050:	e3530000 	cmp	r3, #0
    e054:	08bd8070 	popeq	{r4, r5, r6, pc}
    e058:	e5952004 	ldr	r2, [r5, #4]
    e05c:	e1520003 	cmp	r2, r3
    e060:	1a000002 	bne	e070 <free+0x3c>
    e064:	ea000005 	b	e080 <free+0x4c>
    e068:	e1530002 	cmp	r3, r2
    e06c:	0a000003 	beq	e080 <free+0x4c>
    e070:	e5b43008 	ldr	r3, [r4, #8]!
    e074:	e3530000 	cmp	r3, #0
    e078:	1afffffa 	bne	e068 <free+0x34>
    e07c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e080:	e3006580 	movw	r6, #1408	; 0x580
    e084:	e3406001 	movt	r6, #1
    e088:	e5960010 	ldr	r0, [r6, #16]
    e08c:	e3500000 	cmp	r0, #0
    e090:	1a000003 	bne	e0a4 <free+0x70>
    e094:	e5943004 	ldr	r3, [r4, #4]
    e098:	e5853008 	str	r3, [r5, #8]
    e09c:	e5845004 	str	r5, [r4, #4]
    e0a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0a4:	ebffeb80 	bl	8eac <EnterCritical>
    e0a8:	e5962010 	ldr	r2, [r6, #16]
    e0ac:	e5943004 	ldr	r3, [r4, #4]
    e0b0:	e3520000 	cmp	r2, #0
    e0b4:	e5853008 	str	r3, [r5, #8]
    e0b8:	e5845004 	str	r5, [r4, #4]
    e0bc:	08bd8070 	popeq	{r4, r5, r6, pc}
    e0c0:	e8bd4070 	pop	{r4, r5, r6, lr}
    e0c4:	eaffeb86 	b	8ee4 <LeaveCritical>

0000e0c8 <palloc>:
    e0c8:	e92d4070 	push	{r4, r5, r6, lr}
    e0cc:	e3005580 	movw	r5, #1408	; 0x580
    e0d0:	e3405001 	movt	r5, #1
    e0d4:	e5950014 	ldr	r0, [r5, #20]
    e0d8:	e3500000 	cmp	r0, #0
    e0dc:	1a00000d 	bne	e118 <palloc+0x50>
    e0e0:	e5954018 	ldr	r4, [r5, #24]
    e0e4:	e3540000 	cmp	r4, #0
    e0e8:	0a00000f 	beq	e12c <palloc+0x64>
    e0ec:	e5943004 	ldr	r3, [r4, #4]
    e0f0:	e3a02000 	mov	r2, #0
    e0f4:	e5842000 	str	r2, [r4]
    e0f8:	e5853018 	str	r3, [r5, #24]
    e0fc:	e3500000 	cmp	r0, #0
    e100:	1a000001 	bne	e10c <palloc+0x44>
    e104:	e1a00004 	mov	r0, r4
    e108:	e8bd8070 	pop	{r4, r5, r6, pc}
    e10c:	ebffeb74 	bl	8ee4 <LeaveCritical>
    e110:	e1a00004 	mov	r0, r4
    e114:	e8bd8070 	pop	{r4, r5, r6, pc}
    e118:	ebffeb63 	bl	8eac <EnterCritical>
    e11c:	e5954018 	ldr	r4, [r5, #24]
    e120:	e5950014 	ldr	r0, [r5, #20]
    e124:	e3540000 	cmp	r4, #0
    e128:	1affffef 	bne	e0ec <palloc+0x24>
    e12c:	e5954008 	ldr	r4, [r5, #8]
    e130:	e595200c 	ldr	r2, [r5, #12]
    e134:	e2843a01 	add	r3, r4, #4096	; 0x1000
    e138:	e5853008 	str	r3, [r5, #8]
    e13c:	e1530002 	cmp	r3, r2
    e140:	9affffed 	bls	e0fc <palloc+0x34>
    e144:	e3500000 	cmp	r0, #0
    e148:	08bd8070 	popeq	{r4, r5, r6, pc}
    e14c:	ebffeb64 	bl	8ee4 <LeaveCritical>
    e150:	e3a00000 	mov	r0, #0
    e154:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e158 <pfree>:
    e158:	e92d4070 	push	{r4, r5, r6, lr}
    e15c:	e2505000 	subs	r5, r0, #0
    e160:	08bd8070 	popeq	{r4, r5, r6, pc}
    e164:	e3004580 	movw	r4, #1408	; 0x580
    e168:	e3404001 	movt	r4, #1
    e16c:	e5940014 	ldr	r0, [r4, #20]
    e170:	e3500000 	cmp	r0, #0
    e174:	1a000006 	bne	e194 <pfree+0x3c>
    e178:	e5941018 	ldr	r1, [r4, #24]
    e17c:	e3042d43 	movw	r2, #19779	; 0x4d43
    e180:	e5845018 	str	r5, [r4, #24]
    e184:	e3452047 	movt	r2, #20551	; 0x5047
    e188:	e5852000 	str	r2, [r5]
    e18c:	e5851004 	str	r1, [r5, #4]
    e190:	e8bd8070 	pop	{r4, r5, r6, pc}
    e194:	ebffeb44 	bl	8eac <EnterCritical>
    e198:	e5941014 	ldr	r1, [r4, #20]
    e19c:	e5942018 	ldr	r2, [r4, #24]
    e1a0:	e3043d43 	movw	r3, #19779	; 0x4d43
    e1a4:	e3510000 	cmp	r1, #0
    e1a8:	e3453047 	movt	r3, #20551	; 0x5047
    e1ac:	e5845018 	str	r5, [r4, #24]
    e1b0:	e5853000 	str	r3, [r5]
    e1b4:	e5852004 	str	r2, [r5, #4]
    e1b8:	08bd8070 	popeq	{r4, r5, r6, pc}
    e1bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    e1c0:	eaffeb47 	b	8ee4 <LeaveCritical>

0000e1c4 <_GLOBAL__sub_I_mem_init>:
    e1c4:	e3003580 	movw	r3, #1408	; 0x580
    e1c8:	e3403001 	movt	r3, #1
    e1cc:	e3a02001 	mov	r2, #1
    e1d0:	e5832010 	str	r2, [r3, #16]
    e1d4:	e5832014 	str	r2, [r3, #20]
    e1d8:	e12fff1e 	bx	lr

0000e1dc <CBcmMailBox::CBcmMailBox(unsigned int)>:
    e1dc:	e3a02000 	mov	r2, #0
    e1e0:	e8800006 	stm	r0, {r1, r2}
    e1e4:	e12fff1e 	bx	lr

0000e1e8 <CBcmMailBox::~CBcmMailBox()>:
    e1e8:	e12fff1e 	bx	lr

0000e1ec <CBcmMailBox::WriteRead(unsigned int)>:
    e1ec:	e92d4070 	push	{r4, r5, r6, lr}
    e1f0:	e1a05000 	mov	r5, r0
    e1f4:	e5900004 	ldr	r0, [r0, #4]
    e1f8:	e1a06001 	mov	r6, r1
    e1fc:	e3500000 	cmp	r0, #0
    e200:	1a000023 	bne	e294 <CBcmMailBox::WriteRead(unsigned int)+0xa8>
    e204:	e3a04a0b 	mov	r4, #45056	; 0xb000
    e208:	e3434f00 	movt	r4, #16128	; 0x3f00
    e20c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    e210:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e214:	1a000005 	bne	e230 <CBcmMailBox::WriteRead(unsigned int)+0x44>
    e218:	e3a00014 	mov	r0, #20
    e21c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    e220:	ebffed69 	bl	97cc <CTimer::SimpleMsDelay(unsigned int)>
    e224:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    e228:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e22c:	0afffff9 	beq	e218 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
    e230:	e3a01a0b 	mov	r1, #45056	; 0xb000
    e234:	e3431f00 	movt	r1, #16128	; 0x3f00
    e238:	e59138b8 	ldr	r3, [r1, #2232]	; 0x8b8
    e23c:	e3530000 	cmp	r3, #0
    e240:	bafffffc 	blt	e238 <CBcmMailBox::WriteRead(unsigned int)+0x4c>
    e244:	e5953000 	ldr	r3, [r5]
    e248:	e3a02a0b 	mov	r2, #45056	; 0xb000
    e24c:	e3432f00 	movt	r2, #16128	; 0x3f00
    e250:	e1866003 	orr	r6, r6, r3
    e254:	e58168a0 	str	r6, [r1, #2208]	; 0x8a0
    e258:	e5950000 	ldr	r0, [r5]
    e25c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    e260:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e264:	1afffffc 	bne	e25c <CBcmMailBox::WriteRead(unsigned int)+0x70>
    e268:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    e26c:	e203100f 	and	r1, r3, #15
    e270:	e1510000 	cmp	r1, r0
    e274:	1afffff8 	bne	e25c <CBcmMailBox::WriteRead(unsigned int)+0x70>
    e278:	e5952004 	ldr	r2, [r5, #4]
    e27c:	e3c3400f 	bic	r4, r3, #15
    e280:	e3520000 	cmp	r2, #0
    e284:	0a000000 	beq	e28c <CBcmMailBox::WriteRead(unsigned int)+0xa0>
    e288:	ebffeb15 	bl	8ee4 <LeaveCritical>
    e28c:	e1a00004 	mov	r0, r4
    e290:	e8bd8070 	pop	{r4, r5, r6, pc}
    e294:	ebffeb04 	bl	8eac <EnterCritical>
    e298:	eaffffd9 	b	e204 <CBcmMailBox::WriteRead(unsigned int)+0x18>

0000e29c <CBcmMailBox::Flush()>:
    e29c:	e92d4010 	push	{r4, lr}
    e2a0:	e3a04a0b 	mov	r4, #45056	; 0xb000
    e2a4:	e3434f00 	movt	r4, #16128	; 0x3f00
    e2a8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    e2ac:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e2b0:	18bd8010 	popne	{r4, pc}
    e2b4:	e3a00014 	mov	r0, #20
    e2b8:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    e2bc:	ebffed42 	bl	97cc <CTimer::SimpleMsDelay(unsigned int)>
    e2c0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    e2c4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e2c8:	0afffff9 	beq	e2b4 <CBcmMailBox::Flush()+0x18>
    e2cc:	e8bd8010 	pop	{r4, pc}

0000e2d0 <CBcmMailBox::Read()>:
    e2d0:	e5901000 	ldr	r1, [r0]
    e2d4:	e3a02a0b 	mov	r2, #45056	; 0xb000
    e2d8:	e3432f00 	movt	r2, #16128	; 0x3f00
    e2dc:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    e2e0:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e2e4:	1afffffc 	bne	e2dc <CBcmMailBox::Read()+0xc>
    e2e8:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    e2ec:	e200300f 	and	r3, r0, #15
    e2f0:	e1510003 	cmp	r1, r3
    e2f4:	1afffff8 	bne	e2dc <CBcmMailBox::Read()+0xc>
    e2f8:	e3c0000f 	bic	r0, r0, #15
    e2fc:	e12fff1e 	bx	lr

0000e300 <CBcmMailBox::Write(unsigned int)>:
    e300:	e3a02a0b 	mov	r2, #45056	; 0xb000
    e304:	e3432f00 	movt	r2, #16128	; 0x3f00
    e308:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    e30c:	e3530000 	cmp	r3, #0
    e310:	bafffffc 	blt	e308 <CBcmMailBox::Write(unsigned int)+0x8>
    e314:	e5903000 	ldr	r3, [r0]
    e318:	e1811003 	orr	r1, r1, r3
    e31c:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
    e320:	e12fff1e 	bx	lr

0000e324 <__aeabi_uidiv>:
    e324:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e328:	e3a02000 	mov	r2, #0
    e32c:	eb000263 	bl	ecc0 <__Divide>
    e330:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000e334 <__aeabi_uidivmod>:
    e334:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e338:	e24dd00c 	sub	sp, sp, #12
    e33c:	e28d2004 	add	r2, sp, #4
    e340:	eb00025e 	bl	ecc0 <__Divide>
    e344:	e59d1004 	ldr	r1, [sp, #4]
    e348:	e28dd00c 	add	sp, sp, #12
    e34c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000e350 <__aeabi_idiv>:
    e350:	ea000286 	b	ed70 <__DivideInteger>

0000e354 <memset>:
    e354:	e3520000 	cmp	r2, #0
    e358:	012fff1e 	bxeq	lr
    e35c:	e6af1071 	sxtb	r1, r1
    e360:	e0802002 	add	r2, r0, r2
    e364:	e1a03000 	mov	r3, r0
    e368:	e4c31001 	strb	r1, [r3], #1
    e36c:	e1530002 	cmp	r3, r2
    e370:	1afffffc 	bne	e368 <memset+0x14>
    e374:	e12fff1e 	bx	lr

0000e378 <memcmp>:
    e378:	e3520000 	cmp	r2, #0
    e37c:	0a00000e 	beq	e3bc <memcmp+0x44>
    e380:	e5d0c000 	ldrb	ip, [r0]
    e384:	e5d13000 	ldrb	r3, [r1]
    e388:	e15c0003 	cmp	ip, r3
    e38c:	ca00000c 	bgt	e3c4 <memcmp+0x4c>
    e390:	ba00000d 	blt	e3cc <memcmp+0x54>
    e394:	e0812002 	add	r2, r1, r2
    e398:	e2811001 	add	r1, r1, #1
    e39c:	ea000004 	b	e3b4 <memcmp+0x3c>
    e3a0:	e5f0c001 	ldrb	ip, [r0, #1]!
    e3a4:	e4d13001 	ldrb	r3, [r1], #1
    e3a8:	e15c0003 	cmp	ip, r3
    e3ac:	ca000004 	bgt	e3c4 <memcmp+0x4c>
    e3b0:	ba000005 	blt	e3cc <memcmp+0x54>
    e3b4:	e1510002 	cmp	r1, r2
    e3b8:	1afffff8 	bne	e3a0 <memcmp+0x28>
    e3bc:	e3a00000 	mov	r0, #0
    e3c0:	e12fff1e 	bx	lr
    e3c4:	e3a00001 	mov	r0, #1
    e3c8:	e12fff1e 	bx	lr
    e3cc:	e3e00000 	mvn	r0, #0
    e3d0:	e12fff1e 	bx	lr

0000e3d4 <strlen>:
    e3d4:	e1d010d0 	ldrsb	r1, [r0]
    e3d8:	e2803001 	add	r3, r0, #1
    e3dc:	e3510000 	cmp	r1, #0
    e3e0:	0a000003 	beq	e3f4 <strlen+0x20>
    e3e4:	e0431000 	sub	r1, r3, r0
    e3e8:	e0d320d1 	ldrsb	r2, [r3], #1
    e3ec:	e3520000 	cmp	r2, #0
    e3f0:	1afffffb 	bne	e3e4 <strlen+0x10>
    e3f4:	e1a00001 	mov	r0, r1
    e3f8:	e12fff1e 	bx	lr

0000e3fc <strcmp>:
    e3fc:	e1d030d0 	ldrsb	r3, [r0]
    e400:	e1d120d0 	ldrsb	r2, [r1]
    e404:	e3530000 	cmp	r3, #0
    e408:	1a000007 	bne	e42c <strcmp+0x30>
    e40c:	ea000008 	b	e434 <strcmp+0x38>
    e410:	e1530002 	cmp	r3, r2
    e414:	ca00000b 	bgt	e448 <strcmp+0x4c>
    e418:	ba00000c 	blt	e450 <strcmp+0x54>
    e41c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    e420:	e3530000 	cmp	r3, #0
    e424:	0a00000b 	beq	e458 <strcmp+0x5c>
    e428:	e1f120d1 	ldrsb	r2, [r1, #1]!
    e42c:	e3520000 	cmp	r2, #0
    e430:	1afffff6 	bne	e410 <strcmp+0x14>
    e434:	e1530002 	cmp	r3, r2
    e438:	ca000002 	bgt	e448 <strcmp+0x4c>
    e43c:	b3e00000 	mvnlt	r0, #0
    e440:	a3a00000 	movge	r0, #0
    e444:	e12fff1e 	bx	lr
    e448:	e3a00001 	mov	r0, #1
    e44c:	e12fff1e 	bx	lr
    e450:	e3e00000 	mvn	r0, #0
    e454:	e12fff1e 	bx	lr
    e458:	e1d120d1 	ldrsb	r2, [r1, #1]
    e45c:	e1530002 	cmp	r3, r2
    e460:	dafffff5 	ble	e43c <strcmp+0x40>
    e464:	eafffff7 	b	e448 <strcmp+0x4c>

0000e468 <strcpy>:
    e468:	e1d130d0 	ldrsb	r3, [r1]
    e46c:	e1a02000 	mov	r2, r0
    e470:	e3530000 	cmp	r3, #0
    e474:	0a000003 	beq	e488 <strcpy+0x20>
    e478:	e4c23001 	strb	r3, [r2], #1
    e47c:	e1f130d1 	ldrsb	r3, [r1, #1]!
    e480:	e3530000 	cmp	r3, #0
    e484:	1afffffb 	bne	e478 <strcpy+0x10>
    e488:	e3a03000 	mov	r3, #0
    e48c:	e5c23000 	strb	r3, [r2]
    e490:	e12fff1e 	bx	lr

0000e494 <strncpy>:
    e494:	e3520000 	cmp	r2, #0
    e498:	012fff1e 	bxeq	lr
    e49c:	e1d1c0d0 	ldrsb	ip, [r1]
    e4a0:	e35c0000 	cmp	ip, #0
    e4a4:	0a000009 	beq	e4d0 <strncpy+0x3c>
    e4a8:	e0802002 	add	r2, r0, r2
    e4ac:	e1a03000 	mov	r3, r0
    e4b0:	ea000002 	b	e4c0 <strncpy+0x2c>
    e4b4:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    e4b8:	e35c0000 	cmp	ip, #0
    e4bc:	0a000004 	beq	e4d4 <strncpy+0x40>
    e4c0:	e4c3c001 	strb	ip, [r3], #1
    e4c4:	e1530002 	cmp	r3, r2
    e4c8:	1afffff9 	bne	e4b4 <strncpy+0x20>
    e4cc:	e12fff1e 	bx	lr
    e4d0:	e1a03000 	mov	r3, r0
    e4d4:	e3a02000 	mov	r2, #0
    e4d8:	e5c32000 	strb	r2, [r3]
    e4dc:	e12fff1e 	bx	lr

0000e4e0 <strcat>:
    e4e0:	e1d030d0 	ldrsb	r3, [r0]
    e4e4:	e3530000 	cmp	r3, #0
    e4e8:	e1a03000 	mov	r3, r0
    e4ec:	0a000002 	beq	e4fc <strcat+0x1c>
    e4f0:	e1f320d1 	ldrsb	r2, [r3, #1]!
    e4f4:	e3520000 	cmp	r2, #0
    e4f8:	1afffffc 	bne	e4f0 <strcat+0x10>
    e4fc:	e1d120d0 	ldrsb	r2, [r1]
    e500:	e3520000 	cmp	r2, #0
    e504:	0a000003 	beq	e518 <strcat+0x38>
    e508:	e4c32001 	strb	r2, [r3], #1
    e50c:	e1f120d1 	ldrsb	r2, [r1, #1]!
    e510:	e3520000 	cmp	r2, #0
    e514:	1afffffb 	bne	e508 <strcat+0x28>
    e518:	e3a02000 	mov	r2, #0
    e51c:	e5c32000 	strb	r2, [r3]
    e520:	e12fff1e 	bx	lr

0000e524 <strchr>:
    e524:	e1d020d0 	ldrsb	r2, [r0]
    e528:	e3520000 	cmp	r2, #0
    e52c:	0a000009 	beq	e558 <strchr+0x34>
    e530:	e1510002 	cmp	r1, r2
    e534:	1a000002 	bne	e544 <strchr+0x20>
    e538:	ea000008 	b	e560 <strchr+0x3c>
    e53c:	e1530001 	cmp	r3, r1
    e540:	012fff1e 	bxeq	lr
    e544:	e1f030d1 	ldrsb	r3, [r0, #1]!
    e548:	e3530000 	cmp	r3, #0
    e54c:	1afffffa 	bne	e53c <strchr+0x18>
    e550:	e1a00003 	mov	r0, r3
    e554:	e12fff1e 	bx	lr
    e558:	e1a00002 	mov	r0, r2
    e55c:	e12fff1e 	bx	lr
    e560:	e12fff1e 	bx	lr

0000e564 <strtok_r>:
    e564:	e3500000 	cmp	r0, #0
    e568:	0a00002c 	beq	e620 <strtok_r+0xbc>
    e56c:	e92d4030 	push	{r4, r5, lr}
    e570:	e1d0e0d0 	ldrsb	lr, [r0]
    e574:	e35e0000 	cmp	lr, #0
    e578:	11d140d0 	ldrsbne	r4, [r1]
    e57c:	0a000024 	beq	e614 <strtok_r+0xb0>
    e580:	e3540000 	cmp	r4, #0
    e584:	0a000008 	beq	e5ac <strtok_r+0x48>
    e588:	e15e0004 	cmp	lr, r4
    e58c:	0a000019 	beq	e5f8 <strtok_r+0x94>
    e590:	e1a0c001 	mov	ip, r1
    e594:	ea000001 	b	e5a0 <strtok_r+0x3c>
    e598:	e15e0003 	cmp	lr, r3
    e59c:	0a000015 	beq	e5f8 <strtok_r+0x94>
    e5a0:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    e5a4:	e3530000 	cmp	r3, #0
    e5a8:	1afffffa 	bne	e598 <strtok_r+0x34>
    e5ac:	e35e0000 	cmp	lr, #0
    e5b0:	0a000017 	beq	e614 <strtok_r+0xb0>
    e5b4:	e1a05000 	mov	r5, r0
    e5b8:	e3540000 	cmp	r4, #0
    e5bc:	0a000008 	beq	e5e4 <strtok_r+0x80>
    e5c0:	e15e0004 	cmp	lr, r4
    e5c4:	0a00000d 	beq	e600 <strtok_r+0x9c>
    e5c8:	e1a0c001 	mov	ip, r1
    e5cc:	ea000001 	b	e5d8 <strtok_r+0x74>
    e5d0:	e15e0003 	cmp	lr, r3
    e5d4:	0a000009 	beq	e600 <strtok_r+0x9c>
    e5d8:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    e5dc:	e3530000 	cmp	r3, #0
    e5e0:	1afffffa 	bne	e5d0 <strtok_r+0x6c>
    e5e4:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    e5e8:	e35e0000 	cmp	lr, #0
    e5ec:	1afffff1 	bne	e5b8 <strtok_r+0x54>
    e5f0:	e5825000 	str	r5, [r2]
    e5f4:	e8bd8030 	pop	{r4, r5, pc}
    e5f8:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    e5fc:	eaffffdf 	b	e580 <strtok_r+0x1c>
    e600:	e3a03000 	mov	r3, #0
    e604:	e2855001 	add	r5, r5, #1
    e608:	e5453001 	strb	r3, [r5, #-1]
    e60c:	e5825000 	str	r5, [r2]
    e610:	e8bd8030 	pop	{r4, r5, pc}
    e614:	e3a00000 	mov	r0, #0
    e618:	e5820000 	str	r0, [r2]
    e61c:	e8bd8030 	pop	{r4, r5, pc}
    e620:	e5920000 	ldr	r0, [r2]
    e624:	e3500000 	cmp	r0, #0
    e628:	1affffcf 	bne	e56c <strtok_r+0x8>
    e62c:	e12fff1e 	bx	lr

0000e630 <strtoul>:
    e630:	e3510000 	cmp	r1, #0
    e634:	e92d4070 	push	{r4, r5, r6, lr}
    e638:	e2425002 	sub	r5, r2, #2
    e63c:	15810000 	strne	r0, [r1]
    e640:	e3520000 	cmp	r2, #0
    e644:	13550022 	cmpne	r5, #34	; 0x22
    e648:	e3c2e010 	bic	lr, r2, #16
    e64c:	83a05001 	movhi	r5, #1
    e650:	93a05000 	movls	r5, #0
    e654:	8a000036 	bhi	e734 <strtoul+0x104>
    e658:	e1d0c0d0 	ldrsb	ip, [r0]
    e65c:	e1a04000 	mov	r4, r0
    e660:	e2800001 	add	r0, r0, #1
    e664:	e24c3009 	sub	r3, ip, #9
    e668:	e35c0020 	cmp	ip, #32
    e66c:	e6ef3073 	uxtb	r3, r3
    e670:	0afffff8 	beq	e658 <strtoul+0x28>
    e674:	e3530004 	cmp	r3, #4
    e678:	9afffff6 	bls	e658 <strtoul+0x28>
    e67c:	e35c002b 	cmp	ip, #43	; 0x2b
    e680:	0a00002d 	beq	e73c <strtoul+0x10c>
    e684:	e35c002d 	cmp	ip, #45	; 0x2d
    e688:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
    e68c:	03a06001 	moveq	r6, #1
    e690:	01a04000 	moveq	r4, r0
    e694:	13a06000 	movne	r6, #0
    e698:	e35c0030 	cmp	ip, #48	; 0x30
    e69c:	0a00002b 	beq	e750 <strtoul+0x120>
    e6a0:	e3520000 	cmp	r2, #0
    e6a4:	03a0200a 	moveq	r2, #10
    e6a8:	e35c002f 	cmp	ip, #47	; 0x2f
    e6ac:	e1a0300c 	mov	r3, ip
    e6b0:	da00001c 	ble	e728 <strtoul+0xf8>
    e6b4:	e3a05001 	mov	r5, #1
    e6b8:	e3a0e000 	mov	lr, #0
    e6bc:	ea000007 	b	e6e0 <strtoul+0xb0>
    e6c0:	e150000e 	cmp	r0, lr
    e6c4:	e3a05000 	mov	r5, #0
    e6c8:	e1a0e000 	mov	lr, r0
    e6cc:	3a000028 	bcc	e774 <strtoul+0x144>
    e6d0:	e1f430d1 	ldrsb	r3, [r4, #1]!
    e6d4:	e353002f 	cmp	r3, #47	; 0x2f
    e6d8:	e1a0c003 	mov	ip, r3
    e6dc:	da000029 	ble	e788 <strtoul+0x158>
    e6e0:	e24cc061 	sub	ip, ip, #97	; 0x61
    e6e4:	e35c0019 	cmp	ip, #25
    e6e8:	92433020 	subls	r3, r3, #32
    e6ec:	e3530040 	cmp	r3, #64	; 0x40
    e6f0:	c2433007 	subgt	r3, r3, #7
    e6f4:	e2433030 	sub	r3, r3, #48	; 0x30
    e6f8:	e1520003 	cmp	r2, r3
    e6fc:	e020329e 	mla	r0, lr, r2, r3
    e700:	caffffee 	bgt	e6c0 <strtoul+0x90>
    e704:	e2255001 	eor	r5, r5, #1
    e708:	e1a0000e 	mov	r0, lr
    e70c:	e3510000 	cmp	r1, #0
    e710:	e0055006 	and	r5, r5, r6
    e714:	0a000000 	beq	e71c <strtoul+0xec>
    e718:	e5814000 	str	r4, [r1]
    e71c:	e3550000 	cmp	r5, #0
    e720:	12600000 	rsbne	r0, r0, #0
    e724:	e8bd8070 	pop	{r4, r5, r6, pc}
    e728:	e3510000 	cmp	r1, #0
    e72c:	13a00000 	movne	r0, #0
    e730:	1afffff8 	bne	e718 <strtoul+0xe8>
    e734:	e3a00000 	mov	r0, #0
    e738:	e8bd8070 	pop	{r4, r5, r6, pc}
    e73c:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    e740:	e3a06000 	mov	r6, #0
    e744:	e1a04000 	mov	r4, r0
    e748:	e35c0030 	cmp	ip, #48	; 0x30
    e74c:	1affffd3 	bne	e6a0 <strtoul+0x70>
    e750:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    e754:	e2840001 	add	r0, r4, #1
    e758:	e3cc3020 	bic	r3, ip, #32
    e75c:	e3530058 	cmp	r3, #88	; 0x58
    e760:	0a00000a 	beq	e790 <strtoul+0x160>
    e764:	e3520000 	cmp	r2, #0
    e768:	e1a04000 	mov	r4, r0
    e76c:	03a02008 	moveq	r2, #8
    e770:	eaffffcc 	b	e6a8 <strtoul+0x78>
    e774:	e1510005 	cmp	r1, r5
    e778:	0a00000a 	beq	e7a8 <strtoul+0x178>
    e77c:	e5814000 	str	r4, [r1]
    e780:	e3e00000 	mvn	r0, #0
    e784:	e8bd8070 	pop	{r4, r5, r6, pc}
    e788:	e3a05001 	mov	r5, #1
    e78c:	eaffffde 	b	e70c <strtoul+0xdc>
    e790:	e35e0000 	cmp	lr, #0
    e794:	1affffe6 	bne	e734 <strtoul+0x104>
    e798:	e1d4c0d2 	ldrsb	ip, [r4, #2]
    e79c:	e3a02010 	mov	r2, #16
    e7a0:	e2844002 	add	r4, r4, #2
    e7a4:	eaffffbf 	b	e6a8 <strtoul+0x78>
    e7a8:	e3e00000 	mvn	r0, #0
    e7ac:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e7b0 <char2int>:
    e7b0:	e12fff1e 	bx	lr

0000e7b4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
    e7b4:	e5903020 	ldr	r3, [r0, #32]
    e7b8:	e3a01000 	mov	r1, #0
    e7bc:	e92d4010 	push	{r4, lr}
    e7c0:	e24dd010 	sub	sp, sp, #16
    e7c4:	e3a02c01 	mov	r2, #256	; 0x100
    e7c8:	e583100c 	str	r1, [r3, #12]
    e7cc:	e5832010 	str	r2, [r3, #16]
    e7d0:	e1a04000 	mov	r4, r0
    e7d4:	e28d0008 	add	r0, sp, #8
    e7d8:	ebffe76c 	bl	8590 <CBcmPropertyTags::CBcmPropertyTags()>
    e7dc:	e5942020 	ldr	r2, [r4, #32]
    e7e0:	e3003408 	movw	r3, #1032	; 0x408
    e7e4:	e28d0008 	add	r0, sp, #8
    e7e8:	e58d3000 	str	r3, [sp]
    e7ec:	e308100b 	movw	r1, #32779	; 0x800b
    e7f0:	e3003414 	movw	r3, #1044	; 0x414
    e7f4:	e3401004 	movt	r1, #4
    e7f8:	ebffe790 	bl	8640 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e7fc:	e3500000 	cmp	r0, #0
    e800:	e28d0008 	add	r0, sp, #8
    e804:	0a000003 	beq	e818 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
    e808:	e5943020 	ldr	r3, [r4, #32]
    e80c:	e593300c 	ldr	r3, [r3, #12]
    e810:	e3530000 	cmp	r3, #0
    e814:	0a000003 	beq	e828 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
    e818:	ebffe762 	bl	85a8 <CBcmPropertyTags::~CBcmPropertyTags()>
    e81c:	e3a00000 	mov	r0, #0
    e820:	e28dd010 	add	sp, sp, #16
    e824:	e8bd8010 	pop	{r4, pc}
    e828:	ebffe75e 	bl	85a8 <CBcmPropertyTags::~CBcmPropertyTags()>
    e82c:	e3a00001 	mov	r0, #1
    e830:	e28dd010 	add	sp, sp, #16
    e834:	e8bd8010 	pop	{r4, pc}

0000e838 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
    e838:	e92d4030 	push	{r4, r5, lr}
    e83c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    e840:	e3510000 	cmp	r1, #0
    e844:	13520000 	cmpne	r2, #0
    e848:	e3a05000 	mov	r5, #0
    e84c:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
    e850:	e1a04000 	mov	r4, r0
    e854:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
    e858:	e8800006 	stm	r0, {r1, r2}
    e85c:	e5803010 	str	r3, [r0, #16]
    e860:	e580e00c 	str	lr, [r0, #12]
    e864:	e580c008 	str	ip, [r0, #8]
    e868:	e5805014 	str	r5, [r0, #20]
    e86c:	e5805018 	str	r5, [r0, #24]
    e870:	e580501c 	str	r5, [r0, #28]
    e874:	e5805020 	str	r5, [r0, #32]
    e878:	1a000011 	bne	e8c4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
    e87c:	e28d000c 	add	r0, sp, #12
    e880:	ebffe742 	bl	8590 <CBcmPropertyTags::CBcmPropertyTags()>
    e884:	e3a03014 	mov	r3, #20
    e888:	e58d5000 	str	r5, [sp]
    e88c:	e28d000c 	add	r0, sp, #12
    e890:	e3a01003 	mov	r1, #3
    e894:	e08d2003 	add	r2, sp, r3
    e898:	e3401004 	movt	r1, #4
    e89c:	ebffe767 	bl	8640 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e8a0:	e1500005 	cmp	r0, r5
    e8a4:	1a000027 	bne	e948 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
    e8a8:	e3a02d0a 	mov	r2, #640	; 0x280
    e8ac:	e3a03e1e 	mov	r3, #480	; 0x1e0
    e8b0:	e884000c 	stm	r4, {r2, r3}
    e8b4:	e28d000c 	add	r0, sp, #12
    e8b8:	ebffe73a 	bl	85a8 <CBcmPropertyTags::~CBcmPropertyTags()>
    e8bc:	e594c008 	ldr	ip, [r4, #8]
    e8c0:	e5943010 	ldr	r3, [r4, #16]
    e8c4:	e35c0000 	cmp	ip, #0
    e8c8:	0a00001a 	beq	e938 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
    e8cc:	e594200c 	ldr	r2, [r4, #12]
    e8d0:	e3520000 	cmp	r2, #0
    e8d4:	0a000017 	beq	e938 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
    e8d8:	e3530008 	cmp	r3, #8
    e8dc:	8a000007 	bhi	e900 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
    e8e0:	e3000414 	movw	r0, #1044	; 0x414
    e8e4:	ebffe96b 	bl	8e98 <operator new[](unsigned int)>
    e8e8:	e3a02b01 	mov	r2, #1024	; 0x400
    e8ec:	e3a01000 	mov	r1, #0
    e8f0:	e5840020 	str	r0, [r4, #32]
    e8f4:	e2800014 	add	r0, r0, #20
    e8f8:	ebfffe95 	bl	e354 <memset>
    e8fc:	e5943010 	ldr	r3, [r4, #16]
    e900:	e5945000 	ldr	r5, [r4]
    e904:	e3002478 	movw	r2, #1144	; 0x478
    e908:	e594e004 	ldr	lr, [r4, #4]
    e90c:	e3402001 	movt	r2, #1
    e910:	e594c008 	ldr	ip, [r4, #8]
    e914:	e1a00004 	mov	r0, r4
    e918:	e594100c 	ldr	r1, [r4, #12]
    e91c:	e582500c 	str	r5, [r2, #12]
    e920:	e582e010 	str	lr, [r2, #16]
    e924:	e582c020 	str	ip, [r2, #32]
    e928:	e5821024 	str	r1, [r2, #36]	; 0x24
    e92c:	e5823034 	str	r3, [r2, #52]	; 0x34
    e930:	e28dd02c 	add	sp, sp, #44	; 0x2c
    e934:	e8bd8030 	pop	{r4, r5, pc}
    e938:	e8940006 	ldm	r4, {r1, r2}
    e93c:	e5841008 	str	r1, [r4, #8]
    e940:	e584200c 	str	r2, [r4, #12]
    e944:	eaffffe3 	b	e8d8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
    e948:	e59d2020 	ldr	r2, [sp, #32]
    e94c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    e950:	e2420d0a 	sub	r0, r2, #640	; 0x280
    e954:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
    e958:	e5842000 	str	r2, [r4]
    e95c:	e3510f96 	cmp	r1, #600	; 0x258
    e960:	93500c05 	cmpls	r0, #1280	; 0x500
    e964:	e5843004 	str	r3, [r4, #4]
    e968:	9affffd1 	bls	e8b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
    e96c:	eaffffcd 	b	e8a8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

0000e970 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
    e970:	e92d4010 	push	{r4, lr}
    e974:	e3a01014 	mov	r1, #20
    e978:	e1a04000 	mov	r4, r0
    e97c:	e5900020 	ldr	r0, [r0, #32]
    e980:	ebffe947 	bl	8ea4 <operator delete(void*, unsigned int)>
    e984:	e1a00004 	mov	r0, r4
    e988:	e8bd8010 	pop	{r4, pc}

0000e98c <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
    e98c:	e5903010 	ldr	r3, [r0, #16]
    e990:	e3530008 	cmp	r3, #8
    e994:	812fff1e 	bxhi	lr
    e998:	e5900020 	ldr	r0, [r0, #32]
    e99c:	e1a03982 	lsl	r3, r2, #19
    e9a0:	e1a0c5a2 	lsr	ip, r2, #11
    e9a4:	e203373e 	and	r3, r3, #16252928	; 0xf80000
    e9a8:	e0801101 	add	r1, r0, r1, lsl #2
    e9ac:	e1a02282 	lsl	r2, r2, #5
    e9b0:	e183318c 	orr	r3, r3, ip, lsl #3
    e9b4:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
    e9b8:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
    e9bc:	e1822003 	orr	r2, r2, r3
    e9c0:	e5812014 	str	r2, [r1, #20]
    e9c4:	e12fff1e 	bx	lr

0000e9c8 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
    e9c8:	e5903010 	ldr	r3, [r0, #16]
    e9cc:	e3530008 	cmp	r3, #8
    e9d0:	95903020 	ldrls	r3, [r0, #32]
    e9d4:	90831101 	addls	r1, r3, r1, lsl #2
    e9d8:	95812014 	strls	r2, [r1, #20]
    e9dc:	e12fff1e 	bx	lr

0000e9e0 <CBcmFrameBuffer::Initialize()>:
    e9e0:	e92d4070 	push	{r4, r5, r6, lr}
    e9e4:	e24dd008 	sub	sp, sp, #8
    e9e8:	e3006478 	movw	r6, #1144	; 0x478
    e9ec:	e3406001 	movt	r6, #1
    e9f0:	e1a05000 	mov	r5, r0
    e9f4:	e1a0000d 	mov	r0, sp
    e9f8:	ebffe6e4 	bl	8590 <CBcmPropertyTags::CBcmPropertyTags()>
    e9fc:	e1a01006 	mov	r1, r6
    ea00:	e1a0000d 	mov	r0, sp
    ea04:	e3a02070 	mov	r2, #112	; 0x70
    ea08:	ebffe6eb 	bl	85bc <CBcmPropertyTags::GetTags(void*, unsigned int)>
    ea0c:	e2504000 	subs	r4, r0, #0
    ea10:	0a00001e 	beq	ea90 <CBcmFrameBuffer::Initialize()+0xb0>
    ea14:	e596400c 	ldr	r4, [r6, #12]
    ea18:	e3540000 	cmp	r4, #0
    ea1c:	0a00001b 	beq	ea90 <CBcmFrameBuffer::Initialize()+0xb0>
    ea20:	e5964010 	ldr	r4, [r6, #16]
    ea24:	e3540000 	cmp	r4, #0
    ea28:	0a000018 	beq	ea90 <CBcmFrameBuffer::Initialize()+0xb0>
    ea2c:	e5964020 	ldr	r4, [r6, #32]
    ea30:	e3540000 	cmp	r4, #0
    ea34:	0a000015 	beq	ea90 <CBcmFrameBuffer::Initialize()+0xb0>
    ea38:	e5964024 	ldr	r4, [r6, #36]	; 0x24
    ea3c:	e3540000 	cmp	r4, #0
    ea40:	0a000012 	beq	ea90 <CBcmFrameBuffer::Initialize()+0xb0>
    ea44:	e5964034 	ldr	r4, [r6, #52]	; 0x34
    ea48:	e3540000 	cmp	r4, #0
    ea4c:	0a00000f 	beq	ea90 <CBcmFrameBuffer::Initialize()+0xb0>
    ea50:	e5964058 	ldr	r4, [r6, #88]	; 0x58
    ea54:	e3540000 	cmp	r4, #0
    ea58:	0a00000c 	beq	ea90 <CBcmFrameBuffer::Initialize()+0xb0>
    ea5c:	e5951010 	ldr	r1, [r5, #16]
    ea60:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
    ea64:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
    ea68:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
    ea6c:	e3510008 	cmp	r1, #8
    ea70:	e5854014 	str	r4, [r5, #20]
    ea74:	e5852018 	str	r2, [r5, #24]
    ea78:	83a04001 	movhi	r4, #1
    ea7c:	e585301c 	str	r3, [r5, #28]
    ea80:	8a000002 	bhi	ea90 <CBcmFrameBuffer::Initialize()+0xb0>
    ea84:	e1a00005 	mov	r0, r5
    ea88:	ebffff49 	bl	e7b4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
    ea8c:	e1a04000 	mov	r4, r0
    ea90:	e1a0000d 	mov	r0, sp
    ea94:	ebffe6c3 	bl	85a8 <CBcmPropertyTags::~CBcmPropertyTags()>
    ea98:	e1a00004 	mov	r0, r4
    ea9c:	e28dd008 	add	sp, sp, #8
    eaa0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000eaa4 <CBcmFrameBuffer::GetWidth() const>:
    eaa4:	e5900000 	ldr	r0, [r0]
    eaa8:	e12fff1e 	bx	lr

0000eaac <CBcmFrameBuffer::GetHeight() const>:
    eaac:	e5900004 	ldr	r0, [r0, #4]
    eab0:	e12fff1e 	bx	lr

0000eab4 <CBcmFrameBuffer::GetVirtWidth() const>:
    eab4:	e5900008 	ldr	r0, [r0, #8]
    eab8:	e12fff1e 	bx	lr

0000eabc <CBcmFrameBuffer::GetVirtHeight() const>:
    eabc:	e590000c 	ldr	r0, [r0, #12]
    eac0:	e12fff1e 	bx	lr

0000eac4 <CBcmFrameBuffer::GetPitch() const>:
    eac4:	e590001c 	ldr	r0, [r0, #28]
    eac8:	e12fff1e 	bx	lr

0000eacc <CBcmFrameBuffer::GetDepth() const>:
    eacc:	e5900010 	ldr	r0, [r0, #16]
    ead0:	e12fff1e 	bx	lr

0000ead4 <CBcmFrameBuffer::GetBuffer() const>:
    ead4:	e5900014 	ldr	r0, [r0, #20]
    ead8:	e12fff1e 	bx	lr

0000eadc <CBcmFrameBuffer::GetSize() const>:
    eadc:	e5900018 	ldr	r0, [r0, #24]
    eae0:	e12fff1e 	bx	lr

0000eae4 <CBcmFrameBuffer::UpdatePalette()>:
    eae4:	e5903010 	ldr	r3, [r0, #16]
    eae8:	e3530008 	cmp	r3, #8
    eaec:	9a000001 	bls	eaf8 <CBcmFrameBuffer::UpdatePalette()+0x14>
    eaf0:	e3a00001 	mov	r0, #1
    eaf4:	e12fff1e 	bx	lr
    eaf8:	eaffff2d 	b	e7b4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0000eafc <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
    eafc:	e92d4070 	push	{r4, r5, r6, lr}
    eb00:	e24dd028 	sub	sp, sp, #40	; 0x28
    eb04:	e28d000c 	add	r0, sp, #12
    eb08:	e1a05001 	mov	r5, r1
    eb0c:	e1a06002 	mov	r6, r2
    eb10:	ebffe69e 	bl	8590 <CBcmPropertyTags::CBcmPropertyTags()>
    eb14:	e3a03008 	mov	r3, #8
    eb18:	e28d000c 	add	r0, sp, #12
    eb1c:	e58d3000 	str	r3, [sp]
    eb20:	e3081009 	movw	r1, #32777	; 0x8009
    eb24:	e3a03014 	mov	r3, #20
    eb28:	e3401004 	movt	r1, #4
    eb2c:	e08d2003 	add	r2, sp, r3
    eb30:	e58d5020 	str	r5, [sp, #32]
    eb34:	e58d6024 	str	r6, [sp, #36]	; 0x24
    eb38:	ebffe6c0 	bl	8640 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    eb3c:	e2504000 	subs	r4, r0, #0
    eb40:	0a000006 	beq	eb60 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
    eb44:	e59d3020 	ldr	r3, [sp, #32]
    eb48:	e1550003 	cmp	r5, r3
    eb4c:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
    eb50:	13a04000 	movne	r4, #0
    eb54:	00444006 	subeq	r4, r4, r6
    eb58:	016f4f14 	clzeq	r4, r4
    eb5c:	01a042a4 	lsreq	r4, r4, #5
    eb60:	e28d000c 	add	r0, sp, #12
    eb64:	ebffe68f 	bl	85a8 <CBcmPropertyTags::~CBcmPropertyTags()>
    eb68:	e1a00004 	mov	r0, r4
    eb6c:	e28dd028 	add	sp, sp, #40	; 0x28
    eb70:	e8bd8070 	pop	{r4, r5, r6, pc}

0000eb74 <CDevice::~CDevice()>:
    eb74:	e12fff1e 	bx	lr

0000eb78 <CDevice::Read(void*, unsigned int)>:
    eb78:	e3e00000 	mvn	r0, #0
    eb7c:	e12fff1e 	bx	lr

0000eb80 <CDevice::Seek(unsigned long long)>:
    eb80:	e3e00000 	mvn	r0, #0
    eb84:	e3e01000 	mvn	r1, #0
    eb88:	e12fff1e 	bx	lr

0000eb8c <CDevice::~CDevice()>:
    eb8c:	e92d4010 	push	{r4, lr}
    eb90:	e3a01004 	mov	r1, #4
    eb94:	e1a04000 	mov	r4, r0
    eb98:	ebffe8c1 	bl	8ea4 <operator delete(void*, unsigned int)>
    eb9c:	e1a00004 	mov	r0, r4
    eba0:	e8bd8010 	pop	{r4, pc}

0000eba4 <CDevice::CDevice()>:
    eba4:	e59f3004 	ldr	r3, [pc, #4]	; ebb0 <CDevice::CDevice()+0xc>
    eba8:	e5803000 	str	r3, [r0]
    ebac:	e12fff1e 	bx	lr
    ebb0:	00010350 	.word	0x00010350

0000ebb4 <UndefinedInstructionStub>:
    ebb4:	e24ee004 	sub	lr, lr, #4
    ebb8:	e92d4000 	stmfd	sp!, {lr}
    ebbc:	e14fe000 	mrs	lr, SPSR
    ebc0:	e92d4000 	stmfd	sp!, {lr}
    ebc4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    ebc8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    ebcc:	e1a0100d 	mov	r1, sp
    ebd0:	f1020012 	cps	#18
    ebd4:	e1a0200d 	mov	r2, sp
    ebd8:	e1a0300e 	mov	r3, lr
    ebdc:	f102001f 	cps	#31
    ebe0:	e1a0d001 	mov	sp, r1
    ebe4:	e92d000c 	push	{r2, r3}
    ebe8:	e1a0100d 	mov	r1, sp
    ebec:	e3a00001 	mov	r0, #1
    ebf0:	ea0000da 	b	ef60 <ExceptionHandler>

0000ebf4 <PrefetchAbortStub>:
    ebf4:	e24ee004 	sub	lr, lr, #4
    ebf8:	e92d4000 	stmfd	sp!, {lr}
    ebfc:	e14fe000 	mrs	lr, SPSR
    ec00:	e92d4000 	stmfd	sp!, {lr}
    ec04:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    ec08:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    ec0c:	e1a0100d 	mov	r1, sp
    ec10:	f1020012 	cps	#18
    ec14:	e1a0200d 	mov	r2, sp
    ec18:	e1a0300e 	mov	r3, lr
    ec1c:	f102001f 	cps	#31
    ec20:	e1a0d001 	mov	sp, r1
    ec24:	e92d000c 	push	{r2, r3}
    ec28:	e1a0100d 	mov	r1, sp
    ec2c:	e3a00002 	mov	r0, #2
    ec30:	ea0000ca 	b	ef60 <ExceptionHandler>

0000ec34 <DataAbortStub>:
    ec34:	e24ee008 	sub	lr, lr, #8
    ec38:	e92d4000 	stmfd	sp!, {lr}
    ec3c:	e14fe000 	mrs	lr, SPSR
    ec40:	e92d4000 	stmfd	sp!, {lr}
    ec44:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    ec48:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    ec4c:	e1a0100d 	mov	r1, sp
    ec50:	f1020012 	cps	#18
    ec54:	e1a0200d 	mov	r2, sp
    ec58:	e1a0300e 	mov	r3, lr
    ec5c:	f102001f 	cps	#31
    ec60:	e1a0d001 	mov	sp, r1
    ec64:	e92d000c 	push	{r2, r3}
    ec68:	e1a0100d 	mov	r1, sp
    ec6c:	e3a00003 	mov	r0, #3
    ec70:	ea0000ba 	b	ef60 <ExceptionHandler>

0000ec74 <IRQStub>:
    ec74:	e24ee004 	sub	lr, lr, #4
    ec78:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ec7c:	ebfffa0e 	bl	d4bc <InterruptHandler>
    ec80:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000ec84 <FIQStub>:
    ec84:	e24ee004 	sub	lr, lr, #4
    ec88:	e92d400f 	push	{r0, r1, r2, r3, lr}
    ec8c:	e59f2024 	ldr	r2, [pc, #36]	; ecb8 <FIQStub+0x34>
    ec90:	e5921000 	ldr	r1, [r2]
    ec94:	e3510000 	cmp	r1, #0
    ec98:	0a000002 	beq	eca8 <FIQStub+0x24>
    ec9c:	e5920004 	ldr	r0, [r2, #4]
    eca0:	e12fff31 	blx	r1
    eca4:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    eca8:	e59f100c 	ldr	r1, [pc, #12]	; ecbc <FIQStub+0x38>
    ecac:	e3a00000 	mov	r0, #0
    ecb0:	e5810000 	str	r0, [r1]
    ecb4:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    ecb8:	000104e8 	.word	0x000104e8
    ecbc:	3f00b20c 	.word	0x3f00b20c

0000ecc0 <__Divide>:
    ecc0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ecc4:	e2514000 	subs	r4, r1, #0
    ecc8:	e1a08000 	mov	r8, r0
    eccc:	e1a09002 	mov	r9, r2
    ecd0:	0a000020 	beq	ed58 <__Divide+0x98>
    ecd4:	e3a05000 	mov	r5, #0
    ecd8:	e3a07000 	mov	r7, #0
    ecdc:	e1550007 	cmp	r5, r7
    ece0:	e1a06008 	mov	r6, r8
    ece4:	01540008 	cmpeq	r4, r8
    ece8:	2a00001e 	bcs	ed68 <__Divide+0xa8>
    ecec:	e3a03001 	mov	r3, #1
    ecf0:	ea000000 	b	ecf8 <__Divide+0x38>
    ecf4:	e1a03000 	mov	r3, r0
    ecf8:	e0944004 	adds	r4, r4, r4
    ecfc:	e2830001 	add	r0, r3, #1
    ed00:	e0a55005 	adc	r5, r5, r5
    ed04:	e1550007 	cmp	r5, r7
    ed08:	01540006 	cmpeq	r4, r6
    ed0c:	3afffff8 	bcc	ecf4 <__Divide+0x34>
    ed10:	e3500000 	cmp	r0, #0
    ed14:	0a00000c 	beq	ed4c <__Divide+0x8c>
    ed18:	e3a00000 	mov	r0, #0
    ed1c:	e1570005 	cmp	r7, r5
    ed20:	e2433001 	sub	r3, r3, #1
    ed24:	01560004 	cmpeq	r6, r4
    ed28:	e1a00080 	lsl	r0, r0, #1
    ed2c:	20488004 	subcs	r8, r8, r4
    ed30:	23800001 	orrcs	r0, r0, #1
    ed34:	e1b050a5 	lsrs	r5, r5, #1
    ed38:	e1a04064 	rrx	r4, r4
    ed3c:	e3730001 	cmn	r3, #1
    ed40:	e1a06008 	mov	r6, r8
    ed44:	e3a07000 	mov	r7, #0
    ed48:	1afffff3 	bne	ed1c <__Divide+0x5c>
    ed4c:	e3590000 	cmp	r9, #0
    ed50:	15898000 	strne	r8, [r9]
    ed54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ed58:	eb00007c 	bl	ef50 <CExceptionHandler::Get()>
    ed5c:	e1a01004 	mov	r1, r4
    ed60:	eb00003b 	bl	ee54 <CExceptionHandler::Throw(unsigned int)>
    ed64:	eaffffda 	b	ecd4 <__Divide+0x14>
    ed68:	e3a03000 	mov	r3, #0
    ed6c:	eaffffe9 	b	ed18 <__Divide+0x58>

0000ed70 <__DivideInteger>:
    ed70:	e2502000 	subs	r2, r0, #0
    ed74:	e92d4010 	push	{r4, lr}
    ed78:	ba000004 	blt	ed90 <__DivideInteger+0x20>
    ed7c:	e3510000 	cmp	r1, #0
    ed80:	ba00000e 	blt	edc0 <__DivideInteger+0x50>
    ed84:	e3a02000 	mov	r2, #0
    ed88:	e8bd4010 	pop	{r4, lr}
    ed8c:	eaffffcb 	b	ecc0 <__Divide>
    ed90:	e3510000 	cmp	r1, #0
    ed94:	ba000004 	blt	edac <__DivideInteger+0x3c>
    ed98:	e2620000 	rsb	r0, r2, #0
    ed9c:	e3a02000 	mov	r2, #0
    eda0:	ebffffc6 	bl	ecc0 <__Divide>
    eda4:	e2600000 	rsb	r0, r0, #0
    eda8:	e8bd8010 	pop	{r4, pc}
    edac:	e2620000 	rsb	r0, r2, #0
    edb0:	e2611000 	rsb	r1, r1, #0
    edb4:	e3a02000 	mov	r2, #0
    edb8:	e8bd4010 	pop	{r4, lr}
    edbc:	eaffffbf 	b	ecc0 <__Divide>
    edc0:	e2611000 	rsb	r1, r1, #0
    edc4:	e3a02000 	mov	r2, #0
    edc8:	ebffffbc 	bl	ecc0 <__Divide>
    edcc:	e2600000 	rsb	r0, r0, #0
    edd0:	e8bd8010 	pop	{r4, pc}

0000edd4 <CExceptionHandler::CExceptionHandler()>:
    edd4:	e59f1058 	ldr	r1, [pc, #88]	; ee34 <CExceptionHandler::CExceptionHandler()+0x60>
    edd8:	e3a0c000 	mov	ip, #0
    eddc:	e59f2054 	ldr	r2, [pc, #84]	; ee38 <CExceptionHandler::CExceptionHandler()+0x64>
    ede0:	e59f3054 	ldr	r3, [pc, #84]	; ee3c <CExceptionHandler::CExceptionHandler()+0x68>
    ede4:	e92d4010 	push	{r4, lr}
    ede8:	e1a01141 	asr	r1, r1, #2
    edec:	e300e59c 	movw	lr, #1436	; 0x59c
    edf0:	e1a02142 	asr	r2, r2, #2
    edf4:	e340e001 	movt	lr, #1
    edf8:	e1a03143 	asr	r3, r3, #2
    edfc:	e2411002 	sub	r1, r1, #2
    ee00:	e2422002 	sub	r2, r2, #2
    ee04:	e2433002 	sub	r3, r3, #2
    ee08:	e58e0000 	str	r0, [lr]
    ee0c:	e1a04000 	mov	r4, r0
    ee10:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    ee14:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    ee18:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    ee1c:	e58c1004 	str	r1, [ip, #4]
    ee20:	e58c200c 	str	r2, [ip, #12]
    ee24:	e58c3010 	str	r3, [ip, #16]
    ee28:	ebffe837 	bl	8f0c <SyncDataAndInstructionCache>
    ee2c:	e1a00004 	mov	r0, r4
    ee30:	e8bd8010 	pop	{r4, pc}
    ee34:	0000ebb0 	.word	0x0000ebb0
    ee38:	0000ebe8 	.word	0x0000ebe8
    ee3c:	0000ec24 	.word	0x0000ec24

0000ee40 <CExceptionHandler::~CExceptionHandler()>:
    ee40:	e300359c 	movw	r3, #1436	; 0x59c
    ee44:	e3403001 	movt	r3, #1
    ee48:	e3a02000 	mov	r2, #0
    ee4c:	e5832000 	str	r2, [r3]
    ee50:	e12fff1e 	bx	lr

0000ee54 <CExceptionHandler::Throw(unsigned int)>:
    ee54:	e92d4010 	push	{r4, lr}
    ee58:	e24dd008 	sub	sp, sp, #8
    ee5c:	e1a04001 	mov	r4, r1
    ee60:	ebfff211 	bl	b6ac <CLogger::Get()>
    ee64:	e30024f0 	movw	r2, #1264	; 0x4f0
    ee68:	e3402001 	movt	r2, #1
    ee6c:	e300336c 	movw	r3, #876	; 0x36c
    ee70:	e3001364 	movw	r1, #868	; 0x364
    ee74:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    ee78:	e3403001 	movt	r3, #1
    ee7c:	e3401001 	movt	r1, #1
    ee80:	e3a02000 	mov	r2, #0
    ee84:	e58dc000 	str	ip, [sp]
    ee88:	ebfff2e3 	bl	ba1c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ee8c:	e28dd008 	add	sp, sp, #8
    ee90:	e8bd8010 	pop	{r4, pc}

0000ee94 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    ee94:	e3510002 	cmp	r1, #2
    ee98:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    ee9c:	e1a05001 	mov	r5, r1
    eea0:	e24dd024 	sub	sp, sp, #36	; 0x24
    eea4:	e1a04002 	mov	r4, r2
    eea8:	0a000025 	beq	ef44 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
    eeac:	e3510003 	cmp	r1, #3
    eeb0:	0a000020 	beq	ef38 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
    eeb4:	e3a08000 	mov	r8, #0
    eeb8:	e1a09008 	mov	r9, r8
    eebc:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    eec0:	e3001364 	movw	r1, #868	; 0x364
    eec4:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    eec8:	e3401001 	movt	r1, #1
    eecc:	e203301f 	and	r3, r3, #31
    eed0:	e5947040 	ldr	r7, [r4, #64]	; 0x40
    eed4:	e3530012 	cmp	r3, #18
    eed8:	089400c0 	ldmeq	r4, {r6, r7}
    eedc:	e1a00006 	mov	r0, r6
    eee0:	ebfff140 	bl	b3e8 <debug_stacktrace(unsigned int const*, char const*)>
    eee4:	ebfff1f0 	bl	b6ac <CLogger::Get()>
    eee8:	e30034f0 	movw	r3, #1264	; 0x4f0
    eeec:	e3403001 	movt	r3, #1
    eef0:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    eef4:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    eef8:	e3a02000 	mov	r2, #0
    eefc:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    ef00:	e3001364 	movw	r1, #868	; 0x364
    ef04:	e58d7014 	str	r7, [sp, #20]
    ef08:	e3401001 	movt	r1, #1
    ef0c:	e58d6010 	str	r6, [sp, #16]
    ef10:	e300337c 	movw	r3, #892	; 0x37c
    ef14:	e58d800c 	str	r8, [sp, #12]
    ef18:	e3403001 	movt	r3, #1
    ef1c:	e58d9008 	str	r9, [sp, #8]
    ef20:	e58d4000 	str	r4, [sp]
    ef24:	e58de018 	str	lr, [sp, #24]
    ef28:	e58dc004 	str	ip, [sp, #4]
    ef2c:	ebfff2ba 	bl	ba1c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ef30:	e28dd024 	add	sp, sp, #36	; 0x24
    ef34:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    ef38:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
    ef3c:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
    ef40:	eaffffdd 	b	eebc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    ef44:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
    ef48:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
    ef4c:	eaffffda 	b	eebc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>

0000ef50 <CExceptionHandler::Get()>:
    ef50:	e300359c 	movw	r3, #1436	; 0x59c
    ef54:	e3403001 	movt	r3, #1
    ef58:	e5930000 	ldr	r0, [r3]
    ef5c:	e12fff1e 	bx	lr

0000ef60 <ExceptionHandler>:
    ef60:	e300359c 	movw	r3, #1436	; 0x59c
    ef64:	e3403001 	movt	r3, #1
    ef68:	e1a02001 	mov	r2, r1
    ef6c:	e1a01000 	mov	r1, r0
    ef70:	e5930000 	ldr	r0, [r3]
    ef74:	eaffffc6 	b	ee94 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
