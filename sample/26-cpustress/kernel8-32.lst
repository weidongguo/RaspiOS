
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea0008f9 	b	a44c <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

00008070 <main>:
    8070:	e92d4010 	push	{r4, lr}
    8074:	e24ddd72 	sub	sp, sp, #7296	; 0x1c80
    8078:	e24dd020 	sub	sp, sp, #32
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb000012 	bl	80d0 <CKernel::CKernel()>
    8084:	e28d0004 	add	r0, sp, #4
    8088:	eb000053 	bl	81dc <CKernel::Initialize()>
    808c:	e2504000 	subs	r4, r0, #0
    8090:	0a000004 	beq	80a8 <main+0x38>
    8094:	e28d0004 	add	r0, sp, #4
    8098:	eb00007a 	bl	8288 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	13a04000 	movne	r4, #0
    80a4:	0a000006 	beq	80c4 <main+0x54>
    80a8:	eb0008d9 	bl	a414 <halt>
    80ac:	e28d0004 	add	r0, sp, #4
    80b0:	eb000089 	bl	82dc <CKernel::~CKernel()>
    80b4:	e1a00004 	mov	r0, r4
    80b8:	e28ddd72 	add	sp, sp, #7296	; 0x1c80
    80bc:	e28dd020 	add	sp, sp, #32
    80c0:	e8bd8010 	pop	{r4, pc}
    80c4:	eb0008d7 	bl	a428 <reboot>
    80c8:	e3a04001 	mov	r4, #1
    80cc:	eafffff6 	b	80ac <main+0x3c>

000080d0 <CKernel::CKernel()>:
    80d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    80d4:	e3a01001 	mov	r1, #1
    80d8:	e1a04000 	mov	r4, r0
    80dc:	e2809010 	add	r9, r0, #16
    80e0:	e284701c 	add	r7, r4, #28
    80e4:	eb00083f 	bl	a1e8 <CMemorySystem::CMemorySystem(int)>
    80e8:	e1a00009 	mov	r0, r9
    80ec:	eb0003dd 	bl	9068 <CActLED::CActLED()>
    80f0:	e1a00007 	mov	r0, r7
    80f4:	eb000d61 	bl	b680 <CKernelOptions::CKernelOptions()>
    80f8:	e2840e85 	add	r0, r4, #2128	; 0x850
    80fc:	e280000c 	add	r0, r0, #12
    8100:	e2845d22 	add	r5, r4, #2176	; 0x880
    8104:	eb00141c 	bl	d17c <CDeviceNameService::CDeviceNameService()>
    8108:	e2840e86 	add	r0, r4, #2144	; 0x860
    810c:	e3a01002 	mov	r1, #2
    8110:	e2800004 	add	r0, r0, #4
    8114:	eb0021f2 	bl	108e4 <CCPUThrottle::CCPUThrottle(TCPUSpeed)>
    8118:	e1a00007 	mov	r0, r7
    811c:	eb000d23 	bl	b5b0 <CKernelOptions::GetWidth() const>
    8120:	e2855004 	add	r5, r5, #4
    8124:	e1a06000 	mov	r6, r0
    8128:	e1a00007 	mov	r0, r7
    812c:	eb000d21 	bl	b5b8 <CKernelOptions::GetHeight() const>
    8130:	e3a03000 	mov	r3, #0
    8134:	e1a01006 	mov	r1, r6
    8138:	e1a02000 	mov	r2, r0
    813c:	e1a00005 	mov	r0, r5
    8140:	e2848d66 	add	r8, r4, #6528	; 0x1980
    8144:	eb000f16 	bl	bda4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8148:	e3a02000 	mov	r2, #0
    814c:	e2840e8e 	add	r0, r4, #2272	; 0x8e0
    8150:	e1a01002 	mov	r1, r2
    8154:	e2800004 	add	r0, r0, #4
    8158:	e2846d6f 	add	r6, r4, #7104	; 0x1bc0
    815c:	eb001637 	bl	da40 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>
    8160:	e2880034 	add	r0, r8, #52	; 0x34
    8164:	e2888038 	add	r8, r8, #56	; 0x38
    8168:	eb001bc7 	bl	f08c <CExceptionHandler::CExceptionHandler()>
    816c:	e2866038 	add	r6, r6, #56	; 0x38
    8170:	e1a00008 	mov	r0, r8
    8174:	eb001c9d 	bl	f3f0 <CInterruptSystem::CInterruptSystem()>
    8178:	e1a01008 	mov	r1, r8
    817c:	e1a00006 	mov	r0, r6
    8180:	eb0008dc 	bl	a4f8 <CTimer::CTimer(CInterruptSystem*)>
    8184:	e1a00007 	mov	r0, r7
    8188:	eb000d0f 	bl	b5cc <CKernelOptions::GetLogLevel() const>
    818c:	e1a01000 	mov	r1, r0
    8190:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8194:	e1a02006 	mov	r2, r6
    8198:	e2800020 	add	r0, r0, #32
    819c:	eb0014a5 	bl	d438 <CLogger::CLogger(unsigned int, CTimer*)>
    81a0:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    81a4:	e280003c 	add	r0, r0, #60	; 0x3c
    81a8:	eb0001e7 	bl	894c <CScheduler::CScheduler()>
    81ac:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    81b0:	e1a02004 	mov	r2, r4
    81b4:	e1a01005 	mov	r1, r5
    81b8:	e2800018 	add	r0, r0, #24
    81bc:	eb00006e 	bl	837c <CMandelbrotCalculator::CMandelbrotCalculator(CScreenDevice*, CMemorySystem*)>
    81c0:	e1a00009 	mov	r0, r9
    81c4:	e3a03f7d 	mov	r3, #500	; 0x1f4
    81c8:	e3a020c8 	mov	r2, #200	; 0xc8
    81cc:	e3a01005 	mov	r1, #5
    81d0:	eb0003eb 	bl	9184 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    81d4:	e1a00004 	mov	r0, r4
    81d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000081dc <CKernel::Initialize()>:
    81dc:	e92d4070 	push	{r4, r5, r6, lr}
    81e0:	e2804d22 	add	r4, r0, #2176	; 0x880
    81e4:	e2844004 	add	r4, r4, #4
    81e8:	e1a05000 	mov	r5, r0
    81ec:	e1a00004 	mov	r0, r4
    81f0:	eb001299 	bl	cc5c <CScreenDevice::Initialize()>
    81f4:	e3500000 	cmp	r0, #0
    81f8:	1a000001 	bne	8204 <CKernel::Initialize()+0x28>
    81fc:	e3a00000 	mov	r0, #0
    8200:	e8bd8070 	pop	{r4, r5, r6, pc}
    8204:	e2850e8e 	add	r0, r5, #2272	; 0x8e0
    8208:	e3a01cc2 	mov	r1, #49664	; 0xc200
    820c:	e3401001 	movt	r1, #1
    8210:	e2800004 	add	r0, r0, #4
    8214:	eb001638 	bl	dafc <CSerialDevice::Initialize(unsigned int)>
    8218:	e3500000 	cmp	r0, #0
    821c:	0afffff6 	beq	81fc <CKernel::Initialize()+0x20>
    8220:	e285001c 	add	r0, r5, #28
    8224:	eb000ce5 	bl	b5c0 <CKernelOptions::GetLogDevice() const>
    8228:	e1a01000 	mov	r1, r0
    822c:	e2850e85 	add	r0, r5, #2128	; 0x850
    8230:	e3a02000 	mov	r2, #0
    8234:	e280000c 	add	r0, r0, #12
    8238:	eb00142c 	bl	d2f0 <CDeviceNameService::GetDevice(char const*, int)>
    823c:	e3500000 	cmp	r0, #0
    8240:	11a01000 	movne	r1, r0
    8244:	e2850b07 	add	r0, r5, #7168	; 0x1c00
    8248:	01a01004 	moveq	r1, r4
    824c:	e2800020 	add	r0, r0, #32
    8250:	eb00157f 	bl	d854 <CLogger::Initialize(CDevice*)>
    8254:	e3500000 	cmp	r0, #0
    8258:	0affffe7 	beq	81fc <CKernel::Initialize()+0x20>
    825c:	e2850d66 	add	r0, r5, #6528	; 0x1980
    8260:	e2800038 	add	r0, r0, #56	; 0x38
    8264:	eb001c74 	bl	f43c <CInterruptSystem::Initialize()>
    8268:	e3500000 	cmp	r0, #0
    826c:	0affffe2 	beq	81fc <CKernel::Initialize()+0x20>
    8270:	e2850d6f 	add	r0, r5, #7104	; 0x1bc0
    8274:	e2800038 	add	r0, r0, #56	; 0x38
    8278:	eb000b0b 	bl	aeac <CTimer::Initialize()>
    827c:	e2900000 	adds	r0, r0, #0
    8280:	13a00001 	movne	r0, #1
    8284:	e8bd8070 	pop	{r4, r5, r6, pc}

00008288 <CKernel::Run()>:
    8288:	e92d4010 	push	{r4, lr}
    828c:	e1a04000 	mov	r4, r0
    8290:	e2800b07 	add	r0, r0, #7168	; 0x1c00
    8294:	e3a02003 	mov	r2, #3
    8298:	e2800020 	add	r0, r0, #32
    829c:	e3013c0c 	movw	r3, #7180	; 0x1c0c
    82a0:	e3403001 	movt	r3, #1
    82a4:	e3011c04 	movw	r1, #7172	; 0x1c04
    82a8:	e3401001 	movt	r1, #1
    82ac:	eb00155c 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    82b0:	e3a00054 	mov	r0, #84	; 0x54
    82b4:	eb000805 	bl	a2d0 <operator new(unsigned int)>
    82b8:	e2841d22 	add	r1, r4, #2176	; 0x880
    82bc:	e2811004 	add	r1, r1, #4
    82c0:	eb000114 	bl	8718 <CTemperatureTask::CTemperatureTask(CScreenDevice*)>
    82c4:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    82c8:	e2800018 	add	r0, r0, #24
    82cc:	e3a01000 	mov	r1, #0
    82d0:	eb000087 	bl	84f4 <CMandelbrotCalculator::Run(unsigned int)>
    82d4:	e3a00001 	mov	r0, #1
    82d8:	e8bd8010 	pop	{r4, pc}

000082dc <CKernel::~CKernel()>:
    82dc:	e92d4010 	push	{r4, lr}
    82e0:	e1a04000 	mov	r4, r0
    82e4:	e2800d72 	add	r0, r0, #7296	; 0x1c80
    82e8:	e2800018 	add	r0, r0, #24
    82ec:	eb000024 	bl	8384 <CMandelbrotCalculator::~CMandelbrotCalculator()>
    82f0:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    82f4:	e280003c 	add	r0, r0, #60	; 0x3c
    82f8:	eb0001f6 	bl	8ad8 <CScheduler::~CScheduler()>
    82fc:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8300:	e2800020 	add	r0, r0, #32
    8304:	eb00145e 	bl	d484 <CLogger::~CLogger()>
    8308:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    830c:	e2800038 	add	r0, r0, #56	; 0x38
    8310:	eb000898 	bl	a578 <CTimer::~CTimer()>
    8314:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8318:	e2800038 	add	r0, r0, #56	; 0x38
    831c:	eb001c41 	bl	f428 <CInterruptSystem::~CInterruptSystem()>
    8320:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8324:	e2800034 	add	r0, r0, #52	; 0x34
    8328:	eb001b7b 	bl	f11c <CExceptionHandler::~CExceptionHandler()>
    832c:	e2840e8e 	add	r0, r4, #2272	; 0x8e0
    8330:	e2800004 	add	r0, r0, #4
    8334:	eb00177d 	bl	e130 <CSerialDevice::~CSerialDevice()>
    8338:	e2840d22 	add	r0, r4, #2176	; 0x880
    833c:	e2800004 	add	r0, r0, #4
    8340:	eb000e4a 	bl	bc70 <CScreenDevice::~CScreenDevice()>
    8344:	e2840e86 	add	r0, r4, #2144	; 0x860
    8348:	e2800004 	add	r0, r0, #4
    834c:	eb002225 	bl	10be8 <CCPUThrottle::~CCPUThrottle()>
    8350:	e2840e85 	add	r0, r4, #2128	; 0x850
    8354:	e280000c 	add	r0, r0, #12
    8358:	eb00139a 	bl	d1c8 <CDeviceNameService::~CDeviceNameService()>
    835c:	e284001c 	add	r0, r4, #28
    8360:	eb000c8d 	bl	b59c <CKernelOptions::~CKernelOptions()>
    8364:	e2840010 	add	r0, r4, #16
    8368:	eb000319 	bl	8fd4 <CActLED::~CActLED()>
    836c:	e1a00004 	mov	r0, r4
    8370:	eb000738 	bl	a058 <CMemorySystem::~CMemorySystem()>
    8374:	e1a00004 	mov	r0, r4
    8378:	e8bd8010 	pop	{r4, pc}

0000837c <CMandelbrotCalculator::CMandelbrotCalculator(CScreenDevice*, CMemorySystem*)>:
    837c:	e5801000 	str	r1, [r0]
    8380:	e12fff1e 	bx	lr

00008384 <CMandelbrotCalculator::~CMandelbrotCalculator()>:
    8384:	e12fff1e 	bx	lr

00008388 <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
    8388:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    838c:	e1a04001 	mov	r4, r1
    8390:	ed2d8b0c 	vpush	{d8-d13}
    8394:	e59d9058 	ldr	r9, [sp, #88]	; 0x58
    8398:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    839c:	e089b001 	add	fp, r9, r1
    83a0:	e159000b 	cmp	r9, fp
    83a4:	2a00004e 	bcs	84e4 <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
    83a8:	ee083a10 	vmov	s16, r3
    83ac:	eeb0ab40 	vmov.f64	d10, d0
    83b0:	eeb0bb41 	vmov.f64	d11, d1
    83b4:	eeb0cb42 	vmov.f64	d12, d2
    83b8:	eeb09b43 	vmov.f64	d9, d3
    83bc:	e1a07000 	mov	r7, r0
    83c0:	e1a0a002 	mov	sl, r2
    83c4:	e0826003 	add	r6, r2, r3
    83c8:	e1a08009 	mov	r8, r9
    83cc:	e156000a 	cmp	r6, sl
    83d0:	81a0500a 	movhi	r5, sl
    83d4:	9a000007 	bls	83f8 <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>
    83d8:	e1a01005 	mov	r1, r5
    83dc:	e3a03000 	mov	r3, #0
    83e0:	e1a02008 	mov	r2, r8
    83e4:	e5970000 	ldr	r0, [r7]
    83e8:	e2855001 	add	r5, r5, #1
    83ec:	eb00127b 	bl	cde0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    83f0:	e1560005 	cmp	r6, r5
    83f4:	1afffff7 	bne	83d8 <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x50>
    83f8:	e2888001 	add	r8, r8, #1
    83fc:	e158000b 	cmp	r8, fp
    8400:	1afffff1 	bne	83cc <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
    8404:	eddd7a17 	vldr	s15, [sp, #92]	; 0x5c
    8408:	eef81b48 	vcvt.f64.u32	d17, s16
    840c:	ee3bbb4a 	vsub.f64	d11, d11, d10
    8410:	ee792b4c 	vsub.f64	d18, d9, d12
    8414:	f280de30 	vmov.i64	d13, #0x0000000000000000
    8418:	eef80b67 	vcvt.f64.u32	d16, s15
    841c:	ee8b8b21 	vdiv.f64	d8, d11, d17
    8420:	ee829ba0 	vdiv.f64	d9, d18, d16
    8424:	e156000a 	cmp	r6, sl
    8428:	81a0500a 	movhi	r5, sl
    842c:	8eb0bb4a 	vmovhi.f64	d11, d10
    8430:	9a000025 	bls	84cc <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x144>
    8434:	e3540000 	cmp	r4, #0
    8438:	0a00002b 	beq	84ec <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x164>
    843c:	eef02b4d 	vmov.f64	d18, d13
    8440:	f2c03e30 	vmov.i64	d19, #0x0000000000000000
    8444:	eef01b4d 	vmov.f64	d17, d13
    8448:	eef00b4d 	vmov.f64	d16, d13
    844c:	e3a02000 	mov	r2, #0
    8450:	eef15b00 	vmov.f64	d21, #16	; 0x40800000  4.0
    8454:	ee700ba0 	vadd.f64	d16, d16, d16
    8458:	ee711be2 	vsub.f64	d17, d17, d18
    845c:	eef02b4c 	vmov.f64	d18, d12
    8460:	e2822001 	add	r2, r2, #1
    8464:	eee02ba3 	vfma.f64	d18, d16, d19
    8468:	ee710b8b 	vadd.f64	d16, d17, d11
    846c:	ee601ba0 	vmul.f64	d17, d16, d16
    8470:	eef03b62 	vmov.f64	d19, d18
    8474:	ee622ba2 	vmul.f64	d18, d18, d18
    8478:	ee714ba2 	vadd.f64	d20, d17, d18
    847c:	eef44be5 	vcmpe.f64	d20, d21
    8480:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8484:	53a03001 	movpl	r3, #1
    8488:	43a03000 	movmi	r3, #0
    848c:	e1540002 	cmp	r4, r2
    8490:	93833001 	orrls	r3, r3, #1
    8494:	e3530000 	cmp	r3, #0
    8498:	0affffed 	beq	8454 <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xcc>
    849c:	e0623802 	rsb	r3, r2, r2, lsl #16
    84a0:	e733f413 	udiv	r3, r3, r4
    84a4:	e1a01005 	mov	r1, r5
    84a8:	e1a02009 	mov	r2, r9
    84ac:	e5970000 	ldr	r0, [r7]
    84b0:	e2855001 	add	r5, r5, #1
    84b4:	e2833001 	add	r3, r3, #1
    84b8:	e6ff3073 	uxth	r3, r3
    84bc:	eb001247 	bl	cde0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    84c0:	e1560005 	cmp	r6, r5
    84c4:	ee3bbb08 	vadd.f64	d11, d11, d8
    84c8:	1affffd9 	bne	8434 <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
    84cc:	eb0002af 	bl	8f90 <CScheduler::Get()>
    84d0:	e2899001 	add	r9, r9, #1
    84d4:	eb0001ff 	bl	8cd8 <CScheduler::Yield()>
    84d8:	e1580009 	cmp	r8, r9
    84dc:	ee3ccb09 	vadd.f64	d12, d12, d9
    84e0:	1affffcf 	bne	8424 <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x9c>
    84e4:	ecbd8b0c 	vpop	{d8-d13}
    84e8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84ec:	e1a03004 	mov	r3, r4
    84f0:	eaffffea 	b	84a0 <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x118>

000084f4 <CMandelbrotCalculator::Run(unsigned int)>:
    84f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    84f8:	e1a04000 	mov	r4, r0
    84fc:	e3a06000 	mov	r6, #0
    8500:	e24dd00c 	sub	sp, sp, #12
    8504:	e5940000 	ldr	r0, [r4]
    8508:	eb000e43 	bl	be1c <CScreenDevice::GetWidth() const>
    850c:	e1a05000 	mov	r5, r0
    8510:	e5940000 	ldr	r0, [r4]
    8514:	eb000e42 	bl	be24 <CScreenDevice::GetHeight() const>
    8518:	eeb73b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    851c:	e2400064 	sub	r0, r0, #100	; 0x64
    8520:	e1a03005 	mov	r3, r5
    8524:	e58d0004 	str	r0, [sp, #4]
    8528:	e3a02000 	mov	r2, #0
    852c:	e58d6000 	str	r6, [sp]
    8530:	eeb01b43 	vmov.f64	d1, d3
    8534:	e3011388 	movw	r1, #5000	; 0x1388
    8538:	eebf2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
    853c:	eeb80b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
    8540:	e1a00004 	mov	r0, r4
    8544:	ebffff8f 	bl	8388 <CMandelbrotCalculator::Calculate(double, double, double, double, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8548:	eaffffed 	b	8504 <CMandelbrotCalculator::Run(unsigned int)+0x10>

0000854c <CTemperatureTask::~CTemperatureTask()>:
    854c:	e59f3014 	ldr	r3, [pc, #20]	; 8568 <CTemperatureTask::~CTemperatureTask()+0x1c>
    8550:	e92d4010 	push	{r4, lr}
    8554:	e1a04000 	mov	r4, r0
    8558:	e5803000 	str	r3, [r0]
    855c:	eb00007e 	bl	875c <CTask::~CTask()>
    8560:	e1a00004 	mov	r0, r4
    8564:	e8bd8010 	pop	{r4, pc}
    8568:	00011c38 	.word	0x00011c38

0000856c <CTemperatureTask::~CTemperatureTask()>:
    856c:	e59f3020 	ldr	r3, [pc, #32]	; 8594 <CTemperatureTask::~CTemperatureTask()+0x28>
    8570:	e92d4010 	push	{r4, lr}
    8574:	e1a04000 	mov	r4, r0
    8578:	e5803000 	str	r3, [r0]
    857c:	eb000076 	bl	875c <CTask::~CTask()>
    8580:	e1a00004 	mov	r0, r4
    8584:	e3a01054 	mov	r1, #84	; 0x54
    8588:	eb000754 	bl	a2e0 <operator delete(void*, unsigned int)>
    858c:	e1a00004 	mov	r0, r4
    8590:	e8bd8010 	pop	{r4, pc}
    8594:	00011c38 	.word	0x00011c38

00008598 <CTemperatureTask::Run()>:
    8598:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    859c:	e1a06000 	mov	r6, r0
    85a0:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    85a4:	e3500000 	cmp	r0, #0
    85a8:	1a000006 	bne	85c8 <CTemperatureTask::Run()+0x30>
    85ac:	e3011c50 	movw	r1, #7248	; 0x1c50
    85b0:	e3401001 	movt	r1, #1
    85b4:	e3010c60 	movw	r0, #7264	; 0x1c60
    85b8:	e3400001 	movt	r0, #1
    85bc:	e3a0202b 	mov	r2, #43	; 0x2b
    85c0:	eb001236 	bl	cea0 <assertion_failed>
    85c4:	e5960050 	ldr	r0, [r6, #80]	; 0x50
    85c8:	e301ac70 	movw	sl, #7280	; 0x1c70
    85cc:	e340a001 	movt	sl, #1
    85d0:	e3a09000 	mov	r9, #0
    85d4:	e30f8fdf 	movw	r8, #65503	; 0xffdf
    85d8:	eb000e0f 	bl	be1c <CScreenDevice::GetWidth() const>
    85dc:	e1590000 	cmp	r9, r0
    85e0:	31a07009 	movcc	r7, r9
    85e4:	23a09001 	movcs	r9, #1
    85e8:	32899001 	addcc	r9, r9, #1
    85ec:	23a07000 	movcs	r7, #0
    85f0:	eb001fbe 	bl	104f0 <CCPUThrottle::Get()>
    85f4:	eb002006 	bl	10614 <CCPUThrottle::GetTemperature() const>
    85f8:	e2505000 	subs	r5, r0, #0
    85fc:	0a00002f 	beq	86c0 <CTemperatureTask::Run()+0x128>
    8600:	e3550063 	cmp	r5, #99	; 0x63
    8604:	23a05063 	movcs	r5, #99	; 0x63
    8608:	e3a04000 	mov	r4, #0
    860c:	e5960050 	ldr	r0, [r6, #80]	; 0x50
    8610:	eb000e03 	bl	be24 <CScreenDevice::GetHeight() const>
    8614:	e2402001 	sub	r2, r0, #1
    8618:	e0422004 	sub	r2, r2, r4
    861c:	e3a0301f 	mov	r3, #31
    8620:	e1a01007 	mov	r1, r7
    8624:	e2844001 	add	r4, r4, #1
    8628:	e355004f 	cmp	r5, #79	; 0x4f
    862c:	9a000002 	bls	863c <CTemperatureTask::Run()+0xa4>
    8630:	e3550054 	cmp	r5, #84	; 0x54
    8634:	83a05b3e 	movhi	r5, #63488	; 0xf800
    8638:	91a05008 	movls	r5, r8
    863c:	e5960050 	ldr	r0, [r6, #80]	; 0x50
    8640:	eb0011e6 	bl	cde0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    8644:	e1550004 	cmp	r5, r4
    8648:	2affffef 	bcs	860c <CTemperatureTask::Run()+0x74>
    864c:	e3a04000 	mov	r4, #0
    8650:	e5960050 	ldr	r0, [r6, #80]	; 0x50
    8654:	eb000df2 	bl	be24 <CScreenDevice::GetHeight() const>
    8658:	e2402001 	sub	r2, r0, #1
    865c:	e0422004 	sub	r2, r2, r4
    8660:	e30f3fdf 	movw	r3, #65503	; 0xffdf
    8664:	e2844014 	add	r4, r4, #20
    8668:	e1a01007 	mov	r1, r7
    866c:	e5960050 	ldr	r0, [r6, #80]	; 0x50
    8670:	eb0011da 	bl	cde0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    8674:	e3540064 	cmp	r4, #100	; 0x64
    8678:	1afffff4 	bne	8650 <CTemperatureTask::Run()+0xb8>
    867c:	e5964050 	ldr	r4, [r6, #80]	; 0x50
    8680:	e1a00004 	mov	r0, r4
    8684:	eb000de6 	bl	be24 <CScreenDevice::GetHeight() const>
    8688:	e1a01007 	mov	r1, r7
    868c:	e2402056 	sub	r2, r0, #86	; 0x56
    8690:	e3a03b3e 	mov	r3, #63488	; 0xf800
    8694:	e1a00004 	mov	r0, r4
    8698:	eb0011d0 	bl	cde0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    869c:	eb001f93 	bl	104f0 <CCPUThrottle::Get()>
    86a0:	eb002124 	bl	10b38 <CCPUThrottle::SetOnTemperature()>
    86a4:	e2504000 	subs	r4, r0, #0
    86a8:	0a00000e 	beq	86e8 <CTemperatureTask::Run()+0x150>
    86ac:	eb000237 	bl	8f90 <CScheduler::Get()>
    86b0:	e3a01002 	mov	r1, #2
    86b4:	eb0001f0 	bl	8e7c <CScheduler::Sleep(unsigned int)>
    86b8:	e5960050 	ldr	r0, [r6, #80]	; 0x50
    86bc:	eaffffc5 	b	85d8 <CTemperatureTask::Run()+0x40>
    86c0:	eb001f8a 	bl	104f0 <CCPUThrottle::Get()>
    86c4:	e1a01005 	mov	r1, r5
    86c8:	e3a02001 	mov	r2, #1
    86cc:	eb002135 	bl	10ba8 <CCPUThrottle::SetSpeed(TCPUSpeed, int)>
    86d0:	eb001377 	bl	d4b4 <CLogger::Get()>
    86d4:	e1a0300a 	mov	r3, sl
    86d8:	e1a02005 	mov	r2, r5
    86dc:	e59f1030 	ldr	r1, [pc, #48]	; 8714 <CTemperatureTask::Run()+0x17c>
    86e0:	eb00144f 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    86e4:	eaffffc7 	b	8608 <CTemperatureTask::Run()+0x70>
    86e8:	eb001f80 	bl	104f0 <CCPUThrottle::Get()>
    86ec:	e1a01004 	mov	r1, r4
    86f0:	e3a02001 	mov	r2, #1
    86f4:	eb00212b 	bl	10ba8 <CCPUThrottle::SetSpeed(TCPUSpeed, int)>
    86f8:	eb00136d 	bl	d4b4 <CLogger::Get()>
    86fc:	e1a02004 	mov	r2, r4
    8700:	e3013c8c 	movw	r3, #7308	; 0x1c8c
    8704:	e3403001 	movt	r3, #1
    8708:	e59f1004 	ldr	r1, [pc, #4]	; 8714 <CTemperatureTask::Run()+0x17c>
    870c:	eb001444 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8710:	eaffffe5 	b	86ac <CTemperatureTask::Run()+0x114>
    8714:	00011c44 	.word	0x00011c44

00008718 <CTemperatureTask::CTemperatureTask(CScreenDevice*)>:
    8718:	e92d4070 	push	{r4, r5, r6, lr}
    871c:	e1a04000 	mov	r4, r0
    8720:	e1a05001 	mov	r5, r1
    8724:	e3a01901 	mov	r1, #16384	; 0x4000
    8728:	eb00005b 	bl	889c <CTask::CTask(unsigned int)>
    872c:	e59f300c 	ldr	r3, [pc, #12]	; 8740 <CTemperatureTask::CTemperatureTask(CScreenDevice*)+0x28>
    8730:	e5845050 	str	r5, [r4, #80]	; 0x50
    8734:	e1a00004 	mov	r0, r4
    8738:	e5843000 	str	r3, [r4]
    873c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8740:	00011c38 	.word	0x00011c38

00008744 <CTask::Run()>:
    8744:	e3011c54 	movw	r1, #7252	; 0x1c54
    8748:	e30306f8 	movw	r0, #14072	; 0x36f8
    874c:	e3401001 	movt	r1, #1
    8750:	e3400001 	movt	r0, #1
    8754:	e3a02036 	mov	r2, #54	; 0x36
    8758:	ea0011d0 	b	cea0 <assertion_failed>

0000875c <CTask::~CTask()>:
    875c:	e5d02004 	ldrb	r2, [r0, #4]
    8760:	e59f3048 	ldr	r3, [pc, #72]	; 87b0 <CTask::~CTask()+0x54>
    8764:	e3520003 	cmp	r2, #3
    8768:	e92d4010 	push	{r4, lr}
    876c:	e1a04000 	mov	r4, r0
    8770:	e5803000 	str	r3, [r0]
    8774:	0a000005 	beq	8790 <CTask::~CTask()+0x34>
    8778:	e3011c54 	movw	r1, #7252	; 0x1c54
    877c:	e3010cc4 	movw	r0, #7364	; 0x1cc4
    8780:	e3401001 	movt	r1, #1
    8784:	e3400001 	movt	r0, #1
    8788:	e3a0202d 	mov	r2, #45	; 0x2d
    878c:	eb0011c3 	bl	cea0 <assertion_failed>
    8790:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
    8794:	e3a03004 	mov	r3, #4
    8798:	e5c43004 	strb	r3, [r4, #4]
    879c:	e3500000 	cmp	r0, #0
    87a0:	0a000000 	beq	87a8 <CTask::~CTask()+0x4c>
    87a4:	eb0006cc 	bl	a2dc <operator delete[](void*)>
    87a8:	e1a00004 	mov	r0, r4
    87ac:	e8bd8010 	pop	{r4, pc}
    87b0:	00011cb8 	.word	0x00011cb8

000087b4 <CTask::~CTask()>:
    87b4:	e92d4010 	push	{r4, lr}
    87b8:	e1a04000 	mov	r4, r0
    87bc:	ebffffe6 	bl	875c <CTask::~CTask()>
    87c0:	e1a00004 	mov	r0, r4
    87c4:	e3a01050 	mov	r1, #80	; 0x50
    87c8:	eb0006c4 	bl	a2e0 <operator delete(void*, unsigned int)>
    87cc:	e1a00004 	mov	r0, r4
    87d0:	e8bd8010 	pop	{r4, pc}

000087d4 <CTask::TaskEntry(void*)>:
    87d4:	e92d4010 	push	{r4, lr}
    87d8:	e2504000 	subs	r4, r0, #0
    87dc:	0a00000e 	beq	881c <CTask::TaskEntry(void*)+0x48>
    87e0:	e5943000 	ldr	r3, [r4]
    87e4:	e1a00004 	mov	r0, r4
    87e8:	e5933008 	ldr	r3, [r3, #8]
    87ec:	e12fff33 	blx	r3
    87f0:	e3a03003 	mov	r3, #3
    87f4:	e5c43004 	strb	r3, [r4, #4]
    87f8:	eb0001e4 	bl	8f90 <CScheduler::Get()>
    87fc:	eb000135 	bl	8cd8 <CScheduler::Yield()>
    8800:	e3011c54 	movw	r1, #7252	; 0x1c54
    8804:	e30306f8 	movw	r0, #14072	; 0x36f8
    8808:	e3401001 	movt	r1, #1
    880c:	e3400001 	movt	r0, #1
    8810:	e3a0204f 	mov	r2, #79	; 0x4f
    8814:	e8bd4010 	pop	{r4, lr}
    8818:	ea0011a0 	b	cea0 <assertion_failed>
    881c:	e3011c54 	movw	r1, #7252	; 0x1c54
    8820:	e3010ce4 	movw	r0, #7396	; 0x1ce4
    8824:	e3401001 	movt	r1, #1
    8828:	e3400001 	movt	r0, #1
    882c:	e3a02048 	mov	r2, #72	; 0x48
    8830:	eb00119a 	bl	cea0 <assertion_failed>
    8834:	eaffffe9 	b	87e0 <CTask::TaskEntry(void*)+0xc>

00008838 <CTask::InitializeRegs()>:
    8838:	e92d4010 	push	{r4, lr}
    883c:	e3a0203c 	mov	r2, #60	; 0x3c
    8840:	e1a04000 	mov	r4, r0
    8844:	e3a01000 	mov	r1, #0
    8848:	e280000c 	add	r0, r0, #12
    884c:	eb000a0d 	bl	b088 <memset>
    8850:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    8854:	e584400c 	str	r4, [r4, #12]
    8858:	e3530000 	cmp	r3, #0
    885c:	0a000006 	beq	887c <CTask::InitializeRegs()+0x44>
    8860:	e5941048 	ldr	r1, [r4, #72]	; 0x48
    8864:	e30827d4 	movw	r2, #34772	; 0x87d4
    8868:	e3402000 	movt	r2, #0
    886c:	e5842044 	str	r2, [r4, #68]	; 0x44
    8870:	e0833001 	add	r3, r3, r1
    8874:	e5843040 	str	r3, [r4, #64]	; 0x40
    8878:	e8bd8010 	pop	{r4, pc}
    887c:	e3011c54 	movw	r1, #7252	; 0x1c54
    8880:	e3010cf0 	movw	r0, #7408	; 0x1cf0
    8884:	e3401001 	movt	r1, #1
    8888:	e3400001 	movt	r0, #1
    888c:	e3a0203f 	mov	r2, #63	; 0x3f
    8890:	eb001182 	bl	cea0 <assertion_failed>
    8894:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    8898:	eafffff0 	b	8860 <CTask::InitializeRegs()+0x28>

0000889c <CTask::CTask(unsigned int)>:
    889c:	e59f20a4 	ldr	r2, [pc, #164]	; 8948 <CTask::CTask(unsigned int)+0xac>
    88a0:	e3510000 	cmp	r1, #0
    88a4:	e92d4010 	push	{r4, lr}
    88a8:	e3a03000 	mov	r3, #0
    88ac:	e1a04000 	mov	r4, r0
    88b0:	e5801048 	str	r1, [r0, #72]	; 0x48
    88b4:	e5802000 	str	r2, [r0]
    88b8:	e5c03004 	strb	r3, [r0, #4]
    88bc:	e580304c 	str	r3, [r0, #76]	; 0x4c
    88c0:	0a000008 	beq	88e8 <CTask::CTask(unsigned int)+0x4c>
    88c4:	e3510b01 	cmp	r1, #1024	; 0x400
    88c8:	3a00000b 	bcc	88fc <CTask::CTask(unsigned int)+0x60>
    88cc:	e3110003 	tst	r1, #3
    88d0:	1a000012 	bne	8920 <CTask::CTask(unsigned int)+0x84>
    88d4:	e1a00001 	mov	r0, r1
    88d8:	eb00067d 	bl	a2d4 <operator new[](unsigned int)>
    88dc:	e584004c 	str	r0, [r4, #76]	; 0x4c
    88e0:	e1a00004 	mov	r0, r4
    88e4:	ebffffd3 	bl	8838 <CTask::InitializeRegs()>
    88e8:	eb0001a8 	bl	8f90 <CScheduler::Get()>
    88ec:	e1a01004 	mov	r1, r4
    88f0:	eb00002f 	bl	89b4 <CScheduler::AddTask(CTask*)>
    88f4:	e1a00004 	mov	r0, r4
    88f8:	e8bd8010 	pop	{r4, pc}
    88fc:	e3011c54 	movw	r1, #7252	; 0x1c54
    8900:	e3010d00 	movw	r0, #7424	; 0x1d00
    8904:	e3401001 	movt	r1, #1
    8908:	e3400001 	movt	r0, #1
    890c:	e3a02020 	mov	r2, #32
    8910:	eb001162 	bl	cea0 <assertion_failed>
    8914:	e5941048 	ldr	r1, [r4, #72]	; 0x48
    8918:	e3110003 	tst	r1, #3
    891c:	0affffec 	beq	88d4 <CTask::CTask(unsigned int)+0x38>
    8920:	e3a02021 	mov	r2, #33	; 0x21
    8924:	e3011c54 	movw	r1, #7252	; 0x1c54
    8928:	e3010d18 	movw	r0, #7448	; 0x1d18
    892c:	e3401001 	movt	r1, #1
    8930:	e3400001 	movt	r0, #1
    8934:	eb001159 	bl	cea0 <assertion_failed>
    8938:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    893c:	eb000664 	bl	a2d4 <operator new[](unsigned int)>
    8940:	e584004c 	str	r0, [r4, #76]	; 0x4c
    8944:	eaffffe5 	b	88e0 <CTask::CTask(unsigned int)+0x44>
    8948:	00011cb8 	.word	0x00011cb8

0000894c <CScheduler::CScheduler()>:
    894c:	e92d4070 	push	{r4, r5, r6, lr}
    8950:	e3035f44 	movw	r5, #16196	; 0x3f44
    8954:	e3405001 	movt	r5, #1
    8958:	e3a03000 	mov	r3, #0
    895c:	e1a04000 	mov	r4, r0
    8960:	e5803050 	str	r3, [r0, #80]	; 0x50
    8964:	e5952000 	ldr	r2, [r5]
    8968:	e5803054 	str	r3, [r0, #84]	; 0x54
    896c:	e1520003 	cmp	r2, r3
    8970:	e5803058 	str	r3, [r0, #88]	; 0x58
    8974:	0a000005 	beq	8990 <CScheduler::CScheduler()+0x44>
    8978:	e3011d38 	movw	r1, #7480	; 0x1d38
    897c:	e3010d48 	movw	r0, #7496	; 0x1d48
    8980:	e3401001 	movt	r1, #1
    8984:	e3400001 	movt	r0, #1
    8988:	e3a02022 	mov	r2, #34	; 0x22
    898c:	eb001143 	bl	cea0 <assertion_failed>
    8990:	e3a00050 	mov	r0, #80	; 0x50
    8994:	e5854000 	str	r4, [r5]
    8998:	eb00064c 	bl	a2d0 <operator new(unsigned int)>
    899c:	e3a01000 	mov	r1, #0
    89a0:	e1a05000 	mov	r5, r0
    89a4:	ebffffbc 	bl	889c <CTask::CTask(unsigned int)>
    89a8:	e5845054 	str	r5, [r4, #84]	; 0x54
    89ac:	e1a00004 	mov	r0, r4
    89b0:	e8bd8070 	pop	{r4, r5, r6, pc}

000089b4 <CScheduler::AddTask(CTask*)>:
    89b4:	e92d4070 	push	{r4, r5, r6, lr}
    89b8:	e2515000 	subs	r5, r1, #0
    89bc:	e1a04000 	mov	r4, r0
    89c0:	0a00001d 	beq	8a3c <CScheduler::AddTask(CTask*)+0x88>
    89c4:	e5940050 	ldr	r0, [r4, #80]	; 0x50
    89c8:	e3500000 	cmp	r0, #0
    89cc:	0a000021 	beq	8a58 <CScheduler::AddTask(CTask*)+0xa4>
    89d0:	e5943000 	ldr	r3, [r4]
    89d4:	e3530000 	cmp	r3, #0
    89d8:	11a02004 	movne	r2, r4
    89dc:	13a03000 	movne	r3, #0
    89e0:	1a000003 	bne	89f4 <CScheduler::AddTask(CTask*)+0x40>
    89e4:	ea000009 	b	8a10 <CScheduler::AddTask(CTask*)+0x5c>
    89e8:	e5b21004 	ldr	r1, [r2, #4]!
    89ec:	e3510000 	cmp	r1, #0
    89f0:	0a000006 	beq	8a10 <CScheduler::AddTask(CTask*)+0x5c>
    89f4:	e2833001 	add	r3, r3, #1
    89f8:	e1530000 	cmp	r3, r0
    89fc:	1afffff9 	bne	89e8 <CScheduler::AddTask(CTask*)+0x34>
    8a00:	e3530014 	cmp	r3, #20
    8a04:	0a000003 	beq	8a18 <CScheduler::AddTask(CTask*)+0x64>
    8a08:	e2832001 	add	r2, r3, #1
    8a0c:	e5842050 	str	r2, [r4, #80]	; 0x50
    8a10:	e7845103 	str	r5, [r4, r3, lsl #2]
    8a14:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a18:	eb0012a5 	bl	d4b4 <CLogger::Get()>
    8a1c:	e3013d64 	movw	r3, #7524	; 0x1d64
    8a20:	e3011d30 	movw	r1, #7472	; 0x1d30
    8a24:	e3403001 	movt	r3, #1
    8a28:	e3401001 	movt	r1, #1
    8a2c:	e3a02000 	mov	r2, #0
    8a30:	eb00137b 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8a34:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    8a38:	eafffff2 	b	8a08 <CScheduler::AddTask(CTask*)+0x54>
    8a3c:	e3011d38 	movw	r1, #7480	; 0x1d38
    8a40:	e3010d58 	movw	r0, #7512	; 0x1d58
    8a44:	e3401001 	movt	r1, #1
    8a48:	e3400001 	movt	r0, #1
    8a4c:	e3a02075 	mov	r2, #117	; 0x75
    8a50:	eb001112 	bl	cea0 <assertion_failed>
    8a54:	eaffffda 	b	89c4 <CScheduler::AddTask(CTask*)+0x10>
    8a58:	e1a03000 	mov	r3, r0
    8a5c:	eaffffe9 	b	8a08 <CScheduler::AddTask(CTask*)+0x54>

00008a60 <CScheduler::RemoveTask(CTask*)>:
    8a60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8a64:	e590e050 	ldr	lr, [r0, #80]	; 0x50
    8a68:	e35e0000 	cmp	lr, #0
    8a6c:	0a00000b 	beq	8aa0 <CScheduler::RemoveTask(CTask*)+0x40>
    8a70:	e5903000 	ldr	r3, [r0]
    8a74:	e1510003 	cmp	r1, r3
    8a78:	11a02000 	movne	r2, r0
    8a7c:	13a03000 	movne	r3, #0
    8a80:	1a000003 	bne	8a94 <CScheduler::RemoveTask(CTask*)+0x34>
    8a84:	ea00000c 	b	8abc <CScheduler::RemoveTask(CTask*)+0x5c>
    8a88:	e5b2c004 	ldr	ip, [r2, #4]!
    8a8c:	e15c0001 	cmp	ip, r1
    8a90:	0a00000a 	beq	8ac0 <CScheduler::RemoveTask(CTask*)+0x60>
    8a94:	e2833001 	add	r3, r3, #1
    8a98:	e153000e 	cmp	r3, lr
    8a9c:	1afffff9 	bne	8a88 <CScheduler::RemoveTask(CTask*)+0x28>
    8aa0:	e3011d38 	movw	r1, #7480	; 0x1d38
    8aa4:	e30306f8 	movw	r0, #14072	; 0x36f8
    8aa8:	e3401001 	movt	r1, #1
    8aac:	e3400001 	movt	r0, #1
    8ab0:	e3a0209b 	mov	r2, #155	; 0x9b
    8ab4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    8ab8:	ea0010f8 	b	cea0 <assertion_failed>
    8abc:	e3a03000 	mov	r3, #0
    8ac0:	e24ee001 	sub	lr, lr, #1
    8ac4:	e3a02000 	mov	r2, #0
    8ac8:	e15e0003 	cmp	lr, r3
    8acc:	e7802103 	str	r2, [r0, r3, lsl #2]
    8ad0:	05803050 	streq	r3, [r0, #80]	; 0x50
    8ad4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008ad8 <CScheduler::~CScheduler()>:
    8ad8:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    8adc:	e92d4010 	push	{r4, lr}
    8ae0:	e3530001 	cmp	r3, #1
    8ae4:	e1a04000 	mov	r4, r0
    8ae8:	0a000005 	beq	8b04 <CScheduler::~CScheduler()+0x2c>
    8aec:	e3011d38 	movw	r1, #7480	; 0x1d38
    8af0:	e3010d84 	movw	r0, #7556	; 0x1d84
    8af4:	e3401001 	movt	r1, #1
    8af8:	e3400001 	movt	r0, #1
    8afc:	e3a0202b 	mov	r2, #43	; 0x2b
    8b00:	eb0010e6 	bl	cea0 <assertion_failed>
    8b04:	e5941054 	ldr	r1, [r4, #84]	; 0x54
    8b08:	e5943000 	ldr	r3, [r4]
    8b0c:	e1530001 	cmp	r3, r1
    8b10:	0a000006 	beq	8b30 <CScheduler::~CScheduler()+0x58>
    8b14:	e3011d38 	movw	r1, #7480	; 0x1d38
    8b18:	e3010d94 	movw	r0, #7572	; 0x1d94
    8b1c:	e3401001 	movt	r1, #1
    8b20:	e3400001 	movt	r0, #1
    8b24:	e3a0202c 	mov	r2, #44	; 0x2c
    8b28:	eb0010dc 	bl	cea0 <assertion_failed>
    8b2c:	e5941054 	ldr	r1, [r4, #84]	; 0x54
    8b30:	e1a00004 	mov	r0, r4
    8b34:	ebffffc9 	bl	8a60 <CScheduler::RemoveTask(CTask*)>
    8b38:	e5940054 	ldr	r0, [r4, #84]	; 0x54
    8b3c:	e3500000 	cmp	r0, #0
    8b40:	0a000002 	beq	8b50 <CScheduler::~CScheduler()+0x78>
    8b44:	e5903000 	ldr	r3, [r0]
    8b48:	e5933004 	ldr	r3, [r3, #4]
    8b4c:	e12fff33 	blx	r3
    8b50:	e3033f44 	movw	r3, #16196	; 0x3f44
    8b54:	e3403001 	movt	r3, #1
    8b58:	e3a02000 	mov	r2, #0
    8b5c:	e1a00004 	mov	r0, r4
    8b60:	e5832000 	str	r2, [r3]
    8b64:	e8bd8010 	pop	{r4, pc}

00008b68 <CScheduler::WakeTask(CTask**)>:
    8b68:	e92d4070 	push	{r4, r5, r6, lr}
    8b6c:	e2515000 	subs	r5, r1, #0
    8b70:	0a000010 	beq	8bb8 <CScheduler::WakeTask(CTask**)+0x50>
    8b74:	e5954000 	ldr	r4, [r5]
    8b78:	e3a03000 	mov	r3, #0
    8b7c:	e5853000 	str	r3, [r5]
    8b80:	e1540003 	cmp	r4, r3
    8b84:	0a000012 	beq	8bd4 <CScheduler::WakeTask(CTask**)+0x6c>
    8b88:	e5d43004 	ldrb	r3, [r4, #4]
    8b8c:	e3530001 	cmp	r3, #1
    8b90:	0a000005 	beq	8bac <CScheduler::WakeTask(CTask**)+0x44>
    8b94:	e3011d38 	movw	r1, #7480	; 0x1d38
    8b98:	e3010dbc 	movw	r0, #7612	; 0x1dbc
    8b9c:	e3401001 	movt	r1, #1
    8ba0:	e3400001 	movt	r0, #1
    8ba4:	e3a020b9 	mov	r2, #185	; 0xb9
    8ba8:	eb0010bc 	bl	cea0 <assertion_failed>
    8bac:	e3a03000 	mov	r3, #0
    8bb0:	e5c43004 	strb	r3, [r4, #4]
    8bb4:	e8bd8070 	pop	{r4, r5, r6, pc}
    8bb8:	e3011d38 	movw	r1, #7480	; 0x1d38
    8bbc:	e3010db0 	movw	r0, #7600	; 0x1db0
    8bc0:	e3401001 	movt	r1, #1
    8bc4:	e3400001 	movt	r0, #1
    8bc8:	e3a020ac 	mov	r2, #172	; 0xac
    8bcc:	eb0010b3 	bl	cea0 <assertion_failed>
    8bd0:	eaffffe7 	b	8b74 <CScheduler::WakeTask(CTask**)+0xc>
    8bd4:	e3011d38 	movw	r1, #7480	; 0x1d38
    8bd8:	e3010d58 	movw	r0, #7512	; 0x1d58
    8bdc:	e3401001 	movt	r1, #1
    8be0:	e3400001 	movt	r0, #1
    8be4:	e3a020b8 	mov	r2, #184	; 0xb8
    8be8:	eb0010ac 	bl	cea0 <assertion_failed>
    8bec:	eaffffe5 	b	8b88 <CScheduler::WakeTask(CTask**)+0x20>

00008bf0 <CScheduler::GetNextTask()>:
    8bf0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8bf4:	e1a07000 	mov	r7, r0
    8bf8:	e5904058 	ldr	r4, [r0, #88]	; 0x58
    8bfc:	e3540014 	cmp	r4, #20
    8c00:	23a04000 	movcs	r4, #0
    8c04:	eb000911 	bl	b050 <CTimer::Get()>
    8c08:	eb0006be 	bl	a708 <CTimer::GetClockTicks()>
    8c0c:	e5973050 	ldr	r3, [r7, #80]	; 0x50
    8c10:	e3530000 	cmp	r3, #0
    8c14:	0a00001b 	beq	8c88 <CScheduler::GetNextTask()+0x98>
    8c18:	e3019d38 	movw	r9, #7480	; 0x1d38
    8c1c:	e30386f8 	movw	r8, #14072	; 0x36f8
    8c20:	e3409001 	movt	r9, #1
    8c24:	e3408001 	movt	r8, #1
    8c28:	e1a0a000 	mov	sl, r0
    8c2c:	e3a06001 	mov	r6, #1
    8c30:	e2844001 	add	r4, r4, #1
    8c34:	e2866001 	add	r6, r6, #1
    8c38:	e1540003 	cmp	r4, r3
    8c3c:	23a04000 	movcs	r4, #0
    8c40:	e7975104 	ldr	r5, [r7, r4, lsl #2]
    8c44:	e3550000 	cmp	r5, #0
    8c48:	0a00000c 	beq	8c80 <CScheduler::GetNextTask()+0x90>
    8c4c:	e5d52004 	ldrb	r2, [r5, #4]
    8c50:	e3520003 	cmp	r2, #3
    8c54:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    8c58:	ea000003 	b	8c6c <CScheduler::GetNextTask()+0x7c>
    8c5c:	00008c8c 	.word	0x00008c8c
    8c60:	00008c80 	.word	0x00008c80
    8c64:	00008cbc 	.word	0x00008cbc
    8c68:	00008c94 	.word	0x00008c94
    8c6c:	e3a020e8 	mov	r2, #232	; 0xe8
    8c70:	e1a01009 	mov	r1, r9
    8c74:	e1a00008 	mov	r0, r8
    8c78:	eb001088 	bl	cea0 <assertion_failed>
    8c7c:	e5973050 	ldr	r3, [r7, #80]	; 0x50
    8c80:	e1530006 	cmp	r3, r6
    8c84:	2affffe9 	bcs	8c30 <CScheduler::GetNextTask()+0x40>
    8c88:	e3a04014 	mov	r4, #20
    8c8c:	e1a00004 	mov	r0, r4
    8c90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8c94:	e1a00007 	mov	r0, r7
    8c98:	e1a01005 	mov	r1, r5
    8c9c:	ebffff6f 	bl	8a60 <CScheduler::RemoveTask(CTask*)>
    8ca0:	e5953000 	ldr	r3, [r5]
    8ca4:	e1a00005 	mov	r0, r5
    8ca8:	e3a04014 	mov	r4, #20
    8cac:	e5933004 	ldr	r3, [r3, #4]
    8cb0:	e12fff33 	blx	r3
    8cb4:	e1a00004 	mov	r0, r4
    8cb8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8cbc:	e5952008 	ldr	r2, [r5, #8]
    8cc0:	e042200a 	sub	r2, r2, sl
    8cc4:	e3520000 	cmp	r2, #0
    8cc8:	caffffec 	bgt	8c80 <CScheduler::GetNextTask()+0x90>
    8ccc:	e3a03000 	mov	r3, #0
    8cd0:	e5c53004 	strb	r3, [r5, #4]
    8cd4:	eaffffec 	b	8c8c <CScheduler::GetNextTask()+0x9c>

00008cd8 <CScheduler::Yield()>:
    8cd8:	e92d4070 	push	{r4, r5, r6, lr}
    8cdc:	e3016d38 	movw	r6, #7480	; 0x1d38
    8ce0:	e3015de4 	movw	r5, #7652	; 0x1de4
    8ce4:	e3406001 	movt	r6, #1
    8ce8:	e3405001 	movt	r5, #1
    8cec:	e1a04000 	mov	r4, r0
    8cf0:	ea000002 	b	8d00 <CScheduler::Yield()+0x28>
    8cf4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    8cf8:	e3530000 	cmp	r3, #0
    8cfc:	0a000016 	beq	8d5c <CScheduler::Yield()+0x84>
    8d00:	e1a00004 	mov	r0, r4
    8d04:	ebffffb9 	bl	8bf0 <CScheduler::GetNextTask()>
    8d08:	e3500014 	cmp	r0, #20
    8d0c:	e5840058 	str	r0, [r4, #88]	; 0x58
    8d10:	0afffff7 	beq	8cf4 <CScheduler::Yield()+0x1c>
    8d14:	e3500013 	cmp	r0, #19
    8d18:	8a000014 	bhi	8d70 <CScheduler::Yield()+0x98>
    8d1c:	e7945100 	ldr	r5, [r4, r0, lsl #2]
    8d20:	e3550000 	cmp	r5, #0
    8d24:	0a000019 	beq	8d90 <CScheduler::Yield()+0xb8>
    8d28:	e5940054 	ldr	r0, [r4, #84]	; 0x54
    8d2c:	e1550000 	cmp	r5, r0
    8d30:	08bd8070 	popeq	{r4, r5, r6, pc}
    8d34:	e290600c 	adds	r6, r0, #12
    8d38:	e5845054 	str	r5, [r4, #84]	; 0x54
    8d3c:	e285500c 	add	r5, r5, #12
    8d40:	0a000019 	beq	8dac <CScheduler::Yield()+0xd4>
    8d44:	e3550000 	cmp	r5, #0
    8d48:	0a00001e 	beq	8dc8 <CScheduler::Yield()+0xf0>
    8d4c:	e1a01005 	mov	r1, r5
    8d50:	e1a00006 	mov	r0, r6
    8d54:	e8bd4070 	pop	{r4, r5, r6, lr}
    8d58:	ea00009a 	b	8fc8 <TaskSwitch>
    8d5c:	e3a02038 	mov	r2, #56	; 0x38
    8d60:	e1a01006 	mov	r1, r6
    8d64:	e1a00005 	mov	r0, r5
    8d68:	eb00104c 	bl	cea0 <assertion_failed>
    8d6c:	eaffffe3 	b	8d00 <CScheduler::Yield()+0x28>
    8d70:	e3011d38 	movw	r1, #7480	; 0x1d38
    8d74:	e3010df4 	movw	r0, #7668	; 0x1df4
    8d78:	e3401001 	movt	r1, #1
    8d7c:	e3400001 	movt	r0, #1
    8d80:	e3a0203b 	mov	r2, #59	; 0x3b
    8d84:	eb001045 	bl	cea0 <assertion_failed>
    8d88:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    8d8c:	eaffffe2 	b	8d1c <CScheduler::Yield()+0x44>
    8d90:	e3011d38 	movw	r1, #7480	; 0x1d38
    8d94:	e3010e0c 	movw	r0, #7692	; 0x1e0c
    8d98:	e3401001 	movt	r1, #1
    8d9c:	e3400001 	movt	r0, #1
    8da0:	e3a0203d 	mov	r2, #61	; 0x3d
    8da4:	eb00103d 	bl	cea0 <assertion_failed>
    8da8:	eaffffde 	b	8d28 <CScheduler::Yield()+0x50>
    8dac:	e3011d38 	movw	r1, #7480	; 0x1d38
    8db0:	e3010e18 	movw	r0, #7704	; 0x1e18
    8db4:	e3401001 	movt	r1, #1
    8db8:	e3400001 	movt	r0, #1
    8dbc:	e3a02047 	mov	r2, #71	; 0x47
    8dc0:	eb001036 	bl	cea0 <assertion_failed>
    8dc4:	eaffffde 	b	8d44 <CScheduler::Yield()+0x6c>
    8dc8:	e3011d38 	movw	r1, #7480	; 0x1d38
    8dcc:	e3010e28 	movw	r0, #7720	; 0x1e28
    8dd0:	e3401001 	movt	r1, #1
    8dd4:	e3400001 	movt	r0, #1
    8dd8:	e3a02048 	mov	r2, #72	; 0x48
    8ddc:	eb00102f 	bl	cea0 <assertion_failed>
    8de0:	eaffffd9 	b	8d4c <CScheduler::Yield()+0x74>

00008de4 <CScheduler::usSleep(unsigned int) [clone .part.2]>:
    8de4:	e92d4070 	push	{r4, r5, r6, lr}
    8de8:	e1a05000 	mov	r5, r0
    8dec:	e1a06001 	mov	r6, r1
    8df0:	eb000896 	bl	b050 <CTimer::Get()>
    8df4:	eb000643 	bl	a708 <CTimer::GetClockTicks()>
    8df8:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8dfc:	e3530000 	cmp	r3, #0
    8e00:	e1a04000 	mov	r4, r0
    8e04:	0a000011 	beq	8e50 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x6c>
    8e08:	e5d32004 	ldrb	r2, [r3, #4]
    8e0c:	e3520000 	cmp	r2, #0
    8e10:	1a000006 	bne	8e30 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x4c>
    8e14:	e0844006 	add	r4, r4, r6
    8e18:	e1a00005 	mov	r0, r5
    8e1c:	e5834008 	str	r4, [r3, #8]
    8e20:	e3a02002 	mov	r2, #2
    8e24:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e28:	e5c32004 	strb	r2, [r3, #4]
    8e2c:	eaffffa9 	b	8cd8 <CScheduler::Yield()>
    8e30:	e3011d38 	movw	r1, #7480	; 0x1d38
    8e34:	e3010e48 	movw	r0, #7752	; 0x1e48
    8e38:	e3401001 	movt	r1, #1
    8e3c:	e3400001 	movt	r0, #1
    8e40:	e3a0206b 	mov	r2, #107	; 0x6b
    8e44:	eb001015 	bl	cea0 <assertion_failed>
    8e48:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8e4c:	eafffff0 	b	8e14 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x30>
    8e50:	e3011d38 	movw	r1, #7480	; 0x1d38
    8e54:	e3010e38 	movw	r0, #7736	; 0x1e38
    8e58:	e3401001 	movt	r1, #1
    8e5c:	e3400001 	movt	r0, #1
    8e60:	e3a0206a 	mov	r2, #106	; 0x6a
    8e64:	eb00100d 	bl	cea0 <assertion_failed>
    8e68:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8e6c:	eaffffe5 	b	8e08 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x24>

00008e70 <CScheduler::usSleep(unsigned int)>:
    8e70:	e3510000 	cmp	r1, #0
    8e74:	012fff1e 	bxeq	lr
    8e78:	eaffffd9 	b	8de4 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00008e7c <CScheduler::Sleep(unsigned int)>:
    8e7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8e80:	e3005708 	movw	r5, #1800	; 0x708
    8e84:	e1510005 	cmp	r1, r5
    8e88:	e1a04001 	mov	r4, r1
    8e8c:	e1a07000 	mov	r7, r0
    8e90:	9a000008 	bls	8eb8 <CScheduler::Sleep(unsigned int)+0x3c>
    8e94:	e3a06cd2 	mov	r6, #53760	; 0xd200
    8e98:	e3466b49 	movt	r6, #27465	; 0x6b49
    8e9c:	e2444c07 	sub	r4, r4, #1792	; 0x700
    8ea0:	e1a01006 	mov	r1, r6
    8ea4:	e2444008 	sub	r4, r4, #8
    8ea8:	e1a00007 	mov	r0, r7
    8eac:	ebffffcc 	bl	8de4 <CScheduler::usSleep(unsigned int) [clone .part.2]>
    8eb0:	e1540005 	cmp	r4, r5
    8eb4:	8afffff8 	bhi	8e9c <CScheduler::Sleep(unsigned int)+0x20>
    8eb8:	e3041240 	movw	r1, #16960	; 0x4240
    8ebc:	e340100f 	movt	r1, #15
    8ec0:	e0010491 	mul	r1, r1, r4
    8ec4:	e3510000 	cmp	r1, #0
    8ec8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8ecc:	e1a00007 	mov	r0, r7
    8ed0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8ed4:	eaffffc2 	b	8de4 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00008ed8 <CScheduler::MsSleep(unsigned int)>:
    8ed8:	e3510000 	cmp	r1, #0
    8edc:	012fff1e 	bxeq	lr
    8ee0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8ee4:	e0010193 	mul	r1, r3, r1
    8ee8:	e3510000 	cmp	r1, #0
    8eec:	012fff1e 	bxeq	lr
    8ef0:	eaffffbb 	b	8de4 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00008ef4 <CScheduler::BlockTask(CTask**)>:
    8ef4:	e92d4070 	push	{r4, r5, r6, lr}
    8ef8:	e2515000 	subs	r5, r1, #0
    8efc:	e1a04000 	mov	r4, r0
    8f00:	0a00001b 	beq	8f74 <CScheduler::BlockTask(CTask**)+0x80>
    8f04:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    8f08:	e5853000 	str	r3, [r5]
    8f0c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    8f10:	e3530000 	cmp	r3, #0
    8f14:	0a00000e 	beq	8f54 <CScheduler::BlockTask(CTask**)+0x60>
    8f18:	e5d32004 	ldrb	r2, [r3, #4]
    8f1c:	e3520000 	cmp	r2, #0
    8f20:	0a000006 	beq	8f40 <CScheduler::BlockTask(CTask**)+0x4c>
    8f24:	e3011d38 	movw	r1, #7480	; 0x1d38
    8f28:	e3010e48 	movw	r0, #7752	; 0x1e48
    8f2c:	e3401001 	movt	r1, #1
    8f30:	e3400001 	movt	r0, #1
    8f34:	e3a020a4 	mov	r2, #164	; 0xa4
    8f38:	eb000fd8 	bl	cea0 <assertion_failed>
    8f3c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    8f40:	e1a00004 	mov	r0, r4
    8f44:	e3a02001 	mov	r2, #1
    8f48:	e8bd4070 	pop	{r4, r5, r6, lr}
    8f4c:	e5c32004 	strb	r2, [r3, #4]
    8f50:	eaffff60 	b	8cd8 <CScheduler::Yield()>
    8f54:	e3011d38 	movw	r1, #7480	; 0x1d38
    8f58:	e3010e38 	movw	r0, #7736	; 0x1e38
    8f5c:	e3401001 	movt	r1, #1
    8f60:	e3400001 	movt	r0, #1
    8f64:	e3a020a3 	mov	r2, #163	; 0xa3
    8f68:	eb000fcc 	bl	cea0 <assertion_failed>
    8f6c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    8f70:	eaffffe8 	b	8f18 <CScheduler::BlockTask(CTask**)+0x24>
    8f74:	e3011d38 	movw	r1, #7480	; 0x1d38
    8f78:	e3010db0 	movw	r0, #7600	; 0x1db0
    8f7c:	e3401001 	movt	r1, #1
    8f80:	e3400001 	movt	r0, #1
    8f84:	e3a020a0 	mov	r2, #160	; 0xa0
    8f88:	eb000fc4 	bl	cea0 <assertion_failed>
    8f8c:	eaffffdc 	b	8f04 <CScheduler::BlockTask(CTask**)+0x10>

00008f90 <CScheduler::Get()>:
    8f90:	e92d4010 	push	{r4, lr}
    8f94:	e3034f44 	movw	r4, #16196	; 0x3f44
    8f98:	e3404001 	movt	r4, #1
    8f9c:	e5940000 	ldr	r0, [r4]
    8fa0:	e3500000 	cmp	r0, #0
    8fa4:	18bd8010 	popne	{r4, pc}
    8fa8:	e3a020f2 	mov	r2, #242	; 0xf2
    8fac:	e3011d38 	movw	r1, #7480	; 0x1d38
    8fb0:	e3010e74 	movw	r0, #7796	; 0x1e74
    8fb4:	e3401001 	movt	r1, #1
    8fb8:	e3400001 	movt	r0, #1
    8fbc:	eb000fb7 	bl	cea0 <assertion_failed>
    8fc0:	e5940000 	ldr	r0, [r4]
    8fc4:	e8bd8010 	pop	{r4, pc}

00008fc8 <TaskSwitch>:
    8fc8:	e8807fff 	stm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    8fcc:	e8917fff 	ldm	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    8fd0:	e12fff1e 	bx	lr

00008fd4 <CActLED::~CActLED()>:
    8fd4:	e3033f48 	movw	r3, #16200	; 0x3f48
    8fd8:	e3403001 	movt	r3, #1
    8fdc:	e3a02000 	mov	r2, #0
    8fe0:	e5832000 	str	r2, [r3]
    8fe4:	e12fff1e 	bx	lr

00008fe8 <CActLED::On()>:
    8fe8:	e5903000 	ldr	r3, [r0]
    8fec:	e3530000 	cmp	r3, #0
    8ff0:	0a000004 	beq	9008 <CActLED::On()+0x20>
    8ff4:	e5901008 	ldr	r1, [r0, #8]
    8ff8:	e1a00003 	mov	r0, r3
    8ffc:	e2911000 	adds	r1, r1, #0
    9000:	13a01001 	movne	r1, #1
    9004:	ea0000f0 	b	93cc <CGPIOPin::Write(unsigned int)>
    9008:	e5903004 	ldr	r3, [r0, #4]
    900c:	e3530000 	cmp	r3, #0
    9010:	012fff1e 	bxeq	lr
    9014:	e5901008 	ldr	r1, [r0, #8]
    9018:	e1a00003 	mov	r0, r3
    901c:	e2911000 	adds	r1, r1, #0
    9020:	13a01001 	movne	r1, #1
    9024:	ea001b93 	b	fe78 <CVirtualGPIOPin::Write(unsigned int)>

00009028 <CActLED::Off()>:
    9028:	e5903000 	ldr	r3, [r0]
    902c:	e3530000 	cmp	r3, #0
    9030:	0a000004 	beq	9048 <CActLED::Off()+0x20>
    9034:	e5901008 	ldr	r1, [r0, #8]
    9038:	e1a00003 	mov	r0, r3
    903c:	e16f1f11 	clz	r1, r1
    9040:	e1a012a1 	lsr	r1, r1, #5
    9044:	ea0000e0 	b	93cc <CGPIOPin::Write(unsigned int)>
    9048:	e5903004 	ldr	r3, [r0, #4]
    904c:	e3530000 	cmp	r3, #0
    9050:	012fff1e 	bxeq	lr
    9054:	e5901008 	ldr	r1, [r0, #8]
    9058:	e1a00003 	mov	r0, r3
    905c:	e16f1f11 	clz	r1, r1
    9060:	e1a012a1 	lsr	r1, r1, #5
    9064:	ea001b83 	b	fe78 <CVirtualGPIOPin::Write(unsigned int)>

00009068 <CActLED::CActLED()>:
    9068:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    906c:	e3033f48 	movw	r3, #16200	; 0x3f48
    9070:	e24dd024 	sub	sp, sp, #36	; 0x24
    9074:	e1a04000 	mov	r4, r0
    9078:	e3403001 	movt	r3, #1
    907c:	e3a05000 	mov	r5, #0
    9080:	e28d0008 	add	r0, sp, #8
    9084:	e5845000 	str	r5, [r4]
    9088:	e5845004 	str	r5, [r4, #4]
    908c:	e5834000 	str	r4, [r3]
    9090:	eb000052 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
    9094:	e3a03010 	mov	r3, #16
    9098:	e58d5000 	str	r5, [sp]
    909c:	e28d0008 	add	r0, sp, #8
    90a0:	e3a01002 	mov	r1, #2
    90a4:	e08d2003 	add	r2, sp, r3
    90a8:	e3401001 	movt	r1, #1
    90ac:	eb000093 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    90b0:	e1500005 	cmp	r0, r5
    90b4:	0a000011 	beq	9100 <CActLED::CActLED()+0x98>
    90b8:	e59d301c 	ldr	r3, [sp, #28]
    90bc:	e3130502 	tst	r3, #8388608	; 0x800000
    90c0:	1a000013 	bne	9114 <CActLED::CActLED()+0xac>
    90c4:	e6ff3073 	uxth	r3, r3
    90c8:	e353000f 	cmp	r3, #15
    90cc:	83a06001 	movhi	r6, #1
    90d0:	9a000020 	bls	9158 <CActLED::CActLED()+0xf0>
    90d4:	e3a00028 	mov	r0, #40	; 0x28
    90d8:	eb00047c 	bl	a2d0 <operator new(unsigned int)>
    90dc:	e3a03000 	mov	r3, #0
    90e0:	e3a02001 	mov	r2, #1
    90e4:	e3a0102f 	mov	r1, #47	; 0x2f
    90e8:	e1a05000 	mov	r5, r0
    90ec:	eb00034c 	bl	9e24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    90f0:	e5845000 	str	r5, [r4]
    90f4:	e5846008 	str	r6, [r4, #8]
    90f8:	e1a00004 	mov	r0, r4
    90fc:	ebffffc9 	bl	9028 <CActLED::Off()>
    9100:	e28d0008 	add	r0, sp, #8
    9104:	eb00003b 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
    9108:	e1a00004 	mov	r0, r4
    910c:	e28dd024 	add	sp, sp, #36	; 0x24
    9110:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9114:	e7e73253 	ubfx	r3, r3, #4, #8
    9118:	e3530001 	cmp	r3, #1
    911c:	9a00000d 	bls	9158 <CActLED::CActLED()+0xf0>
    9120:	e353000c 	cmp	r3, #12
    9124:	13530009 	cmpne	r3, #9
    9128:	03a06001 	moveq	r6, #1
    912c:	13a06000 	movne	r6, #0
    9130:	e3530008 	cmp	r3, #8
    9134:	e2266001 	eor	r6, r6, #1
    9138:	1affffe5 	bne	90d4 <CActLED::CActLED()+0x6c>
    913c:	e3a00010 	mov	r0, #16
    9140:	eb000462 	bl	a2d0 <operator new(unsigned int)>
    9144:	e1a01005 	mov	r1, r5
    9148:	e1a07000 	mov	r7, r0
    914c:	eb001b0d 	bl	fd88 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    9150:	e5847004 	str	r7, [r4, #4]
    9154:	eaffffe6 	b	90f4 <CActLED::CActLED()+0x8c>
    9158:	e3a00028 	mov	r0, #40	; 0x28
    915c:	eb00045b 	bl	a2d0 <operator new(unsigned int)>
    9160:	e3a03000 	mov	r3, #0
    9164:	e3a02001 	mov	r2, #1
    9168:	e3a01010 	mov	r1, #16
    916c:	e1a05000 	mov	r5, r0
    9170:	eb00032b 	bl	9e24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9174:	e3a03000 	mov	r3, #0
    9178:	e5845000 	str	r5, [r4]
    917c:	e5843008 	str	r3, [r4, #8]
    9180:	eaffffdc 	b	90f8 <CActLED::CActLED()+0x90>

00009184 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    9184:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9188:	e2516000 	subs	r6, r1, #0
    918c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9190:	e1a08003 	mov	r8, r3
    9194:	e1a07002 	mov	r7, r2
    9198:	e1a05000 	mov	r5, r0
    919c:	e3a04001 	mov	r4, #1
    91a0:	e1a00005 	mov	r0, r5
    91a4:	e2844001 	add	r4, r4, #1
    91a8:	ebffff8e 	bl	8fe8 <CActLED::On()>
    91ac:	e1a00007 	mov	r0, r7
    91b0:	eb00075c 	bl	af28 <CTimer::SimpleMsDelay(unsigned int)>
    91b4:	e1a00005 	mov	r0, r5
    91b8:	ebffff9a 	bl	9028 <CActLED::Off()>
    91bc:	e1a00008 	mov	r0, r8
    91c0:	eb000758 	bl	af28 <CTimer::SimpleMsDelay(unsigned int)>
    91c4:	e1560004 	cmp	r6, r4
    91c8:	2afffff4 	bcs	91a0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    91cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000091d0 <CActLED::Get()>:
    91d0:	e3033f48 	movw	r3, #16200	; 0x3f48
    91d4:	e3403001 	movt	r3, #1
    91d8:	e5930000 	ldr	r0, [r3]
    91dc:	e12fff1e 	bx	lr

000091e0 <CBcmPropertyTags::CBcmPropertyTags()>:
    91e0:	e92d4010 	push	{r4, lr}
    91e4:	e3a01008 	mov	r1, #8
    91e8:	e1a04000 	mov	r4, r0
    91ec:	eb0020d2 	bl	1153c <CBcmMailBox::CBcmMailBox(unsigned int)>
    91f0:	e1a00004 	mov	r0, r4
    91f4:	e8bd8010 	pop	{r4, pc}

000091f8 <CBcmPropertyTags::~CBcmPropertyTags()>:
    91f8:	e92d4010 	push	{r4, lr}
    91fc:	e1a04000 	mov	r4, r0
    9200:	eb0020d0 	bl	11548 <CBcmMailBox::~CBcmMailBox()>
    9204:	e1a00004 	mov	r0, r4
    9208:	e8bd8010 	pop	{r4, pc}

0000920c <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    920c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9210:	e2519000 	subs	r9, r1, #0
    9214:	e1a0a000 	mov	sl, r0
    9218:	e1a04002 	mov	r4, r2
    921c:	0a000030 	beq	92e4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
    9220:	e354000f 	cmp	r4, #15
    9224:	9a000027 	bls	92c8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
    9228:	e284800c 	add	r8, r4, #12
    922c:	e3180003 	tst	r8, #3
    9230:	1a00001d 	bne	92ac <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    9234:	e3a05008 	mov	r5, #8
    9238:	e3405040 	movt	r5, #64	; 0x40
    923c:	e3a06501 	mov	r6, #4194304	; 0x400000
    9240:	e3a07000 	mov	r7, #0
    9244:	e1a00005 	mov	r0, r5
    9248:	e5868000 	str	r8, [r6]
    924c:	e5867004 	str	r7, [r6, #4]
    9250:	e1a02004 	mov	r2, r4
    9254:	e1a01009 	mov	r1, r9
    9258:	eb0008a2 	bl	b4e8 <memcpy>
    925c:	e7857004 	str	r7, [r5, r4]
    9260:	f57ff04f 	dsb	sy
    9264:	e1a01007 	mov	r1, r7
    9268:	e1a0000a 	mov	r0, sl
    926c:	e34c1040 	movt	r1, #49216	; 0xc040
    9270:	eb0020e4 	bl	11608 <CBcmMailBox::WriteRead(unsigned int)>
    9274:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    9278:	0a000001 	beq	9284 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    927c:	e3a00000 	mov	r0, #0
    9280:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9284:	f57ff05f 	dmb	sy
    9288:	e5963004 	ldr	r3, [r6, #4]
    928c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9290:	1afffff9 	bne	927c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    9294:	e1a02004 	mov	r2, r4
    9298:	e1a01005 	mov	r1, r5
    929c:	e1a00009 	mov	r0, r9
    92a0:	eb000890 	bl	b4e8 <memcpy>
    92a4:	e3a00001 	mov	r0, #1
    92a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    92ac:	e3011e84 	movw	r1, #7812	; 0x1e84
    92b0:	e3010ed0 	movw	r0, #7888	; 0x1ed0
    92b4:	e3401001 	movt	r1, #1
    92b8:	e3400001 	movt	r0, #1
    92bc:	e3a02051 	mov	r2, #81	; 0x51
    92c0:	eb000ef6 	bl	cea0 <assertion_failed>
    92c4:	eaffffda 	b	9234 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    92c8:	e3011e84 	movw	r1, #7812	; 0x1e84
    92cc:	e3010ea4 	movw	r0, #7844	; 0x1ea4
    92d0:	e3401001 	movt	r1, #1
    92d4:	e3400001 	movt	r0, #1
    92d8:	e3a0204f 	mov	r2, #79	; 0x4f
    92dc:	eb000eef 	bl	cea0 <assertion_failed>
    92e0:	eaffffd0 	b	9228 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    92e4:	e3011e84 	movw	r1, #7812	; 0x1e84
    92e8:	e3010e98 	movw	r0, #7832	; 0x1e98
    92ec:	e3401001 	movt	r1, #1
    92f0:	e3400001 	movt	r0, #1
    92f4:	e3a0204e 	mov	r2, #78	; 0x4e
    92f8:	eb000ee8 	bl	cea0 <assertion_failed>
    92fc:	eaffffc7 	b	9220 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00009300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    9300:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9304:	e2524000 	subs	r4, r2, #0
    9308:	e1a07000 	mov	r7, r0
    930c:	e1a08001 	mov	r8, r1
    9310:	e1a05003 	mov	r5, r3
    9314:	e59d6018 	ldr	r6, [sp, #24]
    9318:	0a00001d 	beq	9394 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
    931c:	e355000f 	cmp	r5, #15
    9320:	9a000014 	bls	9378 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    9324:	e245300c 	sub	r3, r5, #12
    9328:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    932c:	e5848000 	str	r8, [r4]
    9330:	e1a00007 	mov	r0, r7
    9334:	e5846008 	str	r6, [r4, #8]
    9338:	e1a02005 	mov	r2, r5
    933c:	e5843004 	str	r3, [r4, #4]
    9340:	e1a01004 	mov	r1, r4
    9344:	ebffffb0 	bl	920c <CBcmPropertyTags::GetTags(void*, unsigned int)>
    9348:	e3500000 	cmp	r0, #0
    934c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9350:	e5940008 	ldr	r0, [r4, #8]
    9354:	e3500000 	cmp	r0, #0
    9358:	ba000001 	blt	9364 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    935c:	e3a00000 	mov	r0, #0
    9360:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9364:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    9368:	e5840008 	str	r0, [r4, #8]
    936c:	e2900000 	adds	r0, r0, #0
    9370:	13a00001 	movne	r0, #1
    9374:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9378:	e3011e84 	movw	r1, #7812	; 0x1e84
    937c:	e3010ef4 	movw	r0, #7924	; 0x1ef4
    9380:	e3401001 	movt	r1, #1
    9384:	e3400001 	movt	r0, #1
    9388:	e3a02032 	mov	r2, #50	; 0x32
    938c:	eb000ec3 	bl	cea0 <assertion_failed>
    9390:	eaffffe3 	b	9324 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    9394:	e3011e84 	movw	r1, #7812	; 0x1e84
    9398:	e3010ee8 	movw	r0, #7912	; 0x1ee8
    939c:	e3401001 	movt	r1, #1
    93a0:	e3400001 	movt	r0, #1
    93a4:	e3a02031 	mov	r2, #49	; 0x31
    93a8:	eb000ebc 	bl	cea0 <assertion_failed>
    93ac:	eaffffda 	b	931c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

000093b0 <CGPIOPin::~CGPIOPin()>:
    93b0:	e12fff1e 	bx	lr

000093b4 <CGPIOPin::~CGPIOPin()>:
    93b4:	e92d4010 	push	{r4, lr}
    93b8:	e3a01028 	mov	r1, #40	; 0x28
    93bc:	e1a04000 	mov	r4, r0
    93c0:	eb0003c6 	bl	a2e0 <operator delete(void*, unsigned int)>
    93c4:	e1a00004 	mov	r0, r4
    93c8:	e8bd8010 	pop	{r4, pc}

000093cc <CGPIOPin::Write(unsigned int)>:
    93cc:	e5d03010 	ldrb	r3, [r0, #16]
    93d0:	e92d4070 	push	{r4, r5, r6, lr}
    93d4:	e3530003 	cmp	r3, #3
    93d8:	e1a04000 	mov	r4, r0
    93dc:	e1a05001 	mov	r5, r1
    93e0:	ca000016 	bgt	9440 <CGPIOPin::Write(unsigned int)+0x74>
    93e4:	e3550001 	cmp	r5, #1
    93e8:	9a00000c 	bls	9420 <CGPIOPin::Write(unsigned int)+0x54>
    93ec:	e3011f44 	movw	r1, #8004	; 0x1f44
    93f0:	e3010f74 	movw	r0, #8052	; 0x1f74
    93f4:	e3401001 	movt	r1, #1
    93f8:	e3400001 	movt	r0, #1
    93fc:	e3a02084 	mov	r2, #132	; 0x84
    9400:	eb000ea6 	bl	cea0 <assertion_failed>
    9404:	e3a0301c 	mov	r3, #28
    9408:	e3433f20 	movt	r3, #16160	; 0x3f20
    940c:	e5845014 	str	r5, [r4, #20]
    9410:	e594100c 	ldr	r1, [r4, #12]
    9414:	e5942008 	ldr	r2, [r4, #8]
    9418:	e7831002 	str	r1, [r3, r2]
    941c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9420:	e3a02028 	mov	r2, #40	; 0x28
    9424:	e3550000 	cmp	r5, #0
    9428:	e3432f20 	movt	r2, #16160	; 0x3f20
    942c:	e3a0301c 	mov	r3, #28
    9430:	e5845014 	str	r5, [r4, #20]
    9434:	e3433f20 	movt	r3, #16160	; 0x3f20
    9438:	01a03002 	moveq	r3, r2
    943c:	eafffff3 	b	9410 <CGPIOPin::Write(unsigned int)+0x44>
    9440:	e3011f44 	movw	r1, #8004	; 0x1f44
    9444:	e3010f50 	movw	r0, #8016	; 0x1f50
    9448:	e3401001 	movt	r1, #1
    944c:	e3400001 	movt	r0, #1
    9450:	e3a02080 	mov	r2, #128	; 0x80
    9454:	eb000e91 	bl	cea0 <assertion_failed>
    9458:	eaffffe1 	b	93e4 <CGPIOPin::Write(unsigned int)+0x18>

0000945c <CGPIOPin::Read() const>:
    945c:	e5d03010 	ldrb	r3, [r0, #16]
    9460:	e92d4010 	push	{r4, lr}
    9464:	e2432002 	sub	r2, r3, #2
    9468:	e3530000 	cmp	r3, #0
    946c:	13520001 	cmpne	r2, #1
    9470:	e1a04000 	mov	r4, r0
    9474:	9a000005 	bls	9490 <CGPIOPin::Read() const+0x34>
    9478:	e3011f44 	movw	r1, #8004	; 0x1f44
    947c:	e3010f94 	movw	r0, #8084	; 0x1f94
    9480:	e3401001 	movt	r1, #1
    9484:	e3400001 	movt	r0, #1
    9488:	e3a02092 	mov	r2, #146	; 0x92
    948c:	eb000e83 	bl	cea0 <assertion_failed>
    9490:	e5941008 	ldr	r1, [r4, #8]
    9494:	e3a03034 	mov	r3, #52	; 0x34
    9498:	e3433f20 	movt	r3, #16160	; 0x3f20
    949c:	e594200c 	ldr	r2, [r4, #12]
    94a0:	e7913003 	ldr	r3, [r1, r3]
    94a4:	e1130002 	tst	r3, r2
    94a8:	13a00001 	movne	r0, #1
    94ac:	03a00000 	moveq	r0, #0
    94b0:	e8bd8010 	pop	{r4, pc}

000094b4 <CGPIOPin::Invert()>:
    94b4:	e5d03010 	ldrb	r3, [r0, #16]
    94b8:	e92d4010 	push	{r4, lr}
    94bc:	e3530001 	cmp	r3, #1
    94c0:	e1a04000 	mov	r4, r0
    94c4:	0a000005 	beq	94e0 <CGPIOPin::Invert()+0x2c>
    94c8:	e3011f44 	movw	r1, #8004	; 0x1f44
    94cc:	e3010ff0 	movw	r0, #8176	; 0x1ff0
    94d0:	e3401001 	movt	r1, #1
    94d4:	e3400001 	movt	r0, #1
    94d8:	e3a0209f 	mov	r2, #159	; 0x9f
    94dc:	eb000e6f 	bl	cea0 <assertion_failed>
    94e0:	e5941014 	ldr	r1, [r4, #20]
    94e4:	e1a00004 	mov	r0, r4
    94e8:	e8bd4010 	pop	{r4, lr}
    94ec:	e2211001 	eor	r1, r1, #1
    94f0:	eaffffb5 	b	93cc <CGPIOPin::Write(unsigned int)>

000094f4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    94f4:	e5d03010 	ldrb	r3, [r0, #16]
    94f8:	e92d4070 	push	{r4, r5, r6, lr}
    94fc:	e1a06002 	mov	r6, r2
    9500:	e2432002 	sub	r2, r3, #2
    9504:	e1a04000 	mov	r4, r0
    9508:	e3530000 	cmp	r3, #0
    950c:	13520001 	cmpne	r2, #1
    9510:	e1a05001 	mov	r5, r1
    9514:	9a000005 	bls	9530 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
    9518:	e3011f44 	movw	r1, #8004	; 0x1f44
    951c:	e3010f94 	movw	r0, #8084	; 0x1f94
    9520:	e3401001 	movt	r1, #1
    9524:	e3400001 	movt	r0, #1
    9528:	e3a020a8 	mov	r2, #168	; 0xa8
    952c:	eb000e5b 	bl	cea0 <assertion_failed>
    9530:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9534:	e3530006 	cmp	r3, #6
    9538:	0a000005 	beq	9554 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
    953c:	e3011f44 	movw	r1, #8004	; 0x1f44
    9540:	e302000c 	movw	r0, #8204	; 0x200c
    9544:	e3401001 	movt	r1, #1
    9548:	e3400001 	movt	r0, #1
    954c:	e3a020aa 	mov	r2, #170	; 0xaa
    9550:	eb000e52 	bl	cea0 <assertion_failed>
    9554:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9558:	e3530006 	cmp	r3, #6
    955c:	0a000005 	beq	9578 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
    9560:	e3011f44 	movw	r1, #8004	; 0x1f44
    9564:	e3020030 	movw	r0, #8240	; 0x2030
    9568:	e3401001 	movt	r1, #1
    956c:	e3400001 	movt	r0, #1
    9570:	e3a020ab 	mov	r2, #171	; 0xab
    9574:	eb000e49 	bl	cea0 <assertion_failed>
    9578:	e3550000 	cmp	r5, #0
    957c:	0a00001a 	beq	95ec <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    9580:	e594301c 	ldr	r3, [r4, #28]
    9584:	e3530000 	cmp	r3, #0
    9588:	0a000005 	beq	95a4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    958c:	e3011f44 	movw	r1, #8004	; 0x1f44
    9590:	e3020058 	movw	r0, #8280	; 0x2058
    9594:	e3401001 	movt	r1, #1
    9598:	e3400001 	movt	r0, #1
    959c:	e3a020ae 	mov	r2, #174	; 0xae
    95a0:	eb000e3e 	bl	cea0 <assertion_failed>
    95a4:	e5940018 	ldr	r0, [r4, #24]
    95a8:	e584501c 	str	r5, [r4, #28]
    95ac:	e3500000 	cmp	r0, #0
    95b0:	e5846020 	str	r6, [r4, #32]
    95b4:	0a000002 	beq	95c4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    95b8:	e1a01004 	mov	r1, r4
    95bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    95c0:	ea00192a 	b	fa70 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    95c4:	e3011f44 	movw	r1, #8004	; 0x1f44
    95c8:	e3020068 	movw	r0, #8296	; 0x2068
    95cc:	e3401001 	movt	r1, #1
    95d0:	e3400001 	movt	r0, #1
    95d4:	e3a020b3 	mov	r2, #179	; 0xb3
    95d8:	eb000e30 	bl	cea0 <assertion_failed>
    95dc:	e5940018 	ldr	r0, [r4, #24]
    95e0:	e1a01004 	mov	r1, r4
    95e4:	e8bd4070 	pop	{r4, r5, r6, lr}
    95e8:	ea001920 	b	fa70 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    95ec:	e3011f44 	movw	r1, #8004	; 0x1f44
    95f0:	e30306a0 	movw	r0, #13984	; 0x36a0
    95f4:	e3401001 	movt	r1, #1
    95f8:	e3400001 	movt	r0, #1
    95fc:	e3a020ad 	mov	r2, #173	; 0xad
    9600:	eb000e26 	bl	cea0 <assertion_failed>
    9604:	eaffffdd 	b	9580 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

00009608 <CGPIOPin::DisconnectInterrupt()>:
    9608:	e5d03010 	ldrb	r3, [r0, #16]
    960c:	e92d4010 	push	{r4, lr}
    9610:	e2432002 	sub	r2, r3, #2
    9614:	e3530000 	cmp	r3, #0
    9618:	13520001 	cmpne	r2, #1
    961c:	e1a04000 	mov	r4, r0
    9620:	9a000005 	bls	963c <CGPIOPin::DisconnectInterrupt()+0x34>
    9624:	e3011f44 	movw	r1, #8004	; 0x1f44
    9628:	e3010f94 	movw	r0, #8084	; 0x1f94
    962c:	e3401001 	movt	r1, #1
    9630:	e3400001 	movt	r0, #1
    9634:	e3a020bb 	mov	r2, #187	; 0xbb
    9638:	eb000e18 	bl	cea0 <assertion_failed>
    963c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9640:	e3530006 	cmp	r3, #6
    9644:	0a000005 	beq	9660 <CGPIOPin::DisconnectInterrupt()+0x58>
    9648:	e3011f44 	movw	r1, #8004	; 0x1f44
    964c:	e302000c 	movw	r0, #8204	; 0x200c
    9650:	e3401001 	movt	r1, #1
    9654:	e3400001 	movt	r0, #1
    9658:	e3a020bd 	mov	r2, #189	; 0xbd
    965c:	eb000e0f 	bl	cea0 <assertion_failed>
    9660:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9664:	e3530006 	cmp	r3, #6
    9668:	0a000005 	beq	9684 <CGPIOPin::DisconnectInterrupt()+0x7c>
    966c:	e3011f44 	movw	r1, #8004	; 0x1f44
    9670:	e3020030 	movw	r0, #8240	; 0x2030
    9674:	e3401001 	movt	r1, #1
    9678:	e3400001 	movt	r0, #1
    967c:	e3a020be 	mov	r2, #190	; 0xbe
    9680:	eb000e06 	bl	cea0 <assertion_failed>
    9684:	e594301c 	ldr	r3, [r4, #28]
    9688:	e3530000 	cmp	r3, #0
    968c:	0a000011 	beq	96d8 <CGPIOPin::DisconnectInterrupt()+0xd0>
    9690:	e5940018 	ldr	r0, [r4, #24]
    9694:	e3a03000 	mov	r3, #0
    9698:	e584301c 	str	r3, [r4, #28]
    969c:	e1500003 	cmp	r0, r3
    96a0:	0a000002 	beq	96b0 <CGPIOPin::DisconnectInterrupt()+0xa8>
    96a4:	e1a01004 	mov	r1, r4
    96a8:	e8bd4010 	pop	{r4, lr}
    96ac:	ea00191b 	b	fb20 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    96b0:	e3011f44 	movw	r1, #8004	; 0x1f44
    96b4:	e3020068 	movw	r0, #8296	; 0x2068
    96b8:	e3401001 	movt	r1, #1
    96bc:	e3400001 	movt	r0, #1
    96c0:	e3a020c3 	mov	r2, #195	; 0xc3
    96c4:	eb000df5 	bl	cea0 <assertion_failed>
    96c8:	e5940018 	ldr	r0, [r4, #24]
    96cc:	e1a01004 	mov	r1, r4
    96d0:	e8bd4010 	pop	{r4, lr}
    96d4:	ea001911 	b	fb20 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    96d8:	e3011f44 	movw	r1, #8004	; 0x1f44
    96dc:	e3020078 	movw	r0, #8312	; 0x2078
    96e0:	e3401001 	movt	r1, #1
    96e4:	e3400001 	movt	r0, #1
    96e8:	e3a020c0 	mov	r2, #192	; 0xc0
    96ec:	eb000deb 	bl	cea0 <assertion_failed>
    96f0:	eaffffe6 	b	9690 <CGPIOPin::DisconnectInterrupt()+0x88>

000096f4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    96f4:	e5d03010 	ldrb	r3, [r0, #16]
    96f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    96fc:	e2432002 	sub	r2, r3, #2
    9700:	e3530000 	cmp	r3, #0
    9704:	13520001 	cmpne	r2, #1
    9708:	e1a04000 	mov	r4, r0
    970c:	e1a08001 	mov	r8, r1
    9710:	9a000005 	bls	972c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
    9714:	e3011f44 	movw	r1, #8004	; 0x1f44
    9718:	e3010f94 	movw	r0, #8084	; 0x1f94
    971c:	e3401001 	movt	r1, #1
    9720:	e3400001 	movt	r0, #1
    9724:	e3a020cb 	mov	r2, #203	; 0xcb
    9728:	eb000ddc 	bl	cea0 <assertion_failed>
    972c:	e594301c 	ldr	r3, [r4, #28]
    9730:	e3530000 	cmp	r3, #0
    9734:	0a000034 	beq	980c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
    9738:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    973c:	e3530006 	cmp	r3, #6
    9740:	0a000005 	beq	975c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x68>
    9744:	e3011f44 	movw	r1, #8004	; 0x1f44
    9748:	e302000c 	movw	r0, #8204	; 0x200c
    974c:	e3401001 	movt	r1, #1
    9750:	e3400001 	movt	r0, #1
    9754:	e3a020ce 	mov	r2, #206	; 0xce
    9758:	eb000dd0 	bl	cea0 <assertion_failed>
    975c:	e3580005 	cmp	r8, #5
    9760:	ca000019 	bgt	97cc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd8>
    9764:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9768:	e1530008 	cmp	r3, r8
    976c:	0a00001f 	beq	97f0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xfc>
    9770:	e3036f4c 	movw	r6, #16204	; 0x3f4c
    9774:	e3406001 	movt	r6, #1
    9778:	e5943008 	ldr	r3, [r4, #8]
    977c:	e3a0504c 	mov	r5, #76	; 0x4c
    9780:	e5960000 	ldr	r0, [r6]
    9784:	e3435f20 	movt	r5, #16160	; 0x3f20
    9788:	e3a0700c 	mov	r7, #12
    978c:	e5c48024 	strb	r8, [r4, #36]	; 0x24
    9790:	e3500000 	cmp	r0, #0
    9794:	e0835005 	add	r5, r3, r5
    9798:	e0070897 	mul	r7, r7, r8
    979c:	1a000008 	bne	97c4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd0>
    97a0:	e594200c 	ldr	r2, [r4, #12]
    97a4:	e7953007 	ldr	r3, [r5, r7]
    97a8:	e1833002 	orr	r3, r3, r2
    97ac:	e7853007 	str	r3, [r5, r7]
    97b0:	e5963000 	ldr	r3, [r6]
    97b4:	e3530000 	cmp	r3, #0
    97b8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    97bc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    97c0:	ea0002f6 	b	a3a0 <LeaveCritical>
    97c4:	eb0002c7 	bl	a2e8 <EnterCritical>
    97c8:	eafffff4 	b	97a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
    97cc:	e3011f44 	movw	r1, #8004	; 0x1f44
    97d0:	e3020088 	movw	r0, #8328	; 0x2088
    97d4:	e3401001 	movt	r1, #1
    97d8:	e3400001 	movt	r0, #1
    97dc:	e3a020cf 	mov	r2, #207	; 0xcf
    97e0:	eb000dae 	bl	cea0 <assertion_failed>
    97e4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    97e8:	e1530008 	cmp	r3, r8
    97ec:	1affffdf 	bne	9770 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
    97f0:	e3011f44 	movw	r1, #8004	; 0x1f44
    97f4:	e30200ac 	movw	r0, #8364	; 0x20ac
    97f8:	e3401001 	movt	r1, #1
    97fc:	e3400001 	movt	r0, #1
    9800:	e3a020d0 	mov	r2, #208	; 0xd0
    9804:	eb000da5 	bl	cea0 <assertion_failed>
    9808:	eaffffd8 	b	9770 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
    980c:	e3011f44 	movw	r1, #8004	; 0x1f44
    9810:	e3020078 	movw	r0, #8312	; 0x2078
    9814:	e3401001 	movt	r1, #1
    9818:	e3400001 	movt	r0, #1
    981c:	e3a020cc 	mov	r2, #204	; 0xcc
    9820:	eb000d9e 	bl	cea0 <assertion_failed>
    9824:	eaffffc3 	b	9738 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>

00009828 <CGPIOPin::DisableInterrupt()>:
    9828:	e5d03010 	ldrb	r3, [r0, #16]
    982c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9830:	e2432002 	sub	r2, r3, #2
    9834:	e3530000 	cmp	r3, #0
    9838:	13520001 	cmpne	r2, #1
    983c:	e1a04000 	mov	r4, r0
    9840:	9a000005 	bls	985c <CGPIOPin::DisableInterrupt()+0x34>
    9844:	e3011f44 	movw	r1, #8004	; 0x1f44
    9848:	e3010f94 	movw	r0, #8084	; 0x1f94
    984c:	e3401001 	movt	r1, #1
    9850:	e3400001 	movt	r0, #1
    9854:	e3a020e1 	mov	r2, #225	; 0xe1
    9858:	eb000d90 	bl	cea0 <assertion_failed>
    985c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9860:	e3530005 	cmp	r3, #5
    9864:	ca000017 	bgt	98c8 <CGPIOPin::DisableInterrupt()+0xa0>
    9868:	e3036f4c 	movw	r6, #16204	; 0x3f4c
    986c:	e3406001 	movt	r6, #1
    9870:	e5942008 	ldr	r2, [r4, #8]
    9874:	e3a0504c 	mov	r5, #76	; 0x4c
    9878:	e5960000 	ldr	r0, [r6]
    987c:	e3435f20 	movt	r5, #16160	; 0x3f20
    9880:	e3a0700c 	mov	r7, #12
    9884:	e0825005 	add	r5, r2, r5
    9888:	e3500000 	cmp	r0, #0
    988c:	e0070397 	mul	r7, r7, r3
    9890:	1a00000a 	bne	98c0 <CGPIOPin::DisableInterrupt()+0x98>
    9894:	e7953007 	ldr	r3, [r5, r7]
    9898:	e594200c 	ldr	r2, [r4, #12]
    989c:	e1c33002 	bic	r3, r3, r2
    98a0:	e7853007 	str	r3, [r5, r7]
    98a4:	e5963000 	ldr	r3, [r6]
    98a8:	e3530000 	cmp	r3, #0
    98ac:	0a000000 	beq	98b4 <CGPIOPin::DisableInterrupt()+0x8c>
    98b0:	eb0002ba 	bl	a3a0 <LeaveCritical>
    98b4:	e3a03006 	mov	r3, #6
    98b8:	e5c43024 	strb	r3, [r4, #36]	; 0x24
    98bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    98c0:	eb000288 	bl	a2e8 <EnterCritical>
    98c4:	eafffff2 	b	9894 <CGPIOPin::DisableInterrupt()+0x6c>
    98c8:	e3011f44 	movw	r1, #8004	; 0x1f44
    98cc:	e30200c8 	movw	r0, #8392	; 0x20c8
    98d0:	e3401001 	movt	r1, #1
    98d4:	e3400001 	movt	r0, #1
    98d8:	e3a020e3 	mov	r2, #227	; 0xe3
    98dc:	eb000d6f 	bl	cea0 <assertion_failed>
    98e0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    98e4:	eaffffdf 	b	9868 <CGPIOPin::DisableInterrupt()+0x40>

000098e8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    98e8:	e5d03010 	ldrb	r3, [r0, #16]
    98ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    98f0:	e2432002 	sub	r2, r3, #2
    98f4:	e3530000 	cmp	r3, #0
    98f8:	13520001 	cmpne	r2, #1
    98fc:	e1a04000 	mov	r4, r0
    9900:	e1a08001 	mov	r8, r1
    9904:	9a000005 	bls	9920 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
    9908:	e3011f44 	movw	r1, #8004	; 0x1f44
    990c:	e3010f94 	movw	r0, #8084	; 0x1f94
    9910:	e3401001 	movt	r1, #1
    9914:	e3400001 	movt	r0, #1
    9918:	e3a020f4 	mov	r2, #244	; 0xf4
    991c:	eb000d5f 	bl	cea0 <assertion_failed>
    9920:	e594301c 	ldr	r3, [r4, #28]
    9924:	e3530000 	cmp	r3, #0
    9928:	0a000034 	beq	9a00 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
    992c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9930:	e3530006 	cmp	r3, #6
    9934:	0a000005 	beq	9950 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x68>
    9938:	e3011f44 	movw	r1, #8004	; 0x1f44
    993c:	e3020030 	movw	r0, #8240	; 0x2030
    9940:	e3401001 	movt	r1, #1
    9944:	e3400001 	movt	r0, #1
    9948:	e3a020f7 	mov	r2, #247	; 0xf7
    994c:	eb000d53 	bl	cea0 <assertion_failed>
    9950:	e3580005 	cmp	r8, #5
    9954:	ca000019 	bgt	99c0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd8>
    9958:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    995c:	e1530008 	cmp	r3, r8
    9960:	0a00001f 	beq	99e4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
    9964:	e3036f4c 	movw	r6, #16204	; 0x3f4c
    9968:	e3406001 	movt	r6, #1
    996c:	e5943008 	ldr	r3, [r4, #8]
    9970:	e3a0504c 	mov	r5, #76	; 0x4c
    9974:	e5960000 	ldr	r0, [r6]
    9978:	e3435f20 	movt	r5, #16160	; 0x3f20
    997c:	e3a0700c 	mov	r7, #12
    9980:	e5c48025 	strb	r8, [r4, #37]	; 0x25
    9984:	e3500000 	cmp	r0, #0
    9988:	e0835005 	add	r5, r3, r5
    998c:	e0070897 	mul	r7, r7, r8
    9990:	1a000008 	bne	99b8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd0>
    9994:	e594200c 	ldr	r2, [r4, #12]
    9998:	e7953007 	ldr	r3, [r5, r7]
    999c:	e1833002 	orr	r3, r3, r2
    99a0:	e7853007 	str	r3, [r5, r7]
    99a4:	e5963000 	ldr	r3, [r6]
    99a8:	e3530000 	cmp	r3, #0
    99ac:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    99b0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    99b4:	ea000279 	b	a3a0 <LeaveCritical>
    99b8:	eb00024a 	bl	a2e8 <EnterCritical>
    99bc:	eafffff4 	b	9994 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
    99c0:	e3011f44 	movw	r1, #8004	; 0x1f44
    99c4:	e3020088 	movw	r0, #8328	; 0x2088
    99c8:	e3401001 	movt	r1, #1
    99cc:	e3400001 	movt	r0, #1
    99d0:	e3a020f8 	mov	r2, #248	; 0xf8
    99d4:	eb000d31 	bl	cea0 <assertion_failed>
    99d8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    99dc:	e1530008 	cmp	r3, r8
    99e0:	1affffdf 	bne	9964 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
    99e4:	e3011f44 	movw	r1, #8004	; 0x1f44
    99e8:	e30200ec 	movw	r0, #8428	; 0x20ec
    99ec:	e3401001 	movt	r1, #1
    99f0:	e3400001 	movt	r0, #1
    99f4:	e3a020f9 	mov	r2, #249	; 0xf9
    99f8:	eb000d28 	bl	cea0 <assertion_failed>
    99fc:	eaffffd8 	b	9964 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
    9a00:	e3011f44 	movw	r1, #8004	; 0x1f44
    9a04:	e3020078 	movw	r0, #8312	; 0x2078
    9a08:	e3401001 	movt	r1, #1
    9a0c:	e3400001 	movt	r0, #1
    9a10:	e3a020f5 	mov	r2, #245	; 0xf5
    9a14:	eb000d21 	bl	cea0 <assertion_failed>
    9a18:	eaffffc3 	b	992c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>

00009a1c <CGPIOPin::DisableInterrupt2()>:
    9a1c:	e5d03010 	ldrb	r3, [r0, #16]
    9a20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9a24:	e2432002 	sub	r2, r3, #2
    9a28:	e3530000 	cmp	r3, #0
    9a2c:	13520001 	cmpne	r2, #1
    9a30:	e1a04000 	mov	r4, r0
    9a34:	9a000005 	bls	9a50 <CGPIOPin::DisableInterrupt2()+0x34>
    9a38:	e3011f44 	movw	r1, #8004	; 0x1f44
    9a3c:	e3010f94 	movw	r0, #8084	; 0x1f94
    9a40:	e3401001 	movt	r1, #1
    9a44:	e3400001 	movt	r0, #1
    9a48:	e300210a 	movw	r2, #266	; 0x10a
    9a4c:	eb000d13 	bl	cea0 <assertion_failed>
    9a50:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9a54:	e3530005 	cmp	r3, #5
    9a58:	ca000017 	bgt	9abc <CGPIOPin::DisableInterrupt2()+0xa0>
    9a5c:	e3036f4c 	movw	r6, #16204	; 0x3f4c
    9a60:	e3406001 	movt	r6, #1
    9a64:	e5942008 	ldr	r2, [r4, #8]
    9a68:	e3a0504c 	mov	r5, #76	; 0x4c
    9a6c:	e5960000 	ldr	r0, [r6]
    9a70:	e3435f20 	movt	r5, #16160	; 0x3f20
    9a74:	e3a0700c 	mov	r7, #12
    9a78:	e0825005 	add	r5, r2, r5
    9a7c:	e3500000 	cmp	r0, #0
    9a80:	e0070397 	mul	r7, r7, r3
    9a84:	1a00000a 	bne	9ab4 <CGPIOPin::DisableInterrupt2()+0x98>
    9a88:	e7953007 	ldr	r3, [r5, r7]
    9a8c:	e594200c 	ldr	r2, [r4, #12]
    9a90:	e1c33002 	bic	r3, r3, r2
    9a94:	e7853007 	str	r3, [r5, r7]
    9a98:	e5963000 	ldr	r3, [r6]
    9a9c:	e3530000 	cmp	r3, #0
    9aa0:	0a000000 	beq	9aa8 <CGPIOPin::DisableInterrupt2()+0x8c>
    9aa4:	eb00023d 	bl	a3a0 <LeaveCritical>
    9aa8:	e3a03006 	mov	r3, #6
    9aac:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    9ab0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9ab4:	eb00020b 	bl	a2e8 <EnterCritical>
    9ab8:	eafffff2 	b	9a88 <CGPIOPin::DisableInterrupt2()+0x6c>
    9abc:	e3011f44 	movw	r1, #8004	; 0x1f44
    9ac0:	e3020108 	movw	r0, #8456	; 0x2108
    9ac4:	e3401001 	movt	r1, #1
    9ac8:	e3400001 	movt	r0, #1
    9acc:	e3a02f43 	mov	r2, #268	; 0x10c
    9ad0:	eb000cf2 	bl	cea0 <assertion_failed>
    9ad4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9ad8:	eaffffdf 	b	9a5c <CGPIOPin::DisableInterrupt2()+0x40>

00009adc <CGPIOPin::ReadAll()>:
    9adc:	e3a03000 	mov	r3, #0
    9ae0:	e3433f20 	movt	r3, #16160	; 0x3f20
    9ae4:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    9ae8:	e12fff1e 	bx	lr

00009aec <CGPIOPin::SetPullUpMode(unsigned int)>:
    9aec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9af0:	e3035f4c 	movw	r5, #16204	; 0x3f4c
    9af4:	e3405001 	movt	r5, #1
    9af8:	e1a07000 	mov	r7, r0
    9afc:	e5973008 	ldr	r3, [r7, #8]
    9b00:	e3a04098 	mov	r4, #152	; 0x98
    9b04:	e5950000 	ldr	r0, [r5]
    9b08:	e3434f20 	movt	r4, #16160	; 0x3f20
    9b0c:	e1a08001 	mov	r8, r1
    9b10:	e0834004 	add	r4, r3, r4
    9b14:	e3500000 	cmp	r0, #0
    9b18:	1a000019 	bne	9b84 <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
    9b1c:	e3580002 	cmp	r8, #2
    9b20:	8a000010 	bhi	9b68 <CGPIOPin::SetPullUpMode(unsigned int)+0x7c>
    9b24:	e3a06000 	mov	r6, #0
    9b28:	e3436f20 	movt	r6, #16160	; 0x3f20
    9b2c:	e3a00005 	mov	r0, #5
    9b30:	e5868094 	str	r8, [r6, #148]	; 0x94
    9b34:	eb00050a 	bl	af64 <CTimer::SimpleusDelay(unsigned int)>
    9b38:	e597300c 	ldr	r3, [r7, #12]
    9b3c:	e3a00005 	mov	r0, #5
    9b40:	e5843000 	str	r3, [r4]
    9b44:	eb000506 	bl	af64 <CTimer::SimpleusDelay(unsigned int)>
    9b48:	e3a03000 	mov	r3, #0
    9b4c:	e5863094 	str	r3, [r6, #148]	; 0x94
    9b50:	e5843000 	str	r3, [r4]
    9b54:	e5953000 	ldr	r3, [r5]
    9b58:	e3530000 	cmp	r3, #0
    9b5c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9b60:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9b64:	ea00020d 	b	a3a0 <LeaveCritical>
    9b68:	e3011f44 	movw	r1, #8004	; 0x1f44
    9b6c:	e302012c 	movw	r0, #8492	; 0x212c
    9b70:	e3401001 	movt	r1, #1
    9b74:	e3400001 	movt	r0, #1
    9b78:	e3002125 	movw	r2, #293	; 0x125
    9b7c:	eb000cc7 	bl	cea0 <assertion_failed>
    9b80:	eaffffe7 	b	9b24 <CGPIOPin::SetPullUpMode(unsigned int)+0x38>
    9b84:	eb0001d7 	bl	a2e8 <EnterCritical>
    9b88:	eaffffe3 	b	9b1c <CGPIOPin::SetPullUpMode(unsigned int)+0x30>

00009b8c <CGPIOPin::SetAlternateFunction(unsigned int)>:
    9b8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9b90:	e1a06001 	mov	r6, r1
    9b94:	e5901004 	ldr	r1, [r0, #4]
    9b98:	e3510035 	cmp	r1, #53	; 0x35
    9b9c:	8a000026 	bhi	9c3c <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
    9ba0:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    9ba4:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    9ba8:	e3a0000a 	mov	r0, #10
    9bac:	e3560005 	cmp	r6, #5
    9bb0:	e0832291 	umull	r2, r3, r1, r2
    9bb4:	e1a041a3 	lsr	r4, r3, #3
    9bb8:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9bbc:	e0641490 	mls	r4, r0, r4, r1
    9bc0:	e2833702 	add	r3, r3, #524288	; 0x80000
    9bc4:	e1a07103 	lsl	r7, r3, #2
    9bc8:	e0844084 	add	r4, r4, r4, lsl #1
    9bcc:	8a000013 	bhi	9c20 <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
    9bd0:	e3035f4c 	movw	r5, #16204	; 0x3f4c
    9bd4:	e3405001 	movt	r5, #1
    9bd8:	e5950000 	ldr	r0, [r5]
    9bdc:	e3500000 	cmp	r0, #0
    9be0:	1a00000c 	bne	9c18 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    9be4:	e3012f1c 	movw	r2, #7964	; 0x1f1c
    9be8:	e3402001 	movt	r2, #1
    9bec:	e5973000 	ldr	r3, [r7]
    9bf0:	e3a01007 	mov	r1, #7
    9bf4:	e7922106 	ldr	r2, [r2, r6, lsl #2]
    9bf8:	e1c33411 	bic	r3, r3, r1, lsl r4
    9bfc:	e1834412 	orr	r4, r3, r2, lsl r4
    9c00:	e5874000 	str	r4, [r7]
    9c04:	e5953000 	ldr	r3, [r5]
    9c08:	e3530000 	cmp	r3, #0
    9c0c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9c10:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9c14:	ea0001e1 	b	a3a0 <LeaveCritical>
    9c18:	eb0001b2 	bl	a2e8 <EnterCritical>
    9c1c:	eafffff0 	b	9be4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    9c20:	e3011f44 	movw	r1, #8004	; 0x1f44
    9c24:	e302014c 	movw	r0, #8524	; 0x214c
    9c28:	e3401001 	movt	r1, #1
    9c2c:	e3400001 	movt	r0, #1
    9c30:	e3002136 	movw	r2, #310	; 0x136
    9c34:	eb000c99 	bl	cea0 <assertion_failed>
    9c38:	eaffffe4 	b	9bd0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
    9c3c:	e1a04000 	mov	r4, r0
    9c40:	e3011f44 	movw	r1, #8004	; 0x1f44
    9c44:	e3020138 	movw	r0, #8504	; 0x2138
    9c48:	e3401001 	movt	r1, #1
    9c4c:	e3400001 	movt	r0, #1
    9c50:	e3002132 	movw	r2, #306	; 0x132
    9c54:	eb000c91 	bl	cea0 <assertion_failed>
    9c58:	e5941004 	ldr	r1, [r4, #4]
    9c5c:	eaffffcf 	b	9ba0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

00009c60 <CGPIOPin::SetMode(TGPIOMode, int)>:
    9c60:	e3510009 	cmp	r1, #9
    9c64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9c68:	e1a04001 	mov	r4, r1
    9c6c:	e1a05000 	mov	r5, r0
    9c70:	e1a06002 	mov	r6, r2
    9c74:	e1a07001 	mov	r7, r1
    9c78:	ca000037 	bgt	9d5c <CGPIOPin::SetMode(TGPIOMode, int)+0xfc>
    9c7c:	e2443004 	sub	r3, r4, #4
    9c80:	e5c54010 	strb	r4, [r5, #16]
    9c84:	e3530005 	cmp	r3, #5
    9c88:	9a00002d 	bls	9d44 <CGPIOPin::SetMode(TGPIOMode, int)+0xe4>
    9c8c:	e2963000 	adds	r3, r6, #0
    9c90:	13a03001 	movne	r3, #1
    9c94:	e3540001 	cmp	r4, #1
    9c98:	13a03000 	movne	r3, #0
    9c9c:	e3530000 	cmp	r3, #0
    9ca0:	1a00005b 	bne	9e14 <CGPIOPin::SetMode(TGPIOMode, int)+0x1b4>
    9ca4:	e5951004 	ldr	r1, [r5, #4]
    9ca8:	e3510035 	cmp	r1, #53	; 0x35
    9cac:	8a00003a 	bhi	9d9c <CGPIOPin::SetMode(TGPIOMode, int)+0x13c>
    9cb0:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    9cb4:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    9cb8:	e3a0c00a 	mov	ip, #10
    9cbc:	e3037f4c 	movw	r7, #16204	; 0x3f4c
    9cc0:	e0832291 	umull	r2, r3, r1, r2
    9cc4:	e3407001 	movt	r7, #1
    9cc8:	e5970000 	ldr	r0, [r7]
    9ccc:	e3500000 	cmp	r0, #0
    9cd0:	e1a041a3 	lsr	r4, r3, #3
    9cd4:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9cd8:	e064149c 	mls	r4, ip, r4, r1
    9cdc:	e2833702 	add	r3, r3, #524288	; 0x80000
    9ce0:	e1a08103 	lsl	r8, r3, #2
    9ce4:	e0844084 	add	r4, r4, r4, lsl #1
    9ce8:	1a000033 	bne	9dbc <CGPIOPin::SetMode(TGPIOMode, int)+0x15c>
    9cec:	e5d52010 	ldrb	r2, [r5, #16]
    9cf0:	e3a01007 	mov	r1, #7
    9cf4:	e5983000 	ldr	r3, [r8]
    9cf8:	e2422001 	sub	r2, r2, #1
    9cfc:	e16f2f12 	clz	r2, r2
    9d00:	e1c33411 	bic	r3, r3, r1, lsl r4
    9d04:	e1a022a2 	lsr	r2, r2, #5
    9d08:	e1834412 	orr	r4, r3, r2, lsl r4
    9d0c:	e5884000 	str	r4, [r8]
    9d10:	e5973000 	ldr	r3, [r7]
    9d14:	e3530000 	cmp	r3, #0
    9d18:	1a000029 	bne	9dc4 <CGPIOPin::SetMode(TGPIOMode, int)+0x164>
    9d1c:	e3560000 	cmp	r6, #0
    9d20:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9d24:	e5d53010 	ldrb	r3, [r5, #16]
    9d28:	e3530003 	cmp	r3, #3
    9d2c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9d30:	ea000010 	b	9d78 <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
    9d34:	00009e04 	.word	0x00009e04
    9d38:	00009df4 	.word	0x00009df4
    9d3c:	00009de4 	.word	0x00009de4
    9d40:	00009dd4 	.word	0x00009dd4
    9d44:	e3560000 	cmp	r6, #0
    9d48:	1a00000b 	bne	9d7c <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
    9d4c:	e2471004 	sub	r1, r7, #4
    9d50:	e1a00005 	mov	r0, r5
    9d54:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9d58:	eaffff8b 	b	9b8c <CGPIOPin::SetAlternateFunction(unsigned int)>
    9d5c:	e3011f44 	movw	r1, #8004	; 0x1f44
    9d60:	e302015c 	movw	r0, #8540	; 0x215c
    9d64:	e3401001 	movt	r1, #1
    9d68:	e3400001 	movt	r0, #1
    9d6c:	e3a0203d 	mov	r2, #61	; 0x3d
    9d70:	eb000c4a 	bl	cea0 <assertion_failed>
    9d74:	eaffffc0 	b	9c7c <CGPIOPin::SetMode(TGPIOMode, int)+0x1c>
    9d78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9d7c:	e1a00005 	mov	r0, r5
    9d80:	e3a01000 	mov	r1, #0
    9d84:	ebffff58 	bl	9aec <CGPIOPin::SetPullUpMode(unsigned int)>
    9d88:	e5d57010 	ldrb	r7, [r5, #16]
    9d8c:	e1a00005 	mov	r0, r5
    9d90:	e2471004 	sub	r1, r7, #4
    9d94:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9d98:	eaffff7b 	b	9b8c <CGPIOPin::SetAlternateFunction(unsigned int)>
    9d9c:	e3011f44 	movw	r1, #8004	; 0x1f44
    9da0:	e3020138 	movw	r0, #8504	; 0x2138
    9da4:	e3401001 	movt	r1, #1
    9da8:	e3400001 	movt	r0, #1
    9dac:	e3a02056 	mov	r2, #86	; 0x56
    9db0:	eb000c3a 	bl	cea0 <assertion_failed>
    9db4:	e5951004 	ldr	r1, [r5, #4]
    9db8:	eaffffbc 	b	9cb0 <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
    9dbc:	eb000149 	bl	a2e8 <EnterCritical>
    9dc0:	eaffffc9 	b	9cec <CGPIOPin::SetMode(TGPIOMode, int)+0x8c>
    9dc4:	eb000175 	bl	a3a0 <LeaveCritical>
    9dc8:	e3560000 	cmp	r6, #0
    9dcc:	1affffd4 	bne	9d24 <CGPIOPin::SetMode(TGPIOMode, int)+0xc4>
    9dd0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9dd4:	e1a00005 	mov	r0, r5
    9dd8:	e3a01001 	mov	r1, #1
    9ddc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9de0:	eaffff41 	b	9aec <CGPIOPin::SetPullUpMode(unsigned int)>
    9de4:	e1a00005 	mov	r0, r5
    9de8:	e3a01002 	mov	r1, #2
    9dec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9df0:	eaffff3d 	b	9aec <CGPIOPin::SetPullUpMode(unsigned int)>
    9df4:	e1a00005 	mov	r0, r5
    9df8:	e3a01000 	mov	r1, #0
    9dfc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9e00:	eafffd71 	b	93cc <CGPIOPin::Write(unsigned int)>
    9e04:	e1a00005 	mov	r0, r5
    9e08:	e3a01000 	mov	r1, #0
    9e0c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9e10:	eaffff35 	b	9aec <CGPIOPin::SetPullUpMode(unsigned int)>
    9e14:	e3a01000 	mov	r1, #0
    9e18:	e1a00005 	mov	r0, r5
    9e1c:	ebffff32 	bl	9aec <CGPIOPin::SetPullUpMode(unsigned int)>
    9e20:	eaffff9f 	b	9ca4 <CGPIOPin::SetMode(TGPIOMode, int)+0x44>

00009e24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    9e24:	e59fc0a8 	ldr	ip, [pc, #168]	; 9ed4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xb0>
    9e28:	e3510035 	cmp	r1, #53	; 0x35
    9e2c:	e92d4070 	push	{r4, r5, r6, lr}
    9e30:	e1a06002 	mov	r6, r2
    9e34:	e5803018 	str	r3, [r0, #24]
    9e38:	e3a02000 	mov	r2, #0
    9e3c:	e3a0300a 	mov	r3, #10
    9e40:	e1a05001 	mov	r5, r1
    9e44:	e5c03010 	strb	r3, [r0, #16]
    9e48:	e1a04000 	mov	r4, r0
    9e4c:	e3a03006 	mov	r3, #6
    9e50:	e5801004 	str	r1, [r0, #4]
    9e54:	e580c000 	str	ip, [r0]
    9e58:	e580201c 	str	r2, [r0, #28]
    9e5c:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    9e60:	e5c03025 	strb	r3, [r0, #37]	; 0x25
    9e64:	8a00000b 	bhi	9e98 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
    9e68:	e1a032a5 	lsr	r3, r5, #5
    9e6c:	e3a02001 	mov	r2, #1
    9e70:	e205501f 	and	r5, r5, #31
    9e74:	e1a00004 	mov	r0, r4
    9e78:	e1a03103 	lsl	r3, r3, #2
    9e7c:	e1a05512 	lsl	r5, r2, r5
    9e80:	e1a01006 	mov	r1, r6
    9e84:	e5843008 	str	r3, [r4, #8]
    9e88:	e584500c 	str	r5, [r4, #12]
    9e8c:	ebffff73 	bl	9c60 <CGPIOPin::SetMode(TGPIOMode, int)>
    9e90:	e1a00004 	mov	r0, r4
    9e94:	e8bd8070 	pop	{r4, r5, r6, pc}
    9e98:	eb0018fc 	bl	10290 <CMachineInfo::Get()>
    9e9c:	e6ef1075 	uxtb	r1, r5
    9ea0:	eb0018cf 	bl	101e4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9ea4:	e3500035 	cmp	r0, #53	; 0x35
    9ea8:	e1a05000 	mov	r5, r0
    9eac:	e5840004 	str	r0, [r4, #4]
    9eb0:	9affffec 	bls	9e68 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9eb4:	e3011f44 	movw	r1, #8004	; 0x1f44
    9eb8:	e3020138 	movw	r0, #8504	; 0x2138
    9ebc:	e3401001 	movt	r1, #1
    9ec0:	e3400001 	movt	r0, #1
    9ec4:	e3a0202b 	mov	r2, #43	; 0x2b
    9ec8:	eb000bf4 	bl	cea0 <assertion_failed>
    9ecc:	e5945004 	ldr	r5, [r4, #4]
    9ed0:	eaffffe4 	b	9e68 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9ed4:	00011f3c 	.word	0x00011f3c

00009ed8 <CGPIOPin::InterruptHandler()>:
    9ed8:	e5d03010 	ldrb	r3, [r0, #16]
    9edc:	e92d4010 	push	{r4, lr}
    9ee0:	e2432002 	sub	r2, r3, #2
    9ee4:	e3530000 	cmp	r3, #0
    9ee8:	13520001 	cmpne	r2, #1
    9eec:	e1a04000 	mov	r4, r0
    9ef0:	9a000005 	bls	9f0c <CGPIOPin::InterruptHandler()+0x34>
    9ef4:	e3011f44 	movw	r1, #8004	; 0x1f44
    9ef8:	e3010f94 	movw	r0, #8084	; 0x1f94
    9efc:	e3401001 	movt	r1, #1
    9f00:	e3400001 	movt	r0, #1
    9f04:	e3002145 	movw	r2, #325	; 0x145
    9f08:	eb000be4 	bl	cea0 <assertion_failed>
    9f0c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9f10:	e3530005 	cmp	r3, #5
    9f14:	da000002 	ble	9f24 <CGPIOPin::InterruptHandler()+0x4c>
    9f18:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9f1c:	e3530005 	cmp	r3, #5
    9f20:	ca000005 	bgt	9f3c <CGPIOPin::InterruptHandler()+0x64>
    9f24:	e594301c 	ldr	r3, [r4, #28]
    9f28:	e3530000 	cmp	r3, #0
    9f2c:	0a00000b 	beq	9f60 <CGPIOPin::InterruptHandler()+0x88>
    9f30:	e5940020 	ldr	r0, [r4, #32]
    9f34:	e8bd4010 	pop	{r4, lr}
    9f38:	e12fff13 	bx	r3
    9f3c:	e3011f44 	movw	r1, #8004	; 0x1f44
    9f40:	e3020174 	movw	r0, #8564	; 0x2174
    9f44:	e3401001 	movt	r1, #1
    9f48:	e3400001 	movt	r0, #1
    9f4c:	e3002147 	movw	r2, #327	; 0x147
    9f50:	eb000bd2 	bl	cea0 <assertion_failed>
    9f54:	e594301c 	ldr	r3, [r4, #28]
    9f58:	e3530000 	cmp	r3, #0
    9f5c:	1afffff3 	bne	9f30 <CGPIOPin::InterruptHandler()+0x58>
    9f60:	e3011f44 	movw	r1, #8004	; 0x1f44
    9f64:	e3020078 	movw	r0, #8312	; 0x2078
    9f68:	e3401001 	movt	r1, #1
    9f6c:	e3400001 	movt	r0, #1
    9f70:	e3002149 	movw	r2, #329	; 0x149
    9f74:	eb000bc9 	bl	cea0 <assertion_failed>
    9f78:	e594301c 	ldr	r3, [r4, #28]
    9f7c:	e5940020 	ldr	r0, [r4, #32]
    9f80:	e8bd4010 	pop	{r4, lr}
    9f84:	e12fff13 	bx	r3

00009f88 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9f88:	e3500035 	cmp	r0, #53	; 0x35
    9f8c:	e92d4070 	push	{r4, r5, r6, lr}
    9f90:	e1a05000 	mov	r5, r0
    9f94:	8a000023 	bhi	a028 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    9f98:	e3036f4c 	movw	r6, #16204	; 0x3f4c
    9f9c:	e3406001 	movt	r6, #1
    9fa0:	e3a04013 	mov	r4, #19
    9fa4:	e3404fc8 	movt	r4, #4040	; 0xfc8
    9fa8:	e5960000 	ldr	r0, [r6]
    9fac:	e08442a5 	add	r4, r4, r5, lsr #5
    9fb0:	e3a02001 	mov	r2, #1
    9fb4:	e205501f 	and	r5, r5, #31
    9fb8:	e3500000 	cmp	r0, #0
    9fbc:	e1a04104 	lsl	r4, r4, #2
    9fc0:	e1a05512 	lsl	r5, r2, r5
    9fc4:	1a000011 	bne	a010 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    9fc8:	e3a0308b 	mov	r3, #139	; 0x8b
    9fcc:	e3433f20 	movt	r3, #16160	; 0x3f20
    9fd0:	e1540003 	cmp	r4, r3
    9fd4:	8a00000c 	bhi	a00c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
    9fd8:	e3a0108b 	mov	r1, #139	; 0x8b
    9fdc:	e3431f20 	movt	r1, #16160	; 0x3f20
    9fe0:	e1e02005 	mvn	r2, r5
    9fe4:	e5943000 	ldr	r3, [r4]
    9fe8:	e0033002 	and	r3, r3, r2
    9fec:	e484300c 	str	r3, [r4], #12
    9ff0:	e1540001 	cmp	r4, r1
    9ff4:	9afffffa 	bls	9fe4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x5c>
    9ff8:	e5963000 	ldr	r3, [r6]
    9ffc:	e3530000 	cmp	r3, #0
    a000:	08bd8070 	popeq	{r4, r5, r6, pc}
    a004:	e8bd4070 	pop	{r4, r5, r6, lr}
    a008:	ea0000e4 	b	a3a0 <LeaveCritical>
    a00c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a010:	eb0000b4 	bl	a2e8 <EnterCritical>
    a014:	e3a0308b 	mov	r3, #139	; 0x8b
    a018:	e3433f20 	movt	r3, #16160	; 0x3f20
    a01c:	e1540003 	cmp	r4, r3
    a020:	9affffec 	bls	9fd8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    a024:	eafffff3 	b	9ff8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    a028:	e3011f44 	movw	r1, #8004	; 0x1f44
    a02c:	e30201c0 	movw	r0, #8640	; 0x21c0
    a030:	e3401001 	movt	r1, #1
    a034:	e3400001 	movt	r0, #1
    a038:	e300214f 	movw	r2, #335	; 0x14f
    a03c:	eb000b97 	bl	cea0 <assertion_failed>
    a040:	eaffffd4 	b	9f98 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

0000a044 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    a044:	e3033f4c 	movw	r3, #16204	; 0x3f4c
    a048:	e3403001 	movt	r3, #1
    a04c:	e3a02001 	mov	r2, #1
    a050:	e5832000 	str	r2, [r3]
    a054:	e12fff1e 	bx	lr

0000a058 <CMemorySystem::~CMemorySystem()>:
    a058:	e5903000 	ldr	r3, [r0]
    a05c:	e92d4070 	push	{r4, r5, r6, lr}
    a060:	e3530000 	cmp	r3, #0
    a064:	e1a04000 	mov	r4, r0
    a068:	0a000005 	beq	a084 <CMemorySystem::~CMemorySystem()+0x2c>
    a06c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    a070:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    a074:	e3c33005 	bic	r3, r3, #5
    a078:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    a07c:	e3a03000 	mov	r3, #0
    a080:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    a084:	e594500c 	ldr	r5, [r4, #12]
    a088:	e3550000 	cmp	r5, #0
    a08c:	0a000004 	beq	a0a4 <CMemorySystem::~CMemorySystem()+0x4c>
    a090:	e1a00005 	mov	r0, r5
    a094:	eb0006e9 	bl	bc40 <CPageTable::~CPageTable()>
    a098:	e1a00005 	mov	r0, r5
    a09c:	e3a01008 	mov	r1, #8
    a0a0:	eb00008e 	bl	a2e0 <operator delete(void*, unsigned int)>
    a0a4:	e5945008 	ldr	r5, [r4, #8]
    a0a8:	e3a03000 	mov	r3, #0
    a0ac:	e584300c 	str	r3, [r4, #12]
    a0b0:	e1550003 	cmp	r5, r3
    a0b4:	0a000004 	beq	a0cc <CMemorySystem::~CMemorySystem()+0x74>
    a0b8:	e1a00005 	mov	r0, r5
    a0bc:	eb0006df 	bl	bc40 <CPageTable::~CPageTable()>
    a0c0:	e1a00005 	mov	r0, r5
    a0c4:	e3a01008 	mov	r1, #8
    a0c8:	eb000084 	bl	a2e0 <operator delete(void*, unsigned int)>
    a0cc:	e1a00004 	mov	r0, r4
    a0d0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a0d4 <CMemorySystem::GetMemSize() const>:
    a0d4:	e5900004 	ldr	r0, [r0, #4]
    a0d8:	e12fff1e 	bx	lr

0000a0dc <CMemorySystem::EnableMMU()>:
    a0dc:	e5903000 	ldr	r3, [r0]
    a0e0:	e92d4010 	push	{r4, lr}
    a0e4:	e3530000 	cmp	r3, #0
    a0e8:	e1a04000 	mov	r4, r0
    a0ec:	0a00001f 	beq	a170 <CMemorySystem::EnableMMU()+0x94>
    a0f0:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    a0f4:	e3833040 	orr	r3, r3, #64	; 0x40
    a0f8:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    a0fc:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    a100:	e3130001 	tst	r3, #1
    a104:	1a000020 	bne	a18c <CMemorySystem::EnableMMU()+0xb0>
    a108:	e3a03002 	mov	r3, #2
    a10c:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    a110:	e5940008 	ldr	r0, [r4, #8]
    a114:	e3500000 	cmp	r0, #0
    a118:	0a00002a 	beq	a1c8 <CMemorySystem::EnableMMU()+0xec>
    a11c:	eb0006d0 	bl	bc64 <CPageTable::GetBaseAddress() const>
    a120:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    a124:	e594000c 	ldr	r0, [r4, #12]
    a128:	e3500000 	cmp	r0, #0
    a12c:	0a00001d 	beq	a1a8 <CMemorySystem::EnableMMU()+0xcc>
    a130:	eb0006cb 	bl	bc64 <CPageTable::GetBaseAddress() const>
    a134:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    a138:	e3a03005 	mov	r3, #5
    a13c:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    a140:	eb00187b 	bl	10334 <InvalidateDataCache>
    a144:	e3a03000 	mov	r3, #0
    a148:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    a14c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    a150:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    a154:	f57ff04f 	dsb	sy
    a158:	f57ff06f 	isb	sy
    a15c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    a160:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    a164:	e3833005 	orr	r3, r3, #5
    a168:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    a16c:	e8bd8010 	pop	{r4, pc}
    a170:	e30211d4 	movw	r1, #8660	; 0x21d4
    a174:	e30201e0 	movw	r0, #8672	; 0x21e0
    a178:	e3401001 	movt	r1, #1
    a17c:	e3400001 	movt	r0, #1
    a180:	e3a020c0 	mov	r2, #192	; 0xc0
    a184:	eb000b45 	bl	cea0 <assertion_failed>
    a188:	eaffffd8 	b	a0f0 <CMemorySystem::EnableMMU()+0x14>
    a18c:	e30211d4 	movw	r1, #8660	; 0x21d4
    a190:	e30201f0 	movw	r0, #8688	; 0x21f0
    a194:	e3401001 	movt	r1, #1
    a198:	e3400001 	movt	r0, #1
    a19c:	e3a020cd 	mov	r2, #205	; 0xcd
    a1a0:	eb000b3e 	bl	cea0 <assertion_failed>
    a1a4:	eaffffd7 	b	a108 <CMemorySystem::EnableMMU()+0x2c>
    a1a8:	e30211d4 	movw	r1, #8660	; 0x21d4
    a1ac:	e3020238 	movw	r0, #8760	; 0x2238
    a1b0:	e3401001 	movt	r1, #1
    a1b4:	e3400001 	movt	r0, #1
    a1b8:	e3a020d7 	mov	r2, #215	; 0xd7
    a1bc:	eb000b37 	bl	cea0 <assertion_failed>
    a1c0:	e594000c 	ldr	r0, [r4, #12]
    a1c4:	eaffffd9 	b	a130 <CMemorySystem::EnableMMU()+0x54>
    a1c8:	e30211d4 	movw	r1, #8660	; 0x21d4
    a1cc:	e302021c 	movw	r0, #8732	; 0x221c
    a1d0:	e3401001 	movt	r1, #1
    a1d4:	e3400001 	movt	r0, #1
    a1d8:	e3a020d3 	mov	r2, #211	; 0xd3
    a1dc:	eb000b2f 	bl	cea0 <assertion_failed>
    a1e0:	e5940008 	ldr	r0, [r4, #8]
    a1e4:	eaffffcc 	b	a11c <CMemorySystem::EnableMMU()+0x40>

0000a1e8 <CMemorySystem::CMemorySystem(int)>:
    a1e8:	e92d4030 	push	{r4, r5, lr}
    a1ec:	e1a04000 	mov	r4, r0
    a1f0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a1f4:	e5801000 	str	r1, [r0]
    a1f8:	e3a05000 	mov	r5, #0
    a1fc:	e28d000c 	add	r0, sp, #12
    a200:	e5845004 	str	r5, [r4, #4]
    a204:	e5845008 	str	r5, [r4, #8]
    a208:	e584500c 	str	r5, [r4, #12]
    a20c:	ebfffbf3 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
    a210:	e3a03014 	mov	r3, #20
    a214:	e58d5000 	str	r5, [sp]
    a218:	e28d000c 	add	r0, sp, #12
    a21c:	e3a01005 	mov	r1, #5
    a220:	e08d2003 	add	r2, sp, r3
    a224:	e3401001 	movt	r1, #1
    a228:	ebfffc34 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a22c:	e3500000 	cmp	r0, #0
    a230:	1a000019 	bne	a29c <CMemorySystem::CMemorySystem(int)+0xb4>
    a234:	e3a01303 	mov	r1, #201326592	; 0xc000000
    a238:	e58d0020 	str	r0, [sp, #32]
    a23c:	e58d1024 	str	r1, [sp, #36]	; 0x24
    a240:	e5841004 	str	r1, [r4, #4]
    a244:	eb001bb8 	bl	1112c <mem_init>
    a248:	e5943000 	ldr	r3, [r4]
    a24c:	e3530000 	cmp	r3, #0
    a250:	0a00000c 	beq	a288 <CMemorySystem::CMemorySystem(int)+0xa0>
    a254:	e3a00008 	mov	r0, #8
    a258:	eb00001c 	bl	a2d0 <operator new(unsigned int)>
    a25c:	e5941004 	ldr	r1, [r4, #4]
    a260:	e1a05000 	mov	r5, r0
    a264:	eb000625 	bl	bb00 <CPageTable::CPageTable(unsigned int)>
    a268:	e5845008 	str	r5, [r4, #8]
    a26c:	e3a00008 	mov	r0, #8
    a270:	eb000016 	bl	a2d0 <operator new(unsigned int)>
    a274:	e1a05000 	mov	r5, r0
    a278:	eb0005f4 	bl	ba50 <CPageTable::CPageTable()>
    a27c:	e584500c 	str	r5, [r4, #12]
    a280:	e1a00004 	mov	r0, r4
    a284:	ebffff94 	bl	a0dc <CMemorySystem::EnableMMU()>
    a288:	e28d000c 	add	r0, sp, #12
    a28c:	ebfffbd9 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
    a290:	e1a00004 	mov	r0, r4
    a294:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a298:	e8bd8030 	pop	{r4, r5, pc}
    a29c:	e59d0020 	ldr	r0, [sp, #32]
    a2a0:	e3500000 	cmp	r0, #0
    a2a4:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
    a2a8:	0affffe4 	beq	a240 <CMemorySystem::CMemorySystem(int)+0x58>
    a2ac:	e30211d4 	movw	r1, #8660	; 0x21d4
    a2b0:	e302024c 	movw	r0, #8780	; 0x224c
    a2b4:	e3401001 	movt	r1, #1
    a2b8:	e3400001 	movt	r0, #1
    a2bc:	e3a02042 	mov	r2, #66	; 0x42
    a2c0:	eb000af6 	bl	cea0 <assertion_failed>
    a2c4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    a2c8:	e59d0020 	ldr	r0, [sp, #32]
    a2cc:	eaffffdb 	b	a240 <CMemorySystem::CMemorySystem(int)+0x58>

0000a2d0 <operator new(unsigned int)>:
    a2d0:	ea001bad 	b	1118c <malloc>

0000a2d4 <operator new[](unsigned int)>:
    a2d4:	ea001bac 	b	1118c <malloc>

0000a2d8 <operator delete(void*)>:
    a2d8:	ea001c0d 	b	11314 <free>

0000a2dc <operator delete[](void*)>:
    a2dc:	ea001c0c 	b	11314 <free>

0000a2e0 <operator delete(void*, unsigned int)>:
    a2e0:	ea001c0b 	b	11314 <free>

0000a2e4 <operator delete[](void*, unsigned int)>:
    a2e4:	ea001c0a 	b	11314 <free>

0000a2e8 <EnterCritical>:
    a2e8:	e2403001 	sub	r3, r0, #1
    a2ec:	e3530001 	cmp	r3, #1
    a2f0:	e92d4070 	push	{r4, r5, r6, lr}
    a2f4:	e1a04000 	mov	r4, r0
    a2f8:	9a000005 	bls	a314 <EnterCritical+0x2c>
    a2fc:	e3021268 	movw	r1, #8808	; 0x2268
    a300:	e3020278 	movw	r0, #8824	; 0x2278
    a304:	e3401001 	movt	r1, #1
    a308:	e3400001 	movt	r0, #1
    a30c:	e3a0204f 	mov	r2, #79	; 0x4f
    a310:	eb000ae2 	bl	cea0 <assertion_failed>
    a314:	e10f5000 	mrs	r5, CPSR
    a318:	e3540002 	cmp	r4, #2
    a31c:	0a000001 	beq	a328 <EnterCritical+0x40>
    a320:	e3150040 	tst	r5, #64	; 0x40
    a324:	1a000016 	bne	a384 <EnterCritical+0x9c>
    a328:	f10c0080 	cpsid	i
    a32c:	e3540002 	cmp	r4, #2
    a330:	0a000011 	beq	a37c <EnterCritical+0x94>
    a334:	e3034f50 	movw	r4, #16208	; 0x3f50
    a338:	e3404001 	movt	r4, #1
    a33c:	e5943000 	ldr	r3, [r4]
    a340:	e3530013 	cmp	r3, #19
    a344:	9a000005 	bls	a360 <EnterCritical+0x78>
    a348:	e3021268 	movw	r1, #8808	; 0x2268
    a34c:	e30202e0 	movw	r0, #8928	; 0x22e0
    a350:	e3401001 	movt	r1, #1
    a354:	e3400001 	movt	r0, #1
    a358:	e3a0205d 	mov	r2, #93	; 0x5d
    a35c:	eb000acf 	bl	cea0 <assertion_failed>
    a360:	e5943000 	ldr	r3, [r4]
    a364:	e2832001 	add	r2, r3, #1
    a368:	e5842000 	str	r2, [r4]
    a36c:	e0844103 	add	r4, r4, r3, lsl #2
    a370:	e5845004 	str	r5, [r4, #4]
    a374:	f57ff05f 	dmb	sy
    a378:	e8bd8070 	pop	{r4, r5, r6, pc}
    a37c:	f10c0040 	cpsid	f
    a380:	eaffffeb 	b	a334 <EnterCritical+0x4c>
    a384:	e3021268 	movw	r1, #8808	; 0x2268
    a388:	e30202b0 	movw	r0, #8880	; 0x22b0
    a38c:	e3401001 	movt	r1, #1
    a390:	e3400001 	movt	r0, #1
    a394:	e3a02055 	mov	r2, #85	; 0x55
    a398:	eb000ac0 	bl	cea0 <assertion_failed>
    a39c:	eaffffe1 	b	a328 <EnterCritical+0x40>

0000a3a0 <LeaveCritical>:
    a3a0:	e92d4010 	push	{r4, lr}
    a3a4:	f57ff05f 	dmb	sy
    a3a8:	e3034f50 	movw	r4, #16208	; 0x3f50
    a3ac:	e3404001 	movt	r4, #1
    a3b0:	e5943000 	ldr	r3, [r4]
    a3b4:	e3530000 	cmp	r3, #0
    a3b8:	1a000005 	bne	a3d4 <LeaveCritical+0x34>
    a3bc:	e3021268 	movw	r1, #8808	; 0x2268
    a3c0:	e3020308 	movw	r0, #8968	; 0x2308
    a3c4:	e3401001 	movt	r1, #1
    a3c8:	e3400001 	movt	r0, #1
    a3cc:	e3a02067 	mov	r2, #103	; 0x67
    a3d0:	eb000ab2 	bl	cea0 <assertion_failed>
    a3d4:	e5943000 	ldr	r3, [r4]
    a3d8:	e2433001 	sub	r3, r3, #1
    a3dc:	e5843000 	str	r3, [r4]
    a3e0:	e0844103 	add	r4, r4, r3, lsl #2
    a3e4:	e5943004 	ldr	r3, [r4, #4]
    a3e8:	e121f003 	msr	CPSR_c, r3
    a3ec:	e8bd8010 	pop	{r4, pc}

0000a3f0 <SyncDataAndInstructionCache>:
    a3f0:	e92d4010 	push	{r4, lr}
    a3f4:	eb0017f8 	bl	103dc <CleanDataCache>
    a3f8:	e3a03000 	mov	r3, #0
    a3fc:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    a400:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    a404:	f57ff04f 	dsb	sy
    a408:	f57ff06f 	isb	sy
    a40c:	e8bd8010 	pop	{r4, pc}

0000a410 <__aeabi_atexit>:
    a410:	e12fff1e 	bx	lr

0000a414 <halt>:
    a414:	f10c0080 	cpsid	i
    a418:	f10c0040 	cpsid	f
    a41c:	f57ff04f 	dsb	sy
    a420:	e320f003 	wfi
    a424:	eafffffc 	b	a41c <halt+0x8>

0000a428 <reboot>:
    a428:	e3a03000 	mov	r3, #0
    a42c:	e3433f10 	movt	r3, #16144	; 0x3f10
    a430:	e3a01001 	mov	r1, #1
    a434:	e3a02020 	mov	r2, #32
    a438:	e3451a00 	movt	r1, #23040	; 0x5a00
    a43c:	e3452a00 	movt	r2, #23040	; 0x5a00
    a440:	e5831024 	str	r1, [r3, #36]	; 0x24
    a444:	e583201c 	str	r2, [r3, #28]
    a448:	eafffffe 	b	a448 <reboot+0x20>

0000a44c <sysinit>:
    a44c:	e92d4030 	push	{r4, r5, lr}
    a450:	e24dd01c 	sub	sp, sp, #28
    a454:	f1080040 	cpsie	f
    a458:	eb00179a 	bl	102c8 <InvalidateDataCacheL1Only>
    a45c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    a460:	e3083064 	movw	r3, #32868	; 0x8064
    a464:	e3403000 	movt	r3, #0
    a468:	e582309c 	str	r3, [r2, #156]	; 0x9c
    a46c:	e58230ac 	str	r3, [r2, #172]	; 0xac
    a470:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    a474:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    a478:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    a47c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    a480:	f57ff06f 	isb	sy
    a484:	eee82a10 	vmsr	fpexc, r2
    a488:	e3a01000 	mov	r1, #0
    a48c:	eee11a10 	vmsr	fpscr, r1
    a490:	e3033f44 	movw	r3, #16196	; 0x3f44
    a494:	e3032fec 	movw	r2, #16364	; 0x3fec
    a498:	e3403001 	movt	r3, #1
    a49c:	e3402001 	movt	r2, #1
    a4a0:	e1530002 	cmp	r3, r2
    a4a4:	2a000002 	bcs	a4b4 <sysinit+0x68>
    a4a8:	e4c31001 	strb	r1, [r3], #1
    a4ac:	e1530002 	cmp	r3, r2
    a4b0:	1afffffc 	bne	a4a8 <sysinit+0x5c>
    a4b4:	e1a0000d 	mov	r0, sp
    a4b8:	e3035e54 	movw	r5, #15956	; 0x3e54
    a4bc:	e3034e48 	movw	r4, #15944	; 0x3e48
    a4c0:	e3405001 	movt	r5, #1
    a4c4:	e3404001 	movt	r4, #1
    a4c8:	eb001681 	bl	fed4 <CMachineInfo::CMachineInfo()>
    a4cc:	e1540005 	cmp	r4, r5
    a4d0:	2a000003 	bcs	a4e4 <sysinit+0x98>
    a4d4:	e4943004 	ldr	r3, [r4], #4
    a4d8:	e12fff33 	blx	r3
    a4dc:	e1540005 	cmp	r4, r5
    a4e0:	3afffffb 	bcc	a4d4 <sysinit+0x88>
    a4e4:	ebfff6e1 	bl	8070 <main>
    a4e8:	e3500001 	cmp	r0, #1
    a4ec:	0a000000 	beq	a4f4 <sysinit+0xa8>
    a4f0:	ebffffc7 	bl	a414 <halt>
    a4f4:	ebffffcb 	bl	a428 <reboot>

0000a4f8 <CTimer::CTimer(CInterruptSystem*)>:
    a4f8:	e92d4070 	push	{r4, r5, r6, lr}
    a4fc:	e1a04000 	mov	r4, r0
    a500:	e3035fa8 	movw	r5, #16296	; 0x3fa8
    a504:	e3405001 	movt	r5, #1
    a508:	e5801000 	str	r1, [r0]
    a50c:	e3a03000 	mov	r3, #0
    a510:	e3a06001 	mov	r6, #1
    a514:	e5803004 	str	r3, [r0, #4]
    a518:	e5843008 	str	r3, [r4, #8]
    a51c:	e2800018 	add	r0, r0, #24
    a520:	e5843014 	str	r3, [r4, #20]
    a524:	e584300c 	str	r3, [r4, #12]
    a528:	e5846010 	str	r6, [r4, #16]
    a52c:	eb0019bb 	bl	10c20 <CPtrList::CPtrList()>
    a530:	e5952000 	ldr	r2, [r5]
    a534:	e3053730 	movw	r3, #22320	; 0x5730
    a538:	e584601c 	str	r6, [r4, #28]
    a53c:	e3520000 	cmp	r2, #0
    a540:	e3403005 	movt	r3, #5
    a544:	e300215e 	movw	r2, #350	; 0x15e
    a548:	e5843020 	str	r3, [r4, #32]
    a54c:	e5842024 	str	r2, [r4, #36]	; 0x24
    a550:	0a000005 	beq	a56c <CTimer::CTimer(CInterruptSystem*)+0x74>
    a554:	e3021358 	movw	r1, #9048	; 0x2358
    a558:	e3010d48 	movw	r0, #7496	; 0x1d48
    a55c:	e3401001 	movt	r1, #1
    a560:	e3400001 	movt	r0, #1
    a564:	e3a0203b 	mov	r2, #59	; 0x3b
    a568:	eb000a4c 	bl	cea0 <assertion_failed>
    a56c:	e5854000 	str	r4, [r5]
    a570:	e1a00004 	mov	r0, r4
    a574:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a578 <CTimer::~CTimer()>:
    a578:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a57c:	e1a09000 	mov	r9, r0
    a580:	e5900000 	ldr	r0, [r0]
    a584:	e3500000 	cmp	r0, #0
    a588:	0a00002c 	beq	a640 <CTimer::~CTimer()+0xc8>
    a58c:	e3a01003 	mov	r1, #3
    a590:	e3027358 	movw	r7, #9048	; 0x2358
    a594:	e302a37c 	movw	sl, #9084	; 0x237c
    a598:	e3048d43 	movw	r8, #19779	; 0x4d43
    a59c:	eb001457 	bl	f700 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    a5a0:	e3407001 	movt	r7, #1
    a5a4:	e340a001 	movt	sl, #1
    a5a8:	e2894018 	add	r4, r9, #24
    a5ac:	e3448b54 	movt	r8, #19284	; 0x4b54
    a5b0:	ea000010 	b	a5f8 <CTimer::~CTimer()+0x80>
    a5b4:	eb0019c2 	bl	10cc4 <CPtrList::GetPtr(TPtrListElement*)>
    a5b8:	e2506000 	subs	r6, r0, #0
    a5bc:	0a00001a 	beq	a62c <CTimer::~CTimer()+0xb4>
    a5c0:	e5963000 	ldr	r3, [r6]
    a5c4:	e3020388 	movw	r0, #9096	; 0x2388
    a5c8:	e3a02049 	mov	r2, #73	; 0x49
    a5cc:	e1a01007 	mov	r1, r7
    a5d0:	e1530008 	cmp	r3, r8
    a5d4:	e3400001 	movt	r0, #1
    a5d8:	0a000000 	beq	a5e0 <CTimer::~CTimer()+0x68>
    a5dc:	eb000a2f 	bl	cea0 <assertion_failed>
    a5e0:	e1a01005 	mov	r1, r5
    a5e4:	e1a00004 	mov	r0, r4
    a5e8:	eb001a55 	bl	10f44 <CPtrList::Remove(TPtrListElement*)>
    a5ec:	e1a00006 	mov	r0, r6
    a5f0:	e3a01014 	mov	r1, #20
    a5f4:	ebffff39 	bl	a2e0 <operator delete(void*, unsigned int)>
    a5f8:	e1a00004 	mov	r0, r4
    a5fc:	eb001997 	bl	10c60 <CPtrList::GetFirst()>
    a600:	e2505000 	subs	r5, r0, #0
    a604:	e1a00004 	mov	r0, r4
    a608:	e1a01005 	mov	r1, r5
    a60c:	1affffe8 	bne	a5b4 <CTimer::~CTimer()+0x3c>
    a610:	e3033fa8 	movw	r3, #16296	; 0x3fa8
    a614:	e3403001 	movt	r3, #1
    a618:	e1a00004 	mov	r0, r4
    a61c:	e5835000 	str	r5, [r3]
    a620:	eb001981 	bl	10c2c <CPtrList::~CPtrList()>
    a624:	e1a00009 	mov	r0, r9
    a628:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a62c:	e3a02048 	mov	r2, #72	; 0x48
    a630:	e1a01007 	mov	r1, r7
    a634:	e1a0000a 	mov	r0, sl
    a638:	eb000a18 	bl	cea0 <assertion_failed>
    a63c:	eaffffdf 	b	a5c0 <CTimer::~CTimer()+0x48>
    a640:	e3021358 	movw	r1, #9048	; 0x2358
    a644:	e3020364 	movw	r0, #9060	; 0x2364
    a648:	e3401001 	movt	r1, #1
    a64c:	e3400001 	movt	r0, #1
    a650:	e3a02041 	mov	r2, #65	; 0x41
    a654:	eb000a11 	bl	cea0 <assertion_failed>
    a658:	e5990000 	ldr	r0, [r9]
    a65c:	eaffffca 	b	a58c <CTimer::~CTimer()+0x14>

0000a660 <CTimer::SetTimeZone(int)>:
    a660:	e2813e59 	add	r3, r1, #1424	; 0x590
    a664:	e3002b3e 	movw	r2, #2878	; 0xb3e
    a668:	e283300f 	add	r3, r3, #15
    a66c:	e1530002 	cmp	r3, r2
    a670:	95801014 	strls	r1, [r0, #20]
    a674:	93a00001 	movls	r0, #1
    a678:	83a00000 	movhi	r0, #0
    a67c:	e12fff1e 	bx	lr

0000a680 <CTimer::GetTimeZone() const>:
    a680:	e5900014 	ldr	r0, [r0, #20]
    a684:	e12fff1e 	bx	lr

0000a688 <CTimer::SetTime(unsigned int, int)>:
    a688:	e3520000 	cmp	r2, #0
    a68c:	e92d4070 	push	{r4, r5, r6, lr}
    a690:	e1a04000 	mov	r4, r0
    a694:	e1a05001 	mov	r5, r1
    a698:	1a000005 	bne	a6b4 <CTimer::SetTime(unsigned int, int)+0x2c>
    a69c:	e5901014 	ldr	r1, [r0, #20]
    a6a0:	e3a0303c 	mov	r3, #60	; 0x3c
    a6a4:	e0030193 	mul	r3, r3, r1
    a6a8:	e3530000 	cmp	r3, #0
    a6ac:	ba00000e 	blt	a6ec <CTimer::SetTime(unsigned int, int)+0x64>
    a6b0:	e0855003 	add	r5, r5, r3
    a6b4:	e5940010 	ldr	r0, [r4, #16]
    a6b8:	e3500000 	cmp	r0, #0
    a6bc:	1a000002 	bne	a6cc <CTimer::SetTime(unsigned int, int)+0x44>
    a6c0:	e3a00001 	mov	r0, #1
    a6c4:	e584500c 	str	r5, [r4, #12]
    a6c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a6cc:	ebffff05 	bl	a2e8 <EnterCritical>
    a6d0:	e5943010 	ldr	r3, [r4, #16]
    a6d4:	e584500c 	str	r5, [r4, #12]
    a6d8:	e3530000 	cmp	r3, #0
    a6dc:	0a000007 	beq	a700 <CTimer::SetTime(unsigned int, int)+0x78>
    a6e0:	ebffff2e 	bl	a3a0 <LeaveCritical>
    a6e4:	e3a00001 	mov	r0, #1
    a6e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a6ec:	e2631000 	rsb	r1, r3, #0
    a6f0:	e1510005 	cmp	r1, r5
    a6f4:	daffffed 	ble	a6b0 <CTimer::SetTime(unsigned int, int)+0x28>
    a6f8:	e1a00002 	mov	r0, r2
    a6fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    a700:	e3a00001 	mov	r0, #1
    a704:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a708 <CTimer::GetClockTicks()>:
    a708:	e3a03a03 	mov	r3, #12288	; 0x3000
    a70c:	e3433f00 	movt	r3, #16128	; 0x3f00
    a710:	e5930004 	ldr	r0, [r3, #4]
    a714:	e12fff1e 	bx	lr

0000a718 <CTimer::GetTicks() const>:
    a718:	e5900004 	ldr	r0, [r0, #4]
    a71c:	e12fff1e 	bx	lr

0000a720 <CTimer::GetUptime() const>:
    a720:	e5900008 	ldr	r0, [r0, #8]
    a724:	e12fff1e 	bx	lr

0000a728 <CTimer::GetTime() const>:
    a728:	e590000c 	ldr	r0, [r0, #12]
    a72c:	e12fff1e 	bx	lr

0000a730 <CTimer::GetUniversalTime() const>:
    a730:	e5902014 	ldr	r2, [r0, #20]
    a734:	e3a0303c 	mov	r3, #60	; 0x3c
    a738:	e590000c 	ldr	r0, [r0, #12]
    a73c:	e0030293 	mul	r3, r3, r2
    a740:	e1530000 	cmp	r3, r0
    a744:	d0400003 	suble	r0, r0, r3
    a748:	c3a00000 	movgt	r0, #0
    a74c:	e12fff1e 	bx	lr

0000a750 <CTimer::GetTimeString()>:
    a750:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a754:	e1a05000 	mov	r5, r0
    a758:	e5900010 	ldr	r0, [r0, #16]
    a75c:	e24dd01c 	sub	sp, sp, #28
    a760:	e3500000 	cmp	r0, #0
    a764:	1a00006c 	bne	a91c <CTimer::GetTimeString()+0x1cc>
    a768:	e595400c 	ldr	r4, [r5, #12]
    a76c:	e5959004 	ldr	r9, [r5, #4]
    a770:	e1940009 	orrs	r0, r4, r9
    a774:	0a00004f 	beq	a8b8 <CTimer::GetTimeString()+0x168>
    a778:	e308a889 	movw	sl, #34953	; 0x8889
    a77c:	e348a888 	movt	sl, #34952	; 0x8888
    a780:	e30b23c5 	movw	r2, #46021	; 0xb3c5
    a784:	e34921a2 	movt	r2, #37282	; 0x91a2
    a788:	e0876a94 	umull	r6, r7, r4, sl
    a78c:	e304e507 	movw	lr, #17671	; 0x4507
    a790:	e0832294 	umull	r2, r3, r4, r2
    a794:	e34ce22e 	movt	lr, #49710	; 0xc22e
    a798:	e3a0003c 	mov	r0, #60	; 0x3c
    a79c:	e308151f 	movw	r1, #34079	; 0x851f
    a7a0:	e1a0c2a7 	lsr	ip, r7, #5
    a7a4:	e34511eb 	movt	r1, #20971	; 0x51eb
    a7a8:	e30057b2 	movw	r5, #1970	; 0x7b2
    a7ac:	e08baa9c 	umull	sl, fp, ip, sl
    a7b0:	e1a065a3 	lsr	r6, r3, #11
    a7b4:	e0832e94 	umull	r2, r3, r4, lr
    a7b8:	e3a0a064 	mov	sl, #100	; 0x64
    a7bc:	e0674c90 	mls	r7, r0, ip, r4
    a7c0:	e1a082ab 	lsr	r8, fp, #5
    a7c4:	e3a0ee19 	mov	lr, #400	; 0x190
    a7c8:	e068c890 	mls	r8, r0, r8, ip
    a7cc:	e1a04823 	lsr	r4, r3, #16
    a7d0:	e300c16d 	movw	ip, #365	; 0x16d
    a7d4:	e300016e 	movw	r0, #366	; 0x16e
    a7d8:	ea000001 	b	a7e4 <CTimer::GetTimeString()+0x94>
    a7dc:	e0444002 	sub	r4, r4, r2
    a7e0:	e2855001 	add	r5, r5, #1
    a7e4:	e0832195 	umull	r2, r3, r5, r1
    a7e8:	e1a022a3 	lsr	r2, r3, #5
    a7ec:	e1a033a3 	lsr	r3, r3, #7
    a7f0:	e062529a 	mls	r2, sl, r2, r5
    a7f4:	e063539e 	mls	r3, lr, r3, r5
    a7f8:	e3520000 	cmp	r2, #0
    a7fc:	e16f3f13 	clz	r3, r3
    a800:	01a032a3 	lsreq	r3, r3, #5
    a804:	0a000002 	beq	a814 <CTimer::GetTimeString()+0xc4>
    a808:	e3150003 	tst	r5, #3
    a80c:	03a03001 	moveq	r3, #1
    a810:	13a03000 	movne	r3, #0
    a814:	e3530000 	cmp	r3, #0
    a818:	01a0200c 	moveq	r2, ip
    a81c:	11a02000 	movne	r2, r0
    a820:	e1540002 	cmp	r4, r2
    a824:	2affffec 	bcs	a7dc <CTimer::GetTimeString()+0x8c>
    a828:	e3020320 	movw	r0, #8992	; 0x2320
    a82c:	e3a0a000 	mov	sl, #0
    a830:	e3400001 	movt	r0, #1
    a834:	ea000001 	b	a840 <CTimer::GetTimeString()+0xf0>
    a838:	e0444002 	sub	r4, r4, r2
    a83c:	e28aa001 	add	sl, sl, #1
    a840:	e35a0001 	cmp	sl, #1
    a844:	13a01000 	movne	r1, #0
    a848:	02031001 	andeq	r1, r3, #1
    a84c:	e3a0201d 	mov	r2, #29
    a850:	e3510000 	cmp	r1, #0
    a854:	0790210a 	ldreq	r2, [r0, sl, lsl #2]
    a858:	e1540002 	cmp	r4, r2
    a85c:	2afffff5 	bcs	a838 <CTimer::GetTimeString()+0xe8>
    a860:	e308251f 	movw	r2, #34079	; 0x851f
    a864:	e34521eb 	movt	r2, #20971	; 0x51eb
    a868:	e3a01064 	mov	r1, #100	; 0x64
    a86c:	e3a00010 	mov	r0, #16
    a870:	e0832299 	umull	r2, r3, r9, r2
    a874:	e1a0b2a3 	lsr	fp, r3, #5
    a878:	e06b9b91 	mls	fp, r1, fp, r9
    a87c:	ebfffe93 	bl	a2d0 <operator new(unsigned int)>
    a880:	e1a09000 	mov	r9, r0
    a884:	eb000e92 	bl	e2d4 <CString::CString()>
    a888:	e30037b7 	movw	r3, #1975	; 0x7b7
    a88c:	e1550003 	cmp	r5, r3
    a890:	8a00000a 	bhi	a8c0 <CTimer::GetTimeString()+0x170>
    a894:	e1a00009 	mov	r0, r9
    a898:	e58db004 	str	fp, [sp, #4]
    a89c:	e1a03008 	mov	r3, r8
    a8a0:	e58d7000 	str	r7, [sp]
    a8a4:	e1a02006 	mov	r2, r6
    a8a8:	e30213cc 	movw	r1, #9164	; 0x23cc
    a8ac:	e3401001 	movt	r1, #1
    a8b0:	eb0011e6 	bl	f050 <CString::Format(char const*, ...)>
    a8b4:	e1a00009 	mov	r0, r9
    a8b8:	e28dd01c 	add	sp, sp, #28
    a8bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8c0:	e30a3aab 	movw	r3, #43691	; 0xaaab
    a8c4:	e34a3aaa 	movt	r3, #43690	; 0xaaaa
    a8c8:	e3a0c018 	mov	ip, #24
    a8cc:	e3032e54 	movw	r2, #15956	; 0x3e54
    a8d0:	e0810396 	umull	r0, r1, r6, r3
    a8d4:	e3402001 	movt	r2, #1
    a8d8:	e58db00c 	str	fp, [sp, #12]
    a8dc:	e2843001 	add	r3, r4, #1
    a8e0:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    a8e4:	e58d7008 	str	r7, [sp, #8]
    a8e8:	e58d8004 	str	r8, [sp, #4]
    a8ec:	e1cd01f0 	strd	r0, [sp, #16]
    a8f0:	e30213b0 	movw	r1, #9136	; 0x23b0
    a8f4:	e59d0014 	ldr	r0, [sp, #20]
    a8f8:	e3401001 	movt	r1, #1
    a8fc:	e1a0e220 	lsr	lr, r0, #4
    a900:	e1a00009 	mov	r0, r9
    a904:	e0666e9c 	mls	r6, ip, lr, r6
    a908:	e58d6000 	str	r6, [sp]
    a90c:	eb0011cf 	bl	f050 <CString::Format(char const*, ...)>
    a910:	e1a00009 	mov	r0, r9
    a914:	e28dd01c 	add	sp, sp, #28
    a918:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a91c:	ebfffe71 	bl	a2e8 <EnterCritical>
    a920:	e5953010 	ldr	r3, [r5, #16]
    a924:	e595400c 	ldr	r4, [r5, #12]
    a928:	e3530000 	cmp	r3, #0
    a92c:	e5959004 	ldr	r9, [r5, #4]
    a930:	0affff8e 	beq	a770 <CTimer::GetTimeString()+0x20>
    a934:	ebfffe99 	bl	a3a0 <LeaveCritical>
    a938:	eaffff8c 	b	a770 <CTimer::GetTimeString()+0x20>

0000a93c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    a93c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a940:	e24dd00c 	sub	sp, sp, #12
    a944:	e1a0a000 	mov	sl, r0
    a948:	e3a00014 	mov	r0, #20
    a94c:	e1a06001 	mov	r6, r1
    a950:	e1a04002 	mov	r4, r2
    a954:	e1a07003 	mov	r7, r3
    a958:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    a95c:	ebfffe5b 	bl	a2d0 <operator new(unsigned int)>
    a960:	e59a1004 	ldr	r1, [sl, #4]
    a964:	e3540000 	cmp	r4, #0
    a968:	e0816006 	add	r6, r1, r6
    a96c:	e1a09000 	mov	r9, r0
    a970:	0a000044 	beq	aa88 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
    a974:	e59a001c 	ldr	r0, [sl, #28]
    a978:	e3042d43 	movw	r2, #19779	; 0x4d43
    a97c:	e5894004 	str	r4, [r9, #4]
    a980:	e3442b54 	movt	r2, #19284	; 0x4b54
    a984:	e3500000 	cmp	r0, #0
    a988:	e5896008 	str	r6, [r9, #8]
    a98c:	e589700c 	str	r7, [r9, #12]
    a990:	e5895010 	str	r5, [r9, #16]
    a994:	e5892000 	str	r2, [r9]
    a998:	1a000038 	bne	aa80 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    a99c:	e28a5018 	add	r5, sl, #24
    a9a0:	e1a00005 	mov	r0, r5
    a9a4:	eb0018ad 	bl	10c60 <CPtrList::GetFirst()>
    a9a8:	e2504000 	subs	r4, r0, #0
    a9ac:	0a00002e 	beq	aa6c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    a9b0:	e3027358 	movw	r7, #9048	; 0x2358
    a9b4:	e30233e0 	movw	r3, #9184	; 0x23e0
    a9b8:	e3048d43 	movw	r8, #19779	; 0x4d43
    a9bc:	e3403001 	movt	r3, #1
    a9c0:	e3407001 	movt	r7, #1
    a9c4:	e58d3004 	str	r3, [sp, #4]
    a9c8:	e3448b54 	movt	r8, #19284	; 0x4b54
    a9cc:	ea000011 	b	aa18 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    a9d0:	e59bc000 	ldr	ip, [fp]
    a9d4:	e30203f0 	movw	r0, #9200	; 0x23f0
    a9d8:	e3002116 	movw	r2, #278	; 0x116
    a9dc:	e1a01007 	mov	r1, r7
    a9e0:	e15c0008 	cmp	ip, r8
    a9e4:	e3400001 	movt	r0, #1
    a9e8:	0a000000 	beq	a9f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb4>
    a9ec:	eb00092b 	bl	cea0 <assertion_failed>
    a9f0:	e59b3008 	ldr	r3, [fp, #8]
    a9f4:	e1a01004 	mov	r1, r4
    a9f8:	e1a00005 	mov	r0, r5
    a9fc:	e0433006 	sub	r3, r3, r6
    aa00:	e3530000 	cmp	r3, #0
    aa04:	ca00000d 	bgt	aa40 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x104>
    aa08:	eb001896 	bl	10c68 <CPtrList::GetNext(TPtrListElement*)>
    aa0c:	e3500000 	cmp	r0, #0
    aa10:	0a000015 	beq	aa6c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    aa14:	e1a04000 	mov	r4, r0
    aa18:	e1a01004 	mov	r1, r4
    aa1c:	e1a00005 	mov	r0, r5
    aa20:	eb0018a7 	bl	10cc4 <CPtrList::GetPtr(TPtrListElement*)>
    aa24:	e250b000 	subs	fp, r0, #0
    aa28:	1affffe8 	bne	a9d0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    aa2c:	e3002115 	movw	r2, #277	; 0x115
    aa30:	e1a01007 	mov	r1, r7
    aa34:	e59d0004 	ldr	r0, [sp, #4]
    aa38:	eb000918 	bl	cea0 <assertion_failed>
    aa3c:	eaffffe3 	b	a9d0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    aa40:	e1a01004 	mov	r1, r4
    aa44:	e1a00005 	mov	r0, r5
    aa48:	e1a02009 	mov	r2, r9
    aa4c:	eb0018b3 	bl	10d20 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    aa50:	e59a301c 	ldr	r3, [sl, #28]
    aa54:	e3530000 	cmp	r3, #0
    aa58:	0a000000 	beq	aa60 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x124>
    aa5c:	ebfffe4f 	bl	a3a0 <LeaveCritical>
    aa60:	e1a00009 	mov	r0, r9
    aa64:	e28dd00c 	add	sp, sp, #12
    aa68:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa6c:	e1a01004 	mov	r1, r4
    aa70:	e1a00005 	mov	r0, r5
    aa74:	e1a02009 	mov	r2, r9
    aa78:	eb0018ee 	bl	10e38 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    aa7c:	eafffff3 	b	aa50 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x114>
    aa80:	ebfffe18 	bl	a2e8 <EnterCritical>
    aa84:	eaffffc4 	b	a99c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x60>
    aa88:	e3021358 	movw	r1, #9048	; 0x2358
    aa8c:	e30306a0 	movw	r0, #13984	; 0x36a0
    aa90:	e3401001 	movt	r1, #1
    aa94:	e3400001 	movt	r0, #1
    aa98:	e3002105 	movw	r2, #261	; 0x105
    aa9c:	eb0008ff 	bl	cea0 <assertion_failed>
    aaa0:	eaffffb3 	b	a974 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

0000aaa4 <CTimer::CancelKernelTimer(unsigned int)>:
    aaa4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aaa8:	e2514000 	subs	r4, r1, #0
    aaac:	e1a05000 	mov	r5, r0
    aab0:	0a000022 	beq	ab40 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
    aab4:	e595001c 	ldr	r0, [r5, #28]
    aab8:	e3500000 	cmp	r0, #0
    aabc:	1a00001d 	bne	ab38 <CTimer::CancelKernelTimer(unsigned int)+0x94>
    aac0:	e2856018 	add	r6, r5, #24
    aac4:	e1a01004 	mov	r1, r4
    aac8:	e1a00006 	mov	r0, r6
    aacc:	eb001978 	bl	110b4 <CPtrList::Find(void*)>
    aad0:	e2507000 	subs	r7, r0, #0
    aad4:	0a000012 	beq	ab24 <CTimer::CancelKernelTimer(unsigned int)+0x80>
    aad8:	e5942000 	ldr	r2, [r4]
    aadc:	e3043d43 	movw	r3, #19779	; 0x4d43
    aae0:	e3443b54 	movt	r3, #19284	; 0x4b54
    aae4:	e1520003 	cmp	r2, r3
    aae8:	0a000005 	beq	ab04 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    aaec:	e3021358 	movw	r1, #9048	; 0x2358
    aaf0:	e3020388 	movw	r0, #9096	; 0x2388
    aaf4:	e3401001 	movt	r1, #1
    aaf8:	e3400001 	movt	r0, #1
    aafc:	e3002139 	movw	r2, #313	; 0x139
    ab00:	eb0008e6 	bl	cea0 <assertion_failed>
    ab04:	e1a01007 	mov	r1, r7
    ab08:	e1a00006 	mov	r0, r6
    ab0c:	eb00190c 	bl	10f44 <CPtrList::Remove(TPtrListElement*)>
    ab10:	e3a03000 	mov	r3, #0
    ab14:	e1a00004 	mov	r0, r4
    ab18:	e5843000 	str	r3, [r4]
    ab1c:	e3a01014 	mov	r1, #20
    ab20:	ebfffdee 	bl	a2e0 <operator delete(void*, unsigned int)>
    ab24:	e595301c 	ldr	r3, [r5, #28]
    ab28:	e3530000 	cmp	r3, #0
    ab2c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    ab30:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    ab34:	eafffe19 	b	a3a0 <LeaveCritical>
    ab38:	ebfffdea 	bl	a2e8 <EnterCritical>
    ab3c:	eaffffdf 	b	aac0 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    ab40:	e3021358 	movw	r1, #9048	; 0x2358
    ab44:	e302037c 	movw	r0, #9084	; 0x237c
    ab48:	e3401001 	movt	r1, #1
    ab4c:	e3400001 	movt	r0, #1
    ab50:	e3002132 	movw	r2, #306	; 0x132
    ab54:	eb0008d1 	bl	cea0 <assertion_failed>
    ab58:	eaffffd5 	b	aab4 <CTimer::CancelKernelTimer(unsigned int)+0x10>

0000ab5c <CTimer::PollKernelTimers()>:
    ab5c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab60:	e1a06000 	mov	r6, r0
    ab64:	e590001c 	ldr	r0, [r0, #28]
    ab68:	e3500000 	cmp	r0, #0
    ab6c:	1a00004f 	bne	acb0 <CTimer::PollKernelTimers()+0x154>
    ab70:	e2867018 	add	r7, r6, #24
    ab74:	e1a00007 	mov	r0, r7
    ab78:	eb001838 	bl	10c60 <CPtrList::GetFirst()>
    ab7c:	e2505000 	subs	r5, r0, #0
    ab80:	0a000040 	beq	ac88 <CTimer::PollKernelTimers()+0x12c>
    ab84:	e3029358 	movw	r9, #9048	; 0x2358
    ab88:	e302a37c 	movw	sl, #9084	; 0x237c
    ab8c:	e3048d43 	movw	r8, #19779	; 0x4d43
    ab90:	e3409001 	movt	r9, #1
    ab94:	e340a001 	movt	sl, #1
    ab98:	e3448b54 	movt	r8, #19284	; 0x4b54
    ab9c:	ea000010 	b	abe4 <CTimer::PollKernelTimers()+0x88>
    aba0:	e5945004 	ldr	r5, [r4, #4]
    aba4:	e3550000 	cmp	r5, #0
    aba8:	0a00002d 	beq	ac64 <CTimer::PollKernelTimers()+0x108>
    abac:	e5942010 	ldr	r2, [r4, #16]
    abb0:	e1a00004 	mov	r0, r4
    abb4:	e594100c 	ldr	r1, [r4, #12]
    abb8:	e12fff35 	blx	r5
    abbc:	e3a03000 	mov	r3, #0
    abc0:	e1a00004 	mov	r0, r4
    abc4:	e5843000 	str	r3, [r4]
    abc8:	e3a01014 	mov	r1, #20
    abcc:	ebfffdc3 	bl	a2e0 <operator delete(void*, unsigned int)>
    abd0:	e596001c 	ldr	r0, [r6, #28]
    abd4:	e3500000 	cmp	r0, #0
    abd8:	1a000027 	bne	ac7c <CTimer::PollKernelTimers()+0x120>
    abdc:	e25b5000 	subs	r5, fp, #0
    abe0:	0a000028 	beq	ac88 <CTimer::PollKernelTimers()+0x12c>
    abe4:	e1a01005 	mov	r1, r5
    abe8:	e1a00007 	mov	r0, r7
    abec:	eb001834 	bl	10cc4 <CPtrList::GetPtr(TPtrListElement*)>
    abf0:	e2504000 	subs	r4, r0, #0
    abf4:	0a000028 	beq	ac9c <CTimer::PollKernelTimers()+0x140>
    abf8:	e5943000 	ldr	r3, [r4]
    abfc:	e1530008 	cmp	r3, r8
    ac00:	0a000004 	beq	ac18 <CTimer::PollKernelTimers()+0xbc>
    ac04:	e3020388 	movw	r0, #9096	; 0x2388
    ac08:	e300214f 	movw	r2, #335	; 0x14f
    ac0c:	e3400001 	movt	r0, #1
    ac10:	e1a01009 	mov	r1, r9
    ac14:	eb0008a1 	bl	cea0 <assertion_failed>
    ac18:	e5962004 	ldr	r2, [r6, #4]
    ac1c:	e5943008 	ldr	r3, [r4, #8]
    ac20:	e0433002 	sub	r3, r3, r2
    ac24:	e3530000 	cmp	r3, #0
    ac28:	ca000016 	bgt	ac88 <CTimer::PollKernelTimers()+0x12c>
    ac2c:	e1a01005 	mov	r1, r5
    ac30:	e1a00007 	mov	r0, r7
    ac34:	eb00180b 	bl	10c68 <CPtrList::GetNext(TPtrListElement*)>
    ac38:	e1a01005 	mov	r1, r5
    ac3c:	e1a0b000 	mov	fp, r0
    ac40:	e1a00007 	mov	r0, r7
    ac44:	eb0018be 	bl	10f44 <CPtrList::Remove(TPtrListElement*)>
    ac48:	e596301c 	ldr	r3, [r6, #28]
    ac4c:	e3530000 	cmp	r3, #0
    ac50:	0affffd2 	beq	aba0 <CTimer::PollKernelTimers()+0x44>
    ac54:	ebfffdd1 	bl	a3a0 <LeaveCritical>
    ac58:	e5945004 	ldr	r5, [r4, #4]
    ac5c:	e3550000 	cmp	r5, #0
    ac60:	1affffd1 	bne	abac <CTimer::PollKernelTimers()+0x50>
    ac64:	e30306a0 	movw	r0, #13984	; 0x36a0
    ac68:	e300215d 	movw	r2, #349	; 0x15d
    ac6c:	e3400001 	movt	r0, #1
    ac70:	e1a01009 	mov	r1, r9
    ac74:	eb000889 	bl	cea0 <assertion_failed>
    ac78:	eaffffcb 	b	abac <CTimer::PollKernelTimers()+0x50>
    ac7c:	ebfffd99 	bl	a2e8 <EnterCritical>
    ac80:	e25b5000 	subs	r5, fp, #0
    ac84:	1affffd6 	bne	abe4 <CTimer::PollKernelTimers()+0x88>
    ac88:	e596301c 	ldr	r3, [r6, #28]
    ac8c:	e3530000 	cmp	r3, #0
    ac90:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac94:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac98:	eafffdc0 	b	a3a0 <LeaveCritical>
    ac9c:	e300214e 	movw	r2, #334	; 0x14e
    aca0:	e1a01009 	mov	r1, r9
    aca4:	e1a0000a 	mov	r0, sl
    aca8:	eb00087c 	bl	cea0 <assertion_failed>
    acac:	eaffffd1 	b	abf8 <CTimer::PollKernelTimers()+0x9c>
    acb0:	ebfffd8c 	bl	a2e8 <EnterCritical>
    acb4:	eaffffad 	b	ab70 <CTimer::PollKernelTimers()+0x14>

0000acb8 <CTimer::InterruptHandler()>:
    acb8:	e3a03a03 	mov	r3, #12288	; 0x3000
    acbc:	e3433f00 	movt	r3, #16128	; 0x3f00
    acc0:	e92d4010 	push	{r4, lr}
    acc4:	e1a04000 	mov	r4, r0
    acc8:	e5933000 	ldr	r3, [r3]
    accc:	e3130008 	tst	r3, #8
    acd0:	0a000036 	beq	adb0 <CTimer::InterruptHandler()+0xf8>
    acd4:	e3a03a03 	mov	r3, #12288	; 0x3000
    acd8:	e3433f00 	movt	r3, #16128	; 0x3f00
    acdc:	e3021710 	movw	r1, #10000	; 0x2710
    ace0:	e5932018 	ldr	r2, [r3, #24]
    ace4:	e0822001 	add	r2, r2, r1
    ace8:	e5832018 	str	r2, [r3, #24]
    acec:	e5930004 	ldr	r0, [r3, #4]
    acf0:	e1520000 	cmp	r2, r0
    acf4:	35932004 	ldrcc	r2, [r3, #4]
    acf8:	30821001 	addcc	r1, r2, r1
    acfc:	35831018 	strcc	r1, [r3, #24]
    ad00:	e3a03a03 	mov	r3, #12288	; 0x3000
    ad04:	e3433f00 	movt	r3, #16128	; 0x3f00
    ad08:	e3a02008 	mov	r2, #8
    ad0c:	e5832000 	str	r2, [r3]
    ad10:	e5940010 	ldr	r0, [r4, #16]
    ad14:	e3500000 	cmp	r0, #0
    ad18:	1a000016 	bne	ad78 <CTimer::InterruptHandler()+0xc0>
    ad1c:	e5943004 	ldr	r3, [r4, #4]
    ad20:	e308051f 	movw	r0, #34079	; 0x851f
    ad24:	e34501eb 	movt	r0, #20971	; 0x51eb
    ad28:	e3a0c064 	mov	ip, #100	; 0x64
    ad2c:	e2833001 	add	r3, r3, #1
    ad30:	e5843004 	str	r3, [r4, #4]
    ad34:	e0810093 	umull	r0, r1, r3, r0
    ad38:	e1a022a1 	lsr	r2, r1, #5
    ad3c:	e062329c 	mls	r2, ip, r2, r3
    ad40:	e3520000 	cmp	r2, #0
    ad44:	1a000008 	bne	ad6c <CTimer::InterruptHandler()+0xb4>
    ad48:	e5943008 	ldr	r3, [r4, #8]
    ad4c:	e2833001 	add	r3, r3, #1
    ad50:	e5843008 	str	r3, [r4, #8]
    ad54:	e594300c 	ldr	r3, [r4, #12]
    ad58:	e2833001 	add	r3, r3, #1
    ad5c:	e584300c 	str	r3, [r4, #12]
    ad60:	e3520000 	cmp	r2, #0
    ad64:	0a000000 	beq	ad6c <CTimer::InterruptHandler()+0xb4>
    ad68:	ebfffd8c 	bl	a3a0 <LeaveCritical>
    ad6c:	e1a00004 	mov	r0, r4
    ad70:	e8bd4010 	pop	{r4, lr}
    ad74:	eaffff78 	b	ab5c <CTimer::PollKernelTimers()>
    ad78:	ebfffd5a 	bl	a2e8 <EnterCritical>
    ad7c:	e5943004 	ldr	r3, [r4, #4]
    ad80:	e308051f 	movw	r0, #34079	; 0x851f
    ad84:	e34501eb 	movt	r0, #20971	; 0x51eb
    ad88:	e2833001 	add	r3, r3, #1
    ad8c:	e3a0c064 	mov	ip, #100	; 0x64
    ad90:	e5843004 	str	r3, [r4, #4]
    ad94:	e0810093 	umull	r0, r1, r3, r0
    ad98:	e5942010 	ldr	r2, [r4, #16]
    ad9c:	e1a012a1 	lsr	r1, r1, #5
    ada0:	e063319c 	mls	r3, ip, r1, r3
    ada4:	e3530000 	cmp	r3, #0
    ada8:	1affffec 	bne	ad60 <CTimer::InterruptHandler()+0xa8>
    adac:	eaffffe5 	b	ad48 <CTimer::InterruptHandler()+0x90>
    adb0:	e3021358 	movw	r1, #9048	; 0x2358
    adb4:	e3020418 	movw	r0, #9240	; 0x2418
    adb8:	e3401001 	movt	r1, #1
    adbc:	e3400001 	movt	r0, #1
    adc0:	e300216f 	movw	r2, #367	; 0x16f
    adc4:	eb000835 	bl	cea0 <assertion_failed>
    adc8:	eaffffc1 	b	acd4 <CTimer::InterruptHandler()+0x1c>

0000adcc <CTimer::InterruptHandler(void*)>:
    adcc:	e92d4010 	push	{r4, lr}
    add0:	e2504000 	subs	r4, r0, #0
    add4:	0a000002 	beq	ade4 <CTimer::InterruptHandler(void*)+0x18>
    add8:	e1a00004 	mov	r0, r4
    addc:	e8bd4010 	pop	{r4, lr}
    ade0:	eaffffb4 	b	acb8 <CTimer::InterruptHandler()>
    ade4:	e3021358 	movw	r1, #9048	; 0x2358
    ade8:	e3010ce4 	movw	r0, #7396	; 0x1ce4
    adec:	e3401001 	movt	r1, #1
    adf0:	e3400001 	movt	r0, #1
    adf4:	e3002191 	movw	r2, #401	; 0x191
    adf8:	eb000828 	bl	cea0 <assertion_failed>
    adfc:	e1a00004 	mov	r0, r4
    ae00:	e8bd4010 	pop	{r4, lr}
    ae04:	eaffffab 	b	acb8 <CTimer::InterruptHandler()>

0000ae08 <CTimer::TuneMsDelay()>:
    ae08:	e92d4070 	push	{r4, r5, r6, lr}
    ae0c:	e1a04000 	mov	r4, r0
    ae10:	e5943020 	ldr	r3, [r4, #32]
    ae14:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    ae18:	e24dd008 	sub	sp, sp, #8
    ae1c:	e5946004 	ldr	r6, [r4, #4]
    ae20:	e308551f 	movw	r5, #34079	; 0x851f
    ae24:	e34551eb 	movt	r5, #20971	; 0x51eb
    ae28:	e0000390 	mul	r0, r0, r3
    ae2c:	eb001093 	bl	f080 <DelayLoop>
    ae30:	e5941004 	ldr	r1, [r4, #4]
    ae34:	e3020710 	movw	r0, #10000	; 0x2710
    ae38:	e0411006 	sub	r1, r1, r6
    ae3c:	eb001a18 	bl	116a4 <__aeabi_uidiv>
    ae40:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    ae44:	e3413062 	movt	r3, #4194	; 0x1062
    ae48:	e1a06000 	mov	r6, r0
    ae4c:	e5940020 	ldr	r0, [r4, #32]
    ae50:	e0000690 	mul	r0, r0, r6
    ae54:	e0810590 	umull	r0, r1, r0, r5
    ae58:	e1a022a1 	lsr	r2, r1, #5
    ae5c:	e5842020 	str	r2, [r4, #32]
    ae60:	e2822f7d 	add	r2, r2, #500	; 0x1f4
    ae64:	e0832392 	umull	r2, r3, r2, r3
    ae68:	e1a03323 	lsr	r3, r3, #6
    ae6c:	e5843024 	str	r3, [r4, #36]	; 0x24
    ae70:	e0854596 	umull	r4, r5, r6, r5
    ae74:	eb00098e 	bl	d4b4 <CLogger::Get()>
    ae78:	e3a0e064 	mov	lr, #100	; 0x64
    ae7c:	e3a02003 	mov	r2, #3
    ae80:	e59f1020 	ldr	r1, [pc, #32]	; aea8 <CTimer::TuneMsDelay()+0xa0>
    ae84:	e302343c 	movw	r3, #9276	; 0x243c
    ae88:	e3403001 	movt	r3, #1
    ae8c:	e1a0c2a5 	lsr	ip, r5, #5
    ae90:	e58dc000 	str	ip, [sp]
    ae94:	e0666c9e 	mls	r6, lr, ip, r6
    ae98:	e58d6004 	str	r6, [sp, #4]
    ae9c:	eb000a60 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aea0:	e28dd008 	add	sp, sp, #8
    aea4:	e8bd8070 	pop	{r4, r5, r6, pc}
    aea8:	00012350 	.word	0x00012350

0000aeac <CTimer::Initialize()>:
    aeac:	e92d4010 	push	{r4, lr}
    aeb0:	e1a04000 	mov	r4, r0
    aeb4:	e5900000 	ldr	r0, [r0]
    aeb8:	e3500000 	cmp	r0, #0
    aebc:	0a000011 	beq	af08 <CTimer::Initialize()+0x5c>
    aec0:	e1a03004 	mov	r3, r4
    aec4:	e3a01003 	mov	r1, #3
    aec8:	e30a2dcc 	movw	r2, #44492	; 0xadcc
    aecc:	e3402000 	movt	r2, #0
    aed0:	eb0011d1 	bl	f61c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    aed4:	e3a02a03 	mov	r2, #12288	; 0x3000
    aed8:	e3432f00 	movt	r2, #16128	; 0x3f00
    aedc:	e3a03df2 	mov	r3, #15488	; 0x3c80
    aee0:	e34f3e36 	movt	r3, #65078	; 0xfe36
    aee4:	e1a00004 	mov	r0, r4
    aee8:	e5823004 	str	r3, [r2, #4]
    aeec:	e5923004 	ldr	r3, [r2, #4]
    aef0:	e2833c27 	add	r3, r3, #9984	; 0x2700
    aef4:	e2833010 	add	r3, r3, #16
    aef8:	e5823018 	str	r3, [r2, #24]
    aefc:	ebffffc1 	bl	ae08 <CTimer::TuneMsDelay()>
    af00:	e3a00001 	mov	r0, #1
    af04:	e8bd8010 	pop	{r4, pc}
    af08:	e3021358 	movw	r1, #9048	; 0x2358
    af0c:	e3020364 	movw	r0, #9060	; 0x2364
    af10:	e3401001 	movt	r1, #1
    af14:	e3400001 	movt	r0, #1
    af18:	e3a02055 	mov	r2, #85	; 0x55
    af1c:	eb0007df 	bl	cea0 <assertion_failed>
    af20:	e5940000 	ldr	r0, [r4]
    af24:	eaffffe5 	b	aec0 <CTimer::Initialize()+0x14>

0000af28 <CTimer::SimpleMsDelay(unsigned int)>:
    af28:	e2503000 	subs	r3, r0, #0
    af2c:	012fff1e 	bxeq	lr
    af30:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    af34:	e0000390 	mul	r0, r0, r3
    af38:	e3500000 	cmp	r0, #0
    af3c:	012fff1e 	bxeq	lr
    af40:	e3a02a03 	mov	r2, #12288	; 0x3000
    af44:	e3432f00 	movt	r2, #16128	; 0x3f00
    af48:	e2800001 	add	r0, r0, #1
    af4c:	e5921004 	ldr	r1, [r2, #4]
    af50:	e5923004 	ldr	r3, [r2, #4]
    af54:	e0433001 	sub	r3, r3, r1
    af58:	e1500003 	cmp	r0, r3
    af5c:	8afffffb 	bhi	af50 <CTimer::SimpleMsDelay(unsigned int)+0x28>
    af60:	e12fff1e 	bx	lr

0000af64 <CTimer::SimpleusDelay(unsigned int)>:
    af64:	e3500000 	cmp	r0, #0
    af68:	012fff1e 	bxeq	lr
    af6c:	e3a02a03 	mov	r2, #12288	; 0x3000
    af70:	e3432f00 	movt	r2, #16128	; 0x3f00
    af74:	e2800001 	add	r0, r0, #1
    af78:	e5921004 	ldr	r1, [r2, #4]
    af7c:	e5923004 	ldr	r3, [r2, #4]
    af80:	e0433001 	sub	r3, r3, r1
    af84:	e1500003 	cmp	r0, r3
    af88:	8afffffb 	bhi	af7c <CTimer::SimpleusDelay(unsigned int)+0x18>
    af8c:	e12fff1e 	bx	lr

0000af90 <CTimer::IsLeapYear(unsigned int)>:
    af90:	e308251f 	movw	r2, #34079	; 0x851f
    af94:	e34521eb 	movt	r2, #20971	; 0x51eb
    af98:	e3a0c064 	mov	ip, #100	; 0x64
    af9c:	e0832290 	umull	r2, r3, r0, r2
    afa0:	e1a012a3 	lsr	r1, r3, #5
    afa4:	e061019c 	mls	r1, ip, r1, r0
    afa8:	e3510000 	cmp	r1, #0
    afac:	0a000003 	beq	afc0 <CTimer::IsLeapYear(unsigned int)+0x30>
    afb0:	e3100003 	tst	r0, #3
    afb4:	03a00001 	moveq	r0, #1
    afb8:	13a00000 	movne	r0, #0
    afbc:	e12fff1e 	bx	lr
    afc0:	e1a033a3 	lsr	r3, r3, #7
    afc4:	e3a02e19 	mov	r2, #400	; 0x190
    afc8:	e0600392 	mls	r0, r2, r3, r0
    afcc:	e16f0f10 	clz	r0, r0
    afd0:	e1a002a0 	lsr	r0, r0, #5
    afd4:	e12fff1e 	bx	lr

0000afd8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    afd8:	e3500001 	cmp	r0, #1
    afdc:	0a000003 	beq	aff0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    afe0:	e3023320 	movw	r3, #8992	; 0x2320
    afe4:	e3403001 	movt	r3, #1
    afe8:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    afec:	e12fff1e 	bx	lr
    aff0:	e308251f 	movw	r2, #34079	; 0x851f
    aff4:	e34521eb 	movt	r2, #20971	; 0x51eb
    aff8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    affc:	e3a0e064 	mov	lr, #100	; 0x64
    b000:	e0832291 	umull	r2, r3, r1, r2
    b004:	e1a0c2a3 	lsr	ip, r3, #5
    b008:	e06c1c9e 	mls	ip, lr, ip, r1
    b00c:	e35c0000 	cmp	ip, #0
    b010:	0a000008 	beq	b038 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    b014:	e3110003 	tst	r1, #3
    b018:	03a01001 	moveq	r1, #1
    b01c:	13a01000 	movne	r1, #0
    b020:	e3510000 	cmp	r1, #0
    b024:	03023320 	movweq	r3, #8992	; 0x2320
    b028:	03403001 	movteq	r3, #1
    b02c:	13a0001d 	movne	r0, #29
    b030:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    b034:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    b038:	e1a033a3 	lsr	r3, r3, #7
    b03c:	e3a02e19 	mov	r2, #400	; 0x190
    b040:	e0611392 	mls	r1, r2, r3, r1
    b044:	e16f1f11 	clz	r1, r1
    b048:	e1a012a1 	lsr	r1, r1, #5
    b04c:	eafffff3 	b	b020 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000b050 <CTimer::Get()>:
    b050:	e92d4010 	push	{r4, lr}
    b054:	e3034fa8 	movw	r4, #16296	; 0x3fa8
    b058:	e3404001 	movt	r4, #1
    b05c:	e5940000 	ldr	r0, [r4]
    b060:	e3500000 	cmp	r0, #0
    b064:	18bd8010 	popne	{r4, pc}
    b068:	e30021d6 	movw	r2, #470	; 0x1d6
    b06c:	e3021358 	movw	r1, #9048	; 0x2358
    b070:	e3010e74 	movw	r0, #7796	; 0x1e74
    b074:	e3401001 	movt	r1, #1
    b078:	e3400001 	movt	r0, #1
    b07c:	eb000787 	bl	cea0 <assertion_failed>
    b080:	e5940000 	ldr	r0, [r4]
    b084:	e8bd8010 	pop	{r4, pc}

0000b088 <memset>:
    b088:	e3520000 	cmp	r2, #0
    b08c:	012fff1e 	bxeq	lr
    b090:	e6af1071 	sxtb	r1, r1
    b094:	e0802002 	add	r2, r0, r2
    b098:	e1a03000 	mov	r3, r0
    b09c:	e4c31001 	strb	r1, [r3], #1
    b0a0:	e1530002 	cmp	r3, r2
    b0a4:	1afffffc 	bne	b09c <memset+0x14>
    b0a8:	e12fff1e 	bx	lr

0000b0ac <memcmp>:
    b0ac:	e3520000 	cmp	r2, #0
    b0b0:	0a00000e 	beq	b0f0 <memcmp+0x44>
    b0b4:	e5d0c000 	ldrb	ip, [r0]
    b0b8:	e5d13000 	ldrb	r3, [r1]
    b0bc:	e15c0003 	cmp	ip, r3
    b0c0:	ca00000c 	bgt	b0f8 <memcmp+0x4c>
    b0c4:	ba00000d 	blt	b100 <memcmp+0x54>
    b0c8:	e0812002 	add	r2, r1, r2
    b0cc:	e2811001 	add	r1, r1, #1
    b0d0:	ea000004 	b	b0e8 <memcmp+0x3c>
    b0d4:	e5f0c001 	ldrb	ip, [r0, #1]!
    b0d8:	e4d13001 	ldrb	r3, [r1], #1
    b0dc:	e15c0003 	cmp	ip, r3
    b0e0:	ca000004 	bgt	b0f8 <memcmp+0x4c>
    b0e4:	ba000005 	blt	b100 <memcmp+0x54>
    b0e8:	e1510002 	cmp	r1, r2
    b0ec:	1afffff8 	bne	b0d4 <memcmp+0x28>
    b0f0:	e3a00000 	mov	r0, #0
    b0f4:	e12fff1e 	bx	lr
    b0f8:	e3a00001 	mov	r0, #1
    b0fc:	e12fff1e 	bx	lr
    b100:	e3e00000 	mvn	r0, #0
    b104:	e12fff1e 	bx	lr

0000b108 <strlen>:
    b108:	e1d010d0 	ldrsb	r1, [r0]
    b10c:	e2803001 	add	r3, r0, #1
    b110:	e3510000 	cmp	r1, #0
    b114:	0a000003 	beq	b128 <strlen+0x20>
    b118:	e0431000 	sub	r1, r3, r0
    b11c:	e0d320d1 	ldrsb	r2, [r3], #1
    b120:	e3520000 	cmp	r2, #0
    b124:	1afffffb 	bne	b118 <strlen+0x10>
    b128:	e1a00001 	mov	r0, r1
    b12c:	e12fff1e 	bx	lr

0000b130 <strcmp>:
    b130:	e1d030d0 	ldrsb	r3, [r0]
    b134:	e1d120d0 	ldrsb	r2, [r1]
    b138:	e3530000 	cmp	r3, #0
    b13c:	1a000007 	bne	b160 <strcmp+0x30>
    b140:	ea000008 	b	b168 <strcmp+0x38>
    b144:	e1530002 	cmp	r3, r2
    b148:	ca00000b 	bgt	b17c <strcmp+0x4c>
    b14c:	ba00000c 	blt	b184 <strcmp+0x54>
    b150:	e1f030d1 	ldrsb	r3, [r0, #1]!
    b154:	e3530000 	cmp	r3, #0
    b158:	0a00000b 	beq	b18c <strcmp+0x5c>
    b15c:	e1f120d1 	ldrsb	r2, [r1, #1]!
    b160:	e3520000 	cmp	r2, #0
    b164:	1afffff6 	bne	b144 <strcmp+0x14>
    b168:	e1530002 	cmp	r3, r2
    b16c:	ca000002 	bgt	b17c <strcmp+0x4c>
    b170:	b3e00000 	mvnlt	r0, #0
    b174:	a3a00000 	movge	r0, #0
    b178:	e12fff1e 	bx	lr
    b17c:	e3a00001 	mov	r0, #1
    b180:	e12fff1e 	bx	lr
    b184:	e3e00000 	mvn	r0, #0
    b188:	e12fff1e 	bx	lr
    b18c:	e1d120d1 	ldrsb	r2, [r1, #1]
    b190:	e1530002 	cmp	r3, r2
    b194:	dafffff5 	ble	b170 <strcmp+0x40>
    b198:	eafffff7 	b	b17c <strcmp+0x4c>

0000b19c <strcpy>:
    b19c:	e1d130d0 	ldrsb	r3, [r1]
    b1a0:	e1a02000 	mov	r2, r0
    b1a4:	e3530000 	cmp	r3, #0
    b1a8:	0a000003 	beq	b1bc <strcpy+0x20>
    b1ac:	e4c23001 	strb	r3, [r2], #1
    b1b0:	e1f130d1 	ldrsb	r3, [r1, #1]!
    b1b4:	e3530000 	cmp	r3, #0
    b1b8:	1afffffb 	bne	b1ac <strcpy+0x10>
    b1bc:	e3a03000 	mov	r3, #0
    b1c0:	e5c23000 	strb	r3, [r2]
    b1c4:	e12fff1e 	bx	lr

0000b1c8 <strncpy>:
    b1c8:	e3520000 	cmp	r2, #0
    b1cc:	012fff1e 	bxeq	lr
    b1d0:	e1d1c0d0 	ldrsb	ip, [r1]
    b1d4:	e35c0000 	cmp	ip, #0
    b1d8:	0a000009 	beq	b204 <strncpy+0x3c>
    b1dc:	e0802002 	add	r2, r0, r2
    b1e0:	e1a03000 	mov	r3, r0
    b1e4:	ea000002 	b	b1f4 <strncpy+0x2c>
    b1e8:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    b1ec:	e35c0000 	cmp	ip, #0
    b1f0:	0a000004 	beq	b208 <strncpy+0x40>
    b1f4:	e4c3c001 	strb	ip, [r3], #1
    b1f8:	e1530002 	cmp	r3, r2
    b1fc:	1afffff9 	bne	b1e8 <strncpy+0x20>
    b200:	e12fff1e 	bx	lr
    b204:	e1a03000 	mov	r3, r0
    b208:	e3a02000 	mov	r2, #0
    b20c:	e5c32000 	strb	r2, [r3]
    b210:	e12fff1e 	bx	lr

0000b214 <strcat>:
    b214:	e1d030d0 	ldrsb	r3, [r0]
    b218:	e3530000 	cmp	r3, #0
    b21c:	e1a03000 	mov	r3, r0
    b220:	0a000002 	beq	b230 <strcat+0x1c>
    b224:	e1f320d1 	ldrsb	r2, [r3, #1]!
    b228:	e3520000 	cmp	r2, #0
    b22c:	1afffffc 	bne	b224 <strcat+0x10>
    b230:	e1d120d0 	ldrsb	r2, [r1]
    b234:	e3520000 	cmp	r2, #0
    b238:	0a000003 	beq	b24c <strcat+0x38>
    b23c:	e4c32001 	strb	r2, [r3], #1
    b240:	e1f120d1 	ldrsb	r2, [r1, #1]!
    b244:	e3520000 	cmp	r2, #0
    b248:	1afffffb 	bne	b23c <strcat+0x28>
    b24c:	e3a02000 	mov	r2, #0
    b250:	e5c32000 	strb	r2, [r3]
    b254:	e12fff1e 	bx	lr

0000b258 <strchr>:
    b258:	e1d020d0 	ldrsb	r2, [r0]
    b25c:	e3520000 	cmp	r2, #0
    b260:	0a000009 	beq	b28c <strchr+0x34>
    b264:	e1510002 	cmp	r1, r2
    b268:	1a000002 	bne	b278 <strchr+0x20>
    b26c:	ea000008 	b	b294 <strchr+0x3c>
    b270:	e1530001 	cmp	r3, r1
    b274:	012fff1e 	bxeq	lr
    b278:	e1f030d1 	ldrsb	r3, [r0, #1]!
    b27c:	e3530000 	cmp	r3, #0
    b280:	1afffffa 	bne	b270 <strchr+0x18>
    b284:	e1a00003 	mov	r0, r3
    b288:	e12fff1e 	bx	lr
    b28c:	e1a00002 	mov	r0, r2
    b290:	e12fff1e 	bx	lr
    b294:	e12fff1e 	bx	lr

0000b298 <strtok_r>:
    b298:	e3500000 	cmp	r0, #0
    b29c:	0a00002c 	beq	b354 <strtok_r+0xbc>
    b2a0:	e92d4030 	push	{r4, r5, lr}
    b2a4:	e1d0e0d0 	ldrsb	lr, [r0]
    b2a8:	e35e0000 	cmp	lr, #0
    b2ac:	11d140d0 	ldrsbne	r4, [r1]
    b2b0:	0a000024 	beq	b348 <strtok_r+0xb0>
    b2b4:	e3540000 	cmp	r4, #0
    b2b8:	0a000008 	beq	b2e0 <strtok_r+0x48>
    b2bc:	e15e0004 	cmp	lr, r4
    b2c0:	0a000019 	beq	b32c <strtok_r+0x94>
    b2c4:	e1a0c001 	mov	ip, r1
    b2c8:	ea000001 	b	b2d4 <strtok_r+0x3c>
    b2cc:	e15e0003 	cmp	lr, r3
    b2d0:	0a000015 	beq	b32c <strtok_r+0x94>
    b2d4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    b2d8:	e3530000 	cmp	r3, #0
    b2dc:	1afffffa 	bne	b2cc <strtok_r+0x34>
    b2e0:	e35e0000 	cmp	lr, #0
    b2e4:	0a000017 	beq	b348 <strtok_r+0xb0>
    b2e8:	e1a05000 	mov	r5, r0
    b2ec:	e3540000 	cmp	r4, #0
    b2f0:	0a000008 	beq	b318 <strtok_r+0x80>
    b2f4:	e15e0004 	cmp	lr, r4
    b2f8:	0a00000d 	beq	b334 <strtok_r+0x9c>
    b2fc:	e1a0c001 	mov	ip, r1
    b300:	ea000001 	b	b30c <strtok_r+0x74>
    b304:	e15e0003 	cmp	lr, r3
    b308:	0a000009 	beq	b334 <strtok_r+0x9c>
    b30c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    b310:	e3530000 	cmp	r3, #0
    b314:	1afffffa 	bne	b304 <strtok_r+0x6c>
    b318:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    b31c:	e35e0000 	cmp	lr, #0
    b320:	1afffff1 	bne	b2ec <strtok_r+0x54>
    b324:	e5825000 	str	r5, [r2]
    b328:	e8bd8030 	pop	{r4, r5, pc}
    b32c:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    b330:	eaffffdf 	b	b2b4 <strtok_r+0x1c>
    b334:	e3a03000 	mov	r3, #0
    b338:	e2855001 	add	r5, r5, #1
    b33c:	e5453001 	strb	r3, [r5, #-1]
    b340:	e5825000 	str	r5, [r2]
    b344:	e8bd8030 	pop	{r4, r5, pc}
    b348:	e3a00000 	mov	r0, #0
    b34c:	e5820000 	str	r0, [r2]
    b350:	e8bd8030 	pop	{r4, r5, pc}
    b354:	e5920000 	ldr	r0, [r2]
    b358:	e3500000 	cmp	r0, #0
    b35c:	1affffcf 	bne	b2a0 <strtok_r+0x8>
    b360:	e12fff1e 	bx	lr

0000b364 <strtoul>:
    b364:	e3510000 	cmp	r1, #0
    b368:	e92d4070 	push	{r4, r5, r6, lr}
    b36c:	e2425002 	sub	r5, r2, #2
    b370:	15810000 	strne	r0, [r1]
    b374:	e3520000 	cmp	r2, #0
    b378:	13550022 	cmpne	r5, #34	; 0x22
    b37c:	e3c2e010 	bic	lr, r2, #16
    b380:	83a05001 	movhi	r5, #1
    b384:	93a05000 	movls	r5, #0
    b388:	8a000036 	bhi	b468 <strtoul+0x104>
    b38c:	e1d0c0d0 	ldrsb	ip, [r0]
    b390:	e1a04000 	mov	r4, r0
    b394:	e2800001 	add	r0, r0, #1
    b398:	e24c3009 	sub	r3, ip, #9
    b39c:	e35c0020 	cmp	ip, #32
    b3a0:	e6ef3073 	uxtb	r3, r3
    b3a4:	0afffff8 	beq	b38c <strtoul+0x28>
    b3a8:	e3530004 	cmp	r3, #4
    b3ac:	9afffff6 	bls	b38c <strtoul+0x28>
    b3b0:	e35c002b 	cmp	ip, #43	; 0x2b
    b3b4:	0a00002d 	beq	b470 <strtoul+0x10c>
    b3b8:	e35c002d 	cmp	ip, #45	; 0x2d
    b3bc:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
    b3c0:	03a06001 	moveq	r6, #1
    b3c4:	01a04000 	moveq	r4, r0
    b3c8:	13a06000 	movne	r6, #0
    b3cc:	e35c0030 	cmp	ip, #48	; 0x30
    b3d0:	0a00002b 	beq	b484 <strtoul+0x120>
    b3d4:	e3520000 	cmp	r2, #0
    b3d8:	03a0200a 	moveq	r2, #10
    b3dc:	e35c002f 	cmp	ip, #47	; 0x2f
    b3e0:	e1a0300c 	mov	r3, ip
    b3e4:	da00001c 	ble	b45c <strtoul+0xf8>
    b3e8:	e3a05001 	mov	r5, #1
    b3ec:	e3a0e000 	mov	lr, #0
    b3f0:	ea000007 	b	b414 <strtoul+0xb0>
    b3f4:	e150000e 	cmp	r0, lr
    b3f8:	e3a05000 	mov	r5, #0
    b3fc:	e1a0e000 	mov	lr, r0
    b400:	3a000028 	bcc	b4a8 <strtoul+0x144>
    b404:	e1f430d1 	ldrsb	r3, [r4, #1]!
    b408:	e353002f 	cmp	r3, #47	; 0x2f
    b40c:	e1a0c003 	mov	ip, r3
    b410:	da000029 	ble	b4bc <strtoul+0x158>
    b414:	e24cc061 	sub	ip, ip, #97	; 0x61
    b418:	e35c0019 	cmp	ip, #25
    b41c:	92433020 	subls	r3, r3, #32
    b420:	e3530040 	cmp	r3, #64	; 0x40
    b424:	c2433007 	subgt	r3, r3, #7
    b428:	e2433030 	sub	r3, r3, #48	; 0x30
    b42c:	e1520003 	cmp	r2, r3
    b430:	e020329e 	mla	r0, lr, r2, r3
    b434:	caffffee 	bgt	b3f4 <strtoul+0x90>
    b438:	e2255001 	eor	r5, r5, #1
    b43c:	e1a0000e 	mov	r0, lr
    b440:	e3510000 	cmp	r1, #0
    b444:	e0055006 	and	r5, r5, r6
    b448:	0a000000 	beq	b450 <strtoul+0xec>
    b44c:	e5814000 	str	r4, [r1]
    b450:	e3550000 	cmp	r5, #0
    b454:	12600000 	rsbne	r0, r0, #0
    b458:	e8bd8070 	pop	{r4, r5, r6, pc}
    b45c:	e3510000 	cmp	r1, #0
    b460:	13a00000 	movne	r0, #0
    b464:	1afffff8 	bne	b44c <strtoul+0xe8>
    b468:	e3a00000 	mov	r0, #0
    b46c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b470:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    b474:	e3a06000 	mov	r6, #0
    b478:	e1a04000 	mov	r4, r0
    b47c:	e35c0030 	cmp	ip, #48	; 0x30
    b480:	1affffd3 	bne	b3d4 <strtoul+0x70>
    b484:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    b488:	e2840001 	add	r0, r4, #1
    b48c:	e3cc3020 	bic	r3, ip, #32
    b490:	e3530058 	cmp	r3, #88	; 0x58
    b494:	0a00000a 	beq	b4c4 <strtoul+0x160>
    b498:	e3520000 	cmp	r2, #0
    b49c:	e1a04000 	mov	r4, r0
    b4a0:	03a02008 	moveq	r2, #8
    b4a4:	eaffffcc 	b	b3dc <strtoul+0x78>
    b4a8:	e1510005 	cmp	r1, r5
    b4ac:	0a00000a 	beq	b4dc <strtoul+0x178>
    b4b0:	e5814000 	str	r4, [r1]
    b4b4:	e3e00000 	mvn	r0, #0
    b4b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b4bc:	e3a05001 	mov	r5, #1
    b4c0:	eaffffde 	b	b440 <strtoul+0xdc>
    b4c4:	e35e0000 	cmp	lr, #0
    b4c8:	1affffe6 	bne	b468 <strtoul+0x104>
    b4cc:	e1d4c0d2 	ldrsb	ip, [r4, #2]
    b4d0:	e3a02010 	mov	r2, #16
    b4d4:	e2844002 	add	r4, r4, #2
    b4d8:	eaffffbf 	b	b3dc <strtoul+0x78>
    b4dc:	e3e00000 	mvn	r0, #0
    b4e0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b4e4 <char2int>:
    b4e4:	e12fff1e 	bx	lr

0000b4e8 <memcpy>:
    b4e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b4ec:	e352007f 	cmp	r2, #127	; 0x7f
    b4f0:	9a00000b 	bls	b524 <memcpy+0x3c>
    b4f4:	e3110003 	tst	r1, #3
    b4f8:	1a000009 	bne	b524 <memcpy+0x3c>
    b4fc:	e3100003 	tst	r0, #3
    b500:	1a000007 	bne	b524 <memcpy+0x3c>
    b504:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    b508:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    b50c:	e2422020 	sub	r2, r2, #32
    b510:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    b514:	f5d1f040 	pld	[r1, #64]	; 0x40
    b518:	e352001f 	cmp	r2, #31
    b51c:	8afffff9 	bhi	b508 <memcpy+0x20>
    b520:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    b524:	e3520000 	cmp	r2, #0
    b528:	0a000003 	beq	b53c <memcpy+0x54>
    b52c:	e4d13001 	ldrb	r3, [r1], #1
    b530:	e2522001 	subs	r2, r2, #1
    b534:	e4c03001 	strb	r3, [r0], #1
    b538:	1afffffb 	bne	b52c <memcpy+0x44>
    b53c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b540:	e12fff1e 	bx	lr

0000b544 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    b544:	e1a01000 	mov	r1, r0
    b548:	e3a0c00a 	mov	ip, #10
    b54c:	e3a00000 	mov	r0, #0
    b550:	ea000007 	b	b574 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x30>
    b554:	e3720001 	cmn	r2, #1
    b558:	13a03000 	movne	r3, #0
    b55c:	03a03001 	moveq	r3, #1
    b560:	e1500002 	cmp	r0, r2
    b564:	83833001 	orrhi	r3, r3, #1
    b568:	e1a00002 	mov	r0, r2
    b56c:	e3530000 	cmp	r3, #0
    b570:	1a000007 	bne	b594 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x50>
    b574:	e0d120d1 	ldrsb	r2, [r1], #1
    b578:	e2423030 	sub	r3, r2, #48	; 0x30
    b57c:	e3520000 	cmp	r2, #0
    b580:	e022309c 	mla	r2, ip, r0, r3
    b584:	e6ef3073 	uxtb	r3, r3
    b588:	012fff1e 	bxeq	lr
    b58c:	e3530009 	cmp	r3, #9
    b590:	9affffef 	bls	b554 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x10>
    b594:	e3e00000 	mvn	r0, #0
    b598:	e12fff1e 	bx	lr

0000b59c <CKernelOptions::~CKernelOptions()>:
    b59c:	e3033fac 	movw	r3, #16300	; 0x3fac
    b5a0:	e3403001 	movt	r3, #1
    b5a4:	e3a02000 	mov	r2, #0
    b5a8:	e5832000 	str	r2, [r3]
    b5ac:	e12fff1e 	bx	lr

0000b5b0 <CKernelOptions::GetWidth() const>:
    b5b0:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    b5b4:	e12fff1e 	bx	lr

0000b5b8 <CKernelOptions::GetHeight() const>:
    b5b8:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    b5bc:	e12fff1e 	bx	lr

0000b5c0 <CKernelOptions::GetLogDevice() const>:
    b5c0:	e2800e81 	add	r0, r0, #2064	; 0x810
    b5c4:	e2800008 	add	r0, r0, #8
    b5c8:	e12fff1e 	bx	lr

0000b5cc <CKernelOptions::GetLogLevel() const>:
    b5cc:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    b5d0:	e12fff1e 	bx	lr

0000b5d4 <CKernelOptions::GetKeyMap() const>:
    b5d4:	e2800e83 	add	r0, r0, #2096	; 0x830
    b5d8:	e12fff1e 	bx	lr

0000b5dc <CKernelOptions::GetUSBPowerDelay() const>:
    b5dc:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    b5e0:	e12fff1e 	bx	lr

0000b5e4 <CKernelOptions::GetCPUSpeed() const>:
    b5e4:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    b5e8:	e12fff1e 	bx	lr

0000b5ec <CKernelOptions::GetSoCMaxTemp() const>:
    b5ec:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    b5f0:	e12fff1e 	bx	lr

0000b5f4 <CKernelOptions::Get()>:
    b5f4:	e3033fac 	movw	r3, #16300	; 0x3fac
    b5f8:	e3403001 	movt	r3, #1
    b5fc:	e5930000 	ldr	r0, [r3]
    b600:	e12fff1e 	bx	lr

0000b604 <CKernelOptions::GetToken()>:
    b604:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    b608:	e1d320d0 	ldrsb	r2, [r3]
    b60c:	e3520000 	cmp	r2, #0
    b610:	1a000005 	bne	b62c <CKernelOptions::GetToken()+0x28>
    b614:	ea000016 	b	b674 <CKernelOptions::GetToken()+0x70>
    b618:	e2833001 	add	r3, r3, #1
    b61c:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    b620:	e1d320d0 	ldrsb	r2, [r3]
    b624:	e3520000 	cmp	r2, #0
    b628:	0a000011 	beq	b674 <CKernelOptions::GetToken()+0x70>
    b62c:	e3520020 	cmp	r2, #32
    b630:	0afffff8 	beq	b618 <CKernelOptions::GetToken()+0x14>
    b634:	e1a02003 	mov	r2, r3
    b638:	ea000000 	b	b640 <CKernelOptions::GetToken()+0x3c>
    b63c:	e1a02001 	mov	r2, r1
    b640:	e2821001 	add	r1, r2, #1
    b644:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    b648:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    b64c:	e35c0000 	cmp	ip, #0
    b650:	0a000008 	beq	b678 <CKernelOptions::GetToken()+0x74>
    b654:	e35c0020 	cmp	ip, #32
    b658:	1afffff7 	bne	b63c <CKernelOptions::GetToken()+0x38>
    b65c:	e2822002 	add	r2, r2, #2
    b660:	e3a0c000 	mov	ip, #0
    b664:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    b668:	e1a00003 	mov	r0, r3
    b66c:	e5c1c000 	strb	ip, [r1]
    b670:	e12fff1e 	bx	lr
    b674:	e3a03000 	mov	r3, #0
    b678:	e1a00003 	mov	r0, r3
    b67c:	e12fff1e 	bx	lr

0000b680 <CKernelOptions::CKernelOptions()>:
    b680:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b684:	e2807e81 	add	r7, r0, #2064	; 0x810
    b688:	e2877008 	add	r7, r7, #8
    b68c:	e1a05000 	mov	r5, r0
    b690:	e2809e83 	add	r9, r0, #2096	; 0x830
    b694:	e24dd01c 	sub	sp, sp, #28
    b698:	e3a04000 	mov	r4, #0
    b69c:	e3a02004 	mov	r2, #4
    b6a0:	e3a0303c 	mov	r3, #60	; 0x3c
    b6a4:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    b6a8:	e3021484 	movw	r1, #9348	; 0x2484
    b6ac:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    b6b0:	e3401001 	movt	r1, #1
    b6b4:	e1a00007 	mov	r0, r7
    b6b8:	e5854810 	str	r4, [r5, #2064]	; 0x810
    b6bc:	e5854814 	str	r4, [r5, #2068]	; 0x814
    b6c0:	e5854834 	str	r4, [r5, #2100]	; 0x834
    b6c4:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    b6c8:	ebfffeb3 	bl	b19c <strcpy>
    b6cc:	e1a00009 	mov	r0, r9
    b6d0:	e302148c 	movw	r1, #9356	; 0x248c
    b6d4:	e3401001 	movt	r1, #1
    b6d8:	ebfffeaf 	bl	b19c <strcpy>
    b6dc:	e3033fac 	movw	r3, #16300	; 0x3fac
    b6e0:	e3403001 	movt	r3, #1
    b6e4:	e28d0010 	add	r0, sp, #16
    b6e8:	e5835000 	str	r5, [r3]
    b6ec:	ebfff6bb 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
    b6f0:	e58d4000 	str	r4, [sp]
    b6f4:	e1a02005 	mov	r2, r5
    b6f8:	e28d0010 	add	r0, sp, #16
    b6fc:	e3a01001 	mov	r1, #1
    b700:	e300380c 	movw	r3, #2060	; 0x80c
    b704:	e3401005 	movt	r1, #5
    b708:	ebfff6fc 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b70c:	e1500004 	cmp	r0, r4
    b710:	0a000040 	beq	b818 <CKernelOptions::CKernelOptions()+0x198>
    b714:	e5953008 	ldr	r3, [r5, #8]
    b718:	e3530b02 	cmp	r3, #2048	; 0x800
    b71c:	2a00003d 	bcs	b818 <CKernelOptions::CKernelOptions()+0x198>
    b720:	e0853003 	add	r3, r5, r3
    b724:	e30264e0 	movw	r6, #9440	; 0x24e0
    b728:	e3028490 	movw	r8, #9360	; 0x2490
    b72c:	e302a498 	movw	sl, #9368	; 0x2498
    b730:	e3406001 	movt	r6, #1
    b734:	e3408001 	movt	r8, #1
    b738:	e340a001 	movt	sl, #1
    b73c:	e5c3400c 	strb	r4, [r3, #12]
    b740:	e285300c 	add	r3, r5, #12
    b744:	e585380c 	str	r3, [r5, #2060]	; 0x80c
    b748:	e1a00005 	mov	r0, r5
    b74c:	ebffffac 	bl	b604 <CKernelOptions::GetToken()>
    b750:	e250b000 	subs	fp, r0, #0
    b754:	0a00002f 	beq	b818 <CKernelOptions::CKernelOptions()+0x198>
    b758:	e1db30d0 	ldrsb	r3, [fp]
    b75c:	e3530000 	cmp	r3, #0
    b760:	0a000008 	beq	b788 <CKernelOptions::CKernelOptions()+0x108>
    b764:	e353003d 	cmp	r3, #61	; 0x3d
    b768:	e1a0400b 	mov	r4, fp
    b76c:	1a000002 	bne	b77c <CKernelOptions::CKernelOptions()+0xfc>
    b770:	ea00002d 	b	b82c <CKernelOptions::CKernelOptions()+0x1ac>
    b774:	e353003d 	cmp	r3, #61	; 0x3d
    b778:	0a00002b 	beq	b82c <CKernelOptions::CKernelOptions()+0x1ac>
    b77c:	e1f430d1 	ldrsb	r3, [r4, #1]!
    b780:	e3530000 	cmp	r3, #0
    b784:	1afffffa 	bne	b774 <CKernelOptions::CKernelOptions()+0xf4>
    b788:	e1a01006 	mov	r1, r6
    b78c:	e1a0000b 	mov	r0, fp
    b790:	ebfffe66 	bl	b130 <strcmp>
    b794:	e3500000 	cmp	r0, #0
    b798:	0affffea 	beq	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b79c:	e1a01008 	mov	r1, r8
    b7a0:	e1a0000b 	mov	r0, fp
    b7a4:	ebfffe61 	bl	b130 <strcmp>
    b7a8:	e3500000 	cmp	r0, #0
    b7ac:	13a03000 	movne	r3, #0
    b7b0:	0affffe4 	beq	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b7b4:	e1a0100a 	mov	r1, sl
    b7b8:	e1a0000b 	mov	r0, fp
    b7bc:	e58d300c 	str	r3, [sp, #12]
    b7c0:	ebfffe5a 	bl	b130 <strcmp>
    b7c4:	e59d300c 	ldr	r3, [sp, #12]
    b7c8:	e2504000 	subs	r4, r0, #0
    b7cc:	0a00002a 	beq	b87c <CKernelOptions::CKernelOptions()+0x1fc>
    b7d0:	e30214a0 	movw	r1, #9376	; 0x24a0
    b7d4:	e1a0000b 	mov	r0, fp
    b7d8:	e3401001 	movt	r1, #1
    b7dc:	e58d300c 	str	r3, [sp, #12]
    b7e0:	ebfffe52 	bl	b130 <strcmp>
    b7e4:	e59d300c 	ldr	r3, [sp, #12]
    b7e8:	e3500000 	cmp	r0, #0
    b7ec:	1a000028 	bne	b894 <CKernelOptions::CKernelOptions()+0x214>
    b7f0:	e3530000 	cmp	r3, #0
    b7f4:	0affffd3 	beq	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b7f8:	e1d320d0 	ldrsb	r2, [r3]
    b7fc:	e3520000 	cmp	r2, #0
    b800:	0affffd0 	beq	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b804:	e1a00003 	mov	r0, r3
    b808:	ebffff4d 	bl	b544 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b80c:	e3500004 	cmp	r0, #4
    b810:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    b814:	eaffffcb 	b	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b818:	e28d0010 	add	r0, sp, #16
    b81c:	ebfff675 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
    b820:	e1a00005 	mov	r0, r5
    b824:	e28dd01c 	add	sp, sp, #28
    b828:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b82c:	e3a03000 	mov	r3, #0
    b830:	e1a01006 	mov	r1, r6
    b834:	e5c43000 	strb	r3, [r4]
    b838:	e1a0000b 	mov	r0, fp
    b83c:	ebfffe3b 	bl	b130 <strcmp>
    b840:	e2843001 	add	r3, r4, #1
    b844:	e3500000 	cmp	r0, #0
    b848:	1a000058 	bne	b9b0 <CKernelOptions::CKernelOptions()+0x330>
    b84c:	e3530000 	cmp	r3, #0
    b850:	0affffbc 	beq	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b854:	e1d420d1 	ldrsb	r2, [r4, #1]
    b858:	e3520000 	cmp	r2, #0
    b85c:	0affffb9 	beq	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b860:	e1a00003 	mov	r0, r3
    b864:	ebffff36 	bl	b544 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b868:	e300353c 	movw	r3, #1340	; 0x53c
    b86c:	e2402d0a 	sub	r2, r0, #640	; 0x280
    b870:	e1520003 	cmp	r2, r3
    b874:	95850810 	strls	r0, [r5, #2064]	; 0x810
    b878:	eaffffb2 	b	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b87c:	e1a01003 	mov	r1, r3
    b880:	e3a02013 	mov	r2, #19
    b884:	e1a00007 	mov	r0, r7
    b888:	ebfffe4e 	bl	b1c8 <strncpy>
    b88c:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    b890:	eaffffac 	b	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b894:	e30214ac 	movw	r1, #9388	; 0x24ac
    b898:	e1a0000b 	mov	r0, fp
    b89c:	e3401001 	movt	r1, #1
    b8a0:	e58d300c 	str	r3, [sp, #12]
    b8a4:	ebfffe21 	bl	b130 <strcmp>
    b8a8:	e59d300c 	ldr	r3, [sp, #12]
    b8ac:	e2504000 	subs	r4, r0, #0
    b8b0:	1a000005 	bne	b8cc <CKernelOptions::CKernelOptions()+0x24c>
    b8b4:	e1a01003 	mov	r1, r3
    b8b8:	e3a02002 	mov	r2, #2
    b8bc:	e1a00009 	mov	r0, r9
    b8c0:	ebfffe40 	bl	b1c8 <strncpy>
    b8c4:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    b8c8:	eaffff9e 	b	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b8cc:	e30214b4 	movw	r1, #9396	; 0x24b4
    b8d0:	e1a0000b 	mov	r0, fp
    b8d4:	e3401001 	movt	r1, #1
    b8d8:	e58d300c 	str	r3, [sp, #12]
    b8dc:	ebfffe13 	bl	b130 <strcmp>
    b8e0:	e59d300c 	ldr	r3, [sp, #12]
    b8e4:	e3500000 	cmp	r0, #0
    b8e8:	1a00000b 	bne	b91c <CKernelOptions::CKernelOptions()+0x29c>
    b8ec:	e3530000 	cmp	r3, #0
    b8f0:	0affff94 	beq	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b8f4:	e1d320d0 	ldrsb	r2, [r3]
    b8f8:	e3520000 	cmp	r2, #0
    b8fc:	0affff91 	beq	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b900:	e1a00003 	mov	r0, r3
    b904:	ebffff0e 	bl	b544 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b908:	e3013e78 	movw	r3, #7800	; 0x1e78
    b90c:	e24020c8 	sub	r2, r0, #200	; 0xc8
    b910:	e1520003 	cmp	r2, r3
    b914:	95850834 	strls	r0, [r5, #2100]	; 0x834
    b918:	eaffff8a 	b	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b91c:	e30214c4 	movw	r1, #9412	; 0x24c4
    b920:	e1a0000b 	mov	r0, fp
    b924:	e3401001 	movt	r1, #1
    b928:	e58d300c 	str	r3, [sp, #12]
    b92c:	ebfffdff 	bl	b130 <strcmp>
    b930:	e59d300c 	ldr	r3, [sp, #12]
    b934:	e3500000 	cmp	r0, #0
    b938:	1a000007 	bne	b95c <CKernelOptions::CKernelOptions()+0x2dc>
    b93c:	e1a00003 	mov	r0, r3
    b940:	e30214cc 	movw	r1, #9420	; 0x24cc
    b944:	e3401001 	movt	r1, #1
    b948:	ebfffdf8 	bl	b130 <strcmp>
    b94c:	e3500000 	cmp	r0, #0
    b950:	03a03001 	moveq	r3, #1
    b954:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    b958:	eaffff7a 	b	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b95c:	e1a0000b 	mov	r0, fp
    b960:	e30214d4 	movw	r1, #9428	; 0x24d4
    b964:	e3401001 	movt	r1, #1
    b968:	e58d300c 	str	r3, [sp, #12]
    b96c:	ebfffdef 	bl	b130 <strcmp>
    b970:	e59d300c 	ldr	r3, [sp, #12]
    b974:	e2902000 	adds	r2, r0, #0
    b978:	13a02001 	movne	r2, #1
    b97c:	e3530000 	cmp	r3, #0
    b980:	03822001 	orreq	r2, r2, #1
    b984:	e3520000 	cmp	r2, #0
    b988:	1affff6e 	bne	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b98c:	e1d320d0 	ldrsb	r2, [r3]
    b990:	e3520000 	cmp	r2, #0
    b994:	0affff6b 	beq	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b998:	e1a00003 	mov	r0, r3
    b99c:	ebfffee8 	bl	b544 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b9a0:	e2403028 	sub	r3, r0, #40	; 0x28
    b9a4:	e3530026 	cmp	r3, #38	; 0x26
    b9a8:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    b9ac:	eaffff65 	b	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b9b0:	e1a01008 	mov	r1, r8
    b9b4:	e1a0000b 	mov	r0, fp
    b9b8:	e58d300c 	str	r3, [sp, #12]
    b9bc:	ebfffddb 	bl	b130 <strcmp>
    b9c0:	e59d300c 	ldr	r3, [sp, #12]
    b9c4:	e3500000 	cmp	r0, #0
    b9c8:	1affff79 	bne	b7b4 <CKernelOptions::CKernelOptions()+0x134>
    b9cc:	e3530000 	cmp	r3, #0
    b9d0:	0affff5c 	beq	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b9d4:	e1d420d1 	ldrsb	r2, [r4, #1]
    b9d8:	e3520000 	cmp	r2, #0
    b9dc:	0affff59 	beq	b748 <CKernelOptions::CKernelOptions()+0xc8>
    b9e0:	e1a00003 	mov	r0, r3
    b9e4:	ebfffed6 	bl	b544 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b9e8:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    b9ec:	e3530f96 	cmp	r3, #600	; 0x258
    b9f0:	95850814 	strls	r0, [r5, #2068]	; 0x814
    b9f4:	eaffff53 	b	b748 <CKernelOptions::CKernelOptions()+0xc8>

0000b9f8 <CKernelOptions::GetOptionValue(char*)>:
    b9f8:	e1d030d0 	ldrsb	r3, [r0]
    b9fc:	e3530000 	cmp	r3, #0
    ba00:	1a000003 	bne	ba14 <CKernelOptions::GetOptionValue(char*)+0x1c>
    ba04:	ea000007 	b	ba28 <CKernelOptions::GetOptionValue(char*)+0x30>
    ba08:	e1f030d1 	ldrsb	r3, [r0, #1]!
    ba0c:	e3530000 	cmp	r3, #0
    ba10:	0a000004 	beq	ba28 <CKernelOptions::GetOptionValue(char*)+0x30>
    ba14:	e353003d 	cmp	r3, #61	; 0x3d
    ba18:	1afffffa 	bne	ba08 <CKernelOptions::GetOptionValue(char*)+0x10>
    ba1c:	e2803001 	add	r3, r0, #1
    ba20:	e3a02000 	mov	r2, #0
    ba24:	e5c02000 	strb	r2, [r0]
    ba28:	e1a00003 	mov	r0, r3
    ba2c:	e12fff1e 	bx	lr

0000ba30 <CKernelOptions::GetDecimal(char*)>:
    ba30:	e2503000 	subs	r3, r0, #0
    ba34:	0a000002 	beq	ba44 <CKernelOptions::GetDecimal(char*)+0x14>
    ba38:	e1d330d0 	ldrsb	r3, [r3]
    ba3c:	e3530000 	cmp	r3, #0
    ba40:	1a000001 	bne	ba4c <CKernelOptions::GetDecimal(char*)+0x1c>
    ba44:	e3e00000 	mvn	r0, #0
    ba48:	e12fff1e 	bx	lr
    ba4c:	eafffebc 	b	b544 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000ba50 <CPageTable::CPageTable()>:
    ba50:	e3a01000 	mov	r1, #0
    ba54:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
    ba58:	e92d4010 	push	{r4, lr}
    ba5c:	e1a0c001 	mov	ip, r1
    ba60:	e1a04000 	mov	r4, r0
    ba64:	e1a03002 	mov	r3, r2
    ba68:	e3a0e002 	mov	lr, #2
    ba6c:	e3a00001 	mov	r0, #1
    ba70:	e8840006 	stm	r4, {r1, r2}
    ba74:	e5d32000 	ldrb	r2, [r3]
    ba78:	e35c0b01 	cmp	ip, #1024	; 0x400
    ba7c:	e5d31002 	ldrb	r1, [r3, #2]
    ba80:	e2833004 	add	r3, r3, #4
    ba84:	e7c1201e 	bfi	r2, lr, #0, #2
    ba88:	e3811001 	orr	r1, r1, #1
    ba8c:	e6ef2072 	uxtb	r2, r2
    ba90:	e20110f9 	and	r1, r1, #249	; 0xf9
    ba94:	e3822004 	orr	r2, r2, #4
    ba98:	e7c3119f 	bfc	r1, #3, #1
    ba9c:	e20220f7 	and	r2, r2, #247	; 0xf7
    baa0:	e5431002 	strb	r1, [r3, #-2]
    baa4:	e7c4221f 	bfc	r2, #4, #1
    baa8:	e5432004 	strb	r2, [r3, #-4]
    baac:	e15320b4 	ldrh	r2, [r3, #-4]
    bab0:	e15310b2 	ldrh	r1, [r3, #-2]
    bab4:	e7c8229f 	bfc	r2, #5, #4
    bab8:	e14320b4 	strh	r2, [r3, #-4]
    babc:	e7cf121c 	bfi	r1, ip, #4, #12
    bac0:	e28cc001 	add	ip, ip, #1
    bac4:	e1a02422 	lsr	r2, r2, #8
    bac8:	e14310b2 	strh	r1, [r3, #-2]
    bacc:	e20220fd 	and	r2, r2, #253	; 0xfd
    bad0:	e7c32110 	bfi	r2, r0, #2, #2
    bad4:	e202208f 	and	r2, r2, #143	; 0x8f
    bad8:	e7c7239f 	bfc	r2, #7, #1
    badc:	e5432003 	strb	r2, [r3, #-3]
    bae0:	25532004 	ldrbcs	r2, [r3, #-4]
    bae4:	23822010 	orrcs	r2, r2, #16
    bae8:	25432004 	strbcs	r2, [r3, #-4]
    baec:	e35c0a01 	cmp	ip, #4096	; 0x1000
    baf0:	1affffdf 	bne	ba74 <CPageTable::CPageTable()+0x24>
    baf4:	eb001238 	bl	103dc <CleanDataCache>
    baf8:	e1a00004 	mov	r0, r4
    bafc:	e8bd8010 	pop	{r4, pc}

0000bb00 <CPageTable::CPageTable(unsigned int)>:
    bb00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bb04:	e3a03001 	mov	r3, #1
    bb08:	e5803000 	str	r3, [r0]
    bb0c:	e1a04000 	mov	r4, r0
    bb10:	e1a05001 	mov	r5, r1
    bb14:	eb00162d 	bl	113d0 <palloc>
    bb18:	e3500000 	cmp	r0, #0
    bb1c:	e5840004 	str	r0, [r4, #4]
    bb20:	0a00003e 	beq	bc20 <CPageTable::CPageTable(unsigned int)+0x120>
    bb24:	e7eb3050 	ubfx	r3, r0, #0, #12
    bb28:	e3530000 	cmp	r3, #0
    bb2c:	1a000033 	bne	bc00 <CPageTable::CPageTable(unsigned int)+0x100>
    bb30:	e3a02000 	mov	r2, #0
    bb34:	e301cc04 	movw	ip, #7172	; 0x1c04
    bb38:	e1a07002 	mov	r7, r2
    bb3c:	e340c001 	movt	ip, #1
    bb40:	e3a06002 	mov	r6, #2
    bb44:	e3a0e001 	mov	lr, #1
    bb48:	ea000009 	b	bb74 <CPageTable::CPageTable(unsigned int)+0x74>
    bb4c:	e6ef1073 	uxtb	r1, r3
    bb50:	e5d03002 	ldrb	r3, [r0, #2]
    bb54:	e7c31197 	bfi	r1, r7, #3, #1
    bb58:	e5c01000 	strb	r1, [r0]
    bb5c:	e3833001 	orr	r3, r3, #1
    bb60:	e5c03002 	strb	r3, [r0, #2]
    bb64:	e2822601 	add	r2, r2, #1048576	; 0x100000
    bb68:	e2800004 	add	r0, r0, #4
    bb6c:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    bb70:	0a00001f 	beq	bbf4 <CPageTable::CPageTable(unsigned int)+0xf4>
    bb74:	e5d03001 	ldrb	r3, [r0, #1]
    bb78:	e7e31a52 	ubfx	r1, r2, #20, #4
    bb7c:	e152000c 	cmp	r2, ip
    bb80:	e386800c 	orr	r8, r6, #12
    bb84:	e20330fc 	and	r3, r3, #252	; 0xfc
    bb88:	e1a01201 	lsl	r1, r1, #4
    bb8c:	e7c3311e 	bfi	r3, lr, #2, #2
    bb90:	e5c01002 	strb	r1, [r0, #2]
    bb94:	e203308f 	and	r3, r3, #143	; 0x8f
    bb98:	e1a01c22 	lsr	r1, r2, #24
    bb9c:	e7c7339f 	bfc	r3, #7, #1
    bba0:	e5c08000 	strb	r8, [r0]
    bba4:	e5c03001 	strb	r3, [r0, #1]
    bba8:	e5c01003 	strb	r1, [r0, #3]
    bbac:	3affffec 	bcc	bb64 <CPageTable::CPageTable(unsigned int)+0x64>
    bbb0:	e1520005 	cmp	r2, r5
    bbb4:	e6ef3078 	uxtb	r3, r8
    bbb8:	e3833010 	orr	r3, r3, #16
    bbbc:	e5c03000 	strb	r3, [r0]
    bbc0:	2affffe1 	bcs	bb4c <CPageTable::CPageTable(unsigned int)+0x4c>
    bbc4:	e3520501 	cmp	r2, #4194304	; 0x400000
    bbc8:	1affffe5 	bne	bb64 <CPageTable::CPageTable(unsigned int)+0x64>
    bbcc:	e5d03000 	ldrb	r3, [r0]
    bbd0:	e3a02605 	mov	r2, #5242880	; 0x500000
    bbd4:	e5d01002 	ldrb	r1, [r0, #2]
    bbd8:	e2800004 	add	r0, r0, #4
    bbdc:	e20330fb 	and	r3, r3, #251	; 0xfb
    bbe0:	e7c33197 	bfi	r3, r7, #3, #1
    bbe4:	e3811001 	orr	r1, r1, #1
    bbe8:	e5403004 	strb	r3, [r0, #-4]
    bbec:	e5401002 	strb	r1, [r0, #-2]
    bbf0:	eaffffdf 	b	bb74 <CPageTable::CPageTable(unsigned int)+0x74>
    bbf4:	eb0011f8 	bl	103dc <CleanDataCache>
    bbf8:	e1a00004 	mov	r0, r4
    bbfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bc00:	e30214e8 	movw	r1, #9448	; 0x24e8
    bc04:	e3020508 	movw	r0, #9480	; 0x2508
    bc08:	e3401001 	movt	r1, #1
    bc0c:	e3400001 	movt	r0, #1
    bc10:	e3a02051 	mov	r2, #81	; 0x51
    bc14:	eb0004a1 	bl	cea0 <assertion_failed>
    bc18:	e5940004 	ldr	r0, [r4, #4]
    bc1c:	eaffffc3 	b	bb30 <CPageTable::CPageTable(unsigned int)+0x30>
    bc20:	e30214e8 	movw	r1, #9448	; 0x24e8
    bc24:	e30204f8 	movw	r0, #9464	; 0x24f8
    bc28:	e3401001 	movt	r1, #1
    bc2c:	e3400001 	movt	r0, #1
    bc30:	e3a02050 	mov	r2, #80	; 0x50
    bc34:	eb000499 	bl	cea0 <assertion_failed>
    bc38:	e5940004 	ldr	r0, [r4, #4]
    bc3c:	eaffffb8 	b	bb24 <CPageTable::CPageTable(unsigned int)+0x24>

0000bc40 <CPageTable::~CPageTable()>:
    bc40:	e5903000 	ldr	r3, [r0]
    bc44:	e92d4010 	push	{r4, lr}
    bc48:	e3530000 	cmp	r3, #0
    bc4c:	e1a04000 	mov	r4, r0
    bc50:	0a000001 	beq	bc5c <CPageTable::~CPageTable()+0x1c>
    bc54:	e5900004 	ldr	r0, [r0, #4]
    bc58:	eb001616 	bl	114b8 <pfree>
    bc5c:	e1a00004 	mov	r0, r4
    bc60:	e8bd8010 	pop	{r4, pc}

0000bc64 <CPageTable::GetBaseAddress() const>:
    bc64:	e5900004 	ldr	r0, [r0, #4]
    bc68:	e3800059 	orr	r0, r0, #89	; 0x59
    bc6c:	e12fff1e 	bx	lr

0000bc70 <CScreenDevice::~CScreenDevice()>:
    bc70:	e590200c 	ldr	r2, [r0, #12]
    bc74:	e59f3068 	ldr	r3, [pc, #104]	; bce4 <CScreenDevice::~CScreenDevice()+0x74>
    bc78:	e3520000 	cmp	r2, #0
    bc7c:	e92d4070 	push	{r4, r5, r6, lr}
    bc80:	e1a04000 	mov	r4, r0
    bc84:	e5803000 	str	r3, [r0]
    bc88:	0a000003 	beq	bc9c <CScreenDevice::~CScreenDevice()+0x2c>
    bc8c:	e5900018 	ldr	r0, [r0, #24]
    bc90:	e3500000 	cmp	r0, #0
    bc94:	0a000000 	beq	bc9c <CScreenDevice::~CScreenDevice()+0x2c>
    bc98:	ebfff98f 	bl	a2dc <operator delete[](void*)>
    bc9c:	e5945010 	ldr	r5, [r4, #16]
    bca0:	e3a03000 	mov	r3, #0
    bca4:	e5843018 	str	r3, [r4, #24]
    bca8:	e1550003 	cmp	r5, r3
    bcac:	0a000004 	beq	bcc4 <CScreenDevice::~CScreenDevice()+0x54>
    bcb0:	e1a00005 	mov	r0, r5
    bcb4:	eb0016f5 	bl	11890 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    bcb8:	e1a00005 	mov	r0, r5
    bcbc:	e3a01024 	mov	r1, #36	; 0x24
    bcc0:	ebfff986 	bl	a2e0 <operator delete(void*, unsigned int)>
    bcc4:	e3a03000 	mov	r3, #0
    bcc8:	e2840014 	add	r0, r4, #20
    bccc:	e5843010 	str	r3, [r4, #16]
    bcd0:	eb000499 	bl	cf3c <CCharGenerator::~CCharGenerator()>
    bcd4:	e1a00004 	mov	r0, r4
    bcd8:	eb00176d 	bl	11a94 <CDevice::~CDevice()>
    bcdc:	e1a00004 	mov	r0, r4
    bce0:	e8bd8070 	pop	{r4, r5, r6, pc}
    bce4:	00012530 	.word	0x00012530

0000bce8 <CScreenDevice::~CScreenDevice()>:
    bce8:	e92d4010 	push	{r4, lr}
    bcec:	e1a04000 	mov	r4, r0
    bcf0:	ebffffde 	bl	bc70 <CScreenDevice::~CScreenDevice()>
    bcf4:	e1a00004 	mov	r0, r4
    bcf8:	e3a01060 	mov	r1, #96	; 0x60
    bcfc:	ebfff977 	bl	a2e0 <operator delete(void*, unsigned int)>
    bd00:	e1a00004 	mov	r0, r4
    bd04:	e8bd8010 	pop	{r4, pc}

0000bd08 <CScreenDevice::InvertCursor() [clone .part.6]>:
    bd08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bd0c:	e2806014 	add	r6, r0, #20
    bd10:	e1a05000 	mov	r5, r0
    bd14:	e3a08000 	mov	r8, #0
    bd18:	e1a00006 	mov	r0, r6
    bd1c:	eb00048b 	bl	cf50 <CCharGenerator::GetUnderline() const>
    bd20:	e1a07000 	mov	r7, r0
    bd24:	e1a00006 	mov	r0, r6
    bd28:	eb000486 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    bd2c:	e1500007 	cmp	r0, r7
    bd30:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    bd34:	e3a04000 	mov	r4, #0
    bd38:	ea000013 	b	bd8c <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    bd3c:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    bd40:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    bd44:	e0843003 	add	r3, r4, r3
    bd48:	e1530002 	cmp	r3, r2
    bd4c:	2a00000d 	bcs	bd88 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    bd50:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bd54:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    bd58:	e0872002 	add	r2, r7, r2
    bd5c:	e1520001 	cmp	r2, r1
    bd60:	2a000008 	bcs	bd88 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    bd64:	e5950020 	ldr	r0, [r5, #32]
    bd68:	e5951018 	ldr	r1, [r5, #24]
    bd6c:	e0233290 	mla	r3, r0, r2, r3
    bd70:	e1a03083 	lsl	r3, r3, #1
    bd74:	e19120b3 	ldrh	r2, [r1, r3]
    bd78:	e3520000 	cmp	r2, #0
    bd7c:	118180b3 	strhne	r8, [r1, r3]
    bd80:	01d524b8 	ldrheq	r2, [r5, #72]	; 0x48
    bd84:	018120b3 	strheq	r2, [r1, r3]
    bd88:	e2844001 	add	r4, r4, #1
    bd8c:	e1a00006 	mov	r0, r6
    bd90:	eb00046a 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    bd94:	e1500004 	cmp	r0, r4
    bd98:	8affffe7 	bhi	bd3c <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    bd9c:	e2877001 	add	r7, r7, #1
    bda0:	eaffffdf 	b	bd24 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000bda4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    bda4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bda8:	e1a04000 	mov	r4, r0
    bdac:	e1a05001 	mov	r5, r1
    bdb0:	e1a07002 	mov	r7, r2
    bdb4:	e1a06003 	mov	r6, r3
    bdb8:	eb001741 	bl	11ac4 <CDevice::CDevice()>
    bdbc:	e59fc054 	ldr	ip, [pc, #84]	; be18 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x74>
    bdc0:	e2840014 	add	r0, r4, #20
    bdc4:	e5845004 	str	r5, [r4, #4]
    bdc8:	e3a05000 	mov	r5, #0
    bdcc:	e5847008 	str	r7, [r4, #8]
    bdd0:	e584600c 	str	r6, [r4, #12]
    bdd4:	e584c000 	str	ip, [r4]
    bdd8:	e5845010 	str	r5, [r4, #16]
    bddc:	eb000453 	bl	cf30 <CCharGenerator::CCharGenerator()>
    bde0:	e3a03001 	mov	r3, #1
    bde4:	e3e02020 	mvn	r2, #32
    bde8:	e5845018 	str	r5, [r4, #24]
    bdec:	e5845030 	str	r5, [r4, #48]	; 0x30
    bdf0:	e1a00004 	mov	r0, r4
    bdf4:	e5845034 	str	r5, [r4, #52]	; 0x34
    bdf8:	e584503c 	str	r5, [r4, #60]	; 0x3c
    bdfc:	e5845040 	str	r5, [r4, #64]	; 0x40
    be00:	e584504c 	str	r5, [r4, #76]	; 0x4c
    be04:	e5845058 	str	r5, [r4, #88]	; 0x58
    be08:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
    be0c:	e5843044 	str	r3, [r4, #68]	; 0x44
    be10:	e584305c 	str	r3, [r4, #92]	; 0x5c
    be14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    be18:	00012530 	.word	0x00012530

0000be1c <CScreenDevice::GetWidth() const>:
    be1c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    be20:	e12fff1e 	bx	lr

0000be24 <CScreenDevice::GetHeight() const>:
    be24:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    be28:	e12fff1e 	bx	lr

0000be2c <CScreenDevice::GetColumns() const>:
    be2c:	e1a03000 	mov	r3, r0
    be30:	e2800014 	add	r0, r0, #20
    be34:	e92d4010 	push	{r4, lr}
    be38:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    be3c:	eb00043f 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    be40:	e1a01000 	mov	r1, r0
    be44:	e1a00004 	mov	r0, r4
    be48:	eb001615 	bl	116a4 <__aeabi_uidiv>
    be4c:	e8bd8010 	pop	{r4, pc}

0000be50 <CScreenDevice::GetRows() const>:
    be50:	e1a03000 	mov	r3, r0
    be54:	e2800014 	add	r0, r0, #20
    be58:	e92d4010 	push	{r4, lr}
    be5c:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    be60:	eb000438 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    be64:	e1a01000 	mov	r1, r0
    be68:	e1a00004 	mov	r0, r4
    be6c:	eb00160c 	bl	116a4 <__aeabi_uidiv>
    be70:	e8bd8010 	pop	{r4, pc}

0000be74 <CScreenDevice::GetStatus()>:
    be74:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    be78:	e591c038 	ldr	ip, [r1, #56]	; 0x38
    be7c:	e5916018 	ldr	r6, [r1, #24]
    be80:	e591501c 	ldr	r5, [r1, #28]
    be84:	e5914030 	ldr	r4, [r1, #48]	; 0x30
    be88:	e591e034 	ldr	lr, [r1, #52]	; 0x34
    be8c:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
    be90:	e5806000 	str	r6, [r0]
    be94:	e5917040 	ldr	r7, [r1, #64]	; 0x40
    be98:	e5805004 	str	r5, [r0, #4]
    be9c:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    bea0:	e5804008 	str	r4, [r0, #8]
    bea4:	e1d154b8 	ldrh	r5, [r1, #72]	; 0x48
    bea8:	e580e00c 	str	lr, [r0, #12]
    beac:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    beb0:	e580c010 	str	ip, [r0, #16]
    beb4:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    beb8:	e5802014 	str	r2, [r0, #20]
    bebc:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    bec0:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    bec4:	e5807018 	str	r7, [r0, #24]
    bec8:	e580601c 	str	r6, [r0, #28]
    becc:	e1c052b0 	strh	r5, [r0, #32]
    bed0:	e5804024 	str	r4, [r0, #36]	; 0x24
    bed4:	e580e028 	str	lr, [r0, #40]	; 0x28
    bed8:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    bedc:	e5802030 	str	r2, [r0, #48]	; 0x30
    bee0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000bee4 <CScreenDevice::SetStatus(TScreenStatus)>:
    bee4:	e24dd010 	sub	sp, sp, #16
    bee8:	e92d4070 	push	{r4, r5, r6, lr}
    beec:	e28dc014 	add	ip, sp, #20
    bef0:	e590e01c 	ldr	lr, [r0, #28]
    bef4:	e88c000e 	stm	ip, {r1, r2, r3}
    bef8:	e59d3018 	ldr	r3, [sp, #24]
    befc:	e15e0003 	cmp	lr, r3
    bf00:	0a000003 	beq	bf14 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    bf04:	e3a00000 	mov	r0, #0
    bf08:	e8bd4070 	pop	{r4, r5, r6, lr}
    bf0c:	e28dd010 	add	sp, sp, #16
    bf10:	e12fff1e 	bx	lr
    bf14:	e5902020 	ldr	r2, [r0, #32]
    bf18:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bf1c:	e1520003 	cmp	r2, r3
    bf20:	1afffff7 	bne	bf04 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bf24:	e1a04000 	mov	r4, r0
    bf28:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    bf2c:	e3500000 	cmp	r0, #0
    bf30:	1a000023 	bne	bfc4 <CScreenDevice::SetStatus(TScreenStatus)+0xe0>
    bf34:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    bf38:	e3530000 	cmp	r3, #0
    bf3c:	1afffff0 	bne	bf04 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bf40:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    bf44:	e3530000 	cmp	r3, #0
    bf48:	1affffed 	bne	bf04 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bf4c:	e1a0200e 	mov	r2, lr
    bf50:	e59d1014 	ldr	r1, [sp, #20]
    bf54:	e5940018 	ldr	r0, [r4, #24]
    bf58:	ebfffd62 	bl	b4e8 <memcpy>
    bf5c:	e59d201c 	ldr	r2, [sp, #28]
    bf60:	e59d3020 	ldr	r3, [sp, #32]
    bf64:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
    bf68:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
    bf6c:	e3510000 	cmp	r1, #0
    bf70:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    bf74:	e59de02c 	ldr	lr, [sp, #44]	; 0x2c
    bf78:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    bf7c:	e1dd03b4 	ldrh	r0, [sp, #52]	; 0x34
    bf80:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    bf84:	e5842030 	str	r2, [r4, #48]	; 0x30
    bf88:	e5843034 	str	r3, [r4, #52]	; 0x34
    bf8c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    bf90:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    bf94:	e5846038 	str	r6, [r4, #56]	; 0x38
    bf98:	e584503c 	str	r5, [r4, #60]	; 0x3c
    bf9c:	e584e040 	str	lr, [r4, #64]	; 0x40
    bfa0:	e584c044 	str	ip, [r4, #68]	; 0x44
    bfa4:	e1c404b8 	strh	r0, [r4, #72]	; 0x48
    bfa8:	e584104c 	str	r1, [r4, #76]	; 0x4c
    bfac:	e5842050 	str	r2, [r4, #80]	; 0x50
    bfb0:	e5843054 	str	r3, [r4, #84]	; 0x54
    bfb4:	1a00000f 	bne	bff8 <CScreenDevice::SetStatus(TScreenStatus)+0x114>
    bfb8:	f57ff05f 	dmb	sy
    bfbc:	e3a00001 	mov	r0, #1
    bfc0:	eaffffd0 	b	bf08 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    bfc4:	ebfff8c7 	bl	a2e8 <EnterCritical>
    bfc8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    bfcc:	e3530000 	cmp	r3, #0
    bfd0:	1a000003 	bne	bfe4 <CScreenDevice::SetStatus(TScreenStatus)+0x100>
    bfd4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    bfd8:	e3530000 	cmp	r3, #0
    bfdc:	0594e01c 	ldreq	lr, [r4, #28]
    bfe0:	0affffd9 	beq	bf4c <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    bfe4:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    bfe8:	e3530000 	cmp	r3, #0
    bfec:	0affffc4 	beq	bf04 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bff0:	ebfff8ea 	bl	a3a0 <LeaveCritical>
    bff4:	eaffffc2 	b	bf04 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    bff8:	ebfff8e8 	bl	a3a0 <LeaveCritical>
    bffc:	eaffffed 	b	bfb8 <CScreenDevice::SetStatus(TScreenStatus)+0xd4>

0000c000 <CScreenDevice::CarriageReturn()>:
    c000:	e3a03000 	mov	r3, #0
    c004:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c008:	e12fff1e 	bx	lr

0000c00c <CScreenDevice::CursorHome()>:
    c00c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c010:	e3a02000 	mov	r2, #0
    c014:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c018:	e5803040 	str	r3, [r0, #64]	; 0x40
    c01c:	e12fff1e 	bx	lr

0000c020 <CScreenDevice::CursorLeft()>:
    c020:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    c024:	e92d4070 	push	{r4, r5, r6, lr}
    c028:	e3530000 	cmp	r3, #0
    c02c:	e1a04000 	mov	r4, r0
    c030:	1a00000f 	bne	c074 <CScreenDevice::CursorLeft()+0x54>
    c034:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    c038:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c03c:	e1520003 	cmp	r2, r3
    c040:	98bd8070 	popls	{r4, r5, r6, pc}
    c044:	e2806014 	add	r6, r0, #20
    c048:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    c04c:	e1a00006 	mov	r0, r6
    c050:	eb0003ba 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    c054:	e0455000 	sub	r5, r5, r0
    c058:	e1a00006 	mov	r0, r6
    c05c:	e584503c 	str	r5, [r4, #60]	; 0x3c
    c060:	eb0003b8 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c064:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c068:	e0430000 	sub	r0, r3, r0
    c06c:	e5840040 	str	r0, [r4, #64]	; 0x40
    c070:	e8bd8070 	pop	{r4, r5, r6, pc}
    c074:	e2800014 	add	r0, r0, #20
    c078:	eb0003b0 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    c07c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    c080:	e0430000 	sub	r0, r3, r0
    c084:	e584003c 	str	r0, [r4, #60]	; 0x3c
    c088:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c08c <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    c08c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c090:	e2806014 	add	r6, r0, #20
    c094:	e1a05000 	mov	r5, r0
    c098:	e1a04002 	mov	r4, r2
    c09c:	e1a00006 	mov	r0, r6
    c0a0:	e1a07001 	mov	r7, r1
    c0a4:	eb0003a5 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    c0a8:	e2444001 	sub	r4, r4, #1
    c0ac:	e0040490 	mul	r4, r0, r4
    c0b0:	e1a00006 	mov	r0, r6
    c0b4:	eb0003a3 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c0b8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c0bc:	e1540003 	cmp	r4, r3
    c0c0:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    c0c4:	e2477001 	sub	r7, r7, #1
    c0c8:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    c0cc:	e0000790 	mul	r0, r0, r7
    c0d0:	e1500003 	cmp	r0, r3
    c0d4:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    c0d8:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    c0dc:	e1500003 	cmp	r0, r3
    c0e0:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    c0e4:	35850040 	strcc	r0, [r5, #64]	; 0x40
    c0e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c0ec <CScreenDevice::CursorUp()>:
    c0ec:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    c0f0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c0f4:	e1520003 	cmp	r2, r3
    c0f8:	912fff1e 	bxls	lr
    c0fc:	e92d4010 	push	{r4, lr}
    c100:	e1a04000 	mov	r4, r0
    c104:	e2800014 	add	r0, r0, #20
    c108:	eb00038e 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c10c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c110:	e0430000 	sub	r0, r3, r0
    c114:	e5840040 	str	r0, [r4, #64]	; 0x40
    c118:	e8bd8010 	pop	{r4, pc}

0000c11c <CScreenDevice::DeleteChars(unsigned int)>:
    c11c:	e12fff1e 	bx	lr

0000c120 <CScreenDevice::DeleteLines(unsigned int)>:
    c120:	e12fff1e 	bx	lr

0000c124 <CScreenDevice::InsertLines(unsigned int)>:
    c124:	e12fff1e 	bx	lr

0000c128 <CScreenDevice::InsertMode(int)>:
    c128:	e580104c 	str	r1, [r0, #76]	; 0x4c
    c12c:	e12fff1e 	bx	lr

0000c130 <CScreenDevice::ReverseScroll()>:
    c130:	e12fff1e 	bx	lr

0000c134 <CScreenDevice::SetCursorMode(int)>:
    c134:	e5801044 	str	r1, [r0, #68]	; 0x44
    c138:	e12fff1e 	bx	lr

0000c13c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    c13c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c140:	e2807014 	add	r7, r0, #20
    c144:	e1a06000 	mov	r6, r0
    c148:	e1a05002 	mov	r5, r2
    c14c:	e1a00007 	mov	r0, r7
    c150:	e1a04001 	mov	r4, r1
    c154:	eb00037b 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c158:	e2444001 	sub	r4, r4, #1
    c15c:	e0040490 	mul	r4, r0, r4
    c160:	e1a00007 	mov	r0, r7
    c164:	eb000377 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c168:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    c16c:	e0000095 	mul	r0, r5, r0
    c170:	e3500000 	cmp	r0, #0
    c174:	11540002 	cmpne	r4, r2
    c178:	33a03001 	movcc	r3, #1
    c17c:	23a03000 	movcs	r3, #0
    c180:	e1500002 	cmp	r0, r2
    c184:	83a03000 	movhi	r3, #0
    c188:	92033001 	andls	r3, r3, #1
    c18c:	e1540000 	cmp	r4, r0
    c190:	23a03000 	movcs	r3, #0
    c194:	32033001 	andcc	r3, r3, #1
    c198:	e3530000 	cmp	r3, #0
    c19c:	e3a03000 	mov	r3, #0
    c1a0:	15864034 	strne	r4, [r6, #52]	; 0x34
    c1a4:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    c1a8:	15860038 	strne	r0, [r6, #56]	; 0x38
    c1ac:	e586303c 	str	r3, [r6, #60]	; 0x3c
    c1b0:	e5864040 	str	r4, [r6, #64]	; 0x40
    c1b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c1b8 <CScreenDevice::SetStandoutMode(unsigned int)>:
    c1b8:	e351001b 	cmp	r1, #27
    c1bc:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    c1c0:	ea00001d 	b	c23c <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    c1c4:	0000c24c 	.word	0x0000c24c
    c1c8:	0000c240 	.word	0x0000c240
    c1cc:	0000c234 	.word	0x0000c234
    c1d0:	0000c23c 	.word	0x0000c23c
    c1d4:	0000c23c 	.word	0x0000c23c
    c1d8:	0000c23c 	.word	0x0000c23c
    c1dc:	0000c23c 	.word	0x0000c23c
    c1e0:	0000c23c 	.word	0x0000c23c
    c1e4:	0000c23c 	.word	0x0000c23c
    c1e8:	0000c23c 	.word	0x0000c23c
    c1ec:	0000c23c 	.word	0x0000c23c
    c1f0:	0000c23c 	.word	0x0000c23c
    c1f4:	0000c23c 	.word	0x0000c23c
    c1f8:	0000c23c 	.word	0x0000c23c
    c1fc:	0000c23c 	.word	0x0000c23c
    c200:	0000c23c 	.word	0x0000c23c
    c204:	0000c23c 	.word	0x0000c23c
    c208:	0000c23c 	.word	0x0000c23c
    c20c:	0000c23c 	.word	0x0000c23c
    c210:	0000c23c 	.word	0x0000c23c
    c214:	0000c23c 	.word	0x0000c23c
    c218:	0000c23c 	.word	0x0000c23c
    c21c:	0000c23c 	.word	0x0000c23c
    c220:	0000c23c 	.word	0x0000c23c
    c224:	0000c23c 	.word	0x0000c23c
    c228:	0000c23c 	.word	0x0000c23c
    c22c:	0000c23c 	.word	0x0000c23c
    c230:	0000c24c 	.word	0x0000c24c
    c234:	e3a0301f 	mov	r3, #31
    c238:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c23c:	e12fff1e 	bx	lr
    c240:	e3a03b3e 	mov	r3, #63488	; 0xf800
    c244:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c248:	e12fff1e 	bx	lr
    c24c:	e3e03020 	mvn	r3, #32
    c250:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c254:	e12fff1e 	bx	lr

0000c258 <CScreenDevice::Scroll()>:
    c258:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c25c:	e1a07000 	mov	r7, r0
    c260:	e2800014 	add	r0, r0, #20
    c264:	eb000337 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c268:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    c26c:	e5975020 	ldr	r5, [r7, #32]
    c270:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    c274:	e5978018 	ldr	r8, [r7, #24]
    c278:	e0444003 	sub	r4, r4, r3
    c27c:	e1a02085 	lsl	r2, r5, #1
    c280:	e0050395 	mul	r5, r5, r3
    c284:	e0885085 	add	r5, r8, r5, lsl #1
    c288:	e0444000 	sub	r4, r4, r0
    c28c:	e1a06000 	mov	r6, r0
    c290:	e0040492 	mul	r4, r2, r4
    c294:	e3540000 	cmp	r4, #0
    c298:	1a000007 	bne	c2bc <CScreenDevice::Scroll()+0x64>
    c29c:	e0020692 	mul	r2, r2, r6
    c2a0:	e1b02122 	lsrs	r2, r2, #2
    c2a4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    c2a8:	e1a00005 	mov	r0, r5
    c2ac:	e1a02102 	lsl	r2, r2, #2
    c2b0:	e3a01000 	mov	r1, #0
    c2b4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    c2b8:	eafffb72 	b	b088 <memset>
    c2bc:	e0803003 	add	r3, r0, r3
    c2c0:	e3c4900f 	bic	r9, r4, #15
    c2c4:	e1a00005 	mov	r0, r5
    c2c8:	e0288392 	mla	r8, r2, r3, r8
    c2cc:	e1a02009 	mov	r2, r9
    c2d0:	e1a01008 	mov	r1, r8
    c2d4:	ebfffc83 	bl	b4e8 <memcpy>
    c2d8:	e204200e 	and	r2, r4, #14
    c2dc:	e0850009 	add	r0, r5, r9
    c2e0:	e0881009 	add	r1, r8, r9
    c2e4:	ebfffc7f 	bl	b4e8 <memcpy>
    c2e8:	e5972020 	ldr	r2, [r7, #32]
    c2ec:	e3c44003 	bic	r4, r4, #3
    c2f0:	e0855004 	add	r5, r5, r4
    c2f4:	e1a02082 	lsl	r2, r2, #1
    c2f8:	eaffffe7 	b	c29c <CScreenDevice::Scroll()+0x44>

0000c2fc <CScreenDevice::CursorDown()>:
    c2fc:	e92d4070 	push	{r4, r5, r6, lr}
    c300:	e2805014 	add	r5, r0, #20
    c304:	e1a04000 	mov	r4, r0
    c308:	e1a00005 	mov	r0, r5
    c30c:	eb00030d 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c310:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c314:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    c318:	e0800003 	add	r0, r0, r3
    c31c:	e5840040 	str	r0, [r4, #64]	; 0x40
    c320:	e1500002 	cmp	r0, r2
    c324:	38bd8070 	popcc	{r4, r5, r6, pc}
    c328:	e1a00004 	mov	r0, r4
    c32c:	ebffffc9 	bl	c258 <CScreenDevice::Scroll()>
    c330:	e1a00005 	mov	r0, r5
    c334:	eb000303 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c338:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c33c:	e0430000 	sub	r0, r3, r0
    c340:	e5840040 	str	r0, [r4, #64]	; 0x40
    c344:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c348 <CScreenDevice::NewLine()>:
    c348:	e3a02000 	mov	r2, #0
    c34c:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c350:	eaffffe9 	b	c2fc <CScreenDevice::CursorDown()>

0000c354 <CScreenDevice::CursorRight()>:
    c354:	e92d4010 	push	{r4, lr}
    c358:	e1a04000 	mov	r4, r0
    c35c:	e2800014 	add	r0, r0, #20
    c360:	eb0002f6 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    c364:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    c368:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    c36c:	e0800003 	add	r0, r0, r3
    c370:	e584003c 	str	r0, [r4, #60]	; 0x3c
    c374:	e1500002 	cmp	r0, r2
    c378:	38bd8010 	popcc	{r4, pc}
    c37c:	e3a03000 	mov	r3, #0
    c380:	e1a00004 	mov	r0, r4
    c384:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c388:	e8bd4010 	pop	{r4, lr}
    c38c:	eaffffda 	b	c2fc <CScreenDevice::CursorDown()>

0000c390 <CScreenDevice::Tabulator()>:
    c390:	e92d4070 	push	{r4, r5, r6, lr}
    c394:	e1a05000 	mov	r5, r0
    c398:	e2800014 	add	r0, r0, #20
    c39c:	eb0002e7 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    c3a0:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    c3a4:	e1a04180 	lsl	r4, r0, #3
    c3a8:	e0840003 	add	r0, r4, r3
    c3ac:	e1a01004 	mov	r1, r4
    c3b0:	eb0014bb 	bl	116a4 <__aeabi_uidiv>
    c3b4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c3b8:	e0000094 	mul	r0, r4, r0
    c3bc:	e1500003 	cmp	r0, r3
    c3c0:	e585003c 	str	r0, [r5, #60]	; 0x3c
    c3c4:	38bd8070 	popcc	{r4, r5, r6, pc}
    c3c8:	e3a03000 	mov	r3, #0
    c3cc:	e1a00005 	mov	r0, r5
    c3d0:	e585303c 	str	r3, [r5, #60]	; 0x3c
    c3d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    c3d8:	eaffffc7 	b	c2fc <CScreenDevice::CursorDown()>

0000c3dc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    c3dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3e0:	e2806014 	add	r6, r0, #20
    c3e4:	e24dd00c 	sub	sp, sp, #12
    c3e8:	e1a07000 	mov	r7, r0
    c3ec:	e1a00006 	mov	r0, r6
    c3f0:	e1a0a001 	mov	sl, r1
    c3f4:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    c3f8:	e1a09002 	mov	r9, r2
    c3fc:	e58d3004 	str	r3, [sp, #4]
    c400:	eb0002d0 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c404:	e3a08000 	mov	r8, #0
    c408:	e1580000 	cmp	r8, r0
    c40c:	2a000024 	bcs	c4a4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
    c410:	e59d3004 	ldr	r3, [sp, #4]
    c414:	e3a04000 	mov	r4, #0
    c418:	e0883003 	add	r3, r8, r3
    c41c:	e58d3000 	str	r3, [sp]
    c420:	e1a00006 	mov	r0, r6
    c424:	e0845009 	add	r5, r4, r9
    c428:	eb0002c4 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    c42c:	e1a02004 	mov	r2, r4
    c430:	e1a03008 	mov	r3, r8
    c434:	e1a0100a 	mov	r1, sl
    c438:	e1540000 	cmp	r4, r0
    c43c:	e1a00006 	mov	r0, r6
    c440:	e2844001 	add	r4, r4, #1
    c444:	2a000011 	bcs	c490 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>
    c448:	eb0002c2 	bl	cf58 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    c44c:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    c450:	e3500000 	cmp	r0, #0
    c454:	11a0200b 	movne	r2, fp
    c458:	03a02000 	moveq	r2, #0
    c45c:	e1550003 	cmp	r5, r3
    c460:	2affffee 	bcs	c420 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    c464:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    c468:	e59d1000 	ldr	r1, [sp]
    c46c:	e1510003 	cmp	r1, r3
    c470:	2affffea 	bcs	c420 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    c474:	e5973020 	ldr	r3, [r7, #32]
    c478:	e59d0000 	ldr	r0, [sp]
    c47c:	e5971018 	ldr	r1, [r7, #24]
    c480:	e0255093 	mla	r5, r3, r0, r5
    c484:	e1a05085 	lsl	r5, r5, #1
    c488:	e18120b5 	strh	r2, [r1, r5]
    c48c:	eaffffe3 	b	c420 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    c490:	e1a00006 	mov	r0, r6
    c494:	e2888001 	add	r8, r8, #1
    c498:	eb0002aa 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c49c:	e1580000 	cmp	r8, r0
    c4a0:	3affffda 	bcc	c410 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    c4a4:	e28dd00c 	add	sp, sp, #12
    c4a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c4ac <CScreenDevice::DisplayChar(char)>:
    c4ac:	e6ef3071 	uxtb	r3, r1
    c4b0:	e353001f 	cmp	r3, #31
    c4b4:	912fff1e 	bxls	lr
    c4b8:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    c4bc:	e92d4010 	push	{r4, lr}
    c4c0:	e24dd008 	sub	sp, sp, #8
    c4c4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c4c8:	e1a04000 	mov	r4, r0
    c4cc:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c4d0:	e58dc000 	str	ip, [sp]
    c4d4:	ebffffc0 	bl	c3dc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c4d8:	e1a00004 	mov	r0, r4
    c4dc:	e28dd008 	add	sp, sp, #8
    c4e0:	e8bd4010 	pop	{r4, lr}
    c4e4:	eaffff9a 	b	c354 <CScreenDevice::CursorRight()>

0000c4e8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    c4e8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4ec:	e3a08000 	mov	r8, #0
    c4f0:	e2805014 	add	r5, r0, #20
    c4f4:	e1a0b000 	mov	fp, r0
    c4f8:	e1a06001 	mov	r6, r1
    c4fc:	e1a0a002 	mov	sl, r2
    c500:	e1a09008 	mov	r9, r8
    c504:	e1a00005 	mov	r0, r5
    c508:	eb00028e 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c50c:	e1580000 	cmp	r8, r0
    c510:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c514:	e088700a 	add	r7, r8, sl
    c518:	e3a04000 	mov	r4, #0
    c51c:	e1a00005 	mov	r0, r5
    c520:	eb000286 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    c524:	e0843006 	add	r3, r4, r6
    c528:	e1540000 	cmp	r4, r0
    c52c:	e2844001 	add	r4, r4, #1
    c530:	2a00000b 	bcs	c564 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    c534:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    c538:	e1530002 	cmp	r3, r2
    c53c:	2afffff6 	bcs	c51c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    c540:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    c544:	e1570002 	cmp	r7, r2
    c548:	2afffff3 	bcs	c51c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    c54c:	e59b2020 	ldr	r2, [fp, #32]
    c550:	e59b1018 	ldr	r1, [fp, #24]
    c554:	e0233792 	mla	r3, r2, r7, r3
    c558:	e1a03083 	lsl	r3, r3, #1
    c55c:	e18190b3 	strh	r9, [r1, r3]
    c560:	eaffffed 	b	c51c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    c564:	e2888001 	add	r8, r8, #1
    c568:	eaffffe5 	b	c504 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000c56c <CScreenDevice::ClearLineEnd()>:
    c56c:	e92d4070 	push	{r4, r5, r6, lr}
    c570:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c574:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    c578:	e1540003 	cmp	r4, r3
    c57c:	28bd8070 	popcs	{r4, r5, r6, pc}
    c580:	e2806014 	add	r6, r0, #20
    c584:	e1a05000 	mov	r5, r0
    c588:	e1a01004 	mov	r1, r4
    c58c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c590:	e1a00005 	mov	r0, r5
    c594:	ebffffd3 	bl	c4e8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c598:	e1a00006 	mov	r0, r6
    c59c:	eb000267 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    c5a0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c5a4:	e0844000 	add	r4, r4, r0
    c5a8:	e1530004 	cmp	r3, r4
    c5ac:	8afffff5 	bhi	c588 <CScreenDevice::ClearLineEnd()+0x1c>
    c5b0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c5b4 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    c5b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c5b8:	e2807014 	add	r7, r0, #20
    c5bc:	e1a05000 	mov	r5, r0
    c5c0:	e590803c 	ldr	r8, [r0, #60]	; 0x3c
    c5c4:	e1a00007 	mov	r0, r7
    c5c8:	e1a06001 	mov	r6, r1
    c5cc:	eb00025b 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    c5d0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c5d4:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    c5d8:	e0268096 	mla	r6, r6, r0, r8
    c5dc:	e1560003 	cmp	r6, r3
    c5e0:	21a06003 	movcs	r6, r3
    c5e4:	e1540006 	cmp	r4, r6
    c5e8:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    c5ec:	e1a01004 	mov	r1, r4
    c5f0:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c5f4:	e1a00005 	mov	r0, r5
    c5f8:	ebffffba 	bl	c4e8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c5fc:	e1a00007 	mov	r0, r7
    c600:	eb00024e 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    c604:	e0844000 	add	r4, r4, r0
    c608:	e1540006 	cmp	r4, r6
    c60c:	3afffff6 	bcc	c5ec <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    c610:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c614 <CScreenDevice::EraseChars(unsigned int)>:
    c614:	e3510000 	cmp	r1, #0
    c618:	012fff1e 	bxeq	lr
    c61c:	eaffffe4 	b	c5b4 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000c620 <CScreenDevice::ClearDisplayEnd()>:
    c620:	e92d4070 	push	{r4, r5, r6, lr}
    c624:	e1a05000 	mov	r5, r0
    c628:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    c62c:	e2806014 	add	r6, r0, #20
    c630:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c634:	e1540003 	cmp	r4, r3
    c638:	2a000009 	bcs	c664 <CScreenDevice::ClearDisplayEnd()+0x44>
    c63c:	e1a01004 	mov	r1, r4
    c640:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c644:	e1a00005 	mov	r0, r5
    c648:	ebffffa6 	bl	c4e8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c64c:	e1a00006 	mov	r0, r6
    c650:	eb00023a 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    c654:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c658:	e0844000 	add	r4, r4, r0
    c65c:	e1530004 	cmp	r3, r4
    c660:	8afffff5 	bhi	c63c <CScreenDevice::ClearDisplayEnd()+0x1c>
    c664:	e1a00006 	mov	r0, r6
    c668:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    c66c:	eb000235 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c670:	e2851018 	add	r1, r5, #24
    c674:	e891000e 	ldm	r1, {r1, r2, r3}
    c678:	e0840000 	add	r0, r4, r0
    c67c:	e0000093 	mul	r0, r3, r0
    c680:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    c684:	0a000004 	beq	c69c <CScreenDevice::ClearDisplayEnd()+0x7c>
    c688:	e0810080 	add	r0, r1, r0, lsl #1
    c68c:	e1a02082 	lsl	r2, r2, #1
    c690:	e3a01000 	mov	r1, #0
    c694:	e8bd4070 	pop	{r4, r5, r6, lr}
    c698:	eafffa7a 	b	b088 <memset>
    c69c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c6a0 <CScreenDevice::Write(char)>:
    c6a0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c6a4:	e92d4010 	push	{r4, lr}
    c6a8:	e1a04000 	mov	r4, r0
    c6ac:	e24dd008 	sub	sp, sp, #8
    c6b0:	e3530007 	cmp	r3, #7
    c6b4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c6b8:	ea000010 	b	c700 <CScreenDevice::Write(char)+0x60>
    c6bc:	0000c74c 	.word	0x0000c74c
    c6c0:	0000c7ac 	.word	0x0000c7ac
    c6c4:	0000c7c8 	.word	0x0000c7c8
    c6c8:	0000c820 	.word	0x0000c820
    c6cc:	0000c8fc 	.word	0x0000c8fc
    c6d0:	0000c91c 	.word	0x0000c91c
    c6d4:	0000c93c 	.word	0x0000c93c
    c6d8:	0000c710 	.word	0x0000c710
    c6dc:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c6e0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c6e4:	e1520003 	cmp	r2, r3
    c6e8:	2a000004 	bcs	c700 <CScreenDevice::Write(char)+0x60>
    c6ec:	e2800014 	add	r0, r0, #20
    c6f0:	eb000214 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    c6f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c6f8:	e0433000 	sub	r3, r3, r0
    c6fc:	e5843040 	str	r3, [r4, #64]	; 0x40
    c700:	e3a03000 	mov	r3, #0
    c704:	e5843030 	str	r3, [r4, #48]	; 0x30
    c708:	e28dd008 	add	sp, sp, #8
    c70c:	e8bd8010 	pop	{r4, pc}
    c710:	e3510068 	cmp	r1, #104	; 0x68
    c714:	0a000097 	beq	c978 <CScreenDevice::Write(char)+0x2d8>
    c718:	e351006c 	cmp	r1, #108	; 0x6c
    c71c:	0a000095 	beq	c978 <CScreenDevice::Write(char)+0x2d8>
    c720:	e2411030 	sub	r1, r1, #48	; 0x30
    c724:	e6ef3071 	uxtb	r3, r1
    c728:	e3530009 	cmp	r3, #9
    c72c:	8afffff3 	bhi	c700 <CScreenDevice::Write(char)+0x60>
    c730:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c734:	e3a0200a 	mov	r2, #10
    c738:	e0211392 	mla	r1, r2, r3, r1
    c73c:	e3510063 	cmp	r1, #99	; 0x63
    c740:	e5841050 	str	r1, [r4, #80]	; 0x50
    c744:	8affffed 	bhi	c700 <CScreenDevice::Write(char)+0x60>
    c748:	eaffffee 	b	c708 <CScreenDevice::Write(char)+0x68>
    c74c:	e2413008 	sub	r3, r1, #8
    c750:	e3530013 	cmp	r3, #19
    c754:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c758:	ea0000ec 	b	cb10 <CScreenDevice::Write(char)+0x470>
    c75c:	0000c9e4 	.word	0x0000c9e4
    c760:	0000c9d8 	.word	0x0000c9d8
    c764:	0000c9c4 	.word	0x0000c9c4
    c768:	0000cb10 	.word	0x0000cb10
    c76c:	0000cb10 	.word	0x0000cb10
    c770:	0000c9b8 	.word	0x0000c9b8
    c774:	0000cb10 	.word	0x0000cb10
    c778:	0000cb10 	.word	0x0000cb10
    c77c:	0000cb10 	.word	0x0000cb10
    c780:	0000cb10 	.word	0x0000cb10
    c784:	0000cb10 	.word	0x0000cb10
    c788:	0000cb10 	.word	0x0000cb10
    c78c:	0000cb10 	.word	0x0000cb10
    c790:	0000cb10 	.word	0x0000cb10
    c794:	0000cb10 	.word	0x0000cb10
    c798:	0000cb10 	.word	0x0000cb10
    c79c:	0000cb10 	.word	0x0000cb10
    c7a0:	0000cb10 	.word	0x0000cb10
    c7a4:	0000cb10 	.word	0x0000cb10
    c7a8:	0000c9ac 	.word	0x0000c9ac
    c7ac:	e351004d 	cmp	r1, #77	; 0x4d
    c7b0:	0affffd2 	beq	c700 <CScreenDevice::Write(char)+0x60>
    c7b4:	e351005b 	cmp	r1, #91	; 0x5b
    c7b8:	03a03002 	moveq	r3, #2
    c7bc:	05803030 	streq	r3, [r0, #48]	; 0x30
    c7c0:	0affffd0 	beq	c708 <CScreenDevice::Write(char)+0x68>
    c7c4:	eaffffcd 	b	c700 <CScreenDevice::Write(char)+0x60>
    c7c8:	e241303f 	sub	r3, r1, #63	; 0x3f
    c7cc:	e3530011 	cmp	r3, #17
    c7d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c7d4:	ea0000d9 	b	cb40 <CScreenDevice::Write(char)+0x4a0>
    c7d8:	0000cacc 	.word	0x0000cacc
    c7dc:	0000cb40 	.word	0x0000cb40
    c7e0:	0000c6dc 	.word	0x0000c6dc
    c7e4:	0000cb00 	.word	0x0000cb00
    c7e8:	0000caf0 	.word	0x0000caf0
    c7ec:	0000cb40 	.word	0x0000cb40
    c7f0:	0000cb40 	.word	0x0000cb40
    c7f4:	0000cb40 	.word	0x0000cb40
    c7f8:	0000cb40 	.word	0x0000cb40
    c7fc:	0000cad8 	.word	0x0000cad8
    c800:	0000cb40 	.word	0x0000cb40
    c804:	0000cabc 	.word	0x0000cabc
    c808:	0000caac 	.word	0x0000caac
    c80c:	0000c700 	.word	0x0000c700
    c810:	0000c700 	.word	0x0000c700
    c814:	0000cb40 	.word	0x0000cb40
    c818:	0000cb40 	.word	0x0000cb40
    c81c:	0000c700 	.word	0x0000c700
    c820:	e241303b 	sub	r3, r1, #59	; 0x3b
    c824:	e3530032 	cmp	r3, #50	; 0x32
    c828:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c82c:	eaffffbb 	b	c720 <CScreenDevice::Write(char)+0x80>
    c830:	0000caa0 	.word	0x0000caa0
    c834:	0000c720 	.word	0x0000c720
    c838:	0000c720 	.word	0x0000c720
    c83c:	0000c720 	.word	0x0000c720
    c840:	0000c720 	.word	0x0000c720
    c844:	0000c720 	.word	0x0000c720
    c848:	0000c720 	.word	0x0000c720
    c84c:	0000c720 	.word	0x0000c720
    c850:	0000c720 	.word	0x0000c720
    c854:	0000c720 	.word	0x0000c720
    c858:	0000c720 	.word	0x0000c720
    c85c:	0000c720 	.word	0x0000c720
    c860:	0000c720 	.word	0x0000c720
    c864:	0000c720 	.word	0x0000c720
    c868:	0000c720 	.word	0x0000c720
    c86c:	0000c720 	.word	0x0000c720
    c870:	0000c720 	.word	0x0000c720
    c874:	0000c700 	.word	0x0000c700
    c878:	0000c700 	.word	0x0000c700
    c87c:	0000c720 	.word	0x0000c720
    c880:	0000c720 	.word	0x0000c720
    c884:	0000c700 	.word	0x0000c700
    c888:	0000c720 	.word	0x0000c720
    c88c:	0000c720 	.word	0x0000c720
    c890:	0000c720 	.word	0x0000c720
    c894:	0000c720 	.word	0x0000c720
    c898:	0000c720 	.word	0x0000c720
    c89c:	0000c720 	.word	0x0000c720
    c8a0:	0000c720 	.word	0x0000c720
    c8a4:	0000c9f0 	.word	0x0000c9f0
    c8a8:	0000c720 	.word	0x0000c720
    c8ac:	0000c720 	.word	0x0000c720
    c8b0:	0000c720 	.word	0x0000c720
    c8b4:	0000c720 	.word	0x0000c720
    c8b8:	0000c720 	.word	0x0000c720
    c8bc:	0000c720 	.word	0x0000c720
    c8c0:	0000c720 	.word	0x0000c720
    c8c4:	0000c720 	.word	0x0000c720
    c8c8:	0000c720 	.word	0x0000c720
    c8cc:	0000c720 	.word	0x0000c720
    c8d0:	0000c720 	.word	0x0000c720
    c8d4:	0000c720 	.word	0x0000c720
    c8d8:	0000c720 	.word	0x0000c720
    c8dc:	0000c720 	.word	0x0000c720
    c8e0:	0000c720 	.word	0x0000c720
    c8e4:	0000ca04 	.word	0x0000ca04
    c8e8:	0000c720 	.word	0x0000c720
    c8ec:	0000c720 	.word	0x0000c720
    c8f0:	0000c720 	.word	0x0000c720
    c8f4:	0000ca04 	.word	0x0000ca04
    c8f8:	0000ca20 	.word	0x0000ca20
    c8fc:	e2411030 	sub	r1, r1, #48	; 0x30
    c900:	e6ef3071 	uxtb	r3, r1
    c904:	e3530009 	cmp	r3, #9
    c908:	8affff7c 	bhi	c700 <CScreenDevice::Write(char)+0x60>
    c90c:	e3a03007 	mov	r3, #7
    c910:	e5801050 	str	r1, [r0, #80]	; 0x50
    c914:	e5803030 	str	r3, [r0, #48]	; 0x30
    c918:	eaffff7a 	b	c708 <CScreenDevice::Write(char)+0x68>
    c91c:	e2411030 	sub	r1, r1, #48	; 0x30
    c920:	e6ef3071 	uxtb	r3, r1
    c924:	e3530009 	cmp	r3, #9
    c928:	8affff74 	bhi	c700 <CScreenDevice::Write(char)+0x60>
    c92c:	e3a03006 	mov	r3, #6
    c930:	e5801054 	str	r1, [r0, #84]	; 0x54
    c934:	e5803030 	str	r3, [r0, #48]	; 0x30
    c938:	eaffff72 	b	c708 <CScreenDevice::Write(char)+0x68>
    c93c:	e3510048 	cmp	r1, #72	; 0x48
    c940:	0a00008f 	beq	cb84 <CScreenDevice::Write(char)+0x4e4>
    c944:	e3510072 	cmp	r1, #114	; 0x72
    c948:	0a000011 	beq	c994 <CScreenDevice::Write(char)+0x2f4>
    c94c:	e2411030 	sub	r1, r1, #48	; 0x30
    c950:	e6ef3071 	uxtb	r3, r1
    c954:	e3530009 	cmp	r3, #9
    c958:	8affff68 	bhi	c700 <CScreenDevice::Write(char)+0x60>
    c95c:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    c960:	e3a0200a 	mov	r2, #10
    c964:	e0211392 	mla	r1, r2, r3, r1
    c968:	e35100c7 	cmp	r1, #199	; 0xc7
    c96c:	e5801054 	str	r1, [r0, #84]	; 0x54
    c970:	8affff62 	bhi	c700 <CScreenDevice::Write(char)+0x60>
    c974:	eaffff63 	b	c708 <CScreenDevice::Write(char)+0x68>
    c978:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c97c:	e3530019 	cmp	r3, #25
    c980:	02411068 	subeq	r1, r1, #104	; 0x68
    c984:	016f1f11 	clzeq	r1, r1
    c988:	01a012a1 	lsreq	r1, r1, #5
    c98c:	05841044 	streq	r1, [r4, #68]	; 0x44
    c990:	eaffff5a 	b	c700 <CScreenDevice::Write(char)+0x60>
    c994:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c998:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c99c:	ebfffde6 	bl	c13c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    c9a0:	e3a03000 	mov	r3, #0
    c9a4:	e5843030 	str	r3, [r4, #48]	; 0x30
    c9a8:	eaffff56 	b	c708 <CScreenDevice::Write(char)+0x68>
    c9ac:	e3a03001 	mov	r3, #1
    c9b0:	e5803030 	str	r3, [r0, #48]	; 0x30
    c9b4:	eaffff53 	b	c708 <CScreenDevice::Write(char)+0x68>
    c9b8:	e3a03000 	mov	r3, #0
    c9bc:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c9c0:	eaffff50 	b	c708 <CScreenDevice::Write(char)+0x68>
    c9c4:	e3a03000 	mov	r3, #0
    c9c8:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c9cc:	e28dd008 	add	sp, sp, #8
    c9d0:	e8bd4010 	pop	{r4, lr}
    c9d4:	eafffe48 	b	c2fc <CScreenDevice::CursorDown()>
    c9d8:	e28dd008 	add	sp, sp, #8
    c9dc:	e8bd4010 	pop	{r4, lr}
    c9e0:	eafffe6a 	b	c390 <CScreenDevice::Tabulator()>
    c9e4:	e28dd008 	add	sp, sp, #8
    c9e8:	e8bd4010 	pop	{r4, lr}
    c9ec:	eafffd8b 	b	c020 <CScreenDevice::CursorLeft()>
    c9f0:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c9f4:	e3510000 	cmp	r1, #0
    c9f8:	0affff40 	beq	c700 <CScreenDevice::Write(char)+0x60>
    c9fc:	ebfffeec 	bl	c5b4 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    ca00:	eaffff3e 	b	c700 <CScreenDevice::Write(char)+0x60>
    ca04:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    ca08:	e3530004 	cmp	r3, #4
    ca0c:	02411068 	subeq	r1, r1, #104	; 0x68
    ca10:	016f1f11 	clzeq	r1, r1
    ca14:	01a012a1 	lsreq	r1, r1, #5
    ca18:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    ca1c:	eaffff37 	b	c700 <CScreenDevice::Write(char)+0x60>
    ca20:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    ca24:	e353001b 	cmp	r3, #27
    ca28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ca2c:	eaffff33 	b	c700 <CScreenDevice::Write(char)+0x60>
    ca30:	0000cb78 	.word	0x0000cb78
    ca34:	0000cb6c 	.word	0x0000cb6c
    ca38:	0000cb60 	.word	0x0000cb60
    ca3c:	0000c700 	.word	0x0000c700
    ca40:	0000c700 	.word	0x0000c700
    ca44:	0000c700 	.word	0x0000c700
    ca48:	0000c700 	.word	0x0000c700
    ca4c:	0000c700 	.word	0x0000c700
    ca50:	0000c700 	.word	0x0000c700
    ca54:	0000c700 	.word	0x0000c700
    ca58:	0000c700 	.word	0x0000c700
    ca5c:	0000c700 	.word	0x0000c700
    ca60:	0000c700 	.word	0x0000c700
    ca64:	0000c700 	.word	0x0000c700
    ca68:	0000c700 	.word	0x0000c700
    ca6c:	0000c700 	.word	0x0000c700
    ca70:	0000c700 	.word	0x0000c700
    ca74:	0000c700 	.word	0x0000c700
    ca78:	0000c700 	.word	0x0000c700
    ca7c:	0000c700 	.word	0x0000c700
    ca80:	0000c700 	.word	0x0000c700
    ca84:	0000c700 	.word	0x0000c700
    ca88:	0000c700 	.word	0x0000c700
    ca8c:	0000c700 	.word	0x0000c700
    ca90:	0000c700 	.word	0x0000c700
    ca94:	0000c700 	.word	0x0000c700
    ca98:	0000c700 	.word	0x0000c700
    ca9c:	0000cb78 	.word	0x0000cb78
    caa0:	e3a03005 	mov	r3, #5
    caa4:	e5803030 	str	r3, [r0, #48]	; 0x30
    caa8:	eaffff16 	b	c708 <CScreenDevice::Write(char)+0x68>
    caac:	ebfffeae 	bl	c56c <CScreenDevice::ClearLineEnd()>
    cab0:	e3a03000 	mov	r3, #0
    cab4:	e5843030 	str	r3, [r4, #48]	; 0x30
    cab8:	eaffff12 	b	c708 <CScreenDevice::Write(char)+0x68>
    cabc:	ebfffed7 	bl	c620 <CScreenDevice::ClearDisplayEnd()>
    cac0:	e3a03000 	mov	r3, #0
    cac4:	e5843030 	str	r3, [r4, #48]	; 0x30
    cac8:	eaffff0e 	b	c708 <CScreenDevice::Write(char)+0x68>
    cacc:	e3a03004 	mov	r3, #4
    cad0:	e5803030 	str	r3, [r0, #48]	; 0x30
    cad4:	eaffff0b 	b	c708 <CScreenDevice::Write(char)+0x68>
    cad8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    cadc:	e3a03000 	mov	r3, #0
    cae0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    cae4:	e5803030 	str	r3, [r0, #48]	; 0x30
    cae8:	e5802040 	str	r2, [r0, #64]	; 0x40
    caec:	eaffff05 	b	c708 <CScreenDevice::Write(char)+0x68>
    caf0:	ebfffe17 	bl	c354 <CScreenDevice::CursorRight()>
    caf4:	e3a03000 	mov	r3, #0
    caf8:	e5843030 	str	r3, [r4, #48]	; 0x30
    cafc:	eaffff01 	b	c708 <CScreenDevice::Write(char)+0x68>
    cb00:	ebfffdfd 	bl	c2fc <CScreenDevice::CursorDown()>
    cb04:	e3a03000 	mov	r3, #0
    cb08:	e5843030 	str	r3, [r4, #48]	; 0x30
    cb0c:	eafffefd 	b	c708 <CScreenDevice::Write(char)+0x68>
    cb10:	e6ef3071 	uxtb	r3, r1
    cb14:	e353001f 	cmp	r3, #31
    cb18:	9afffefa 	bls	c708 <CScreenDevice::Write(char)+0x68>
    cb1c:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    cb20:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    cb24:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    cb28:	e58dc000 	str	ip, [sp]
    cb2c:	ebfffe2a 	bl	c3dc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    cb30:	e1a00004 	mov	r0, r4
    cb34:	e28dd008 	add	sp, sp, #8
    cb38:	e8bd4010 	pop	{r4, lr}
    cb3c:	eafffe04 	b	c354 <CScreenDevice::CursorRight()>
    cb40:	e2411030 	sub	r1, r1, #48	; 0x30
    cb44:	e6ef3071 	uxtb	r3, r1
    cb48:	e3530009 	cmp	r3, #9
    cb4c:	8afffeeb 	bhi	c700 <CScreenDevice::Write(char)+0x60>
    cb50:	e3a03003 	mov	r3, #3
    cb54:	e5801050 	str	r1, [r0, #80]	; 0x50
    cb58:	e5803030 	str	r3, [r0, #48]	; 0x30
    cb5c:	eafffee9 	b	c708 <CScreenDevice::Write(char)+0x68>
    cb60:	e3a0301f 	mov	r3, #31
    cb64:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    cb68:	eafffee4 	b	c700 <CScreenDevice::Write(char)+0x60>
    cb6c:	e3a03b3e 	mov	r3, #63488	; 0xf800
    cb70:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    cb74:	eafffee1 	b	c700 <CScreenDevice::Write(char)+0x60>
    cb78:	e3e03020 	mvn	r3, #32
    cb7c:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    cb80:	eafffede 	b	c700 <CScreenDevice::Write(char)+0x60>
    cb84:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    cb88:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    cb8c:	ebfffd3e 	bl	c08c <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    cb90:	e3a03000 	mov	r3, #0
    cb94:	e5843030 	str	r3, [r4, #48]	; 0x30
    cb98:	eafffeda 	b	c708 <CScreenDevice::Write(char)+0x68>

0000cb9c <CScreenDevice::Write(void const*, unsigned int)>:
    cb9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cba0:	e1a05000 	mov	r5, r0
    cba4:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    cba8:	e1a06001 	mov	r6, r1
    cbac:	e1a08002 	mov	r8, r2
    cbb0:	e3500000 	cmp	r0, #0
    cbb4:	1a000026 	bne	cc54 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    cbb8:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    cbbc:	e3a03001 	mov	r3, #1
    cbc0:	e5853058 	str	r3, [r5, #88]	; 0x58
    cbc4:	e3540000 	cmp	r4, #0
    cbc8:	1a00001a 	bne	cc38 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    cbcc:	e3580000 	cmp	r8, #0
    cbd0:	e2487001 	sub	r7, r8, #1
    cbd4:	0a00000b 	beq	cc08 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    cbd8:	e1a04006 	mov	r4, r6
    cbdc:	e0d410d1 	ldrsb	r1, [r4], #1
    cbe0:	e1a00005 	mov	r0, r5
    cbe4:	ebfffead 	bl	c6a0 <CScreenDevice::Write(char)>
    cbe8:	e2643001 	rsb	r3, r4, #1
    cbec:	e0833007 	add	r3, r3, r7
    cbf0:	e1760003 	cmn	r6, r3
    cbf4:	1afffff8 	bne	cbdc <CScreenDevice::Write(void const*, unsigned int)+0x40>
    cbf8:	e2874001 	add	r4, r7, #1
    cbfc:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    cc00:	e3530000 	cmp	r3, #0
    cc04:	1a000008 	bne	cc2c <CScreenDevice::Write(void const*, unsigned int)+0x90>
    cc08:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    cc0c:	e3a02000 	mov	r2, #0
    cc10:	e5852058 	str	r2, [r5, #88]	; 0x58
    cc14:	e1530002 	cmp	r3, r2
    cc18:	0a000000 	beq	cc20 <CScreenDevice::Write(void const*, unsigned int)+0x84>
    cc1c:	ebfff5df 	bl	a3a0 <LeaveCritical>
    cc20:	f57ff05f 	dmb	sy
    cc24:	e1a00004 	mov	r0, r4
    cc28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cc2c:	e1a00005 	mov	r0, r5
    cc30:	ebfffc34 	bl	bd08 <CScreenDevice::InvertCursor() [clone .part.6]>
    cc34:	eafffff3 	b	cc08 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    cc38:	e1a00005 	mov	r0, r5
    cc3c:	e2487001 	sub	r7, r8, #1
    cc40:	ebfffc30 	bl	bd08 <CScreenDevice::InvertCursor() [clone .part.6]>
    cc44:	e3580000 	cmp	r8, #0
    cc48:	1affffe2 	bne	cbd8 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    cc4c:	e1a04008 	mov	r4, r8
    cc50:	eaffffe9 	b	cbfc <CScreenDevice::Write(void const*, unsigned int)+0x60>
    cc54:	ebfff5a3 	bl	a2e8 <EnterCritical>
    cc58:	eaffffd6 	b	cbb8 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000cc5c <CScreenDevice::Initialize()>:
    cc5c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    cc60:	e1a04000 	mov	r4, r0
    cc64:	e590500c 	ldr	r5, [r0, #12]
    cc68:	e24dd00c 	sub	sp, sp, #12
    cc6c:	e3550000 	cmp	r5, #0
    cc70:	0a00002b 	beq	cd24 <CScreenDevice::Initialize()+0xc8>
    cc74:	e5903004 	ldr	r3, [r0, #4]
    cc78:	e5902008 	ldr	r2, [r0, #8]
    cc7c:	e5803024 	str	r3, [r0, #36]	; 0x24
    cc80:	e0000392 	mul	r0, r2, r3
    cc84:	e5843020 	str	r3, [r4, #32]
    cc88:	e5842028 	str	r2, [r4, #40]	; 0x28
    cc8c:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    cc90:	e1a00080 	lsl	r0, r0, #1
    cc94:	e584001c 	str	r0, [r4, #28]
    cc98:	23e00000 	mvncs	r0, #0
    cc9c:	ebfff58c 	bl	a2d4 <operator new[](unsigned int)>
    cca0:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    cca4:	e5840018 	str	r0, [r4, #24]
    cca8:	e2846014 	add	r6, r4, #20
    ccac:	e1a00006 	mov	r0, r6
    ccb0:	eb0000a4 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    ccb4:	e1a01000 	mov	r1, r0
    ccb8:	e1a00007 	mov	r0, r7
    ccbc:	eb001278 	bl	116a4 <__aeabi_uidiv>
    ccc0:	e1a05000 	mov	r5, r0
    ccc4:	e1a00006 	mov	r0, r6
    ccc8:	eb00009e 	bl	cf48 <CCharGenerator::GetCharHeight() const>
    cccc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    ccd0:	e3a02000 	mov	r2, #0
    ccd4:	e584203c 	str	r2, [r4, #60]	; 0x3c
    ccd8:	e5843040 	str	r3, [r4, #64]	; 0x40
    ccdc:	e0050590 	mul	r5, r0, r5
    cce0:	e1a00004 	mov	r0, r4
    cce4:	e584502c 	str	r5, [r4, #44]	; 0x2c
    cce8:	e5845038 	str	r5, [r4, #56]	; 0x38
    ccec:	ebfffe4b 	bl	c620 <CScreenDevice::ClearDisplayEnd()>
    ccf0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    ccf4:	e3530000 	cmp	r3, #0
    ccf8:	1a000031 	bne	cdc4 <CScreenDevice::Initialize()+0x168>
    ccfc:	eb0001bf 	bl	d400 <CDeviceNameService::Get()>
    cd00:	e3021484 	movw	r1, #9348	; 0x2484
    cd04:	e1a02004 	mov	r2, r4
    cd08:	e3a03000 	mov	r3, #0
    cd0c:	e3401001 	movt	r1, #1
    cd10:	e3a05001 	mov	r5, #1
    cd14:	eb000145 	bl	d230 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    cd18:	e1a00005 	mov	r0, r5
    cd1c:	e28dd00c 	add	sp, sp, #12
    cd20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cd24:	e3a00024 	mov	r0, #36	; 0x24
    cd28:	ebfff568 	bl	a2d0 <operator new(unsigned int)>
    cd2c:	e5942008 	ldr	r2, [r4, #8]
    cd30:	e5941004 	ldr	r1, [r4, #4]
    cd34:	e3a03010 	mov	r3, #16
    cd38:	e58d5004 	str	r5, [sp, #4]
    cd3c:	e58d5000 	str	r5, [sp]
    cd40:	e1a06000 	mov	r6, r0
    cd44:	eb001283 	bl	11758 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    cd48:	e5846010 	str	r6, [r4, #16]
    cd4c:	e1a00006 	mov	r0, r6
    cd50:	eb0012ea 	bl	11900 <CBcmFrameBuffer::Initialize()>
    cd54:	e3500000 	cmp	r0, #0
    cd58:	0affffee 	beq	cd18 <CScreenDevice::Initialize()+0xbc>
    cd5c:	e5940010 	ldr	r0, [r4, #16]
    cd60:	eb001321 	bl	119ec <CBcmFrameBuffer::GetDepth() const>
    cd64:	e3500010 	cmp	r0, #16
    cd68:	1affffea 	bne	cd18 <CScreenDevice::Initialize()+0xbc>
    cd6c:	e5940010 	ldr	r0, [r4, #16]
    cd70:	eb00131f 	bl	119f4 <CBcmFrameBuffer::GetBuffer() const>
    cd74:	e5840018 	str	r0, [r4, #24]
    cd78:	e5940010 	ldr	r0, [r4, #16]
    cd7c:	eb00131e 	bl	119fc <CBcmFrameBuffer::GetSize() const>
    cd80:	e584001c 	str	r0, [r4, #28]
    cd84:	e5940010 	ldr	r0, [r4, #16]
    cd88:	eb001315 	bl	119e4 <CBcmFrameBuffer::GetPitch() const>
    cd8c:	e5840020 	str	r0, [r4, #32]
    cd90:	e5940010 	ldr	r0, [r4, #16]
    cd94:	eb00130a 	bl	119c4 <CBcmFrameBuffer::GetWidth() const>
    cd98:	e5840024 	str	r0, [r4, #36]	; 0x24
    cd9c:	e5940010 	ldr	r0, [r4, #16]
    cda0:	eb001309 	bl	119cc <CBcmFrameBuffer::GetHeight() const>
    cda4:	e5943020 	ldr	r3, [r4, #32]
    cda8:	e3130003 	tst	r3, #3
    cdac:	01a030a3 	lsreq	r3, r3, #1
    cdb0:	05843020 	streq	r3, [r4, #32]
    cdb4:	e1a07000 	mov	r7, r0
    cdb8:	e5840028 	str	r0, [r4, #40]	; 0x28
    cdbc:	0affffb9 	beq	cca8 <CScreenDevice::Initialize()+0x4c>
    cdc0:	eaffffd4 	b	cd18 <CScreenDevice::Initialize()+0xbc>
    cdc4:	e1a00004 	mov	r0, r4
    cdc8:	ebfffbce 	bl	bd08 <CScreenDevice::InvertCursor() [clone .part.6]>
    cdcc:	eaffffca 	b	ccfc <CScreenDevice::Initialize()+0xa0>

0000cdd0 <CScreenDevice::InvertCursor()>:
    cdd0:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    cdd4:	e3530000 	cmp	r3, #0
    cdd8:	012fff1e 	bxeq	lr
    cddc:	eafffbc9 	b	bd08 <CScreenDevice::InvertCursor() [clone .part.6]>

0000cde0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    cde0:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    cde4:	e15c0001 	cmp	ip, r1
    cde8:	912fff1e 	bxls	lr
    cdec:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    cdf0:	e15c0002 	cmp	ip, r2
    cdf4:	8590c020 	ldrhi	ip, [r0, #32]
    cdf8:	85900018 	ldrhi	r0, [r0, #24]
    cdfc:	8022129c 	mlahi	r2, ip, r2, r1
    ce00:	81a02082 	lslhi	r2, r2, #1
    ce04:	818030b2 	strhhi	r3, [r0, r2]
    ce08:	e12fff1e 	bx	lr

0000ce0c <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    ce0c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ce10:	e1530001 	cmp	r3, r1
    ce14:	9a000008 	bls	ce3c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    ce18:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    ce1c:	e1530002 	cmp	r3, r2
    ce20:	9a000005 	bls	ce3c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    ce24:	e590c020 	ldr	ip, [r0, #32]
    ce28:	e5903018 	ldr	r3, [r0, #24]
    ce2c:	e022129c 	mla	r2, ip, r2, r1
    ce30:	e1a02082 	lsl	r2, r2, #1
    ce34:	e19300b2 	ldrh	r0, [r3, r2]
    ce38:	e12fff1e 	bx	lr
    ce3c:	e3a00000 	mov	r0, #0
    ce40:	e12fff1e 	bx	lr

0000ce44 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    ce44:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ce48:	e1a05000 	mov	r5, r0
    ce4c:	e24dd00c 	sub	sp, sp, #12
    ce50:	e2800014 	add	r0, r0, #20
    ce54:	e1a06002 	mov	r6, r2
    ce58:	e1a04001 	mov	r4, r1
    ce5c:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    ce60:	eb000036 	bl	cf40 <CCharGenerator::GetCharWidth() const>
    ce64:	e2044003 	and	r4, r4, #3
    ce68:	e2061003 	and	r1, r6, #3
    ce6c:	e3023528 	movw	r3, #9512	; 0x2528
    ce70:	e3403001 	movt	r3, #1
    ce74:	e0831001 	add	r1, r3, r1
    ce78:	e3a02b3e 	mov	r2, #63488	; 0xf800
    ce7c:	e3a03000 	mov	r3, #0
    ce80:	e58d2000 	str	r2, [sp]
    ce84:	e1d111dc 	ldrsb	r1, [r1, #28]
    ce88:	e0240094 	mla	r4, r4, r0, r0
    ce8c:	e1a00005 	mov	r0, r5
    ce90:	e0472004 	sub	r2, r7, r4
    ce94:	ebfffd50 	bl	c3dc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    ce98:	e28dd00c 	add	sp, sp, #12
    ce9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000cea0 <assertion_failed>:
    cea0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    cea4:	e1a05000 	mov	r5, r0
    cea8:	e24dd01c 	sub	sp, sp, #28
    ceac:	e1a06001 	mov	r6, r1
    ceb0:	e1a07002 	mov	r7, r2
    ceb4:	e1a0400d 	mov	r4, sp
    ceb8:	eb000a3f 	bl	f7bc <CInterruptSystem::DisableFIQ()>
    cebc:	f1080040 	cpsie	f
    cec0:	e28d0008 	add	r0, sp, #8
    cec4:	eb000502 	bl	e2d4 <CString::CString()>
    cec8:	e1a03007 	mov	r3, r7
    cecc:	e1a02006 	mov	r2, r6
    ced0:	e28d0008 	add	r0, sp, #8
    ced4:	e302154c 	movw	r1, #9548	; 0x254c
    ced8:	e3401001 	movt	r1, #1
    cedc:	eb00085b 	bl	f050 <CString::Format(char const*, ...)>
    cee0:	e28d0008 	add	r0, sp, #8
    cee4:	eb000511 	bl	e330 <CString::operator char const*() const>
    cee8:	e1a01000 	mov	r1, r0
    ceec:	e1a00004 	mov	r0, r4
    cef0:	eb00007d 	bl	d0ec <debug_stacktrace(unsigned int const*, char const*)>
    cef4:	eb00016e 	bl	d4b4 <CLogger::Get()>
    cef8:	e1a04000 	mov	r4, r0
    cefc:	e28d0008 	add	r0, sp, #8
    cf00:	eb00050a 	bl	e330 <CString::operator char const*() const>
    cf04:	e3a02000 	mov	r2, #0
    cf08:	e58d5000 	str	r5, [sp]
    cf0c:	e3023554 	movw	r3, #9556	; 0x2554
    cf10:	e3403001 	movt	r3, #1
    cf14:	e1a01000 	mov	r1, r0
    cf18:	e1a00004 	mov	r0, r4
    cf1c:	eb000240 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cf20:	e28d0008 	add	r0, sp, #8
    cf24:	eb0004b7 	bl	e208 <CString::~CString()>
    cf28:	e28dd01c 	add	sp, sp, #28
    cf2c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000cf30 <CCharGenerator::CCharGenerator()>:
    cf30:	e3a03008 	mov	r3, #8
    cf34:	e5803000 	str	r3, [r0]
    cf38:	e12fff1e 	bx	lr

0000cf3c <CCharGenerator::~CCharGenerator()>:
    cf3c:	e12fff1e 	bx	lr

0000cf40 <CCharGenerator::GetCharWidth() const>:
    cf40:	e5900000 	ldr	r0, [r0]
    cf44:	e12fff1e 	bx	lr

0000cf48 <CCharGenerator::GetCharHeight() const>:
    cf48:	e3a00013 	mov	r0, #19
    cf4c:	e12fff1e 	bx	lr

0000cf50 <CCharGenerator::GetUnderline() const>:
    cf50:	e3a00010 	mov	r0, #16
    cf54:	e12fff1e 	bx	lr

0000cf58 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    cf58:	e6ef1071 	uxtb	r1, r1
    cf5c:	e92d4070 	push	{r4, r5, r6, lr}
    cf60:	e2414021 	sub	r4, r1, #33	; 0x21
    cf64:	e35400de 	cmp	r4, #222	; 0xde
    cf68:	8a00000f 	bhi	cfac <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    cf6c:	e1a06003 	mov	r6, r3
    cf70:	e5903000 	ldr	r3, [r0]
    cf74:	e1a05002 	mov	r5, r2
    cf78:	e1530002 	cmp	r3, r2
    cf7c:	9a00000c 	bls	cfb4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    cf80:	e356000f 	cmp	r6, #15
    cf84:	8a000008 	bhi	cfac <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    cf88:	e302156c 	movw	r1, #9580	; 0x256c
    cf8c:	e3401001 	movt	r1, #1
    cf90:	e0811204 	add	r1, r1, r4, lsl #4
    cf94:	e3a02080 	mov	r2, #128	; 0x80
    cf98:	e7d13006 	ldrb	r3, [r1, r6]
    cf9c:	e0133552 	ands	r3, r3, r2, asr r5
    cfa0:	13a00001 	movne	r0, #1
    cfa4:	03a00000 	moveq	r0, #0
    cfa8:	e8bd8070 	pop	{r4, r5, r6, pc}
    cfac:	e3a00000 	mov	r0, #0
    cfb0:	e8bd8070 	pop	{r4, r5, r6, pc}
    cfb4:	e303135c 	movw	r1, #13148	; 0x335c
    cfb8:	e3030370 	movw	r0, #13168	; 0x3370
    cfbc:	e3401001 	movt	r1, #1
    cfc0:	e3400001 	movt	r0, #1
    cfc4:	e3a0204e 	mov	r2, #78	; 0x4e
    cfc8:	ebffffb4 	bl	cea0 <assertion_failed>
    cfcc:	e356000f 	cmp	r6, #15
    cfd0:	9affffec 	bls	cf88 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    cfd4:	eafffff4 	b	cfac <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000cfd8 <debug_hexdump(void const*, unsigned int, char const*)>:
    cfd8:	e3520000 	cmp	r2, #0
    cfdc:	e3033388 	movw	r3, #13192	; 0x3388
    cfe0:	e3403001 	movt	r3, #1
    cfe4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfe8:	11a03002 	movne	r3, r2
    cfec:	e24dd054 	sub	sp, sp, #84	; 0x54
    cff0:	e1a06003 	mov	r6, r3
    cff4:	e1a05001 	mov	r5, r1
    cff8:	e1a04000 	mov	r4, r0
    cffc:	e58d304c 	str	r3, [sp, #76]	; 0x4c
    d000:	eb00012b 	bl	d4b4 <CLogger::Get()>
    d004:	e58d4004 	str	r4, [sp, #4]
    d008:	e1a01006 	mov	r1, r6
    d00c:	e58d5000 	str	r5, [sp]
    d010:	e3033390 	movw	r3, #13200	; 0x3390
    d014:	e3a02004 	mov	r2, #4
    d018:	e3403001 	movt	r3, #1
    d01c:	eb000200 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d020:	e3550000 	cmp	r5, #0
    d024:	0a00002a 	beq	d0d4 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    d028:	e30393b4 	movw	r9, #13236	; 0x33b4
    d02c:	e3409001 	movt	r9, #1
    d030:	eb00011f 	bl	d4b4 <CLogger::Get()>
    d034:	e5d4800f 	ldrb	r8, [r4, #15]
    d038:	e5d4700e 	ldrb	r7, [r4, #14]
    d03c:	e6ffc074 	uxth	ip, r4
    d040:	e5d4600d 	ldrb	r6, [r4, #13]
    d044:	e1a03009 	mov	r3, r9
    d048:	e5d4e00c 	ldrb	lr, [r4, #12]
    d04c:	e3a02004 	mov	r2, #4
    d050:	e5d4b00b 	ldrb	fp, [r4, #11]
    d054:	e2844010 	add	r4, r4, #16
    d058:	e554a006 	ldrb	sl, [r4, #-6]
    d05c:	e58d8040 	str	r8, [sp, #64]	; 0x40
    d060:	e5548007 	ldrb	r8, [r4, #-7]
    d064:	e58d703c 	str	r7, [sp, #60]	; 0x3c
    d068:	e5547008 	ldrb	r7, [r4, #-8]
    d06c:	e58d6038 	str	r6, [sp, #56]	; 0x38
    d070:	e5546009 	ldrb	r6, [r4, #-9]
    d074:	e58de034 	str	lr, [sp, #52]	; 0x34
    d078:	e554e00a 	ldrb	lr, [r4, #-10]
    d07c:	e58db030 	str	fp, [sp, #48]	; 0x30
    d080:	e554b00b 	ldrb	fp, [r4, #-11]
    d084:	e58da02c 	str	sl, [sp, #44]	; 0x2c
    d088:	e554a00c 	ldrb	sl, [r4, #-12]
    d08c:	e58d8028 	str	r8, [sp, #40]	; 0x28
    d090:	e554800d 	ldrb	r8, [r4, #-13]
    d094:	e58d7024 	str	r7, [sp, #36]	; 0x24
    d098:	e554700e 	ldrb	r7, [r4, #-14]
    d09c:	e58d6020 	str	r6, [sp, #32]
    d0a0:	e554600f 	ldrb	r6, [r4, #-15]
    d0a4:	e58de01c 	str	lr, [sp, #28]
    d0a8:	e554e010 	ldrb	lr, [r4, #-16]
    d0ac:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
    d0b0:	e58db018 	str	fp, [sp, #24]
    d0b4:	e58da014 	str	sl, [sp, #20]
    d0b8:	e58d8010 	str	r8, [sp, #16]
    d0bc:	e58d700c 	str	r7, [sp, #12]
    d0c0:	e58d6008 	str	r6, [sp, #8]
    d0c4:	e88d5000 	stm	sp, {ip, lr}
    d0c8:	eb0001d5 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d0cc:	e355000f 	cmp	r5, #15
    d0d0:	8a000001 	bhi	d0dc <debug_hexdump(void const*, unsigned int, char const*)+0x104>
    d0d4:	e28dd054 	add	sp, sp, #84	; 0x54
    d0d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0dc:	e2555010 	subs	r5, r5, #16
    d0e0:	1affffd2 	bne	d030 <debug_hexdump(void const*, unsigned int, char const*)+0x58>
    d0e4:	e28dd054 	add	sp, sp, #84	; 0x54
    d0e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d0ec <debug_stacktrace(unsigned int const*, char const*)>:
    d0ec:	e3510000 	cmp	r1, #0
    d0f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d0f4:	e3037388 	movw	r7, #13192	; 0x3388
    d0f8:	e3016c04 	movw	r6, #7172	; 0x1c04
    d0fc:	e3407001 	movt	r7, #1
    d100:	e303840c 	movw	r8, #13324	; 0x340c
    d104:	e24dd008 	sub	sp, sp, #8
    d108:	11a07001 	movne	r7, r1
    d10c:	e3406001 	movt	r6, #1
    d110:	e3408001 	movt	r8, #1
    d114:	e1a05000 	mov	r5, r0
    d118:	e3a04000 	mov	r4, #0
    d11c:	ea000003 	b	d130 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    d120:	e2844001 	add	r4, r4, #1
    d124:	e2855004 	add	r5, r5, #4
    d128:	e3540040 	cmp	r4, #64	; 0x40
    d12c:	0a000010 	beq	d174 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    d130:	e5953000 	ldr	r3, [r5]
    d134:	e3530902 	cmp	r3, #32768	; 0x8000
    d138:	3afffff8 	bcc	d120 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    d13c:	e1530006 	cmp	r3, r6
    d140:	2afffff6 	bcs	d120 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    d144:	eb0000da 	bl	d4b4 <CLogger::Get()>
    d148:	e595c000 	ldr	ip, [r5]
    d14c:	e1a03008 	mov	r3, r8
    d150:	e58d4000 	str	r4, [sp]
    d154:	e3a02004 	mov	r2, #4
    d158:	e1a01007 	mov	r1, r7
    d15c:	e58dc004 	str	ip, [sp, #4]
    d160:	e2844001 	add	r4, r4, #1
    d164:	eb0001ae 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d168:	e3540040 	cmp	r4, #64	; 0x40
    d16c:	e2855004 	add	r5, r5, #4
    d170:	1affffee 	bne	d130 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    d174:	e28dd008 	add	sp, sp, #8
    d178:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d17c <CDeviceNameService::CDeviceNameService()>:
    d17c:	e92d4070 	push	{r4, r5, r6, lr}
    d180:	e3035fb0 	movw	r5, #16304	; 0x3fb0
    d184:	e3405001 	movt	r5, #1
    d188:	e3a03000 	mov	r3, #0
    d18c:	e1a04000 	mov	r4, r0
    d190:	e5803004 	str	r3, [r0, #4]
    d194:	e5952000 	ldr	r2, [r5]
    d198:	e5803000 	str	r3, [r0]
    d19c:	e1520003 	cmp	r2, r3
    d1a0:	0a000005 	beq	d1bc <CDeviceNameService::CDeviceNameService()+0x40>
    d1a4:	e3031420 	movw	r1, #13344	; 0x3420
    d1a8:	e3030438 	movw	r0, #13368	; 0x3438
    d1ac:	e3401001 	movt	r1, #1
    d1b0:	e3400001 	movt	r0, #1
    d1b4:	e3a0201e 	mov	r2, #30
    d1b8:	ebffff38 	bl	cea0 <assertion_failed>
    d1bc:	e5854000 	str	r4, [r5]
    d1c0:	e1a00004 	mov	r0, r4
    d1c4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d1c8 <CDeviceNameService::~CDeviceNameService()>:
    d1c8:	e5903000 	ldr	r3, [r0]
    d1cc:	e92d4070 	push	{r4, r5, r6, lr}
    d1d0:	e3530000 	cmp	r3, #0
    d1d4:	e1a05000 	mov	r5, r0
    d1d8:	0a00000e 	beq	d218 <CDeviceNameService::~CDeviceNameService()+0x50>
    d1dc:	e3a06000 	mov	r6, #0
    d1e0:	e5930004 	ldr	r0, [r3, #4]
    d1e4:	e5934000 	ldr	r4, [r3]
    d1e8:	e3500000 	cmp	r0, #0
    d1ec:	0a000000 	beq	d1f4 <CDeviceNameService::~CDeviceNameService()+0x2c>
    d1f0:	ebfff439 	bl	a2dc <operator delete[](void*)>
    d1f4:	e5953000 	ldr	r3, [r5]
    d1f8:	e3a01010 	mov	r1, #16
    d1fc:	e5836004 	str	r6, [r3, #4]
    d200:	e1a00003 	mov	r0, r3
    d204:	e5836008 	str	r6, [r3, #8]
    d208:	ebfff434 	bl	a2e0 <operator delete(void*, unsigned int)>
    d20c:	e2543000 	subs	r3, r4, #0
    d210:	e5854000 	str	r4, [r5]
    d214:	1afffff1 	bne	d1e0 <CDeviceNameService::~CDeviceNameService()+0x18>
    d218:	e3033fb0 	movw	r3, #16304	; 0x3fb0
    d21c:	e3403001 	movt	r3, #1
    d220:	e3a02000 	mov	r2, #0
    d224:	e1a00005 	mov	r0, r5
    d228:	e5832000 	str	r2, [r3]
    d22c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d230 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    d230:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d234:	e1a05000 	mov	r5, r0
    d238:	e5900004 	ldr	r0, [r0, #4]
    d23c:	e1a06001 	mov	r6, r1
    d240:	e1a07002 	mov	r7, r2
    d244:	e1a08003 	mov	r8, r3
    d248:	e3500000 	cmp	r0, #0
    d24c:	1a000017 	bne	d2b0 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x80>
    d250:	e3a00010 	mov	r0, #16
    d254:	ebfff41d 	bl	a2d0 <operator new(unsigned int)>
    d258:	e3560000 	cmp	r6, #0
    d25c:	e1a04000 	mov	r4, r0
    d260:	0a00001b 	beq	d2d4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xa4>
    d264:	e1a00006 	mov	r0, r6
    d268:	ebfff7a6 	bl	b108 <strlen>
    d26c:	e2800001 	add	r0, r0, #1
    d270:	ebfff417 	bl	a2d4 <operator new[](unsigned int)>
    d274:	e1a01006 	mov	r1, r6
    d278:	e5840004 	str	r0, [r4, #4]
    d27c:	ebfff7c6 	bl	b19c <strcpy>
    d280:	e3570000 	cmp	r7, #0
    d284:	0a00000b 	beq	d2b8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x88>
    d288:	e5952004 	ldr	r2, [r5, #4]
    d28c:	e5953000 	ldr	r3, [r5]
    d290:	e3520000 	cmp	r2, #0
    d294:	e5847008 	str	r7, [r4, #8]
    d298:	e584800c 	str	r8, [r4, #12]
    d29c:	e5843000 	str	r3, [r4]
    d2a0:	e5854000 	str	r4, [r5]
    d2a4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    d2a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    d2ac:	eafff43b 	b	a3a0 <LeaveCritical>
    d2b0:	ebfff40c 	bl	a2e8 <EnterCritical>
    d2b4:	eaffffe5 	b	d250 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
    d2b8:	e3031420 	movw	r1, #13344	; 0x3420
    d2bc:	e3030450 	movw	r0, #13392	; 0x3450
    d2c0:	e3401001 	movt	r1, #1
    d2c4:	e3400001 	movt	r0, #1
    d2c8:	e3a0203f 	mov	r2, #63	; 0x3f
    d2cc:	ebfffef3 	bl	cea0 <assertion_failed>
    d2d0:	eaffffec 	b	d288 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    d2d4:	e3031420 	movw	r1, #13344	; 0x3420
    d2d8:	e3030444 	movw	r0, #13380	; 0x3444
    d2dc:	e3401001 	movt	r1, #1
    d2e0:	e3400001 	movt	r0, #1
    d2e4:	e3a0203a 	mov	r2, #58	; 0x3a
    d2e8:	ebfffeec 	bl	cea0 <assertion_failed>
    d2ec:	eaffffdc 	b	d264 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

0000d2f0 <CDeviceNameService::GetDevice(char const*, int)>:
    d2f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d2f4:	e2515000 	subs	r5, r1, #0
    d2f8:	e1a07000 	mov	r7, r0
    d2fc:	e1a06002 	mov	r6, r2
    d300:	0a000037 	beq	d3e4 <CDeviceNameService::GetDevice(char const*, int)+0xf4>
    d304:	e5970004 	ldr	r0, [r7, #4]
    d308:	e3500000 	cmp	r0, #0
    d30c:	1a00001a 	bne	d37c <CDeviceNameService::GetDevice(char const*, int)+0x8c>
    d310:	e5974000 	ldr	r4, [r7]
    d314:	e3540000 	cmp	r4, #0
    d318:	0a00001f 	beq	d39c <CDeviceNameService::GetDevice(char const*, int)+0xac>
    d31c:	e3039420 	movw	r9, #13344	; 0x3420
    d320:	e3038460 	movw	r8, #13408	; 0x3460
    d324:	e3409001 	movt	r9, #1
    d328:	e3408001 	movt	r8, #1
    d32c:	ea000009 	b	d358 <CDeviceNameService::GetDevice(char const*, int)+0x68>
    d330:	e1a00005 	mov	r0, r5
    d334:	ebfff77d 	bl	b130 <strcmp>
    d338:	e3500000 	cmp	r0, #0
    d33c:	1a000002 	bne	d34c <CDeviceNameService::GetDevice(char const*, int)+0x5c>
    d340:	e594300c 	ldr	r3, [r4, #12]
    d344:	e1530006 	cmp	r3, r6
    d348:	0a000016 	beq	d3a8 <CDeviceNameService::GetDevice(char const*, int)+0xb8>
    d34c:	e5944000 	ldr	r4, [r4]
    d350:	e3540000 	cmp	r4, #0
    d354:	0a00000c 	beq	d38c <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    d358:	e5941004 	ldr	r1, [r4, #4]
    d35c:	e3510000 	cmp	r1, #0
    d360:	1afffff2 	bne	d330 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    d364:	e1a01009 	mov	r1, r9
    d368:	e3a02053 	mov	r2, #83	; 0x53
    d36c:	e1a00008 	mov	r0, r8
    d370:	ebfffeca 	bl	cea0 <assertion_failed>
    d374:	e5941004 	ldr	r1, [r4, #4]
    d378:	eaffffec 	b	d330 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    d37c:	ebfff3d9 	bl	a2e8 <EnterCritical>
    d380:	e5974000 	ldr	r4, [r7]
    d384:	e3540000 	cmp	r4, #0
    d388:	1affffe3 	bne	d31c <CDeviceNameService::GetDevice(char const*, int)+0x2c>
    d38c:	e5973004 	ldr	r3, [r7, #4]
    d390:	e3530000 	cmp	r3, #0
    d394:	0a000000 	beq	d39c <CDeviceNameService::GetDevice(char const*, int)+0xac>
    d398:	ebfff400 	bl	a3a0 <LeaveCritical>
    d39c:	e3a04000 	mov	r4, #0
    d3a0:	e1a00004 	mov	r0, r4
    d3a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d3a8:	e5973004 	ldr	r3, [r7, #4]
    d3ac:	e5944008 	ldr	r4, [r4, #8]
    d3b0:	e3530000 	cmp	r3, #0
    d3b4:	1a000008 	bne	d3dc <CDeviceNameService::GetDevice(char const*, int)+0xec>
    d3b8:	e3540000 	cmp	r4, #0
    d3bc:	1afffff7 	bne	d3a0 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    d3c0:	e3031420 	movw	r1, #13344	; 0x3420
    d3c4:	e3030474 	movw	r0, #13428	; 0x3474
    d3c8:	e3401001 	movt	r1, #1
    d3cc:	e3400001 	movt	r0, #1
    d3d0:	e3a0205b 	mov	r2, #91	; 0x5b
    d3d4:	ebfffeb1 	bl	cea0 <assertion_failed>
    d3d8:	eafffff0 	b	d3a0 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    d3dc:	ebfff3ef 	bl	a3a0 <LeaveCritical>
    d3e0:	eafffff4 	b	d3b8 <CDeviceNameService::GetDevice(char const*, int)+0xc8>
    d3e4:	e3031420 	movw	r1, #13344	; 0x3420
    d3e8:	e3030444 	movw	r0, #13380	; 0x3444
    d3ec:	e3401001 	movt	r1, #1
    d3f0:	e3400001 	movt	r0, #1
    d3f4:	e3a0204c 	mov	r2, #76	; 0x4c
    d3f8:	ebfffea8 	bl	cea0 <assertion_failed>
    d3fc:	eaffffc0 	b	d304 <CDeviceNameService::GetDevice(char const*, int)+0x14>

0000d400 <CDeviceNameService::Get()>:
    d400:	e92d4010 	push	{r4, lr}
    d404:	e3034fb0 	movw	r4, #16304	; 0x3fb0
    d408:	e3404001 	movt	r4, #1
    d40c:	e5940000 	ldr	r0, [r4]
    d410:	e3500000 	cmp	r0, #0
    d414:	18bd8010 	popne	{r4, pc}
    d418:	e3a02069 	mov	r2, #105	; 0x69
    d41c:	e3031420 	movw	r1, #13344	; 0x3420
    d420:	e3030484 	movw	r0, #13444	; 0x3484
    d424:	e3401001 	movt	r1, #1
    d428:	e3400001 	movt	r0, #1
    d42c:	ebfffe9b 	bl	cea0 <assertion_failed>
    d430:	e5940000 	ldr	r0, [r4]
    d434:	e8bd8010 	pop	{r4, pc}

0000d438 <CLogger::CLogger(unsigned int, CTimer*)>:
    d438:	e92d4010 	push	{r4, lr}
    d43c:	e1a04000 	mov	r4, r0
    d440:	e5801000 	str	r1, [r0]
    d444:	e3a03000 	mov	r3, #0
    d448:	e5802004 	str	r2, [r0, #4]
    d44c:	e3a0c001 	mov	ip, #1
    d450:	e5843008 	str	r3, [r4, #8]
    d454:	e3a00901 	mov	r0, #16384	; 0x4000
    d458:	e584300c 	str	r3, [r4, #12]
    d45c:	e5843010 	str	r3, [r4, #16]
    d460:	e5843014 	str	r3, [r4, #20]
    d464:	e584c018 	str	ip, [r4, #24]
    d468:	ebfff399 	bl	a2d4 <operator new[](unsigned int)>
    d46c:	e3033fb4 	movw	r3, #16308	; 0x3fb4
    d470:	e3403001 	movt	r3, #1
    d474:	e5834000 	str	r4, [r3]
    d478:	e584000c 	str	r0, [r4, #12]
    d47c:	e1a00004 	mov	r0, r4
    d480:	e8bd8010 	pop	{r4, pc}

0000d484 <CLogger::~CLogger()>:
    d484:	e92d4010 	push	{r4, lr}
    d488:	e1a04000 	mov	r4, r0
    d48c:	e590000c 	ldr	r0, [r0, #12]
    d490:	e3a02000 	mov	r2, #0
    d494:	e3033fb4 	movw	r3, #16308	; 0x3fb4
    d498:	e3403001 	movt	r3, #1
    d49c:	e1500002 	cmp	r0, r2
    d4a0:	e5832000 	str	r2, [r3]
    d4a4:	0a000000 	beq	d4ac <CLogger::~CLogger()+0x28>
    d4a8:	ebfff38b 	bl	a2dc <operator delete[](void*)>
    d4ac:	e1a00004 	mov	r0, r4
    d4b0:	e8bd8010 	pop	{r4, pc}

0000d4b4 <CLogger::Get()>:
    d4b4:	e3033fb4 	movw	r3, #16308	; 0x3fb4
    d4b8:	e3403001 	movt	r3, #1
    d4bc:	e5930000 	ldr	r0, [r3]
    d4c0:	e12fff1e 	bx	lr

0000d4c4 <CLogger::Write(char const*)>:
    d4c4:	e92d4070 	push	{r4, r5, r6, lr}
    d4c8:	e1a04000 	mov	r4, r0
    d4cc:	e1a00001 	mov	r0, r1
    d4d0:	e1a05001 	mov	r5, r1
    d4d4:	ebfff70b 	bl	b108 <strlen>
    d4d8:	e1a01005 	mov	r1, r5
    d4dc:	e1a06000 	mov	r6, r0
    d4e0:	e5940008 	ldr	r0, [r4, #8]
    d4e4:	e1a02006 	mov	r2, r6
    d4e8:	e5903000 	ldr	r3, [r0]
    d4ec:	e593300c 	ldr	r3, [r3, #12]
    d4f0:	e12fff33 	blx	r3
    d4f4:	e5940018 	ldr	r0, [r4, #24]
    d4f8:	e3500000 	cmp	r0, #0
    d4fc:	1a000017 	bne	d560 <CLogger::Write(char const*)+0x9c>
    d500:	e0850006 	add	r0, r5, r6
    d504:	e1550000 	cmp	r5, r0
    d508:	0a00000f 	beq	d54c <CLogger::Write(char const*)+0x88>
    d50c:	e0d530d1 	ldrsb	r3, [r5], #1
    d510:	e353000d 	cmp	r3, #13
    d514:	0afffffa 	beq	d504 <CLogger::Write(char const*)+0x40>
    d518:	e5941010 	ldr	r1, [r4, #16]
    d51c:	e594c00c 	ldr	ip, [r4, #12]
    d520:	e7cc3001 	strb	r3, [ip, r1]
    d524:	e5943010 	ldr	r3, [r4, #16]
    d528:	e5941014 	ldr	r1, [r4, #20]
    d52c:	e2833001 	add	r3, r3, #1
    d530:	e7ed3053 	ubfx	r3, r3, #0, #14
    d534:	e5843010 	str	r3, [r4, #16]
    d538:	e1530001 	cmp	r3, r1
    d53c:	1afffff0 	bne	d504 <CLogger::Write(char const*)+0x40>
    d540:	e2433001 	sub	r3, r3, #1
    d544:	e7ed3053 	ubfx	r3, r3, #0, #14
    d548:	e5843010 	str	r3, [r4, #16]
    d54c:	e5943018 	ldr	r3, [r4, #24]
    d550:	e3530000 	cmp	r3, #0
    d554:	08bd8070 	popeq	{r4, r5, r6, pc}
    d558:	e8bd4070 	pop	{r4, r5, r6, lr}
    d55c:	eafff38f 	b	a3a0 <LeaveCritical>
    d560:	ebfff360 	bl	a2e8 <EnterCritical>
    d564:	eaffffe5 	b	d500 <CLogger::Write(char const*)+0x3c>

0000d568 <CLogger::Read(void*, unsigned int)>:
    d568:	e92d4070 	push	{r4, r5, r6, lr}
    d56c:	e1a04000 	mov	r4, r0
    d570:	e5900018 	ldr	r0, [r0, #24]
    d574:	e1a05001 	mov	r5, r1
    d578:	e1a06002 	mov	r6, r2
    d57c:	e3500000 	cmp	r0, #0
    d580:	1a00001b 	bne	d5f4 <CLogger::Read(void*, unsigned int)+0x8c>
    d584:	e5942010 	ldr	r2, [r4, #16]
    d588:	e5943014 	ldr	r3, [r4, #20]
    d58c:	e1520003 	cmp	r2, r3
    d590:	0a000020 	beq	d618 <CLogger::Read(void*, unsigned int)+0xb0>
    d594:	e1a01005 	mov	r1, r5
    d598:	e3a05000 	mov	r5, #0
    d59c:	ea00000a 	b	d5cc <CLogger::Read(void*, unsigned int)+0x64>
    d5a0:	e594000c 	ldr	r0, [r4, #12]
    d5a4:	e2855001 	add	r5, r5, #1
    d5a8:	e19030d3 	ldrsb	r3, [r0, r3]
    d5ac:	e4c13001 	strb	r3, [r1], #1
    d5b0:	e5943014 	ldr	r3, [r4, #20]
    d5b4:	e5940010 	ldr	r0, [r4, #16]
    d5b8:	e2833001 	add	r3, r3, #1
    d5bc:	e7ed3053 	ubfx	r3, r3, #0, #14
    d5c0:	e5843014 	str	r3, [r4, #20]
    d5c4:	e1530000 	cmp	r3, r0
    d5c8:	0a000001 	beq	d5d4 <CLogger::Read(void*, unsigned int)+0x6c>
    d5cc:	e1550006 	cmp	r5, r6
    d5d0:	1afffff2 	bne	d5a0 <CLogger::Read(void*, unsigned int)+0x38>
    d5d4:	e5943018 	ldr	r3, [r4, #24]
    d5d8:	e3530000 	cmp	r3, #0
    d5dc:	1a000001 	bne	d5e8 <CLogger::Read(void*, unsigned int)+0x80>
    d5e0:	e1a00005 	mov	r0, r5
    d5e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d5e8:	ebfff36c 	bl	a3a0 <LeaveCritical>
    d5ec:	e1a00005 	mov	r0, r5
    d5f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d5f4:	ebfff33b 	bl	a2e8 <EnterCritical>
    d5f8:	e5942010 	ldr	r2, [r4, #16]
    d5fc:	e5943014 	ldr	r3, [r4, #20]
    d600:	e1520003 	cmp	r2, r3
    d604:	1affffe2 	bne	d594 <CLogger::Read(void*, unsigned int)+0x2c>
    d608:	e5943018 	ldr	r3, [r4, #24]
    d60c:	e3530000 	cmp	r3, #0
    d610:	0a000000 	beq	d618 <CLogger::Read(void*, unsigned int)+0xb0>
    d614:	ebfff361 	bl	a3a0 <LeaveCritical>
    d618:	e3e05000 	mvn	r5, #0
    d61c:	e1a00005 	mov	r0, r5
    d620:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d624 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    d624:	e590c000 	ldr	ip, [r0]
    d628:	e152000c 	cmp	r2, ip
    d62c:	812fff1e 	bxhi	lr
    d630:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d634:	e24dd020 	sub	sp, sp, #32
    d638:	e1a04000 	mov	r4, r0
    d63c:	e1a05002 	mov	r5, r2
    d640:	e1a0000d 	mov	r0, sp
    d644:	e1a07003 	mov	r7, r3
    d648:	e1a06001 	mov	r6, r1
    d64c:	eb000320 	bl	e2d4 <CString::CString()>
    d650:	e3550000 	cmp	r5, #0
    d654:	0a000049 	beq	d780 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    d658:	e5940004 	ldr	r0, [r4, #4]
    d65c:	e3500000 	cmp	r0, #0
    d660:	0a000032 	beq	d730 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    d664:	ebfff439 	bl	a750 <CTimer::GetTimeString()>
    d668:	e2508000 	subs	r8, r0, #0
    d66c:	0a00000b 	beq	d6a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    d670:	eb00032e 	bl	e330 <CString::operator char const*() const>
    d674:	e1a01000 	mov	r1, r0
    d678:	e1a0000d 	mov	r0, sp
    d67c:	eb000346 	bl	e39c <CString::Append(char const*)>
    d680:	e1a0000d 	mov	r0, sp
    d684:	e3031498 	movw	r1, #13464	; 0x3498
    d688:	e3401001 	movt	r1, #1
    d68c:	eb000342 	bl	e39c <CString::Append(char const*)>
    d690:	e5983000 	ldr	r3, [r8]
    d694:	e1a00008 	mov	r0, r8
    d698:	e5933004 	ldr	r3, [r3, #4]
    d69c:	e12fff33 	blx	r3
    d6a0:	e1a01006 	mov	r1, r6
    d6a4:	e1a0000d 	mov	r0, sp
    d6a8:	e28d6010 	add	r6, sp, #16
    d6ac:	eb00033a 	bl	e39c <CString::Append(char const*)>
    d6b0:	e1a0000d 	mov	r0, sp
    d6b4:	e303149c 	movw	r1, #13468	; 0x349c
    d6b8:	e3401001 	movt	r1, #1
    d6bc:	eb000336 	bl	e39c <CString::Append(char const*)>
    d6c0:	e1a00006 	mov	r0, r6
    d6c4:	eb000302 	bl	e2d4 <CString::CString()>
    d6c8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d6cc:	e1a01007 	mov	r1, r7
    d6d0:	e1a00006 	mov	r0, r6
    d6d4:	eb000455 	bl	e830 <CString::FormatV(char const*, std::__va_list)>
    d6d8:	e1a00006 	mov	r0, r6
    d6dc:	eb000313 	bl	e330 <CString::operator char const*() const>
    d6e0:	e1a01000 	mov	r1, r0
    d6e4:	e1a0000d 	mov	r0, sp
    d6e8:	eb00032b 	bl	e39c <CString::Append(char const*)>
    d6ec:	e3550000 	cmp	r5, #0
    d6f0:	0a00003c 	beq	d7e8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    d6f4:	e1a0000d 	mov	r0, sp
    d6f8:	e30314a8 	movw	r1, #13480	; 0x34a8
    d6fc:	e3401001 	movt	r1, #1
    d700:	eb000325 	bl	e39c <CString::Append(char const*)>
    d704:	e1a0000d 	mov	r0, sp
    d708:	eb000308 	bl	e330 <CString::operator char const*() const>
    d70c:	e1a01000 	mov	r1, r0
    d710:	e1a00004 	mov	r0, r4
    d714:	ebffff6a 	bl	d4c4 <CLogger::Write(char const*)>
    d718:	e1a00006 	mov	r0, r6
    d71c:	eb0002b9 	bl	e208 <CString::~CString()>
    d720:	e1a0000d 	mov	r0, sp
    d724:	eb0002b7 	bl	e208 <CString::~CString()>
    d728:	e28dd020 	add	sp, sp, #32
    d72c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d730:	e1a01006 	mov	r1, r6
    d734:	e1a0000d 	mov	r0, sp
    d738:	e28d6010 	add	r6, sp, #16
    d73c:	eb000316 	bl	e39c <CString::Append(char const*)>
    d740:	e1a0000d 	mov	r0, sp
    d744:	e303149c 	movw	r1, #13468	; 0x349c
    d748:	e3401001 	movt	r1, #1
    d74c:	eb000312 	bl	e39c <CString::Append(char const*)>
    d750:	e1a00006 	mov	r0, r6
    d754:	eb0002de 	bl	e2d4 <CString::CString()>
    d758:	e1a01007 	mov	r1, r7
    d75c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d760:	e1a00006 	mov	r0, r6
    d764:	eb000431 	bl	e830 <CString::FormatV(char const*, std::__va_list)>
    d768:	e1a00006 	mov	r0, r6
    d76c:	eb0002ef 	bl	e330 <CString::operator char const*() const>
    d770:	e1a01000 	mov	r1, r0
    d774:	e1a0000d 	mov	r0, sp
    d778:	eb000307 	bl	e39c <CString::Append(char const*)>
    d77c:	eaffffdc 	b	d6f4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    d780:	e3031490 	movw	r1, #13456	; 0x3490
    d784:	e1a0000d 	mov	r0, sp
    d788:	e3401001 	movt	r1, #1
    d78c:	eb0002ed 	bl	e348 <CString::operator=(char const*)>
    d790:	e5940004 	ldr	r0, [r4, #4]
    d794:	e3500000 	cmp	r0, #0
    d798:	1affffb1 	bne	d664 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    d79c:	e1a01006 	mov	r1, r6
    d7a0:	e1a0000d 	mov	r0, sp
    d7a4:	e28d6010 	add	r6, sp, #16
    d7a8:	eb0002fb 	bl	e39c <CString::Append(char const*)>
    d7ac:	e1a0000d 	mov	r0, sp
    d7b0:	e303149c 	movw	r1, #13468	; 0x349c
    d7b4:	e3401001 	movt	r1, #1
    d7b8:	eb0002f7 	bl	e39c <CString::Append(char const*)>
    d7bc:	e1a00006 	mov	r0, r6
    d7c0:	eb0002c3 	bl	e2d4 <CString::CString()>
    d7c4:	e1a01007 	mov	r1, r7
    d7c8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d7cc:	e1a00006 	mov	r0, r6
    d7d0:	eb000416 	bl	e830 <CString::FormatV(char const*, std::__va_list)>
    d7d4:	e1a00006 	mov	r0, r6
    d7d8:	eb0002d4 	bl	e330 <CString::operator char const*() const>
    d7dc:	e1a01000 	mov	r1, r0
    d7e0:	e1a0000d 	mov	r0, sp
    d7e4:	eb0002ec 	bl	e39c <CString::Append(char const*)>
    d7e8:	e1a0000d 	mov	r0, sp
    d7ec:	e30314a0 	movw	r1, #13472	; 0x34a0
    d7f0:	e3401001 	movt	r1, #1
    d7f4:	eb0002e8 	bl	e39c <CString::Append(char const*)>
    d7f8:	e1a0000d 	mov	r0, sp
    d7fc:	e30314a8 	movw	r1, #13480	; 0x34a8
    d800:	e3401001 	movt	r1, #1
    d804:	eb0002e4 	bl	e39c <CString::Append(char const*)>
    d808:	e1a0000d 	mov	r0, sp
    d80c:	eb0002c7 	bl	e330 <CString::operator char const*() const>
    d810:	e1a01000 	mov	r1, r0
    d814:	e1a00004 	mov	r0, r4
    d818:	ebffff29 	bl	d4c4 <CLogger::Write(char const*)>
    d81c:	ebfff2fc 	bl	a414 <halt>
    d820:	eaffffbc 	b	d718 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    d824:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    d828:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d82c:	e24dd010 	sub	sp, sp, #16
    d830:	e28dc018 	add	ip, sp, #24
    d834:	e59d3014 	ldr	r3, [sp, #20]
    d838:	e58dc000 	str	ip, [sp]
    d83c:	e58dc00c 	str	ip, [sp, #12]
    d840:	ebffff77 	bl	d624 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d844:	e28dd010 	add	sp, sp, #16
    d848:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    d84c:	e28dd004 	add	sp, sp, #4
    d850:	e12fff1e 	bx	lr

0000d854 <CLogger::Initialize(CDevice*)>:
    d854:	e92d4010 	push	{r4, lr}
    d858:	e24dd008 	sub	sp, sp, #8
    d85c:	e5801008 	str	r1, [r0, #8]
    d860:	e1a04000 	mov	r4, r0
    d864:	eb000a89 	bl	10290 <CMachineInfo::Get()>
    d868:	eb000a16 	bl	100c8 <CMachineInfo::GetMachineName() const>
    d86c:	e3a02003 	mov	r2, #3
    d870:	e30334ac 	movw	r3, #13484	; 0x34ac
    d874:	e30314c4 	movw	r1, #13508	; 0x34c4
    d878:	e3403001 	movt	r3, #1
    d87c:	e3401001 	movt	r1, #1
    d880:	e58d0000 	str	r0, [sp]
    d884:	e1a00004 	mov	r0, r4
    d888:	ebffffe5 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d88c:	e3a00001 	mov	r0, #1
    d890:	e28dd008 	add	sp, sp, #8
    d894:	e8bd8010 	pop	{r4, pc}

0000d898 <CSerialDevice::Read(void*, unsigned int)>:
    d898:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d89c:	e2515000 	subs	r5, r1, #0
    d8a0:	e1a04000 	mov	r4, r0
    d8a4:	e1a07002 	mov	r7, r2
    d8a8:	0a000055 	beq	da04 <CSerialDevice::Read(void*, unsigned int)+0x16c>
    d8ac:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    d8b0:	e3530000 	cmp	r3, #0
    d8b4:	0a000031 	beq	d980 <CSerialDevice::Read(void*, unsigned int)+0xe8>
    d8b8:	e2846a01 	add	r6, r4, #4096	; 0x1000
    d8bc:	e59600c8 	ldr	r0, [r6, #200]	; 0xc8
    d8c0:	e3500000 	cmp	r0, #0
    d8c4:	1a000020 	bne	d94c <CSerialDevice::Read(void*, unsigned int)+0xb4>
    d8c8:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d8cc:	e3530000 	cmp	r3, #0
    d8d0:	ba000021 	blt	d95c <CSerialDevice::Read(void*, unsigned int)+0xc4>
    d8d4:	e3570000 	cmp	r7, #0
    d8d8:	0a000016 	beq	d938 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    d8dc:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    d8e0:	e59428b4 	ldr	r2, [r4, #2228]	; 0x8b4
    d8e4:	e1520003 	cmp	r2, r3
    d8e8:	0a000050 	beq	da30 <CSerialDevice::Read(void*, unsigned int)+0x198>
    d8ec:	e0852007 	add	r2, r5, r7
    d8f0:	e1a01005 	mov	r1, r5
    d8f4:	ea000003 	b	d908 <CSerialDevice::Read(void*, unsigned int)+0x70>
    d8f8:	e594c8b0 	ldr	ip, [r4, #2224]	; 0x8b0
    d8fc:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    d900:	e15c0003 	cmp	ip, r3
    d904:	0a00000b 	beq	d938 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    d908:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    d90c:	e0840003 	add	r0, r4, r3
    d910:	e2833001 	add	r3, r3, #1
    d914:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    d918:	e5d030b0 	ldrb	r3, [r0, #176]	; 0xb0
    d91c:	e4c13001 	strb	r3, [r1], #1
    d920:	e1510002 	cmp	r1, r2
    d924:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    d928:	e0417005 	sub	r7, r1, r5
    d92c:	e7ea3053 	ubfx	r3, r3, #0, #11
    d930:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    d934:	1affffef 	bne	d8f8 <CSerialDevice::Read(void*, unsigned int)+0x60>
    d938:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    d93c:	e3530000 	cmp	r3, #0
    d940:	1a00000b 	bne	d974 <CSerialDevice::Read(void*, unsigned int)+0xdc>
    d944:	e1a00007 	mov	r0, r7
    d948:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d94c:	ebfff265 	bl	a2e8 <EnterCritical>
    d950:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d954:	e3530000 	cmp	r3, #0
    d958:	aaffffdd 	bge	d8d4 <CSerialDevice::Read(void*, unsigned int)+0x3c>
    d95c:	e3a03000 	mov	r3, #0
    d960:	e59478b8 	ldr	r7, [r4, #2232]	; 0x8b8
    d964:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    d968:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    d96c:	e3530000 	cmp	r3, #0
    d970:	0afffff3 	beq	d944 <CSerialDevice::Read(void*, unsigned int)+0xac>
    d974:	ebfff289 	bl	a3a0 <LeaveCritical>
    d978:	e1a00007 	mov	r0, r7
    d97c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d980:	e3570000 	cmp	r7, #0
    d984:	0affffee 	beq	d944 <CSerialDevice::Read(void*, unsigned int)+0xac>
    d988:	e3a0ca01 	mov	ip, #4096	; 0x1000
    d98c:	e343cf20 	movt	ip, #16160	; 0x3f20
    d990:	e59c2018 	ldr	r2, [ip, #24]
    d994:	e3120010 	tst	r2, #16
    d998:	1a000026 	bne	da38 <CSerialDevice::Read(void*, unsigned int)+0x1a0>
    d99c:	e59c3000 	ldr	r3, [ip]
    d9a0:	e3130b01 	tst	r3, #1024	; 0x400
    d9a4:	1a000014 	bne	d9fc <CSerialDevice::Read(void*, unsigned int)+0x164>
    d9a8:	e3130b02 	tst	r3, #2048	; 0x800
    d9ac:	1a00001b 	bne	da20 <CSerialDevice::Read(void*, unsigned int)+0x188>
    d9b0:	e3130c01 	tst	r3, #256	; 0x100
    d9b4:	1a00001b 	bne	da28 <CSerialDevice::Read(void*, unsigned int)+0x190>
    d9b8:	e0852007 	add	r2, r5, r7
    d9bc:	e1a01005 	mov	r1, r5
    d9c0:	ea000003 	b	d9d4 <CSerialDevice::Read(void*, unsigned int)+0x13c>
    d9c4:	e3130b02 	tst	r3, #2048	; 0x800
    d9c8:	1a000014 	bne	da20 <CSerialDevice::Read(void*, unsigned int)+0x188>
    d9cc:	e3130c01 	tst	r3, #256	; 0x100
    d9d0:	1a000014 	bne	da28 <CSerialDevice::Read(void*, unsigned int)+0x190>
    d9d4:	e4c13001 	strb	r3, [r1], #1
    d9d8:	e1520001 	cmp	r2, r1
    d9dc:	e0417005 	sub	r7, r1, r5
    d9e0:	0affffd7 	beq	d944 <CSerialDevice::Read(void*, unsigned int)+0xac>
    d9e4:	e59c3018 	ldr	r3, [ip, #24]
    d9e8:	e3130010 	tst	r3, #16
    d9ec:	1affffd4 	bne	d944 <CSerialDevice::Read(void*, unsigned int)+0xac>
    d9f0:	e59c3000 	ldr	r3, [ip]
    d9f4:	e3130b01 	tst	r3, #1024	; 0x400
    d9f8:	0afffff1 	beq	d9c4 <CSerialDevice::Read(void*, unsigned int)+0x12c>
    d9fc:	e3e07000 	mvn	r7, #0
    da00:	eaffffcf 	b	d944 <CSerialDevice::Read(void*, unsigned int)+0xac>
    da04:	e30314e8 	movw	r1, #13544	; 0x34e8
    da08:	e30304f4 	movw	r0, #13556	; 0x34f4
    da0c:	e3401001 	movt	r1, #1
    da10:	e3400001 	movt	r0, #1
    da14:	e3a02c01 	mov	r2, #256	; 0x100
    da18:	ebfffd20 	bl	cea0 <assertion_failed>
    da1c:	eaffffa2 	b	d8ac <CSerialDevice::Read(void*, unsigned int)+0x14>
    da20:	e3e07001 	mvn	r7, #1
    da24:	eaffffc6 	b	d944 <CSerialDevice::Read(void*, unsigned int)+0xac>
    da28:	e3e07002 	mvn	r7, #2
    da2c:	eaffffc4 	b	d944 <CSerialDevice::Read(void*, unsigned int)+0xac>
    da30:	e3a07000 	mov	r7, #0
    da34:	eaffffbf 	b	d938 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    da38:	e1a07003 	mov	r7, r3
    da3c:	eaffffc0 	b	d944 <CSerialDevice::Read(void*, unsigned int)+0xac>

0000da40 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>:
    da40:	e92d4070 	push	{r4, r5, r6, lr}
    da44:	e1a04000 	mov	r4, r0
    da48:	e1a05002 	mov	r5, r2
    da4c:	e1a06001 	mov	r6, r1
    da50:	eb00101b 	bl	11ac4 <CDevice::CDevice()>
    da54:	e59fc09c 	ldr	ip, [pc, #156]	; daf8 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)+0xb8>
    da58:	e1a00004 	mov	r0, r4
    da5c:	e3a03000 	mov	r3, #0
    da60:	e1a02003 	mov	r2, r3
    da64:	e3a01020 	mov	r1, #32
    da68:	e480c004 	str	ip, [r0], #4
    da6c:	ebfff0ec 	bl	9e24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    da70:	e3a03000 	mov	r3, #0
    da74:	e1a02003 	mov	r2, r3
    da78:	e284002c 	add	r0, r4, #44	; 0x2c
    da7c:	e3a01021 	mov	r1, #33	; 0x21
    da80:	ebfff0e7 	bl	9e24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    da84:	e2840054 	add	r0, r4, #84	; 0x54
    da88:	e3a03000 	mov	r3, #0
    da8c:	e3a02004 	mov	r2, #4
    da90:	e3a0100e 	mov	r1, #14
    da94:	ebfff0e2 	bl	9e24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    da98:	e284007c 	add	r0, r4, #124	; 0x7c
    da9c:	e3a03000 	mov	r3, #0
    daa0:	e3a02004 	mov	r2, #4
    daa4:	e3a0100f 	mov	r1, #15
    daa8:	ebfff0dd 	bl	9e24 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    daac:	e2842a01 	add	r2, r4, #4096	; 0x1000
    dab0:	e3550000 	cmp	r5, #0
    dab4:	e3a03000 	mov	r3, #0
    dab8:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    dabc:	e3a01001 	mov	r1, #1
    dac0:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    dac4:	13a0c002 	movne	ip, #2
    dac8:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    dacc:	03a0c001 	moveq	ip, #1
    dad0:	e58450a8 	str	r5, [r4, #168]	; 0xa8
    dad4:	e1a00004 	mov	r0, r4
    dad8:	e58430ac 	str	r3, [r4, #172]	; 0xac
    dadc:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    dae0:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    dae4:	e58210c4 	str	r1, [r2, #196]	; 0xc4
    dae8:	e58230c0 	str	r3, [r2, #192]	; 0xc0
    daec:	e58210cc 	str	r1, [r2, #204]	; 0xcc
    daf0:	e582c0c8 	str	ip, [r2, #200]	; 0xc8
    daf4:	e8bd8070 	pop	{r4, r5, r6, pc}
    daf8:	000134d4 	.word	0x000134d4

0000dafc <CSerialDevice::Initialize(unsigned int)>:
    dafc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    db00:	e1a07001 	mov	r7, r1
    db04:	e1a04000 	mov	r4, r0
    db08:	eb0009e0 	bl	10290 <CMachineInfo::Get()>
    db0c:	e3a01002 	mov	r1, #2
    db10:	eb000982 	bl	10120 <CMachineInfo::GetClockRate(unsigned int) const>
    db14:	e2508000 	subs	r8, r0, #0
    db18:	0a000066 	beq	dcb8 <CSerialDevice::Initialize(unsigned int)+0x1bc>
    db1c:	e30037d4 	movw	r3, #2004	; 0x7d4
    db20:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    db24:	e340303d 	movt	r3, #61	; 0x3d
    db28:	e1520003 	cmp	r2, r3
    db2c:	8a00005a 	bhi	dc9c <CSerialDevice::Initialize(unsigned int)+0x1a0>
    db30:	e1a05207 	lsl	r5, r7, #4
    db34:	e1a00008 	mov	r0, r8
    db38:	e1a01005 	mov	r1, r5
    db3c:	eb000ed8 	bl	116a4 <__aeabi_uidiv>
    db40:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    db44:	e2402001 	sub	r2, r0, #1
    db48:	e1a06000 	mov	r6, r0
    db4c:	e1520003 	cmp	r2, r3
    db50:	8a00004a 	bhi	dc80 <CSerialDevice::Initialize(unsigned int)+0x184>
    db54:	e1a01005 	mov	r1, r5
    db58:	e1a00008 	mov	r0, r8
    db5c:	eb000ed4 	bl	116b4 <__aeabi_uidivmod>
    db60:	e1a00181 	lsl	r0, r1, #3
    db64:	e1a01007 	mov	r1, r7
    db68:	eb000ecd 	bl	116a4 <__aeabi_uidiv>
    db6c:	e2005001 	and	r5, r0, #1
    db70:	e08550a0 	add	r5, r5, r0, lsr #1
    db74:	e355003f 	cmp	r5, #63	; 0x3f
    db78:	8a00002b 	bhi	dc2c <CSerialDevice::Initialize(unsigned int)+0x130>
    db7c:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    db80:	e3500000 	cmp	r0, #0
    db84:	0a000031 	beq	dc50 <CSerialDevice::Initialize(unsigned int)+0x154>
    db88:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
    db8c:	e30e20f4 	movw	r2, #57588	; 0xe0f4
    db90:	e3a01039 	mov	r1, #57	; 0x39
    db94:	e3402000 	movt	r2, #0
    db98:	e3530000 	cmp	r3, #0
    db9c:	e1a03004 	mov	r3, r4
    dba0:	0a00001f 	beq	dc24 <CSerialDevice::Initialize(unsigned int)+0x128>
    dba4:	eb00063d 	bl	f4a0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    dba8:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
    dbac:	e3a03a01 	mov	r3, #4096	; 0x1000
    dbb0:	e3433f20 	movt	r3, #16160	; 0x3f20
    dbb4:	e3a02001 	mov	r2, #1
    dbb8:	e3510000 	cmp	r1, #0
    dbbc:	e58420ac 	str	r2, [r4, #172]	; 0xac
    dbc0:	e3a01000 	mov	r1, #0
    dbc4:	e30027ff 	movw	r2, #2047	; 0x7ff
    dbc8:	e5831038 	str	r1, [r3, #56]	; 0x38
    dbcc:	e5832044 	str	r2, [r3, #68]	; 0x44
    dbd0:	e5836024 	str	r6, [r3, #36]	; 0x24
    dbd4:	e5835028 	str	r5, [r3, #40]	; 0x28
    dbd8:	0a000023 	beq	dc6c <CSerialDevice::Initialize(unsigned int)+0x170>
    dbdc:	e3a02009 	mov	r2, #9
    dbe0:	e3a01070 	mov	r1, #112	; 0x70
    dbe4:	e5832034 	str	r2, [r3, #52]	; 0x34
    dbe8:	e3a02e45 	mov	r2, #1104	; 0x450
    dbec:	e583102c 	str	r1, [r3, #44]	; 0x2c
    dbf0:	e5832038 	str	r2, [r3, #56]	; 0x38
    dbf4:	e3a03a01 	mov	r3, #4096	; 0x1000
    dbf8:	e3433f20 	movt	r3, #16160	; 0x3f20
    dbfc:	e3002301 	movw	r2, #769	; 0x301
    dc00:	e5832030 	str	r2, [r3, #48]	; 0x30
    dc04:	ebfffdfd 	bl	d400 <CDeviceNameService::Get()>
    dc08:	e1a02004 	mov	r2, r4
    dc0c:	e3a03000 	mov	r3, #0
    dc10:	e3031574 	movw	r1, #13684	; 0x3574
    dc14:	e3401001 	movt	r1, #1
    dc18:	ebfffd84 	bl	d230 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    dc1c:	e3a00001 	mov	r0, #1
    dc20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dc24:	eb00067c 	bl	f61c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    dc28:	eaffffde 	b	dba8 <CSerialDevice::Initialize(unsigned int)+0xac>
    dc2c:	e30314e8 	movw	r1, #13544	; 0x34e8
    dc30:	e3030560 	movw	r0, #13664	; 0x3560
    dc34:	e3401001 	movt	r1, #1
    dc38:	e3400001 	movt	r0, #1
    dc3c:	e3a02091 	mov	r2, #145	; 0x91
    dc40:	ebfffc96 	bl	cea0 <assertion_failed>
    dc44:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    dc48:	e3500000 	cmp	r0, #0
    dc4c:	1affffcd 	bne	db88 <CSerialDevice::Initialize(unsigned int)+0x8c>
    dc50:	e3a03a01 	mov	r3, #4096	; 0x1000
    dc54:	e3433f20 	movt	r3, #16160	; 0x3f20
    dc58:	e30027ff 	movw	r2, #2047	; 0x7ff
    dc5c:	e5830038 	str	r0, [r3, #56]	; 0x38
    dc60:	e5832044 	str	r2, [r3, #68]	; 0x44
    dc64:	e5836024 	str	r6, [r3, #36]	; 0x24
    dc68:	e5835028 	str	r5, [r3, #40]	; 0x28
    dc6c:	e3a03a01 	mov	r3, #4096	; 0x1000
    dc70:	e3433f20 	movt	r3, #16160	; 0x3f20
    dc74:	e3a02060 	mov	r2, #96	; 0x60
    dc78:	e583202c 	str	r2, [r3, #44]	; 0x2c
    dc7c:	eaffffdc 	b	dbf4 <CSerialDevice::Initialize(unsigned int)+0xf8>
    dc80:	e30314e8 	movw	r1, #13544	; 0x34e8
    dc84:	e303053c 	movw	r0, #13628	; 0x353c
    dc88:	e3401001 	movt	r1, #1
    dc8c:	e3400001 	movt	r0, #1
    dc90:	e3a0208e 	mov	r2, #142	; 0x8e
    dc94:	ebfffc81 	bl	cea0 <assertion_failed>
    dc98:	eaffffad 	b	db54 <CSerialDevice::Initialize(unsigned int)+0x58>
    dc9c:	e30314e8 	movw	r1, #13544	; 0x34e8
    dca0:	e3030510 	movw	r0, #13584	; 0x3510
    dca4:	e3401001 	movt	r1, #1
    dca8:	e3400001 	movt	r0, #1
    dcac:	e3a0208b 	mov	r2, #139	; 0x8b
    dcb0:	ebfffc7a 	bl	cea0 <assertion_failed>
    dcb4:	eaffff9d 	b	db30 <CSerialDevice::Initialize(unsigned int)+0x34>
    dcb8:	e30314e8 	movw	r1, #13544	; 0x34e8
    dcbc:	e3030500 	movw	r0, #13568	; 0x3500
    dcc0:	e3401001 	movt	r1, #1
    dcc4:	e3400001 	movt	r0, #1
    dcc8:	e3a02089 	mov	r2, #137	; 0x89
    dccc:	ebfffc73 	bl	cea0 <assertion_failed>
    dcd0:	eaffff91 	b	db1c <CSerialDevice::Initialize(unsigned int)+0x20>

0000dcd4 <CSerialDevice::GetOptions() const>:
    dcd4:	e2800a01 	add	r0, r0, #4096	; 0x1000
    dcd8:	e59000c4 	ldr	r0, [r0, #196]	; 0xc4
    dcdc:	e12fff1e 	bx	lr

0000dce0 <CSerialDevice::SetOptions(unsigned int)>:
    dce0:	e2800a01 	add	r0, r0, #4096	; 0x1000
    dce4:	e58010c4 	str	r1, [r0, #196]	; 0xc4
    dce8:	e12fff1e 	bx	lr

0000dcec <CSerialDevice::Write(unsigned char)>:
    dcec:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    dcf0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dcf4:	e3530000 	cmp	r3, #0
    dcf8:	03a02a01 	moveq	r2, #4096	; 0x1000
    dcfc:	03432f20 	movteq	r2, #16160	; 0x3f20
    dd00:	0a000018 	beq	dd68 <CSerialDevice::Write(unsigned char)+0x7c>
    dd04:	e2805a01 	add	r5, r0, #4096	; 0x1000
    dd08:	e1a06001 	mov	r6, r1
    dd0c:	e1a04000 	mov	r4, r0
    dd10:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
    dd14:	e3520000 	cmp	r2, #0
    dd18:	1a00001c 	bne	dd90 <CSerialDevice::Write(unsigned char)+0xa4>
    dd1c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    dd20:	e59510c0 	ldr	r1, [r5, #192]	; 0xc0
    dd24:	e2833001 	add	r3, r3, #1
    dd28:	e7ea3053 	ubfx	r3, r3, #0, #11
    dd2c:	e1530001 	cmp	r3, r1
    dd30:	0a000021 	beq	ddbc <CSerialDevice::Write(unsigned char)+0xd0>
    dd34:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    dd38:	e3a07001 	mov	r7, #1
    dd3c:	e0840003 	add	r0, r4, r3
    dd40:	e0833007 	add	r3, r3, r7
    dd44:	e58530bc 	str	r3, [r5, #188]	; 0xbc
    dd48:	e5c068bc 	strb	r6, [r0, #2236]	; 0x8bc
    dd4c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    dd50:	e7ea3053 	ubfx	r3, r3, #0, #11
    dd54:	e58530bc 	str	r3, [r5, #188]	; 0xbc
    dd58:	e3520000 	cmp	r2, #0
    dd5c:	1a000008 	bne	dd84 <CSerialDevice::Write(unsigned char)+0x98>
    dd60:	e1a00007 	mov	r0, r7
    dd64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dd68:	e5923018 	ldr	r3, [r2, #24]
    dd6c:	e3130020 	tst	r3, #32
    dd70:	1afffffc 	bne	dd68 <CSerialDevice::Write(unsigned char)+0x7c>
    dd74:	e3a07001 	mov	r7, #1
    dd78:	e5821000 	str	r1, [r2]
    dd7c:	e1a00007 	mov	r0, r7
    dd80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dd84:	ebfff185 	bl	a3a0 <LeaveCritical>
    dd88:	e1a00007 	mov	r0, r7
    dd8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dd90:	e1a00002 	mov	r0, r2
    dd94:	ebfff153 	bl	a2e8 <EnterCritical>
    dd98:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    dd9c:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
    dda0:	e2833001 	add	r3, r3, #1
    dda4:	e7ea3053 	ubfx	r3, r3, #0, #11
    dda8:	e1530002 	cmp	r3, r2
    ddac:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
    ddb0:	03a07000 	moveq	r7, #0
    ddb4:	1affffde 	bne	dd34 <CSerialDevice::Write(unsigned char)+0x48>
    ddb8:	eaffffe6 	b	dd58 <CSerialDevice::Write(unsigned char)+0x6c>
    ddbc:	e1a07002 	mov	r7, r2
    ddc0:	e1a00007 	mov	r0, r7
    ddc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ddc8 <CSerialDevice::Write(void const*, unsigned int)>:
    ddc8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ddcc:	e2804a01 	add	r4, r0, #4096	; 0x1000
    ddd0:	e1a07000 	mov	r7, r0
    ddd4:	e1a05001 	mov	r5, r1
    ddd8:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
    dddc:	e1a08002 	mov	r8, r2
    dde0:	e3500000 	cmp	r0, #0
    dde4:	1a000052 	bne	df34 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    dde8:	e3550000 	cmp	r5, #0
    ddec:	0a000058 	beq	df54 <CSerialDevice::Write(void const*, unsigned int)+0x18c>
    ddf0:	e3580000 	cmp	r8, #0
    ddf4:	0a00005d 	beq	df70 <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
    ddf8:	e3a06000 	mov	r6, #0
    ddfc:	ea000002 	b	de0c <CSerialDevice::Write(void const*, unsigned int)+0x44>
    de00:	e2866001 	add	r6, r6, #1
    de04:	e1560008 	cmp	r6, r8
    de08:	0a00000f 	beq	de4c <CSerialDevice::Write(void const*, unsigned int)+0x84>
    de0c:	e5d51000 	ldrb	r1, [r5]
    de10:	e1a00007 	mov	r0, r7
    de14:	ebffffb4 	bl	dcec <CSerialDevice::Write(unsigned char)>
    de18:	e3500000 	cmp	r0, #0
    de1c:	0a00000a 	beq	de4c <CSerialDevice::Write(void const*, unsigned int)+0x84>
    de20:	e4d53001 	ldrb	r3, [r5], #1
    de24:	e353000a 	cmp	r3, #10
    de28:	1afffff4 	bne	de00 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    de2c:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    de30:	e3130001 	tst	r3, #1
    de34:	0afffff1 	beq	de00 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    de38:	e3a0100d 	mov	r1, #13
    de3c:	e1a00007 	mov	r0, r7
    de40:	ebffffa9 	bl	dcec <CSerialDevice::Write(unsigned char)>
    de44:	e3500000 	cmp	r0, #0
    de48:	1affffec 	bne	de00 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    de4c:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    de50:	e3530000 	cmp	r3, #0
    de54:	1a000034 	bne	df2c <CSerialDevice::Write(void const*, unsigned int)+0x164>
    de58:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    de5c:	e3530000 	cmp	r3, #0
    de60:	0a000023 	beq	def4 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    de64:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
    de68:	e3500000 	cmp	r0, #0
    de6c:	1a000032 	bne	df3c <CSerialDevice::Write(void const*, unsigned int)+0x174>
    de70:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    de74:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    de78:	e1520003 	cmp	r2, r3
    de7c:	0a00001c 	beq	def4 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    de80:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    de84:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
    de88:	e1520003 	cmp	r2, r3
    de8c:	0a000015 	beq	dee8 <CSerialDevice::Write(void const*, unsigned int)+0x120>
    de90:	e3a02a01 	mov	r2, #4096	; 0x1000
    de94:	e3432f20 	movt	r2, #16160	; 0x3f20
    de98:	e5923018 	ldr	r3, [r2, #24]
    de9c:	e3130020 	tst	r3, #32
    dea0:	0a000003 	beq	deb4 <CSerialDevice::Write(void const*, unsigned int)+0xec>
    dea4:	ea000017 	b	df08 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    dea8:	e5923018 	ldr	r3, [r2, #24]
    deac:	e3130020 	tst	r3, #32
    deb0:	1a000014 	bne	df08 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    deb4:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    deb8:	e0871003 	add	r1, r7, r3
    debc:	e2833001 	add	r3, r3, #1
    dec0:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    dec4:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
    dec8:	e5823000 	str	r3, [r2]
    decc:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    ded0:	e7ea3053 	ubfx	r3, r3, #0, #11
    ded4:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    ded8:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
    dedc:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    dee0:	e1510003 	cmp	r1, r3
    dee4:	1affffef 	bne	dea8 <CSerialDevice::Write(void const*, unsigned int)+0xe0>
    dee8:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    deec:	e3530000 	cmp	r3, #0
    def0:	1a000001 	bne	defc <CSerialDevice::Write(void const*, unsigned int)+0x134>
    def4:	e1a00006 	mov	r0, r6
    def8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    defc:	ebfff127 	bl	a3a0 <LeaveCritical>
    df00:	e1a00006 	mov	r0, r6
    df04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    df08:	e3a03a01 	mov	r3, #4096	; 0x1000
    df0c:	e3433f20 	movt	r3, #16160	; 0x3f20
    df10:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    df14:	e3822020 	orr	r2, r2, #32
    df18:	e5832038 	str	r2, [r3, #56]	; 0x38
    df1c:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    df20:	e3530000 	cmp	r3, #0
    df24:	0afffff2 	beq	def4 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    df28:	eafffff3 	b	defc <CSerialDevice::Write(void const*, unsigned int)+0x134>
    df2c:	ebfff11b 	bl	a3a0 <LeaveCritical>
    df30:	eaffffc8 	b	de58 <CSerialDevice::Write(void const*, unsigned int)+0x90>
    df34:	ebfff0eb 	bl	a2e8 <EnterCritical>
    df38:	eaffffaa 	b	dde8 <CSerialDevice::Write(void const*, unsigned int)+0x20>
    df3c:	ebfff0e9 	bl	a2e8 <EnterCritical>
    df40:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    df44:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    df48:	e1520003 	cmp	r2, r3
    df4c:	1affffcb 	bne	de80 <CSerialDevice::Write(void const*, unsigned int)+0xb8>
    df50:	eaffffe4 	b	dee8 <CSerialDevice::Write(void const*, unsigned int)+0x120>
    df54:	e30314e8 	movw	r1, #13544	; 0x34e8
    df58:	e30304f4 	movw	r0, #13556	; 0x34f4
    df5c:	e3401001 	movt	r1, #1
    df60:	e3400001 	movt	r0, #1
    df64:	e3a020c2 	mov	r2, #194	; 0xc2
    df68:	ebfffbcc 	bl	cea0 <assertion_failed>
    df6c:	eaffff9f 	b	ddf0 <CSerialDevice::Write(void const*, unsigned int)+0x28>
    df70:	e1a06008 	mov	r6, r8
    df74:	eaffffb4 	b	de4c <CSerialDevice::Write(void const*, unsigned int)+0x84>

0000df78 <CSerialDevice::InterruptHandler()>:
    df78:	e92d4070 	push	{r4, r5, r6, lr}
    df7c:	e2805a01 	add	r5, r0, #4096	; 0x1000
    df80:	e1a04000 	mov	r4, r0
    df84:	e59500c8 	ldr	r0, [r5, #200]	; 0xc8
    df88:	e3500000 	cmp	r0, #0
    df8c:	1a000056 	bne	e0ec <CSerialDevice::InterruptHandler()+0x174>
    df90:	e3a03a01 	mov	r3, #4096	; 0x1000
    df94:	e3433f20 	movt	r3, #16160	; 0x3f20
    df98:	e3e0e002 	mvn	lr, #2
    df9c:	e3e00001 	mvn	r0, #1
    dfa0:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    dfa4:	e1a01003 	mov	r1, r3
    dfa8:	e3e0c000 	mvn	ip, #0
    dfac:	e5832044 	str	r2, [r3, #68]	; 0x44
    dfb0:	e5913018 	ldr	r3, [r1, #24]
    dfb4:	e3130010 	tst	r3, #16
    dfb8:	1a000016 	bne	e018 <CSerialDevice::InterruptHandler()+0xa0>
    dfbc:	e5912000 	ldr	r2, [r1]
    dfc0:	e3120b01 	tst	r2, #1024	; 0x400
    dfc4:	0a000032 	beq	e094 <CSerialDevice::InterruptHandler()+0x11c>
    dfc8:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    dfcc:	e3530000 	cmp	r3, #0
    dfd0:	0584c8b8 	streq	ip, [r4, #2232]	; 0x8b8
    dfd4:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    dfd8:	e59468b4 	ldr	r6, [r4, #2228]	; 0x8b4
    dfdc:	e2833001 	add	r3, r3, #1
    dfe0:	e7ea3053 	ubfx	r3, r3, #0, #11
    dfe4:	e1530006 	cmp	r3, r6
    dfe8:	0a00002f 	beq	e0ac <CSerialDevice::InterruptHandler()+0x134>
    dfec:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    dff0:	e0846003 	add	r6, r4, r3
    dff4:	e2833001 	add	r3, r3, #1
    dff8:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    dffc:	e5c620b0 	strb	r2, [r6, #176]	; 0xb0
    e000:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    e004:	e7ea3053 	ubfx	r3, r3, #0, #11
    e008:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    e00c:	e5913018 	ldr	r3, [r1, #24]
    e010:	e3130010 	tst	r3, #16
    e014:	0affffe8 	beq	dfbc <CSerialDevice::InterruptHandler()+0x44>
    e018:	e5913018 	ldr	r3, [r1, #24]
    e01c:	e3130020 	tst	r3, #32
    e020:	1a000016 	bne	e080 <CSerialDevice::InterruptHandler()+0x108>
    e024:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    e028:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
    e02c:	e1520003 	cmp	r2, r3
    e030:	13a02a01 	movne	r2, #4096	; 0x1000
    e034:	13432f20 	movtne	r2, #16160	; 0x3f20
    e038:	1a000004 	bne	e050 <CSerialDevice::InterruptHandler()+0xd8>
    e03c:	ea000024 	b	e0d4 <CSerialDevice::InterruptHandler()+0x15c>
    e040:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    e044:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    e048:	e1510003 	cmp	r1, r3
    e04c:	0a000020 	beq	e0d4 <CSerialDevice::InterruptHandler()+0x15c>
    e050:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    e054:	e0841003 	add	r1, r4, r3
    e058:	e2833001 	add	r3, r3, #1
    e05c:	e58530c0 	str	r3, [r5, #192]	; 0xc0
    e060:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
    e064:	e5823000 	str	r3, [r2]
    e068:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    e06c:	e7ea3053 	ubfx	r3, r3, #0, #11
    e070:	e58530c0 	str	r3, [r5, #192]	; 0xc0
    e074:	e5923018 	ldr	r3, [r2, #24]
    e078:	e3130020 	tst	r3, #32
    e07c:	0affffef 	beq	e040 <CSerialDevice::InterruptHandler()+0xc8>
    e080:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    e084:	e3530000 	cmp	r3, #0
    e088:	08bd8070 	popeq	{r4, r5, r6, pc}
    e08c:	e8bd4070 	pop	{r4, r5, r6, lr}
    e090:	eafff0c2 	b	a3a0 <LeaveCritical>
    e094:	e3120b02 	tst	r2, #2048	; 0x800
    e098:	0a000007 	beq	e0bc <CSerialDevice::InterruptHandler()+0x144>
    e09c:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    e0a0:	e3530000 	cmp	r3, #0
    e0a4:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    e0a8:	eaffffc9 	b	dfd4 <CSerialDevice::InterruptHandler()+0x5c>
    e0ac:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    e0b0:	e3530000 	cmp	r3, #0
    e0b4:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    e0b8:	eaffffbc 	b	dfb0 <CSerialDevice::InterruptHandler()+0x38>
    e0bc:	e3120c01 	tst	r2, #256	; 0x100
    e0c0:	0affffc3 	beq	dfd4 <CSerialDevice::InterruptHandler()+0x5c>
    e0c4:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    e0c8:	e3530000 	cmp	r3, #0
    e0cc:	0584e8b8 	streq	lr, [r4, #2232]	; 0x8b8
    e0d0:	eaffffbf 	b	dfd4 <CSerialDevice::InterruptHandler()+0x5c>
    e0d4:	e3a03a01 	mov	r3, #4096	; 0x1000
    e0d8:	e3433f20 	movt	r3, #16160	; 0x3f20
    e0dc:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    e0e0:	e3c22020 	bic	r2, r2, #32
    e0e4:	e5832038 	str	r2, [r3, #56]	; 0x38
    e0e8:	eaffffe4 	b	e080 <CSerialDevice::InterruptHandler()+0x108>
    e0ec:	ebfff07d 	bl	a2e8 <EnterCritical>
    e0f0:	eaffffa6 	b	df90 <CSerialDevice::InterruptHandler()+0x18>

0000e0f4 <CSerialDevice::InterruptStub(void*)>:
    e0f4:	e92d4010 	push	{r4, lr}
    e0f8:	e2504000 	subs	r4, r0, #0
    e0fc:	0a000002 	beq	e10c <CSerialDevice::InterruptStub(void*)+0x18>
    e100:	e1a00004 	mov	r0, r4
    e104:	e8bd4010 	pop	{r4, lr}
    e108:	eaffff9a 	b	df78 <CSerialDevice::InterruptHandler()>
    e10c:	e30314e8 	movw	r1, #13544	; 0x34e8
    e110:	e3010ce4 	movw	r0, #7396	; 0x1ce4
    e114:	e3401001 	movt	r1, #1
    e118:	e3400001 	movt	r0, #1
    e11c:	e30021c1 	movw	r2, #449	; 0x1c1
    e120:	ebfffb5e 	bl	cea0 <assertion_failed>
    e124:	e1a00004 	mov	r0, r4
    e128:	e8bd4010 	pop	{r4, lr}
    e12c:	eaffff91 	b	df78 <CSerialDevice::InterruptHandler()>

0000e130 <CSerialDevice::~CSerialDevice()>:
    e130:	e59f10a8 	ldr	r1, [pc, #168]	; e1e0 <CSerialDevice::~CSerialDevice()+0xb0>
    e134:	e3a03a01 	mov	r3, #4096	; 0x1000
    e138:	e3433f20 	movt	r3, #16160	; 0x3f20
    e13c:	e3a02000 	mov	r2, #0
    e140:	e92d4010 	push	{r4, lr}
    e144:	e1a04000 	mov	r4, r0
    e148:	e5801000 	str	r1, [r0]
    e14c:	e5832038 	str	r2, [r3, #56]	; 0x38
    e150:	e5832030 	str	r2, [r3, #48]	; 0x30
    e154:	e59030ac 	ldr	r3, [r0, #172]	; 0xac
    e158:	e1530002 	cmp	r3, r2
    e15c:	0a000006 	beq	e17c <CSerialDevice::~CSerialDevice()+0x4c>
    e160:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    e164:	e1500002 	cmp	r0, r2
    e168:	0a000014 	beq	e1c0 <CSerialDevice::~CSerialDevice()+0x90>
    e16c:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
    e170:	e3530000 	cmp	r3, #0
    e174:	0a00000e 	beq	e1b4 <CSerialDevice::~CSerialDevice()+0x84>
    e178:	eb0004f7 	bl	f55c <CInterruptSystem::DisconnectFIQ()>
    e17c:	e3a03000 	mov	r3, #0
    e180:	e284007c 	add	r0, r4, #124	; 0x7c
    e184:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    e188:	ebffec88 	bl	93b0 <CGPIOPin::~CGPIOPin()>
    e18c:	e2840054 	add	r0, r4, #84	; 0x54
    e190:	ebffec86 	bl	93b0 <CGPIOPin::~CGPIOPin()>
    e194:	e284002c 	add	r0, r4, #44	; 0x2c
    e198:	ebffec84 	bl	93b0 <CGPIOPin::~CGPIOPin()>
    e19c:	e2840004 	add	r0, r4, #4
    e1a0:	ebffec82 	bl	93b0 <CGPIOPin::~CGPIOPin()>
    e1a4:	e1a00004 	mov	r0, r4
    e1a8:	eb000e39 	bl	11a94 <CDevice::~CDevice()>
    e1ac:	e1a00004 	mov	r0, r4
    e1b0:	e8bd8010 	pop	{r4, pc}
    e1b4:	e3a01039 	mov	r1, #57	; 0x39
    e1b8:	eb000550 	bl	f700 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    e1bc:	eaffffee 	b	e17c <CSerialDevice::~CSerialDevice()+0x4c>
    e1c0:	e30314e8 	movw	r1, #13544	; 0x34e8
    e1c4:	e3020364 	movw	r0, #9060	; 0x2364
    e1c8:	e3401001 	movt	r1, #1
    e1cc:	e3400001 	movt	r0, #1
    e1d0:	e3a02078 	mov	r2, #120	; 0x78
    e1d4:	ebfffb31 	bl	cea0 <assertion_failed>
    e1d8:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    e1dc:	eaffffe2 	b	e16c <CSerialDevice::~CSerialDevice()+0x3c>
    e1e0:	000134d4 	.word	0x000134d4

0000e1e4 <CSerialDevice::~CSerialDevice()>:
    e1e4:	e92d4010 	push	{r4, lr}
    e1e8:	e1a04000 	mov	r4, r0
    e1ec:	ebffffcf 	bl	e130 <CSerialDevice::~CSerialDevice()>
    e1f0:	e1a00004 	mov	r0, r4
    e1f4:	e30110d0 	movw	r1, #4304	; 0x10d0
    e1f8:	ebfff038 	bl	a2e0 <operator delete(void*, unsigned int)>
    e1fc:	e1a00004 	mov	r0, r4
    e200:	e8bd8010 	pop	{r4, pc}
    e204:	00000000 	andeq	r0, r0, r0

0000e208 <CString::~CString()>:
    e208:	e92d4010 	push	{r4, lr}
    e20c:	e1a04000 	mov	r4, r0
    e210:	e5900004 	ldr	r0, [r0, #4]
    e214:	e59f3014 	ldr	r3, [pc, #20]	; e230 <CString::~CString()+0x28>
    e218:	e3500000 	cmp	r0, #0
    e21c:	e5843000 	str	r3, [r4]
    e220:	0a000000 	beq	e228 <CString::~CString()+0x20>
    e224:	ebfff02c 	bl	a2dc <operator delete[](void*)>
    e228:	e1a00004 	mov	r0, r4
    e22c:	e8bd8010 	pop	{r4, pc}
    e230:	00013584 	.word	0x00013584

0000e234 <CString::~CString()>:
    e234:	e92d4010 	push	{r4, lr}
    e238:	e1a04000 	mov	r4, r0
    e23c:	e5900004 	ldr	r0, [r0, #4]
    e240:	e59f3020 	ldr	r3, [pc, #32]	; e268 <CString::~CString()+0x34>
    e244:	e3500000 	cmp	r0, #0
    e248:	e5843000 	str	r3, [r4]
    e24c:	0a000000 	beq	e254 <CString::~CString()+0x20>
    e250:	ebfff021 	bl	a2dc <operator delete[](void*)>
    e254:	e1a00004 	mov	r0, r4
    e258:	e3a01010 	mov	r1, #16
    e25c:	ebfff01f 	bl	a2e0 <operator delete(void*, unsigned int)>
    e260:	e1a00004 	mov	r0, r4
    e264:	e8bd8010 	pop	{r4, pc}
    e268:	00013584 	.word	0x00013584

0000e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    e26c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e270:	e990002c 	ldmib	r0, {r2, r3, r5}
    e274:	e0455002 	sub	r5, r5, r2
    e278:	e0851001 	add	r1, r5, r1
    e27c:	e2812001 	add	r2, r1, #1
    e280:	e1520003 	cmp	r2, r3
    e284:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    e288:	e2816041 	add	r6, r1, #65	; 0x41
    e28c:	e1a04000 	mov	r4, r0
    e290:	e1a00006 	mov	r0, r6
    e294:	ebfff00e 	bl	a2d4 <operator new[](unsigned int)>
    e298:	e594300c 	ldr	r3, [r4, #12]
    e29c:	e3a02000 	mov	r2, #0
    e2a0:	e5c32000 	strb	r2, [r3]
    e2a4:	e5941004 	ldr	r1, [r4, #4]
    e2a8:	e1a07000 	mov	r7, r0
    e2ac:	ebfff3ba 	bl	b19c <strcpy>
    e2b0:	e5940004 	ldr	r0, [r4, #4]
    e2b4:	e3500000 	cmp	r0, #0
    e2b8:	0a000000 	beq	e2c0 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    e2bc:	ebfff006 	bl	a2dc <operator delete[](void*)>
    e2c0:	e0875005 	add	r5, r7, r5
    e2c4:	e5847004 	str	r7, [r4, #4]
    e2c8:	e584500c 	str	r5, [r4, #12]
    e2cc:	e5846008 	str	r6, [r4, #8]
    e2d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e2d4 <CString::CString()>:
    e2d4:	e59f1010 	ldr	r1, [pc, #16]	; e2ec <CString::CString()+0x18>
    e2d8:	e3a02000 	mov	r2, #0
    e2dc:	e5802004 	str	r2, [r0, #4]
    e2e0:	e5802008 	str	r2, [r0, #8]
    e2e4:	e5801000 	str	r1, [r0]
    e2e8:	e12fff1e 	bx	lr
    e2ec:	00013584 	.word	0x00013584

0000e2f0 <CString::CString(char const*)>:
    e2f0:	e59f3034 	ldr	r3, [pc, #52]	; e32c <CString::CString(char const*)+0x3c>
    e2f4:	e92d4070 	push	{r4, r5, r6, lr}
    e2f8:	e1a04000 	mov	r4, r0
    e2fc:	e5843000 	str	r3, [r4]
    e300:	e1a00001 	mov	r0, r1
    e304:	e1a05001 	mov	r5, r1
    e308:	ebfff37e 	bl	b108 <strlen>
    e30c:	e2800001 	add	r0, r0, #1
    e310:	e5840008 	str	r0, [r4, #8]
    e314:	ebffefee 	bl	a2d4 <operator new[](unsigned int)>
    e318:	e1a01005 	mov	r1, r5
    e31c:	e5840004 	str	r0, [r4, #4]
    e320:	ebfff39d 	bl	b19c <strcpy>
    e324:	e1a00004 	mov	r0, r4
    e328:	e8bd8070 	pop	{r4, r5, r6, pc}
    e32c:	00013584 	.word	0x00013584

0000e330 <CString::operator char const*() const>:
    e330:	e5900004 	ldr	r0, [r0, #4]
    e334:	e30232dc 	movw	r3, #8924	; 0x22dc
    e338:	e3403001 	movt	r3, #1
    e33c:	e3500000 	cmp	r0, #0
    e340:	01a00003 	moveq	r0, r3
    e344:	e12fff1e 	bx	lr

0000e348 <CString::operator=(char const*)>:
    e348:	e92d4070 	push	{r4, r5, r6, lr}
    e34c:	e1a04000 	mov	r4, r0
    e350:	e5900004 	ldr	r0, [r0, #4]
    e354:	e1a05001 	mov	r5, r1
    e358:	e3500000 	cmp	r0, #0
    e35c:	0a000000 	beq	e364 <CString::operator=(char const*)+0x1c>
    e360:	ebffefdd 	bl	a2dc <operator delete[](void*)>
    e364:	e1a00005 	mov	r0, r5
    e368:	ebfff366 	bl	b108 <strlen>
    e36c:	e2800001 	add	r0, r0, #1
    e370:	e5840008 	str	r0, [r4, #8]
    e374:	ebffefd6 	bl	a2d4 <operator new[](unsigned int)>
    e378:	e1a01005 	mov	r1, r5
    e37c:	e5840004 	str	r0, [r4, #4]
    e380:	ebfff385 	bl	b19c <strcpy>
    e384:	e5940004 	ldr	r0, [r4, #4]
    e388:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e38c <CString::GetLength() const>:
    e38c:	e5900004 	ldr	r0, [r0, #4]
    e390:	e3500000 	cmp	r0, #0
    e394:	012fff1e 	bxeq	lr
    e398:	eafff35a 	b	b108 <strlen>

0000e39c <CString::Append(char const*)>:
    e39c:	e92d4070 	push	{r4, r5, r6, lr}
    e3a0:	e1a04000 	mov	r4, r0
    e3a4:	e5900004 	ldr	r0, [r0, #4]
    e3a8:	e3a03001 	mov	r3, #1
    e3ac:	e1a06001 	mov	r6, r1
    e3b0:	e5843008 	str	r3, [r4, #8]
    e3b4:	e3500000 	cmp	r0, #0
    e3b8:	0a000003 	beq	e3cc <CString::Append(char const*)+0x30>
    e3bc:	ebfff351 	bl	b108 <strlen>
    e3c0:	e5943008 	ldr	r3, [r4, #8]
    e3c4:	e0830000 	add	r0, r3, r0
    e3c8:	e5840008 	str	r0, [r4, #8]
    e3cc:	e1a00006 	mov	r0, r6
    e3d0:	ebfff34c 	bl	b108 <strlen>
    e3d4:	e5943008 	ldr	r3, [r4, #8]
    e3d8:	e0800003 	add	r0, r0, r3
    e3dc:	e5840008 	str	r0, [r4, #8]
    e3e0:	ebffefbb 	bl	a2d4 <operator new[](unsigned int)>
    e3e4:	e5941004 	ldr	r1, [r4, #4]
    e3e8:	e3510000 	cmp	r1, #0
    e3ec:	e1a05000 	mov	r5, r0
    e3f0:	05c01000 	strbeq	r1, [r0]
    e3f4:	0a000004 	beq	e40c <CString::Append(char const*)+0x70>
    e3f8:	ebfff367 	bl	b19c <strcpy>
    e3fc:	e5940004 	ldr	r0, [r4, #4]
    e400:	e3500000 	cmp	r0, #0
    e404:	0a000000 	beq	e40c <CString::Append(char const*)+0x70>
    e408:	ebffefb3 	bl	a2dc <operator delete[](void*)>
    e40c:	e1a01006 	mov	r1, r6
    e410:	e1a00005 	mov	r0, r5
    e414:	ebfff37e 	bl	b214 <strcat>
    e418:	e5845004 	str	r5, [r4, #4]
    e41c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e420 <CString::Compare(char const*) const>:
    e420:	e5900004 	ldr	r0, [r0, #4]
    e424:	eafff341 	b	b130 <strcmp>

0000e428 <CString::Find(char) const>:
    e428:	e5902004 	ldr	r2, [r0, #4]
    e42c:	e1d230d0 	ldrsb	r3, [r2]
    e430:	e3530000 	cmp	r3, #0
    e434:	0a000009 	beq	e460 <CString::Find(char) const+0x38>
    e438:	e1510003 	cmp	r1, r3
    e43c:	e3a00000 	mov	r0, #0
    e440:	1a000002 	bne	e450 <CString::Find(char) const+0x28>
    e444:	ea000007 	b	e468 <CString::Find(char) const+0x40>
    e448:	e1530001 	cmp	r3, r1
    e44c:	012fff1e 	bxeq	lr
    e450:	e1f230d1 	ldrsb	r3, [r2, #1]!
    e454:	e2800001 	add	r0, r0, #1
    e458:	e3530000 	cmp	r3, #0
    e45c:	1afffff9 	bne	e448 <CString::Find(char) const+0x20>
    e460:	e3e00000 	mvn	r0, #0
    e464:	e12fff1e 	bx	lr
    e468:	e12fff1e 	bx	lr

0000e46c <CString::PutChar(char, unsigned int)>:
    e46c:	e92d4070 	push	{r4, r5, r6, lr}
    e470:	e2524000 	subs	r4, r2, #0
    e474:	08bd8070 	popeq	{r4, r5, r6, pc}
    e478:	e1a06001 	mov	r6, r1
    e47c:	e1a01004 	mov	r1, r4
    e480:	e1a05000 	mov	r5, r0
    e484:	ebffff78 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e488:	e2443001 	sub	r3, r4, #1
    e48c:	e595200c 	ldr	r2, [r5, #12]
    e490:	e2433001 	sub	r3, r3, #1
    e494:	e3730001 	cmn	r3, #1
    e498:	e2820001 	add	r0, r2, #1
    e49c:	e585000c 	str	r0, [r5, #12]
    e4a0:	e5c26000 	strb	r6, [r2]
    e4a4:	1afffff8 	bne	e48c <CString::PutChar(char, unsigned int)+0x20>
    e4a8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e4ac <CString::PutString(char const*)>:
    e4ac:	e92d4070 	push	{r4, r5, r6, lr}
    e4b0:	e1a04000 	mov	r4, r0
    e4b4:	e1a00001 	mov	r0, r1
    e4b8:	e1a05001 	mov	r5, r1
    e4bc:	ebfff311 	bl	b108 <strlen>
    e4c0:	e2506000 	subs	r6, r0, #0
    e4c4:	0a000002 	beq	e4d4 <CString::PutString(char const*)+0x28>
    e4c8:	e1a01006 	mov	r1, r6
    e4cc:	e1a00004 	mov	r0, r4
    e4d0:	ebffff65 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e4d4:	e1a01005 	mov	r1, r5
    e4d8:	e594000c 	ldr	r0, [r4, #12]
    e4dc:	ebfff32e 	bl	b19c <strcpy>
    e4e0:	e594100c 	ldr	r1, [r4, #12]
    e4e4:	e0811006 	add	r1, r1, r6
    e4e8:	e584100c 	str	r1, [r4, #12]
    e4ec:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e4f0 <CString::ReserveSpace(unsigned int)>:
    e4f0:	e3510000 	cmp	r1, #0
    e4f4:	012fff1e 	bxeq	lr
    e4f8:	eaffff5b 	b	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000e4fc <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    e4fc:	e1510002 	cmp	r1, r2
    e500:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e504:	e1a06001 	mov	r6, r1
    e508:	e1a08002 	mov	r8, r2
    e50c:	e1a0a000 	mov	sl, r0
    e510:	e1a07003 	mov	r7, r3
    e514:	23a05001 	movcs	r5, #1
    e518:	3a000022 	bcc	e5a8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0xac>
    e51c:	e0050598 	mul	r5, r8, r5
    e520:	e1a00006 	mov	r0, r6
    e524:	e1a01005 	mov	r1, r5
    e528:	eb000c5d 	bl	116a4 <__aeabi_uidiv>
    e52c:	e1500008 	cmp	r0, r8
    e530:	e1a04000 	mov	r4, r0
    e534:	2afffff8 	bcs	e51c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x20>
    e538:	e3570000 	cmp	r7, #0
    e53c:	e1a0700a 	mov	r7, sl
    e540:	13a09037 	movne	r9, #55	; 0x37
    e544:	03a09057 	moveq	r9, #87	; 0x57
    e548:	ea000001 	b	e554 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x58>
    e54c:	eb000c54 	bl	116a4 <__aeabi_uidiv>
    e550:	e1a04000 	mov	r4, r0
    e554:	e1a00006 	mov	r0, r6
    e558:	e1a01005 	mov	r1, r5
    e55c:	eb000c54 	bl	116b4 <__aeabi_uidivmod>
    e560:	e2877001 	add	r7, r7, #1
    e564:	e3540009 	cmp	r4, #9
    e568:	e0893004 	add	r3, r9, r4
    e56c:	e2844030 	add	r4, r4, #48	; 0x30
    e570:	e1a00005 	mov	r0, r5
    e574:	e6af3073 	sxtb	r3, r3
    e578:	96af3074 	sxtbls	r3, r4
    e57c:	e5473001 	strb	r3, [r7, #-1]
    e580:	e1a06001 	mov	r6, r1
    e584:	e1a01008 	mov	r1, r8
    e588:	eb000c45 	bl	116a4 <__aeabi_uidiv>
    e58c:	e2505000 	subs	r5, r0, #0
    e590:	e1a00006 	mov	r0, r6
    e594:	e1a01005 	mov	r1, r5
    e598:	1affffeb 	bne	e54c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x50>
    e59c:	e5c75000 	strb	r5, [r7]
    e5a0:	e1a0000a 	mov	r0, sl
    e5a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e5a8:	e1a04001 	mov	r4, r1
    e5ac:	e3a05001 	mov	r5, #1
    e5b0:	eaffffe0 	b	e538 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x3c>

0000e5b4 <CString::ftoa(char*, double, unsigned int)>:
    e5b4:	eeb50bc0 	vcmpe.f64	d0, #0.0
    e5b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5bc:	e1a08000 	mov	r8, r0
    e5c0:	ed2d8b02 	vpush	{d8}
    e5c4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e5c8:	43a0302d 	movmi	r3, #45	; 0x2d
    e5cc:	42809001 	addmi	r9, r0, #1
    e5d0:	45c03000 	strbmi	r3, [r0]
    e5d4:	eeb08b40 	vmov.f64	d8, d0
    e5d8:	51a09000 	movpl	r9, r0
    e5dc:	eddf0b91 	vldr	d16, [pc, #580]	; e828 <CString::ftoa(char*, double, unsigned int)+0x274>
    e5e0:	e24dd01c 	sub	sp, sp, #28
    e5e4:	e58d1004 	str	r1, [sp, #4]
    e5e8:	4eb18b40 	vnegmi.f64	d8, d0
    e5ec:	eeb48be0 	vcmpe.f64	d8, d16
    e5f0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e5f4:	ca00007b 	bgt	e7e8 <CString::ftoa(char*, double, unsigned int)+0x234>
    e5f8:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e5fc:	ee175a90 	vmov	r5, s15
    e600:	e3550009 	cmp	r5, #9
    e604:	83a07001 	movhi	r7, #1
    e608:	83a0400a 	movhi	r4, #10
    e60c:	9a00007d 	bls	e808 <CString::ftoa(char*, double, unsigned int)+0x254>
    e610:	e0070794 	mul	r7, r4, r7
    e614:	e1a00005 	mov	r0, r5
    e618:	e1a01007 	mov	r1, r7
    e61c:	eb000c20 	bl	116a4 <__aeabi_uidiv>
    e620:	e3500009 	cmp	r0, #9
    e624:	e1a0a000 	mov	sl, r0
    e628:	8afffff8 	bhi	e610 <CString::ftoa(char*, double, unsigned int)+0x5c>
    e62c:	e30c6ccd 	movw	r6, #52429	; 0xcccd
    e630:	e1a04009 	mov	r4, r9
    e634:	e34c6ccc 	movt	r6, #52428	; 0xcccc
    e638:	e1a0b005 	mov	fp, r5
    e63c:	ea000001 	b	e648 <CString::ftoa(char*, double, unsigned int)+0x94>
    e640:	eb000c17 	bl	116a4 <__aeabi_uidiv>
    e644:	e1a0a000 	mov	sl, r0
    e648:	e1a0000b 	mov	r0, fp
    e64c:	e1a01007 	mov	r1, r7
    e650:	eb000c17 	bl	116b4 <__aeabi_uidivmod>
    e654:	e0832697 	umull	r2, r3, r7, r6
    e658:	e35a0009 	cmp	sl, #9
    e65c:	e2844001 	add	r4, r4, #1
    e660:	e1a0b001 	mov	fp, r1
    e664:	e28a1057 	add	r1, sl, #87	; 0x57
    e668:	e28aa030 	add	sl, sl, #48	; 0x30
    e66c:	e1a0000b 	mov	r0, fp
    e670:	e6af1071 	sxtb	r1, r1
    e674:	96af107a 	sxtbls	r1, sl
    e678:	e1b071a3 	lsrs	r7, r3, #3
    e67c:	e5441001 	strb	r1, [r4, #-1]
    e680:	e1a01007 	mov	r1, r7
    e684:	1affffed 	bne	e640 <CString::ftoa(char*, double, unsigned int)+0x8c>
    e688:	e59d3004 	ldr	r3, [sp, #4]
    e68c:	e5c47000 	strb	r7, [r4]
    e690:	e3530000 	cmp	r3, #0
    e694:	1a000003 	bne	e6a8 <CString::ftoa(char*, double, unsigned int)+0xf4>
    e698:	e1a00008 	mov	r0, r8
    e69c:	e28dd01c 	add	sp, sp, #28
    e6a0:	ecbd8b02 	vpop	{d8}
    e6a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6a8:	e1a00009 	mov	r0, r9
    e6ac:	ebfff295 	bl	b108 <strlen>
    e6b0:	e59d3004 	ldr	r3, [sp, #4]
    e6b4:	e3530009 	cmp	r3, #9
    e6b8:	31a07003 	movcc	r7, r3
    e6bc:	23a07009 	movcs	r7, #9
    e6c0:	e3570001 	cmp	r7, #1
    e6c4:	e3a0302e 	mov	r3, #46	; 0x2e
    e6c8:	e0892000 	add	r2, r9, r0
    e6cc:	e7c93000 	strb	r3, [r9, r0]
    e6d0:	e58d2004 	str	r2, [sp, #4]
    e6d4:	e2829001 	add	r9, r2, #1
    e6d8:	0a000050 	beq	e820 <CString::ftoa(char*, double, unsigned int)+0x26c>
    e6dc:	e3a0200a 	mov	r2, #10
    e6e0:	e3a03002 	mov	r3, #2
    e6e4:	e1a01002 	mov	r1, r2
    e6e8:	e2833001 	add	r3, r3, #1
    e6ec:	e1530007 	cmp	r3, r7
    e6f0:	e0020291 	mul	r2, r1, r2
    e6f4:	9afffffb 	bls	e6e8 <CString::ftoa(char*, double, unsigned int)+0x134>
    e6f8:	ee072a90 	vmov	s15, r2
    e6fc:	eef81b67 	vcvt.f64.u32	d17, s15
    e700:	ee075a90 	vmov	s15, r5
    e704:	eef80b67 	vcvt.f64.u32	d16, s15
    e708:	ee388b60 	vsub.f64	d8, d8, d16
    e70c:	ee288b21 	vmul.f64	d8, d8, d17
    e710:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e714:	ee17ba90 	vmov	fp, s15
    e718:	e35b0009 	cmp	fp, #9
    e71c:	83a06001 	movhi	r6, #1
    e720:	83a0400a 	movhi	r4, #10
    e724:	9a00003a 	bls	e814 <CString::ftoa(char*, double, unsigned int)+0x260>
    e728:	e0060694 	mul	r6, r4, r6
    e72c:	e1a0000b 	mov	r0, fp
    e730:	e1a01006 	mov	r1, r6
    e734:	eb000bda 	bl	116a4 <__aeabi_uidiv>
    e738:	e3500009 	cmp	r0, #9
    e73c:	e1a0a000 	mov	sl, r0
    e740:	8afffff8 	bhi	e728 <CString::ftoa(char*, double, unsigned int)+0x174>
    e744:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    e748:	e28d400c 	add	r4, sp, #12
    e74c:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    e750:	ea000001 	b	e75c <CString::ftoa(char*, double, unsigned int)+0x1a8>
    e754:	eb000bd2 	bl	116a4 <__aeabi_uidiv>
    e758:	e1a0a000 	mov	sl, r0
    e75c:	e1a0000b 	mov	r0, fp
    e760:	e1a01006 	mov	r1, r6
    e764:	eb000bd2 	bl	116b4 <__aeabi_uidivmod>
    e768:	e0832596 	umull	r2, r3, r6, r5
    e76c:	e35a0009 	cmp	sl, #9
    e770:	e2844001 	add	r4, r4, #1
    e774:	e1a0b001 	mov	fp, r1
    e778:	e28a1057 	add	r1, sl, #87	; 0x57
    e77c:	e28aa030 	add	sl, sl, #48	; 0x30
    e780:	e1a0000b 	mov	r0, fp
    e784:	e6af1071 	sxtb	r1, r1
    e788:	96af107a 	sxtbls	r1, sl
    e78c:	e1b061a3 	lsrs	r6, r3, #3
    e790:	e5441001 	strb	r1, [r4, #-1]
    e794:	e1a01006 	mov	r1, r6
    e798:	1affffed 	bne	e754 <CString::ftoa(char*, double, unsigned int)+0x1a0>
    e79c:	e28d000c 	add	r0, sp, #12
    e7a0:	e5c46000 	strb	r6, [r4]
    e7a4:	ebfff257 	bl	b108 <strlen>
    e7a8:	e0577000 	subs	r7, r7, r0
    e7ac:	0a000006 	beq	e7cc <CString::ftoa(char*, double, unsigned int)+0x218>
    e7b0:	e59d6004 	ldr	r6, [sp, #4]
    e7b4:	e3a03030 	mov	r3, #48	; 0x30
    e7b8:	e0862007 	add	r2, r6, r7
    e7bc:	e5e63001 	strb	r3, [r6, #1]!
    e7c0:	e1560002 	cmp	r6, r2
    e7c4:	1afffffc 	bne	e7bc <CString::ftoa(char*, double, unsigned int)+0x208>
    e7c8:	e0899007 	add	r9, r9, r7
    e7cc:	e28d100c 	add	r1, sp, #12
    e7d0:	e1a00009 	mov	r0, r9
    e7d4:	ebfff270 	bl	b19c <strcpy>
    e7d8:	e1a00008 	mov	r0, r8
    e7dc:	e28dd01c 	add	sp, sp, #28
    e7e0:	ecbd8b02 	vpop	{d8}
    e7e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7e8:	e1a00009 	mov	r0, r9
    e7ec:	e303158c 	movw	r1, #13708	; 0x358c
    e7f0:	e3401001 	movt	r1, #1
    e7f4:	ebfff268 	bl	b19c <strcpy>
    e7f8:	e1a00008 	mov	r0, r8
    e7fc:	e28dd01c 	add	sp, sp, #28
    e800:	ecbd8b02 	vpop	{d8}
    e804:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e808:	ee17aa90 	vmov	sl, s15
    e80c:	e3a07001 	mov	r7, #1
    e810:	eaffff85 	b	e62c <CString::ftoa(char*, double, unsigned int)+0x78>
    e814:	ee17aa90 	vmov	sl, s15
    e818:	e3a06001 	mov	r6, #1
    e81c:	eaffffc8 	b	e744 <CString::ftoa(char*, double, unsigned int)+0x190>
    e820:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    e824:	eaffffb5 	b	e700 <CString::ftoa(char*, double, unsigned int)+0x14c>
    e828:	ffe00000 	.word	0xffe00000
    e82c:	41efffff 	.word	0x41efffff

0000e830 <CString::FormatV(char const*, std::__va_list)>:
    e830:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e834:	e1a0b000 	mov	fp, r0
    e838:	e5900004 	ldr	r0, [r0, #4]
    e83c:	e24dd034 	sub	sp, sp, #52	; 0x34
    e840:	e1a05001 	mov	r5, r1
    e844:	e3500000 	cmp	r0, #0
    e848:	e58d2000 	str	r2, [sp]
    e84c:	0a000000 	beq	e854 <CString::FormatV(char const*, std::__va_list)+0x24>
    e850:	ebffeea1 	bl	a2dc <operator delete[](void*)>
    e854:	e3a00040 	mov	r0, #64	; 0x40
    e858:	e58b0008 	str	r0, [fp, #8]
    e85c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    e860:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    e864:	e58d3014 	str	r3, [sp, #20]
    e868:	ebffee99 	bl	a2d4 <operator new[](unsigned int)>
    e86c:	e58b0004 	str	r0, [fp, #4]
    e870:	e58b000c 	str	r0, [fp, #12]
    e874:	e1d540d0 	ldrsb	r4, [r5]
    e878:	e3540000 	cmp	r4, #0
    e87c:	0a0000a2 	beq	eb0c <CString::FormatV(char const*, std::__va_list)+0x2dc>
    e880:	e3540025 	cmp	r4, #37	; 0x25
    e884:	13a01001 	movne	r1, #1
    e888:	11a0000b 	movne	r0, fp
    e88c:	1a000156 	bne	edec <CString::FormatV(char const*, std::__va_list)+0x5bc>
    e890:	e1d560d1 	ldrsb	r6, [r5, #1]
    e894:	e3560025 	cmp	r6, #37	; 0x25
    e898:	0a000169 	beq	ee44 <CString::FormatV(char const*, std::__va_list)+0x614>
    e89c:	e356002d 	cmp	r6, #45	; 0x2d
    e8a0:	e3a04000 	mov	r4, #0
    e8a4:	12855001 	addne	r5, r5, #1
    e8a8:	01d560d2 	ldrsbeq	r6, [r5, #2]
    e8ac:	03a03001 	moveq	r3, #1
    e8b0:	13a03000 	movne	r3, #0
    e8b4:	02855002 	addeq	r5, r5, #2
    e8b8:	e3560030 	cmp	r6, #48	; 0x30
    e8bc:	e58d3004 	str	r3, [sp, #4]
    e8c0:	01d560d1 	ldrsbeq	r6, [r5, #1]
    e8c4:	03a03001 	moveq	r3, #1
    e8c8:	13a03000 	movne	r3, #0
    e8cc:	058d300c 	streq	r3, [sp, #12]
    e8d0:	00855003 	addeq	r5, r5, r3
    e8d4:	158d300c 	strne	r3, [sp, #12]
    e8d8:	e2463030 	sub	r3, r6, #48	; 0x30
    e8dc:	e6ef3073 	uxtb	r3, r3
    e8e0:	e3530009 	cmp	r3, #9
    e8e4:	8a000007 	bhi	e908 <CString::FormatV(char const*, std::__va_list)+0xd8>
    e8e8:	e3a0200a 	mov	r2, #10
    e8ec:	e0246492 	mla	r4, r2, r4, r6
    e8f0:	e1f560d1 	ldrsb	r6, [r5, #1]!
    e8f4:	e2463030 	sub	r3, r6, #48	; 0x30
    e8f8:	e2444030 	sub	r4, r4, #48	; 0x30
    e8fc:	e6ef3073 	uxtb	r3, r3
    e900:	e3530009 	cmp	r3, #9
    e904:	9afffff8 	bls	e8ec <CString::FormatV(char const*, std::__va_list)+0xbc>
    e908:	e356002e 	cmp	r6, #46	; 0x2e
    e90c:	0a00013c 	beq	ee04 <CString::FormatV(char const*, std::__va_list)+0x5d4>
    e910:	e1d570d0 	ldrsb	r7, [r5]
    e914:	e3a01006 	mov	r1, #6
    e918:	e357006c 	cmp	r7, #108	; 0x6c
    e91c:	01d570d1 	ldrsbeq	r7, [r5, #1]
    e920:	03a02001 	moveq	r2, #1
    e924:	13a02000 	movne	r2, #0
    e928:	00855002 	addeq	r5, r5, r2
    e92c:	e2473058 	sub	r3, r7, #88	; 0x58
    e930:	e3530020 	cmp	r3, #32
    e934:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e938:	ea000120 	b	edc0 <CString::FormatV(char const*, std::__va_list)+0x590>
    e93c:	0000ed3c 	.word	0x0000ed3c
    e940:	0000edc0 	.word	0x0000edc0
    e944:	0000edc0 	.word	0x0000edc0
    e948:	0000edc0 	.word	0x0000edc0
    e94c:	0000edc0 	.word	0x0000edc0
    e950:	0000edc0 	.word	0x0000edc0
    e954:	0000edc0 	.word	0x0000edc0
    e958:	0000edc0 	.word	0x0000edc0
    e95c:	0000edc0 	.word	0x0000edc0
    e960:	0000edc0 	.word	0x0000edc0
    e964:	0000edc0 	.word	0x0000edc0
    e968:	0000ecc8 	.word	0x0000ecc8
    e96c:	0000eb9c 	.word	0x0000eb9c
    e970:	0000edc0 	.word	0x0000edc0
    e974:	0000eb1c 	.word	0x0000eb1c
    e978:	0000edc0 	.word	0x0000edc0
    e97c:	0000edc0 	.word	0x0000edc0
    e980:	0000edc0 	.word	0x0000edc0
    e984:	0000edc0 	.word	0x0000edc0
    e988:	0000edc0 	.word	0x0000edc0
    e98c:	0000edc0 	.word	0x0000edc0
    e990:	0000edc0 	.word	0x0000edc0
    e994:	0000edc0 	.word	0x0000edc0
    e998:	0000e9c0 	.word	0x0000e9c0
    e99c:	0000edc0 	.word	0x0000edc0
    e9a0:	0000edc0 	.word	0x0000edc0
    e9a4:	0000edc0 	.word	0x0000edc0
    e9a8:	0000ed4c 	.word	0x0000ed4c
    e9ac:	0000edc0 	.word	0x0000edc0
    e9b0:	0000ed44 	.word	0x0000ed44
    e9b4:	0000edc0 	.word	0x0000edc0
    e9b8:	0000edc0 	.word	0x0000edc0
    e9bc:	0000ed3c 	.word	0x0000ed3c
    e9c0:	e3a08008 	mov	r8, #8
    e9c4:	e59d3000 	ldr	r3, [sp]
    e9c8:	e2833004 	add	r3, r3, #4
    e9cc:	e5136004 	ldr	r6, [r3, #-4]
    e9d0:	e58d3000 	str	r3, [sp]
    e9d4:	e1560008 	cmp	r6, r8
    e9d8:	23a0a001 	movcs	sl, #1
    e9dc:	3a000198 	bcc	f044 <CString::FormatV(char const*, std::__va_list)+0x814>
    e9e0:	e00a0a98 	mul	sl, r8, sl
    e9e4:	e1a00006 	mov	r0, r6
    e9e8:	e1a0100a 	mov	r1, sl
    e9ec:	eb000b2c 	bl	116a4 <__aeabi_uidiv>
    e9f0:	e1580000 	cmp	r8, r0
    e9f4:	9afffff9 	bls	e9e0 <CString::FormatV(char const*, std::__va_list)+0x1b0>
    e9f8:	e1a09000 	mov	r9, r0
    e9fc:	e28d3018 	add	r3, sp, #24
    ea00:	e3570058 	cmp	r7, #88	; 0x58
    ea04:	e58d3008 	str	r3, [sp, #8]
    ea08:	13a02057 	movne	r2, #87	; 0x57
    ea0c:	03a02037 	moveq	r2, #55	; 0x37
    ea10:	e1a07003 	mov	r7, r3
    ea14:	e1a03005 	mov	r3, r5
    ea18:	e58d4010 	str	r4, [sp, #16]
    ea1c:	e1a0500a 	mov	r5, sl
    ea20:	e1a04002 	mov	r4, r2
    ea24:	e1a0a003 	mov	sl, r3
    ea28:	ea000001 	b	ea34 <CString::FormatV(char const*, std::__va_list)+0x204>
    ea2c:	eb000b1c 	bl	116a4 <__aeabi_uidiv>
    ea30:	e1a09000 	mov	r9, r0
    ea34:	e1a00006 	mov	r0, r6
    ea38:	e1a01005 	mov	r1, r5
    ea3c:	eb000b1c 	bl	116b4 <__aeabi_uidivmod>
    ea40:	e2877001 	add	r7, r7, #1
    ea44:	e3590009 	cmp	r9, #9
    ea48:	e0842009 	add	r2, r4, r9
    ea4c:	e2899030 	add	r9, r9, #48	; 0x30
    ea50:	e1a00005 	mov	r0, r5
    ea54:	e6af2072 	sxtb	r2, r2
    ea58:	96af2079 	sxtbls	r2, r9
    ea5c:	e5472001 	strb	r2, [r7, #-1]
    ea60:	e1a06001 	mov	r6, r1
    ea64:	e1a01008 	mov	r1, r8
    ea68:	eb000b0d 	bl	116a4 <__aeabi_uidiv>
    ea6c:	e2505000 	subs	r5, r0, #0
    ea70:	e1a00006 	mov	r0, r6
    ea74:	e1a01005 	mov	r1, r5
    ea78:	1affffeb 	bne	ea2c <CString::FormatV(char const*, std::__va_list)+0x1fc>
    ea7c:	e1a0300a 	mov	r3, sl
    ea80:	e59d0008 	ldr	r0, [sp, #8]
    ea84:	e5c71000 	strb	r1, [r7]
    ea88:	e1a0a005 	mov	sl, r5
    ea8c:	e59d4010 	ldr	r4, [sp, #16]
    ea90:	e1a05003 	mov	r5, r3
    ea94:	ebfff19b 	bl	b108 <strlen>
    ea98:	e59d3004 	ldr	r3, [sp, #4]
    ea9c:	e3530000 	cmp	r3, #0
    eaa0:	e1a06000 	mov	r6, r0
    eaa4:	1a0000ef 	bne	ee68 <CString::FormatV(char const*, std::__va_list)+0x638>
    eaa8:	e1500004 	cmp	r0, r4
    eaac:	2a00000f 	bcs	eaf0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    eab0:	e59d300c 	ldr	r3, [sp, #12]
    eab4:	e0444000 	sub	r4, r4, r0
    eab8:	e1a0000b 	mov	r0, fp
    eabc:	e3530000 	cmp	r3, #0
    eac0:	e1a01004 	mov	r1, r4
    eac4:	03a06020 	moveq	r6, #32
    eac8:	13a06030 	movne	r6, #48	; 0x30
    eacc:	ebfffde6 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ead0:	e2443001 	sub	r3, r4, #1
    ead4:	e59b200c 	ldr	r2, [fp, #12]
    ead8:	e2433001 	sub	r3, r3, #1
    eadc:	e3730001 	cmn	r3, #1
    eae0:	e2821001 	add	r1, r2, #1
    eae4:	e58b100c 	str	r1, [fp, #12]
    eae8:	e5c26000 	strb	r6, [r2]
    eaec:	1afffff8 	bne	ead4 <CString::FormatV(char const*, std::__va_list)+0x2a4>
    eaf0:	e59d1008 	ldr	r1, [sp, #8]
    eaf4:	e1a0000b 	mov	r0, fp
    eaf8:	ebfffe6b 	bl	e4ac <CString::PutString(char const*)>
    eafc:	e2855001 	add	r5, r5, #1
    eb00:	e1d540d0 	ldrsb	r4, [r5]
    eb04:	e3540000 	cmp	r4, #0
    eb08:	1affff5c 	bne	e880 <CString::FormatV(char const*, std::__va_list)+0x50>
    eb0c:	e59b300c 	ldr	r3, [fp, #12]
    eb10:	e5c34000 	strb	r4, [r3]
    eb14:	e28dd034 	add	sp, sp, #52	; 0x34
    eb18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb1c:	e59d3000 	ldr	r3, [sp]
    eb20:	e28d6018 	add	r6, sp, #24
    eb24:	e58d6008 	str	r6, [sp, #8]
    eb28:	e2833007 	add	r3, r3, #7
    eb2c:	e1a00006 	mov	r0, r6
    eb30:	e3c33007 	bic	r3, r3, #7
    eb34:	e2832008 	add	r2, r3, #8
    eb38:	e58d2000 	str	r2, [sp]
    eb3c:	ed930b00 	vldr	d0, [r3]
    eb40:	ebfffe9b 	bl	e5b4 <CString::ftoa(char*, double, unsigned int)>
    eb44:	e1a00006 	mov	r0, r6
    eb48:	ebfff16e 	bl	b108 <strlen>
    eb4c:	e59d3004 	ldr	r3, [sp, #4]
    eb50:	e3530000 	cmp	r3, #0
    eb54:	e1a06000 	mov	r6, r0
    eb58:	1a000107 	bne	ef7c <CString::FormatV(char const*, std::__va_list)+0x74c>
    eb5c:	e1500004 	cmp	r0, r4
    eb60:	2affffe2 	bcs	eaf0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    eb64:	e0444000 	sub	r4, r4, r0
    eb68:	e1a0000b 	mov	r0, fp
    eb6c:	e1a01004 	mov	r1, r4
    eb70:	ebfffdbd 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb74:	e2443001 	sub	r3, r4, #1
    eb78:	e3a00020 	mov	r0, #32
    eb7c:	e59b200c 	ldr	r2, [fp, #12]
    eb80:	e2433001 	sub	r3, r3, #1
    eb84:	e3730001 	cmn	r3, #1
    eb88:	e2821001 	add	r1, r2, #1
    eb8c:	e58b100c 	str	r1, [fp, #12]
    eb90:	e5c20000 	strb	r0, [r2]
    eb94:	1afffff8 	bne	eb7c <CString::FormatV(char const*, std::__va_list)+0x34c>
    eb98:	eaffffd4 	b	eaf0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    eb9c:	e59d3000 	ldr	r3, [sp]
    eba0:	e2833004 	add	r3, r3, #4
    eba4:	e5137004 	ldr	r7, [r3, #-4]
    eba8:	e58d3000 	str	r3, [sp]
    ebac:	e3570000 	cmp	r7, #0
    ebb0:	b2677000 	rsblt	r7, r7, #0
    ebb4:	b3a03001 	movlt	r3, #1
    ebb8:	a3a03000 	movge	r3, #0
    ebbc:	b58d300c 	strlt	r3, [sp, #12]
    ebc0:	e1a06007 	mov	r6, r7
    ebc4:	a58d300c 	strge	r3, [sp, #12]
    ebc8:	e3570009 	cmp	r7, #9
    ebcc:	e58d3010 	str	r3, [sp, #16]
    ebd0:	c3a0a001 	movgt	sl, #1
    ebd4:	c3a0900a 	movgt	r9, #10
    ebd8:	da000116 	ble	f038 <CString::FormatV(char const*, std::__va_list)+0x808>
    ebdc:	e00a0a99 	mul	sl, r9, sl
    ebe0:	e1a00007 	mov	r0, r7
    ebe4:	e1a0100a 	mov	r1, sl
    ebe8:	eb000aad 	bl	116a4 <__aeabi_uidiv>
    ebec:	e3500009 	cmp	r0, #9
    ebf0:	8afffff9 	bhi	ebdc <CString::FormatV(char const*, std::__va_list)+0x3ac>
    ebf4:	e1a08000 	mov	r8, r0
    ebf8:	e28d7018 	add	r7, sp, #24
    ebfc:	e59d9014 	ldr	r9, [sp, #20]
    ec00:	e58d7008 	str	r7, [sp, #8]
    ec04:	ea000001 	b	ec10 <CString::FormatV(char const*, std::__va_list)+0x3e0>
    ec08:	eb000aa5 	bl	116a4 <__aeabi_uidiv>
    ec0c:	e1a08000 	mov	r8, r0
    ec10:	e1a00006 	mov	r0, r6
    ec14:	e1a0100a 	mov	r1, sl
    ec18:	eb000aa5 	bl	116b4 <__aeabi_uidivmod>
    ec1c:	e083299a 	umull	r2, r3, sl, r9
    ec20:	e3580009 	cmp	r8, #9
    ec24:	e2877001 	add	r7, r7, #1
    ec28:	e1a06001 	mov	r6, r1
    ec2c:	e2881057 	add	r1, r8, #87	; 0x57
    ec30:	e2888030 	add	r8, r8, #48	; 0x30
    ec34:	e1a00006 	mov	r0, r6
    ec38:	e6af1071 	sxtb	r1, r1
    ec3c:	96af1078 	sxtbls	r1, r8
    ec40:	e1b0a1a3 	lsrs	sl, r3, #3
    ec44:	e5471001 	strb	r1, [r7, #-1]
    ec48:	e1a0100a 	mov	r1, sl
    ec4c:	1affffed 	bne	ec08 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    ec50:	e59d0008 	ldr	r0, [sp, #8]
    ec54:	e5c7a000 	strb	sl, [r7]
    ec58:	ebfff12a 	bl	b108 <strlen>
    ec5c:	e59d3004 	ldr	r3, [sp, #4]
    ec60:	e3530000 	cmp	r3, #0
    ec64:	e59d300c 	ldr	r3, [sp, #12]
    ec68:	e0808003 	add	r8, r0, r3
    ec6c:	0a000090 	beq	eeb4 <CString::FormatV(char const*, std::__va_list)+0x684>
    ec70:	e59d3010 	ldr	r3, [sp, #16]
    ec74:	e3530000 	cmp	r3, #0
    ec78:	1a0000e5 	bne	f014 <CString::FormatV(char const*, std::__va_list)+0x7e4>
    ec7c:	e59d1008 	ldr	r1, [sp, #8]
    ec80:	e1a0000b 	mov	r0, fp
    ec84:	ebfffe08 	bl	e4ac <CString::PutString(char const*)>
    ec88:	e1580004 	cmp	r8, r4
    ec8c:	2affff9a 	bcs	eafc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ec90:	e0448008 	sub	r8, r4, r8
    ec94:	e1a0000b 	mov	r0, fp
    ec98:	e1a01008 	mov	r1, r8
    ec9c:	ebfffd72 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eca0:	e2483001 	sub	r3, r8, #1
    eca4:	e3a00020 	mov	r0, #32
    eca8:	e59b200c 	ldr	r2, [fp, #12]
    ecac:	e2433001 	sub	r3, r3, #1
    ecb0:	e3730001 	cmn	r3, #1
    ecb4:	e2821001 	add	r1, r2, #1
    ecb8:	e58b100c 	str	r1, [fp, #12]
    ecbc:	e5c20000 	strb	r0, [r2]
    ecc0:	1afffff8 	bne	eca8 <CString::FormatV(char const*, std::__va_list)+0x478>
    ecc4:	eaffff8c 	b	eafc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ecc8:	e59d3004 	ldr	r3, [sp, #4]
    eccc:	e3530000 	cmp	r3, #0
    ecd0:	e59d3000 	ldr	r3, [sp]
    ecd4:	e2836004 	add	r6, r3, #4
    ecd8:	e1d370d0 	ldrsb	r7, [r3]
    ecdc:	1a00008f 	bne	ef20 <CString::FormatV(char const*, std::__va_list)+0x6f0>
    ece0:	e3540001 	cmp	r4, #1
    ece4:	9a00000b 	bls	ed18 <CString::FormatV(char const*, std::__va_list)+0x4e8>
    ece8:	e2441001 	sub	r1, r4, #1
    ecec:	e1a0000b 	mov	r0, fp
    ecf0:	e2444002 	sub	r4, r4, #2
    ecf4:	ebfffd5c 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ecf8:	e3a01020 	mov	r1, #32
    ecfc:	e59b300c 	ldr	r3, [fp, #12]
    ed00:	e2444001 	sub	r4, r4, #1
    ed04:	e3740001 	cmn	r4, #1
    ed08:	e2832001 	add	r2, r3, #1
    ed0c:	e58b200c 	str	r2, [fp, #12]
    ed10:	e5c31000 	strb	r1, [r3]
    ed14:	1afffff8 	bne	ecfc <CString::FormatV(char const*, std::__va_list)+0x4cc>
    ed18:	e3a01001 	mov	r1, #1
    ed1c:	e1a0000b 	mov	r0, fp
    ed20:	ebfffd51 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ed24:	e59b300c 	ldr	r3, [fp, #12]
    ed28:	e58d6000 	str	r6, [sp]
    ed2c:	e2832001 	add	r2, r3, #1
    ed30:	e58b200c 	str	r2, [fp, #12]
    ed34:	e5c37000 	strb	r7, [r3]
    ed38:	eaffff6f 	b	eafc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ed3c:	e3a08010 	mov	r8, #16
    ed40:	eaffff1f 	b	e9c4 <CString::FormatV(char const*, std::__va_list)+0x194>
    ed44:	e3a0800a 	mov	r8, #10
    ed48:	eaffff1d 	b	e9c4 <CString::FormatV(char const*, std::__va_list)+0x194>
    ed4c:	e59d3000 	ldr	r3, [sp]
    ed50:	e2836004 	add	r6, r3, #4
    ed54:	e5938000 	ldr	r8, [r3]
    ed58:	e1a00008 	mov	r0, r8
    ed5c:	ebfff0e9 	bl	b108 <strlen>
    ed60:	e59d3004 	ldr	r3, [sp, #4]
    ed64:	e3530000 	cmp	r3, #0
    ed68:	e1a07000 	mov	r7, r0
    ed6c:	1a000095 	bne	efc8 <CString::FormatV(char const*, std::__va_list)+0x798>
    ed70:	e1500004 	cmp	r0, r4
    ed74:	2a00000c 	bcs	edac <CString::FormatV(char const*, std::__va_list)+0x57c>
    ed78:	e0444000 	sub	r4, r4, r0
    ed7c:	e1a0000b 	mov	r0, fp
    ed80:	e1a01004 	mov	r1, r4
    ed84:	ebfffd38 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ed88:	e2443001 	sub	r3, r4, #1
    ed8c:	e3a00020 	mov	r0, #32
    ed90:	e59b200c 	ldr	r2, [fp, #12]
    ed94:	e2433001 	sub	r3, r3, #1
    ed98:	e3730001 	cmn	r3, #1
    ed9c:	e2821001 	add	r1, r2, #1
    eda0:	e58b100c 	str	r1, [fp, #12]
    eda4:	e5c20000 	strb	r0, [r2]
    eda8:	1afffff8 	bne	ed90 <CString::FormatV(char const*, std::__va_list)+0x560>
    edac:	e1a01008 	mov	r1, r8
    edb0:	e1a0000b 	mov	r0, fp
    edb4:	e58d6000 	str	r6, [sp]
    edb8:	ebfffdbb 	bl	e4ac <CString::PutString(char const*)>
    edbc:	eaffff4e 	b	eafc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    edc0:	e3a01001 	mov	r1, #1
    edc4:	e1a0000b 	mov	r0, fp
    edc8:	ebfffd27 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    edcc:	e59b300c 	ldr	r3, [fp, #12]
    edd0:	e3a02025 	mov	r2, #37	; 0x25
    edd4:	e3a01001 	mov	r1, #1
    edd8:	e0830001 	add	r0, r3, r1
    eddc:	e58b000c 	str	r0, [fp, #12]
    ede0:	e5c32000 	strb	r2, [r3]
    ede4:	e1a0000b 	mov	r0, fp
    ede8:	e1d540d0 	ldrsb	r4, [r5]
    edec:	ebfffd1e 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    edf0:	e59b300c 	ldr	r3, [fp, #12]
    edf4:	e2832001 	add	r2, r3, #1
    edf8:	e58b200c 	str	r2, [fp, #12]
    edfc:	e5c34000 	strb	r4, [r3]
    ee00:	eaffff3d 	b	eafc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ee04:	e1d570d1 	ldrsb	r7, [r5, #1]
    ee08:	e3a01000 	mov	r1, #0
    ee0c:	e2855001 	add	r5, r5, #1
    ee10:	e2473030 	sub	r3, r7, #48	; 0x30
    ee14:	e6ef3073 	uxtb	r3, r3
    ee18:	e3530009 	cmp	r3, #9
    ee1c:	8afffebd 	bhi	e918 <CString::FormatV(char const*, std::__va_list)+0xe8>
    ee20:	e3a0200a 	mov	r2, #10
    ee24:	e0217192 	mla	r1, r2, r1, r7
    ee28:	e1f570d1 	ldrsb	r7, [r5, #1]!
    ee2c:	e2473030 	sub	r3, r7, #48	; 0x30
    ee30:	e2411030 	sub	r1, r1, #48	; 0x30
    ee34:	e6ef3073 	uxtb	r3, r3
    ee38:	e3530009 	cmp	r3, #9
    ee3c:	9afffff8 	bls	ee24 <CString::FormatV(char const*, std::__va_list)+0x5f4>
    ee40:	eafffeb4 	b	e918 <CString::FormatV(char const*, std::__va_list)+0xe8>
    ee44:	e3a01001 	mov	r1, #1
    ee48:	e1a0000b 	mov	r0, fp
    ee4c:	ebfffd06 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee50:	e59b300c 	ldr	r3, [fp, #12]
    ee54:	e2855002 	add	r5, r5, #2
    ee58:	e2832001 	add	r2, r3, #1
    ee5c:	e58b200c 	str	r2, [fp, #12]
    ee60:	e5c36000 	strb	r6, [r3]
    ee64:	eafffe82 	b	e874 <CString::FormatV(char const*, std::__va_list)+0x44>
    ee68:	e59d1008 	ldr	r1, [sp, #8]
    ee6c:	e1a0000b 	mov	r0, fp
    ee70:	ebfffd8d 	bl	e4ac <CString::PutString(char const*)>
    ee74:	e1560004 	cmp	r6, r4
    ee78:	2affff1f 	bcs	eafc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ee7c:	e0444006 	sub	r4, r4, r6
    ee80:	e1a0000b 	mov	r0, fp
    ee84:	e1a01004 	mov	r1, r4
    ee88:	ebfffcf7 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee8c:	e2443001 	sub	r3, r4, #1
    ee90:	e3a00020 	mov	r0, #32
    ee94:	e59b200c 	ldr	r2, [fp, #12]
    ee98:	e2433001 	sub	r3, r3, #1
    ee9c:	e3730001 	cmn	r3, #1
    eea0:	e2821001 	add	r1, r2, #1
    eea4:	e58b100c 	str	r1, [fp, #12]
    eea8:	e5c20000 	strb	r0, [r2]
    eeac:	1afffff8 	bne	ee94 <CString::FormatV(char const*, std::__va_list)+0x664>
    eeb0:	eaffff11 	b	eafc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    eeb4:	e1580004 	cmp	r8, r4
    eeb8:	2a00000c 	bcs	eef0 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    eebc:	e0448008 	sub	r8, r4, r8
    eec0:	e1a0000b 	mov	r0, fp
    eec4:	e1a01008 	mov	r1, r8
    eec8:	ebfffce7 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eecc:	e2483001 	sub	r3, r8, #1
    eed0:	e3a00020 	mov	r0, #32
    eed4:	e59b200c 	ldr	r2, [fp, #12]
    eed8:	e2433001 	sub	r3, r3, #1
    eedc:	e3730001 	cmn	r3, #1
    eee0:	e2821001 	add	r1, r2, #1
    eee4:	e58b100c 	str	r1, [fp, #12]
    eee8:	e5c20000 	strb	r0, [r2]
    eeec:	1afffff8 	bne	eed4 <CString::FormatV(char const*, std::__va_list)+0x6a4>
    eef0:	e59d3010 	ldr	r3, [sp, #16]
    eef4:	e3530000 	cmp	r3, #0
    eef8:	0afffefc 	beq	eaf0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    eefc:	e3a01001 	mov	r1, #1
    ef00:	e1a0000b 	mov	r0, fp
    ef04:	ebfffcd8 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ef08:	e59b300c 	ldr	r3, [fp, #12]
    ef0c:	e3a0202d 	mov	r2, #45	; 0x2d
    ef10:	e2831001 	add	r1, r3, #1
    ef14:	e58b100c 	str	r1, [fp, #12]
    ef18:	e5c32000 	strb	r2, [r3]
    ef1c:	eafffef3 	b	eaf0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    ef20:	e3a01001 	mov	r1, #1
    ef24:	e1a0000b 	mov	r0, fp
    ef28:	ebfffccf 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ef2c:	e59b300c 	ldr	r3, [fp, #12]
    ef30:	e3540001 	cmp	r4, #1
    ef34:	e2832001 	add	r2, r3, #1
    ef38:	e58b200c 	str	r2, [fp, #12]
    ef3c:	e5c37000 	strb	r7, [r3]
    ef40:	9a00000b 	bls	ef74 <CString::FormatV(char const*, std::__va_list)+0x744>
    ef44:	e2441001 	sub	r1, r4, #1
    ef48:	e1a0000b 	mov	r0, fp
    ef4c:	e2444002 	sub	r4, r4, #2
    ef50:	ebfffcc5 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ef54:	e3a01020 	mov	r1, #32
    ef58:	e59b300c 	ldr	r3, [fp, #12]
    ef5c:	e2444001 	sub	r4, r4, #1
    ef60:	e3740001 	cmn	r4, #1
    ef64:	e2832001 	add	r2, r3, #1
    ef68:	e58b200c 	str	r2, [fp, #12]
    ef6c:	e5c31000 	strb	r1, [r3]
    ef70:	1afffff8 	bne	ef58 <CString::FormatV(char const*, std::__va_list)+0x728>
    ef74:	e58d6000 	str	r6, [sp]
    ef78:	eafffedf 	b	eafc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ef7c:	e59d1008 	ldr	r1, [sp, #8]
    ef80:	e1a0000b 	mov	r0, fp
    ef84:	ebfffd48 	bl	e4ac <CString::PutString(char const*)>
    ef88:	e1560004 	cmp	r6, r4
    ef8c:	2afffeda 	bcs	eafc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ef90:	e0444006 	sub	r4, r4, r6
    ef94:	e1a0000b 	mov	r0, fp
    ef98:	e1a01004 	mov	r1, r4
    ef9c:	ebfffcb2 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    efa0:	e2443001 	sub	r3, r4, #1
    efa4:	e3a00020 	mov	r0, #32
    efa8:	e59b200c 	ldr	r2, [fp, #12]
    efac:	e2433001 	sub	r3, r3, #1
    efb0:	e3730001 	cmn	r3, #1
    efb4:	e2821001 	add	r1, r2, #1
    efb8:	e58b100c 	str	r1, [fp, #12]
    efbc:	e5c20000 	strb	r0, [r2]
    efc0:	1afffff8 	bne	efa8 <CString::FormatV(char const*, std::__va_list)+0x778>
    efc4:	eafffecc 	b	eafc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    efc8:	e1a01008 	mov	r1, r8
    efcc:	e1a0000b 	mov	r0, fp
    efd0:	ebfffd35 	bl	e4ac <CString::PutString(char const*)>
    efd4:	e1570004 	cmp	r7, r4
    efd8:	2affffe5 	bcs	ef74 <CString::FormatV(char const*, std::__va_list)+0x744>
    efdc:	e0444007 	sub	r4, r4, r7
    efe0:	e1a0000b 	mov	r0, fp
    efe4:	e1a01004 	mov	r1, r4
    efe8:	ebfffc9f 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    efec:	e2443001 	sub	r3, r4, #1
    eff0:	e3a00020 	mov	r0, #32
    eff4:	e59b200c 	ldr	r2, [fp, #12]
    eff8:	e2433001 	sub	r3, r3, #1
    effc:	e3730001 	cmn	r3, #1
    f000:	e2821001 	add	r1, r2, #1
    f004:	e58b100c 	str	r1, [fp, #12]
    f008:	e5c20000 	strb	r0, [r2]
    f00c:	1afffff8 	bne	eff4 <CString::FormatV(char const*, std::__va_list)+0x7c4>
    f010:	eaffffd7 	b	ef74 <CString::FormatV(char const*, std::__va_list)+0x744>
    f014:	e3a01001 	mov	r1, #1
    f018:	e1a0000b 	mov	r0, fp
    f01c:	ebfffc92 	bl	e26c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f020:	e59b300c 	ldr	r3, [fp, #12]
    f024:	e3a0202d 	mov	r2, #45	; 0x2d
    f028:	e2831001 	add	r1, r3, #1
    f02c:	e58b100c 	str	r1, [fp, #12]
    f030:	e5c32000 	strb	r2, [r3]
    f034:	eaffff10 	b	ec7c <CString::FormatV(char const*, std::__va_list)+0x44c>
    f038:	e1a08007 	mov	r8, r7
    f03c:	e3a0a001 	mov	sl, #1
    f040:	eafffeec 	b	ebf8 <CString::FormatV(char const*, std::__va_list)+0x3c8>
    f044:	e1a09006 	mov	r9, r6
    f048:	e3a0a001 	mov	sl, #1
    f04c:	eafffe6a 	b	e9fc <CString::FormatV(char const*, std::__va_list)+0x1cc>

0000f050 <CString::Format(char const*, ...)>:
    f050:	e92d000e 	push	{r1, r2, r3}
    f054:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f058:	e24dd008 	sub	sp, sp, #8
    f05c:	e28d2010 	add	r2, sp, #16
    f060:	e59d100c 	ldr	r1, [sp, #12]
    f064:	e58d2004 	str	r2, [sp, #4]
    f068:	ebfffdf0 	bl	e830 <CString::FormatV(char const*, std::__va_list)>
    f06c:	e28dd008 	add	sp, sp, #8
    f070:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    f074:	e28dd00c 	add	sp, sp, #12
    f078:	e12fff1e 	bx	lr
    f07c:	00000000 	andeq	r0, r0, r0

0000f080 <DelayLoop>:
    f080:	e2500001 	subs	r0, r0, #1
    f084:	8afffffd 	bhi	f080 <DelayLoop>
    f088:	e1a0f00e 	mov	pc, lr

0000f08c <CExceptionHandler::CExceptionHandler()>:
    f08c:	e92d4070 	push	{r4, r5, r6, lr}
    f090:	e3035fb8 	movw	r5, #16312	; 0x3fb8
    f094:	e3405001 	movt	r5, #1
    f098:	e1a04000 	mov	r4, r0
    f09c:	e5953000 	ldr	r3, [r5]
    f0a0:	e3530000 	cmp	r3, #0
    f0a4:	0a000005 	beq	f0c0 <CExceptionHandler::CExceptionHandler()+0x34>
    f0a8:	e30315a0 	movw	r1, #13728	; 0x35a0
    f0ac:	e3010d48 	movw	r0, #7496	; 0x1d48
    f0b0:	e3401001 	movt	r1, #1
    f0b4:	e3400001 	movt	r0, #1
    f0b8:	e3a0202e 	mov	r2, #46	; 0x2e
    f0bc:	ebfff777 	bl	cea0 <assertion_failed>
    f0c0:	e59f1048 	ldr	r1, [pc, #72]	; f110 <CExceptionHandler::CExceptionHandler()+0x84>
    f0c4:	e3a00000 	mov	r0, #0
    f0c8:	e59f2044 	ldr	r2, [pc, #68]	; f114 <CExceptionHandler::CExceptionHandler()+0x88>
    f0cc:	e59f3044 	ldr	r3, [pc, #68]	; f118 <CExceptionHandler::CExceptionHandler()+0x8c>
    f0d0:	e1a01141 	asr	r1, r1, #2
    f0d4:	e5854000 	str	r4, [r5]
    f0d8:	e1a02142 	asr	r2, r2, #2
    f0dc:	e2411002 	sub	r1, r1, #2
    f0e0:	e1a03143 	asr	r3, r3, #2
    f0e4:	e2422002 	sub	r2, r2, #2
    f0e8:	e2433002 	sub	r3, r3, #2
    f0ec:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    f0f0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    f0f4:	e5801004 	str	r1, [r0, #4]
    f0f8:	e580200c 	str	r2, [r0, #12]
    f0fc:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    f100:	e5803010 	str	r3, [r0, #16]
    f104:	ebffecb9 	bl	a3f0 <SyncDataAndInstructionCache>
    f108:	e1a00004 	mov	r0, r4
    f10c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f110:	0000f2e0 	.word	0x0000f2e0
    f114:	0000f318 	.word	0x0000f318
    f118:	0000f354 	.word	0x0000f354

0000f11c <CExceptionHandler::~CExceptionHandler()>:
    f11c:	e3033fb8 	movw	r3, #16312	; 0x3fb8
    f120:	e3403001 	movt	r3, #1
    f124:	e3a02000 	mov	r2, #0
    f128:	e5832000 	str	r2, [r3]
    f12c:	e12fff1e 	bx	lr

0000f130 <CExceptionHandler::Throw(unsigned int)>:
    f130:	e92d4010 	push	{r4, lr}
    f134:	e24dd008 	sub	sp, sp, #8
    f138:	e1a04001 	mov	r4, r1
    f13c:	ebfff8dc 	bl	d4b4 <CLogger::Get()>
    f140:	e3032e84 	movw	r2, #16004	; 0x3e84
    f144:	e3402001 	movt	r2, #1
    f148:	e30335b8 	movw	r3, #13752	; 0x35b8
    f14c:	e3031598 	movw	r1, #13720	; 0x3598
    f150:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    f154:	e3403001 	movt	r3, #1
    f158:	e3401001 	movt	r1, #1
    f15c:	e3a02000 	mov	r2, #0
    f160:	e58dc000 	str	ip, [sp]
    f164:	ebfff9ae 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f168:	e28dd008 	add	sp, sp, #8
    f16c:	e8bd8010 	pop	{r4, pc}

0000f170 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    f170:	e3510002 	cmp	r1, #2
    f174:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    f178:	e1a05001 	mov	r5, r1
    f17c:	e24dd024 	sub	sp, sp, #36	; 0x24
    f180:	e1a04002 	mov	r4, r2
    f184:	0a000027 	beq	f228 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb8>
    f188:	e3510003 	cmp	r1, #3
    f18c:	0a000022 	beq	f21c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
    f190:	e3a07000 	mov	r7, #0
    f194:	e1a08007 	mov	r8, r7
    f198:	e3540000 	cmp	r4, #0
    f19c:	0a000024 	beq	f234 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    f1a0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    f1a4:	e3031598 	movw	r1, #13720	; 0x3598
    f1a8:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    f1ac:	e3401001 	movt	r1, #1
    f1b0:	e203301f 	and	r3, r3, #31
    f1b4:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    f1b8:	e3530012 	cmp	r3, #18
    f1bc:	08940240 	ldmeq	r4, {r6, r9}
    f1c0:	e1a00006 	mov	r0, r6
    f1c4:	ebfff7c8 	bl	d0ec <debug_stacktrace(unsigned int const*, char const*)>
    f1c8:	ebfff8b9 	bl	d4b4 <CLogger::Get()>
    f1cc:	e3033e84 	movw	r3, #16004	; 0x3e84
    f1d0:	e3403001 	movt	r3, #1
    f1d4:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    f1d8:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    f1dc:	e3a02000 	mov	r2, #0
    f1e0:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    f1e4:	e3031598 	movw	r1, #13720	; 0x3598
    f1e8:	e58d9014 	str	r9, [sp, #20]
    f1ec:	e3401001 	movt	r1, #1
    f1f0:	e58d6010 	str	r6, [sp, #16]
    f1f4:	e30335d4 	movw	r3, #13780	; 0x35d4
    f1f8:	e58d700c 	str	r7, [sp, #12]
    f1fc:	e3403001 	movt	r3, #1
    f200:	e58d8008 	str	r8, [sp, #8]
    f204:	e58d4000 	str	r4, [sp]
    f208:	e58de018 	str	lr, [sp, #24]
    f20c:	e58dc004 	str	ip, [sp, #4]
    f210:	ebfff983 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f214:	e28dd024 	add	sp, sp, #36	; 0x24
    f218:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    f21c:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
    f220:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
    f224:	eaffffdb 	b	f198 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    f228:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
    f22c:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
    f230:	eaffffd8 	b	f198 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    f234:	e30315a0 	movw	r1, #13728	; 0x35a0
    f238:	e30305c8 	movw	r0, #13768	; 0x35c8
    f23c:	e3401001 	movt	r1, #1
    f240:	e3400001 	movt	r0, #1
    f244:	e3a02067 	mov	r2, #103	; 0x67
    f248:	ebfff714 	bl	cea0 <assertion_failed>
    f24c:	eaffffd3 	b	f1a0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>

0000f250 <CExceptionHandler::Get()>:
    f250:	e92d4010 	push	{r4, lr}
    f254:	e3034fb8 	movw	r4, #16312	; 0x3fb8
    f258:	e3404001 	movt	r4, #1
    f25c:	e5940000 	ldr	r0, [r4]
    f260:	e3500000 	cmp	r0, #0
    f264:	18bd8010 	popne	{r4, pc}
    f268:	e3a0207e 	mov	r2, #126	; 0x7e
    f26c:	e30315a0 	movw	r1, #13728	; 0x35a0
    f270:	e3010e74 	movw	r0, #7796	; 0x1e74
    f274:	e3401001 	movt	r1, #1
    f278:	e3400001 	movt	r0, #1
    f27c:	ebfff707 	bl	cea0 <assertion_failed>
    f280:	e5940000 	ldr	r0, [r4]
    f284:	e8bd8010 	pop	{r4, pc}

0000f288 <ExceptionHandler>:
    f288:	e92d4070 	push	{r4, r5, r6, lr}
    f28c:	e3034fb8 	movw	r4, #16312	; 0x3fb8
    f290:	e3404001 	movt	r4, #1
    f294:	e1a05000 	mov	r5, r0
    f298:	e1a06001 	mov	r6, r1
    f29c:	e5940000 	ldr	r0, [r4]
    f2a0:	e3500000 	cmp	r0, #0
    f2a4:	0a000003 	beq	f2b8 <ExceptionHandler+0x30>
    f2a8:	e1a02006 	mov	r2, r6
    f2ac:	e1a01005 	mov	r1, r5
    f2b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    f2b4:	eaffffad 	b	f170 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
    f2b8:	e3a0207e 	mov	r2, #126	; 0x7e
    f2bc:	e30315a0 	movw	r1, #13728	; 0x35a0
    f2c0:	e3010e74 	movw	r0, #7796	; 0x1e74
    f2c4:	e3401001 	movt	r1, #1
    f2c8:	e3400001 	movt	r0, #1
    f2cc:	ebfff6f3 	bl	cea0 <assertion_failed>
    f2d0:	e5940000 	ldr	r0, [r4]
    f2d4:	e1a02006 	mov	r2, r6
    f2d8:	e1a01005 	mov	r1, r5
    f2dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    f2e0:	eaffffa2 	b	f170 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000f2e4 <UndefinedInstructionStub>:
    f2e4:	e24ee004 	sub	lr, lr, #4
    f2e8:	e92d4000 	stmfd	sp!, {lr}
    f2ec:	e14fe000 	mrs	lr, SPSR
    f2f0:	e92d4000 	stmfd	sp!, {lr}
    f2f4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    f2f8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f2fc:	e1a0100d 	mov	r1, sp
    f300:	f1020012 	cps	#18
    f304:	e1a0200d 	mov	r2, sp
    f308:	e1a0300e 	mov	r3, lr
    f30c:	f102001f 	cps	#31
    f310:	e1a0d001 	mov	sp, r1
    f314:	e92d000c 	push	{r2, r3}
    f318:	e1a0100d 	mov	r1, sp
    f31c:	e3a00001 	mov	r0, #1
    f320:	eaffffd8 	b	f288 <ExceptionHandler>

0000f324 <PrefetchAbortStub>:
    f324:	e24ee004 	sub	lr, lr, #4
    f328:	e92d4000 	stmfd	sp!, {lr}
    f32c:	e14fe000 	mrs	lr, SPSR
    f330:	e92d4000 	stmfd	sp!, {lr}
    f334:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    f338:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f33c:	e1a0100d 	mov	r1, sp
    f340:	f1020012 	cps	#18
    f344:	e1a0200d 	mov	r2, sp
    f348:	e1a0300e 	mov	r3, lr
    f34c:	f102001f 	cps	#31
    f350:	e1a0d001 	mov	sp, r1
    f354:	e92d000c 	push	{r2, r3}
    f358:	e1a0100d 	mov	r1, sp
    f35c:	e3a00002 	mov	r0, #2
    f360:	eaffffc8 	b	f288 <ExceptionHandler>

0000f364 <DataAbortStub>:
    f364:	e24ee008 	sub	lr, lr, #8
    f368:	e92d4000 	stmfd	sp!, {lr}
    f36c:	e14fe000 	mrs	lr, SPSR
    f370:	e92d4000 	stmfd	sp!, {lr}
    f374:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    f378:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f37c:	e1a0100d 	mov	r1, sp
    f380:	f1020012 	cps	#18
    f384:	e1a0200d 	mov	r2, sp
    f388:	e1a0300e 	mov	r3, lr
    f38c:	f102001f 	cps	#31
    f390:	e1a0d001 	mov	sp, r1
    f394:	e92d000c 	push	{r2, r3}
    f398:	e1a0100d 	mov	r1, sp
    f39c:	e3a00003 	mov	r0, #3
    f3a0:	eaffffb8 	b	f288 <ExceptionHandler>

0000f3a4 <IRQStub>:
    f3a4:	e24ee004 	sub	lr, lr, #4
    f3a8:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f3ac:	eb00015e 	bl	f92c <InterruptHandler>
    f3b0:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000f3b4 <FIQStub>:
    f3b4:	e24ee004 	sub	lr, lr, #4
    f3b8:	e92d400f 	push	{r0, r1, r2, r3, lr}
    f3bc:	e59f2024 	ldr	r2, [pc, #36]	; f3e8 <FIQStub+0x34>
    f3c0:	e5921000 	ldr	r1, [r2]
    f3c4:	e3510000 	cmp	r1, #0
    f3c8:	0a000002 	beq	f3d8 <FIQStub+0x24>
    f3cc:	e5920004 	ldr	r0, [r2, #4]
    f3d0:	e12fff31 	blx	r1
    f3d4:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    f3d8:	e59f100c 	ldr	r1, [pc, #12]	; f3ec <FIQStub+0x38>
    f3dc:	e3a00000 	mov	r0, #0
    f3e0:	e5810000 	str	r0, [r1]
    f3e4:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    f3e8:	00013e94 	.word	0x00013e94
    f3ec:	3f00b20c 	.word	0x3f00b20c

0000f3f0 <CInterruptSystem::CInterruptSystem()>:
    f3f0:	e2802f47 	add	r2, r0, #284	; 0x11c
    f3f4:	e1a0c000 	mov	ip, r0
    f3f8:	e2403004 	sub	r3, r0, #4
    f3fc:	e3a01000 	mov	r1, #0
    f400:	e1a00002 	mov	r0, r2
    f404:	e5a31004 	str	r1, [r3, #4]!
    f408:	e1530000 	cmp	r3, r0
    f40c:	e5a21004 	str	r1, [r2, #4]!
    f410:	1afffffb 	bne	f404 <CInterruptSystem::CInterruptSystem()+0x14>
    f414:	e3033fbc 	movw	r3, #16316	; 0x3fbc
    f418:	e3403001 	movt	r3, #1
    f41c:	e1a0000c 	mov	r0, ip
    f420:	e583c000 	str	ip, [r3]
    f424:	e12fff1e 	bx	lr

0000f428 <CInterruptSystem::~CInterruptSystem()>:
    f428:	e3033fbc 	movw	r3, #16316	; 0x3fbc
    f42c:	e3403001 	movt	r3, #1
    f430:	e3a02000 	mov	r2, #0
    f434:	e5832000 	str	r2, [r3]
    f438:	e12fff1e 	bx	lr

0000f43c <CInterruptSystem::Initialize()>:
    f43c:	e59f2054 	ldr	r2, [pc, #84]	; f498 <CInterruptSystem::Initialize()+0x5c>
    f440:	e59f3054 	ldr	r3, [pc, #84]	; f49c <CInterruptSystem::Initialize()+0x60>
    f444:	e92d4010 	push	{r4, lr}
    f448:	e1a02142 	asr	r2, r2, #2
    f44c:	e1a03143 	asr	r3, r3, #2
    f450:	e3a04000 	mov	r4, #0
    f454:	e2422002 	sub	r2, r2, #2
    f458:	e2433002 	sub	r3, r3, #2
    f45c:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    f460:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    f464:	e5842018 	str	r2, [r4, #24]
    f468:	e584301c 	str	r3, [r4, #28]
    f46c:	ebffebdf 	bl	a3f0 <SyncDataAndInstructionCache>
    f470:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f474:	e3433f00 	movt	r3, #16128	; 0x3f00
    f478:	e3e02000 	mvn	r2, #0
    f47c:	e583420c 	str	r4, [r3, #524]	; 0x20c
    f480:	e583221c 	str	r2, [r3, #540]	; 0x21c
    f484:	e5832220 	str	r2, [r3, #544]	; 0x220
    f488:	e5832224 	str	r2, [r3, #548]	; 0x224
    f48c:	f1080080 	cpsie	i
    f490:	e3a00001 	mov	r0, #1
    f494:	e8bd8010 	pop	{r4, pc}
    f498:	0000f38c 	.word	0x0000f38c
    f49c:	0000f398 	.word	0x0000f398

0000f4a0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    f4a0:	e3510047 	cmp	r1, #71	; 0x47
    f4a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f4a8:	e1a04001 	mov	r4, r1
    f4ac:	e1a06002 	mov	r6, r2
    f4b0:	e1a07003 	mov	r7, r3
    f4b4:	8a00001a 	bhi	f524 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x84>
    f4b8:	e3560000 	cmp	r6, #0
    f4bc:	0a00001f 	beq	f540 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
    f4c0:	e3035e94 	movw	r5, #16020	; 0x3e94
    f4c4:	e3405001 	movt	r5, #1
    f4c8:	e5953000 	ldr	r3, [r5]
    f4cc:	e3530000 	cmp	r3, #0
    f4d0:	0a000005 	beq	f4ec <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>
    f4d4:	e303165c 	movw	r1, #13916	; 0x365c
    f4d8:	e3030680 	movw	r0, #13952	; 0x3680
    f4dc:	e3401001 	movt	r1, #1
    f4e0:	e3400001 	movt	r0, #1
    f4e4:	e3a0207a 	mov	r2, #122	; 0x7a
    f4e8:	ebfff66c 	bl	cea0 <assertion_failed>
    f4ec:	e3540047 	cmp	r4, #71	; 0x47
    f4f0:	e88500c0 	stm	r5, {r6, r7}
    f4f4:	9a000005 	bls	f510 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x70>
    f4f8:	e303165c 	movw	r1, #13916	; 0x365c
    f4fc:	e303066c 	movw	r0, #13932	; 0x366c
    f500:	e3401001 	movt	r1, #1
    f504:	e3400001 	movt	r0, #1
    f508:	e3a020a6 	mov	r2, #166	; 0xa6
    f50c:	ebfff663 	bl	cea0 <assertion_failed>
    f510:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f514:	e3433f00 	movt	r3, #16128	; 0x3f00
    f518:	e3844080 	orr	r4, r4, #128	; 0x80
    f51c:	e583420c 	str	r4, [r3, #524]	; 0x20c
    f520:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f524:	e303165c 	movw	r1, #13916	; 0x365c
    f528:	e303066c 	movw	r0, #13932	; 0x366c
    f52c:	e3401001 	movt	r1, #1
    f530:	e3400001 	movt	r0, #1
    f534:	e3a02078 	mov	r2, #120	; 0x78
    f538:	ebfff658 	bl	cea0 <assertion_failed>
    f53c:	eaffffdd 	b	f4b8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
    f540:	e303165c 	movw	r1, #13916	; 0x365c
    f544:	e30306a0 	movw	r0, #13984	; 0x36a0
    f548:	e3401001 	movt	r1, #1
    f54c:	e3400001 	movt	r0, #1
    f550:	e3a02079 	mov	r2, #121	; 0x79
    f554:	ebfff651 	bl	cea0 <assertion_failed>
    f558:	eaffffd8 	b	f4c0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>

0000f55c <CInterruptSystem::DisconnectFIQ()>:
    f55c:	e92d4010 	push	{r4, lr}
    f560:	e3034e94 	movw	r4, #16020	; 0x3e94
    f564:	e3404001 	movt	r4, #1
    f568:	e5943000 	ldr	r3, [r4]
    f56c:	e3530000 	cmp	r3, #0
    f570:	0a000006 	beq	f590 <CInterruptSystem::DisconnectFIQ()+0x34>
    f574:	e3a02a0b 	mov	r2, #45056	; 0xb000
    f578:	e3432f00 	movt	r2, #16128	; 0x3f00
    f57c:	e3a03000 	mov	r3, #0
    f580:	e582320c 	str	r3, [r2, #524]	; 0x20c
    f584:	e5843000 	str	r3, [r4]
    f588:	e5843004 	str	r3, [r4, #4]
    f58c:	e8bd8010 	pop	{r4, pc}
    f590:	e303165c 	movw	r1, #13916	; 0x365c
    f594:	e3030698 	movw	r0, #13976	; 0x3698
    f598:	e3401001 	movt	r1, #1
    f59c:	e3400001 	movt	r0, #1
    f5a0:	e3a02084 	mov	r2, #132	; 0x84
    f5a4:	ebfff63d 	bl	cea0 <assertion_failed>
    f5a8:	eafffff1 	b	f574 <CInterruptSystem::DisconnectFIQ()+0x18>

0000f5ac <CInterruptSystem::EnableIRQ(unsigned int)>:
    f5ac:	e3500047 	cmp	r0, #71	; 0x47
    f5b0:	e92d4010 	push	{r4, lr}
    f5b4:	e1a04000 	mov	r4, r0
    f5b8:	8a00000e 	bhi	f5f8 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
    f5bc:	e350001f 	cmp	r0, #31
    f5c0:	930b2210 	movwls	r2, #45584	; 0xb210
    f5c4:	93432f00 	movtls	r2, #16128	; 0x3f00
    f5c8:	8a000004 	bhi	f5e0 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
    f5cc:	e204401f 	and	r4, r4, #31
    f5d0:	e3a03001 	mov	r3, #1
    f5d4:	e1a04413 	lsl	r4, r3, r4
    f5d8:	e5824000 	str	r4, [r2]
    f5dc:	e8bd8010 	pop	{r4, pc}
    f5e0:	e350003f 	cmp	r0, #63	; 0x3f
    f5e4:	930b2214 	movwls	r2, #45588	; 0xb214
    f5e8:	93432f00 	movtls	r2, #16128	; 0x3f00
    f5ec:	830b2218 	movwhi	r2, #45592	; 0xb218
    f5f0:	83432f00 	movthi	r2, #16128	; 0x3f00
    f5f4:	eafffff4 	b	f5cc <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
    f5f8:	e3a02090 	mov	r2, #144	; 0x90
    f5fc:	e303165c 	movw	r1, #13916	; 0x365c
    f600:	e30306b0 	movw	r0, #14000	; 0x36b0
    f604:	e3401001 	movt	r1, #1
    f608:	e3400001 	movt	r0, #1
    f60c:	ebfff623 	bl	cea0 <assertion_failed>
    f610:	e30b2218 	movw	r2, #45592	; 0xb218
    f614:	e3432f00 	movt	r2, #16128	; 0x3f00
    f618:	eaffffeb 	b	f5cc <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

0000f61c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    f61c:	e3510047 	cmp	r1, #71	; 0x47
    f620:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f624:	e1a04001 	mov	r4, r1
    f628:	e1a05000 	mov	r5, r0
    f62c:	e1a08002 	mov	r8, r2
    f630:	e1a07003 	mov	r7, r3
    f634:	8a00000e 	bhi	f674 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
    f638:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    f63c:	e0856104 	add	r6, r5, r4, lsl #2
    f640:	e3530000 	cmp	r3, #0
    f644:	0a000005 	beq	f660 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
    f648:	e303165c 	movw	r1, #13916	; 0x365c
    f64c:	e30306c4 	movw	r0, #14020	; 0x36c4
    f650:	e3401001 	movt	r1, #1
    f654:	e3400001 	movt	r0, #1
    f658:	e3a02060 	mov	r2, #96	; 0x60
    f65c:	ebfff60f 	bl	cea0 <assertion_failed>
    f660:	e7858104 	str	r8, [r5, r4, lsl #2]
    f664:	e1a00004 	mov	r0, r4
    f668:	e5867120 	str	r7, [r6, #288]	; 0x120
    f66c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    f670:	eaffffcd 	b	f5ac <CInterruptSystem::EnableIRQ(unsigned int)>
    f674:	e303165c 	movw	r1, #13916	; 0x365c
    f678:	e30306b0 	movw	r0, #14000	; 0x36b0
    f67c:	e3401001 	movt	r1, #1
    f680:	e3400001 	movt	r0, #1
    f684:	e3a0205f 	mov	r2, #95	; 0x5f
    f688:	ebfff604 	bl	cea0 <assertion_failed>
    f68c:	eaffffe9 	b	f638 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0000f690 <CInterruptSystem::DisableIRQ(unsigned int)>:
    f690:	e3500047 	cmp	r0, #71	; 0x47
    f694:	e92d4010 	push	{r4, lr}
    f698:	e1a04000 	mov	r4, r0
    f69c:	8a00000e 	bhi	f6dc <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
    f6a0:	e350001f 	cmp	r0, #31
    f6a4:	930b221c 	movwls	r2, #45596	; 0xb21c
    f6a8:	93432f00 	movtls	r2, #16128	; 0x3f00
    f6ac:	8a000004 	bhi	f6c4 <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
    f6b0:	e204401f 	and	r4, r4, #31
    f6b4:	e3a03001 	mov	r3, #1
    f6b8:	e1a04413 	lsl	r4, r3, r4
    f6bc:	e5824000 	str	r4, [r2]
    f6c0:	e8bd8010 	pop	{r4, pc}
    f6c4:	e350003f 	cmp	r0, #63	; 0x3f
    f6c8:	930b2220 	movwls	r2, #45600	; 0xb220
    f6cc:	93432f00 	movtls	r2, #16128	; 0x3f00
    f6d0:	830b2224 	movwhi	r2, #45604	; 0xb224
    f6d4:	83432f00 	movthi	r2, #16128	; 0x3f00
    f6d8:	eafffff4 	b	f6b0 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
    f6dc:	e3a0209b 	mov	r2, #155	; 0x9b
    f6e0:	e303165c 	movw	r1, #13916	; 0x365c
    f6e4:	e30306b0 	movw	r0, #14000	; 0x36b0
    f6e8:	e3401001 	movt	r1, #1
    f6ec:	e3400001 	movt	r0, #1
    f6f0:	ebfff5ea 	bl	cea0 <assertion_failed>
    f6f4:	e30b2224 	movw	r2, #45604	; 0xb224
    f6f8:	e3432f00 	movt	r2, #16128	; 0x3f00
    f6fc:	eaffffeb 	b	f6b0 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

0000f700 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    f700:	e3510047 	cmp	r1, #71	; 0x47
    f704:	e92d4070 	push	{r4, r5, r6, lr}
    f708:	e1a04001 	mov	r4, r1
    f70c:	e1a05000 	mov	r5, r0
    f710:	8a000009 	bhi	f73c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    f714:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    f718:	e0856104 	add	r6, r5, r4, lsl #2
    f71c:	e3530000 	cmp	r3, #0
    f720:	0a00000f 	beq	f764 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    f724:	e1a00004 	mov	r0, r4
    f728:	ebffffd8 	bl	f690 <CInterruptSystem::DisableIRQ(unsigned int)>
    f72c:	e3a03000 	mov	r3, #0
    f730:	e7853104 	str	r3, [r5, r4, lsl #2]
    f734:	e5863120 	str	r3, [r6, #288]	; 0x120
    f738:	e8bd8070 	pop	{r4, r5, r6, pc}
    f73c:	e303165c 	movw	r1, #13916	; 0x365c
    f740:	e30306b0 	movw	r0, #14000	; 0x36b0
    f744:	e3401001 	movt	r1, #1
    f748:	e3400001 	movt	r0, #1
    f74c:	e3a0206a 	mov	r2, #106	; 0x6a
    f750:	e0856104 	add	r6, r5, r4, lsl #2
    f754:	ebfff5d1 	bl	cea0 <assertion_failed>
    f758:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    f75c:	e3530000 	cmp	r3, #0
    f760:	1affffef 	bne	f724 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    f764:	e303165c 	movw	r1, #13916	; 0x365c
    f768:	e30306e0 	movw	r0, #14048	; 0x36e0
    f76c:	e3401001 	movt	r1, #1
    f770:	e3400001 	movt	r0, #1
    f774:	e3a0206b 	mov	r2, #107	; 0x6b
    f778:	ebfff5c8 	bl	cea0 <assertion_failed>
    f77c:	eaffffe8 	b	f724 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0000f780 <CInterruptSystem::EnableFIQ(unsigned int)>:
    f780:	e3500047 	cmp	r0, #71	; 0x47
    f784:	e92d4010 	push	{r4, lr}
    f788:	e1a04000 	mov	r4, r0
    f78c:	9a000005 	bls	f7a8 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    f790:	e303165c 	movw	r1, #13916	; 0x365c
    f794:	e303066c 	movw	r0, #13932	; 0x366c
    f798:	e3401001 	movt	r1, #1
    f79c:	e3400001 	movt	r0, #1
    f7a0:	e3a020a6 	mov	r2, #166	; 0xa6
    f7a4:	ebfff5bd 	bl	cea0 <assertion_failed>
    f7a8:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f7ac:	e3433f00 	movt	r3, #16128	; 0x3f00
    f7b0:	e3844080 	orr	r4, r4, #128	; 0x80
    f7b4:	e583420c 	str	r4, [r3, #524]	; 0x20c
    f7b8:	e8bd8010 	pop	{r4, pc}

0000f7bc <CInterruptSystem::DisableFIQ()>:
    f7bc:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f7c0:	e3433f00 	movt	r3, #16128	; 0x3f00
    f7c4:	e3a02000 	mov	r2, #0
    f7c8:	e583220c 	str	r2, [r3, #524]	; 0x20c
    f7cc:	e12fff1e 	bx	lr

0000f7d0 <CInterruptSystem::Get()>:
    f7d0:	e92d4010 	push	{r4, lr}
    f7d4:	e3034fbc 	movw	r4, #16316	; 0x3fbc
    f7d8:	e3404001 	movt	r4, #1
    f7dc:	e5940000 	ldr	r0, [r4]
    f7e0:	e3500000 	cmp	r0, #0
    f7e4:	18bd8010 	popne	{r4, pc}
    f7e8:	e3a020b8 	mov	r2, #184	; 0xb8
    f7ec:	e303165c 	movw	r1, #13916	; 0x365c
    f7f0:	e3010e74 	movw	r0, #7796	; 0x1e74
    f7f4:	e3401001 	movt	r1, #1
    f7f8:	e3400001 	movt	r0, #1
    f7fc:	ebfff5a7 	bl	cea0 <assertion_failed>
    f800:	e5940000 	ldr	r0, [r4]
    f804:	e8bd8010 	pop	{r4, pc}

0000f808 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    f808:	e3510047 	cmp	r1, #71	; 0x47
    f80c:	e92d4070 	push	{r4, r5, r6, lr}
    f810:	e1a06001 	mov	r6, r1
    f814:	e1a05000 	mov	r5, r0
    f818:	8a000007 	bhi	f83c <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    f81c:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    f820:	e0855106 	add	r5, r5, r6, lsl #2
    f824:	e3540000 	cmp	r4, #0
    f828:	0a00000d 	beq	f864 <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
    f82c:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    f830:	e12fff34 	blx	r4
    f834:	e3a00001 	mov	r0, #1
    f838:	e8bd8070 	pop	{r4, r5, r6, pc}
    f83c:	e303165c 	movw	r1, #13916	; 0x365c
    f840:	e30306b0 	movw	r0, #14000	; 0x36b0
    f844:	e3401001 	movt	r1, #1
    f848:	e3400001 	movt	r0, #1
    f84c:	e3a020be 	mov	r2, #190	; 0xbe
    f850:	ebfff592 	bl	cea0 <assertion_failed>
    f854:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    f858:	e0855106 	add	r5, r5, r6, lsl #2
    f85c:	e3540000 	cmp	r4, #0
    f860:	1afffff1 	bne	f82c <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    f864:	e1a00006 	mov	r0, r6
    f868:	ebffff88 	bl	f690 <CInterruptSystem::DisableIRQ(unsigned int)>
    f86c:	e1a00004 	mov	r0, r4
    f870:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f874 <CInterruptSystem::InterruptHandler()>:
    f874:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f878:	e3036fbc 	movw	r6, #16316	; 0x3fbc
    f87c:	e3406001 	movt	r6, #1
    f880:	e24dd010 	sub	sp, sp, #16
    f884:	e5963000 	ldr	r3, [r6]
    f888:	e3530000 	cmp	r3, #0
    f88c:	0a00001f 	beq	f910 <CInterruptSystem::InterruptHandler()+0x9c>
    f890:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f894:	e3433f00 	movt	r3, #16128	; 0x3f00
    f898:	e28d8008 	add	r8, sp, #8
    f89c:	e3a07000 	mov	r7, #0
    f8a0:	e5934204 	ldr	r4, [r3, #516]	; 0x204
    f8a4:	e58d4004 	str	r4, [sp, #4]
    f8a8:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    f8ac:	e58d2008 	str	r2, [sp, #8]
    f8b0:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    f8b4:	e6ef3073 	uxtb	r3, r3
    f8b8:	e58d300c 	str	r3, [sp, #12]
    f8bc:	e3540000 	cmp	r4, #0
    f8c0:	0a00000d 	beq	f8fc <CInterruptSystem::InterruptHandler()+0x88>
    f8c4:	e1a05007 	mov	r5, r7
    f8c8:	ea000002 	b	f8d8 <CInterruptSystem::InterruptHandler()+0x64>
    f8cc:	e1b040a4 	lsrs	r4, r4, #1
    f8d0:	e2855001 	add	r5, r5, #1
    f8d4:	0a000008 	beq	f8fc <CInterruptSystem::InterruptHandler()+0x88>
    f8d8:	e3140001 	tst	r4, #1
    f8dc:	0afffffa 	beq	f8cc <CInterruptSystem::InterruptHandler()+0x58>
    f8e0:	e1a01005 	mov	r1, r5
    f8e4:	e5960000 	ldr	r0, [r6]
    f8e8:	ebffffc6 	bl	f808 <CInterruptSystem::CallIRQHandler(unsigned int)>
    f8ec:	e3500000 	cmp	r0, #0
    f8f0:	0afffff5 	beq	f8cc <CInterruptSystem::InterruptHandler()+0x58>
    f8f4:	e28dd010 	add	sp, sp, #16
    f8f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f8fc:	e2877020 	add	r7, r7, #32
    f900:	e3570060 	cmp	r7, #96	; 0x60
    f904:	0afffffa 	beq	f8f4 <CInterruptSystem::InterruptHandler()+0x80>
    f908:	e4984004 	ldr	r4, [r8], #4
    f90c:	eaffffea 	b	f8bc <CInterruptSystem::InterruptHandler()+0x48>
    f910:	e303165c 	movw	r1, #13916	; 0x365c
    f914:	e3010e74 	movw	r0, #7796	; 0x1e74
    f918:	e3401001 	movt	r1, #1
    f91c:	e3400001 	movt	r0, #1
    f920:	e3a020d1 	mov	r2, #209	; 0xd1
    f924:	ebfff55d 	bl	cea0 <assertion_failed>
    f928:	eaffffd8 	b	f890 <CInterruptSystem::InterruptHandler()+0x1c>

0000f92c <InterruptHandler>:
    f92c:	eaffffd0 	b	f874 <CInterruptSystem::InterruptHandler()>

0000f930 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    f930:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f934:	e280c0dc 	add	ip, r0, #220	; 0xdc
    f938:	e3a0e000 	mov	lr, #0
    f93c:	e1a03000 	mov	r3, r0
    f940:	e1a0200e 	mov	r2, lr
    f944:	e5801000 	str	r1, [r0]
    f948:	e5a3e004 	str	lr, [r3, #4]!
    f94c:	e5a32004 	str	r2, [r3, #4]!
    f950:	e153000c 	cmp	r3, ip
    f954:	1afffffc 	bne	f94c <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    f958:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000f95c <CGPIOManager::~CGPIOManager()>:
    f95c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f960:	e30366fc 	movw	r6, #14076	; 0x36fc
    f964:	e303570c 	movw	r5, #14092	; 0x370c
    f968:	e2804004 	add	r4, r0, #4
    f96c:	e28070dc 	add	r7, r0, #220	; 0xdc
    f970:	e3406001 	movt	r6, #1
    f974:	e3405001 	movt	r5, #1
    f978:	e1a08000 	mov	r8, r0
    f97c:	e5b43004 	ldr	r3, [r4, #4]!
    f980:	e3a0202c 	mov	r2, #44	; 0x2c
    f984:	e1a01006 	mov	r1, r6
    f988:	e1a00005 	mov	r0, r5
    f98c:	e3530000 	cmp	r3, #0
    f990:	0a000000 	beq	f998 <CGPIOManager::~CGPIOManager()+0x3c>
    f994:	ebfff541 	bl	cea0 <assertion_failed>
    f998:	e1540007 	cmp	r4, r7
    f99c:	1afffff6 	bne	f97c <CGPIOManager::~CGPIOManager()+0x20>
    f9a0:	e5983004 	ldr	r3, [r8, #4]
    f9a4:	e3530000 	cmp	r3, #0
    f9a8:	0a000004 	beq	f9c0 <CGPIOManager::~CGPIOManager()+0x64>
    f9ac:	e5980000 	ldr	r0, [r8]
    f9b0:	e3500000 	cmp	r0, #0
    f9b4:	0a000003 	beq	f9c8 <CGPIOManager::~CGPIOManager()+0x6c>
    f9b8:	e3a01034 	mov	r1, #52	; 0x34
    f9bc:	ebffff4f 	bl	f700 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    f9c0:	e1a00008 	mov	r0, r8
    f9c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f9c8:	e30316fc 	movw	r1, #14076	; 0x36fc
    f9cc:	e3030720 	movw	r0, #14112	; 0x3720
    f9d0:	e3401001 	movt	r1, #1
    f9d4:	e3400001 	movt	r0, #1
    f9d8:	e3a02032 	mov	r2, #50	; 0x32
    f9dc:	ebfff52f 	bl	cea0 <assertion_failed>
    f9e0:	e5980000 	ldr	r0, [r8]
    f9e4:	eafffff3 	b	f9b8 <CGPIOManager::~CGPIOManager()+0x5c>

0000f9e8 <CGPIOManager::Initialize()>:
    f9e8:	e5903004 	ldr	r3, [r0, #4]
    f9ec:	e92d4010 	push	{r4, lr}
    f9f0:	e3530000 	cmp	r3, #0
    f9f4:	e1a04000 	mov	r4, r0
    f9f8:	1a00000b 	bne	fa2c <CGPIOManager::Initialize()+0x44>
    f9fc:	e5940000 	ldr	r0, [r4]
    fa00:	e3500000 	cmp	r0, #0
    fa04:	0a000011 	beq	fa50 <CGPIOManager::Initialize()+0x68>
    fa08:	e1a03004 	mov	r3, r4
    fa0c:	e3a01034 	mov	r1, #52	; 0x34
    fa10:	e30f2c8c 	movw	r2, #64652	; 0xfc8c
    fa14:	e3402000 	movt	r2, #0
    fa18:	ebfffeff 	bl	f61c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    fa1c:	e3a03001 	mov	r3, #1
    fa20:	e1a00003 	mov	r0, r3
    fa24:	e5843004 	str	r3, [r4, #4]
    fa28:	e8bd8010 	pop	{r4, pc}
    fa2c:	e30316fc 	movw	r1, #14076	; 0x36fc
    fa30:	e3030734 	movw	r0, #14132	; 0x3734
    fa34:	e3401001 	movt	r1, #1
    fa38:	e3400001 	movt	r0, #1
    fa3c:	e3a0203b 	mov	r2, #59	; 0x3b
    fa40:	ebfff516 	bl	cea0 <assertion_failed>
    fa44:	e5940000 	ldr	r0, [r4]
    fa48:	e3500000 	cmp	r0, #0
    fa4c:	1affffed 	bne	fa08 <CGPIOManager::Initialize()+0x20>
    fa50:	e30316fc 	movw	r1, #14076	; 0x36fc
    fa54:	e3030720 	movw	r0, #14112	; 0x3720
    fa58:	e3401001 	movt	r1, #1
    fa5c:	e3400001 	movt	r0, #1
    fa60:	e3a0203c 	mov	r2, #60	; 0x3c
    fa64:	ebfff50d 	bl	cea0 <assertion_failed>
    fa68:	e5940000 	ldr	r0, [r4]
    fa6c:	eaffffe5 	b	fa08 <CGPIOManager::Initialize()+0x20>

0000fa70 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    fa70:	e5903004 	ldr	r3, [r0, #4]
    fa74:	e92d4070 	push	{r4, r5, r6, lr}
    fa78:	e3530000 	cmp	r3, #0
    fa7c:	e1a04000 	mov	r4, r0
    fa80:	e1a05001 	mov	r5, r1
    fa84:	0a000010 	beq	facc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
    fa88:	e3550000 	cmp	r5, #0
    fa8c:	0a00001c 	beq	fb04 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    fa90:	e5956004 	ldr	r6, [r5, #4]
    fa94:	e3560035 	cmp	r6, #53	; 0x35
    fa98:	8a000012 	bhi	fae8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
    fa9c:	e0844106 	add	r4, r4, r6, lsl #2
    faa0:	e5943008 	ldr	r3, [r4, #8]
    faa4:	e3530000 	cmp	r3, #0
    faa8:	0a000005 	beq	fac4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    faac:	e30316fc 	movw	r1, #14076	; 0x36fc
    fab0:	e303070c 	movw	r0, #14092	; 0x370c
    fab4:	e3401001 	movt	r1, #1
    fab8:	e3400001 	movt	r0, #1
    fabc:	e3a0204b 	mov	r2, #75	; 0x4b
    fac0:	ebfff4f6 	bl	cea0 <assertion_failed>
    fac4:	e5845008 	str	r5, [r4, #8]
    fac8:	e8bd8070 	pop	{r4, r5, r6, pc}
    facc:	e30316fc 	movw	r1, #14076	; 0x36fc
    fad0:	e3030748 	movw	r0, #14152	; 0x3748
    fad4:	e3401001 	movt	r1, #1
    fad8:	e3400001 	movt	r0, #1
    fadc:	e3a02045 	mov	r2, #69	; 0x45
    fae0:	ebfff4ee 	bl	cea0 <assertion_failed>
    fae4:	eaffffe7 	b	fa88 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    fae8:	e30316fc 	movw	r1, #14076	; 0x36fc
    faec:	e30201c0 	movw	r0, #8640	; 0x21c0
    faf0:	e3401001 	movt	r1, #1
    faf4:	e3400001 	movt	r0, #1
    faf8:	e3a02049 	mov	r2, #73	; 0x49
    fafc:	ebfff4e7 	bl	cea0 <assertion_failed>
    fb00:	eaffffe5 	b	fa9c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    fb04:	e30316fc 	movw	r1, #14076	; 0x36fc
    fb08:	e3030758 	movw	r0, #14168	; 0x3758
    fb0c:	e3401001 	movt	r1, #1
    fb10:	e3400001 	movt	r0, #1
    fb14:	e3a02047 	mov	r2, #71	; 0x47
    fb18:	ebfff4e0 	bl	cea0 <assertion_failed>
    fb1c:	eaffffdb 	b	fa90 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

0000fb20 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    fb20:	e5903004 	ldr	r3, [r0, #4]
    fb24:	e92d4070 	push	{r4, r5, r6, lr}
    fb28:	e3530000 	cmp	r3, #0
    fb2c:	e1a04000 	mov	r4, r0
    fb30:	e1a05001 	mov	r5, r1
    fb34:	0a00000b 	beq	fb68 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    fb38:	e3550000 	cmp	r5, #0
    fb3c:	0a000021 	beq	fbc8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    fb40:	e5955004 	ldr	r5, [r5, #4]
    fb44:	e3550035 	cmp	r5, #53	; 0x35
    fb48:	8a00000d 	bhi	fb84 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
    fb4c:	e0844105 	add	r4, r4, r5, lsl #2
    fb50:	e5943008 	ldr	r3, [r4, #8]
    fb54:	e3530000 	cmp	r3, #0
    fb58:	0a000013 	beq	fbac <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
    fb5c:	e3a03000 	mov	r3, #0
    fb60:	e5843008 	str	r3, [r4, #8]
    fb64:	e8bd8070 	pop	{r4, r5, r6, pc}
    fb68:	e30316fc 	movw	r1, #14076	; 0x36fc
    fb6c:	e3030748 	movw	r0, #14152	; 0x3748
    fb70:	e3401001 	movt	r1, #1
    fb74:	e3400001 	movt	r0, #1
    fb78:	e3a02052 	mov	r2, #82	; 0x52
    fb7c:	ebfff4c7 	bl	cea0 <assertion_failed>
    fb80:	eaffffec 	b	fb38 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    fb84:	e0844105 	add	r4, r4, r5, lsl #2
    fb88:	e30316fc 	movw	r1, #14076	; 0x36fc
    fb8c:	e30201c0 	movw	r0, #8640	; 0x21c0
    fb90:	e3401001 	movt	r1, #1
    fb94:	e3400001 	movt	r0, #1
    fb98:	e3a02056 	mov	r2, #86	; 0x56
    fb9c:	ebfff4bf 	bl	cea0 <assertion_failed>
    fba0:	e5943008 	ldr	r3, [r4, #8]
    fba4:	e3530000 	cmp	r3, #0
    fba8:	1affffeb 	bne	fb5c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    fbac:	e30316fc 	movw	r1, #14076	; 0x36fc
    fbb0:	e3030764 	movw	r0, #14180	; 0x3764
    fbb4:	e3401001 	movt	r1, #1
    fbb8:	e3400001 	movt	r0, #1
    fbbc:	e3a02058 	mov	r2, #88	; 0x58
    fbc0:	ebfff4b6 	bl	cea0 <assertion_failed>
    fbc4:	eaffffe4 	b	fb5c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    fbc8:	e30316fc 	movw	r1, #14076	; 0x36fc
    fbcc:	e3030758 	movw	r0, #14168	; 0x3758
    fbd0:	e3401001 	movt	r1, #1
    fbd4:	e3400001 	movt	r0, #1
    fbd8:	e3a02054 	mov	r2, #84	; 0x54
    fbdc:	ebfff4af 	bl	cea0 <assertion_failed>
    fbe0:	eaffffd6 	b	fb40 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

0000fbe4 <CGPIOManager::InterruptHandler()>:
    fbe4:	e5903004 	ldr	r3, [r0, #4]
    fbe8:	e92d4070 	push	{r4, r5, r6, lr}
    fbec:	e3530000 	cmp	r3, #0
    fbf0:	e1a06000 	mov	r6, r0
    fbf4:	0a00001a 	beq	fc64 <CGPIOManager::InterruptHandler()+0x80>
    fbf8:	e3a02000 	mov	r2, #0
    fbfc:	e3432f20 	movt	r2, #16160	; 0x3f20
    fc00:	e3a04000 	mov	r4, #0
    fc04:	e5923040 	ldr	r3, [r2, #64]	; 0x40
    fc08:	ea000004 	b	fc20 <CGPIOManager::InterruptHandler()+0x3c>
    fc0c:	e2844001 	add	r4, r4, #1
    fc10:	e314001f 	tst	r4, #31
    fc14:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    fc18:	e3540036 	cmp	r4, #54	; 0x36
    fc1c:	08bd8070 	popeq	{r4, r5, r6, pc}
    fc20:	e3130001 	tst	r3, #1
    fc24:	e1a030a3 	lsr	r3, r3, #1
    fc28:	0afffff7 	beq	fc0c <CGPIOManager::InterruptHandler()+0x28>
    fc2c:	e2843002 	add	r3, r4, #2
    fc30:	e204501f 	and	r5, r4, #31
    fc34:	e3a02001 	mov	r2, #1
    fc38:	e7960103 	ldr	r0, [r6, r3, lsl #2]
    fc3c:	e1a05512 	lsl	r5, r2, r5
    fc40:	e3500000 	cmp	r0, #0
    fc44:	0a00000d 	beq	fc80 <CGPIOManager::InterruptHandler()+0x9c>
    fc48:	ebffe8a2 	bl	9ed8 <CGPIOPin::InterruptHandler()>
    fc4c:	e3a03010 	mov	r3, #16
    fc50:	e3403fc8 	movt	r3, #4040	; 0xfc8
    fc54:	e08332a4 	add	r3, r3, r4, lsr #5
    fc58:	e1a03103 	lsl	r3, r3, #2
    fc5c:	e5835000 	str	r5, [r3]
    fc60:	e8bd8070 	pop	{r4, r5, r6, pc}
    fc64:	e30316fc 	movw	r1, #14076	; 0x36fc
    fc68:	e3030748 	movw	r0, #14152	; 0x3748
    fc6c:	e3401001 	movt	r1, #1
    fc70:	e3400001 	movt	r0, #1
    fc74:	e3a0205e 	mov	r2, #94	; 0x5e
    fc78:	ebfff488 	bl	cea0 <assertion_failed>
    fc7c:	eaffffdd 	b	fbf8 <CGPIOManager::InterruptHandler()+0x14>
    fc80:	e1a00004 	mov	r0, r4
    fc84:	ebffe8bf 	bl	9f88 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    fc88:	eaffffef 	b	fc4c <CGPIOManager::InterruptHandler()+0x68>

0000fc8c <CGPIOManager::InterruptStub(void*)>:
    fc8c:	e92d4010 	push	{r4, lr}
    fc90:	e2504000 	subs	r4, r0, #0
    fc94:	0a000002 	beq	fca4 <CGPIOManager::InterruptStub(void*)+0x18>
    fc98:	e1a00004 	mov	r0, r4
    fc9c:	e8bd4010 	pop	{r4, lr}
    fca0:	eaffffcf 	b	fbe4 <CGPIOManager::InterruptHandler()>
    fca4:	e30316fc 	movw	r1, #14076	; 0x36fc
    fca8:	e3030778 	movw	r0, #14200	; 0x3778
    fcac:	e3401001 	movt	r1, #1
    fcb0:	e3400001 	movt	r0, #1
    fcb4:	e3a0208a 	mov	r2, #138	; 0x8a
    fcb8:	ebfff478 	bl	cea0 <assertion_failed>
    fcbc:	e1a00004 	mov	r0, r4
    fcc0:	e8bd4010 	pop	{r4, lr}
    fcc4:	eaffffc6 	b	fbe4 <CGPIOManager::InterruptHandler()>

0000fcc8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    fcc8:	e12fff1e 	bx	lr

0000fccc <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    fccc:	e92d4010 	push	{r4, lr}
    fcd0:	e3a01010 	mov	r1, #16
    fcd4:	e1a04000 	mov	r4, r0
    fcd8:	ebffe980 	bl	a2e0 <operator delete(void*, unsigned int)>
    fcdc:	e1a00004 	mov	r0, r4
    fce0:	e8bd8010 	pop	{r4, pc}

0000fce4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    fce4:	e92d4070 	push	{r4, r5, r6, lr}
    fce8:	e3034fc0 	movw	r4, #16320	; 0x3fc0
    fcec:	e3404001 	movt	r4, #1
    fcf0:	e1a05000 	mov	r5, r0
    fcf4:	e1a06001 	mov	r6, r1
    fcf8:	e5940000 	ldr	r0, [r4]
    fcfc:	e3500000 	cmp	r0, #0
    fd00:	1a00001a 	bne	fd70 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    fd04:	e1d500bc 	ldrh	r0, [r5, #12]
    fd08:	e1d530be 	ldrh	r3, [r5, #14]
    fd0c:	e5856008 	str	r6, [r5, #8]
    fd10:	e0402003 	sub	r2, r0, r3
    fd14:	e6bf2072 	sxth	r2, r2
    fd18:	e3520000 	cmp	r2, #0
    fd1c:	da00000c 	ble	fd54 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    fd20:	e3560000 	cmp	r6, #0
    fd24:	1a00000c 	bne	fd5c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    fd28:	e2833001 	add	r3, r3, #1
    fd2c:	e6ff3073 	uxth	r3, r3
    fd30:	e1c530be 	strh	r3, [r5, #14]
    fd34:	e5951004 	ldr	r1, [r5, #4]
    fd38:	e1833800 	orr	r3, r3, r0, lsl #16
    fd3c:	e5942004 	ldr	r2, [r4, #4]
    fd40:	e7823101 	str	r3, [r2, r1, lsl #2]
    fd44:	e5943000 	ldr	r3, [r4]
    fd48:	e3530000 	cmp	r3, #0
    fd4c:	1a000005 	bne	fd68 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    fd50:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd54:	e3560000 	cmp	r6, #0
    fd58:	1a000006 	bne	fd78 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    fd5c:	e5943000 	ldr	r3, [r4]
    fd60:	e3530000 	cmp	r3, #0
    fd64:	08bd8070 	popeq	{r4, r5, r6, pc}
    fd68:	e8bd4070 	pop	{r4, r5, r6, lr}
    fd6c:	eaffe98b 	b	a3a0 <LeaveCritical>
    fd70:	ebffe95c 	bl	a2e8 <EnterCritical>
    fd74:	eaffffe2 	b	fd04 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    fd78:	e2800001 	add	r0, r0, #1
    fd7c:	e6ff0070 	uxth	r0, r0
    fd80:	e1c500bc 	strh	r0, [r5, #12]
    fd84:	eaffffea 	b	fd34 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000fd88 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    fd88:	e59f20e4 	ldr	r2, [pc, #228]	; fe74 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    fd8c:	e3510001 	cmp	r1, #1
    fd90:	e92d4030 	push	{r4, r5, lr}
    fd94:	e3a03000 	mov	r3, #0
    fd98:	e24dd024 	sub	sp, sp, #36	; 0x24
    fd9c:	e1a04000 	mov	r4, r0
    fda0:	e5801004 	str	r1, [r0, #4]
    fda4:	e5802000 	str	r2, [r0]
    fda8:	e1c030bc 	strh	r3, [r0, #12]
    fdac:	e1c030be 	strh	r3, [r0, #14]
    fdb0:	9a000002 	bls	fdc0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    fdb4:	e1a00004 	mov	r0, r4
    fdb8:	e28dd024 	add	sp, sp, #36	; 0x24
    fdbc:	e8bd8030 	pop	{r4, r5, pc}
    fdc0:	e3035fc0 	movw	r5, #16320	; 0x3fc0
    fdc4:	e3405001 	movt	r5, #1
    fdc8:	e5950000 	ldr	r0, [r5]
    fdcc:	e1500003 	cmp	r0, r3
    fdd0:	1a000009 	bne	fdfc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    fdd4:	e5953004 	ldr	r3, [r5, #4]
    fdd8:	e3530000 	cmp	r3, #0
    fddc:	0a00000a 	beq	fe0c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    fde0:	e5953004 	ldr	r3, [r5, #4]
    fde4:	e3530000 	cmp	r3, #0
    fde8:	0afffff1 	beq	fdb4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    fdec:	e3a01000 	mov	r1, #0
    fdf0:	e1a00004 	mov	r0, r4
    fdf4:	ebffffba 	bl	fce4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    fdf8:	eaffffed 	b	fdb4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    fdfc:	ebffe939 	bl	a2e8 <EnterCritical>
    fe00:	e5953004 	ldr	r3, [r5, #4]
    fe04:	e3530000 	cmp	r3, #0
    fe08:	1a00000f 	bne	fe4c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    fe0c:	e28d0008 	add	r0, sp, #8
    fe10:	ebffe4f2 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
    fe14:	e3a03000 	mov	r3, #0
    fe18:	e28d0008 	add	r0, sp, #8
    fe1c:	e58d3000 	str	r3, [sp]
    fe20:	e3a01010 	mov	r1, #16
    fe24:	e3a03010 	mov	r3, #16
    fe28:	e3401004 	movt	r1, #4
    fe2c:	e08d2003 	add	r2, sp, r3
    fe30:	ebffe532 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    fe34:	e3500000 	cmp	r0, #0
    fe38:	e28d0008 	add	r0, sp, #8
    fe3c:	159d301c 	ldrne	r3, [sp, #28]
    fe40:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    fe44:	15853004 	strne	r3, [r5, #4]
    fe48:	ebffe4ea 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
    fe4c:	e5953000 	ldr	r3, [r5]
    fe50:	e3530000 	cmp	r3, #0
    fe54:	0a000000 	beq	fe5c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
    fe58:	ebffe950 	bl	a3a0 <LeaveCritical>
    fe5c:	e5943004 	ldr	r3, [r4, #4]
    fe60:	e3530001 	cmp	r3, #1
    fe64:	9affffdd 	bls	fde0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
    fe68:	e1a00004 	mov	r0, r4
    fe6c:	e28dd024 	add	sp, sp, #36	; 0x24
    fe70:	e8bd8030 	pop	{r4, r5, pc}
    fe74:	0001378c 	.word	0x0001378c

0000fe78 <CVirtualGPIOPin::Write(unsigned int)>:
    fe78:	e5902004 	ldr	r2, [r0, #4]
    fe7c:	e1a03001 	mov	r3, r1
    fe80:	e3520001 	cmp	r2, #1
    fe84:	812fff1e 	bxhi	lr
    fe88:	e3032fc0 	movw	r2, #16320	; 0x3fc0
    fe8c:	e3402001 	movt	r2, #1
    fe90:	e3510001 	cmp	r1, #1
    fe94:	e5922004 	ldr	r2, [r2, #4]
    fe98:	93a03000 	movls	r3, #0
    fe9c:	83a03001 	movhi	r3, #1
    fea0:	e3520000 	cmp	r2, #0
    fea4:	03833001 	orreq	r3, r3, #1
    fea8:	e3530000 	cmp	r3, #0
    feac:	112fff1e 	bxne	lr
    feb0:	eaffff8b 	b	fce4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0000feb4 <CVirtualGPIOPin::Invert()>:
    feb4:	e5901008 	ldr	r1, [r0, #8]
    feb8:	e2211001 	eor	r1, r1, #1
    febc:	eaffffed 	b	fe78 <CVirtualGPIOPin::Write(unsigned int)>

0000fec0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    fec0:	e3033fc0 	movw	r3, #16320	; 0x3fc0
    fec4:	e3403001 	movt	r3, #1
    fec8:	e3a02000 	mov	r2, #0
    fecc:	e5832000 	str	r2, [r3]
    fed0:	e12fff1e 	bx	lr

0000fed4 <CMachineInfo::CMachineInfo()>:
    fed4:	e3032fc8 	movw	r2, #16328	; 0x3fc8
    fed8:	e3402001 	movt	r2, #1
    fedc:	e92d4030 	push	{r4, r5, lr}
    fee0:	e3a0300c 	mov	r3, #12
    fee4:	e5925000 	ldr	r5, [r2]
    fee8:	e3a01003 	mov	r1, #3
    feec:	e5c03004 	strb	r3, [r0, #4]
    fef0:	e3a03000 	mov	r3, #0
    fef4:	e1550003 	cmp	r5, r3
    fef8:	e24dd024 	sub	sp, sp, #36	; 0x24
    fefc:	e1a04000 	mov	r4, r0
    ff00:	e5c01010 	strb	r1, [r0, #16]
    ff04:	e5803000 	str	r3, [r0]
    ff08:	e5803008 	str	r3, [r0, #8]
    ff0c:	e580300c 	str	r3, [r0, #12]
    ff10:	e5803014 	str	r3, [r0, #20]
    ff14:	0a00000e 	beq	ff54 <CMachineInfo::CMachineInfo()+0x80>
    ff18:	e595e000 	ldr	lr, [r5]
    ff1c:	e5d5c004 	ldrb	ip, [r5, #4]
    ff20:	e5950008 	ldr	r0, [r5, #8]
    ff24:	e595100c 	ldr	r1, [r5, #12]
    ff28:	e5d52010 	ldrb	r2, [r5, #16]
    ff2c:	e5953014 	ldr	r3, [r5, #20]
    ff30:	e584e000 	str	lr, [r4]
    ff34:	e5c4c004 	strb	ip, [r4, #4]
    ff38:	e5840008 	str	r0, [r4, #8]
    ff3c:	e584100c 	str	r1, [r4, #12]
    ff40:	e5c42010 	strb	r2, [r4, #16]
    ff44:	e5843014 	str	r3, [r4, #20]
    ff48:	e1a00004 	mov	r0, r4
    ff4c:	e28dd024 	add	sp, sp, #36	; 0x24
    ff50:	e8bd8030 	pop	{r4, r5, pc}
    ff54:	e5820000 	str	r0, [r2]
    ff58:	e28d0008 	add	r0, sp, #8
    ff5c:	ebffe49f 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
    ff60:	e3a03010 	mov	r3, #16
    ff64:	e58d5000 	str	r5, [sp]
    ff68:	e28d0008 	add	r0, sp, #8
    ff6c:	e3a01002 	mov	r1, #2
    ff70:	e08d2003 	add	r2, sp, r3
    ff74:	e3401001 	movt	r1, #1
    ff78:	ebffe4e0 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ff7c:	e3500000 	cmp	r0, #0
    ff80:	0a00000c 	beq	ffb8 <CMachineInfo::CMachineInfo()+0xe4>
    ff84:	e59d201c 	ldr	r2, [sp, #28]
    ff88:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    ff8c:	e5842000 	str	r2, [r4]
    ff90:	1a00000b 	bne	ffc4 <CMachineInfo::CMachineInfo()+0xf0>
    ff94:	e3a01002 	mov	r1, #2
    ff98:	e59f00f8 	ldr	r0, [pc, #248]	; 10098 <CMachineInfo::CMachineInfo()+0x1c4>
    ff9c:	ea000000 	b	ffa4 <CMachineInfo::CMachineInfo()+0xd0>
    ffa0:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    ffa4:	e1520001 	cmp	r2, r1
    ffa8:	0a000012 	beq	fff8 <CMachineInfo::CMachineInfo()+0x124>
    ffac:	e2833001 	add	r3, r3, #1
    ffb0:	e3530011 	cmp	r3, #17
    ffb4:	1afffff9 	bne	ffa0 <CMachineInfo::CMachineInfo()+0xcc>
    ffb8:	e28d0008 	add	r0, sp, #8
    ffbc:	ebffe48d 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
    ffc0:	eaffffe0 	b	ff48 <CMachineInfo::CMachineInfo()+0x74>
    ffc4:	e303c794 	movw	ip, #14228	; 0x3794
    ffc8:	e340c001 	movt	ip, #1
    ffcc:	e7e70252 	ubfx	r0, r2, #4, #8
    ffd0:	e1a03005 	mov	r3, r5
    ffd4:	e1a0100c 	mov	r1, ip
    ffd8:	ea000000 	b	ffe0 <CMachineInfo::CMachineInfo()+0x10c>
    ffdc:	e5b1500c 	ldr	r5, [r1, #12]!
    ffe0:	e1550000 	cmp	r5, r0
    ffe4:	0a000011 	beq	10030 <CMachineInfo::CMachineInfo()+0x15c>
    ffe8:	e2833001 	add	r3, r3, #1
    ffec:	e353000a 	cmp	r3, #10
    fff0:	1afffff9 	bne	ffdc <CMachineInfo::CMachineInfo()+0x108>
    fff4:	eaffffef 	b	ffb8 <CMachineInfo::CMachineInfo()+0xe4>
    fff8:	e3032794 	movw	r2, #14228	; 0x3794
    fffc:	e3402001 	movt	r2, #1
   10000:	e0823203 	add	r3, r2, r3, lsl #4
   10004:	e3a01001 	mov	r1, #1
   10008:	e5841008 	str	r1, [r4, #8]
   1000c:	e3a02000 	mov	r2, #0
   10010:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
   10014:	e5931080 	ldr	r1, [r3, #128]	; 0x80
   10018:	e5933084 	ldr	r3, [r3, #132]	; 0x84
   1001c:	e5c40004 	strb	r0, [r4, #4]
   10020:	e584100c 	str	r1, [r4, #12]
   10024:	e5843014 	str	r3, [r4, #20]
   10028:	e5c42010 	strb	r2, [r4, #16]
   1002c:	eaffffe1 	b	ffb8 <CMachineInfo::CMachineInfo()+0xe4>
   10030:	e3a0100c 	mov	r1, #12
   10034:	e7e3e652 	ubfx	lr, r2, #12, #4
   10038:	e023c391 	mla	r3, r1, r3, ip
   1003c:	e35e0002 	cmp	lr, #2
   10040:	e202100f 	and	r1, r2, #15
   10044:	e7e22a52 	ubfx	r2, r2, #20, #3
   10048:	e5c4e010 	strb	lr, [r4, #16]
   1004c:	e3a00c01 	mov	r0, #256	; 0x100
   10050:	e2811001 	add	r1, r1, #1
   10054:	e1a00210 	lsl	r0, r0, r2
   10058:	e584100c 	str	r1, [r4, #12]
   1005c:	e5d3c004 	ldrb	ip, [r3, #4]
   10060:	e5933008 	ldr	r3, [r3, #8]
   10064:	e5840014 	str	r0, [r4, #20]
   10068:	e5c4c004 	strb	ip, [r4, #4]
   1006c:	e5843008 	str	r3, [r4, #8]
   10070:	83a03003 	movhi	r3, #3
   10074:	85c43010 	strbhi	r3, [r4, #16]
   10078:	e3520000 	cmp	r2, #0
   1007c:	035c0003 	cmpeq	ip, #3
   10080:	1affffcc 	bne	ffb8 <CMachineInfo::CMachineInfo()+0xe4>
   10084:	e3510001 	cmp	r1, #1
   10088:	13a03002 	movne	r3, #2
   1008c:	03a03001 	moveq	r3, #1
   10090:	e5c43004 	strb	r3, [r4, #4]
   10094:	eaffffc7 	b	ffb8 <CMachineInfo::CMachineInfo()+0xe4>
   10098:	0001380c 	.word	0x0001380c

0001009c <CMachineInfo::~CMachineInfo()>:
   1009c:	e3033fc8 	movw	r3, #16328	; 0x3fc8
   100a0:	e3403001 	movt	r3, #1
   100a4:	e3a0100c 	mov	r1, #12
   100a8:	e5c01004 	strb	r1, [r0, #4]
   100ac:	e5932000 	ldr	r2, [r3]
   100b0:	e1500002 	cmp	r0, r2
   100b4:	03a02000 	moveq	r2, #0
   100b8:	05832000 	streq	r2, [r3]
   100bc:	e12fff1e 	bx	lr

000100c0 <CMachineInfo::GetMachineModel() const>:
   100c0:	e5d00004 	ldrb	r0, [r0, #4]
   100c4:	e12fff1e 	bx	lr

000100c8 <CMachineInfo::GetMachineName() const>:
   100c8:	e5d02004 	ldrb	r2, [r0, #4]
   100cc:	e3033794 	movw	r3, #14228	; 0x3794
   100d0:	e3403001 	movt	r3, #1
   100d4:	e0833102 	add	r3, r3, r2, lsl #2
   100d8:	e5930188 	ldr	r0, [r3, #392]	; 0x188
   100dc:	e12fff1e 	bx	lr

000100e0 <CMachineInfo::GetModelMajor() const>:
   100e0:	e5900008 	ldr	r0, [r0, #8]
   100e4:	e12fff1e 	bx	lr

000100e8 <CMachineInfo::GetModelRevision() const>:
   100e8:	e590000c 	ldr	r0, [r0, #12]
   100ec:	e12fff1e 	bx	lr

000100f0 <CMachineInfo::GetSoCType() const>:
   100f0:	e5d00010 	ldrb	r0, [r0, #16]
   100f4:	e12fff1e 	bx	lr

000100f8 <CMachineInfo::GetRAMSize() const>:
   100f8:	e5900014 	ldr	r0, [r0, #20]
   100fc:	e12fff1e 	bx	lr

00010100 <CMachineInfo::GetSoCName() const>:
   10100:	e5d02010 	ldrb	r2, [r0, #16]
   10104:	e3033794 	movw	r3, #14228	; 0x3794
   10108:	e3403001 	movt	r3, #1
   1010c:	e0833102 	add	r3, r3, r2, lsl #2
   10110:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
   10114:	e12fff1e 	bx	lr

00010118 <CMachineInfo::GetRevisionRaw() const>:
   10118:	e5900000 	ldr	r0, [r0]
   1011c:	e12fff1e 	bx	lr

00010120 <CMachineInfo::GetClockRate(unsigned int) const>:
   10120:	e92d4070 	push	{r4, r5, r6, lr}
   10124:	e24dd028 	sub	sp, sp, #40	; 0x28
   10128:	e1a06000 	mov	r6, r0
   1012c:	e28d000c 	add	r0, sp, #12
   10130:	e1a05001 	mov	r5, r1
   10134:	ebffe429 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
   10138:	e3a03004 	mov	r3, #4
   1013c:	e28d000c 	add	r0, sp, #12
   10140:	e58d3000 	str	r3, [sp]
   10144:	e3a01002 	mov	r1, #2
   10148:	e3a03014 	mov	r3, #20
   1014c:	e3401003 	movt	r1, #3
   10150:	e08d2003 	add	r2, sp, r3
   10154:	e58d5020 	str	r5, [sp, #32]
   10158:	ebffe468 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1015c:	e2504000 	subs	r4, r0, #0
   10160:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   10164:	1a00000b 	bne	10198 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   10168:	e3550002 	cmp	r5, #2
   1016c:	0a00000e 	beq	101ac <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   10170:	e3550004 	cmp	r5, #4
   10174:	0a000012 	beq	101c4 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
   10178:	e3550001 	cmp	r5, #1
   1017c:	0a00000d 	beq	101b8 <CMachineInfo::GetClockRate(unsigned int) const+0x98>
   10180:	e3031960 	movw	r1, #14688	; 0x3960
   10184:	e30306f8 	movw	r0, #14072	; 0x36f8
   10188:	e3401001 	movt	r1, #1
   1018c:	e3400001 	movt	r0, #1
   10190:	e3a02e11 	mov	r2, #272	; 0x110
   10194:	ebfff341 	bl	cea0 <assertion_failed>
   10198:	e28d000c 	add	r0, sp, #12
   1019c:	ebffe415 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
   101a0:	e1a00004 	mov	r0, r4
   101a4:	e28dd028 	add	sp, sp, #40	; 0x28
   101a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   101ac:	e3a04b1b 	mov	r4, #27648	; 0x6c00
   101b0:	e34042dc 	movt	r4, #732	; 0x2dc
   101b4:	eafffff7 	b	10198 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   101b8:	e3a04ce1 	mov	r4, #57600	; 0xe100
   101bc:	e34045f5 	movt	r4, #1525	; 0x5f5
   101c0:	eafffff4 	b	10198 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   101c4:	e5962008 	ldr	r2, [r6, #8]
   101c8:	e3a03ca3 	mov	r3, #41728	; 0xa300
   101cc:	e34131e1 	movt	r3, #4577	; 0x11e1
   101d0:	e30b4280 	movw	r4, #45696	; 0xb280
   101d4:	e3520002 	cmp	r2, #2
   101d8:	e3404ee6 	movt	r4, #3814	; 0xee6
   101dc:	81a04003 	movhi	r4, r3
   101e0:	eaffffec 	b	10198 <CMachineInfo::GetClockRate(unsigned int) const+0x78>

000101e4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   101e4:	e3510036 	cmp	r1, #54	; 0x36
   101e8:	0a00000f 	beq	1022c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
   101ec:	e3510037 	cmp	r1, #55	; 0x37
   101f0:	1a000004 	bne	10208 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   101f4:	e5d03004 	ldrb	r3, [r0, #4]
   101f8:	e3530003 	cmp	r3, #3
   101fc:	c3a00028 	movgt	r0, #40	; 0x28
   10200:	d3a0002d 	movle	r0, #45	; 0x2d
   10204:	e12fff1e 	bx	lr
   10208:	e92d4010 	push	{r4, lr}
   1020c:	e300213b 	movw	r2, #315	; 0x13b
   10210:	e3031960 	movw	r1, #14688	; 0x3960
   10214:	e30306f8 	movw	r0, #14072	; 0x36f8
   10218:	e3401001 	movt	r1, #1
   1021c:	e3400001 	movt	r0, #1
   10220:	ebfff31e 	bl	cea0 <assertion_failed>
   10224:	e3a00000 	mov	r0, #0
   10228:	e8bd8010 	pop	{r4, pc}
   1022c:	e5d03004 	ldrb	r3, [r0, #4]
   10230:	e3530003 	cmp	r3, #3
   10234:	ca000001 	bgt	10240 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
   10238:	e3a00028 	mov	r0, #40	; 0x28
   1023c:	e12fff1e 	bx	lr
   10240:	e5903008 	ldr	r3, [r0, #8]
   10244:	e3530003 	cmp	r3, #3
   10248:	33a0002d 	movcc	r0, #45	; 0x2d
   1024c:	23a00029 	movcs	r0, #41	; 0x29
   10250:	e12fff1e 	bx	lr

00010254 <CMachineInfo::GetDevice(TDeviceId) const>:
   10254:	e3510000 	cmp	r1, #0
   10258:	1a000003 	bne	1026c <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   1025c:	e5d00004 	ldrb	r0, [r0, #4]
   10260:	e2500001 	subs	r0, r0, #1
   10264:	13a00001 	movne	r0, #1
   10268:	e12fff1e 	bx	lr
   1026c:	e92d4010 	push	{r4, lr}
   10270:	e3a02f55 	mov	r2, #340	; 0x154
   10274:	e3031960 	movw	r1, #14688	; 0x3960
   10278:	e30306f8 	movw	r0, #14072	; 0x36f8
   1027c:	e3401001 	movt	r1, #1
   10280:	e3400001 	movt	r0, #1
   10284:	ebfff305 	bl	cea0 <assertion_failed>
   10288:	e3a00000 	mov	r0, #0
   1028c:	e8bd8010 	pop	{r4, pc}

00010290 <CMachineInfo::Get()>:
   10290:	e92d4010 	push	{r4, lr}
   10294:	e3034fc8 	movw	r4, #16328	; 0x3fc8
   10298:	e3404001 	movt	r4, #1
   1029c:	e5940000 	ldr	r0, [r4]
   102a0:	e3500000 	cmp	r0, #0
   102a4:	18bd8010 	popne	{r4, pc}
   102a8:	e300215d 	movw	r2, #349	; 0x15d
   102ac:	e3031960 	movw	r1, #14688	; 0x3960
   102b0:	e3010e74 	movw	r0, #7796	; 0x1e74
   102b4:	e3401001 	movt	r1, #1
   102b8:	e3400001 	movt	r0, #1
   102bc:	ebfff2f7 	bl	cea0 <assertion_failed>
   102c0:	e5940000 	ldr	r0, [r4]
   102c4:	e8bd8010 	pop	{r4, pc}

000102c8 <InvalidateDataCacheL1Only>:
   102c8:	e92d0070 	push	{r4, r5, r6}
   102cc:	e3a00000 	mov	r0, #0
   102d0:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   102d4:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   102d8:	e3071fff 	movw	r1, #32767	; 0x7fff
   102dc:	e00126a0 	and	r2, r1, r0, lsr #13
   102e0:	e30013ff 	movw	r1, #1023	; 0x3ff
   102e4:	e00131a0 	and	r3, r1, r0, lsr #3
   102e8:	e2822001 	add	r2, r2, #1
   102ec:	e2000007 	and	r0, r0, #7
   102f0:	e2800004 	add	r0, r0, #4
   102f4:	e16f1f13 	clz	r1, r3
   102f8:	e2834001 	add	r4, r3, #1
   102fc:	e2422001 	sub	r2, r2, #1
   10300:	e1a03004 	mov	r3, r4
   10304:	e2533001 	subs	r3, r3, #1
   10308:	e1a05113 	lsl	r5, r3, r1
   1030c:	e1a06012 	lsl	r6, r2, r0
   10310:	e1855006 	orr	r5, r5, r6
   10314:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   10318:	cafffff9 	bgt	10304 <InvalidateDataCacheL1Only+0x3c>
   1031c:	e3520000 	cmp	r2, #0
   10320:	cafffff5 	bgt	102fc <InvalidateDataCacheL1Only+0x34>
   10324:	f57ff04e 	dsb	st
   10328:	f57ff06f 	isb	sy
   1032c:	e8bd0070 	pop	{r4, r5, r6}
   10330:	e12fff1e 	bx	lr

00010334 <InvalidateDataCache>:
   10334:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   10338:	f57ff05f 	dmb	sy
   1033c:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   10340:	e1a03ba0 	lsr	r3, r0, #23
   10344:	e213300e 	ands	r3, r3, #14
   10348:	0a00001d 	beq	103c4 <InvalidateDataCache+0x90>
   1034c:	e3a0a000 	mov	sl, #0
   10350:	e08a20aa 	add	r2, sl, sl, lsr #1
   10354:	e1a01230 	lsr	r1, r0, r2
   10358:	e2011007 	and	r1, r1, #7
   1035c:	e3510002 	cmp	r1, #2
   10360:	ba000014 	blt	103b8 <InvalidateDataCache+0x84>
   10364:	e10f9000 	mrs	r9, CPSR
   10368:	f10c0080 	cpsid	i
   1036c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10370:	f57ff06f 	isb	sy
   10374:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   10378:	e121f009 	msr	CPSR_c, r9
   1037c:	e2012007 	and	r2, r1, #7
   10380:	e2822004 	add	r2, r2, #4
   10384:	e30043ff 	movw	r4, #1023	; 0x3ff
   10388:	e01441a1 	ands	r4, r4, r1, lsr #3
   1038c:	e16f5f14 	clz	r5, r4
   10390:	e3077fff 	movw	r7, #32767	; 0x7fff
   10394:	e01776a1 	ands	r7, r7, r1, lsr #13
   10398:	e1a09007 	mov	r9, r7
   1039c:	e18ab514 	orr	fp, sl, r4, lsl r5
   103a0:	e18bb219 	orr	fp, fp, r9, lsl r2
   103a4:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   103a8:	e2599001 	subs	r9, r9, #1
   103ac:	aafffffa 	bge	1039c <InvalidateDataCache+0x68>
   103b0:	e2544001 	subs	r4, r4, #1
   103b4:	aafffff7 	bge	10398 <InvalidateDataCache+0x64>
   103b8:	e28aa002 	add	sl, sl, #2
   103bc:	e153000a 	cmp	r3, sl
   103c0:	caffffe2 	bgt	10350 <InvalidateDataCache+0x1c>
   103c4:	e3a0a000 	mov	sl, #0
   103c8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   103cc:	f57ff04e 	dsb	st
   103d0:	f57ff06f 	isb	sy
   103d4:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   103d8:	e12fff1e 	bx	lr

000103dc <CleanDataCache>:
   103dc:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   103e0:	f57ff05f 	dmb	sy
   103e4:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   103e8:	e1a03ba0 	lsr	r3, r0, #23
   103ec:	e213300e 	ands	r3, r3, #14
   103f0:	0a00001d 	beq	1046c <CleanDataCache+0x90>
   103f4:	e3a0a000 	mov	sl, #0
   103f8:	e08a20aa 	add	r2, sl, sl, lsr #1
   103fc:	e1a01230 	lsr	r1, r0, r2
   10400:	e2011007 	and	r1, r1, #7
   10404:	e3510002 	cmp	r1, #2
   10408:	ba000014 	blt	10460 <CleanDataCache+0x84>
   1040c:	e10f9000 	mrs	r9, CPSR
   10410:	f10c0080 	cpsid	i
   10414:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10418:	f57ff06f 	isb	sy
   1041c:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   10420:	e121f009 	msr	CPSR_c, r9
   10424:	e2012007 	and	r2, r1, #7
   10428:	e2822004 	add	r2, r2, #4
   1042c:	e30043ff 	movw	r4, #1023	; 0x3ff
   10430:	e01441a1 	ands	r4, r4, r1, lsr #3
   10434:	e16f5f14 	clz	r5, r4
   10438:	e3077fff 	movw	r7, #32767	; 0x7fff
   1043c:	e01776a1 	ands	r7, r7, r1, lsr #13
   10440:	e1a09007 	mov	r9, r7
   10444:	e18ab514 	orr	fp, sl, r4, lsl r5
   10448:	e18bb219 	orr	fp, fp, r9, lsl r2
   1044c:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   10450:	e2599001 	subs	r9, r9, #1
   10454:	aafffffa 	bge	10444 <CleanDataCache+0x68>
   10458:	e2544001 	subs	r4, r4, #1
   1045c:	aafffff7 	bge	10440 <CleanDataCache+0x64>
   10460:	e28aa002 	add	sl, sl, #2
   10464:	e153000a 	cmp	r3, sl
   10468:	caffffe2 	bgt	103f8 <CleanDataCache+0x1c>
   1046c:	e3a0a000 	mov	sl, #0
   10470:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10474:	f57ff04e 	dsb	st
   10478:	f57ff06f 	isb	sy
   1047c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   10480:	e12fff1e 	bx	lr

00010484 <CleanAndInvalidateDataCacheRange>:
   10484:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   10488:	e1a03823 	lsr	r3, r3, #16
   1048c:	e203300f 	and	r3, r3, #15
   10490:	e3a02004 	mov	r2, #4
   10494:	e1a02312 	lsl	r2, r2, r3
   10498:	e0801001 	add	r1, r0, r1
   1049c:	e2423001 	sub	r3, r2, #1
   104a0:	e1c00003 	bic	r0, r0, r3
   104a4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   104a8:	e0800002 	add	r0, r0, r2
   104ac:	e1500001 	cmp	r0, r1
   104b0:	3afffffb 	bcc	104a4 <CleanAndInvalidateDataCacheRange+0x20>
   104b4:	f57ff04e 	dsb	st
   104b8:	e12fff1e 	bx	lr

000104bc <CCPUThrottle::IsDynamic() const>:
   104bc:	e5900000 	ldr	r0, [r0]
   104c0:	e12fff1e 	bx	lr

000104c4 <CCPUThrottle::GetMinClockRate() const>:
   104c4:	e5900004 	ldr	r0, [r0, #4]
   104c8:	e12fff1e 	bx	lr

000104cc <CCPUThrottle::GetMaxClockRate() const>:
   104cc:	e5900008 	ldr	r0, [r0, #8]
   104d0:	e12fff1e 	bx	lr

000104d4 <CCPUThrottle::GetMaxTemperature() const>:
   104d4:	e590200c 	ldr	r2, [r0, #12]
   104d8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
   104dc:	e3413062 	movt	r3, #4194	; 0x1062
   104e0:	e2822f7d 	add	r2, r2, #500	; 0x1f4
   104e4:	e0832392 	umull	r2, r3, r2, r3
   104e8:	e1a00323 	lsr	r0, r3, #6
   104ec:	e12fff1e 	bx	lr

000104f0 <CCPUThrottle::Get()>:
   104f0:	e92d4010 	push	{r4, lr}
   104f4:	e3034fcc 	movw	r4, #16332	; 0x3fcc
   104f8:	e3404001 	movt	r4, #1
   104fc:	e5940000 	ldr	r0, [r4]
   10500:	e3500000 	cmp	r0, #0
   10504:	18bd8010 	popne	{r4, pc}
   10508:	e3a020ee 	mov	r2, #238	; 0xee
   1050c:	e3031a88 	movw	r1, #14984	; 0x3a88
   10510:	e3010e74 	movw	r0, #7796	; 0x1e74
   10514:	e3401001 	movt	r1, #1
   10518:	e3400001 	movt	r0, #1
   1051c:	ebfff25f 	bl	cea0 <assertion_failed>
   10520:	e5940000 	ldr	r0, [r4]
   10524:	e8bd8010 	pop	{r4, pc}

00010528 <CCPUThrottle::SetToSetDelay()>:
   10528:	e92d4010 	push	{r4, lr}
   1052c:	e1a04000 	mov	r4, r0
   10530:	ebffe874 	bl	a708 <CTimer::GetClockTicks()>
   10534:	e5943018 	ldr	r3, [r4, #24]
   10538:	e3002162 	movw	r2, #354	; 0x162
   1053c:	e0400003 	sub	r0, r0, r3
   10540:	e1500002 	cmp	r0, r2
   10544:	8a000002 	bhi	10554 <CCPUThrottle::SetToSetDelay()+0x2c>
   10548:	e2600e16 	rsb	r0, r0, #352	; 0x160
   1054c:	e2800003 	add	r0, r0, #3
   10550:	ebffea83 	bl	af64 <CTimer::SimpleusDelay(unsigned int)>
   10554:	ebffe86b 	bl	a708 <CTimer::GetClockTicks()>
   10558:	e5840018 	str	r0, [r4, #24]
   1055c:	e8bd8010 	pop	{r4, pc}

00010560 <CCPUThrottle::GetClockRate(unsigned int)>:
   10560:	e92d4010 	push	{r4, lr}
   10564:	e24dd028 	sub	sp, sp, #40	; 0x28
   10568:	e1a04000 	mov	r4, r0
   1056c:	e28d000c 	add	r0, sp, #12
   10570:	ebffe31a 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
   10574:	e1a01004 	mov	r1, r4
   10578:	e3a03014 	mov	r3, #20
   1057c:	e28d000c 	add	r0, sp, #12
   10580:	e3a02004 	mov	r2, #4
   10584:	e58d2000 	str	r2, [sp]
   10588:	e08d2003 	add	r2, sp, r3
   1058c:	e3a0c003 	mov	ip, #3
   10590:	e58dc020 	str	ip, [sp, #32]
   10594:	ebffe359 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10598:	e2504000 	subs	r4, r0, #0
   1059c:	e28d000c 	add	r0, sp, #12
   105a0:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   105a4:	ebffe313 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
   105a8:	e1a00004 	mov	r0, r4
   105ac:	e28dd028 	add	sp, sp, #40	; 0x28
   105b0:	e8bd8010 	pop	{r4, pc}

000105b4 <CCPUThrottle::GetClockRate() const>:
   105b4:	e3a00002 	mov	r0, #2
   105b8:	e3400003 	movt	r0, #3
   105bc:	eaffffe7 	b	10560 <CCPUThrottle::GetClockRate(unsigned int)>

000105c0 <CCPUThrottle::GetTemperature(unsigned int)>:
   105c0:	e92d4010 	push	{r4, lr}
   105c4:	e24dd028 	sub	sp, sp, #40	; 0x28
   105c8:	e1a04000 	mov	r4, r0
   105cc:	e28d000c 	add	r0, sp, #12
   105d0:	ebffe302 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
   105d4:	e1a01004 	mov	r1, r4
   105d8:	e3a03014 	mov	r3, #20
   105dc:	e28d000c 	add	r0, sp, #12
   105e0:	e3a02004 	mov	r2, #4
   105e4:	e58d2000 	str	r2, [sp]
   105e8:	e08d2003 	add	r2, sp, r3
   105ec:	e3a0c000 	mov	ip, #0
   105f0:	e58dc020 	str	ip, [sp, #32]
   105f4:	ebffe341 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   105f8:	e2504000 	subs	r4, r0, #0
   105fc:	e28d000c 	add	r0, sp, #12
   10600:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   10604:	ebffe2fb 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
   10608:	e1a00004 	mov	r0, r4
   1060c:	e28dd028 	add	sp, sp, #40	; 0x28
   10610:	e8bd8010 	pop	{r4, pc}

00010614 <CCPUThrottle::GetTemperature() const>:
   10614:	e92d4010 	push	{r4, lr}
   10618:	e3a00006 	mov	r0, #6
   1061c:	e3400003 	movt	r0, #3
   10620:	ebffffe6 	bl	105c0 <CCPUThrottle::GetTemperature(unsigned int)>
   10624:	e3043dd3 	movw	r3, #19923	; 0x4dd3
   10628:	e3413062 	movt	r3, #4194	; 0x1062
   1062c:	e2800f7d 	add	r0, r0, #500	; 0x1f4
   10630:	e0810390 	umull	r0, r1, r0, r3
   10634:	e1a00321 	lsr	r0, r1, #6
   10638:	e8bd8010 	pop	{r4, pc}

0001063c <CCPUThrottle::DumpStatus(int)>:
   1063c:	e92d4f70 	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   10640:	e24dd008 	sub	sp, sp, #8
   10644:	e1a04000 	mov	r4, r0
   10648:	e1a05001 	mov	r5, r1
   1064c:	ebfff398 	bl	d4b4 <CLogger::Get()>
   10650:	e2506000 	subs	r6, r0, #0
   10654:	0a000056 	beq	107b4 <CCPUThrottle::DumpStatus(int)+0x178>
   10658:	e3550000 	cmp	r5, #0
   1065c:	0a000009 	beq	10688 <CCPUThrottle::DumpStatus(int)+0x4c>
   10660:	e5943000 	ldr	r3, [r4]
   10664:	e3530000 	cmp	r3, #0
   10668:	1a000027 	bne	1070c <CCPUThrottle::DumpStatus(int)+0xd0>
   1066c:	e3033b08 	movw	r3, #15112	; 0x3b08
   10670:	e3031a7c 	movw	r1, #14972	; 0x3a7c
   10674:	e3403001 	movt	r3, #1
   10678:	e3401001 	movt	r1, #1
   1067c:	e3a02004 	mov	r2, #4
   10680:	e1a00006 	mov	r0, r6
   10684:	ebfff466 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10688:	e3a00002 	mov	r0, #2
   1068c:	e3400003 	movt	r0, #3
   10690:	ebffffb2 	bl	10560 <CCPUThrottle::GetClockRate(unsigned int)>
   10694:	e30d4e83 	movw	r4, #56963	; 0xde83
   10698:	e344431b 	movt	r4, #17179	; 0x431b
   1069c:	e3a02004 	mov	r2, #4
   106a0:	e3033b24 	movw	r3, #15140	; 0x3b24
   106a4:	e3031a7c 	movw	r1, #14972	; 0x3a7c
   106a8:	e3403001 	movt	r3, #1
   106ac:	e3401001 	movt	r1, #1
   106b0:	e0854490 	umull	r4, r5, r0, r4
   106b4:	e1a00006 	mov	r0, r6
   106b8:	e1a0c925 	lsr	ip, r5, #18
   106bc:	e58dc000 	str	ip, [sp]
   106c0:	ebfff457 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   106c4:	e3a00006 	mov	r0, #6
   106c8:	e3400003 	movt	r0, #3
   106cc:	ebffffbb 	bl	105c0 <CCPUThrottle::GetTemperature(unsigned int)>
   106d0:	e304cdd3 	movw	ip, #19923	; 0x4dd3
   106d4:	e341c062 	movt	ip, #4194	; 0x1062
   106d8:	e3a02004 	mov	r2, #4
   106dc:	e3033b44 	movw	r3, #15172	; 0x3b44
   106e0:	e3031a7c 	movw	r1, #14972	; 0x3a7c
   106e4:	e3403001 	movt	r3, #1
   106e8:	e3401001 	movt	r1, #1
   106ec:	e2804f7d 	add	r4, r0, #500	; 0x1f4
   106f0:	e1a00006 	mov	r0, r6
   106f4:	e0854c94 	umull	r4, r5, r4, ip
   106f8:	e1a0c325 	lsr	ip, r5, #6
   106fc:	e58dc000 	str	ip, [sp]
   10700:	ebfff447 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10704:	e28dd008 	add	sp, sp, #8
   10708:	e8bd8f70 	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1070c:	e594a008 	ldr	sl, [r4, #8]
   10710:	e30d2e83 	movw	r2, #56963	; 0xde83
   10714:	e5948004 	ldr	r8, [r4, #4]
   10718:	e344231b 	movt	r2, #17179	; 0x431b
   1071c:	e1a00006 	mov	r0, r6
   10720:	e3033aa8 	movw	r3, #15016	; 0x3aa8
   10724:	e08ba29a 	umull	sl, fp, sl, r2
   10728:	e3403001 	movt	r3, #1
   1072c:	e0898298 	umull	r8, r9, r8, r2
   10730:	e3031a7c 	movw	r1, #14972	; 0x3a7c
   10734:	e3401001 	movt	r1, #1
   10738:	e3045dd3 	movw	r5, #19923	; 0x4dd3
   1073c:	e1a0292b 	lsr	r2, fp, #18
   10740:	e58d2004 	str	r2, [sp, #4]
   10744:	e3a02004 	mov	r2, #4
   10748:	e3415062 	movt	r5, #4194	; 0x1062
   1074c:	e1a0c929 	lsr	ip, r9, #18
   10750:	e58dc000 	str	ip, [sp]
   10754:	ebfff432 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10758:	e594800c 	ldr	r8, [r4, #12]
   1075c:	e1a00006 	mov	r0, r6
   10760:	e3a02004 	mov	r2, #4
   10764:	e3033ac8 	movw	r3, #15048	; 0x3ac8
   10768:	e3031a7c 	movw	r1, #14972	; 0x3a7c
   1076c:	e0898598 	umull	r8, r9, r8, r5
   10770:	e3403001 	movt	r3, #1
   10774:	e3401001 	movt	r1, #1
   10778:	e1a0c329 	lsr	ip, r9, #6
   1077c:	e58dc000 	str	ip, [sp]
   10780:	ebfff427 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10784:	e5944010 	ldr	r4, [r4, #16]
   10788:	e3033ae8 	movw	r3, #15080	; 0x3ae8
   1078c:	e3031a7c 	movw	r1, #14972	; 0x3a7c
   10790:	e3403001 	movt	r3, #1
   10794:	e3401001 	movt	r1, #1
   10798:	e0854594 	umull	r4, r5, r4, r5
   1079c:	e3a02004 	mov	r2, #4
   107a0:	e1a00006 	mov	r0, r6
   107a4:	e1a0c325 	lsr	ip, r5, #6
   107a8:	e58dc000 	str	ip, [sp]
   107ac:	ebfff41c 	bl	d824 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   107b0:	eaffffb4 	b	10688 <CCPUThrottle::DumpStatus(int)+0x4c>
   107b4:	e3031a88 	movw	r1, #14984	; 0x3a88
   107b8:	e3030a98 	movw	r0, #15000	; 0x3a98
   107bc:	e3401001 	movt	r1, #1
   107c0:	e3400001 	movt	r0, #1
   107c4:	e3a020d1 	mov	r2, #209	; 0xd1
   107c8:	ebfff1b4 	bl	cea0 <assertion_failed>
   107cc:	eaffffa1 	b	10658 <CCPUThrottle::DumpStatus(int)+0x1c>

000107d0 <CCPUThrottle::SetClockRate(unsigned int, int)>:
   107d0:	e92d4030 	push	{r4, r5, lr}
   107d4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   107d8:	e1a05000 	mov	r5, r0
   107dc:	e28d0008 	add	r0, sp, #8
   107e0:	e1a04001 	mov	r4, r1
   107e4:	ebffe27d 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
   107e8:	e2944000 	adds	r4, r4, #0
   107ec:	e28d2010 	add	r2, sp, #16
   107f0:	e28d0008 	add	r0, sp, #8
   107f4:	e3a0300c 	mov	r3, #12
   107f8:	e3081002 	movw	r1, #32770	; 0x8002
   107fc:	e58d3000 	str	r3, [sp]
   10800:	e3401003 	movt	r1, #3
   10804:	e3a03018 	mov	r3, #24
   10808:	13a04001 	movne	r4, #1
   1080c:	e3a0c003 	mov	ip, #3
   10810:	e58d4024 	str	r4, [sp, #36]	; 0x24
   10814:	e58dc01c 	str	ip, [sp, #28]
   10818:	e58d5020 	str	r5, [sp, #32]
   1081c:	ebffe2b7 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10820:	e1a04000 	mov	r4, r0
   10824:	e28d0008 	add	r0, sp, #8
   10828:	ebffe272 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
   1082c:	e1a00004 	mov	r0, r4
   10830:	e28dd02c 	add	sp, sp, #44	; 0x2c
   10834:	e8bd8030 	pop	{r4, r5, pc}

00010838 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)>:
   10838:	e5903000 	ldr	r3, [r0]
   1083c:	e92d4070 	push	{r4, r5, r6, lr}
   10840:	e3530000 	cmp	r3, #0
   10844:	e1a04000 	mov	r4, r0
   10848:	e1a05001 	mov	r5, r1
   1084c:	e1a06002 	mov	r6, r2
   10850:	0a000018 	beq	108b8 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)+0x80>
   10854:	e1a00004 	mov	r0, r4
   10858:	ebffff32 	bl	10528 <CCPUThrottle::SetToSetDelay()>
   1085c:	e3550000 	cmp	r5, #0
   10860:	0a000012 	beq	108b0 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)+0x78>
   10864:	e3550001 	cmp	r5, #1
   10868:	1a000008 	bne	10890 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)+0x58>
   1086c:	e5940008 	ldr	r0, [r4, #8]
   10870:	e3a01000 	mov	r1, #0
   10874:	ebffffd5 	bl	107d0 <CCPUThrottle::SetClockRate(unsigned int, int)>
   10878:	e3500000 	cmp	r0, #0
   1087c:	08bd8070 	popeq	{r4, r5, r6, pc}
   10880:	e3560000 	cmp	r6, #0
   10884:	1a000012 	bne	108d4 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)+0x9c>
   10888:	e3a00001 	mov	r0, #1
   1088c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10890:	e3a02f42 	mov	r2, #264	; 0x108
   10894:	e3031a88 	movw	r1, #14984	; 0x3a88
   10898:	e30306f8 	movw	r0, #14072	; 0x36f8
   1089c:	e3401001 	movt	r1, #1
   108a0:	e3400001 	movt	r0, #1
   108a4:	ebfff17d 	bl	cea0 <assertion_failed>
   108a8:	e3a00000 	mov	r0, #0
   108ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   108b0:	e5940004 	ldr	r0, [r4, #4]
   108b4:	eaffffed 	b	10870 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)+0x38>
   108b8:	e3031a88 	movw	r1, #14984	; 0x3a88
   108bc:	e3030b60 	movw	r0, #15200	; 0x3b60
   108c0:	e3401001 	movt	r1, #1
   108c4:	e3400001 	movt	r0, #1
   108c8:	e3a020f4 	mov	r2, #244	; 0xf4
   108cc:	ebfff173 	bl	cea0 <assertion_failed>
   108d0:	eaffffdf 	b	10854 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)+0x1c>
   108d4:	e3000163 	movw	r0, #355	; 0x163
   108d8:	ebffe9a1 	bl	af64 <CTimer::SimpleusDelay(unsigned int)>
   108dc:	e3a00001 	mov	r0, #1
   108e0:	e8bd8070 	pop	{r4, r5, r6, pc}

000108e4 <CCPUThrottle::CCPUThrottle(TCPUSpeed)>:
   108e4:	e92d4070 	push	{r4, r5, r6, lr}
   108e8:	e3035fcc 	movw	r5, #16332	; 0x3fcc
   108ec:	e3405001 	movt	r5, #1
   108f0:	e1a06001 	mov	r6, r1
   108f4:	e30e2a60 	movw	r2, #60000	; 0xea60
   108f8:	e3043c08 	movw	r3, #19464	; 0x4c08
   108fc:	e5951000 	ldr	r1, [r5]
   10900:	e3403001 	movt	r3, #1
   10904:	e5802010 	str	r2, [r0, #16]
   10908:	e1a04000 	mov	r4, r0
   1090c:	e3510000 	cmp	r1, #0
   10910:	e3a02002 	mov	r2, #2
   10914:	e580300c 	str	r3, [r0, #12]
   10918:	e3a03000 	mov	r3, #0
   1091c:	e5c02014 	strb	r2, [r0, #20]
   10920:	e3a02f96 	mov	r2, #600	; 0x258
   10924:	e5803000 	str	r3, [r0]
   10928:	e5803018 	str	r3, [r0, #24]
   1092c:	e580301c 	str	r3, [r0, #28]
   10930:	e5802004 	str	r2, [r0, #4]
   10934:	e5802008 	str	r2, [r0, #8]
   10938:	0a000005 	beq	10954 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x70>
   1093c:	e3031a88 	movw	r1, #14984	; 0x3a88
   10940:	e3010d48 	movw	r0, #7496	; 0x1d48
   10944:	e3401001 	movt	r1, #1
   10948:	e3400001 	movt	r0, #1
   1094c:	e3a0202b 	mov	r2, #43	; 0x2b
   10950:	ebfff152 	bl	cea0 <assertion_failed>
   10954:	e3560002 	cmp	r6, #2
   10958:	e5854000 	str	r4, [r5]
   1095c:	0a000026 	beq	109fc <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x118>
   10960:	ebffeb23 	bl	b5f4 <CKernelOptions::Get()>
   10964:	ebffeb20 	bl	b5ec <CKernelOptions::GetSoCMaxTemp() const>
   10968:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   1096c:	e0030093 	mul	r3, r3, r0
   10970:	e3a00007 	mov	r0, #7
   10974:	e3400003 	movt	r0, #3
   10978:	e5843010 	str	r3, [r4, #16]
   1097c:	ebfffef7 	bl	10560 <CCPUThrottle::GetClockRate(unsigned int)>
   10980:	e3500000 	cmp	r0, #0
   10984:	e5840004 	str	r0, [r4, #4]
   10988:	1a000001 	bne	10994 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0xb0>
   1098c:	e1a00004 	mov	r0, r4
   10990:	e8bd8070 	pop	{r4, r5, r6, pc}
   10994:	e3a00004 	mov	r0, #4
   10998:	e3400003 	movt	r0, #3
   1099c:	ebfffeef 	bl	10560 <CCPUThrottle::GetClockRate(unsigned int)>
   109a0:	e3500000 	cmp	r0, #0
   109a4:	e5840008 	str	r0, [r4, #8]
   109a8:	0afffff7 	beq	1098c <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0xa8>
   109ac:	e3a0000a 	mov	r0, #10
   109b0:	e3400003 	movt	r0, #3
   109b4:	ebffff01 	bl	105c0 <CCPUThrottle::GetTemperature(unsigned int)>
   109b8:	e3500000 	cmp	r0, #0
   109bc:	e584000c 	str	r0, [r4, #12]
   109c0:	0afffff1 	beq	1098c <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0xa8>
   109c4:	e5943010 	ldr	r3, [r4, #16]
   109c8:	e1500003 	cmp	r0, r3
   109cc:	3a000016 	bcc	10a2c <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x148>
   109d0:	e994000c 	ldmib	r4, {r2, r3}
   109d4:	e1520003 	cmp	r2, r3
   109d8:	2affffeb 	bcs	1098c <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0xa8>
   109dc:	e3a02001 	mov	r2, #1
   109e0:	e1a01006 	mov	r1, r6
   109e4:	e5842000 	str	r2, [r4]
   109e8:	e1a00004 	mov	r0, r4
   109ec:	ebffff91 	bl	10838 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)>
   109f0:	e3500000 	cmp	r0, #0
   109f4:	15c46014 	strbne	r6, [r4, #20]
   109f8:	eaffffe3 	b	1098c <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0xa8>
   109fc:	ebffeafc 	bl	b5f4 <CKernelOptions::Get()>
   10a00:	ebffeaf7 	bl	b5e4 <CKernelOptions::GetCPUSpeed() const>
   10a04:	e3500001 	cmp	r0, #1
   10a08:	e1a06000 	mov	r6, r0
   10a0c:	daffffd3 	ble	10960 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x7c>
   10a10:	e3031a88 	movw	r1, #14984	; 0x3a88
   10a14:	e3030b6c 	movw	r0, #15212	; 0x3b6c
   10a18:	e3401001 	movt	r1, #1
   10a1c:	e3400001 	movt	r0, #1
   10a20:	e3a02032 	mov	r2, #50	; 0x32
   10a24:	ebfff11d 	bl	cea0 <assertion_failed>
   10a28:	eaffffcc 	b	10960 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x7c>
   10a2c:	e3031a88 	movw	r1, #14984	; 0x3a88
   10a30:	e3030b8c 	movw	r0, #15244	; 0x3b8c
   10a34:	e3401001 	movt	r1, #1
   10a38:	e3400001 	movt	r0, #1
   10a3c:	e3a02049 	mov	r2, #73	; 0x49
   10a40:	ebfff116 	bl	cea0 <assertion_failed>
   10a44:	eaffffe1 	b	109d0 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0xec>

00010a48 <CCPUThrottle::SetOnTemperature() [clone .part.2]>:
   10a48:	e92d4070 	push	{r4, r5, r6, lr}
   10a4c:	e1a04000 	mov	r4, r0
   10a50:	e3a00002 	mov	r0, #2
   10a54:	e3400003 	movt	r0, #3
   10a58:	ebfffec0 	bl	10560 <CCPUThrottle::GetClockRate(unsigned int)>
   10a5c:	e2505000 	subs	r5, r0, #0
   10a60:	1a000001 	bne	10a6c <CCPUThrottle::SetOnTemperature() [clone .part.2]+0x24>
   10a64:	e3a00000 	mov	r0, #0
   10a68:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a6c:	e3a00006 	mov	r0, #6
   10a70:	e3400003 	movt	r0, #3
   10a74:	ebfffed1 	bl	105c0 <CCPUThrottle::GetTemperature(unsigned int)>
   10a78:	e2506000 	subs	r6, r0, #0
   10a7c:	0afffff8 	beq	10a64 <CCPUThrottle::SetOnTemperature() [clone .part.2]+0x1c>
   10a80:	e5943010 	ldr	r3, [r4, #16]
   10a84:	e3092c3f 	movw	r2, #39999	; 0x9c3f
   10a88:	e1530002 	cmp	r3, r2
   10a8c:	9a000014 	bls	10ae4 <CCPUThrottle::SetOnTemperature() [clone .part.2]+0x9c>
   10a90:	e594200c 	ldr	r2, [r4, #12]
   10a94:	e1520003 	cmp	r2, r3
   10a98:	35842010 	strcc	r2, [r4, #16]
   10a9c:	31a03002 	movcc	r3, r2
   10aa0:	e1560003 	cmp	r6, r3
   10aa4:	9a000002 	bls	10ab4 <CCPUThrottle::SetOnTemperature() [clone .part.2]+0x6c>
   10aa8:	e5942004 	ldr	r2, [r4, #4]
   10aac:	e1550002 	cmp	r5, r2
   10ab0:	8a000013 	bhi	10b04 <CCPUThrottle::SetOnTemperature() [clone .part.2]+0xbc>
   10ab4:	e2433ebb 	sub	r3, r3, #2992	; 0xbb0
   10ab8:	e2433008 	sub	r3, r3, #8
   10abc:	e1560003 	cmp	r6, r3
   10ac0:	2a000005 	bcs	10adc <CCPUThrottle::SetOnTemperature() [clone .part.2]+0x94>
   10ac4:	e5943008 	ldr	r3, [r4, #8]
   10ac8:	e1550003 	cmp	r5, r3
   10acc:	2a000002 	bcs	10adc <CCPUThrottle::SetOnTemperature() [clone .part.2]+0x94>
   10ad0:	e5d41014 	ldrb	r1, [r4, #20]
   10ad4:	e3510001 	cmp	r1, #1
   10ad8:	0a000010 	beq	10b20 <CCPUThrottle::SetOnTemperature() [clone .part.2]+0xd8>
   10adc:	e3a00001 	mov	r0, #1
   10ae0:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ae4:	e3031a88 	movw	r1, #14984	; 0x3a88
   10ae8:	e3030bb8 	movw	r0, #15288	; 0x3bb8
   10aec:	e3401001 	movt	r1, #1
   10af0:	e3400001 	movt	r0, #1
   10af4:	e3a020a4 	mov	r2, #164	; 0xa4
   10af8:	ebfff0e8 	bl	cea0 <assertion_failed>
   10afc:	e5943010 	ldr	r3, [r4, #16]
   10b00:	eaffffe2 	b	10a90 <CCPUThrottle::SetOnTemperature() [clone .part.2]+0x48>
   10b04:	e3a02000 	mov	r2, #0
   10b08:	e1a00004 	mov	r0, r4
   10b0c:	e1a01002 	mov	r1, r2
   10b10:	ebffff48 	bl	10838 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)>
   10b14:	e2900000 	adds	r0, r0, #0
   10b18:	13a00001 	movne	r0, #1
   10b1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b20:	e1a00004 	mov	r0, r4
   10b24:	e3a02000 	mov	r2, #0
   10b28:	ebffff42 	bl	10838 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)>
   10b2c:	e2900000 	adds	r0, r0, #0
   10b30:	13a00001 	movne	r0, #1
   10b34:	e8bd8070 	pop	{r4, r5, r6, pc}

00010b38 <CCPUThrottle::SetOnTemperature()>:
   10b38:	e5903000 	ldr	r3, [r0]
   10b3c:	e3530000 	cmp	r3, #0
   10b40:	1a000001 	bne	10b4c <CCPUThrottle::SetOnTemperature()+0x14>
   10b44:	e3a00001 	mov	r0, #1
   10b48:	e12fff1e 	bx	lr
   10b4c:	eaffffbd 	b	10a48 <CCPUThrottle::SetOnTemperature() [clone .part.2]>

00010b50 <CCPUThrottle::Update()>:
   10b50:	e92d4070 	push	{r4, r5, r6, lr}
   10b54:	e1a04000 	mov	r4, r0
   10b58:	ebffe6ea 	bl	a708 <CTimer::GetClockTicks()>
   10b5c:	e594301c 	ldr	r3, [r4, #28]
   10b60:	e30028ff 	movw	r2, #2303	; 0x8ff
   10b64:	e340203d 	movt	r2, #61	; 0x3d
   10b68:	e0403003 	sub	r3, r0, r3
   10b6c:	e1530002 	cmp	r3, r2
   10b70:	9a000006 	bls	10b90 <CCPUThrottle::Update()+0x40>
   10b74:	e5943000 	ldr	r3, [r4]
   10b78:	e1a05000 	mov	r5, r0
   10b7c:	e3530000 	cmp	r3, #0
   10b80:	03a00001 	moveq	r0, #1
   10b84:	1a000003 	bne	10b98 <CCPUThrottle::Update()+0x48>
   10b88:	e584501c 	str	r5, [r4, #28]
   10b8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b90:	e3a00001 	mov	r0, #1
   10b94:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b98:	e1a00004 	mov	r0, r4
   10b9c:	ebffffa9 	bl	10a48 <CCPUThrottle::SetOnTemperature() [clone .part.2]>
   10ba0:	e584501c 	str	r5, [r4, #28]
   10ba4:	e8bd8070 	pop	{r4, r5, r6, pc}

00010ba8 <CCPUThrottle::SetSpeed(TCPUSpeed, int)>:
   10ba8:	e590c000 	ldr	ip, [r0]
   10bac:	e35c0000 	cmp	ip, #0
   10bb0:	1a000001 	bne	10bbc <CCPUThrottle::SetSpeed(TCPUSpeed, int)+0x14>
   10bb4:	e3a00001 	mov	r0, #1
   10bb8:	e12fff1e 	bx	lr
   10bbc:	e92d4070 	push	{r4, r5, r6, lr}
   10bc0:	e1a04000 	mov	r4, r0
   10bc4:	e1a05001 	mov	r5, r1
   10bc8:	ebffff1a 	bl	10838 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)>
   10bcc:	e3500000 	cmp	r0, #0
   10bd0:	1a000001 	bne	10bdc <CCPUThrottle::SetSpeed(TCPUSpeed, int)+0x34>
   10bd4:	e3a00002 	mov	r0, #2
   10bd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   10bdc:	e5d40014 	ldrb	r0, [r4, #20]
   10be0:	e5c45014 	strb	r5, [r4, #20]
   10be4:	e8bd8070 	pop	{r4, r5, r6, pc}

00010be8 <CCPUThrottle::~CCPUThrottle()>:
   10be8:	e5903000 	ldr	r3, [r0]
   10bec:	e92d4010 	push	{r4, lr}
   10bf0:	e3530000 	cmp	r3, #0
   10bf4:	e1a04000 	mov	r4, r0
   10bf8:	0a000002 	beq	10c08 <CCPUThrottle::~CCPUThrottle()+0x20>
   10bfc:	e3a02001 	mov	r2, #1
   10c00:	e3a01000 	mov	r1, #0
   10c04:	ebffff0b 	bl	10838 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, int)>
   10c08:	e3033fcc 	movw	r3, #16332	; 0x3fcc
   10c0c:	e3403001 	movt	r3, #1
   10c10:	e3a02000 	mov	r2, #0
   10c14:	e1a00004 	mov	r0, r4
   10c18:	e5832000 	str	r2, [r3]
   10c1c:	e8bd8010 	pop	{r4, pc}

00010c20 <CPtrList::CPtrList()>:
   10c20:	e3a02000 	mov	r2, #0
   10c24:	e5802000 	str	r2, [r0]
   10c28:	e12fff1e 	bx	lr

00010c2c <CPtrList::~CPtrList()>:
   10c2c:	e5903000 	ldr	r3, [r0]
   10c30:	e92d4010 	push	{r4, lr}
   10c34:	e3530000 	cmp	r3, #0
   10c38:	e1a04000 	mov	r4, r0
   10c3c:	0a000005 	beq	10c58 <CPtrList::~CPtrList()+0x2c>
   10c40:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10c44:	e3030be4 	movw	r0, #15332	; 0x3be4
   10c48:	e3401001 	movt	r1, #1
   10c4c:	e3400001 	movt	r0, #1
   10c50:	e3a0202a 	mov	r2, #42	; 0x2a
   10c54:	ebfff091 	bl	cea0 <assertion_failed>
   10c58:	e1a00004 	mov	r0, r4
   10c5c:	e8bd8010 	pop	{r4, pc}

00010c60 <CPtrList::GetFirst()>:
   10c60:	e5900000 	ldr	r0, [r0]
   10c64:	e12fff1e 	bx	lr

00010c68 <CPtrList::GetNext(TPtrListElement*)>:
   10c68:	e92d4010 	push	{r4, lr}
   10c6c:	e2514000 	subs	r4, r1, #0
   10c70:	0a00000c 	beq	10ca8 <CPtrList::GetNext(TPtrListElement*)+0x40>
   10c74:	e5942000 	ldr	r2, [r4]
   10c78:	e3043d43 	movw	r3, #19779	; 0x4d43
   10c7c:	e345304c 	movt	r3, #20556	; 0x504c
   10c80:	e1520003 	cmp	r2, r3
   10c84:	0a000005 	beq	10ca0 <CPtrList::GetNext(TPtrListElement*)+0x38>
   10c88:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10c8c:	e3030c04 	movw	r0, #15364	; 0x3c04
   10c90:	e3401001 	movt	r1, #1
   10c94:	e3400001 	movt	r0, #1
   10c98:	e3a02035 	mov	r2, #53	; 0x35
   10c9c:	ebfff07f 	bl	cea0 <assertion_failed>
   10ca0:	e5940008 	ldr	r0, [r4, #8]
   10ca4:	e8bd8010 	pop	{r4, pc}
   10ca8:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10cac:	e3030bf4 	movw	r0, #15348	; 0x3bf4
   10cb0:	e3401001 	movt	r1, #1
   10cb4:	e3400001 	movt	r0, #1
   10cb8:	e3a02034 	mov	r2, #52	; 0x34
   10cbc:	ebfff077 	bl	cea0 <assertion_failed>
   10cc0:	eaffffeb 	b	10c74 <CPtrList::GetNext(TPtrListElement*)+0xc>

00010cc4 <CPtrList::GetPtr(TPtrListElement*)>:
   10cc4:	e92d4010 	push	{r4, lr}
   10cc8:	e2514000 	subs	r4, r1, #0
   10ccc:	0a00000c 	beq	10d04 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   10cd0:	e5942000 	ldr	r2, [r4]
   10cd4:	e3043d43 	movw	r3, #19779	; 0x4d43
   10cd8:	e345304c 	movt	r3, #20556	; 0x504c
   10cdc:	e1520003 	cmp	r2, r3
   10ce0:	0a000005 	beq	10cfc <CPtrList::GetPtr(TPtrListElement*)+0x38>
   10ce4:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10ce8:	e3030c04 	movw	r0, #15364	; 0x3c04
   10cec:	e3401001 	movt	r1, #1
   10cf0:	e3400001 	movt	r0, #1
   10cf4:	e3a0203d 	mov	r2, #61	; 0x3d
   10cf8:	ebfff068 	bl	cea0 <assertion_failed>
   10cfc:	e594000c 	ldr	r0, [r4, #12]
   10d00:	e8bd8010 	pop	{r4, pc}
   10d04:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10d08:	e3030bf4 	movw	r0, #15348	; 0x3bf4
   10d0c:	e3401001 	movt	r1, #1
   10d10:	e3400001 	movt	r0, #1
   10d14:	e3a0203c 	mov	r2, #60	; 0x3c
   10d18:	ebfff060 	bl	cea0 <assertion_failed>
   10d1c:	eaffffeb 	b	10cd0 <CPtrList::GetPtr(TPtrListElement*)+0xc>

00010d20 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   10d20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10d24:	e1a06000 	mov	r6, r0
   10d28:	e3a00010 	mov	r0, #16
   10d2c:	e1a04001 	mov	r4, r1
   10d30:	e1a07002 	mov	r7, r2
   10d34:	ebffe565 	bl	a2d0 <operator new(unsigned int)>
   10d38:	e5961000 	ldr	r1, [r6]
   10d3c:	e3043d43 	movw	r3, #19779	; 0x4d43
   10d40:	e345304c 	movt	r3, #20556	; 0x504c
   10d44:	e3510000 	cmp	r1, #0
   10d48:	e1a05000 	mov	r5, r0
   10d4c:	e580700c 	str	r7, [r0, #12]
   10d50:	e5803000 	str	r3, [r0]
   10d54:	0a000029 	beq	10e00 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   10d58:	e3540000 	cmp	r4, #0
   10d5c:	0a00002e 	beq	10e1c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   10d60:	e5942000 	ldr	r2, [r4]
   10d64:	e3043d43 	movw	r3, #19779	; 0x4d43
   10d68:	e345304c 	movt	r3, #20556	; 0x504c
   10d6c:	e1520003 	cmp	r2, r3
   10d70:	0a000005 	beq	10d8c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
   10d74:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10d78:	e3030c44 	movw	r0, #15428	; 0x3c44
   10d7c:	e3401001 	movt	r1, #1
   10d80:	e3400001 	movt	r0, #1
   10d84:	e3a0204e 	mov	r2, #78	; 0x4e
   10d88:	ebfff044 	bl	cea0 <assertion_failed>
   10d8c:	e5963000 	ldr	r3, [r6]
   10d90:	e1540003 	cmp	r4, r3
   10d94:	0a000013 	beq	10de8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
   10d98:	e5943004 	ldr	r3, [r4, #4]
   10d9c:	e5854008 	str	r4, [r5, #8]
   10da0:	e3530000 	cmp	r3, #0
   10da4:	e5853004 	str	r3, [r5, #4]
   10da8:	0a00000c 	beq	10de0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   10dac:	e5931000 	ldr	r1, [r3]
   10db0:	e3042d43 	movw	r2, #19779	; 0x4d43
   10db4:	e345204c 	movt	r2, #20556	; 0x504c
   10db8:	e1510002 	cmp	r1, r2
   10dbc:	0a000006 	beq	10ddc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
   10dc0:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10dc4:	e3030c68 	movw	r0, #15464	; 0x3c68
   10dc8:	e3401001 	movt	r1, #1
   10dcc:	e3400001 	movt	r0, #1
   10dd0:	e3a02060 	mov	r2, #96	; 0x60
   10dd4:	ebfff031 	bl	cea0 <assertion_failed>
   10dd8:	e5943004 	ldr	r3, [r4, #4]
   10ddc:	e5835008 	str	r5, [r3, #8]
   10de0:	e5845004 	str	r5, [r4, #4]
   10de4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10de8:	e5845004 	str	r5, [r4, #4]
   10dec:	e3a03000 	mov	r3, #0
   10df0:	e5854008 	str	r4, [r5, #8]
   10df4:	e5865000 	str	r5, [r6]
   10df8:	e5853004 	str	r3, [r5, #4]
   10dfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10e00:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10e04:	e3030c28 	movw	r0, #15400	; 0x3c28
   10e08:	e3401001 	movt	r1, #1
   10e0c:	e3400001 	movt	r0, #1
   10e10:	e3a0204c 	mov	r2, #76	; 0x4c
   10e14:	ebfff021 	bl	cea0 <assertion_failed>
   10e18:	eaffffce 	b	10d58 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
   10e1c:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10e20:	e3030c38 	movw	r0, #15416	; 0x3c38
   10e24:	e3401001 	movt	r1, #1
   10e28:	e3400001 	movt	r0, #1
   10e2c:	e3a0204d 	mov	r2, #77	; 0x4d
   10e30:	ebfff01a 	bl	cea0 <assertion_failed>
   10e34:	eaffffc9 	b	10d60 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

00010e38 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   10e38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10e3c:	e1a06000 	mov	r6, r0
   10e40:	e3a00010 	mov	r0, #16
   10e44:	e1a05001 	mov	r5, r1
   10e48:	e1a07002 	mov	r7, r2
   10e4c:	ebffe51f 	bl	a2d0 <operator new(unsigned int)>
   10e50:	e3550000 	cmp	r5, #0
   10e54:	e3043d43 	movw	r3, #19779	; 0x4d43
   10e58:	e345304c 	movt	r3, #20556	; 0x504c
   10e5c:	e1a04000 	mov	r4, r0
   10e60:	e5803000 	str	r3, [r0]
   10e64:	e580700c 	str	r7, [r0, #12]
   10e68:	e5963000 	ldr	r3, [r6]
   10e6c:	0a000020 	beq	10ef4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   10e70:	e3530000 	cmp	r3, #0
   10e74:	0a00002b 	beq	10f28 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   10e78:	e5952000 	ldr	r2, [r5]
   10e7c:	e3043d43 	movw	r3, #19779	; 0x4d43
   10e80:	e345304c 	movt	r3, #20556	; 0x504c
   10e84:	e1520003 	cmp	r2, r3
   10e88:	0a000005 	beq	10ea4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   10e8c:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10e90:	e3030c90 	movw	r0, #15504	; 0x3c90
   10e94:	e3401001 	movt	r1, #1
   10e98:	e3400001 	movt	r0, #1
   10e9c:	e3a0207e 	mov	r2, #126	; 0x7e
   10ea0:	ebffeffe 	bl	cea0 <assertion_failed>
   10ea4:	e5953008 	ldr	r3, [r5, #8]
   10ea8:	e5845004 	str	r5, [r4, #4]
   10eac:	e3530000 	cmp	r3, #0
   10eb0:	e5843008 	str	r3, [r4, #8]
   10eb4:	0a00000c 	beq	10eec <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
   10eb8:	e5931000 	ldr	r1, [r3]
   10ebc:	e3042d43 	movw	r2, #19779	; 0x4d43
   10ec0:	e345204c 	movt	r2, #20556	; 0x504c
   10ec4:	e1510002 	cmp	r1, r2
   10ec8:	0a000006 	beq	10ee8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
   10ecc:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10ed0:	e3030cb4 	movw	r0, #15540	; 0x3cb4
   10ed4:	e3401001 	movt	r1, #1
   10ed8:	e3400001 	movt	r0, #1
   10edc:	e3a02085 	mov	r2, #133	; 0x85
   10ee0:	ebffefee 	bl	cea0 <assertion_failed>
   10ee4:	e5953008 	ldr	r3, [r5, #8]
   10ee8:	e5834004 	str	r4, [r3, #4]
   10eec:	e5854008 	str	r4, [r5, #8]
   10ef0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10ef4:	e3530000 	cmp	r3, #0
   10ef8:	0a000005 	beq	10f14 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   10efc:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10f00:	e3030be4 	movw	r0, #15332	; 0x3be4
   10f04:	e3401001 	movt	r1, #1
   10f08:	e3400001 	movt	r0, #1
   10f0c:	e3a02074 	mov	r2, #116	; 0x74
   10f10:	ebffefe2 	bl	cea0 <assertion_failed>
   10f14:	e3a03000 	mov	r3, #0
   10f18:	e5864000 	str	r4, [r6]
   10f1c:	e5843004 	str	r3, [r4, #4]
   10f20:	e5843008 	str	r3, [r4, #8]
   10f24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10f28:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10f2c:	e3030c28 	movw	r0, #15400	; 0x3c28
   10f30:	e3401001 	movt	r1, #1
   10f34:	e3400001 	movt	r0, #1
   10f38:	e3a0207d 	mov	r2, #125	; 0x7d
   10f3c:	ebffefd7 	bl	cea0 <assertion_failed>
   10f40:	eaffffcc 	b	10e78 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

00010f44 <CPtrList::Remove(TPtrListElement*)>:
   10f44:	e92d4070 	push	{r4, r5, r6, lr}
   10f48:	e2514000 	subs	r4, r1, #0
   10f4c:	e1a05000 	mov	r5, r0
   10f50:	0a000048 	beq	11078 <CPtrList::Remove(TPtrListElement*)+0x134>
   10f54:	e5942000 	ldr	r2, [r4]
   10f58:	e3043d43 	movw	r3, #19779	; 0x4d43
   10f5c:	e345304c 	movt	r3, #20556	; 0x504c
   10f60:	e1520003 	cmp	r2, r3
   10f64:	0a000005 	beq	10f80 <CPtrList::Remove(TPtrListElement*)+0x3c>
   10f68:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10f6c:	e3030c04 	movw	r0, #15364	; 0x3c04
   10f70:	e3401001 	movt	r1, #1
   10f74:	e3400001 	movt	r0, #1
   10f78:	e3a02090 	mov	r2, #144	; 0x90
   10f7c:	ebffefc7 	bl	cea0 <assertion_failed>
   10f80:	e5953000 	ldr	r3, [r5]
   10f84:	e1540003 	cmp	r4, r3
   10f88:	0a000027 	beq	1102c <CPtrList::Remove(TPtrListElement*)+0xe8>
   10f8c:	e5943004 	ldr	r3, [r4, #4]
   10f90:	e3530000 	cmp	r3, #0
   10f94:	0a00003e 	beq	11094 <CPtrList::Remove(TPtrListElement*)+0x150>
   10f98:	e5931000 	ldr	r1, [r3]
   10f9c:	e3042d43 	movw	r2, #19779	; 0x4d43
   10fa0:	e345204c 	movt	r2, #20556	; 0x504c
   10fa4:	e1510002 	cmp	r1, r2
   10fa8:	0a000006 	beq	10fc8 <CPtrList::Remove(TPtrListElement*)+0x84>
   10fac:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10fb0:	e3030d24 	movw	r0, #15652	; 0x3d24
   10fb4:	e3401001 	movt	r1, #1
   10fb8:	e3400001 	movt	r0, #1
   10fbc:	e3a0209f 	mov	r2, #159	; 0x9f
   10fc0:	ebffefb6 	bl	cea0 <assertion_failed>
   10fc4:	e5943004 	ldr	r3, [r4, #4]
   10fc8:	e5942008 	ldr	r2, [r4, #8]
   10fcc:	e5832008 	str	r2, [r3, #8]
   10fd0:	e5942008 	ldr	r2, [r4, #8]
   10fd4:	e3520000 	cmp	r2, #0
   10fd8:	0a00000d 	beq	11014 <CPtrList::Remove(TPtrListElement*)+0xd0>
   10fdc:	e5920000 	ldr	r0, [r2]
   10fe0:	e3041d43 	movw	r1, #19779	; 0x4d43
   10fe4:	e345104c 	movt	r1, #20556	; 0x504c
   10fe8:	e1500001 	cmp	r0, r1
   10fec:	0a000007 	beq	11010 <CPtrList::Remove(TPtrListElement*)+0xcc>
   10ff0:	e3a020a4 	mov	r2, #164	; 0xa4
   10ff4:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   10ff8:	e3030ce0 	movw	r0, #15584	; 0x3ce0
   10ffc:	e3401001 	movt	r1, #1
   11000:	e3400001 	movt	r0, #1
   11004:	ebffefa5 	bl	cea0 <assertion_failed>
   11008:	e5942008 	ldr	r2, [r4, #8]
   1100c:	e5943004 	ldr	r3, [r4, #4]
   11010:	e5823004 	str	r3, [r2, #4]
   11014:	e3a03000 	mov	r3, #0
   11018:	e1a00004 	mov	r0, r4
   1101c:	e5843000 	str	r3, [r4]
   11020:	e3a01010 	mov	r1, #16
   11024:	e8bd4070 	pop	{r4, r5, r6, lr}
   11028:	eaffe4ac 	b	a2e0 <operator delete(void*, unsigned int)>
   1102c:	e5943008 	ldr	r3, [r4, #8]
   11030:	e3530000 	cmp	r3, #0
   11034:	e5853000 	str	r3, [r5]
   11038:	0afffff5 	beq	11014 <CPtrList::Remove(TPtrListElement*)+0xd0>
   1103c:	e5931000 	ldr	r1, [r3]
   11040:	e3042d43 	movw	r2, #19779	; 0x4d43
   11044:	e345204c 	movt	r2, #20556	; 0x504c
   11048:	e1510002 	cmp	r1, r2
   1104c:	0a000006 	beq	1106c <CPtrList::Remove(TPtrListElement*)+0x128>
   11050:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   11054:	e3030ce0 	movw	r0, #15584	; 0x3ce0
   11058:	e3401001 	movt	r1, #1
   1105c:	e3400001 	movt	r0, #1
   11060:	e3a02098 	mov	r2, #152	; 0x98
   11064:	ebffef8d 	bl	cea0 <assertion_failed>
   11068:	e5943008 	ldr	r3, [r4, #8]
   1106c:	e3a02000 	mov	r2, #0
   11070:	e5832004 	str	r2, [r3, #4]
   11074:	eaffffe6 	b	11014 <CPtrList::Remove(TPtrListElement*)+0xd0>
   11078:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   1107c:	e3030bf4 	movw	r0, #15348	; 0x3bf4
   11080:	e3401001 	movt	r1, #1
   11084:	e3400001 	movt	r0, #1
   11088:	e3a0208f 	mov	r2, #143	; 0x8f
   1108c:	ebffef83 	bl	cea0 <assertion_failed>
   11090:	eaffffaf 	b	10f54 <CPtrList::Remove(TPtrListElement*)+0x10>
   11094:	e3031bd8 	movw	r1, #15320	; 0x3bd8
   11098:	e3030d0c 	movw	r0, #15628	; 0x3d0c
   1109c:	e3401001 	movt	r1, #1
   110a0:	e3400001 	movt	r0, #1
   110a4:	e3a0209e 	mov	r2, #158	; 0x9e
   110a8:	ebffef7c 	bl	cea0 <assertion_failed>
   110ac:	e5943004 	ldr	r3, [r4, #4]
   110b0:	eaffffb8 	b	10f98 <CPtrList::Remove(TPtrListElement*)+0x54>

000110b4 <CPtrList::Find(void*)>:
   110b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   110b8:	e5904000 	ldr	r4, [r0]
   110bc:	e3540000 	cmp	r4, #0
   110c0:	0a000016 	beq	11120 <CPtrList::Find(void*)+0x6c>
   110c4:	e3048d43 	movw	r8, #19779	; 0x4d43
   110c8:	e3037bd8 	movw	r7, #15320	; 0x3bd8
   110cc:	e3036c04 	movw	r6, #15364	; 0x3c04
   110d0:	e1a05001 	mov	r5, r1
   110d4:	e345804c 	movt	r8, #20556	; 0x504c
   110d8:	e3407001 	movt	r7, #1
   110dc:	e3406001 	movt	r6, #1
   110e0:	ea000002 	b	110f0 <CPtrList::Find(void*)+0x3c>
   110e4:	e5944008 	ldr	r4, [r4, #8]
   110e8:	e3540000 	cmp	r4, #0
   110ec:	0a00000b 	beq	11120 <CPtrList::Find(void*)+0x6c>
   110f0:	e5943000 	ldr	r3, [r4]
   110f4:	e3a020b3 	mov	r2, #179	; 0xb3
   110f8:	e1a01007 	mov	r1, r7
   110fc:	e1a00006 	mov	r0, r6
   11100:	e1530008 	cmp	r3, r8
   11104:	0a000000 	beq	1110c <CPtrList::Find(void*)+0x58>
   11108:	ebffef64 	bl	cea0 <assertion_failed>
   1110c:	e594300c 	ldr	r3, [r4, #12]
   11110:	e1530005 	cmp	r3, r5
   11114:	1afffff2 	bne	110e4 <CPtrList::Find(void*)+0x30>
   11118:	e1a00004 	mov	r0, r4
   1111c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11120:	e3a04000 	mov	r4, #0
   11124:	e1a00004 	mov	r0, r4
   11128:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001112c <mem_init>:
   1112c:	e0801001 	add	r1, r0, r1
   11130:	e3032fd0 	movw	r2, #16336	; 0x3fd0
   11134:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   11138:	e3402001 	movt	r2, #1
   1113c:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   11140:	e3500605 	cmp	r0, #5242880	; 0x500000
   11144:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   11148:	e582100c 	str	r1, [r2, #12]
   1114c:	33a00605 	movcc	r0, #5242880	; 0x500000
   11150:	e2411501 	sub	r1, r1, #4194304	; 0x400000
   11154:	e3c3300f 	bic	r3, r3, #15
   11158:	e5820000 	str	r0, [r2]
   1115c:	e982000a 	stmib	r2, {r1, r3}
   11160:	e12fff1e 	bx	lr

00011164 <mem_get_size>:
   11164:	e3033fd0 	movw	r3, #16336	; 0x3fd0
   11168:	e3403001 	movt	r3, #1
   1116c:	e5930004 	ldr	r0, [r3, #4]
   11170:	e5931000 	ldr	r1, [r3]
   11174:	e593200c 	ldr	r2, [r3, #12]
   11178:	e5933008 	ldr	r3, [r3, #8]
   1117c:	e0400001 	sub	r0, r0, r1
   11180:	e0423003 	sub	r3, r2, r3
   11184:	e0800003 	add	r0, r0, r3
   11188:	e12fff1e 	bx	lr

0001118c <malloc>:
   1118c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11190:	e3037fd0 	movw	r7, #16336	; 0x3fd0
   11194:	e3407001 	movt	r7, #1
   11198:	e1a05000 	mov	r5, r0
   1119c:	e5973000 	ldr	r3, [r7]
   111a0:	e3530000 	cmp	r3, #0
   111a4:	0a000053 	beq	112f8 <malloc+0x16c>
   111a8:	e5970010 	ldr	r0, [r7, #16]
   111ac:	e3500000 	cmp	r0, #0
   111b0:	1a00004b 	bne	112e4 <malloc+0x158>
   111b4:	e3034e9c 	movw	r4, #16028	; 0x3e9c
   111b8:	e3404001 	movt	r4, #1
   111bc:	e5943000 	ldr	r3, [r4]
   111c0:	e3530000 	cmp	r3, #0
   111c4:	0a000007 	beq	111e8 <malloc+0x5c>
   111c8:	e1550003 	cmp	r5, r3
   111cc:	8a000002 	bhi	111dc <malloc+0x50>
   111d0:	ea000011 	b	1121c <malloc+0x90>
   111d4:	e1530005 	cmp	r3, r5
   111d8:	2a00000f 	bcs	1121c <malloc+0x90>
   111dc:	e5b43008 	ldr	r3, [r4, #8]!
   111e0:	e3530000 	cmp	r3, #0
   111e4:	1afffffa 	bne	111d4 <malloc+0x48>
   111e8:	e5976000 	ldr	r6, [r7]
   111ec:	e285301f 	add	r3, r5, #31
   111f0:	e3c3300f 	bic	r3, r3, #15
   111f4:	e5972004 	ldr	r2, [r7, #4]
   111f8:	e0863003 	add	r3, r6, r3
   111fc:	e5873000 	str	r3, [r7]
   11200:	e1530002 	cmp	r3, r2
   11204:	9a000028 	bls	112ac <malloc+0x120>
   11208:	e5974010 	ldr	r4, [r7, #16]
   1120c:	e3540000 	cmp	r4, #0
   11210:	1a000035 	bne	112ec <malloc+0x160>
   11214:	e1a00004 	mov	r0, r4
   11218:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1121c:	e5946004 	ldr	r6, [r4, #4]
   11220:	e3560000 	cmp	r6, #0
   11224:	01a05003 	moveq	r5, r3
   11228:	0affffee 	beq	111e8 <malloc+0x5c>
   1122c:	e5962000 	ldr	r2, [r6]
   11230:	e3043d43 	movw	r3, #19779	; 0x4d43
   11234:	e344324c 	movt	r3, #16972	; 0x424c
   11238:	e1520003 	cmp	r2, r3
   1123c:	0a000005 	beq	11258 <malloc+0xcc>
   11240:	e3031d50 	movw	r1, #15696	; 0x3d50
   11244:	e3030d70 	movw	r0, #15728	; 0x3d70
   11248:	e3401001 	movt	r1, #1
   1124c:	e3400001 	movt	r0, #1
   11250:	e3a02089 	mov	r2, #137	; 0x89
   11254:	ebffef11 	bl	cea0 <assertion_failed>
   11258:	e5963008 	ldr	r3, [r6, #8]
   1125c:	e5843004 	str	r3, [r4, #4]
   11260:	e5973010 	ldr	r3, [r7, #16]
   11264:	e3530000 	cmp	r3, #0
   11268:	1a00001b 	bne	112dc <malloc+0x150>
   1126c:	e2864010 	add	r4, r6, #16
   11270:	e3a03000 	mov	r3, #0
   11274:	e314000f 	tst	r4, #15
   11278:	e5c63008 	strb	r3, [r6, #8]
   1127c:	e5c63009 	strb	r3, [r6, #9]
   11280:	e5c6300a 	strb	r3, [r6, #10]
   11284:	e5c6300b 	strb	r3, [r6, #11]
   11288:	0affffe1 	beq	11214 <malloc+0x88>
   1128c:	e3a020a1 	mov	r2, #161	; 0xa1
   11290:	e3031d50 	movw	r1, #15696	; 0x3d50
   11294:	e3030d94 	movw	r0, #15764	; 0x3d94
   11298:	e3401001 	movt	r1, #1
   1129c:	e3400001 	movt	r0, #1
   112a0:	ebffeefe 	bl	cea0 <assertion_failed>
   112a4:	e1a00004 	mov	r0, r4
   112a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   112ac:	e3a0304d 	mov	r3, #77	; 0x4d
   112b0:	e5c63001 	strb	r3, [r6, #1]
   112b4:	e3a03042 	mov	r3, #66	; 0x42
   112b8:	e5c63003 	strb	r3, [r6, #3]
   112bc:	e5973010 	ldr	r3, [r7, #16]
   112c0:	e3a02043 	mov	r2, #67	; 0x43
   112c4:	e5865004 	str	r5, [r6, #4]
   112c8:	e3530000 	cmp	r3, #0
   112cc:	e5c62000 	strb	r2, [r6]
   112d0:	e3a0204c 	mov	r2, #76	; 0x4c
   112d4:	e5c62002 	strb	r2, [r6, #2]
   112d8:	0affffe3 	beq	1126c <malloc+0xe0>
   112dc:	ebffe42f 	bl	a3a0 <LeaveCritical>
   112e0:	eaffffe1 	b	1126c <malloc+0xe0>
   112e4:	ebffe3ff 	bl	a2e8 <EnterCritical>
   112e8:	eaffffb1 	b	111b4 <malloc+0x28>
   112ec:	ebffe42b 	bl	a3a0 <LeaveCritical>
   112f0:	e3a04000 	mov	r4, #0
   112f4:	eaffffc6 	b	11214 <malloc+0x88>
   112f8:	e3031d50 	movw	r1, #15696	; 0x3d50
   112fc:	e3030d5c 	movw	r0, #15708	; 0x3d5c
   11300:	e3401001 	movt	r1, #1
   11304:	e3400001 	movt	r0, #1
   11308:	e3a0206f 	mov	r2, #111	; 0x6f
   1130c:	ebffeee3 	bl	cea0 <assertion_failed>
   11310:	eaffffa4 	b	111a8 <malloc+0x1c>

00011314 <free>:
   11314:	e92d4070 	push	{r4, r5, r6, lr}
   11318:	e2505000 	subs	r5, r0, #0
   1131c:	08bd8070 	popeq	{r4, r5, r6, pc}
   11320:	e5352010 	ldr	r2, [r5, #-16]!
   11324:	e3043d43 	movw	r3, #19779	; 0x4d43
   11328:	e344324c 	movt	r3, #16972	; 0x424c
   1132c:	e1520003 	cmp	r2, r3
   11330:	0a000005 	beq	1134c <free+0x38>
   11334:	e3031d50 	movw	r1, #15696	; 0x3d50
   11338:	e3030d70 	movw	r0, #15728	; 0x3d70
   1133c:	e3401001 	movt	r1, #1
   11340:	e3400001 	movt	r0, #1
   11344:	e3a020ae 	mov	r2, #174	; 0xae
   11348:	ebffeed4 	bl	cea0 <assertion_failed>
   1134c:	e3034e9c 	movw	r4, #16028	; 0x3e9c
   11350:	e3404001 	movt	r4, #1
   11354:	e5943000 	ldr	r3, [r4]
   11358:	e3530000 	cmp	r3, #0
   1135c:	08bd8070 	popeq	{r4, r5, r6, pc}
   11360:	e5952004 	ldr	r2, [r5, #4]
   11364:	e1520003 	cmp	r2, r3
   11368:	1a000002 	bne	11378 <free+0x64>
   1136c:	ea000005 	b	11388 <free+0x74>
   11370:	e1530002 	cmp	r3, r2
   11374:	0a000003 	beq	11388 <free+0x74>
   11378:	e5b43008 	ldr	r3, [r4, #8]!
   1137c:	e3530000 	cmp	r3, #0
   11380:	1afffffa 	bne	11370 <free+0x5c>
   11384:	e8bd8070 	pop	{r4, r5, r6, pc}
   11388:	e3036fd0 	movw	r6, #16336	; 0x3fd0
   1138c:	e3406001 	movt	r6, #1
   11390:	e5960010 	ldr	r0, [r6, #16]
   11394:	e3500000 	cmp	r0, #0
   11398:	1a000003 	bne	113ac <free+0x98>
   1139c:	e5943004 	ldr	r3, [r4, #4]
   113a0:	e5853008 	str	r3, [r5, #8]
   113a4:	e5845004 	str	r5, [r4, #4]
   113a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   113ac:	ebffe3cd 	bl	a2e8 <EnterCritical>
   113b0:	e5962010 	ldr	r2, [r6, #16]
   113b4:	e5943004 	ldr	r3, [r4, #4]
   113b8:	e3520000 	cmp	r2, #0
   113bc:	e5853008 	str	r3, [r5, #8]
   113c0:	e5845004 	str	r5, [r4, #4]
   113c4:	08bd8070 	popeq	{r4, r5, r6, pc}
   113c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   113cc:	eaffe3f3 	b	a3a0 <LeaveCritical>

000113d0 <palloc>:
   113d0:	e92d4070 	push	{r4, r5, r6, lr}
   113d4:	e3034fd0 	movw	r4, #16336	; 0x3fd0
   113d8:	e3404001 	movt	r4, #1
   113dc:	e5943008 	ldr	r3, [r4, #8]
   113e0:	e3530000 	cmp	r3, #0
   113e4:	0a00002c 	beq	1149c <palloc+0xcc>
   113e8:	e5940014 	ldr	r0, [r4, #20]
   113ec:	e3500000 	cmp	r0, #0
   113f0:	1a000019 	bne	1145c <palloc+0x8c>
   113f4:	e5945018 	ldr	r5, [r4, #24]
   113f8:	e3550000 	cmp	r5, #0
   113fc:	0a00001a 	beq	1146c <palloc+0x9c>
   11400:	e5952000 	ldr	r2, [r5]
   11404:	e3043d43 	movw	r3, #19779	; 0x4d43
   11408:	e3453047 	movt	r3, #20551	; 0x5047
   1140c:	e1520003 	cmp	r2, r3
   11410:	0a000005 	beq	1142c <palloc+0x5c>
   11414:	e3031d50 	movw	r1, #15696	; 0x3d50
   11418:	e3030dd4 	movw	r0, #15828	; 0x3dd4
   1141c:	e3401001 	movt	r1, #1
   11420:	e3400001 	movt	r0, #1
   11424:	e3a020d4 	mov	r2, #212	; 0xd4
   11428:	ebffee9c 	bl	cea0 <assertion_failed>
   1142c:	e5953004 	ldr	r3, [r5, #4]
   11430:	e3a02000 	mov	r2, #0
   11434:	e5852000 	str	r2, [r5]
   11438:	e5843018 	str	r3, [r4, #24]
   1143c:	e5943014 	ldr	r3, [r4, #20]
   11440:	e3530000 	cmp	r3, #0
   11444:	1a000001 	bne	11450 <palloc+0x80>
   11448:	e1a00005 	mov	r0, r5
   1144c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11450:	ebffe3d2 	bl	a3a0 <LeaveCritical>
   11454:	e1a00005 	mov	r0, r5
   11458:	e8bd8070 	pop	{r4, r5, r6, pc}
   1145c:	ebffe3a1 	bl	a2e8 <EnterCritical>
   11460:	e5945018 	ldr	r5, [r4, #24]
   11464:	e3550000 	cmp	r5, #0
   11468:	1affffe4 	bne	11400 <palloc+0x30>
   1146c:	e5945008 	ldr	r5, [r4, #8]
   11470:	e594200c 	ldr	r2, [r4, #12]
   11474:	e2853a01 	add	r3, r5, #4096	; 0x1000
   11478:	e5843008 	str	r3, [r4, #8]
   1147c:	e1530002 	cmp	r3, r2
   11480:	9affffed 	bls	1143c <palloc+0x6c>
   11484:	e5945014 	ldr	r5, [r4, #20]
   11488:	e3550000 	cmp	r5, #0
   1148c:	0affffed 	beq	11448 <palloc+0x78>
   11490:	ebffe3c2 	bl	a3a0 <LeaveCritical>
   11494:	e3a00000 	mov	r0, #0
   11498:	e8bd8070 	pop	{r4, r5, r6, pc}
   1149c:	e3031d50 	movw	r1, #15696	; 0x3d50
   114a0:	e3030dc0 	movw	r0, #15808	; 0x3dc0
   114a4:	e3401001 	movt	r1, #1
   114a8:	e3400001 	movt	r0, #1
   114ac:	e3a020c6 	mov	r2, #198	; 0xc6
   114b0:	ebffee7a 	bl	cea0 <assertion_failed>
   114b4:	eaffffcb 	b	113e8 <palloc+0x18>

000114b8 <pfree>:
   114b8:	e92d4070 	push	{r4, r5, r6, lr}
   114bc:	e2505000 	subs	r5, r0, #0
   114c0:	08bd8070 	popeq	{r4, r5, r6, pc}
   114c4:	e3034fd0 	movw	r4, #16336	; 0x3fd0
   114c8:	e3404001 	movt	r4, #1
   114cc:	e5940014 	ldr	r0, [r4, #20]
   114d0:	e3500000 	cmp	r0, #0
   114d4:	1a000006 	bne	114f4 <pfree+0x3c>
   114d8:	e5941018 	ldr	r1, [r4, #24]
   114dc:	e3042d43 	movw	r2, #19779	; 0x4d43
   114e0:	e5845018 	str	r5, [r4, #24]
   114e4:	e3452047 	movt	r2, #20551	; 0x5047
   114e8:	e5852000 	str	r2, [r5]
   114ec:	e5851004 	str	r1, [r5, #4]
   114f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   114f4:	ebffe37b 	bl	a2e8 <EnterCritical>
   114f8:	e5941014 	ldr	r1, [r4, #20]
   114fc:	e5942018 	ldr	r2, [r4, #24]
   11500:	e3043d43 	movw	r3, #19779	; 0x4d43
   11504:	e3510000 	cmp	r1, #0
   11508:	e3453047 	movt	r3, #20551	; 0x5047
   1150c:	e5845018 	str	r5, [r4, #24]
   11510:	e5853000 	str	r3, [r5]
   11514:	e5852004 	str	r2, [r5, #4]
   11518:	08bd8070 	popeq	{r4, r5, r6, pc}
   1151c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11520:	eaffe39e 	b	a3a0 <LeaveCritical>

00011524 <_GLOBAL__sub_I_mem_init>:
   11524:	e3033fd0 	movw	r3, #16336	; 0x3fd0
   11528:	e3403001 	movt	r3, #1
   1152c:	e3a02001 	mov	r2, #1
   11530:	e5832010 	str	r2, [r3, #16]
   11534:	e5832014 	str	r2, [r3, #20]
   11538:	e12fff1e 	bx	lr

0001153c <CBcmMailBox::CBcmMailBox(unsigned int)>:
   1153c:	e3a02000 	mov	r2, #0
   11540:	e8800006 	stm	r0, {r1, r2}
   11544:	e12fff1e 	bx	lr

00011548 <CBcmMailBox::~CBcmMailBox()>:
   11548:	e12fff1e 	bx	lr

0001154c <CBcmMailBox::Flush()>:
   1154c:	e92d4010 	push	{r4, lr}
   11550:	e3a04a0b 	mov	r4, #45056	; 0xb000
   11554:	e3434f00 	movt	r4, #16128	; 0x3f00
   11558:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1155c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   11560:	18bd8010 	popne	{r4, pc}
   11564:	e3a00014 	mov	r0, #20
   11568:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   1156c:	ebffe66d 	bl	af28 <CTimer::SimpleMsDelay(unsigned int)>
   11570:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   11574:	e3130101 	tst	r3, #1073741824	; 0x40000000
   11578:	0afffff9 	beq	11564 <CBcmMailBox::Flush()+0x18>
   1157c:	e8bd8010 	pop	{r4, pc}

00011580 <CBcmMailBox::Read()>:
   11580:	e5901000 	ldr	r1, [r0]
   11584:	e3a02a0b 	mov	r2, #45056	; 0xb000
   11588:	e3432f00 	movt	r2, #16128	; 0x3f00
   1158c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   11590:	e3130101 	tst	r3, #1073741824	; 0x40000000
   11594:	1afffffc 	bne	1158c <CBcmMailBox::Read()+0xc>
   11598:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   1159c:	e200300f 	and	r3, r0, #15
   115a0:	e1510003 	cmp	r1, r3
   115a4:	1afffff8 	bne	1158c <CBcmMailBox::Read()+0xc>
   115a8:	e3c0000f 	bic	r0, r0, #15
   115ac:	e12fff1e 	bx	lr

000115b0 <CBcmMailBox::Write(unsigned int)>:
   115b0:	e3a02a0b 	mov	r2, #45056	; 0xb000
   115b4:	e3432f00 	movt	r2, #16128	; 0x3f00
   115b8:	e92d4070 	push	{r4, r5, r6, lr}
   115bc:	e1a05000 	mov	r5, r0
   115c0:	e1a04001 	mov	r4, r1
   115c4:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   115c8:	e3530000 	cmp	r3, #0
   115cc:	bafffffc 	blt	115c4 <CBcmMailBox::Write(unsigned int)+0x14>
   115d0:	e314000f 	tst	r4, #15
   115d4:	0a000005 	beq	115f0 <CBcmMailBox::Write(unsigned int)+0x40>
   115d8:	e3031df8 	movw	r1, #15864	; 0x3df8
   115dc:	e3030e08 	movw	r0, #15880	; 0x3e08
   115e0:	e3401001 	movt	r1, #1
   115e4:	e3400001 	movt	r0, #1
   115e8:	e3a0205a 	mov	r2, #90	; 0x5a
   115ec:	ebffee2b 	bl	cea0 <assertion_failed>
   115f0:	e5952000 	ldr	r2, [r5]
   115f4:	e3a03a0b 	mov	r3, #45056	; 0xb000
   115f8:	e3433f00 	movt	r3, #16128	; 0x3f00
   115fc:	e1844002 	orr	r4, r4, r2
   11600:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   11604:	e8bd8070 	pop	{r4, r5, r6, pc}

00011608 <CBcmMailBox::WriteRead(unsigned int)>:
   11608:	e92d4070 	push	{r4, r5, r6, lr}
   1160c:	e1a05000 	mov	r5, r0
   11610:	e5900004 	ldr	r0, [r0, #4]
   11614:	e1a06001 	mov	r6, r1
   11618:	e3500000 	cmp	r0, #0
   1161c:	1a00001e 	bne	1169c <CBcmMailBox::WriteRead(unsigned int)+0x94>
   11620:	e3a04a0b 	mov	r4, #45056	; 0xb000
   11624:	e3434f00 	movt	r4, #16128	; 0x3f00
   11628:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1162c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   11630:	1a000005 	bne	1164c <CBcmMailBox::WriteRead(unsigned int)+0x44>
   11634:	e3a00014 	mov	r0, #20
   11638:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   1163c:	ebffe639 	bl	af28 <CTimer::SimpleMsDelay(unsigned int)>
   11640:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   11644:	e3130101 	tst	r3, #1073741824	; 0x40000000
   11648:	0afffff9 	beq	11634 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   1164c:	e1a00005 	mov	r0, r5
   11650:	e1a01006 	mov	r1, r6
   11654:	ebffffd5 	bl	115b0 <CBcmMailBox::Write(unsigned int)>
   11658:	e5950000 	ldr	r0, [r5]
   1165c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   11660:	e3432f00 	movt	r2, #16128	; 0x3f00
   11664:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   11668:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1166c:	1afffffc 	bne	11664 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   11670:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   11674:	e203100f 	and	r1, r3, #15
   11678:	e1510000 	cmp	r1, r0
   1167c:	1afffff8 	bne	11664 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   11680:	e5952004 	ldr	r2, [r5, #4]
   11684:	e3c3400f 	bic	r4, r3, #15
   11688:	e3520000 	cmp	r2, #0
   1168c:	0a000000 	beq	11694 <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   11690:	ebffe342 	bl	a3a0 <LeaveCritical>
   11694:	e1a00004 	mov	r0, r4
   11698:	e8bd8070 	pop	{r4, r5, r6, pc}
   1169c:	ebffe311 	bl	a2e8 <EnterCritical>
   116a0:	eaffffde 	b	11620 <CBcmMailBox::WriteRead(unsigned int)+0x18>

000116a4 <__aeabi_uidiv>:
   116a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   116a8:	e3a02000 	mov	r2, #0
   116ac:	eb000108 	bl	11ad4 <__Divide>
   116b0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000116b4 <__aeabi_uidivmod>:
   116b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   116b8:	e24dd00c 	sub	sp, sp, #12
   116bc:	e28d2004 	add	r2, sp, #4
   116c0:	eb000103 	bl	11ad4 <__Divide>
   116c4:	e59d1004 	ldr	r1, [sp, #4]
   116c8:	e28dd00c 	add	sp, sp, #12
   116cc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000116d0 <__aeabi_idiv>:
   116d0:	ea000132 	b	11ba0 <__DivideInteger>

000116d4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   116d4:	e5903020 	ldr	r3, [r0, #32]
   116d8:	e3a01000 	mov	r1, #0
   116dc:	e92d4010 	push	{r4, lr}
   116e0:	e24dd010 	sub	sp, sp, #16
   116e4:	e3a02c01 	mov	r2, #256	; 0x100
   116e8:	e583100c 	str	r1, [r3, #12]
   116ec:	e5832010 	str	r2, [r3, #16]
   116f0:	e1a04000 	mov	r4, r0
   116f4:	e28d0008 	add	r0, sp, #8
   116f8:	ebffdeb8 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
   116fc:	e5942020 	ldr	r2, [r4, #32]
   11700:	e3003408 	movw	r3, #1032	; 0x408
   11704:	e28d0008 	add	r0, sp, #8
   11708:	e58d3000 	str	r3, [sp]
   1170c:	e308100b 	movw	r1, #32779	; 0x800b
   11710:	e3003414 	movw	r3, #1044	; 0x414
   11714:	e3401004 	movt	r1, #4
   11718:	ebffdef8 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1171c:	e3500000 	cmp	r0, #0
   11720:	e28d0008 	add	r0, sp, #8
   11724:	0a000003 	beq	11738 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
   11728:	e5943020 	ldr	r3, [r4, #32]
   1172c:	e593300c 	ldr	r3, [r3, #12]
   11730:	e3530000 	cmp	r3, #0
   11734:	0a000003 	beq	11748 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
   11738:	ebffdeae 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
   1173c:	e3a00000 	mov	r0, #0
   11740:	e28dd010 	add	sp, sp, #16
   11744:	e8bd8010 	pop	{r4, pc}
   11748:	ebffdeaa 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
   1174c:	e3a00001 	mov	r0, #1
   11750:	e28dd010 	add	sp, sp, #16
   11754:	e8bd8010 	pop	{r4, pc}

00011758 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   11758:	e92d4030 	push	{r4, r5, lr}
   1175c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   11760:	e3510000 	cmp	r1, #0
   11764:	13520000 	cmpne	r2, #0
   11768:	e3a05000 	mov	r5, #0
   1176c:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
   11770:	e1a04000 	mov	r4, r0
   11774:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   11778:	e8800006 	stm	r0, {r1, r2}
   1177c:	e5803010 	str	r3, [r0, #16]
   11780:	e580e00c 	str	lr, [r0, #12]
   11784:	e580c008 	str	ip, [r0, #8]
   11788:	e5805014 	str	r5, [r0, #20]
   1178c:	e5805018 	str	r5, [r0, #24]
   11790:	e580501c 	str	r5, [r0, #28]
   11794:	e5805020 	str	r5, [r0, #32]
   11798:	1a000011 	bne	117e4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   1179c:	e28d000c 	add	r0, sp, #12
   117a0:	ebffde8e 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
   117a4:	e3a03014 	mov	r3, #20
   117a8:	e58d5000 	str	r5, [sp]
   117ac:	e28d000c 	add	r0, sp, #12
   117b0:	e3a01003 	mov	r1, #3
   117b4:	e08d2003 	add	r2, sp, r3
   117b8:	e3401004 	movt	r1, #4
   117bc:	ebffdecf 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   117c0:	e1500005 	cmp	r0, r5
   117c4:	1a000027 	bne	11868 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   117c8:	e3a02d0a 	mov	r2, #640	; 0x280
   117cc:	e3a03e1e 	mov	r3, #480	; 0x1e0
   117d0:	e884000c 	stm	r4, {r2, r3}
   117d4:	e28d000c 	add	r0, sp, #12
   117d8:	ebffde86 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
   117dc:	e594c008 	ldr	ip, [r4, #8]
   117e0:	e5943010 	ldr	r3, [r4, #16]
   117e4:	e35c0000 	cmp	ip, #0
   117e8:	0a00001a 	beq	11858 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   117ec:	e594200c 	ldr	r2, [r4, #12]
   117f0:	e3520000 	cmp	r2, #0
   117f4:	0a000017 	beq	11858 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   117f8:	e3530008 	cmp	r3, #8
   117fc:	8a000007 	bhi	11820 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
   11800:	e3000414 	movw	r0, #1044	; 0x414
   11804:	ebffe2b2 	bl	a2d4 <operator new[](unsigned int)>
   11808:	e3a02b01 	mov	r2, #1024	; 0x400
   1180c:	e3a01000 	mov	r1, #0
   11810:	e5840020 	str	r0, [r4, #32]
   11814:	e2800014 	add	r0, r0, #20
   11818:	ebffe61a 	bl	b088 <memset>
   1181c:	e5943010 	ldr	r3, [r4, #16]
   11820:	e5945000 	ldr	r5, [r4]
   11824:	e3032ed4 	movw	r2, #16084	; 0x3ed4
   11828:	e594e004 	ldr	lr, [r4, #4]
   1182c:	e3402001 	movt	r2, #1
   11830:	e594c008 	ldr	ip, [r4, #8]
   11834:	e1a00004 	mov	r0, r4
   11838:	e594100c 	ldr	r1, [r4, #12]
   1183c:	e582500c 	str	r5, [r2, #12]
   11840:	e582e010 	str	lr, [r2, #16]
   11844:	e582c020 	str	ip, [r2, #32]
   11848:	e5821024 	str	r1, [r2, #36]	; 0x24
   1184c:	e5823034 	str	r3, [r2, #52]	; 0x34
   11850:	e28dd02c 	add	sp, sp, #44	; 0x2c
   11854:	e8bd8030 	pop	{r4, r5, pc}
   11858:	e8940006 	ldm	r4, {r1, r2}
   1185c:	e5841008 	str	r1, [r4, #8]
   11860:	e584200c 	str	r2, [r4, #12]
   11864:	eaffffe3 	b	117f8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   11868:	e59d2020 	ldr	r2, [sp, #32]
   1186c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   11870:	e2420d0a 	sub	r0, r2, #640	; 0x280
   11874:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   11878:	e5842000 	str	r2, [r4]
   1187c:	e3510f96 	cmp	r1, #600	; 0x258
   11880:	93500c05 	cmpls	r0, #1280	; 0x500
   11884:	e5843004 	str	r3, [r4, #4]
   11888:	9affffd1 	bls	117d4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   1188c:	eaffffcd 	b	117c8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

00011890 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   11890:	e92d4010 	push	{r4, lr}
   11894:	e3a01014 	mov	r1, #20
   11898:	e1a04000 	mov	r4, r0
   1189c:	e5900020 	ldr	r0, [r0, #32]
   118a0:	ebffe28e 	bl	a2e0 <operator delete(void*, unsigned int)>
   118a4:	e1a00004 	mov	r0, r4
   118a8:	e8bd8010 	pop	{r4, pc}

000118ac <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   118ac:	e5903010 	ldr	r3, [r0, #16]
   118b0:	e3530008 	cmp	r3, #8
   118b4:	812fff1e 	bxhi	lr
   118b8:	e5900020 	ldr	r0, [r0, #32]
   118bc:	e1a03982 	lsl	r3, r2, #19
   118c0:	e1a0c5a2 	lsr	ip, r2, #11
   118c4:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   118c8:	e0801101 	add	r1, r0, r1, lsl #2
   118cc:	e1a02282 	lsl	r2, r2, #5
   118d0:	e183318c 	orr	r3, r3, ip, lsl #3
   118d4:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   118d8:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   118dc:	e1822003 	orr	r2, r2, r3
   118e0:	e5812014 	str	r2, [r1, #20]
   118e4:	e12fff1e 	bx	lr

000118e8 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   118e8:	e5903010 	ldr	r3, [r0, #16]
   118ec:	e3530008 	cmp	r3, #8
   118f0:	95903020 	ldrls	r3, [r0, #32]
   118f4:	90831101 	addls	r1, r3, r1, lsl #2
   118f8:	95812014 	strls	r2, [r1, #20]
   118fc:	e12fff1e 	bx	lr

00011900 <CBcmFrameBuffer::Initialize()>:
   11900:	e92d4070 	push	{r4, r5, r6, lr}
   11904:	e24dd008 	sub	sp, sp, #8
   11908:	e3036ed4 	movw	r6, #16084	; 0x3ed4
   1190c:	e3406001 	movt	r6, #1
   11910:	e1a05000 	mov	r5, r0
   11914:	e1a0000d 	mov	r0, sp
   11918:	ebffde30 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
   1191c:	e1a01006 	mov	r1, r6
   11920:	e1a0000d 	mov	r0, sp
   11924:	e3a02070 	mov	r2, #112	; 0x70
   11928:	ebffde37 	bl	920c <CBcmPropertyTags::GetTags(void*, unsigned int)>
   1192c:	e2504000 	subs	r4, r0, #0
   11930:	0a00001e 	beq	119b0 <CBcmFrameBuffer::Initialize()+0xb0>
   11934:	e596400c 	ldr	r4, [r6, #12]
   11938:	e3540000 	cmp	r4, #0
   1193c:	0a00001b 	beq	119b0 <CBcmFrameBuffer::Initialize()+0xb0>
   11940:	e5964010 	ldr	r4, [r6, #16]
   11944:	e3540000 	cmp	r4, #0
   11948:	0a000018 	beq	119b0 <CBcmFrameBuffer::Initialize()+0xb0>
   1194c:	e5964020 	ldr	r4, [r6, #32]
   11950:	e3540000 	cmp	r4, #0
   11954:	0a000015 	beq	119b0 <CBcmFrameBuffer::Initialize()+0xb0>
   11958:	e5964024 	ldr	r4, [r6, #36]	; 0x24
   1195c:	e3540000 	cmp	r4, #0
   11960:	0a000012 	beq	119b0 <CBcmFrameBuffer::Initialize()+0xb0>
   11964:	e5964034 	ldr	r4, [r6, #52]	; 0x34
   11968:	e3540000 	cmp	r4, #0
   1196c:	0a00000f 	beq	119b0 <CBcmFrameBuffer::Initialize()+0xb0>
   11970:	e5964058 	ldr	r4, [r6, #88]	; 0x58
   11974:	e3540000 	cmp	r4, #0
   11978:	0a00000c 	beq	119b0 <CBcmFrameBuffer::Initialize()+0xb0>
   1197c:	e5951010 	ldr	r1, [r5, #16]
   11980:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   11984:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
   11988:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
   1198c:	e3510008 	cmp	r1, #8
   11990:	e5854014 	str	r4, [r5, #20]
   11994:	e5852018 	str	r2, [r5, #24]
   11998:	83a04001 	movhi	r4, #1
   1199c:	e585301c 	str	r3, [r5, #28]
   119a0:	8a000002 	bhi	119b0 <CBcmFrameBuffer::Initialize()+0xb0>
   119a4:	e1a00005 	mov	r0, r5
   119a8:	ebffff49 	bl	116d4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   119ac:	e1a04000 	mov	r4, r0
   119b0:	e1a0000d 	mov	r0, sp
   119b4:	ebffde0f 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
   119b8:	e1a00004 	mov	r0, r4
   119bc:	e28dd008 	add	sp, sp, #8
   119c0:	e8bd8070 	pop	{r4, r5, r6, pc}

000119c4 <CBcmFrameBuffer::GetWidth() const>:
   119c4:	e5900000 	ldr	r0, [r0]
   119c8:	e12fff1e 	bx	lr

000119cc <CBcmFrameBuffer::GetHeight() const>:
   119cc:	e5900004 	ldr	r0, [r0, #4]
   119d0:	e12fff1e 	bx	lr

000119d4 <CBcmFrameBuffer::GetVirtWidth() const>:
   119d4:	e5900008 	ldr	r0, [r0, #8]
   119d8:	e12fff1e 	bx	lr

000119dc <CBcmFrameBuffer::GetVirtHeight() const>:
   119dc:	e590000c 	ldr	r0, [r0, #12]
   119e0:	e12fff1e 	bx	lr

000119e4 <CBcmFrameBuffer::GetPitch() const>:
   119e4:	e590001c 	ldr	r0, [r0, #28]
   119e8:	e12fff1e 	bx	lr

000119ec <CBcmFrameBuffer::GetDepth() const>:
   119ec:	e5900010 	ldr	r0, [r0, #16]
   119f0:	e12fff1e 	bx	lr

000119f4 <CBcmFrameBuffer::GetBuffer() const>:
   119f4:	e5900014 	ldr	r0, [r0, #20]
   119f8:	e12fff1e 	bx	lr

000119fc <CBcmFrameBuffer::GetSize() const>:
   119fc:	e5900018 	ldr	r0, [r0, #24]
   11a00:	e12fff1e 	bx	lr

00011a04 <CBcmFrameBuffer::UpdatePalette()>:
   11a04:	e5903010 	ldr	r3, [r0, #16]
   11a08:	e3530008 	cmp	r3, #8
   11a0c:	9a000001 	bls	11a18 <CBcmFrameBuffer::UpdatePalette()+0x14>
   11a10:	e3a00001 	mov	r0, #1
   11a14:	e12fff1e 	bx	lr
   11a18:	eaffff2d 	b	116d4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00011a1c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   11a1c:	e92d4070 	push	{r4, r5, r6, lr}
   11a20:	e24dd028 	sub	sp, sp, #40	; 0x28
   11a24:	e28d000c 	add	r0, sp, #12
   11a28:	e1a05001 	mov	r5, r1
   11a2c:	e1a06002 	mov	r6, r2
   11a30:	ebffddea 	bl	91e0 <CBcmPropertyTags::CBcmPropertyTags()>
   11a34:	e3a03008 	mov	r3, #8
   11a38:	e28d000c 	add	r0, sp, #12
   11a3c:	e58d3000 	str	r3, [sp]
   11a40:	e3081009 	movw	r1, #32777	; 0x8009
   11a44:	e3a03014 	mov	r3, #20
   11a48:	e3401004 	movt	r1, #4
   11a4c:	e08d2003 	add	r2, sp, r3
   11a50:	e58d5020 	str	r5, [sp, #32]
   11a54:	e58d6024 	str	r6, [sp, #36]	; 0x24
   11a58:	ebffde28 	bl	9300 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11a5c:	e2504000 	subs	r4, r0, #0
   11a60:	0a000006 	beq	11a80 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   11a64:	e59d3020 	ldr	r3, [sp, #32]
   11a68:	e1550003 	cmp	r5, r3
   11a6c:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   11a70:	13a04000 	movne	r4, #0
   11a74:	00444006 	subeq	r4, r4, r6
   11a78:	016f4f14 	clzeq	r4, r4
   11a7c:	01a042a4 	lsreq	r4, r4, #5
   11a80:	e28d000c 	add	r0, sp, #12
   11a84:	ebffdddb 	bl	91f8 <CBcmPropertyTags::~CBcmPropertyTags()>
   11a88:	e1a00004 	mov	r0, r4
   11a8c:	e28dd028 	add	sp, sp, #40	; 0x28
   11a90:	e8bd8070 	pop	{r4, r5, r6, pc}

00011a94 <CDevice::~CDevice()>:
   11a94:	e12fff1e 	bx	lr

00011a98 <CDevice::Read(void*, unsigned int)>:
   11a98:	e3e00000 	mvn	r0, #0
   11a9c:	e12fff1e 	bx	lr

00011aa0 <CDevice::Seek(unsigned long long)>:
   11aa0:	e3e00000 	mvn	r0, #0
   11aa4:	e3e01000 	mvn	r1, #0
   11aa8:	e12fff1e 	bx	lr

00011aac <CDevice::~CDevice()>:
   11aac:	e92d4010 	push	{r4, lr}
   11ab0:	e3a01004 	mov	r1, #4
   11ab4:	e1a04000 	mov	r4, r0
   11ab8:	ebffe208 	bl	a2e0 <operator delete(void*, unsigned int)>
   11abc:	e1a00004 	mov	r0, r4
   11ac0:	e8bd8010 	pop	{r4, pc}

00011ac4 <CDevice::CDevice()>:
   11ac4:	e59f3004 	ldr	r3, [pc, #4]	; 11ad0 <CDevice::CDevice()+0xc>
   11ac8:	e5803000 	str	r3, [r0]
   11acc:	e12fff1e 	bx	lr
   11ad0:	00013e24 	.word	0x00013e24

00011ad4 <__Divide>:
   11ad4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11ad8:	e2514000 	subs	r4, r1, #0
   11adc:	e1a06000 	mov	r6, r0
   11ae0:	e1a07002 	mov	r7, r2
   11ae4:	0a000021 	beq	11b70 <__Divide+0x9c>
   11ae8:	e3a03000 	mov	r3, #0
   11aec:	e3a05000 	mov	r5, #0
   11af0:	e1530005 	cmp	r3, r5
   11af4:	e1a02004 	mov	r2, r4
   11af8:	01520006 	cmpeq	r2, r6
   11afc:	e1a04006 	mov	r4, r6
   11b00:	2a000024 	bcs	11b98 <__Divide+0xc4>
   11b04:	e3a01001 	mov	r1, #1
   11b08:	ea000000 	b	11b10 <__Divide+0x3c>
   11b0c:	e1a01000 	mov	r1, r0
   11b10:	e0922002 	adds	r2, r2, r2
   11b14:	e2810001 	add	r0, r1, #1
   11b18:	e0a33003 	adc	r3, r3, r3
   11b1c:	e1530005 	cmp	r3, r5
   11b20:	01520004 	cmpeq	r2, r4
   11b24:	3afffff8 	bcc	11b0c <__Divide+0x38>
   11b28:	e3500000 	cmp	r0, #0
   11b2c:	0a00000c 	beq	11b64 <__Divide+0x90>
   11b30:	e3a00000 	mov	r0, #0
   11b34:	e1550003 	cmp	r5, r3
   11b38:	e2411001 	sub	r1, r1, #1
   11b3c:	01540002 	cmpeq	r4, r2
   11b40:	e1a00080 	lsl	r0, r0, #1
   11b44:	20466002 	subcs	r6, r6, r2
   11b48:	23800001 	orrcs	r0, r0, #1
   11b4c:	e1b030a3 	lsrs	r3, r3, #1
   11b50:	e1a02062 	rrx	r2, r2
   11b54:	e3710001 	cmn	r1, #1
   11b58:	e1a04006 	mov	r4, r6
   11b5c:	e3a05000 	mov	r5, #0
   11b60:	1afffff3 	bne	11b34 <__Divide+0x60>
   11b64:	e3570000 	cmp	r7, #0
   11b68:	15876000 	strne	r6, [r7]
   11b6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11b70:	e3a0201f 	mov	r2, #31
   11b74:	e3031e38 	movw	r1, #15928	; 0x3e38
   11b78:	e30306f8 	movw	r0, #14072	; 0x36f8
   11b7c:	e3401001 	movt	r1, #1
   11b80:	e3400001 	movt	r0, #1
   11b84:	ebffecc5 	bl	cea0 <assertion_failed>
   11b88:	ebfff5b0 	bl	f250 <CExceptionHandler::Get()>
   11b8c:	e1a01004 	mov	r1, r4
   11b90:	ebfff566 	bl	f130 <CExceptionHandler::Throw(unsigned int)>
   11b94:	eaffffd3 	b	11ae8 <__Divide+0x14>
   11b98:	e3a01000 	mov	r1, #0
   11b9c:	eaffffe3 	b	11b30 <__Divide+0x5c>

00011ba0 <__DivideInteger>:
   11ba0:	e2502000 	subs	r2, r0, #0
   11ba4:	e92d4010 	push	{r4, lr}
   11ba8:	ba000004 	blt	11bc0 <__DivideInteger+0x20>
   11bac:	e3510000 	cmp	r1, #0
   11bb0:	ba00000e 	blt	11bf0 <__DivideInteger+0x50>
   11bb4:	e3a02000 	mov	r2, #0
   11bb8:	e8bd4010 	pop	{r4, lr}
   11bbc:	eaffffc4 	b	11ad4 <__Divide>
   11bc0:	e3510000 	cmp	r1, #0
   11bc4:	ba000004 	blt	11bdc <__DivideInteger+0x3c>
   11bc8:	e2620000 	rsb	r0, r2, #0
   11bcc:	e3a02000 	mov	r2, #0
   11bd0:	ebffffbf 	bl	11ad4 <__Divide>
   11bd4:	e2600000 	rsb	r0, r0, #0
   11bd8:	e8bd8010 	pop	{r4, pc}
   11bdc:	e2620000 	rsb	r0, r2, #0
   11be0:	e2611000 	rsb	r1, r1, #0
   11be4:	e3a02000 	mov	r2, #0
   11be8:	e8bd4010 	pop	{r4, lr}
   11bec:	eaffffb8 	b	11ad4 <__Divide>
   11bf0:	e2611000 	rsb	r1, r1, #0
   11bf4:	e3a02000 	mov	r2, #0
   11bf8:	ebffffb5 	bl	11ad4 <__Divide>
   11bfc:	e2600000 	rsb	r0, r0, #0
   11c00:	e8bd8010 	pop	{r4, pc}
