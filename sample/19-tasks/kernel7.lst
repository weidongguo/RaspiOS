
kernel7.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea000969 	b	a60c <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

00008070 <main>:
    8070:	e92d4010 	push	{r4, lr}
    8074:	e24ddd72 	sub	sp, sp, #7296	; 0x1c80
    8078:	e1a0000d 	mov	r0, sp
    807c:	eb000024 	bl	8114 <CKernel::CKernel()>
    8080:	e1a0000d 	mov	r0, sp
    8084:	eb00005f 	bl	8208 <CKernel::Initialize()>
    8088:	e2504000 	subs	r4, r0, #0
    808c:	0a00000d 	beq	80c8 <main+0x58>
    8090:	e1a0000d 	mov	r0, sp
    8094:	eb0000a7 	bl	8338 <CKernel::Run()>
    8098:	e3500002 	cmp	r0, #2
    809c:	0a000006 	beq	80bc <main+0x4c>
    80a0:	eb00094b 	bl	a5d4 <halt>
    80a4:	e3a04000 	mov	r4, #0
    80a8:	e1a0000d 	mov	r0, sp
    80ac:	eb00007d 	bl	82a8 <CKernel::~CKernel()>
    80b0:	e1a00004 	mov	r0, r4
    80b4:	e28ddd72 	add	sp, sp, #7296	; 0x1c80
    80b8:	e8bd8010 	pop	{r4, pc}
    80bc:	eb000949 	bl	a5e8 <reboot>
    80c0:	e3a04001 	mov	r4, #1
    80c4:	eafffff7 	b	80a8 <main+0x38>
    80c8:	eb000941 	bl	a5d4 <halt>
    80cc:	eafffff5 	b	80a8 <main+0x38>

000080d0 <CKernel::TimerHandler(unsigned int, void*, void*)>:
    80d0:	e92d4010 	push	{r4, lr}
    80d4:	e2514000 	subs	r4, r1, #0
    80d8:	0a000003 	beq	80ec <CKernel::TimerHandler(unsigned int, void*, void*)+0x1c>
    80dc:	e2840d71 	add	r0, r4, #7232	; 0x1c40
    80e0:	e2800038 	add	r0, r0, #56	; 0x38
    80e4:	e8bd4010 	pop	{r4, lr}
    80e8:	ea000400 	b	90f0 <CSynchronizationEvent::Set()>
    80ec:	e3011674 	movw	r1, #5748	; 0x1674
    80f0:	e3010680 	movw	r0, #5760	; 0x1680
    80f4:	e3401001 	movt	r1, #1
    80f8:	e3400001 	movt	r0, #1
    80fc:	e3a0206e 	mov	r2, #110	; 0x6e
    8100:	eb0013d6 	bl	d060 <assertion_failed>
    8104:	e2840d71 	add	r0, r4, #7232	; 0x1c40
    8108:	e2800038 	add	r0, r0, #56	; 0x38
    810c:	e8bd4010 	pop	{r4, lr}
    8110:	ea0003f6 	b	90f0 <CSynchronizationEvent::Set()>

00008114 <CKernel::CKernel()>:
    8114:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8118:	e2808010 	add	r8, r0, #16
    811c:	e3a01001 	mov	r1, #1
    8120:	e280601c 	add	r6, r0, #28
    8124:	e1a04000 	mov	r4, r0
    8128:	eb00089e 	bl	a3a8 <CMemorySystem::CMemorySystem(int)>
    812c:	e1a00008 	mov	r0, r8
    8130:	e2847d66 	add	r7, r4, #6528	; 0x1980
    8134:	eb00043b 	bl	9228 <CActLED::CActLED()>
    8138:	e1a00006 	mov	r0, r6
    813c:	eb000dbf 	bl	b840 <CKernelOptions::CKernelOptions()>
    8140:	e2840e85 	add	r0, r4, #2128	; 0x850
    8144:	e280000c 	add	r0, r0, #12
    8148:	e2877018 	add	r7, r7, #24
    814c:	eb00147a 	bl	d33c <CDeviceNameService::CDeviceNameService()>
    8150:	e1a00006 	mov	r0, r6
    8154:	eb000d85 	bl	b770 <CKernelOptions::GetWidth() const>
    8158:	e1a05000 	mov	r5, r0
    815c:	e1a00006 	mov	r0, r6
    8160:	eb000d84 	bl	b778 <CKernelOptions::GetHeight() const>
    8164:	e3a03000 	mov	r3, #0
    8168:	e1a01005 	mov	r1, r5
    816c:	e2845d6f 	add	r5, r4, #7104	; 0x1bc0
    8170:	e2855018 	add	r5, r5, #24
    8174:	e1a02000 	mov	r2, r0
    8178:	e2840e86 	add	r0, r4, #2144	; 0x860
    817c:	e2800004 	add	r0, r0, #4
    8180:	eb000f77 	bl	bf64 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8184:	e3a02000 	mov	r2, #0
    8188:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    818c:	e1a01002 	mov	r1, r2
    8190:	e2800004 	add	r0, r0, #4
    8194:	eb001699 	bl	dc00 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>
    8198:	e2840d66 	add	r0, r4, #6528	; 0x1980
    819c:	e2800014 	add	r0, r0, #20
    81a0:	eb001c29 	bl	f24c <CExceptionHandler::CExceptionHandler()>
    81a4:	e1a00007 	mov	r0, r7
    81a8:	eb001d00 	bl	f5b0 <CInterruptSystem::CInterruptSystem()>
    81ac:	e1a01007 	mov	r1, r7
    81b0:	e1a00005 	mov	r0, r5
    81b4:	eb00093f 	bl	a6b8 <CTimer::CTimer(CInterruptSystem*)>
    81b8:	e1a00006 	mov	r0, r6
    81bc:	eb000d72 	bl	b78c <CKernelOptions::GetLogLevel() const>
    81c0:	e1a02005 	mov	r2, r5
    81c4:	e1a01000 	mov	r1, r0
    81c8:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    81cc:	eb001509 	bl	d5f8 <CLogger::CLogger(unsigned int, CTimer*)>
    81d0:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    81d4:	e280001c 	add	r0, r0, #28
    81d8:	eb00020c 	bl	8a10 <CScheduler::CScheduler()>
    81dc:	e2840d71 	add	r0, r4, #7232	; 0x1c40
    81e0:	e3a01000 	mov	r1, #0
    81e4:	e2800038 	add	r0, r0, #56	; 0x38
    81e8:	eb0003aa 	bl	9098 <CSynchronizationEvent::CSynchronizationEvent(int)>
    81ec:	e1a00008 	mov	r0, r8
    81f0:	e3a03f7d 	mov	r3, #500	; 0x1f4
    81f4:	e3a020c8 	mov	r2, #200	; 0xc8
    81f8:	e3a01005 	mov	r1, #5
    81fc:	eb000450 	bl	9344 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8200:	e1a00004 	mov	r0, r4
    8204:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008208 <CKernel::Initialize()>:
    8208:	e92d4070 	push	{r4, r5, r6, lr}
    820c:	e2804e86 	add	r4, r0, #2144	; 0x860
    8210:	e2844004 	add	r4, r4, #4
    8214:	e1a05000 	mov	r5, r0
    8218:	e1a00004 	mov	r0, r4
    821c:	eb0012fe 	bl	ce1c <CScreenDevice::Initialize()>
    8220:	e3500000 	cmp	r0, #0
    8224:	1a000001 	bne	8230 <CKernel::Initialize()+0x28>
    8228:	e3a00000 	mov	r0, #0
    822c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8230:	e2850d23 	add	r0, r5, #2240	; 0x8c0
    8234:	e3a01cc2 	mov	r1, #49664	; 0xc200
    8238:	e2800004 	add	r0, r0, #4
    823c:	e3401001 	movt	r1, #1
    8240:	eb00169d 	bl	dcbc <CSerialDevice::Initialize(unsigned int)>
    8244:	e3500000 	cmp	r0, #0
    8248:	0afffff6 	beq	8228 <CKernel::Initialize()+0x20>
    824c:	e285001c 	add	r0, r5, #28
    8250:	eb000d4a 	bl	b780 <CKernelOptions::GetLogDevice() const>
    8254:	e3a02000 	mov	r2, #0
    8258:	e1a01000 	mov	r1, r0
    825c:	e2850e85 	add	r0, r5, #2128	; 0x850
    8260:	e280000c 	add	r0, r0, #12
    8264:	eb001491 	bl	d4b0 <CDeviceNameService::GetDevice(char const*, int)>
    8268:	e3500000 	cmp	r0, #0
    826c:	11a01000 	movne	r1, r0
    8270:	01a01004 	moveq	r1, r4
    8274:	e2850b07 	add	r0, r5, #7168	; 0x1c00
    8278:	eb0015e5 	bl	da14 <CLogger::Initialize(CDevice*)>
    827c:	e3500000 	cmp	r0, #0
    8280:	0affffe8 	beq	8228 <CKernel::Initialize()+0x20>
    8284:	e2850d66 	add	r0, r5, #6528	; 0x1980
    8288:	e2800018 	add	r0, r0, #24
    828c:	eb001cda 	bl	f5fc <CInterruptSystem::Initialize()>
    8290:	e3500000 	cmp	r0, #0
    8294:	0affffe3 	beq	8228 <CKernel::Initialize()+0x20>
    8298:	e2850d6f 	add	r0, r5, #7104	; 0x1bc0
    829c:	e2800018 	add	r0, r0, #24
    82a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    82a4:	ea000b70 	b	b06c <CTimer::Initialize()>

000082a8 <CKernel::~CKernel()>:
    82a8:	e92d4010 	push	{r4, lr}
    82ac:	e1a04000 	mov	r4, r0
    82b0:	e2800d71 	add	r0, r0, #7232	; 0x1c40
    82b4:	e2800038 	add	r0, r0, #56	; 0x38
    82b8:	eb00037a 	bl	90a8 <CSynchronizationEvent::~CSynchronizationEvent()>
    82bc:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    82c0:	e280001c 	add	r0, r0, #28
    82c4:	eb000234 	bl	8b9c <CScheduler::~CScheduler()>
    82c8:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    82cc:	eb0014dc 	bl	d644 <CLogger::~CLogger()>
    82d0:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    82d4:	e2800018 	add	r0, r0, #24
    82d8:	eb000916 	bl	a738 <CTimer::~CTimer()>
    82dc:	e2840d66 	add	r0, r4, #6528	; 0x1980
    82e0:	e2800018 	add	r0, r0, #24
    82e4:	eb001cbf 	bl	f5e8 <CInterruptSystem::~CInterruptSystem()>
    82e8:	e2840d66 	add	r0, r4, #6528	; 0x1980
    82ec:	e2800014 	add	r0, r0, #20
    82f0:	eb001bf9 	bl	f2dc <CExceptionHandler::~CExceptionHandler()>
    82f4:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    82f8:	e2800004 	add	r0, r0, #4
    82fc:	eb0017fb 	bl	e2f0 <CSerialDevice::~CSerialDevice()>
    8300:	e2840e86 	add	r0, r4, #2144	; 0x860
    8304:	e2800004 	add	r0, r0, #4
    8308:	eb000ec8 	bl	be30 <CScreenDevice::~CScreenDevice()>
    830c:	e2840e85 	add	r0, r4, #2128	; 0x850
    8310:	e280000c 	add	r0, r0, #12
    8314:	eb00141b 	bl	d388 <CDeviceNameService::~CDeviceNameService()>
    8318:	e284001c 	add	r0, r4, #28
    831c:	eb000d0e 	bl	b75c <CKernelOptions::~CKernelOptions()>
    8320:	e2840010 	add	r0, r4, #16
    8324:	eb00039a 	bl	9194 <CActLED::~CActLED()>
    8328:	e1a00004 	mov	r0, r4
    832c:	eb0007b9 	bl	a218 <CMemorySystem::~CMemorySystem()>
    8330:	e1a00004 	mov	r0, r4
    8334:	e8bd8010 	pop	{r4, pc}

00008338 <CKernel::Run()>:
    8338:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    833c:	e301368c 	movw	r3, #5772	; 0x168c
    8340:	e1a05000 	mov	r5, r0
    8344:	e24dd00c 	sub	sp, sp, #12
    8348:	e2800b07 	add	r0, r0, #7168	; 0x1c00
    834c:	e3403001 	movt	r3, #1
    8350:	e3011660 	movw	r1, #5728	; 0x1660
    8354:	e3a02003 	mov	r2, #3
    8358:	e3401001 	movt	r1, #1
    835c:	e2856e86 	add	r6, r5, #2144	; 0x860
    8360:	eb00159f 	bl	d9e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8364:	e2866004 	add	r6, r6, #4
    8368:	e3a04001 	mov	r4, #1
    836c:	e3a00058 	mov	r0, #88	; 0x58
    8370:	eb000846 	bl	a490 <operator new(unsigned int)>
    8374:	e1a01004 	mov	r1, r4
    8378:	e1a02006 	mov	r2, r6
    837c:	e2844001 	add	r4, r4, #1
    8380:	eb000035 	bl	845c <CScreenTask::CScreenTask(unsigned int, CScreenDevice*)>
    8384:	e3540005 	cmp	r4, #5
    8388:	1afffff7 	bne	836c <CKernel::Run()+0x34>
    838c:	e30b0c74 	movw	r0, #48244	; 0xbc74
    8390:	e34000be 	movt	r0, #190	; 0xbe
    8394:	eb00083d 	bl	a490 <operator new(unsigned int)>
    8398:	e1a01006 	mov	r1, r6
    839c:	eb000080 	bl	85a4 <CPrimeTask::CPrimeTask(CScreenDevice*)>
    83a0:	e3a00054 	mov	r0, #84	; 0x54
    83a4:	eb000839 	bl	a490 <operator new(unsigned int)>
    83a8:	e2851010 	add	r1, r5, #16
    83ac:	eb00010a 	bl	87dc <CLEDTask::CLEDTask(CActLED*)>
    83b0:	e2854d71 	add	r4, r5, #7232	; 0x1c40
    83b4:	e2858d6f 	add	r8, r5, #7104	; 0x1bc0
    83b8:	e59f904c 	ldr	r9, [pc, #76]	; 840c <CKernel::Run()+0xd4>
    83bc:	e30870d0 	movw	r7, #32976	; 0x80d0
    83c0:	e2844038 	add	r4, r4, #56	; 0x38
    83c4:	e2888018 	add	r8, r8, #24
    83c8:	e3407000 	movt	r7, #0
    83cc:	e1a01009 	mov	r1, r9
    83d0:	e3a0200a 	mov	r2, #10
    83d4:	e1a00006 	mov	r0, r6
    83d8:	eb00125f 	bl	cd5c <CScreenDevice::Write(void const*, unsigned int)>
    83dc:	e1a00004 	mov	r0, r4
    83e0:	eb00033f 	bl	90e4 <CSynchronizationEvent::Clear()>
    83e4:	e3a02000 	mov	r2, #0
    83e8:	e1a03005 	mov	r3, r5
    83ec:	e58d2000 	str	r2, [sp]
    83f0:	e3a01f7d 	mov	r1, #500	; 0x1f4
    83f4:	e1a02007 	mov	r2, r7
    83f8:	e1a00008 	mov	r0, r8
    83fc:	eb0009be 	bl	aafc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    8400:	e1a00004 	mov	r0, r4
    8404:	eb000347 	bl	9128 <CSynchronizationEvent::Wait()>
    8408:	eaffffef 	b	83cc <CKernel::Run()+0x94>
    840c:	00011668 	.word	0x00011668

00008410 <CScreenTask::~CScreenTask()>:
    8410:	e59f3014 	ldr	r3, [pc, #20]	; 842c <CScreenTask::~CScreenTask()+0x1c>
    8414:	e92d4010 	push	{r4, lr}
    8418:	e1a04000 	mov	r4, r0
    841c:	e5803000 	str	r3, [r0]
    8420:	eb0000fe 	bl	8820 <CTask::~CTask()>
    8424:	e1a00004 	mov	r0, r4
    8428:	e8bd8010 	pop	{r4, pc}
    842c:	000116b8 	.word	0x000116b8

00008430 <CScreenTask::~CScreenTask()>:
    8430:	e59f3020 	ldr	r3, [pc, #32]	; 8458 <CScreenTask::~CScreenTask()+0x28>
    8434:	e92d4010 	push	{r4, lr}
    8438:	e1a04000 	mov	r4, r0
    843c:	e5803000 	str	r3, [r0]
    8440:	eb0000f6 	bl	8820 <CTask::~CTask()>
    8444:	e1a00004 	mov	r0, r4
    8448:	e3a01058 	mov	r1, #88	; 0x58
    844c:	eb000813 	bl	a4a0 <operator delete(void*, unsigned int)>
    8450:	e1a00004 	mov	r0, r4
    8454:	e8bd8010 	pop	{r4, pc}
    8458:	000116b8 	.word	0x000116b8

0000845c <CScreenTask::CScreenTask(unsigned int, CScreenDevice*)>:
    845c:	e92d4070 	push	{r4, r5, r6, lr}
    8460:	e1a06001 	mov	r6, r1
    8464:	e3a01901 	mov	r1, #16384	; 0x4000
    8468:	e1a04000 	mov	r4, r0
    846c:	e1a05002 	mov	r5, r2
    8470:	eb00013a 	bl	8960 <CTask::CTask(unsigned int)>
    8474:	e59f3010 	ldr	r3, [pc, #16]	; 848c <CScreenTask::CScreenTask(unsigned int, CScreenDevice*)+0x30>
    8478:	e1a00004 	mov	r0, r4
    847c:	e5846050 	str	r6, [r4, #80]	; 0x50
    8480:	e5845054 	str	r5, [r4, #84]	; 0x54
    8484:	e5843000 	str	r3, [r4]
    8488:	e8bd8070 	pop	{r4, r5, r6, pc}
    848c:	000116b8 	.word	0x000116b8

00008490 <CScreenTask::Run()>:
    8490:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8494:	e30186c4 	movw	r8, #5828	; 0x16c4
    8498:	e30166d4 	movw	r6, #5844	; 0x16d4
    849c:	e30176cc 	movw	r7, #5836	; 0x16cc
    84a0:	e24dd010 	sub	sp, sp, #16
    84a4:	e3408001 	movt	r8, #1
    84a8:	e3406001 	movt	r6, #1
    84ac:	e3407001 	movt	r7, #1
    84b0:	e1a05000 	mov	r5, r0
    84b4:	e1a0000d 	mov	r0, sp
    84b8:	eb0017f5 	bl	e494 <CString::CString()>
    84bc:	e5952050 	ldr	r2, [r5, #80]	; 0x50
    84c0:	e1a01008 	mov	r1, r8
    84c4:	e1a0000d 	mov	r0, sp
    84c8:	eb001b50 	bl	f210 <CString::Format(char const*, ...)>
    84cc:	e5953050 	ldr	r3, [r5, #80]	; 0x50
    84d0:	e3530000 	cmp	r3, #0
    84d4:	13a04000 	movne	r4, #0
    84d8:	0a000006 	beq	84f8 <CScreenTask::Run()+0x68>
    84dc:	e1a01006 	mov	r1, r6
    84e0:	e1a0000d 	mov	r0, sp
    84e4:	eb00181c 	bl	e55c <CString::Append(char const*)>
    84e8:	e5953050 	ldr	r3, [r5, #80]	; 0x50
    84ec:	e2844001 	add	r4, r4, #1
    84f0:	e1530004 	cmp	r3, r4
    84f4:	8afffff8 	bhi	84dc <CScreenTask::Run()+0x4c>
    84f8:	e1a01007 	mov	r1, r7
    84fc:	e1a0000d 	mov	r0, sp
    8500:	eb001815 	bl	e55c <CString::Append(char const*)>
    8504:	e5954054 	ldr	r4, [r5, #84]	; 0x54
    8508:	e1a0000d 	mov	r0, sp
    850c:	e5943000 	ldr	r3, [r4]
    8510:	e593900c 	ldr	r9, [r3, #12]
    8514:	eb0017f5 	bl	e4f0 <CString::operator char const*() const>
    8518:	e1a0a000 	mov	sl, r0
    851c:	e1a0000d 	mov	r0, sp
    8520:	eb001809 	bl	e54c <CString::GetLength() const>
    8524:	e1a0100a 	mov	r1, sl
    8528:	e1a02000 	mov	r2, r0
    852c:	e1a00004 	mov	r0, r4
    8530:	e12fff39 	blx	r9
    8534:	eb0002c6 	bl	9054 <CScheduler::Get()>
    8538:	e5953050 	ldr	r3, [r5, #80]	; 0x50
    853c:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    8540:	e0010391 	mul	r1, r1, r3
    8544:	eb000294 	bl	8f9c <CScheduler::MsSleep(unsigned int)>
    8548:	e1a0000d 	mov	r0, sp
    854c:	eb00179d 	bl	e3c8 <CString::~CString()>
    8550:	eaffffd7 	b	84b4 <CScreenTask::Run()+0x24>

00008554 <CPrimeTask::~CPrimeTask()>:
    8554:	e59f3014 	ldr	r3, [pc, #20]	; 8570 <CPrimeTask::~CPrimeTask()+0x1c>
    8558:	e92d4010 	push	{r4, lr}
    855c:	e1a04000 	mov	r4, r0
    8560:	e5803000 	str	r3, [r0]
    8564:	eb0000ad 	bl	8820 <CTask::~CTask()>
    8568:	e1a00004 	mov	r0, r4
    856c:	e8bd8010 	pop	{r4, pc}
    8570:	000116e4 	.word	0x000116e4

00008574 <CPrimeTask::~CPrimeTask()>:
    8574:	e59f3024 	ldr	r3, [pc, #36]	; 85a0 <CPrimeTask::~CPrimeTask()+0x2c>
    8578:	e92d4010 	push	{r4, lr}
    857c:	e1a04000 	mov	r4, r0
    8580:	e5803000 	str	r3, [r0]
    8584:	eb0000a5 	bl	8820 <CTask::~CTask()>
    8588:	e1a00004 	mov	r0, r4
    858c:	e30b1c74 	movw	r1, #48244	; 0xbc74
    8590:	e34010be 	movt	r1, #190	; 0xbe
    8594:	eb0007c1 	bl	a4a0 <operator delete(void*, unsigned int)>
    8598:	e1a00004 	mov	r0, r4
    859c:	e8bd8010 	pop	{r4, pc}
    85a0:	000116e4 	.word	0x000116e4

000085a4 <CPrimeTask::CPrimeTask(CScreenDevice*)>:
    85a4:	e92d4070 	push	{r4, r5, r6, lr}
    85a8:	e1a05001 	mov	r5, r1
    85ac:	e3a01901 	mov	r1, #16384	; 0x4000
    85b0:	e1a04000 	mov	r4, r0
    85b4:	eb0000e9 	bl	8960 <CTask::CTask(unsigned int)>
    85b8:	e59f300c 	ldr	r3, [pc, #12]	; 85cc <CPrimeTask::CPrimeTask(CScreenDevice*)+0x28>
    85bc:	e1a00004 	mov	r0, r4
    85c0:	e5845050 	str	r5, [r4, #80]	; 0x50
    85c4:	e5843000 	str	r3, [r4]
    85c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    85cc:	000116e4 	.word	0x000116e4

000085d0 <CPrimeTask::IsPrime(unsigned int)>:
    85d0:	e1a032a1 	lsr	r3, r1, #5
    85d4:	e3a02001 	mov	r2, #1
    85d8:	e201101f 	and	r1, r1, #31
    85dc:	e0800103 	add	r0, r0, r3, lsl #2
    85e0:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    85e4:	e0133112 	ands	r3, r3, r2, lsl r1
    85e8:	11a00002 	movne	r0, r2
    85ec:	03a00000 	moveq	r0, #0
    85f0:	e12fff1e 	bx	lr

000085f4 <CPrimeTask::NotPrime(unsigned int)>:
    85f4:	e1a032a1 	lsr	r3, r1, #5
    85f8:	e3a02001 	mov	r2, #1
    85fc:	e201101f 	and	r1, r1, #31
    8600:	e0800103 	add	r0, r0, r3, lsl #2
    8604:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    8608:	e1c31112 	bic	r1, r3, r2, lsl r1
    860c:	e5801054 	str	r1, [r0, #84]	; 0x54
    8610:	e12fff1e 	bx	lr

00008614 <CPrimeTask::Run()>:
    8614:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8618:	e30b2c20 	movw	r2, #48160	; 0xbc20
    861c:	e24dd010 	sub	sp, sp, #16
    8620:	e1a06000 	mov	r6, r0
    8624:	e34020be 	movt	r2, #190	; 0xbe
    8628:	e2800054 	add	r0, r0, #84	; 0x54
    862c:	e3a010ff 	mov	r1, #255	; 0xff
    8630:	e3a05ce1 	mov	r5, #57600	; 0xe100
    8634:	eb000b03 	bl	b248 <memset>
    8638:	e30e80ff 	movw	r8, #57599	; 0xe0ff
    863c:	e34055f5 	movt	r5, #1525	; 0x5f5
    8640:	e34085f5 	movt	r8, #1525	; 0x5f5
    8644:	e3a04002 	mov	r4, #2
    8648:	e3a07001 	mov	r7, #1
    864c:	e1a032a4 	lsr	r3, r4, #5
    8650:	e204201f 	and	r2, r4, #31
    8654:	e0863103 	add	r3, r6, r3, lsl #2
    8658:	e5931054 	ldr	r1, [r3, #84]	; 0x54
    865c:	e1a03002 	mov	r3, r2
    8660:	e0113317 	ands	r3, r1, r7, lsl r3
    8664:	0a00000d 	beq	86a0 <CPrimeTask::Run()+0x8c>
    8668:	e0030494 	mul	r3, r4, r4
    866c:	e1530005 	cmp	r3, r5
    8670:	0a000008 	beq	8698 <CPrimeTask::Run()+0x84>
    8674:	e1a022a3 	lsr	r2, r3, #5
    8678:	e203001f 	and	r0, r3, #31
    867c:	e0833004 	add	r3, r3, r4
    8680:	e0862102 	add	r2, r6, r2, lsl #2
    8684:	e1530008 	cmp	r3, r8
    8688:	e5921054 	ldr	r1, [r2, #84]	; 0x54
    868c:	e1c11017 	bic	r1, r1, r7, lsl r0
    8690:	e5821054 	str	r1, [r2, #84]	; 0x54
    8694:	9afffff6 	bls	8674 <CPrimeTask::Run()+0x60>
    8698:	eb00026d 	bl	9054 <CScheduler::Get()>
    869c:	eb0001be 	bl	8d9c <CScheduler::Yield()>
    86a0:	e2844001 	add	r4, r4, #1
    86a4:	e3023711 	movw	r3, #10001	; 0x2711
    86a8:	e1540003 	cmp	r4, r3
    86ac:	1affffe6 	bne	864c <CPrimeTask::Run()+0x38>
    86b0:	e30e40ff 	movw	r4, #57599	; 0xe0ff
    86b4:	e3a00001 	mov	r0, #1
    86b8:	e34045f5 	movt	r4, #1525	; 0x5f5
    86bc:	ea000002 	b	86cc <CPrimeTask::Run()+0xb8>
    86c0:	e2444001 	sub	r4, r4, #1
    86c4:	e3540001 	cmp	r4, #1
    86c8:	0a00001b 	beq	873c <CPrimeTask::Run()+0x128>
    86cc:	e1a032a4 	lsr	r3, r4, #5
    86d0:	e204201f 	and	r2, r4, #31
    86d4:	e0863103 	add	r3, r6, r3, lsl #2
    86d8:	e5931054 	ldr	r1, [r3, #84]	; 0x54
    86dc:	e1a03002 	mov	r3, r2
    86e0:	e0113310 	ands	r3, r1, r0, lsl r3
    86e4:	0afffff5 	beq	86c0 <CPrimeTask::Run()+0xac>
    86e8:	e1a0000d 	mov	r0, sp
    86ec:	eb001768 	bl	e494 <CString::CString()>
    86f0:	e1a02004 	mov	r2, r4
    86f4:	e1a0000d 	mov	r0, sp
    86f8:	e30116f0 	movw	r1, #5872	; 0x16f0
    86fc:	e3401001 	movt	r1, #1
    8700:	eb001ac2 	bl	f210 <CString::Format(char const*, ...)>
    8704:	e5964050 	ldr	r4, [r6, #80]	; 0x50
    8708:	e1a0000d 	mov	r0, sp
    870c:	e5943000 	ldr	r3, [r4]
    8710:	e593500c 	ldr	r5, [r3, #12]
    8714:	eb001775 	bl	e4f0 <CString::operator char const*() const>
    8718:	e1a06000 	mov	r6, r0
    871c:	e1a0000d 	mov	r0, sp
    8720:	eb001789 	bl	e54c <CString::GetLength() const>
    8724:	e1a01006 	mov	r1, r6
    8728:	e1a02000 	mov	r2, r0
    872c:	e1a00004 	mov	r0, r4
    8730:	e12fff35 	blx	r5
    8734:	e1a0000d 	mov	r0, sp
    8738:	eb001722 	bl	e3c8 <CString::~CString()>
    873c:	e28dd010 	add	sp, sp, #16
    8740:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008744 <CLEDTask::~CLEDTask()>:
    8744:	e59f3014 	ldr	r3, [pc, #20]	; 8760 <CLEDTask::~CLEDTask()+0x1c>
    8748:	e92d4010 	push	{r4, lr}
    874c:	e1a04000 	mov	r4, r0
    8750:	e5803000 	str	r3, [r0]
    8754:	eb000031 	bl	8820 <CTask::~CTask()>
    8758:	e1a00004 	mov	r0, r4
    875c:	e8bd8010 	pop	{r4, pc}
    8760:	00011720 	.word	0x00011720

00008764 <CLEDTask::~CLEDTask()>:
    8764:	e59f3020 	ldr	r3, [pc, #32]	; 878c <CLEDTask::~CLEDTask()+0x28>
    8768:	e92d4010 	push	{r4, lr}
    876c:	e1a04000 	mov	r4, r0
    8770:	e5803000 	str	r3, [r0]
    8774:	eb000029 	bl	8820 <CTask::~CTask()>
    8778:	e1a00004 	mov	r0, r4
    877c:	e3a01054 	mov	r1, #84	; 0x54
    8780:	eb000746 	bl	a4a0 <operator delete(void*, unsigned int)>
    8784:	e1a00004 	mov	r0, r4
    8788:	e8bd8010 	pop	{r4, pc}
    878c:	00011720 	.word	0x00011720

00008790 <CLEDTask::Run()>:
    8790:	e92d4070 	push	{r4, r5, r6, lr}
    8794:	e1a05000 	mov	r5, r0
    8798:	e3a04005 	mov	r4, #5
    879c:	e5950050 	ldr	r0, [r5, #80]	; 0x50
    87a0:	eb000280 	bl	91a8 <CActLED::On()>
    87a4:	eb00022a 	bl	9054 <CScheduler::Get()>
    87a8:	e3a010c8 	mov	r1, #200	; 0xc8
    87ac:	eb0001fa 	bl	8f9c <CScheduler::MsSleep(unsigned int)>
    87b0:	e5950050 	ldr	r0, [r5, #80]	; 0x50
    87b4:	eb00028b 	bl	91e8 <CActLED::Off()>
    87b8:	eb000225 	bl	9054 <CScheduler::Get()>
    87bc:	e3a010c8 	mov	r1, #200	; 0xc8
    87c0:	eb0001f5 	bl	8f9c <CScheduler::MsSleep(unsigned int)>
    87c4:	e2544001 	subs	r4, r4, #1
    87c8:	1afffff3 	bne	879c <CLEDTask::Run()+0xc>
    87cc:	eb000220 	bl	9054 <CScheduler::Get()>
    87d0:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    87d4:	eb0001f0 	bl	8f9c <CScheduler::MsSleep(unsigned int)>
    87d8:	eaffffee 	b	8798 <CLEDTask::Run()+0x8>

000087dc <CLEDTask::CLEDTask(CActLED*)>:
    87dc:	e92d4070 	push	{r4, r5, r6, lr}
    87e0:	e1a05001 	mov	r5, r1
    87e4:	e3a01901 	mov	r1, #16384	; 0x4000
    87e8:	e1a04000 	mov	r4, r0
    87ec:	eb00005b 	bl	8960 <CTask::CTask(unsigned int)>
    87f0:	e59f300c 	ldr	r3, [pc, #12]	; 8804 <CLEDTask::CLEDTask(CActLED*)+0x28>
    87f4:	e1a00004 	mov	r0, r4
    87f8:	e5845050 	str	r5, [r4, #80]	; 0x50
    87fc:	e5843000 	str	r3, [r4]
    8800:	e8bd8070 	pop	{r4, r5, r6, pc}
    8804:	00011720 	.word	0x00011720

00008808 <CTask::Run()>:
    8808:	e3011740 	movw	r1, #5952	; 0x1740
    880c:	e30301ac 	movw	r0, #12716	; 0x31ac
    8810:	e3401001 	movt	r1, #1
    8814:	e3400001 	movt	r0, #1
    8818:	e3a02036 	mov	r2, #54	; 0x36
    881c:	ea00120f 	b	d060 <assertion_failed>

00008820 <CTask::~CTask()>:
    8820:	e5d02004 	ldrb	r2, [r0, #4]
    8824:	e59f3048 	ldr	r3, [pc, #72]	; 8874 <CTask::~CTask()+0x54>
    8828:	e3520003 	cmp	r2, #3
    882c:	e92d4010 	push	{r4, lr}
    8830:	e1a04000 	mov	r4, r0
    8834:	e5803000 	str	r3, [r0]
    8838:	0a000005 	beq	8854 <CTask::~CTask()+0x34>
    883c:	e3011740 	movw	r1, #5952	; 0x1740
    8840:	e301074c 	movw	r0, #5964	; 0x174c
    8844:	e3401001 	movt	r1, #1
    8848:	e3400001 	movt	r0, #1
    884c:	e3a0202d 	mov	r2, #45	; 0x2d
    8850:	eb001202 	bl	d060 <assertion_failed>
    8854:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
    8858:	e3a03004 	mov	r3, #4
    885c:	e5c43004 	strb	r3, [r4, #4]
    8860:	e3500000 	cmp	r0, #0
    8864:	0a000000 	beq	886c <CTask::~CTask()+0x4c>
    8868:	eb00070b 	bl	a49c <operator delete[](void*)>
    886c:	e1a00004 	mov	r0, r4
    8870:	e8bd8010 	pop	{r4, pc}
    8874:	00011734 	.word	0x00011734

00008878 <CTask::~CTask()>:
    8878:	e92d4010 	push	{r4, lr}
    887c:	e1a04000 	mov	r4, r0
    8880:	ebffffe6 	bl	8820 <CTask::~CTask()>
    8884:	e1a00004 	mov	r0, r4
    8888:	e3a01050 	mov	r1, #80	; 0x50
    888c:	eb000703 	bl	a4a0 <operator delete(void*, unsigned int)>
    8890:	e1a00004 	mov	r0, r4
    8894:	e8bd8010 	pop	{r4, pc}

00008898 <CTask::TaskEntry(void*)>:
    8898:	e92d4010 	push	{r4, lr}
    889c:	e2504000 	subs	r4, r0, #0
    88a0:	0a00000e 	beq	88e0 <CTask::TaskEntry(void*)+0x48>
    88a4:	e5943000 	ldr	r3, [r4]
    88a8:	e1a00004 	mov	r0, r4
    88ac:	e5933008 	ldr	r3, [r3, #8]
    88b0:	e12fff33 	blx	r3
    88b4:	e3a03003 	mov	r3, #3
    88b8:	e5c43004 	strb	r3, [r4, #4]
    88bc:	eb0001e4 	bl	9054 <CScheduler::Get()>
    88c0:	eb000135 	bl	8d9c <CScheduler::Yield()>
    88c4:	e3011740 	movw	r1, #5952	; 0x1740
    88c8:	e30301ac 	movw	r0, #12716	; 0x31ac
    88cc:	e3401001 	movt	r1, #1
    88d0:	e3400001 	movt	r0, #1
    88d4:	e3a0204f 	mov	r2, #79	; 0x4f
    88d8:	e8bd4010 	pop	{r4, lr}
    88dc:	ea0011df 	b	d060 <assertion_failed>
    88e0:	e3011740 	movw	r1, #5952	; 0x1740
    88e4:	e3010680 	movw	r0, #5760	; 0x1680
    88e8:	e3401001 	movt	r1, #1
    88ec:	e3400001 	movt	r0, #1
    88f0:	e3a02048 	mov	r2, #72	; 0x48
    88f4:	eb0011d9 	bl	d060 <assertion_failed>
    88f8:	eaffffe9 	b	88a4 <CTask::TaskEntry(void*)+0xc>

000088fc <CTask::InitializeRegs()>:
    88fc:	e92d4010 	push	{r4, lr}
    8900:	e3a0203c 	mov	r2, #60	; 0x3c
    8904:	e1a04000 	mov	r4, r0
    8908:	e3a01000 	mov	r1, #0
    890c:	e280000c 	add	r0, r0, #12
    8910:	eb000a4c 	bl	b248 <memset>
    8914:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    8918:	e584400c 	str	r4, [r4, #12]
    891c:	e3530000 	cmp	r3, #0
    8920:	0a000006 	beq	8940 <CTask::InitializeRegs()+0x44>
    8924:	e5941048 	ldr	r1, [r4, #72]	; 0x48
    8928:	e3082898 	movw	r2, #34968	; 0x8898
    892c:	e3402000 	movt	r2, #0
    8930:	e5842044 	str	r2, [r4, #68]	; 0x44
    8934:	e0833001 	add	r3, r3, r1
    8938:	e5843040 	str	r3, [r4, #64]	; 0x40
    893c:	e8bd8010 	pop	{r4, pc}
    8940:	e3011740 	movw	r1, #5952	; 0x1740
    8944:	e301076c 	movw	r0, #5996	; 0x176c
    8948:	e3401001 	movt	r1, #1
    894c:	e3400001 	movt	r0, #1
    8950:	e3a0203f 	mov	r2, #63	; 0x3f
    8954:	eb0011c1 	bl	d060 <assertion_failed>
    8958:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    895c:	eafffff0 	b	8924 <CTask::InitializeRegs()+0x28>

00008960 <CTask::CTask(unsigned int)>:
    8960:	e59f20a4 	ldr	r2, [pc, #164]	; 8a0c <CTask::CTask(unsigned int)+0xac>
    8964:	e3510000 	cmp	r1, #0
    8968:	e92d4010 	push	{r4, lr}
    896c:	e3a03000 	mov	r3, #0
    8970:	e1a04000 	mov	r4, r0
    8974:	e5801048 	str	r1, [r0, #72]	; 0x48
    8978:	e5802000 	str	r2, [r0]
    897c:	e5c03004 	strb	r3, [r0, #4]
    8980:	e580304c 	str	r3, [r0, #76]	; 0x4c
    8984:	0a000008 	beq	89ac <CTask::CTask(unsigned int)+0x4c>
    8988:	e3510b01 	cmp	r1, #1024	; 0x400
    898c:	3a00000b 	bcc	89c0 <CTask::CTask(unsigned int)+0x60>
    8990:	e3110003 	tst	r1, #3
    8994:	1a000012 	bne	89e4 <CTask::CTask(unsigned int)+0x84>
    8998:	e1a00001 	mov	r0, r1
    899c:	eb0006bc 	bl	a494 <operator new[](unsigned int)>
    89a0:	e584004c 	str	r0, [r4, #76]	; 0x4c
    89a4:	e1a00004 	mov	r0, r4
    89a8:	ebffffd3 	bl	88fc <CTask::InitializeRegs()>
    89ac:	eb0001a8 	bl	9054 <CScheduler::Get()>
    89b0:	e1a01004 	mov	r1, r4
    89b4:	eb00002f 	bl	8a78 <CScheduler::AddTask(CTask*)>
    89b8:	e1a00004 	mov	r0, r4
    89bc:	e8bd8010 	pop	{r4, pc}
    89c0:	e3011740 	movw	r1, #5952	; 0x1740
    89c4:	e301077c 	movw	r0, #6012	; 0x177c
    89c8:	e3401001 	movt	r1, #1
    89cc:	e3400001 	movt	r0, #1
    89d0:	e3a02020 	mov	r2, #32
    89d4:	eb0011a1 	bl	d060 <assertion_failed>
    89d8:	e5941048 	ldr	r1, [r4, #72]	; 0x48
    89dc:	e3110003 	tst	r1, #3
    89e0:	0affffec 	beq	8998 <CTask::CTask(unsigned int)+0x38>
    89e4:	e3a02021 	mov	r2, #33	; 0x21
    89e8:	e3011740 	movw	r1, #5952	; 0x1740
    89ec:	e3010794 	movw	r0, #6036	; 0x1794
    89f0:	e3401001 	movt	r1, #1
    89f4:	e3400001 	movt	r0, #1
    89f8:	eb001198 	bl	d060 <assertion_failed>
    89fc:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    8a00:	eb0006a3 	bl	a494 <operator new[](unsigned int)>
    8a04:	e584004c 	str	r0, [r4, #76]	; 0x4c
    8a08:	eaffffe5 	b	89a4 <CTask::CTask(unsigned int)+0x44>
    8a0c:	00011734 	.word	0x00011734

00008a10 <CScheduler::CScheduler()>:
    8a10:	e92d4070 	push	{r4, r5, r6, lr}
    8a14:	e303589c 	movw	r5, #14492	; 0x389c
    8a18:	e3405001 	movt	r5, #1
    8a1c:	e3a03000 	mov	r3, #0
    8a20:	e1a04000 	mov	r4, r0
    8a24:	e5803050 	str	r3, [r0, #80]	; 0x50
    8a28:	e5952000 	ldr	r2, [r5]
    8a2c:	e5803054 	str	r3, [r0, #84]	; 0x54
    8a30:	e1520003 	cmp	r2, r3
    8a34:	e5803058 	str	r3, [r0, #88]	; 0x58
    8a38:	0a000005 	beq	8a54 <CScheduler::CScheduler()+0x44>
    8a3c:	e30117b4 	movw	r1, #6068	; 0x17b4
    8a40:	e30107c4 	movw	r0, #6084	; 0x17c4
    8a44:	e3401001 	movt	r1, #1
    8a48:	e3400001 	movt	r0, #1
    8a4c:	e3a02022 	mov	r2, #34	; 0x22
    8a50:	eb001182 	bl	d060 <assertion_failed>
    8a54:	e3a00050 	mov	r0, #80	; 0x50
    8a58:	e5854000 	str	r4, [r5]
    8a5c:	eb00068b 	bl	a490 <operator new(unsigned int)>
    8a60:	e3a01000 	mov	r1, #0
    8a64:	e1a05000 	mov	r5, r0
    8a68:	ebffffbc 	bl	8960 <CTask::CTask(unsigned int)>
    8a6c:	e5845054 	str	r5, [r4, #84]	; 0x54
    8a70:	e1a00004 	mov	r0, r4
    8a74:	e8bd8070 	pop	{r4, r5, r6, pc}

00008a78 <CScheduler::AddTask(CTask*)>:
    8a78:	e92d4070 	push	{r4, r5, r6, lr}
    8a7c:	e2515000 	subs	r5, r1, #0
    8a80:	e1a04000 	mov	r4, r0
    8a84:	0a00001d 	beq	8b00 <CScheduler::AddTask(CTask*)+0x88>
    8a88:	e5940050 	ldr	r0, [r4, #80]	; 0x50
    8a8c:	e3500000 	cmp	r0, #0
    8a90:	0a000021 	beq	8b1c <CScheduler::AddTask(CTask*)+0xa4>
    8a94:	e5943000 	ldr	r3, [r4]
    8a98:	e3530000 	cmp	r3, #0
    8a9c:	11a02004 	movne	r2, r4
    8aa0:	13a03000 	movne	r3, #0
    8aa4:	1a000003 	bne	8ab8 <CScheduler::AddTask(CTask*)+0x40>
    8aa8:	ea000009 	b	8ad4 <CScheduler::AddTask(CTask*)+0x5c>
    8aac:	e5b21004 	ldr	r1, [r2, #4]!
    8ab0:	e3510000 	cmp	r1, #0
    8ab4:	0a000006 	beq	8ad4 <CScheduler::AddTask(CTask*)+0x5c>
    8ab8:	e2833001 	add	r3, r3, #1
    8abc:	e1530000 	cmp	r3, r0
    8ac0:	1afffff9 	bne	8aac <CScheduler::AddTask(CTask*)+0x34>
    8ac4:	e3530014 	cmp	r3, #20
    8ac8:	0a000003 	beq	8adc <CScheduler::AddTask(CTask*)+0x64>
    8acc:	e2832001 	add	r2, r3, #1
    8ad0:	e5842050 	str	r2, [r4, #80]	; 0x50
    8ad4:	e7845103 	str	r5, [r4, r3, lsl #2]
    8ad8:	e8bd8070 	pop	{r4, r5, r6, pc}
    8adc:	eb0012e4 	bl	d674 <CLogger::Get()>
    8ae0:	e30137e0 	movw	r3, #6112	; 0x17e0
    8ae4:	e30117ac 	movw	r1, #6060	; 0x17ac
    8ae8:	e3403001 	movt	r3, #1
    8aec:	e3401001 	movt	r1, #1
    8af0:	e3a02000 	mov	r2, #0
    8af4:	eb0013ba 	bl	d9e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8af8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    8afc:	eafffff2 	b	8acc <CScheduler::AddTask(CTask*)+0x54>
    8b00:	e30117b4 	movw	r1, #6068	; 0x17b4
    8b04:	e30107d4 	movw	r0, #6100	; 0x17d4
    8b08:	e3401001 	movt	r1, #1
    8b0c:	e3400001 	movt	r0, #1
    8b10:	e3a02075 	mov	r2, #117	; 0x75
    8b14:	eb001151 	bl	d060 <assertion_failed>
    8b18:	eaffffda 	b	8a88 <CScheduler::AddTask(CTask*)+0x10>
    8b1c:	e1a03000 	mov	r3, r0
    8b20:	eaffffe9 	b	8acc <CScheduler::AddTask(CTask*)+0x54>

00008b24 <CScheduler::RemoveTask(CTask*)>:
    8b24:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8b28:	e590e050 	ldr	lr, [r0, #80]	; 0x50
    8b2c:	e35e0000 	cmp	lr, #0
    8b30:	0a00000b 	beq	8b64 <CScheduler::RemoveTask(CTask*)+0x40>
    8b34:	e5903000 	ldr	r3, [r0]
    8b38:	e1510003 	cmp	r1, r3
    8b3c:	11a02000 	movne	r2, r0
    8b40:	13a03000 	movne	r3, #0
    8b44:	1a000003 	bne	8b58 <CScheduler::RemoveTask(CTask*)+0x34>
    8b48:	ea00000c 	b	8b80 <CScheduler::RemoveTask(CTask*)+0x5c>
    8b4c:	e5b2c004 	ldr	ip, [r2, #4]!
    8b50:	e15c0001 	cmp	ip, r1
    8b54:	0a00000a 	beq	8b84 <CScheduler::RemoveTask(CTask*)+0x60>
    8b58:	e2833001 	add	r3, r3, #1
    8b5c:	e153000e 	cmp	r3, lr
    8b60:	1afffff9 	bne	8b4c <CScheduler::RemoveTask(CTask*)+0x28>
    8b64:	e30117b4 	movw	r1, #6068	; 0x17b4
    8b68:	e30301ac 	movw	r0, #12716	; 0x31ac
    8b6c:	e3401001 	movt	r1, #1
    8b70:	e3400001 	movt	r0, #1
    8b74:	e3a0209b 	mov	r2, #155	; 0x9b
    8b78:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    8b7c:	ea001137 	b	d060 <assertion_failed>
    8b80:	e3a03000 	mov	r3, #0
    8b84:	e24ee001 	sub	lr, lr, #1
    8b88:	e3a02000 	mov	r2, #0
    8b8c:	e15e0003 	cmp	lr, r3
    8b90:	e7802103 	str	r2, [r0, r3, lsl #2]
    8b94:	05803050 	streq	r3, [r0, #80]	; 0x50
    8b98:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008b9c <CScheduler::~CScheduler()>:
    8b9c:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    8ba0:	e92d4010 	push	{r4, lr}
    8ba4:	e3530001 	cmp	r3, #1
    8ba8:	e1a04000 	mov	r4, r0
    8bac:	0a000005 	beq	8bc8 <CScheduler::~CScheduler()+0x2c>
    8bb0:	e30117b4 	movw	r1, #6068	; 0x17b4
    8bb4:	e3010800 	movw	r0, #6144	; 0x1800
    8bb8:	e3401001 	movt	r1, #1
    8bbc:	e3400001 	movt	r0, #1
    8bc0:	e3a0202b 	mov	r2, #43	; 0x2b
    8bc4:	eb001125 	bl	d060 <assertion_failed>
    8bc8:	e5941054 	ldr	r1, [r4, #84]	; 0x54
    8bcc:	e5943000 	ldr	r3, [r4]
    8bd0:	e1530001 	cmp	r3, r1
    8bd4:	0a000006 	beq	8bf4 <CScheduler::~CScheduler()+0x58>
    8bd8:	e30117b4 	movw	r1, #6068	; 0x17b4
    8bdc:	e3010810 	movw	r0, #6160	; 0x1810
    8be0:	e3401001 	movt	r1, #1
    8be4:	e3400001 	movt	r0, #1
    8be8:	e3a0202c 	mov	r2, #44	; 0x2c
    8bec:	eb00111b 	bl	d060 <assertion_failed>
    8bf0:	e5941054 	ldr	r1, [r4, #84]	; 0x54
    8bf4:	e1a00004 	mov	r0, r4
    8bf8:	ebffffc9 	bl	8b24 <CScheduler::RemoveTask(CTask*)>
    8bfc:	e5940054 	ldr	r0, [r4, #84]	; 0x54
    8c00:	e3500000 	cmp	r0, #0
    8c04:	0a000002 	beq	8c14 <CScheduler::~CScheduler()+0x78>
    8c08:	e5903000 	ldr	r3, [r0]
    8c0c:	e5933004 	ldr	r3, [r3, #4]
    8c10:	e12fff33 	blx	r3
    8c14:	e303389c 	movw	r3, #14492	; 0x389c
    8c18:	e3403001 	movt	r3, #1
    8c1c:	e3a02000 	mov	r2, #0
    8c20:	e1a00004 	mov	r0, r4
    8c24:	e5832000 	str	r2, [r3]
    8c28:	e8bd8010 	pop	{r4, pc}

00008c2c <CScheduler::WakeTask(CTask**)>:
    8c2c:	e92d4070 	push	{r4, r5, r6, lr}
    8c30:	e2515000 	subs	r5, r1, #0
    8c34:	0a000010 	beq	8c7c <CScheduler::WakeTask(CTask**)+0x50>
    8c38:	e5954000 	ldr	r4, [r5]
    8c3c:	e3a03000 	mov	r3, #0
    8c40:	e5853000 	str	r3, [r5]
    8c44:	e1540003 	cmp	r4, r3
    8c48:	0a000012 	beq	8c98 <CScheduler::WakeTask(CTask**)+0x6c>
    8c4c:	e5d43004 	ldrb	r3, [r4, #4]
    8c50:	e3530001 	cmp	r3, #1
    8c54:	0a000005 	beq	8c70 <CScheduler::WakeTask(CTask**)+0x44>
    8c58:	e30117b4 	movw	r1, #6068	; 0x17b4
    8c5c:	e3010838 	movw	r0, #6200	; 0x1838
    8c60:	e3401001 	movt	r1, #1
    8c64:	e3400001 	movt	r0, #1
    8c68:	e3a020b9 	mov	r2, #185	; 0xb9
    8c6c:	eb0010fb 	bl	d060 <assertion_failed>
    8c70:	e3a03000 	mov	r3, #0
    8c74:	e5c43004 	strb	r3, [r4, #4]
    8c78:	e8bd8070 	pop	{r4, r5, r6, pc}
    8c7c:	e30117b4 	movw	r1, #6068	; 0x17b4
    8c80:	e301082c 	movw	r0, #6188	; 0x182c
    8c84:	e3401001 	movt	r1, #1
    8c88:	e3400001 	movt	r0, #1
    8c8c:	e3a020ac 	mov	r2, #172	; 0xac
    8c90:	eb0010f2 	bl	d060 <assertion_failed>
    8c94:	eaffffe7 	b	8c38 <CScheduler::WakeTask(CTask**)+0xc>
    8c98:	e30117b4 	movw	r1, #6068	; 0x17b4
    8c9c:	e30107d4 	movw	r0, #6100	; 0x17d4
    8ca0:	e3401001 	movt	r1, #1
    8ca4:	e3400001 	movt	r0, #1
    8ca8:	e3a020b8 	mov	r2, #184	; 0xb8
    8cac:	eb0010eb 	bl	d060 <assertion_failed>
    8cb0:	eaffffe5 	b	8c4c <CScheduler::WakeTask(CTask**)+0x20>

00008cb4 <CScheduler::GetNextTask()>:
    8cb4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8cb8:	e1a07000 	mov	r7, r0
    8cbc:	e5904058 	ldr	r4, [r0, #88]	; 0x58
    8cc0:	e3540014 	cmp	r4, #20
    8cc4:	23a04000 	movcs	r4, #0
    8cc8:	eb000950 	bl	b210 <CTimer::Get()>
    8ccc:	eb0006fd 	bl	a8c8 <CTimer::GetClockTicks()>
    8cd0:	e5973050 	ldr	r3, [r7, #80]	; 0x50
    8cd4:	e3530000 	cmp	r3, #0
    8cd8:	0a00001b 	beq	8d4c <CScheduler::GetNextTask()+0x98>
    8cdc:	e30197b4 	movw	r9, #6068	; 0x17b4
    8ce0:	e30381ac 	movw	r8, #12716	; 0x31ac
    8ce4:	e3409001 	movt	r9, #1
    8ce8:	e3408001 	movt	r8, #1
    8cec:	e1a0a000 	mov	sl, r0
    8cf0:	e3a06001 	mov	r6, #1
    8cf4:	e2844001 	add	r4, r4, #1
    8cf8:	e2866001 	add	r6, r6, #1
    8cfc:	e1540003 	cmp	r4, r3
    8d00:	23a04000 	movcs	r4, #0
    8d04:	e7975104 	ldr	r5, [r7, r4, lsl #2]
    8d08:	e3550000 	cmp	r5, #0
    8d0c:	0a00000c 	beq	8d44 <CScheduler::GetNextTask()+0x90>
    8d10:	e5d52004 	ldrb	r2, [r5, #4]
    8d14:	e3520003 	cmp	r2, #3
    8d18:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    8d1c:	ea000003 	b	8d30 <CScheduler::GetNextTask()+0x7c>
    8d20:	00008d50 	.word	0x00008d50
    8d24:	00008d44 	.word	0x00008d44
    8d28:	00008d80 	.word	0x00008d80
    8d2c:	00008d58 	.word	0x00008d58
    8d30:	e3a020e8 	mov	r2, #232	; 0xe8
    8d34:	e1a01009 	mov	r1, r9
    8d38:	e1a00008 	mov	r0, r8
    8d3c:	eb0010c7 	bl	d060 <assertion_failed>
    8d40:	e5973050 	ldr	r3, [r7, #80]	; 0x50
    8d44:	e1530006 	cmp	r3, r6
    8d48:	2affffe9 	bcs	8cf4 <CScheduler::GetNextTask()+0x40>
    8d4c:	e3a04014 	mov	r4, #20
    8d50:	e1a00004 	mov	r0, r4
    8d54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8d58:	e1a00007 	mov	r0, r7
    8d5c:	e1a01005 	mov	r1, r5
    8d60:	ebffff6f 	bl	8b24 <CScheduler::RemoveTask(CTask*)>
    8d64:	e5953000 	ldr	r3, [r5]
    8d68:	e1a00005 	mov	r0, r5
    8d6c:	e3a04014 	mov	r4, #20
    8d70:	e5933004 	ldr	r3, [r3, #4]
    8d74:	e12fff33 	blx	r3
    8d78:	e1a00004 	mov	r0, r4
    8d7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8d80:	e5952008 	ldr	r2, [r5, #8]
    8d84:	e042200a 	sub	r2, r2, sl
    8d88:	e3520000 	cmp	r2, #0
    8d8c:	caffffec 	bgt	8d44 <CScheduler::GetNextTask()+0x90>
    8d90:	e3a03000 	mov	r3, #0
    8d94:	e5c53004 	strb	r3, [r5, #4]
    8d98:	eaffffec 	b	8d50 <CScheduler::GetNextTask()+0x9c>

00008d9c <CScheduler::Yield()>:
    8d9c:	e92d4070 	push	{r4, r5, r6, lr}
    8da0:	e30167b4 	movw	r6, #6068	; 0x17b4
    8da4:	e3015860 	movw	r5, #6240	; 0x1860
    8da8:	e3406001 	movt	r6, #1
    8dac:	e3405001 	movt	r5, #1
    8db0:	e1a04000 	mov	r4, r0
    8db4:	ea000002 	b	8dc4 <CScheduler::Yield()+0x28>
    8db8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    8dbc:	e3530000 	cmp	r3, #0
    8dc0:	0a000016 	beq	8e20 <CScheduler::Yield()+0x84>
    8dc4:	e1a00004 	mov	r0, r4
    8dc8:	ebffffb9 	bl	8cb4 <CScheduler::GetNextTask()>
    8dcc:	e3500014 	cmp	r0, #20
    8dd0:	e5840058 	str	r0, [r4, #88]	; 0x58
    8dd4:	0afffff7 	beq	8db8 <CScheduler::Yield()+0x1c>
    8dd8:	e3500013 	cmp	r0, #19
    8ddc:	8a000014 	bhi	8e34 <CScheduler::Yield()+0x98>
    8de0:	e7945100 	ldr	r5, [r4, r0, lsl #2]
    8de4:	e3550000 	cmp	r5, #0
    8de8:	0a000019 	beq	8e54 <CScheduler::Yield()+0xb8>
    8dec:	e5940054 	ldr	r0, [r4, #84]	; 0x54
    8df0:	e1550000 	cmp	r5, r0
    8df4:	08bd8070 	popeq	{r4, r5, r6, pc}
    8df8:	e290600c 	adds	r6, r0, #12
    8dfc:	e5845054 	str	r5, [r4, #84]	; 0x54
    8e00:	e285500c 	add	r5, r5, #12
    8e04:	0a000019 	beq	8e70 <CScheduler::Yield()+0xd4>
    8e08:	e3550000 	cmp	r5, #0
    8e0c:	0a00001e 	beq	8e8c <CScheduler::Yield()+0xf0>
    8e10:	e1a01005 	mov	r1, r5
    8e14:	e1a00006 	mov	r0, r6
    8e18:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e1c:	ea00009a 	b	908c <TaskSwitch>
    8e20:	e3a02038 	mov	r2, #56	; 0x38
    8e24:	e1a01006 	mov	r1, r6
    8e28:	e1a00005 	mov	r0, r5
    8e2c:	eb00108b 	bl	d060 <assertion_failed>
    8e30:	eaffffe3 	b	8dc4 <CScheduler::Yield()+0x28>
    8e34:	e30117b4 	movw	r1, #6068	; 0x17b4
    8e38:	e3010870 	movw	r0, #6256	; 0x1870
    8e3c:	e3401001 	movt	r1, #1
    8e40:	e3400001 	movt	r0, #1
    8e44:	e3a0203b 	mov	r2, #59	; 0x3b
    8e48:	eb001084 	bl	d060 <assertion_failed>
    8e4c:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    8e50:	eaffffe2 	b	8de0 <CScheduler::Yield()+0x44>
    8e54:	e30117b4 	movw	r1, #6068	; 0x17b4
    8e58:	e3010888 	movw	r0, #6280	; 0x1888
    8e5c:	e3401001 	movt	r1, #1
    8e60:	e3400001 	movt	r0, #1
    8e64:	e3a0203d 	mov	r2, #61	; 0x3d
    8e68:	eb00107c 	bl	d060 <assertion_failed>
    8e6c:	eaffffde 	b	8dec <CScheduler::Yield()+0x50>
    8e70:	e30117b4 	movw	r1, #6068	; 0x17b4
    8e74:	e3010894 	movw	r0, #6292	; 0x1894
    8e78:	e3401001 	movt	r1, #1
    8e7c:	e3400001 	movt	r0, #1
    8e80:	e3a02047 	mov	r2, #71	; 0x47
    8e84:	eb001075 	bl	d060 <assertion_failed>
    8e88:	eaffffde 	b	8e08 <CScheduler::Yield()+0x6c>
    8e8c:	e30117b4 	movw	r1, #6068	; 0x17b4
    8e90:	e30108a4 	movw	r0, #6308	; 0x18a4
    8e94:	e3401001 	movt	r1, #1
    8e98:	e3400001 	movt	r0, #1
    8e9c:	e3a02048 	mov	r2, #72	; 0x48
    8ea0:	eb00106e 	bl	d060 <assertion_failed>
    8ea4:	eaffffd9 	b	8e10 <CScheduler::Yield()+0x74>

00008ea8 <CScheduler::usSleep(unsigned int) [clone .part.2]>:
    8ea8:	e92d4070 	push	{r4, r5, r6, lr}
    8eac:	e1a05000 	mov	r5, r0
    8eb0:	e1a06001 	mov	r6, r1
    8eb4:	eb0008d5 	bl	b210 <CTimer::Get()>
    8eb8:	eb000682 	bl	a8c8 <CTimer::GetClockTicks()>
    8ebc:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8ec0:	e3530000 	cmp	r3, #0
    8ec4:	e1a04000 	mov	r4, r0
    8ec8:	0a000011 	beq	8f14 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x6c>
    8ecc:	e5d32004 	ldrb	r2, [r3, #4]
    8ed0:	e3520000 	cmp	r2, #0
    8ed4:	1a000006 	bne	8ef4 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x4c>
    8ed8:	e0844006 	add	r4, r4, r6
    8edc:	e1a00005 	mov	r0, r5
    8ee0:	e5834008 	str	r4, [r3, #8]
    8ee4:	e3a02002 	mov	r2, #2
    8ee8:	e8bd4070 	pop	{r4, r5, r6, lr}
    8eec:	e5c32004 	strb	r2, [r3, #4]
    8ef0:	eaffffa9 	b	8d9c <CScheduler::Yield()>
    8ef4:	e30117b4 	movw	r1, #6068	; 0x17b4
    8ef8:	e30108c4 	movw	r0, #6340	; 0x18c4
    8efc:	e3401001 	movt	r1, #1
    8f00:	e3400001 	movt	r0, #1
    8f04:	e3a0206b 	mov	r2, #107	; 0x6b
    8f08:	eb001054 	bl	d060 <assertion_failed>
    8f0c:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8f10:	eafffff0 	b	8ed8 <CScheduler::usSleep(unsigned int) [clone .part.2]+0x30>
    8f14:	e30117b4 	movw	r1, #6068	; 0x17b4
    8f18:	e30108b4 	movw	r0, #6324	; 0x18b4
    8f1c:	e3401001 	movt	r1, #1
    8f20:	e3400001 	movt	r0, #1
    8f24:	e3a0206a 	mov	r2, #106	; 0x6a
    8f28:	eb00104c 	bl	d060 <assertion_failed>
    8f2c:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8f30:	eaffffe5 	b	8ecc <CScheduler::usSleep(unsigned int) [clone .part.2]+0x24>

00008f34 <CScheduler::usSleep(unsigned int)>:
    8f34:	e3510000 	cmp	r1, #0
    8f38:	012fff1e 	bxeq	lr
    8f3c:	eaffffd9 	b	8ea8 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00008f40 <CScheduler::Sleep(unsigned int)>:
    8f40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8f44:	e3005708 	movw	r5, #1800	; 0x708
    8f48:	e1510005 	cmp	r1, r5
    8f4c:	e1a04001 	mov	r4, r1
    8f50:	e1a07000 	mov	r7, r0
    8f54:	9a000008 	bls	8f7c <CScheduler::Sleep(unsigned int)+0x3c>
    8f58:	e3a06cd2 	mov	r6, #53760	; 0xd200
    8f5c:	e3466b49 	movt	r6, #27465	; 0x6b49
    8f60:	e2444c07 	sub	r4, r4, #1792	; 0x700
    8f64:	e1a01006 	mov	r1, r6
    8f68:	e2444008 	sub	r4, r4, #8
    8f6c:	e1a00007 	mov	r0, r7
    8f70:	ebffffcc 	bl	8ea8 <CScheduler::usSleep(unsigned int) [clone .part.2]>
    8f74:	e1540005 	cmp	r4, r5
    8f78:	8afffff8 	bhi	8f60 <CScheduler::Sleep(unsigned int)+0x20>
    8f7c:	e3041240 	movw	r1, #16960	; 0x4240
    8f80:	e340100f 	movt	r1, #15
    8f84:	e0010491 	mul	r1, r1, r4
    8f88:	e3510000 	cmp	r1, #0
    8f8c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8f90:	e1a00007 	mov	r0, r7
    8f94:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8f98:	eaffffc2 	b	8ea8 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00008f9c <CScheduler::MsSleep(unsigned int)>:
    8f9c:	e3510000 	cmp	r1, #0
    8fa0:	012fff1e 	bxeq	lr
    8fa4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8fa8:	e0010193 	mul	r1, r3, r1
    8fac:	e3510000 	cmp	r1, #0
    8fb0:	012fff1e 	bxeq	lr
    8fb4:	eaffffbb 	b	8ea8 <CScheduler::usSleep(unsigned int) [clone .part.2]>

00008fb8 <CScheduler::BlockTask(CTask**)>:
    8fb8:	e92d4070 	push	{r4, r5, r6, lr}
    8fbc:	e2515000 	subs	r5, r1, #0
    8fc0:	e1a04000 	mov	r4, r0
    8fc4:	0a00001b 	beq	9038 <CScheduler::BlockTask(CTask**)+0x80>
    8fc8:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    8fcc:	e5853000 	str	r3, [r5]
    8fd0:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    8fd4:	e3530000 	cmp	r3, #0
    8fd8:	0a00000e 	beq	9018 <CScheduler::BlockTask(CTask**)+0x60>
    8fdc:	e5d32004 	ldrb	r2, [r3, #4]
    8fe0:	e3520000 	cmp	r2, #0
    8fe4:	0a000006 	beq	9004 <CScheduler::BlockTask(CTask**)+0x4c>
    8fe8:	e30117b4 	movw	r1, #6068	; 0x17b4
    8fec:	e30108c4 	movw	r0, #6340	; 0x18c4
    8ff0:	e3401001 	movt	r1, #1
    8ff4:	e3400001 	movt	r0, #1
    8ff8:	e3a020a4 	mov	r2, #164	; 0xa4
    8ffc:	eb001017 	bl	d060 <assertion_failed>
    9000:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    9004:	e1a00004 	mov	r0, r4
    9008:	e3a02001 	mov	r2, #1
    900c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9010:	e5c32004 	strb	r2, [r3, #4]
    9014:	eaffff60 	b	8d9c <CScheduler::Yield()>
    9018:	e30117b4 	movw	r1, #6068	; 0x17b4
    901c:	e30108b4 	movw	r0, #6324	; 0x18b4
    9020:	e3401001 	movt	r1, #1
    9024:	e3400001 	movt	r0, #1
    9028:	e3a020a3 	mov	r2, #163	; 0xa3
    902c:	eb00100b 	bl	d060 <assertion_failed>
    9030:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    9034:	eaffffe8 	b	8fdc <CScheduler::BlockTask(CTask**)+0x24>
    9038:	e30117b4 	movw	r1, #6068	; 0x17b4
    903c:	e301082c 	movw	r0, #6188	; 0x182c
    9040:	e3401001 	movt	r1, #1
    9044:	e3400001 	movt	r0, #1
    9048:	e3a020a0 	mov	r2, #160	; 0xa0
    904c:	eb001003 	bl	d060 <assertion_failed>
    9050:	eaffffdc 	b	8fc8 <CScheduler::BlockTask(CTask**)+0x10>

00009054 <CScheduler::Get()>:
    9054:	e92d4010 	push	{r4, lr}
    9058:	e303489c 	movw	r4, #14492	; 0x389c
    905c:	e3404001 	movt	r4, #1
    9060:	e5940000 	ldr	r0, [r4]
    9064:	e3500000 	cmp	r0, #0
    9068:	18bd8010 	popne	{r4, pc}
    906c:	e3a020f2 	mov	r2, #242	; 0xf2
    9070:	e30117b4 	movw	r1, #6068	; 0x17b4
    9074:	e30108f0 	movw	r0, #6384	; 0x18f0
    9078:	e3401001 	movt	r1, #1
    907c:	e3400001 	movt	r0, #1
    9080:	eb000ff6 	bl	d060 <assertion_failed>
    9084:	e5940000 	ldr	r0, [r4]
    9088:	e8bd8010 	pop	{r4, pc}

0000908c <TaskSwitch>:
    908c:	e8807fff 	stm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    9090:	e8917fff 	ldm	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    9094:	e12fff1e 	bx	lr

00009098 <CSynchronizationEvent::CSynchronizationEvent(int)>:
    9098:	e3a02000 	mov	r2, #0
    909c:	e5801000 	str	r1, [r0]
    90a0:	e5802004 	str	r2, [r0, #4]
    90a4:	e12fff1e 	bx	lr

000090a8 <CSynchronizationEvent::~CSynchronizationEvent()>:
    90a8:	e5903004 	ldr	r3, [r0, #4]
    90ac:	e92d4010 	push	{r4, lr}
    90b0:	e3530000 	cmp	r3, #0
    90b4:	e1a04000 	mov	r4, r0
    90b8:	0a000005 	beq	90d4 <CSynchronizationEvent::~CSynchronizationEvent()+0x2c>
    90bc:	e3011900 	movw	r1, #6400	; 0x1900
    90c0:	e301091c 	movw	r0, #6428	; 0x191c
    90c4:	e3401001 	movt	r1, #1
    90c8:	e3400001 	movt	r0, #1
    90cc:	e3a02020 	mov	r2, #32
    90d0:	eb000fe2 	bl	d060 <assertion_failed>
    90d4:	e1a00004 	mov	r0, r4
    90d8:	e8bd8010 	pop	{r4, pc}

000090dc <CSynchronizationEvent::GetState()>:
    90dc:	e5900000 	ldr	r0, [r0]
    90e0:	e12fff1e 	bx	lr

000090e4 <CSynchronizationEvent::Clear()>:
    90e4:	e3a03000 	mov	r3, #0
    90e8:	e5803000 	str	r3, [r0]
    90ec:	e12fff1e 	bx	lr

000090f0 <CSynchronizationEvent::Set()>:
    90f0:	e5903000 	ldr	r3, [r0]
    90f4:	e3530000 	cmp	r3, #0
    90f8:	112fff1e 	bxne	lr
    90fc:	e5903004 	ldr	r3, [r0, #4]
    9100:	e3a02001 	mov	r2, #1
    9104:	e5802000 	str	r2, [r0]
    9108:	e3530000 	cmp	r3, #0
    910c:	012fff1e 	bxeq	lr
    9110:	e92d4010 	push	{r4, lr}
    9114:	e1a04000 	mov	r4, r0
    9118:	ebffffcd 	bl	9054 <CScheduler::Get()>
    911c:	e2841004 	add	r1, r4, #4
    9120:	e8bd4010 	pop	{r4, lr}
    9124:	eafffec0 	b	8c2c <CScheduler::WakeTask(CTask**)>

00009128 <CSynchronizationEvent::Wait()>:
    9128:	e5903000 	ldr	r3, [r0]
    912c:	e3530000 	cmp	r3, #0
    9130:	112fff1e 	bxne	lr
    9134:	e5903004 	ldr	r3, [r0, #4]
    9138:	e92d4010 	push	{r4, lr}
    913c:	e3530000 	cmp	r3, #0
    9140:	e1a04000 	mov	r4, r0
    9144:	0a000005 	beq	9160 <CSynchronizationEvent::Wait()+0x38>
    9148:	e3011900 	movw	r1, #6400	; 0x1900
    914c:	e301091c 	movw	r0, #6428	; 0x191c
    9150:	e3401001 	movt	r1, #1
    9154:	e3400001 	movt	r0, #1
    9158:	e3a0203e 	mov	r2, #62	; 0x3e
    915c:	eb000fbf 	bl	d060 <assertion_failed>
    9160:	ebffffbb 	bl	9054 <CScheduler::Get()>
    9164:	e2841004 	add	r1, r4, #4
    9168:	ebffff92 	bl	8fb8 <CScheduler::BlockTask(CTask**)>
    916c:	e5943000 	ldr	r3, [r4]
    9170:	e3530000 	cmp	r3, #0
    9174:	18bd8010 	popne	{r4, pc}
    9178:	e3011900 	movw	r1, #6400	; 0x1900
    917c:	e3010930 	movw	r0, #6448	; 0x1930
    9180:	e3401001 	movt	r1, #1
    9184:	e3400001 	movt	r0, #1
    9188:	e3a02041 	mov	r2, #65	; 0x41
    918c:	e8bd4010 	pop	{r4, lr}
    9190:	ea000fb2 	b	d060 <assertion_failed>

00009194 <CActLED::~CActLED()>:
    9194:	e30338a0 	movw	r3, #14496	; 0x38a0
    9198:	e3403001 	movt	r3, #1
    919c:	e3a02000 	mov	r2, #0
    91a0:	e5832000 	str	r2, [r3]
    91a4:	e12fff1e 	bx	lr

000091a8 <CActLED::On()>:
    91a8:	e5903000 	ldr	r3, [r0]
    91ac:	e3530000 	cmp	r3, #0
    91b0:	0a000004 	beq	91c8 <CActLED::On()+0x20>
    91b4:	e5901008 	ldr	r1, [r0, #8]
    91b8:	e1a00003 	mov	r0, r3
    91bc:	e2911000 	adds	r1, r1, #0
    91c0:	13a01001 	movne	r1, #1
    91c4:	ea0000f0 	b	958c <CGPIOPin::Write(unsigned int)>
    91c8:	e5903004 	ldr	r3, [r0, #4]
    91cc:	e3530000 	cmp	r3, #0
    91d0:	012fff1e 	bxeq	lr
    91d4:	e5901008 	ldr	r1, [r0, #8]
    91d8:	e1a00003 	mov	r0, r3
    91dc:	e2911000 	adds	r1, r1, #0
    91e0:	13a01001 	movne	r1, #1
    91e4:	ea001b93 	b	10038 <CVirtualGPIOPin::Write(unsigned int)>

000091e8 <CActLED::Off()>:
    91e8:	e5903000 	ldr	r3, [r0]
    91ec:	e3530000 	cmp	r3, #0
    91f0:	0a000004 	beq	9208 <CActLED::Off()+0x20>
    91f4:	e5901008 	ldr	r1, [r0, #8]
    91f8:	e1a00003 	mov	r0, r3
    91fc:	e16f1f11 	clz	r1, r1
    9200:	e1a012a1 	lsr	r1, r1, #5
    9204:	ea0000e0 	b	958c <CGPIOPin::Write(unsigned int)>
    9208:	e5903004 	ldr	r3, [r0, #4]
    920c:	e3530000 	cmp	r3, #0
    9210:	012fff1e 	bxeq	lr
    9214:	e5901008 	ldr	r1, [r0, #8]
    9218:	e1a00003 	mov	r0, r3
    921c:	e16f1f11 	clz	r1, r1
    9220:	e1a012a1 	lsr	r1, r1, #5
    9224:	ea001b83 	b	10038 <CVirtualGPIOPin::Write(unsigned int)>

00009228 <CActLED::CActLED()>:
    9228:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    922c:	e30338a0 	movw	r3, #14496	; 0x38a0
    9230:	e24dd024 	sub	sp, sp, #36	; 0x24
    9234:	e1a04000 	mov	r4, r0
    9238:	e3403001 	movt	r3, #1
    923c:	e3a05000 	mov	r5, #0
    9240:	e28d0008 	add	r0, sp, #8
    9244:	e5845000 	str	r5, [r4]
    9248:	e5845004 	str	r5, [r4, #4]
    924c:	e5834000 	str	r4, [r3]
    9250:	eb000052 	bl	93a0 <CBcmPropertyTags::CBcmPropertyTags()>
    9254:	e3a03010 	mov	r3, #16
    9258:	e58d5000 	str	r5, [sp]
    925c:	e28d0008 	add	r0, sp, #8
    9260:	e3a01002 	mov	r1, #2
    9264:	e08d2003 	add	r2, sp, r3
    9268:	e3401001 	movt	r1, #1
    926c:	eb000093 	bl	94c0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9270:	e1500005 	cmp	r0, r5
    9274:	0a000011 	beq	92c0 <CActLED::CActLED()+0x98>
    9278:	e59d301c 	ldr	r3, [sp, #28]
    927c:	e3130502 	tst	r3, #8388608	; 0x800000
    9280:	1a000013 	bne	92d4 <CActLED::CActLED()+0xac>
    9284:	e6ff3073 	uxth	r3, r3
    9288:	e353000f 	cmp	r3, #15
    928c:	83a06001 	movhi	r6, #1
    9290:	9a000020 	bls	9318 <CActLED::CActLED()+0xf0>
    9294:	e3a00028 	mov	r0, #40	; 0x28
    9298:	eb00047c 	bl	a490 <operator new(unsigned int)>
    929c:	e3a03000 	mov	r3, #0
    92a0:	e3a02001 	mov	r2, #1
    92a4:	e3a0102f 	mov	r1, #47	; 0x2f
    92a8:	e1a05000 	mov	r5, r0
    92ac:	eb00034c 	bl	9fe4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    92b0:	e5845000 	str	r5, [r4]
    92b4:	e5846008 	str	r6, [r4, #8]
    92b8:	e1a00004 	mov	r0, r4
    92bc:	ebffffc9 	bl	91e8 <CActLED::Off()>
    92c0:	e28d0008 	add	r0, sp, #8
    92c4:	eb00003b 	bl	93b8 <CBcmPropertyTags::~CBcmPropertyTags()>
    92c8:	e1a00004 	mov	r0, r4
    92cc:	e28dd024 	add	sp, sp, #36	; 0x24
    92d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    92d4:	e7e73253 	ubfx	r3, r3, #4, #8
    92d8:	e3530001 	cmp	r3, #1
    92dc:	9a00000d 	bls	9318 <CActLED::CActLED()+0xf0>
    92e0:	e353000c 	cmp	r3, #12
    92e4:	13530009 	cmpne	r3, #9
    92e8:	03a06001 	moveq	r6, #1
    92ec:	13a06000 	movne	r6, #0
    92f0:	e3530008 	cmp	r3, #8
    92f4:	e2266001 	eor	r6, r6, #1
    92f8:	1affffe5 	bne	9294 <CActLED::CActLED()+0x6c>
    92fc:	e3a00010 	mov	r0, #16
    9300:	eb000462 	bl	a490 <operator new(unsigned int)>
    9304:	e1a01005 	mov	r1, r5
    9308:	e1a07000 	mov	r7, r0
    930c:	eb001b0d 	bl	ff48 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    9310:	e5847004 	str	r7, [r4, #4]
    9314:	eaffffe6 	b	92b4 <CActLED::CActLED()+0x8c>
    9318:	e3a00028 	mov	r0, #40	; 0x28
    931c:	eb00045b 	bl	a490 <operator new(unsigned int)>
    9320:	e3a03000 	mov	r3, #0
    9324:	e3a02001 	mov	r2, #1
    9328:	e3a01010 	mov	r1, #16
    932c:	e1a05000 	mov	r5, r0
    9330:	eb00032b 	bl	9fe4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9334:	e3a03000 	mov	r3, #0
    9338:	e5845000 	str	r5, [r4]
    933c:	e5843008 	str	r3, [r4, #8]
    9340:	eaffffdc 	b	92b8 <CActLED::CActLED()+0x90>

00009344 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    9344:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9348:	e2516000 	subs	r6, r1, #0
    934c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9350:	e1a08003 	mov	r8, r3
    9354:	e1a07002 	mov	r7, r2
    9358:	e1a05000 	mov	r5, r0
    935c:	e3a04001 	mov	r4, #1
    9360:	e1a00005 	mov	r0, r5
    9364:	e2844001 	add	r4, r4, #1
    9368:	ebffff8e 	bl	91a8 <CActLED::On()>
    936c:	e1a00007 	mov	r0, r7
    9370:	eb00075c 	bl	b0e8 <CTimer::SimpleMsDelay(unsigned int)>
    9374:	e1a00005 	mov	r0, r5
    9378:	ebffff9a 	bl	91e8 <CActLED::Off()>
    937c:	e1a00008 	mov	r0, r8
    9380:	eb000758 	bl	b0e8 <CTimer::SimpleMsDelay(unsigned int)>
    9384:	e1560004 	cmp	r6, r4
    9388:	2afffff4 	bcs	9360 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    938c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009390 <CActLED::Get()>:
    9390:	e30338a0 	movw	r3, #14496	; 0x38a0
    9394:	e3403001 	movt	r3, #1
    9398:	e5930000 	ldr	r0, [r3]
    939c:	e12fff1e 	bx	lr

000093a0 <CBcmPropertyTags::CBcmPropertyTags()>:
    93a0:	e92d4010 	push	{r4, lr}
    93a4:	e3a01008 	mov	r1, #8
    93a8:	e1a04000 	mov	r4, r0
    93ac:	eb001ef9 	bl	10f98 <CBcmMailBox::CBcmMailBox(unsigned int)>
    93b0:	e1a00004 	mov	r0, r4
    93b4:	e8bd8010 	pop	{r4, pc}

000093b8 <CBcmPropertyTags::~CBcmPropertyTags()>:
    93b8:	e92d4010 	push	{r4, lr}
    93bc:	e1a04000 	mov	r4, r0
    93c0:	eb001ef7 	bl	10fa4 <CBcmMailBox::~CBcmMailBox()>
    93c4:	e1a00004 	mov	r0, r4
    93c8:	e8bd8010 	pop	{r4, pc}

000093cc <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    93cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    93d0:	e2519000 	subs	r9, r1, #0
    93d4:	e1a0a000 	mov	sl, r0
    93d8:	e1a04002 	mov	r4, r2
    93dc:	0a000030 	beq	94a4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
    93e0:	e354000f 	cmp	r4, #15
    93e4:	9a000027 	bls	9488 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
    93e8:	e284800c 	add	r8, r4, #12
    93ec:	e3180003 	tst	r8, #3
    93f0:	1a00001d 	bne	946c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    93f4:	e3a05008 	mov	r5, #8
    93f8:	e3405040 	movt	r5, #64	; 0x40
    93fc:	e3a06501 	mov	r6, #4194304	; 0x400000
    9400:	e3a07000 	mov	r7, #0
    9404:	e1a00005 	mov	r0, r5
    9408:	e5868000 	str	r8, [r6]
    940c:	e5867004 	str	r7, [r6, #4]
    9410:	e1a02004 	mov	r2, r4
    9414:	e1a01009 	mov	r1, r9
    9418:	eb0008a2 	bl	b6a8 <memcpy>
    941c:	e7857004 	str	r7, [r5, r4]
    9420:	f57ff04f 	dsb	sy
    9424:	e1a01007 	mov	r1, r7
    9428:	e1a0000a 	mov	r0, sl
    942c:	e34c1040 	movt	r1, #49216	; 0xc040
    9430:	eb001f0b 	bl	11064 <CBcmMailBox::WriteRead(unsigned int)>
    9434:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    9438:	0a000001 	beq	9444 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    943c:	e3a00000 	mov	r0, #0
    9440:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9444:	f57ff05f 	dmb	sy
    9448:	e5963004 	ldr	r3, [r6, #4]
    944c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9450:	1afffff9 	bne	943c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    9454:	e1a02004 	mov	r2, r4
    9458:	e1a01005 	mov	r1, r5
    945c:	e1a00009 	mov	r0, r9
    9460:	eb000890 	bl	b6a8 <memcpy>
    9464:	e3a00001 	mov	r0, #1
    9468:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    946c:	e301193c 	movw	r1, #6460	; 0x193c
    9470:	e3010988 	movw	r0, #6536	; 0x1988
    9474:	e3401001 	movt	r1, #1
    9478:	e3400001 	movt	r0, #1
    947c:	e3a02051 	mov	r2, #81	; 0x51
    9480:	eb000ef6 	bl	d060 <assertion_failed>
    9484:	eaffffda 	b	93f4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    9488:	e301193c 	movw	r1, #6460	; 0x193c
    948c:	e301095c 	movw	r0, #6492	; 0x195c
    9490:	e3401001 	movt	r1, #1
    9494:	e3400001 	movt	r0, #1
    9498:	e3a0204f 	mov	r2, #79	; 0x4f
    949c:	eb000eef 	bl	d060 <assertion_failed>
    94a0:	eaffffd0 	b	93e8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    94a4:	e301193c 	movw	r1, #6460	; 0x193c
    94a8:	e3010950 	movw	r0, #6480	; 0x1950
    94ac:	e3401001 	movt	r1, #1
    94b0:	e3400001 	movt	r0, #1
    94b4:	e3a0204e 	mov	r2, #78	; 0x4e
    94b8:	eb000ee8 	bl	d060 <assertion_failed>
    94bc:	eaffffc7 	b	93e0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

000094c0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    94c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    94c4:	e2524000 	subs	r4, r2, #0
    94c8:	e1a07000 	mov	r7, r0
    94cc:	e1a08001 	mov	r8, r1
    94d0:	e1a05003 	mov	r5, r3
    94d4:	e59d6018 	ldr	r6, [sp, #24]
    94d8:	0a00001d 	beq	9554 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
    94dc:	e355000f 	cmp	r5, #15
    94e0:	9a000014 	bls	9538 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    94e4:	e245300c 	sub	r3, r5, #12
    94e8:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    94ec:	e5848000 	str	r8, [r4]
    94f0:	e1a00007 	mov	r0, r7
    94f4:	e5846008 	str	r6, [r4, #8]
    94f8:	e1a02005 	mov	r2, r5
    94fc:	e5843004 	str	r3, [r4, #4]
    9500:	e1a01004 	mov	r1, r4
    9504:	ebffffb0 	bl	93cc <CBcmPropertyTags::GetTags(void*, unsigned int)>
    9508:	e3500000 	cmp	r0, #0
    950c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9510:	e5940008 	ldr	r0, [r4, #8]
    9514:	e3500000 	cmp	r0, #0
    9518:	ba000001 	blt	9524 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    951c:	e3a00000 	mov	r0, #0
    9520:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9524:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    9528:	e5840008 	str	r0, [r4, #8]
    952c:	e2900000 	adds	r0, r0, #0
    9530:	13a00001 	movne	r0, #1
    9534:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9538:	e301193c 	movw	r1, #6460	; 0x193c
    953c:	e30109ac 	movw	r0, #6572	; 0x19ac
    9540:	e3401001 	movt	r1, #1
    9544:	e3400001 	movt	r0, #1
    9548:	e3a02032 	mov	r2, #50	; 0x32
    954c:	eb000ec3 	bl	d060 <assertion_failed>
    9550:	eaffffe3 	b	94e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    9554:	e301193c 	movw	r1, #6460	; 0x193c
    9558:	e30109a0 	movw	r0, #6560	; 0x19a0
    955c:	e3401001 	movt	r1, #1
    9560:	e3400001 	movt	r0, #1
    9564:	e3a02031 	mov	r2, #49	; 0x31
    9568:	eb000ebc 	bl	d060 <assertion_failed>
    956c:	eaffffda 	b	94dc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

00009570 <CGPIOPin::~CGPIOPin()>:
    9570:	e12fff1e 	bx	lr

00009574 <CGPIOPin::~CGPIOPin()>:
    9574:	e92d4010 	push	{r4, lr}
    9578:	e3a01028 	mov	r1, #40	; 0x28
    957c:	e1a04000 	mov	r4, r0
    9580:	eb0003c6 	bl	a4a0 <operator delete(void*, unsigned int)>
    9584:	e1a00004 	mov	r0, r4
    9588:	e8bd8010 	pop	{r4, pc}

0000958c <CGPIOPin::Write(unsigned int)>:
    958c:	e5d03010 	ldrb	r3, [r0, #16]
    9590:	e92d4070 	push	{r4, r5, r6, lr}
    9594:	e3530003 	cmp	r3, #3
    9598:	e1a04000 	mov	r4, r0
    959c:	e1a05001 	mov	r5, r1
    95a0:	ca000016 	bgt	9600 <CGPIOPin::Write(unsigned int)+0x74>
    95a4:	e3550001 	cmp	r5, #1
    95a8:	9a00000c 	bls	95e0 <CGPIOPin::Write(unsigned int)+0x54>
    95ac:	e30119fc 	movw	r1, #6652	; 0x19fc
    95b0:	e3010a2c 	movw	r0, #6700	; 0x1a2c
    95b4:	e3401001 	movt	r1, #1
    95b8:	e3400001 	movt	r0, #1
    95bc:	e3a02084 	mov	r2, #132	; 0x84
    95c0:	eb000ea6 	bl	d060 <assertion_failed>
    95c4:	e3a0301c 	mov	r3, #28
    95c8:	e3433f20 	movt	r3, #16160	; 0x3f20
    95cc:	e5845014 	str	r5, [r4, #20]
    95d0:	e594100c 	ldr	r1, [r4, #12]
    95d4:	e5942008 	ldr	r2, [r4, #8]
    95d8:	e7831002 	str	r1, [r3, r2]
    95dc:	e8bd8070 	pop	{r4, r5, r6, pc}
    95e0:	e3a02028 	mov	r2, #40	; 0x28
    95e4:	e3550000 	cmp	r5, #0
    95e8:	e3432f20 	movt	r2, #16160	; 0x3f20
    95ec:	e3a0301c 	mov	r3, #28
    95f0:	e5845014 	str	r5, [r4, #20]
    95f4:	e3433f20 	movt	r3, #16160	; 0x3f20
    95f8:	01a03002 	moveq	r3, r2
    95fc:	eafffff3 	b	95d0 <CGPIOPin::Write(unsigned int)+0x44>
    9600:	e30119fc 	movw	r1, #6652	; 0x19fc
    9604:	e3010a08 	movw	r0, #6664	; 0x1a08
    9608:	e3401001 	movt	r1, #1
    960c:	e3400001 	movt	r0, #1
    9610:	e3a02080 	mov	r2, #128	; 0x80
    9614:	eb000e91 	bl	d060 <assertion_failed>
    9618:	eaffffe1 	b	95a4 <CGPIOPin::Write(unsigned int)+0x18>

0000961c <CGPIOPin::Read() const>:
    961c:	e5d03010 	ldrb	r3, [r0, #16]
    9620:	e92d4010 	push	{r4, lr}
    9624:	e2432002 	sub	r2, r3, #2
    9628:	e3530000 	cmp	r3, #0
    962c:	13520001 	cmpne	r2, #1
    9630:	e1a04000 	mov	r4, r0
    9634:	9a000005 	bls	9650 <CGPIOPin::Read() const+0x34>
    9638:	e30119fc 	movw	r1, #6652	; 0x19fc
    963c:	e3010a4c 	movw	r0, #6732	; 0x1a4c
    9640:	e3401001 	movt	r1, #1
    9644:	e3400001 	movt	r0, #1
    9648:	e3a02092 	mov	r2, #146	; 0x92
    964c:	eb000e83 	bl	d060 <assertion_failed>
    9650:	e5941008 	ldr	r1, [r4, #8]
    9654:	e3a03034 	mov	r3, #52	; 0x34
    9658:	e3433f20 	movt	r3, #16160	; 0x3f20
    965c:	e594200c 	ldr	r2, [r4, #12]
    9660:	e7913003 	ldr	r3, [r1, r3]
    9664:	e1130002 	tst	r3, r2
    9668:	13a00001 	movne	r0, #1
    966c:	03a00000 	moveq	r0, #0
    9670:	e8bd8010 	pop	{r4, pc}

00009674 <CGPIOPin::Invert()>:
    9674:	e5d03010 	ldrb	r3, [r0, #16]
    9678:	e92d4010 	push	{r4, lr}
    967c:	e3530001 	cmp	r3, #1
    9680:	e1a04000 	mov	r4, r0
    9684:	0a000005 	beq	96a0 <CGPIOPin::Invert()+0x2c>
    9688:	e30119fc 	movw	r1, #6652	; 0x19fc
    968c:	e3010aa8 	movw	r0, #6824	; 0x1aa8
    9690:	e3401001 	movt	r1, #1
    9694:	e3400001 	movt	r0, #1
    9698:	e3a0209f 	mov	r2, #159	; 0x9f
    969c:	eb000e6f 	bl	d060 <assertion_failed>
    96a0:	e5941014 	ldr	r1, [r4, #20]
    96a4:	e1a00004 	mov	r0, r4
    96a8:	e8bd4010 	pop	{r4, lr}
    96ac:	e2211001 	eor	r1, r1, #1
    96b0:	eaffffb5 	b	958c <CGPIOPin::Write(unsigned int)>

000096b4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    96b4:	e5d03010 	ldrb	r3, [r0, #16]
    96b8:	e92d4070 	push	{r4, r5, r6, lr}
    96bc:	e1a06002 	mov	r6, r2
    96c0:	e2432002 	sub	r2, r3, #2
    96c4:	e1a04000 	mov	r4, r0
    96c8:	e3530000 	cmp	r3, #0
    96cc:	13520001 	cmpne	r2, #1
    96d0:	e1a05001 	mov	r5, r1
    96d4:	9a000005 	bls	96f0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
    96d8:	e30119fc 	movw	r1, #6652	; 0x19fc
    96dc:	e3010a4c 	movw	r0, #6732	; 0x1a4c
    96e0:	e3401001 	movt	r1, #1
    96e4:	e3400001 	movt	r0, #1
    96e8:	e3a020a8 	mov	r2, #168	; 0xa8
    96ec:	eb000e5b 	bl	d060 <assertion_failed>
    96f0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    96f4:	e3530006 	cmp	r3, #6
    96f8:	0a000005 	beq	9714 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
    96fc:	e30119fc 	movw	r1, #6652	; 0x19fc
    9700:	e3010ac4 	movw	r0, #6852	; 0x1ac4
    9704:	e3401001 	movt	r1, #1
    9708:	e3400001 	movt	r0, #1
    970c:	e3a020aa 	mov	r2, #170	; 0xaa
    9710:	eb000e52 	bl	d060 <assertion_failed>
    9714:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9718:	e3530006 	cmp	r3, #6
    971c:	0a000005 	beq	9738 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
    9720:	e30119fc 	movw	r1, #6652	; 0x19fc
    9724:	e3010ae8 	movw	r0, #6888	; 0x1ae8
    9728:	e3401001 	movt	r1, #1
    972c:	e3400001 	movt	r0, #1
    9730:	e3a020ab 	mov	r2, #171	; 0xab
    9734:	eb000e49 	bl	d060 <assertion_failed>
    9738:	e3550000 	cmp	r5, #0
    973c:	0a00001a 	beq	97ac <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    9740:	e594301c 	ldr	r3, [r4, #28]
    9744:	e3530000 	cmp	r3, #0
    9748:	0a000005 	beq	9764 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    974c:	e30119fc 	movw	r1, #6652	; 0x19fc
    9750:	e3010b10 	movw	r0, #6928	; 0x1b10
    9754:	e3401001 	movt	r1, #1
    9758:	e3400001 	movt	r0, #1
    975c:	e3a020ae 	mov	r2, #174	; 0xae
    9760:	eb000e3e 	bl	d060 <assertion_failed>
    9764:	e5940018 	ldr	r0, [r4, #24]
    9768:	e584501c 	str	r5, [r4, #28]
    976c:	e3500000 	cmp	r0, #0
    9770:	e5846020 	str	r6, [r4, #32]
    9774:	0a000002 	beq	9784 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    9778:	e1a01004 	mov	r1, r4
    977c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9780:	ea00192a 	b	fc30 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    9784:	e30119fc 	movw	r1, #6652	; 0x19fc
    9788:	e3010b20 	movw	r0, #6944	; 0x1b20
    978c:	e3401001 	movt	r1, #1
    9790:	e3400001 	movt	r0, #1
    9794:	e3a020b3 	mov	r2, #179	; 0xb3
    9798:	eb000e30 	bl	d060 <assertion_failed>
    979c:	e5940018 	ldr	r0, [r4, #24]
    97a0:	e1a01004 	mov	r1, r4
    97a4:	e8bd4070 	pop	{r4, r5, r6, lr}
    97a8:	ea001920 	b	fc30 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    97ac:	e30119fc 	movw	r1, #6652	; 0x19fc
    97b0:	e3030154 	movw	r0, #12628	; 0x3154
    97b4:	e3401001 	movt	r1, #1
    97b8:	e3400001 	movt	r0, #1
    97bc:	e3a020ad 	mov	r2, #173	; 0xad
    97c0:	eb000e26 	bl	d060 <assertion_failed>
    97c4:	eaffffdd 	b	9740 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

000097c8 <CGPIOPin::DisconnectInterrupt()>:
    97c8:	e5d03010 	ldrb	r3, [r0, #16]
    97cc:	e92d4010 	push	{r4, lr}
    97d0:	e2432002 	sub	r2, r3, #2
    97d4:	e3530000 	cmp	r3, #0
    97d8:	13520001 	cmpne	r2, #1
    97dc:	e1a04000 	mov	r4, r0
    97e0:	9a000005 	bls	97fc <CGPIOPin::DisconnectInterrupt()+0x34>
    97e4:	e30119fc 	movw	r1, #6652	; 0x19fc
    97e8:	e3010a4c 	movw	r0, #6732	; 0x1a4c
    97ec:	e3401001 	movt	r1, #1
    97f0:	e3400001 	movt	r0, #1
    97f4:	e3a020bb 	mov	r2, #187	; 0xbb
    97f8:	eb000e18 	bl	d060 <assertion_failed>
    97fc:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9800:	e3530006 	cmp	r3, #6
    9804:	0a000005 	beq	9820 <CGPIOPin::DisconnectInterrupt()+0x58>
    9808:	e30119fc 	movw	r1, #6652	; 0x19fc
    980c:	e3010ac4 	movw	r0, #6852	; 0x1ac4
    9810:	e3401001 	movt	r1, #1
    9814:	e3400001 	movt	r0, #1
    9818:	e3a020bd 	mov	r2, #189	; 0xbd
    981c:	eb000e0f 	bl	d060 <assertion_failed>
    9820:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9824:	e3530006 	cmp	r3, #6
    9828:	0a000005 	beq	9844 <CGPIOPin::DisconnectInterrupt()+0x7c>
    982c:	e30119fc 	movw	r1, #6652	; 0x19fc
    9830:	e3010ae8 	movw	r0, #6888	; 0x1ae8
    9834:	e3401001 	movt	r1, #1
    9838:	e3400001 	movt	r0, #1
    983c:	e3a020be 	mov	r2, #190	; 0xbe
    9840:	eb000e06 	bl	d060 <assertion_failed>
    9844:	e594301c 	ldr	r3, [r4, #28]
    9848:	e3530000 	cmp	r3, #0
    984c:	0a000011 	beq	9898 <CGPIOPin::DisconnectInterrupt()+0xd0>
    9850:	e5940018 	ldr	r0, [r4, #24]
    9854:	e3a03000 	mov	r3, #0
    9858:	e584301c 	str	r3, [r4, #28]
    985c:	e1500003 	cmp	r0, r3
    9860:	0a000002 	beq	9870 <CGPIOPin::DisconnectInterrupt()+0xa8>
    9864:	e1a01004 	mov	r1, r4
    9868:	e8bd4010 	pop	{r4, lr}
    986c:	ea00191b 	b	fce0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    9870:	e30119fc 	movw	r1, #6652	; 0x19fc
    9874:	e3010b20 	movw	r0, #6944	; 0x1b20
    9878:	e3401001 	movt	r1, #1
    987c:	e3400001 	movt	r0, #1
    9880:	e3a020c3 	mov	r2, #195	; 0xc3
    9884:	eb000df5 	bl	d060 <assertion_failed>
    9888:	e5940018 	ldr	r0, [r4, #24]
    988c:	e1a01004 	mov	r1, r4
    9890:	e8bd4010 	pop	{r4, lr}
    9894:	ea001911 	b	fce0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    9898:	e30119fc 	movw	r1, #6652	; 0x19fc
    989c:	e3010b30 	movw	r0, #6960	; 0x1b30
    98a0:	e3401001 	movt	r1, #1
    98a4:	e3400001 	movt	r0, #1
    98a8:	e3a020c0 	mov	r2, #192	; 0xc0
    98ac:	eb000deb 	bl	d060 <assertion_failed>
    98b0:	eaffffe6 	b	9850 <CGPIOPin::DisconnectInterrupt()+0x88>

000098b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    98b4:	e5d03010 	ldrb	r3, [r0, #16]
    98b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    98bc:	e2432002 	sub	r2, r3, #2
    98c0:	e3530000 	cmp	r3, #0
    98c4:	13520001 	cmpne	r2, #1
    98c8:	e1a04000 	mov	r4, r0
    98cc:	e1a08001 	mov	r8, r1
    98d0:	9a000005 	bls	98ec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
    98d4:	e30119fc 	movw	r1, #6652	; 0x19fc
    98d8:	e3010a4c 	movw	r0, #6732	; 0x1a4c
    98dc:	e3401001 	movt	r1, #1
    98e0:	e3400001 	movt	r0, #1
    98e4:	e3a020cb 	mov	r2, #203	; 0xcb
    98e8:	eb000ddc 	bl	d060 <assertion_failed>
    98ec:	e594301c 	ldr	r3, [r4, #28]
    98f0:	e3530000 	cmp	r3, #0
    98f4:	0a000034 	beq	99cc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
    98f8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    98fc:	e3530006 	cmp	r3, #6
    9900:	0a000005 	beq	991c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x68>
    9904:	e30119fc 	movw	r1, #6652	; 0x19fc
    9908:	e3010ac4 	movw	r0, #6852	; 0x1ac4
    990c:	e3401001 	movt	r1, #1
    9910:	e3400001 	movt	r0, #1
    9914:	e3a020ce 	mov	r2, #206	; 0xce
    9918:	eb000dd0 	bl	d060 <assertion_failed>
    991c:	e3580005 	cmp	r8, #5
    9920:	ca000019 	bgt	998c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd8>
    9924:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9928:	e1530008 	cmp	r3, r8
    992c:	0a00001f 	beq	99b0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xfc>
    9930:	e30368a4 	movw	r6, #14500	; 0x38a4
    9934:	e3406001 	movt	r6, #1
    9938:	e5943008 	ldr	r3, [r4, #8]
    993c:	e3a0504c 	mov	r5, #76	; 0x4c
    9940:	e5960000 	ldr	r0, [r6]
    9944:	e3435f20 	movt	r5, #16160	; 0x3f20
    9948:	e3a0700c 	mov	r7, #12
    994c:	e5c48024 	strb	r8, [r4, #36]	; 0x24
    9950:	e3500000 	cmp	r0, #0
    9954:	e0835005 	add	r5, r3, r5
    9958:	e0070897 	mul	r7, r7, r8
    995c:	1a000008 	bne	9984 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd0>
    9960:	e594200c 	ldr	r2, [r4, #12]
    9964:	e7953007 	ldr	r3, [r5, r7]
    9968:	e1833002 	orr	r3, r3, r2
    996c:	e7853007 	str	r3, [r5, r7]
    9970:	e5963000 	ldr	r3, [r6]
    9974:	e3530000 	cmp	r3, #0
    9978:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    997c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9980:	ea0002f6 	b	a560 <LeaveCritical>
    9984:	eb0002c7 	bl	a4a8 <EnterCritical>
    9988:	eafffff4 	b	9960 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
    998c:	e30119fc 	movw	r1, #6652	; 0x19fc
    9990:	e3010b40 	movw	r0, #6976	; 0x1b40
    9994:	e3401001 	movt	r1, #1
    9998:	e3400001 	movt	r0, #1
    999c:	e3a020cf 	mov	r2, #207	; 0xcf
    99a0:	eb000dae 	bl	d060 <assertion_failed>
    99a4:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    99a8:	e1530008 	cmp	r3, r8
    99ac:	1affffdf 	bne	9930 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
    99b0:	e30119fc 	movw	r1, #6652	; 0x19fc
    99b4:	e3010b64 	movw	r0, #7012	; 0x1b64
    99b8:	e3401001 	movt	r1, #1
    99bc:	e3400001 	movt	r0, #1
    99c0:	e3a020d0 	mov	r2, #208	; 0xd0
    99c4:	eb000da5 	bl	d060 <assertion_failed>
    99c8:	eaffffd8 	b	9930 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
    99cc:	e30119fc 	movw	r1, #6652	; 0x19fc
    99d0:	e3010b30 	movw	r0, #6960	; 0x1b30
    99d4:	e3401001 	movt	r1, #1
    99d8:	e3400001 	movt	r0, #1
    99dc:	e3a020cc 	mov	r2, #204	; 0xcc
    99e0:	eb000d9e 	bl	d060 <assertion_failed>
    99e4:	eaffffc3 	b	98f8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>

000099e8 <CGPIOPin::DisableInterrupt()>:
    99e8:	e5d03010 	ldrb	r3, [r0, #16]
    99ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    99f0:	e2432002 	sub	r2, r3, #2
    99f4:	e3530000 	cmp	r3, #0
    99f8:	13520001 	cmpne	r2, #1
    99fc:	e1a04000 	mov	r4, r0
    9a00:	9a000005 	bls	9a1c <CGPIOPin::DisableInterrupt()+0x34>
    9a04:	e30119fc 	movw	r1, #6652	; 0x19fc
    9a08:	e3010a4c 	movw	r0, #6732	; 0x1a4c
    9a0c:	e3401001 	movt	r1, #1
    9a10:	e3400001 	movt	r0, #1
    9a14:	e3a020e1 	mov	r2, #225	; 0xe1
    9a18:	eb000d90 	bl	d060 <assertion_failed>
    9a1c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9a20:	e3530005 	cmp	r3, #5
    9a24:	ca000017 	bgt	9a88 <CGPIOPin::DisableInterrupt()+0xa0>
    9a28:	e30368a4 	movw	r6, #14500	; 0x38a4
    9a2c:	e3406001 	movt	r6, #1
    9a30:	e5942008 	ldr	r2, [r4, #8]
    9a34:	e3a0504c 	mov	r5, #76	; 0x4c
    9a38:	e5960000 	ldr	r0, [r6]
    9a3c:	e3435f20 	movt	r5, #16160	; 0x3f20
    9a40:	e3a0700c 	mov	r7, #12
    9a44:	e0825005 	add	r5, r2, r5
    9a48:	e3500000 	cmp	r0, #0
    9a4c:	e0070397 	mul	r7, r7, r3
    9a50:	1a00000a 	bne	9a80 <CGPIOPin::DisableInterrupt()+0x98>
    9a54:	e7953007 	ldr	r3, [r5, r7]
    9a58:	e594200c 	ldr	r2, [r4, #12]
    9a5c:	e1c33002 	bic	r3, r3, r2
    9a60:	e7853007 	str	r3, [r5, r7]
    9a64:	e5963000 	ldr	r3, [r6]
    9a68:	e3530000 	cmp	r3, #0
    9a6c:	0a000000 	beq	9a74 <CGPIOPin::DisableInterrupt()+0x8c>
    9a70:	eb0002ba 	bl	a560 <LeaveCritical>
    9a74:	e3a03006 	mov	r3, #6
    9a78:	e5c43024 	strb	r3, [r4, #36]	; 0x24
    9a7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9a80:	eb000288 	bl	a4a8 <EnterCritical>
    9a84:	eafffff2 	b	9a54 <CGPIOPin::DisableInterrupt()+0x6c>
    9a88:	e30119fc 	movw	r1, #6652	; 0x19fc
    9a8c:	e3010b80 	movw	r0, #7040	; 0x1b80
    9a90:	e3401001 	movt	r1, #1
    9a94:	e3400001 	movt	r0, #1
    9a98:	e3a020e3 	mov	r2, #227	; 0xe3
    9a9c:	eb000d6f 	bl	d060 <assertion_failed>
    9aa0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9aa4:	eaffffdf 	b	9a28 <CGPIOPin::DisableInterrupt()+0x40>

00009aa8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    9aa8:	e5d03010 	ldrb	r3, [r0, #16]
    9aac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9ab0:	e2432002 	sub	r2, r3, #2
    9ab4:	e3530000 	cmp	r3, #0
    9ab8:	13520001 	cmpne	r2, #1
    9abc:	e1a04000 	mov	r4, r0
    9ac0:	e1a08001 	mov	r8, r1
    9ac4:	9a000005 	bls	9ae0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
    9ac8:	e30119fc 	movw	r1, #6652	; 0x19fc
    9acc:	e3010a4c 	movw	r0, #6732	; 0x1a4c
    9ad0:	e3401001 	movt	r1, #1
    9ad4:	e3400001 	movt	r0, #1
    9ad8:	e3a020f4 	mov	r2, #244	; 0xf4
    9adc:	eb000d5f 	bl	d060 <assertion_failed>
    9ae0:	e594301c 	ldr	r3, [r4, #28]
    9ae4:	e3530000 	cmp	r3, #0
    9ae8:	0a000034 	beq	9bc0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
    9aec:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9af0:	e3530006 	cmp	r3, #6
    9af4:	0a000005 	beq	9b10 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x68>
    9af8:	e30119fc 	movw	r1, #6652	; 0x19fc
    9afc:	e3010ae8 	movw	r0, #6888	; 0x1ae8
    9b00:	e3401001 	movt	r1, #1
    9b04:	e3400001 	movt	r0, #1
    9b08:	e3a020f7 	mov	r2, #247	; 0xf7
    9b0c:	eb000d53 	bl	d060 <assertion_failed>
    9b10:	e3580005 	cmp	r8, #5
    9b14:	ca000019 	bgt	9b80 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd8>
    9b18:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9b1c:	e1530008 	cmp	r3, r8
    9b20:	0a00001f 	beq	9ba4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
    9b24:	e30368a4 	movw	r6, #14500	; 0x38a4
    9b28:	e3406001 	movt	r6, #1
    9b2c:	e5943008 	ldr	r3, [r4, #8]
    9b30:	e3a0504c 	mov	r5, #76	; 0x4c
    9b34:	e5960000 	ldr	r0, [r6]
    9b38:	e3435f20 	movt	r5, #16160	; 0x3f20
    9b3c:	e3a0700c 	mov	r7, #12
    9b40:	e5c48025 	strb	r8, [r4, #37]	; 0x25
    9b44:	e3500000 	cmp	r0, #0
    9b48:	e0835005 	add	r5, r3, r5
    9b4c:	e0070897 	mul	r7, r7, r8
    9b50:	1a000008 	bne	9b78 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd0>
    9b54:	e594200c 	ldr	r2, [r4, #12]
    9b58:	e7953007 	ldr	r3, [r5, r7]
    9b5c:	e1833002 	orr	r3, r3, r2
    9b60:	e7853007 	str	r3, [r5, r7]
    9b64:	e5963000 	ldr	r3, [r6]
    9b68:	e3530000 	cmp	r3, #0
    9b6c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9b70:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9b74:	ea000279 	b	a560 <LeaveCritical>
    9b78:	eb00024a 	bl	a4a8 <EnterCritical>
    9b7c:	eafffff4 	b	9b54 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
    9b80:	e30119fc 	movw	r1, #6652	; 0x19fc
    9b84:	e3010b40 	movw	r0, #6976	; 0x1b40
    9b88:	e3401001 	movt	r1, #1
    9b8c:	e3400001 	movt	r0, #1
    9b90:	e3a020f8 	mov	r2, #248	; 0xf8
    9b94:	eb000d31 	bl	d060 <assertion_failed>
    9b98:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9b9c:	e1530008 	cmp	r3, r8
    9ba0:	1affffdf 	bne	9b24 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
    9ba4:	e30119fc 	movw	r1, #6652	; 0x19fc
    9ba8:	e3010ba4 	movw	r0, #7076	; 0x1ba4
    9bac:	e3401001 	movt	r1, #1
    9bb0:	e3400001 	movt	r0, #1
    9bb4:	e3a020f9 	mov	r2, #249	; 0xf9
    9bb8:	eb000d28 	bl	d060 <assertion_failed>
    9bbc:	eaffffd8 	b	9b24 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
    9bc0:	e30119fc 	movw	r1, #6652	; 0x19fc
    9bc4:	e3010b30 	movw	r0, #6960	; 0x1b30
    9bc8:	e3401001 	movt	r1, #1
    9bcc:	e3400001 	movt	r0, #1
    9bd0:	e3a020f5 	mov	r2, #245	; 0xf5
    9bd4:	eb000d21 	bl	d060 <assertion_failed>
    9bd8:	eaffffc3 	b	9aec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>

00009bdc <CGPIOPin::DisableInterrupt2()>:
    9bdc:	e5d03010 	ldrb	r3, [r0, #16]
    9be0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9be4:	e2432002 	sub	r2, r3, #2
    9be8:	e3530000 	cmp	r3, #0
    9bec:	13520001 	cmpne	r2, #1
    9bf0:	e1a04000 	mov	r4, r0
    9bf4:	9a000005 	bls	9c10 <CGPIOPin::DisableInterrupt2()+0x34>
    9bf8:	e30119fc 	movw	r1, #6652	; 0x19fc
    9bfc:	e3010a4c 	movw	r0, #6732	; 0x1a4c
    9c00:	e3401001 	movt	r1, #1
    9c04:	e3400001 	movt	r0, #1
    9c08:	e300210a 	movw	r2, #266	; 0x10a
    9c0c:	eb000d13 	bl	d060 <assertion_failed>
    9c10:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9c14:	e3530005 	cmp	r3, #5
    9c18:	ca000017 	bgt	9c7c <CGPIOPin::DisableInterrupt2()+0xa0>
    9c1c:	e30368a4 	movw	r6, #14500	; 0x38a4
    9c20:	e3406001 	movt	r6, #1
    9c24:	e5942008 	ldr	r2, [r4, #8]
    9c28:	e3a0504c 	mov	r5, #76	; 0x4c
    9c2c:	e5960000 	ldr	r0, [r6]
    9c30:	e3435f20 	movt	r5, #16160	; 0x3f20
    9c34:	e3a0700c 	mov	r7, #12
    9c38:	e0825005 	add	r5, r2, r5
    9c3c:	e3500000 	cmp	r0, #0
    9c40:	e0070397 	mul	r7, r7, r3
    9c44:	1a00000a 	bne	9c74 <CGPIOPin::DisableInterrupt2()+0x98>
    9c48:	e7953007 	ldr	r3, [r5, r7]
    9c4c:	e594200c 	ldr	r2, [r4, #12]
    9c50:	e1c33002 	bic	r3, r3, r2
    9c54:	e7853007 	str	r3, [r5, r7]
    9c58:	e5963000 	ldr	r3, [r6]
    9c5c:	e3530000 	cmp	r3, #0
    9c60:	0a000000 	beq	9c68 <CGPIOPin::DisableInterrupt2()+0x8c>
    9c64:	eb00023d 	bl	a560 <LeaveCritical>
    9c68:	e3a03006 	mov	r3, #6
    9c6c:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    9c70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9c74:	eb00020b 	bl	a4a8 <EnterCritical>
    9c78:	eafffff2 	b	9c48 <CGPIOPin::DisableInterrupt2()+0x6c>
    9c7c:	e30119fc 	movw	r1, #6652	; 0x19fc
    9c80:	e3010bc0 	movw	r0, #7104	; 0x1bc0
    9c84:	e3401001 	movt	r1, #1
    9c88:	e3400001 	movt	r0, #1
    9c8c:	e3a02f43 	mov	r2, #268	; 0x10c
    9c90:	eb000cf2 	bl	d060 <assertion_failed>
    9c94:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9c98:	eaffffdf 	b	9c1c <CGPIOPin::DisableInterrupt2()+0x40>

00009c9c <CGPIOPin::ReadAll()>:
    9c9c:	e3a03000 	mov	r3, #0
    9ca0:	e3433f20 	movt	r3, #16160	; 0x3f20
    9ca4:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    9ca8:	e12fff1e 	bx	lr

00009cac <CGPIOPin::SetPullUpMode(unsigned int)>:
    9cac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9cb0:	e30358a4 	movw	r5, #14500	; 0x38a4
    9cb4:	e3405001 	movt	r5, #1
    9cb8:	e1a07000 	mov	r7, r0
    9cbc:	e5973008 	ldr	r3, [r7, #8]
    9cc0:	e3a04098 	mov	r4, #152	; 0x98
    9cc4:	e5950000 	ldr	r0, [r5]
    9cc8:	e3434f20 	movt	r4, #16160	; 0x3f20
    9ccc:	e1a08001 	mov	r8, r1
    9cd0:	e0834004 	add	r4, r3, r4
    9cd4:	e3500000 	cmp	r0, #0
    9cd8:	1a000019 	bne	9d44 <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
    9cdc:	e3580002 	cmp	r8, #2
    9ce0:	8a000010 	bhi	9d28 <CGPIOPin::SetPullUpMode(unsigned int)+0x7c>
    9ce4:	e3a06000 	mov	r6, #0
    9ce8:	e3436f20 	movt	r6, #16160	; 0x3f20
    9cec:	e3a00005 	mov	r0, #5
    9cf0:	e5868094 	str	r8, [r6, #148]	; 0x94
    9cf4:	eb00050a 	bl	b124 <CTimer::SimpleusDelay(unsigned int)>
    9cf8:	e597300c 	ldr	r3, [r7, #12]
    9cfc:	e3a00005 	mov	r0, #5
    9d00:	e5843000 	str	r3, [r4]
    9d04:	eb000506 	bl	b124 <CTimer::SimpleusDelay(unsigned int)>
    9d08:	e3a03000 	mov	r3, #0
    9d0c:	e5863094 	str	r3, [r6, #148]	; 0x94
    9d10:	e5843000 	str	r3, [r4]
    9d14:	e5953000 	ldr	r3, [r5]
    9d18:	e3530000 	cmp	r3, #0
    9d1c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9d20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9d24:	ea00020d 	b	a560 <LeaveCritical>
    9d28:	e30119fc 	movw	r1, #6652	; 0x19fc
    9d2c:	e3010be4 	movw	r0, #7140	; 0x1be4
    9d30:	e3401001 	movt	r1, #1
    9d34:	e3400001 	movt	r0, #1
    9d38:	e3002125 	movw	r2, #293	; 0x125
    9d3c:	eb000cc7 	bl	d060 <assertion_failed>
    9d40:	eaffffe7 	b	9ce4 <CGPIOPin::SetPullUpMode(unsigned int)+0x38>
    9d44:	eb0001d7 	bl	a4a8 <EnterCritical>
    9d48:	eaffffe3 	b	9cdc <CGPIOPin::SetPullUpMode(unsigned int)+0x30>

00009d4c <CGPIOPin::SetAlternateFunction(unsigned int)>:
    9d4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9d50:	e1a06001 	mov	r6, r1
    9d54:	e5901004 	ldr	r1, [r0, #4]
    9d58:	e3510035 	cmp	r1, #53	; 0x35
    9d5c:	8a000026 	bhi	9dfc <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
    9d60:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    9d64:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    9d68:	e3a0000a 	mov	r0, #10
    9d6c:	e3560005 	cmp	r6, #5
    9d70:	e0832291 	umull	r2, r3, r1, r2
    9d74:	e1a041a3 	lsr	r4, r3, #3
    9d78:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9d7c:	e0641490 	mls	r4, r0, r4, r1
    9d80:	e2833702 	add	r3, r3, #524288	; 0x80000
    9d84:	e1a07103 	lsl	r7, r3, #2
    9d88:	e0844084 	add	r4, r4, r4, lsl #1
    9d8c:	8a000013 	bhi	9de0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
    9d90:	e30358a4 	movw	r5, #14500	; 0x38a4
    9d94:	e3405001 	movt	r5, #1
    9d98:	e5950000 	ldr	r0, [r5]
    9d9c:	e3500000 	cmp	r0, #0
    9da0:	1a00000c 	bne	9dd8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    9da4:	e30129d4 	movw	r2, #6612	; 0x19d4
    9da8:	e3402001 	movt	r2, #1
    9dac:	e5973000 	ldr	r3, [r7]
    9db0:	e3a01007 	mov	r1, #7
    9db4:	e7922106 	ldr	r2, [r2, r6, lsl #2]
    9db8:	e1c33411 	bic	r3, r3, r1, lsl r4
    9dbc:	e1834412 	orr	r4, r3, r2, lsl r4
    9dc0:	e5874000 	str	r4, [r7]
    9dc4:	e5953000 	ldr	r3, [r5]
    9dc8:	e3530000 	cmp	r3, #0
    9dcc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9dd0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9dd4:	ea0001e1 	b	a560 <LeaveCritical>
    9dd8:	eb0001b2 	bl	a4a8 <EnterCritical>
    9ddc:	eafffff0 	b	9da4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    9de0:	e30119fc 	movw	r1, #6652	; 0x19fc
    9de4:	e3010c04 	movw	r0, #7172	; 0x1c04
    9de8:	e3401001 	movt	r1, #1
    9dec:	e3400001 	movt	r0, #1
    9df0:	e3002136 	movw	r2, #310	; 0x136
    9df4:	eb000c99 	bl	d060 <assertion_failed>
    9df8:	eaffffe4 	b	9d90 <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
    9dfc:	e1a04000 	mov	r4, r0
    9e00:	e30119fc 	movw	r1, #6652	; 0x19fc
    9e04:	e3010bf0 	movw	r0, #7152	; 0x1bf0
    9e08:	e3401001 	movt	r1, #1
    9e0c:	e3400001 	movt	r0, #1
    9e10:	e3002132 	movw	r2, #306	; 0x132
    9e14:	eb000c91 	bl	d060 <assertion_failed>
    9e18:	e5941004 	ldr	r1, [r4, #4]
    9e1c:	eaffffcf 	b	9d60 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

00009e20 <CGPIOPin::SetMode(TGPIOMode, int)>:
    9e20:	e3510009 	cmp	r1, #9
    9e24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9e28:	e1a04001 	mov	r4, r1
    9e2c:	e1a05000 	mov	r5, r0
    9e30:	e1a06002 	mov	r6, r2
    9e34:	e1a07001 	mov	r7, r1
    9e38:	ca000037 	bgt	9f1c <CGPIOPin::SetMode(TGPIOMode, int)+0xfc>
    9e3c:	e2443004 	sub	r3, r4, #4
    9e40:	e5c54010 	strb	r4, [r5, #16]
    9e44:	e3530005 	cmp	r3, #5
    9e48:	9a00002d 	bls	9f04 <CGPIOPin::SetMode(TGPIOMode, int)+0xe4>
    9e4c:	e2963000 	adds	r3, r6, #0
    9e50:	13a03001 	movne	r3, #1
    9e54:	e3540001 	cmp	r4, #1
    9e58:	13a03000 	movne	r3, #0
    9e5c:	e3530000 	cmp	r3, #0
    9e60:	1a00005b 	bne	9fd4 <CGPIOPin::SetMode(TGPIOMode, int)+0x1b4>
    9e64:	e5951004 	ldr	r1, [r5, #4]
    9e68:	e3510035 	cmp	r1, #53	; 0x35
    9e6c:	8a00003a 	bhi	9f5c <CGPIOPin::SetMode(TGPIOMode, int)+0x13c>
    9e70:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    9e74:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    9e78:	e3a0c00a 	mov	ip, #10
    9e7c:	e30378a4 	movw	r7, #14500	; 0x38a4
    9e80:	e0832291 	umull	r2, r3, r1, r2
    9e84:	e3407001 	movt	r7, #1
    9e88:	e5970000 	ldr	r0, [r7]
    9e8c:	e3500000 	cmp	r0, #0
    9e90:	e1a041a3 	lsr	r4, r3, #3
    9e94:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9e98:	e064149c 	mls	r4, ip, r4, r1
    9e9c:	e2833702 	add	r3, r3, #524288	; 0x80000
    9ea0:	e1a08103 	lsl	r8, r3, #2
    9ea4:	e0844084 	add	r4, r4, r4, lsl #1
    9ea8:	1a000033 	bne	9f7c <CGPIOPin::SetMode(TGPIOMode, int)+0x15c>
    9eac:	e5d52010 	ldrb	r2, [r5, #16]
    9eb0:	e3a01007 	mov	r1, #7
    9eb4:	e5983000 	ldr	r3, [r8]
    9eb8:	e2422001 	sub	r2, r2, #1
    9ebc:	e16f2f12 	clz	r2, r2
    9ec0:	e1c33411 	bic	r3, r3, r1, lsl r4
    9ec4:	e1a022a2 	lsr	r2, r2, #5
    9ec8:	e1834412 	orr	r4, r3, r2, lsl r4
    9ecc:	e5884000 	str	r4, [r8]
    9ed0:	e5973000 	ldr	r3, [r7]
    9ed4:	e3530000 	cmp	r3, #0
    9ed8:	1a000029 	bne	9f84 <CGPIOPin::SetMode(TGPIOMode, int)+0x164>
    9edc:	e3560000 	cmp	r6, #0
    9ee0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9ee4:	e5d53010 	ldrb	r3, [r5, #16]
    9ee8:	e3530003 	cmp	r3, #3
    9eec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9ef0:	ea000010 	b	9f38 <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
    9ef4:	00009fc4 	.word	0x00009fc4
    9ef8:	00009fb4 	.word	0x00009fb4
    9efc:	00009fa4 	.word	0x00009fa4
    9f00:	00009f94 	.word	0x00009f94
    9f04:	e3560000 	cmp	r6, #0
    9f08:	1a00000b 	bne	9f3c <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
    9f0c:	e2471004 	sub	r1, r7, #4
    9f10:	e1a00005 	mov	r0, r5
    9f14:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9f18:	eaffff8b 	b	9d4c <CGPIOPin::SetAlternateFunction(unsigned int)>
    9f1c:	e30119fc 	movw	r1, #6652	; 0x19fc
    9f20:	e3010c14 	movw	r0, #7188	; 0x1c14
    9f24:	e3401001 	movt	r1, #1
    9f28:	e3400001 	movt	r0, #1
    9f2c:	e3a0203d 	mov	r2, #61	; 0x3d
    9f30:	eb000c4a 	bl	d060 <assertion_failed>
    9f34:	eaffffc0 	b	9e3c <CGPIOPin::SetMode(TGPIOMode, int)+0x1c>
    9f38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9f3c:	e1a00005 	mov	r0, r5
    9f40:	e3a01000 	mov	r1, #0
    9f44:	ebffff58 	bl	9cac <CGPIOPin::SetPullUpMode(unsigned int)>
    9f48:	e5d57010 	ldrb	r7, [r5, #16]
    9f4c:	e1a00005 	mov	r0, r5
    9f50:	e2471004 	sub	r1, r7, #4
    9f54:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9f58:	eaffff7b 	b	9d4c <CGPIOPin::SetAlternateFunction(unsigned int)>
    9f5c:	e30119fc 	movw	r1, #6652	; 0x19fc
    9f60:	e3010bf0 	movw	r0, #7152	; 0x1bf0
    9f64:	e3401001 	movt	r1, #1
    9f68:	e3400001 	movt	r0, #1
    9f6c:	e3a02056 	mov	r2, #86	; 0x56
    9f70:	eb000c3a 	bl	d060 <assertion_failed>
    9f74:	e5951004 	ldr	r1, [r5, #4]
    9f78:	eaffffbc 	b	9e70 <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
    9f7c:	eb000149 	bl	a4a8 <EnterCritical>
    9f80:	eaffffc9 	b	9eac <CGPIOPin::SetMode(TGPIOMode, int)+0x8c>
    9f84:	eb000175 	bl	a560 <LeaveCritical>
    9f88:	e3560000 	cmp	r6, #0
    9f8c:	1affffd4 	bne	9ee4 <CGPIOPin::SetMode(TGPIOMode, int)+0xc4>
    9f90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9f94:	e1a00005 	mov	r0, r5
    9f98:	e3a01001 	mov	r1, #1
    9f9c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9fa0:	eaffff41 	b	9cac <CGPIOPin::SetPullUpMode(unsigned int)>
    9fa4:	e1a00005 	mov	r0, r5
    9fa8:	e3a01002 	mov	r1, #2
    9fac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9fb0:	eaffff3d 	b	9cac <CGPIOPin::SetPullUpMode(unsigned int)>
    9fb4:	e1a00005 	mov	r0, r5
    9fb8:	e3a01000 	mov	r1, #0
    9fbc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9fc0:	eafffd71 	b	958c <CGPIOPin::Write(unsigned int)>
    9fc4:	e1a00005 	mov	r0, r5
    9fc8:	e3a01000 	mov	r1, #0
    9fcc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9fd0:	eaffff35 	b	9cac <CGPIOPin::SetPullUpMode(unsigned int)>
    9fd4:	e3a01000 	mov	r1, #0
    9fd8:	e1a00005 	mov	r0, r5
    9fdc:	ebffff32 	bl	9cac <CGPIOPin::SetPullUpMode(unsigned int)>
    9fe0:	eaffff9f 	b	9e64 <CGPIOPin::SetMode(TGPIOMode, int)+0x44>

00009fe4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    9fe4:	e59fc0a8 	ldr	ip, [pc, #168]	; a094 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xb0>
    9fe8:	e3510035 	cmp	r1, #53	; 0x35
    9fec:	e92d4070 	push	{r4, r5, r6, lr}
    9ff0:	e1a06002 	mov	r6, r2
    9ff4:	e5803018 	str	r3, [r0, #24]
    9ff8:	e3a02000 	mov	r2, #0
    9ffc:	e3a0300a 	mov	r3, #10
    a000:	e1a05001 	mov	r5, r1
    a004:	e5c03010 	strb	r3, [r0, #16]
    a008:	e1a04000 	mov	r4, r0
    a00c:	e3a03006 	mov	r3, #6
    a010:	e5801004 	str	r1, [r0, #4]
    a014:	e580c000 	str	ip, [r0]
    a018:	e580201c 	str	r2, [r0, #28]
    a01c:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    a020:	e5c03025 	strb	r3, [r0, #37]	; 0x25
    a024:	8a00000b 	bhi	a058 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
    a028:	e1a032a5 	lsr	r3, r5, #5
    a02c:	e3a02001 	mov	r2, #1
    a030:	e205501f 	and	r5, r5, #31
    a034:	e1a00004 	mov	r0, r4
    a038:	e1a03103 	lsl	r3, r3, #2
    a03c:	e1a05512 	lsl	r5, r2, r5
    a040:	e1a01006 	mov	r1, r6
    a044:	e5843008 	str	r3, [r4, #8]
    a048:	e584500c 	str	r5, [r4, #12]
    a04c:	ebffff73 	bl	9e20 <CGPIOPin::SetMode(TGPIOMode, int)>
    a050:	e1a00004 	mov	r0, r4
    a054:	e8bd8070 	pop	{r4, r5, r6, pc}
    a058:	eb0018fc 	bl	10450 <CMachineInfo::Get()>
    a05c:	e6ef1075 	uxtb	r1, r5
    a060:	eb0018cf 	bl	103a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    a064:	e3500035 	cmp	r0, #53	; 0x35
    a068:	e1a05000 	mov	r5, r0
    a06c:	e5840004 	str	r0, [r4, #4]
    a070:	9affffec 	bls	a028 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    a074:	e30119fc 	movw	r1, #6652	; 0x19fc
    a078:	e3010bf0 	movw	r0, #7152	; 0x1bf0
    a07c:	e3401001 	movt	r1, #1
    a080:	e3400001 	movt	r0, #1
    a084:	e3a0202b 	mov	r2, #43	; 0x2b
    a088:	eb000bf4 	bl	d060 <assertion_failed>
    a08c:	e5945004 	ldr	r5, [r4, #4]
    a090:	eaffffe4 	b	a028 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    a094:	000119f4 	.word	0x000119f4

0000a098 <CGPIOPin::InterruptHandler()>:
    a098:	e5d03010 	ldrb	r3, [r0, #16]
    a09c:	e92d4010 	push	{r4, lr}
    a0a0:	e2432002 	sub	r2, r3, #2
    a0a4:	e3530000 	cmp	r3, #0
    a0a8:	13520001 	cmpne	r2, #1
    a0ac:	e1a04000 	mov	r4, r0
    a0b0:	9a000005 	bls	a0cc <CGPIOPin::InterruptHandler()+0x34>
    a0b4:	e30119fc 	movw	r1, #6652	; 0x19fc
    a0b8:	e3010a4c 	movw	r0, #6732	; 0x1a4c
    a0bc:	e3401001 	movt	r1, #1
    a0c0:	e3400001 	movt	r0, #1
    a0c4:	e3002145 	movw	r2, #325	; 0x145
    a0c8:	eb000be4 	bl	d060 <assertion_failed>
    a0cc:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    a0d0:	e3530005 	cmp	r3, #5
    a0d4:	da000002 	ble	a0e4 <CGPIOPin::InterruptHandler()+0x4c>
    a0d8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    a0dc:	e3530005 	cmp	r3, #5
    a0e0:	ca000005 	bgt	a0fc <CGPIOPin::InterruptHandler()+0x64>
    a0e4:	e594301c 	ldr	r3, [r4, #28]
    a0e8:	e3530000 	cmp	r3, #0
    a0ec:	0a00000b 	beq	a120 <CGPIOPin::InterruptHandler()+0x88>
    a0f0:	e5940020 	ldr	r0, [r4, #32]
    a0f4:	e8bd4010 	pop	{r4, lr}
    a0f8:	e12fff13 	bx	r3
    a0fc:	e30119fc 	movw	r1, #6652	; 0x19fc
    a100:	e3010c2c 	movw	r0, #7212	; 0x1c2c
    a104:	e3401001 	movt	r1, #1
    a108:	e3400001 	movt	r0, #1
    a10c:	e3002147 	movw	r2, #327	; 0x147
    a110:	eb000bd2 	bl	d060 <assertion_failed>
    a114:	e594301c 	ldr	r3, [r4, #28]
    a118:	e3530000 	cmp	r3, #0
    a11c:	1afffff3 	bne	a0f0 <CGPIOPin::InterruptHandler()+0x58>
    a120:	e30119fc 	movw	r1, #6652	; 0x19fc
    a124:	e3010b30 	movw	r0, #6960	; 0x1b30
    a128:	e3401001 	movt	r1, #1
    a12c:	e3400001 	movt	r0, #1
    a130:	e3002149 	movw	r2, #329	; 0x149
    a134:	eb000bc9 	bl	d060 <assertion_failed>
    a138:	e594301c 	ldr	r3, [r4, #28]
    a13c:	e5940020 	ldr	r0, [r4, #32]
    a140:	e8bd4010 	pop	{r4, lr}
    a144:	e12fff13 	bx	r3

0000a148 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    a148:	e3500035 	cmp	r0, #53	; 0x35
    a14c:	e92d4070 	push	{r4, r5, r6, lr}
    a150:	e1a05000 	mov	r5, r0
    a154:	8a000023 	bhi	a1e8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    a158:	e30368a4 	movw	r6, #14500	; 0x38a4
    a15c:	e3406001 	movt	r6, #1
    a160:	e3a04013 	mov	r4, #19
    a164:	e3404fc8 	movt	r4, #4040	; 0xfc8
    a168:	e5960000 	ldr	r0, [r6]
    a16c:	e08442a5 	add	r4, r4, r5, lsr #5
    a170:	e3a02001 	mov	r2, #1
    a174:	e205501f 	and	r5, r5, #31
    a178:	e3500000 	cmp	r0, #0
    a17c:	e1a04104 	lsl	r4, r4, #2
    a180:	e1a05512 	lsl	r5, r2, r5
    a184:	1a000011 	bne	a1d0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    a188:	e3a0308b 	mov	r3, #139	; 0x8b
    a18c:	e3433f20 	movt	r3, #16160	; 0x3f20
    a190:	e1540003 	cmp	r4, r3
    a194:	8a00000c 	bhi	a1cc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
    a198:	e3a0108b 	mov	r1, #139	; 0x8b
    a19c:	e3431f20 	movt	r1, #16160	; 0x3f20
    a1a0:	e1e02005 	mvn	r2, r5
    a1a4:	e5943000 	ldr	r3, [r4]
    a1a8:	e0033002 	and	r3, r3, r2
    a1ac:	e484300c 	str	r3, [r4], #12
    a1b0:	e1540001 	cmp	r4, r1
    a1b4:	9afffffa 	bls	a1a4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x5c>
    a1b8:	e5963000 	ldr	r3, [r6]
    a1bc:	e3530000 	cmp	r3, #0
    a1c0:	08bd8070 	popeq	{r4, r5, r6, pc}
    a1c4:	e8bd4070 	pop	{r4, r5, r6, lr}
    a1c8:	ea0000e4 	b	a560 <LeaveCritical>
    a1cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    a1d0:	eb0000b4 	bl	a4a8 <EnterCritical>
    a1d4:	e3a0308b 	mov	r3, #139	; 0x8b
    a1d8:	e3433f20 	movt	r3, #16160	; 0x3f20
    a1dc:	e1540003 	cmp	r4, r3
    a1e0:	9affffec 	bls	a198 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    a1e4:	eafffff3 	b	a1b8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    a1e8:	e30119fc 	movw	r1, #6652	; 0x19fc
    a1ec:	e3010c78 	movw	r0, #7288	; 0x1c78
    a1f0:	e3401001 	movt	r1, #1
    a1f4:	e3400001 	movt	r0, #1
    a1f8:	e300214f 	movw	r2, #335	; 0x14f
    a1fc:	eb000b97 	bl	d060 <assertion_failed>
    a200:	eaffffd4 	b	a158 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

0000a204 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    a204:	e30338a4 	movw	r3, #14500	; 0x38a4
    a208:	e3403001 	movt	r3, #1
    a20c:	e3a02001 	mov	r2, #1
    a210:	e5832000 	str	r2, [r3]
    a214:	e12fff1e 	bx	lr

0000a218 <CMemorySystem::~CMemorySystem()>:
    a218:	e5903000 	ldr	r3, [r0]
    a21c:	e92d4070 	push	{r4, r5, r6, lr}
    a220:	e3530000 	cmp	r3, #0
    a224:	e1a04000 	mov	r4, r0
    a228:	0a000005 	beq	a244 <CMemorySystem::~CMemorySystem()+0x2c>
    a22c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    a230:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    a234:	e3c33005 	bic	r3, r3, #5
    a238:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    a23c:	e3a03000 	mov	r3, #0
    a240:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    a244:	e594500c 	ldr	r5, [r4, #12]
    a248:	e3550000 	cmp	r5, #0
    a24c:	0a000004 	beq	a264 <CMemorySystem::~CMemorySystem()+0x4c>
    a250:	e1a00005 	mov	r0, r5
    a254:	eb0006e9 	bl	be00 <CPageTable::~CPageTable()>
    a258:	e1a00005 	mov	r0, r5
    a25c:	e3a01008 	mov	r1, #8
    a260:	eb00008e 	bl	a4a0 <operator delete(void*, unsigned int)>
    a264:	e5945008 	ldr	r5, [r4, #8]
    a268:	e3a03000 	mov	r3, #0
    a26c:	e584300c 	str	r3, [r4, #12]
    a270:	e1550003 	cmp	r5, r3
    a274:	0a000004 	beq	a28c <CMemorySystem::~CMemorySystem()+0x74>
    a278:	e1a00005 	mov	r0, r5
    a27c:	eb0006df 	bl	be00 <CPageTable::~CPageTable()>
    a280:	e1a00005 	mov	r0, r5
    a284:	e3a01008 	mov	r1, #8
    a288:	eb000084 	bl	a4a0 <operator delete(void*, unsigned int)>
    a28c:	e1a00004 	mov	r0, r4
    a290:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a294 <CMemorySystem::GetMemSize() const>:
    a294:	e5900004 	ldr	r0, [r0, #4]
    a298:	e12fff1e 	bx	lr

0000a29c <CMemorySystem::EnableMMU()>:
    a29c:	e5903000 	ldr	r3, [r0]
    a2a0:	e92d4010 	push	{r4, lr}
    a2a4:	e3530000 	cmp	r3, #0
    a2a8:	e1a04000 	mov	r4, r0
    a2ac:	0a00001f 	beq	a330 <CMemorySystem::EnableMMU()+0x94>
    a2b0:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    a2b4:	e3833040 	orr	r3, r3, #64	; 0x40
    a2b8:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    a2bc:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    a2c0:	e3130001 	tst	r3, #1
    a2c4:	1a000020 	bne	a34c <CMemorySystem::EnableMMU()+0xb0>
    a2c8:	e3a03002 	mov	r3, #2
    a2cc:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    a2d0:	e5940008 	ldr	r0, [r4, #8]
    a2d4:	e3500000 	cmp	r0, #0
    a2d8:	0a00002a 	beq	a388 <CMemorySystem::EnableMMU()+0xec>
    a2dc:	eb0006d0 	bl	be24 <CPageTable::GetBaseAddress() const>
    a2e0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    a2e4:	e594000c 	ldr	r0, [r4, #12]
    a2e8:	e3500000 	cmp	r0, #0
    a2ec:	0a00001d 	beq	a368 <CMemorySystem::EnableMMU()+0xcc>
    a2f0:	eb0006cb 	bl	be24 <CPageTable::GetBaseAddress() const>
    a2f4:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    a2f8:	e3a03005 	mov	r3, #5
    a2fc:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    a300:	eb00187b 	bl	104f4 <InvalidateDataCache>
    a304:	e3a03000 	mov	r3, #0
    a308:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    a30c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    a310:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    a314:	f57ff04f 	dsb	sy
    a318:	f57ff06f 	isb	sy
    a31c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    a320:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    a324:	e3833005 	orr	r3, r3, #5
    a328:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    a32c:	e8bd8010 	pop	{r4, pc}
    a330:	e3011c8c 	movw	r1, #7308	; 0x1c8c
    a334:	e3010c98 	movw	r0, #7320	; 0x1c98
    a338:	e3401001 	movt	r1, #1
    a33c:	e3400001 	movt	r0, #1
    a340:	e3a020c0 	mov	r2, #192	; 0xc0
    a344:	eb000b45 	bl	d060 <assertion_failed>
    a348:	eaffffd8 	b	a2b0 <CMemorySystem::EnableMMU()+0x14>
    a34c:	e3011c8c 	movw	r1, #7308	; 0x1c8c
    a350:	e3010ca8 	movw	r0, #7336	; 0x1ca8
    a354:	e3401001 	movt	r1, #1
    a358:	e3400001 	movt	r0, #1
    a35c:	e3a020cd 	mov	r2, #205	; 0xcd
    a360:	eb000b3e 	bl	d060 <assertion_failed>
    a364:	eaffffd7 	b	a2c8 <CMemorySystem::EnableMMU()+0x2c>
    a368:	e3011c8c 	movw	r1, #7308	; 0x1c8c
    a36c:	e3010cf0 	movw	r0, #7408	; 0x1cf0
    a370:	e3401001 	movt	r1, #1
    a374:	e3400001 	movt	r0, #1
    a378:	e3a020d7 	mov	r2, #215	; 0xd7
    a37c:	eb000b37 	bl	d060 <assertion_failed>
    a380:	e594000c 	ldr	r0, [r4, #12]
    a384:	eaffffd9 	b	a2f0 <CMemorySystem::EnableMMU()+0x54>
    a388:	e3011c8c 	movw	r1, #7308	; 0x1c8c
    a38c:	e3010cd4 	movw	r0, #7380	; 0x1cd4
    a390:	e3401001 	movt	r1, #1
    a394:	e3400001 	movt	r0, #1
    a398:	e3a020d3 	mov	r2, #211	; 0xd3
    a39c:	eb000b2f 	bl	d060 <assertion_failed>
    a3a0:	e5940008 	ldr	r0, [r4, #8]
    a3a4:	eaffffcc 	b	a2dc <CMemorySystem::EnableMMU()+0x40>

0000a3a8 <CMemorySystem::CMemorySystem(int)>:
    a3a8:	e92d4030 	push	{r4, r5, lr}
    a3ac:	e1a04000 	mov	r4, r0
    a3b0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a3b4:	e5801000 	str	r1, [r0]
    a3b8:	e3a05000 	mov	r5, #0
    a3bc:	e28d000c 	add	r0, sp, #12
    a3c0:	e5845004 	str	r5, [r4, #4]
    a3c4:	e5845008 	str	r5, [r4, #8]
    a3c8:	e584500c 	str	r5, [r4, #12]
    a3cc:	ebfffbf3 	bl	93a0 <CBcmPropertyTags::CBcmPropertyTags()>
    a3d0:	e3a03014 	mov	r3, #20
    a3d4:	e58d5000 	str	r5, [sp]
    a3d8:	e28d000c 	add	r0, sp, #12
    a3dc:	e3a01005 	mov	r1, #5
    a3e0:	e08d2003 	add	r2, sp, r3
    a3e4:	e3401001 	movt	r1, #1
    a3e8:	ebfffc34 	bl	94c0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a3ec:	e3500000 	cmp	r0, #0
    a3f0:	1a000019 	bne	a45c <CMemorySystem::CMemorySystem(int)+0xb4>
    a3f4:	e3a01303 	mov	r1, #201326592	; 0xc000000
    a3f8:	e58d0020 	str	r0, [sp, #32]
    a3fc:	e58d1024 	str	r1, [sp, #36]	; 0x24
    a400:	e5841004 	str	r1, [r4, #4]
    a404:	eb0019df 	bl	10b88 <mem_init>
    a408:	e5943000 	ldr	r3, [r4]
    a40c:	e3530000 	cmp	r3, #0
    a410:	0a00000c 	beq	a448 <CMemorySystem::CMemorySystem(int)+0xa0>
    a414:	e3a00008 	mov	r0, #8
    a418:	eb00001c 	bl	a490 <operator new(unsigned int)>
    a41c:	e5941004 	ldr	r1, [r4, #4]
    a420:	e1a05000 	mov	r5, r0
    a424:	eb000625 	bl	bcc0 <CPageTable::CPageTable(unsigned int)>
    a428:	e5845008 	str	r5, [r4, #8]
    a42c:	e3a00008 	mov	r0, #8
    a430:	eb000016 	bl	a490 <operator new(unsigned int)>
    a434:	e1a05000 	mov	r5, r0
    a438:	eb0005f4 	bl	bc10 <CPageTable::CPageTable()>
    a43c:	e584500c 	str	r5, [r4, #12]
    a440:	e1a00004 	mov	r0, r4
    a444:	ebffff94 	bl	a29c <CMemorySystem::EnableMMU()>
    a448:	e28d000c 	add	r0, sp, #12
    a44c:	ebfffbd9 	bl	93b8 <CBcmPropertyTags::~CBcmPropertyTags()>
    a450:	e1a00004 	mov	r0, r4
    a454:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a458:	e8bd8030 	pop	{r4, r5, pc}
    a45c:	e59d0020 	ldr	r0, [sp, #32]
    a460:	e3500000 	cmp	r0, #0
    a464:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
    a468:	0affffe4 	beq	a400 <CMemorySystem::CMemorySystem(int)+0x58>
    a46c:	e3011c8c 	movw	r1, #7308	; 0x1c8c
    a470:	e3010d04 	movw	r0, #7428	; 0x1d04
    a474:	e3401001 	movt	r1, #1
    a478:	e3400001 	movt	r0, #1
    a47c:	e3a02042 	mov	r2, #66	; 0x42
    a480:	eb000af6 	bl	d060 <assertion_failed>
    a484:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    a488:	e59d0020 	ldr	r0, [sp, #32]
    a48c:	eaffffdb 	b	a400 <CMemorySystem::CMemorySystem(int)+0x58>

0000a490 <operator new(unsigned int)>:
    a490:	ea0019d4 	b	10be8 <malloc>

0000a494 <operator new[](unsigned int)>:
    a494:	ea0019d3 	b	10be8 <malloc>

0000a498 <operator delete(void*)>:
    a498:	ea001a34 	b	10d70 <free>

0000a49c <operator delete[](void*)>:
    a49c:	ea001a33 	b	10d70 <free>

0000a4a0 <operator delete(void*, unsigned int)>:
    a4a0:	ea001a32 	b	10d70 <free>

0000a4a4 <operator delete[](void*, unsigned int)>:
    a4a4:	ea001a31 	b	10d70 <free>

0000a4a8 <EnterCritical>:
    a4a8:	e2403001 	sub	r3, r0, #1
    a4ac:	e3530001 	cmp	r3, #1
    a4b0:	e92d4070 	push	{r4, r5, r6, lr}
    a4b4:	e1a04000 	mov	r4, r0
    a4b8:	9a000005 	bls	a4d4 <EnterCritical+0x2c>
    a4bc:	e3011d20 	movw	r1, #7456	; 0x1d20
    a4c0:	e3010d30 	movw	r0, #7472	; 0x1d30
    a4c4:	e3401001 	movt	r1, #1
    a4c8:	e3400001 	movt	r0, #1
    a4cc:	e3a0204f 	mov	r2, #79	; 0x4f
    a4d0:	eb000ae2 	bl	d060 <assertion_failed>
    a4d4:	e10f5000 	mrs	r5, CPSR
    a4d8:	e3540002 	cmp	r4, #2
    a4dc:	0a000001 	beq	a4e8 <EnterCritical+0x40>
    a4e0:	e3150040 	tst	r5, #64	; 0x40
    a4e4:	1a000016 	bne	a544 <EnterCritical+0x9c>
    a4e8:	f10c0080 	cpsid	i
    a4ec:	e3540002 	cmp	r4, #2
    a4f0:	0a000011 	beq	a53c <EnterCritical+0x94>
    a4f4:	e30348a8 	movw	r4, #14504	; 0x38a8
    a4f8:	e3404001 	movt	r4, #1
    a4fc:	e5943000 	ldr	r3, [r4]
    a500:	e3530013 	cmp	r3, #19
    a504:	9a000005 	bls	a520 <EnterCritical+0x78>
    a508:	e3011d20 	movw	r1, #7456	; 0x1d20
    a50c:	e3010d98 	movw	r0, #7576	; 0x1d98
    a510:	e3401001 	movt	r1, #1
    a514:	e3400001 	movt	r0, #1
    a518:	e3a0205d 	mov	r2, #93	; 0x5d
    a51c:	eb000acf 	bl	d060 <assertion_failed>
    a520:	e5943000 	ldr	r3, [r4]
    a524:	e2832001 	add	r2, r3, #1
    a528:	e5842000 	str	r2, [r4]
    a52c:	e0844103 	add	r4, r4, r3, lsl #2
    a530:	e5845004 	str	r5, [r4, #4]
    a534:	f57ff05f 	dmb	sy
    a538:	e8bd8070 	pop	{r4, r5, r6, pc}
    a53c:	f10c0040 	cpsid	f
    a540:	eaffffeb 	b	a4f4 <EnterCritical+0x4c>
    a544:	e3011d20 	movw	r1, #7456	; 0x1d20
    a548:	e3010d68 	movw	r0, #7528	; 0x1d68
    a54c:	e3401001 	movt	r1, #1
    a550:	e3400001 	movt	r0, #1
    a554:	e3a02055 	mov	r2, #85	; 0x55
    a558:	eb000ac0 	bl	d060 <assertion_failed>
    a55c:	eaffffe1 	b	a4e8 <EnterCritical+0x40>

0000a560 <LeaveCritical>:
    a560:	e92d4010 	push	{r4, lr}
    a564:	f57ff05f 	dmb	sy
    a568:	e30348a8 	movw	r4, #14504	; 0x38a8
    a56c:	e3404001 	movt	r4, #1
    a570:	e5943000 	ldr	r3, [r4]
    a574:	e3530000 	cmp	r3, #0
    a578:	1a000005 	bne	a594 <LeaveCritical+0x34>
    a57c:	e3011d20 	movw	r1, #7456	; 0x1d20
    a580:	e3010dc0 	movw	r0, #7616	; 0x1dc0
    a584:	e3401001 	movt	r1, #1
    a588:	e3400001 	movt	r0, #1
    a58c:	e3a02067 	mov	r2, #103	; 0x67
    a590:	eb000ab2 	bl	d060 <assertion_failed>
    a594:	e5943000 	ldr	r3, [r4]
    a598:	e2433001 	sub	r3, r3, #1
    a59c:	e5843000 	str	r3, [r4]
    a5a0:	e0844103 	add	r4, r4, r3, lsl #2
    a5a4:	e5943004 	ldr	r3, [r4, #4]
    a5a8:	e121f003 	msr	CPSR_c, r3
    a5ac:	e8bd8010 	pop	{r4, pc}

0000a5b0 <SyncDataAndInstructionCache>:
    a5b0:	e92d4010 	push	{r4, lr}
    a5b4:	eb0017f8 	bl	1059c <CleanDataCache>
    a5b8:	e3a03000 	mov	r3, #0
    a5bc:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    a5c0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    a5c4:	f57ff04f 	dsb	sy
    a5c8:	f57ff06f 	isb	sy
    a5cc:	e8bd8010 	pop	{r4, pc}

0000a5d0 <__aeabi_atexit>:
    a5d0:	e12fff1e 	bx	lr

0000a5d4 <halt>:
    a5d4:	f10c0080 	cpsid	i
    a5d8:	f10c0040 	cpsid	f
    a5dc:	f57ff04f 	dsb	sy
    a5e0:	e320f003 	wfi
    a5e4:	eafffffc 	b	a5dc <halt+0x8>

0000a5e8 <reboot>:
    a5e8:	e3a03000 	mov	r3, #0
    a5ec:	e3433f10 	movt	r3, #16144	; 0x3f10
    a5f0:	e3a01001 	mov	r1, #1
    a5f4:	e3a02020 	mov	r2, #32
    a5f8:	e3451a00 	movt	r1, #23040	; 0x5a00
    a5fc:	e3452a00 	movt	r2, #23040	; 0x5a00
    a600:	e5831024 	str	r1, [r3, #36]	; 0x24
    a604:	e583201c 	str	r2, [r3, #28]
    a608:	eafffffe 	b	a608 <reboot+0x20>

0000a60c <sysinit>:
    a60c:	e92d4030 	push	{r4, r5, lr}
    a610:	e24dd01c 	sub	sp, sp, #28
    a614:	f1080040 	cpsie	f
    a618:	eb00179a 	bl	10488 <InvalidateDataCacheL1Only>
    a61c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    a620:	e3083064 	movw	r3, #32868	; 0x8064
    a624:	e3403000 	movt	r3, #0
    a628:	e582309c 	str	r3, [r2, #156]	; 0x9c
    a62c:	e58230ac 	str	r3, [r2, #172]	; 0xac
    a630:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    a634:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    a638:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    a63c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    a640:	f57ff06f 	isb	sy
    a644:	eee82a10 	vmsr	fpexc, r2
    a648:	e3a01000 	mov	r1, #0
    a64c:	eee11a10 	vmsr	fpscr, r1
    a650:	e303389c 	movw	r3, #14492	; 0x389c
    a654:	e3032940 	movw	r2, #14656	; 0x3940
    a658:	e3403001 	movt	r3, #1
    a65c:	e3402001 	movt	r2, #1
    a660:	e1530002 	cmp	r3, r2
    a664:	2a000002 	bcs	a674 <sysinit+0x68>
    a668:	e4c31001 	strb	r1, [r3], #1
    a66c:	e1530002 	cmp	r3, r2
    a670:	1afffffc 	bne	a668 <sysinit+0x5c>
    a674:	e1a0000d 	mov	r0, sp
    a678:	e30357ac 	movw	r5, #14252	; 0x37ac
    a67c:	e30347a0 	movw	r4, #14240	; 0x37a0
    a680:	e3405001 	movt	r5, #1
    a684:	e3404001 	movt	r4, #1
    a688:	eb001681 	bl	10094 <CMachineInfo::CMachineInfo()>
    a68c:	e1540005 	cmp	r4, r5
    a690:	2a000003 	bcs	a6a4 <sysinit+0x98>
    a694:	e4943004 	ldr	r3, [r4], #4
    a698:	e12fff33 	blx	r3
    a69c:	e1540005 	cmp	r4, r5
    a6a0:	3afffffb 	bcc	a694 <sysinit+0x88>
    a6a4:	ebfff671 	bl	8070 <main>
    a6a8:	e3500001 	cmp	r0, #1
    a6ac:	0a000000 	beq	a6b4 <sysinit+0xa8>
    a6b0:	ebffffc7 	bl	a5d4 <halt>
    a6b4:	ebffffcb 	bl	a5e8 <reboot>

0000a6b8 <CTimer::CTimer(CInterruptSystem*)>:
    a6b8:	e92d4070 	push	{r4, r5, r6, lr}
    a6bc:	e1a04000 	mov	r4, r0
    a6c0:	e3035900 	movw	r5, #14592	; 0x3900
    a6c4:	e3405001 	movt	r5, #1
    a6c8:	e5801000 	str	r1, [r0]
    a6cc:	e3a03000 	mov	r3, #0
    a6d0:	e3a06001 	mov	r6, #1
    a6d4:	e5803004 	str	r3, [r0, #4]
    a6d8:	e5843008 	str	r3, [r4, #8]
    a6dc:	e2800018 	add	r0, r0, #24
    a6e0:	e5843014 	str	r3, [r4, #20]
    a6e4:	e584300c 	str	r3, [r4, #12]
    a6e8:	e5846010 	str	r6, [r4, #16]
    a6ec:	eb0017e2 	bl	1067c <CPtrList::CPtrList()>
    a6f0:	e5952000 	ldr	r2, [r5]
    a6f4:	e3053730 	movw	r3, #22320	; 0x5730
    a6f8:	e584601c 	str	r6, [r4, #28]
    a6fc:	e3520000 	cmp	r2, #0
    a700:	e3403005 	movt	r3, #5
    a704:	e300215e 	movw	r2, #350	; 0x15e
    a708:	e5843020 	str	r3, [r4, #32]
    a70c:	e5842024 	str	r2, [r4, #36]	; 0x24
    a710:	0a000005 	beq	a72c <CTimer::CTimer(CInterruptSystem*)+0x74>
    a714:	e3011e10 	movw	r1, #7696	; 0x1e10
    a718:	e30107c4 	movw	r0, #6084	; 0x17c4
    a71c:	e3401001 	movt	r1, #1
    a720:	e3400001 	movt	r0, #1
    a724:	e3a0203b 	mov	r2, #59	; 0x3b
    a728:	eb000a4c 	bl	d060 <assertion_failed>
    a72c:	e5854000 	str	r4, [r5]
    a730:	e1a00004 	mov	r0, r4
    a734:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a738 <CTimer::~CTimer()>:
    a738:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a73c:	e1a09000 	mov	r9, r0
    a740:	e5900000 	ldr	r0, [r0]
    a744:	e3500000 	cmp	r0, #0
    a748:	0a00002c 	beq	a800 <CTimer::~CTimer()+0xc8>
    a74c:	e3a01003 	mov	r1, #3
    a750:	e3017e10 	movw	r7, #7696	; 0x1e10
    a754:	e301ae34 	movw	sl, #7732	; 0x1e34
    a758:	e3048d43 	movw	r8, #19779	; 0x4d43
    a75c:	eb001457 	bl	f8c0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    a760:	e3407001 	movt	r7, #1
    a764:	e340a001 	movt	sl, #1
    a768:	e2894018 	add	r4, r9, #24
    a76c:	e3448b54 	movt	r8, #19284	; 0x4b54
    a770:	ea000010 	b	a7b8 <CTimer::~CTimer()+0x80>
    a774:	eb0017e9 	bl	10720 <CPtrList::GetPtr(TPtrListElement*)>
    a778:	e2506000 	subs	r6, r0, #0
    a77c:	0a00001a 	beq	a7ec <CTimer::~CTimer()+0xb4>
    a780:	e5963000 	ldr	r3, [r6]
    a784:	e3010e40 	movw	r0, #7744	; 0x1e40
    a788:	e3a02049 	mov	r2, #73	; 0x49
    a78c:	e1a01007 	mov	r1, r7
    a790:	e1530008 	cmp	r3, r8
    a794:	e3400001 	movt	r0, #1
    a798:	0a000000 	beq	a7a0 <CTimer::~CTimer()+0x68>
    a79c:	eb000a2f 	bl	d060 <assertion_failed>
    a7a0:	e1a01005 	mov	r1, r5
    a7a4:	e1a00004 	mov	r0, r4
    a7a8:	eb00187c 	bl	109a0 <CPtrList::Remove(TPtrListElement*)>
    a7ac:	e1a00006 	mov	r0, r6
    a7b0:	e3a01014 	mov	r1, #20
    a7b4:	ebffff39 	bl	a4a0 <operator delete(void*, unsigned int)>
    a7b8:	e1a00004 	mov	r0, r4
    a7bc:	eb0017be 	bl	106bc <CPtrList::GetFirst()>
    a7c0:	e2505000 	subs	r5, r0, #0
    a7c4:	e1a00004 	mov	r0, r4
    a7c8:	e1a01005 	mov	r1, r5
    a7cc:	1affffe8 	bne	a774 <CTimer::~CTimer()+0x3c>
    a7d0:	e3033900 	movw	r3, #14592	; 0x3900
    a7d4:	e3403001 	movt	r3, #1
    a7d8:	e1a00004 	mov	r0, r4
    a7dc:	e5835000 	str	r5, [r3]
    a7e0:	eb0017a8 	bl	10688 <CPtrList::~CPtrList()>
    a7e4:	e1a00009 	mov	r0, r9
    a7e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a7ec:	e3a02048 	mov	r2, #72	; 0x48
    a7f0:	e1a01007 	mov	r1, r7
    a7f4:	e1a0000a 	mov	r0, sl
    a7f8:	eb000a18 	bl	d060 <assertion_failed>
    a7fc:	eaffffdf 	b	a780 <CTimer::~CTimer()+0x48>
    a800:	e3011e10 	movw	r1, #7696	; 0x1e10
    a804:	e3010e1c 	movw	r0, #7708	; 0x1e1c
    a808:	e3401001 	movt	r1, #1
    a80c:	e3400001 	movt	r0, #1
    a810:	e3a02041 	mov	r2, #65	; 0x41
    a814:	eb000a11 	bl	d060 <assertion_failed>
    a818:	e5990000 	ldr	r0, [r9]
    a81c:	eaffffca 	b	a74c <CTimer::~CTimer()+0x14>

0000a820 <CTimer::SetTimeZone(int)>:
    a820:	e2813e59 	add	r3, r1, #1424	; 0x590
    a824:	e3002b3e 	movw	r2, #2878	; 0xb3e
    a828:	e283300f 	add	r3, r3, #15
    a82c:	e1530002 	cmp	r3, r2
    a830:	95801014 	strls	r1, [r0, #20]
    a834:	93a00001 	movls	r0, #1
    a838:	83a00000 	movhi	r0, #0
    a83c:	e12fff1e 	bx	lr

0000a840 <CTimer::GetTimeZone() const>:
    a840:	e5900014 	ldr	r0, [r0, #20]
    a844:	e12fff1e 	bx	lr

0000a848 <CTimer::SetTime(unsigned int, int)>:
    a848:	e3520000 	cmp	r2, #0
    a84c:	e92d4070 	push	{r4, r5, r6, lr}
    a850:	e1a04000 	mov	r4, r0
    a854:	e1a05001 	mov	r5, r1
    a858:	1a000005 	bne	a874 <CTimer::SetTime(unsigned int, int)+0x2c>
    a85c:	e5901014 	ldr	r1, [r0, #20]
    a860:	e3a0303c 	mov	r3, #60	; 0x3c
    a864:	e0030193 	mul	r3, r3, r1
    a868:	e3530000 	cmp	r3, #0
    a86c:	ba00000e 	blt	a8ac <CTimer::SetTime(unsigned int, int)+0x64>
    a870:	e0855003 	add	r5, r5, r3
    a874:	e5940010 	ldr	r0, [r4, #16]
    a878:	e3500000 	cmp	r0, #0
    a87c:	1a000002 	bne	a88c <CTimer::SetTime(unsigned int, int)+0x44>
    a880:	e3a00001 	mov	r0, #1
    a884:	e584500c 	str	r5, [r4, #12]
    a888:	e8bd8070 	pop	{r4, r5, r6, pc}
    a88c:	ebffff05 	bl	a4a8 <EnterCritical>
    a890:	e5943010 	ldr	r3, [r4, #16]
    a894:	e584500c 	str	r5, [r4, #12]
    a898:	e3530000 	cmp	r3, #0
    a89c:	0a000007 	beq	a8c0 <CTimer::SetTime(unsigned int, int)+0x78>
    a8a0:	ebffff2e 	bl	a560 <LeaveCritical>
    a8a4:	e3a00001 	mov	r0, #1
    a8a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a8ac:	e2631000 	rsb	r1, r3, #0
    a8b0:	e1510005 	cmp	r1, r5
    a8b4:	daffffed 	ble	a870 <CTimer::SetTime(unsigned int, int)+0x28>
    a8b8:	e1a00002 	mov	r0, r2
    a8bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    a8c0:	e3a00001 	mov	r0, #1
    a8c4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a8c8 <CTimer::GetClockTicks()>:
    a8c8:	e3a03a03 	mov	r3, #12288	; 0x3000
    a8cc:	e3433f00 	movt	r3, #16128	; 0x3f00
    a8d0:	e5930004 	ldr	r0, [r3, #4]
    a8d4:	e12fff1e 	bx	lr

0000a8d8 <CTimer::GetTicks() const>:
    a8d8:	e5900004 	ldr	r0, [r0, #4]
    a8dc:	e12fff1e 	bx	lr

0000a8e0 <CTimer::GetUptime() const>:
    a8e0:	e5900008 	ldr	r0, [r0, #8]
    a8e4:	e12fff1e 	bx	lr

0000a8e8 <CTimer::GetTime() const>:
    a8e8:	e590000c 	ldr	r0, [r0, #12]
    a8ec:	e12fff1e 	bx	lr

0000a8f0 <CTimer::GetUniversalTime() const>:
    a8f0:	e5902014 	ldr	r2, [r0, #20]
    a8f4:	e3a0303c 	mov	r3, #60	; 0x3c
    a8f8:	e590000c 	ldr	r0, [r0, #12]
    a8fc:	e0030293 	mul	r3, r3, r2
    a900:	e1530000 	cmp	r3, r0
    a904:	d0400003 	suble	r0, r0, r3
    a908:	c3a00000 	movgt	r0, #0
    a90c:	e12fff1e 	bx	lr

0000a910 <CTimer::GetTimeString()>:
    a910:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a914:	e1a05000 	mov	r5, r0
    a918:	e5900010 	ldr	r0, [r0, #16]
    a91c:	e24dd01c 	sub	sp, sp, #28
    a920:	e3500000 	cmp	r0, #0
    a924:	1a00006c 	bne	aadc <CTimer::GetTimeString()+0x1cc>
    a928:	e595400c 	ldr	r4, [r5, #12]
    a92c:	e5959004 	ldr	r9, [r5, #4]
    a930:	e1940009 	orrs	r0, r4, r9
    a934:	0a00004f 	beq	aa78 <CTimer::GetTimeString()+0x168>
    a938:	e308a889 	movw	sl, #34953	; 0x8889
    a93c:	e348a888 	movt	sl, #34952	; 0x8888
    a940:	e30b23c5 	movw	r2, #46021	; 0xb3c5
    a944:	e34921a2 	movt	r2, #37282	; 0x91a2
    a948:	e0876a94 	umull	r6, r7, r4, sl
    a94c:	e304e507 	movw	lr, #17671	; 0x4507
    a950:	e0832294 	umull	r2, r3, r4, r2
    a954:	e34ce22e 	movt	lr, #49710	; 0xc22e
    a958:	e3a0003c 	mov	r0, #60	; 0x3c
    a95c:	e308151f 	movw	r1, #34079	; 0x851f
    a960:	e1a0c2a7 	lsr	ip, r7, #5
    a964:	e34511eb 	movt	r1, #20971	; 0x51eb
    a968:	e30057b2 	movw	r5, #1970	; 0x7b2
    a96c:	e08baa9c 	umull	sl, fp, ip, sl
    a970:	e1a065a3 	lsr	r6, r3, #11
    a974:	e0832e94 	umull	r2, r3, r4, lr
    a978:	e3a0a064 	mov	sl, #100	; 0x64
    a97c:	e0674c90 	mls	r7, r0, ip, r4
    a980:	e1a082ab 	lsr	r8, fp, #5
    a984:	e3a0ee19 	mov	lr, #400	; 0x190
    a988:	e068c890 	mls	r8, r0, r8, ip
    a98c:	e1a04823 	lsr	r4, r3, #16
    a990:	e300c16d 	movw	ip, #365	; 0x16d
    a994:	e300016e 	movw	r0, #366	; 0x16e
    a998:	ea000001 	b	a9a4 <CTimer::GetTimeString()+0x94>
    a99c:	e0444002 	sub	r4, r4, r2
    a9a0:	e2855001 	add	r5, r5, #1
    a9a4:	e0832195 	umull	r2, r3, r5, r1
    a9a8:	e1a022a3 	lsr	r2, r3, #5
    a9ac:	e1a033a3 	lsr	r3, r3, #7
    a9b0:	e062529a 	mls	r2, sl, r2, r5
    a9b4:	e063539e 	mls	r3, lr, r3, r5
    a9b8:	e3520000 	cmp	r2, #0
    a9bc:	e16f3f13 	clz	r3, r3
    a9c0:	01a032a3 	lsreq	r3, r3, #5
    a9c4:	0a000002 	beq	a9d4 <CTimer::GetTimeString()+0xc4>
    a9c8:	e3150003 	tst	r5, #3
    a9cc:	03a03001 	moveq	r3, #1
    a9d0:	13a03000 	movne	r3, #0
    a9d4:	e3530000 	cmp	r3, #0
    a9d8:	01a0200c 	moveq	r2, ip
    a9dc:	11a02000 	movne	r2, r0
    a9e0:	e1540002 	cmp	r4, r2
    a9e4:	2affffec 	bcs	a99c <CTimer::GetTimeString()+0x8c>
    a9e8:	e3010dd8 	movw	r0, #7640	; 0x1dd8
    a9ec:	e3a0a000 	mov	sl, #0
    a9f0:	e3400001 	movt	r0, #1
    a9f4:	ea000001 	b	aa00 <CTimer::GetTimeString()+0xf0>
    a9f8:	e0444002 	sub	r4, r4, r2
    a9fc:	e28aa001 	add	sl, sl, #1
    aa00:	e35a0001 	cmp	sl, #1
    aa04:	13a01000 	movne	r1, #0
    aa08:	02031001 	andeq	r1, r3, #1
    aa0c:	e3a0201d 	mov	r2, #29
    aa10:	e3510000 	cmp	r1, #0
    aa14:	0790210a 	ldreq	r2, [r0, sl, lsl #2]
    aa18:	e1540002 	cmp	r4, r2
    aa1c:	2afffff5 	bcs	a9f8 <CTimer::GetTimeString()+0xe8>
    aa20:	e308251f 	movw	r2, #34079	; 0x851f
    aa24:	e34521eb 	movt	r2, #20971	; 0x51eb
    aa28:	e3a01064 	mov	r1, #100	; 0x64
    aa2c:	e3a00010 	mov	r0, #16
    aa30:	e0832299 	umull	r2, r3, r9, r2
    aa34:	e1a0b2a3 	lsr	fp, r3, #5
    aa38:	e06b9b91 	mls	fp, r1, fp, r9
    aa3c:	ebfffe93 	bl	a490 <operator new(unsigned int)>
    aa40:	e1a09000 	mov	r9, r0
    aa44:	eb000e92 	bl	e494 <CString::CString()>
    aa48:	e30037b7 	movw	r3, #1975	; 0x7b7
    aa4c:	e1550003 	cmp	r5, r3
    aa50:	8a00000a 	bhi	aa80 <CTimer::GetTimeString()+0x170>
    aa54:	e1a00009 	mov	r0, r9
    aa58:	e58db004 	str	fp, [sp, #4]
    aa5c:	e1a03008 	mov	r3, r8
    aa60:	e58d7000 	str	r7, [sp]
    aa64:	e1a02006 	mov	r2, r6
    aa68:	e3011e84 	movw	r1, #7812	; 0x1e84
    aa6c:	e3401001 	movt	r1, #1
    aa70:	eb0011e6 	bl	f210 <CString::Format(char const*, ...)>
    aa74:	e1a00009 	mov	r0, r9
    aa78:	e28dd01c 	add	sp, sp, #28
    aa7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa80:	e30a3aab 	movw	r3, #43691	; 0xaaab
    aa84:	e34a3aaa 	movt	r3, #43690	; 0xaaaa
    aa88:	e3a0c018 	mov	ip, #24
    aa8c:	e30327ac 	movw	r2, #14252	; 0x37ac
    aa90:	e0810396 	umull	r0, r1, r6, r3
    aa94:	e3402001 	movt	r2, #1
    aa98:	e58db00c 	str	fp, [sp, #12]
    aa9c:	e2843001 	add	r3, r4, #1
    aaa0:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    aaa4:	e58d7008 	str	r7, [sp, #8]
    aaa8:	e58d8004 	str	r8, [sp, #4]
    aaac:	e1cd01f0 	strd	r0, [sp, #16]
    aab0:	e3011e68 	movw	r1, #7784	; 0x1e68
    aab4:	e59d0014 	ldr	r0, [sp, #20]
    aab8:	e3401001 	movt	r1, #1
    aabc:	e1a0e220 	lsr	lr, r0, #4
    aac0:	e1a00009 	mov	r0, r9
    aac4:	e0666e9c 	mls	r6, ip, lr, r6
    aac8:	e58d6000 	str	r6, [sp]
    aacc:	eb0011cf 	bl	f210 <CString::Format(char const*, ...)>
    aad0:	e1a00009 	mov	r0, r9
    aad4:	e28dd01c 	add	sp, sp, #28
    aad8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aadc:	ebfffe71 	bl	a4a8 <EnterCritical>
    aae0:	e5953010 	ldr	r3, [r5, #16]
    aae4:	e595400c 	ldr	r4, [r5, #12]
    aae8:	e3530000 	cmp	r3, #0
    aaec:	e5959004 	ldr	r9, [r5, #4]
    aaf0:	0affff8e 	beq	a930 <CTimer::GetTimeString()+0x20>
    aaf4:	ebfffe99 	bl	a560 <LeaveCritical>
    aaf8:	eaffff8c 	b	a930 <CTimer::GetTimeString()+0x20>

0000aafc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    aafc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab00:	e24dd00c 	sub	sp, sp, #12
    ab04:	e1a0a000 	mov	sl, r0
    ab08:	e3a00014 	mov	r0, #20
    ab0c:	e1a06001 	mov	r6, r1
    ab10:	e1a04002 	mov	r4, r2
    ab14:	e1a07003 	mov	r7, r3
    ab18:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    ab1c:	ebfffe5b 	bl	a490 <operator new(unsigned int)>
    ab20:	e59a1004 	ldr	r1, [sl, #4]
    ab24:	e3540000 	cmp	r4, #0
    ab28:	e0816006 	add	r6, r1, r6
    ab2c:	e1a09000 	mov	r9, r0
    ab30:	0a000044 	beq	ac48 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
    ab34:	e59a001c 	ldr	r0, [sl, #28]
    ab38:	e3042d43 	movw	r2, #19779	; 0x4d43
    ab3c:	e5894004 	str	r4, [r9, #4]
    ab40:	e3442b54 	movt	r2, #19284	; 0x4b54
    ab44:	e3500000 	cmp	r0, #0
    ab48:	e5896008 	str	r6, [r9, #8]
    ab4c:	e589700c 	str	r7, [r9, #12]
    ab50:	e5895010 	str	r5, [r9, #16]
    ab54:	e5892000 	str	r2, [r9]
    ab58:	1a000038 	bne	ac40 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    ab5c:	e28a5018 	add	r5, sl, #24
    ab60:	e1a00005 	mov	r0, r5
    ab64:	eb0016d4 	bl	106bc <CPtrList::GetFirst()>
    ab68:	e2504000 	subs	r4, r0, #0
    ab6c:	0a00002e 	beq	ac2c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    ab70:	e3017e10 	movw	r7, #7696	; 0x1e10
    ab74:	e3013e98 	movw	r3, #7832	; 0x1e98
    ab78:	e3048d43 	movw	r8, #19779	; 0x4d43
    ab7c:	e3403001 	movt	r3, #1
    ab80:	e3407001 	movt	r7, #1
    ab84:	e58d3004 	str	r3, [sp, #4]
    ab88:	e3448b54 	movt	r8, #19284	; 0x4b54
    ab8c:	ea000011 	b	abd8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    ab90:	e59bc000 	ldr	ip, [fp]
    ab94:	e3010ea8 	movw	r0, #7848	; 0x1ea8
    ab98:	e3002116 	movw	r2, #278	; 0x116
    ab9c:	e1a01007 	mov	r1, r7
    aba0:	e15c0008 	cmp	ip, r8
    aba4:	e3400001 	movt	r0, #1
    aba8:	0a000000 	beq	abb0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb4>
    abac:	eb00092b 	bl	d060 <assertion_failed>
    abb0:	e59b3008 	ldr	r3, [fp, #8]
    abb4:	e1a01004 	mov	r1, r4
    abb8:	e1a00005 	mov	r0, r5
    abbc:	e0433006 	sub	r3, r3, r6
    abc0:	e3530000 	cmp	r3, #0
    abc4:	ca00000d 	bgt	ac00 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x104>
    abc8:	eb0016bd 	bl	106c4 <CPtrList::GetNext(TPtrListElement*)>
    abcc:	e3500000 	cmp	r0, #0
    abd0:	0a000015 	beq	ac2c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    abd4:	e1a04000 	mov	r4, r0
    abd8:	e1a01004 	mov	r1, r4
    abdc:	e1a00005 	mov	r0, r5
    abe0:	eb0016ce 	bl	10720 <CPtrList::GetPtr(TPtrListElement*)>
    abe4:	e250b000 	subs	fp, r0, #0
    abe8:	1affffe8 	bne	ab90 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    abec:	e3002115 	movw	r2, #277	; 0x115
    abf0:	e1a01007 	mov	r1, r7
    abf4:	e59d0004 	ldr	r0, [sp, #4]
    abf8:	eb000918 	bl	d060 <assertion_failed>
    abfc:	eaffffe3 	b	ab90 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    ac00:	e1a01004 	mov	r1, r4
    ac04:	e1a00005 	mov	r0, r5
    ac08:	e1a02009 	mov	r2, r9
    ac0c:	eb0016da 	bl	1077c <CPtrList::InsertBefore(TPtrListElement*, void*)>
    ac10:	e59a301c 	ldr	r3, [sl, #28]
    ac14:	e3530000 	cmp	r3, #0
    ac18:	0a000000 	beq	ac20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x124>
    ac1c:	ebfffe4f 	bl	a560 <LeaveCritical>
    ac20:	e1a00009 	mov	r0, r9
    ac24:	e28dd00c 	add	sp, sp, #12
    ac28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac2c:	e1a01004 	mov	r1, r4
    ac30:	e1a00005 	mov	r0, r5
    ac34:	e1a02009 	mov	r2, r9
    ac38:	eb001715 	bl	10894 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    ac3c:	eafffff3 	b	ac10 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x114>
    ac40:	ebfffe18 	bl	a4a8 <EnterCritical>
    ac44:	eaffffc4 	b	ab5c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x60>
    ac48:	e3011e10 	movw	r1, #7696	; 0x1e10
    ac4c:	e3030154 	movw	r0, #12628	; 0x3154
    ac50:	e3401001 	movt	r1, #1
    ac54:	e3400001 	movt	r0, #1
    ac58:	e3002105 	movw	r2, #261	; 0x105
    ac5c:	eb0008ff 	bl	d060 <assertion_failed>
    ac60:	eaffffb3 	b	ab34 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

0000ac64 <CTimer::CancelKernelTimer(unsigned int)>:
    ac64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ac68:	e2514000 	subs	r4, r1, #0
    ac6c:	e1a05000 	mov	r5, r0
    ac70:	0a000022 	beq	ad00 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
    ac74:	e595001c 	ldr	r0, [r5, #28]
    ac78:	e3500000 	cmp	r0, #0
    ac7c:	1a00001d 	bne	acf8 <CTimer::CancelKernelTimer(unsigned int)+0x94>
    ac80:	e2856018 	add	r6, r5, #24
    ac84:	e1a01004 	mov	r1, r4
    ac88:	e1a00006 	mov	r0, r6
    ac8c:	eb00179f 	bl	10b10 <CPtrList::Find(void*)>
    ac90:	e2507000 	subs	r7, r0, #0
    ac94:	0a000012 	beq	ace4 <CTimer::CancelKernelTimer(unsigned int)+0x80>
    ac98:	e5942000 	ldr	r2, [r4]
    ac9c:	e3043d43 	movw	r3, #19779	; 0x4d43
    aca0:	e3443b54 	movt	r3, #19284	; 0x4b54
    aca4:	e1520003 	cmp	r2, r3
    aca8:	0a000005 	beq	acc4 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    acac:	e3011e10 	movw	r1, #7696	; 0x1e10
    acb0:	e3010e40 	movw	r0, #7744	; 0x1e40
    acb4:	e3401001 	movt	r1, #1
    acb8:	e3400001 	movt	r0, #1
    acbc:	e3002139 	movw	r2, #313	; 0x139
    acc0:	eb0008e6 	bl	d060 <assertion_failed>
    acc4:	e1a01007 	mov	r1, r7
    acc8:	e1a00006 	mov	r0, r6
    accc:	eb001733 	bl	109a0 <CPtrList::Remove(TPtrListElement*)>
    acd0:	e3a03000 	mov	r3, #0
    acd4:	e1a00004 	mov	r0, r4
    acd8:	e5843000 	str	r3, [r4]
    acdc:	e3a01014 	mov	r1, #20
    ace0:	ebfffdee 	bl	a4a0 <operator delete(void*, unsigned int)>
    ace4:	e595301c 	ldr	r3, [r5, #28]
    ace8:	e3530000 	cmp	r3, #0
    acec:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    acf0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    acf4:	eafffe19 	b	a560 <LeaveCritical>
    acf8:	ebfffdea 	bl	a4a8 <EnterCritical>
    acfc:	eaffffdf 	b	ac80 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    ad00:	e3011e10 	movw	r1, #7696	; 0x1e10
    ad04:	e3010e34 	movw	r0, #7732	; 0x1e34
    ad08:	e3401001 	movt	r1, #1
    ad0c:	e3400001 	movt	r0, #1
    ad10:	e3002132 	movw	r2, #306	; 0x132
    ad14:	eb0008d1 	bl	d060 <assertion_failed>
    ad18:	eaffffd5 	b	ac74 <CTimer::CancelKernelTimer(unsigned int)+0x10>

0000ad1c <CTimer::PollKernelTimers()>:
    ad1c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad20:	e1a06000 	mov	r6, r0
    ad24:	e590001c 	ldr	r0, [r0, #28]
    ad28:	e3500000 	cmp	r0, #0
    ad2c:	1a00004f 	bne	ae70 <CTimer::PollKernelTimers()+0x154>
    ad30:	e2867018 	add	r7, r6, #24
    ad34:	e1a00007 	mov	r0, r7
    ad38:	eb00165f 	bl	106bc <CPtrList::GetFirst()>
    ad3c:	e2505000 	subs	r5, r0, #0
    ad40:	0a000040 	beq	ae48 <CTimer::PollKernelTimers()+0x12c>
    ad44:	e3019e10 	movw	r9, #7696	; 0x1e10
    ad48:	e301ae34 	movw	sl, #7732	; 0x1e34
    ad4c:	e3048d43 	movw	r8, #19779	; 0x4d43
    ad50:	e3409001 	movt	r9, #1
    ad54:	e340a001 	movt	sl, #1
    ad58:	e3448b54 	movt	r8, #19284	; 0x4b54
    ad5c:	ea000010 	b	ada4 <CTimer::PollKernelTimers()+0x88>
    ad60:	e5945004 	ldr	r5, [r4, #4]
    ad64:	e3550000 	cmp	r5, #0
    ad68:	0a00002d 	beq	ae24 <CTimer::PollKernelTimers()+0x108>
    ad6c:	e5942010 	ldr	r2, [r4, #16]
    ad70:	e1a00004 	mov	r0, r4
    ad74:	e594100c 	ldr	r1, [r4, #12]
    ad78:	e12fff35 	blx	r5
    ad7c:	e3a03000 	mov	r3, #0
    ad80:	e1a00004 	mov	r0, r4
    ad84:	e5843000 	str	r3, [r4]
    ad88:	e3a01014 	mov	r1, #20
    ad8c:	ebfffdc3 	bl	a4a0 <operator delete(void*, unsigned int)>
    ad90:	e596001c 	ldr	r0, [r6, #28]
    ad94:	e3500000 	cmp	r0, #0
    ad98:	1a000027 	bne	ae3c <CTimer::PollKernelTimers()+0x120>
    ad9c:	e25b5000 	subs	r5, fp, #0
    ada0:	0a000028 	beq	ae48 <CTimer::PollKernelTimers()+0x12c>
    ada4:	e1a01005 	mov	r1, r5
    ada8:	e1a00007 	mov	r0, r7
    adac:	eb00165b 	bl	10720 <CPtrList::GetPtr(TPtrListElement*)>
    adb0:	e2504000 	subs	r4, r0, #0
    adb4:	0a000028 	beq	ae5c <CTimer::PollKernelTimers()+0x140>
    adb8:	e5943000 	ldr	r3, [r4]
    adbc:	e1530008 	cmp	r3, r8
    adc0:	0a000004 	beq	add8 <CTimer::PollKernelTimers()+0xbc>
    adc4:	e3010e40 	movw	r0, #7744	; 0x1e40
    adc8:	e300214f 	movw	r2, #335	; 0x14f
    adcc:	e3400001 	movt	r0, #1
    add0:	e1a01009 	mov	r1, r9
    add4:	eb0008a1 	bl	d060 <assertion_failed>
    add8:	e5962004 	ldr	r2, [r6, #4]
    addc:	e5943008 	ldr	r3, [r4, #8]
    ade0:	e0433002 	sub	r3, r3, r2
    ade4:	e3530000 	cmp	r3, #0
    ade8:	ca000016 	bgt	ae48 <CTimer::PollKernelTimers()+0x12c>
    adec:	e1a01005 	mov	r1, r5
    adf0:	e1a00007 	mov	r0, r7
    adf4:	eb001632 	bl	106c4 <CPtrList::GetNext(TPtrListElement*)>
    adf8:	e1a01005 	mov	r1, r5
    adfc:	e1a0b000 	mov	fp, r0
    ae00:	e1a00007 	mov	r0, r7
    ae04:	eb0016e5 	bl	109a0 <CPtrList::Remove(TPtrListElement*)>
    ae08:	e596301c 	ldr	r3, [r6, #28]
    ae0c:	e3530000 	cmp	r3, #0
    ae10:	0affffd2 	beq	ad60 <CTimer::PollKernelTimers()+0x44>
    ae14:	ebfffdd1 	bl	a560 <LeaveCritical>
    ae18:	e5945004 	ldr	r5, [r4, #4]
    ae1c:	e3550000 	cmp	r5, #0
    ae20:	1affffd1 	bne	ad6c <CTimer::PollKernelTimers()+0x50>
    ae24:	e3030154 	movw	r0, #12628	; 0x3154
    ae28:	e300215d 	movw	r2, #349	; 0x15d
    ae2c:	e3400001 	movt	r0, #1
    ae30:	e1a01009 	mov	r1, r9
    ae34:	eb000889 	bl	d060 <assertion_failed>
    ae38:	eaffffcb 	b	ad6c <CTimer::PollKernelTimers()+0x50>
    ae3c:	ebfffd99 	bl	a4a8 <EnterCritical>
    ae40:	e25b5000 	subs	r5, fp, #0
    ae44:	1affffd6 	bne	ada4 <CTimer::PollKernelTimers()+0x88>
    ae48:	e596301c 	ldr	r3, [r6, #28]
    ae4c:	e3530000 	cmp	r3, #0
    ae50:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae54:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae58:	eafffdc0 	b	a560 <LeaveCritical>
    ae5c:	e300214e 	movw	r2, #334	; 0x14e
    ae60:	e1a01009 	mov	r1, r9
    ae64:	e1a0000a 	mov	r0, sl
    ae68:	eb00087c 	bl	d060 <assertion_failed>
    ae6c:	eaffffd1 	b	adb8 <CTimer::PollKernelTimers()+0x9c>
    ae70:	ebfffd8c 	bl	a4a8 <EnterCritical>
    ae74:	eaffffad 	b	ad30 <CTimer::PollKernelTimers()+0x14>

0000ae78 <CTimer::InterruptHandler()>:
    ae78:	e3a03a03 	mov	r3, #12288	; 0x3000
    ae7c:	e3433f00 	movt	r3, #16128	; 0x3f00
    ae80:	e92d4010 	push	{r4, lr}
    ae84:	e1a04000 	mov	r4, r0
    ae88:	e5933000 	ldr	r3, [r3]
    ae8c:	e3130008 	tst	r3, #8
    ae90:	0a000036 	beq	af70 <CTimer::InterruptHandler()+0xf8>
    ae94:	e3a03a03 	mov	r3, #12288	; 0x3000
    ae98:	e3433f00 	movt	r3, #16128	; 0x3f00
    ae9c:	e3021710 	movw	r1, #10000	; 0x2710
    aea0:	e5932018 	ldr	r2, [r3, #24]
    aea4:	e0822001 	add	r2, r2, r1
    aea8:	e5832018 	str	r2, [r3, #24]
    aeac:	e5930004 	ldr	r0, [r3, #4]
    aeb0:	e1520000 	cmp	r2, r0
    aeb4:	35932004 	ldrcc	r2, [r3, #4]
    aeb8:	30821001 	addcc	r1, r2, r1
    aebc:	35831018 	strcc	r1, [r3, #24]
    aec0:	e3a03a03 	mov	r3, #12288	; 0x3000
    aec4:	e3433f00 	movt	r3, #16128	; 0x3f00
    aec8:	e3a02008 	mov	r2, #8
    aecc:	e5832000 	str	r2, [r3]
    aed0:	e5940010 	ldr	r0, [r4, #16]
    aed4:	e3500000 	cmp	r0, #0
    aed8:	1a000016 	bne	af38 <CTimer::InterruptHandler()+0xc0>
    aedc:	e5943004 	ldr	r3, [r4, #4]
    aee0:	e308051f 	movw	r0, #34079	; 0x851f
    aee4:	e34501eb 	movt	r0, #20971	; 0x51eb
    aee8:	e3a0c064 	mov	ip, #100	; 0x64
    aeec:	e2833001 	add	r3, r3, #1
    aef0:	e5843004 	str	r3, [r4, #4]
    aef4:	e0810093 	umull	r0, r1, r3, r0
    aef8:	e1a022a1 	lsr	r2, r1, #5
    aefc:	e062329c 	mls	r2, ip, r2, r3
    af00:	e3520000 	cmp	r2, #0
    af04:	1a000008 	bne	af2c <CTimer::InterruptHandler()+0xb4>
    af08:	e5943008 	ldr	r3, [r4, #8]
    af0c:	e2833001 	add	r3, r3, #1
    af10:	e5843008 	str	r3, [r4, #8]
    af14:	e594300c 	ldr	r3, [r4, #12]
    af18:	e2833001 	add	r3, r3, #1
    af1c:	e584300c 	str	r3, [r4, #12]
    af20:	e3520000 	cmp	r2, #0
    af24:	0a000000 	beq	af2c <CTimer::InterruptHandler()+0xb4>
    af28:	ebfffd8c 	bl	a560 <LeaveCritical>
    af2c:	e1a00004 	mov	r0, r4
    af30:	e8bd4010 	pop	{r4, lr}
    af34:	eaffff78 	b	ad1c <CTimer::PollKernelTimers()>
    af38:	ebfffd5a 	bl	a4a8 <EnterCritical>
    af3c:	e5943004 	ldr	r3, [r4, #4]
    af40:	e308051f 	movw	r0, #34079	; 0x851f
    af44:	e34501eb 	movt	r0, #20971	; 0x51eb
    af48:	e2833001 	add	r3, r3, #1
    af4c:	e3a0c064 	mov	ip, #100	; 0x64
    af50:	e5843004 	str	r3, [r4, #4]
    af54:	e0810093 	umull	r0, r1, r3, r0
    af58:	e5942010 	ldr	r2, [r4, #16]
    af5c:	e1a012a1 	lsr	r1, r1, #5
    af60:	e063319c 	mls	r3, ip, r1, r3
    af64:	e3530000 	cmp	r3, #0
    af68:	1affffec 	bne	af20 <CTimer::InterruptHandler()+0xa8>
    af6c:	eaffffe5 	b	af08 <CTimer::InterruptHandler()+0x90>
    af70:	e3011e10 	movw	r1, #7696	; 0x1e10
    af74:	e3010ed0 	movw	r0, #7888	; 0x1ed0
    af78:	e3401001 	movt	r1, #1
    af7c:	e3400001 	movt	r0, #1
    af80:	e300216f 	movw	r2, #367	; 0x16f
    af84:	eb000835 	bl	d060 <assertion_failed>
    af88:	eaffffc1 	b	ae94 <CTimer::InterruptHandler()+0x1c>

0000af8c <CTimer::InterruptHandler(void*)>:
    af8c:	e92d4010 	push	{r4, lr}
    af90:	e2504000 	subs	r4, r0, #0
    af94:	0a000002 	beq	afa4 <CTimer::InterruptHandler(void*)+0x18>
    af98:	e1a00004 	mov	r0, r4
    af9c:	e8bd4010 	pop	{r4, lr}
    afa0:	eaffffb4 	b	ae78 <CTimer::InterruptHandler()>
    afa4:	e3011e10 	movw	r1, #7696	; 0x1e10
    afa8:	e3010680 	movw	r0, #5760	; 0x1680
    afac:	e3401001 	movt	r1, #1
    afb0:	e3400001 	movt	r0, #1
    afb4:	e3002191 	movw	r2, #401	; 0x191
    afb8:	eb000828 	bl	d060 <assertion_failed>
    afbc:	e1a00004 	mov	r0, r4
    afc0:	e8bd4010 	pop	{r4, lr}
    afc4:	eaffffab 	b	ae78 <CTimer::InterruptHandler()>

0000afc8 <CTimer::TuneMsDelay()>:
    afc8:	e92d4070 	push	{r4, r5, r6, lr}
    afcc:	e1a04000 	mov	r4, r0
    afd0:	e5943020 	ldr	r3, [r4, #32]
    afd4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    afd8:	e24dd008 	sub	sp, sp, #8
    afdc:	e5946004 	ldr	r6, [r4, #4]
    afe0:	e308551f 	movw	r5, #34079	; 0x851f
    afe4:	e34551eb 	movt	r5, #20971	; 0x51eb
    afe8:	e0000390 	mul	r0, r0, r3
    afec:	eb001093 	bl	f240 <DelayLoop>
    aff0:	e5941004 	ldr	r1, [r4, #4]
    aff4:	e3020710 	movw	r0, #10000	; 0x2710
    aff8:	e0411006 	sub	r1, r1, r6
    affc:	eb00183f 	bl	11100 <__aeabi_uidiv>
    b000:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    b004:	e3413062 	movt	r3, #4194	; 0x1062
    b008:	e1a06000 	mov	r6, r0
    b00c:	e5940020 	ldr	r0, [r4, #32]
    b010:	e0000690 	mul	r0, r0, r6
    b014:	e0810590 	umull	r0, r1, r0, r5
    b018:	e1a022a1 	lsr	r2, r1, #5
    b01c:	e5842020 	str	r2, [r4, #32]
    b020:	e2822f7d 	add	r2, r2, #500	; 0x1f4
    b024:	e0832392 	umull	r2, r3, r2, r3
    b028:	e1a03323 	lsr	r3, r3, #6
    b02c:	e5843024 	str	r3, [r4, #36]	; 0x24
    b030:	e0854596 	umull	r4, r5, r6, r5
    b034:	eb00098e 	bl	d674 <CLogger::Get()>
    b038:	e3a0e064 	mov	lr, #100	; 0x64
    b03c:	e3a02003 	mov	r2, #3
    b040:	e59f1020 	ldr	r1, [pc, #32]	; b068 <CTimer::TuneMsDelay()+0xa0>
    b044:	e3013ef4 	movw	r3, #7924	; 0x1ef4
    b048:	e3403001 	movt	r3, #1
    b04c:	e1a0c2a5 	lsr	ip, r5, #5
    b050:	e58dc000 	str	ip, [sp]
    b054:	e0666c9e 	mls	r6, lr, ip, r6
    b058:	e58d6004 	str	r6, [sp, #4]
    b05c:	eb000a60 	bl	d9e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b060:	e28dd008 	add	sp, sp, #8
    b064:	e8bd8070 	pop	{r4, r5, r6, pc}
    b068:	00011e08 	.word	0x00011e08

0000b06c <CTimer::Initialize()>:
    b06c:	e92d4010 	push	{r4, lr}
    b070:	e1a04000 	mov	r4, r0
    b074:	e5900000 	ldr	r0, [r0]
    b078:	e3500000 	cmp	r0, #0
    b07c:	0a000011 	beq	b0c8 <CTimer::Initialize()+0x5c>
    b080:	e1a03004 	mov	r3, r4
    b084:	e3a01003 	mov	r1, #3
    b088:	e30a2f8c 	movw	r2, #44940	; 0xaf8c
    b08c:	e3402000 	movt	r2, #0
    b090:	eb0011d1 	bl	f7dc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    b094:	e3a02a03 	mov	r2, #12288	; 0x3000
    b098:	e3432f00 	movt	r2, #16128	; 0x3f00
    b09c:	e3a03df2 	mov	r3, #15488	; 0x3c80
    b0a0:	e34f3e36 	movt	r3, #65078	; 0xfe36
    b0a4:	e1a00004 	mov	r0, r4
    b0a8:	e5823004 	str	r3, [r2, #4]
    b0ac:	e5923004 	ldr	r3, [r2, #4]
    b0b0:	e2833c27 	add	r3, r3, #9984	; 0x2700
    b0b4:	e2833010 	add	r3, r3, #16
    b0b8:	e5823018 	str	r3, [r2, #24]
    b0bc:	ebffffc1 	bl	afc8 <CTimer::TuneMsDelay()>
    b0c0:	e3a00001 	mov	r0, #1
    b0c4:	e8bd8010 	pop	{r4, pc}
    b0c8:	e3011e10 	movw	r1, #7696	; 0x1e10
    b0cc:	e3010e1c 	movw	r0, #7708	; 0x1e1c
    b0d0:	e3401001 	movt	r1, #1
    b0d4:	e3400001 	movt	r0, #1
    b0d8:	e3a02055 	mov	r2, #85	; 0x55
    b0dc:	eb0007df 	bl	d060 <assertion_failed>
    b0e0:	e5940000 	ldr	r0, [r4]
    b0e4:	eaffffe5 	b	b080 <CTimer::Initialize()+0x14>

0000b0e8 <CTimer::SimpleMsDelay(unsigned int)>:
    b0e8:	e2503000 	subs	r3, r0, #0
    b0ec:	012fff1e 	bxeq	lr
    b0f0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    b0f4:	e0000390 	mul	r0, r0, r3
    b0f8:	e3500000 	cmp	r0, #0
    b0fc:	012fff1e 	bxeq	lr
    b100:	e3a02a03 	mov	r2, #12288	; 0x3000
    b104:	e3432f00 	movt	r2, #16128	; 0x3f00
    b108:	e2800001 	add	r0, r0, #1
    b10c:	e5921004 	ldr	r1, [r2, #4]
    b110:	e5923004 	ldr	r3, [r2, #4]
    b114:	e0433001 	sub	r3, r3, r1
    b118:	e1500003 	cmp	r0, r3
    b11c:	8afffffb 	bhi	b110 <CTimer::SimpleMsDelay(unsigned int)+0x28>
    b120:	e12fff1e 	bx	lr

0000b124 <CTimer::SimpleusDelay(unsigned int)>:
    b124:	e3500000 	cmp	r0, #0
    b128:	012fff1e 	bxeq	lr
    b12c:	e3a02a03 	mov	r2, #12288	; 0x3000
    b130:	e3432f00 	movt	r2, #16128	; 0x3f00
    b134:	e2800001 	add	r0, r0, #1
    b138:	e5921004 	ldr	r1, [r2, #4]
    b13c:	e5923004 	ldr	r3, [r2, #4]
    b140:	e0433001 	sub	r3, r3, r1
    b144:	e1500003 	cmp	r0, r3
    b148:	8afffffb 	bhi	b13c <CTimer::SimpleusDelay(unsigned int)+0x18>
    b14c:	e12fff1e 	bx	lr

0000b150 <CTimer::IsLeapYear(unsigned int)>:
    b150:	e308251f 	movw	r2, #34079	; 0x851f
    b154:	e34521eb 	movt	r2, #20971	; 0x51eb
    b158:	e3a0c064 	mov	ip, #100	; 0x64
    b15c:	e0832290 	umull	r2, r3, r0, r2
    b160:	e1a012a3 	lsr	r1, r3, #5
    b164:	e061019c 	mls	r1, ip, r1, r0
    b168:	e3510000 	cmp	r1, #0
    b16c:	0a000003 	beq	b180 <CTimer::IsLeapYear(unsigned int)+0x30>
    b170:	e3100003 	tst	r0, #3
    b174:	03a00001 	moveq	r0, #1
    b178:	13a00000 	movne	r0, #0
    b17c:	e12fff1e 	bx	lr
    b180:	e1a033a3 	lsr	r3, r3, #7
    b184:	e3a02e19 	mov	r2, #400	; 0x190
    b188:	e0600392 	mls	r0, r2, r3, r0
    b18c:	e16f0f10 	clz	r0, r0
    b190:	e1a002a0 	lsr	r0, r0, #5
    b194:	e12fff1e 	bx	lr

0000b198 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    b198:	e3500001 	cmp	r0, #1
    b19c:	0a000003 	beq	b1b0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    b1a0:	e3013dd8 	movw	r3, #7640	; 0x1dd8
    b1a4:	e3403001 	movt	r3, #1
    b1a8:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    b1ac:	e12fff1e 	bx	lr
    b1b0:	e308251f 	movw	r2, #34079	; 0x851f
    b1b4:	e34521eb 	movt	r2, #20971	; 0x51eb
    b1b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b1bc:	e3a0e064 	mov	lr, #100	; 0x64
    b1c0:	e0832291 	umull	r2, r3, r1, r2
    b1c4:	e1a0c2a3 	lsr	ip, r3, #5
    b1c8:	e06c1c9e 	mls	ip, lr, ip, r1
    b1cc:	e35c0000 	cmp	ip, #0
    b1d0:	0a000008 	beq	b1f8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    b1d4:	e3110003 	tst	r1, #3
    b1d8:	03a01001 	moveq	r1, #1
    b1dc:	13a01000 	movne	r1, #0
    b1e0:	e3510000 	cmp	r1, #0
    b1e4:	03013dd8 	movweq	r3, #7640	; 0x1dd8
    b1e8:	03403001 	movteq	r3, #1
    b1ec:	13a0001d 	movne	r0, #29
    b1f0:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    b1f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    b1f8:	e1a033a3 	lsr	r3, r3, #7
    b1fc:	e3a02e19 	mov	r2, #400	; 0x190
    b200:	e0611392 	mls	r1, r2, r3, r1
    b204:	e16f1f11 	clz	r1, r1
    b208:	e1a012a1 	lsr	r1, r1, #5
    b20c:	eafffff3 	b	b1e0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000b210 <CTimer::Get()>:
    b210:	e92d4010 	push	{r4, lr}
    b214:	e3034900 	movw	r4, #14592	; 0x3900
    b218:	e3404001 	movt	r4, #1
    b21c:	e5940000 	ldr	r0, [r4]
    b220:	e3500000 	cmp	r0, #0
    b224:	18bd8010 	popne	{r4, pc}
    b228:	e30021d6 	movw	r2, #470	; 0x1d6
    b22c:	e3011e10 	movw	r1, #7696	; 0x1e10
    b230:	e30108f0 	movw	r0, #6384	; 0x18f0
    b234:	e3401001 	movt	r1, #1
    b238:	e3400001 	movt	r0, #1
    b23c:	eb000787 	bl	d060 <assertion_failed>
    b240:	e5940000 	ldr	r0, [r4]
    b244:	e8bd8010 	pop	{r4, pc}

0000b248 <memset>:
    b248:	e3520000 	cmp	r2, #0
    b24c:	012fff1e 	bxeq	lr
    b250:	e6af1071 	sxtb	r1, r1
    b254:	e0802002 	add	r2, r0, r2
    b258:	e1a03000 	mov	r3, r0
    b25c:	e4c31001 	strb	r1, [r3], #1
    b260:	e1530002 	cmp	r3, r2
    b264:	1afffffc 	bne	b25c <memset+0x14>
    b268:	e12fff1e 	bx	lr

0000b26c <memcmp>:
    b26c:	e3520000 	cmp	r2, #0
    b270:	0a00000e 	beq	b2b0 <memcmp+0x44>
    b274:	e5d0c000 	ldrb	ip, [r0]
    b278:	e5d13000 	ldrb	r3, [r1]
    b27c:	e15c0003 	cmp	ip, r3
    b280:	ca00000c 	bgt	b2b8 <memcmp+0x4c>
    b284:	ba00000d 	blt	b2c0 <memcmp+0x54>
    b288:	e0812002 	add	r2, r1, r2
    b28c:	e2811001 	add	r1, r1, #1
    b290:	ea000004 	b	b2a8 <memcmp+0x3c>
    b294:	e5f0c001 	ldrb	ip, [r0, #1]!
    b298:	e4d13001 	ldrb	r3, [r1], #1
    b29c:	e15c0003 	cmp	ip, r3
    b2a0:	ca000004 	bgt	b2b8 <memcmp+0x4c>
    b2a4:	ba000005 	blt	b2c0 <memcmp+0x54>
    b2a8:	e1510002 	cmp	r1, r2
    b2ac:	1afffff8 	bne	b294 <memcmp+0x28>
    b2b0:	e3a00000 	mov	r0, #0
    b2b4:	e12fff1e 	bx	lr
    b2b8:	e3a00001 	mov	r0, #1
    b2bc:	e12fff1e 	bx	lr
    b2c0:	e3e00000 	mvn	r0, #0
    b2c4:	e12fff1e 	bx	lr

0000b2c8 <strlen>:
    b2c8:	e1d010d0 	ldrsb	r1, [r0]
    b2cc:	e2803001 	add	r3, r0, #1
    b2d0:	e3510000 	cmp	r1, #0
    b2d4:	0a000003 	beq	b2e8 <strlen+0x20>
    b2d8:	e0431000 	sub	r1, r3, r0
    b2dc:	e0d320d1 	ldrsb	r2, [r3], #1
    b2e0:	e3520000 	cmp	r2, #0
    b2e4:	1afffffb 	bne	b2d8 <strlen+0x10>
    b2e8:	e1a00001 	mov	r0, r1
    b2ec:	e12fff1e 	bx	lr

0000b2f0 <strcmp>:
    b2f0:	e1d030d0 	ldrsb	r3, [r0]
    b2f4:	e1d120d0 	ldrsb	r2, [r1]
    b2f8:	e3530000 	cmp	r3, #0
    b2fc:	1a000007 	bne	b320 <strcmp+0x30>
    b300:	ea000008 	b	b328 <strcmp+0x38>
    b304:	e1530002 	cmp	r3, r2
    b308:	ca00000b 	bgt	b33c <strcmp+0x4c>
    b30c:	ba00000c 	blt	b344 <strcmp+0x54>
    b310:	e1f030d1 	ldrsb	r3, [r0, #1]!
    b314:	e3530000 	cmp	r3, #0
    b318:	0a00000b 	beq	b34c <strcmp+0x5c>
    b31c:	e1f120d1 	ldrsb	r2, [r1, #1]!
    b320:	e3520000 	cmp	r2, #0
    b324:	1afffff6 	bne	b304 <strcmp+0x14>
    b328:	e1530002 	cmp	r3, r2
    b32c:	ca000002 	bgt	b33c <strcmp+0x4c>
    b330:	b3e00000 	mvnlt	r0, #0
    b334:	a3a00000 	movge	r0, #0
    b338:	e12fff1e 	bx	lr
    b33c:	e3a00001 	mov	r0, #1
    b340:	e12fff1e 	bx	lr
    b344:	e3e00000 	mvn	r0, #0
    b348:	e12fff1e 	bx	lr
    b34c:	e1d120d1 	ldrsb	r2, [r1, #1]
    b350:	e1530002 	cmp	r3, r2
    b354:	dafffff5 	ble	b330 <strcmp+0x40>
    b358:	eafffff7 	b	b33c <strcmp+0x4c>

0000b35c <strcpy>:
    b35c:	e1d130d0 	ldrsb	r3, [r1]
    b360:	e1a02000 	mov	r2, r0
    b364:	e3530000 	cmp	r3, #0
    b368:	0a000003 	beq	b37c <strcpy+0x20>
    b36c:	e4c23001 	strb	r3, [r2], #1
    b370:	e1f130d1 	ldrsb	r3, [r1, #1]!
    b374:	e3530000 	cmp	r3, #0
    b378:	1afffffb 	bne	b36c <strcpy+0x10>
    b37c:	e3a03000 	mov	r3, #0
    b380:	e5c23000 	strb	r3, [r2]
    b384:	e12fff1e 	bx	lr

0000b388 <strncpy>:
    b388:	e3520000 	cmp	r2, #0
    b38c:	012fff1e 	bxeq	lr
    b390:	e1d1c0d0 	ldrsb	ip, [r1]
    b394:	e35c0000 	cmp	ip, #0
    b398:	0a000009 	beq	b3c4 <strncpy+0x3c>
    b39c:	e0802002 	add	r2, r0, r2
    b3a0:	e1a03000 	mov	r3, r0
    b3a4:	ea000002 	b	b3b4 <strncpy+0x2c>
    b3a8:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    b3ac:	e35c0000 	cmp	ip, #0
    b3b0:	0a000004 	beq	b3c8 <strncpy+0x40>
    b3b4:	e4c3c001 	strb	ip, [r3], #1
    b3b8:	e1530002 	cmp	r3, r2
    b3bc:	1afffff9 	bne	b3a8 <strncpy+0x20>
    b3c0:	e12fff1e 	bx	lr
    b3c4:	e1a03000 	mov	r3, r0
    b3c8:	e3a02000 	mov	r2, #0
    b3cc:	e5c32000 	strb	r2, [r3]
    b3d0:	e12fff1e 	bx	lr

0000b3d4 <strcat>:
    b3d4:	e1d030d0 	ldrsb	r3, [r0]
    b3d8:	e3530000 	cmp	r3, #0
    b3dc:	e1a03000 	mov	r3, r0
    b3e0:	0a000002 	beq	b3f0 <strcat+0x1c>
    b3e4:	e1f320d1 	ldrsb	r2, [r3, #1]!
    b3e8:	e3520000 	cmp	r2, #0
    b3ec:	1afffffc 	bne	b3e4 <strcat+0x10>
    b3f0:	e1d120d0 	ldrsb	r2, [r1]
    b3f4:	e3520000 	cmp	r2, #0
    b3f8:	0a000003 	beq	b40c <strcat+0x38>
    b3fc:	e4c32001 	strb	r2, [r3], #1
    b400:	e1f120d1 	ldrsb	r2, [r1, #1]!
    b404:	e3520000 	cmp	r2, #0
    b408:	1afffffb 	bne	b3fc <strcat+0x28>
    b40c:	e3a02000 	mov	r2, #0
    b410:	e5c32000 	strb	r2, [r3]
    b414:	e12fff1e 	bx	lr

0000b418 <strchr>:
    b418:	e1d020d0 	ldrsb	r2, [r0]
    b41c:	e3520000 	cmp	r2, #0
    b420:	0a000009 	beq	b44c <strchr+0x34>
    b424:	e1510002 	cmp	r1, r2
    b428:	1a000002 	bne	b438 <strchr+0x20>
    b42c:	ea000008 	b	b454 <strchr+0x3c>
    b430:	e1530001 	cmp	r3, r1
    b434:	012fff1e 	bxeq	lr
    b438:	e1f030d1 	ldrsb	r3, [r0, #1]!
    b43c:	e3530000 	cmp	r3, #0
    b440:	1afffffa 	bne	b430 <strchr+0x18>
    b444:	e1a00003 	mov	r0, r3
    b448:	e12fff1e 	bx	lr
    b44c:	e1a00002 	mov	r0, r2
    b450:	e12fff1e 	bx	lr
    b454:	e12fff1e 	bx	lr

0000b458 <strtok_r>:
    b458:	e3500000 	cmp	r0, #0
    b45c:	0a00002c 	beq	b514 <strtok_r+0xbc>
    b460:	e92d4030 	push	{r4, r5, lr}
    b464:	e1d0e0d0 	ldrsb	lr, [r0]
    b468:	e35e0000 	cmp	lr, #0
    b46c:	11d140d0 	ldrsbne	r4, [r1]
    b470:	0a000024 	beq	b508 <strtok_r+0xb0>
    b474:	e3540000 	cmp	r4, #0
    b478:	0a000008 	beq	b4a0 <strtok_r+0x48>
    b47c:	e15e0004 	cmp	lr, r4
    b480:	0a000019 	beq	b4ec <strtok_r+0x94>
    b484:	e1a0c001 	mov	ip, r1
    b488:	ea000001 	b	b494 <strtok_r+0x3c>
    b48c:	e15e0003 	cmp	lr, r3
    b490:	0a000015 	beq	b4ec <strtok_r+0x94>
    b494:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    b498:	e3530000 	cmp	r3, #0
    b49c:	1afffffa 	bne	b48c <strtok_r+0x34>
    b4a0:	e35e0000 	cmp	lr, #0
    b4a4:	0a000017 	beq	b508 <strtok_r+0xb0>
    b4a8:	e1a05000 	mov	r5, r0
    b4ac:	e3540000 	cmp	r4, #0
    b4b0:	0a000008 	beq	b4d8 <strtok_r+0x80>
    b4b4:	e15e0004 	cmp	lr, r4
    b4b8:	0a00000d 	beq	b4f4 <strtok_r+0x9c>
    b4bc:	e1a0c001 	mov	ip, r1
    b4c0:	ea000001 	b	b4cc <strtok_r+0x74>
    b4c4:	e15e0003 	cmp	lr, r3
    b4c8:	0a000009 	beq	b4f4 <strtok_r+0x9c>
    b4cc:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    b4d0:	e3530000 	cmp	r3, #0
    b4d4:	1afffffa 	bne	b4c4 <strtok_r+0x6c>
    b4d8:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    b4dc:	e35e0000 	cmp	lr, #0
    b4e0:	1afffff1 	bne	b4ac <strtok_r+0x54>
    b4e4:	e5825000 	str	r5, [r2]
    b4e8:	e8bd8030 	pop	{r4, r5, pc}
    b4ec:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    b4f0:	eaffffdf 	b	b474 <strtok_r+0x1c>
    b4f4:	e3a03000 	mov	r3, #0
    b4f8:	e2855001 	add	r5, r5, #1
    b4fc:	e5453001 	strb	r3, [r5, #-1]
    b500:	e5825000 	str	r5, [r2]
    b504:	e8bd8030 	pop	{r4, r5, pc}
    b508:	e3a00000 	mov	r0, #0
    b50c:	e5820000 	str	r0, [r2]
    b510:	e8bd8030 	pop	{r4, r5, pc}
    b514:	e5920000 	ldr	r0, [r2]
    b518:	e3500000 	cmp	r0, #0
    b51c:	1affffcf 	bne	b460 <strtok_r+0x8>
    b520:	e12fff1e 	bx	lr

0000b524 <strtoul>:
    b524:	e3510000 	cmp	r1, #0
    b528:	e92d4070 	push	{r4, r5, r6, lr}
    b52c:	e2425002 	sub	r5, r2, #2
    b530:	15810000 	strne	r0, [r1]
    b534:	e3520000 	cmp	r2, #0
    b538:	13550022 	cmpne	r5, #34	; 0x22
    b53c:	e3c2e010 	bic	lr, r2, #16
    b540:	83a05001 	movhi	r5, #1
    b544:	93a05000 	movls	r5, #0
    b548:	8a000036 	bhi	b628 <strtoul+0x104>
    b54c:	e1d0c0d0 	ldrsb	ip, [r0]
    b550:	e1a04000 	mov	r4, r0
    b554:	e2800001 	add	r0, r0, #1
    b558:	e24c3009 	sub	r3, ip, #9
    b55c:	e35c0020 	cmp	ip, #32
    b560:	e6ef3073 	uxtb	r3, r3
    b564:	0afffff8 	beq	b54c <strtoul+0x28>
    b568:	e3530004 	cmp	r3, #4
    b56c:	9afffff6 	bls	b54c <strtoul+0x28>
    b570:	e35c002b 	cmp	ip, #43	; 0x2b
    b574:	0a00002d 	beq	b630 <strtoul+0x10c>
    b578:	e35c002d 	cmp	ip, #45	; 0x2d
    b57c:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
    b580:	03a06001 	moveq	r6, #1
    b584:	01a04000 	moveq	r4, r0
    b588:	13a06000 	movne	r6, #0
    b58c:	e35c0030 	cmp	ip, #48	; 0x30
    b590:	0a00002b 	beq	b644 <strtoul+0x120>
    b594:	e3520000 	cmp	r2, #0
    b598:	03a0200a 	moveq	r2, #10
    b59c:	e35c002f 	cmp	ip, #47	; 0x2f
    b5a0:	e1a0300c 	mov	r3, ip
    b5a4:	da00001c 	ble	b61c <strtoul+0xf8>
    b5a8:	e3a05001 	mov	r5, #1
    b5ac:	e3a0e000 	mov	lr, #0
    b5b0:	ea000007 	b	b5d4 <strtoul+0xb0>
    b5b4:	e150000e 	cmp	r0, lr
    b5b8:	e3a05000 	mov	r5, #0
    b5bc:	e1a0e000 	mov	lr, r0
    b5c0:	3a000028 	bcc	b668 <strtoul+0x144>
    b5c4:	e1f430d1 	ldrsb	r3, [r4, #1]!
    b5c8:	e353002f 	cmp	r3, #47	; 0x2f
    b5cc:	e1a0c003 	mov	ip, r3
    b5d0:	da000029 	ble	b67c <strtoul+0x158>
    b5d4:	e24cc061 	sub	ip, ip, #97	; 0x61
    b5d8:	e35c0019 	cmp	ip, #25
    b5dc:	92433020 	subls	r3, r3, #32
    b5e0:	e3530040 	cmp	r3, #64	; 0x40
    b5e4:	c2433007 	subgt	r3, r3, #7
    b5e8:	e2433030 	sub	r3, r3, #48	; 0x30
    b5ec:	e1520003 	cmp	r2, r3
    b5f0:	e020329e 	mla	r0, lr, r2, r3
    b5f4:	caffffee 	bgt	b5b4 <strtoul+0x90>
    b5f8:	e2255001 	eor	r5, r5, #1
    b5fc:	e1a0000e 	mov	r0, lr
    b600:	e3510000 	cmp	r1, #0
    b604:	e0055006 	and	r5, r5, r6
    b608:	0a000000 	beq	b610 <strtoul+0xec>
    b60c:	e5814000 	str	r4, [r1]
    b610:	e3550000 	cmp	r5, #0
    b614:	12600000 	rsbne	r0, r0, #0
    b618:	e8bd8070 	pop	{r4, r5, r6, pc}
    b61c:	e3510000 	cmp	r1, #0
    b620:	13a00000 	movne	r0, #0
    b624:	1afffff8 	bne	b60c <strtoul+0xe8>
    b628:	e3a00000 	mov	r0, #0
    b62c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b630:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    b634:	e3a06000 	mov	r6, #0
    b638:	e1a04000 	mov	r4, r0
    b63c:	e35c0030 	cmp	ip, #48	; 0x30
    b640:	1affffd3 	bne	b594 <strtoul+0x70>
    b644:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    b648:	e2840001 	add	r0, r4, #1
    b64c:	e3cc3020 	bic	r3, ip, #32
    b650:	e3530058 	cmp	r3, #88	; 0x58
    b654:	0a00000a 	beq	b684 <strtoul+0x160>
    b658:	e3520000 	cmp	r2, #0
    b65c:	e1a04000 	mov	r4, r0
    b660:	03a02008 	moveq	r2, #8
    b664:	eaffffcc 	b	b59c <strtoul+0x78>
    b668:	e1510005 	cmp	r1, r5
    b66c:	0a00000a 	beq	b69c <strtoul+0x178>
    b670:	e5814000 	str	r4, [r1]
    b674:	e3e00000 	mvn	r0, #0
    b678:	e8bd8070 	pop	{r4, r5, r6, pc}
    b67c:	e3a05001 	mov	r5, #1
    b680:	eaffffde 	b	b600 <strtoul+0xdc>
    b684:	e35e0000 	cmp	lr, #0
    b688:	1affffe6 	bne	b628 <strtoul+0x104>
    b68c:	e1d4c0d2 	ldrsb	ip, [r4, #2]
    b690:	e3a02010 	mov	r2, #16
    b694:	e2844002 	add	r4, r4, #2
    b698:	eaffffbf 	b	b59c <strtoul+0x78>
    b69c:	e3e00000 	mvn	r0, #0
    b6a0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b6a4 <char2int>:
    b6a4:	e12fff1e 	bx	lr

0000b6a8 <memcpy>:
    b6a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    b6ac:	e352007f 	cmp	r2, #127	; 0x7f
    b6b0:	9a00000b 	bls	b6e4 <memcpy+0x3c>
    b6b4:	e3110003 	tst	r1, #3
    b6b8:	1a000009 	bne	b6e4 <memcpy+0x3c>
    b6bc:	e3100003 	tst	r0, #3
    b6c0:	1a000007 	bne	b6e4 <memcpy+0x3c>
    b6c4:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    b6c8:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    b6cc:	e2422020 	sub	r2, r2, #32
    b6d0:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    b6d4:	f5d1f040 	pld	[r1, #64]	; 0x40
    b6d8:	e352001f 	cmp	r2, #31
    b6dc:	8afffff9 	bhi	b6c8 <memcpy+0x20>
    b6e0:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    b6e4:	e3520000 	cmp	r2, #0
    b6e8:	0a000003 	beq	b6fc <memcpy+0x54>
    b6ec:	e4d13001 	ldrb	r3, [r1], #1
    b6f0:	e2522001 	subs	r2, r2, #1
    b6f4:	e4c03001 	strb	r3, [r0], #1
    b6f8:	1afffffb 	bne	b6ec <memcpy+0x44>
    b6fc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    b700:	e12fff1e 	bx	lr

0000b704 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    b704:	e1a01000 	mov	r1, r0
    b708:	e3a0c00a 	mov	ip, #10
    b70c:	e3a00000 	mov	r0, #0
    b710:	ea000007 	b	b734 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x30>
    b714:	e3720001 	cmn	r2, #1
    b718:	13a03000 	movne	r3, #0
    b71c:	03a03001 	moveq	r3, #1
    b720:	e1500002 	cmp	r0, r2
    b724:	83833001 	orrhi	r3, r3, #1
    b728:	e1a00002 	mov	r0, r2
    b72c:	e3530000 	cmp	r3, #0
    b730:	1a000007 	bne	b754 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x50>
    b734:	e0d120d1 	ldrsb	r2, [r1], #1
    b738:	e2423030 	sub	r3, r2, #48	; 0x30
    b73c:	e3520000 	cmp	r2, #0
    b740:	e022309c 	mla	r2, ip, r0, r3
    b744:	e6ef3073 	uxtb	r3, r3
    b748:	012fff1e 	bxeq	lr
    b74c:	e3530009 	cmp	r3, #9
    b750:	9affffef 	bls	b714 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x10>
    b754:	e3e00000 	mvn	r0, #0
    b758:	e12fff1e 	bx	lr

0000b75c <CKernelOptions::~CKernelOptions()>:
    b75c:	e3033904 	movw	r3, #14596	; 0x3904
    b760:	e3403001 	movt	r3, #1
    b764:	e3a02000 	mov	r2, #0
    b768:	e5832000 	str	r2, [r3]
    b76c:	e12fff1e 	bx	lr

0000b770 <CKernelOptions::GetWidth() const>:
    b770:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    b774:	e12fff1e 	bx	lr

0000b778 <CKernelOptions::GetHeight() const>:
    b778:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    b77c:	e12fff1e 	bx	lr

0000b780 <CKernelOptions::GetLogDevice() const>:
    b780:	e2800e81 	add	r0, r0, #2064	; 0x810
    b784:	e2800008 	add	r0, r0, #8
    b788:	e12fff1e 	bx	lr

0000b78c <CKernelOptions::GetLogLevel() const>:
    b78c:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    b790:	e12fff1e 	bx	lr

0000b794 <CKernelOptions::GetKeyMap() const>:
    b794:	e2800e83 	add	r0, r0, #2096	; 0x830
    b798:	e12fff1e 	bx	lr

0000b79c <CKernelOptions::GetUSBPowerDelay() const>:
    b79c:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    b7a0:	e12fff1e 	bx	lr

0000b7a4 <CKernelOptions::GetCPUSpeed() const>:
    b7a4:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    b7a8:	e12fff1e 	bx	lr

0000b7ac <CKernelOptions::GetSoCMaxTemp() const>:
    b7ac:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    b7b0:	e12fff1e 	bx	lr

0000b7b4 <CKernelOptions::Get()>:
    b7b4:	e3033904 	movw	r3, #14596	; 0x3904
    b7b8:	e3403001 	movt	r3, #1
    b7bc:	e5930000 	ldr	r0, [r3]
    b7c0:	e12fff1e 	bx	lr

0000b7c4 <CKernelOptions::GetToken()>:
    b7c4:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    b7c8:	e1d320d0 	ldrsb	r2, [r3]
    b7cc:	e3520000 	cmp	r2, #0
    b7d0:	1a000005 	bne	b7ec <CKernelOptions::GetToken()+0x28>
    b7d4:	ea000016 	b	b834 <CKernelOptions::GetToken()+0x70>
    b7d8:	e2833001 	add	r3, r3, #1
    b7dc:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    b7e0:	e1d320d0 	ldrsb	r2, [r3]
    b7e4:	e3520000 	cmp	r2, #0
    b7e8:	0a000011 	beq	b834 <CKernelOptions::GetToken()+0x70>
    b7ec:	e3520020 	cmp	r2, #32
    b7f0:	0afffff8 	beq	b7d8 <CKernelOptions::GetToken()+0x14>
    b7f4:	e1a02003 	mov	r2, r3
    b7f8:	ea000000 	b	b800 <CKernelOptions::GetToken()+0x3c>
    b7fc:	e1a02001 	mov	r2, r1
    b800:	e2821001 	add	r1, r2, #1
    b804:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    b808:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    b80c:	e35c0000 	cmp	ip, #0
    b810:	0a000008 	beq	b838 <CKernelOptions::GetToken()+0x74>
    b814:	e35c0020 	cmp	ip, #32
    b818:	1afffff7 	bne	b7fc <CKernelOptions::GetToken()+0x38>
    b81c:	e2822002 	add	r2, r2, #2
    b820:	e3a0c000 	mov	ip, #0
    b824:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    b828:	e1a00003 	mov	r0, r3
    b82c:	e5c1c000 	strb	ip, [r1]
    b830:	e12fff1e 	bx	lr
    b834:	e3a03000 	mov	r3, #0
    b838:	e1a00003 	mov	r0, r3
    b83c:	e12fff1e 	bx	lr

0000b840 <CKernelOptions::CKernelOptions()>:
    b840:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b844:	e2807e81 	add	r7, r0, #2064	; 0x810
    b848:	e2877008 	add	r7, r7, #8
    b84c:	e1a05000 	mov	r5, r0
    b850:	e2809e83 	add	r9, r0, #2096	; 0x830
    b854:	e24dd01c 	sub	sp, sp, #28
    b858:	e3a04000 	mov	r4, #0
    b85c:	e3a02004 	mov	r2, #4
    b860:	e3a0303c 	mov	r3, #60	; 0x3c
    b864:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    b868:	e3011f3c 	movw	r1, #7996	; 0x1f3c
    b86c:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    b870:	e3401001 	movt	r1, #1
    b874:	e1a00007 	mov	r0, r7
    b878:	e5854810 	str	r4, [r5, #2064]	; 0x810
    b87c:	e5854814 	str	r4, [r5, #2068]	; 0x814
    b880:	e5854834 	str	r4, [r5, #2100]	; 0x834
    b884:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    b888:	ebfffeb3 	bl	b35c <strcpy>
    b88c:	e1a00009 	mov	r0, r9
    b890:	e3011f44 	movw	r1, #8004	; 0x1f44
    b894:	e3401001 	movt	r1, #1
    b898:	ebfffeaf 	bl	b35c <strcpy>
    b89c:	e3033904 	movw	r3, #14596	; 0x3904
    b8a0:	e3403001 	movt	r3, #1
    b8a4:	e28d0010 	add	r0, sp, #16
    b8a8:	e5835000 	str	r5, [r3]
    b8ac:	ebfff6bb 	bl	93a0 <CBcmPropertyTags::CBcmPropertyTags()>
    b8b0:	e58d4000 	str	r4, [sp]
    b8b4:	e1a02005 	mov	r2, r5
    b8b8:	e28d0010 	add	r0, sp, #16
    b8bc:	e3a01001 	mov	r1, #1
    b8c0:	e300380c 	movw	r3, #2060	; 0x80c
    b8c4:	e3401005 	movt	r1, #5
    b8c8:	ebfff6fc 	bl	94c0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b8cc:	e1500004 	cmp	r0, r4
    b8d0:	0a000040 	beq	b9d8 <CKernelOptions::CKernelOptions()+0x198>
    b8d4:	e5953008 	ldr	r3, [r5, #8]
    b8d8:	e3530b02 	cmp	r3, #2048	; 0x800
    b8dc:	2a00003d 	bcs	b9d8 <CKernelOptions::CKernelOptions()+0x198>
    b8e0:	e0853003 	add	r3, r5, r3
    b8e4:	e3016f98 	movw	r6, #8088	; 0x1f98
    b8e8:	e3018f48 	movw	r8, #8008	; 0x1f48
    b8ec:	e301af50 	movw	sl, #8016	; 0x1f50
    b8f0:	e3406001 	movt	r6, #1
    b8f4:	e3408001 	movt	r8, #1
    b8f8:	e340a001 	movt	sl, #1
    b8fc:	e5c3400c 	strb	r4, [r3, #12]
    b900:	e285300c 	add	r3, r5, #12
    b904:	e585380c 	str	r3, [r5, #2060]	; 0x80c
    b908:	e1a00005 	mov	r0, r5
    b90c:	ebffffac 	bl	b7c4 <CKernelOptions::GetToken()>
    b910:	e250b000 	subs	fp, r0, #0
    b914:	0a00002f 	beq	b9d8 <CKernelOptions::CKernelOptions()+0x198>
    b918:	e1db30d0 	ldrsb	r3, [fp]
    b91c:	e3530000 	cmp	r3, #0
    b920:	0a000008 	beq	b948 <CKernelOptions::CKernelOptions()+0x108>
    b924:	e353003d 	cmp	r3, #61	; 0x3d
    b928:	e1a0400b 	mov	r4, fp
    b92c:	1a000002 	bne	b93c <CKernelOptions::CKernelOptions()+0xfc>
    b930:	ea00002d 	b	b9ec <CKernelOptions::CKernelOptions()+0x1ac>
    b934:	e353003d 	cmp	r3, #61	; 0x3d
    b938:	0a00002b 	beq	b9ec <CKernelOptions::CKernelOptions()+0x1ac>
    b93c:	e1f430d1 	ldrsb	r3, [r4, #1]!
    b940:	e3530000 	cmp	r3, #0
    b944:	1afffffa 	bne	b934 <CKernelOptions::CKernelOptions()+0xf4>
    b948:	e1a01006 	mov	r1, r6
    b94c:	e1a0000b 	mov	r0, fp
    b950:	ebfffe66 	bl	b2f0 <strcmp>
    b954:	e3500000 	cmp	r0, #0
    b958:	0affffea 	beq	b908 <CKernelOptions::CKernelOptions()+0xc8>
    b95c:	e1a01008 	mov	r1, r8
    b960:	e1a0000b 	mov	r0, fp
    b964:	ebfffe61 	bl	b2f0 <strcmp>
    b968:	e3500000 	cmp	r0, #0
    b96c:	13a03000 	movne	r3, #0
    b970:	0affffe4 	beq	b908 <CKernelOptions::CKernelOptions()+0xc8>
    b974:	e1a0100a 	mov	r1, sl
    b978:	e1a0000b 	mov	r0, fp
    b97c:	e58d300c 	str	r3, [sp, #12]
    b980:	ebfffe5a 	bl	b2f0 <strcmp>
    b984:	e59d300c 	ldr	r3, [sp, #12]
    b988:	e2504000 	subs	r4, r0, #0
    b98c:	0a00002a 	beq	ba3c <CKernelOptions::CKernelOptions()+0x1fc>
    b990:	e3011f58 	movw	r1, #8024	; 0x1f58
    b994:	e1a0000b 	mov	r0, fp
    b998:	e3401001 	movt	r1, #1
    b99c:	e58d300c 	str	r3, [sp, #12]
    b9a0:	ebfffe52 	bl	b2f0 <strcmp>
    b9a4:	e59d300c 	ldr	r3, [sp, #12]
    b9a8:	e3500000 	cmp	r0, #0
    b9ac:	1a000028 	bne	ba54 <CKernelOptions::CKernelOptions()+0x214>
    b9b0:	e3530000 	cmp	r3, #0
    b9b4:	0affffd3 	beq	b908 <CKernelOptions::CKernelOptions()+0xc8>
    b9b8:	e1d320d0 	ldrsb	r2, [r3]
    b9bc:	e3520000 	cmp	r2, #0
    b9c0:	0affffd0 	beq	b908 <CKernelOptions::CKernelOptions()+0xc8>
    b9c4:	e1a00003 	mov	r0, r3
    b9c8:	ebffff4d 	bl	b704 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b9cc:	e3500004 	cmp	r0, #4
    b9d0:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    b9d4:	eaffffcb 	b	b908 <CKernelOptions::CKernelOptions()+0xc8>
    b9d8:	e28d0010 	add	r0, sp, #16
    b9dc:	ebfff675 	bl	93b8 <CBcmPropertyTags::~CBcmPropertyTags()>
    b9e0:	e1a00005 	mov	r0, r5
    b9e4:	e28dd01c 	add	sp, sp, #28
    b9e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9ec:	e3a03000 	mov	r3, #0
    b9f0:	e1a01006 	mov	r1, r6
    b9f4:	e5c43000 	strb	r3, [r4]
    b9f8:	e1a0000b 	mov	r0, fp
    b9fc:	ebfffe3b 	bl	b2f0 <strcmp>
    ba00:	e2843001 	add	r3, r4, #1
    ba04:	e3500000 	cmp	r0, #0
    ba08:	1a000058 	bne	bb70 <CKernelOptions::CKernelOptions()+0x330>
    ba0c:	e3530000 	cmp	r3, #0
    ba10:	0affffbc 	beq	b908 <CKernelOptions::CKernelOptions()+0xc8>
    ba14:	e1d420d1 	ldrsb	r2, [r4, #1]
    ba18:	e3520000 	cmp	r2, #0
    ba1c:	0affffb9 	beq	b908 <CKernelOptions::CKernelOptions()+0xc8>
    ba20:	e1a00003 	mov	r0, r3
    ba24:	ebffff36 	bl	b704 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    ba28:	e300353c 	movw	r3, #1340	; 0x53c
    ba2c:	e2402d0a 	sub	r2, r0, #640	; 0x280
    ba30:	e1520003 	cmp	r2, r3
    ba34:	95850810 	strls	r0, [r5, #2064]	; 0x810
    ba38:	eaffffb2 	b	b908 <CKernelOptions::CKernelOptions()+0xc8>
    ba3c:	e1a01003 	mov	r1, r3
    ba40:	e3a02013 	mov	r2, #19
    ba44:	e1a00007 	mov	r0, r7
    ba48:	ebfffe4e 	bl	b388 <strncpy>
    ba4c:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    ba50:	eaffffac 	b	b908 <CKernelOptions::CKernelOptions()+0xc8>
    ba54:	e3011f64 	movw	r1, #8036	; 0x1f64
    ba58:	e1a0000b 	mov	r0, fp
    ba5c:	e3401001 	movt	r1, #1
    ba60:	e58d300c 	str	r3, [sp, #12]
    ba64:	ebfffe21 	bl	b2f0 <strcmp>
    ba68:	e59d300c 	ldr	r3, [sp, #12]
    ba6c:	e2504000 	subs	r4, r0, #0
    ba70:	1a000005 	bne	ba8c <CKernelOptions::CKernelOptions()+0x24c>
    ba74:	e1a01003 	mov	r1, r3
    ba78:	e3a02002 	mov	r2, #2
    ba7c:	e1a00009 	mov	r0, r9
    ba80:	ebfffe40 	bl	b388 <strncpy>
    ba84:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    ba88:	eaffff9e 	b	b908 <CKernelOptions::CKernelOptions()+0xc8>
    ba8c:	e3011f6c 	movw	r1, #8044	; 0x1f6c
    ba90:	e1a0000b 	mov	r0, fp
    ba94:	e3401001 	movt	r1, #1
    ba98:	e58d300c 	str	r3, [sp, #12]
    ba9c:	ebfffe13 	bl	b2f0 <strcmp>
    baa0:	e59d300c 	ldr	r3, [sp, #12]
    baa4:	e3500000 	cmp	r0, #0
    baa8:	1a00000b 	bne	badc <CKernelOptions::CKernelOptions()+0x29c>
    baac:	e3530000 	cmp	r3, #0
    bab0:	0affff94 	beq	b908 <CKernelOptions::CKernelOptions()+0xc8>
    bab4:	e1d320d0 	ldrsb	r2, [r3]
    bab8:	e3520000 	cmp	r2, #0
    babc:	0affff91 	beq	b908 <CKernelOptions::CKernelOptions()+0xc8>
    bac0:	e1a00003 	mov	r0, r3
    bac4:	ebffff0e 	bl	b704 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bac8:	e3013e78 	movw	r3, #7800	; 0x1e78
    bacc:	e24020c8 	sub	r2, r0, #200	; 0xc8
    bad0:	e1520003 	cmp	r2, r3
    bad4:	95850834 	strls	r0, [r5, #2100]	; 0x834
    bad8:	eaffff8a 	b	b908 <CKernelOptions::CKernelOptions()+0xc8>
    badc:	e3011f7c 	movw	r1, #8060	; 0x1f7c
    bae0:	e1a0000b 	mov	r0, fp
    bae4:	e3401001 	movt	r1, #1
    bae8:	e58d300c 	str	r3, [sp, #12]
    baec:	ebfffdff 	bl	b2f0 <strcmp>
    baf0:	e59d300c 	ldr	r3, [sp, #12]
    baf4:	e3500000 	cmp	r0, #0
    baf8:	1a000007 	bne	bb1c <CKernelOptions::CKernelOptions()+0x2dc>
    bafc:	e1a00003 	mov	r0, r3
    bb00:	e3011f84 	movw	r1, #8068	; 0x1f84
    bb04:	e3401001 	movt	r1, #1
    bb08:	ebfffdf8 	bl	b2f0 <strcmp>
    bb0c:	e3500000 	cmp	r0, #0
    bb10:	03a03001 	moveq	r3, #1
    bb14:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    bb18:	eaffff7a 	b	b908 <CKernelOptions::CKernelOptions()+0xc8>
    bb1c:	e1a0000b 	mov	r0, fp
    bb20:	e3011f8c 	movw	r1, #8076	; 0x1f8c
    bb24:	e3401001 	movt	r1, #1
    bb28:	e58d300c 	str	r3, [sp, #12]
    bb2c:	ebfffdef 	bl	b2f0 <strcmp>
    bb30:	e59d300c 	ldr	r3, [sp, #12]
    bb34:	e2902000 	adds	r2, r0, #0
    bb38:	13a02001 	movne	r2, #1
    bb3c:	e3530000 	cmp	r3, #0
    bb40:	03822001 	orreq	r2, r2, #1
    bb44:	e3520000 	cmp	r2, #0
    bb48:	1affff6e 	bne	b908 <CKernelOptions::CKernelOptions()+0xc8>
    bb4c:	e1d320d0 	ldrsb	r2, [r3]
    bb50:	e3520000 	cmp	r2, #0
    bb54:	0affff6b 	beq	b908 <CKernelOptions::CKernelOptions()+0xc8>
    bb58:	e1a00003 	mov	r0, r3
    bb5c:	ebfffee8 	bl	b704 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bb60:	e2403028 	sub	r3, r0, #40	; 0x28
    bb64:	e3530026 	cmp	r3, #38	; 0x26
    bb68:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    bb6c:	eaffff65 	b	b908 <CKernelOptions::CKernelOptions()+0xc8>
    bb70:	e1a01008 	mov	r1, r8
    bb74:	e1a0000b 	mov	r0, fp
    bb78:	e58d300c 	str	r3, [sp, #12]
    bb7c:	ebfffddb 	bl	b2f0 <strcmp>
    bb80:	e59d300c 	ldr	r3, [sp, #12]
    bb84:	e3500000 	cmp	r0, #0
    bb88:	1affff79 	bne	b974 <CKernelOptions::CKernelOptions()+0x134>
    bb8c:	e3530000 	cmp	r3, #0
    bb90:	0affff5c 	beq	b908 <CKernelOptions::CKernelOptions()+0xc8>
    bb94:	e1d420d1 	ldrsb	r2, [r4, #1]
    bb98:	e3520000 	cmp	r2, #0
    bb9c:	0affff59 	beq	b908 <CKernelOptions::CKernelOptions()+0xc8>
    bba0:	e1a00003 	mov	r0, r3
    bba4:	ebfffed6 	bl	b704 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    bba8:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    bbac:	e3530f96 	cmp	r3, #600	; 0x258
    bbb0:	95850814 	strls	r0, [r5, #2068]	; 0x814
    bbb4:	eaffff53 	b	b908 <CKernelOptions::CKernelOptions()+0xc8>

0000bbb8 <CKernelOptions::GetOptionValue(char*)>:
    bbb8:	e1d030d0 	ldrsb	r3, [r0]
    bbbc:	e3530000 	cmp	r3, #0
    bbc0:	1a000003 	bne	bbd4 <CKernelOptions::GetOptionValue(char*)+0x1c>
    bbc4:	ea000007 	b	bbe8 <CKernelOptions::GetOptionValue(char*)+0x30>
    bbc8:	e1f030d1 	ldrsb	r3, [r0, #1]!
    bbcc:	e3530000 	cmp	r3, #0
    bbd0:	0a000004 	beq	bbe8 <CKernelOptions::GetOptionValue(char*)+0x30>
    bbd4:	e353003d 	cmp	r3, #61	; 0x3d
    bbd8:	1afffffa 	bne	bbc8 <CKernelOptions::GetOptionValue(char*)+0x10>
    bbdc:	e2803001 	add	r3, r0, #1
    bbe0:	e3a02000 	mov	r2, #0
    bbe4:	e5c02000 	strb	r2, [r0]
    bbe8:	e1a00003 	mov	r0, r3
    bbec:	e12fff1e 	bx	lr

0000bbf0 <CKernelOptions::GetDecimal(char*)>:
    bbf0:	e2503000 	subs	r3, r0, #0
    bbf4:	0a000002 	beq	bc04 <CKernelOptions::GetDecimal(char*)+0x14>
    bbf8:	e1d330d0 	ldrsb	r3, [r3]
    bbfc:	e3530000 	cmp	r3, #0
    bc00:	1a000001 	bne	bc0c <CKernelOptions::GetDecimal(char*)+0x1c>
    bc04:	e3e00000 	mvn	r0, #0
    bc08:	e12fff1e 	bx	lr
    bc0c:	eafffebc 	b	b704 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000bc10 <CPageTable::CPageTable()>:
    bc10:	e3a01000 	mov	r1, #0
    bc14:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
    bc18:	e92d4010 	push	{r4, lr}
    bc1c:	e1a0c001 	mov	ip, r1
    bc20:	e1a04000 	mov	r4, r0
    bc24:	e1a03002 	mov	r3, r2
    bc28:	e3a0e002 	mov	lr, #2
    bc2c:	e3a00001 	mov	r0, #1
    bc30:	e8840006 	stm	r4, {r1, r2}
    bc34:	e5d32000 	ldrb	r2, [r3]
    bc38:	e35c0b01 	cmp	ip, #1024	; 0x400
    bc3c:	e5d31002 	ldrb	r1, [r3, #2]
    bc40:	e2833004 	add	r3, r3, #4
    bc44:	e7c1201e 	bfi	r2, lr, #0, #2
    bc48:	e3811001 	orr	r1, r1, #1
    bc4c:	e6ef2072 	uxtb	r2, r2
    bc50:	e20110f9 	and	r1, r1, #249	; 0xf9
    bc54:	e3822004 	orr	r2, r2, #4
    bc58:	e7c3119f 	bfc	r1, #3, #1
    bc5c:	e20220f7 	and	r2, r2, #247	; 0xf7
    bc60:	e5431002 	strb	r1, [r3, #-2]
    bc64:	e7c4221f 	bfc	r2, #4, #1
    bc68:	e5432004 	strb	r2, [r3, #-4]
    bc6c:	e15320b4 	ldrh	r2, [r3, #-4]
    bc70:	e15310b2 	ldrh	r1, [r3, #-2]
    bc74:	e7c8229f 	bfc	r2, #5, #4
    bc78:	e14320b4 	strh	r2, [r3, #-4]
    bc7c:	e7cf121c 	bfi	r1, ip, #4, #12
    bc80:	e28cc001 	add	ip, ip, #1
    bc84:	e1a02422 	lsr	r2, r2, #8
    bc88:	e14310b2 	strh	r1, [r3, #-2]
    bc8c:	e20220fd 	and	r2, r2, #253	; 0xfd
    bc90:	e7c32110 	bfi	r2, r0, #2, #2
    bc94:	e202208f 	and	r2, r2, #143	; 0x8f
    bc98:	e7c7239f 	bfc	r2, #7, #1
    bc9c:	e5432003 	strb	r2, [r3, #-3]
    bca0:	25532004 	ldrbcs	r2, [r3, #-4]
    bca4:	23822010 	orrcs	r2, r2, #16
    bca8:	25432004 	strbcs	r2, [r3, #-4]
    bcac:	e35c0a01 	cmp	ip, #4096	; 0x1000
    bcb0:	1affffdf 	bne	bc34 <CPageTable::CPageTable()+0x24>
    bcb4:	eb001238 	bl	1059c <CleanDataCache>
    bcb8:	e1a00004 	mov	r0, r4
    bcbc:	e8bd8010 	pop	{r4, pc}

0000bcc0 <CPageTable::CPageTable(unsigned int)>:
    bcc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bcc4:	e3a03001 	mov	r3, #1
    bcc8:	e5803000 	str	r3, [r0]
    bccc:	e1a04000 	mov	r4, r0
    bcd0:	e1a05001 	mov	r5, r1
    bcd4:	eb001454 	bl	10e2c <palloc>
    bcd8:	e3500000 	cmp	r0, #0
    bcdc:	e5840004 	str	r0, [r4, #4]
    bce0:	0a00003e 	beq	bde0 <CPageTable::CPageTable(unsigned int)+0x120>
    bce4:	e7eb3050 	ubfx	r3, r0, #0, #12
    bce8:	e3530000 	cmp	r3, #0
    bcec:	1a000033 	bne	bdc0 <CPageTable::CPageTable(unsigned int)+0x100>
    bcf0:	e3a02000 	mov	r2, #0
    bcf4:	e301c660 	movw	ip, #5728	; 0x1660
    bcf8:	e1a07002 	mov	r7, r2
    bcfc:	e340c001 	movt	ip, #1
    bd00:	e3a06002 	mov	r6, #2
    bd04:	e3a0e001 	mov	lr, #1
    bd08:	ea000009 	b	bd34 <CPageTable::CPageTable(unsigned int)+0x74>
    bd0c:	e6ef1073 	uxtb	r1, r3
    bd10:	e5d03002 	ldrb	r3, [r0, #2]
    bd14:	e7c31197 	bfi	r1, r7, #3, #1
    bd18:	e5c01000 	strb	r1, [r0]
    bd1c:	e3833001 	orr	r3, r3, #1
    bd20:	e5c03002 	strb	r3, [r0, #2]
    bd24:	e2822601 	add	r2, r2, #1048576	; 0x100000
    bd28:	e2800004 	add	r0, r0, #4
    bd2c:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    bd30:	0a00001f 	beq	bdb4 <CPageTable::CPageTable(unsigned int)+0xf4>
    bd34:	e5d03001 	ldrb	r3, [r0, #1]
    bd38:	e7e31a52 	ubfx	r1, r2, #20, #4
    bd3c:	e152000c 	cmp	r2, ip
    bd40:	e386800c 	orr	r8, r6, #12
    bd44:	e20330fc 	and	r3, r3, #252	; 0xfc
    bd48:	e1a01201 	lsl	r1, r1, #4
    bd4c:	e7c3311e 	bfi	r3, lr, #2, #2
    bd50:	e5c01002 	strb	r1, [r0, #2]
    bd54:	e203308f 	and	r3, r3, #143	; 0x8f
    bd58:	e1a01c22 	lsr	r1, r2, #24
    bd5c:	e7c7339f 	bfc	r3, #7, #1
    bd60:	e5c08000 	strb	r8, [r0]
    bd64:	e5c03001 	strb	r3, [r0, #1]
    bd68:	e5c01003 	strb	r1, [r0, #3]
    bd6c:	3affffec 	bcc	bd24 <CPageTable::CPageTable(unsigned int)+0x64>
    bd70:	e1520005 	cmp	r2, r5
    bd74:	e6ef3078 	uxtb	r3, r8
    bd78:	e3833010 	orr	r3, r3, #16
    bd7c:	e5c03000 	strb	r3, [r0]
    bd80:	2affffe1 	bcs	bd0c <CPageTable::CPageTable(unsigned int)+0x4c>
    bd84:	e3520501 	cmp	r2, #4194304	; 0x400000
    bd88:	1affffe5 	bne	bd24 <CPageTable::CPageTable(unsigned int)+0x64>
    bd8c:	e5d03000 	ldrb	r3, [r0]
    bd90:	e3a02605 	mov	r2, #5242880	; 0x500000
    bd94:	e5d01002 	ldrb	r1, [r0, #2]
    bd98:	e2800004 	add	r0, r0, #4
    bd9c:	e20330fb 	and	r3, r3, #251	; 0xfb
    bda0:	e7c33197 	bfi	r3, r7, #3, #1
    bda4:	e3811001 	orr	r1, r1, #1
    bda8:	e5403004 	strb	r3, [r0, #-4]
    bdac:	e5401002 	strb	r1, [r0, #-2]
    bdb0:	eaffffdf 	b	bd34 <CPageTable::CPageTable(unsigned int)+0x74>
    bdb4:	eb0011f8 	bl	1059c <CleanDataCache>
    bdb8:	e1a00004 	mov	r0, r4
    bdbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bdc0:	e3011fa0 	movw	r1, #8096	; 0x1fa0
    bdc4:	e3010fc0 	movw	r0, #8128	; 0x1fc0
    bdc8:	e3401001 	movt	r1, #1
    bdcc:	e3400001 	movt	r0, #1
    bdd0:	e3a02051 	mov	r2, #81	; 0x51
    bdd4:	eb0004a1 	bl	d060 <assertion_failed>
    bdd8:	e5940004 	ldr	r0, [r4, #4]
    bddc:	eaffffc3 	b	bcf0 <CPageTable::CPageTable(unsigned int)+0x30>
    bde0:	e3011fa0 	movw	r1, #8096	; 0x1fa0
    bde4:	e3010fb0 	movw	r0, #8112	; 0x1fb0
    bde8:	e3401001 	movt	r1, #1
    bdec:	e3400001 	movt	r0, #1
    bdf0:	e3a02050 	mov	r2, #80	; 0x50
    bdf4:	eb000499 	bl	d060 <assertion_failed>
    bdf8:	e5940004 	ldr	r0, [r4, #4]
    bdfc:	eaffffb8 	b	bce4 <CPageTable::CPageTable(unsigned int)+0x24>

0000be00 <CPageTable::~CPageTable()>:
    be00:	e5903000 	ldr	r3, [r0]
    be04:	e92d4010 	push	{r4, lr}
    be08:	e3530000 	cmp	r3, #0
    be0c:	e1a04000 	mov	r4, r0
    be10:	0a000001 	beq	be1c <CPageTable::~CPageTable()+0x1c>
    be14:	e5900004 	ldr	r0, [r0, #4]
    be18:	eb00143d 	bl	10f14 <pfree>
    be1c:	e1a00004 	mov	r0, r4
    be20:	e8bd8010 	pop	{r4, pc}

0000be24 <CPageTable::GetBaseAddress() const>:
    be24:	e5900004 	ldr	r0, [r0, #4]
    be28:	e3800059 	orr	r0, r0, #89	; 0x59
    be2c:	e12fff1e 	bx	lr

0000be30 <CScreenDevice::~CScreenDevice()>:
    be30:	e590200c 	ldr	r2, [r0, #12]
    be34:	e59f3068 	ldr	r3, [pc, #104]	; bea4 <CScreenDevice::~CScreenDevice()+0x74>
    be38:	e3520000 	cmp	r2, #0
    be3c:	e92d4070 	push	{r4, r5, r6, lr}
    be40:	e1a04000 	mov	r4, r0
    be44:	e5803000 	str	r3, [r0]
    be48:	0a000003 	beq	be5c <CScreenDevice::~CScreenDevice()+0x2c>
    be4c:	e5900018 	ldr	r0, [r0, #24]
    be50:	e3500000 	cmp	r0, #0
    be54:	0a000000 	beq	be5c <CScreenDevice::~CScreenDevice()+0x2c>
    be58:	ebfff98f 	bl	a49c <operator delete[](void*)>
    be5c:	e5945010 	ldr	r5, [r4, #16]
    be60:	e3a03000 	mov	r3, #0
    be64:	e5843018 	str	r3, [r4, #24]
    be68:	e1550003 	cmp	r5, r3
    be6c:	0a000004 	beq	be84 <CScreenDevice::~CScreenDevice()+0x54>
    be70:	e1a00005 	mov	r0, r5
    be74:	eb00151c 	bl	112ec <CBcmFrameBuffer::~CBcmFrameBuffer()>
    be78:	e1a00005 	mov	r0, r5
    be7c:	e3a01024 	mov	r1, #36	; 0x24
    be80:	ebfff986 	bl	a4a0 <operator delete(void*, unsigned int)>
    be84:	e3a03000 	mov	r3, #0
    be88:	e2840014 	add	r0, r4, #20
    be8c:	e5843010 	str	r3, [r4, #16]
    be90:	eb000499 	bl	d0fc <CCharGenerator::~CCharGenerator()>
    be94:	e1a00004 	mov	r0, r4
    be98:	eb001594 	bl	114f0 <CDevice::~CDevice()>
    be9c:	e1a00004 	mov	r0, r4
    bea0:	e8bd8070 	pop	{r4, r5, r6, pc}
    bea4:	00011fe8 	.word	0x00011fe8

0000bea8 <CScreenDevice::~CScreenDevice()>:
    bea8:	e92d4010 	push	{r4, lr}
    beac:	e1a04000 	mov	r4, r0
    beb0:	ebffffde 	bl	be30 <CScreenDevice::~CScreenDevice()>
    beb4:	e1a00004 	mov	r0, r4
    beb8:	e3a01060 	mov	r1, #96	; 0x60
    bebc:	ebfff977 	bl	a4a0 <operator delete(void*, unsigned int)>
    bec0:	e1a00004 	mov	r0, r4
    bec4:	e8bd8010 	pop	{r4, pc}

0000bec8 <CScreenDevice::InvertCursor() [clone .part.6]>:
    bec8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    becc:	e2806014 	add	r6, r0, #20
    bed0:	e1a05000 	mov	r5, r0
    bed4:	e3a08000 	mov	r8, #0
    bed8:	e1a00006 	mov	r0, r6
    bedc:	eb00048b 	bl	d110 <CCharGenerator::GetUnderline() const>
    bee0:	e1a07000 	mov	r7, r0
    bee4:	e1a00006 	mov	r0, r6
    bee8:	eb000486 	bl	d108 <CCharGenerator::GetCharHeight() const>
    beec:	e1500007 	cmp	r0, r7
    bef0:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    bef4:	e3a04000 	mov	r4, #0
    bef8:	ea000013 	b	bf4c <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    befc:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    bf00:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    bf04:	e0843003 	add	r3, r4, r3
    bf08:	e1530002 	cmp	r3, r2
    bf0c:	2a00000d 	bcs	bf48 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    bf10:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bf14:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    bf18:	e0872002 	add	r2, r7, r2
    bf1c:	e1520001 	cmp	r2, r1
    bf20:	2a000008 	bcs	bf48 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    bf24:	e5950020 	ldr	r0, [r5, #32]
    bf28:	e5951018 	ldr	r1, [r5, #24]
    bf2c:	e0233290 	mla	r3, r0, r2, r3
    bf30:	e1a03083 	lsl	r3, r3, #1
    bf34:	e19120b3 	ldrh	r2, [r1, r3]
    bf38:	e3520000 	cmp	r2, #0
    bf3c:	118180b3 	strhne	r8, [r1, r3]
    bf40:	01d524b8 	ldrheq	r2, [r5, #72]	; 0x48
    bf44:	018120b3 	strheq	r2, [r1, r3]
    bf48:	e2844001 	add	r4, r4, #1
    bf4c:	e1a00006 	mov	r0, r6
    bf50:	eb00046a 	bl	d100 <CCharGenerator::GetCharWidth() const>
    bf54:	e1500004 	cmp	r0, r4
    bf58:	8affffe7 	bhi	befc <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    bf5c:	e2877001 	add	r7, r7, #1
    bf60:	eaffffdf 	b	bee4 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000bf64 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    bf64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bf68:	e1a04000 	mov	r4, r0
    bf6c:	e1a05001 	mov	r5, r1
    bf70:	e1a07002 	mov	r7, r2
    bf74:	e1a06003 	mov	r6, r3
    bf78:	eb001568 	bl	11520 <CDevice::CDevice()>
    bf7c:	e59fc054 	ldr	ip, [pc, #84]	; bfd8 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x74>
    bf80:	e2840014 	add	r0, r4, #20
    bf84:	e5845004 	str	r5, [r4, #4]
    bf88:	e3a05000 	mov	r5, #0
    bf8c:	e5847008 	str	r7, [r4, #8]
    bf90:	e584600c 	str	r6, [r4, #12]
    bf94:	e584c000 	str	ip, [r4]
    bf98:	e5845010 	str	r5, [r4, #16]
    bf9c:	eb000453 	bl	d0f0 <CCharGenerator::CCharGenerator()>
    bfa0:	e3a03001 	mov	r3, #1
    bfa4:	e3e02020 	mvn	r2, #32
    bfa8:	e5845018 	str	r5, [r4, #24]
    bfac:	e5845030 	str	r5, [r4, #48]	; 0x30
    bfb0:	e1a00004 	mov	r0, r4
    bfb4:	e5845034 	str	r5, [r4, #52]	; 0x34
    bfb8:	e584503c 	str	r5, [r4, #60]	; 0x3c
    bfbc:	e5845040 	str	r5, [r4, #64]	; 0x40
    bfc0:	e584504c 	str	r5, [r4, #76]	; 0x4c
    bfc4:	e5845058 	str	r5, [r4, #88]	; 0x58
    bfc8:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
    bfcc:	e5843044 	str	r3, [r4, #68]	; 0x44
    bfd0:	e584305c 	str	r3, [r4, #92]	; 0x5c
    bfd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bfd8:	00011fe8 	.word	0x00011fe8

0000bfdc <CScreenDevice::GetWidth() const>:
    bfdc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    bfe0:	e12fff1e 	bx	lr

0000bfe4 <CScreenDevice::GetHeight() const>:
    bfe4:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    bfe8:	e12fff1e 	bx	lr

0000bfec <CScreenDevice::GetColumns() const>:
    bfec:	e1a03000 	mov	r3, r0
    bff0:	e2800014 	add	r0, r0, #20
    bff4:	e92d4010 	push	{r4, lr}
    bff8:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    bffc:	eb00043f 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c000:	e1a01000 	mov	r1, r0
    c004:	e1a00004 	mov	r0, r4
    c008:	eb00143c 	bl	11100 <__aeabi_uidiv>
    c00c:	e8bd8010 	pop	{r4, pc}

0000c010 <CScreenDevice::GetRows() const>:
    c010:	e1a03000 	mov	r3, r0
    c014:	e2800014 	add	r0, r0, #20
    c018:	e92d4010 	push	{r4, lr}
    c01c:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    c020:	eb000438 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c024:	e1a01000 	mov	r1, r0
    c028:	e1a00004 	mov	r0, r4
    c02c:	eb001433 	bl	11100 <__aeabi_uidiv>
    c030:	e8bd8010 	pop	{r4, pc}

0000c034 <CScreenDevice::GetStatus()>:
    c034:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c038:	e591c038 	ldr	ip, [r1, #56]	; 0x38
    c03c:	e5916018 	ldr	r6, [r1, #24]
    c040:	e591501c 	ldr	r5, [r1, #28]
    c044:	e5914030 	ldr	r4, [r1, #48]	; 0x30
    c048:	e591e034 	ldr	lr, [r1, #52]	; 0x34
    c04c:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
    c050:	e5806000 	str	r6, [r0]
    c054:	e5917040 	ldr	r7, [r1, #64]	; 0x40
    c058:	e5805004 	str	r5, [r0, #4]
    c05c:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    c060:	e5804008 	str	r4, [r0, #8]
    c064:	e1d154b8 	ldrh	r5, [r1, #72]	; 0x48
    c068:	e580e00c 	str	lr, [r0, #12]
    c06c:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    c070:	e580c010 	str	ip, [r0, #16]
    c074:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    c078:	e5802014 	str	r2, [r0, #20]
    c07c:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    c080:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    c084:	e5807018 	str	r7, [r0, #24]
    c088:	e580601c 	str	r6, [r0, #28]
    c08c:	e1c052b0 	strh	r5, [r0, #32]
    c090:	e5804024 	str	r4, [r0, #36]	; 0x24
    c094:	e580e028 	str	lr, [r0, #40]	; 0x28
    c098:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    c09c:	e5802030 	str	r2, [r0, #48]	; 0x30
    c0a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c0a4 <CScreenDevice::SetStatus(TScreenStatus)>:
    c0a4:	e24dd010 	sub	sp, sp, #16
    c0a8:	e92d4070 	push	{r4, r5, r6, lr}
    c0ac:	e28dc014 	add	ip, sp, #20
    c0b0:	e590e01c 	ldr	lr, [r0, #28]
    c0b4:	e88c000e 	stm	ip, {r1, r2, r3}
    c0b8:	e59d3018 	ldr	r3, [sp, #24]
    c0bc:	e15e0003 	cmp	lr, r3
    c0c0:	0a000003 	beq	c0d4 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    c0c4:	e3a00000 	mov	r0, #0
    c0c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    c0cc:	e28dd010 	add	sp, sp, #16
    c0d0:	e12fff1e 	bx	lr
    c0d4:	e5902020 	ldr	r2, [r0, #32]
    c0d8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c0dc:	e1520003 	cmp	r2, r3
    c0e0:	1afffff7 	bne	c0c4 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    c0e4:	e1a04000 	mov	r4, r0
    c0e8:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    c0ec:	e3500000 	cmp	r0, #0
    c0f0:	1a000023 	bne	c184 <CScreenDevice::SetStatus(TScreenStatus)+0xe0>
    c0f4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    c0f8:	e3530000 	cmp	r3, #0
    c0fc:	1afffff0 	bne	c0c4 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    c100:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    c104:	e3530000 	cmp	r3, #0
    c108:	1affffed 	bne	c0c4 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    c10c:	e1a0200e 	mov	r2, lr
    c110:	e59d1014 	ldr	r1, [sp, #20]
    c114:	e5940018 	ldr	r0, [r4, #24]
    c118:	ebfffd62 	bl	b6a8 <memcpy>
    c11c:	e59d201c 	ldr	r2, [sp, #28]
    c120:	e59d3020 	ldr	r3, [sp, #32]
    c124:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
    c128:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
    c12c:	e3510000 	cmp	r1, #0
    c130:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    c134:	e59de02c 	ldr	lr, [sp, #44]	; 0x2c
    c138:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    c13c:	e1dd03b4 	ldrh	r0, [sp, #52]	; 0x34
    c140:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    c144:	e5842030 	str	r2, [r4, #48]	; 0x30
    c148:	e5843034 	str	r3, [r4, #52]	; 0x34
    c14c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    c150:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    c154:	e5846038 	str	r6, [r4, #56]	; 0x38
    c158:	e584503c 	str	r5, [r4, #60]	; 0x3c
    c15c:	e584e040 	str	lr, [r4, #64]	; 0x40
    c160:	e584c044 	str	ip, [r4, #68]	; 0x44
    c164:	e1c404b8 	strh	r0, [r4, #72]	; 0x48
    c168:	e584104c 	str	r1, [r4, #76]	; 0x4c
    c16c:	e5842050 	str	r2, [r4, #80]	; 0x50
    c170:	e5843054 	str	r3, [r4, #84]	; 0x54
    c174:	1a00000f 	bne	c1b8 <CScreenDevice::SetStatus(TScreenStatus)+0x114>
    c178:	f57ff05f 	dmb	sy
    c17c:	e3a00001 	mov	r0, #1
    c180:	eaffffd0 	b	c0c8 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    c184:	ebfff8c7 	bl	a4a8 <EnterCritical>
    c188:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    c18c:	e3530000 	cmp	r3, #0
    c190:	1a000003 	bne	c1a4 <CScreenDevice::SetStatus(TScreenStatus)+0x100>
    c194:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    c198:	e3530000 	cmp	r3, #0
    c19c:	0594e01c 	ldreq	lr, [r4, #28]
    c1a0:	0affffd9 	beq	c10c <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    c1a4:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    c1a8:	e3530000 	cmp	r3, #0
    c1ac:	0affffc4 	beq	c0c4 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    c1b0:	ebfff8ea 	bl	a560 <LeaveCritical>
    c1b4:	eaffffc2 	b	c0c4 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    c1b8:	ebfff8e8 	bl	a560 <LeaveCritical>
    c1bc:	eaffffed 	b	c178 <CScreenDevice::SetStatus(TScreenStatus)+0xd4>

0000c1c0 <CScreenDevice::CarriageReturn()>:
    c1c0:	e3a03000 	mov	r3, #0
    c1c4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c1c8:	e12fff1e 	bx	lr

0000c1cc <CScreenDevice::CursorHome()>:
    c1cc:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c1d0:	e3a02000 	mov	r2, #0
    c1d4:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c1d8:	e5803040 	str	r3, [r0, #64]	; 0x40
    c1dc:	e12fff1e 	bx	lr

0000c1e0 <CScreenDevice::CursorLeft()>:
    c1e0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    c1e4:	e92d4070 	push	{r4, r5, r6, lr}
    c1e8:	e3530000 	cmp	r3, #0
    c1ec:	e1a04000 	mov	r4, r0
    c1f0:	1a00000f 	bne	c234 <CScreenDevice::CursorLeft()+0x54>
    c1f4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    c1f8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c1fc:	e1520003 	cmp	r2, r3
    c200:	98bd8070 	popls	{r4, r5, r6, pc}
    c204:	e2806014 	add	r6, r0, #20
    c208:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    c20c:	e1a00006 	mov	r0, r6
    c210:	eb0003ba 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c214:	e0455000 	sub	r5, r5, r0
    c218:	e1a00006 	mov	r0, r6
    c21c:	e584503c 	str	r5, [r4, #60]	; 0x3c
    c220:	eb0003b8 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c224:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c228:	e0430000 	sub	r0, r3, r0
    c22c:	e5840040 	str	r0, [r4, #64]	; 0x40
    c230:	e8bd8070 	pop	{r4, r5, r6, pc}
    c234:	e2800014 	add	r0, r0, #20
    c238:	eb0003b0 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c23c:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    c240:	e0430000 	sub	r0, r3, r0
    c244:	e584003c 	str	r0, [r4, #60]	; 0x3c
    c248:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c24c <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    c24c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c250:	e2806014 	add	r6, r0, #20
    c254:	e1a05000 	mov	r5, r0
    c258:	e1a04002 	mov	r4, r2
    c25c:	e1a00006 	mov	r0, r6
    c260:	e1a07001 	mov	r7, r1
    c264:	eb0003a5 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c268:	e2444001 	sub	r4, r4, #1
    c26c:	e0040490 	mul	r4, r0, r4
    c270:	e1a00006 	mov	r0, r6
    c274:	eb0003a3 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c278:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c27c:	e1540003 	cmp	r4, r3
    c280:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    c284:	e2477001 	sub	r7, r7, #1
    c288:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    c28c:	e0000790 	mul	r0, r0, r7
    c290:	e1500003 	cmp	r0, r3
    c294:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    c298:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    c29c:	e1500003 	cmp	r0, r3
    c2a0:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    c2a4:	35850040 	strcc	r0, [r5, #64]	; 0x40
    c2a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c2ac <CScreenDevice::CursorUp()>:
    c2ac:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    c2b0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c2b4:	e1520003 	cmp	r2, r3
    c2b8:	912fff1e 	bxls	lr
    c2bc:	e92d4010 	push	{r4, lr}
    c2c0:	e1a04000 	mov	r4, r0
    c2c4:	e2800014 	add	r0, r0, #20
    c2c8:	eb00038e 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c2cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c2d0:	e0430000 	sub	r0, r3, r0
    c2d4:	e5840040 	str	r0, [r4, #64]	; 0x40
    c2d8:	e8bd8010 	pop	{r4, pc}

0000c2dc <CScreenDevice::DeleteChars(unsigned int)>:
    c2dc:	e12fff1e 	bx	lr

0000c2e0 <CScreenDevice::DeleteLines(unsigned int)>:
    c2e0:	e12fff1e 	bx	lr

0000c2e4 <CScreenDevice::InsertLines(unsigned int)>:
    c2e4:	e12fff1e 	bx	lr

0000c2e8 <CScreenDevice::InsertMode(int)>:
    c2e8:	e580104c 	str	r1, [r0, #76]	; 0x4c
    c2ec:	e12fff1e 	bx	lr

0000c2f0 <CScreenDevice::ReverseScroll()>:
    c2f0:	e12fff1e 	bx	lr

0000c2f4 <CScreenDevice::SetCursorMode(int)>:
    c2f4:	e5801044 	str	r1, [r0, #68]	; 0x44
    c2f8:	e12fff1e 	bx	lr

0000c2fc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    c2fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c300:	e2807014 	add	r7, r0, #20
    c304:	e1a06000 	mov	r6, r0
    c308:	e1a05002 	mov	r5, r2
    c30c:	e1a00007 	mov	r0, r7
    c310:	e1a04001 	mov	r4, r1
    c314:	eb00037b 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c318:	e2444001 	sub	r4, r4, #1
    c31c:	e0040490 	mul	r4, r0, r4
    c320:	e1a00007 	mov	r0, r7
    c324:	eb000377 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c328:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    c32c:	e0000095 	mul	r0, r5, r0
    c330:	e3500000 	cmp	r0, #0
    c334:	11540002 	cmpne	r4, r2
    c338:	33a03001 	movcc	r3, #1
    c33c:	23a03000 	movcs	r3, #0
    c340:	e1500002 	cmp	r0, r2
    c344:	83a03000 	movhi	r3, #0
    c348:	92033001 	andls	r3, r3, #1
    c34c:	e1540000 	cmp	r4, r0
    c350:	23a03000 	movcs	r3, #0
    c354:	32033001 	andcc	r3, r3, #1
    c358:	e3530000 	cmp	r3, #0
    c35c:	e3a03000 	mov	r3, #0
    c360:	15864034 	strne	r4, [r6, #52]	; 0x34
    c364:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    c368:	15860038 	strne	r0, [r6, #56]	; 0x38
    c36c:	e586303c 	str	r3, [r6, #60]	; 0x3c
    c370:	e5864040 	str	r4, [r6, #64]	; 0x40
    c374:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c378 <CScreenDevice::SetStandoutMode(unsigned int)>:
    c378:	e351001b 	cmp	r1, #27
    c37c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    c380:	ea00001d 	b	c3fc <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    c384:	0000c40c 	.word	0x0000c40c
    c388:	0000c400 	.word	0x0000c400
    c38c:	0000c3f4 	.word	0x0000c3f4
    c390:	0000c3fc 	.word	0x0000c3fc
    c394:	0000c3fc 	.word	0x0000c3fc
    c398:	0000c3fc 	.word	0x0000c3fc
    c39c:	0000c3fc 	.word	0x0000c3fc
    c3a0:	0000c3fc 	.word	0x0000c3fc
    c3a4:	0000c3fc 	.word	0x0000c3fc
    c3a8:	0000c3fc 	.word	0x0000c3fc
    c3ac:	0000c3fc 	.word	0x0000c3fc
    c3b0:	0000c3fc 	.word	0x0000c3fc
    c3b4:	0000c3fc 	.word	0x0000c3fc
    c3b8:	0000c3fc 	.word	0x0000c3fc
    c3bc:	0000c3fc 	.word	0x0000c3fc
    c3c0:	0000c3fc 	.word	0x0000c3fc
    c3c4:	0000c3fc 	.word	0x0000c3fc
    c3c8:	0000c3fc 	.word	0x0000c3fc
    c3cc:	0000c3fc 	.word	0x0000c3fc
    c3d0:	0000c3fc 	.word	0x0000c3fc
    c3d4:	0000c3fc 	.word	0x0000c3fc
    c3d8:	0000c3fc 	.word	0x0000c3fc
    c3dc:	0000c3fc 	.word	0x0000c3fc
    c3e0:	0000c3fc 	.word	0x0000c3fc
    c3e4:	0000c3fc 	.word	0x0000c3fc
    c3e8:	0000c3fc 	.word	0x0000c3fc
    c3ec:	0000c3fc 	.word	0x0000c3fc
    c3f0:	0000c40c 	.word	0x0000c40c
    c3f4:	e3a0301f 	mov	r3, #31
    c3f8:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c3fc:	e12fff1e 	bx	lr
    c400:	e3a03b3e 	mov	r3, #63488	; 0xf800
    c404:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c408:	e12fff1e 	bx	lr
    c40c:	e3e03020 	mvn	r3, #32
    c410:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    c414:	e12fff1e 	bx	lr

0000c418 <CScreenDevice::Scroll()>:
    c418:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c41c:	e1a07000 	mov	r7, r0
    c420:	e2800014 	add	r0, r0, #20
    c424:	eb000337 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c428:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    c42c:	e5975020 	ldr	r5, [r7, #32]
    c430:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    c434:	e5978018 	ldr	r8, [r7, #24]
    c438:	e0444003 	sub	r4, r4, r3
    c43c:	e1a02085 	lsl	r2, r5, #1
    c440:	e0050395 	mul	r5, r5, r3
    c444:	e0885085 	add	r5, r8, r5, lsl #1
    c448:	e0444000 	sub	r4, r4, r0
    c44c:	e1a06000 	mov	r6, r0
    c450:	e0040492 	mul	r4, r2, r4
    c454:	e3540000 	cmp	r4, #0
    c458:	1a000007 	bne	c47c <CScreenDevice::Scroll()+0x64>
    c45c:	e0020692 	mul	r2, r2, r6
    c460:	e1b02122 	lsrs	r2, r2, #2
    c464:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    c468:	e1a00005 	mov	r0, r5
    c46c:	e1a02102 	lsl	r2, r2, #2
    c470:	e3a01000 	mov	r1, #0
    c474:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    c478:	eafffb72 	b	b248 <memset>
    c47c:	e0803003 	add	r3, r0, r3
    c480:	e3c4900f 	bic	r9, r4, #15
    c484:	e1a00005 	mov	r0, r5
    c488:	e0288392 	mla	r8, r2, r3, r8
    c48c:	e1a02009 	mov	r2, r9
    c490:	e1a01008 	mov	r1, r8
    c494:	ebfffc83 	bl	b6a8 <memcpy>
    c498:	e204200e 	and	r2, r4, #14
    c49c:	e0850009 	add	r0, r5, r9
    c4a0:	e0881009 	add	r1, r8, r9
    c4a4:	ebfffc7f 	bl	b6a8 <memcpy>
    c4a8:	e5972020 	ldr	r2, [r7, #32]
    c4ac:	e3c44003 	bic	r4, r4, #3
    c4b0:	e0855004 	add	r5, r5, r4
    c4b4:	e1a02082 	lsl	r2, r2, #1
    c4b8:	eaffffe7 	b	c45c <CScreenDevice::Scroll()+0x44>

0000c4bc <CScreenDevice::CursorDown()>:
    c4bc:	e92d4070 	push	{r4, r5, r6, lr}
    c4c0:	e2805014 	add	r5, r0, #20
    c4c4:	e1a04000 	mov	r4, r0
    c4c8:	e1a00005 	mov	r0, r5
    c4cc:	eb00030d 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c4d0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c4d4:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    c4d8:	e0800003 	add	r0, r0, r3
    c4dc:	e5840040 	str	r0, [r4, #64]	; 0x40
    c4e0:	e1500002 	cmp	r0, r2
    c4e4:	38bd8070 	popcc	{r4, r5, r6, pc}
    c4e8:	e1a00004 	mov	r0, r4
    c4ec:	ebffffc9 	bl	c418 <CScreenDevice::Scroll()>
    c4f0:	e1a00005 	mov	r0, r5
    c4f4:	eb000303 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c4f8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c4fc:	e0430000 	sub	r0, r3, r0
    c500:	e5840040 	str	r0, [r4, #64]	; 0x40
    c504:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c508 <CScreenDevice::NewLine()>:
    c508:	e3a02000 	mov	r2, #0
    c50c:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c510:	eaffffe9 	b	c4bc <CScreenDevice::CursorDown()>

0000c514 <CScreenDevice::CursorRight()>:
    c514:	e92d4010 	push	{r4, lr}
    c518:	e1a04000 	mov	r4, r0
    c51c:	e2800014 	add	r0, r0, #20
    c520:	eb0002f6 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c524:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    c528:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    c52c:	e0800003 	add	r0, r0, r3
    c530:	e584003c 	str	r0, [r4, #60]	; 0x3c
    c534:	e1500002 	cmp	r0, r2
    c538:	38bd8010 	popcc	{r4, pc}
    c53c:	e3a03000 	mov	r3, #0
    c540:	e1a00004 	mov	r0, r4
    c544:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c548:	e8bd4010 	pop	{r4, lr}
    c54c:	eaffffda 	b	c4bc <CScreenDevice::CursorDown()>

0000c550 <CScreenDevice::Tabulator()>:
    c550:	e92d4070 	push	{r4, r5, r6, lr}
    c554:	e1a05000 	mov	r5, r0
    c558:	e2800014 	add	r0, r0, #20
    c55c:	eb0002e7 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c560:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    c564:	e1a04180 	lsl	r4, r0, #3
    c568:	e0840003 	add	r0, r4, r3
    c56c:	e1a01004 	mov	r1, r4
    c570:	eb0012e2 	bl	11100 <__aeabi_uidiv>
    c574:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c578:	e0000094 	mul	r0, r4, r0
    c57c:	e1500003 	cmp	r0, r3
    c580:	e585003c 	str	r0, [r5, #60]	; 0x3c
    c584:	38bd8070 	popcc	{r4, r5, r6, pc}
    c588:	e3a03000 	mov	r3, #0
    c58c:	e1a00005 	mov	r0, r5
    c590:	e585303c 	str	r3, [r5, #60]	; 0x3c
    c594:	e8bd4070 	pop	{r4, r5, r6, lr}
    c598:	eaffffc7 	b	c4bc <CScreenDevice::CursorDown()>

0000c59c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    c59c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5a0:	e2806014 	add	r6, r0, #20
    c5a4:	e24dd00c 	sub	sp, sp, #12
    c5a8:	e1a07000 	mov	r7, r0
    c5ac:	e1a00006 	mov	r0, r6
    c5b0:	e1a0a001 	mov	sl, r1
    c5b4:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    c5b8:	e1a09002 	mov	r9, r2
    c5bc:	e58d3004 	str	r3, [sp, #4]
    c5c0:	eb0002d0 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c5c4:	e3a08000 	mov	r8, #0
    c5c8:	e1580000 	cmp	r8, r0
    c5cc:	2a000024 	bcs	c664 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
    c5d0:	e59d3004 	ldr	r3, [sp, #4]
    c5d4:	e3a04000 	mov	r4, #0
    c5d8:	e0883003 	add	r3, r8, r3
    c5dc:	e58d3000 	str	r3, [sp]
    c5e0:	e1a00006 	mov	r0, r6
    c5e4:	e0845009 	add	r5, r4, r9
    c5e8:	eb0002c4 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c5ec:	e1a02004 	mov	r2, r4
    c5f0:	e1a03008 	mov	r3, r8
    c5f4:	e1a0100a 	mov	r1, sl
    c5f8:	e1540000 	cmp	r4, r0
    c5fc:	e1a00006 	mov	r0, r6
    c600:	e2844001 	add	r4, r4, #1
    c604:	2a000011 	bcs	c650 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>
    c608:	eb0002c2 	bl	d118 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    c60c:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    c610:	e3500000 	cmp	r0, #0
    c614:	11a0200b 	movne	r2, fp
    c618:	03a02000 	moveq	r2, #0
    c61c:	e1550003 	cmp	r5, r3
    c620:	2affffee 	bcs	c5e0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    c624:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    c628:	e59d1000 	ldr	r1, [sp]
    c62c:	e1510003 	cmp	r1, r3
    c630:	2affffea 	bcs	c5e0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    c634:	e5973020 	ldr	r3, [r7, #32]
    c638:	e59d0000 	ldr	r0, [sp]
    c63c:	e5971018 	ldr	r1, [r7, #24]
    c640:	e0255093 	mla	r5, r3, r0, r5
    c644:	e1a05085 	lsl	r5, r5, #1
    c648:	e18120b5 	strh	r2, [r1, r5]
    c64c:	eaffffe3 	b	c5e0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    c650:	e1a00006 	mov	r0, r6
    c654:	e2888001 	add	r8, r8, #1
    c658:	eb0002aa 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c65c:	e1580000 	cmp	r8, r0
    c660:	3affffda 	bcc	c5d0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    c664:	e28dd00c 	add	sp, sp, #12
    c668:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c66c <CScreenDevice::DisplayChar(char)>:
    c66c:	e6ef3071 	uxtb	r3, r1
    c670:	e353001f 	cmp	r3, #31
    c674:	912fff1e 	bxls	lr
    c678:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    c67c:	e92d4010 	push	{r4, lr}
    c680:	e24dd008 	sub	sp, sp, #8
    c684:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c688:	e1a04000 	mov	r4, r0
    c68c:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c690:	e58dc000 	str	ip, [sp]
    c694:	ebffffc0 	bl	c59c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c698:	e1a00004 	mov	r0, r4
    c69c:	e28dd008 	add	sp, sp, #8
    c6a0:	e8bd4010 	pop	{r4, lr}
    c6a4:	eaffff9a 	b	c514 <CScreenDevice::CursorRight()>

0000c6a8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    c6a8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6ac:	e3a08000 	mov	r8, #0
    c6b0:	e2805014 	add	r5, r0, #20
    c6b4:	e1a0b000 	mov	fp, r0
    c6b8:	e1a06001 	mov	r6, r1
    c6bc:	e1a0a002 	mov	sl, r2
    c6c0:	e1a09008 	mov	r9, r8
    c6c4:	e1a00005 	mov	r0, r5
    c6c8:	eb00028e 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c6cc:	e1580000 	cmp	r8, r0
    c6d0:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6d4:	e088700a 	add	r7, r8, sl
    c6d8:	e3a04000 	mov	r4, #0
    c6dc:	e1a00005 	mov	r0, r5
    c6e0:	eb000286 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c6e4:	e0843006 	add	r3, r4, r6
    c6e8:	e1540000 	cmp	r4, r0
    c6ec:	e2844001 	add	r4, r4, #1
    c6f0:	2a00000b 	bcs	c724 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    c6f4:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    c6f8:	e1530002 	cmp	r3, r2
    c6fc:	2afffff6 	bcs	c6dc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    c700:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    c704:	e1570002 	cmp	r7, r2
    c708:	2afffff3 	bcs	c6dc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    c70c:	e59b2020 	ldr	r2, [fp, #32]
    c710:	e59b1018 	ldr	r1, [fp, #24]
    c714:	e0233792 	mla	r3, r2, r7, r3
    c718:	e1a03083 	lsl	r3, r3, #1
    c71c:	e18190b3 	strh	r9, [r1, r3]
    c720:	eaffffed 	b	c6dc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    c724:	e2888001 	add	r8, r8, #1
    c728:	eaffffe5 	b	c6c4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000c72c <CScreenDevice::ClearLineEnd()>:
    c72c:	e92d4070 	push	{r4, r5, r6, lr}
    c730:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c734:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    c738:	e1540003 	cmp	r4, r3
    c73c:	28bd8070 	popcs	{r4, r5, r6, pc}
    c740:	e2806014 	add	r6, r0, #20
    c744:	e1a05000 	mov	r5, r0
    c748:	e1a01004 	mov	r1, r4
    c74c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c750:	e1a00005 	mov	r0, r5
    c754:	ebffffd3 	bl	c6a8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c758:	e1a00006 	mov	r0, r6
    c75c:	eb000267 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c760:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c764:	e0844000 	add	r4, r4, r0
    c768:	e1530004 	cmp	r3, r4
    c76c:	8afffff5 	bhi	c748 <CScreenDevice::ClearLineEnd()+0x1c>
    c770:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c774 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    c774:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c778:	e2807014 	add	r7, r0, #20
    c77c:	e1a05000 	mov	r5, r0
    c780:	e590803c 	ldr	r8, [r0, #60]	; 0x3c
    c784:	e1a00007 	mov	r0, r7
    c788:	e1a06001 	mov	r6, r1
    c78c:	eb00025b 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c790:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c794:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    c798:	e0268096 	mla	r6, r6, r0, r8
    c79c:	e1560003 	cmp	r6, r3
    c7a0:	21a06003 	movcs	r6, r3
    c7a4:	e1540006 	cmp	r4, r6
    c7a8:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    c7ac:	e1a01004 	mov	r1, r4
    c7b0:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c7b4:	e1a00005 	mov	r0, r5
    c7b8:	ebffffba 	bl	c6a8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c7bc:	e1a00007 	mov	r0, r7
    c7c0:	eb00024e 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c7c4:	e0844000 	add	r4, r4, r0
    c7c8:	e1540006 	cmp	r4, r6
    c7cc:	3afffff6 	bcc	c7ac <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    c7d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c7d4 <CScreenDevice::EraseChars(unsigned int)>:
    c7d4:	e3510000 	cmp	r1, #0
    c7d8:	012fff1e 	bxeq	lr
    c7dc:	eaffffe4 	b	c774 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000c7e0 <CScreenDevice::ClearDisplayEnd()>:
    c7e0:	e92d4070 	push	{r4, r5, r6, lr}
    c7e4:	e1a05000 	mov	r5, r0
    c7e8:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    c7ec:	e2806014 	add	r6, r0, #20
    c7f0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c7f4:	e1540003 	cmp	r4, r3
    c7f8:	2a000009 	bcs	c824 <CScreenDevice::ClearDisplayEnd()+0x44>
    c7fc:	e1a01004 	mov	r1, r4
    c800:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c804:	e1a00005 	mov	r0, r5
    c808:	ebffffa6 	bl	c6a8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c80c:	e1a00006 	mov	r0, r6
    c810:	eb00023a 	bl	d100 <CCharGenerator::GetCharWidth() const>
    c814:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c818:	e0844000 	add	r4, r4, r0
    c81c:	e1530004 	cmp	r3, r4
    c820:	8afffff5 	bhi	c7fc <CScreenDevice::ClearDisplayEnd()+0x1c>
    c824:	e1a00006 	mov	r0, r6
    c828:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    c82c:	eb000235 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c830:	e2851018 	add	r1, r5, #24
    c834:	e891000e 	ldm	r1, {r1, r2, r3}
    c838:	e0840000 	add	r0, r4, r0
    c83c:	e0000093 	mul	r0, r3, r0
    c840:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    c844:	0a000004 	beq	c85c <CScreenDevice::ClearDisplayEnd()+0x7c>
    c848:	e0810080 	add	r0, r1, r0, lsl #1
    c84c:	e1a02082 	lsl	r2, r2, #1
    c850:	e3a01000 	mov	r1, #0
    c854:	e8bd4070 	pop	{r4, r5, r6, lr}
    c858:	eafffa7a 	b	b248 <memset>
    c85c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c860 <CScreenDevice::Write(char)>:
    c860:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c864:	e92d4010 	push	{r4, lr}
    c868:	e1a04000 	mov	r4, r0
    c86c:	e24dd008 	sub	sp, sp, #8
    c870:	e3530007 	cmp	r3, #7
    c874:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c878:	ea000010 	b	c8c0 <CScreenDevice::Write(char)+0x60>
    c87c:	0000c90c 	.word	0x0000c90c
    c880:	0000c96c 	.word	0x0000c96c
    c884:	0000c988 	.word	0x0000c988
    c888:	0000c9e0 	.word	0x0000c9e0
    c88c:	0000cabc 	.word	0x0000cabc
    c890:	0000cadc 	.word	0x0000cadc
    c894:	0000cafc 	.word	0x0000cafc
    c898:	0000c8d0 	.word	0x0000c8d0
    c89c:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c8a0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c8a4:	e1520003 	cmp	r2, r3
    c8a8:	2a000004 	bcs	c8c0 <CScreenDevice::Write(char)+0x60>
    c8ac:	e2800014 	add	r0, r0, #20
    c8b0:	eb000214 	bl	d108 <CCharGenerator::GetCharHeight() const>
    c8b4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c8b8:	e0433000 	sub	r3, r3, r0
    c8bc:	e5843040 	str	r3, [r4, #64]	; 0x40
    c8c0:	e3a03000 	mov	r3, #0
    c8c4:	e5843030 	str	r3, [r4, #48]	; 0x30
    c8c8:	e28dd008 	add	sp, sp, #8
    c8cc:	e8bd8010 	pop	{r4, pc}
    c8d0:	e3510068 	cmp	r1, #104	; 0x68
    c8d4:	0a000097 	beq	cb38 <CScreenDevice::Write(char)+0x2d8>
    c8d8:	e351006c 	cmp	r1, #108	; 0x6c
    c8dc:	0a000095 	beq	cb38 <CScreenDevice::Write(char)+0x2d8>
    c8e0:	e2411030 	sub	r1, r1, #48	; 0x30
    c8e4:	e6ef3071 	uxtb	r3, r1
    c8e8:	e3530009 	cmp	r3, #9
    c8ec:	8afffff3 	bhi	c8c0 <CScreenDevice::Write(char)+0x60>
    c8f0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c8f4:	e3a0200a 	mov	r2, #10
    c8f8:	e0211392 	mla	r1, r2, r3, r1
    c8fc:	e3510063 	cmp	r1, #99	; 0x63
    c900:	e5841050 	str	r1, [r4, #80]	; 0x50
    c904:	8affffed 	bhi	c8c0 <CScreenDevice::Write(char)+0x60>
    c908:	eaffffee 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    c90c:	e2413008 	sub	r3, r1, #8
    c910:	e3530013 	cmp	r3, #19
    c914:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c918:	ea0000ec 	b	ccd0 <CScreenDevice::Write(char)+0x470>
    c91c:	0000cba4 	.word	0x0000cba4
    c920:	0000cb98 	.word	0x0000cb98
    c924:	0000cb84 	.word	0x0000cb84
    c928:	0000ccd0 	.word	0x0000ccd0
    c92c:	0000ccd0 	.word	0x0000ccd0
    c930:	0000cb78 	.word	0x0000cb78
    c934:	0000ccd0 	.word	0x0000ccd0
    c938:	0000ccd0 	.word	0x0000ccd0
    c93c:	0000ccd0 	.word	0x0000ccd0
    c940:	0000ccd0 	.word	0x0000ccd0
    c944:	0000ccd0 	.word	0x0000ccd0
    c948:	0000ccd0 	.word	0x0000ccd0
    c94c:	0000ccd0 	.word	0x0000ccd0
    c950:	0000ccd0 	.word	0x0000ccd0
    c954:	0000ccd0 	.word	0x0000ccd0
    c958:	0000ccd0 	.word	0x0000ccd0
    c95c:	0000ccd0 	.word	0x0000ccd0
    c960:	0000ccd0 	.word	0x0000ccd0
    c964:	0000ccd0 	.word	0x0000ccd0
    c968:	0000cb6c 	.word	0x0000cb6c
    c96c:	e351004d 	cmp	r1, #77	; 0x4d
    c970:	0affffd2 	beq	c8c0 <CScreenDevice::Write(char)+0x60>
    c974:	e351005b 	cmp	r1, #91	; 0x5b
    c978:	03a03002 	moveq	r3, #2
    c97c:	05803030 	streq	r3, [r0, #48]	; 0x30
    c980:	0affffd0 	beq	c8c8 <CScreenDevice::Write(char)+0x68>
    c984:	eaffffcd 	b	c8c0 <CScreenDevice::Write(char)+0x60>
    c988:	e241303f 	sub	r3, r1, #63	; 0x3f
    c98c:	e3530011 	cmp	r3, #17
    c990:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c994:	ea0000d9 	b	cd00 <CScreenDevice::Write(char)+0x4a0>
    c998:	0000cc8c 	.word	0x0000cc8c
    c99c:	0000cd00 	.word	0x0000cd00
    c9a0:	0000c89c 	.word	0x0000c89c
    c9a4:	0000ccc0 	.word	0x0000ccc0
    c9a8:	0000ccb0 	.word	0x0000ccb0
    c9ac:	0000cd00 	.word	0x0000cd00
    c9b0:	0000cd00 	.word	0x0000cd00
    c9b4:	0000cd00 	.word	0x0000cd00
    c9b8:	0000cd00 	.word	0x0000cd00
    c9bc:	0000cc98 	.word	0x0000cc98
    c9c0:	0000cd00 	.word	0x0000cd00
    c9c4:	0000cc7c 	.word	0x0000cc7c
    c9c8:	0000cc6c 	.word	0x0000cc6c
    c9cc:	0000c8c0 	.word	0x0000c8c0
    c9d0:	0000c8c0 	.word	0x0000c8c0
    c9d4:	0000cd00 	.word	0x0000cd00
    c9d8:	0000cd00 	.word	0x0000cd00
    c9dc:	0000c8c0 	.word	0x0000c8c0
    c9e0:	e241303b 	sub	r3, r1, #59	; 0x3b
    c9e4:	e3530032 	cmp	r3, #50	; 0x32
    c9e8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c9ec:	eaffffbb 	b	c8e0 <CScreenDevice::Write(char)+0x80>
    c9f0:	0000cc60 	.word	0x0000cc60
    c9f4:	0000c8e0 	.word	0x0000c8e0
    c9f8:	0000c8e0 	.word	0x0000c8e0
    c9fc:	0000c8e0 	.word	0x0000c8e0
    ca00:	0000c8e0 	.word	0x0000c8e0
    ca04:	0000c8e0 	.word	0x0000c8e0
    ca08:	0000c8e0 	.word	0x0000c8e0
    ca0c:	0000c8e0 	.word	0x0000c8e0
    ca10:	0000c8e0 	.word	0x0000c8e0
    ca14:	0000c8e0 	.word	0x0000c8e0
    ca18:	0000c8e0 	.word	0x0000c8e0
    ca1c:	0000c8e0 	.word	0x0000c8e0
    ca20:	0000c8e0 	.word	0x0000c8e0
    ca24:	0000c8e0 	.word	0x0000c8e0
    ca28:	0000c8e0 	.word	0x0000c8e0
    ca2c:	0000c8e0 	.word	0x0000c8e0
    ca30:	0000c8e0 	.word	0x0000c8e0
    ca34:	0000c8c0 	.word	0x0000c8c0
    ca38:	0000c8c0 	.word	0x0000c8c0
    ca3c:	0000c8e0 	.word	0x0000c8e0
    ca40:	0000c8e0 	.word	0x0000c8e0
    ca44:	0000c8c0 	.word	0x0000c8c0
    ca48:	0000c8e0 	.word	0x0000c8e0
    ca4c:	0000c8e0 	.word	0x0000c8e0
    ca50:	0000c8e0 	.word	0x0000c8e0
    ca54:	0000c8e0 	.word	0x0000c8e0
    ca58:	0000c8e0 	.word	0x0000c8e0
    ca5c:	0000c8e0 	.word	0x0000c8e0
    ca60:	0000c8e0 	.word	0x0000c8e0
    ca64:	0000cbb0 	.word	0x0000cbb0
    ca68:	0000c8e0 	.word	0x0000c8e0
    ca6c:	0000c8e0 	.word	0x0000c8e0
    ca70:	0000c8e0 	.word	0x0000c8e0
    ca74:	0000c8e0 	.word	0x0000c8e0
    ca78:	0000c8e0 	.word	0x0000c8e0
    ca7c:	0000c8e0 	.word	0x0000c8e0
    ca80:	0000c8e0 	.word	0x0000c8e0
    ca84:	0000c8e0 	.word	0x0000c8e0
    ca88:	0000c8e0 	.word	0x0000c8e0
    ca8c:	0000c8e0 	.word	0x0000c8e0
    ca90:	0000c8e0 	.word	0x0000c8e0
    ca94:	0000c8e0 	.word	0x0000c8e0
    ca98:	0000c8e0 	.word	0x0000c8e0
    ca9c:	0000c8e0 	.word	0x0000c8e0
    caa0:	0000c8e0 	.word	0x0000c8e0
    caa4:	0000cbc4 	.word	0x0000cbc4
    caa8:	0000c8e0 	.word	0x0000c8e0
    caac:	0000c8e0 	.word	0x0000c8e0
    cab0:	0000c8e0 	.word	0x0000c8e0
    cab4:	0000cbc4 	.word	0x0000cbc4
    cab8:	0000cbe0 	.word	0x0000cbe0
    cabc:	e2411030 	sub	r1, r1, #48	; 0x30
    cac0:	e6ef3071 	uxtb	r3, r1
    cac4:	e3530009 	cmp	r3, #9
    cac8:	8affff7c 	bhi	c8c0 <CScreenDevice::Write(char)+0x60>
    cacc:	e3a03007 	mov	r3, #7
    cad0:	e5801050 	str	r1, [r0, #80]	; 0x50
    cad4:	e5803030 	str	r3, [r0, #48]	; 0x30
    cad8:	eaffff7a 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    cadc:	e2411030 	sub	r1, r1, #48	; 0x30
    cae0:	e6ef3071 	uxtb	r3, r1
    cae4:	e3530009 	cmp	r3, #9
    cae8:	8affff74 	bhi	c8c0 <CScreenDevice::Write(char)+0x60>
    caec:	e3a03006 	mov	r3, #6
    caf0:	e5801054 	str	r1, [r0, #84]	; 0x54
    caf4:	e5803030 	str	r3, [r0, #48]	; 0x30
    caf8:	eaffff72 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    cafc:	e3510048 	cmp	r1, #72	; 0x48
    cb00:	0a00008f 	beq	cd44 <CScreenDevice::Write(char)+0x4e4>
    cb04:	e3510072 	cmp	r1, #114	; 0x72
    cb08:	0a000011 	beq	cb54 <CScreenDevice::Write(char)+0x2f4>
    cb0c:	e2411030 	sub	r1, r1, #48	; 0x30
    cb10:	e6ef3071 	uxtb	r3, r1
    cb14:	e3530009 	cmp	r3, #9
    cb18:	8affff68 	bhi	c8c0 <CScreenDevice::Write(char)+0x60>
    cb1c:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    cb20:	e3a0200a 	mov	r2, #10
    cb24:	e0211392 	mla	r1, r2, r3, r1
    cb28:	e35100c7 	cmp	r1, #199	; 0xc7
    cb2c:	e5801054 	str	r1, [r0, #84]	; 0x54
    cb30:	8affff62 	bhi	c8c0 <CScreenDevice::Write(char)+0x60>
    cb34:	eaffff63 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    cb38:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    cb3c:	e3530019 	cmp	r3, #25
    cb40:	02411068 	subeq	r1, r1, #104	; 0x68
    cb44:	016f1f11 	clzeq	r1, r1
    cb48:	01a012a1 	lsreq	r1, r1, #5
    cb4c:	05841044 	streq	r1, [r4, #68]	; 0x44
    cb50:	eaffff5a 	b	c8c0 <CScreenDevice::Write(char)+0x60>
    cb54:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    cb58:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    cb5c:	ebfffde6 	bl	c2fc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    cb60:	e3a03000 	mov	r3, #0
    cb64:	e5843030 	str	r3, [r4, #48]	; 0x30
    cb68:	eaffff56 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    cb6c:	e3a03001 	mov	r3, #1
    cb70:	e5803030 	str	r3, [r0, #48]	; 0x30
    cb74:	eaffff53 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    cb78:	e3a03000 	mov	r3, #0
    cb7c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    cb80:	eaffff50 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    cb84:	e3a03000 	mov	r3, #0
    cb88:	e580303c 	str	r3, [r0, #60]	; 0x3c
    cb8c:	e28dd008 	add	sp, sp, #8
    cb90:	e8bd4010 	pop	{r4, lr}
    cb94:	eafffe48 	b	c4bc <CScreenDevice::CursorDown()>
    cb98:	e28dd008 	add	sp, sp, #8
    cb9c:	e8bd4010 	pop	{r4, lr}
    cba0:	eafffe6a 	b	c550 <CScreenDevice::Tabulator()>
    cba4:	e28dd008 	add	sp, sp, #8
    cba8:	e8bd4010 	pop	{r4, lr}
    cbac:	eafffd8b 	b	c1e0 <CScreenDevice::CursorLeft()>
    cbb0:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    cbb4:	e3510000 	cmp	r1, #0
    cbb8:	0affff40 	beq	c8c0 <CScreenDevice::Write(char)+0x60>
    cbbc:	ebfffeec 	bl	c774 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    cbc0:	eaffff3e 	b	c8c0 <CScreenDevice::Write(char)+0x60>
    cbc4:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    cbc8:	e3530004 	cmp	r3, #4
    cbcc:	02411068 	subeq	r1, r1, #104	; 0x68
    cbd0:	016f1f11 	clzeq	r1, r1
    cbd4:	01a012a1 	lsreq	r1, r1, #5
    cbd8:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    cbdc:	eaffff37 	b	c8c0 <CScreenDevice::Write(char)+0x60>
    cbe0:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    cbe4:	e353001b 	cmp	r3, #27
    cbe8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    cbec:	eaffff33 	b	c8c0 <CScreenDevice::Write(char)+0x60>
    cbf0:	0000cd38 	.word	0x0000cd38
    cbf4:	0000cd2c 	.word	0x0000cd2c
    cbf8:	0000cd20 	.word	0x0000cd20
    cbfc:	0000c8c0 	.word	0x0000c8c0
    cc00:	0000c8c0 	.word	0x0000c8c0
    cc04:	0000c8c0 	.word	0x0000c8c0
    cc08:	0000c8c0 	.word	0x0000c8c0
    cc0c:	0000c8c0 	.word	0x0000c8c0
    cc10:	0000c8c0 	.word	0x0000c8c0
    cc14:	0000c8c0 	.word	0x0000c8c0
    cc18:	0000c8c0 	.word	0x0000c8c0
    cc1c:	0000c8c0 	.word	0x0000c8c0
    cc20:	0000c8c0 	.word	0x0000c8c0
    cc24:	0000c8c0 	.word	0x0000c8c0
    cc28:	0000c8c0 	.word	0x0000c8c0
    cc2c:	0000c8c0 	.word	0x0000c8c0
    cc30:	0000c8c0 	.word	0x0000c8c0
    cc34:	0000c8c0 	.word	0x0000c8c0
    cc38:	0000c8c0 	.word	0x0000c8c0
    cc3c:	0000c8c0 	.word	0x0000c8c0
    cc40:	0000c8c0 	.word	0x0000c8c0
    cc44:	0000c8c0 	.word	0x0000c8c0
    cc48:	0000c8c0 	.word	0x0000c8c0
    cc4c:	0000c8c0 	.word	0x0000c8c0
    cc50:	0000c8c0 	.word	0x0000c8c0
    cc54:	0000c8c0 	.word	0x0000c8c0
    cc58:	0000c8c0 	.word	0x0000c8c0
    cc5c:	0000cd38 	.word	0x0000cd38
    cc60:	e3a03005 	mov	r3, #5
    cc64:	e5803030 	str	r3, [r0, #48]	; 0x30
    cc68:	eaffff16 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    cc6c:	ebfffeae 	bl	c72c <CScreenDevice::ClearLineEnd()>
    cc70:	e3a03000 	mov	r3, #0
    cc74:	e5843030 	str	r3, [r4, #48]	; 0x30
    cc78:	eaffff12 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    cc7c:	ebfffed7 	bl	c7e0 <CScreenDevice::ClearDisplayEnd()>
    cc80:	e3a03000 	mov	r3, #0
    cc84:	e5843030 	str	r3, [r4, #48]	; 0x30
    cc88:	eaffff0e 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    cc8c:	e3a03004 	mov	r3, #4
    cc90:	e5803030 	str	r3, [r0, #48]	; 0x30
    cc94:	eaffff0b 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    cc98:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    cc9c:	e3a03000 	mov	r3, #0
    cca0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    cca4:	e5803030 	str	r3, [r0, #48]	; 0x30
    cca8:	e5802040 	str	r2, [r0, #64]	; 0x40
    ccac:	eaffff05 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    ccb0:	ebfffe17 	bl	c514 <CScreenDevice::CursorRight()>
    ccb4:	e3a03000 	mov	r3, #0
    ccb8:	e5843030 	str	r3, [r4, #48]	; 0x30
    ccbc:	eaffff01 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    ccc0:	ebfffdfd 	bl	c4bc <CScreenDevice::CursorDown()>
    ccc4:	e3a03000 	mov	r3, #0
    ccc8:	e5843030 	str	r3, [r4, #48]	; 0x30
    cccc:	eafffefd 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    ccd0:	e6ef3071 	uxtb	r3, r1
    ccd4:	e353001f 	cmp	r3, #31
    ccd8:	9afffefa 	bls	c8c8 <CScreenDevice::Write(char)+0x68>
    ccdc:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    cce0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    cce4:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    cce8:	e58dc000 	str	ip, [sp]
    ccec:	ebfffe2a 	bl	c59c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    ccf0:	e1a00004 	mov	r0, r4
    ccf4:	e28dd008 	add	sp, sp, #8
    ccf8:	e8bd4010 	pop	{r4, lr}
    ccfc:	eafffe04 	b	c514 <CScreenDevice::CursorRight()>
    cd00:	e2411030 	sub	r1, r1, #48	; 0x30
    cd04:	e6ef3071 	uxtb	r3, r1
    cd08:	e3530009 	cmp	r3, #9
    cd0c:	8afffeeb 	bhi	c8c0 <CScreenDevice::Write(char)+0x60>
    cd10:	e3a03003 	mov	r3, #3
    cd14:	e5801050 	str	r1, [r0, #80]	; 0x50
    cd18:	e5803030 	str	r3, [r0, #48]	; 0x30
    cd1c:	eafffee9 	b	c8c8 <CScreenDevice::Write(char)+0x68>
    cd20:	e3a0301f 	mov	r3, #31
    cd24:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    cd28:	eafffee4 	b	c8c0 <CScreenDevice::Write(char)+0x60>
    cd2c:	e3a03b3e 	mov	r3, #63488	; 0xf800
    cd30:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    cd34:	eafffee1 	b	c8c0 <CScreenDevice::Write(char)+0x60>
    cd38:	e3e03020 	mvn	r3, #32
    cd3c:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    cd40:	eafffede 	b	c8c0 <CScreenDevice::Write(char)+0x60>
    cd44:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    cd48:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    cd4c:	ebfffd3e 	bl	c24c <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    cd50:	e3a03000 	mov	r3, #0
    cd54:	e5843030 	str	r3, [r4, #48]	; 0x30
    cd58:	eafffeda 	b	c8c8 <CScreenDevice::Write(char)+0x68>

0000cd5c <CScreenDevice::Write(void const*, unsigned int)>:
    cd5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cd60:	e1a05000 	mov	r5, r0
    cd64:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    cd68:	e1a06001 	mov	r6, r1
    cd6c:	e1a08002 	mov	r8, r2
    cd70:	e3500000 	cmp	r0, #0
    cd74:	1a000026 	bne	ce14 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    cd78:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    cd7c:	e3a03001 	mov	r3, #1
    cd80:	e5853058 	str	r3, [r5, #88]	; 0x58
    cd84:	e3540000 	cmp	r4, #0
    cd88:	1a00001a 	bne	cdf8 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    cd8c:	e3580000 	cmp	r8, #0
    cd90:	e2487001 	sub	r7, r8, #1
    cd94:	0a00000b 	beq	cdc8 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    cd98:	e1a04006 	mov	r4, r6
    cd9c:	e0d410d1 	ldrsb	r1, [r4], #1
    cda0:	e1a00005 	mov	r0, r5
    cda4:	ebfffead 	bl	c860 <CScreenDevice::Write(char)>
    cda8:	e2643001 	rsb	r3, r4, #1
    cdac:	e0833007 	add	r3, r3, r7
    cdb0:	e1760003 	cmn	r6, r3
    cdb4:	1afffff8 	bne	cd9c <CScreenDevice::Write(void const*, unsigned int)+0x40>
    cdb8:	e2874001 	add	r4, r7, #1
    cdbc:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    cdc0:	e3530000 	cmp	r3, #0
    cdc4:	1a000008 	bne	cdec <CScreenDevice::Write(void const*, unsigned int)+0x90>
    cdc8:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    cdcc:	e3a02000 	mov	r2, #0
    cdd0:	e5852058 	str	r2, [r5, #88]	; 0x58
    cdd4:	e1530002 	cmp	r3, r2
    cdd8:	0a000000 	beq	cde0 <CScreenDevice::Write(void const*, unsigned int)+0x84>
    cddc:	ebfff5df 	bl	a560 <LeaveCritical>
    cde0:	f57ff05f 	dmb	sy
    cde4:	e1a00004 	mov	r0, r4
    cde8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cdec:	e1a00005 	mov	r0, r5
    cdf0:	ebfffc34 	bl	bec8 <CScreenDevice::InvertCursor() [clone .part.6]>
    cdf4:	eafffff3 	b	cdc8 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    cdf8:	e1a00005 	mov	r0, r5
    cdfc:	e2487001 	sub	r7, r8, #1
    ce00:	ebfffc30 	bl	bec8 <CScreenDevice::InvertCursor() [clone .part.6]>
    ce04:	e3580000 	cmp	r8, #0
    ce08:	1affffe2 	bne	cd98 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    ce0c:	e1a04008 	mov	r4, r8
    ce10:	eaffffe9 	b	cdbc <CScreenDevice::Write(void const*, unsigned int)+0x60>
    ce14:	ebfff5a3 	bl	a4a8 <EnterCritical>
    ce18:	eaffffd6 	b	cd78 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000ce1c <CScreenDevice::Initialize()>:
    ce1c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ce20:	e1a04000 	mov	r4, r0
    ce24:	e590500c 	ldr	r5, [r0, #12]
    ce28:	e24dd00c 	sub	sp, sp, #12
    ce2c:	e3550000 	cmp	r5, #0
    ce30:	0a00002b 	beq	cee4 <CScreenDevice::Initialize()+0xc8>
    ce34:	e5903004 	ldr	r3, [r0, #4]
    ce38:	e5902008 	ldr	r2, [r0, #8]
    ce3c:	e5803024 	str	r3, [r0, #36]	; 0x24
    ce40:	e0000392 	mul	r0, r2, r3
    ce44:	e5843020 	str	r3, [r4, #32]
    ce48:	e5842028 	str	r2, [r4, #40]	; 0x28
    ce4c:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    ce50:	e1a00080 	lsl	r0, r0, #1
    ce54:	e584001c 	str	r0, [r4, #28]
    ce58:	23e00000 	mvncs	r0, #0
    ce5c:	ebfff58c 	bl	a494 <operator new[](unsigned int)>
    ce60:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    ce64:	e5840018 	str	r0, [r4, #24]
    ce68:	e2846014 	add	r6, r4, #20
    ce6c:	e1a00006 	mov	r0, r6
    ce70:	eb0000a4 	bl	d108 <CCharGenerator::GetCharHeight() const>
    ce74:	e1a01000 	mov	r1, r0
    ce78:	e1a00007 	mov	r0, r7
    ce7c:	eb00109f 	bl	11100 <__aeabi_uidiv>
    ce80:	e1a05000 	mov	r5, r0
    ce84:	e1a00006 	mov	r0, r6
    ce88:	eb00009e 	bl	d108 <CCharGenerator::GetCharHeight() const>
    ce8c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    ce90:	e3a02000 	mov	r2, #0
    ce94:	e584203c 	str	r2, [r4, #60]	; 0x3c
    ce98:	e5843040 	str	r3, [r4, #64]	; 0x40
    ce9c:	e0050590 	mul	r5, r0, r5
    cea0:	e1a00004 	mov	r0, r4
    cea4:	e584502c 	str	r5, [r4, #44]	; 0x2c
    cea8:	e5845038 	str	r5, [r4, #56]	; 0x38
    ceac:	ebfffe4b 	bl	c7e0 <CScreenDevice::ClearDisplayEnd()>
    ceb0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    ceb4:	e3530000 	cmp	r3, #0
    ceb8:	1a000031 	bne	cf84 <CScreenDevice::Initialize()+0x168>
    cebc:	eb0001bf 	bl	d5c0 <CDeviceNameService::Get()>
    cec0:	e3011f3c 	movw	r1, #7996	; 0x1f3c
    cec4:	e1a02004 	mov	r2, r4
    cec8:	e3a03000 	mov	r3, #0
    cecc:	e3401001 	movt	r1, #1
    ced0:	e3a05001 	mov	r5, #1
    ced4:	eb000145 	bl	d3f0 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    ced8:	e1a00005 	mov	r0, r5
    cedc:	e28dd00c 	add	sp, sp, #12
    cee0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cee4:	e3a00024 	mov	r0, #36	; 0x24
    cee8:	ebfff568 	bl	a490 <operator new(unsigned int)>
    ceec:	e5942008 	ldr	r2, [r4, #8]
    cef0:	e5941004 	ldr	r1, [r4, #4]
    cef4:	e3a03010 	mov	r3, #16
    cef8:	e58d5004 	str	r5, [sp, #4]
    cefc:	e58d5000 	str	r5, [sp]
    cf00:	e1a06000 	mov	r6, r0
    cf04:	eb0010aa 	bl	111b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    cf08:	e5846010 	str	r6, [r4, #16]
    cf0c:	e1a00006 	mov	r0, r6
    cf10:	eb001111 	bl	1135c <CBcmFrameBuffer::Initialize()>
    cf14:	e3500000 	cmp	r0, #0
    cf18:	0affffee 	beq	ced8 <CScreenDevice::Initialize()+0xbc>
    cf1c:	e5940010 	ldr	r0, [r4, #16]
    cf20:	eb001148 	bl	11448 <CBcmFrameBuffer::GetDepth() const>
    cf24:	e3500010 	cmp	r0, #16
    cf28:	1affffea 	bne	ced8 <CScreenDevice::Initialize()+0xbc>
    cf2c:	e5940010 	ldr	r0, [r4, #16]
    cf30:	eb001146 	bl	11450 <CBcmFrameBuffer::GetBuffer() const>
    cf34:	e5840018 	str	r0, [r4, #24]
    cf38:	e5940010 	ldr	r0, [r4, #16]
    cf3c:	eb001145 	bl	11458 <CBcmFrameBuffer::GetSize() const>
    cf40:	e584001c 	str	r0, [r4, #28]
    cf44:	e5940010 	ldr	r0, [r4, #16]
    cf48:	eb00113c 	bl	11440 <CBcmFrameBuffer::GetPitch() const>
    cf4c:	e5840020 	str	r0, [r4, #32]
    cf50:	e5940010 	ldr	r0, [r4, #16]
    cf54:	eb001131 	bl	11420 <CBcmFrameBuffer::GetWidth() const>
    cf58:	e5840024 	str	r0, [r4, #36]	; 0x24
    cf5c:	e5940010 	ldr	r0, [r4, #16]
    cf60:	eb001130 	bl	11428 <CBcmFrameBuffer::GetHeight() const>
    cf64:	e5943020 	ldr	r3, [r4, #32]
    cf68:	e3130003 	tst	r3, #3
    cf6c:	01a030a3 	lsreq	r3, r3, #1
    cf70:	05843020 	streq	r3, [r4, #32]
    cf74:	e1a07000 	mov	r7, r0
    cf78:	e5840028 	str	r0, [r4, #40]	; 0x28
    cf7c:	0affffb9 	beq	ce68 <CScreenDevice::Initialize()+0x4c>
    cf80:	eaffffd4 	b	ced8 <CScreenDevice::Initialize()+0xbc>
    cf84:	e1a00004 	mov	r0, r4
    cf88:	ebfffbce 	bl	bec8 <CScreenDevice::InvertCursor() [clone .part.6]>
    cf8c:	eaffffca 	b	cebc <CScreenDevice::Initialize()+0xa0>

0000cf90 <CScreenDevice::InvertCursor()>:
    cf90:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    cf94:	e3530000 	cmp	r3, #0
    cf98:	012fff1e 	bxeq	lr
    cf9c:	eafffbc9 	b	bec8 <CScreenDevice::InvertCursor() [clone .part.6]>

0000cfa0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    cfa0:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    cfa4:	e15c0001 	cmp	ip, r1
    cfa8:	912fff1e 	bxls	lr
    cfac:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    cfb0:	e15c0002 	cmp	ip, r2
    cfb4:	8590c020 	ldrhi	ip, [r0, #32]
    cfb8:	85900018 	ldrhi	r0, [r0, #24]
    cfbc:	8022129c 	mlahi	r2, ip, r2, r1
    cfc0:	81a02082 	lslhi	r2, r2, #1
    cfc4:	818030b2 	strhhi	r3, [r0, r2]
    cfc8:	e12fff1e 	bx	lr

0000cfcc <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    cfcc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cfd0:	e1530001 	cmp	r3, r1
    cfd4:	9a000008 	bls	cffc <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    cfd8:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    cfdc:	e1530002 	cmp	r3, r2
    cfe0:	9a000005 	bls	cffc <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    cfe4:	e590c020 	ldr	ip, [r0, #32]
    cfe8:	e5903018 	ldr	r3, [r0, #24]
    cfec:	e022129c 	mla	r2, ip, r2, r1
    cff0:	e1a02082 	lsl	r2, r2, #1
    cff4:	e19300b2 	ldrh	r0, [r3, r2]
    cff8:	e12fff1e 	bx	lr
    cffc:	e3a00000 	mov	r0, #0
    d000:	e12fff1e 	bx	lr

0000d004 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    d004:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d008:	e1a05000 	mov	r5, r0
    d00c:	e24dd00c 	sub	sp, sp, #12
    d010:	e2800014 	add	r0, r0, #20
    d014:	e1a06002 	mov	r6, r2
    d018:	e1a04001 	mov	r4, r1
    d01c:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    d020:	eb000036 	bl	d100 <CCharGenerator::GetCharWidth() const>
    d024:	e2044003 	and	r4, r4, #3
    d028:	e2061003 	and	r1, r6, #3
    d02c:	e3013fe0 	movw	r3, #8160	; 0x1fe0
    d030:	e3403001 	movt	r3, #1
    d034:	e0831001 	add	r1, r3, r1
    d038:	e3a02b3e 	mov	r2, #63488	; 0xf800
    d03c:	e3a03000 	mov	r3, #0
    d040:	e58d2000 	str	r2, [sp]
    d044:	e1d111dc 	ldrsb	r1, [r1, #28]
    d048:	e0240094 	mla	r4, r4, r0, r0
    d04c:	e1a00005 	mov	r0, r5
    d050:	e0472004 	sub	r2, r7, r4
    d054:	ebfffd50 	bl	c59c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    d058:	e28dd00c 	add	sp, sp, #12
    d05c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000d060 <assertion_failed>:
    d060:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d064:	e1a05000 	mov	r5, r0
    d068:	e24dd01c 	sub	sp, sp, #28
    d06c:	e1a06001 	mov	r6, r1
    d070:	e1a07002 	mov	r7, r2
    d074:	e1a0400d 	mov	r4, sp
    d078:	eb000a3f 	bl	f97c <CInterruptSystem::DisableFIQ()>
    d07c:	f1080040 	cpsie	f
    d080:	e28d0008 	add	r0, sp, #8
    d084:	eb000502 	bl	e494 <CString::CString()>
    d088:	e1a03007 	mov	r3, r7
    d08c:	e1a02006 	mov	r2, r6
    d090:	e28d0008 	add	r0, sp, #8
    d094:	e3021004 	movw	r1, #8196	; 0x2004
    d098:	e3401001 	movt	r1, #1
    d09c:	eb00085b 	bl	f210 <CString::Format(char const*, ...)>
    d0a0:	e28d0008 	add	r0, sp, #8
    d0a4:	eb000511 	bl	e4f0 <CString::operator char const*() const>
    d0a8:	e1a01000 	mov	r1, r0
    d0ac:	e1a00004 	mov	r0, r4
    d0b0:	eb00007d 	bl	d2ac <debug_stacktrace(unsigned int const*, char const*)>
    d0b4:	eb00016e 	bl	d674 <CLogger::Get()>
    d0b8:	e1a04000 	mov	r4, r0
    d0bc:	e28d0008 	add	r0, sp, #8
    d0c0:	eb00050a 	bl	e4f0 <CString::operator char const*() const>
    d0c4:	e3a02000 	mov	r2, #0
    d0c8:	e58d5000 	str	r5, [sp]
    d0cc:	e302300c 	movw	r3, #8204	; 0x200c
    d0d0:	e3403001 	movt	r3, #1
    d0d4:	e1a01000 	mov	r1, r0
    d0d8:	e1a00004 	mov	r0, r4
    d0dc:	eb000240 	bl	d9e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d0e0:	e28d0008 	add	r0, sp, #8
    d0e4:	eb0004b7 	bl	e3c8 <CString::~CString()>
    d0e8:	e28dd01c 	add	sp, sp, #28
    d0ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000d0f0 <CCharGenerator::CCharGenerator()>:
    d0f0:	e3a03008 	mov	r3, #8
    d0f4:	e5803000 	str	r3, [r0]
    d0f8:	e12fff1e 	bx	lr

0000d0fc <CCharGenerator::~CCharGenerator()>:
    d0fc:	e12fff1e 	bx	lr

0000d100 <CCharGenerator::GetCharWidth() const>:
    d100:	e5900000 	ldr	r0, [r0]
    d104:	e12fff1e 	bx	lr

0000d108 <CCharGenerator::GetCharHeight() const>:
    d108:	e3a00013 	mov	r0, #19
    d10c:	e12fff1e 	bx	lr

0000d110 <CCharGenerator::GetUnderline() const>:
    d110:	e3a00010 	mov	r0, #16
    d114:	e12fff1e 	bx	lr

0000d118 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    d118:	e6ef1071 	uxtb	r1, r1
    d11c:	e92d4070 	push	{r4, r5, r6, lr}
    d120:	e2414021 	sub	r4, r1, #33	; 0x21
    d124:	e35400de 	cmp	r4, #222	; 0xde
    d128:	8a00000f 	bhi	d16c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    d12c:	e1a06003 	mov	r6, r3
    d130:	e5903000 	ldr	r3, [r0]
    d134:	e1a05002 	mov	r5, r2
    d138:	e1530002 	cmp	r3, r2
    d13c:	9a00000c 	bls	d174 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    d140:	e356000f 	cmp	r6, #15
    d144:	8a000008 	bhi	d16c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    d148:	e3021024 	movw	r1, #8228	; 0x2024
    d14c:	e3401001 	movt	r1, #1
    d150:	e0811204 	add	r1, r1, r4, lsl #4
    d154:	e3a02080 	mov	r2, #128	; 0x80
    d158:	e7d13006 	ldrb	r3, [r1, r6]
    d15c:	e0133552 	ands	r3, r3, r2, asr r5
    d160:	13a00001 	movne	r0, #1
    d164:	03a00000 	moveq	r0, #0
    d168:	e8bd8070 	pop	{r4, r5, r6, pc}
    d16c:	e3a00000 	mov	r0, #0
    d170:	e8bd8070 	pop	{r4, r5, r6, pc}
    d174:	e3021e14 	movw	r1, #11796	; 0x2e14
    d178:	e3020e28 	movw	r0, #11816	; 0x2e28
    d17c:	e3401001 	movt	r1, #1
    d180:	e3400001 	movt	r0, #1
    d184:	e3a0204e 	mov	r2, #78	; 0x4e
    d188:	ebffffb4 	bl	d060 <assertion_failed>
    d18c:	e356000f 	cmp	r6, #15
    d190:	9affffec 	bls	d148 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    d194:	eafffff4 	b	d16c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000d198 <debug_hexdump(void const*, unsigned int, char const*)>:
    d198:	e3520000 	cmp	r2, #0
    d19c:	e3023e40 	movw	r3, #11840	; 0x2e40
    d1a0:	e3403001 	movt	r3, #1
    d1a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1a8:	11a03002 	movne	r3, r2
    d1ac:	e24dd054 	sub	sp, sp, #84	; 0x54
    d1b0:	e1a06003 	mov	r6, r3
    d1b4:	e1a05001 	mov	r5, r1
    d1b8:	e1a04000 	mov	r4, r0
    d1bc:	e58d304c 	str	r3, [sp, #76]	; 0x4c
    d1c0:	eb00012b 	bl	d674 <CLogger::Get()>
    d1c4:	e58d4004 	str	r4, [sp, #4]
    d1c8:	e1a01006 	mov	r1, r6
    d1cc:	e58d5000 	str	r5, [sp]
    d1d0:	e3023e48 	movw	r3, #11848	; 0x2e48
    d1d4:	e3a02004 	mov	r2, #4
    d1d8:	e3403001 	movt	r3, #1
    d1dc:	eb000200 	bl	d9e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d1e0:	e3550000 	cmp	r5, #0
    d1e4:	0a00002a 	beq	d294 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    d1e8:	e3029e6c 	movw	r9, #11884	; 0x2e6c
    d1ec:	e3409001 	movt	r9, #1
    d1f0:	eb00011f 	bl	d674 <CLogger::Get()>
    d1f4:	e5d4800f 	ldrb	r8, [r4, #15]
    d1f8:	e5d4700e 	ldrb	r7, [r4, #14]
    d1fc:	e6ffc074 	uxth	ip, r4
    d200:	e5d4600d 	ldrb	r6, [r4, #13]
    d204:	e1a03009 	mov	r3, r9
    d208:	e5d4e00c 	ldrb	lr, [r4, #12]
    d20c:	e3a02004 	mov	r2, #4
    d210:	e5d4b00b 	ldrb	fp, [r4, #11]
    d214:	e2844010 	add	r4, r4, #16
    d218:	e554a006 	ldrb	sl, [r4, #-6]
    d21c:	e58d8040 	str	r8, [sp, #64]	; 0x40
    d220:	e5548007 	ldrb	r8, [r4, #-7]
    d224:	e58d703c 	str	r7, [sp, #60]	; 0x3c
    d228:	e5547008 	ldrb	r7, [r4, #-8]
    d22c:	e58d6038 	str	r6, [sp, #56]	; 0x38
    d230:	e5546009 	ldrb	r6, [r4, #-9]
    d234:	e58de034 	str	lr, [sp, #52]	; 0x34
    d238:	e554e00a 	ldrb	lr, [r4, #-10]
    d23c:	e58db030 	str	fp, [sp, #48]	; 0x30
    d240:	e554b00b 	ldrb	fp, [r4, #-11]
    d244:	e58da02c 	str	sl, [sp, #44]	; 0x2c
    d248:	e554a00c 	ldrb	sl, [r4, #-12]
    d24c:	e58d8028 	str	r8, [sp, #40]	; 0x28
    d250:	e554800d 	ldrb	r8, [r4, #-13]
    d254:	e58d7024 	str	r7, [sp, #36]	; 0x24
    d258:	e554700e 	ldrb	r7, [r4, #-14]
    d25c:	e58d6020 	str	r6, [sp, #32]
    d260:	e554600f 	ldrb	r6, [r4, #-15]
    d264:	e58de01c 	str	lr, [sp, #28]
    d268:	e554e010 	ldrb	lr, [r4, #-16]
    d26c:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
    d270:	e58db018 	str	fp, [sp, #24]
    d274:	e58da014 	str	sl, [sp, #20]
    d278:	e58d8010 	str	r8, [sp, #16]
    d27c:	e58d700c 	str	r7, [sp, #12]
    d280:	e58d6008 	str	r6, [sp, #8]
    d284:	e88d5000 	stm	sp, {ip, lr}
    d288:	eb0001d5 	bl	d9e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d28c:	e355000f 	cmp	r5, #15
    d290:	8a000001 	bhi	d29c <debug_hexdump(void const*, unsigned int, char const*)+0x104>
    d294:	e28dd054 	add	sp, sp, #84	; 0x54
    d298:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d29c:	e2555010 	subs	r5, r5, #16
    d2a0:	1affffd2 	bne	d1f0 <debug_hexdump(void const*, unsigned int, char const*)+0x58>
    d2a4:	e28dd054 	add	sp, sp, #84	; 0x54
    d2a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d2ac <debug_stacktrace(unsigned int const*, char const*)>:
    d2ac:	e3510000 	cmp	r1, #0
    d2b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d2b4:	e3027e40 	movw	r7, #11840	; 0x2e40
    d2b8:	e3016660 	movw	r6, #5728	; 0x1660
    d2bc:	e3407001 	movt	r7, #1
    d2c0:	e3028ec4 	movw	r8, #11972	; 0x2ec4
    d2c4:	e24dd008 	sub	sp, sp, #8
    d2c8:	11a07001 	movne	r7, r1
    d2cc:	e3406001 	movt	r6, #1
    d2d0:	e3408001 	movt	r8, #1
    d2d4:	e1a05000 	mov	r5, r0
    d2d8:	e3a04000 	mov	r4, #0
    d2dc:	ea000003 	b	d2f0 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    d2e0:	e2844001 	add	r4, r4, #1
    d2e4:	e2855004 	add	r5, r5, #4
    d2e8:	e3540040 	cmp	r4, #64	; 0x40
    d2ec:	0a000010 	beq	d334 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    d2f0:	e5953000 	ldr	r3, [r5]
    d2f4:	e3530902 	cmp	r3, #32768	; 0x8000
    d2f8:	3afffff8 	bcc	d2e0 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    d2fc:	e1530006 	cmp	r3, r6
    d300:	2afffff6 	bcs	d2e0 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    d304:	eb0000da 	bl	d674 <CLogger::Get()>
    d308:	e595c000 	ldr	ip, [r5]
    d30c:	e1a03008 	mov	r3, r8
    d310:	e58d4000 	str	r4, [sp]
    d314:	e3a02004 	mov	r2, #4
    d318:	e1a01007 	mov	r1, r7
    d31c:	e58dc004 	str	ip, [sp, #4]
    d320:	e2844001 	add	r4, r4, #1
    d324:	eb0001ae 	bl	d9e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d328:	e3540040 	cmp	r4, #64	; 0x40
    d32c:	e2855004 	add	r5, r5, #4
    d330:	1affffee 	bne	d2f0 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    d334:	e28dd008 	add	sp, sp, #8
    d338:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d33c <CDeviceNameService::CDeviceNameService()>:
    d33c:	e92d4070 	push	{r4, r5, r6, lr}
    d340:	e3035908 	movw	r5, #14600	; 0x3908
    d344:	e3405001 	movt	r5, #1
    d348:	e3a03000 	mov	r3, #0
    d34c:	e1a04000 	mov	r4, r0
    d350:	e5803004 	str	r3, [r0, #4]
    d354:	e5952000 	ldr	r2, [r5]
    d358:	e5803000 	str	r3, [r0]
    d35c:	e1520003 	cmp	r2, r3
    d360:	0a000005 	beq	d37c <CDeviceNameService::CDeviceNameService()+0x40>
    d364:	e3021ed8 	movw	r1, #11992	; 0x2ed8
    d368:	e3020ef0 	movw	r0, #12016	; 0x2ef0
    d36c:	e3401001 	movt	r1, #1
    d370:	e3400001 	movt	r0, #1
    d374:	e3a0201e 	mov	r2, #30
    d378:	ebffff38 	bl	d060 <assertion_failed>
    d37c:	e5854000 	str	r4, [r5]
    d380:	e1a00004 	mov	r0, r4
    d384:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d388 <CDeviceNameService::~CDeviceNameService()>:
    d388:	e5903000 	ldr	r3, [r0]
    d38c:	e92d4070 	push	{r4, r5, r6, lr}
    d390:	e3530000 	cmp	r3, #0
    d394:	e1a05000 	mov	r5, r0
    d398:	0a00000e 	beq	d3d8 <CDeviceNameService::~CDeviceNameService()+0x50>
    d39c:	e3a06000 	mov	r6, #0
    d3a0:	e5930004 	ldr	r0, [r3, #4]
    d3a4:	e5934000 	ldr	r4, [r3]
    d3a8:	e3500000 	cmp	r0, #0
    d3ac:	0a000000 	beq	d3b4 <CDeviceNameService::~CDeviceNameService()+0x2c>
    d3b0:	ebfff439 	bl	a49c <operator delete[](void*)>
    d3b4:	e5953000 	ldr	r3, [r5]
    d3b8:	e3a01010 	mov	r1, #16
    d3bc:	e5836004 	str	r6, [r3, #4]
    d3c0:	e1a00003 	mov	r0, r3
    d3c4:	e5836008 	str	r6, [r3, #8]
    d3c8:	ebfff434 	bl	a4a0 <operator delete(void*, unsigned int)>
    d3cc:	e2543000 	subs	r3, r4, #0
    d3d0:	e5854000 	str	r4, [r5]
    d3d4:	1afffff1 	bne	d3a0 <CDeviceNameService::~CDeviceNameService()+0x18>
    d3d8:	e3033908 	movw	r3, #14600	; 0x3908
    d3dc:	e3403001 	movt	r3, #1
    d3e0:	e3a02000 	mov	r2, #0
    d3e4:	e1a00005 	mov	r0, r5
    d3e8:	e5832000 	str	r2, [r3]
    d3ec:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d3f0 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    d3f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d3f4:	e1a05000 	mov	r5, r0
    d3f8:	e5900004 	ldr	r0, [r0, #4]
    d3fc:	e1a06001 	mov	r6, r1
    d400:	e1a07002 	mov	r7, r2
    d404:	e1a08003 	mov	r8, r3
    d408:	e3500000 	cmp	r0, #0
    d40c:	1a000017 	bne	d470 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x80>
    d410:	e3a00010 	mov	r0, #16
    d414:	ebfff41d 	bl	a490 <operator new(unsigned int)>
    d418:	e3560000 	cmp	r6, #0
    d41c:	e1a04000 	mov	r4, r0
    d420:	0a00001b 	beq	d494 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xa4>
    d424:	e1a00006 	mov	r0, r6
    d428:	ebfff7a6 	bl	b2c8 <strlen>
    d42c:	e2800001 	add	r0, r0, #1
    d430:	ebfff417 	bl	a494 <operator new[](unsigned int)>
    d434:	e1a01006 	mov	r1, r6
    d438:	e5840004 	str	r0, [r4, #4]
    d43c:	ebfff7c6 	bl	b35c <strcpy>
    d440:	e3570000 	cmp	r7, #0
    d444:	0a00000b 	beq	d478 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x88>
    d448:	e5952004 	ldr	r2, [r5, #4]
    d44c:	e5953000 	ldr	r3, [r5]
    d450:	e3520000 	cmp	r2, #0
    d454:	e5847008 	str	r7, [r4, #8]
    d458:	e584800c 	str	r8, [r4, #12]
    d45c:	e5843000 	str	r3, [r4]
    d460:	e5854000 	str	r4, [r5]
    d464:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    d468:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    d46c:	eafff43b 	b	a560 <LeaveCritical>
    d470:	ebfff40c 	bl	a4a8 <EnterCritical>
    d474:	eaffffe5 	b	d410 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
    d478:	e3021ed8 	movw	r1, #11992	; 0x2ed8
    d47c:	e3020f08 	movw	r0, #12040	; 0x2f08
    d480:	e3401001 	movt	r1, #1
    d484:	e3400001 	movt	r0, #1
    d488:	e3a0203f 	mov	r2, #63	; 0x3f
    d48c:	ebfffef3 	bl	d060 <assertion_failed>
    d490:	eaffffec 	b	d448 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    d494:	e3021ed8 	movw	r1, #11992	; 0x2ed8
    d498:	e3020efc 	movw	r0, #12028	; 0x2efc
    d49c:	e3401001 	movt	r1, #1
    d4a0:	e3400001 	movt	r0, #1
    d4a4:	e3a0203a 	mov	r2, #58	; 0x3a
    d4a8:	ebfffeec 	bl	d060 <assertion_failed>
    d4ac:	eaffffdc 	b	d424 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

0000d4b0 <CDeviceNameService::GetDevice(char const*, int)>:
    d4b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d4b4:	e2515000 	subs	r5, r1, #0
    d4b8:	e1a07000 	mov	r7, r0
    d4bc:	e1a06002 	mov	r6, r2
    d4c0:	0a000037 	beq	d5a4 <CDeviceNameService::GetDevice(char const*, int)+0xf4>
    d4c4:	e5970004 	ldr	r0, [r7, #4]
    d4c8:	e3500000 	cmp	r0, #0
    d4cc:	1a00001a 	bne	d53c <CDeviceNameService::GetDevice(char const*, int)+0x8c>
    d4d0:	e5974000 	ldr	r4, [r7]
    d4d4:	e3540000 	cmp	r4, #0
    d4d8:	0a00001f 	beq	d55c <CDeviceNameService::GetDevice(char const*, int)+0xac>
    d4dc:	e3029ed8 	movw	r9, #11992	; 0x2ed8
    d4e0:	e3028f18 	movw	r8, #12056	; 0x2f18
    d4e4:	e3409001 	movt	r9, #1
    d4e8:	e3408001 	movt	r8, #1
    d4ec:	ea000009 	b	d518 <CDeviceNameService::GetDevice(char const*, int)+0x68>
    d4f0:	e1a00005 	mov	r0, r5
    d4f4:	ebfff77d 	bl	b2f0 <strcmp>
    d4f8:	e3500000 	cmp	r0, #0
    d4fc:	1a000002 	bne	d50c <CDeviceNameService::GetDevice(char const*, int)+0x5c>
    d500:	e594300c 	ldr	r3, [r4, #12]
    d504:	e1530006 	cmp	r3, r6
    d508:	0a000016 	beq	d568 <CDeviceNameService::GetDevice(char const*, int)+0xb8>
    d50c:	e5944000 	ldr	r4, [r4]
    d510:	e3540000 	cmp	r4, #0
    d514:	0a00000c 	beq	d54c <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    d518:	e5941004 	ldr	r1, [r4, #4]
    d51c:	e3510000 	cmp	r1, #0
    d520:	1afffff2 	bne	d4f0 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    d524:	e1a01009 	mov	r1, r9
    d528:	e3a02053 	mov	r2, #83	; 0x53
    d52c:	e1a00008 	mov	r0, r8
    d530:	ebfffeca 	bl	d060 <assertion_failed>
    d534:	e5941004 	ldr	r1, [r4, #4]
    d538:	eaffffec 	b	d4f0 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    d53c:	ebfff3d9 	bl	a4a8 <EnterCritical>
    d540:	e5974000 	ldr	r4, [r7]
    d544:	e3540000 	cmp	r4, #0
    d548:	1affffe3 	bne	d4dc <CDeviceNameService::GetDevice(char const*, int)+0x2c>
    d54c:	e5973004 	ldr	r3, [r7, #4]
    d550:	e3530000 	cmp	r3, #0
    d554:	0a000000 	beq	d55c <CDeviceNameService::GetDevice(char const*, int)+0xac>
    d558:	ebfff400 	bl	a560 <LeaveCritical>
    d55c:	e3a04000 	mov	r4, #0
    d560:	e1a00004 	mov	r0, r4
    d564:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d568:	e5973004 	ldr	r3, [r7, #4]
    d56c:	e5944008 	ldr	r4, [r4, #8]
    d570:	e3530000 	cmp	r3, #0
    d574:	1a000008 	bne	d59c <CDeviceNameService::GetDevice(char const*, int)+0xec>
    d578:	e3540000 	cmp	r4, #0
    d57c:	1afffff7 	bne	d560 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    d580:	e3021ed8 	movw	r1, #11992	; 0x2ed8
    d584:	e3020f2c 	movw	r0, #12076	; 0x2f2c
    d588:	e3401001 	movt	r1, #1
    d58c:	e3400001 	movt	r0, #1
    d590:	e3a0205b 	mov	r2, #91	; 0x5b
    d594:	ebfffeb1 	bl	d060 <assertion_failed>
    d598:	eafffff0 	b	d560 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    d59c:	ebfff3ef 	bl	a560 <LeaveCritical>
    d5a0:	eafffff4 	b	d578 <CDeviceNameService::GetDevice(char const*, int)+0xc8>
    d5a4:	e3021ed8 	movw	r1, #11992	; 0x2ed8
    d5a8:	e3020efc 	movw	r0, #12028	; 0x2efc
    d5ac:	e3401001 	movt	r1, #1
    d5b0:	e3400001 	movt	r0, #1
    d5b4:	e3a0204c 	mov	r2, #76	; 0x4c
    d5b8:	ebfffea8 	bl	d060 <assertion_failed>
    d5bc:	eaffffc0 	b	d4c4 <CDeviceNameService::GetDevice(char const*, int)+0x14>

0000d5c0 <CDeviceNameService::Get()>:
    d5c0:	e92d4010 	push	{r4, lr}
    d5c4:	e3034908 	movw	r4, #14600	; 0x3908
    d5c8:	e3404001 	movt	r4, #1
    d5cc:	e5940000 	ldr	r0, [r4]
    d5d0:	e3500000 	cmp	r0, #0
    d5d4:	18bd8010 	popne	{r4, pc}
    d5d8:	e3a02069 	mov	r2, #105	; 0x69
    d5dc:	e3021ed8 	movw	r1, #11992	; 0x2ed8
    d5e0:	e3020f3c 	movw	r0, #12092	; 0x2f3c
    d5e4:	e3401001 	movt	r1, #1
    d5e8:	e3400001 	movt	r0, #1
    d5ec:	ebfffe9b 	bl	d060 <assertion_failed>
    d5f0:	e5940000 	ldr	r0, [r4]
    d5f4:	e8bd8010 	pop	{r4, pc}

0000d5f8 <CLogger::CLogger(unsigned int, CTimer*)>:
    d5f8:	e92d4010 	push	{r4, lr}
    d5fc:	e1a04000 	mov	r4, r0
    d600:	e5801000 	str	r1, [r0]
    d604:	e3a03000 	mov	r3, #0
    d608:	e5802004 	str	r2, [r0, #4]
    d60c:	e3a0c001 	mov	ip, #1
    d610:	e5843008 	str	r3, [r4, #8]
    d614:	e3a00901 	mov	r0, #16384	; 0x4000
    d618:	e584300c 	str	r3, [r4, #12]
    d61c:	e5843010 	str	r3, [r4, #16]
    d620:	e5843014 	str	r3, [r4, #20]
    d624:	e584c018 	str	ip, [r4, #24]
    d628:	ebfff399 	bl	a494 <operator new[](unsigned int)>
    d62c:	e303390c 	movw	r3, #14604	; 0x390c
    d630:	e3403001 	movt	r3, #1
    d634:	e5834000 	str	r4, [r3]
    d638:	e584000c 	str	r0, [r4, #12]
    d63c:	e1a00004 	mov	r0, r4
    d640:	e8bd8010 	pop	{r4, pc}

0000d644 <CLogger::~CLogger()>:
    d644:	e92d4010 	push	{r4, lr}
    d648:	e1a04000 	mov	r4, r0
    d64c:	e590000c 	ldr	r0, [r0, #12]
    d650:	e3a02000 	mov	r2, #0
    d654:	e303390c 	movw	r3, #14604	; 0x390c
    d658:	e3403001 	movt	r3, #1
    d65c:	e1500002 	cmp	r0, r2
    d660:	e5832000 	str	r2, [r3]
    d664:	0a000000 	beq	d66c <CLogger::~CLogger()+0x28>
    d668:	ebfff38b 	bl	a49c <operator delete[](void*)>
    d66c:	e1a00004 	mov	r0, r4
    d670:	e8bd8010 	pop	{r4, pc}

0000d674 <CLogger::Get()>:
    d674:	e303390c 	movw	r3, #14604	; 0x390c
    d678:	e3403001 	movt	r3, #1
    d67c:	e5930000 	ldr	r0, [r3]
    d680:	e12fff1e 	bx	lr

0000d684 <CLogger::Write(char const*)>:
    d684:	e92d4070 	push	{r4, r5, r6, lr}
    d688:	e1a04000 	mov	r4, r0
    d68c:	e1a00001 	mov	r0, r1
    d690:	e1a05001 	mov	r5, r1
    d694:	ebfff70b 	bl	b2c8 <strlen>
    d698:	e1a01005 	mov	r1, r5
    d69c:	e1a06000 	mov	r6, r0
    d6a0:	e5940008 	ldr	r0, [r4, #8]
    d6a4:	e1a02006 	mov	r2, r6
    d6a8:	e5903000 	ldr	r3, [r0]
    d6ac:	e593300c 	ldr	r3, [r3, #12]
    d6b0:	e12fff33 	blx	r3
    d6b4:	e5940018 	ldr	r0, [r4, #24]
    d6b8:	e3500000 	cmp	r0, #0
    d6bc:	1a000017 	bne	d720 <CLogger::Write(char const*)+0x9c>
    d6c0:	e0850006 	add	r0, r5, r6
    d6c4:	e1550000 	cmp	r5, r0
    d6c8:	0a00000f 	beq	d70c <CLogger::Write(char const*)+0x88>
    d6cc:	e0d530d1 	ldrsb	r3, [r5], #1
    d6d0:	e353000d 	cmp	r3, #13
    d6d4:	0afffffa 	beq	d6c4 <CLogger::Write(char const*)+0x40>
    d6d8:	e5941010 	ldr	r1, [r4, #16]
    d6dc:	e594c00c 	ldr	ip, [r4, #12]
    d6e0:	e7cc3001 	strb	r3, [ip, r1]
    d6e4:	e5943010 	ldr	r3, [r4, #16]
    d6e8:	e5941014 	ldr	r1, [r4, #20]
    d6ec:	e2833001 	add	r3, r3, #1
    d6f0:	e7ed3053 	ubfx	r3, r3, #0, #14
    d6f4:	e5843010 	str	r3, [r4, #16]
    d6f8:	e1530001 	cmp	r3, r1
    d6fc:	1afffff0 	bne	d6c4 <CLogger::Write(char const*)+0x40>
    d700:	e2433001 	sub	r3, r3, #1
    d704:	e7ed3053 	ubfx	r3, r3, #0, #14
    d708:	e5843010 	str	r3, [r4, #16]
    d70c:	e5943018 	ldr	r3, [r4, #24]
    d710:	e3530000 	cmp	r3, #0
    d714:	08bd8070 	popeq	{r4, r5, r6, pc}
    d718:	e8bd4070 	pop	{r4, r5, r6, lr}
    d71c:	eafff38f 	b	a560 <LeaveCritical>
    d720:	ebfff360 	bl	a4a8 <EnterCritical>
    d724:	eaffffe5 	b	d6c0 <CLogger::Write(char const*)+0x3c>

0000d728 <CLogger::Read(void*, unsigned int)>:
    d728:	e92d4070 	push	{r4, r5, r6, lr}
    d72c:	e1a04000 	mov	r4, r0
    d730:	e5900018 	ldr	r0, [r0, #24]
    d734:	e1a05001 	mov	r5, r1
    d738:	e1a06002 	mov	r6, r2
    d73c:	e3500000 	cmp	r0, #0
    d740:	1a00001b 	bne	d7b4 <CLogger::Read(void*, unsigned int)+0x8c>
    d744:	e5942010 	ldr	r2, [r4, #16]
    d748:	e5943014 	ldr	r3, [r4, #20]
    d74c:	e1520003 	cmp	r2, r3
    d750:	0a000020 	beq	d7d8 <CLogger::Read(void*, unsigned int)+0xb0>
    d754:	e1a01005 	mov	r1, r5
    d758:	e3a05000 	mov	r5, #0
    d75c:	ea00000a 	b	d78c <CLogger::Read(void*, unsigned int)+0x64>
    d760:	e594000c 	ldr	r0, [r4, #12]
    d764:	e2855001 	add	r5, r5, #1
    d768:	e19030d3 	ldrsb	r3, [r0, r3]
    d76c:	e4c13001 	strb	r3, [r1], #1
    d770:	e5943014 	ldr	r3, [r4, #20]
    d774:	e5940010 	ldr	r0, [r4, #16]
    d778:	e2833001 	add	r3, r3, #1
    d77c:	e7ed3053 	ubfx	r3, r3, #0, #14
    d780:	e5843014 	str	r3, [r4, #20]
    d784:	e1530000 	cmp	r3, r0
    d788:	0a000001 	beq	d794 <CLogger::Read(void*, unsigned int)+0x6c>
    d78c:	e1550006 	cmp	r5, r6
    d790:	1afffff2 	bne	d760 <CLogger::Read(void*, unsigned int)+0x38>
    d794:	e5943018 	ldr	r3, [r4, #24]
    d798:	e3530000 	cmp	r3, #0
    d79c:	1a000001 	bne	d7a8 <CLogger::Read(void*, unsigned int)+0x80>
    d7a0:	e1a00005 	mov	r0, r5
    d7a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d7a8:	ebfff36c 	bl	a560 <LeaveCritical>
    d7ac:	e1a00005 	mov	r0, r5
    d7b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d7b4:	ebfff33b 	bl	a4a8 <EnterCritical>
    d7b8:	e5942010 	ldr	r2, [r4, #16]
    d7bc:	e5943014 	ldr	r3, [r4, #20]
    d7c0:	e1520003 	cmp	r2, r3
    d7c4:	1affffe2 	bne	d754 <CLogger::Read(void*, unsigned int)+0x2c>
    d7c8:	e5943018 	ldr	r3, [r4, #24]
    d7cc:	e3530000 	cmp	r3, #0
    d7d0:	0a000000 	beq	d7d8 <CLogger::Read(void*, unsigned int)+0xb0>
    d7d4:	ebfff361 	bl	a560 <LeaveCritical>
    d7d8:	e3e05000 	mvn	r5, #0
    d7dc:	e1a00005 	mov	r0, r5
    d7e0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d7e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    d7e4:	e590c000 	ldr	ip, [r0]
    d7e8:	e152000c 	cmp	r2, ip
    d7ec:	812fff1e 	bxhi	lr
    d7f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d7f4:	e24dd020 	sub	sp, sp, #32
    d7f8:	e1a04000 	mov	r4, r0
    d7fc:	e1a05002 	mov	r5, r2
    d800:	e1a0000d 	mov	r0, sp
    d804:	e1a07003 	mov	r7, r3
    d808:	e1a06001 	mov	r6, r1
    d80c:	eb000320 	bl	e494 <CString::CString()>
    d810:	e3550000 	cmp	r5, #0
    d814:	0a000049 	beq	d940 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    d818:	e5940004 	ldr	r0, [r4, #4]
    d81c:	e3500000 	cmp	r0, #0
    d820:	0a000032 	beq	d8f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    d824:	ebfff439 	bl	a910 <CTimer::GetTimeString()>
    d828:	e2508000 	subs	r8, r0, #0
    d82c:	0a00000b 	beq	d860 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    d830:	eb00032e 	bl	e4f0 <CString::operator char const*() const>
    d834:	e1a01000 	mov	r1, r0
    d838:	e1a0000d 	mov	r0, sp
    d83c:	eb000346 	bl	e55c <CString::Append(char const*)>
    d840:	e1a0000d 	mov	r0, sp
    d844:	e3021f50 	movw	r1, #12112	; 0x2f50
    d848:	e3401001 	movt	r1, #1
    d84c:	eb000342 	bl	e55c <CString::Append(char const*)>
    d850:	e5983000 	ldr	r3, [r8]
    d854:	e1a00008 	mov	r0, r8
    d858:	e5933004 	ldr	r3, [r3, #4]
    d85c:	e12fff33 	blx	r3
    d860:	e1a01006 	mov	r1, r6
    d864:	e1a0000d 	mov	r0, sp
    d868:	e28d6010 	add	r6, sp, #16
    d86c:	eb00033a 	bl	e55c <CString::Append(char const*)>
    d870:	e1a0000d 	mov	r0, sp
    d874:	e3021f54 	movw	r1, #12116	; 0x2f54
    d878:	e3401001 	movt	r1, #1
    d87c:	eb000336 	bl	e55c <CString::Append(char const*)>
    d880:	e1a00006 	mov	r0, r6
    d884:	eb000302 	bl	e494 <CString::CString()>
    d888:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d88c:	e1a01007 	mov	r1, r7
    d890:	e1a00006 	mov	r0, r6
    d894:	eb000455 	bl	e9f0 <CString::FormatV(char const*, std::__va_list)>
    d898:	e1a00006 	mov	r0, r6
    d89c:	eb000313 	bl	e4f0 <CString::operator char const*() const>
    d8a0:	e1a01000 	mov	r1, r0
    d8a4:	e1a0000d 	mov	r0, sp
    d8a8:	eb00032b 	bl	e55c <CString::Append(char const*)>
    d8ac:	e3550000 	cmp	r5, #0
    d8b0:	0a00003c 	beq	d9a8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    d8b4:	e1a0000d 	mov	r0, sp
    d8b8:	e30116d0 	movw	r1, #5840	; 0x16d0
    d8bc:	e3401001 	movt	r1, #1
    d8c0:	eb000325 	bl	e55c <CString::Append(char const*)>
    d8c4:	e1a0000d 	mov	r0, sp
    d8c8:	eb000308 	bl	e4f0 <CString::operator char const*() const>
    d8cc:	e1a01000 	mov	r1, r0
    d8d0:	e1a00004 	mov	r0, r4
    d8d4:	ebffff6a 	bl	d684 <CLogger::Write(char const*)>
    d8d8:	e1a00006 	mov	r0, r6
    d8dc:	eb0002b9 	bl	e3c8 <CString::~CString()>
    d8e0:	e1a0000d 	mov	r0, sp
    d8e4:	eb0002b7 	bl	e3c8 <CString::~CString()>
    d8e8:	e28dd020 	add	sp, sp, #32
    d8ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d8f0:	e1a01006 	mov	r1, r6
    d8f4:	e1a0000d 	mov	r0, sp
    d8f8:	e28d6010 	add	r6, sp, #16
    d8fc:	eb000316 	bl	e55c <CString::Append(char const*)>
    d900:	e1a0000d 	mov	r0, sp
    d904:	e3021f54 	movw	r1, #12116	; 0x2f54
    d908:	e3401001 	movt	r1, #1
    d90c:	eb000312 	bl	e55c <CString::Append(char const*)>
    d910:	e1a00006 	mov	r0, r6
    d914:	eb0002de 	bl	e494 <CString::CString()>
    d918:	e1a01007 	mov	r1, r7
    d91c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d920:	e1a00006 	mov	r0, r6
    d924:	eb000431 	bl	e9f0 <CString::FormatV(char const*, std::__va_list)>
    d928:	e1a00006 	mov	r0, r6
    d92c:	eb0002ef 	bl	e4f0 <CString::operator char const*() const>
    d930:	e1a01000 	mov	r1, r0
    d934:	e1a0000d 	mov	r0, sp
    d938:	eb000307 	bl	e55c <CString::Append(char const*)>
    d93c:	eaffffdc 	b	d8b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    d940:	e3021f48 	movw	r1, #12104	; 0x2f48
    d944:	e1a0000d 	mov	r0, sp
    d948:	e3401001 	movt	r1, #1
    d94c:	eb0002ed 	bl	e508 <CString::operator=(char const*)>
    d950:	e5940004 	ldr	r0, [r4, #4]
    d954:	e3500000 	cmp	r0, #0
    d958:	1affffb1 	bne	d824 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    d95c:	e1a01006 	mov	r1, r6
    d960:	e1a0000d 	mov	r0, sp
    d964:	e28d6010 	add	r6, sp, #16
    d968:	eb0002fb 	bl	e55c <CString::Append(char const*)>
    d96c:	e1a0000d 	mov	r0, sp
    d970:	e3021f54 	movw	r1, #12116	; 0x2f54
    d974:	e3401001 	movt	r1, #1
    d978:	eb0002f7 	bl	e55c <CString::Append(char const*)>
    d97c:	e1a00006 	mov	r0, r6
    d980:	eb0002c3 	bl	e494 <CString::CString()>
    d984:	e1a01007 	mov	r1, r7
    d988:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d98c:	e1a00006 	mov	r0, r6
    d990:	eb000416 	bl	e9f0 <CString::FormatV(char const*, std::__va_list)>
    d994:	e1a00006 	mov	r0, r6
    d998:	eb0002d4 	bl	e4f0 <CString::operator char const*() const>
    d99c:	e1a01000 	mov	r1, r0
    d9a0:	e1a0000d 	mov	r0, sp
    d9a4:	eb0002ec 	bl	e55c <CString::Append(char const*)>
    d9a8:	e1a0000d 	mov	r0, sp
    d9ac:	e3021f58 	movw	r1, #12120	; 0x2f58
    d9b0:	e3401001 	movt	r1, #1
    d9b4:	eb0002e8 	bl	e55c <CString::Append(char const*)>
    d9b8:	e1a0000d 	mov	r0, sp
    d9bc:	e30116d0 	movw	r1, #5840	; 0x16d0
    d9c0:	e3401001 	movt	r1, #1
    d9c4:	eb0002e4 	bl	e55c <CString::Append(char const*)>
    d9c8:	e1a0000d 	mov	r0, sp
    d9cc:	eb0002c7 	bl	e4f0 <CString::operator char const*() const>
    d9d0:	e1a01000 	mov	r1, r0
    d9d4:	e1a00004 	mov	r0, r4
    d9d8:	ebffff29 	bl	d684 <CLogger::Write(char const*)>
    d9dc:	ebfff2fc 	bl	a5d4 <halt>
    d9e0:	eaffffbc 	b	d8d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000d9e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    d9e4:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    d9e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d9ec:	e24dd010 	sub	sp, sp, #16
    d9f0:	e28dc018 	add	ip, sp, #24
    d9f4:	e59d3014 	ldr	r3, [sp, #20]
    d9f8:	e58dc000 	str	ip, [sp]
    d9fc:	e58dc00c 	str	ip, [sp, #12]
    da00:	ebffff77 	bl	d7e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    da04:	e28dd010 	add	sp, sp, #16
    da08:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    da0c:	e28dd004 	add	sp, sp, #4
    da10:	e12fff1e 	bx	lr

0000da14 <CLogger::Initialize(CDevice*)>:
    da14:	e92d4010 	push	{r4, lr}
    da18:	e24dd008 	sub	sp, sp, #8
    da1c:	e5801008 	str	r1, [r0, #8]
    da20:	e1a04000 	mov	r4, r0
    da24:	eb000a89 	bl	10450 <CMachineInfo::Get()>
    da28:	eb000a16 	bl	10288 <CMachineInfo::GetMachineName() const>
    da2c:	e3a02003 	mov	r2, #3
    da30:	e3023f60 	movw	r3, #12128	; 0x2f60
    da34:	e3021f78 	movw	r1, #12152	; 0x2f78
    da38:	e3403001 	movt	r3, #1
    da3c:	e3401001 	movt	r1, #1
    da40:	e58d0000 	str	r0, [sp]
    da44:	e1a00004 	mov	r0, r4
    da48:	ebffffe5 	bl	d9e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    da4c:	e3a00001 	mov	r0, #1
    da50:	e28dd008 	add	sp, sp, #8
    da54:	e8bd8010 	pop	{r4, pc}

0000da58 <CSerialDevice::Read(void*, unsigned int)>:
    da58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    da5c:	e2515000 	subs	r5, r1, #0
    da60:	e1a04000 	mov	r4, r0
    da64:	e1a07002 	mov	r7, r2
    da68:	0a000055 	beq	dbc4 <CSerialDevice::Read(void*, unsigned int)+0x16c>
    da6c:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    da70:	e3530000 	cmp	r3, #0
    da74:	0a000031 	beq	db40 <CSerialDevice::Read(void*, unsigned int)+0xe8>
    da78:	e2846a01 	add	r6, r4, #4096	; 0x1000
    da7c:	e59600c8 	ldr	r0, [r6, #200]	; 0xc8
    da80:	e3500000 	cmp	r0, #0
    da84:	1a000020 	bne	db0c <CSerialDevice::Read(void*, unsigned int)+0xb4>
    da88:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    da8c:	e3530000 	cmp	r3, #0
    da90:	ba000021 	blt	db1c <CSerialDevice::Read(void*, unsigned int)+0xc4>
    da94:	e3570000 	cmp	r7, #0
    da98:	0a000016 	beq	daf8 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    da9c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    daa0:	e59428b4 	ldr	r2, [r4, #2228]	; 0x8b4
    daa4:	e1520003 	cmp	r2, r3
    daa8:	0a000050 	beq	dbf0 <CSerialDevice::Read(void*, unsigned int)+0x198>
    daac:	e0852007 	add	r2, r5, r7
    dab0:	e1a01005 	mov	r1, r5
    dab4:	ea000003 	b	dac8 <CSerialDevice::Read(void*, unsigned int)+0x70>
    dab8:	e594c8b0 	ldr	ip, [r4, #2224]	; 0x8b0
    dabc:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    dac0:	e15c0003 	cmp	ip, r3
    dac4:	0a00000b 	beq	daf8 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    dac8:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    dacc:	e0840003 	add	r0, r4, r3
    dad0:	e2833001 	add	r3, r3, #1
    dad4:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    dad8:	e5d030b0 	ldrb	r3, [r0, #176]	; 0xb0
    dadc:	e4c13001 	strb	r3, [r1], #1
    dae0:	e1510002 	cmp	r1, r2
    dae4:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    dae8:	e0417005 	sub	r7, r1, r5
    daec:	e7ea3053 	ubfx	r3, r3, #0, #11
    daf0:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    daf4:	1affffef 	bne	dab8 <CSerialDevice::Read(void*, unsigned int)+0x60>
    daf8:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    dafc:	e3530000 	cmp	r3, #0
    db00:	1a00000b 	bne	db34 <CSerialDevice::Read(void*, unsigned int)+0xdc>
    db04:	e1a00007 	mov	r0, r7
    db08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    db0c:	ebfff265 	bl	a4a8 <EnterCritical>
    db10:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    db14:	e3530000 	cmp	r3, #0
    db18:	aaffffdd 	bge	da94 <CSerialDevice::Read(void*, unsigned int)+0x3c>
    db1c:	e3a03000 	mov	r3, #0
    db20:	e59478b8 	ldr	r7, [r4, #2232]	; 0x8b8
    db24:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    db28:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    db2c:	e3530000 	cmp	r3, #0
    db30:	0afffff3 	beq	db04 <CSerialDevice::Read(void*, unsigned int)+0xac>
    db34:	ebfff289 	bl	a560 <LeaveCritical>
    db38:	e1a00007 	mov	r0, r7
    db3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    db40:	e3570000 	cmp	r7, #0
    db44:	0affffee 	beq	db04 <CSerialDevice::Read(void*, unsigned int)+0xac>
    db48:	e3a0ca01 	mov	ip, #4096	; 0x1000
    db4c:	e343cf20 	movt	ip, #16160	; 0x3f20
    db50:	e59c2018 	ldr	r2, [ip, #24]
    db54:	e3120010 	tst	r2, #16
    db58:	1a000026 	bne	dbf8 <CSerialDevice::Read(void*, unsigned int)+0x1a0>
    db5c:	e59c3000 	ldr	r3, [ip]
    db60:	e3130b01 	tst	r3, #1024	; 0x400
    db64:	1a000014 	bne	dbbc <CSerialDevice::Read(void*, unsigned int)+0x164>
    db68:	e3130b02 	tst	r3, #2048	; 0x800
    db6c:	1a00001b 	bne	dbe0 <CSerialDevice::Read(void*, unsigned int)+0x188>
    db70:	e3130c01 	tst	r3, #256	; 0x100
    db74:	1a00001b 	bne	dbe8 <CSerialDevice::Read(void*, unsigned int)+0x190>
    db78:	e0852007 	add	r2, r5, r7
    db7c:	e1a01005 	mov	r1, r5
    db80:	ea000003 	b	db94 <CSerialDevice::Read(void*, unsigned int)+0x13c>
    db84:	e3130b02 	tst	r3, #2048	; 0x800
    db88:	1a000014 	bne	dbe0 <CSerialDevice::Read(void*, unsigned int)+0x188>
    db8c:	e3130c01 	tst	r3, #256	; 0x100
    db90:	1a000014 	bne	dbe8 <CSerialDevice::Read(void*, unsigned int)+0x190>
    db94:	e4c13001 	strb	r3, [r1], #1
    db98:	e1520001 	cmp	r2, r1
    db9c:	e0417005 	sub	r7, r1, r5
    dba0:	0affffd7 	beq	db04 <CSerialDevice::Read(void*, unsigned int)+0xac>
    dba4:	e59c3018 	ldr	r3, [ip, #24]
    dba8:	e3130010 	tst	r3, #16
    dbac:	1affffd4 	bne	db04 <CSerialDevice::Read(void*, unsigned int)+0xac>
    dbb0:	e59c3000 	ldr	r3, [ip]
    dbb4:	e3130b01 	tst	r3, #1024	; 0x400
    dbb8:	0afffff1 	beq	db84 <CSerialDevice::Read(void*, unsigned int)+0x12c>
    dbbc:	e3e07000 	mvn	r7, #0
    dbc0:	eaffffcf 	b	db04 <CSerialDevice::Read(void*, unsigned int)+0xac>
    dbc4:	e3021f9c 	movw	r1, #12188	; 0x2f9c
    dbc8:	e3020fa8 	movw	r0, #12200	; 0x2fa8
    dbcc:	e3401001 	movt	r1, #1
    dbd0:	e3400001 	movt	r0, #1
    dbd4:	e3a02c01 	mov	r2, #256	; 0x100
    dbd8:	ebfffd20 	bl	d060 <assertion_failed>
    dbdc:	eaffffa2 	b	da6c <CSerialDevice::Read(void*, unsigned int)+0x14>
    dbe0:	e3e07001 	mvn	r7, #1
    dbe4:	eaffffc6 	b	db04 <CSerialDevice::Read(void*, unsigned int)+0xac>
    dbe8:	e3e07002 	mvn	r7, #2
    dbec:	eaffffc4 	b	db04 <CSerialDevice::Read(void*, unsigned int)+0xac>
    dbf0:	e3a07000 	mov	r7, #0
    dbf4:	eaffffbf 	b	daf8 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    dbf8:	e1a07003 	mov	r7, r3
    dbfc:	eaffffc0 	b	db04 <CSerialDevice::Read(void*, unsigned int)+0xac>

0000dc00 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>:
    dc00:	e92d4070 	push	{r4, r5, r6, lr}
    dc04:	e1a04000 	mov	r4, r0
    dc08:	e1a05002 	mov	r5, r2
    dc0c:	e1a06001 	mov	r6, r1
    dc10:	eb000e42 	bl	11520 <CDevice::CDevice()>
    dc14:	e59fc09c 	ldr	ip, [pc, #156]	; dcb8 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)+0xb8>
    dc18:	e1a00004 	mov	r0, r4
    dc1c:	e3a03000 	mov	r3, #0
    dc20:	e1a02003 	mov	r2, r3
    dc24:	e3a01020 	mov	r1, #32
    dc28:	e480c004 	str	ip, [r0], #4
    dc2c:	ebfff0ec 	bl	9fe4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    dc30:	e3a03000 	mov	r3, #0
    dc34:	e1a02003 	mov	r2, r3
    dc38:	e284002c 	add	r0, r4, #44	; 0x2c
    dc3c:	e3a01021 	mov	r1, #33	; 0x21
    dc40:	ebfff0e7 	bl	9fe4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    dc44:	e2840054 	add	r0, r4, #84	; 0x54
    dc48:	e3a03000 	mov	r3, #0
    dc4c:	e3a02004 	mov	r2, #4
    dc50:	e3a0100e 	mov	r1, #14
    dc54:	ebfff0e2 	bl	9fe4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    dc58:	e284007c 	add	r0, r4, #124	; 0x7c
    dc5c:	e3a03000 	mov	r3, #0
    dc60:	e3a02004 	mov	r2, #4
    dc64:	e3a0100f 	mov	r1, #15
    dc68:	ebfff0dd 	bl	9fe4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    dc6c:	e2842a01 	add	r2, r4, #4096	; 0x1000
    dc70:	e3550000 	cmp	r5, #0
    dc74:	e3a03000 	mov	r3, #0
    dc78:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    dc7c:	e3a01001 	mov	r1, #1
    dc80:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    dc84:	13a0c002 	movne	ip, #2
    dc88:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    dc8c:	03a0c001 	moveq	ip, #1
    dc90:	e58450a8 	str	r5, [r4, #168]	; 0xa8
    dc94:	e1a00004 	mov	r0, r4
    dc98:	e58430ac 	str	r3, [r4, #172]	; 0xac
    dc9c:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    dca0:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    dca4:	e58210c4 	str	r1, [r2, #196]	; 0xc4
    dca8:	e58230c0 	str	r3, [r2, #192]	; 0xc0
    dcac:	e58210cc 	str	r1, [r2, #204]	; 0xcc
    dcb0:	e582c0c8 	str	ip, [r2, #200]	; 0xc8
    dcb4:	e8bd8070 	pop	{r4, r5, r6, pc}
    dcb8:	00012f88 	.word	0x00012f88

0000dcbc <CSerialDevice::Initialize(unsigned int)>:
    dcbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dcc0:	e1a07001 	mov	r7, r1
    dcc4:	e1a04000 	mov	r4, r0
    dcc8:	eb0009e0 	bl	10450 <CMachineInfo::Get()>
    dccc:	e3a01002 	mov	r1, #2
    dcd0:	eb000982 	bl	102e0 <CMachineInfo::GetClockRate(unsigned int) const>
    dcd4:	e2508000 	subs	r8, r0, #0
    dcd8:	0a000066 	beq	de78 <CSerialDevice::Initialize(unsigned int)+0x1bc>
    dcdc:	e30037d4 	movw	r3, #2004	; 0x7d4
    dce0:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    dce4:	e340303d 	movt	r3, #61	; 0x3d
    dce8:	e1520003 	cmp	r2, r3
    dcec:	8a00005a 	bhi	de5c <CSerialDevice::Initialize(unsigned int)+0x1a0>
    dcf0:	e1a05207 	lsl	r5, r7, #4
    dcf4:	e1a00008 	mov	r0, r8
    dcf8:	e1a01005 	mov	r1, r5
    dcfc:	eb000cff 	bl	11100 <__aeabi_uidiv>
    dd00:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    dd04:	e2402001 	sub	r2, r0, #1
    dd08:	e1a06000 	mov	r6, r0
    dd0c:	e1520003 	cmp	r2, r3
    dd10:	8a00004a 	bhi	de40 <CSerialDevice::Initialize(unsigned int)+0x184>
    dd14:	e1a01005 	mov	r1, r5
    dd18:	e1a00008 	mov	r0, r8
    dd1c:	eb000cfb 	bl	11110 <__aeabi_uidivmod>
    dd20:	e1a00181 	lsl	r0, r1, #3
    dd24:	e1a01007 	mov	r1, r7
    dd28:	eb000cf4 	bl	11100 <__aeabi_uidiv>
    dd2c:	e2005001 	and	r5, r0, #1
    dd30:	e08550a0 	add	r5, r5, r0, lsr #1
    dd34:	e355003f 	cmp	r5, #63	; 0x3f
    dd38:	8a00002b 	bhi	ddec <CSerialDevice::Initialize(unsigned int)+0x130>
    dd3c:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    dd40:	e3500000 	cmp	r0, #0
    dd44:	0a000031 	beq	de10 <CSerialDevice::Initialize(unsigned int)+0x154>
    dd48:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
    dd4c:	e30e22b4 	movw	r2, #58036	; 0xe2b4
    dd50:	e3a01039 	mov	r1, #57	; 0x39
    dd54:	e3402000 	movt	r2, #0
    dd58:	e3530000 	cmp	r3, #0
    dd5c:	e1a03004 	mov	r3, r4
    dd60:	0a00001f 	beq	dde4 <CSerialDevice::Initialize(unsigned int)+0x128>
    dd64:	eb00063d 	bl	f660 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    dd68:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
    dd6c:	e3a03a01 	mov	r3, #4096	; 0x1000
    dd70:	e3433f20 	movt	r3, #16160	; 0x3f20
    dd74:	e3a02001 	mov	r2, #1
    dd78:	e3510000 	cmp	r1, #0
    dd7c:	e58420ac 	str	r2, [r4, #172]	; 0xac
    dd80:	e3a01000 	mov	r1, #0
    dd84:	e30027ff 	movw	r2, #2047	; 0x7ff
    dd88:	e5831038 	str	r1, [r3, #56]	; 0x38
    dd8c:	e5832044 	str	r2, [r3, #68]	; 0x44
    dd90:	e5836024 	str	r6, [r3, #36]	; 0x24
    dd94:	e5835028 	str	r5, [r3, #40]	; 0x28
    dd98:	0a000023 	beq	de2c <CSerialDevice::Initialize(unsigned int)+0x170>
    dd9c:	e3a02009 	mov	r2, #9
    dda0:	e3a01070 	mov	r1, #112	; 0x70
    dda4:	e5832034 	str	r2, [r3, #52]	; 0x34
    dda8:	e3a02e45 	mov	r2, #1104	; 0x450
    ddac:	e583102c 	str	r1, [r3, #44]	; 0x2c
    ddb0:	e5832038 	str	r2, [r3, #56]	; 0x38
    ddb4:	e3a03a01 	mov	r3, #4096	; 0x1000
    ddb8:	e3433f20 	movt	r3, #16160	; 0x3f20
    ddbc:	e3002301 	movw	r2, #769	; 0x301
    ddc0:	e5832030 	str	r2, [r3, #48]	; 0x30
    ddc4:	ebfffdfd 	bl	d5c0 <CDeviceNameService::Get()>
    ddc8:	e1a02004 	mov	r2, r4
    ddcc:	e3a03000 	mov	r3, #0
    ddd0:	e3031028 	movw	r1, #12328	; 0x3028
    ddd4:	e3401001 	movt	r1, #1
    ddd8:	ebfffd84 	bl	d3f0 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    dddc:	e3a00001 	mov	r0, #1
    dde0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dde4:	eb00067c 	bl	f7dc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    dde8:	eaffffde 	b	dd68 <CSerialDevice::Initialize(unsigned int)+0xac>
    ddec:	e3021f9c 	movw	r1, #12188	; 0x2f9c
    ddf0:	e3030014 	movw	r0, #12308	; 0x3014
    ddf4:	e3401001 	movt	r1, #1
    ddf8:	e3400001 	movt	r0, #1
    ddfc:	e3a02091 	mov	r2, #145	; 0x91
    de00:	ebfffc96 	bl	d060 <assertion_failed>
    de04:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    de08:	e3500000 	cmp	r0, #0
    de0c:	1affffcd 	bne	dd48 <CSerialDevice::Initialize(unsigned int)+0x8c>
    de10:	e3a03a01 	mov	r3, #4096	; 0x1000
    de14:	e3433f20 	movt	r3, #16160	; 0x3f20
    de18:	e30027ff 	movw	r2, #2047	; 0x7ff
    de1c:	e5830038 	str	r0, [r3, #56]	; 0x38
    de20:	e5832044 	str	r2, [r3, #68]	; 0x44
    de24:	e5836024 	str	r6, [r3, #36]	; 0x24
    de28:	e5835028 	str	r5, [r3, #40]	; 0x28
    de2c:	e3a03a01 	mov	r3, #4096	; 0x1000
    de30:	e3433f20 	movt	r3, #16160	; 0x3f20
    de34:	e3a02060 	mov	r2, #96	; 0x60
    de38:	e583202c 	str	r2, [r3, #44]	; 0x2c
    de3c:	eaffffdc 	b	ddb4 <CSerialDevice::Initialize(unsigned int)+0xf8>
    de40:	e3021f9c 	movw	r1, #12188	; 0x2f9c
    de44:	e3020ff0 	movw	r0, #12272	; 0x2ff0
    de48:	e3401001 	movt	r1, #1
    de4c:	e3400001 	movt	r0, #1
    de50:	e3a0208e 	mov	r2, #142	; 0x8e
    de54:	ebfffc81 	bl	d060 <assertion_failed>
    de58:	eaffffad 	b	dd14 <CSerialDevice::Initialize(unsigned int)+0x58>
    de5c:	e3021f9c 	movw	r1, #12188	; 0x2f9c
    de60:	e3020fc4 	movw	r0, #12228	; 0x2fc4
    de64:	e3401001 	movt	r1, #1
    de68:	e3400001 	movt	r0, #1
    de6c:	e3a0208b 	mov	r2, #139	; 0x8b
    de70:	ebfffc7a 	bl	d060 <assertion_failed>
    de74:	eaffff9d 	b	dcf0 <CSerialDevice::Initialize(unsigned int)+0x34>
    de78:	e3021f9c 	movw	r1, #12188	; 0x2f9c
    de7c:	e3020fb4 	movw	r0, #12212	; 0x2fb4
    de80:	e3401001 	movt	r1, #1
    de84:	e3400001 	movt	r0, #1
    de88:	e3a02089 	mov	r2, #137	; 0x89
    de8c:	ebfffc73 	bl	d060 <assertion_failed>
    de90:	eaffff91 	b	dcdc <CSerialDevice::Initialize(unsigned int)+0x20>

0000de94 <CSerialDevice::GetOptions() const>:
    de94:	e2800a01 	add	r0, r0, #4096	; 0x1000
    de98:	e59000c4 	ldr	r0, [r0, #196]	; 0xc4
    de9c:	e12fff1e 	bx	lr

0000dea0 <CSerialDevice::SetOptions(unsigned int)>:
    dea0:	e2800a01 	add	r0, r0, #4096	; 0x1000
    dea4:	e58010c4 	str	r1, [r0, #196]	; 0xc4
    dea8:	e12fff1e 	bx	lr

0000deac <CSerialDevice::Write(unsigned char)>:
    deac:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    deb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    deb4:	e3530000 	cmp	r3, #0
    deb8:	03a02a01 	moveq	r2, #4096	; 0x1000
    debc:	03432f20 	movteq	r2, #16160	; 0x3f20
    dec0:	0a000018 	beq	df28 <CSerialDevice::Write(unsigned char)+0x7c>
    dec4:	e2805a01 	add	r5, r0, #4096	; 0x1000
    dec8:	e1a06001 	mov	r6, r1
    decc:	e1a04000 	mov	r4, r0
    ded0:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
    ded4:	e3520000 	cmp	r2, #0
    ded8:	1a00001c 	bne	df50 <CSerialDevice::Write(unsigned char)+0xa4>
    dedc:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    dee0:	e59510c0 	ldr	r1, [r5, #192]	; 0xc0
    dee4:	e2833001 	add	r3, r3, #1
    dee8:	e7ea3053 	ubfx	r3, r3, #0, #11
    deec:	e1530001 	cmp	r3, r1
    def0:	0a000021 	beq	df7c <CSerialDevice::Write(unsigned char)+0xd0>
    def4:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    def8:	e3a07001 	mov	r7, #1
    defc:	e0840003 	add	r0, r4, r3
    df00:	e0833007 	add	r3, r3, r7
    df04:	e58530bc 	str	r3, [r5, #188]	; 0xbc
    df08:	e5c068bc 	strb	r6, [r0, #2236]	; 0x8bc
    df0c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    df10:	e7ea3053 	ubfx	r3, r3, #0, #11
    df14:	e58530bc 	str	r3, [r5, #188]	; 0xbc
    df18:	e3520000 	cmp	r2, #0
    df1c:	1a000008 	bne	df44 <CSerialDevice::Write(unsigned char)+0x98>
    df20:	e1a00007 	mov	r0, r7
    df24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    df28:	e5923018 	ldr	r3, [r2, #24]
    df2c:	e3130020 	tst	r3, #32
    df30:	1afffffc 	bne	df28 <CSerialDevice::Write(unsigned char)+0x7c>
    df34:	e3a07001 	mov	r7, #1
    df38:	e5821000 	str	r1, [r2]
    df3c:	e1a00007 	mov	r0, r7
    df40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    df44:	ebfff185 	bl	a560 <LeaveCritical>
    df48:	e1a00007 	mov	r0, r7
    df4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    df50:	e1a00002 	mov	r0, r2
    df54:	ebfff153 	bl	a4a8 <EnterCritical>
    df58:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    df5c:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
    df60:	e2833001 	add	r3, r3, #1
    df64:	e7ea3053 	ubfx	r3, r3, #0, #11
    df68:	e1530002 	cmp	r3, r2
    df6c:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
    df70:	03a07000 	moveq	r7, #0
    df74:	1affffde 	bne	def4 <CSerialDevice::Write(unsigned char)+0x48>
    df78:	eaffffe6 	b	df18 <CSerialDevice::Write(unsigned char)+0x6c>
    df7c:	e1a07002 	mov	r7, r2
    df80:	e1a00007 	mov	r0, r7
    df84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000df88 <CSerialDevice::Write(void const*, unsigned int)>:
    df88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    df8c:	e2804a01 	add	r4, r0, #4096	; 0x1000
    df90:	e1a07000 	mov	r7, r0
    df94:	e1a05001 	mov	r5, r1
    df98:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
    df9c:	e1a08002 	mov	r8, r2
    dfa0:	e3500000 	cmp	r0, #0
    dfa4:	1a000052 	bne	e0f4 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    dfa8:	e3550000 	cmp	r5, #0
    dfac:	0a000058 	beq	e114 <CSerialDevice::Write(void const*, unsigned int)+0x18c>
    dfb0:	e3580000 	cmp	r8, #0
    dfb4:	0a00005d 	beq	e130 <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
    dfb8:	e3a06000 	mov	r6, #0
    dfbc:	ea000002 	b	dfcc <CSerialDevice::Write(void const*, unsigned int)+0x44>
    dfc0:	e2866001 	add	r6, r6, #1
    dfc4:	e1560008 	cmp	r6, r8
    dfc8:	0a00000f 	beq	e00c <CSerialDevice::Write(void const*, unsigned int)+0x84>
    dfcc:	e5d51000 	ldrb	r1, [r5]
    dfd0:	e1a00007 	mov	r0, r7
    dfd4:	ebffffb4 	bl	deac <CSerialDevice::Write(unsigned char)>
    dfd8:	e3500000 	cmp	r0, #0
    dfdc:	0a00000a 	beq	e00c <CSerialDevice::Write(void const*, unsigned int)+0x84>
    dfe0:	e4d53001 	ldrb	r3, [r5], #1
    dfe4:	e353000a 	cmp	r3, #10
    dfe8:	1afffff4 	bne	dfc0 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    dfec:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    dff0:	e3130001 	tst	r3, #1
    dff4:	0afffff1 	beq	dfc0 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    dff8:	e3a0100d 	mov	r1, #13
    dffc:	e1a00007 	mov	r0, r7
    e000:	ebffffa9 	bl	deac <CSerialDevice::Write(unsigned char)>
    e004:	e3500000 	cmp	r0, #0
    e008:	1affffec 	bne	dfc0 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    e00c:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    e010:	e3530000 	cmp	r3, #0
    e014:	1a000034 	bne	e0ec <CSerialDevice::Write(void const*, unsigned int)+0x164>
    e018:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    e01c:	e3530000 	cmp	r3, #0
    e020:	0a000023 	beq	e0b4 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    e024:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
    e028:	e3500000 	cmp	r0, #0
    e02c:	1a000032 	bne	e0fc <CSerialDevice::Write(void const*, unsigned int)+0x174>
    e030:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    e034:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    e038:	e1520003 	cmp	r2, r3
    e03c:	0a00001c 	beq	e0b4 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    e040:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    e044:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
    e048:	e1520003 	cmp	r2, r3
    e04c:	0a000015 	beq	e0a8 <CSerialDevice::Write(void const*, unsigned int)+0x120>
    e050:	e3a02a01 	mov	r2, #4096	; 0x1000
    e054:	e3432f20 	movt	r2, #16160	; 0x3f20
    e058:	e5923018 	ldr	r3, [r2, #24]
    e05c:	e3130020 	tst	r3, #32
    e060:	0a000003 	beq	e074 <CSerialDevice::Write(void const*, unsigned int)+0xec>
    e064:	ea000017 	b	e0c8 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    e068:	e5923018 	ldr	r3, [r2, #24]
    e06c:	e3130020 	tst	r3, #32
    e070:	1a000014 	bne	e0c8 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    e074:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    e078:	e0871003 	add	r1, r7, r3
    e07c:	e2833001 	add	r3, r3, #1
    e080:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    e084:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
    e088:	e5823000 	str	r3, [r2]
    e08c:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    e090:	e7ea3053 	ubfx	r3, r3, #0, #11
    e094:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    e098:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
    e09c:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    e0a0:	e1510003 	cmp	r1, r3
    e0a4:	1affffef 	bne	e068 <CSerialDevice::Write(void const*, unsigned int)+0xe0>
    e0a8:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    e0ac:	e3530000 	cmp	r3, #0
    e0b0:	1a000001 	bne	e0bc <CSerialDevice::Write(void const*, unsigned int)+0x134>
    e0b4:	e1a00006 	mov	r0, r6
    e0b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e0bc:	ebfff127 	bl	a560 <LeaveCritical>
    e0c0:	e1a00006 	mov	r0, r6
    e0c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e0c8:	e3a03a01 	mov	r3, #4096	; 0x1000
    e0cc:	e3433f20 	movt	r3, #16160	; 0x3f20
    e0d0:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    e0d4:	e3822020 	orr	r2, r2, #32
    e0d8:	e5832038 	str	r2, [r3, #56]	; 0x38
    e0dc:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    e0e0:	e3530000 	cmp	r3, #0
    e0e4:	0afffff2 	beq	e0b4 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    e0e8:	eafffff3 	b	e0bc <CSerialDevice::Write(void const*, unsigned int)+0x134>
    e0ec:	ebfff11b 	bl	a560 <LeaveCritical>
    e0f0:	eaffffc8 	b	e018 <CSerialDevice::Write(void const*, unsigned int)+0x90>
    e0f4:	ebfff0eb 	bl	a4a8 <EnterCritical>
    e0f8:	eaffffaa 	b	dfa8 <CSerialDevice::Write(void const*, unsigned int)+0x20>
    e0fc:	ebfff0e9 	bl	a4a8 <EnterCritical>
    e100:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    e104:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    e108:	e1520003 	cmp	r2, r3
    e10c:	1affffcb 	bne	e040 <CSerialDevice::Write(void const*, unsigned int)+0xb8>
    e110:	eaffffe4 	b	e0a8 <CSerialDevice::Write(void const*, unsigned int)+0x120>
    e114:	e3021f9c 	movw	r1, #12188	; 0x2f9c
    e118:	e3020fa8 	movw	r0, #12200	; 0x2fa8
    e11c:	e3401001 	movt	r1, #1
    e120:	e3400001 	movt	r0, #1
    e124:	e3a020c2 	mov	r2, #194	; 0xc2
    e128:	ebfffbcc 	bl	d060 <assertion_failed>
    e12c:	eaffff9f 	b	dfb0 <CSerialDevice::Write(void const*, unsigned int)+0x28>
    e130:	e1a06008 	mov	r6, r8
    e134:	eaffffb4 	b	e00c <CSerialDevice::Write(void const*, unsigned int)+0x84>

0000e138 <CSerialDevice::InterruptHandler()>:
    e138:	e92d4070 	push	{r4, r5, r6, lr}
    e13c:	e2805a01 	add	r5, r0, #4096	; 0x1000
    e140:	e1a04000 	mov	r4, r0
    e144:	e59500c8 	ldr	r0, [r5, #200]	; 0xc8
    e148:	e3500000 	cmp	r0, #0
    e14c:	1a000056 	bne	e2ac <CSerialDevice::InterruptHandler()+0x174>
    e150:	e3a03a01 	mov	r3, #4096	; 0x1000
    e154:	e3433f20 	movt	r3, #16160	; 0x3f20
    e158:	e3e0e002 	mvn	lr, #2
    e15c:	e3e00001 	mvn	r0, #1
    e160:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    e164:	e1a01003 	mov	r1, r3
    e168:	e3e0c000 	mvn	ip, #0
    e16c:	e5832044 	str	r2, [r3, #68]	; 0x44
    e170:	e5913018 	ldr	r3, [r1, #24]
    e174:	e3130010 	tst	r3, #16
    e178:	1a000016 	bne	e1d8 <CSerialDevice::InterruptHandler()+0xa0>
    e17c:	e5912000 	ldr	r2, [r1]
    e180:	e3120b01 	tst	r2, #1024	; 0x400
    e184:	0a000032 	beq	e254 <CSerialDevice::InterruptHandler()+0x11c>
    e188:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    e18c:	e3530000 	cmp	r3, #0
    e190:	0584c8b8 	streq	ip, [r4, #2232]	; 0x8b8
    e194:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    e198:	e59468b4 	ldr	r6, [r4, #2228]	; 0x8b4
    e19c:	e2833001 	add	r3, r3, #1
    e1a0:	e7ea3053 	ubfx	r3, r3, #0, #11
    e1a4:	e1530006 	cmp	r3, r6
    e1a8:	0a00002f 	beq	e26c <CSerialDevice::InterruptHandler()+0x134>
    e1ac:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    e1b0:	e0846003 	add	r6, r4, r3
    e1b4:	e2833001 	add	r3, r3, #1
    e1b8:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    e1bc:	e5c620b0 	strb	r2, [r6, #176]	; 0xb0
    e1c0:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    e1c4:	e7ea3053 	ubfx	r3, r3, #0, #11
    e1c8:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    e1cc:	e5913018 	ldr	r3, [r1, #24]
    e1d0:	e3130010 	tst	r3, #16
    e1d4:	0affffe8 	beq	e17c <CSerialDevice::InterruptHandler()+0x44>
    e1d8:	e5913018 	ldr	r3, [r1, #24]
    e1dc:	e3130020 	tst	r3, #32
    e1e0:	1a000016 	bne	e240 <CSerialDevice::InterruptHandler()+0x108>
    e1e4:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    e1e8:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
    e1ec:	e1520003 	cmp	r2, r3
    e1f0:	13a02a01 	movne	r2, #4096	; 0x1000
    e1f4:	13432f20 	movtne	r2, #16160	; 0x3f20
    e1f8:	1a000004 	bne	e210 <CSerialDevice::InterruptHandler()+0xd8>
    e1fc:	ea000024 	b	e294 <CSerialDevice::InterruptHandler()+0x15c>
    e200:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    e204:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    e208:	e1510003 	cmp	r1, r3
    e20c:	0a000020 	beq	e294 <CSerialDevice::InterruptHandler()+0x15c>
    e210:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    e214:	e0841003 	add	r1, r4, r3
    e218:	e2833001 	add	r3, r3, #1
    e21c:	e58530c0 	str	r3, [r5, #192]	; 0xc0
    e220:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
    e224:	e5823000 	str	r3, [r2]
    e228:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    e22c:	e7ea3053 	ubfx	r3, r3, #0, #11
    e230:	e58530c0 	str	r3, [r5, #192]	; 0xc0
    e234:	e5923018 	ldr	r3, [r2, #24]
    e238:	e3130020 	tst	r3, #32
    e23c:	0affffef 	beq	e200 <CSerialDevice::InterruptHandler()+0xc8>
    e240:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    e244:	e3530000 	cmp	r3, #0
    e248:	08bd8070 	popeq	{r4, r5, r6, pc}
    e24c:	e8bd4070 	pop	{r4, r5, r6, lr}
    e250:	eafff0c2 	b	a560 <LeaveCritical>
    e254:	e3120b02 	tst	r2, #2048	; 0x800
    e258:	0a000007 	beq	e27c <CSerialDevice::InterruptHandler()+0x144>
    e25c:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    e260:	e3530000 	cmp	r3, #0
    e264:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    e268:	eaffffc9 	b	e194 <CSerialDevice::InterruptHandler()+0x5c>
    e26c:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    e270:	e3530000 	cmp	r3, #0
    e274:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    e278:	eaffffbc 	b	e170 <CSerialDevice::InterruptHandler()+0x38>
    e27c:	e3120c01 	tst	r2, #256	; 0x100
    e280:	0affffc3 	beq	e194 <CSerialDevice::InterruptHandler()+0x5c>
    e284:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    e288:	e3530000 	cmp	r3, #0
    e28c:	0584e8b8 	streq	lr, [r4, #2232]	; 0x8b8
    e290:	eaffffbf 	b	e194 <CSerialDevice::InterruptHandler()+0x5c>
    e294:	e3a03a01 	mov	r3, #4096	; 0x1000
    e298:	e3433f20 	movt	r3, #16160	; 0x3f20
    e29c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    e2a0:	e3c22020 	bic	r2, r2, #32
    e2a4:	e5832038 	str	r2, [r3, #56]	; 0x38
    e2a8:	eaffffe4 	b	e240 <CSerialDevice::InterruptHandler()+0x108>
    e2ac:	ebfff07d 	bl	a4a8 <EnterCritical>
    e2b0:	eaffffa6 	b	e150 <CSerialDevice::InterruptHandler()+0x18>

0000e2b4 <CSerialDevice::InterruptStub(void*)>:
    e2b4:	e92d4010 	push	{r4, lr}
    e2b8:	e2504000 	subs	r4, r0, #0
    e2bc:	0a000002 	beq	e2cc <CSerialDevice::InterruptStub(void*)+0x18>
    e2c0:	e1a00004 	mov	r0, r4
    e2c4:	e8bd4010 	pop	{r4, lr}
    e2c8:	eaffff9a 	b	e138 <CSerialDevice::InterruptHandler()>
    e2cc:	e3021f9c 	movw	r1, #12188	; 0x2f9c
    e2d0:	e3010680 	movw	r0, #5760	; 0x1680
    e2d4:	e3401001 	movt	r1, #1
    e2d8:	e3400001 	movt	r0, #1
    e2dc:	e30021c1 	movw	r2, #449	; 0x1c1
    e2e0:	ebfffb5e 	bl	d060 <assertion_failed>
    e2e4:	e1a00004 	mov	r0, r4
    e2e8:	e8bd4010 	pop	{r4, lr}
    e2ec:	eaffff91 	b	e138 <CSerialDevice::InterruptHandler()>

0000e2f0 <CSerialDevice::~CSerialDevice()>:
    e2f0:	e59f10a8 	ldr	r1, [pc, #168]	; e3a0 <CSerialDevice::~CSerialDevice()+0xb0>
    e2f4:	e3a03a01 	mov	r3, #4096	; 0x1000
    e2f8:	e3433f20 	movt	r3, #16160	; 0x3f20
    e2fc:	e3a02000 	mov	r2, #0
    e300:	e92d4010 	push	{r4, lr}
    e304:	e1a04000 	mov	r4, r0
    e308:	e5801000 	str	r1, [r0]
    e30c:	e5832038 	str	r2, [r3, #56]	; 0x38
    e310:	e5832030 	str	r2, [r3, #48]	; 0x30
    e314:	e59030ac 	ldr	r3, [r0, #172]	; 0xac
    e318:	e1530002 	cmp	r3, r2
    e31c:	0a000006 	beq	e33c <CSerialDevice::~CSerialDevice()+0x4c>
    e320:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    e324:	e1500002 	cmp	r0, r2
    e328:	0a000014 	beq	e380 <CSerialDevice::~CSerialDevice()+0x90>
    e32c:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
    e330:	e3530000 	cmp	r3, #0
    e334:	0a00000e 	beq	e374 <CSerialDevice::~CSerialDevice()+0x84>
    e338:	eb0004f7 	bl	f71c <CInterruptSystem::DisconnectFIQ()>
    e33c:	e3a03000 	mov	r3, #0
    e340:	e284007c 	add	r0, r4, #124	; 0x7c
    e344:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    e348:	ebffec88 	bl	9570 <CGPIOPin::~CGPIOPin()>
    e34c:	e2840054 	add	r0, r4, #84	; 0x54
    e350:	ebffec86 	bl	9570 <CGPIOPin::~CGPIOPin()>
    e354:	e284002c 	add	r0, r4, #44	; 0x2c
    e358:	ebffec84 	bl	9570 <CGPIOPin::~CGPIOPin()>
    e35c:	e2840004 	add	r0, r4, #4
    e360:	ebffec82 	bl	9570 <CGPIOPin::~CGPIOPin()>
    e364:	e1a00004 	mov	r0, r4
    e368:	eb000c60 	bl	114f0 <CDevice::~CDevice()>
    e36c:	e1a00004 	mov	r0, r4
    e370:	e8bd8010 	pop	{r4, pc}
    e374:	e3a01039 	mov	r1, #57	; 0x39
    e378:	eb000550 	bl	f8c0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    e37c:	eaffffee 	b	e33c <CSerialDevice::~CSerialDevice()+0x4c>
    e380:	e3021f9c 	movw	r1, #12188	; 0x2f9c
    e384:	e3010e1c 	movw	r0, #7708	; 0x1e1c
    e388:	e3401001 	movt	r1, #1
    e38c:	e3400001 	movt	r0, #1
    e390:	e3a02078 	mov	r2, #120	; 0x78
    e394:	ebfffb31 	bl	d060 <assertion_failed>
    e398:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    e39c:	eaffffe2 	b	e32c <CSerialDevice::~CSerialDevice()+0x3c>
    e3a0:	00012f88 	.word	0x00012f88

0000e3a4 <CSerialDevice::~CSerialDevice()>:
    e3a4:	e92d4010 	push	{r4, lr}
    e3a8:	e1a04000 	mov	r4, r0
    e3ac:	ebffffcf 	bl	e2f0 <CSerialDevice::~CSerialDevice()>
    e3b0:	e1a00004 	mov	r0, r4
    e3b4:	e30110d0 	movw	r1, #4304	; 0x10d0
    e3b8:	ebfff038 	bl	a4a0 <operator delete(void*, unsigned int)>
    e3bc:	e1a00004 	mov	r0, r4
    e3c0:	e8bd8010 	pop	{r4, pc}
    e3c4:	00000000 	andeq	r0, r0, r0

0000e3c8 <CString::~CString()>:
    e3c8:	e92d4010 	push	{r4, lr}
    e3cc:	e1a04000 	mov	r4, r0
    e3d0:	e5900004 	ldr	r0, [r0, #4]
    e3d4:	e59f3014 	ldr	r3, [pc, #20]	; e3f0 <CString::~CString()+0x28>
    e3d8:	e3500000 	cmp	r0, #0
    e3dc:	e5843000 	str	r3, [r4]
    e3e0:	0a000000 	beq	e3e8 <CString::~CString()+0x20>
    e3e4:	ebfff02c 	bl	a49c <operator delete[](void*)>
    e3e8:	e1a00004 	mov	r0, r4
    e3ec:	e8bd8010 	pop	{r4, pc}
    e3f0:	00013038 	.word	0x00013038

0000e3f4 <CString::~CString()>:
    e3f4:	e92d4010 	push	{r4, lr}
    e3f8:	e1a04000 	mov	r4, r0
    e3fc:	e5900004 	ldr	r0, [r0, #4]
    e400:	e59f3020 	ldr	r3, [pc, #32]	; e428 <CString::~CString()+0x34>
    e404:	e3500000 	cmp	r0, #0
    e408:	e5843000 	str	r3, [r4]
    e40c:	0a000000 	beq	e414 <CString::~CString()+0x20>
    e410:	ebfff021 	bl	a49c <operator delete[](void*)>
    e414:	e1a00004 	mov	r0, r4
    e418:	e3a01010 	mov	r1, #16
    e41c:	ebfff01f 	bl	a4a0 <operator delete(void*, unsigned int)>
    e420:	e1a00004 	mov	r0, r4
    e424:	e8bd8010 	pop	{r4, pc}
    e428:	00013038 	.word	0x00013038

0000e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    e42c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e430:	e990002c 	ldmib	r0, {r2, r3, r5}
    e434:	e0455002 	sub	r5, r5, r2
    e438:	e0851001 	add	r1, r5, r1
    e43c:	e2812001 	add	r2, r1, #1
    e440:	e1520003 	cmp	r2, r3
    e444:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    e448:	e2816041 	add	r6, r1, #65	; 0x41
    e44c:	e1a04000 	mov	r4, r0
    e450:	e1a00006 	mov	r0, r6
    e454:	ebfff00e 	bl	a494 <operator new[](unsigned int)>
    e458:	e594300c 	ldr	r3, [r4, #12]
    e45c:	e3a02000 	mov	r2, #0
    e460:	e5c32000 	strb	r2, [r3]
    e464:	e5941004 	ldr	r1, [r4, #4]
    e468:	e1a07000 	mov	r7, r0
    e46c:	ebfff3ba 	bl	b35c <strcpy>
    e470:	e5940004 	ldr	r0, [r4, #4]
    e474:	e3500000 	cmp	r0, #0
    e478:	0a000000 	beq	e480 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    e47c:	ebfff006 	bl	a49c <operator delete[](void*)>
    e480:	e0875005 	add	r5, r7, r5
    e484:	e5847004 	str	r7, [r4, #4]
    e488:	e584500c 	str	r5, [r4, #12]
    e48c:	e5846008 	str	r6, [r4, #8]
    e490:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e494 <CString::CString()>:
    e494:	e59f1010 	ldr	r1, [pc, #16]	; e4ac <CString::CString()+0x18>
    e498:	e3a02000 	mov	r2, #0
    e49c:	e5802004 	str	r2, [r0, #4]
    e4a0:	e5802008 	str	r2, [r0, #8]
    e4a4:	e5801000 	str	r1, [r0]
    e4a8:	e12fff1e 	bx	lr
    e4ac:	00013038 	.word	0x00013038

0000e4b0 <CString::CString(char const*)>:
    e4b0:	e59f3034 	ldr	r3, [pc, #52]	; e4ec <CString::CString(char const*)+0x3c>
    e4b4:	e92d4070 	push	{r4, r5, r6, lr}
    e4b8:	e1a04000 	mov	r4, r0
    e4bc:	e5843000 	str	r3, [r4]
    e4c0:	e1a00001 	mov	r0, r1
    e4c4:	e1a05001 	mov	r5, r1
    e4c8:	ebfff37e 	bl	b2c8 <strlen>
    e4cc:	e2800001 	add	r0, r0, #1
    e4d0:	e5840008 	str	r0, [r4, #8]
    e4d4:	ebffefee 	bl	a494 <operator new[](unsigned int)>
    e4d8:	e1a01005 	mov	r1, r5
    e4dc:	e5840004 	str	r0, [r4, #4]
    e4e0:	ebfff39d 	bl	b35c <strcpy>
    e4e4:	e1a00004 	mov	r0, r4
    e4e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e4ec:	00013038 	.word	0x00013038

0000e4f0 <CString::operator char const*() const>:
    e4f0:	e5900004 	ldr	r0, [r0, #4]
    e4f4:	e30136d8 	movw	r3, #5848	; 0x16d8
    e4f8:	e3403001 	movt	r3, #1
    e4fc:	e3500000 	cmp	r0, #0
    e500:	01a00003 	moveq	r0, r3
    e504:	e12fff1e 	bx	lr

0000e508 <CString::operator=(char const*)>:
    e508:	e92d4070 	push	{r4, r5, r6, lr}
    e50c:	e1a04000 	mov	r4, r0
    e510:	e5900004 	ldr	r0, [r0, #4]
    e514:	e1a05001 	mov	r5, r1
    e518:	e3500000 	cmp	r0, #0
    e51c:	0a000000 	beq	e524 <CString::operator=(char const*)+0x1c>
    e520:	ebffefdd 	bl	a49c <operator delete[](void*)>
    e524:	e1a00005 	mov	r0, r5
    e528:	ebfff366 	bl	b2c8 <strlen>
    e52c:	e2800001 	add	r0, r0, #1
    e530:	e5840008 	str	r0, [r4, #8]
    e534:	ebffefd6 	bl	a494 <operator new[](unsigned int)>
    e538:	e1a01005 	mov	r1, r5
    e53c:	e5840004 	str	r0, [r4, #4]
    e540:	ebfff385 	bl	b35c <strcpy>
    e544:	e5940004 	ldr	r0, [r4, #4]
    e548:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e54c <CString::GetLength() const>:
    e54c:	e5900004 	ldr	r0, [r0, #4]
    e550:	e3500000 	cmp	r0, #0
    e554:	012fff1e 	bxeq	lr
    e558:	eafff35a 	b	b2c8 <strlen>

0000e55c <CString::Append(char const*)>:
    e55c:	e92d4070 	push	{r4, r5, r6, lr}
    e560:	e1a04000 	mov	r4, r0
    e564:	e5900004 	ldr	r0, [r0, #4]
    e568:	e3a03001 	mov	r3, #1
    e56c:	e1a06001 	mov	r6, r1
    e570:	e5843008 	str	r3, [r4, #8]
    e574:	e3500000 	cmp	r0, #0
    e578:	0a000003 	beq	e58c <CString::Append(char const*)+0x30>
    e57c:	ebfff351 	bl	b2c8 <strlen>
    e580:	e5943008 	ldr	r3, [r4, #8]
    e584:	e0830000 	add	r0, r3, r0
    e588:	e5840008 	str	r0, [r4, #8]
    e58c:	e1a00006 	mov	r0, r6
    e590:	ebfff34c 	bl	b2c8 <strlen>
    e594:	e5943008 	ldr	r3, [r4, #8]
    e598:	e0800003 	add	r0, r0, r3
    e59c:	e5840008 	str	r0, [r4, #8]
    e5a0:	ebffefbb 	bl	a494 <operator new[](unsigned int)>
    e5a4:	e5941004 	ldr	r1, [r4, #4]
    e5a8:	e3510000 	cmp	r1, #0
    e5ac:	e1a05000 	mov	r5, r0
    e5b0:	05c01000 	strbeq	r1, [r0]
    e5b4:	0a000004 	beq	e5cc <CString::Append(char const*)+0x70>
    e5b8:	ebfff367 	bl	b35c <strcpy>
    e5bc:	e5940004 	ldr	r0, [r4, #4]
    e5c0:	e3500000 	cmp	r0, #0
    e5c4:	0a000000 	beq	e5cc <CString::Append(char const*)+0x70>
    e5c8:	ebffefb3 	bl	a49c <operator delete[](void*)>
    e5cc:	e1a01006 	mov	r1, r6
    e5d0:	e1a00005 	mov	r0, r5
    e5d4:	ebfff37e 	bl	b3d4 <strcat>
    e5d8:	e5845004 	str	r5, [r4, #4]
    e5dc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e5e0 <CString::Compare(char const*) const>:
    e5e0:	e5900004 	ldr	r0, [r0, #4]
    e5e4:	eafff341 	b	b2f0 <strcmp>

0000e5e8 <CString::Find(char) const>:
    e5e8:	e5902004 	ldr	r2, [r0, #4]
    e5ec:	e1d230d0 	ldrsb	r3, [r2]
    e5f0:	e3530000 	cmp	r3, #0
    e5f4:	0a000009 	beq	e620 <CString::Find(char) const+0x38>
    e5f8:	e1510003 	cmp	r1, r3
    e5fc:	e3a00000 	mov	r0, #0
    e600:	1a000002 	bne	e610 <CString::Find(char) const+0x28>
    e604:	ea000007 	b	e628 <CString::Find(char) const+0x40>
    e608:	e1530001 	cmp	r3, r1
    e60c:	012fff1e 	bxeq	lr
    e610:	e1f230d1 	ldrsb	r3, [r2, #1]!
    e614:	e2800001 	add	r0, r0, #1
    e618:	e3530000 	cmp	r3, #0
    e61c:	1afffff9 	bne	e608 <CString::Find(char) const+0x20>
    e620:	e3e00000 	mvn	r0, #0
    e624:	e12fff1e 	bx	lr
    e628:	e12fff1e 	bx	lr

0000e62c <CString::PutChar(char, unsigned int)>:
    e62c:	e92d4070 	push	{r4, r5, r6, lr}
    e630:	e2524000 	subs	r4, r2, #0
    e634:	08bd8070 	popeq	{r4, r5, r6, pc}
    e638:	e1a06001 	mov	r6, r1
    e63c:	e1a01004 	mov	r1, r4
    e640:	e1a05000 	mov	r5, r0
    e644:	ebffff78 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e648:	e2443001 	sub	r3, r4, #1
    e64c:	e595200c 	ldr	r2, [r5, #12]
    e650:	e2433001 	sub	r3, r3, #1
    e654:	e3730001 	cmn	r3, #1
    e658:	e2820001 	add	r0, r2, #1
    e65c:	e585000c 	str	r0, [r5, #12]
    e660:	e5c26000 	strb	r6, [r2]
    e664:	1afffff8 	bne	e64c <CString::PutChar(char, unsigned int)+0x20>
    e668:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e66c <CString::PutString(char const*)>:
    e66c:	e92d4070 	push	{r4, r5, r6, lr}
    e670:	e1a04000 	mov	r4, r0
    e674:	e1a00001 	mov	r0, r1
    e678:	e1a05001 	mov	r5, r1
    e67c:	ebfff311 	bl	b2c8 <strlen>
    e680:	e2506000 	subs	r6, r0, #0
    e684:	0a000002 	beq	e694 <CString::PutString(char const*)+0x28>
    e688:	e1a01006 	mov	r1, r6
    e68c:	e1a00004 	mov	r0, r4
    e690:	ebffff65 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e694:	e1a01005 	mov	r1, r5
    e698:	e594000c 	ldr	r0, [r4, #12]
    e69c:	ebfff32e 	bl	b35c <strcpy>
    e6a0:	e594100c 	ldr	r1, [r4, #12]
    e6a4:	e0811006 	add	r1, r1, r6
    e6a8:	e584100c 	str	r1, [r4, #12]
    e6ac:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e6b0 <CString::ReserveSpace(unsigned int)>:
    e6b0:	e3510000 	cmp	r1, #0
    e6b4:	012fff1e 	bxeq	lr
    e6b8:	eaffff5b 	b	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000e6bc <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    e6bc:	e1510002 	cmp	r1, r2
    e6c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e6c4:	e1a06001 	mov	r6, r1
    e6c8:	e1a08002 	mov	r8, r2
    e6cc:	e1a0a000 	mov	sl, r0
    e6d0:	e1a07003 	mov	r7, r3
    e6d4:	23a05001 	movcs	r5, #1
    e6d8:	3a000022 	bcc	e768 <CString::ntoa(char*, unsigned long, unsigned int, int)+0xac>
    e6dc:	e0050598 	mul	r5, r8, r5
    e6e0:	e1a00006 	mov	r0, r6
    e6e4:	e1a01005 	mov	r1, r5
    e6e8:	eb000a84 	bl	11100 <__aeabi_uidiv>
    e6ec:	e1500008 	cmp	r0, r8
    e6f0:	e1a04000 	mov	r4, r0
    e6f4:	2afffff8 	bcs	e6dc <CString::ntoa(char*, unsigned long, unsigned int, int)+0x20>
    e6f8:	e3570000 	cmp	r7, #0
    e6fc:	e1a0700a 	mov	r7, sl
    e700:	13a09037 	movne	r9, #55	; 0x37
    e704:	03a09057 	moveq	r9, #87	; 0x57
    e708:	ea000001 	b	e714 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x58>
    e70c:	eb000a7b 	bl	11100 <__aeabi_uidiv>
    e710:	e1a04000 	mov	r4, r0
    e714:	e1a00006 	mov	r0, r6
    e718:	e1a01005 	mov	r1, r5
    e71c:	eb000a7b 	bl	11110 <__aeabi_uidivmod>
    e720:	e2877001 	add	r7, r7, #1
    e724:	e3540009 	cmp	r4, #9
    e728:	e0893004 	add	r3, r9, r4
    e72c:	e2844030 	add	r4, r4, #48	; 0x30
    e730:	e1a00005 	mov	r0, r5
    e734:	e6af3073 	sxtb	r3, r3
    e738:	96af3074 	sxtbls	r3, r4
    e73c:	e5473001 	strb	r3, [r7, #-1]
    e740:	e1a06001 	mov	r6, r1
    e744:	e1a01008 	mov	r1, r8
    e748:	eb000a6c 	bl	11100 <__aeabi_uidiv>
    e74c:	e2505000 	subs	r5, r0, #0
    e750:	e1a00006 	mov	r0, r6
    e754:	e1a01005 	mov	r1, r5
    e758:	1affffeb 	bne	e70c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x50>
    e75c:	e5c75000 	strb	r5, [r7]
    e760:	e1a0000a 	mov	r0, sl
    e764:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e768:	e1a04001 	mov	r4, r1
    e76c:	e3a05001 	mov	r5, #1
    e770:	eaffffe0 	b	e6f8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x3c>

0000e774 <CString::ftoa(char*, double, unsigned int)>:
    e774:	eeb50bc0 	vcmpe.f64	d0, #0.0
    e778:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e77c:	e1a08000 	mov	r8, r0
    e780:	ed2d8b02 	vpush	{d8}
    e784:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e788:	43a0302d 	movmi	r3, #45	; 0x2d
    e78c:	42809001 	addmi	r9, r0, #1
    e790:	45c03000 	strbmi	r3, [r0]
    e794:	eeb08b40 	vmov.f64	d8, d0
    e798:	51a09000 	movpl	r9, r0
    e79c:	eddf0b91 	vldr	d16, [pc, #580]	; e9e8 <CString::ftoa(char*, double, unsigned int)+0x274>
    e7a0:	e24dd01c 	sub	sp, sp, #28
    e7a4:	e58d1004 	str	r1, [sp, #4]
    e7a8:	4eb18b40 	vnegmi.f64	d8, d0
    e7ac:	eeb48be0 	vcmpe.f64	d8, d16
    e7b0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e7b4:	ca00007b 	bgt	e9a8 <CString::ftoa(char*, double, unsigned int)+0x234>
    e7b8:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e7bc:	ee175a90 	vmov	r5, s15
    e7c0:	e3550009 	cmp	r5, #9
    e7c4:	83a07001 	movhi	r7, #1
    e7c8:	83a0400a 	movhi	r4, #10
    e7cc:	9a00007d 	bls	e9c8 <CString::ftoa(char*, double, unsigned int)+0x254>
    e7d0:	e0070794 	mul	r7, r4, r7
    e7d4:	e1a00005 	mov	r0, r5
    e7d8:	e1a01007 	mov	r1, r7
    e7dc:	eb000a47 	bl	11100 <__aeabi_uidiv>
    e7e0:	e3500009 	cmp	r0, #9
    e7e4:	e1a0a000 	mov	sl, r0
    e7e8:	8afffff8 	bhi	e7d0 <CString::ftoa(char*, double, unsigned int)+0x5c>
    e7ec:	e30c6ccd 	movw	r6, #52429	; 0xcccd
    e7f0:	e1a04009 	mov	r4, r9
    e7f4:	e34c6ccc 	movt	r6, #52428	; 0xcccc
    e7f8:	e1a0b005 	mov	fp, r5
    e7fc:	ea000001 	b	e808 <CString::ftoa(char*, double, unsigned int)+0x94>
    e800:	eb000a3e 	bl	11100 <__aeabi_uidiv>
    e804:	e1a0a000 	mov	sl, r0
    e808:	e1a0000b 	mov	r0, fp
    e80c:	e1a01007 	mov	r1, r7
    e810:	eb000a3e 	bl	11110 <__aeabi_uidivmod>
    e814:	e0832697 	umull	r2, r3, r7, r6
    e818:	e35a0009 	cmp	sl, #9
    e81c:	e2844001 	add	r4, r4, #1
    e820:	e1a0b001 	mov	fp, r1
    e824:	e28a1057 	add	r1, sl, #87	; 0x57
    e828:	e28aa030 	add	sl, sl, #48	; 0x30
    e82c:	e1a0000b 	mov	r0, fp
    e830:	e6af1071 	sxtb	r1, r1
    e834:	96af107a 	sxtbls	r1, sl
    e838:	e1b071a3 	lsrs	r7, r3, #3
    e83c:	e5441001 	strb	r1, [r4, #-1]
    e840:	e1a01007 	mov	r1, r7
    e844:	1affffed 	bne	e800 <CString::ftoa(char*, double, unsigned int)+0x8c>
    e848:	e59d3004 	ldr	r3, [sp, #4]
    e84c:	e5c47000 	strb	r7, [r4]
    e850:	e3530000 	cmp	r3, #0
    e854:	1a000003 	bne	e868 <CString::ftoa(char*, double, unsigned int)+0xf4>
    e858:	e1a00008 	mov	r0, r8
    e85c:	e28dd01c 	add	sp, sp, #28
    e860:	ecbd8b02 	vpop	{d8}
    e864:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e868:	e1a00009 	mov	r0, r9
    e86c:	ebfff295 	bl	b2c8 <strlen>
    e870:	e59d3004 	ldr	r3, [sp, #4]
    e874:	e3530009 	cmp	r3, #9
    e878:	31a07003 	movcc	r7, r3
    e87c:	23a07009 	movcs	r7, #9
    e880:	e3570001 	cmp	r7, #1
    e884:	e3a0302e 	mov	r3, #46	; 0x2e
    e888:	e0892000 	add	r2, r9, r0
    e88c:	e7c93000 	strb	r3, [r9, r0]
    e890:	e58d2004 	str	r2, [sp, #4]
    e894:	e2829001 	add	r9, r2, #1
    e898:	0a000050 	beq	e9e0 <CString::ftoa(char*, double, unsigned int)+0x26c>
    e89c:	e3a0200a 	mov	r2, #10
    e8a0:	e3a03002 	mov	r3, #2
    e8a4:	e1a01002 	mov	r1, r2
    e8a8:	e2833001 	add	r3, r3, #1
    e8ac:	e1530007 	cmp	r3, r7
    e8b0:	e0020291 	mul	r2, r1, r2
    e8b4:	9afffffb 	bls	e8a8 <CString::ftoa(char*, double, unsigned int)+0x134>
    e8b8:	ee072a90 	vmov	s15, r2
    e8bc:	eef81b67 	vcvt.f64.u32	d17, s15
    e8c0:	ee075a90 	vmov	s15, r5
    e8c4:	eef80b67 	vcvt.f64.u32	d16, s15
    e8c8:	ee388b60 	vsub.f64	d8, d8, d16
    e8cc:	ee288b21 	vmul.f64	d8, d8, d17
    e8d0:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e8d4:	ee17ba90 	vmov	fp, s15
    e8d8:	e35b0009 	cmp	fp, #9
    e8dc:	83a06001 	movhi	r6, #1
    e8e0:	83a0400a 	movhi	r4, #10
    e8e4:	9a00003a 	bls	e9d4 <CString::ftoa(char*, double, unsigned int)+0x260>
    e8e8:	e0060694 	mul	r6, r4, r6
    e8ec:	e1a0000b 	mov	r0, fp
    e8f0:	e1a01006 	mov	r1, r6
    e8f4:	eb000a01 	bl	11100 <__aeabi_uidiv>
    e8f8:	e3500009 	cmp	r0, #9
    e8fc:	e1a0a000 	mov	sl, r0
    e900:	8afffff8 	bhi	e8e8 <CString::ftoa(char*, double, unsigned int)+0x174>
    e904:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    e908:	e28d400c 	add	r4, sp, #12
    e90c:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    e910:	ea000001 	b	e91c <CString::ftoa(char*, double, unsigned int)+0x1a8>
    e914:	eb0009f9 	bl	11100 <__aeabi_uidiv>
    e918:	e1a0a000 	mov	sl, r0
    e91c:	e1a0000b 	mov	r0, fp
    e920:	e1a01006 	mov	r1, r6
    e924:	eb0009f9 	bl	11110 <__aeabi_uidivmod>
    e928:	e0832596 	umull	r2, r3, r6, r5
    e92c:	e35a0009 	cmp	sl, #9
    e930:	e2844001 	add	r4, r4, #1
    e934:	e1a0b001 	mov	fp, r1
    e938:	e28a1057 	add	r1, sl, #87	; 0x57
    e93c:	e28aa030 	add	sl, sl, #48	; 0x30
    e940:	e1a0000b 	mov	r0, fp
    e944:	e6af1071 	sxtb	r1, r1
    e948:	96af107a 	sxtbls	r1, sl
    e94c:	e1b061a3 	lsrs	r6, r3, #3
    e950:	e5441001 	strb	r1, [r4, #-1]
    e954:	e1a01006 	mov	r1, r6
    e958:	1affffed 	bne	e914 <CString::ftoa(char*, double, unsigned int)+0x1a0>
    e95c:	e28d000c 	add	r0, sp, #12
    e960:	e5c46000 	strb	r6, [r4]
    e964:	ebfff257 	bl	b2c8 <strlen>
    e968:	e0577000 	subs	r7, r7, r0
    e96c:	0a000006 	beq	e98c <CString::ftoa(char*, double, unsigned int)+0x218>
    e970:	e59d6004 	ldr	r6, [sp, #4]
    e974:	e3a03030 	mov	r3, #48	; 0x30
    e978:	e0862007 	add	r2, r6, r7
    e97c:	e5e63001 	strb	r3, [r6, #1]!
    e980:	e1560002 	cmp	r6, r2
    e984:	1afffffc 	bne	e97c <CString::ftoa(char*, double, unsigned int)+0x208>
    e988:	e0899007 	add	r9, r9, r7
    e98c:	e28d100c 	add	r1, sp, #12
    e990:	e1a00009 	mov	r0, r9
    e994:	ebfff270 	bl	b35c <strcpy>
    e998:	e1a00008 	mov	r0, r8
    e99c:	e28dd01c 	add	sp, sp, #28
    e9a0:	ecbd8b02 	vpop	{d8}
    e9a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9a8:	e1a00009 	mov	r0, r9
    e9ac:	e3031040 	movw	r1, #12352	; 0x3040
    e9b0:	e3401001 	movt	r1, #1
    e9b4:	ebfff268 	bl	b35c <strcpy>
    e9b8:	e1a00008 	mov	r0, r8
    e9bc:	e28dd01c 	add	sp, sp, #28
    e9c0:	ecbd8b02 	vpop	{d8}
    e9c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9c8:	ee17aa90 	vmov	sl, s15
    e9cc:	e3a07001 	mov	r7, #1
    e9d0:	eaffff85 	b	e7ec <CString::ftoa(char*, double, unsigned int)+0x78>
    e9d4:	ee17aa90 	vmov	sl, s15
    e9d8:	e3a06001 	mov	r6, #1
    e9dc:	eaffffc8 	b	e904 <CString::ftoa(char*, double, unsigned int)+0x190>
    e9e0:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    e9e4:	eaffffb5 	b	e8c0 <CString::ftoa(char*, double, unsigned int)+0x14c>
    e9e8:	ffe00000 	.word	0xffe00000
    e9ec:	41efffff 	.word	0x41efffff

0000e9f0 <CString::FormatV(char const*, std::__va_list)>:
    e9f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9f4:	e1a0b000 	mov	fp, r0
    e9f8:	e5900004 	ldr	r0, [r0, #4]
    e9fc:	e24dd034 	sub	sp, sp, #52	; 0x34
    ea00:	e1a05001 	mov	r5, r1
    ea04:	e3500000 	cmp	r0, #0
    ea08:	e58d2000 	str	r2, [sp]
    ea0c:	0a000000 	beq	ea14 <CString::FormatV(char const*, std::__va_list)+0x24>
    ea10:	ebffeea1 	bl	a49c <operator delete[](void*)>
    ea14:	e3a00040 	mov	r0, #64	; 0x40
    ea18:	e58b0008 	str	r0, [fp, #8]
    ea1c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    ea20:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    ea24:	e58d3014 	str	r3, [sp, #20]
    ea28:	ebffee99 	bl	a494 <operator new[](unsigned int)>
    ea2c:	e58b0004 	str	r0, [fp, #4]
    ea30:	e58b000c 	str	r0, [fp, #12]
    ea34:	e1d540d0 	ldrsb	r4, [r5]
    ea38:	e3540000 	cmp	r4, #0
    ea3c:	0a0000a2 	beq	eccc <CString::FormatV(char const*, std::__va_list)+0x2dc>
    ea40:	e3540025 	cmp	r4, #37	; 0x25
    ea44:	13a01001 	movne	r1, #1
    ea48:	11a0000b 	movne	r0, fp
    ea4c:	1a000156 	bne	efac <CString::FormatV(char const*, std::__va_list)+0x5bc>
    ea50:	e1d560d1 	ldrsb	r6, [r5, #1]
    ea54:	e3560025 	cmp	r6, #37	; 0x25
    ea58:	0a000169 	beq	f004 <CString::FormatV(char const*, std::__va_list)+0x614>
    ea5c:	e356002d 	cmp	r6, #45	; 0x2d
    ea60:	e3a04000 	mov	r4, #0
    ea64:	12855001 	addne	r5, r5, #1
    ea68:	01d560d2 	ldrsbeq	r6, [r5, #2]
    ea6c:	03a03001 	moveq	r3, #1
    ea70:	13a03000 	movne	r3, #0
    ea74:	02855002 	addeq	r5, r5, #2
    ea78:	e3560030 	cmp	r6, #48	; 0x30
    ea7c:	e58d3004 	str	r3, [sp, #4]
    ea80:	01d560d1 	ldrsbeq	r6, [r5, #1]
    ea84:	03a03001 	moveq	r3, #1
    ea88:	13a03000 	movne	r3, #0
    ea8c:	058d300c 	streq	r3, [sp, #12]
    ea90:	00855003 	addeq	r5, r5, r3
    ea94:	158d300c 	strne	r3, [sp, #12]
    ea98:	e2463030 	sub	r3, r6, #48	; 0x30
    ea9c:	e6ef3073 	uxtb	r3, r3
    eaa0:	e3530009 	cmp	r3, #9
    eaa4:	8a000007 	bhi	eac8 <CString::FormatV(char const*, std::__va_list)+0xd8>
    eaa8:	e3a0200a 	mov	r2, #10
    eaac:	e0246492 	mla	r4, r2, r4, r6
    eab0:	e1f560d1 	ldrsb	r6, [r5, #1]!
    eab4:	e2463030 	sub	r3, r6, #48	; 0x30
    eab8:	e2444030 	sub	r4, r4, #48	; 0x30
    eabc:	e6ef3073 	uxtb	r3, r3
    eac0:	e3530009 	cmp	r3, #9
    eac4:	9afffff8 	bls	eaac <CString::FormatV(char const*, std::__va_list)+0xbc>
    eac8:	e356002e 	cmp	r6, #46	; 0x2e
    eacc:	0a00013c 	beq	efc4 <CString::FormatV(char const*, std::__va_list)+0x5d4>
    ead0:	e1d570d0 	ldrsb	r7, [r5]
    ead4:	e3a01006 	mov	r1, #6
    ead8:	e357006c 	cmp	r7, #108	; 0x6c
    eadc:	01d570d1 	ldrsbeq	r7, [r5, #1]
    eae0:	03a02001 	moveq	r2, #1
    eae4:	13a02000 	movne	r2, #0
    eae8:	00855002 	addeq	r5, r5, r2
    eaec:	e2473058 	sub	r3, r7, #88	; 0x58
    eaf0:	e3530020 	cmp	r3, #32
    eaf4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    eaf8:	ea000120 	b	ef80 <CString::FormatV(char const*, std::__va_list)+0x590>
    eafc:	0000eefc 	.word	0x0000eefc
    eb00:	0000ef80 	.word	0x0000ef80
    eb04:	0000ef80 	.word	0x0000ef80
    eb08:	0000ef80 	.word	0x0000ef80
    eb0c:	0000ef80 	.word	0x0000ef80
    eb10:	0000ef80 	.word	0x0000ef80
    eb14:	0000ef80 	.word	0x0000ef80
    eb18:	0000ef80 	.word	0x0000ef80
    eb1c:	0000ef80 	.word	0x0000ef80
    eb20:	0000ef80 	.word	0x0000ef80
    eb24:	0000ef80 	.word	0x0000ef80
    eb28:	0000ee88 	.word	0x0000ee88
    eb2c:	0000ed5c 	.word	0x0000ed5c
    eb30:	0000ef80 	.word	0x0000ef80
    eb34:	0000ecdc 	.word	0x0000ecdc
    eb38:	0000ef80 	.word	0x0000ef80
    eb3c:	0000ef80 	.word	0x0000ef80
    eb40:	0000ef80 	.word	0x0000ef80
    eb44:	0000ef80 	.word	0x0000ef80
    eb48:	0000ef80 	.word	0x0000ef80
    eb4c:	0000ef80 	.word	0x0000ef80
    eb50:	0000ef80 	.word	0x0000ef80
    eb54:	0000ef80 	.word	0x0000ef80
    eb58:	0000eb80 	.word	0x0000eb80
    eb5c:	0000ef80 	.word	0x0000ef80
    eb60:	0000ef80 	.word	0x0000ef80
    eb64:	0000ef80 	.word	0x0000ef80
    eb68:	0000ef0c 	.word	0x0000ef0c
    eb6c:	0000ef80 	.word	0x0000ef80
    eb70:	0000ef04 	.word	0x0000ef04
    eb74:	0000ef80 	.word	0x0000ef80
    eb78:	0000ef80 	.word	0x0000ef80
    eb7c:	0000eefc 	.word	0x0000eefc
    eb80:	e3a08008 	mov	r8, #8
    eb84:	e59d3000 	ldr	r3, [sp]
    eb88:	e2833004 	add	r3, r3, #4
    eb8c:	e5136004 	ldr	r6, [r3, #-4]
    eb90:	e58d3000 	str	r3, [sp]
    eb94:	e1560008 	cmp	r6, r8
    eb98:	23a0a001 	movcs	sl, #1
    eb9c:	3a000198 	bcc	f204 <CString::FormatV(char const*, std::__va_list)+0x814>
    eba0:	e00a0a98 	mul	sl, r8, sl
    eba4:	e1a00006 	mov	r0, r6
    eba8:	e1a0100a 	mov	r1, sl
    ebac:	eb000953 	bl	11100 <__aeabi_uidiv>
    ebb0:	e1580000 	cmp	r8, r0
    ebb4:	9afffff9 	bls	eba0 <CString::FormatV(char const*, std::__va_list)+0x1b0>
    ebb8:	e1a09000 	mov	r9, r0
    ebbc:	e28d3018 	add	r3, sp, #24
    ebc0:	e3570058 	cmp	r7, #88	; 0x58
    ebc4:	e58d3008 	str	r3, [sp, #8]
    ebc8:	13a02057 	movne	r2, #87	; 0x57
    ebcc:	03a02037 	moveq	r2, #55	; 0x37
    ebd0:	e1a07003 	mov	r7, r3
    ebd4:	e1a03005 	mov	r3, r5
    ebd8:	e58d4010 	str	r4, [sp, #16]
    ebdc:	e1a0500a 	mov	r5, sl
    ebe0:	e1a04002 	mov	r4, r2
    ebe4:	e1a0a003 	mov	sl, r3
    ebe8:	ea000001 	b	ebf4 <CString::FormatV(char const*, std::__va_list)+0x204>
    ebec:	eb000943 	bl	11100 <__aeabi_uidiv>
    ebf0:	e1a09000 	mov	r9, r0
    ebf4:	e1a00006 	mov	r0, r6
    ebf8:	e1a01005 	mov	r1, r5
    ebfc:	eb000943 	bl	11110 <__aeabi_uidivmod>
    ec00:	e2877001 	add	r7, r7, #1
    ec04:	e3590009 	cmp	r9, #9
    ec08:	e0842009 	add	r2, r4, r9
    ec0c:	e2899030 	add	r9, r9, #48	; 0x30
    ec10:	e1a00005 	mov	r0, r5
    ec14:	e6af2072 	sxtb	r2, r2
    ec18:	96af2079 	sxtbls	r2, r9
    ec1c:	e5472001 	strb	r2, [r7, #-1]
    ec20:	e1a06001 	mov	r6, r1
    ec24:	e1a01008 	mov	r1, r8
    ec28:	eb000934 	bl	11100 <__aeabi_uidiv>
    ec2c:	e2505000 	subs	r5, r0, #0
    ec30:	e1a00006 	mov	r0, r6
    ec34:	e1a01005 	mov	r1, r5
    ec38:	1affffeb 	bne	ebec <CString::FormatV(char const*, std::__va_list)+0x1fc>
    ec3c:	e1a0300a 	mov	r3, sl
    ec40:	e59d0008 	ldr	r0, [sp, #8]
    ec44:	e5c71000 	strb	r1, [r7]
    ec48:	e1a0a005 	mov	sl, r5
    ec4c:	e59d4010 	ldr	r4, [sp, #16]
    ec50:	e1a05003 	mov	r5, r3
    ec54:	ebfff19b 	bl	b2c8 <strlen>
    ec58:	e59d3004 	ldr	r3, [sp, #4]
    ec5c:	e3530000 	cmp	r3, #0
    ec60:	e1a06000 	mov	r6, r0
    ec64:	1a0000ef 	bne	f028 <CString::FormatV(char const*, std::__va_list)+0x638>
    ec68:	e1500004 	cmp	r0, r4
    ec6c:	2a00000f 	bcs	ecb0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    ec70:	e59d300c 	ldr	r3, [sp, #12]
    ec74:	e0444000 	sub	r4, r4, r0
    ec78:	e1a0000b 	mov	r0, fp
    ec7c:	e3530000 	cmp	r3, #0
    ec80:	e1a01004 	mov	r1, r4
    ec84:	03a06020 	moveq	r6, #32
    ec88:	13a06030 	movne	r6, #48	; 0x30
    ec8c:	ebfffde6 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ec90:	e2443001 	sub	r3, r4, #1
    ec94:	e59b200c 	ldr	r2, [fp, #12]
    ec98:	e2433001 	sub	r3, r3, #1
    ec9c:	e3730001 	cmn	r3, #1
    eca0:	e2821001 	add	r1, r2, #1
    eca4:	e58b100c 	str	r1, [fp, #12]
    eca8:	e5c26000 	strb	r6, [r2]
    ecac:	1afffff8 	bne	ec94 <CString::FormatV(char const*, std::__va_list)+0x2a4>
    ecb0:	e59d1008 	ldr	r1, [sp, #8]
    ecb4:	e1a0000b 	mov	r0, fp
    ecb8:	ebfffe6b 	bl	e66c <CString::PutString(char const*)>
    ecbc:	e2855001 	add	r5, r5, #1
    ecc0:	e1d540d0 	ldrsb	r4, [r5]
    ecc4:	e3540000 	cmp	r4, #0
    ecc8:	1affff5c 	bne	ea40 <CString::FormatV(char const*, std::__va_list)+0x50>
    eccc:	e59b300c 	ldr	r3, [fp, #12]
    ecd0:	e5c34000 	strb	r4, [r3]
    ecd4:	e28dd034 	add	sp, sp, #52	; 0x34
    ecd8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecdc:	e59d3000 	ldr	r3, [sp]
    ece0:	e28d6018 	add	r6, sp, #24
    ece4:	e58d6008 	str	r6, [sp, #8]
    ece8:	e2833007 	add	r3, r3, #7
    ecec:	e1a00006 	mov	r0, r6
    ecf0:	e3c33007 	bic	r3, r3, #7
    ecf4:	e2832008 	add	r2, r3, #8
    ecf8:	e58d2000 	str	r2, [sp]
    ecfc:	ed930b00 	vldr	d0, [r3]
    ed00:	ebfffe9b 	bl	e774 <CString::ftoa(char*, double, unsigned int)>
    ed04:	e1a00006 	mov	r0, r6
    ed08:	ebfff16e 	bl	b2c8 <strlen>
    ed0c:	e59d3004 	ldr	r3, [sp, #4]
    ed10:	e3530000 	cmp	r3, #0
    ed14:	e1a06000 	mov	r6, r0
    ed18:	1a000107 	bne	f13c <CString::FormatV(char const*, std::__va_list)+0x74c>
    ed1c:	e1500004 	cmp	r0, r4
    ed20:	2affffe2 	bcs	ecb0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    ed24:	e0444000 	sub	r4, r4, r0
    ed28:	e1a0000b 	mov	r0, fp
    ed2c:	e1a01004 	mov	r1, r4
    ed30:	ebfffdbd 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ed34:	e2443001 	sub	r3, r4, #1
    ed38:	e3a00020 	mov	r0, #32
    ed3c:	e59b200c 	ldr	r2, [fp, #12]
    ed40:	e2433001 	sub	r3, r3, #1
    ed44:	e3730001 	cmn	r3, #1
    ed48:	e2821001 	add	r1, r2, #1
    ed4c:	e58b100c 	str	r1, [fp, #12]
    ed50:	e5c20000 	strb	r0, [r2]
    ed54:	1afffff8 	bne	ed3c <CString::FormatV(char const*, std::__va_list)+0x34c>
    ed58:	eaffffd4 	b	ecb0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    ed5c:	e59d3000 	ldr	r3, [sp]
    ed60:	e2833004 	add	r3, r3, #4
    ed64:	e5137004 	ldr	r7, [r3, #-4]
    ed68:	e58d3000 	str	r3, [sp]
    ed6c:	e3570000 	cmp	r7, #0
    ed70:	b2677000 	rsblt	r7, r7, #0
    ed74:	b3a03001 	movlt	r3, #1
    ed78:	a3a03000 	movge	r3, #0
    ed7c:	b58d300c 	strlt	r3, [sp, #12]
    ed80:	e1a06007 	mov	r6, r7
    ed84:	a58d300c 	strge	r3, [sp, #12]
    ed88:	e3570009 	cmp	r7, #9
    ed8c:	e58d3010 	str	r3, [sp, #16]
    ed90:	c3a0a001 	movgt	sl, #1
    ed94:	c3a0900a 	movgt	r9, #10
    ed98:	da000116 	ble	f1f8 <CString::FormatV(char const*, std::__va_list)+0x808>
    ed9c:	e00a0a99 	mul	sl, r9, sl
    eda0:	e1a00007 	mov	r0, r7
    eda4:	e1a0100a 	mov	r1, sl
    eda8:	eb0008d4 	bl	11100 <__aeabi_uidiv>
    edac:	e3500009 	cmp	r0, #9
    edb0:	8afffff9 	bhi	ed9c <CString::FormatV(char const*, std::__va_list)+0x3ac>
    edb4:	e1a08000 	mov	r8, r0
    edb8:	e28d7018 	add	r7, sp, #24
    edbc:	e59d9014 	ldr	r9, [sp, #20]
    edc0:	e58d7008 	str	r7, [sp, #8]
    edc4:	ea000001 	b	edd0 <CString::FormatV(char const*, std::__va_list)+0x3e0>
    edc8:	eb0008cc 	bl	11100 <__aeabi_uidiv>
    edcc:	e1a08000 	mov	r8, r0
    edd0:	e1a00006 	mov	r0, r6
    edd4:	e1a0100a 	mov	r1, sl
    edd8:	eb0008cc 	bl	11110 <__aeabi_uidivmod>
    eddc:	e083299a 	umull	r2, r3, sl, r9
    ede0:	e3580009 	cmp	r8, #9
    ede4:	e2877001 	add	r7, r7, #1
    ede8:	e1a06001 	mov	r6, r1
    edec:	e2881057 	add	r1, r8, #87	; 0x57
    edf0:	e2888030 	add	r8, r8, #48	; 0x30
    edf4:	e1a00006 	mov	r0, r6
    edf8:	e6af1071 	sxtb	r1, r1
    edfc:	96af1078 	sxtbls	r1, r8
    ee00:	e1b0a1a3 	lsrs	sl, r3, #3
    ee04:	e5471001 	strb	r1, [r7, #-1]
    ee08:	e1a0100a 	mov	r1, sl
    ee0c:	1affffed 	bne	edc8 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    ee10:	e59d0008 	ldr	r0, [sp, #8]
    ee14:	e5c7a000 	strb	sl, [r7]
    ee18:	ebfff12a 	bl	b2c8 <strlen>
    ee1c:	e59d3004 	ldr	r3, [sp, #4]
    ee20:	e3530000 	cmp	r3, #0
    ee24:	e59d300c 	ldr	r3, [sp, #12]
    ee28:	e0808003 	add	r8, r0, r3
    ee2c:	0a000090 	beq	f074 <CString::FormatV(char const*, std::__va_list)+0x684>
    ee30:	e59d3010 	ldr	r3, [sp, #16]
    ee34:	e3530000 	cmp	r3, #0
    ee38:	1a0000e5 	bne	f1d4 <CString::FormatV(char const*, std::__va_list)+0x7e4>
    ee3c:	e59d1008 	ldr	r1, [sp, #8]
    ee40:	e1a0000b 	mov	r0, fp
    ee44:	ebfffe08 	bl	e66c <CString::PutString(char const*)>
    ee48:	e1580004 	cmp	r8, r4
    ee4c:	2affff9a 	bcs	ecbc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ee50:	e0448008 	sub	r8, r4, r8
    ee54:	e1a0000b 	mov	r0, fp
    ee58:	e1a01008 	mov	r1, r8
    ee5c:	ebfffd72 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee60:	e2483001 	sub	r3, r8, #1
    ee64:	e3a00020 	mov	r0, #32
    ee68:	e59b200c 	ldr	r2, [fp, #12]
    ee6c:	e2433001 	sub	r3, r3, #1
    ee70:	e3730001 	cmn	r3, #1
    ee74:	e2821001 	add	r1, r2, #1
    ee78:	e58b100c 	str	r1, [fp, #12]
    ee7c:	e5c20000 	strb	r0, [r2]
    ee80:	1afffff8 	bne	ee68 <CString::FormatV(char const*, std::__va_list)+0x478>
    ee84:	eaffff8c 	b	ecbc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ee88:	e59d3004 	ldr	r3, [sp, #4]
    ee8c:	e3530000 	cmp	r3, #0
    ee90:	e59d3000 	ldr	r3, [sp]
    ee94:	e2836004 	add	r6, r3, #4
    ee98:	e1d370d0 	ldrsb	r7, [r3]
    ee9c:	1a00008f 	bne	f0e0 <CString::FormatV(char const*, std::__va_list)+0x6f0>
    eea0:	e3540001 	cmp	r4, #1
    eea4:	9a00000b 	bls	eed8 <CString::FormatV(char const*, std::__va_list)+0x4e8>
    eea8:	e2441001 	sub	r1, r4, #1
    eeac:	e1a0000b 	mov	r0, fp
    eeb0:	e2444002 	sub	r4, r4, #2
    eeb4:	ebfffd5c 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eeb8:	e3a01020 	mov	r1, #32
    eebc:	e59b300c 	ldr	r3, [fp, #12]
    eec0:	e2444001 	sub	r4, r4, #1
    eec4:	e3740001 	cmn	r4, #1
    eec8:	e2832001 	add	r2, r3, #1
    eecc:	e58b200c 	str	r2, [fp, #12]
    eed0:	e5c31000 	strb	r1, [r3]
    eed4:	1afffff8 	bne	eebc <CString::FormatV(char const*, std::__va_list)+0x4cc>
    eed8:	e3a01001 	mov	r1, #1
    eedc:	e1a0000b 	mov	r0, fp
    eee0:	ebfffd51 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eee4:	e59b300c 	ldr	r3, [fp, #12]
    eee8:	e58d6000 	str	r6, [sp]
    eeec:	e2832001 	add	r2, r3, #1
    eef0:	e58b200c 	str	r2, [fp, #12]
    eef4:	e5c37000 	strb	r7, [r3]
    eef8:	eaffff6f 	b	ecbc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    eefc:	e3a08010 	mov	r8, #16
    ef00:	eaffff1f 	b	eb84 <CString::FormatV(char const*, std::__va_list)+0x194>
    ef04:	e3a0800a 	mov	r8, #10
    ef08:	eaffff1d 	b	eb84 <CString::FormatV(char const*, std::__va_list)+0x194>
    ef0c:	e59d3000 	ldr	r3, [sp]
    ef10:	e2836004 	add	r6, r3, #4
    ef14:	e5938000 	ldr	r8, [r3]
    ef18:	e1a00008 	mov	r0, r8
    ef1c:	ebfff0e9 	bl	b2c8 <strlen>
    ef20:	e59d3004 	ldr	r3, [sp, #4]
    ef24:	e3530000 	cmp	r3, #0
    ef28:	e1a07000 	mov	r7, r0
    ef2c:	1a000095 	bne	f188 <CString::FormatV(char const*, std::__va_list)+0x798>
    ef30:	e1500004 	cmp	r0, r4
    ef34:	2a00000c 	bcs	ef6c <CString::FormatV(char const*, std::__va_list)+0x57c>
    ef38:	e0444000 	sub	r4, r4, r0
    ef3c:	e1a0000b 	mov	r0, fp
    ef40:	e1a01004 	mov	r1, r4
    ef44:	ebfffd38 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ef48:	e2443001 	sub	r3, r4, #1
    ef4c:	e3a00020 	mov	r0, #32
    ef50:	e59b200c 	ldr	r2, [fp, #12]
    ef54:	e2433001 	sub	r3, r3, #1
    ef58:	e3730001 	cmn	r3, #1
    ef5c:	e2821001 	add	r1, r2, #1
    ef60:	e58b100c 	str	r1, [fp, #12]
    ef64:	e5c20000 	strb	r0, [r2]
    ef68:	1afffff8 	bne	ef50 <CString::FormatV(char const*, std::__va_list)+0x560>
    ef6c:	e1a01008 	mov	r1, r8
    ef70:	e1a0000b 	mov	r0, fp
    ef74:	e58d6000 	str	r6, [sp]
    ef78:	ebfffdbb 	bl	e66c <CString::PutString(char const*)>
    ef7c:	eaffff4e 	b	ecbc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ef80:	e3a01001 	mov	r1, #1
    ef84:	e1a0000b 	mov	r0, fp
    ef88:	ebfffd27 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ef8c:	e59b300c 	ldr	r3, [fp, #12]
    ef90:	e3a02025 	mov	r2, #37	; 0x25
    ef94:	e3a01001 	mov	r1, #1
    ef98:	e0830001 	add	r0, r3, r1
    ef9c:	e58b000c 	str	r0, [fp, #12]
    efa0:	e5c32000 	strb	r2, [r3]
    efa4:	e1a0000b 	mov	r0, fp
    efa8:	e1d540d0 	ldrsb	r4, [r5]
    efac:	ebfffd1e 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    efb0:	e59b300c 	ldr	r3, [fp, #12]
    efb4:	e2832001 	add	r2, r3, #1
    efb8:	e58b200c 	str	r2, [fp, #12]
    efbc:	e5c34000 	strb	r4, [r3]
    efc0:	eaffff3d 	b	ecbc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    efc4:	e1d570d1 	ldrsb	r7, [r5, #1]
    efc8:	e3a01000 	mov	r1, #0
    efcc:	e2855001 	add	r5, r5, #1
    efd0:	e2473030 	sub	r3, r7, #48	; 0x30
    efd4:	e6ef3073 	uxtb	r3, r3
    efd8:	e3530009 	cmp	r3, #9
    efdc:	8afffebd 	bhi	ead8 <CString::FormatV(char const*, std::__va_list)+0xe8>
    efe0:	e3a0200a 	mov	r2, #10
    efe4:	e0217192 	mla	r1, r2, r1, r7
    efe8:	e1f570d1 	ldrsb	r7, [r5, #1]!
    efec:	e2473030 	sub	r3, r7, #48	; 0x30
    eff0:	e2411030 	sub	r1, r1, #48	; 0x30
    eff4:	e6ef3073 	uxtb	r3, r3
    eff8:	e3530009 	cmp	r3, #9
    effc:	9afffff8 	bls	efe4 <CString::FormatV(char const*, std::__va_list)+0x5f4>
    f000:	eafffeb4 	b	ead8 <CString::FormatV(char const*, std::__va_list)+0xe8>
    f004:	e3a01001 	mov	r1, #1
    f008:	e1a0000b 	mov	r0, fp
    f00c:	ebfffd06 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f010:	e59b300c 	ldr	r3, [fp, #12]
    f014:	e2855002 	add	r5, r5, #2
    f018:	e2832001 	add	r2, r3, #1
    f01c:	e58b200c 	str	r2, [fp, #12]
    f020:	e5c36000 	strb	r6, [r3]
    f024:	eafffe82 	b	ea34 <CString::FormatV(char const*, std::__va_list)+0x44>
    f028:	e59d1008 	ldr	r1, [sp, #8]
    f02c:	e1a0000b 	mov	r0, fp
    f030:	ebfffd8d 	bl	e66c <CString::PutString(char const*)>
    f034:	e1560004 	cmp	r6, r4
    f038:	2affff1f 	bcs	ecbc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    f03c:	e0444006 	sub	r4, r4, r6
    f040:	e1a0000b 	mov	r0, fp
    f044:	e1a01004 	mov	r1, r4
    f048:	ebfffcf7 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f04c:	e2443001 	sub	r3, r4, #1
    f050:	e3a00020 	mov	r0, #32
    f054:	e59b200c 	ldr	r2, [fp, #12]
    f058:	e2433001 	sub	r3, r3, #1
    f05c:	e3730001 	cmn	r3, #1
    f060:	e2821001 	add	r1, r2, #1
    f064:	e58b100c 	str	r1, [fp, #12]
    f068:	e5c20000 	strb	r0, [r2]
    f06c:	1afffff8 	bne	f054 <CString::FormatV(char const*, std::__va_list)+0x664>
    f070:	eaffff11 	b	ecbc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    f074:	e1580004 	cmp	r8, r4
    f078:	2a00000c 	bcs	f0b0 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    f07c:	e0448008 	sub	r8, r4, r8
    f080:	e1a0000b 	mov	r0, fp
    f084:	e1a01008 	mov	r1, r8
    f088:	ebfffce7 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f08c:	e2483001 	sub	r3, r8, #1
    f090:	e3a00020 	mov	r0, #32
    f094:	e59b200c 	ldr	r2, [fp, #12]
    f098:	e2433001 	sub	r3, r3, #1
    f09c:	e3730001 	cmn	r3, #1
    f0a0:	e2821001 	add	r1, r2, #1
    f0a4:	e58b100c 	str	r1, [fp, #12]
    f0a8:	e5c20000 	strb	r0, [r2]
    f0ac:	1afffff8 	bne	f094 <CString::FormatV(char const*, std::__va_list)+0x6a4>
    f0b0:	e59d3010 	ldr	r3, [sp, #16]
    f0b4:	e3530000 	cmp	r3, #0
    f0b8:	0afffefc 	beq	ecb0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f0bc:	e3a01001 	mov	r1, #1
    f0c0:	e1a0000b 	mov	r0, fp
    f0c4:	ebfffcd8 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f0c8:	e59b300c 	ldr	r3, [fp, #12]
    f0cc:	e3a0202d 	mov	r2, #45	; 0x2d
    f0d0:	e2831001 	add	r1, r3, #1
    f0d4:	e58b100c 	str	r1, [fp, #12]
    f0d8:	e5c32000 	strb	r2, [r3]
    f0dc:	eafffef3 	b	ecb0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    f0e0:	e3a01001 	mov	r1, #1
    f0e4:	e1a0000b 	mov	r0, fp
    f0e8:	ebfffccf 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f0ec:	e59b300c 	ldr	r3, [fp, #12]
    f0f0:	e3540001 	cmp	r4, #1
    f0f4:	e2832001 	add	r2, r3, #1
    f0f8:	e58b200c 	str	r2, [fp, #12]
    f0fc:	e5c37000 	strb	r7, [r3]
    f100:	9a00000b 	bls	f134 <CString::FormatV(char const*, std::__va_list)+0x744>
    f104:	e2441001 	sub	r1, r4, #1
    f108:	e1a0000b 	mov	r0, fp
    f10c:	e2444002 	sub	r4, r4, #2
    f110:	ebfffcc5 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f114:	e3a01020 	mov	r1, #32
    f118:	e59b300c 	ldr	r3, [fp, #12]
    f11c:	e2444001 	sub	r4, r4, #1
    f120:	e3740001 	cmn	r4, #1
    f124:	e2832001 	add	r2, r3, #1
    f128:	e58b200c 	str	r2, [fp, #12]
    f12c:	e5c31000 	strb	r1, [r3]
    f130:	1afffff8 	bne	f118 <CString::FormatV(char const*, std::__va_list)+0x728>
    f134:	e58d6000 	str	r6, [sp]
    f138:	eafffedf 	b	ecbc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    f13c:	e59d1008 	ldr	r1, [sp, #8]
    f140:	e1a0000b 	mov	r0, fp
    f144:	ebfffd48 	bl	e66c <CString::PutString(char const*)>
    f148:	e1560004 	cmp	r6, r4
    f14c:	2afffeda 	bcs	ecbc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    f150:	e0444006 	sub	r4, r4, r6
    f154:	e1a0000b 	mov	r0, fp
    f158:	e1a01004 	mov	r1, r4
    f15c:	ebfffcb2 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f160:	e2443001 	sub	r3, r4, #1
    f164:	e3a00020 	mov	r0, #32
    f168:	e59b200c 	ldr	r2, [fp, #12]
    f16c:	e2433001 	sub	r3, r3, #1
    f170:	e3730001 	cmn	r3, #1
    f174:	e2821001 	add	r1, r2, #1
    f178:	e58b100c 	str	r1, [fp, #12]
    f17c:	e5c20000 	strb	r0, [r2]
    f180:	1afffff8 	bne	f168 <CString::FormatV(char const*, std::__va_list)+0x778>
    f184:	eafffecc 	b	ecbc <CString::FormatV(char const*, std::__va_list)+0x2cc>
    f188:	e1a01008 	mov	r1, r8
    f18c:	e1a0000b 	mov	r0, fp
    f190:	ebfffd35 	bl	e66c <CString::PutString(char const*)>
    f194:	e1570004 	cmp	r7, r4
    f198:	2affffe5 	bcs	f134 <CString::FormatV(char const*, std::__va_list)+0x744>
    f19c:	e0444007 	sub	r4, r4, r7
    f1a0:	e1a0000b 	mov	r0, fp
    f1a4:	e1a01004 	mov	r1, r4
    f1a8:	ebfffc9f 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f1ac:	e2443001 	sub	r3, r4, #1
    f1b0:	e3a00020 	mov	r0, #32
    f1b4:	e59b200c 	ldr	r2, [fp, #12]
    f1b8:	e2433001 	sub	r3, r3, #1
    f1bc:	e3730001 	cmn	r3, #1
    f1c0:	e2821001 	add	r1, r2, #1
    f1c4:	e58b100c 	str	r1, [fp, #12]
    f1c8:	e5c20000 	strb	r0, [r2]
    f1cc:	1afffff8 	bne	f1b4 <CString::FormatV(char const*, std::__va_list)+0x7c4>
    f1d0:	eaffffd7 	b	f134 <CString::FormatV(char const*, std::__va_list)+0x744>
    f1d4:	e3a01001 	mov	r1, #1
    f1d8:	e1a0000b 	mov	r0, fp
    f1dc:	ebfffc92 	bl	e42c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f1e0:	e59b300c 	ldr	r3, [fp, #12]
    f1e4:	e3a0202d 	mov	r2, #45	; 0x2d
    f1e8:	e2831001 	add	r1, r3, #1
    f1ec:	e58b100c 	str	r1, [fp, #12]
    f1f0:	e5c32000 	strb	r2, [r3]
    f1f4:	eaffff10 	b	ee3c <CString::FormatV(char const*, std::__va_list)+0x44c>
    f1f8:	e1a08007 	mov	r8, r7
    f1fc:	e3a0a001 	mov	sl, #1
    f200:	eafffeec 	b	edb8 <CString::FormatV(char const*, std::__va_list)+0x3c8>
    f204:	e1a09006 	mov	r9, r6
    f208:	e3a0a001 	mov	sl, #1
    f20c:	eafffe6a 	b	ebbc <CString::FormatV(char const*, std::__va_list)+0x1cc>

0000f210 <CString::Format(char const*, ...)>:
    f210:	e92d000e 	push	{r1, r2, r3}
    f214:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f218:	e24dd008 	sub	sp, sp, #8
    f21c:	e28d2010 	add	r2, sp, #16
    f220:	e59d100c 	ldr	r1, [sp, #12]
    f224:	e58d2004 	str	r2, [sp, #4]
    f228:	ebfffdf0 	bl	e9f0 <CString::FormatV(char const*, std::__va_list)>
    f22c:	e28dd008 	add	sp, sp, #8
    f230:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    f234:	e28dd00c 	add	sp, sp, #12
    f238:	e12fff1e 	bx	lr
    f23c:	00000000 	andeq	r0, r0, r0

0000f240 <DelayLoop>:
    f240:	e2500001 	subs	r0, r0, #1
    f244:	8afffffd 	bhi	f240 <DelayLoop>
    f248:	e1a0f00e 	mov	pc, lr

0000f24c <CExceptionHandler::CExceptionHandler()>:
    f24c:	e92d4070 	push	{r4, r5, r6, lr}
    f250:	e3035910 	movw	r5, #14608	; 0x3910
    f254:	e3405001 	movt	r5, #1
    f258:	e1a04000 	mov	r4, r0
    f25c:	e5953000 	ldr	r3, [r5]
    f260:	e3530000 	cmp	r3, #0
    f264:	0a000005 	beq	f280 <CExceptionHandler::CExceptionHandler()+0x34>
    f268:	e3031054 	movw	r1, #12372	; 0x3054
    f26c:	e30107c4 	movw	r0, #6084	; 0x17c4
    f270:	e3401001 	movt	r1, #1
    f274:	e3400001 	movt	r0, #1
    f278:	e3a0202e 	mov	r2, #46	; 0x2e
    f27c:	ebfff777 	bl	d060 <assertion_failed>
    f280:	e59f1048 	ldr	r1, [pc, #72]	; f2d0 <CExceptionHandler::CExceptionHandler()+0x84>
    f284:	e3a00000 	mov	r0, #0
    f288:	e59f2044 	ldr	r2, [pc, #68]	; f2d4 <CExceptionHandler::CExceptionHandler()+0x88>
    f28c:	e59f3044 	ldr	r3, [pc, #68]	; f2d8 <CExceptionHandler::CExceptionHandler()+0x8c>
    f290:	e1a01141 	asr	r1, r1, #2
    f294:	e5854000 	str	r4, [r5]
    f298:	e1a02142 	asr	r2, r2, #2
    f29c:	e2411002 	sub	r1, r1, #2
    f2a0:	e1a03143 	asr	r3, r3, #2
    f2a4:	e2422002 	sub	r2, r2, #2
    f2a8:	e2433002 	sub	r3, r3, #2
    f2ac:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    f2b0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    f2b4:	e5801004 	str	r1, [r0, #4]
    f2b8:	e580200c 	str	r2, [r0, #12]
    f2bc:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    f2c0:	e5803010 	str	r3, [r0, #16]
    f2c4:	ebffecb9 	bl	a5b0 <SyncDataAndInstructionCache>
    f2c8:	e1a00004 	mov	r0, r4
    f2cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    f2d0:	0000f4a0 	.word	0x0000f4a0
    f2d4:	0000f4d8 	.word	0x0000f4d8
    f2d8:	0000f514 	.word	0x0000f514

0000f2dc <CExceptionHandler::~CExceptionHandler()>:
    f2dc:	e3033910 	movw	r3, #14608	; 0x3910
    f2e0:	e3403001 	movt	r3, #1
    f2e4:	e3a02000 	mov	r2, #0
    f2e8:	e5832000 	str	r2, [r3]
    f2ec:	e12fff1e 	bx	lr

0000f2f0 <CExceptionHandler::Throw(unsigned int)>:
    f2f0:	e92d4010 	push	{r4, lr}
    f2f4:	e24dd008 	sub	sp, sp, #8
    f2f8:	e1a04001 	mov	r4, r1
    f2fc:	ebfff8dc 	bl	d674 <CLogger::Get()>
    f300:	e30327dc 	movw	r2, #14300	; 0x37dc
    f304:	e3402001 	movt	r2, #1
    f308:	e303306c 	movw	r3, #12396	; 0x306c
    f30c:	e303104c 	movw	r1, #12364	; 0x304c
    f310:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    f314:	e3403001 	movt	r3, #1
    f318:	e3401001 	movt	r1, #1
    f31c:	e3a02000 	mov	r2, #0
    f320:	e58dc000 	str	ip, [sp]
    f324:	ebfff9ae 	bl	d9e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f328:	e28dd008 	add	sp, sp, #8
    f32c:	e8bd8010 	pop	{r4, pc}

0000f330 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    f330:	e3510002 	cmp	r1, #2
    f334:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    f338:	e1a05001 	mov	r5, r1
    f33c:	e24dd024 	sub	sp, sp, #36	; 0x24
    f340:	e1a04002 	mov	r4, r2
    f344:	0a000027 	beq	f3e8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb8>
    f348:	e3510003 	cmp	r1, #3
    f34c:	0a000022 	beq	f3dc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
    f350:	e3a07000 	mov	r7, #0
    f354:	e1a08007 	mov	r8, r7
    f358:	e3540000 	cmp	r4, #0
    f35c:	0a000024 	beq	f3f4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    f360:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    f364:	e303104c 	movw	r1, #12364	; 0x304c
    f368:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    f36c:	e3401001 	movt	r1, #1
    f370:	e203301f 	and	r3, r3, #31
    f374:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    f378:	e3530012 	cmp	r3, #18
    f37c:	08940240 	ldmeq	r4, {r6, r9}
    f380:	e1a00006 	mov	r0, r6
    f384:	ebfff7c8 	bl	d2ac <debug_stacktrace(unsigned int const*, char const*)>
    f388:	ebfff8b9 	bl	d674 <CLogger::Get()>
    f38c:	e30337dc 	movw	r3, #14300	; 0x37dc
    f390:	e3403001 	movt	r3, #1
    f394:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    f398:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    f39c:	e3a02000 	mov	r2, #0
    f3a0:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    f3a4:	e303104c 	movw	r1, #12364	; 0x304c
    f3a8:	e58d9014 	str	r9, [sp, #20]
    f3ac:	e3401001 	movt	r1, #1
    f3b0:	e58d6010 	str	r6, [sp, #16]
    f3b4:	e3033088 	movw	r3, #12424	; 0x3088
    f3b8:	e58d700c 	str	r7, [sp, #12]
    f3bc:	e3403001 	movt	r3, #1
    f3c0:	e58d8008 	str	r8, [sp, #8]
    f3c4:	e58d4000 	str	r4, [sp]
    f3c8:	e58de018 	str	lr, [sp, #24]
    f3cc:	e58dc004 	str	ip, [sp, #4]
    f3d0:	ebfff983 	bl	d9e4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f3d4:	e28dd024 	add	sp, sp, #36	; 0x24
    f3d8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    f3dc:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
    f3e0:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
    f3e4:	eaffffdb 	b	f358 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    f3e8:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
    f3ec:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
    f3f0:	eaffffd8 	b	f358 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    f3f4:	e3031054 	movw	r1, #12372	; 0x3054
    f3f8:	e303007c 	movw	r0, #12412	; 0x307c
    f3fc:	e3401001 	movt	r1, #1
    f400:	e3400001 	movt	r0, #1
    f404:	e3a02067 	mov	r2, #103	; 0x67
    f408:	ebfff714 	bl	d060 <assertion_failed>
    f40c:	eaffffd3 	b	f360 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>

0000f410 <CExceptionHandler::Get()>:
    f410:	e92d4010 	push	{r4, lr}
    f414:	e3034910 	movw	r4, #14608	; 0x3910
    f418:	e3404001 	movt	r4, #1
    f41c:	e5940000 	ldr	r0, [r4]
    f420:	e3500000 	cmp	r0, #0
    f424:	18bd8010 	popne	{r4, pc}
    f428:	e3a0207e 	mov	r2, #126	; 0x7e
    f42c:	e3031054 	movw	r1, #12372	; 0x3054
    f430:	e30108f0 	movw	r0, #6384	; 0x18f0
    f434:	e3401001 	movt	r1, #1
    f438:	e3400001 	movt	r0, #1
    f43c:	ebfff707 	bl	d060 <assertion_failed>
    f440:	e5940000 	ldr	r0, [r4]
    f444:	e8bd8010 	pop	{r4, pc}

0000f448 <ExceptionHandler>:
    f448:	e92d4070 	push	{r4, r5, r6, lr}
    f44c:	e3034910 	movw	r4, #14608	; 0x3910
    f450:	e3404001 	movt	r4, #1
    f454:	e1a05000 	mov	r5, r0
    f458:	e1a06001 	mov	r6, r1
    f45c:	e5940000 	ldr	r0, [r4]
    f460:	e3500000 	cmp	r0, #0
    f464:	0a000003 	beq	f478 <ExceptionHandler+0x30>
    f468:	e1a02006 	mov	r2, r6
    f46c:	e1a01005 	mov	r1, r5
    f470:	e8bd4070 	pop	{r4, r5, r6, lr}
    f474:	eaffffad 	b	f330 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
    f478:	e3a0207e 	mov	r2, #126	; 0x7e
    f47c:	e3031054 	movw	r1, #12372	; 0x3054
    f480:	e30108f0 	movw	r0, #6384	; 0x18f0
    f484:	e3401001 	movt	r1, #1
    f488:	e3400001 	movt	r0, #1
    f48c:	ebfff6f3 	bl	d060 <assertion_failed>
    f490:	e5940000 	ldr	r0, [r4]
    f494:	e1a02006 	mov	r2, r6
    f498:	e1a01005 	mov	r1, r5
    f49c:	e8bd4070 	pop	{r4, r5, r6, lr}
    f4a0:	eaffffa2 	b	f330 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000f4a4 <UndefinedInstructionStub>:
    f4a4:	e24ee004 	sub	lr, lr, #4
    f4a8:	e92d4000 	stmfd	sp!, {lr}
    f4ac:	e14fe000 	mrs	lr, SPSR
    f4b0:	e92d4000 	stmfd	sp!, {lr}
    f4b4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    f4b8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f4bc:	e1a0100d 	mov	r1, sp
    f4c0:	f1020012 	cps	#18
    f4c4:	e1a0200d 	mov	r2, sp
    f4c8:	e1a0300e 	mov	r3, lr
    f4cc:	f102001f 	cps	#31
    f4d0:	e1a0d001 	mov	sp, r1
    f4d4:	e92d000c 	push	{r2, r3}
    f4d8:	e1a0100d 	mov	r1, sp
    f4dc:	e3a00001 	mov	r0, #1
    f4e0:	eaffffd8 	b	f448 <ExceptionHandler>

0000f4e4 <PrefetchAbortStub>:
    f4e4:	e24ee004 	sub	lr, lr, #4
    f4e8:	e92d4000 	stmfd	sp!, {lr}
    f4ec:	e14fe000 	mrs	lr, SPSR
    f4f0:	e92d4000 	stmfd	sp!, {lr}
    f4f4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    f4f8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f4fc:	e1a0100d 	mov	r1, sp
    f500:	f1020012 	cps	#18
    f504:	e1a0200d 	mov	r2, sp
    f508:	e1a0300e 	mov	r3, lr
    f50c:	f102001f 	cps	#31
    f510:	e1a0d001 	mov	sp, r1
    f514:	e92d000c 	push	{r2, r3}
    f518:	e1a0100d 	mov	r1, sp
    f51c:	e3a00002 	mov	r0, #2
    f520:	eaffffc8 	b	f448 <ExceptionHandler>

0000f524 <DataAbortStub>:
    f524:	e24ee008 	sub	lr, lr, #8
    f528:	e92d4000 	stmfd	sp!, {lr}
    f52c:	e14fe000 	mrs	lr, SPSR
    f530:	e92d4000 	stmfd	sp!, {lr}
    f534:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    f538:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f53c:	e1a0100d 	mov	r1, sp
    f540:	f1020012 	cps	#18
    f544:	e1a0200d 	mov	r2, sp
    f548:	e1a0300e 	mov	r3, lr
    f54c:	f102001f 	cps	#31
    f550:	e1a0d001 	mov	sp, r1
    f554:	e92d000c 	push	{r2, r3}
    f558:	e1a0100d 	mov	r1, sp
    f55c:	e3a00003 	mov	r0, #3
    f560:	eaffffb8 	b	f448 <ExceptionHandler>

0000f564 <IRQStub>:
    f564:	e24ee004 	sub	lr, lr, #4
    f568:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f56c:	eb00015e 	bl	faec <InterruptHandler>
    f570:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000f574 <FIQStub>:
    f574:	e24ee004 	sub	lr, lr, #4
    f578:	e92d400f 	push	{r0, r1, r2, r3, lr}
    f57c:	e59f2024 	ldr	r2, [pc, #36]	; f5a8 <FIQStub+0x34>
    f580:	e5921000 	ldr	r1, [r2]
    f584:	e3510000 	cmp	r1, #0
    f588:	0a000002 	beq	f598 <FIQStub+0x24>
    f58c:	e5920004 	ldr	r0, [r2, #4]
    f590:	e12fff31 	blx	r1
    f594:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    f598:	e59f100c 	ldr	r1, [pc, #12]	; f5ac <FIQStub+0x38>
    f59c:	e3a00000 	mov	r0, #0
    f5a0:	e5810000 	str	r0, [r1]
    f5a4:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    f5a8:	000137ec 	.word	0x000137ec
    f5ac:	3f00b20c 	.word	0x3f00b20c

0000f5b0 <CInterruptSystem::CInterruptSystem()>:
    f5b0:	e2802f47 	add	r2, r0, #284	; 0x11c
    f5b4:	e1a0c000 	mov	ip, r0
    f5b8:	e2403004 	sub	r3, r0, #4
    f5bc:	e3a01000 	mov	r1, #0
    f5c0:	e1a00002 	mov	r0, r2
    f5c4:	e5a31004 	str	r1, [r3, #4]!
    f5c8:	e1530000 	cmp	r3, r0
    f5cc:	e5a21004 	str	r1, [r2, #4]!
    f5d0:	1afffffb 	bne	f5c4 <CInterruptSystem::CInterruptSystem()+0x14>
    f5d4:	e3033914 	movw	r3, #14612	; 0x3914
    f5d8:	e3403001 	movt	r3, #1
    f5dc:	e1a0000c 	mov	r0, ip
    f5e0:	e583c000 	str	ip, [r3]
    f5e4:	e12fff1e 	bx	lr

0000f5e8 <CInterruptSystem::~CInterruptSystem()>:
    f5e8:	e3033914 	movw	r3, #14612	; 0x3914
    f5ec:	e3403001 	movt	r3, #1
    f5f0:	e3a02000 	mov	r2, #0
    f5f4:	e5832000 	str	r2, [r3]
    f5f8:	e12fff1e 	bx	lr

0000f5fc <CInterruptSystem::Initialize()>:
    f5fc:	e59f2054 	ldr	r2, [pc, #84]	; f658 <CInterruptSystem::Initialize()+0x5c>
    f600:	e59f3054 	ldr	r3, [pc, #84]	; f65c <CInterruptSystem::Initialize()+0x60>
    f604:	e92d4010 	push	{r4, lr}
    f608:	e1a02142 	asr	r2, r2, #2
    f60c:	e1a03143 	asr	r3, r3, #2
    f610:	e3a04000 	mov	r4, #0
    f614:	e2422002 	sub	r2, r2, #2
    f618:	e2433002 	sub	r3, r3, #2
    f61c:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    f620:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    f624:	e5842018 	str	r2, [r4, #24]
    f628:	e584301c 	str	r3, [r4, #28]
    f62c:	ebffebdf 	bl	a5b0 <SyncDataAndInstructionCache>
    f630:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f634:	e3433f00 	movt	r3, #16128	; 0x3f00
    f638:	e3e02000 	mvn	r2, #0
    f63c:	e583420c 	str	r4, [r3, #524]	; 0x20c
    f640:	e583221c 	str	r2, [r3, #540]	; 0x21c
    f644:	e5832220 	str	r2, [r3, #544]	; 0x220
    f648:	e5832224 	str	r2, [r3, #548]	; 0x224
    f64c:	f1080080 	cpsie	i
    f650:	e3a00001 	mov	r0, #1
    f654:	e8bd8010 	pop	{r4, pc}
    f658:	0000f54c 	.word	0x0000f54c
    f65c:	0000f558 	.word	0x0000f558

0000f660 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    f660:	e3510047 	cmp	r1, #71	; 0x47
    f664:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f668:	e1a04001 	mov	r4, r1
    f66c:	e1a06002 	mov	r6, r2
    f670:	e1a07003 	mov	r7, r3
    f674:	8a00001a 	bhi	f6e4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x84>
    f678:	e3560000 	cmp	r6, #0
    f67c:	0a00001f 	beq	f700 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
    f680:	e30357ec 	movw	r5, #14316	; 0x37ec
    f684:	e3405001 	movt	r5, #1
    f688:	e5953000 	ldr	r3, [r5]
    f68c:	e3530000 	cmp	r3, #0
    f690:	0a000005 	beq	f6ac <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>
    f694:	e3031110 	movw	r1, #12560	; 0x3110
    f698:	e3030134 	movw	r0, #12596	; 0x3134
    f69c:	e3401001 	movt	r1, #1
    f6a0:	e3400001 	movt	r0, #1
    f6a4:	e3a0207a 	mov	r2, #122	; 0x7a
    f6a8:	ebfff66c 	bl	d060 <assertion_failed>
    f6ac:	e3540047 	cmp	r4, #71	; 0x47
    f6b0:	e88500c0 	stm	r5, {r6, r7}
    f6b4:	9a000005 	bls	f6d0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x70>
    f6b8:	e3031110 	movw	r1, #12560	; 0x3110
    f6bc:	e3030120 	movw	r0, #12576	; 0x3120
    f6c0:	e3401001 	movt	r1, #1
    f6c4:	e3400001 	movt	r0, #1
    f6c8:	e3a020a6 	mov	r2, #166	; 0xa6
    f6cc:	ebfff663 	bl	d060 <assertion_failed>
    f6d0:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f6d4:	e3433f00 	movt	r3, #16128	; 0x3f00
    f6d8:	e3844080 	orr	r4, r4, #128	; 0x80
    f6dc:	e583420c 	str	r4, [r3, #524]	; 0x20c
    f6e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f6e4:	e3031110 	movw	r1, #12560	; 0x3110
    f6e8:	e3030120 	movw	r0, #12576	; 0x3120
    f6ec:	e3401001 	movt	r1, #1
    f6f0:	e3400001 	movt	r0, #1
    f6f4:	e3a02078 	mov	r2, #120	; 0x78
    f6f8:	ebfff658 	bl	d060 <assertion_failed>
    f6fc:	eaffffdd 	b	f678 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
    f700:	e3031110 	movw	r1, #12560	; 0x3110
    f704:	e3030154 	movw	r0, #12628	; 0x3154
    f708:	e3401001 	movt	r1, #1
    f70c:	e3400001 	movt	r0, #1
    f710:	e3a02079 	mov	r2, #121	; 0x79
    f714:	ebfff651 	bl	d060 <assertion_failed>
    f718:	eaffffd8 	b	f680 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>

0000f71c <CInterruptSystem::DisconnectFIQ()>:
    f71c:	e92d4010 	push	{r4, lr}
    f720:	e30347ec 	movw	r4, #14316	; 0x37ec
    f724:	e3404001 	movt	r4, #1
    f728:	e5943000 	ldr	r3, [r4]
    f72c:	e3530000 	cmp	r3, #0
    f730:	0a000006 	beq	f750 <CInterruptSystem::DisconnectFIQ()+0x34>
    f734:	e3a02a0b 	mov	r2, #45056	; 0xb000
    f738:	e3432f00 	movt	r2, #16128	; 0x3f00
    f73c:	e3a03000 	mov	r3, #0
    f740:	e582320c 	str	r3, [r2, #524]	; 0x20c
    f744:	e5843000 	str	r3, [r4]
    f748:	e5843004 	str	r3, [r4, #4]
    f74c:	e8bd8010 	pop	{r4, pc}
    f750:	e3031110 	movw	r1, #12560	; 0x3110
    f754:	e303014c 	movw	r0, #12620	; 0x314c
    f758:	e3401001 	movt	r1, #1
    f75c:	e3400001 	movt	r0, #1
    f760:	e3a02084 	mov	r2, #132	; 0x84
    f764:	ebfff63d 	bl	d060 <assertion_failed>
    f768:	eafffff1 	b	f734 <CInterruptSystem::DisconnectFIQ()+0x18>

0000f76c <CInterruptSystem::EnableIRQ(unsigned int)>:
    f76c:	e3500047 	cmp	r0, #71	; 0x47
    f770:	e92d4010 	push	{r4, lr}
    f774:	e1a04000 	mov	r4, r0
    f778:	8a00000e 	bhi	f7b8 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
    f77c:	e350001f 	cmp	r0, #31
    f780:	930b2210 	movwls	r2, #45584	; 0xb210
    f784:	93432f00 	movtls	r2, #16128	; 0x3f00
    f788:	8a000004 	bhi	f7a0 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
    f78c:	e204401f 	and	r4, r4, #31
    f790:	e3a03001 	mov	r3, #1
    f794:	e1a04413 	lsl	r4, r3, r4
    f798:	e5824000 	str	r4, [r2]
    f79c:	e8bd8010 	pop	{r4, pc}
    f7a0:	e350003f 	cmp	r0, #63	; 0x3f
    f7a4:	930b2214 	movwls	r2, #45588	; 0xb214
    f7a8:	93432f00 	movtls	r2, #16128	; 0x3f00
    f7ac:	830b2218 	movwhi	r2, #45592	; 0xb218
    f7b0:	83432f00 	movthi	r2, #16128	; 0x3f00
    f7b4:	eafffff4 	b	f78c <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
    f7b8:	e3a02090 	mov	r2, #144	; 0x90
    f7bc:	e3031110 	movw	r1, #12560	; 0x3110
    f7c0:	e3030164 	movw	r0, #12644	; 0x3164
    f7c4:	e3401001 	movt	r1, #1
    f7c8:	e3400001 	movt	r0, #1
    f7cc:	ebfff623 	bl	d060 <assertion_failed>
    f7d0:	e30b2218 	movw	r2, #45592	; 0xb218
    f7d4:	e3432f00 	movt	r2, #16128	; 0x3f00
    f7d8:	eaffffeb 	b	f78c <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

0000f7dc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    f7dc:	e3510047 	cmp	r1, #71	; 0x47
    f7e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f7e4:	e1a04001 	mov	r4, r1
    f7e8:	e1a05000 	mov	r5, r0
    f7ec:	e1a08002 	mov	r8, r2
    f7f0:	e1a07003 	mov	r7, r3
    f7f4:	8a00000e 	bhi	f834 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
    f7f8:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    f7fc:	e0856104 	add	r6, r5, r4, lsl #2
    f800:	e3530000 	cmp	r3, #0
    f804:	0a000005 	beq	f820 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
    f808:	e3031110 	movw	r1, #12560	; 0x3110
    f80c:	e3030178 	movw	r0, #12664	; 0x3178
    f810:	e3401001 	movt	r1, #1
    f814:	e3400001 	movt	r0, #1
    f818:	e3a02060 	mov	r2, #96	; 0x60
    f81c:	ebfff60f 	bl	d060 <assertion_failed>
    f820:	e7858104 	str	r8, [r5, r4, lsl #2]
    f824:	e1a00004 	mov	r0, r4
    f828:	e5867120 	str	r7, [r6, #288]	; 0x120
    f82c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    f830:	eaffffcd 	b	f76c <CInterruptSystem::EnableIRQ(unsigned int)>
    f834:	e3031110 	movw	r1, #12560	; 0x3110
    f838:	e3030164 	movw	r0, #12644	; 0x3164
    f83c:	e3401001 	movt	r1, #1
    f840:	e3400001 	movt	r0, #1
    f844:	e3a0205f 	mov	r2, #95	; 0x5f
    f848:	ebfff604 	bl	d060 <assertion_failed>
    f84c:	eaffffe9 	b	f7f8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0000f850 <CInterruptSystem::DisableIRQ(unsigned int)>:
    f850:	e3500047 	cmp	r0, #71	; 0x47
    f854:	e92d4010 	push	{r4, lr}
    f858:	e1a04000 	mov	r4, r0
    f85c:	8a00000e 	bhi	f89c <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
    f860:	e350001f 	cmp	r0, #31
    f864:	930b221c 	movwls	r2, #45596	; 0xb21c
    f868:	93432f00 	movtls	r2, #16128	; 0x3f00
    f86c:	8a000004 	bhi	f884 <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
    f870:	e204401f 	and	r4, r4, #31
    f874:	e3a03001 	mov	r3, #1
    f878:	e1a04413 	lsl	r4, r3, r4
    f87c:	e5824000 	str	r4, [r2]
    f880:	e8bd8010 	pop	{r4, pc}
    f884:	e350003f 	cmp	r0, #63	; 0x3f
    f888:	930b2220 	movwls	r2, #45600	; 0xb220
    f88c:	93432f00 	movtls	r2, #16128	; 0x3f00
    f890:	830b2224 	movwhi	r2, #45604	; 0xb224
    f894:	83432f00 	movthi	r2, #16128	; 0x3f00
    f898:	eafffff4 	b	f870 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
    f89c:	e3a0209b 	mov	r2, #155	; 0x9b
    f8a0:	e3031110 	movw	r1, #12560	; 0x3110
    f8a4:	e3030164 	movw	r0, #12644	; 0x3164
    f8a8:	e3401001 	movt	r1, #1
    f8ac:	e3400001 	movt	r0, #1
    f8b0:	ebfff5ea 	bl	d060 <assertion_failed>
    f8b4:	e30b2224 	movw	r2, #45604	; 0xb224
    f8b8:	e3432f00 	movt	r2, #16128	; 0x3f00
    f8bc:	eaffffeb 	b	f870 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

0000f8c0 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    f8c0:	e3510047 	cmp	r1, #71	; 0x47
    f8c4:	e92d4070 	push	{r4, r5, r6, lr}
    f8c8:	e1a04001 	mov	r4, r1
    f8cc:	e1a05000 	mov	r5, r0
    f8d0:	8a000009 	bhi	f8fc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    f8d4:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    f8d8:	e0856104 	add	r6, r5, r4, lsl #2
    f8dc:	e3530000 	cmp	r3, #0
    f8e0:	0a00000f 	beq	f924 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    f8e4:	e1a00004 	mov	r0, r4
    f8e8:	ebffffd8 	bl	f850 <CInterruptSystem::DisableIRQ(unsigned int)>
    f8ec:	e3a03000 	mov	r3, #0
    f8f0:	e7853104 	str	r3, [r5, r4, lsl #2]
    f8f4:	e5863120 	str	r3, [r6, #288]	; 0x120
    f8f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f8fc:	e3031110 	movw	r1, #12560	; 0x3110
    f900:	e3030164 	movw	r0, #12644	; 0x3164
    f904:	e3401001 	movt	r1, #1
    f908:	e3400001 	movt	r0, #1
    f90c:	e3a0206a 	mov	r2, #106	; 0x6a
    f910:	e0856104 	add	r6, r5, r4, lsl #2
    f914:	ebfff5d1 	bl	d060 <assertion_failed>
    f918:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    f91c:	e3530000 	cmp	r3, #0
    f920:	1affffef 	bne	f8e4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    f924:	e3031110 	movw	r1, #12560	; 0x3110
    f928:	e3030194 	movw	r0, #12692	; 0x3194
    f92c:	e3401001 	movt	r1, #1
    f930:	e3400001 	movt	r0, #1
    f934:	e3a0206b 	mov	r2, #107	; 0x6b
    f938:	ebfff5c8 	bl	d060 <assertion_failed>
    f93c:	eaffffe8 	b	f8e4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0000f940 <CInterruptSystem::EnableFIQ(unsigned int)>:
    f940:	e3500047 	cmp	r0, #71	; 0x47
    f944:	e92d4010 	push	{r4, lr}
    f948:	e1a04000 	mov	r4, r0
    f94c:	9a000005 	bls	f968 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    f950:	e3031110 	movw	r1, #12560	; 0x3110
    f954:	e3030120 	movw	r0, #12576	; 0x3120
    f958:	e3401001 	movt	r1, #1
    f95c:	e3400001 	movt	r0, #1
    f960:	e3a020a6 	mov	r2, #166	; 0xa6
    f964:	ebfff5bd 	bl	d060 <assertion_failed>
    f968:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f96c:	e3433f00 	movt	r3, #16128	; 0x3f00
    f970:	e3844080 	orr	r4, r4, #128	; 0x80
    f974:	e583420c 	str	r4, [r3, #524]	; 0x20c
    f978:	e8bd8010 	pop	{r4, pc}

0000f97c <CInterruptSystem::DisableFIQ()>:
    f97c:	e3a03a0b 	mov	r3, #45056	; 0xb000
    f980:	e3433f00 	movt	r3, #16128	; 0x3f00
    f984:	e3a02000 	mov	r2, #0
    f988:	e583220c 	str	r2, [r3, #524]	; 0x20c
    f98c:	e12fff1e 	bx	lr

0000f990 <CInterruptSystem::Get()>:
    f990:	e92d4010 	push	{r4, lr}
    f994:	e3034914 	movw	r4, #14612	; 0x3914
    f998:	e3404001 	movt	r4, #1
    f99c:	e5940000 	ldr	r0, [r4]
    f9a0:	e3500000 	cmp	r0, #0
    f9a4:	18bd8010 	popne	{r4, pc}
    f9a8:	e3a020b8 	mov	r2, #184	; 0xb8
    f9ac:	e3031110 	movw	r1, #12560	; 0x3110
    f9b0:	e30108f0 	movw	r0, #6384	; 0x18f0
    f9b4:	e3401001 	movt	r1, #1
    f9b8:	e3400001 	movt	r0, #1
    f9bc:	ebfff5a7 	bl	d060 <assertion_failed>
    f9c0:	e5940000 	ldr	r0, [r4]
    f9c4:	e8bd8010 	pop	{r4, pc}

0000f9c8 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    f9c8:	e3510047 	cmp	r1, #71	; 0x47
    f9cc:	e92d4070 	push	{r4, r5, r6, lr}
    f9d0:	e1a06001 	mov	r6, r1
    f9d4:	e1a05000 	mov	r5, r0
    f9d8:	8a000007 	bhi	f9fc <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    f9dc:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    f9e0:	e0855106 	add	r5, r5, r6, lsl #2
    f9e4:	e3540000 	cmp	r4, #0
    f9e8:	0a00000d 	beq	fa24 <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
    f9ec:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    f9f0:	e12fff34 	blx	r4
    f9f4:	e3a00001 	mov	r0, #1
    f9f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f9fc:	e3031110 	movw	r1, #12560	; 0x3110
    fa00:	e3030164 	movw	r0, #12644	; 0x3164
    fa04:	e3401001 	movt	r1, #1
    fa08:	e3400001 	movt	r0, #1
    fa0c:	e3a020be 	mov	r2, #190	; 0xbe
    fa10:	ebfff592 	bl	d060 <assertion_failed>
    fa14:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    fa18:	e0855106 	add	r5, r5, r6, lsl #2
    fa1c:	e3540000 	cmp	r4, #0
    fa20:	1afffff1 	bne	f9ec <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    fa24:	e1a00006 	mov	r0, r6
    fa28:	ebffff88 	bl	f850 <CInterruptSystem::DisableIRQ(unsigned int)>
    fa2c:	e1a00004 	mov	r0, r4
    fa30:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fa34 <CInterruptSystem::InterruptHandler()>:
    fa34:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fa38:	e3036914 	movw	r6, #14612	; 0x3914
    fa3c:	e3406001 	movt	r6, #1
    fa40:	e24dd010 	sub	sp, sp, #16
    fa44:	e5963000 	ldr	r3, [r6]
    fa48:	e3530000 	cmp	r3, #0
    fa4c:	0a00001f 	beq	fad0 <CInterruptSystem::InterruptHandler()+0x9c>
    fa50:	e3a03a0b 	mov	r3, #45056	; 0xb000
    fa54:	e3433f00 	movt	r3, #16128	; 0x3f00
    fa58:	e28d8008 	add	r8, sp, #8
    fa5c:	e3a07000 	mov	r7, #0
    fa60:	e5934204 	ldr	r4, [r3, #516]	; 0x204
    fa64:	e58d4004 	str	r4, [sp, #4]
    fa68:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    fa6c:	e58d2008 	str	r2, [sp, #8]
    fa70:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    fa74:	e6ef3073 	uxtb	r3, r3
    fa78:	e58d300c 	str	r3, [sp, #12]
    fa7c:	e3540000 	cmp	r4, #0
    fa80:	0a00000d 	beq	fabc <CInterruptSystem::InterruptHandler()+0x88>
    fa84:	e1a05007 	mov	r5, r7
    fa88:	ea000002 	b	fa98 <CInterruptSystem::InterruptHandler()+0x64>
    fa8c:	e1b040a4 	lsrs	r4, r4, #1
    fa90:	e2855001 	add	r5, r5, #1
    fa94:	0a000008 	beq	fabc <CInterruptSystem::InterruptHandler()+0x88>
    fa98:	e3140001 	tst	r4, #1
    fa9c:	0afffffa 	beq	fa8c <CInterruptSystem::InterruptHandler()+0x58>
    faa0:	e1a01005 	mov	r1, r5
    faa4:	e5960000 	ldr	r0, [r6]
    faa8:	ebffffc6 	bl	f9c8 <CInterruptSystem::CallIRQHandler(unsigned int)>
    faac:	e3500000 	cmp	r0, #0
    fab0:	0afffff5 	beq	fa8c <CInterruptSystem::InterruptHandler()+0x58>
    fab4:	e28dd010 	add	sp, sp, #16
    fab8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fabc:	e2877020 	add	r7, r7, #32
    fac0:	e3570060 	cmp	r7, #96	; 0x60
    fac4:	0afffffa 	beq	fab4 <CInterruptSystem::InterruptHandler()+0x80>
    fac8:	e4984004 	ldr	r4, [r8], #4
    facc:	eaffffea 	b	fa7c <CInterruptSystem::InterruptHandler()+0x48>
    fad0:	e3031110 	movw	r1, #12560	; 0x3110
    fad4:	e30108f0 	movw	r0, #6384	; 0x18f0
    fad8:	e3401001 	movt	r1, #1
    fadc:	e3400001 	movt	r0, #1
    fae0:	e3a020d1 	mov	r2, #209	; 0xd1
    fae4:	ebfff55d 	bl	d060 <assertion_failed>
    fae8:	eaffffd8 	b	fa50 <CInterruptSystem::InterruptHandler()+0x1c>

0000faec <InterruptHandler>:
    faec:	eaffffd0 	b	fa34 <CInterruptSystem::InterruptHandler()>

0000faf0 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    faf0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    faf4:	e280c0dc 	add	ip, r0, #220	; 0xdc
    faf8:	e3a0e000 	mov	lr, #0
    fafc:	e1a03000 	mov	r3, r0
    fb00:	e1a0200e 	mov	r2, lr
    fb04:	e5801000 	str	r1, [r0]
    fb08:	e5a3e004 	str	lr, [r3, #4]!
    fb0c:	e5a32004 	str	r2, [r3, #4]!
    fb10:	e153000c 	cmp	r3, ip
    fb14:	1afffffc 	bne	fb0c <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    fb18:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000fb1c <CGPIOManager::~CGPIOManager()>:
    fb1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fb20:	e30361b0 	movw	r6, #12720	; 0x31b0
    fb24:	e30351c0 	movw	r5, #12736	; 0x31c0
    fb28:	e2804004 	add	r4, r0, #4
    fb2c:	e28070dc 	add	r7, r0, #220	; 0xdc
    fb30:	e3406001 	movt	r6, #1
    fb34:	e3405001 	movt	r5, #1
    fb38:	e1a08000 	mov	r8, r0
    fb3c:	e5b43004 	ldr	r3, [r4, #4]!
    fb40:	e3a0202c 	mov	r2, #44	; 0x2c
    fb44:	e1a01006 	mov	r1, r6
    fb48:	e1a00005 	mov	r0, r5
    fb4c:	e3530000 	cmp	r3, #0
    fb50:	0a000000 	beq	fb58 <CGPIOManager::~CGPIOManager()+0x3c>
    fb54:	ebfff541 	bl	d060 <assertion_failed>
    fb58:	e1540007 	cmp	r4, r7
    fb5c:	1afffff6 	bne	fb3c <CGPIOManager::~CGPIOManager()+0x20>
    fb60:	e5983004 	ldr	r3, [r8, #4]
    fb64:	e3530000 	cmp	r3, #0
    fb68:	0a000004 	beq	fb80 <CGPIOManager::~CGPIOManager()+0x64>
    fb6c:	e5980000 	ldr	r0, [r8]
    fb70:	e3500000 	cmp	r0, #0
    fb74:	0a000003 	beq	fb88 <CGPIOManager::~CGPIOManager()+0x6c>
    fb78:	e3a01034 	mov	r1, #52	; 0x34
    fb7c:	ebffff4f 	bl	f8c0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    fb80:	e1a00008 	mov	r0, r8
    fb84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fb88:	e30311b0 	movw	r1, #12720	; 0x31b0
    fb8c:	e30301d4 	movw	r0, #12756	; 0x31d4
    fb90:	e3401001 	movt	r1, #1
    fb94:	e3400001 	movt	r0, #1
    fb98:	e3a02032 	mov	r2, #50	; 0x32
    fb9c:	ebfff52f 	bl	d060 <assertion_failed>
    fba0:	e5980000 	ldr	r0, [r8]
    fba4:	eafffff3 	b	fb78 <CGPIOManager::~CGPIOManager()+0x5c>

0000fba8 <CGPIOManager::Initialize()>:
    fba8:	e5903004 	ldr	r3, [r0, #4]
    fbac:	e92d4010 	push	{r4, lr}
    fbb0:	e3530000 	cmp	r3, #0
    fbb4:	e1a04000 	mov	r4, r0
    fbb8:	1a00000b 	bne	fbec <CGPIOManager::Initialize()+0x44>
    fbbc:	e5940000 	ldr	r0, [r4]
    fbc0:	e3500000 	cmp	r0, #0
    fbc4:	0a000011 	beq	fc10 <CGPIOManager::Initialize()+0x68>
    fbc8:	e1a03004 	mov	r3, r4
    fbcc:	e3a01034 	mov	r1, #52	; 0x34
    fbd0:	e30f2e4c 	movw	r2, #65100	; 0xfe4c
    fbd4:	e3402000 	movt	r2, #0
    fbd8:	ebfffeff 	bl	f7dc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    fbdc:	e3a03001 	mov	r3, #1
    fbe0:	e1a00003 	mov	r0, r3
    fbe4:	e5843004 	str	r3, [r4, #4]
    fbe8:	e8bd8010 	pop	{r4, pc}
    fbec:	e30311b0 	movw	r1, #12720	; 0x31b0
    fbf0:	e30301e8 	movw	r0, #12776	; 0x31e8
    fbf4:	e3401001 	movt	r1, #1
    fbf8:	e3400001 	movt	r0, #1
    fbfc:	e3a0203b 	mov	r2, #59	; 0x3b
    fc00:	ebfff516 	bl	d060 <assertion_failed>
    fc04:	e5940000 	ldr	r0, [r4]
    fc08:	e3500000 	cmp	r0, #0
    fc0c:	1affffed 	bne	fbc8 <CGPIOManager::Initialize()+0x20>
    fc10:	e30311b0 	movw	r1, #12720	; 0x31b0
    fc14:	e30301d4 	movw	r0, #12756	; 0x31d4
    fc18:	e3401001 	movt	r1, #1
    fc1c:	e3400001 	movt	r0, #1
    fc20:	e3a0203c 	mov	r2, #60	; 0x3c
    fc24:	ebfff50d 	bl	d060 <assertion_failed>
    fc28:	e5940000 	ldr	r0, [r4]
    fc2c:	eaffffe5 	b	fbc8 <CGPIOManager::Initialize()+0x20>

0000fc30 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    fc30:	e5903004 	ldr	r3, [r0, #4]
    fc34:	e92d4070 	push	{r4, r5, r6, lr}
    fc38:	e3530000 	cmp	r3, #0
    fc3c:	e1a04000 	mov	r4, r0
    fc40:	e1a05001 	mov	r5, r1
    fc44:	0a000010 	beq	fc8c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
    fc48:	e3550000 	cmp	r5, #0
    fc4c:	0a00001c 	beq	fcc4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    fc50:	e5956004 	ldr	r6, [r5, #4]
    fc54:	e3560035 	cmp	r6, #53	; 0x35
    fc58:	8a000012 	bhi	fca8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
    fc5c:	e0844106 	add	r4, r4, r6, lsl #2
    fc60:	e5943008 	ldr	r3, [r4, #8]
    fc64:	e3530000 	cmp	r3, #0
    fc68:	0a000005 	beq	fc84 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    fc6c:	e30311b0 	movw	r1, #12720	; 0x31b0
    fc70:	e30301c0 	movw	r0, #12736	; 0x31c0
    fc74:	e3401001 	movt	r1, #1
    fc78:	e3400001 	movt	r0, #1
    fc7c:	e3a0204b 	mov	r2, #75	; 0x4b
    fc80:	ebfff4f6 	bl	d060 <assertion_failed>
    fc84:	e5845008 	str	r5, [r4, #8]
    fc88:	e8bd8070 	pop	{r4, r5, r6, pc}
    fc8c:	e30311b0 	movw	r1, #12720	; 0x31b0
    fc90:	e30301fc 	movw	r0, #12796	; 0x31fc
    fc94:	e3401001 	movt	r1, #1
    fc98:	e3400001 	movt	r0, #1
    fc9c:	e3a02045 	mov	r2, #69	; 0x45
    fca0:	ebfff4ee 	bl	d060 <assertion_failed>
    fca4:	eaffffe7 	b	fc48 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    fca8:	e30311b0 	movw	r1, #12720	; 0x31b0
    fcac:	e3010c78 	movw	r0, #7288	; 0x1c78
    fcb0:	e3401001 	movt	r1, #1
    fcb4:	e3400001 	movt	r0, #1
    fcb8:	e3a02049 	mov	r2, #73	; 0x49
    fcbc:	ebfff4e7 	bl	d060 <assertion_failed>
    fcc0:	eaffffe5 	b	fc5c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    fcc4:	e30311b0 	movw	r1, #12720	; 0x31b0
    fcc8:	e303020c 	movw	r0, #12812	; 0x320c
    fccc:	e3401001 	movt	r1, #1
    fcd0:	e3400001 	movt	r0, #1
    fcd4:	e3a02047 	mov	r2, #71	; 0x47
    fcd8:	ebfff4e0 	bl	d060 <assertion_failed>
    fcdc:	eaffffdb 	b	fc50 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

0000fce0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    fce0:	e5903004 	ldr	r3, [r0, #4]
    fce4:	e92d4070 	push	{r4, r5, r6, lr}
    fce8:	e3530000 	cmp	r3, #0
    fcec:	e1a04000 	mov	r4, r0
    fcf0:	e1a05001 	mov	r5, r1
    fcf4:	0a00000b 	beq	fd28 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    fcf8:	e3550000 	cmp	r5, #0
    fcfc:	0a000021 	beq	fd88 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    fd00:	e5955004 	ldr	r5, [r5, #4]
    fd04:	e3550035 	cmp	r5, #53	; 0x35
    fd08:	8a00000d 	bhi	fd44 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
    fd0c:	e0844105 	add	r4, r4, r5, lsl #2
    fd10:	e5943008 	ldr	r3, [r4, #8]
    fd14:	e3530000 	cmp	r3, #0
    fd18:	0a000013 	beq	fd6c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
    fd1c:	e3a03000 	mov	r3, #0
    fd20:	e5843008 	str	r3, [r4, #8]
    fd24:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd28:	e30311b0 	movw	r1, #12720	; 0x31b0
    fd2c:	e30301fc 	movw	r0, #12796	; 0x31fc
    fd30:	e3401001 	movt	r1, #1
    fd34:	e3400001 	movt	r0, #1
    fd38:	e3a02052 	mov	r2, #82	; 0x52
    fd3c:	ebfff4c7 	bl	d060 <assertion_failed>
    fd40:	eaffffec 	b	fcf8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    fd44:	e0844105 	add	r4, r4, r5, lsl #2
    fd48:	e30311b0 	movw	r1, #12720	; 0x31b0
    fd4c:	e3010c78 	movw	r0, #7288	; 0x1c78
    fd50:	e3401001 	movt	r1, #1
    fd54:	e3400001 	movt	r0, #1
    fd58:	e3a02056 	mov	r2, #86	; 0x56
    fd5c:	ebfff4bf 	bl	d060 <assertion_failed>
    fd60:	e5943008 	ldr	r3, [r4, #8]
    fd64:	e3530000 	cmp	r3, #0
    fd68:	1affffeb 	bne	fd1c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    fd6c:	e30311b0 	movw	r1, #12720	; 0x31b0
    fd70:	e3030218 	movw	r0, #12824	; 0x3218
    fd74:	e3401001 	movt	r1, #1
    fd78:	e3400001 	movt	r0, #1
    fd7c:	e3a02058 	mov	r2, #88	; 0x58
    fd80:	ebfff4b6 	bl	d060 <assertion_failed>
    fd84:	eaffffe4 	b	fd1c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    fd88:	e30311b0 	movw	r1, #12720	; 0x31b0
    fd8c:	e303020c 	movw	r0, #12812	; 0x320c
    fd90:	e3401001 	movt	r1, #1
    fd94:	e3400001 	movt	r0, #1
    fd98:	e3a02054 	mov	r2, #84	; 0x54
    fd9c:	ebfff4af 	bl	d060 <assertion_failed>
    fda0:	eaffffd6 	b	fd00 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

0000fda4 <CGPIOManager::InterruptHandler()>:
    fda4:	e5903004 	ldr	r3, [r0, #4]
    fda8:	e92d4070 	push	{r4, r5, r6, lr}
    fdac:	e3530000 	cmp	r3, #0
    fdb0:	e1a06000 	mov	r6, r0
    fdb4:	0a00001a 	beq	fe24 <CGPIOManager::InterruptHandler()+0x80>
    fdb8:	e3a02000 	mov	r2, #0
    fdbc:	e3432f20 	movt	r2, #16160	; 0x3f20
    fdc0:	e3a04000 	mov	r4, #0
    fdc4:	e5923040 	ldr	r3, [r2, #64]	; 0x40
    fdc8:	ea000004 	b	fde0 <CGPIOManager::InterruptHandler()+0x3c>
    fdcc:	e2844001 	add	r4, r4, #1
    fdd0:	e314001f 	tst	r4, #31
    fdd4:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    fdd8:	e3540036 	cmp	r4, #54	; 0x36
    fddc:	08bd8070 	popeq	{r4, r5, r6, pc}
    fde0:	e3130001 	tst	r3, #1
    fde4:	e1a030a3 	lsr	r3, r3, #1
    fde8:	0afffff7 	beq	fdcc <CGPIOManager::InterruptHandler()+0x28>
    fdec:	e2843002 	add	r3, r4, #2
    fdf0:	e204501f 	and	r5, r4, #31
    fdf4:	e3a02001 	mov	r2, #1
    fdf8:	e7960103 	ldr	r0, [r6, r3, lsl #2]
    fdfc:	e1a05512 	lsl	r5, r2, r5
    fe00:	e3500000 	cmp	r0, #0
    fe04:	0a00000d 	beq	fe40 <CGPIOManager::InterruptHandler()+0x9c>
    fe08:	ebffe8a2 	bl	a098 <CGPIOPin::InterruptHandler()>
    fe0c:	e3a03010 	mov	r3, #16
    fe10:	e3403fc8 	movt	r3, #4040	; 0xfc8
    fe14:	e08332a4 	add	r3, r3, r4, lsr #5
    fe18:	e1a03103 	lsl	r3, r3, #2
    fe1c:	e5835000 	str	r5, [r3]
    fe20:	e8bd8070 	pop	{r4, r5, r6, pc}
    fe24:	e30311b0 	movw	r1, #12720	; 0x31b0
    fe28:	e30301fc 	movw	r0, #12796	; 0x31fc
    fe2c:	e3401001 	movt	r1, #1
    fe30:	e3400001 	movt	r0, #1
    fe34:	e3a0205e 	mov	r2, #94	; 0x5e
    fe38:	ebfff488 	bl	d060 <assertion_failed>
    fe3c:	eaffffdd 	b	fdb8 <CGPIOManager::InterruptHandler()+0x14>
    fe40:	e1a00004 	mov	r0, r4
    fe44:	ebffe8bf 	bl	a148 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    fe48:	eaffffef 	b	fe0c <CGPIOManager::InterruptHandler()+0x68>

0000fe4c <CGPIOManager::InterruptStub(void*)>:
    fe4c:	e92d4010 	push	{r4, lr}
    fe50:	e2504000 	subs	r4, r0, #0
    fe54:	0a000002 	beq	fe64 <CGPIOManager::InterruptStub(void*)+0x18>
    fe58:	e1a00004 	mov	r0, r4
    fe5c:	e8bd4010 	pop	{r4, lr}
    fe60:	eaffffcf 	b	fda4 <CGPIOManager::InterruptHandler()>
    fe64:	e30311b0 	movw	r1, #12720	; 0x31b0
    fe68:	e303022c 	movw	r0, #12844	; 0x322c
    fe6c:	e3401001 	movt	r1, #1
    fe70:	e3400001 	movt	r0, #1
    fe74:	e3a0208a 	mov	r2, #138	; 0x8a
    fe78:	ebfff478 	bl	d060 <assertion_failed>
    fe7c:	e1a00004 	mov	r0, r4
    fe80:	e8bd4010 	pop	{r4, lr}
    fe84:	eaffffc6 	b	fda4 <CGPIOManager::InterruptHandler()>

0000fe88 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    fe88:	e12fff1e 	bx	lr

0000fe8c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    fe8c:	e92d4010 	push	{r4, lr}
    fe90:	e3a01010 	mov	r1, #16
    fe94:	e1a04000 	mov	r4, r0
    fe98:	ebffe980 	bl	a4a0 <operator delete(void*, unsigned int)>
    fe9c:	e1a00004 	mov	r0, r4
    fea0:	e8bd8010 	pop	{r4, pc}

0000fea4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    fea4:	e92d4070 	push	{r4, r5, r6, lr}
    fea8:	e3034918 	movw	r4, #14616	; 0x3918
    feac:	e3404001 	movt	r4, #1
    feb0:	e1a05000 	mov	r5, r0
    feb4:	e1a06001 	mov	r6, r1
    feb8:	e5940000 	ldr	r0, [r4]
    febc:	e3500000 	cmp	r0, #0
    fec0:	1a00001a 	bne	ff30 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    fec4:	e1d500bc 	ldrh	r0, [r5, #12]
    fec8:	e1d530be 	ldrh	r3, [r5, #14]
    fecc:	e5856008 	str	r6, [r5, #8]
    fed0:	e0402003 	sub	r2, r0, r3
    fed4:	e6bf2072 	sxth	r2, r2
    fed8:	e3520000 	cmp	r2, #0
    fedc:	da00000c 	ble	ff14 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    fee0:	e3560000 	cmp	r6, #0
    fee4:	1a00000c 	bne	ff1c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    fee8:	e2833001 	add	r3, r3, #1
    feec:	e6ff3073 	uxth	r3, r3
    fef0:	e1c530be 	strh	r3, [r5, #14]
    fef4:	e5951004 	ldr	r1, [r5, #4]
    fef8:	e1833800 	orr	r3, r3, r0, lsl #16
    fefc:	e5942004 	ldr	r2, [r4, #4]
    ff00:	e7823101 	str	r3, [r2, r1, lsl #2]
    ff04:	e5943000 	ldr	r3, [r4]
    ff08:	e3530000 	cmp	r3, #0
    ff0c:	1a000005 	bne	ff28 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    ff10:	e8bd8070 	pop	{r4, r5, r6, pc}
    ff14:	e3560000 	cmp	r6, #0
    ff18:	1a000006 	bne	ff38 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    ff1c:	e5943000 	ldr	r3, [r4]
    ff20:	e3530000 	cmp	r3, #0
    ff24:	08bd8070 	popeq	{r4, r5, r6, pc}
    ff28:	e8bd4070 	pop	{r4, r5, r6, lr}
    ff2c:	eaffe98b 	b	a560 <LeaveCritical>
    ff30:	ebffe95c 	bl	a4a8 <EnterCritical>
    ff34:	eaffffe2 	b	fec4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    ff38:	e2800001 	add	r0, r0, #1
    ff3c:	e6ff0070 	uxth	r0, r0
    ff40:	e1c500bc 	strh	r0, [r5, #12]
    ff44:	eaffffea 	b	fef4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000ff48 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    ff48:	e59f20e4 	ldr	r2, [pc, #228]	; 10034 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    ff4c:	e3510001 	cmp	r1, #1
    ff50:	e92d4030 	push	{r4, r5, lr}
    ff54:	e3a03000 	mov	r3, #0
    ff58:	e24dd024 	sub	sp, sp, #36	; 0x24
    ff5c:	e1a04000 	mov	r4, r0
    ff60:	e5801004 	str	r1, [r0, #4]
    ff64:	e5802000 	str	r2, [r0]
    ff68:	e1c030bc 	strh	r3, [r0, #12]
    ff6c:	e1c030be 	strh	r3, [r0, #14]
    ff70:	9a000002 	bls	ff80 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    ff74:	e1a00004 	mov	r0, r4
    ff78:	e28dd024 	add	sp, sp, #36	; 0x24
    ff7c:	e8bd8030 	pop	{r4, r5, pc}
    ff80:	e3035918 	movw	r5, #14616	; 0x3918
    ff84:	e3405001 	movt	r5, #1
    ff88:	e5950000 	ldr	r0, [r5]
    ff8c:	e1500003 	cmp	r0, r3
    ff90:	1a000009 	bne	ffbc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    ff94:	e5953004 	ldr	r3, [r5, #4]
    ff98:	e3530000 	cmp	r3, #0
    ff9c:	0a00000a 	beq	ffcc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    ffa0:	e5953004 	ldr	r3, [r5, #4]
    ffa4:	e3530000 	cmp	r3, #0
    ffa8:	0afffff1 	beq	ff74 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    ffac:	e3a01000 	mov	r1, #0
    ffb0:	e1a00004 	mov	r0, r4
    ffb4:	ebffffba 	bl	fea4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    ffb8:	eaffffed 	b	ff74 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    ffbc:	ebffe939 	bl	a4a8 <EnterCritical>
    ffc0:	e5953004 	ldr	r3, [r5, #4]
    ffc4:	e3530000 	cmp	r3, #0
    ffc8:	1a00000f 	bne	1000c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    ffcc:	e28d0008 	add	r0, sp, #8
    ffd0:	ebffe4f2 	bl	93a0 <CBcmPropertyTags::CBcmPropertyTags()>
    ffd4:	e3a03000 	mov	r3, #0
    ffd8:	e28d0008 	add	r0, sp, #8
    ffdc:	e58d3000 	str	r3, [sp]
    ffe0:	e3a01010 	mov	r1, #16
    ffe4:	e3a03010 	mov	r3, #16
    ffe8:	e3401004 	movt	r1, #4
    ffec:	e08d2003 	add	r2, sp, r3
    fff0:	ebffe532 	bl	94c0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    fff4:	e3500000 	cmp	r0, #0
    fff8:	e28d0008 	add	r0, sp, #8
    fffc:	159d301c 	ldrne	r3, [sp, #28]
   10000:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   10004:	15853004 	strne	r3, [r5, #4]
   10008:	ebffe4ea 	bl	93b8 <CBcmPropertyTags::~CBcmPropertyTags()>
   1000c:	e5953000 	ldr	r3, [r5]
   10010:	e3530000 	cmp	r3, #0
   10014:	0a000000 	beq	1001c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
   10018:	ebffe950 	bl	a560 <LeaveCritical>
   1001c:	e5943004 	ldr	r3, [r4, #4]
   10020:	e3530001 	cmp	r3, #1
   10024:	9affffdd 	bls	ffa0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
   10028:	e1a00004 	mov	r0, r4
   1002c:	e28dd024 	add	sp, sp, #36	; 0x24
   10030:	e8bd8030 	pop	{r4, r5, pc}
   10034:	00013240 	.word	0x00013240

00010038 <CVirtualGPIOPin::Write(unsigned int)>:
   10038:	e5902004 	ldr	r2, [r0, #4]
   1003c:	e1a03001 	mov	r3, r1
   10040:	e3520001 	cmp	r2, #1
   10044:	812fff1e 	bxhi	lr
   10048:	e3032918 	movw	r2, #14616	; 0x3918
   1004c:	e3402001 	movt	r2, #1
   10050:	e3510001 	cmp	r1, #1
   10054:	e5922004 	ldr	r2, [r2, #4]
   10058:	93a03000 	movls	r3, #0
   1005c:	83a03001 	movhi	r3, #1
   10060:	e3520000 	cmp	r2, #0
   10064:	03833001 	orreq	r3, r3, #1
   10068:	e3530000 	cmp	r3, #0
   1006c:	112fff1e 	bxne	lr
   10070:	eaffff8b 	b	fea4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

00010074 <CVirtualGPIOPin::Invert()>:
   10074:	e5901008 	ldr	r1, [r0, #8]
   10078:	e2211001 	eor	r1, r1, #1
   1007c:	eaffffed 	b	10038 <CVirtualGPIOPin::Write(unsigned int)>

00010080 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   10080:	e3033918 	movw	r3, #14616	; 0x3918
   10084:	e3403001 	movt	r3, #1
   10088:	e3a02000 	mov	r2, #0
   1008c:	e5832000 	str	r2, [r3]
   10090:	e12fff1e 	bx	lr

00010094 <CMachineInfo::CMachineInfo()>:
   10094:	e3032920 	movw	r2, #14624	; 0x3920
   10098:	e3402001 	movt	r2, #1
   1009c:	e92d4030 	push	{r4, r5, lr}
   100a0:	e3a0300c 	mov	r3, #12
   100a4:	e5925000 	ldr	r5, [r2]
   100a8:	e3a01003 	mov	r1, #3
   100ac:	e5c03004 	strb	r3, [r0, #4]
   100b0:	e3a03000 	mov	r3, #0
   100b4:	e1550003 	cmp	r5, r3
   100b8:	e24dd024 	sub	sp, sp, #36	; 0x24
   100bc:	e1a04000 	mov	r4, r0
   100c0:	e5c01010 	strb	r1, [r0, #16]
   100c4:	e5803000 	str	r3, [r0]
   100c8:	e5803008 	str	r3, [r0, #8]
   100cc:	e580300c 	str	r3, [r0, #12]
   100d0:	e5803014 	str	r3, [r0, #20]
   100d4:	0a00000e 	beq	10114 <CMachineInfo::CMachineInfo()+0x80>
   100d8:	e595e000 	ldr	lr, [r5]
   100dc:	e5d5c004 	ldrb	ip, [r5, #4]
   100e0:	e5950008 	ldr	r0, [r5, #8]
   100e4:	e595100c 	ldr	r1, [r5, #12]
   100e8:	e5d52010 	ldrb	r2, [r5, #16]
   100ec:	e5953014 	ldr	r3, [r5, #20]
   100f0:	e584e000 	str	lr, [r4]
   100f4:	e5c4c004 	strb	ip, [r4, #4]
   100f8:	e5840008 	str	r0, [r4, #8]
   100fc:	e584100c 	str	r1, [r4, #12]
   10100:	e5c42010 	strb	r2, [r4, #16]
   10104:	e5843014 	str	r3, [r4, #20]
   10108:	e1a00004 	mov	r0, r4
   1010c:	e28dd024 	add	sp, sp, #36	; 0x24
   10110:	e8bd8030 	pop	{r4, r5, pc}
   10114:	e5820000 	str	r0, [r2]
   10118:	e28d0008 	add	r0, sp, #8
   1011c:	ebffe49f 	bl	93a0 <CBcmPropertyTags::CBcmPropertyTags()>
   10120:	e3a03010 	mov	r3, #16
   10124:	e58d5000 	str	r5, [sp]
   10128:	e28d0008 	add	r0, sp, #8
   1012c:	e3a01002 	mov	r1, #2
   10130:	e08d2003 	add	r2, sp, r3
   10134:	e3401001 	movt	r1, #1
   10138:	ebffe4e0 	bl	94c0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1013c:	e3500000 	cmp	r0, #0
   10140:	0a00000c 	beq	10178 <CMachineInfo::CMachineInfo()+0xe4>
   10144:	e59d201c 	ldr	r2, [sp, #28]
   10148:	e2123502 	ands	r3, r2, #8388608	; 0x800000
   1014c:	e5842000 	str	r2, [r4]
   10150:	1a00000b 	bne	10184 <CMachineInfo::CMachineInfo()+0xf0>
   10154:	e3a01002 	mov	r1, #2
   10158:	e59f00f8 	ldr	r0, [pc, #248]	; 10258 <CMachineInfo::CMachineInfo()+0x1c4>
   1015c:	ea000000 	b	10164 <CMachineInfo::CMachineInfo()+0xd0>
   10160:	e7901203 	ldr	r1, [r0, r3, lsl #4]
   10164:	e1520001 	cmp	r2, r1
   10168:	0a000012 	beq	101b8 <CMachineInfo::CMachineInfo()+0x124>
   1016c:	e2833001 	add	r3, r3, #1
   10170:	e3530011 	cmp	r3, #17
   10174:	1afffff9 	bne	10160 <CMachineInfo::CMachineInfo()+0xcc>
   10178:	e28d0008 	add	r0, sp, #8
   1017c:	ebffe48d 	bl	93b8 <CBcmPropertyTags::~CBcmPropertyTags()>
   10180:	eaffffe0 	b	10108 <CMachineInfo::CMachineInfo()+0x74>
   10184:	e303c248 	movw	ip, #12872	; 0x3248
   10188:	e340c001 	movt	ip, #1
   1018c:	e7e70252 	ubfx	r0, r2, #4, #8
   10190:	e1a03005 	mov	r3, r5
   10194:	e1a0100c 	mov	r1, ip
   10198:	ea000000 	b	101a0 <CMachineInfo::CMachineInfo()+0x10c>
   1019c:	e5b1500c 	ldr	r5, [r1, #12]!
   101a0:	e1550000 	cmp	r5, r0
   101a4:	0a000011 	beq	101f0 <CMachineInfo::CMachineInfo()+0x15c>
   101a8:	e2833001 	add	r3, r3, #1
   101ac:	e353000a 	cmp	r3, #10
   101b0:	1afffff9 	bne	1019c <CMachineInfo::CMachineInfo()+0x108>
   101b4:	eaffffef 	b	10178 <CMachineInfo::CMachineInfo()+0xe4>
   101b8:	e3032248 	movw	r2, #12872	; 0x3248
   101bc:	e3402001 	movt	r2, #1
   101c0:	e0823203 	add	r3, r2, r3, lsl #4
   101c4:	e3a01001 	mov	r1, #1
   101c8:	e5841008 	str	r1, [r4, #8]
   101cc:	e3a02000 	mov	r2, #0
   101d0:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
   101d4:	e5931080 	ldr	r1, [r3, #128]	; 0x80
   101d8:	e5933084 	ldr	r3, [r3, #132]	; 0x84
   101dc:	e5c40004 	strb	r0, [r4, #4]
   101e0:	e584100c 	str	r1, [r4, #12]
   101e4:	e5843014 	str	r3, [r4, #20]
   101e8:	e5c42010 	strb	r2, [r4, #16]
   101ec:	eaffffe1 	b	10178 <CMachineInfo::CMachineInfo()+0xe4>
   101f0:	e3a0100c 	mov	r1, #12
   101f4:	e7e3e652 	ubfx	lr, r2, #12, #4
   101f8:	e023c391 	mla	r3, r1, r3, ip
   101fc:	e35e0002 	cmp	lr, #2
   10200:	e202100f 	and	r1, r2, #15
   10204:	e7e22a52 	ubfx	r2, r2, #20, #3
   10208:	e5c4e010 	strb	lr, [r4, #16]
   1020c:	e3a00c01 	mov	r0, #256	; 0x100
   10210:	e2811001 	add	r1, r1, #1
   10214:	e1a00210 	lsl	r0, r0, r2
   10218:	e584100c 	str	r1, [r4, #12]
   1021c:	e5d3c004 	ldrb	ip, [r3, #4]
   10220:	e5933008 	ldr	r3, [r3, #8]
   10224:	e5840014 	str	r0, [r4, #20]
   10228:	e5c4c004 	strb	ip, [r4, #4]
   1022c:	e5843008 	str	r3, [r4, #8]
   10230:	83a03003 	movhi	r3, #3
   10234:	85c43010 	strbhi	r3, [r4, #16]
   10238:	e3520000 	cmp	r2, #0
   1023c:	035c0003 	cmpeq	ip, #3
   10240:	1affffcc 	bne	10178 <CMachineInfo::CMachineInfo()+0xe4>
   10244:	e3510001 	cmp	r1, #1
   10248:	13a03002 	movne	r3, #2
   1024c:	03a03001 	moveq	r3, #1
   10250:	e5c43004 	strb	r3, [r4, #4]
   10254:	eaffffc7 	b	10178 <CMachineInfo::CMachineInfo()+0xe4>
   10258:	000132c0 	.word	0x000132c0

0001025c <CMachineInfo::~CMachineInfo()>:
   1025c:	e3033920 	movw	r3, #14624	; 0x3920
   10260:	e3403001 	movt	r3, #1
   10264:	e3a0100c 	mov	r1, #12
   10268:	e5c01004 	strb	r1, [r0, #4]
   1026c:	e5932000 	ldr	r2, [r3]
   10270:	e1500002 	cmp	r0, r2
   10274:	03a02000 	moveq	r2, #0
   10278:	05832000 	streq	r2, [r3]
   1027c:	e12fff1e 	bx	lr

00010280 <CMachineInfo::GetMachineModel() const>:
   10280:	e5d00004 	ldrb	r0, [r0, #4]
   10284:	e12fff1e 	bx	lr

00010288 <CMachineInfo::GetMachineName() const>:
   10288:	e5d02004 	ldrb	r2, [r0, #4]
   1028c:	e3033248 	movw	r3, #12872	; 0x3248
   10290:	e3403001 	movt	r3, #1
   10294:	e0833102 	add	r3, r3, r2, lsl #2
   10298:	e5930188 	ldr	r0, [r3, #392]	; 0x188
   1029c:	e12fff1e 	bx	lr

000102a0 <CMachineInfo::GetModelMajor() const>:
   102a0:	e5900008 	ldr	r0, [r0, #8]
   102a4:	e12fff1e 	bx	lr

000102a8 <CMachineInfo::GetModelRevision() const>:
   102a8:	e590000c 	ldr	r0, [r0, #12]
   102ac:	e12fff1e 	bx	lr

000102b0 <CMachineInfo::GetSoCType() const>:
   102b0:	e5d00010 	ldrb	r0, [r0, #16]
   102b4:	e12fff1e 	bx	lr

000102b8 <CMachineInfo::GetRAMSize() const>:
   102b8:	e5900014 	ldr	r0, [r0, #20]
   102bc:	e12fff1e 	bx	lr

000102c0 <CMachineInfo::GetSoCName() const>:
   102c0:	e5d02010 	ldrb	r2, [r0, #16]
   102c4:	e3033248 	movw	r3, #12872	; 0x3248
   102c8:	e3403001 	movt	r3, #1
   102cc:	e0833102 	add	r3, r3, r2, lsl #2
   102d0:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
   102d4:	e12fff1e 	bx	lr

000102d8 <CMachineInfo::GetRevisionRaw() const>:
   102d8:	e5900000 	ldr	r0, [r0]
   102dc:	e12fff1e 	bx	lr

000102e0 <CMachineInfo::GetClockRate(unsigned int) const>:
   102e0:	e92d4070 	push	{r4, r5, r6, lr}
   102e4:	e24dd028 	sub	sp, sp, #40	; 0x28
   102e8:	e1a06000 	mov	r6, r0
   102ec:	e28d000c 	add	r0, sp, #12
   102f0:	e1a05001 	mov	r5, r1
   102f4:	ebffe429 	bl	93a0 <CBcmPropertyTags::CBcmPropertyTags()>
   102f8:	e3a03004 	mov	r3, #4
   102fc:	e28d000c 	add	r0, sp, #12
   10300:	e58d3000 	str	r3, [sp]
   10304:	e3a01002 	mov	r1, #2
   10308:	e3a03014 	mov	r3, #20
   1030c:	e3401003 	movt	r1, #3
   10310:	e08d2003 	add	r2, sp, r3
   10314:	e58d5020 	str	r5, [sp, #32]
   10318:	ebffe468 	bl	94c0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1031c:	e2504000 	subs	r4, r0, #0
   10320:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   10324:	1a00000b 	bne	10358 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   10328:	e3550002 	cmp	r5, #2
   1032c:	0a00000e 	beq	1036c <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   10330:	e3550004 	cmp	r5, #4
   10334:	0a000012 	beq	10384 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
   10338:	e3550001 	cmp	r5, #1
   1033c:	0a00000d 	beq	10378 <CMachineInfo::GetClockRate(unsigned int) const+0x98>
   10340:	e3031414 	movw	r1, #13332	; 0x3414
   10344:	e30301ac 	movw	r0, #12716	; 0x31ac
   10348:	e3401001 	movt	r1, #1
   1034c:	e3400001 	movt	r0, #1
   10350:	e3a02e11 	mov	r2, #272	; 0x110
   10354:	ebfff341 	bl	d060 <assertion_failed>
   10358:	e28d000c 	add	r0, sp, #12
   1035c:	ebffe415 	bl	93b8 <CBcmPropertyTags::~CBcmPropertyTags()>
   10360:	e1a00004 	mov	r0, r4
   10364:	e28dd028 	add	sp, sp, #40	; 0x28
   10368:	e8bd8070 	pop	{r4, r5, r6, pc}
   1036c:	e3a04b1b 	mov	r4, #27648	; 0x6c00
   10370:	e34042dc 	movt	r4, #732	; 0x2dc
   10374:	eafffff7 	b	10358 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   10378:	e3a04ce1 	mov	r4, #57600	; 0xe100
   1037c:	e34045f5 	movt	r4, #1525	; 0x5f5
   10380:	eafffff4 	b	10358 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   10384:	e5962008 	ldr	r2, [r6, #8]
   10388:	e3a03ca3 	mov	r3, #41728	; 0xa300
   1038c:	e34131e1 	movt	r3, #4577	; 0x11e1
   10390:	e30b4280 	movw	r4, #45696	; 0xb280
   10394:	e3520002 	cmp	r2, #2
   10398:	e3404ee6 	movt	r4, #3814	; 0xee6
   1039c:	81a04003 	movhi	r4, r3
   103a0:	eaffffec 	b	10358 <CMachineInfo::GetClockRate(unsigned int) const+0x78>

000103a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   103a4:	e3510036 	cmp	r1, #54	; 0x36
   103a8:	0a00000f 	beq	103ec <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
   103ac:	e3510037 	cmp	r1, #55	; 0x37
   103b0:	1a000004 	bne	103c8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   103b4:	e5d03004 	ldrb	r3, [r0, #4]
   103b8:	e3530003 	cmp	r3, #3
   103bc:	c3a00028 	movgt	r0, #40	; 0x28
   103c0:	d3a0002d 	movle	r0, #45	; 0x2d
   103c4:	e12fff1e 	bx	lr
   103c8:	e92d4010 	push	{r4, lr}
   103cc:	e300213b 	movw	r2, #315	; 0x13b
   103d0:	e3031414 	movw	r1, #13332	; 0x3414
   103d4:	e30301ac 	movw	r0, #12716	; 0x31ac
   103d8:	e3401001 	movt	r1, #1
   103dc:	e3400001 	movt	r0, #1
   103e0:	ebfff31e 	bl	d060 <assertion_failed>
   103e4:	e3a00000 	mov	r0, #0
   103e8:	e8bd8010 	pop	{r4, pc}
   103ec:	e5d03004 	ldrb	r3, [r0, #4]
   103f0:	e3530003 	cmp	r3, #3
   103f4:	ca000001 	bgt	10400 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
   103f8:	e3a00028 	mov	r0, #40	; 0x28
   103fc:	e12fff1e 	bx	lr
   10400:	e5903008 	ldr	r3, [r0, #8]
   10404:	e3530003 	cmp	r3, #3
   10408:	33a0002d 	movcc	r0, #45	; 0x2d
   1040c:	23a00029 	movcs	r0, #41	; 0x29
   10410:	e12fff1e 	bx	lr

00010414 <CMachineInfo::GetDevice(TDeviceId) const>:
   10414:	e3510000 	cmp	r1, #0
   10418:	1a000003 	bne	1042c <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   1041c:	e5d00004 	ldrb	r0, [r0, #4]
   10420:	e2500001 	subs	r0, r0, #1
   10424:	13a00001 	movne	r0, #1
   10428:	e12fff1e 	bx	lr
   1042c:	e92d4010 	push	{r4, lr}
   10430:	e3a02f55 	mov	r2, #340	; 0x154
   10434:	e3031414 	movw	r1, #13332	; 0x3414
   10438:	e30301ac 	movw	r0, #12716	; 0x31ac
   1043c:	e3401001 	movt	r1, #1
   10440:	e3400001 	movt	r0, #1
   10444:	ebfff305 	bl	d060 <assertion_failed>
   10448:	e3a00000 	mov	r0, #0
   1044c:	e8bd8010 	pop	{r4, pc}

00010450 <CMachineInfo::Get()>:
   10450:	e92d4010 	push	{r4, lr}
   10454:	e3034920 	movw	r4, #14624	; 0x3920
   10458:	e3404001 	movt	r4, #1
   1045c:	e5940000 	ldr	r0, [r4]
   10460:	e3500000 	cmp	r0, #0
   10464:	18bd8010 	popne	{r4, pc}
   10468:	e300215d 	movw	r2, #349	; 0x15d
   1046c:	e3031414 	movw	r1, #13332	; 0x3414
   10470:	e30108f0 	movw	r0, #6384	; 0x18f0
   10474:	e3401001 	movt	r1, #1
   10478:	e3400001 	movt	r0, #1
   1047c:	ebfff2f7 	bl	d060 <assertion_failed>
   10480:	e5940000 	ldr	r0, [r4]
   10484:	e8bd8010 	pop	{r4, pc}

00010488 <InvalidateDataCacheL1Only>:
   10488:	e92d0070 	push	{r4, r5, r6}
   1048c:	e3a00000 	mov	r0, #0
   10490:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   10494:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   10498:	e3071fff 	movw	r1, #32767	; 0x7fff
   1049c:	e00126a0 	and	r2, r1, r0, lsr #13
   104a0:	e30013ff 	movw	r1, #1023	; 0x3ff
   104a4:	e00131a0 	and	r3, r1, r0, lsr #3
   104a8:	e2822001 	add	r2, r2, #1
   104ac:	e2000007 	and	r0, r0, #7
   104b0:	e2800004 	add	r0, r0, #4
   104b4:	e16f1f13 	clz	r1, r3
   104b8:	e2834001 	add	r4, r3, #1
   104bc:	e2422001 	sub	r2, r2, #1
   104c0:	e1a03004 	mov	r3, r4
   104c4:	e2533001 	subs	r3, r3, #1
   104c8:	e1a05113 	lsl	r5, r3, r1
   104cc:	e1a06012 	lsl	r6, r2, r0
   104d0:	e1855006 	orr	r5, r5, r6
   104d4:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   104d8:	cafffff9 	bgt	104c4 <InvalidateDataCacheL1Only+0x3c>
   104dc:	e3520000 	cmp	r2, #0
   104e0:	cafffff5 	bgt	104bc <InvalidateDataCacheL1Only+0x34>
   104e4:	f57ff04e 	dsb	st
   104e8:	f57ff06f 	isb	sy
   104ec:	e8bd0070 	pop	{r4, r5, r6}
   104f0:	e12fff1e 	bx	lr

000104f4 <InvalidateDataCache>:
   104f4:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   104f8:	f57ff05f 	dmb	sy
   104fc:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   10500:	e1a03ba0 	lsr	r3, r0, #23
   10504:	e213300e 	ands	r3, r3, #14
   10508:	0a00001d 	beq	10584 <InvalidateDataCache+0x90>
   1050c:	e3a0a000 	mov	sl, #0
   10510:	e08a20aa 	add	r2, sl, sl, lsr #1
   10514:	e1a01230 	lsr	r1, r0, r2
   10518:	e2011007 	and	r1, r1, #7
   1051c:	e3510002 	cmp	r1, #2
   10520:	ba000014 	blt	10578 <InvalidateDataCache+0x84>
   10524:	e10f9000 	mrs	r9, CPSR
   10528:	f10c0080 	cpsid	i
   1052c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10530:	f57ff06f 	isb	sy
   10534:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   10538:	e121f009 	msr	CPSR_c, r9
   1053c:	e2012007 	and	r2, r1, #7
   10540:	e2822004 	add	r2, r2, #4
   10544:	e30043ff 	movw	r4, #1023	; 0x3ff
   10548:	e01441a1 	ands	r4, r4, r1, lsr #3
   1054c:	e16f5f14 	clz	r5, r4
   10550:	e3077fff 	movw	r7, #32767	; 0x7fff
   10554:	e01776a1 	ands	r7, r7, r1, lsr #13
   10558:	e1a09007 	mov	r9, r7
   1055c:	e18ab514 	orr	fp, sl, r4, lsl r5
   10560:	e18bb219 	orr	fp, fp, r9, lsl r2
   10564:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   10568:	e2599001 	subs	r9, r9, #1
   1056c:	aafffffa 	bge	1055c <InvalidateDataCache+0x68>
   10570:	e2544001 	subs	r4, r4, #1
   10574:	aafffff7 	bge	10558 <InvalidateDataCache+0x64>
   10578:	e28aa002 	add	sl, sl, #2
   1057c:	e153000a 	cmp	r3, sl
   10580:	caffffe2 	bgt	10510 <InvalidateDataCache+0x1c>
   10584:	e3a0a000 	mov	sl, #0
   10588:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   1058c:	f57ff04e 	dsb	st
   10590:	f57ff06f 	isb	sy
   10594:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   10598:	e12fff1e 	bx	lr

0001059c <CleanDataCache>:
   1059c:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   105a0:	f57ff05f 	dmb	sy
   105a4:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   105a8:	e1a03ba0 	lsr	r3, r0, #23
   105ac:	e213300e 	ands	r3, r3, #14
   105b0:	0a00001d 	beq	1062c <CleanDataCache+0x90>
   105b4:	e3a0a000 	mov	sl, #0
   105b8:	e08a20aa 	add	r2, sl, sl, lsr #1
   105bc:	e1a01230 	lsr	r1, r0, r2
   105c0:	e2011007 	and	r1, r1, #7
   105c4:	e3510002 	cmp	r1, #2
   105c8:	ba000014 	blt	10620 <CleanDataCache+0x84>
   105cc:	e10f9000 	mrs	r9, CPSR
   105d0:	f10c0080 	cpsid	i
   105d4:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   105d8:	f57ff06f 	isb	sy
   105dc:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   105e0:	e121f009 	msr	CPSR_c, r9
   105e4:	e2012007 	and	r2, r1, #7
   105e8:	e2822004 	add	r2, r2, #4
   105ec:	e30043ff 	movw	r4, #1023	; 0x3ff
   105f0:	e01441a1 	ands	r4, r4, r1, lsr #3
   105f4:	e16f5f14 	clz	r5, r4
   105f8:	e3077fff 	movw	r7, #32767	; 0x7fff
   105fc:	e01776a1 	ands	r7, r7, r1, lsr #13
   10600:	e1a09007 	mov	r9, r7
   10604:	e18ab514 	orr	fp, sl, r4, lsl r5
   10608:	e18bb219 	orr	fp, fp, r9, lsl r2
   1060c:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   10610:	e2599001 	subs	r9, r9, #1
   10614:	aafffffa 	bge	10604 <CleanDataCache+0x68>
   10618:	e2544001 	subs	r4, r4, #1
   1061c:	aafffff7 	bge	10600 <CleanDataCache+0x64>
   10620:	e28aa002 	add	sl, sl, #2
   10624:	e153000a 	cmp	r3, sl
   10628:	caffffe2 	bgt	105b8 <CleanDataCache+0x1c>
   1062c:	e3a0a000 	mov	sl, #0
   10630:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10634:	f57ff04e 	dsb	st
   10638:	f57ff06f 	isb	sy
   1063c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   10640:	e12fff1e 	bx	lr

00010644 <CleanAndInvalidateDataCacheRange>:
   10644:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   10648:	e1a03823 	lsr	r3, r3, #16
   1064c:	e203300f 	and	r3, r3, #15
   10650:	e3a02004 	mov	r2, #4
   10654:	e1a02312 	lsl	r2, r2, r3
   10658:	e0801001 	add	r1, r0, r1
   1065c:	e2423001 	sub	r3, r2, #1
   10660:	e1c00003 	bic	r0, r0, r3
   10664:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   10668:	e0800002 	add	r0, r0, r2
   1066c:	e1500001 	cmp	r0, r1
   10670:	3afffffb 	bcc	10664 <CleanAndInvalidateDataCacheRange+0x20>
   10674:	f57ff04e 	dsb	st
   10678:	e12fff1e 	bx	lr

0001067c <CPtrList::CPtrList()>:
   1067c:	e3a02000 	mov	r2, #0
   10680:	e5802000 	str	r2, [r0]
   10684:	e12fff1e 	bx	lr

00010688 <CPtrList::~CPtrList()>:
   10688:	e5903000 	ldr	r3, [r0]
   1068c:	e92d4010 	push	{r4, lr}
   10690:	e3530000 	cmp	r3, #0
   10694:	e1a04000 	mov	r4, r0
   10698:	0a000005 	beq	106b4 <CPtrList::~CPtrList()+0x2c>
   1069c:	e3031530 	movw	r1, #13616	; 0x3530
   106a0:	e303053c 	movw	r0, #13628	; 0x353c
   106a4:	e3401001 	movt	r1, #1
   106a8:	e3400001 	movt	r0, #1
   106ac:	e3a0202a 	mov	r2, #42	; 0x2a
   106b0:	ebfff26a 	bl	d060 <assertion_failed>
   106b4:	e1a00004 	mov	r0, r4
   106b8:	e8bd8010 	pop	{r4, pc}

000106bc <CPtrList::GetFirst()>:
   106bc:	e5900000 	ldr	r0, [r0]
   106c0:	e12fff1e 	bx	lr

000106c4 <CPtrList::GetNext(TPtrListElement*)>:
   106c4:	e92d4010 	push	{r4, lr}
   106c8:	e2514000 	subs	r4, r1, #0
   106cc:	0a00000c 	beq	10704 <CPtrList::GetNext(TPtrListElement*)+0x40>
   106d0:	e5942000 	ldr	r2, [r4]
   106d4:	e3043d43 	movw	r3, #19779	; 0x4d43
   106d8:	e345304c 	movt	r3, #20556	; 0x504c
   106dc:	e1520003 	cmp	r2, r3
   106e0:	0a000005 	beq	106fc <CPtrList::GetNext(TPtrListElement*)+0x38>
   106e4:	e3031530 	movw	r1, #13616	; 0x3530
   106e8:	e303055c 	movw	r0, #13660	; 0x355c
   106ec:	e3401001 	movt	r1, #1
   106f0:	e3400001 	movt	r0, #1
   106f4:	e3a02035 	mov	r2, #53	; 0x35
   106f8:	ebfff258 	bl	d060 <assertion_failed>
   106fc:	e5940008 	ldr	r0, [r4, #8]
   10700:	e8bd8010 	pop	{r4, pc}
   10704:	e3031530 	movw	r1, #13616	; 0x3530
   10708:	e303054c 	movw	r0, #13644	; 0x354c
   1070c:	e3401001 	movt	r1, #1
   10710:	e3400001 	movt	r0, #1
   10714:	e3a02034 	mov	r2, #52	; 0x34
   10718:	ebfff250 	bl	d060 <assertion_failed>
   1071c:	eaffffeb 	b	106d0 <CPtrList::GetNext(TPtrListElement*)+0xc>

00010720 <CPtrList::GetPtr(TPtrListElement*)>:
   10720:	e92d4010 	push	{r4, lr}
   10724:	e2514000 	subs	r4, r1, #0
   10728:	0a00000c 	beq	10760 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   1072c:	e5942000 	ldr	r2, [r4]
   10730:	e3043d43 	movw	r3, #19779	; 0x4d43
   10734:	e345304c 	movt	r3, #20556	; 0x504c
   10738:	e1520003 	cmp	r2, r3
   1073c:	0a000005 	beq	10758 <CPtrList::GetPtr(TPtrListElement*)+0x38>
   10740:	e3031530 	movw	r1, #13616	; 0x3530
   10744:	e303055c 	movw	r0, #13660	; 0x355c
   10748:	e3401001 	movt	r1, #1
   1074c:	e3400001 	movt	r0, #1
   10750:	e3a0203d 	mov	r2, #61	; 0x3d
   10754:	ebfff241 	bl	d060 <assertion_failed>
   10758:	e594000c 	ldr	r0, [r4, #12]
   1075c:	e8bd8010 	pop	{r4, pc}
   10760:	e3031530 	movw	r1, #13616	; 0x3530
   10764:	e303054c 	movw	r0, #13644	; 0x354c
   10768:	e3401001 	movt	r1, #1
   1076c:	e3400001 	movt	r0, #1
   10770:	e3a0203c 	mov	r2, #60	; 0x3c
   10774:	ebfff239 	bl	d060 <assertion_failed>
   10778:	eaffffeb 	b	1072c <CPtrList::GetPtr(TPtrListElement*)+0xc>

0001077c <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   1077c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10780:	e1a06000 	mov	r6, r0
   10784:	e3a00010 	mov	r0, #16
   10788:	e1a04001 	mov	r4, r1
   1078c:	e1a07002 	mov	r7, r2
   10790:	ebffe73e 	bl	a490 <operator new(unsigned int)>
   10794:	e5961000 	ldr	r1, [r6]
   10798:	e3043d43 	movw	r3, #19779	; 0x4d43
   1079c:	e345304c 	movt	r3, #20556	; 0x504c
   107a0:	e3510000 	cmp	r1, #0
   107a4:	e1a05000 	mov	r5, r0
   107a8:	e580700c 	str	r7, [r0, #12]
   107ac:	e5803000 	str	r3, [r0]
   107b0:	0a000029 	beq	1085c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   107b4:	e3540000 	cmp	r4, #0
   107b8:	0a00002e 	beq	10878 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   107bc:	e5942000 	ldr	r2, [r4]
   107c0:	e3043d43 	movw	r3, #19779	; 0x4d43
   107c4:	e345304c 	movt	r3, #20556	; 0x504c
   107c8:	e1520003 	cmp	r2, r3
   107cc:	0a000005 	beq	107e8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
   107d0:	e3031530 	movw	r1, #13616	; 0x3530
   107d4:	e303059c 	movw	r0, #13724	; 0x359c
   107d8:	e3401001 	movt	r1, #1
   107dc:	e3400001 	movt	r0, #1
   107e0:	e3a0204e 	mov	r2, #78	; 0x4e
   107e4:	ebfff21d 	bl	d060 <assertion_failed>
   107e8:	e5963000 	ldr	r3, [r6]
   107ec:	e1540003 	cmp	r4, r3
   107f0:	0a000013 	beq	10844 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
   107f4:	e5943004 	ldr	r3, [r4, #4]
   107f8:	e5854008 	str	r4, [r5, #8]
   107fc:	e3530000 	cmp	r3, #0
   10800:	e5853004 	str	r3, [r5, #4]
   10804:	0a00000c 	beq	1083c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   10808:	e5931000 	ldr	r1, [r3]
   1080c:	e3042d43 	movw	r2, #19779	; 0x4d43
   10810:	e345204c 	movt	r2, #20556	; 0x504c
   10814:	e1510002 	cmp	r1, r2
   10818:	0a000006 	beq	10838 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
   1081c:	e3031530 	movw	r1, #13616	; 0x3530
   10820:	e30305c0 	movw	r0, #13760	; 0x35c0
   10824:	e3401001 	movt	r1, #1
   10828:	e3400001 	movt	r0, #1
   1082c:	e3a02060 	mov	r2, #96	; 0x60
   10830:	ebfff20a 	bl	d060 <assertion_failed>
   10834:	e5943004 	ldr	r3, [r4, #4]
   10838:	e5835008 	str	r5, [r3, #8]
   1083c:	e5845004 	str	r5, [r4, #4]
   10840:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10844:	e5845004 	str	r5, [r4, #4]
   10848:	e3a03000 	mov	r3, #0
   1084c:	e5854008 	str	r4, [r5, #8]
   10850:	e5865000 	str	r5, [r6]
   10854:	e5853004 	str	r3, [r5, #4]
   10858:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1085c:	e3031530 	movw	r1, #13616	; 0x3530
   10860:	e3030580 	movw	r0, #13696	; 0x3580
   10864:	e3401001 	movt	r1, #1
   10868:	e3400001 	movt	r0, #1
   1086c:	e3a0204c 	mov	r2, #76	; 0x4c
   10870:	ebfff1fa 	bl	d060 <assertion_failed>
   10874:	eaffffce 	b	107b4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
   10878:	e3031530 	movw	r1, #13616	; 0x3530
   1087c:	e3030590 	movw	r0, #13712	; 0x3590
   10880:	e3401001 	movt	r1, #1
   10884:	e3400001 	movt	r0, #1
   10888:	e3a0204d 	mov	r2, #77	; 0x4d
   1088c:	ebfff1f3 	bl	d060 <assertion_failed>
   10890:	eaffffc9 	b	107bc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

00010894 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   10894:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10898:	e1a06000 	mov	r6, r0
   1089c:	e3a00010 	mov	r0, #16
   108a0:	e1a05001 	mov	r5, r1
   108a4:	e1a07002 	mov	r7, r2
   108a8:	ebffe6f8 	bl	a490 <operator new(unsigned int)>
   108ac:	e3550000 	cmp	r5, #0
   108b0:	e3043d43 	movw	r3, #19779	; 0x4d43
   108b4:	e345304c 	movt	r3, #20556	; 0x504c
   108b8:	e1a04000 	mov	r4, r0
   108bc:	e5803000 	str	r3, [r0]
   108c0:	e580700c 	str	r7, [r0, #12]
   108c4:	e5963000 	ldr	r3, [r6]
   108c8:	0a000020 	beq	10950 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   108cc:	e3530000 	cmp	r3, #0
   108d0:	0a00002b 	beq	10984 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   108d4:	e5952000 	ldr	r2, [r5]
   108d8:	e3043d43 	movw	r3, #19779	; 0x4d43
   108dc:	e345304c 	movt	r3, #20556	; 0x504c
   108e0:	e1520003 	cmp	r2, r3
   108e4:	0a000005 	beq	10900 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   108e8:	e3031530 	movw	r1, #13616	; 0x3530
   108ec:	e30305e8 	movw	r0, #13800	; 0x35e8
   108f0:	e3401001 	movt	r1, #1
   108f4:	e3400001 	movt	r0, #1
   108f8:	e3a0207e 	mov	r2, #126	; 0x7e
   108fc:	ebfff1d7 	bl	d060 <assertion_failed>
   10900:	e5953008 	ldr	r3, [r5, #8]
   10904:	e5845004 	str	r5, [r4, #4]
   10908:	e3530000 	cmp	r3, #0
   1090c:	e5843008 	str	r3, [r4, #8]
   10910:	0a00000c 	beq	10948 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
   10914:	e5931000 	ldr	r1, [r3]
   10918:	e3042d43 	movw	r2, #19779	; 0x4d43
   1091c:	e345204c 	movt	r2, #20556	; 0x504c
   10920:	e1510002 	cmp	r1, r2
   10924:	0a000006 	beq	10944 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
   10928:	e3031530 	movw	r1, #13616	; 0x3530
   1092c:	e303060c 	movw	r0, #13836	; 0x360c
   10930:	e3401001 	movt	r1, #1
   10934:	e3400001 	movt	r0, #1
   10938:	e3a02085 	mov	r2, #133	; 0x85
   1093c:	ebfff1c7 	bl	d060 <assertion_failed>
   10940:	e5953008 	ldr	r3, [r5, #8]
   10944:	e5834004 	str	r4, [r3, #4]
   10948:	e5854008 	str	r4, [r5, #8]
   1094c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10950:	e3530000 	cmp	r3, #0
   10954:	0a000005 	beq	10970 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   10958:	e3031530 	movw	r1, #13616	; 0x3530
   1095c:	e303053c 	movw	r0, #13628	; 0x353c
   10960:	e3401001 	movt	r1, #1
   10964:	e3400001 	movt	r0, #1
   10968:	e3a02074 	mov	r2, #116	; 0x74
   1096c:	ebfff1bb 	bl	d060 <assertion_failed>
   10970:	e3a03000 	mov	r3, #0
   10974:	e5864000 	str	r4, [r6]
   10978:	e5843004 	str	r3, [r4, #4]
   1097c:	e5843008 	str	r3, [r4, #8]
   10980:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10984:	e3031530 	movw	r1, #13616	; 0x3530
   10988:	e3030580 	movw	r0, #13696	; 0x3580
   1098c:	e3401001 	movt	r1, #1
   10990:	e3400001 	movt	r0, #1
   10994:	e3a0207d 	mov	r2, #125	; 0x7d
   10998:	ebfff1b0 	bl	d060 <assertion_failed>
   1099c:	eaffffcc 	b	108d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

000109a0 <CPtrList::Remove(TPtrListElement*)>:
   109a0:	e92d4070 	push	{r4, r5, r6, lr}
   109a4:	e2514000 	subs	r4, r1, #0
   109a8:	e1a05000 	mov	r5, r0
   109ac:	0a000048 	beq	10ad4 <CPtrList::Remove(TPtrListElement*)+0x134>
   109b0:	e5942000 	ldr	r2, [r4]
   109b4:	e3043d43 	movw	r3, #19779	; 0x4d43
   109b8:	e345304c 	movt	r3, #20556	; 0x504c
   109bc:	e1520003 	cmp	r2, r3
   109c0:	0a000005 	beq	109dc <CPtrList::Remove(TPtrListElement*)+0x3c>
   109c4:	e3031530 	movw	r1, #13616	; 0x3530
   109c8:	e303055c 	movw	r0, #13660	; 0x355c
   109cc:	e3401001 	movt	r1, #1
   109d0:	e3400001 	movt	r0, #1
   109d4:	e3a02090 	mov	r2, #144	; 0x90
   109d8:	ebfff1a0 	bl	d060 <assertion_failed>
   109dc:	e5953000 	ldr	r3, [r5]
   109e0:	e1540003 	cmp	r4, r3
   109e4:	0a000027 	beq	10a88 <CPtrList::Remove(TPtrListElement*)+0xe8>
   109e8:	e5943004 	ldr	r3, [r4, #4]
   109ec:	e3530000 	cmp	r3, #0
   109f0:	0a00003e 	beq	10af0 <CPtrList::Remove(TPtrListElement*)+0x150>
   109f4:	e5931000 	ldr	r1, [r3]
   109f8:	e3042d43 	movw	r2, #19779	; 0x4d43
   109fc:	e345204c 	movt	r2, #20556	; 0x504c
   10a00:	e1510002 	cmp	r1, r2
   10a04:	0a000006 	beq	10a24 <CPtrList::Remove(TPtrListElement*)+0x84>
   10a08:	e3031530 	movw	r1, #13616	; 0x3530
   10a0c:	e303067c 	movw	r0, #13948	; 0x367c
   10a10:	e3401001 	movt	r1, #1
   10a14:	e3400001 	movt	r0, #1
   10a18:	e3a0209f 	mov	r2, #159	; 0x9f
   10a1c:	ebfff18f 	bl	d060 <assertion_failed>
   10a20:	e5943004 	ldr	r3, [r4, #4]
   10a24:	e5942008 	ldr	r2, [r4, #8]
   10a28:	e5832008 	str	r2, [r3, #8]
   10a2c:	e5942008 	ldr	r2, [r4, #8]
   10a30:	e3520000 	cmp	r2, #0
   10a34:	0a00000d 	beq	10a70 <CPtrList::Remove(TPtrListElement*)+0xd0>
   10a38:	e5920000 	ldr	r0, [r2]
   10a3c:	e3041d43 	movw	r1, #19779	; 0x4d43
   10a40:	e345104c 	movt	r1, #20556	; 0x504c
   10a44:	e1500001 	cmp	r0, r1
   10a48:	0a000007 	beq	10a6c <CPtrList::Remove(TPtrListElement*)+0xcc>
   10a4c:	e3a020a4 	mov	r2, #164	; 0xa4
   10a50:	e3031530 	movw	r1, #13616	; 0x3530
   10a54:	e3030638 	movw	r0, #13880	; 0x3638
   10a58:	e3401001 	movt	r1, #1
   10a5c:	e3400001 	movt	r0, #1
   10a60:	ebfff17e 	bl	d060 <assertion_failed>
   10a64:	e5942008 	ldr	r2, [r4, #8]
   10a68:	e5943004 	ldr	r3, [r4, #4]
   10a6c:	e5823004 	str	r3, [r2, #4]
   10a70:	e3a03000 	mov	r3, #0
   10a74:	e1a00004 	mov	r0, r4
   10a78:	e5843000 	str	r3, [r4]
   10a7c:	e3a01010 	mov	r1, #16
   10a80:	e8bd4070 	pop	{r4, r5, r6, lr}
   10a84:	eaffe685 	b	a4a0 <operator delete(void*, unsigned int)>
   10a88:	e5943008 	ldr	r3, [r4, #8]
   10a8c:	e3530000 	cmp	r3, #0
   10a90:	e5853000 	str	r3, [r5]
   10a94:	0afffff5 	beq	10a70 <CPtrList::Remove(TPtrListElement*)+0xd0>
   10a98:	e5931000 	ldr	r1, [r3]
   10a9c:	e3042d43 	movw	r2, #19779	; 0x4d43
   10aa0:	e345204c 	movt	r2, #20556	; 0x504c
   10aa4:	e1510002 	cmp	r1, r2
   10aa8:	0a000006 	beq	10ac8 <CPtrList::Remove(TPtrListElement*)+0x128>
   10aac:	e3031530 	movw	r1, #13616	; 0x3530
   10ab0:	e3030638 	movw	r0, #13880	; 0x3638
   10ab4:	e3401001 	movt	r1, #1
   10ab8:	e3400001 	movt	r0, #1
   10abc:	e3a02098 	mov	r2, #152	; 0x98
   10ac0:	ebfff166 	bl	d060 <assertion_failed>
   10ac4:	e5943008 	ldr	r3, [r4, #8]
   10ac8:	e3a02000 	mov	r2, #0
   10acc:	e5832004 	str	r2, [r3, #4]
   10ad0:	eaffffe6 	b	10a70 <CPtrList::Remove(TPtrListElement*)+0xd0>
   10ad4:	e3031530 	movw	r1, #13616	; 0x3530
   10ad8:	e303054c 	movw	r0, #13644	; 0x354c
   10adc:	e3401001 	movt	r1, #1
   10ae0:	e3400001 	movt	r0, #1
   10ae4:	e3a0208f 	mov	r2, #143	; 0x8f
   10ae8:	ebfff15c 	bl	d060 <assertion_failed>
   10aec:	eaffffaf 	b	109b0 <CPtrList::Remove(TPtrListElement*)+0x10>
   10af0:	e3031530 	movw	r1, #13616	; 0x3530
   10af4:	e3030664 	movw	r0, #13924	; 0x3664
   10af8:	e3401001 	movt	r1, #1
   10afc:	e3400001 	movt	r0, #1
   10b00:	e3a0209e 	mov	r2, #158	; 0x9e
   10b04:	ebfff155 	bl	d060 <assertion_failed>
   10b08:	e5943004 	ldr	r3, [r4, #4]
   10b0c:	eaffffb8 	b	109f4 <CPtrList::Remove(TPtrListElement*)+0x54>

00010b10 <CPtrList::Find(void*)>:
   10b10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10b14:	e5904000 	ldr	r4, [r0]
   10b18:	e3540000 	cmp	r4, #0
   10b1c:	0a000016 	beq	10b7c <CPtrList::Find(void*)+0x6c>
   10b20:	e3048d43 	movw	r8, #19779	; 0x4d43
   10b24:	e3037530 	movw	r7, #13616	; 0x3530
   10b28:	e303655c 	movw	r6, #13660	; 0x355c
   10b2c:	e1a05001 	mov	r5, r1
   10b30:	e345804c 	movt	r8, #20556	; 0x504c
   10b34:	e3407001 	movt	r7, #1
   10b38:	e3406001 	movt	r6, #1
   10b3c:	ea000002 	b	10b4c <CPtrList::Find(void*)+0x3c>
   10b40:	e5944008 	ldr	r4, [r4, #8]
   10b44:	e3540000 	cmp	r4, #0
   10b48:	0a00000b 	beq	10b7c <CPtrList::Find(void*)+0x6c>
   10b4c:	e5943000 	ldr	r3, [r4]
   10b50:	e3a020b3 	mov	r2, #179	; 0xb3
   10b54:	e1a01007 	mov	r1, r7
   10b58:	e1a00006 	mov	r0, r6
   10b5c:	e1530008 	cmp	r3, r8
   10b60:	0a000000 	beq	10b68 <CPtrList::Find(void*)+0x58>
   10b64:	ebfff13d 	bl	d060 <assertion_failed>
   10b68:	e594300c 	ldr	r3, [r4, #12]
   10b6c:	e1530005 	cmp	r3, r5
   10b70:	1afffff2 	bne	10b40 <CPtrList::Find(void*)+0x30>
   10b74:	e1a00004 	mov	r0, r4
   10b78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10b7c:	e3a04000 	mov	r4, #0
   10b80:	e1a00004 	mov	r0, r4
   10b84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00010b88 <mem_init>:
   10b88:	e0801001 	add	r1, r0, r1
   10b8c:	e3032924 	movw	r2, #14628	; 0x3924
   10b90:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   10b94:	e3402001 	movt	r2, #1
   10b98:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   10b9c:	e3500605 	cmp	r0, #5242880	; 0x500000
   10ba0:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   10ba4:	e582100c 	str	r1, [r2, #12]
   10ba8:	33a00605 	movcc	r0, #5242880	; 0x500000
   10bac:	e2411501 	sub	r1, r1, #4194304	; 0x400000
   10bb0:	e3c3300f 	bic	r3, r3, #15
   10bb4:	e5820000 	str	r0, [r2]
   10bb8:	e982000a 	stmib	r2, {r1, r3}
   10bbc:	e12fff1e 	bx	lr

00010bc0 <mem_get_size>:
   10bc0:	e3033924 	movw	r3, #14628	; 0x3924
   10bc4:	e3403001 	movt	r3, #1
   10bc8:	e5930004 	ldr	r0, [r3, #4]
   10bcc:	e5931000 	ldr	r1, [r3]
   10bd0:	e593200c 	ldr	r2, [r3, #12]
   10bd4:	e5933008 	ldr	r3, [r3, #8]
   10bd8:	e0400001 	sub	r0, r0, r1
   10bdc:	e0423003 	sub	r3, r2, r3
   10be0:	e0800003 	add	r0, r0, r3
   10be4:	e12fff1e 	bx	lr

00010be8 <malloc>:
   10be8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10bec:	e3037924 	movw	r7, #14628	; 0x3924
   10bf0:	e3407001 	movt	r7, #1
   10bf4:	e1a05000 	mov	r5, r0
   10bf8:	e5973000 	ldr	r3, [r7]
   10bfc:	e3530000 	cmp	r3, #0
   10c00:	0a000053 	beq	10d54 <malloc+0x16c>
   10c04:	e5970010 	ldr	r0, [r7, #16]
   10c08:	e3500000 	cmp	r0, #0
   10c0c:	1a00004b 	bne	10d40 <malloc+0x158>
   10c10:	e30347f4 	movw	r4, #14324	; 0x37f4
   10c14:	e3404001 	movt	r4, #1
   10c18:	e5943000 	ldr	r3, [r4]
   10c1c:	e3530000 	cmp	r3, #0
   10c20:	0a000007 	beq	10c44 <malloc+0x5c>
   10c24:	e1550003 	cmp	r5, r3
   10c28:	8a000002 	bhi	10c38 <malloc+0x50>
   10c2c:	ea000011 	b	10c78 <malloc+0x90>
   10c30:	e1530005 	cmp	r3, r5
   10c34:	2a00000f 	bcs	10c78 <malloc+0x90>
   10c38:	e5b43008 	ldr	r3, [r4, #8]!
   10c3c:	e3530000 	cmp	r3, #0
   10c40:	1afffffa 	bne	10c30 <malloc+0x48>
   10c44:	e5976000 	ldr	r6, [r7]
   10c48:	e285301f 	add	r3, r5, #31
   10c4c:	e3c3300f 	bic	r3, r3, #15
   10c50:	e5972004 	ldr	r2, [r7, #4]
   10c54:	e0863003 	add	r3, r6, r3
   10c58:	e5873000 	str	r3, [r7]
   10c5c:	e1530002 	cmp	r3, r2
   10c60:	9a000028 	bls	10d08 <malloc+0x120>
   10c64:	e5974010 	ldr	r4, [r7, #16]
   10c68:	e3540000 	cmp	r4, #0
   10c6c:	1a000035 	bne	10d48 <malloc+0x160>
   10c70:	e1a00004 	mov	r0, r4
   10c74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10c78:	e5946004 	ldr	r6, [r4, #4]
   10c7c:	e3560000 	cmp	r6, #0
   10c80:	01a05003 	moveq	r5, r3
   10c84:	0affffee 	beq	10c44 <malloc+0x5c>
   10c88:	e5962000 	ldr	r2, [r6]
   10c8c:	e3043d43 	movw	r3, #19779	; 0x4d43
   10c90:	e344324c 	movt	r3, #16972	; 0x424c
   10c94:	e1520003 	cmp	r2, r3
   10c98:	0a000005 	beq	10cb4 <malloc+0xcc>
   10c9c:	e30316a8 	movw	r1, #13992	; 0x36a8
   10ca0:	e30306c8 	movw	r0, #14024	; 0x36c8
   10ca4:	e3401001 	movt	r1, #1
   10ca8:	e3400001 	movt	r0, #1
   10cac:	e3a02089 	mov	r2, #137	; 0x89
   10cb0:	ebfff0ea 	bl	d060 <assertion_failed>
   10cb4:	e5963008 	ldr	r3, [r6, #8]
   10cb8:	e5843004 	str	r3, [r4, #4]
   10cbc:	e5973010 	ldr	r3, [r7, #16]
   10cc0:	e3530000 	cmp	r3, #0
   10cc4:	1a00001b 	bne	10d38 <malloc+0x150>
   10cc8:	e2864010 	add	r4, r6, #16
   10ccc:	e3a03000 	mov	r3, #0
   10cd0:	e314000f 	tst	r4, #15
   10cd4:	e5c63008 	strb	r3, [r6, #8]
   10cd8:	e5c63009 	strb	r3, [r6, #9]
   10cdc:	e5c6300a 	strb	r3, [r6, #10]
   10ce0:	e5c6300b 	strb	r3, [r6, #11]
   10ce4:	0affffe1 	beq	10c70 <malloc+0x88>
   10ce8:	e3a020a1 	mov	r2, #161	; 0xa1
   10cec:	e30316a8 	movw	r1, #13992	; 0x36a8
   10cf0:	e30306ec 	movw	r0, #14060	; 0x36ec
   10cf4:	e3401001 	movt	r1, #1
   10cf8:	e3400001 	movt	r0, #1
   10cfc:	ebfff0d7 	bl	d060 <assertion_failed>
   10d00:	e1a00004 	mov	r0, r4
   10d04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10d08:	e3a0304d 	mov	r3, #77	; 0x4d
   10d0c:	e5c63001 	strb	r3, [r6, #1]
   10d10:	e3a03042 	mov	r3, #66	; 0x42
   10d14:	e5c63003 	strb	r3, [r6, #3]
   10d18:	e5973010 	ldr	r3, [r7, #16]
   10d1c:	e3a02043 	mov	r2, #67	; 0x43
   10d20:	e5865004 	str	r5, [r6, #4]
   10d24:	e3530000 	cmp	r3, #0
   10d28:	e5c62000 	strb	r2, [r6]
   10d2c:	e3a0204c 	mov	r2, #76	; 0x4c
   10d30:	e5c62002 	strb	r2, [r6, #2]
   10d34:	0affffe3 	beq	10cc8 <malloc+0xe0>
   10d38:	ebffe608 	bl	a560 <LeaveCritical>
   10d3c:	eaffffe1 	b	10cc8 <malloc+0xe0>
   10d40:	ebffe5d8 	bl	a4a8 <EnterCritical>
   10d44:	eaffffb1 	b	10c10 <malloc+0x28>
   10d48:	ebffe604 	bl	a560 <LeaveCritical>
   10d4c:	e3a04000 	mov	r4, #0
   10d50:	eaffffc6 	b	10c70 <malloc+0x88>
   10d54:	e30316a8 	movw	r1, #13992	; 0x36a8
   10d58:	e30306b4 	movw	r0, #14004	; 0x36b4
   10d5c:	e3401001 	movt	r1, #1
   10d60:	e3400001 	movt	r0, #1
   10d64:	e3a0206f 	mov	r2, #111	; 0x6f
   10d68:	ebfff0bc 	bl	d060 <assertion_failed>
   10d6c:	eaffffa4 	b	10c04 <malloc+0x1c>

00010d70 <free>:
   10d70:	e92d4070 	push	{r4, r5, r6, lr}
   10d74:	e2505000 	subs	r5, r0, #0
   10d78:	08bd8070 	popeq	{r4, r5, r6, pc}
   10d7c:	e5352010 	ldr	r2, [r5, #-16]!
   10d80:	e3043d43 	movw	r3, #19779	; 0x4d43
   10d84:	e344324c 	movt	r3, #16972	; 0x424c
   10d88:	e1520003 	cmp	r2, r3
   10d8c:	0a000005 	beq	10da8 <free+0x38>
   10d90:	e30316a8 	movw	r1, #13992	; 0x36a8
   10d94:	e30306c8 	movw	r0, #14024	; 0x36c8
   10d98:	e3401001 	movt	r1, #1
   10d9c:	e3400001 	movt	r0, #1
   10da0:	e3a020ae 	mov	r2, #174	; 0xae
   10da4:	ebfff0ad 	bl	d060 <assertion_failed>
   10da8:	e30347f4 	movw	r4, #14324	; 0x37f4
   10dac:	e3404001 	movt	r4, #1
   10db0:	e5943000 	ldr	r3, [r4]
   10db4:	e3530000 	cmp	r3, #0
   10db8:	08bd8070 	popeq	{r4, r5, r6, pc}
   10dbc:	e5952004 	ldr	r2, [r5, #4]
   10dc0:	e1520003 	cmp	r2, r3
   10dc4:	1a000002 	bne	10dd4 <free+0x64>
   10dc8:	ea000005 	b	10de4 <free+0x74>
   10dcc:	e1530002 	cmp	r3, r2
   10dd0:	0a000003 	beq	10de4 <free+0x74>
   10dd4:	e5b43008 	ldr	r3, [r4, #8]!
   10dd8:	e3530000 	cmp	r3, #0
   10ddc:	1afffffa 	bne	10dcc <free+0x5c>
   10de0:	e8bd8070 	pop	{r4, r5, r6, pc}
   10de4:	e3036924 	movw	r6, #14628	; 0x3924
   10de8:	e3406001 	movt	r6, #1
   10dec:	e5960010 	ldr	r0, [r6, #16]
   10df0:	e3500000 	cmp	r0, #0
   10df4:	1a000003 	bne	10e08 <free+0x98>
   10df8:	e5943004 	ldr	r3, [r4, #4]
   10dfc:	e5853008 	str	r3, [r5, #8]
   10e00:	e5845004 	str	r5, [r4, #4]
   10e04:	e8bd8070 	pop	{r4, r5, r6, pc}
   10e08:	ebffe5a6 	bl	a4a8 <EnterCritical>
   10e0c:	e5962010 	ldr	r2, [r6, #16]
   10e10:	e5943004 	ldr	r3, [r4, #4]
   10e14:	e3520000 	cmp	r2, #0
   10e18:	e5853008 	str	r3, [r5, #8]
   10e1c:	e5845004 	str	r5, [r4, #4]
   10e20:	08bd8070 	popeq	{r4, r5, r6, pc}
   10e24:	e8bd4070 	pop	{r4, r5, r6, lr}
   10e28:	eaffe5cc 	b	a560 <LeaveCritical>

00010e2c <palloc>:
   10e2c:	e92d4070 	push	{r4, r5, r6, lr}
   10e30:	e3034924 	movw	r4, #14628	; 0x3924
   10e34:	e3404001 	movt	r4, #1
   10e38:	e5943008 	ldr	r3, [r4, #8]
   10e3c:	e3530000 	cmp	r3, #0
   10e40:	0a00002c 	beq	10ef8 <palloc+0xcc>
   10e44:	e5940014 	ldr	r0, [r4, #20]
   10e48:	e3500000 	cmp	r0, #0
   10e4c:	1a000019 	bne	10eb8 <palloc+0x8c>
   10e50:	e5945018 	ldr	r5, [r4, #24]
   10e54:	e3550000 	cmp	r5, #0
   10e58:	0a00001a 	beq	10ec8 <palloc+0x9c>
   10e5c:	e5952000 	ldr	r2, [r5]
   10e60:	e3043d43 	movw	r3, #19779	; 0x4d43
   10e64:	e3453047 	movt	r3, #20551	; 0x5047
   10e68:	e1520003 	cmp	r2, r3
   10e6c:	0a000005 	beq	10e88 <palloc+0x5c>
   10e70:	e30316a8 	movw	r1, #13992	; 0x36a8
   10e74:	e303072c 	movw	r0, #14124	; 0x372c
   10e78:	e3401001 	movt	r1, #1
   10e7c:	e3400001 	movt	r0, #1
   10e80:	e3a020d4 	mov	r2, #212	; 0xd4
   10e84:	ebfff075 	bl	d060 <assertion_failed>
   10e88:	e5953004 	ldr	r3, [r5, #4]
   10e8c:	e3a02000 	mov	r2, #0
   10e90:	e5852000 	str	r2, [r5]
   10e94:	e5843018 	str	r3, [r4, #24]
   10e98:	e5943014 	ldr	r3, [r4, #20]
   10e9c:	e3530000 	cmp	r3, #0
   10ea0:	1a000001 	bne	10eac <palloc+0x80>
   10ea4:	e1a00005 	mov	r0, r5
   10ea8:	e8bd8070 	pop	{r4, r5, r6, pc}
   10eac:	ebffe5ab 	bl	a560 <LeaveCritical>
   10eb0:	e1a00005 	mov	r0, r5
   10eb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   10eb8:	ebffe57a 	bl	a4a8 <EnterCritical>
   10ebc:	e5945018 	ldr	r5, [r4, #24]
   10ec0:	e3550000 	cmp	r5, #0
   10ec4:	1affffe4 	bne	10e5c <palloc+0x30>
   10ec8:	e5945008 	ldr	r5, [r4, #8]
   10ecc:	e594200c 	ldr	r2, [r4, #12]
   10ed0:	e2853a01 	add	r3, r5, #4096	; 0x1000
   10ed4:	e5843008 	str	r3, [r4, #8]
   10ed8:	e1530002 	cmp	r3, r2
   10edc:	9affffed 	bls	10e98 <palloc+0x6c>
   10ee0:	e5945014 	ldr	r5, [r4, #20]
   10ee4:	e3550000 	cmp	r5, #0
   10ee8:	0affffed 	beq	10ea4 <palloc+0x78>
   10eec:	ebffe59b 	bl	a560 <LeaveCritical>
   10ef0:	e3a00000 	mov	r0, #0
   10ef4:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ef8:	e30316a8 	movw	r1, #13992	; 0x36a8
   10efc:	e3030718 	movw	r0, #14104	; 0x3718
   10f00:	e3401001 	movt	r1, #1
   10f04:	e3400001 	movt	r0, #1
   10f08:	e3a020c6 	mov	r2, #198	; 0xc6
   10f0c:	ebfff053 	bl	d060 <assertion_failed>
   10f10:	eaffffcb 	b	10e44 <palloc+0x18>

00010f14 <pfree>:
   10f14:	e92d4070 	push	{r4, r5, r6, lr}
   10f18:	e2505000 	subs	r5, r0, #0
   10f1c:	08bd8070 	popeq	{r4, r5, r6, pc}
   10f20:	e3034924 	movw	r4, #14628	; 0x3924
   10f24:	e3404001 	movt	r4, #1
   10f28:	e5940014 	ldr	r0, [r4, #20]
   10f2c:	e3500000 	cmp	r0, #0
   10f30:	1a000006 	bne	10f50 <pfree+0x3c>
   10f34:	e5941018 	ldr	r1, [r4, #24]
   10f38:	e3042d43 	movw	r2, #19779	; 0x4d43
   10f3c:	e5845018 	str	r5, [r4, #24]
   10f40:	e3452047 	movt	r2, #20551	; 0x5047
   10f44:	e5852000 	str	r2, [r5]
   10f48:	e5851004 	str	r1, [r5, #4]
   10f4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10f50:	ebffe554 	bl	a4a8 <EnterCritical>
   10f54:	e5941014 	ldr	r1, [r4, #20]
   10f58:	e5942018 	ldr	r2, [r4, #24]
   10f5c:	e3043d43 	movw	r3, #19779	; 0x4d43
   10f60:	e3510000 	cmp	r1, #0
   10f64:	e3453047 	movt	r3, #20551	; 0x5047
   10f68:	e5845018 	str	r5, [r4, #24]
   10f6c:	e5853000 	str	r3, [r5]
   10f70:	e5852004 	str	r2, [r5, #4]
   10f74:	08bd8070 	popeq	{r4, r5, r6, pc}
   10f78:	e8bd4070 	pop	{r4, r5, r6, lr}
   10f7c:	eaffe577 	b	a560 <LeaveCritical>

00010f80 <_GLOBAL__sub_I_mem_init>:
   10f80:	e3033924 	movw	r3, #14628	; 0x3924
   10f84:	e3403001 	movt	r3, #1
   10f88:	e3a02001 	mov	r2, #1
   10f8c:	e5832010 	str	r2, [r3, #16]
   10f90:	e5832014 	str	r2, [r3, #20]
   10f94:	e12fff1e 	bx	lr

00010f98 <CBcmMailBox::CBcmMailBox(unsigned int)>:
   10f98:	e3a02000 	mov	r2, #0
   10f9c:	e8800006 	stm	r0, {r1, r2}
   10fa0:	e12fff1e 	bx	lr

00010fa4 <CBcmMailBox::~CBcmMailBox()>:
   10fa4:	e12fff1e 	bx	lr

00010fa8 <CBcmMailBox::Flush()>:
   10fa8:	e92d4010 	push	{r4, lr}
   10fac:	e3a04a0b 	mov	r4, #45056	; 0xb000
   10fb0:	e3434f00 	movt	r4, #16128	; 0x3f00
   10fb4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10fb8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10fbc:	18bd8010 	popne	{r4, pc}
   10fc0:	e3a00014 	mov	r0, #20
   10fc4:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   10fc8:	ebffe846 	bl	b0e8 <CTimer::SimpleMsDelay(unsigned int)>
   10fcc:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   10fd0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10fd4:	0afffff9 	beq	10fc0 <CBcmMailBox::Flush()+0x18>
   10fd8:	e8bd8010 	pop	{r4, pc}

00010fdc <CBcmMailBox::Read()>:
   10fdc:	e5901000 	ldr	r1, [r0]
   10fe0:	e3a02a0b 	mov	r2, #45056	; 0xb000
   10fe4:	e3432f00 	movt	r2, #16128	; 0x3f00
   10fe8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   10fec:	e3130101 	tst	r3, #1073741824	; 0x40000000
   10ff0:	1afffffc 	bne	10fe8 <CBcmMailBox::Read()+0xc>
   10ff4:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   10ff8:	e200300f 	and	r3, r0, #15
   10ffc:	e1510003 	cmp	r1, r3
   11000:	1afffff8 	bne	10fe8 <CBcmMailBox::Read()+0xc>
   11004:	e3c0000f 	bic	r0, r0, #15
   11008:	e12fff1e 	bx	lr

0001100c <CBcmMailBox::Write(unsigned int)>:
   1100c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   11010:	e3432f00 	movt	r2, #16128	; 0x3f00
   11014:	e92d4070 	push	{r4, r5, r6, lr}
   11018:	e1a05000 	mov	r5, r0
   1101c:	e1a04001 	mov	r4, r1
   11020:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   11024:	e3530000 	cmp	r3, #0
   11028:	bafffffc 	blt	11020 <CBcmMailBox::Write(unsigned int)+0x14>
   1102c:	e314000f 	tst	r4, #15
   11030:	0a000005 	beq	1104c <CBcmMailBox::Write(unsigned int)+0x40>
   11034:	e3031750 	movw	r1, #14160	; 0x3750
   11038:	e3030760 	movw	r0, #14176	; 0x3760
   1103c:	e3401001 	movt	r1, #1
   11040:	e3400001 	movt	r0, #1
   11044:	e3a0205a 	mov	r2, #90	; 0x5a
   11048:	ebfff004 	bl	d060 <assertion_failed>
   1104c:	e5952000 	ldr	r2, [r5]
   11050:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11054:	e3433f00 	movt	r3, #16128	; 0x3f00
   11058:	e1844002 	orr	r4, r4, r2
   1105c:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   11060:	e8bd8070 	pop	{r4, r5, r6, pc}

00011064 <CBcmMailBox::WriteRead(unsigned int)>:
   11064:	e92d4070 	push	{r4, r5, r6, lr}
   11068:	e1a05000 	mov	r5, r0
   1106c:	e5900004 	ldr	r0, [r0, #4]
   11070:	e1a06001 	mov	r6, r1
   11074:	e3500000 	cmp	r0, #0
   11078:	1a00001e 	bne	110f8 <CBcmMailBox::WriteRead(unsigned int)+0x94>
   1107c:	e3a04a0b 	mov	r4, #45056	; 0xb000
   11080:	e3434f00 	movt	r4, #16128	; 0x3f00
   11084:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   11088:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1108c:	1a000005 	bne	110a8 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   11090:	e3a00014 	mov	r0, #20
   11094:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   11098:	ebffe812 	bl	b0e8 <CTimer::SimpleMsDelay(unsigned int)>
   1109c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   110a0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   110a4:	0afffff9 	beq	11090 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   110a8:	e1a00005 	mov	r0, r5
   110ac:	e1a01006 	mov	r1, r6
   110b0:	ebffffd5 	bl	1100c <CBcmMailBox::Write(unsigned int)>
   110b4:	e5950000 	ldr	r0, [r5]
   110b8:	e3a02a0b 	mov	r2, #45056	; 0xb000
   110bc:	e3432f00 	movt	r2, #16128	; 0x3f00
   110c0:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   110c4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   110c8:	1afffffc 	bne	110c0 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   110cc:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   110d0:	e203100f 	and	r1, r3, #15
   110d4:	e1510000 	cmp	r1, r0
   110d8:	1afffff8 	bne	110c0 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   110dc:	e5952004 	ldr	r2, [r5, #4]
   110e0:	e3c3400f 	bic	r4, r3, #15
   110e4:	e3520000 	cmp	r2, #0
   110e8:	0a000000 	beq	110f0 <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   110ec:	ebffe51b 	bl	a560 <LeaveCritical>
   110f0:	e1a00004 	mov	r0, r4
   110f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   110f8:	ebffe4ea 	bl	a4a8 <EnterCritical>
   110fc:	eaffffde 	b	1107c <CBcmMailBox::WriteRead(unsigned int)+0x18>

00011100 <__aeabi_uidiv>:
   11100:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11104:	e3a02000 	mov	r2, #0
   11108:	eb000108 	bl	11530 <__Divide>
   1110c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00011110 <__aeabi_uidivmod>:
   11110:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11114:	e24dd00c 	sub	sp, sp, #12
   11118:	e28d2004 	add	r2, sp, #4
   1111c:	eb000103 	bl	11530 <__Divide>
   11120:	e59d1004 	ldr	r1, [sp, #4]
   11124:	e28dd00c 	add	sp, sp, #12
   11128:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001112c <__aeabi_idiv>:
   1112c:	ea000132 	b	115fc <__DivideInteger>

00011130 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   11130:	e5903020 	ldr	r3, [r0, #32]
   11134:	e3a01000 	mov	r1, #0
   11138:	e92d4010 	push	{r4, lr}
   1113c:	e24dd010 	sub	sp, sp, #16
   11140:	e3a02c01 	mov	r2, #256	; 0x100
   11144:	e583100c 	str	r1, [r3, #12]
   11148:	e5832010 	str	r2, [r3, #16]
   1114c:	e1a04000 	mov	r4, r0
   11150:	e28d0008 	add	r0, sp, #8
   11154:	ebffe091 	bl	93a0 <CBcmPropertyTags::CBcmPropertyTags()>
   11158:	e5942020 	ldr	r2, [r4, #32]
   1115c:	e3003408 	movw	r3, #1032	; 0x408
   11160:	e28d0008 	add	r0, sp, #8
   11164:	e58d3000 	str	r3, [sp]
   11168:	e308100b 	movw	r1, #32779	; 0x800b
   1116c:	e3003414 	movw	r3, #1044	; 0x414
   11170:	e3401004 	movt	r1, #4
   11174:	ebffe0d1 	bl	94c0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11178:	e3500000 	cmp	r0, #0
   1117c:	e28d0008 	add	r0, sp, #8
   11180:	0a000003 	beq	11194 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
   11184:	e5943020 	ldr	r3, [r4, #32]
   11188:	e593300c 	ldr	r3, [r3, #12]
   1118c:	e3530000 	cmp	r3, #0
   11190:	0a000003 	beq	111a4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
   11194:	ebffe087 	bl	93b8 <CBcmPropertyTags::~CBcmPropertyTags()>
   11198:	e3a00000 	mov	r0, #0
   1119c:	e28dd010 	add	sp, sp, #16
   111a0:	e8bd8010 	pop	{r4, pc}
   111a4:	ebffe083 	bl	93b8 <CBcmPropertyTags::~CBcmPropertyTags()>
   111a8:	e3a00001 	mov	r0, #1
   111ac:	e28dd010 	add	sp, sp, #16
   111b0:	e8bd8010 	pop	{r4, pc}

000111b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   111b4:	e92d4030 	push	{r4, r5, lr}
   111b8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   111bc:	e3510000 	cmp	r1, #0
   111c0:	13520000 	cmpne	r2, #0
   111c4:	e3a05000 	mov	r5, #0
   111c8:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
   111cc:	e1a04000 	mov	r4, r0
   111d0:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   111d4:	e8800006 	stm	r0, {r1, r2}
   111d8:	e5803010 	str	r3, [r0, #16]
   111dc:	e580e00c 	str	lr, [r0, #12]
   111e0:	e580c008 	str	ip, [r0, #8]
   111e4:	e5805014 	str	r5, [r0, #20]
   111e8:	e5805018 	str	r5, [r0, #24]
   111ec:	e580501c 	str	r5, [r0, #28]
   111f0:	e5805020 	str	r5, [r0, #32]
   111f4:	1a000011 	bne	11240 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   111f8:	e28d000c 	add	r0, sp, #12
   111fc:	ebffe067 	bl	93a0 <CBcmPropertyTags::CBcmPropertyTags()>
   11200:	e3a03014 	mov	r3, #20
   11204:	e58d5000 	str	r5, [sp]
   11208:	e28d000c 	add	r0, sp, #12
   1120c:	e3a01003 	mov	r1, #3
   11210:	e08d2003 	add	r2, sp, r3
   11214:	e3401004 	movt	r1, #4
   11218:	ebffe0a8 	bl	94c0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1121c:	e1500005 	cmp	r0, r5
   11220:	1a000027 	bne	112c4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   11224:	e3a02d0a 	mov	r2, #640	; 0x280
   11228:	e3a03e1e 	mov	r3, #480	; 0x1e0
   1122c:	e884000c 	stm	r4, {r2, r3}
   11230:	e28d000c 	add	r0, sp, #12
   11234:	ebffe05f 	bl	93b8 <CBcmPropertyTags::~CBcmPropertyTags()>
   11238:	e594c008 	ldr	ip, [r4, #8]
   1123c:	e5943010 	ldr	r3, [r4, #16]
   11240:	e35c0000 	cmp	ip, #0
   11244:	0a00001a 	beq	112b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   11248:	e594200c 	ldr	r2, [r4, #12]
   1124c:	e3520000 	cmp	r2, #0
   11250:	0a000017 	beq	112b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   11254:	e3530008 	cmp	r3, #8
   11258:	8a000007 	bhi	1127c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
   1125c:	e3000414 	movw	r0, #1044	; 0x414
   11260:	ebffe48b 	bl	a494 <operator new[](unsigned int)>
   11264:	e3a02b01 	mov	r2, #1024	; 0x400
   11268:	e3a01000 	mov	r1, #0
   1126c:	e5840020 	str	r0, [r4, #32]
   11270:	e2800014 	add	r0, r0, #20
   11274:	ebffe7f3 	bl	b248 <memset>
   11278:	e5943010 	ldr	r3, [r4, #16]
   1127c:	e5945000 	ldr	r5, [r4]
   11280:	e303282c 	movw	r2, #14380	; 0x382c
   11284:	e594e004 	ldr	lr, [r4, #4]
   11288:	e3402001 	movt	r2, #1
   1128c:	e594c008 	ldr	ip, [r4, #8]
   11290:	e1a00004 	mov	r0, r4
   11294:	e594100c 	ldr	r1, [r4, #12]
   11298:	e582500c 	str	r5, [r2, #12]
   1129c:	e582e010 	str	lr, [r2, #16]
   112a0:	e582c020 	str	ip, [r2, #32]
   112a4:	e5821024 	str	r1, [r2, #36]	; 0x24
   112a8:	e5823034 	str	r3, [r2, #52]	; 0x34
   112ac:	e28dd02c 	add	sp, sp, #44	; 0x2c
   112b0:	e8bd8030 	pop	{r4, r5, pc}
   112b4:	e8940006 	ldm	r4, {r1, r2}
   112b8:	e5841008 	str	r1, [r4, #8]
   112bc:	e584200c 	str	r2, [r4, #12]
   112c0:	eaffffe3 	b	11254 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   112c4:	e59d2020 	ldr	r2, [sp, #32]
   112c8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   112cc:	e2420d0a 	sub	r0, r2, #640	; 0x280
   112d0:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   112d4:	e5842000 	str	r2, [r4]
   112d8:	e3510f96 	cmp	r1, #600	; 0x258
   112dc:	93500c05 	cmpls	r0, #1280	; 0x500
   112e0:	e5843004 	str	r3, [r4, #4]
   112e4:	9affffd1 	bls	11230 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   112e8:	eaffffcd 	b	11224 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

000112ec <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   112ec:	e92d4010 	push	{r4, lr}
   112f0:	e3a01014 	mov	r1, #20
   112f4:	e1a04000 	mov	r4, r0
   112f8:	e5900020 	ldr	r0, [r0, #32]
   112fc:	ebffe467 	bl	a4a0 <operator delete(void*, unsigned int)>
   11300:	e1a00004 	mov	r0, r4
   11304:	e8bd8010 	pop	{r4, pc}

00011308 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   11308:	e5903010 	ldr	r3, [r0, #16]
   1130c:	e3530008 	cmp	r3, #8
   11310:	812fff1e 	bxhi	lr
   11314:	e5900020 	ldr	r0, [r0, #32]
   11318:	e1a03982 	lsl	r3, r2, #19
   1131c:	e1a0c5a2 	lsr	ip, r2, #11
   11320:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   11324:	e0801101 	add	r1, r0, r1, lsl #2
   11328:	e1a02282 	lsl	r2, r2, #5
   1132c:	e183318c 	orr	r3, r3, ip, lsl #3
   11330:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   11334:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   11338:	e1822003 	orr	r2, r2, r3
   1133c:	e5812014 	str	r2, [r1, #20]
   11340:	e12fff1e 	bx	lr

00011344 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   11344:	e5903010 	ldr	r3, [r0, #16]
   11348:	e3530008 	cmp	r3, #8
   1134c:	95903020 	ldrls	r3, [r0, #32]
   11350:	90831101 	addls	r1, r3, r1, lsl #2
   11354:	95812014 	strls	r2, [r1, #20]
   11358:	e12fff1e 	bx	lr

0001135c <CBcmFrameBuffer::Initialize()>:
   1135c:	e92d4070 	push	{r4, r5, r6, lr}
   11360:	e24dd008 	sub	sp, sp, #8
   11364:	e303682c 	movw	r6, #14380	; 0x382c
   11368:	e3406001 	movt	r6, #1
   1136c:	e1a05000 	mov	r5, r0
   11370:	e1a0000d 	mov	r0, sp
   11374:	ebffe009 	bl	93a0 <CBcmPropertyTags::CBcmPropertyTags()>
   11378:	e1a01006 	mov	r1, r6
   1137c:	e1a0000d 	mov	r0, sp
   11380:	e3a02070 	mov	r2, #112	; 0x70
   11384:	ebffe010 	bl	93cc <CBcmPropertyTags::GetTags(void*, unsigned int)>
   11388:	e2504000 	subs	r4, r0, #0
   1138c:	0a00001e 	beq	1140c <CBcmFrameBuffer::Initialize()+0xb0>
   11390:	e596400c 	ldr	r4, [r6, #12]
   11394:	e3540000 	cmp	r4, #0
   11398:	0a00001b 	beq	1140c <CBcmFrameBuffer::Initialize()+0xb0>
   1139c:	e5964010 	ldr	r4, [r6, #16]
   113a0:	e3540000 	cmp	r4, #0
   113a4:	0a000018 	beq	1140c <CBcmFrameBuffer::Initialize()+0xb0>
   113a8:	e5964020 	ldr	r4, [r6, #32]
   113ac:	e3540000 	cmp	r4, #0
   113b0:	0a000015 	beq	1140c <CBcmFrameBuffer::Initialize()+0xb0>
   113b4:	e5964024 	ldr	r4, [r6, #36]	; 0x24
   113b8:	e3540000 	cmp	r4, #0
   113bc:	0a000012 	beq	1140c <CBcmFrameBuffer::Initialize()+0xb0>
   113c0:	e5964034 	ldr	r4, [r6, #52]	; 0x34
   113c4:	e3540000 	cmp	r4, #0
   113c8:	0a00000f 	beq	1140c <CBcmFrameBuffer::Initialize()+0xb0>
   113cc:	e5964058 	ldr	r4, [r6, #88]	; 0x58
   113d0:	e3540000 	cmp	r4, #0
   113d4:	0a00000c 	beq	1140c <CBcmFrameBuffer::Initialize()+0xb0>
   113d8:	e5951010 	ldr	r1, [r5, #16]
   113dc:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   113e0:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
   113e4:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
   113e8:	e3510008 	cmp	r1, #8
   113ec:	e5854014 	str	r4, [r5, #20]
   113f0:	e5852018 	str	r2, [r5, #24]
   113f4:	83a04001 	movhi	r4, #1
   113f8:	e585301c 	str	r3, [r5, #28]
   113fc:	8a000002 	bhi	1140c <CBcmFrameBuffer::Initialize()+0xb0>
   11400:	e1a00005 	mov	r0, r5
   11404:	ebffff49 	bl	11130 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   11408:	e1a04000 	mov	r4, r0
   1140c:	e1a0000d 	mov	r0, sp
   11410:	ebffdfe8 	bl	93b8 <CBcmPropertyTags::~CBcmPropertyTags()>
   11414:	e1a00004 	mov	r0, r4
   11418:	e28dd008 	add	sp, sp, #8
   1141c:	e8bd8070 	pop	{r4, r5, r6, pc}

00011420 <CBcmFrameBuffer::GetWidth() const>:
   11420:	e5900000 	ldr	r0, [r0]
   11424:	e12fff1e 	bx	lr

00011428 <CBcmFrameBuffer::GetHeight() const>:
   11428:	e5900004 	ldr	r0, [r0, #4]
   1142c:	e12fff1e 	bx	lr

00011430 <CBcmFrameBuffer::GetVirtWidth() const>:
   11430:	e5900008 	ldr	r0, [r0, #8]
   11434:	e12fff1e 	bx	lr

00011438 <CBcmFrameBuffer::GetVirtHeight() const>:
   11438:	e590000c 	ldr	r0, [r0, #12]
   1143c:	e12fff1e 	bx	lr

00011440 <CBcmFrameBuffer::GetPitch() const>:
   11440:	e590001c 	ldr	r0, [r0, #28]
   11444:	e12fff1e 	bx	lr

00011448 <CBcmFrameBuffer::GetDepth() const>:
   11448:	e5900010 	ldr	r0, [r0, #16]
   1144c:	e12fff1e 	bx	lr

00011450 <CBcmFrameBuffer::GetBuffer() const>:
   11450:	e5900014 	ldr	r0, [r0, #20]
   11454:	e12fff1e 	bx	lr

00011458 <CBcmFrameBuffer::GetSize() const>:
   11458:	e5900018 	ldr	r0, [r0, #24]
   1145c:	e12fff1e 	bx	lr

00011460 <CBcmFrameBuffer::UpdatePalette()>:
   11460:	e5903010 	ldr	r3, [r0, #16]
   11464:	e3530008 	cmp	r3, #8
   11468:	9a000001 	bls	11474 <CBcmFrameBuffer::UpdatePalette()+0x14>
   1146c:	e3a00001 	mov	r0, #1
   11470:	e12fff1e 	bx	lr
   11474:	eaffff2d 	b	11130 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00011478 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   11478:	e92d4070 	push	{r4, r5, r6, lr}
   1147c:	e24dd028 	sub	sp, sp, #40	; 0x28
   11480:	e28d000c 	add	r0, sp, #12
   11484:	e1a05001 	mov	r5, r1
   11488:	e1a06002 	mov	r6, r2
   1148c:	ebffdfc3 	bl	93a0 <CBcmPropertyTags::CBcmPropertyTags()>
   11490:	e3a03008 	mov	r3, #8
   11494:	e28d000c 	add	r0, sp, #12
   11498:	e58d3000 	str	r3, [sp]
   1149c:	e3081009 	movw	r1, #32777	; 0x8009
   114a0:	e3a03014 	mov	r3, #20
   114a4:	e3401004 	movt	r1, #4
   114a8:	e08d2003 	add	r2, sp, r3
   114ac:	e58d5020 	str	r5, [sp, #32]
   114b0:	e58d6024 	str	r6, [sp, #36]	; 0x24
   114b4:	ebffe001 	bl	94c0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   114b8:	e2504000 	subs	r4, r0, #0
   114bc:	0a000006 	beq	114dc <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   114c0:	e59d3020 	ldr	r3, [sp, #32]
   114c4:	e1550003 	cmp	r5, r3
   114c8:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   114cc:	13a04000 	movne	r4, #0
   114d0:	00444006 	subeq	r4, r4, r6
   114d4:	016f4f14 	clzeq	r4, r4
   114d8:	01a042a4 	lsreq	r4, r4, #5
   114dc:	e28d000c 	add	r0, sp, #12
   114e0:	ebffdfb4 	bl	93b8 <CBcmPropertyTags::~CBcmPropertyTags()>
   114e4:	e1a00004 	mov	r0, r4
   114e8:	e28dd028 	add	sp, sp, #40	; 0x28
   114ec:	e8bd8070 	pop	{r4, r5, r6, pc}

000114f0 <CDevice::~CDevice()>:
   114f0:	e12fff1e 	bx	lr

000114f4 <CDevice::Read(void*, unsigned int)>:
   114f4:	e3e00000 	mvn	r0, #0
   114f8:	e12fff1e 	bx	lr

000114fc <CDevice::Seek(unsigned long long)>:
   114fc:	e3e00000 	mvn	r0, #0
   11500:	e3e01000 	mvn	r1, #0
   11504:	e12fff1e 	bx	lr

00011508 <CDevice::~CDevice()>:
   11508:	e92d4010 	push	{r4, lr}
   1150c:	e3a01004 	mov	r1, #4
   11510:	e1a04000 	mov	r4, r0
   11514:	ebffe3e1 	bl	a4a0 <operator delete(void*, unsigned int)>
   11518:	e1a00004 	mov	r0, r4
   1151c:	e8bd8010 	pop	{r4, pc}

00011520 <CDevice::CDevice()>:
   11520:	e59f3004 	ldr	r3, [pc, #4]	; 1152c <CDevice::CDevice()+0xc>
   11524:	e5803000 	str	r3, [r0]
   11528:	e12fff1e 	bx	lr
   1152c:	0001377c 	.word	0x0001377c

00011530 <__Divide>:
   11530:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11534:	e2514000 	subs	r4, r1, #0
   11538:	e1a06000 	mov	r6, r0
   1153c:	e1a07002 	mov	r7, r2
   11540:	0a000021 	beq	115cc <__Divide+0x9c>
   11544:	e3a03000 	mov	r3, #0
   11548:	e3a05000 	mov	r5, #0
   1154c:	e1530005 	cmp	r3, r5
   11550:	e1a02004 	mov	r2, r4
   11554:	01520006 	cmpeq	r2, r6
   11558:	e1a04006 	mov	r4, r6
   1155c:	2a000024 	bcs	115f4 <__Divide+0xc4>
   11560:	e3a01001 	mov	r1, #1
   11564:	ea000000 	b	1156c <__Divide+0x3c>
   11568:	e1a01000 	mov	r1, r0
   1156c:	e0922002 	adds	r2, r2, r2
   11570:	e2810001 	add	r0, r1, #1
   11574:	e0a33003 	adc	r3, r3, r3
   11578:	e1530005 	cmp	r3, r5
   1157c:	01520004 	cmpeq	r2, r4
   11580:	3afffff8 	bcc	11568 <__Divide+0x38>
   11584:	e3500000 	cmp	r0, #0
   11588:	0a00000c 	beq	115c0 <__Divide+0x90>
   1158c:	e3a00000 	mov	r0, #0
   11590:	e1550003 	cmp	r5, r3
   11594:	e2411001 	sub	r1, r1, #1
   11598:	01540002 	cmpeq	r4, r2
   1159c:	e1a00080 	lsl	r0, r0, #1
   115a0:	20466002 	subcs	r6, r6, r2
   115a4:	23800001 	orrcs	r0, r0, #1
   115a8:	e1b030a3 	lsrs	r3, r3, #1
   115ac:	e1a02062 	rrx	r2, r2
   115b0:	e3710001 	cmn	r1, #1
   115b4:	e1a04006 	mov	r4, r6
   115b8:	e3a05000 	mov	r5, #0
   115bc:	1afffff3 	bne	11590 <__Divide+0x60>
   115c0:	e3570000 	cmp	r7, #0
   115c4:	15876000 	strne	r6, [r7]
   115c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   115cc:	e3a0201f 	mov	r2, #31
   115d0:	e3031790 	movw	r1, #14224	; 0x3790
   115d4:	e30301ac 	movw	r0, #12716	; 0x31ac
   115d8:	e3401001 	movt	r1, #1
   115dc:	e3400001 	movt	r0, #1
   115e0:	ebffee9e 	bl	d060 <assertion_failed>
   115e4:	ebfff789 	bl	f410 <CExceptionHandler::Get()>
   115e8:	e1a01004 	mov	r1, r4
   115ec:	ebfff73f 	bl	f2f0 <CExceptionHandler::Throw(unsigned int)>
   115f0:	eaffffd3 	b	11544 <__Divide+0x14>
   115f4:	e3a01000 	mov	r1, #0
   115f8:	eaffffe3 	b	1158c <__Divide+0x5c>

000115fc <__DivideInteger>:
   115fc:	e2502000 	subs	r2, r0, #0
   11600:	e92d4010 	push	{r4, lr}
   11604:	ba000004 	blt	1161c <__DivideInteger+0x20>
   11608:	e3510000 	cmp	r1, #0
   1160c:	ba00000e 	blt	1164c <__DivideInteger+0x50>
   11610:	e3a02000 	mov	r2, #0
   11614:	e8bd4010 	pop	{r4, lr}
   11618:	eaffffc4 	b	11530 <__Divide>
   1161c:	e3510000 	cmp	r1, #0
   11620:	ba000004 	blt	11638 <__DivideInteger+0x3c>
   11624:	e2620000 	rsb	r0, r2, #0
   11628:	e3a02000 	mov	r2, #0
   1162c:	ebffffbf 	bl	11530 <__Divide>
   11630:	e2600000 	rsb	r0, r0, #0
   11634:	e8bd8010 	pop	{r4, pc}
   11638:	e2620000 	rsb	r0, r2, #0
   1163c:	e2611000 	rsb	r1, r1, #0
   11640:	e3a02000 	mov	r2, #0
   11644:	e8bd4010 	pop	{r4, lr}
   11648:	eaffffb8 	b	11530 <__Divide>
   1164c:	e2611000 	rsb	r1, r1, #0
   11650:	e3a02000 	mov	r2, #0
   11654:	ebffffb5 	bl	11530 <__Divide>
   11658:	e2600000 	rsb	r0, r0, #0
   1165c:	e8bd8010 	pop	{r4, pc}
