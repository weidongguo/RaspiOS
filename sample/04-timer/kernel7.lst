
kernel7.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea0003c2 	b	8f70 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

00008070 <main>:
    8070:	e92d4010 	push	{r4, lr}
    8074:	e24ddb07 	sub	sp, sp, #7168	; 0x1c00
    8078:	e24dd020 	sub	sp, sp, #32
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb000016 	bl	80e0 <CKernel::CKernel()>
    8084:	e28d0004 	add	r0, sp, #4
    8088:	eb00004a 	bl	81b8 <CKernel::Initialize()>
    808c:	e2504000 	subs	r4, r0, #0
    8090:	0a00000e 	beq	80d0 <main+0x60>
    8094:	e28d0004 	add	r0, sp, #4
    8098:	eb00006e 	bl	8258 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	0a000007 	beq	80c4 <main+0x54>
    80a4:	eb0003a3 	bl	8f38 <halt>
    80a8:	e3a04000 	mov	r4, #0
    80ac:	e28d0004 	add	r0, sp, #4
    80b0:	eb000097 	bl	8314 <CKernel::~CKernel()>
    80b4:	e1a00004 	mov	r0, r4
    80b8:	e28ddb07 	add	sp, sp, #7168	; 0x1c00
    80bc:	e28dd020 	add	sp, sp, #32
    80c0:	e8bd8010 	pop	{r4, pc}
    80c4:	eb0003a0 	bl	8f4c <reboot>
    80c8:	e3a04001 	mov	r4, #1
    80cc:	eafffff6 	b	80ac <main+0x3c>
    80d0:	eb000398 	bl	8f38 <halt>
    80d4:	eafffff4 	b	80ac <main+0x3c>

000080d8 <CKernel::TimerHandler(unsigned int, void*, void*)>:
    80d8:	e3a03605 	mov	r3, #5242880	; 0x500000
    80dc:	e12fff13 	bx	r3

000080e0 <CKernel::CKernel()>:
    80e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80e4:	e2808010 	add	r8, r0, #16
    80e8:	e3a01001 	mov	r1, #1
    80ec:	e280601c 	add	r6, r0, #28
    80f0:	e1a04000 	mov	r4, r0
    80f4:	eb000338 	bl	8ddc <CMemorySystem::CMemorySystem(int)>
    80f8:	e1a00008 	mov	r0, r8
    80fc:	e2847d66 	add	r7, r4, #6528	; 0x1980
    8100:	eb0000c6 	bl	8420 <CActLED::CActLED()>
    8104:	e1a00006 	mov	r0, r6
    8108:	eb000665 	bl	9aa4 <CKernelOptions::CKernelOptions()>
    810c:	e2840e85 	add	r0, r4, #2128	; 0x850
    8110:	e280000c 	add	r0, r0, #12
    8114:	e2877018 	add	r7, r7, #24
    8118:	eb000c6f 	bl	b2dc <CDeviceNameService::CDeviceNameService()>
    811c:	e1a00006 	mov	r0, r6
    8120:	eb00062b 	bl	99d4 <CKernelOptions::GetWidth() const>
    8124:	e1a05000 	mov	r5, r0
    8128:	e1a00006 	mov	r0, r6
    812c:	eb00062a 	bl	99dc <CKernelOptions::GetHeight() const>
    8130:	e3a03000 	mov	r3, #0
    8134:	e1a01005 	mov	r1, r5
    8138:	e2845d6f 	add	r5, r4, #7104	; 0x1bc0
    813c:	e2855018 	add	r5, r5, #24
    8140:	e1a02000 	mov	r2, r0
    8144:	e2840e86 	add	r0, r4, #2144	; 0x860
    8148:	e2800004 	add	r0, r0, #4
    814c:	eb000809 	bl	a178 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8150:	e3a02000 	mov	r2, #0
    8154:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8158:	e1a01002 	mov	r1, r2
    815c:	e2800004 	add	r0, r0, #4
    8160:	eb000e45 	bl	ba7c <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>
    8164:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8168:	e2800014 	add	r0, r0, #20
    816c:	eb00138e 	bl	cfac <CExceptionHandler::CExceptionHandler()>
    8170:	e1a00007 	mov	r0, r7
    8174:	eb001438 	bl	d25c <CInterruptSystem::CInterruptSystem()>
    8178:	e1a01007 	mov	r1, r7
    817c:	e1a00005 	mov	r0, r5
    8180:	eb0003a5 	bl	901c <CTimer::CTimer(CInterruptSystem*)>
    8184:	e1a00006 	mov	r0, r6
    8188:	eb000618 	bl	99f0 <CKernelOptions::GetLogLevel() const>
    818c:	e1a02005 	mov	r2, r5
    8190:	e1a01000 	mov	r1, r0
    8194:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8198:	eb000cbd 	bl	b494 <CLogger::CLogger(unsigned int, CTimer*)>
    819c:	e1a00008 	mov	r0, r8
    81a0:	e3a03f7d 	mov	r3, #500	; 0x1f4
    81a4:	e3a020c8 	mov	r2, #200	; 0xc8
    81a8:	e3a01005 	mov	r1, #5
    81ac:	eb0000e2 	bl	853c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    81b0:	e1a00004 	mov	r0, r4
    81b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000081b8 <CKernel::Initialize()>:
    81b8:	e92d4070 	push	{r4, r5, r6, lr}
    81bc:	e2804e86 	add	r4, r0, #2144	; 0x860
    81c0:	e2844004 	add	r4, r4, #4
    81c4:	e1a05000 	mov	r5, r0
    81c8:	e1a00004 	mov	r0, r4
    81cc:	eb000b97 	bl	b030 <CScreenDevice::Initialize()>
    81d0:	e3500000 	cmp	r0, #0
    81d4:	1a000001 	bne	81e0 <CKernel::Initialize()+0x28>
    81d8:	e3a00000 	mov	r0, #0
    81dc:	e8bd8070 	pop	{r4, r5, r6, pc}
    81e0:	e2850d23 	add	r0, r5, #2240	; 0x8c0
    81e4:	e3a01cc2 	mov	r1, #49664	; 0xc200
    81e8:	e2800004 	add	r0, r0, #4
    81ec:	e3401001 	movt	r1, #1
    81f0:	eb000e50 	bl	bb38 <CSerialDevice::Initialize(unsigned int)>
    81f4:	e3500000 	cmp	r0, #0
    81f8:	0afffff6 	beq	81d8 <CKernel::Initialize()+0x20>
    81fc:	e285001c 	add	r0, r5, #28
    8200:	eb0005f7 	bl	99e4 <CKernelOptions::GetLogDevice() const>
    8204:	e3a02000 	mov	r2, #0
    8208:	e1a01000 	mov	r1, r0
    820c:	e2850e85 	add	r0, r5, #2128	; 0x850
    8210:	e280000c 	add	r0, r0, #12
    8214:	eb000c6f 	bl	b3d8 <CDeviceNameService::GetDevice(char const*, int)>
    8218:	e3500000 	cmp	r0, #0
    821c:	11a01000 	movne	r1, r0
    8220:	01a01004 	moveq	r1, r4
    8224:	e2850b07 	add	r0, r5, #7168	; 0x1c00
    8228:	eb000da0 	bl	b8b0 <CLogger::Initialize(CDevice*)>
    822c:	e3500000 	cmp	r0, #0
    8230:	0affffe8 	beq	81d8 <CKernel::Initialize()+0x20>
    8234:	e2850d66 	add	r0, r5, #6528	; 0x1980
    8238:	e2800018 	add	r0, r0, #24
    823c:	eb001419 	bl	d2a8 <CInterruptSystem::Initialize()>
    8240:	e3500000 	cmp	r0, #0
    8244:	0affffe3 	beq	81d8 <CKernel::Initialize()+0x20>
    8248:	e2850d6f 	add	r0, r5, #7104	; 0x1bc0
    824c:	e2800018 	add	r0, r0, #24
    8250:	e8bd4070 	pop	{r4, r5, r6, lr}
    8254:	ea000549 	b	9780 <CTimer::Initialize()>

00008258 <CKernel::Run()>:
    8258:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    825c:	e2808b07 	add	r8, r0, #7168	; 0x1c00
    8260:	e2805d6f 	add	r5, r0, #7104	; 0x1bc0
    8264:	e24dd008 	sub	sp, sp, #8
    8268:	e1a00008 	mov	r0, r8
    826c:	e3a02003 	mov	r2, #3
    8270:	e2855018 	add	r5, r5, #24
    8274:	e30e3f8c 	movw	r3, #61324	; 0xef8c
    8278:	e30e1f84 	movw	r1, #61316	; 0xef84
    827c:	e3403000 	movt	r3, #0
    8280:	e3401000 	movt	r1, #0
    8284:	e30e7fe4 	movw	r7, #61412	; 0xefe4
    8288:	eb000d7c 	bl	b880 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    828c:	e1a00008 	mov	r0, r8
    8290:	e3a02003 	mov	r2, #3
    8294:	e30e3fb0 	movw	r3, #61360	; 0xefb0
    8298:	e30e1f84 	movw	r1, #61316	; 0xef84
    829c:	e3403000 	movt	r3, #0
    82a0:	e3401000 	movt	r1, #0
    82a4:	e30e6f84 	movw	r6, #61316	; 0xef84
    82a8:	eb000d74 	bl	b880 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    82ac:	e3a03000 	mov	r3, #0
    82b0:	e30015dc 	movw	r1, #1500	; 0x5dc
    82b4:	e58d3000 	str	r3, [sp]
    82b8:	e1a00005 	mov	r0, r5
    82bc:	e30820d8 	movw	r2, #32984	; 0x80d8
    82c0:	e3402000 	movt	r2, #0
    82c4:	e3407000 	movt	r7, #0
    82c8:	eb00043d 	bl	93c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    82cc:	e1a00005 	mov	r0, r5
    82d0:	eb0003b6 	bl	91b0 <CTimer::GetTime() const>
    82d4:	e3406000 	movt	r6, #0
    82d8:	e1a04000 	mov	r4, r0
    82dc:	e1a00005 	mov	r0, r5
    82e0:	eb0003b2 	bl	91b0 <CTimer::GetTime() const>
    82e4:	e1540000 	cmp	r4, r0
    82e8:	0afffffb 	beq	82dc <CKernel::Run()+0x84>
    82ec:	e1a00005 	mov	r0, r5
    82f0:	eb0003ae 	bl	91b0 <CTimer::GetTime() const>
    82f4:	e1a03007 	mov	r3, r7
    82f8:	e3a02003 	mov	r2, #3
    82fc:	e1a01006 	mov	r1, r6
    8300:	e1a04000 	mov	r4, r0
    8304:	e58d0000 	str	r0, [sp]
    8308:	e1a00008 	mov	r0, r8
    830c:	eb000d5b 	bl	b880 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8310:	eafffff1 	b	82dc <CKernel::Run()+0x84>

00008314 <CKernel::~CKernel()>:
    8314:	e92d4010 	push	{r4, lr}
    8318:	e1a04000 	mov	r4, r0
    831c:	e2800b07 	add	r0, r0, #7168	; 0x1c00
    8320:	eb000c6e 	bl	b4e0 <CLogger::~CLogger()>
    8324:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    8328:	e2800018 	add	r0, r0, #24
    832c:	eb000351 	bl	9078 <CTimer::~CTimer()>
    8330:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8334:	e2800018 	add	r0, r0, #24
    8338:	eb0013d5 	bl	d294 <CInterruptSystem::~CInterruptSystem()>
    833c:	e2840d66 	add	r0, r4, #6528	; 0x1980
    8340:	e2800014 	add	r0, r0, #20
    8344:	eb001333 	bl	d018 <CExceptionHandler::~CExceptionHandler()>
    8348:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    834c:	e2800004 	add	r0, r0, #4
    8350:	eb000f47 	bl	c074 <CSerialDevice::~CSerialDevice()>
    8354:	e2840e86 	add	r0, r4, #2144	; 0x860
    8358:	e2800004 	add	r0, r0, #4
    835c:	eb000738 	bl	a044 <CScreenDevice::~CScreenDevice()>
    8360:	e2840e85 	add	r0, r4, #2128	; 0x850
    8364:	e280000c 	add	r0, r0, #12
    8368:	eb000be2 	bl	b2f8 <CDeviceNameService::~CDeviceNameService()>
    836c:	e284001c 	add	r0, r4, #28
    8370:	eb000592 	bl	99c0 <CKernelOptions::~CKernelOptions()>
    8374:	e2840010 	add	r0, r4, #16
    8378:	eb000003 	bl	838c <CActLED::~CActLED()>
    837c:	e1a00004 	mov	r0, r4
    8380:	eb000258 	bl	8ce8 <CMemorySystem::~CMemorySystem()>
    8384:	e1a00004 	mov	r0, r4
    8388:	e8bd8010 	pop	{r4, pc}

0000838c <CActLED::~CActLED()>:
    838c:	e30034fc 	movw	r3, #1276	; 0x4fc
    8390:	e3403001 	movt	r3, #1
    8394:	e3a02000 	mov	r2, #0
    8398:	e5832000 	str	r2, [r3]
    839c:	e12fff1e 	bx	lr

000083a0 <CActLED::On()>:
    83a0:	e5903000 	ldr	r3, [r0]
    83a4:	e3530000 	cmp	r3, #0
    83a8:	0a000004 	beq	83c0 <CActLED::On()+0x20>
    83ac:	e5901008 	ldr	r1, [r0, #8]
    83b0:	e1a00003 	mov	r0, r3
    83b4:	e2911000 	adds	r1, r1, #0
    83b8:	13a01001 	movne	r1, #1
    83bc:	ea0000bf 	b	86c0 <CGPIOPin::Write(unsigned int)>
    83c0:	e5903004 	ldr	r3, [r0, #4]
    83c4:	e3530000 	cmp	r3, #0
    83c8:	012fff1e 	bxeq	lr
    83cc:	e5901008 	ldr	r1, [r0, #8]
    83d0:	e1a00003 	mov	r0, r3
    83d4:	e2911000 	adds	r1, r1, #0
    83d8:	13a01001 	movne	r1, #1
    83dc:	ea001533 	b	d8b0 <CVirtualGPIOPin::Write(unsigned int)>

000083e0 <CActLED::Off()>:
    83e0:	e5903000 	ldr	r3, [r0]
    83e4:	e3530000 	cmp	r3, #0
    83e8:	0a000004 	beq	8400 <CActLED::Off()+0x20>
    83ec:	e5901008 	ldr	r1, [r0, #8]
    83f0:	e1a00003 	mov	r0, r3
    83f4:	e16f1f11 	clz	r1, r1
    83f8:	e1a012a1 	lsr	r1, r1, #5
    83fc:	ea0000af 	b	86c0 <CGPIOPin::Write(unsigned int)>
    8400:	e5903004 	ldr	r3, [r0, #4]
    8404:	e3530000 	cmp	r3, #0
    8408:	012fff1e 	bxeq	lr
    840c:	e5901008 	ldr	r1, [r0, #8]
    8410:	e1a00003 	mov	r0, r3
    8414:	e16f1f11 	clz	r1, r1
    8418:	e1a012a1 	lsr	r1, r1, #5
    841c:	ea001523 	b	d8b0 <CVirtualGPIOPin::Write(unsigned int)>

00008420 <CActLED::CActLED()>:
    8420:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8424:	e30034fc 	movw	r3, #1276	; 0x4fc
    8428:	e24dd024 	sub	sp, sp, #36	; 0x24
    842c:	e1a04000 	mov	r4, r0
    8430:	e3403001 	movt	r3, #1
    8434:	e3a05000 	mov	r5, #0
    8438:	e28d0008 	add	r0, sp, #8
    843c:	e5845000 	str	r5, [r4]
    8440:	e5845004 	str	r5, [r4, #4]
    8444:	e5834000 	str	r4, [r3]
    8448:	eb000052 	bl	8598 <CBcmPropertyTags::CBcmPropertyTags()>
    844c:	e3a03010 	mov	r3, #16
    8450:	e58d5000 	str	r5, [sp]
    8454:	e28d0008 	add	r0, sp, #8
    8458:	e3a01002 	mov	r1, #2
    845c:	e08d2003 	add	r2, sp, r3
    8460:	e3401001 	movt	r1, #1
    8464:	eb000077 	bl	8648 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8468:	e1500005 	cmp	r0, r5
    846c:	0a000011 	beq	84b8 <CActLED::CActLED()+0x98>
    8470:	e59d301c 	ldr	r3, [sp, #28]
    8474:	e3130502 	tst	r3, #8388608	; 0x800000
    8478:	1a000013 	bne	84cc <CActLED::CActLED()+0xac>
    847c:	e6ff3073 	uxth	r3, r3
    8480:	e353000f 	cmp	r3, #15
    8484:	83a06001 	movhi	r6, #1
    8488:	9a000020 	bls	8510 <CActLED::CActLED()+0xf0>
    848c:	e3a00028 	mov	r0, #40	; 0x28
    8490:	eb000281 	bl	8e9c <operator new(unsigned int)>
    8494:	e3a03000 	mov	r3, #0
    8498:	e3a02001 	mov	r2, #1
    849c:	e3a0102f 	mov	r1, #47	; 0x2f
    84a0:	e1a05000 	mov	r5, r0
    84a4:	eb0001be 	bl	8ba4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    84a8:	e5845000 	str	r5, [r4]
    84ac:	e5846008 	str	r6, [r4, #8]
    84b0:	e1a00004 	mov	r0, r4
    84b4:	ebffffc9 	bl	83e0 <CActLED::Off()>
    84b8:	e28d0008 	add	r0, sp, #8
    84bc:	eb00003b 	bl	85b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    84c0:	e1a00004 	mov	r0, r4
    84c4:	e28dd024 	add	sp, sp, #36	; 0x24
    84c8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    84cc:	e7e73253 	ubfx	r3, r3, #4, #8
    84d0:	e3530001 	cmp	r3, #1
    84d4:	9a00000d 	bls	8510 <CActLED::CActLED()+0xf0>
    84d8:	e353000c 	cmp	r3, #12
    84dc:	13530009 	cmpne	r3, #9
    84e0:	03a06001 	moveq	r6, #1
    84e4:	13a06000 	movne	r6, #0
    84e8:	e3530008 	cmp	r3, #8
    84ec:	e2266001 	eor	r6, r6, #1
    84f0:	1affffe5 	bne	848c <CActLED::CActLED()+0x6c>
    84f4:	e3a00010 	mov	r0, #16
    84f8:	eb000267 	bl	8e9c <operator new(unsigned int)>
    84fc:	e1a01005 	mov	r1, r5
    8500:	e1a07000 	mov	r7, r0
    8504:	eb0014ad 	bl	d7c0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    8508:	e5847004 	str	r7, [r4, #4]
    850c:	eaffffe6 	b	84ac <CActLED::CActLED()+0x8c>
    8510:	e3a00028 	mov	r0, #40	; 0x28
    8514:	eb000260 	bl	8e9c <operator new(unsigned int)>
    8518:	e3a03000 	mov	r3, #0
    851c:	e3a02001 	mov	r2, #1
    8520:	e3a01010 	mov	r1, #16
    8524:	e1a05000 	mov	r5, r0
    8528:	eb00019d 	bl	8ba4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    852c:	e3a03000 	mov	r3, #0
    8530:	e5845000 	str	r5, [r4]
    8534:	e5843008 	str	r3, [r4, #8]
    8538:	eaffffdc 	b	84b0 <CActLED::CActLED()+0x90>

0000853c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    853c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8540:	e2516000 	subs	r6, r1, #0
    8544:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8548:	e1a08003 	mov	r8, r3
    854c:	e1a07002 	mov	r7, r2
    8550:	e1a05000 	mov	r5, r0
    8554:	e3a04001 	mov	r4, #1
    8558:	e1a00005 	mov	r0, r5
    855c:	e2844001 	add	r4, r4, #1
    8560:	ebffff8e 	bl	83a0 <CActLED::On()>
    8564:	e1a00007 	mov	r0, r7
    8568:	eb000499 	bl	97d4 <CTimer::SimpleMsDelay(unsigned int)>
    856c:	e1a00005 	mov	r0, r5
    8570:	ebffff9a 	bl	83e0 <CActLED::Off()>
    8574:	e1a00008 	mov	r0, r8
    8578:	eb000495 	bl	97d4 <CTimer::SimpleMsDelay(unsigned int)>
    857c:	e1560004 	cmp	r6, r4
    8580:	2afffff4 	bcs	8558 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    8584:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008588 <CActLED::Get()>:
    8588:	e30034fc 	movw	r3, #1276	; 0x4fc
    858c:	e3403001 	movt	r3, #1
    8590:	e5930000 	ldr	r0, [r3]
    8594:	e12fff1e 	bx	lr

00008598 <CBcmPropertyTags::CBcmPropertyTags()>:
    8598:	e92d4010 	push	{r4, lr}
    859c:	e3a01008 	mov	r1, #8
    85a0:	e1a04000 	mov	r4, r0
    85a4:	eb001752 	bl	e2f4 <CBcmMailBox::CBcmMailBox(unsigned int)>
    85a8:	e1a00004 	mov	r0, r4
    85ac:	e8bd8010 	pop	{r4, pc}

000085b0 <CBcmPropertyTags::~CBcmPropertyTags()>:
    85b0:	e92d4010 	push	{r4, lr}
    85b4:	e1a04000 	mov	r4, r0
    85b8:	eb001750 	bl	e300 <CBcmMailBox::~CBcmMailBox()>
    85bc:	e1a00004 	mov	r0, r4
    85c0:	e8bd8010 	pop	{r4, pc}

000085c4 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    85c4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    85c8:	e3a04008 	mov	r4, #8
    85cc:	e3404040 	movt	r4, #64	; 0x40
    85d0:	e3a05501 	mov	r5, #4194304	; 0x400000
    85d4:	e1a06002 	mov	r6, r2
    85d8:	e282300c 	add	r3, r2, #12
    85dc:	e3a07000 	mov	r7, #0
    85e0:	e1a08000 	mov	r8, r0
    85e4:	e5853000 	str	r3, [r5]
    85e8:	e1a00004 	mov	r0, r4
    85ec:	e5857004 	str	r7, [r5, #4]
    85f0:	e1a09001 	mov	r9, r1
    85f4:	eb0004c4 	bl	990c <memcpy>
    85f8:	e7847006 	str	r7, [r4, r6]
    85fc:	f57ff04f 	dsb	sy
    8600:	e1a01007 	mov	r1, r7
    8604:	e1a00008 	mov	r0, r8
    8608:	e34c1040 	movt	r1, #49216	; 0xc040
    860c:	eb00173c 	bl	e304 <CBcmMailBox::WriteRead(unsigned int)>
    8610:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    8614:	0a000001 	beq	8620 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x5c>
    8618:	e3a00000 	mov	r0, #0
    861c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8620:	f57ff05f 	dmb	sy
    8624:	e5953004 	ldr	r3, [r5, #4]
    8628:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    862c:	1afffff9 	bne	8618 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x54>
    8630:	e1a02006 	mov	r2, r6
    8634:	e1a01004 	mov	r1, r4
    8638:	e1a00009 	mov	r0, r9
    863c:	eb0004b2 	bl	990c <memcpy>
    8640:	e3a00001 	mov	r0, #1
    8644:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00008648 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    8648:	e92d4010 	push	{r4, lr}
    864c:	e1a04002 	mov	r4, r2
    8650:	e59dc008 	ldr	ip, [sp, #8]
    8654:	e5821000 	str	r1, [r2]
    8658:	e243100c 	sub	r1, r3, #12
    865c:	e3ccc102 	bic	ip, ip, #-2147483648	; 0x80000000
    8660:	e5841004 	str	r1, [r4, #4]
    8664:	e1a02003 	mov	r2, r3
    8668:	e1a01004 	mov	r1, r4
    866c:	e584c008 	str	ip, [r4, #8]
    8670:	ebffffd3 	bl	85c4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    8674:	e3500000 	cmp	r0, #0
    8678:	08bd8010 	popeq	{r4, pc}
    867c:	e5940008 	ldr	r0, [r4, #8]
    8680:	e3500000 	cmp	r0, #0
    8684:	ba000001 	blt	8690 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x48>
    8688:	e3a00000 	mov	r0, #0
    868c:	e8bd8010 	pop	{r4, pc}
    8690:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    8694:	e5840008 	str	r0, [r4, #8]
    8698:	e2900000 	adds	r0, r0, #0
    869c:	13a00001 	movne	r0, #1
    86a0:	e8bd8010 	pop	{r4, pc}

000086a4 <CGPIOPin::~CGPIOPin()>:
    86a4:	e12fff1e 	bx	lr

000086a8 <CGPIOPin::~CGPIOPin()>:
    86a8:	e92d4010 	push	{r4, lr}
    86ac:	e3a01028 	mov	r1, #40	; 0x28
    86b0:	e1a04000 	mov	r4, r0
    86b4:	eb0001fc 	bl	8eac <operator delete(void*, unsigned int)>
    86b8:	e1a00004 	mov	r0, r4
    86bc:	e8bd8010 	pop	{r4, pc}

000086c0 <CGPIOPin::Write(unsigned int)>:
    86c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    86c4:	e3a02028 	mov	r2, #40	; 0x28
    86c8:	e590e00c 	ldr	lr, [r0, #12]
    86cc:	e3432f20 	movt	r2, #16160	; 0x3f20
    86d0:	e590c008 	ldr	ip, [r0, #8]
    86d4:	e3510000 	cmp	r1, #0
    86d8:	e3a0301c 	mov	r3, #28
    86dc:	e3433f20 	movt	r3, #16160	; 0x3f20
    86e0:	01a03002 	moveq	r3, r2
    86e4:	e5801014 	str	r1, [r0, #20]
    86e8:	e783e00c 	str	lr, [r3, ip]
    86ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000086f0 <CGPIOPin::Read() const>:
    86f0:	e5901008 	ldr	r1, [r0, #8]
    86f4:	e3a03034 	mov	r3, #52	; 0x34
    86f8:	e3433f20 	movt	r3, #16160	; 0x3f20
    86fc:	e590200c 	ldr	r2, [r0, #12]
    8700:	e7913003 	ldr	r3, [r1, r3]
    8704:	e1130002 	tst	r3, r2
    8708:	13a00001 	movne	r0, #1
    870c:	03a00000 	moveq	r0, #0
    8710:	e12fff1e 	bx	lr

00008714 <CGPIOPin::Invert()>:
    8714:	e5902014 	ldr	r2, [r0, #20]
    8718:	e3a01028 	mov	r1, #40	; 0x28
    871c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8720:	e3520001 	cmp	r2, #1
    8724:	e590e00c 	ldr	lr, [r0, #12]
    8728:	e3431f20 	movt	r1, #16160	; 0x3f20
    872c:	e590c008 	ldr	ip, [r0, #8]
    8730:	e3a0301c 	mov	r3, #28
    8734:	e3433f20 	movt	r3, #16160	; 0x3f20
    8738:	01a03001 	moveq	r3, r1
    873c:	e2222001 	eor	r2, r2, #1
    8740:	e5802014 	str	r2, [r0, #20]
    8744:	e783e00c 	str	lr, [r3, ip]
    8748:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000874c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    874c:	e580101c 	str	r1, [r0, #28]
    8750:	e1a01000 	mov	r1, r0
    8754:	e5802020 	str	r2, [r0, #32]
    8758:	e5900018 	ldr	r0, [r0, #24]
    875c:	ea0013be 	b	d65c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>

00008760 <CGPIOPin::DisconnectInterrupt()>:
    8760:	e1a01000 	mov	r1, r0
    8764:	e3a03000 	mov	r3, #0
    8768:	e580301c 	str	r3, [r0, #28]
    876c:	e5900018 	ldr	r0, [r0, #24]
    8770:	ea0013bd 	b	d66c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>

00008774 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    8774:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8778:	e3005500 	movw	r5, #1280	; 0x500
    877c:	e3405001 	movt	r5, #1
    8780:	e1a07000 	mov	r7, r0
    8784:	e5973008 	ldr	r3, [r7, #8]
    8788:	e3a0600c 	mov	r6, #12
    878c:	e5950000 	ldr	r0, [r5]
    8790:	e3a0404c 	mov	r4, #76	; 0x4c
    8794:	e3434f20 	movt	r4, #16160	; 0x3f20
    8798:	e5c71024 	strb	r1, [r7, #36]	; 0x24
    879c:	e3500000 	cmp	r0, #0
    87a0:	e0834004 	add	r4, r3, r4
    87a4:	e0060196 	mul	r6, r6, r1
    87a8:	1a000008 	bne	87d0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x5c>
    87ac:	e597200c 	ldr	r2, [r7, #12]
    87b0:	e7943006 	ldr	r3, [r4, r6]
    87b4:	e1833002 	orr	r3, r3, r2
    87b8:	e7843006 	str	r3, [r4, r6]
    87bc:	e5953000 	ldr	r3, [r5]
    87c0:	e3530000 	cmp	r3, #0
    87c4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    87c8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    87cc:	ea0001c6 	b	8eec <LeaveCritical>
    87d0:	eb0001b7 	bl	8eb4 <EnterCritical>
    87d4:	eafffff4 	b	87ac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>

000087d8 <CGPIOPin::DisableInterrupt()>:
    87d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    87dc:	e3006500 	movw	r6, #1280	; 0x500
    87e0:	e3406001 	movt	r6, #1
    87e4:	e1a05000 	mov	r5, r0
    87e8:	e5d52024 	ldrb	r2, [r5, #36]	; 0x24
    87ec:	e3a0700c 	mov	r7, #12
    87f0:	e5960000 	ldr	r0, [r6]
    87f4:	e3a0404c 	mov	r4, #76	; 0x4c
    87f8:	e5953008 	ldr	r3, [r5, #8]
    87fc:	e3434f20 	movt	r4, #16160	; 0x3f20
    8800:	e3500000 	cmp	r0, #0
    8804:	e0070297 	mul	r7, r7, r2
    8808:	e0834004 	add	r4, r3, r4
    880c:	1a00000a 	bne	883c <CGPIOPin::DisableInterrupt()+0x64>
    8810:	e7973004 	ldr	r3, [r7, r4]
    8814:	e595200c 	ldr	r2, [r5, #12]
    8818:	e1c33002 	bic	r3, r3, r2
    881c:	e7873004 	str	r3, [r7, r4]
    8820:	e5963000 	ldr	r3, [r6]
    8824:	e3530000 	cmp	r3, #0
    8828:	0a000000 	beq	8830 <CGPIOPin::DisableInterrupt()+0x58>
    882c:	eb0001ae 	bl	8eec <LeaveCritical>
    8830:	e3a03006 	mov	r3, #6
    8834:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    8838:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    883c:	eb00019c 	bl	8eb4 <EnterCritical>
    8840:	eafffff2 	b	8810 <CGPIOPin::DisableInterrupt()+0x38>

00008844 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    8844:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8848:	e3005500 	movw	r5, #1280	; 0x500
    884c:	e3405001 	movt	r5, #1
    8850:	e1a07000 	mov	r7, r0
    8854:	e5973008 	ldr	r3, [r7, #8]
    8858:	e3a0600c 	mov	r6, #12
    885c:	e5950000 	ldr	r0, [r5]
    8860:	e3a0404c 	mov	r4, #76	; 0x4c
    8864:	e3434f20 	movt	r4, #16160	; 0x3f20
    8868:	e5c71025 	strb	r1, [r7, #37]	; 0x25
    886c:	e3500000 	cmp	r0, #0
    8870:	e0834004 	add	r4, r3, r4
    8874:	e0060196 	mul	r6, r6, r1
    8878:	1a000008 	bne	88a0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x5c>
    887c:	e597200c 	ldr	r2, [r7, #12]
    8880:	e7943006 	ldr	r3, [r4, r6]
    8884:	e1833002 	orr	r3, r3, r2
    8888:	e7843006 	str	r3, [r4, r6]
    888c:	e5953000 	ldr	r3, [r5]
    8890:	e3530000 	cmp	r3, #0
    8894:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8898:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    889c:	ea000192 	b	8eec <LeaveCritical>
    88a0:	eb000183 	bl	8eb4 <EnterCritical>
    88a4:	eafffff4 	b	887c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>

000088a8 <CGPIOPin::DisableInterrupt2()>:
    88a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    88ac:	e3006500 	movw	r6, #1280	; 0x500
    88b0:	e3406001 	movt	r6, #1
    88b4:	e1a05000 	mov	r5, r0
    88b8:	e5d52025 	ldrb	r2, [r5, #37]	; 0x25
    88bc:	e3a0700c 	mov	r7, #12
    88c0:	e5960000 	ldr	r0, [r6]
    88c4:	e3a0404c 	mov	r4, #76	; 0x4c
    88c8:	e5953008 	ldr	r3, [r5, #8]
    88cc:	e3434f20 	movt	r4, #16160	; 0x3f20
    88d0:	e3500000 	cmp	r0, #0
    88d4:	e0070297 	mul	r7, r7, r2
    88d8:	e0834004 	add	r4, r3, r4
    88dc:	1a00000a 	bne	890c <CGPIOPin::DisableInterrupt2()+0x64>
    88e0:	e7973004 	ldr	r3, [r7, r4]
    88e4:	e595200c 	ldr	r2, [r5, #12]
    88e8:	e1c33002 	bic	r3, r3, r2
    88ec:	e7873004 	str	r3, [r7, r4]
    88f0:	e5963000 	ldr	r3, [r6]
    88f4:	e3530000 	cmp	r3, #0
    88f8:	0a000000 	beq	8900 <CGPIOPin::DisableInterrupt2()+0x58>
    88fc:	eb00017a 	bl	8eec <LeaveCritical>
    8900:	e3a03006 	mov	r3, #6
    8904:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    8908:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    890c:	eb000168 	bl	8eb4 <EnterCritical>
    8910:	eafffff2 	b	88e0 <CGPIOPin::DisableInterrupt2()+0x38>

00008914 <CGPIOPin::ReadAll()>:
    8914:	e3a03000 	mov	r3, #0
    8918:	e3433f20 	movt	r3, #16160	; 0x3f20
    891c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    8920:	e12fff1e 	bx	lr

00008924 <CGPIOPin::SetPullUpMode(unsigned int)>:
    8924:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8928:	e3005500 	movw	r5, #1280	; 0x500
    892c:	e3405001 	movt	r5, #1
    8930:	e1a07000 	mov	r7, r0
    8934:	e5973008 	ldr	r3, [r7, #8]
    8938:	e3a04098 	mov	r4, #152	; 0x98
    893c:	e5950000 	ldr	r0, [r5]
    8940:	e3434f20 	movt	r4, #16160	; 0x3f20
    8944:	e1a08001 	mov	r8, r1
    8948:	e0834004 	add	r4, r3, r4
    894c:	e3500000 	cmp	r0, #0
    8950:	1a000010 	bne	8998 <CGPIOPin::SetPullUpMode(unsigned int)+0x74>
    8954:	e3a06000 	mov	r6, #0
    8958:	e3436f20 	movt	r6, #16160	; 0x3f20
    895c:	e3a00005 	mov	r0, #5
    8960:	e5868094 	str	r8, [r6, #148]	; 0x94
    8964:	eb0003a9 	bl	9810 <CTimer::SimpleusDelay(unsigned int)>
    8968:	e597300c 	ldr	r3, [r7, #12]
    896c:	e3a00005 	mov	r0, #5
    8970:	e5843000 	str	r3, [r4]
    8974:	eb0003a5 	bl	9810 <CTimer::SimpleusDelay(unsigned int)>
    8978:	e3a03000 	mov	r3, #0
    897c:	e5863094 	str	r3, [r6, #148]	; 0x94
    8980:	e5843000 	str	r3, [r4]
    8984:	e5953000 	ldr	r3, [r5]
    8988:	e3530000 	cmp	r3, #0
    898c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8990:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8994:	ea000154 	b	8eec <LeaveCritical>
    8998:	eb000145 	bl	8eb4 <EnterCritical>
    899c:	eaffffec 	b	8954 <CGPIOPin::SetPullUpMode(unsigned int)+0x30>

000089a0 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    89a0:	e590c004 	ldr	ip, [r0, #4]
    89a4:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    89a8:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    89ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    89b0:	e3a0e00a 	mov	lr, #10
    89b4:	e083229c 	umull	r2, r3, ip, r2
    89b8:	e3005500 	movw	r5, #1280	; 0x500
    89bc:	e3405001 	movt	r5, #1
    89c0:	e1a07001 	mov	r7, r1
    89c4:	e5950000 	ldr	r0, [r5]
    89c8:	e1a041a3 	lsr	r4, r3, #3
    89cc:	e3500000 	cmp	r0, #0
    89d0:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    89d4:	e064c49e 	mls	r4, lr, r4, ip
    89d8:	e2833702 	add	r3, r3, #524288	; 0x80000
    89dc:	e1a06103 	lsl	r6, r3, #2
    89e0:	e0844084 	add	r4, r4, r4, lsl #1
    89e4:	1a00000c 	bne	8a1c <CGPIOPin::SetAlternateFunction(unsigned int)+0x7c>
    89e8:	e30e2ff0 	movw	r2, #61424	; 0xeff0
    89ec:	e3402000 	movt	r2, #0
    89f0:	e5963000 	ldr	r3, [r6]
    89f4:	e3a01007 	mov	r1, #7
    89f8:	e7922107 	ldr	r2, [r2, r7, lsl #2]
    89fc:	e1c33411 	bic	r3, r3, r1, lsl r4
    8a00:	e1834412 	orr	r4, r3, r2, lsl r4
    8a04:	e5864000 	str	r4, [r6]
    8a08:	e5953000 	ldr	r3, [r5]
    8a0c:	e3530000 	cmp	r3, #0
    8a10:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8a14:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8a18:	ea000133 	b	8eec <LeaveCritical>
    8a1c:	eb000124 	bl	8eb4 <EnterCritical>
    8a20:	eafffff0 	b	89e8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x48>

00008a24 <CGPIOPin::SetMode(TGPIOMode, int)>:
    8a24:	e2413004 	sub	r3, r1, #4
    8a28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a2c:	e1a06002 	mov	r6, r2
    8a30:	e6ef2073 	uxtb	r2, r3
    8a34:	e1a05000 	mov	r5, r0
    8a38:	e3520005 	cmp	r2, #5
    8a3c:	e5c01010 	strb	r1, [r0, #16]
    8a40:	9a00002b 	bls	8af4 <CGPIOPin::SetMode(TGPIOMode, int)+0xd0>
    8a44:	e2963000 	adds	r3, r6, #0
    8a48:	13a03001 	movne	r3, #1
    8a4c:	e3510001 	cmp	r1, #1
    8a50:	13a03000 	movne	r3, #0
    8a54:	e3530000 	cmp	r3, #0
    8a58:	1a00004e 	bne	8b98 <CGPIOPin::SetMode(TGPIOMode, int)+0x174>
    8a5c:	e5951004 	ldr	r1, [r5, #4]
    8a60:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    8a64:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    8a68:	e3a0c00a 	mov	ip, #10
    8a6c:	e3007500 	movw	r7, #1280	; 0x500
    8a70:	e3407001 	movt	r7, #1
    8a74:	e0832291 	umull	r2, r3, r1, r2
    8a78:	e5970000 	ldr	r0, [r7]
    8a7c:	e3500000 	cmp	r0, #0
    8a80:	e1a041a3 	lsr	r4, r3, #3
    8a84:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    8a88:	e064149c 	mls	r4, ip, r4, r1
    8a8c:	e2833702 	add	r3, r3, #524288	; 0x80000
    8a90:	e1a08103 	lsl	r8, r3, #2
    8a94:	e0844084 	add	r4, r4, r4, lsl #1
    8a98:	1a000024 	bne	8b30 <CGPIOPin::SetMode(TGPIOMode, int)+0x10c>
    8a9c:	e5d52010 	ldrb	r2, [r5, #16]
    8aa0:	e3a01007 	mov	r1, #7
    8aa4:	e5983000 	ldr	r3, [r8]
    8aa8:	e2422001 	sub	r2, r2, #1
    8aac:	e16f2f12 	clz	r2, r2
    8ab0:	e1c33411 	bic	r3, r3, r1, lsl r4
    8ab4:	e1a022a2 	lsr	r2, r2, #5
    8ab8:	e1834412 	orr	r4, r3, r2, lsl r4
    8abc:	e5884000 	str	r4, [r8]
    8ac0:	e5973000 	ldr	r3, [r7]
    8ac4:	e3530000 	cmp	r3, #0
    8ac8:	1a00001a 	bne	8b38 <CGPIOPin::SetMode(TGPIOMode, int)+0x114>
    8acc:	e3560000 	cmp	r6, #0
    8ad0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8ad4:	e5d53010 	ldrb	r3, [r5, #16]
    8ad8:	e3530003 	cmp	r3, #3
    8adc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8ae0:	ea000009 	b	8b0c <CGPIOPin::SetMode(TGPIOMode, int)+0xe8>
    8ae4:	00008b88 	.word	0x00008b88
    8ae8:	00008b68 	.word	0x00008b68
    8aec:	00008b58 	.word	0x00008b58
    8af0:	00008b48 	.word	0x00008b48
    8af4:	e3560000 	cmp	r6, #0
    8af8:	1a000004 	bne	8b10 <CGPIOPin::SetMode(TGPIOMode, int)+0xec>
    8afc:	e1a00005 	mov	r0, r5
    8b00:	e1a01003 	mov	r1, r3
    8b04:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b08:	eaffffa4 	b	89a0 <CGPIOPin::SetAlternateFunction(unsigned int)>
    8b0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b10:	e3a01000 	mov	r1, #0
    8b14:	ebffff82 	bl	8924 <CGPIOPin::SetPullUpMode(unsigned int)>
    8b18:	e5d51010 	ldrb	r1, [r5, #16]
    8b1c:	e1a00005 	mov	r0, r5
    8b20:	e2413004 	sub	r3, r1, #4
    8b24:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b28:	e1a01003 	mov	r1, r3
    8b2c:	eaffff9b 	b	89a0 <CGPIOPin::SetAlternateFunction(unsigned int)>
    8b30:	eb0000df 	bl	8eb4 <EnterCritical>
    8b34:	eaffffd8 	b	8a9c <CGPIOPin::SetMode(TGPIOMode, int)+0x78>
    8b38:	eb0000eb 	bl	8eec <LeaveCritical>
    8b3c:	e3560000 	cmp	r6, #0
    8b40:	1affffe3 	bne	8ad4 <CGPIOPin::SetMode(TGPIOMode, int)+0xb0>
    8b44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b48:	e1a00005 	mov	r0, r5
    8b4c:	e3a01001 	mov	r1, #1
    8b50:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b54:	eaffff72 	b	8924 <CGPIOPin::SetPullUpMode(unsigned int)>
    8b58:	e1a00005 	mov	r0, r5
    8b5c:	e3a01002 	mov	r1, #2
    8b60:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b64:	eaffff6e 	b	8924 <CGPIOPin::SetPullUpMode(unsigned int)>
    8b68:	e595100c 	ldr	r1, [r5, #12]
    8b6c:	e3a03028 	mov	r3, #40	; 0x28
    8b70:	e5952008 	ldr	r2, [r5, #8]
    8b74:	e3433f20 	movt	r3, #16160	; 0x3f20
    8b78:	e3a00000 	mov	r0, #0
    8b7c:	e5850014 	str	r0, [r5, #20]
    8b80:	e7821003 	str	r1, [r2, r3]
    8b84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8b88:	e1a00005 	mov	r0, r5
    8b8c:	e3a01000 	mov	r1, #0
    8b90:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8b94:	eaffff62 	b	8924 <CGPIOPin::SetPullUpMode(unsigned int)>
    8b98:	e3a01000 	mov	r1, #0
    8b9c:	ebffff60 	bl	8924 <CGPIOPin::SetPullUpMode(unsigned int)>
    8ba0:	eaffffad 	b	8a5c <CGPIOPin::SetMode(TGPIOMode, int)+0x38>

00008ba4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    8ba4:	e59fc080 	ldr	ip, [pc, #128]	; 8c2c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x88>
    8ba8:	e3510035 	cmp	r1, #53	; 0x35
    8bac:	e92d4070 	push	{r4, r5, r6, lr}
    8bb0:	e1a06002 	mov	r6, r2
    8bb4:	e5803018 	str	r3, [r0, #24]
    8bb8:	e3a02000 	mov	r2, #0
    8bbc:	e3a0300a 	mov	r3, #10
    8bc0:	e1a05001 	mov	r5, r1
    8bc4:	e5c03010 	strb	r3, [r0, #16]
    8bc8:	e1a04000 	mov	r4, r0
    8bcc:	e3a03006 	mov	r3, #6
    8bd0:	e5801004 	str	r1, [r0, #4]
    8bd4:	e580c000 	str	ip, [r0]
    8bd8:	e580201c 	str	r2, [r0, #28]
    8bdc:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    8be0:	e5c03025 	strb	r3, [r0, #37]	; 0x25
    8be4:	9a000004 	bls	8bfc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x58>
    8be8:	eb001421 	bl	dc74 <CMachineInfo::Get()>
    8bec:	e6ef1075 	uxtb	r1, r5
    8bf0:	eb001402 	bl	dc00 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    8bf4:	e1a05000 	mov	r5, r0
    8bf8:	e5840004 	str	r0, [r4, #4]
    8bfc:	e1a032a5 	lsr	r3, r5, #5
    8c00:	e3a02001 	mov	r2, #1
    8c04:	e205501f 	and	r5, r5, #31
    8c08:	e1a00004 	mov	r0, r4
    8c0c:	e1a03103 	lsl	r3, r3, #2
    8c10:	e1a05512 	lsl	r5, r2, r5
    8c14:	e1a01006 	mov	r1, r6
    8c18:	e5843008 	str	r3, [r4, #8]
    8c1c:	e584500c 	str	r5, [r4, #12]
    8c20:	ebffff7f 	bl	8a24 <CGPIOPin::SetMode(TGPIOMode, int)>
    8c24:	e1a00004 	mov	r0, r4
    8c28:	e8bd8070 	pop	{r4, r5, r6, pc}
    8c2c:	0000f010 	.word	0x0000f010

00008c30 <CGPIOPin::InterruptHandler()>:
    8c30:	e590301c 	ldr	r3, [r0, #28]
    8c34:	e5900020 	ldr	r0, [r0, #32]
    8c38:	e12fff13 	bx	r3

00008c3c <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    8c3c:	e92d4070 	push	{r4, r5, r6, lr}
    8c40:	e3006500 	movw	r6, #1280	; 0x500
    8c44:	e3406001 	movt	r6, #1
    8c48:	e3a04013 	mov	r4, #19
    8c4c:	e3404fc8 	movt	r4, #4040	; 0xfc8
    8c50:	e200501f 	and	r5, r0, #31
    8c54:	e5963000 	ldr	r3, [r6]
    8c58:	e08442a0 	add	r4, r4, r0, lsr #5
    8c5c:	e3a02001 	mov	r2, #1
    8c60:	e3530000 	cmp	r3, #0
    8c64:	e1a04104 	lsl	r4, r4, #2
    8c68:	e1a05512 	lsl	r5, r2, r5
    8c6c:	1a000011 	bne	8cb8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
    8c70:	e3a0308b 	mov	r3, #139	; 0x8b
    8c74:	e3433f20 	movt	r3, #16160	; 0x3f20
    8c78:	e1540003 	cmp	r4, r3
    8c7c:	8a00000c 	bhi	8cb4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    8c80:	e3a0108b 	mov	r1, #139	; 0x8b
    8c84:	e3431f20 	movt	r1, #16160	; 0x3f20
    8c88:	e1e02005 	mvn	r2, r5
    8c8c:	e5943000 	ldr	r3, [r4]
    8c90:	e0033002 	and	r3, r3, r2
    8c94:	e484300c 	str	r3, [r4], #12
    8c98:	e1540001 	cmp	r4, r1
    8c9c:	9afffffa 	bls	8c8c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    8ca0:	e5963000 	ldr	r3, [r6]
    8ca4:	e3530000 	cmp	r3, #0
    8ca8:	08bd8070 	popeq	{r4, r5, r6, pc}
    8cac:	e8bd4070 	pop	{r4, r5, r6, lr}
    8cb0:	ea00008d 	b	8eec <LeaveCritical>
    8cb4:	e8bd8070 	pop	{r4, r5, r6, pc}
    8cb8:	e1a00003 	mov	r0, r3
    8cbc:	eb00007c 	bl	8eb4 <EnterCritical>
    8cc0:	e3a0308b 	mov	r3, #139	; 0x8b
    8cc4:	e3433f20 	movt	r3, #16160	; 0x3f20
    8cc8:	e1540003 	cmp	r4, r3
    8ccc:	9affffeb 	bls	8c80 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
    8cd0:	eafffff2 	b	8ca0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>

00008cd4 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    8cd4:	e3003500 	movw	r3, #1280	; 0x500
    8cd8:	e3403001 	movt	r3, #1
    8cdc:	e3a02001 	mov	r2, #1
    8ce0:	e5832000 	str	r2, [r3]
    8ce4:	e12fff1e 	bx	lr

00008ce8 <CMemorySystem::~CMemorySystem()>:
    8ce8:	e5903000 	ldr	r3, [r0]
    8cec:	e92d4070 	push	{r4, r5, r6, lr}
    8cf0:	e3530000 	cmp	r3, #0
    8cf4:	e1a04000 	mov	r4, r0
    8cf8:	0a000005 	beq	8d14 <CMemorySystem::~CMemorySystem()+0x2c>
    8cfc:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    8d00:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    8d04:	e3c33005 	bic	r3, r3, #5
    8d08:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8d0c:	e3a03000 	mov	r3, #0
    8d10:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    8d14:	e594500c 	ldr	r5, [r4, #12]
    8d18:	e3550000 	cmp	r5, #0
    8d1c:	0a000004 	beq	8d34 <CMemorySystem::~CMemorySystem()+0x4c>
    8d20:	e1a00005 	mov	r0, r5
    8d24:	eb0004ba 	bl	a014 <CPageTable::~CPageTable()>
    8d28:	e1a00005 	mov	r0, r5
    8d2c:	e3a01008 	mov	r1, #8
    8d30:	eb00005d 	bl	8eac <operator delete(void*, unsigned int)>
    8d34:	e5945008 	ldr	r5, [r4, #8]
    8d38:	e3a03000 	mov	r3, #0
    8d3c:	e584300c 	str	r3, [r4, #12]
    8d40:	e1550003 	cmp	r5, r3
    8d44:	0a000004 	beq	8d5c <CMemorySystem::~CMemorySystem()+0x74>
    8d48:	e1a00005 	mov	r0, r5
    8d4c:	eb0004b0 	bl	a014 <CPageTable::~CPageTable()>
    8d50:	e1a00005 	mov	r0, r5
    8d54:	e3a01008 	mov	r1, #8
    8d58:	eb000053 	bl	8eac <operator delete(void*, unsigned int)>
    8d5c:	e1a00004 	mov	r0, r4
    8d60:	e8bd8070 	pop	{r4, r5, r6, pc}

00008d64 <CMemorySystem::GetMemSize() const>:
    8d64:	e5900004 	ldr	r0, [r0, #4]
    8d68:	e12fff1e 	bx	lr

00008d6c <CMemorySystem::EnableMMU()>:
    8d6c:	e92d4010 	push	{r4, lr}
    8d70:	e1a04000 	mov	r4, r0
    8d74:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    8d78:	e3833040 	orr	r3, r3, #64	; 0x40
    8d7c:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    8d80:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    8d84:	e3a03002 	mov	r3, #2
    8d88:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    8d8c:	e5900008 	ldr	r0, [r0, #8]
    8d90:	eb0004a8 	bl	a038 <CPageTable::GetBaseAddress() const>
    8d94:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    8d98:	e594000c 	ldr	r0, [r4, #12]
    8d9c:	eb0004a5 	bl	a038 <CPageTable::GetBaseAddress() const>
    8da0:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    8da4:	e3a03005 	mov	r3, #5
    8da8:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    8dac:	eb0013cf 	bl	dcf0 <InvalidateDataCache>
    8db0:	e3a03000 	mov	r3, #0
    8db4:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    8db8:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    8dbc:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    8dc0:	f57ff04f 	dsb	sy
    8dc4:	f57ff06f 	isb	sy
    8dc8:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    8dcc:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    8dd0:	e3833005 	orr	r3, r3, #5
    8dd4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8dd8:	e8bd8010 	pop	{r4, pc}

00008ddc <CMemorySystem::CMemorySystem(int)>:
    8ddc:	e92d4030 	push	{r4, r5, lr}
    8de0:	e1a04000 	mov	r4, r0
    8de4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    8de8:	e5801000 	str	r1, [r0]
    8dec:	e3a05000 	mov	r5, #0
    8df0:	e28d000c 	add	r0, sp, #12
    8df4:	e5845004 	str	r5, [r4, #4]
    8df8:	e5845008 	str	r5, [r4, #8]
    8dfc:	e584500c 	str	r5, [r4, #12]
    8e00:	ebfffde4 	bl	8598 <CBcmPropertyTags::CBcmPropertyTags()>
    8e04:	e3a03014 	mov	r3, #20
    8e08:	e58d5000 	str	r5, [sp]
    8e0c:	e08d2003 	add	r2, sp, r3
    8e10:	e28d000c 	add	r0, sp, #12
    8e14:	e3a01005 	mov	r1, #5
    8e18:	e3401001 	movt	r1, #1
    8e1c:	ebfffe09 	bl	8648 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8e20:	e2503000 	subs	r3, r0, #0
    8e24:	058d3020 	streq	r3, [sp, #32]
    8e28:	159d1024 	ldrne	r1, [sp, #36]	; 0x24
    8e2c:	03a02303 	moveq	r2, #201326592	; 0xc000000
    8e30:	01a00003 	moveq	r0, r3
    8e34:	01a01002 	moveq	r1, r2
    8e38:	159d0020 	ldrne	r0, [sp, #32]
    8e3c:	e5841004 	str	r1, [r4, #4]
    8e40:	058d2024 	streq	r2, [sp, #36]	; 0x24
    8e44:	eb001468 	bl	dfec <mem_init>
    8e48:	e5943000 	ldr	r3, [r4]
    8e4c:	e3530000 	cmp	r3, #0
    8e50:	0a00000c 	beq	8e88 <CMemorySystem::CMemorySystem(int)+0xac>
    8e54:	e3a00008 	mov	r0, #8
    8e58:	eb00000f 	bl	8e9c <operator new(unsigned int)>
    8e5c:	e5941004 	ldr	r1, [r4, #4]
    8e60:	e1a05000 	mov	r5, r0
    8e64:	eb00042e 	bl	9f24 <CPageTable::CPageTable(unsigned int)>
    8e68:	e5845008 	str	r5, [r4, #8]
    8e6c:	e3a00008 	mov	r0, #8
    8e70:	eb000009 	bl	8e9c <operator new(unsigned int)>
    8e74:	e1a05000 	mov	r5, r0
    8e78:	eb0003fd 	bl	9e74 <CPageTable::CPageTable()>
    8e7c:	e584500c 	str	r5, [r4, #12]
    8e80:	e1a00004 	mov	r0, r4
    8e84:	ebffffb8 	bl	8d6c <CMemorySystem::EnableMMU()>
    8e88:	e28d000c 	add	r0, sp, #12
    8e8c:	ebfffdc7 	bl	85b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    8e90:	e1a00004 	mov	r0, r4
    8e94:	e28dd02c 	add	sp, sp, #44	; 0x2c
    8e98:	e8bd8030 	pop	{r4, r5, pc}

00008e9c <operator new(unsigned int)>:
    8e9c:	ea00146a 	b	e04c <malloc>

00008ea0 <operator new[](unsigned int)>:
    8ea0:	ea001469 	b	e04c <malloc>

00008ea4 <operator delete(void*)>:
    8ea4:	ea0014a8 	b	e14c <free>

00008ea8 <operator delete[](void*)>:
    8ea8:	ea0014a7 	b	e14c <free>

00008eac <operator delete(void*, unsigned int)>:
    8eac:	ea0014a6 	b	e14c <free>

00008eb0 <operator delete[](void*, unsigned int)>:
    8eb0:	ea0014a5 	b	e14c <free>

00008eb4 <EnterCritical>:
    8eb4:	e10f1000 	mrs	r1, CPSR
    8eb8:	f10c0080 	cpsid	i
    8ebc:	e3500002 	cmp	r0, #2
    8ec0:	1a000000 	bne	8ec8 <EnterCritical+0x14>
    8ec4:	f10c0040 	cpsid	f
    8ec8:	e3003504 	movw	r3, #1284	; 0x504
    8ecc:	e3403001 	movt	r3, #1
    8ed0:	e5932000 	ldr	r2, [r3]
    8ed4:	e2820001 	add	r0, r2, #1
    8ed8:	e5830000 	str	r0, [r3]
    8edc:	e0833102 	add	r3, r3, r2, lsl #2
    8ee0:	e5831004 	str	r1, [r3, #4]
    8ee4:	f57ff05f 	dmb	sy
    8ee8:	e12fff1e 	bx	lr

00008eec <LeaveCritical>:
    8eec:	f57ff05f 	dmb	sy
    8ef0:	e3003504 	movw	r3, #1284	; 0x504
    8ef4:	e3403001 	movt	r3, #1
    8ef8:	e5932000 	ldr	r2, [r3]
    8efc:	e2422001 	sub	r2, r2, #1
    8f00:	e5832000 	str	r2, [r3]
    8f04:	e0833102 	add	r3, r3, r2, lsl #2
    8f08:	e5933004 	ldr	r3, [r3, #4]
    8f0c:	e121f003 	msr	CPSR_c, r3
    8f10:	e12fff1e 	bx	lr

00008f14 <SyncDataAndInstructionCache>:
    8f14:	e92d4010 	push	{r4, lr}
    8f18:	eb00139e 	bl	dd98 <CleanDataCache>
    8f1c:	e3a03000 	mov	r3, #0
    8f20:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    8f24:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    8f28:	f57ff04f 	dsb	sy
    8f2c:	f57ff06f 	isb	sy
    8f30:	e8bd8010 	pop	{r4, pc}

00008f34 <__aeabi_atexit>:
    8f34:	e12fff1e 	bx	lr

00008f38 <halt>:
    8f38:	f10c0080 	cpsid	i
    8f3c:	f10c0040 	cpsid	f
    8f40:	f57ff04f 	dsb	sy
    8f44:	e320f003 	wfi
    8f48:	eafffffc 	b	8f40 <halt+0x8>

00008f4c <reboot>:
    8f4c:	e3a03000 	mov	r3, #0
    8f50:	e3433f10 	movt	r3, #16144	; 0x3f10
    8f54:	e3a01001 	mov	r1, #1
    8f58:	e3a02020 	mov	r2, #32
    8f5c:	e3451a00 	movt	r1, #23040	; 0x5a00
    8f60:	e3452a00 	movt	r2, #23040	; 0x5a00
    8f64:	e5831024 	str	r1, [r3, #36]	; 0x24
    8f68:	e583201c 	str	r2, [r3, #28]
    8f6c:	eafffffe 	b	8f6c <reboot+0x20>

00008f70 <sysinit>:
    8f70:	e92d4030 	push	{r4, r5, lr}
    8f74:	e24dd01c 	sub	sp, sp, #28
    8f78:	f1080040 	cpsie	f
    8f7c:	eb001340 	bl	dc84 <InvalidateDataCacheL1Only>
    8f80:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    8f84:	e3083064 	movw	r3, #32868	; 0x8064
    8f88:	e3403000 	movt	r3, #0
    8f8c:	e582309c 	str	r3, [r2, #156]	; 0x9c
    8f90:	e58230ac 	str	r3, [r2, #172]	; 0xac
    8f94:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    8f98:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    8f9c:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    8fa0:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    8fa4:	f57ff06f 	isb	sy
    8fa8:	eee82a10 	vmsr	fpexc, r2
    8fac:	e3a01000 	mov	r1, #0
    8fb0:	eee11a10 	vmsr	fpscr, r1
    8fb4:	e30034fc 	movw	r3, #1276	; 0x4fc
    8fb8:	e300259c 	movw	r2, #1436	; 0x59c
    8fbc:	e3403001 	movt	r3, #1
    8fc0:	e3402001 	movt	r2, #1
    8fc4:	e1530002 	cmp	r3, r2
    8fc8:	2a000002 	bcs	8fd8 <sysinit+0x68>
    8fcc:	e4c31001 	strb	r1, [r3], #1
    8fd0:	e1530002 	cmp	r3, r2
    8fd4:	1afffffc 	bne	8fcc <sysinit+0x5c>
    8fd8:	e1a0000d 	mov	r0, sp
    8fdc:	e300540c 	movw	r5, #1036	; 0x40c
    8fe0:	e3004400 	movw	r4, #1024	; 0x400
    8fe4:	e3405001 	movt	r5, #1
    8fe8:	e3404001 	movt	r4, #1
    8fec:	eb001246 	bl	d90c <CMachineInfo::CMachineInfo()>
    8ff0:	e1540005 	cmp	r4, r5
    8ff4:	2a000003 	bcs	9008 <sysinit+0x98>
    8ff8:	e4943004 	ldr	r3, [r4], #4
    8ffc:	e12fff33 	blx	r3
    9000:	e1540005 	cmp	r4, r5
    9004:	3afffffb 	bcc	8ff8 <sysinit+0x88>
    9008:	ebfffc18 	bl	8070 <main>
    900c:	e3500001 	cmp	r0, #1
    9010:	0a000000 	beq	9018 <sysinit+0xa8>
    9014:	ebffffc7 	bl	8f38 <halt>
    9018:	ebffffcb 	bl	8f4c <reboot>

0000901c <CTimer::CTimer(CInterruptSystem*)>:
    901c:	e92d4070 	push	{r4, r5, r6, lr}
    9020:	e1a04000 	mov	r4, r0
    9024:	e5801000 	str	r1, [r0]
    9028:	e3a03000 	mov	r3, #0
    902c:	e3a05001 	mov	r5, #1
    9030:	e5803004 	str	r3, [r0, #4]
    9034:	e5843008 	str	r3, [r4, #8]
    9038:	e2800018 	add	r0, r0, #24
    903c:	e5843014 	str	r3, [r4, #20]
    9040:	e584300c 	str	r3, [r4, #12]
    9044:	e5845010 	str	r5, [r4, #16]
    9048:	eb00138a 	bl	de78 <CPtrList::CPtrList()>
    904c:	e300355c 	movw	r3, #1372	; 0x55c
    9050:	e3403001 	movt	r3, #1
    9054:	e300115e 	movw	r1, #350	; 0x15e
    9058:	e584501c 	str	r5, [r4, #28]
    905c:	e3052730 	movw	r2, #22320	; 0x5730
    9060:	e5841024 	str	r1, [r4, #36]	; 0x24
    9064:	e3402005 	movt	r2, #5
    9068:	e1a00004 	mov	r0, r4
    906c:	e5842020 	str	r2, [r4, #32]
    9070:	e5834000 	str	r4, [r3]
    9074:	e8bd8070 	pop	{r4, r5, r6, pc}

00009078 <CTimer::~CTimer()>:
    9078:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    907c:	e1a04000 	mov	r4, r0
    9080:	e1a07000 	mov	r7, r0
    9084:	e3a01003 	mov	r1, #3
    9088:	e4940018 	ldr	r0, [r4], #24
    908c:	eb0010b0 	bl	d354 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9090:	ea000007 	b	90b4 <CTimer::~CTimer()+0x3c>
    9094:	eb00137f 	bl	de98 <CPtrList::GetPtr(TPtrListElement*)>
    9098:	e1a01005 	mov	r1, r5
    909c:	e1a06000 	mov	r6, r0
    90a0:	e1a00004 	mov	r0, r4
    90a4:	eb0013ae 	bl	df64 <CPtrList::Remove(TPtrListElement*)>
    90a8:	e1a00006 	mov	r0, r6
    90ac:	e3a01014 	mov	r1, #20
    90b0:	ebffff7d 	bl	8eac <operator delete(void*, unsigned int)>
    90b4:	e1a00004 	mov	r0, r4
    90b8:	eb001372 	bl	de88 <CPtrList::GetFirst()>
    90bc:	e2505000 	subs	r5, r0, #0
    90c0:	e1a00004 	mov	r0, r4
    90c4:	e1a01005 	mov	r1, r5
    90c8:	1afffff1 	bne	9094 <CTimer::~CTimer()+0x1c>
    90cc:	e300355c 	movw	r3, #1372	; 0x55c
    90d0:	e3403001 	movt	r3, #1
    90d4:	e1a00004 	mov	r0, r4
    90d8:	e5835000 	str	r5, [r3]
    90dc:	eb001368 	bl	de84 <CPtrList::~CPtrList()>
    90e0:	e1a00007 	mov	r0, r7
    90e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000090e8 <CTimer::SetTimeZone(int)>:
    90e8:	e2813e59 	add	r3, r1, #1424	; 0x590
    90ec:	e3002b3e 	movw	r2, #2878	; 0xb3e
    90f0:	e283300f 	add	r3, r3, #15
    90f4:	e1530002 	cmp	r3, r2
    90f8:	95801014 	strls	r1, [r0, #20]
    90fc:	93a00001 	movls	r0, #1
    9100:	83a00000 	movhi	r0, #0
    9104:	e12fff1e 	bx	lr

00009108 <CTimer::GetTimeZone() const>:
    9108:	e5900014 	ldr	r0, [r0, #20]
    910c:	e12fff1e 	bx	lr

00009110 <CTimer::SetTime(unsigned int, int)>:
    9110:	e3520000 	cmp	r2, #0
    9114:	e92d4070 	push	{r4, r5, r6, lr}
    9118:	e1a04000 	mov	r4, r0
    911c:	e1a05001 	mov	r5, r1
    9120:	1a000005 	bne	913c <CTimer::SetTime(unsigned int, int)+0x2c>
    9124:	e5901014 	ldr	r1, [r0, #20]
    9128:	e3a0303c 	mov	r3, #60	; 0x3c
    912c:	e0030193 	mul	r3, r3, r1
    9130:	e3530000 	cmp	r3, #0
    9134:	ba00000e 	blt	9174 <CTimer::SetTime(unsigned int, int)+0x64>
    9138:	e0855003 	add	r5, r5, r3
    913c:	e5940010 	ldr	r0, [r4, #16]
    9140:	e3500000 	cmp	r0, #0
    9144:	1a000002 	bne	9154 <CTimer::SetTime(unsigned int, int)+0x44>
    9148:	e3a00001 	mov	r0, #1
    914c:	e584500c 	str	r5, [r4, #12]
    9150:	e8bd8070 	pop	{r4, r5, r6, pc}
    9154:	ebffff56 	bl	8eb4 <EnterCritical>
    9158:	e5943010 	ldr	r3, [r4, #16]
    915c:	e584500c 	str	r5, [r4, #12]
    9160:	e3530000 	cmp	r3, #0
    9164:	0a000007 	beq	9188 <CTimer::SetTime(unsigned int, int)+0x78>
    9168:	ebffff5f 	bl	8eec <LeaveCritical>
    916c:	e3a00001 	mov	r0, #1
    9170:	e8bd8070 	pop	{r4, r5, r6, pc}
    9174:	e2631000 	rsb	r1, r3, #0
    9178:	e1510005 	cmp	r1, r5
    917c:	daffffed 	ble	9138 <CTimer::SetTime(unsigned int, int)+0x28>
    9180:	e1a00002 	mov	r0, r2
    9184:	e8bd8070 	pop	{r4, r5, r6, pc}
    9188:	e3a00001 	mov	r0, #1
    918c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009190 <CTimer::GetClockTicks()>:
    9190:	e3a03a03 	mov	r3, #12288	; 0x3000
    9194:	e3433f00 	movt	r3, #16128	; 0x3f00
    9198:	e5930004 	ldr	r0, [r3, #4]
    919c:	e12fff1e 	bx	lr

000091a0 <CTimer::GetTicks() const>:
    91a0:	e5900004 	ldr	r0, [r0, #4]
    91a4:	e12fff1e 	bx	lr

000091a8 <CTimer::GetUptime() const>:
    91a8:	e5900008 	ldr	r0, [r0, #8]
    91ac:	e12fff1e 	bx	lr

000091b0 <CTimer::GetTime() const>:
    91b0:	e590000c 	ldr	r0, [r0, #12]
    91b4:	e12fff1e 	bx	lr

000091b8 <CTimer::GetUniversalTime() const>:
    91b8:	e5902014 	ldr	r2, [r0, #20]
    91bc:	e3a0303c 	mov	r3, #60	; 0x3c
    91c0:	e590000c 	ldr	r0, [r0, #12]
    91c4:	e0030293 	mul	r3, r3, r2
    91c8:	e1530000 	cmp	r3, r0
    91cc:	d0400003 	suble	r0, r0, r3
    91d0:	c3a00000 	movgt	r0, #0
    91d4:	e12fff1e 	bx	lr

000091d8 <CTimer::GetTimeString()>:
    91d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91dc:	e1a05000 	mov	r5, r0
    91e0:	e5900010 	ldr	r0, [r0, #16]
    91e4:	e24dd01c 	sub	sp, sp, #28
    91e8:	e3500000 	cmp	r0, #0
    91ec:	1a00006c 	bne	93a4 <CTimer::GetTimeString()+0x1cc>
    91f0:	e595400c 	ldr	r4, [r5, #12]
    91f4:	e5959004 	ldr	r9, [r5, #4]
    91f8:	e1940009 	orrs	r0, r4, r9
    91fc:	0a00004f 	beq	9340 <CTimer::GetTimeString()+0x168>
    9200:	e308a889 	movw	sl, #34953	; 0x8889
    9204:	e348a888 	movt	sl, #34952	; 0x8888
    9208:	e30b23c5 	movw	r2, #46021	; 0xb3c5
    920c:	e34921a2 	movt	r2, #37282	; 0x91a2
    9210:	e0876a94 	umull	r6, r7, r4, sl
    9214:	e304e507 	movw	lr, #17671	; 0x4507
    9218:	e0832294 	umull	r2, r3, r4, r2
    921c:	e34ce22e 	movt	lr, #49710	; 0xc22e
    9220:	e3a0003c 	mov	r0, #60	; 0x3c
    9224:	e308151f 	movw	r1, #34079	; 0x851f
    9228:	e1a0c2a7 	lsr	ip, r7, #5
    922c:	e34511eb 	movt	r1, #20971	; 0x51eb
    9230:	e30057b2 	movw	r5, #1970	; 0x7b2
    9234:	e08baa9c 	umull	sl, fp, ip, sl
    9238:	e1a065a3 	lsr	r6, r3, #11
    923c:	e0832e94 	umull	r2, r3, r4, lr
    9240:	e3a0a064 	mov	sl, #100	; 0x64
    9244:	e0674c90 	mls	r7, r0, ip, r4
    9248:	e1a082ab 	lsr	r8, fp, #5
    924c:	e3a0ee19 	mov	lr, #400	; 0x190
    9250:	e068c890 	mls	r8, r0, r8, ip
    9254:	e1a04823 	lsr	r4, r3, #16
    9258:	e300c16d 	movw	ip, #365	; 0x16d
    925c:	e300016e 	movw	r0, #366	; 0x16e
    9260:	ea000001 	b	926c <CTimer::GetTimeString()+0x94>
    9264:	e0444002 	sub	r4, r4, r2
    9268:	e2855001 	add	r5, r5, #1
    926c:	e0832195 	umull	r2, r3, r5, r1
    9270:	e1a022a3 	lsr	r2, r3, #5
    9274:	e1a033a3 	lsr	r3, r3, #7
    9278:	e062529a 	mls	r2, sl, r2, r5
    927c:	e063539e 	mls	r3, lr, r3, r5
    9280:	e3520000 	cmp	r2, #0
    9284:	e16f3f13 	clz	r3, r3
    9288:	01a032a3 	lsreq	r3, r3, #5
    928c:	0a000002 	beq	929c <CTimer::GetTimeString()+0xc4>
    9290:	e3150003 	tst	r5, #3
    9294:	03a03001 	moveq	r3, #1
    9298:	13a03000 	movne	r3, #0
    929c:	e3530000 	cmp	r3, #0
    92a0:	01a0200c 	moveq	r2, ip
    92a4:	11a02000 	movne	r2, r0
    92a8:	e1540002 	cmp	r4, r2
    92ac:	2affffec 	bcs	9264 <CTimer::GetTimeString()+0x8c>
    92b0:	e30f0018 	movw	r0, #61464	; 0xf018
    92b4:	e3a0a000 	mov	sl, #0
    92b8:	e3400000 	movt	r0, #0
    92bc:	ea000001 	b	92c8 <CTimer::GetTimeString()+0xf0>
    92c0:	e0444002 	sub	r4, r4, r2
    92c4:	e28aa001 	add	sl, sl, #1
    92c8:	e35a0001 	cmp	sl, #1
    92cc:	13a01000 	movne	r1, #0
    92d0:	02031001 	andeq	r1, r3, #1
    92d4:	e3a0201d 	mov	r2, #29
    92d8:	e3510000 	cmp	r1, #0
    92dc:	0790210a 	ldreq	r2, [r0, sl, lsl #2]
    92e0:	e1540002 	cmp	r4, r2
    92e4:	2afffff5 	bcs	92c0 <CTimer::GetTimeString()+0xe8>
    92e8:	e308251f 	movw	r2, #34079	; 0x851f
    92ec:	e34521eb 	movt	r2, #20971	; 0x51eb
    92f0:	e3a01064 	mov	r1, #100	; 0x64
    92f4:	e3a00010 	mov	r0, #16
    92f8:	e0832299 	umull	r2, r3, r9, r2
    92fc:	e1a0b2a3 	lsr	fp, r3, #5
    9300:	e06b9b91 	mls	fp, r1, fp, r9
    9304:	ebfffee4 	bl	8e9c <operator new(unsigned int)>
    9308:	e1a09000 	mov	r9, r0
    930c:	eb000bb8 	bl	c1f4 <CString::CString()>
    9310:	e30037b7 	movw	r3, #1975	; 0x7b7
    9314:	e1550003 	cmp	r5, r3
    9318:	8a00000a 	bhi	9348 <CTimer::GetTimeString()+0x170>
    931c:	e1a00009 	mov	r0, r9
    9320:	e58db004 	str	fp, [sp, #4]
    9324:	e1a03008 	mov	r3, r8
    9328:	e58d7000 	str	r7, [sp]
    932c:	e1a02006 	mov	r2, r6
    9330:	e30f106c 	movw	r1, #61548	; 0xf06c
    9334:	e3401000 	movt	r1, #0
    9338:	eb000f0c 	bl	cf70 <CString::Format(char const*, ...)>
    933c:	e1a00009 	mov	r0, r9
    9340:	e28dd01c 	add	sp, sp, #28
    9344:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9348:	e30a3aab 	movw	r3, #43691	; 0xaaab
    934c:	e34a3aaa 	movt	r3, #43690	; 0xaaaa
    9350:	e3a0c018 	mov	ip, #24
    9354:	e300240c 	movw	r2, #1036	; 0x40c
    9358:	e0810396 	umull	r0, r1, r6, r3
    935c:	e3402001 	movt	r2, #1
    9360:	e58db00c 	str	fp, [sp, #12]
    9364:	e2843001 	add	r3, r4, #1
    9368:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    936c:	e58d7008 	str	r7, [sp, #8]
    9370:	e58d8004 	str	r8, [sp, #4]
    9374:	e1cd01f0 	strd	r0, [sp, #16]
    9378:	e30f1050 	movw	r1, #61520	; 0xf050
    937c:	e59d0014 	ldr	r0, [sp, #20]
    9380:	e3401000 	movt	r1, #0
    9384:	e1a0e220 	lsr	lr, r0, #4
    9388:	e1a00009 	mov	r0, r9
    938c:	e0666e9c 	mls	r6, ip, lr, r6
    9390:	e58d6000 	str	r6, [sp]
    9394:	eb000ef5 	bl	cf70 <CString::Format(char const*, ...)>
    9398:	e1a00009 	mov	r0, r9
    939c:	e28dd01c 	add	sp, sp, #28
    93a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93a4:	ebfffec2 	bl	8eb4 <EnterCritical>
    93a8:	e5953010 	ldr	r3, [r5, #16]
    93ac:	e595400c 	ldr	r4, [r5, #12]
    93b0:	e3530000 	cmp	r3, #0
    93b4:	e5959004 	ldr	r9, [r5, #4]
    93b8:	0affff8e 	beq	91f8 <CTimer::GetTimeString()+0x20>
    93bc:	ebfffeca 	bl	8eec <LeaveCritical>
    93c0:	eaffff8c 	b	91f8 <CTimer::GetTimeString()+0x20>

000093c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    93c4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    93c8:	e1a08000 	mov	r8, r0
    93cc:	e3a00014 	mov	r0, #20
    93d0:	e1a06002 	mov	r6, r2
    93d4:	e1a04001 	mov	r4, r1
    93d8:	e1a09003 	mov	r9, r3
    93dc:	e59d5020 	ldr	r5, [sp, #32]
    93e0:	ebfffead 	bl	8e9c <operator new(unsigned int)>
    93e4:	e304cd43 	movw	ip, #19779	; 0x4d43
    93e8:	e344cb54 	movt	ip, #19284	; 0x4b54
    93ec:	e1a07000 	mov	r7, r0
    93f0:	e598001c 	ldr	r0, [r8, #28]
    93f4:	e5876004 	str	r6, [r7, #4]
    93f8:	e3500000 	cmp	r0, #0
    93fc:	e5986004 	ldr	r6, [r8, #4]
    9400:	e587900c 	str	r9, [r7, #12]
    9404:	e0866004 	add	r6, r6, r4
    9408:	e5875010 	str	r5, [r7, #16]
    940c:	e587c000 	str	ip, [r7]
    9410:	e5876008 	str	r6, [r7, #8]
    9414:	1a000021 	bne	94a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    9418:	e2885018 	add	r5, r8, #24
    941c:	e1a00005 	mov	r0, r5
    9420:	eb001298 	bl	de88 <CPtrList::GetFirst()>
    9424:	e2504000 	subs	r4, r0, #0
    9428:	1a000004 	bne	9440 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x7c>
    942c:	ea000016 	b	948c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
    9430:	eb001296 	bl	de90 <CPtrList::GetNext(TPtrListElement*)>
    9434:	e3500000 	cmp	r0, #0
    9438:	0a000013 	beq	948c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
    943c:	e1a04000 	mov	r4, r0
    9440:	e1a01004 	mov	r1, r4
    9444:	e1a00005 	mov	r0, r5
    9448:	eb001292 	bl	de98 <CPtrList::GetPtr(TPtrListElement*)>
    944c:	e1a01004 	mov	r1, r4
    9450:	e5903008 	ldr	r3, [r0, #8]
    9454:	e1a00005 	mov	r0, r5
    9458:	e0433006 	sub	r3, r3, r6
    945c:	e3530000 	cmp	r3, #0
    9460:	dafffff2 	ble	9430 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x6c>
    9464:	e1a01004 	mov	r1, r4
    9468:	e1a00005 	mov	r0, r5
    946c:	e1a02007 	mov	r2, r7
    9470:	eb00128a 	bl	dea0 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    9474:	e598301c 	ldr	r3, [r8, #28]
    9478:	e3530000 	cmp	r3, #0
    947c:	0a000000 	beq	9484 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc0>
    9480:	ebfffe99 	bl	8eec <LeaveCritical>
    9484:	e1a00007 	mov	r0, r7
    9488:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    948c:	e1a01004 	mov	r1, r4
    9490:	e1a00005 	mov	r0, r5
    9494:	e1a02007 	mov	r2, r7
    9498:	eb00129a 	bl	df08 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    949c:	eafffff4 	b	9474 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb0>
    94a0:	ebfffe83 	bl	8eb4 <EnterCritical>
    94a4:	eaffffdb 	b	9418 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x54>

000094a8 <CTimer::CancelKernelTimer(unsigned int)>:
    94a8:	e92d4070 	push	{r4, r5, r6, lr}
    94ac:	e1a04000 	mov	r4, r0
    94b0:	e590001c 	ldr	r0, [r0, #28]
    94b4:	e1a05001 	mov	r5, r1
    94b8:	e3500000 	cmp	r0, #0
    94bc:	1a000011 	bne	9508 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    94c0:	e2846018 	add	r6, r4, #24
    94c4:	e1a01005 	mov	r1, r5
    94c8:	e1a00006 	mov	r0, r6
    94cc:	eb0012b7 	bl	dfb0 <CPtrList::Find(void*)>
    94d0:	e2501000 	subs	r1, r0, #0
    94d4:	0a000006 	beq	94f4 <CTimer::CancelKernelTimer(unsigned int)+0x4c>
    94d8:	e1a00006 	mov	r0, r6
    94dc:	eb0012a0 	bl	df64 <CPtrList::Remove(TPtrListElement*)>
    94e0:	e3a03000 	mov	r3, #0
    94e4:	e1a00005 	mov	r0, r5
    94e8:	e5853000 	str	r3, [r5]
    94ec:	e3a01014 	mov	r1, #20
    94f0:	ebfffe6d 	bl	8eac <operator delete(void*, unsigned int)>
    94f4:	e594301c 	ldr	r3, [r4, #28]
    94f8:	e3530000 	cmp	r3, #0
    94fc:	08bd8070 	popeq	{r4, r5, r6, pc}
    9500:	e8bd4070 	pop	{r4, r5, r6, lr}
    9504:	eafffe78 	b	8eec <LeaveCritical>
    9508:	ebfffe69 	bl	8eb4 <EnterCritical>
    950c:	eaffffeb 	b	94c0 <CTimer::CancelKernelTimer(unsigned int)+0x18>

00009510 <CTimer::PollKernelTimers()>:
    9510:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9514:	e1a06000 	mov	r6, r0
    9518:	e590001c 	ldr	r0, [r0, #28]
    951c:	e3500000 	cmp	r0, #0
    9520:	1a000031 	bne	95ec <CTimer::PollKernelTimers()+0xdc>
    9524:	e2867018 	add	r7, r6, #24
    9528:	e1a00007 	mov	r0, r7
    952c:	eb001255 	bl	de88 <CPtrList::GetFirst()>
    9530:	e2505000 	subs	r5, r0, #0
    9534:	13a09000 	movne	r9, #0
    9538:	1a00000e 	bne	9578 <CTimer::PollKernelTimers()+0x68>
    953c:	ea000025 	b	95d8 <CTimer::PollKernelTimers()+0xc8>
    9540:	e5943004 	ldr	r3, [r4, #4]
    9544:	e1a00004 	mov	r0, r4
    9548:	e5942010 	ldr	r2, [r4, #16]
    954c:	e594100c 	ldr	r1, [r4, #12]
    9550:	e12fff33 	blx	r3
    9554:	e1a00004 	mov	r0, r4
    9558:	e5849000 	str	r9, [r4]
    955c:	e3a01014 	mov	r1, #20
    9560:	ebfffe51 	bl	8eac <operator delete(void*, unsigned int)>
    9564:	e596001c 	ldr	r0, [r6, #28]
    9568:	e3500000 	cmp	r0, #0
    956c:	1a000016 	bne	95cc <CTimer::PollKernelTimers()+0xbc>
    9570:	e2585000 	subs	r5, r8, #0
    9574:	0a000017 	beq	95d8 <CTimer::PollKernelTimers()+0xc8>
    9578:	e1a01005 	mov	r1, r5
    957c:	e1a00007 	mov	r0, r7
    9580:	eb001244 	bl	de98 <CPtrList::GetPtr(TPtrListElement*)>
    9584:	e5962004 	ldr	r2, [r6, #4]
    9588:	e1a01005 	mov	r1, r5
    958c:	e1a04000 	mov	r4, r0
    9590:	e1a00007 	mov	r0, r7
    9594:	e5943008 	ldr	r3, [r4, #8]
    9598:	e0433002 	sub	r3, r3, r2
    959c:	e3530000 	cmp	r3, #0
    95a0:	ca00000c 	bgt	95d8 <CTimer::PollKernelTimers()+0xc8>
    95a4:	eb001239 	bl	de90 <CPtrList::GetNext(TPtrListElement*)>
    95a8:	e1a01005 	mov	r1, r5
    95ac:	e1a08000 	mov	r8, r0
    95b0:	e1a00007 	mov	r0, r7
    95b4:	eb00126a 	bl	df64 <CPtrList::Remove(TPtrListElement*)>
    95b8:	e596301c 	ldr	r3, [r6, #28]
    95bc:	e3530000 	cmp	r3, #0
    95c0:	0affffde 	beq	9540 <CTimer::PollKernelTimers()+0x30>
    95c4:	ebfffe48 	bl	8eec <LeaveCritical>
    95c8:	eaffffdc 	b	9540 <CTimer::PollKernelTimers()+0x30>
    95cc:	ebfffe38 	bl	8eb4 <EnterCritical>
    95d0:	e2585000 	subs	r5, r8, #0
    95d4:	1affffe7 	bne	9578 <CTimer::PollKernelTimers()+0x68>
    95d8:	e596301c 	ldr	r3, [r6, #28]
    95dc:	e3530000 	cmp	r3, #0
    95e0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    95e4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    95e8:	eafffe3f 	b	8eec <LeaveCritical>
    95ec:	ebfffe30 	bl	8eb4 <EnterCritical>
    95f0:	eaffffcb 	b	9524 <CTimer::PollKernelTimers()+0x14>

000095f4 <CTimer::InterruptHandler()>:
    95f4:	e3a03a03 	mov	r3, #12288	; 0x3000
    95f8:	e3433f00 	movt	r3, #16128	; 0x3f00
    95fc:	e92d4010 	push	{r4, lr}
    9600:	e3021710 	movw	r1, #10000	; 0x2710
    9604:	e5932018 	ldr	r2, [r3, #24]
    9608:	e1a04000 	mov	r4, r0
    960c:	e0822001 	add	r2, r2, r1
    9610:	e5832018 	str	r2, [r3, #24]
    9614:	e5930004 	ldr	r0, [r3, #4]
    9618:	e1520000 	cmp	r2, r0
    961c:	35932004 	ldrcc	r2, [r3, #4]
    9620:	30821001 	addcc	r1, r2, r1
    9624:	35831018 	strcc	r1, [r3, #24]
    9628:	e3a03a03 	mov	r3, #12288	; 0x3000
    962c:	e3433f00 	movt	r3, #16128	; 0x3f00
    9630:	e3a02008 	mov	r2, #8
    9634:	e5832000 	str	r2, [r3]
    9638:	e5940010 	ldr	r0, [r4, #16]
    963c:	e3500000 	cmp	r0, #0
    9640:	1a000016 	bne	96a0 <CTimer::InterruptHandler()+0xac>
    9644:	e5943004 	ldr	r3, [r4, #4]
    9648:	e308051f 	movw	r0, #34079	; 0x851f
    964c:	e34501eb 	movt	r0, #20971	; 0x51eb
    9650:	e3a0c064 	mov	ip, #100	; 0x64
    9654:	e2833001 	add	r3, r3, #1
    9658:	e5843004 	str	r3, [r4, #4]
    965c:	e0810093 	umull	r0, r1, r3, r0
    9660:	e1a022a1 	lsr	r2, r1, #5
    9664:	e062329c 	mls	r2, ip, r2, r3
    9668:	e3520000 	cmp	r2, #0
    966c:	1a000008 	bne	9694 <CTimer::InterruptHandler()+0xa0>
    9670:	e5943008 	ldr	r3, [r4, #8]
    9674:	e2833001 	add	r3, r3, #1
    9678:	e5843008 	str	r3, [r4, #8]
    967c:	e594300c 	ldr	r3, [r4, #12]
    9680:	e2833001 	add	r3, r3, #1
    9684:	e584300c 	str	r3, [r4, #12]
    9688:	e3520000 	cmp	r2, #0
    968c:	0a000000 	beq	9694 <CTimer::InterruptHandler()+0xa0>
    9690:	ebfffe15 	bl	8eec <LeaveCritical>
    9694:	e1a00004 	mov	r0, r4
    9698:	e8bd4010 	pop	{r4, lr}
    969c:	eaffff9b 	b	9510 <CTimer::PollKernelTimers()>
    96a0:	ebfffe03 	bl	8eb4 <EnterCritical>
    96a4:	e5943004 	ldr	r3, [r4, #4]
    96a8:	e308051f 	movw	r0, #34079	; 0x851f
    96ac:	e34501eb 	movt	r0, #20971	; 0x51eb
    96b0:	e2833001 	add	r3, r3, #1
    96b4:	e3a0c064 	mov	ip, #100	; 0x64
    96b8:	e5843004 	str	r3, [r4, #4]
    96bc:	e0810093 	umull	r0, r1, r3, r0
    96c0:	e5942010 	ldr	r2, [r4, #16]
    96c4:	e1a012a1 	lsr	r1, r1, #5
    96c8:	e063319c 	mls	r3, ip, r1, r3
    96cc:	e3530000 	cmp	r3, #0
    96d0:	1affffec 	bne	9688 <CTimer::InterruptHandler()+0x94>
    96d4:	eaffffe5 	b	9670 <CTimer::InterruptHandler()+0x7c>

000096d8 <CTimer::InterruptHandler(void*)>:
    96d8:	eaffffc5 	b	95f4 <CTimer::InterruptHandler()>

000096dc <CTimer::TuneMsDelay()>:
    96dc:	e92d4070 	push	{r4, r5, r6, lr}
    96e0:	e1a04000 	mov	r4, r0
    96e4:	e5943020 	ldr	r3, [r4, #32]
    96e8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    96ec:	e24dd008 	sub	sp, sp, #8
    96f0:	e5946004 	ldr	r6, [r4, #4]
    96f4:	e308551f 	movw	r5, #34079	; 0x851f
    96f8:	e34551eb 	movt	r5, #20971	; 0x51eb
    96fc:	e0000390 	mul	r0, r0, r3
    9700:	eb000e26 	bl	cfa0 <DelayLoop>
    9704:	e5941004 	ldr	r1, [r4, #4]
    9708:	e3020710 	movw	r0, #10000	; 0x2710
    970c:	e0411006 	sub	r1, r1, r6
    9710:	eb001349 	bl	e43c <__aeabi_uidiv>
    9714:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    9718:	e3413062 	movt	r3, #4194	; 0x1062
    971c:	e1a06000 	mov	r6, r0
    9720:	e5940020 	ldr	r0, [r4, #32]
    9724:	e0000690 	mul	r0, r0, r6
    9728:	e0810590 	umull	r0, r1, r0, r5
    972c:	e1a022a1 	lsr	r2, r1, #5
    9730:	e5842020 	str	r2, [r4, #32]
    9734:	e2822f7d 	add	r2, r2, #500	; 0x1f4
    9738:	e0832392 	umull	r2, r3, r2, r3
    973c:	e1a03323 	lsr	r3, r3, #6
    9740:	e5843024 	str	r3, [r4, #36]	; 0x24
    9744:	e0854596 	umull	r4, r5, r6, r5
    9748:	eb000770 	bl	b510 <CLogger::Get()>
    974c:	e3a0e064 	mov	lr, #100	; 0x64
    9750:	e3a02003 	mov	r2, #3
    9754:	e59f1020 	ldr	r1, [pc, #32]	; 977c <CTimer::TuneMsDelay()+0xa0>
    9758:	e30f3080 	movw	r3, #61568	; 0xf080
    975c:	e3403000 	movt	r3, #0
    9760:	e1a0c2a5 	lsr	ip, r5, #5
    9764:	e58dc000 	str	ip, [sp]
    9768:	e0666c9e 	mls	r6, lr, ip, r6
    976c:	e58d6004 	str	r6, [sp, #4]
    9770:	eb000842 	bl	b880 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9774:	e28dd008 	add	sp, sp, #8
    9778:	e8bd8070 	pop	{r4, r5, r6, pc}
    977c:	0000f048 	.word	0x0000f048

00009780 <CTimer::Initialize()>:
    9780:	e92d4010 	push	{r4, lr}
    9784:	e1a03000 	mov	r3, r0
    9788:	e1a04000 	mov	r4, r0
    978c:	e3a01003 	mov	r1, #3
    9790:	e5900000 	ldr	r0, [r0]
    9794:	e30926d8 	movw	r2, #38616	; 0x96d8
    9798:	e3402000 	movt	r2, #0
    979c:	eb000eda 	bl	d30c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    97a0:	e3a02a03 	mov	r2, #12288	; 0x3000
    97a4:	e3432f00 	movt	r2, #16128	; 0x3f00
    97a8:	e3a03df2 	mov	r3, #15488	; 0x3c80
    97ac:	e34f3e36 	movt	r3, #65078	; 0xfe36
    97b0:	e1a00004 	mov	r0, r4
    97b4:	e5823004 	str	r3, [r2, #4]
    97b8:	e5923004 	ldr	r3, [r2, #4]
    97bc:	e2833c27 	add	r3, r3, #9984	; 0x2700
    97c0:	e2833010 	add	r3, r3, #16
    97c4:	e5823018 	str	r3, [r2, #24]
    97c8:	ebffffc3 	bl	96dc <CTimer::TuneMsDelay()>
    97cc:	e3a00001 	mov	r0, #1
    97d0:	e8bd8010 	pop	{r4, pc}

000097d4 <CTimer::SimpleMsDelay(unsigned int)>:
    97d4:	e2503000 	subs	r3, r0, #0
    97d8:	012fff1e 	bxeq	lr
    97dc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    97e0:	e0000390 	mul	r0, r0, r3
    97e4:	e3500000 	cmp	r0, #0
    97e8:	012fff1e 	bxeq	lr
    97ec:	e3a02a03 	mov	r2, #12288	; 0x3000
    97f0:	e3432f00 	movt	r2, #16128	; 0x3f00
    97f4:	e2800001 	add	r0, r0, #1
    97f8:	e5921004 	ldr	r1, [r2, #4]
    97fc:	e5923004 	ldr	r3, [r2, #4]
    9800:	e0433001 	sub	r3, r3, r1
    9804:	e1500003 	cmp	r0, r3
    9808:	8afffffb 	bhi	97fc <CTimer::SimpleMsDelay(unsigned int)+0x28>
    980c:	e12fff1e 	bx	lr

00009810 <CTimer::SimpleusDelay(unsigned int)>:
    9810:	e3500000 	cmp	r0, #0
    9814:	012fff1e 	bxeq	lr
    9818:	e3a02a03 	mov	r2, #12288	; 0x3000
    981c:	e3432f00 	movt	r2, #16128	; 0x3f00
    9820:	e2800001 	add	r0, r0, #1
    9824:	e5921004 	ldr	r1, [r2, #4]
    9828:	e5923004 	ldr	r3, [r2, #4]
    982c:	e0433001 	sub	r3, r3, r1
    9830:	e1500003 	cmp	r0, r3
    9834:	8afffffb 	bhi	9828 <CTimer::SimpleusDelay(unsigned int)+0x18>
    9838:	e12fff1e 	bx	lr

0000983c <CTimer::IsLeapYear(unsigned int)>:
    983c:	e308251f 	movw	r2, #34079	; 0x851f
    9840:	e34521eb 	movt	r2, #20971	; 0x51eb
    9844:	e3a0c064 	mov	ip, #100	; 0x64
    9848:	e0832290 	umull	r2, r3, r0, r2
    984c:	e1a012a3 	lsr	r1, r3, #5
    9850:	e061019c 	mls	r1, ip, r1, r0
    9854:	e3510000 	cmp	r1, #0
    9858:	0a000003 	beq	986c <CTimer::IsLeapYear(unsigned int)+0x30>
    985c:	e3100003 	tst	r0, #3
    9860:	03a00001 	moveq	r0, #1
    9864:	13a00000 	movne	r0, #0
    9868:	e12fff1e 	bx	lr
    986c:	e1a033a3 	lsr	r3, r3, #7
    9870:	e3a02e19 	mov	r2, #400	; 0x190
    9874:	e0600392 	mls	r0, r2, r3, r0
    9878:	e16f0f10 	clz	r0, r0
    987c:	e1a002a0 	lsr	r0, r0, #5
    9880:	e12fff1e 	bx	lr

00009884 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    9884:	e3500001 	cmp	r0, #1
    9888:	0a000003 	beq	989c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    988c:	e30f3018 	movw	r3, #61464	; 0xf018
    9890:	e3403000 	movt	r3, #0
    9894:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    9898:	e12fff1e 	bx	lr
    989c:	e308251f 	movw	r2, #34079	; 0x851f
    98a0:	e34521eb 	movt	r2, #20971	; 0x51eb
    98a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    98a8:	e3a0e064 	mov	lr, #100	; 0x64
    98ac:	e0832291 	umull	r2, r3, r1, r2
    98b0:	e1a0c2a3 	lsr	ip, r3, #5
    98b4:	e06c1c9e 	mls	ip, lr, ip, r1
    98b8:	e35c0000 	cmp	ip, #0
    98bc:	0a000008 	beq	98e4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    98c0:	e3110003 	tst	r1, #3
    98c4:	03a01001 	moveq	r1, #1
    98c8:	13a01000 	movne	r1, #0
    98cc:	e3510000 	cmp	r1, #0
    98d0:	030f3018 	movweq	r3, #61464	; 0xf018
    98d4:	03403000 	movteq	r3, #0
    98d8:	13a0001d 	movne	r0, #29
    98dc:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    98e0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    98e4:	e1a033a3 	lsr	r3, r3, #7
    98e8:	e3a02e19 	mov	r2, #400	; 0x190
    98ec:	e0611392 	mls	r1, r2, r3, r1
    98f0:	e16f1f11 	clz	r1, r1
    98f4:	e1a012a1 	lsr	r1, r1, #5
    98f8:	eafffff3 	b	98cc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

000098fc <CTimer::Get()>:
    98fc:	e300355c 	movw	r3, #1372	; 0x55c
    9900:	e3403001 	movt	r3, #1
    9904:	e5930000 	ldr	r0, [r3]
    9908:	e12fff1e 	bx	lr

0000990c <memcpy>:
    990c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    9910:	e352007f 	cmp	r2, #127	; 0x7f
    9914:	9a00000b 	bls	9948 <memcpy+0x3c>
    9918:	e3110003 	tst	r1, #3
    991c:	1a000009 	bne	9948 <memcpy+0x3c>
    9920:	e3100003 	tst	r0, #3
    9924:	1a000007 	bne	9948 <memcpy+0x3c>
    9928:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    992c:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    9930:	e2422020 	sub	r2, r2, #32
    9934:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    9938:	f5d1f040 	pld	[r1, #64]	; 0x40
    993c:	e352001f 	cmp	r2, #31
    9940:	8afffff9 	bhi	992c <memcpy+0x20>
    9944:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    9948:	e3520000 	cmp	r2, #0
    994c:	0a000003 	beq	9960 <memcpy+0x54>
    9950:	e4d13001 	ldrb	r3, [r1], #1
    9954:	e2522001 	subs	r2, r2, #1
    9958:	e4c03001 	strb	r3, [r0], #1
    995c:	1afffffb 	bne	9950 <memcpy+0x44>
    9960:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    9964:	e12fff1e 	bx	lr

00009968 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    9968:	e1a01000 	mov	r1, r0
    996c:	e3a0c00a 	mov	ip, #10
    9970:	e3a00000 	mov	r0, #0
    9974:	ea000007 	b	9998 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x30>
    9978:	e3720001 	cmn	r2, #1
    997c:	13a03000 	movne	r3, #0
    9980:	03a03001 	moveq	r3, #1
    9984:	e1500002 	cmp	r0, r2
    9988:	83833001 	orrhi	r3, r3, #1
    998c:	e1a00002 	mov	r0, r2
    9990:	e3530000 	cmp	r3, #0
    9994:	1a000007 	bne	99b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x50>
    9998:	e0d120d1 	ldrsb	r2, [r1], #1
    999c:	e2423030 	sub	r3, r2, #48	; 0x30
    99a0:	e3520000 	cmp	r2, #0
    99a4:	e022309c 	mla	r2, ip, r0, r3
    99a8:	e6ef3073 	uxtb	r3, r3
    99ac:	012fff1e 	bxeq	lr
    99b0:	e3530009 	cmp	r3, #9
    99b4:	9affffef 	bls	9978 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x10>
    99b8:	e3e00000 	mvn	r0, #0
    99bc:	e12fff1e 	bx	lr

000099c0 <CKernelOptions::~CKernelOptions()>:
    99c0:	e3003560 	movw	r3, #1376	; 0x560
    99c4:	e3403001 	movt	r3, #1
    99c8:	e3a02000 	mov	r2, #0
    99cc:	e5832000 	str	r2, [r3]
    99d0:	e12fff1e 	bx	lr

000099d4 <CKernelOptions::GetWidth() const>:
    99d4:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    99d8:	e12fff1e 	bx	lr

000099dc <CKernelOptions::GetHeight() const>:
    99dc:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    99e0:	e12fff1e 	bx	lr

000099e4 <CKernelOptions::GetLogDevice() const>:
    99e4:	e2800e81 	add	r0, r0, #2064	; 0x810
    99e8:	e2800008 	add	r0, r0, #8
    99ec:	e12fff1e 	bx	lr

000099f0 <CKernelOptions::GetLogLevel() const>:
    99f0:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    99f4:	e12fff1e 	bx	lr

000099f8 <CKernelOptions::GetKeyMap() const>:
    99f8:	e2800e83 	add	r0, r0, #2096	; 0x830
    99fc:	e12fff1e 	bx	lr

00009a00 <CKernelOptions::GetUSBPowerDelay() const>:
    9a00:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    9a04:	e12fff1e 	bx	lr

00009a08 <CKernelOptions::GetCPUSpeed() const>:
    9a08:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    9a0c:	e12fff1e 	bx	lr

00009a10 <CKernelOptions::GetSoCMaxTemp() const>:
    9a10:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    9a14:	e12fff1e 	bx	lr

00009a18 <CKernelOptions::Get()>:
    9a18:	e3003560 	movw	r3, #1376	; 0x560
    9a1c:	e3403001 	movt	r3, #1
    9a20:	e5930000 	ldr	r0, [r3]
    9a24:	e12fff1e 	bx	lr

00009a28 <CKernelOptions::GetToken()>:
    9a28:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    9a2c:	e1d320d0 	ldrsb	r2, [r3]
    9a30:	e3520000 	cmp	r2, #0
    9a34:	1a000005 	bne	9a50 <CKernelOptions::GetToken()+0x28>
    9a38:	ea000016 	b	9a98 <CKernelOptions::GetToken()+0x70>
    9a3c:	e2833001 	add	r3, r3, #1
    9a40:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    9a44:	e1d320d0 	ldrsb	r2, [r3]
    9a48:	e3520000 	cmp	r2, #0
    9a4c:	0a000011 	beq	9a98 <CKernelOptions::GetToken()+0x70>
    9a50:	e3520020 	cmp	r2, #32
    9a54:	0afffff8 	beq	9a3c <CKernelOptions::GetToken()+0x14>
    9a58:	e1a02003 	mov	r2, r3
    9a5c:	ea000000 	b	9a64 <CKernelOptions::GetToken()+0x3c>
    9a60:	e1a02001 	mov	r2, r1
    9a64:	e2821001 	add	r1, r2, #1
    9a68:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    9a6c:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    9a70:	e35c0000 	cmp	ip, #0
    9a74:	0a000008 	beq	9a9c <CKernelOptions::GetToken()+0x74>
    9a78:	e35c0020 	cmp	ip, #32
    9a7c:	1afffff7 	bne	9a60 <CKernelOptions::GetToken()+0x38>
    9a80:	e2822002 	add	r2, r2, #2
    9a84:	e3a0c000 	mov	ip, #0
    9a88:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    9a8c:	e1a00003 	mov	r0, r3
    9a90:	e5c1c000 	strb	ip, [r1]
    9a94:	e12fff1e 	bx	lr
    9a98:	e3a03000 	mov	r3, #0
    9a9c:	e1a00003 	mov	r0, r3
    9aa0:	e12fff1e 	bx	lr

00009aa4 <CKernelOptions::CKernelOptions()>:
    9aa4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9aa8:	e2807e81 	add	r7, r0, #2064	; 0x810
    9aac:	e2877008 	add	r7, r7, #8
    9ab0:	e1a05000 	mov	r5, r0
    9ab4:	e2809e83 	add	r9, r0, #2096	; 0x830
    9ab8:	e24dd01c 	sub	sp, sp, #28
    9abc:	e3a04000 	mov	r4, #0
    9ac0:	e3a02004 	mov	r2, #4
    9ac4:	e3a0303c 	mov	r3, #60	; 0x3c
    9ac8:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    9acc:	e30f10c8 	movw	r1, #61640	; 0xf0c8
    9ad0:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    9ad4:	e3401000 	movt	r1, #0
    9ad8:	e1a00007 	mov	r0, r7
    9adc:	e5854810 	str	r4, [r5, #2064]	; 0x810
    9ae0:	e5854814 	str	r4, [r5, #2068]	; 0x814
    9ae4:	e5854834 	str	r4, [r5, #2100]	; 0x834
    9ae8:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    9aec:	eb0012a3 	bl	e580 <strcpy>
    9af0:	e1a00009 	mov	r0, r9
    9af4:	e30f10d0 	movw	r1, #61648	; 0xf0d0
    9af8:	e3401000 	movt	r1, #0
    9afc:	eb00129f 	bl	e580 <strcpy>
    9b00:	e3003560 	movw	r3, #1376	; 0x560
    9b04:	e3403001 	movt	r3, #1
    9b08:	e28d0010 	add	r0, sp, #16
    9b0c:	e5835000 	str	r5, [r3]
    9b10:	ebfffaa0 	bl	8598 <CBcmPropertyTags::CBcmPropertyTags()>
    9b14:	e58d4000 	str	r4, [sp]
    9b18:	e1a02005 	mov	r2, r5
    9b1c:	e28d0010 	add	r0, sp, #16
    9b20:	e3a01001 	mov	r1, #1
    9b24:	e300380c 	movw	r3, #2060	; 0x80c
    9b28:	e3401005 	movt	r1, #5
    9b2c:	ebfffac5 	bl	8648 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9b30:	e1500004 	cmp	r0, r4
    9b34:	0a000040 	beq	9c3c <CKernelOptions::CKernelOptions()+0x198>
    9b38:	e5953008 	ldr	r3, [r5, #8]
    9b3c:	e3530b02 	cmp	r3, #2048	; 0x800
    9b40:	2a00003d 	bcs	9c3c <CKernelOptions::CKernelOptions()+0x198>
    9b44:	e0853003 	add	r3, r5, r3
    9b48:	e30f6124 	movw	r6, #61732	; 0xf124
    9b4c:	e30f80d4 	movw	r8, #61652	; 0xf0d4
    9b50:	e30fa0dc 	movw	sl, #61660	; 0xf0dc
    9b54:	e3406000 	movt	r6, #0
    9b58:	e3408000 	movt	r8, #0
    9b5c:	e340a000 	movt	sl, #0
    9b60:	e5c3400c 	strb	r4, [r3, #12]
    9b64:	e285300c 	add	r3, r5, #12
    9b68:	e585380c 	str	r3, [r5, #2060]	; 0x80c
    9b6c:	e1a00005 	mov	r0, r5
    9b70:	ebffffac 	bl	9a28 <CKernelOptions::GetToken()>
    9b74:	e250b000 	subs	fp, r0, #0
    9b78:	0a00002f 	beq	9c3c <CKernelOptions::CKernelOptions()+0x198>
    9b7c:	e1db30d0 	ldrsb	r3, [fp]
    9b80:	e3530000 	cmp	r3, #0
    9b84:	0a000008 	beq	9bac <CKernelOptions::CKernelOptions()+0x108>
    9b88:	e353003d 	cmp	r3, #61	; 0x3d
    9b8c:	e1a0400b 	mov	r4, fp
    9b90:	1a000002 	bne	9ba0 <CKernelOptions::CKernelOptions()+0xfc>
    9b94:	ea00002d 	b	9c50 <CKernelOptions::CKernelOptions()+0x1ac>
    9b98:	e353003d 	cmp	r3, #61	; 0x3d
    9b9c:	0a00002b 	beq	9c50 <CKernelOptions::CKernelOptions()+0x1ac>
    9ba0:	e1f430d1 	ldrsb	r3, [r4, #1]!
    9ba4:	e3530000 	cmp	r3, #0
    9ba8:	1afffffa 	bne	9b98 <CKernelOptions::CKernelOptions()+0xf4>
    9bac:	e1a01006 	mov	r1, r6
    9bb0:	e1a0000b 	mov	r0, fp
    9bb4:	eb001256 	bl	e514 <strcmp>
    9bb8:	e3500000 	cmp	r0, #0
    9bbc:	0affffea 	beq	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9bc0:	e1a01008 	mov	r1, r8
    9bc4:	e1a0000b 	mov	r0, fp
    9bc8:	eb001251 	bl	e514 <strcmp>
    9bcc:	e3500000 	cmp	r0, #0
    9bd0:	13a03000 	movne	r3, #0
    9bd4:	0affffe4 	beq	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9bd8:	e1a0100a 	mov	r1, sl
    9bdc:	e1a0000b 	mov	r0, fp
    9be0:	e58d300c 	str	r3, [sp, #12]
    9be4:	eb00124a 	bl	e514 <strcmp>
    9be8:	e59d300c 	ldr	r3, [sp, #12]
    9bec:	e2504000 	subs	r4, r0, #0
    9bf0:	0a00002a 	beq	9ca0 <CKernelOptions::CKernelOptions()+0x1fc>
    9bf4:	e30f10e4 	movw	r1, #61668	; 0xf0e4
    9bf8:	e1a0000b 	mov	r0, fp
    9bfc:	e3401000 	movt	r1, #0
    9c00:	e58d300c 	str	r3, [sp, #12]
    9c04:	eb001242 	bl	e514 <strcmp>
    9c08:	e59d300c 	ldr	r3, [sp, #12]
    9c0c:	e3500000 	cmp	r0, #0
    9c10:	1a000028 	bne	9cb8 <CKernelOptions::CKernelOptions()+0x214>
    9c14:	e3530000 	cmp	r3, #0
    9c18:	0affffd3 	beq	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9c1c:	e1d320d0 	ldrsb	r2, [r3]
    9c20:	e3520000 	cmp	r2, #0
    9c24:	0affffd0 	beq	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9c28:	e1a00003 	mov	r0, r3
    9c2c:	ebffff4d 	bl	9968 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9c30:	e3500004 	cmp	r0, #4
    9c34:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    9c38:	eaffffcb 	b	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9c3c:	e28d0010 	add	r0, sp, #16
    9c40:	ebfffa5a 	bl	85b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    9c44:	e1a00005 	mov	r0, r5
    9c48:	e28dd01c 	add	sp, sp, #28
    9c4c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c50:	e3a03000 	mov	r3, #0
    9c54:	e1a01006 	mov	r1, r6
    9c58:	e5c43000 	strb	r3, [r4]
    9c5c:	e1a0000b 	mov	r0, fp
    9c60:	eb00122b 	bl	e514 <strcmp>
    9c64:	e2843001 	add	r3, r4, #1
    9c68:	e3500000 	cmp	r0, #0
    9c6c:	1a000058 	bne	9dd4 <CKernelOptions::CKernelOptions()+0x330>
    9c70:	e3530000 	cmp	r3, #0
    9c74:	0affffbc 	beq	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9c78:	e1d420d1 	ldrsb	r2, [r4, #1]
    9c7c:	e3520000 	cmp	r2, #0
    9c80:	0affffb9 	beq	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9c84:	e1a00003 	mov	r0, r3
    9c88:	ebffff36 	bl	9968 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9c8c:	e300353c 	movw	r3, #1340	; 0x53c
    9c90:	e2402d0a 	sub	r2, r0, #640	; 0x280
    9c94:	e1520003 	cmp	r2, r3
    9c98:	95850810 	strls	r0, [r5, #2064]	; 0x810
    9c9c:	eaffffb2 	b	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9ca0:	e1a01003 	mov	r1, r3
    9ca4:	e3a02013 	mov	r2, #19
    9ca8:	e1a00007 	mov	r0, r7
    9cac:	eb00123e 	bl	e5ac <strncpy>
    9cb0:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    9cb4:	eaffffac 	b	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9cb8:	e30f10f0 	movw	r1, #61680	; 0xf0f0
    9cbc:	e1a0000b 	mov	r0, fp
    9cc0:	e3401000 	movt	r1, #0
    9cc4:	e58d300c 	str	r3, [sp, #12]
    9cc8:	eb001211 	bl	e514 <strcmp>
    9ccc:	e59d300c 	ldr	r3, [sp, #12]
    9cd0:	e2504000 	subs	r4, r0, #0
    9cd4:	1a000005 	bne	9cf0 <CKernelOptions::CKernelOptions()+0x24c>
    9cd8:	e1a01003 	mov	r1, r3
    9cdc:	e3a02002 	mov	r2, #2
    9ce0:	e1a00009 	mov	r0, r9
    9ce4:	eb001230 	bl	e5ac <strncpy>
    9ce8:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    9cec:	eaffff9e 	b	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9cf0:	e30f10f8 	movw	r1, #61688	; 0xf0f8
    9cf4:	e1a0000b 	mov	r0, fp
    9cf8:	e3401000 	movt	r1, #0
    9cfc:	e58d300c 	str	r3, [sp, #12]
    9d00:	eb001203 	bl	e514 <strcmp>
    9d04:	e59d300c 	ldr	r3, [sp, #12]
    9d08:	e3500000 	cmp	r0, #0
    9d0c:	1a00000b 	bne	9d40 <CKernelOptions::CKernelOptions()+0x29c>
    9d10:	e3530000 	cmp	r3, #0
    9d14:	0affff94 	beq	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9d18:	e1d320d0 	ldrsb	r2, [r3]
    9d1c:	e3520000 	cmp	r2, #0
    9d20:	0affff91 	beq	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9d24:	e1a00003 	mov	r0, r3
    9d28:	ebffff0e 	bl	9968 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9d2c:	e3013e78 	movw	r3, #7800	; 0x1e78
    9d30:	e24020c8 	sub	r2, r0, #200	; 0xc8
    9d34:	e1520003 	cmp	r2, r3
    9d38:	95850834 	strls	r0, [r5, #2100]	; 0x834
    9d3c:	eaffff8a 	b	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9d40:	e30f1108 	movw	r1, #61704	; 0xf108
    9d44:	e1a0000b 	mov	r0, fp
    9d48:	e3401000 	movt	r1, #0
    9d4c:	e58d300c 	str	r3, [sp, #12]
    9d50:	eb0011ef 	bl	e514 <strcmp>
    9d54:	e59d300c 	ldr	r3, [sp, #12]
    9d58:	e3500000 	cmp	r0, #0
    9d5c:	1a000007 	bne	9d80 <CKernelOptions::CKernelOptions()+0x2dc>
    9d60:	e1a00003 	mov	r0, r3
    9d64:	e30f1110 	movw	r1, #61712	; 0xf110
    9d68:	e3401000 	movt	r1, #0
    9d6c:	eb0011e8 	bl	e514 <strcmp>
    9d70:	e3500000 	cmp	r0, #0
    9d74:	03a03001 	moveq	r3, #1
    9d78:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    9d7c:	eaffff7a 	b	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9d80:	e1a0000b 	mov	r0, fp
    9d84:	e30f1118 	movw	r1, #61720	; 0xf118
    9d88:	e3401000 	movt	r1, #0
    9d8c:	e58d300c 	str	r3, [sp, #12]
    9d90:	eb0011df 	bl	e514 <strcmp>
    9d94:	e59d300c 	ldr	r3, [sp, #12]
    9d98:	e2902000 	adds	r2, r0, #0
    9d9c:	13a02001 	movne	r2, #1
    9da0:	e3530000 	cmp	r3, #0
    9da4:	03822001 	orreq	r2, r2, #1
    9da8:	e3520000 	cmp	r2, #0
    9dac:	1affff6e 	bne	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9db0:	e1d320d0 	ldrsb	r2, [r3]
    9db4:	e3520000 	cmp	r2, #0
    9db8:	0affff6b 	beq	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9dbc:	e1a00003 	mov	r0, r3
    9dc0:	ebfffee8 	bl	9968 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9dc4:	e2403028 	sub	r3, r0, #40	; 0x28
    9dc8:	e3530026 	cmp	r3, #38	; 0x26
    9dcc:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    9dd0:	eaffff65 	b	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9dd4:	e1a01008 	mov	r1, r8
    9dd8:	e1a0000b 	mov	r0, fp
    9ddc:	e58d300c 	str	r3, [sp, #12]
    9de0:	eb0011cb 	bl	e514 <strcmp>
    9de4:	e59d300c 	ldr	r3, [sp, #12]
    9de8:	e3500000 	cmp	r0, #0
    9dec:	1affff79 	bne	9bd8 <CKernelOptions::CKernelOptions()+0x134>
    9df0:	e3530000 	cmp	r3, #0
    9df4:	0affff5c 	beq	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9df8:	e1d420d1 	ldrsb	r2, [r4, #1]
    9dfc:	e3520000 	cmp	r2, #0
    9e00:	0affff59 	beq	9b6c <CKernelOptions::CKernelOptions()+0xc8>
    9e04:	e1a00003 	mov	r0, r3
    9e08:	ebfffed6 	bl	9968 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9e0c:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    9e10:	e3530f96 	cmp	r3, #600	; 0x258
    9e14:	95850814 	strls	r0, [r5, #2068]	; 0x814
    9e18:	eaffff53 	b	9b6c <CKernelOptions::CKernelOptions()+0xc8>

00009e1c <CKernelOptions::GetOptionValue(char*)>:
    9e1c:	e1d030d0 	ldrsb	r3, [r0]
    9e20:	e3530000 	cmp	r3, #0
    9e24:	1a000003 	bne	9e38 <CKernelOptions::GetOptionValue(char*)+0x1c>
    9e28:	ea000007 	b	9e4c <CKernelOptions::GetOptionValue(char*)+0x30>
    9e2c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    9e30:	e3530000 	cmp	r3, #0
    9e34:	0a000004 	beq	9e4c <CKernelOptions::GetOptionValue(char*)+0x30>
    9e38:	e353003d 	cmp	r3, #61	; 0x3d
    9e3c:	1afffffa 	bne	9e2c <CKernelOptions::GetOptionValue(char*)+0x10>
    9e40:	e2803001 	add	r3, r0, #1
    9e44:	e3a02000 	mov	r2, #0
    9e48:	e5c02000 	strb	r2, [r0]
    9e4c:	e1a00003 	mov	r0, r3
    9e50:	e12fff1e 	bx	lr

00009e54 <CKernelOptions::GetDecimal(char*)>:
    9e54:	e2503000 	subs	r3, r0, #0
    9e58:	0a000002 	beq	9e68 <CKernelOptions::GetDecimal(char*)+0x14>
    9e5c:	e1d330d0 	ldrsb	r3, [r3]
    9e60:	e3530000 	cmp	r3, #0
    9e64:	1a000001 	bne	9e70 <CKernelOptions::GetDecimal(char*)+0x1c>
    9e68:	e3e00000 	mvn	r0, #0
    9e6c:	e12fff1e 	bx	lr
    9e70:	eafffebc 	b	9968 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

00009e74 <CPageTable::CPageTable()>:
    9e74:	e3a01000 	mov	r1, #0
    9e78:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
    9e7c:	e92d4010 	push	{r4, lr}
    9e80:	e1a0c001 	mov	ip, r1
    9e84:	e1a04000 	mov	r4, r0
    9e88:	e1a03002 	mov	r3, r2
    9e8c:	e3a0e002 	mov	lr, #2
    9e90:	e3a00001 	mov	r0, #1
    9e94:	e8840006 	stm	r4, {r1, r2}
    9e98:	e5d32000 	ldrb	r2, [r3]
    9e9c:	e35c0b01 	cmp	ip, #1024	; 0x400
    9ea0:	e5d31002 	ldrb	r1, [r3, #2]
    9ea4:	e2833004 	add	r3, r3, #4
    9ea8:	e7c1201e 	bfi	r2, lr, #0, #2
    9eac:	e3811001 	orr	r1, r1, #1
    9eb0:	e6ef2072 	uxtb	r2, r2
    9eb4:	e20110f9 	and	r1, r1, #249	; 0xf9
    9eb8:	e3822004 	orr	r2, r2, #4
    9ebc:	e7c3119f 	bfc	r1, #3, #1
    9ec0:	e20220f7 	and	r2, r2, #247	; 0xf7
    9ec4:	e5431002 	strb	r1, [r3, #-2]
    9ec8:	e7c4221f 	bfc	r2, #4, #1
    9ecc:	e5432004 	strb	r2, [r3, #-4]
    9ed0:	e15320b4 	ldrh	r2, [r3, #-4]
    9ed4:	e15310b2 	ldrh	r1, [r3, #-2]
    9ed8:	e7c8229f 	bfc	r2, #5, #4
    9edc:	e14320b4 	strh	r2, [r3, #-4]
    9ee0:	e7cf121c 	bfi	r1, ip, #4, #12
    9ee4:	e28cc001 	add	ip, ip, #1
    9ee8:	e1a02422 	lsr	r2, r2, #8
    9eec:	e14310b2 	strh	r1, [r3, #-2]
    9ef0:	e20220fd 	and	r2, r2, #253	; 0xfd
    9ef4:	e7c32110 	bfi	r2, r0, #2, #2
    9ef8:	e202208f 	and	r2, r2, #143	; 0x8f
    9efc:	e7c7239f 	bfc	r2, #7, #1
    9f00:	e5432003 	strb	r2, [r3, #-3]
    9f04:	25532004 	ldrbcs	r2, [r3, #-4]
    9f08:	23822010 	orrcs	r2, r2, #16
    9f0c:	25432004 	strbcs	r2, [r3, #-4]
    9f10:	e35c0a01 	cmp	ip, #4096	; 0x1000
    9f14:	1affffdf 	bne	9e98 <CPageTable::CPageTable()+0x24>
    9f18:	eb000f9e 	bl	dd98 <CleanDataCache>
    9f1c:	e1a00004 	mov	r0, r4
    9f20:	e8bd8010 	pop	{r4, pc}

00009f24 <CPageTable::CPageTable(unsigned int)>:
    9f24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9f28:	e3a06001 	mov	r6, #1
    9f2c:	e5806000 	str	r6, [r0]
    9f30:	e1a04000 	mov	r4, r0
    9f34:	e1a05001 	mov	r5, r1
    9f38:	eb0010a8 	bl	e1e0 <palloc>
    9f3c:	e3a0c000 	mov	ip, #0
    9f40:	e30e1f84 	movw	r1, #61316	; 0xef84
    9f44:	e1a0e006 	mov	lr, r6
    9f48:	e3401000 	movt	r1, #0
    9f4c:	e1a0700c 	mov	r7, ip
    9f50:	e3a06002 	mov	r6, #2
    9f54:	e1a03000 	mov	r3, r0
    9f58:	e5840004 	str	r0, [r4, #4]
    9f5c:	ea000009 	b	9f88 <CPageTable::CPageTable(unsigned int)+0x64>
    9f60:	e6ef0072 	uxtb	r0, r2
    9f64:	e5d32002 	ldrb	r2, [r3, #2]
    9f68:	e7c30197 	bfi	r0, r7, #3, #1
    9f6c:	e5c30000 	strb	r0, [r3]
    9f70:	e3822001 	orr	r2, r2, #1
    9f74:	e5c32002 	strb	r2, [r3, #2]
    9f78:	e28cc601 	add	ip, ip, #1048576	; 0x100000
    9f7c:	e2833004 	add	r3, r3, #4
    9f80:	e35c0101 	cmp	ip, #1073741824	; 0x40000000
    9f84:	0a00001f 	beq	a008 <CPageTable::CPageTable(unsigned int)+0xe4>
    9f88:	e5d32001 	ldrb	r2, [r3, #1]
    9f8c:	e7e30a5c 	ubfx	r0, ip, #20, #4
    9f90:	e15c0001 	cmp	ip, r1
    9f94:	e386800c 	orr	r8, r6, #12
    9f98:	e20220fc 	and	r2, r2, #252	; 0xfc
    9f9c:	e1a00200 	lsl	r0, r0, #4
    9fa0:	e7c3211e 	bfi	r2, lr, #2, #2
    9fa4:	e5c30002 	strb	r0, [r3, #2]
    9fa8:	e202208f 	and	r2, r2, #143	; 0x8f
    9fac:	e1a00c2c 	lsr	r0, ip, #24
    9fb0:	e7c7239f 	bfc	r2, #7, #1
    9fb4:	e5c38000 	strb	r8, [r3]
    9fb8:	e5c32001 	strb	r2, [r3, #1]
    9fbc:	e5c30003 	strb	r0, [r3, #3]
    9fc0:	3affffec 	bcc	9f78 <CPageTable::CPageTable(unsigned int)+0x54>
    9fc4:	e155000c 	cmp	r5, ip
    9fc8:	e6ef2078 	uxtb	r2, r8
    9fcc:	e3822010 	orr	r2, r2, #16
    9fd0:	e5c32000 	strb	r2, [r3]
    9fd4:	9affffe1 	bls	9f60 <CPageTable::CPageTable(unsigned int)+0x3c>
    9fd8:	e35c0501 	cmp	ip, #4194304	; 0x400000
    9fdc:	1affffe5 	bne	9f78 <CPageTable::CPageTable(unsigned int)+0x54>
    9fe0:	e5d32000 	ldrb	r2, [r3]
    9fe4:	e3a0c605 	mov	ip, #5242880	; 0x500000
    9fe8:	e5d30002 	ldrb	r0, [r3, #2]
    9fec:	e2833004 	add	r3, r3, #4
    9ff0:	e20220fb 	and	r2, r2, #251	; 0xfb
    9ff4:	e7c32197 	bfi	r2, r7, #3, #1
    9ff8:	e3800001 	orr	r0, r0, #1
    9ffc:	e5432004 	strb	r2, [r3, #-4]
    a000:	e5430002 	strb	r0, [r3, #-2]
    a004:	eaffffdf 	b	9f88 <CPageTable::CPageTable(unsigned int)+0x64>
    a008:	eb000f62 	bl	dd98 <CleanDataCache>
    a00c:	e1a00004 	mov	r0, r4
    a010:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a014 <CPageTable::~CPageTable()>:
    a014:	e5903000 	ldr	r3, [r0]
    a018:	e92d4010 	push	{r4, lr}
    a01c:	e3530000 	cmp	r3, #0
    a020:	e1a04000 	mov	r4, r0
    a024:	0a000001 	beq	a030 <CPageTable::~CPageTable()+0x1c>
    a028:	e5900004 	ldr	r0, [r0, #4]
    a02c:	eb00108f 	bl	e270 <pfree>
    a030:	e1a00004 	mov	r0, r4
    a034:	e8bd8010 	pop	{r4, pc}

0000a038 <CPageTable::GetBaseAddress() const>:
    a038:	e5900004 	ldr	r0, [r0, #4]
    a03c:	e3800059 	orr	r0, r0, #89	; 0x59
    a040:	e12fff1e 	bx	lr

0000a044 <CScreenDevice::~CScreenDevice()>:
    a044:	e590200c 	ldr	r2, [r0, #12]
    a048:	e59f3068 	ldr	r3, [pc, #104]	; a0b8 <CScreenDevice::~CScreenDevice()+0x74>
    a04c:	e3520000 	cmp	r2, #0
    a050:	e92d4070 	push	{r4, r5, r6, lr}
    a054:	e1a04000 	mov	r4, r0
    a058:	e5803000 	str	r3, [r0]
    a05c:	0a000003 	beq	a070 <CScreenDevice::~CScreenDevice()+0x2c>
    a060:	e5900018 	ldr	r0, [r0, #24]
    a064:	e3500000 	cmp	r0, #0
    a068:	0a000000 	beq	a070 <CScreenDevice::~CScreenDevice()+0x2c>
    a06c:	ebfffb8d 	bl	8ea8 <operator delete[](void*)>
    a070:	e5945010 	ldr	r5, [r4, #16]
    a074:	e3a03000 	mov	r3, #0
    a078:	e5843018 	str	r3, [r4, #24]
    a07c:	e1550003 	cmp	r5, r3
    a080:	0a000004 	beq	a098 <CScreenDevice::~CScreenDevice()+0x54>
    a084:	e1a00005 	mov	r0, r5
    a088:	eb00127e 	bl	ea88 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    a08c:	e1a00005 	mov	r0, r5
    a090:	e3a01024 	mov	r1, #36	; 0x24
    a094:	ebfffb84 	bl	8eac <operator delete(void*, unsigned int)>
    a098:	e3a03000 	mov	r3, #0
    a09c:	e2840014 	add	r0, r4, #20
    a0a0:	e5843010 	str	r3, [r4, #16]
    a0a4:	eb000475 	bl	b280 <CCharGenerator::~CCharGenerator()>
    a0a8:	e1a00004 	mov	r0, r4
    a0ac:	eb0012f6 	bl	ec8c <CDevice::~CDevice()>
    a0b0:	e1a00004 	mov	r0, r4
    a0b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a0b8:	0000f134 	.word	0x0000f134

0000a0bc <CScreenDevice::~CScreenDevice()>:
    a0bc:	e92d4010 	push	{r4, lr}
    a0c0:	e1a04000 	mov	r4, r0
    a0c4:	ebffffde 	bl	a044 <CScreenDevice::~CScreenDevice()>
    a0c8:	e1a00004 	mov	r0, r4
    a0cc:	e3a01060 	mov	r1, #96	; 0x60
    a0d0:	ebfffb75 	bl	8eac <operator delete(void*, unsigned int)>
    a0d4:	e1a00004 	mov	r0, r4
    a0d8:	e8bd8010 	pop	{r4, pc}

0000a0dc <CScreenDevice::InvertCursor() [clone .part.6]>:
    a0dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a0e0:	e2806014 	add	r6, r0, #20
    a0e4:	e1a05000 	mov	r5, r0
    a0e8:	e3a08000 	mov	r8, #0
    a0ec:	e1a00006 	mov	r0, r6
    a0f0:	eb000467 	bl	b294 <CCharGenerator::GetUnderline() const>
    a0f4:	e1a07000 	mov	r7, r0
    a0f8:	e1a00006 	mov	r0, r6
    a0fc:	eb000462 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a100:	e1500007 	cmp	r0, r7
    a104:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    a108:	e3a04000 	mov	r4, #0
    a10c:	ea000013 	b	a160 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    a110:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    a114:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    a118:	e0843003 	add	r3, r4, r3
    a11c:	e1530002 	cmp	r3, r2
    a120:	2a00000d 	bcs	a15c <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    a124:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    a128:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    a12c:	e0872002 	add	r2, r7, r2
    a130:	e1520001 	cmp	r2, r1
    a134:	2a000008 	bcs	a15c <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    a138:	e5950020 	ldr	r0, [r5, #32]
    a13c:	e5951018 	ldr	r1, [r5, #24]
    a140:	e0233290 	mla	r3, r0, r2, r3
    a144:	e1a03083 	lsl	r3, r3, #1
    a148:	e19120b3 	ldrh	r2, [r1, r3]
    a14c:	e3520000 	cmp	r2, #0
    a150:	118180b3 	strhne	r8, [r1, r3]
    a154:	01d524b8 	ldrheq	r2, [r5, #72]	; 0x48
    a158:	018120b3 	strheq	r2, [r1, r3]
    a15c:	e2844001 	add	r4, r4, #1
    a160:	e1a00006 	mov	r0, r6
    a164:	eb000446 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a168:	e1500004 	cmp	r0, r4
    a16c:	8affffe7 	bhi	a110 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    a170:	e2877001 	add	r7, r7, #1
    a174:	eaffffdf 	b	a0f8 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000a178 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    a178:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a17c:	e1a04000 	mov	r4, r0
    a180:	e1a05001 	mov	r5, r1
    a184:	e1a07002 	mov	r7, r2
    a188:	e1a06003 	mov	r6, r3
    a18c:	eb0012ca 	bl	ecbc <CDevice::CDevice()>
    a190:	e59fc054 	ldr	ip, [pc, #84]	; a1ec <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x74>
    a194:	e2840014 	add	r0, r4, #20
    a198:	e5845004 	str	r5, [r4, #4]
    a19c:	e3a05000 	mov	r5, #0
    a1a0:	e5847008 	str	r7, [r4, #8]
    a1a4:	e584600c 	str	r6, [r4, #12]
    a1a8:	e584c000 	str	ip, [r4]
    a1ac:	e5845010 	str	r5, [r4, #16]
    a1b0:	eb00042f 	bl	b274 <CCharGenerator::CCharGenerator()>
    a1b4:	e3a03001 	mov	r3, #1
    a1b8:	e3e02020 	mvn	r2, #32
    a1bc:	e5845018 	str	r5, [r4, #24]
    a1c0:	e5845030 	str	r5, [r4, #48]	; 0x30
    a1c4:	e1a00004 	mov	r0, r4
    a1c8:	e5845034 	str	r5, [r4, #52]	; 0x34
    a1cc:	e584503c 	str	r5, [r4, #60]	; 0x3c
    a1d0:	e5845040 	str	r5, [r4, #64]	; 0x40
    a1d4:	e584504c 	str	r5, [r4, #76]	; 0x4c
    a1d8:	e5845058 	str	r5, [r4, #88]	; 0x58
    a1dc:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
    a1e0:	e5843044 	str	r3, [r4, #68]	; 0x44
    a1e4:	e584305c 	str	r3, [r4, #92]	; 0x5c
    a1e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a1ec:	0000f134 	.word	0x0000f134

0000a1f0 <CScreenDevice::GetWidth() const>:
    a1f0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    a1f4:	e12fff1e 	bx	lr

0000a1f8 <CScreenDevice::GetHeight() const>:
    a1f8:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    a1fc:	e12fff1e 	bx	lr

0000a200 <CScreenDevice::GetColumns() const>:
    a200:	e1a03000 	mov	r3, r0
    a204:	e2800014 	add	r0, r0, #20
    a208:	e92d4010 	push	{r4, lr}
    a20c:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    a210:	eb00041b 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a214:	e1a01000 	mov	r1, r0
    a218:	e1a00004 	mov	r0, r4
    a21c:	eb001086 	bl	e43c <__aeabi_uidiv>
    a220:	e8bd8010 	pop	{r4, pc}

0000a224 <CScreenDevice::GetRows() const>:
    a224:	e1a03000 	mov	r3, r0
    a228:	e2800014 	add	r0, r0, #20
    a22c:	e92d4010 	push	{r4, lr}
    a230:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    a234:	eb000414 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a238:	e1a01000 	mov	r1, r0
    a23c:	e1a00004 	mov	r0, r4
    a240:	eb00107d 	bl	e43c <__aeabi_uidiv>
    a244:	e8bd8010 	pop	{r4, pc}

0000a248 <CScreenDevice::GetStatus()>:
    a248:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a24c:	e591c038 	ldr	ip, [r1, #56]	; 0x38
    a250:	e5916018 	ldr	r6, [r1, #24]
    a254:	e591501c 	ldr	r5, [r1, #28]
    a258:	e5914030 	ldr	r4, [r1, #48]	; 0x30
    a25c:	e591e034 	ldr	lr, [r1, #52]	; 0x34
    a260:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
    a264:	e5806000 	str	r6, [r0]
    a268:	e5917040 	ldr	r7, [r1, #64]	; 0x40
    a26c:	e5805004 	str	r5, [r0, #4]
    a270:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    a274:	e5804008 	str	r4, [r0, #8]
    a278:	e1d154b8 	ldrh	r5, [r1, #72]	; 0x48
    a27c:	e580e00c 	str	lr, [r0, #12]
    a280:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    a284:	e580c010 	str	ip, [r0, #16]
    a288:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    a28c:	e5802014 	str	r2, [r0, #20]
    a290:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    a294:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    a298:	e5807018 	str	r7, [r0, #24]
    a29c:	e580601c 	str	r6, [r0, #28]
    a2a0:	e1c052b0 	strh	r5, [r0, #32]
    a2a4:	e5804024 	str	r4, [r0, #36]	; 0x24
    a2a8:	e580e028 	str	lr, [r0, #40]	; 0x28
    a2ac:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    a2b0:	e5802030 	str	r2, [r0, #48]	; 0x30
    a2b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000a2b8 <CScreenDevice::SetStatus(TScreenStatus)>:
    a2b8:	e24dd010 	sub	sp, sp, #16
    a2bc:	e92d4070 	push	{r4, r5, r6, lr}
    a2c0:	e28dc014 	add	ip, sp, #20
    a2c4:	e590e01c 	ldr	lr, [r0, #28]
    a2c8:	e88c000e 	stm	ip, {r1, r2, r3}
    a2cc:	e59d3018 	ldr	r3, [sp, #24]
    a2d0:	e15e0003 	cmp	lr, r3
    a2d4:	0a000003 	beq	a2e8 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    a2d8:	e3a00000 	mov	r0, #0
    a2dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    a2e0:	e28dd010 	add	sp, sp, #16
    a2e4:	e12fff1e 	bx	lr
    a2e8:	e5902020 	ldr	r2, [r0, #32]
    a2ec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a2f0:	e1520003 	cmp	r2, r3
    a2f4:	1afffff7 	bne	a2d8 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a2f8:	e1a04000 	mov	r4, r0
    a2fc:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    a300:	e3500000 	cmp	r0, #0
    a304:	1a000023 	bne	a398 <CScreenDevice::SetStatus(TScreenStatus)+0xe0>
    a308:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a30c:	e3530000 	cmp	r3, #0
    a310:	1afffff0 	bne	a2d8 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a314:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    a318:	e3530000 	cmp	r3, #0
    a31c:	1affffed 	bne	a2d8 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a320:	e1a0200e 	mov	r2, lr
    a324:	e59d1014 	ldr	r1, [sp, #20]
    a328:	e5940018 	ldr	r0, [r4, #24]
    a32c:	ebfffd76 	bl	990c <memcpy>
    a330:	e59d201c 	ldr	r2, [sp, #28]
    a334:	e59d3020 	ldr	r3, [sp, #32]
    a338:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
    a33c:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
    a340:	e3510000 	cmp	r1, #0
    a344:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    a348:	e59de02c 	ldr	lr, [sp, #44]	; 0x2c
    a34c:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    a350:	e1dd03b4 	ldrh	r0, [sp, #52]	; 0x34
    a354:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    a358:	e5842030 	str	r2, [r4, #48]	; 0x30
    a35c:	e5843034 	str	r3, [r4, #52]	; 0x34
    a360:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    a364:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    a368:	e5846038 	str	r6, [r4, #56]	; 0x38
    a36c:	e584503c 	str	r5, [r4, #60]	; 0x3c
    a370:	e584e040 	str	lr, [r4, #64]	; 0x40
    a374:	e584c044 	str	ip, [r4, #68]	; 0x44
    a378:	e1c404b8 	strh	r0, [r4, #72]	; 0x48
    a37c:	e584104c 	str	r1, [r4, #76]	; 0x4c
    a380:	e5842050 	str	r2, [r4, #80]	; 0x50
    a384:	e5843054 	str	r3, [r4, #84]	; 0x54
    a388:	1a00000f 	bne	a3cc <CScreenDevice::SetStatus(TScreenStatus)+0x114>
    a38c:	f57ff05f 	dmb	sy
    a390:	e3a00001 	mov	r0, #1
    a394:	eaffffd0 	b	a2dc <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    a398:	ebfffac5 	bl	8eb4 <EnterCritical>
    a39c:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    a3a0:	e3530000 	cmp	r3, #0
    a3a4:	1a000003 	bne	a3b8 <CScreenDevice::SetStatus(TScreenStatus)+0x100>
    a3a8:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    a3ac:	e3530000 	cmp	r3, #0
    a3b0:	0594e01c 	ldreq	lr, [r4, #28]
    a3b4:	0affffd9 	beq	a320 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    a3b8:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    a3bc:	e3530000 	cmp	r3, #0
    a3c0:	0affffc4 	beq	a2d8 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a3c4:	ebfffac8 	bl	8eec <LeaveCritical>
    a3c8:	eaffffc2 	b	a2d8 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    a3cc:	ebfffac6 	bl	8eec <LeaveCritical>
    a3d0:	eaffffed 	b	a38c <CScreenDevice::SetStatus(TScreenStatus)+0xd4>

0000a3d4 <CScreenDevice::CarriageReturn()>:
    a3d4:	e3a03000 	mov	r3, #0
    a3d8:	e580303c 	str	r3, [r0, #60]	; 0x3c
    a3dc:	e12fff1e 	bx	lr

0000a3e0 <CScreenDevice::CursorHome()>:
    a3e0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    a3e4:	e3a02000 	mov	r2, #0
    a3e8:	e580203c 	str	r2, [r0, #60]	; 0x3c
    a3ec:	e5803040 	str	r3, [r0, #64]	; 0x40
    a3f0:	e12fff1e 	bx	lr

0000a3f4 <CScreenDevice::CursorLeft()>:
    a3f4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    a3f8:	e92d4070 	push	{r4, r5, r6, lr}
    a3fc:	e3530000 	cmp	r3, #0
    a400:	e1a04000 	mov	r4, r0
    a404:	1a00000f 	bne	a448 <CScreenDevice::CursorLeft()+0x54>
    a408:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    a40c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    a410:	e1520003 	cmp	r2, r3
    a414:	98bd8070 	popls	{r4, r5, r6, pc}
    a418:	e2806014 	add	r6, r0, #20
    a41c:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    a420:	e1a00006 	mov	r0, r6
    a424:	eb000396 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a428:	e0455000 	sub	r5, r5, r0
    a42c:	e1a00006 	mov	r0, r6
    a430:	e584503c 	str	r5, [r4, #60]	; 0x3c
    a434:	eb000394 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a438:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a43c:	e0430000 	sub	r0, r3, r0
    a440:	e5840040 	str	r0, [r4, #64]	; 0x40
    a444:	e8bd8070 	pop	{r4, r5, r6, pc}
    a448:	e2800014 	add	r0, r0, #20
    a44c:	eb00038c 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a450:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a454:	e0430000 	sub	r0, r3, r0
    a458:	e584003c 	str	r0, [r4, #60]	; 0x3c
    a45c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a460 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    a460:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a464:	e2806014 	add	r6, r0, #20
    a468:	e1a05000 	mov	r5, r0
    a46c:	e1a04002 	mov	r4, r2
    a470:	e1a00006 	mov	r0, r6
    a474:	e1a07001 	mov	r7, r1
    a478:	eb000381 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a47c:	e2444001 	sub	r4, r4, #1
    a480:	e0040490 	mul	r4, r0, r4
    a484:	e1a00006 	mov	r0, r6
    a488:	eb00037f 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a48c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a490:	e1540003 	cmp	r4, r3
    a494:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    a498:	e2477001 	sub	r7, r7, #1
    a49c:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    a4a0:	e0000790 	mul	r0, r0, r7
    a4a4:	e1500003 	cmp	r0, r3
    a4a8:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    a4ac:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    a4b0:	e1500003 	cmp	r0, r3
    a4b4:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    a4b8:	35850040 	strcc	r0, [r5, #64]	; 0x40
    a4bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a4c0 <CScreenDevice::CursorUp()>:
    a4c0:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    a4c4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    a4c8:	e1520003 	cmp	r2, r3
    a4cc:	912fff1e 	bxls	lr
    a4d0:	e92d4010 	push	{r4, lr}
    a4d4:	e1a04000 	mov	r4, r0
    a4d8:	e2800014 	add	r0, r0, #20
    a4dc:	eb00036a 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a4e0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a4e4:	e0430000 	sub	r0, r3, r0
    a4e8:	e5840040 	str	r0, [r4, #64]	; 0x40
    a4ec:	e8bd8010 	pop	{r4, pc}

0000a4f0 <CScreenDevice::DeleteChars(unsigned int)>:
    a4f0:	e12fff1e 	bx	lr

0000a4f4 <CScreenDevice::DeleteLines(unsigned int)>:
    a4f4:	e12fff1e 	bx	lr

0000a4f8 <CScreenDevice::InsertLines(unsigned int)>:
    a4f8:	e12fff1e 	bx	lr

0000a4fc <CScreenDevice::InsertMode(int)>:
    a4fc:	e580104c 	str	r1, [r0, #76]	; 0x4c
    a500:	e12fff1e 	bx	lr

0000a504 <CScreenDevice::ReverseScroll()>:
    a504:	e12fff1e 	bx	lr

0000a508 <CScreenDevice::SetCursorMode(int)>:
    a508:	e5801044 	str	r1, [r0, #68]	; 0x44
    a50c:	e12fff1e 	bx	lr

0000a510 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    a510:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a514:	e2807014 	add	r7, r0, #20
    a518:	e1a06000 	mov	r6, r0
    a51c:	e1a05002 	mov	r5, r2
    a520:	e1a00007 	mov	r0, r7
    a524:	e1a04001 	mov	r4, r1
    a528:	eb000357 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a52c:	e2444001 	sub	r4, r4, #1
    a530:	e0040490 	mul	r4, r0, r4
    a534:	e1a00007 	mov	r0, r7
    a538:	eb000353 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a53c:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    a540:	e0000095 	mul	r0, r5, r0
    a544:	e3500000 	cmp	r0, #0
    a548:	11540002 	cmpne	r4, r2
    a54c:	33a03001 	movcc	r3, #1
    a550:	23a03000 	movcs	r3, #0
    a554:	e1500002 	cmp	r0, r2
    a558:	83a03000 	movhi	r3, #0
    a55c:	92033001 	andls	r3, r3, #1
    a560:	e1540000 	cmp	r4, r0
    a564:	23a03000 	movcs	r3, #0
    a568:	32033001 	andcc	r3, r3, #1
    a56c:	e3530000 	cmp	r3, #0
    a570:	e3a03000 	mov	r3, #0
    a574:	15864034 	strne	r4, [r6, #52]	; 0x34
    a578:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    a57c:	15860038 	strne	r0, [r6, #56]	; 0x38
    a580:	e586303c 	str	r3, [r6, #60]	; 0x3c
    a584:	e5864040 	str	r4, [r6, #64]	; 0x40
    a588:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a58c <CScreenDevice::SetStandoutMode(unsigned int)>:
    a58c:	e351001b 	cmp	r1, #27
    a590:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    a594:	ea00001d 	b	a610 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    a598:	0000a620 	.word	0x0000a620
    a59c:	0000a614 	.word	0x0000a614
    a5a0:	0000a608 	.word	0x0000a608
    a5a4:	0000a610 	.word	0x0000a610
    a5a8:	0000a610 	.word	0x0000a610
    a5ac:	0000a610 	.word	0x0000a610
    a5b0:	0000a610 	.word	0x0000a610
    a5b4:	0000a610 	.word	0x0000a610
    a5b8:	0000a610 	.word	0x0000a610
    a5bc:	0000a610 	.word	0x0000a610
    a5c0:	0000a610 	.word	0x0000a610
    a5c4:	0000a610 	.word	0x0000a610
    a5c8:	0000a610 	.word	0x0000a610
    a5cc:	0000a610 	.word	0x0000a610
    a5d0:	0000a610 	.word	0x0000a610
    a5d4:	0000a610 	.word	0x0000a610
    a5d8:	0000a610 	.word	0x0000a610
    a5dc:	0000a610 	.word	0x0000a610
    a5e0:	0000a610 	.word	0x0000a610
    a5e4:	0000a610 	.word	0x0000a610
    a5e8:	0000a610 	.word	0x0000a610
    a5ec:	0000a610 	.word	0x0000a610
    a5f0:	0000a610 	.word	0x0000a610
    a5f4:	0000a610 	.word	0x0000a610
    a5f8:	0000a610 	.word	0x0000a610
    a5fc:	0000a610 	.word	0x0000a610
    a600:	0000a610 	.word	0x0000a610
    a604:	0000a620 	.word	0x0000a620
    a608:	e3a0301f 	mov	r3, #31
    a60c:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    a610:	e12fff1e 	bx	lr
    a614:	e3a03b3e 	mov	r3, #63488	; 0xf800
    a618:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    a61c:	e12fff1e 	bx	lr
    a620:	e3e03020 	mvn	r3, #32
    a624:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    a628:	e12fff1e 	bx	lr

0000a62c <CScreenDevice::Scroll()>:
    a62c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a630:	e1a07000 	mov	r7, r0
    a634:	e2800014 	add	r0, r0, #20
    a638:	eb000313 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a63c:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    a640:	e5975020 	ldr	r5, [r7, #32]
    a644:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    a648:	e5978018 	ldr	r8, [r7, #24]
    a64c:	e0444003 	sub	r4, r4, r3
    a650:	e1a02085 	lsl	r2, r5, #1
    a654:	e0050395 	mul	r5, r5, r3
    a658:	e0885085 	add	r5, r8, r5, lsl #1
    a65c:	e0444000 	sub	r4, r4, r0
    a660:	e1a06000 	mov	r6, r0
    a664:	e0040492 	mul	r4, r2, r4
    a668:	e3540000 	cmp	r4, #0
    a66c:	1a000007 	bne	a690 <CScreenDevice::Scroll()+0x64>
    a670:	e0020692 	mul	r2, r2, r6
    a674:	e1b02122 	lsrs	r2, r2, #2
    a678:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a67c:	e1a00005 	mov	r0, r5
    a680:	e1a02102 	lsl	r2, r2, #2
    a684:	e3a01000 	mov	r1, #0
    a688:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    a68c:	ea000f76 	b	e46c <memset>
    a690:	e0803003 	add	r3, r0, r3
    a694:	e3c4900f 	bic	r9, r4, #15
    a698:	e1a00005 	mov	r0, r5
    a69c:	e0288392 	mla	r8, r2, r3, r8
    a6a0:	e1a02009 	mov	r2, r9
    a6a4:	e1a01008 	mov	r1, r8
    a6a8:	ebfffc97 	bl	990c <memcpy>
    a6ac:	e204200e 	and	r2, r4, #14
    a6b0:	e0850009 	add	r0, r5, r9
    a6b4:	e0881009 	add	r1, r8, r9
    a6b8:	ebfffc93 	bl	990c <memcpy>
    a6bc:	e5972020 	ldr	r2, [r7, #32]
    a6c0:	e3c44003 	bic	r4, r4, #3
    a6c4:	e0855004 	add	r5, r5, r4
    a6c8:	e1a02082 	lsl	r2, r2, #1
    a6cc:	eaffffe7 	b	a670 <CScreenDevice::Scroll()+0x44>

0000a6d0 <CScreenDevice::CursorDown()>:
    a6d0:	e92d4070 	push	{r4, r5, r6, lr}
    a6d4:	e2805014 	add	r5, r0, #20
    a6d8:	e1a04000 	mov	r4, r0
    a6dc:	e1a00005 	mov	r0, r5
    a6e0:	eb0002e9 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a6e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a6e8:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    a6ec:	e0800003 	add	r0, r0, r3
    a6f0:	e5840040 	str	r0, [r4, #64]	; 0x40
    a6f4:	e1500002 	cmp	r0, r2
    a6f8:	38bd8070 	popcc	{r4, r5, r6, pc}
    a6fc:	e1a00004 	mov	r0, r4
    a700:	ebffffc9 	bl	a62c <CScreenDevice::Scroll()>
    a704:	e1a00005 	mov	r0, r5
    a708:	eb0002df 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a70c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a710:	e0430000 	sub	r0, r3, r0
    a714:	e5840040 	str	r0, [r4, #64]	; 0x40
    a718:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a71c <CScreenDevice::NewLine()>:
    a71c:	e3a02000 	mov	r2, #0
    a720:	e580203c 	str	r2, [r0, #60]	; 0x3c
    a724:	eaffffe9 	b	a6d0 <CScreenDevice::CursorDown()>

0000a728 <CScreenDevice::CursorRight()>:
    a728:	e92d4010 	push	{r4, lr}
    a72c:	e1a04000 	mov	r4, r0
    a730:	e2800014 	add	r0, r0, #20
    a734:	eb0002d2 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a738:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    a73c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    a740:	e0800003 	add	r0, r0, r3
    a744:	e584003c 	str	r0, [r4, #60]	; 0x3c
    a748:	e1500002 	cmp	r0, r2
    a74c:	38bd8010 	popcc	{r4, pc}
    a750:	e3a03000 	mov	r3, #0
    a754:	e1a00004 	mov	r0, r4
    a758:	e584303c 	str	r3, [r4, #60]	; 0x3c
    a75c:	e8bd4010 	pop	{r4, lr}
    a760:	eaffffda 	b	a6d0 <CScreenDevice::CursorDown()>

0000a764 <CScreenDevice::Tabulator()>:
    a764:	e92d4070 	push	{r4, r5, r6, lr}
    a768:	e1a05000 	mov	r5, r0
    a76c:	e2800014 	add	r0, r0, #20
    a770:	eb0002c3 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a774:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    a778:	e1a04180 	lsl	r4, r0, #3
    a77c:	e0840003 	add	r0, r4, r3
    a780:	e1a01004 	mov	r1, r4
    a784:	eb000f2c 	bl	e43c <__aeabi_uidiv>
    a788:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a78c:	e0000094 	mul	r0, r4, r0
    a790:	e1500003 	cmp	r0, r3
    a794:	e585003c 	str	r0, [r5, #60]	; 0x3c
    a798:	38bd8070 	popcc	{r4, r5, r6, pc}
    a79c:	e3a03000 	mov	r3, #0
    a7a0:	e1a00005 	mov	r0, r5
    a7a4:	e585303c 	str	r3, [r5, #60]	; 0x3c
    a7a8:	e8bd4070 	pop	{r4, r5, r6, lr}
    a7ac:	eaffffc7 	b	a6d0 <CScreenDevice::CursorDown()>

0000a7b0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    a7b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7b4:	e2806014 	add	r6, r0, #20
    a7b8:	e24dd00c 	sub	sp, sp, #12
    a7bc:	e1a07000 	mov	r7, r0
    a7c0:	e1a00006 	mov	r0, r6
    a7c4:	e1a0a001 	mov	sl, r1
    a7c8:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    a7cc:	e1a09002 	mov	r9, r2
    a7d0:	e58d3004 	str	r3, [sp, #4]
    a7d4:	eb0002ac 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a7d8:	e3a08000 	mov	r8, #0
    a7dc:	e1580000 	cmp	r8, r0
    a7e0:	2a000024 	bcs	a878 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
    a7e4:	e59d3004 	ldr	r3, [sp, #4]
    a7e8:	e3a04000 	mov	r4, #0
    a7ec:	e0883003 	add	r3, r8, r3
    a7f0:	e58d3000 	str	r3, [sp]
    a7f4:	e1a00006 	mov	r0, r6
    a7f8:	e0845009 	add	r5, r4, r9
    a7fc:	eb0002a0 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a800:	e1a02004 	mov	r2, r4
    a804:	e1a03008 	mov	r3, r8
    a808:	e1a0100a 	mov	r1, sl
    a80c:	e1540000 	cmp	r4, r0
    a810:	e1a00006 	mov	r0, r6
    a814:	e2844001 	add	r4, r4, #1
    a818:	2a000011 	bcs	a864 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>
    a81c:	eb00029e 	bl	b29c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    a820:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    a824:	e3500000 	cmp	r0, #0
    a828:	11a0200b 	movne	r2, fp
    a82c:	03a02000 	moveq	r2, #0
    a830:	e1550003 	cmp	r5, r3
    a834:	2affffee 	bcs	a7f4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    a838:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    a83c:	e59d1000 	ldr	r1, [sp]
    a840:	e1510003 	cmp	r1, r3
    a844:	2affffea 	bcs	a7f4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    a848:	e5973020 	ldr	r3, [r7, #32]
    a84c:	e59d0000 	ldr	r0, [sp]
    a850:	e5971018 	ldr	r1, [r7, #24]
    a854:	e0255093 	mla	r5, r3, r0, r5
    a858:	e1a05085 	lsl	r5, r5, #1
    a85c:	e18120b5 	strh	r2, [r1, r5]
    a860:	eaffffe3 	b	a7f4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    a864:	e1a00006 	mov	r0, r6
    a868:	e2888001 	add	r8, r8, #1
    a86c:	eb000286 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a870:	e1580000 	cmp	r8, r0
    a874:	3affffda 	bcc	a7e4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    a878:	e28dd00c 	add	sp, sp, #12
    a87c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a880 <CScreenDevice::DisplayChar(char)>:
    a880:	e6ef3071 	uxtb	r3, r1
    a884:	e353001f 	cmp	r3, #31
    a888:	912fff1e 	bxls	lr
    a88c:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    a890:	e92d4010 	push	{r4, lr}
    a894:	e24dd008 	sub	sp, sp, #8
    a898:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    a89c:	e1a04000 	mov	r4, r0
    a8a0:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    a8a4:	e58dc000 	str	ip, [sp]
    a8a8:	ebffffc0 	bl	a7b0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    a8ac:	e1a00004 	mov	r0, r4
    a8b0:	e28dd008 	add	sp, sp, #8
    a8b4:	e8bd4010 	pop	{r4, lr}
    a8b8:	eaffff9a 	b	a728 <CScreenDevice::CursorRight()>

0000a8bc <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    a8bc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8c0:	e3a08000 	mov	r8, #0
    a8c4:	e2805014 	add	r5, r0, #20
    a8c8:	e1a0b000 	mov	fp, r0
    a8cc:	e1a06001 	mov	r6, r1
    a8d0:	e1a0a002 	mov	sl, r2
    a8d4:	e1a09008 	mov	r9, r8
    a8d8:	e1a00005 	mov	r0, r5
    a8dc:	eb00026a 	bl	b28c <CCharGenerator::GetCharHeight() const>
    a8e0:	e1580000 	cmp	r8, r0
    a8e4:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8e8:	e088700a 	add	r7, r8, sl
    a8ec:	e3a04000 	mov	r4, #0
    a8f0:	e1a00005 	mov	r0, r5
    a8f4:	eb000262 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a8f8:	e0843006 	add	r3, r4, r6
    a8fc:	e1540000 	cmp	r4, r0
    a900:	e2844001 	add	r4, r4, #1
    a904:	2a00000b 	bcs	a938 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    a908:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    a90c:	e1530002 	cmp	r3, r2
    a910:	2afffff6 	bcs	a8f0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    a914:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    a918:	e1570002 	cmp	r7, r2
    a91c:	2afffff3 	bcs	a8f0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    a920:	e59b2020 	ldr	r2, [fp, #32]
    a924:	e59b1018 	ldr	r1, [fp, #24]
    a928:	e0233792 	mla	r3, r2, r7, r3
    a92c:	e1a03083 	lsl	r3, r3, #1
    a930:	e18190b3 	strh	r9, [r1, r3]
    a934:	eaffffed 	b	a8f0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    a938:	e2888001 	add	r8, r8, #1
    a93c:	eaffffe5 	b	a8d8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000a940 <CScreenDevice::ClearLineEnd()>:
    a940:	e92d4070 	push	{r4, r5, r6, lr}
    a944:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a948:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    a94c:	e1540003 	cmp	r4, r3
    a950:	28bd8070 	popcs	{r4, r5, r6, pc}
    a954:	e2806014 	add	r6, r0, #20
    a958:	e1a05000 	mov	r5, r0
    a95c:	e1a01004 	mov	r1, r4
    a960:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    a964:	e1a00005 	mov	r0, r5
    a968:	ebffffd3 	bl	a8bc <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    a96c:	e1a00006 	mov	r0, r6
    a970:	eb000243 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a974:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a978:	e0844000 	add	r4, r4, r0
    a97c:	e1530004 	cmp	r3, r4
    a980:	8afffff5 	bhi	a95c <CScreenDevice::ClearLineEnd()+0x1c>
    a984:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a988 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    a988:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a98c:	e2807014 	add	r7, r0, #20
    a990:	e1a05000 	mov	r5, r0
    a994:	e590803c 	ldr	r8, [r0, #60]	; 0x3c
    a998:	e1a00007 	mov	r0, r7
    a99c:	e1a06001 	mov	r6, r1
    a9a0:	eb000237 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a9a4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    a9a8:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    a9ac:	e0268096 	mla	r6, r6, r0, r8
    a9b0:	e1560003 	cmp	r6, r3
    a9b4:	21a06003 	movcs	r6, r3
    a9b8:	e1540006 	cmp	r4, r6
    a9bc:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    a9c0:	e1a01004 	mov	r1, r4
    a9c4:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    a9c8:	e1a00005 	mov	r0, r5
    a9cc:	ebffffba 	bl	a8bc <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    a9d0:	e1a00007 	mov	r0, r7
    a9d4:	eb00022a 	bl	b284 <CCharGenerator::GetCharWidth() const>
    a9d8:	e0844000 	add	r4, r4, r0
    a9dc:	e1540006 	cmp	r4, r6
    a9e0:	3afffff6 	bcc	a9c0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    a9e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000a9e8 <CScreenDevice::EraseChars(unsigned int)>:
    a9e8:	e3510000 	cmp	r1, #0
    a9ec:	012fff1e 	bxeq	lr
    a9f0:	eaffffe4 	b	a988 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000a9f4 <CScreenDevice::ClearDisplayEnd()>:
    a9f4:	e92d4070 	push	{r4, r5, r6, lr}
    a9f8:	e1a05000 	mov	r5, r0
    a9fc:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    aa00:	e2806014 	add	r6, r0, #20
    aa04:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    aa08:	e1540003 	cmp	r4, r3
    aa0c:	2a000009 	bcs	aa38 <CScreenDevice::ClearDisplayEnd()+0x44>
    aa10:	e1a01004 	mov	r1, r4
    aa14:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    aa18:	e1a00005 	mov	r0, r5
    aa1c:	ebffffa6 	bl	a8bc <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    aa20:	e1a00006 	mov	r0, r6
    aa24:	eb000216 	bl	b284 <CCharGenerator::GetCharWidth() const>
    aa28:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    aa2c:	e0844000 	add	r4, r4, r0
    aa30:	e1530004 	cmp	r3, r4
    aa34:	8afffff5 	bhi	aa10 <CScreenDevice::ClearDisplayEnd()+0x1c>
    aa38:	e1a00006 	mov	r0, r6
    aa3c:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    aa40:	eb000211 	bl	b28c <CCharGenerator::GetCharHeight() const>
    aa44:	e2851018 	add	r1, r5, #24
    aa48:	e891000e 	ldm	r1, {r1, r2, r3}
    aa4c:	e0840000 	add	r0, r4, r0
    aa50:	e0000093 	mul	r0, r3, r0
    aa54:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    aa58:	0a000004 	beq	aa70 <CScreenDevice::ClearDisplayEnd()+0x7c>
    aa5c:	e0810080 	add	r0, r1, r0, lsl #1
    aa60:	e1a02082 	lsl	r2, r2, #1
    aa64:	e3a01000 	mov	r1, #0
    aa68:	e8bd4070 	pop	{r4, r5, r6, lr}
    aa6c:	ea000e7e 	b	e46c <memset>
    aa70:	e8bd8070 	pop	{r4, r5, r6, pc}

0000aa74 <CScreenDevice::Write(char)>:
    aa74:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    aa78:	e92d4010 	push	{r4, lr}
    aa7c:	e1a04000 	mov	r4, r0
    aa80:	e24dd008 	sub	sp, sp, #8
    aa84:	e3530007 	cmp	r3, #7
    aa88:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    aa8c:	ea000010 	b	aad4 <CScreenDevice::Write(char)+0x60>
    aa90:	0000ab20 	.word	0x0000ab20
    aa94:	0000ab80 	.word	0x0000ab80
    aa98:	0000ab9c 	.word	0x0000ab9c
    aa9c:	0000abf4 	.word	0x0000abf4
    aaa0:	0000acd0 	.word	0x0000acd0
    aaa4:	0000acf0 	.word	0x0000acf0
    aaa8:	0000ad10 	.word	0x0000ad10
    aaac:	0000aae4 	.word	0x0000aae4
    aab0:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    aab4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    aab8:	e1520003 	cmp	r2, r3
    aabc:	2a000004 	bcs	aad4 <CScreenDevice::Write(char)+0x60>
    aac0:	e2800014 	add	r0, r0, #20
    aac4:	eb0001f0 	bl	b28c <CCharGenerator::GetCharHeight() const>
    aac8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    aacc:	e0433000 	sub	r3, r3, r0
    aad0:	e5843040 	str	r3, [r4, #64]	; 0x40
    aad4:	e3a03000 	mov	r3, #0
    aad8:	e5843030 	str	r3, [r4, #48]	; 0x30
    aadc:	e28dd008 	add	sp, sp, #8
    aae0:	e8bd8010 	pop	{r4, pc}
    aae4:	e3510068 	cmp	r1, #104	; 0x68
    aae8:	0a000097 	beq	ad4c <CScreenDevice::Write(char)+0x2d8>
    aaec:	e351006c 	cmp	r1, #108	; 0x6c
    aaf0:	0a000095 	beq	ad4c <CScreenDevice::Write(char)+0x2d8>
    aaf4:	e2411030 	sub	r1, r1, #48	; 0x30
    aaf8:	e6ef3071 	uxtb	r3, r1
    aafc:	e3530009 	cmp	r3, #9
    ab00:	8afffff3 	bhi	aad4 <CScreenDevice::Write(char)+0x60>
    ab04:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    ab08:	e3a0200a 	mov	r2, #10
    ab0c:	e0211392 	mla	r1, r2, r3, r1
    ab10:	e3510063 	cmp	r1, #99	; 0x63
    ab14:	e5841050 	str	r1, [r4, #80]	; 0x50
    ab18:	8affffed 	bhi	aad4 <CScreenDevice::Write(char)+0x60>
    ab1c:	eaffffee 	b	aadc <CScreenDevice::Write(char)+0x68>
    ab20:	e2413008 	sub	r3, r1, #8
    ab24:	e3530013 	cmp	r3, #19
    ab28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ab2c:	ea0000ec 	b	aee4 <CScreenDevice::Write(char)+0x470>
    ab30:	0000adb8 	.word	0x0000adb8
    ab34:	0000adac 	.word	0x0000adac
    ab38:	0000ad98 	.word	0x0000ad98
    ab3c:	0000aee4 	.word	0x0000aee4
    ab40:	0000aee4 	.word	0x0000aee4
    ab44:	0000ad8c 	.word	0x0000ad8c
    ab48:	0000aee4 	.word	0x0000aee4
    ab4c:	0000aee4 	.word	0x0000aee4
    ab50:	0000aee4 	.word	0x0000aee4
    ab54:	0000aee4 	.word	0x0000aee4
    ab58:	0000aee4 	.word	0x0000aee4
    ab5c:	0000aee4 	.word	0x0000aee4
    ab60:	0000aee4 	.word	0x0000aee4
    ab64:	0000aee4 	.word	0x0000aee4
    ab68:	0000aee4 	.word	0x0000aee4
    ab6c:	0000aee4 	.word	0x0000aee4
    ab70:	0000aee4 	.word	0x0000aee4
    ab74:	0000aee4 	.word	0x0000aee4
    ab78:	0000aee4 	.word	0x0000aee4
    ab7c:	0000ad80 	.word	0x0000ad80
    ab80:	e351004d 	cmp	r1, #77	; 0x4d
    ab84:	0affffd2 	beq	aad4 <CScreenDevice::Write(char)+0x60>
    ab88:	e351005b 	cmp	r1, #91	; 0x5b
    ab8c:	03a03002 	moveq	r3, #2
    ab90:	05803030 	streq	r3, [r0, #48]	; 0x30
    ab94:	0affffd0 	beq	aadc <CScreenDevice::Write(char)+0x68>
    ab98:	eaffffcd 	b	aad4 <CScreenDevice::Write(char)+0x60>
    ab9c:	e241303f 	sub	r3, r1, #63	; 0x3f
    aba0:	e3530011 	cmp	r3, #17
    aba4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    aba8:	ea0000d9 	b	af14 <CScreenDevice::Write(char)+0x4a0>
    abac:	0000aea0 	.word	0x0000aea0
    abb0:	0000af14 	.word	0x0000af14
    abb4:	0000aab0 	.word	0x0000aab0
    abb8:	0000aed4 	.word	0x0000aed4
    abbc:	0000aec4 	.word	0x0000aec4
    abc0:	0000af14 	.word	0x0000af14
    abc4:	0000af14 	.word	0x0000af14
    abc8:	0000af14 	.word	0x0000af14
    abcc:	0000af14 	.word	0x0000af14
    abd0:	0000aeac 	.word	0x0000aeac
    abd4:	0000af14 	.word	0x0000af14
    abd8:	0000ae90 	.word	0x0000ae90
    abdc:	0000ae80 	.word	0x0000ae80
    abe0:	0000aad4 	.word	0x0000aad4
    abe4:	0000aad4 	.word	0x0000aad4
    abe8:	0000af14 	.word	0x0000af14
    abec:	0000af14 	.word	0x0000af14
    abf0:	0000aad4 	.word	0x0000aad4
    abf4:	e241303b 	sub	r3, r1, #59	; 0x3b
    abf8:	e3530032 	cmp	r3, #50	; 0x32
    abfc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ac00:	eaffffbb 	b	aaf4 <CScreenDevice::Write(char)+0x80>
    ac04:	0000ae74 	.word	0x0000ae74
    ac08:	0000aaf4 	.word	0x0000aaf4
    ac0c:	0000aaf4 	.word	0x0000aaf4
    ac10:	0000aaf4 	.word	0x0000aaf4
    ac14:	0000aaf4 	.word	0x0000aaf4
    ac18:	0000aaf4 	.word	0x0000aaf4
    ac1c:	0000aaf4 	.word	0x0000aaf4
    ac20:	0000aaf4 	.word	0x0000aaf4
    ac24:	0000aaf4 	.word	0x0000aaf4
    ac28:	0000aaf4 	.word	0x0000aaf4
    ac2c:	0000aaf4 	.word	0x0000aaf4
    ac30:	0000aaf4 	.word	0x0000aaf4
    ac34:	0000aaf4 	.word	0x0000aaf4
    ac38:	0000aaf4 	.word	0x0000aaf4
    ac3c:	0000aaf4 	.word	0x0000aaf4
    ac40:	0000aaf4 	.word	0x0000aaf4
    ac44:	0000aaf4 	.word	0x0000aaf4
    ac48:	0000aad4 	.word	0x0000aad4
    ac4c:	0000aad4 	.word	0x0000aad4
    ac50:	0000aaf4 	.word	0x0000aaf4
    ac54:	0000aaf4 	.word	0x0000aaf4
    ac58:	0000aad4 	.word	0x0000aad4
    ac5c:	0000aaf4 	.word	0x0000aaf4
    ac60:	0000aaf4 	.word	0x0000aaf4
    ac64:	0000aaf4 	.word	0x0000aaf4
    ac68:	0000aaf4 	.word	0x0000aaf4
    ac6c:	0000aaf4 	.word	0x0000aaf4
    ac70:	0000aaf4 	.word	0x0000aaf4
    ac74:	0000aaf4 	.word	0x0000aaf4
    ac78:	0000adc4 	.word	0x0000adc4
    ac7c:	0000aaf4 	.word	0x0000aaf4
    ac80:	0000aaf4 	.word	0x0000aaf4
    ac84:	0000aaf4 	.word	0x0000aaf4
    ac88:	0000aaf4 	.word	0x0000aaf4
    ac8c:	0000aaf4 	.word	0x0000aaf4
    ac90:	0000aaf4 	.word	0x0000aaf4
    ac94:	0000aaf4 	.word	0x0000aaf4
    ac98:	0000aaf4 	.word	0x0000aaf4
    ac9c:	0000aaf4 	.word	0x0000aaf4
    aca0:	0000aaf4 	.word	0x0000aaf4
    aca4:	0000aaf4 	.word	0x0000aaf4
    aca8:	0000aaf4 	.word	0x0000aaf4
    acac:	0000aaf4 	.word	0x0000aaf4
    acb0:	0000aaf4 	.word	0x0000aaf4
    acb4:	0000aaf4 	.word	0x0000aaf4
    acb8:	0000add8 	.word	0x0000add8
    acbc:	0000aaf4 	.word	0x0000aaf4
    acc0:	0000aaf4 	.word	0x0000aaf4
    acc4:	0000aaf4 	.word	0x0000aaf4
    acc8:	0000add8 	.word	0x0000add8
    accc:	0000adf4 	.word	0x0000adf4
    acd0:	e2411030 	sub	r1, r1, #48	; 0x30
    acd4:	e6ef3071 	uxtb	r3, r1
    acd8:	e3530009 	cmp	r3, #9
    acdc:	8affff7c 	bhi	aad4 <CScreenDevice::Write(char)+0x60>
    ace0:	e3a03007 	mov	r3, #7
    ace4:	e5801050 	str	r1, [r0, #80]	; 0x50
    ace8:	e5803030 	str	r3, [r0, #48]	; 0x30
    acec:	eaffff7a 	b	aadc <CScreenDevice::Write(char)+0x68>
    acf0:	e2411030 	sub	r1, r1, #48	; 0x30
    acf4:	e6ef3071 	uxtb	r3, r1
    acf8:	e3530009 	cmp	r3, #9
    acfc:	8affff74 	bhi	aad4 <CScreenDevice::Write(char)+0x60>
    ad00:	e3a03006 	mov	r3, #6
    ad04:	e5801054 	str	r1, [r0, #84]	; 0x54
    ad08:	e5803030 	str	r3, [r0, #48]	; 0x30
    ad0c:	eaffff72 	b	aadc <CScreenDevice::Write(char)+0x68>
    ad10:	e3510048 	cmp	r1, #72	; 0x48
    ad14:	0a00008f 	beq	af58 <CScreenDevice::Write(char)+0x4e4>
    ad18:	e3510072 	cmp	r1, #114	; 0x72
    ad1c:	0a000011 	beq	ad68 <CScreenDevice::Write(char)+0x2f4>
    ad20:	e2411030 	sub	r1, r1, #48	; 0x30
    ad24:	e6ef3071 	uxtb	r3, r1
    ad28:	e3530009 	cmp	r3, #9
    ad2c:	8affff68 	bhi	aad4 <CScreenDevice::Write(char)+0x60>
    ad30:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    ad34:	e3a0200a 	mov	r2, #10
    ad38:	e0211392 	mla	r1, r2, r3, r1
    ad3c:	e35100c7 	cmp	r1, #199	; 0xc7
    ad40:	e5801054 	str	r1, [r0, #84]	; 0x54
    ad44:	8affff62 	bhi	aad4 <CScreenDevice::Write(char)+0x60>
    ad48:	eaffff63 	b	aadc <CScreenDevice::Write(char)+0x68>
    ad4c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    ad50:	e3530019 	cmp	r3, #25
    ad54:	02411068 	subeq	r1, r1, #104	; 0x68
    ad58:	016f1f11 	clzeq	r1, r1
    ad5c:	01a012a1 	lsreq	r1, r1, #5
    ad60:	05841044 	streq	r1, [r4, #68]	; 0x44
    ad64:	eaffff5a 	b	aad4 <CScreenDevice::Write(char)+0x60>
    ad68:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    ad6c:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    ad70:	ebfffde6 	bl	a510 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    ad74:	e3a03000 	mov	r3, #0
    ad78:	e5843030 	str	r3, [r4, #48]	; 0x30
    ad7c:	eaffff56 	b	aadc <CScreenDevice::Write(char)+0x68>
    ad80:	e3a03001 	mov	r3, #1
    ad84:	e5803030 	str	r3, [r0, #48]	; 0x30
    ad88:	eaffff53 	b	aadc <CScreenDevice::Write(char)+0x68>
    ad8c:	e3a03000 	mov	r3, #0
    ad90:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ad94:	eaffff50 	b	aadc <CScreenDevice::Write(char)+0x68>
    ad98:	e3a03000 	mov	r3, #0
    ad9c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ada0:	e28dd008 	add	sp, sp, #8
    ada4:	e8bd4010 	pop	{r4, lr}
    ada8:	eafffe48 	b	a6d0 <CScreenDevice::CursorDown()>
    adac:	e28dd008 	add	sp, sp, #8
    adb0:	e8bd4010 	pop	{r4, lr}
    adb4:	eafffe6a 	b	a764 <CScreenDevice::Tabulator()>
    adb8:	e28dd008 	add	sp, sp, #8
    adbc:	e8bd4010 	pop	{r4, lr}
    adc0:	eafffd8b 	b	a3f4 <CScreenDevice::CursorLeft()>
    adc4:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    adc8:	e3510000 	cmp	r1, #0
    adcc:	0affff40 	beq	aad4 <CScreenDevice::Write(char)+0x60>
    add0:	ebfffeec 	bl	a988 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    add4:	eaffff3e 	b	aad4 <CScreenDevice::Write(char)+0x60>
    add8:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    addc:	e3530004 	cmp	r3, #4
    ade0:	02411068 	subeq	r1, r1, #104	; 0x68
    ade4:	016f1f11 	clzeq	r1, r1
    ade8:	01a012a1 	lsreq	r1, r1, #5
    adec:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    adf0:	eaffff37 	b	aad4 <CScreenDevice::Write(char)+0x60>
    adf4:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    adf8:	e353001b 	cmp	r3, #27
    adfc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ae00:	eaffff33 	b	aad4 <CScreenDevice::Write(char)+0x60>
    ae04:	0000af4c 	.word	0x0000af4c
    ae08:	0000af40 	.word	0x0000af40
    ae0c:	0000af34 	.word	0x0000af34
    ae10:	0000aad4 	.word	0x0000aad4
    ae14:	0000aad4 	.word	0x0000aad4
    ae18:	0000aad4 	.word	0x0000aad4
    ae1c:	0000aad4 	.word	0x0000aad4
    ae20:	0000aad4 	.word	0x0000aad4
    ae24:	0000aad4 	.word	0x0000aad4
    ae28:	0000aad4 	.word	0x0000aad4
    ae2c:	0000aad4 	.word	0x0000aad4
    ae30:	0000aad4 	.word	0x0000aad4
    ae34:	0000aad4 	.word	0x0000aad4
    ae38:	0000aad4 	.word	0x0000aad4
    ae3c:	0000aad4 	.word	0x0000aad4
    ae40:	0000aad4 	.word	0x0000aad4
    ae44:	0000aad4 	.word	0x0000aad4
    ae48:	0000aad4 	.word	0x0000aad4
    ae4c:	0000aad4 	.word	0x0000aad4
    ae50:	0000aad4 	.word	0x0000aad4
    ae54:	0000aad4 	.word	0x0000aad4
    ae58:	0000aad4 	.word	0x0000aad4
    ae5c:	0000aad4 	.word	0x0000aad4
    ae60:	0000aad4 	.word	0x0000aad4
    ae64:	0000aad4 	.word	0x0000aad4
    ae68:	0000aad4 	.word	0x0000aad4
    ae6c:	0000aad4 	.word	0x0000aad4
    ae70:	0000af4c 	.word	0x0000af4c
    ae74:	e3a03005 	mov	r3, #5
    ae78:	e5803030 	str	r3, [r0, #48]	; 0x30
    ae7c:	eaffff16 	b	aadc <CScreenDevice::Write(char)+0x68>
    ae80:	ebfffeae 	bl	a940 <CScreenDevice::ClearLineEnd()>
    ae84:	e3a03000 	mov	r3, #0
    ae88:	e5843030 	str	r3, [r4, #48]	; 0x30
    ae8c:	eaffff12 	b	aadc <CScreenDevice::Write(char)+0x68>
    ae90:	ebfffed7 	bl	a9f4 <CScreenDevice::ClearDisplayEnd()>
    ae94:	e3a03000 	mov	r3, #0
    ae98:	e5843030 	str	r3, [r4, #48]	; 0x30
    ae9c:	eaffff0e 	b	aadc <CScreenDevice::Write(char)+0x68>
    aea0:	e3a03004 	mov	r3, #4
    aea4:	e5803030 	str	r3, [r0, #48]	; 0x30
    aea8:	eaffff0b 	b	aadc <CScreenDevice::Write(char)+0x68>
    aeac:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    aeb0:	e3a03000 	mov	r3, #0
    aeb4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    aeb8:	e5803030 	str	r3, [r0, #48]	; 0x30
    aebc:	e5802040 	str	r2, [r0, #64]	; 0x40
    aec0:	eaffff05 	b	aadc <CScreenDevice::Write(char)+0x68>
    aec4:	ebfffe17 	bl	a728 <CScreenDevice::CursorRight()>
    aec8:	e3a03000 	mov	r3, #0
    aecc:	e5843030 	str	r3, [r4, #48]	; 0x30
    aed0:	eaffff01 	b	aadc <CScreenDevice::Write(char)+0x68>
    aed4:	ebfffdfd 	bl	a6d0 <CScreenDevice::CursorDown()>
    aed8:	e3a03000 	mov	r3, #0
    aedc:	e5843030 	str	r3, [r4, #48]	; 0x30
    aee0:	eafffefd 	b	aadc <CScreenDevice::Write(char)+0x68>
    aee4:	e6ef3071 	uxtb	r3, r1
    aee8:	e353001f 	cmp	r3, #31
    aeec:	9afffefa 	bls	aadc <CScreenDevice::Write(char)+0x68>
    aef0:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    aef4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    aef8:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    aefc:	e58dc000 	str	ip, [sp]
    af00:	ebfffe2a 	bl	a7b0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    af04:	e1a00004 	mov	r0, r4
    af08:	e28dd008 	add	sp, sp, #8
    af0c:	e8bd4010 	pop	{r4, lr}
    af10:	eafffe04 	b	a728 <CScreenDevice::CursorRight()>
    af14:	e2411030 	sub	r1, r1, #48	; 0x30
    af18:	e6ef3071 	uxtb	r3, r1
    af1c:	e3530009 	cmp	r3, #9
    af20:	8afffeeb 	bhi	aad4 <CScreenDevice::Write(char)+0x60>
    af24:	e3a03003 	mov	r3, #3
    af28:	e5801050 	str	r1, [r0, #80]	; 0x50
    af2c:	e5803030 	str	r3, [r0, #48]	; 0x30
    af30:	eafffee9 	b	aadc <CScreenDevice::Write(char)+0x68>
    af34:	e3a0301f 	mov	r3, #31
    af38:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    af3c:	eafffee4 	b	aad4 <CScreenDevice::Write(char)+0x60>
    af40:	e3a03b3e 	mov	r3, #63488	; 0xf800
    af44:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    af48:	eafffee1 	b	aad4 <CScreenDevice::Write(char)+0x60>
    af4c:	e3e03020 	mvn	r3, #32
    af50:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    af54:	eafffede 	b	aad4 <CScreenDevice::Write(char)+0x60>
    af58:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    af5c:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    af60:	ebfffd3e 	bl	a460 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    af64:	e3a03000 	mov	r3, #0
    af68:	e5843030 	str	r3, [r4, #48]	; 0x30
    af6c:	eafffeda 	b	aadc <CScreenDevice::Write(char)+0x68>

0000af70 <CScreenDevice::Write(void const*, unsigned int)>:
    af70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    af74:	e1a05000 	mov	r5, r0
    af78:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    af7c:	e1a06001 	mov	r6, r1
    af80:	e1a08002 	mov	r8, r2
    af84:	e3500000 	cmp	r0, #0
    af88:	1a000026 	bne	b028 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    af8c:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    af90:	e3a03001 	mov	r3, #1
    af94:	e5853058 	str	r3, [r5, #88]	; 0x58
    af98:	e3540000 	cmp	r4, #0
    af9c:	1a00001a 	bne	b00c <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    afa0:	e3580000 	cmp	r8, #0
    afa4:	e2487001 	sub	r7, r8, #1
    afa8:	0a00000b 	beq	afdc <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    afac:	e1a04006 	mov	r4, r6
    afb0:	e0d410d1 	ldrsb	r1, [r4], #1
    afb4:	e1a00005 	mov	r0, r5
    afb8:	ebfffead 	bl	aa74 <CScreenDevice::Write(char)>
    afbc:	e2643001 	rsb	r3, r4, #1
    afc0:	e0833007 	add	r3, r3, r7
    afc4:	e1760003 	cmn	r6, r3
    afc8:	1afffff8 	bne	afb0 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    afcc:	e2874001 	add	r4, r7, #1
    afd0:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    afd4:	e3530000 	cmp	r3, #0
    afd8:	1a000008 	bne	b000 <CScreenDevice::Write(void const*, unsigned int)+0x90>
    afdc:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    afe0:	e3a02000 	mov	r2, #0
    afe4:	e5852058 	str	r2, [r5, #88]	; 0x58
    afe8:	e1530002 	cmp	r3, r2
    afec:	0a000000 	beq	aff4 <CScreenDevice::Write(void const*, unsigned int)+0x84>
    aff0:	ebfff7bd 	bl	8eec <LeaveCritical>
    aff4:	f57ff05f 	dmb	sy
    aff8:	e1a00004 	mov	r0, r4
    affc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b000:	e1a00005 	mov	r0, r5
    b004:	ebfffc34 	bl	a0dc <CScreenDevice::InvertCursor() [clone .part.6]>
    b008:	eafffff3 	b	afdc <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    b00c:	e1a00005 	mov	r0, r5
    b010:	e2487001 	sub	r7, r8, #1
    b014:	ebfffc30 	bl	a0dc <CScreenDevice::InvertCursor() [clone .part.6]>
    b018:	e3580000 	cmp	r8, #0
    b01c:	1affffe2 	bne	afac <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    b020:	e1a04008 	mov	r4, r8
    b024:	eaffffe9 	b	afd0 <CScreenDevice::Write(void const*, unsigned int)+0x60>
    b028:	ebfff7a1 	bl	8eb4 <EnterCritical>
    b02c:	eaffffd6 	b	af8c <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000b030 <CScreenDevice::Initialize()>:
    b030:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b034:	e1a04000 	mov	r4, r0
    b038:	e590500c 	ldr	r5, [r0, #12]
    b03c:	e24dd00c 	sub	sp, sp, #12
    b040:	e3550000 	cmp	r5, #0
    b044:	0a00002b 	beq	b0f8 <CScreenDevice::Initialize()+0xc8>
    b048:	e5903004 	ldr	r3, [r0, #4]
    b04c:	e5902008 	ldr	r2, [r0, #8]
    b050:	e5803024 	str	r3, [r0, #36]	; 0x24
    b054:	e0000392 	mul	r0, r2, r3
    b058:	e5843020 	str	r3, [r4, #32]
    b05c:	e5842028 	str	r2, [r4, #40]	; 0x28
    b060:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    b064:	e1a00080 	lsl	r0, r0, #1
    b068:	e584001c 	str	r0, [r4, #28]
    b06c:	23e00000 	mvncs	r0, #0
    b070:	ebfff78a 	bl	8ea0 <operator new[](unsigned int)>
    b074:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    b078:	e5840018 	str	r0, [r4, #24]
    b07c:	e2846014 	add	r6, r4, #20
    b080:	e1a00006 	mov	r0, r6
    b084:	eb000080 	bl	b28c <CCharGenerator::GetCharHeight() const>
    b088:	e1a01000 	mov	r1, r0
    b08c:	e1a00007 	mov	r0, r7
    b090:	eb000ce9 	bl	e43c <__aeabi_uidiv>
    b094:	e1a05000 	mov	r5, r0
    b098:	e1a00006 	mov	r0, r6
    b09c:	eb00007a 	bl	b28c <CCharGenerator::GetCharHeight() const>
    b0a0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    b0a4:	e3a02000 	mov	r2, #0
    b0a8:	e584203c 	str	r2, [r4, #60]	; 0x3c
    b0ac:	e5843040 	str	r3, [r4, #64]	; 0x40
    b0b0:	e0050590 	mul	r5, r0, r5
    b0b4:	e1a00004 	mov	r0, r4
    b0b8:	e584502c 	str	r5, [r4, #44]	; 0x2c
    b0bc:	e5845038 	str	r5, [r4, #56]	; 0x38
    b0c0:	ebfffe4b 	bl	a9f4 <CScreenDevice::ClearDisplayEnd()>
    b0c4:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    b0c8:	e3530000 	cmp	r3, #0
    b0cc:	1a000031 	bne	b198 <CScreenDevice::Initialize()+0x168>
    b0d0:	eb0000eb 	bl	b484 <CDeviceNameService::Get()>
    b0d4:	e30f10c8 	movw	r1, #61640	; 0xf0c8
    b0d8:	e1a02004 	mov	r2, r4
    b0dc:	e3a03000 	mov	r3, #0
    b0e0:	e3401000 	movt	r1, #0
    b0e4:	e3a05001 	mov	r5, #1
    b0e8:	eb00009c 	bl	b360 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    b0ec:	e1a00005 	mov	r0, r5
    b0f0:	e28dd00c 	add	sp, sp, #12
    b0f4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b0f8:	e3a00024 	mov	r0, #36	; 0x24
    b0fc:	ebfff766 	bl	8e9c <operator new(unsigned int)>
    b100:	e5942008 	ldr	r2, [r4, #8]
    b104:	e5941004 	ldr	r1, [r4, #4]
    b108:	e3a03010 	mov	r3, #16
    b10c:	e58d5004 	str	r5, [sp, #4]
    b110:	e58d5000 	str	r5, [sp]
    b114:	e1a06000 	mov	r6, r0
    b118:	eb000e0c 	bl	e950 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b11c:	e5846010 	str	r6, [r4, #16]
    b120:	e1a00006 	mov	r0, r6
    b124:	eb000e73 	bl	eaf8 <CBcmFrameBuffer::Initialize()>
    b128:	e3500000 	cmp	r0, #0
    b12c:	0affffee 	beq	b0ec <CScreenDevice::Initialize()+0xbc>
    b130:	e5940010 	ldr	r0, [r4, #16]
    b134:	eb000eaa 	bl	ebe4 <CBcmFrameBuffer::GetDepth() const>
    b138:	e3500010 	cmp	r0, #16
    b13c:	1affffea 	bne	b0ec <CScreenDevice::Initialize()+0xbc>
    b140:	e5940010 	ldr	r0, [r4, #16]
    b144:	eb000ea8 	bl	ebec <CBcmFrameBuffer::GetBuffer() const>
    b148:	e5840018 	str	r0, [r4, #24]
    b14c:	e5940010 	ldr	r0, [r4, #16]
    b150:	eb000ea7 	bl	ebf4 <CBcmFrameBuffer::GetSize() const>
    b154:	e584001c 	str	r0, [r4, #28]
    b158:	e5940010 	ldr	r0, [r4, #16]
    b15c:	eb000e9e 	bl	ebdc <CBcmFrameBuffer::GetPitch() const>
    b160:	e5840020 	str	r0, [r4, #32]
    b164:	e5940010 	ldr	r0, [r4, #16]
    b168:	eb000e93 	bl	ebbc <CBcmFrameBuffer::GetWidth() const>
    b16c:	e5840024 	str	r0, [r4, #36]	; 0x24
    b170:	e5940010 	ldr	r0, [r4, #16]
    b174:	eb000e92 	bl	ebc4 <CBcmFrameBuffer::GetHeight() const>
    b178:	e5943020 	ldr	r3, [r4, #32]
    b17c:	e3130003 	tst	r3, #3
    b180:	01a030a3 	lsreq	r3, r3, #1
    b184:	05843020 	streq	r3, [r4, #32]
    b188:	e1a07000 	mov	r7, r0
    b18c:	e5840028 	str	r0, [r4, #40]	; 0x28
    b190:	0affffb9 	beq	b07c <CScreenDevice::Initialize()+0x4c>
    b194:	eaffffd4 	b	b0ec <CScreenDevice::Initialize()+0xbc>
    b198:	e1a00004 	mov	r0, r4
    b19c:	ebfffbce 	bl	a0dc <CScreenDevice::InvertCursor() [clone .part.6]>
    b1a0:	eaffffca 	b	b0d0 <CScreenDevice::Initialize()+0xa0>

0000b1a4 <CScreenDevice::InvertCursor()>:
    b1a4:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    b1a8:	e3530000 	cmp	r3, #0
    b1ac:	012fff1e 	bxeq	lr
    b1b0:	eafffbc9 	b	a0dc <CScreenDevice::InvertCursor() [clone .part.6]>

0000b1b4 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    b1b4:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    b1b8:	e15c0001 	cmp	ip, r1
    b1bc:	912fff1e 	bxls	lr
    b1c0:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    b1c4:	e15c0002 	cmp	ip, r2
    b1c8:	8590c020 	ldrhi	ip, [r0, #32]
    b1cc:	85900018 	ldrhi	r0, [r0, #24]
    b1d0:	8022129c 	mlahi	r2, ip, r2, r1
    b1d4:	81a02082 	lslhi	r2, r2, #1
    b1d8:	818030b2 	strhhi	r3, [r0, r2]
    b1dc:	e12fff1e 	bx	lr

0000b1e0 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    b1e0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b1e4:	e1530001 	cmp	r3, r1
    b1e8:	9a000008 	bls	b210 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    b1ec:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    b1f0:	e1530002 	cmp	r3, r2
    b1f4:	9a000005 	bls	b210 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    b1f8:	e590c020 	ldr	ip, [r0, #32]
    b1fc:	e5903018 	ldr	r3, [r0, #24]
    b200:	e022129c 	mla	r2, ip, r2, r1
    b204:	e1a02082 	lsl	r2, r2, #1
    b208:	e19300b2 	ldrh	r0, [r3, r2]
    b20c:	e12fff1e 	bx	lr
    b210:	e3a00000 	mov	r0, #0
    b214:	e12fff1e 	bx	lr

0000b218 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    b218:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b21c:	e1a05000 	mov	r5, r0
    b220:	e24dd00c 	sub	sp, sp, #12
    b224:	e2800014 	add	r0, r0, #20
    b228:	e1a06002 	mov	r6, r2
    b22c:	e1a04001 	mov	r4, r1
    b230:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    b234:	eb000012 	bl	b284 <CCharGenerator::GetCharWidth() const>
    b238:	e2044003 	and	r4, r4, #3
    b23c:	e2061003 	and	r1, r6, #3
    b240:	e30f312c 	movw	r3, #61740	; 0xf12c
    b244:	e3403000 	movt	r3, #0
    b248:	e0831001 	add	r1, r3, r1
    b24c:	e3a02b3e 	mov	r2, #63488	; 0xf800
    b250:	e3a03000 	mov	r3, #0
    b254:	e58d2000 	str	r2, [sp]
    b258:	e1d111dc 	ldrsb	r1, [r1, #28]
    b25c:	e0240094 	mla	r4, r4, r0, r0
    b260:	e1a00005 	mov	r0, r5
    b264:	e0472004 	sub	r2, r7, r4
    b268:	ebfffd50 	bl	a7b0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    b26c:	e28dd00c 	add	sp, sp, #12
    b270:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000b274 <CCharGenerator::CCharGenerator()>:
    b274:	e3a03008 	mov	r3, #8
    b278:	e5803000 	str	r3, [r0]
    b27c:	e12fff1e 	bx	lr

0000b280 <CCharGenerator::~CCharGenerator()>:
    b280:	e12fff1e 	bx	lr

0000b284 <CCharGenerator::GetCharWidth() const>:
    b284:	e5900000 	ldr	r0, [r0]
    b288:	e12fff1e 	bx	lr

0000b28c <CCharGenerator::GetCharHeight() const>:
    b28c:	e3a00013 	mov	r0, #19
    b290:	e12fff1e 	bx	lr

0000b294 <CCharGenerator::GetUnderline() const>:
    b294:	e3a00010 	mov	r0, #16
    b298:	e12fff1e 	bx	lr

0000b29c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    b29c:	e6ef1071 	uxtb	r1, r1
    b2a0:	e2411021 	sub	r1, r1, #33	; 0x21
    b2a4:	e353000f 	cmp	r3, #15
    b2a8:	935100de 	cmpls	r1, #222	; 0xde
    b2ac:	8a000008 	bhi	b2d4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x38>
    b2b0:	e30f0150 	movw	r0, #61776	; 0xf150
    b2b4:	e3400000 	movt	r0, #0
    b2b8:	e0801201 	add	r1, r0, r1, lsl #4
    b2bc:	e3a00080 	mov	r0, #128	; 0x80
    b2c0:	e7d13003 	ldrb	r3, [r1, r3]
    b2c4:	e0133250 	ands	r3, r3, r0, asr r2
    b2c8:	13a00001 	movne	r0, #1
    b2cc:	03a00000 	moveq	r0, #0
    b2d0:	e12fff1e 	bx	lr
    b2d4:	e3a00000 	mov	r0, #0
    b2d8:	e12fff1e 	bx	lr

0000b2dc <CDeviceNameService::CDeviceNameService()>:
    b2dc:	e3003564 	movw	r3, #1380	; 0x564
    b2e0:	e3403001 	movt	r3, #1
    b2e4:	e3a01000 	mov	r1, #0
    b2e8:	e5801000 	str	r1, [r0]
    b2ec:	e5801004 	str	r1, [r0, #4]
    b2f0:	e5830000 	str	r0, [r3]
    b2f4:	e12fff1e 	bx	lr

0000b2f8 <CDeviceNameService::~CDeviceNameService()>:
    b2f8:	e5903000 	ldr	r3, [r0]
    b2fc:	e92d4070 	push	{r4, r5, r6, lr}
    b300:	e3530000 	cmp	r3, #0
    b304:	e1a05000 	mov	r5, r0
    b308:	0a00000e 	beq	b348 <CDeviceNameService::~CDeviceNameService()+0x50>
    b30c:	e3a06000 	mov	r6, #0
    b310:	e5930004 	ldr	r0, [r3, #4]
    b314:	e5934000 	ldr	r4, [r3]
    b318:	e3500000 	cmp	r0, #0
    b31c:	0a000000 	beq	b324 <CDeviceNameService::~CDeviceNameService()+0x2c>
    b320:	ebfff6e0 	bl	8ea8 <operator delete[](void*)>
    b324:	e5953000 	ldr	r3, [r5]
    b328:	e3a01010 	mov	r1, #16
    b32c:	e5836004 	str	r6, [r3, #4]
    b330:	e1a00003 	mov	r0, r3
    b334:	e5836008 	str	r6, [r3, #8]
    b338:	ebfff6db 	bl	8eac <operator delete(void*, unsigned int)>
    b33c:	e2543000 	subs	r3, r4, #0
    b340:	e5854000 	str	r4, [r5]
    b344:	1afffff1 	bne	b310 <CDeviceNameService::~CDeviceNameService()+0x18>
    b348:	e3003564 	movw	r3, #1380	; 0x564
    b34c:	e3403001 	movt	r3, #1
    b350:	e3a02000 	mov	r2, #0
    b354:	e1a00005 	mov	r0, r5
    b358:	e5832000 	str	r2, [r3]
    b35c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b360 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    b360:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b364:	e1a05000 	mov	r5, r0
    b368:	e5900004 	ldr	r0, [r0, #4]
    b36c:	e1a06001 	mov	r6, r1
    b370:	e1a08002 	mov	r8, r2
    b374:	e1a07003 	mov	r7, r3
    b378:	e3500000 	cmp	r0, #0
    b37c:	1a000013 	bne	b3d0 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x70>
    b380:	e3a00010 	mov	r0, #16
    b384:	ebfff6c4 	bl	8e9c <operator new(unsigned int)>
    b388:	e1a04000 	mov	r4, r0
    b38c:	e1a00006 	mov	r0, r6
    b390:	eb000c55 	bl	e4ec <strlen>
    b394:	e2800001 	add	r0, r0, #1
    b398:	ebfff6c0 	bl	8ea0 <operator new[](unsigned int)>
    b39c:	e1a01006 	mov	r1, r6
    b3a0:	e5840004 	str	r0, [r4, #4]
    b3a4:	eb000c75 	bl	e580 <strcpy>
    b3a8:	e5952004 	ldr	r2, [r5, #4]
    b3ac:	e5953000 	ldr	r3, [r5]
    b3b0:	e3520000 	cmp	r2, #0
    b3b4:	e5848008 	str	r8, [r4, #8]
    b3b8:	e584700c 	str	r7, [r4, #12]
    b3bc:	e5843000 	str	r3, [r4]
    b3c0:	e5854000 	str	r4, [r5]
    b3c4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    b3c8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    b3cc:	eafff6c6 	b	8eec <LeaveCritical>
    b3d0:	ebfff6b7 	bl	8eb4 <EnterCritical>
    b3d4:	eaffffe9 	b	b380 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>

0000b3d8 <CDeviceNameService::GetDevice(char const*, int)>:
    b3d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b3dc:	e1a07000 	mov	r7, r0
    b3e0:	e5900004 	ldr	r0, [r0, #4]
    b3e4:	e24dd00c 	sub	sp, sp, #12
    b3e8:	e1a05001 	mov	r5, r1
    b3ec:	e1a06002 	mov	r6, r2
    b3f0:	e3500000 	cmp	r0, #0
    b3f4:	1a000017 	bne	b458 <CDeviceNameService::GetDevice(char const*, int)+0x80>
    b3f8:	e5974000 	ldr	r4, [r7]
    b3fc:	e3540000 	cmp	r4, #0
    b400:	1a000003 	bne	b414 <CDeviceNameService::GetDevice(char const*, int)+0x3c>
    b404:	ea00001b 	b	b478 <CDeviceNameService::GetDevice(char const*, int)+0xa0>
    b408:	e5944000 	ldr	r4, [r4]
    b40c:	e3540000 	cmp	r4, #0
    b410:	0a000014 	beq	b468 <CDeviceNameService::GetDevice(char const*, int)+0x90>
    b414:	e5941004 	ldr	r1, [r4, #4]
    b418:	e1a00005 	mov	r0, r5
    b41c:	eb000c3c 	bl	e514 <strcmp>
    b420:	e3500000 	cmp	r0, #0
    b424:	1afffff7 	bne	b408 <CDeviceNameService::GetDevice(char const*, int)+0x30>
    b428:	e594300c 	ldr	r3, [r4, #12]
    b42c:	e1530006 	cmp	r3, r6
    b430:	1afffff4 	bne	b408 <CDeviceNameService::GetDevice(char const*, int)+0x30>
    b434:	e5973004 	ldr	r3, [r7, #4]
    b438:	e5940008 	ldr	r0, [r4, #8]
    b43c:	e3530000 	cmp	r3, #0
    b440:	0a00000d 	beq	b47c <CDeviceNameService::GetDevice(char const*, int)+0xa4>
    b444:	e58d0004 	str	r0, [sp, #4]
    b448:	ebfff6a7 	bl	8eec <LeaveCritical>
    b44c:	e59d0004 	ldr	r0, [sp, #4]
    b450:	e28dd00c 	add	sp, sp, #12
    b454:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b458:	ebfff695 	bl	8eb4 <EnterCritical>
    b45c:	e5974000 	ldr	r4, [r7]
    b460:	e3540000 	cmp	r4, #0
    b464:	1affffea 	bne	b414 <CDeviceNameService::GetDevice(char const*, int)+0x3c>
    b468:	e5973004 	ldr	r3, [r7, #4]
    b46c:	e3530000 	cmp	r3, #0
    b470:	0a000000 	beq	b478 <CDeviceNameService::GetDevice(char const*, int)+0xa0>
    b474:	ebfff69c 	bl	8eec <LeaveCritical>
    b478:	e3a00000 	mov	r0, #0
    b47c:	e28dd00c 	add	sp, sp, #12
    b480:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000b484 <CDeviceNameService::Get()>:
    b484:	e3003564 	movw	r3, #1380	; 0x564
    b488:	e3403001 	movt	r3, #1
    b48c:	e5930000 	ldr	r0, [r3]
    b490:	e12fff1e 	bx	lr

0000b494 <CLogger::CLogger(unsigned int, CTimer*)>:
    b494:	e92d4010 	push	{r4, lr}
    b498:	e1a04000 	mov	r4, r0
    b49c:	e5801000 	str	r1, [r0]
    b4a0:	e3a03000 	mov	r3, #0
    b4a4:	e5802004 	str	r2, [r0, #4]
    b4a8:	e3a0c001 	mov	ip, #1
    b4ac:	e5843008 	str	r3, [r4, #8]
    b4b0:	e3a00901 	mov	r0, #16384	; 0x4000
    b4b4:	e584300c 	str	r3, [r4, #12]
    b4b8:	e5843010 	str	r3, [r4, #16]
    b4bc:	e5843014 	str	r3, [r4, #20]
    b4c0:	e584c018 	str	ip, [r4, #24]
    b4c4:	ebfff675 	bl	8ea0 <operator new[](unsigned int)>
    b4c8:	e3003568 	movw	r3, #1384	; 0x568
    b4cc:	e3403001 	movt	r3, #1
    b4d0:	e5834000 	str	r4, [r3]
    b4d4:	e584000c 	str	r0, [r4, #12]
    b4d8:	e1a00004 	mov	r0, r4
    b4dc:	e8bd8010 	pop	{r4, pc}

0000b4e0 <CLogger::~CLogger()>:
    b4e0:	e92d4010 	push	{r4, lr}
    b4e4:	e1a04000 	mov	r4, r0
    b4e8:	e590000c 	ldr	r0, [r0, #12]
    b4ec:	e3a02000 	mov	r2, #0
    b4f0:	e3003568 	movw	r3, #1384	; 0x568
    b4f4:	e3403001 	movt	r3, #1
    b4f8:	e1500002 	cmp	r0, r2
    b4fc:	e5832000 	str	r2, [r3]
    b500:	0a000000 	beq	b508 <CLogger::~CLogger()+0x28>
    b504:	ebfff667 	bl	8ea8 <operator delete[](void*)>
    b508:	e1a00004 	mov	r0, r4
    b50c:	e8bd8010 	pop	{r4, pc}

0000b510 <CLogger::Get()>:
    b510:	e3003568 	movw	r3, #1384	; 0x568
    b514:	e3403001 	movt	r3, #1
    b518:	e5930000 	ldr	r0, [r3]
    b51c:	e12fff1e 	bx	lr

0000b520 <CLogger::Write(char const*)>:
    b520:	e92d4070 	push	{r4, r5, r6, lr}
    b524:	e1a04000 	mov	r4, r0
    b528:	e1a00001 	mov	r0, r1
    b52c:	e1a05001 	mov	r5, r1
    b530:	eb000bed 	bl	e4ec <strlen>
    b534:	e1a01005 	mov	r1, r5
    b538:	e1a06000 	mov	r6, r0
    b53c:	e5940008 	ldr	r0, [r4, #8]
    b540:	e1a02006 	mov	r2, r6
    b544:	e5903000 	ldr	r3, [r0]
    b548:	e593300c 	ldr	r3, [r3, #12]
    b54c:	e12fff33 	blx	r3
    b550:	e5940018 	ldr	r0, [r4, #24]
    b554:	e3500000 	cmp	r0, #0
    b558:	1a000017 	bne	b5bc <CLogger::Write(char const*)+0x9c>
    b55c:	e0850006 	add	r0, r5, r6
    b560:	e1550000 	cmp	r5, r0
    b564:	0a00000f 	beq	b5a8 <CLogger::Write(char const*)+0x88>
    b568:	e0d530d1 	ldrsb	r3, [r5], #1
    b56c:	e353000d 	cmp	r3, #13
    b570:	0afffffa 	beq	b560 <CLogger::Write(char const*)+0x40>
    b574:	e5941010 	ldr	r1, [r4, #16]
    b578:	e594c00c 	ldr	ip, [r4, #12]
    b57c:	e7cc3001 	strb	r3, [ip, r1]
    b580:	e5943010 	ldr	r3, [r4, #16]
    b584:	e5941014 	ldr	r1, [r4, #20]
    b588:	e2833001 	add	r3, r3, #1
    b58c:	e7ed3053 	ubfx	r3, r3, #0, #14
    b590:	e5843010 	str	r3, [r4, #16]
    b594:	e1530001 	cmp	r3, r1
    b598:	1afffff0 	bne	b560 <CLogger::Write(char const*)+0x40>
    b59c:	e2433001 	sub	r3, r3, #1
    b5a0:	e7ed3053 	ubfx	r3, r3, #0, #14
    b5a4:	e5843010 	str	r3, [r4, #16]
    b5a8:	e5943018 	ldr	r3, [r4, #24]
    b5ac:	e3530000 	cmp	r3, #0
    b5b0:	08bd8070 	popeq	{r4, r5, r6, pc}
    b5b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    b5b8:	eafff64b 	b	8eec <LeaveCritical>
    b5bc:	ebfff63c 	bl	8eb4 <EnterCritical>
    b5c0:	eaffffe5 	b	b55c <CLogger::Write(char const*)+0x3c>

0000b5c4 <CLogger::Read(void*, unsigned int)>:
    b5c4:	e92d4070 	push	{r4, r5, r6, lr}
    b5c8:	e1a04000 	mov	r4, r0
    b5cc:	e5900018 	ldr	r0, [r0, #24]
    b5d0:	e1a05001 	mov	r5, r1
    b5d4:	e1a06002 	mov	r6, r2
    b5d8:	e3500000 	cmp	r0, #0
    b5dc:	1a00001b 	bne	b650 <CLogger::Read(void*, unsigned int)+0x8c>
    b5e0:	e5942010 	ldr	r2, [r4, #16]
    b5e4:	e5943014 	ldr	r3, [r4, #20]
    b5e8:	e1520003 	cmp	r2, r3
    b5ec:	0a000020 	beq	b674 <CLogger::Read(void*, unsigned int)+0xb0>
    b5f0:	e1a01005 	mov	r1, r5
    b5f4:	e3a05000 	mov	r5, #0
    b5f8:	ea00000a 	b	b628 <CLogger::Read(void*, unsigned int)+0x64>
    b5fc:	e594000c 	ldr	r0, [r4, #12]
    b600:	e2855001 	add	r5, r5, #1
    b604:	e19030d3 	ldrsb	r3, [r0, r3]
    b608:	e4c13001 	strb	r3, [r1], #1
    b60c:	e5943014 	ldr	r3, [r4, #20]
    b610:	e5940010 	ldr	r0, [r4, #16]
    b614:	e2833001 	add	r3, r3, #1
    b618:	e7ed3053 	ubfx	r3, r3, #0, #14
    b61c:	e5843014 	str	r3, [r4, #20]
    b620:	e1530000 	cmp	r3, r0
    b624:	0a000001 	beq	b630 <CLogger::Read(void*, unsigned int)+0x6c>
    b628:	e1550006 	cmp	r5, r6
    b62c:	1afffff2 	bne	b5fc <CLogger::Read(void*, unsigned int)+0x38>
    b630:	e5943018 	ldr	r3, [r4, #24]
    b634:	e3530000 	cmp	r3, #0
    b638:	1a000001 	bne	b644 <CLogger::Read(void*, unsigned int)+0x80>
    b63c:	e1a00005 	mov	r0, r5
    b640:	e8bd8070 	pop	{r4, r5, r6, pc}
    b644:	ebfff628 	bl	8eec <LeaveCritical>
    b648:	e1a00005 	mov	r0, r5
    b64c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b650:	ebfff617 	bl	8eb4 <EnterCritical>
    b654:	e5942010 	ldr	r2, [r4, #16]
    b658:	e5943014 	ldr	r3, [r4, #20]
    b65c:	e1520003 	cmp	r2, r3
    b660:	1affffe2 	bne	b5f0 <CLogger::Read(void*, unsigned int)+0x2c>
    b664:	e5943018 	ldr	r3, [r4, #24]
    b668:	e3530000 	cmp	r3, #0
    b66c:	0a000000 	beq	b674 <CLogger::Read(void*, unsigned int)+0xb0>
    b670:	ebfff61d 	bl	8eec <LeaveCritical>
    b674:	e3e05000 	mvn	r5, #0
    b678:	e1a00005 	mov	r0, r5
    b67c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b680 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    b680:	e590c000 	ldr	ip, [r0]
    b684:	e152000c 	cmp	r2, ip
    b688:	812fff1e 	bxhi	lr
    b68c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b690:	e24dd020 	sub	sp, sp, #32
    b694:	e1a04000 	mov	r4, r0
    b698:	e1a05002 	mov	r5, r2
    b69c:	e1a0000d 	mov	r0, sp
    b6a0:	e1a07003 	mov	r7, r3
    b6a4:	e1a06001 	mov	r6, r1
    b6a8:	eb0002d1 	bl	c1f4 <CString::CString()>
    b6ac:	e3550000 	cmp	r5, #0
    b6b0:	0a000049 	beq	b7dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    b6b4:	e5940004 	ldr	r0, [r4, #4]
    b6b8:	e3500000 	cmp	r0, #0
    b6bc:	0a000032 	beq	b78c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    b6c0:	ebfff6c4 	bl	91d8 <CTimer::GetTimeString()>
    b6c4:	e2508000 	subs	r8, r0, #0
    b6c8:	0a00000b 	beq	b6fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    b6cc:	eb0002df 	bl	c250 <CString::operator char const*() const>
    b6d0:	e1a01000 	mov	r1, r0
    b6d4:	e1a0000d 	mov	r0, sp
    b6d8:	eb0002f7 	bl	c2bc <CString::Append(char const*)>
    b6dc:	e1a0000d 	mov	r0, sp
    b6e0:	e30f1f48 	movw	r1, #65352	; 0xff48
    b6e4:	e3401000 	movt	r1, #0
    b6e8:	eb0002f3 	bl	c2bc <CString::Append(char const*)>
    b6ec:	e5983000 	ldr	r3, [r8]
    b6f0:	e1a00008 	mov	r0, r8
    b6f4:	e5933004 	ldr	r3, [r3, #4]
    b6f8:	e12fff33 	blx	r3
    b6fc:	e1a01006 	mov	r1, r6
    b700:	e1a0000d 	mov	r0, sp
    b704:	e28d6010 	add	r6, sp, #16
    b708:	eb0002eb 	bl	c2bc <CString::Append(char const*)>
    b70c:	e1a0000d 	mov	r0, sp
    b710:	e30f1f4c 	movw	r1, #65356	; 0xff4c
    b714:	e3401000 	movt	r1, #0
    b718:	eb0002e7 	bl	c2bc <CString::Append(char const*)>
    b71c:	e1a00006 	mov	r0, r6
    b720:	eb0002b3 	bl	c1f4 <CString::CString()>
    b724:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    b728:	e1a01007 	mov	r1, r7
    b72c:	e1a00006 	mov	r0, r6
    b730:	eb000406 	bl	c750 <CString::FormatV(char const*, std::__va_list)>
    b734:	e1a00006 	mov	r0, r6
    b738:	eb0002c4 	bl	c250 <CString::operator char const*() const>
    b73c:	e1a01000 	mov	r1, r0
    b740:	e1a0000d 	mov	r0, sp
    b744:	eb0002dc 	bl	c2bc <CString::Append(char const*)>
    b748:	e3550000 	cmp	r5, #0
    b74c:	0a00003c 	beq	b844 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    b750:	e1a0000d 	mov	r0, sp
    b754:	e30f1f58 	movw	r1, #65368	; 0xff58
    b758:	e3401000 	movt	r1, #0
    b75c:	eb0002d6 	bl	c2bc <CString::Append(char const*)>
    b760:	e1a0000d 	mov	r0, sp
    b764:	eb0002b9 	bl	c250 <CString::operator char const*() const>
    b768:	e1a01000 	mov	r1, r0
    b76c:	e1a00004 	mov	r0, r4
    b770:	ebffff6a 	bl	b520 <CLogger::Write(char const*)>
    b774:	e1a00006 	mov	r0, r6
    b778:	eb00026a 	bl	c128 <CString::~CString()>
    b77c:	e1a0000d 	mov	r0, sp
    b780:	eb000268 	bl	c128 <CString::~CString()>
    b784:	e28dd020 	add	sp, sp, #32
    b788:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b78c:	e1a01006 	mov	r1, r6
    b790:	e1a0000d 	mov	r0, sp
    b794:	e28d6010 	add	r6, sp, #16
    b798:	eb0002c7 	bl	c2bc <CString::Append(char const*)>
    b79c:	e1a0000d 	mov	r0, sp
    b7a0:	e30f1f4c 	movw	r1, #65356	; 0xff4c
    b7a4:	e3401000 	movt	r1, #0
    b7a8:	eb0002c3 	bl	c2bc <CString::Append(char const*)>
    b7ac:	e1a00006 	mov	r0, r6
    b7b0:	eb00028f 	bl	c1f4 <CString::CString()>
    b7b4:	e1a01007 	mov	r1, r7
    b7b8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    b7bc:	e1a00006 	mov	r0, r6
    b7c0:	eb0003e2 	bl	c750 <CString::FormatV(char const*, std::__va_list)>
    b7c4:	e1a00006 	mov	r0, r6
    b7c8:	eb0002a0 	bl	c250 <CString::operator char const*() const>
    b7cc:	e1a01000 	mov	r1, r0
    b7d0:	e1a0000d 	mov	r0, sp
    b7d4:	eb0002b8 	bl	c2bc <CString::Append(char const*)>
    b7d8:	eaffffdc 	b	b750 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    b7dc:	e30f1f40 	movw	r1, #65344	; 0xff40
    b7e0:	e1a0000d 	mov	r0, sp
    b7e4:	e3401000 	movt	r1, #0
    b7e8:	eb00029e 	bl	c268 <CString::operator=(char const*)>
    b7ec:	e5940004 	ldr	r0, [r4, #4]
    b7f0:	e3500000 	cmp	r0, #0
    b7f4:	1affffb1 	bne	b6c0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    b7f8:	e1a01006 	mov	r1, r6
    b7fc:	e1a0000d 	mov	r0, sp
    b800:	e28d6010 	add	r6, sp, #16
    b804:	eb0002ac 	bl	c2bc <CString::Append(char const*)>
    b808:	e1a0000d 	mov	r0, sp
    b80c:	e30f1f4c 	movw	r1, #65356	; 0xff4c
    b810:	e3401000 	movt	r1, #0
    b814:	eb0002a8 	bl	c2bc <CString::Append(char const*)>
    b818:	e1a00006 	mov	r0, r6
    b81c:	eb000274 	bl	c1f4 <CString::CString()>
    b820:	e1a01007 	mov	r1, r7
    b824:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    b828:	e1a00006 	mov	r0, r6
    b82c:	eb0003c7 	bl	c750 <CString::FormatV(char const*, std::__va_list)>
    b830:	e1a00006 	mov	r0, r6
    b834:	eb000285 	bl	c250 <CString::operator char const*() const>
    b838:	e1a01000 	mov	r1, r0
    b83c:	e1a0000d 	mov	r0, sp
    b840:	eb00029d 	bl	c2bc <CString::Append(char const*)>
    b844:	e1a0000d 	mov	r0, sp
    b848:	e30f1f50 	movw	r1, #65360	; 0xff50
    b84c:	e3401000 	movt	r1, #0
    b850:	eb000299 	bl	c2bc <CString::Append(char const*)>
    b854:	e1a0000d 	mov	r0, sp
    b858:	e30f1f58 	movw	r1, #65368	; 0xff58
    b85c:	e3401000 	movt	r1, #0
    b860:	eb000295 	bl	c2bc <CString::Append(char const*)>
    b864:	e1a0000d 	mov	r0, sp
    b868:	eb000278 	bl	c250 <CString::operator char const*() const>
    b86c:	e1a01000 	mov	r1, r0
    b870:	e1a00004 	mov	r0, r4
    b874:	ebffff29 	bl	b520 <CLogger::Write(char const*)>
    b878:	ebfff5ae 	bl	8f38 <halt>
    b87c:	eaffffbc 	b	b774 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000b880 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    b880:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    b884:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b888:	e24dd010 	sub	sp, sp, #16
    b88c:	e28dc018 	add	ip, sp, #24
    b890:	e59d3014 	ldr	r3, [sp, #20]
    b894:	e58dc000 	str	ip, [sp]
    b898:	e58dc00c 	str	ip, [sp, #12]
    b89c:	ebffff77 	bl	b680 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    b8a0:	e28dd010 	add	sp, sp, #16
    b8a4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b8a8:	e28dd004 	add	sp, sp, #4
    b8ac:	e12fff1e 	bx	lr

0000b8b0 <CLogger::Initialize(CDevice*)>:
    b8b0:	e92d4010 	push	{r4, lr}
    b8b4:	e24dd008 	sub	sp, sp, #8
    b8b8:	e5801008 	str	r1, [r0, #8]
    b8bc:	e1a04000 	mov	r4, r0
    b8c0:	eb0008eb 	bl	dc74 <CMachineInfo::Get()>
    b8c4:	eb00088d 	bl	db00 <CMachineInfo::GetMachineName() const>
    b8c8:	e3a02003 	mov	r2, #3
    b8cc:	e30f3f5c 	movw	r3, #65372	; 0xff5c
    b8d0:	e30f1f74 	movw	r1, #65396	; 0xff74
    b8d4:	e3403000 	movt	r3, #0
    b8d8:	e3401000 	movt	r1, #0
    b8dc:	e58d0000 	str	r0, [sp]
    b8e0:	e1a00004 	mov	r0, r4
    b8e4:	ebffffe5 	bl	b880 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b8e8:	e3a00001 	mov	r0, #1
    b8ec:	e28dd008 	add	sp, sp, #8
    b8f0:	e8bd8010 	pop	{r4, pc}

0000b8f4 <CSerialDevice::Read(void*, unsigned int)>:
    b8f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b8f8:	e59070a4 	ldr	r7, [r0, #164]	; 0xa4
    b8fc:	e3570000 	cmp	r7, #0
    b900:	0a000034 	beq	b9d8 <CSerialDevice::Read(void*, unsigned int)+0xe4>
    b904:	e2806a01 	add	r6, r0, #4096	; 0x1000
    b908:	e1a04000 	mov	r4, r0
    b90c:	e1a07002 	mov	r7, r2
    b910:	e1a05001 	mov	r5, r1
    b914:	e59600c8 	ldr	r0, [r6, #200]	; 0xc8
    b918:	e3500000 	cmp	r0, #0
    b91c:	1a000020 	bne	b9a4 <CSerialDevice::Read(void*, unsigned int)+0xb0>
    b920:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    b924:	e3530000 	cmp	r3, #0
    b928:	ba000021 	blt	b9b4 <CSerialDevice::Read(void*, unsigned int)+0xc0>
    b92c:	e3570000 	cmp	r7, #0
    b930:	0a000016 	beq	b990 <CSerialDevice::Read(void*, unsigned int)+0x9c>
    b934:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    b938:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    b93c:	e1520003 	cmp	r2, r3
    b940:	0a000049 	beq	ba6c <CSerialDevice::Read(void*, unsigned int)+0x178>
    b944:	e085c007 	add	ip, r5, r7
    b948:	e1a02005 	mov	r2, r5
    b94c:	ea000003 	b	b960 <CSerialDevice::Read(void*, unsigned int)+0x6c>
    b950:	e59418b0 	ldr	r1, [r4, #2224]	; 0x8b0
    b954:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    b958:	e1510003 	cmp	r1, r3
    b95c:	0a00000b 	beq	b990 <CSerialDevice::Read(void*, unsigned int)+0x9c>
    b960:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    b964:	e0840003 	add	r0, r4, r3
    b968:	e2833001 	add	r3, r3, #1
    b96c:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    b970:	e5d030b0 	ldrb	r3, [r0, #176]	; 0xb0
    b974:	e4c23001 	strb	r3, [r2], #1
    b978:	e152000c 	cmp	r2, ip
    b97c:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    b980:	e0427005 	sub	r7, r2, r5
    b984:	e7ea3053 	ubfx	r3, r3, #0, #11
    b988:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    b98c:	1affffef 	bne	b950 <CSerialDevice::Read(void*, unsigned int)+0x5c>
    b990:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    b994:	e3530000 	cmp	r3, #0
    b998:	1a00000b 	bne	b9cc <CSerialDevice::Read(void*, unsigned int)+0xd8>
    b99c:	e1a00007 	mov	r0, r7
    b9a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b9a4:	ebfff542 	bl	8eb4 <EnterCritical>
    b9a8:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    b9ac:	e3530000 	cmp	r3, #0
    b9b0:	aaffffdd 	bge	b92c <CSerialDevice::Read(void*, unsigned int)+0x38>
    b9b4:	e3a03000 	mov	r3, #0
    b9b8:	e59478b8 	ldr	r7, [r4, #2232]	; 0x8b8
    b9bc:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    b9c0:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    b9c4:	e3530000 	cmp	r3, #0
    b9c8:	0afffff3 	beq	b99c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    b9cc:	ebfff546 	bl	8eec <LeaveCritical>
    b9d0:	e1a00007 	mov	r0, r7
    b9d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b9d8:	e3520000 	cmp	r2, #0
    b9dc:	0a000024 	beq	ba74 <CSerialDevice::Read(void*, unsigned int)+0x180>
    b9e0:	e3a0ca01 	mov	ip, #4096	; 0x1000
    b9e4:	e343cf20 	movt	ip, #16160	; 0x3f20
    b9e8:	e59c3018 	ldr	r3, [ip, #24]
    b9ec:	e3130010 	tst	r3, #16
    b9f0:	1affffe9 	bne	b99c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    b9f4:	e59c3000 	ldr	r3, [ip]
    b9f8:	e3130b01 	tst	r3, #1024	; 0x400
    b9fc:	1a000014 	bne	ba54 <CSerialDevice::Read(void*, unsigned int)+0x160>
    ba00:	e3130b02 	tst	r3, #2048	; 0x800
    ba04:	1a000014 	bne	ba5c <CSerialDevice::Read(void*, unsigned int)+0x168>
    ba08:	e3130c01 	tst	r3, #256	; 0x100
    ba0c:	1a000014 	bne	ba64 <CSerialDevice::Read(void*, unsigned int)+0x170>
    ba10:	e0812002 	add	r2, r1, r2
    ba14:	e1a00001 	mov	r0, r1
    ba18:	ea000003 	b	ba2c <CSerialDevice::Read(void*, unsigned int)+0x138>
    ba1c:	e3130b02 	tst	r3, #2048	; 0x800
    ba20:	1a00000d 	bne	ba5c <CSerialDevice::Read(void*, unsigned int)+0x168>
    ba24:	e3130c01 	tst	r3, #256	; 0x100
    ba28:	1a00000d 	bne	ba64 <CSerialDevice::Read(void*, unsigned int)+0x170>
    ba2c:	e4c03001 	strb	r3, [r0], #1
    ba30:	e1520000 	cmp	r2, r0
    ba34:	e0407001 	sub	r7, r0, r1
    ba38:	0affffd7 	beq	b99c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    ba3c:	e59c3018 	ldr	r3, [ip, #24]
    ba40:	e3130010 	tst	r3, #16
    ba44:	1affffd4 	bne	b99c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    ba48:	e59c3000 	ldr	r3, [ip]
    ba4c:	e3130b01 	tst	r3, #1024	; 0x400
    ba50:	0afffff1 	beq	ba1c <CSerialDevice::Read(void*, unsigned int)+0x128>
    ba54:	e3e07000 	mvn	r7, #0
    ba58:	eaffffcf 	b	b99c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    ba5c:	e3e07001 	mvn	r7, #1
    ba60:	eaffffcd 	b	b99c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    ba64:	e3e07002 	mvn	r7, #2
    ba68:	eaffffcb 	b	b99c <CSerialDevice::Read(void*, unsigned int)+0xa8>
    ba6c:	e3a07000 	mov	r7, #0
    ba70:	eaffffc6 	b	b990 <CSerialDevice::Read(void*, unsigned int)+0x9c>
    ba74:	e1a07002 	mov	r7, r2
    ba78:	eaffffc7 	b	b99c <CSerialDevice::Read(void*, unsigned int)+0xa8>

0000ba7c <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>:
    ba7c:	e92d4070 	push	{r4, r5, r6, lr}
    ba80:	e1a04000 	mov	r4, r0
    ba84:	e1a05002 	mov	r5, r2
    ba88:	e1a06001 	mov	r6, r1
    ba8c:	eb000c8a 	bl	ecbc <CDevice::CDevice()>
    ba90:	e59fc09c 	ldr	ip, [pc, #156]	; bb34 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)+0xb8>
    ba94:	e1a00004 	mov	r0, r4
    ba98:	e3a03000 	mov	r3, #0
    ba9c:	e1a02003 	mov	r2, r3
    baa0:	e3a01020 	mov	r1, #32
    baa4:	e480c004 	str	ip, [r0], #4
    baa8:	ebfff43d 	bl	8ba4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    baac:	e3a03000 	mov	r3, #0
    bab0:	e1a02003 	mov	r2, r3
    bab4:	e284002c 	add	r0, r4, #44	; 0x2c
    bab8:	e3a01021 	mov	r1, #33	; 0x21
    babc:	ebfff438 	bl	8ba4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    bac0:	e2840054 	add	r0, r4, #84	; 0x54
    bac4:	e3a03000 	mov	r3, #0
    bac8:	e3a02004 	mov	r2, #4
    bacc:	e3a0100e 	mov	r1, #14
    bad0:	ebfff433 	bl	8ba4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    bad4:	e284007c 	add	r0, r4, #124	; 0x7c
    bad8:	e3a03000 	mov	r3, #0
    badc:	e3a02004 	mov	r2, #4
    bae0:	e3a0100f 	mov	r1, #15
    bae4:	ebfff42e 	bl	8ba4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    bae8:	e2842a01 	add	r2, r4, #4096	; 0x1000
    baec:	e3550000 	cmp	r5, #0
    baf0:	e3a03000 	mov	r3, #0
    baf4:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    baf8:	e3a01001 	mov	r1, #1
    bafc:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    bb00:	13a0c002 	movne	ip, #2
    bb04:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    bb08:	03a0c001 	moveq	ip, #1
    bb0c:	e58450a8 	str	r5, [r4, #168]	; 0xa8
    bb10:	e1a00004 	mov	r0, r4
    bb14:	e58430ac 	str	r3, [r4, #172]	; 0xac
    bb18:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    bb1c:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    bb20:	e58210c4 	str	r1, [r2, #196]	; 0xc4
    bb24:	e58230c0 	str	r3, [r2, #192]	; 0xc0
    bb28:	e58210cc 	str	r1, [r2, #204]	; 0xcc
    bb2c:	e582c0c8 	str	ip, [r2, #200]	; 0xc8
    bb30:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb34:	0000ff84 	.word	0x0000ff84

0000bb38 <CSerialDevice::Initialize(unsigned int)>:
    bb38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bb3c:	e1a05001 	mov	r5, r1
    bb40:	e1a06201 	lsl	r6, r1, #4
    bb44:	e1a04000 	mov	r4, r0
    bb48:	eb000849 	bl	dc74 <CMachineInfo::Get()>
    bb4c:	e3a01002 	mov	r1, #2
    bb50:	eb000800 	bl	db58 <CMachineInfo::GetClockRate(unsigned int) const>
    bb54:	e1a01006 	mov	r1, r6
    bb58:	e1a08000 	mov	r8, r0
    bb5c:	eb000a36 	bl	e43c <__aeabi_uidiv>
    bb60:	e1a01006 	mov	r1, r6
    bb64:	e1a07000 	mov	r7, r0
    bb68:	e1a00008 	mov	r0, r8
    bb6c:	eb000a36 	bl	e44c <__aeabi_uidivmod>
    bb70:	e1a00181 	lsl	r0, r1, #3
    bb74:	e1a01005 	mov	r1, r5
    bb78:	eb000a2f 	bl	e43c <__aeabi_uidiv>
    bb7c:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    bb80:	e3530000 	cmp	r3, #0
    bb84:	e2005001 	and	r5, r0, #1
    bb88:	e08550a0 	add	r5, r5, r0, lsr #1
    bb8c:	0a000029 	beq	bc38 <CSerialDevice::Initialize(unsigned int)+0x100>
    bb90:	e59420a8 	ldr	r2, [r4, #168]	; 0xa8
    bb94:	e1a00003 	mov	r0, r3
    bb98:	e3a01039 	mov	r1, #57	; 0x39
    bb9c:	e1a03004 	mov	r3, r4
    bba0:	e3520000 	cmp	r2, #0
    bba4:	e30c2070 	movw	r2, #49264	; 0xc070
    bba8:	e3402000 	movt	r2, #0
    bbac:	0a00001f 	beq	bc30 <CSerialDevice::Initialize(unsigned int)+0xf8>
    bbb0:	eb0005fb 	bl	d3a4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    bbb4:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
    bbb8:	e3a03a01 	mov	r3, #4096	; 0x1000
    bbbc:	e3433f20 	movt	r3, #16160	; 0x3f20
    bbc0:	e3a02001 	mov	r2, #1
    bbc4:	e3510000 	cmp	r1, #0
    bbc8:	e58420ac 	str	r2, [r4, #172]	; 0xac
    bbcc:	e3a01000 	mov	r1, #0
    bbd0:	e30027ff 	movw	r2, #2047	; 0x7ff
    bbd4:	e5831038 	str	r1, [r3, #56]	; 0x38
    bbd8:	e5832044 	str	r2, [r3, #68]	; 0x44
    bbdc:	e5837024 	str	r7, [r3, #36]	; 0x24
    bbe0:	e5835028 	str	r5, [r3, #40]	; 0x28
    bbe4:	0a00001a 	beq	bc54 <CSerialDevice::Initialize(unsigned int)+0x11c>
    bbe8:	e3a02009 	mov	r2, #9
    bbec:	e3a01070 	mov	r1, #112	; 0x70
    bbf0:	e5832034 	str	r2, [r3, #52]	; 0x34
    bbf4:	e3a02e45 	mov	r2, #1104	; 0x450
    bbf8:	e583102c 	str	r1, [r3, #44]	; 0x2c
    bbfc:	e5832038 	str	r2, [r3, #56]	; 0x38
    bc00:	e3a03a01 	mov	r3, #4096	; 0x1000
    bc04:	e3433f20 	movt	r3, #16160	; 0x3f20
    bc08:	e3002301 	movw	r2, #769	; 0x301
    bc0c:	e5832030 	str	r2, [r3, #48]	; 0x30
    bc10:	ebfffe1b 	bl	b484 <CDeviceNameService::Get()>
    bc14:	e1a02004 	mov	r2, r4
    bc18:	e3a03000 	mov	r3, #0
    bc1c:	e30f1f98 	movw	r1, #65432	; 0xff98
    bc20:	e3401000 	movt	r1, #0
    bc24:	ebfffdcd 	bl	b360 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    bc28:	e3a00001 	mov	r0, #1
    bc2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bc30:	eb0005b5 	bl	d30c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    bc34:	eaffffde 	b	bbb4 <CSerialDevice::Initialize(unsigned int)+0x7c>
    bc38:	e3a02a01 	mov	r2, #4096	; 0x1000
    bc3c:	e3432f20 	movt	r2, #16160	; 0x3f20
    bc40:	e30017ff 	movw	r1, #2047	; 0x7ff
    bc44:	e5823038 	str	r3, [r2, #56]	; 0x38
    bc48:	e5821044 	str	r1, [r2, #68]	; 0x44
    bc4c:	e5827024 	str	r7, [r2, #36]	; 0x24
    bc50:	e5825028 	str	r5, [r2, #40]	; 0x28
    bc54:	e3a03a01 	mov	r3, #4096	; 0x1000
    bc58:	e3433f20 	movt	r3, #16160	; 0x3f20
    bc5c:	e3a02060 	mov	r2, #96	; 0x60
    bc60:	e583202c 	str	r2, [r3, #44]	; 0x2c
    bc64:	eaffffe5 	b	bc00 <CSerialDevice::Initialize(unsigned int)+0xc8>

0000bc68 <CSerialDevice::GetOptions() const>:
    bc68:	e2800a01 	add	r0, r0, #4096	; 0x1000
    bc6c:	e59000c4 	ldr	r0, [r0, #196]	; 0xc4
    bc70:	e12fff1e 	bx	lr

0000bc74 <CSerialDevice::SetOptions(unsigned int)>:
    bc74:	e2800a01 	add	r0, r0, #4096	; 0x1000
    bc78:	e58010c4 	str	r1, [r0, #196]	; 0xc4
    bc7c:	e12fff1e 	bx	lr

0000bc80 <CSerialDevice::Write(unsigned char)>:
    bc80:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    bc84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bc88:	e3530000 	cmp	r3, #0
    bc8c:	03a02a01 	moveq	r2, #4096	; 0x1000
    bc90:	03432f20 	movteq	r2, #16160	; 0x3f20
    bc94:	0a000018 	beq	bcfc <CSerialDevice::Write(unsigned char)+0x7c>
    bc98:	e2805a01 	add	r5, r0, #4096	; 0x1000
    bc9c:	e1a06001 	mov	r6, r1
    bca0:	e1a04000 	mov	r4, r0
    bca4:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
    bca8:	e3520000 	cmp	r2, #0
    bcac:	1a00001c 	bne	bd24 <CSerialDevice::Write(unsigned char)+0xa4>
    bcb0:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    bcb4:	e59510c0 	ldr	r1, [r5, #192]	; 0xc0
    bcb8:	e2833001 	add	r3, r3, #1
    bcbc:	e7ea3053 	ubfx	r3, r3, #0, #11
    bcc0:	e1530001 	cmp	r3, r1
    bcc4:	0a000021 	beq	bd50 <CSerialDevice::Write(unsigned char)+0xd0>
    bcc8:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    bccc:	e3a07001 	mov	r7, #1
    bcd0:	e0840003 	add	r0, r4, r3
    bcd4:	e0833007 	add	r3, r3, r7
    bcd8:	e58530bc 	str	r3, [r5, #188]	; 0xbc
    bcdc:	e5c068bc 	strb	r6, [r0, #2236]	; 0x8bc
    bce0:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    bce4:	e7ea3053 	ubfx	r3, r3, #0, #11
    bce8:	e58530bc 	str	r3, [r5, #188]	; 0xbc
    bcec:	e3520000 	cmp	r2, #0
    bcf0:	1a000008 	bne	bd18 <CSerialDevice::Write(unsigned char)+0x98>
    bcf4:	e1a00007 	mov	r0, r7
    bcf8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bcfc:	e5923018 	ldr	r3, [r2, #24]
    bd00:	e3130020 	tst	r3, #32
    bd04:	1afffffc 	bne	bcfc <CSerialDevice::Write(unsigned char)+0x7c>
    bd08:	e3a07001 	mov	r7, #1
    bd0c:	e5821000 	str	r1, [r2]
    bd10:	e1a00007 	mov	r0, r7
    bd14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bd18:	ebfff473 	bl	8eec <LeaveCritical>
    bd1c:	e1a00007 	mov	r0, r7
    bd20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bd24:	e1a00002 	mov	r0, r2
    bd28:	ebfff461 	bl	8eb4 <EnterCritical>
    bd2c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    bd30:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
    bd34:	e2833001 	add	r3, r3, #1
    bd38:	e7ea3053 	ubfx	r3, r3, #0, #11
    bd3c:	e1530002 	cmp	r3, r2
    bd40:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
    bd44:	03a07000 	moveq	r7, #0
    bd48:	1affffde 	bne	bcc8 <CSerialDevice::Write(unsigned char)+0x48>
    bd4c:	eaffffe6 	b	bcec <CSerialDevice::Write(unsigned char)+0x6c>
    bd50:	e1a07002 	mov	r7, r2
    bd54:	e1a00007 	mov	r0, r7
    bd58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bd5c <CSerialDevice::Write(void const*, unsigned int)>:
    bd5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bd60:	e2804a01 	add	r4, r0, #4096	; 0x1000
    bd64:	e1a07000 	mov	r7, r0
    bd68:	e1a06001 	mov	r6, r1
    bd6c:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
    bd70:	e1a05002 	mov	r5, r2
    bd74:	e3500000 	cmp	r0, #0
    bd78:	1a000052 	bne	bec8 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    bd7c:	e3520000 	cmp	r2, #0
    bd80:	e2428001 	sub	r8, r2, #1
    bd84:	0a000018 	beq	bdec <CSerialDevice::Write(void const*, unsigned int)+0x90>
    bd88:	e2888001 	add	r8, r8, #1
    bd8c:	e3a05000 	mov	r5, #0
    bd90:	ea000002 	b	bda0 <CSerialDevice::Write(void const*, unsigned int)+0x44>
    bd94:	e2855001 	add	r5, r5, #1
    bd98:	e1580005 	cmp	r8, r5
    bd9c:	0a00000f 	beq	bde0 <CSerialDevice::Write(void const*, unsigned int)+0x84>
    bda0:	e5d61000 	ldrb	r1, [r6]
    bda4:	e1a00007 	mov	r0, r7
    bda8:	ebffffb4 	bl	bc80 <CSerialDevice::Write(unsigned char)>
    bdac:	e3500000 	cmp	r0, #0
    bdb0:	0a00000a 	beq	bde0 <CSerialDevice::Write(void const*, unsigned int)+0x84>
    bdb4:	e4d63001 	ldrb	r3, [r6], #1
    bdb8:	e353000a 	cmp	r3, #10
    bdbc:	1afffff4 	bne	bd94 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    bdc0:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    bdc4:	e3130001 	tst	r3, #1
    bdc8:	0afffff1 	beq	bd94 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    bdcc:	e3a0100d 	mov	r1, #13
    bdd0:	e1a00007 	mov	r0, r7
    bdd4:	ebffffa9 	bl	bc80 <CSerialDevice::Write(unsigned char)>
    bdd8:	e3500000 	cmp	r0, #0
    bddc:	1affffec 	bne	bd94 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    bde0:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    bde4:	e3530000 	cmp	r3, #0
    bde8:	1a000034 	bne	bec0 <CSerialDevice::Write(void const*, unsigned int)+0x164>
    bdec:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    bdf0:	e3530000 	cmp	r3, #0
    bdf4:	0a000023 	beq	be88 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    bdf8:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
    bdfc:	e3500000 	cmp	r0, #0
    be00:	1a000035 	bne	bedc <CSerialDevice::Write(void const*, unsigned int)+0x180>
    be04:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    be08:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    be0c:	e1520003 	cmp	r2, r3
    be10:	0a00001c 	beq	be88 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    be14:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    be18:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
    be1c:	e1520003 	cmp	r2, r3
    be20:	0a000015 	beq	be7c <CSerialDevice::Write(void const*, unsigned int)+0x120>
    be24:	e3a02a01 	mov	r2, #4096	; 0x1000
    be28:	e3432f20 	movt	r2, #16160	; 0x3f20
    be2c:	e5923018 	ldr	r3, [r2, #24]
    be30:	e3130020 	tst	r3, #32
    be34:	0a000003 	beq	be48 <CSerialDevice::Write(void const*, unsigned int)+0xec>
    be38:	ea000017 	b	be9c <CSerialDevice::Write(void const*, unsigned int)+0x140>
    be3c:	e5923018 	ldr	r3, [r2, #24]
    be40:	e3130020 	tst	r3, #32
    be44:	1a000014 	bne	be9c <CSerialDevice::Write(void const*, unsigned int)+0x140>
    be48:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    be4c:	e0871003 	add	r1, r7, r3
    be50:	e2833001 	add	r3, r3, #1
    be54:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    be58:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
    be5c:	e5823000 	str	r3, [r2]
    be60:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    be64:	e7ea3053 	ubfx	r3, r3, #0, #11
    be68:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    be6c:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
    be70:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    be74:	e1510003 	cmp	r1, r3
    be78:	1affffef 	bne	be3c <CSerialDevice::Write(void const*, unsigned int)+0xe0>
    be7c:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    be80:	e3530000 	cmp	r3, #0
    be84:	1a000001 	bne	be90 <CSerialDevice::Write(void const*, unsigned int)+0x134>
    be88:	e1a00005 	mov	r0, r5
    be8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    be90:	ebfff415 	bl	8eec <LeaveCritical>
    be94:	e1a00005 	mov	r0, r5
    be98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    be9c:	e3a03a01 	mov	r3, #4096	; 0x1000
    bea0:	e3433f20 	movt	r3, #16160	; 0x3f20
    bea4:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    bea8:	e3822020 	orr	r2, r2, #32
    beac:	e5832038 	str	r2, [r3, #56]	; 0x38
    beb0:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    beb4:	e3530000 	cmp	r3, #0
    beb8:	0afffff2 	beq	be88 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    bebc:	eafffff3 	b	be90 <CSerialDevice::Write(void const*, unsigned int)+0x134>
    bec0:	ebfff409 	bl	8eec <LeaveCritical>
    bec4:	eaffffc8 	b	bdec <CSerialDevice::Write(void const*, unsigned int)+0x90>
    bec8:	ebfff3f9 	bl	8eb4 <EnterCritical>
    becc:	e3550000 	cmp	r5, #0
    bed0:	e2458001 	sub	r8, r5, #1
    bed4:	1affffab 	bne	bd88 <CSerialDevice::Write(void const*, unsigned int)+0x2c>
    bed8:	eaffffc0 	b	bde0 <CSerialDevice::Write(void const*, unsigned int)+0x84>
    bedc:	ebfff3f4 	bl	8eb4 <EnterCritical>
    bee0:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    bee4:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    bee8:	e1520003 	cmp	r2, r3
    beec:	1affffc8 	bne	be14 <CSerialDevice::Write(void const*, unsigned int)+0xb8>
    bef0:	eaffffe1 	b	be7c <CSerialDevice::Write(void const*, unsigned int)+0x120>

0000bef4 <CSerialDevice::InterruptHandler()>:
    bef4:	e92d4070 	push	{r4, r5, r6, lr}
    bef8:	e2805a01 	add	r5, r0, #4096	; 0x1000
    befc:	e1a04000 	mov	r4, r0
    bf00:	e59500c8 	ldr	r0, [r5, #200]	; 0xc8
    bf04:	e3500000 	cmp	r0, #0
    bf08:	1a000056 	bne	c068 <CSerialDevice::InterruptHandler()+0x174>
    bf0c:	e3a03a01 	mov	r3, #4096	; 0x1000
    bf10:	e3433f20 	movt	r3, #16160	; 0x3f20
    bf14:	e3e0e002 	mvn	lr, #2
    bf18:	e3e00001 	mvn	r0, #1
    bf1c:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    bf20:	e1a01003 	mov	r1, r3
    bf24:	e3e0c000 	mvn	ip, #0
    bf28:	e5832044 	str	r2, [r3, #68]	; 0x44
    bf2c:	e5913018 	ldr	r3, [r1, #24]
    bf30:	e3130010 	tst	r3, #16
    bf34:	1a000016 	bne	bf94 <CSerialDevice::InterruptHandler()+0xa0>
    bf38:	e5912000 	ldr	r2, [r1]
    bf3c:	e3120b01 	tst	r2, #1024	; 0x400
    bf40:	0a000032 	beq	c010 <CSerialDevice::InterruptHandler()+0x11c>
    bf44:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    bf48:	e3530000 	cmp	r3, #0
    bf4c:	0584c8b8 	streq	ip, [r4, #2232]	; 0x8b8
    bf50:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    bf54:	e59468b4 	ldr	r6, [r4, #2228]	; 0x8b4
    bf58:	e2833001 	add	r3, r3, #1
    bf5c:	e7ea3053 	ubfx	r3, r3, #0, #11
    bf60:	e1530006 	cmp	r3, r6
    bf64:	0a00002f 	beq	c028 <CSerialDevice::InterruptHandler()+0x134>
    bf68:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    bf6c:	e0846003 	add	r6, r4, r3
    bf70:	e2833001 	add	r3, r3, #1
    bf74:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    bf78:	e5c620b0 	strb	r2, [r6, #176]	; 0xb0
    bf7c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    bf80:	e7ea3053 	ubfx	r3, r3, #0, #11
    bf84:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    bf88:	e5913018 	ldr	r3, [r1, #24]
    bf8c:	e3130010 	tst	r3, #16
    bf90:	0affffe8 	beq	bf38 <CSerialDevice::InterruptHandler()+0x44>
    bf94:	e5913018 	ldr	r3, [r1, #24]
    bf98:	e3130020 	tst	r3, #32
    bf9c:	1a000016 	bne	bffc <CSerialDevice::InterruptHandler()+0x108>
    bfa0:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    bfa4:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
    bfa8:	e1520003 	cmp	r2, r3
    bfac:	13a02a01 	movne	r2, #4096	; 0x1000
    bfb0:	13432f20 	movtne	r2, #16160	; 0x3f20
    bfb4:	1a000004 	bne	bfcc <CSerialDevice::InterruptHandler()+0xd8>
    bfb8:	ea000024 	b	c050 <CSerialDevice::InterruptHandler()+0x15c>
    bfbc:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    bfc0:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    bfc4:	e1510003 	cmp	r1, r3
    bfc8:	0a000020 	beq	c050 <CSerialDevice::InterruptHandler()+0x15c>
    bfcc:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    bfd0:	e0841003 	add	r1, r4, r3
    bfd4:	e2833001 	add	r3, r3, #1
    bfd8:	e58530c0 	str	r3, [r5, #192]	; 0xc0
    bfdc:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
    bfe0:	e5823000 	str	r3, [r2]
    bfe4:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    bfe8:	e7ea3053 	ubfx	r3, r3, #0, #11
    bfec:	e58530c0 	str	r3, [r5, #192]	; 0xc0
    bff0:	e5923018 	ldr	r3, [r2, #24]
    bff4:	e3130020 	tst	r3, #32
    bff8:	0affffef 	beq	bfbc <CSerialDevice::InterruptHandler()+0xc8>
    bffc:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    c000:	e3530000 	cmp	r3, #0
    c004:	08bd8070 	popeq	{r4, r5, r6, pc}
    c008:	e8bd4070 	pop	{r4, r5, r6, lr}
    c00c:	eafff3b6 	b	8eec <LeaveCritical>
    c010:	e3120b02 	tst	r2, #2048	; 0x800
    c014:	0a000007 	beq	c038 <CSerialDevice::InterruptHandler()+0x144>
    c018:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    c01c:	e3530000 	cmp	r3, #0
    c020:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    c024:	eaffffc9 	b	bf50 <CSerialDevice::InterruptHandler()+0x5c>
    c028:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    c02c:	e3530000 	cmp	r3, #0
    c030:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    c034:	eaffffbc 	b	bf2c <CSerialDevice::InterruptHandler()+0x38>
    c038:	e3120c01 	tst	r2, #256	; 0x100
    c03c:	0affffc3 	beq	bf50 <CSerialDevice::InterruptHandler()+0x5c>
    c040:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    c044:	e3530000 	cmp	r3, #0
    c048:	0584e8b8 	streq	lr, [r4, #2232]	; 0x8b8
    c04c:	eaffffbf 	b	bf50 <CSerialDevice::InterruptHandler()+0x5c>
    c050:	e3a03a01 	mov	r3, #4096	; 0x1000
    c054:	e3433f20 	movt	r3, #16160	; 0x3f20
    c058:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    c05c:	e3c22020 	bic	r2, r2, #32
    c060:	e5832038 	str	r2, [r3, #56]	; 0x38
    c064:	eaffffe4 	b	bffc <CSerialDevice::InterruptHandler()+0x108>
    c068:	ebfff391 	bl	8eb4 <EnterCritical>
    c06c:	eaffffa6 	b	bf0c <CSerialDevice::InterruptHandler()+0x18>

0000c070 <CSerialDevice::InterruptStub(void*)>:
    c070:	eaffff9f 	b	bef4 <CSerialDevice::InterruptHandler()>

0000c074 <CSerialDevice::~CSerialDevice()>:
    c074:	e59f1084 	ldr	r1, [pc, #132]	; c100 <CSerialDevice::~CSerialDevice()+0x8c>
    c078:	e3a03a01 	mov	r3, #4096	; 0x1000
    c07c:	e3433f20 	movt	r3, #16160	; 0x3f20
    c080:	e3a02000 	mov	r2, #0
    c084:	e92d4010 	push	{r4, lr}
    c088:	e1a04000 	mov	r4, r0
    c08c:	e5801000 	str	r1, [r0]
    c090:	e5832038 	str	r2, [r3, #56]	; 0x38
    c094:	e5832030 	str	r2, [r3, #48]	; 0x30
    c098:	e59030ac 	ldr	r3, [r0, #172]	; 0xac
    c09c:	e1530002 	cmp	r3, r2
    c0a0:	0a000004 	beq	c0b8 <CSerialDevice::~CSerialDevice()+0x44>
    c0a4:	e59030a8 	ldr	r3, [r0, #168]	; 0xa8
    c0a8:	e1530002 	cmp	r3, r2
    c0ac:	0a00000f 	beq	c0f0 <CSerialDevice::~CSerialDevice()+0x7c>
    c0b0:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    c0b4:	eb0004c2 	bl	d3c4 <CInterruptSystem::DisconnectFIQ()>
    c0b8:	e3a03000 	mov	r3, #0
    c0bc:	e284007c 	add	r0, r4, #124	; 0x7c
    c0c0:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    c0c4:	ebfff176 	bl	86a4 <CGPIOPin::~CGPIOPin()>
    c0c8:	e2840054 	add	r0, r4, #84	; 0x54
    c0cc:	ebfff174 	bl	86a4 <CGPIOPin::~CGPIOPin()>
    c0d0:	e284002c 	add	r0, r4, #44	; 0x2c
    c0d4:	ebfff172 	bl	86a4 <CGPIOPin::~CGPIOPin()>
    c0d8:	e2840004 	add	r0, r4, #4
    c0dc:	ebfff170 	bl	86a4 <CGPIOPin::~CGPIOPin()>
    c0e0:	e1a00004 	mov	r0, r4
    c0e4:	eb000ae8 	bl	ec8c <CDevice::~CDevice()>
    c0e8:	e1a00004 	mov	r0, r4
    c0ec:	e8bd8010 	pop	{r4, pc}
    c0f0:	e3a01039 	mov	r1, #57	; 0x39
    c0f4:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    c0f8:	eb000495 	bl	d354 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    c0fc:	eaffffed 	b	c0b8 <CSerialDevice::~CSerialDevice()+0x44>
    c100:	0000ff84 	.word	0x0000ff84

0000c104 <CSerialDevice::~CSerialDevice()>:
    c104:	e92d4010 	push	{r4, lr}
    c108:	e1a04000 	mov	r4, r0
    c10c:	ebffffd8 	bl	c074 <CSerialDevice::~CSerialDevice()>
    c110:	e1a00004 	mov	r0, r4
    c114:	e30110d0 	movw	r1, #4304	; 0x10d0
    c118:	ebfff363 	bl	8eac <operator delete(void*, unsigned int)>
    c11c:	e1a00004 	mov	r0, r4
    c120:	e8bd8010 	pop	{r4, pc}
    c124:	00000000 	andeq	r0, r0, r0

0000c128 <CString::~CString()>:
    c128:	e92d4010 	push	{r4, lr}
    c12c:	e1a04000 	mov	r4, r0
    c130:	e5900004 	ldr	r0, [r0, #4]
    c134:	e59f3014 	ldr	r3, [pc, #20]	; c150 <CString::~CString()+0x28>
    c138:	e3500000 	cmp	r0, #0
    c13c:	e5843000 	str	r3, [r4]
    c140:	0a000000 	beq	c148 <CString::~CString()+0x20>
    c144:	ebfff357 	bl	8ea8 <operator delete[](void*)>
    c148:	e1a00004 	mov	r0, r4
    c14c:	e8bd8010 	pop	{r4, pc}
    c150:	0000ffa8 	.word	0x0000ffa8

0000c154 <CString::~CString()>:
    c154:	e92d4010 	push	{r4, lr}
    c158:	e1a04000 	mov	r4, r0
    c15c:	e5900004 	ldr	r0, [r0, #4]
    c160:	e59f3020 	ldr	r3, [pc, #32]	; c188 <CString::~CString()+0x34>
    c164:	e3500000 	cmp	r0, #0
    c168:	e5843000 	str	r3, [r4]
    c16c:	0a000000 	beq	c174 <CString::~CString()+0x20>
    c170:	ebfff34c 	bl	8ea8 <operator delete[](void*)>
    c174:	e1a00004 	mov	r0, r4
    c178:	e3a01010 	mov	r1, #16
    c17c:	ebfff34a 	bl	8eac <operator delete(void*, unsigned int)>
    c180:	e1a00004 	mov	r0, r4
    c184:	e8bd8010 	pop	{r4, pc}
    c188:	0000ffa8 	.word	0x0000ffa8

0000c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    c18c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c190:	e990002c 	ldmib	r0, {r2, r3, r5}
    c194:	e0455002 	sub	r5, r5, r2
    c198:	e0851001 	add	r1, r5, r1
    c19c:	e2812001 	add	r2, r1, #1
    c1a0:	e1520003 	cmp	r2, r3
    c1a4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    c1a8:	e2816041 	add	r6, r1, #65	; 0x41
    c1ac:	e1a04000 	mov	r4, r0
    c1b0:	e1a00006 	mov	r0, r6
    c1b4:	ebfff339 	bl	8ea0 <operator new[](unsigned int)>
    c1b8:	e594300c 	ldr	r3, [r4, #12]
    c1bc:	e3a02000 	mov	r2, #0
    c1c0:	e5c32000 	strb	r2, [r3]
    c1c4:	e5941004 	ldr	r1, [r4, #4]
    c1c8:	e1a07000 	mov	r7, r0
    c1cc:	eb0008eb 	bl	e580 <strcpy>
    c1d0:	e5940004 	ldr	r0, [r4, #4]
    c1d4:	e3500000 	cmp	r0, #0
    c1d8:	0a000000 	beq	c1e0 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    c1dc:	ebfff331 	bl	8ea8 <operator delete[](void*)>
    c1e0:	e0875005 	add	r5, r7, r5
    c1e4:	e5847004 	str	r7, [r4, #4]
    c1e8:	e584500c 	str	r5, [r4, #12]
    c1ec:	e5846008 	str	r6, [r4, #8]
    c1f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c1f4 <CString::CString()>:
    c1f4:	e59f1010 	ldr	r1, [pc, #16]	; c20c <CString::CString()+0x18>
    c1f8:	e3a02000 	mov	r2, #0
    c1fc:	e5802004 	str	r2, [r0, #4]
    c200:	e5802008 	str	r2, [r0, #8]
    c204:	e5801000 	str	r1, [r0]
    c208:	e12fff1e 	bx	lr
    c20c:	0000ffa8 	.word	0x0000ffa8

0000c210 <CString::CString(char const*)>:
    c210:	e59f3034 	ldr	r3, [pc, #52]	; c24c <CString::CString(char const*)+0x3c>
    c214:	e92d4070 	push	{r4, r5, r6, lr}
    c218:	e1a04000 	mov	r4, r0
    c21c:	e5843000 	str	r3, [r4]
    c220:	e1a00001 	mov	r0, r1
    c224:	e1a05001 	mov	r5, r1
    c228:	eb0008af 	bl	e4ec <strlen>
    c22c:	e2800001 	add	r0, r0, #1
    c230:	e5840008 	str	r0, [r4, #8]
    c234:	ebfff319 	bl	8ea0 <operator new[](unsigned int)>
    c238:	e1a01005 	mov	r1, r5
    c23c:	e5840004 	str	r0, [r4, #4]
    c240:	eb0008ce 	bl	e580 <strcpy>
    c244:	e1a00004 	mov	r0, r4
    c248:	e8bd8070 	pop	{r4, r5, r6, pc}
    c24c:	0000ffa8 	.word	0x0000ffa8

0000c250 <CString::operator char const*() const>:
    c250:	e5900004 	ldr	r0, [r0, #4]
    c254:	e3003010 	movw	r3, #16
    c258:	e3403001 	movt	r3, #1
    c25c:	e3500000 	cmp	r0, #0
    c260:	01a00003 	moveq	r0, r3
    c264:	e12fff1e 	bx	lr

0000c268 <CString::operator=(char const*)>:
    c268:	e92d4070 	push	{r4, r5, r6, lr}
    c26c:	e1a04000 	mov	r4, r0
    c270:	e5900004 	ldr	r0, [r0, #4]
    c274:	e1a05001 	mov	r5, r1
    c278:	e3500000 	cmp	r0, #0
    c27c:	0a000000 	beq	c284 <CString::operator=(char const*)+0x1c>
    c280:	ebfff308 	bl	8ea8 <operator delete[](void*)>
    c284:	e1a00005 	mov	r0, r5
    c288:	eb000897 	bl	e4ec <strlen>
    c28c:	e2800001 	add	r0, r0, #1
    c290:	e5840008 	str	r0, [r4, #8]
    c294:	ebfff301 	bl	8ea0 <operator new[](unsigned int)>
    c298:	e1a01005 	mov	r1, r5
    c29c:	e5840004 	str	r0, [r4, #4]
    c2a0:	eb0008b6 	bl	e580 <strcpy>
    c2a4:	e5940004 	ldr	r0, [r4, #4]
    c2a8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c2ac <CString::GetLength() const>:
    c2ac:	e5900004 	ldr	r0, [r0, #4]
    c2b0:	e3500000 	cmp	r0, #0
    c2b4:	012fff1e 	bxeq	lr
    c2b8:	ea00088b 	b	e4ec <strlen>

0000c2bc <CString::Append(char const*)>:
    c2bc:	e92d4070 	push	{r4, r5, r6, lr}
    c2c0:	e1a04000 	mov	r4, r0
    c2c4:	e5900004 	ldr	r0, [r0, #4]
    c2c8:	e3a03001 	mov	r3, #1
    c2cc:	e1a06001 	mov	r6, r1
    c2d0:	e5843008 	str	r3, [r4, #8]
    c2d4:	e3500000 	cmp	r0, #0
    c2d8:	0a000003 	beq	c2ec <CString::Append(char const*)+0x30>
    c2dc:	eb000882 	bl	e4ec <strlen>
    c2e0:	e5943008 	ldr	r3, [r4, #8]
    c2e4:	e0830000 	add	r0, r3, r0
    c2e8:	e5840008 	str	r0, [r4, #8]
    c2ec:	e1a00006 	mov	r0, r6
    c2f0:	eb00087d 	bl	e4ec <strlen>
    c2f4:	e5943008 	ldr	r3, [r4, #8]
    c2f8:	e0800003 	add	r0, r0, r3
    c2fc:	e5840008 	str	r0, [r4, #8]
    c300:	ebfff2e6 	bl	8ea0 <operator new[](unsigned int)>
    c304:	e5941004 	ldr	r1, [r4, #4]
    c308:	e3510000 	cmp	r1, #0
    c30c:	e1a05000 	mov	r5, r0
    c310:	05c01000 	strbeq	r1, [r0]
    c314:	0a000004 	beq	c32c <CString::Append(char const*)+0x70>
    c318:	eb000898 	bl	e580 <strcpy>
    c31c:	e5940004 	ldr	r0, [r4, #4]
    c320:	e3500000 	cmp	r0, #0
    c324:	0a000000 	beq	c32c <CString::Append(char const*)+0x70>
    c328:	ebfff2de 	bl	8ea8 <operator delete[](void*)>
    c32c:	e1a01006 	mov	r1, r6
    c330:	e1a00005 	mov	r0, r5
    c334:	eb0008af 	bl	e5f8 <strcat>
    c338:	e5845004 	str	r5, [r4, #4]
    c33c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c340 <CString::Compare(char const*) const>:
    c340:	e5900004 	ldr	r0, [r0, #4]
    c344:	ea000872 	b	e514 <strcmp>

0000c348 <CString::Find(char) const>:
    c348:	e5902004 	ldr	r2, [r0, #4]
    c34c:	e1d230d0 	ldrsb	r3, [r2]
    c350:	e3530000 	cmp	r3, #0
    c354:	0a000009 	beq	c380 <CString::Find(char) const+0x38>
    c358:	e1510003 	cmp	r1, r3
    c35c:	e3a00000 	mov	r0, #0
    c360:	1a000002 	bne	c370 <CString::Find(char) const+0x28>
    c364:	ea000007 	b	c388 <CString::Find(char) const+0x40>
    c368:	e1530001 	cmp	r3, r1
    c36c:	012fff1e 	bxeq	lr
    c370:	e1f230d1 	ldrsb	r3, [r2, #1]!
    c374:	e2800001 	add	r0, r0, #1
    c378:	e3530000 	cmp	r3, #0
    c37c:	1afffff9 	bne	c368 <CString::Find(char) const+0x20>
    c380:	e3e00000 	mvn	r0, #0
    c384:	e12fff1e 	bx	lr
    c388:	e12fff1e 	bx	lr

0000c38c <CString::PutChar(char, unsigned int)>:
    c38c:	e92d4070 	push	{r4, r5, r6, lr}
    c390:	e2524000 	subs	r4, r2, #0
    c394:	08bd8070 	popeq	{r4, r5, r6, pc}
    c398:	e1a06001 	mov	r6, r1
    c39c:	e1a01004 	mov	r1, r4
    c3a0:	e1a05000 	mov	r5, r0
    c3a4:	ebffff78 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c3a8:	e2443001 	sub	r3, r4, #1
    c3ac:	e595200c 	ldr	r2, [r5, #12]
    c3b0:	e2433001 	sub	r3, r3, #1
    c3b4:	e3730001 	cmn	r3, #1
    c3b8:	e2820001 	add	r0, r2, #1
    c3bc:	e585000c 	str	r0, [r5, #12]
    c3c0:	e5c26000 	strb	r6, [r2]
    c3c4:	1afffff8 	bne	c3ac <CString::PutChar(char, unsigned int)+0x20>
    c3c8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c3cc <CString::PutString(char const*)>:
    c3cc:	e92d4070 	push	{r4, r5, r6, lr}
    c3d0:	e1a04000 	mov	r4, r0
    c3d4:	e1a00001 	mov	r0, r1
    c3d8:	e1a05001 	mov	r5, r1
    c3dc:	eb000842 	bl	e4ec <strlen>
    c3e0:	e2506000 	subs	r6, r0, #0
    c3e4:	0a000002 	beq	c3f4 <CString::PutString(char const*)+0x28>
    c3e8:	e1a01006 	mov	r1, r6
    c3ec:	e1a00004 	mov	r0, r4
    c3f0:	ebffff65 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c3f4:	e1a01005 	mov	r1, r5
    c3f8:	e594000c 	ldr	r0, [r4, #12]
    c3fc:	eb00085f 	bl	e580 <strcpy>
    c400:	e594100c 	ldr	r1, [r4, #12]
    c404:	e0811006 	add	r1, r1, r6
    c408:	e584100c 	str	r1, [r4, #12]
    c40c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c410 <CString::ReserveSpace(unsigned int)>:
    c410:	e3510000 	cmp	r1, #0
    c414:	012fff1e 	bxeq	lr
    c418:	eaffff5b 	b	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000c41c <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    c41c:	e1510002 	cmp	r1, r2
    c420:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c424:	e1a06001 	mov	r6, r1
    c428:	e1a08002 	mov	r8, r2
    c42c:	e1a0a000 	mov	sl, r0
    c430:	e1a07003 	mov	r7, r3
    c434:	23a05001 	movcs	r5, #1
    c438:	3a000022 	bcc	c4c8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0xac>
    c43c:	e0050598 	mul	r5, r8, r5
    c440:	e1a00006 	mov	r0, r6
    c444:	e1a01005 	mov	r1, r5
    c448:	eb0007fb 	bl	e43c <__aeabi_uidiv>
    c44c:	e1500008 	cmp	r0, r8
    c450:	e1a04000 	mov	r4, r0
    c454:	2afffff8 	bcs	c43c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x20>
    c458:	e3570000 	cmp	r7, #0
    c45c:	e1a0700a 	mov	r7, sl
    c460:	13a09037 	movne	r9, #55	; 0x37
    c464:	03a09057 	moveq	r9, #87	; 0x57
    c468:	ea000001 	b	c474 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x58>
    c46c:	eb0007f2 	bl	e43c <__aeabi_uidiv>
    c470:	e1a04000 	mov	r4, r0
    c474:	e1a00006 	mov	r0, r6
    c478:	e1a01005 	mov	r1, r5
    c47c:	eb0007f2 	bl	e44c <__aeabi_uidivmod>
    c480:	e2877001 	add	r7, r7, #1
    c484:	e3540009 	cmp	r4, #9
    c488:	e0893004 	add	r3, r9, r4
    c48c:	e2844030 	add	r4, r4, #48	; 0x30
    c490:	e1a00005 	mov	r0, r5
    c494:	e6af3073 	sxtb	r3, r3
    c498:	96af3074 	sxtbls	r3, r4
    c49c:	e5473001 	strb	r3, [r7, #-1]
    c4a0:	e1a06001 	mov	r6, r1
    c4a4:	e1a01008 	mov	r1, r8
    c4a8:	eb0007e3 	bl	e43c <__aeabi_uidiv>
    c4ac:	e2505000 	subs	r5, r0, #0
    c4b0:	e1a00006 	mov	r0, r6
    c4b4:	e1a01005 	mov	r1, r5
    c4b8:	1affffeb 	bne	c46c <CString::ntoa(char*, unsigned long, unsigned int, int)+0x50>
    c4bc:	e5c75000 	strb	r5, [r7]
    c4c0:	e1a0000a 	mov	r0, sl
    c4c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c4c8:	e1a04001 	mov	r4, r1
    c4cc:	e3a05001 	mov	r5, #1
    c4d0:	eaffffe0 	b	c458 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x3c>

0000c4d4 <CString::ftoa(char*, double, unsigned int)>:
    c4d4:	eeb50bc0 	vcmpe.f64	d0, #0.0
    c4d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4dc:	e1a08000 	mov	r8, r0
    c4e0:	ed2d8b02 	vpush	{d8}
    c4e4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    c4e8:	43a0302d 	movmi	r3, #45	; 0x2d
    c4ec:	42809001 	addmi	r9, r0, #1
    c4f0:	45c03000 	strbmi	r3, [r0]
    c4f4:	eeb08b40 	vmov.f64	d8, d0
    c4f8:	51a09000 	movpl	r9, r0
    c4fc:	eddf0b91 	vldr	d16, [pc, #580]	; c748 <CString::ftoa(char*, double, unsigned int)+0x274>
    c500:	e24dd01c 	sub	sp, sp, #28
    c504:	e58d1004 	str	r1, [sp, #4]
    c508:	4eb18b40 	vnegmi.f64	d8, d0
    c50c:	eeb48be0 	vcmpe.f64	d8, d16
    c510:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    c514:	ca00007b 	bgt	c708 <CString::ftoa(char*, double, unsigned int)+0x234>
    c518:	eefc7bc8 	vcvt.u32.f64	s15, d8
    c51c:	ee175a90 	vmov	r5, s15
    c520:	e3550009 	cmp	r5, #9
    c524:	83a07001 	movhi	r7, #1
    c528:	83a0400a 	movhi	r4, #10
    c52c:	9a00007d 	bls	c728 <CString::ftoa(char*, double, unsigned int)+0x254>
    c530:	e0070794 	mul	r7, r4, r7
    c534:	e1a00005 	mov	r0, r5
    c538:	e1a01007 	mov	r1, r7
    c53c:	eb0007be 	bl	e43c <__aeabi_uidiv>
    c540:	e3500009 	cmp	r0, #9
    c544:	e1a0a000 	mov	sl, r0
    c548:	8afffff8 	bhi	c530 <CString::ftoa(char*, double, unsigned int)+0x5c>
    c54c:	e30c6ccd 	movw	r6, #52429	; 0xcccd
    c550:	e1a04009 	mov	r4, r9
    c554:	e34c6ccc 	movt	r6, #52428	; 0xcccc
    c558:	e1a0b005 	mov	fp, r5
    c55c:	ea000001 	b	c568 <CString::ftoa(char*, double, unsigned int)+0x94>
    c560:	eb0007b5 	bl	e43c <__aeabi_uidiv>
    c564:	e1a0a000 	mov	sl, r0
    c568:	e1a0000b 	mov	r0, fp
    c56c:	e1a01007 	mov	r1, r7
    c570:	eb0007b5 	bl	e44c <__aeabi_uidivmod>
    c574:	e0832697 	umull	r2, r3, r7, r6
    c578:	e35a0009 	cmp	sl, #9
    c57c:	e2844001 	add	r4, r4, #1
    c580:	e1a0b001 	mov	fp, r1
    c584:	e28a1057 	add	r1, sl, #87	; 0x57
    c588:	e28aa030 	add	sl, sl, #48	; 0x30
    c58c:	e1a0000b 	mov	r0, fp
    c590:	e6af1071 	sxtb	r1, r1
    c594:	96af107a 	sxtbls	r1, sl
    c598:	e1b071a3 	lsrs	r7, r3, #3
    c59c:	e5441001 	strb	r1, [r4, #-1]
    c5a0:	e1a01007 	mov	r1, r7
    c5a4:	1affffed 	bne	c560 <CString::ftoa(char*, double, unsigned int)+0x8c>
    c5a8:	e59d3004 	ldr	r3, [sp, #4]
    c5ac:	e5c47000 	strb	r7, [r4]
    c5b0:	e3530000 	cmp	r3, #0
    c5b4:	1a000003 	bne	c5c8 <CString::ftoa(char*, double, unsigned int)+0xf4>
    c5b8:	e1a00008 	mov	r0, r8
    c5bc:	e28dd01c 	add	sp, sp, #28
    c5c0:	ecbd8b02 	vpop	{d8}
    c5c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5c8:	e1a00009 	mov	r0, r9
    c5cc:	eb0007c6 	bl	e4ec <strlen>
    c5d0:	e59d3004 	ldr	r3, [sp, #4]
    c5d4:	e3530009 	cmp	r3, #9
    c5d8:	31a07003 	movcc	r7, r3
    c5dc:	23a07009 	movcs	r7, #9
    c5e0:	e3570001 	cmp	r7, #1
    c5e4:	e3a0302e 	mov	r3, #46	; 0x2e
    c5e8:	e0892000 	add	r2, r9, r0
    c5ec:	e7c93000 	strb	r3, [r9, r0]
    c5f0:	e58d2004 	str	r2, [sp, #4]
    c5f4:	e2829001 	add	r9, r2, #1
    c5f8:	0a000050 	beq	c740 <CString::ftoa(char*, double, unsigned int)+0x26c>
    c5fc:	e3a0200a 	mov	r2, #10
    c600:	e3a03002 	mov	r3, #2
    c604:	e1a01002 	mov	r1, r2
    c608:	e2833001 	add	r3, r3, #1
    c60c:	e1530007 	cmp	r3, r7
    c610:	e0020291 	mul	r2, r1, r2
    c614:	9afffffb 	bls	c608 <CString::ftoa(char*, double, unsigned int)+0x134>
    c618:	ee072a90 	vmov	s15, r2
    c61c:	eef81b67 	vcvt.f64.u32	d17, s15
    c620:	ee075a90 	vmov	s15, r5
    c624:	eef80b67 	vcvt.f64.u32	d16, s15
    c628:	ee388b60 	vsub.f64	d8, d8, d16
    c62c:	ee288b21 	vmul.f64	d8, d8, d17
    c630:	eefc7bc8 	vcvt.u32.f64	s15, d8
    c634:	ee17ba90 	vmov	fp, s15
    c638:	e35b0009 	cmp	fp, #9
    c63c:	83a06001 	movhi	r6, #1
    c640:	83a0400a 	movhi	r4, #10
    c644:	9a00003a 	bls	c734 <CString::ftoa(char*, double, unsigned int)+0x260>
    c648:	e0060694 	mul	r6, r4, r6
    c64c:	e1a0000b 	mov	r0, fp
    c650:	e1a01006 	mov	r1, r6
    c654:	eb000778 	bl	e43c <__aeabi_uidiv>
    c658:	e3500009 	cmp	r0, #9
    c65c:	e1a0a000 	mov	sl, r0
    c660:	8afffff8 	bhi	c648 <CString::ftoa(char*, double, unsigned int)+0x174>
    c664:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    c668:	e28d400c 	add	r4, sp, #12
    c66c:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    c670:	ea000001 	b	c67c <CString::ftoa(char*, double, unsigned int)+0x1a8>
    c674:	eb000770 	bl	e43c <__aeabi_uidiv>
    c678:	e1a0a000 	mov	sl, r0
    c67c:	e1a0000b 	mov	r0, fp
    c680:	e1a01006 	mov	r1, r6
    c684:	eb000770 	bl	e44c <__aeabi_uidivmod>
    c688:	e0832596 	umull	r2, r3, r6, r5
    c68c:	e35a0009 	cmp	sl, #9
    c690:	e2844001 	add	r4, r4, #1
    c694:	e1a0b001 	mov	fp, r1
    c698:	e28a1057 	add	r1, sl, #87	; 0x57
    c69c:	e28aa030 	add	sl, sl, #48	; 0x30
    c6a0:	e1a0000b 	mov	r0, fp
    c6a4:	e6af1071 	sxtb	r1, r1
    c6a8:	96af107a 	sxtbls	r1, sl
    c6ac:	e1b061a3 	lsrs	r6, r3, #3
    c6b0:	e5441001 	strb	r1, [r4, #-1]
    c6b4:	e1a01006 	mov	r1, r6
    c6b8:	1affffed 	bne	c674 <CString::ftoa(char*, double, unsigned int)+0x1a0>
    c6bc:	e28d000c 	add	r0, sp, #12
    c6c0:	e5c46000 	strb	r6, [r4]
    c6c4:	eb000788 	bl	e4ec <strlen>
    c6c8:	e0577000 	subs	r7, r7, r0
    c6cc:	0a000006 	beq	c6ec <CString::ftoa(char*, double, unsigned int)+0x218>
    c6d0:	e59d6004 	ldr	r6, [sp, #4]
    c6d4:	e3a03030 	mov	r3, #48	; 0x30
    c6d8:	e0862007 	add	r2, r6, r7
    c6dc:	e5e63001 	strb	r3, [r6, #1]!
    c6e0:	e1560002 	cmp	r6, r2
    c6e4:	1afffffc 	bne	c6dc <CString::ftoa(char*, double, unsigned int)+0x208>
    c6e8:	e0899007 	add	r9, r9, r7
    c6ec:	e28d100c 	add	r1, sp, #12
    c6f0:	e1a00009 	mov	r0, r9
    c6f4:	eb0007a1 	bl	e580 <strcpy>
    c6f8:	e1a00008 	mov	r0, r8
    c6fc:	e28dd01c 	add	sp, sp, #28
    c700:	ecbd8b02 	vpop	{d8}
    c704:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c708:	e1a00009 	mov	r0, r9
    c70c:	e30f1fb0 	movw	r1, #65456	; 0xffb0
    c710:	e3401000 	movt	r1, #0
    c714:	eb000799 	bl	e580 <strcpy>
    c718:	e1a00008 	mov	r0, r8
    c71c:	e28dd01c 	add	sp, sp, #28
    c720:	ecbd8b02 	vpop	{d8}
    c724:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c728:	ee17aa90 	vmov	sl, s15
    c72c:	e3a07001 	mov	r7, #1
    c730:	eaffff85 	b	c54c <CString::ftoa(char*, double, unsigned int)+0x78>
    c734:	ee17aa90 	vmov	sl, s15
    c738:	e3a06001 	mov	r6, #1
    c73c:	eaffffc8 	b	c664 <CString::ftoa(char*, double, unsigned int)+0x190>
    c740:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    c744:	eaffffb5 	b	c620 <CString::ftoa(char*, double, unsigned int)+0x14c>
    c748:	ffe00000 	.word	0xffe00000
    c74c:	41efffff 	.word	0x41efffff

0000c750 <CString::FormatV(char const*, std::__va_list)>:
    c750:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c754:	e1a0b000 	mov	fp, r0
    c758:	e5900004 	ldr	r0, [r0, #4]
    c75c:	e24dd034 	sub	sp, sp, #52	; 0x34
    c760:	e1a05001 	mov	r5, r1
    c764:	e3500000 	cmp	r0, #0
    c768:	e58d2000 	str	r2, [sp]
    c76c:	0a000000 	beq	c774 <CString::FormatV(char const*, std::__va_list)+0x24>
    c770:	ebfff1cc 	bl	8ea8 <operator delete[](void*)>
    c774:	e3a00040 	mov	r0, #64	; 0x40
    c778:	e58b0008 	str	r0, [fp, #8]
    c77c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    c780:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    c784:	e58d3014 	str	r3, [sp, #20]
    c788:	ebfff1c4 	bl	8ea0 <operator new[](unsigned int)>
    c78c:	e58b0004 	str	r0, [fp, #4]
    c790:	e58b000c 	str	r0, [fp, #12]
    c794:	e1d540d0 	ldrsb	r4, [r5]
    c798:	e3540000 	cmp	r4, #0
    c79c:	0a0000a2 	beq	ca2c <CString::FormatV(char const*, std::__va_list)+0x2dc>
    c7a0:	e3540025 	cmp	r4, #37	; 0x25
    c7a4:	13a01001 	movne	r1, #1
    c7a8:	11a0000b 	movne	r0, fp
    c7ac:	1a000156 	bne	cd0c <CString::FormatV(char const*, std::__va_list)+0x5bc>
    c7b0:	e1d560d1 	ldrsb	r6, [r5, #1]
    c7b4:	e3560025 	cmp	r6, #37	; 0x25
    c7b8:	0a000169 	beq	cd64 <CString::FormatV(char const*, std::__va_list)+0x614>
    c7bc:	e356002d 	cmp	r6, #45	; 0x2d
    c7c0:	e3a04000 	mov	r4, #0
    c7c4:	12855001 	addne	r5, r5, #1
    c7c8:	01d560d2 	ldrsbeq	r6, [r5, #2]
    c7cc:	03a03001 	moveq	r3, #1
    c7d0:	13a03000 	movne	r3, #0
    c7d4:	02855002 	addeq	r5, r5, #2
    c7d8:	e3560030 	cmp	r6, #48	; 0x30
    c7dc:	e58d3004 	str	r3, [sp, #4]
    c7e0:	01d560d1 	ldrsbeq	r6, [r5, #1]
    c7e4:	03a03001 	moveq	r3, #1
    c7e8:	13a03000 	movne	r3, #0
    c7ec:	058d300c 	streq	r3, [sp, #12]
    c7f0:	00855003 	addeq	r5, r5, r3
    c7f4:	158d300c 	strne	r3, [sp, #12]
    c7f8:	e2463030 	sub	r3, r6, #48	; 0x30
    c7fc:	e6ef3073 	uxtb	r3, r3
    c800:	e3530009 	cmp	r3, #9
    c804:	8a000007 	bhi	c828 <CString::FormatV(char const*, std::__va_list)+0xd8>
    c808:	e3a0200a 	mov	r2, #10
    c80c:	e0246492 	mla	r4, r2, r4, r6
    c810:	e1f560d1 	ldrsb	r6, [r5, #1]!
    c814:	e2463030 	sub	r3, r6, #48	; 0x30
    c818:	e2444030 	sub	r4, r4, #48	; 0x30
    c81c:	e6ef3073 	uxtb	r3, r3
    c820:	e3530009 	cmp	r3, #9
    c824:	9afffff8 	bls	c80c <CString::FormatV(char const*, std::__va_list)+0xbc>
    c828:	e356002e 	cmp	r6, #46	; 0x2e
    c82c:	0a00013c 	beq	cd24 <CString::FormatV(char const*, std::__va_list)+0x5d4>
    c830:	e1d570d0 	ldrsb	r7, [r5]
    c834:	e3a01006 	mov	r1, #6
    c838:	e357006c 	cmp	r7, #108	; 0x6c
    c83c:	01d570d1 	ldrsbeq	r7, [r5, #1]
    c840:	03a02001 	moveq	r2, #1
    c844:	13a02000 	movne	r2, #0
    c848:	00855002 	addeq	r5, r5, r2
    c84c:	e2473058 	sub	r3, r7, #88	; 0x58
    c850:	e3530020 	cmp	r3, #32
    c854:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c858:	ea000120 	b	cce0 <CString::FormatV(char const*, std::__va_list)+0x590>
    c85c:	0000cc5c 	.word	0x0000cc5c
    c860:	0000cce0 	.word	0x0000cce0
    c864:	0000cce0 	.word	0x0000cce0
    c868:	0000cce0 	.word	0x0000cce0
    c86c:	0000cce0 	.word	0x0000cce0
    c870:	0000cce0 	.word	0x0000cce0
    c874:	0000cce0 	.word	0x0000cce0
    c878:	0000cce0 	.word	0x0000cce0
    c87c:	0000cce0 	.word	0x0000cce0
    c880:	0000cce0 	.word	0x0000cce0
    c884:	0000cce0 	.word	0x0000cce0
    c888:	0000cbe8 	.word	0x0000cbe8
    c88c:	0000cabc 	.word	0x0000cabc
    c890:	0000cce0 	.word	0x0000cce0
    c894:	0000ca3c 	.word	0x0000ca3c
    c898:	0000cce0 	.word	0x0000cce0
    c89c:	0000cce0 	.word	0x0000cce0
    c8a0:	0000cce0 	.word	0x0000cce0
    c8a4:	0000cce0 	.word	0x0000cce0
    c8a8:	0000cce0 	.word	0x0000cce0
    c8ac:	0000cce0 	.word	0x0000cce0
    c8b0:	0000cce0 	.word	0x0000cce0
    c8b4:	0000cce0 	.word	0x0000cce0
    c8b8:	0000c8e0 	.word	0x0000c8e0
    c8bc:	0000cce0 	.word	0x0000cce0
    c8c0:	0000cce0 	.word	0x0000cce0
    c8c4:	0000cce0 	.word	0x0000cce0
    c8c8:	0000cc6c 	.word	0x0000cc6c
    c8cc:	0000cce0 	.word	0x0000cce0
    c8d0:	0000cc64 	.word	0x0000cc64
    c8d4:	0000cce0 	.word	0x0000cce0
    c8d8:	0000cce0 	.word	0x0000cce0
    c8dc:	0000cc5c 	.word	0x0000cc5c
    c8e0:	e3a08008 	mov	r8, #8
    c8e4:	e59d3000 	ldr	r3, [sp]
    c8e8:	e2833004 	add	r3, r3, #4
    c8ec:	e5136004 	ldr	r6, [r3, #-4]
    c8f0:	e58d3000 	str	r3, [sp]
    c8f4:	e1560008 	cmp	r6, r8
    c8f8:	23a0a001 	movcs	sl, #1
    c8fc:	3a000198 	bcc	cf64 <CString::FormatV(char const*, std::__va_list)+0x814>
    c900:	e00a0a98 	mul	sl, r8, sl
    c904:	e1a00006 	mov	r0, r6
    c908:	e1a0100a 	mov	r1, sl
    c90c:	eb0006ca 	bl	e43c <__aeabi_uidiv>
    c910:	e1580000 	cmp	r8, r0
    c914:	9afffff9 	bls	c900 <CString::FormatV(char const*, std::__va_list)+0x1b0>
    c918:	e1a09000 	mov	r9, r0
    c91c:	e28d3018 	add	r3, sp, #24
    c920:	e3570058 	cmp	r7, #88	; 0x58
    c924:	e58d3008 	str	r3, [sp, #8]
    c928:	13a02057 	movne	r2, #87	; 0x57
    c92c:	03a02037 	moveq	r2, #55	; 0x37
    c930:	e1a07003 	mov	r7, r3
    c934:	e1a03005 	mov	r3, r5
    c938:	e58d4010 	str	r4, [sp, #16]
    c93c:	e1a0500a 	mov	r5, sl
    c940:	e1a04002 	mov	r4, r2
    c944:	e1a0a003 	mov	sl, r3
    c948:	ea000001 	b	c954 <CString::FormatV(char const*, std::__va_list)+0x204>
    c94c:	eb0006ba 	bl	e43c <__aeabi_uidiv>
    c950:	e1a09000 	mov	r9, r0
    c954:	e1a00006 	mov	r0, r6
    c958:	e1a01005 	mov	r1, r5
    c95c:	eb0006ba 	bl	e44c <__aeabi_uidivmod>
    c960:	e2877001 	add	r7, r7, #1
    c964:	e3590009 	cmp	r9, #9
    c968:	e0842009 	add	r2, r4, r9
    c96c:	e2899030 	add	r9, r9, #48	; 0x30
    c970:	e1a00005 	mov	r0, r5
    c974:	e6af2072 	sxtb	r2, r2
    c978:	96af2079 	sxtbls	r2, r9
    c97c:	e5472001 	strb	r2, [r7, #-1]
    c980:	e1a06001 	mov	r6, r1
    c984:	e1a01008 	mov	r1, r8
    c988:	eb0006ab 	bl	e43c <__aeabi_uidiv>
    c98c:	e2505000 	subs	r5, r0, #0
    c990:	e1a00006 	mov	r0, r6
    c994:	e1a01005 	mov	r1, r5
    c998:	1affffeb 	bne	c94c <CString::FormatV(char const*, std::__va_list)+0x1fc>
    c99c:	e1a0300a 	mov	r3, sl
    c9a0:	e59d0008 	ldr	r0, [sp, #8]
    c9a4:	e5c71000 	strb	r1, [r7]
    c9a8:	e1a0a005 	mov	sl, r5
    c9ac:	e59d4010 	ldr	r4, [sp, #16]
    c9b0:	e1a05003 	mov	r5, r3
    c9b4:	eb0006cc 	bl	e4ec <strlen>
    c9b8:	e59d3004 	ldr	r3, [sp, #4]
    c9bc:	e3530000 	cmp	r3, #0
    c9c0:	e1a06000 	mov	r6, r0
    c9c4:	1a0000ef 	bne	cd88 <CString::FormatV(char const*, std::__va_list)+0x638>
    c9c8:	e1500004 	cmp	r0, r4
    c9cc:	2a00000f 	bcs	ca10 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    c9d0:	e59d300c 	ldr	r3, [sp, #12]
    c9d4:	e0444000 	sub	r4, r4, r0
    c9d8:	e1a0000b 	mov	r0, fp
    c9dc:	e3530000 	cmp	r3, #0
    c9e0:	e1a01004 	mov	r1, r4
    c9e4:	03a06020 	moveq	r6, #32
    c9e8:	13a06030 	movne	r6, #48	; 0x30
    c9ec:	ebfffde6 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c9f0:	e2443001 	sub	r3, r4, #1
    c9f4:	e59b200c 	ldr	r2, [fp, #12]
    c9f8:	e2433001 	sub	r3, r3, #1
    c9fc:	e3730001 	cmn	r3, #1
    ca00:	e2821001 	add	r1, r2, #1
    ca04:	e58b100c 	str	r1, [fp, #12]
    ca08:	e5c26000 	strb	r6, [r2]
    ca0c:	1afffff8 	bne	c9f4 <CString::FormatV(char const*, std::__va_list)+0x2a4>
    ca10:	e59d1008 	ldr	r1, [sp, #8]
    ca14:	e1a0000b 	mov	r0, fp
    ca18:	ebfffe6b 	bl	c3cc <CString::PutString(char const*)>
    ca1c:	e2855001 	add	r5, r5, #1
    ca20:	e1d540d0 	ldrsb	r4, [r5]
    ca24:	e3540000 	cmp	r4, #0
    ca28:	1affff5c 	bne	c7a0 <CString::FormatV(char const*, std::__va_list)+0x50>
    ca2c:	e59b300c 	ldr	r3, [fp, #12]
    ca30:	e5c34000 	strb	r4, [r3]
    ca34:	e28dd034 	add	sp, sp, #52	; 0x34
    ca38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca3c:	e59d3000 	ldr	r3, [sp]
    ca40:	e28d6018 	add	r6, sp, #24
    ca44:	e58d6008 	str	r6, [sp, #8]
    ca48:	e2833007 	add	r3, r3, #7
    ca4c:	e1a00006 	mov	r0, r6
    ca50:	e3c33007 	bic	r3, r3, #7
    ca54:	e2832008 	add	r2, r3, #8
    ca58:	e58d2000 	str	r2, [sp]
    ca5c:	ed930b00 	vldr	d0, [r3]
    ca60:	ebfffe9b 	bl	c4d4 <CString::ftoa(char*, double, unsigned int)>
    ca64:	e1a00006 	mov	r0, r6
    ca68:	eb00069f 	bl	e4ec <strlen>
    ca6c:	e59d3004 	ldr	r3, [sp, #4]
    ca70:	e3530000 	cmp	r3, #0
    ca74:	e1a06000 	mov	r6, r0
    ca78:	1a000107 	bne	ce9c <CString::FormatV(char const*, std::__va_list)+0x74c>
    ca7c:	e1500004 	cmp	r0, r4
    ca80:	2affffe2 	bcs	ca10 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    ca84:	e0444000 	sub	r4, r4, r0
    ca88:	e1a0000b 	mov	r0, fp
    ca8c:	e1a01004 	mov	r1, r4
    ca90:	ebfffdbd 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ca94:	e2443001 	sub	r3, r4, #1
    ca98:	e3a00020 	mov	r0, #32
    ca9c:	e59b200c 	ldr	r2, [fp, #12]
    caa0:	e2433001 	sub	r3, r3, #1
    caa4:	e3730001 	cmn	r3, #1
    caa8:	e2821001 	add	r1, r2, #1
    caac:	e58b100c 	str	r1, [fp, #12]
    cab0:	e5c20000 	strb	r0, [r2]
    cab4:	1afffff8 	bne	ca9c <CString::FormatV(char const*, std::__va_list)+0x34c>
    cab8:	eaffffd4 	b	ca10 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    cabc:	e59d3000 	ldr	r3, [sp]
    cac0:	e2833004 	add	r3, r3, #4
    cac4:	e5137004 	ldr	r7, [r3, #-4]
    cac8:	e58d3000 	str	r3, [sp]
    cacc:	e3570000 	cmp	r7, #0
    cad0:	b2677000 	rsblt	r7, r7, #0
    cad4:	b3a03001 	movlt	r3, #1
    cad8:	a3a03000 	movge	r3, #0
    cadc:	b58d300c 	strlt	r3, [sp, #12]
    cae0:	e1a06007 	mov	r6, r7
    cae4:	a58d300c 	strge	r3, [sp, #12]
    cae8:	e3570009 	cmp	r7, #9
    caec:	e58d3010 	str	r3, [sp, #16]
    caf0:	c3a0a001 	movgt	sl, #1
    caf4:	c3a0900a 	movgt	r9, #10
    caf8:	da000116 	ble	cf58 <CString::FormatV(char const*, std::__va_list)+0x808>
    cafc:	e00a0a99 	mul	sl, r9, sl
    cb00:	e1a00007 	mov	r0, r7
    cb04:	e1a0100a 	mov	r1, sl
    cb08:	eb00064b 	bl	e43c <__aeabi_uidiv>
    cb0c:	e3500009 	cmp	r0, #9
    cb10:	8afffff9 	bhi	cafc <CString::FormatV(char const*, std::__va_list)+0x3ac>
    cb14:	e1a08000 	mov	r8, r0
    cb18:	e28d7018 	add	r7, sp, #24
    cb1c:	e59d9014 	ldr	r9, [sp, #20]
    cb20:	e58d7008 	str	r7, [sp, #8]
    cb24:	ea000001 	b	cb30 <CString::FormatV(char const*, std::__va_list)+0x3e0>
    cb28:	eb000643 	bl	e43c <__aeabi_uidiv>
    cb2c:	e1a08000 	mov	r8, r0
    cb30:	e1a00006 	mov	r0, r6
    cb34:	e1a0100a 	mov	r1, sl
    cb38:	eb000643 	bl	e44c <__aeabi_uidivmod>
    cb3c:	e083299a 	umull	r2, r3, sl, r9
    cb40:	e3580009 	cmp	r8, #9
    cb44:	e2877001 	add	r7, r7, #1
    cb48:	e1a06001 	mov	r6, r1
    cb4c:	e2881057 	add	r1, r8, #87	; 0x57
    cb50:	e2888030 	add	r8, r8, #48	; 0x30
    cb54:	e1a00006 	mov	r0, r6
    cb58:	e6af1071 	sxtb	r1, r1
    cb5c:	96af1078 	sxtbls	r1, r8
    cb60:	e1b0a1a3 	lsrs	sl, r3, #3
    cb64:	e5471001 	strb	r1, [r7, #-1]
    cb68:	e1a0100a 	mov	r1, sl
    cb6c:	1affffed 	bne	cb28 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    cb70:	e59d0008 	ldr	r0, [sp, #8]
    cb74:	e5c7a000 	strb	sl, [r7]
    cb78:	eb00065b 	bl	e4ec <strlen>
    cb7c:	e59d3004 	ldr	r3, [sp, #4]
    cb80:	e3530000 	cmp	r3, #0
    cb84:	e59d300c 	ldr	r3, [sp, #12]
    cb88:	e0808003 	add	r8, r0, r3
    cb8c:	0a000090 	beq	cdd4 <CString::FormatV(char const*, std::__va_list)+0x684>
    cb90:	e59d3010 	ldr	r3, [sp, #16]
    cb94:	e3530000 	cmp	r3, #0
    cb98:	1a0000e5 	bne	cf34 <CString::FormatV(char const*, std::__va_list)+0x7e4>
    cb9c:	e59d1008 	ldr	r1, [sp, #8]
    cba0:	e1a0000b 	mov	r0, fp
    cba4:	ebfffe08 	bl	c3cc <CString::PutString(char const*)>
    cba8:	e1580004 	cmp	r8, r4
    cbac:	2affff9a 	bcs	ca1c <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cbb0:	e0448008 	sub	r8, r4, r8
    cbb4:	e1a0000b 	mov	r0, fp
    cbb8:	e1a01008 	mov	r1, r8
    cbbc:	ebfffd72 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cbc0:	e2483001 	sub	r3, r8, #1
    cbc4:	e3a00020 	mov	r0, #32
    cbc8:	e59b200c 	ldr	r2, [fp, #12]
    cbcc:	e2433001 	sub	r3, r3, #1
    cbd0:	e3730001 	cmn	r3, #1
    cbd4:	e2821001 	add	r1, r2, #1
    cbd8:	e58b100c 	str	r1, [fp, #12]
    cbdc:	e5c20000 	strb	r0, [r2]
    cbe0:	1afffff8 	bne	cbc8 <CString::FormatV(char const*, std::__va_list)+0x478>
    cbe4:	eaffff8c 	b	ca1c <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cbe8:	e59d3004 	ldr	r3, [sp, #4]
    cbec:	e3530000 	cmp	r3, #0
    cbf0:	e59d3000 	ldr	r3, [sp]
    cbf4:	e2836004 	add	r6, r3, #4
    cbf8:	e1d370d0 	ldrsb	r7, [r3]
    cbfc:	1a00008f 	bne	ce40 <CString::FormatV(char const*, std::__va_list)+0x6f0>
    cc00:	e3540001 	cmp	r4, #1
    cc04:	9a00000b 	bls	cc38 <CString::FormatV(char const*, std::__va_list)+0x4e8>
    cc08:	e2441001 	sub	r1, r4, #1
    cc0c:	e1a0000b 	mov	r0, fp
    cc10:	e2444002 	sub	r4, r4, #2
    cc14:	ebfffd5c 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cc18:	e3a01020 	mov	r1, #32
    cc1c:	e59b300c 	ldr	r3, [fp, #12]
    cc20:	e2444001 	sub	r4, r4, #1
    cc24:	e3740001 	cmn	r4, #1
    cc28:	e2832001 	add	r2, r3, #1
    cc2c:	e58b200c 	str	r2, [fp, #12]
    cc30:	e5c31000 	strb	r1, [r3]
    cc34:	1afffff8 	bne	cc1c <CString::FormatV(char const*, std::__va_list)+0x4cc>
    cc38:	e3a01001 	mov	r1, #1
    cc3c:	e1a0000b 	mov	r0, fp
    cc40:	ebfffd51 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cc44:	e59b300c 	ldr	r3, [fp, #12]
    cc48:	e58d6000 	str	r6, [sp]
    cc4c:	e2832001 	add	r2, r3, #1
    cc50:	e58b200c 	str	r2, [fp, #12]
    cc54:	e5c37000 	strb	r7, [r3]
    cc58:	eaffff6f 	b	ca1c <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cc5c:	e3a08010 	mov	r8, #16
    cc60:	eaffff1f 	b	c8e4 <CString::FormatV(char const*, std::__va_list)+0x194>
    cc64:	e3a0800a 	mov	r8, #10
    cc68:	eaffff1d 	b	c8e4 <CString::FormatV(char const*, std::__va_list)+0x194>
    cc6c:	e59d3000 	ldr	r3, [sp]
    cc70:	e2836004 	add	r6, r3, #4
    cc74:	e5938000 	ldr	r8, [r3]
    cc78:	e1a00008 	mov	r0, r8
    cc7c:	eb00061a 	bl	e4ec <strlen>
    cc80:	e59d3004 	ldr	r3, [sp, #4]
    cc84:	e3530000 	cmp	r3, #0
    cc88:	e1a07000 	mov	r7, r0
    cc8c:	1a000095 	bne	cee8 <CString::FormatV(char const*, std::__va_list)+0x798>
    cc90:	e1500004 	cmp	r0, r4
    cc94:	2a00000c 	bcs	cccc <CString::FormatV(char const*, std::__va_list)+0x57c>
    cc98:	e0444000 	sub	r4, r4, r0
    cc9c:	e1a0000b 	mov	r0, fp
    cca0:	e1a01004 	mov	r1, r4
    cca4:	ebfffd38 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cca8:	e2443001 	sub	r3, r4, #1
    ccac:	e3a00020 	mov	r0, #32
    ccb0:	e59b200c 	ldr	r2, [fp, #12]
    ccb4:	e2433001 	sub	r3, r3, #1
    ccb8:	e3730001 	cmn	r3, #1
    ccbc:	e2821001 	add	r1, r2, #1
    ccc0:	e58b100c 	str	r1, [fp, #12]
    ccc4:	e5c20000 	strb	r0, [r2]
    ccc8:	1afffff8 	bne	ccb0 <CString::FormatV(char const*, std::__va_list)+0x560>
    cccc:	e1a01008 	mov	r1, r8
    ccd0:	e1a0000b 	mov	r0, fp
    ccd4:	e58d6000 	str	r6, [sp]
    ccd8:	ebfffdbb 	bl	c3cc <CString::PutString(char const*)>
    ccdc:	eaffff4e 	b	ca1c <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cce0:	e3a01001 	mov	r1, #1
    cce4:	e1a0000b 	mov	r0, fp
    cce8:	ebfffd27 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ccec:	e59b300c 	ldr	r3, [fp, #12]
    ccf0:	e3a02025 	mov	r2, #37	; 0x25
    ccf4:	e3a01001 	mov	r1, #1
    ccf8:	e0830001 	add	r0, r3, r1
    ccfc:	e58b000c 	str	r0, [fp, #12]
    cd00:	e5c32000 	strb	r2, [r3]
    cd04:	e1a0000b 	mov	r0, fp
    cd08:	e1d540d0 	ldrsb	r4, [r5]
    cd0c:	ebfffd1e 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cd10:	e59b300c 	ldr	r3, [fp, #12]
    cd14:	e2832001 	add	r2, r3, #1
    cd18:	e58b200c 	str	r2, [fp, #12]
    cd1c:	e5c34000 	strb	r4, [r3]
    cd20:	eaffff3d 	b	ca1c <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cd24:	e1d570d1 	ldrsb	r7, [r5, #1]
    cd28:	e3a01000 	mov	r1, #0
    cd2c:	e2855001 	add	r5, r5, #1
    cd30:	e2473030 	sub	r3, r7, #48	; 0x30
    cd34:	e6ef3073 	uxtb	r3, r3
    cd38:	e3530009 	cmp	r3, #9
    cd3c:	8afffebd 	bhi	c838 <CString::FormatV(char const*, std::__va_list)+0xe8>
    cd40:	e3a0200a 	mov	r2, #10
    cd44:	e0217192 	mla	r1, r2, r1, r7
    cd48:	e1f570d1 	ldrsb	r7, [r5, #1]!
    cd4c:	e2473030 	sub	r3, r7, #48	; 0x30
    cd50:	e2411030 	sub	r1, r1, #48	; 0x30
    cd54:	e6ef3073 	uxtb	r3, r3
    cd58:	e3530009 	cmp	r3, #9
    cd5c:	9afffff8 	bls	cd44 <CString::FormatV(char const*, std::__va_list)+0x5f4>
    cd60:	eafffeb4 	b	c838 <CString::FormatV(char const*, std::__va_list)+0xe8>
    cd64:	e3a01001 	mov	r1, #1
    cd68:	e1a0000b 	mov	r0, fp
    cd6c:	ebfffd06 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cd70:	e59b300c 	ldr	r3, [fp, #12]
    cd74:	e2855002 	add	r5, r5, #2
    cd78:	e2832001 	add	r2, r3, #1
    cd7c:	e58b200c 	str	r2, [fp, #12]
    cd80:	e5c36000 	strb	r6, [r3]
    cd84:	eafffe82 	b	c794 <CString::FormatV(char const*, std::__va_list)+0x44>
    cd88:	e59d1008 	ldr	r1, [sp, #8]
    cd8c:	e1a0000b 	mov	r0, fp
    cd90:	ebfffd8d 	bl	c3cc <CString::PutString(char const*)>
    cd94:	e1560004 	cmp	r6, r4
    cd98:	2affff1f 	bcs	ca1c <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cd9c:	e0444006 	sub	r4, r4, r6
    cda0:	e1a0000b 	mov	r0, fp
    cda4:	e1a01004 	mov	r1, r4
    cda8:	ebfffcf7 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cdac:	e2443001 	sub	r3, r4, #1
    cdb0:	e3a00020 	mov	r0, #32
    cdb4:	e59b200c 	ldr	r2, [fp, #12]
    cdb8:	e2433001 	sub	r3, r3, #1
    cdbc:	e3730001 	cmn	r3, #1
    cdc0:	e2821001 	add	r1, r2, #1
    cdc4:	e58b100c 	str	r1, [fp, #12]
    cdc8:	e5c20000 	strb	r0, [r2]
    cdcc:	1afffff8 	bne	cdb4 <CString::FormatV(char const*, std::__va_list)+0x664>
    cdd0:	eaffff11 	b	ca1c <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cdd4:	e1580004 	cmp	r8, r4
    cdd8:	2a00000c 	bcs	ce10 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    cddc:	e0448008 	sub	r8, r4, r8
    cde0:	e1a0000b 	mov	r0, fp
    cde4:	e1a01008 	mov	r1, r8
    cde8:	ebfffce7 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cdec:	e2483001 	sub	r3, r8, #1
    cdf0:	e3a00020 	mov	r0, #32
    cdf4:	e59b200c 	ldr	r2, [fp, #12]
    cdf8:	e2433001 	sub	r3, r3, #1
    cdfc:	e3730001 	cmn	r3, #1
    ce00:	e2821001 	add	r1, r2, #1
    ce04:	e58b100c 	str	r1, [fp, #12]
    ce08:	e5c20000 	strb	r0, [r2]
    ce0c:	1afffff8 	bne	cdf4 <CString::FormatV(char const*, std::__va_list)+0x6a4>
    ce10:	e59d3010 	ldr	r3, [sp, #16]
    ce14:	e3530000 	cmp	r3, #0
    ce18:	0afffefc 	beq	ca10 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    ce1c:	e3a01001 	mov	r1, #1
    ce20:	e1a0000b 	mov	r0, fp
    ce24:	ebfffcd8 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ce28:	e59b300c 	ldr	r3, [fp, #12]
    ce2c:	e3a0202d 	mov	r2, #45	; 0x2d
    ce30:	e2831001 	add	r1, r3, #1
    ce34:	e58b100c 	str	r1, [fp, #12]
    ce38:	e5c32000 	strb	r2, [r3]
    ce3c:	eafffef3 	b	ca10 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    ce40:	e3a01001 	mov	r1, #1
    ce44:	e1a0000b 	mov	r0, fp
    ce48:	ebfffccf 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ce4c:	e59b300c 	ldr	r3, [fp, #12]
    ce50:	e3540001 	cmp	r4, #1
    ce54:	e2832001 	add	r2, r3, #1
    ce58:	e58b200c 	str	r2, [fp, #12]
    ce5c:	e5c37000 	strb	r7, [r3]
    ce60:	9a00000b 	bls	ce94 <CString::FormatV(char const*, std::__va_list)+0x744>
    ce64:	e2441001 	sub	r1, r4, #1
    ce68:	e1a0000b 	mov	r0, fp
    ce6c:	e2444002 	sub	r4, r4, #2
    ce70:	ebfffcc5 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ce74:	e3a01020 	mov	r1, #32
    ce78:	e59b300c 	ldr	r3, [fp, #12]
    ce7c:	e2444001 	sub	r4, r4, #1
    ce80:	e3740001 	cmn	r4, #1
    ce84:	e2832001 	add	r2, r3, #1
    ce88:	e58b200c 	str	r2, [fp, #12]
    ce8c:	e5c31000 	strb	r1, [r3]
    ce90:	1afffff8 	bne	ce78 <CString::FormatV(char const*, std::__va_list)+0x728>
    ce94:	e58d6000 	str	r6, [sp]
    ce98:	eafffedf 	b	ca1c <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ce9c:	e59d1008 	ldr	r1, [sp, #8]
    cea0:	e1a0000b 	mov	r0, fp
    cea4:	ebfffd48 	bl	c3cc <CString::PutString(char const*)>
    cea8:	e1560004 	cmp	r6, r4
    ceac:	2afffeda 	bcs	ca1c <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ceb0:	e0444006 	sub	r4, r4, r6
    ceb4:	e1a0000b 	mov	r0, fp
    ceb8:	e1a01004 	mov	r1, r4
    cebc:	ebfffcb2 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cec0:	e2443001 	sub	r3, r4, #1
    cec4:	e3a00020 	mov	r0, #32
    cec8:	e59b200c 	ldr	r2, [fp, #12]
    cecc:	e2433001 	sub	r3, r3, #1
    ced0:	e3730001 	cmn	r3, #1
    ced4:	e2821001 	add	r1, r2, #1
    ced8:	e58b100c 	str	r1, [fp, #12]
    cedc:	e5c20000 	strb	r0, [r2]
    cee0:	1afffff8 	bne	cec8 <CString::FormatV(char const*, std::__va_list)+0x778>
    cee4:	eafffecc 	b	ca1c <CString::FormatV(char const*, std::__va_list)+0x2cc>
    cee8:	e1a01008 	mov	r1, r8
    ceec:	e1a0000b 	mov	r0, fp
    cef0:	ebfffd35 	bl	c3cc <CString::PutString(char const*)>
    cef4:	e1570004 	cmp	r7, r4
    cef8:	2affffe5 	bcs	ce94 <CString::FormatV(char const*, std::__va_list)+0x744>
    cefc:	e0444007 	sub	r4, r4, r7
    cf00:	e1a0000b 	mov	r0, fp
    cf04:	e1a01004 	mov	r1, r4
    cf08:	ebfffc9f 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cf0c:	e2443001 	sub	r3, r4, #1
    cf10:	e3a00020 	mov	r0, #32
    cf14:	e59b200c 	ldr	r2, [fp, #12]
    cf18:	e2433001 	sub	r3, r3, #1
    cf1c:	e3730001 	cmn	r3, #1
    cf20:	e2821001 	add	r1, r2, #1
    cf24:	e58b100c 	str	r1, [fp, #12]
    cf28:	e5c20000 	strb	r0, [r2]
    cf2c:	1afffff8 	bne	cf14 <CString::FormatV(char const*, std::__va_list)+0x7c4>
    cf30:	eaffffd7 	b	ce94 <CString::FormatV(char const*, std::__va_list)+0x744>
    cf34:	e3a01001 	mov	r1, #1
    cf38:	e1a0000b 	mov	r0, fp
    cf3c:	ebfffc92 	bl	c18c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cf40:	e59b300c 	ldr	r3, [fp, #12]
    cf44:	e3a0202d 	mov	r2, #45	; 0x2d
    cf48:	e2831001 	add	r1, r3, #1
    cf4c:	e58b100c 	str	r1, [fp, #12]
    cf50:	e5c32000 	strb	r2, [r3]
    cf54:	eaffff10 	b	cb9c <CString::FormatV(char const*, std::__va_list)+0x44c>
    cf58:	e1a08007 	mov	r8, r7
    cf5c:	e3a0a001 	mov	sl, #1
    cf60:	eafffeec 	b	cb18 <CString::FormatV(char const*, std::__va_list)+0x3c8>
    cf64:	e1a09006 	mov	r9, r6
    cf68:	e3a0a001 	mov	sl, #1
    cf6c:	eafffe6a 	b	c91c <CString::FormatV(char const*, std::__va_list)+0x1cc>

0000cf70 <CString::Format(char const*, ...)>:
    cf70:	e92d000e 	push	{r1, r2, r3}
    cf74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    cf78:	e24dd008 	sub	sp, sp, #8
    cf7c:	e28d2010 	add	r2, sp, #16
    cf80:	e59d100c 	ldr	r1, [sp, #12]
    cf84:	e58d2004 	str	r2, [sp, #4]
    cf88:	ebfffdf0 	bl	c750 <CString::FormatV(char const*, std::__va_list)>
    cf8c:	e28dd008 	add	sp, sp, #8
    cf90:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    cf94:	e28dd00c 	add	sp, sp, #12
    cf98:	e12fff1e 	bx	lr
    cf9c:	00000000 	andeq	r0, r0, r0

0000cfa0 <DelayLoop>:
    cfa0:	e2500001 	subs	r0, r0, #1
    cfa4:	8afffffd 	bhi	cfa0 <DelayLoop>
    cfa8:	e1a0f00e 	mov	pc, lr

0000cfac <CExceptionHandler::CExceptionHandler()>:
    cfac:	e59f1058 	ldr	r1, [pc, #88]	; d00c <CExceptionHandler::CExceptionHandler()+0x60>
    cfb0:	e3a0c000 	mov	ip, #0
    cfb4:	e59f2054 	ldr	r2, [pc, #84]	; d010 <CExceptionHandler::CExceptionHandler()+0x64>
    cfb8:	e59f3054 	ldr	r3, [pc, #84]	; d014 <CExceptionHandler::CExceptionHandler()+0x68>
    cfbc:	e92d4010 	push	{r4, lr}
    cfc0:	e1a01141 	asr	r1, r1, #2
    cfc4:	e300e56c 	movw	lr, #1388	; 0x56c
    cfc8:	e1a02142 	asr	r2, r2, #2
    cfcc:	e340e001 	movt	lr, #1
    cfd0:	e1a03143 	asr	r3, r3, #2
    cfd4:	e2411002 	sub	r1, r1, #2
    cfd8:	e2422002 	sub	r2, r2, #2
    cfdc:	e2433002 	sub	r3, r3, #2
    cfe0:	e58e0000 	str	r0, [lr]
    cfe4:	e1a04000 	mov	r4, r0
    cfe8:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    cfec:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    cff0:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    cff4:	e58c1004 	str	r1, [ip, #4]
    cff8:	e58c200c 	str	r2, [ip, #12]
    cffc:	e58c3010 	str	r3, [ip, #16]
    d000:	ebffefc3 	bl	8f14 <SyncDataAndInstructionCache>
    d004:	e1a00004 	mov	r0, r4
    d008:	e8bd8010 	pop	{r4, pc}
    d00c:	0000d14c 	.word	0x0000d14c
    d010:	0000d184 	.word	0x0000d184
    d014:	0000d1c0 	.word	0x0000d1c0

0000d018 <CExceptionHandler::~CExceptionHandler()>:
    d018:	e300356c 	movw	r3, #1388	; 0x56c
    d01c:	e3403001 	movt	r3, #1
    d020:	e3a02000 	mov	r2, #0
    d024:	e5832000 	str	r2, [r3]
    d028:	e12fff1e 	bx	lr

0000d02c <CExceptionHandler::Throw(unsigned int)>:
    d02c:	e92d4010 	push	{r4, lr}
    d030:	e24dd008 	sub	sp, sp, #8
    d034:	e1a04001 	mov	r4, r1
    d038:	ebfff934 	bl	b510 <CLogger::Get()>
    d03c:	e300243c 	movw	r2, #1084	; 0x43c
    d040:	e3402001 	movt	r2, #1
    d044:	e30f3fc4 	movw	r3, #65476	; 0xffc4
    d048:	e30f1fbc 	movw	r1, #65468	; 0xffbc
    d04c:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    d050:	e3403000 	movt	r3, #0
    d054:	e3401000 	movt	r1, #0
    d058:	e3a02000 	mov	r2, #0
    d05c:	e58dc000 	str	ip, [sp]
    d060:	ebfffa06 	bl	b880 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d064:	e28dd008 	add	sp, sp, #8
    d068:	e8bd8010 	pop	{r4, pc}

0000d06c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    d06c:	e3510002 	cmp	r1, #2
    d070:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    d074:	e1a05001 	mov	r5, r1
    d078:	e24dd024 	sub	sp, sp, #36	; 0x24
    d07c:	e1a04002 	mov	r4, r2
    d080:	0a000025 	beq	d11c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
    d084:	e3510003 	cmp	r1, #3
    d088:	0a000020 	beq	d110 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
    d08c:	e3a08000 	mov	r8, #0
    d090:	e1a09008 	mov	r9, r8
    d094:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    d098:	e30f1fbc 	movw	r1, #65468	; 0xffbc
    d09c:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    d0a0:	e3401000 	movt	r1, #0
    d0a4:	e203301f 	and	r3, r3, #31
    d0a8:	e5947040 	ldr	r7, [r4, #64]	; 0x40
    d0ac:	e3530012 	cmp	r3, #18
    d0b0:	089400c0 	ldmeq	r4, {r6, r7}
    d0b4:	e1a00006 	mov	r0, r6
    d0b8:	eb000748 	bl	ede0 <debug_stacktrace(unsigned int const*, char const*)>
    d0bc:	ebfff913 	bl	b510 <CLogger::Get()>
    d0c0:	e300343c 	movw	r3, #1084	; 0x43c
    d0c4:	e3403001 	movt	r3, #1
    d0c8:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    d0cc:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    d0d0:	e3a02000 	mov	r2, #0
    d0d4:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    d0d8:	e30f1fbc 	movw	r1, #65468	; 0xffbc
    d0dc:	e58d7014 	str	r7, [sp, #20]
    d0e0:	e3401000 	movt	r1, #0
    d0e4:	e58d6010 	str	r6, [sp, #16]
    d0e8:	e30f3fd4 	movw	r3, #65492	; 0xffd4
    d0ec:	e58d800c 	str	r8, [sp, #12]
    d0f0:	e3403000 	movt	r3, #0
    d0f4:	e58d9008 	str	r9, [sp, #8]
    d0f8:	e58d4000 	str	r4, [sp]
    d0fc:	e58de018 	str	lr, [sp, #24]
    d100:	e58dc004 	str	ip, [sp, #4]
    d104:	ebfff9dd 	bl	b880 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d108:	e28dd024 	add	sp, sp, #36	; 0x24
    d10c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    d110:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
    d114:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
    d118:	eaffffdd 	b	d094 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    d11c:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
    d120:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
    d124:	eaffffda 	b	d094 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>

0000d128 <CExceptionHandler::Get()>:
    d128:	e300356c 	movw	r3, #1388	; 0x56c
    d12c:	e3403001 	movt	r3, #1
    d130:	e5930000 	ldr	r0, [r3]
    d134:	e12fff1e 	bx	lr

0000d138 <ExceptionHandler>:
    d138:	e300356c 	movw	r3, #1388	; 0x56c
    d13c:	e3403001 	movt	r3, #1
    d140:	e1a02001 	mov	r2, r1
    d144:	e1a01000 	mov	r1, r0
    d148:	e5930000 	ldr	r0, [r3]
    d14c:	eaffffc6 	b	d06c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000d150 <UndefinedInstructionStub>:
    d150:	e24ee004 	sub	lr, lr, #4
    d154:	e92d4000 	stmfd	sp!, {lr}
    d158:	e14fe000 	mrs	lr, SPSR
    d15c:	e92d4000 	stmfd	sp!, {lr}
    d160:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    d164:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    d168:	e1a0100d 	mov	r1, sp
    d16c:	f1020012 	cps	#18
    d170:	e1a0200d 	mov	r2, sp
    d174:	e1a0300e 	mov	r3, lr
    d178:	f102001f 	cps	#31
    d17c:	e1a0d001 	mov	sp, r1
    d180:	e92d000c 	push	{r2, r3}
    d184:	e1a0100d 	mov	r1, sp
    d188:	e3a00001 	mov	r0, #1
    d18c:	eaffffe9 	b	d138 <ExceptionHandler>

0000d190 <PrefetchAbortStub>:
    d190:	e24ee004 	sub	lr, lr, #4
    d194:	e92d4000 	stmfd	sp!, {lr}
    d198:	e14fe000 	mrs	lr, SPSR
    d19c:	e92d4000 	stmfd	sp!, {lr}
    d1a0:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    d1a4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    d1a8:	e1a0100d 	mov	r1, sp
    d1ac:	f1020012 	cps	#18
    d1b0:	e1a0200d 	mov	r2, sp
    d1b4:	e1a0300e 	mov	r3, lr
    d1b8:	f102001f 	cps	#31
    d1bc:	e1a0d001 	mov	sp, r1
    d1c0:	e92d000c 	push	{r2, r3}
    d1c4:	e1a0100d 	mov	r1, sp
    d1c8:	e3a00002 	mov	r0, #2
    d1cc:	eaffffd9 	b	d138 <ExceptionHandler>

0000d1d0 <DataAbortStub>:
    d1d0:	e24ee008 	sub	lr, lr, #8
    d1d4:	e92d4000 	stmfd	sp!, {lr}
    d1d8:	e14fe000 	mrs	lr, SPSR
    d1dc:	e92d4000 	stmfd	sp!, {lr}
    d1e0:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    d1e4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    d1e8:	e1a0100d 	mov	r1, sp
    d1ec:	f1020012 	cps	#18
    d1f0:	e1a0200d 	mov	r2, sp
    d1f4:	e1a0300e 	mov	r3, lr
    d1f8:	f102001f 	cps	#31
    d1fc:	e1a0d001 	mov	sp, r1
    d200:	e92d000c 	push	{r2, r3}
    d204:	e1a0100d 	mov	r1, sp
    d208:	e3a00003 	mov	r0, #3
    d20c:	eaffffc9 	b	d138 <ExceptionHandler>

0000d210 <IRQStub>:
    d210:	e24ee004 	sub	lr, lr, #4
    d214:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d218:	eb0000ed 	bl	d5d4 <InterruptHandler>
    d21c:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000d220 <FIQStub>:
    d220:	e24ee004 	sub	lr, lr, #4
    d224:	e92d400f 	push	{r0, r1, r2, r3, lr}
    d228:	e59f2024 	ldr	r2, [pc, #36]	; d254 <FIQStub+0x34>
    d22c:	e5921000 	ldr	r1, [r2]
    d230:	e3510000 	cmp	r1, #0
    d234:	0a000002 	beq	d244 <FIQStub+0x24>
    d238:	e5920004 	ldr	r0, [r2, #4]
    d23c:	e12fff31 	blx	r1
    d240:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    d244:	e59f100c 	ldr	r1, [pc, #12]	; d258 <FIQStub+0x38>
    d248:	e3a00000 	mov	r0, #0
    d24c:	e5810000 	str	r0, [r1]
    d250:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    d254:	0001044c 	.word	0x0001044c
    d258:	3f00b20c 	.word	0x3f00b20c

0000d25c <CInterruptSystem::CInterruptSystem()>:
    d25c:	e2802f47 	add	r2, r0, #284	; 0x11c
    d260:	e1a0c000 	mov	ip, r0
    d264:	e2403004 	sub	r3, r0, #4
    d268:	e3a01000 	mov	r1, #0
    d26c:	e1a00002 	mov	r0, r2
    d270:	e5a31004 	str	r1, [r3, #4]!
    d274:	e1530000 	cmp	r3, r0
    d278:	e5a21004 	str	r1, [r2, #4]!
    d27c:	1afffffb 	bne	d270 <CInterruptSystem::CInterruptSystem()+0x14>
    d280:	e3003570 	movw	r3, #1392	; 0x570
    d284:	e3403001 	movt	r3, #1
    d288:	e1a0000c 	mov	r0, ip
    d28c:	e583c000 	str	ip, [r3]
    d290:	e12fff1e 	bx	lr

0000d294 <CInterruptSystem::~CInterruptSystem()>:
    d294:	e3003570 	movw	r3, #1392	; 0x570
    d298:	e3403001 	movt	r3, #1
    d29c:	e3a02000 	mov	r2, #0
    d2a0:	e5832000 	str	r2, [r3]
    d2a4:	e12fff1e 	bx	lr

0000d2a8 <CInterruptSystem::Initialize()>:
    d2a8:	e59f2054 	ldr	r2, [pc, #84]	; d304 <CInterruptSystem::Initialize()+0x5c>
    d2ac:	e59f3054 	ldr	r3, [pc, #84]	; d308 <CInterruptSystem::Initialize()+0x60>
    d2b0:	e92d4010 	push	{r4, lr}
    d2b4:	e1a02142 	asr	r2, r2, #2
    d2b8:	e1a03143 	asr	r3, r3, #2
    d2bc:	e3a04000 	mov	r4, #0
    d2c0:	e2422002 	sub	r2, r2, #2
    d2c4:	e2433002 	sub	r3, r3, #2
    d2c8:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    d2cc:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    d2d0:	e5842018 	str	r2, [r4, #24]
    d2d4:	e584301c 	str	r3, [r4, #28]
    d2d8:	ebffef0d 	bl	8f14 <SyncDataAndInstructionCache>
    d2dc:	e3a03a0b 	mov	r3, #45056	; 0xb000
    d2e0:	e3433f00 	movt	r3, #16128	; 0x3f00
    d2e4:	e3e02000 	mvn	r2, #0
    d2e8:	e583420c 	str	r4, [r3, #524]	; 0x20c
    d2ec:	e583221c 	str	r2, [r3, #540]	; 0x21c
    d2f0:	e5832220 	str	r2, [r3, #544]	; 0x220
    d2f4:	e5832224 	str	r2, [r3, #548]	; 0x224
    d2f8:	f1080080 	cpsie	i
    d2fc:	e3a00001 	mov	r0, #1
    d300:	e8bd8010 	pop	{r4, pc}
    d304:	0000d1f8 	.word	0x0000d1f8
    d308:	0000d204 	.word	0x0000d204

0000d30c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    d30c:	e351001f 	cmp	r1, #31
    d310:	e080c101 	add	ip, r0, r1, lsl #2
    d314:	e7802101 	str	r2, [r0, r1, lsl #2]
    d318:	e58c3120 	str	r3, [ip, #288]	; 0x120
    d31c:	930b3210 	movwls	r3, #45584	; 0xb210
    d320:	93433f00 	movtls	r3, #16128	; 0x3f00
    d324:	9a000005 	bls	d340 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x34>
    d328:	e30b2214 	movw	r2, #45588	; 0xb214
    d32c:	e351003f 	cmp	r1, #63	; 0x3f
    d330:	e3432f00 	movt	r2, #16128	; 0x3f00
    d334:	e30b3218 	movw	r3, #45592	; 0xb218
    d338:	e3433f00 	movt	r3, #16128	; 0x3f00
    d33c:	91a03002 	movls	r3, r2
    d340:	e201101f 	and	r1, r1, #31
    d344:	e3a02001 	mov	r2, #1
    d348:	e1a01112 	lsl	r1, r2, r1
    d34c:	e5831000 	str	r1, [r3]
    d350:	e12fff1e 	bx	lr

0000d354 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    d354:	e351001f 	cmp	r1, #31
    d358:	e92d4010 	push	{r4, lr}
    d35c:	930b321c 	movwls	r3, #45596	; 0xb21c
    d360:	93433f00 	movtls	r3, #16128	; 0x3f00
    d364:	9a000005 	bls	d380 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x2c>
    d368:	e30b2220 	movw	r2, #45600	; 0xb220
    d36c:	e351003f 	cmp	r1, #63	; 0x3f
    d370:	e3432f00 	movt	r2, #16128	; 0x3f00
    d374:	e30b3224 	movw	r3, #45604	; 0xb224
    d378:	e3433f00 	movt	r3, #16128	; 0x3f00
    d37c:	91a03002 	movls	r3, r2
    d380:	e080e101 	add	lr, r0, r1, lsl #2
    d384:	e201401f 	and	r4, r1, #31
    d388:	e3a02001 	mov	r2, #1
    d38c:	e3a0c000 	mov	ip, #0
    d390:	e1a02412 	lsl	r2, r2, r4
    d394:	e5832000 	str	r2, [r3]
    d398:	e780c101 	str	ip, [r0, r1, lsl #2]
    d39c:	e58ec120 	str	ip, [lr, #288]	; 0x120
    d3a0:	e8bd8010 	pop	{r4, pc}

0000d3a4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    d3a4:	e300044c 	movw	r0, #1100	; 0x44c
    d3a8:	e3a0ca0b 	mov	ip, #45056	; 0xb000
    d3ac:	e3400001 	movt	r0, #1
    d3b0:	e343cf00 	movt	ip, #16128	; 0x3f00
    d3b4:	e3811080 	orr	r1, r1, #128	; 0x80
    d3b8:	e880000c 	stm	r0, {r2, r3}
    d3bc:	e58c120c 	str	r1, [ip, #524]	; 0x20c
    d3c0:	e12fff1e 	bx	lr

0000d3c4 <CInterruptSystem::DisconnectFIQ()>:
    d3c4:	e3a01a0b 	mov	r1, #45056	; 0xb000
    d3c8:	e300344c 	movw	r3, #1100	; 0x44c
    d3cc:	e3431f00 	movt	r1, #16128	; 0x3f00
    d3d0:	e3403001 	movt	r3, #1
    d3d4:	e3a02000 	mov	r2, #0
    d3d8:	e581220c 	str	r2, [r1, #524]	; 0x20c
    d3dc:	e5832000 	str	r2, [r3]
    d3e0:	e5832004 	str	r2, [r3, #4]
    d3e4:	e12fff1e 	bx	lr

0000d3e8 <CInterruptSystem::EnableIRQ(unsigned int)>:
    d3e8:	e350001f 	cmp	r0, #31
    d3ec:	930b3210 	movwls	r3, #45584	; 0xb210
    d3f0:	93433f00 	movtls	r3, #16128	; 0x3f00
    d3f4:	9a000005 	bls	d410 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>
    d3f8:	e30b2214 	movw	r2, #45588	; 0xb214
    d3fc:	e350003f 	cmp	r0, #63	; 0x3f
    d400:	e3432f00 	movt	r2, #16128	; 0x3f00
    d404:	e30b3218 	movw	r3, #45592	; 0xb218
    d408:	e3433f00 	movt	r3, #16128	; 0x3f00
    d40c:	91a03002 	movls	r3, r2
    d410:	e200001f 	and	r0, r0, #31
    d414:	e3a02001 	mov	r2, #1
    d418:	e1a00012 	lsl	r0, r2, r0
    d41c:	e5830000 	str	r0, [r3]
    d420:	e12fff1e 	bx	lr

0000d424 <CInterruptSystem::DisableIRQ(unsigned int)>:
    d424:	e350001f 	cmp	r0, #31
    d428:	930b321c 	movwls	r3, #45596	; 0xb21c
    d42c:	93433f00 	movtls	r3, #16128	; 0x3f00
    d430:	9a000005 	bls	d44c <CInterruptSystem::DisableIRQ(unsigned int)+0x28>
    d434:	e30b2220 	movw	r2, #45600	; 0xb220
    d438:	e350003f 	cmp	r0, #63	; 0x3f
    d43c:	e3432f00 	movt	r2, #16128	; 0x3f00
    d440:	e30b3224 	movw	r3, #45604	; 0xb224
    d444:	e3433f00 	movt	r3, #16128	; 0x3f00
    d448:	91a03002 	movls	r3, r2
    d44c:	e200001f 	and	r0, r0, #31
    d450:	e3a02001 	mov	r2, #1
    d454:	e1a00012 	lsl	r0, r2, r0
    d458:	e5830000 	str	r0, [r3]
    d45c:	e12fff1e 	bx	lr

0000d460 <CInterruptSystem::EnableFIQ(unsigned int)>:
    d460:	e3a03a0b 	mov	r3, #45056	; 0xb000
    d464:	e3433f00 	movt	r3, #16128	; 0x3f00
    d468:	e3800080 	orr	r0, r0, #128	; 0x80
    d46c:	e583020c 	str	r0, [r3, #524]	; 0x20c
    d470:	e12fff1e 	bx	lr

0000d474 <CInterruptSystem::DisableFIQ()>:
    d474:	e3a03a0b 	mov	r3, #45056	; 0xb000
    d478:	e3433f00 	movt	r3, #16128	; 0x3f00
    d47c:	e3a02000 	mov	r2, #0
    d480:	e583220c 	str	r2, [r3, #524]	; 0x20c
    d484:	e12fff1e 	bx	lr

0000d488 <CInterruptSystem::Get()>:
    d488:	e3003570 	movw	r3, #1392	; 0x570
    d48c:	e3403001 	movt	r3, #1
    d490:	e5930000 	ldr	r0, [r3]
    d494:	e12fff1e 	bx	lr

0000d498 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    d498:	e7903101 	ldr	r3, [r0, r1, lsl #2]
    d49c:	e0800101 	add	r0, r0, r1, lsl #2
    d4a0:	e3530000 	cmp	r3, #0
    d4a4:	0a000004 	beq	d4bc <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    d4a8:	e92d4010 	push	{r4, lr}
    d4ac:	e5900120 	ldr	r0, [r0, #288]	; 0x120
    d4b0:	e12fff33 	blx	r3
    d4b4:	e3a00001 	mov	r0, #1
    d4b8:	e8bd8010 	pop	{r4, pc}
    d4bc:	e351001f 	cmp	r1, #31
    d4c0:	930b221c 	movwls	r2, #45596	; 0xb21c
    d4c4:	93432f00 	movtls	r2, #16128	; 0x3f00
    d4c8:	9a000005 	bls	d4e4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
    d4cc:	e30b3220 	movw	r3, #45600	; 0xb220
    d4d0:	e351003f 	cmp	r1, #63	; 0x3f
    d4d4:	e3433f00 	movt	r3, #16128	; 0x3f00
    d4d8:	e30b2224 	movw	r2, #45604	; 0xb224
    d4dc:	e3432f00 	movt	r2, #16128	; 0x3f00
    d4e0:	91a02003 	movls	r2, r3
    d4e4:	e3a03001 	mov	r3, #1
    d4e8:	e201101f 	and	r1, r1, #31
    d4ec:	e1a01113 	lsl	r1, r3, r1
    d4f0:	e3a00000 	mov	r0, #0
    d4f4:	e5821000 	str	r1, [r2]
    d4f8:	e12fff1e 	bx	lr

0000d4fc <CInterruptSystem::InterruptHandler()>:
    d4fc:	e3a02a0b 	mov	r2, #45056	; 0xb000
    d500:	e3432f00 	movt	r2, #16128	; 0x3f00
    d504:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d508:	e3001570 	movw	r1, #1392	; 0x570
    d50c:	e5923204 	ldr	r3, [r2, #516]	; 0x204
    d510:	e24dd010 	sub	sp, sp, #16
    d514:	e3401001 	movt	r1, #1
    d518:	e30be21c 	movw	lr, #45596	; 0xb21c
    d51c:	e30b6224 	movw	r6, #45604	; 0xb224
    d520:	e30b5220 	movw	r5, #45600	; 0xb220
    d524:	e58d3004 	str	r3, [sp, #4]
    d528:	e343ef00 	movt	lr, #16128	; 0x3f00
    d52c:	e5910000 	ldr	r0, [r1]
    d530:	e3436f00 	movt	r6, #16128	; 0x3f00
    d534:	e5921208 	ldr	r1, [r2, #520]	; 0x208
    d538:	e3435f00 	movt	r5, #16128	; 0x3f00
    d53c:	e28d4008 	add	r4, sp, #8
    d540:	e3a0c000 	mov	ip, #0
    d544:	e3a07001 	mov	r7, #1
    d548:	e58d1008 	str	r1, [sp, #8]
    d54c:	e5922200 	ldr	r2, [r2, #512]	; 0x200
    d550:	e6ef2072 	uxtb	r2, r2
    d554:	e58d200c 	str	r2, [sp, #12]
    d558:	e3530000 	cmp	r3, #0
    d55c:	0a000016 	beq	d5bc <CInterruptSystem::InterruptHandler()+0xc0>
    d560:	e1a0200c 	mov	r2, ip
    d564:	e3130001 	tst	r3, #1
    d568:	0a000010 	beq	d5b0 <CInterruptSystem::InterruptHandler()+0xb4>
    d56c:	e7901102 	ldr	r1, [r0, r2, lsl #2]
    d570:	e3510000 	cmp	r1, #0
    d574:	0a000004 	beq	d58c <CInterruptSystem::InterruptHandler()+0x90>
    d578:	e2822048 	add	r2, r2, #72	; 0x48
    d57c:	e7900102 	ldr	r0, [r0, r2, lsl #2]
    d580:	e28dd010 	add	sp, sp, #16
    d584:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    d588:	e12fff11 	bx	r1
    d58c:	e352001f 	cmp	r2, #31
    d590:	e1a0800e 	mov	r8, lr
    d594:	9a000002 	bls	d5a4 <CInterruptSystem::InterruptHandler()+0xa8>
    d598:	e352003f 	cmp	r2, #63	; 0x3f
    d59c:	81a08006 	movhi	r8, r6
    d5a0:	91a08005 	movls	r8, r5
    d5a4:	e202101f 	and	r1, r2, #31
    d5a8:	e1a01117 	lsl	r1, r7, r1
    d5ac:	e5881000 	str	r1, [r8]
    d5b0:	e1b030a3 	lsrs	r3, r3, #1
    d5b4:	e2822001 	add	r2, r2, #1
    d5b8:	1affffe9 	bne	d564 <CInterruptSystem::InterruptHandler()+0x68>
    d5bc:	e28cc020 	add	ip, ip, #32
    d5c0:	e35c0060 	cmp	ip, #96	; 0x60
    d5c4:	14943004 	ldrne	r3, [r4], #4
    d5c8:	1affffe2 	bne	d558 <CInterruptSystem::InterruptHandler()+0x5c>
    d5cc:	e28dd010 	add	sp, sp, #16
    d5d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d5d4 <InterruptHandler>:
    d5d4:	eaffffc8 	b	d4fc <CInterruptSystem::InterruptHandler()>

0000d5d8 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    d5d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d5dc:	e280c0dc 	add	ip, r0, #220	; 0xdc
    d5e0:	e3a0e000 	mov	lr, #0
    d5e4:	e1a03000 	mov	r3, r0
    d5e8:	e1a0200e 	mov	r2, lr
    d5ec:	e5801000 	str	r1, [r0]
    d5f0:	e5a3e004 	str	lr, [r3, #4]!
    d5f4:	e5a32004 	str	r2, [r3, #4]!
    d5f8:	e153000c 	cmp	r3, ip
    d5fc:	1afffffc 	bne	d5f4 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    d600:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000d604 <CGPIOManager::~CGPIOManager()>:
    d604:	e5903004 	ldr	r3, [r0, #4]
    d608:	e92d4010 	push	{r4, lr}
    d60c:	e3530000 	cmp	r3, #0
    d610:	e1a04000 	mov	r4, r0
    d614:	0a000002 	beq	d624 <CGPIOManager::~CGPIOManager()+0x20>
    d618:	e3a01034 	mov	r1, #52	; 0x34
    d61c:	e5900000 	ldr	r0, [r0]
    d620:	ebffff4b 	bl	d354 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    d624:	e1a00004 	mov	r0, r4
    d628:	e8bd8010 	pop	{r4, pc}

0000d62c <CGPIOManager::Initialize()>:
    d62c:	e92d4010 	push	{r4, lr}
    d630:	e1a03000 	mov	r3, r0
    d634:	e1a04000 	mov	r4, r0
    d638:	e3a01034 	mov	r1, #52	; 0x34
    d63c:	e5900000 	ldr	r0, [r0]
    d640:	e30d26fc 	movw	r2, #55036	; 0xd6fc
    d644:	e3402000 	movt	r2, #0
    d648:	ebffff2f 	bl	d30c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    d64c:	e3a03001 	mov	r3, #1
    d650:	e1a00003 	mov	r0, r3
    d654:	e5843004 	str	r3, [r4, #4]
    d658:	e8bd8010 	pop	{r4, pc}

0000d65c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    d65c:	e5913004 	ldr	r3, [r1, #4]
    d660:	e2833002 	add	r3, r3, #2
    d664:	e7801103 	str	r1, [r0, r3, lsl #2]
    d668:	e12fff1e 	bx	lr

0000d66c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    d66c:	e5913004 	ldr	r3, [r1, #4]
    d670:	e3a02000 	mov	r2, #0
    d674:	e2833002 	add	r3, r3, #2
    d678:	e7802103 	str	r2, [r0, r3, lsl #2]
    d67c:	e12fff1e 	bx	lr

0000d680 <CGPIOManager::InterruptHandler()>:
    d680:	e3a02000 	mov	r2, #0
    d684:	e3432f20 	movt	r2, #16160	; 0x3f20
    d688:	e92d4070 	push	{r4, r5, r6, lr}
    d68c:	e3a04000 	mov	r4, #0
    d690:	e5923040 	ldr	r3, [r2, #64]	; 0x40
    d694:	ea000004 	b	d6ac <CGPIOManager::InterruptHandler()+0x2c>
    d698:	e2844001 	add	r4, r4, #1
    d69c:	e314001f 	tst	r4, #31
    d6a0:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    d6a4:	e3540036 	cmp	r4, #54	; 0x36
    d6a8:	08bd8070 	popeq	{r4, r5, r6, pc}
    d6ac:	e3130001 	tst	r3, #1
    d6b0:	e1a030a3 	lsr	r3, r3, #1
    d6b4:	0afffff7 	beq	d698 <CGPIOManager::InterruptHandler()+0x18>
    d6b8:	e2843002 	add	r3, r4, #2
    d6bc:	e204501f 	and	r5, r4, #31
    d6c0:	e3a02001 	mov	r2, #1
    d6c4:	e7900103 	ldr	r0, [r0, r3, lsl #2]
    d6c8:	e1a05512 	lsl	r5, r2, r5
    d6cc:	e3500000 	cmp	r0, #0
    d6d0:	0a000006 	beq	d6f0 <CGPIOManager::InterruptHandler()+0x70>
    d6d4:	ebffed55 	bl	8c30 <CGPIOPin::InterruptHandler()>
    d6d8:	e3a03010 	mov	r3, #16
    d6dc:	e3403fc8 	movt	r3, #4040	; 0xfc8
    d6e0:	e08332a4 	add	r3, r3, r4, lsr #5
    d6e4:	e1a03103 	lsl	r3, r3, #2
    d6e8:	e5835000 	str	r5, [r3]
    d6ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    d6f0:	e1a00004 	mov	r0, r4
    d6f4:	ebffed50 	bl	8c3c <CGPIOPin::DisableAllInterrupts(unsigned int)>
    d6f8:	eafffff6 	b	d6d8 <CGPIOManager::InterruptHandler()+0x58>

0000d6fc <CGPIOManager::InterruptStub(void*)>:
    d6fc:	eaffffdf 	b	d680 <CGPIOManager::InterruptHandler()>

0000d700 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    d700:	e12fff1e 	bx	lr

0000d704 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    d704:	e92d4010 	push	{r4, lr}
    d708:	e3a01010 	mov	r1, #16
    d70c:	e1a04000 	mov	r4, r0
    d710:	ebffede5 	bl	8eac <operator delete(void*, unsigned int)>
    d714:	e1a00004 	mov	r0, r4
    d718:	e8bd8010 	pop	{r4, pc}

0000d71c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    d71c:	e92d4070 	push	{r4, r5, r6, lr}
    d720:	e3004574 	movw	r4, #1396	; 0x574
    d724:	e3404001 	movt	r4, #1
    d728:	e1a05000 	mov	r5, r0
    d72c:	e1a06001 	mov	r6, r1
    d730:	e5940000 	ldr	r0, [r4]
    d734:	e3500000 	cmp	r0, #0
    d738:	1a00001a 	bne	d7a8 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    d73c:	e1d500bc 	ldrh	r0, [r5, #12]
    d740:	e1d530be 	ldrh	r3, [r5, #14]
    d744:	e5856008 	str	r6, [r5, #8]
    d748:	e0402003 	sub	r2, r0, r3
    d74c:	e6bf2072 	sxth	r2, r2
    d750:	e3520000 	cmp	r2, #0
    d754:	da00000c 	ble	d78c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    d758:	e3560000 	cmp	r6, #0
    d75c:	1a00000c 	bne	d794 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    d760:	e2833001 	add	r3, r3, #1
    d764:	e6ff3073 	uxth	r3, r3
    d768:	e1c530be 	strh	r3, [r5, #14]
    d76c:	e5951004 	ldr	r1, [r5, #4]
    d770:	e1833800 	orr	r3, r3, r0, lsl #16
    d774:	e5942004 	ldr	r2, [r4, #4]
    d778:	e7823101 	str	r3, [r2, r1, lsl #2]
    d77c:	e5943000 	ldr	r3, [r4]
    d780:	e3530000 	cmp	r3, #0
    d784:	1a000005 	bne	d7a0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    d788:	e8bd8070 	pop	{r4, r5, r6, pc}
    d78c:	e3560000 	cmp	r6, #0
    d790:	1a000006 	bne	d7b0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    d794:	e5943000 	ldr	r3, [r4]
    d798:	e3530000 	cmp	r3, #0
    d79c:	08bd8070 	popeq	{r4, r5, r6, pc}
    d7a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    d7a4:	eaffedd0 	b	8eec <LeaveCritical>
    d7a8:	ebffedc1 	bl	8eb4 <EnterCritical>
    d7ac:	eaffffe2 	b	d73c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    d7b0:	e2800001 	add	r0, r0, #1
    d7b4:	e6ff0070 	uxth	r0, r0
    d7b8:	e1c500bc 	strh	r0, [r5, #12]
    d7bc:	eaffffea 	b	d76c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000d7c0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    d7c0:	e59f20e4 	ldr	r2, [pc, #228]	; d8ac <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    d7c4:	e3510001 	cmp	r1, #1
    d7c8:	e92d4030 	push	{r4, r5, lr}
    d7cc:	e3a03000 	mov	r3, #0
    d7d0:	e24dd024 	sub	sp, sp, #36	; 0x24
    d7d4:	e1a04000 	mov	r4, r0
    d7d8:	e5801004 	str	r1, [r0, #4]
    d7dc:	e5802000 	str	r2, [r0]
    d7e0:	e1c030bc 	strh	r3, [r0, #12]
    d7e4:	e1c030be 	strh	r3, [r0, #14]
    d7e8:	9a000002 	bls	d7f8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    d7ec:	e1a00004 	mov	r0, r4
    d7f0:	e28dd024 	add	sp, sp, #36	; 0x24
    d7f4:	e8bd8030 	pop	{r4, r5, pc}
    d7f8:	e3005574 	movw	r5, #1396	; 0x574
    d7fc:	e3405001 	movt	r5, #1
    d800:	e5950000 	ldr	r0, [r5]
    d804:	e1500003 	cmp	r0, r3
    d808:	1a000009 	bne	d834 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    d80c:	e5953004 	ldr	r3, [r5, #4]
    d810:	e3530000 	cmp	r3, #0
    d814:	0a00000a 	beq	d844 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    d818:	e5953004 	ldr	r3, [r5, #4]
    d81c:	e3530000 	cmp	r3, #0
    d820:	0afffff1 	beq	d7ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    d824:	e3a01000 	mov	r1, #0
    d828:	e1a00004 	mov	r0, r4
    d82c:	ebffffba 	bl	d71c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    d830:	eaffffed 	b	d7ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    d834:	ebffed9e 	bl	8eb4 <EnterCritical>
    d838:	e5953004 	ldr	r3, [r5, #4]
    d83c:	e3530000 	cmp	r3, #0
    d840:	1a00000f 	bne	d884 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    d844:	e28d0008 	add	r0, sp, #8
    d848:	ebffeb52 	bl	8598 <CBcmPropertyTags::CBcmPropertyTags()>
    d84c:	e3a03000 	mov	r3, #0
    d850:	e28d0008 	add	r0, sp, #8
    d854:	e58d3000 	str	r3, [sp]
    d858:	e3a01010 	mov	r1, #16
    d85c:	e3a03010 	mov	r3, #16
    d860:	e3401004 	movt	r1, #4
    d864:	e08d2003 	add	r2, sp, r3
    d868:	ebffeb76 	bl	8648 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    d86c:	e3500000 	cmp	r0, #0
    d870:	e28d0008 	add	r0, sp, #8
    d874:	159d301c 	ldrne	r3, [sp, #28]
    d878:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    d87c:	15853004 	strne	r3, [r5, #4]
    d880:	ebffeb4a 	bl	85b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    d884:	e5953000 	ldr	r3, [r5]
    d888:	e3530000 	cmp	r3, #0
    d88c:	0a000000 	beq	d894 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
    d890:	ebffed95 	bl	8eec <LeaveCritical>
    d894:	e5943004 	ldr	r3, [r4, #4]
    d898:	e3530001 	cmp	r3, #1
    d89c:	9affffdd 	bls	d818 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
    d8a0:	e1a00004 	mov	r0, r4
    d8a4:	e28dd024 	add	sp, sp, #36	; 0x24
    d8a8:	e8bd8030 	pop	{r4, r5, pc}
    d8ac:	00010064 	.word	0x00010064

0000d8b0 <CVirtualGPIOPin::Write(unsigned int)>:
    d8b0:	e5902004 	ldr	r2, [r0, #4]
    d8b4:	e1a03001 	mov	r3, r1
    d8b8:	e3520001 	cmp	r2, #1
    d8bc:	812fff1e 	bxhi	lr
    d8c0:	e3002574 	movw	r2, #1396	; 0x574
    d8c4:	e3402001 	movt	r2, #1
    d8c8:	e3510001 	cmp	r1, #1
    d8cc:	e5922004 	ldr	r2, [r2, #4]
    d8d0:	93a03000 	movls	r3, #0
    d8d4:	83a03001 	movhi	r3, #1
    d8d8:	e3520000 	cmp	r2, #0
    d8dc:	03833001 	orreq	r3, r3, #1
    d8e0:	e3530000 	cmp	r3, #0
    d8e4:	112fff1e 	bxne	lr
    d8e8:	eaffff8b 	b	d71c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0000d8ec <CVirtualGPIOPin::Invert()>:
    d8ec:	e5901008 	ldr	r1, [r0, #8]
    d8f0:	e2211001 	eor	r1, r1, #1
    d8f4:	eaffffed 	b	d8b0 <CVirtualGPIOPin::Write(unsigned int)>

0000d8f8 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    d8f8:	e3003574 	movw	r3, #1396	; 0x574
    d8fc:	e3403001 	movt	r3, #1
    d900:	e3a02000 	mov	r2, #0
    d904:	e5832000 	str	r2, [r3]
    d908:	e12fff1e 	bx	lr

0000d90c <CMachineInfo::CMachineInfo()>:
    d90c:	e300257c 	movw	r2, #1404	; 0x57c
    d910:	e3402001 	movt	r2, #1
    d914:	e92d4030 	push	{r4, r5, lr}
    d918:	e3a0300c 	mov	r3, #12
    d91c:	e5925000 	ldr	r5, [r2]
    d920:	e3a01003 	mov	r1, #3
    d924:	e5c03004 	strb	r3, [r0, #4]
    d928:	e3a03000 	mov	r3, #0
    d92c:	e1550003 	cmp	r5, r3
    d930:	e24dd024 	sub	sp, sp, #36	; 0x24
    d934:	e1a04000 	mov	r4, r0
    d938:	e5c01010 	strb	r1, [r0, #16]
    d93c:	e5803000 	str	r3, [r0]
    d940:	e5803008 	str	r3, [r0, #8]
    d944:	e580300c 	str	r3, [r0, #12]
    d948:	e5803014 	str	r3, [r0, #20]
    d94c:	0a00000e 	beq	d98c <CMachineInfo::CMachineInfo()+0x80>
    d950:	e595e000 	ldr	lr, [r5]
    d954:	e5d5c004 	ldrb	ip, [r5, #4]
    d958:	e5950008 	ldr	r0, [r5, #8]
    d95c:	e595100c 	ldr	r1, [r5, #12]
    d960:	e5d52010 	ldrb	r2, [r5, #16]
    d964:	e5953014 	ldr	r3, [r5, #20]
    d968:	e584e000 	str	lr, [r4]
    d96c:	e5c4c004 	strb	ip, [r4, #4]
    d970:	e5840008 	str	r0, [r4, #8]
    d974:	e584100c 	str	r1, [r4, #12]
    d978:	e5c42010 	strb	r2, [r4, #16]
    d97c:	e5843014 	str	r3, [r4, #20]
    d980:	e1a00004 	mov	r0, r4
    d984:	e28dd024 	add	sp, sp, #36	; 0x24
    d988:	e8bd8030 	pop	{r4, r5, pc}
    d98c:	e5820000 	str	r0, [r2]
    d990:	e28d0008 	add	r0, sp, #8
    d994:	ebffeaff 	bl	8598 <CBcmPropertyTags::CBcmPropertyTags()>
    d998:	e3a03010 	mov	r3, #16
    d99c:	e58d5000 	str	r5, [sp]
    d9a0:	e28d0008 	add	r0, sp, #8
    d9a4:	e3a01002 	mov	r1, #2
    d9a8:	e08d2003 	add	r2, sp, r3
    d9ac:	e3401001 	movt	r1, #1
    d9b0:	ebffeb24 	bl	8648 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    d9b4:	e3500000 	cmp	r0, #0
    d9b8:	0a00000c 	beq	d9f0 <CMachineInfo::CMachineInfo()+0xe4>
    d9bc:	e59d201c 	ldr	r2, [sp, #28]
    d9c0:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    d9c4:	e5842000 	str	r2, [r4]
    d9c8:	1a00000b 	bne	d9fc <CMachineInfo::CMachineInfo()+0xf0>
    d9cc:	e3a01002 	mov	r1, #2
    d9d0:	e59f00f8 	ldr	r0, [pc, #248]	; dad0 <CMachineInfo::CMachineInfo()+0x1c4>
    d9d4:	ea000000 	b	d9dc <CMachineInfo::CMachineInfo()+0xd0>
    d9d8:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    d9dc:	e1520001 	cmp	r2, r1
    d9e0:	0a000012 	beq	da30 <CMachineInfo::CMachineInfo()+0x124>
    d9e4:	e2833001 	add	r3, r3, #1
    d9e8:	e3530011 	cmp	r3, #17
    d9ec:	1afffff9 	bne	d9d8 <CMachineInfo::CMachineInfo()+0xcc>
    d9f0:	e28d0008 	add	r0, sp, #8
    d9f4:	ebffeaed 	bl	85b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    d9f8:	eaffffe0 	b	d980 <CMachineInfo::CMachineInfo()+0x74>
    d9fc:	e300c06c 	movw	ip, #108	; 0x6c
    da00:	e340c001 	movt	ip, #1
    da04:	e7e70252 	ubfx	r0, r2, #4, #8
    da08:	e1a03005 	mov	r3, r5
    da0c:	e1a0100c 	mov	r1, ip
    da10:	ea000000 	b	da18 <CMachineInfo::CMachineInfo()+0x10c>
    da14:	e5b1500c 	ldr	r5, [r1, #12]!
    da18:	e1550000 	cmp	r5, r0
    da1c:	0a000011 	beq	da68 <CMachineInfo::CMachineInfo()+0x15c>
    da20:	e2833001 	add	r3, r3, #1
    da24:	e353000a 	cmp	r3, #10
    da28:	1afffff9 	bne	da14 <CMachineInfo::CMachineInfo()+0x108>
    da2c:	eaffffef 	b	d9f0 <CMachineInfo::CMachineInfo()+0xe4>
    da30:	e300206c 	movw	r2, #108	; 0x6c
    da34:	e3402001 	movt	r2, #1
    da38:	e0823203 	add	r3, r2, r3, lsl #4
    da3c:	e3a01001 	mov	r1, #1
    da40:	e5841008 	str	r1, [r4, #8]
    da44:	e3a02000 	mov	r2, #0
    da48:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
    da4c:	e5931080 	ldr	r1, [r3, #128]	; 0x80
    da50:	e5933084 	ldr	r3, [r3, #132]	; 0x84
    da54:	e5c40004 	strb	r0, [r4, #4]
    da58:	e584100c 	str	r1, [r4, #12]
    da5c:	e5843014 	str	r3, [r4, #20]
    da60:	e5c42010 	strb	r2, [r4, #16]
    da64:	eaffffe1 	b	d9f0 <CMachineInfo::CMachineInfo()+0xe4>
    da68:	e3a0100c 	mov	r1, #12
    da6c:	e7e3e652 	ubfx	lr, r2, #12, #4
    da70:	e023c391 	mla	r3, r1, r3, ip
    da74:	e35e0002 	cmp	lr, #2
    da78:	e202100f 	and	r1, r2, #15
    da7c:	e7e22a52 	ubfx	r2, r2, #20, #3
    da80:	e5c4e010 	strb	lr, [r4, #16]
    da84:	e3a00c01 	mov	r0, #256	; 0x100
    da88:	e2811001 	add	r1, r1, #1
    da8c:	e1a00210 	lsl	r0, r0, r2
    da90:	e584100c 	str	r1, [r4, #12]
    da94:	e5d3c004 	ldrb	ip, [r3, #4]
    da98:	e5933008 	ldr	r3, [r3, #8]
    da9c:	e5840014 	str	r0, [r4, #20]
    daa0:	e5c4c004 	strb	ip, [r4, #4]
    daa4:	e5843008 	str	r3, [r4, #8]
    daa8:	83a03003 	movhi	r3, #3
    daac:	85c43010 	strbhi	r3, [r4, #16]
    dab0:	e3520000 	cmp	r2, #0
    dab4:	035c0003 	cmpeq	ip, #3
    dab8:	1affffcc 	bne	d9f0 <CMachineInfo::CMachineInfo()+0xe4>
    dabc:	e3510001 	cmp	r1, #1
    dac0:	13a03002 	movne	r3, #2
    dac4:	03a03001 	moveq	r3, #1
    dac8:	e5c43004 	strb	r3, [r4, #4]
    dacc:	eaffffc7 	b	d9f0 <CMachineInfo::CMachineInfo()+0xe4>
    dad0:	000100e4 	.word	0x000100e4

0000dad4 <CMachineInfo::~CMachineInfo()>:
    dad4:	e300357c 	movw	r3, #1404	; 0x57c
    dad8:	e3403001 	movt	r3, #1
    dadc:	e3a0100c 	mov	r1, #12
    dae0:	e5c01004 	strb	r1, [r0, #4]
    dae4:	e5932000 	ldr	r2, [r3]
    dae8:	e1500002 	cmp	r0, r2
    daec:	03a02000 	moveq	r2, #0
    daf0:	05832000 	streq	r2, [r3]
    daf4:	e12fff1e 	bx	lr

0000daf8 <CMachineInfo::GetMachineModel() const>:
    daf8:	e5d00004 	ldrb	r0, [r0, #4]
    dafc:	e12fff1e 	bx	lr

0000db00 <CMachineInfo::GetMachineName() const>:
    db00:	e5d02004 	ldrb	r2, [r0, #4]
    db04:	e300306c 	movw	r3, #108	; 0x6c
    db08:	e3403001 	movt	r3, #1
    db0c:	e0833102 	add	r3, r3, r2, lsl #2
    db10:	e5930188 	ldr	r0, [r3, #392]	; 0x188
    db14:	e12fff1e 	bx	lr

0000db18 <CMachineInfo::GetModelMajor() const>:
    db18:	e5900008 	ldr	r0, [r0, #8]
    db1c:	e12fff1e 	bx	lr

0000db20 <CMachineInfo::GetModelRevision() const>:
    db20:	e590000c 	ldr	r0, [r0, #12]
    db24:	e12fff1e 	bx	lr

0000db28 <CMachineInfo::GetSoCType() const>:
    db28:	e5d00010 	ldrb	r0, [r0, #16]
    db2c:	e12fff1e 	bx	lr

0000db30 <CMachineInfo::GetRAMSize() const>:
    db30:	e5900014 	ldr	r0, [r0, #20]
    db34:	e12fff1e 	bx	lr

0000db38 <CMachineInfo::GetSoCName() const>:
    db38:	e5d02010 	ldrb	r2, [r0, #16]
    db3c:	e300306c 	movw	r3, #108	; 0x6c
    db40:	e3403001 	movt	r3, #1
    db44:	e0833102 	add	r3, r3, r2, lsl #2
    db48:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
    db4c:	e12fff1e 	bx	lr

0000db50 <CMachineInfo::GetRevisionRaw() const>:
    db50:	e5900000 	ldr	r0, [r0]
    db54:	e12fff1e 	bx	lr

0000db58 <CMachineInfo::GetClockRate(unsigned int) const>:
    db58:	e92d4030 	push	{r4, r5, lr}
    db5c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    db60:	e1a05000 	mov	r5, r0
    db64:	e28d000c 	add	r0, sp, #12
    db68:	e1a04001 	mov	r4, r1
    db6c:	ebffea89 	bl	8598 <CBcmPropertyTags::CBcmPropertyTags()>
    db70:	e3a03004 	mov	r3, #4
    db74:	e28d000c 	add	r0, sp, #12
    db78:	e58d3000 	str	r3, [sp]
    db7c:	e3a01002 	mov	r1, #2
    db80:	e3a03014 	mov	r3, #20
    db84:	e3401003 	movt	r1, #3
    db88:	e08d2003 	add	r2, sp, r3
    db8c:	e58d4020 	str	r4, [sp, #32]
    db90:	ebffeaac 	bl	8648 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    db94:	e3500000 	cmp	r0, #0
    db98:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    db9c:	1a000007 	bne	dbc0 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    dba0:	e3540002 	cmp	r4, #2
    dba4:	0a00000a 	beq	dbd4 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
    dba8:	e3540004 	cmp	r4, #4
    dbac:	0a00000b 	beq	dbe0 <CMachineInfo::GetClockRate(unsigned int) const+0x88>
    dbb0:	e3540001 	cmp	r4, #1
    dbb4:	e3a04ce1 	mov	r4, #57600	; 0xe100
    dbb8:	e34045f5 	movt	r4, #1525	; 0x5f5
    dbbc:	13a04000 	movne	r4, #0
    dbc0:	e28d000c 	add	r0, sp, #12
    dbc4:	ebffea79 	bl	85b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    dbc8:	e1a00004 	mov	r0, r4
    dbcc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    dbd0:	e8bd8030 	pop	{r4, r5, pc}
    dbd4:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    dbd8:	e34042dc 	movt	r4, #732	; 0x2dc
    dbdc:	eafffff7 	b	dbc0 <CMachineInfo::GetClockRate(unsigned int) const+0x68>
    dbe0:	e5952008 	ldr	r2, [r5, #8]
    dbe4:	e3a03ca3 	mov	r3, #41728	; 0xa300
    dbe8:	e34131e1 	movt	r3, #4577	; 0x11e1
    dbec:	e30b4280 	movw	r4, #45696	; 0xb280
    dbf0:	e3520002 	cmp	r2, #2
    dbf4:	e3404ee6 	movt	r4, #3814	; 0xee6
    dbf8:	81a04003 	movhi	r4, r3
    dbfc:	eaffffef 	b	dbc0 <CMachineInfo::GetClockRate(unsigned int) const+0x68>

0000dc00 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    dc00:	e3510036 	cmp	r1, #54	; 0x36
    dc04:	0a000008 	beq	dc2c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x2c>
    dc08:	e3510037 	cmp	r1, #55	; 0x37
    dc0c:	1a000004 	bne	dc24 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    dc10:	e5d03004 	ldrb	r3, [r0, #4]
    dc14:	e3530003 	cmp	r3, #3
    dc18:	c3a00028 	movgt	r0, #40	; 0x28
    dc1c:	d3a0002d 	movle	r0, #45	; 0x2d
    dc20:	e12fff1e 	bx	lr
    dc24:	e3a00000 	mov	r0, #0
    dc28:	e12fff1e 	bx	lr
    dc2c:	e5d03004 	ldrb	r3, [r0, #4]
    dc30:	e3530003 	cmp	r3, #3
    dc34:	ca000001 	bgt	dc40 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    dc38:	e3a00028 	mov	r0, #40	; 0x28
    dc3c:	e12fff1e 	bx	lr
    dc40:	e5903008 	ldr	r3, [r0, #8]
    dc44:	e3530003 	cmp	r3, #3
    dc48:	33a0002d 	movcc	r0, #45	; 0x2d
    dc4c:	23a00029 	movcs	r0, #41	; 0x29
    dc50:	e12fff1e 	bx	lr

0000dc54 <CMachineInfo::GetDevice(TDeviceId) const>:
    dc54:	e3510000 	cmp	r1, #0
    dc58:	1a000003 	bne	dc6c <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    dc5c:	e5d00004 	ldrb	r0, [r0, #4]
    dc60:	e2500001 	subs	r0, r0, #1
    dc64:	13a00001 	movne	r0, #1
    dc68:	e12fff1e 	bx	lr
    dc6c:	e3a00000 	mov	r0, #0
    dc70:	e12fff1e 	bx	lr

0000dc74 <CMachineInfo::Get()>:
    dc74:	e300357c 	movw	r3, #1404	; 0x57c
    dc78:	e3403001 	movt	r3, #1
    dc7c:	e5930000 	ldr	r0, [r3]
    dc80:	e12fff1e 	bx	lr

0000dc84 <InvalidateDataCacheL1Only>:
    dc84:	e92d0070 	push	{r4, r5, r6}
    dc88:	e3a00000 	mov	r0, #0
    dc8c:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    dc90:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    dc94:	e3071fff 	movw	r1, #32767	; 0x7fff
    dc98:	e00126a0 	and	r2, r1, r0, lsr #13
    dc9c:	e30013ff 	movw	r1, #1023	; 0x3ff
    dca0:	e00131a0 	and	r3, r1, r0, lsr #3
    dca4:	e2822001 	add	r2, r2, #1
    dca8:	e2000007 	and	r0, r0, #7
    dcac:	e2800004 	add	r0, r0, #4
    dcb0:	e16f1f13 	clz	r1, r3
    dcb4:	e2834001 	add	r4, r3, #1
    dcb8:	e2422001 	sub	r2, r2, #1
    dcbc:	e1a03004 	mov	r3, r4
    dcc0:	e2533001 	subs	r3, r3, #1
    dcc4:	e1a05113 	lsl	r5, r3, r1
    dcc8:	e1a06012 	lsl	r6, r2, r0
    dccc:	e1855006 	orr	r5, r5, r6
    dcd0:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    dcd4:	cafffff9 	bgt	dcc0 <InvalidateDataCacheL1Only+0x3c>
    dcd8:	e3520000 	cmp	r2, #0
    dcdc:	cafffff5 	bgt	dcb8 <InvalidateDataCacheL1Only+0x34>
    dce0:	f57ff04e 	dsb	st
    dce4:	f57ff06f 	isb	sy
    dce8:	e8bd0070 	pop	{r4, r5, r6}
    dcec:	e12fff1e 	bx	lr

0000dcf0 <InvalidateDataCache>:
    dcf0:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    dcf4:	f57ff05f 	dmb	sy
    dcf8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    dcfc:	e1a03ba0 	lsr	r3, r0, #23
    dd00:	e213300e 	ands	r3, r3, #14
    dd04:	0a00001d 	beq	dd80 <InvalidateDataCache+0x90>
    dd08:	e3a0a000 	mov	sl, #0
    dd0c:	e08a20aa 	add	r2, sl, sl, lsr #1
    dd10:	e1a01230 	lsr	r1, r0, r2
    dd14:	e2011007 	and	r1, r1, #7
    dd18:	e3510002 	cmp	r1, #2
    dd1c:	ba000014 	blt	dd74 <InvalidateDataCache+0x84>
    dd20:	e10f9000 	mrs	r9, CPSR
    dd24:	f10c0080 	cpsid	i
    dd28:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    dd2c:	f57ff06f 	isb	sy
    dd30:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    dd34:	e121f009 	msr	CPSR_c, r9
    dd38:	e2012007 	and	r2, r1, #7
    dd3c:	e2822004 	add	r2, r2, #4
    dd40:	e30043ff 	movw	r4, #1023	; 0x3ff
    dd44:	e01441a1 	ands	r4, r4, r1, lsr #3
    dd48:	e16f5f14 	clz	r5, r4
    dd4c:	e3077fff 	movw	r7, #32767	; 0x7fff
    dd50:	e01776a1 	ands	r7, r7, r1, lsr #13
    dd54:	e1a09007 	mov	r9, r7
    dd58:	e18ab514 	orr	fp, sl, r4, lsl r5
    dd5c:	e18bb219 	orr	fp, fp, r9, lsl r2
    dd60:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    dd64:	e2599001 	subs	r9, r9, #1
    dd68:	aafffffa 	bge	dd58 <InvalidateDataCache+0x68>
    dd6c:	e2544001 	subs	r4, r4, #1
    dd70:	aafffff7 	bge	dd54 <InvalidateDataCache+0x64>
    dd74:	e28aa002 	add	sl, sl, #2
    dd78:	e153000a 	cmp	r3, sl
    dd7c:	caffffe2 	bgt	dd0c <InvalidateDataCache+0x1c>
    dd80:	e3a0a000 	mov	sl, #0
    dd84:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    dd88:	f57ff04e 	dsb	st
    dd8c:	f57ff06f 	isb	sy
    dd90:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    dd94:	e12fff1e 	bx	lr

0000dd98 <CleanDataCache>:
    dd98:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    dd9c:	f57ff05f 	dmb	sy
    dda0:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    dda4:	e1a03ba0 	lsr	r3, r0, #23
    dda8:	e213300e 	ands	r3, r3, #14
    ddac:	0a00001d 	beq	de28 <CleanDataCache+0x90>
    ddb0:	e3a0a000 	mov	sl, #0
    ddb4:	e08a20aa 	add	r2, sl, sl, lsr #1
    ddb8:	e1a01230 	lsr	r1, r0, r2
    ddbc:	e2011007 	and	r1, r1, #7
    ddc0:	e3510002 	cmp	r1, #2
    ddc4:	ba000014 	blt	de1c <CleanDataCache+0x84>
    ddc8:	e10f9000 	mrs	r9, CPSR
    ddcc:	f10c0080 	cpsid	i
    ddd0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    ddd4:	f57ff06f 	isb	sy
    ddd8:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    dddc:	e121f009 	msr	CPSR_c, r9
    dde0:	e2012007 	and	r2, r1, #7
    dde4:	e2822004 	add	r2, r2, #4
    dde8:	e30043ff 	movw	r4, #1023	; 0x3ff
    ddec:	e01441a1 	ands	r4, r4, r1, lsr #3
    ddf0:	e16f5f14 	clz	r5, r4
    ddf4:	e3077fff 	movw	r7, #32767	; 0x7fff
    ddf8:	e01776a1 	ands	r7, r7, r1, lsr #13
    ddfc:	e1a09007 	mov	r9, r7
    de00:	e18ab514 	orr	fp, sl, r4, lsl r5
    de04:	e18bb219 	orr	fp, fp, r9, lsl r2
    de08:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    de0c:	e2599001 	subs	r9, r9, #1
    de10:	aafffffa 	bge	de00 <CleanDataCache+0x68>
    de14:	e2544001 	subs	r4, r4, #1
    de18:	aafffff7 	bge	ddfc <CleanDataCache+0x64>
    de1c:	e28aa002 	add	sl, sl, #2
    de20:	e153000a 	cmp	r3, sl
    de24:	caffffe2 	bgt	ddb4 <CleanDataCache+0x1c>
    de28:	e3a0a000 	mov	sl, #0
    de2c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    de30:	f57ff04e 	dsb	st
    de34:	f57ff06f 	isb	sy
    de38:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    de3c:	e12fff1e 	bx	lr

0000de40 <CleanAndInvalidateDataCacheRange>:
    de40:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    de44:	e1a03823 	lsr	r3, r3, #16
    de48:	e203300f 	and	r3, r3, #15
    de4c:	e3a02004 	mov	r2, #4
    de50:	e1a02312 	lsl	r2, r2, r3
    de54:	e0801001 	add	r1, r0, r1
    de58:	e2423001 	sub	r3, r2, #1
    de5c:	e1c00003 	bic	r0, r0, r3
    de60:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    de64:	e0800002 	add	r0, r0, r2
    de68:	e1500001 	cmp	r0, r1
    de6c:	3afffffb 	bcc	de60 <CleanAndInvalidateDataCacheRange+0x20>
    de70:	f57ff04e 	dsb	st
    de74:	e12fff1e 	bx	lr

0000de78 <CPtrList::CPtrList()>:
    de78:	e3a02000 	mov	r2, #0
    de7c:	e5802000 	str	r2, [r0]
    de80:	e12fff1e 	bx	lr

0000de84 <CPtrList::~CPtrList()>:
    de84:	e12fff1e 	bx	lr

0000de88 <CPtrList::GetFirst()>:
    de88:	e5900000 	ldr	r0, [r0]
    de8c:	e12fff1e 	bx	lr

0000de90 <CPtrList::GetNext(TPtrListElement*)>:
    de90:	e5910008 	ldr	r0, [r1, #8]
    de94:	e12fff1e 	bx	lr

0000de98 <CPtrList::GetPtr(TPtrListElement*)>:
    de98:	e591000c 	ldr	r0, [r1, #12]
    de9c:	e12fff1e 	bx	lr

0000dea0 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    dea0:	e92d4070 	push	{r4, r5, r6, lr}
    dea4:	e1a05000 	mov	r5, r0
    dea8:	e3a00010 	mov	r0, #16
    deac:	e1a04001 	mov	r4, r1
    deb0:	e1a06002 	mov	r6, r2
    deb4:	ebffebf8 	bl	8e9c <operator new(unsigned int)>
    deb8:	e5951000 	ldr	r1, [r5]
    debc:	e3043d43 	movw	r3, #19779	; 0x4d43
    dec0:	e345304c 	movt	r3, #20556	; 0x504c
    dec4:	e1510004 	cmp	r1, r4
    dec8:	e580600c 	str	r6, [r0, #12]
    decc:	e5803000 	str	r3, [r0]
    ded0:	0a000006 	beq	def0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x50>
    ded4:	e5943004 	ldr	r3, [r4, #4]
    ded8:	e5804008 	str	r4, [r0, #8]
    dedc:	e3530000 	cmp	r3, #0
    dee0:	e5803004 	str	r3, [r0, #4]
    dee4:	15830008 	strne	r0, [r3, #8]
    dee8:	e5840004 	str	r0, [r4, #4]
    deec:	e8bd8070 	pop	{r4, r5, r6, pc}
    def0:	e5801008 	str	r1, [r0, #8]
    def4:	e3a03000 	mov	r3, #0
    def8:	e5803004 	str	r3, [r0, #4]
    defc:	e5810004 	str	r0, [r1, #4]
    df00:	e5850000 	str	r0, [r5]
    df04:	e8bd8070 	pop	{r4, r5, r6, pc}

0000df08 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    df08:	e92d4070 	push	{r4, r5, r6, lr}
    df0c:	e1a06000 	mov	r6, r0
    df10:	e3a00010 	mov	r0, #16
    df14:	e1a04001 	mov	r4, r1
    df18:	e1a05002 	mov	r5, r2
    df1c:	ebffebde 	bl	8e9c <operator new(unsigned int)>
    df20:	e3540000 	cmp	r4, #0
    df24:	e3043d43 	movw	r3, #19779	; 0x4d43
    df28:	e345304c 	movt	r3, #20556	; 0x504c
    df2c:	e580500c 	str	r5, [r0, #12]
    df30:	e5803000 	str	r3, [r0]
    df34:	0a000006 	beq	df54 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x4c>
    df38:	e5943008 	ldr	r3, [r4, #8]
    df3c:	e5804004 	str	r4, [r0, #4]
    df40:	e3530000 	cmp	r3, #0
    df44:	e5803008 	str	r3, [r0, #8]
    df48:	15830004 	strne	r0, [r3, #4]
    df4c:	e5840008 	str	r0, [r4, #8]
    df50:	e8bd8070 	pop	{r4, r5, r6, pc}
    df54:	e5804004 	str	r4, [r0, #4]
    df58:	e5804008 	str	r4, [r0, #8]
    df5c:	e5860000 	str	r0, [r6]
    df60:	e8bd8070 	pop	{r4, r5, r6, pc}

0000df64 <CPtrList::Remove(TPtrListElement*)>:
    df64:	e5903000 	ldr	r3, [r0]
    df68:	e1530001 	cmp	r3, r1
    df6c:	0a000009 	beq	df98 <CPtrList::Remove(TPtrListElement*)+0x34>
    df70:	e991000c 	ldmib	r1, {r2, r3}
    df74:	e5823008 	str	r3, [r2, #8]
    df78:	e5913008 	ldr	r3, [r1, #8]
    df7c:	e3530000 	cmp	r3, #0
    df80:	15832004 	strne	r2, [r3, #4]
    df84:	e3a03000 	mov	r3, #0
    df88:	e1a00001 	mov	r0, r1
    df8c:	e5813000 	str	r3, [r1]
    df90:	e3a01010 	mov	r1, #16
    df94:	eaffebc4 	b	8eac <operator delete(void*, unsigned int)>
    df98:	e5913008 	ldr	r3, [r1, #8]
    df9c:	e3530000 	cmp	r3, #0
    dfa0:	e5803000 	str	r3, [r0]
    dfa4:	13a02000 	movne	r2, #0
    dfa8:	15832004 	strne	r2, [r3, #4]
    dfac:	eafffff4 	b	df84 <CPtrList::Remove(TPtrListElement*)+0x20>

0000dfb0 <CPtrList::Find(void*)>:
    dfb0:	e5900000 	ldr	r0, [r0]
    dfb4:	e3500000 	cmp	r0, #0
    dfb8:	012fff1e 	bxeq	lr
    dfbc:	e590300c 	ldr	r3, [r0, #12]
    dfc0:	e1510003 	cmp	r1, r3
    dfc4:	1a000003 	bne	dfd8 <CPtrList::Find(void*)+0x28>
    dfc8:	ea000006 	b	dfe8 <CPtrList::Find(void*)+0x38>
    dfcc:	e590300c 	ldr	r3, [r0, #12]
    dfd0:	e1530001 	cmp	r3, r1
    dfd4:	012fff1e 	bxeq	lr
    dfd8:	e5900008 	ldr	r0, [r0, #8]
    dfdc:	e3500000 	cmp	r0, #0
    dfe0:	1afffff9 	bne	dfcc <CPtrList::Find(void*)+0x1c>
    dfe4:	e12fff1e 	bx	lr
    dfe8:	e12fff1e 	bx	lr

0000dfec <mem_init>:
    dfec:	e0801001 	add	r1, r0, r1
    dff0:	e3002580 	movw	r2, #1408	; 0x580
    dff4:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    dff8:	e3402001 	movt	r2, #1
    dffc:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    e000:	e3500605 	cmp	r0, #5242880	; 0x500000
    e004:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    e008:	e582100c 	str	r1, [r2, #12]
    e00c:	33a00605 	movcc	r0, #5242880	; 0x500000
    e010:	e2411501 	sub	r1, r1, #4194304	; 0x400000
    e014:	e3c3300f 	bic	r3, r3, #15
    e018:	e5820000 	str	r0, [r2]
    e01c:	e982000a 	stmib	r2, {r1, r3}
    e020:	e12fff1e 	bx	lr

0000e024 <mem_get_size>:
    e024:	e3003580 	movw	r3, #1408	; 0x580
    e028:	e3403001 	movt	r3, #1
    e02c:	e5930004 	ldr	r0, [r3, #4]
    e030:	e5931000 	ldr	r1, [r3]
    e034:	e593200c 	ldr	r2, [r3, #12]
    e038:	e5933008 	ldr	r3, [r3, #8]
    e03c:	e0400001 	sub	r0, r0, r1
    e040:	e0423003 	sub	r3, r2, r3
    e044:	e0800003 	add	r0, r0, r3
    e048:	e12fff1e 	bx	lr

0000e04c <malloc>:
    e04c:	e92d4070 	push	{r4, r5, r6, lr}
    e050:	e3006580 	movw	r6, #1408	; 0x580
    e054:	e3406001 	movt	r6, #1
    e058:	e1a04000 	mov	r4, r0
    e05c:	e5960010 	ldr	r0, [r6, #16]
    e060:	e3500000 	cmp	r0, #0
    e064:	1a000035 	bne	e140 <malloc+0xf4>
    e068:	e3002454 	movw	r2, #1108	; 0x454
    e06c:	e3402001 	movt	r2, #1
    e070:	e5923000 	ldr	r3, [r2]
    e074:	e3530000 	cmp	r3, #0
    e078:	0a000007 	beq	e09c <malloc+0x50>
    e07c:	e1540003 	cmp	r4, r3
    e080:	8a000002 	bhi	e090 <malloc+0x44>
    e084:	ea000011 	b	e0d0 <malloc+0x84>
    e088:	e1530004 	cmp	r3, r4
    e08c:	2a00000f 	bcs	e0d0 <malloc+0x84>
    e090:	e5b23008 	ldr	r3, [r2, #8]!
    e094:	e3530000 	cmp	r3, #0
    e098:	1afffffa 	bne	e088 <malloc+0x3c>
    e09c:	e5965000 	ldr	r5, [r6]
    e0a0:	e284301f 	add	r3, r4, #31
    e0a4:	e3c3300f 	bic	r3, r3, #15
    e0a8:	e5962004 	ldr	r2, [r6, #4]
    e0ac:	e0853003 	add	r3, r5, r3
    e0b0:	e5863000 	str	r3, [r6]
    e0b4:	e1530002 	cmp	r3, r2
    e0b8:	9a000013 	bls	e10c <malloc+0xc0>
    e0bc:	e3500000 	cmp	r0, #0
    e0c0:	08bd8070 	popeq	{r4, r5, r6, pc}
    e0c4:	ebffeb88 	bl	8eec <LeaveCritical>
    e0c8:	e3a00000 	mov	r0, #0
    e0cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0d0:	e5925004 	ldr	r5, [r2, #4]
    e0d4:	e3550000 	cmp	r5, #0
    e0d8:	01a04003 	moveq	r4, r3
    e0dc:	0affffee 	beq	e09c <malloc+0x50>
    e0e0:	e5953008 	ldr	r3, [r5, #8]
    e0e4:	e3500000 	cmp	r0, #0
    e0e8:	e5823004 	str	r3, [r2, #4]
    e0ec:	1a000011 	bne	e138 <malloc+0xec>
    e0f0:	e3a03000 	mov	r3, #0
    e0f4:	e2850010 	add	r0, r5, #16
    e0f8:	e5c53008 	strb	r3, [r5, #8]
    e0fc:	e5c53009 	strb	r3, [r5, #9]
    e100:	e5c5300a 	strb	r3, [r5, #10]
    e104:	e5c5300b 	strb	r3, [r5, #11]
    e108:	e8bd8070 	pop	{r4, r5, r6, pc}
    e10c:	e3500000 	cmp	r0, #0
    e110:	e3a02043 	mov	r2, #67	; 0x43
    e114:	e3a0304d 	mov	r3, #77	; 0x4d
    e118:	e5c52000 	strb	r2, [r5]
    e11c:	e5c53001 	strb	r3, [r5, #1]
    e120:	e3a0204c 	mov	r2, #76	; 0x4c
    e124:	e3a03042 	mov	r3, #66	; 0x42
    e128:	e5854004 	str	r4, [r5, #4]
    e12c:	e5c52002 	strb	r2, [r5, #2]
    e130:	e5c53003 	strb	r3, [r5, #3]
    e134:	0affffed 	beq	e0f0 <malloc+0xa4>
    e138:	ebffeb6b 	bl	8eec <LeaveCritical>
    e13c:	eaffffeb 	b	e0f0 <malloc+0xa4>
    e140:	ebffeb5b 	bl	8eb4 <EnterCritical>
    e144:	e5960010 	ldr	r0, [r6, #16]
    e148:	eaffffc6 	b	e068 <malloc+0x1c>

0000e14c <free>:
    e14c:	e3500000 	cmp	r0, #0
    e150:	012fff1e 	bxeq	lr
    e154:	e92d4070 	push	{r4, r5, r6, lr}
    e158:	e3004454 	movw	r4, #1108	; 0x454
    e15c:	e3404001 	movt	r4, #1
    e160:	e2405010 	sub	r5, r0, #16
    e164:	e5943000 	ldr	r3, [r4]
    e168:	e3530000 	cmp	r3, #0
    e16c:	08bd8070 	popeq	{r4, r5, r6, pc}
    e170:	e5952004 	ldr	r2, [r5, #4]
    e174:	e1520003 	cmp	r2, r3
    e178:	1a000002 	bne	e188 <free+0x3c>
    e17c:	ea000005 	b	e198 <free+0x4c>
    e180:	e1530002 	cmp	r3, r2
    e184:	0a000003 	beq	e198 <free+0x4c>
    e188:	e5b43008 	ldr	r3, [r4, #8]!
    e18c:	e3530000 	cmp	r3, #0
    e190:	1afffffa 	bne	e180 <free+0x34>
    e194:	e8bd8070 	pop	{r4, r5, r6, pc}
    e198:	e3006580 	movw	r6, #1408	; 0x580
    e19c:	e3406001 	movt	r6, #1
    e1a0:	e5960010 	ldr	r0, [r6, #16]
    e1a4:	e3500000 	cmp	r0, #0
    e1a8:	1a000003 	bne	e1bc <free+0x70>
    e1ac:	e5943004 	ldr	r3, [r4, #4]
    e1b0:	e5853008 	str	r3, [r5, #8]
    e1b4:	e5845004 	str	r5, [r4, #4]
    e1b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e1bc:	ebffeb3c 	bl	8eb4 <EnterCritical>
    e1c0:	e5962010 	ldr	r2, [r6, #16]
    e1c4:	e5943004 	ldr	r3, [r4, #4]
    e1c8:	e3520000 	cmp	r2, #0
    e1cc:	e5853008 	str	r3, [r5, #8]
    e1d0:	e5845004 	str	r5, [r4, #4]
    e1d4:	08bd8070 	popeq	{r4, r5, r6, pc}
    e1d8:	e8bd4070 	pop	{r4, r5, r6, lr}
    e1dc:	eaffeb42 	b	8eec <LeaveCritical>

0000e1e0 <palloc>:
    e1e0:	e92d4070 	push	{r4, r5, r6, lr}
    e1e4:	e3005580 	movw	r5, #1408	; 0x580
    e1e8:	e3405001 	movt	r5, #1
    e1ec:	e5950014 	ldr	r0, [r5, #20]
    e1f0:	e3500000 	cmp	r0, #0
    e1f4:	1a00000d 	bne	e230 <palloc+0x50>
    e1f8:	e5954018 	ldr	r4, [r5, #24]
    e1fc:	e3540000 	cmp	r4, #0
    e200:	0a00000f 	beq	e244 <palloc+0x64>
    e204:	e5943004 	ldr	r3, [r4, #4]
    e208:	e3a02000 	mov	r2, #0
    e20c:	e5842000 	str	r2, [r4]
    e210:	e5853018 	str	r3, [r5, #24]
    e214:	e3500000 	cmp	r0, #0
    e218:	1a000001 	bne	e224 <palloc+0x44>
    e21c:	e1a00004 	mov	r0, r4
    e220:	e8bd8070 	pop	{r4, r5, r6, pc}
    e224:	ebffeb30 	bl	8eec <LeaveCritical>
    e228:	e1a00004 	mov	r0, r4
    e22c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e230:	ebffeb1f 	bl	8eb4 <EnterCritical>
    e234:	e5954018 	ldr	r4, [r5, #24]
    e238:	e5950014 	ldr	r0, [r5, #20]
    e23c:	e3540000 	cmp	r4, #0
    e240:	1affffef 	bne	e204 <palloc+0x24>
    e244:	e5954008 	ldr	r4, [r5, #8]
    e248:	e595200c 	ldr	r2, [r5, #12]
    e24c:	e2843a01 	add	r3, r4, #4096	; 0x1000
    e250:	e5853008 	str	r3, [r5, #8]
    e254:	e1530002 	cmp	r3, r2
    e258:	9affffed 	bls	e214 <palloc+0x34>
    e25c:	e3500000 	cmp	r0, #0
    e260:	08bd8070 	popeq	{r4, r5, r6, pc}
    e264:	ebffeb20 	bl	8eec <LeaveCritical>
    e268:	e3a00000 	mov	r0, #0
    e26c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e270 <pfree>:
    e270:	e92d4070 	push	{r4, r5, r6, lr}
    e274:	e2505000 	subs	r5, r0, #0
    e278:	08bd8070 	popeq	{r4, r5, r6, pc}
    e27c:	e3004580 	movw	r4, #1408	; 0x580
    e280:	e3404001 	movt	r4, #1
    e284:	e5940014 	ldr	r0, [r4, #20]
    e288:	e3500000 	cmp	r0, #0
    e28c:	1a000006 	bne	e2ac <pfree+0x3c>
    e290:	e5941018 	ldr	r1, [r4, #24]
    e294:	e3042d43 	movw	r2, #19779	; 0x4d43
    e298:	e5845018 	str	r5, [r4, #24]
    e29c:	e3452047 	movt	r2, #20551	; 0x5047
    e2a0:	e5852000 	str	r2, [r5]
    e2a4:	e5851004 	str	r1, [r5, #4]
    e2a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e2ac:	ebffeb00 	bl	8eb4 <EnterCritical>
    e2b0:	e5941014 	ldr	r1, [r4, #20]
    e2b4:	e5942018 	ldr	r2, [r4, #24]
    e2b8:	e3043d43 	movw	r3, #19779	; 0x4d43
    e2bc:	e3510000 	cmp	r1, #0
    e2c0:	e3453047 	movt	r3, #20551	; 0x5047
    e2c4:	e5845018 	str	r5, [r4, #24]
    e2c8:	e5853000 	str	r3, [r5]
    e2cc:	e5852004 	str	r2, [r5, #4]
    e2d0:	08bd8070 	popeq	{r4, r5, r6, pc}
    e2d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    e2d8:	eaffeb03 	b	8eec <LeaveCritical>

0000e2dc <_GLOBAL__sub_I_mem_init>:
    e2dc:	e3003580 	movw	r3, #1408	; 0x580
    e2e0:	e3403001 	movt	r3, #1
    e2e4:	e3a02001 	mov	r2, #1
    e2e8:	e5832010 	str	r2, [r3, #16]
    e2ec:	e5832014 	str	r2, [r3, #20]
    e2f0:	e12fff1e 	bx	lr

0000e2f4 <CBcmMailBox::CBcmMailBox(unsigned int)>:
    e2f4:	e3a02000 	mov	r2, #0
    e2f8:	e8800006 	stm	r0, {r1, r2}
    e2fc:	e12fff1e 	bx	lr

0000e300 <CBcmMailBox::~CBcmMailBox()>:
    e300:	e12fff1e 	bx	lr

0000e304 <CBcmMailBox::WriteRead(unsigned int)>:
    e304:	e92d4070 	push	{r4, r5, r6, lr}
    e308:	e1a05000 	mov	r5, r0
    e30c:	e5900004 	ldr	r0, [r0, #4]
    e310:	e1a06001 	mov	r6, r1
    e314:	e3500000 	cmp	r0, #0
    e318:	1a000023 	bne	e3ac <CBcmMailBox::WriteRead(unsigned int)+0xa8>
    e31c:	e3a04a0b 	mov	r4, #45056	; 0xb000
    e320:	e3434f00 	movt	r4, #16128	; 0x3f00
    e324:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    e328:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e32c:	1a000005 	bne	e348 <CBcmMailBox::WriteRead(unsigned int)+0x44>
    e330:	e3a00014 	mov	r0, #20
    e334:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    e338:	ebffed25 	bl	97d4 <CTimer::SimpleMsDelay(unsigned int)>
    e33c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    e340:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e344:	0afffff9 	beq	e330 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
    e348:	e3a01a0b 	mov	r1, #45056	; 0xb000
    e34c:	e3431f00 	movt	r1, #16128	; 0x3f00
    e350:	e59138b8 	ldr	r3, [r1, #2232]	; 0x8b8
    e354:	e3530000 	cmp	r3, #0
    e358:	bafffffc 	blt	e350 <CBcmMailBox::WriteRead(unsigned int)+0x4c>
    e35c:	e5953000 	ldr	r3, [r5]
    e360:	e3a02a0b 	mov	r2, #45056	; 0xb000
    e364:	e3432f00 	movt	r2, #16128	; 0x3f00
    e368:	e1866003 	orr	r6, r6, r3
    e36c:	e58168a0 	str	r6, [r1, #2208]	; 0x8a0
    e370:	e5950000 	ldr	r0, [r5]
    e374:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    e378:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e37c:	1afffffc 	bne	e374 <CBcmMailBox::WriteRead(unsigned int)+0x70>
    e380:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    e384:	e203100f 	and	r1, r3, #15
    e388:	e1510000 	cmp	r1, r0
    e38c:	1afffff8 	bne	e374 <CBcmMailBox::WriteRead(unsigned int)+0x70>
    e390:	e5952004 	ldr	r2, [r5, #4]
    e394:	e3c3400f 	bic	r4, r3, #15
    e398:	e3520000 	cmp	r2, #0
    e39c:	0a000000 	beq	e3a4 <CBcmMailBox::WriteRead(unsigned int)+0xa0>
    e3a0:	ebffead1 	bl	8eec <LeaveCritical>
    e3a4:	e1a00004 	mov	r0, r4
    e3a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e3ac:	ebffeac0 	bl	8eb4 <EnterCritical>
    e3b0:	eaffffd9 	b	e31c <CBcmMailBox::WriteRead(unsigned int)+0x18>

0000e3b4 <CBcmMailBox::Flush()>:
    e3b4:	e92d4010 	push	{r4, lr}
    e3b8:	e3a04a0b 	mov	r4, #45056	; 0xb000
    e3bc:	e3434f00 	movt	r4, #16128	; 0x3f00
    e3c0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    e3c4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e3c8:	18bd8010 	popne	{r4, pc}
    e3cc:	e3a00014 	mov	r0, #20
    e3d0:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    e3d4:	ebffecfe 	bl	97d4 <CTimer::SimpleMsDelay(unsigned int)>
    e3d8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    e3dc:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e3e0:	0afffff9 	beq	e3cc <CBcmMailBox::Flush()+0x18>
    e3e4:	e8bd8010 	pop	{r4, pc}

0000e3e8 <CBcmMailBox::Read()>:
    e3e8:	e5901000 	ldr	r1, [r0]
    e3ec:	e3a02a0b 	mov	r2, #45056	; 0xb000
    e3f0:	e3432f00 	movt	r2, #16128	; 0x3f00
    e3f4:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    e3f8:	e3130101 	tst	r3, #1073741824	; 0x40000000
    e3fc:	1afffffc 	bne	e3f4 <CBcmMailBox::Read()+0xc>
    e400:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    e404:	e200300f 	and	r3, r0, #15
    e408:	e1510003 	cmp	r1, r3
    e40c:	1afffff8 	bne	e3f4 <CBcmMailBox::Read()+0xc>
    e410:	e3c0000f 	bic	r0, r0, #15
    e414:	e12fff1e 	bx	lr

0000e418 <CBcmMailBox::Write(unsigned int)>:
    e418:	e3a02a0b 	mov	r2, #45056	; 0xb000
    e41c:	e3432f00 	movt	r2, #16128	; 0x3f00
    e420:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    e424:	e3530000 	cmp	r3, #0
    e428:	bafffffc 	blt	e420 <CBcmMailBox::Write(unsigned int)+0x8>
    e42c:	e5903000 	ldr	r3, [r0]
    e430:	e1811003 	orr	r1, r1, r3
    e434:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
    e438:	e12fff1e 	bx	lr

0000e43c <__aeabi_uidiv>:
    e43c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e440:	e3a02000 	mov	r2, #0
    e444:	eb000289 	bl	ee70 <__Divide>
    e448:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000e44c <__aeabi_uidivmod>:
    e44c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e450:	e24dd00c 	sub	sp, sp, #12
    e454:	e28d2004 	add	r2, sp, #4
    e458:	eb000284 	bl	ee70 <__Divide>
    e45c:	e59d1004 	ldr	r1, [sp, #4]
    e460:	e28dd00c 	add	sp, sp, #12
    e464:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000e468 <__aeabi_idiv>:
    e468:	ea0002ac 	b	ef20 <__DivideInteger>

0000e46c <memset>:
    e46c:	e3520000 	cmp	r2, #0
    e470:	012fff1e 	bxeq	lr
    e474:	e6af1071 	sxtb	r1, r1
    e478:	e0802002 	add	r2, r0, r2
    e47c:	e1a03000 	mov	r3, r0
    e480:	e4c31001 	strb	r1, [r3], #1
    e484:	e1530002 	cmp	r3, r2
    e488:	1afffffc 	bne	e480 <memset+0x14>
    e48c:	e12fff1e 	bx	lr

0000e490 <memcmp>:
    e490:	e3520000 	cmp	r2, #0
    e494:	0a00000e 	beq	e4d4 <memcmp+0x44>
    e498:	e5d0c000 	ldrb	ip, [r0]
    e49c:	e5d13000 	ldrb	r3, [r1]
    e4a0:	e15c0003 	cmp	ip, r3
    e4a4:	ca00000c 	bgt	e4dc <memcmp+0x4c>
    e4a8:	ba00000d 	blt	e4e4 <memcmp+0x54>
    e4ac:	e0812002 	add	r2, r1, r2
    e4b0:	e2811001 	add	r1, r1, #1
    e4b4:	ea000004 	b	e4cc <memcmp+0x3c>
    e4b8:	e5f0c001 	ldrb	ip, [r0, #1]!
    e4bc:	e4d13001 	ldrb	r3, [r1], #1
    e4c0:	e15c0003 	cmp	ip, r3
    e4c4:	ca000004 	bgt	e4dc <memcmp+0x4c>
    e4c8:	ba000005 	blt	e4e4 <memcmp+0x54>
    e4cc:	e1510002 	cmp	r1, r2
    e4d0:	1afffff8 	bne	e4b8 <memcmp+0x28>
    e4d4:	e3a00000 	mov	r0, #0
    e4d8:	e12fff1e 	bx	lr
    e4dc:	e3a00001 	mov	r0, #1
    e4e0:	e12fff1e 	bx	lr
    e4e4:	e3e00000 	mvn	r0, #0
    e4e8:	e12fff1e 	bx	lr

0000e4ec <strlen>:
    e4ec:	e1d010d0 	ldrsb	r1, [r0]
    e4f0:	e2803001 	add	r3, r0, #1
    e4f4:	e3510000 	cmp	r1, #0
    e4f8:	0a000003 	beq	e50c <strlen+0x20>
    e4fc:	e0431000 	sub	r1, r3, r0
    e500:	e0d320d1 	ldrsb	r2, [r3], #1
    e504:	e3520000 	cmp	r2, #0
    e508:	1afffffb 	bne	e4fc <strlen+0x10>
    e50c:	e1a00001 	mov	r0, r1
    e510:	e12fff1e 	bx	lr

0000e514 <strcmp>:
    e514:	e1d030d0 	ldrsb	r3, [r0]
    e518:	e1d120d0 	ldrsb	r2, [r1]
    e51c:	e3530000 	cmp	r3, #0
    e520:	1a000007 	bne	e544 <strcmp+0x30>
    e524:	ea000008 	b	e54c <strcmp+0x38>
    e528:	e1530002 	cmp	r3, r2
    e52c:	ca00000b 	bgt	e560 <strcmp+0x4c>
    e530:	ba00000c 	blt	e568 <strcmp+0x54>
    e534:	e1f030d1 	ldrsb	r3, [r0, #1]!
    e538:	e3530000 	cmp	r3, #0
    e53c:	0a00000b 	beq	e570 <strcmp+0x5c>
    e540:	e1f120d1 	ldrsb	r2, [r1, #1]!
    e544:	e3520000 	cmp	r2, #0
    e548:	1afffff6 	bne	e528 <strcmp+0x14>
    e54c:	e1530002 	cmp	r3, r2
    e550:	ca000002 	bgt	e560 <strcmp+0x4c>
    e554:	b3e00000 	mvnlt	r0, #0
    e558:	a3a00000 	movge	r0, #0
    e55c:	e12fff1e 	bx	lr
    e560:	e3a00001 	mov	r0, #1
    e564:	e12fff1e 	bx	lr
    e568:	e3e00000 	mvn	r0, #0
    e56c:	e12fff1e 	bx	lr
    e570:	e1d120d1 	ldrsb	r2, [r1, #1]
    e574:	e1530002 	cmp	r3, r2
    e578:	dafffff5 	ble	e554 <strcmp+0x40>
    e57c:	eafffff7 	b	e560 <strcmp+0x4c>

0000e580 <strcpy>:
    e580:	e1d130d0 	ldrsb	r3, [r1]
    e584:	e1a02000 	mov	r2, r0
    e588:	e3530000 	cmp	r3, #0
    e58c:	0a000003 	beq	e5a0 <strcpy+0x20>
    e590:	e4c23001 	strb	r3, [r2], #1
    e594:	e1f130d1 	ldrsb	r3, [r1, #1]!
    e598:	e3530000 	cmp	r3, #0
    e59c:	1afffffb 	bne	e590 <strcpy+0x10>
    e5a0:	e3a03000 	mov	r3, #0
    e5a4:	e5c23000 	strb	r3, [r2]
    e5a8:	e12fff1e 	bx	lr

0000e5ac <strncpy>:
    e5ac:	e3520000 	cmp	r2, #0
    e5b0:	012fff1e 	bxeq	lr
    e5b4:	e1d1c0d0 	ldrsb	ip, [r1]
    e5b8:	e35c0000 	cmp	ip, #0
    e5bc:	0a000009 	beq	e5e8 <strncpy+0x3c>
    e5c0:	e0802002 	add	r2, r0, r2
    e5c4:	e1a03000 	mov	r3, r0
    e5c8:	ea000002 	b	e5d8 <strncpy+0x2c>
    e5cc:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    e5d0:	e35c0000 	cmp	ip, #0
    e5d4:	0a000004 	beq	e5ec <strncpy+0x40>
    e5d8:	e4c3c001 	strb	ip, [r3], #1
    e5dc:	e1530002 	cmp	r3, r2
    e5e0:	1afffff9 	bne	e5cc <strncpy+0x20>
    e5e4:	e12fff1e 	bx	lr
    e5e8:	e1a03000 	mov	r3, r0
    e5ec:	e3a02000 	mov	r2, #0
    e5f0:	e5c32000 	strb	r2, [r3]
    e5f4:	e12fff1e 	bx	lr

0000e5f8 <strcat>:
    e5f8:	e1d030d0 	ldrsb	r3, [r0]
    e5fc:	e3530000 	cmp	r3, #0
    e600:	e1a03000 	mov	r3, r0
    e604:	0a000002 	beq	e614 <strcat+0x1c>
    e608:	e1f320d1 	ldrsb	r2, [r3, #1]!
    e60c:	e3520000 	cmp	r2, #0
    e610:	1afffffc 	bne	e608 <strcat+0x10>
    e614:	e1d120d0 	ldrsb	r2, [r1]
    e618:	e3520000 	cmp	r2, #0
    e61c:	0a000003 	beq	e630 <strcat+0x38>
    e620:	e4c32001 	strb	r2, [r3], #1
    e624:	e1f120d1 	ldrsb	r2, [r1, #1]!
    e628:	e3520000 	cmp	r2, #0
    e62c:	1afffffb 	bne	e620 <strcat+0x28>
    e630:	e3a02000 	mov	r2, #0
    e634:	e5c32000 	strb	r2, [r3]
    e638:	e12fff1e 	bx	lr

0000e63c <strchr>:
    e63c:	e1d020d0 	ldrsb	r2, [r0]
    e640:	e3520000 	cmp	r2, #0
    e644:	0a000009 	beq	e670 <strchr+0x34>
    e648:	e1510002 	cmp	r1, r2
    e64c:	1a000002 	bne	e65c <strchr+0x20>
    e650:	ea000008 	b	e678 <strchr+0x3c>
    e654:	e1530001 	cmp	r3, r1
    e658:	012fff1e 	bxeq	lr
    e65c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    e660:	e3530000 	cmp	r3, #0
    e664:	1afffffa 	bne	e654 <strchr+0x18>
    e668:	e1a00003 	mov	r0, r3
    e66c:	e12fff1e 	bx	lr
    e670:	e1a00002 	mov	r0, r2
    e674:	e12fff1e 	bx	lr
    e678:	e12fff1e 	bx	lr

0000e67c <strtok_r>:
    e67c:	e3500000 	cmp	r0, #0
    e680:	0a00002c 	beq	e738 <strtok_r+0xbc>
    e684:	e92d4030 	push	{r4, r5, lr}
    e688:	e1d0e0d0 	ldrsb	lr, [r0]
    e68c:	e35e0000 	cmp	lr, #0
    e690:	11d140d0 	ldrsbne	r4, [r1]
    e694:	0a000024 	beq	e72c <strtok_r+0xb0>
    e698:	e3540000 	cmp	r4, #0
    e69c:	0a000008 	beq	e6c4 <strtok_r+0x48>
    e6a0:	e15e0004 	cmp	lr, r4
    e6a4:	0a000019 	beq	e710 <strtok_r+0x94>
    e6a8:	e1a0c001 	mov	ip, r1
    e6ac:	ea000001 	b	e6b8 <strtok_r+0x3c>
    e6b0:	e15e0003 	cmp	lr, r3
    e6b4:	0a000015 	beq	e710 <strtok_r+0x94>
    e6b8:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    e6bc:	e3530000 	cmp	r3, #0
    e6c0:	1afffffa 	bne	e6b0 <strtok_r+0x34>
    e6c4:	e35e0000 	cmp	lr, #0
    e6c8:	0a000017 	beq	e72c <strtok_r+0xb0>
    e6cc:	e1a05000 	mov	r5, r0
    e6d0:	e3540000 	cmp	r4, #0
    e6d4:	0a000008 	beq	e6fc <strtok_r+0x80>
    e6d8:	e15e0004 	cmp	lr, r4
    e6dc:	0a00000d 	beq	e718 <strtok_r+0x9c>
    e6e0:	e1a0c001 	mov	ip, r1
    e6e4:	ea000001 	b	e6f0 <strtok_r+0x74>
    e6e8:	e15e0003 	cmp	lr, r3
    e6ec:	0a000009 	beq	e718 <strtok_r+0x9c>
    e6f0:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    e6f4:	e3530000 	cmp	r3, #0
    e6f8:	1afffffa 	bne	e6e8 <strtok_r+0x6c>
    e6fc:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    e700:	e35e0000 	cmp	lr, #0
    e704:	1afffff1 	bne	e6d0 <strtok_r+0x54>
    e708:	e5825000 	str	r5, [r2]
    e70c:	e8bd8030 	pop	{r4, r5, pc}
    e710:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    e714:	eaffffdf 	b	e698 <strtok_r+0x1c>
    e718:	e3a03000 	mov	r3, #0
    e71c:	e2855001 	add	r5, r5, #1
    e720:	e5453001 	strb	r3, [r5, #-1]
    e724:	e5825000 	str	r5, [r2]
    e728:	e8bd8030 	pop	{r4, r5, pc}
    e72c:	e3a00000 	mov	r0, #0
    e730:	e5820000 	str	r0, [r2]
    e734:	e8bd8030 	pop	{r4, r5, pc}
    e738:	e5920000 	ldr	r0, [r2]
    e73c:	e3500000 	cmp	r0, #0
    e740:	1affffcf 	bne	e684 <strtok_r+0x8>
    e744:	e12fff1e 	bx	lr

0000e748 <strtoul>:
    e748:	e3510000 	cmp	r1, #0
    e74c:	e92d4070 	push	{r4, r5, r6, lr}
    e750:	e2425002 	sub	r5, r2, #2
    e754:	15810000 	strne	r0, [r1]
    e758:	e3520000 	cmp	r2, #0
    e75c:	13550022 	cmpne	r5, #34	; 0x22
    e760:	e3c2e010 	bic	lr, r2, #16
    e764:	83a05001 	movhi	r5, #1
    e768:	93a05000 	movls	r5, #0
    e76c:	8a000036 	bhi	e84c <strtoul+0x104>
    e770:	e1d0c0d0 	ldrsb	ip, [r0]
    e774:	e1a04000 	mov	r4, r0
    e778:	e2800001 	add	r0, r0, #1
    e77c:	e24c3009 	sub	r3, ip, #9
    e780:	e35c0020 	cmp	ip, #32
    e784:	e6ef3073 	uxtb	r3, r3
    e788:	0afffff8 	beq	e770 <strtoul+0x28>
    e78c:	e3530004 	cmp	r3, #4
    e790:	9afffff6 	bls	e770 <strtoul+0x28>
    e794:	e35c002b 	cmp	ip, #43	; 0x2b
    e798:	0a00002d 	beq	e854 <strtoul+0x10c>
    e79c:	e35c002d 	cmp	ip, #45	; 0x2d
    e7a0:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
    e7a4:	03a06001 	moveq	r6, #1
    e7a8:	01a04000 	moveq	r4, r0
    e7ac:	13a06000 	movne	r6, #0
    e7b0:	e35c0030 	cmp	ip, #48	; 0x30
    e7b4:	0a00002b 	beq	e868 <strtoul+0x120>
    e7b8:	e3520000 	cmp	r2, #0
    e7bc:	03a0200a 	moveq	r2, #10
    e7c0:	e35c002f 	cmp	ip, #47	; 0x2f
    e7c4:	e1a0300c 	mov	r3, ip
    e7c8:	da00001c 	ble	e840 <strtoul+0xf8>
    e7cc:	e3a05001 	mov	r5, #1
    e7d0:	e3a0e000 	mov	lr, #0
    e7d4:	ea000007 	b	e7f8 <strtoul+0xb0>
    e7d8:	e150000e 	cmp	r0, lr
    e7dc:	e3a05000 	mov	r5, #0
    e7e0:	e1a0e000 	mov	lr, r0
    e7e4:	3a000028 	bcc	e88c <strtoul+0x144>
    e7e8:	e1f430d1 	ldrsb	r3, [r4, #1]!
    e7ec:	e353002f 	cmp	r3, #47	; 0x2f
    e7f0:	e1a0c003 	mov	ip, r3
    e7f4:	da000029 	ble	e8a0 <strtoul+0x158>
    e7f8:	e24cc061 	sub	ip, ip, #97	; 0x61
    e7fc:	e35c0019 	cmp	ip, #25
    e800:	92433020 	subls	r3, r3, #32
    e804:	e3530040 	cmp	r3, #64	; 0x40
    e808:	c2433007 	subgt	r3, r3, #7
    e80c:	e2433030 	sub	r3, r3, #48	; 0x30
    e810:	e1520003 	cmp	r2, r3
    e814:	e020329e 	mla	r0, lr, r2, r3
    e818:	caffffee 	bgt	e7d8 <strtoul+0x90>
    e81c:	e2255001 	eor	r5, r5, #1
    e820:	e1a0000e 	mov	r0, lr
    e824:	e3510000 	cmp	r1, #0
    e828:	e0055006 	and	r5, r5, r6
    e82c:	0a000000 	beq	e834 <strtoul+0xec>
    e830:	e5814000 	str	r4, [r1]
    e834:	e3550000 	cmp	r5, #0
    e838:	12600000 	rsbne	r0, r0, #0
    e83c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e840:	e3510000 	cmp	r1, #0
    e844:	13a00000 	movne	r0, #0
    e848:	1afffff8 	bne	e830 <strtoul+0xe8>
    e84c:	e3a00000 	mov	r0, #0
    e850:	e8bd8070 	pop	{r4, r5, r6, pc}
    e854:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    e858:	e3a06000 	mov	r6, #0
    e85c:	e1a04000 	mov	r4, r0
    e860:	e35c0030 	cmp	ip, #48	; 0x30
    e864:	1affffd3 	bne	e7b8 <strtoul+0x70>
    e868:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    e86c:	e2840001 	add	r0, r4, #1
    e870:	e3cc3020 	bic	r3, ip, #32
    e874:	e3530058 	cmp	r3, #88	; 0x58
    e878:	0a00000a 	beq	e8a8 <strtoul+0x160>
    e87c:	e3520000 	cmp	r2, #0
    e880:	e1a04000 	mov	r4, r0
    e884:	03a02008 	moveq	r2, #8
    e888:	eaffffcc 	b	e7c0 <strtoul+0x78>
    e88c:	e1510005 	cmp	r1, r5
    e890:	0a00000a 	beq	e8c0 <strtoul+0x178>
    e894:	e5814000 	str	r4, [r1]
    e898:	e3e00000 	mvn	r0, #0
    e89c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e8a0:	e3a05001 	mov	r5, #1
    e8a4:	eaffffde 	b	e824 <strtoul+0xdc>
    e8a8:	e35e0000 	cmp	lr, #0
    e8ac:	1affffe6 	bne	e84c <strtoul+0x104>
    e8b0:	e1d4c0d2 	ldrsb	ip, [r4, #2]
    e8b4:	e3a02010 	mov	r2, #16
    e8b8:	e2844002 	add	r4, r4, #2
    e8bc:	eaffffbf 	b	e7c0 <strtoul+0x78>
    e8c0:	e3e00000 	mvn	r0, #0
    e8c4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e8c8 <char2int>:
    e8c8:	e12fff1e 	bx	lr

0000e8cc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
    e8cc:	e5903020 	ldr	r3, [r0, #32]
    e8d0:	e3a01000 	mov	r1, #0
    e8d4:	e92d4010 	push	{r4, lr}
    e8d8:	e24dd010 	sub	sp, sp, #16
    e8dc:	e3a02c01 	mov	r2, #256	; 0x100
    e8e0:	e583100c 	str	r1, [r3, #12]
    e8e4:	e5832010 	str	r2, [r3, #16]
    e8e8:	e1a04000 	mov	r4, r0
    e8ec:	e28d0008 	add	r0, sp, #8
    e8f0:	ebffe728 	bl	8598 <CBcmPropertyTags::CBcmPropertyTags()>
    e8f4:	e5942020 	ldr	r2, [r4, #32]
    e8f8:	e3003408 	movw	r3, #1032	; 0x408
    e8fc:	e28d0008 	add	r0, sp, #8
    e900:	e58d3000 	str	r3, [sp]
    e904:	e308100b 	movw	r1, #32779	; 0x800b
    e908:	e3003414 	movw	r3, #1044	; 0x414
    e90c:	e3401004 	movt	r1, #4
    e910:	ebffe74c 	bl	8648 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e914:	e3500000 	cmp	r0, #0
    e918:	e28d0008 	add	r0, sp, #8
    e91c:	0a000003 	beq	e930 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
    e920:	e5943020 	ldr	r3, [r4, #32]
    e924:	e593300c 	ldr	r3, [r3, #12]
    e928:	e3530000 	cmp	r3, #0
    e92c:	0a000003 	beq	e940 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
    e930:	ebffe71e 	bl	85b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    e934:	e3a00000 	mov	r0, #0
    e938:	e28dd010 	add	sp, sp, #16
    e93c:	e8bd8010 	pop	{r4, pc}
    e940:	ebffe71a 	bl	85b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    e944:	e3a00001 	mov	r0, #1
    e948:	e28dd010 	add	sp, sp, #16
    e94c:	e8bd8010 	pop	{r4, pc}

0000e950 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
    e950:	e92d4030 	push	{r4, r5, lr}
    e954:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    e958:	e3510000 	cmp	r1, #0
    e95c:	13520000 	cmpne	r2, #0
    e960:	e3a05000 	mov	r5, #0
    e964:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
    e968:	e1a04000 	mov	r4, r0
    e96c:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
    e970:	e8800006 	stm	r0, {r1, r2}
    e974:	e5803010 	str	r3, [r0, #16]
    e978:	e580e00c 	str	lr, [r0, #12]
    e97c:	e580c008 	str	ip, [r0, #8]
    e980:	e5805014 	str	r5, [r0, #20]
    e984:	e5805018 	str	r5, [r0, #24]
    e988:	e580501c 	str	r5, [r0, #28]
    e98c:	e5805020 	str	r5, [r0, #32]
    e990:	1a000011 	bne	e9dc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
    e994:	e28d000c 	add	r0, sp, #12
    e998:	ebffe6fe 	bl	8598 <CBcmPropertyTags::CBcmPropertyTags()>
    e99c:	e3a03014 	mov	r3, #20
    e9a0:	e58d5000 	str	r5, [sp]
    e9a4:	e28d000c 	add	r0, sp, #12
    e9a8:	e3a01003 	mov	r1, #3
    e9ac:	e08d2003 	add	r2, sp, r3
    e9b0:	e3401004 	movt	r1, #4
    e9b4:	ebffe723 	bl	8648 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e9b8:	e1500005 	cmp	r0, r5
    e9bc:	1a000027 	bne	ea60 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
    e9c0:	e3a02d0a 	mov	r2, #640	; 0x280
    e9c4:	e3a03e1e 	mov	r3, #480	; 0x1e0
    e9c8:	e884000c 	stm	r4, {r2, r3}
    e9cc:	e28d000c 	add	r0, sp, #12
    e9d0:	ebffe6f6 	bl	85b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    e9d4:	e594c008 	ldr	ip, [r4, #8]
    e9d8:	e5943010 	ldr	r3, [r4, #16]
    e9dc:	e35c0000 	cmp	ip, #0
    e9e0:	0a00001a 	beq	ea50 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
    e9e4:	e594200c 	ldr	r2, [r4, #12]
    e9e8:	e3520000 	cmp	r2, #0
    e9ec:	0a000017 	beq	ea50 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
    e9f0:	e3530008 	cmp	r3, #8
    e9f4:	8a000007 	bhi	ea18 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
    e9f8:	e3000414 	movw	r0, #1044	; 0x414
    e9fc:	ebffe927 	bl	8ea0 <operator new[](unsigned int)>
    ea00:	e3a02b01 	mov	r2, #1024	; 0x400
    ea04:	e3a01000 	mov	r1, #0
    ea08:	e5840020 	str	r0, [r4, #32]
    ea0c:	e2800014 	add	r0, r0, #20
    ea10:	ebfffe95 	bl	e46c <memset>
    ea14:	e5943010 	ldr	r3, [r4, #16]
    ea18:	e5945000 	ldr	r5, [r4]
    ea1c:	e300248c 	movw	r2, #1164	; 0x48c
    ea20:	e594e004 	ldr	lr, [r4, #4]
    ea24:	e3402001 	movt	r2, #1
    ea28:	e594c008 	ldr	ip, [r4, #8]
    ea2c:	e1a00004 	mov	r0, r4
    ea30:	e594100c 	ldr	r1, [r4, #12]
    ea34:	e582500c 	str	r5, [r2, #12]
    ea38:	e582e010 	str	lr, [r2, #16]
    ea3c:	e582c020 	str	ip, [r2, #32]
    ea40:	e5821024 	str	r1, [r2, #36]	; 0x24
    ea44:	e5823034 	str	r3, [r2, #52]	; 0x34
    ea48:	e28dd02c 	add	sp, sp, #44	; 0x2c
    ea4c:	e8bd8030 	pop	{r4, r5, pc}
    ea50:	e8940006 	ldm	r4, {r1, r2}
    ea54:	e5841008 	str	r1, [r4, #8]
    ea58:	e584200c 	str	r2, [r4, #12]
    ea5c:	eaffffe3 	b	e9f0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
    ea60:	e59d2020 	ldr	r2, [sp, #32]
    ea64:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    ea68:	e2420d0a 	sub	r0, r2, #640	; 0x280
    ea6c:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
    ea70:	e5842000 	str	r2, [r4]
    ea74:	e3510f96 	cmp	r1, #600	; 0x258
    ea78:	93500c05 	cmpls	r0, #1280	; 0x500
    ea7c:	e5843004 	str	r3, [r4, #4]
    ea80:	9affffd1 	bls	e9cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
    ea84:	eaffffcd 	b	e9c0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

0000ea88 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
    ea88:	e92d4010 	push	{r4, lr}
    ea8c:	e3a01014 	mov	r1, #20
    ea90:	e1a04000 	mov	r4, r0
    ea94:	e5900020 	ldr	r0, [r0, #32]
    ea98:	ebffe903 	bl	8eac <operator delete(void*, unsigned int)>
    ea9c:	e1a00004 	mov	r0, r4
    eaa0:	e8bd8010 	pop	{r4, pc}

0000eaa4 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
    eaa4:	e5903010 	ldr	r3, [r0, #16]
    eaa8:	e3530008 	cmp	r3, #8
    eaac:	812fff1e 	bxhi	lr
    eab0:	e5900020 	ldr	r0, [r0, #32]
    eab4:	e1a03982 	lsl	r3, r2, #19
    eab8:	e1a0c5a2 	lsr	ip, r2, #11
    eabc:	e203373e 	and	r3, r3, #16252928	; 0xf80000
    eac0:	e0801101 	add	r1, r0, r1, lsl #2
    eac4:	e1a02282 	lsl	r2, r2, #5
    eac8:	e183318c 	orr	r3, r3, ip, lsl #3
    eacc:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
    ead0:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
    ead4:	e1822003 	orr	r2, r2, r3
    ead8:	e5812014 	str	r2, [r1, #20]
    eadc:	e12fff1e 	bx	lr

0000eae0 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
    eae0:	e5903010 	ldr	r3, [r0, #16]
    eae4:	e3530008 	cmp	r3, #8
    eae8:	95903020 	ldrls	r3, [r0, #32]
    eaec:	90831101 	addls	r1, r3, r1, lsl #2
    eaf0:	95812014 	strls	r2, [r1, #20]
    eaf4:	e12fff1e 	bx	lr

0000eaf8 <CBcmFrameBuffer::Initialize()>:
    eaf8:	e92d4070 	push	{r4, r5, r6, lr}
    eafc:	e24dd008 	sub	sp, sp, #8
    eb00:	e300648c 	movw	r6, #1164	; 0x48c
    eb04:	e3406001 	movt	r6, #1
    eb08:	e1a05000 	mov	r5, r0
    eb0c:	e1a0000d 	mov	r0, sp
    eb10:	ebffe6a0 	bl	8598 <CBcmPropertyTags::CBcmPropertyTags()>
    eb14:	e1a01006 	mov	r1, r6
    eb18:	e1a0000d 	mov	r0, sp
    eb1c:	e3a02070 	mov	r2, #112	; 0x70
    eb20:	ebffe6a7 	bl	85c4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    eb24:	e2504000 	subs	r4, r0, #0
    eb28:	0a00001e 	beq	eba8 <CBcmFrameBuffer::Initialize()+0xb0>
    eb2c:	e596400c 	ldr	r4, [r6, #12]
    eb30:	e3540000 	cmp	r4, #0
    eb34:	0a00001b 	beq	eba8 <CBcmFrameBuffer::Initialize()+0xb0>
    eb38:	e5964010 	ldr	r4, [r6, #16]
    eb3c:	e3540000 	cmp	r4, #0
    eb40:	0a000018 	beq	eba8 <CBcmFrameBuffer::Initialize()+0xb0>
    eb44:	e5964020 	ldr	r4, [r6, #32]
    eb48:	e3540000 	cmp	r4, #0
    eb4c:	0a000015 	beq	eba8 <CBcmFrameBuffer::Initialize()+0xb0>
    eb50:	e5964024 	ldr	r4, [r6, #36]	; 0x24
    eb54:	e3540000 	cmp	r4, #0
    eb58:	0a000012 	beq	eba8 <CBcmFrameBuffer::Initialize()+0xb0>
    eb5c:	e5964034 	ldr	r4, [r6, #52]	; 0x34
    eb60:	e3540000 	cmp	r4, #0
    eb64:	0a00000f 	beq	eba8 <CBcmFrameBuffer::Initialize()+0xb0>
    eb68:	e5964058 	ldr	r4, [r6, #88]	; 0x58
    eb6c:	e3540000 	cmp	r4, #0
    eb70:	0a00000c 	beq	eba8 <CBcmFrameBuffer::Initialize()+0xb0>
    eb74:	e5951010 	ldr	r1, [r5, #16]
    eb78:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
    eb7c:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
    eb80:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
    eb84:	e3510008 	cmp	r1, #8
    eb88:	e5854014 	str	r4, [r5, #20]
    eb8c:	e5852018 	str	r2, [r5, #24]
    eb90:	83a04001 	movhi	r4, #1
    eb94:	e585301c 	str	r3, [r5, #28]
    eb98:	8a000002 	bhi	eba8 <CBcmFrameBuffer::Initialize()+0xb0>
    eb9c:	e1a00005 	mov	r0, r5
    eba0:	ebffff49 	bl	e8cc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
    eba4:	e1a04000 	mov	r4, r0
    eba8:	e1a0000d 	mov	r0, sp
    ebac:	ebffe67f 	bl	85b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    ebb0:	e1a00004 	mov	r0, r4
    ebb4:	e28dd008 	add	sp, sp, #8
    ebb8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ebbc <CBcmFrameBuffer::GetWidth() const>:
    ebbc:	e5900000 	ldr	r0, [r0]
    ebc0:	e12fff1e 	bx	lr

0000ebc4 <CBcmFrameBuffer::GetHeight() const>:
    ebc4:	e5900004 	ldr	r0, [r0, #4]
    ebc8:	e12fff1e 	bx	lr

0000ebcc <CBcmFrameBuffer::GetVirtWidth() const>:
    ebcc:	e5900008 	ldr	r0, [r0, #8]
    ebd0:	e12fff1e 	bx	lr

0000ebd4 <CBcmFrameBuffer::GetVirtHeight() const>:
    ebd4:	e590000c 	ldr	r0, [r0, #12]
    ebd8:	e12fff1e 	bx	lr

0000ebdc <CBcmFrameBuffer::GetPitch() const>:
    ebdc:	e590001c 	ldr	r0, [r0, #28]
    ebe0:	e12fff1e 	bx	lr

0000ebe4 <CBcmFrameBuffer::GetDepth() const>:
    ebe4:	e5900010 	ldr	r0, [r0, #16]
    ebe8:	e12fff1e 	bx	lr

0000ebec <CBcmFrameBuffer::GetBuffer() const>:
    ebec:	e5900014 	ldr	r0, [r0, #20]
    ebf0:	e12fff1e 	bx	lr

0000ebf4 <CBcmFrameBuffer::GetSize() const>:
    ebf4:	e5900018 	ldr	r0, [r0, #24]
    ebf8:	e12fff1e 	bx	lr

0000ebfc <CBcmFrameBuffer::UpdatePalette()>:
    ebfc:	e5903010 	ldr	r3, [r0, #16]
    ec00:	e3530008 	cmp	r3, #8
    ec04:	9a000001 	bls	ec10 <CBcmFrameBuffer::UpdatePalette()+0x14>
    ec08:	e3a00001 	mov	r0, #1
    ec0c:	e12fff1e 	bx	lr
    ec10:	eaffff2d 	b	e8cc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0000ec14 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
    ec14:	e92d4070 	push	{r4, r5, r6, lr}
    ec18:	e24dd028 	sub	sp, sp, #40	; 0x28
    ec1c:	e28d000c 	add	r0, sp, #12
    ec20:	e1a05001 	mov	r5, r1
    ec24:	e1a06002 	mov	r6, r2
    ec28:	ebffe65a 	bl	8598 <CBcmPropertyTags::CBcmPropertyTags()>
    ec2c:	e3a03008 	mov	r3, #8
    ec30:	e28d000c 	add	r0, sp, #12
    ec34:	e58d3000 	str	r3, [sp]
    ec38:	e3081009 	movw	r1, #32777	; 0x8009
    ec3c:	e3a03014 	mov	r3, #20
    ec40:	e3401004 	movt	r1, #4
    ec44:	e08d2003 	add	r2, sp, r3
    ec48:	e58d5020 	str	r5, [sp, #32]
    ec4c:	e58d6024 	str	r6, [sp, #36]	; 0x24
    ec50:	ebffe67c 	bl	8648 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ec54:	e2504000 	subs	r4, r0, #0
    ec58:	0a000006 	beq	ec78 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
    ec5c:	e59d3020 	ldr	r3, [sp, #32]
    ec60:	e1550003 	cmp	r5, r3
    ec64:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
    ec68:	13a04000 	movne	r4, #0
    ec6c:	00444006 	subeq	r4, r4, r6
    ec70:	016f4f14 	clzeq	r4, r4
    ec74:	01a042a4 	lsreq	r4, r4, #5
    ec78:	e28d000c 	add	r0, sp, #12
    ec7c:	ebffe64b 	bl	85b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    ec80:	e1a00004 	mov	r0, r4
    ec84:	e28dd028 	add	sp, sp, #40	; 0x28
    ec88:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ec8c <CDevice::~CDevice()>:
    ec8c:	e12fff1e 	bx	lr

0000ec90 <CDevice::Read(void*, unsigned int)>:
    ec90:	e3e00000 	mvn	r0, #0
    ec94:	e12fff1e 	bx	lr

0000ec98 <CDevice::Seek(unsigned long long)>:
    ec98:	e3e00000 	mvn	r0, #0
    ec9c:	e3e01000 	mvn	r1, #0
    eca0:	e12fff1e 	bx	lr

0000eca4 <CDevice::~CDevice()>:
    eca4:	e92d4010 	push	{r4, lr}
    eca8:	e3a01004 	mov	r1, #4
    ecac:	e1a04000 	mov	r4, r0
    ecb0:	ebffe87d 	bl	8eac <operator delete(void*, unsigned int)>
    ecb4:	e1a00004 	mov	r0, r4
    ecb8:	e8bd8010 	pop	{r4, pc}

0000ecbc <CDevice::CDevice()>:
    ecbc:	e59f3004 	ldr	r3, [pc, #4]	; ecc8 <CDevice::CDevice()+0xc>
    ecc0:	e5803000 	str	r3, [r0]
    ecc4:	e12fff1e 	bx	lr
    ecc8:	00010354 	.word	0x00010354

0000eccc <debug_hexdump(void const*, unsigned int, char const*)>:
    eccc:	e3520000 	cmp	r2, #0
    ecd0:	e3003368 	movw	r3, #872	; 0x368
    ecd4:	e3403001 	movt	r3, #1
    ecd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecdc:	11a03002 	movne	r3, r2
    ece0:	e24dd054 	sub	sp, sp, #84	; 0x54
    ece4:	e1a06003 	mov	r6, r3
    ece8:	e1a05001 	mov	r5, r1
    ecec:	e1a04000 	mov	r4, r0
    ecf0:	e58d304c 	str	r3, [sp, #76]	; 0x4c
    ecf4:	ebfff205 	bl	b510 <CLogger::Get()>
    ecf8:	e58d4004 	str	r4, [sp, #4]
    ecfc:	e1a01006 	mov	r1, r6
    ed00:	e58d5000 	str	r5, [sp]
    ed04:	e3003370 	movw	r3, #880	; 0x370
    ed08:	e3a02004 	mov	r2, #4
    ed0c:	e3403001 	movt	r3, #1
    ed10:	ebfff2da 	bl	b880 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ed14:	e3550000 	cmp	r5, #0
    ed18:	0a00002a 	beq	edc8 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    ed1c:	e3009394 	movw	r9, #916	; 0x394
    ed20:	e3409001 	movt	r9, #1
    ed24:	ebfff1f9 	bl	b510 <CLogger::Get()>
    ed28:	e5d4800f 	ldrb	r8, [r4, #15]
    ed2c:	e5d4700e 	ldrb	r7, [r4, #14]
    ed30:	e6ffc074 	uxth	ip, r4
    ed34:	e5d4600d 	ldrb	r6, [r4, #13]
    ed38:	e1a03009 	mov	r3, r9
    ed3c:	e5d4e00c 	ldrb	lr, [r4, #12]
    ed40:	e3a02004 	mov	r2, #4
    ed44:	e5d4b00b 	ldrb	fp, [r4, #11]
    ed48:	e2844010 	add	r4, r4, #16
    ed4c:	e554a006 	ldrb	sl, [r4, #-6]
    ed50:	e58d8040 	str	r8, [sp, #64]	; 0x40
    ed54:	e5548007 	ldrb	r8, [r4, #-7]
    ed58:	e58d703c 	str	r7, [sp, #60]	; 0x3c
    ed5c:	e5547008 	ldrb	r7, [r4, #-8]
    ed60:	e58d6038 	str	r6, [sp, #56]	; 0x38
    ed64:	e5546009 	ldrb	r6, [r4, #-9]
    ed68:	e58de034 	str	lr, [sp, #52]	; 0x34
    ed6c:	e554e00a 	ldrb	lr, [r4, #-10]
    ed70:	e58db030 	str	fp, [sp, #48]	; 0x30
    ed74:	e554b00b 	ldrb	fp, [r4, #-11]
    ed78:	e58da02c 	str	sl, [sp, #44]	; 0x2c
    ed7c:	e554a00c 	ldrb	sl, [r4, #-12]
    ed80:	e58d8028 	str	r8, [sp, #40]	; 0x28
    ed84:	e554800d 	ldrb	r8, [r4, #-13]
    ed88:	e58d7024 	str	r7, [sp, #36]	; 0x24
    ed8c:	e554700e 	ldrb	r7, [r4, #-14]
    ed90:	e58d6020 	str	r6, [sp, #32]
    ed94:	e554600f 	ldrb	r6, [r4, #-15]
    ed98:	e58de01c 	str	lr, [sp, #28]
    ed9c:	e554e010 	ldrb	lr, [r4, #-16]
    eda0:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
    eda4:	e58db018 	str	fp, [sp, #24]
    eda8:	e58da014 	str	sl, [sp, #20]
    edac:	e58d8010 	str	r8, [sp, #16]
    edb0:	e58d700c 	str	r7, [sp, #12]
    edb4:	e58d6008 	str	r6, [sp, #8]
    edb8:	e88d5000 	stm	sp, {ip, lr}
    edbc:	ebfff2af 	bl	b880 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    edc0:	e355000f 	cmp	r5, #15
    edc4:	8a000001 	bhi	edd0 <debug_hexdump(void const*, unsigned int, char const*)+0x104>
    edc8:	e28dd054 	add	sp, sp, #84	; 0x54
    edcc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edd0:	e2555010 	subs	r5, r5, #16
    edd4:	1affffd2 	bne	ed24 <debug_hexdump(void const*, unsigned int, char const*)+0x58>
    edd8:	e28dd054 	add	sp, sp, #84	; 0x54
    eddc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ede0 <debug_stacktrace(unsigned int const*, char const*)>:
    ede0:	e3510000 	cmp	r1, #0
    ede4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ede8:	e3007368 	movw	r7, #872	; 0x368
    edec:	e30e6f84 	movw	r6, #61316	; 0xef84
    edf0:	e3407001 	movt	r7, #1
    edf4:	e30083ec 	movw	r8, #1004	; 0x3ec
    edf8:	e24dd008 	sub	sp, sp, #8
    edfc:	11a07001 	movne	r7, r1
    ee00:	e3406000 	movt	r6, #0
    ee04:	e3408001 	movt	r8, #1
    ee08:	e1a05000 	mov	r5, r0
    ee0c:	e3a04000 	mov	r4, #0
    ee10:	ea000003 	b	ee24 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    ee14:	e2844001 	add	r4, r4, #1
    ee18:	e2855004 	add	r5, r5, #4
    ee1c:	e3540040 	cmp	r4, #64	; 0x40
    ee20:	0a000010 	beq	ee68 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    ee24:	e5953000 	ldr	r3, [r5]
    ee28:	e3530902 	cmp	r3, #32768	; 0x8000
    ee2c:	3afffff8 	bcc	ee14 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    ee30:	e1530006 	cmp	r3, r6
    ee34:	2afffff6 	bcs	ee14 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    ee38:	ebfff1b4 	bl	b510 <CLogger::Get()>
    ee3c:	e595c000 	ldr	ip, [r5]
    ee40:	e1a03008 	mov	r3, r8
    ee44:	e58d4000 	str	r4, [sp]
    ee48:	e3a02004 	mov	r2, #4
    ee4c:	e1a01007 	mov	r1, r7
    ee50:	e58dc004 	str	ip, [sp, #4]
    ee54:	e2844001 	add	r4, r4, #1
    ee58:	ebfff288 	bl	b880 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ee5c:	e3540040 	cmp	r4, #64	; 0x40
    ee60:	e2855004 	add	r5, r5, #4
    ee64:	1affffee 	bne	ee24 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    ee68:	e28dd008 	add	sp, sp, #8
    ee6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ee70 <__Divide>:
    ee70:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ee74:	e2514000 	subs	r4, r1, #0
    ee78:	e1a08000 	mov	r8, r0
    ee7c:	e1a09002 	mov	r9, r2
    ee80:	0a000020 	beq	ef08 <__Divide+0x98>
    ee84:	e3a05000 	mov	r5, #0
    ee88:	e3a07000 	mov	r7, #0
    ee8c:	e1550007 	cmp	r5, r7
    ee90:	e1a06008 	mov	r6, r8
    ee94:	01540008 	cmpeq	r4, r8
    ee98:	2a00001e 	bcs	ef18 <__Divide+0xa8>
    ee9c:	e3a03001 	mov	r3, #1
    eea0:	ea000000 	b	eea8 <__Divide+0x38>
    eea4:	e1a03000 	mov	r3, r0
    eea8:	e0944004 	adds	r4, r4, r4
    eeac:	e2830001 	add	r0, r3, #1
    eeb0:	e0a55005 	adc	r5, r5, r5
    eeb4:	e1550007 	cmp	r5, r7
    eeb8:	01540006 	cmpeq	r4, r6
    eebc:	3afffff8 	bcc	eea4 <__Divide+0x34>
    eec0:	e3500000 	cmp	r0, #0
    eec4:	0a00000c 	beq	eefc <__Divide+0x8c>
    eec8:	e3a00000 	mov	r0, #0
    eecc:	e1570005 	cmp	r7, r5
    eed0:	e2433001 	sub	r3, r3, #1
    eed4:	01560004 	cmpeq	r6, r4
    eed8:	e1a00080 	lsl	r0, r0, #1
    eedc:	20488004 	subcs	r8, r8, r4
    eee0:	23800001 	orrcs	r0, r0, #1
    eee4:	e1b050a5 	lsrs	r5, r5, #1
    eee8:	e1a04064 	rrx	r4, r4
    eeec:	e3730001 	cmn	r3, #1
    eef0:	e1a06008 	mov	r6, r8
    eef4:	e3a07000 	mov	r7, #0
    eef8:	1afffff3 	bne	eecc <__Divide+0x5c>
    eefc:	e3590000 	cmp	r9, #0
    ef00:	15898000 	strne	r8, [r9]
    ef04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ef08:	ebfff886 	bl	d128 <CExceptionHandler::Get()>
    ef0c:	e1a01004 	mov	r1, r4
    ef10:	ebfff845 	bl	d02c <CExceptionHandler::Throw(unsigned int)>
    ef14:	eaffffda 	b	ee84 <__Divide+0x14>
    ef18:	e3a03000 	mov	r3, #0
    ef1c:	eaffffe9 	b	eec8 <__Divide+0x58>

0000ef20 <__DivideInteger>:
    ef20:	e2502000 	subs	r2, r0, #0
    ef24:	e92d4010 	push	{r4, lr}
    ef28:	ba000004 	blt	ef40 <__DivideInteger+0x20>
    ef2c:	e3510000 	cmp	r1, #0
    ef30:	ba00000e 	blt	ef70 <__DivideInteger+0x50>
    ef34:	e3a02000 	mov	r2, #0
    ef38:	e8bd4010 	pop	{r4, lr}
    ef3c:	eaffffcb 	b	ee70 <__Divide>
    ef40:	e3510000 	cmp	r1, #0
    ef44:	ba000004 	blt	ef5c <__DivideInteger+0x3c>
    ef48:	e2620000 	rsb	r0, r2, #0
    ef4c:	e3a02000 	mov	r2, #0
    ef50:	ebffffc6 	bl	ee70 <__Divide>
    ef54:	e2600000 	rsb	r0, r0, #0
    ef58:	e8bd8010 	pop	{r4, pc}
    ef5c:	e2620000 	rsb	r0, r2, #0
    ef60:	e2611000 	rsb	r1, r1, #0
    ef64:	e3a02000 	mov	r2, #0
    ef68:	e8bd4010 	pop	{r4, lr}
    ef6c:	eaffffbf 	b	ee70 <__Divide>
    ef70:	e2611000 	rsb	r1, r1, #0
    ef74:	e3a02000 	mov	r2, #0
    ef78:	ebffffbc 	bl	ee70 <__Divide>
    ef7c:	e2600000 	rsb	r0, r0, #0
    ef80:	e8bd8010 	pop	{r4, pc}
