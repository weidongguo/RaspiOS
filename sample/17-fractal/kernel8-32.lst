
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea00062f 	b	9924 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

00008070 <main>:
    8070:	e92d4010 	push	{r4, lr}
    8074:	e24ddb07 	sub	sp, sp, #7168	; 0x1c00
    8078:	e24dd020 	sub	sp, sp, #32
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb000012 	bl	80d0 <CKernel::CKernel()>
    8084:	e1a0000d 	mov	r0, sp
    8088:	eb00004b 	bl	81bc <CKernel::Initialize()>
    808c:	e2504000 	subs	r4, r0, #0
    8090:	0a000004 	beq	80a8 <main+0x38>
    8094:	e1a0000d 	mov	r0, sp
    8098:	eb000071 	bl	8264 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	13a04000 	movne	r4, #0
    80a4:	0a000006 	beq	80c4 <main+0x54>
    80a8:	eb00060f 	bl	98ec <halt>
    80ac:	e1a0000d 	mov	r0, sp
    80b0:	eb00007a 	bl	82a0 <CKernel::~CKernel()>
    80b4:	e1a00004 	mov	r0, r4
    80b8:	e28ddb07 	add	sp, sp, #7168	; 0x1c00
    80bc:	e28dd020 	add	sp, sp, #32
    80c0:	e8bd8010 	pop	{r4, pc}
    80c4:	eb00060d 	bl	9900 <reboot>
    80c8:	e3a04001 	mov	r4, #1
    80cc:	eafffff6 	b	80ac <main+0x3c>

000080d0 <CKernel::CKernel()>:
    80d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    80d4:	e3a01001 	mov	r1, #1
    80d8:	e1a04000 	mov	r4, r0
    80dc:	e2809010 	add	r9, r0, #16
    80e0:	e284701c 	add	r7, r4, #28
    80e4:	eb000575 	bl	96c0 <CMemorySystem::CMemorySystem(int)>
    80e8:	e1a00009 	mov	r0, r9
    80ec:	eb000113 	bl	8540 <CActLED::CActLED()>
    80f0:	e1a00007 	mov	r0, r7
    80f4:	eb00097f 	bl	a6f8 <CKernelOptions::CKernelOptions()>
    80f8:	e2840e85 	add	r0, r4, #2128	; 0x850
    80fc:	e280000c 	add	r0, r0, #12
    8100:	e2845e86 	add	r5, r4, #2144	; 0x860
    8104:	eb00103a 	bl	c1f4 <CDeviceNameService::CDeviceNameService()>
    8108:	e1a00007 	mov	r0, r7
    810c:	eb000945 	bl	a628 <CKernelOptions::GetWidth() const>
    8110:	e2855004 	add	r5, r5, #4
    8114:	e1a06000 	mov	r6, r0
    8118:	e1a00007 	mov	r0, r7
    811c:	eb000943 	bl	a630 <CKernelOptions::GetHeight() const>
    8120:	e3a03000 	mov	r3, #0
    8124:	e1a01006 	mov	r1, r6
    8128:	e1a02000 	mov	r2, r0
    812c:	e1a00005 	mov	r0, r5
    8130:	e2848d66 	add	r8, r4, #6528	; 0x1980
    8134:	eb000b38 	bl	ae1c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8138:	e3a02000 	mov	r2, #0
    813c:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    8140:	e1a01002 	mov	r1, r2
    8144:	e2800004 	add	r0, r0, #4
    8148:	e2846d6f 	add	r6, r4, #7104	; 0x1bc0
    814c:	eb001259 	bl	cab8 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>
    8150:	e2880014 	add	r0, r8, #20
    8154:	e2888018 	add	r8, r8, #24
    8158:	eb0017e9 	bl	e104 <CExceptionHandler::CExceptionHandler()>
    815c:	e2866018 	add	r6, r6, #24
    8160:	e1a00008 	mov	r0, r8
    8164:	eb0018bf 	bl	e468 <CInterruptSystem::CInterruptSystem()>
    8168:	e1a01008 	mov	r1, r8
    816c:	e1a00006 	mov	r0, r6
    8170:	eb000616 	bl	99d0 <CTimer::CTimer(CInterruptSystem*)>
    8174:	e1a00007 	mov	r0, r7
    8178:	eb000931 	bl	a644 <CKernelOptions::GetLogLevel() const>
    817c:	e1a02006 	mov	r2, r6
    8180:	e1a01000 	mov	r1, r0
    8184:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8188:	eb0010c8 	bl	c4b0 <CLogger::CLogger(unsigned int, CTimer*)>
    818c:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    8190:	e1a02004 	mov	r2, r4
    8194:	e1a01005 	mov	r1, r5
    8198:	e280001c 	add	r0, r0, #28
    819c:	eb000060 	bl	8324 <CMandelbrotCalculator::CMandelbrotCalculator(CScreenDevice*, CMemorySystem*)>
    81a0:	e1a00009 	mov	r0, r9
    81a4:	e3a03f7d 	mov	r3, #500	; 0x1f4
    81a8:	e3a020c8 	mov	r2, #200	; 0xc8
    81ac:	e3a01005 	mov	r1, #5
    81b0:	eb000129 	bl	865c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    81b4:	e1a00004 	mov	r0, r4
    81b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000081bc <CKernel::Initialize()>:
    81bc:	e92d4070 	push	{r4, r5, r6, lr}
    81c0:	e2804e86 	add	r4, r0, #2144	; 0x860
    81c4:	e2844004 	add	r4, r4, #4
    81c8:	e1a05000 	mov	r5, r0
    81cc:	e1a00004 	mov	r0, r4
    81d0:	eb000ebf 	bl	bcd4 <CScreenDevice::Initialize()>
    81d4:	e3500000 	cmp	r0, #0
    81d8:	1a000001 	bne	81e4 <CKernel::Initialize()+0x28>
    81dc:	e3a00000 	mov	r0, #0
    81e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    81e4:	e2850d23 	add	r0, r5, #2240	; 0x8c0
    81e8:	e3a01cc2 	mov	r1, #49664	; 0xc200
    81ec:	e3401001 	movt	r1, #1
    81f0:	e2800004 	add	r0, r0, #4
    81f4:	eb00125e 	bl	cb74 <CSerialDevice::Initialize(unsigned int)>
    81f8:	e3500000 	cmp	r0, #0
    81fc:	0afffff6 	beq	81dc <CKernel::Initialize()+0x20>
    8200:	e285001c 	add	r0, r5, #28
    8204:	eb00090b 	bl	a638 <CKernelOptions::GetLogDevice() const>
    8208:	e1a01000 	mov	r1, r0
    820c:	e2850e85 	add	r0, r5, #2128	; 0x850
    8210:	e3a02000 	mov	r2, #0
    8214:	e280000c 	add	r0, r0, #12
    8218:	eb001052 	bl	c368 <CDeviceNameService::GetDevice(char const*, int)>
    821c:	e3500000 	cmp	r0, #0
    8220:	11a01000 	movne	r1, r0
    8224:	01a01004 	moveq	r1, r4
    8228:	e2850b07 	add	r0, r5, #7168	; 0x1c00
    822c:	eb0011a6 	bl	c8cc <CLogger::Initialize(CDevice*)>
    8230:	e3500000 	cmp	r0, #0
    8234:	0affffe8 	beq	81dc <CKernel::Initialize()+0x20>
    8238:	e2850d66 	add	r0, r5, #6528	; 0x1980
    823c:	e2800018 	add	r0, r0, #24
    8240:	eb00189b 	bl	e4b4 <CInterruptSystem::Initialize()>
    8244:	e3500000 	cmp	r0, #0
    8248:	0affffe3 	beq	81dc <CKernel::Initialize()+0x20>
    824c:	e2850d6f 	add	r0, r5, #7104	; 0x1bc0
    8250:	e2800018 	add	r0, r0, #24
    8254:	eb00084a 	bl	a384 <CTimer::Initialize()>
    8258:	e2900000 	adds	r0, r0, #0
    825c:	13a00001 	movne	r0, #1
    8260:	e8bd8070 	pop	{r4, r5, r6, pc}

00008264 <CKernel::Run()>:
    8264:	e92d4010 	push	{r4, lr}
    8268:	e3a02003 	mov	r2, #3
    826c:	e1a04000 	mov	r4, r0
    8270:	e3003980 	movw	r3, #2432	; 0x980
    8274:	e3403001 	movt	r3, #1
    8278:	e2800b07 	add	r0, r0, #7168	; 0x1c00
    827c:	e3001978 	movw	r1, #2424	; 0x978
    8280:	e3401001 	movt	r1, #1
    8284:	eb001184 	bl	c89c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8288:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    828c:	e280001c 	add	r0, r0, #28
    8290:	e3a01000 	mov	r1, #0
    8294:	eb000076 	bl	8474 <CMandelbrotCalculator::Run(unsigned int)>
    8298:	e3a00001 	mov	r0, #1
    829c:	e8bd8010 	pop	{r4, pc}

000082a0 <CKernel::~CKernel()>:
    82a0:	e92d4010 	push	{r4, lr}
    82a4:	e1a04000 	mov	r4, r0
    82a8:	e2800b07 	add	r0, r0, #7168	; 0x1c00
    82ac:	e280001c 	add	r0, r0, #28
    82b0:	eb00001d 	bl	832c <CMandelbrotCalculator::~CMandelbrotCalculator()>
    82b4:	e2840b07 	add	r0, r4, #7168	; 0x1c00
    82b8:	eb00108f 	bl	c4fc <CLogger::~CLogger()>
    82bc:	e2840d6f 	add	r0, r4, #7104	; 0x1bc0
    82c0:	e2800018 	add	r0, r0, #24
    82c4:	eb0005e1 	bl	9a50 <CTimer::~CTimer()>
    82c8:	e2840d66 	add	r0, r4, #6528	; 0x1980
    82cc:	e2800018 	add	r0, r0, #24
    82d0:	eb001872 	bl	e4a0 <CInterruptSystem::~CInterruptSystem()>
    82d4:	e2840d66 	add	r0, r4, #6528	; 0x1980
    82d8:	e2800014 	add	r0, r0, #20
    82dc:	eb0017ac 	bl	e194 <CExceptionHandler::~CExceptionHandler()>
    82e0:	e2840d23 	add	r0, r4, #2240	; 0x8c0
    82e4:	e2800004 	add	r0, r0, #4
    82e8:	eb0013ae 	bl	d1a8 <CSerialDevice::~CSerialDevice()>
    82ec:	e2840e86 	add	r0, r4, #2144	; 0x860
    82f0:	e2800004 	add	r0, r0, #4
    82f4:	eb000a7b 	bl	ace8 <CScreenDevice::~CScreenDevice()>
    82f8:	e2840e85 	add	r0, r4, #2128	; 0x850
    82fc:	e280000c 	add	r0, r0, #12
    8300:	eb000fce 	bl	c240 <CDeviceNameService::~CDeviceNameService()>
    8304:	e284001c 	add	r0, r4, #28
    8308:	eb0008c1 	bl	a614 <CKernelOptions::~CKernelOptions()>
    830c:	e2840010 	add	r0, r4, #16
    8310:	eb000065 	bl	84ac <CActLED::~CActLED()>
    8314:	e1a00004 	mov	r0, r4
    8318:	eb000484 	bl	9530 <CMemorySystem::~CMemorySystem()>
    831c:	e1a00004 	mov	r0, r4
    8320:	e8bd8010 	pop	{r4, pc}

00008324 <CMandelbrotCalculator::CMandelbrotCalculator(CScreenDevice*, CMemorySystem*)>:
    8324:	e5801000 	str	r1, [r0]
    8328:	e12fff1e 	bx	lr

0000832c <CMandelbrotCalculator::~CMandelbrotCalculator()>:
    832c:	e12fff1e 	bx	lr

00008330 <CMandelbrotCalculator::Calculate(float, float, float, float, unsigned int, unsigned int, unsigned int)>:
    8330:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    8334:	e1a07000 	mov	r7, r0
    8338:	e5900000 	ldr	r0, [r0]
    833c:	ed2d8b06 	vpush	{d8-d10}
    8340:	e24dd00c 	sub	sp, sp, #12
    8344:	e0839002 	add	r9, r3, r2
    8348:	eef08a41 	vmov.f32	s17, s2
    834c:	eeb08a61 	vmov.f32	s16, s3
    8350:	e1a08002 	mov	r8, r2
    8354:	e58d3004 	str	r3, [sp, #4]
    8358:	ee70aac0 	vsub.f32	s21, s1, s0
    835c:	eef09a40 	vmov.f32	s19, s0
    8360:	e1a04001 	mov	r4, r1
    8364:	eb000aca 	bl	ae94 <CScreenDevice::GetWidth() const>
    8368:	e59d3004 	ldr	r3, [sp, #4]
    836c:	ee073a90 	vmov	s15, r3
    8370:	ee388a68 	vsub.f32	s16, s16, s17
    8374:	ee070a10 	vmov	s14, r0
    8378:	e1580009 	cmp	r8, r9
    837c:	eef87a67 	vcvt.f32.u32	s15, s15
    8380:	eeb87a47 	vcvt.f32.u32	s14, s14
    8384:	ee88aa27 	vdiv.f32	s20, s16, s15
    8388:	ee8a9a87 	vdiv.f32	s18, s21, s14
    838c:	2a000032 	bcs	845c <CMandelbrotCalculator::Calculate(float, float, float, float, unsigned int, unsigned int, unsigned int)+0x12c>
    8390:	e3a06000 	mov	r6, #0
    8394:	e3a05000 	mov	r5, #0
    8398:	e5970000 	ldr	r0, [r7]
    839c:	eb000abc 	bl	ae94 <CScreenDevice::GetWidth() const>
    83a0:	eeb08a69 	vmov.f32	s16, s19
    83a4:	e1550000 	cmp	r5, r0
    83a8:	2a000027 	bcs	844c <CMandelbrotCalculator::Calculate(float, float, float, float, unsigned int, unsigned int, unsigned int)+0x11c>
    83ac:	e3540000 	cmp	r4, #0
    83b0:	0a00002c 	beq	8468 <CMandelbrotCalculator::Calculate(float, float, float, float, unsigned int, unsigned int, unsigned int)+0x138>
    83b4:	ee066a10 	vmov	s12, r6
    83b8:	eddf6a2c 	vldr	s13, [pc, #176]	; 8470 <CMandelbrotCalculator::Calculate(float, float, float, float, unsigned int, unsigned int, unsigned int)+0x140>
    83bc:	ee076a10 	vmov	s14, r6
    83c0:	e3a02000 	mov	r2, #0
    83c4:	ee076a90 	vmov	s15, r6
    83c8:	eeb15a00 	vmov.f32	s10, #16	; 0x40800000  4.0
    83cc:	ee777aa7 	vadd.f32	s15, s15, s15
    83d0:	e2822001 	add	r2, r2, #1
    83d4:	ee377a46 	vsub.f32	s14, s14, s12
    83d8:	eeb06a68 	vmov.f32	s12, s17
    83dc:	eea76aa6 	vfma.f32	s12, s15, s13
    83e0:	ee777a08 	vadd.f32	s15, s14, s16
    83e4:	ee277aa7 	vmul.f32	s14, s15, s15
    83e8:	eef06a46 	vmov.f32	s13, s12
    83ec:	ee266a06 	vmul.f32	s12, s12, s12
    83f0:	ee775a06 	vadd.f32	s11, s14, s12
    83f4:	eef45ac5 	vcmpe.f32	s11, s10
    83f8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    83fc:	53a03001 	movpl	r3, #1
    8400:	43a03000 	movmi	r3, #0
    8404:	e1540002 	cmp	r4, r2
    8408:	93833001 	orrls	r3, r3, #1
    840c:	e3530000 	cmp	r3, #0
    8410:	0affffed 	beq	83cc <CMandelbrotCalculator::Calculate(float, float, float, float, unsigned int, unsigned int, unsigned int)+0x9c>
    8414:	e0623802 	rsb	r3, r2, r2, lsl #16
    8418:	e733f413 	udiv	r3, r3, r4
    841c:	e1a01005 	mov	r1, r5
    8420:	e1a02008 	mov	r2, r8
    8424:	e5970000 	ldr	r0, [r7]
    8428:	e2855001 	add	r5, r5, #1
    842c:	e2833001 	add	r3, r3, #1
    8430:	e6ff3073 	uxth	r3, r3
    8434:	eb000e87 	bl	be58 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>
    8438:	e5970000 	ldr	r0, [r7]
    843c:	eb000a94 	bl	ae94 <CScreenDevice::GetWidth() const>
    8440:	ee388a09 	vadd.f32	s16, s16, s18
    8444:	e1550000 	cmp	r5, r0
    8448:	3affffd7 	bcc	83ac <CMandelbrotCalculator::Calculate(float, float, float, float, unsigned int, unsigned int, unsigned int)+0x7c>
    844c:	e2888001 	add	r8, r8, #1
    8450:	ee788a8a 	vadd.f32	s17, s17, s20
    8454:	e1580009 	cmp	r8, r9
    8458:	1affffcd 	bne	8394 <CMandelbrotCalculator::Calculate(float, float, float, float, unsigned int, unsigned int, unsigned int)+0x64>
    845c:	e28dd00c 	add	sp, sp, #12
    8460:	ecbd8b06 	vpop	{d8-d10}
    8464:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    8468:	e1a03004 	mov	r3, r4
    846c:	eaffffe9 	b	8418 <CMandelbrotCalculator::Calculate(float, float, float, float, unsigned int, unsigned int, unsigned int)+0xe8>
    8470:	00000000 	.word	0x00000000

00008474 <CMandelbrotCalculator::Run(unsigned int)>:
    8474:	e92d4010 	push	{r4, lr}
    8478:	e1a04000 	mov	r4, r0
    847c:	e5900000 	ldr	r0, [r0]
    8480:	eb000a85 	bl	ae9c <CScreenDevice::GetHeight() const>
    8484:	eef71a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    8488:	e1a03000 	mov	r3, r0
    848c:	e3a02000 	mov	r2, #0
    8490:	e1a00004 	mov	r0, r4
    8494:	e3011388 	movw	r1, #5000	; 0x1388
    8498:	eebf1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
    849c:	eeb80a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
    84a0:	eef00a61 	vmov.f32	s1, s3
    84a4:	e8bd4010 	pop	{r4, lr}
    84a8:	eaffffa0 	b	8330 <CMandelbrotCalculator::Calculate(float, float, float, float, unsigned int, unsigned int, unsigned int)>

000084ac <CActLED::~CActLED()>:
    84ac:	e3023934 	movw	r3, #10548	; 0x2934
    84b0:	e3403001 	movt	r3, #1
    84b4:	e3a02000 	mov	r2, #0
    84b8:	e5832000 	str	r2, [r3]
    84bc:	e12fff1e 	bx	lr

000084c0 <CActLED::On()>:
    84c0:	e5903000 	ldr	r3, [r0]
    84c4:	e3530000 	cmp	r3, #0
    84c8:	0a000004 	beq	84e0 <CActLED::On()+0x20>
    84cc:	e5901008 	ldr	r1, [r0, #8]
    84d0:	e1a00003 	mov	r0, r3
    84d4:	e2911000 	adds	r1, r1, #0
    84d8:	13a01001 	movne	r1, #1
    84dc:	ea0000f0 	b	88a4 <CGPIOPin::Write(unsigned int)>
    84e0:	e5903004 	ldr	r3, [r0, #4]
    84e4:	e3530000 	cmp	r3, #0
    84e8:	012fff1e 	bxeq	lr
    84ec:	e5901008 	ldr	r1, [r0, #8]
    84f0:	e1a00003 	mov	r0, r3
    84f4:	e2911000 	adds	r1, r1, #0
    84f8:	13a01001 	movne	r1, #1
    84fc:	ea001a7b 	b	eef0 <CVirtualGPIOPin::Write(unsigned int)>

00008500 <CActLED::Off()>:
    8500:	e5903000 	ldr	r3, [r0]
    8504:	e3530000 	cmp	r3, #0
    8508:	0a000004 	beq	8520 <CActLED::Off()+0x20>
    850c:	e5901008 	ldr	r1, [r0, #8]
    8510:	e1a00003 	mov	r0, r3
    8514:	e16f1f11 	clz	r1, r1
    8518:	e1a012a1 	lsr	r1, r1, #5
    851c:	ea0000e0 	b	88a4 <CGPIOPin::Write(unsigned int)>
    8520:	e5903004 	ldr	r3, [r0, #4]
    8524:	e3530000 	cmp	r3, #0
    8528:	012fff1e 	bxeq	lr
    852c:	e5901008 	ldr	r1, [r0, #8]
    8530:	e1a00003 	mov	r0, r3
    8534:	e16f1f11 	clz	r1, r1
    8538:	e1a012a1 	lsr	r1, r1, #5
    853c:	ea001a6b 	b	eef0 <CVirtualGPIOPin::Write(unsigned int)>

00008540 <CActLED::CActLED()>:
    8540:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8544:	e3023934 	movw	r3, #10548	; 0x2934
    8548:	e24dd024 	sub	sp, sp, #36	; 0x24
    854c:	e1a04000 	mov	r4, r0
    8550:	e3403001 	movt	r3, #1
    8554:	e3a05000 	mov	r5, #0
    8558:	e28d0008 	add	r0, sp, #8
    855c:	e5845000 	str	r5, [r4]
    8560:	e5845004 	str	r5, [r4, #4]
    8564:	e5834000 	str	r4, [r3]
    8568:	eb000052 	bl	86b8 <CBcmPropertyTags::CBcmPropertyTags()>
    856c:	e3a03010 	mov	r3, #16
    8570:	e58d5000 	str	r5, [sp]
    8574:	e28d0008 	add	r0, sp, #8
    8578:	e3a01002 	mov	r1, #2
    857c:	e08d2003 	add	r2, sp, r3
    8580:	e3401001 	movt	r1, #1
    8584:	eb000093 	bl	87d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8588:	e1500005 	cmp	r0, r5
    858c:	0a000011 	beq	85d8 <CActLED::CActLED()+0x98>
    8590:	e59d301c 	ldr	r3, [sp, #28]
    8594:	e3130502 	tst	r3, #8388608	; 0x800000
    8598:	1a000013 	bne	85ec <CActLED::CActLED()+0xac>
    859c:	e6ff3073 	uxth	r3, r3
    85a0:	e353000f 	cmp	r3, #15
    85a4:	83a06001 	movhi	r6, #1
    85a8:	9a000020 	bls	8630 <CActLED::CActLED()+0xf0>
    85ac:	e3a00028 	mov	r0, #40	; 0x28
    85b0:	eb00047c 	bl	97a8 <operator new(unsigned int)>
    85b4:	e3a03000 	mov	r3, #0
    85b8:	e3a02001 	mov	r2, #1
    85bc:	e3a0102f 	mov	r1, #47	; 0x2f
    85c0:	e1a05000 	mov	r5, r0
    85c4:	eb00034c 	bl	92fc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    85c8:	e5845000 	str	r5, [r4]
    85cc:	e5846008 	str	r6, [r4, #8]
    85d0:	e1a00004 	mov	r0, r4
    85d4:	ebffffc9 	bl	8500 <CActLED::Off()>
    85d8:	e28d0008 	add	r0, sp, #8
    85dc:	eb00003b 	bl	86d0 <CBcmPropertyTags::~CBcmPropertyTags()>
    85e0:	e1a00004 	mov	r0, r4
    85e4:	e28dd024 	add	sp, sp, #36	; 0x24
    85e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    85ec:	e7e73253 	ubfx	r3, r3, #4, #8
    85f0:	e3530001 	cmp	r3, #1
    85f4:	9a00000d 	bls	8630 <CActLED::CActLED()+0xf0>
    85f8:	e353000c 	cmp	r3, #12
    85fc:	13530009 	cmpne	r3, #9
    8600:	03a06001 	moveq	r6, #1
    8604:	13a06000 	movne	r6, #0
    8608:	e3530008 	cmp	r3, #8
    860c:	e2266001 	eor	r6, r6, #1
    8610:	1affffe5 	bne	85ac <CActLED::CActLED()+0x6c>
    8614:	e3a00010 	mov	r0, #16
    8618:	eb000462 	bl	97a8 <operator new(unsigned int)>
    861c:	e1a01005 	mov	r1, r5
    8620:	e1a07000 	mov	r7, r0
    8624:	eb0019f5 	bl	ee00 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>
    8628:	e5847004 	str	r7, [r4, #4]
    862c:	eaffffe6 	b	85cc <CActLED::CActLED()+0x8c>
    8630:	e3a00028 	mov	r0, #40	; 0x28
    8634:	eb00045b 	bl	97a8 <operator new(unsigned int)>
    8638:	e3a03000 	mov	r3, #0
    863c:	e3a02001 	mov	r2, #1
    8640:	e3a01010 	mov	r1, #16
    8644:	e1a05000 	mov	r5, r0
    8648:	eb00032b 	bl	92fc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    864c:	e3a03000 	mov	r3, #0
    8650:	e5845000 	str	r5, [r4]
    8654:	e5843008 	str	r3, [r4, #8]
    8658:	eaffffdc 	b	85d0 <CActLED::CActLED()+0x90>

0000865c <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    865c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8660:	e2516000 	subs	r6, r1, #0
    8664:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8668:	e1a08003 	mov	r8, r3
    866c:	e1a07002 	mov	r7, r2
    8670:	e1a05000 	mov	r5, r0
    8674:	e3a04001 	mov	r4, #1
    8678:	e1a00005 	mov	r0, r5
    867c:	e2844001 	add	r4, r4, #1
    8680:	ebffff8e 	bl	84c0 <CActLED::On()>
    8684:	e1a00007 	mov	r0, r7
    8688:	eb00075c 	bl	a400 <CTimer::SimpleMsDelay(unsigned int)>
    868c:	e1a00005 	mov	r0, r5
    8690:	ebffff9a 	bl	8500 <CActLED::Off()>
    8694:	e1a00008 	mov	r0, r8
    8698:	eb000758 	bl	a400 <CTimer::SimpleMsDelay(unsigned int)>
    869c:	e1560004 	cmp	r6, r4
    86a0:	2afffff4 	bcs	8678 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    86a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000086a8 <CActLED::Get()>:
    86a8:	e3023934 	movw	r3, #10548	; 0x2934
    86ac:	e3403001 	movt	r3, #1
    86b0:	e5930000 	ldr	r0, [r3]
    86b4:	e12fff1e 	bx	lr

000086b8 <CBcmPropertyTags::CBcmPropertyTags()>:
    86b8:	e92d4010 	push	{r4, lr}
    86bc:	e3a01008 	mov	r1, #8
    86c0:	e1a04000 	mov	r4, r0
    86c4:	eb001de1 	bl	fe50 <CBcmMailBox::CBcmMailBox(unsigned int)>
    86c8:	e1a00004 	mov	r0, r4
    86cc:	e8bd8010 	pop	{r4, pc}

000086d0 <CBcmPropertyTags::~CBcmPropertyTags()>:
    86d0:	e92d4010 	push	{r4, lr}
    86d4:	e1a04000 	mov	r4, r0
    86d8:	eb001ddf 	bl	fe5c <CBcmMailBox::~CBcmMailBox()>
    86dc:	e1a00004 	mov	r0, r4
    86e0:	e8bd8010 	pop	{r4, pc}

000086e4 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    86e4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    86e8:	e2519000 	subs	r9, r1, #0
    86ec:	e1a0a000 	mov	sl, r0
    86f0:	e1a04002 	mov	r4, r2
    86f4:	0a000030 	beq	87bc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
    86f8:	e354000f 	cmp	r4, #15
    86fc:	9a000027 	bls	87a0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
    8700:	e284800c 	add	r8, r4, #12
    8704:	e3180003 	tst	r8, #3
    8708:	1a00001d 	bne	8784 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    870c:	e3a05008 	mov	r5, #8
    8710:	e3405040 	movt	r5, #64	; 0x40
    8714:	e3a06501 	mov	r6, #4194304	; 0x400000
    8718:	e3a07000 	mov	r7, #0
    871c:	e1a00005 	mov	r0, r5
    8720:	e5868000 	str	r8, [r6]
    8724:	e5867004 	str	r7, [r6, #4]
    8728:	e1a02004 	mov	r2, r4
    872c:	e1a01009 	mov	r1, r9
    8730:	eb00078a 	bl	a560 <memcpy>
    8734:	e7857004 	str	r7, [r5, r4]
    8738:	f57ff04f 	dsb	sy
    873c:	e1a01007 	mov	r1, r7
    8740:	e1a0000a 	mov	r0, sl
    8744:	e34c1040 	movt	r1, #49216	; 0xc040
    8748:	eb001df3 	bl	ff1c <CBcmMailBox::WriteRead(unsigned int)>
    874c:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    8750:	0a000001 	beq	875c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    8754:	e3a00000 	mov	r0, #0
    8758:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    875c:	f57ff05f 	dmb	sy
    8760:	e5963004 	ldr	r3, [r6, #4]
    8764:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    8768:	1afffff9 	bne	8754 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    876c:	e1a02004 	mov	r2, r4
    8770:	e1a01005 	mov	r1, r5
    8774:	e1a00009 	mov	r0, r9
    8778:	eb000778 	bl	a560 <memcpy>
    877c:	e3a00001 	mov	r0, #1
    8780:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8784:	e30019a4 	movw	r1, #2468	; 0x9a4
    8788:	e30009f0 	movw	r0, #2544	; 0x9f0
    878c:	e3401001 	movt	r1, #1
    8790:	e3400001 	movt	r0, #1
    8794:	e3a02051 	mov	r2, #81	; 0x51
    8798:	eb000dde 	bl	bf18 <assertion_failed>
    879c:	eaffffda 	b	870c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    87a0:	e30019a4 	movw	r1, #2468	; 0x9a4
    87a4:	e30009c4 	movw	r0, #2500	; 0x9c4
    87a8:	e3401001 	movt	r1, #1
    87ac:	e3400001 	movt	r0, #1
    87b0:	e3a0204f 	mov	r2, #79	; 0x4f
    87b4:	eb000dd7 	bl	bf18 <assertion_failed>
    87b8:	eaffffd0 	b	8700 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    87bc:	e30019a4 	movw	r1, #2468	; 0x9a4
    87c0:	e30009b8 	movw	r0, #2488	; 0x9b8
    87c4:	e3401001 	movt	r1, #1
    87c8:	e3400001 	movt	r0, #1
    87cc:	e3a0204e 	mov	r2, #78	; 0x4e
    87d0:	eb000dd0 	bl	bf18 <assertion_failed>
    87d4:	eaffffc7 	b	86f8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

000087d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    87d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    87dc:	e2524000 	subs	r4, r2, #0
    87e0:	e1a07000 	mov	r7, r0
    87e4:	e1a08001 	mov	r8, r1
    87e8:	e1a05003 	mov	r5, r3
    87ec:	e59d6018 	ldr	r6, [sp, #24]
    87f0:	0a00001d 	beq	886c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
    87f4:	e355000f 	cmp	r5, #15
    87f8:	9a000014 	bls	8850 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    87fc:	e245300c 	sub	r3, r5, #12
    8800:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    8804:	e5848000 	str	r8, [r4]
    8808:	e1a00007 	mov	r0, r7
    880c:	e5846008 	str	r6, [r4, #8]
    8810:	e1a02005 	mov	r2, r5
    8814:	e5843004 	str	r3, [r4, #4]
    8818:	e1a01004 	mov	r1, r4
    881c:	ebffffb0 	bl	86e4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
    8820:	e3500000 	cmp	r0, #0
    8824:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8828:	e5940008 	ldr	r0, [r4, #8]
    882c:	e3500000 	cmp	r0, #0
    8830:	ba000001 	blt	883c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    8834:	e3a00000 	mov	r0, #0
    8838:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    883c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    8840:	e5840008 	str	r0, [r4, #8]
    8844:	e2900000 	adds	r0, r0, #0
    8848:	13a00001 	movne	r0, #1
    884c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8850:	e30019a4 	movw	r1, #2468	; 0x9a4
    8854:	e3000a14 	movw	r0, #2580	; 0xa14
    8858:	e3401001 	movt	r1, #1
    885c:	e3400001 	movt	r0, #1
    8860:	e3a02032 	mov	r2, #50	; 0x32
    8864:	eb000dab 	bl	bf18 <assertion_failed>
    8868:	eaffffe3 	b	87fc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    886c:	e30019a4 	movw	r1, #2468	; 0x9a4
    8870:	e3000a08 	movw	r0, #2568	; 0xa08
    8874:	e3401001 	movt	r1, #1
    8878:	e3400001 	movt	r0, #1
    887c:	e3a02031 	mov	r2, #49	; 0x31
    8880:	eb000da4 	bl	bf18 <assertion_failed>
    8884:	eaffffda 	b	87f4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

00008888 <CGPIOPin::~CGPIOPin()>:
    8888:	e12fff1e 	bx	lr

0000888c <CGPIOPin::~CGPIOPin()>:
    888c:	e92d4010 	push	{r4, lr}
    8890:	e3a01028 	mov	r1, #40	; 0x28
    8894:	e1a04000 	mov	r4, r0
    8898:	eb0003c6 	bl	97b8 <operator delete(void*, unsigned int)>
    889c:	e1a00004 	mov	r0, r4
    88a0:	e8bd8010 	pop	{r4, pc}

000088a4 <CGPIOPin::Write(unsigned int)>:
    88a4:	e5d03010 	ldrb	r3, [r0, #16]
    88a8:	e92d4070 	push	{r4, r5, r6, lr}
    88ac:	e3530003 	cmp	r3, #3
    88b0:	e1a04000 	mov	r4, r0
    88b4:	e1a05001 	mov	r5, r1
    88b8:	ca000016 	bgt	8918 <CGPIOPin::Write(unsigned int)+0x74>
    88bc:	e3550001 	cmp	r5, #1
    88c0:	9a00000c 	bls	88f8 <CGPIOPin::Write(unsigned int)+0x54>
    88c4:	e3001a64 	movw	r1, #2660	; 0xa64
    88c8:	e3000a94 	movw	r0, #2708	; 0xa94
    88cc:	e3401001 	movt	r1, #1
    88d0:	e3400001 	movt	r0, #1
    88d4:	e3a02084 	mov	r2, #132	; 0x84
    88d8:	eb000d8e 	bl	bf18 <assertion_failed>
    88dc:	e3a0301c 	mov	r3, #28
    88e0:	e3433f20 	movt	r3, #16160	; 0x3f20
    88e4:	e5845014 	str	r5, [r4, #20]
    88e8:	e594100c 	ldr	r1, [r4, #12]
    88ec:	e5942008 	ldr	r2, [r4, #8]
    88f0:	e7831002 	str	r1, [r3, r2]
    88f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    88f8:	e3a02028 	mov	r2, #40	; 0x28
    88fc:	e3550000 	cmp	r5, #0
    8900:	e3432f20 	movt	r2, #16160	; 0x3f20
    8904:	e3a0301c 	mov	r3, #28
    8908:	e5845014 	str	r5, [r4, #20]
    890c:	e3433f20 	movt	r3, #16160	; 0x3f20
    8910:	01a03002 	moveq	r3, r2
    8914:	eafffff3 	b	88e8 <CGPIOPin::Write(unsigned int)+0x44>
    8918:	e3001a64 	movw	r1, #2660	; 0xa64
    891c:	e3000a70 	movw	r0, #2672	; 0xa70
    8920:	e3401001 	movt	r1, #1
    8924:	e3400001 	movt	r0, #1
    8928:	e3a02080 	mov	r2, #128	; 0x80
    892c:	eb000d79 	bl	bf18 <assertion_failed>
    8930:	eaffffe1 	b	88bc <CGPIOPin::Write(unsigned int)+0x18>

00008934 <CGPIOPin::Read() const>:
    8934:	e5d03010 	ldrb	r3, [r0, #16]
    8938:	e92d4010 	push	{r4, lr}
    893c:	e2432002 	sub	r2, r3, #2
    8940:	e3530000 	cmp	r3, #0
    8944:	13520001 	cmpne	r2, #1
    8948:	e1a04000 	mov	r4, r0
    894c:	9a000005 	bls	8968 <CGPIOPin::Read() const+0x34>
    8950:	e3001a64 	movw	r1, #2660	; 0xa64
    8954:	e3000ab4 	movw	r0, #2740	; 0xab4
    8958:	e3401001 	movt	r1, #1
    895c:	e3400001 	movt	r0, #1
    8960:	e3a02092 	mov	r2, #146	; 0x92
    8964:	eb000d6b 	bl	bf18 <assertion_failed>
    8968:	e5941008 	ldr	r1, [r4, #8]
    896c:	e3a03034 	mov	r3, #52	; 0x34
    8970:	e3433f20 	movt	r3, #16160	; 0x3f20
    8974:	e594200c 	ldr	r2, [r4, #12]
    8978:	e7913003 	ldr	r3, [r1, r3]
    897c:	e1130002 	tst	r3, r2
    8980:	13a00001 	movne	r0, #1
    8984:	03a00000 	moveq	r0, #0
    8988:	e8bd8010 	pop	{r4, pc}

0000898c <CGPIOPin::Invert()>:
    898c:	e5d03010 	ldrb	r3, [r0, #16]
    8990:	e92d4010 	push	{r4, lr}
    8994:	e3530001 	cmp	r3, #1
    8998:	e1a04000 	mov	r4, r0
    899c:	0a000005 	beq	89b8 <CGPIOPin::Invert()+0x2c>
    89a0:	e3001a64 	movw	r1, #2660	; 0xa64
    89a4:	e3000b10 	movw	r0, #2832	; 0xb10
    89a8:	e3401001 	movt	r1, #1
    89ac:	e3400001 	movt	r0, #1
    89b0:	e3a0209f 	mov	r2, #159	; 0x9f
    89b4:	eb000d57 	bl	bf18 <assertion_failed>
    89b8:	e5941014 	ldr	r1, [r4, #20]
    89bc:	e1a00004 	mov	r0, r4
    89c0:	e8bd4010 	pop	{r4, lr}
    89c4:	e2211001 	eor	r1, r1, #1
    89c8:	eaffffb5 	b	88a4 <CGPIOPin::Write(unsigned int)>

000089cc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    89cc:	e5d03010 	ldrb	r3, [r0, #16]
    89d0:	e92d4070 	push	{r4, r5, r6, lr}
    89d4:	e1a06002 	mov	r6, r2
    89d8:	e2432002 	sub	r2, r3, #2
    89dc:	e1a04000 	mov	r4, r0
    89e0:	e3530000 	cmp	r3, #0
    89e4:	13520001 	cmpne	r2, #1
    89e8:	e1a05001 	mov	r5, r1
    89ec:	9a000005 	bls	8a08 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
    89f0:	e3001a64 	movw	r1, #2660	; 0xa64
    89f4:	e3000ab4 	movw	r0, #2740	; 0xab4
    89f8:	e3401001 	movt	r1, #1
    89fc:	e3400001 	movt	r0, #1
    8a00:	e3a020a8 	mov	r2, #168	; 0xa8
    8a04:	eb000d43 	bl	bf18 <assertion_failed>
    8a08:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8a0c:	e3530006 	cmp	r3, #6
    8a10:	0a000005 	beq	8a2c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
    8a14:	e3001a64 	movw	r1, #2660	; 0xa64
    8a18:	e3000b2c 	movw	r0, #2860	; 0xb2c
    8a1c:	e3401001 	movt	r1, #1
    8a20:	e3400001 	movt	r0, #1
    8a24:	e3a020aa 	mov	r2, #170	; 0xaa
    8a28:	eb000d3a 	bl	bf18 <assertion_failed>
    8a2c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8a30:	e3530006 	cmp	r3, #6
    8a34:	0a000005 	beq	8a50 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x84>
    8a38:	e3001a64 	movw	r1, #2660	; 0xa64
    8a3c:	e3000b50 	movw	r0, #2896	; 0xb50
    8a40:	e3401001 	movt	r1, #1
    8a44:	e3400001 	movt	r0, #1
    8a48:	e3a020ab 	mov	r2, #171	; 0xab
    8a4c:	eb000d31 	bl	bf18 <assertion_failed>
    8a50:	e3550000 	cmp	r5, #0
    8a54:	0a00001a 	beq	8ac4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf8>
    8a58:	e594301c 	ldr	r3, [r4, #28]
    8a5c:	e3530000 	cmp	r3, #0
    8a60:	0a000005 	beq	8a7c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb0>
    8a64:	e3001a64 	movw	r1, #2660	; 0xa64
    8a68:	e3000b78 	movw	r0, #2936	; 0xb78
    8a6c:	e3401001 	movt	r1, #1
    8a70:	e3400001 	movt	r0, #1
    8a74:	e3a020ae 	mov	r2, #174	; 0xae
    8a78:	eb000d26 	bl	bf18 <assertion_failed>
    8a7c:	e5940018 	ldr	r0, [r4, #24]
    8a80:	e584501c 	str	r5, [r4, #28]
    8a84:	e3500000 	cmp	r0, #0
    8a88:	e5846020 	str	r6, [r4, #32]
    8a8c:	0a000002 	beq	8a9c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd0>
    8a90:	e1a01004 	mov	r1, r4
    8a94:	e8bd4070 	pop	{r4, r5, r6, lr}
    8a98:	ea001812 	b	eae8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8a9c:	e3001a64 	movw	r1, #2660	; 0xa64
    8aa0:	e3000b88 	movw	r0, #2952	; 0xb88
    8aa4:	e3401001 	movt	r1, #1
    8aa8:	e3400001 	movt	r0, #1
    8aac:	e3a020b3 	mov	r2, #179	; 0xb3
    8ab0:	eb000d18 	bl	bf18 <assertion_failed>
    8ab4:	e5940018 	ldr	r0, [r4, #24]
    8ab8:	e1a01004 	mov	r1, r4
    8abc:	e8bd4070 	pop	{r4, r5, r6, lr}
    8ac0:	ea001808 	b	eae8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8ac4:	e3001a64 	movw	r1, #2660	; 0xa64
    8ac8:	e30201ec 	movw	r0, #8684	; 0x21ec
    8acc:	e3401001 	movt	r1, #1
    8ad0:	e3400001 	movt	r0, #1
    8ad4:	e3a020ad 	mov	r2, #173	; 0xad
    8ad8:	eb000d0e 	bl	bf18 <assertion_failed>
    8adc:	eaffffdd 	b	8a58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x8c>

00008ae0 <CGPIOPin::DisconnectInterrupt()>:
    8ae0:	e5d03010 	ldrb	r3, [r0, #16]
    8ae4:	e92d4010 	push	{r4, lr}
    8ae8:	e2432002 	sub	r2, r3, #2
    8aec:	e3530000 	cmp	r3, #0
    8af0:	13520001 	cmpne	r2, #1
    8af4:	e1a04000 	mov	r4, r0
    8af8:	9a000005 	bls	8b14 <CGPIOPin::DisconnectInterrupt()+0x34>
    8afc:	e3001a64 	movw	r1, #2660	; 0xa64
    8b00:	e3000ab4 	movw	r0, #2740	; 0xab4
    8b04:	e3401001 	movt	r1, #1
    8b08:	e3400001 	movt	r0, #1
    8b0c:	e3a020bb 	mov	r2, #187	; 0xbb
    8b10:	eb000d00 	bl	bf18 <assertion_failed>
    8b14:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8b18:	e3530006 	cmp	r3, #6
    8b1c:	0a000005 	beq	8b38 <CGPIOPin::DisconnectInterrupt()+0x58>
    8b20:	e3001a64 	movw	r1, #2660	; 0xa64
    8b24:	e3000b2c 	movw	r0, #2860	; 0xb2c
    8b28:	e3401001 	movt	r1, #1
    8b2c:	e3400001 	movt	r0, #1
    8b30:	e3a020bd 	mov	r2, #189	; 0xbd
    8b34:	eb000cf7 	bl	bf18 <assertion_failed>
    8b38:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8b3c:	e3530006 	cmp	r3, #6
    8b40:	0a000005 	beq	8b5c <CGPIOPin::DisconnectInterrupt()+0x7c>
    8b44:	e3001a64 	movw	r1, #2660	; 0xa64
    8b48:	e3000b50 	movw	r0, #2896	; 0xb50
    8b4c:	e3401001 	movt	r1, #1
    8b50:	e3400001 	movt	r0, #1
    8b54:	e3a020be 	mov	r2, #190	; 0xbe
    8b58:	eb000cee 	bl	bf18 <assertion_failed>
    8b5c:	e594301c 	ldr	r3, [r4, #28]
    8b60:	e3530000 	cmp	r3, #0
    8b64:	0a000011 	beq	8bb0 <CGPIOPin::DisconnectInterrupt()+0xd0>
    8b68:	e5940018 	ldr	r0, [r4, #24]
    8b6c:	e3a03000 	mov	r3, #0
    8b70:	e584301c 	str	r3, [r4, #28]
    8b74:	e1500003 	cmp	r0, r3
    8b78:	0a000002 	beq	8b88 <CGPIOPin::DisconnectInterrupt()+0xa8>
    8b7c:	e1a01004 	mov	r1, r4
    8b80:	e8bd4010 	pop	{r4, lr}
    8b84:	ea001803 	b	eb98 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8b88:	e3001a64 	movw	r1, #2660	; 0xa64
    8b8c:	e3000b88 	movw	r0, #2952	; 0xb88
    8b90:	e3401001 	movt	r1, #1
    8b94:	e3400001 	movt	r0, #1
    8b98:	e3a020c3 	mov	r2, #195	; 0xc3
    8b9c:	eb000cdd 	bl	bf18 <assertion_failed>
    8ba0:	e5940018 	ldr	r0, [r4, #24]
    8ba4:	e1a01004 	mov	r1, r4
    8ba8:	e8bd4010 	pop	{r4, lr}
    8bac:	ea0017f9 	b	eb98 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8bb0:	e3001a64 	movw	r1, #2660	; 0xa64
    8bb4:	e3000b98 	movw	r0, #2968	; 0xb98
    8bb8:	e3401001 	movt	r1, #1
    8bbc:	e3400001 	movt	r0, #1
    8bc0:	e3a020c0 	mov	r2, #192	; 0xc0
    8bc4:	eb000cd3 	bl	bf18 <assertion_failed>
    8bc8:	eaffffe6 	b	8b68 <CGPIOPin::DisconnectInterrupt()+0x88>

00008bcc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    8bcc:	e5d03010 	ldrb	r3, [r0, #16]
    8bd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8bd4:	e2432002 	sub	r2, r3, #2
    8bd8:	e3530000 	cmp	r3, #0
    8bdc:	13520001 	cmpne	r2, #1
    8be0:	e1a04000 	mov	r4, r0
    8be4:	e1a08001 	mov	r8, r1
    8be8:	9a000005 	bls	8c04 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x38>
    8bec:	e3001a64 	movw	r1, #2660	; 0xa64
    8bf0:	e3000ab4 	movw	r0, #2740	; 0xab4
    8bf4:	e3401001 	movt	r1, #1
    8bf8:	e3400001 	movt	r0, #1
    8bfc:	e3a020cb 	mov	r2, #203	; 0xcb
    8c00:	eb000cc4 	bl	bf18 <assertion_failed>
    8c04:	e594301c 	ldr	r3, [r4, #28]
    8c08:	e3530000 	cmp	r3, #0
    8c0c:	0a000034 	beq	8ce4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
    8c10:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8c14:	e3530006 	cmp	r3, #6
    8c18:	0a000005 	beq	8c34 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x68>
    8c1c:	e3001a64 	movw	r1, #2660	; 0xa64
    8c20:	e3000b2c 	movw	r0, #2860	; 0xb2c
    8c24:	e3401001 	movt	r1, #1
    8c28:	e3400001 	movt	r0, #1
    8c2c:	e3a020ce 	mov	r2, #206	; 0xce
    8c30:	eb000cb8 	bl	bf18 <assertion_failed>
    8c34:	e3580005 	cmp	r8, #5
    8c38:	ca000019 	bgt	8ca4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd8>
    8c3c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8c40:	e1530008 	cmp	r3, r8
    8c44:	0a00001f 	beq	8cc8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xfc>
    8c48:	e3026938 	movw	r6, #10552	; 0x2938
    8c4c:	e3406001 	movt	r6, #1
    8c50:	e5943008 	ldr	r3, [r4, #8]
    8c54:	e3a0504c 	mov	r5, #76	; 0x4c
    8c58:	e5960000 	ldr	r0, [r6]
    8c5c:	e3435f20 	movt	r5, #16160	; 0x3f20
    8c60:	e3a0700c 	mov	r7, #12
    8c64:	e5c48024 	strb	r8, [r4, #36]	; 0x24
    8c68:	e3500000 	cmp	r0, #0
    8c6c:	e0835005 	add	r5, r3, r5
    8c70:	e0070897 	mul	r7, r7, r8
    8c74:	1a000008 	bne	8c9c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd0>
    8c78:	e594200c 	ldr	r2, [r4, #12]
    8c7c:	e7953007 	ldr	r3, [r5, r7]
    8c80:	e1833002 	orr	r3, r3, r2
    8c84:	e7853007 	str	r3, [r5, r7]
    8c88:	e5963000 	ldr	r3, [r6]
    8c8c:	e3530000 	cmp	r3, #0
    8c90:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8c94:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8c98:	ea0002f6 	b	9878 <LeaveCritical>
    8c9c:	eb0002c7 	bl	97c0 <EnterCritical>
    8ca0:	eafffff4 	b	8c78 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
    8ca4:	e3001a64 	movw	r1, #2660	; 0xa64
    8ca8:	e3000ba8 	movw	r0, #2984	; 0xba8
    8cac:	e3401001 	movt	r1, #1
    8cb0:	e3400001 	movt	r0, #1
    8cb4:	e3a020cf 	mov	r2, #207	; 0xcf
    8cb8:	eb000c96 	bl	bf18 <assertion_failed>
    8cbc:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8cc0:	e1530008 	cmp	r3, r8
    8cc4:	1affffdf 	bne	8c48 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
    8cc8:	e3001a64 	movw	r1, #2660	; 0xa64
    8ccc:	e3000bcc 	movw	r0, #3020	; 0xbcc
    8cd0:	e3401001 	movt	r1, #1
    8cd4:	e3400001 	movt	r0, #1
    8cd8:	e3a020d0 	mov	r2, #208	; 0xd0
    8cdc:	eb000c8d 	bl	bf18 <assertion_failed>
    8ce0:	eaffffd8 	b	8c48 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x7c>
    8ce4:	e3001a64 	movw	r1, #2660	; 0xa64
    8ce8:	e3000b98 	movw	r0, #2968	; 0xb98
    8cec:	e3401001 	movt	r1, #1
    8cf0:	e3400001 	movt	r0, #1
    8cf4:	e3a020cc 	mov	r2, #204	; 0xcc
    8cf8:	eb000c86 	bl	bf18 <assertion_failed>
    8cfc:	eaffffc3 	b	8c10 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x44>

00008d00 <CGPIOPin::DisableInterrupt()>:
    8d00:	e5d03010 	ldrb	r3, [r0, #16]
    8d04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8d08:	e2432002 	sub	r2, r3, #2
    8d0c:	e3530000 	cmp	r3, #0
    8d10:	13520001 	cmpne	r2, #1
    8d14:	e1a04000 	mov	r4, r0
    8d18:	9a000005 	bls	8d34 <CGPIOPin::DisableInterrupt()+0x34>
    8d1c:	e3001a64 	movw	r1, #2660	; 0xa64
    8d20:	e3000ab4 	movw	r0, #2740	; 0xab4
    8d24:	e3401001 	movt	r1, #1
    8d28:	e3400001 	movt	r0, #1
    8d2c:	e3a020e1 	mov	r2, #225	; 0xe1
    8d30:	eb000c78 	bl	bf18 <assertion_failed>
    8d34:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8d38:	e3530005 	cmp	r3, #5
    8d3c:	ca000017 	bgt	8da0 <CGPIOPin::DisableInterrupt()+0xa0>
    8d40:	e3026938 	movw	r6, #10552	; 0x2938
    8d44:	e3406001 	movt	r6, #1
    8d48:	e5942008 	ldr	r2, [r4, #8]
    8d4c:	e3a0504c 	mov	r5, #76	; 0x4c
    8d50:	e5960000 	ldr	r0, [r6]
    8d54:	e3435f20 	movt	r5, #16160	; 0x3f20
    8d58:	e3a0700c 	mov	r7, #12
    8d5c:	e0825005 	add	r5, r2, r5
    8d60:	e3500000 	cmp	r0, #0
    8d64:	e0070397 	mul	r7, r7, r3
    8d68:	1a00000a 	bne	8d98 <CGPIOPin::DisableInterrupt()+0x98>
    8d6c:	e7953007 	ldr	r3, [r5, r7]
    8d70:	e594200c 	ldr	r2, [r4, #12]
    8d74:	e1c33002 	bic	r3, r3, r2
    8d78:	e7853007 	str	r3, [r5, r7]
    8d7c:	e5963000 	ldr	r3, [r6]
    8d80:	e3530000 	cmp	r3, #0
    8d84:	0a000000 	beq	8d8c <CGPIOPin::DisableInterrupt()+0x8c>
    8d88:	eb0002ba 	bl	9878 <LeaveCritical>
    8d8c:	e3a03006 	mov	r3, #6
    8d90:	e5c43024 	strb	r3, [r4, #36]	; 0x24
    8d94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8d98:	eb000288 	bl	97c0 <EnterCritical>
    8d9c:	eafffff2 	b	8d6c <CGPIOPin::DisableInterrupt()+0x6c>
    8da0:	e3001a64 	movw	r1, #2660	; 0xa64
    8da4:	e3000be8 	movw	r0, #3048	; 0xbe8
    8da8:	e3401001 	movt	r1, #1
    8dac:	e3400001 	movt	r0, #1
    8db0:	e3a020e3 	mov	r2, #227	; 0xe3
    8db4:	eb000c57 	bl	bf18 <assertion_failed>
    8db8:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8dbc:	eaffffdf 	b	8d40 <CGPIOPin::DisableInterrupt()+0x40>

00008dc0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    8dc0:	e5d03010 	ldrb	r3, [r0, #16]
    8dc4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8dc8:	e2432002 	sub	r2, r3, #2
    8dcc:	e3530000 	cmp	r3, #0
    8dd0:	13520001 	cmpne	r2, #1
    8dd4:	e1a04000 	mov	r4, r0
    8dd8:	e1a08001 	mov	r8, r1
    8ddc:	9a000005 	bls	8df8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x38>
    8de0:	e3001a64 	movw	r1, #2660	; 0xa64
    8de4:	e3000ab4 	movw	r0, #2740	; 0xab4
    8de8:	e3401001 	movt	r1, #1
    8dec:	e3400001 	movt	r0, #1
    8df0:	e3a020f4 	mov	r2, #244	; 0xf4
    8df4:	eb000c47 	bl	bf18 <assertion_failed>
    8df8:	e594301c 	ldr	r3, [r4, #28]
    8dfc:	e3530000 	cmp	r3, #0
    8e00:	0a000034 	beq	8ed8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
    8e04:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8e08:	e3530006 	cmp	r3, #6
    8e0c:	0a000005 	beq	8e28 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x68>
    8e10:	e3001a64 	movw	r1, #2660	; 0xa64
    8e14:	e3000b50 	movw	r0, #2896	; 0xb50
    8e18:	e3401001 	movt	r1, #1
    8e1c:	e3400001 	movt	r0, #1
    8e20:	e3a020f7 	mov	r2, #247	; 0xf7
    8e24:	eb000c3b 	bl	bf18 <assertion_failed>
    8e28:	e3580005 	cmp	r8, #5
    8e2c:	ca000019 	bgt	8e98 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd8>
    8e30:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8e34:	e1530008 	cmp	r3, r8
    8e38:	0a00001f 	beq	8ebc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
    8e3c:	e3026938 	movw	r6, #10552	; 0x2938
    8e40:	e3406001 	movt	r6, #1
    8e44:	e5943008 	ldr	r3, [r4, #8]
    8e48:	e3a0504c 	mov	r5, #76	; 0x4c
    8e4c:	e5960000 	ldr	r0, [r6]
    8e50:	e3435f20 	movt	r5, #16160	; 0x3f20
    8e54:	e3a0700c 	mov	r7, #12
    8e58:	e5c48025 	strb	r8, [r4, #37]	; 0x25
    8e5c:	e3500000 	cmp	r0, #0
    8e60:	e0835005 	add	r5, r3, r5
    8e64:	e0070897 	mul	r7, r7, r8
    8e68:	1a000008 	bne	8e90 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd0>
    8e6c:	e594200c 	ldr	r2, [r4, #12]
    8e70:	e7953007 	ldr	r3, [r5, r7]
    8e74:	e1833002 	orr	r3, r3, r2
    8e78:	e7853007 	str	r3, [r5, r7]
    8e7c:	e5963000 	ldr	r3, [r6]
    8e80:	e3530000 	cmp	r3, #0
    8e84:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8e88:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8e8c:	ea000279 	b	9878 <LeaveCritical>
    8e90:	eb00024a 	bl	97c0 <EnterCritical>
    8e94:	eafffff4 	b	8e6c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
    8e98:	e3001a64 	movw	r1, #2660	; 0xa64
    8e9c:	e3000ba8 	movw	r0, #2984	; 0xba8
    8ea0:	e3401001 	movt	r1, #1
    8ea4:	e3400001 	movt	r0, #1
    8ea8:	e3a020f8 	mov	r2, #248	; 0xf8
    8eac:	eb000c19 	bl	bf18 <assertion_failed>
    8eb0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8eb4:	e1530008 	cmp	r3, r8
    8eb8:	1affffdf 	bne	8e3c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
    8ebc:	e3001a64 	movw	r1, #2660	; 0xa64
    8ec0:	e3000c0c 	movw	r0, #3084	; 0xc0c
    8ec4:	e3401001 	movt	r1, #1
    8ec8:	e3400001 	movt	r0, #1
    8ecc:	e3a020f9 	mov	r2, #249	; 0xf9
    8ed0:	eb000c10 	bl	bf18 <assertion_failed>
    8ed4:	eaffffd8 	b	8e3c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x7c>
    8ed8:	e3001a64 	movw	r1, #2660	; 0xa64
    8edc:	e3000b98 	movw	r0, #2968	; 0xb98
    8ee0:	e3401001 	movt	r1, #1
    8ee4:	e3400001 	movt	r0, #1
    8ee8:	e3a020f5 	mov	r2, #245	; 0xf5
    8eec:	eb000c09 	bl	bf18 <assertion_failed>
    8ef0:	eaffffc3 	b	8e04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x44>

00008ef4 <CGPIOPin::DisableInterrupt2()>:
    8ef4:	e5d03010 	ldrb	r3, [r0, #16]
    8ef8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8efc:	e2432002 	sub	r2, r3, #2
    8f00:	e3530000 	cmp	r3, #0
    8f04:	13520001 	cmpne	r2, #1
    8f08:	e1a04000 	mov	r4, r0
    8f0c:	9a000005 	bls	8f28 <CGPIOPin::DisableInterrupt2()+0x34>
    8f10:	e3001a64 	movw	r1, #2660	; 0xa64
    8f14:	e3000ab4 	movw	r0, #2740	; 0xab4
    8f18:	e3401001 	movt	r1, #1
    8f1c:	e3400001 	movt	r0, #1
    8f20:	e300210a 	movw	r2, #266	; 0x10a
    8f24:	eb000bfb 	bl	bf18 <assertion_failed>
    8f28:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8f2c:	e3530005 	cmp	r3, #5
    8f30:	ca000017 	bgt	8f94 <CGPIOPin::DisableInterrupt2()+0xa0>
    8f34:	e3026938 	movw	r6, #10552	; 0x2938
    8f38:	e3406001 	movt	r6, #1
    8f3c:	e5942008 	ldr	r2, [r4, #8]
    8f40:	e3a0504c 	mov	r5, #76	; 0x4c
    8f44:	e5960000 	ldr	r0, [r6]
    8f48:	e3435f20 	movt	r5, #16160	; 0x3f20
    8f4c:	e3a0700c 	mov	r7, #12
    8f50:	e0825005 	add	r5, r2, r5
    8f54:	e3500000 	cmp	r0, #0
    8f58:	e0070397 	mul	r7, r7, r3
    8f5c:	1a00000a 	bne	8f8c <CGPIOPin::DisableInterrupt2()+0x98>
    8f60:	e7953007 	ldr	r3, [r5, r7]
    8f64:	e594200c 	ldr	r2, [r4, #12]
    8f68:	e1c33002 	bic	r3, r3, r2
    8f6c:	e7853007 	str	r3, [r5, r7]
    8f70:	e5963000 	ldr	r3, [r6]
    8f74:	e3530000 	cmp	r3, #0
    8f78:	0a000000 	beq	8f80 <CGPIOPin::DisableInterrupt2()+0x8c>
    8f7c:	eb00023d 	bl	9878 <LeaveCritical>
    8f80:	e3a03006 	mov	r3, #6
    8f84:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    8f88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8f8c:	eb00020b 	bl	97c0 <EnterCritical>
    8f90:	eafffff2 	b	8f60 <CGPIOPin::DisableInterrupt2()+0x6c>
    8f94:	e3001a64 	movw	r1, #2660	; 0xa64
    8f98:	e3000c28 	movw	r0, #3112	; 0xc28
    8f9c:	e3401001 	movt	r1, #1
    8fa0:	e3400001 	movt	r0, #1
    8fa4:	e3a02f43 	mov	r2, #268	; 0x10c
    8fa8:	eb000bda 	bl	bf18 <assertion_failed>
    8fac:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8fb0:	eaffffdf 	b	8f34 <CGPIOPin::DisableInterrupt2()+0x40>

00008fb4 <CGPIOPin::ReadAll()>:
    8fb4:	e3a03000 	mov	r3, #0
    8fb8:	e3433f20 	movt	r3, #16160	; 0x3f20
    8fbc:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    8fc0:	e12fff1e 	bx	lr

00008fc4 <CGPIOPin::SetPullUpMode(unsigned int)>:
    8fc4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8fc8:	e3025938 	movw	r5, #10552	; 0x2938
    8fcc:	e3405001 	movt	r5, #1
    8fd0:	e1a07000 	mov	r7, r0
    8fd4:	e5973008 	ldr	r3, [r7, #8]
    8fd8:	e3a04098 	mov	r4, #152	; 0x98
    8fdc:	e5950000 	ldr	r0, [r5]
    8fe0:	e3434f20 	movt	r4, #16160	; 0x3f20
    8fe4:	e1a08001 	mov	r8, r1
    8fe8:	e0834004 	add	r4, r3, r4
    8fec:	e3500000 	cmp	r0, #0
    8ff0:	1a000019 	bne	905c <CGPIOPin::SetPullUpMode(unsigned int)+0x98>
    8ff4:	e3580002 	cmp	r8, #2
    8ff8:	8a000010 	bhi	9040 <CGPIOPin::SetPullUpMode(unsigned int)+0x7c>
    8ffc:	e3a06000 	mov	r6, #0
    9000:	e3436f20 	movt	r6, #16160	; 0x3f20
    9004:	e3a00005 	mov	r0, #5
    9008:	e5868094 	str	r8, [r6, #148]	; 0x94
    900c:	eb00050a 	bl	a43c <CTimer::SimpleusDelay(unsigned int)>
    9010:	e597300c 	ldr	r3, [r7, #12]
    9014:	e3a00005 	mov	r0, #5
    9018:	e5843000 	str	r3, [r4]
    901c:	eb000506 	bl	a43c <CTimer::SimpleusDelay(unsigned int)>
    9020:	e3a03000 	mov	r3, #0
    9024:	e5863094 	str	r3, [r6, #148]	; 0x94
    9028:	e5843000 	str	r3, [r4]
    902c:	e5953000 	ldr	r3, [r5]
    9030:	e3530000 	cmp	r3, #0
    9034:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9038:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    903c:	ea00020d 	b	9878 <LeaveCritical>
    9040:	e3001a64 	movw	r1, #2660	; 0xa64
    9044:	e3000c4c 	movw	r0, #3148	; 0xc4c
    9048:	e3401001 	movt	r1, #1
    904c:	e3400001 	movt	r0, #1
    9050:	e3002125 	movw	r2, #293	; 0x125
    9054:	eb000baf 	bl	bf18 <assertion_failed>
    9058:	eaffffe7 	b	8ffc <CGPIOPin::SetPullUpMode(unsigned int)+0x38>
    905c:	eb0001d7 	bl	97c0 <EnterCritical>
    9060:	eaffffe3 	b	8ff4 <CGPIOPin::SetPullUpMode(unsigned int)+0x30>

00009064 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    9064:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9068:	e1a06001 	mov	r6, r1
    906c:	e5901004 	ldr	r1, [r0, #4]
    9070:	e3510035 	cmp	r1, #53	; 0x35
    9074:	8a000026 	bhi	9114 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
    9078:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    907c:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    9080:	e3a0000a 	mov	r0, #10
    9084:	e3560005 	cmp	r6, #5
    9088:	e0832291 	umull	r2, r3, r1, r2
    908c:	e1a041a3 	lsr	r4, r3, #3
    9090:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    9094:	e0641490 	mls	r4, r0, r4, r1
    9098:	e2833702 	add	r3, r3, #524288	; 0x80000
    909c:	e1a07103 	lsl	r7, r3, #2
    90a0:	e0844084 	add	r4, r4, r4, lsl #1
    90a4:	8a000013 	bhi	90f8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
    90a8:	e3025938 	movw	r5, #10552	; 0x2938
    90ac:	e3405001 	movt	r5, #1
    90b0:	e5950000 	ldr	r0, [r5]
    90b4:	e3500000 	cmp	r0, #0
    90b8:	1a00000c 	bne	90f0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    90bc:	e3002a3c 	movw	r2, #2620	; 0xa3c
    90c0:	e3402001 	movt	r2, #1
    90c4:	e5973000 	ldr	r3, [r7]
    90c8:	e3a01007 	mov	r1, #7
    90cc:	e7922106 	ldr	r2, [r2, r6, lsl #2]
    90d0:	e1c33411 	bic	r3, r3, r1, lsl r4
    90d4:	e1834412 	orr	r4, r3, r2, lsl r4
    90d8:	e5874000 	str	r4, [r7]
    90dc:	e5953000 	ldr	r3, [r5]
    90e0:	e3530000 	cmp	r3, #0
    90e4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    90e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    90ec:	ea0001e1 	b	9878 <LeaveCritical>
    90f0:	eb0001b2 	bl	97c0 <EnterCritical>
    90f4:	eafffff0 	b	90bc <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    90f8:	e3001a64 	movw	r1, #2660	; 0xa64
    90fc:	e3000c6c 	movw	r0, #3180	; 0xc6c
    9100:	e3401001 	movt	r1, #1
    9104:	e3400001 	movt	r0, #1
    9108:	e3002136 	movw	r2, #310	; 0x136
    910c:	eb000b81 	bl	bf18 <assertion_failed>
    9110:	eaffffe4 	b	90a8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x44>
    9114:	e1a04000 	mov	r4, r0
    9118:	e3001a64 	movw	r1, #2660	; 0xa64
    911c:	e3000c58 	movw	r0, #3160	; 0xc58
    9120:	e3401001 	movt	r1, #1
    9124:	e3400001 	movt	r0, #1
    9128:	e3002132 	movw	r2, #306	; 0x132
    912c:	eb000b79 	bl	bf18 <assertion_failed>
    9130:	e5941004 	ldr	r1, [r4, #4]
    9134:	eaffffcf 	b	9078 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>

00009138 <CGPIOPin::SetMode(TGPIOMode, int)>:
    9138:	e3510009 	cmp	r1, #9
    913c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9140:	e1a04001 	mov	r4, r1
    9144:	e1a05000 	mov	r5, r0
    9148:	e1a06002 	mov	r6, r2
    914c:	e1a07001 	mov	r7, r1
    9150:	ca000037 	bgt	9234 <CGPIOPin::SetMode(TGPIOMode, int)+0xfc>
    9154:	e2443004 	sub	r3, r4, #4
    9158:	e5c54010 	strb	r4, [r5, #16]
    915c:	e3530005 	cmp	r3, #5
    9160:	9a00002d 	bls	921c <CGPIOPin::SetMode(TGPIOMode, int)+0xe4>
    9164:	e2963000 	adds	r3, r6, #0
    9168:	13a03001 	movne	r3, #1
    916c:	e3540001 	cmp	r4, #1
    9170:	13a03000 	movne	r3, #0
    9174:	e3530000 	cmp	r3, #0
    9178:	1a00005b 	bne	92ec <CGPIOPin::SetMode(TGPIOMode, int)+0x1b4>
    917c:	e5951004 	ldr	r1, [r5, #4]
    9180:	e3510035 	cmp	r1, #53	; 0x35
    9184:	8a00003a 	bhi	9274 <CGPIOPin::SetMode(TGPIOMode, int)+0x13c>
    9188:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    918c:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    9190:	e3a0c00a 	mov	ip, #10
    9194:	e3027938 	movw	r7, #10552	; 0x2938
    9198:	e0832291 	umull	r2, r3, r1, r2
    919c:	e3407001 	movt	r7, #1
    91a0:	e5970000 	ldr	r0, [r7]
    91a4:	e3500000 	cmp	r0, #0
    91a8:	e1a041a3 	lsr	r4, r3, #3
    91ac:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
    91b0:	e064149c 	mls	r4, ip, r4, r1
    91b4:	e2833702 	add	r3, r3, #524288	; 0x80000
    91b8:	e1a08103 	lsl	r8, r3, #2
    91bc:	e0844084 	add	r4, r4, r4, lsl #1
    91c0:	1a000033 	bne	9294 <CGPIOPin::SetMode(TGPIOMode, int)+0x15c>
    91c4:	e5d52010 	ldrb	r2, [r5, #16]
    91c8:	e3a01007 	mov	r1, #7
    91cc:	e5983000 	ldr	r3, [r8]
    91d0:	e2422001 	sub	r2, r2, #1
    91d4:	e16f2f12 	clz	r2, r2
    91d8:	e1c33411 	bic	r3, r3, r1, lsl r4
    91dc:	e1a022a2 	lsr	r2, r2, #5
    91e0:	e1834412 	orr	r4, r3, r2, lsl r4
    91e4:	e5884000 	str	r4, [r8]
    91e8:	e5973000 	ldr	r3, [r7]
    91ec:	e3530000 	cmp	r3, #0
    91f0:	1a000029 	bne	929c <CGPIOPin::SetMode(TGPIOMode, int)+0x164>
    91f4:	e3560000 	cmp	r6, #0
    91f8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    91fc:	e5d53010 	ldrb	r3, [r5, #16]
    9200:	e3530003 	cmp	r3, #3
    9204:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9208:	ea000010 	b	9250 <CGPIOPin::SetMode(TGPIOMode, int)+0x118>
    920c:	000092dc 	.word	0x000092dc
    9210:	000092cc 	.word	0x000092cc
    9214:	000092bc 	.word	0x000092bc
    9218:	000092ac 	.word	0x000092ac
    921c:	e3560000 	cmp	r6, #0
    9220:	1a00000b 	bne	9254 <CGPIOPin::SetMode(TGPIOMode, int)+0x11c>
    9224:	e2471004 	sub	r1, r7, #4
    9228:	e1a00005 	mov	r0, r5
    922c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9230:	eaffff8b 	b	9064 <CGPIOPin::SetAlternateFunction(unsigned int)>
    9234:	e3001a64 	movw	r1, #2660	; 0xa64
    9238:	e3000c7c 	movw	r0, #3196	; 0xc7c
    923c:	e3401001 	movt	r1, #1
    9240:	e3400001 	movt	r0, #1
    9244:	e3a0203d 	mov	r2, #61	; 0x3d
    9248:	eb000b32 	bl	bf18 <assertion_failed>
    924c:	eaffffc0 	b	9154 <CGPIOPin::SetMode(TGPIOMode, int)+0x1c>
    9250:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9254:	e1a00005 	mov	r0, r5
    9258:	e3a01000 	mov	r1, #0
    925c:	ebffff58 	bl	8fc4 <CGPIOPin::SetPullUpMode(unsigned int)>
    9260:	e5d57010 	ldrb	r7, [r5, #16]
    9264:	e1a00005 	mov	r0, r5
    9268:	e2471004 	sub	r1, r7, #4
    926c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9270:	eaffff7b 	b	9064 <CGPIOPin::SetAlternateFunction(unsigned int)>
    9274:	e3001a64 	movw	r1, #2660	; 0xa64
    9278:	e3000c58 	movw	r0, #3160	; 0xc58
    927c:	e3401001 	movt	r1, #1
    9280:	e3400001 	movt	r0, #1
    9284:	e3a02056 	mov	r2, #86	; 0x56
    9288:	eb000b22 	bl	bf18 <assertion_failed>
    928c:	e5951004 	ldr	r1, [r5, #4]
    9290:	eaffffbc 	b	9188 <CGPIOPin::SetMode(TGPIOMode, int)+0x50>
    9294:	eb000149 	bl	97c0 <EnterCritical>
    9298:	eaffffc9 	b	91c4 <CGPIOPin::SetMode(TGPIOMode, int)+0x8c>
    929c:	eb000175 	bl	9878 <LeaveCritical>
    92a0:	e3560000 	cmp	r6, #0
    92a4:	1affffd4 	bne	91fc <CGPIOPin::SetMode(TGPIOMode, int)+0xc4>
    92a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    92ac:	e1a00005 	mov	r0, r5
    92b0:	e3a01001 	mov	r1, #1
    92b4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    92b8:	eaffff41 	b	8fc4 <CGPIOPin::SetPullUpMode(unsigned int)>
    92bc:	e1a00005 	mov	r0, r5
    92c0:	e3a01002 	mov	r1, #2
    92c4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    92c8:	eaffff3d 	b	8fc4 <CGPIOPin::SetPullUpMode(unsigned int)>
    92cc:	e1a00005 	mov	r0, r5
    92d0:	e3a01000 	mov	r1, #0
    92d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    92d8:	eafffd71 	b	88a4 <CGPIOPin::Write(unsigned int)>
    92dc:	e1a00005 	mov	r0, r5
    92e0:	e3a01000 	mov	r1, #0
    92e4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    92e8:	eaffff35 	b	8fc4 <CGPIOPin::SetPullUpMode(unsigned int)>
    92ec:	e3a01000 	mov	r1, #0
    92f0:	e1a00005 	mov	r0, r5
    92f4:	ebffff32 	bl	8fc4 <CGPIOPin::SetPullUpMode(unsigned int)>
    92f8:	eaffff9f 	b	917c <CGPIOPin::SetMode(TGPIOMode, int)+0x44>

000092fc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    92fc:	e59fc0a8 	ldr	ip, [pc, #168]	; 93ac <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xb0>
    9300:	e3510035 	cmp	r1, #53	; 0x35
    9304:	e92d4070 	push	{r4, r5, r6, lr}
    9308:	e1a06002 	mov	r6, r2
    930c:	e5803018 	str	r3, [r0, #24]
    9310:	e3a02000 	mov	r2, #0
    9314:	e3a0300a 	mov	r3, #10
    9318:	e1a05001 	mov	r5, r1
    931c:	e5c03010 	strb	r3, [r0, #16]
    9320:	e1a04000 	mov	r4, r0
    9324:	e3a03006 	mov	r3, #6
    9328:	e5801004 	str	r1, [r0, #4]
    932c:	e580c000 	str	ip, [r0]
    9330:	e580201c 	str	r2, [r0, #28]
    9334:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    9338:	e5c03025 	strb	r3, [r0, #37]	; 0x25
    933c:	8a00000b 	bhi	9370 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
    9340:	e1a032a5 	lsr	r3, r5, #5
    9344:	e3a02001 	mov	r2, #1
    9348:	e205501f 	and	r5, r5, #31
    934c:	e1a00004 	mov	r0, r4
    9350:	e1a03103 	lsl	r3, r3, #2
    9354:	e1a05512 	lsl	r5, r2, r5
    9358:	e1a01006 	mov	r1, r6
    935c:	e5843008 	str	r3, [r4, #8]
    9360:	e584500c 	str	r5, [r4, #12]
    9364:	ebffff73 	bl	9138 <CGPIOPin::SetMode(TGPIOMode, int)>
    9368:	e1a00004 	mov	r0, r4
    936c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9370:	eb0017e4 	bl	f308 <CMachineInfo::Get()>
    9374:	e6ef1075 	uxtb	r1, r5
    9378:	eb0017b7 	bl	f25c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    937c:	e3500035 	cmp	r0, #53	; 0x35
    9380:	e1a05000 	mov	r5, r0
    9384:	e5840004 	str	r0, [r4, #4]
    9388:	9affffec 	bls	9340 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    938c:	e3001a64 	movw	r1, #2660	; 0xa64
    9390:	e3000c58 	movw	r0, #3160	; 0xc58
    9394:	e3401001 	movt	r1, #1
    9398:	e3400001 	movt	r0, #1
    939c:	e3a0202b 	mov	r2, #43	; 0x2b
    93a0:	eb000adc 	bl	bf18 <assertion_failed>
    93a4:	e5945004 	ldr	r5, [r4, #4]
    93a8:	eaffffe4 	b	9340 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    93ac:	00010a5c 	.word	0x00010a5c

000093b0 <CGPIOPin::InterruptHandler()>:
    93b0:	e5d03010 	ldrb	r3, [r0, #16]
    93b4:	e92d4010 	push	{r4, lr}
    93b8:	e2432002 	sub	r2, r3, #2
    93bc:	e3530000 	cmp	r3, #0
    93c0:	13520001 	cmpne	r2, #1
    93c4:	e1a04000 	mov	r4, r0
    93c8:	9a000005 	bls	93e4 <CGPIOPin::InterruptHandler()+0x34>
    93cc:	e3001a64 	movw	r1, #2660	; 0xa64
    93d0:	e3000ab4 	movw	r0, #2740	; 0xab4
    93d4:	e3401001 	movt	r1, #1
    93d8:	e3400001 	movt	r0, #1
    93dc:	e3002145 	movw	r2, #325	; 0x145
    93e0:	eb000acc 	bl	bf18 <assertion_failed>
    93e4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    93e8:	e3530005 	cmp	r3, #5
    93ec:	da000002 	ble	93fc <CGPIOPin::InterruptHandler()+0x4c>
    93f0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    93f4:	e3530005 	cmp	r3, #5
    93f8:	ca000005 	bgt	9414 <CGPIOPin::InterruptHandler()+0x64>
    93fc:	e594301c 	ldr	r3, [r4, #28]
    9400:	e3530000 	cmp	r3, #0
    9404:	0a00000b 	beq	9438 <CGPIOPin::InterruptHandler()+0x88>
    9408:	e5940020 	ldr	r0, [r4, #32]
    940c:	e8bd4010 	pop	{r4, lr}
    9410:	e12fff13 	bx	r3
    9414:	e3001a64 	movw	r1, #2660	; 0xa64
    9418:	e3000c94 	movw	r0, #3220	; 0xc94
    941c:	e3401001 	movt	r1, #1
    9420:	e3400001 	movt	r0, #1
    9424:	e3002147 	movw	r2, #327	; 0x147
    9428:	eb000aba 	bl	bf18 <assertion_failed>
    942c:	e594301c 	ldr	r3, [r4, #28]
    9430:	e3530000 	cmp	r3, #0
    9434:	1afffff3 	bne	9408 <CGPIOPin::InterruptHandler()+0x58>
    9438:	e3001a64 	movw	r1, #2660	; 0xa64
    943c:	e3000b98 	movw	r0, #2968	; 0xb98
    9440:	e3401001 	movt	r1, #1
    9444:	e3400001 	movt	r0, #1
    9448:	e3002149 	movw	r2, #329	; 0x149
    944c:	eb000ab1 	bl	bf18 <assertion_failed>
    9450:	e594301c 	ldr	r3, [r4, #28]
    9454:	e5940020 	ldr	r0, [r4, #32]
    9458:	e8bd4010 	pop	{r4, lr}
    945c:	e12fff13 	bx	r3

00009460 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9460:	e3500035 	cmp	r0, #53	; 0x35
    9464:	e92d4070 	push	{r4, r5, r6, lr}
    9468:	e1a05000 	mov	r5, r0
    946c:	8a000023 	bhi	9500 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    9470:	e3026938 	movw	r6, #10552	; 0x2938
    9474:	e3406001 	movt	r6, #1
    9478:	e3a04013 	mov	r4, #19
    947c:	e3404fc8 	movt	r4, #4040	; 0xfc8
    9480:	e5960000 	ldr	r0, [r6]
    9484:	e08442a5 	add	r4, r4, r5, lsr #5
    9488:	e3a02001 	mov	r2, #1
    948c:	e205501f 	and	r5, r5, #31
    9490:	e3500000 	cmp	r0, #0
    9494:	e1a04104 	lsl	r4, r4, #2
    9498:	e1a05512 	lsl	r5, r2, r5
    949c:	1a000011 	bne	94e8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    94a0:	e3a0308b 	mov	r3, #139	; 0x8b
    94a4:	e3433f20 	movt	r3, #16160	; 0x3f20
    94a8:	e1540003 	cmp	r4, r3
    94ac:	8a00000c 	bhi	94e4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
    94b0:	e3a0108b 	mov	r1, #139	; 0x8b
    94b4:	e3431f20 	movt	r1, #16160	; 0x3f20
    94b8:	e1e02005 	mvn	r2, r5
    94bc:	e5943000 	ldr	r3, [r4]
    94c0:	e0033002 	and	r3, r3, r2
    94c4:	e484300c 	str	r3, [r4], #12
    94c8:	e1540001 	cmp	r4, r1
    94cc:	9afffffa 	bls	94bc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x5c>
    94d0:	e5963000 	ldr	r3, [r6]
    94d4:	e3530000 	cmp	r3, #0
    94d8:	08bd8070 	popeq	{r4, r5, r6, pc}
    94dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    94e0:	ea0000e4 	b	9878 <LeaveCritical>
    94e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    94e8:	eb0000b4 	bl	97c0 <EnterCritical>
    94ec:	e3a0308b 	mov	r3, #139	; 0x8b
    94f0:	e3433f20 	movt	r3, #16160	; 0x3f20
    94f4:	e1540003 	cmp	r4, r3
    94f8:	9affffec 	bls	94b0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>
    94fc:	eafffff3 	b	94d0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    9500:	e3001a64 	movw	r1, #2660	; 0xa64
    9504:	e3000ce0 	movw	r0, #3296	; 0xce0
    9508:	e3401001 	movt	r1, #1
    950c:	e3400001 	movt	r0, #1
    9510:	e300214f 	movw	r2, #335	; 0x14f
    9514:	eb000a7f 	bl	bf18 <assertion_failed>
    9518:	eaffffd4 	b	9470 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>

0000951c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    951c:	e3023938 	movw	r3, #10552	; 0x2938
    9520:	e3403001 	movt	r3, #1
    9524:	e3a02001 	mov	r2, #1
    9528:	e5832000 	str	r2, [r3]
    952c:	e12fff1e 	bx	lr

00009530 <CMemorySystem::~CMemorySystem()>:
    9530:	e5903000 	ldr	r3, [r0]
    9534:	e92d4070 	push	{r4, r5, r6, lr}
    9538:	e3530000 	cmp	r3, #0
    953c:	e1a04000 	mov	r4, r0
    9540:	0a000005 	beq	955c <CMemorySystem::~CMemorySystem()+0x2c>
    9544:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9548:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    954c:	e3c33005 	bic	r3, r3, #5
    9550:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9554:	e3a03000 	mov	r3, #0
    9558:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    955c:	e594500c 	ldr	r5, [r4, #12]
    9560:	e3550000 	cmp	r5, #0
    9564:	0a000004 	beq	957c <CMemorySystem::~CMemorySystem()+0x4c>
    9568:	e1a00005 	mov	r0, r5
    956c:	eb0005d1 	bl	acb8 <CPageTable::~CPageTable()>
    9570:	e1a00005 	mov	r0, r5
    9574:	e3a01008 	mov	r1, #8
    9578:	eb00008e 	bl	97b8 <operator delete(void*, unsigned int)>
    957c:	e5945008 	ldr	r5, [r4, #8]
    9580:	e3a03000 	mov	r3, #0
    9584:	e584300c 	str	r3, [r4, #12]
    9588:	e1550003 	cmp	r5, r3
    958c:	0a000004 	beq	95a4 <CMemorySystem::~CMemorySystem()+0x74>
    9590:	e1a00005 	mov	r0, r5
    9594:	eb0005c7 	bl	acb8 <CPageTable::~CPageTable()>
    9598:	e1a00005 	mov	r0, r5
    959c:	e3a01008 	mov	r1, #8
    95a0:	eb000084 	bl	97b8 <operator delete(void*, unsigned int)>
    95a4:	e1a00004 	mov	r0, r4
    95a8:	e8bd8070 	pop	{r4, r5, r6, pc}

000095ac <CMemorySystem::GetMemSize() const>:
    95ac:	e5900004 	ldr	r0, [r0, #4]
    95b0:	e12fff1e 	bx	lr

000095b4 <CMemorySystem::EnableMMU()>:
    95b4:	e5903000 	ldr	r3, [r0]
    95b8:	e92d4010 	push	{r4, lr}
    95bc:	e3530000 	cmp	r3, #0
    95c0:	e1a04000 	mov	r4, r0
    95c4:	0a00001f 	beq	9648 <CMemorySystem::EnableMMU()+0x94>
    95c8:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    95cc:	e3833040 	orr	r3, r3, #64	; 0x40
    95d0:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    95d4:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    95d8:	e3130001 	tst	r3, #1
    95dc:	1a000020 	bne	9664 <CMemorySystem::EnableMMU()+0xb0>
    95e0:	e3a03002 	mov	r3, #2
    95e4:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    95e8:	e5940008 	ldr	r0, [r4, #8]
    95ec:	e3500000 	cmp	r0, #0
    95f0:	0a00002a 	beq	96a0 <CMemorySystem::EnableMMU()+0xec>
    95f4:	eb0005b8 	bl	acdc <CPageTable::GetBaseAddress() const>
    95f8:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    95fc:	e594000c 	ldr	r0, [r4, #12]
    9600:	e3500000 	cmp	r0, #0
    9604:	0a00001d 	beq	9680 <CMemorySystem::EnableMMU()+0xcc>
    9608:	eb0005b3 	bl	acdc <CPageTable::GetBaseAddress() const>
    960c:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    9610:	e3a03005 	mov	r3, #5
    9614:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    9618:	eb001763 	bl	f3ac <InvalidateDataCache>
    961c:	e3a03000 	mov	r3, #0
    9620:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9624:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9628:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    962c:	f57ff04f 	dsb	sy
    9630:	f57ff06f 	isb	sy
    9634:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9638:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    963c:	e3833005 	orr	r3, r3, #5
    9640:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9644:	e8bd8010 	pop	{r4, pc}
    9648:	e3001cf4 	movw	r1, #3316	; 0xcf4
    964c:	e3000d00 	movw	r0, #3328	; 0xd00
    9650:	e3401001 	movt	r1, #1
    9654:	e3400001 	movt	r0, #1
    9658:	e3a020c0 	mov	r2, #192	; 0xc0
    965c:	eb000a2d 	bl	bf18 <assertion_failed>
    9660:	eaffffd8 	b	95c8 <CMemorySystem::EnableMMU()+0x14>
    9664:	e3001cf4 	movw	r1, #3316	; 0xcf4
    9668:	e3000d10 	movw	r0, #3344	; 0xd10
    966c:	e3401001 	movt	r1, #1
    9670:	e3400001 	movt	r0, #1
    9674:	e3a020cd 	mov	r2, #205	; 0xcd
    9678:	eb000a26 	bl	bf18 <assertion_failed>
    967c:	eaffffd7 	b	95e0 <CMemorySystem::EnableMMU()+0x2c>
    9680:	e3001cf4 	movw	r1, #3316	; 0xcf4
    9684:	e3000d58 	movw	r0, #3416	; 0xd58
    9688:	e3401001 	movt	r1, #1
    968c:	e3400001 	movt	r0, #1
    9690:	e3a020d7 	mov	r2, #215	; 0xd7
    9694:	eb000a1f 	bl	bf18 <assertion_failed>
    9698:	e594000c 	ldr	r0, [r4, #12]
    969c:	eaffffd9 	b	9608 <CMemorySystem::EnableMMU()+0x54>
    96a0:	e3001cf4 	movw	r1, #3316	; 0xcf4
    96a4:	e3000d3c 	movw	r0, #3388	; 0xd3c
    96a8:	e3401001 	movt	r1, #1
    96ac:	e3400001 	movt	r0, #1
    96b0:	e3a020d3 	mov	r2, #211	; 0xd3
    96b4:	eb000a17 	bl	bf18 <assertion_failed>
    96b8:	e5940008 	ldr	r0, [r4, #8]
    96bc:	eaffffcc 	b	95f4 <CMemorySystem::EnableMMU()+0x40>

000096c0 <CMemorySystem::CMemorySystem(int)>:
    96c0:	e92d4030 	push	{r4, r5, lr}
    96c4:	e1a04000 	mov	r4, r0
    96c8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    96cc:	e5801000 	str	r1, [r0]
    96d0:	e3a05000 	mov	r5, #0
    96d4:	e28d000c 	add	r0, sp, #12
    96d8:	e5845004 	str	r5, [r4, #4]
    96dc:	e5845008 	str	r5, [r4, #8]
    96e0:	e584500c 	str	r5, [r4, #12]
    96e4:	ebfffbf3 	bl	86b8 <CBcmPropertyTags::CBcmPropertyTags()>
    96e8:	e3a03014 	mov	r3, #20
    96ec:	e58d5000 	str	r5, [sp]
    96f0:	e28d000c 	add	r0, sp, #12
    96f4:	e3a01005 	mov	r1, #5
    96f8:	e08d2003 	add	r2, sp, r3
    96fc:	e3401001 	movt	r1, #1
    9700:	ebfffc34 	bl	87d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9704:	e3500000 	cmp	r0, #0
    9708:	1a000019 	bne	9774 <CMemorySystem::CMemorySystem(int)+0xb4>
    970c:	e3a01303 	mov	r1, #201326592	; 0xc000000
    9710:	e58d0020 	str	r0, [sp, #32]
    9714:	e58d1024 	str	r1, [sp, #36]	; 0x24
    9718:	e5841004 	str	r1, [r4, #4]
    971c:	eb0018c7 	bl	fa40 <mem_init>
    9720:	e5943000 	ldr	r3, [r4]
    9724:	e3530000 	cmp	r3, #0
    9728:	0a00000c 	beq	9760 <CMemorySystem::CMemorySystem(int)+0xa0>
    972c:	e3a00008 	mov	r0, #8
    9730:	eb00001c 	bl	97a8 <operator new(unsigned int)>
    9734:	e5941004 	ldr	r1, [r4, #4]
    9738:	e1a05000 	mov	r5, r0
    973c:	eb00050d 	bl	ab78 <CPageTable::CPageTable(unsigned int)>
    9740:	e5845008 	str	r5, [r4, #8]
    9744:	e3a00008 	mov	r0, #8
    9748:	eb000016 	bl	97a8 <operator new(unsigned int)>
    974c:	e1a05000 	mov	r5, r0
    9750:	eb0004dc 	bl	aac8 <CPageTable::CPageTable()>
    9754:	e584500c 	str	r5, [r4, #12]
    9758:	e1a00004 	mov	r0, r4
    975c:	ebffff94 	bl	95b4 <CMemorySystem::EnableMMU()>
    9760:	e28d000c 	add	r0, sp, #12
    9764:	ebfffbd9 	bl	86d0 <CBcmPropertyTags::~CBcmPropertyTags()>
    9768:	e1a00004 	mov	r0, r4
    976c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9770:	e8bd8030 	pop	{r4, r5, pc}
    9774:	e59d0020 	ldr	r0, [sp, #32]
    9778:	e3500000 	cmp	r0, #0
    977c:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
    9780:	0affffe4 	beq	9718 <CMemorySystem::CMemorySystem(int)+0x58>
    9784:	e3001cf4 	movw	r1, #3316	; 0xcf4
    9788:	e3000d6c 	movw	r0, #3436	; 0xd6c
    978c:	e3401001 	movt	r1, #1
    9790:	e3400001 	movt	r0, #1
    9794:	e3a02042 	mov	r2, #66	; 0x42
    9798:	eb0009de 	bl	bf18 <assertion_failed>
    979c:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    97a0:	e59d0020 	ldr	r0, [sp, #32]
    97a4:	eaffffdb 	b	9718 <CMemorySystem::CMemorySystem(int)+0x58>

000097a8 <operator new(unsigned int)>:
    97a8:	ea0018bc 	b	faa0 <malloc>

000097ac <operator new[](unsigned int)>:
    97ac:	ea0018bb 	b	faa0 <malloc>

000097b0 <operator delete(void*)>:
    97b0:	ea00191c 	b	fc28 <free>

000097b4 <operator delete[](void*)>:
    97b4:	ea00191b 	b	fc28 <free>

000097b8 <operator delete(void*, unsigned int)>:
    97b8:	ea00191a 	b	fc28 <free>

000097bc <operator delete[](void*, unsigned int)>:
    97bc:	ea001919 	b	fc28 <free>

000097c0 <EnterCritical>:
    97c0:	e2403001 	sub	r3, r0, #1
    97c4:	e3530001 	cmp	r3, #1
    97c8:	e92d4070 	push	{r4, r5, r6, lr}
    97cc:	e1a04000 	mov	r4, r0
    97d0:	9a000005 	bls	97ec <EnterCritical+0x2c>
    97d4:	e3001d88 	movw	r1, #3464	; 0xd88
    97d8:	e3000d98 	movw	r0, #3480	; 0xd98
    97dc:	e3401001 	movt	r1, #1
    97e0:	e3400001 	movt	r0, #1
    97e4:	e3a0204f 	mov	r2, #79	; 0x4f
    97e8:	eb0009ca 	bl	bf18 <assertion_failed>
    97ec:	e10f5000 	mrs	r5, CPSR
    97f0:	e3540002 	cmp	r4, #2
    97f4:	0a000001 	beq	9800 <EnterCritical+0x40>
    97f8:	e3150040 	tst	r5, #64	; 0x40
    97fc:	1a000016 	bne	985c <EnterCritical+0x9c>
    9800:	f10c0080 	cpsid	i
    9804:	e3540002 	cmp	r4, #2
    9808:	0a000011 	beq	9854 <EnterCritical+0x94>
    980c:	e302493c 	movw	r4, #10556	; 0x293c
    9810:	e3404001 	movt	r4, #1
    9814:	e5943000 	ldr	r3, [r4]
    9818:	e3530013 	cmp	r3, #19
    981c:	9a000005 	bls	9838 <EnterCritical+0x78>
    9820:	e3001d88 	movw	r1, #3464	; 0xd88
    9824:	e3000e00 	movw	r0, #3584	; 0xe00
    9828:	e3401001 	movt	r1, #1
    982c:	e3400001 	movt	r0, #1
    9830:	e3a0205d 	mov	r2, #93	; 0x5d
    9834:	eb0009b7 	bl	bf18 <assertion_failed>
    9838:	e5943000 	ldr	r3, [r4]
    983c:	e2832001 	add	r2, r3, #1
    9840:	e5842000 	str	r2, [r4]
    9844:	e0844103 	add	r4, r4, r3, lsl #2
    9848:	e5845004 	str	r5, [r4, #4]
    984c:	f57ff05f 	dmb	sy
    9850:	e8bd8070 	pop	{r4, r5, r6, pc}
    9854:	f10c0040 	cpsid	f
    9858:	eaffffeb 	b	980c <EnterCritical+0x4c>
    985c:	e3001d88 	movw	r1, #3464	; 0xd88
    9860:	e3000dd0 	movw	r0, #3536	; 0xdd0
    9864:	e3401001 	movt	r1, #1
    9868:	e3400001 	movt	r0, #1
    986c:	e3a02055 	mov	r2, #85	; 0x55
    9870:	eb0009a8 	bl	bf18 <assertion_failed>
    9874:	eaffffe1 	b	9800 <EnterCritical+0x40>

00009878 <LeaveCritical>:
    9878:	e92d4010 	push	{r4, lr}
    987c:	f57ff05f 	dmb	sy
    9880:	e302493c 	movw	r4, #10556	; 0x293c
    9884:	e3404001 	movt	r4, #1
    9888:	e5943000 	ldr	r3, [r4]
    988c:	e3530000 	cmp	r3, #0
    9890:	1a000005 	bne	98ac <LeaveCritical+0x34>
    9894:	e3001d88 	movw	r1, #3464	; 0xd88
    9898:	e3000e28 	movw	r0, #3624	; 0xe28
    989c:	e3401001 	movt	r1, #1
    98a0:	e3400001 	movt	r0, #1
    98a4:	e3a02067 	mov	r2, #103	; 0x67
    98a8:	eb00099a 	bl	bf18 <assertion_failed>
    98ac:	e5943000 	ldr	r3, [r4]
    98b0:	e2433001 	sub	r3, r3, #1
    98b4:	e5843000 	str	r3, [r4]
    98b8:	e0844103 	add	r4, r4, r3, lsl #2
    98bc:	e5943004 	ldr	r3, [r4, #4]
    98c0:	e121f003 	msr	CPSR_c, r3
    98c4:	e8bd8010 	pop	{r4, pc}

000098c8 <SyncDataAndInstructionCache>:
    98c8:	e92d4010 	push	{r4, lr}
    98cc:	eb0016e0 	bl	f454 <CleanDataCache>
    98d0:	e3a03000 	mov	r3, #0
    98d4:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    98d8:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    98dc:	f57ff04f 	dsb	sy
    98e0:	f57ff06f 	isb	sy
    98e4:	e8bd8010 	pop	{r4, pc}

000098e8 <__aeabi_atexit>:
    98e8:	e12fff1e 	bx	lr

000098ec <halt>:
    98ec:	f10c0080 	cpsid	i
    98f0:	f10c0040 	cpsid	f
    98f4:	f57ff04f 	dsb	sy
    98f8:	e320f003 	wfi
    98fc:	eafffffc 	b	98f4 <halt+0x8>

00009900 <reboot>:
    9900:	e3a03000 	mov	r3, #0
    9904:	e3433f10 	movt	r3, #16144	; 0x3f10
    9908:	e3a01001 	mov	r1, #1
    990c:	e3a02020 	mov	r2, #32
    9910:	e3451a00 	movt	r1, #23040	; 0x5a00
    9914:	e3452a00 	movt	r2, #23040	; 0x5a00
    9918:	e5831024 	str	r1, [r3, #36]	; 0x24
    991c:	e583201c 	str	r2, [r3, #28]
    9920:	eafffffe 	b	9920 <reboot+0x20>

00009924 <sysinit>:
    9924:	e92d4030 	push	{r4, r5, lr}
    9928:	e24dd01c 	sub	sp, sp, #28
    992c:	f1080040 	cpsie	f
    9930:	eb001682 	bl	f340 <InvalidateDataCacheL1Only>
    9934:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    9938:	e3083064 	movw	r3, #32868	; 0x8064
    993c:	e3403000 	movt	r3, #0
    9940:	e582309c 	str	r3, [r2, #156]	; 0x9c
    9944:	e58230ac 	str	r3, [r2, #172]	; 0xac
    9948:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    994c:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    9950:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    9954:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    9958:	f57ff06f 	isb	sy
    995c:	eee82a10 	vmsr	fpexc, r2
    9960:	e3a01000 	mov	r1, #0
    9964:	eee11a10 	vmsr	fpscr, r1
    9968:	e3023934 	movw	r3, #10548	; 0x2934
    996c:	e30229d4 	movw	r2, #10708	; 0x29d4
    9970:	e3403001 	movt	r3, #1
    9974:	e3402001 	movt	r2, #1
    9978:	e1530002 	cmp	r3, r2
    997c:	2a000002 	bcs	998c <sysinit+0x68>
    9980:	e4c31001 	strb	r1, [r3], #1
    9984:	e1530002 	cmp	r3, r2
    9988:	1afffffc 	bne	9980 <sysinit+0x5c>
    998c:	e1a0000d 	mov	r0, sp
    9990:	e3025844 	movw	r5, #10308	; 0x2844
    9994:	e3024838 	movw	r4, #10296	; 0x2838
    9998:	e3405001 	movt	r5, #1
    999c:	e3404001 	movt	r4, #1
    99a0:	eb001569 	bl	ef4c <CMachineInfo::CMachineInfo()>
    99a4:	e1540005 	cmp	r4, r5
    99a8:	2a000003 	bcs	99bc <sysinit+0x98>
    99ac:	e4943004 	ldr	r3, [r4], #4
    99b0:	e12fff33 	blx	r3
    99b4:	e1540005 	cmp	r4, r5
    99b8:	3afffffb 	bcc	99ac <sysinit+0x88>
    99bc:	ebfff9ab 	bl	8070 <main>
    99c0:	e3500001 	cmp	r0, #1
    99c4:	0a000000 	beq	99cc <sysinit+0xa8>
    99c8:	ebffffc7 	bl	98ec <halt>
    99cc:	ebffffcb 	bl	9900 <reboot>

000099d0 <CTimer::CTimer(CInterruptSystem*)>:
    99d0:	e92d4070 	push	{r4, r5, r6, lr}
    99d4:	e1a04000 	mov	r4, r0
    99d8:	e3025994 	movw	r5, #10644	; 0x2994
    99dc:	e3405001 	movt	r5, #1
    99e0:	e5801000 	str	r1, [r0]
    99e4:	e3a03000 	mov	r3, #0
    99e8:	e3a06001 	mov	r6, #1
    99ec:	e5803004 	str	r3, [r0, #4]
    99f0:	e5843008 	str	r3, [r4, #8]
    99f4:	e2800018 	add	r0, r0, #24
    99f8:	e5843014 	str	r3, [r4, #20]
    99fc:	e584300c 	str	r3, [r4, #12]
    9a00:	e5846010 	str	r6, [r4, #16]
    9a04:	eb0016ca 	bl	f534 <CPtrList::CPtrList()>
    9a08:	e5952000 	ldr	r2, [r5]
    9a0c:	e3053730 	movw	r3, #22320	; 0x5730
    9a10:	e584601c 	str	r6, [r4, #28]
    9a14:	e3520000 	cmp	r2, #0
    9a18:	e3403005 	movt	r3, #5
    9a1c:	e300215e 	movw	r2, #350	; 0x15e
    9a20:	e5843020 	str	r3, [r4, #32]
    9a24:	e5842024 	str	r2, [r4, #36]	; 0x24
    9a28:	0a000005 	beq	9a44 <CTimer::CTimer(CInterruptSystem*)+0x74>
    9a2c:	e3001e78 	movw	r1, #3704	; 0xe78
    9a30:	e3000e84 	movw	r0, #3716	; 0xe84
    9a34:	e3401001 	movt	r1, #1
    9a38:	e3400001 	movt	r0, #1
    9a3c:	e3a0203b 	mov	r2, #59	; 0x3b
    9a40:	eb000934 	bl	bf18 <assertion_failed>
    9a44:	e5854000 	str	r4, [r5]
    9a48:	e1a00004 	mov	r0, r4
    9a4c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009a50 <CTimer::~CTimer()>:
    9a50:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9a54:	e1a09000 	mov	r9, r0
    9a58:	e5900000 	ldr	r0, [r0]
    9a5c:	e3500000 	cmp	r0, #0
    9a60:	0a00002c 	beq	9b18 <CTimer::~CTimer()+0xc8>
    9a64:	e3a01003 	mov	r1, #3
    9a68:	e3007e78 	movw	r7, #3704	; 0xe78
    9a6c:	e300aeac 	movw	sl, #3756	; 0xeac
    9a70:	e3048d43 	movw	r8, #19779	; 0x4d43
    9a74:	eb00133f 	bl	e778 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9a78:	e3407001 	movt	r7, #1
    9a7c:	e340a001 	movt	sl, #1
    9a80:	e2894018 	add	r4, r9, #24
    9a84:	e3448b54 	movt	r8, #19284	; 0x4b54
    9a88:	ea000010 	b	9ad0 <CTimer::~CTimer()+0x80>
    9a8c:	eb0016d1 	bl	f5d8 <CPtrList::GetPtr(TPtrListElement*)>
    9a90:	e2506000 	subs	r6, r0, #0
    9a94:	0a00001a 	beq	9b04 <CTimer::~CTimer()+0xb4>
    9a98:	e5963000 	ldr	r3, [r6]
    9a9c:	e3000eb8 	movw	r0, #3768	; 0xeb8
    9aa0:	e3a02049 	mov	r2, #73	; 0x49
    9aa4:	e1a01007 	mov	r1, r7
    9aa8:	e1530008 	cmp	r3, r8
    9aac:	e3400001 	movt	r0, #1
    9ab0:	0a000000 	beq	9ab8 <CTimer::~CTimer()+0x68>
    9ab4:	eb000917 	bl	bf18 <assertion_failed>
    9ab8:	e1a01005 	mov	r1, r5
    9abc:	e1a00004 	mov	r0, r4
    9ac0:	eb001764 	bl	f858 <CPtrList::Remove(TPtrListElement*)>
    9ac4:	e1a00006 	mov	r0, r6
    9ac8:	e3a01014 	mov	r1, #20
    9acc:	ebffff39 	bl	97b8 <operator delete(void*, unsigned int)>
    9ad0:	e1a00004 	mov	r0, r4
    9ad4:	eb0016a6 	bl	f574 <CPtrList::GetFirst()>
    9ad8:	e2505000 	subs	r5, r0, #0
    9adc:	e1a00004 	mov	r0, r4
    9ae0:	e1a01005 	mov	r1, r5
    9ae4:	1affffe8 	bne	9a8c <CTimer::~CTimer()+0x3c>
    9ae8:	e3023994 	movw	r3, #10644	; 0x2994
    9aec:	e3403001 	movt	r3, #1
    9af0:	e1a00004 	mov	r0, r4
    9af4:	e5835000 	str	r5, [r3]
    9af8:	eb001690 	bl	f540 <CPtrList::~CPtrList()>
    9afc:	e1a00009 	mov	r0, r9
    9b00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9b04:	e3a02048 	mov	r2, #72	; 0x48
    9b08:	e1a01007 	mov	r1, r7
    9b0c:	e1a0000a 	mov	r0, sl
    9b10:	eb000900 	bl	bf18 <assertion_failed>
    9b14:	eaffffdf 	b	9a98 <CTimer::~CTimer()+0x48>
    9b18:	e3001e78 	movw	r1, #3704	; 0xe78
    9b1c:	e3000e94 	movw	r0, #3732	; 0xe94
    9b20:	e3401001 	movt	r1, #1
    9b24:	e3400001 	movt	r0, #1
    9b28:	e3a02041 	mov	r2, #65	; 0x41
    9b2c:	eb0008f9 	bl	bf18 <assertion_failed>
    9b30:	e5990000 	ldr	r0, [r9]
    9b34:	eaffffca 	b	9a64 <CTimer::~CTimer()+0x14>

00009b38 <CTimer::SetTimeZone(int)>:
    9b38:	e2813e59 	add	r3, r1, #1424	; 0x590
    9b3c:	e3002b3e 	movw	r2, #2878	; 0xb3e
    9b40:	e283300f 	add	r3, r3, #15
    9b44:	e1530002 	cmp	r3, r2
    9b48:	95801014 	strls	r1, [r0, #20]
    9b4c:	93a00001 	movls	r0, #1
    9b50:	83a00000 	movhi	r0, #0
    9b54:	e12fff1e 	bx	lr

00009b58 <CTimer::GetTimeZone() const>:
    9b58:	e5900014 	ldr	r0, [r0, #20]
    9b5c:	e12fff1e 	bx	lr

00009b60 <CTimer::SetTime(unsigned int, int)>:
    9b60:	e3520000 	cmp	r2, #0
    9b64:	e92d4070 	push	{r4, r5, r6, lr}
    9b68:	e1a04000 	mov	r4, r0
    9b6c:	e1a05001 	mov	r5, r1
    9b70:	1a000005 	bne	9b8c <CTimer::SetTime(unsigned int, int)+0x2c>
    9b74:	e5901014 	ldr	r1, [r0, #20]
    9b78:	e3a0303c 	mov	r3, #60	; 0x3c
    9b7c:	e0030193 	mul	r3, r3, r1
    9b80:	e3530000 	cmp	r3, #0
    9b84:	ba00000e 	blt	9bc4 <CTimer::SetTime(unsigned int, int)+0x64>
    9b88:	e0855003 	add	r5, r5, r3
    9b8c:	e5940010 	ldr	r0, [r4, #16]
    9b90:	e3500000 	cmp	r0, #0
    9b94:	1a000002 	bne	9ba4 <CTimer::SetTime(unsigned int, int)+0x44>
    9b98:	e3a00001 	mov	r0, #1
    9b9c:	e584500c 	str	r5, [r4, #12]
    9ba0:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ba4:	ebffff05 	bl	97c0 <EnterCritical>
    9ba8:	e5943010 	ldr	r3, [r4, #16]
    9bac:	e584500c 	str	r5, [r4, #12]
    9bb0:	e3530000 	cmp	r3, #0
    9bb4:	0a000007 	beq	9bd8 <CTimer::SetTime(unsigned int, int)+0x78>
    9bb8:	ebffff2e 	bl	9878 <LeaveCritical>
    9bbc:	e3a00001 	mov	r0, #1
    9bc0:	e8bd8070 	pop	{r4, r5, r6, pc}
    9bc4:	e2631000 	rsb	r1, r3, #0
    9bc8:	e1510005 	cmp	r1, r5
    9bcc:	daffffed 	ble	9b88 <CTimer::SetTime(unsigned int, int)+0x28>
    9bd0:	e1a00002 	mov	r0, r2
    9bd4:	e8bd8070 	pop	{r4, r5, r6, pc}
    9bd8:	e3a00001 	mov	r0, #1
    9bdc:	e8bd8070 	pop	{r4, r5, r6, pc}

00009be0 <CTimer::GetClockTicks()>:
    9be0:	e3a03a03 	mov	r3, #12288	; 0x3000
    9be4:	e3433f00 	movt	r3, #16128	; 0x3f00
    9be8:	e5930004 	ldr	r0, [r3, #4]
    9bec:	e12fff1e 	bx	lr

00009bf0 <CTimer::GetTicks() const>:
    9bf0:	e5900004 	ldr	r0, [r0, #4]
    9bf4:	e12fff1e 	bx	lr

00009bf8 <CTimer::GetUptime() const>:
    9bf8:	e5900008 	ldr	r0, [r0, #8]
    9bfc:	e12fff1e 	bx	lr

00009c00 <CTimer::GetTime() const>:
    9c00:	e590000c 	ldr	r0, [r0, #12]
    9c04:	e12fff1e 	bx	lr

00009c08 <CTimer::GetUniversalTime() const>:
    9c08:	e5902014 	ldr	r2, [r0, #20]
    9c0c:	e3a0303c 	mov	r3, #60	; 0x3c
    9c10:	e590000c 	ldr	r0, [r0, #12]
    9c14:	e0030293 	mul	r3, r3, r2
    9c18:	e1530000 	cmp	r3, r0
    9c1c:	d0400003 	suble	r0, r0, r3
    9c20:	c3a00000 	movgt	r0, #0
    9c24:	e12fff1e 	bx	lr

00009c28 <CTimer::GetTimeString()>:
    9c28:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c2c:	e1a05000 	mov	r5, r0
    9c30:	e5900010 	ldr	r0, [r0, #16]
    9c34:	e24dd01c 	sub	sp, sp, #28
    9c38:	e3500000 	cmp	r0, #0
    9c3c:	1a00006c 	bne	9df4 <CTimer::GetTimeString()+0x1cc>
    9c40:	e595400c 	ldr	r4, [r5, #12]
    9c44:	e5959004 	ldr	r9, [r5, #4]
    9c48:	e1940009 	orrs	r0, r4, r9
    9c4c:	0a00004f 	beq	9d90 <CTimer::GetTimeString()+0x168>
    9c50:	e308a889 	movw	sl, #34953	; 0x8889
    9c54:	e348a888 	movt	sl, #34952	; 0x8888
    9c58:	e30b23c5 	movw	r2, #46021	; 0xb3c5
    9c5c:	e34921a2 	movt	r2, #37282	; 0x91a2
    9c60:	e0876a94 	umull	r6, r7, r4, sl
    9c64:	e304e507 	movw	lr, #17671	; 0x4507
    9c68:	e0832294 	umull	r2, r3, r4, r2
    9c6c:	e34ce22e 	movt	lr, #49710	; 0xc22e
    9c70:	e3a0003c 	mov	r0, #60	; 0x3c
    9c74:	e308151f 	movw	r1, #34079	; 0x851f
    9c78:	e1a0c2a7 	lsr	ip, r7, #5
    9c7c:	e34511eb 	movt	r1, #20971	; 0x51eb
    9c80:	e30057b2 	movw	r5, #1970	; 0x7b2
    9c84:	e08baa9c 	umull	sl, fp, ip, sl
    9c88:	e1a065a3 	lsr	r6, r3, #11
    9c8c:	e0832e94 	umull	r2, r3, r4, lr
    9c90:	e3a0a064 	mov	sl, #100	; 0x64
    9c94:	e0674c90 	mls	r7, r0, ip, r4
    9c98:	e1a082ab 	lsr	r8, fp, #5
    9c9c:	e3a0ee19 	mov	lr, #400	; 0x190
    9ca0:	e068c890 	mls	r8, r0, r8, ip
    9ca4:	e1a04823 	lsr	r4, r3, #16
    9ca8:	e300c16d 	movw	ip, #365	; 0x16d
    9cac:	e300016e 	movw	r0, #366	; 0x16e
    9cb0:	ea000001 	b	9cbc <CTimer::GetTimeString()+0x94>
    9cb4:	e0444002 	sub	r4, r4, r2
    9cb8:	e2855001 	add	r5, r5, #1
    9cbc:	e0832195 	umull	r2, r3, r5, r1
    9cc0:	e1a022a3 	lsr	r2, r3, #5
    9cc4:	e1a033a3 	lsr	r3, r3, #7
    9cc8:	e062529a 	mls	r2, sl, r2, r5
    9ccc:	e063539e 	mls	r3, lr, r3, r5
    9cd0:	e3520000 	cmp	r2, #0
    9cd4:	e16f3f13 	clz	r3, r3
    9cd8:	01a032a3 	lsreq	r3, r3, #5
    9cdc:	0a000002 	beq	9cec <CTimer::GetTimeString()+0xc4>
    9ce0:	e3150003 	tst	r5, #3
    9ce4:	03a03001 	moveq	r3, #1
    9ce8:	13a03000 	movne	r3, #0
    9cec:	e3530000 	cmp	r3, #0
    9cf0:	01a0200c 	moveq	r2, ip
    9cf4:	11a02000 	movne	r2, r0
    9cf8:	e1540002 	cmp	r4, r2
    9cfc:	2affffec 	bcs	9cb4 <CTimer::GetTimeString()+0x8c>
    9d00:	e3000e40 	movw	r0, #3648	; 0xe40
    9d04:	e3a0a000 	mov	sl, #0
    9d08:	e3400001 	movt	r0, #1
    9d0c:	ea000001 	b	9d18 <CTimer::GetTimeString()+0xf0>
    9d10:	e0444002 	sub	r4, r4, r2
    9d14:	e28aa001 	add	sl, sl, #1
    9d18:	e35a0001 	cmp	sl, #1
    9d1c:	13a01000 	movne	r1, #0
    9d20:	02031001 	andeq	r1, r3, #1
    9d24:	e3a0201d 	mov	r2, #29
    9d28:	e3510000 	cmp	r1, #0
    9d2c:	0790210a 	ldreq	r2, [r0, sl, lsl #2]
    9d30:	e1540002 	cmp	r4, r2
    9d34:	2afffff5 	bcs	9d10 <CTimer::GetTimeString()+0xe8>
    9d38:	e308251f 	movw	r2, #34079	; 0x851f
    9d3c:	e34521eb 	movt	r2, #20971	; 0x51eb
    9d40:	e3a01064 	mov	r1, #100	; 0x64
    9d44:	e3a00010 	mov	r0, #16
    9d48:	e0832299 	umull	r2, r3, r9, r2
    9d4c:	e1a0b2a3 	lsr	fp, r3, #5
    9d50:	e06b9b91 	mls	fp, r1, fp, r9
    9d54:	ebfffe93 	bl	97a8 <operator new(unsigned int)>
    9d58:	e1a09000 	mov	r9, r0
    9d5c:	eb000d7a 	bl	d34c <CString::CString()>
    9d60:	e30037b7 	movw	r3, #1975	; 0x7b7
    9d64:	e1550003 	cmp	r5, r3
    9d68:	8a00000a 	bhi	9d98 <CTimer::GetTimeString()+0x170>
    9d6c:	e1a00009 	mov	r0, r9
    9d70:	e58db004 	str	fp, [sp, #4]
    9d74:	e1a03008 	mov	r3, r8
    9d78:	e58d7000 	str	r7, [sp]
    9d7c:	e1a02006 	mov	r2, r6
    9d80:	e3001efc 	movw	r1, #3836	; 0xefc
    9d84:	e3401001 	movt	r1, #1
    9d88:	eb0010ce 	bl	e0c8 <CString::Format(char const*, ...)>
    9d8c:	e1a00009 	mov	r0, r9
    9d90:	e28dd01c 	add	sp, sp, #28
    9d94:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d98:	e30a3aab 	movw	r3, #43691	; 0xaaab
    9d9c:	e34a3aaa 	movt	r3, #43690	; 0xaaaa
    9da0:	e3a0c018 	mov	ip, #24
    9da4:	e3022844 	movw	r2, #10308	; 0x2844
    9da8:	e0810396 	umull	r0, r1, r6, r3
    9dac:	e3402001 	movt	r2, #1
    9db0:	e58db00c 	str	fp, [sp, #12]
    9db4:	e2843001 	add	r3, r4, #1
    9db8:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    9dbc:	e58d7008 	str	r7, [sp, #8]
    9dc0:	e58d8004 	str	r8, [sp, #4]
    9dc4:	e1cd01f0 	strd	r0, [sp, #16]
    9dc8:	e3001ee0 	movw	r1, #3808	; 0xee0
    9dcc:	e59d0014 	ldr	r0, [sp, #20]
    9dd0:	e3401001 	movt	r1, #1
    9dd4:	e1a0e220 	lsr	lr, r0, #4
    9dd8:	e1a00009 	mov	r0, r9
    9ddc:	e0666e9c 	mls	r6, ip, lr, r6
    9de0:	e58d6000 	str	r6, [sp]
    9de4:	eb0010b7 	bl	e0c8 <CString::Format(char const*, ...)>
    9de8:	e1a00009 	mov	r0, r9
    9dec:	e28dd01c 	add	sp, sp, #28
    9df0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9df4:	ebfffe71 	bl	97c0 <EnterCritical>
    9df8:	e5953010 	ldr	r3, [r5, #16]
    9dfc:	e595400c 	ldr	r4, [r5, #12]
    9e00:	e3530000 	cmp	r3, #0
    9e04:	e5959004 	ldr	r9, [r5, #4]
    9e08:	0affff8e 	beq	9c48 <CTimer::GetTimeString()+0x20>
    9e0c:	ebfffe99 	bl	9878 <LeaveCritical>
    9e10:	eaffff8c 	b	9c48 <CTimer::GetTimeString()+0x20>

00009e14 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    9e14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e18:	e24dd00c 	sub	sp, sp, #12
    9e1c:	e1a0a000 	mov	sl, r0
    9e20:	e3a00014 	mov	r0, #20
    9e24:	e1a06001 	mov	r6, r1
    9e28:	e1a04002 	mov	r4, r2
    9e2c:	e1a07003 	mov	r7, r3
    9e30:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    9e34:	ebfffe5b 	bl	97a8 <operator new(unsigned int)>
    9e38:	e59a1004 	ldr	r1, [sl, #4]
    9e3c:	e3540000 	cmp	r4, #0
    9e40:	e0816006 	add	r6, r1, r6
    9e44:	e1a09000 	mov	r9, r0
    9e48:	0a000044 	beq	9f60 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
    9e4c:	e59a001c 	ldr	r0, [sl, #28]
    9e50:	e3042d43 	movw	r2, #19779	; 0x4d43
    9e54:	e5894004 	str	r4, [r9, #4]
    9e58:	e3442b54 	movt	r2, #19284	; 0x4b54
    9e5c:	e3500000 	cmp	r0, #0
    9e60:	e5896008 	str	r6, [r9, #8]
    9e64:	e589700c 	str	r7, [r9, #12]
    9e68:	e5895010 	str	r5, [r9, #16]
    9e6c:	e5892000 	str	r2, [r9]
    9e70:	1a000038 	bne	9f58 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    9e74:	e28a5018 	add	r5, sl, #24
    9e78:	e1a00005 	mov	r0, r5
    9e7c:	eb0015bc 	bl	f574 <CPtrList::GetFirst()>
    9e80:	e2504000 	subs	r4, r0, #0
    9e84:	0a00002e 	beq	9f44 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    9e88:	e3007e78 	movw	r7, #3704	; 0xe78
    9e8c:	e3003f10 	movw	r3, #3856	; 0xf10
    9e90:	e3048d43 	movw	r8, #19779	; 0x4d43
    9e94:	e3403001 	movt	r3, #1
    9e98:	e3407001 	movt	r7, #1
    9e9c:	e58d3004 	str	r3, [sp, #4]
    9ea0:	e3448b54 	movt	r8, #19284	; 0x4b54
    9ea4:	ea000011 	b	9ef0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    9ea8:	e59bc000 	ldr	ip, [fp]
    9eac:	e3000f20 	movw	r0, #3872	; 0xf20
    9eb0:	e3002116 	movw	r2, #278	; 0x116
    9eb4:	e1a01007 	mov	r1, r7
    9eb8:	e15c0008 	cmp	ip, r8
    9ebc:	e3400001 	movt	r0, #1
    9ec0:	0a000000 	beq	9ec8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb4>
    9ec4:	eb000813 	bl	bf18 <assertion_failed>
    9ec8:	e59b3008 	ldr	r3, [fp, #8]
    9ecc:	e1a01004 	mov	r1, r4
    9ed0:	e1a00005 	mov	r0, r5
    9ed4:	e0433006 	sub	r3, r3, r6
    9ed8:	e3530000 	cmp	r3, #0
    9edc:	ca00000d 	bgt	9f18 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x104>
    9ee0:	eb0015a5 	bl	f57c <CPtrList::GetNext(TPtrListElement*)>
    9ee4:	e3500000 	cmp	r0, #0
    9ee8:	0a000015 	beq	9f44 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    9eec:	e1a04000 	mov	r4, r0
    9ef0:	e1a01004 	mov	r1, r4
    9ef4:	e1a00005 	mov	r0, r5
    9ef8:	eb0015b6 	bl	f5d8 <CPtrList::GetPtr(TPtrListElement*)>
    9efc:	e250b000 	subs	fp, r0, #0
    9f00:	1affffe8 	bne	9ea8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    9f04:	e3002115 	movw	r2, #277	; 0x115
    9f08:	e1a01007 	mov	r1, r7
    9f0c:	e59d0004 	ldr	r0, [sp, #4]
    9f10:	eb000800 	bl	bf18 <assertion_failed>
    9f14:	eaffffe3 	b	9ea8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    9f18:	e1a01004 	mov	r1, r4
    9f1c:	e1a00005 	mov	r0, r5
    9f20:	e1a02009 	mov	r2, r9
    9f24:	eb0015c2 	bl	f634 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    9f28:	e59a301c 	ldr	r3, [sl, #28]
    9f2c:	e3530000 	cmp	r3, #0
    9f30:	0a000000 	beq	9f38 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x124>
    9f34:	ebfffe4f 	bl	9878 <LeaveCritical>
    9f38:	e1a00009 	mov	r0, r9
    9f3c:	e28dd00c 	add	sp, sp, #12
    9f40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f44:	e1a01004 	mov	r1, r4
    9f48:	e1a00005 	mov	r0, r5
    9f4c:	e1a02009 	mov	r2, r9
    9f50:	eb0015fd 	bl	f74c <CPtrList::InsertAfter(TPtrListElement*, void*)>
    9f54:	eafffff3 	b	9f28 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x114>
    9f58:	ebfffe18 	bl	97c0 <EnterCritical>
    9f5c:	eaffffc4 	b	9e74 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x60>
    9f60:	e3001e78 	movw	r1, #3704	; 0xe78
    9f64:	e30201ec 	movw	r0, #8684	; 0x21ec
    9f68:	e3401001 	movt	r1, #1
    9f6c:	e3400001 	movt	r0, #1
    9f70:	e3002105 	movw	r2, #261	; 0x105
    9f74:	eb0007e7 	bl	bf18 <assertion_failed>
    9f78:	eaffffb3 	b	9e4c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

00009f7c <CTimer::CancelKernelTimer(unsigned int)>:
    9f7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9f80:	e2514000 	subs	r4, r1, #0
    9f84:	e1a05000 	mov	r5, r0
    9f88:	0a000022 	beq	a018 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
    9f8c:	e595001c 	ldr	r0, [r5, #28]
    9f90:	e3500000 	cmp	r0, #0
    9f94:	1a00001d 	bne	a010 <CTimer::CancelKernelTimer(unsigned int)+0x94>
    9f98:	e2856018 	add	r6, r5, #24
    9f9c:	e1a01004 	mov	r1, r4
    9fa0:	e1a00006 	mov	r0, r6
    9fa4:	eb001687 	bl	f9c8 <CPtrList::Find(void*)>
    9fa8:	e2507000 	subs	r7, r0, #0
    9fac:	0a000012 	beq	9ffc <CTimer::CancelKernelTimer(unsigned int)+0x80>
    9fb0:	e5942000 	ldr	r2, [r4]
    9fb4:	e3043d43 	movw	r3, #19779	; 0x4d43
    9fb8:	e3443b54 	movt	r3, #19284	; 0x4b54
    9fbc:	e1520003 	cmp	r2, r3
    9fc0:	0a000005 	beq	9fdc <CTimer::CancelKernelTimer(unsigned int)+0x60>
    9fc4:	e3001e78 	movw	r1, #3704	; 0xe78
    9fc8:	e3000eb8 	movw	r0, #3768	; 0xeb8
    9fcc:	e3401001 	movt	r1, #1
    9fd0:	e3400001 	movt	r0, #1
    9fd4:	e3002139 	movw	r2, #313	; 0x139
    9fd8:	eb0007ce 	bl	bf18 <assertion_failed>
    9fdc:	e1a01007 	mov	r1, r7
    9fe0:	e1a00006 	mov	r0, r6
    9fe4:	eb00161b 	bl	f858 <CPtrList::Remove(TPtrListElement*)>
    9fe8:	e3a03000 	mov	r3, #0
    9fec:	e1a00004 	mov	r0, r4
    9ff0:	e5843000 	str	r3, [r4]
    9ff4:	e3a01014 	mov	r1, #20
    9ff8:	ebfffdee 	bl	97b8 <operator delete(void*, unsigned int)>
    9ffc:	e595301c 	ldr	r3, [r5, #28]
    a000:	e3530000 	cmp	r3, #0
    a004:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a008:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a00c:	eafffe19 	b	9878 <LeaveCritical>
    a010:	ebfffdea 	bl	97c0 <EnterCritical>
    a014:	eaffffdf 	b	9f98 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    a018:	e3001e78 	movw	r1, #3704	; 0xe78
    a01c:	e3000eac 	movw	r0, #3756	; 0xeac
    a020:	e3401001 	movt	r1, #1
    a024:	e3400001 	movt	r0, #1
    a028:	e3002132 	movw	r2, #306	; 0x132
    a02c:	eb0007b9 	bl	bf18 <assertion_failed>
    a030:	eaffffd5 	b	9f8c <CTimer::CancelKernelTimer(unsigned int)+0x10>

0000a034 <CTimer::PollKernelTimers()>:
    a034:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a038:	e1a06000 	mov	r6, r0
    a03c:	e590001c 	ldr	r0, [r0, #28]
    a040:	e3500000 	cmp	r0, #0
    a044:	1a00004f 	bne	a188 <CTimer::PollKernelTimers()+0x154>
    a048:	e2867018 	add	r7, r6, #24
    a04c:	e1a00007 	mov	r0, r7
    a050:	eb001547 	bl	f574 <CPtrList::GetFirst()>
    a054:	e2505000 	subs	r5, r0, #0
    a058:	0a000040 	beq	a160 <CTimer::PollKernelTimers()+0x12c>
    a05c:	e3009e78 	movw	r9, #3704	; 0xe78
    a060:	e300aeac 	movw	sl, #3756	; 0xeac
    a064:	e3048d43 	movw	r8, #19779	; 0x4d43
    a068:	e3409001 	movt	r9, #1
    a06c:	e340a001 	movt	sl, #1
    a070:	e3448b54 	movt	r8, #19284	; 0x4b54
    a074:	ea000010 	b	a0bc <CTimer::PollKernelTimers()+0x88>
    a078:	e5945004 	ldr	r5, [r4, #4]
    a07c:	e3550000 	cmp	r5, #0
    a080:	0a00002d 	beq	a13c <CTimer::PollKernelTimers()+0x108>
    a084:	e5942010 	ldr	r2, [r4, #16]
    a088:	e1a00004 	mov	r0, r4
    a08c:	e594100c 	ldr	r1, [r4, #12]
    a090:	e12fff35 	blx	r5
    a094:	e3a03000 	mov	r3, #0
    a098:	e1a00004 	mov	r0, r4
    a09c:	e5843000 	str	r3, [r4]
    a0a0:	e3a01014 	mov	r1, #20
    a0a4:	ebfffdc3 	bl	97b8 <operator delete(void*, unsigned int)>
    a0a8:	e596001c 	ldr	r0, [r6, #28]
    a0ac:	e3500000 	cmp	r0, #0
    a0b0:	1a000027 	bne	a154 <CTimer::PollKernelTimers()+0x120>
    a0b4:	e25b5000 	subs	r5, fp, #0
    a0b8:	0a000028 	beq	a160 <CTimer::PollKernelTimers()+0x12c>
    a0bc:	e1a01005 	mov	r1, r5
    a0c0:	e1a00007 	mov	r0, r7
    a0c4:	eb001543 	bl	f5d8 <CPtrList::GetPtr(TPtrListElement*)>
    a0c8:	e2504000 	subs	r4, r0, #0
    a0cc:	0a000028 	beq	a174 <CTimer::PollKernelTimers()+0x140>
    a0d0:	e5943000 	ldr	r3, [r4]
    a0d4:	e1530008 	cmp	r3, r8
    a0d8:	0a000004 	beq	a0f0 <CTimer::PollKernelTimers()+0xbc>
    a0dc:	e3000eb8 	movw	r0, #3768	; 0xeb8
    a0e0:	e300214f 	movw	r2, #335	; 0x14f
    a0e4:	e3400001 	movt	r0, #1
    a0e8:	e1a01009 	mov	r1, r9
    a0ec:	eb000789 	bl	bf18 <assertion_failed>
    a0f0:	e5962004 	ldr	r2, [r6, #4]
    a0f4:	e5943008 	ldr	r3, [r4, #8]
    a0f8:	e0433002 	sub	r3, r3, r2
    a0fc:	e3530000 	cmp	r3, #0
    a100:	ca000016 	bgt	a160 <CTimer::PollKernelTimers()+0x12c>
    a104:	e1a01005 	mov	r1, r5
    a108:	e1a00007 	mov	r0, r7
    a10c:	eb00151a 	bl	f57c <CPtrList::GetNext(TPtrListElement*)>
    a110:	e1a01005 	mov	r1, r5
    a114:	e1a0b000 	mov	fp, r0
    a118:	e1a00007 	mov	r0, r7
    a11c:	eb0015cd 	bl	f858 <CPtrList::Remove(TPtrListElement*)>
    a120:	e596301c 	ldr	r3, [r6, #28]
    a124:	e3530000 	cmp	r3, #0
    a128:	0affffd2 	beq	a078 <CTimer::PollKernelTimers()+0x44>
    a12c:	ebfffdd1 	bl	9878 <LeaveCritical>
    a130:	e5945004 	ldr	r5, [r4, #4]
    a134:	e3550000 	cmp	r5, #0
    a138:	1affffd1 	bne	a084 <CTimer::PollKernelTimers()+0x50>
    a13c:	e30201ec 	movw	r0, #8684	; 0x21ec
    a140:	e300215d 	movw	r2, #349	; 0x15d
    a144:	e3400001 	movt	r0, #1
    a148:	e1a01009 	mov	r1, r9
    a14c:	eb000771 	bl	bf18 <assertion_failed>
    a150:	eaffffcb 	b	a084 <CTimer::PollKernelTimers()+0x50>
    a154:	ebfffd99 	bl	97c0 <EnterCritical>
    a158:	e25b5000 	subs	r5, fp, #0
    a15c:	1affffd6 	bne	a0bc <CTimer::PollKernelTimers()+0x88>
    a160:	e596301c 	ldr	r3, [r6, #28]
    a164:	e3530000 	cmp	r3, #0
    a168:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a16c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a170:	eafffdc0 	b	9878 <LeaveCritical>
    a174:	e300214e 	movw	r2, #334	; 0x14e
    a178:	e1a01009 	mov	r1, r9
    a17c:	e1a0000a 	mov	r0, sl
    a180:	eb000764 	bl	bf18 <assertion_failed>
    a184:	eaffffd1 	b	a0d0 <CTimer::PollKernelTimers()+0x9c>
    a188:	ebfffd8c 	bl	97c0 <EnterCritical>
    a18c:	eaffffad 	b	a048 <CTimer::PollKernelTimers()+0x14>

0000a190 <CTimer::InterruptHandler()>:
    a190:	e3a03a03 	mov	r3, #12288	; 0x3000
    a194:	e3433f00 	movt	r3, #16128	; 0x3f00
    a198:	e92d4010 	push	{r4, lr}
    a19c:	e1a04000 	mov	r4, r0
    a1a0:	e5933000 	ldr	r3, [r3]
    a1a4:	e3130008 	tst	r3, #8
    a1a8:	0a000036 	beq	a288 <CTimer::InterruptHandler()+0xf8>
    a1ac:	e3a03a03 	mov	r3, #12288	; 0x3000
    a1b0:	e3433f00 	movt	r3, #16128	; 0x3f00
    a1b4:	e3021710 	movw	r1, #10000	; 0x2710
    a1b8:	e5932018 	ldr	r2, [r3, #24]
    a1bc:	e0822001 	add	r2, r2, r1
    a1c0:	e5832018 	str	r2, [r3, #24]
    a1c4:	e5930004 	ldr	r0, [r3, #4]
    a1c8:	e1520000 	cmp	r2, r0
    a1cc:	35932004 	ldrcc	r2, [r3, #4]
    a1d0:	30821001 	addcc	r1, r2, r1
    a1d4:	35831018 	strcc	r1, [r3, #24]
    a1d8:	e3a03a03 	mov	r3, #12288	; 0x3000
    a1dc:	e3433f00 	movt	r3, #16128	; 0x3f00
    a1e0:	e3a02008 	mov	r2, #8
    a1e4:	e5832000 	str	r2, [r3]
    a1e8:	e5940010 	ldr	r0, [r4, #16]
    a1ec:	e3500000 	cmp	r0, #0
    a1f0:	1a000016 	bne	a250 <CTimer::InterruptHandler()+0xc0>
    a1f4:	e5943004 	ldr	r3, [r4, #4]
    a1f8:	e308051f 	movw	r0, #34079	; 0x851f
    a1fc:	e34501eb 	movt	r0, #20971	; 0x51eb
    a200:	e3a0c064 	mov	ip, #100	; 0x64
    a204:	e2833001 	add	r3, r3, #1
    a208:	e5843004 	str	r3, [r4, #4]
    a20c:	e0810093 	umull	r0, r1, r3, r0
    a210:	e1a022a1 	lsr	r2, r1, #5
    a214:	e062329c 	mls	r2, ip, r2, r3
    a218:	e3520000 	cmp	r2, #0
    a21c:	1a000008 	bne	a244 <CTimer::InterruptHandler()+0xb4>
    a220:	e5943008 	ldr	r3, [r4, #8]
    a224:	e2833001 	add	r3, r3, #1
    a228:	e5843008 	str	r3, [r4, #8]
    a22c:	e594300c 	ldr	r3, [r4, #12]
    a230:	e2833001 	add	r3, r3, #1
    a234:	e584300c 	str	r3, [r4, #12]
    a238:	e3520000 	cmp	r2, #0
    a23c:	0a000000 	beq	a244 <CTimer::InterruptHandler()+0xb4>
    a240:	ebfffd8c 	bl	9878 <LeaveCritical>
    a244:	e1a00004 	mov	r0, r4
    a248:	e8bd4010 	pop	{r4, lr}
    a24c:	eaffff78 	b	a034 <CTimer::PollKernelTimers()>
    a250:	ebfffd5a 	bl	97c0 <EnterCritical>
    a254:	e5943004 	ldr	r3, [r4, #4]
    a258:	e308051f 	movw	r0, #34079	; 0x851f
    a25c:	e34501eb 	movt	r0, #20971	; 0x51eb
    a260:	e2833001 	add	r3, r3, #1
    a264:	e3a0c064 	mov	ip, #100	; 0x64
    a268:	e5843004 	str	r3, [r4, #4]
    a26c:	e0810093 	umull	r0, r1, r3, r0
    a270:	e5942010 	ldr	r2, [r4, #16]
    a274:	e1a012a1 	lsr	r1, r1, #5
    a278:	e063319c 	mls	r3, ip, r1, r3
    a27c:	e3530000 	cmp	r3, #0
    a280:	1affffec 	bne	a238 <CTimer::InterruptHandler()+0xa8>
    a284:	eaffffe5 	b	a220 <CTimer::InterruptHandler()+0x90>
    a288:	e3001e78 	movw	r1, #3704	; 0xe78
    a28c:	e3000f48 	movw	r0, #3912	; 0xf48
    a290:	e3401001 	movt	r1, #1
    a294:	e3400001 	movt	r0, #1
    a298:	e300216f 	movw	r2, #367	; 0x16f
    a29c:	eb00071d 	bl	bf18 <assertion_failed>
    a2a0:	eaffffc1 	b	a1ac <CTimer::InterruptHandler()+0x1c>

0000a2a4 <CTimer::InterruptHandler(void*)>:
    a2a4:	e92d4010 	push	{r4, lr}
    a2a8:	e2504000 	subs	r4, r0, #0
    a2ac:	0a000002 	beq	a2bc <CTimer::InterruptHandler(void*)+0x18>
    a2b0:	e1a00004 	mov	r0, r4
    a2b4:	e8bd4010 	pop	{r4, lr}
    a2b8:	eaffffb4 	b	a190 <CTimer::InterruptHandler()>
    a2bc:	e3001e78 	movw	r1, #3704	; 0xe78
    a2c0:	e3000f6c 	movw	r0, #3948	; 0xf6c
    a2c4:	e3401001 	movt	r1, #1
    a2c8:	e3400001 	movt	r0, #1
    a2cc:	e3002191 	movw	r2, #401	; 0x191
    a2d0:	eb000710 	bl	bf18 <assertion_failed>
    a2d4:	e1a00004 	mov	r0, r4
    a2d8:	e8bd4010 	pop	{r4, lr}
    a2dc:	eaffffab 	b	a190 <CTimer::InterruptHandler()>

0000a2e0 <CTimer::TuneMsDelay()>:
    a2e0:	e92d4070 	push	{r4, r5, r6, lr}
    a2e4:	e1a04000 	mov	r4, r0
    a2e8:	e5943020 	ldr	r3, [r4, #32]
    a2ec:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a2f0:	e24dd008 	sub	sp, sp, #8
    a2f4:	e5946004 	ldr	r6, [r4, #4]
    a2f8:	e308551f 	movw	r5, #34079	; 0x851f
    a2fc:	e34551eb 	movt	r5, #20971	; 0x51eb
    a300:	e0000390 	mul	r0, r0, r3
    a304:	eb000f7b 	bl	e0f8 <DelayLoop>
    a308:	e5941004 	ldr	r1, [r4, #4]
    a30c:	e3020710 	movw	r0, #10000	; 0x2710
    a310:	e0411006 	sub	r1, r1, r6
    a314:	eb001727 	bl	ffb8 <__aeabi_uidiv>
    a318:	e3043dd3 	movw	r3, #19923	; 0x4dd3
    a31c:	e3413062 	movt	r3, #4194	; 0x1062
    a320:	e1a06000 	mov	r6, r0
    a324:	e5940020 	ldr	r0, [r4, #32]
    a328:	e0000690 	mul	r0, r0, r6
    a32c:	e0810590 	umull	r0, r1, r0, r5
    a330:	e1a022a1 	lsr	r2, r1, #5
    a334:	e5842020 	str	r2, [r4, #32]
    a338:	e2822f7d 	add	r2, r2, #500	; 0x1f4
    a33c:	e0832392 	umull	r2, r3, r2, r3
    a340:	e1a03323 	lsr	r3, r3, #6
    a344:	e5843024 	str	r3, [r4, #36]	; 0x24
    a348:	e0854596 	umull	r4, r5, r6, r5
    a34c:	eb000876 	bl	c52c <CLogger::Get()>
    a350:	e3a0e064 	mov	lr, #100	; 0x64
    a354:	e3a02003 	mov	r2, #3
    a358:	e59f1020 	ldr	r1, [pc, #32]	; a380 <CTimer::TuneMsDelay()+0xa0>
    a35c:	e3003f78 	movw	r3, #3960	; 0xf78
    a360:	e3403001 	movt	r3, #1
    a364:	e1a0c2a5 	lsr	ip, r5, #5
    a368:	e58dc000 	str	ip, [sp]
    a36c:	e0666c9e 	mls	r6, lr, ip, r6
    a370:	e58d6004 	str	r6, [sp, #4]
    a374:	eb000948 	bl	c89c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a378:	e28dd008 	add	sp, sp, #8
    a37c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a380:	00010e70 	.word	0x00010e70

0000a384 <CTimer::Initialize()>:
    a384:	e92d4010 	push	{r4, lr}
    a388:	e1a04000 	mov	r4, r0
    a38c:	e5900000 	ldr	r0, [r0]
    a390:	e3500000 	cmp	r0, #0
    a394:	0a000011 	beq	a3e0 <CTimer::Initialize()+0x5c>
    a398:	e1a03004 	mov	r3, r4
    a39c:	e3a01003 	mov	r1, #3
    a3a0:	e30a22a4 	movw	r2, #41636	; 0xa2a4
    a3a4:	e3402000 	movt	r2, #0
    a3a8:	eb0010b9 	bl	e694 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    a3ac:	e3a02a03 	mov	r2, #12288	; 0x3000
    a3b0:	e3432f00 	movt	r2, #16128	; 0x3f00
    a3b4:	e3a03df2 	mov	r3, #15488	; 0x3c80
    a3b8:	e34f3e36 	movt	r3, #65078	; 0xfe36
    a3bc:	e1a00004 	mov	r0, r4
    a3c0:	e5823004 	str	r3, [r2, #4]
    a3c4:	e5923004 	ldr	r3, [r2, #4]
    a3c8:	e2833c27 	add	r3, r3, #9984	; 0x2700
    a3cc:	e2833010 	add	r3, r3, #16
    a3d0:	e5823018 	str	r3, [r2, #24]
    a3d4:	ebffffc1 	bl	a2e0 <CTimer::TuneMsDelay()>
    a3d8:	e3a00001 	mov	r0, #1
    a3dc:	e8bd8010 	pop	{r4, pc}
    a3e0:	e3001e78 	movw	r1, #3704	; 0xe78
    a3e4:	e3000e94 	movw	r0, #3732	; 0xe94
    a3e8:	e3401001 	movt	r1, #1
    a3ec:	e3400001 	movt	r0, #1
    a3f0:	e3a02055 	mov	r2, #85	; 0x55
    a3f4:	eb0006c7 	bl	bf18 <assertion_failed>
    a3f8:	e5940000 	ldr	r0, [r4]
    a3fc:	eaffffe5 	b	a398 <CTimer::Initialize()+0x14>

0000a400 <CTimer::SimpleMsDelay(unsigned int)>:
    a400:	e2503000 	subs	r3, r0, #0
    a404:	012fff1e 	bxeq	lr
    a408:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a40c:	e0000390 	mul	r0, r0, r3
    a410:	e3500000 	cmp	r0, #0
    a414:	012fff1e 	bxeq	lr
    a418:	e3a02a03 	mov	r2, #12288	; 0x3000
    a41c:	e3432f00 	movt	r2, #16128	; 0x3f00
    a420:	e2800001 	add	r0, r0, #1
    a424:	e5921004 	ldr	r1, [r2, #4]
    a428:	e5923004 	ldr	r3, [r2, #4]
    a42c:	e0433001 	sub	r3, r3, r1
    a430:	e1500003 	cmp	r0, r3
    a434:	8afffffb 	bhi	a428 <CTimer::SimpleMsDelay(unsigned int)+0x28>
    a438:	e12fff1e 	bx	lr

0000a43c <CTimer::SimpleusDelay(unsigned int)>:
    a43c:	e3500000 	cmp	r0, #0
    a440:	012fff1e 	bxeq	lr
    a444:	e3a02a03 	mov	r2, #12288	; 0x3000
    a448:	e3432f00 	movt	r2, #16128	; 0x3f00
    a44c:	e2800001 	add	r0, r0, #1
    a450:	e5921004 	ldr	r1, [r2, #4]
    a454:	e5923004 	ldr	r3, [r2, #4]
    a458:	e0433001 	sub	r3, r3, r1
    a45c:	e1500003 	cmp	r0, r3
    a460:	8afffffb 	bhi	a454 <CTimer::SimpleusDelay(unsigned int)+0x18>
    a464:	e12fff1e 	bx	lr

0000a468 <CTimer::IsLeapYear(unsigned int)>:
    a468:	e308251f 	movw	r2, #34079	; 0x851f
    a46c:	e34521eb 	movt	r2, #20971	; 0x51eb
    a470:	e3a0c064 	mov	ip, #100	; 0x64
    a474:	e0832290 	umull	r2, r3, r0, r2
    a478:	e1a012a3 	lsr	r1, r3, #5
    a47c:	e061019c 	mls	r1, ip, r1, r0
    a480:	e3510000 	cmp	r1, #0
    a484:	0a000003 	beq	a498 <CTimer::IsLeapYear(unsigned int)+0x30>
    a488:	e3100003 	tst	r0, #3
    a48c:	03a00001 	moveq	r0, #1
    a490:	13a00000 	movne	r0, #0
    a494:	e12fff1e 	bx	lr
    a498:	e1a033a3 	lsr	r3, r3, #7
    a49c:	e3a02e19 	mov	r2, #400	; 0x190
    a4a0:	e0600392 	mls	r0, r2, r3, r0
    a4a4:	e16f0f10 	clz	r0, r0
    a4a8:	e1a002a0 	lsr	r0, r0, #5
    a4ac:	e12fff1e 	bx	lr

0000a4b0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    a4b0:	e3500001 	cmp	r0, #1
    a4b4:	0a000003 	beq	a4c8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    a4b8:	e3003e40 	movw	r3, #3648	; 0xe40
    a4bc:	e3403001 	movt	r3, #1
    a4c0:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    a4c4:	e12fff1e 	bx	lr
    a4c8:	e308251f 	movw	r2, #34079	; 0x851f
    a4cc:	e34521eb 	movt	r2, #20971	; 0x51eb
    a4d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a4d4:	e3a0e064 	mov	lr, #100	; 0x64
    a4d8:	e0832291 	umull	r2, r3, r1, r2
    a4dc:	e1a0c2a3 	lsr	ip, r3, #5
    a4e0:	e06c1c9e 	mls	ip, lr, ip, r1
    a4e4:	e35c0000 	cmp	ip, #0
    a4e8:	0a000008 	beq	a510 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    a4ec:	e3110003 	tst	r1, #3
    a4f0:	03a01001 	moveq	r1, #1
    a4f4:	13a01000 	movne	r1, #0
    a4f8:	e3510000 	cmp	r1, #0
    a4fc:	03003e40 	movweq	r3, #3648	; 0xe40
    a500:	03403001 	movteq	r3, #1
    a504:	13a0001d 	movne	r0, #29
    a508:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    a50c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a510:	e1a033a3 	lsr	r3, r3, #7
    a514:	e3a02e19 	mov	r2, #400	; 0x190
    a518:	e0611392 	mls	r1, r2, r3, r1
    a51c:	e16f1f11 	clz	r1, r1
    a520:	e1a012a1 	lsr	r1, r1, #5
    a524:	eafffff3 	b	a4f8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000a528 <CTimer::Get()>:
    a528:	e92d4010 	push	{r4, lr}
    a52c:	e3024994 	movw	r4, #10644	; 0x2994
    a530:	e3404001 	movt	r4, #1
    a534:	e5940000 	ldr	r0, [r4]
    a538:	e3500000 	cmp	r0, #0
    a53c:	18bd8010 	popne	{r4, pc}
    a540:	e30021d6 	movw	r2, #470	; 0x1d6
    a544:	e3001e78 	movw	r1, #3704	; 0xe78
    a548:	e3000f90 	movw	r0, #3984	; 0xf90
    a54c:	e3401001 	movt	r1, #1
    a550:	e3400001 	movt	r0, #1
    a554:	eb00066f 	bl	bf18 <assertion_failed>
    a558:	e5940000 	ldr	r0, [r4]
    a55c:	e8bd8010 	pop	{r4, pc}

0000a560 <memcpy>:
    a560:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    a564:	e352007f 	cmp	r2, #127	; 0x7f
    a568:	9a00000b 	bls	a59c <memcpy+0x3c>
    a56c:	e3110003 	tst	r1, #3
    a570:	1a000009 	bne	a59c <memcpy+0x3c>
    a574:	e3100003 	tst	r0, #3
    a578:	1a000007 	bne	a59c <memcpy+0x3c>
    a57c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    a580:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    a584:	e2422020 	sub	r2, r2, #32
    a588:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    a58c:	f5d1f040 	pld	[r1, #64]	; 0x40
    a590:	e352001f 	cmp	r2, #31
    a594:	8afffff9 	bhi	a580 <memcpy+0x20>
    a598:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    a59c:	e3520000 	cmp	r2, #0
    a5a0:	0a000003 	beq	a5b4 <memcpy+0x54>
    a5a4:	e4d13001 	ldrb	r3, [r1], #1
    a5a8:	e2522001 	subs	r2, r2, #1
    a5ac:	e4c03001 	strb	r3, [r0], #1
    a5b0:	1afffffb 	bne	a5a4 <memcpy+0x44>
    a5b4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    a5b8:	e12fff1e 	bx	lr

0000a5bc <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    a5bc:	e1a01000 	mov	r1, r0
    a5c0:	e3a0c00a 	mov	ip, #10
    a5c4:	e3a00000 	mov	r0, #0
    a5c8:	ea000007 	b	a5ec <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x30>
    a5cc:	e3720001 	cmn	r2, #1
    a5d0:	13a03000 	movne	r3, #0
    a5d4:	03a03001 	moveq	r3, #1
    a5d8:	e1500002 	cmp	r0, r2
    a5dc:	83833001 	orrhi	r3, r3, #1
    a5e0:	e1a00002 	mov	r0, r2
    a5e4:	e3530000 	cmp	r3, #0
    a5e8:	1a000007 	bne	a60c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x50>
    a5ec:	e0d120d1 	ldrsb	r2, [r1], #1
    a5f0:	e2423030 	sub	r3, r2, #48	; 0x30
    a5f4:	e3520000 	cmp	r2, #0
    a5f8:	e022309c 	mla	r2, ip, r0, r3
    a5fc:	e6ef3073 	uxtb	r3, r3
    a600:	012fff1e 	bxeq	lr
    a604:	e3530009 	cmp	r3, #9
    a608:	9affffef 	bls	a5cc <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x10>
    a60c:	e3e00000 	mvn	r0, #0
    a610:	e12fff1e 	bx	lr

0000a614 <CKernelOptions::~CKernelOptions()>:
    a614:	e3023998 	movw	r3, #10648	; 0x2998
    a618:	e3403001 	movt	r3, #1
    a61c:	e3a02000 	mov	r2, #0
    a620:	e5832000 	str	r2, [r3]
    a624:	e12fff1e 	bx	lr

0000a628 <CKernelOptions::GetWidth() const>:
    a628:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    a62c:	e12fff1e 	bx	lr

0000a630 <CKernelOptions::GetHeight() const>:
    a630:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    a634:	e12fff1e 	bx	lr

0000a638 <CKernelOptions::GetLogDevice() const>:
    a638:	e2800e81 	add	r0, r0, #2064	; 0x810
    a63c:	e2800008 	add	r0, r0, #8
    a640:	e12fff1e 	bx	lr

0000a644 <CKernelOptions::GetLogLevel() const>:
    a644:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    a648:	e12fff1e 	bx	lr

0000a64c <CKernelOptions::GetKeyMap() const>:
    a64c:	e2800e83 	add	r0, r0, #2096	; 0x830
    a650:	e12fff1e 	bx	lr

0000a654 <CKernelOptions::GetUSBPowerDelay() const>:
    a654:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    a658:	e12fff1e 	bx	lr

0000a65c <CKernelOptions::GetCPUSpeed() const>:
    a65c:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    a660:	e12fff1e 	bx	lr

0000a664 <CKernelOptions::GetSoCMaxTemp() const>:
    a664:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    a668:	e12fff1e 	bx	lr

0000a66c <CKernelOptions::Get()>:
    a66c:	e3023998 	movw	r3, #10648	; 0x2998
    a670:	e3403001 	movt	r3, #1
    a674:	e5930000 	ldr	r0, [r3]
    a678:	e12fff1e 	bx	lr

0000a67c <CKernelOptions::GetToken()>:
    a67c:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    a680:	e1d320d0 	ldrsb	r2, [r3]
    a684:	e3520000 	cmp	r2, #0
    a688:	1a000005 	bne	a6a4 <CKernelOptions::GetToken()+0x28>
    a68c:	ea000016 	b	a6ec <CKernelOptions::GetToken()+0x70>
    a690:	e2833001 	add	r3, r3, #1
    a694:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    a698:	e1d320d0 	ldrsb	r2, [r3]
    a69c:	e3520000 	cmp	r2, #0
    a6a0:	0a000011 	beq	a6ec <CKernelOptions::GetToken()+0x70>
    a6a4:	e3520020 	cmp	r2, #32
    a6a8:	0afffff8 	beq	a690 <CKernelOptions::GetToken()+0x14>
    a6ac:	e1a02003 	mov	r2, r3
    a6b0:	ea000000 	b	a6b8 <CKernelOptions::GetToken()+0x3c>
    a6b4:	e1a02001 	mov	r2, r1
    a6b8:	e2821001 	add	r1, r2, #1
    a6bc:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    a6c0:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    a6c4:	e35c0000 	cmp	ip, #0
    a6c8:	0a000008 	beq	a6f0 <CKernelOptions::GetToken()+0x74>
    a6cc:	e35c0020 	cmp	ip, #32
    a6d0:	1afffff7 	bne	a6b4 <CKernelOptions::GetToken()+0x38>
    a6d4:	e2822002 	add	r2, r2, #2
    a6d8:	e3a0c000 	mov	ip, #0
    a6dc:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    a6e0:	e1a00003 	mov	r0, r3
    a6e4:	e5c1c000 	strb	ip, [r1]
    a6e8:	e12fff1e 	bx	lr
    a6ec:	e3a03000 	mov	r3, #0
    a6f0:	e1a00003 	mov	r0, r3
    a6f4:	e12fff1e 	bx	lr

0000a6f8 <CKernelOptions::CKernelOptions()>:
    a6f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6fc:	e2807e81 	add	r7, r0, #2064	; 0x810
    a700:	e2877008 	add	r7, r7, #8
    a704:	e1a05000 	mov	r5, r0
    a708:	e2809e83 	add	r9, r0, #2096	; 0x830
    a70c:	e24dd01c 	sub	sp, sp, #28
    a710:	e3a04000 	mov	r4, #0
    a714:	e3a02004 	mov	r2, #4
    a718:	e3a0303c 	mov	r3, #60	; 0x3c
    a71c:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    a720:	e3001fd0 	movw	r1, #4048	; 0xfd0
    a724:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    a728:	e3401001 	movt	r1, #1
    a72c:	e1a00007 	mov	r0, r7
    a730:	e5854810 	str	r4, [r5, #2064]	; 0x810
    a734:	e5854814 	str	r4, [r5, #2068]	; 0x814
    a738:	e5854834 	str	r4, [r5, #2100]	; 0x834
    a73c:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    a740:	eb00166d 	bl	100fc <strcpy>
    a744:	e1a00009 	mov	r0, r9
    a748:	e3001fd8 	movw	r1, #4056	; 0xfd8
    a74c:	e3401001 	movt	r1, #1
    a750:	eb001669 	bl	100fc <strcpy>
    a754:	e3023998 	movw	r3, #10648	; 0x2998
    a758:	e3403001 	movt	r3, #1
    a75c:	e28d0010 	add	r0, sp, #16
    a760:	e5835000 	str	r5, [r3]
    a764:	ebfff7d3 	bl	86b8 <CBcmPropertyTags::CBcmPropertyTags()>
    a768:	e58d4000 	str	r4, [sp]
    a76c:	e1a02005 	mov	r2, r5
    a770:	e28d0010 	add	r0, sp, #16
    a774:	e3a01001 	mov	r1, #1
    a778:	e300380c 	movw	r3, #2060	; 0x80c
    a77c:	e3401005 	movt	r1, #5
    a780:	ebfff814 	bl	87d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a784:	e1500004 	cmp	r0, r4
    a788:	0a000040 	beq	a890 <CKernelOptions::CKernelOptions()+0x198>
    a78c:	e5953008 	ldr	r3, [r5, #8]
    a790:	e3530b02 	cmp	r3, #2048	; 0x800
    a794:	2a00003d 	bcs	a890 <CKernelOptions::CKernelOptions()+0x198>
    a798:	e0853003 	add	r3, r5, r3
    a79c:	e301602c 	movw	r6, #4140	; 0x102c
    a7a0:	e3008fdc 	movw	r8, #4060	; 0xfdc
    a7a4:	e300afe4 	movw	sl, #4068	; 0xfe4
    a7a8:	e3406001 	movt	r6, #1
    a7ac:	e3408001 	movt	r8, #1
    a7b0:	e340a001 	movt	sl, #1
    a7b4:	e5c3400c 	strb	r4, [r3, #12]
    a7b8:	e285300c 	add	r3, r5, #12
    a7bc:	e585380c 	str	r3, [r5, #2060]	; 0x80c
    a7c0:	e1a00005 	mov	r0, r5
    a7c4:	ebffffac 	bl	a67c <CKernelOptions::GetToken()>
    a7c8:	e250b000 	subs	fp, r0, #0
    a7cc:	0a00002f 	beq	a890 <CKernelOptions::CKernelOptions()+0x198>
    a7d0:	e1db30d0 	ldrsb	r3, [fp]
    a7d4:	e3530000 	cmp	r3, #0
    a7d8:	0a000008 	beq	a800 <CKernelOptions::CKernelOptions()+0x108>
    a7dc:	e353003d 	cmp	r3, #61	; 0x3d
    a7e0:	e1a0400b 	mov	r4, fp
    a7e4:	1a000002 	bne	a7f4 <CKernelOptions::CKernelOptions()+0xfc>
    a7e8:	ea00002d 	b	a8a4 <CKernelOptions::CKernelOptions()+0x1ac>
    a7ec:	e353003d 	cmp	r3, #61	; 0x3d
    a7f0:	0a00002b 	beq	a8a4 <CKernelOptions::CKernelOptions()+0x1ac>
    a7f4:	e1f430d1 	ldrsb	r3, [r4, #1]!
    a7f8:	e3530000 	cmp	r3, #0
    a7fc:	1afffffa 	bne	a7ec <CKernelOptions::CKernelOptions()+0xf4>
    a800:	e1a01006 	mov	r1, r6
    a804:	e1a0000b 	mov	r0, fp
    a808:	eb001620 	bl	10090 <strcmp>
    a80c:	e3500000 	cmp	r0, #0
    a810:	0affffea 	beq	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a814:	e1a01008 	mov	r1, r8
    a818:	e1a0000b 	mov	r0, fp
    a81c:	eb00161b 	bl	10090 <strcmp>
    a820:	e3500000 	cmp	r0, #0
    a824:	13a03000 	movne	r3, #0
    a828:	0affffe4 	beq	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a82c:	e1a0100a 	mov	r1, sl
    a830:	e1a0000b 	mov	r0, fp
    a834:	e58d300c 	str	r3, [sp, #12]
    a838:	eb001614 	bl	10090 <strcmp>
    a83c:	e59d300c 	ldr	r3, [sp, #12]
    a840:	e2504000 	subs	r4, r0, #0
    a844:	0a00002a 	beq	a8f4 <CKernelOptions::CKernelOptions()+0x1fc>
    a848:	e3001fec 	movw	r1, #4076	; 0xfec
    a84c:	e1a0000b 	mov	r0, fp
    a850:	e3401001 	movt	r1, #1
    a854:	e58d300c 	str	r3, [sp, #12]
    a858:	eb00160c 	bl	10090 <strcmp>
    a85c:	e59d300c 	ldr	r3, [sp, #12]
    a860:	e3500000 	cmp	r0, #0
    a864:	1a000028 	bne	a90c <CKernelOptions::CKernelOptions()+0x214>
    a868:	e3530000 	cmp	r3, #0
    a86c:	0affffd3 	beq	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a870:	e1d320d0 	ldrsb	r2, [r3]
    a874:	e3520000 	cmp	r2, #0
    a878:	0affffd0 	beq	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a87c:	e1a00003 	mov	r0, r3
    a880:	ebffff4d 	bl	a5bc <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a884:	e3500004 	cmp	r0, #4
    a888:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    a88c:	eaffffcb 	b	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a890:	e28d0010 	add	r0, sp, #16
    a894:	ebfff78d 	bl	86d0 <CBcmPropertyTags::~CBcmPropertyTags()>
    a898:	e1a00005 	mov	r0, r5
    a89c:	e28dd01c 	add	sp, sp, #28
    a8a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8a4:	e3a03000 	mov	r3, #0
    a8a8:	e1a01006 	mov	r1, r6
    a8ac:	e5c43000 	strb	r3, [r4]
    a8b0:	e1a0000b 	mov	r0, fp
    a8b4:	eb0015f5 	bl	10090 <strcmp>
    a8b8:	e2843001 	add	r3, r4, #1
    a8bc:	e3500000 	cmp	r0, #0
    a8c0:	1a000058 	bne	aa28 <CKernelOptions::CKernelOptions()+0x330>
    a8c4:	e3530000 	cmp	r3, #0
    a8c8:	0affffbc 	beq	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a8cc:	e1d420d1 	ldrsb	r2, [r4, #1]
    a8d0:	e3520000 	cmp	r2, #0
    a8d4:	0affffb9 	beq	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a8d8:	e1a00003 	mov	r0, r3
    a8dc:	ebffff36 	bl	a5bc <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a8e0:	e300353c 	movw	r3, #1340	; 0x53c
    a8e4:	e2402d0a 	sub	r2, r0, #640	; 0x280
    a8e8:	e1520003 	cmp	r2, r3
    a8ec:	95850810 	strls	r0, [r5, #2064]	; 0x810
    a8f0:	eaffffb2 	b	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a8f4:	e1a01003 	mov	r1, r3
    a8f8:	e3a02013 	mov	r2, #19
    a8fc:	e1a00007 	mov	r0, r7
    a900:	eb001608 	bl	10128 <strncpy>
    a904:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    a908:	eaffffac 	b	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a90c:	e3001ff8 	movw	r1, #4088	; 0xff8
    a910:	e1a0000b 	mov	r0, fp
    a914:	e3401001 	movt	r1, #1
    a918:	e58d300c 	str	r3, [sp, #12]
    a91c:	eb0015db 	bl	10090 <strcmp>
    a920:	e59d300c 	ldr	r3, [sp, #12]
    a924:	e2504000 	subs	r4, r0, #0
    a928:	1a000005 	bne	a944 <CKernelOptions::CKernelOptions()+0x24c>
    a92c:	e1a01003 	mov	r1, r3
    a930:	e3a02002 	mov	r2, #2
    a934:	e1a00009 	mov	r0, r9
    a938:	eb0015fa 	bl	10128 <strncpy>
    a93c:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    a940:	eaffff9e 	b	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a944:	e3011000 	movw	r1, #4096	; 0x1000
    a948:	e1a0000b 	mov	r0, fp
    a94c:	e3401001 	movt	r1, #1
    a950:	e58d300c 	str	r3, [sp, #12]
    a954:	eb0015cd 	bl	10090 <strcmp>
    a958:	e59d300c 	ldr	r3, [sp, #12]
    a95c:	e3500000 	cmp	r0, #0
    a960:	1a00000b 	bne	a994 <CKernelOptions::CKernelOptions()+0x29c>
    a964:	e3530000 	cmp	r3, #0
    a968:	0affff94 	beq	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a96c:	e1d320d0 	ldrsb	r2, [r3]
    a970:	e3520000 	cmp	r2, #0
    a974:	0affff91 	beq	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a978:	e1a00003 	mov	r0, r3
    a97c:	ebffff0e 	bl	a5bc <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a980:	e3013e78 	movw	r3, #7800	; 0x1e78
    a984:	e24020c8 	sub	r2, r0, #200	; 0xc8
    a988:	e1520003 	cmp	r2, r3
    a98c:	95850834 	strls	r0, [r5, #2100]	; 0x834
    a990:	eaffff8a 	b	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a994:	e3011010 	movw	r1, #4112	; 0x1010
    a998:	e1a0000b 	mov	r0, fp
    a99c:	e3401001 	movt	r1, #1
    a9a0:	e58d300c 	str	r3, [sp, #12]
    a9a4:	eb0015b9 	bl	10090 <strcmp>
    a9a8:	e59d300c 	ldr	r3, [sp, #12]
    a9ac:	e3500000 	cmp	r0, #0
    a9b0:	1a000007 	bne	a9d4 <CKernelOptions::CKernelOptions()+0x2dc>
    a9b4:	e1a00003 	mov	r0, r3
    a9b8:	e3011018 	movw	r1, #4120	; 0x1018
    a9bc:	e3401001 	movt	r1, #1
    a9c0:	eb0015b2 	bl	10090 <strcmp>
    a9c4:	e3500000 	cmp	r0, #0
    a9c8:	03a03001 	moveq	r3, #1
    a9cc:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    a9d0:	eaffff7a 	b	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    a9d4:	e1a0000b 	mov	r0, fp
    a9d8:	e3011020 	movw	r1, #4128	; 0x1020
    a9dc:	e3401001 	movt	r1, #1
    a9e0:	e58d300c 	str	r3, [sp, #12]
    a9e4:	eb0015a9 	bl	10090 <strcmp>
    a9e8:	e59d300c 	ldr	r3, [sp, #12]
    a9ec:	e2902000 	adds	r2, r0, #0
    a9f0:	13a02001 	movne	r2, #1
    a9f4:	e3530000 	cmp	r3, #0
    a9f8:	03822001 	orreq	r2, r2, #1
    a9fc:	e3520000 	cmp	r2, #0
    aa00:	1affff6e 	bne	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    aa04:	e1d320d0 	ldrsb	r2, [r3]
    aa08:	e3520000 	cmp	r2, #0
    aa0c:	0affff6b 	beq	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    aa10:	e1a00003 	mov	r0, r3
    aa14:	ebfffee8 	bl	a5bc <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    aa18:	e2403028 	sub	r3, r0, #40	; 0x28
    aa1c:	e3530026 	cmp	r3, #38	; 0x26
    aa20:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    aa24:	eaffff65 	b	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    aa28:	e1a01008 	mov	r1, r8
    aa2c:	e1a0000b 	mov	r0, fp
    aa30:	e58d300c 	str	r3, [sp, #12]
    aa34:	eb001595 	bl	10090 <strcmp>
    aa38:	e59d300c 	ldr	r3, [sp, #12]
    aa3c:	e3500000 	cmp	r0, #0
    aa40:	1affff79 	bne	a82c <CKernelOptions::CKernelOptions()+0x134>
    aa44:	e3530000 	cmp	r3, #0
    aa48:	0affff5c 	beq	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    aa4c:	e1d420d1 	ldrsb	r2, [r4, #1]
    aa50:	e3520000 	cmp	r2, #0
    aa54:	0affff59 	beq	a7c0 <CKernelOptions::CKernelOptions()+0xc8>
    aa58:	e1a00003 	mov	r0, r3
    aa5c:	ebfffed6 	bl	a5bc <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    aa60:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    aa64:	e3530f96 	cmp	r3, #600	; 0x258
    aa68:	95850814 	strls	r0, [r5, #2068]	; 0x814
    aa6c:	eaffff53 	b	a7c0 <CKernelOptions::CKernelOptions()+0xc8>

0000aa70 <CKernelOptions::GetOptionValue(char*)>:
    aa70:	e1d030d0 	ldrsb	r3, [r0]
    aa74:	e3530000 	cmp	r3, #0
    aa78:	1a000003 	bne	aa8c <CKernelOptions::GetOptionValue(char*)+0x1c>
    aa7c:	ea000007 	b	aaa0 <CKernelOptions::GetOptionValue(char*)+0x30>
    aa80:	e1f030d1 	ldrsb	r3, [r0, #1]!
    aa84:	e3530000 	cmp	r3, #0
    aa88:	0a000004 	beq	aaa0 <CKernelOptions::GetOptionValue(char*)+0x30>
    aa8c:	e353003d 	cmp	r3, #61	; 0x3d
    aa90:	1afffffa 	bne	aa80 <CKernelOptions::GetOptionValue(char*)+0x10>
    aa94:	e2803001 	add	r3, r0, #1
    aa98:	e3a02000 	mov	r2, #0
    aa9c:	e5c02000 	strb	r2, [r0]
    aaa0:	e1a00003 	mov	r0, r3
    aaa4:	e12fff1e 	bx	lr

0000aaa8 <CKernelOptions::GetDecimal(char*)>:
    aaa8:	e2503000 	subs	r3, r0, #0
    aaac:	0a000002 	beq	aabc <CKernelOptions::GetDecimal(char*)+0x14>
    aab0:	e1d330d0 	ldrsb	r3, [r3]
    aab4:	e3530000 	cmp	r3, #0
    aab8:	1a000001 	bne	aac4 <CKernelOptions::GetDecimal(char*)+0x1c>
    aabc:	e3e00000 	mvn	r0, #0
    aac0:	e12fff1e 	bx	lr
    aac4:	eafffebc 	b	a5bc <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000aac8 <CPageTable::CPageTable()>:
    aac8:	e3a01000 	mov	r1, #0
    aacc:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
    aad0:	e92d4010 	push	{r4, lr}
    aad4:	e1a0c001 	mov	ip, r1
    aad8:	e1a04000 	mov	r4, r0
    aadc:	e1a03002 	mov	r3, r2
    aae0:	e3a0e002 	mov	lr, #2
    aae4:	e3a00001 	mov	r0, #1
    aae8:	e8840006 	stm	r4, {r1, r2}
    aaec:	e5d32000 	ldrb	r2, [r3]
    aaf0:	e35c0b01 	cmp	ip, #1024	; 0x400
    aaf4:	e5d31002 	ldrb	r1, [r3, #2]
    aaf8:	e2833004 	add	r3, r3, #4
    aafc:	e7c1201e 	bfi	r2, lr, #0, #2
    ab00:	e3811001 	orr	r1, r1, #1
    ab04:	e6ef2072 	uxtb	r2, r2
    ab08:	e20110f9 	and	r1, r1, #249	; 0xf9
    ab0c:	e3822004 	orr	r2, r2, #4
    ab10:	e7c3119f 	bfc	r1, #3, #1
    ab14:	e20220f7 	and	r2, r2, #247	; 0xf7
    ab18:	e5431002 	strb	r1, [r3, #-2]
    ab1c:	e7c4221f 	bfc	r2, #4, #1
    ab20:	e5432004 	strb	r2, [r3, #-4]
    ab24:	e15320b4 	ldrh	r2, [r3, #-4]
    ab28:	e15310b2 	ldrh	r1, [r3, #-2]
    ab2c:	e7c8229f 	bfc	r2, #5, #4
    ab30:	e14320b4 	strh	r2, [r3, #-4]
    ab34:	e7cf121c 	bfi	r1, ip, #4, #12
    ab38:	e28cc001 	add	ip, ip, #1
    ab3c:	e1a02422 	lsr	r2, r2, #8
    ab40:	e14310b2 	strh	r1, [r3, #-2]
    ab44:	e20220fd 	and	r2, r2, #253	; 0xfd
    ab48:	e7c32110 	bfi	r2, r0, #2, #2
    ab4c:	e202208f 	and	r2, r2, #143	; 0x8f
    ab50:	e7c7239f 	bfc	r2, #7, #1
    ab54:	e5432003 	strb	r2, [r3, #-3]
    ab58:	25532004 	ldrbcs	r2, [r3, #-4]
    ab5c:	23822010 	orrcs	r2, r2, #16
    ab60:	25432004 	strbcs	r2, [r3, #-4]
    ab64:	e35c0a01 	cmp	ip, #4096	; 0x1000
    ab68:	1affffdf 	bne	aaec <CPageTable::CPageTable()+0x24>
    ab6c:	eb001238 	bl	f454 <CleanDataCache>
    ab70:	e1a00004 	mov	r0, r4
    ab74:	e8bd8010 	pop	{r4, pc}

0000ab78 <CPageTable::CPageTable(unsigned int)>:
    ab78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ab7c:	e3a03001 	mov	r3, #1
    ab80:	e5803000 	str	r3, [r0]
    ab84:	e1a04000 	mov	r4, r0
    ab88:	e1a05001 	mov	r5, r1
    ab8c:	eb001454 	bl	fce4 <palloc>
    ab90:	e3500000 	cmp	r0, #0
    ab94:	e5840004 	str	r0, [r4, #4]
    ab98:	0a00003e 	beq	ac98 <CPageTable::CPageTable(unsigned int)+0x120>
    ab9c:	e7eb3050 	ubfx	r3, r0, #0, #12
    aba0:	e3530000 	cmp	r3, #0
    aba4:	1a000033 	bne	ac78 <CPageTable::CPageTable(unsigned int)+0x100>
    aba8:	e3a02000 	mov	r2, #0
    abac:	e300c978 	movw	ip, #2424	; 0x978
    abb0:	e1a07002 	mov	r7, r2
    abb4:	e340c001 	movt	ip, #1
    abb8:	e3a06002 	mov	r6, #2
    abbc:	e3a0e001 	mov	lr, #1
    abc0:	ea000009 	b	abec <CPageTable::CPageTable(unsigned int)+0x74>
    abc4:	e6ef1073 	uxtb	r1, r3
    abc8:	e5d03002 	ldrb	r3, [r0, #2]
    abcc:	e7c31197 	bfi	r1, r7, #3, #1
    abd0:	e5c01000 	strb	r1, [r0]
    abd4:	e3833001 	orr	r3, r3, #1
    abd8:	e5c03002 	strb	r3, [r0, #2]
    abdc:	e2822601 	add	r2, r2, #1048576	; 0x100000
    abe0:	e2800004 	add	r0, r0, #4
    abe4:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    abe8:	0a00001f 	beq	ac6c <CPageTable::CPageTable(unsigned int)+0xf4>
    abec:	e5d03001 	ldrb	r3, [r0, #1]
    abf0:	e7e31a52 	ubfx	r1, r2, #20, #4
    abf4:	e152000c 	cmp	r2, ip
    abf8:	e386800c 	orr	r8, r6, #12
    abfc:	e20330fc 	and	r3, r3, #252	; 0xfc
    ac00:	e1a01201 	lsl	r1, r1, #4
    ac04:	e7c3311e 	bfi	r3, lr, #2, #2
    ac08:	e5c01002 	strb	r1, [r0, #2]
    ac0c:	e203308f 	and	r3, r3, #143	; 0x8f
    ac10:	e1a01c22 	lsr	r1, r2, #24
    ac14:	e7c7339f 	bfc	r3, #7, #1
    ac18:	e5c08000 	strb	r8, [r0]
    ac1c:	e5c03001 	strb	r3, [r0, #1]
    ac20:	e5c01003 	strb	r1, [r0, #3]
    ac24:	3affffec 	bcc	abdc <CPageTable::CPageTable(unsigned int)+0x64>
    ac28:	e1520005 	cmp	r2, r5
    ac2c:	e6ef3078 	uxtb	r3, r8
    ac30:	e3833010 	orr	r3, r3, #16
    ac34:	e5c03000 	strb	r3, [r0]
    ac38:	2affffe1 	bcs	abc4 <CPageTable::CPageTable(unsigned int)+0x4c>
    ac3c:	e3520501 	cmp	r2, #4194304	; 0x400000
    ac40:	1affffe5 	bne	abdc <CPageTable::CPageTable(unsigned int)+0x64>
    ac44:	e5d03000 	ldrb	r3, [r0]
    ac48:	e3a02605 	mov	r2, #5242880	; 0x500000
    ac4c:	e5d01002 	ldrb	r1, [r0, #2]
    ac50:	e2800004 	add	r0, r0, #4
    ac54:	e20330fb 	and	r3, r3, #251	; 0xfb
    ac58:	e7c33197 	bfi	r3, r7, #3, #1
    ac5c:	e3811001 	orr	r1, r1, #1
    ac60:	e5403004 	strb	r3, [r0, #-4]
    ac64:	e5401002 	strb	r1, [r0, #-2]
    ac68:	eaffffdf 	b	abec <CPageTable::CPageTable(unsigned int)+0x74>
    ac6c:	eb0011f8 	bl	f454 <CleanDataCache>
    ac70:	e1a00004 	mov	r0, r4
    ac74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ac78:	e3011034 	movw	r1, #4148	; 0x1034
    ac7c:	e3010054 	movw	r0, #4180	; 0x1054
    ac80:	e3401001 	movt	r1, #1
    ac84:	e3400001 	movt	r0, #1
    ac88:	e3a02051 	mov	r2, #81	; 0x51
    ac8c:	eb0004a1 	bl	bf18 <assertion_failed>
    ac90:	e5940004 	ldr	r0, [r4, #4]
    ac94:	eaffffc3 	b	aba8 <CPageTable::CPageTable(unsigned int)+0x30>
    ac98:	e3011034 	movw	r1, #4148	; 0x1034
    ac9c:	e3010044 	movw	r0, #4164	; 0x1044
    aca0:	e3401001 	movt	r1, #1
    aca4:	e3400001 	movt	r0, #1
    aca8:	e3a02050 	mov	r2, #80	; 0x50
    acac:	eb000499 	bl	bf18 <assertion_failed>
    acb0:	e5940004 	ldr	r0, [r4, #4]
    acb4:	eaffffb8 	b	ab9c <CPageTable::CPageTable(unsigned int)+0x24>

0000acb8 <CPageTable::~CPageTable()>:
    acb8:	e5903000 	ldr	r3, [r0]
    acbc:	e92d4010 	push	{r4, lr}
    acc0:	e3530000 	cmp	r3, #0
    acc4:	e1a04000 	mov	r4, r0
    acc8:	0a000001 	beq	acd4 <CPageTable::~CPageTable()+0x1c>
    accc:	e5900004 	ldr	r0, [r0, #4]
    acd0:	eb00143d 	bl	fdcc <pfree>
    acd4:	e1a00004 	mov	r0, r4
    acd8:	e8bd8010 	pop	{r4, pc}

0000acdc <CPageTable::GetBaseAddress() const>:
    acdc:	e5900004 	ldr	r0, [r0, #4]
    ace0:	e3800059 	orr	r0, r0, #89	; 0x59
    ace4:	e12fff1e 	bx	lr

0000ace8 <CScreenDevice::~CScreenDevice()>:
    ace8:	e590200c 	ldr	r2, [r0, #12]
    acec:	e59f3068 	ldr	r3, [pc, #104]	; ad5c <CScreenDevice::~CScreenDevice()+0x74>
    acf0:	e3520000 	cmp	r2, #0
    acf4:	e92d4070 	push	{r4, r5, r6, lr}
    acf8:	e1a04000 	mov	r4, r0
    acfc:	e5803000 	str	r3, [r0]
    ad00:	0a000003 	beq	ad14 <CScreenDevice::~CScreenDevice()+0x2c>
    ad04:	e5900018 	ldr	r0, [r0, #24]
    ad08:	e3500000 	cmp	r0, #0
    ad0c:	0a000000 	beq	ad14 <CScreenDevice::~CScreenDevice()+0x2c>
    ad10:	ebfffaa7 	bl	97b4 <operator delete[](void*)>
    ad14:	e5945010 	ldr	r5, [r4, #16]
    ad18:	e3a03000 	mov	r3, #0
    ad1c:	e5843018 	str	r3, [r4, #24]
    ad20:	e1550003 	cmp	r5, r3
    ad24:	0a000004 	beq	ad3c <CScreenDevice::~CScreenDevice()+0x54>
    ad28:	e1a00005 	mov	r0, r5
    ad2c:	eb001634 	bl	10604 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    ad30:	e1a00005 	mov	r0, r5
    ad34:	e3a01024 	mov	r1, #36	; 0x24
    ad38:	ebfffa9e 	bl	97b8 <operator delete(void*, unsigned int)>
    ad3c:	e3a03000 	mov	r3, #0
    ad40:	e2840014 	add	r0, r4, #20
    ad44:	e5843010 	str	r3, [r4, #16]
    ad48:	eb000499 	bl	bfb4 <CCharGenerator::~CCharGenerator()>
    ad4c:	e1a00004 	mov	r0, r4
    ad50:	eb0016ac 	bl	10808 <CDevice::~CDevice()>
    ad54:	e1a00004 	mov	r0, r4
    ad58:	e8bd8070 	pop	{r4, r5, r6, pc}
    ad5c:	0001107c 	.word	0x0001107c

0000ad60 <CScreenDevice::~CScreenDevice()>:
    ad60:	e92d4010 	push	{r4, lr}
    ad64:	e1a04000 	mov	r4, r0
    ad68:	ebffffde 	bl	ace8 <CScreenDevice::~CScreenDevice()>
    ad6c:	e1a00004 	mov	r0, r4
    ad70:	e3a01060 	mov	r1, #96	; 0x60
    ad74:	ebfffa8f 	bl	97b8 <operator delete(void*, unsigned int)>
    ad78:	e1a00004 	mov	r0, r4
    ad7c:	e8bd8010 	pop	{r4, pc}

0000ad80 <CScreenDevice::InvertCursor() [clone .part.6]>:
    ad80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ad84:	e2806014 	add	r6, r0, #20
    ad88:	e1a05000 	mov	r5, r0
    ad8c:	e3a08000 	mov	r8, #0
    ad90:	e1a00006 	mov	r0, r6
    ad94:	eb00048b 	bl	bfc8 <CCharGenerator::GetUnderline() const>
    ad98:	e1a07000 	mov	r7, r0
    ad9c:	e1a00006 	mov	r0, r6
    ada0:	eb000486 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    ada4:	e1500007 	cmp	r0, r7
    ada8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    adac:	e3a04000 	mov	r4, #0
    adb0:	ea000013 	b	ae04 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    adb4:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    adb8:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    adbc:	e0843003 	add	r3, r4, r3
    adc0:	e1530002 	cmp	r3, r2
    adc4:	2a00000d 	bcs	ae00 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    adc8:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    adcc:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    add0:	e0872002 	add	r2, r7, r2
    add4:	e1520001 	cmp	r2, r1
    add8:	2a000008 	bcs	ae00 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    addc:	e5950020 	ldr	r0, [r5, #32]
    ade0:	e5951018 	ldr	r1, [r5, #24]
    ade4:	e0233290 	mla	r3, r0, r2, r3
    ade8:	e1a03083 	lsl	r3, r3, #1
    adec:	e19120b3 	ldrh	r2, [r1, r3]
    adf0:	e3520000 	cmp	r2, #0
    adf4:	118180b3 	strhne	r8, [r1, r3]
    adf8:	01d524b8 	ldrheq	r2, [r5, #72]	; 0x48
    adfc:	018120b3 	strheq	r2, [r1, r3]
    ae00:	e2844001 	add	r4, r4, #1
    ae04:	e1a00006 	mov	r0, r6
    ae08:	eb00046a 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    ae0c:	e1500004 	cmp	r0, r4
    ae10:	8affffe7 	bhi	adb4 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    ae14:	e2877001 	add	r7, r7, #1
    ae18:	eaffffdf 	b	ad9c <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000ae1c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    ae1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ae20:	e1a04000 	mov	r4, r0
    ae24:	e1a05001 	mov	r5, r1
    ae28:	e1a07002 	mov	r7, r2
    ae2c:	e1a06003 	mov	r6, r3
    ae30:	eb001680 	bl	10838 <CDevice::CDevice()>
    ae34:	e59fc054 	ldr	ip, [pc, #84]	; ae90 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x74>
    ae38:	e2840014 	add	r0, r4, #20
    ae3c:	e5845004 	str	r5, [r4, #4]
    ae40:	e3a05000 	mov	r5, #0
    ae44:	e5847008 	str	r7, [r4, #8]
    ae48:	e584600c 	str	r6, [r4, #12]
    ae4c:	e584c000 	str	ip, [r4]
    ae50:	e5845010 	str	r5, [r4, #16]
    ae54:	eb000453 	bl	bfa8 <CCharGenerator::CCharGenerator()>
    ae58:	e3a03001 	mov	r3, #1
    ae5c:	e3e02020 	mvn	r2, #32
    ae60:	e5845018 	str	r5, [r4, #24]
    ae64:	e5845030 	str	r5, [r4, #48]	; 0x30
    ae68:	e1a00004 	mov	r0, r4
    ae6c:	e5845034 	str	r5, [r4, #52]	; 0x34
    ae70:	e584503c 	str	r5, [r4, #60]	; 0x3c
    ae74:	e5845040 	str	r5, [r4, #64]	; 0x40
    ae78:	e584504c 	str	r5, [r4, #76]	; 0x4c
    ae7c:	e5845058 	str	r5, [r4, #88]	; 0x58
    ae80:	e1c424b8 	strh	r2, [r4, #72]	; 0x48
    ae84:	e5843044 	str	r3, [r4, #68]	; 0x44
    ae88:	e584305c 	str	r3, [r4, #92]	; 0x5c
    ae8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ae90:	0001107c 	.word	0x0001107c

0000ae94 <CScreenDevice::GetWidth() const>:
    ae94:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    ae98:	e12fff1e 	bx	lr

0000ae9c <CScreenDevice::GetHeight() const>:
    ae9c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    aea0:	e12fff1e 	bx	lr

0000aea4 <CScreenDevice::GetColumns() const>:
    aea4:	e1a03000 	mov	r3, r0
    aea8:	e2800014 	add	r0, r0, #20
    aeac:	e92d4010 	push	{r4, lr}
    aeb0:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    aeb4:	eb00043f 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    aeb8:	e1a01000 	mov	r1, r0
    aebc:	e1a00004 	mov	r0, r4
    aec0:	eb00143c 	bl	ffb8 <__aeabi_uidiv>
    aec4:	e8bd8010 	pop	{r4, pc}

0000aec8 <CScreenDevice::GetRows() const>:
    aec8:	e1a03000 	mov	r3, r0
    aecc:	e2800014 	add	r0, r0, #20
    aed0:	e92d4010 	push	{r4, lr}
    aed4:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    aed8:	eb000438 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    aedc:	e1a01000 	mov	r1, r0
    aee0:	e1a00004 	mov	r0, r4
    aee4:	eb001433 	bl	ffb8 <__aeabi_uidiv>
    aee8:	e8bd8010 	pop	{r4, pc}

0000aeec <CScreenDevice::GetStatus()>:
    aeec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    aef0:	e591c038 	ldr	ip, [r1, #56]	; 0x38
    aef4:	e5916018 	ldr	r6, [r1, #24]
    aef8:	e591501c 	ldr	r5, [r1, #28]
    aefc:	e5914030 	ldr	r4, [r1, #48]	; 0x30
    af00:	e591e034 	ldr	lr, [r1, #52]	; 0x34
    af04:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
    af08:	e5806000 	str	r6, [r0]
    af0c:	e5917040 	ldr	r7, [r1, #64]	; 0x40
    af10:	e5805004 	str	r5, [r0, #4]
    af14:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    af18:	e5804008 	str	r4, [r0, #8]
    af1c:	e1d154b8 	ldrh	r5, [r1, #72]	; 0x48
    af20:	e580e00c 	str	lr, [r0, #12]
    af24:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    af28:	e580c010 	str	ip, [r0, #16]
    af2c:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    af30:	e5802014 	str	r2, [r0, #20]
    af34:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    af38:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    af3c:	e5807018 	str	r7, [r0, #24]
    af40:	e580601c 	str	r6, [r0, #28]
    af44:	e1c052b0 	strh	r5, [r0, #32]
    af48:	e5804024 	str	r4, [r0, #36]	; 0x24
    af4c:	e580e028 	str	lr, [r0, #40]	; 0x28
    af50:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    af54:	e5802030 	str	r2, [r0, #48]	; 0x30
    af58:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000af5c <CScreenDevice::SetStatus(TScreenStatus)>:
    af5c:	e24dd010 	sub	sp, sp, #16
    af60:	e92d4070 	push	{r4, r5, r6, lr}
    af64:	e28dc014 	add	ip, sp, #20
    af68:	e590e01c 	ldr	lr, [r0, #28]
    af6c:	e88c000e 	stm	ip, {r1, r2, r3}
    af70:	e59d3018 	ldr	r3, [sp, #24]
    af74:	e15e0003 	cmp	lr, r3
    af78:	0a000003 	beq	af8c <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    af7c:	e3a00000 	mov	r0, #0
    af80:	e8bd4070 	pop	{r4, r5, r6, lr}
    af84:	e28dd010 	add	sp, sp, #16
    af88:	e12fff1e 	bx	lr
    af8c:	e5902020 	ldr	r2, [r0, #32]
    af90:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    af94:	e1520003 	cmp	r2, r3
    af98:	1afffff7 	bne	af7c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    af9c:	e1a04000 	mov	r4, r0
    afa0:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    afa4:	e3500000 	cmp	r0, #0
    afa8:	1a000023 	bne	b03c <CScreenDevice::SetStatus(TScreenStatus)+0xe0>
    afac:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    afb0:	e3530000 	cmp	r3, #0
    afb4:	1afffff0 	bne	af7c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    afb8:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    afbc:	e3530000 	cmp	r3, #0
    afc0:	1affffed 	bne	af7c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    afc4:	e1a0200e 	mov	r2, lr
    afc8:	e59d1014 	ldr	r1, [sp, #20]
    afcc:	e5940018 	ldr	r0, [r4, #24]
    afd0:	ebfffd62 	bl	a560 <memcpy>
    afd4:	e59d201c 	ldr	r2, [sp, #28]
    afd8:	e59d3020 	ldr	r3, [sp, #32]
    afdc:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
    afe0:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
    afe4:	e3510000 	cmp	r1, #0
    afe8:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    afec:	e59de02c 	ldr	lr, [sp, #44]	; 0x2c
    aff0:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    aff4:	e1dd03b4 	ldrh	r0, [sp, #52]	; 0x34
    aff8:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    affc:	e5842030 	str	r2, [r4, #48]	; 0x30
    b000:	e5843034 	str	r3, [r4, #52]	; 0x34
    b004:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    b008:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    b00c:	e5846038 	str	r6, [r4, #56]	; 0x38
    b010:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b014:	e584e040 	str	lr, [r4, #64]	; 0x40
    b018:	e584c044 	str	ip, [r4, #68]	; 0x44
    b01c:	e1c404b8 	strh	r0, [r4, #72]	; 0x48
    b020:	e584104c 	str	r1, [r4, #76]	; 0x4c
    b024:	e5842050 	str	r2, [r4, #80]	; 0x50
    b028:	e5843054 	str	r3, [r4, #84]	; 0x54
    b02c:	1a00000f 	bne	b070 <CScreenDevice::SetStatus(TScreenStatus)+0x114>
    b030:	f57ff05f 	dmb	sy
    b034:	e3a00001 	mov	r0, #1
    b038:	eaffffd0 	b	af80 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    b03c:	ebfff9df 	bl	97c0 <EnterCritical>
    b040:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    b044:	e3530000 	cmp	r3, #0
    b048:	1a000003 	bne	b05c <CScreenDevice::SetStatus(TScreenStatus)+0x100>
    b04c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    b050:	e3530000 	cmp	r3, #0
    b054:	0594e01c 	ldreq	lr, [r4, #28]
    b058:	0affffd9 	beq	afc4 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    b05c:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b060:	e3530000 	cmp	r3, #0
    b064:	0affffc4 	beq	af7c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b068:	ebfffa02 	bl	9878 <LeaveCritical>
    b06c:	eaffffc2 	b	af7c <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b070:	ebfffa00 	bl	9878 <LeaveCritical>
    b074:	eaffffed 	b	b030 <CScreenDevice::SetStatus(TScreenStatus)+0xd4>

0000b078 <CScreenDevice::CarriageReturn()>:
    b078:	e3a03000 	mov	r3, #0
    b07c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b080:	e12fff1e 	bx	lr

0000b084 <CScreenDevice::CursorHome()>:
    b084:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b088:	e3a02000 	mov	r2, #0
    b08c:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b090:	e5803040 	str	r3, [r0, #64]	; 0x40
    b094:	e12fff1e 	bx	lr

0000b098 <CScreenDevice::CursorLeft()>:
    b098:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    b09c:	e92d4070 	push	{r4, r5, r6, lr}
    b0a0:	e3530000 	cmp	r3, #0
    b0a4:	e1a04000 	mov	r4, r0
    b0a8:	1a00000f 	bne	b0ec <CScreenDevice::CursorLeft()+0x54>
    b0ac:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b0b0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b0b4:	e1520003 	cmp	r2, r3
    b0b8:	98bd8070 	popls	{r4, r5, r6, pc}
    b0bc:	e2806014 	add	r6, r0, #20
    b0c0:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    b0c4:	e1a00006 	mov	r0, r6
    b0c8:	eb0003ba 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    b0cc:	e0455000 	sub	r5, r5, r0
    b0d0:	e1a00006 	mov	r0, r6
    b0d4:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b0d8:	eb0003b8 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b0dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b0e0:	e0430000 	sub	r0, r3, r0
    b0e4:	e5840040 	str	r0, [r4, #64]	; 0x40
    b0e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b0ec:	e2800014 	add	r0, r0, #20
    b0f0:	eb0003b0 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    b0f4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b0f8:	e0430000 	sub	r0, r3, r0
    b0fc:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b100:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b104 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b104:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b108:	e2806014 	add	r6, r0, #20
    b10c:	e1a05000 	mov	r5, r0
    b110:	e1a04002 	mov	r4, r2
    b114:	e1a00006 	mov	r0, r6
    b118:	e1a07001 	mov	r7, r1
    b11c:	eb0003a5 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    b120:	e2444001 	sub	r4, r4, #1
    b124:	e0040490 	mul	r4, r0, r4
    b128:	e1a00006 	mov	r0, r6
    b12c:	eb0003a3 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b130:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b134:	e1540003 	cmp	r4, r3
    b138:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    b13c:	e2477001 	sub	r7, r7, #1
    b140:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    b144:	e0000790 	mul	r0, r0, r7
    b148:	e1500003 	cmp	r0, r3
    b14c:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    b150:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    b154:	e1500003 	cmp	r0, r3
    b158:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    b15c:	35850040 	strcc	r0, [r5, #64]	; 0x40
    b160:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b164 <CScreenDevice::CursorUp()>:
    b164:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b168:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b16c:	e1520003 	cmp	r2, r3
    b170:	912fff1e 	bxls	lr
    b174:	e92d4010 	push	{r4, lr}
    b178:	e1a04000 	mov	r4, r0
    b17c:	e2800014 	add	r0, r0, #20
    b180:	eb00038e 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b184:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b188:	e0430000 	sub	r0, r3, r0
    b18c:	e5840040 	str	r0, [r4, #64]	; 0x40
    b190:	e8bd8010 	pop	{r4, pc}

0000b194 <CScreenDevice::DeleteChars(unsigned int)>:
    b194:	e12fff1e 	bx	lr

0000b198 <CScreenDevice::DeleteLines(unsigned int)>:
    b198:	e12fff1e 	bx	lr

0000b19c <CScreenDevice::InsertLines(unsigned int)>:
    b19c:	e12fff1e 	bx	lr

0000b1a0 <CScreenDevice::InsertMode(int)>:
    b1a0:	e580104c 	str	r1, [r0, #76]	; 0x4c
    b1a4:	e12fff1e 	bx	lr

0000b1a8 <CScreenDevice::ReverseScroll()>:
    b1a8:	e12fff1e 	bx	lr

0000b1ac <CScreenDevice::SetCursorMode(int)>:
    b1ac:	e5801044 	str	r1, [r0, #68]	; 0x44
    b1b0:	e12fff1e 	bx	lr

0000b1b4 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    b1b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b1b8:	e2807014 	add	r7, r0, #20
    b1bc:	e1a06000 	mov	r6, r0
    b1c0:	e1a05002 	mov	r5, r2
    b1c4:	e1a00007 	mov	r0, r7
    b1c8:	e1a04001 	mov	r4, r1
    b1cc:	eb00037b 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b1d0:	e2444001 	sub	r4, r4, #1
    b1d4:	e0040490 	mul	r4, r0, r4
    b1d8:	e1a00007 	mov	r0, r7
    b1dc:	eb000377 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b1e0:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    b1e4:	e0000095 	mul	r0, r5, r0
    b1e8:	e3500000 	cmp	r0, #0
    b1ec:	11540002 	cmpne	r4, r2
    b1f0:	33a03001 	movcc	r3, #1
    b1f4:	23a03000 	movcs	r3, #0
    b1f8:	e1500002 	cmp	r0, r2
    b1fc:	83a03000 	movhi	r3, #0
    b200:	92033001 	andls	r3, r3, #1
    b204:	e1540000 	cmp	r4, r0
    b208:	23a03000 	movcs	r3, #0
    b20c:	32033001 	andcc	r3, r3, #1
    b210:	e3530000 	cmp	r3, #0
    b214:	e3a03000 	mov	r3, #0
    b218:	15864034 	strne	r4, [r6, #52]	; 0x34
    b21c:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    b220:	15860038 	strne	r0, [r6, #56]	; 0x38
    b224:	e586303c 	str	r3, [r6, #60]	; 0x3c
    b228:	e5864040 	str	r4, [r6, #64]	; 0x40
    b22c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b230 <CScreenDevice::SetStandoutMode(unsigned int)>:
    b230:	e351001b 	cmp	r1, #27
    b234:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    b238:	ea00001d 	b	b2b4 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    b23c:	0000b2c4 	.word	0x0000b2c4
    b240:	0000b2b8 	.word	0x0000b2b8
    b244:	0000b2ac 	.word	0x0000b2ac
    b248:	0000b2b4 	.word	0x0000b2b4
    b24c:	0000b2b4 	.word	0x0000b2b4
    b250:	0000b2b4 	.word	0x0000b2b4
    b254:	0000b2b4 	.word	0x0000b2b4
    b258:	0000b2b4 	.word	0x0000b2b4
    b25c:	0000b2b4 	.word	0x0000b2b4
    b260:	0000b2b4 	.word	0x0000b2b4
    b264:	0000b2b4 	.word	0x0000b2b4
    b268:	0000b2b4 	.word	0x0000b2b4
    b26c:	0000b2b4 	.word	0x0000b2b4
    b270:	0000b2b4 	.word	0x0000b2b4
    b274:	0000b2b4 	.word	0x0000b2b4
    b278:	0000b2b4 	.word	0x0000b2b4
    b27c:	0000b2b4 	.word	0x0000b2b4
    b280:	0000b2b4 	.word	0x0000b2b4
    b284:	0000b2b4 	.word	0x0000b2b4
    b288:	0000b2b4 	.word	0x0000b2b4
    b28c:	0000b2b4 	.word	0x0000b2b4
    b290:	0000b2b4 	.word	0x0000b2b4
    b294:	0000b2b4 	.word	0x0000b2b4
    b298:	0000b2b4 	.word	0x0000b2b4
    b29c:	0000b2b4 	.word	0x0000b2b4
    b2a0:	0000b2b4 	.word	0x0000b2b4
    b2a4:	0000b2b4 	.word	0x0000b2b4
    b2a8:	0000b2c4 	.word	0x0000b2c4
    b2ac:	e3a0301f 	mov	r3, #31
    b2b0:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b2b4:	e12fff1e 	bx	lr
    b2b8:	e3a03b3e 	mov	r3, #63488	; 0xf800
    b2bc:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b2c0:	e12fff1e 	bx	lr
    b2c4:	e3e03020 	mvn	r3, #32
    b2c8:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    b2cc:	e12fff1e 	bx	lr

0000b2d0 <CScreenDevice::Scroll()>:
    b2d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b2d4:	e1a07000 	mov	r7, r0
    b2d8:	e2800014 	add	r0, r0, #20
    b2dc:	eb000337 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b2e0:	e5973034 	ldr	r3, [r7, #52]	; 0x34
    b2e4:	e5975020 	ldr	r5, [r7, #32]
    b2e8:	e5974038 	ldr	r4, [r7, #56]	; 0x38
    b2ec:	e5978018 	ldr	r8, [r7, #24]
    b2f0:	e0444003 	sub	r4, r4, r3
    b2f4:	e1a02085 	lsl	r2, r5, #1
    b2f8:	e0050395 	mul	r5, r5, r3
    b2fc:	e0885085 	add	r5, r8, r5, lsl #1
    b300:	e0444000 	sub	r4, r4, r0
    b304:	e1a06000 	mov	r6, r0
    b308:	e0040492 	mul	r4, r2, r4
    b30c:	e3540000 	cmp	r4, #0
    b310:	1a000007 	bne	b334 <CScreenDevice::Scroll()+0x64>
    b314:	e0020692 	mul	r2, r2, r6
    b318:	e1b02122 	lsrs	r2, r2, #2
    b31c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b320:	e1a00005 	mov	r0, r5
    b324:	e1a02102 	lsl	r2, r2, #2
    b328:	e3a01000 	mov	r1, #0
    b32c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    b330:	ea00132c 	b	ffe8 <memset>
    b334:	e0803003 	add	r3, r0, r3
    b338:	e3c4900f 	bic	r9, r4, #15
    b33c:	e1a00005 	mov	r0, r5
    b340:	e0288392 	mla	r8, r2, r3, r8
    b344:	e1a02009 	mov	r2, r9
    b348:	e1a01008 	mov	r1, r8
    b34c:	ebfffc83 	bl	a560 <memcpy>
    b350:	e204200e 	and	r2, r4, #14
    b354:	e0850009 	add	r0, r5, r9
    b358:	e0881009 	add	r1, r8, r9
    b35c:	ebfffc7f 	bl	a560 <memcpy>
    b360:	e5972020 	ldr	r2, [r7, #32]
    b364:	e3c44003 	bic	r4, r4, #3
    b368:	e0855004 	add	r5, r5, r4
    b36c:	e1a02082 	lsl	r2, r2, #1
    b370:	eaffffe7 	b	b314 <CScreenDevice::Scroll()+0x44>

0000b374 <CScreenDevice::CursorDown()>:
    b374:	e92d4070 	push	{r4, r5, r6, lr}
    b378:	e2805014 	add	r5, r0, #20
    b37c:	e1a04000 	mov	r4, r0
    b380:	e1a00005 	mov	r0, r5
    b384:	eb00030d 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b388:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b38c:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    b390:	e0800003 	add	r0, r0, r3
    b394:	e5840040 	str	r0, [r4, #64]	; 0x40
    b398:	e1500002 	cmp	r0, r2
    b39c:	38bd8070 	popcc	{r4, r5, r6, pc}
    b3a0:	e1a00004 	mov	r0, r4
    b3a4:	ebffffc9 	bl	b2d0 <CScreenDevice::Scroll()>
    b3a8:	e1a00005 	mov	r0, r5
    b3ac:	eb000303 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b3b0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b3b4:	e0430000 	sub	r0, r3, r0
    b3b8:	e5840040 	str	r0, [r4, #64]	; 0x40
    b3bc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b3c0 <CScreenDevice::NewLine()>:
    b3c0:	e3a02000 	mov	r2, #0
    b3c4:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b3c8:	eaffffe9 	b	b374 <CScreenDevice::CursorDown()>

0000b3cc <CScreenDevice::CursorRight()>:
    b3cc:	e92d4010 	push	{r4, lr}
    b3d0:	e1a04000 	mov	r4, r0
    b3d4:	e2800014 	add	r0, r0, #20
    b3d8:	eb0002f6 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    b3dc:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b3e0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    b3e4:	e0800003 	add	r0, r0, r3
    b3e8:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b3ec:	e1500002 	cmp	r0, r2
    b3f0:	38bd8010 	popcc	{r4, pc}
    b3f4:	e3a03000 	mov	r3, #0
    b3f8:	e1a00004 	mov	r0, r4
    b3fc:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b400:	e8bd4010 	pop	{r4, lr}
    b404:	eaffffda 	b	b374 <CScreenDevice::CursorDown()>

0000b408 <CScreenDevice::Tabulator()>:
    b408:	e92d4070 	push	{r4, r5, r6, lr}
    b40c:	e1a05000 	mov	r5, r0
    b410:	e2800014 	add	r0, r0, #20
    b414:	eb0002e7 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    b418:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    b41c:	e1a04180 	lsl	r4, r0, #3
    b420:	e0840003 	add	r0, r4, r3
    b424:	e1a01004 	mov	r1, r4
    b428:	eb0012e2 	bl	ffb8 <__aeabi_uidiv>
    b42c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b430:	e0000094 	mul	r0, r4, r0
    b434:	e1500003 	cmp	r0, r3
    b438:	e585003c 	str	r0, [r5, #60]	; 0x3c
    b43c:	38bd8070 	popcc	{r4, r5, r6, pc}
    b440:	e3a03000 	mov	r3, #0
    b444:	e1a00005 	mov	r0, r5
    b448:	e585303c 	str	r3, [r5, #60]	; 0x3c
    b44c:	e8bd4070 	pop	{r4, r5, r6, lr}
    b450:	eaffffc7 	b	b374 <CScreenDevice::CursorDown()>

0000b454 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    b454:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b458:	e2806014 	add	r6, r0, #20
    b45c:	e24dd00c 	sub	sp, sp, #12
    b460:	e1a07000 	mov	r7, r0
    b464:	e1a00006 	mov	r0, r6
    b468:	e1a0a001 	mov	sl, r1
    b46c:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    b470:	e1a09002 	mov	r9, r2
    b474:	e58d3004 	str	r3, [sp, #4]
    b478:	eb0002d0 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b47c:	e3a08000 	mov	r8, #0
    b480:	e1580000 	cmp	r8, r0
    b484:	2a000024 	bcs	b51c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
    b488:	e59d3004 	ldr	r3, [sp, #4]
    b48c:	e3a04000 	mov	r4, #0
    b490:	e0883003 	add	r3, r8, r3
    b494:	e58d3000 	str	r3, [sp]
    b498:	e1a00006 	mov	r0, r6
    b49c:	e0845009 	add	r5, r4, r9
    b4a0:	eb0002c4 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    b4a4:	e1a02004 	mov	r2, r4
    b4a8:	e1a03008 	mov	r3, r8
    b4ac:	e1a0100a 	mov	r1, sl
    b4b0:	e1540000 	cmp	r4, r0
    b4b4:	e1a00006 	mov	r0, r6
    b4b8:	e2844001 	add	r4, r4, #1
    b4bc:	2a000011 	bcs	b508 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb4>
    b4c0:	eb0002c2 	bl	bfd0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    b4c4:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    b4c8:	e3500000 	cmp	r0, #0
    b4cc:	11a0200b 	movne	r2, fp
    b4d0:	03a02000 	moveq	r2, #0
    b4d4:	e1550003 	cmp	r5, r3
    b4d8:	2affffee 	bcs	b498 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    b4dc:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    b4e0:	e59d1000 	ldr	r1, [sp]
    b4e4:	e1510003 	cmp	r1, r3
    b4e8:	2affffea 	bcs	b498 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    b4ec:	e5973020 	ldr	r3, [r7, #32]
    b4f0:	e59d0000 	ldr	r0, [sp]
    b4f4:	e5971018 	ldr	r1, [r7, #24]
    b4f8:	e0255093 	mla	r5, r3, r0, r5
    b4fc:	e1a05085 	lsl	r5, r5, #1
    b500:	e18120b5 	strh	r2, [r1, r5]
    b504:	eaffffe3 	b	b498 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    b508:	e1a00006 	mov	r0, r6
    b50c:	e2888001 	add	r8, r8, #1
    b510:	eb0002aa 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b514:	e1580000 	cmp	r8, r0
    b518:	3affffda 	bcc	b488 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    b51c:	e28dd00c 	add	sp, sp, #12
    b520:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b524 <CScreenDevice::DisplayChar(char)>:
    b524:	e6ef3071 	uxtb	r3, r1
    b528:	e353001f 	cmp	r3, #31
    b52c:	912fff1e 	bxls	lr
    b530:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    b534:	e92d4010 	push	{r4, lr}
    b538:	e24dd008 	sub	sp, sp, #8
    b53c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b540:	e1a04000 	mov	r4, r0
    b544:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    b548:	e58dc000 	str	ip, [sp]
    b54c:	ebffffc0 	bl	b454 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    b550:	e1a00004 	mov	r0, r4
    b554:	e28dd008 	add	sp, sp, #8
    b558:	e8bd4010 	pop	{r4, lr}
    b55c:	eaffff9a 	b	b3cc <CScreenDevice::CursorRight()>

0000b560 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    b560:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b564:	e3a08000 	mov	r8, #0
    b568:	e2805014 	add	r5, r0, #20
    b56c:	e1a0b000 	mov	fp, r0
    b570:	e1a06001 	mov	r6, r1
    b574:	e1a0a002 	mov	sl, r2
    b578:	e1a09008 	mov	r9, r8
    b57c:	e1a00005 	mov	r0, r5
    b580:	eb00028e 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b584:	e1580000 	cmp	r8, r0
    b588:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b58c:	e088700a 	add	r7, r8, sl
    b590:	e3a04000 	mov	r4, #0
    b594:	e1a00005 	mov	r0, r5
    b598:	eb000286 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    b59c:	e0843006 	add	r3, r4, r6
    b5a0:	e1540000 	cmp	r4, r0
    b5a4:	e2844001 	add	r4, r4, #1
    b5a8:	2a00000b 	bcs	b5dc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>
    b5ac:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    b5b0:	e1530002 	cmp	r3, r2
    b5b4:	2afffff6 	bcs	b594 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    b5b8:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
    b5bc:	e1570002 	cmp	r7, r2
    b5c0:	2afffff3 	bcs	b594 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    b5c4:	e59b2020 	ldr	r2, [fp, #32]
    b5c8:	e59b1018 	ldr	r1, [fp, #24]
    b5cc:	e0233792 	mla	r3, r2, r7, r3
    b5d0:	e1a03083 	lsl	r3, r3, #1
    b5d4:	e18190b3 	strh	r9, [r1, r3]
    b5d8:	eaffffed 	b	b594 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    b5dc:	e2888001 	add	r8, r8, #1
    b5e0:	eaffffe5 	b	b57c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000b5e4 <CScreenDevice::ClearLineEnd()>:
    b5e4:	e92d4070 	push	{r4, r5, r6, lr}
    b5e8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b5ec:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    b5f0:	e1540003 	cmp	r4, r3
    b5f4:	28bd8070 	popcs	{r4, r5, r6, pc}
    b5f8:	e2806014 	add	r6, r0, #20
    b5fc:	e1a05000 	mov	r5, r0
    b600:	e1a01004 	mov	r1, r4
    b604:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    b608:	e1a00005 	mov	r0, r5
    b60c:	ebffffd3 	bl	b560 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    b610:	e1a00006 	mov	r0, r6
    b614:	eb000267 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    b618:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b61c:	e0844000 	add	r4, r4, r0
    b620:	e1530004 	cmp	r3, r4
    b624:	8afffff5 	bhi	b600 <CScreenDevice::ClearLineEnd()+0x1c>
    b628:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b62c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    b62c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b630:	e2807014 	add	r7, r0, #20
    b634:	e1a05000 	mov	r5, r0
    b638:	e590803c 	ldr	r8, [r0, #60]	; 0x3c
    b63c:	e1a00007 	mov	r0, r7
    b640:	e1a06001 	mov	r6, r1
    b644:	eb00025b 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    b648:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b64c:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    b650:	e0268096 	mla	r6, r6, r0, r8
    b654:	e1560003 	cmp	r6, r3
    b658:	21a06003 	movcs	r6, r3
    b65c:	e1540006 	cmp	r4, r6
    b660:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    b664:	e1a01004 	mov	r1, r4
    b668:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    b66c:	e1a00005 	mov	r0, r5
    b670:	ebffffba 	bl	b560 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    b674:	e1a00007 	mov	r0, r7
    b678:	eb00024e 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    b67c:	e0844000 	add	r4, r4, r0
    b680:	e1540006 	cmp	r4, r6
    b684:	3afffff6 	bcc	b664 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    b688:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b68c <CScreenDevice::EraseChars(unsigned int)>:
    b68c:	e3510000 	cmp	r1, #0
    b690:	012fff1e 	bxeq	lr
    b694:	eaffffe4 	b	b62c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000b698 <CScreenDevice::ClearDisplayEnd()>:
    b698:	e92d4070 	push	{r4, r5, r6, lr}
    b69c:	e1a05000 	mov	r5, r0
    b6a0:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    b6a4:	e2806014 	add	r6, r0, #20
    b6a8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b6ac:	e1540003 	cmp	r4, r3
    b6b0:	2a000009 	bcs	b6dc <CScreenDevice::ClearDisplayEnd()+0x44>
    b6b4:	e1a01004 	mov	r1, r4
    b6b8:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    b6bc:	e1a00005 	mov	r0, r5
    b6c0:	ebffffa6 	bl	b560 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    b6c4:	e1a00006 	mov	r0, r6
    b6c8:	eb00023a 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    b6cc:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b6d0:	e0844000 	add	r4, r4, r0
    b6d4:	e1530004 	cmp	r3, r4
    b6d8:	8afffff5 	bhi	b6b4 <CScreenDevice::ClearDisplayEnd()+0x1c>
    b6dc:	e1a00006 	mov	r0, r6
    b6e0:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    b6e4:	eb000235 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b6e8:	e2851018 	add	r1, r5, #24
    b6ec:	e891000e 	ldm	r1, {r1, r2, r3}
    b6f0:	e0840000 	add	r0, r4, r0
    b6f4:	e0000093 	mul	r0, r3, r0
    b6f8:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    b6fc:	0a000004 	beq	b714 <CScreenDevice::ClearDisplayEnd()+0x7c>
    b700:	e0810080 	add	r0, r1, r0, lsl #1
    b704:	e1a02082 	lsl	r2, r2, #1
    b708:	e3a01000 	mov	r1, #0
    b70c:	e8bd4070 	pop	{r4, r5, r6, lr}
    b710:	ea001234 	b	ffe8 <memset>
    b714:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b718 <CScreenDevice::Write(char)>:
    b718:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    b71c:	e92d4010 	push	{r4, lr}
    b720:	e1a04000 	mov	r4, r0
    b724:	e24dd008 	sub	sp, sp, #8
    b728:	e3530007 	cmp	r3, #7
    b72c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b730:	ea000010 	b	b778 <CScreenDevice::Write(char)+0x60>
    b734:	0000b7c4 	.word	0x0000b7c4
    b738:	0000b824 	.word	0x0000b824
    b73c:	0000b840 	.word	0x0000b840
    b740:	0000b898 	.word	0x0000b898
    b744:	0000b974 	.word	0x0000b974
    b748:	0000b994 	.word	0x0000b994
    b74c:	0000b9b4 	.word	0x0000b9b4
    b750:	0000b788 	.word	0x0000b788
    b754:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    b758:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b75c:	e1520003 	cmp	r2, r3
    b760:	2a000004 	bcs	b778 <CScreenDevice::Write(char)+0x60>
    b764:	e2800014 	add	r0, r0, #20
    b768:	eb000214 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    b76c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b770:	e0433000 	sub	r3, r3, r0
    b774:	e5843040 	str	r3, [r4, #64]	; 0x40
    b778:	e3a03000 	mov	r3, #0
    b77c:	e5843030 	str	r3, [r4, #48]	; 0x30
    b780:	e28dd008 	add	sp, sp, #8
    b784:	e8bd8010 	pop	{r4, pc}
    b788:	e3510068 	cmp	r1, #104	; 0x68
    b78c:	0a000097 	beq	b9f0 <CScreenDevice::Write(char)+0x2d8>
    b790:	e351006c 	cmp	r1, #108	; 0x6c
    b794:	0a000095 	beq	b9f0 <CScreenDevice::Write(char)+0x2d8>
    b798:	e2411030 	sub	r1, r1, #48	; 0x30
    b79c:	e6ef3071 	uxtb	r3, r1
    b7a0:	e3530009 	cmp	r3, #9
    b7a4:	8afffff3 	bhi	b778 <CScreenDevice::Write(char)+0x60>
    b7a8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    b7ac:	e3a0200a 	mov	r2, #10
    b7b0:	e0211392 	mla	r1, r2, r3, r1
    b7b4:	e3510063 	cmp	r1, #99	; 0x63
    b7b8:	e5841050 	str	r1, [r4, #80]	; 0x50
    b7bc:	8affffed 	bhi	b778 <CScreenDevice::Write(char)+0x60>
    b7c0:	eaffffee 	b	b780 <CScreenDevice::Write(char)+0x68>
    b7c4:	e2413008 	sub	r3, r1, #8
    b7c8:	e3530013 	cmp	r3, #19
    b7cc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b7d0:	ea0000ec 	b	bb88 <CScreenDevice::Write(char)+0x470>
    b7d4:	0000ba5c 	.word	0x0000ba5c
    b7d8:	0000ba50 	.word	0x0000ba50
    b7dc:	0000ba3c 	.word	0x0000ba3c
    b7e0:	0000bb88 	.word	0x0000bb88
    b7e4:	0000bb88 	.word	0x0000bb88
    b7e8:	0000ba30 	.word	0x0000ba30
    b7ec:	0000bb88 	.word	0x0000bb88
    b7f0:	0000bb88 	.word	0x0000bb88
    b7f4:	0000bb88 	.word	0x0000bb88
    b7f8:	0000bb88 	.word	0x0000bb88
    b7fc:	0000bb88 	.word	0x0000bb88
    b800:	0000bb88 	.word	0x0000bb88
    b804:	0000bb88 	.word	0x0000bb88
    b808:	0000bb88 	.word	0x0000bb88
    b80c:	0000bb88 	.word	0x0000bb88
    b810:	0000bb88 	.word	0x0000bb88
    b814:	0000bb88 	.word	0x0000bb88
    b818:	0000bb88 	.word	0x0000bb88
    b81c:	0000bb88 	.word	0x0000bb88
    b820:	0000ba24 	.word	0x0000ba24
    b824:	e351004d 	cmp	r1, #77	; 0x4d
    b828:	0affffd2 	beq	b778 <CScreenDevice::Write(char)+0x60>
    b82c:	e351005b 	cmp	r1, #91	; 0x5b
    b830:	03a03002 	moveq	r3, #2
    b834:	05803030 	streq	r3, [r0, #48]	; 0x30
    b838:	0affffd0 	beq	b780 <CScreenDevice::Write(char)+0x68>
    b83c:	eaffffcd 	b	b778 <CScreenDevice::Write(char)+0x60>
    b840:	e241303f 	sub	r3, r1, #63	; 0x3f
    b844:	e3530011 	cmp	r3, #17
    b848:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b84c:	ea0000d9 	b	bbb8 <CScreenDevice::Write(char)+0x4a0>
    b850:	0000bb44 	.word	0x0000bb44
    b854:	0000bbb8 	.word	0x0000bbb8
    b858:	0000b754 	.word	0x0000b754
    b85c:	0000bb78 	.word	0x0000bb78
    b860:	0000bb68 	.word	0x0000bb68
    b864:	0000bbb8 	.word	0x0000bbb8
    b868:	0000bbb8 	.word	0x0000bbb8
    b86c:	0000bbb8 	.word	0x0000bbb8
    b870:	0000bbb8 	.word	0x0000bbb8
    b874:	0000bb50 	.word	0x0000bb50
    b878:	0000bbb8 	.word	0x0000bbb8
    b87c:	0000bb34 	.word	0x0000bb34
    b880:	0000bb24 	.word	0x0000bb24
    b884:	0000b778 	.word	0x0000b778
    b888:	0000b778 	.word	0x0000b778
    b88c:	0000bbb8 	.word	0x0000bbb8
    b890:	0000bbb8 	.word	0x0000bbb8
    b894:	0000b778 	.word	0x0000b778
    b898:	e241303b 	sub	r3, r1, #59	; 0x3b
    b89c:	e3530032 	cmp	r3, #50	; 0x32
    b8a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b8a4:	eaffffbb 	b	b798 <CScreenDevice::Write(char)+0x80>
    b8a8:	0000bb18 	.word	0x0000bb18
    b8ac:	0000b798 	.word	0x0000b798
    b8b0:	0000b798 	.word	0x0000b798
    b8b4:	0000b798 	.word	0x0000b798
    b8b8:	0000b798 	.word	0x0000b798
    b8bc:	0000b798 	.word	0x0000b798
    b8c0:	0000b798 	.word	0x0000b798
    b8c4:	0000b798 	.word	0x0000b798
    b8c8:	0000b798 	.word	0x0000b798
    b8cc:	0000b798 	.word	0x0000b798
    b8d0:	0000b798 	.word	0x0000b798
    b8d4:	0000b798 	.word	0x0000b798
    b8d8:	0000b798 	.word	0x0000b798
    b8dc:	0000b798 	.word	0x0000b798
    b8e0:	0000b798 	.word	0x0000b798
    b8e4:	0000b798 	.word	0x0000b798
    b8e8:	0000b798 	.word	0x0000b798
    b8ec:	0000b778 	.word	0x0000b778
    b8f0:	0000b778 	.word	0x0000b778
    b8f4:	0000b798 	.word	0x0000b798
    b8f8:	0000b798 	.word	0x0000b798
    b8fc:	0000b778 	.word	0x0000b778
    b900:	0000b798 	.word	0x0000b798
    b904:	0000b798 	.word	0x0000b798
    b908:	0000b798 	.word	0x0000b798
    b90c:	0000b798 	.word	0x0000b798
    b910:	0000b798 	.word	0x0000b798
    b914:	0000b798 	.word	0x0000b798
    b918:	0000b798 	.word	0x0000b798
    b91c:	0000ba68 	.word	0x0000ba68
    b920:	0000b798 	.word	0x0000b798
    b924:	0000b798 	.word	0x0000b798
    b928:	0000b798 	.word	0x0000b798
    b92c:	0000b798 	.word	0x0000b798
    b930:	0000b798 	.word	0x0000b798
    b934:	0000b798 	.word	0x0000b798
    b938:	0000b798 	.word	0x0000b798
    b93c:	0000b798 	.word	0x0000b798
    b940:	0000b798 	.word	0x0000b798
    b944:	0000b798 	.word	0x0000b798
    b948:	0000b798 	.word	0x0000b798
    b94c:	0000b798 	.word	0x0000b798
    b950:	0000b798 	.word	0x0000b798
    b954:	0000b798 	.word	0x0000b798
    b958:	0000b798 	.word	0x0000b798
    b95c:	0000ba7c 	.word	0x0000ba7c
    b960:	0000b798 	.word	0x0000b798
    b964:	0000b798 	.word	0x0000b798
    b968:	0000b798 	.word	0x0000b798
    b96c:	0000ba7c 	.word	0x0000ba7c
    b970:	0000ba98 	.word	0x0000ba98
    b974:	e2411030 	sub	r1, r1, #48	; 0x30
    b978:	e6ef3071 	uxtb	r3, r1
    b97c:	e3530009 	cmp	r3, #9
    b980:	8affff7c 	bhi	b778 <CScreenDevice::Write(char)+0x60>
    b984:	e3a03007 	mov	r3, #7
    b988:	e5801050 	str	r1, [r0, #80]	; 0x50
    b98c:	e5803030 	str	r3, [r0, #48]	; 0x30
    b990:	eaffff7a 	b	b780 <CScreenDevice::Write(char)+0x68>
    b994:	e2411030 	sub	r1, r1, #48	; 0x30
    b998:	e6ef3071 	uxtb	r3, r1
    b99c:	e3530009 	cmp	r3, #9
    b9a0:	8affff74 	bhi	b778 <CScreenDevice::Write(char)+0x60>
    b9a4:	e3a03006 	mov	r3, #6
    b9a8:	e5801054 	str	r1, [r0, #84]	; 0x54
    b9ac:	e5803030 	str	r3, [r0, #48]	; 0x30
    b9b0:	eaffff72 	b	b780 <CScreenDevice::Write(char)+0x68>
    b9b4:	e3510048 	cmp	r1, #72	; 0x48
    b9b8:	0a00008f 	beq	bbfc <CScreenDevice::Write(char)+0x4e4>
    b9bc:	e3510072 	cmp	r1, #114	; 0x72
    b9c0:	0a000011 	beq	ba0c <CScreenDevice::Write(char)+0x2f4>
    b9c4:	e2411030 	sub	r1, r1, #48	; 0x30
    b9c8:	e6ef3071 	uxtb	r3, r1
    b9cc:	e3530009 	cmp	r3, #9
    b9d0:	8affff68 	bhi	b778 <CScreenDevice::Write(char)+0x60>
    b9d4:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    b9d8:	e3a0200a 	mov	r2, #10
    b9dc:	e0211392 	mla	r1, r2, r3, r1
    b9e0:	e35100c7 	cmp	r1, #199	; 0xc7
    b9e4:	e5801054 	str	r1, [r0, #84]	; 0x54
    b9e8:	8affff62 	bhi	b778 <CScreenDevice::Write(char)+0x60>
    b9ec:	eaffff63 	b	b780 <CScreenDevice::Write(char)+0x68>
    b9f0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    b9f4:	e3530019 	cmp	r3, #25
    b9f8:	02411068 	subeq	r1, r1, #104	; 0x68
    b9fc:	016f1f11 	clzeq	r1, r1
    ba00:	01a012a1 	lsreq	r1, r1, #5
    ba04:	05841044 	streq	r1, [r4, #68]	; 0x44
    ba08:	eaffff5a 	b	b778 <CScreenDevice::Write(char)+0x60>
    ba0c:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    ba10:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    ba14:	ebfffde6 	bl	b1b4 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    ba18:	e3a03000 	mov	r3, #0
    ba1c:	e5843030 	str	r3, [r4, #48]	; 0x30
    ba20:	eaffff56 	b	b780 <CScreenDevice::Write(char)+0x68>
    ba24:	e3a03001 	mov	r3, #1
    ba28:	e5803030 	str	r3, [r0, #48]	; 0x30
    ba2c:	eaffff53 	b	b780 <CScreenDevice::Write(char)+0x68>
    ba30:	e3a03000 	mov	r3, #0
    ba34:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ba38:	eaffff50 	b	b780 <CScreenDevice::Write(char)+0x68>
    ba3c:	e3a03000 	mov	r3, #0
    ba40:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ba44:	e28dd008 	add	sp, sp, #8
    ba48:	e8bd4010 	pop	{r4, lr}
    ba4c:	eafffe48 	b	b374 <CScreenDevice::CursorDown()>
    ba50:	e28dd008 	add	sp, sp, #8
    ba54:	e8bd4010 	pop	{r4, lr}
    ba58:	eafffe6a 	b	b408 <CScreenDevice::Tabulator()>
    ba5c:	e28dd008 	add	sp, sp, #8
    ba60:	e8bd4010 	pop	{r4, lr}
    ba64:	eafffd8b 	b	b098 <CScreenDevice::CursorLeft()>
    ba68:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    ba6c:	e3510000 	cmp	r1, #0
    ba70:	0affff40 	beq	b778 <CScreenDevice::Write(char)+0x60>
    ba74:	ebfffeec 	bl	b62c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    ba78:	eaffff3e 	b	b778 <CScreenDevice::Write(char)+0x60>
    ba7c:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    ba80:	e3530004 	cmp	r3, #4
    ba84:	02411068 	subeq	r1, r1, #104	; 0x68
    ba88:	016f1f11 	clzeq	r1, r1
    ba8c:	01a012a1 	lsreq	r1, r1, #5
    ba90:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    ba94:	eaffff37 	b	b778 <CScreenDevice::Write(char)+0x60>
    ba98:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    ba9c:	e353001b 	cmp	r3, #27
    baa0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    baa4:	eaffff33 	b	b778 <CScreenDevice::Write(char)+0x60>
    baa8:	0000bbf0 	.word	0x0000bbf0
    baac:	0000bbe4 	.word	0x0000bbe4
    bab0:	0000bbd8 	.word	0x0000bbd8
    bab4:	0000b778 	.word	0x0000b778
    bab8:	0000b778 	.word	0x0000b778
    babc:	0000b778 	.word	0x0000b778
    bac0:	0000b778 	.word	0x0000b778
    bac4:	0000b778 	.word	0x0000b778
    bac8:	0000b778 	.word	0x0000b778
    bacc:	0000b778 	.word	0x0000b778
    bad0:	0000b778 	.word	0x0000b778
    bad4:	0000b778 	.word	0x0000b778
    bad8:	0000b778 	.word	0x0000b778
    badc:	0000b778 	.word	0x0000b778
    bae0:	0000b778 	.word	0x0000b778
    bae4:	0000b778 	.word	0x0000b778
    bae8:	0000b778 	.word	0x0000b778
    baec:	0000b778 	.word	0x0000b778
    baf0:	0000b778 	.word	0x0000b778
    baf4:	0000b778 	.word	0x0000b778
    baf8:	0000b778 	.word	0x0000b778
    bafc:	0000b778 	.word	0x0000b778
    bb00:	0000b778 	.word	0x0000b778
    bb04:	0000b778 	.word	0x0000b778
    bb08:	0000b778 	.word	0x0000b778
    bb0c:	0000b778 	.word	0x0000b778
    bb10:	0000b778 	.word	0x0000b778
    bb14:	0000bbf0 	.word	0x0000bbf0
    bb18:	e3a03005 	mov	r3, #5
    bb1c:	e5803030 	str	r3, [r0, #48]	; 0x30
    bb20:	eaffff16 	b	b780 <CScreenDevice::Write(char)+0x68>
    bb24:	ebfffeae 	bl	b5e4 <CScreenDevice::ClearLineEnd()>
    bb28:	e3a03000 	mov	r3, #0
    bb2c:	e5843030 	str	r3, [r4, #48]	; 0x30
    bb30:	eaffff12 	b	b780 <CScreenDevice::Write(char)+0x68>
    bb34:	ebfffed7 	bl	b698 <CScreenDevice::ClearDisplayEnd()>
    bb38:	e3a03000 	mov	r3, #0
    bb3c:	e5843030 	str	r3, [r4, #48]	; 0x30
    bb40:	eaffff0e 	b	b780 <CScreenDevice::Write(char)+0x68>
    bb44:	e3a03004 	mov	r3, #4
    bb48:	e5803030 	str	r3, [r0, #48]	; 0x30
    bb4c:	eaffff0b 	b	b780 <CScreenDevice::Write(char)+0x68>
    bb50:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    bb54:	e3a03000 	mov	r3, #0
    bb58:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bb5c:	e5803030 	str	r3, [r0, #48]	; 0x30
    bb60:	e5802040 	str	r2, [r0, #64]	; 0x40
    bb64:	eaffff05 	b	b780 <CScreenDevice::Write(char)+0x68>
    bb68:	ebfffe17 	bl	b3cc <CScreenDevice::CursorRight()>
    bb6c:	e3a03000 	mov	r3, #0
    bb70:	e5843030 	str	r3, [r4, #48]	; 0x30
    bb74:	eaffff01 	b	b780 <CScreenDevice::Write(char)+0x68>
    bb78:	ebfffdfd 	bl	b374 <CScreenDevice::CursorDown()>
    bb7c:	e3a03000 	mov	r3, #0
    bb80:	e5843030 	str	r3, [r4, #48]	; 0x30
    bb84:	eafffefd 	b	b780 <CScreenDevice::Write(char)+0x68>
    bb88:	e6ef3071 	uxtb	r3, r1
    bb8c:	e353001f 	cmp	r3, #31
    bb90:	9afffefa 	bls	b780 <CScreenDevice::Write(char)+0x68>
    bb94:	e1d0c4b8 	ldrh	ip, [r0, #72]	; 0x48
    bb98:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    bb9c:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    bba0:	e58dc000 	str	ip, [sp]
    bba4:	ebfffe2a 	bl	b454 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    bba8:	e1a00004 	mov	r0, r4
    bbac:	e28dd008 	add	sp, sp, #8
    bbb0:	e8bd4010 	pop	{r4, lr}
    bbb4:	eafffe04 	b	b3cc <CScreenDevice::CursorRight()>
    bbb8:	e2411030 	sub	r1, r1, #48	; 0x30
    bbbc:	e6ef3071 	uxtb	r3, r1
    bbc0:	e3530009 	cmp	r3, #9
    bbc4:	8afffeeb 	bhi	b778 <CScreenDevice::Write(char)+0x60>
    bbc8:	e3a03003 	mov	r3, #3
    bbcc:	e5801050 	str	r1, [r0, #80]	; 0x50
    bbd0:	e5803030 	str	r3, [r0, #48]	; 0x30
    bbd4:	eafffee9 	b	b780 <CScreenDevice::Write(char)+0x68>
    bbd8:	e3a0301f 	mov	r3, #31
    bbdc:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    bbe0:	eafffee4 	b	b778 <CScreenDevice::Write(char)+0x60>
    bbe4:	e3a03b3e 	mov	r3, #63488	; 0xf800
    bbe8:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    bbec:	eafffee1 	b	b778 <CScreenDevice::Write(char)+0x60>
    bbf0:	e3e03020 	mvn	r3, #32
    bbf4:	e1c034b8 	strh	r3, [r0, #72]	; 0x48
    bbf8:	eafffede 	b	b778 <CScreenDevice::Write(char)+0x60>
    bbfc:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    bc00:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    bc04:	ebfffd3e 	bl	b104 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    bc08:	e3a03000 	mov	r3, #0
    bc0c:	e5843030 	str	r3, [r4, #48]	; 0x30
    bc10:	eafffeda 	b	b780 <CScreenDevice::Write(char)+0x68>

0000bc14 <CScreenDevice::Write(void const*, unsigned int)>:
    bc14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bc18:	e1a05000 	mov	r5, r0
    bc1c:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
    bc20:	e1a06001 	mov	r6, r1
    bc24:	e1a08002 	mov	r8, r2
    bc28:	e3500000 	cmp	r0, #0
    bc2c:	1a000026 	bne	bccc <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    bc30:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    bc34:	e3a03001 	mov	r3, #1
    bc38:	e5853058 	str	r3, [r5, #88]	; 0x58
    bc3c:	e3540000 	cmp	r4, #0
    bc40:	1a00001a 	bne	bcb0 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    bc44:	e3580000 	cmp	r8, #0
    bc48:	e2487001 	sub	r7, r8, #1
    bc4c:	0a00000b 	beq	bc80 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    bc50:	e1a04006 	mov	r4, r6
    bc54:	e0d410d1 	ldrsb	r1, [r4], #1
    bc58:	e1a00005 	mov	r0, r5
    bc5c:	ebfffead 	bl	b718 <CScreenDevice::Write(char)>
    bc60:	e2643001 	rsb	r3, r4, #1
    bc64:	e0833007 	add	r3, r3, r7
    bc68:	e1760003 	cmn	r6, r3
    bc6c:	1afffff8 	bne	bc54 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    bc70:	e2874001 	add	r4, r7, #1
    bc74:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    bc78:	e3530000 	cmp	r3, #0
    bc7c:	1a000008 	bne	bca4 <CScreenDevice::Write(void const*, unsigned int)+0x90>
    bc80:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    bc84:	e3a02000 	mov	r2, #0
    bc88:	e5852058 	str	r2, [r5, #88]	; 0x58
    bc8c:	e1530002 	cmp	r3, r2
    bc90:	0a000000 	beq	bc98 <CScreenDevice::Write(void const*, unsigned int)+0x84>
    bc94:	ebfff6f7 	bl	9878 <LeaveCritical>
    bc98:	f57ff05f 	dmb	sy
    bc9c:	e1a00004 	mov	r0, r4
    bca0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bca4:	e1a00005 	mov	r0, r5
    bca8:	ebfffc34 	bl	ad80 <CScreenDevice::InvertCursor() [clone .part.6]>
    bcac:	eafffff3 	b	bc80 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    bcb0:	e1a00005 	mov	r0, r5
    bcb4:	e2487001 	sub	r7, r8, #1
    bcb8:	ebfffc30 	bl	ad80 <CScreenDevice::InvertCursor() [clone .part.6]>
    bcbc:	e3580000 	cmp	r8, #0
    bcc0:	1affffe2 	bne	bc50 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    bcc4:	e1a04008 	mov	r4, r8
    bcc8:	eaffffe9 	b	bc74 <CScreenDevice::Write(void const*, unsigned int)+0x60>
    bccc:	ebfff6bb 	bl	97c0 <EnterCritical>
    bcd0:	eaffffd6 	b	bc30 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000bcd4 <CScreenDevice::Initialize()>:
    bcd4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    bcd8:	e1a04000 	mov	r4, r0
    bcdc:	e590500c 	ldr	r5, [r0, #12]
    bce0:	e24dd00c 	sub	sp, sp, #12
    bce4:	e3550000 	cmp	r5, #0
    bce8:	0a00002b 	beq	bd9c <CScreenDevice::Initialize()+0xc8>
    bcec:	e5903004 	ldr	r3, [r0, #4]
    bcf0:	e5902008 	ldr	r2, [r0, #8]
    bcf4:	e5803024 	str	r3, [r0, #36]	; 0x24
    bcf8:	e0000392 	mul	r0, r2, r3
    bcfc:	e5843020 	str	r3, [r4, #32]
    bd00:	e5842028 	str	r2, [r4, #40]	; 0x28
    bd04:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    bd08:	e1a00080 	lsl	r0, r0, #1
    bd0c:	e584001c 	str	r0, [r4, #28]
    bd10:	23e00000 	mvncs	r0, #0
    bd14:	ebfff6a4 	bl	97ac <operator new[](unsigned int)>
    bd18:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    bd1c:	e5840018 	str	r0, [r4, #24]
    bd20:	e2846014 	add	r6, r4, #20
    bd24:	e1a00006 	mov	r0, r6
    bd28:	eb0000a4 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    bd2c:	e1a01000 	mov	r1, r0
    bd30:	e1a00007 	mov	r0, r7
    bd34:	eb00109f 	bl	ffb8 <__aeabi_uidiv>
    bd38:	e1a05000 	mov	r5, r0
    bd3c:	e1a00006 	mov	r0, r6
    bd40:	eb00009e 	bl	bfc0 <CCharGenerator::GetCharHeight() const>
    bd44:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    bd48:	e3a02000 	mov	r2, #0
    bd4c:	e584203c 	str	r2, [r4, #60]	; 0x3c
    bd50:	e5843040 	str	r3, [r4, #64]	; 0x40
    bd54:	e0050590 	mul	r5, r0, r5
    bd58:	e1a00004 	mov	r0, r4
    bd5c:	e584502c 	str	r5, [r4, #44]	; 0x2c
    bd60:	e5845038 	str	r5, [r4, #56]	; 0x38
    bd64:	ebfffe4b 	bl	b698 <CScreenDevice::ClearDisplayEnd()>
    bd68:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bd6c:	e3530000 	cmp	r3, #0
    bd70:	1a000031 	bne	be3c <CScreenDevice::Initialize()+0x168>
    bd74:	eb0001bf 	bl	c478 <CDeviceNameService::Get()>
    bd78:	e3001fd0 	movw	r1, #4048	; 0xfd0
    bd7c:	e1a02004 	mov	r2, r4
    bd80:	e3a03000 	mov	r3, #0
    bd84:	e3401001 	movt	r1, #1
    bd88:	e3a05001 	mov	r5, #1
    bd8c:	eb000145 	bl	c2a8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    bd90:	e1a00005 	mov	r0, r5
    bd94:	e28dd00c 	add	sp, sp, #12
    bd98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    bd9c:	e3a00024 	mov	r0, #36	; 0x24
    bda0:	ebfff680 	bl	97a8 <operator new(unsigned int)>
    bda4:	e5942008 	ldr	r2, [r4, #8]
    bda8:	e5941004 	ldr	r1, [r4, #4]
    bdac:	e3a03010 	mov	r3, #16
    bdb0:	e58d5004 	str	r5, [sp, #4]
    bdb4:	e58d5000 	str	r5, [sp]
    bdb8:	e1a06000 	mov	r6, r0
    bdbc:	eb0011c2 	bl	104cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    bdc0:	e5846010 	str	r6, [r4, #16]
    bdc4:	e1a00006 	mov	r0, r6
    bdc8:	eb001229 	bl	10674 <CBcmFrameBuffer::Initialize()>
    bdcc:	e3500000 	cmp	r0, #0
    bdd0:	0affffee 	beq	bd90 <CScreenDevice::Initialize()+0xbc>
    bdd4:	e5940010 	ldr	r0, [r4, #16]
    bdd8:	eb001260 	bl	10760 <CBcmFrameBuffer::GetDepth() const>
    bddc:	e3500010 	cmp	r0, #16
    bde0:	1affffea 	bne	bd90 <CScreenDevice::Initialize()+0xbc>
    bde4:	e5940010 	ldr	r0, [r4, #16]
    bde8:	eb00125e 	bl	10768 <CBcmFrameBuffer::GetBuffer() const>
    bdec:	e5840018 	str	r0, [r4, #24]
    bdf0:	e5940010 	ldr	r0, [r4, #16]
    bdf4:	eb00125d 	bl	10770 <CBcmFrameBuffer::GetSize() const>
    bdf8:	e584001c 	str	r0, [r4, #28]
    bdfc:	e5940010 	ldr	r0, [r4, #16]
    be00:	eb001254 	bl	10758 <CBcmFrameBuffer::GetPitch() const>
    be04:	e5840020 	str	r0, [r4, #32]
    be08:	e5940010 	ldr	r0, [r4, #16]
    be0c:	eb001249 	bl	10738 <CBcmFrameBuffer::GetWidth() const>
    be10:	e5840024 	str	r0, [r4, #36]	; 0x24
    be14:	e5940010 	ldr	r0, [r4, #16]
    be18:	eb001248 	bl	10740 <CBcmFrameBuffer::GetHeight() const>
    be1c:	e5943020 	ldr	r3, [r4, #32]
    be20:	e3130003 	tst	r3, #3
    be24:	01a030a3 	lsreq	r3, r3, #1
    be28:	05843020 	streq	r3, [r4, #32]
    be2c:	e1a07000 	mov	r7, r0
    be30:	e5840028 	str	r0, [r4, #40]	; 0x28
    be34:	0affffb9 	beq	bd20 <CScreenDevice::Initialize()+0x4c>
    be38:	eaffffd4 	b	bd90 <CScreenDevice::Initialize()+0xbc>
    be3c:	e1a00004 	mov	r0, r4
    be40:	ebfffbce 	bl	ad80 <CScreenDevice::InvertCursor() [clone .part.6]>
    be44:	eaffffca 	b	bd74 <CScreenDevice::Initialize()+0xa0>

0000be48 <CScreenDevice::InvertCursor()>:
    be48:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    be4c:	e3530000 	cmp	r3, #0
    be50:	012fff1e 	bxeq	lr
    be54:	eafffbc9 	b	ad80 <CScreenDevice::InvertCursor() [clone .part.6]>

0000be58 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    be58:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    be5c:	e15c0001 	cmp	ip, r1
    be60:	912fff1e 	bxls	lr
    be64:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    be68:	e15c0002 	cmp	ip, r2
    be6c:	8590c020 	ldrhi	ip, [r0, #32]
    be70:	85900018 	ldrhi	r0, [r0, #24]
    be74:	8022129c 	mlahi	r2, ip, r2, r1
    be78:	81a02082 	lslhi	r2, r2, #1
    be7c:	818030b2 	strhhi	r3, [r0, r2]
    be80:	e12fff1e 	bx	lr

0000be84 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    be84:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    be88:	e1530001 	cmp	r3, r1
    be8c:	9a000008 	bls	beb4 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    be90:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    be94:	e1530002 	cmp	r3, r2
    be98:	9a000005 	bls	beb4 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    be9c:	e590c020 	ldr	ip, [r0, #32]
    bea0:	e5903018 	ldr	r3, [r0, #24]
    bea4:	e022129c 	mla	r2, ip, r2, r1
    bea8:	e1a02082 	lsl	r2, r2, #1
    beac:	e19300b2 	ldrh	r0, [r3, r2]
    beb0:	e12fff1e 	bx	lr
    beb4:	e3a00000 	mov	r0, #0
    beb8:	e12fff1e 	bx	lr

0000bebc <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    bebc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    bec0:	e1a05000 	mov	r5, r0
    bec4:	e24dd00c 	sub	sp, sp, #12
    bec8:	e2800014 	add	r0, r0, #20
    becc:	e1a06002 	mov	r6, r2
    bed0:	e1a04001 	mov	r4, r1
    bed4:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    bed8:	eb000036 	bl	bfb8 <CCharGenerator::GetCharWidth() const>
    bedc:	e2044003 	and	r4, r4, #3
    bee0:	e2061003 	and	r1, r6, #3
    bee4:	e3013074 	movw	r3, #4212	; 0x1074
    bee8:	e3403001 	movt	r3, #1
    beec:	e0831001 	add	r1, r3, r1
    bef0:	e3a02b3e 	mov	r2, #63488	; 0xf800
    bef4:	e3a03000 	mov	r3, #0
    bef8:	e58d2000 	str	r2, [sp]
    befc:	e1d111dc 	ldrsb	r1, [r1, #28]
    bf00:	e0240094 	mla	r4, r4, r0, r0
    bf04:	e1a00005 	mov	r0, r5
    bf08:	e0472004 	sub	r2, r7, r4
    bf0c:	ebfffd50 	bl	b454 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    bf10:	e28dd00c 	add	sp, sp, #12
    bf14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000bf18 <assertion_failed>:
    bf18:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    bf1c:	e1a05000 	mov	r5, r0
    bf20:	e24dd01c 	sub	sp, sp, #28
    bf24:	e1a06001 	mov	r6, r1
    bf28:	e1a07002 	mov	r7, r2
    bf2c:	e1a0400d 	mov	r4, sp
    bf30:	eb000a3f 	bl	e834 <CInterruptSystem::DisableFIQ()>
    bf34:	f1080040 	cpsie	f
    bf38:	e28d0008 	add	r0, sp, #8
    bf3c:	eb000502 	bl	d34c <CString::CString()>
    bf40:	e1a03007 	mov	r3, r7
    bf44:	e1a02006 	mov	r2, r6
    bf48:	e28d0008 	add	r0, sp, #8
    bf4c:	e3011098 	movw	r1, #4248	; 0x1098
    bf50:	e3401001 	movt	r1, #1
    bf54:	eb00085b 	bl	e0c8 <CString::Format(char const*, ...)>
    bf58:	e28d0008 	add	r0, sp, #8
    bf5c:	eb000511 	bl	d3a8 <CString::operator char const*() const>
    bf60:	e1a01000 	mov	r1, r0
    bf64:	e1a00004 	mov	r0, r4
    bf68:	eb00007d 	bl	c164 <debug_stacktrace(unsigned int const*, char const*)>
    bf6c:	eb00016e 	bl	c52c <CLogger::Get()>
    bf70:	e1a04000 	mov	r4, r0
    bf74:	e28d0008 	add	r0, sp, #8
    bf78:	eb00050a 	bl	d3a8 <CString::operator char const*() const>
    bf7c:	e3a02000 	mov	r2, #0
    bf80:	e58d5000 	str	r5, [sp]
    bf84:	e30130a0 	movw	r3, #4256	; 0x10a0
    bf88:	e3403001 	movt	r3, #1
    bf8c:	e1a01000 	mov	r1, r0
    bf90:	e1a00004 	mov	r0, r4
    bf94:	eb000240 	bl	c89c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bf98:	e28d0008 	add	r0, sp, #8
    bf9c:	eb0004b7 	bl	d280 <CString::~CString()>
    bfa0:	e28dd01c 	add	sp, sp, #28
    bfa4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000bfa8 <CCharGenerator::CCharGenerator()>:
    bfa8:	e3a03008 	mov	r3, #8
    bfac:	e5803000 	str	r3, [r0]
    bfb0:	e12fff1e 	bx	lr

0000bfb4 <CCharGenerator::~CCharGenerator()>:
    bfb4:	e12fff1e 	bx	lr

0000bfb8 <CCharGenerator::GetCharWidth() const>:
    bfb8:	e5900000 	ldr	r0, [r0]
    bfbc:	e12fff1e 	bx	lr

0000bfc0 <CCharGenerator::GetCharHeight() const>:
    bfc0:	e3a00013 	mov	r0, #19
    bfc4:	e12fff1e 	bx	lr

0000bfc8 <CCharGenerator::GetUnderline() const>:
    bfc8:	e3a00010 	mov	r0, #16
    bfcc:	e12fff1e 	bx	lr

0000bfd0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    bfd0:	e6ef1071 	uxtb	r1, r1
    bfd4:	e92d4070 	push	{r4, r5, r6, lr}
    bfd8:	e2414021 	sub	r4, r1, #33	; 0x21
    bfdc:	e35400de 	cmp	r4, #222	; 0xde
    bfe0:	8a00000f 	bhi	c024 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    bfe4:	e1a06003 	mov	r6, r3
    bfe8:	e5903000 	ldr	r3, [r0]
    bfec:	e1a05002 	mov	r5, r2
    bff0:	e1530002 	cmp	r3, r2
    bff4:	9a00000c 	bls	c02c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    bff8:	e356000f 	cmp	r6, #15
    bffc:	8a000008 	bhi	c024 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    c000:	e30110b8 	movw	r1, #4280	; 0x10b8
    c004:	e3401001 	movt	r1, #1
    c008:	e0811204 	add	r1, r1, r4, lsl #4
    c00c:	e3a02080 	mov	r2, #128	; 0x80
    c010:	e7d13006 	ldrb	r3, [r1, r6]
    c014:	e0133552 	ands	r3, r3, r2, asr r5
    c018:	13a00001 	movne	r0, #1
    c01c:	03a00000 	moveq	r0, #0
    c020:	e8bd8070 	pop	{r4, r5, r6, pc}
    c024:	e3a00000 	mov	r0, #0
    c028:	e8bd8070 	pop	{r4, r5, r6, pc}
    c02c:	e3011ea8 	movw	r1, #7848	; 0x1ea8
    c030:	e3010ebc 	movw	r0, #7868	; 0x1ebc
    c034:	e3401001 	movt	r1, #1
    c038:	e3400001 	movt	r0, #1
    c03c:	e3a0204e 	mov	r2, #78	; 0x4e
    c040:	ebffffb4 	bl	bf18 <assertion_failed>
    c044:	e356000f 	cmp	r6, #15
    c048:	9affffec 	bls	c000 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    c04c:	eafffff4 	b	c024 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000c050 <debug_hexdump(void const*, unsigned int, char const*)>:
    c050:	e3520000 	cmp	r2, #0
    c054:	e3013ed4 	movw	r3, #7892	; 0x1ed4
    c058:	e3403001 	movt	r3, #1
    c05c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c060:	11a03002 	movne	r3, r2
    c064:	e24dd054 	sub	sp, sp, #84	; 0x54
    c068:	e1a06003 	mov	r6, r3
    c06c:	e1a05001 	mov	r5, r1
    c070:	e1a04000 	mov	r4, r0
    c074:	e58d304c 	str	r3, [sp, #76]	; 0x4c
    c078:	eb00012b 	bl	c52c <CLogger::Get()>
    c07c:	e58d4004 	str	r4, [sp, #4]
    c080:	e1a01006 	mov	r1, r6
    c084:	e58d5000 	str	r5, [sp]
    c088:	e3013edc 	movw	r3, #7900	; 0x1edc
    c08c:	e3a02004 	mov	r2, #4
    c090:	e3403001 	movt	r3, #1
    c094:	eb000200 	bl	c89c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c098:	e3550000 	cmp	r5, #0
    c09c:	0a00002a 	beq	c14c <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    c0a0:	e3019f00 	movw	r9, #7936	; 0x1f00
    c0a4:	e3409001 	movt	r9, #1
    c0a8:	eb00011f 	bl	c52c <CLogger::Get()>
    c0ac:	e5d4800f 	ldrb	r8, [r4, #15]
    c0b0:	e5d4700e 	ldrb	r7, [r4, #14]
    c0b4:	e6ffc074 	uxth	ip, r4
    c0b8:	e5d4600d 	ldrb	r6, [r4, #13]
    c0bc:	e1a03009 	mov	r3, r9
    c0c0:	e5d4e00c 	ldrb	lr, [r4, #12]
    c0c4:	e3a02004 	mov	r2, #4
    c0c8:	e5d4b00b 	ldrb	fp, [r4, #11]
    c0cc:	e2844010 	add	r4, r4, #16
    c0d0:	e554a006 	ldrb	sl, [r4, #-6]
    c0d4:	e58d8040 	str	r8, [sp, #64]	; 0x40
    c0d8:	e5548007 	ldrb	r8, [r4, #-7]
    c0dc:	e58d703c 	str	r7, [sp, #60]	; 0x3c
    c0e0:	e5547008 	ldrb	r7, [r4, #-8]
    c0e4:	e58d6038 	str	r6, [sp, #56]	; 0x38
    c0e8:	e5546009 	ldrb	r6, [r4, #-9]
    c0ec:	e58de034 	str	lr, [sp, #52]	; 0x34
    c0f0:	e554e00a 	ldrb	lr, [r4, #-10]
    c0f4:	e58db030 	str	fp, [sp, #48]	; 0x30
    c0f8:	e554b00b 	ldrb	fp, [r4, #-11]
    c0fc:	e58da02c 	str	sl, [sp, #44]	; 0x2c
    c100:	e554a00c 	ldrb	sl, [r4, #-12]
    c104:	e58d8028 	str	r8, [sp, #40]	; 0x28
    c108:	e554800d 	ldrb	r8, [r4, #-13]
    c10c:	e58d7024 	str	r7, [sp, #36]	; 0x24
    c110:	e554700e 	ldrb	r7, [r4, #-14]
    c114:	e58d6020 	str	r6, [sp, #32]
    c118:	e554600f 	ldrb	r6, [r4, #-15]
    c11c:	e58de01c 	str	lr, [sp, #28]
    c120:	e554e010 	ldrb	lr, [r4, #-16]
    c124:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
    c128:	e58db018 	str	fp, [sp, #24]
    c12c:	e58da014 	str	sl, [sp, #20]
    c130:	e58d8010 	str	r8, [sp, #16]
    c134:	e58d700c 	str	r7, [sp, #12]
    c138:	e58d6008 	str	r6, [sp, #8]
    c13c:	e88d5000 	stm	sp, {ip, lr}
    c140:	eb0001d5 	bl	c89c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c144:	e355000f 	cmp	r5, #15
    c148:	8a000001 	bhi	c154 <debug_hexdump(void const*, unsigned int, char const*)+0x104>
    c14c:	e28dd054 	add	sp, sp, #84	; 0x54
    c150:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c154:	e2555010 	subs	r5, r5, #16
    c158:	1affffd2 	bne	c0a8 <debug_hexdump(void const*, unsigned int, char const*)+0x58>
    c15c:	e28dd054 	add	sp, sp, #84	; 0x54
    c160:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c164 <debug_stacktrace(unsigned int const*, char const*)>:
    c164:	e3510000 	cmp	r1, #0
    c168:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c16c:	e3017ed4 	movw	r7, #7892	; 0x1ed4
    c170:	e3006978 	movw	r6, #2424	; 0x978
    c174:	e3407001 	movt	r7, #1
    c178:	e3018f58 	movw	r8, #8024	; 0x1f58
    c17c:	e24dd008 	sub	sp, sp, #8
    c180:	11a07001 	movne	r7, r1
    c184:	e3406001 	movt	r6, #1
    c188:	e3408001 	movt	r8, #1
    c18c:	e1a05000 	mov	r5, r0
    c190:	e3a04000 	mov	r4, #0
    c194:	ea000003 	b	c1a8 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    c198:	e2844001 	add	r4, r4, #1
    c19c:	e2855004 	add	r5, r5, #4
    c1a0:	e3540040 	cmp	r4, #64	; 0x40
    c1a4:	0a000010 	beq	c1ec <debug_stacktrace(unsigned int const*, char const*)+0x88>
    c1a8:	e5953000 	ldr	r3, [r5]
    c1ac:	e3530902 	cmp	r3, #32768	; 0x8000
    c1b0:	3afffff8 	bcc	c198 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c1b4:	e1530006 	cmp	r3, r6
    c1b8:	2afffff6 	bcs	c198 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    c1bc:	eb0000da 	bl	c52c <CLogger::Get()>
    c1c0:	e595c000 	ldr	ip, [r5]
    c1c4:	e1a03008 	mov	r3, r8
    c1c8:	e58d4000 	str	r4, [sp]
    c1cc:	e3a02004 	mov	r2, #4
    c1d0:	e1a01007 	mov	r1, r7
    c1d4:	e58dc004 	str	ip, [sp, #4]
    c1d8:	e2844001 	add	r4, r4, #1
    c1dc:	eb0001ae 	bl	c89c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c1e0:	e3540040 	cmp	r4, #64	; 0x40
    c1e4:	e2855004 	add	r5, r5, #4
    c1e8:	1affffee 	bne	c1a8 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    c1ec:	e28dd008 	add	sp, sp, #8
    c1f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c1f4 <CDeviceNameService::CDeviceNameService()>:
    c1f4:	e92d4070 	push	{r4, r5, r6, lr}
    c1f8:	e302599c 	movw	r5, #10652	; 0x299c
    c1fc:	e3405001 	movt	r5, #1
    c200:	e3a03000 	mov	r3, #0
    c204:	e1a04000 	mov	r4, r0
    c208:	e5803004 	str	r3, [r0, #4]
    c20c:	e5952000 	ldr	r2, [r5]
    c210:	e5803000 	str	r3, [r0]
    c214:	e1520003 	cmp	r2, r3
    c218:	0a000005 	beq	c234 <CDeviceNameService::CDeviceNameService()+0x40>
    c21c:	e3011f6c 	movw	r1, #8044	; 0x1f6c
    c220:	e3010f84 	movw	r0, #8068	; 0x1f84
    c224:	e3401001 	movt	r1, #1
    c228:	e3400001 	movt	r0, #1
    c22c:	e3a0201e 	mov	r2, #30
    c230:	ebffff38 	bl	bf18 <assertion_failed>
    c234:	e5854000 	str	r4, [r5]
    c238:	e1a00004 	mov	r0, r4
    c23c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c240 <CDeviceNameService::~CDeviceNameService()>:
    c240:	e5903000 	ldr	r3, [r0]
    c244:	e92d4070 	push	{r4, r5, r6, lr}
    c248:	e3530000 	cmp	r3, #0
    c24c:	e1a05000 	mov	r5, r0
    c250:	0a00000e 	beq	c290 <CDeviceNameService::~CDeviceNameService()+0x50>
    c254:	e3a06000 	mov	r6, #0
    c258:	e5930004 	ldr	r0, [r3, #4]
    c25c:	e5934000 	ldr	r4, [r3]
    c260:	e3500000 	cmp	r0, #0
    c264:	0a000000 	beq	c26c <CDeviceNameService::~CDeviceNameService()+0x2c>
    c268:	ebfff551 	bl	97b4 <operator delete[](void*)>
    c26c:	e5953000 	ldr	r3, [r5]
    c270:	e3a01010 	mov	r1, #16
    c274:	e5836004 	str	r6, [r3, #4]
    c278:	e1a00003 	mov	r0, r3
    c27c:	e5836008 	str	r6, [r3, #8]
    c280:	ebfff54c 	bl	97b8 <operator delete(void*, unsigned int)>
    c284:	e2543000 	subs	r3, r4, #0
    c288:	e5854000 	str	r4, [r5]
    c28c:	1afffff1 	bne	c258 <CDeviceNameService::~CDeviceNameService()+0x18>
    c290:	e302399c 	movw	r3, #10652	; 0x299c
    c294:	e3403001 	movt	r3, #1
    c298:	e3a02000 	mov	r2, #0
    c29c:	e1a00005 	mov	r0, r5
    c2a0:	e5832000 	str	r2, [r3]
    c2a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c2a8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    c2a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c2ac:	e1a05000 	mov	r5, r0
    c2b0:	e5900004 	ldr	r0, [r0, #4]
    c2b4:	e1a06001 	mov	r6, r1
    c2b8:	e1a07002 	mov	r7, r2
    c2bc:	e1a08003 	mov	r8, r3
    c2c0:	e3500000 	cmp	r0, #0
    c2c4:	1a000017 	bne	c328 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x80>
    c2c8:	e3a00010 	mov	r0, #16
    c2cc:	ebfff535 	bl	97a8 <operator new(unsigned int)>
    c2d0:	e3560000 	cmp	r6, #0
    c2d4:	e1a04000 	mov	r4, r0
    c2d8:	0a00001b 	beq	c34c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xa4>
    c2dc:	e1a00006 	mov	r0, r6
    c2e0:	eb000f60 	bl	10068 <strlen>
    c2e4:	e2800001 	add	r0, r0, #1
    c2e8:	ebfff52f 	bl	97ac <operator new[](unsigned int)>
    c2ec:	e1a01006 	mov	r1, r6
    c2f0:	e5840004 	str	r0, [r4, #4]
    c2f4:	eb000f80 	bl	100fc <strcpy>
    c2f8:	e3570000 	cmp	r7, #0
    c2fc:	0a00000b 	beq	c330 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x88>
    c300:	e5952004 	ldr	r2, [r5, #4]
    c304:	e5953000 	ldr	r3, [r5]
    c308:	e3520000 	cmp	r2, #0
    c30c:	e5847008 	str	r7, [r4, #8]
    c310:	e584800c 	str	r8, [r4, #12]
    c314:	e5843000 	str	r3, [r4]
    c318:	e5854000 	str	r4, [r5]
    c31c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c320:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c324:	eafff553 	b	9878 <LeaveCritical>
    c328:	ebfff524 	bl	97c0 <EnterCritical>
    c32c:	eaffffe5 	b	c2c8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
    c330:	e3011f6c 	movw	r1, #8044	; 0x1f6c
    c334:	e3010f9c 	movw	r0, #8092	; 0x1f9c
    c338:	e3401001 	movt	r1, #1
    c33c:	e3400001 	movt	r0, #1
    c340:	e3a0203f 	mov	r2, #63	; 0x3f
    c344:	ebfffef3 	bl	bf18 <assertion_failed>
    c348:	eaffffec 	b	c300 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    c34c:	e3011f6c 	movw	r1, #8044	; 0x1f6c
    c350:	e3010f90 	movw	r0, #8080	; 0x1f90
    c354:	e3401001 	movt	r1, #1
    c358:	e3400001 	movt	r0, #1
    c35c:	e3a0203a 	mov	r2, #58	; 0x3a
    c360:	ebfffeec 	bl	bf18 <assertion_failed>
    c364:	eaffffdc 	b	c2dc <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

0000c368 <CDeviceNameService::GetDevice(char const*, int)>:
    c368:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c36c:	e2515000 	subs	r5, r1, #0
    c370:	e1a07000 	mov	r7, r0
    c374:	e1a06002 	mov	r6, r2
    c378:	0a000037 	beq	c45c <CDeviceNameService::GetDevice(char const*, int)+0xf4>
    c37c:	e5970004 	ldr	r0, [r7, #4]
    c380:	e3500000 	cmp	r0, #0
    c384:	1a00001a 	bne	c3f4 <CDeviceNameService::GetDevice(char const*, int)+0x8c>
    c388:	e5974000 	ldr	r4, [r7]
    c38c:	e3540000 	cmp	r4, #0
    c390:	0a00001f 	beq	c414 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    c394:	e3019f6c 	movw	r9, #8044	; 0x1f6c
    c398:	e3018fac 	movw	r8, #8108	; 0x1fac
    c39c:	e3409001 	movt	r9, #1
    c3a0:	e3408001 	movt	r8, #1
    c3a4:	ea000009 	b	c3d0 <CDeviceNameService::GetDevice(char const*, int)+0x68>
    c3a8:	e1a00005 	mov	r0, r5
    c3ac:	eb000f37 	bl	10090 <strcmp>
    c3b0:	e3500000 	cmp	r0, #0
    c3b4:	1a000002 	bne	c3c4 <CDeviceNameService::GetDevice(char const*, int)+0x5c>
    c3b8:	e594300c 	ldr	r3, [r4, #12]
    c3bc:	e1530006 	cmp	r3, r6
    c3c0:	0a000016 	beq	c420 <CDeviceNameService::GetDevice(char const*, int)+0xb8>
    c3c4:	e5944000 	ldr	r4, [r4]
    c3c8:	e3540000 	cmp	r4, #0
    c3cc:	0a00000c 	beq	c404 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    c3d0:	e5941004 	ldr	r1, [r4, #4]
    c3d4:	e3510000 	cmp	r1, #0
    c3d8:	1afffff2 	bne	c3a8 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    c3dc:	e1a01009 	mov	r1, r9
    c3e0:	e3a02053 	mov	r2, #83	; 0x53
    c3e4:	e1a00008 	mov	r0, r8
    c3e8:	ebfffeca 	bl	bf18 <assertion_failed>
    c3ec:	e5941004 	ldr	r1, [r4, #4]
    c3f0:	eaffffec 	b	c3a8 <CDeviceNameService::GetDevice(char const*, int)+0x40>
    c3f4:	ebfff4f1 	bl	97c0 <EnterCritical>
    c3f8:	e5974000 	ldr	r4, [r7]
    c3fc:	e3540000 	cmp	r4, #0
    c400:	1affffe3 	bne	c394 <CDeviceNameService::GetDevice(char const*, int)+0x2c>
    c404:	e5973004 	ldr	r3, [r7, #4]
    c408:	e3530000 	cmp	r3, #0
    c40c:	0a000000 	beq	c414 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    c410:	ebfff518 	bl	9878 <LeaveCritical>
    c414:	e3a04000 	mov	r4, #0
    c418:	e1a00004 	mov	r0, r4
    c41c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c420:	e5973004 	ldr	r3, [r7, #4]
    c424:	e5944008 	ldr	r4, [r4, #8]
    c428:	e3530000 	cmp	r3, #0
    c42c:	1a000008 	bne	c454 <CDeviceNameService::GetDevice(char const*, int)+0xec>
    c430:	e3540000 	cmp	r4, #0
    c434:	1afffff7 	bne	c418 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    c438:	e3011f6c 	movw	r1, #8044	; 0x1f6c
    c43c:	e3010fc0 	movw	r0, #8128	; 0x1fc0
    c440:	e3401001 	movt	r1, #1
    c444:	e3400001 	movt	r0, #1
    c448:	e3a0205b 	mov	r2, #91	; 0x5b
    c44c:	ebfffeb1 	bl	bf18 <assertion_failed>
    c450:	eafffff0 	b	c418 <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    c454:	ebfff507 	bl	9878 <LeaveCritical>
    c458:	eafffff4 	b	c430 <CDeviceNameService::GetDevice(char const*, int)+0xc8>
    c45c:	e3011f6c 	movw	r1, #8044	; 0x1f6c
    c460:	e3010f90 	movw	r0, #8080	; 0x1f90
    c464:	e3401001 	movt	r1, #1
    c468:	e3400001 	movt	r0, #1
    c46c:	e3a0204c 	mov	r2, #76	; 0x4c
    c470:	ebfffea8 	bl	bf18 <assertion_failed>
    c474:	eaffffc0 	b	c37c <CDeviceNameService::GetDevice(char const*, int)+0x14>

0000c478 <CDeviceNameService::Get()>:
    c478:	e92d4010 	push	{r4, lr}
    c47c:	e302499c 	movw	r4, #10652	; 0x299c
    c480:	e3404001 	movt	r4, #1
    c484:	e5940000 	ldr	r0, [r4]
    c488:	e3500000 	cmp	r0, #0
    c48c:	18bd8010 	popne	{r4, pc}
    c490:	e3a02069 	mov	r2, #105	; 0x69
    c494:	e3011f6c 	movw	r1, #8044	; 0x1f6c
    c498:	e3010fd0 	movw	r0, #8144	; 0x1fd0
    c49c:	e3401001 	movt	r1, #1
    c4a0:	e3400001 	movt	r0, #1
    c4a4:	ebfffe9b 	bl	bf18 <assertion_failed>
    c4a8:	e5940000 	ldr	r0, [r4]
    c4ac:	e8bd8010 	pop	{r4, pc}

0000c4b0 <CLogger::CLogger(unsigned int, CTimer*)>:
    c4b0:	e92d4010 	push	{r4, lr}
    c4b4:	e1a04000 	mov	r4, r0
    c4b8:	e5801000 	str	r1, [r0]
    c4bc:	e3a03000 	mov	r3, #0
    c4c0:	e5802004 	str	r2, [r0, #4]
    c4c4:	e3a0c001 	mov	ip, #1
    c4c8:	e5843008 	str	r3, [r4, #8]
    c4cc:	e3a00901 	mov	r0, #16384	; 0x4000
    c4d0:	e584300c 	str	r3, [r4, #12]
    c4d4:	e5843010 	str	r3, [r4, #16]
    c4d8:	e5843014 	str	r3, [r4, #20]
    c4dc:	e584c018 	str	ip, [r4, #24]
    c4e0:	ebfff4b1 	bl	97ac <operator new[](unsigned int)>
    c4e4:	e30239a0 	movw	r3, #10656	; 0x29a0
    c4e8:	e3403001 	movt	r3, #1
    c4ec:	e5834000 	str	r4, [r3]
    c4f0:	e584000c 	str	r0, [r4, #12]
    c4f4:	e1a00004 	mov	r0, r4
    c4f8:	e8bd8010 	pop	{r4, pc}

0000c4fc <CLogger::~CLogger()>:
    c4fc:	e92d4010 	push	{r4, lr}
    c500:	e1a04000 	mov	r4, r0
    c504:	e590000c 	ldr	r0, [r0, #12]
    c508:	e3a02000 	mov	r2, #0
    c50c:	e30239a0 	movw	r3, #10656	; 0x29a0
    c510:	e3403001 	movt	r3, #1
    c514:	e1500002 	cmp	r0, r2
    c518:	e5832000 	str	r2, [r3]
    c51c:	0a000000 	beq	c524 <CLogger::~CLogger()+0x28>
    c520:	ebfff4a3 	bl	97b4 <operator delete[](void*)>
    c524:	e1a00004 	mov	r0, r4
    c528:	e8bd8010 	pop	{r4, pc}

0000c52c <CLogger::Get()>:
    c52c:	e30239a0 	movw	r3, #10656	; 0x29a0
    c530:	e3403001 	movt	r3, #1
    c534:	e5930000 	ldr	r0, [r3]
    c538:	e12fff1e 	bx	lr

0000c53c <CLogger::Write(char const*)>:
    c53c:	e92d4070 	push	{r4, r5, r6, lr}
    c540:	e1a04000 	mov	r4, r0
    c544:	e1a00001 	mov	r0, r1
    c548:	e1a05001 	mov	r5, r1
    c54c:	eb000ec5 	bl	10068 <strlen>
    c550:	e1a01005 	mov	r1, r5
    c554:	e1a06000 	mov	r6, r0
    c558:	e5940008 	ldr	r0, [r4, #8]
    c55c:	e1a02006 	mov	r2, r6
    c560:	e5903000 	ldr	r3, [r0]
    c564:	e593300c 	ldr	r3, [r3, #12]
    c568:	e12fff33 	blx	r3
    c56c:	e5940018 	ldr	r0, [r4, #24]
    c570:	e3500000 	cmp	r0, #0
    c574:	1a000017 	bne	c5d8 <CLogger::Write(char const*)+0x9c>
    c578:	e0850006 	add	r0, r5, r6
    c57c:	e1550000 	cmp	r5, r0
    c580:	0a00000f 	beq	c5c4 <CLogger::Write(char const*)+0x88>
    c584:	e0d530d1 	ldrsb	r3, [r5], #1
    c588:	e353000d 	cmp	r3, #13
    c58c:	0afffffa 	beq	c57c <CLogger::Write(char const*)+0x40>
    c590:	e5941010 	ldr	r1, [r4, #16]
    c594:	e594c00c 	ldr	ip, [r4, #12]
    c598:	e7cc3001 	strb	r3, [ip, r1]
    c59c:	e5943010 	ldr	r3, [r4, #16]
    c5a0:	e5941014 	ldr	r1, [r4, #20]
    c5a4:	e2833001 	add	r3, r3, #1
    c5a8:	e7ed3053 	ubfx	r3, r3, #0, #14
    c5ac:	e5843010 	str	r3, [r4, #16]
    c5b0:	e1530001 	cmp	r3, r1
    c5b4:	1afffff0 	bne	c57c <CLogger::Write(char const*)+0x40>
    c5b8:	e2433001 	sub	r3, r3, #1
    c5bc:	e7ed3053 	ubfx	r3, r3, #0, #14
    c5c0:	e5843010 	str	r3, [r4, #16]
    c5c4:	e5943018 	ldr	r3, [r4, #24]
    c5c8:	e3530000 	cmp	r3, #0
    c5cc:	08bd8070 	popeq	{r4, r5, r6, pc}
    c5d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    c5d4:	eafff4a7 	b	9878 <LeaveCritical>
    c5d8:	ebfff478 	bl	97c0 <EnterCritical>
    c5dc:	eaffffe5 	b	c578 <CLogger::Write(char const*)+0x3c>

0000c5e0 <CLogger::Read(void*, unsigned int)>:
    c5e0:	e92d4070 	push	{r4, r5, r6, lr}
    c5e4:	e1a04000 	mov	r4, r0
    c5e8:	e5900018 	ldr	r0, [r0, #24]
    c5ec:	e1a05001 	mov	r5, r1
    c5f0:	e1a06002 	mov	r6, r2
    c5f4:	e3500000 	cmp	r0, #0
    c5f8:	1a00001b 	bne	c66c <CLogger::Read(void*, unsigned int)+0x8c>
    c5fc:	e5942010 	ldr	r2, [r4, #16]
    c600:	e5943014 	ldr	r3, [r4, #20]
    c604:	e1520003 	cmp	r2, r3
    c608:	0a000020 	beq	c690 <CLogger::Read(void*, unsigned int)+0xb0>
    c60c:	e1a01005 	mov	r1, r5
    c610:	e3a05000 	mov	r5, #0
    c614:	ea00000a 	b	c644 <CLogger::Read(void*, unsigned int)+0x64>
    c618:	e594000c 	ldr	r0, [r4, #12]
    c61c:	e2855001 	add	r5, r5, #1
    c620:	e19030d3 	ldrsb	r3, [r0, r3]
    c624:	e4c13001 	strb	r3, [r1], #1
    c628:	e5943014 	ldr	r3, [r4, #20]
    c62c:	e5940010 	ldr	r0, [r4, #16]
    c630:	e2833001 	add	r3, r3, #1
    c634:	e7ed3053 	ubfx	r3, r3, #0, #14
    c638:	e5843014 	str	r3, [r4, #20]
    c63c:	e1530000 	cmp	r3, r0
    c640:	0a000001 	beq	c64c <CLogger::Read(void*, unsigned int)+0x6c>
    c644:	e1550006 	cmp	r5, r6
    c648:	1afffff2 	bne	c618 <CLogger::Read(void*, unsigned int)+0x38>
    c64c:	e5943018 	ldr	r3, [r4, #24]
    c650:	e3530000 	cmp	r3, #0
    c654:	1a000001 	bne	c660 <CLogger::Read(void*, unsigned int)+0x80>
    c658:	e1a00005 	mov	r0, r5
    c65c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c660:	ebfff484 	bl	9878 <LeaveCritical>
    c664:	e1a00005 	mov	r0, r5
    c668:	e8bd8070 	pop	{r4, r5, r6, pc}
    c66c:	ebfff453 	bl	97c0 <EnterCritical>
    c670:	e5942010 	ldr	r2, [r4, #16]
    c674:	e5943014 	ldr	r3, [r4, #20]
    c678:	e1520003 	cmp	r2, r3
    c67c:	1affffe2 	bne	c60c <CLogger::Read(void*, unsigned int)+0x2c>
    c680:	e5943018 	ldr	r3, [r4, #24]
    c684:	e3530000 	cmp	r3, #0
    c688:	0a000000 	beq	c690 <CLogger::Read(void*, unsigned int)+0xb0>
    c68c:	ebfff479 	bl	9878 <LeaveCritical>
    c690:	e3e05000 	mvn	r5, #0
    c694:	e1a00005 	mov	r0, r5
    c698:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c69c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    c69c:	e590c000 	ldr	ip, [r0]
    c6a0:	e152000c 	cmp	r2, ip
    c6a4:	812fff1e 	bxhi	lr
    c6a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c6ac:	e24dd020 	sub	sp, sp, #32
    c6b0:	e1a04000 	mov	r4, r0
    c6b4:	e1a05002 	mov	r5, r2
    c6b8:	e1a0000d 	mov	r0, sp
    c6bc:	e1a07003 	mov	r7, r3
    c6c0:	e1a06001 	mov	r6, r1
    c6c4:	eb000320 	bl	d34c <CString::CString()>
    c6c8:	e3550000 	cmp	r5, #0
    c6cc:	0a000049 	beq	c7f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    c6d0:	e5940004 	ldr	r0, [r4, #4]
    c6d4:	e3500000 	cmp	r0, #0
    c6d8:	0a000032 	beq	c7a8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    c6dc:	ebfff551 	bl	9c28 <CTimer::GetTimeString()>
    c6e0:	e2508000 	subs	r8, r0, #0
    c6e4:	0a00000b 	beq	c718 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    c6e8:	eb00032e 	bl	d3a8 <CString::operator char const*() const>
    c6ec:	e1a01000 	mov	r1, r0
    c6f0:	e1a0000d 	mov	r0, sp
    c6f4:	eb000346 	bl	d414 <CString::Append(char const*)>
    c6f8:	e1a0000d 	mov	r0, sp
    c6fc:	e3011fe4 	movw	r1, #8164	; 0x1fe4
    c700:	e3401001 	movt	r1, #1
    c704:	eb000342 	bl	d414 <CString::Append(char const*)>
    c708:	e5983000 	ldr	r3, [r8]
    c70c:	e1a00008 	mov	r0, r8
    c710:	e5933004 	ldr	r3, [r3, #4]
    c714:	e12fff33 	blx	r3
    c718:	e1a01006 	mov	r1, r6
    c71c:	e1a0000d 	mov	r0, sp
    c720:	e28d6010 	add	r6, sp, #16
    c724:	eb00033a 	bl	d414 <CString::Append(char const*)>
    c728:	e1a0000d 	mov	r0, sp
    c72c:	e3011fe8 	movw	r1, #8168	; 0x1fe8
    c730:	e3401001 	movt	r1, #1
    c734:	eb000336 	bl	d414 <CString::Append(char const*)>
    c738:	e1a00006 	mov	r0, r6
    c73c:	eb000302 	bl	d34c <CString::CString()>
    c740:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    c744:	e1a01007 	mov	r1, r7
    c748:	e1a00006 	mov	r0, r6
    c74c:	eb000455 	bl	d8a8 <CString::FormatV(char const*, std::__va_list)>
    c750:	e1a00006 	mov	r0, r6
    c754:	eb000313 	bl	d3a8 <CString::operator char const*() const>
    c758:	e1a01000 	mov	r1, r0
    c75c:	e1a0000d 	mov	r0, sp
    c760:	eb00032b 	bl	d414 <CString::Append(char const*)>
    c764:	e3550000 	cmp	r5, #0
    c768:	0a00003c 	beq	c860 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    c76c:	e1a0000d 	mov	r0, sp
    c770:	e3011ff4 	movw	r1, #8180	; 0x1ff4
    c774:	e3401001 	movt	r1, #1
    c778:	eb000325 	bl	d414 <CString::Append(char const*)>
    c77c:	e1a0000d 	mov	r0, sp
    c780:	eb000308 	bl	d3a8 <CString::operator char const*() const>
    c784:	e1a01000 	mov	r1, r0
    c788:	e1a00004 	mov	r0, r4
    c78c:	ebffff6a 	bl	c53c <CLogger::Write(char const*)>
    c790:	e1a00006 	mov	r0, r6
    c794:	eb0002b9 	bl	d280 <CString::~CString()>
    c798:	e1a0000d 	mov	r0, sp
    c79c:	eb0002b7 	bl	d280 <CString::~CString()>
    c7a0:	e28dd020 	add	sp, sp, #32
    c7a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c7a8:	e1a01006 	mov	r1, r6
    c7ac:	e1a0000d 	mov	r0, sp
    c7b0:	e28d6010 	add	r6, sp, #16
    c7b4:	eb000316 	bl	d414 <CString::Append(char const*)>
    c7b8:	e1a0000d 	mov	r0, sp
    c7bc:	e3011fe8 	movw	r1, #8168	; 0x1fe8
    c7c0:	e3401001 	movt	r1, #1
    c7c4:	eb000312 	bl	d414 <CString::Append(char const*)>
    c7c8:	e1a00006 	mov	r0, r6
    c7cc:	eb0002de 	bl	d34c <CString::CString()>
    c7d0:	e1a01007 	mov	r1, r7
    c7d4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    c7d8:	e1a00006 	mov	r0, r6
    c7dc:	eb000431 	bl	d8a8 <CString::FormatV(char const*, std::__va_list)>
    c7e0:	e1a00006 	mov	r0, r6
    c7e4:	eb0002ef 	bl	d3a8 <CString::operator char const*() const>
    c7e8:	e1a01000 	mov	r1, r0
    c7ec:	e1a0000d 	mov	r0, sp
    c7f0:	eb000307 	bl	d414 <CString::Append(char const*)>
    c7f4:	eaffffdc 	b	c76c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    c7f8:	e3011fdc 	movw	r1, #8156	; 0x1fdc
    c7fc:	e1a0000d 	mov	r0, sp
    c800:	e3401001 	movt	r1, #1
    c804:	eb0002ed 	bl	d3c0 <CString::operator=(char const*)>
    c808:	e5940004 	ldr	r0, [r4, #4]
    c80c:	e3500000 	cmp	r0, #0
    c810:	1affffb1 	bne	c6dc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    c814:	e1a01006 	mov	r1, r6
    c818:	e1a0000d 	mov	r0, sp
    c81c:	e28d6010 	add	r6, sp, #16
    c820:	eb0002fb 	bl	d414 <CString::Append(char const*)>
    c824:	e1a0000d 	mov	r0, sp
    c828:	e3011fe8 	movw	r1, #8168	; 0x1fe8
    c82c:	e3401001 	movt	r1, #1
    c830:	eb0002f7 	bl	d414 <CString::Append(char const*)>
    c834:	e1a00006 	mov	r0, r6
    c838:	eb0002c3 	bl	d34c <CString::CString()>
    c83c:	e1a01007 	mov	r1, r7
    c840:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    c844:	e1a00006 	mov	r0, r6
    c848:	eb000416 	bl	d8a8 <CString::FormatV(char const*, std::__va_list)>
    c84c:	e1a00006 	mov	r0, r6
    c850:	eb0002d4 	bl	d3a8 <CString::operator char const*() const>
    c854:	e1a01000 	mov	r1, r0
    c858:	e1a0000d 	mov	r0, sp
    c85c:	eb0002ec 	bl	d414 <CString::Append(char const*)>
    c860:	e1a0000d 	mov	r0, sp
    c864:	e3011fec 	movw	r1, #8172	; 0x1fec
    c868:	e3401001 	movt	r1, #1
    c86c:	eb0002e8 	bl	d414 <CString::Append(char const*)>
    c870:	e1a0000d 	mov	r0, sp
    c874:	e3011ff4 	movw	r1, #8180	; 0x1ff4
    c878:	e3401001 	movt	r1, #1
    c87c:	eb0002e4 	bl	d414 <CString::Append(char const*)>
    c880:	e1a0000d 	mov	r0, sp
    c884:	eb0002c7 	bl	d3a8 <CString::operator char const*() const>
    c888:	e1a01000 	mov	r1, r0
    c88c:	e1a00004 	mov	r0, r4
    c890:	ebffff29 	bl	c53c <CLogger::Write(char const*)>
    c894:	ebfff414 	bl	98ec <halt>
    c898:	eaffffbc 	b	c790 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000c89c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    c89c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    c8a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c8a4:	e24dd010 	sub	sp, sp, #16
    c8a8:	e28dc018 	add	ip, sp, #24
    c8ac:	e59d3014 	ldr	r3, [sp, #20]
    c8b0:	e58dc000 	str	ip, [sp]
    c8b4:	e58dc00c 	str	ip, [sp, #12]
    c8b8:	ebffff77 	bl	c69c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    c8bc:	e28dd010 	add	sp, sp, #16
    c8c0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c8c4:	e28dd004 	add	sp, sp, #4
    c8c8:	e12fff1e 	bx	lr

0000c8cc <CLogger::Initialize(CDevice*)>:
    c8cc:	e92d4010 	push	{r4, lr}
    c8d0:	e24dd008 	sub	sp, sp, #8
    c8d4:	e5801008 	str	r1, [r0, #8]
    c8d8:	e1a04000 	mov	r4, r0
    c8dc:	eb000a89 	bl	f308 <CMachineInfo::Get()>
    c8e0:	eb000a16 	bl	f140 <CMachineInfo::GetMachineName() const>
    c8e4:	e3a02003 	mov	r2, #3
    c8e8:	e3013ff8 	movw	r3, #8184	; 0x1ff8
    c8ec:	e3021010 	movw	r1, #8208	; 0x2010
    c8f0:	e3403001 	movt	r3, #1
    c8f4:	e3401001 	movt	r1, #1
    c8f8:	e58d0000 	str	r0, [sp]
    c8fc:	e1a00004 	mov	r0, r4
    c900:	ebffffe5 	bl	c89c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c904:	e3a00001 	mov	r0, #1
    c908:	e28dd008 	add	sp, sp, #8
    c90c:	e8bd8010 	pop	{r4, pc}

0000c910 <CSerialDevice::Read(void*, unsigned int)>:
    c910:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c914:	e2515000 	subs	r5, r1, #0
    c918:	e1a04000 	mov	r4, r0
    c91c:	e1a07002 	mov	r7, r2
    c920:	0a000055 	beq	ca7c <CSerialDevice::Read(void*, unsigned int)+0x16c>
    c924:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    c928:	e3530000 	cmp	r3, #0
    c92c:	0a000031 	beq	c9f8 <CSerialDevice::Read(void*, unsigned int)+0xe8>
    c930:	e2846a01 	add	r6, r4, #4096	; 0x1000
    c934:	e59600c8 	ldr	r0, [r6, #200]	; 0xc8
    c938:	e3500000 	cmp	r0, #0
    c93c:	1a000020 	bne	c9c4 <CSerialDevice::Read(void*, unsigned int)+0xb4>
    c940:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    c944:	e3530000 	cmp	r3, #0
    c948:	ba000021 	blt	c9d4 <CSerialDevice::Read(void*, unsigned int)+0xc4>
    c94c:	e3570000 	cmp	r7, #0
    c950:	0a000016 	beq	c9b0 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    c954:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    c958:	e59428b4 	ldr	r2, [r4, #2228]	; 0x8b4
    c95c:	e1520003 	cmp	r2, r3
    c960:	0a000050 	beq	caa8 <CSerialDevice::Read(void*, unsigned int)+0x198>
    c964:	e0852007 	add	r2, r5, r7
    c968:	e1a01005 	mov	r1, r5
    c96c:	ea000003 	b	c980 <CSerialDevice::Read(void*, unsigned int)+0x70>
    c970:	e594c8b0 	ldr	ip, [r4, #2224]	; 0x8b0
    c974:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    c978:	e15c0003 	cmp	ip, r3
    c97c:	0a00000b 	beq	c9b0 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    c980:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    c984:	e0840003 	add	r0, r4, r3
    c988:	e2833001 	add	r3, r3, #1
    c98c:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    c990:	e5d030b0 	ldrb	r3, [r0, #176]	; 0xb0
    c994:	e4c13001 	strb	r3, [r1], #1
    c998:	e1510002 	cmp	r1, r2
    c99c:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    c9a0:	e0417005 	sub	r7, r1, r5
    c9a4:	e7ea3053 	ubfx	r3, r3, #0, #11
    c9a8:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    c9ac:	1affffef 	bne	c970 <CSerialDevice::Read(void*, unsigned int)+0x60>
    c9b0:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    c9b4:	e3530000 	cmp	r3, #0
    c9b8:	1a00000b 	bne	c9ec <CSerialDevice::Read(void*, unsigned int)+0xdc>
    c9bc:	e1a00007 	mov	r0, r7
    c9c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c9c4:	ebfff37d 	bl	97c0 <EnterCritical>
    c9c8:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    c9cc:	e3530000 	cmp	r3, #0
    c9d0:	aaffffdd 	bge	c94c <CSerialDevice::Read(void*, unsigned int)+0x3c>
    c9d4:	e3a03000 	mov	r3, #0
    c9d8:	e59478b8 	ldr	r7, [r4, #2232]	; 0x8b8
    c9dc:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    c9e0:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    c9e4:	e3530000 	cmp	r3, #0
    c9e8:	0afffff3 	beq	c9bc <CSerialDevice::Read(void*, unsigned int)+0xac>
    c9ec:	ebfff3a1 	bl	9878 <LeaveCritical>
    c9f0:	e1a00007 	mov	r0, r7
    c9f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c9f8:	e3570000 	cmp	r7, #0
    c9fc:	0affffee 	beq	c9bc <CSerialDevice::Read(void*, unsigned int)+0xac>
    ca00:	e3a0ca01 	mov	ip, #4096	; 0x1000
    ca04:	e343cf20 	movt	ip, #16160	; 0x3f20
    ca08:	e59c2018 	ldr	r2, [ip, #24]
    ca0c:	e3120010 	tst	r2, #16
    ca10:	1a000026 	bne	cab0 <CSerialDevice::Read(void*, unsigned int)+0x1a0>
    ca14:	e59c3000 	ldr	r3, [ip]
    ca18:	e3130b01 	tst	r3, #1024	; 0x400
    ca1c:	1a000014 	bne	ca74 <CSerialDevice::Read(void*, unsigned int)+0x164>
    ca20:	e3130b02 	tst	r3, #2048	; 0x800
    ca24:	1a00001b 	bne	ca98 <CSerialDevice::Read(void*, unsigned int)+0x188>
    ca28:	e3130c01 	tst	r3, #256	; 0x100
    ca2c:	1a00001b 	bne	caa0 <CSerialDevice::Read(void*, unsigned int)+0x190>
    ca30:	e0852007 	add	r2, r5, r7
    ca34:	e1a01005 	mov	r1, r5
    ca38:	ea000003 	b	ca4c <CSerialDevice::Read(void*, unsigned int)+0x13c>
    ca3c:	e3130b02 	tst	r3, #2048	; 0x800
    ca40:	1a000014 	bne	ca98 <CSerialDevice::Read(void*, unsigned int)+0x188>
    ca44:	e3130c01 	tst	r3, #256	; 0x100
    ca48:	1a000014 	bne	caa0 <CSerialDevice::Read(void*, unsigned int)+0x190>
    ca4c:	e4c13001 	strb	r3, [r1], #1
    ca50:	e1520001 	cmp	r2, r1
    ca54:	e0417005 	sub	r7, r1, r5
    ca58:	0affffd7 	beq	c9bc <CSerialDevice::Read(void*, unsigned int)+0xac>
    ca5c:	e59c3018 	ldr	r3, [ip, #24]
    ca60:	e3130010 	tst	r3, #16
    ca64:	1affffd4 	bne	c9bc <CSerialDevice::Read(void*, unsigned int)+0xac>
    ca68:	e59c3000 	ldr	r3, [ip]
    ca6c:	e3130b01 	tst	r3, #1024	; 0x400
    ca70:	0afffff1 	beq	ca3c <CSerialDevice::Read(void*, unsigned int)+0x12c>
    ca74:	e3e07000 	mvn	r7, #0
    ca78:	eaffffcf 	b	c9bc <CSerialDevice::Read(void*, unsigned int)+0xac>
    ca7c:	e3021034 	movw	r1, #8244	; 0x2034
    ca80:	e3020040 	movw	r0, #8256	; 0x2040
    ca84:	e3401001 	movt	r1, #1
    ca88:	e3400001 	movt	r0, #1
    ca8c:	e3a02c01 	mov	r2, #256	; 0x100
    ca90:	ebfffd20 	bl	bf18 <assertion_failed>
    ca94:	eaffffa2 	b	c924 <CSerialDevice::Read(void*, unsigned int)+0x14>
    ca98:	e3e07001 	mvn	r7, #1
    ca9c:	eaffffc6 	b	c9bc <CSerialDevice::Read(void*, unsigned int)+0xac>
    caa0:	e3e07002 	mvn	r7, #2
    caa4:	eaffffc4 	b	c9bc <CSerialDevice::Read(void*, unsigned int)+0xac>
    caa8:	e3a07000 	mov	r7, #0
    caac:	eaffffbf 	b	c9b0 <CSerialDevice::Read(void*, unsigned int)+0xa0>
    cab0:	e1a07003 	mov	r7, r3
    cab4:	eaffffc0 	b	c9bc <CSerialDevice::Read(void*, unsigned int)+0xac>

0000cab8 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)>:
    cab8:	e92d4070 	push	{r4, r5, r6, lr}
    cabc:	e1a04000 	mov	r4, r0
    cac0:	e1a05002 	mov	r5, r2
    cac4:	e1a06001 	mov	r6, r1
    cac8:	eb000f5a 	bl	10838 <CDevice::CDevice()>
    cacc:	e59fc09c 	ldr	ip, [pc, #156]	; cb70 <CSerialDevice::CSerialDevice(CInterruptSystem*, int)+0xb8>
    cad0:	e1a00004 	mov	r0, r4
    cad4:	e3a03000 	mov	r3, #0
    cad8:	e1a02003 	mov	r2, r3
    cadc:	e3a01020 	mov	r1, #32
    cae0:	e480c004 	str	ip, [r0], #4
    cae4:	ebfff204 	bl	92fc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    cae8:	e3a03000 	mov	r3, #0
    caec:	e1a02003 	mov	r2, r3
    caf0:	e284002c 	add	r0, r4, #44	; 0x2c
    caf4:	e3a01021 	mov	r1, #33	; 0x21
    caf8:	ebfff1ff 	bl	92fc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    cafc:	e2840054 	add	r0, r4, #84	; 0x54
    cb00:	e3a03000 	mov	r3, #0
    cb04:	e3a02004 	mov	r2, #4
    cb08:	e3a0100e 	mov	r1, #14
    cb0c:	ebfff1fa 	bl	92fc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    cb10:	e284007c 	add	r0, r4, #124	; 0x7c
    cb14:	e3a03000 	mov	r3, #0
    cb18:	e3a02004 	mov	r2, #4
    cb1c:	e3a0100f 	mov	r1, #15
    cb20:	ebfff1f5 	bl	92fc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    cb24:	e2842a01 	add	r2, r4, #4096	; 0x1000
    cb28:	e3550000 	cmp	r5, #0
    cb2c:	e3a03000 	mov	r3, #0
    cb30:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    cb34:	e3a01001 	mov	r1, #1
    cb38:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    cb3c:	13a0c002 	movne	ip, #2
    cb40:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    cb44:	03a0c001 	moveq	ip, #1
    cb48:	e58450a8 	str	r5, [r4, #168]	; 0xa8
    cb4c:	e1a00004 	mov	r0, r4
    cb50:	e58430ac 	str	r3, [r4, #172]	; 0xac
    cb54:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    cb58:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    cb5c:	e58210c4 	str	r1, [r2, #196]	; 0xc4
    cb60:	e58230c0 	str	r3, [r2, #192]	; 0xc0
    cb64:	e58210cc 	str	r1, [r2, #204]	; 0xcc
    cb68:	e582c0c8 	str	ip, [r2, #200]	; 0xc8
    cb6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    cb70:	00012020 	.word	0x00012020

0000cb74 <CSerialDevice::Initialize(unsigned int)>:
    cb74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cb78:	e1a07001 	mov	r7, r1
    cb7c:	e1a04000 	mov	r4, r0
    cb80:	eb0009e0 	bl	f308 <CMachineInfo::Get()>
    cb84:	e3a01002 	mov	r1, #2
    cb88:	eb000982 	bl	f198 <CMachineInfo::GetClockRate(unsigned int) const>
    cb8c:	e2508000 	subs	r8, r0, #0
    cb90:	0a000066 	beq	cd30 <CSerialDevice::Initialize(unsigned int)+0x1bc>
    cb94:	e30037d4 	movw	r3, #2004	; 0x7d4
    cb98:	e2472f4b 	sub	r2, r7, #300	; 0x12c
    cb9c:	e340303d 	movt	r3, #61	; 0x3d
    cba0:	e1520003 	cmp	r2, r3
    cba4:	8a00005a 	bhi	cd14 <CSerialDevice::Initialize(unsigned int)+0x1a0>
    cba8:	e1a05207 	lsl	r5, r7, #4
    cbac:	e1a00008 	mov	r0, r8
    cbb0:	e1a01005 	mov	r1, r5
    cbb4:	eb000cff 	bl	ffb8 <__aeabi_uidiv>
    cbb8:	e30f3ffe 	movw	r3, #65534	; 0xfffe
    cbbc:	e2402001 	sub	r2, r0, #1
    cbc0:	e1a06000 	mov	r6, r0
    cbc4:	e1520003 	cmp	r2, r3
    cbc8:	8a00004a 	bhi	ccf8 <CSerialDevice::Initialize(unsigned int)+0x184>
    cbcc:	e1a01005 	mov	r1, r5
    cbd0:	e1a00008 	mov	r0, r8
    cbd4:	eb000cfb 	bl	ffc8 <__aeabi_uidivmod>
    cbd8:	e1a00181 	lsl	r0, r1, #3
    cbdc:	e1a01007 	mov	r1, r7
    cbe0:	eb000cf4 	bl	ffb8 <__aeabi_uidiv>
    cbe4:	e2005001 	and	r5, r0, #1
    cbe8:	e08550a0 	add	r5, r5, r0, lsr #1
    cbec:	e355003f 	cmp	r5, #63	; 0x3f
    cbf0:	8a00002b 	bhi	cca4 <CSerialDevice::Initialize(unsigned int)+0x130>
    cbf4:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    cbf8:	e3500000 	cmp	r0, #0
    cbfc:	0a000031 	beq	ccc8 <CSerialDevice::Initialize(unsigned int)+0x154>
    cc00:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
    cc04:	e30d216c 	movw	r2, #53612	; 0xd16c
    cc08:	e3a01039 	mov	r1, #57	; 0x39
    cc0c:	e3402000 	movt	r2, #0
    cc10:	e3530000 	cmp	r3, #0
    cc14:	e1a03004 	mov	r3, r4
    cc18:	0a00001f 	beq	cc9c <CSerialDevice::Initialize(unsigned int)+0x128>
    cc1c:	eb00063d 	bl	e518 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    cc20:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
    cc24:	e3a03a01 	mov	r3, #4096	; 0x1000
    cc28:	e3433f20 	movt	r3, #16160	; 0x3f20
    cc2c:	e3a02001 	mov	r2, #1
    cc30:	e3510000 	cmp	r1, #0
    cc34:	e58420ac 	str	r2, [r4, #172]	; 0xac
    cc38:	e3a01000 	mov	r1, #0
    cc3c:	e30027ff 	movw	r2, #2047	; 0x7ff
    cc40:	e5831038 	str	r1, [r3, #56]	; 0x38
    cc44:	e5832044 	str	r2, [r3, #68]	; 0x44
    cc48:	e5836024 	str	r6, [r3, #36]	; 0x24
    cc4c:	e5835028 	str	r5, [r3, #40]	; 0x28
    cc50:	0a000023 	beq	cce4 <CSerialDevice::Initialize(unsigned int)+0x170>
    cc54:	e3a02009 	mov	r2, #9
    cc58:	e3a01070 	mov	r1, #112	; 0x70
    cc5c:	e5832034 	str	r2, [r3, #52]	; 0x34
    cc60:	e3a02e45 	mov	r2, #1104	; 0x450
    cc64:	e583102c 	str	r1, [r3, #44]	; 0x2c
    cc68:	e5832038 	str	r2, [r3, #56]	; 0x38
    cc6c:	e3a03a01 	mov	r3, #4096	; 0x1000
    cc70:	e3433f20 	movt	r3, #16160	; 0x3f20
    cc74:	e3002301 	movw	r2, #769	; 0x301
    cc78:	e5832030 	str	r2, [r3, #48]	; 0x30
    cc7c:	ebfffdfd 	bl	c478 <CDeviceNameService::Get()>
    cc80:	e1a02004 	mov	r2, r4
    cc84:	e3a03000 	mov	r3, #0
    cc88:	e30210c0 	movw	r1, #8384	; 0x20c0
    cc8c:	e3401001 	movt	r1, #1
    cc90:	ebfffd84 	bl	c2a8 <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    cc94:	e3a00001 	mov	r0, #1
    cc98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cc9c:	eb00067c 	bl	e694 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    cca0:	eaffffde 	b	cc20 <CSerialDevice::Initialize(unsigned int)+0xac>
    cca4:	e3021034 	movw	r1, #8244	; 0x2034
    cca8:	e30200ac 	movw	r0, #8364	; 0x20ac
    ccac:	e3401001 	movt	r1, #1
    ccb0:	e3400001 	movt	r0, #1
    ccb4:	e3a02091 	mov	r2, #145	; 0x91
    ccb8:	ebfffc96 	bl	bf18 <assertion_failed>
    ccbc:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    ccc0:	e3500000 	cmp	r0, #0
    ccc4:	1affffcd 	bne	cc00 <CSerialDevice::Initialize(unsigned int)+0x8c>
    ccc8:	e3a03a01 	mov	r3, #4096	; 0x1000
    cccc:	e3433f20 	movt	r3, #16160	; 0x3f20
    ccd0:	e30027ff 	movw	r2, #2047	; 0x7ff
    ccd4:	e5830038 	str	r0, [r3, #56]	; 0x38
    ccd8:	e5832044 	str	r2, [r3, #68]	; 0x44
    ccdc:	e5836024 	str	r6, [r3, #36]	; 0x24
    cce0:	e5835028 	str	r5, [r3, #40]	; 0x28
    cce4:	e3a03a01 	mov	r3, #4096	; 0x1000
    cce8:	e3433f20 	movt	r3, #16160	; 0x3f20
    ccec:	e3a02060 	mov	r2, #96	; 0x60
    ccf0:	e583202c 	str	r2, [r3, #44]	; 0x2c
    ccf4:	eaffffdc 	b	cc6c <CSerialDevice::Initialize(unsigned int)+0xf8>
    ccf8:	e3021034 	movw	r1, #8244	; 0x2034
    ccfc:	e3020088 	movw	r0, #8328	; 0x2088
    cd00:	e3401001 	movt	r1, #1
    cd04:	e3400001 	movt	r0, #1
    cd08:	e3a0208e 	mov	r2, #142	; 0x8e
    cd0c:	ebfffc81 	bl	bf18 <assertion_failed>
    cd10:	eaffffad 	b	cbcc <CSerialDevice::Initialize(unsigned int)+0x58>
    cd14:	e3021034 	movw	r1, #8244	; 0x2034
    cd18:	e302005c 	movw	r0, #8284	; 0x205c
    cd1c:	e3401001 	movt	r1, #1
    cd20:	e3400001 	movt	r0, #1
    cd24:	e3a0208b 	mov	r2, #139	; 0x8b
    cd28:	ebfffc7a 	bl	bf18 <assertion_failed>
    cd2c:	eaffff9d 	b	cba8 <CSerialDevice::Initialize(unsigned int)+0x34>
    cd30:	e3021034 	movw	r1, #8244	; 0x2034
    cd34:	e302004c 	movw	r0, #8268	; 0x204c
    cd38:	e3401001 	movt	r1, #1
    cd3c:	e3400001 	movt	r0, #1
    cd40:	e3a02089 	mov	r2, #137	; 0x89
    cd44:	ebfffc73 	bl	bf18 <assertion_failed>
    cd48:	eaffff91 	b	cb94 <CSerialDevice::Initialize(unsigned int)+0x20>

0000cd4c <CSerialDevice::GetOptions() const>:
    cd4c:	e2800a01 	add	r0, r0, #4096	; 0x1000
    cd50:	e59000c4 	ldr	r0, [r0, #196]	; 0xc4
    cd54:	e12fff1e 	bx	lr

0000cd58 <CSerialDevice::SetOptions(unsigned int)>:
    cd58:	e2800a01 	add	r0, r0, #4096	; 0x1000
    cd5c:	e58010c4 	str	r1, [r0, #196]	; 0xc4
    cd60:	e12fff1e 	bx	lr

0000cd64 <CSerialDevice::Write(unsigned char)>:
    cd64:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    cd68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cd6c:	e3530000 	cmp	r3, #0
    cd70:	03a02a01 	moveq	r2, #4096	; 0x1000
    cd74:	03432f20 	movteq	r2, #16160	; 0x3f20
    cd78:	0a000018 	beq	cde0 <CSerialDevice::Write(unsigned char)+0x7c>
    cd7c:	e2805a01 	add	r5, r0, #4096	; 0x1000
    cd80:	e1a06001 	mov	r6, r1
    cd84:	e1a04000 	mov	r4, r0
    cd88:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
    cd8c:	e3520000 	cmp	r2, #0
    cd90:	1a00001c 	bne	ce08 <CSerialDevice::Write(unsigned char)+0xa4>
    cd94:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    cd98:	e59510c0 	ldr	r1, [r5, #192]	; 0xc0
    cd9c:	e2833001 	add	r3, r3, #1
    cda0:	e7ea3053 	ubfx	r3, r3, #0, #11
    cda4:	e1530001 	cmp	r3, r1
    cda8:	0a000021 	beq	ce34 <CSerialDevice::Write(unsigned char)+0xd0>
    cdac:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    cdb0:	e3a07001 	mov	r7, #1
    cdb4:	e0840003 	add	r0, r4, r3
    cdb8:	e0833007 	add	r3, r3, r7
    cdbc:	e58530bc 	str	r3, [r5, #188]	; 0xbc
    cdc0:	e5c068bc 	strb	r6, [r0, #2236]	; 0x8bc
    cdc4:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    cdc8:	e7ea3053 	ubfx	r3, r3, #0, #11
    cdcc:	e58530bc 	str	r3, [r5, #188]	; 0xbc
    cdd0:	e3520000 	cmp	r2, #0
    cdd4:	1a000008 	bne	cdfc <CSerialDevice::Write(unsigned char)+0x98>
    cdd8:	e1a00007 	mov	r0, r7
    cddc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cde0:	e5923018 	ldr	r3, [r2, #24]
    cde4:	e3130020 	tst	r3, #32
    cde8:	1afffffc 	bne	cde0 <CSerialDevice::Write(unsigned char)+0x7c>
    cdec:	e3a07001 	mov	r7, #1
    cdf0:	e5821000 	str	r1, [r2]
    cdf4:	e1a00007 	mov	r0, r7
    cdf8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cdfc:	ebfff29d 	bl	9878 <LeaveCritical>
    ce00:	e1a00007 	mov	r0, r7
    ce04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ce08:	e1a00002 	mov	r0, r2
    ce0c:	ebfff26b 	bl	97c0 <EnterCritical>
    ce10:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    ce14:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
    ce18:	e2833001 	add	r3, r3, #1
    ce1c:	e7ea3053 	ubfx	r3, r3, #0, #11
    ce20:	e1530002 	cmp	r3, r2
    ce24:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
    ce28:	03a07000 	moveq	r7, #0
    ce2c:	1affffde 	bne	cdac <CSerialDevice::Write(unsigned char)+0x48>
    ce30:	eaffffe6 	b	cdd0 <CSerialDevice::Write(unsigned char)+0x6c>
    ce34:	e1a07002 	mov	r7, r2
    ce38:	e1a00007 	mov	r0, r7
    ce3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ce40 <CSerialDevice::Write(void const*, unsigned int)>:
    ce40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ce44:	e2804a01 	add	r4, r0, #4096	; 0x1000
    ce48:	e1a07000 	mov	r7, r0
    ce4c:	e1a05001 	mov	r5, r1
    ce50:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
    ce54:	e1a08002 	mov	r8, r2
    ce58:	e3500000 	cmp	r0, #0
    ce5c:	1a000052 	bne	cfac <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    ce60:	e3550000 	cmp	r5, #0
    ce64:	0a000058 	beq	cfcc <CSerialDevice::Write(void const*, unsigned int)+0x18c>
    ce68:	e3580000 	cmp	r8, #0
    ce6c:	0a00005d 	beq	cfe8 <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
    ce70:	e3a06000 	mov	r6, #0
    ce74:	ea000002 	b	ce84 <CSerialDevice::Write(void const*, unsigned int)+0x44>
    ce78:	e2866001 	add	r6, r6, #1
    ce7c:	e1560008 	cmp	r6, r8
    ce80:	0a00000f 	beq	cec4 <CSerialDevice::Write(void const*, unsigned int)+0x84>
    ce84:	e5d51000 	ldrb	r1, [r5]
    ce88:	e1a00007 	mov	r0, r7
    ce8c:	ebffffb4 	bl	cd64 <CSerialDevice::Write(unsigned char)>
    ce90:	e3500000 	cmp	r0, #0
    ce94:	0a00000a 	beq	cec4 <CSerialDevice::Write(void const*, unsigned int)+0x84>
    ce98:	e4d53001 	ldrb	r3, [r5], #1
    ce9c:	e353000a 	cmp	r3, #10
    cea0:	1afffff4 	bne	ce78 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    cea4:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    cea8:	e3130001 	tst	r3, #1
    ceac:	0afffff1 	beq	ce78 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    ceb0:	e3a0100d 	mov	r1, #13
    ceb4:	e1a00007 	mov	r0, r7
    ceb8:	ebffffa9 	bl	cd64 <CSerialDevice::Write(unsigned char)>
    cebc:	e3500000 	cmp	r0, #0
    cec0:	1affffec 	bne	ce78 <CSerialDevice::Write(void const*, unsigned int)+0x38>
    cec4:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    cec8:	e3530000 	cmp	r3, #0
    cecc:	1a000034 	bne	cfa4 <CSerialDevice::Write(void const*, unsigned int)+0x164>
    ced0:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    ced4:	e3530000 	cmp	r3, #0
    ced8:	0a000023 	beq	cf6c <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    cedc:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
    cee0:	e3500000 	cmp	r0, #0
    cee4:	1a000032 	bne	cfb4 <CSerialDevice::Write(void const*, unsigned int)+0x174>
    cee8:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    ceec:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    cef0:	e1520003 	cmp	r2, r3
    cef4:	0a00001c 	beq	cf6c <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    cef8:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    cefc:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
    cf00:	e1520003 	cmp	r2, r3
    cf04:	0a000015 	beq	cf60 <CSerialDevice::Write(void const*, unsigned int)+0x120>
    cf08:	e3a02a01 	mov	r2, #4096	; 0x1000
    cf0c:	e3432f20 	movt	r2, #16160	; 0x3f20
    cf10:	e5923018 	ldr	r3, [r2, #24]
    cf14:	e3130020 	tst	r3, #32
    cf18:	0a000003 	beq	cf2c <CSerialDevice::Write(void const*, unsigned int)+0xec>
    cf1c:	ea000017 	b	cf80 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    cf20:	e5923018 	ldr	r3, [r2, #24]
    cf24:	e3130020 	tst	r3, #32
    cf28:	1a000014 	bne	cf80 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    cf2c:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    cf30:	e0871003 	add	r1, r7, r3
    cf34:	e2833001 	add	r3, r3, #1
    cf38:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    cf3c:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
    cf40:	e5823000 	str	r3, [r2]
    cf44:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    cf48:	e7ea3053 	ubfx	r3, r3, #0, #11
    cf4c:	e58430c0 	str	r3, [r4, #192]	; 0xc0
    cf50:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
    cf54:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    cf58:	e1510003 	cmp	r1, r3
    cf5c:	1affffef 	bne	cf20 <CSerialDevice::Write(void const*, unsigned int)+0xe0>
    cf60:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    cf64:	e3530000 	cmp	r3, #0
    cf68:	1a000001 	bne	cf74 <CSerialDevice::Write(void const*, unsigned int)+0x134>
    cf6c:	e1a00006 	mov	r0, r6
    cf70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cf74:	ebfff23f 	bl	9878 <LeaveCritical>
    cf78:	e1a00006 	mov	r0, r6
    cf7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cf80:	e3a03a01 	mov	r3, #4096	; 0x1000
    cf84:	e3433f20 	movt	r3, #16160	; 0x3f20
    cf88:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    cf8c:	e3822020 	orr	r2, r2, #32
    cf90:	e5832038 	str	r2, [r3, #56]	; 0x38
    cf94:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    cf98:	e3530000 	cmp	r3, #0
    cf9c:	0afffff2 	beq	cf6c <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    cfa0:	eafffff3 	b	cf74 <CSerialDevice::Write(void const*, unsigned int)+0x134>
    cfa4:	ebfff233 	bl	9878 <LeaveCritical>
    cfa8:	eaffffc8 	b	ced0 <CSerialDevice::Write(void const*, unsigned int)+0x90>
    cfac:	ebfff203 	bl	97c0 <EnterCritical>
    cfb0:	eaffffaa 	b	ce60 <CSerialDevice::Write(void const*, unsigned int)+0x20>
    cfb4:	ebfff201 	bl	97c0 <EnterCritical>
    cfb8:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    cfbc:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
    cfc0:	e1520003 	cmp	r2, r3
    cfc4:	1affffcb 	bne	cef8 <CSerialDevice::Write(void const*, unsigned int)+0xb8>
    cfc8:	eaffffe4 	b	cf60 <CSerialDevice::Write(void const*, unsigned int)+0x120>
    cfcc:	e3021034 	movw	r1, #8244	; 0x2034
    cfd0:	e3020040 	movw	r0, #8256	; 0x2040
    cfd4:	e3401001 	movt	r1, #1
    cfd8:	e3400001 	movt	r0, #1
    cfdc:	e3a020c2 	mov	r2, #194	; 0xc2
    cfe0:	ebfffbcc 	bl	bf18 <assertion_failed>
    cfe4:	eaffff9f 	b	ce68 <CSerialDevice::Write(void const*, unsigned int)+0x28>
    cfe8:	e1a06008 	mov	r6, r8
    cfec:	eaffffb4 	b	cec4 <CSerialDevice::Write(void const*, unsigned int)+0x84>

0000cff0 <CSerialDevice::InterruptHandler()>:
    cff0:	e92d4070 	push	{r4, r5, r6, lr}
    cff4:	e2805a01 	add	r5, r0, #4096	; 0x1000
    cff8:	e1a04000 	mov	r4, r0
    cffc:	e59500c8 	ldr	r0, [r5, #200]	; 0xc8
    d000:	e3500000 	cmp	r0, #0
    d004:	1a000056 	bne	d164 <CSerialDevice::InterruptHandler()+0x174>
    d008:	e3a03a01 	mov	r3, #4096	; 0x1000
    d00c:	e3433f20 	movt	r3, #16160	; 0x3f20
    d010:	e3e0e002 	mvn	lr, #2
    d014:	e3e00001 	mvn	r0, #1
    d018:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    d01c:	e1a01003 	mov	r1, r3
    d020:	e3e0c000 	mvn	ip, #0
    d024:	e5832044 	str	r2, [r3, #68]	; 0x44
    d028:	e5913018 	ldr	r3, [r1, #24]
    d02c:	e3130010 	tst	r3, #16
    d030:	1a000016 	bne	d090 <CSerialDevice::InterruptHandler()+0xa0>
    d034:	e5912000 	ldr	r2, [r1]
    d038:	e3120b01 	tst	r2, #1024	; 0x400
    d03c:	0a000032 	beq	d10c <CSerialDevice::InterruptHandler()+0x11c>
    d040:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d044:	e3530000 	cmp	r3, #0
    d048:	0584c8b8 	streq	ip, [r4, #2232]	; 0x8b8
    d04c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    d050:	e59468b4 	ldr	r6, [r4, #2228]	; 0x8b4
    d054:	e2833001 	add	r3, r3, #1
    d058:	e7ea3053 	ubfx	r3, r3, #0, #11
    d05c:	e1530006 	cmp	r3, r6
    d060:	0a00002f 	beq	d124 <CSerialDevice::InterruptHandler()+0x134>
    d064:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    d068:	e0846003 	add	r6, r4, r3
    d06c:	e2833001 	add	r3, r3, #1
    d070:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    d074:	e5c620b0 	strb	r2, [r6, #176]	; 0xb0
    d078:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    d07c:	e7ea3053 	ubfx	r3, r3, #0, #11
    d080:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    d084:	e5913018 	ldr	r3, [r1, #24]
    d088:	e3130010 	tst	r3, #16
    d08c:	0affffe8 	beq	d034 <CSerialDevice::InterruptHandler()+0x44>
    d090:	e5913018 	ldr	r3, [r1, #24]
    d094:	e3130020 	tst	r3, #32
    d098:	1a000016 	bne	d0f8 <CSerialDevice::InterruptHandler()+0x108>
    d09c:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
    d0a0:	e59520c0 	ldr	r2, [r5, #192]	; 0xc0
    d0a4:	e1520003 	cmp	r2, r3
    d0a8:	13a02a01 	movne	r2, #4096	; 0x1000
    d0ac:	13432f20 	movtne	r2, #16160	; 0x3f20
    d0b0:	1a000004 	bne	d0c8 <CSerialDevice::InterruptHandler()+0xd8>
    d0b4:	ea000024 	b	d14c <CSerialDevice::InterruptHandler()+0x15c>
    d0b8:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    d0bc:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    d0c0:	e1510003 	cmp	r1, r3
    d0c4:	0a000020 	beq	d14c <CSerialDevice::InterruptHandler()+0x15c>
    d0c8:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    d0cc:	e0841003 	add	r1, r4, r3
    d0d0:	e2833001 	add	r3, r3, #1
    d0d4:	e58530c0 	str	r3, [r5, #192]	; 0xc0
    d0d8:	e5d138bc 	ldrb	r3, [r1, #2236]	; 0x8bc
    d0dc:	e5823000 	str	r3, [r2]
    d0e0:	e59530c0 	ldr	r3, [r5, #192]	; 0xc0
    d0e4:	e7ea3053 	ubfx	r3, r3, #0, #11
    d0e8:	e58530c0 	str	r3, [r5, #192]	; 0xc0
    d0ec:	e5923018 	ldr	r3, [r2, #24]
    d0f0:	e3130020 	tst	r3, #32
    d0f4:	0affffef 	beq	d0b8 <CSerialDevice::InterruptHandler()+0xc8>
    d0f8:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    d0fc:	e3530000 	cmp	r3, #0
    d100:	08bd8070 	popeq	{r4, r5, r6, pc}
    d104:	e8bd4070 	pop	{r4, r5, r6, lr}
    d108:	eafff1da 	b	9878 <LeaveCritical>
    d10c:	e3120b02 	tst	r2, #2048	; 0x800
    d110:	0a000007 	beq	d134 <CSerialDevice::InterruptHandler()+0x144>
    d114:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d118:	e3530000 	cmp	r3, #0
    d11c:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    d120:	eaffffc9 	b	d04c <CSerialDevice::InterruptHandler()+0x5c>
    d124:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d128:	e3530000 	cmp	r3, #0
    d12c:	058408b8 	streq	r0, [r4, #2232]	; 0x8b8
    d130:	eaffffbc 	b	d028 <CSerialDevice::InterruptHandler()+0x38>
    d134:	e3120c01 	tst	r2, #256	; 0x100
    d138:	0affffc3 	beq	d04c <CSerialDevice::InterruptHandler()+0x5c>
    d13c:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d140:	e3530000 	cmp	r3, #0
    d144:	0584e8b8 	streq	lr, [r4, #2232]	; 0x8b8
    d148:	eaffffbf 	b	d04c <CSerialDevice::InterruptHandler()+0x5c>
    d14c:	e3a03a01 	mov	r3, #4096	; 0x1000
    d150:	e3433f20 	movt	r3, #16160	; 0x3f20
    d154:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    d158:	e3c22020 	bic	r2, r2, #32
    d15c:	e5832038 	str	r2, [r3, #56]	; 0x38
    d160:	eaffffe4 	b	d0f8 <CSerialDevice::InterruptHandler()+0x108>
    d164:	ebfff195 	bl	97c0 <EnterCritical>
    d168:	eaffffa6 	b	d008 <CSerialDevice::InterruptHandler()+0x18>

0000d16c <CSerialDevice::InterruptStub(void*)>:
    d16c:	e92d4010 	push	{r4, lr}
    d170:	e2504000 	subs	r4, r0, #0
    d174:	0a000002 	beq	d184 <CSerialDevice::InterruptStub(void*)+0x18>
    d178:	e1a00004 	mov	r0, r4
    d17c:	e8bd4010 	pop	{r4, lr}
    d180:	eaffff9a 	b	cff0 <CSerialDevice::InterruptHandler()>
    d184:	e3021034 	movw	r1, #8244	; 0x2034
    d188:	e3000f6c 	movw	r0, #3948	; 0xf6c
    d18c:	e3401001 	movt	r1, #1
    d190:	e3400001 	movt	r0, #1
    d194:	e30021c1 	movw	r2, #449	; 0x1c1
    d198:	ebfffb5e 	bl	bf18 <assertion_failed>
    d19c:	e1a00004 	mov	r0, r4
    d1a0:	e8bd4010 	pop	{r4, lr}
    d1a4:	eaffff91 	b	cff0 <CSerialDevice::InterruptHandler()>

0000d1a8 <CSerialDevice::~CSerialDevice()>:
    d1a8:	e59f10a8 	ldr	r1, [pc, #168]	; d258 <CSerialDevice::~CSerialDevice()+0xb0>
    d1ac:	e3a03a01 	mov	r3, #4096	; 0x1000
    d1b0:	e3433f20 	movt	r3, #16160	; 0x3f20
    d1b4:	e3a02000 	mov	r2, #0
    d1b8:	e92d4010 	push	{r4, lr}
    d1bc:	e1a04000 	mov	r4, r0
    d1c0:	e5801000 	str	r1, [r0]
    d1c4:	e5832038 	str	r2, [r3, #56]	; 0x38
    d1c8:	e5832030 	str	r2, [r3, #48]	; 0x30
    d1cc:	e59030ac 	ldr	r3, [r0, #172]	; 0xac
    d1d0:	e1530002 	cmp	r3, r2
    d1d4:	0a000006 	beq	d1f4 <CSerialDevice::~CSerialDevice()+0x4c>
    d1d8:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    d1dc:	e1500002 	cmp	r0, r2
    d1e0:	0a000014 	beq	d238 <CSerialDevice::~CSerialDevice()+0x90>
    d1e4:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
    d1e8:	e3530000 	cmp	r3, #0
    d1ec:	0a00000e 	beq	d22c <CSerialDevice::~CSerialDevice()+0x84>
    d1f0:	eb0004f7 	bl	e5d4 <CInterruptSystem::DisconnectFIQ()>
    d1f4:	e3a03000 	mov	r3, #0
    d1f8:	e284007c 	add	r0, r4, #124	; 0x7c
    d1fc:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    d200:	ebffeda0 	bl	8888 <CGPIOPin::~CGPIOPin()>
    d204:	e2840054 	add	r0, r4, #84	; 0x54
    d208:	ebffed9e 	bl	8888 <CGPIOPin::~CGPIOPin()>
    d20c:	e284002c 	add	r0, r4, #44	; 0x2c
    d210:	ebffed9c 	bl	8888 <CGPIOPin::~CGPIOPin()>
    d214:	e2840004 	add	r0, r4, #4
    d218:	ebffed9a 	bl	8888 <CGPIOPin::~CGPIOPin()>
    d21c:	e1a00004 	mov	r0, r4
    d220:	eb000d78 	bl	10808 <CDevice::~CDevice()>
    d224:	e1a00004 	mov	r0, r4
    d228:	e8bd8010 	pop	{r4, pc}
    d22c:	e3a01039 	mov	r1, #57	; 0x39
    d230:	eb000550 	bl	e778 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    d234:	eaffffee 	b	d1f4 <CSerialDevice::~CSerialDevice()+0x4c>
    d238:	e3021034 	movw	r1, #8244	; 0x2034
    d23c:	e3000e94 	movw	r0, #3732	; 0xe94
    d240:	e3401001 	movt	r1, #1
    d244:	e3400001 	movt	r0, #1
    d248:	e3a02078 	mov	r2, #120	; 0x78
    d24c:	ebfffb31 	bl	bf18 <assertion_failed>
    d250:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    d254:	eaffffe2 	b	d1e4 <CSerialDevice::~CSerialDevice()+0x3c>
    d258:	00012020 	.word	0x00012020

0000d25c <CSerialDevice::~CSerialDevice()>:
    d25c:	e92d4010 	push	{r4, lr}
    d260:	e1a04000 	mov	r4, r0
    d264:	ebffffcf 	bl	d1a8 <CSerialDevice::~CSerialDevice()>
    d268:	e1a00004 	mov	r0, r4
    d26c:	e30110d0 	movw	r1, #4304	; 0x10d0
    d270:	ebfff150 	bl	97b8 <operator delete(void*, unsigned int)>
    d274:	e1a00004 	mov	r0, r4
    d278:	e8bd8010 	pop	{r4, pc}
    d27c:	00000000 	andeq	r0, r0, r0

0000d280 <CString::~CString()>:
    d280:	e92d4010 	push	{r4, lr}
    d284:	e1a04000 	mov	r4, r0
    d288:	e5900004 	ldr	r0, [r0, #4]
    d28c:	e59f3014 	ldr	r3, [pc, #20]	; d2a8 <CString::~CString()+0x28>
    d290:	e3500000 	cmp	r0, #0
    d294:	e5843000 	str	r3, [r4]
    d298:	0a000000 	beq	d2a0 <CString::~CString()+0x20>
    d29c:	ebfff144 	bl	97b4 <operator delete[](void*)>
    d2a0:	e1a00004 	mov	r0, r4
    d2a4:	e8bd8010 	pop	{r4, pc}
    d2a8:	000120d0 	.word	0x000120d0

0000d2ac <CString::~CString()>:
    d2ac:	e92d4010 	push	{r4, lr}
    d2b0:	e1a04000 	mov	r4, r0
    d2b4:	e5900004 	ldr	r0, [r0, #4]
    d2b8:	e59f3020 	ldr	r3, [pc, #32]	; d2e0 <CString::~CString()+0x34>
    d2bc:	e3500000 	cmp	r0, #0
    d2c0:	e5843000 	str	r3, [r4]
    d2c4:	0a000000 	beq	d2cc <CString::~CString()+0x20>
    d2c8:	ebfff139 	bl	97b4 <operator delete[](void*)>
    d2cc:	e1a00004 	mov	r0, r4
    d2d0:	e3a01010 	mov	r1, #16
    d2d4:	ebfff137 	bl	97b8 <operator delete(void*, unsigned int)>
    d2d8:	e1a00004 	mov	r0, r4
    d2dc:	e8bd8010 	pop	{r4, pc}
    d2e0:	000120d0 	.word	0x000120d0

0000d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    d2e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d2e8:	e990002c 	ldmib	r0, {r2, r3, r5}
    d2ec:	e0455002 	sub	r5, r5, r2
    d2f0:	e0851001 	add	r1, r5, r1
    d2f4:	e2812001 	add	r2, r1, #1
    d2f8:	e1520003 	cmp	r2, r3
    d2fc:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d300:	e2816041 	add	r6, r1, #65	; 0x41
    d304:	e1a04000 	mov	r4, r0
    d308:	e1a00006 	mov	r0, r6
    d30c:	ebfff126 	bl	97ac <operator new[](unsigned int)>
    d310:	e594300c 	ldr	r3, [r4, #12]
    d314:	e3a02000 	mov	r2, #0
    d318:	e5c32000 	strb	r2, [r3]
    d31c:	e5941004 	ldr	r1, [r4, #4]
    d320:	e1a07000 	mov	r7, r0
    d324:	eb000b74 	bl	100fc <strcpy>
    d328:	e5940004 	ldr	r0, [r4, #4]
    d32c:	e3500000 	cmp	r0, #0
    d330:	0a000000 	beq	d338 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    d334:	ebfff11e 	bl	97b4 <operator delete[](void*)>
    d338:	e0875005 	add	r5, r7, r5
    d33c:	e5847004 	str	r7, [r4, #4]
    d340:	e584500c 	str	r5, [r4, #12]
    d344:	e5846008 	str	r6, [r4, #8]
    d348:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d34c <CString::CString()>:
    d34c:	e59f1010 	ldr	r1, [pc, #16]	; d364 <CString::CString()+0x18>
    d350:	e3a02000 	mov	r2, #0
    d354:	e5802004 	str	r2, [r0, #4]
    d358:	e5802008 	str	r2, [r0, #8]
    d35c:	e5801000 	str	r1, [r0]
    d360:	e12fff1e 	bx	lr
    d364:	000120d0 	.word	0x000120d0

0000d368 <CString::CString(char const*)>:
    d368:	e59f3034 	ldr	r3, [pc, #52]	; d3a4 <CString::CString(char const*)+0x3c>
    d36c:	e92d4070 	push	{r4, r5, r6, lr}
    d370:	e1a04000 	mov	r4, r0
    d374:	e5843000 	str	r3, [r4]
    d378:	e1a00001 	mov	r0, r1
    d37c:	e1a05001 	mov	r5, r1
    d380:	eb000b38 	bl	10068 <strlen>
    d384:	e2800001 	add	r0, r0, #1
    d388:	e5840008 	str	r0, [r4, #8]
    d38c:	ebfff106 	bl	97ac <operator new[](unsigned int)>
    d390:	e1a01005 	mov	r1, r5
    d394:	e5840004 	str	r0, [r4, #4]
    d398:	eb000b57 	bl	100fc <strcpy>
    d39c:	e1a00004 	mov	r0, r4
    d3a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d3a4:	000120d0 	.word	0x000120d0

0000d3a8 <CString::operator char const*() const>:
    d3a8:	e5900004 	ldr	r0, [r0, #4]
    d3ac:	e3003dfc 	movw	r3, #3580	; 0xdfc
    d3b0:	e3403001 	movt	r3, #1
    d3b4:	e3500000 	cmp	r0, #0
    d3b8:	01a00003 	moveq	r0, r3
    d3bc:	e12fff1e 	bx	lr

0000d3c0 <CString::operator=(char const*)>:
    d3c0:	e92d4070 	push	{r4, r5, r6, lr}
    d3c4:	e1a04000 	mov	r4, r0
    d3c8:	e5900004 	ldr	r0, [r0, #4]
    d3cc:	e1a05001 	mov	r5, r1
    d3d0:	e3500000 	cmp	r0, #0
    d3d4:	0a000000 	beq	d3dc <CString::operator=(char const*)+0x1c>
    d3d8:	ebfff0f5 	bl	97b4 <operator delete[](void*)>
    d3dc:	e1a00005 	mov	r0, r5
    d3e0:	eb000b20 	bl	10068 <strlen>
    d3e4:	e2800001 	add	r0, r0, #1
    d3e8:	e5840008 	str	r0, [r4, #8]
    d3ec:	ebfff0ee 	bl	97ac <operator new[](unsigned int)>
    d3f0:	e1a01005 	mov	r1, r5
    d3f4:	e5840004 	str	r0, [r4, #4]
    d3f8:	eb000b3f 	bl	100fc <strcpy>
    d3fc:	e5940004 	ldr	r0, [r4, #4]
    d400:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d404 <CString::GetLength() const>:
    d404:	e5900004 	ldr	r0, [r0, #4]
    d408:	e3500000 	cmp	r0, #0
    d40c:	012fff1e 	bxeq	lr
    d410:	ea000b14 	b	10068 <strlen>

0000d414 <CString::Append(char const*)>:
    d414:	e92d4070 	push	{r4, r5, r6, lr}
    d418:	e1a04000 	mov	r4, r0
    d41c:	e5900004 	ldr	r0, [r0, #4]
    d420:	e3a03001 	mov	r3, #1
    d424:	e1a06001 	mov	r6, r1
    d428:	e5843008 	str	r3, [r4, #8]
    d42c:	e3500000 	cmp	r0, #0
    d430:	0a000003 	beq	d444 <CString::Append(char const*)+0x30>
    d434:	eb000b0b 	bl	10068 <strlen>
    d438:	e5943008 	ldr	r3, [r4, #8]
    d43c:	e0830000 	add	r0, r3, r0
    d440:	e5840008 	str	r0, [r4, #8]
    d444:	e1a00006 	mov	r0, r6
    d448:	eb000b06 	bl	10068 <strlen>
    d44c:	e5943008 	ldr	r3, [r4, #8]
    d450:	e0800003 	add	r0, r0, r3
    d454:	e5840008 	str	r0, [r4, #8]
    d458:	ebfff0d3 	bl	97ac <operator new[](unsigned int)>
    d45c:	e5941004 	ldr	r1, [r4, #4]
    d460:	e3510000 	cmp	r1, #0
    d464:	e1a05000 	mov	r5, r0
    d468:	05c01000 	strbeq	r1, [r0]
    d46c:	0a000004 	beq	d484 <CString::Append(char const*)+0x70>
    d470:	eb000b21 	bl	100fc <strcpy>
    d474:	e5940004 	ldr	r0, [r4, #4]
    d478:	e3500000 	cmp	r0, #0
    d47c:	0a000000 	beq	d484 <CString::Append(char const*)+0x70>
    d480:	ebfff0cb 	bl	97b4 <operator delete[](void*)>
    d484:	e1a01006 	mov	r1, r6
    d488:	e1a00005 	mov	r0, r5
    d48c:	eb000b38 	bl	10174 <strcat>
    d490:	e5845004 	str	r5, [r4, #4]
    d494:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d498 <CString::Compare(char const*) const>:
    d498:	e5900004 	ldr	r0, [r0, #4]
    d49c:	ea000afb 	b	10090 <strcmp>

0000d4a0 <CString::Find(char) const>:
    d4a0:	e5902004 	ldr	r2, [r0, #4]
    d4a4:	e1d230d0 	ldrsb	r3, [r2]
    d4a8:	e3530000 	cmp	r3, #0
    d4ac:	0a000009 	beq	d4d8 <CString::Find(char) const+0x38>
    d4b0:	e1510003 	cmp	r1, r3
    d4b4:	e3a00000 	mov	r0, #0
    d4b8:	1a000002 	bne	d4c8 <CString::Find(char) const+0x28>
    d4bc:	ea000007 	b	d4e0 <CString::Find(char) const+0x40>
    d4c0:	e1530001 	cmp	r3, r1
    d4c4:	012fff1e 	bxeq	lr
    d4c8:	e1f230d1 	ldrsb	r3, [r2, #1]!
    d4cc:	e2800001 	add	r0, r0, #1
    d4d0:	e3530000 	cmp	r3, #0
    d4d4:	1afffff9 	bne	d4c0 <CString::Find(char) const+0x20>
    d4d8:	e3e00000 	mvn	r0, #0
    d4dc:	e12fff1e 	bx	lr
    d4e0:	e12fff1e 	bx	lr

0000d4e4 <CString::PutChar(char, unsigned int)>:
    d4e4:	e92d4070 	push	{r4, r5, r6, lr}
    d4e8:	e2524000 	subs	r4, r2, #0
    d4ec:	08bd8070 	popeq	{r4, r5, r6, pc}
    d4f0:	e1a06001 	mov	r6, r1
    d4f4:	e1a01004 	mov	r1, r4
    d4f8:	e1a05000 	mov	r5, r0
    d4fc:	ebffff78 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d500:	e2443001 	sub	r3, r4, #1
    d504:	e595200c 	ldr	r2, [r5, #12]
    d508:	e2433001 	sub	r3, r3, #1
    d50c:	e3730001 	cmn	r3, #1
    d510:	e2820001 	add	r0, r2, #1
    d514:	e585000c 	str	r0, [r5, #12]
    d518:	e5c26000 	strb	r6, [r2]
    d51c:	1afffff8 	bne	d504 <CString::PutChar(char, unsigned int)+0x20>
    d520:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d524 <CString::PutString(char const*)>:
    d524:	e92d4070 	push	{r4, r5, r6, lr}
    d528:	e1a04000 	mov	r4, r0
    d52c:	e1a00001 	mov	r0, r1
    d530:	e1a05001 	mov	r5, r1
    d534:	eb000acb 	bl	10068 <strlen>
    d538:	e2506000 	subs	r6, r0, #0
    d53c:	0a000002 	beq	d54c <CString::PutString(char const*)+0x28>
    d540:	e1a01006 	mov	r1, r6
    d544:	e1a00004 	mov	r0, r4
    d548:	ebffff65 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d54c:	e1a01005 	mov	r1, r5
    d550:	e594000c 	ldr	r0, [r4, #12]
    d554:	eb000ae8 	bl	100fc <strcpy>
    d558:	e594100c 	ldr	r1, [r4, #12]
    d55c:	e0811006 	add	r1, r1, r6
    d560:	e584100c 	str	r1, [r4, #12]
    d564:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d568 <CString::ReserveSpace(unsigned int)>:
    d568:	e3510000 	cmp	r1, #0
    d56c:	012fff1e 	bxeq	lr
    d570:	eaffff5b 	b	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000d574 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    d574:	e1510002 	cmp	r1, r2
    d578:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d57c:	e1a06001 	mov	r6, r1
    d580:	e1a08002 	mov	r8, r2
    d584:	e1a0a000 	mov	sl, r0
    d588:	e1a07003 	mov	r7, r3
    d58c:	23a05001 	movcs	r5, #1
    d590:	3a000022 	bcc	d620 <CString::ntoa(char*, unsigned long, unsigned int, int)+0xac>
    d594:	e0050598 	mul	r5, r8, r5
    d598:	e1a00006 	mov	r0, r6
    d59c:	e1a01005 	mov	r1, r5
    d5a0:	eb000a84 	bl	ffb8 <__aeabi_uidiv>
    d5a4:	e1500008 	cmp	r0, r8
    d5a8:	e1a04000 	mov	r4, r0
    d5ac:	2afffff8 	bcs	d594 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x20>
    d5b0:	e3570000 	cmp	r7, #0
    d5b4:	e1a0700a 	mov	r7, sl
    d5b8:	13a09037 	movne	r9, #55	; 0x37
    d5bc:	03a09057 	moveq	r9, #87	; 0x57
    d5c0:	ea000001 	b	d5cc <CString::ntoa(char*, unsigned long, unsigned int, int)+0x58>
    d5c4:	eb000a7b 	bl	ffb8 <__aeabi_uidiv>
    d5c8:	e1a04000 	mov	r4, r0
    d5cc:	e1a00006 	mov	r0, r6
    d5d0:	e1a01005 	mov	r1, r5
    d5d4:	eb000a7b 	bl	ffc8 <__aeabi_uidivmod>
    d5d8:	e2877001 	add	r7, r7, #1
    d5dc:	e3540009 	cmp	r4, #9
    d5e0:	e0893004 	add	r3, r9, r4
    d5e4:	e2844030 	add	r4, r4, #48	; 0x30
    d5e8:	e1a00005 	mov	r0, r5
    d5ec:	e6af3073 	sxtb	r3, r3
    d5f0:	96af3074 	sxtbls	r3, r4
    d5f4:	e5473001 	strb	r3, [r7, #-1]
    d5f8:	e1a06001 	mov	r6, r1
    d5fc:	e1a01008 	mov	r1, r8
    d600:	eb000a6c 	bl	ffb8 <__aeabi_uidiv>
    d604:	e2505000 	subs	r5, r0, #0
    d608:	e1a00006 	mov	r0, r6
    d60c:	e1a01005 	mov	r1, r5
    d610:	1affffeb 	bne	d5c4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x50>
    d614:	e5c75000 	strb	r5, [r7]
    d618:	e1a0000a 	mov	r0, sl
    d61c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d620:	e1a04001 	mov	r4, r1
    d624:	e3a05001 	mov	r5, #1
    d628:	eaffffe0 	b	d5b0 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x3c>

0000d62c <CString::ftoa(char*, double, unsigned int)>:
    d62c:	eeb50bc0 	vcmpe.f64	d0, #0.0
    d630:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d634:	e1a08000 	mov	r8, r0
    d638:	ed2d8b02 	vpush	{d8}
    d63c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d640:	43a0302d 	movmi	r3, #45	; 0x2d
    d644:	42809001 	addmi	r9, r0, #1
    d648:	45c03000 	strbmi	r3, [r0]
    d64c:	eeb08b40 	vmov.f64	d8, d0
    d650:	51a09000 	movpl	r9, r0
    d654:	eddf0b91 	vldr	d16, [pc, #580]	; d8a0 <CString::ftoa(char*, double, unsigned int)+0x274>
    d658:	e24dd01c 	sub	sp, sp, #28
    d65c:	e58d1004 	str	r1, [sp, #4]
    d660:	4eb18b40 	vnegmi.f64	d8, d0
    d664:	eeb48be0 	vcmpe.f64	d8, d16
    d668:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d66c:	ca00007b 	bgt	d860 <CString::ftoa(char*, double, unsigned int)+0x234>
    d670:	eefc7bc8 	vcvt.u32.f64	s15, d8
    d674:	ee175a90 	vmov	r5, s15
    d678:	e3550009 	cmp	r5, #9
    d67c:	83a07001 	movhi	r7, #1
    d680:	83a0400a 	movhi	r4, #10
    d684:	9a00007d 	bls	d880 <CString::ftoa(char*, double, unsigned int)+0x254>
    d688:	e0070794 	mul	r7, r4, r7
    d68c:	e1a00005 	mov	r0, r5
    d690:	e1a01007 	mov	r1, r7
    d694:	eb000a47 	bl	ffb8 <__aeabi_uidiv>
    d698:	e3500009 	cmp	r0, #9
    d69c:	e1a0a000 	mov	sl, r0
    d6a0:	8afffff8 	bhi	d688 <CString::ftoa(char*, double, unsigned int)+0x5c>
    d6a4:	e30c6ccd 	movw	r6, #52429	; 0xcccd
    d6a8:	e1a04009 	mov	r4, r9
    d6ac:	e34c6ccc 	movt	r6, #52428	; 0xcccc
    d6b0:	e1a0b005 	mov	fp, r5
    d6b4:	ea000001 	b	d6c0 <CString::ftoa(char*, double, unsigned int)+0x94>
    d6b8:	eb000a3e 	bl	ffb8 <__aeabi_uidiv>
    d6bc:	e1a0a000 	mov	sl, r0
    d6c0:	e1a0000b 	mov	r0, fp
    d6c4:	e1a01007 	mov	r1, r7
    d6c8:	eb000a3e 	bl	ffc8 <__aeabi_uidivmod>
    d6cc:	e0832697 	umull	r2, r3, r7, r6
    d6d0:	e35a0009 	cmp	sl, #9
    d6d4:	e2844001 	add	r4, r4, #1
    d6d8:	e1a0b001 	mov	fp, r1
    d6dc:	e28a1057 	add	r1, sl, #87	; 0x57
    d6e0:	e28aa030 	add	sl, sl, #48	; 0x30
    d6e4:	e1a0000b 	mov	r0, fp
    d6e8:	e6af1071 	sxtb	r1, r1
    d6ec:	96af107a 	sxtbls	r1, sl
    d6f0:	e1b071a3 	lsrs	r7, r3, #3
    d6f4:	e5441001 	strb	r1, [r4, #-1]
    d6f8:	e1a01007 	mov	r1, r7
    d6fc:	1affffed 	bne	d6b8 <CString::ftoa(char*, double, unsigned int)+0x8c>
    d700:	e59d3004 	ldr	r3, [sp, #4]
    d704:	e5c47000 	strb	r7, [r4]
    d708:	e3530000 	cmp	r3, #0
    d70c:	1a000003 	bne	d720 <CString::ftoa(char*, double, unsigned int)+0xf4>
    d710:	e1a00008 	mov	r0, r8
    d714:	e28dd01c 	add	sp, sp, #28
    d718:	ecbd8b02 	vpop	{d8}
    d71c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d720:	e1a00009 	mov	r0, r9
    d724:	eb000a4f 	bl	10068 <strlen>
    d728:	e59d3004 	ldr	r3, [sp, #4]
    d72c:	e3530009 	cmp	r3, #9
    d730:	31a07003 	movcc	r7, r3
    d734:	23a07009 	movcs	r7, #9
    d738:	e3570001 	cmp	r7, #1
    d73c:	e3a0302e 	mov	r3, #46	; 0x2e
    d740:	e0892000 	add	r2, r9, r0
    d744:	e7c93000 	strb	r3, [r9, r0]
    d748:	e58d2004 	str	r2, [sp, #4]
    d74c:	e2829001 	add	r9, r2, #1
    d750:	0a000050 	beq	d898 <CString::ftoa(char*, double, unsigned int)+0x26c>
    d754:	e3a0200a 	mov	r2, #10
    d758:	e3a03002 	mov	r3, #2
    d75c:	e1a01002 	mov	r1, r2
    d760:	e2833001 	add	r3, r3, #1
    d764:	e1530007 	cmp	r3, r7
    d768:	e0020291 	mul	r2, r1, r2
    d76c:	9afffffb 	bls	d760 <CString::ftoa(char*, double, unsigned int)+0x134>
    d770:	ee072a90 	vmov	s15, r2
    d774:	eef81b67 	vcvt.f64.u32	d17, s15
    d778:	ee075a90 	vmov	s15, r5
    d77c:	eef80b67 	vcvt.f64.u32	d16, s15
    d780:	ee388b60 	vsub.f64	d8, d8, d16
    d784:	ee288b21 	vmul.f64	d8, d8, d17
    d788:	eefc7bc8 	vcvt.u32.f64	s15, d8
    d78c:	ee17ba90 	vmov	fp, s15
    d790:	e35b0009 	cmp	fp, #9
    d794:	83a06001 	movhi	r6, #1
    d798:	83a0400a 	movhi	r4, #10
    d79c:	9a00003a 	bls	d88c <CString::ftoa(char*, double, unsigned int)+0x260>
    d7a0:	e0060694 	mul	r6, r4, r6
    d7a4:	e1a0000b 	mov	r0, fp
    d7a8:	e1a01006 	mov	r1, r6
    d7ac:	eb000a01 	bl	ffb8 <__aeabi_uidiv>
    d7b0:	e3500009 	cmp	r0, #9
    d7b4:	e1a0a000 	mov	sl, r0
    d7b8:	8afffff8 	bhi	d7a0 <CString::ftoa(char*, double, unsigned int)+0x174>
    d7bc:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    d7c0:	e28d400c 	add	r4, sp, #12
    d7c4:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    d7c8:	ea000001 	b	d7d4 <CString::ftoa(char*, double, unsigned int)+0x1a8>
    d7cc:	eb0009f9 	bl	ffb8 <__aeabi_uidiv>
    d7d0:	e1a0a000 	mov	sl, r0
    d7d4:	e1a0000b 	mov	r0, fp
    d7d8:	e1a01006 	mov	r1, r6
    d7dc:	eb0009f9 	bl	ffc8 <__aeabi_uidivmod>
    d7e0:	e0832596 	umull	r2, r3, r6, r5
    d7e4:	e35a0009 	cmp	sl, #9
    d7e8:	e2844001 	add	r4, r4, #1
    d7ec:	e1a0b001 	mov	fp, r1
    d7f0:	e28a1057 	add	r1, sl, #87	; 0x57
    d7f4:	e28aa030 	add	sl, sl, #48	; 0x30
    d7f8:	e1a0000b 	mov	r0, fp
    d7fc:	e6af1071 	sxtb	r1, r1
    d800:	96af107a 	sxtbls	r1, sl
    d804:	e1b061a3 	lsrs	r6, r3, #3
    d808:	e5441001 	strb	r1, [r4, #-1]
    d80c:	e1a01006 	mov	r1, r6
    d810:	1affffed 	bne	d7cc <CString::ftoa(char*, double, unsigned int)+0x1a0>
    d814:	e28d000c 	add	r0, sp, #12
    d818:	e5c46000 	strb	r6, [r4]
    d81c:	eb000a11 	bl	10068 <strlen>
    d820:	e0577000 	subs	r7, r7, r0
    d824:	0a000006 	beq	d844 <CString::ftoa(char*, double, unsigned int)+0x218>
    d828:	e59d6004 	ldr	r6, [sp, #4]
    d82c:	e3a03030 	mov	r3, #48	; 0x30
    d830:	e0862007 	add	r2, r6, r7
    d834:	e5e63001 	strb	r3, [r6, #1]!
    d838:	e1560002 	cmp	r6, r2
    d83c:	1afffffc 	bne	d834 <CString::ftoa(char*, double, unsigned int)+0x208>
    d840:	e0899007 	add	r9, r9, r7
    d844:	e28d100c 	add	r1, sp, #12
    d848:	e1a00009 	mov	r0, r9
    d84c:	eb000a2a 	bl	100fc <strcpy>
    d850:	e1a00008 	mov	r0, r8
    d854:	e28dd01c 	add	sp, sp, #28
    d858:	ecbd8b02 	vpop	{d8}
    d85c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d860:	e1a00009 	mov	r0, r9
    d864:	e30210d8 	movw	r1, #8408	; 0x20d8
    d868:	e3401001 	movt	r1, #1
    d86c:	eb000a22 	bl	100fc <strcpy>
    d870:	e1a00008 	mov	r0, r8
    d874:	e28dd01c 	add	sp, sp, #28
    d878:	ecbd8b02 	vpop	{d8}
    d87c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d880:	ee17aa90 	vmov	sl, s15
    d884:	e3a07001 	mov	r7, #1
    d888:	eaffff85 	b	d6a4 <CString::ftoa(char*, double, unsigned int)+0x78>
    d88c:	ee17aa90 	vmov	sl, s15
    d890:	e3a06001 	mov	r6, #1
    d894:	eaffffc8 	b	d7bc <CString::ftoa(char*, double, unsigned int)+0x190>
    d898:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    d89c:	eaffffb5 	b	d778 <CString::ftoa(char*, double, unsigned int)+0x14c>
    d8a0:	ffe00000 	.word	0xffe00000
    d8a4:	41efffff 	.word	0x41efffff

0000d8a8 <CString::FormatV(char const*, std::__va_list)>:
    d8a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8ac:	e1a0b000 	mov	fp, r0
    d8b0:	e5900004 	ldr	r0, [r0, #4]
    d8b4:	e24dd034 	sub	sp, sp, #52	; 0x34
    d8b8:	e1a05001 	mov	r5, r1
    d8bc:	e3500000 	cmp	r0, #0
    d8c0:	e58d2000 	str	r2, [sp]
    d8c4:	0a000000 	beq	d8cc <CString::FormatV(char const*, std::__va_list)+0x24>
    d8c8:	ebffefb9 	bl	97b4 <operator delete[](void*)>
    d8cc:	e3a00040 	mov	r0, #64	; 0x40
    d8d0:	e58b0008 	str	r0, [fp, #8]
    d8d4:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    d8d8:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    d8dc:	e58d3014 	str	r3, [sp, #20]
    d8e0:	ebffefb1 	bl	97ac <operator new[](unsigned int)>
    d8e4:	e58b0004 	str	r0, [fp, #4]
    d8e8:	e58b000c 	str	r0, [fp, #12]
    d8ec:	e1d540d0 	ldrsb	r4, [r5]
    d8f0:	e3540000 	cmp	r4, #0
    d8f4:	0a0000a2 	beq	db84 <CString::FormatV(char const*, std::__va_list)+0x2dc>
    d8f8:	e3540025 	cmp	r4, #37	; 0x25
    d8fc:	13a01001 	movne	r1, #1
    d900:	11a0000b 	movne	r0, fp
    d904:	1a000156 	bne	de64 <CString::FormatV(char const*, std::__va_list)+0x5bc>
    d908:	e1d560d1 	ldrsb	r6, [r5, #1]
    d90c:	e3560025 	cmp	r6, #37	; 0x25
    d910:	0a000169 	beq	debc <CString::FormatV(char const*, std::__va_list)+0x614>
    d914:	e356002d 	cmp	r6, #45	; 0x2d
    d918:	e3a04000 	mov	r4, #0
    d91c:	12855001 	addne	r5, r5, #1
    d920:	01d560d2 	ldrsbeq	r6, [r5, #2]
    d924:	03a03001 	moveq	r3, #1
    d928:	13a03000 	movne	r3, #0
    d92c:	02855002 	addeq	r5, r5, #2
    d930:	e3560030 	cmp	r6, #48	; 0x30
    d934:	e58d3004 	str	r3, [sp, #4]
    d938:	01d560d1 	ldrsbeq	r6, [r5, #1]
    d93c:	03a03001 	moveq	r3, #1
    d940:	13a03000 	movne	r3, #0
    d944:	058d300c 	streq	r3, [sp, #12]
    d948:	00855003 	addeq	r5, r5, r3
    d94c:	158d300c 	strne	r3, [sp, #12]
    d950:	e2463030 	sub	r3, r6, #48	; 0x30
    d954:	e6ef3073 	uxtb	r3, r3
    d958:	e3530009 	cmp	r3, #9
    d95c:	8a000007 	bhi	d980 <CString::FormatV(char const*, std::__va_list)+0xd8>
    d960:	e3a0200a 	mov	r2, #10
    d964:	e0246492 	mla	r4, r2, r4, r6
    d968:	e1f560d1 	ldrsb	r6, [r5, #1]!
    d96c:	e2463030 	sub	r3, r6, #48	; 0x30
    d970:	e2444030 	sub	r4, r4, #48	; 0x30
    d974:	e6ef3073 	uxtb	r3, r3
    d978:	e3530009 	cmp	r3, #9
    d97c:	9afffff8 	bls	d964 <CString::FormatV(char const*, std::__va_list)+0xbc>
    d980:	e356002e 	cmp	r6, #46	; 0x2e
    d984:	0a00013c 	beq	de7c <CString::FormatV(char const*, std::__va_list)+0x5d4>
    d988:	e1d570d0 	ldrsb	r7, [r5]
    d98c:	e3a01006 	mov	r1, #6
    d990:	e357006c 	cmp	r7, #108	; 0x6c
    d994:	01d570d1 	ldrsbeq	r7, [r5, #1]
    d998:	03a02001 	moveq	r2, #1
    d99c:	13a02000 	movne	r2, #0
    d9a0:	00855002 	addeq	r5, r5, r2
    d9a4:	e2473058 	sub	r3, r7, #88	; 0x58
    d9a8:	e3530020 	cmp	r3, #32
    d9ac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d9b0:	ea000120 	b	de38 <CString::FormatV(char const*, std::__va_list)+0x590>
    d9b4:	0000ddb4 	.word	0x0000ddb4
    d9b8:	0000de38 	.word	0x0000de38
    d9bc:	0000de38 	.word	0x0000de38
    d9c0:	0000de38 	.word	0x0000de38
    d9c4:	0000de38 	.word	0x0000de38
    d9c8:	0000de38 	.word	0x0000de38
    d9cc:	0000de38 	.word	0x0000de38
    d9d0:	0000de38 	.word	0x0000de38
    d9d4:	0000de38 	.word	0x0000de38
    d9d8:	0000de38 	.word	0x0000de38
    d9dc:	0000de38 	.word	0x0000de38
    d9e0:	0000dd40 	.word	0x0000dd40
    d9e4:	0000dc14 	.word	0x0000dc14
    d9e8:	0000de38 	.word	0x0000de38
    d9ec:	0000db94 	.word	0x0000db94
    d9f0:	0000de38 	.word	0x0000de38
    d9f4:	0000de38 	.word	0x0000de38
    d9f8:	0000de38 	.word	0x0000de38
    d9fc:	0000de38 	.word	0x0000de38
    da00:	0000de38 	.word	0x0000de38
    da04:	0000de38 	.word	0x0000de38
    da08:	0000de38 	.word	0x0000de38
    da0c:	0000de38 	.word	0x0000de38
    da10:	0000da38 	.word	0x0000da38
    da14:	0000de38 	.word	0x0000de38
    da18:	0000de38 	.word	0x0000de38
    da1c:	0000de38 	.word	0x0000de38
    da20:	0000ddc4 	.word	0x0000ddc4
    da24:	0000de38 	.word	0x0000de38
    da28:	0000ddbc 	.word	0x0000ddbc
    da2c:	0000de38 	.word	0x0000de38
    da30:	0000de38 	.word	0x0000de38
    da34:	0000ddb4 	.word	0x0000ddb4
    da38:	e3a08008 	mov	r8, #8
    da3c:	e59d3000 	ldr	r3, [sp]
    da40:	e2833004 	add	r3, r3, #4
    da44:	e5136004 	ldr	r6, [r3, #-4]
    da48:	e58d3000 	str	r3, [sp]
    da4c:	e1560008 	cmp	r6, r8
    da50:	23a0a001 	movcs	sl, #1
    da54:	3a000198 	bcc	e0bc <CString::FormatV(char const*, std::__va_list)+0x814>
    da58:	e00a0a98 	mul	sl, r8, sl
    da5c:	e1a00006 	mov	r0, r6
    da60:	e1a0100a 	mov	r1, sl
    da64:	eb000953 	bl	ffb8 <__aeabi_uidiv>
    da68:	e1580000 	cmp	r8, r0
    da6c:	9afffff9 	bls	da58 <CString::FormatV(char const*, std::__va_list)+0x1b0>
    da70:	e1a09000 	mov	r9, r0
    da74:	e28d3018 	add	r3, sp, #24
    da78:	e3570058 	cmp	r7, #88	; 0x58
    da7c:	e58d3008 	str	r3, [sp, #8]
    da80:	13a02057 	movne	r2, #87	; 0x57
    da84:	03a02037 	moveq	r2, #55	; 0x37
    da88:	e1a07003 	mov	r7, r3
    da8c:	e1a03005 	mov	r3, r5
    da90:	e58d4010 	str	r4, [sp, #16]
    da94:	e1a0500a 	mov	r5, sl
    da98:	e1a04002 	mov	r4, r2
    da9c:	e1a0a003 	mov	sl, r3
    daa0:	ea000001 	b	daac <CString::FormatV(char const*, std::__va_list)+0x204>
    daa4:	eb000943 	bl	ffb8 <__aeabi_uidiv>
    daa8:	e1a09000 	mov	r9, r0
    daac:	e1a00006 	mov	r0, r6
    dab0:	e1a01005 	mov	r1, r5
    dab4:	eb000943 	bl	ffc8 <__aeabi_uidivmod>
    dab8:	e2877001 	add	r7, r7, #1
    dabc:	e3590009 	cmp	r9, #9
    dac0:	e0842009 	add	r2, r4, r9
    dac4:	e2899030 	add	r9, r9, #48	; 0x30
    dac8:	e1a00005 	mov	r0, r5
    dacc:	e6af2072 	sxtb	r2, r2
    dad0:	96af2079 	sxtbls	r2, r9
    dad4:	e5472001 	strb	r2, [r7, #-1]
    dad8:	e1a06001 	mov	r6, r1
    dadc:	e1a01008 	mov	r1, r8
    dae0:	eb000934 	bl	ffb8 <__aeabi_uidiv>
    dae4:	e2505000 	subs	r5, r0, #0
    dae8:	e1a00006 	mov	r0, r6
    daec:	e1a01005 	mov	r1, r5
    daf0:	1affffeb 	bne	daa4 <CString::FormatV(char const*, std::__va_list)+0x1fc>
    daf4:	e1a0300a 	mov	r3, sl
    daf8:	e59d0008 	ldr	r0, [sp, #8]
    dafc:	e5c71000 	strb	r1, [r7]
    db00:	e1a0a005 	mov	sl, r5
    db04:	e59d4010 	ldr	r4, [sp, #16]
    db08:	e1a05003 	mov	r5, r3
    db0c:	eb000955 	bl	10068 <strlen>
    db10:	e59d3004 	ldr	r3, [sp, #4]
    db14:	e3530000 	cmp	r3, #0
    db18:	e1a06000 	mov	r6, r0
    db1c:	1a0000ef 	bne	dee0 <CString::FormatV(char const*, std::__va_list)+0x638>
    db20:	e1500004 	cmp	r0, r4
    db24:	2a00000f 	bcs	db68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    db28:	e59d300c 	ldr	r3, [sp, #12]
    db2c:	e0444000 	sub	r4, r4, r0
    db30:	e1a0000b 	mov	r0, fp
    db34:	e3530000 	cmp	r3, #0
    db38:	e1a01004 	mov	r1, r4
    db3c:	03a06020 	moveq	r6, #32
    db40:	13a06030 	movne	r6, #48	; 0x30
    db44:	ebfffde6 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    db48:	e2443001 	sub	r3, r4, #1
    db4c:	e59b200c 	ldr	r2, [fp, #12]
    db50:	e2433001 	sub	r3, r3, #1
    db54:	e3730001 	cmn	r3, #1
    db58:	e2821001 	add	r1, r2, #1
    db5c:	e58b100c 	str	r1, [fp, #12]
    db60:	e5c26000 	strb	r6, [r2]
    db64:	1afffff8 	bne	db4c <CString::FormatV(char const*, std::__va_list)+0x2a4>
    db68:	e59d1008 	ldr	r1, [sp, #8]
    db6c:	e1a0000b 	mov	r0, fp
    db70:	ebfffe6b 	bl	d524 <CString::PutString(char const*)>
    db74:	e2855001 	add	r5, r5, #1
    db78:	e1d540d0 	ldrsb	r4, [r5]
    db7c:	e3540000 	cmp	r4, #0
    db80:	1affff5c 	bne	d8f8 <CString::FormatV(char const*, std::__va_list)+0x50>
    db84:	e59b300c 	ldr	r3, [fp, #12]
    db88:	e5c34000 	strb	r4, [r3]
    db8c:	e28dd034 	add	sp, sp, #52	; 0x34
    db90:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db94:	e59d3000 	ldr	r3, [sp]
    db98:	e28d6018 	add	r6, sp, #24
    db9c:	e58d6008 	str	r6, [sp, #8]
    dba0:	e2833007 	add	r3, r3, #7
    dba4:	e1a00006 	mov	r0, r6
    dba8:	e3c33007 	bic	r3, r3, #7
    dbac:	e2832008 	add	r2, r3, #8
    dbb0:	e58d2000 	str	r2, [sp]
    dbb4:	ed930b00 	vldr	d0, [r3]
    dbb8:	ebfffe9b 	bl	d62c <CString::ftoa(char*, double, unsigned int)>
    dbbc:	e1a00006 	mov	r0, r6
    dbc0:	eb000928 	bl	10068 <strlen>
    dbc4:	e59d3004 	ldr	r3, [sp, #4]
    dbc8:	e3530000 	cmp	r3, #0
    dbcc:	e1a06000 	mov	r6, r0
    dbd0:	1a000107 	bne	dff4 <CString::FormatV(char const*, std::__va_list)+0x74c>
    dbd4:	e1500004 	cmp	r0, r4
    dbd8:	2affffe2 	bcs	db68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    dbdc:	e0444000 	sub	r4, r4, r0
    dbe0:	e1a0000b 	mov	r0, fp
    dbe4:	e1a01004 	mov	r1, r4
    dbe8:	ebfffdbd 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dbec:	e2443001 	sub	r3, r4, #1
    dbf0:	e3a00020 	mov	r0, #32
    dbf4:	e59b200c 	ldr	r2, [fp, #12]
    dbf8:	e2433001 	sub	r3, r3, #1
    dbfc:	e3730001 	cmn	r3, #1
    dc00:	e2821001 	add	r1, r2, #1
    dc04:	e58b100c 	str	r1, [fp, #12]
    dc08:	e5c20000 	strb	r0, [r2]
    dc0c:	1afffff8 	bne	dbf4 <CString::FormatV(char const*, std::__va_list)+0x34c>
    dc10:	eaffffd4 	b	db68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    dc14:	e59d3000 	ldr	r3, [sp]
    dc18:	e2833004 	add	r3, r3, #4
    dc1c:	e5137004 	ldr	r7, [r3, #-4]
    dc20:	e58d3000 	str	r3, [sp]
    dc24:	e3570000 	cmp	r7, #0
    dc28:	b2677000 	rsblt	r7, r7, #0
    dc2c:	b3a03001 	movlt	r3, #1
    dc30:	a3a03000 	movge	r3, #0
    dc34:	b58d300c 	strlt	r3, [sp, #12]
    dc38:	e1a06007 	mov	r6, r7
    dc3c:	a58d300c 	strge	r3, [sp, #12]
    dc40:	e3570009 	cmp	r7, #9
    dc44:	e58d3010 	str	r3, [sp, #16]
    dc48:	c3a0a001 	movgt	sl, #1
    dc4c:	c3a0900a 	movgt	r9, #10
    dc50:	da000116 	ble	e0b0 <CString::FormatV(char const*, std::__va_list)+0x808>
    dc54:	e00a0a99 	mul	sl, r9, sl
    dc58:	e1a00007 	mov	r0, r7
    dc5c:	e1a0100a 	mov	r1, sl
    dc60:	eb0008d4 	bl	ffb8 <__aeabi_uidiv>
    dc64:	e3500009 	cmp	r0, #9
    dc68:	8afffff9 	bhi	dc54 <CString::FormatV(char const*, std::__va_list)+0x3ac>
    dc6c:	e1a08000 	mov	r8, r0
    dc70:	e28d7018 	add	r7, sp, #24
    dc74:	e59d9014 	ldr	r9, [sp, #20]
    dc78:	e58d7008 	str	r7, [sp, #8]
    dc7c:	ea000001 	b	dc88 <CString::FormatV(char const*, std::__va_list)+0x3e0>
    dc80:	eb0008cc 	bl	ffb8 <__aeabi_uidiv>
    dc84:	e1a08000 	mov	r8, r0
    dc88:	e1a00006 	mov	r0, r6
    dc8c:	e1a0100a 	mov	r1, sl
    dc90:	eb0008cc 	bl	ffc8 <__aeabi_uidivmod>
    dc94:	e083299a 	umull	r2, r3, sl, r9
    dc98:	e3580009 	cmp	r8, #9
    dc9c:	e2877001 	add	r7, r7, #1
    dca0:	e1a06001 	mov	r6, r1
    dca4:	e2881057 	add	r1, r8, #87	; 0x57
    dca8:	e2888030 	add	r8, r8, #48	; 0x30
    dcac:	e1a00006 	mov	r0, r6
    dcb0:	e6af1071 	sxtb	r1, r1
    dcb4:	96af1078 	sxtbls	r1, r8
    dcb8:	e1b0a1a3 	lsrs	sl, r3, #3
    dcbc:	e5471001 	strb	r1, [r7, #-1]
    dcc0:	e1a0100a 	mov	r1, sl
    dcc4:	1affffed 	bne	dc80 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    dcc8:	e59d0008 	ldr	r0, [sp, #8]
    dccc:	e5c7a000 	strb	sl, [r7]
    dcd0:	eb0008e4 	bl	10068 <strlen>
    dcd4:	e59d3004 	ldr	r3, [sp, #4]
    dcd8:	e3530000 	cmp	r3, #0
    dcdc:	e59d300c 	ldr	r3, [sp, #12]
    dce0:	e0808003 	add	r8, r0, r3
    dce4:	0a000090 	beq	df2c <CString::FormatV(char const*, std::__va_list)+0x684>
    dce8:	e59d3010 	ldr	r3, [sp, #16]
    dcec:	e3530000 	cmp	r3, #0
    dcf0:	1a0000e5 	bne	e08c <CString::FormatV(char const*, std::__va_list)+0x7e4>
    dcf4:	e59d1008 	ldr	r1, [sp, #8]
    dcf8:	e1a0000b 	mov	r0, fp
    dcfc:	ebfffe08 	bl	d524 <CString::PutString(char const*)>
    dd00:	e1580004 	cmp	r8, r4
    dd04:	2affff9a 	bcs	db74 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    dd08:	e0448008 	sub	r8, r4, r8
    dd0c:	e1a0000b 	mov	r0, fp
    dd10:	e1a01008 	mov	r1, r8
    dd14:	ebfffd72 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd18:	e2483001 	sub	r3, r8, #1
    dd1c:	e3a00020 	mov	r0, #32
    dd20:	e59b200c 	ldr	r2, [fp, #12]
    dd24:	e2433001 	sub	r3, r3, #1
    dd28:	e3730001 	cmn	r3, #1
    dd2c:	e2821001 	add	r1, r2, #1
    dd30:	e58b100c 	str	r1, [fp, #12]
    dd34:	e5c20000 	strb	r0, [r2]
    dd38:	1afffff8 	bne	dd20 <CString::FormatV(char const*, std::__va_list)+0x478>
    dd3c:	eaffff8c 	b	db74 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    dd40:	e59d3004 	ldr	r3, [sp, #4]
    dd44:	e3530000 	cmp	r3, #0
    dd48:	e59d3000 	ldr	r3, [sp]
    dd4c:	e2836004 	add	r6, r3, #4
    dd50:	e1d370d0 	ldrsb	r7, [r3]
    dd54:	1a00008f 	bne	df98 <CString::FormatV(char const*, std::__va_list)+0x6f0>
    dd58:	e3540001 	cmp	r4, #1
    dd5c:	9a00000b 	bls	dd90 <CString::FormatV(char const*, std::__va_list)+0x4e8>
    dd60:	e2441001 	sub	r1, r4, #1
    dd64:	e1a0000b 	mov	r0, fp
    dd68:	e2444002 	sub	r4, r4, #2
    dd6c:	ebfffd5c 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd70:	e3a01020 	mov	r1, #32
    dd74:	e59b300c 	ldr	r3, [fp, #12]
    dd78:	e2444001 	sub	r4, r4, #1
    dd7c:	e3740001 	cmn	r4, #1
    dd80:	e2832001 	add	r2, r3, #1
    dd84:	e58b200c 	str	r2, [fp, #12]
    dd88:	e5c31000 	strb	r1, [r3]
    dd8c:	1afffff8 	bne	dd74 <CString::FormatV(char const*, std::__va_list)+0x4cc>
    dd90:	e3a01001 	mov	r1, #1
    dd94:	e1a0000b 	mov	r0, fp
    dd98:	ebfffd51 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd9c:	e59b300c 	ldr	r3, [fp, #12]
    dda0:	e58d6000 	str	r6, [sp]
    dda4:	e2832001 	add	r2, r3, #1
    dda8:	e58b200c 	str	r2, [fp, #12]
    ddac:	e5c37000 	strb	r7, [r3]
    ddb0:	eaffff6f 	b	db74 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    ddb4:	e3a08010 	mov	r8, #16
    ddb8:	eaffff1f 	b	da3c <CString::FormatV(char const*, std::__va_list)+0x194>
    ddbc:	e3a0800a 	mov	r8, #10
    ddc0:	eaffff1d 	b	da3c <CString::FormatV(char const*, std::__va_list)+0x194>
    ddc4:	e59d3000 	ldr	r3, [sp]
    ddc8:	e2836004 	add	r6, r3, #4
    ddcc:	e5938000 	ldr	r8, [r3]
    ddd0:	e1a00008 	mov	r0, r8
    ddd4:	eb0008a3 	bl	10068 <strlen>
    ddd8:	e59d3004 	ldr	r3, [sp, #4]
    dddc:	e3530000 	cmp	r3, #0
    dde0:	e1a07000 	mov	r7, r0
    dde4:	1a000095 	bne	e040 <CString::FormatV(char const*, std::__va_list)+0x798>
    dde8:	e1500004 	cmp	r0, r4
    ddec:	2a00000c 	bcs	de24 <CString::FormatV(char const*, std::__va_list)+0x57c>
    ddf0:	e0444000 	sub	r4, r4, r0
    ddf4:	e1a0000b 	mov	r0, fp
    ddf8:	e1a01004 	mov	r1, r4
    ddfc:	ebfffd38 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    de00:	e2443001 	sub	r3, r4, #1
    de04:	e3a00020 	mov	r0, #32
    de08:	e59b200c 	ldr	r2, [fp, #12]
    de0c:	e2433001 	sub	r3, r3, #1
    de10:	e3730001 	cmn	r3, #1
    de14:	e2821001 	add	r1, r2, #1
    de18:	e58b100c 	str	r1, [fp, #12]
    de1c:	e5c20000 	strb	r0, [r2]
    de20:	1afffff8 	bne	de08 <CString::FormatV(char const*, std::__va_list)+0x560>
    de24:	e1a01008 	mov	r1, r8
    de28:	e1a0000b 	mov	r0, fp
    de2c:	e58d6000 	str	r6, [sp]
    de30:	ebfffdbb 	bl	d524 <CString::PutString(char const*)>
    de34:	eaffff4e 	b	db74 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    de38:	e3a01001 	mov	r1, #1
    de3c:	e1a0000b 	mov	r0, fp
    de40:	ebfffd27 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    de44:	e59b300c 	ldr	r3, [fp, #12]
    de48:	e3a02025 	mov	r2, #37	; 0x25
    de4c:	e3a01001 	mov	r1, #1
    de50:	e0830001 	add	r0, r3, r1
    de54:	e58b000c 	str	r0, [fp, #12]
    de58:	e5c32000 	strb	r2, [r3]
    de5c:	e1a0000b 	mov	r0, fp
    de60:	e1d540d0 	ldrsb	r4, [r5]
    de64:	ebfffd1e 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    de68:	e59b300c 	ldr	r3, [fp, #12]
    de6c:	e2832001 	add	r2, r3, #1
    de70:	e58b200c 	str	r2, [fp, #12]
    de74:	e5c34000 	strb	r4, [r3]
    de78:	eaffff3d 	b	db74 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    de7c:	e1d570d1 	ldrsb	r7, [r5, #1]
    de80:	e3a01000 	mov	r1, #0
    de84:	e2855001 	add	r5, r5, #1
    de88:	e2473030 	sub	r3, r7, #48	; 0x30
    de8c:	e6ef3073 	uxtb	r3, r3
    de90:	e3530009 	cmp	r3, #9
    de94:	8afffebd 	bhi	d990 <CString::FormatV(char const*, std::__va_list)+0xe8>
    de98:	e3a0200a 	mov	r2, #10
    de9c:	e0217192 	mla	r1, r2, r1, r7
    dea0:	e1f570d1 	ldrsb	r7, [r5, #1]!
    dea4:	e2473030 	sub	r3, r7, #48	; 0x30
    dea8:	e2411030 	sub	r1, r1, #48	; 0x30
    deac:	e6ef3073 	uxtb	r3, r3
    deb0:	e3530009 	cmp	r3, #9
    deb4:	9afffff8 	bls	de9c <CString::FormatV(char const*, std::__va_list)+0x5f4>
    deb8:	eafffeb4 	b	d990 <CString::FormatV(char const*, std::__va_list)+0xe8>
    debc:	e3a01001 	mov	r1, #1
    dec0:	e1a0000b 	mov	r0, fp
    dec4:	ebfffd06 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dec8:	e59b300c 	ldr	r3, [fp, #12]
    decc:	e2855002 	add	r5, r5, #2
    ded0:	e2832001 	add	r2, r3, #1
    ded4:	e58b200c 	str	r2, [fp, #12]
    ded8:	e5c36000 	strb	r6, [r3]
    dedc:	eafffe82 	b	d8ec <CString::FormatV(char const*, std::__va_list)+0x44>
    dee0:	e59d1008 	ldr	r1, [sp, #8]
    dee4:	e1a0000b 	mov	r0, fp
    dee8:	ebfffd8d 	bl	d524 <CString::PutString(char const*)>
    deec:	e1560004 	cmp	r6, r4
    def0:	2affff1f 	bcs	db74 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    def4:	e0444006 	sub	r4, r4, r6
    def8:	e1a0000b 	mov	r0, fp
    defc:	e1a01004 	mov	r1, r4
    df00:	ebfffcf7 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    df04:	e2443001 	sub	r3, r4, #1
    df08:	e3a00020 	mov	r0, #32
    df0c:	e59b200c 	ldr	r2, [fp, #12]
    df10:	e2433001 	sub	r3, r3, #1
    df14:	e3730001 	cmn	r3, #1
    df18:	e2821001 	add	r1, r2, #1
    df1c:	e58b100c 	str	r1, [fp, #12]
    df20:	e5c20000 	strb	r0, [r2]
    df24:	1afffff8 	bne	df0c <CString::FormatV(char const*, std::__va_list)+0x664>
    df28:	eaffff11 	b	db74 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    df2c:	e1580004 	cmp	r8, r4
    df30:	2a00000c 	bcs	df68 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    df34:	e0448008 	sub	r8, r4, r8
    df38:	e1a0000b 	mov	r0, fp
    df3c:	e1a01008 	mov	r1, r8
    df40:	ebfffce7 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    df44:	e2483001 	sub	r3, r8, #1
    df48:	e3a00020 	mov	r0, #32
    df4c:	e59b200c 	ldr	r2, [fp, #12]
    df50:	e2433001 	sub	r3, r3, #1
    df54:	e3730001 	cmn	r3, #1
    df58:	e2821001 	add	r1, r2, #1
    df5c:	e58b100c 	str	r1, [fp, #12]
    df60:	e5c20000 	strb	r0, [r2]
    df64:	1afffff8 	bne	df4c <CString::FormatV(char const*, std::__va_list)+0x6a4>
    df68:	e59d3010 	ldr	r3, [sp, #16]
    df6c:	e3530000 	cmp	r3, #0
    df70:	0afffefc 	beq	db68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    df74:	e3a01001 	mov	r1, #1
    df78:	e1a0000b 	mov	r0, fp
    df7c:	ebfffcd8 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    df80:	e59b300c 	ldr	r3, [fp, #12]
    df84:	e3a0202d 	mov	r2, #45	; 0x2d
    df88:	e2831001 	add	r1, r3, #1
    df8c:	e58b100c 	str	r1, [fp, #12]
    df90:	e5c32000 	strb	r2, [r3]
    df94:	eafffef3 	b	db68 <CString::FormatV(char const*, std::__va_list)+0x2c0>
    df98:	e3a01001 	mov	r1, #1
    df9c:	e1a0000b 	mov	r0, fp
    dfa0:	ebfffccf 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dfa4:	e59b300c 	ldr	r3, [fp, #12]
    dfa8:	e3540001 	cmp	r4, #1
    dfac:	e2832001 	add	r2, r3, #1
    dfb0:	e58b200c 	str	r2, [fp, #12]
    dfb4:	e5c37000 	strb	r7, [r3]
    dfb8:	9a00000b 	bls	dfec <CString::FormatV(char const*, std::__va_list)+0x744>
    dfbc:	e2441001 	sub	r1, r4, #1
    dfc0:	e1a0000b 	mov	r0, fp
    dfc4:	e2444002 	sub	r4, r4, #2
    dfc8:	ebfffcc5 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dfcc:	e3a01020 	mov	r1, #32
    dfd0:	e59b300c 	ldr	r3, [fp, #12]
    dfd4:	e2444001 	sub	r4, r4, #1
    dfd8:	e3740001 	cmn	r4, #1
    dfdc:	e2832001 	add	r2, r3, #1
    dfe0:	e58b200c 	str	r2, [fp, #12]
    dfe4:	e5c31000 	strb	r1, [r3]
    dfe8:	1afffff8 	bne	dfd0 <CString::FormatV(char const*, std::__va_list)+0x728>
    dfec:	e58d6000 	str	r6, [sp]
    dff0:	eafffedf 	b	db74 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    dff4:	e59d1008 	ldr	r1, [sp, #8]
    dff8:	e1a0000b 	mov	r0, fp
    dffc:	ebfffd48 	bl	d524 <CString::PutString(char const*)>
    e000:	e1560004 	cmp	r6, r4
    e004:	2afffeda 	bcs	db74 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    e008:	e0444006 	sub	r4, r4, r6
    e00c:	e1a0000b 	mov	r0, fp
    e010:	e1a01004 	mov	r1, r4
    e014:	ebfffcb2 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e018:	e2443001 	sub	r3, r4, #1
    e01c:	e3a00020 	mov	r0, #32
    e020:	e59b200c 	ldr	r2, [fp, #12]
    e024:	e2433001 	sub	r3, r3, #1
    e028:	e3730001 	cmn	r3, #1
    e02c:	e2821001 	add	r1, r2, #1
    e030:	e58b100c 	str	r1, [fp, #12]
    e034:	e5c20000 	strb	r0, [r2]
    e038:	1afffff8 	bne	e020 <CString::FormatV(char const*, std::__va_list)+0x778>
    e03c:	eafffecc 	b	db74 <CString::FormatV(char const*, std::__va_list)+0x2cc>
    e040:	e1a01008 	mov	r1, r8
    e044:	e1a0000b 	mov	r0, fp
    e048:	ebfffd35 	bl	d524 <CString::PutString(char const*)>
    e04c:	e1570004 	cmp	r7, r4
    e050:	2affffe5 	bcs	dfec <CString::FormatV(char const*, std::__va_list)+0x744>
    e054:	e0444007 	sub	r4, r4, r7
    e058:	e1a0000b 	mov	r0, fp
    e05c:	e1a01004 	mov	r1, r4
    e060:	ebfffc9f 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e064:	e2443001 	sub	r3, r4, #1
    e068:	e3a00020 	mov	r0, #32
    e06c:	e59b200c 	ldr	r2, [fp, #12]
    e070:	e2433001 	sub	r3, r3, #1
    e074:	e3730001 	cmn	r3, #1
    e078:	e2821001 	add	r1, r2, #1
    e07c:	e58b100c 	str	r1, [fp, #12]
    e080:	e5c20000 	strb	r0, [r2]
    e084:	1afffff8 	bne	e06c <CString::FormatV(char const*, std::__va_list)+0x7c4>
    e088:	eaffffd7 	b	dfec <CString::FormatV(char const*, std::__va_list)+0x744>
    e08c:	e3a01001 	mov	r1, #1
    e090:	e1a0000b 	mov	r0, fp
    e094:	ebfffc92 	bl	d2e4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e098:	e59b300c 	ldr	r3, [fp, #12]
    e09c:	e3a0202d 	mov	r2, #45	; 0x2d
    e0a0:	e2831001 	add	r1, r3, #1
    e0a4:	e58b100c 	str	r1, [fp, #12]
    e0a8:	e5c32000 	strb	r2, [r3]
    e0ac:	eaffff10 	b	dcf4 <CString::FormatV(char const*, std::__va_list)+0x44c>
    e0b0:	e1a08007 	mov	r8, r7
    e0b4:	e3a0a001 	mov	sl, #1
    e0b8:	eafffeec 	b	dc70 <CString::FormatV(char const*, std::__va_list)+0x3c8>
    e0bc:	e1a09006 	mov	r9, r6
    e0c0:	e3a0a001 	mov	sl, #1
    e0c4:	eafffe6a 	b	da74 <CString::FormatV(char const*, std::__va_list)+0x1cc>

0000e0c8 <CString::Format(char const*, ...)>:
    e0c8:	e92d000e 	push	{r1, r2, r3}
    e0cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e0d0:	e24dd008 	sub	sp, sp, #8
    e0d4:	e28d2010 	add	r2, sp, #16
    e0d8:	e59d100c 	ldr	r1, [sp, #12]
    e0dc:	e58d2004 	str	r2, [sp, #4]
    e0e0:	ebfffdf0 	bl	d8a8 <CString::FormatV(char const*, std::__va_list)>
    e0e4:	e28dd008 	add	sp, sp, #8
    e0e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    e0ec:	e28dd00c 	add	sp, sp, #12
    e0f0:	e12fff1e 	bx	lr
    e0f4:	00000000 	andeq	r0, r0, r0

0000e0f8 <DelayLoop>:
    e0f8:	e2500001 	subs	r0, r0, #1
    e0fc:	8afffffd 	bhi	e0f8 <DelayLoop>
    e100:	e1a0f00e 	mov	pc, lr

0000e104 <CExceptionHandler::CExceptionHandler()>:
    e104:	e92d4070 	push	{r4, r5, r6, lr}
    e108:	e30259a4 	movw	r5, #10660	; 0x29a4
    e10c:	e3405001 	movt	r5, #1
    e110:	e1a04000 	mov	r4, r0
    e114:	e5953000 	ldr	r3, [r5]
    e118:	e3530000 	cmp	r3, #0
    e11c:	0a000005 	beq	e138 <CExceptionHandler::CExceptionHandler()+0x34>
    e120:	e30210ec 	movw	r1, #8428	; 0x20ec
    e124:	e3000e84 	movw	r0, #3716	; 0xe84
    e128:	e3401001 	movt	r1, #1
    e12c:	e3400001 	movt	r0, #1
    e130:	e3a0202e 	mov	r2, #46	; 0x2e
    e134:	ebfff777 	bl	bf18 <assertion_failed>
    e138:	e59f1048 	ldr	r1, [pc, #72]	; e188 <CExceptionHandler::CExceptionHandler()+0x84>
    e13c:	e3a00000 	mov	r0, #0
    e140:	e59f2044 	ldr	r2, [pc, #68]	; e18c <CExceptionHandler::CExceptionHandler()+0x88>
    e144:	e59f3044 	ldr	r3, [pc, #68]	; e190 <CExceptionHandler::CExceptionHandler()+0x8c>
    e148:	e1a01141 	asr	r1, r1, #2
    e14c:	e5854000 	str	r4, [r5]
    e150:	e1a02142 	asr	r2, r2, #2
    e154:	e2411002 	sub	r1, r1, #2
    e158:	e1a03143 	asr	r3, r3, #2
    e15c:	e2422002 	sub	r2, r2, #2
    e160:	e2433002 	sub	r3, r3, #2
    e164:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    e168:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    e16c:	e5801004 	str	r1, [r0, #4]
    e170:	e580200c 	str	r2, [r0, #12]
    e174:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e178:	e5803010 	str	r3, [r0, #16]
    e17c:	ebffedd1 	bl	98c8 <SyncDataAndInstructionCache>
    e180:	e1a00004 	mov	r0, r4
    e184:	e8bd8070 	pop	{r4, r5, r6, pc}
    e188:	0000e358 	.word	0x0000e358
    e18c:	0000e390 	.word	0x0000e390
    e190:	0000e3cc 	.word	0x0000e3cc

0000e194 <CExceptionHandler::~CExceptionHandler()>:
    e194:	e30239a4 	movw	r3, #10660	; 0x29a4
    e198:	e3403001 	movt	r3, #1
    e19c:	e3a02000 	mov	r2, #0
    e1a0:	e5832000 	str	r2, [r3]
    e1a4:	e12fff1e 	bx	lr

0000e1a8 <CExceptionHandler::Throw(unsigned int)>:
    e1a8:	e92d4010 	push	{r4, lr}
    e1ac:	e24dd008 	sub	sp, sp, #8
    e1b0:	e1a04001 	mov	r4, r1
    e1b4:	ebfff8dc 	bl	c52c <CLogger::Get()>
    e1b8:	e3022874 	movw	r2, #10356	; 0x2874
    e1bc:	e3402001 	movt	r2, #1
    e1c0:	e3023104 	movw	r3, #8452	; 0x2104
    e1c4:	e30210e4 	movw	r1, #8420	; 0x20e4
    e1c8:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    e1cc:	e3403001 	movt	r3, #1
    e1d0:	e3401001 	movt	r1, #1
    e1d4:	e3a02000 	mov	r2, #0
    e1d8:	e58dc000 	str	ip, [sp]
    e1dc:	ebfff9ae 	bl	c89c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e1e0:	e28dd008 	add	sp, sp, #8
    e1e4:	e8bd8010 	pop	{r4, pc}

0000e1e8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    e1e8:	e3510002 	cmp	r1, #2
    e1ec:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    e1f0:	e1a05001 	mov	r5, r1
    e1f4:	e24dd024 	sub	sp, sp, #36	; 0x24
    e1f8:	e1a04002 	mov	r4, r2
    e1fc:	0a000027 	beq	e2a0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb8>
    e200:	e3510003 	cmp	r1, #3
    e204:	0a000022 	beq	e294 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
    e208:	e3a07000 	mov	r7, #0
    e20c:	e1a08007 	mov	r8, r7
    e210:	e3540000 	cmp	r4, #0
    e214:	0a000024 	beq	e2ac <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    e218:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    e21c:	e30210e4 	movw	r1, #8420	; 0x20e4
    e220:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    e224:	e3401001 	movt	r1, #1
    e228:	e203301f 	and	r3, r3, #31
    e22c:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    e230:	e3530012 	cmp	r3, #18
    e234:	08940240 	ldmeq	r4, {r6, r9}
    e238:	e1a00006 	mov	r0, r6
    e23c:	ebfff7c8 	bl	c164 <debug_stacktrace(unsigned int const*, char const*)>
    e240:	ebfff8b9 	bl	c52c <CLogger::Get()>
    e244:	e3023874 	movw	r3, #10356	; 0x2874
    e248:	e3403001 	movt	r3, #1
    e24c:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    e250:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    e254:	e3a02000 	mov	r2, #0
    e258:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    e25c:	e30210e4 	movw	r1, #8420	; 0x20e4
    e260:	e58d9014 	str	r9, [sp, #20]
    e264:	e3401001 	movt	r1, #1
    e268:	e58d6010 	str	r6, [sp, #16]
    e26c:	e3023120 	movw	r3, #8480	; 0x2120
    e270:	e58d700c 	str	r7, [sp, #12]
    e274:	e3403001 	movt	r3, #1
    e278:	e58d8008 	str	r8, [sp, #8]
    e27c:	e58d4000 	str	r4, [sp]
    e280:	e58de018 	str	lr, [sp, #24]
    e284:	e58dc004 	str	ip, [sp, #4]
    e288:	ebfff983 	bl	c89c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e28c:	e28dd024 	add	sp, sp, #36	; 0x24
    e290:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    e294:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
    e298:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
    e29c:	eaffffdb 	b	e210 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    e2a0:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
    e2a4:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
    e2a8:	eaffffd8 	b	e210 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    e2ac:	e30210ec 	movw	r1, #8428	; 0x20ec
    e2b0:	e3020114 	movw	r0, #8468	; 0x2114
    e2b4:	e3401001 	movt	r1, #1
    e2b8:	e3400001 	movt	r0, #1
    e2bc:	e3a02067 	mov	r2, #103	; 0x67
    e2c0:	ebfff714 	bl	bf18 <assertion_failed>
    e2c4:	eaffffd3 	b	e218 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>

0000e2c8 <CExceptionHandler::Get()>:
    e2c8:	e92d4010 	push	{r4, lr}
    e2cc:	e30249a4 	movw	r4, #10660	; 0x29a4
    e2d0:	e3404001 	movt	r4, #1
    e2d4:	e5940000 	ldr	r0, [r4]
    e2d8:	e3500000 	cmp	r0, #0
    e2dc:	18bd8010 	popne	{r4, pc}
    e2e0:	e3a0207e 	mov	r2, #126	; 0x7e
    e2e4:	e30210ec 	movw	r1, #8428	; 0x20ec
    e2e8:	e3000f90 	movw	r0, #3984	; 0xf90
    e2ec:	e3401001 	movt	r1, #1
    e2f0:	e3400001 	movt	r0, #1
    e2f4:	ebfff707 	bl	bf18 <assertion_failed>
    e2f8:	e5940000 	ldr	r0, [r4]
    e2fc:	e8bd8010 	pop	{r4, pc}

0000e300 <ExceptionHandler>:
    e300:	e92d4070 	push	{r4, r5, r6, lr}
    e304:	e30249a4 	movw	r4, #10660	; 0x29a4
    e308:	e3404001 	movt	r4, #1
    e30c:	e1a05000 	mov	r5, r0
    e310:	e1a06001 	mov	r6, r1
    e314:	e5940000 	ldr	r0, [r4]
    e318:	e3500000 	cmp	r0, #0
    e31c:	0a000003 	beq	e330 <ExceptionHandler+0x30>
    e320:	e1a02006 	mov	r2, r6
    e324:	e1a01005 	mov	r1, r5
    e328:	e8bd4070 	pop	{r4, r5, r6, lr}
    e32c:	eaffffad 	b	e1e8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
    e330:	e3a0207e 	mov	r2, #126	; 0x7e
    e334:	e30210ec 	movw	r1, #8428	; 0x20ec
    e338:	e3000f90 	movw	r0, #3984	; 0xf90
    e33c:	e3401001 	movt	r1, #1
    e340:	e3400001 	movt	r0, #1
    e344:	ebfff6f3 	bl	bf18 <assertion_failed>
    e348:	e5940000 	ldr	r0, [r4]
    e34c:	e1a02006 	mov	r2, r6
    e350:	e1a01005 	mov	r1, r5
    e354:	e8bd4070 	pop	{r4, r5, r6, lr}
    e358:	eaffffa2 	b	e1e8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000e35c <UndefinedInstructionStub>:
    e35c:	e24ee004 	sub	lr, lr, #4
    e360:	e92d4000 	stmfd	sp!, {lr}
    e364:	e14fe000 	mrs	lr, SPSR
    e368:	e92d4000 	stmfd	sp!, {lr}
    e36c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e370:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e374:	e1a0100d 	mov	r1, sp
    e378:	f1020012 	cps	#18
    e37c:	e1a0200d 	mov	r2, sp
    e380:	e1a0300e 	mov	r3, lr
    e384:	f102001f 	cps	#31
    e388:	e1a0d001 	mov	sp, r1
    e38c:	e92d000c 	push	{r2, r3}
    e390:	e1a0100d 	mov	r1, sp
    e394:	e3a00001 	mov	r0, #1
    e398:	eaffffd8 	b	e300 <ExceptionHandler>

0000e39c <PrefetchAbortStub>:
    e39c:	e24ee004 	sub	lr, lr, #4
    e3a0:	e92d4000 	stmfd	sp!, {lr}
    e3a4:	e14fe000 	mrs	lr, SPSR
    e3a8:	e92d4000 	stmfd	sp!, {lr}
    e3ac:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e3b0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e3b4:	e1a0100d 	mov	r1, sp
    e3b8:	f1020012 	cps	#18
    e3bc:	e1a0200d 	mov	r2, sp
    e3c0:	e1a0300e 	mov	r3, lr
    e3c4:	f102001f 	cps	#31
    e3c8:	e1a0d001 	mov	sp, r1
    e3cc:	e92d000c 	push	{r2, r3}
    e3d0:	e1a0100d 	mov	r1, sp
    e3d4:	e3a00002 	mov	r0, #2
    e3d8:	eaffffc8 	b	e300 <ExceptionHandler>

0000e3dc <DataAbortStub>:
    e3dc:	e24ee008 	sub	lr, lr, #8
    e3e0:	e92d4000 	stmfd	sp!, {lr}
    e3e4:	e14fe000 	mrs	lr, SPSR
    e3e8:	e92d4000 	stmfd	sp!, {lr}
    e3ec:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e3f0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e3f4:	e1a0100d 	mov	r1, sp
    e3f8:	f1020012 	cps	#18
    e3fc:	e1a0200d 	mov	r2, sp
    e400:	e1a0300e 	mov	r3, lr
    e404:	f102001f 	cps	#31
    e408:	e1a0d001 	mov	sp, r1
    e40c:	e92d000c 	push	{r2, r3}
    e410:	e1a0100d 	mov	r1, sp
    e414:	e3a00003 	mov	r0, #3
    e418:	eaffffb8 	b	e300 <ExceptionHandler>

0000e41c <IRQStub>:
    e41c:	e24ee004 	sub	lr, lr, #4
    e420:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e424:	eb00015e 	bl	e9a4 <InterruptHandler>
    e428:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000e42c <FIQStub>:
    e42c:	e24ee004 	sub	lr, lr, #4
    e430:	e92d400f 	push	{r0, r1, r2, r3, lr}
    e434:	e59f2024 	ldr	r2, [pc, #36]	; e460 <FIQStub+0x34>
    e438:	e5921000 	ldr	r1, [r2]
    e43c:	e3510000 	cmp	r1, #0
    e440:	0a000002 	beq	e450 <FIQStub+0x24>
    e444:	e5920004 	ldr	r0, [r2, #4]
    e448:	e12fff31 	blx	r1
    e44c:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    e450:	e59f100c 	ldr	r1, [pc, #12]	; e464 <FIQStub+0x38>
    e454:	e3a00000 	mov	r0, #0
    e458:	e5810000 	str	r0, [r1]
    e45c:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    e460:	00012884 	.word	0x00012884
    e464:	3f00b20c 	.word	0x3f00b20c

0000e468 <CInterruptSystem::CInterruptSystem()>:
    e468:	e2802f47 	add	r2, r0, #284	; 0x11c
    e46c:	e1a0c000 	mov	ip, r0
    e470:	e2403004 	sub	r3, r0, #4
    e474:	e3a01000 	mov	r1, #0
    e478:	e1a00002 	mov	r0, r2
    e47c:	e5a31004 	str	r1, [r3, #4]!
    e480:	e1530000 	cmp	r3, r0
    e484:	e5a21004 	str	r1, [r2, #4]!
    e488:	1afffffb 	bne	e47c <CInterruptSystem::CInterruptSystem()+0x14>
    e48c:	e30239a8 	movw	r3, #10664	; 0x29a8
    e490:	e3403001 	movt	r3, #1
    e494:	e1a0000c 	mov	r0, ip
    e498:	e583c000 	str	ip, [r3]
    e49c:	e12fff1e 	bx	lr

0000e4a0 <CInterruptSystem::~CInterruptSystem()>:
    e4a0:	e30239a8 	movw	r3, #10664	; 0x29a8
    e4a4:	e3403001 	movt	r3, #1
    e4a8:	e3a02000 	mov	r2, #0
    e4ac:	e5832000 	str	r2, [r3]
    e4b0:	e12fff1e 	bx	lr

0000e4b4 <CInterruptSystem::Initialize()>:
    e4b4:	e59f2054 	ldr	r2, [pc, #84]	; e510 <CInterruptSystem::Initialize()+0x5c>
    e4b8:	e59f3054 	ldr	r3, [pc, #84]	; e514 <CInterruptSystem::Initialize()+0x60>
    e4bc:	e92d4010 	push	{r4, lr}
    e4c0:	e1a02142 	asr	r2, r2, #2
    e4c4:	e1a03143 	asr	r3, r3, #2
    e4c8:	e3a04000 	mov	r4, #0
    e4cc:	e2422002 	sub	r2, r2, #2
    e4d0:	e2433002 	sub	r3, r3, #2
    e4d4:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    e4d8:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e4dc:	e5842018 	str	r2, [r4, #24]
    e4e0:	e584301c 	str	r3, [r4, #28]
    e4e4:	ebffecf7 	bl	98c8 <SyncDataAndInstructionCache>
    e4e8:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e4ec:	e3433f00 	movt	r3, #16128	; 0x3f00
    e4f0:	e3e02000 	mvn	r2, #0
    e4f4:	e583420c 	str	r4, [r3, #524]	; 0x20c
    e4f8:	e583221c 	str	r2, [r3, #540]	; 0x21c
    e4fc:	e5832220 	str	r2, [r3, #544]	; 0x220
    e500:	e5832224 	str	r2, [r3, #548]	; 0x224
    e504:	f1080080 	cpsie	i
    e508:	e3a00001 	mov	r0, #1
    e50c:	e8bd8010 	pop	{r4, pc}
    e510:	0000e404 	.word	0x0000e404
    e514:	0000e410 	.word	0x0000e410

0000e518 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    e518:	e3510047 	cmp	r1, #71	; 0x47
    e51c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e520:	e1a04001 	mov	r4, r1
    e524:	e1a06002 	mov	r6, r2
    e528:	e1a07003 	mov	r7, r3
    e52c:	8a00001a 	bhi	e59c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x84>
    e530:	e3560000 	cmp	r6, #0
    e534:	0a00001f 	beq	e5b8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
    e538:	e3025884 	movw	r5, #10372	; 0x2884
    e53c:	e3405001 	movt	r5, #1
    e540:	e5953000 	ldr	r3, [r5]
    e544:	e3530000 	cmp	r3, #0
    e548:	0a000005 	beq	e564 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>
    e54c:	e30211a8 	movw	r1, #8616	; 0x21a8
    e550:	e30201cc 	movw	r0, #8652	; 0x21cc
    e554:	e3401001 	movt	r1, #1
    e558:	e3400001 	movt	r0, #1
    e55c:	e3a0207a 	mov	r2, #122	; 0x7a
    e560:	ebfff66c 	bl	bf18 <assertion_failed>
    e564:	e3540047 	cmp	r4, #71	; 0x47
    e568:	e88500c0 	stm	r5, {r6, r7}
    e56c:	9a000005 	bls	e588 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x70>
    e570:	e30211a8 	movw	r1, #8616	; 0x21a8
    e574:	e30201b8 	movw	r0, #8632	; 0x21b8
    e578:	e3401001 	movt	r1, #1
    e57c:	e3400001 	movt	r0, #1
    e580:	e3a020a6 	mov	r2, #166	; 0xa6
    e584:	ebfff663 	bl	bf18 <assertion_failed>
    e588:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e58c:	e3433f00 	movt	r3, #16128	; 0x3f00
    e590:	e3844080 	orr	r4, r4, #128	; 0x80
    e594:	e583420c 	str	r4, [r3, #524]	; 0x20c
    e598:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e59c:	e30211a8 	movw	r1, #8616	; 0x21a8
    e5a0:	e30201b8 	movw	r0, #8632	; 0x21b8
    e5a4:	e3401001 	movt	r1, #1
    e5a8:	e3400001 	movt	r0, #1
    e5ac:	e3a02078 	mov	r2, #120	; 0x78
    e5b0:	ebfff658 	bl	bf18 <assertion_failed>
    e5b4:	eaffffdd 	b	e530 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x18>
    e5b8:	e30211a8 	movw	r1, #8616	; 0x21a8
    e5bc:	e30201ec 	movw	r0, #8684	; 0x21ec
    e5c0:	e3401001 	movt	r1, #1
    e5c4:	e3400001 	movt	r0, #1
    e5c8:	e3a02079 	mov	r2, #121	; 0x79
    e5cc:	ebfff651 	bl	bf18 <assertion_failed>
    e5d0:	eaffffd8 	b	e538 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>

0000e5d4 <CInterruptSystem::DisconnectFIQ()>:
    e5d4:	e92d4010 	push	{r4, lr}
    e5d8:	e3024884 	movw	r4, #10372	; 0x2884
    e5dc:	e3404001 	movt	r4, #1
    e5e0:	e5943000 	ldr	r3, [r4]
    e5e4:	e3530000 	cmp	r3, #0
    e5e8:	0a000006 	beq	e608 <CInterruptSystem::DisconnectFIQ()+0x34>
    e5ec:	e3a02a0b 	mov	r2, #45056	; 0xb000
    e5f0:	e3432f00 	movt	r2, #16128	; 0x3f00
    e5f4:	e3a03000 	mov	r3, #0
    e5f8:	e582320c 	str	r3, [r2, #524]	; 0x20c
    e5fc:	e5843000 	str	r3, [r4]
    e600:	e5843004 	str	r3, [r4, #4]
    e604:	e8bd8010 	pop	{r4, pc}
    e608:	e30211a8 	movw	r1, #8616	; 0x21a8
    e60c:	e30201e4 	movw	r0, #8676	; 0x21e4
    e610:	e3401001 	movt	r1, #1
    e614:	e3400001 	movt	r0, #1
    e618:	e3a02084 	mov	r2, #132	; 0x84
    e61c:	ebfff63d 	bl	bf18 <assertion_failed>
    e620:	eafffff1 	b	e5ec <CInterruptSystem::DisconnectFIQ()+0x18>

0000e624 <CInterruptSystem::EnableIRQ(unsigned int)>:
    e624:	e3500047 	cmp	r0, #71	; 0x47
    e628:	e92d4010 	push	{r4, lr}
    e62c:	e1a04000 	mov	r4, r0
    e630:	8a00000e 	bhi	e670 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
    e634:	e350001f 	cmp	r0, #31
    e638:	930b2210 	movwls	r2, #45584	; 0xb210
    e63c:	93432f00 	movtls	r2, #16128	; 0x3f00
    e640:	8a000004 	bhi	e658 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
    e644:	e204401f 	and	r4, r4, #31
    e648:	e3a03001 	mov	r3, #1
    e64c:	e1a04413 	lsl	r4, r3, r4
    e650:	e5824000 	str	r4, [r2]
    e654:	e8bd8010 	pop	{r4, pc}
    e658:	e350003f 	cmp	r0, #63	; 0x3f
    e65c:	930b2214 	movwls	r2, #45588	; 0xb214
    e660:	93432f00 	movtls	r2, #16128	; 0x3f00
    e664:	830b2218 	movwhi	r2, #45592	; 0xb218
    e668:	83432f00 	movthi	r2, #16128	; 0x3f00
    e66c:	eafffff4 	b	e644 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
    e670:	e3a02090 	mov	r2, #144	; 0x90
    e674:	e30211a8 	movw	r1, #8616	; 0x21a8
    e678:	e30201fc 	movw	r0, #8700	; 0x21fc
    e67c:	e3401001 	movt	r1, #1
    e680:	e3400001 	movt	r0, #1
    e684:	ebfff623 	bl	bf18 <assertion_failed>
    e688:	e30b2218 	movw	r2, #45592	; 0xb218
    e68c:	e3432f00 	movt	r2, #16128	; 0x3f00
    e690:	eaffffeb 	b	e644 <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

0000e694 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    e694:	e3510047 	cmp	r1, #71	; 0x47
    e698:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e69c:	e1a04001 	mov	r4, r1
    e6a0:	e1a05000 	mov	r5, r0
    e6a4:	e1a08002 	mov	r8, r2
    e6a8:	e1a07003 	mov	r7, r3
    e6ac:	8a00000e 	bhi	e6ec <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
    e6b0:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e6b4:	e0856104 	add	r6, r5, r4, lsl #2
    e6b8:	e3530000 	cmp	r3, #0
    e6bc:	0a000005 	beq	e6d8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
    e6c0:	e30211a8 	movw	r1, #8616	; 0x21a8
    e6c4:	e3020210 	movw	r0, #8720	; 0x2210
    e6c8:	e3401001 	movt	r1, #1
    e6cc:	e3400001 	movt	r0, #1
    e6d0:	e3a02060 	mov	r2, #96	; 0x60
    e6d4:	ebfff60f 	bl	bf18 <assertion_failed>
    e6d8:	e7858104 	str	r8, [r5, r4, lsl #2]
    e6dc:	e1a00004 	mov	r0, r4
    e6e0:	e5867120 	str	r7, [r6, #288]	; 0x120
    e6e4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    e6e8:	eaffffcd 	b	e624 <CInterruptSystem::EnableIRQ(unsigned int)>
    e6ec:	e30211a8 	movw	r1, #8616	; 0x21a8
    e6f0:	e30201fc 	movw	r0, #8700	; 0x21fc
    e6f4:	e3401001 	movt	r1, #1
    e6f8:	e3400001 	movt	r0, #1
    e6fc:	e3a0205f 	mov	r2, #95	; 0x5f
    e700:	ebfff604 	bl	bf18 <assertion_failed>
    e704:	eaffffe9 	b	e6b0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0000e708 <CInterruptSystem::DisableIRQ(unsigned int)>:
    e708:	e3500047 	cmp	r0, #71	; 0x47
    e70c:	e92d4010 	push	{r4, lr}
    e710:	e1a04000 	mov	r4, r0
    e714:	8a00000e 	bhi	e754 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
    e718:	e350001f 	cmp	r0, #31
    e71c:	930b221c 	movwls	r2, #45596	; 0xb21c
    e720:	93432f00 	movtls	r2, #16128	; 0x3f00
    e724:	8a000004 	bhi	e73c <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
    e728:	e204401f 	and	r4, r4, #31
    e72c:	e3a03001 	mov	r3, #1
    e730:	e1a04413 	lsl	r4, r3, r4
    e734:	e5824000 	str	r4, [r2]
    e738:	e8bd8010 	pop	{r4, pc}
    e73c:	e350003f 	cmp	r0, #63	; 0x3f
    e740:	930b2220 	movwls	r2, #45600	; 0xb220
    e744:	93432f00 	movtls	r2, #16128	; 0x3f00
    e748:	830b2224 	movwhi	r2, #45604	; 0xb224
    e74c:	83432f00 	movthi	r2, #16128	; 0x3f00
    e750:	eafffff4 	b	e728 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
    e754:	e3a0209b 	mov	r2, #155	; 0x9b
    e758:	e30211a8 	movw	r1, #8616	; 0x21a8
    e75c:	e30201fc 	movw	r0, #8700	; 0x21fc
    e760:	e3401001 	movt	r1, #1
    e764:	e3400001 	movt	r0, #1
    e768:	ebfff5ea 	bl	bf18 <assertion_failed>
    e76c:	e30b2224 	movw	r2, #45604	; 0xb224
    e770:	e3432f00 	movt	r2, #16128	; 0x3f00
    e774:	eaffffeb 	b	e728 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

0000e778 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    e778:	e3510047 	cmp	r1, #71	; 0x47
    e77c:	e92d4070 	push	{r4, r5, r6, lr}
    e780:	e1a04001 	mov	r4, r1
    e784:	e1a05000 	mov	r5, r0
    e788:	8a000009 	bhi	e7b4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    e78c:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e790:	e0856104 	add	r6, r5, r4, lsl #2
    e794:	e3530000 	cmp	r3, #0
    e798:	0a00000f 	beq	e7dc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    e79c:	e1a00004 	mov	r0, r4
    e7a0:	ebffffd8 	bl	e708 <CInterruptSystem::DisableIRQ(unsigned int)>
    e7a4:	e3a03000 	mov	r3, #0
    e7a8:	e7853104 	str	r3, [r5, r4, lsl #2]
    e7ac:	e5863120 	str	r3, [r6, #288]	; 0x120
    e7b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e7b4:	e30211a8 	movw	r1, #8616	; 0x21a8
    e7b8:	e30201fc 	movw	r0, #8700	; 0x21fc
    e7bc:	e3401001 	movt	r1, #1
    e7c0:	e3400001 	movt	r0, #1
    e7c4:	e3a0206a 	mov	r2, #106	; 0x6a
    e7c8:	e0856104 	add	r6, r5, r4, lsl #2
    e7cc:	ebfff5d1 	bl	bf18 <assertion_failed>
    e7d0:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e7d4:	e3530000 	cmp	r3, #0
    e7d8:	1affffef 	bne	e79c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    e7dc:	e30211a8 	movw	r1, #8616	; 0x21a8
    e7e0:	e302022c 	movw	r0, #8748	; 0x222c
    e7e4:	e3401001 	movt	r1, #1
    e7e8:	e3400001 	movt	r0, #1
    e7ec:	e3a0206b 	mov	r2, #107	; 0x6b
    e7f0:	ebfff5c8 	bl	bf18 <assertion_failed>
    e7f4:	eaffffe8 	b	e79c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0000e7f8 <CInterruptSystem::EnableFIQ(unsigned int)>:
    e7f8:	e3500047 	cmp	r0, #71	; 0x47
    e7fc:	e92d4010 	push	{r4, lr}
    e800:	e1a04000 	mov	r4, r0
    e804:	9a000005 	bls	e820 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    e808:	e30211a8 	movw	r1, #8616	; 0x21a8
    e80c:	e30201b8 	movw	r0, #8632	; 0x21b8
    e810:	e3401001 	movt	r1, #1
    e814:	e3400001 	movt	r0, #1
    e818:	e3a020a6 	mov	r2, #166	; 0xa6
    e81c:	ebfff5bd 	bl	bf18 <assertion_failed>
    e820:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e824:	e3433f00 	movt	r3, #16128	; 0x3f00
    e828:	e3844080 	orr	r4, r4, #128	; 0x80
    e82c:	e583420c 	str	r4, [r3, #524]	; 0x20c
    e830:	e8bd8010 	pop	{r4, pc}

0000e834 <CInterruptSystem::DisableFIQ()>:
    e834:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e838:	e3433f00 	movt	r3, #16128	; 0x3f00
    e83c:	e3a02000 	mov	r2, #0
    e840:	e583220c 	str	r2, [r3, #524]	; 0x20c
    e844:	e12fff1e 	bx	lr

0000e848 <CInterruptSystem::Get()>:
    e848:	e92d4010 	push	{r4, lr}
    e84c:	e30249a8 	movw	r4, #10664	; 0x29a8
    e850:	e3404001 	movt	r4, #1
    e854:	e5940000 	ldr	r0, [r4]
    e858:	e3500000 	cmp	r0, #0
    e85c:	18bd8010 	popne	{r4, pc}
    e860:	e3a020b8 	mov	r2, #184	; 0xb8
    e864:	e30211a8 	movw	r1, #8616	; 0x21a8
    e868:	e3000f90 	movw	r0, #3984	; 0xf90
    e86c:	e3401001 	movt	r1, #1
    e870:	e3400001 	movt	r0, #1
    e874:	ebfff5a7 	bl	bf18 <assertion_failed>
    e878:	e5940000 	ldr	r0, [r4]
    e87c:	e8bd8010 	pop	{r4, pc}

0000e880 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    e880:	e3510047 	cmp	r1, #71	; 0x47
    e884:	e92d4070 	push	{r4, r5, r6, lr}
    e888:	e1a06001 	mov	r6, r1
    e88c:	e1a05000 	mov	r5, r0
    e890:	8a000007 	bhi	e8b4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    e894:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    e898:	e0855106 	add	r5, r5, r6, lsl #2
    e89c:	e3540000 	cmp	r4, #0
    e8a0:	0a00000d 	beq	e8dc <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
    e8a4:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    e8a8:	e12fff34 	blx	r4
    e8ac:	e3a00001 	mov	r0, #1
    e8b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e8b4:	e30211a8 	movw	r1, #8616	; 0x21a8
    e8b8:	e30201fc 	movw	r0, #8700	; 0x21fc
    e8bc:	e3401001 	movt	r1, #1
    e8c0:	e3400001 	movt	r0, #1
    e8c4:	e3a020be 	mov	r2, #190	; 0xbe
    e8c8:	ebfff592 	bl	bf18 <assertion_failed>
    e8cc:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    e8d0:	e0855106 	add	r5, r5, r6, lsl #2
    e8d4:	e3540000 	cmp	r4, #0
    e8d8:	1afffff1 	bne	e8a4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    e8dc:	e1a00006 	mov	r0, r6
    e8e0:	ebffff88 	bl	e708 <CInterruptSystem::DisableIRQ(unsigned int)>
    e8e4:	e1a00004 	mov	r0, r4
    e8e8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e8ec <CInterruptSystem::InterruptHandler()>:
    e8ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e8f0:	e30269a8 	movw	r6, #10664	; 0x29a8
    e8f4:	e3406001 	movt	r6, #1
    e8f8:	e24dd010 	sub	sp, sp, #16
    e8fc:	e5963000 	ldr	r3, [r6]
    e900:	e3530000 	cmp	r3, #0
    e904:	0a00001f 	beq	e988 <CInterruptSystem::InterruptHandler()+0x9c>
    e908:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e90c:	e3433f00 	movt	r3, #16128	; 0x3f00
    e910:	e28d8008 	add	r8, sp, #8
    e914:	e3a07000 	mov	r7, #0
    e918:	e5934204 	ldr	r4, [r3, #516]	; 0x204
    e91c:	e58d4004 	str	r4, [sp, #4]
    e920:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    e924:	e58d2008 	str	r2, [sp, #8]
    e928:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    e92c:	e6ef3073 	uxtb	r3, r3
    e930:	e58d300c 	str	r3, [sp, #12]
    e934:	e3540000 	cmp	r4, #0
    e938:	0a00000d 	beq	e974 <CInterruptSystem::InterruptHandler()+0x88>
    e93c:	e1a05007 	mov	r5, r7
    e940:	ea000002 	b	e950 <CInterruptSystem::InterruptHandler()+0x64>
    e944:	e1b040a4 	lsrs	r4, r4, #1
    e948:	e2855001 	add	r5, r5, #1
    e94c:	0a000008 	beq	e974 <CInterruptSystem::InterruptHandler()+0x88>
    e950:	e3140001 	tst	r4, #1
    e954:	0afffffa 	beq	e944 <CInterruptSystem::InterruptHandler()+0x58>
    e958:	e1a01005 	mov	r1, r5
    e95c:	e5960000 	ldr	r0, [r6]
    e960:	ebffffc6 	bl	e880 <CInterruptSystem::CallIRQHandler(unsigned int)>
    e964:	e3500000 	cmp	r0, #0
    e968:	0afffff5 	beq	e944 <CInterruptSystem::InterruptHandler()+0x58>
    e96c:	e28dd010 	add	sp, sp, #16
    e970:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e974:	e2877020 	add	r7, r7, #32
    e978:	e3570060 	cmp	r7, #96	; 0x60
    e97c:	0afffffa 	beq	e96c <CInterruptSystem::InterruptHandler()+0x80>
    e980:	e4984004 	ldr	r4, [r8], #4
    e984:	eaffffea 	b	e934 <CInterruptSystem::InterruptHandler()+0x48>
    e988:	e30211a8 	movw	r1, #8616	; 0x21a8
    e98c:	e3000f90 	movw	r0, #3984	; 0xf90
    e990:	e3401001 	movt	r1, #1
    e994:	e3400001 	movt	r0, #1
    e998:	e3a020d1 	mov	r2, #209	; 0xd1
    e99c:	ebfff55d 	bl	bf18 <assertion_failed>
    e9a0:	eaffffd8 	b	e908 <CInterruptSystem::InterruptHandler()+0x1c>

0000e9a4 <InterruptHandler>:
    e9a4:	eaffffd0 	b	e8ec <CInterruptSystem::InterruptHandler()>

0000e9a8 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
    e9a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e9ac:	e280c0dc 	add	ip, r0, #220	; 0xdc
    e9b0:	e3a0e000 	mov	lr, #0
    e9b4:	e1a03000 	mov	r3, r0
    e9b8:	e1a0200e 	mov	r2, lr
    e9bc:	e5801000 	str	r1, [r0]
    e9c0:	e5a3e004 	str	lr, [r3, #4]!
    e9c4:	e5a32004 	str	r2, [r3, #4]!
    e9c8:	e153000c 	cmp	r3, ip
    e9cc:	1afffffc 	bne	e9c4 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
    e9d0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000e9d4 <CGPIOManager::~CGPIOManager()>:
    e9d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e9d8:	e3026248 	movw	r6, #8776	; 0x2248
    e9dc:	e3025258 	movw	r5, #8792	; 0x2258
    e9e0:	e2804004 	add	r4, r0, #4
    e9e4:	e28070dc 	add	r7, r0, #220	; 0xdc
    e9e8:	e3406001 	movt	r6, #1
    e9ec:	e3405001 	movt	r5, #1
    e9f0:	e1a08000 	mov	r8, r0
    e9f4:	e5b43004 	ldr	r3, [r4, #4]!
    e9f8:	e3a0202c 	mov	r2, #44	; 0x2c
    e9fc:	e1a01006 	mov	r1, r6
    ea00:	e1a00005 	mov	r0, r5
    ea04:	e3530000 	cmp	r3, #0
    ea08:	0a000000 	beq	ea10 <CGPIOManager::~CGPIOManager()+0x3c>
    ea0c:	ebfff541 	bl	bf18 <assertion_failed>
    ea10:	e1540007 	cmp	r4, r7
    ea14:	1afffff6 	bne	e9f4 <CGPIOManager::~CGPIOManager()+0x20>
    ea18:	e5983004 	ldr	r3, [r8, #4]
    ea1c:	e3530000 	cmp	r3, #0
    ea20:	0a000004 	beq	ea38 <CGPIOManager::~CGPIOManager()+0x64>
    ea24:	e5980000 	ldr	r0, [r8]
    ea28:	e3500000 	cmp	r0, #0
    ea2c:	0a000003 	beq	ea40 <CGPIOManager::~CGPIOManager()+0x6c>
    ea30:	e3a01034 	mov	r1, #52	; 0x34
    ea34:	ebffff4f 	bl	e778 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    ea38:	e1a00008 	mov	r0, r8
    ea3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ea40:	e3021248 	movw	r1, #8776	; 0x2248
    ea44:	e302026c 	movw	r0, #8812	; 0x226c
    ea48:	e3401001 	movt	r1, #1
    ea4c:	e3400001 	movt	r0, #1
    ea50:	e3a02032 	mov	r2, #50	; 0x32
    ea54:	ebfff52f 	bl	bf18 <assertion_failed>
    ea58:	e5980000 	ldr	r0, [r8]
    ea5c:	eafffff3 	b	ea30 <CGPIOManager::~CGPIOManager()+0x5c>

0000ea60 <CGPIOManager::Initialize()>:
    ea60:	e5903004 	ldr	r3, [r0, #4]
    ea64:	e92d4010 	push	{r4, lr}
    ea68:	e3530000 	cmp	r3, #0
    ea6c:	e1a04000 	mov	r4, r0
    ea70:	1a00000b 	bne	eaa4 <CGPIOManager::Initialize()+0x44>
    ea74:	e5940000 	ldr	r0, [r4]
    ea78:	e3500000 	cmp	r0, #0
    ea7c:	0a000011 	beq	eac8 <CGPIOManager::Initialize()+0x68>
    ea80:	e1a03004 	mov	r3, r4
    ea84:	e3a01034 	mov	r1, #52	; 0x34
    ea88:	e30e2d04 	movw	r2, #60676	; 0xed04
    ea8c:	e3402000 	movt	r2, #0
    ea90:	ebfffeff 	bl	e694 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    ea94:	e3a03001 	mov	r3, #1
    ea98:	e1a00003 	mov	r0, r3
    ea9c:	e5843004 	str	r3, [r4, #4]
    eaa0:	e8bd8010 	pop	{r4, pc}
    eaa4:	e3021248 	movw	r1, #8776	; 0x2248
    eaa8:	e3020280 	movw	r0, #8832	; 0x2280
    eaac:	e3401001 	movt	r1, #1
    eab0:	e3400001 	movt	r0, #1
    eab4:	e3a0203b 	mov	r2, #59	; 0x3b
    eab8:	ebfff516 	bl	bf18 <assertion_failed>
    eabc:	e5940000 	ldr	r0, [r4]
    eac0:	e3500000 	cmp	r0, #0
    eac4:	1affffed 	bne	ea80 <CGPIOManager::Initialize()+0x20>
    eac8:	e3021248 	movw	r1, #8776	; 0x2248
    eacc:	e302026c 	movw	r0, #8812	; 0x226c
    ead0:	e3401001 	movt	r1, #1
    ead4:	e3400001 	movt	r0, #1
    ead8:	e3a0203c 	mov	r2, #60	; 0x3c
    eadc:	ebfff50d 	bl	bf18 <assertion_failed>
    eae0:	e5940000 	ldr	r0, [r4]
    eae4:	eaffffe5 	b	ea80 <CGPIOManager::Initialize()+0x20>

0000eae8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
    eae8:	e5903004 	ldr	r3, [r0, #4]
    eaec:	e92d4070 	push	{r4, r5, r6, lr}
    eaf0:	e3530000 	cmp	r3, #0
    eaf4:	e1a04000 	mov	r4, r0
    eaf8:	e1a05001 	mov	r5, r1
    eafc:	0a000010 	beq	eb44 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
    eb00:	e3550000 	cmp	r5, #0
    eb04:	0a00001c 	beq	eb7c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x94>
    eb08:	e5956004 	ldr	r6, [r5, #4]
    eb0c:	e3560035 	cmp	r6, #53	; 0x35
    eb10:	8a000012 	bhi	eb60 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x78>
    eb14:	e0844106 	add	r4, r4, r6, lsl #2
    eb18:	e5943008 	ldr	r3, [r4, #8]
    eb1c:	e3530000 	cmp	r3, #0
    eb20:	0a000005 	beq	eb3c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
    eb24:	e3021248 	movw	r1, #8776	; 0x2248
    eb28:	e3020258 	movw	r0, #8792	; 0x2258
    eb2c:	e3401001 	movt	r1, #1
    eb30:	e3400001 	movt	r0, #1
    eb34:	e3a0204b 	mov	r2, #75	; 0x4b
    eb38:	ebfff4f6 	bl	bf18 <assertion_failed>
    eb3c:	e5845008 	str	r5, [r4, #8]
    eb40:	e8bd8070 	pop	{r4, r5, r6, pc}
    eb44:	e3021248 	movw	r1, #8776	; 0x2248
    eb48:	e3020294 	movw	r0, #8852	; 0x2294
    eb4c:	e3401001 	movt	r1, #1
    eb50:	e3400001 	movt	r0, #1
    eb54:	e3a02045 	mov	r2, #69	; 0x45
    eb58:	ebfff4ee 	bl	bf18 <assertion_failed>
    eb5c:	eaffffe7 	b	eb00 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x18>
    eb60:	e3021248 	movw	r1, #8776	; 0x2248
    eb64:	e3000ce0 	movw	r0, #3296	; 0xce0
    eb68:	e3401001 	movt	r1, #1
    eb6c:	e3400001 	movt	r0, #1
    eb70:	e3a02049 	mov	r2, #73	; 0x49
    eb74:	ebfff4e7 	bl	bf18 <assertion_failed>
    eb78:	eaffffe5 	b	eb14 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
    eb7c:	e3021248 	movw	r1, #8776	; 0x2248
    eb80:	e30202a4 	movw	r0, #8868	; 0x22a4
    eb84:	e3401001 	movt	r1, #1
    eb88:	e3400001 	movt	r0, #1
    eb8c:	e3a02047 	mov	r2, #71	; 0x47
    eb90:	ebfff4e0 	bl	bf18 <assertion_failed>
    eb94:	eaffffdb 	b	eb08 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>

0000eb98 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
    eb98:	e5903004 	ldr	r3, [r0, #4]
    eb9c:	e92d4070 	push	{r4, r5, r6, lr}
    eba0:	e3530000 	cmp	r3, #0
    eba4:	e1a04000 	mov	r4, r0
    eba8:	e1a05001 	mov	r5, r1
    ebac:	0a00000b 	beq	ebe0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
    ebb0:	e3550000 	cmp	r5, #0
    ebb4:	0a000021 	beq	ec40 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa8>
    ebb8:	e5955004 	ldr	r5, [r5, #4]
    ebbc:	e3550035 	cmp	r5, #53	; 0x35
    ebc0:	8a00000d 	bhi	ebfc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x64>
    ebc4:	e0844105 	add	r4, r4, r5, lsl #2
    ebc8:	e5943008 	ldr	r3, [r4, #8]
    ebcc:	e3530000 	cmp	r3, #0
    ebd0:	0a000013 	beq	ec24 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
    ebd4:	e3a03000 	mov	r3, #0
    ebd8:	e5843008 	str	r3, [r4, #8]
    ebdc:	e8bd8070 	pop	{r4, r5, r6, pc}
    ebe0:	e3021248 	movw	r1, #8776	; 0x2248
    ebe4:	e3020294 	movw	r0, #8852	; 0x2294
    ebe8:	e3401001 	movt	r1, #1
    ebec:	e3400001 	movt	r0, #1
    ebf0:	e3a02052 	mov	r2, #82	; 0x52
    ebf4:	ebfff4c7 	bl	bf18 <assertion_failed>
    ebf8:	eaffffec 	b	ebb0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x18>
    ebfc:	e0844105 	add	r4, r4, r5, lsl #2
    ec00:	e3021248 	movw	r1, #8776	; 0x2248
    ec04:	e3000ce0 	movw	r0, #3296	; 0xce0
    ec08:	e3401001 	movt	r1, #1
    ec0c:	e3400001 	movt	r0, #1
    ec10:	e3a02056 	mov	r2, #86	; 0x56
    ec14:	ebfff4bf 	bl	bf18 <assertion_failed>
    ec18:	e5943008 	ldr	r3, [r4, #8]
    ec1c:	e3530000 	cmp	r3, #0
    ec20:	1affffeb 	bne	ebd4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    ec24:	e3021248 	movw	r1, #8776	; 0x2248
    ec28:	e30202b0 	movw	r0, #8880	; 0x22b0
    ec2c:	e3401001 	movt	r1, #1
    ec30:	e3400001 	movt	r0, #1
    ec34:	e3a02058 	mov	r2, #88	; 0x58
    ec38:	ebfff4b6 	bl	bf18 <assertion_failed>
    ec3c:	eaffffe4 	b	ebd4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
    ec40:	e3021248 	movw	r1, #8776	; 0x2248
    ec44:	e30202a4 	movw	r0, #8868	; 0x22a4
    ec48:	e3401001 	movt	r1, #1
    ec4c:	e3400001 	movt	r0, #1
    ec50:	e3a02054 	mov	r2, #84	; 0x54
    ec54:	ebfff4af 	bl	bf18 <assertion_failed>
    ec58:	eaffffd6 	b	ebb8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>

0000ec5c <CGPIOManager::InterruptHandler()>:
    ec5c:	e5903004 	ldr	r3, [r0, #4]
    ec60:	e92d4070 	push	{r4, r5, r6, lr}
    ec64:	e3530000 	cmp	r3, #0
    ec68:	e1a06000 	mov	r6, r0
    ec6c:	0a00001a 	beq	ecdc <CGPIOManager::InterruptHandler()+0x80>
    ec70:	e3a02000 	mov	r2, #0
    ec74:	e3432f20 	movt	r2, #16160	; 0x3f20
    ec78:	e3a04000 	mov	r4, #0
    ec7c:	e5923040 	ldr	r3, [r2, #64]	; 0x40
    ec80:	ea000004 	b	ec98 <CGPIOManager::InterruptHandler()+0x3c>
    ec84:	e2844001 	add	r4, r4, #1
    ec88:	e314001f 	tst	r4, #31
    ec8c:	05923044 	ldreq	r3, [r2, #68]	; 0x44
    ec90:	e3540036 	cmp	r4, #54	; 0x36
    ec94:	08bd8070 	popeq	{r4, r5, r6, pc}
    ec98:	e3130001 	tst	r3, #1
    ec9c:	e1a030a3 	lsr	r3, r3, #1
    eca0:	0afffff7 	beq	ec84 <CGPIOManager::InterruptHandler()+0x28>
    eca4:	e2843002 	add	r3, r4, #2
    eca8:	e204501f 	and	r5, r4, #31
    ecac:	e3a02001 	mov	r2, #1
    ecb0:	e7960103 	ldr	r0, [r6, r3, lsl #2]
    ecb4:	e1a05512 	lsl	r5, r2, r5
    ecb8:	e3500000 	cmp	r0, #0
    ecbc:	0a00000d 	beq	ecf8 <CGPIOManager::InterruptHandler()+0x9c>
    ecc0:	ebffe9ba 	bl	93b0 <CGPIOPin::InterruptHandler()>
    ecc4:	e3a03010 	mov	r3, #16
    ecc8:	e3403fc8 	movt	r3, #4040	; 0xfc8
    eccc:	e08332a4 	add	r3, r3, r4, lsr #5
    ecd0:	e1a03103 	lsl	r3, r3, #2
    ecd4:	e5835000 	str	r5, [r3]
    ecd8:	e8bd8070 	pop	{r4, r5, r6, pc}
    ecdc:	e3021248 	movw	r1, #8776	; 0x2248
    ece0:	e3020294 	movw	r0, #8852	; 0x2294
    ece4:	e3401001 	movt	r1, #1
    ece8:	e3400001 	movt	r0, #1
    ecec:	e3a0205e 	mov	r2, #94	; 0x5e
    ecf0:	ebfff488 	bl	bf18 <assertion_failed>
    ecf4:	eaffffdd 	b	ec70 <CGPIOManager::InterruptHandler()+0x14>
    ecf8:	e1a00004 	mov	r0, r4
    ecfc:	ebffe9d7 	bl	9460 <CGPIOPin::DisableAllInterrupts(unsigned int)>
    ed00:	eaffffef 	b	ecc4 <CGPIOManager::InterruptHandler()+0x68>

0000ed04 <CGPIOManager::InterruptStub(void*)>:
    ed04:	e92d4010 	push	{r4, lr}
    ed08:	e2504000 	subs	r4, r0, #0
    ed0c:	0a000002 	beq	ed1c <CGPIOManager::InterruptStub(void*)+0x18>
    ed10:	e1a00004 	mov	r0, r4
    ed14:	e8bd4010 	pop	{r4, lr}
    ed18:	eaffffcf 	b	ec5c <CGPIOManager::InterruptHandler()>
    ed1c:	e3021248 	movw	r1, #8776	; 0x2248
    ed20:	e30202c4 	movw	r0, #8900	; 0x22c4
    ed24:	e3401001 	movt	r1, #1
    ed28:	e3400001 	movt	r0, #1
    ed2c:	e3a0208a 	mov	r2, #138	; 0x8a
    ed30:	ebfff478 	bl	bf18 <assertion_failed>
    ed34:	e1a00004 	mov	r0, r4
    ed38:	e8bd4010 	pop	{r4, lr}
    ed3c:	eaffffc6 	b	ec5c <CGPIOManager::InterruptHandler()>

0000ed40 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    ed40:	e12fff1e 	bx	lr

0000ed44 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    ed44:	e92d4010 	push	{r4, lr}
    ed48:	e3a01010 	mov	r1, #16
    ed4c:	e1a04000 	mov	r4, r0
    ed50:	ebffea98 	bl	97b8 <operator delete(void*, unsigned int)>
    ed54:	e1a00004 	mov	r0, r4
    ed58:	e8bd8010 	pop	{r4, pc}

0000ed5c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>:
    ed5c:	e92d4070 	push	{r4, r5, r6, lr}
    ed60:	e30249ac 	movw	r4, #10668	; 0x29ac
    ed64:	e3404001 	movt	r4, #1
    ed68:	e1a05000 	mov	r5, r0
    ed6c:	e1a06001 	mov	r6, r1
    ed70:	e5940000 	ldr	r0, [r4]
    ed74:	e3500000 	cmp	r0, #0
    ed78:	1a00001a 	bne	ede8 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x8c>
    ed7c:	e1d500bc 	ldrh	r0, [r5, #12]
    ed80:	e1d530be 	ldrh	r3, [r5, #14]
    ed84:	e5856008 	str	r6, [r5, #8]
    ed88:	e0402003 	sub	r2, r0, r3
    ed8c:	e6bf2072 	sxth	r2, r2
    ed90:	e3520000 	cmp	r2, #0
    ed94:	da00000c 	ble	edcc <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x70>
    ed98:	e3560000 	cmp	r6, #0
    ed9c:	1a00000c 	bne	edd4 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x78>
    eda0:	e2833001 	add	r3, r3, #1
    eda4:	e6ff3073 	uxth	r3, r3
    eda8:	e1c530be 	strh	r3, [r5, #14]
    edac:	e5951004 	ldr	r1, [r5, #4]
    edb0:	e1833800 	orr	r3, r3, r0, lsl #16
    edb4:	e5942004 	ldr	r2, [r4, #4]
    edb8:	e7823101 	str	r3, [r2, r1, lsl #2]
    edbc:	e5943000 	ldr	r3, [r4]
    edc0:	e3530000 	cmp	r3, #0
    edc4:	1a000005 	bne	ede0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x84>
    edc8:	e8bd8070 	pop	{r4, r5, r6, pc}
    edcc:	e3560000 	cmp	r6, #0
    edd0:	1a000006 	bne	edf0 <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x94>
    edd4:	e5943000 	ldr	r3, [r4]
    edd8:	e3530000 	cmp	r3, #0
    eddc:	08bd8070 	popeq	{r4, r5, r6, pc}
    ede0:	e8bd4070 	pop	{r4, r5, r6, lr}
    ede4:	eaffeaa3 	b	9878 <LeaveCritical>
    ede8:	ebffea74 	bl	97c0 <EnterCritical>
    edec:	eaffffe2 	b	ed7c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x20>
    edf0:	e2800001 	add	r0, r0, #1
    edf4:	e6ff0070 	uxth	r0, r0
    edf8:	e1c500bc 	strh	r0, [r5, #12]
    edfc:	eaffffea 	b	edac <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]+0x50>

0000ee00 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)>:
    ee00:	e59f20e4 	ldr	r2, [pc, #228]	; eeec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xec>
    ee04:	e3510001 	cmp	r1, #1
    ee08:	e92d4030 	push	{r4, r5, lr}
    ee0c:	e3a03000 	mov	r3, #0
    ee10:	e24dd024 	sub	sp, sp, #36	; 0x24
    ee14:	e1a04000 	mov	r4, r0
    ee18:	e5801004 	str	r1, [r0, #4]
    ee1c:	e5802000 	str	r2, [r0]
    ee20:	e1c030bc 	strh	r3, [r0, #12]
    ee24:	e1c030be 	strh	r3, [r0, #14]
    ee28:	9a000002 	bls	ee38 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x38>
    ee2c:	e1a00004 	mov	r0, r4
    ee30:	e28dd024 	add	sp, sp, #36	; 0x24
    ee34:	e8bd8030 	pop	{r4, r5, pc}
    ee38:	e30259ac 	movw	r5, #10668	; 0x29ac
    ee3c:	e3405001 	movt	r5, #1
    ee40:	e5950000 	ldr	r0, [r5]
    ee44:	e1500003 	cmp	r0, r3
    ee48:	1a000009 	bne	ee74 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x74>
    ee4c:	e5953004 	ldr	r3, [r5, #4]
    ee50:	e3530000 	cmp	r3, #0
    ee54:	0a00000a 	beq	ee84 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x84>
    ee58:	e5953004 	ldr	r3, [r5, #4]
    ee5c:	e3530000 	cmp	r3, #0
    ee60:	0afffff1 	beq	ee2c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    ee64:	e3a01000 	mov	r1, #0
    ee68:	e1a00004 	mov	r0, r4
    ee6c:	ebffffba 	bl	ed5c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>
    ee70:	eaffffed 	b	ee2c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x2c>
    ee74:	ebffea51 	bl	97c0 <EnterCritical>
    ee78:	e5953004 	ldr	r3, [r5, #4]
    ee7c:	e3530000 	cmp	r3, #0
    ee80:	1a00000f 	bne	eec4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xc4>
    ee84:	e28d0008 	add	r0, sp, #8
    ee88:	ebffe60a 	bl	86b8 <CBcmPropertyTags::CBcmPropertyTags()>
    ee8c:	e3a03000 	mov	r3, #0
    ee90:	e28d0008 	add	r0, sp, #8
    ee94:	e58d3000 	str	r3, [sp]
    ee98:	e3a01010 	mov	r1, #16
    ee9c:	e3a03010 	mov	r3, #16
    eea0:	e3401004 	movt	r1, #4
    eea4:	e08d2003 	add	r2, sp, r3
    eea8:	ebffe64a 	bl	87d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    eeac:	e3500000 	cmp	r0, #0
    eeb0:	e28d0008 	add	r0, sp, #8
    eeb4:	159d301c 	ldrne	r3, [sp, #28]
    eeb8:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    eebc:	15853004 	strne	r3, [r5, #4]
    eec0:	ebffe602 	bl	86d0 <CBcmPropertyTags::~CBcmPropertyTags()>
    eec4:	e5953000 	ldr	r3, [r5]
    eec8:	e3530000 	cmp	r3, #0
    eecc:	0a000000 	beq	eed4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0xd4>
    eed0:	ebffea68 	bl	9878 <LeaveCritical>
    eed4:	e5943004 	ldr	r3, [r4, #4]
    eed8:	e3530001 	cmp	r3, #1
    eedc:	9affffdd 	bls	ee58 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int)+0x58>
    eee0:	e1a00004 	mov	r0, r4
    eee4:	e28dd024 	add	sp, sp, #36	; 0x24
    eee8:	e8bd8030 	pop	{r4, r5, pc}
    eeec:	000122d8 	.word	0x000122d8

0000eef0 <CVirtualGPIOPin::Write(unsigned int)>:
    eef0:	e5902004 	ldr	r2, [r0, #4]
    eef4:	e1a03001 	mov	r3, r1
    eef8:	e3520001 	cmp	r2, #1
    eefc:	812fff1e 	bxhi	lr
    ef00:	e30229ac 	movw	r2, #10668	; 0x29ac
    ef04:	e3402001 	movt	r2, #1
    ef08:	e3510001 	cmp	r1, #1
    ef0c:	e5922004 	ldr	r2, [r2, #4]
    ef10:	93a03000 	movls	r3, #0
    ef14:	83a03001 	movhi	r3, #1
    ef18:	e3520000 	cmp	r2, #0
    ef1c:	03833001 	orreq	r3, r3, #1
    ef20:	e3530000 	cmp	r3, #0
    ef24:	112fff1e 	bxne	lr
    ef28:	eaffff8b 	b	ed5c <CVirtualGPIOPin::Write(unsigned int) [clone .part.0]>

0000ef2c <CVirtualGPIOPin::Invert()>:
    ef2c:	e5901008 	ldr	r1, [r0, #8]
    ef30:	e2211001 	eor	r1, r1, #1
    ef34:	eaffffed 	b	eef0 <CVirtualGPIOPin::Write(unsigned int)>

0000ef38 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    ef38:	e30239ac 	movw	r3, #10668	; 0x29ac
    ef3c:	e3403001 	movt	r3, #1
    ef40:	e3a02000 	mov	r2, #0
    ef44:	e5832000 	str	r2, [r3]
    ef48:	e12fff1e 	bx	lr

0000ef4c <CMachineInfo::CMachineInfo()>:
    ef4c:	e30229b4 	movw	r2, #10676	; 0x29b4
    ef50:	e3402001 	movt	r2, #1
    ef54:	e92d4030 	push	{r4, r5, lr}
    ef58:	e3a0300c 	mov	r3, #12
    ef5c:	e5925000 	ldr	r5, [r2]
    ef60:	e3a01003 	mov	r1, #3
    ef64:	e5c03004 	strb	r3, [r0, #4]
    ef68:	e3a03000 	mov	r3, #0
    ef6c:	e1550003 	cmp	r5, r3
    ef70:	e24dd024 	sub	sp, sp, #36	; 0x24
    ef74:	e1a04000 	mov	r4, r0
    ef78:	e5c01010 	strb	r1, [r0, #16]
    ef7c:	e5803000 	str	r3, [r0]
    ef80:	e5803008 	str	r3, [r0, #8]
    ef84:	e580300c 	str	r3, [r0, #12]
    ef88:	e5803014 	str	r3, [r0, #20]
    ef8c:	0a00000e 	beq	efcc <CMachineInfo::CMachineInfo()+0x80>
    ef90:	e595e000 	ldr	lr, [r5]
    ef94:	e5d5c004 	ldrb	ip, [r5, #4]
    ef98:	e5950008 	ldr	r0, [r5, #8]
    ef9c:	e595100c 	ldr	r1, [r5, #12]
    efa0:	e5d52010 	ldrb	r2, [r5, #16]
    efa4:	e5953014 	ldr	r3, [r5, #20]
    efa8:	e584e000 	str	lr, [r4]
    efac:	e5c4c004 	strb	ip, [r4, #4]
    efb0:	e5840008 	str	r0, [r4, #8]
    efb4:	e584100c 	str	r1, [r4, #12]
    efb8:	e5c42010 	strb	r2, [r4, #16]
    efbc:	e5843014 	str	r3, [r4, #20]
    efc0:	e1a00004 	mov	r0, r4
    efc4:	e28dd024 	add	sp, sp, #36	; 0x24
    efc8:	e8bd8030 	pop	{r4, r5, pc}
    efcc:	e5820000 	str	r0, [r2]
    efd0:	e28d0008 	add	r0, sp, #8
    efd4:	ebffe5b7 	bl	86b8 <CBcmPropertyTags::CBcmPropertyTags()>
    efd8:	e3a03010 	mov	r3, #16
    efdc:	e58d5000 	str	r5, [sp]
    efe0:	e28d0008 	add	r0, sp, #8
    efe4:	e3a01002 	mov	r1, #2
    efe8:	e08d2003 	add	r2, sp, r3
    efec:	e3401001 	movt	r1, #1
    eff0:	ebffe5f8 	bl	87d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    eff4:	e3500000 	cmp	r0, #0
    eff8:	0a00000c 	beq	f030 <CMachineInfo::CMachineInfo()+0xe4>
    effc:	e59d201c 	ldr	r2, [sp, #28]
    f000:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    f004:	e5842000 	str	r2, [r4]
    f008:	1a00000b 	bne	f03c <CMachineInfo::CMachineInfo()+0xf0>
    f00c:	e3a01002 	mov	r1, #2
    f010:	e59f00f8 	ldr	r0, [pc, #248]	; f110 <CMachineInfo::CMachineInfo()+0x1c4>
    f014:	ea000000 	b	f01c <CMachineInfo::CMachineInfo()+0xd0>
    f018:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    f01c:	e1520001 	cmp	r2, r1
    f020:	0a000012 	beq	f070 <CMachineInfo::CMachineInfo()+0x124>
    f024:	e2833001 	add	r3, r3, #1
    f028:	e3530011 	cmp	r3, #17
    f02c:	1afffff9 	bne	f018 <CMachineInfo::CMachineInfo()+0xcc>
    f030:	e28d0008 	add	r0, sp, #8
    f034:	ebffe5a5 	bl	86d0 <CBcmPropertyTags::~CBcmPropertyTags()>
    f038:	eaffffe0 	b	efc0 <CMachineInfo::CMachineInfo()+0x74>
    f03c:	e302c2e0 	movw	ip, #8928	; 0x22e0
    f040:	e340c001 	movt	ip, #1
    f044:	e7e70252 	ubfx	r0, r2, #4, #8
    f048:	e1a03005 	mov	r3, r5
    f04c:	e1a0100c 	mov	r1, ip
    f050:	ea000000 	b	f058 <CMachineInfo::CMachineInfo()+0x10c>
    f054:	e5b1500c 	ldr	r5, [r1, #12]!
    f058:	e1550000 	cmp	r5, r0
    f05c:	0a000011 	beq	f0a8 <CMachineInfo::CMachineInfo()+0x15c>
    f060:	e2833001 	add	r3, r3, #1
    f064:	e353000a 	cmp	r3, #10
    f068:	1afffff9 	bne	f054 <CMachineInfo::CMachineInfo()+0x108>
    f06c:	eaffffef 	b	f030 <CMachineInfo::CMachineInfo()+0xe4>
    f070:	e30222e0 	movw	r2, #8928	; 0x22e0
    f074:	e3402001 	movt	r2, #1
    f078:	e0823203 	add	r3, r2, r3, lsl #4
    f07c:	e3a01001 	mov	r1, #1
    f080:	e5841008 	str	r1, [r4, #8]
    f084:	e3a02000 	mov	r2, #0
    f088:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
    f08c:	e5931080 	ldr	r1, [r3, #128]	; 0x80
    f090:	e5933084 	ldr	r3, [r3, #132]	; 0x84
    f094:	e5c40004 	strb	r0, [r4, #4]
    f098:	e584100c 	str	r1, [r4, #12]
    f09c:	e5843014 	str	r3, [r4, #20]
    f0a0:	e5c42010 	strb	r2, [r4, #16]
    f0a4:	eaffffe1 	b	f030 <CMachineInfo::CMachineInfo()+0xe4>
    f0a8:	e3a0100c 	mov	r1, #12
    f0ac:	e7e3e652 	ubfx	lr, r2, #12, #4
    f0b0:	e023c391 	mla	r3, r1, r3, ip
    f0b4:	e35e0002 	cmp	lr, #2
    f0b8:	e202100f 	and	r1, r2, #15
    f0bc:	e7e22a52 	ubfx	r2, r2, #20, #3
    f0c0:	e5c4e010 	strb	lr, [r4, #16]
    f0c4:	e3a00c01 	mov	r0, #256	; 0x100
    f0c8:	e2811001 	add	r1, r1, #1
    f0cc:	e1a00210 	lsl	r0, r0, r2
    f0d0:	e584100c 	str	r1, [r4, #12]
    f0d4:	e5d3c004 	ldrb	ip, [r3, #4]
    f0d8:	e5933008 	ldr	r3, [r3, #8]
    f0dc:	e5840014 	str	r0, [r4, #20]
    f0e0:	e5c4c004 	strb	ip, [r4, #4]
    f0e4:	e5843008 	str	r3, [r4, #8]
    f0e8:	83a03003 	movhi	r3, #3
    f0ec:	85c43010 	strbhi	r3, [r4, #16]
    f0f0:	e3520000 	cmp	r2, #0
    f0f4:	035c0003 	cmpeq	ip, #3
    f0f8:	1affffcc 	bne	f030 <CMachineInfo::CMachineInfo()+0xe4>
    f0fc:	e3510001 	cmp	r1, #1
    f100:	13a03002 	movne	r3, #2
    f104:	03a03001 	moveq	r3, #1
    f108:	e5c43004 	strb	r3, [r4, #4]
    f10c:	eaffffc7 	b	f030 <CMachineInfo::CMachineInfo()+0xe4>
    f110:	00012358 	.word	0x00012358

0000f114 <CMachineInfo::~CMachineInfo()>:
    f114:	e30239b4 	movw	r3, #10676	; 0x29b4
    f118:	e3403001 	movt	r3, #1
    f11c:	e3a0100c 	mov	r1, #12
    f120:	e5c01004 	strb	r1, [r0, #4]
    f124:	e5932000 	ldr	r2, [r3]
    f128:	e1500002 	cmp	r0, r2
    f12c:	03a02000 	moveq	r2, #0
    f130:	05832000 	streq	r2, [r3]
    f134:	e12fff1e 	bx	lr

0000f138 <CMachineInfo::GetMachineModel() const>:
    f138:	e5d00004 	ldrb	r0, [r0, #4]
    f13c:	e12fff1e 	bx	lr

0000f140 <CMachineInfo::GetMachineName() const>:
    f140:	e5d02004 	ldrb	r2, [r0, #4]
    f144:	e30232e0 	movw	r3, #8928	; 0x22e0
    f148:	e3403001 	movt	r3, #1
    f14c:	e0833102 	add	r3, r3, r2, lsl #2
    f150:	e5930188 	ldr	r0, [r3, #392]	; 0x188
    f154:	e12fff1e 	bx	lr

0000f158 <CMachineInfo::GetModelMajor() const>:
    f158:	e5900008 	ldr	r0, [r0, #8]
    f15c:	e12fff1e 	bx	lr

0000f160 <CMachineInfo::GetModelRevision() const>:
    f160:	e590000c 	ldr	r0, [r0, #12]
    f164:	e12fff1e 	bx	lr

0000f168 <CMachineInfo::GetSoCType() const>:
    f168:	e5d00010 	ldrb	r0, [r0, #16]
    f16c:	e12fff1e 	bx	lr

0000f170 <CMachineInfo::GetRAMSize() const>:
    f170:	e5900014 	ldr	r0, [r0, #20]
    f174:	e12fff1e 	bx	lr

0000f178 <CMachineInfo::GetSoCName() const>:
    f178:	e5d02010 	ldrb	r2, [r0, #16]
    f17c:	e30232e0 	movw	r3, #8928	; 0x22e0
    f180:	e3403001 	movt	r3, #1
    f184:	e0833102 	add	r3, r3, r2, lsl #2
    f188:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
    f18c:	e12fff1e 	bx	lr

0000f190 <CMachineInfo::GetRevisionRaw() const>:
    f190:	e5900000 	ldr	r0, [r0]
    f194:	e12fff1e 	bx	lr

0000f198 <CMachineInfo::GetClockRate(unsigned int) const>:
    f198:	e92d4070 	push	{r4, r5, r6, lr}
    f19c:	e24dd028 	sub	sp, sp, #40	; 0x28
    f1a0:	e1a06000 	mov	r6, r0
    f1a4:	e28d000c 	add	r0, sp, #12
    f1a8:	e1a05001 	mov	r5, r1
    f1ac:	ebffe541 	bl	86b8 <CBcmPropertyTags::CBcmPropertyTags()>
    f1b0:	e3a03004 	mov	r3, #4
    f1b4:	e28d000c 	add	r0, sp, #12
    f1b8:	e58d3000 	str	r3, [sp]
    f1bc:	e3a01002 	mov	r1, #2
    f1c0:	e3a03014 	mov	r3, #20
    f1c4:	e3401003 	movt	r1, #3
    f1c8:	e08d2003 	add	r2, sp, r3
    f1cc:	e58d5020 	str	r5, [sp, #32]
    f1d0:	ebffe580 	bl	87d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f1d4:	e2504000 	subs	r4, r0, #0
    f1d8:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    f1dc:	1a00000b 	bne	f210 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f1e0:	e3550002 	cmp	r5, #2
    f1e4:	0a00000e 	beq	f224 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    f1e8:	e3550004 	cmp	r5, #4
    f1ec:	0a000012 	beq	f23c <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
    f1f0:	e3550001 	cmp	r5, #1
    f1f4:	0a00000d 	beq	f230 <CMachineInfo::GetClockRate(unsigned int) const+0x98>
    f1f8:	e30214ac 	movw	r1, #9388	; 0x24ac
    f1fc:	e3020244 	movw	r0, #8772	; 0x2244
    f200:	e3401001 	movt	r1, #1
    f204:	e3400001 	movt	r0, #1
    f208:	e3a02e11 	mov	r2, #272	; 0x110
    f20c:	ebfff341 	bl	bf18 <assertion_failed>
    f210:	e28d000c 	add	r0, sp, #12
    f214:	ebffe52d 	bl	86d0 <CBcmPropertyTags::~CBcmPropertyTags()>
    f218:	e1a00004 	mov	r0, r4
    f21c:	e28dd028 	add	sp, sp, #40	; 0x28
    f220:	e8bd8070 	pop	{r4, r5, r6, pc}
    f224:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    f228:	e34042dc 	movt	r4, #732	; 0x2dc
    f22c:	eafffff7 	b	f210 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f230:	e3a04ce1 	mov	r4, #57600	; 0xe100
    f234:	e34045f5 	movt	r4, #1525	; 0x5f5
    f238:	eafffff4 	b	f210 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    f23c:	e5962008 	ldr	r2, [r6, #8]
    f240:	e3a03ca3 	mov	r3, #41728	; 0xa300
    f244:	e34131e1 	movt	r3, #4577	; 0x11e1
    f248:	e30b4280 	movw	r4, #45696	; 0xb280
    f24c:	e3520002 	cmp	r2, #2
    f250:	e3404ee6 	movt	r4, #3814	; 0xee6
    f254:	81a04003 	movhi	r4, r3
    f258:	eaffffec 	b	f210 <CMachineInfo::GetClockRate(unsigned int) const+0x78>

0000f25c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    f25c:	e3510036 	cmp	r1, #54	; 0x36
    f260:	0a00000f 	beq	f2a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
    f264:	e3510037 	cmp	r1, #55	; 0x37
    f268:	1a000004 	bne	f280 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    f26c:	e5d03004 	ldrb	r3, [r0, #4]
    f270:	e3530003 	cmp	r3, #3
    f274:	c3a00028 	movgt	r0, #40	; 0x28
    f278:	d3a0002d 	movle	r0, #45	; 0x2d
    f27c:	e12fff1e 	bx	lr
    f280:	e92d4010 	push	{r4, lr}
    f284:	e300213b 	movw	r2, #315	; 0x13b
    f288:	e30214ac 	movw	r1, #9388	; 0x24ac
    f28c:	e3020244 	movw	r0, #8772	; 0x2244
    f290:	e3401001 	movt	r1, #1
    f294:	e3400001 	movt	r0, #1
    f298:	ebfff31e 	bl	bf18 <assertion_failed>
    f29c:	e3a00000 	mov	r0, #0
    f2a0:	e8bd8010 	pop	{r4, pc}
    f2a4:	e5d03004 	ldrb	r3, [r0, #4]
    f2a8:	e3530003 	cmp	r3, #3
    f2ac:	ca000001 	bgt	f2b8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
    f2b0:	e3a00028 	mov	r0, #40	; 0x28
    f2b4:	e12fff1e 	bx	lr
    f2b8:	e5903008 	ldr	r3, [r0, #8]
    f2bc:	e3530003 	cmp	r3, #3
    f2c0:	33a0002d 	movcc	r0, #45	; 0x2d
    f2c4:	23a00029 	movcs	r0, #41	; 0x29
    f2c8:	e12fff1e 	bx	lr

0000f2cc <CMachineInfo::GetDevice(TDeviceId) const>:
    f2cc:	e3510000 	cmp	r1, #0
    f2d0:	1a000003 	bne	f2e4 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    f2d4:	e5d00004 	ldrb	r0, [r0, #4]
    f2d8:	e2500001 	subs	r0, r0, #1
    f2dc:	13a00001 	movne	r0, #1
    f2e0:	e12fff1e 	bx	lr
    f2e4:	e92d4010 	push	{r4, lr}
    f2e8:	e3a02f55 	mov	r2, #340	; 0x154
    f2ec:	e30214ac 	movw	r1, #9388	; 0x24ac
    f2f0:	e3020244 	movw	r0, #8772	; 0x2244
    f2f4:	e3401001 	movt	r1, #1
    f2f8:	e3400001 	movt	r0, #1
    f2fc:	ebfff305 	bl	bf18 <assertion_failed>
    f300:	e3a00000 	mov	r0, #0
    f304:	e8bd8010 	pop	{r4, pc}

0000f308 <CMachineInfo::Get()>:
    f308:	e92d4010 	push	{r4, lr}
    f30c:	e30249b4 	movw	r4, #10676	; 0x29b4
    f310:	e3404001 	movt	r4, #1
    f314:	e5940000 	ldr	r0, [r4]
    f318:	e3500000 	cmp	r0, #0
    f31c:	18bd8010 	popne	{r4, pc}
    f320:	e300215d 	movw	r2, #349	; 0x15d
    f324:	e30214ac 	movw	r1, #9388	; 0x24ac
    f328:	e3000f90 	movw	r0, #3984	; 0xf90
    f32c:	e3401001 	movt	r1, #1
    f330:	e3400001 	movt	r0, #1
    f334:	ebfff2f7 	bl	bf18 <assertion_failed>
    f338:	e5940000 	ldr	r0, [r4]
    f33c:	e8bd8010 	pop	{r4, pc}

0000f340 <InvalidateDataCacheL1Only>:
    f340:	e92d0070 	push	{r4, r5, r6}
    f344:	e3a00000 	mov	r0, #0
    f348:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    f34c:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    f350:	e3071fff 	movw	r1, #32767	; 0x7fff
    f354:	e00126a0 	and	r2, r1, r0, lsr #13
    f358:	e30013ff 	movw	r1, #1023	; 0x3ff
    f35c:	e00131a0 	and	r3, r1, r0, lsr #3
    f360:	e2822001 	add	r2, r2, #1
    f364:	e2000007 	and	r0, r0, #7
    f368:	e2800004 	add	r0, r0, #4
    f36c:	e16f1f13 	clz	r1, r3
    f370:	e2834001 	add	r4, r3, #1
    f374:	e2422001 	sub	r2, r2, #1
    f378:	e1a03004 	mov	r3, r4
    f37c:	e2533001 	subs	r3, r3, #1
    f380:	e1a05113 	lsl	r5, r3, r1
    f384:	e1a06012 	lsl	r6, r2, r0
    f388:	e1855006 	orr	r5, r5, r6
    f38c:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    f390:	cafffff9 	bgt	f37c <InvalidateDataCacheL1Only+0x3c>
    f394:	e3520000 	cmp	r2, #0
    f398:	cafffff5 	bgt	f374 <InvalidateDataCacheL1Only+0x34>
    f39c:	f57ff04e 	dsb	st
    f3a0:	f57ff06f 	isb	sy
    f3a4:	e8bd0070 	pop	{r4, r5, r6}
    f3a8:	e12fff1e 	bx	lr

0000f3ac <InvalidateDataCache>:
    f3ac:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    f3b0:	f57ff05f 	dmb	sy
    f3b4:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    f3b8:	e1a03ba0 	lsr	r3, r0, #23
    f3bc:	e213300e 	ands	r3, r3, #14
    f3c0:	0a00001d 	beq	f43c <InvalidateDataCache+0x90>
    f3c4:	e3a0a000 	mov	sl, #0
    f3c8:	e08a20aa 	add	r2, sl, sl, lsr #1
    f3cc:	e1a01230 	lsr	r1, r0, r2
    f3d0:	e2011007 	and	r1, r1, #7
    f3d4:	e3510002 	cmp	r1, #2
    f3d8:	ba000014 	blt	f430 <InvalidateDataCache+0x84>
    f3dc:	e10f9000 	mrs	r9, CPSR
    f3e0:	f10c0080 	cpsid	i
    f3e4:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f3e8:	f57ff06f 	isb	sy
    f3ec:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    f3f0:	e121f009 	msr	CPSR_c, r9
    f3f4:	e2012007 	and	r2, r1, #7
    f3f8:	e2822004 	add	r2, r2, #4
    f3fc:	e30043ff 	movw	r4, #1023	; 0x3ff
    f400:	e01441a1 	ands	r4, r4, r1, lsr #3
    f404:	e16f5f14 	clz	r5, r4
    f408:	e3077fff 	movw	r7, #32767	; 0x7fff
    f40c:	e01776a1 	ands	r7, r7, r1, lsr #13
    f410:	e1a09007 	mov	r9, r7
    f414:	e18ab514 	orr	fp, sl, r4, lsl r5
    f418:	e18bb219 	orr	fp, fp, r9, lsl r2
    f41c:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    f420:	e2599001 	subs	r9, r9, #1
    f424:	aafffffa 	bge	f414 <InvalidateDataCache+0x68>
    f428:	e2544001 	subs	r4, r4, #1
    f42c:	aafffff7 	bge	f410 <InvalidateDataCache+0x64>
    f430:	e28aa002 	add	sl, sl, #2
    f434:	e153000a 	cmp	r3, sl
    f438:	caffffe2 	bgt	f3c8 <InvalidateDataCache+0x1c>
    f43c:	e3a0a000 	mov	sl, #0
    f440:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f444:	f57ff04e 	dsb	st
    f448:	f57ff06f 	isb	sy
    f44c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    f450:	e12fff1e 	bx	lr

0000f454 <CleanDataCache>:
    f454:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    f458:	f57ff05f 	dmb	sy
    f45c:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    f460:	e1a03ba0 	lsr	r3, r0, #23
    f464:	e213300e 	ands	r3, r3, #14
    f468:	0a00001d 	beq	f4e4 <CleanDataCache+0x90>
    f46c:	e3a0a000 	mov	sl, #0
    f470:	e08a20aa 	add	r2, sl, sl, lsr #1
    f474:	e1a01230 	lsr	r1, r0, r2
    f478:	e2011007 	and	r1, r1, #7
    f47c:	e3510002 	cmp	r1, #2
    f480:	ba000014 	blt	f4d8 <CleanDataCache+0x84>
    f484:	e10f9000 	mrs	r9, CPSR
    f488:	f10c0080 	cpsid	i
    f48c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f490:	f57ff06f 	isb	sy
    f494:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    f498:	e121f009 	msr	CPSR_c, r9
    f49c:	e2012007 	and	r2, r1, #7
    f4a0:	e2822004 	add	r2, r2, #4
    f4a4:	e30043ff 	movw	r4, #1023	; 0x3ff
    f4a8:	e01441a1 	ands	r4, r4, r1, lsr #3
    f4ac:	e16f5f14 	clz	r5, r4
    f4b0:	e3077fff 	movw	r7, #32767	; 0x7fff
    f4b4:	e01776a1 	ands	r7, r7, r1, lsr #13
    f4b8:	e1a09007 	mov	r9, r7
    f4bc:	e18ab514 	orr	fp, sl, r4, lsl r5
    f4c0:	e18bb219 	orr	fp, fp, r9, lsl r2
    f4c4:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    f4c8:	e2599001 	subs	r9, r9, #1
    f4cc:	aafffffa 	bge	f4bc <CleanDataCache+0x68>
    f4d0:	e2544001 	subs	r4, r4, #1
    f4d4:	aafffff7 	bge	f4b8 <CleanDataCache+0x64>
    f4d8:	e28aa002 	add	sl, sl, #2
    f4dc:	e153000a 	cmp	r3, sl
    f4e0:	caffffe2 	bgt	f470 <CleanDataCache+0x1c>
    f4e4:	e3a0a000 	mov	sl, #0
    f4e8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    f4ec:	f57ff04e 	dsb	st
    f4f0:	f57ff06f 	isb	sy
    f4f4:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    f4f8:	e12fff1e 	bx	lr

0000f4fc <CleanAndInvalidateDataCacheRange>:
    f4fc:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    f500:	e1a03823 	lsr	r3, r3, #16
    f504:	e203300f 	and	r3, r3, #15
    f508:	e3a02004 	mov	r2, #4
    f50c:	e1a02312 	lsl	r2, r2, r3
    f510:	e0801001 	add	r1, r0, r1
    f514:	e2423001 	sub	r3, r2, #1
    f518:	e1c00003 	bic	r0, r0, r3
    f51c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    f520:	e0800002 	add	r0, r0, r2
    f524:	e1500001 	cmp	r0, r1
    f528:	3afffffb 	bcc	f51c <CleanAndInvalidateDataCacheRange+0x20>
    f52c:	f57ff04e 	dsb	st
    f530:	e12fff1e 	bx	lr

0000f534 <CPtrList::CPtrList()>:
    f534:	e3a02000 	mov	r2, #0
    f538:	e5802000 	str	r2, [r0]
    f53c:	e12fff1e 	bx	lr

0000f540 <CPtrList::~CPtrList()>:
    f540:	e5903000 	ldr	r3, [r0]
    f544:	e92d4010 	push	{r4, lr}
    f548:	e3530000 	cmp	r3, #0
    f54c:	e1a04000 	mov	r4, r0
    f550:	0a000005 	beq	f56c <CPtrList::~CPtrList()+0x2c>
    f554:	e30215c8 	movw	r1, #9672	; 0x25c8
    f558:	e30205d4 	movw	r0, #9684	; 0x25d4
    f55c:	e3401001 	movt	r1, #1
    f560:	e3400001 	movt	r0, #1
    f564:	e3a0202a 	mov	r2, #42	; 0x2a
    f568:	ebfff26a 	bl	bf18 <assertion_failed>
    f56c:	e1a00004 	mov	r0, r4
    f570:	e8bd8010 	pop	{r4, pc}

0000f574 <CPtrList::GetFirst()>:
    f574:	e5900000 	ldr	r0, [r0]
    f578:	e12fff1e 	bx	lr

0000f57c <CPtrList::GetNext(TPtrListElement*)>:
    f57c:	e92d4010 	push	{r4, lr}
    f580:	e2514000 	subs	r4, r1, #0
    f584:	0a00000c 	beq	f5bc <CPtrList::GetNext(TPtrListElement*)+0x40>
    f588:	e5942000 	ldr	r2, [r4]
    f58c:	e3043d43 	movw	r3, #19779	; 0x4d43
    f590:	e345304c 	movt	r3, #20556	; 0x504c
    f594:	e1520003 	cmp	r2, r3
    f598:	0a000005 	beq	f5b4 <CPtrList::GetNext(TPtrListElement*)+0x38>
    f59c:	e30215c8 	movw	r1, #9672	; 0x25c8
    f5a0:	e30205f4 	movw	r0, #9716	; 0x25f4
    f5a4:	e3401001 	movt	r1, #1
    f5a8:	e3400001 	movt	r0, #1
    f5ac:	e3a02035 	mov	r2, #53	; 0x35
    f5b0:	ebfff258 	bl	bf18 <assertion_failed>
    f5b4:	e5940008 	ldr	r0, [r4, #8]
    f5b8:	e8bd8010 	pop	{r4, pc}
    f5bc:	e30215c8 	movw	r1, #9672	; 0x25c8
    f5c0:	e30205e4 	movw	r0, #9700	; 0x25e4
    f5c4:	e3401001 	movt	r1, #1
    f5c8:	e3400001 	movt	r0, #1
    f5cc:	e3a02034 	mov	r2, #52	; 0x34
    f5d0:	ebfff250 	bl	bf18 <assertion_failed>
    f5d4:	eaffffeb 	b	f588 <CPtrList::GetNext(TPtrListElement*)+0xc>

0000f5d8 <CPtrList::GetPtr(TPtrListElement*)>:
    f5d8:	e92d4010 	push	{r4, lr}
    f5dc:	e2514000 	subs	r4, r1, #0
    f5e0:	0a00000c 	beq	f618 <CPtrList::GetPtr(TPtrListElement*)+0x40>
    f5e4:	e5942000 	ldr	r2, [r4]
    f5e8:	e3043d43 	movw	r3, #19779	; 0x4d43
    f5ec:	e345304c 	movt	r3, #20556	; 0x504c
    f5f0:	e1520003 	cmp	r2, r3
    f5f4:	0a000005 	beq	f610 <CPtrList::GetPtr(TPtrListElement*)+0x38>
    f5f8:	e30215c8 	movw	r1, #9672	; 0x25c8
    f5fc:	e30205f4 	movw	r0, #9716	; 0x25f4
    f600:	e3401001 	movt	r1, #1
    f604:	e3400001 	movt	r0, #1
    f608:	e3a0203d 	mov	r2, #61	; 0x3d
    f60c:	ebfff241 	bl	bf18 <assertion_failed>
    f610:	e594000c 	ldr	r0, [r4, #12]
    f614:	e8bd8010 	pop	{r4, pc}
    f618:	e30215c8 	movw	r1, #9672	; 0x25c8
    f61c:	e30205e4 	movw	r0, #9700	; 0x25e4
    f620:	e3401001 	movt	r1, #1
    f624:	e3400001 	movt	r0, #1
    f628:	e3a0203c 	mov	r2, #60	; 0x3c
    f62c:	ebfff239 	bl	bf18 <assertion_failed>
    f630:	eaffffeb 	b	f5e4 <CPtrList::GetPtr(TPtrListElement*)+0xc>

0000f634 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    f634:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f638:	e1a06000 	mov	r6, r0
    f63c:	e3a00010 	mov	r0, #16
    f640:	e1a04001 	mov	r4, r1
    f644:	e1a07002 	mov	r7, r2
    f648:	ebffe856 	bl	97a8 <operator new(unsigned int)>
    f64c:	e5961000 	ldr	r1, [r6]
    f650:	e3043d43 	movw	r3, #19779	; 0x4d43
    f654:	e345304c 	movt	r3, #20556	; 0x504c
    f658:	e3510000 	cmp	r1, #0
    f65c:	e1a05000 	mov	r5, r0
    f660:	e580700c 	str	r7, [r0, #12]
    f664:	e5803000 	str	r3, [r0]
    f668:	0a000029 	beq	f714 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
    f66c:	e3540000 	cmp	r4, #0
    f670:	0a00002e 	beq	f730 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
    f674:	e5942000 	ldr	r2, [r4]
    f678:	e3043d43 	movw	r3, #19779	; 0x4d43
    f67c:	e345304c 	movt	r3, #20556	; 0x504c
    f680:	e1520003 	cmp	r2, r3
    f684:	0a000005 	beq	f6a0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
    f688:	e30215c8 	movw	r1, #9672	; 0x25c8
    f68c:	e3020634 	movw	r0, #9780	; 0x2634
    f690:	e3401001 	movt	r1, #1
    f694:	e3400001 	movt	r0, #1
    f698:	e3a0204e 	mov	r2, #78	; 0x4e
    f69c:	ebfff21d 	bl	bf18 <assertion_failed>
    f6a0:	e5963000 	ldr	r3, [r6]
    f6a4:	e1540003 	cmp	r4, r3
    f6a8:	0a000013 	beq	f6fc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
    f6ac:	e5943004 	ldr	r3, [r4, #4]
    f6b0:	e5854008 	str	r4, [r5, #8]
    f6b4:	e3530000 	cmp	r3, #0
    f6b8:	e5853004 	str	r3, [r5, #4]
    f6bc:	0a00000c 	beq	f6f4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
    f6c0:	e5931000 	ldr	r1, [r3]
    f6c4:	e3042d43 	movw	r2, #19779	; 0x4d43
    f6c8:	e345204c 	movt	r2, #20556	; 0x504c
    f6cc:	e1510002 	cmp	r1, r2
    f6d0:	0a000006 	beq	f6f0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
    f6d4:	e30215c8 	movw	r1, #9672	; 0x25c8
    f6d8:	e3020658 	movw	r0, #9816	; 0x2658
    f6dc:	e3401001 	movt	r1, #1
    f6e0:	e3400001 	movt	r0, #1
    f6e4:	e3a02060 	mov	r2, #96	; 0x60
    f6e8:	ebfff20a 	bl	bf18 <assertion_failed>
    f6ec:	e5943004 	ldr	r3, [r4, #4]
    f6f0:	e5835008 	str	r5, [r3, #8]
    f6f4:	e5845004 	str	r5, [r4, #4]
    f6f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f6fc:	e5845004 	str	r5, [r4, #4]
    f700:	e3a03000 	mov	r3, #0
    f704:	e5854008 	str	r4, [r5, #8]
    f708:	e5865000 	str	r5, [r6]
    f70c:	e5853004 	str	r3, [r5, #4]
    f710:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f714:	e30215c8 	movw	r1, #9672	; 0x25c8
    f718:	e3020618 	movw	r0, #9752	; 0x2618
    f71c:	e3401001 	movt	r1, #1
    f720:	e3400001 	movt	r0, #1
    f724:	e3a0204c 	mov	r2, #76	; 0x4c
    f728:	ebfff1fa 	bl	bf18 <assertion_failed>
    f72c:	eaffffce 	b	f66c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
    f730:	e30215c8 	movw	r1, #9672	; 0x25c8
    f734:	e3020628 	movw	r0, #9768	; 0x2628
    f738:	e3401001 	movt	r1, #1
    f73c:	e3400001 	movt	r0, #1
    f740:	e3a0204d 	mov	r2, #77	; 0x4d
    f744:	ebfff1f3 	bl	bf18 <assertion_failed>
    f748:	eaffffc9 	b	f674 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

0000f74c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    f74c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f750:	e1a06000 	mov	r6, r0
    f754:	e3a00010 	mov	r0, #16
    f758:	e1a05001 	mov	r5, r1
    f75c:	e1a07002 	mov	r7, r2
    f760:	ebffe810 	bl	97a8 <operator new(unsigned int)>
    f764:	e3550000 	cmp	r5, #0
    f768:	e3043d43 	movw	r3, #19779	; 0x4d43
    f76c:	e345304c 	movt	r3, #20556	; 0x504c
    f770:	e1a04000 	mov	r4, r0
    f774:	e5803000 	str	r3, [r0]
    f778:	e580700c 	str	r7, [r0, #12]
    f77c:	e5963000 	ldr	r3, [r6]
    f780:	0a000020 	beq	f808 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
    f784:	e3530000 	cmp	r3, #0
    f788:	0a00002b 	beq	f83c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
    f78c:	e5952000 	ldr	r2, [r5]
    f790:	e3043d43 	movw	r3, #19779	; 0x4d43
    f794:	e345304c 	movt	r3, #20556	; 0x504c
    f798:	e1520003 	cmp	r2, r3
    f79c:	0a000005 	beq	f7b8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
    f7a0:	e30215c8 	movw	r1, #9672	; 0x25c8
    f7a4:	e3020680 	movw	r0, #9856	; 0x2680
    f7a8:	e3401001 	movt	r1, #1
    f7ac:	e3400001 	movt	r0, #1
    f7b0:	e3a0207e 	mov	r2, #126	; 0x7e
    f7b4:	ebfff1d7 	bl	bf18 <assertion_failed>
    f7b8:	e5953008 	ldr	r3, [r5, #8]
    f7bc:	e5845004 	str	r5, [r4, #4]
    f7c0:	e3530000 	cmp	r3, #0
    f7c4:	e5843008 	str	r3, [r4, #8]
    f7c8:	0a00000c 	beq	f800 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
    f7cc:	e5931000 	ldr	r1, [r3]
    f7d0:	e3042d43 	movw	r2, #19779	; 0x4d43
    f7d4:	e345204c 	movt	r2, #20556	; 0x504c
    f7d8:	e1510002 	cmp	r1, r2
    f7dc:	0a000006 	beq	f7fc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
    f7e0:	e30215c8 	movw	r1, #9672	; 0x25c8
    f7e4:	e30206a4 	movw	r0, #9892	; 0x26a4
    f7e8:	e3401001 	movt	r1, #1
    f7ec:	e3400001 	movt	r0, #1
    f7f0:	e3a02085 	mov	r2, #133	; 0x85
    f7f4:	ebfff1c7 	bl	bf18 <assertion_failed>
    f7f8:	e5953008 	ldr	r3, [r5, #8]
    f7fc:	e5834004 	str	r4, [r3, #4]
    f800:	e5854008 	str	r4, [r5, #8]
    f804:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f808:	e3530000 	cmp	r3, #0
    f80c:	0a000005 	beq	f828 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
    f810:	e30215c8 	movw	r1, #9672	; 0x25c8
    f814:	e30205d4 	movw	r0, #9684	; 0x25d4
    f818:	e3401001 	movt	r1, #1
    f81c:	e3400001 	movt	r0, #1
    f820:	e3a02074 	mov	r2, #116	; 0x74
    f824:	ebfff1bb 	bl	bf18 <assertion_failed>
    f828:	e3a03000 	mov	r3, #0
    f82c:	e5864000 	str	r4, [r6]
    f830:	e5843004 	str	r3, [r4, #4]
    f834:	e5843008 	str	r3, [r4, #8]
    f838:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f83c:	e30215c8 	movw	r1, #9672	; 0x25c8
    f840:	e3020618 	movw	r0, #9752	; 0x2618
    f844:	e3401001 	movt	r1, #1
    f848:	e3400001 	movt	r0, #1
    f84c:	e3a0207d 	mov	r2, #125	; 0x7d
    f850:	ebfff1b0 	bl	bf18 <assertion_failed>
    f854:	eaffffcc 	b	f78c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

0000f858 <CPtrList::Remove(TPtrListElement*)>:
    f858:	e92d4070 	push	{r4, r5, r6, lr}
    f85c:	e2514000 	subs	r4, r1, #0
    f860:	e1a05000 	mov	r5, r0
    f864:	0a000048 	beq	f98c <CPtrList::Remove(TPtrListElement*)+0x134>
    f868:	e5942000 	ldr	r2, [r4]
    f86c:	e3043d43 	movw	r3, #19779	; 0x4d43
    f870:	e345304c 	movt	r3, #20556	; 0x504c
    f874:	e1520003 	cmp	r2, r3
    f878:	0a000005 	beq	f894 <CPtrList::Remove(TPtrListElement*)+0x3c>
    f87c:	e30215c8 	movw	r1, #9672	; 0x25c8
    f880:	e30205f4 	movw	r0, #9716	; 0x25f4
    f884:	e3401001 	movt	r1, #1
    f888:	e3400001 	movt	r0, #1
    f88c:	e3a02090 	mov	r2, #144	; 0x90
    f890:	ebfff1a0 	bl	bf18 <assertion_failed>
    f894:	e5953000 	ldr	r3, [r5]
    f898:	e1540003 	cmp	r4, r3
    f89c:	0a000027 	beq	f940 <CPtrList::Remove(TPtrListElement*)+0xe8>
    f8a0:	e5943004 	ldr	r3, [r4, #4]
    f8a4:	e3530000 	cmp	r3, #0
    f8a8:	0a00003e 	beq	f9a8 <CPtrList::Remove(TPtrListElement*)+0x150>
    f8ac:	e5931000 	ldr	r1, [r3]
    f8b0:	e3042d43 	movw	r2, #19779	; 0x4d43
    f8b4:	e345204c 	movt	r2, #20556	; 0x504c
    f8b8:	e1510002 	cmp	r1, r2
    f8bc:	0a000006 	beq	f8dc <CPtrList::Remove(TPtrListElement*)+0x84>
    f8c0:	e30215c8 	movw	r1, #9672	; 0x25c8
    f8c4:	e3020714 	movw	r0, #10004	; 0x2714
    f8c8:	e3401001 	movt	r1, #1
    f8cc:	e3400001 	movt	r0, #1
    f8d0:	e3a0209f 	mov	r2, #159	; 0x9f
    f8d4:	ebfff18f 	bl	bf18 <assertion_failed>
    f8d8:	e5943004 	ldr	r3, [r4, #4]
    f8dc:	e5942008 	ldr	r2, [r4, #8]
    f8e0:	e5832008 	str	r2, [r3, #8]
    f8e4:	e5942008 	ldr	r2, [r4, #8]
    f8e8:	e3520000 	cmp	r2, #0
    f8ec:	0a00000d 	beq	f928 <CPtrList::Remove(TPtrListElement*)+0xd0>
    f8f0:	e5920000 	ldr	r0, [r2]
    f8f4:	e3041d43 	movw	r1, #19779	; 0x4d43
    f8f8:	e345104c 	movt	r1, #20556	; 0x504c
    f8fc:	e1500001 	cmp	r0, r1
    f900:	0a000007 	beq	f924 <CPtrList::Remove(TPtrListElement*)+0xcc>
    f904:	e3a020a4 	mov	r2, #164	; 0xa4
    f908:	e30215c8 	movw	r1, #9672	; 0x25c8
    f90c:	e30206d0 	movw	r0, #9936	; 0x26d0
    f910:	e3401001 	movt	r1, #1
    f914:	e3400001 	movt	r0, #1
    f918:	ebfff17e 	bl	bf18 <assertion_failed>
    f91c:	e5942008 	ldr	r2, [r4, #8]
    f920:	e5943004 	ldr	r3, [r4, #4]
    f924:	e5823004 	str	r3, [r2, #4]
    f928:	e3a03000 	mov	r3, #0
    f92c:	e1a00004 	mov	r0, r4
    f930:	e5843000 	str	r3, [r4]
    f934:	e3a01010 	mov	r1, #16
    f938:	e8bd4070 	pop	{r4, r5, r6, lr}
    f93c:	eaffe79d 	b	97b8 <operator delete(void*, unsigned int)>
    f940:	e5943008 	ldr	r3, [r4, #8]
    f944:	e3530000 	cmp	r3, #0
    f948:	e5853000 	str	r3, [r5]
    f94c:	0afffff5 	beq	f928 <CPtrList::Remove(TPtrListElement*)+0xd0>
    f950:	e5931000 	ldr	r1, [r3]
    f954:	e3042d43 	movw	r2, #19779	; 0x4d43
    f958:	e345204c 	movt	r2, #20556	; 0x504c
    f95c:	e1510002 	cmp	r1, r2
    f960:	0a000006 	beq	f980 <CPtrList::Remove(TPtrListElement*)+0x128>
    f964:	e30215c8 	movw	r1, #9672	; 0x25c8
    f968:	e30206d0 	movw	r0, #9936	; 0x26d0
    f96c:	e3401001 	movt	r1, #1
    f970:	e3400001 	movt	r0, #1
    f974:	e3a02098 	mov	r2, #152	; 0x98
    f978:	ebfff166 	bl	bf18 <assertion_failed>
    f97c:	e5943008 	ldr	r3, [r4, #8]
    f980:	e3a02000 	mov	r2, #0
    f984:	e5832004 	str	r2, [r3, #4]
    f988:	eaffffe6 	b	f928 <CPtrList::Remove(TPtrListElement*)+0xd0>
    f98c:	e30215c8 	movw	r1, #9672	; 0x25c8
    f990:	e30205e4 	movw	r0, #9700	; 0x25e4
    f994:	e3401001 	movt	r1, #1
    f998:	e3400001 	movt	r0, #1
    f99c:	e3a0208f 	mov	r2, #143	; 0x8f
    f9a0:	ebfff15c 	bl	bf18 <assertion_failed>
    f9a4:	eaffffaf 	b	f868 <CPtrList::Remove(TPtrListElement*)+0x10>
    f9a8:	e30215c8 	movw	r1, #9672	; 0x25c8
    f9ac:	e30206fc 	movw	r0, #9980	; 0x26fc
    f9b0:	e3401001 	movt	r1, #1
    f9b4:	e3400001 	movt	r0, #1
    f9b8:	e3a0209e 	mov	r2, #158	; 0x9e
    f9bc:	ebfff155 	bl	bf18 <assertion_failed>
    f9c0:	e5943004 	ldr	r3, [r4, #4]
    f9c4:	eaffffb8 	b	f8ac <CPtrList::Remove(TPtrListElement*)+0x54>

0000f9c8 <CPtrList::Find(void*)>:
    f9c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f9cc:	e5904000 	ldr	r4, [r0]
    f9d0:	e3540000 	cmp	r4, #0
    f9d4:	0a000016 	beq	fa34 <CPtrList::Find(void*)+0x6c>
    f9d8:	e3048d43 	movw	r8, #19779	; 0x4d43
    f9dc:	e30275c8 	movw	r7, #9672	; 0x25c8
    f9e0:	e30265f4 	movw	r6, #9716	; 0x25f4
    f9e4:	e1a05001 	mov	r5, r1
    f9e8:	e345804c 	movt	r8, #20556	; 0x504c
    f9ec:	e3407001 	movt	r7, #1
    f9f0:	e3406001 	movt	r6, #1
    f9f4:	ea000002 	b	fa04 <CPtrList::Find(void*)+0x3c>
    f9f8:	e5944008 	ldr	r4, [r4, #8]
    f9fc:	e3540000 	cmp	r4, #0
    fa00:	0a00000b 	beq	fa34 <CPtrList::Find(void*)+0x6c>
    fa04:	e5943000 	ldr	r3, [r4]
    fa08:	e3a020b3 	mov	r2, #179	; 0xb3
    fa0c:	e1a01007 	mov	r1, r7
    fa10:	e1a00006 	mov	r0, r6
    fa14:	e1530008 	cmp	r3, r8
    fa18:	0a000000 	beq	fa20 <CPtrList::Find(void*)+0x58>
    fa1c:	ebfff13d 	bl	bf18 <assertion_failed>
    fa20:	e594300c 	ldr	r3, [r4, #12]
    fa24:	e1530005 	cmp	r3, r5
    fa28:	1afffff2 	bne	f9f8 <CPtrList::Find(void*)+0x30>
    fa2c:	e1a00004 	mov	r0, r4
    fa30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fa34:	e3a04000 	mov	r4, #0
    fa38:	e1a00004 	mov	r0, r4
    fa3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000fa40 <mem_init>:
    fa40:	e0801001 	add	r1, r0, r1
    fa44:	e30229b8 	movw	r2, #10680	; 0x29b8
    fa48:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    fa4c:	e3402001 	movt	r2, #1
    fa50:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    fa54:	e3500605 	cmp	r0, #5242880	; 0x500000
    fa58:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    fa5c:	e582100c 	str	r1, [r2, #12]
    fa60:	33a00605 	movcc	r0, #5242880	; 0x500000
    fa64:	e2411501 	sub	r1, r1, #4194304	; 0x400000
    fa68:	e3c3300f 	bic	r3, r3, #15
    fa6c:	e5820000 	str	r0, [r2]
    fa70:	e982000a 	stmib	r2, {r1, r3}
    fa74:	e12fff1e 	bx	lr

0000fa78 <mem_get_size>:
    fa78:	e30239b8 	movw	r3, #10680	; 0x29b8
    fa7c:	e3403001 	movt	r3, #1
    fa80:	e5930004 	ldr	r0, [r3, #4]
    fa84:	e5931000 	ldr	r1, [r3]
    fa88:	e593200c 	ldr	r2, [r3, #12]
    fa8c:	e5933008 	ldr	r3, [r3, #8]
    fa90:	e0400001 	sub	r0, r0, r1
    fa94:	e0423003 	sub	r3, r2, r3
    fa98:	e0800003 	add	r0, r0, r3
    fa9c:	e12fff1e 	bx	lr

0000faa0 <malloc>:
    faa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    faa4:	e30279b8 	movw	r7, #10680	; 0x29b8
    faa8:	e3407001 	movt	r7, #1
    faac:	e1a05000 	mov	r5, r0
    fab0:	e5973000 	ldr	r3, [r7]
    fab4:	e3530000 	cmp	r3, #0
    fab8:	0a000053 	beq	fc0c <malloc+0x16c>
    fabc:	e5970010 	ldr	r0, [r7, #16]
    fac0:	e3500000 	cmp	r0, #0
    fac4:	1a00004b 	bne	fbf8 <malloc+0x158>
    fac8:	e302488c 	movw	r4, #10380	; 0x288c
    facc:	e3404001 	movt	r4, #1
    fad0:	e5943000 	ldr	r3, [r4]
    fad4:	e3530000 	cmp	r3, #0
    fad8:	0a000007 	beq	fafc <malloc+0x5c>
    fadc:	e1550003 	cmp	r5, r3
    fae0:	8a000002 	bhi	faf0 <malloc+0x50>
    fae4:	ea000011 	b	fb30 <malloc+0x90>
    fae8:	e1530005 	cmp	r3, r5
    faec:	2a00000f 	bcs	fb30 <malloc+0x90>
    faf0:	e5b43008 	ldr	r3, [r4, #8]!
    faf4:	e3530000 	cmp	r3, #0
    faf8:	1afffffa 	bne	fae8 <malloc+0x48>
    fafc:	e5976000 	ldr	r6, [r7]
    fb00:	e285301f 	add	r3, r5, #31
    fb04:	e3c3300f 	bic	r3, r3, #15
    fb08:	e5972004 	ldr	r2, [r7, #4]
    fb0c:	e0863003 	add	r3, r6, r3
    fb10:	e5873000 	str	r3, [r7]
    fb14:	e1530002 	cmp	r3, r2
    fb18:	9a000028 	bls	fbc0 <malloc+0x120>
    fb1c:	e5974010 	ldr	r4, [r7, #16]
    fb20:	e3540000 	cmp	r4, #0
    fb24:	1a000035 	bne	fc00 <malloc+0x160>
    fb28:	e1a00004 	mov	r0, r4
    fb2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fb30:	e5946004 	ldr	r6, [r4, #4]
    fb34:	e3560000 	cmp	r6, #0
    fb38:	01a05003 	moveq	r5, r3
    fb3c:	0affffee 	beq	fafc <malloc+0x5c>
    fb40:	e5962000 	ldr	r2, [r6]
    fb44:	e3043d43 	movw	r3, #19779	; 0x4d43
    fb48:	e344324c 	movt	r3, #16972	; 0x424c
    fb4c:	e1520003 	cmp	r2, r3
    fb50:	0a000005 	beq	fb6c <malloc+0xcc>
    fb54:	e3021740 	movw	r1, #10048	; 0x2740
    fb58:	e3020760 	movw	r0, #10080	; 0x2760
    fb5c:	e3401001 	movt	r1, #1
    fb60:	e3400001 	movt	r0, #1
    fb64:	e3a02089 	mov	r2, #137	; 0x89
    fb68:	ebfff0ea 	bl	bf18 <assertion_failed>
    fb6c:	e5963008 	ldr	r3, [r6, #8]
    fb70:	e5843004 	str	r3, [r4, #4]
    fb74:	e5973010 	ldr	r3, [r7, #16]
    fb78:	e3530000 	cmp	r3, #0
    fb7c:	1a00001b 	bne	fbf0 <malloc+0x150>
    fb80:	e2864010 	add	r4, r6, #16
    fb84:	e3a03000 	mov	r3, #0
    fb88:	e314000f 	tst	r4, #15
    fb8c:	e5c63008 	strb	r3, [r6, #8]
    fb90:	e5c63009 	strb	r3, [r6, #9]
    fb94:	e5c6300a 	strb	r3, [r6, #10]
    fb98:	e5c6300b 	strb	r3, [r6, #11]
    fb9c:	0affffe1 	beq	fb28 <malloc+0x88>
    fba0:	e3a020a1 	mov	r2, #161	; 0xa1
    fba4:	e3021740 	movw	r1, #10048	; 0x2740
    fba8:	e3020784 	movw	r0, #10116	; 0x2784
    fbac:	e3401001 	movt	r1, #1
    fbb0:	e3400001 	movt	r0, #1
    fbb4:	ebfff0d7 	bl	bf18 <assertion_failed>
    fbb8:	e1a00004 	mov	r0, r4
    fbbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fbc0:	e3a0304d 	mov	r3, #77	; 0x4d
    fbc4:	e5c63001 	strb	r3, [r6, #1]
    fbc8:	e3a03042 	mov	r3, #66	; 0x42
    fbcc:	e5c63003 	strb	r3, [r6, #3]
    fbd0:	e5973010 	ldr	r3, [r7, #16]
    fbd4:	e3a02043 	mov	r2, #67	; 0x43
    fbd8:	e5865004 	str	r5, [r6, #4]
    fbdc:	e3530000 	cmp	r3, #0
    fbe0:	e5c62000 	strb	r2, [r6]
    fbe4:	e3a0204c 	mov	r2, #76	; 0x4c
    fbe8:	e5c62002 	strb	r2, [r6, #2]
    fbec:	0affffe3 	beq	fb80 <malloc+0xe0>
    fbf0:	ebffe720 	bl	9878 <LeaveCritical>
    fbf4:	eaffffe1 	b	fb80 <malloc+0xe0>
    fbf8:	ebffe6f0 	bl	97c0 <EnterCritical>
    fbfc:	eaffffb1 	b	fac8 <malloc+0x28>
    fc00:	ebffe71c 	bl	9878 <LeaveCritical>
    fc04:	e3a04000 	mov	r4, #0
    fc08:	eaffffc6 	b	fb28 <malloc+0x88>
    fc0c:	e3021740 	movw	r1, #10048	; 0x2740
    fc10:	e302074c 	movw	r0, #10060	; 0x274c
    fc14:	e3401001 	movt	r1, #1
    fc18:	e3400001 	movt	r0, #1
    fc1c:	e3a0206f 	mov	r2, #111	; 0x6f
    fc20:	ebfff0bc 	bl	bf18 <assertion_failed>
    fc24:	eaffffa4 	b	fabc <malloc+0x1c>

0000fc28 <free>:
    fc28:	e92d4070 	push	{r4, r5, r6, lr}
    fc2c:	e2505000 	subs	r5, r0, #0
    fc30:	08bd8070 	popeq	{r4, r5, r6, pc}
    fc34:	e5352010 	ldr	r2, [r5, #-16]!
    fc38:	e3043d43 	movw	r3, #19779	; 0x4d43
    fc3c:	e344324c 	movt	r3, #16972	; 0x424c
    fc40:	e1520003 	cmp	r2, r3
    fc44:	0a000005 	beq	fc60 <free+0x38>
    fc48:	e3021740 	movw	r1, #10048	; 0x2740
    fc4c:	e3020760 	movw	r0, #10080	; 0x2760
    fc50:	e3401001 	movt	r1, #1
    fc54:	e3400001 	movt	r0, #1
    fc58:	e3a020ae 	mov	r2, #174	; 0xae
    fc5c:	ebfff0ad 	bl	bf18 <assertion_failed>
    fc60:	e302488c 	movw	r4, #10380	; 0x288c
    fc64:	e3404001 	movt	r4, #1
    fc68:	e5943000 	ldr	r3, [r4]
    fc6c:	e3530000 	cmp	r3, #0
    fc70:	08bd8070 	popeq	{r4, r5, r6, pc}
    fc74:	e5952004 	ldr	r2, [r5, #4]
    fc78:	e1520003 	cmp	r2, r3
    fc7c:	1a000002 	bne	fc8c <free+0x64>
    fc80:	ea000005 	b	fc9c <free+0x74>
    fc84:	e1530002 	cmp	r3, r2
    fc88:	0a000003 	beq	fc9c <free+0x74>
    fc8c:	e5b43008 	ldr	r3, [r4, #8]!
    fc90:	e3530000 	cmp	r3, #0
    fc94:	1afffffa 	bne	fc84 <free+0x5c>
    fc98:	e8bd8070 	pop	{r4, r5, r6, pc}
    fc9c:	e30269b8 	movw	r6, #10680	; 0x29b8
    fca0:	e3406001 	movt	r6, #1
    fca4:	e5960010 	ldr	r0, [r6, #16]
    fca8:	e3500000 	cmp	r0, #0
    fcac:	1a000003 	bne	fcc0 <free+0x98>
    fcb0:	e5943004 	ldr	r3, [r4, #4]
    fcb4:	e5853008 	str	r3, [r5, #8]
    fcb8:	e5845004 	str	r5, [r4, #4]
    fcbc:	e8bd8070 	pop	{r4, r5, r6, pc}
    fcc0:	ebffe6be 	bl	97c0 <EnterCritical>
    fcc4:	e5962010 	ldr	r2, [r6, #16]
    fcc8:	e5943004 	ldr	r3, [r4, #4]
    fccc:	e3520000 	cmp	r2, #0
    fcd0:	e5853008 	str	r3, [r5, #8]
    fcd4:	e5845004 	str	r5, [r4, #4]
    fcd8:	08bd8070 	popeq	{r4, r5, r6, pc}
    fcdc:	e8bd4070 	pop	{r4, r5, r6, lr}
    fce0:	eaffe6e4 	b	9878 <LeaveCritical>

0000fce4 <palloc>:
    fce4:	e92d4070 	push	{r4, r5, r6, lr}
    fce8:	e30249b8 	movw	r4, #10680	; 0x29b8
    fcec:	e3404001 	movt	r4, #1
    fcf0:	e5943008 	ldr	r3, [r4, #8]
    fcf4:	e3530000 	cmp	r3, #0
    fcf8:	0a00002c 	beq	fdb0 <palloc+0xcc>
    fcfc:	e5940014 	ldr	r0, [r4, #20]
    fd00:	e3500000 	cmp	r0, #0
    fd04:	1a000019 	bne	fd70 <palloc+0x8c>
    fd08:	e5945018 	ldr	r5, [r4, #24]
    fd0c:	e3550000 	cmp	r5, #0
    fd10:	0a00001a 	beq	fd80 <palloc+0x9c>
    fd14:	e5952000 	ldr	r2, [r5]
    fd18:	e3043d43 	movw	r3, #19779	; 0x4d43
    fd1c:	e3453047 	movt	r3, #20551	; 0x5047
    fd20:	e1520003 	cmp	r2, r3
    fd24:	0a000005 	beq	fd40 <palloc+0x5c>
    fd28:	e3021740 	movw	r1, #10048	; 0x2740
    fd2c:	e30207c4 	movw	r0, #10180	; 0x27c4
    fd30:	e3401001 	movt	r1, #1
    fd34:	e3400001 	movt	r0, #1
    fd38:	e3a020d4 	mov	r2, #212	; 0xd4
    fd3c:	ebfff075 	bl	bf18 <assertion_failed>
    fd40:	e5953004 	ldr	r3, [r5, #4]
    fd44:	e3a02000 	mov	r2, #0
    fd48:	e5852000 	str	r2, [r5]
    fd4c:	e5843018 	str	r3, [r4, #24]
    fd50:	e5943014 	ldr	r3, [r4, #20]
    fd54:	e3530000 	cmp	r3, #0
    fd58:	1a000001 	bne	fd64 <palloc+0x80>
    fd5c:	e1a00005 	mov	r0, r5
    fd60:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd64:	ebffe6c3 	bl	9878 <LeaveCritical>
    fd68:	e1a00005 	mov	r0, r5
    fd6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd70:	ebffe692 	bl	97c0 <EnterCritical>
    fd74:	e5945018 	ldr	r5, [r4, #24]
    fd78:	e3550000 	cmp	r5, #0
    fd7c:	1affffe4 	bne	fd14 <palloc+0x30>
    fd80:	e5945008 	ldr	r5, [r4, #8]
    fd84:	e594200c 	ldr	r2, [r4, #12]
    fd88:	e2853a01 	add	r3, r5, #4096	; 0x1000
    fd8c:	e5843008 	str	r3, [r4, #8]
    fd90:	e1530002 	cmp	r3, r2
    fd94:	9affffed 	bls	fd50 <palloc+0x6c>
    fd98:	e5945014 	ldr	r5, [r4, #20]
    fd9c:	e3550000 	cmp	r5, #0
    fda0:	0affffed 	beq	fd5c <palloc+0x78>
    fda4:	ebffe6b3 	bl	9878 <LeaveCritical>
    fda8:	e3a00000 	mov	r0, #0
    fdac:	e8bd8070 	pop	{r4, r5, r6, pc}
    fdb0:	e3021740 	movw	r1, #10048	; 0x2740
    fdb4:	e30207b0 	movw	r0, #10160	; 0x27b0
    fdb8:	e3401001 	movt	r1, #1
    fdbc:	e3400001 	movt	r0, #1
    fdc0:	e3a020c6 	mov	r2, #198	; 0xc6
    fdc4:	ebfff053 	bl	bf18 <assertion_failed>
    fdc8:	eaffffcb 	b	fcfc <palloc+0x18>

0000fdcc <pfree>:
    fdcc:	e92d4070 	push	{r4, r5, r6, lr}
    fdd0:	e2505000 	subs	r5, r0, #0
    fdd4:	08bd8070 	popeq	{r4, r5, r6, pc}
    fdd8:	e30249b8 	movw	r4, #10680	; 0x29b8
    fddc:	e3404001 	movt	r4, #1
    fde0:	e5940014 	ldr	r0, [r4, #20]
    fde4:	e3500000 	cmp	r0, #0
    fde8:	1a000006 	bne	fe08 <pfree+0x3c>
    fdec:	e5941018 	ldr	r1, [r4, #24]
    fdf0:	e3042d43 	movw	r2, #19779	; 0x4d43
    fdf4:	e5845018 	str	r5, [r4, #24]
    fdf8:	e3452047 	movt	r2, #20551	; 0x5047
    fdfc:	e5852000 	str	r2, [r5]
    fe00:	e5851004 	str	r1, [r5, #4]
    fe04:	e8bd8070 	pop	{r4, r5, r6, pc}
    fe08:	ebffe66c 	bl	97c0 <EnterCritical>
    fe0c:	e5941014 	ldr	r1, [r4, #20]
    fe10:	e5942018 	ldr	r2, [r4, #24]
    fe14:	e3043d43 	movw	r3, #19779	; 0x4d43
    fe18:	e3510000 	cmp	r1, #0
    fe1c:	e3453047 	movt	r3, #20551	; 0x5047
    fe20:	e5845018 	str	r5, [r4, #24]
    fe24:	e5853000 	str	r3, [r5]
    fe28:	e5852004 	str	r2, [r5, #4]
    fe2c:	08bd8070 	popeq	{r4, r5, r6, pc}
    fe30:	e8bd4070 	pop	{r4, r5, r6, lr}
    fe34:	eaffe68f 	b	9878 <LeaveCritical>

0000fe38 <_GLOBAL__sub_I_mem_init>:
    fe38:	e30239b8 	movw	r3, #10680	; 0x29b8
    fe3c:	e3403001 	movt	r3, #1
    fe40:	e3a02001 	mov	r2, #1
    fe44:	e5832010 	str	r2, [r3, #16]
    fe48:	e5832014 	str	r2, [r3, #20]
    fe4c:	e12fff1e 	bx	lr

0000fe50 <CBcmMailBox::CBcmMailBox(unsigned int)>:
    fe50:	e3a02000 	mov	r2, #0
    fe54:	e8800006 	stm	r0, {r1, r2}
    fe58:	e12fff1e 	bx	lr

0000fe5c <CBcmMailBox::~CBcmMailBox()>:
    fe5c:	e12fff1e 	bx	lr

0000fe60 <CBcmMailBox::Flush()>:
    fe60:	e92d4010 	push	{r4, lr}
    fe64:	e3a04a0b 	mov	r4, #45056	; 0xb000
    fe68:	e3434f00 	movt	r4, #16128	; 0x3f00
    fe6c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    fe70:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fe74:	18bd8010 	popne	{r4, pc}
    fe78:	e3a00014 	mov	r0, #20
    fe7c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    fe80:	ebffe95e 	bl	a400 <CTimer::SimpleMsDelay(unsigned int)>
    fe84:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    fe88:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fe8c:	0afffff9 	beq	fe78 <CBcmMailBox::Flush()+0x18>
    fe90:	e8bd8010 	pop	{r4, pc}

0000fe94 <CBcmMailBox::Read()>:
    fe94:	e5901000 	ldr	r1, [r0]
    fe98:	e3a02a0b 	mov	r2, #45056	; 0xb000
    fe9c:	e3432f00 	movt	r2, #16128	; 0x3f00
    fea0:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    fea4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    fea8:	1afffffc 	bne	fea0 <CBcmMailBox::Read()+0xc>
    feac:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    feb0:	e200300f 	and	r3, r0, #15
    feb4:	e1510003 	cmp	r1, r3
    feb8:	1afffff8 	bne	fea0 <CBcmMailBox::Read()+0xc>
    febc:	e3c0000f 	bic	r0, r0, #15
    fec0:	e12fff1e 	bx	lr

0000fec4 <CBcmMailBox::Write(unsigned int)>:
    fec4:	e3a02a0b 	mov	r2, #45056	; 0xb000
    fec8:	e3432f00 	movt	r2, #16128	; 0x3f00
    fecc:	e92d4070 	push	{r4, r5, r6, lr}
    fed0:	e1a05000 	mov	r5, r0
    fed4:	e1a04001 	mov	r4, r1
    fed8:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    fedc:	e3530000 	cmp	r3, #0
    fee0:	bafffffc 	blt	fed8 <CBcmMailBox::Write(unsigned int)+0x14>
    fee4:	e314000f 	tst	r4, #15
    fee8:	0a000005 	beq	ff04 <CBcmMailBox::Write(unsigned int)+0x40>
    feec:	e30217e8 	movw	r1, #10216	; 0x27e8
    fef0:	e30207f8 	movw	r0, #10232	; 0x27f8
    fef4:	e3401001 	movt	r1, #1
    fef8:	e3400001 	movt	r0, #1
    fefc:	e3a0205a 	mov	r2, #90	; 0x5a
    ff00:	ebfff004 	bl	bf18 <assertion_failed>
    ff04:	e5952000 	ldr	r2, [r5]
    ff08:	e3a03a0b 	mov	r3, #45056	; 0xb000
    ff0c:	e3433f00 	movt	r3, #16128	; 0x3f00
    ff10:	e1844002 	orr	r4, r4, r2
    ff14:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
    ff18:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ff1c <CBcmMailBox::WriteRead(unsigned int)>:
    ff1c:	e92d4070 	push	{r4, r5, r6, lr}
    ff20:	e1a05000 	mov	r5, r0
    ff24:	e5900004 	ldr	r0, [r0, #4]
    ff28:	e1a06001 	mov	r6, r1
    ff2c:	e3500000 	cmp	r0, #0
    ff30:	1a00001e 	bne	ffb0 <CBcmMailBox::WriteRead(unsigned int)+0x94>
    ff34:	e3a04a0b 	mov	r4, #45056	; 0xb000
    ff38:	e3434f00 	movt	r4, #16128	; 0x3f00
    ff3c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    ff40:	e3130101 	tst	r3, #1073741824	; 0x40000000
    ff44:	1a000005 	bne	ff60 <CBcmMailBox::WriteRead(unsigned int)+0x44>
    ff48:	e3a00014 	mov	r0, #20
    ff4c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    ff50:	ebffe92a 	bl	a400 <CTimer::SimpleMsDelay(unsigned int)>
    ff54:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    ff58:	e3130101 	tst	r3, #1073741824	; 0x40000000
    ff5c:	0afffff9 	beq	ff48 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
    ff60:	e1a00005 	mov	r0, r5
    ff64:	e1a01006 	mov	r1, r6
    ff68:	ebffffd5 	bl	fec4 <CBcmMailBox::Write(unsigned int)>
    ff6c:	e5950000 	ldr	r0, [r5]
    ff70:	e3a02a0b 	mov	r2, #45056	; 0xb000
    ff74:	e3432f00 	movt	r2, #16128	; 0x3f00
    ff78:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    ff7c:	e3130101 	tst	r3, #1073741824	; 0x40000000
    ff80:	1afffffc 	bne	ff78 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    ff84:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    ff88:	e203100f 	and	r1, r3, #15
    ff8c:	e1510000 	cmp	r1, r0
    ff90:	1afffff8 	bne	ff78 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    ff94:	e5952004 	ldr	r2, [r5, #4]
    ff98:	e3c3400f 	bic	r4, r3, #15
    ff9c:	e3520000 	cmp	r2, #0
    ffa0:	0a000000 	beq	ffa8 <CBcmMailBox::WriteRead(unsigned int)+0x8c>
    ffa4:	ebffe633 	bl	9878 <LeaveCritical>
    ffa8:	e1a00004 	mov	r0, r4
    ffac:	e8bd8070 	pop	{r4, r5, r6, pc}
    ffb0:	ebffe602 	bl	97c0 <EnterCritical>
    ffb4:	eaffffde 	b	ff34 <CBcmMailBox::WriteRead(unsigned int)+0x18>

0000ffb8 <__aeabi_uidiv>:
    ffb8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ffbc:	e3a02000 	mov	r2, #0
    ffc0:	eb000220 	bl	10848 <__Divide>
    ffc4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ffc8 <__aeabi_uidivmod>:
    ffc8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ffcc:	e24dd00c 	sub	sp, sp, #12
    ffd0:	e28d2004 	add	r2, sp, #4
    ffd4:	eb00021b 	bl	10848 <__Divide>
    ffd8:	e59d1004 	ldr	r1, [sp, #4]
    ffdc:	e28dd00c 	add	sp, sp, #12
    ffe0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ffe4 <__aeabi_idiv>:
    ffe4:	ea00024a 	b	10914 <__DivideInteger>

0000ffe8 <memset>:
    ffe8:	e3520000 	cmp	r2, #0
    ffec:	012fff1e 	bxeq	lr
    fff0:	e6af1071 	sxtb	r1, r1
    fff4:	e0802002 	add	r2, r0, r2
    fff8:	e1a03000 	mov	r3, r0
    fffc:	e4c31001 	strb	r1, [r3], #1
   10000:	e1530002 	cmp	r3, r2
   10004:	1afffffc 	bne	fffc <memset+0x14>
   10008:	e12fff1e 	bx	lr

0001000c <memcmp>:
   1000c:	e3520000 	cmp	r2, #0
   10010:	0a00000e 	beq	10050 <memcmp+0x44>
   10014:	e5d0c000 	ldrb	ip, [r0]
   10018:	e5d13000 	ldrb	r3, [r1]
   1001c:	e15c0003 	cmp	ip, r3
   10020:	ca00000c 	bgt	10058 <memcmp+0x4c>
   10024:	ba00000d 	blt	10060 <memcmp+0x54>
   10028:	e0812002 	add	r2, r1, r2
   1002c:	e2811001 	add	r1, r1, #1
   10030:	ea000004 	b	10048 <memcmp+0x3c>
   10034:	e5f0c001 	ldrb	ip, [r0, #1]!
   10038:	e4d13001 	ldrb	r3, [r1], #1
   1003c:	e15c0003 	cmp	ip, r3
   10040:	ca000004 	bgt	10058 <memcmp+0x4c>
   10044:	ba000005 	blt	10060 <memcmp+0x54>
   10048:	e1510002 	cmp	r1, r2
   1004c:	1afffff8 	bne	10034 <memcmp+0x28>
   10050:	e3a00000 	mov	r0, #0
   10054:	e12fff1e 	bx	lr
   10058:	e3a00001 	mov	r0, #1
   1005c:	e12fff1e 	bx	lr
   10060:	e3e00000 	mvn	r0, #0
   10064:	e12fff1e 	bx	lr

00010068 <strlen>:
   10068:	e1d010d0 	ldrsb	r1, [r0]
   1006c:	e2803001 	add	r3, r0, #1
   10070:	e3510000 	cmp	r1, #0
   10074:	0a000003 	beq	10088 <strlen+0x20>
   10078:	e0431000 	sub	r1, r3, r0
   1007c:	e0d320d1 	ldrsb	r2, [r3], #1
   10080:	e3520000 	cmp	r2, #0
   10084:	1afffffb 	bne	10078 <strlen+0x10>
   10088:	e1a00001 	mov	r0, r1
   1008c:	e12fff1e 	bx	lr

00010090 <strcmp>:
   10090:	e1d030d0 	ldrsb	r3, [r0]
   10094:	e1d120d0 	ldrsb	r2, [r1]
   10098:	e3530000 	cmp	r3, #0
   1009c:	1a000007 	bne	100c0 <strcmp+0x30>
   100a0:	ea000008 	b	100c8 <strcmp+0x38>
   100a4:	e1530002 	cmp	r3, r2
   100a8:	ca00000b 	bgt	100dc <strcmp+0x4c>
   100ac:	ba00000c 	blt	100e4 <strcmp+0x54>
   100b0:	e1f030d1 	ldrsb	r3, [r0, #1]!
   100b4:	e3530000 	cmp	r3, #0
   100b8:	0a00000b 	beq	100ec <strcmp+0x5c>
   100bc:	e1f120d1 	ldrsb	r2, [r1, #1]!
   100c0:	e3520000 	cmp	r2, #0
   100c4:	1afffff6 	bne	100a4 <strcmp+0x14>
   100c8:	e1530002 	cmp	r3, r2
   100cc:	ca000002 	bgt	100dc <strcmp+0x4c>
   100d0:	b3e00000 	mvnlt	r0, #0
   100d4:	a3a00000 	movge	r0, #0
   100d8:	e12fff1e 	bx	lr
   100dc:	e3a00001 	mov	r0, #1
   100e0:	e12fff1e 	bx	lr
   100e4:	e3e00000 	mvn	r0, #0
   100e8:	e12fff1e 	bx	lr
   100ec:	e1d120d1 	ldrsb	r2, [r1, #1]
   100f0:	e1530002 	cmp	r3, r2
   100f4:	dafffff5 	ble	100d0 <strcmp+0x40>
   100f8:	eafffff7 	b	100dc <strcmp+0x4c>

000100fc <strcpy>:
   100fc:	e1d130d0 	ldrsb	r3, [r1]
   10100:	e1a02000 	mov	r2, r0
   10104:	e3530000 	cmp	r3, #0
   10108:	0a000003 	beq	1011c <strcpy+0x20>
   1010c:	e4c23001 	strb	r3, [r2], #1
   10110:	e1f130d1 	ldrsb	r3, [r1, #1]!
   10114:	e3530000 	cmp	r3, #0
   10118:	1afffffb 	bne	1010c <strcpy+0x10>
   1011c:	e3a03000 	mov	r3, #0
   10120:	e5c23000 	strb	r3, [r2]
   10124:	e12fff1e 	bx	lr

00010128 <strncpy>:
   10128:	e3520000 	cmp	r2, #0
   1012c:	012fff1e 	bxeq	lr
   10130:	e1d1c0d0 	ldrsb	ip, [r1]
   10134:	e35c0000 	cmp	ip, #0
   10138:	0a000009 	beq	10164 <strncpy+0x3c>
   1013c:	e0802002 	add	r2, r0, r2
   10140:	e1a03000 	mov	r3, r0
   10144:	ea000002 	b	10154 <strncpy+0x2c>
   10148:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   1014c:	e35c0000 	cmp	ip, #0
   10150:	0a000004 	beq	10168 <strncpy+0x40>
   10154:	e4c3c001 	strb	ip, [r3], #1
   10158:	e1530002 	cmp	r3, r2
   1015c:	1afffff9 	bne	10148 <strncpy+0x20>
   10160:	e12fff1e 	bx	lr
   10164:	e1a03000 	mov	r3, r0
   10168:	e3a02000 	mov	r2, #0
   1016c:	e5c32000 	strb	r2, [r3]
   10170:	e12fff1e 	bx	lr

00010174 <strcat>:
   10174:	e1d030d0 	ldrsb	r3, [r0]
   10178:	e3530000 	cmp	r3, #0
   1017c:	e1a03000 	mov	r3, r0
   10180:	0a000002 	beq	10190 <strcat+0x1c>
   10184:	e1f320d1 	ldrsb	r2, [r3, #1]!
   10188:	e3520000 	cmp	r2, #0
   1018c:	1afffffc 	bne	10184 <strcat+0x10>
   10190:	e1d120d0 	ldrsb	r2, [r1]
   10194:	e3520000 	cmp	r2, #0
   10198:	0a000003 	beq	101ac <strcat+0x38>
   1019c:	e4c32001 	strb	r2, [r3], #1
   101a0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   101a4:	e3520000 	cmp	r2, #0
   101a8:	1afffffb 	bne	1019c <strcat+0x28>
   101ac:	e3a02000 	mov	r2, #0
   101b0:	e5c32000 	strb	r2, [r3]
   101b4:	e12fff1e 	bx	lr

000101b8 <strchr>:
   101b8:	e1d020d0 	ldrsb	r2, [r0]
   101bc:	e3520000 	cmp	r2, #0
   101c0:	0a000009 	beq	101ec <strchr+0x34>
   101c4:	e1510002 	cmp	r1, r2
   101c8:	1a000002 	bne	101d8 <strchr+0x20>
   101cc:	ea000008 	b	101f4 <strchr+0x3c>
   101d0:	e1530001 	cmp	r3, r1
   101d4:	012fff1e 	bxeq	lr
   101d8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   101dc:	e3530000 	cmp	r3, #0
   101e0:	1afffffa 	bne	101d0 <strchr+0x18>
   101e4:	e1a00003 	mov	r0, r3
   101e8:	e12fff1e 	bx	lr
   101ec:	e1a00002 	mov	r0, r2
   101f0:	e12fff1e 	bx	lr
   101f4:	e12fff1e 	bx	lr

000101f8 <strtok_r>:
   101f8:	e3500000 	cmp	r0, #0
   101fc:	0a00002c 	beq	102b4 <strtok_r+0xbc>
   10200:	e92d4030 	push	{r4, r5, lr}
   10204:	e1d0e0d0 	ldrsb	lr, [r0]
   10208:	e35e0000 	cmp	lr, #0
   1020c:	11d140d0 	ldrsbne	r4, [r1]
   10210:	0a000024 	beq	102a8 <strtok_r+0xb0>
   10214:	e3540000 	cmp	r4, #0
   10218:	0a000008 	beq	10240 <strtok_r+0x48>
   1021c:	e15e0004 	cmp	lr, r4
   10220:	0a000019 	beq	1028c <strtok_r+0x94>
   10224:	e1a0c001 	mov	ip, r1
   10228:	ea000001 	b	10234 <strtok_r+0x3c>
   1022c:	e15e0003 	cmp	lr, r3
   10230:	0a000015 	beq	1028c <strtok_r+0x94>
   10234:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   10238:	e3530000 	cmp	r3, #0
   1023c:	1afffffa 	bne	1022c <strtok_r+0x34>
   10240:	e35e0000 	cmp	lr, #0
   10244:	0a000017 	beq	102a8 <strtok_r+0xb0>
   10248:	e1a05000 	mov	r5, r0
   1024c:	e3540000 	cmp	r4, #0
   10250:	0a000008 	beq	10278 <strtok_r+0x80>
   10254:	e15e0004 	cmp	lr, r4
   10258:	0a00000d 	beq	10294 <strtok_r+0x9c>
   1025c:	e1a0c001 	mov	ip, r1
   10260:	ea000001 	b	1026c <strtok_r+0x74>
   10264:	e15e0003 	cmp	lr, r3
   10268:	0a000009 	beq	10294 <strtok_r+0x9c>
   1026c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   10270:	e3530000 	cmp	r3, #0
   10274:	1afffffa 	bne	10264 <strtok_r+0x6c>
   10278:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   1027c:	e35e0000 	cmp	lr, #0
   10280:	1afffff1 	bne	1024c <strtok_r+0x54>
   10284:	e5825000 	str	r5, [r2]
   10288:	e8bd8030 	pop	{r4, r5, pc}
   1028c:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   10290:	eaffffdf 	b	10214 <strtok_r+0x1c>
   10294:	e3a03000 	mov	r3, #0
   10298:	e2855001 	add	r5, r5, #1
   1029c:	e5453001 	strb	r3, [r5, #-1]
   102a0:	e5825000 	str	r5, [r2]
   102a4:	e8bd8030 	pop	{r4, r5, pc}
   102a8:	e3a00000 	mov	r0, #0
   102ac:	e5820000 	str	r0, [r2]
   102b0:	e8bd8030 	pop	{r4, r5, pc}
   102b4:	e5920000 	ldr	r0, [r2]
   102b8:	e3500000 	cmp	r0, #0
   102bc:	1affffcf 	bne	10200 <strtok_r+0x8>
   102c0:	e12fff1e 	bx	lr

000102c4 <strtoul>:
   102c4:	e3510000 	cmp	r1, #0
   102c8:	e92d4070 	push	{r4, r5, r6, lr}
   102cc:	e2425002 	sub	r5, r2, #2
   102d0:	15810000 	strne	r0, [r1]
   102d4:	e3520000 	cmp	r2, #0
   102d8:	13550022 	cmpne	r5, #34	; 0x22
   102dc:	e3c2e010 	bic	lr, r2, #16
   102e0:	83a05001 	movhi	r5, #1
   102e4:	93a05000 	movls	r5, #0
   102e8:	8a000036 	bhi	103c8 <strtoul+0x104>
   102ec:	e1d0c0d0 	ldrsb	ip, [r0]
   102f0:	e1a04000 	mov	r4, r0
   102f4:	e2800001 	add	r0, r0, #1
   102f8:	e24c3009 	sub	r3, ip, #9
   102fc:	e35c0020 	cmp	ip, #32
   10300:	e6ef3073 	uxtb	r3, r3
   10304:	0afffff8 	beq	102ec <strtoul+0x28>
   10308:	e3530004 	cmp	r3, #4
   1030c:	9afffff6 	bls	102ec <strtoul+0x28>
   10310:	e35c002b 	cmp	ip, #43	; 0x2b
   10314:	0a00002d 	beq	103d0 <strtoul+0x10c>
   10318:	e35c002d 	cmp	ip, #45	; 0x2d
   1031c:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   10320:	03a06001 	moveq	r6, #1
   10324:	01a04000 	moveq	r4, r0
   10328:	13a06000 	movne	r6, #0
   1032c:	e35c0030 	cmp	ip, #48	; 0x30
   10330:	0a00002b 	beq	103e4 <strtoul+0x120>
   10334:	e3520000 	cmp	r2, #0
   10338:	03a0200a 	moveq	r2, #10
   1033c:	e35c002f 	cmp	ip, #47	; 0x2f
   10340:	e1a0300c 	mov	r3, ip
   10344:	da00001c 	ble	103bc <strtoul+0xf8>
   10348:	e3a05001 	mov	r5, #1
   1034c:	e3a0e000 	mov	lr, #0
   10350:	ea000007 	b	10374 <strtoul+0xb0>
   10354:	e150000e 	cmp	r0, lr
   10358:	e3a05000 	mov	r5, #0
   1035c:	e1a0e000 	mov	lr, r0
   10360:	3a000028 	bcc	10408 <strtoul+0x144>
   10364:	e1f430d1 	ldrsb	r3, [r4, #1]!
   10368:	e353002f 	cmp	r3, #47	; 0x2f
   1036c:	e1a0c003 	mov	ip, r3
   10370:	da000029 	ble	1041c <strtoul+0x158>
   10374:	e24cc061 	sub	ip, ip, #97	; 0x61
   10378:	e35c0019 	cmp	ip, #25
   1037c:	92433020 	subls	r3, r3, #32
   10380:	e3530040 	cmp	r3, #64	; 0x40
   10384:	c2433007 	subgt	r3, r3, #7
   10388:	e2433030 	sub	r3, r3, #48	; 0x30
   1038c:	e1520003 	cmp	r2, r3
   10390:	e020329e 	mla	r0, lr, r2, r3
   10394:	caffffee 	bgt	10354 <strtoul+0x90>
   10398:	e2255001 	eor	r5, r5, #1
   1039c:	e1a0000e 	mov	r0, lr
   103a0:	e3510000 	cmp	r1, #0
   103a4:	e0055006 	and	r5, r5, r6
   103a8:	0a000000 	beq	103b0 <strtoul+0xec>
   103ac:	e5814000 	str	r4, [r1]
   103b0:	e3550000 	cmp	r5, #0
   103b4:	12600000 	rsbne	r0, r0, #0
   103b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   103bc:	e3510000 	cmp	r1, #0
   103c0:	13a00000 	movne	r0, #0
   103c4:	1afffff8 	bne	103ac <strtoul+0xe8>
   103c8:	e3a00000 	mov	r0, #0
   103cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   103d0:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   103d4:	e3a06000 	mov	r6, #0
   103d8:	e1a04000 	mov	r4, r0
   103dc:	e35c0030 	cmp	ip, #48	; 0x30
   103e0:	1affffd3 	bne	10334 <strtoul+0x70>
   103e4:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   103e8:	e2840001 	add	r0, r4, #1
   103ec:	e3cc3020 	bic	r3, ip, #32
   103f0:	e3530058 	cmp	r3, #88	; 0x58
   103f4:	0a00000a 	beq	10424 <strtoul+0x160>
   103f8:	e3520000 	cmp	r2, #0
   103fc:	e1a04000 	mov	r4, r0
   10400:	03a02008 	moveq	r2, #8
   10404:	eaffffcc 	b	1033c <strtoul+0x78>
   10408:	e1510005 	cmp	r1, r5
   1040c:	0a00000a 	beq	1043c <strtoul+0x178>
   10410:	e5814000 	str	r4, [r1]
   10414:	e3e00000 	mvn	r0, #0
   10418:	e8bd8070 	pop	{r4, r5, r6, pc}
   1041c:	e3a05001 	mov	r5, #1
   10420:	eaffffde 	b	103a0 <strtoul+0xdc>
   10424:	e35e0000 	cmp	lr, #0
   10428:	1affffe6 	bne	103c8 <strtoul+0x104>
   1042c:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   10430:	e3a02010 	mov	r2, #16
   10434:	e2844002 	add	r4, r4, #2
   10438:	eaffffbf 	b	1033c <strtoul+0x78>
   1043c:	e3e00000 	mvn	r0, #0
   10440:	e8bd8070 	pop	{r4, r5, r6, pc}

00010444 <char2int>:
   10444:	e12fff1e 	bx	lr

00010448 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   10448:	e5903020 	ldr	r3, [r0, #32]
   1044c:	e3a01000 	mov	r1, #0
   10450:	e92d4010 	push	{r4, lr}
   10454:	e24dd010 	sub	sp, sp, #16
   10458:	e3a02c01 	mov	r2, #256	; 0x100
   1045c:	e583100c 	str	r1, [r3, #12]
   10460:	e5832010 	str	r2, [r3, #16]
   10464:	e1a04000 	mov	r4, r0
   10468:	e28d0008 	add	r0, sp, #8
   1046c:	ebffe091 	bl	86b8 <CBcmPropertyTags::CBcmPropertyTags()>
   10470:	e5942020 	ldr	r2, [r4, #32]
   10474:	e3003408 	movw	r3, #1032	; 0x408
   10478:	e28d0008 	add	r0, sp, #8
   1047c:	e58d3000 	str	r3, [sp]
   10480:	e308100b 	movw	r1, #32779	; 0x800b
   10484:	e3003414 	movw	r3, #1044	; 0x414
   10488:	e3401004 	movt	r1, #4
   1048c:	ebffe0d1 	bl	87d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10490:	e3500000 	cmp	r0, #0
   10494:	e28d0008 	add	r0, sp, #8
   10498:	0a000003 	beq	104ac <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
   1049c:	e5943020 	ldr	r3, [r4, #32]
   104a0:	e593300c 	ldr	r3, [r3, #12]
   104a4:	e3530000 	cmp	r3, #0
   104a8:	0a000003 	beq	104bc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
   104ac:	ebffe087 	bl	86d0 <CBcmPropertyTags::~CBcmPropertyTags()>
   104b0:	e3a00000 	mov	r0, #0
   104b4:	e28dd010 	add	sp, sp, #16
   104b8:	e8bd8010 	pop	{r4, pc}
   104bc:	ebffe083 	bl	86d0 <CBcmPropertyTags::~CBcmPropertyTags()>
   104c0:	e3a00001 	mov	r0, #1
   104c4:	e28dd010 	add	sp, sp, #16
   104c8:	e8bd8010 	pop	{r4, pc}

000104cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   104cc:	e92d4030 	push	{r4, r5, lr}
   104d0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   104d4:	e3510000 	cmp	r1, #0
   104d8:	13520000 	cmpne	r2, #0
   104dc:	e3a05000 	mov	r5, #0
   104e0:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
   104e4:	e1a04000 	mov	r4, r0
   104e8:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   104ec:	e8800006 	stm	r0, {r1, r2}
   104f0:	e5803010 	str	r3, [r0, #16]
   104f4:	e580e00c 	str	lr, [r0, #12]
   104f8:	e580c008 	str	ip, [r0, #8]
   104fc:	e5805014 	str	r5, [r0, #20]
   10500:	e5805018 	str	r5, [r0, #24]
   10504:	e580501c 	str	r5, [r0, #28]
   10508:	e5805020 	str	r5, [r0, #32]
   1050c:	1a000011 	bne	10558 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   10510:	e28d000c 	add	r0, sp, #12
   10514:	ebffe067 	bl	86b8 <CBcmPropertyTags::CBcmPropertyTags()>
   10518:	e3a03014 	mov	r3, #20
   1051c:	e58d5000 	str	r5, [sp]
   10520:	e28d000c 	add	r0, sp, #12
   10524:	e3a01003 	mov	r1, #3
   10528:	e08d2003 	add	r2, sp, r3
   1052c:	e3401004 	movt	r1, #4
   10530:	ebffe0a8 	bl	87d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10534:	e1500005 	cmp	r0, r5
   10538:	1a000027 	bne	105dc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   1053c:	e3a02d0a 	mov	r2, #640	; 0x280
   10540:	e3a03e1e 	mov	r3, #480	; 0x1e0
   10544:	e884000c 	stm	r4, {r2, r3}
   10548:	e28d000c 	add	r0, sp, #12
   1054c:	ebffe05f 	bl	86d0 <CBcmPropertyTags::~CBcmPropertyTags()>
   10550:	e594c008 	ldr	ip, [r4, #8]
   10554:	e5943010 	ldr	r3, [r4, #16]
   10558:	e35c0000 	cmp	ip, #0
   1055c:	0a00001a 	beq	105cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   10560:	e594200c 	ldr	r2, [r4, #12]
   10564:	e3520000 	cmp	r2, #0
   10568:	0a000017 	beq	105cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
   1056c:	e3530008 	cmp	r3, #8
   10570:	8a000007 	bhi	10594 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
   10574:	e3000414 	movw	r0, #1044	; 0x414
   10578:	ebffe48b 	bl	97ac <operator new[](unsigned int)>
   1057c:	e3a02b01 	mov	r2, #1024	; 0x400
   10580:	e3a01000 	mov	r1, #0
   10584:	e5840020 	str	r0, [r4, #32]
   10588:	e2800014 	add	r0, r0, #20
   1058c:	ebfffe95 	bl	ffe8 <memset>
   10590:	e5943010 	ldr	r3, [r4, #16]
   10594:	e5945000 	ldr	r5, [r4]
   10598:	e30228c4 	movw	r2, #10436	; 0x28c4
   1059c:	e594e004 	ldr	lr, [r4, #4]
   105a0:	e3402001 	movt	r2, #1
   105a4:	e594c008 	ldr	ip, [r4, #8]
   105a8:	e1a00004 	mov	r0, r4
   105ac:	e594100c 	ldr	r1, [r4, #12]
   105b0:	e582500c 	str	r5, [r2, #12]
   105b4:	e582e010 	str	lr, [r2, #16]
   105b8:	e582c020 	str	ip, [r2, #32]
   105bc:	e5821024 	str	r1, [r2, #36]	; 0x24
   105c0:	e5823034 	str	r3, [r2, #52]	; 0x34
   105c4:	e28dd02c 	add	sp, sp, #44	; 0x2c
   105c8:	e8bd8030 	pop	{r4, r5, pc}
   105cc:	e8940006 	ldm	r4, {r1, r2}
   105d0:	e5841008 	str	r1, [r4, #8]
   105d4:	e584200c 	str	r2, [r4, #12]
   105d8:	eaffffe3 	b	1056c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   105dc:	e59d2020 	ldr	r2, [sp, #32]
   105e0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   105e4:	e2420d0a 	sub	r0, r2, #640	; 0x280
   105e8:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   105ec:	e5842000 	str	r2, [r4]
   105f0:	e3510f96 	cmp	r1, #600	; 0x258
   105f4:	93500c05 	cmpls	r0, #1280	; 0x500
   105f8:	e5843004 	str	r3, [r4, #4]
   105fc:	9affffd1 	bls	10548 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   10600:	eaffffcd 	b	1053c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

00010604 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   10604:	e92d4010 	push	{r4, lr}
   10608:	e3a01014 	mov	r1, #20
   1060c:	e1a04000 	mov	r4, r0
   10610:	e5900020 	ldr	r0, [r0, #32]
   10614:	ebffe467 	bl	97b8 <operator delete(void*, unsigned int)>
   10618:	e1a00004 	mov	r0, r4
   1061c:	e8bd8010 	pop	{r4, pc}

00010620 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   10620:	e5903010 	ldr	r3, [r0, #16]
   10624:	e3530008 	cmp	r3, #8
   10628:	812fff1e 	bxhi	lr
   1062c:	e5900020 	ldr	r0, [r0, #32]
   10630:	e1a03982 	lsl	r3, r2, #19
   10634:	e1a0c5a2 	lsr	ip, r2, #11
   10638:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   1063c:	e0801101 	add	r1, r0, r1, lsl #2
   10640:	e1a02282 	lsl	r2, r2, #5
   10644:	e183318c 	orr	r3, r3, ip, lsl #3
   10648:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   1064c:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   10650:	e1822003 	orr	r2, r2, r3
   10654:	e5812014 	str	r2, [r1, #20]
   10658:	e12fff1e 	bx	lr

0001065c <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   1065c:	e5903010 	ldr	r3, [r0, #16]
   10660:	e3530008 	cmp	r3, #8
   10664:	95903020 	ldrls	r3, [r0, #32]
   10668:	90831101 	addls	r1, r3, r1, lsl #2
   1066c:	95812014 	strls	r2, [r1, #20]
   10670:	e12fff1e 	bx	lr

00010674 <CBcmFrameBuffer::Initialize()>:
   10674:	e92d4070 	push	{r4, r5, r6, lr}
   10678:	e24dd008 	sub	sp, sp, #8
   1067c:	e30268c4 	movw	r6, #10436	; 0x28c4
   10680:	e3406001 	movt	r6, #1
   10684:	e1a05000 	mov	r5, r0
   10688:	e1a0000d 	mov	r0, sp
   1068c:	ebffe009 	bl	86b8 <CBcmPropertyTags::CBcmPropertyTags()>
   10690:	e1a01006 	mov	r1, r6
   10694:	e1a0000d 	mov	r0, sp
   10698:	e3a02070 	mov	r2, #112	; 0x70
   1069c:	ebffe010 	bl	86e4 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   106a0:	e2504000 	subs	r4, r0, #0
   106a4:	0a00001e 	beq	10724 <CBcmFrameBuffer::Initialize()+0xb0>
   106a8:	e596400c 	ldr	r4, [r6, #12]
   106ac:	e3540000 	cmp	r4, #0
   106b0:	0a00001b 	beq	10724 <CBcmFrameBuffer::Initialize()+0xb0>
   106b4:	e5964010 	ldr	r4, [r6, #16]
   106b8:	e3540000 	cmp	r4, #0
   106bc:	0a000018 	beq	10724 <CBcmFrameBuffer::Initialize()+0xb0>
   106c0:	e5964020 	ldr	r4, [r6, #32]
   106c4:	e3540000 	cmp	r4, #0
   106c8:	0a000015 	beq	10724 <CBcmFrameBuffer::Initialize()+0xb0>
   106cc:	e5964024 	ldr	r4, [r6, #36]	; 0x24
   106d0:	e3540000 	cmp	r4, #0
   106d4:	0a000012 	beq	10724 <CBcmFrameBuffer::Initialize()+0xb0>
   106d8:	e5964034 	ldr	r4, [r6, #52]	; 0x34
   106dc:	e3540000 	cmp	r4, #0
   106e0:	0a00000f 	beq	10724 <CBcmFrameBuffer::Initialize()+0xb0>
   106e4:	e5964058 	ldr	r4, [r6, #88]	; 0x58
   106e8:	e3540000 	cmp	r4, #0
   106ec:	0a00000c 	beq	10724 <CBcmFrameBuffer::Initialize()+0xb0>
   106f0:	e5951010 	ldr	r1, [r5, #16]
   106f4:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
   106f8:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
   106fc:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
   10700:	e3510008 	cmp	r1, #8
   10704:	e5854014 	str	r4, [r5, #20]
   10708:	e5852018 	str	r2, [r5, #24]
   1070c:	83a04001 	movhi	r4, #1
   10710:	e585301c 	str	r3, [r5, #28]
   10714:	8a000002 	bhi	10724 <CBcmFrameBuffer::Initialize()+0xb0>
   10718:	e1a00005 	mov	r0, r5
   1071c:	ebffff49 	bl	10448 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   10720:	e1a04000 	mov	r4, r0
   10724:	e1a0000d 	mov	r0, sp
   10728:	ebffdfe8 	bl	86d0 <CBcmPropertyTags::~CBcmPropertyTags()>
   1072c:	e1a00004 	mov	r0, r4
   10730:	e28dd008 	add	sp, sp, #8
   10734:	e8bd8070 	pop	{r4, r5, r6, pc}

00010738 <CBcmFrameBuffer::GetWidth() const>:
   10738:	e5900000 	ldr	r0, [r0]
   1073c:	e12fff1e 	bx	lr

00010740 <CBcmFrameBuffer::GetHeight() const>:
   10740:	e5900004 	ldr	r0, [r0, #4]
   10744:	e12fff1e 	bx	lr

00010748 <CBcmFrameBuffer::GetVirtWidth() const>:
   10748:	e5900008 	ldr	r0, [r0, #8]
   1074c:	e12fff1e 	bx	lr

00010750 <CBcmFrameBuffer::GetVirtHeight() const>:
   10750:	e590000c 	ldr	r0, [r0, #12]
   10754:	e12fff1e 	bx	lr

00010758 <CBcmFrameBuffer::GetPitch() const>:
   10758:	e590001c 	ldr	r0, [r0, #28]
   1075c:	e12fff1e 	bx	lr

00010760 <CBcmFrameBuffer::GetDepth() const>:
   10760:	e5900010 	ldr	r0, [r0, #16]
   10764:	e12fff1e 	bx	lr

00010768 <CBcmFrameBuffer::GetBuffer() const>:
   10768:	e5900014 	ldr	r0, [r0, #20]
   1076c:	e12fff1e 	bx	lr

00010770 <CBcmFrameBuffer::GetSize() const>:
   10770:	e5900018 	ldr	r0, [r0, #24]
   10774:	e12fff1e 	bx	lr

00010778 <CBcmFrameBuffer::UpdatePalette()>:
   10778:	e5903010 	ldr	r3, [r0, #16]
   1077c:	e3530008 	cmp	r3, #8
   10780:	9a000001 	bls	1078c <CBcmFrameBuffer::UpdatePalette()+0x14>
   10784:	e3a00001 	mov	r0, #1
   10788:	e12fff1e 	bx	lr
   1078c:	eaffff2d 	b	10448 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00010790 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   10790:	e92d4070 	push	{r4, r5, r6, lr}
   10794:	e24dd028 	sub	sp, sp, #40	; 0x28
   10798:	e28d000c 	add	r0, sp, #12
   1079c:	e1a05001 	mov	r5, r1
   107a0:	e1a06002 	mov	r6, r2
   107a4:	ebffdfc3 	bl	86b8 <CBcmPropertyTags::CBcmPropertyTags()>
   107a8:	e3a03008 	mov	r3, #8
   107ac:	e28d000c 	add	r0, sp, #12
   107b0:	e58d3000 	str	r3, [sp]
   107b4:	e3081009 	movw	r1, #32777	; 0x8009
   107b8:	e3a03014 	mov	r3, #20
   107bc:	e3401004 	movt	r1, #4
   107c0:	e08d2003 	add	r2, sp, r3
   107c4:	e58d5020 	str	r5, [sp, #32]
   107c8:	e58d6024 	str	r6, [sp, #36]	; 0x24
   107cc:	ebffe001 	bl	87d8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   107d0:	e2504000 	subs	r4, r0, #0
   107d4:	0a000006 	beq	107f4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   107d8:	e59d3020 	ldr	r3, [sp, #32]
   107dc:	e1550003 	cmp	r5, r3
   107e0:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   107e4:	13a04000 	movne	r4, #0
   107e8:	00444006 	subeq	r4, r4, r6
   107ec:	016f4f14 	clzeq	r4, r4
   107f0:	01a042a4 	lsreq	r4, r4, #5
   107f4:	e28d000c 	add	r0, sp, #12
   107f8:	ebffdfb4 	bl	86d0 <CBcmPropertyTags::~CBcmPropertyTags()>
   107fc:	e1a00004 	mov	r0, r4
   10800:	e28dd028 	add	sp, sp, #40	; 0x28
   10804:	e8bd8070 	pop	{r4, r5, r6, pc}

00010808 <CDevice::~CDevice()>:
   10808:	e12fff1e 	bx	lr

0001080c <CDevice::Read(void*, unsigned int)>:
   1080c:	e3e00000 	mvn	r0, #0
   10810:	e12fff1e 	bx	lr

00010814 <CDevice::Seek(unsigned long long)>:
   10814:	e3e00000 	mvn	r0, #0
   10818:	e3e01000 	mvn	r1, #0
   1081c:	e12fff1e 	bx	lr

00010820 <CDevice::~CDevice()>:
   10820:	e92d4010 	push	{r4, lr}
   10824:	e3a01004 	mov	r1, #4
   10828:	e1a04000 	mov	r4, r0
   1082c:	ebffe3e1 	bl	97b8 <operator delete(void*, unsigned int)>
   10830:	e1a00004 	mov	r0, r4
   10834:	e8bd8010 	pop	{r4, pc}

00010838 <CDevice::CDevice()>:
   10838:	e59f3004 	ldr	r3, [pc, #4]	; 10844 <CDevice::CDevice()+0xc>
   1083c:	e5803000 	str	r3, [r0]
   10840:	e12fff1e 	bx	lr
   10844:	00012814 	.word	0x00012814

00010848 <__Divide>:
   10848:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1084c:	e2514000 	subs	r4, r1, #0
   10850:	e1a06000 	mov	r6, r0
   10854:	e1a07002 	mov	r7, r2
   10858:	0a000021 	beq	108e4 <__Divide+0x9c>
   1085c:	e3a03000 	mov	r3, #0
   10860:	e3a05000 	mov	r5, #0
   10864:	e1530005 	cmp	r3, r5
   10868:	e1a02004 	mov	r2, r4
   1086c:	01520006 	cmpeq	r2, r6
   10870:	e1a04006 	mov	r4, r6
   10874:	2a000024 	bcs	1090c <__Divide+0xc4>
   10878:	e3a01001 	mov	r1, #1
   1087c:	ea000000 	b	10884 <__Divide+0x3c>
   10880:	e1a01000 	mov	r1, r0
   10884:	e0922002 	adds	r2, r2, r2
   10888:	e2810001 	add	r0, r1, #1
   1088c:	e0a33003 	adc	r3, r3, r3
   10890:	e1530005 	cmp	r3, r5
   10894:	01520004 	cmpeq	r2, r4
   10898:	3afffff8 	bcc	10880 <__Divide+0x38>
   1089c:	e3500000 	cmp	r0, #0
   108a0:	0a00000c 	beq	108d8 <__Divide+0x90>
   108a4:	e3a00000 	mov	r0, #0
   108a8:	e1550003 	cmp	r5, r3
   108ac:	e2411001 	sub	r1, r1, #1
   108b0:	01540002 	cmpeq	r4, r2
   108b4:	e1a00080 	lsl	r0, r0, #1
   108b8:	20466002 	subcs	r6, r6, r2
   108bc:	23800001 	orrcs	r0, r0, #1
   108c0:	e1b030a3 	lsrs	r3, r3, #1
   108c4:	e1a02062 	rrx	r2, r2
   108c8:	e3710001 	cmn	r1, #1
   108cc:	e1a04006 	mov	r4, r6
   108d0:	e3a05000 	mov	r5, #0
   108d4:	1afffff3 	bne	108a8 <__Divide+0x60>
   108d8:	e3570000 	cmp	r7, #0
   108dc:	15876000 	strne	r6, [r7]
   108e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   108e4:	e3a0201f 	mov	r2, #31
   108e8:	e3021828 	movw	r1, #10280	; 0x2828
   108ec:	e3020244 	movw	r0, #8772	; 0x2244
   108f0:	e3401001 	movt	r1, #1
   108f4:	e3400001 	movt	r0, #1
   108f8:	ebffed86 	bl	bf18 <assertion_failed>
   108fc:	ebfff671 	bl	e2c8 <CExceptionHandler::Get()>
   10900:	e1a01004 	mov	r1, r4
   10904:	ebfff627 	bl	e1a8 <CExceptionHandler::Throw(unsigned int)>
   10908:	eaffffd3 	b	1085c <__Divide+0x14>
   1090c:	e3a01000 	mov	r1, #0
   10910:	eaffffe3 	b	108a4 <__Divide+0x5c>

00010914 <__DivideInteger>:
   10914:	e2502000 	subs	r2, r0, #0
   10918:	e92d4010 	push	{r4, lr}
   1091c:	ba000004 	blt	10934 <__DivideInteger+0x20>
   10920:	e3510000 	cmp	r1, #0
   10924:	ba00000e 	blt	10964 <__DivideInteger+0x50>
   10928:	e3a02000 	mov	r2, #0
   1092c:	e8bd4010 	pop	{r4, lr}
   10930:	eaffffc4 	b	10848 <__Divide>
   10934:	e3510000 	cmp	r1, #0
   10938:	ba000004 	blt	10950 <__DivideInteger+0x3c>
   1093c:	e2620000 	rsb	r0, r2, #0
   10940:	e3a02000 	mov	r2, #0
   10944:	ebffffbf 	bl	10848 <__Divide>
   10948:	e2600000 	rsb	r0, r0, #0
   1094c:	e8bd8010 	pop	{r4, pc}
   10950:	e2620000 	rsb	r0, r2, #0
   10954:	e2611000 	rsb	r1, r1, #0
   10958:	e3a02000 	mov	r2, #0
   1095c:	e8bd4010 	pop	{r4, lr}
   10960:	eaffffb8 	b	10848 <__Divide>
   10964:	e2611000 	rsb	r1, r1, #0
   10968:	e3a02000 	mov	r2, #0
   1096c:	ebffffb5 	bl	10848 <__Divide>
   10970:	e2600000 	rsb	r0, r0, #0
   10974:	e8bd8010 	pop	{r4, pc}
